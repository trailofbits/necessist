$DIR/test/advanced.spec.ts:159:7-159:74: `await set1155ApprovalForAll(seller, offererContract.address, true);`
$DIR/test/advanced.spec.ts:162:38-162:46: `.mul(10)`
$DIR/test/advanced.spec.ts:162:54-162:62: `.mul(10)`
$DIR/test/advanced.spec.ts:167:17-167:27: `.mul(1000)`
$DIR/test/advanced.spec.ts:168:17-168:27: `.mul(1000)`
$DIR/test/advanced.spec.ts:173:7-173:59: `offer[0].identifier = offer[0].identifierOrCriteria;`
$DIR/test/advanced.spec.ts:174:7-174:44: `offer[0].amount = offer[0].endAmount;`
$DIR/test/advanced.spec.ts:176:7-176:75: `consideration[0].identifier = consideration[0].identifierOrCriteria;`
$DIR/test/advanced.spec.ts:177:7-177:60: `consideration[0].amount = consideration[0].endAmount;`
$DIR/test/advanced.spec.ts:179:7-181:47: `await offererContract
        .connect(seller)
        .activate(offer[0], consideration[0]);`
$DIR/test/advanced.spec.ts:180:9-180:25: `.connect(seller)`
$DIR/test/advanced.spec.ts:181:9-181:46: `.activate(offer[0], consideration[0])`
$DIR/test/advanced.spec.ts:192:34-194:10: `.getContractOffererNonce(
          offererContract.address
        )`
$DIR/test/advanced.spec.ts:197:24-197:46: `.address.toLowerCase()`
$DIR/test/advanced.spec.ts:198:29-198:43: `.toHexString()`
$DIR/test/advanced.spec.ts:198:43-198:52: `.slice(2)`
$DIR/test/advanced.spec.ts:198:52-198:70: `.padStart(24, "0")`
$DIR/test/advanced.spec.ts:200:52-200:78: `.getOrderStatus(orderHash)`
$DIR/test/advanced.spec.ts:206:7-206:58: `order.parameters.offerer = offererContract.address;`
$DIR/test/advanced.spec.ts:207:7-207:27: `order.numerator = 1;`
$DIR/test/advanced.spec.ts:208:7-208:29: `order.denominator = 1;`
$DIR/test/advanced.spec.ts:209:7-209:30: `order.signature = "0x";`
$DIR/test/advanced.spec.ts:213:11-213:26: `.connect(buyer)`
$DIR/test/advanced.spec.ts:214:11-222:12: `.fulfillAdvancedOrder(
            order,
            [],
            toKey(0),
            ethers.constants.AddressZero,
            {
              value,
            }
          )`
$DIR/test/advanced.spec.ts:223:41-223:48: `.wait()`
$DIR/test/advanced.spec.ts:257:7-257:74: `await set1155ApprovalForAll(seller, offererContract.address, true);`
$DIR/test/advanced.spec.ts:260:38-260:46: `.mul(10)`
$DIR/test/advanced.spec.ts:260:54-260:62: `.mul(10)`
$DIR/test/advanced.spec.ts:265:17-265:27: `.mul(1000)`
$DIR/test/advanced.spec.ts:266:17-266:27: `.mul(1000)`
$DIR/test/advanced.spec.ts:271:7-271:59: `offer[0].identifier = offer[0].identifierOrCriteria;`
$DIR/test/advanced.spec.ts:272:7-272:44: `offer[0].amount = offer[0].endAmount;`
$DIR/test/advanced.spec.ts:274:7-274:75: `consideration[0].identifier = consideration[0].identifierOrCriteria;`
$DIR/test/advanced.spec.ts:275:7-275:60: `consideration[0].amount = consideration[0].endAmount;`
$DIR/test/advanced.spec.ts:277:7-279:47: `await offererContract
        .connect(seller)
        .activate(offer[0], consideration[0]);`
$DIR/test/advanced.spec.ts:278:9-278:25: `.connect(seller)`
$DIR/test/advanced.spec.ts:279:9-279:46: `.activate(offer[0], consideration[0])`
$DIR/test/advanced.spec.ts:290:34-292:10: `.getContractOffererNonce(
          offererContract.address
        )`
$DIR/test/advanced.spec.ts:295:24-295:46: `.address.toLowerCase()`
$DIR/test/advanced.spec.ts:296:29-296:43: `.toHexString()`
$DIR/test/advanced.spec.ts:296:43-296:52: `.slice(2)`
$DIR/test/advanced.spec.ts:296:52-296:70: `.padStart(24, "0")`
$DIR/test/advanced.spec.ts:298:52-298:78: `.getOrderStatus(orderHash)`
$DIR/test/advanced.spec.ts:304:7-304:58: `order.parameters.offerer = offererContract.address;`
$DIR/test/advanced.spec.ts:305:7-305:27: `order.numerator = 1;`
$DIR/test/advanced.spec.ts:306:7-306:29: `order.denominator = 1;`
$DIR/test/advanced.spec.ts:307:7-307:30: `order.signature = "0x";`
$DIR/test/advanced.spec.ts:309:37-309:66: `.parse(JSON.stringify(order))`
$DIR/test/advanced.spec.ts:309:48-309:65: `.stringify(order)`
$DIR/test/advanced.spec.ts:310:7-310:47: `orderWithoutOffer.parameters.offer = [];`
$DIR/test/advanced.spec.ts:314:11-314:26: `.connect(buyer)`
$DIR/test/advanced.spec.ts:315:11-323:12: `.fulfillAdvancedOrder(
            orderWithoutOffer,
            [],
            toKey(0),
            ethers.constants.AddressZero,
            {
              value,
            }
          )`
$DIR/test/advanced.spec.ts:324:41-324:48: `.wait()`
$DIR/test/advanced.spec.ts:358:7-358:74: `await set1155ApprovalForAll(seller, offererContract.address, true);`
$DIR/test/advanced.spec.ts:361:38-361:46: `.mul(10)`
$DIR/test/advanced.spec.ts:361:54-361:62: `.mul(10)`
$DIR/test/advanced.spec.ts:366:17-366:27: `.mul(1000)`
$DIR/test/advanced.spec.ts:367:17-367:27: `.mul(1000)`
$DIR/test/advanced.spec.ts:372:7-372:59: `offer[0].identifier = offer[0].identifierOrCriteria;`
$DIR/test/advanced.spec.ts:373:7-373:44: `offer[0].amount = offer[0].endAmount;`
$DIR/test/advanced.spec.ts:375:7-375:75: `consideration[0].identifier = consideration[0].identifierOrCriteria;`
$DIR/test/advanced.spec.ts:376:7-376:60: `consideration[0].amount = consideration[0].endAmount;`
$DIR/test/advanced.spec.ts:378:7-380:47: `await offererContract
        .connect(seller)
        .activate(offer[0], consideration[0]);`
$DIR/test/advanced.spec.ts:379:9-379:25: `.connect(seller)`
$DIR/test/advanced.spec.ts:380:9-380:46: `.activate(offer[0], consideration[0])`
$DIR/test/advanced.spec.ts:391:34-393:10: `.getContractOffererNonce(
          offererContract.address
        )`
$DIR/test/advanced.spec.ts:396:24-396:46: `.address.toLowerCase()`
$DIR/test/advanced.spec.ts:397:29-397:43: `.toHexString()`
$DIR/test/advanced.spec.ts:397:43-397:52: `.slice(2)`
$DIR/test/advanced.spec.ts:397:52-397:70: `.padStart(24, "0")`
$DIR/test/advanced.spec.ts:399:52-399:78: `.getOrderStatus(orderHash)`
$DIR/test/advanced.spec.ts:405:7-405:58: `order.parameters.offerer = offererContract.address;`
$DIR/test/advanced.spec.ts:406:7-406:27: `order.numerator = 1;`
$DIR/test/advanced.spec.ts:407:7-407:29: `order.denominator = 1;`
$DIR/test/advanced.spec.ts:408:7-408:30: `order.signature = "0x";`
$DIR/test/advanced.spec.ts:410:47-410:76: `.parse(JSON.stringify(order))`
$DIR/test/advanced.spec.ts:410:58-410:75: `.stringify(order)`
$DIR/test/advanced.spec.ts:411:7-412:54: `orderWithSmallerOfferAmount.parameters.offer[0].startAmount =
        order.parameters.offer[0].startAmount.sub(1);`
$DIR/test/advanced.spec.ts:412:34-412:53: `.startAmount.sub(1)`
$DIR/test/advanced.spec.ts:413:7-414:52: `orderWithSmallerOfferAmount.parameters.offer[0].endAmount =
        order.parameters.offer[0].endAmount.sub(1);`
$DIR/test/advanced.spec.ts:414:34-414:51: `.endAmount.sub(1)`
$DIR/test/advanced.spec.ts:418:11-418:26: `.connect(buyer)`
$DIR/test/advanced.spec.ts:419:11-427:12: `.fulfillAdvancedOrder(
            orderWithSmallerOfferAmount,
            [],
            toKey(0),
            ethers.constants.AddressZero,
            {
              value,
            }
          )`
$DIR/test/advanced.spec.ts:428:41-428:48: `.wait()`
$DIR/test/advanced.spec.ts:462:7-462:74: `await set1155ApprovalForAll(seller, offererContract.address, true);`
$DIR/test/advanced.spec.ts:465:38-465:46: `.mul(10)`
$DIR/test/advanced.spec.ts:465:54-465:62: `.mul(10)`
$DIR/test/advanced.spec.ts:470:17-470:27: `.mul(1000)`
$DIR/test/advanced.spec.ts:471:17-471:27: `.mul(1000)`
$DIR/test/advanced.spec.ts:476:7-476:59: `offer[0].identifier = offer[0].identifierOrCriteria;`
$DIR/test/advanced.spec.ts:477:7-477:44: `offer[0].amount = offer[0].endAmount;`
$DIR/test/advanced.spec.ts:479:7-479:75: `consideration[0].identifier = consideration[0].identifierOrCriteria;`
$DIR/test/advanced.spec.ts:480:7-480:60: `consideration[0].amount = consideration[0].endAmount;`
$DIR/test/advanced.spec.ts:482:7-484:47: `await offererContract
        .connect(seller)
        .activate(offer[0], consideration[0]);`
$DIR/test/advanced.spec.ts:483:9-483:25: `.connect(seller)`
$DIR/test/advanced.spec.ts:484:9-484:46: `.activate(offer[0], consideration[0])`
$DIR/test/advanced.spec.ts:495:34-497:10: `.getContractOffererNonce(
          offererContract.address
        )`
$DIR/test/advanced.spec.ts:500:24-500:46: `.address.toLowerCase()`
$DIR/test/advanced.spec.ts:501:29-501:43: `.toHexString()`
$DIR/test/advanced.spec.ts:501:43-501:52: `.slice(2)`
$DIR/test/advanced.spec.ts:501:52-501:70: `.padStart(24, "0")`
$DIR/test/advanced.spec.ts:503:52-503:78: `.getOrderStatus(orderHash)`
$DIR/test/advanced.spec.ts:509:7-509:58: `order.parameters.offerer = offererContract.address;`
$DIR/test/advanced.spec.ts:510:7-510:27: `order.numerator = 1;`
$DIR/test/advanced.spec.ts:511:7-511:29: `order.denominator = 1;`
$DIR/test/advanced.spec.ts:512:7-512:30: `order.signature = "0x";`
$DIR/test/advanced.spec.ts:514:42-514:71: `.parse(JSON.stringify(order))`
$DIR/test/advanced.spec.ts:514:53-514:70: `.stringify(order)`
$DIR/test/advanced.spec.ts:515:7-515:63: `orderWithCriteriaOffer.parameters.offer[0].itemType = 5;`
$DIR/test/advanced.spec.ts:516:7-516:75: `orderWithCriteriaOffer.parameters.offer[0].identifierOrCriteria = 0;`
$DIR/test/advanced.spec.ts:520:11-520:26: `.connect(buyer)`
$DIR/test/advanced.spec.ts:521:11-529:12: `.fulfillAdvancedOrder(
            orderWithCriteriaOffer,
            [],
            toKey(0),
            ethers.constants.AddressZero,
            {
              value,
            }
          )`
$DIR/test/advanced.spec.ts:530:41-530:48: `.wait()`
$DIR/test/advanced.spec.ts:566:7-566:74: `await set1155ApprovalForAll(seller, offererContract.address, true);`
$DIR/test/advanced.spec.ts:574:17-574:27: `.mul(1000)`
$DIR/test/advanced.spec.ts:575:17-575:27: `.mul(1000)`
$DIR/test/advanced.spec.ts:581:7-581:29: `offer[0].itemType = 3;`
$DIR/test/advanced.spec.ts:582:7-582:35: `offer[0].identifier = nftId;`
$DIR/test/advanced.spec.ts:583:7-583:44: `offer[0].amount = offer[0].endAmount;`
$DIR/test/advanced.spec.ts:585:7-585:75: `consideration[0].identifier = consideration[0].identifierOrCriteria;`
$DIR/test/advanced.spec.ts:586:7-586:60: `consideration[0].amount = consideration[0].endAmount;`
$DIR/test/advanced.spec.ts:588:7-590:47: `await offererContract
        .connect(seller)
        .activate(offer[0], consideration[0]);`
$DIR/test/advanced.spec.ts:589:9-589:25: `.connect(seller)`
$DIR/test/advanced.spec.ts:590:9-590:46: `.activate(offer[0], consideration[0])`
$DIR/test/advanced.spec.ts:593:7-593:29: `offer[0].itemType = 5;`
$DIR/test/advanced.spec.ts:594:7-594:59: `offer[0].identifier = offer[0].identifierOrCriteria;`
$DIR/test/advanced.spec.ts:609:34-611:10: `.getContractOffererNonce(
          offererContract.address
        )`
$DIR/test/advanced.spec.ts:614:24-614:46: `.address.toLowerCase()`
$DIR/test/advanced.spec.ts:615:29-615:43: `.toHexString()`
$DIR/test/advanced.spec.ts:615:43-615:52: `.slice(2)`
$DIR/test/advanced.spec.ts:615:52-615:70: `.padStart(24, "0")`
$DIR/test/advanced.spec.ts:617:52-617:78: `.getOrderStatus(orderHash)`
$DIR/test/advanced.spec.ts:624:7-624:58: `order.parameters.offerer = offererContract.address;`
$DIR/test/advanced.spec.ts:625:7-625:27: `order.numerator = 1;`
$DIR/test/advanced.spec.ts:626:7-626:29: `order.denominator = 1;`
$DIR/test/advanced.spec.ts:627:7-627:30: `order.signature = "0x";`
$DIR/test/advanced.spec.ts:629:7-629:52: `order.parameters.offer[0].identifier = nftId;`
$DIR/test/advanced.spec.ts:630:42-630:71: `.parse(JSON.stringify(order))`
$DIR/test/advanced.spec.ts:630:53-630:70: `.stringify(order)`
$DIR/test/advanced.spec.ts:634:11-634:26: `.connect(buyer)`
$DIR/test/advanced.spec.ts:635:11-643:12: `.fulfillAdvancedOrder(
            orderWithCriteriaOffer,
            criteriaResolvers,
            toKey(0),
            ethers.constants.AddressZero,
            {
              value,
            }
          )`
$DIR/test/advanced.spec.ts:644:41-644:48: `.wait()`
$DIR/test/advanced.spec.ts:645:55-647:10: `.getOrderStatus(
          orderHash
        )`
$DIR/test/advanced.spec.ts:686:7-686:74: `await set1155ApprovalForAll(seller, offererContract.address, true);`
$DIR/test/advanced.spec.ts:689:38-689:46: `.mul(10)`
$DIR/test/advanced.spec.ts:689:54-689:62: `.mul(10)`
$DIR/test/advanced.spec.ts:694:17-694:27: `.mul(1000)`
$DIR/test/advanced.spec.ts:695:17-695:27: `.mul(1000)`
$DIR/test/advanced.spec.ts:700:7-700:59: `offer[0].identifier = offer[0].identifierOrCriteria;`
$DIR/test/advanced.spec.ts:701:7-701:44: `offer[0].amount = offer[0].endAmount;`
$DIR/test/advanced.spec.ts:703:7-703:75: `consideration[0].identifier = consideration[0].identifierOrCriteria;`
$DIR/test/advanced.spec.ts:704:7-704:60: `consideration[0].amount = consideration[0].endAmount;`
$DIR/test/advanced.spec.ts:706:7-708:47: `await offererContract
        .connect(seller)
        .activate(offer[0], consideration[0]);`
$DIR/test/advanced.spec.ts:707:9-707:25: `.connect(seller)`
$DIR/test/advanced.spec.ts:708:9-708:46: `.activate(offer[0], consideration[0])`
$DIR/test/advanced.spec.ts:719:34-721:10: `.getContractOffererNonce(
          offererContract.address
        )`
$DIR/test/advanced.spec.ts:724:24-724:46: `.address.toLowerCase()`
$DIR/test/advanced.spec.ts:725:29-725:43: `.toHexString()`
$DIR/test/advanced.spec.ts:725:43-725:52: `.slice(2)`
$DIR/test/advanced.spec.ts:725:52-725:70: `.padStart(24, "0")`
$DIR/test/advanced.spec.ts:727:52-727:78: `.getOrderStatus(orderHash)`
$DIR/test/advanced.spec.ts:733:7-733:58: `order.parameters.offerer = offererContract.address;`
$DIR/test/advanced.spec.ts:734:7-734:27: `order.numerator = 1;`
$DIR/test/advanced.spec.ts:735:7-735:29: `order.denominator = 1;`
$DIR/test/advanced.spec.ts:736:7-736:30: `order.signature = "0x";`
$DIR/test/advanced.spec.ts:738:41-738:70: `.parse(JSON.stringify(order))`
$DIR/test/advanced.spec.ts:738:52-738:69: `.stringify(order)`
$DIR/test/advanced.spec.ts:739:7-740:54: `orderWithSmallerOffer.parameters.offer[0].startAmount =
        order.parameters.offer[0].startAmount.div(2);`
$DIR/test/advanced.spec.ts:740:34-740:53: `.startAmount.div(2)`
$DIR/test/advanced.spec.ts:741:7-742:52: `orderWithSmallerOffer.parameters.offer[0].endAmount =
        order.parameters.offer[0].endAmount.div(2);`
$DIR/test/advanced.spec.ts:742:34-742:51: `.endAmount.div(2)`
$DIR/test/advanced.spec.ts:744:7-745:54: `order.parameters.offer[0].startAmount =
        order.parameters.offer[0].startAmount.div(2);`
$DIR/test/advanced.spec.ts:745:34-745:53: `.startAmount.div(2)`
$DIR/test/advanced.spec.ts:746:7-747:52: `order.parameters.offer[0].endAmount =
        order.parameters.offer[0].endAmount.div(2);`
$DIR/test/advanced.spec.ts:747:34-747:51: `.endAmount.div(2)`
$DIR/test/advanced.spec.ts:748:7-748:62: `order.parameters.offer.push(order.parameters.offer[0]);`
$DIR/test/advanced.spec.ts:748:12-748:61: `.parameters.offer.push(order.parameters.offer[0])`
$DIR/test/advanced.spec.ts:750:7-750:63: `await offererContract.connect(seller).extendAvailable();`
$DIR/test/advanced.spec.ts:750:28-750:44: `.connect(seller)`
$DIR/test/advanced.spec.ts:750:44-750:62: `.extendAvailable()`
$DIR/test/advanced.spec.ts:754:9-754:24: `.connect(buyer)`
$DIR/test/advanced.spec.ts:755:9-763:10: `.fulfillAdvancedOrder(
          orderWithSmallerOffer,
          [],
          toKey(0),
          ethers.constants.AddressZero,
          {
            value,
          }
        )`
$DIR/test/advanced.spec.ts:764:39-764:46: `.wait()`
$DIR/test/advanced.spec.ts:795:7-795:74: `await set1155ApprovalForAll(seller, offererContract.address, true);`
$DIR/test/advanced.spec.ts:798:38-798:46: `.mul(10)`
$DIR/test/advanced.spec.ts:798:54-798:62: `.mul(10)`
$DIR/test/advanced.spec.ts:803:17-803:27: `.mul(1000)`
$DIR/test/advanced.spec.ts:804:17-804:27: `.mul(1000)`
$DIR/test/advanced.spec.ts:809:7-809:59: `offer[0].identifier = offer[0].identifierOrCriteria;`
$DIR/test/advanced.spec.ts:810:7-810:44: `offer[0].amount = offer[0].endAmount;`
$DIR/test/advanced.spec.ts:812:7-812:75: `consideration[0].identifier = consideration[0].identifierOrCriteria;`
$DIR/test/advanced.spec.ts:813:7-813:60: `consideration[0].amount = consideration[0].endAmount;`
$DIR/test/advanced.spec.ts:815:7-817:47: `await offererContract
        .connect(seller)
        .activate(offer[0], consideration[0]);`
$DIR/test/advanced.spec.ts:816:9-816:25: `.connect(seller)`
$DIR/test/advanced.spec.ts:817:9-817:46: `.activate(offer[0], consideration[0])`
$DIR/test/advanced.spec.ts:828:34-830:10: `.getContractOffererNonce(
          offererContract.address
        )`
$DIR/test/advanced.spec.ts:833:24-833:46: `.address.toLowerCase()`
$DIR/test/advanced.spec.ts:834:29-834:43: `.toHexString()`
$DIR/test/advanced.spec.ts:834:43-834:52: `.slice(2)`
$DIR/test/advanced.spec.ts:834:52-834:70: `.padStart(24, "0")`
$DIR/test/advanced.spec.ts:836:52-836:78: `.getOrderStatus(orderHash)`
$DIR/test/advanced.spec.ts:842:7-842:58: `order.parameters.offerer = offererContract.address;`
$DIR/test/advanced.spec.ts:843:7-843:27: `order.numerator = 1;`
$DIR/test/advanced.spec.ts:844:7-844:29: `order.denominator = 1;`
$DIR/test/advanced.spec.ts:845:7-845:30: `order.signature = "0x";`
$DIR/test/advanced.spec.ts:847:47-847:76: `.parse(JSON.stringify(order))`
$DIR/test/advanced.spec.ts:847:58-847:75: `.stringify(order)`
$DIR/test/advanced.spec.ts:848:7-854:9: `orderWithExtraConsideration.parameters.consideration.push(
        JSON.parse(
          JSON.stringify(
            orderWithExtraConsideration.parameters.consideration[0]
          )
        )
      );`
$DIR/test/advanced.spec.ts:848:34-854:8: `.parameters.consideration.push(
        JSON.parse(
          JSON.stringify(
            orderWithExtraConsideration.parameters.consideration[0]
          )
        )
      )`
$DIR/test/advanced.spec.ts:849:13-853:10: `.parse(
          JSON.stringify(
            orderWithExtraConsideration.parameters.consideration[0]
          )
        )`
$DIR/test/advanced.spec.ts:850:15-852:12: `.stringify(
            orderWithExtraConsideration.parameters.consideration[0]
          )`
$DIR/test/advanced.spec.ts:855:7-855:76: `orderWithExtraConsideration.parameters.consideration[1].itemType = 1;`
$DIR/test/advanced.spec.ts:856:7-857:30: `orderWithExtraConsideration.parameters.consideration[1].token =
        "0x".padEnd(42, "1");`
$DIR/test/advanced.spec.ts:857:13-857:29: `.padEnd(42, "1")`
$DIR/test/advanced.spec.ts:858:7-858:80: `orderWithExtraConsideration.parameters.totalOriginalConsiderationItems++;`
$DIR/test/advanced.spec.ts:862:11-862:26: `.connect(buyer)`
$DIR/test/advanced.spec.ts:863:11-871:12: `.fulfillAdvancedOrder(
            orderWithExtraConsideration,
            [],
            toKey(0),
            ethers.constants.AddressZero,
            {
              value,
            }
          )`
$DIR/test/advanced.spec.ts:872:41-872:48: `.wait()`
$DIR/test/advanced.spec.ts:906:7-906:74: `await set1155ApprovalForAll(seller, offererContract.address, true);`
$DIR/test/advanced.spec.ts:909:38-909:46: `.mul(10)`
$DIR/test/advanced.spec.ts:909:54-909:62: `.mul(10)`
$DIR/test/advanced.spec.ts:914:17-914:27: `.mul(1000)`
$DIR/test/advanced.spec.ts:915:17-915:27: `.mul(1000)`
$DIR/test/advanced.spec.ts:920:7-920:59: `offer[0].identifier = offer[0].identifierOrCriteria;`
$DIR/test/advanced.spec.ts:921:7-921:44: `offer[0].amount = offer[0].endAmount;`
$DIR/test/advanced.spec.ts:923:7-923:75: `consideration[0].identifier = consideration[0].identifierOrCriteria;`
$DIR/test/advanced.spec.ts:924:7-924:60: `consideration[0].amount = consideration[0].endAmount;`
$DIR/test/advanced.spec.ts:926:7-928:47: `await offererContract
        .connect(seller)
        .activate(offer[0], consideration[0]);`
$DIR/test/advanced.spec.ts:927:9-927:25: `.connect(seller)`
$DIR/test/advanced.spec.ts:928:9-928:46: `.activate(offer[0], consideration[0])`
$DIR/test/advanced.spec.ts:939:34-941:10: `.getContractOffererNonce(
          offererContract.address
        )`
$DIR/test/advanced.spec.ts:944:24-944:46: `.address.toLowerCase()`
$DIR/test/advanced.spec.ts:945:29-945:43: `.toHexString()`
$DIR/test/advanced.spec.ts:945:43-945:52: `.slice(2)`
$DIR/test/advanced.spec.ts:945:52-945:70: `.padStart(24, "0")`
$DIR/test/advanced.spec.ts:947:52-947:78: `.getOrderStatus(orderHash)`
$DIR/test/advanced.spec.ts:953:7-953:58: `order.parameters.offerer = offererContract.address;`
$DIR/test/advanced.spec.ts:954:7-954:27: `order.numerator = 1;`
$DIR/test/advanced.spec.ts:955:7-955:29: `order.denominator = 1;`
$DIR/test/advanced.spec.ts:956:7-956:30: `order.signature = "0x";`
$DIR/test/advanced.spec.ts:958:51-958:80: `.parse(JSON.stringify(order))`
$DIR/test/advanced.spec.ts:958:62-958:79: `.stringify(order)`
$DIR/test/advanced.spec.ts:959:7-960:62: `orderWithIncreasedConsideration.parameters.consideration[0].startAmount =
        order.parameters.consideration[0].startAmount.add(1);`
$DIR/test/advanced.spec.ts:960:42-960:61: `.startAmount.add(1)`
$DIR/test/advanced.spec.ts:961:7-962:60: `orderWithIncreasedConsideration.parameters.consideration[0].endAmount =
        order.parameters.consideration[0].endAmount.add(1);`
$DIR/test/advanced.spec.ts:962:42-962:59: `.endAmount.add(1)`
$DIR/test/advanced.spec.ts:966:11-966:26: `.connect(buyer)`
$DIR/test/advanced.spec.ts:967:11-975:12: `.fulfillAdvancedOrder(
            orderWithIncreasedConsideration,
            [],
            toKey(0),
            ethers.constants.AddressZero,
            {
              value,
            }
          )`
$DIR/test/advanced.spec.ts:976:41-976:48: `.wait()`
$DIR/test/advanced.spec.ts:1010:7-1010:74: `await set1155ApprovalForAll(seller, offererContract.address, true);`
$DIR/test/advanced.spec.ts:1013:38-1013:46: `.mul(10)`
$DIR/test/advanced.spec.ts:1013:54-1013:62: `.mul(10)`
$DIR/test/advanced.spec.ts:1023:22-1023:30: `.mul(10)`
$DIR/test/advanced.spec.ts:1024:22-1024:30: `.mul(10)`
$DIR/test/advanced.spec.ts:1030:7-1030:59: `offer[0].identifier = offer[0].identifierOrCriteria;`
$DIR/test/advanced.spec.ts:1031:7-1031:44: `offer[0].amount = offer[0].endAmount;`
$DIR/test/advanced.spec.ts:1033:7-1033:75: `consideration[0].identifier = consideration[0].identifierOrCriteria;`
$DIR/test/advanced.spec.ts:1034:7-1034:60: `consideration[0].amount = consideration[0].endAmount;`
$DIR/test/advanced.spec.ts:1036:7-1038:47: `await offererContract
        .connect(seller)
        .activate(offer[0], consideration[0]);`
$DIR/test/advanced.spec.ts:1037:9-1037:25: `.connect(seller)`
$DIR/test/advanced.spec.ts:1038:9-1038:46: `.activate(offer[0], consideration[0])`
$DIR/test/advanced.spec.ts:1049:34-1051:10: `.getContractOffererNonce(
          offererContract.address
        )`
$DIR/test/advanced.spec.ts:1054:24-1054:46: `.address.toLowerCase()`
$DIR/test/advanced.spec.ts:1055:29-1055:43: `.toHexString()`
$DIR/test/advanced.spec.ts:1055:43-1055:52: `.slice(2)`
$DIR/test/advanced.spec.ts:1055:52-1055:70: `.padStart(24, "0")`
$DIR/test/advanced.spec.ts:1057:52-1057:78: `.getOrderStatus(orderHash)`
$DIR/test/advanced.spec.ts:1063:7-1063:58: `order.parameters.offerer = offererContract.address;`
$DIR/test/advanced.spec.ts:1064:7-1064:27: `order.numerator = 1;`
$DIR/test/advanced.spec.ts:1065:7-1065:29: `order.denominator = 1;`
$DIR/test/advanced.spec.ts:1066:7-1066:30: `order.signature = "0x";`
$DIR/test/advanced.spec.ts:1068:50-1068:79: `.parse(JSON.stringify(order))`
$DIR/test/advanced.spec.ts:1068:61-1068:78: `.stringify(order)`
$DIR/test/advanced.spec.ts:1069:7-1069:79: `orderWithCriteriaConsideration.parameters.consideration[0].itemType = 5;`
$DIR/test/advanced.spec.ts:1070:7-1070:91: `orderWithCriteriaConsideration.parameters.consideration[0].identifierOrCriteria = 0;`
$DIR/test/advanced.spec.ts:1074:11-1074:26: `.connect(buyer)`
$DIR/test/advanced.spec.ts:1075:11-1083:12: `.fulfillAdvancedOrder(
            orderWithCriteriaConsideration,
            [],
            toKey(0),
            ethers.constants.AddressZero,
            {
              value,
            }
          )`
$DIR/test/advanced.spec.ts:1084:41-1084:48: `.wait()`
$DIR/test/advanced.spec.ts:1111:7-1111:55: `await faucet(offererContract.address, provider);`
$DIR/test/advanced.spec.ts:1129:7-1129:59: `offer[0].identifier = offer[0].identifierOrCriteria;`
$DIR/test/advanced.spec.ts:1130:7-1130:44: `offer[0].amount = offer[0].endAmount;`
$DIR/test/advanced.spec.ts:1132:7-1132:75: `consideration[0].identifier = consideration[0].identifierOrCriteria;`
$DIR/test/advanced.spec.ts:1133:7-1133:60: `consideration[0].amount = consideration[0].endAmount;`
$DIR/test/advanced.spec.ts:1135:7-1137:47: `await offererContract
        .connect(seller)
        .activate(offer[0], consideration[0]);`
$DIR/test/advanced.spec.ts:1136:9-1136:25: `.connect(seller)`
$DIR/test/advanced.spec.ts:1137:9-1137:46: `.activate(offer[0], consideration[0])`
$DIR/test/advanced.spec.ts:1148:34-1150:10: `.getContractOffererNonce(
          offererContract.address
        )`
$DIR/test/advanced.spec.ts:1153:24-1153:46: `.address.toLowerCase()`
$DIR/test/advanced.spec.ts:1154:29-1154:43: `.toHexString()`
$DIR/test/advanced.spec.ts:1154:43-1154:52: `.slice(2)`
$DIR/test/advanced.spec.ts:1154:52-1154:70: `.padStart(24, "0")`
$DIR/test/advanced.spec.ts:1156:52-1156:78: `.getOrderStatus(orderHash)`
$DIR/test/advanced.spec.ts:1162:7-1162:58: `order.parameters.offerer = offererContract.address;`
$DIR/test/advanced.spec.ts:1163:7-1163:27: `order.numerator = 1;`
$DIR/test/advanced.spec.ts:1164:7-1164:29: `order.denominator = 1;`
$DIR/test/advanced.spec.ts:1165:7-1165:30: `order.signature = "0x";`
$DIR/test/advanced.spec.ts:1169:11-1169:26: `.connect(buyer)`
$DIR/test/advanced.spec.ts:1170:11-1175:12: `.fulfillAdvancedOrder(
            order,
            [],
            toKey(0),
            ethers.constants.AddressZero
          )`
$DIR/test/advanced.spec.ts:1176:41-1176:48: `.wait()`
$DIR/test/advanced.spec.ts:1210:7-1210:74: `await set1155ApprovalForAll(seller, offererContract.address, true);`
$DIR/test/advanced.spec.ts:1213:38-1213:46: `.mul(10)`
$DIR/test/advanced.spec.ts:1213:54-1213:62: `.mul(10)`
$DIR/test/advanced.spec.ts:1218:17-1218:27: `.mul(1000)`
$DIR/test/advanced.spec.ts:1219:17-1219:27: `.mul(1000)`
$DIR/test/advanced.spec.ts:1224:7-1224:59: `offer[0].identifier = offer[0].identifierOrCriteria;`
$DIR/test/advanced.spec.ts:1225:7-1225:44: `offer[0].amount = offer[0].endAmount;`
$DIR/test/advanced.spec.ts:1227:7-1227:51: `offer[0].endAmount = offer[0].amount.add(1);`
$DIR/test/advanced.spec.ts:1227:36-1227:50: `.amount.add(1)`
$DIR/test/advanced.spec.ts:1229:7-1229:49: `offer[0].startAmount = offer[0].endAmount;`
$DIR/test/advanced.spec.ts:1231:7-1231:75: `consideration[0].identifier = consideration[0].identifierOrCriteria;`
$DIR/test/advanced.spec.ts:1232:7-1232:60: `consideration[0].amount = consideration[0].endAmount;`
$DIR/test/advanced.spec.ts:1234:7-1236:47: `await offererContract
        .connect(seller)
        .activate(offer[0], consideration[0]);`
$DIR/test/advanced.spec.ts:1235:9-1235:25: `.connect(seller)`
$DIR/test/advanced.spec.ts:1236:9-1236:46: `.activate(offer[0], consideration[0])`
$DIR/test/advanced.spec.ts:1247:34-1249:10: `.getContractOffererNonce(
          offererContract.address
        )`
$DIR/test/advanced.spec.ts:1252:24-1252:46: `.address.toLowerCase()`
$DIR/test/advanced.spec.ts:1253:29-1253:43: `.toHexString()`
$DIR/test/advanced.spec.ts:1253:43-1253:52: `.slice(2)`
$DIR/test/advanced.spec.ts:1253:52-1253:70: `.padStart(24, "0")`
$DIR/test/advanced.spec.ts:1255:52-1255:78: `.getOrderStatus(orderHash)`
$DIR/test/advanced.spec.ts:1261:7-1261:58: `order.parameters.offerer = offererContract.address;`
$DIR/test/advanced.spec.ts:1262:7-1262:27: `order.numerator = 1;`
$DIR/test/advanced.spec.ts:1263:7-1263:29: `order.denominator = 1;`
$DIR/test/advanced.spec.ts:1264:7-1264:30: `order.signature = "0x";`
$DIR/test/advanced.spec.ts:1294:7-1294:74: `await set1155ApprovalForAll(seller, offererContract.address, true);`
$DIR/test/advanced.spec.ts:1297:38-1297:46: `.mul(10)`
$DIR/test/advanced.spec.ts:1297:54-1297:62: `.mul(10)`
$DIR/test/advanced.spec.ts:1302:17-1302:27: `.mul(1000)`
$DIR/test/advanced.spec.ts:1303:17-1303:27: `.mul(1000)`
$DIR/test/advanced.spec.ts:1308:7-1308:59: `offer[0].identifier = offer[0].identifierOrCriteria;`
$DIR/test/advanced.spec.ts:1309:7-1309:44: `offer[0].amount = offer[0].endAmount;`
$DIR/test/advanced.spec.ts:1311:7-1311:75: `consideration[0].identifier = consideration[0].identifierOrCriteria;`
$DIR/test/advanced.spec.ts:1312:7-1312:60: `consideration[0].amount = consideration[0].endAmount;`
$DIR/test/advanced.spec.ts:1314:7-1316:47: `await offererContract
        .connect(seller)
        .activate(offer[0], consideration[0]);`
$DIR/test/advanced.spec.ts:1315:9-1315:25: `.connect(seller)`
$DIR/test/advanced.spec.ts:1316:9-1316:46: `.activate(offer[0], consideration[0])`
$DIR/test/advanced.spec.ts:1327:34-1329:10: `.getContractOffererNonce(
          offererContract.address
        )`
$DIR/test/advanced.spec.ts:1332:24-1332:46: `.address.toLowerCase()`
$DIR/test/advanced.spec.ts:1333:29-1333:43: `.toHexString()`
$DIR/test/advanced.spec.ts:1333:43-1333:52: `.slice(2)`
$DIR/test/advanced.spec.ts:1333:52-1333:70: `.padStart(24, "0")`
$DIR/test/advanced.spec.ts:1335:52-1335:78: `.getOrderStatus(orderHash)`
$DIR/test/advanced.spec.ts:1341:7-1341:58: `order.parameters.offerer = offererContract.address;`
$DIR/test/advanced.spec.ts:1342:7-1342:27: `order.numerator = 1;`
$DIR/test/advanced.spec.ts:1343:7-1343:29: `order.denominator = 1;`
$DIR/test/advanced.spec.ts:1344:7-1344:30: `order.signature = "0x";`
$DIR/test/advanced.spec.ts:1346:7-1346:46: `order.parameters.offer[0].itemType = 1;`
$DIR/test/advanced.spec.ts:1376:7-1376:74: `await set1155ApprovalForAll(seller, offererContract.address, true);`
$DIR/test/advanced.spec.ts:1379:38-1379:46: `.mul(10)`
$DIR/test/advanced.spec.ts:1379:54-1379:62: `.mul(10)`
$DIR/test/advanced.spec.ts:1384:17-1384:27: `.mul(1000)`
$DIR/test/advanced.spec.ts:1385:17-1385:27: `.mul(1000)`
$DIR/test/advanced.spec.ts:1390:7-1390:59: `offer[0].identifier = offer[0].identifierOrCriteria;`
$DIR/test/advanced.spec.ts:1391:7-1391:44: `offer[0].amount = offer[0].endAmount;`
$DIR/test/advanced.spec.ts:1393:7-1393:75: `consideration[0].identifier = consideration[0].identifierOrCriteria;`
$DIR/test/advanced.spec.ts:1394:7-1394:60: `consideration[0].amount = consideration[0].endAmount;`
$DIR/test/advanced.spec.ts:1396:7-1398:47: `await offererContract
        .connect(seller)
        .activate(offer[0], consideration[0]);`
$DIR/test/advanced.spec.ts:1397:9-1397:25: `.connect(seller)`
$DIR/test/advanced.spec.ts:1398:9-1398:46: `.activate(offer[0], consideration[0])`
$DIR/test/advanced.spec.ts:1409:34-1411:10: `.getContractOffererNonce(
          offererContract.address
        )`
$DIR/test/advanced.spec.ts:1414:24-1414:46: `.address.toLowerCase()`
$DIR/test/advanced.spec.ts:1415:29-1415:43: `.toHexString()`
$DIR/test/advanced.spec.ts:1415:43-1415:52: `.slice(2)`
$DIR/test/advanced.spec.ts:1415:52-1415:70: `.padStart(24, "0")`
$DIR/test/advanced.spec.ts:1417:52-1417:78: `.getOrderStatus(orderHash)`
$DIR/test/advanced.spec.ts:1423:7-1423:58: `order.parameters.offerer = offererContract.address;`
$DIR/test/advanced.spec.ts:1424:7-1424:27: `order.numerator = 1;`
$DIR/test/advanced.spec.ts:1425:7-1425:29: `order.denominator = 1;`
$DIR/test/advanced.spec.ts:1426:7-1426:30: `order.signature = "0x";`
$DIR/test/advanced.spec.ts:1428:7-1428:64: `order.parameters.offer[0].token = testERC1155Two.address;`
$DIR/test/advanced.spec.ts:1458:7-1458:74: `await set1155ApprovalForAll(seller, offererContract.address, true);`
$DIR/test/advanced.spec.ts:1461:38-1461:46: `.mul(10)`
$DIR/test/advanced.spec.ts:1461:54-1461:62: `.mul(10)`
$DIR/test/advanced.spec.ts:1466:17-1466:27: `.mul(1000)`
$DIR/test/advanced.spec.ts:1467:17-1467:27: `.mul(1000)`
$DIR/test/advanced.spec.ts:1472:7-1472:59: `offer[0].identifier = offer[0].identifierOrCriteria;`
$DIR/test/advanced.spec.ts:1473:7-1473:44: `offer[0].amount = offer[0].endAmount;`
$DIR/test/advanced.spec.ts:1475:7-1475:75: `consideration[0].identifier = consideration[0].identifierOrCriteria;`
$DIR/test/advanced.spec.ts:1476:7-1476:60: `consideration[0].amount = consideration[0].endAmount;`
$DIR/test/advanced.spec.ts:1478:7-1480:47: `await offererContract
        .connect(seller)
        .activate(offer[0], consideration[0]);`
$DIR/test/advanced.spec.ts:1479:9-1479:25: `.connect(seller)`
$DIR/test/advanced.spec.ts:1480:9-1480:46: `.activate(offer[0], consideration[0])`
$DIR/test/advanced.spec.ts:1491:34-1493:10: `.getContractOffererNonce(
          offererContract.address
        )`
$DIR/test/advanced.spec.ts:1496:24-1496:46: `.address.toLowerCase()`
$DIR/test/advanced.spec.ts:1497:29-1497:43: `.toHexString()`
$DIR/test/advanced.spec.ts:1497:43-1497:52: `.slice(2)`
$DIR/test/advanced.spec.ts:1497:52-1497:70: `.padStart(24, "0")`
$DIR/test/advanced.spec.ts:1499:52-1499:78: `.getOrderStatus(orderHash)`
$DIR/test/advanced.spec.ts:1505:7-1505:58: `order.parameters.offerer = offererContract.address;`
$DIR/test/advanced.spec.ts:1506:7-1506:27: `order.numerator = 1;`
$DIR/test/advanced.spec.ts:1507:7-1507:29: `order.denominator = 1;`
$DIR/test/advanced.spec.ts:1508:7-1508:30: `order.signature = "0x";`
$DIR/test/advanced.spec.ts:1510:7-1511:36: `order.parameters.offer[0].identifierOrCriteria =
        offer[0].identifier.add(1);`
$DIR/test/advanced.spec.ts:1511:17-1511:35: `.identifier.add(1)`
$DIR/test/advanced.spec.ts:1541:7-1541:74: `await set1155ApprovalForAll(seller, offererContract.address, true);`
$DIR/test/advanced.spec.ts:1544:38-1544:46: `.mul(10)`
$DIR/test/advanced.spec.ts:1544:54-1544:62: `.mul(10)`
$DIR/test/advanced.spec.ts:1549:17-1549:27: `.mul(1000)`
$DIR/test/advanced.spec.ts:1550:17-1550:27: `.mul(1000)`
$DIR/test/advanced.spec.ts:1555:7-1555:59: `offer[0].identifier = offer[0].identifierOrCriteria;`
$DIR/test/advanced.spec.ts:1556:7-1556:44: `offer[0].amount = offer[0].endAmount;`
$DIR/test/advanced.spec.ts:1558:7-1558:75: `consideration[0].identifier = consideration[0].identifierOrCriteria;`
$DIR/test/advanced.spec.ts:1559:7-1559:60: `consideration[0].amount = consideration[0].endAmount;`
$DIR/test/advanced.spec.ts:1561:7-1563:47: `await offererContract
        .connect(seller)
        .activate(offer[0], consideration[0]);`
$DIR/test/advanced.spec.ts:1562:9-1562:25: `.connect(seller)`
$DIR/test/advanced.spec.ts:1563:9-1563:46: `.activate(offer[0], consideration[0])`
$DIR/test/advanced.spec.ts:1574:34-1576:10: `.getContractOffererNonce(
          offererContract.address
        )`
$DIR/test/advanced.spec.ts:1579:24-1579:46: `.address.toLowerCase()`
$DIR/test/advanced.spec.ts:1580:29-1580:43: `.toHexString()`
$DIR/test/advanced.spec.ts:1580:43-1580:52: `.slice(2)`
$DIR/test/advanced.spec.ts:1580:52-1580:70: `.padStart(24, "0")`
$DIR/test/advanced.spec.ts:1582:52-1582:78: `.getOrderStatus(orderHash)`
$DIR/test/advanced.spec.ts:1588:7-1588:58: `order.parameters.offerer = offererContract.address;`
$DIR/test/advanced.spec.ts:1589:7-1589:27: `order.numerator = 1;`
$DIR/test/advanced.spec.ts:1590:7-1590:29: `order.denominator = 1;`
$DIR/test/advanced.spec.ts:1591:7-1591:30: `order.signature = "0x";`
$DIR/test/advanced.spec.ts:1593:7-1593:54: `order.parameters.consideration[0].itemType = 1;`
$DIR/test/advanced.spec.ts:1623:7-1623:74: `await set1155ApprovalForAll(seller, offererContract.address, true);`
$DIR/test/advanced.spec.ts:1626:38-1626:46: `.mul(10)`
$DIR/test/advanced.spec.ts:1626:54-1626:62: `.mul(10)`
$DIR/test/advanced.spec.ts:1631:17-1631:27: `.mul(1000)`
$DIR/test/advanced.spec.ts:1632:17-1632:27: `.mul(1000)`
$DIR/test/advanced.spec.ts:1637:7-1637:59: `offer[0].identifier = offer[0].identifierOrCriteria;`
$DIR/test/advanced.spec.ts:1638:7-1638:44: `offer[0].amount = offer[0].endAmount;`
$DIR/test/advanced.spec.ts:1640:7-1640:75: `consideration[0].identifier = consideration[0].identifierOrCriteria;`
$DIR/test/advanced.spec.ts:1641:7-1641:60: `consideration[0].amount = consideration[0].endAmount;`
$DIR/test/advanced.spec.ts:1643:7-1645:47: `await offererContract
        .connect(seller)
        .activate(offer[0], consideration[0]);`
$DIR/test/advanced.spec.ts:1644:9-1644:25: `.connect(seller)`
$DIR/test/advanced.spec.ts:1645:9-1645:46: `.activate(offer[0], consideration[0])`
$DIR/test/advanced.spec.ts:1656:34-1658:10: `.getContractOffererNonce(
          offererContract.address
        )`
$DIR/test/advanced.spec.ts:1661:24-1661:46: `.address.toLowerCase()`
$DIR/test/advanced.spec.ts:1662:29-1662:43: `.toHexString()`
$DIR/test/advanced.spec.ts:1662:43-1662:52: `.slice(2)`
$DIR/test/advanced.spec.ts:1662:52-1662:70: `.padStart(24, "0")`
$DIR/test/advanced.spec.ts:1664:52-1664:78: `.getOrderStatus(orderHash)`
$DIR/test/advanced.spec.ts:1670:7-1670:58: `order.parameters.offerer = offererContract.address;`
$DIR/test/advanced.spec.ts:1671:7-1671:27: `order.numerator = 1;`
$DIR/test/advanced.spec.ts:1672:7-1672:29: `order.denominator = 1;`
$DIR/test/advanced.spec.ts:1673:7-1673:30: `order.signature = "0x";`
$DIR/test/advanced.spec.ts:1675:7-1675:72: `order.parameters.consideration[0].token = testERC1155Two.address;`
$DIR/test/advanced.spec.ts:1705:7-1705:74: `await set1155ApprovalForAll(seller, offererContract.address, true);`
$DIR/test/advanced.spec.ts:1708:38-1708:46: `.mul(10)`
$DIR/test/advanced.spec.ts:1708:54-1708:62: `.mul(10)`
$DIR/test/advanced.spec.ts:1713:17-1713:27: `.mul(1000)`
$DIR/test/advanced.spec.ts:1714:17-1714:27: `.mul(1000)`
$DIR/test/advanced.spec.ts:1719:7-1719:59: `offer[0].identifier = offer[0].identifierOrCriteria;`
$DIR/test/advanced.spec.ts:1720:7-1720:44: `offer[0].amount = offer[0].endAmount;`
$DIR/test/advanced.spec.ts:1722:7-1722:75: `consideration[0].identifier = consideration[0].identifierOrCriteria;`
$DIR/test/advanced.spec.ts:1723:7-1723:60: `consideration[0].amount = consideration[0].endAmount;`
$DIR/test/advanced.spec.ts:1725:7-1727:47: `await offererContract
        .connect(seller)
        .activate(offer[0], consideration[0]);`
$DIR/test/advanced.spec.ts:1726:9-1726:25: `.connect(seller)`
$DIR/test/advanced.spec.ts:1727:9-1727:46: `.activate(offer[0], consideration[0])`
$DIR/test/advanced.spec.ts:1738:34-1740:10: `.getContractOffererNonce(
          offererContract.address
        )`
$DIR/test/advanced.spec.ts:1743:24-1743:46: `.address.toLowerCase()`
$DIR/test/advanced.spec.ts:1744:29-1744:43: `.toHexString()`
$DIR/test/advanced.spec.ts:1744:43-1744:52: `.slice(2)`
$DIR/test/advanced.spec.ts:1744:52-1744:70: `.padStart(24, "0")`
$DIR/test/advanced.spec.ts:1746:52-1746:78: `.getOrderStatus(orderHash)`
$DIR/test/advanced.spec.ts:1752:7-1752:58: `order.parameters.offerer = offererContract.address;`
$DIR/test/advanced.spec.ts:1753:7-1753:27: `order.numerator = 1;`
$DIR/test/advanced.spec.ts:1754:7-1754:29: `order.denominator = 1;`
$DIR/test/advanced.spec.ts:1755:7-1755:30: `order.signature = "0x";`
$DIR/test/advanced.spec.ts:1757:7-1758:44: `order.parameters.consideration[0].identifierOrCriteria =
        consideration[0].identifier.add(1);`
$DIR/test/advanced.spec.ts:1758:25-1758:43: `.identifier.add(1)`
$DIR/test/advanced.spec.ts:1788:7-1788:74: `await set1155ApprovalForAll(seller, offererContract.address, true);`
$DIR/test/advanced.spec.ts:1791:38-1791:46: `.mul(10)`
$DIR/test/advanced.spec.ts:1791:54-1791:62: `.mul(10)`
$DIR/test/advanced.spec.ts:1796:17-1796:27: `.mul(1000)`
$DIR/test/advanced.spec.ts:1797:17-1797:27: `.mul(1000)`
$DIR/test/advanced.spec.ts:1802:7-1802:59: `offer[0].identifier = offer[0].identifierOrCriteria;`
$DIR/test/advanced.spec.ts:1803:7-1803:44: `offer[0].amount = offer[0].endAmount;`
$DIR/test/advanced.spec.ts:1805:7-1805:75: `consideration[0].identifier = consideration[0].identifierOrCriteria;`
$DIR/test/advanced.spec.ts:1806:7-1806:60: `consideration[0].amount = consideration[0].endAmount;`
$DIR/test/advanced.spec.ts:1808:7-1810:47: `await offererContract
        .connect(seller)
        .activate(offer[0], consideration[0]);`
$DIR/test/advanced.spec.ts:1809:9-1809:25: `.connect(seller)`
$DIR/test/advanced.spec.ts:1810:9-1810:46: `.activate(offer[0], consideration[0])`
$DIR/test/advanced.spec.ts:1821:34-1823:10: `.getContractOffererNonce(
          offererContract.address
        )`
$DIR/test/advanced.spec.ts:1826:24-1826:46: `.address.toLowerCase()`
$DIR/test/advanced.spec.ts:1827:29-1827:43: `.toHexString()`
$DIR/test/advanced.spec.ts:1827:43-1827:52: `.slice(2)`
$DIR/test/advanced.spec.ts:1827:52-1827:70: `.padStart(24, "0")`
$DIR/test/advanced.spec.ts:1829:52-1829:78: `.getOrderStatus(orderHash)`
$DIR/test/advanced.spec.ts:1835:7-1835:58: `order.parameters.offerer = offererContract.address;`
$DIR/test/advanced.spec.ts:1836:7-1836:27: `order.numerator = 1;`
$DIR/test/advanced.spec.ts:1837:7-1837:29: `order.denominator = 1;`
$DIR/test/advanced.spec.ts:1838:7-1838:30: `order.signature = "0x";`
$DIR/test/advanced.spec.ts:1840:7-1840:67: `order.parameters.consideration[0].recipient = owner.address;`
$DIR/test/advanced.spec.ts:1870:7-1870:74: `await set1155ApprovalForAll(seller, offererContract.address, true);`
$DIR/test/advanced.spec.ts:1873:38-1873:46: `.mul(10)`
$DIR/test/advanced.spec.ts:1873:54-1873:62: `.mul(10)`
$DIR/test/advanced.spec.ts:1878:17-1878:27: `.mul(1000)`
$DIR/test/advanced.spec.ts:1879:17-1879:27: `.mul(1000)`
$DIR/test/advanced.spec.ts:1884:7-1884:59: `offer[0].identifier = offer[0].identifierOrCriteria;`
$DIR/test/advanced.spec.ts:1885:7-1885:44: `offer[0].amount = offer[0].endAmount;`
$DIR/test/advanced.spec.ts:1887:7-1887:75: `consideration[0].identifier = consideration[0].identifierOrCriteria;`
$DIR/test/advanced.spec.ts:1888:7-1888:60: `consideration[0].amount = consideration[0].endAmount;`
$DIR/test/advanced.spec.ts:1890:7-1892:47: `await offererContract
        .connect(seller)
        .activate(offer[0], consideration[0]);`
$DIR/test/advanced.spec.ts:1891:9-1891:25: `.connect(seller)`
$DIR/test/advanced.spec.ts:1892:9-1892:46: `.activate(offer[0], consideration[0])`
$DIR/test/advanced.spec.ts:1903:34-1905:10: `.getContractOffererNonce(
          offererContract.address
        )`
$DIR/test/advanced.spec.ts:1908:24-1908:46: `.address.toLowerCase()`
$DIR/test/advanced.spec.ts:1909:29-1909:43: `.toHexString()`
$DIR/test/advanced.spec.ts:1909:43-1909:52: `.slice(2)`
$DIR/test/advanced.spec.ts:1909:52-1909:70: `.padStart(24, "0")`
$DIR/test/advanced.spec.ts:1911:52-1911:78: `.getOrderStatus(orderHash)`
$DIR/test/advanced.spec.ts:1917:7-1917:58: `order.parameters.offerer = offererContract.address;`
$DIR/test/advanced.spec.ts:1918:7-1918:27: `order.numerator = 1;`
$DIR/test/advanced.spec.ts:1919:7-1919:29: `order.denominator = 1;`
$DIR/test/advanced.spec.ts:1920:7-1920:30: `order.signature = "0x";`
$DIR/test/advanced.spec.ts:1922:44-1922:73: `.parse(JSON.stringify(order))`
$DIR/test/advanced.spec.ts:1922:55-1922:72: `.stringify(order)`
$DIR/test/advanced.spec.ts:1923:7-1923:62: `orderWithNoConsideration.parameters.consideration = [];`
$DIR/test/advanced.spec.ts:1924:7-1924:79: `orderWithNoConsideration.parameters.totalOriginalConsiderationItems = 0;`
$DIR/test/advanced.spec.ts:1960:7-1960:74: `await set1155ApprovalForAll(seller, offererContract.address, true);`
$DIR/test/advanced.spec.ts:1963:38-1963:46: `.mul(10)`
$DIR/test/advanced.spec.ts:1963:54-1963:62: `.mul(10)`
$DIR/test/advanced.spec.ts:1968:17-1968:27: `.mul(1000)`
$DIR/test/advanced.spec.ts:1969:17-1969:27: `.mul(1000)`
$DIR/test/advanced.spec.ts:1974:7-1974:59: `offer[0].identifier = offer[0].identifierOrCriteria;`
$DIR/test/advanced.spec.ts:1975:7-1975:44: `offer[0].amount = offer[0].endAmount;`
$DIR/test/advanced.spec.ts:1977:7-1977:75: `consideration[0].identifier = consideration[0].identifierOrCriteria;`
$DIR/test/advanced.spec.ts:1978:7-1978:60: `consideration[0].amount = consideration[0].endAmount;`
$DIR/test/advanced.spec.ts:1980:7-1982:47: `await offererContract
        .connect(seller)
        .activate(offer[0], consideration[0]);`
$DIR/test/advanced.spec.ts:1981:9-1981:25: `.connect(seller)`
$DIR/test/advanced.spec.ts:1982:9-1982:46: `.activate(offer[0], consideration[0])`
$DIR/test/advanced.spec.ts:1993:34-1995:10: `.getContractOffererNonce(
          offererContract.address
        )`
$DIR/test/advanced.spec.ts:1998:24-1998:46: `.address.toLowerCase()`
$DIR/test/advanced.spec.ts:1999:29-1999:43: `.toHexString()`
$DIR/test/advanced.spec.ts:1999:43-1999:52: `.slice(2)`
$DIR/test/advanced.spec.ts:1999:52-1999:70: `.padStart(24, "0")`
$DIR/test/advanced.spec.ts:2001:52-2001:78: `.getOrderStatus(orderHash)`
$DIR/test/advanced.spec.ts:2007:7-2007:58: `order.parameters.offerer = offererContract.address;`
$DIR/test/advanced.spec.ts:2008:7-2008:27: `order.numerator = 1;`
$DIR/test/advanced.spec.ts:2009:7-2009:29: `order.denominator = 1;`
$DIR/test/advanced.spec.ts:2010:7-2010:30: `order.signature = "0x";`
$DIR/test/advanced.spec.ts:2012:52-2014:8: `.parse(
        JSON.stringify(order)
      )`
$DIR/test/advanced.spec.ts:2013:13-2013:30: `.stringify(order)`
$DIR/test/advanced.spec.ts:2015:7-2015:62: `orderWithoutOfferOrConsideration.parameters.offer = [];`
$DIR/test/advanced.spec.ts:2016:7-2016:70: `orderWithoutOfferOrConsideration.parameters.consideration = [];`
$DIR/test/advanced.spec.ts:2017:7-2017:87: `orderWithoutOfferOrConsideration.parameters.totalOriginalConsiderationItems = 0;`
$DIR/test/advanced.spec.ts:2049:7-2049:76: `await testERC1155Two.mint(seller.address, secondNftId, secondAmount);`
$DIR/test/advanced.spec.ts:2049:27-2049:75: `.mint(seller.address, secondNftId, secondAmount)`
$DIR/test/advanced.spec.ts:2066:7-2066:74: `await set1155ApprovalForAll(seller, offererContract.address, true);`
$DIR/test/advanced.spec.ts:2069:38-2069:46: `.mul(10)`
$DIR/test/advanced.spec.ts:2069:54-2069:62: `.mul(10)`
$DIR/test/advanced.spec.ts:2074:17-2074:27: `.mul(1000)`
$DIR/test/advanced.spec.ts:2075:17-2075:27: `.mul(1000)`
$DIR/test/advanced.spec.ts:2080:7-2080:59: `offer[0].identifier = offer[0].identifierOrCriteria;`
$DIR/test/advanced.spec.ts:2081:7-2081:44: `offer[0].amount = offer[0].endAmount;`
$DIR/test/advanced.spec.ts:2083:7-2083:75: `consideration[0].identifier = consideration[0].identifierOrCriteria;`
$DIR/test/advanced.spec.ts:2084:7-2084:60: `consideration[0].amount = consideration[0].endAmount;`
$DIR/test/advanced.spec.ts:2086:7-2088:47: `await offererContract
        .connect(seller)
        .activate(offer[0], consideration[0]);`
$DIR/test/advanced.spec.ts:2087:9-2087:25: `.connect(seller)`
$DIR/test/advanced.spec.ts:2088:9-2088:46: `.activate(offer[0], consideration[0])`
$DIR/test/advanced.spec.ts:2099:34-2101:10: `.getContractOffererNonce(
          offererContract.address
        )`
$DIR/test/advanced.spec.ts:2104:24-2104:46: `.address.toLowerCase()`
$DIR/test/advanced.spec.ts:2105:29-2105:43: `.toHexString()`
$DIR/test/advanced.spec.ts:2105:43-2105:52: `.slice(2)`
$DIR/test/advanced.spec.ts:2105:52-2105:70: `.padStart(24, "0")`
$DIR/test/advanced.spec.ts:2107:52-2107:78: `.getOrderStatus(orderHash)`
$DIR/test/advanced.spec.ts:2113:7-2113:58: `order.parameters.offerer = offererContract.address;`
$DIR/test/advanced.spec.ts:2114:7-2114:27: `order.numerator = 1;`
$DIR/test/advanced.spec.ts:2115:7-2115:29: `order.denominator = 1;`
$DIR/test/advanced.spec.ts:2116:7-2116:30: `order.signature = "0x";`
$DIR/test/advanced.spec.ts:2118:39-2118:68: `.parse(JSON.stringify(order))`
$DIR/test/advanced.spec.ts:2118:50-2118:67: `.stringify(order)`
$DIR/test/advanced.spec.ts:2119:7-2121:9: `orderWithExtraOffer.parameters.offer.push(
        JSON.parse(JSON.stringify(orderWithExtraOffer.parameters.offer[0]))
      );`
$DIR/test/advanced.spec.ts:2119:26-2121:8: `.parameters.offer.push(
        JSON.parse(JSON.stringify(orderWithExtraOffer.parameters.offer[0]))
      )`
$DIR/test/advanced.spec.ts:2120:13-2120:76: `.parse(JSON.stringify(orderWithExtraOffer.parameters.offer[0]))`
$DIR/test/advanced.spec.ts:2120:24-2120:75: `.stringify(orderWithExtraOffer.parameters.offer[0])`
$DIR/test/advanced.spec.ts:2122:7-2122:78: `orderWithExtraOffer.parameters.offer[1].token = testERC1155Two.address;`
$DIR/test/advanced.spec.ts:2123:7-2124:21: `orderWithExtraOffer.parameters.offer[1].identifierOrCriteria =
        secondNftId;`
$DIR/test/advanced.spec.ts:2125:7-2125:69: `orderWithExtraOffer.parameters.offer[1].amount = secondAmount;`
$DIR/test/advanced.spec.ts:2161:7-2161:74: `await set1155ApprovalForAll(seller, offererContract.address, true);`
$DIR/test/advanced.spec.ts:2164:38-2164:46: `.mul(10)`
$DIR/test/advanced.spec.ts:2164:54-2164:62: `.mul(10)`
$DIR/test/advanced.spec.ts:2169:17-2169:27: `.mul(1000)`
$DIR/test/advanced.spec.ts:2170:17-2170:27: `.mul(1000)`
$DIR/test/advanced.spec.ts:2175:7-2175:59: `offer[0].identifier = offer[0].identifierOrCriteria;`
$DIR/test/advanced.spec.ts:2176:7-2176:44: `offer[0].amount = offer[0].endAmount;`
$DIR/test/advanced.spec.ts:2178:7-2178:75: `consideration[0].identifier = consideration[0].identifierOrCriteria;`
$DIR/test/advanced.spec.ts:2179:7-2179:60: `consideration[0].amount = consideration[0].endAmount;`
$DIR/test/advanced.spec.ts:2181:7-2183:47: `await offererContract
        .connect(seller)
        .activate(offer[0], consideration[0]);`
$DIR/test/advanced.spec.ts:2182:9-2182:25: `.connect(seller)`
$DIR/test/advanced.spec.ts:2183:9-2183:46: `.activate(offer[0], consideration[0])`
$DIR/test/advanced.spec.ts:2194:34-2196:10: `.getContractOffererNonce(
          offererContract.address
        )`
$DIR/test/advanced.spec.ts:2199:24-2199:46: `.address.toLowerCase()`
$DIR/test/advanced.spec.ts:2200:29-2200:43: `.toHexString()`
$DIR/test/advanced.spec.ts:2200:43-2200:52: `.slice(2)`
$DIR/test/advanced.spec.ts:2200:52-2200:70: `.padStart(24, "0")`
$DIR/test/advanced.spec.ts:2202:52-2202:78: `.getOrderStatus(orderHash)`
$DIR/test/advanced.spec.ts:2208:7-2208:58: `order.parameters.offerer = offererContract.address;`
$DIR/test/advanced.spec.ts:2209:7-2209:27: `order.numerator = 1;`
$DIR/test/advanced.spec.ts:2210:7-2210:29: `order.denominator = 1;`
$DIR/test/advanced.spec.ts:2211:7-2211:30: `order.signature = "0x";`
$DIR/test/advanced.spec.ts:2213:7-2213:62: `await offererContract.connect(seller).extendRequired();`
$DIR/test/advanced.spec.ts:2213:28-2213:44: `.connect(seller)`
$DIR/test/advanced.spec.ts:2213:44-2213:61: `.extendRequired()`
$DIR/test/advanced.spec.ts:2239:7-2239:76: `await testERC1155Two.mint(seller.address, secondNftId, secondAmount);`
$DIR/test/advanced.spec.ts:2239:27-2239:75: `.mint(seller.address, secondNftId, secondAmount)`
$DIR/test/advanced.spec.ts:2256:7-2256:74: `await set1155ApprovalForAll(seller, offererContract.address, true);`
$DIR/test/advanced.spec.ts:2259:38-2259:46: `.mul(10)`
$DIR/test/advanced.spec.ts:2259:54-2259:62: `.mul(10)`
$DIR/test/advanced.spec.ts:2264:17-2264:27: `.mul(1000)`
$DIR/test/advanced.spec.ts:2265:17-2265:27: `.mul(1000)`
$DIR/test/advanced.spec.ts:2270:7-2270:59: `offer[0].identifier = offer[0].identifierOrCriteria;`
$DIR/test/advanced.spec.ts:2271:7-2271:44: `offer[0].amount = offer[0].endAmount;`
$DIR/test/advanced.spec.ts:2273:7-2273:75: `consideration[0].identifier = consideration[0].identifierOrCriteria;`
$DIR/test/advanced.spec.ts:2274:7-2274:60: `consideration[0].amount = consideration[0].endAmount;`
$DIR/test/advanced.spec.ts:2276:7-2278:47: `await offererContract
        .connect(seller)
        .activate(offer[0], consideration[0]);`
$DIR/test/advanced.spec.ts:2277:9-2277:25: `.connect(seller)`
$DIR/test/advanced.spec.ts:2278:9-2278:46: `.activate(offer[0], consideration[0])`
$DIR/test/advanced.spec.ts:2289:34-2291:10: `.getContractOffererNonce(
          offererContract.address
        )`
$DIR/test/advanced.spec.ts:2294:24-2294:46: `.address.toLowerCase()`
$DIR/test/advanced.spec.ts:2295:29-2295:43: `.toHexString()`
$DIR/test/advanced.spec.ts:2295:43-2295:52: `.slice(2)`
$DIR/test/advanced.spec.ts:2295:52-2295:70: `.padStart(24, "0")`
$DIR/test/advanced.spec.ts:2297:52-2297:78: `.getOrderStatus(orderHash)`
$DIR/test/advanced.spec.ts:2303:7-2303:58: `order.parameters.offerer = offererContract.address;`
$DIR/test/advanced.spec.ts:2304:7-2304:27: `order.numerator = 1;`
$DIR/test/advanced.spec.ts:2305:7-2305:29: `order.denominator = 1;`
$DIR/test/advanced.spec.ts:2306:7-2306:30: `order.signature = "0x";`
$DIR/test/advanced.spec.ts:2308:7-2309:54: `order.parameters.offer[0].startAmount =
        order.parameters.offer[0].startAmount.add(1);`
$DIR/test/advanced.spec.ts:2309:34-2309:53: `.startAmount.add(1)`
$DIR/test/advanced.spec.ts:2310:7-2311:54: `order.parameters.offer[0].endAmount =
        order.parameters.offer[0].startAmount.add(1);`
$DIR/test/advanced.spec.ts:2311:34-2311:53: `.startAmount.add(1)`
$DIR/test/advanced.spec.ts:2341:7-2341:74: `await set1155ApprovalForAll(seller, offererContract.address, true);`
$DIR/test/advanced.spec.ts:2344:38-2344:46: `.mul(10)`
$DIR/test/advanced.spec.ts:2344:54-2344:62: `.mul(10)`
$DIR/test/advanced.spec.ts:2349:17-2349:27: `.mul(1000)`
$DIR/test/advanced.spec.ts:2350:17-2350:27: `.mul(1000)`
$DIR/test/advanced.spec.ts:2355:7-2355:59: `offer[0].identifier = offer[0].identifierOrCriteria;`
$DIR/test/advanced.spec.ts:2356:7-2356:44: `offer[0].amount = offer[0].endAmount;`
$DIR/test/advanced.spec.ts:2358:7-2358:75: `consideration[0].identifier = consideration[0].identifierOrCriteria;`
$DIR/test/advanced.spec.ts:2359:7-2359:60: `consideration[0].amount = consideration[0].endAmount;`
$DIR/test/advanced.spec.ts:2361:7-2363:47: `await offererContract
        .connect(seller)
        .activate(offer[0], consideration[0]);`
$DIR/test/advanced.spec.ts:2362:9-2362:25: `.connect(seller)`
$DIR/test/advanced.spec.ts:2363:9-2363:46: `.activate(offer[0], consideration[0])`
$DIR/test/advanced.spec.ts:2365:7-2365:74: `consideration[0].startAmount = consideration[0].startAmount.sub(1);`
$DIR/test/advanced.spec.ts:2365:54-2365:73: `.startAmount.sub(1)`
$DIR/test/advanced.spec.ts:2366:7-2366:70: `consideration[0].endAmount = consideration[0].endAmount.sub(1);`
$DIR/test/advanced.spec.ts:2366:52-2366:69: `.endAmount.sub(1)`
$DIR/test/advanced.spec.ts:2377:34-2379:10: `.getContractOffererNonce(
          offererContract.address
        )`
$DIR/test/advanced.spec.ts:2382:24-2382:46: `.address.toLowerCase()`
$DIR/test/advanced.spec.ts:2383:29-2383:43: `.toHexString()`
$DIR/test/advanced.spec.ts:2383:43-2383:52: `.slice(2)`
$DIR/test/advanced.spec.ts:2383:52-2383:70: `.padStart(24, "0")`
$DIR/test/advanced.spec.ts:2385:52-2385:78: `.getOrderStatus(orderHash)`
$DIR/test/advanced.spec.ts:2391:7-2391:58: `order.parameters.offerer = offererContract.address;`
$DIR/test/advanced.spec.ts:2392:7-2392:27: `order.numerator = 1;`
$DIR/test/advanced.spec.ts:2393:7-2393:29: `order.denominator = 1;`
$DIR/test/advanced.spec.ts:2394:7-2394:30: `order.signature = "0x";`
$DIR/test/advanced.spec.ts:2424:7-2424:74: `await set1155ApprovalForAll(seller, offererContract.address, true);`
$DIR/test/advanced.spec.ts:2427:38-2427:46: `.mul(10)`
$DIR/test/advanced.spec.ts:2427:54-2427:62: `.mul(10)`
$DIR/test/advanced.spec.ts:2432:17-2432:27: `.mul(1000)`
$DIR/test/advanced.spec.ts:2433:17-2433:27: `.mul(1000)`
$DIR/test/advanced.spec.ts:2438:7-2438:59: `offer[0].identifier = offer[0].identifierOrCriteria;`
$DIR/test/advanced.spec.ts:2439:7-2439:44: `offer[0].amount = offer[0].endAmount;`
$DIR/test/advanced.spec.ts:2441:7-2441:75: `consideration[0].identifier = consideration[0].identifierOrCriteria;`
$DIR/test/advanced.spec.ts:2442:7-2442:60: `consideration[0].amount = consideration[0].endAmount;`
$DIR/test/advanced.spec.ts:2444:7-2446:47: `await offererContract
        .connect(seller)
        .activate(offer[0], consideration[0]);`
$DIR/test/advanced.spec.ts:2445:9-2445:25: `.connect(seller)`
$DIR/test/advanced.spec.ts:2446:9-2446:46: `.activate(offer[0], consideration[0])`
$DIR/test/advanced.spec.ts:2457:34-2459:10: `.getContractOffererNonce(
          offererContract.address
        )`
$DIR/test/advanced.spec.ts:2462:24-2462:46: `.address.toLowerCase()`
$DIR/test/advanced.spec.ts:2463:29-2463:43: `.toHexString()`
$DIR/test/advanced.spec.ts:2463:43-2463:52: `.slice(2)`
$DIR/test/advanced.spec.ts:2463:52-2463:70: `.padStart(24, "0")`
$DIR/test/advanced.spec.ts:2465:52-2465:78: `.getOrderStatus(orderHash)`
$DIR/test/advanced.spec.ts:2471:7-2471:58: `order.parameters.offerer = offererContract.address;`
$DIR/test/advanced.spec.ts:2472:7-2472:27: `order.numerator = 1;`
$DIR/test/advanced.spec.ts:2473:7-2473:29: `order.denominator = 2;`
$DIR/test/advanced.spec.ts:2474:7-2474:30: `order.signature = "0x";`
$DIR/test/advanced.spec.ts:2499:7-2499:74: `await set1155ApprovalForAll(seller, offererContract.address, true);`
$DIR/test/advanced.spec.ts:2502:38-2502:46: `.mul(10)`
$DIR/test/advanced.spec.ts:2502:54-2502:62: `.mul(10)`
$DIR/test/advanced.spec.ts:2507:17-2507:27: `.mul(1000)`
$DIR/test/advanced.spec.ts:2508:17-2508:27: `.mul(1000)`
$DIR/test/advanced.spec.ts:2513:7-2513:59: `offer[0].identifier = offer[0].identifierOrCriteria;`
$DIR/test/advanced.spec.ts:2514:7-2514:44: `offer[0].amount = offer[0].endAmount;`
$DIR/test/advanced.spec.ts:2516:7-2516:75: `consideration[0].identifier = consideration[0].identifierOrCriteria;`
$DIR/test/advanced.spec.ts:2517:7-2517:60: `consideration[0].amount = consideration[0].endAmount;`
$DIR/test/advanced.spec.ts:2519:7-2521:47: `await offererContract
        .connect(seller)
        .activate(offer[0], consideration[0]);`
$DIR/test/advanced.spec.ts:2520:9-2520:25: `.connect(seller)`
$DIR/test/advanced.spec.ts:2521:9-2521:46: `.activate(offer[0], consideration[0])`
$DIR/test/advanced.spec.ts:2532:34-2534:10: `.getContractOffererNonce(
          offererContract.address
        )`
$DIR/test/advanced.spec.ts:2537:24-2537:46: `.address.toLowerCase()`
$DIR/test/advanced.spec.ts:2538:29-2538:43: `.toHexString()`
$DIR/test/advanced.spec.ts:2538:43-2538:52: `.slice(2)`
$DIR/test/advanced.spec.ts:2538:52-2538:70: `.padStart(24, "0")`
$DIR/test/advanced.spec.ts:2540:52-2540:78: `.getOrderStatus(orderHash)`
$DIR/test/advanced.spec.ts:2546:7-2546:58: `order.parameters.offerer = offererContract.address;`
$DIR/test/advanced.spec.ts:2547:7-2547:27: `order.numerator = 2;`
$DIR/test/advanced.spec.ts:2548:7-2548:29: `order.denominator = 2;`
$DIR/test/advanced.spec.ts:2549:7-2549:30: `order.signature = "0x";`
$DIR/test/advanced.spec.ts:2567:7-2567:81: `await set1155ApprovalForAll(seller, invalidContractOfferer.address, true);`
$DIR/test/advanced.spec.ts:2570:38-2570:46: `.mul(10)`
$DIR/test/advanced.spec.ts:2570:54-2570:62: `.mul(10)`
$DIR/test/advanced.spec.ts:2575:17-2575:27: `.mul(1000)`
$DIR/test/advanced.spec.ts:2576:17-2576:27: `.mul(1000)`
$DIR/test/advanced.spec.ts:2581:7-2581:59: `offer[0].identifier = offer[0].identifierOrCriteria;`
$DIR/test/advanced.spec.ts:2582:7-2582:44: `offer[0].amount = offer[0].endAmount;`
$DIR/test/advanced.spec.ts:2584:7-2584:75: `consideration[0].identifier = consideration[0].identifierOrCriteria;`
$DIR/test/advanced.spec.ts:2585:7-2585:60: `consideration[0].amount = consideration[0].endAmount;`
$DIR/test/advanced.spec.ts:2587:7-2589:47: `await invalidContractOfferer
        .connect(seller)
        .activate(offer[0], consideration[0]);`
$DIR/test/advanced.spec.ts:2588:9-2588:25: `.connect(seller)`
$DIR/test/advanced.spec.ts:2589:9-2589:46: `.activate(offer[0], consideration[0])`
$DIR/test/advanced.spec.ts:2591:7-2591:74: `consideration[0].startAmount = consideration[0].startAmount.sub(1);`
$DIR/test/advanced.spec.ts:2591:54-2591:73: `.startAmount.sub(1)`
$DIR/test/advanced.spec.ts:2592:7-2592:70: `consideration[0].endAmount = consideration[0].endAmount.sub(1);`
$DIR/test/advanced.spec.ts:2592:52-2592:69: `.endAmount.sub(1)`
$DIR/test/advanced.spec.ts:2603:34-2605:10: `.getContractOffererNonce(
          invalidContractOfferer.address
        )`
$DIR/test/advanced.spec.ts:2608:31-2608:53: `.address.toLowerCase()`
$DIR/test/advanced.spec.ts:2609:29-2609:43: `.toHexString()`
$DIR/test/advanced.spec.ts:2609:43-2609:52: `.slice(2)`
$DIR/test/advanced.spec.ts:2609:52-2609:70: `.padStart(24, "0")`
$DIR/test/advanced.spec.ts:2611:52-2611:78: `.getOrderStatus(orderHash)`
$DIR/test/advanced.spec.ts:2617:7-2617:65: `order.parameters.offerer = invalidContractOfferer.address;`
$DIR/test/advanced.spec.ts:2618:7-2618:27: `order.numerator = 1;`
$DIR/test/advanced.spec.ts:2619:7-2619:29: `order.denominator = 1;`
$DIR/test/advanced.spec.ts:2620:7-2620:30: `order.signature = "0x";`
$DIR/test/advanced.spec.ts:2624:11-2624:26: `.connect(buyer)`
$DIR/test/advanced.spec.ts:2625:11-2627:13: `.fulfillAdvancedOrder(order, [], toKey(0), buyer.address, {
            value,
          })`
$DIR/test/advanced.spec.ts:2646:7-2646:74: `await set1155ApprovalForAll(seller, offererContract.address, true);`
$DIR/test/advanced.spec.ts:2649:38-2649:46: `.mul(10)`
$DIR/test/advanced.spec.ts:2649:54-2649:62: `.mul(10)`
$DIR/test/advanced.spec.ts:2654:17-2654:27: `.mul(1000)`
$DIR/test/advanced.spec.ts:2655:17-2655:27: `.mul(1000)`
$DIR/test/advanced.spec.ts:2660:7-2660:59: `offer[0].identifier = offer[0].identifierOrCriteria;`
$DIR/test/advanced.spec.ts:2661:7-2661:44: `offer[0].amount = offer[0].endAmount;`
$DIR/test/advanced.spec.ts:2663:7-2663:75: `consideration[0].identifier = consideration[0].identifierOrCriteria;`
$DIR/test/advanced.spec.ts:2664:7-2664:60: `consideration[0].amount = consideration[0].endAmount;`
$DIR/test/advanced.spec.ts:2666:7-2668:47: `await offererContract
        .connect(seller)
        .activate(offer[0], consideration[0]);`
$DIR/test/advanced.spec.ts:2667:9-2667:25: `.connect(seller)`
$DIR/test/advanced.spec.ts:2668:9-2668:46: `.activate(offer[0], consideration[0])`
$DIR/test/advanced.spec.ts:2670:7-2670:74: `consideration[0].startAmount = consideration[0].startAmount.sub(1);`
$DIR/test/advanced.spec.ts:2670:54-2670:73: `.startAmount.sub(1)`
$DIR/test/advanced.spec.ts:2671:7-2671:70: `consideration[0].endAmount = consideration[0].endAmount.sub(1);`
$DIR/test/advanced.spec.ts:2671:52-2671:69: `.endAmount.sub(1)`
$DIR/test/advanced.spec.ts:2684:34-2686:10: `.getContractOffererNonce(
          offererContract.address
        )`
$DIR/test/advanced.spec.ts:2689:24-2689:46: `.address.toLowerCase()`
$DIR/test/advanced.spec.ts:2690:29-2690:43: `.toHexString()`
$DIR/test/advanced.spec.ts:2690:43-2690:52: `.slice(2)`
$DIR/test/advanced.spec.ts:2690:52-2690:70: `.padStart(24, "0")`
$DIR/test/advanced.spec.ts:2692:52-2692:78: `.getOrderStatus(orderHash)`
$DIR/test/advanced.spec.ts:2698:7-2698:58: `order.parameters.offerer = offererContract.address;`
$DIR/test/advanced.spec.ts:2699:7-2699:27: `order.numerator = 1;`
$DIR/test/advanced.spec.ts:2700:7-2700:29: `order.denominator = 1;`
$DIR/test/advanced.spec.ts:2701:7-2701:30: `order.signature = "0x";`
$DIR/test/advanced.spec.ts:2716:11-2716:26: `.connect(buyer)`
$DIR/test/advanced.spec.ts:2717:11-2726:12: `.fulfillAvailableOrders(
            orders,
            offerComponents,
            considerationComponents,
            toKey(0),
            100,
            {
              value,
            }
          )`
$DIR/test/advanced.spec.ts:2737:7-2741:9: `await set1155ApprovalForAll(
        seller,
        invalidContractOffererRatifyOrder.address,
        true
      );`
$DIR/test/advanced.spec.ts:2744:38-2744:46: `.mul(10)`
$DIR/test/advanced.spec.ts:2744:54-2744:62: `.mul(10)`
$DIR/test/advanced.spec.ts:2749:17-2749:27: `.mul(1000)`
$DIR/test/advanced.spec.ts:2750:17-2750:27: `.mul(1000)`
$DIR/test/advanced.spec.ts:2755:7-2755:59: `offer[0].identifier = offer[0].identifierOrCriteria;`
$DIR/test/advanced.spec.ts:2756:7-2756:44: `offer[0].amount = offer[0].endAmount;`
$DIR/test/advanced.spec.ts:2758:7-2758:75: `consideration[0].identifier = consideration[0].identifierOrCriteria;`
$DIR/test/advanced.spec.ts:2759:7-2759:60: `consideration[0].amount = consideration[0].endAmount;`
$DIR/test/advanced.spec.ts:2761:7-2763:47: `await invalidContractOffererRatifyOrder
        .connect(seller)
        .activate(offer[0], consideration[0]);`
$DIR/test/advanced.spec.ts:2762:9-2762:25: `.connect(seller)`
$DIR/test/advanced.spec.ts:2763:9-2763:46: `.activate(offer[0], consideration[0])`
$DIR/test/advanced.spec.ts:2774:34-2776:10: `.getContractOffererNonce(
          invalidContractOffererRatifyOrder.address
        )`
$DIR/test/advanced.spec.ts:2779:42-2779:64: `.address.toLowerCase()`
$DIR/test/advanced.spec.ts:2780:29-2780:43: `.toHexString()`
$DIR/test/advanced.spec.ts:2780:43-2780:52: `.slice(2)`
$DIR/test/advanced.spec.ts:2780:52-2780:70: `.padStart(24, "0")`
$DIR/test/advanced.spec.ts:2782:52-2782:78: `.getOrderStatus(orderHash)`
$DIR/test/advanced.spec.ts:2788:7-2788:76: `order.parameters.offerer = invalidContractOffererRatifyOrder.address;`
$DIR/test/advanced.spec.ts:2789:7-2789:27: `order.numerator = 1;`
$DIR/test/advanced.spec.ts:2790:7-2790:29: `order.denominator = 1;`
$DIR/test/advanced.spec.ts:2826:7-2826:74: `await set1155ApprovalForAll(seller, offererContract.address, true);`
$DIR/test/advanced.spec.ts:2829:38-2829:46: `.mul(10)`
$DIR/test/advanced.spec.ts:2829:54-2829:62: `.mul(10)`
$DIR/test/advanced.spec.ts:2834:17-2834:27: `.mul(1000)`
$DIR/test/advanced.spec.ts:2835:17-2835:27: `.mul(1000)`
$DIR/test/advanced.spec.ts:2840:7-2840:59: `offer[0].identifier = offer[0].identifierOrCriteria;`
$DIR/test/advanced.spec.ts:2841:7-2841:44: `offer[0].amount = offer[0].endAmount;`
$DIR/test/advanced.spec.ts:2843:7-2843:75: `consideration[0].identifier = consideration[0].identifierOrCriteria;`
$DIR/test/advanced.spec.ts:2844:7-2844:60: `consideration[0].amount = consideration[0].endAmount;`
$DIR/test/advanced.spec.ts:2846:7-2848:47: `await offererContract
        .connect(seller)
        .activate(offer[0], consideration[0]);`
$DIR/test/advanced.spec.ts:2847:9-2847:25: `.connect(seller)`
$DIR/test/advanced.spec.ts:2848:9-2848:46: `.activate(offer[0], consideration[0])`
$DIR/test/advanced.spec.ts:2859:34-2861:10: `.getContractOffererNonce(
          offererContract.address
        )`
$DIR/test/advanced.spec.ts:2864:24-2864:46: `.address.toLowerCase()`
$DIR/test/advanced.spec.ts:2865:29-2865:43: `.toHexString()`
$DIR/test/advanced.spec.ts:2865:43-2865:52: `.slice(2)`
$DIR/test/advanced.spec.ts:2865:52-2865:70: `.padStart(24, "0")`
$DIR/test/advanced.spec.ts:2867:52-2867:78: `.getOrderStatus(orderHash)`
$DIR/test/advanced.spec.ts:2873:7-2873:58: `order.parameters.offerer = offererContract.address;`
$DIR/test/advanced.spec.ts:2874:7-2874:27: `order.numerator = 1;`
$DIR/test/advanced.spec.ts:2875:7-2875:29: `order.denominator = 1;`
$DIR/test/advanced.spec.ts:2876:7-2876:30: `order.signature = "0x";`
$DIR/test/advanced.spec.ts:2878:52-2880:8: `.parse(
        JSON.stringify(order)
      )`
$DIR/test/advanced.spec.ts:2879:13-2879:30: `.stringify(order)`
$DIR/test/advanced.spec.ts:2881:7-2882:44: `orderWithMismatchedTotalOriginal.parameters
        .totalOriginalConsiderationItems++;`
$DIR/test/advanced.spec.ts:2914:7-2914:76: `await mintAndApprove1155(seller, marketplaceContract.address, 10000);`
$DIR/test/advanced.spec.ts:2916:7-2916:76: `await mintAndApprove1155(seller, marketplaceContract.address, 10000);`
$DIR/test/advanced.spec.ts:2925:7-2925:77: `await set1155ApprovalForAll(seller, offererContractOne.address, true);`
$DIR/test/advanced.spec.ts:2933:7-2933:77: `await set1155ApprovalForAll(seller, offererContractTwo.address, true);`
$DIR/test/advanced.spec.ts:2941:7-2941:79: `await set1155ApprovalForAll(seller, offererContractThree.address, true);`
$DIR/test/advanced.spec.ts:2949:7-2949:78: `await set1155ApprovalForAll(seller, offererContractFour.address, true);`
$DIR/test/advanced.spec.ts:2952:44-2952:52: `.mul(10)`
$DIR/test/advanced.spec.ts:2952:63-2952:71: `.mul(10)`
$DIR/test/advanced.spec.ts:2957:20-2957:30: `.mul(1000)`
$DIR/test/advanced.spec.ts:2958:20-2958:30: `.mul(1000)`
$DIR/test/advanced.spec.ts:2963:7-2963:65: `offerOne[0].identifier = offerOne[0].identifierOrCriteria;`
$DIR/test/advanced.spec.ts:2964:7-2964:50: `offerOne[0].amount = offerOne[0].endAmount;`
$DIR/test/advanced.spec.ts:2966:7-2966:81: `considerationOne[0].identifier = considerationOne[0].identifierOrCriteria;`
$DIR/test/advanced.spec.ts:2967:7-2967:66: `considerationOne[0].amount = considerationOne[0].endAmount;`
$DIR/test/advanced.spec.ts:2969:7-2971:53: `await offererContractOne
        .connect(seller)
        .activate(offerOne[0], considerationOne[0]);`
$DIR/test/advanced.spec.ts:2970:9-2970:25: `.connect(seller)`
$DIR/test/advanced.spec.ts:2971:9-2971:52: `.activate(offerOne[0], considerationOne[0])`
$DIR/test/advanced.spec.ts:2982:34-2984:10: `.getContractOffererNonce(
          offererContractOne.address
        )`
$DIR/test/advanced.spec.ts:2987:27-2987:49: `.address.toLowerCase()`
$DIR/test/advanced.spec.ts:2988:32-2988:46: `.toHexString()`
$DIR/test/advanced.spec.ts:2988:46-2988:55: `.slice(2)`
$DIR/test/advanced.spec.ts:2988:55-2988:73: `.padStart(24, "0")`
$DIR/test/advanced.spec.ts:2990:7-2990:64: `orderOne.parameters.offerer = offererContractOne.address;`
$DIR/test/advanced.spec.ts:2991:7-2991:30: `orderOne.numerator = 1;`
$DIR/test/advanced.spec.ts:2992:7-2992:32: `orderOne.denominator = 1;`
$DIR/test/advanced.spec.ts:2993:7-2993:33: `orderOne.signature = "0x";`
$DIR/test/advanced.spec.ts:2996:7-2999:9: `orderOne.extraData = ethers.utils.defaultAbiCoder.encode(
        ["bytes32[]"],
        [[orderHashOne, ethers.constants.HashZero]]
      );`
$DIR/test/advanced.spec.ts:2996:34-2999:8: `.utils.defaultAbiCoder.encode(
        ["bytes32[]"],
        [[orderHashOne, ethers.constants.HashZero]]
      )`
$DIR/test/advanced.spec.ts:3005:44-3005:52: `.mul(10)`
$DIR/test/advanced.spec.ts:3005:63-3005:71: `.mul(10)`
$DIR/test/advanced.spec.ts:3010:20-3010:30: `.mul(1000)`
$DIR/test/advanced.spec.ts:3011:20-3011:30: `.mul(1000)`
$DIR/test/advanced.spec.ts:3016:7-3016:65: `offerTwo[0].identifier = offerTwo[0].identifierOrCriteria;`
$DIR/test/advanced.spec.ts:3017:7-3017:50: `offerTwo[0].amount = offerTwo[0].endAmount;`
$DIR/test/advanced.spec.ts:3019:7-3019:81: `considerationTwo[0].identifier = considerationTwo[0].identifierOrCriteria;`
$DIR/test/advanced.spec.ts:3020:7-3020:66: `considerationTwo[0].amount = considerationTwo[0].endAmount;`
$DIR/test/advanced.spec.ts:3022:7-3024:53: `await offererContractTwo
        .connect(seller)
        .activate(offerTwo[0], considerationTwo[0]);`
$DIR/test/advanced.spec.ts:3023:9-3023:25: `.connect(seller)`
$DIR/test/advanced.spec.ts:3024:9-3024:52: `.activate(offerTwo[0], considerationTwo[0])`
$DIR/test/advanced.spec.ts:3034:7-3034:64: `orderTwo.parameters.offerer = offererContractTwo.address;`
$DIR/test/advanced.spec.ts:3035:7-3035:30: `orderTwo.numerator = 1;`
$DIR/test/advanced.spec.ts:3036:7-3036:32: `orderTwo.denominator = 1;`
$DIR/test/advanced.spec.ts:3037:7-3037:33: `orderTwo.signature = "0x";`
$DIR/test/advanced.spec.ts:3038:7-3038:37: `orderTwo.extraData = "0x1234";`
$DIR/test/advanced.spec.ts:3051:11-3051:26: `.connect(buyer)`
$DIR/test/advanced.spec.ts:3052:11-3063:12: `.fulfillAvailableAdvancedOrders(
            [orderOne, orderTwo],
            [],
            offerComponents,
            considerationComponents,
            toKey(0),
            ethers.constants.AddressZero,
            100,
            {
              value: value.add(valueTwo).mul(2),
            }
          )`
$DIR/test/advanced.spec.ts:3061:27-3061:41: `.add(valueTwo)`
$DIR/test/advanced.spec.ts:3061:41-3061:48: `.mul(2)`
$DIR/test/advanced.spec.ts:3064:41-3064:48: `.wait()`
$DIR/test/advanced.spec.ts:3103:7-3103:77: `await set1155ApprovalForAll(seller, offererContractOne.address, true);`
$DIR/test/advanced.spec.ts:3111:7-3111:77: `await set1155ApprovalForAll(seller, offererContractTwo.address, true);`
$DIR/test/advanced.spec.ts:3119:7-3119:79: `await set1155ApprovalForAll(seller, offererContractThree.address, true);`
$DIR/test/advanced.spec.ts:3127:7-3127:78: `await set1155ApprovalForAll(seller, offererContractFour.address, true);`
$DIR/test/advanced.spec.ts:3130:44-3130:52: `.mul(10)`
$DIR/test/advanced.spec.ts:3130:63-3130:71: `.mul(10)`
$DIR/test/advanced.spec.ts:3135:20-3135:30: `.mul(1000)`
$DIR/test/advanced.spec.ts:3136:20-3136:30: `.mul(1000)`
$DIR/test/advanced.spec.ts:3141:7-3141:65: `offerOne[0].identifier = offerOne[0].identifierOrCriteria;`
$DIR/test/advanced.spec.ts:3142:7-3142:50: `offerOne[0].amount = offerOne[0].endAmount;`
$DIR/test/advanced.spec.ts:3144:7-3144:81: `considerationOne[0].identifier = considerationOne[0].identifierOrCriteria;`
$DIR/test/advanced.spec.ts:3145:7-3145:66: `considerationOne[0].amount = considerationOne[0].endAmount;`
$DIR/test/advanced.spec.ts:3147:7-3149:53: `await offererContractOne
        .connect(seller)
        .activate(offerOne[0], considerationOne[0]);`
$DIR/test/advanced.spec.ts:3148:9-3148:25: `.connect(seller)`
$DIR/test/advanced.spec.ts:3149:9-3149:52: `.activate(offerOne[0], considerationOne[0])`
$DIR/test/advanced.spec.ts:3160:34-3162:10: `.getContractOffererNonce(
          offererContractOne.address
        )`
$DIR/test/advanced.spec.ts:3165:27-3165:49: `.address.toLowerCase()`
$DIR/test/advanced.spec.ts:3166:32-3166:46: `.toHexString()`
$DIR/test/advanced.spec.ts:3166:46-3166:55: `.slice(2)`
$DIR/test/advanced.spec.ts:3166:55-3166:73: `.padStart(24, "0")`
$DIR/test/advanced.spec.ts:3168:7-3168:64: `orderOne.parameters.offerer = offererContractOne.address;`
$DIR/test/advanced.spec.ts:3169:7-3169:30: `orderOne.numerator = 1;`
$DIR/test/advanced.spec.ts:3170:7-3170:32: `orderOne.denominator = 1;`
$DIR/test/advanced.spec.ts:3171:7-3171:33: `orderOne.signature = "0x";`
$DIR/test/advanced.spec.ts:3174:7-3184:9: `orderOne.extraData = ethers.utils.defaultAbiCoder.encode(
        ["bytes32[]"],
        [
          [
            orderHashOne,
            ethers.constants.HashZero,
            ethers.constants.HashZero,
            ethers.constants.HashZero,
          ],
        ]
      );`
$DIR/test/advanced.spec.ts:3174:34-3184:8: `.utils.defaultAbiCoder.encode(
        ["bytes32[]"],
        [
          [
            orderHashOne,
            ethers.constants.HashZero,
            ethers.constants.HashZero,
            ethers.constants.HashZero,
          ],
        ]
      )`
$DIR/test/advanced.spec.ts:3190:44-3190:52: `.mul(10)`
$DIR/test/advanced.spec.ts:3190:63-3190:71: `.mul(10)`
$DIR/test/advanced.spec.ts:3195:20-3195:30: `.mul(1000)`
$DIR/test/advanced.spec.ts:3196:20-3196:30: `.mul(1000)`
$DIR/test/advanced.spec.ts:3201:7-3201:65: `offerTwo[0].identifier = offerTwo[0].identifierOrCriteria;`
$DIR/test/advanced.spec.ts:3202:7-3202:50: `offerTwo[0].amount = offerTwo[0].endAmount;`
$DIR/test/advanced.spec.ts:3204:7-3204:81: `considerationTwo[0].identifier = considerationTwo[0].identifierOrCriteria;`
$DIR/test/advanced.spec.ts:3205:7-3205:66: `considerationTwo[0].amount = considerationTwo[0].endAmount;`
$DIR/test/advanced.spec.ts:3207:7-3209:53: `await offererContractTwo
        .connect(seller)
        .activate(offerTwo[0], considerationTwo[0]);`
$DIR/test/advanced.spec.ts:3208:9-3208:25: `.connect(seller)`
$DIR/test/advanced.spec.ts:3209:9-3209:52: `.activate(offerTwo[0], considerationTwo[0])`
$DIR/test/advanced.spec.ts:3219:7-3219:64: `orderTwo.parameters.offerer = offererContractTwo.address;`
$DIR/test/advanced.spec.ts:3220:7-3220:30: `orderTwo.numerator = 1;`
$DIR/test/advanced.spec.ts:3221:7-3221:32: `orderTwo.denominator = 1;`
$DIR/test/advanced.spec.ts:3222:7-3222:33: `orderTwo.signature = "0x";`
$DIR/test/advanced.spec.ts:3223:7-3223:37: `orderTwo.extraData = "0x1234";`
$DIR/test/advanced.spec.ts:3229:22-3229:30: `.mul(10)`
$DIR/test/advanced.spec.ts:3230:22-3230:30: `.mul(10)`
$DIR/test/advanced.spec.ts:3234:20-3234:28: `.mul(10)`
$DIR/test/advanced.spec.ts:3235:22-3235:30: `.mul(10)`
$DIR/test/advanced.spec.ts:3241:22-3241:32: `.mul(1000)`
$DIR/test/advanced.spec.ts:3242:22-3242:32: `.mul(1000)`
$DIR/test/advanced.spec.ts:3247:7-3247:69: `offerThree[0].identifier = offerThree[0].identifierOrCriteria;`
$DIR/test/advanced.spec.ts:3248:7-3248:54: `offerThree[0].amount = offerThree[0].endAmount;`
$DIR/test/advanced.spec.ts:3250:7-3250:69: `offerThree[1].identifier = offerThree[1].identifierOrCriteria;`
$DIR/test/advanced.spec.ts:3251:7-3251:54: `offerThree[1].amount = offerThree[1].endAmount;`
$DIR/test/advanced.spec.ts:3253:7-3254:52: `considerationThree[0].identifier =
        considerationThree[0].identifierOrCriteria;`
$DIR/test/advanced.spec.ts:3255:7-3255:70: `considerationThree[0].amount = considerationThree[0].endAmount;`
$DIR/test/advanced.spec.ts:3257:7-3259:57: `await offererContractThree
        .connect(seller)
        .activate(offerThree[0], considerationThree[0]);`
$DIR/test/advanced.spec.ts:3258:9-3258:25: `.connect(seller)`
$DIR/test/advanced.spec.ts:3259:9-3259:56: `.activate(offerThree[0], considerationThree[0])`
$DIR/test/advanced.spec.ts:3269:7-3269:68: `orderThree.parameters.offerer = offererContractThree.address;`
$DIR/test/advanced.spec.ts:3270:7-3270:32: `orderThree.numerator = 1;`
$DIR/test/advanced.spec.ts:3271:7-3271:34: `orderThree.denominator = 1;`
$DIR/test/advanced.spec.ts:3272:7-3272:35: `orderThree.signature = "0x";`
$DIR/test/advanced.spec.ts:3275:34-3277:10: `.getContractOffererNonce(
          offererContractThree.address
        )`
$DIR/test/advanced.spec.ts:3280:29-3280:51: `.address.toLowerCase()`
$DIR/test/advanced.spec.ts:3281:34-3281:48: `.toHexString()`
$DIR/test/advanced.spec.ts:3281:48-3281:57: `.slice(2)`
$DIR/test/advanced.spec.ts:3281:57-3281:75: `.padStart(24, "0")`
$DIR/test/advanced.spec.ts:3287:21-3287:29: `.mul(10)`
$DIR/test/advanced.spec.ts:3288:21-3288:29: `.mul(10)`
$DIR/test/advanced.spec.ts:3294:21-3294:31: `.mul(1000)`
$DIR/test/advanced.spec.ts:3295:21-3295:31: `.mul(1000)`
$DIR/test/advanced.spec.ts:3300:7-3300:67: `offerFour[0].identifier = offerFour[0].identifierOrCriteria;`
$DIR/test/advanced.spec.ts:3301:7-3301:52: `offerFour[0].amount = offerFour[0].endAmount;`
$DIR/test/advanced.spec.ts:3303:7-3304:51: `considerationFour[0].identifier =
        considerationFour[0].identifierOrCriteria;`
$DIR/test/advanced.spec.ts:3305:7-3305:68: `considerationFour[0].amount = considerationFour[0].endAmount;`
$DIR/test/advanced.spec.ts:3307:7-3309:55: `await offererContractFour
        .connect(seller)
        .activate(offerFour[0], considerationFour[0]);`
$DIR/test/advanced.spec.ts:3308:9-3308:25: `.connect(seller)`
$DIR/test/advanced.spec.ts:3309:9-3309:54: `.activate(offerFour[0], considerationFour[0])`
$DIR/test/advanced.spec.ts:3319:7-3319:66: `orderFour.parameters.offerer = offererContractFour.address;`
$DIR/test/advanced.spec.ts:3320:7-3320:31: `orderFour.numerator = 1;`
$DIR/test/advanced.spec.ts:3321:7-3321:33: `orderFour.denominator = 1;`
$DIR/test/advanced.spec.ts:3322:7-3322:34: `orderFour.signature = "0x";`
$DIR/test/advanced.spec.ts:3323:7-3324:66: `orderFour.parameters.consideration[0].startAmount =
        orderFour.parameters.consideration[0].startAmount.sub(1);`
$DIR/test/advanced.spec.ts:3324:46-3324:65: `.startAmount.sub(1)`
$DIR/test/advanced.spec.ts:3325:7-3326:64: `orderFour.parameters.consideration[0].endAmount =
        orderFour.parameters.consideration[0].endAmount.sub(1);`
$DIR/test/advanced.spec.ts:3326:46-3326:63: `.endAmount.sub(1)`
$DIR/test/advanced.spec.ts:3374:51-3374:59: `.mul(10)`
$DIR/test/advanced.spec.ts:3374:67-3374:75: `.mul(10)`
$DIR/test/advanced.spec.ts:3377:26-3377:36: `.mul(1000)`
$DIR/test/advanced.spec.ts:3377:44-3377:54: `.mul(1000)`
$DIR/test/advanced.spec.ts:3378:26-3378:34: `.mul(10)`
$DIR/test/advanced.spec.ts:3378:42-3378:50: `.mul(10)`
$DIR/test/advanced.spec.ts:3379:26-3379:34: `.mul(20)`
$DIR/test/advanced.spec.ts:3379:42-3379:50: `.mul(20)`
$DIR/test/advanced.spec.ts:3390:50-3390:76: `.getOrderStatus(orderHash)`
$DIR/test/advanced.spec.ts:3396:7-3396:27: `order.numerator = 2;`
$DIR/test/advanced.spec.ts:3397:7-3397:30: `order.denominator = 10;`
$DIR/test/advanced.spec.ts:3399:7-3428:10: `await withBalanceChecks([order], 0, [], async () => {
        const tx = marketplaceContract
          .connect(buyer)
          .fulfillAdvancedOrder(
            order,
            [],
            toKey(0),
            ethers.constants.AddressZero,
            {
              value,
            }
          );
        const receipt = await (await tx).wait();
        await checkExpectedEvents(
          tx,
          receipt,
          [
            {
              order,
              orderHash,
              fulfiller: buyer.address,
              fulfillerConduitKey: toKey(0),
            },
          ],
          undefined,
          []
        );

        return receipt;
      });`
$DIR/test/advanced.spec.ts:3401:11-3401:26: `.connect(buyer)`
$DIR/test/advanced.spec.ts:3402:11-3410:12: `.fulfillAdvancedOrder(
            order,
            [],
            toKey(0),
            ethers.constants.AddressZero,
            {
              value,
            }
          )`
$DIR/test/advanced.spec.ts:3411:41-3411:48: `.wait()`
$DIR/test/advanced.spec.ts:3430:7-3430:73: `orderStatus = await marketplaceContract.getOrderStatus(orderHash);`
$DIR/test/advanced.spec.ts:3430:46-3430:72: `.getOrderStatus(orderHash)`
$DIR/test/advanced.spec.ts:3436:7-3436:27: `order.numerator = 1;`
$DIR/test/advanced.spec.ts:3437:7-3437:29: `order.denominator = 2;`
$DIR/test/advanced.spec.ts:3439:7-3468:10: `await withBalanceChecks([order], 0, [], async () => {
        const tx = marketplaceContract
          .connect(buyer)
          .fulfillAdvancedOrder(
            order,
            [],
            toKey(0),
            ethers.constants.AddressZero,
            {
              value,
            }
          );
        const receipt = await (await tx).wait();
        await checkExpectedEvents(
          tx,
          receipt,
          [
            {
              order,
              orderHash,
              fulfiller: buyer.address,
              fulfillerConduitKey: toKey(0),
            },
          ],
          undefined,
          []
        );

        return receipt;
      });`
$DIR/test/advanced.spec.ts:3441:11-3441:26: `.connect(buyer)`
$DIR/test/advanced.spec.ts:3442:11-3450:12: `.fulfillAdvancedOrder(
            order,
            [],
            toKey(0),
            ethers.constants.AddressZero,
            {
              value,
            }
          )`
$DIR/test/advanced.spec.ts:3451:41-3451:48: `.wait()`
$DIR/test/advanced.spec.ts:3470:7-3470:73: `orderStatus = await marketplaceContract.getOrderStatus(orderHash);`
$DIR/test/advanced.spec.ts:3470:46-3470:72: `.getOrderStatus(orderHash)`
$DIR/test/advanced.spec.ts:3477:7-3477:27: `order.numerator = 1;`
$DIR/test/advanced.spec.ts:3478:7-3478:29: `order.denominator = 2;`
$DIR/test/advanced.spec.ts:3481:43-3481:64: `.entries(ordersClone)`
$DIR/test/advanced.spec.ts:3482:9-3482:71: `clonedOrder.parameters.startTime = order.parameters.startTime;`
$DIR/test/advanced.spec.ts:3483:9-3483:67: `clonedOrder.parameters.endTime = order.parameters.endTime;`
$DIR/test/advanced.spec.ts:3485:44-3487:10: `.entries(
          clonedOrder.parameters.offer
        )`
$DIR/test/advanced.spec.ts:3488:11-3488:74: `offerItem.startAmount = order.parameters.offer[+j].startAmount;`
$DIR/test/advanced.spec.ts:3489:11-3489:70: `offerItem.endAmount = order.parameters.offer[+j].endAmount;`
$DIR/test/advanced.spec.ts:3492:52-3494:10: `.entries(
          clonedOrder.parameters.consideration
        )`
$DIR/test/advanced.spec.ts:3495:11-3496:60: `considerationItem.startAmount =
            order.parameters.consideration[+j].startAmount;`
$DIR/test/advanced.spec.ts:3497:11-3498:58: `considerationItem.endAmount =
            order.parameters.consideration[+j].endAmount;`
$DIR/test/advanced.spec.ts:3502:7-3502:36: `ordersClone[0].numerator = 3;`
$DIR/test/advanced.spec.ts:3503:7-3503:39: `ordersClone[0].denominator = 10;`
$DIR/test/advanced.spec.ts:3505:7-3533:10: `await withBalanceChecks(ordersClone, 0, [], async () => {
        const tx = marketplaceContract
          .connect(buyer)
          .fulfillAdvancedOrder(
            order,
            [],
            toKey(0),
            ethers.constants.AddressZero,
            {
              value,
            }
          );
        const receipt = await (await tx).wait();
        await checkExpectedEvents(
          tx,
          receipt,
          [
            {
              order: ordersClone[0],
              orderHash,
              fulfiller: buyer.address,
            },
          ],
          undefined,
          []
        );

        return receipt;
      });`
$DIR/test/advanced.spec.ts:3507:11-3507:26: `.connect(buyer)`
$DIR/test/advanced.spec.ts:3508:11-3516:12: `.fulfillAdvancedOrder(
            order,
            [],
            toKey(0),
            ethers.constants.AddressZero,
            {
              value,
            }
          )`
$DIR/test/advanced.spec.ts:3517:41-3517:48: `.wait()`
$DIR/test/advanced.spec.ts:3535:7-3535:73: `orderStatus = await marketplaceContract.getOrderStatus(orderHash);`
$DIR/test/advanced.spec.ts:3535:46-3535:72: `.getOrderStatus(orderHash)`
$DIR/test/advanced.spec.ts:3548:51-3548:59: `.mul(10)`
$DIR/test/advanced.spec.ts:3548:67-3548:75: `.mul(10)`
$DIR/test/advanced.spec.ts:3551:26-3551:36: `.mul(1000)`
$DIR/test/advanced.spec.ts:3551:44-3551:54: `.mul(1000)`
$DIR/test/advanced.spec.ts:3552:26-3552:34: `.mul(10)`
$DIR/test/advanced.spec.ts:3552:42-3552:50: `.mul(10)`
$DIR/test/advanced.spec.ts:3553:26-3553:34: `.mul(20)`
$DIR/test/advanced.spec.ts:3553:42-3553:50: `.mul(20)`
$DIR/test/advanced.spec.ts:3564:50-3564:76: `.getOrderStatus(orderHash)`
$DIR/test/advanced.spec.ts:3570:7-3570:27: `order.numerator = 2;`
$DIR/test/advanced.spec.ts:3571:7-3571:30: `order.denominator = 10;`
$DIR/test/advanced.spec.ts:3573:7-3602:10: `await withBalanceChecks([order], 0, [], async () => {
        const tx = marketplaceContract
          .connect(buyer)
          .fulfillAdvancedOrder(
            order,
            [],
            toKey(0),
            ethers.constants.AddressZero,
            {
              value,
            }
          );
        const receipt = await (await tx).wait();
        await checkExpectedEvents(
          tx,
          receipt,
          [
            {
              order,
              orderHash,
              fulfiller: buyer.address,
              fulfillerConduitKey: toKey(0),
            },
          ],
          undefined,
          []
        );

        return receipt;
      });`
$DIR/test/advanced.spec.ts:3575:11-3575:26: `.connect(buyer)`
$DIR/test/advanced.spec.ts:3576:11-3584:12: `.fulfillAdvancedOrder(
            order,
            [],
            toKey(0),
            ethers.constants.AddressZero,
            {
              value,
            }
          )`
$DIR/test/advanced.spec.ts:3585:41-3585:48: `.wait()`
$DIR/test/advanced.spec.ts:3604:7-3604:73: `orderStatus = await marketplaceContract.getOrderStatus(orderHash);`
$DIR/test/advanced.spec.ts:3604:46-3604:72: `.getOrderStatus(orderHash)`
$DIR/test/advanced.spec.ts:3610:7-3610:27: `order.numerator = 1;`
$DIR/test/advanced.spec.ts:3611:7-3611:30: `order.denominator = 10;`
$DIR/test/advanced.spec.ts:3613:7-3642:10: `await withBalanceChecks([order], 0, [], async () => {
        const tx = marketplaceContract
          .connect(buyer)
          .fulfillAdvancedOrder(
            order,
            [],
            toKey(0),
            ethers.constants.AddressZero,
            {
              value,
            }
          );
        const receipt = await (await tx).wait();
        await checkExpectedEvents(
          tx,
          receipt,
          [
            {
              order,
              orderHash,
              fulfiller: buyer.address,
              fulfillerConduitKey: toKey(0),
            },
          ],
          undefined,
          []
        );

        return receipt;
      });`
$DIR/test/advanced.spec.ts:3615:11-3615:26: `.connect(buyer)`
$DIR/test/advanced.spec.ts:3616:11-3624:12: `.fulfillAdvancedOrder(
            order,
            [],
            toKey(0),
            ethers.constants.AddressZero,
            {
              value,
            }
          )`
$DIR/test/advanced.spec.ts:3625:41-3625:48: `.wait()`
$DIR/test/advanced.spec.ts:3644:7-3644:73: `orderStatus = await marketplaceContract.getOrderStatus(orderHash);`
$DIR/test/advanced.spec.ts:3644:46-3644:72: `.getOrderStatus(orderHash)`
$DIR/test/advanced.spec.ts:3651:7-3651:27: `order.numerator = 1;`
$DIR/test/advanced.spec.ts:3652:7-3652:29: `order.denominator = 1;`
$DIR/test/advanced.spec.ts:3655:43-3655:64: `.entries(ordersClone)`
$DIR/test/advanced.spec.ts:3656:9-3656:71: `clonedOrder.parameters.startTime = order.parameters.startTime;`
$DIR/test/advanced.spec.ts:3657:9-3657:67: `clonedOrder.parameters.endTime = order.parameters.endTime;`
$DIR/test/advanced.spec.ts:3659:44-3661:10: `.entries(
          clonedOrder.parameters.offer
        )`
$DIR/test/advanced.spec.ts:3662:11-3662:74: `offerItem.startAmount = order.parameters.offer[+j].startAmount;`
$DIR/test/advanced.spec.ts:3663:11-3663:70: `offerItem.endAmount = order.parameters.offer[+j].endAmount;`
$DIR/test/advanced.spec.ts:3666:52-3668:10: `.entries(
          clonedOrder.parameters.consideration
        )`
$DIR/test/advanced.spec.ts:3669:11-3670:60: `considerationItem.startAmount =
            order.parameters.consideration[+j].startAmount;`
$DIR/test/advanced.spec.ts:3671:11-3672:58: `considerationItem.endAmount =
            order.parameters.consideration[+j].endAmount;`
$DIR/test/advanced.spec.ts:3676:7-3676:36: `ordersClone[0].numerator = 7;`
$DIR/test/advanced.spec.ts:3677:7-3677:39: `ordersClone[0].denominator = 10;`
$DIR/test/advanced.spec.ts:3679:7-3707:10: `await withBalanceChecks(ordersClone, 0, [], async () => {
        const tx = marketplaceContract
          .connect(buyer)
          .fulfillAdvancedOrder(
            order,
            [],
            toKey(0),
            ethers.constants.AddressZero,
            {
              value,
            }
          );
        const receipt = await (await tx).wait();
        await checkExpectedEvents(
          tx,
          receipt,
          [
            {
              order: ordersClone[0],
              orderHash,
              fulfiller: buyer.address,
            },
          ],
          undefined,
          []
        );

        return receipt;
      });`
$DIR/test/advanced.spec.ts:3681:11-3681:26: `.connect(buyer)`
$DIR/test/advanced.spec.ts:3682:11-3690:12: `.fulfillAdvancedOrder(
            order,
            [],
            toKey(0),
            ethers.constants.AddressZero,
            {
              value,
            }
          )`
$DIR/test/advanced.spec.ts:3691:41-3691:48: `.wait()`
$DIR/test/advanced.spec.ts:3709:7-3709:73: `orderStatus = await marketplaceContract.getOrderStatus(orderHash);`
$DIR/test/advanced.spec.ts:3709:46-3709:72: `.getOrderStatus(orderHash)`
$DIR/test/advanced.spec.ts:3723:51-3723:59: `.mul(10)`
$DIR/test/advanced.spec.ts:3723:67-3723:75: `.mul(10)`
$DIR/test/advanced.spec.ts:3726:26-3726:36: `.mul(1000)`
$DIR/test/advanced.spec.ts:3726:44-3726:54: `.mul(1000)`
$DIR/test/advanced.spec.ts:3727:26-3727:34: `.mul(10)`
$DIR/test/advanced.spec.ts:3727:42-3727:50: `.mul(10)`
$DIR/test/advanced.spec.ts:3728:26-3728:34: `.mul(20)`
$DIR/test/advanced.spec.ts:3728:42-3728:50: `.mul(20)`
$DIR/test/advanced.spec.ts:3739:50-3739:76: `.getOrderStatus(orderHash)`
$DIR/test/advanced.spec.ts:3745:7-3745:27: `order.numerator = 2;`
$DIR/test/advanced.spec.ts:3746:7-3746:30: `order.denominator = 10;`
$DIR/test/advanced.spec.ts:3749:7-3749:72: `mirrorObject = await createMirrorBuyNowOrder(buyer, zone, order);`
$DIR/test/advanced.spec.ts:3764:37-3764:52: `.connect(owner)`
$DIR/test/advanced.spec.ts:3764:52-3772:8: `.matchAdvancedOrders(
        [order, mirrorObject.mirrorOrder],
        [], // no criteria resolvers
        fulfillments,
        ethers.constants.AddressZero,
        {
          value,
        }
      )`
$DIR/test/advanced.spec.ts:3773:39-3773:46: `.wait()`
$DIR/test/advanced.spec.ts:3792:7-3792:73: `orderStatus = await marketplaceContract.getOrderStatus(orderHash);`
$DIR/test/advanced.spec.ts:3792:46-3792:72: `.getOrderStatus(orderHash)`
$DIR/test/advanced.spec.ts:3798:7-3798:27: `order.numerator = 1;`
$DIR/test/advanced.spec.ts:3799:7-3799:30: `order.denominator = 10;`
$DIR/test/advanced.spec.ts:3801:7-3801:72: `mirrorObject = await createMirrorBuyNowOrder(buyer, zone, order);`
$DIR/test/advanced.spec.ts:3803:7-3810:9: `executions = await simulateAdvancedMatchOrders(
        marketplaceContract,
        [order, mirrorObject.mirrorOrder],
        [], // no criteria resolvers
        fulfillments,
        owner,
        value
      );`
$DIR/test/advanced.spec.ts:3812:38-3812:53: `.connect(owner)`
$DIR/test/advanced.spec.ts:3812:53-3820:8: `.matchAdvancedOrders(
        [order, mirrorObject.mirrorOrder],
        [], // no criteria resolvers
        fulfillments,
        ethers.constants.AddressZero,
        {
          value,
        }
      )`
$DIR/test/advanced.spec.ts:3821:41-3821:48: `.wait()`
$DIR/test/advanced.spec.ts:3840:7-3840:73: `orderStatus = await marketplaceContract.getOrderStatus(orderHash);`
$DIR/test/advanced.spec.ts:3840:46-3840:72: `.getOrderStatus(orderHash)`
$DIR/test/advanced.spec.ts:3847:7-3847:27: `order.numerator = 7;`
$DIR/test/advanced.spec.ts:3848:7-3848:30: `order.denominator = 10;`
$DIR/test/advanced.spec.ts:3850:7-3850:72: `mirrorObject = await createMirrorBuyNowOrder(buyer, zone, order);`
$DIR/test/advanced.spec.ts:3852:7-3859:9: `executions = await simulateAdvancedMatchOrders(
        marketplaceContract,
        [order, mirrorObject.mirrorOrder],
        [], // no criteria resolvers
        fulfillments,
        owner,
        value
      );`
$DIR/test/advanced.spec.ts:3861:44-3861:59: `.connect(owner)`
$DIR/test/advanced.spec.ts:3861:59-3869:8: `.matchAdvancedOrders(
        [order, mirrorObject.mirrorOrder],
        [], // no criteria resolvers
        fulfillments,
        ethers.constants.AddressZero,
        {
          value,
        }
      )`
$DIR/test/advanced.spec.ts:3870:33-3870:40: `.wait()`
$DIR/test/advanced.spec.ts:3888:7-3888:73: `orderStatus = await marketplaceContract.getOrderStatus(orderHash);`
$DIR/test/advanced.spec.ts:3888:46-3888:72: `.getOrderStatus(orderHash)`
$DIR/test/advanced.spec.ts:3896:29-3896:37: `.pow(50)`
$DIR/test/advanced.spec.ts:3897:29-3897:37: `.pow(51)`
$DIR/test/advanced.spec.ts:3898:29-3898:37: `.pow(20)`
$DIR/test/advanced.spec.ts:3899:29-3899:37: `.pow(22)`
$DIR/test/advanced.spec.ts:3901:7-3901:74: `await mintAndApproveERC20(buyer, marketplaceContract.address, amt);`
$DIR/test/advanced.spec.ts:3927:50-3927:76: `.getOrderStatus(orderHash)`
$DIR/test/advanced.spec.ts:3934:7-3934:39: `order.numerator = numer1 as any;`
$DIR/test/advanced.spec.ts:3935:7-3935:41: `order.denominator = denom1 as any;`
$DIR/test/advanced.spec.ts:3937:7-3960:10: `await withBalanceChecks([order], 0, [], async () => {
        const tx = marketplaceContract
          .connect(buyer)
          .fulfillAdvancedOrder(order, [], toKey(0), buyer.address, {
            value,
          });
        const receipt = await (await tx).wait();
        await checkExpectedEvents(
          tx,
          receipt,
          [
            {
              order,
              orderHash,
              fulfiller: buyer.address,
              fulfillerConduitKey: toKey(0),
            },
          ],
          undefined,
          []
        );

        return receipt;
      });`
$DIR/test/advanced.spec.ts:3939:11-3939:26: `.connect(buyer)`
$DIR/test/advanced.spec.ts:3940:11-3942:13: `.fulfillAdvancedOrder(order, [], toKey(0), buyer.address, {
            value,
          })`
$DIR/test/advanced.spec.ts:3943:41-3943:48: `.wait()`
$DIR/test/advanced.spec.ts:3962:7-3962:73: `orderStatus = await marketplaceContract.getOrderStatus(orderHash);`
$DIR/test/advanced.spec.ts:3962:46-3962:72: `.getOrderStatus(orderHash)`
$DIR/test/advanced.spec.ts:3968:7-3968:33: `order.numerator = +numer2;`
$DIR/test/advanced.spec.ts:3969:7-3969:35: `order.denominator = +denom2;`
$DIR/test/advanced.spec.ts:3971:7-3975:12: `await marketplaceContract
        .connect(buyer)
        .fulfillAdvancedOrder(order, [], toKey(0), buyer.address, {
          value,
        });`
$DIR/test/advanced.spec.ts:3972:9-3972:24: `.connect(buyer)`
$DIR/test/advanced.spec.ts:3973:9-3975:11: `.fulfillAdvancedOrder(order, [], toKey(0), buyer.address, {
          value,
        })`
$DIR/test/advanced.spec.ts:3977:7-3977:73: `orderStatus = await marketplaceContract.getOrderStatus(orderHash);`
$DIR/test/advanced.spec.ts:3977:46-3977:72: `.getOrderStatus(orderHash)`
$DIR/test/advanced.spec.ts:3985:29-3985:36: `.pow(7)`
$DIR/test/advanced.spec.ts:3985:36-3985:43: `.sub(1)`
$DIR/test/advanced.spec.ts:3986:29-3986:37: `.pow(61)`
$DIR/test/advanced.spec.ts:3986:37-3986:44: `.sub(1)`
$DIR/test/advanced.spec.ts:3987:29-3987:38: `.pow(107)`
$DIR/test/advanced.spec.ts:3987:38-3987:45: `.sub(1)`
$DIR/test/advanced.spec.ts:3988:25-3988:37: `.mul(prime2)`
$DIR/test/advanced.spec.ts:3988:37-3988:49: `.mul(prime3)`
$DIR/test/advanced.spec.ts:3989:7-3989:74: `await mintAndApproveERC20(buyer, marketplaceContract.address, amt);`
$DIR/test/advanced.spec.ts:4015:50-4015:76: `.getOrderStatus(orderHash)`
$DIR/test/advanced.spec.ts:4022:7-4022:27: `order.numerator = 1;`
$DIR/test/advanced.spec.ts:4023:7-4023:41: `order.denominator = prime2 as any;`
$DIR/test/advanced.spec.ts:4025:7-4048:10: `await withBalanceChecks([order], 0, [], async () => {
        const tx = marketplaceContract
          .connect(buyer)
          .fulfillAdvancedOrder(order, [], toKey(0), buyer.address, {
            value,
          });
        const receipt = await (await tx).wait();
        await checkExpectedEvents(
          tx,
          receipt,
          [
            {
              order,
              orderHash,
              fulfiller: buyer.address,
              fulfillerConduitKey: toKey(0),
            },
          ],
          undefined,
          []
        );

        return receipt;
      });`
$DIR/test/advanced.spec.ts:4027:11-4027:26: `.connect(buyer)`
$DIR/test/advanced.spec.ts:4028:11-4030:13: `.fulfillAdvancedOrder(order, [], toKey(0), buyer.address, {
            value,
          })`
$DIR/test/advanced.spec.ts:4031:41-4031:48: `.wait()`
$DIR/test/advanced.spec.ts:4050:7-4050:73: `orderStatus = await marketplaceContract.getOrderStatus(orderHash);`
$DIR/test/advanced.spec.ts:4050:46-4050:72: `.getOrderStatus(orderHash)`
$DIR/test/advanced.spec.ts:4056:7-4056:39: `order.numerator = prime1 as any;`
$DIR/test/advanced.spec.ts:4057:7-4057:41: `order.denominator = prime3 as any;`
$DIR/test/advanced.spec.ts:4077:7-4077:77: `await set721ApprovalForAll(seller, marketplaceContract.address, true);`
$DIR/test/advanced.spec.ts:4104:11-4104:26: `.connect(buyer)`
$DIR/test/advanced.spec.ts:4105:11-4113:12: `.fulfillAdvancedOrder(
            order,
            criteriaResolvers,
            toKey(0),
            ethers.constants.AddressZero,
            {
              value,
            }
          )`
$DIR/test/advanced.spec.ts:4114:41-4114:48: `.wait()`
$DIR/test/advanced.spec.ts:4138:7-4138:78: `await set1155ApprovalForAll(seller, marketplaceContract.address, true);`
$DIR/test/advanced.spec.ts:4165:11-4165:26: `.connect(buyer)`
$DIR/test/advanced.spec.ts:4166:11-4174:12: `.fulfillAdvancedOrder(
            order,
            criteriaResolvers,
            toKey(0),
            ethers.constants.AddressZero,
            {
              value,
            }
          )`
$DIR/test/advanced.spec.ts:4175:41-4175:48: `.wait()`
$DIR/test/advanced.spec.ts:4200:7-4200:52: `await testERC721.mint(seller.address, nftId);`
$DIR/test/advanced.spec.ts:4200:23-4200:51: `.mint(seller.address, nftId)`
$DIR/test/advanced.spec.ts:4201:7-4201:58: `await testERC721.mint(seller.address, secondNFTId);`
$DIR/test/advanced.spec.ts:4201:23-4201:57: `.mint(seller.address, secondNFTId)`
$DIR/test/advanced.spec.ts:4202:7-4202:57: `await testERC721.mint(seller.address, thirdNFTId);`
$DIR/test/advanced.spec.ts:4202:23-4202:56: `.mint(seller.address, thirdNFTId)`
$DIR/test/advanced.spec.ts:4205:7-4205:77: `await set721ApprovalForAll(seller, marketplaceContract.address, true);`
$DIR/test/advanced.spec.ts:4230:11-4230:26: `.connect(buyer)`
$DIR/test/advanced.spec.ts:4231:11-4239:12: `.fulfillAdvancedOrder(
            order,
            criteriaResolvers,
            toKey(0),
            ethers.constants.AddressZero,
            {
              value,
            }
          )`
$DIR/test/advanced.spec.ts:4240:41-4240:48: `.wait()`
$DIR/test/advanced.spec.ts:4265:7-4265:52: `await testERC721.mint(seller.address, nftId);`
$DIR/test/advanced.spec.ts:4265:23-4265:51: `.mint(seller.address, nftId)`
$DIR/test/advanced.spec.ts:4266:7-4266:58: `await testERC721.mint(seller.address, secondNFTId);`
$DIR/test/advanced.spec.ts:4266:23-4266:57: `.mint(seller.address, secondNFTId)`
$DIR/test/advanced.spec.ts:4267:7-4267:57: `await testERC721.mint(seller.address, thirdNFTId);`
$DIR/test/advanced.spec.ts:4267:23-4267:56: `.mint(seller.address, thirdNFTId)`
$DIR/test/advanced.spec.ts:4272:7-4272:77: `await set721ApprovalForAll(seller, marketplaceContract.address, true);`
$DIR/test/advanced.spec.ts:4310:8-4312:8: `.map(([offerArr, considerationArr]) =>
        toFulfillment(offerArr, considerationArr)
      )`
$DIR/test/advanced.spec.ts:4326:9-4326:24: `.connect(owner)`
$DIR/test/advanced.spec.ts:4327:9-4335:10: `.matchAdvancedOrders(
          [order, mirrorOrder],
          criteriaResolvers,
          fulfillments,
          ethers.constants.AddressZero,
          {
            value,
          }
        )`
$DIR/test/advanced.spec.ts:4336:39-4336:46: `.wait()`
$DIR/test/advanced.spec.ts:4362:7-4362:78: `await set1155ApprovalForAll(seller, marketplaceContract.address, true);`
$DIR/test/advanced.spec.ts:4400:8-4402:8: `.map(([offerArr, considerationArr]) =>
        toFulfillment(offerArr, considerationArr)
      )`
$DIR/test/advanced.spec.ts:4416:9-4416:24: `.connect(owner)`
$DIR/test/advanced.spec.ts:4417:9-4425:10: `.matchAdvancedOrders(
          [order, mirrorOrder],
          criteriaResolvers,
          fulfillments,
          ethers.constants.AddressZero,
          {
            value,
          }
        )`
$DIR/test/advanced.spec.ts:4426:39-4426:46: `.wait()`
$DIR/test/advanced.spec.ts:4453:7-4453:52: `await testERC721.mint(seller.address, nftId);`
$DIR/test/advanced.spec.ts:4453:23-4453:51: `.mint(seller.address, nftId)`
$DIR/test/advanced.spec.ts:4454:7-4454:58: `await testERC721.mint(seller.address, secondNFTId);`
$DIR/test/advanced.spec.ts:4454:23-4454:57: `.mint(seller.address, secondNFTId)`
$DIR/test/advanced.spec.ts:4455:7-4455:57: `await testERC721.mint(seller.address, thirdNFTId);`
$DIR/test/advanced.spec.ts:4455:23-4455:56: `.mint(seller.address, thirdNFTId)`
$DIR/test/advanced.spec.ts:4458:7-4458:77: `await set721ApprovalForAll(seller, marketplaceContract.address, true);`
$DIR/test/advanced.spec.ts:4494:8-4496:8: `.map(([offerArr, considerationArr]) =>
        toFulfillment(offerArr, considerationArr)
      )`
$DIR/test/advanced.spec.ts:4510:9-4510:24: `.connect(owner)`
$DIR/test/advanced.spec.ts:4511:9-4519:10: `.matchAdvancedOrders(
          [order, mirrorOrder],
          criteriaResolvers,
          fulfillments,
          ethers.constants.AddressZero,
          {
            value,
          }
        )`
$DIR/test/advanced.spec.ts:4520:39-4520:46: `.wait()`
$DIR/test/advanced.spec.ts:4547:7-4547:51: `await testERC721.mint(buyer.address, nftId);`
$DIR/test/advanced.spec.ts:4547:23-4547:50: `.mint(buyer.address, nftId)`
$DIR/test/advanced.spec.ts:4548:7-4548:57: `await testERC721.mint(buyer.address, secondNFTId);`
$DIR/test/advanced.spec.ts:4548:23-4548:56: `.mint(buyer.address, secondNFTId)`
$DIR/test/advanced.spec.ts:4549:7-4549:56: `await testERC721.mint(buyer.address, thirdNFTId);`
$DIR/test/advanced.spec.ts:4549:23-4549:55: `.mint(buyer.address, thirdNFTId)`
$DIR/test/advanced.spec.ts:4554:7-4554:76: `await set721ApprovalForAll(buyer, marketplaceContract.address, true);`
$DIR/test/advanced.spec.ts:4558:7-4562:9: `await mintAndApproveERC20(
        seller,
        marketplaceContract.address,
        tokenAmount
      );`
$DIR/test/advanced.spec.ts:4584:14-4584:22: `.mul(-1)`
$DIR/test/advanced.spec.ts:4588:13-4588:28: `.connect(buyer)`
$DIR/test/advanced.spec.ts:4589:13-4597:14: `.fulfillAdvancedOrder(
              order,
              criteriaResolvers,
              toKey(0),
              ethers.constants.AddressZero,
              {
                value,
              }
            )`
$DIR/test/advanced.spec.ts:4598:43-4598:50: `.wait()`
$DIR/test/advanced.spec.ts:4623:7-4623:77: `await set1155ApprovalForAll(buyer, marketplaceContract.address, true);`
$DIR/test/advanced.spec.ts:4627:7-4631:9: `await mintAndApproveERC20(
        seller,
        marketplaceContract.address,
        tokenAmount
      );`
$DIR/test/advanced.spec.ts:4653:14-4653:22: `.mul(-1)`
$DIR/test/advanced.spec.ts:4657:13-4657:28: `.connect(buyer)`
$DIR/test/advanced.spec.ts:4658:13-4666:14: `.fulfillAdvancedOrder(
              order,
              criteriaResolvers,
              toKey(0),
              ethers.constants.AddressZero,
              {
                value,
              }
            )`
$DIR/test/advanced.spec.ts:4667:43-4667:50: `.wait()`
$DIR/test/advanced.spec.ts:4691:7-4695:9: `await mintAndApproveERC20(
        seller,
        marketplaceContract.address,
        tokenAmount
      );`
$DIR/test/advanced.spec.ts:4720:14-4720:22: `.mul(-1)`
$DIR/test/advanced.spec.ts:4724:13-4724:28: `.connect(buyer)`
$DIR/test/advanced.spec.ts:4725:13-4733:14: `.fulfillAdvancedOrder(
              order,
              criteriaResolvers,
              toKey(0),
              ethers.constants.AddressZero,
              {
                value,
              }
            )`
$DIR/test/advanced.spec.ts:4734:43-4734:50: `.wait()`
$DIR/test/advanced.spec.ts:4760:7-4760:76: `await set721ApprovalForAll(buyer, marketplaceContract.address, true);`
$DIR/test/advanced.spec.ts:4763:7-4767:9: `await mintAndApproveERC20(
        seller,
        marketplaceContract.address,
        tokenAmount
      );`
$DIR/test/advanced.spec.ts:4770:7-4774:9: `await mintAndApproveERC20(
        buyer,
        marketplaceContract.address,
        tokenAmount
      );`
$DIR/test/advanced.spec.ts:4780:34-4780:43: `.sub(100)`
$DIR/test/advanced.spec.ts:4780:56-4780:65: `.sub(100)`
$DIR/test/advanced.spec.ts:4832:9-4832:24: `.connect(owner)`
$DIR/test/advanced.spec.ts:4833:9-4841:10: `.matchAdvancedOrders(
          [order, mirrorOrder],
          criteriaResolvers,
          fulfillments,
          ethers.constants.AddressZero,
          {
            value,
          }
        )`
$DIR/test/advanced.spec.ts:4842:39-4842:46: `.wait()`
$DIR/test/advanced.spec.ts:4869:7-4869:77: `await set1155ApprovalForAll(buyer, marketplaceContract.address, true);`
$DIR/test/advanced.spec.ts:4872:7-4876:9: `await mintAndApproveERC20(
        seller,
        marketplaceContract.address,
        tokenAmount
      );`
$DIR/test/advanced.spec.ts:4879:7-4883:9: `await mintAndApproveERC20(
        buyer,
        marketplaceContract.address,
        tokenAmount
      );`
$DIR/test/advanced.spec.ts:4889:34-4889:43: `.sub(100)`
$DIR/test/advanced.spec.ts:4889:56-4889:65: `.sub(100)`
$DIR/test/advanced.spec.ts:4941:9-4941:24: `.connect(owner)`
$DIR/test/advanced.spec.ts:4942:9-4950:10: `.matchAdvancedOrders(
          [order, mirrorOrder],
          criteriaResolvers,
          fulfillments,
          ethers.constants.AddressZero,
          {
            value,
          }
        )`
$DIR/test/advanced.spec.ts:4951:39-4951:46: `.wait()`
$DIR/test/advanced.spec.ts:4978:7-4978:78: `await set1155ApprovalForAll(seller, marketplaceContract.address, true);`
$DIR/test/advanced.spec.ts:5027:51-5027:59: `.mul(10)`
$DIR/test/advanced.spec.ts:5027:67-5027:75: `.mul(10)`
$DIR/test/advanced.spec.ts:5030:26-5030:36: `.mul(1000)`
$DIR/test/advanced.spec.ts:5030:44-5030:54: `.mul(1000)`
$DIR/test/advanced.spec.ts:5031:26-5031:34: `.mul(10)`
$DIR/test/advanced.spec.ts:5031:42-5031:50: `.mul(10)`
$DIR/test/advanced.spec.ts:5032:26-5032:34: `.mul(20)`
$DIR/test/advanced.spec.ts:5032:42-5032:50: `.mul(20)`
$DIR/test/advanced.spec.ts:5050:52-5050:78: `.getOrderStatus(orderHash)`
$DIR/test/advanced.spec.ts:5056:7-5056:27: `order.numerator = 2;`
$DIR/test/advanced.spec.ts:5057:7-5057:30: `order.denominator = 10;`
$DIR/test/advanced.spec.ts:5061:11-5061:26: `.connect(buyer)`
$DIR/test/advanced.spec.ts:5062:11-5070:12: `.fulfillAdvancedOrder(
            order,
            [],
            toKey(0),
            ethers.constants.AddressZero,
            {
              value,
            }
          )`
$DIR/test/advanced.spec.ts:5071:41-5071:48: `.wait()`
$DIR/test/advanced.spec.ts:5102:51-5102:59: `.mul(10)`
$DIR/test/advanced.spec.ts:5102:67-5102:75: `.mul(10)`
$DIR/test/advanced.spec.ts:5105:26-5105:36: `.mul(1000)`
$DIR/test/advanced.spec.ts:5105:44-5105:54: `.mul(1000)`
$DIR/test/advanced.spec.ts:5106:26-5106:34: `.mul(10)`
$DIR/test/advanced.spec.ts:5106:42-5106:50: `.mul(10)`
$DIR/test/advanced.spec.ts:5107:26-5107:34: `.mul(20)`
$DIR/test/advanced.spec.ts:5107:42-5107:50: `.mul(20)`
$DIR/test/advanced.spec.ts:5127:52-5127:78: `.getOrderStatus(orderHash)`
$DIR/test/advanced.spec.ts:5133:7-5133:27: `order.numerator = 2;`
$DIR/test/advanced.spec.ts:5134:7-5134:30: `order.denominator = 10;`
$DIR/test/advanced.spec.ts:5138:11-5138:26: `.connect(buyer)`
$DIR/test/advanced.spec.ts:5139:11-5147:12: `.fulfillAdvancedOrder(
            order,
            [],
            toKey(0),
            ethers.constants.AddressZero,
            {
              value,
            }
          )`
$DIR/test/advanced.spec.ts:5148:41-5148:48: `.wait()`
$DIR/test/advanced.spec.ts:5175:51-5175:59: `.mul(10)`
$DIR/test/advanced.spec.ts:5175:67-5175:75: `.mul(10)`
$DIR/test/advanced.spec.ts:5178:26-5178:36: `.mul(1000)`
$DIR/test/advanced.spec.ts:5178:44-5178:54: `.mul(1000)`
$DIR/test/advanced.spec.ts:5179:26-5179:34: `.mul(10)`
$DIR/test/advanced.spec.ts:5179:42-5179:50: `.mul(10)`
$DIR/test/advanced.spec.ts:5180:26-5180:34: `.mul(20)`
$DIR/test/advanced.spec.ts:5180:42-5180:50: `.mul(20)`
$DIR/test/advanced.spec.ts:5198:52-5198:78: `.getOrderStatus(orderHash)`
$DIR/test/advanced.spec.ts:5204:7-5204:27: `order.numerator = 2;`
$DIR/test/advanced.spec.ts:5205:7-5205:30: `order.denominator = 10;`
$DIR/test/advanced.spec.ts:5209:11-5209:26: `.connect(buyer)`
$DIR/test/advanced.spec.ts:5210:11-5218:12: `.fulfillAdvancedOrder(
            order,
            [],
            toKey(0),
            ethers.constants.AddressZero,
            {
              value,
            }
          )`
$DIR/test/advanced.spec.ts:5219:41-5219:48: `.wait()`
$DIR/test/advanced.spec.ts:5245:36-5245:43: `.mul(2)`
$DIR/test/advanced.spec.ts:5246:7-5246:72: `await testERC1155.mint(seller.address, nftId, endAmount.mul(10));`
$DIR/test/advanced.spec.ts:5246:24-5246:71: `.mint(seller.address, nftId, endAmount.mul(10))`
$DIR/test/advanced.spec.ts:5246:62-5246:70: `.mul(10)`
$DIR/test/advanced.spec.ts:5250:7-5250:78: `await set1155ApprovalForAll(seller, marketplaceContract.address, true);`
$DIR/test/advanced.spec.ts:5268:50-5268:76: `.getOrderStatus(orderHash)`
$DIR/test/advanced.spec.ts:5274:7-5303:10: `await withBalanceChecks([order], 0, [], async () => {
        const tx = marketplaceContract
          .connect(buyer)
          .fulfillAdvancedOrder(
            order,
            [],
            toKey(0),
            ethers.constants.AddressZero,
            {
              value,
            }
          );
        const receipt = await (await tx).wait();
        await checkExpectedEvents(
          tx,
          receipt,
          [
            {
              order,
              orderHash,
              fulfiller: buyer.address,
              fulfillerConduitKey: toKey(0),
            },
          ],
          undefined,
          []
        );

        return receipt;
      });`
$DIR/test/advanced.spec.ts:5276:11-5276:26: `.connect(buyer)`
$DIR/test/advanced.spec.ts:5277:11-5285:12: `.fulfillAdvancedOrder(
            order,
            [],
            toKey(0),
            ethers.constants.AddressZero,
            {
              value,
            }
          )`
$DIR/test/advanced.spec.ts:5286:41-5286:48: `.wait()`
$DIR/test/advanced.spec.ts:5305:7-5305:73: `orderStatus = await marketplaceContract.getOrderStatus(orderHash);`
$DIR/test/advanced.spec.ts:5305:46-5305:72: `.getOrderStatus(orderHash)`
$DIR/test/advanced.spec.ts:5314:7-5318:9: `await mintAndApproveERC20(
        seller,
        marketplaceContract.address,
        tokenAmount
      );`
$DIR/test/advanced.spec.ts:5323:36-5323:43: `.mul(2)`
$DIR/test/advanced.spec.ts:5324:7-5324:71: `await testERC1155.mint(buyer.address, nftId, endAmount.mul(10));`
$DIR/test/advanced.spec.ts:5324:24-5324:70: `.mint(buyer.address, nftId, endAmount.mul(10))`
$DIR/test/advanced.spec.ts:5324:61-5324:69: `.mul(10)`
$DIR/test/advanced.spec.ts:5327:7-5327:77: `await set1155ApprovalForAll(buyer, marketplaceContract.address, true);`
$DIR/test/advanced.spec.ts:5360:50-5360:76: `.getOrderStatus(orderHash)`
$DIR/test/advanced.spec.ts:5366:7-5395:10: `await withBalanceChecks([order], 0, [], async () => {
        const tx = marketplaceContract
          .connect(buyer)
          .fulfillAdvancedOrder(
            order,
            [],
            toKey(0),
            ethers.constants.AddressZero,
            {
              value,
            }
          );
        const receipt = await (await tx).wait();
        await checkExpectedEvents(
          tx,
          receipt,
          [
            {
              order,
              orderHash,
              fulfiller: buyer.address,
              fulfillerConduitKey: toKey(0),
            },
          ],
          undefined,
          []
        );

        return receipt;
      });`
$DIR/test/advanced.spec.ts:5368:11-5368:26: `.connect(buyer)`
$DIR/test/advanced.spec.ts:5369:11-5377:12: `.fulfillAdvancedOrder(
            order,
            [],
            toKey(0),
            ethers.constants.AddressZero,
            {
              value,
            }
          )`
$DIR/test/advanced.spec.ts:5378:41-5378:48: `.wait()`
$DIR/test/advanced.spec.ts:5397:7-5397:73: `orderStatus = await marketplaceContract.getOrderStatus(orderHash);`
$DIR/test/advanced.spec.ts:5397:46-5397:72: `.getOrderStatus(orderHash)`
$DIR/test/advanced.spec.ts:5407:36-5407:43: `.mul(2)`
$DIR/test/advanced.spec.ts:5408:7-5408:72: `await testERC1155.mint(seller.address, nftId, endAmount.mul(10));`
$DIR/test/advanced.spec.ts:5408:24-5408:71: `.mint(seller.address, nftId, endAmount.mul(10))`
$DIR/test/advanced.spec.ts:5408:62-5408:70: `.mul(10)`
$DIR/test/advanced.spec.ts:5412:7-5412:78: `await set1155ApprovalForAll(seller, marketplaceContract.address, true);`
$DIR/test/advanced.spec.ts:5430:50-5430:76: `.getOrderStatus(orderHash)`
$DIR/test/advanced.spec.ts:5455:9-5455:24: `.connect(owner)`
$DIR/test/advanced.spec.ts:5456:9-5458:11: `.matchOrders([order, mirrorOrder], fulfillments, {
          value,
        })`
$DIR/test/advanced.spec.ts:5459:39-5459:46: `.wait()`
$DIR/test/advanced.spec.ts:5478:7-5478:73: `orderStatus = await marketplaceContract.getOrderStatus(orderHash);`
$DIR/test/advanced.spec.ts:5478:46-5478:72: `.getOrderStatus(orderHash)`
$DIR/test/advanced.spec.ts:5584:8-5586:8: `.map(([offerArr, considerationArr]) =>
        toFulfillment(offerArr, considerationArr)
      )`
$DIR/test/advanced.spec.ts:5600:9-5600:24: `.connect(owner)`
$DIR/test/advanced.spec.ts:5601:9-5609:10: `.matchAdvancedOrders(
          [orderOne, orderTwo, orderThree],
          [],
          fulfillments,
          ethers.constants.AddressZero,
          {
            value: 0,
          }
        )`
$DIR/test/advanced.spec.ts:5610:39-5610:46: `.wait()`
$DIR/test/advanced.spec.ts:5713:8-5715:8: `.map(([offerArr, considerationArr]) =>
        toFulfillment(offerArr, considerationArr)
      )`
$DIR/test/advanced.spec.ts:5743:7-5743:78: `await set1155ApprovalForAll(seller, marketplaceContract.address, true);`
$DIR/test/advanced.spec.ts:5747:7-5751:9: `await mintAndApproveERC20(
        buyer,
        marketplaceContract.address,
        tokenAmount.mul(2)
      );`
$DIR/test/advanced.spec.ts:5750:20-5750:27: `.mul(2)`
$DIR/test/advanced.spec.ts:5782:34-5782:41: `.mul(2)`
$DIR/test/advanced.spec.ts:5782:54-5782:61: `.mul(2)`
$DIR/test/advanced.spec.ts:5788:17-5788:24: `.mul(2)`
$DIR/test/advanced.spec.ts:5789:17-5789:24: `.mul(2)`
$DIR/test/advanced.spec.ts:5814:8-5816:8: `.map(([offerArr, considerationArr]) =>
        toFulfillment(offerArr, considerationArr)
      )`
$DIR/test/advanced.spec.ts:5830:9-5830:24: `.connect(buyer)`
$DIR/test/advanced.spec.ts:5831:9-5839:10: `.matchAdvancedOrders(
          [orderOne, orderTwo, orderThree],
          [],
          fulfillments,
          ethers.constants.AddressZero,
          {
            value: 0,
          }
        )`
$DIR/test/advanced.spec.ts:5840:39-5840:46: `.wait()`
$DIR/test/advanced.spec.ts:5888:7-5888:78: `await set1155ApprovalForAll(seller, marketplaceContract.address, true);`
$DIR/test/advanced.spec.ts:5892:7-5896:9: `await mintAndApproveERC20(
        buyer,
        marketplaceContract.address,
        tokenAmount.mul(2)
      );`
$DIR/test/advanced.spec.ts:5895:20-5895:27: `.mul(2)`
$DIR/test/advanced.spec.ts:5899:38-5899:45: `.mul(2)`
$DIR/test/advanced.spec.ts:5899:53-5899:60: `.mul(2)`
$DIR/test/advanced.spec.ts:5903:34-5903:41: `.mul(2)`
$DIR/test/advanced.spec.ts:5903:54-5903:61: `.mul(2)`
$DIR/test/advanced.spec.ts:5953:8-5955:8: `.map(([offerArr, considerationArr]) =>
        toFulfillment(offerArr, considerationArr)
      )`
$DIR/test/advanced.spec.ts:5969:9-5969:24: `.connect(buyer)`
$DIR/test/advanced.spec.ts:5970:9-5978:10: `.matchAdvancedOrders(
          [orderOne, orderTwo, orderThree],
          [],
          fulfillments,
          ethers.constants.AddressZero,
          {
            value: 0,
          }
        )`
$DIR/test/advanced.spec.ts:5979:39-5979:46: `.wait()`
$DIR/test/advanced.spec.ts:6015:7-6015:78: `await set1155ApprovalForAll(seller, marketplaceContract.address, true);`
$DIR/test/advanced.spec.ts:6019:7-6023:9: `await mintAndApproveERC20(
        buyer,
        marketplaceContract.address,
        tokenAmount.mul(2)
      );`
$DIR/test/advanced.spec.ts:6022:20-6022:27: `.mul(2)`
$DIR/test/advanced.spec.ts:6026:38-6026:45: `.mul(2)`
$DIR/test/advanced.spec.ts:6026:53-6026:60: `.mul(2)`
$DIR/test/advanced.spec.ts:6030:34-6030:41: `.mul(2)`
$DIR/test/advanced.spec.ts:6030:54-6030:61: `.mul(2)`
$DIR/test/advanced.spec.ts:6098:8-6100:8: `.map(([offerArr, considerationArr]) =>
        toFulfillment(offerArr, considerationArr)
      )`
$DIR/test/advanced.spec.ts:6114:9-6114:24: `.connect(buyer)`
$DIR/test/advanced.spec.ts:6115:9-6123:10: `.matchAdvancedOrders(
          [orderOne, orderTwo, orderThree],
          [],
          fulfillments,
          ethers.constants.AddressZero,
          {
            value: 0,
          }
        )`
$DIR/test/advanced.spec.ts:6124:39-6124:46: `.wait()`
$DIR/test/advanced.spec.ts:6196:8-6198:8: `.map(([offerArr, considerationArr]) =>
        toFulfillment(offerArr, considerationArr)
      )`
$DIR/test/advanced.spec.ts:6211:9-6211:24: `.connect(owner)`
$DIR/test/advanced.spec.ts:6212:9-6214:11: `.matchOrders([order, mirrorOrder], fulfillments, {
          value,
        })`
$DIR/test/advanced.spec.ts:6215:39-6215:46: `.wait()`
$DIR/test/advanced.spec.ts:6281:8-6283:8: `.map(([offerArr, considerationArr]) =>
        toFulfillment(offerArr, considerationArr)
      )`
$DIR/test/advanced.spec.ts:6296:9-6296:24: `.connect(owner)`
$DIR/test/advanced.spec.ts:6297:9-6299:11: `.matchOrders([order, mirrorOrder], fulfillments, {
          value,
        })`
$DIR/test/advanced.spec.ts:6300:39-6300:46: `.wait()`
$DIR/test/advanced.spec.ts:6375:8-6377:8: `.map(([offerArr, considerationArr]) =>
        toFulfillment(offerArr, considerationArr)
      )`
$DIR/test/advanced.spec.ts:6390:9-6390:24: `.connect(owner)`
$DIR/test/advanced.spec.ts:6391:9-6393:11: `.matchOrders([order, mirrorOrder], fulfillments, {
          value,
        })`
$DIR/test/advanced.spec.ts:6394:39-6394:46: `.wait()`
$DIR/test/advanced.spec.ts:6470:8-6472:8: `.map(([offerArr, considerationArr]) =>
        toFulfillment(offerArr, considerationArr)
      )`
$DIR/test/advanced.spec.ts:6485:9-6485:24: `.connect(owner)`
$DIR/test/advanced.spec.ts:6486:9-6488:11: `.matchOrders([order, mirrorOrder], fulfillments, {
          value,
        })`
$DIR/test/advanced.spec.ts:6489:39-6489:46: `.wait()`
$DIR/test/advanced.spec.ts:6560:8-6562:8: `.map(([offerArr, considerationArr]) =>
        toFulfillment(offerArr, considerationArr)
      )`
$DIR/test/advanced.spec.ts:6575:9-6575:24: `.connect(owner)`
$DIR/test/advanced.spec.ts:6576:9-6578:11: `.matchOrders([order, mirrorOrder], fulfillments, {
          value,
        })`
$DIR/test/advanced.spec.ts:6579:39-6579:46: `.wait()`
$DIR/test/advanced.spec.ts:6645:8-6647:8: `.map(([offerArr, considerationArr]) =>
        toFulfillment(offerArr, considerationArr)
      )`
$DIR/test/advanced.spec.ts:6660:9-6660:24: `.connect(owner)`
$DIR/test/advanced.spec.ts:6661:9-6663:11: `.matchOrders([order, mirrorOrder], fulfillments, {
          value,
        })`
$DIR/test/advanced.spec.ts:6664:39-6664:46: `.wait()`
$DIR/test/advanced.spec.ts:6722:9-6722:24: `.connect(owner)`
$DIR/test/advanced.spec.ts:6723:9-6725:11: `.matchOrders([order, mirrorOrder], fulfillments, {
          value,
        })`
$DIR/test/advanced.spec.ts:6726:39-6726:46: `.wait()`
$DIR/test/advanced.spec.ts:6780:8-6782:8: `.map(([offerArr, considerationArr]) =>
        toFulfillment(offerArr, considerationArr)
      )`
$DIR/test/advanced.spec.ts:6795:9-6795:24: `.connect(owner)`
$DIR/test/advanced.spec.ts:6796:9-6798:11: `.matchOrders([order, mirrorOrder], fulfillments, {
          value,
        })`
$DIR/test/advanced.spec.ts:6799:39-6799:46: `.wait()`
$DIR/test/advanced.spec.ts:6826:7-6826:76: `await testERC1155Two.mint(seller.address, secondNftId, secondAmount);`
$DIR/test/advanced.spec.ts:6826:27-6826:75: `.mint(seller.address, secondNftId, secondAmount)`
$DIR/test/advanced.spec.ts:6830:7-6830:78: `await set1155ApprovalForAll(seller, marketplaceContract.address, true);`
$DIR/test/advanced.spec.ts:6872:8-6874:8: `.map(([offerArr, considerationArr]) =>
        toFulfillment(offerArr, considerationArr)
      )`
$DIR/test/advanced.spec.ts:6887:9-6887:24: `.connect(owner)`
$DIR/test/advanced.spec.ts:6902:7-6902:76: `await testERC1155Two.mint(seller.address, secondNftId, secondAmount);`
$DIR/test/advanced.spec.ts:6902:27-6902:75: `.mint(seller.address, secondNftId, secondAmount)`
$DIR/test/advanced.spec.ts:6951:8-6953:8: `.map(([offerArr, considerationArr]) =>
        toFulfillment(offerArr, considerationArr)
      )`
$DIR/test/advanced.spec.ts:6966:9-6966:24: `.connect(owner)`
$DIR/test/advanced.spec.ts:6981:7-6981:76: `await testERC1155Two.mint(seller.address, secondNftId, secondAmount);`
$DIR/test/advanced.spec.ts:6981:27-6981:75: `.mint(seller.address, secondNftId, secondAmount)`
$DIR/test/advanced.spec.ts:6989:7-6989:76: `await testERC1155Two.mint(seller.address, fourthNftId, fourthAmount);`
$DIR/test/advanced.spec.ts:6989:27-6989:75: `.mint(seller.address, fourthNftId, fourthAmount)`
$DIR/test/advanced.spec.ts:7042:8-7044:8: `.map(([offerArr, considerationArr]) =>
        toFulfillment(offerArr, considerationArr)
      )`
$DIR/test/advanced.spec.ts:7057:9-7057:24: `.connect(owner)`
$DIR/test/advanced.spec.ts:7091:69-7093:8: `.map(
        toFulfillmentComponents
      )`
$DIR/test/advanced.spec.ts:7097:11-7097:26: `.connect(buyer)`
$DIR/test/advanced.spec.ts:7098:11-7107:12: `.fulfillAvailableOrders(
            [order],
            offerComponents,
            considerationComponents,
            toKey(0),
            100,
            {
              value,
            }
          )`
$DIR/test/advanced.spec.ts:7108:41-7108:48: `.wait()`
$DIR/test/advanced.spec.ts:7153:11-7153:26: `.connect(buyer)`
$DIR/test/advanced.spec.ts:7154:11-7165:12: `.fulfillAvailableAdvancedOrders(
            [order],
            [],
            offerComponents,
            considerationComponents,
            toKey(0),
            ethers.constants.AddressZero,
            100,
            {
              value,
            }
          )`
$DIR/test/advanced.spec.ts:7166:41-7166:48: `.wait()`
$DIR/test/advanced.spec.ts:7208:11-7208:26: `.connect(buyer)`
$DIR/test/advanced.spec.ts:7209:11-7220:12: `.fulfillAvailableAdvancedOrders(
            [order],
            [],
            offerComponents,
            considerationComponents,
            toKey(0),
            owner.address,
            100,
            {
              value,
            }
          )`
$DIR/test/advanced.spec.ts:7221:41-7221:48: `.wait()`
$DIR/test/advanced.spec.ts:7244:51-7244:58: `.div(2)`
$DIR/test/advanced.spec.ts:7244:66-7244:73: `.div(2)`
$DIR/test/advanced.spec.ts:7292:8-7292:37: `.map(toFulfillmentComponents)`
$DIR/test/advanced.spec.ts:7300:13-7300:28: `.connect(buyer)`
$DIR/test/advanced.spec.ts:7301:13-7310:14: `.fulfillAvailableOrders(
              [orderOne, orderTwo],
              offerComponents,
              considerationComponents,
              toKey(0),
              100,
              {
                value: value.mul(2),
              }
            )`
$DIR/test/advanced.spec.ts:7308:29-7308:36: `.mul(2)`
$DIR/test/advanced.spec.ts:7311:43-7311:50: `.wait()`
$DIR/test/advanced.spec.ts:7347:51-7347:58: `.div(2)`
$DIR/test/advanced.spec.ts:7347:66-7347:73: `.div(2)`
$DIR/test/advanced.spec.ts:7376:7-7379:9: `orderOne.extraData = ethers.utils.defaultAbiCoder.encode(
        ["bytes32[]"],
        [[orderHashOne, orderHashTwo]]
      );`
$DIR/test/advanced.spec.ts:7376:34-7379:8: `.utils.defaultAbiCoder.encode(
        ["bytes32[]"],
        [[orderHashOne, orderHashTwo]]
      )`
$DIR/test/advanced.spec.ts:7403:8-7403:37: `.map(toFulfillmentComponents)`
$DIR/test/advanced.spec.ts:7411:13-7411:28: `.connect(buyer)`
$DIR/test/advanced.spec.ts:7412:13-7423:14: `.fulfillAvailableAdvancedOrders(
              [orderOne, orderTwo],
              [],
              offerComponents,
              considerationComponents,
              toKey(0),
              ethers.constants.AddressZero,
              100,
              {
                value: value.mul(2),
              }
            )`
$DIR/test/advanced.spec.ts:7421:29-7421:36: `.mul(2)`
$DIR/test/advanced.spec.ts:7424:43-7424:50: `.wait()`
$DIR/test/advanced.spec.ts:7460:51-7460:58: `.div(2)`
$DIR/test/advanced.spec.ts:7460:66-7460:73: `.div(2)`
$DIR/test/advanced.spec.ts:7510:8-7510:37: `.map(toFulfillmentComponents)`
$DIR/test/advanced.spec.ts:7518:13-7518:28: `.connect(buyer)`
$DIR/test/advanced.spec.ts:7519:13-7528:14: `.fulfillAvailableOrders(
              [orderOne, orderTwo],
              offerComponents,
              considerationComponents,
              toKey(0),
              100,
              {
                value: value.mul(2),
              }
            )`
$DIR/test/advanced.spec.ts:7526:29-7526:36: `.mul(2)`
$DIR/test/advanced.spec.ts:7529:43-7529:50: `.wait()`
$DIR/test/advanced.spec.ts:7565:51-7565:58: `.div(2)`
$DIR/test/advanced.spec.ts:7565:66-7565:73: `.div(2)`
$DIR/test/advanced.spec.ts:7615:8-7615:37: `.map(toFulfillmentComponents)`
$DIR/test/advanced.spec.ts:7623:13-7623:28: `.connect(buyer)`
$DIR/test/advanced.spec.ts:7624:13-7633:14: `.fulfillAvailableOrders(
              [orderOne, orderTwo],
              offerComponents,
              considerationComponents,
              toKey(0),
              100,
              {
                value: value.mul(2),
              }
            )`
$DIR/test/advanced.spec.ts:7631:29-7631:36: `.mul(2)`
$DIR/test/advanced.spec.ts:7634:43-7634:50: `.wait()`
$DIR/test/advanced.spec.ts:7670:51-7670:58: `.div(2)`
$DIR/test/advanced.spec.ts:7670:66-7670:73: `.div(2)`
$DIR/test/advanced.spec.ts:7718:8-7718:37: `.map(toFulfillmentComponents)`
$DIR/test/advanced.spec.ts:7726:13-7726:28: `.connect(buyer)`
$DIR/test/advanced.spec.ts:7727:13-7738:14: `.fulfillAvailableAdvancedOrders(
              [orderOne, orderTwo],
              [],
              offerComponents,
              considerationComponents,
              toKey(0),
              ethers.constants.AddressZero,
              100,
              {
                value: value.mul(2),
              }
            )`
$DIR/test/advanced.spec.ts:7736:29-7736:36: `.mul(2)`
$DIR/test/advanced.spec.ts:7739:43-7739:50: `.wait()`
$DIR/test/advanced.spec.ts:7775:51-7775:58: `.div(2)`
$DIR/test/advanced.spec.ts:7775:66-7775:73: `.div(2)`
$DIR/test/advanced.spec.ts:7828:13-7828:28: `.connect(buyer)`
$DIR/test/advanced.spec.ts:7829:13-7838:14: `.callStatic.fulfillAvailableOrders(
              [orderOne, orderTwo],
              offerComponents,
              considerationComponents,
              toKey(0),
              1,
              {
                value: value.mul(2),
              }
            )`
$DIR/test/advanced.spec.ts:7836:29-7836:36: `.mul(2)`
$DIR/test/advanced.spec.ts:7840:13-7840:28: `.connect(buyer)`
$DIR/test/advanced.spec.ts:7841:13-7850:14: `.fulfillAvailableOrders(
              [orderOne, orderTwo],
              offerComponents,
              considerationComponents,
              toKey(0),
              1,
              {
                value: value.mul(2),
              }
            )`
$DIR/test/advanced.spec.ts:7848:29-7848:36: `.mul(2)`
$DIR/test/advanced.spec.ts:7851:43-7851:50: `.wait()`
$DIR/test/advanced.spec.ts:7880:51-7880:58: `.div(2)`
$DIR/test/advanced.spec.ts:7880:66-7880:73: `.div(2)`
$DIR/test/advanced.spec.ts:7935:13-7935:28: `.connect(buyer)`
$DIR/test/advanced.spec.ts:7936:13-7947:14: `.fulfillAvailableAdvancedOrders(
              [orderOne, orderTwo],
              [],
              offerComponents,
              considerationComponents,
              toKey(0),
              ethers.constants.AddressZero,
              1,
              {
                value: value.mul(2),
              }
            )`
$DIR/test/advanced.spec.ts:7945:29-7945:36: `.mul(2)`
$DIR/test/advanced.spec.ts:7948:43-7948:50: `.wait()`
$DIR/test/advanced.spec.ts:7980:51-7980:58: `.div(2)`
$DIR/test/advanced.spec.ts:7980:66-7980:73: `.div(2)`
$DIR/test/advanced.spec.ts:8041:7-8057:10: `await withBalanceChecks([orderFour], 0, undefined, async () => {
        const tx = marketplaceContract
          .connect(buyer)
          .fulfillOrder(orderFour, toKey(0), {
            value,
          });
        const receipt = await (await tx).wait();
        await checkExpectedEvents(tx, receipt, [
          {
            order: orderFour,
            orderHash: orderHashFour,
            fulfiller: buyer.address,
          },
        ]);

        return receipt;
      });`
$DIR/test/advanced.spec.ts:8043:11-8043:26: `.connect(buyer)`
$DIR/test/advanced.spec.ts:8044:11-8046:13: `.fulfillOrder(orderFour, toKey(0), {
            value,
          })`
$DIR/test/advanced.spec.ts:8047:41-8047:48: `.wait()`
$DIR/test/advanced.spec.ts:8090:11-8090:26: `.connect(buyer)`
$DIR/test/advanced.spec.ts:8091:11-8100:12: `.fulfillAvailableOrders(
            [orderOne, orderTwo, orderThree, orderFour],
            offerComponents,
            considerationComponents,
            toKey(0),
            100,
            {
              value: value.mul(4),
            }
          )`
$DIR/test/advanced.spec.ts:8098:27-8098:34: `.mul(4)`
$DIR/test/advanced.spec.ts:8101:41-8101:48: `.wait()`
$DIR/test/advanced.spec.ts:8123:51-8123:58: `.div(2)`
$DIR/test/advanced.spec.ts:8123:66-8123:73: `.div(2)`
$DIR/test/advanced.spec.ts:8184:7-8200:10: `await withBalanceChecks([orderFour], 0, undefined, async () => {
        const tx = marketplaceContract
          .connect(buyer)
          .fulfillOrder(orderFour, toKey(0), {
            value,
          });
        const receipt = await (await tx).wait();
        await checkExpectedEvents(tx, receipt, [
          {
            order: orderFour,
            orderHash: orderHashFour,
            fulfiller: buyer.address,
          },
        ]);

        return receipt;
      });`
$DIR/test/advanced.spec.ts:8186:11-8186:26: `.connect(buyer)`
$DIR/test/advanced.spec.ts:8187:11-8189:13: `.fulfillOrder(orderFour, toKey(0), {
            value,
          })`
$DIR/test/advanced.spec.ts:8190:41-8190:48: `.wait()`
$DIR/test/advanced.spec.ts:8233:11-8233:26: `.connect(buyer)`
$DIR/test/advanced.spec.ts:8234:11-8245:12: `.fulfillAvailableAdvancedOrders(
            [orderOne, orderTwo, orderThree, orderFour],
            [],
            offerComponents,
            considerationComponents,
            toKey(0),
            ethers.constants.AddressZero,
            100,
            {
              value: value.mul(4),
            }
          )`
$DIR/test/advanced.spec.ts:8243:27-8243:34: `.mul(4)`
$DIR/test/advanced.spec.ts:8246:41-8246:48: `.wait()`
$DIR/test/advanced.spec.ts:8275:7-8275:60: `await testERC721.mint(seller.address, criteriaNftId);`
$DIR/test/advanced.spec.ts:8275:23-8275:59: `.mint(seller.address, criteriaNftId)`
$DIR/test/advanced.spec.ts:8276:7-8276:66: `await testERC721.mint(seller.address, secondCriteriaNFTId);`
$DIR/test/advanced.spec.ts:8276:23-8276:65: `.mint(seller.address, secondCriteriaNFTId)`
$DIR/test/advanced.spec.ts:8277:7-8277:65: `await testERC721.mint(seller.address, thirdCriteriaNFTId);`
$DIR/test/advanced.spec.ts:8277:23-8277:64: `.mint(seller.address, thirdCriteriaNFTId)`
$DIR/test/advanced.spec.ts:8282:7-8282:77: `await set721ApprovalForAll(seller, marketplaceContract.address, true);`
$DIR/test/advanced.spec.ts:8344:11-8344:26: `.connect(buyer)`
$DIR/test/advanced.spec.ts:8345:11-8356:12: `.fulfillAvailableAdvancedOrders(
            [orderOne, orderTwo],
            criteriaResolvers,
            offerComponents,
            considerationComponents,
            toKey(0),
            ethers.constants.AddressZero,
            100,
            {
              value: value.mul(2),
            }
          )`
$DIR/test/advanced.spec.ts:8354:27-8354:34: `.mul(2)`
$DIR/test/advanced.spec.ts:8357:41-8357:48: `.wait()`
$DIR/test/advanced.spec.ts:8380:7-8380:78: `await set1155ApprovalForAll(seller, marketplaceContract.address, true);`
$DIR/test/advanced.spec.ts:8398:48-8398:74: `.getCounter(buyer.address)`
$DIR/test/advanced.spec.ts:8407:19-8407:38: `.sub(unspentAmount)`
$DIR/test/advanced.spec.ts:8408:19-8408:38: `.sub(unspentAmount)`
$DIR/test/advanced.spec.ts:8415:23-8415:39: `.padEnd(66, "0")`
$DIR/test/advanced.spec.ts:8449:9-8449:24: `.connect(owner)`
$DIR/test/advanced.spec.ts:8450:9-8452:11: `.matchOrders([order, mirrorOrder], fulfillments, {
          value,
        })`
$DIR/test/advanced.spec.ts:8453:39-8453:46: `.wait()`
$DIR/test/advanced.spec.ts:8471:7-8471:78: `await set1155ApprovalForAll(seller, marketplaceContract.address, true);`
$DIR/test/advanced.spec.ts:8489:48-8489:74: `.getCounter(buyer.address)`
$DIR/test/advanced.spec.ts:8498:19-8498:38: `.sub(unspentAmount)`
$DIR/test/advanced.spec.ts:8499:19-8499:38: `.sub(unspentAmount)`
$DIR/test/advanced.spec.ts:8506:23-8506:39: `.padEnd(66, "0")`
$DIR/test/advanced.spec.ts:8540:9-8540:24: `.connect(owner)`
$DIR/test/advanced.spec.ts:8541:9-8549:10: `.matchAdvancedOrders(
          [order, mirrorOrder],
          [],
          fulfillments,
          seller.address,
          {
            value,
          }
        )`
$DIR/test/advanced.spec.ts:8550:39-8550:46: `.wait()`
$DIR/test/basic.spec.ts:160:13-160:28: `.connect(buyer)`
$DIR/test/basic.spec.ts:161:13-163:15: `.fulfillOrder(order, toKey(0), {
              value,
            })`
$DIR/test/basic.spec.ts:164:43-164:50: `.wait()`
$DIR/test/basic.spec.ts:201:13-201:28: `.connect(buyer)`
$DIR/test/basic.spec.ts:202:13-204:15: `.fulfillOrder(order, toKey(0), {
              value,
            })`
$DIR/test/basic.spec.ts:205:43-205:50: `.wait()`
$DIR/test/basic.spec.ts:240:9-242:11: `order.parameters.consideration.push(
          getItemETH(parseEther("1"), parseEther("1"), owner.address)
        );`
$DIR/test/basic.spec.ts:240:14-242:10: `.parameters.consideration.push(
          getItemETH(parseEther("1"), parseEther("1"), owner.address)
        )`
$DIR/test/basic.spec.ts:246:13-246:28: `.connect(buyer)`
$DIR/test/basic.spec.ts:247:13-249:15: `.fulfillOrder(order, toKey(0), {
              value: value.add(parseEther("1")),
            })`
$DIR/test/basic.spec.ts:248:27-248:48: `.add(parseEther("1"))`
$DIR/test/basic.spec.ts:250:43-250:50: `.wait()`
$DIR/test/basic.spec.ts:286:13-286:28: `.connect(buyer)`
$DIR/test/basic.spec.ts:287:13-289:15: `.fulfillOrder(order, toKey(0), {
              value,
            })`
$DIR/test/basic.spec.ts:290:43-290:50: `.wait()`
$DIR/test/basic.spec.ts:325:9-325:36: `order.extraData = "0x1234";`
$DIR/test/basic.spec.ts:329:13-329:28: `.connect(buyer)`
$DIR/test/basic.spec.ts:330:13-338:14: `.fulfillAdvancedOrder(
              order,
              [],
              toKey(0),
              ethers.constants.AddressZero,
              {
                value,
              }
            )`
$DIR/test/basic.spec.ts:339:43-339:50: `.wait()`
$DIR/test/basic.spec.ts:372:9-372:36: `order.extraData = "0x1234";`
$DIR/test/basic.spec.ts:376:13-376:28: `.connect(buyer)`
$DIR/test/basic.spec.ts:377:13-379:15: `.fulfillAdvancedOrder(order, [], toKey(0), owner.address, {
              value,
            })`
$DIR/test/basic.spec.ts:380:43-380:50: `.wait()`
$DIR/test/basic.spec.ts:421:13-421:28: `.connect(buyer)`
$DIR/test/basic.spec.ts:422:13-424:15: `.fulfillBasicOrder(basicOrderParameters, {
              value,
            })`
$DIR/test/basic.spec.ts:425:43-425:50: `.wait()`
$DIR/test/basic.spec.ts:469:13-469:28: `.connect(buyer)`
$DIR/test/basic.spec.ts:470:13-472:15: `.fulfillBasicOrder(basicOrderParameters, {
              value,
            })`
$DIR/test/basic.spec.ts:473:43-473:50: `.wait()`
$DIR/test/basic.spec.ts:517:13-517:28: `.connect(buyer)`
$DIR/test/basic.spec.ts:518:13-520:15: `.fulfillBasicOrder_efficient_6GL6yc(basicOrderParameters, {
              value,
            })`
$DIR/test/basic.spec.ts:521:43-521:50: `.wait()`
$DIR/test/basic.spec.ts:559:45-559:60: `.connect(owner)`
$DIR/test/basic.spec.ts:559:60-559:78: `.validate([order])`
$DIR/test/basic.spec.ts:561:33-561:40: `.wait()`
$DIR/test/basic.spec.ts:635:13-635:28: `.connect(buyer)`
$DIR/test/basic.spec.ts:636:13-638:15: `.fulfillBasicOrder(basicOrderParameters, {
              value,
            })`
$DIR/test/basic.spec.ts:639:43-639:50: `.wait()`
$DIR/test/basic.spec.ts:677:45-677:60: `.connect(owner)`
$DIR/test/basic.spec.ts:677:60-677:78: `.validate([order])`
$DIR/test/basic.spec.ts:679:33-679:40: `.wait()`
$DIR/test/basic.spec.ts:753:13-753:28: `.connect(buyer)`
$DIR/test/basic.spec.ts:754:13-756:15: `.fulfillBasicOrder_efficient_6GL6yc(basicOrderParameters, {
              value,
            })`
$DIR/test/basic.spec.ts:757:43-757:50: `.wait()`
$DIR/test/basic.spec.ts:796:13-796:28: `.connect(buyer)`
$DIR/test/basic.spec.ts:797:13-799:15: `.fulfillOrder(order, toKey(0), {
              value,
            })`
$DIR/test/basic.spec.ts:800:43-800:50: `.wait()`
$DIR/test/basic.spec.ts:841:45-841:60: `.connect(owner)`
$DIR/test/basic.spec.ts:841:60-841:78: `.validate([order])`
$DIR/test/basic.spec.ts:843:33-843:40: `.wait()`
$DIR/test/basic.spec.ts:912:13-912:28: `.connect(buyer)`
$DIR/test/basic.spec.ts:913:13-915:15: `.fulfillOrder(order, toKey(0), {
              value,
            })`
$DIR/test/basic.spec.ts:916:43-916:50: `.wait()`
$DIR/test/basic.spec.ts:956:13-956:28: `.connect(buyer)`
$DIR/test/basic.spec.ts:957:13-965:14: `.fulfillAdvancedOrder(
              order,
              [],
              toKey(0),
              ethers.constants.AddressZero,
              {
                value,
              }
            )`
$DIR/test/basic.spec.ts:966:43-966:50: `.wait()`
$DIR/test/basic.spec.ts:1004:45-1004:60: `.connect(owner)`
$DIR/test/basic.spec.ts:1004:60-1004:78: `.validate([order])`
$DIR/test/basic.spec.ts:1006:33-1006:40: `.wait()`
$DIR/test/basic.spec.ts:1075:13-1075:28: `.connect(buyer)`
$DIR/test/basic.spec.ts:1076:13-1084:14: `.fulfillAdvancedOrder(
              order,
              [],
              toKey(0),
              ethers.constants.AddressZero,
              {
                value,
              }
            )`
$DIR/test/basic.spec.ts:1085:43-1085:50: `.wait()`
$DIR/test/basic.spec.ts:1139:9-1145:11: `order.parameters.consideration.push(
          getItemETH(
            parseEther("2"),
            parseEther("2"),
            "0x0000000000000000000000000000000000000001"
          )
        );`
$DIR/test/basic.spec.ts:1139:14-1145:10: `.parameters.consideration.push(
          getItemETH(
            parseEther("2"),
            parseEther("2"),
            "0x0000000000000000000000000000000000000001"
          )
        )`
$DIR/test/basic.spec.ts:1147:9-1153:11: `order.parameters.consideration.push(
          getItemETH(
            parseEther("3"),
            parseEther("3"),
            "0x0000000000000000000000000000000000000002"
          )
        );`
$DIR/test/basic.spec.ts:1147:14-1153:10: `.parameters.consideration.push(
          getItemETH(
            parseEther("3"),
            parseEther("3"),
            "0x0000000000000000000000000000000000000002"
          )
        )`
$DIR/test/basic.spec.ts:1155:9-1161:11: `order.parameters.consideration.push(
          getItemETH(
            parseEther("4"),
            parseEther("4"),
            "0x0000000000000000000000000000000000000003"
          )
        );`
$DIR/test/basic.spec.ts:1155:14-1161:10: `.parameters.consideration.push(
          getItemETH(
            parseEther("4"),
            parseEther("4"),
            "0x0000000000000000000000000000000000000003"
          )
        )`
$DIR/test/basic.spec.ts:1165:13-1165:28: `.connect(buyer)`
$DIR/test/basic.spec.ts:1166:13-1168:15: `.fulfillBasicOrder(basicOrderParameters, {
              value: value.add(parseEther("9")),
            })`
$DIR/test/basic.spec.ts:1167:27-1167:48: `.add(parseEther("9"))`
$DIR/test/basic.spec.ts:1169:43-1169:50: `.wait()`
$DIR/test/basic.spec.ts:1212:13-1212:28: `.connect(buyer)`
$DIR/test/basic.spec.ts:1213:13-1215:15: `.fulfillBasicOrder(basicOrderParameters, {
              value,
            })`
$DIR/test/basic.spec.ts:1216:43-1216:50: `.wait()`
$DIR/test/basic.spec.ts:1257:13-1257:28: `.connect(buyer)`
$DIR/test/basic.spec.ts:1258:13-1260:15: `.fulfillBasicOrder(basicOrderParameters, {
              value,
            })`
$DIR/test/basic.spec.ts:1261:43-1261:50: `.wait()`
$DIR/test/basic.spec.ts:1276:9-1276:54: `await testERC721.mint(seller.address, nftId);`
$DIR/test/basic.spec.ts:1276:25-1276:53: `.mint(seller.address, nftId)`
$DIR/test/basic.spec.ts:1294:32-1294:55: `.utils.parseEther("10")`
$DIR/test/basic.spec.ts:1295:30-1295:53: `.utils.parseEther("10")`
$DIR/test/basic.spec.ts:1302:32-1302:54: `.utils.parseEther("1")`
$DIR/test/basic.spec.ts:1303:30-1303:52: `.utils.parseEther("1")`
$DIR/test/basic.spec.ts:1310:32-1310:54: `.utils.parseEther("1")`
$DIR/test/basic.spec.ts:1311:30-1311:52: `.utils.parseEther("1")`
$DIR/test/basic.spec.ts:1331:13-1331:28: `.connect(buyer)`
$DIR/test/basic.spec.ts:1332:13-1332:64: `.fulfillBasicOrder(basicOrderParameters, { value })`
$DIR/test/basic.spec.ts:1333:43-1333:50: `.wait()`
$DIR/test/basic.spec.ts:1365:45-1365:60: `.connect(owner)`
$DIR/test/basic.spec.ts:1365:60-1365:78: `.validate([order])`
$DIR/test/basic.spec.ts:1367:33-1367:40: `.wait()`
$DIR/test/basic.spec.ts:1441:13-1441:28: `.connect(buyer)`
$DIR/test/basic.spec.ts:1442:13-1444:15: `.fulfillBasicOrder(basicOrderParameters, {
              value,
            })`
$DIR/test/basic.spec.ts:1445:43-1445:50: `.wait()`
$DIR/test/basic.spec.ts:1481:9-1481:70: `order.signature = convertSignatureToEIP2098(order.signature);`
$DIR/test/basic.spec.ts:1491:13-1491:28: `.connect(buyer)`
$DIR/test/basic.spec.ts:1492:13-1494:15: `.fulfillBasicOrder(basicOrderParameters, {
              value,
            })`
$DIR/test/basic.spec.ts:1495:43-1495:50: `.wait()`
$DIR/test/basic.spec.ts:1536:13-1536:28: `.connect(buyer)`
$DIR/test/basic.spec.ts:1537:13-1539:15: `.fulfillBasicOrder(basicOrderParameters, {
              value: value.add(1),
            })`
$DIR/test/basic.spec.ts:1538:27-1538:34: `.add(1)`
$DIR/test/basic.spec.ts:1540:43-1540:50: `.wait()`
$DIR/test/basic.spec.ts:1592:11-1592:26: `.connect(owner)`
$DIR/test/basic.spec.ts:1593:11-1595:13: `.matchOrders([order, mirrorOrder], fulfillments, {
            value,
          })`
$DIR/test/basic.spec.ts:1596:41-1596:48: `.wait()`
$DIR/test/basic.spec.ts:1659:11-1659:26: `.connect(owner)`
$DIR/test/basic.spec.ts:1660:11-1662:13: `.matchOrders([order, mirrorOrder], fulfillments, {
            value,
          })`
$DIR/test/basic.spec.ts:1663:41-1663:48: `.wait()`
$DIR/test/basic.spec.ts:1724:11-1724:26: `.connect(owner)`
$DIR/test/basic.spec.ts:1725:11-1727:13: `.matchOrders([order, mirrorOrder], fulfillments, {
            value: value.add(101),
          })`
$DIR/test/basic.spec.ts:1726:25-1726:34: `.add(101)`
$DIR/test/basic.spec.ts:1728:41-1728:48: `.wait()`
$DIR/test/basic.spec.ts:1756:9-1760:11: `await mintAndApproveERC20(
          buyer,
          marketplaceContract.address,
          tokenAmount
        );`
$DIR/test/basic.spec.ts:1766:24-1766:33: `.sub(100)`
$DIR/test/basic.spec.ts:1767:24-1767:33: `.sub(100)`
$DIR/test/basic.spec.ts:1784:13-1784:28: `.connect(buyer)`
$DIR/test/basic.spec.ts:1785:13-1785:43: `.fulfillOrder(order, toKey(0))`
$DIR/test/basic.spec.ts:1786:43-1786:50: `.wait()`
$DIR/test/basic.spec.ts:1803:9-1807:11: `await mintAndApproveERC20(
          buyer,
          marketplaceContract.address,
          tokenAmount
        );`
$DIR/test/basic.spec.ts:1813:24-1813:33: `.sub(100)`
$DIR/test/basic.spec.ts:1814:24-1814:33: `.sub(100)`
$DIR/test/basic.spec.ts:1836:13-1836:28: `.connect(buyer)`
$DIR/test/basic.spec.ts:1837:13-1837:43: `.fulfillOrder(order, toKey(0))`
$DIR/test/basic.spec.ts:1838:43-1838:50: `.wait()`
$DIR/test/basic.spec.ts:1859:9-1863:11: `await mintAndApproveERC20(
          buyer,
          marketplaceContract.address,
          tokenAmount
        );`
$DIR/test/basic.spec.ts:1869:24-1869:33: `.sub(100)`
$DIR/test/basic.spec.ts:1870:24-1870:33: `.sub(100)`
$DIR/test/basic.spec.ts:1892:13-1892:28: `.connect(buyer)`
$DIR/test/basic.spec.ts:1893:13-1893:53: `.fulfillBasicOrder(basicOrderParameters)`
$DIR/test/basic.spec.ts:1894:43-1894:50: `.wait()`
$DIR/test/basic.spec.ts:1911:9-1915:11: `await mintAndApproveERC20(
          buyer,
          marketplaceContract.address,
          tokenAmount
        );`
$DIR/test/basic.spec.ts:1921:24-1921:33: `.sub(100)`
$DIR/test/basic.spec.ts:1922:24-1922:33: `.sub(100)`
$DIR/test/basic.spec.ts:1949:13-1949:28: `.connect(buyer)`
$DIR/test/basic.spec.ts:1950:13-1950:53: `.fulfillBasicOrder(basicOrderParameters)`
$DIR/test/basic.spec.ts:1951:43-1951:50: `.wait()`
$DIR/test/basic.spec.ts:1978:9-1982:11: `await mintAndApproveERC20(
          buyer,
          marketplaceContract.address,
          tokenAmount
        );`
$DIR/test/basic.spec.ts:1988:24-1988:33: `.sub(100)`
$DIR/test/basic.spec.ts:1989:24-1989:33: `.sub(100)`
$DIR/test/basic.spec.ts:2014:13-2014:28: `.connect(buyer)`
$DIR/test/basic.spec.ts:2015:13-2015:53: `.fulfillBasicOrder(basicOrderParameters)`
$DIR/test/basic.spec.ts:2016:43-2016:50: `.wait()`
$DIR/test/basic.spec.ts:2049:9-2053:11: `await mintAndApproveERC20(
          buyer,
          marketplaceContract.address,
          tokenAmount
        );`
$DIR/test/basic.spec.ts:2059:24-2059:33: `.sub(100)`
$DIR/test/basic.spec.ts:2060:24-2060:33: `.sub(100)`
$DIR/test/basic.spec.ts:2078:31-2078:48: `.padEnd(130, "f")`
$DIR/test/basic.spec.ts:2090:13-2090:28: `.connect(buyer)`
$DIR/test/basic.spec.ts:2091:13-2091:53: `.fulfillBasicOrder(basicOrderParameters)`
$DIR/test/basic.spec.ts:2092:43-2092:50: `.wait()`
$DIR/test/basic.spec.ts:2125:9-2129:11: `await mintAndApproveERC20(
          buyer,
          marketplaceContract.address,
          tokenAmount
        );`
$DIR/test/basic.spec.ts:2135:24-2135:33: `.sub(100)`
$DIR/test/basic.spec.ts:2136:24-2136:33: `.sub(100)`
$DIR/test/basic.spec.ts:2155:62-2155:76: `.information()`
$DIR/test/basic.spec.ts:2157:35-2157:44: `.slice(2)`
$DIR/test/basic.spec.ts:2157:56-2157:65: `.slice(2)`
$DIR/test/basic.spec.ts:2160:9-2160:59: `await sellerContract.registerDigest(digest, true);`
$DIR/test/basic.spec.ts:2160:29-2160:58: `.registerDigest(digest, true)`
$DIR/test/basic.spec.ts:2162:31-2162:48: `.padEnd(132, "f")`
$DIR/test/basic.spec.ts:2172:9-2186:12: `await withBalanceChecks([order], 0, undefined, async () => {
          const tx = marketplaceContract
            .connect(buyer)
            .fulfillBasicOrder(basicOrderParameters);
          const receipt = await (await tx).wait();
          await checkExpectedEvents(tx, receipt, [
            {
              order,
              orderHash,
              fulfiller: buyer.address,
            },
          ]);

          return receipt;
        });`
$DIR/test/basic.spec.ts:2174:13-2174:28: `.connect(buyer)`
$DIR/test/basic.spec.ts:2175:13-2175:53: `.fulfillBasicOrder(basicOrderParameters)`
$DIR/test/basic.spec.ts:2176:43-2176:50: `.wait()`
$DIR/test/basic.spec.ts:2205:9-2209:11: `await mintAndApproveERC20(
          buyer,
          marketplaceContract.address,
          tokenAmount
        );`
$DIR/test/basic.spec.ts:2215:24-2215:33: `.sub(100)`
$DIR/test/basic.spec.ts:2216:24-2216:33: `.sub(100)`
$DIR/test/basic.spec.ts:2262:62-2262:76: `.information()`
$DIR/test/basic.spec.ts:2264:35-2264:44: `.slice(2)`
$DIR/test/basic.spec.ts:2264:56-2264:65: `.slice(2)`
$DIR/test/basic.spec.ts:2268:9-2268:75: `await sellerContract.connect(seller).registerDigest(digest, true);`
$DIR/test/basic.spec.ts:2268:29-2268:45: `.connect(seller)`
$DIR/test/basic.spec.ts:2268:45-2268:74: `.registerDigest(digest, true)`
$DIR/test/basic.spec.ts:2273:13-2273:28: `.connect(buyer)`
$DIR/test/basic.spec.ts:2274:13-2274:53: `.fulfillBasicOrder(basicOrderParameters)`
$DIR/test/basic.spec.ts:2275:43-2275:50: `.wait()`
$DIR/test/basic.spec.ts:2295:9-2299:11: `await mintAndApproveERC20(
          buyer,
          marketplaceContract.address,
          tokenAmount
        );`
$DIR/test/basic.spec.ts:2305:24-2305:33: `.sub(100)`
$DIR/test/basic.spec.ts:2306:24-2306:33: `.sub(100)`
$DIR/test/basic.spec.ts:2340:11-2340:26: `.connect(owner)`
$DIR/test/basic.spec.ts:2341:11-2341:59: `.matchOrders([order, mirrorOrder], fulfillments)`
$DIR/test/basic.spec.ts:2342:41-2342:48: `.wait()`
$DIR/test/basic.spec.ts:2367:9-2371:11: `await mintAndApproveERC20(
          buyer,
          marketplaceContract.address,
          tokenAmount
        );`
$DIR/test/basic.spec.ts:2377:24-2377:33: `.sub(100)`
$DIR/test/basic.spec.ts:2378:24-2378:33: `.sub(100)`
$DIR/test/basic.spec.ts:2417:11-2417:26: `.connect(owner)`
$DIR/test/basic.spec.ts:2418:11-2418:59: `.matchOrders([order, mirrorOrder], fulfillments)`
$DIR/test/basic.spec.ts:2419:41-2419:48: `.wait()`
$DIR/test/basic.spec.ts:2447:9-2447:78: `await set721ApprovalForAll(buyer, marketplaceContract.address, true);`
$DIR/test/basic.spec.ts:2451:9-2455:11: `await mintAndApproveERC20(
          seller,
          marketplaceContract.address,
          tokenAmount
        );`
$DIR/test/basic.spec.ts:2467:36-2467:45: `.sub(100)`
$DIR/test/basic.spec.ts:2467:58-2467:67: `.sub(100)`
$DIR/test/basic.spec.ts:2486:13-2486:28: `.connect(buyer)`
$DIR/test/basic.spec.ts:2487:13-2487:43: `.fulfillOrder(order, toKey(0))`
$DIR/test/basic.spec.ts:2488:43-2488:50: `.wait()`
$DIR/test/basic.spec.ts:2506:9-2506:78: `await set721ApprovalForAll(buyer, marketplaceContract.address, true);`
$DIR/test/basic.spec.ts:2510:9-2514:11: `await mintAndApproveERC20(
          seller,
          marketplaceContract.address,
          tokenAmount
        );`
$DIR/test/basic.spec.ts:2526:36-2526:45: `.sub(100)`
$DIR/test/basic.spec.ts:2526:58-2526:67: `.sub(100)`
$DIR/test/basic.spec.ts:2543:9-2543:36: `order.extraData = "0x1234";`
$DIR/test/basic.spec.ts:2547:13-2547:28: `.connect(buyer)`
$DIR/test/basic.spec.ts:2548:13-2553:14: `.fulfillAdvancedOrder(
              order,
              [],
              toKey(0),
              ethers.constants.AddressZero
            )`
$DIR/test/basic.spec.ts:2554:43-2554:50: `.wait()`
$DIR/test/basic.spec.ts:2572:9-2572:78: `await set721ApprovalForAll(buyer, marketplaceContract.address, true);`
$DIR/test/basic.spec.ts:2576:9-2576:76: `await mintAndApproveERC20(seller, conduitOne.address, tokenAmount);`
$DIR/test/basic.spec.ts:2588:36-2588:45: `.sub(100)`
$DIR/test/basic.spec.ts:2588:58-2588:67: `.sub(100)`
$DIR/test/basic.spec.ts:2612:13-2612:28: `.connect(buyer)`
$DIR/test/basic.spec.ts:2613:13-2613:43: `.fulfillOrder(order, toKey(0))`
$DIR/test/basic.spec.ts:2614:43-2614:50: `.wait()`
$DIR/test/basic.spec.ts:2632:9-2632:69: `await set721ApprovalForAll(buyer, conduitOne.address, true);`
$DIR/test/basic.spec.ts:2636:9-2640:11: `await mintAndApproveERC20(
          seller,
          marketplaceContract.address,
          tokenAmount
        );`
$DIR/test/basic.spec.ts:2650:36-2650:45: `.sub(100)`
$DIR/test/basic.spec.ts:2650:58-2650:67: `.sub(100)`
$DIR/test/basic.spec.ts:2669:13-2669:28: `.connect(buyer)`
$DIR/test/basic.spec.ts:2670:13-2670:48: `.fulfillOrder(order, conduitKeyOne)`
$DIR/test/basic.spec.ts:2671:43-2671:50: `.wait()`
$DIR/test/basic.spec.ts:2689:9-2689:78: `await set721ApprovalForAll(buyer, marketplaceContract.address, true);`
$DIR/test/basic.spec.ts:2693:9-2697:11: `await mintAndApproveERC20(
          seller,
          marketplaceContract.address,
          tokenAmount
        );`
$DIR/test/basic.spec.ts:2724:13-2724:28: `.connect(buyer)`
$DIR/test/basic.spec.ts:2725:13-2725:53: `.fulfillBasicOrder(basicOrderParameters)`
$DIR/test/basic.spec.ts:2726:43-2726:50: `.wait()`
$DIR/test/basic.spec.ts:2748:9-2748:78: `await set721ApprovalForAll(buyer, marketplaceContract.address, true);`
$DIR/test/basic.spec.ts:2752:9-2756:11: `await mintAndApproveERC20(
          seller,
          marketplaceContract.address,
          tokenAmount
        );`
$DIR/test/basic.spec.ts:2779:13-2779:28: `.connect(buyer)`
$DIR/test/basic.spec.ts:2780:13-2780:53: `.fulfillBasicOrder(basicOrderParameters)`
$DIR/test/basic.spec.ts:2781:43-2781:50: `.wait()`
$DIR/test/basic.spec.ts:2803:9-2803:78: `await set721ApprovalForAll(buyer, marketplaceContract.address, true);`
$DIR/test/basic.spec.ts:2807:9-2811:11: `await mintAndApproveERC20(
          seller,
          marketplaceContract.address,
          tokenAmount
        );`
$DIR/test/basic.spec.ts:2827:9-2829:11: `order.parameters.consideration.push(
          getTestItem20(50, 50, zone.address)
        );`
$DIR/test/basic.spec.ts:2827:14-2829:10: `.parameters.consideration.push(
          getTestItem20(50, 50, zone.address)
        )`
$DIR/test/basic.spec.ts:2836:9-2836:74: `basicOrderParameters.totalOriginalAdditionalRecipients = toBN(0);`
$DIR/test/basic.spec.ts:2840:13-2840:28: `.connect(buyer)`
$DIR/test/basic.spec.ts:2841:13-2841:53: `.fulfillBasicOrder(basicOrderParameters)`
$DIR/test/basic.spec.ts:2842:43-2842:50: `.wait()`
$DIR/test/basic.spec.ts:2864:9-2864:78: `await set721ApprovalForAll(buyer, marketplaceContract.address, true);`
$DIR/test/basic.spec.ts:2868:9-2872:11: `await mintAndApproveERC20(
          seller,
          marketplaceContract.address,
          tokenAmount
        );`
$DIR/test/basic.spec.ts:2899:13-2899:28: `.connect(buyer)`
$DIR/test/basic.spec.ts:2900:13-2900:53: `.fulfillBasicOrder(basicOrderParameters)`
$DIR/test/basic.spec.ts:2901:43-2901:50: `.wait()`
$DIR/test/basic.spec.ts:2923:9-2923:78: `await set721ApprovalForAll(buyer, marketplaceContract.address, true);`
$DIR/test/basic.spec.ts:2927:9-2927:76: `await mintAndApproveERC20(seller, conduitOne.address, tokenAmount);`
$DIR/test/basic.spec.ts:2939:11-2939:73: `consideration.push(getTestItem20(i, i, toAddress(i + 10000)));`
$DIR/test/basic.spec.ts:2939:24-2939:72: `.push(getTestItem20(i, i, toAddress(i + 10000)))`
$DIR/test/basic.spec.ts:2962:13-2962:28: `.connect(buyer)`
$DIR/test/basic.spec.ts:2963:13-2963:53: `.fulfillBasicOrder(basicOrderParameters)`
$DIR/test/basic.spec.ts:2964:43-2964:50: `.wait()`
$DIR/test/basic.spec.ts:2986:9-2986:69: `await set721ApprovalForAll(buyer, conduitOne.address, true);`
$DIR/test/basic.spec.ts:2990:9-2994:11: `await mintAndApproveERC20(
          seller,
          marketplaceContract.address,
          tokenAmount
        );`
$DIR/test/basic.spec.ts:3022:13-3022:28: `.connect(buyer)`
$DIR/test/basic.spec.ts:3023:13-3023:53: `.fulfillBasicOrder(basicOrderParameters)`
$DIR/test/basic.spec.ts:3024:43-3024:50: `.wait()`
$DIR/test/basic.spec.ts:3047:9-3047:78: `await set721ApprovalForAll(buyer, marketplaceContract.address, true);`
$DIR/test/basic.spec.ts:3051:9-3055:11: `await mintAndApproveERC20(
          seller,
          marketplaceContract.address,
          tokenAmount
        );`
$DIR/test/basic.spec.ts:3060:36-3060:45: `.sub(100)`
$DIR/test/basic.spec.ts:3060:58-3060:67: `.sub(100)`
$DIR/test/basic.spec.ts:3093:11-3093:26: `.connect(owner)`
$DIR/test/basic.spec.ts:3094:11-3094:59: `.matchOrders([order, mirrorOrder], fulfillments)`
$DIR/test/basic.spec.ts:3095:41-3095:48: `.wait()`
$DIR/test/basic.spec.ts:3120:9-3120:78: `await set721ApprovalForAll(buyer, marketplaceContract.address, true);`
$DIR/test/basic.spec.ts:3124:9-3128:11: `await mintAndApproveERC20(
          seller,
          marketplaceContract.address,
          tokenAmount
        );`
$DIR/test/basic.spec.ts:3133:36-3133:45: `.sub(100)`
$DIR/test/basic.spec.ts:3133:58-3133:67: `.sub(100)`
$DIR/test/basic.spec.ts:3150:9-3150:36: `order.extraData = "0x1234";`
$DIR/test/basic.spec.ts:3169:11-3169:26: `.connect(owner)`
$DIR/test/basic.spec.ts:3170:11-3175:12: `.matchAdvancedOrders(
            [order, mirrorOrder],
            [],
            fulfillments,
            ethers.constants.AddressZero
          )`
$DIR/test/basic.spec.ts:3176:41-3176:48: `.wait()`
$DIR/test/basic.spec.ts:3201:9-3201:69: `await set721ApprovalForAll(buyer, conduitOne.address, true);`
$DIR/test/basic.spec.ts:3205:9-3209:11: `await mintAndApproveERC20(
          seller,
          marketplaceContract.address,
          tokenAmount
        );`
$DIR/test/basic.spec.ts:3214:36-3214:45: `.sub(100)`
$DIR/test/basic.spec.ts:3214:58-3214:67: `.sub(100)`
$DIR/test/basic.spec.ts:3253:11-3253:26: `.connect(owner)`
$DIR/test/basic.spec.ts:3254:11-3254:59: `.matchOrders([order, mirrorOrder], fulfillments)`
$DIR/test/basic.spec.ts:3255:41-3255:48: `.wait()`
$DIR/test/basic.spec.ts:3305:13-3305:28: `.connect(buyer)`
$DIR/test/basic.spec.ts:3306:13-3308:15: `.fulfillOrder(order, toKey(0), {
              value,
            })`
$DIR/test/basic.spec.ts:3309:43-3309:50: `.wait()`
$DIR/test/basic.spec.ts:3352:13-3352:28: `.connect(buyer)`
$DIR/test/basic.spec.ts:3353:13-3355:15: `.fulfillOrder(order, toKey(0), {
              value,
            })`
$DIR/test/basic.spec.ts:3356:43-3356:50: `.wait()`
$DIR/test/basic.spec.ts:3399:13-3399:28: `.connect(buyer)`
$DIR/test/basic.spec.ts:3400:13-3402:15: `.fulfillBasicOrder(basicOrderParameters, {
              value,
            })`
$DIR/test/basic.spec.ts:3403:43-3403:50: `.wait()`
$DIR/test/basic.spec.ts:3450:13-3450:28: `.connect(buyer)`
$DIR/test/basic.spec.ts:3451:13-3453:15: `.fulfillBasicOrder(basicOrderParameters, {
              value,
            })`
$DIR/test/basic.spec.ts:3454:43-3454:50: `.wait()`
$DIR/test/basic.spec.ts:3508:11-3508:26: `.connect(owner)`
$DIR/test/basic.spec.ts:3509:11-3511:13: `.matchOrders([order, mirrorOrder], fulfillments, {
            value,
          })`
$DIR/test/basic.spec.ts:3512:41-3512:48: `.wait()`
$DIR/test/basic.spec.ts:3579:11-3579:26: `.connect(owner)`
$DIR/test/basic.spec.ts:3580:11-3582:13: `.matchOrders([order, mirrorOrder], fulfillments, {
            value,
          })`
$DIR/test/basic.spec.ts:3583:41-3583:48: `.wait()`
$DIR/test/basic.spec.ts:3612:9-3616:11: `await mintAndApproveERC20(
          buyer,
          marketplaceContract.address,
          tokenAmount
        );`
$DIR/test/basic.spec.ts:3622:24-3622:33: `.sub(100)`
$DIR/test/basic.spec.ts:3623:24-3623:33: `.sub(100)`
$DIR/test/basic.spec.ts:3640:13-3640:28: `.connect(buyer)`
$DIR/test/basic.spec.ts:3641:13-3641:43: `.fulfillOrder(order, toKey(0))`
$DIR/test/basic.spec.ts:3642:43-3642:50: `.wait()`
$DIR/test/basic.spec.ts:3664:9-3668:11: `await mintAndApproveERC20(
          buyer,
          marketplaceContract.address,
          tokenAmount
        );`
$DIR/test/basic.spec.ts:3674:24-3674:33: `.sub(100)`
$DIR/test/basic.spec.ts:3675:24-3675:33: `.sub(100)`
$DIR/test/basic.spec.ts:3697:13-3697:28: `.connect(buyer)`
$DIR/test/basic.spec.ts:3698:13-3698:43: `.fulfillOrder(order, toKey(0))`
$DIR/test/basic.spec.ts:3699:43-3699:50: `.wait()`
$DIR/test/basic.spec.ts:3721:9-3725:11: `await mintAndApproveERC20(
          buyer,
          marketplaceContract.address,
          tokenAmount
        );`
$DIR/test/basic.spec.ts:3731:24-3731:33: `.sub(100)`
$DIR/test/basic.spec.ts:3732:24-3732:33: `.sub(100)`
$DIR/test/basic.spec.ts:3754:13-3754:28: `.connect(buyer)`
$DIR/test/basic.spec.ts:3755:13-3755:53: `.fulfillBasicOrder(basicOrderParameters)`
$DIR/test/basic.spec.ts:3756:43-3756:50: `.wait()`
$DIR/test/basic.spec.ts:3782:9-3786:11: `await mintAndApproveERC20(
          buyer,
          marketplaceContract.address,
          tokenAmount
        );`
$DIR/test/basic.spec.ts:3792:24-3792:33: `.sub(100)`
$DIR/test/basic.spec.ts:3793:24-3793:33: `.sub(100)`
$DIR/test/basic.spec.ts:3817:13-3817:28: `.connect(buyer)`
$DIR/test/basic.spec.ts:3818:13-3818:53: `.fulfillBasicOrder(basicOrderParameters)`
$DIR/test/basic.spec.ts:3819:43-3819:50: `.wait()`
$DIR/test/basic.spec.ts:3840:9-3844:11: `await mintAndApproveERC20(
          buyer,
          marketplaceContract.address,
          tokenAmount
        );`
$DIR/test/basic.spec.ts:3850:24-3850:33: `.sub(100)`
$DIR/test/basic.spec.ts:3851:24-3851:33: `.sub(100)`
$DIR/test/basic.spec.ts:3885:11-3885:26: `.connect(owner)`
$DIR/test/basic.spec.ts:3886:11-3886:59: `.matchOrders([order, mirrorOrder], fulfillments)`
$DIR/test/basic.spec.ts:3887:41-3887:48: `.wait()`
$DIR/test/basic.spec.ts:3916:9-3920:11: `await mintAndApproveERC20(
          buyer,
          marketplaceContract.address,
          tokenAmount
        );`
$DIR/test/basic.spec.ts:3926:24-3926:33: `.sub(100)`
$DIR/test/basic.spec.ts:3927:24-3927:33: `.sub(100)`
$DIR/test/basic.spec.ts:3966:11-3966:26: `.connect(owner)`
$DIR/test/basic.spec.ts:3967:11-3967:59: `.matchOrders([order, mirrorOrder], fulfillments)`
$DIR/test/basic.spec.ts:3968:41-3968:48: `.wait()`
$DIR/test/basic.spec.ts:4000:9-4004:11: `await mintAndApproveERC20(
          seller,
          marketplaceContract.address,
          tokenAmount
        );`
$DIR/test/basic.spec.ts:4016:36-4016:45: `.sub(100)`
$DIR/test/basic.spec.ts:4016:58-4016:67: `.sub(100)`
$DIR/test/basic.spec.ts:4035:13-4035:28: `.connect(buyer)`
$DIR/test/basic.spec.ts:4036:13-4036:43: `.fulfillOrder(order, toKey(0))`
$DIR/test/basic.spec.ts:4037:43-4037:50: `.wait()`
$DIR/test/basic.spec.ts:4059:9-4063:11: `await mintAndApproveERC20(
          seller,
          marketplaceContract.address,
          tokenAmount
        );`
$DIR/test/basic.spec.ts:4073:36-4073:45: `.sub(100)`
$DIR/test/basic.spec.ts:4073:58-4073:67: `.sub(100)`
$DIR/test/basic.spec.ts:4092:13-4092:28: `.connect(buyer)`
$DIR/test/basic.spec.ts:4093:13-4093:48: `.fulfillOrder(order, conduitKeyOne)`
$DIR/test/basic.spec.ts:4094:43-4094:50: `.wait()`
$DIR/test/basic.spec.ts:4116:9-4120:11: `await mintAndApproveERC20(
          seller,
          marketplaceContract.address,
          tokenAmount
        );`
$DIR/test/basic.spec.ts:4147:13-4147:28: `.connect(buyer)`
$DIR/test/basic.spec.ts:4148:13-4148:53: `.fulfillBasicOrder(basicOrderParameters)`
$DIR/test/basic.spec.ts:4149:43-4149:50: `.wait()`
$DIR/test/basic.spec.ts:4175:9-4179:11: `await mintAndApproveERC20(
          seller,
          marketplaceContract.address,
          tokenAmount
        );`
$DIR/test/basic.spec.ts:4207:13-4207:28: `.connect(buyer)`
$DIR/test/basic.spec.ts:4208:13-4208:53: `.fulfillBasicOrder(basicOrderParameters)`
$DIR/test/basic.spec.ts:4215:43-4215:50: `.wait()`
$DIR/test/basic.spec.ts:4242:9-4246:11: `await mintAndApproveERC20(
          seller,
          marketplaceContract.address,
          tokenAmount
        );`
$DIR/test/basic.spec.ts:4251:36-4251:45: `.sub(100)`
$DIR/test/basic.spec.ts:4251:58-4251:67: `.sub(100)`
$DIR/test/basic.spec.ts:4284:11-4284:26: `.connect(owner)`
$DIR/test/basic.spec.ts:4285:11-4285:59: `.matchOrders([order, mirrorOrder], fulfillments)`
$DIR/test/basic.spec.ts:4286:41-4286:48: `.wait()`
$DIR/test/basic.spec.ts:4315:9-4319:11: `await mintAndApproveERC20(
          seller,
          marketplaceContract.address,
          tokenAmount
        );`
$DIR/test/basic.spec.ts:4324:36-4324:45: `.sub(100)`
$DIR/test/basic.spec.ts:4324:58-4324:67: `.sub(100)`
$DIR/test/basic.spec.ts:4363:11-4363:26: `.connect(owner)`
$DIR/test/basic.spec.ts:4364:11-4364:59: `.matchOrders([order, mirrorOrder], fulfillments)`
$DIR/test/basic.spec.ts:4365:41-4365:48: `.wait()`
$DIR/test/conduit.spec.ts:129:5-131:65: `await conduitController
      .connect(owner)
      .updateChannel(tempConduit.address, seller.address, true);`
$DIR/test/conduit.spec.ts:130:7-130:22: `.connect(owner)`
$DIR/test/conduit.spec.ts:131:7-131:64: `.updateChannel(tempConduit.address, seller.address, true)`
$DIR/test/conduit.spec.ts:140:5-140:66: `await testERC1155.mint(seller.address, nftId, amount.mul(2));`
$DIR/test/conduit.spec.ts:140:22-140:65: `.mint(seller.address, nftId, amount.mul(2))`
$DIR/test/conduit.spec.ts:140:57-140:64: `.mul(2)`
$DIR/test/conduit.spec.ts:141:5-141:78: `await testERC1155.mint(seller.address, secondNftId, secondAmount.mul(2));`
$DIR/test/conduit.spec.ts:141:22-141:77: `.mint(seller.address, secondNftId, secondAmount.mul(2))`
$DIR/test/conduit.spec.ts:141:69-141:76: `.mul(2)`
$DIR/test/conduit.spec.ts:142:5-142:68: `await set1155ApprovalForAll(seller, tempConduit.address, true);`
$DIR/test/conduit.spec.ts:144:22-144:38: `.connect(seller)`
$DIR/test/conduit.spec.ts:166:5-168:65: `await conduitController
      .connect(owner)
      .updateChannel(tempConduit.address, seller.address, true);`
$DIR/test/conduit.spec.ts:167:7-167:22: `.connect(owner)`
$DIR/test/conduit.spec.ts:168:7-168:64: `.updateChannel(tempConduit.address, seller.address, true)`
$DIR/test/conduit.spec.ts:177:5-177:66: `await testERC1155.mint(seller.address, nftId, amount.mul(2));`
$DIR/test/conduit.spec.ts:177:22-177:65: `.mint(seller.address, nftId, amount.mul(2))`
$DIR/test/conduit.spec.ts:177:57-177:64: `.mul(2)`
$DIR/test/conduit.spec.ts:178:5-178:78: `await testERC1155.mint(seller.address, secondNftId, secondAmount.mul(2));`
$DIR/test/conduit.spec.ts:178:22-178:77: `.mint(seller.address, secondNftId, secondAmount.mul(2))`
$DIR/test/conduit.spec.ts:178:69-178:76: `.mul(2)`
$DIR/test/conduit.spec.ts:179:5-179:68: `await set1155ApprovalForAll(seller, tempConduit.address, true);`
$DIR/test/conduit.spec.ts:181:22-181:38: `.connect(seller)`
$DIR/test/conduit.spec.ts:201:5-203:65: `await conduitController
      .connect(owner)
      .updateChannel(tempConduit.address, seller.address, true);`
$DIR/test/conduit.spec.ts:202:7-202:22: `.connect(owner)`
$DIR/test/conduit.spec.ts:203:7-203:64: `.updateChannel(tempConduit.address, seller.address, true)`
$DIR/test/conduit.spec.ts:207:5-207:50: `await testERC721.mint(seller.address, nftId);`
$DIR/test/conduit.spec.ts:207:21-207:49: `.mint(seller.address, nftId)`
$DIR/test/conduit.spec.ts:210:5-210:56: `await testERC721.mint(seller.address, secondNftId);`
$DIR/test/conduit.spec.ts:210:21-210:55: `.mint(seller.address, secondNftId)`
$DIR/test/conduit.spec.ts:222:5-239:8: `await tempConduit.connect(seller).execute([
      {
        itemType: 2, // ERC721
        token: testERC721.address,
        from: seller.address,
        to: buyer.address,
        identifier: nftId,
        amount: ethers.BigNumber.from(1),
      },
      {
        itemType: 2, // ERC721
        token: testERC721.address,
        from: seller.address,
        to: buyer.address,
        identifier: secondNftId,
        amount: ethers.BigNumber.from(1),
      },
    ]);`
$DIR/test/conduit.spec.ts:222:22-222:38: `.connect(seller)`
$DIR/test/conduit.spec.ts:222:38-239:7: `.execute([
      {
        itemType: 2, // ERC721
        token: testERC721.address,
        from: seller.address,
        to: buyer.address,
        identifier: nftId,
        amount: ethers.BigNumber.from(1),
      },
      {
        itemType: 2, // ERC721
        token: testERC721.address,
        from: seller.address,
        to: buyer.address,
        identifier: secondNftId,
        amount: ethers.BigNumber.from(1),
      },
    ])`
$DIR/test/conduit.spec.ts:229:23-229:41: `.BigNumber.from(1)`
$DIR/test/conduit.spec.ts:237:23-237:41: `.BigNumber.from(1)`
$DIR/test/conduit.spec.ts:248:5-250:65: `await conduitController
      .connect(owner)
      .updateChannel(tempConduit.address, seller.address, true);`
$DIR/test/conduit.spec.ts:249:7-249:22: `.connect(owner)`
$DIR/test/conduit.spec.ts:250:7-250:64: `.updateChannel(tempConduit.address, seller.address, true)`
$DIR/test/conduit.spec.ts:254:5-254:50: `await testERC721.mint(seller.address, nftId);`
$DIR/test/conduit.spec.ts:254:21-254:49: `.mint(seller.address, nftId)`
$DIR/test/conduit.spec.ts:267:5-267:55: `await testERC20.mint(seller.address, tokenAmount);`
$DIR/test/conduit.spec.ts:267:20-267:54: `.mint(seller.address, tokenAmount)`
$DIR/test/conduit.spec.ts:280:5-297:8: `await tempConduit.connect(seller).execute([
      {
        itemType: 2, // ERC721
        token: testERC721.address,
        from: seller.address,
        to: buyer.address,
        identifier: nftId,
        amount: ethers.BigNumber.from(1),
      },
      {
        itemType: 1, // ERC20
        token: testERC20.address,
        from: seller.address,
        to: buyer.address,
        identifier: 0,
        amount: tokenAmount.sub(100),
      },
    ]);`
$DIR/test/conduit.spec.ts:280:22-280:38: `.connect(seller)`
$DIR/test/conduit.spec.ts:280:38-297:7: `.execute([
      {
        itemType: 2, // ERC721
        token: testERC721.address,
        from: seller.address,
        to: buyer.address,
        identifier: nftId,
        amount: ethers.BigNumber.from(1),
      },
      {
        itemType: 1, // ERC20
        token: testERC20.address,
        from: seller.address,
        to: buyer.address,
        identifier: 0,
        amount: tokenAmount.sub(100),
      },
    ])`
$DIR/test/conduit.spec.ts:287:23-287:41: `.BigNumber.from(1)`
$DIR/test/conduit.spec.ts:295:28-295:37: `.sub(100)`
$DIR/test/conduit.spec.ts:304:18-304:27: `.sub(100)`
$DIR/test/conduit.spec.ts:310:5-312:65: `await conduitController
      .connect(owner)
      .updateChannel(tempConduit.address, seller.address, true);`
$DIR/test/conduit.spec.ts:311:7-311:22: `.connect(owner)`
$DIR/test/conduit.spec.ts:312:7-312:64: `.updateChannel(tempConduit.address, seller.address, true)`
$DIR/test/conduit.spec.ts:316:5-316:50: `await testERC721.mint(seller.address, nftId);`
$DIR/test/conduit.spec.ts:316:21-316:49: `.mint(seller.address, nftId)`
$DIR/test/conduit.spec.ts:329:31-329:38: `.add(1)`
$DIR/test/conduit.spec.ts:330:5-330:65: `await testERC1155.mint(seller.address, secondNftId, amount);`
$DIR/test/conduit.spec.ts:330:22-330:64: `.mint(seller.address, secondNftId, amount)`
$DIR/test/conduit.spec.ts:344:5-361:8: `await tempConduit.connect(seller).execute([
      {
        itemType: 2, // ERC721
        token: testERC721.address,
        from: seller.address,
        to: buyer.address,
        identifier: nftId,
        amount: ethers.BigNumber.from(1),
      },
      {
        itemType: 3, // ERC1155
        token: testERC1155.address,
        from: seller.address,
        to: buyer.address,
        identifier: secondNftId,
        amount: amount.sub(10),
      },
    ]);`
$DIR/test/conduit.spec.ts:344:22-344:38: `.connect(seller)`
$DIR/test/conduit.spec.ts:344:38-361:7: `.execute([
      {
        itemType: 2, // ERC721
        token: testERC721.address,
        from: seller.address,
        to: buyer.address,
        identifier: nftId,
        amount: ethers.BigNumber.from(1),
      },
      {
        itemType: 3, // ERC1155
        token: testERC1155.address,
        from: seller.address,
        to: buyer.address,
        identifier: secondNftId,
        amount: amount.sub(10),
      },
    ])`
$DIR/test/conduit.spec.ts:351:23-351:41: `.BigNumber.from(1)`
$DIR/test/conduit.spec.ts:359:23-359:31: `.sub(10)`
$DIR/test/conduit.spec.ts:370:13-370:21: `.sub(10)`
$DIR/test/conduit.spec.ts:376:5-378:65: `await conduitController
      .connect(owner)
      .updateChannel(tempConduit.address, seller.address, true);`
$DIR/test/conduit.spec.ts:377:7-377:22: `.connect(owner)`
$DIR/test/conduit.spec.ts:378:7-378:64: `.updateChannel(tempConduit.address, seller.address, true)`
$DIR/test/conduit.spec.ts:381:39-381:48: `.div(100)`
$DIR/test/conduit.spec.ts:382:5-382:55: `await testERC20.mint(seller.address, tokenAmount);`
$DIR/test/conduit.spec.ts:382:20-382:54: `.mint(seller.address, tokenAmount)`
$DIR/test/conduit.spec.ts:395:38-395:45: `.add(1)`
$DIR/test/conduit.spec.ts:396:5-396:66: `await testERC1155.mint(seller.address, nftId, erc1155amount);`
$DIR/test/conduit.spec.ts:396:22-396:65: `.mint(seller.address, nftId, erc1155amount)`
$DIR/test/conduit.spec.ts:410:5-427:8: `await tempConduit.connect(seller).execute([
      {
        itemType: 1, // ERC20
        token: testERC20.address,
        from: seller.address,
        to: buyer.address,
        identifier: 0,
        amount: tokenAmount.sub(100),
      },
      {
        itemType: 3, // ERC1155
        token: testERC1155.address,
        from: seller.address,
        to: buyer.address,
        identifier: nftId,
        amount: erc1155amount.sub(10),
      },
    ]);`
$DIR/test/conduit.spec.ts:410:22-410:38: `.connect(seller)`
$DIR/test/conduit.spec.ts:410:38-427:7: `.execute([
      {
        itemType: 1, // ERC20
        token: testERC20.address,
        from: seller.address,
        to: buyer.address,
        identifier: 0,
        amount: tokenAmount.sub(100),
      },
      {
        itemType: 3, // ERC1155
        token: testERC1155.address,
        from: seller.address,
        to: buyer.address,
        identifier: nftId,
        amount: erc1155amount.sub(10),
      },
    ])`
$DIR/test/conduit.spec.ts:417:28-417:37: `.sub(100)`
$DIR/test/conduit.spec.ts:425:30-425:38: `.sub(10)`
$DIR/test/conduit.spec.ts:436:20-436:28: `.sub(10)`
$DIR/test/conduit.spec.ts:442:5-444:65: `await conduitController
      .connect(owner)
      .updateChannel(tempConduit.address, seller.address, true);`
$DIR/test/conduit.spec.ts:443:7-443:22: `.connect(owner)`
$DIR/test/conduit.spec.ts:444:7-444:64: `.updateChannel(tempConduit.address, seller.address, true)`
$DIR/test/conduit.spec.ts:477:5-479:66: `await tempConduit
      .connect(seller)
      .execute([erc20Transfer, erc721Transfer, erc1155Transfer]);`
$DIR/test/conduit.spec.ts:478:7-478:23: `.connect(seller)`
$DIR/test/conduit.spec.ts:479:7-479:65: `.execute([erc20Transfer, erc721Transfer, erc1155Transfer])`
$DIR/test/conduit.spec.ts:500:5-502:65: `await conduitController
      .connect(owner)
      .updateChannel(tempConduit.address, seller.address, true);`
$DIR/test/conduit.spec.ts:501:7-501:22: `.connect(owner)`
$DIR/test/conduit.spec.ts:502:7-502:64: `.updateChannel(tempConduit.address, seller.address, true)`
$DIR/test/conduit.spec.ts:506:27-506:64: `.max(1, randomInt(itemsToCreate - 2))`
$DIR/test/conduit.spec.ts:507:28-507:77: `.max(1, randomInt(itemsToCreate - numERC20s - 1))`
$DIR/test/conduit.spec.ts:508:29-508:76: `.max(1, itemsToCreate - numERC20s - numERC721s)`
$DIR/test/conduit.spec.ts:532:7-532:45: `erc20Contracts[i] = tempERC20Contract;`
$DIR/test/conduit.spec.ts:533:7-533:41: `erc20Transfers[i] = erc20Transfer;`
$DIR/test/conduit.spec.ts:549:7-549:47: `erc721Contracts[i] = tempERC721Contract;`
$DIR/test/conduit.spec.ts:550:7-550:43: `erc721Transfers[i] = erc721Transfer;`
$DIR/test/conduit.spec.ts:566:7-566:49: `erc1155Contracts[i] = tempERC1155Contract;`
$DIR/test/conduit.spec.ts:567:7-567:45: `erc1155Transfers[i] = erc1155Transfer;`
$DIR/test/conduit.spec.ts:581:5-581:58: `await tempConduit.connect(seller).execute(transfers);`
$DIR/test/conduit.spec.ts:581:22-581:38: `.connect(seller)`
$DIR/test/conduit.spec.ts:581:38-581:57: `.execute(transfers)`
$DIR/test/conduit.spec.ts:620:5-622:64: `await conduitController
      .connect(owner)
      .updateChannel(tempConduit.address, owner.address, true);`
$DIR/test/conduit.spec.ts:621:7-621:22: `.connect(owner)`
$DIR/test/conduit.spec.ts:622:7-622:63: `.updateChannel(tempConduit.address, owner.address, true)`
$DIR/test/conduit.spec.ts:631:5-631:67: `await set1155ApprovalForAll(owner, tempConduit.address, true);`
$DIR/test/conduit.spec.ts:650:5-652:64: `await conduitController
      .connect(owner)
      .updateChannel(tempConduit.address, owner.address, true);`
$DIR/test/conduit.spec.ts:651:7-651:22: `.connect(owner)`
$DIR/test/conduit.spec.ts:652:7-652:63: `.updateChannel(tempConduit.address, owner.address, true)`
$DIR/test/conduit.spec.ts:661:5-661:67: `await set1155ApprovalForAll(owner, tempConduit.address, true);`
$DIR/test/conduit.spec.ts:678:5-680:65: `await conduitController
      .connect(owner)
      .updateChannel(tempConduit.address, seller.address, true);`
$DIR/test/conduit.spec.ts:679:7-679:22: `.connect(owner)`
$DIR/test/conduit.spec.ts:680:7-680:64: `.updateChannel(tempConduit.address, seller.address, true)`
$DIR/test/conduit.spec.ts:701:7-703:67: `await conduitController
        .connect(owner)
        .updateChannel(tempConduit.address, seller.address, true);`
$DIR/test/conduit.spec.ts:702:9-702:24: `.connect(owner)`
$DIR/test/conduit.spec.ts:703:9-703:66: `.updateChannel(tempConduit.address, seller.address, true)`
$DIR/test/conduit.spec.ts:716:7-716:68: `await testERC1155.mint(seller.address, nftId, amount.mul(2));`
$DIR/test/conduit.spec.ts:716:24-716:67: `.mint(seller.address, nftId, amount.mul(2))`
$DIR/test/conduit.spec.ts:716:59-716:66: `.mul(2)`
$DIR/test/conduit.spec.ts:717:7-717:80: `await testERC1155.mint(seller.address, secondNftId, secondAmount.mul(2));`
$DIR/test/conduit.spec.ts:717:24-717:79: `.mint(seller.address, secondNftId, secondAmount.mul(2))`
$DIR/test/conduit.spec.ts:717:71-717:78: `.mul(2)`
$DIR/test/conduit.spec.ts:718:7-718:78: `await testERC1155.mint(seller.address, thirdNftId, thirdAmount.mul(2));`
$DIR/test/conduit.spec.ts:718:24-718:77: `.mint(seller.address, thirdNftId, thirdAmount.mul(2))`
$DIR/test/conduit.spec.ts:718:69-718:76: `.mul(2)`
$DIR/test/conduit.spec.ts:719:7-719:70: `await set1155ApprovalForAll(seller, tempConduit.address, true);`
$DIR/test/conduit.spec.ts:721:24-721:40: `.connect(seller)`
$DIR/test/conduit.spec.ts:745:7-747:67: `await conduitController
        .connect(owner)
        .updateChannel(tempConduit.address, seller.address, true);`
$DIR/test/conduit.spec.ts:746:9-746:24: `.connect(owner)`
$DIR/test/conduit.spec.ts:747:9-747:66: `.updateChannel(tempConduit.address, seller.address, true)`
$DIR/test/conduit.spec.ts:774:68-776:6: `.getConduit(
      tempConduitKey
    )`
$DIR/test/conduit.spec.ts:778:5-780:53: `await conduitController
      .connect(owner)
      .createConduit(tempConduitKey, owner.address);`
$DIR/test/conduit.spec.ts:779:7-779:22: `.connect(owner)`
$DIR/test/conduit.spec.ts:780:7-780:52: `.createConduit(tempConduitKey, owner.address)`
$DIR/test/conduit.spec.ts:782:46-782:73: `.attach(tempConduitAddress)`
$DIR/test/conduit.spec.ts:784:5-786:64: `await conduitController
      .connect(owner)
      .updateChannel(tempConduit.address, owner.address, true);`
$DIR/test/conduit.spec.ts:785:7-785:22: `.connect(owner)`
$DIR/test/conduit.spec.ts:786:7-786:63: `.updateChannel(tempConduit.address, owner.address, true)`
$DIR/test/conduit.spec.ts:811:5-811:67: `await set1155ApprovalForAll(owner, tempConduit.address, true);`
$DIR/test/conduit.spec.ts:813:22-813:37: `.connect(owner)`
$DIR/test/conduit.spec.ts:852:68-854:6: `.getConduit(
      tempConduitKey
    )`
$DIR/test/conduit.spec.ts:856:5-858:53: `await conduitController
      .connect(owner)
      .createConduit(tempConduitKey, owner.address);`
$DIR/test/conduit.spec.ts:857:7-857:22: `.connect(owner)`
$DIR/test/conduit.spec.ts:858:7-858:52: `.createConduit(tempConduitKey, owner.address)`
$DIR/test/conduit.spec.ts:860:46-860:73: `.attach(tempConduitAddress)`
$DIR/test/conduit.spec.ts:862:5-864:64: `await conduitController
      .connect(owner)
      .updateChannel(tempConduit.address, owner.address, true);`
$DIR/test/conduit.spec.ts:863:7-863:22: `.connect(owner)`
$DIR/test/conduit.spec.ts:864:7-864:63: `.updateChannel(tempConduit.address, owner.address, true)`
$DIR/test/conduit.spec.ts:901:38-901:45: `.add(1)`
$DIR/test/conduit.spec.ts:902:5-902:75: `await mintAndApproveERC20(owner, tempConduit.address, amount9.mul(2));`
$DIR/test/conduit.spec.ts:902:66-902:73: `.mul(2)`
$DIR/test/conduit.spec.ts:906:5-906:67: `await set1155ApprovalForAll(owner, tempConduit.address, true);`
$DIR/test/conduit.spec.ts:914:5-914:66: `await set721ApprovalForAll(owner, tempConduit.address, true);`
$DIR/test/conduit.spec.ts:918:5-953:7: `await tempConduit.connect(owner).executeWithBatch1155(
      [
        {
          itemType: 1,
          token: testERC20.address,
          from: owner.address,
          to: newAddress,
          identifier: toBN(0),
          amount: amount9,
        },
        {
          itemType: 2,
          token: testERC721.address,
          from: owner.address,
          to: newAddress,
          identifier: nftId10,
          amount: toBN(1),
        },
      ],
      [
        {
          token: testERC1155.address,
          from: owner.address,
          to: newAddress,
          ids: [nftId, secondNftId, thirdNftId, nftId4],
          amounts: [amount, secondAmount, thirdAmount, amount4],
        },
        {
          token: testERC1155Two.address,
          from: owner.address,
          to: newAddress,
          ids: [nftId5, nftId6, nftId7, nftId8],
          amounts: [amount5, amount6, amount7, amount8],
        },
      ]
    );`
$DIR/test/conduit.spec.ts:918:22-918:37: `.connect(owner)`
$DIR/test/conduit.spec.ts:918:37-953:6: `.executeWithBatch1155(
      [
        {
          itemType: 1,
          token: testERC20.address,
          from: owner.address,
          to: newAddress,
          identifier: toBN(0),
          amount: amount9,
        },
        {
          itemType: 2,
          token: testERC721.address,
          from: owner.address,
          to: newAddress,
          identifier: nftId10,
          amount: toBN(1),
        },
      ],
      [
        {
          token: testERC1155.address,
          from: owner.address,
          to: newAddress,
          ids: [nftId, secondNftId, thirdNftId, nftId4],
          amounts: [amount, secondAmount, thirdAmount, amount4],
        },
        {
          token: testERC1155Two.address,
          from: owner.address,
          to: newAddress,
          ids: [nftId5, nftId6, nftId7, nftId8],
          amounts: [amount5, amount6, amount7, amount8],
        },
      ]
    )`
$DIR/test/conduit.spec.ts:988:5-988:74: `await testERC1155Two.mint(seller.address, secondNftId, secondAmount);`
$DIR/test/conduit.spec.ts:988:25-988:73: `.mint(seller.address, secondNftId, secondAmount)`
$DIR/test/conduit.spec.ts:996:5-996:74: `await testERC1155Two.mint(seller.address, fourthNftId, fourthAmount);`
$DIR/test/conduit.spec.ts:996:25-996:73: `.mint(seller.address, fourthNftId, fourthAmount)`
$DIR/test/conduit.spec.ts:999:5-999:76: `await set1155ApprovalForAll(seller, marketplaceContract.address, true);`
$DIR/test/conduit.spec.ts:1050:6-1052:6: `.map(([offerArr, considerationArr]) =>
      toFulfillment(offerArr, considerationArr)
    )`
$DIR/test/conduit.spec.ts:1065:7-1065:22: `.connect(owner)`
$DIR/test/conduit.spec.ts:1082:12-1082:29: `.address.slice(2)`
$DIR/test/conduit.spec.ts:1082:29-1082:47: `.padStart(64, "0")`
$DIR/test/conduit.spec.ts:1082:47-1082:61: `.toLowerCase()`
$DIR/test/conduit.spec.ts:1084:32-1084:47: `.connect(owner)`
$DIR/test/conduit.spec.ts:1084:47-1084:79: `.populateTransaction.execute([])`
$DIR/test/conduit.spec.ts:1085:38-1085:47: `.call(tx)`
$DIR/test/conduit.spec.ts:1088:28-1088:43: `.connect(owner)`
$DIR/test/conduit.spec.ts:1088:43-1088:55: `.execute([])`
$DIR/test/conduit.spec.ts:1104:44-1104:72: `.ownerOf(conduitOne.address)`
$DIR/test/conduit.spec.ts:1113:40-1113:67: `.getKey(conduitOne.address)`
$DIR/test/conduit.spec.ts:1122:41-1125:6: `.getChannelStatus(
      conduitOne.address,
      marketplaceContract.address
    )`
$DIR/test/conduit.spec.ts:1128:5-1131:7: `isOpen = await conduitController.getChannelStatus(
      conduitOne.address,
      seller.address
    );`
$DIR/test/conduit.spec.ts:1128:37-1131:6: `.getChannelStatus(
      conduitOne.address,
      seller.address
    )`
$DIR/test/conduit.spec.ts:1142:50-1144:6: `.getTotalChannels(
      conduitOne.address
    )`
$DIR/test/conduit.spec.ts:1151:49-1154:6: `.getChannel(
      conduitOne.address,
      0
    )`
$DIR/test/conduit.spec.ts:1171:45-1171:77: `.getChannels(conduitOne.address)`
$DIR/test/conduit.spec.ts:1182:48-1184:6: `.getTotalChannels(
      conduitOne.address
    )`
$DIR/test/conduit.spec.ts:1187:41-1190:6: `.getChannelStatus(
      conduitOne.address,
      marketplaceContract.address
    )`
$DIR/test/conduit.spec.ts:1200:5-1203:7: `isOpen = await conduitController.getChannelStatus(
      conduitOne.address,
      marketplaceContract.address
    );`
$DIR/test/conduit.spec.ts:1200:37-1203:6: `.getChannelStatus(
      conduitOne.address,
      marketplaceContract.address
    )`
$DIR/test/conduit.spec.ts:1207:5-1209:7: `totalChannels = await conduitController.getTotalChannels(
      conduitOne.address
    );`
$DIR/test/conduit.spec.ts:1207:44-1209:6: `.getTotalChannels(
      conduitOne.address
    )`
$DIR/test/conduit.spec.ts:1212:5-1214:64: `await conduitController
      .connect(owner)
      .updateChannel(conduitOne.address, seller.address, true);`
$DIR/test/conduit.spec.ts:1213:7-1213:22: `.connect(owner)`
$DIR/test/conduit.spec.ts:1214:7-1214:63: `.updateChannel(conduitOne.address, seller.address, true)`
$DIR/test/conduit.spec.ts:1216:5-1219:7: `isOpen = await conduitController.getChannelStatus(
      conduitOne.address,
      seller.address
    );`
$DIR/test/conduit.spec.ts:1216:37-1219:6: `.getChannelStatus(
      conduitOne.address,
      seller.address
    )`
$DIR/test/conduit.spec.ts:1223:5-1225:7: `totalChannels = await conduitController.getTotalChannels(
      conduitOne.address
    );`
$DIR/test/conduit.spec.ts:1223:44-1225:6: `.getTotalChannels(
      conduitOne.address
    )`
$DIR/test/conduit.spec.ts:1228:5-1230:78: `await conduitController
      .connect(owner)
      .updateChannel(conduitOne.address, marketplaceContract.address, false);`
$DIR/test/conduit.spec.ts:1229:7-1229:22: `.connect(owner)`
$DIR/test/conduit.spec.ts:1230:7-1230:77: `.updateChannel(conduitOne.address, marketplaceContract.address, false)`
$DIR/test/conduit.spec.ts:1232:5-1235:7: `isOpen = await conduitController.getChannelStatus(
      conduitOne.address,
      marketplaceContract.address
    );`
$DIR/test/conduit.spec.ts:1232:37-1235:6: `.getChannelStatus(
      conduitOne.address,
      marketplaceContract.address
    )`
$DIR/test/conduit.spec.ts:1240:5-1240:55: `await faucet(conduitController.address, provider);`
$DIR/test/conduit.spec.ts:1242:5-1245:8: `await network.provider.request({
      method: "hardhat_impersonateAccount",
      params: [conduitController.address],
    });`
$DIR/test/conduit.spec.ts:1242:18-1245:7: `.provider.request({
      method: "hardhat_impersonateAccount",
      params: [conduitController.address],
    })`
$DIR/test/conduit.spec.ts:1247:49-1249:6: `.getSigner(
      conduitController.address
    )`
$DIR/test/conduit.spec.ts:1251:5-1253:57: `await conduitOne
      .connect(conduitControllerSigner)
      .updateChannel(marketplaceContract.address, true);`
$DIR/test/conduit.spec.ts:1252:7-1252:40: `.connect(conduitControllerSigner)`
$DIR/test/conduit.spec.ts:1253:7-1253:56: `.updateChannel(marketplaceContract.address, true)`
$DIR/test/conduit.spec.ts:1255:5-1258:8: `await network.provider.request({
      method: "hardhat_stopImpersonatingAccount",
      params: [conduitController.address],
    });`
$DIR/test/conduit.spec.ts:1255:18-1258:7: `.provider.request({
      method: "hardhat_stopImpersonatingAccount",
      params: [conduitController.address],
    })`
$DIR/test/conduit.spec.ts:1260:5-1262:78: `await conduitController
      .connect(owner)
      .updateChannel(conduitOne.address, marketplaceContract.address, false);`
$DIR/test/conduit.spec.ts:1261:7-1261:22: `.connect(owner)`
$DIR/test/conduit.spec.ts:1262:7-1262:77: `.updateChannel(conduitOne.address, marketplaceContract.address, false)`
$DIR/test/conduit.spec.ts:1264:5-1267:7: `isOpen = await conduitController.getChannelStatus(
      conduitOne.address,
      marketplaceContract.address
    );`
$DIR/test/conduit.spec.ts:1264:37-1267:6: `.getChannelStatus(
      conduitOne.address,
      marketplaceContract.address
    )`
$DIR/test/conduit.spec.ts:1271:5-1273:7: `totalChannels = await conduitController.getTotalChannels(
      conduitOne.address
    );`
$DIR/test/conduit.spec.ts:1271:44-1273:6: `.getTotalChannels(
      conduitOne.address
    )`
$DIR/test/conduit.spec.ts:1276:5-1278:65: `await conduitController
      .connect(owner)
      .updateChannel(conduitOne.address, seller.address, false);`
$DIR/test/conduit.spec.ts:1277:7-1277:22: `.connect(owner)`
$DIR/test/conduit.spec.ts:1278:7-1278:64: `.updateChannel(conduitOne.address, seller.address, false)`
$DIR/test/conduit.spec.ts:1280:5-1283:7: `isOpen = await conduitController.getChannelStatus(
      conduitOne.address,
      seller.address
    );`
$DIR/test/conduit.spec.ts:1280:37-1283:6: `.getChannelStatus(
      conduitOne.address,
      seller.address
    )`
$DIR/test/conduit.spec.ts:1287:5-1289:7: `totalChannels = await conduitController.getTotalChannels(
      conduitOne.address
    );`
$DIR/test/conduit.spec.ts:1287:44-1289:6: `.getTotalChannels(
      conduitOne.address
    )`
$DIR/test/conduit.spec.ts:1292:5-1294:77: `await conduitController
      .connect(owner)
      .updateChannel(conduitOne.address, marketplaceContract.address, true);`
$DIR/test/conduit.spec.ts:1293:7-1293:22: `.connect(owner)`
$DIR/test/conduit.spec.ts:1294:7-1294:76: `.updateChannel(conduitOne.address, marketplaceContract.address, true)`
$DIR/test/conduit.spec.ts:1296:5-1299:7: `isOpen = await conduitController.getChannelStatus(
      conduitOne.address,
      marketplaceContract.address
    );`
$DIR/test/conduit.spec.ts:1296:37-1299:6: `.getChannelStatus(
      conduitOne.address,
      marketplaceContract.address
    )`
$DIR/test/conduit.spec.ts:1303:5-1305:7: `totalChannels = await conduitController.getTotalChannels(
      conduitOne.address
    );`
$DIR/test/conduit.spec.ts:1303:44-1305:6: `.getTotalChannels(
      conduitOne.address
    )`
$DIR/test/conduit.spec.ts:1310:5-1312:64: `await conduitController
      .connect(owner)
      .updateChannel(conduitOne.address, seller.address, true);`
$DIR/test/conduit.spec.ts:1311:7-1311:22: `.connect(owner)`
$DIR/test/conduit.spec.ts:1312:7-1312:63: `.updateChannel(conduitOne.address, seller.address, true)`
$DIR/test/conduit.spec.ts:1314:43-1317:6: `.getChannelStatus(
      conduitOne.address,
      seller.address
    )`
$DIR/test/conduit.spec.ts:1366:51-1368:6: `.getPotentialOwner(
      conduitOne.address
    )`
$DIR/test/conduit.spec.ts:1398:49-1400:6: `.getPotentialOwner(
      conduitOne.address
    )`
$DIR/test/conduit.spec.ts:1403:5-1406:7: `await conduitController.transferOwnership(
      conduitOne.address,
      buyer.address
    );`
$DIR/test/conduit.spec.ts:1403:28-1406:6: `.transferOwnership(
      conduitOne.address,
      buyer.address
    )`
$DIR/test/conduit.spec.ts:1408:5-1410:7: `potentialOwner = await conduitController.getPotentialOwner(
      conduitOne.address
    );`
$DIR/test/conduit.spec.ts:1408:45-1410:6: `.getPotentialOwner(
      conduitOne.address
    )`
$DIR/test/conduit.spec.ts:1432:5-1432:73: `await conduitController.cancelOwnershipTransfer(conduitOne.address);`
$DIR/test/conduit.spec.ts:1432:28-1432:72: `.cancelOwnershipTransfer(conduitOne.address)`
$DIR/test/conduit.spec.ts:1434:5-1436:7: `potentialOwner = await conduitController.getPotentialOwner(
      conduitOne.address
    );`
$DIR/test/conduit.spec.ts:1434:45-1436:6: `.getPotentialOwner(
      conduitOne.address
    )`
$DIR/test/conduit.spec.ts:1448:5-1451:7: `await conduitController.transferOwnership(
      conduitOne.address,
      buyer.address
    );`
$DIR/test/conduit.spec.ts:1448:28-1451:6: `.transferOwnership(
      conduitOne.address,
      buyer.address
    )`
$DIR/test/conduit.spec.ts:1453:5-1455:7: `potentialOwner = await conduitController.getPotentialOwner(
      conduitOne.address
    );`
$DIR/test/conduit.spec.ts:1453:45-1455:6: `.getPotentialOwner(
      conduitOne.address
    )`
$DIR/test/conduit.spec.ts:1469:5-1469:80: `await conduitController.connect(buyer).acceptOwnership(conduitOne.address);`
$DIR/test/conduit.spec.ts:1469:28-1469:43: `.connect(buyer)`
$DIR/test/conduit.spec.ts:1469:43-1469:79: `.acceptOwnership(conduitOne.address)`
$DIR/test/conduit.spec.ts:1471:5-1473:7: `potentialOwner = await conduitController.getPotentialOwner(
      conduitOne.address
    );`
$DIR/test/conduit.spec.ts:1471:45-1473:6: `.getPotentialOwner(
      conduitOne.address
    )`
$DIR/test/conduit.spec.ts:1476:44-1476:72: `.ownerOf(conduitOne.address)`
$DIR/test/counter.spec.ts:104:54-104:80: `.getOrderStatus(orderHash)`
$DIR/test/counter.spec.ts:110:7-110:30: `order.signature = "0x";`
$DIR/test/counter.spec.ts:117:11-117:26: `.connect(buyer)`
$DIR/test/counter.spec.ts:118:11-120:13: `.populateTransaction.fulfillOrder(order, toKey(0), {
            value,
          })`
$DIR/test/counter.spec.ts:121:40-121:49: `.call(tx)`
$DIR/test/counter.spec.ts:134:9-138:14: `tx = await marketplaceContract
          .connect(owner)
          .populateTransaction.fulfillOrder(order, toKey(0), {
            value,
          });`
$DIR/test/counter.spec.ts:135:11-135:26: `.connect(owner)`
$DIR/test/counter.spec.ts:136:11-138:13: `.populateTransaction.fulfillOrder(order, toKey(0), {
            value,
          })`
$DIR/test/counter.spec.ts:139:9-139:46: `returnData = await provider.call(tx);`
$DIR/test/counter.spec.ts:139:36-139:45: `.call(tx)`
$DIR/test/counter.spec.ts:154:7-154:35: `order.signature = signature;`
$DIR/test/counter.spec.ts:156:43-156:58: `.connect(owner)`
$DIR/test/counter.spec.ts:156:58-156:76: `.validate([order])`
$DIR/test/counter.spec.ts:158:31-158:38: `.wait()`
$DIR/test/counter.spec.ts:223:50-223:76: `.getOrderStatus(orderHash)`
$DIR/test/counter.spec.ts:227:7-227:73: `await marketplaceContract.connect(owner).validate([order, order]);`
$DIR/test/counter.spec.ts:227:32-227:47: `.connect(owner)`
$DIR/test/counter.spec.ts:227:47-227:72: `.validate([order, order])`
$DIR/test/counter.spec.ts:230:7-230:30: `order.signature = "0x";`
$DIR/test/counter.spec.ts:231:7-248:10: `await withBalanceChecks([order], 0, undefined, async () => {
        const tx = marketplaceContract
          .connect(buyer)
          .fulfillOrder(order, toKey(0), {
            value,
          });
        const receipt = await (await tx).wait();
        await checkExpectedEvents(tx, receipt, [
          {
            order,
            orderHash,
            fulfiller: buyer.address,
            fulfillerConduitKey: toKey(0),
          },
        ]);

        return receipt;
      });`
$DIR/test/counter.spec.ts:233:11-233:26: `.connect(buyer)`
$DIR/test/counter.spec.ts:234:11-236:13: `.fulfillOrder(order, toKey(0), {
            value,
          })`
$DIR/test/counter.spec.ts:237:41-237:48: `.wait()`
$DIR/test/counter.spec.ts:250:52-250:78: `.getOrderStatus(orderHash)`
$DIR/test/counter.spec.ts:286:7-286:30: `order.signature = "0x";`
$DIR/test/counter.spec.ts:288:54-288:80: `.getOrderStatus(orderHash)`
$DIR/test/counter.spec.ts:299:11-299:26: `.connect(buyer)`
$DIR/test/counter.spec.ts:300:11-302:13: `.populateTransaction.fulfillOrder(order, toKey(0), {
            value,
          })`
$DIR/test/counter.spec.ts:303:40-303:49: `.call(tx)`
$DIR/test/counter.spec.ts:313:9-315:50: `tx = await marketplaceContract
          .connect(owner)
          .populateTransaction.validate([order]);`
$DIR/test/counter.spec.ts:314:11-314:26: `.connect(owner)`
$DIR/test/counter.spec.ts:315:11-315:49: `.populateTransaction.validate([order])`
$DIR/test/counter.spec.ts:316:9-316:46: `returnData = await provider.call(tx);`
$DIR/test/counter.spec.ts:316:36-316:45: `.call(tx)`
$DIR/test/counter.spec.ts:335:43-335:59: `.connect(seller)`
$DIR/test/counter.spec.ts:335:59-335:77: `.validate([order])`
$DIR/test/counter.spec.ts:337:31-337:38: `.wait()`
$DIR/test/counter.spec.ts:402:50-402:76: `.getOrderStatus(orderHash)`
$DIR/test/counter.spec.ts:406:7-406:30: `order.signature = "0x";`
$DIR/test/counter.spec.ts:407:7-424:10: `await withBalanceChecks([order], 0, undefined, async () => {
        const tx = marketplaceContract
          .connect(buyer)
          .fulfillOrder(order, toKey(0), {
            value,
          });
        const receipt = await (await tx).wait();
        await checkExpectedEvents(tx, receipt, [
          {
            order,
            orderHash,
            fulfiller: buyer.address,
            fulfillerConduitKey: toKey(0),
          },
        ]);

        return receipt;
      });`
$DIR/test/counter.spec.ts:409:11-409:26: `.connect(buyer)`
$DIR/test/counter.spec.ts:410:11-412:13: `.fulfillOrder(order, toKey(0), {
            value,
          })`
$DIR/test/counter.spec.ts:413:41-413:48: `.wait()`
$DIR/test/counter.spec.ts:426:52-426:78: `.getOrderStatus(orderHash)`
$DIR/test/counter.spec.ts:453:7-453:30: `order.signature = "0x";`
$DIR/test/counter.spec.ts:455:54-455:80: `.getOrderStatus(orderHash)`
$DIR/test/counter.spec.ts:466:11-466:26: `.connect(buyer)`
$DIR/test/counter.spec.ts:467:11-469:13: `.populateTransaction.fulfillOrder(order, toKey(0), {
            value,
          })`
$DIR/test/counter.spec.ts:470:40-470:49: `.call(tx)`
$DIR/test/counter.spec.ts:479:9-481:50: `tx = await marketplaceContract
          .connect(owner)
          .populateTransaction.validate([order]);`
$DIR/test/counter.spec.ts:480:11-480:26: `.connect(owner)`
$DIR/test/counter.spec.ts:481:11-481:49: `.populateTransaction.validate([order])`
$DIR/test/counter.spec.ts:482:9-482:46: `returnData = await provider.call(tx);`
$DIR/test/counter.spec.ts:482:36-482:45: `.call(tx)`
$DIR/test/counter.spec.ts:514:7-514:35: `order.signature = signature;`
$DIR/test/counter.spec.ts:519:50-519:76: `.getOrderStatus(orderHash)`
$DIR/test/counter.spec.ts:546:54-546:80: `.getOrderStatus(orderHash)`
$DIR/test/counter.spec.ts:564:7-564:73: `await set721ApprovalForAll(seller, offererContract.address, true);`
$DIR/test/counter.spec.ts:576:7-577:52: `contractOrderOffer[0].identifier =
        contractOrderOffer[0].identifierOrCriteria;`
$DIR/test/counter.spec.ts:578:7-578:70: `contractOrderOffer[0].amount = contractOrderOffer[0].endAmount;`
$DIR/test/counter.spec.ts:580:7-581:60: `contractOrderConsideration[0].identifier =
        contractOrderConsideration[0].identifierOrCriteria;`
$DIR/test/counter.spec.ts:582:7-583:49: `contractOrderConsideration[0].amount =
        contractOrderConsideration[0].endAmount;`
$DIR/test/counter.spec.ts:585:7-587:65: `await offererContract
        .connect(seller)
        .activate(contractOrderOffer[0], contractOrderOffer[0]);`
$DIR/test/counter.spec.ts:586:9-586:25: `.connect(seller)`
$DIR/test/counter.spec.ts:587:9-587:64: `.activate(contractOrderOffer[0], contractOrderOffer[0])`
$DIR/test/counter.spec.ts:598:34-600:10: `.getContractOffererNonce(
          offererContract.address
        )`
$DIR/test/counter.spec.ts:603:24-603:46: `.address.toLowerCase()`
$DIR/test/counter.spec.ts:604:29-604:43: `.toHexString()`
$DIR/test/counter.spec.ts:604:43-604:52: `.slice(2)`
$DIR/test/counter.spec.ts:604:52-604:70: `.padStart(24, "0")`
$DIR/test/counter.spec.ts:606:52-608:8: `.getOrderStatus(
        contractOrderHash
      )`
$DIR/test/counter.spec.ts:616:9-616:25: `.connect(seller)`
$DIR/test/counter.spec.ts:617:9-617:42: `.validate([order, contractOrder])`
$DIR/test/counter.spec.ts:619:31-619:38: `.wait()`
$DIR/test/counter.spec.ts:650:7-650:60: `order.parameters.totalOriginalConsiderationItems = 2;`
$DIR/test/counter.spec.ts:692:54-692:80: `.getOrderStatus(orderHash)`
$DIR/test/counter.spec.ts:713:50-713:76: `.getOrderStatus(orderHash)`
$DIR/test/counter.spec.ts:744:54-744:80: `.getOrderStatus(orderHash)`
$DIR/test/counter.spec.ts:750:43-750:58: `.connect(owner)`
$DIR/test/counter.spec.ts:750:58-750:76: `.validate([order])`
$DIR/test/counter.spec.ts:752:31-752:38: `.wait()`
$DIR/test/counter.spec.ts:817:50-817:76: `.getOrderStatus(orderHash)`
$DIR/test/counter.spec.ts:838:52-838:78: `.getOrderStatus(orderHash)`
$DIR/test/counter.spec.ts:871:54-871:80: `.getOrderStatus(orderHash)`
$DIR/test/counter.spec.ts:890:50-890:76: `.getOrderStatus(orderHash)`
$DIR/test/counter.spec.ts:918:54-918:80: `.getOrderStatus(orderHash)`
$DIR/test/counter.spec.ts:924:43-924:58: `.connect(owner)`
$DIR/test/counter.spec.ts:924:58-924:76: `.validate([order])`
$DIR/test/counter.spec.ts:926:31-926:38: `.wait()`
$DIR/test/counter.spec.ts:996:50-996:76: `.getOrderStatus(orderHash)`
$DIR/test/counter.spec.ts:1015:52-1015:78: `.getOrderStatus(orderHash)`
$DIR/test/counter.spec.ts:1035:7-1041:9: `await createOrder(
        seller,
        zone,
        offer,
        consideration,
        0 // FULL_OPEN
      );`
$DIR/test/counter.spec.ts:1056:7-1056:73: `await set721ApprovalForAll(seller, offererContract.address, true);`
$DIR/test/counter.spec.ts:1068:7-1069:52: `contractOrderOffer[0].identifier =
        contractOrderOffer[0].identifierOrCriteria;`
$DIR/test/counter.spec.ts:1070:7-1070:70: `contractOrderOffer[0].amount = contractOrderOffer[0].endAmount;`
$DIR/test/counter.spec.ts:1072:7-1073:60: `contractOrderConsideration[0].identifier =
        contractOrderConsideration[0].identifierOrCriteria;`
$DIR/test/counter.spec.ts:1074:7-1075:49: `contractOrderConsideration[0].amount =
        contractOrderConsideration[0].endAmount;`
$DIR/test/counter.spec.ts:1077:7-1079:65: `await offererContract
        .connect(seller)
        .activate(contractOrderOffer[0], contractOrderOffer[0]);`
$DIR/test/counter.spec.ts:1078:9-1078:25: `.connect(seller)`
$DIR/test/counter.spec.ts:1079:9-1079:64: `.activate(contractOrderOffer[0], contractOrderOffer[0])`
$DIR/test/counter.spec.ts:1090:34-1092:10: `.getContractOffererNonce(
          offererContract.address
        )`
$DIR/test/counter.spec.ts:1095:24-1095:46: `.address.toLowerCase()`
$DIR/test/counter.spec.ts:1096:29-1096:43: `.toHexString()`
$DIR/test/counter.spec.ts:1096:43-1096:52: `.slice(2)`
$DIR/test/counter.spec.ts:1096:52-1096:70: `.padStart(24, "0")`
$DIR/test/counter.spec.ts:1098:52-1100:8: `.getOrderStatus(
        contractOrderHash
      )`
$DIR/test/counter.spec.ts:1110:60-1112:8: `.getOrderStatus(
        contractOrderHash
      )`
$DIR/test/counter.spec.ts:1143:48-1143:75: `.getCounter(seller.address)`
$DIR/test/counter.spec.ts:1147:46-1147:65: `.getBlock("latest")`
$DIR/test/counter.spec.ts:1148:54-1148:63: `.shr(128)`
$DIR/test/counter.spec.ts:1155:51-1155:78: `.getCounter(seller.address)`
$DIR/test/counter.spec.ts:1163:11-1163:26: `.connect(buyer)`
$DIR/test/counter.spec.ts:1164:11-1166:13: `.populateTransaction.fulfillOrder(order, toKey(0), {
            value,
          })`
$DIR/test/counter.spec.ts:1167:42-1167:51: `.call(tx)`
$DIR/test/counter.spec.ts:1192:7-1192:37: `order = newOrderDetails.order;`
$DIR/test/counter.spec.ts:1193:7-1193:45: `orderHash = newOrderDetails.orderHash;`
$DIR/test/counter.spec.ts:1194:7-1194:37: `value = newOrderDetails.value;`
$DIR/test/counter.spec.ts:1195:7-1195:57: `orderComponents = newOrderDetails.orderComponents;`
$DIR/test/counter.spec.ts:1202:11-1202:26: `.connect(buyer)`
$DIR/test/counter.spec.ts:1203:11-1205:13: `.fulfillOrder(order, toKey(0), {
            value,
          })`
$DIR/test/counter.spec.ts:1206:41-1206:48: `.wait()`
$DIR/test/counter.spec.ts:1242:48-1242:75: `.getCounter(seller.address)`
$DIR/test/counter.spec.ts:1246:43-1246:58: `.connect(owner)`
$DIR/test/counter.spec.ts:1246:58-1246:76: `.validate([order])`
$DIR/test/counter.spec.ts:1248:31-1248:38: `.wait()`
$DIR/test/counter.spec.ts:1313:46-1313:65: `.getBlock("latest")`
$DIR/test/counter.spec.ts:1314:54-1314:63: `.shr(128)`
$DIR/test/counter.spec.ts:1321:51-1321:78: `.getCounter(seller.address)`
$DIR/test/counter.spec.ts:1329:11-1329:26: `.connect(buyer)`
$DIR/test/counter.spec.ts:1330:11-1332:13: `.populateTransaction.fulfillOrder(order, toKey(0), {
            value,
          })`
$DIR/test/counter.spec.ts:1333:42-1333:51: `.call(tx)`
$DIR/test/counter.spec.ts:1358:7-1358:37: `order = newOrderDetails.order;`
$DIR/test/counter.spec.ts:1359:7-1359:45: `orderHash = newOrderDetails.orderHash;`
$DIR/test/counter.spec.ts:1360:7-1360:37: `value = newOrderDetails.value;`
$DIR/test/counter.spec.ts:1361:7-1361:57: `orderComponents = newOrderDetails.orderComponents;`
$DIR/test/counter.spec.ts:1368:11-1368:26: `.connect(buyer)`
$DIR/test/counter.spec.ts:1369:11-1371:13: `.fulfillOrder(order, toKey(0), {
            value,
          })`
$DIR/test/counter.spec.ts:1372:41-1372:48: `.wait()`
$DIR/test/counter.spec.ts:1408:48-1408:75: `.getCounter(seller.address)`
$DIR/test/counter.spec.ts:1412:43-1412:58: `.connect(owner)`
$DIR/test/counter.spec.ts:1412:58-1412:76: `.validate([order])`
$DIR/test/counter.spec.ts:1414:31-1414:38: `.wait()`
$DIR/test/counter.spec.ts:1479:46-1479:65: `.getBlock("latest")`
$DIR/test/counter.spec.ts:1480:54-1480:63: `.shr(128)`
$DIR/test/counter.spec.ts:1487:51-1487:78: `.getCounter(seller.address)`
$DIR/test/counter.spec.ts:1495:11-1495:26: `.connect(buyer)`
$DIR/test/counter.spec.ts:1496:11-1498:13: `.populateTransaction.fulfillOrder(order, toKey(0), {
            value,
          })`
$DIR/test/counter.spec.ts:1499:42-1499:51: `.call(tx)`
$DIR/test/counter.spec.ts:1524:7-1524:37: `order = newOrderDetails.order;`
$DIR/test/counter.spec.ts:1525:7-1525:45: `orderHash = newOrderDetails.orderHash;`
$DIR/test/counter.spec.ts:1526:7-1526:37: `value = newOrderDetails.value;`
$DIR/test/counter.spec.ts:1527:7-1527:57: `orderComponents = newOrderDetails.orderComponents;`
$DIR/test/counter.spec.ts:1534:11-1534:26: `.connect(buyer)`
$DIR/test/counter.spec.ts:1535:11-1537:13: `.fulfillOrder(order, toKey(0), {
            value,
          })`
$DIR/test/counter.spec.ts:1538:41-1538:48: `.wait()`
$DIR/test/findings/AdditionalRecipientsOffByOne.spec.ts:90:5-90:27: `order = results.order;`
$DIR/test/findings/AdditionalRecipientsOffByOne.spec.ts:91:5-91:35: `orderHash = results.orderHash;`
$DIR/test/findings/AdditionalRecipientsOffByOne.spec.ts:94:48-94:74: `.getOrderStatus(orderHash)`
$DIR/test/findings/AdditionalRecipientsOffByOne.spec.ts:100:41-100:54: `.connect(bob)`
$DIR/test/findings/AdditionalRecipientsOffByOne.spec.ts:100:54-100:72: `.validate([order])`
$DIR/test/findings/AdditionalRecipientsOffByOne.spec.ts:102:29-102:36: `.wait()`
$DIR/test/findings/AdditionalRecipientsOffByOne.spec.ts:168:5-168:71: `orderStatus = await marketplaceContract.getOrderStatus(orderHash);`
$DIR/test/findings/AdditionalRecipientsOffByOne.spec.ts:168:44-168:70: `.getOrderStatus(orderHash)`
$DIR/test/findings/CriteriaResolverUnhashedLeaves.spec.ts:100:7-100:50: `await testERC721.mint(carol.address, root);`
$DIR/test/findings/CriteriaResolverUnhashedLeaves.spec.ts:100:23-100:49: `.mint(carol.address, root)`
$DIR/test/findings/CriteriaResolverUnhashedLeaves.spec.ts:108:11-108:26: `.connect(carol)`
$DIR/test/findings/FulfillmentOverflowWithMissingItems.spec.ts:96:18-96:38: `.MaxUint256.sub(998)`
$DIR/test/findings/FulfillmentOverflowWithMissingItems.spec.ts:97:18-97:38: `.MaxUint256.sub(998)`
$DIR/test/findings/FulfillmentOverflowWithMissingItems.spec.ts:127:11-127:24: `.connect(bob)`
$DIR/test/findings/PartialFillFractionOverflow.spec.ts:93:5-93:27: `order = results.order;`
$DIR/test/findings/PartialFillFractionOverflow.spec.ts:94:5-94:35: `orderHash = results.orderHash;`
$DIR/test/findings/PartialFillFractionOverflow.spec.ts:97:48-97:74: `.getOrderStatus(orderHash)`
$DIR/test/findings/PartialFillFractionOverflow.spec.ts:103:41-103:54: `.connect(bob)`
$DIR/test/findings/PartialFillFractionOverflow.spec.ts:103:54-103:72: `.validate([order])`
$DIR/test/findings/PartialFillFractionOverflow.spec.ts:105:29-105:36: `.wait()`
$DIR/test/findings/PartialFillFractionOverflow.spec.ts:171:5-171:71: `orderStatus = await marketplaceContract.getOrderStatus(orderHash);`
$DIR/test/findings/PartialFillFractionOverflow.spec.ts:171:44-171:70: `.getOrderStatus(orderHash)`
$DIR/test/findings/PartialFillFractionOverflow.spec.ts:179:7-179:27: `order.numerator = 1;`
$DIR/test/findings/PartialFillFractionOverflow.spec.ts:180:7-180:29: `order.denominator = 2;`
$DIR/test/findings/PartialFillFractionOverflow.spec.ts:181:7-183:65: `await marketplaceContract
        .connect(bob)
        .fulfillAdvancedOrder(order, [], toKey(0), bob.address);`
$DIR/test/findings/PartialFillFractionOverflow.spec.ts:182:9-182:22: `.connect(bob)`
$DIR/test/findings/PartialFillFractionOverflow.spec.ts:183:9-183:64: `.fulfillAdvancedOrder(order, [], toKey(0), bob.address)`
$DIR/test/findings/PartialFillFractionOverflow.spec.ts:194:7-194:42: `order.numerator = toBN(2).pow(118);`
$DIR/test/findings/PartialFillFractionOverflow.spec.ts:194:32-194:41: `.pow(118)`
$DIR/test/findings/PartialFillFractionOverflow.spec.ts:195:7-195:44: `order.denominator = toBN(2).pow(119);`
$DIR/test/findings/PartialFillFractionOverflow.spec.ts:195:34-195:43: `.pow(119)`
$DIR/test/findings/PartialFillFractionOverflow.spec.ts:197:9-197:24: `.connect(carol)`
$DIR/test/findings/PartialFillFractionOverflow.spec.ts:213:54-213:80: `.getOrderStatus(orderHash)`
$DIR/test/findings/PartialFillFractionOverflow.spec.ts:221:11-221:44: `order.numerator = toBN(2).pow(1);`
$DIR/test/findings/PartialFillFractionOverflow.spec.ts:221:36-221:43: `.pow(1)`
$DIR/test/findings/PartialFillFractionOverflow.spec.ts:222:11-222:46: `order.denominator = toBN(2).pow(2);`
$DIR/test/findings/PartialFillFractionOverflow.spec.ts:222:38-222:45: `.pow(2)`
$DIR/test/findings/PartialFillFractionOverflow.spec.ts:223:11-225:71: `await marketplaceContract
            .connect(carol)
            .fulfillAdvancedOrder(order, [], toKey(0), carol.address);`
$DIR/test/findings/PartialFillFractionOverflow.spec.ts:224:13-224:28: `.connect(carol)`
$DIR/test/findings/PartialFillFractionOverflow.spec.ts:225:13-225:70: `.fulfillAdvancedOrder(order, [], toKey(0), carol.address)`
$DIR/test/findings/PartialFillFractionOverflow.spec.ts:226:11-226:46: `order.numerator = toBN(2).pow(118);`
$DIR/test/findings/PartialFillFractionOverflow.spec.ts:226:36-226:45: `.pow(118)`
$DIR/test/findings/PartialFillFractionOverflow.spec.ts:227:11-227:48: `order.denominator = toBN(2).pow(119);`
$DIR/test/findings/PartialFillFractionOverflow.spec.ts:227:38-227:47: `.pow(119)`
$DIR/test/findings/PartialFillFractionOverflow.spec.ts:228:11-230:71: `await marketplaceContract
            .connect(carol)
            .fulfillAdvancedOrder(order, [], toKey(0), carol.address);`
$DIR/test/findings/PartialFillFractionOverflow.spec.ts:229:13-229:28: `.connect(carol)`
$DIR/test/findings/PartialFillFractionOverflow.spec.ts:230:13-230:70: `.fulfillAdvancedOrder(order, [], toKey(0), carol.address)`
$DIR/test/findings/PartialFillFractionOverflow.spec.ts:245:54-245:80: `.getOrderStatus(orderHash)`
$DIR/test/getter.spec.ts:38:43-38:50: `.name()`
$DIR/test/getter.spec.ts:41:55-41:62: `.name()`
$DIR/test/getter.spec.ts:51:34-51:48: `.information()`
$DIR/test/getter.spec.ts:60:39-60:52: `.getNetwork()`
$DIR/test/getter.spec.ts:62:47-63:16: `.address
      .slice(2)`
$DIR/test/getter.spec.ts:64:7-64:25: `.padStart(64, "0")`
$DIR/test/revert.spec.ts:156:51-156:59: `.mul(10)`
$DIR/test/revert.spec.ts:156:67-156:75: `.mul(10)`
$DIR/test/revert.spec.ts:159:26-159:36: `.mul(1000)`
$DIR/test/revert.spec.ts:159:44-159:54: `.mul(1000)`
$DIR/test/revert.spec.ts:160:26-160:34: `.mul(10)`
$DIR/test/revert.spec.ts:160:42-160:50: `.mul(10)`
$DIR/test/revert.spec.ts:161:26-161:34: `.mul(20)`
$DIR/test/revert.spec.ts:161:42-161:50: `.mul(20)`
$DIR/test/revert.spec.ts:172:50-172:76: `.getOrderStatus(orderHash)`
$DIR/test/revert.spec.ts:178:7-178:27: `order.numerator = 0;`
$DIR/test/revert.spec.ts:179:7-179:30: `order.denominator = 10;`
$DIR/test/revert.spec.ts:195:7-195:73: `orderStatus = await marketplaceContract.getOrderStatus(orderHash);`
$DIR/test/revert.spec.ts:195:46-195:72: `.getOrderStatus(orderHash)`
$DIR/test/revert.spec.ts:201:7-201:27: `order.numerator = 1;`
$DIR/test/revert.spec.ts:202:7-202:29: `order.denominator = 0;`
$DIR/test/revert.spec.ts:218:7-218:73: `orderStatus = await marketplaceContract.getOrderStatus(orderHash);`
$DIR/test/revert.spec.ts:218:46-218:72: `.getOrderStatus(orderHash)`
$DIR/test/revert.spec.ts:224:7-224:27: `order.numerator = 2;`
$DIR/test/revert.spec.ts:225:7-225:29: `order.denominator = 1;`
$DIR/test/revert.spec.ts:241:7-241:73: `orderStatus = await marketplaceContract.getOrderStatus(orderHash);`
$DIR/test/revert.spec.ts:241:46-241:72: `.getOrderStatus(orderHash)`
$DIR/test/revert.spec.ts:247:7-247:27: `order.numerator = 1;`
$DIR/test/revert.spec.ts:248:7-248:29: `order.denominator = 2;`
$DIR/test/revert.spec.ts:250:7-279:10: `await withBalanceChecks([order], 0, [], async () => {
        const tx = marketplaceContract
          .connect(buyer)
          .fulfillAdvancedOrder(
            order,
            [],
            toKey(0),
            ethers.constants.AddressZero,
            {
              value,
            }
          );
        const receipt = await (await tx).wait();
        await checkExpectedEvents(
          tx,
          receipt,
          [
            {
              order,
              orderHash,
              fulfiller: buyer.address,
              fulfillerConduitKey: toKey(0),
            },
          ],
          undefined,
          []
        );

        return receipt;
      });`
$DIR/test/revert.spec.ts:252:11-252:26: `.connect(buyer)`
$DIR/test/revert.spec.ts:253:11-261:12: `.fulfillAdvancedOrder(
            order,
            [],
            toKey(0),
            ethers.constants.AddressZero,
            {
              value,
            }
          )`
$DIR/test/revert.spec.ts:262:41-262:48: `.wait()`
$DIR/test/revert.spec.ts:281:7-281:73: `orderStatus = await marketplaceContract.getOrderStatus(orderHash);`
$DIR/test/revert.spec.ts:281:46-281:72: `.getOrderStatus(orderHash)`
$DIR/test/revert.spec.ts:295:51-295:59: `.mul(10)`
$DIR/test/revert.spec.ts:295:67-295:75: `.mul(10)`
$DIR/test/revert.spec.ts:298:26-298:36: `.mul(1000)`
$DIR/test/revert.spec.ts:298:44-298:54: `.mul(1000)`
$DIR/test/revert.spec.ts:299:26-299:34: `.mul(10)`
$DIR/test/revert.spec.ts:299:42-299:50: `.mul(10)`
$DIR/test/revert.spec.ts:300:26-300:34: `.mul(20)`
$DIR/test/revert.spec.ts:300:42-300:50: `.mul(20)`
$DIR/test/revert.spec.ts:311:50-311:76: `.getOrderStatus(orderHash)`
$DIR/test/revert.spec.ts:317:7-317:27: `order.numerator = 1;`
$DIR/test/revert.spec.ts:318:7-318:32: `order.denominator = 8191;`
$DIR/test/revert.spec.ts:334:7-334:73: `orderStatus = await marketplaceContract.getOrderStatus(orderHash);`
$DIR/test/revert.spec.ts:334:46-334:72: `.getOrderStatus(orderHash)`
$DIR/test/revert.spec.ts:340:7-340:27: `order.numerator = 1;`
$DIR/test/revert.spec.ts:341:7-341:29: `order.denominator = 2;`
$DIR/test/revert.spec.ts:343:7-372:10: `await withBalanceChecks([order], 0, [], async () => {
        const tx = marketplaceContract
          .connect(buyer)
          .fulfillAdvancedOrder(
            order,
            [],
            toKey(0),
            ethers.constants.AddressZero,
            {
              value,
            }
          );
        const receipt = await (await tx).wait();
        await checkExpectedEvents(
          tx,
          receipt,
          [
            {
              order,
              orderHash,
              fulfiller: buyer.address,
              fulfillerConduitKey: toKey(0),
            },
          ],
          undefined,
          []
        );

        return receipt;
      });`
$DIR/test/revert.spec.ts:345:11-345:26: `.connect(buyer)`
$DIR/test/revert.spec.ts:346:11-354:12: `.fulfillAdvancedOrder(
            order,
            [],
            toKey(0),
            ethers.constants.AddressZero,
            {
              value,
            }
          )`
$DIR/test/revert.spec.ts:355:41-355:48: `.wait()`
$DIR/test/revert.spec.ts:374:7-374:73: `orderStatus = await marketplaceContract.getOrderStatus(orderHash);`
$DIR/test/revert.spec.ts:374:46-374:72: `.getOrderStatus(orderHash)`
$DIR/test/revert.spec.ts:388:51-388:59: `.mul(10)`
$DIR/test/revert.spec.ts:388:67-388:75: `.mul(10)`
$DIR/test/revert.spec.ts:391:26-391:36: `.mul(1000)`
$DIR/test/revert.spec.ts:391:44-391:54: `.mul(1000)`
$DIR/test/revert.spec.ts:392:26-392:34: `.mul(10)`
$DIR/test/revert.spec.ts:392:42-392:50: `.mul(10)`
$DIR/test/revert.spec.ts:393:26-393:34: `.mul(20)`
$DIR/test/revert.spec.ts:393:42-393:50: `.mul(20)`
$DIR/test/revert.spec.ts:404:50-404:76: `.getOrderStatus(orderHash)`
$DIR/test/revert.spec.ts:410:7-410:27: `order.numerator = 1;`
$DIR/test/revert.spec.ts:411:7-411:29: `order.denominator = 2;`
$DIR/test/revert.spec.ts:430:7-430:73: `orderStatus = await marketplaceContract.getOrderStatus(orderHash);`
$DIR/test/revert.spec.ts:430:46-430:72: `.getOrderStatus(orderHash)`
$DIR/test/revert.spec.ts:436:7-436:27: `order.numerator = 1;`
$DIR/test/revert.spec.ts:437:7-437:29: `order.denominator = 1;`
$DIR/test/revert.spec.ts:439:7-468:10: `await withBalanceChecks([order], 0, [], async () => {
        const tx = marketplaceContract
          .connect(buyer)
          .fulfillAdvancedOrder(
            order,
            [],
            toKey(0),
            ethers.constants.AddressZero,
            {
              value,
            }
          );
        const receipt = await (await tx).wait();
        await checkExpectedEvents(
          tx,
          receipt,
          [
            {
              order,
              orderHash,
              fulfiller: buyer.address,
              fulfillerConduitKey: toKey(0),
            },
          ],
          undefined,
          []
        );

        return receipt;
      });`
$DIR/test/revert.spec.ts:441:11-441:26: `.connect(buyer)`
$DIR/test/revert.spec.ts:442:11-450:12: `.fulfillAdvancedOrder(
            order,
            [],
            toKey(0),
            ethers.constants.AddressZero,
            {
              value,
            }
          )`
$DIR/test/revert.spec.ts:451:41-451:48: `.wait()`
$DIR/test/revert.spec.ts:470:7-470:73: `orderStatus = await marketplaceContract.getOrderStatus(orderHash);`
$DIR/test/revert.spec.ts:470:46-470:72: `.getOrderStatus(orderHash)`
$DIR/test/revert.spec.ts:484:51-484:59: `.mul(10)`
$DIR/test/revert.spec.ts:484:67-484:75: `.mul(10)`
$DIR/test/revert.spec.ts:487:26-487:36: `.mul(1000)`
$DIR/test/revert.spec.ts:487:44-487:54: `.mul(1000)`
$DIR/test/revert.spec.ts:488:26-488:34: `.mul(10)`
$DIR/test/revert.spec.ts:488:42-488:50: `.mul(10)`
$DIR/test/revert.spec.ts:489:26-489:34: `.mul(20)`
$DIR/test/revert.spec.ts:489:42-489:50: `.mul(20)`
$DIR/test/revert.spec.ts:500:50-500:76: `.getOrderStatus(orderHash)`
$DIR/test/revert.spec.ts:506:7-506:27: `order.numerator = 1;`
$DIR/test/revert.spec.ts:507:7-507:29: `order.denominator = 2;`
$DIR/test/revert.spec.ts:509:7-538:10: `await withBalanceChecks([order], 0, [], async () => {
        const tx = marketplaceContract
          .connect(buyer)
          .fulfillAdvancedOrder(
            order,
            [],
            toKey(0),
            ethers.constants.AddressZero,
            {
              value,
            }
          );
        const receipt = await (await tx).wait();
        await checkExpectedEvents(
          tx,
          receipt,
          [
            {
              order,
              orderHash,
              fulfiller: buyer.address,
              fulfillerConduitKey: toKey(0),
            },
          ],
          undefined,
          []
        );

        return receipt;
      });`
$DIR/test/revert.spec.ts:511:11-511:26: `.connect(buyer)`
$DIR/test/revert.spec.ts:512:11-520:12: `.fulfillAdvancedOrder(
            order,
            [],
            toKey(0),
            ethers.constants.AddressZero,
            {
              value,
            }
          )`
$DIR/test/revert.spec.ts:521:41-521:48: `.wait()`
$DIR/test/revert.spec.ts:540:7-540:73: `orderStatus = await marketplaceContract.getOrderStatus(orderHash);`
$DIR/test/revert.spec.ts:540:46-540:72: `.getOrderStatus(orderHash)`
$DIR/test/revert.spec.ts:572:51-572:59: `.mul(10)`
$DIR/test/revert.spec.ts:572:67-572:75: `.mul(10)`
$DIR/test/revert.spec.ts:575:26-575:36: `.mul(1000)`
$DIR/test/revert.spec.ts:575:44-575:54: `.mul(1000)`
$DIR/test/revert.spec.ts:576:26-576:34: `.mul(10)`
$DIR/test/revert.spec.ts:576:42-576:50: `.mul(10)`
$DIR/test/revert.spec.ts:577:26-577:34: `.mul(20)`
$DIR/test/revert.spec.ts:577:42-577:50: `.mul(20)`
$DIR/test/revert.spec.ts:588:50-588:76: `.getOrderStatus(orderHash)`
$DIR/test/revert.spec.ts:594:7-594:27: `order.numerator = 1;`
$DIR/test/revert.spec.ts:595:7-595:29: `order.denominator = 1;`
$DIR/test/revert.spec.ts:597:7-626:10: `await withBalanceChecks([order], 0, [], async () => {
        const tx = marketplaceContract
          .connect(buyer)
          .fulfillAdvancedOrder(
            order,
            [],
            toKey(0),
            ethers.constants.AddressZero,
            {
              value,
            }
          );
        const receipt = await (await tx).wait();
        await checkExpectedEvents(
          tx,
          receipt,
          [
            {
              order,
              orderHash,
              fulfiller: buyer.address,
              fulfillerConduitKey: toKey(0),
            },
          ],
          undefined,
          []
        );

        return receipt;
      });`
$DIR/test/revert.spec.ts:599:11-599:26: `.connect(buyer)`
$DIR/test/revert.spec.ts:600:11-608:12: `.fulfillAdvancedOrder(
            order,
            [],
            toKey(0),
            ethers.constants.AddressZero,
            {
              value,
            }
          )`
$DIR/test/revert.spec.ts:609:41-609:48: `.wait()`
$DIR/test/revert.spec.ts:628:7-628:73: `orderStatus = await marketplaceContract.getOrderStatus(orderHash);`
$DIR/test/revert.spec.ts:628:46-628:72: `.getOrderStatus(orderHash)`
$DIR/test/revert.spec.ts:668:7-668:60: `consideration[0].identifierOrCriteria = minRandom(1);`
$DIR/test/revert.spec.ts:694:52-694:78: `.getOrderStatus(orderHash)`
$DIR/test/revert.spec.ts:702:7-702:76: `await mintAndApproveERC20(seller, marketplaceContract.address, 1000);`
$DIR/test/revert.spec.ts:709:7-709:52: `offer[0].identifierOrCriteria = minRandom(1);`
$DIR/test/revert.spec.ts:739:52-739:78: `.getOrderStatus(orderHash)`
$DIR/test/revert.spec.ts:753:51-753:59: `.mul(10)`
$DIR/test/revert.spec.ts:753:67-753:75: `.mul(10)`
$DIR/test/revert.spec.ts:756:26-756:36: `.mul(1000)`
$DIR/test/revert.spec.ts:756:44-756:54: `.mul(1000)`
$DIR/test/revert.spec.ts:757:26-757:34: `.mul(10)`
$DIR/test/revert.spec.ts:757:42-757:50: `.mul(10)`
$DIR/test/revert.spec.ts:758:26-758:34: `.mul(20)`
$DIR/test/revert.spec.ts:758:42-758:50: `.mul(20)`
$DIR/test/revert.spec.ts:761:7-761:54: `consideration[0].identifierOrCriteria = amount;`
$DIR/test/revert.spec.ts:787:52-787:78: `.getOrderStatus(orderHash)`
$DIR/test/revert.spec.ts:801:51-801:59: `.mul(10)`
$DIR/test/revert.spec.ts:801:67-801:75: `.mul(10)`
$DIR/test/revert.spec.ts:804:29-804:39: `.mul(1000)`
$DIR/test/revert.spec.ts:804:47-804:57: `.mul(1000)`
$DIR/test/revert.spec.ts:805:29-805:37: `.mul(10)`
$DIR/test/revert.spec.ts:805:45-805:53: `.mul(10)`
$DIR/test/revert.spec.ts:806:29-806:37: `.mul(20)`
$DIR/test/revert.spec.ts:806:45-806:53: `.mul(20)`
$DIR/test/revert.spec.ts:809:7-809:54: `consideration[0].identifierOrCriteria = amount;`
$DIR/test/revert.spec.ts:835:52-835:78: `.getOrderStatus(orderHash)`
$DIR/test/revert.spec.ts:849:51-849:59: `.mul(10)`
$DIR/test/revert.spec.ts:849:67-849:75: `.mul(10)`
$DIR/test/revert.spec.ts:852:26-852:36: `.mul(1000)`
$DIR/test/revert.spec.ts:852:44-852:54: `.mul(1000)`
$DIR/test/revert.spec.ts:853:26-853:34: `.mul(10)`
$DIR/test/revert.spec.ts:853:42-853:50: `.mul(10)`
$DIR/test/revert.spec.ts:854:26-854:34: `.mul(20)`
$DIR/test/revert.spec.ts:854:42-854:50: `.mul(20)`
$DIR/test/revert.spec.ts:857:7-857:47: `consideration[0].token = seller.address;`
$DIR/test/revert.spec.ts:867:52-867:78: `.getOrderStatus(orderHash)`
$DIR/test/revert.spec.ts:898:51-898:59: `.mul(10)`
$DIR/test/revert.spec.ts:898:67-898:75: `.mul(10)`
$DIR/test/revert.spec.ts:901:26-901:36: `.mul(1000)`
$DIR/test/revert.spec.ts:901:44-901:54: `.mul(1000)`
$DIR/test/revert.spec.ts:902:26-902:34: `.mul(10)`
$DIR/test/revert.spec.ts:902:42-902:50: `.mul(10)`
$DIR/test/revert.spec.ts:903:26-903:34: `.mul(20)`
$DIR/test/revert.spec.ts:903:42-903:50: `.mul(20)`
$DIR/test/revert.spec.ts:906:7-906:54: `consideration[0].identifierOrCriteria = amount;`
$DIR/test/revert.spec.ts:916:52-916:78: `.getOrderStatus(orderHash)`
$DIR/test/revert.spec.ts:947:51-947:59: `.mul(10)`
$DIR/test/revert.spec.ts:947:67-947:75: `.mul(10)`
$DIR/test/revert.spec.ts:950:29-950:39: `.mul(1000)`
$DIR/test/revert.spec.ts:950:47-950:57: `.mul(1000)`
$DIR/test/revert.spec.ts:951:29-951:37: `.mul(10)`
$DIR/test/revert.spec.ts:951:45-951:53: `.mul(10)`
$DIR/test/revert.spec.ts:952:29-952:37: `.mul(20)`
$DIR/test/revert.spec.ts:952:45-952:53: `.mul(20)`
$DIR/test/revert.spec.ts:955:7-955:54: `consideration[0].identifierOrCriteria = amount;`
$DIR/test/revert.spec.ts:965:52-965:78: `.getOrderStatus(orderHash)`
$DIR/test/revert.spec.ts:996:51-996:59: `.mul(10)`
$DIR/test/revert.spec.ts:996:67-996:75: `.mul(10)`
$DIR/test/revert.spec.ts:999:26-999:36: `.mul(1000)`
$DIR/test/revert.spec.ts:999:44-999:54: `.mul(1000)`
$DIR/test/revert.spec.ts:1000:26-1000:34: `.mul(10)`
$DIR/test/revert.spec.ts:1000:42-1000:50: `.mul(10)`
$DIR/test/revert.spec.ts:1001:26-1001:34: `.mul(20)`
$DIR/test/revert.spec.ts:1001:42-1001:50: `.mul(20)`
$DIR/test/revert.spec.ts:1015:7-1015:44: `order.parameters.consideration.pop();`
$DIR/test/revert.spec.ts:1015:12-1015:43: `.parameters.consideration.pop()`
$DIR/test/revert.spec.ts:1017:52-1017:78: `.getOrderStatus(orderHash)`
$DIR/test/revert.spec.ts:1105:9-1105:23: `.connect(zone)`
$DIR/test/revert.spec.ts:1106:9-1108:11: `.matchOrders([order, mirrorOrder], fulfillments, {
          value,
        })`
$DIR/test/revert.spec.ts:1109:39-1109:46: `.wait()`
$DIR/test/revert.spec.ts:1155:7-1155:61: `order.signature = order.signature.slice(0, -2) + "01";`
$DIR/test/revert.spec.ts:1155:30-1155:53: `.signature.slice(0, -2)`
$DIR/test/revert.spec.ts:1163:62-1163:80: `.padStart(64, "0")`
$DIR/test/revert.spec.ts:1166:9-1166:24: `.connect(buyer)`
$DIR/test/revert.spec.ts:1167:9-1169:11: `.populateTransaction.fulfillBasicOrder(basicOrderParameters, {
          value,
        })`
$DIR/test/revert.spec.ts:1170:40-1170:49: `.call(tx)`
$DIR/test/revert.spec.ts:1182:7-1182:69: `basicOrderParameters.signature = "0x".padEnd(130, "f") + "1c";`
$DIR/test/revert.spec.ts:1182:44-1182:61: `.padEnd(130, "f")`
$DIR/test/revert.spec.ts:1184:7-1184:73: `expectedRevertReason = getCustomRevertSelector("InvalidSigner()");`
$DIR/test/revert.spec.ts:1186:7-1190:12: `tx = await marketplaceContract
        .connect(buyer)
        .populateTransaction.fulfillBasicOrder(basicOrderParameters, {
          value,
        });`
$DIR/test/revert.spec.ts:1187:9-1187:24: `.connect(buyer)`
$DIR/test/revert.spec.ts:1188:9-1190:11: `.populateTransaction.fulfillBasicOrder(basicOrderParameters, {
          value,
        })`
$DIR/test/revert.spec.ts:1204:7-1204:58: `basicOrderParameters.signature = originalSignature;`
$DIR/test/revert.spec.ts:1208:11-1208:26: `.connect(buyer)`
$DIR/test/revert.spec.ts:1209:11-1211:13: `.fulfillBasicOrder(basicOrderParameters, {
            value,
          })`
$DIR/test/revert.spec.ts:1212:41-1212:48: `.wait()`
$DIR/test/revert.spec.ts:1239:7-1239:56: `await testERC20.mint(buyer.address, tokenAmount);`
$DIR/test/revert.spec.ts:1239:22-1239:55: `.mint(buyer.address, tokenAmount)`
$DIR/test/revert.spec.ts:1254:22-1254:31: `.sub(100)`
$DIR/test/revert.spec.ts:1255:22-1255:31: `.sub(100)`
$DIR/test/revert.spec.ts:1285:7-1285:68: `await sellerContract.connect(owner).revertWithMessage(false);`
$DIR/test/revert.spec.ts:1285:27-1285:42: `.connect(owner)`
$DIR/test/revert.spec.ts:1285:42-1285:67: `.revertWithMessage(false)`
$DIR/test/revert.spec.ts:1301:7-1301:56: `await testERC20.mint(buyer.address, tokenAmount);`
$DIR/test/revert.spec.ts:1301:22-1301:55: `.mint(buyer.address, tokenAmount)`
$DIR/test/revert.spec.ts:1316:22-1316:31: `.sub(100)`
$DIR/test/revert.spec.ts:1317:22-1317:31: `.sub(100)`
$DIR/test/revert.spec.ts:1358:7-1358:59: `await sellerContract.connect(owner).setValid(false);`
$DIR/test/revert.spec.ts:1358:27-1358:42: `.connect(owner)`
$DIR/test/revert.spec.ts:1358:42-1358:58: `.setValid(false)`
$DIR/test/revert.spec.ts:1374:7-1374:56: `await testERC20.mint(buyer.address, tokenAmount);`
$DIR/test/revert.spec.ts:1374:22-1374:55: `.mint(buyer.address, tokenAmount)`
$DIR/test/revert.spec.ts:1389:22-1389:31: `.sub(100)`
$DIR/test/revert.spec.ts:1390:22-1390:31: `.sub(100)`
$DIR/test/revert.spec.ts:1419:11-1419:26: `.connect(buyer)`
$DIR/test/revert.spec.ts:1420:11-1420:71: `.populateTransaction.fulfillBasicOrder(basicOrderParameters)`
$DIR/test/revert.spec.ts:1421:42-1421:51: `.call(tx)`
$DIR/test/revert.spec.ts:1437:27-1437:42: `.connect(owner)`
$DIR/test/revert.spec.ts:1463:13-1463:29: `.padEnd(65, "0")`
$DIR/test/revert.spec.ts:1485:7-1485:40: `order.extraData = "0x0102030405";`
$DIR/test/revert.spec.ts:1546:13-1546:29: `.padEnd(65, "0")`
$DIR/test/revert.spec.ts:1596:7-1596:32: `order.extraData = "0x01";`
$DIR/test/revert.spec.ts:1678:7-1688:9: `fulfillments = [
        {
          offerComponents: [],
          considerationComponents: [
            {
              orderIndex: 0,
              itemIndex: 0,
            },
          ],
        },
      ];`
$DIR/test/revert.spec.ts:1699:7-1709:9: `fulfillments = [
        {
          offerComponents: [
            {
              orderIndex: 0,
              itemIndex: 0,
            },
          ],
          considerationComponents: [],
        },
      ];`
$DIR/test/revert.spec.ts:1722:7-1722:53: `fulfillments = defaultBuyNowMirrorFulfillment;`
$DIR/test/revert.spec.ts:1735:9-1735:24: `.connect(owner)`
$DIR/test/revert.spec.ts:1736:9-1738:11: `.matchOrders([order, mirrorOrder], fulfillments, {
          value,
        })`
$DIR/test/revert.spec.ts:1739:39-1739:46: `.wait()`
$DIR/test/revert.spec.ts:1803:7-1803:53: `fulfillments = defaultBuyNowMirrorFulfillment;`
$DIR/test/revert.spec.ts:1816:9-1816:24: `.connect(owner)`
$DIR/test/revert.spec.ts:1817:9-1819:11: `.matchOrders([order, mirrorOrder], fulfillments, {
          value,
        })`
$DIR/test/revert.spec.ts:1820:39-1820:46: `.wait()`
$DIR/test/revert.spec.ts:1913:7-1913:77: `await set721ApprovalForAll(seller, marketplaceContract.address, true);`
$DIR/test/revert.spec.ts:1959:8-1961:8: `.map(([offerArr, considerationArr]) =>
        toFulfillment(offerArr, considerationArr)
      )`
$DIR/test/revert.spec.ts:1981:7-1981:77: `await set721ApprovalForAll(seller, marketplaceContract.address, true);`
$DIR/test/revert.spec.ts:2027:8-2029:8: `.map(([offerArr, considerationArr]) =>
        toFulfillment(offerArr, considerationArr)
      )`
$DIR/test/revert.spec.ts:2049:7-2049:77: `await set721ApprovalForAll(seller, marketplaceContract.address, true);`
$DIR/test/revert.spec.ts:2082:27-2082:50: `.map((o) => ({ ...o }))`
$DIR/test/revert.spec.ts:2084:7-2084:52: `offer2[0].identifierOrCriteria = secondNFTId;`
$DIR/test/revert.spec.ts:2107:8-2109:8: `.map(([offerArr, considerationArr]) =>
        toFulfillment(offerArr, considerationArr)
      )`
$DIR/test/revert.spec.ts:2129:7-2129:77: `await set721ApprovalForAll(seller, marketplaceContract.address, true);`
$DIR/test/revert.spec.ts:2162:27-2162:50: `.map((o) => ({ ...o }))`
$DIR/test/revert.spec.ts:2164:7-2164:52: `offer2[0].identifierOrCriteria = secondNFTId;`
$DIR/test/revert.spec.ts:2192:8-2194:8: `.map(([offerArr, considerationArr]) =>
        toFulfillment(offerArr, considerationArr)
      )`
$DIR/test/revert.spec.ts:2214:7-2214:77: `await set721ApprovalForAll(seller, marketplaceContract.address, true);`
$DIR/test/revert.spec.ts:2247:27-2247:50: `.map((o) => ({ ...o }))`
$DIR/test/revert.spec.ts:2249:7-2249:52: `offer2[0].identifierOrCriteria = secondNFTId;`
$DIR/test/revert.spec.ts:2251:7-2251:30: `offer2[0].itemType = 1;`
$DIR/test/revert.spec.ts:2274:8-2276:8: `.map(([offerArr, considerationArr]) =>
        toFulfillment(offerArr, considerationArr)
      )`
$DIR/test/revert.spec.ts:2296:7-2296:77: `await set721ApprovalForAll(seller, marketplaceContract.address, true);`
$DIR/test/revert.spec.ts:2329:27-2329:50: `.map((o) => ({ ...o }))`
$DIR/test/revert.spec.ts:2331:7-2331:52: `offer2[0].identifierOrCriteria = secondNFTId;`
$DIR/test/revert.spec.ts:2333:7-2333:45: `offer2[0].token = testERC1155.address;`
$DIR/test/revert.spec.ts:2356:8-2358:8: `.map(([offerArr, considerationArr]) =>
        toFulfillment(offerArr, considerationArr)
      )`
$DIR/test/revert.spec.ts:2376:7-2376:77: `await set721ApprovalForAll(seller, marketplaceContract.address, true);`
$DIR/test/revert.spec.ts:2401:43-2401:66: `.map((o) => ({ ...o }))`
$DIR/test/revert.spec.ts:2403:7-2403:51: `consideration2[0].recipient = owner.address;`
$DIR/test/revert.spec.ts:2424:8-2426:8: `.map(([offerArr, considerationArr]) =>
        toFulfillment(offerArr, considerationArr)
      )`
$DIR/test/revert.spec.ts:2444:7-2444:77: `await set721ApprovalForAll(seller, marketplaceContract.address, true);`
$DIR/test/revert.spec.ts:2469:43-2469:66: `.map((o) => ({ ...o }))`
$DIR/test/revert.spec.ts:2471:7-2471:38: `consideration2[0].itemType = 1;`
$DIR/test/revert.spec.ts:2492:8-2494:8: `.map(([offerArr, considerationArr]) =>
        toFulfillment(offerArr, considerationArr)
      )`
$DIR/test/revert.spec.ts:2512:7-2512:77: `await set721ApprovalForAll(seller, marketplaceContract.address, true);`
$DIR/test/revert.spec.ts:2537:43-2537:66: `.map((o) => ({ ...o }))`
$DIR/test/revert.spec.ts:2539:7-2539:53: `consideration2[0].token = testERC1155.address;`
$DIR/test/revert.spec.ts:2560:8-2562:8: `.map(([offerArr, considerationArr]) =>
        toFulfillment(offerArr, considerationArr)
      )`
$DIR/test/revert.spec.ts:2580:7-2580:77: `await set721ApprovalForAll(seller, marketplaceContract.address, true);`
$DIR/test/revert.spec.ts:2605:43-2605:66: `.map((o) => ({ ...o }))`
$DIR/test/revert.spec.ts:2607:7-2607:54: `consideration2[0].identifierOrCriteria = nftId;`
$DIR/test/revert.spec.ts:2628:8-2630:8: `.map(([offerArr, considerationArr]) =>
        toFulfillment(offerArr, considerationArr)
      )`
$DIR/test/revert.spec.ts:2650:7-2650:77: `await set721ApprovalForAll(seller, marketplaceContract.address, true);`
$DIR/test/revert.spec.ts:2696:8-2698:8: `.map(([offerArr, considerationArr]) =>
        toFulfillment(offerArr, considerationArr)
      )`
$DIR/test/revert.spec.ts:2747:8-2749:8: `.map(([offerArr, considerationArr]) =>
        toFulfillment(offerArr, considerationArr)
      )`
$DIR/test/revert.spec.ts:2771:38-2771:45: `.div(2)`
$DIR/test/revert.spec.ts:2771:53-2771:60: `.div(2)`
$DIR/test/revert.spec.ts:2772:38-2772:45: `.div(2)`
$DIR/test/revert.spec.ts:2772:53-2772:60: `.div(2)`
$DIR/test/revert.spec.ts:2848:8-2850:8: `.map(([offerArr, considerationArr]) =>
        toFulfillment(offerArr, considerationArr)
      )`
$DIR/test/revert.spec.ts:2923:7-2923:78: `await set1155ApprovalForAll(seller, marketplaceContract.address, true);`
$DIR/test/revert.spec.ts:2982:7-2982:78: `await set1155ApprovalForAll(seller, marketplaceContract.address, true);`
$DIR/test/revert.spec.ts:3206:51-3206:58: `.div(2)`
$DIR/test/revert.spec.ts:3206:66-3206:73: `.div(2)`
$DIR/test/revert.spec.ts:3256:7-3272:10: `await withBalanceChecks([orderThree], 0, undefined, async () => {
        const tx = marketplaceContract
          .connect(buyer)
          .fulfillOrder(orderThree, toKey(0), {
            value,
          });
        const receipt = await (await tx).wait();
        await checkExpectedEvents(tx, receipt, [
          {
            order: orderThree,
            orderHash: orderHashThree,
            fulfiller: buyer.address,
          },
        ]);

        return receipt;
      });`
$DIR/test/revert.spec.ts:3258:11-3258:26: `.connect(buyer)`
$DIR/test/revert.spec.ts:3259:11-3261:13: `.fulfillOrder(orderThree, toKey(0), {
            value,
          })`
$DIR/test/revert.spec.ts:3262:41-3262:48: `.wait()`
$DIR/test/revert.spec.ts:3325:7-3325:52: `await testERC721.mint(seller.address, nftId);`
$DIR/test/revert.spec.ts:3325:23-3325:51: `.mint(seller.address, nftId)`
$DIR/test/revert.spec.ts:3326:7-3326:58: `await testERC721.mint(seller.address, secondNFTId);`
$DIR/test/revert.spec.ts:3326:23-3326:57: `.mint(seller.address, secondNFTId)`
$DIR/test/revert.spec.ts:3327:7-3327:57: `await testERC721.mint(seller.address, thirdNFTId);`
$DIR/test/revert.spec.ts:3327:23-3327:56: `.mint(seller.address, thirdNFTId)`
$DIR/test/revert.spec.ts:3332:7-3332:77: `await set721ApprovalForAll(seller, marketplaceContract.address, true);`
$DIR/test/revert.spec.ts:3376:7-3378:9: `criteriaResolvers = [
        buildResolver(0, 0, 5, nftId, proofs[nftId.toString()]),
      ];`
$DIR/test/revert.spec.ts:3397:7-3399:9: `criteriaResolvers = [
        buildResolver(0, 1, 5, nftId, proofs[nftId.toString()]),
      ];`
$DIR/test/revert.spec.ts:3418:7-3420:9: `criteriaResolvers = [
        buildResolver(0, 0, 0, nftId, proofs[nftId.toString()]),
      ];`
$DIR/test/revert.spec.ts:3424:11-3424:26: `.connect(buyer)`
$DIR/test/revert.spec.ts:3425:11-3433:12: `.fulfillAdvancedOrder(
            order,
            criteriaResolvers,
            toKey(0),
            ethers.constants.AddressZero,
            {
              value,
            }
          )`
$DIR/test/revert.spec.ts:3434:41-3434:48: `.wait()`
$DIR/test/revert.spec.ts:3459:9-3459:79: `await set721ApprovalForAll(seller, marketplaceContract.address, true);`
$DIR/test/revert.spec.ts:3512:9-3514:11: `criteriaResolvers = [
          buildResolver(0, 0, 5, nftId, proofs[nftId.toString()]),
        ];`
$DIR/test/revert.spec.ts:3533:9-3535:11: `criteriaResolvers = [
          buildResolver(0, 1, 5, nftId, proofs[nftId.toString()]),
        ];`
$DIR/test/revert.spec.ts:3560:7-3560:52: `await testERC721.mint(seller.address, nftId);`
$DIR/test/revert.spec.ts:3560:23-3560:51: `.mint(seller.address, nftId)`
$DIR/test/revert.spec.ts:3561:7-3561:57: `await testERC721.mint(buyer.address, secondNFTId);`
$DIR/test/revert.spec.ts:3561:23-3561:56: `.mint(buyer.address, secondNFTId)`
$DIR/test/revert.spec.ts:3566:7-3566:77: `await set721ApprovalForAll(seller, marketplaceContract.address, true);`
$DIR/test/revert.spec.ts:3569:7-3569:76: `await set721ApprovalForAll(buyer, marketplaceContract.address, true);`
$DIR/test/revert.spec.ts:3593:7-3595:9: `criteriaResolvers = [
        buildResolver(0, 0, 0, nftId, proofs[nftId.toString()]),
      ];`
$DIR/test/revert.spec.ts:3616:7-3618:9: `criteriaResolvers = [
        buildResolver(0, 1, 0, secondNFTId, proofs[secondNFTId.toString()]),
      ];`
$DIR/test/revert.spec.ts:3639:7-3642:9: `criteriaResolvers = [
        buildResolver(0, 0, 0, nftId, proofs[nftId.toString()]),
        buildResolver(0, 1, 0, secondNFTId, proofs[secondNFTId.toString()]),
      ];`
$DIR/test/revert.spec.ts:3646:11-3646:26: `.connect(buyer)`
$DIR/test/revert.spec.ts:3647:11-3655:12: `.fulfillAdvancedOrder(
            order,
            criteriaResolvers,
            toKey(0),
            ethers.constants.AddressZero,
            {
              value,
            }
          )`
$DIR/test/revert.spec.ts:3656:41-3656:48: `.wait()`
$DIR/test/revert.spec.ts:3681:9-3681:54: `await testERC721.mint(seller.address, nftId);`
$DIR/test/revert.spec.ts:3681:25-3681:53: `.mint(seller.address, nftId)`
$DIR/test/revert.spec.ts:3682:9-3682:60: `await testERC721.mint(seller.address, secondNFTId);`
$DIR/test/revert.spec.ts:3682:25-3682:59: `.mint(seller.address, secondNFTId)`
$DIR/test/revert.spec.ts:3687:9-3687:79: `await set721ApprovalForAll(seller, marketplaceContract.address, true);`
$DIR/test/revert.spec.ts:3711:9-3713:11: `criteriaResolvers = [
          buildResolver(0, 0, 0, nftId, proofs[nftId.toString()]),
        ];`
$DIR/test/revert.spec.ts:3743:9-3745:11: `criteriaResolvers = [
          buildResolver(0, 1, 0, secondNFTId, proofs[secondNFTId.toString()]),
        ];`
$DIR/test/revert.spec.ts:3778:7-3778:52: `await testERC721.mint(seller.address, nftId);`
$DIR/test/revert.spec.ts:3778:23-3778:51: `.mint(seller.address, nftId)`
$DIR/test/revert.spec.ts:3779:7-3779:58: `await testERC721.mint(seller.address, secondNFTId);`
$DIR/test/revert.spec.ts:3779:23-3779:57: `.mint(seller.address, secondNFTId)`
$DIR/test/revert.spec.ts:3780:7-3780:57: `await testERC721.mint(seller.address, thirdNFTId);`
$DIR/test/revert.spec.ts:3780:23-3780:56: `.mint(seller.address, thirdNFTId)`
$DIR/test/revert.spec.ts:3785:7-3785:77: `await set721ApprovalForAll(seller, marketplaceContract.address, true);`
$DIR/test/revert.spec.ts:3835:9-3835:79: `await set721ApprovalForAll(seller, marketplaceContract.address, true);`
$DIR/test/revert.spec.ts:3894:7-3894:76: `await testERC20Two.mint(seller.address, ethers.constants.MaxUint256);`
$DIR/test/revert.spec.ts:3894:25-3894:75: `.mint(seller.address, ethers.constants.MaxUint256)`
$DIR/test/revert.spec.ts:3896:7-3898:76: `await testERC20Two
        .connect(seller)
        .approve(marketplaceContract.address, ethers.constants.MaxUint256);`
$DIR/test/revert.spec.ts:3897:9-3897:25: `.connect(seller)`
$DIR/test/revert.spec.ts:3898:9-3898:75: `.approve(marketplaceContract.address, ethers.constants.MaxUint256)`
$DIR/test/revert.spec.ts:3971:7-3971:76: `await testERC20Two.mint(seller.address, ethers.constants.MaxUint256);`
$DIR/test/revert.spec.ts:3971:25-3971:75: `.mint(seller.address, ethers.constants.MaxUint256)`
$DIR/test/revert.spec.ts:3973:7-3975:76: `await testERC20Two
        .connect(seller)
        .approve(marketplaceContract.address, ethers.constants.MaxUint256);`
$DIR/test/revert.spec.ts:3974:9-3974:25: `.connect(seller)`
$DIR/test/revert.spec.ts:3975:9-3975:75: `.approve(marketplaceContract.address, ethers.constants.MaxUint256)`
$DIR/test/revert.spec.ts:4065:7-4065:76: `await testERC20Two.mint(seller.address, ethers.constants.MaxUint256);`
$DIR/test/revert.spec.ts:4065:25-4065:75: `.mint(seller.address, ethers.constants.MaxUint256)`
$DIR/test/revert.spec.ts:4067:7-4069:76: `await testERC20Two
        .connect(seller)
        .approve(marketplaceContract.address, ethers.constants.MaxUint256);`
$DIR/test/revert.spec.ts:4068:9-4068:25: `.connect(seller)`
$DIR/test/revert.spec.ts:4069:9-4069:75: `.approve(marketplaceContract.address, ethers.constants.MaxUint256)`
$DIR/test/revert.spec.ts:4145:7-4145:75: `await testERC20Two.mint(buyer.address, ethers.constants.MaxUint256);`
$DIR/test/revert.spec.ts:4145:25-4145:74: `.mint(buyer.address, ethers.constants.MaxUint256)`
$DIR/test/revert.spec.ts:4147:7-4149:76: `await testERC20Two
        .connect(buyer)
        .approve(marketplaceContract.address, ethers.constants.MaxUint256);`
$DIR/test/revert.spec.ts:4148:9-4148:24: `.connect(buyer)`
$DIR/test/revert.spec.ts:4149:9-4149:75: `.approve(marketplaceContract.address, ethers.constants.MaxUint256)`
$DIR/test/revert.spec.ts:4223:7-4223:52: `await testERC721.mint(seller.address, nftId);`
$DIR/test/revert.spec.ts:4223:23-4223:51: `.mint(seller.address, nftId)`
$DIR/test/revert.spec.ts:4224:7-4224:58: `await testERC721.mint(seller.address, secondNFTId);`
$DIR/test/revert.spec.ts:4224:23-4224:57: `.mint(seller.address, secondNFTId)`
$DIR/test/revert.spec.ts:4225:7-4225:57: `await testERC721.mint(seller.address, thirdNFTId);`
$DIR/test/revert.spec.ts:4225:23-4225:56: `.mint(seller.address, thirdNFTId)`
$DIR/test/revert.spec.ts:4230:7-4230:77: `await set721ApprovalForAll(seller, marketplaceContract.address, true);`
$DIR/test/revert.spec.ts:4269:7-4269:47: `criteriaResolvers[0].criteriaProof = [];`
$DIR/test/revert.spec.ts:4273:11-4273:26: `.connect(buyer)`
$DIR/test/revert.spec.ts:4274:11-4282:12: `.fulfillAdvancedOrder(
            order,
            criteriaResolvers,
            toKey(0),
            ethers.constants.AddressZero,
            {
              value,
            }
          )`
$DIR/test/revert.spec.ts:4283:41-4283:48: `.wait()`
$DIR/test/revert.spec.ts:4309:7-4309:52: `await testERC721.mint(seller.address, nftId);`
$DIR/test/revert.spec.ts:4309:23-4309:51: `.mint(seller.address, nftId)`
$DIR/test/revert.spec.ts:4310:7-4310:58: `await testERC721.mint(seller.address, secondNFTId);`
$DIR/test/revert.spec.ts:4310:23-4310:57: `.mint(seller.address, secondNFTId)`
$DIR/test/revert.spec.ts:4311:7-4311:57: `await testERC721.mint(seller.address, thirdNFTId);`
$DIR/test/revert.spec.ts:4311:23-4311:56: `.mint(seller.address, thirdNFTId)`
$DIR/test/revert.spec.ts:4316:7-4316:77: `await set721ApprovalForAll(seller, marketplaceContract.address, true);`
$DIR/test/revert.spec.ts:4370:8-4370:37: `.map(toFulfillmentComponents)`
$DIR/test/revert.spec.ts:4396:7-4396:52: `await testERC721.mint(seller.address, nftId);`
$DIR/test/revert.spec.ts:4396:23-4396:51: `.mint(seller.address, nftId)`
$DIR/test/revert.spec.ts:4397:7-4397:58: `await testERC721.mint(seller.address, secondNFTId);`
$DIR/test/revert.spec.ts:4397:23-4397:57: `.mint(seller.address, secondNFTId)`
$DIR/test/revert.spec.ts:4398:7-4398:57: `await testERC721.mint(seller.address, thirdNFTId);`
$DIR/test/revert.spec.ts:4398:23-4398:56: `.mint(seller.address, thirdNFTId)`
$DIR/test/revert.spec.ts:4403:7-4403:77: `await set721ApprovalForAll(seller, marketplaceContract.address, true);`
$DIR/test/revert.spec.ts:4428:7-4428:80: `criteriaResolvers[0].identifier = criteriaResolvers[0].identifier.add(1);`
$DIR/test/revert.spec.ts:4428:61-4428:79: `.identifier.add(1)`
$DIR/test/revert.spec.ts:4444:7-4444:80: `criteriaResolvers[0].identifier = criteriaResolvers[0].identifier.sub(1);`
$DIR/test/revert.spec.ts:4444:61-4444:79: `.identifier.sub(1)`
$DIR/test/revert.spec.ts:4448:11-4448:26: `.connect(buyer)`
$DIR/test/revert.spec.ts:4449:11-4457:12: `.fulfillAdvancedOrder(
            order,
            criteriaResolvers,
            toKey(0),
            ethers.constants.AddressZero,
            {
              value,
            }
          )`
$DIR/test/revert.spec.ts:4458:41-4458:48: `.wait()`
$DIR/test/revert.spec.ts:4857:11-4857:26: `.connect(buyer)`
$DIR/test/revert.spec.ts:4858:11-4860:13: `.fulfillBasicOrder(basicOrderParameters, {
            value,
          })`
$DIR/test/revert.spec.ts:4861:41-4861:48: `.wait()`
$DIR/test/revert.spec.ts:4925:11-4925:26: `.connect(buyer)`
$DIR/test/revert.spec.ts:4926:11-4928:13: `.fulfillBasicOrder(basicOrderParameters, {
            value,
          })`
$DIR/test/revert.spec.ts:4929:41-4929:48: `.wait()`
$DIR/test/revert.spec.ts:4996:9-4996:24: `.connect(buyer)`
$DIR/test/revert.spec.ts:5009:51-5009:59: `.mul(10)`
$DIR/test/revert.spec.ts:5009:67-5009:75: `.mul(10)`
$DIR/test/revert.spec.ts:5012:26-5012:36: `.mul(1000)`
$DIR/test/revert.spec.ts:5012:44-5012:54: `.mul(1000)`
$DIR/test/revert.spec.ts:5013:26-5013:34: `.mul(10)`
$DIR/test/revert.spec.ts:5013:42-5013:50: `.mul(10)`
$DIR/test/revert.spec.ts:5014:26-5014:34: `.mul(20)`
$DIR/test/revert.spec.ts:5014:42-5014:50: `.mul(20)`
$DIR/test/revert.spec.ts:5025:50-5025:76: `.getOrderStatus(orderHash)`
$DIR/test/revert.spec.ts:5048:7-5048:73: `orderStatus = await marketplaceContract.getOrderStatus(orderHash);`
$DIR/test/revert.spec.ts:5048:46-5048:72: `.getOrderStatus(orderHash)`
$DIR/test/revert.spec.ts:5071:7-5071:73: `orderStatus = await marketplaceContract.getOrderStatus(orderHash);`
$DIR/test/revert.spec.ts:5071:46-5071:72: `.getOrderStatus(orderHash)`
$DIR/test/revert.spec.ts:5078:7-5107:10: `await withBalanceChecks([order], 0, [], async () => {
        const tx = marketplaceContract
          .connect(buyer)
          .fulfillAdvancedOrder(
            order,
            [],
            toKey(0),
            ethers.constants.AddressZero,
            {
              value: value.add(1),
            }
          );
        const receipt = await (await tx).wait();
        await checkExpectedEvents(
          tx,
          receipt,
          [
            {
              order,
              orderHash,
              fulfiller: buyer.address,
              fulfillerConduitKey: toKey(0),
            },
          ],
          undefined,
          []
        );

        return receipt;
      });`
$DIR/test/revert.spec.ts:5080:11-5080:26: `.connect(buyer)`
$DIR/test/revert.spec.ts:5081:11-5089:12: `.fulfillAdvancedOrder(
            order,
            [],
            toKey(0),
            ethers.constants.AddressZero,
            {
              value: value.add(1),
            }
          )`
$DIR/test/revert.spec.ts:5087:27-5087:34: `.add(1)`
$DIR/test/revert.spec.ts:5090:41-5090:48: `.wait()`
$DIR/test/revert.spec.ts:5109:7-5109:73: `orderStatus = await marketplaceContract.getOrderStatus(orderHash);`
$DIR/test/revert.spec.ts:5109:46-5109:72: `.getOrderStatus(orderHash)`
$DIR/test/revert.spec.ts:5179:9-5179:24: `.connect(owner)`
$DIR/test/revert.spec.ts:5180:9-5182:11: `.matchOrders([order, mirrorOrder], fulfillments, {
          value,
        })`
$DIR/test/revert.spec.ts:5183:39-5183:46: `.wait()`
$DIR/test/revert.spec.ts:5330:7-5330:56: `await testERC20.mint(buyer.address, tokenAmount);`
$DIR/test/revert.spec.ts:5330:22-5330:55: `.mint(buyer.address, tokenAmount)`
$DIR/test/revert.spec.ts:5333:7-5333:77: `await set721ApprovalForAll(seller, marketplaceContract.address, true);`
$DIR/test/revert.spec.ts:5389:7-5389:56: `await testERC20.mint(buyer.address, tokenAmount);`
$DIR/test/revert.spec.ts:5389:22-5389:55: `.mint(buyer.address, tokenAmount)`
$DIR/test/revert.spec.ts:5391:51-5391:59: `.mul(10)`
$DIR/test/revert.spec.ts:5391:67-5391:75: `.mul(10)`
$DIR/test/revert.spec.ts:5394:29-5394:39: `.mul(1000)`
$DIR/test/revert.spec.ts:5394:47-5394:57: `.mul(1000)`
$DIR/test/revert.spec.ts:5395:29-5395:37: `.mul(10)`
$DIR/test/revert.spec.ts:5395:45-5395:53: `.mul(10)`
$DIR/test/revert.spec.ts:5396:29-5396:37: `.mul(20)`
$DIR/test/revert.spec.ts:5396:45-5396:53: `.mul(20)`
$DIR/test/revert.spec.ts:5421:50-5421:76: `.getOrderStatus(orderHash)`
$DIR/test/revert.spec.ts:5436:7-5465:10: `await withBalanceChecks([order], 0, [], async () => {
        const tx = marketplaceContract
          .connect(buyer)
          .fulfillAdvancedOrder(
            order,
            [],
            toKey(0),
            ethers.constants.AddressZero,
            {
              value,
            }
          );
        const receipt = await (await tx).wait();
        await checkExpectedEvents(
          tx,
          receipt,
          [
            {
              order,
              orderHash,
              fulfiller: buyer.address,
              fulfillerConduitKey: toKey(0),
            },
          ],
          undefined,
          []
        );

        return receipt;
      });`
$DIR/test/revert.spec.ts:5438:11-5438:26: `.connect(buyer)`
$DIR/test/revert.spec.ts:5439:11-5447:12: `.fulfillAdvancedOrder(
            order,
            [],
            toKey(0),
            ethers.constants.AddressZero,
            {
              value,
            }
          )`
$DIR/test/revert.spec.ts:5448:41-5448:48: `.wait()`
$DIR/test/revert.spec.ts:5467:7-5467:73: `orderStatus = await marketplaceContract.getOrderStatus(orderHash);`
$DIR/test/revert.spec.ts:5467:46-5467:72: `.getOrderStatus(orderHash)`
$DIR/test/revert.spec.ts:5476:51-5476:59: `.mul(10)`
$DIR/test/revert.spec.ts:5476:67-5476:75: `.mul(10)`
$DIR/test/revert.spec.ts:5508:51-5508:59: `.mul(10)`
$DIR/test/revert.spec.ts:5508:67-5508:75: `.mul(10)`
$DIR/test/revert.spec.ts:5546:23-5546:71: `.getContractFactory("ExcessReturnDataRecipient")`
$DIR/test/revert.spec.ts:5547:10-5547:19: `.deploy()`
$DIR/test/revert.spec.ts:5552:11-5552:61: `await testERC20.mint(seller.address, tokenAmount);`
$DIR/test/revert.spec.ts:5552:26-5552:60: `.mint(seller.address, tokenAmount)`
$DIR/test/revert.spec.ts:5564:11-5564:75: `await testERC1155.mint(buyer.address, nftId, amount.mul(10000));`
$DIR/test/revert.spec.ts:5564:28-5564:74: `.mint(buyer.address, nftId, amount.mul(10000))`
$DIR/test/revert.spec.ts:5564:62-5564:73: `.mul(10000)`
$DIR/test/revert.spec.ts:5580:21-5580:29: `.mul(10)`
$DIR/test/revert.spec.ts:5581:21-5581:29: `.mul(10)`
$DIR/test/revert.spec.ts:5608:11-5608:26: `.connect(buyer)`
$DIR/test/revert.spec.ts:5609:11-5617:12: `.estimateGas.fulfillAdvancedOrder(
            initialOrder,
            [],
            conduitKeyOne,
            ethers.constants.AddressZero,
            {
              value,
            }
          )`
$DIR/test/revert.spec.ts:5621:9-5621:46: `await recipient.setRevertDataSize(1);`
$DIR/test/revert.spec.ts:5621:24-5621:45: `.setRevertDataSize(1)`
$DIR/test/revert.spec.ts:5652:7-5652:56: `await testERC20.mint(buyer.address, tokenAmount);`
$DIR/test/revert.spec.ts:5652:22-5652:55: `.mint(buyer.address, tokenAmount)`
$DIR/test/revert.spec.ts:5667:29-5667:39: `.mul(1000)`
$DIR/test/revert.spec.ts:5667:47-5667:57: `.mul(1000)`
$DIR/test/revert.spec.ts:5668:29-5668:37: `.mul(10)`
$DIR/test/revert.spec.ts:5668:45-5668:53: `.mul(10)`
$DIR/test/revert.spec.ts:5669:29-5669:37: `.mul(20)`
$DIR/test/revert.spec.ts:5669:45-5669:53: `.mul(20)`
$DIR/test/revert.spec.ts:5703:7-5703:49: `await testERC20.mint(buyer.address, 1000);`
$DIR/test/revert.spec.ts:5703:22-5703:48: `.mint(buyer.address, 1000)`
$DIR/test/revert.spec.ts:5716:29-5716:38: `.mul(100)`
$DIR/test/revert.spec.ts:5716:46-5716:55: `.mul(100)`
$DIR/test/revert.spec.ts:5717:29-5717:37: `.mul(10)`
$DIR/test/revert.spec.ts:5717:45-5717:53: `.mul(10)`
$DIR/test/revert.spec.ts:5718:29-5718:37: `.mul(20)`
$DIR/test/revert.spec.ts:5718:45-5718:53: `.mul(20)`
$DIR/test/revert.spec.ts:5757:8-5757:37: `.map(toFulfillmentComponents)`
$DIR/test/revert.spec.ts:5781:7-5781:56: `await testERC20.mint(buyer.address, tokenAmount);`
$DIR/test/revert.spec.ts:5781:22-5781:55: `.mint(buyer.address, tokenAmount)`
$DIR/test/revert.spec.ts:5793:51-5793:59: `.mul(10)`
$DIR/test/revert.spec.ts:5793:67-5793:75: `.mul(10)`
$DIR/test/revert.spec.ts:5796:29-5796:39: `.mul(1000)`
$DIR/test/revert.spec.ts:5796:47-5796:57: `.mul(1000)`
$DIR/test/revert.spec.ts:5797:29-5797:37: `.mul(10)`
$DIR/test/revert.spec.ts:5797:45-5797:53: `.mul(10)`
$DIR/test/revert.spec.ts:5798:29-5798:37: `.mul(20)`
$DIR/test/revert.spec.ts:5798:45-5798:53: `.mul(20)`
$DIR/test/revert.spec.ts:5810:7-5810:43: `await testERC20.blockTransfer(true);`
$DIR/test/revert.spec.ts:5810:22-5810:42: `.blockTransfer(true)`
$DIR/test/revert.spec.ts:5828:50-5828:76: `.getOrderStatus(orderHash)`
$DIR/test/revert.spec.ts:5834:7-5834:44: `await testERC20.blockTransfer(false);`
$DIR/test/revert.spec.ts:5834:22-5834:43: `.blockTransfer(false)`
$DIR/test/revert.spec.ts:5838:7-5867:10: `await withBalanceChecks([order], 0, [], async () => {
        const tx = marketplaceContract
          .connect(buyer)
          .fulfillAdvancedOrder(
            order,
            [],
            toKey(0),
            ethers.constants.AddressZero,
            {
              value,
            }
          );
        const receipt = await (await tx).wait();
        await checkExpectedEvents(
          tx,
          receipt,
          [
            {
              order,
              orderHash,
              fulfiller: buyer.address,
              fulfillerConduitKey: toKey(0),
            },
          ],
          undefined,
          []
        );

        return receipt;
      });`
$DIR/test/revert.spec.ts:5840:11-5840:26: `.connect(buyer)`
$DIR/test/revert.spec.ts:5841:11-5849:12: `.fulfillAdvancedOrder(
            order,
            [],
            toKey(0),
            ethers.constants.AddressZero,
            {
              value,
            }
          )`
$DIR/test/revert.spec.ts:5850:41-5850:48: `.wait()`
$DIR/test/revert.spec.ts:5869:7-5869:73: `orderStatus = await marketplaceContract.getOrderStatus(orderHash);`
$DIR/test/revert.spec.ts:5869:46-5869:72: `.getOrderStatus(orderHash)`
$DIR/test/revert.spec.ts:5885:7-5885:56: `await testERC20.mint(buyer.address, tokenAmount);`
$DIR/test/revert.spec.ts:5885:22-5885:55: `.mint(buyer.address, tokenAmount)`
$DIR/test/revert.spec.ts:5897:51-5897:59: `.mul(10)`
$DIR/test/revert.spec.ts:5897:67-5897:75: `.mul(10)`
$DIR/test/revert.spec.ts:5900:29-5900:39: `.mul(1000)`
$DIR/test/revert.spec.ts:5900:47-5900:57: `.mul(1000)`
$DIR/test/revert.spec.ts:5901:29-5901:37: `.mul(10)`
$DIR/test/revert.spec.ts:5901:45-5901:53: `.mul(10)`
$DIR/test/revert.spec.ts:5902:29-5902:37: `.mul(20)`
$DIR/test/revert.spec.ts:5902:45-5902:53: `.mul(20)`
$DIR/test/revert.spec.ts:5913:7-5913:45: `await testERC20.setNoReturnData(true);`
$DIR/test/revert.spec.ts:5913:22-5913:44: `.setNoReturnData(true)`
$DIR/test/revert.spec.ts:5917:7-5946:10: `await withBalanceChecks([order], 0, [], async () => {
        const tx = marketplaceContract
          .connect(buyer)
          .fulfillAdvancedOrder(
            order,
            [],
            toKey(0),
            ethers.constants.AddressZero,
            {
              value,
            }
          );
        const receipt = await (await tx).wait();
        await checkExpectedEvents(
          tx,
          receipt,
          [
            {
              order,
              orderHash,
              fulfiller: buyer.address,
              fulfillerConduitKey: toKey(0),
            },
          ],
          undefined,
          []
        );

        return receipt;
      });`
$DIR/test/revert.spec.ts:5919:11-5919:26: `.connect(buyer)`
$DIR/test/revert.spec.ts:5920:11-5928:12: `.fulfillAdvancedOrder(
            order,
            [],
            toKey(0),
            ethers.constants.AddressZero,
            {
              value,
            }
          )`
$DIR/test/revert.spec.ts:5929:41-5929:48: `.wait()`
$DIR/test/revert.spec.ts:5948:52-5948:78: `.getOrderStatus(orderHash)`
$DIR/test/revert.spec.ts:5954:7-5954:46: `await testERC20.setNoReturnData(false);`
$DIR/test/revert.spec.ts:5954:22-5954:45: `.setNoReturnData(false)`
$DIR/test/revert.spec.ts:5956:29-5956:44: `.noReturnData()`
$DIR/test/revert.spec.ts:5964:7-5964:69: `await set1155ApprovalForAll(seller, conduitOne.address, true);`
$DIR/test/revert.spec.ts:5968:7-5968:56: `await testERC20.mint(buyer.address, tokenAmount);`
$DIR/test/revert.spec.ts:5968:22-5968:55: `.mint(buyer.address, tokenAmount)`
$DIR/test/revert.spec.ts:5985:51-5985:59: `.mul(10)`
$DIR/test/revert.spec.ts:5985:67-5985:75: `.mul(10)`
$DIR/test/revert.spec.ts:5988:29-5988:39: `.mul(1000)`
$DIR/test/revert.spec.ts:5988:47-5988:57: `.mul(1000)`
$DIR/test/revert.spec.ts:5989:29-5989:37: `.mul(10)`
$DIR/test/revert.spec.ts:5989:45-5989:53: `.mul(10)`
$DIR/test/revert.spec.ts:5990:29-5990:37: `.mul(20)`
$DIR/test/revert.spec.ts:5990:45-5990:53: `.mul(20)`
$DIR/test/revert.spec.ts:6007:7-6007:43: `await testERC20.blockTransfer(true);`
$DIR/test/revert.spec.ts:6007:22-6007:42: `.blockTransfer(true)`
$DIR/test/revert.spec.ts:6010:47-6013:10: `.interface.encodeFunctionData(
          "fulfillAdvancedOrder",
          [order, [], conduitKeyOne, ethers.constants.AddressZero]
        )`
$DIR/test/revert.spec.ts:6015:35-6021:11: `.populateTransaction({
          from: buyer.address,
          to: marketplaceContract.address,
          value,
          data,
          gasLimit: 30_000_000,
        })`
$DIR/test/revert.spec.ts:6023:44-6023:57: `.call(fullTx)`
$DIR/test/revert.spec.ts:6025:49-6028:10: `.interface.encodeErrorResult(
          "BadReturnValueFromERC20OnTransfer",
          [testERC20.address, buyer.address, seller.address, amount.mul(1000)]
        )`
$DIR/test/revert.spec.ts:6027:68-6027:78: `.mul(1000)`
$DIR/test/revert.spec.ts:6036:13-6036:28: `.connect(buyer)`
$DIR/test/revert.spec.ts:6037:13-6045:14: `.fulfillAdvancedOrder(
              order,
              [],
              conduitKeyOne,
              ethers.constants.AddressZero,
              {
                value,
              }
            )`
$DIR/test/revert.spec.ts:6047:35-6047:42: `.wait()`
$DIR/test/revert.spec.ts:6048:11-6048:42: `success = receipt.status === 1;`
$DIR/test/revert.spec.ts:6068:50-6068:76: `.getOrderStatus(orderHash)`
$DIR/test/revert.spec.ts:6075:7-6075:44: `await testERC20.blockTransfer(false);`
$DIR/test/revert.spec.ts:6075:22-6075:43: `.blockTransfer(false)`
$DIR/test/revert.spec.ts:6077:7-6106:10: `await withBalanceChecks([order], 0, [], async () => {
        const tx = marketplaceContract
          .connect(buyer)
          .fulfillAdvancedOrder(
            order,
            [],
            conduitKeyOne,
            ethers.constants.AddressZero,
            {
              value,
            }
          );
        const receipt = await (await tx).wait();
        await checkExpectedEvents(
          tx,
          receipt,
          [
            {
              order,
              orderHash,
              fulfiller: buyer.address,
              fulfillerConduitKey: conduitKeyOne,
            },
          ],
          undefined,
          []
        );

        return receipt;
      });`
$DIR/test/revert.spec.ts:6079:11-6079:26: `.connect(buyer)`
$DIR/test/revert.spec.ts:6080:11-6088:12: `.fulfillAdvancedOrder(
            order,
            [],
            conduitKeyOne,
            ethers.constants.AddressZero,
            {
              value,
            }
          )`
$DIR/test/revert.spec.ts:6089:41-6089:48: `.wait()`
$DIR/test/revert.spec.ts:6108:7-6108:73: `orderStatus = await marketplaceContract.getOrderStatus(orderHash);`
$DIR/test/revert.spec.ts:6108:46-6108:72: `.getOrderStatus(orderHash)`
$DIR/test/revert.spec.ts:6121:7-6121:69: `await set1155ApprovalForAll(seller, conduitOne.address, true);`
$DIR/test/revert.spec.ts:6125:7-6125:56: `await testERC20.mint(buyer.address, tokenAmount);`
$DIR/test/revert.spec.ts:6125:22-6125:55: `.mint(buyer.address, tokenAmount)`
$DIR/test/revert.spec.ts:6141:51-6141:59: `.mul(10)`
$DIR/test/revert.spec.ts:6141:67-6141:75: `.mul(10)`
$DIR/test/revert.spec.ts:6144:29-6144:39: `.mul(1000)`
$DIR/test/revert.spec.ts:6144:47-6144:57: `.mul(1000)`
$DIR/test/revert.spec.ts:6145:29-6145:37: `.mul(10)`
$DIR/test/revert.spec.ts:6145:45-6145:53: `.mul(10)`
$DIR/test/revert.spec.ts:6146:29-6146:37: `.mul(20)`
$DIR/test/revert.spec.ts:6146:45-6146:53: `.mul(20)`
$DIR/test/revert.spec.ts:6162:28-6162:60: `.constants.HashZero.slice(0, -1)`
$DIR/test/revert.spec.ts:6178:50-6178:76: `.getOrderStatus(orderHash)`
$DIR/test/revert.spec.ts:6185:7-6213:10: `await withBalanceChecks([order], 0, [], async () => {
        const tx = marketplaceContract
          .connect(buyer)
          .fulfillAdvancedOrder(
            order,
            [],
            conduitKeyOne,
            ethers.constants.AddressZero,
            {
              value,
            }
          );
        const receipt = await (await tx).wait();
        await checkExpectedEvents(
          tx,
          receipt,
          [
            {
              order,
              orderHash,
              fulfiller: buyer.address,
              fulfillerConduitKey: conduitKeyOne,
            },
          ],
          undefined,
          undefined
        );
        return receipt;
      });`
$DIR/test/revert.spec.ts:6187:11-6187:26: `.connect(buyer)`
$DIR/test/revert.spec.ts:6188:11-6196:12: `.fulfillAdvancedOrder(
            order,
            [],
            conduitKeyOne,
            ethers.constants.AddressZero,
            {
              value,
            }
          )`
$DIR/test/revert.spec.ts:6197:41-6197:48: `.wait()`
$DIR/test/revert.spec.ts:6215:7-6215:73: `orderStatus = await marketplaceContract.getOrderStatus(orderHash);`
$DIR/test/revert.spec.ts:6215:46-6215:72: `.getOrderStatus(orderHash)`
$DIR/test/revert.spec.ts:6259:8-6261:8: `.map(([offerArr, considerationArr]) =>
        toFulfillment(offerArr, considerationArr)
      )`
$DIR/test/revert.spec.ts:6311:8-6313:8: `.map(([offerArr, considerationArr]) =>
        toFulfillment(offerArr, considerationArr)
      )`
$DIR/test/revert.spec.ts:6323:52-6323:78: `.getOrderStatus(orderHash)`
$DIR/test/revert.spec.ts:6331:7-6331:78: `await set1155ApprovalForAll(seller, marketplaceContract.address, true);`
$DIR/test/revert.spec.ts:6344:9-6344:24: `.connect(owner)`
$DIR/test/revert.spec.ts:6345:9-6347:11: `.matchOrders([order, mirrorOrder], fulfillments, {
          value,
        })`
$DIR/test/revert.spec.ts:6348:39-6348:46: `.wait()`
$DIR/test/revert.spec.ts:6396:11-6396:26: `.connect(buyer)`
$DIR/test/revert.spec.ts:6397:11-6405:12: `.fulfillAdvancedOrder(
            order,
            [],
            toKey(0),
            ethers.constants.AddressZero,
            {
              value,
            }
          )`
$DIR/test/revert.spec.ts:6721:8-6723:8: `.map(([offerArr, considerationArr]) =>
        toFulfillment(offerArr, considerationArr)
      )`
$DIR/test/revert.spec.ts:6733:52-6733:78: `.getOrderStatus(orderHash)`
$DIR/test/revert.spec.ts:6785:8-6787:8: `.map(([offerArr, considerationArr]) =>
        toFulfillment(offerArr, considerationArr)
      )`
$DIR/test/revert.spec.ts:6797:52-6797:78: `.getOrderStatus(orderHash)`
$DIR/test/revert.spec.ts:6932:7-6932:37: `calldata = calldata as string;`
$DIR/test/revert.spec.ts:6933:32-6933:45: `.slice(0, 73)`
$DIR/test/revert.spec.ts:6933:60-6933:70: `.slice(74)`
$DIR/test/revert.spec.ts:6933:71-6933:80: `.join("")`
$DIR/test/revert.spec.ts:6950:7-6950:37: `calldata = calldata as string;`
$DIR/test/revert.spec.ts:6951:32-6951:47: `.slice(0, 1161)`
$DIR/test/revert.spec.ts:6951:62-6951:74: `.slice(1162)`
$DIR/test/revert.spec.ts:6951:75-6953:8: `.join(
        ""
      )`
$DIR/test/revert.spec.ts:6969:7-6969:37: `calldata = calldata as string;`
$DIR/test/revert.spec.ts:6970:32-6970:47: `.slice(0, 1161)`
$DIR/test/revert.spec.ts:6970:62-6970:74: `.slice(1162)`
$DIR/test/revert.spec.ts:6970:75-6972:8: `.join(
        ""
      )`
$DIR/test/revert.spec.ts:7012:43-7015:8: `.interface.encodeFunctionData(
        "fulfillOrder",
        [order, toKey(0)]
      )`
$DIR/test/revert.spec.ts:7016:33-7020:8: `.prepare(
        marketplaceContract.address,
        0,
        callData
      )`
$DIR/test/revert.spec.ts:7021:7-7021:23: `await tx.wait();`
$DIR/test/revert.spec.ts:7021:15-7021:22: `.wait()`
$DIR/test/revert.spec.ts:7075:43-7078:8: `.interface.encodeFunctionData(
        "fulfillBasicOrder",
        [basicOrderParameters]
      )`
$DIR/test/revert.spec.ts:7079:33-7083:8: `.prepare(
        marketplaceContract.address,
        value,
        callData
      )`
$DIR/test/revert.spec.ts:7084:7-7084:23: `await tx.wait();`
$DIR/test/revert.spec.ts:7084:15-7084:22: `.wait()`
$DIR/test/revert.spec.ts:7138:43-7141:8: `.interface.encodeFunctionData(
        "fulfillBasicOrder_efficient_6GL6yc",
        [basicOrderParameters]
      )`
$DIR/test/revert.spec.ts:7142:33-7146:8: `.prepare(
        marketplaceContract.address,
        value,
        callData
      )`
$DIR/test/revert.spec.ts:7147:7-7147:23: `await tx.wait();`
$DIR/test/revert.spec.ts:7147:15-7147:22: `.wait()`
$DIR/test/revert.spec.ts:7180:51-7180:59: `.mul(10)`
$DIR/test/revert.spec.ts:7180:67-7180:75: `.mul(10)`
$DIR/test/revert.spec.ts:7183:26-7183:36: `.mul(1000)`
$DIR/test/revert.spec.ts:7183:44-7183:54: `.mul(1000)`
$DIR/test/revert.spec.ts:7184:26-7184:34: `.mul(10)`
$DIR/test/revert.spec.ts:7184:42-7184:50: `.mul(10)`
$DIR/test/revert.spec.ts:7195:52-7195:78: `.getOrderStatus(orderHash)`
$DIR/test/revert.spec.ts:7201:7-7201:27: `order.numerator = 2;`
$DIR/test/revert.spec.ts:7202:7-7202:30: `order.denominator = 10;`
$DIR/test/revert.spec.ts:7204:43-7207:8: `.interface.encodeFunctionData(
        "fulfillAdvancedOrder",
        [order, [], toKey(0), ethers.constants.AddressZero]
      )`
$DIR/test/revert.spec.ts:7208:33-7212:8: `.prepare(
        marketplaceContract.address,
        value,
        callData
      )`
$DIR/test/revert.spec.ts:7213:7-7213:23: `await tx.wait();`
$DIR/test/revert.spec.ts:7213:15-7213:22: `.wait()`
$DIR/test/revert.spec.ts:7281:8-7281:37: `.map(toFulfillmentComponents)`
$DIR/test/revert.spec.ts:7283:43-7286:8: `.interface.encodeFunctionData(
        "fulfillAvailableOrders",
        [[order], offerComponents, considerationComponents, toKey(0), 100]
      )`
$DIR/test/revert.spec.ts:7287:33-7291:8: `.prepare(
        marketplaceContract.address,
        value,
        callData
      )`
$DIR/test/revert.spec.ts:7292:7-7292:23: `await tx.wait();`
$DIR/test/revert.spec.ts:7292:15-7292:22: `.wait()`
$DIR/test/revert.spec.ts:7363:43-7374:8: `.interface.encodeFunctionData(
        "fulfillAvailableAdvancedOrders",
        [
          [order],
          [],
          offerComponents,
          considerationComponents,
          toKey(0),
          ethers.constants.AddressZero,
          100,
        ]
      )`
$DIR/test/revert.spec.ts:7375:33-7379:8: `.prepare(
        marketplaceContract.address,
        value,
        callData
      )`
$DIR/test/revert.spec.ts:7380:7-7380:23: `await tx.wait();`
$DIR/test/revert.spec.ts:7380:15-7380:22: `.wait()`
$DIR/test/revert.spec.ts:7446:52-7446:78: `.getOrderStatus(orderHash)`
$DIR/test/revert.spec.ts:7456:43-7459:8: `.interface.encodeFunctionData(
        "matchOrders",
        [[order, mirrorOrder], fulfillments]
      )`
$DIR/test/revert.spec.ts:7460:33-7464:8: `.prepare(
        marketplaceContract.address,
        value,
        callData
      )`
$DIR/test/revert.spec.ts:7465:7-7465:23: `await tx.wait();`
$DIR/test/revert.spec.ts:7465:15-7465:22: `.wait()`
$DIR/test/revert.spec.ts:7502:51-7502:59: `.mul(10)`
$DIR/test/revert.spec.ts:7502:67-7502:75: `.mul(10)`
$DIR/test/revert.spec.ts:7505:26-7505:36: `.mul(1000)`
$DIR/test/revert.spec.ts:7505:44-7505:54: `.mul(1000)`
$DIR/test/revert.spec.ts:7506:26-7506:34: `.mul(10)`
$DIR/test/revert.spec.ts:7506:42-7506:50: `.mul(10)`
$DIR/test/revert.spec.ts:7507:26-7507:34: `.mul(20)`
$DIR/test/revert.spec.ts:7507:42-7507:50: `.mul(20)`
$DIR/test/revert.spec.ts:7518:52-7518:78: `.getOrderStatus(orderHash)`
$DIR/test/revert.spec.ts:7524:7-7524:27: `order.numerator = 2;`
$DIR/test/revert.spec.ts:7525:7-7525:30: `order.denominator = 10;`
$DIR/test/revert.spec.ts:7531:43-7539:8: `.interface.encodeFunctionData(
        "matchAdvancedOrders",
        [
          [order, mirrorObject.mirrorOrder],
          [],
          fulfillments,
          ethers.constants.AddressZero,
        ]
      )`
$DIR/test/revert.spec.ts:7540:33-7544:8: `.prepare(
        marketplaceContract.address,
        value,
        callData
      )`
$DIR/test/revert.spec.ts:7545:7-7545:23: `await tx.wait();`
$DIR/test/revert.spec.ts:7545:15-7545:22: `.wait()`
$DIR/test/revert.spec.ts:7610:52-7610:78: `.getOrderStatus(orderHash)`
$DIR/test/revert.spec.ts:7616:43-7619:8: `.interface.encodeFunctionData(
        "cancel",
        [[orderComponents]]
      )`
$DIR/test/revert.spec.ts:7621:33-7625:8: `.prepare(
        marketplaceContract.address,
        0,
        callData
      )`
$DIR/test/revert.spec.ts:7626:7-7626:23: `await tx.wait();`
$DIR/test/revert.spec.ts:7626:15-7626:22: `.wait()`
$DIR/test/revert.spec.ts:7675:52-7675:78: `.getOrderStatus(orderHash)`
$DIR/test/revert.spec.ts:7681:43-7684:8: `.interface.encodeFunctionData(
        "validate",
        [[order]]
      )`
$DIR/test/revert.spec.ts:7686:33-7690:8: `.prepare(
        marketplaceContract.address,
        0,
        callData
      )`
$DIR/test/revert.spec.ts:7691:7-7691:23: `await tx.wait();`
$DIR/test/revert.spec.ts:7691:15-7691:22: `.wait()`
$DIR/test/revert.spec.ts:7740:52-7740:78: `.getOrderStatus(orderHash)`
$DIR/test/revert.spec.ts:7747:28-7747:77: `.interface.encodeFunctionData("incrementCounter")`
$DIR/test/revert.spec.ts:7749:33-7753:8: `.prepare(
        marketplaceContract.address,
        0,
        callData
      )`
$DIR/test/revert.spec.ts:7754:7-7754:23: `await tx.wait();`
$DIR/test/revert.spec.ts:7754:15-7754:22: `.wait()`
$DIR/test/revert.spec.ts:7892:7-7896:9: `await mintAndApproveERC20(
        buyer,
        marketplaceContract.address,
        tokenAmount
      );`
$DIR/test/revert.spec.ts:7912:9-7912:24: `.connect(owner)`
$DIR/test/revert.spec.ts:7919:7-7923:9: `await mintAndApproveERC20(
        buyer,
        marketplaceContract.address,
        tokenAmount
      );`
$DIR/test/revert.spec.ts:7939:9-7939:24: `.connect(owner)`
$DIR/test/revert.spec.ts:7976:7-7976:67: `await set721ApprovalForAll(seller, offererContract.address);`
$DIR/test/revert.spec.ts:7984:7-7984:59: `offer[0].identifier = offer[0].identifierOrCriteria;`
$DIR/test/revert.spec.ts:7985:7-7985:44: `offer[0].amount = offer[0].endAmount;`
$DIR/test/revert.spec.ts:7987:7-7987:75: `consideration[0].identifier = consideration[0].identifierOrCriteria;`
$DIR/test/revert.spec.ts:7988:7-7988:60: `consideration[0].amount = consideration[0].endAmount;`
$DIR/test/revert.spec.ts:7998:7-7998:58: `order.parameters.offerer = offererContract.address;`
$DIR/test/revert.spec.ts:7999:7-7999:27: `order.numerator = 1;`
$DIR/test/revert.spec.ts:8000:7-8000:29: `order.denominator = 1;`
$DIR/test/revert.spec.ts:8001:7-8001:30: `order.signature = "0x";`
$DIR/test/revert.spec.ts:8004:34-8006:10: `.getContractOffererNonce(
          offererContract.address
        )`
$DIR/test/revert.spec.ts:8009:24-8009:46: `.address.toLowerCase()`
$DIR/test/revert.spec.ts:8010:29-8010:43: `.toHexString()`
$DIR/test/revert.spec.ts:8010:43-8010:52: `.slice(2)`
$DIR/test/revert.spec.ts:8010:52-8010:70: `.padStart(24, "0")`
$DIR/test/revert.spec.ts:8042:7-8042:59: `offer[0].identifier = offer[0].identifierOrCriteria;`
$DIR/test/revert.spec.ts:8043:7-8043:44: `offer[0].amount = offer[0].endAmount;`
$DIR/test/revert.spec.ts:8045:7-8045:75: `consideration[0].identifier = consideration[0].identifierOrCriteria;`
$DIR/test/revert.spec.ts:8046:7-8046:60: `consideration[0].amount = consideration[0].endAmount;`
$DIR/test/revert.spec.ts:8057:34-8059:10: `.getContractOffererNonce(
          offererContract.address
        )`
$DIR/test/revert.spec.ts:8062:24-8062:46: `.address.toLowerCase()`
$DIR/test/revert.spec.ts:8063:29-8063:43: `.toHexString()`
$DIR/test/revert.spec.ts:8063:43-8063:52: `.slice(2)`
$DIR/test/revert.spec.ts:8063:52-8063:70: `.padStart(24, "0")`
$DIR/test/revert.spec.ts:8065:52-8065:78: `.getOrderStatus(orderHash)`
$DIR/test/revert.spec.ts:8071:7-8071:58: `order.parameters.offerer = offererContract.address;`
$DIR/test/revert.spec.ts:8072:7-8072:27: `order.numerator = 1;`
$DIR/test/revert.spec.ts:8073:7-8073:29: `order.denominator = 1;`
$DIR/test/revert.spec.ts:8074:7-8074:30: `order.signature = "0x";`
$DIR/test/revert.spec.ts:8078:11-8078:26: `.connect(buyer)`
$DIR/test/revert.spec.ts:8079:11-8087:12: `.fulfillAdvancedOrder(
            order,
            [],
            toKey(0),
            ethers.constants.AddressZero,
            {
              value,
            }
          )`
$DIR/test/revert.spec.ts:8088:41-8088:48: `.wait()`
$DIR/test/revert.spec.ts:8120:7-8120:59: `offer[0].identifier = offer[0].identifierOrCriteria;`
$DIR/test/revert.spec.ts:8121:7-8121:44: `offer[0].amount = offer[0].endAmount;`
$DIR/test/revert.spec.ts:8123:7-8123:75: `consideration[0].identifier = consideration[0].identifierOrCriteria;`
$DIR/test/revert.spec.ts:8124:7-8124:60: `consideration[0].amount = consideration[0].endAmount;`
$DIR/test/revert.spec.ts:8135:34-8137:10: `.getContractOffererNonce(
          offererContract.address
        )`
$DIR/test/revert.spec.ts:8140:24-8140:46: `.address.toLowerCase()`
$DIR/test/revert.spec.ts:8141:29-8141:43: `.toHexString()`
$DIR/test/revert.spec.ts:8141:43-8141:52: `.slice(2)`
$DIR/test/revert.spec.ts:8141:52-8141:70: `.padStart(24, "0")`
$DIR/test/revert.spec.ts:8143:52-8143:78: `.getOrderStatus(orderHash)`
$DIR/test/revert.spec.ts:8149:7-8149:58: `order.parameters.offerer = offererContract.address;`
$DIR/test/revert.spec.ts:8150:7-8150:27: `order.numerator = 1;`
$DIR/test/revert.spec.ts:8151:7-8151:29: `order.denominator = 1;`
$DIR/test/revert.spec.ts:8152:7-8152:30: `order.signature = "0x";`
$DIR/test/revert.spec.ts:8184:7-8184:59: `offer[0].identifier = offer[0].identifierOrCriteria;`
$DIR/test/revert.spec.ts:8185:7-8185:44: `offer[0].amount = offer[0].endAmount;`
$DIR/test/revert.spec.ts:8187:7-8187:75: `consideration[0].identifier = consideration[0].identifierOrCriteria;`
$DIR/test/revert.spec.ts:8188:7-8188:60: `consideration[0].amount = consideration[0].endAmount;`
$DIR/test/revert.spec.ts:8199:34-8201:10: `.getContractOffererNonce(
          offererContract.address
        )`
$DIR/test/revert.spec.ts:8204:24-8204:46: `.address.toLowerCase()`
$DIR/test/revert.spec.ts:8205:29-8205:43: `.toHexString()`
$DIR/test/revert.spec.ts:8205:43-8205:52: `.slice(2)`
$DIR/test/revert.spec.ts:8205:52-8205:70: `.padStart(24, "0")`
$DIR/test/revert.spec.ts:8207:52-8207:78: `.getOrderStatus(orderHash)`
$DIR/test/revert.spec.ts:8213:7-8213:58: `order.parameters.offerer = offererContract.address;`
$DIR/test/revert.spec.ts:8214:7-8214:27: `order.numerator = 1;`
$DIR/test/revert.spec.ts:8215:7-8215:29: `order.denominator = 1;`
$DIR/test/revert.spec.ts:8216:7-8216:30: `order.signature = "0x";`
$DIR/test/revert.spec.ts:8245:7-8245:59: `offer[0].identifier = offer[0].identifierOrCriteria;`
$DIR/test/revert.spec.ts:8246:7-8246:44: `offer[0].amount = offer[0].endAmount;`
$DIR/test/revert.spec.ts:8248:7-8248:75: `consideration[0].identifier = consideration[0].identifierOrCriteria;`
$DIR/test/revert.spec.ts:8249:7-8249:60: `consideration[0].amount = consideration[0].endAmount;`
$DIR/test/revert.spec.ts:8260:34-8262:10: `.getContractOffererNonce(
          offererContract.address
        )`
$DIR/test/revert.spec.ts:8265:24-8265:46: `.address.toLowerCase()`
$DIR/test/revert.spec.ts:8266:29-8266:43: `.toHexString()`
$DIR/test/revert.spec.ts:8266:43-8266:52: `.slice(2)`
$DIR/test/revert.spec.ts:8266:52-8266:70: `.padStart(24, "0")`
$DIR/test/revert.spec.ts:8268:52-8268:78: `.getOrderStatus(orderHash)`
$DIR/test/revert.spec.ts:8274:7-8274:58: `order.parameters.offerer = offererContract.address;`
$DIR/test/revert.spec.ts:8275:7-8275:27: `order.numerator = 1;`
$DIR/test/revert.spec.ts:8276:7-8276:29: `order.denominator = 1;`
$DIR/test/revert.spec.ts:8277:7-8277:30: `order.signature = "0x";`
$DIR/test/revert.spec.ts:8317:7-8317:59: `offer[0].identifier = offer[0].identifierOrCriteria;`
$DIR/test/revert.spec.ts:8318:7-8318:44: `offer[0].amount = offer[0].endAmount;`
$DIR/test/revert.spec.ts:8320:7-8320:75: `consideration[0].identifier = consideration[0].identifierOrCriteria;`
$DIR/test/revert.spec.ts:8321:7-8321:60: `consideration[0].amount = consideration[0].endAmount;`
$DIR/test/revert.spec.ts:8340:34-8342:10: `.getContractOffererNonce(
          offererContract.address
        )`
$DIR/test/revert.spec.ts:8345:24-8345:46: `.address.toLowerCase()`
$DIR/test/revert.spec.ts:8346:29-8346:43: `.toHexString()`
$DIR/test/revert.spec.ts:8346:43-8346:52: `.slice(2)`
$DIR/test/revert.spec.ts:8346:52-8346:70: `.padStart(24, "0")`
$DIR/test/revert.spec.ts:8348:52-8348:78: `.getOrderStatus(orderHash)`
$DIR/test/revert.spec.ts:8354:53-8354:80: `.getOrderStatus(orderHash2)`
$DIR/test/revert.spec.ts:8360:7-8360:58: `order.parameters.offerer = offererContract.address;`
$DIR/test/revert.spec.ts:8361:7-8361:27: `order.numerator = 1;`
$DIR/test/revert.spec.ts:8362:7-8362:29: `order.denominator = 1;`
$DIR/test/revert.spec.ts:8363:7-8363:30: `order.signature = "0x";`
$DIR/test/router.spec.ts:161:7-163:10: `await router.connect(buyer).fulfillAvailableAdvancedOrders(params, {
        value,
      });`
$DIR/test/router.spec.ts:161:19-161:34: `.connect(buyer)`
$DIR/test/router.spec.ts:161:34-163:9: `.fulfillAvailableAdvancedOrders(params, {
        value,
      })`
$DIR/test/router.spec.ts:245:7-247:10: `await router.connect(buyer).fulfillAvailableAdvancedOrders(params, {
        value: value.mul(2),
      });`
$DIR/test/router.spec.ts:245:19-245:34: `.connect(buyer)`
$DIR/test/router.spec.ts:245:34-247:9: `.fulfillAvailableAdvancedOrders(params, {
        value: value.mul(2),
      })`
$DIR/test/router.spec.ts:246:21-246:28: `.mul(2)`
$DIR/test/router.spec.ts:330:7-332:10: `await router.connect(buyer).fulfillAvailableAdvancedOrders(params, {
        value: value.mul(2),
      });`
$DIR/test/router.spec.ts:330:19-330:34: `.connect(buyer)`
$DIR/test/router.spec.ts:330:34-332:9: `.fulfillAvailableAdvancedOrders(params, {
        value: value.mul(2),
      })`
$DIR/test/router.spec.ts:331:21-331:28: `.mul(2)`
$DIR/test/router.spec.ts:349:7-349:68: `await set721ApprovalForAll(seller, conduitOne.address, true);`
$DIR/test/router.spec.ts:417:7-419:10: `await router.connect(buyer).fulfillAvailableAdvancedOrders(params, {
        value: value.mul(2),
      });`
$DIR/test/router.spec.ts:417:19-417:34: `.connect(buyer)`
$DIR/test/router.spec.ts:417:34-419:9: `.fulfillAvailableAdvancedOrders(params, {
        value: value.mul(2),
      })`
$DIR/test/router.spec.ts:418:21-418:28: `.mul(2)`
$DIR/test/router.spec.ts:501:51-501:77: `.getBalance(buyer.address)`
$DIR/test/router.spec.ts:504:7-513:9: `await router.connect(buyer).fulfillAvailableAdvancedOrders(
        {
          ...params,
          seaportContracts: params.seaportContracts.slice(0, 1),
          advancedOrderParams: params.advancedOrderParams.slice(0, 1),
        },
        {
          value,
        }
      );`
$DIR/test/router.spec.ts:504:19-504:34: `.connect(buyer)`
$DIR/test/router.spec.ts:504:34-513:8: `.fulfillAvailableAdvancedOrders(
        {
          ...params,
          seaportContracts: params.seaportContracts.slice(0, 1),
          advancedOrderParams: params.advancedOrderParams.slice(0, 1),
        },
        {
          value,
        }
      )`
$DIR/test/router.spec.ts:507:35-507:64: `.seaportContracts.slice(0, 1)`
$DIR/test/router.spec.ts:508:38-508:70: `.advancedOrderParams.slice(0, 1)`
$DIR/test/router.spec.ts:516:7-518:10: `await router.connect(buyer).fulfillAvailableAdvancedOrders(params, {
        value: value.mul(2),
      });`
$DIR/test/router.spec.ts:516:19-516:34: `.connect(buyer)`
$DIR/test/router.spec.ts:516:34-518:9: `.fulfillAvailableAdvancedOrders(params, {
        value: value.mul(2),
      })`
$DIR/test/router.spec.ts:517:21-517:28: `.mul(2)`
$DIR/test/router.spec.ts:525:50-525:76: `.getBalance(buyer.address)`
$DIR/test/router.spec.ts:527:29-527:47: `.sub(value.mul(3))`
$DIR/test/router.spec.ts:527:39-527:46: `.mul(3)`
$DIR/test/router.spec.ts:575:33-575:68: `.prepare(testERC721.address, 0, [])`
$DIR/test/router.spec.ts:576:7-576:23: `await tx.wait();`
$DIR/test/router.spec.ts:576:15-576:22: `.wait()`
$DIR/test/router.spec.ts:579:30-582:8: `.interface.encodeFunctionData(
        "fulfillAvailableAdvancedOrders",
        [params]
      )`
$DIR/test/router.spec.ts:632:30-635:8: `.interface.encodeFunctionData(
        "fulfillAvailableAdvancedOrders",
        [params]
      )`
$DIR/test/router.spec.ts:636:33-636:70: `.prepare(router.address, 0, callData)`
$DIR/test/router.spec.ts:637:7-637:23: `await tx.wait();`
$DIR/test/router.spec.ts:637:15-637:22: `.wait()`
$DIR/test/router.spec.ts:645:30-645:71: `.interface.getSighash("NoReentrantCalls")`
$DIR/test/router.spec.ts:650:43-656:9: `.signTransaction({
        to: router.address,
        value: 1,
        nonce: await owner.getTransactionCount(),
        gasPrice: await provider.getGasPrice(),
        gasLimit: 50_000,
      })`
$DIR/test/router.spec.ts:653:27-653:49: `.getTransactionCount()`
$DIR/test/router.spec.ts:654:33-654:47: `.getGasPrice()`
$DIR/test/router.spec.ts:662:7-665:10: `await network.provider.request({
        method: "hardhat_impersonateAccount",
        params: [marketplaceContract.address],
      });`
$DIR/test/router.spec.ts:662:20-665:9: `.provider.request({
        method: "hardhat_impersonateAccount",
        params: [marketplaceContract.address],
      })`
$DIR/test/router.spec.ts:667:41-667:80: `.getSigner(marketplaceContract.address)`
$DIR/test/router.spec.ts:668:7-668:59: `await faucet(marketplaceContract.address, provider);`
$DIR/test/router.spec.ts:670:7-670:77: `await seaportSigner.sendTransaction({ to: router.address, value: 1 });`
$DIR/test/router.spec.ts:670:26-670:76: `.sendTransaction({ to: router.address, value: 1 })`
$DIR/test/router.spec.ts:752:49-752:75: `.getBalance(buyer.address)`
$DIR/test/router.spec.ts:755:5-764:7: `await router.connect(buyer).fulfillAvailableAdvancedOrders(
      {
        ...params,
        seaportContracts: params.seaportContracts.slice(0, 1),
        advancedOrderParams: params.advancedOrderParams.slice(0, 1),
      },
      {
        value,
      }
    );`
$DIR/test/router.spec.ts:755:17-755:32: `.connect(buyer)`
$DIR/test/router.spec.ts:755:32-764:6: `.fulfillAvailableAdvancedOrders(
      {
        ...params,
        seaportContracts: params.seaportContracts.slice(0, 1),
        advancedOrderParams: params.advancedOrderParams.slice(0, 1),
      },
      {
        value,
      }
    )`
$DIR/test/router.spec.ts:758:33-758:62: `.seaportContracts.slice(0, 1)`
$DIR/test/router.spec.ts:759:36-759:68: `.advancedOrderParams.slice(0, 1)`
$DIR/test/router.spec.ts:767:5-769:8: `await router.connect(buyer).fulfillAvailableAdvancedOrders(params, {
      value: value.mul(2),
    });`
$DIR/test/router.spec.ts:767:17-767:32: `.connect(buyer)`
$DIR/test/router.spec.ts:767:32-769:7: `.fulfillAvailableAdvancedOrders(params, {
      value: value.mul(2),
    })`
$DIR/test/router.spec.ts:768:19-768:26: `.mul(2)`
$DIR/test/router.spec.ts:776:48-776:74: `.getBalance(buyer.address)`
$DIR/test/router.spec.ts:790:5-790:78: `params.advancedOrderParams[0].advancedOrders[0].parameters.orderType = 4;`
$DIR/test/transferhelper.spec.ts:157:29-157:66: `.max(1, randomInt(itemsToCreate - 2))`
$DIR/test/transferhelper.spec.ts:158:30-158:79: `.max(1, randomInt(itemsToCreate - numERC20s - 1))`
$DIR/test/transferhelper.spec.ts:159:31-159:78: `.max(1, itemsToCreate - numERC20s - numERC721s)`
$DIR/test/transferhelper.spec.ts:183:9-183:47: `erc20Contracts[i] = tempERC20Contract;`
$DIR/test/transferhelper.spec.ts:184:9-184:43: `erc20Transfers[i] = erc20Transfer;`
$DIR/test/transferhelper.spec.ts:200:9-200:49: `erc721Contracts[i] = tempERC721Contract;`
$DIR/test/transferhelper.spec.ts:201:9-201:45: `erc721Transfers[i] = erc721Transfer;`
$DIR/test/transferhelper.spec.ts:219:9-219:51: `erc1155Contracts[i] = tempERC1155Contract;`
$DIR/test/transferhelper.spec.ts:220:9-220:47: `erc1155Transfers[i] = erc1155Transfer;`
$DIR/test/transferhelper.spec.ts:236:7-240:9: `transfersWithRecipients[0] = createTransferWithRecipient(
        transfers,
        recipient.address,
        true
      );`
$DIR/test/transferhelper.spec.ts:243:7-245:64: `await tempTransferHelper
        .connect(sender)
        .bulkTransfer(transfersWithRecipients, tempConduitKey);`
$DIR/test/transferhelper.spec.ts:244:9-244:25: `.connect(sender)`
$DIR/test/transferhelper.spec.ts:245:9-245:63: `.bulkTransfer(transfersWithRecipients, tempConduitKey)`
$DIR/test/transferhelper.spec.ts:291:29-291:66: `.max(1, randomInt(itemsToCreate - 2))`
$DIR/test/transferhelper.spec.ts:292:30-292:79: `.max(1, randomInt(itemsToCreate - numERC20s - 1))`
$DIR/test/transferhelper.spec.ts:293:31-293:78: `.max(1, itemsToCreate - numERC20s - numERC721s)`
$DIR/test/transferhelper.spec.ts:317:9-317:47: `erc20Contracts[i] = tempERC20Contract;`
$DIR/test/transferhelper.spec.ts:318:9-318:43: `erc20Transfers[i] = erc20Transfer;`
$DIR/test/transferhelper.spec.ts:334:9-334:49: `erc721Contracts[i] = tempERC721Contract;`
$DIR/test/transferhelper.spec.ts:335:9-335:45: `erc721Transfers[i] = erc721Transfer;`
$DIR/test/transferhelper.spec.ts:353:9-353:51: `erc1155Contracts[i] = tempERC1155Contract;`
$DIR/test/transferhelper.spec.ts:354:9-354:47: `erc1155Transfers[i] = erc1155Transfer;`
$DIR/test/transferhelper.spec.ts:365:7-369:9: `transfersWithRecipients[0] = createTransferWithRecipient(
        transfers,
        recipient.address,
        true
      );`
$DIR/test/transferhelper.spec.ts:386:50-388:8: `.getContractFactory(
        "ERC721ReceiverMock"
      )`
$DIR/test/transferhelper.spec.ts:389:59-392:8: `.deploy(
        Buffer.from("150b7a02", "hex"),
        0
      )`
$DIR/test/transferhelper.spec.ts:390:15-390:39: `.from("150b7a02", "hex")`
$DIR/test/transferhelper.spec.ts:410:9-410:49: `erc721Contracts[i] = tempERC721Contract;`
$DIR/test/transferhelper.spec.ts:411:9-411:45: `erc721Transfers[i] = erc721Transfer;`
$DIR/test/transferhelper.spec.ts:416:7-420:9: `transfersWithRecipients[0] = createTransferWithRecipient(
        erc721Transfers,
        erc721Recipient.address,
        true
      );`
$DIR/test/transferhelper.spec.ts:568:51-570:8: `.getContractFactory(
        "InvalidERC721Recipient"
      )`
$DIR/test/transferhelper.spec.ts:571:61-571:70: `.deploy()`
$DIR/test/transferhelper.spec.ts:647:11-647:27: `.connect(sender)`
$DIR/test/transferhelper.spec.ts:648:11-648:78: `.bulkTransfer(transfers, ethers.utils.formatBytes32String("0xabc"))`
$DIR/test/transferhelper.spec.ts:648:42-648:77: `.utils.formatBytes32String("0xabc")`
$DIR/test/transferhelper.spec.ts:659:53-661:8: `.getContractFactory(
        "ERC721ReceiverMock"
      )`
$DIR/test/transferhelper.spec.ts:662:65-665:8: `.deploy(
        Buffer.from("abcd0000", "hex"),
        1
      )`
$DIR/test/transferhelper.spec.ts:663:15-663:39: `.from("abcd0000", "hex")`
$DIR/test/transferhelper.spec.ts:723:53-725:8: `.getContractFactory(
        "ERC721ReceiverMock"
      )`
$DIR/test/transferhelper.spec.ts:726:65-729:8: `.deploy(
        Buffer.from("abcd0000", "hex"),
        1
      )`
$DIR/test/transferhelper.spec.ts:727:15-727:39: `.from("abcd0000", "hex")`
$DIR/test/transferhelper.spec.ts:877:25-877:39: `.toLowerCase()`
$DIR/test/transferhelper.spec.ts:886:7-886:77: `await tempERC1155Contract.connect(owner).mint(sender.address, 0, 100);`
$DIR/test/transferhelper.spec.ts:886:32-886:47: `.connect(owner)`
$DIR/test/transferhelper.spec.ts:886:47-886:76: `.mint(sender.address, 0, 100)`
$DIR/test/transferhelper.spec.ts:888:56-890:8: `.getContractFactory(
        "ConduitControllerMock"
      )`
$DIR/test/transferhelper.spec.ts:891:71-893:8: `.deploy(
        1 // ConduitMockRevertNoReason
      )`
$DIR/test/transferhelper.spec.ts:895:53-897:8: `.getContractFactory(
        "TransferHelper"
      )`
$DIR/test/transferhelper.spec.ts:898:65-900:8: `.deploy(
        mockConduitController.address
      )`
$DIR/test/transferhelper.spec.ts:901:59-901:68: `.slice(2)`
$DIR/test/transferhelper.spec.ts:904:7-906:55: `await mockConduitController
        .connect(owner)
        .createConduit(mockConduitKey, owner.address);`
$DIR/test/transferhelper.spec.ts:905:9-905:24: `.connect(owner)`
$DIR/test/transferhelper.spec.ts:906:9-906:54: `.createConduit(mockConduitKey, owner.address)`
$DIR/test/transferhelper.spec.ts:909:36-909:63: `.getConduit(mockConduitKey)`
$DIR/test/transferhelper.spec.ts:912:7-914:54: `await tempERC1155Contract
        .connect(sender)
        .setApprovalForAll(mockConduitAddress, true);`
$DIR/test/transferhelper.spec.ts:913:9-913:25: `.connect(sender)`
$DIR/test/transferhelper.spec.ts:914:9-914:53: `.setApprovalForAll(mockConduitAddress, true)`
$DIR/test/transferhelper.spec.ts:958:39-958:53: `.toLowerCase()`
$DIR/test/transferhelper.spec.ts:963:49-965:8: `.getContractFactory(
        "TestERC20Panic"
      )`
$DIR/test/transferhelper.spec.ts:966:57-966:66: `.deploy()`
$DIR/test/transferhelper.spec.ts:1019:7-1019:72: `await tempERC20Contract.connect(owner).mint(sender.address, 100);`
$DIR/test/transferhelper.spec.ts:1019:30-1019:45: `.connect(owner)`
$DIR/test/transferhelper.spec.ts:1019:45-1019:71: `.mint(sender.address, 100)`
$DIR/test/transferhelper.spec.ts:1021:56-1023:8: `.getContractFactory(
        "ConduitControllerMock"
      )`
$DIR/test/transferhelper.spec.ts:1024:71-1026:8: `.deploy(
        2 // ConduitMockInvalidMagic
      )`
$DIR/test/transferhelper.spec.ts:1028:53-1030:8: `.getContractFactory(
        "TransferHelper"
      )`
$DIR/test/transferhelper.spec.ts:1031:65-1033:8: `.deploy(
        mockConduitController.address
      )`
$DIR/test/transferhelper.spec.ts:1034:59-1034:68: `.slice(2)`
$DIR/test/transferhelper.spec.ts:1037:7-1039:55: `await mockConduitController
        .connect(owner)
        .createConduit(mockConduitKey, owner.address);`
$DIR/test/transferhelper.spec.ts:1038:9-1038:24: `.connect(owner)`
$DIR/test/transferhelper.spec.ts:1039:9-1039:54: `.createConduit(mockConduitKey, owner.address)`
$DIR/test/transferhelper.spec.ts:1042:36-1042:63: `.getConduit(mockConduitKey)`
$DIR/test/transferhelper.spec.ts:1045:7-1045:80: `await tempERC20Contract.connect(sender).approve(mockConduitAddress, 100);`
$DIR/test/transferhelper.spec.ts:1045:30-1045:46: `.connect(sender)`
$DIR/test/transferhelper.spec.ts:1045:46-1045:79: `.approve(mockConduitAddress, 100)`
$DIR/test/transferhelper.spec.ts:1074:33-1074:47: `.toLowerCase()`
$DIR/test/transferhelper.spec.ts:1081:7-1081:72: `await tempERC20Contract.connect(owner).mint(sender.address, 100);`
$DIR/test/transferhelper.spec.ts:1081:30-1081:45: `.connect(owner)`
$DIR/test/transferhelper.spec.ts:1081:45-1081:71: `.mint(sender.address, 100)`
$DIR/test/transferhelper.spec.ts:1083:56-1085:8: `.getContractFactory(
        "ConduitControllerMock"
      )`
$DIR/test/transferhelper.spec.ts:1086:71-1088:8: `.deploy(
        3 // ConduitMockRevertBytes
      )`
$DIR/test/transferhelper.spec.ts:1090:53-1092:8: `.getContractFactory(
        "TransferHelper"
      )`
$DIR/test/transferhelper.spec.ts:1093:65-1095:8: `.deploy(
        mockConduitController.address
      )`
$DIR/test/transferhelper.spec.ts:1096:59-1096:68: `.slice(2)`
$DIR/test/transferhelper.spec.ts:1099:7-1101:55: `await mockConduitController
        .connect(owner)
        .createConduit(mockConduitKey, owner.address);`
$DIR/test/transferhelper.spec.ts:1100:9-1100:24: `.connect(owner)`
$DIR/test/transferhelper.spec.ts:1101:9-1101:54: `.createConduit(mockConduitKey, owner.address)`
$DIR/test/transferhelper.spec.ts:1104:36-1104:63: `.getConduit(mockConduitKey)`
$DIR/test/transferhelper.spec.ts:1106:7-1106:80: `await tempERC20Contract.connect(sender).approve(mockConduitAddress, 100);`
$DIR/test/transferhelper.spec.ts:1106:30-1106:46: `.connect(sender)`
$DIR/test/transferhelper.spec.ts:1106:46-1106:79: `.approve(mockConduitAddress, 100)`
$DIR/test/transferhelper.spec.ts:1129:41-1129:67: `.utils.id("CustomError()")`
$DIR/test/transferhelper.spec.ts:1129:67-1129:80: `.slice(0, 10)`
$DIR/test/transferhelper.spec.ts:1142:25-1142:39: `.toLowerCase()`
$DIR/test/transferhelper.spec.ts:1202:29-1202:66: `.max(1, randomInt(itemsToCreate - 2))`
$DIR/test/transferhelper.spec.ts:1203:30-1203:79: `.max(1, randomInt(itemsToCreate - numERC20s - 1))`
$DIR/test/transferhelper.spec.ts:1204:31-1204:78: `.max(1, itemsToCreate - numERC20s - numERC721s)`
$DIR/test/transferhelper.spec.ts:1242:11-1242:49: `erc20Contracts[i] = tempERC20Contract;`
$DIR/test/transferhelper.spec.ts:1243:11-1243:45: `erc20Transfers[i] = erc20Transfer;`
$DIR/test/transferhelper.spec.ts:1259:11-1259:51: `erc721Contracts[i] = tempERC721Contract;`
$DIR/test/transferhelper.spec.ts:1260:11-1260:47: `erc721Transfers[i] = erc721Transfer;`
$DIR/test/transferhelper.spec.ts:1279:11-1279:53: `erc1155Contracts[i] = tempERC1155Contract;`
$DIR/test/transferhelper.spec.ts:1280:11-1280:49: `erc1155Transfers[i] = erc1155Transfer;`
$DIR/test/transferhelper.spec.ts:1289:9-1293:11: `allContracts.push(
          ...erc20Contracts,
          ...erc721Contracts,
          ...erc1155Contracts
        );`
$DIR/test/transferhelper.spec.ts:1289:21-1293:10: `.push(
          ...erc20Contracts,
          ...erc721Contracts,
          ...erc1155Contracts
        )`
$DIR/test/transferhelper.spec.ts:1295:9-1299:11: `transfersWithRecipients[j] = createTransferWithRecipient(
          transfers,
          transferRecipient,
          true
        );`
$DIR/test/transferhelper.spec.ts:1303:7-1305:64: `await tempTransferHelper
        .connect(sender)
        .bulkTransfer(transfersWithRecipients, tempConduitKey);`
$DIR/test/transferhelper.spec.ts:1304:9-1304:25: `.connect(sender)`
$DIR/test/transferhelper.spec.ts:1305:9-1305:63: `.bulkTransfer(transfersWithRecipients, tempConduitKey)`
$DIR/test/transferhelper.spec.ts:1351:11-1351:36: `contractsStartingIndex++;`
$DIR/test/transferhelper.spec.ts:1361:29-1361:66: `.max(1, randomInt(itemsToCreate - 2))`
$DIR/test/transferhelper.spec.ts:1362:30-1362:79: `.max(1, randomInt(itemsToCreate - numERC20s - 1))`
$DIR/test/transferhelper.spec.ts:1363:31-1363:78: `.max(1, itemsToCreate - numERC20s - numERC721s)`
$DIR/test/transferhelper.spec.ts:1401:11-1401:49: `erc20Contracts[i] = tempERC20Contract;`
$DIR/test/transferhelper.spec.ts:1402:11-1402:45: `erc20Transfers[i] = erc20Transfer;`
$DIR/test/transferhelper.spec.ts:1418:11-1418:51: `erc721Contracts[i] = tempERC721Contract;`
$DIR/test/transferhelper.spec.ts:1419:11-1419:47: `erc721Transfers[i] = erc721Transfer;`
$DIR/test/transferhelper.spec.ts:1438:11-1438:53: `erc1155Contracts[i] = tempERC1155Contract;`
$DIR/test/transferhelper.spec.ts:1439:11-1439:49: `erc1155Transfers[i] = erc1155Transfer;`
$DIR/test/transferhelper.spec.ts:1448:9-1452:11: `allContracts.push(
          ...erc20Contracts,
          ...erc721Contracts,
          ...erc1155Contracts
        );`
$DIR/test/transferhelper.spec.ts:1448:21-1452:10: `.push(
          ...erc20Contracts,
          ...erc721Contracts,
          ...erc1155Contracts
        )`
$DIR/test/transferhelper.spec.ts:1454:9-1458:11: `transfersWithRecipientsNoConduit[j] = createTransferWithRecipient(
          transfers,
          transferRecipient,
          true
        );`
$DIR/test/transferhelper.spec.ts:1476:50-1478:8: `.getContractFactory(
        "ERC721ReceiverMock"
      )`
$DIR/test/transferhelper.spec.ts:1479:62-1482:8: `.deploy(
        Buffer.from("150b7a02", "hex"),
        0
      )`
$DIR/test/transferhelper.spec.ts:1480:15-1480:39: `.from("150b7a02", "hex")`
$DIR/test/transferhelper.spec.ts:1484:62-1487:8: `.deploy(
        Buffer.from("150b7a02", "hex"),
        0
      )`
$DIR/test/transferhelper.spec.ts:1485:15-1485:39: `.from("150b7a02", "hex")`
$DIR/test/transferhelper.spec.ts:1489:64-1492:8: `.deploy(
        Buffer.from("150b7a02", "hex"),
        0
      )`
$DIR/test/transferhelper.spec.ts:1490:15-1490:39: `.from("150b7a02", "hex")`
$DIR/test/transferhelper.spec.ts:1494:63-1497:8: `.deploy(
        Buffer.from("150b7a02", "hex"),
        0
      )`
$DIR/test/transferhelper.spec.ts:1495:15-1495:39: `.from("150b7a02", "hex")`
$DIR/test/transferhelper.spec.ts:1499:63-1502:8: `.deploy(
        Buffer.from("150b7a02", "hex"),
        0
      )`
$DIR/test/transferhelper.spec.ts:1500:15-1500:39: `.from("150b7a02", "hex")`
$DIR/test/transferhelper.spec.ts:1535:11-1535:51: `erc721Contracts[j] = tempERC721Contract;`
$DIR/test/transferhelper.spec.ts:1536:11-1536:43: `erc721Items[j] = erc721Transfer;`
$DIR/test/transferhelper.spec.ts:1538:9-1542:11: `transfersWithRecipients[i] = createTransferWithRecipient(
          erc721Items,
          erc721Recipients[i].address,
          true
        );`
$DIR/test/transferhelper.spec.ts:1544:9-1544:47: `allContracts.push(...erc721Contracts);`
$DIR/test/transferhelper.spec.ts:1544:21-1544:46: `.push(...erc721Contracts)`
$DIR/test/transferhelper.spec.ts:1679:53-1681:8: `.getContractFactory(
        "ERC721ReceiverMock"
      )`
$DIR/test/transferhelper.spec.ts:1682:61-1685:8: `.deploy(
        "0x150b7a02", // Magic value
        0
      )`
$DIR/test/transferhelper.spec.ts:1706:9-1706:25: `.connect(sender)`
$DIR/test/transferhelper.spec.ts:1755:51-1757:8: `.getContractFactory(
        "InvalidERC721Recipient"
      )`
$DIR/test/transferhelper.spec.ts:1758:61-1758:70: `.deploy()`
$DIR/test/transferhelper.spec.ts:1759:64-1759:73: `.deploy()`
$DIR/test/transferhelper.spec.ts:1861:11-1861:27: `.connect(sender)`
$DIR/test/transferhelper.spec.ts:1862:11-1865:12: `.bulkTransfer(
            transferHelperItems,
            ethers.utils.formatBytes32String("0xabc")
          )`
$DIR/test/transferhelper.spec.ts:1864:19-1864:54: `.utils.formatBytes32String("0xabc")`
$DIR/test/transferhelper.spec.ts:1876:53-1878:8: `.getContractFactory(
        "ERC721ReceiverMock"
      )`
$DIR/test/transferhelper.spec.ts:1879:68-1882:8: `.deploy(
        Buffer.from("abcd0000", "hex"),
        1
      )`
$DIR/test/transferhelper.spec.ts:1880:15-1880:39: `.from("abcd0000", "hex")`
$DIR/test/transferhelper.spec.ts:1883:68-1886:8: `.deploy(
        Buffer.from("abcd6969", "hex"),
        1
      )`
$DIR/test/transferhelper.spec.ts:1884:15-1884:39: `.from("abcd6969", "hex")`
$DIR/test/transferhelper.spec.ts:1887:70-1890:8: `.deploy(
        Buffer.from("42069abc", "hex"),
        1
      )`
$DIR/test/transferhelper.spec.ts:1888:15-1888:39: `.from("42069abc", "hex")`
$DIR/test/transferhelper.spec.ts:1891:69-1894:8: `.deploy(
        Buffer.from("abc42069", "hex"),
        1
      )`
$DIR/test/transferhelper.spec.ts:1892:15-1892:39: `.from("abc42069", "hex")`
$DIR/test/transferhelper.spec.ts:2097:25-2097:39: `.toLowerCase()`
$DIR/test/transferhelper.spec.ts:2106:7-2106:77: `await tempERC1155Contract.connect(owner).mint(sender.address, 0, 100);`
$DIR/test/transferhelper.spec.ts:2106:32-2106:47: `.connect(owner)`
$DIR/test/transferhelper.spec.ts:2106:47-2106:76: `.mint(sender.address, 0, 100)`
$DIR/test/transferhelper.spec.ts:2108:56-2110:8: `.getContractFactory(
        "ConduitControllerMock"
      )`
$DIR/test/transferhelper.spec.ts:2111:71-2113:8: `.deploy(
        1 // ConduitMockRevertNoReason
      )`
$DIR/test/transferhelper.spec.ts:2115:53-2117:8: `.getContractFactory(
        "TransferHelper"
      )`
$DIR/test/transferhelper.spec.ts:2118:65-2120:8: `.deploy(
        mockConduitController.address
      )`
$DIR/test/transferhelper.spec.ts:2121:59-2121:68: `.slice(2)`
$DIR/test/transferhelper.spec.ts:2124:7-2126:55: `await mockConduitController
        .connect(owner)
        .createConduit(mockConduitKey, owner.address);`
$DIR/test/transferhelper.spec.ts:2125:9-2125:24: `.connect(owner)`
$DIR/test/transferhelper.spec.ts:2126:9-2126:54: `.createConduit(mockConduitKey, owner.address)`
$DIR/test/transferhelper.spec.ts:2129:36-2129:63: `.getConduit(mockConduitKey)`
$DIR/test/transferhelper.spec.ts:2132:7-2134:54: `await tempERC1155Contract
        .connect(sender)
        .setApprovalForAll(mockConduitAddress, true);`
$DIR/test/transferhelper.spec.ts:2133:9-2133:25: `.connect(sender)`
$DIR/test/transferhelper.spec.ts:2134:9-2134:53: `.setApprovalForAll(mockConduitAddress, true)`
$DIR/test/transferhelper.spec.ts:2208:39-2208:53: `.toLowerCase()`
$DIR/test/transferhelper.spec.ts:2213:49-2215:8: `.getContractFactory(
        "TestERC20Panic"
      )`
$DIR/test/transferhelper.spec.ts:2216:57-2216:66: `.deploy()`
$DIR/test/transferhelper.spec.ts:2288:7-2288:72: `await tempERC20Contract.connect(owner).mint(sender.address, 100);`
$DIR/test/transferhelper.spec.ts:2288:30-2288:45: `.connect(owner)`
$DIR/test/transferhelper.spec.ts:2288:45-2288:71: `.mint(sender.address, 100)`
$DIR/test/transferhelper.spec.ts:2290:56-2292:8: `.getContractFactory(
        "ConduitControllerMock"
      )`
$DIR/test/transferhelper.spec.ts:2293:71-2295:8: `.deploy(
        2 // ConduitMockInvalidMagic
      )`
$DIR/test/transferhelper.spec.ts:2297:53-2299:8: `.getContractFactory(
        "TransferHelper"
      )`
$DIR/test/transferhelper.spec.ts:2300:65-2302:8: `.deploy(
        mockConduitController.address
      )`
$DIR/test/transferhelper.spec.ts:2303:59-2303:68: `.slice(2)`
$DIR/test/transferhelper.spec.ts:2306:7-2308:55: `await mockConduitController
        .connect(owner)
        .createConduit(mockConduitKey, owner.address);`
$DIR/test/transferhelper.spec.ts:2307:9-2307:24: `.connect(owner)`
$DIR/test/transferhelper.spec.ts:2308:9-2308:54: `.createConduit(mockConduitKey, owner.address)`
$DIR/test/transferhelper.spec.ts:2311:36-2311:63: `.getConduit(mockConduitKey)`
$DIR/test/transferhelper.spec.ts:2314:7-2314:80: `await tempERC20Contract.connect(sender).approve(mockConduitAddress, 100);`
$DIR/test/transferhelper.spec.ts:2314:30-2314:46: `.connect(sender)`
$DIR/test/transferhelper.spec.ts:2314:46-2314:79: `.approve(mockConduitAddress, 100)`
$DIR/test/transferhelper.spec.ts:2361:33-2361:47: `.toLowerCase()`
$DIR/test/transferhelper.spec.ts:2368:7-2368:72: `await tempERC20Contract.connect(owner).mint(sender.address, 100);`
$DIR/test/transferhelper.spec.ts:2368:30-2368:45: `.connect(owner)`
$DIR/test/transferhelper.spec.ts:2368:45-2368:71: `.mint(sender.address, 100)`
$DIR/test/transferhelper.spec.ts:2370:56-2372:8: `.getContractFactory(
        "ConduitControllerMock"
      )`
$DIR/test/transferhelper.spec.ts:2373:71-2375:8: `.deploy(
        3 // ConduitMockRevertBytes
      )`
$DIR/test/transferhelper.spec.ts:2377:53-2379:8: `.getContractFactory(
        "TransferHelper"
      )`
$DIR/test/transferhelper.spec.ts:2380:65-2382:8: `.deploy(
        mockConduitController.address
      )`
$DIR/test/transferhelper.spec.ts:2383:59-2383:68: `.slice(2)`
$DIR/test/transferhelper.spec.ts:2386:7-2388:55: `await mockConduitController
        .connect(owner)
        .createConduit(mockConduitKey, owner.address);`
$DIR/test/transferhelper.spec.ts:2387:9-2387:24: `.connect(owner)`
$DIR/test/transferhelper.spec.ts:2388:9-2388:54: `.createConduit(mockConduitKey, owner.address)`
$DIR/test/transferhelper.spec.ts:2391:36-2391:63: `.getConduit(mockConduitKey)`
$DIR/test/transferhelper.spec.ts:2393:7-2393:80: `await tempERC20Contract.connect(sender).approve(mockConduitAddress, 100);`
$DIR/test/transferhelper.spec.ts:2393:30-2393:46: `.connect(sender)`
$DIR/test/transferhelper.spec.ts:2393:46-2393:79: `.approve(mockConduitAddress, 100)`
$DIR/test/transferhelper.spec.ts:2452:41-2452:67: `.utils.id("CustomError()")`
$DIR/test/transferhelper.spec.ts:2452:67-2452:80: `.slice(0, 10)`
$DIR/test/transferhelper.spec.ts:2465:25-2465:39: `.toLowerCase()`
$DIR/test/typehashdirectory.spec.ts:18:32-18:58: `.provider.getCode(address)`
$DIR/test/zone.spec.ts:112:42-115:6: `.getContractFactory(
      "PausableZoneController",
      owner
    )`
$DIR/test/zone.spec.ts:116:44-116:66: `.deploy(owner.address)`
$DIR/test/zone.spec.ts:141:9-141:24: `.connect(buyer)`
$DIR/test/zone.spec.ts:142:9-144:11: `.fulfillOrder(order, toKey(0), {
          value,
        })`
$DIR/test/zone.spec.ts:146:31-146:38: `.wait()`
$DIR/test/zone.spec.ts:160:48-163:6: `.getContractFactory(
      "PausableZoneController",
      owner
    )`
$DIR/test/zone.spec.ts:164:54-164:76: `.deploy(owner.address)`
$DIR/test/zone.spec.ts:196:9-196:24: `.connect(buyer)`
$DIR/test/zone.spec.ts:197:9-205:10: `.fulfillAdvancedOrder(
          order,
          criteriaResolvers,
          toKey(0),
          ethers.constants.AddressZero,
          {
            value,
          }
        )`
$DIR/test/zone.spec.ts:207:31-207:38: `.wait()`
$DIR/test/zone.spec.ts:227:48-230:6: `.getContractFactory(
      "PausableZoneController",
      owner
    )`
$DIR/test/zone.spec.ts:231:54-231:76: `.deploy(owner.address)`
$DIR/test/zone.spec.ts:256:9-256:24: `.connect(buyer)`
$DIR/test/zone.spec.ts:257:9-265:10: `.fulfillAdvancedOrder(
          order,
          [],
          toKey(0),
          ethers.constants.AddressZero,
          {
            value,
          }
        )`
$DIR/test/zone.spec.ts:267:31-267:38: `.wait()`
$DIR/test/zone.spec.ts:282:55-285:6: `.getContractFactory(
      "PausableZoneController",
      owner
    )`
$DIR/test/zone.spec.ts:286:71-288:6: `.deploy(
      owner.address
    )`
$DIR/test/zone.spec.ts:381:6-383:6: `.map(([offerArr, considerationArr]) =>
      toFulfillment(offerArr, considerationArr)
    )`
$DIR/test/zone.spec.ts:400:7-400:22: `.connect(owner)`
$DIR/test/zone.spec.ts:401:7-407:8: `.callStatic.executeMatchOrders(
        zoneAddr,
        marketplaceContract.address,
        [orderOne, orderTwo, orderThree],
        fulfillments,
        { value: 0 }
      )`
$DIR/test/zone.spec.ts:412:7-412:22: `.connect(owner)`
$DIR/test/zone.spec.ts:413:7-418:8: `.executeMatchOrders(
        zoneAddr,
        marketplaceContract.address,
        [orderOne, orderTwo, orderThree],
        fulfillments
      )`
$DIR/test/zone.spec.ts:436:55-439:6: `.getContractFactory(
      "PausableZoneController",
      owner
    )`
$DIR/test/zone.spec.ts:440:71-442:6: `.deploy(
      owner.address
    )`
$DIR/test/zone.spec.ts:535:6-537:6: `.map(([offerArr, considerationArr]) =>
      toFulfillment(offerArr, considerationArr)
    )`
$DIR/test/zone.spec.ts:555:7-555:22: `.connect(owner)`
$DIR/test/zone.spec.ts:556:7-563:8: `.callStatic.executeMatchAdvancedOrders(
        zoneAddr,
        marketplaceContract.address,
        [orderOne, orderTwo, orderThree],
        [],
        fulfillments,
        { value: 0 }
      )`
$DIR/test/zone.spec.ts:568:7-568:22: `.connect(owner)`
$DIR/test/zone.spec.ts:569:7-575:8: `.executeMatchAdvancedOrders(
        zoneAddr,
        marketplaceContract.address,
        [orderOne, orderTwo, orderThree],
        [],
        fulfillments
      )`
$DIR/test/zone.spec.ts:593:55-596:6: `.getContractFactory(
      "PausableZoneController",
      owner
    )`
$DIR/test/zone.spec.ts:598:71-600:6: `.deploy(
      owner.address
    )`
$DIR/test/zone.spec.ts:613:55-616:6: `.getContractFactory(
      "PausableZoneController",
      owner
    )`
$DIR/test/zone.spec.ts:617:71-619:6: `.deploy(
      owner.address
    )`
$DIR/test/zone.spec.ts:624:38-624:80: `.getContractFactory("PausableZone", owner)`
$DIR/test/zone.spec.ts:627:36-627:53: `.attach(zoneAddr)`
$DIR/test/zone.spec.ts:648:5-648:77: `await pausableZoneController.connect(owner).assignPauser(buyer.address);`
$DIR/test/zone.spec.ts:648:33-648:48: `.connect(owner)`
$DIR/test/zone.spec.ts:648:48-648:76: `.assignPauser(buyer.address)`
$DIR/test/zone.spec.ts:654:44-654:59: `.connect(buyer)`
$DIR/test/zone.spec.ts:654:59-654:75: `.pause(zoneAddr)`
$DIR/test/zone.spec.ts:664:55-667:6: `.getContractFactory(
      "PausableZoneController",
      owner
    )`
$DIR/test/zone.spec.ts:668:71-670:6: `.deploy(
      owner.address
    )`
$DIR/test/zone.spec.ts:675:5-675:51: `await pausableZoneController.createZone(salt);`
$DIR/test/zone.spec.ts:675:33-675:50: `.createZone(salt)`
$DIR/test/zone.spec.ts:687:55-690:6: `.getContractFactory(
      "PausableZoneController",
      owner
    )`
$DIR/test/zone.spec.ts:691:71-693:6: `.deploy(
      owner.address
    )`
$DIR/test/zone.spec.ts:718:44-718:60: `.pause(zoneAddr)`
$DIR/test/zone.spec.ts:748:55-751:6: `.getContractFactory(
      "PausableZoneController",
      owner
    )`
$DIR/test/zone.spec.ts:752:71-754:6: `.deploy(
      owner.address
    )`
$DIR/test/zone.spec.ts:759:40-759:55: `.connect(buyer)`
$DIR/test/zone.spec.ts:759:55-759:71: `.pause(zoneAddr)`
$DIR/test/zone.spec.ts:764:55-767:6: `.getContractFactory(
      "PausableZoneController",
      owner
    )`
$DIR/test/zone.spec.ts:768:71-770:6: `.deploy(
      owner.address
    )`
$DIR/test/zone.spec.ts:806:55-809:6: `.getContractFactory(
      "PausableZoneController",
      owner
    )`
$DIR/test/zone.spec.ts:810:71-812:6: `.deploy(
      owner.address
    )`
$DIR/test/zone.spec.ts:818:38-818:80: `.getContractFactory("PausableZone", owner)`
$DIR/test/zone.spec.ts:821:36-821:53: `.attach(zoneAddr)`
$DIR/test/zone.spec.ts:848:5-850:49: `await pausableZoneController
      .connect(owner)
      .assignOperator(zoneAddr, seller.address);`
$DIR/test/zone.spec.ts:849:7-849:22: `.connect(owner)`
$DIR/test/zone.spec.ts:850:7-850:48: `.assignOperator(zoneAddr, seller.address)`
$DIR/test/zone.spec.ts:853:5-855:69: `await zone
      .connect(seller)
      .cancelOrders(marketplaceContract.address, [orderComponents]);`
$DIR/test/zone.spec.ts:854:7-854:23: `.connect(seller)`
$DIR/test/zone.spec.ts:855:7-855:68: `.cancelOrders(marketplaceContract.address, [orderComponents])`
$DIR/test/zone.spec.ts:869:55-872:6: `.getContractFactory(
      "PausableZoneController",
      owner
    )`
$DIR/test/zone.spec.ts:873:71-875:6: `.deploy(
      owner.address
    )`
$DIR/test/zone.spec.ts:881:38-881:80: `.getContractFactory("PausableZone", owner)`
$DIR/test/zone.spec.ts:884:36-884:53: `.attach(zoneAddr)`
$DIR/test/zone.spec.ts:894:22-894:38: `.connect(seller)`
$DIR/test/zone.spec.ts:894:38-894:69: `.assignOperator(seller.address)`
$DIR/test/zone.spec.ts:899:55-902:6: `.getContractFactory(
      "PausableZoneController",
      owner
    )`
$DIR/test/zone.spec.ts:903:71-905:6: `.deploy(
      owner.address
    )`
$DIR/test/zone.spec.ts:907:5-907:46: `await createZone(pausableZoneController);`
$DIR/test/zone.spec.ts:926:37-926:52: `.connect(buyer)`
$DIR/test/zone.spec.ts:926:52-926:78: `.cancel([orderComponents])`
$DIR/test/zone.spec.ts:931:55-934:6: `.getContractFactory(
      "PausableZoneController",
      owner
    )`
$DIR/test/zone.spec.ts:935:71-937:6: `.deploy(
      owner.address
    )`
$DIR/test/zone.spec.ts:961:9-961:24: `.connect(buyer)`
$DIR/test/zone.spec.ts:962:9-962:80: `.cancelOrders(zoneAddr, marketplaceContract.address, [orderComponents])`
$DIR/test/zone.spec.ts:967:55-970:6: `.getContractFactory(
      "PausableZoneController",
      owner
    )`
$DIR/test/zone.spec.ts:971:71-973:6: `.deploy(
      owner.address
    )`
$DIR/test/zone.spec.ts:975:5-975:46: `await createZone(pausableZoneController);`
$DIR/test/zone.spec.ts:1000:5-1002:41: `await pausableZoneController
      .connect(owner)
      .transferOwnership(buyer.address);`
$DIR/test/zone.spec.ts:1001:7-1001:22: `.connect(owner)`
$DIR/test/zone.spec.ts:1002:7-1002:40: `.transferOwnership(buyer.address)`
$DIR/test/zone.spec.ts:1009:5-1009:75: `await pausableZoneController.connect(owner).cancelOwnershipTransfer();`
$DIR/test/zone.spec.ts:1009:33-1009:48: `.connect(owner)`
$DIR/test/zone.spec.ts:1009:48-1009:74: `.cancelOwnershipTransfer()`
$DIR/test/zone.spec.ts:1010:5-1012:41: `await pausableZoneController
      .connect(owner)
      .transferOwnership(buyer.address);`
$DIR/test/zone.spec.ts:1011:7-1011:22: `.connect(owner)`
$DIR/test/zone.spec.ts:1012:7-1012:40: `.transferOwnership(buyer.address)`
$DIR/test/zone.spec.ts:1013:5-1013:67: `await pausableZoneController.connect(buyer).acceptOwnership();`
$DIR/test/zone.spec.ts:1013:33-1013:48: `.connect(buyer)`
$DIR/test/zone.spec.ts:1013:48-1013:66: `.acceptOwnership()`
$DIR/test/zone.spec.ts:1086:19-1089:8: `.getContractFactory(
        "TestTransferValidationZoneOfferer",
        owner
      )`
$DIR/test/zone.spec.ts:1091:64-1093:6: `.deploy(
      ethers.constants.AddressZero
    )`
$DIR/test/zone.spec.ts:1110:9-1110:24: `.connect(buyer)`
$DIR/test/zone.spec.ts:1111:9-1113:11: `.fulfillOrder(order, toKey(0), {
          value,
        })`
$DIR/test/zone.spec.ts:1115:31-1115:38: `.wait()`
$DIR/test/zone.spec.ts:1146:19-1149:8: `.getContractFactory(
        "TestTransferValidationZoneOfferer",
        owner
      )`
$DIR/test/zone.spec.ts:1151:64-1153:6: `.deploy(
      ethers.constants.AddressZero
    )`
$DIR/test/zone.spec.ts:1166:9-1166:24: `.connect(buyer)`
$DIR/test/zone.spec.ts:1167:9-1175:10: `.fulfillAdvancedOrder(
          order,
          criteriaResolvers,
          toKey(0),
          ethers.constants.AddressZero,
          {
            value,
          }
        )`
$DIR/test/zone.spec.ts:1177:31-1177:38: `.wait()`
$DIR/test/zone.spec.ts:1208:19-1211:8: `.getContractFactory(
        "TestTransferValidationZoneOfferer",
        owner
      )`
$DIR/test/zone.spec.ts:1213:64-1215:6: `.deploy(
      ethers.constants.AddressZero
    )`
$DIR/test/zone.spec.ts:1227:9-1227:24: `.connect(buyer)`
$DIR/test/zone.spec.ts:1228:9-1236:10: `.fulfillAdvancedOrder(
          order,
          [],
          toKey(0),
          ethers.constants.AddressZero,
          {
            value,
          }
        )`
$DIR/test/zone.spec.ts:1238:31-1238:38: `.wait()`
$DIR/test/zone.spec.ts:1261:49-1261:56: `.div(2)`
$DIR/test/zone.spec.ts:1261:64-1261:71: `.div(2)`
$DIR/test/zone.spec.ts:1272:19-1275:8: `.getContractFactory(
        "TestTransferValidationZoneOfferer",
        owner
      )`
$DIR/test/zone.spec.ts:1278:49-1280:8: `.deploy(
        ethers.constants.AddressZero
      )`
$DIR/test/zone.spec.ts:1313:5-1316:7: `orderOne.extraData = ethers.utils.defaultAbiCoder.encode(
      ["bytes32[]"],
      [[orderHashOne, orderHashTwo]]
    );`
$DIR/test/zone.spec.ts:1313:32-1316:6: `.utils.defaultAbiCoder.encode(
      ["bytes32[]"],
      [[orderHashOne, orderHashTwo]]
    )`
$DIR/test/zone.spec.ts:1340:6-1340:35: `.map(toFulfillmentComponents)`
$DIR/test/zone.spec.ts:1362:7-1405:9: `await withBalanceChecks(
        [orderOne, orderTwo],
        0,
        undefined,
        async () => {
          const tx = marketplaceContract
            .connect(buyer)
            .fulfillAvailableAdvancedOrders(
              [orderOne, orderTwo],
              [],
              offerComponents,
              considerationComponents,
              toKey(0),
              ethers.constants.AddressZero,
              100,
              {
                value: value.mul(2),
              }
            );
          const receipt = await (await tx).wait();
          await checkExpectedEvents(
            tx,
            receipt,
            [
              {
                order: orderOne,
                orderHash: orderHashOne,
                fulfiller: buyer.address,
              },
              {
                order: orderTwo,
                orderHash: orderHashTwo,
                fulfiller: buyer.address,
              },
            ],
            [],
            [],
            false,
            2
          );
          return receipt;
        },
        2
      );`
$DIR/test/zone.spec.ts:1368:13-1368:28: `.connect(buyer)`
$DIR/test/zone.spec.ts:1369:13-1380:14: `.fulfillAvailableAdvancedOrders(
              [orderOne, orderTwo],
              [],
              offerComponents,
              considerationComponents,
              toKey(0),
              ethers.constants.AddressZero,
              100,
              {
                value: value.mul(2),
              }
            )`
$DIR/test/zone.spec.ts:1378:29-1378:36: `.mul(2)`
$DIR/test/zone.spec.ts:1381:43-1381:50: `.wait()`
