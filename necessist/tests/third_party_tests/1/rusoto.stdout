Warning: Found multiple functions with the following names in `$DIR/mock/src/lib.rs`: {
    "dispatch",
}
Silence this warning with: --allow local-function-ambiguous
Warning: Found multiple functions with the following names in `$DIR/rusoto/core/src/client.rs`: {
    "sign_and_dispatch",
}
Warning: Found multiple functions with the following names in `$DIR/rusoto/core/src/param.rs`: {
    "to_param",
}
Warning: Found multiple functions with the following names in `$DIR/rusoto/core/src/serialization.rs`: {
    "serialize_blob",
    "serialize_blob_list",
}
Warning: Found multiple functions with the following names in `$DIR/rusoto/credential/src/lib.rs`: {
    "credentials",
}
Warning: Found multiple functions with the following names in `$DIR/rusoto/services/acm/src/generated.rs`: {
    "from_response",
}
Warning: Found multiple functions with the following names in `$DIR/rusoto/services/acm-pca/src/generated.rs`: {
    "from_response",
}
Warning: Found multiple functions with the following names in `$DIR/rusoto/services/alexaforbusiness/src/generated.rs`: {
    "from_response",
}
Warning: Found multiple functions with the following names in `$DIR/rusoto/services/application-autoscaling/src/generated.rs`: {
    "from_response",
}
Warning: Found multiple functions with the following names in `$DIR/rusoto/services/application-insights/src/generated.rs`: {
    "from_response",
}
Warning: Found multiple functions with the following names in `$DIR/rusoto/services/appstream/src/generated.rs`: {
    "from_response",
}
Warning: Found multiple functions with the following names in `$DIR/rusoto/services/athena/src/generated.rs`: {
    "from_response",
}
Warning: Found multiple functions with the following names in `$DIR/rusoto/services/autoscaling/src/generated.rs`: {
    "from_response",
}
Warning: Found multiple functions with the following names in `$DIR/rusoto/services/autoscaling-plans/src/generated.rs`: {
    "from_response",
}
Warning: Found multiple functions with the following names in `$DIR/rusoto/services/budgets/src/generated.rs`: {
    "from_response",
}
Warning: Found multiple functions with the following names in `$DIR/rusoto/services/ce/src/generated.rs`: {
    "from_response",
}
Warning: Found multiple functions with the following names in `$DIR/rusoto/services/cloud9/src/generated.rs`: {
    "from_response",
}
Warning: Found multiple functions with the following names in `$DIR/rusoto/services/cloudformation/src/generated.rs`: {
    "from_response",
}
Warning: Found multiple functions with the following names in `$DIR/rusoto/services/cloudfront/src/generated.rs`: {
    "from_response",
}
Warning: Found multiple functions with the following names in `$DIR/rusoto/services/cloudhsm/src/generated.rs`: {
    "from_response",
}
Warning: Found multiple functions with the following names in `$DIR/rusoto/services/cloudhsmv2/src/generated.rs`: {
    "from_response",
}
Warning: Found multiple functions with the following names in `$DIR/rusoto/services/cloudsearch/src/generated.rs`: {
    "from_response",
}
Warning: Found multiple functions with the following names in `$DIR/rusoto/services/cloudtrail/src/generated.rs`: {
    "from_response",
}
Warning: Found multiple functions with the following names in `$DIR/rusoto/services/cloudwatch/src/generated.rs`: {
    "from_response",
}
Warning: Found multiple functions with the following names in `$DIR/rusoto/services/codebuild/src/generated.rs`: {
    "from_response",
}
Warning: Found multiple functions with the following names in `$DIR/rusoto/services/codecommit/src/generated.rs`: {
    "from_response",
}
Warning: Found multiple functions with the following names in `$DIR/rusoto/services/codedeploy/src/generated.rs`: {
    "from_response",
}
Warning: Found multiple functions with the following names in `$DIR/rusoto/services/codepipeline/src/generated.rs`: {
    "from_response",
}
Warning: Found multiple functions with the following names in `$DIR/rusoto/services/codestar/src/generated.rs`: {
    "from_response",
}
Warning: Found multiple functions with the following names in `$DIR/rusoto/services/codestar-connections/src/generated.rs`: {
    "from_response",
}
Warning: Found multiple functions with the following names in `$DIR/rusoto/services/cognito-identity/src/generated.rs`: {
    "from_response",
}
Warning: Found multiple functions with the following names in `$DIR/rusoto/services/cognito-idp/src/generated.rs`: {
    "from_response",
}
Warning: Found multiple functions with the following names in `$DIR/rusoto/services/comprehend/src/generated.rs`: {
    "from_response",
}
Warning: Found multiple functions with the following names in `$DIR/rusoto/services/comprehendmedical/src/generated.rs`: {
    "from_response",
}
Warning: Found multiple functions with the following names in `$DIR/rusoto/services/compute-optimizer/src/generated.rs`: {
    "from_response",
}
Warning: Found multiple functions with the following names in `$DIR/rusoto/services/config/src/generated.rs`: {
    "from_response",
}
Warning: Found multiple functions with the following names in `$DIR/rusoto/services/cur/src/generated.rs`: {
    "from_response",
}
Warning: Found multiple functions with the following names in `$DIR/rusoto/services/datapipeline/src/generated.rs`: {
    "from_response",
}
Warning: Found multiple functions with the following names in `$DIR/rusoto/services/datasync/src/generated.rs`: {
    "from_response",
}
Warning: Found multiple functions with the following names in `$DIR/rusoto/services/dax/src/generated.rs`: {
    "from_response",
}
Warning: Found multiple functions with the following names in `$DIR/rusoto/services/devicefarm/src/generated.rs`: {
    "from_response",
}
Warning: Found multiple functions with the following names in `$DIR/rusoto/services/directconnect/src/generated.rs`: {
    "from_response",
}
Warning: Found multiple functions with the following names in `$DIR/rusoto/services/discovery/src/generated.rs`: {
    "from_response",
}
Warning: Found multiple functions with the following names in `$DIR/rusoto/services/dms/src/generated.rs`: {
    "from_response",
}
Warning: Found multiple functions with the following names in `$DIR/rusoto/services/docdb/src/generated.rs`: {
    "from_response",
}
Warning: Found multiple functions with the following names in `$DIR/rusoto/services/ds/src/generated.rs`: {
    "from_response",
}
Warning: Found multiple functions with the following names in `$DIR/rusoto/services/dynamodb/src/generated.rs`: {
    "from_response",
}
Warning: Found multiple functions with the following names in `$DIR/rusoto/services/dynamodbstreams/src/generated.rs`: {
    "from_response",
}
Warning: Found multiple functions with the following names in `$DIR/rusoto/services/ec2/src/generated.rs`: {
    "from_response",
}
Warning: Found multiple functions with the following names in `$DIR/rusoto/services/ec2-instance-connect/src/generated.rs`: {
    "from_response",
}
Warning: Found multiple functions with the following names in `$DIR/rusoto/services/ecr/src/generated.rs`: {
    "from_response",
}
Warning: Found multiple functions with the following names in `$DIR/rusoto/services/ecs/src/generated.rs`: {
    "from_response",
}
Warning: Found multiple functions with the following names in `$DIR/rusoto/services/elasticache/src/generated.rs`: {
    "from_response",
}
Warning: Found multiple functions with the following names in `$DIR/rusoto/services/elasticbeanstalk/src/generated.rs`: {
    "from_response",
}
Warning: Found multiple functions with the following names in `$DIR/rusoto/services/elb/src/generated.rs`: {
    "from_response",
}
Warning: Found multiple functions with the following names in `$DIR/rusoto/services/elbv2/src/generated.rs`: {
    "from_response",
}
Warning: Found multiple functions with the following names in `$DIR/rusoto/services/emr/src/generated.rs`: {
    "from_response",
}
Warning: Found multiple functions with the following names in `$DIR/rusoto/services/events/src/generated.rs`: {
    "from_response",
}
Warning: Found multiple functions with the following names in `$DIR/rusoto/services/firehose/src/generated.rs`: {
    "from_response",
}
Warning: Found multiple functions with the following names in `$DIR/rusoto/services/fms/src/generated.rs`: {
    "from_response",
}
Warning: Found multiple functions with the following names in `$DIR/rusoto/services/forecast/src/generated.rs`: {
    "from_response",
}
Warning: Found multiple functions with the following names in `$DIR/rusoto/services/frauddetector/src/generated.rs`: {
    "from_response",
}
Warning: Found multiple functions with the following names in `$DIR/rusoto/services/fsx/src/generated.rs`: {
    "from_response",
}
Warning: Found multiple functions with the following names in `$DIR/rusoto/services/gamelift/src/generated.rs`: {
    "from_response",
}
Warning: Found multiple functions with the following names in `$DIR/rusoto/services/globalaccelerator/src/generated.rs`: {
    "from_response",
}
Warning: Found multiple functions with the following names in `$DIR/rusoto/services/glue/src/generated.rs`: {
    "from_response",
}
Warning: Found multiple functions with the following names in `$DIR/rusoto/services/health/src/generated.rs`: {
    "from_response",
}
Warning: Found multiple functions with the following names in `$DIR/rusoto/services/iam/src/generated.rs`: {
    "from_response",
}
Warning: Found multiple functions with the following names in `$DIR/rusoto/services/importexport/src/generated.rs`: {
    "from_response",
}
Warning: Found multiple functions with the following names in `$DIR/rusoto/services/inspector/src/generated.rs`: {
    "from_response",
}
Warning: Found multiple functions with the following names in `$DIR/rusoto/services/iotsecuretunneling/src/generated.rs`: {
    "from_response",
}
Warning: Found multiple functions with the following names in `$DIR/rusoto/services/iotthingsgraph/src/generated.rs`: {
    "from_response",
}
Warning: Found multiple functions with the following names in `$DIR/rusoto/services/kendra/src/generated.rs`: {
    "from_response",
}
Warning: Found multiple functions with the following names in `$DIR/rusoto/services/kinesis/src/generated.rs`: {
    "from_response",
}
Warning: Found multiple functions with the following names in `$DIR/rusoto/services/kinesisanalytics/src/generated.rs`: {
    "from_response",
}
Warning: Found multiple functions with the following names in `$DIR/rusoto/services/kinesisanalyticsv2/src/generated.rs`: {
    "from_response",
}
Warning: Found multiple functions with the following names in `$DIR/rusoto/services/kms/src/generated.rs`: {
    "from_response",
}
Warning: Found multiple functions with the following names in `$DIR/rusoto/services/lakeformation/src/generated.rs`: {
    "from_response",
}
Warning: Found multiple functions with the following names in `$DIR/rusoto/services/license-manager/src/generated.rs`: {
    "from_response",
}
Warning: Found multiple functions with the following names in `$DIR/rusoto/services/lightsail/src/generated.rs`: {
    "from_response",
}
Warning: Found multiple functions with the following names in `$DIR/rusoto/services/logs/src/generated.rs`: {
    "from_response",
}
Warning: Found multiple functions with the following names in `$DIR/rusoto/services/machinelearning/src/generated.rs`: {
    "from_response",
}
Warning: Found multiple functions with the following names in `$DIR/rusoto/services/marketplacecommerceanalytics/src/generated.rs`: {
    "from_response",
}
Warning: Found multiple functions with the following names in `$DIR/rusoto/services/mediastore/src/generated.rs`: {
    "from_response",
}
Warning: Found multiple functions with the following names in `$DIR/rusoto/services/meteringmarketplace/src/generated.rs`: {
    "from_response",
}
Warning: Found multiple functions with the following names in `$DIR/rusoto/services/mgh/src/generated.rs`: {
    "from_response",
}
Warning: Found multiple functions with the following names in `$DIR/rusoto/services/migrationhub-config/src/generated.rs`: {
    "from_response",
}
Warning: Found multiple functions with the following names in `$DIR/rusoto/services/mturk/src/generated.rs`: {
    "from_response",
}
Warning: Found multiple functions with the following names in `$DIR/rusoto/services/neptune/src/generated.rs`: {
    "from_response",
}
Warning: Found multiple functions with the following names in `$DIR/rusoto/services/opsworks/src/generated.rs`: {
    "from_response",
}
Warning: Found multiple functions with the following names in `$DIR/rusoto/services/opsworkscm/src/generated.rs`: {
    "from_response",
}
Warning: Found multiple functions with the following names in `$DIR/rusoto/services/organizations/src/generated.rs`: {
    "from_response",
}
Warning: Found multiple functions with the following names in `$DIR/rusoto/services/personalize/src/generated.rs`: {
    "from_response",
}
Warning: Found multiple functions with the following names in `$DIR/rusoto/services/pi/src/generated.rs`: {
    "from_response",
}
Warning: Found multiple functions with the following names in `$DIR/rusoto/services/pricing/src/generated.rs`: {
    "from_response",
}
Warning: Found multiple functions with the following names in `$DIR/rusoto/services/rds/src/generated.rs`: {
    "from_response",
}
Warning: Found multiple functions with the following names in `$DIR/rusoto/services/redshift/src/generated.rs`: {
    "from_response",
}
Warning: Found multiple functions with the following names in `$DIR/rusoto/services/rekognition/src/generated.rs`: {
    "from_response",
}
Warning: Found multiple functions with the following names in `$DIR/rusoto/services/resourcegroupstaggingapi/src/generated.rs`: {
    "from_response",
}
Warning: Found multiple functions with the following names in `$DIR/rusoto/services/route53/src/generated.rs`: {
    "from_response",
}
Warning: Found multiple functions with the following names in `$DIR/rusoto/services/route53domains/src/generated.rs`: {
    "from_response",
}
Warning: Found multiple functions with the following names in `$DIR/rusoto/services/route53resolver/src/generated.rs`: {
    "from_response",
}
Warning: Found multiple functions with the following names in `$DIR/rusoto/services/s3/src/generated.rs`: {
    "from_response",
}
Warning: Found multiple functions with the following names in `$DIR/rusoto/services/sagemaker/src/generated.rs`: {
    "from_response",
}
Warning: Found multiple functions with the following names in `$DIR/rusoto/services/sdb/src/generated.rs`: {
    "from_response",
}
Warning: Found multiple functions with the following names in `$DIR/rusoto/services/secretsmanager/src/generated.rs`: {
    "from_response",
}
Warning: Found multiple functions with the following names in `$DIR/rusoto/services/service-quotas/src/generated.rs`: {
    "from_response",
}
Warning: Found multiple functions with the following names in `$DIR/rusoto/services/servicecatalog/src/generated.rs`: {
    "from_response",
}
Warning: Found multiple functions with the following names in `$DIR/rusoto/services/servicediscovery/src/generated.rs`: {
    "from_response",
}
Warning: Found multiple functions with the following names in `$DIR/rusoto/services/ses/src/generated.rs`: {
    "from_response",
}
Warning: Found multiple functions with the following names in `$DIR/rusoto/services/shield/src/generated.rs`: {
    "from_response",
}
Warning: Found multiple functions with the following names in `$DIR/rusoto/services/sms/src/generated.rs`: {
    "from_response",
}
Warning: Found multiple functions with the following names in `$DIR/rusoto/services/snowball/src/generated.rs`: {
    "from_response",
}
Warning: Found multiple functions with the following names in `$DIR/rusoto/services/sns/src/generated.rs`: {
    "from_response",
}
Warning: Found multiple functions with the following names in `$DIR/rusoto/services/sqs/src/generated.rs`: {
    "from_response",
}
Warning: Found multiple functions with the following names in `$DIR/rusoto/services/ssm/src/generated.rs`: {
    "from_response",
}
Warning: Found multiple functions with the following names in `$DIR/rusoto/services/stepfunctions/src/generated.rs`: {
    "from_response",
}
Warning: Found multiple functions with the following names in `$DIR/rusoto/services/storagegateway/src/generated.rs`: {
    "from_response",
}
Warning: Found multiple functions with the following names in `$DIR/rusoto/services/sts/src/custom/credential.rs`: {
    "assume_role",
    "assume_role_with_web_identity",
    "get_session_token",
}
Warning: Found multiple functions with the following names in `$DIR/rusoto/services/sts/src/generated.rs`: {
    "from_response",
}
Warning: Found multiple functions with the following names in `$DIR/rusoto/services/support/src/generated.rs`: {
    "from_response",
}
Warning: Found multiple functions with the following names in `$DIR/rusoto/services/swf/src/generated.rs`: {
    "from_response",
}
Warning: Found multiple functions with the following names in `$DIR/rusoto/services/textract/src/generated.rs`: {
    "from_response",
}
Warning: Found multiple functions with the following names in `$DIR/rusoto/services/transcribe/src/generated.rs`: {
    "from_response",
}
Warning: Found multiple functions with the following names in `$DIR/rusoto/services/transfer/src/generated.rs`: {
    "from_response",
}
Warning: Found multiple functions with the following names in `$DIR/rusoto/services/translate/src/generated.rs`: {
    "from_response",
}
Warning: Found multiple functions with the following names in `$DIR/rusoto/services/waf/src/generated.rs`: {
    "from_response",
}
Warning: Found multiple functions with the following names in `$DIR/rusoto/services/waf-regional/src/generated.rs`: {
    "from_response",
}
Warning: Found multiple functions with the following names in `$DIR/rusoto/services/workmail/src/generated.rs`: {
    "from_response",
}
Warning: Found multiple functions with the following names in `$DIR/rusoto/services/workspaces/src/generated.rs`: {
    "from_response",
}
Warning: Found multiple functions with the following names in `$DIR/rusoto/signature/src/signature.rs`: {
    "canonical_uri",
}
{"should_list_certificates"}
$DIR/integration_tests/tests/acm.rs: `.list_certificates(request)`
{"should_list_certificate_authoritiess"}
$DIR/integration_tests/tests/acmpca.rs: `.list_certificate_authorities(request)`
{"should_list_skills"}
$DIR/integration_tests/tests/alexaforbusiness.rs: `.list_skills(request)`
{"should_work"}
$DIR/integration_tests/tests/amplify.rs: `.list_apps(Default::default())`
{"should_get_rest_apis"}
$DIR/integration_tests/tests/apigateway.rs: `.get_rest_apis(request)`
{"should_work"}
$DIR/integration_tests/tests/apigatewaymanagementapi.rs: `.post_to_connection(PostToConnectionRequest {
            connection_id: "bogus".into(),
            ..PostToConnectionRequest::default()
        })`
$DIR/integration_tests/tests/apigatewaymanagementapi.rs: `.into()`
{"should_work"}
$DIR/integration_tests/tests/apigatewayv2.rs: `.get_apis(Default::default())`
{"should_describe_scaling_policies"}
$DIR/integration_tests/tests/application-autocaling.rs: `.describe_scaling_policies(request)`
{"main"}
$DIR/integration_tests/tests/appmesh.rs: `.list_meshes(ListMeshesInput::default())`
{"should_describe_fleets"}
$DIR/integration_tests/tests/appstream.rs: `.describe_fleets(request)`
{"should_list_graphql_apis"}
$DIR/integration_tests/tests/appsync.rs: `.list_graphql_apis(request)`
{"should_list_named_queries"}
$DIR/integration_tests/tests/athena.rs: `.list_named_queries(request)`
{"should_describe_scaling_plans"}
$DIR/integration_tests/tests/autoscaling-plans.rs: `.describe_scaling_plans(request)`
{"should_describe_auto_scaling_groups"}
$DIR/integration_tests/tests/autoscaling.rs: `.describe_auto_scaling_groups(request)`
{"should_get_rest_apis"}
$DIR/integration_tests/tests/batch.rs: `.describe_job_definitions(request)`
{"should_describe_budgets"}
$DIR/integration_tests/tests/budgets.rs: `.describe_budgets(request)`
{"should_list_environments"}
$DIR/integration_tests/tests/chime.rs: `.list_accounts(request)`
{"should_list_environments"}
$DIR/integration_tests/tests/cloud9.rs: `.list_environments(request)`
{"should_list_directories"}
$DIR/integration_tests/tests/clouddirectory.rs: `.list_directories(request)`
{"should_list_stacks"}
$DIR/integration_tests/tests/cloudformation.rs: `.list_stacks(request)`
{"should_list_stacks_with_status_filter"}
$DIR/integration_tests/tests/cloudformation.rs: `.list_stacks(request)`
{"should_list_distributions"}
$DIR/integration_tests/tests/cloudfront.rs: `.list_distributions(request)`
{"should_list_hapgs"}
$DIR/integration_tests/tests/cloudhsm.rs: `.list_hapgs(request)`
$DIR/integration_tests/tests/cloudhsm.rs: `.contains("This service is unavailable.")`
{"should_list_hsms"}
$DIR/integration_tests/tests/cloudhsm.rs: `.list_hsms(request)`
$DIR/integration_tests/tests/cloudhsm.rs: `.contains("This service is unavailable.")`
{"should_list_luna_clients"}
$DIR/integration_tests/tests/cloudhsm.rs: `.list_luna_clients(request)`
$DIR/integration_tests/tests/cloudhsm.rs: `.contains("This service is unavailable.")`
{"should_describe_clusters"}
$DIR/integration_tests/tests/cloudhsmv2.rs: `.describe_clusters(request)`
{"should_describe_domains"}
$DIR/integration_tests/tests/cloudsearch.rs: `.describe_domains(request)`
{"should_describe_trails"}
$DIR/integration_tests/tests/cloudtrail.rs: `.describe_trails(request)`
{"should_put_metric_data"}
$DIR/integration_tests/tests/cloudwatch.rs: `.put_metric_data(request)`
{"should_list_projects"}
$DIR/integration_tests/tests/codebuild.rs: `.list_projects(request)`
{"should_list_repositories"}
$DIR/integration_tests/tests/codecommit.rs: `.list_repositories(request)`
{"should_list_applications"}
$DIR/integration_tests/tests/codedeploy.rs: `.list_applications(request)`
{"should_list_pipelines"}
$DIR/integration_tests/tests/codepipeline.rs: `.list_pipelines(request)`
{"should_list_projects"}
$DIR/integration_tests/tests/codestar.rs: `.list_projects(request)`
{"should_list_user_pools"}
$DIR/integration_tests/tests/cognito-idp.rs: `.list_user_pools(request)`
{"should_list_identity_pool_usage"}
$DIR/integration_tests/tests/cognito-sync.rs: `.list_identity_pool_usage(request)`
{"should_list_identity_pools"}
$DIR/integration_tests/tests/cognitoidentity.rs: `request.max_results = 10;`
{"should_handle_validation_errors_gracefully"}
$DIR/integration_tests/tests/cognitoidentity.rs: `request.max_results = 10;`
$DIR/integration_tests/tests/cognitoidentity.rs: `request.identity_pool_id = "invalid".to_string();`
{"should_work_with_credential_provider"}
$DIR/integration_tests/tests/cognitoidentity.rs: `roles.insert("authenticated".to_string(), role.arn.clone());`
$DIR/integration_tests/tests/cognitoidentity.rs: `roles.insert("unauthenticated".to_string(), role.arn.clone());`
$DIR/integration_tests/tests/cognitoidentity.rs: `logins.insert(developper_provider_name.to_string(), login.to_string());`
$DIR/integration_tests/tests/cognitoidentity.rs: `sleep(Duration::from_secs(10)).await;`
{"should_list_identity_pools"}
$DIR/integration_tests/tests/cognitoidentity.rs: `.list_identity_pools(request)`
{"should_handle_validation_errors_gracefully"}
$DIR/integration_tests/tests/cognitoidentity.rs: `.list_identities(request)`
{"should_work_with_credential_provider"}
$DIR/integration_tests/tests/cognitoidentity.rs: `.nanosecond()`
$DIR/integration_tests/tests/cognitoidentity.rs: `.create_identity_pool(create_identity_input)`
$DIR/integration_tests/tests/cognitoidentity.rs: `.replace("'", "\"")`
$DIR/integration_tests/tests/cognitoidentity.rs: `.create_role(input_create_role)`
$DIR/integration_tests/tests/cognitoidentity.rs: `.replace("'", "\"")`
$DIR/integration_tests/tests/cognitoidentity.rs: `.put_role_policy(role_policy_input)`
$DIR/integration_tests/tests/cognitoidentity.rs: `.insert("authenticated".to_string(), role.arn.clone())`
$DIR/integration_tests/tests/cognitoidentity.rs: `.insert("unauthenticated".to_string(), role.arn.clone())`
$DIR/integration_tests/tests/cognitoidentity.rs: `.set_identity_pool_roles(roles_input)`
$DIR/integration_tests/tests/cognitoidentity.rs: `.insert(developper_provider_name.to_string(), login.to_string())`
$DIR/integration_tests/tests/cognitoidentity.rs: `.get_open_id_token_for_developer_identity(register_input)`
$DIR/integration_tests/tests/cognitoidentity.rs: `.identity_id(response.identity_id.unwrap())`
$DIR/integration_tests/tests/cognitoidentity.rs: `.region(region.clone())`
$DIR/integration_tests/tests/cognitoidentity.rs: `.login("cognito-identity.amazonaws.com".to_string(), response.token.unwrap())`
$DIR/integration_tests/tests/cognitoidentity.rs: `.build()`
$DIR/integration_tests/tests/cognitoidentity.rs: `.credentials()`
$DIR/integration_tests/tests/cognitoidentity.rs: `.delete_identity_pool(delete_identity_pool_input)`
$DIR/integration_tests/tests/cognitoidentity.rs: `.delete_role_policy(delete_policy_input)`
$DIR/integration_tests/tests/cognitoidentity.rs: `.delete_role(delete_role_input)`
{"should_detect_sentiment"}
$DIR/integration_tests/tests/comprehend.rs: `.detect_sentiment(request)`
{"should_detect_phi"}
$DIR/integration_tests/tests/comprehendmedical.rs: `.detect_phi(request)`
{"should_describe_config_rules"}
$DIR/integration_tests/tests/config.rs: `.describe_config_rules(request)`
{"should_describe_delivery_channels"}
$DIR/integration_tests/tests/config.rs: `.describe_delivery_channels(request)`
{"get_caller_identity_presigned"}
$DIR/integration_tests/tests/core.rs: `params.put("Action", "GetCallerIdentity");`
$DIR/integration_tests/tests/core.rs: `params.put("Version", "2011-06-15");`
$DIR/integration_tests/tests/core.rs: `request.set_params(params);`
$DIR/integration_tests/tests/core.rs: `request.add_header("x-test-header", "foobar");`
{"with_signature"}
$DIR/integration_tests/tests/core.rs: `params.put("Action", "GetCallerIdentity");`
$DIR/integration_tests/tests/core.rs: `params.put("Version", "2011-06-15");`
$DIR/integration_tests/tests/core.rs: `request.set_params(params);`
{"without_signature"}
$DIR/integration_tests/tests/core.rs: `params.put("Action", "GetCallerIdentity");`
$DIR/integration_tests/tests/core.rs: `params.put("Version", "2011-06-15");`
$DIR/integration_tests/tests/core.rs: `request.set_params(params);`
{"get_caller_identity_presigned"}
$DIR/integration_tests/tests/core.rs: `.credentials()`
$DIR/integration_tests/tests/core.rs: `.put("Action", "GetCallerIdentity")`
$DIR/integration_tests/tests/core.rs: `.put("Version", "2011-06-15")`
$DIR/integration_tests/tests/core.rs: `.set_params(params)`
$DIR/integration_tests/tests/core.rs: `.add_header("x-test-header", "foobar")`
$DIR/integration_tests/tests/core.rs: `.generate_presigned_url(&credentials, &std::time::Duration::from_secs(60), true)`
$DIR/integration_tests/tests/core.rs: `.get(&url)`
$DIR/integration_tests/tests/core.rs: `.header("x-test-header", "foobar")`
$DIR/integration_tests/tests/core.rs: `.send()`
{"with_signature"}
$DIR/integration_tests/tests/core.rs: `.put("Action", "GetCallerIdentity")`
$DIR/integration_tests/tests/core.rs: `.put("Version", "2011-06-15")`
$DIR/integration_tests/tests/core.rs: `.set_params(params)`
$DIR/integration_tests/tests/core.rs: `.sign_and_dispatch(request)`
{"without_signature"}
$DIR/integration_tests/tests/core.rs: `.put("Action", "GetCallerIdentity")`
$DIR/integration_tests/tests/core.rs: `.put("Version", "2011-06-15")`
$DIR/integration_tests/tests/core.rs: `.set_params(params)`
$DIR/integration_tests/tests/core.rs: `.sign_and_dispatch(request)`
{"should_describe_report_definitions"}
$DIR/integration_tests/tests/cur.rs: `.describe_report_definitions(request)`
{"should_list_pipelines"}
$DIR/integration_tests/tests/datapipeline.rs: `.list_pipelines(request)`
{"should_describe_clusters"}
$DIR/integration_tests/tests/dax.rs: `.describe_clusters(request)`
{"should_list_devices"}
$DIR/integration_tests/tests/devicefarm.rs: `.list_devices(request)`
{"should_describe_connections"}
$DIR/integration_tests/tests/directconnect.rs: `.describe_connections(request)`
{"should_fail_gracefully"}
$DIR/integration_tests/tests/directconnect.rs: `.describe_connections(request)`
{"should_describe_locations"}
$DIR/integration_tests/tests/directconnect.rs: `.describe_locations()`
{"should_describe_virtual_gateways"}
$DIR/integration_tests/tests/directconnect.rs: `.describe_virtual_gateways()`
{"should_describe_tags"}
$DIR/integration_tests/tests/discovery.rs: `.describe_tags(request)`
{"should_list_configurations"}
$DIR/integration_tests/tests/discovery.rs: `.list_configurations(request)`
{"should_describe_tags"}
$DIR/integration_tests/tests/dms.rs: `.describe_endpoints(request)`
{"should_describe_tags"}
$DIR/integration_tests/tests/docdb.rs: `.describe_db_clusters(request)`
{"should_conditional_forwarders"}
$DIR/integration_tests/tests/ds.rs: `request.directory_id = "d-11111aaaaa".to_string();`
{"should_describe_domain_controllers"}
$DIR/integration_tests/tests/ds.rs: `request.directory_id = "d-11111aaaaa".to_string();`
{"should_describe_trusts"}
$DIR/integration_tests/tests/ds.rs: `.describe_trusts(request)`
{"should_describe_directories"}
$DIR/integration_tests/tests/ds.rs: `.describe_directories(request)`
{"should_conditional_forwarders"}
$DIR/integration_tests/tests/ds.rs: `.describe_conditional_forwarders(request)`
{"should_describe_domain_controllers"}
$DIR/integration_tests/tests/ds.rs: `.describe_domain_controllers(request)`
{"should_describe_event_topics"}
$DIR/integration_tests/tests/ds.rs: `.describe_event_topics(request)`
{"should_parse_error_type"}
$DIR/integration_tests/tests/dynamodb.rs: `.list_tables(request)`
{"should_list_tables"}
$DIR/integration_tests/tests/dynamodb.rs: `.list_tables(request)`
{"should_list_streams"}
$DIR/integration_tests/tests/dynamodbstreams.rs: `.list_streams(request)`
{"send_ssh_public_key_correctly_errors_for_unknown_instance"}
$DIR/integration_tests/tests/ec2-instance-connect.rs: `.into()`
$DIR/integration_tests/tests/ec2-instance-connect.rs: `.into()`
$DIR/integration_tests/tests/ec2-instance-connect.rs: `.into()`
$DIR/integration_tests/tests/ec2-instance-connect.rs: `.into()`
$DIR/integration_tests/tests/ec2-instance-connect.rs: `.send_ssh_public_key(request)`
{"main"}
$DIR/integration_tests/tests/ec2.rs: `req.instance_ids = Some(vec!["i-00000000".into(), "i-00000001".into()]);`
$DIR/integration_tests/tests/ec2.rs: `.describe_instances(req)`
{"dry_run"}
$DIR/integration_tests/tests/ec2.rs: `.into()`
$DIR/integration_tests/tests/ec2.rs: `.create_snapshot(req)`
{"query_serialization_name"}
$DIR/integration_tests/tests/ec2.rs: `.create_tags(req)`
{"should_describe_repositories"}
$DIR/integration_tests/tests/ecr.rs: `.describe_repositories(request)`
{"main"}
$DIR/integration_tests/tests/ecs.rs: `http_config_with_bigger_buffer.read_buf_size(1024 * 1024 * 2);`
$DIR/integration_tests/tests/ecs.rs: `.read_buf_size(1024 * 1024 * 2)`
$DIR/integration_tests/tests/ecs.rs: `.list_clusters(ListClustersRequest::default())`
$DIR/integration_tests/tests/ecs.rs: `.cluster_arns.unwrap_or(vec![])`
$DIR/integration_tests/tests/ecs.rs: `.list_clusters(ListClustersRequest {
            next_token: Some("bogus".to_owned()),
            ..Default::default()
        })`
{"should_describe_filesystems"}
$DIR/integration_tests/tests/efs.rs: `.describe_file_systems(request)`
{"should_list_clusters"}
$DIR/integration_tests/tests/eks.rs: `.list_clusters(request)`
{"should_describe_cache_clusters"}
$DIR/integration_tests/tests/elasticache.rs: `.describe_cache_clusters(request)`
{"should_describe_applications"}
$DIR/integration_tests/tests/elasticbeanstalk.rs: `.describe_applications(request)`
{"create_pipeline_without_arn"}
$DIR/integration_tests/tests/elastictranscoder.rs: `location.remove(0);`
$DIR/integration_tests/tests/elastictranscoder.rs: `info!("Created S3 bucket: {}", location);`
{"create_preset"}
$DIR/integration_tests/tests/elastictranscoder.rs: `info!("Created preset with id: {:?}", &id);`
{"delete_preset"}
$DIR/integration_tests/tests/elastictranscoder.rs: `tokio::time::sleep(std::time::Duration::from_secs(2)).await;`
{"list_presets"}
$DIR/integration_tests/tests/elastictranscoder.rs: `info!("Got list of presets.");`
$DIR/integration_tests/tests/elastictranscoder.rs: `info!("Preset: {:?}", preset.name);`
{"read_preset"}
$DIR/integration_tests/tests/elastictranscoder.rs: `info!("Got preset: {:?}", preset.name);`
{"create_pipeline_without_arn"}
$DIR/integration_tests/tests/elastictranscoder.rs: `.create_bucket(create_bucket_req)`
$DIR/integration_tests/tests/elastictranscoder.rs: `.remove(0)`
$DIR/integration_tests/tests/elastictranscoder.rs: `.delete_bucket(delete_bucket_req)`
$DIR/integration_tests/tests/elastictranscoder.rs: `.create_pipeline(request)`
{"create_preset"}
$DIR/integration_tests/tests/elastictranscoder.rs: `.create_preset(request)`
$DIR/integration_tests/tests/elastictranscoder.rs: `.delete_preset(request)`
{"delete_preset"}
$DIR/integration_tests/tests/elastictranscoder.rs: `.create_preset(request)`
$DIR/integration_tests/tests/elastictranscoder.rs: `.delete_preset(request)`
{"list_jobs_by_status"}
$DIR/integration_tests/tests/elastictranscoder.rs: `.list_jobs_by_status(request)`
{"list_pipelines"}
$DIR/integration_tests/tests/elastictranscoder.rs: `.list_pipelines(request)`
{"list_presets"}
$DIR/integration_tests/tests/elastictranscoder.rs: `.list_presets(request)`
$DIR/integration_tests/tests/elastictranscoder.rs: `.filter(|x| x.id == Some(AWS_ETS_WEB_PRESET_ID.to_owned()))`
$DIR/integration_tests/tests/elastictranscoder.rs: `.next()`
$DIR/integration_tests/tests/elastictranscoder.rs: `.list_presets(page_two_request)`
$DIR/integration_tests/tests/elastictranscoder.rs: `.filter(|x| x.id == Some(AWS_ETS_WEB_PRESET_ID.to_owned()))`
$DIR/integration_tests/tests/elastictranscoder.rs: `.next()`
{"read_preset"}
$DIR/integration_tests/tests/elastictranscoder.rs: `.read_preset(request)`
{"should_describe_load_balancers"}
$DIR/integration_tests/tests/elb.rs: `.describe_load_balancers(request)`
{"should_describe_load_balancers"}
$DIR/integration_tests/tests/elbv2.rs: `.describe_load_balancers(request)`
{"should_list_clusters"}
$DIR/integration_tests/tests/emr.rs: `.list_clusters(request)`
{"should_handle_deprecation_gracefully"}
$DIR/integration_tests/tests/emr.rs: `.describe_job_flows(request)`
{"should_list_rules"}
$DIR/integration_tests/tests/events.rs: `.list_rules(request)`
{"should_list_delivery_streams"}
$DIR/integration_tests/tests/firehose.rs: `.list_delivery_streams(request)`
{"should_list_policies"}
$DIR/integration_tests/tests/fms.rs: `.list_policies(request)`
{"should_describe_filesystems"}
$DIR/integration_tests/tests/fsx.rs: `.describe_file_systems(request)`
{"should_list_fleets"}
$DIR/integration_tests/tests/gamelift.rs: `.list_fleets(request)`
{"should_list_vaults"}
$DIR/integration_tests/tests/glacier.rs: `.list_vaults(request)`
{"should_get_databases"}
$DIR/integration_tests/tests/glue.rs: `.get_databases(request)`
{"should_list_groups"}
$DIR/integration_tests/tests/greengrass.rs: `.list_groups(request)`
{"should_list_invitations"}
$DIR/integration_tests/tests/guardduty.rs: `.list_invitations(request)`
{"get_user"}
$DIR/integration_tests/tests/iam.rs: `.get_user(request)`
{"list_users"}
$DIR/integration_tests/tests/iam.rs: `.list_users(request)`
{"should_list_jobs"}
$DIR/integration_tests/tests/importexport.rs: `.list_jobs(request)`
{"should_list_assessment_runs"}
$DIR/integration_tests/tests/inspector.rs: `.list_assessment_runs(request)`
{"should_list_things"}
$DIR/integration_tests/tests/iot.rs: `.list_things(request)`
{"should_list_clusters"}
$DIR/integration_tests/tests/kafka.rs: `.list_clusters(request)`
{"should_listen_for_shard_events"}
$DIR/integration_tests/tests/kinesis.rs: `sleep(std::time::Duration::from_secs(2)).await;`
$DIR/integration_tests/tests/kinesis.rs: `tokio::time::sleep(Duration::from_secs(10)).await;`
$DIR/integration_tests/tests/kinesis.rs: `sleep(std::time::Duration::from_secs(2)).await;`
$DIR/integration_tests/tests/kinesis.rs: `events.extend(e.records);`
$DIR/integration_tests/tests/kinesis.rs: `.catch_unwind()`
$DIR/integration_tests/tests/kinesis.rs: `.client
            .delete_stream(rusoto_kinesis::DeleteStreamInput {
                enforce_consumer_deletion: Some(true),
                stream_name: self.name.clone(),
            })`
{"should_list_streams"}
$DIR/integration_tests/tests/kinesis.rs: `.list_streams(request)`
{"should_listen_for_shard_events"}
$DIR/integration_tests/tests/kinesis.rs: `.describe_stream(rusoto_kinesis::DescribeStreamInput {
                stream_name: stream.name.clone(),

                ..Default::default()
            })`
$DIR/integration_tests/tests/kinesis.rs: `.start_stream_encryption(rusoto_kinesis::StartStreamEncryptionInput {
                encryption_type: "KMS".to_string(),
                key_id: kms_id,
                stream_name: stream.name.clone(),
            })`
$DIR/integration_tests/tests/kinesis.rs: `.register_stream_consumer(rusoto_kinesis::RegisterStreamConsumerInput {
                consumer_name: "test-consumer".to_string(),
                stream_arn: stream.arn.clone(),
            })`
$DIR/integration_tests/tests/kinesis.rs: `.describe_stream_consumer(rusoto_kinesis::DescribeStreamConsumerInput {
                consumer_arn: Some(consumer_result.consumer.consumer_arn.clone()),
                stream_arn: Some(stream.arn.clone()),

                ..Default::default()
            })`
$DIR/integration_tests/tests/kinesis.rs: `.list_shards(rusoto_kinesis::ListShardsInput {
                stream_name: Some(stream.name.clone()),

                ..Default::default()
            })`
$DIR/integration_tests/tests/kinesis.rs: `.subscribe_to_shard(rusoto_kinesis::SubscribeToShardInput {
                consumer_arn: consumer_result.consumer.consumer_arn,
                shard_id: shard_id.clone(),
                starting_position: rusoto_kinesis::StartingPosition {
                    sequence_number: None,
                    timestamp: None,
                    type_: "TRIM_HORIZON".to_string()
                },
            })`
$DIR/integration_tests/tests/kinesis.rs: `.put_record(rusoto_kinesis::PutRecordInput {
                data: bytes::Bytes::copy_from_slice(message.as_bytes()),
                partition_key: "hello".to_string(),
                stream_name: stream.name.clone(),

                ..Default::default()
            })`
$DIR/integration_tests/tests/kinesis.rs: `.next()`
$DIR/integration_tests/tests/kinesis.rs: `.extend(e.records)`
{"should_list_applications"}
$DIR/integration_tests/tests/kinesisanalytics.rs: `.list_applications(request)`
{"should_list_streams"}
$DIR/integration_tests/tests/kinesisvideo.rs: `.list_streams(request)`
{"should_list_keys"}
$DIR/integration_tests/tests/kms.rs: `.list_keys(request)`
{"should_list_functions"}
$DIR/integration_tests/tests/lambda.rs: `.list_functions(request)`
{"should_function_not_found"}
$DIR/integration_tests/tests/lambda.rs: `.invoke(request)`
$DIR/integration_tests/tests/lambda.rs: `.invoke(request)`
{"should_get_bots"}
$DIR/integration_tests/tests/lexmodels.rs: `.get_bots(request)`
{"should_list_domains"}
$DIR/integration_tests/tests/licensemanager.rs: `.get_service_settings()`
{"should_list_domains"}
$DIR/integration_tests/tests/lightsail.rs: `.get_domains(request)`
{"should_put_log_events", "should_put_log_events_with_gzip_encoding"}
$DIR/integration_tests/tests/logs.rs: `create_log_group_req.log_group_name = log_group.to_string();`
$DIR/integration_tests/tests/logs.rs: `client
        .create_log_group(create_log_group_req)
        .await
        .unwrap_or_else(|e| {
            match e {
                RusotoError::Service(CreateLogGroupError::ResourceAlreadyExists(err)) => {
                    warn!("CreateLogGroupError::ResourceAlreadyExists: {}", err);
                    // It's fine, continue
                }
                err => {
                    panic!("Failed to create log group: {}", err);
                }
            }
        });`
$DIR/integration_tests/tests/logs.rs: `warn!("CreateLogGroupError::ResourceAlreadyExists: {}", err);`
$DIR/integration_tests/tests/logs.rs: `client
        .create_log_stream(create_log_stream_req)
        .await
        .unwrap_or_else(|e| {
            match e {
                RusotoError::Service(CreateLogStreamError::ResourceAlreadyExists(err)) => {
                    warn!("CreateLogStreamError::ResourceAlreadyExists: {}", err);
                    // It's fine, continue
                }
                err => {
                    panic!("Failed to create log group: {}", err);
                }
            }
        });`
$DIR/integration_tests/tests/logs.rs: `warn!("CreateLogStreamError::ResourceAlreadyExists: {}", err);`
$DIR/integration_tests/tests/logs.rs: `desc_streams_req.log_group_name = log_group.to_owned();`
$DIR/integration_tests/tests/logs.rs: `desc_streams_req.log_stream_name_prefix = Some(log_stream.to_owned());`
$DIR/integration_tests/tests/logs.rs: `input_events.push(input_event.clone());`
$DIR/integration_tests/tests/logs.rs: `client
        .put_log_events(put_log_req.clone())
        .await
        .unwrap_or_else(|e| panic!("Failed on put log events: {:?}", e));`
$DIR/integration_tests/tests/logs.rs: `get_log_req.log_group_name = log_group.to_owned();`
$DIR/integration_tests/tests/logs.rs: `get_log_req.log_stream_name = log_stream.to_owned();`
$DIR/integration_tests/tests/logs.rs: `get_log_req.start_time = Some(input_event.timestamp - 1);`
$DIR/integration_tests/tests/logs.rs: `get_log_req.end_time = Some(input_event.timestamp + 1);`
$DIR/integration_tests/tests/logs.rs: `info!(
            "Trying to get log events: {} out of {} times",
            i, retry_count
        );`
$DIR/integration_tests/tests/logs.rs: `i = i + 1;`
$DIR/integration_tests/tests/logs.rs: `thread::sleep(time::Duration::from_secs(1));`
$DIR/integration_tests/tests/logs.rs: `client
        .delete_log_group(del_log_group_req)
        .await
        .unwrap_or_else(|e| panic!("Failed to delete log group:/n{}", e));`
$DIR/integration_tests/tests/logs.rs: `.create_log_group(create_log_group_req)`
$DIR/integration_tests/tests/logs.rs: `.unwrap_or_else(|e| {
            match e {
                RusotoError::Service(CreateLogGroupError::ResourceAlreadyExists(err)) => {
                    warn!("CreateLogGroupError::ResourceAlreadyExists: {}", err);
                    // It's fine, continue
                }
                err => {
                    panic!("Failed to create log group: {}", err);
                }
            }
        })`
$DIR/integration_tests/tests/logs.rs: `.create_log_stream(create_log_stream_req)`
$DIR/integration_tests/tests/logs.rs: `.unwrap_or_else(|e| {
            match e {
                RusotoError::Service(CreateLogStreamError::ResourceAlreadyExists(err)) => {
                    warn!("CreateLogStreamError::ResourceAlreadyExists: {}", err);
                    // It's fine, continue
                }
                err => {
                    panic!("Failed to create log group: {}", err);
                }
            }
        })`
$DIR/integration_tests/tests/logs.rs: `.describe_log_streams(desc_streams_req)`
$DIR/integration_tests/tests/logs.rs: `.find(|s| s.log_stream_name == Some(log_stream.to_string()))`
$DIR/integration_tests/tests/logs.rs: `.duration_since(SystemTime::UNIX_EPOCH)`
$DIR/integration_tests/tests/logs.rs: `.as_millis()`
$DIR/integration_tests/tests/logs.rs: `.push(input_event.clone())`
$DIR/integration_tests/tests/logs.rs: `.put_log_events(put_log_req.clone())`
$DIR/integration_tests/tests/logs.rs: `.unwrap_or_else(|e| panic!("Failed on put log events: {:?}", e))`
$DIR/integration_tests/tests/logs.rs: `.get_log_events(get_log_req.clone())`
$DIR/integration_tests/tests/logs.rs: `.unwrap_or_else(|e| panic!("Failed on get log events: {}", e))`
$DIR/integration_tests/tests/logs.rs: `.len()`
$DIR/integration_tests/tests/logs.rs: `.is_none()`
$DIR/integration_tests/tests/logs.rs: `.delete_log_group(del_log_group_req)`
$DIR/integration_tests/tests/logs.rs: `.unwrap_or_else(|e| panic!("Failed to delete log group:/n{}", e))`
{"should_describe_batch_predictions"}
$DIR/integration_tests/tests/machinelearning.rs: `.describe_batch_predictions(request)`
{"should_describe_data_sources"}
$DIR/integration_tests/tests/machinelearning.rs: `.describe_data_sources(request)`
{"should_describe_evaluations"}
$DIR/integration_tests/tests/machinelearning.rs: `.describe_evaluations(request)`
{"should_list_jobs"}
$DIR/integration_tests/tests/mediaconvert.rs: `.list_jobs(request)`
{"should_list_channels"}
$DIR/integration_tests/tests/medialive.rs: `.list_channels(request)`
{"should_list_origin_endpoints"}
$DIR/integration_tests/tests/mediapackage.rs: `.list_origin_endpoints(request)`
{"should_list_migration_tasks"}
$DIR/integration_tests/tests/mgh.rs: `.list_migration_tasks(request)`
{"should_list_brokers"}
$DIR/integration_tests/tests/mq.rs: `.list_brokers(request)`
{"should_list_hits"}
$DIR/integration_tests/tests/mturk.rs: `.list_hi_ts(request)`
{"should_describe_db_clusters"}
$DIR/integration_tests/tests/neptune.rs: `.describe_db_clusters(request)`
{"should_describe_stacks"}
$DIR/integration_tests/tests/opsworks.rs: `.describe_stacks(request)`
{"should_describe_my_user_profile"}
$DIR/integration_tests/tests/opsworks.rs: `.describe_my_user_profile()`
{"should_describe_servers"}
$DIR/integration_tests/tests/opsworkscm.rs: `.describe_servers(request)`
{"should_describe_organizations"}
$DIR/integration_tests/tests/organizations.rs: `.describe_organization()`
{"should_describe_services"}
$DIR/integration_tests/tests/pricing.rs: `.describe_services(request)`
{"should_list_ledgers"}
$DIR/integration_tests/tests/qldb.rs: `.list_ledgers(ListLedgersRequest::default())`
{"should_work"}
$DIR/integration_tests/tests/ram.rs: `.list_resources(ListResourcesRequest {
            resource_owner: "SELF".into(),
            ..ListResourcesRequest::default()
        })`
$DIR/integration_tests/tests/ram.rs: `.into()`
{"should_create_destroy_options_group"}
$DIR/integration_tests/tests/rds.rs: `tags.push(tag);`
{"should_describe_db_clusters"}
$DIR/integration_tests/tests/rds.rs: `.describe_db_clusters(request)`
{"should_create_destroy_options_group"}
$DIR/integration_tests/tests/rds.rs: `.push(tag)`
$DIR/integration_tests/tests/rds.rs: `.create_option_group(create_opt_group_request)`
$DIR/integration_tests/tests/rds.rs: `.delete_option_group(delete_opt_group_req)`
{"should_describe_clusters"}
$DIR/integration_tests/tests/redshift.rs: `.describe_clusters(request)`
{"should_list_collections"}
$DIR/integration_tests/tests/rekognition.rs: `.list_collections(request)`
{"should_list_groups"}
$DIR/integration_tests/tests/resourcegroups.rs: `.list_groups(request)`
{"should_get_resources"}
$DIR/integration_tests/tests/resourcegroupstagging.rs: `.get_resources(request)`
{"should_list_hosted_zones"}
$DIR/integration_tests/tests/route53.rs: `.list_hosted_zones(request)`
{"should_list_operations"}
$DIR/integration_tests/tests/route53domains.rs: `.list_operations(request)`
{"test_list_objects_encoding", "test_multipart_stream_uploads", "test_name_space_truncate", "test_puts_gets_deletes_binary", "test_puts_gets_deletes_metadata", "test_puts_gets_deletes_presigned_url", "test_puts_gets_deletes_utf8"}
$DIR/integration_tests/tests/s3.rs: `tokio::time::sleep(std::time::Duration::from_secs(5)).await;`
{"test_bucket_creation_deletion", "test_list_objects_encoding", "test_multipart_stream_uploads", "test_name_space_truncate", "test_puts_gets_deletes", "test_puts_gets_deletes_binary", "test_puts_gets_deletes_metadata", "test_puts_gets_deletes_presigned_url", "test_puts_gets_deletes_utf8"}
$DIR/integration_tests/tests/s3.rs: `match s3.delete_bucket(delete_bucket_req).await {
            Ok(_) => println!("Deleted S3 bucket: {}", bucket_name),
            Err(e) => println!("Failed to delete S3 bucket: {}", e),
        };`
{"test_bucket_creation_deletion"}
$DIR/integration_tests/tests/s3.rs: `bucket_found = true;`
$DIR/integration_tests/tests/s3.rs: `test_client.bucket_deleted = true;`
{"test_puts_gets_deletes_metadata"}
$DIR/integration_tests/tests/s3.rs: `metadata.insert(
        "rusoto-metadata-some".to_string(),
        "some-test-value".to_string(),
    );`
$DIR/integration_tests/tests/s3.rs: `metadata.insert("rusoto-metadata-none".to_string(), "".to_string());`
{"test_multipart_stream_uploads"}
$DIR/integration_tests/tests/s3.rs: `completed_parts.push(CompletedPart {
            e_tag: response.e_tag.clone(),
            part_number: Some(part_number),
        });`
$DIR/integration_tests/tests/s3.rs: `completed_parts.push(CompletedPart {
            e_tag: Some(e_tag.to_string()),
            part_number: Some(part_req2.part_number),
        });`
{"test_puts_gets_deletes"}
$DIR/integration_tests/tests/s3.rs: `match client.get_object(get_req).await {
        Err(RusotoError::Service(GetObjectError::NoSuchKey(_))) => (),
        r => panic!("unexpected response {:?}", r),
    };`
$DIR/integration_tests/tests/s3.rs: `list_request.marker = Some(response1.next_marker.unwrap());`
$DIR/integration_tests/tests/s3.rs: `list_request.max_keys = Some(1000);`
$DIR/integration_tests/tests/s3.rs: `list_obj_req.continuation_token = result1.next_continuation_token;`
{"test_puts_gets_deletes_presigned_url"}
$DIR/integration_tests/tests/s3.rs: `::std::thread::sleep(::std::time::Duration::from_secs(2));`
$DIR/integration_tests/tests/s3.rs: `map.insert("test", "data");`
{"test_list_objects_encoding", "test_multipart_stream_uploads", "test_name_space_truncate", "test_puts_gets_deletes_binary", "test_puts_gets_deletes_metadata", "test_puts_gets_deletes_presigned_url", "test_puts_gets_deletes_utf8"}
$DIR/integration_tests/tests/s3.rs: `.s3
            .create_bucket(create_bucket_req)`
{"test_puts_gets_deletes"}
$DIR/integration_tests/tests/s3.rs: `.s3
            .create_bucket(create_bucket_req)`
{"test_list_objects_encoding", "test_multipart_stream_uploads", "test_name_space_truncate", "test_puts_gets_deletes", "test_puts_gets_deletes_binary", "test_puts_gets_deletes_metadata", "test_puts_gets_deletes_utf8"}
$DIR/integration_tests/tests/s3.rs: `.s3
            .delete_object(delete_object_req)`
{"test_list_objects_encoding", "test_name_space_truncate", "test_puts_gets_deletes"}
$DIR/integration_tests/tests/s3.rs: `.into()`
$DIR/integration_tests/tests/s3.rs: `.s3
            .put_object(put_request)`
{"test_bucket_creation_deletion", "test_list_objects_encoding", "test_multipart_stream_uploads", "test_name_space_truncate", "test_puts_gets_deletes", "test_puts_gets_deletes_binary", "test_puts_gets_deletes_metadata", "test_puts_gets_deletes_presigned_url", "test_puts_gets_deletes_utf8"}
$DIR/integration_tests/tests/s3.rs: `.delete_bucket(delete_bucket_req)`
{"test_bucket_creation_deletion"}
$DIR/integration_tests/tests/s3.rs: `.s3.create_bucket(create_bucket_req)`
$DIR/integration_tests/tests/s3.rs: `.s3.list_buckets()`
$DIR/integration_tests/tests/s3.rs: `.s3.list_objects_v2(list_obj_req)`
{"test_puts_gets_deletes_metadata"}
$DIR/integration_tests/tests/s3.rs: `.insert(
        "rusoto-metadata-some".to_string(),
        "some-test-value".to_string(),
    )`
$DIR/integration_tests/tests/s3.rs: `.insert("rusoto-metadata-none".to_string(), "".to_string())`
{"test_puts_gets_deletes_presigned_url"}
$DIR/integration_tests/tests/s3.rs: `.credentials()`
{"test_multipart_stream_uploads"}
$DIR/integration_tests/tests/s3.rs: `.credentials()`
{"test_list_objects_encoding"}
$DIR/integration_tests/tests/s3.rs: `.s3
        .list_objects(list_obj_req_v1)`
$DIR/integration_tests/tests/s3.rs: `.s3
        .list_objects_v2(list_obj_req_v2)`
{"test_name_space_truncate"}
$DIR/integration_tests/tests/s3.rs: `.s3
        .list_objects_v2(req)`
{"test_multipart_stream_uploads"}
$DIR/integration_tests/tests/s3.rs: `.create_multipart_upload(create_multipart_req)`
$DIR/integration_tests/tests/s3.rs: `.into()`
$DIR/integration_tests/tests/s3.rs: `.upload_part(part_req1)`
$DIR/integration_tests/tests/s3.rs: `.push(CompletedPart {
            e_tag: response.e_tag.clone(),
            part_number: Some(part_number),
        })`
$DIR/integration_tests/tests/s3.rs: `.get_presigned_url(region, credentials, &options)`
$DIR/integration_tests/tests/s3.rs: `.put(&presigned_multipart_put)`
$DIR/integration_tests/tests/s3.rs: `.body(String::from("foo"))`
$DIR/integration_tests/tests/s3.rs: `.send()`
$DIR/integration_tests/tests/s3.rs: `.headers()`
$DIR/integration_tests/tests/s3.rs: `.get("ETAG")`
$DIR/integration_tests/tests/s3.rs: `.to_str()`
$DIR/integration_tests/tests/s3.rs: `.push(CompletedPart {
            e_tag: Some(e_tag.to_string()),
            part_number: Some(part_req2.part_number),
        })`
$DIR/integration_tests/tests/s3.rs: `.complete_multipart_upload(complete_req)`
$DIR/integration_tests/tests/s3.rs: `.create_multipart_upload(create_multipart_req2)`
$DIR/integration_tests/tests/s3.rs: `.upload_part_copy(upload_part_copy_req)`
$DIR/integration_tests/tests/s3.rs: `.upload_part_copy(upload_part_copy_req2)`
$DIR/integration_tests/tests/s3.rs: `.complete_multipart_upload(complete_req2)`
{"test_bucket_creation_deletion"}
$DIR/integration_tests/tests/s3.rs: `.delete_bucket(delete_bucket_req)`
{"test_puts_gets_deletes", "test_puts_gets_deletes_binary", "test_puts_gets_deletes_presigned_url", "test_puts_gets_deletes_utf8"}
$DIR/integration_tests/tests/s3.rs: `.read_to_end(&mut contents)`
$DIR/integration_tests/tests/s3.rs: `.into()`
$DIR/integration_tests/tests/s3.rs: `.put_object(req)`
{"test_puts_gets_deletes"}
$DIR/integration_tests/tests/s3.rs: `.read_to_end(&mut contents)`
$DIR/integration_tests/tests/s3.rs: `.into()`
$DIR/integration_tests/tests/s3.rs: `.put_object(req)`
{"test_multipart_stream_uploads"}
$DIR/integration_tests/tests/s3.rs: `.into_stream()`
$DIR/integration_tests/tests/s3.rs: `.map_ok(|b| Bytes::from(b))`
$DIR/integration_tests/tests/s3.rs: `.len()`
$DIR/integration_tests/tests/s3.rs: `.put_object(req)`
{"test_puts_gets_deletes", "test_puts_gets_deletes_binary"}
$DIR/integration_tests/tests/s3.rs: `.get_object(get_req)`
$DIR/integration_tests/tests/s3.rs: `.map_ok(|b| bytes::BytesMut::from(&b[..]))`
$DIR/integration_tests/tests/s3.rs: `.try_concat()`
{"test_puts_gets_deletes_binary"}
$DIR/integration_tests/tests/s3.rs: `.get_object(get_req)`
$DIR/integration_tests/tests/s3.rs: `.into_async_read()`
$DIR/integration_tests/tests/s3.rs: `.read_to_end(&mut body)`
{"test_puts_gets_deletes"}
$DIR/integration_tests/tests/s3.rs: `.get_object(get_req)`
$DIR/integration_tests/tests/s3.rs: `.get_object(get_req)`
$DIR/integration_tests/tests/s3.rs: `.copy_object(req)`
{"test_puts_gets_deletes_utf8"}
$DIR/integration_tests/tests/s3.rs: `.copy_object(req)`
{"test_puts_gets_deletes"}
$DIR/integration_tests/tests/s3.rs: `.list_objects(list_request.clone())`
$DIR/integration_tests/tests/s3.rs: `.list_objects(list_request)`
$DIR/integration_tests/tests/s3.rs: `.list_objects_v2(list_obj_req.clone())`
$DIR/integration_tests/tests/s3.rs: `.list_objects_v2(list_obj_req)`
$DIR/integration_tests/tests/s3.rs: `.put_bucket_cors(req)`
{"test_puts_gets_deletes_metadata"}
$DIR/integration_tests/tests/s3.rs: `.read_to_end(&mut contents)`
$DIR/integration_tests/tests/s3.rs: `.into()`
$DIR/integration_tests/tests/s3.rs: `.put_object(req)`
$DIR/integration_tests/tests/s3.rs: `.head_object(head_req)`
$DIR/integration_tests/tests/s3.rs: `.get_object(get_req)`
{"test_puts_gets_deletes_presigned_url"}
$DIR/integration_tests/tests/s3.rs: `.get_presigned_url(region, credentials, &Default::default())`
$DIR/integration_tests/tests/s3.rs: `.content_length()`
$DIR/integration_tests/tests/s3.rs: `.unwrap_or(0)`
$DIR/integration_tests/tests/s3.rs: `.bytes()`
$DIR/integration_tests/tests/s3.rs: `.get_presigned_url(region, credentials, &opt)`
$DIR/integration_tests/tests/s3.rs: `.get_presigned_url(region, credentials, &Default::default())`
$DIR/integration_tests/tests/s3.rs: `.insert("test", "data")`
$DIR/integration_tests/tests/s3.rs: `.put(&presigned_url)`
$DIR/integration_tests/tests/s3.rs: `.json(&map)`
$DIR/integration_tests/tests/s3.rs: `.send()`
$DIR/integration_tests/tests/s3.rs: `.get_presigned_url(region, credentials, &Default::default())`
$DIR/integration_tests/tests/s3.rs: `.delete(&presigned_url)`
$DIR/integration_tests/tests/s3.rs: `.send()`
{"main"}
$DIR/integration_tests/tests/sagemaker.rs: `.list_models(req)`
{"should_list_domains"}
$DIR/integration_tests/tests/sdb.rs: `.list_domains(request)`
{"roundtrip_test"}
$DIR/integration_tests/tests/sdb.rs: `.create_domain(create_domain_req)`
$DIR/integration_tests/tests/sdb.rs: `.list_domains(request)`
$DIR/integration_tests/tests/sdb.rs: `.delete_domain(delete_req)`
{"should_list_invitations"}
$DIR/integration_tests/tests/secretsmanager.rs: `.list_secrets(request)`
{"should_list_invitations"}
$DIR/integration_tests/tests/securityhub.rs: `.list_invitations(request)`
{"should_list_applications"}
$DIR/integration_tests/tests/serverlessrepo.rs: `.list_applications(request)`
{"should_list_portfolios"}
$DIR/integration_tests/tests/servicecatalog.rs: `.list_portfolios(request)`
{"should_list_services"}
$DIR/integration_tests/tests/servicediscovery.rs: `.list_services(request)`
{"should_list_verified_email_addresses"}
$DIR/integration_tests/tests/ses.rs: `.list_verified_email_addresses()`
{"should_list_attacks"}
$DIR/integration_tests/tests/shield.rs: `.list_attacks(request)`
{"should_get_servers"}
$DIR/integration_tests/tests/sms.rs: `.get_servers(GetServersRequest::default())`
{"should_describe_addresses"}
$DIR/integration_tests/tests/snowball.rs: `.describe_addresses(request)`
{"should_list_topics"}
$DIR/integration_tests/tests/sns.rs: `.list_topics(request)`
{"sqs_roundtrip_tests"}
$DIR/integration_tests/tests/sqs.rs: `attrs.insert(
        String::from("ReceiveMessageWaitTimeSeconds"),
        String::from("1"),
    );`
{"sqs_timeout_test"}
$DIR/integration_tests/tests/sqs.rs: `result.err().expect("receive did not fail as expected");`
{"sqs_bulk_roundtrip_tests"}
$DIR/integration_tests/tests/sqs.rs: `delete_entries.push(DeleteMessageBatchRequestEntry {
            receipt_handle: msg.receipt_handle.clone().unwrap(),
            id: msg.message_id.clone().unwrap(),
        });`
{"list_queues"}
$DIR/integration_tests/tests/sqs.rs: `.list_queues(request)`
{"sqs_roundtrip_tests"}
$DIR/integration_tests/tests/sqs.rs: `.insert(
        String::from("ReceiveMessageWaitTimeSeconds"),
        String::from("1"),
    )`
$DIR/integration_tests/tests/sqs.rs: `.create_queue(q_creation_req)`
$DIR/integration_tests/tests/sqs.rs: `.get_queue_url(get_q_by_name_request)`
$DIR/integration_tests/tests/sqs.rs: `.get_queue_attributes(queue_attributes_req)`
$DIR/integration_tests/tests/sqs.rs: `.send_message(send_msg_request)`
$DIR/integration_tests/tests/sqs.rs: `.receive_message(receive_request)`
$DIR/integration_tests/tests/sqs.rs: `.delete_message(delete_message_request)`
$DIR/integration_tests/tests/sqs.rs: `.delete_queue(queue_deletion_req)`
{"sqs_timeout_test"}
$DIR/integration_tests/tests/sqs.rs: `.create_queue(q_creation_req)`
$DIR/integration_tests/tests/sqs.rs: `.receive_message(receive_request)`
$DIR/integration_tests/tests/sqs.rs: `.err()`
$DIR/integration_tests/tests/sqs.rs: `.delete_queue(queue_deletion_req)`
{"sqs_bulk_roundtrip_tests"}
$DIR/integration_tests/tests/sqs.rs: `.create_queue(q_creation_req)`
$DIR/integration_tests/tests/sqs.rs: `.get_queue_url(get_q_by_name_request)`
$DIR/integration_tests/tests/sqs.rs: `.get_queue_attributes(queue_attributes_req)`
$DIR/integration_tests/tests/sqs.rs: `.send_message_batch(send_msg_request)`
$DIR/integration_tests/tests/sqs.rs: `.receive_message(receive_request)`
$DIR/integration_tests/tests/sqs.rs: `.push(DeleteMessageBatchRequestEntry {
            receipt_handle: msg.receipt_handle.clone().unwrap(),
            id: msg.message_id.clone().unwrap(),
        })`
$DIR/integration_tests/tests/sqs.rs: `.delete_message_batch(delete_message_request)`
$DIR/integration_tests/tests/sqs.rs: `.delete_queue(queue_deletion_req)`
{"should_list_documents"}
$DIR/integration_tests/tests/ssm.rs: `.list_documents(request)`
{"should_list_commands"}
$DIR/integration_tests/tests/ssm.rs: `.list_commands(request)`
{"should_list_command_invocations"}
$DIR/integration_tests/tests/ssm.rs: `.list_command_invocations(request)`
{"should_list_state_machines"}
$DIR/integration_tests/tests/stepfunctions.rs: `.list_state_machines(request)`
{"should_list_gateways"}
$DIR/integration_tests/tests/storagegateway.rs: `.list_gateways(request)`
{"main"}
$DIR/integration_tests/tests/sts.rs: `.assume_role(AssumeRoleRequest {
            role_arn: "bogus".to_owned(),
            role_session_name: "rusoto_test_session".to_owned(),
            ..Default::default()
        })`
$DIR/integration_tests/tests/sts.rs: `.get_session_token(GetSessionTokenRequest {
            token_code: Some("123456".to_owned()),
            serial_number: Some("123456789".to_owned()),
            ..Default::default()
        })`
$DIR/integration_tests/tests/sts.rs: `.credentials()`
{"should_list_domains"}
$DIR/integration_tests/tests/swf.rs: `request.maximum_page_size = Some(10);`
$DIR/integration_tests/tests/swf.rs: `request.registration_status = "REGISTERED".to_string();`
$DIR/integration_tests/tests/swf.rs: `.list_domains(request)`
{"should_translate"}
$DIR/integration_tests/tests/translate.rs: `.translate_text(request)`
{"should_list_rules"}
$DIR/integration_tests/tests/waf-regional.rs: `.list_rules(request)`
{"should_describe_workspaces"}
$DIR/integration_tests/tests/workspaces.rs: `.describe_workspaces(request)`
{"should_get_service_graph"}
$DIR/integration_tests/tests/xray.rs: `.unix_timestamp()`
$DIR/integration_tests/tests/xray.rs: `.get_service_graph(request)`
{"proto::json::error::deserialize_dynamodb_error"}
$DIR/rusoto/core/src/proto/json/error.rs: `.into()`
{"proto::json::error::deserialize_athena_error"}
$DIR/rusoto/core/src/proto/json/error.rs: `.into()`
{"proto::xml::util::tests::peek_at_name_happy_path", "proto::xml::util::tests::string_field_happy_path", "proto::xml::util::tests::test_find_start_element"}
$DIR/rusoto/core/src/proto/xml/util.rs: `self.xml_stack.next();`
{"proto::xml::util::tests::end_element_happy_path", "proto::xml::util::tests::peek_at_name_happy_path", "proto::xml::util::tests::start_element_happy_path", "proto::xml::util::tests::string_field_happy_path", "proto::xml::util::tests::test_find_start_element"}
$DIR/rusoto/core/src/proto/xml/util.rs: `maybe_event = self.xml_stack.next();`
{"proto::xml::util::tests::string_field_happy_path"}
$DIR/rusoto/core/src/proto/xml/util.rs: `start_element(name, stack)?;`
$DIR/rusoto/core/src/proto/xml/util.rs: `end_element(name, stack)?;`
{"proto::xml::util::tests::start_element_happy_path", "proto::xml::util::tests::string_field_happy_path"}
$DIR/rusoto/core/src/proto/xml/util.rs: `attr_map.insert(attr.name.local_name, attr.value);`
{"proto::xml::util::tests::test_find_start_element"}
$DIR/rusoto/core/src/proto/xml/util.rs: `stack.next().unwrap().unwrap();`
{"proto::xml::util::tests::peek_at_name_happy_path", "proto::xml::util::tests::string_field_happy_path", "proto::xml::util::tests::test_find_start_element"}
$DIR/rusoto/core/src/proto/xml/util.rs: `.xml_stack.peek()`
$DIR/rusoto/core/src/proto/xml/util.rs: `.xml_stack.next()`
{"proto::xml::util::tests::end_element_happy_path", "proto::xml::util::tests::peek_at_name_happy_path", "proto::xml::util::tests::start_element_happy_path", "proto::xml::util::tests::string_field_happy_path", "proto::xml::util::tests::test_find_start_element"}
$DIR/rusoto/core/src/proto/xml/util.rs: `.xml_stack.next()`
{"proto::xml::util::tests::start_element_happy_path", "proto::xml::util::tests::string_field_happy_path"}
$DIR/rusoto/core/src/proto/xml/util.rs: `.insert(attr.name.local_name, attr.value)`
{"proto::xml::util::tests::peek_at_name_happy_path"}
$DIR/rusoto/core/src/proto/xml/util.rs: `.read_to_string(&mut body)`
$DIR/rusoto/core/src/proto/xml/util.rs: `.into_iter()`
$DIR/rusoto/core/src/proto/xml/util.rs: `.peekable()`
{"proto::xml::util::tests::start_element_happy_path"}
$DIR/rusoto/core/src/proto/xml/util.rs: `.read_to_string(&mut body)`
$DIR/rusoto/core/src/proto/xml/util.rs: `.into_iter()`
$DIR/rusoto/core/src/proto/xml/util.rs: `.peekable()`
{"proto::xml::util::tests::string_field_happy_path"}
$DIR/rusoto/core/src/proto/xml/util.rs: `.read_to_string(&mut body)`
$DIR/rusoto/core/src/proto/xml/util.rs: `.into_iter()`
$DIR/rusoto/core/src/proto/xml/util.rs: `.peekable()`
{"proto::xml::util::tests::end_element_happy_path"}
$DIR/rusoto/core/src/proto/xml/util.rs: `.read_to_string(&mut body)`
$DIR/rusoto/core/src/proto/xml/util.rs: `.into_iter()`
$DIR/rusoto/core/src/proto/xml/util.rs: `.peekable()`
{"proto::xml::util::tests::test_find_start_element"}
$DIR/rusoto/core/src/proto/xml/util.rs: `.into_iter()`
$DIR/rusoto/core/src/proto/xml/util.rs: `.peekable()`
{"serialization::tests::serialize_blob_list_when_empty", "serialization::tests::serialize_blob_list_when_has_content"}
$DIR/rusoto/core/src/serialization.rs: `seq.serialize_element(&SerializeWrapper(blob))?;`
{"serialization::tests::serialize_blob_when_empty", "serialization::tests::serialize_blob_when_has_content", "serialization::tests::serialize_optional_blob_when_empty", "serialization::tests::serialize_optional_blob_when_has_content", "serialization::tests::serialize_optional_blob_when_none"}
$DIR/rusoto/core/src/serialization.rs: `blob.serialize_blob(&mut json_serializer).unwrap();`
{"serialization::tests::serialize_blob_list_when_empty", "serialization::tests::serialize_blob_list_when_has_content"}
$DIR/rusoto/core/src/serialization.rs: `blob_list.serialize_blob_list(&mut json_serializer).unwrap();`
$DIR/rusoto/core/src/serialization.rs: `.serialize_seq(Some(self.len()))`
$DIR/rusoto/core/src/serialization.rs: `.len()`
$DIR/rusoto/core/src/serialization.rs: `.serialize_element(&SerializeWrapper(blob))`
{"container::tests::error_from_empty_env_vars", "container::tests::error_from_missing_env_vars", "container::tests::request_from_full_uri_with_empty_token", "container::tests::request_from_full_uri_with_token", "container::tests::request_from_full_uri_without_token", "container::tests::request_from_relative_uri"}
$DIR/rusoto/credential/src/container.rs: `request.headers_mut().insert("authorization", parsed_token);`
{"container::tests::request_from_relative_uri"}
$DIR/rusoto/credential/src/container.rs: `env::set_var(AWS_CONTAINER_CREDENTIALS_RELATIVE_URI, path);`
$DIR/rusoto/credential/src/container.rs: `env::set_var(AWS_CONTAINER_CREDENTIALS_FULL_URI, "dummy");`
$DIR/rusoto/credential/src/container.rs: `env::set_var(AWS_CONTAINER_AUTHORIZATION_TOKEN, "dummy");`
$DIR/rusoto/credential/src/container.rs: `env::remove_var(AWS_CONTAINER_CREDENTIALS_RELATIVE_URI);`
$DIR/rusoto/credential/src/container.rs: `env::remove_var(AWS_CONTAINER_CREDENTIALS_FULL_URI);`
$DIR/rusoto/credential/src/container.rs: `env::remove_var(AWS_CONTAINER_AUTHORIZATION_TOKEN);`
{"container::tests::error_from_missing_env_vars"}
$DIR/rusoto/credential/src/container.rs: `env::remove_var(AWS_CONTAINER_CREDENTIALS_RELATIVE_URI);`
$DIR/rusoto/credential/src/container.rs: `env::remove_var(AWS_CONTAINER_CREDENTIALS_FULL_URI);`
{"container::tests::error_from_empty_env_vars"}
$DIR/rusoto/credential/src/container.rs: `env::set_var(AWS_CONTAINER_CREDENTIALS_RELATIVE_URI, "");`
$DIR/rusoto/credential/src/container.rs: `env::set_var(AWS_CONTAINER_CREDENTIALS_FULL_URI, "");`
$DIR/rusoto/credential/src/container.rs: `env::set_var(AWS_CONTAINER_AUTHORIZATION_TOKEN, "");`
$DIR/rusoto/credential/src/container.rs: `env::remove_var(AWS_CONTAINER_CREDENTIALS_RELATIVE_URI);`
$DIR/rusoto/credential/src/container.rs: `env::remove_var(AWS_CONTAINER_CREDENTIALS_FULL_URI);`
$DIR/rusoto/credential/src/container.rs: `env::remove_var(AWS_CONTAINER_AUTHORIZATION_TOKEN);`
{"container::tests::request_from_full_uri_with_token"}
$DIR/rusoto/credential/src/container.rs: `env::remove_var(AWS_CONTAINER_CREDENTIALS_RELATIVE_URI);`
$DIR/rusoto/credential/src/container.rs: `env::set_var(AWS_CONTAINER_CREDENTIALS_FULL_URI, url);`
$DIR/rusoto/credential/src/container.rs: `env::set_var(AWS_CONTAINER_AUTHORIZATION_TOKEN, "dummy");`
$DIR/rusoto/credential/src/container.rs: `env::remove_var(AWS_CONTAINER_CREDENTIALS_FULL_URI);`
$DIR/rusoto/credential/src/container.rs: `env::remove_var(AWS_CONTAINER_AUTHORIZATION_TOKEN);`
{"container::tests::request_from_full_uri_without_token"}
$DIR/rusoto/credential/src/container.rs: `env::remove_var(AWS_CONTAINER_CREDENTIALS_RELATIVE_URI);`
$DIR/rusoto/credential/src/container.rs: `env::set_var(AWS_CONTAINER_CREDENTIALS_FULL_URI, url);`
$DIR/rusoto/credential/src/container.rs: `env::remove_var(AWS_CONTAINER_AUTHORIZATION_TOKEN);`
$DIR/rusoto/credential/src/container.rs: `env::remove_var(AWS_CONTAINER_CREDENTIALS_FULL_URI);`
{"container::tests::request_from_full_uri_with_empty_token"}
$DIR/rusoto/credential/src/container.rs: `env::remove_var(AWS_CONTAINER_CREDENTIALS_RELATIVE_URI);`
$DIR/rusoto/credential/src/container.rs: `env::set_var(AWS_CONTAINER_CREDENTIALS_FULL_URI, url);`
$DIR/rusoto/credential/src/container.rs: `env::set_var(AWS_CONTAINER_AUTHORIZATION_TOKEN, "");`
$DIR/rusoto/credential/src/container.rs: `env::remove_var(AWS_CONTAINER_CREDENTIALS_FULL_URI);`
$DIR/rusoto/credential/src/container.rs: `env::remove_var(AWS_CONTAINER_AUTHORIZATION_TOKEN);`
{"container::tests::error_from_empty_env_vars", "container::tests::error_from_missing_env_vars", "container::tests::request_from_full_uri_with_empty_token", "container::tests::request_from_full_uri_with_token", "container::tests::request_from_full_uri_without_token", "container::tests::request_from_relative_uri"}
$DIR/rusoto/credential/src/container.rs: `.map(|path| format!("http://{}{}", AWS_CREDENTIALS_PROVIDER_IP, path))`
$DIR/rusoto/credential/src/container.rs: `.parse()`
$DIR/rusoto/credential/src/container.rs: `.headers_mut()`
$DIR/rusoto/credential/src/container.rs: `.insert("authorization", parsed_token)`
$DIR/rusoto/credential/src/container.rs: `.body(Body::empty())`
{"container::tests::request_from_relative_uri"}
$DIR/rusoto/credential/src/container.rs: `.ok()`
{"container::tests::request_from_full_uri_with_token"}
$DIR/rusoto/credential/src/container.rs: `.ok()`
{"container::tests::request_from_full_uri_without_token"}
$DIR/rusoto/credential/src/container.rs: `.ok()`
{"container::tests::request_from_full_uri_with_empty_token"}
$DIR/rusoto/credential/src/container.rs: `.ok()`
{"environment::tests::get_temporary_credentials_from_env"}
$DIR/rusoto/credential/src/environment.rs: `env::set_var(AWS_ACCESS_KEY_ID, "id");`
$DIR/rusoto/credential/src/environment.rs: `env::set_var(AWS_SECRET_ACCESS_KEY, "secret");`
$DIR/rusoto/credential/src/environment.rs: `env::set_var(AWS_SESSION_TOKEN, "token");`
$DIR/rusoto/credential/src/environment.rs: `env::remove_var(AWS_ACCESS_KEY_ID);`
$DIR/rusoto/credential/src/environment.rs: `env::remove_var(AWS_SECRET_ACCESS_KEY);`
$DIR/rusoto/credential/src/environment.rs: `env::remove_var(AWS_SESSION_TOKEN);`
{"environment::tests::get_non_temporary_credentials_from_env"}
$DIR/rusoto/credential/src/environment.rs: `env::set_var(AWS_ACCESS_KEY_ID, "id");`
$DIR/rusoto/credential/src/environment.rs: `env::set_var(AWS_SECRET_ACCESS_KEY, "secret");`
$DIR/rusoto/credential/src/environment.rs: `env::remove_var(AWS_SESSION_TOKEN);`
$DIR/rusoto/credential/src/environment.rs: `env::remove_var(AWS_ACCESS_KEY_ID);`
$DIR/rusoto/credential/src/environment.rs: `env::remove_var(AWS_SECRET_ACCESS_KEY);`
{"environment::tests::environment_provider_missing_key_id"}
$DIR/rusoto/credential/src/environment.rs: `env::remove_var(AWS_ACCESS_KEY_ID);`
$DIR/rusoto/credential/src/environment.rs: `env::set_var(AWS_SECRET_ACCESS_KEY, "secret");`
$DIR/rusoto/credential/src/environment.rs: `env::remove_var(AWS_SESSION_TOKEN);`
$DIR/rusoto/credential/src/environment.rs: `env::remove_var(AWS_SECRET_ACCESS_KEY);`
{"environment::tests::environment_provider_missing_secret"}
$DIR/rusoto/credential/src/environment.rs: `env::remove_var(AWS_SECRET_ACCESS_KEY);`
$DIR/rusoto/credential/src/environment.rs: `env::set_var(AWS_ACCESS_KEY_ID, "id");`
$DIR/rusoto/credential/src/environment.rs: `env::remove_var(AWS_SESSION_TOKEN);`
$DIR/rusoto/credential/src/environment.rs: `env::remove_var(AWS_ACCESS_KEY_ID);`
{"environment::tests::environment_provider_missing_credentials"}
$DIR/rusoto/credential/src/environment.rs: `env::remove_var(AWS_SECRET_ACCESS_KEY);`
$DIR/rusoto/credential/src/environment.rs: `env::remove_var(AWS_ACCESS_KEY_ID);`
$DIR/rusoto/credential/src/environment.rs: `env::remove_var(AWS_SESSION_TOKEN);`
{"environment::tests::environment_provider_bad_expiration"}
$DIR/rusoto/credential/src/environment.rs: `env::set_var(AWS_ACCESS_KEY_ID, "id");`
$DIR/rusoto/credential/src/environment.rs: `env::set_var(AWS_SECRET_ACCESS_KEY, "secret");`
$DIR/rusoto/credential/src/environment.rs: `env::set_var(AWS_SESSION_TOKEN, "token");`
$DIR/rusoto/credential/src/environment.rs: `env::set_var(AWS_CREDENTIAL_EXPIRATION, "lore ipsum");`
$DIR/rusoto/credential/src/environment.rs: `env::remove_var(AWS_ACCESS_KEY_ID);`
$DIR/rusoto/credential/src/environment.rs: `env::remove_var(AWS_SECRET_ACCESS_KEY);`
$DIR/rusoto/credential/src/environment.rs: `env::remove_var(AWS_SESSION_TOKEN);`
$DIR/rusoto/credential/src/environment.rs: `env::remove_var(AWS_CREDENTIAL_EXPIRATION);`
{"environment::tests::get_temporary_credentials_with_expiration_from_env"}
$DIR/rusoto/credential/src/environment.rs: `env::set_var(AWS_ACCESS_KEY_ID, "id");`
$DIR/rusoto/credential/src/environment.rs: `env::set_var(AWS_SECRET_ACCESS_KEY, "secret");`
$DIR/rusoto/credential/src/environment.rs: `env::set_var(AWS_SESSION_TOKEN, "token");`
$DIR/rusoto/credential/src/environment.rs: `env::set_var(AWS_CREDENTIAL_EXPIRATION, now_str);`
$DIR/rusoto/credential/src/environment.rs: `env::remove_var(AWS_ACCESS_KEY_ID);`
$DIR/rusoto/credential/src/environment.rs: `env::remove_var(AWS_SECRET_ACCESS_KEY);`
$DIR/rusoto/credential/src/environment.rs: `env::remove_var(AWS_SESSION_TOKEN);`
$DIR/rusoto/credential/src/environment.rs: `env::remove_var(AWS_CREDENTIAL_EXPIRATION);`
{"environment::tests::regression_test_rfc_3339_compat"}
$DIR/rusoto/credential/src/environment.rs: `env::set_var(AWS_CREDENTIAL_EXPIRATION, "1996-12-19t16:39:57-08:00");`
$DIR/rusoto/credential/src/environment.rs: `env::set_var(AWS_ACCESS_KEY_ID, "id");`
$DIR/rusoto/credential/src/environment.rs: `env::set_var(AWS_SECRET_ACCESS_KEY, "secret");`
$DIR/rusoto/credential/src/environment.rs: `env::remove_var(AWS_CREDENTIAL_EXPIRATION);`
$DIR/rusoto/credential/src/environment.rs: `env::remove_var(AWS_ACCESS_KEY_ID);`
$DIR/rusoto/credential/src/environment.rs: `env::remove_var(AWS_SECRET_ACCESS_KEY);`
{"environment::tests::alternative_prefix"}
$DIR/rusoto/credential/src/environment.rs: `env::set_var("MYAPP_ACCESS_KEY_ID", "id");`
$DIR/rusoto/credential/src/environment.rs: `env::set_var("MYAPP_SECRET_ACCESS_KEY", "secret");`
$DIR/rusoto/credential/src/environment.rs: `env::set_var("MYAPP_SESSION_TOKEN", "token");`
$DIR/rusoto/credential/src/environment.rs: `env::set_var("MYAPP_CREDENTIAL_EXPIRATION", now_str);`
$DIR/rusoto/credential/src/environment.rs: `env::remove_var("MYAPP_ACCESS_KEY_ID");`
$DIR/rusoto/credential/src/environment.rs: `env::remove_var("MYAPP_SECRET_ACCESS_KEY");`
$DIR/rusoto/credential/src/environment.rs: `env::remove_var("MYAPP_SESSION_TOKEN");`
$DIR/rusoto/credential/src/environment.rs: `env::remove_var("MYAPP_CREDENTIAL_EXPIRATION");`
{"environment::tests::alternative_prefix", "environment::tests::environment_provider_bad_expiration", "environment::tests::environment_provider_missing_credentials", "environment::tests::environment_provider_missing_key_id", "environment::tests::environment_provider_missing_secret", "environment::tests::get_non_temporary_credentials_from_env", "environment::tests::get_temporary_credentials_from_env", "environment::tests::get_temporary_credentials_with_expiration_from_env", "environment::tests::regression_test_rfc_3339_compat"}
$DIR/rusoto/credential/src/environment.rs: `.access_key_id_var()`
$DIR/rusoto/credential/src/environment.rs: `.secret_access_key_var()`
$DIR/rusoto/credential/src/environment.rs: `.session_token_var()`
$DIR/rusoto/credential/src/environment.rs: `.credential_expiration_var()`
$DIR/rusoto/credential/src/environment.rs: `.map(|dt| dt.with_timezone(&Utc))`
$DIR/rusoto/credential/src/environment.rs: `.with_timezone(&Utc)`
$DIR/rusoto/credential/src/environment.rs: `.map_err(|e| {
                        CredentialsError::new(format!(
                            "Invalid {} in environment '{}': {}",
                            var_name, val, e
                        ))
                    })`
{"environment::tests::get_temporary_credentials_from_env"}
$DIR/rusoto/credential/src/environment.rs: `.ok()`
{"environment::tests::get_non_temporary_credentials_from_env"}
$DIR/rusoto/credential/src/environment.rs: `.ok()`
{"environment::tests::get_temporary_credentials_with_expiration_from_env"}
$DIR/rusoto/credential/src/environment.rs: `.to_rfc3339()`
$DIR/rusoto/credential/src/environment.rs: `.ok()`
{"environment::tests::alternative_prefix"}
$DIR/rusoto/credential/src/environment.rs: `.to_rfc3339()`
$DIR/rusoto/credential/src/environment.rs: `.ok()`
{"tests::providers_are_send_and_sync"}
$DIR/rusoto/credential/src/lib.rs: `is_send_and_sync::<ChainProvider>();`
$DIR/rusoto/credential/src/lib.rs: `is_send_and_sync::<AutoRefreshingProvider<ChainProvider>>();`
{"profile::tests::profile_provider_profile_name"}
$DIR/rusoto/credential/src/profile.rs: `self.profile = profile.into();`
{"profile::tests::profile_provider_bad_profile", "profile::tests::profile_provider_credential_process", "profile::tests::profile_provider_happy_path", "profile::tests::profile_provider_profile_name_via_environment_variable", "profile::tests::region_from_profile", "profile::tests::region_from_profile_missing_profile"}
$DIR/rusoto/credential/src/profile.rs: `(*values).insert((*key).to_string(), (*value).to_string());`
{"profile::tests::profile_provider_bad_profile", "profile::tests::profile_provider_credential_process", "profile::tests::profile_provider_happy_path", "profile::tests::profile_provider_profile_name_via_environment_variable"}
$DIR/rusoto/credential/src/profile.rs: `profiles.insert(profile, creds);`
$DIR/rusoto/credential/src/profile.rs: `access_key = None;`
$DIR/rusoto/credential/src/profile.rs: `secret_key = None;`
$DIR/rusoto/credential/src/profile.rs: `token = None;`
$DIR/rusoto/credential/src/profile.rs: `profile_name = Some(new_profile_name.to_owned());`
$DIR/rusoto/credential/src/profile.rs: `access_key = Some(v[1].trim_matches(' ').to_string());`
$DIR/rusoto/credential/src/profile.rs: `secret_key = Some(v[1].trim_matches(' ').to_string());`
$DIR/rusoto/credential/src/profile.rs: `token = Some(v[1].trim_matches(' ').to_string());`
$DIR/rusoto/credential/src/profile.rs: `token = Some(v[1].trim_matches(' ').to_string());`
$DIR/rusoto/credential/src/profile.rs: `profiles.insert(profile, creds);`
$DIR/rusoto/credential/src/profile.rs: `command.args(iter);`
{"profile::tests::profile_provider_via_environment_variable"}
$DIR/rusoto/credential/src/profile.rs: `env::set_var(AWS_SHARED_CREDENTIALS_FILE, credentials_path);`
{"profile::tests::profile_provider_profile_name_via_environment_variable"}
$DIR/rusoto/credential/src/profile.rs: `env::set_var(AWS_SHARED_CREDENTIALS_FILE, credentials_path);`
$DIR/rusoto/credential/src/profile.rs: `env::set_var(AWS_PROFILE, "bar");`
$DIR/rusoto/credential/src/profile.rs: `env::remove_var(AWS_SHARED_CREDENTIALS_FILE);`
{"profile::tests::profile_provider_credential_process"}
$DIR/rusoto/credential/src/profile.rs: `env::set_var(
            AWS_CONFIG_FILE,
            "tests/sample-data/credential_process_config",
        );`
{"profile::tests::default_profile_name_from_env_var"}
$DIR/rusoto/credential/src/profile.rs: `env::set_var(AWS_PROFILE, "bar");`
{"profile::tests::default_profile_name_from_empty_env_var"}
$DIR/rusoto/credential/src/profile.rs: `env::set_var(AWS_PROFILE, "");`
{"profile::tests::default_profile_name"}
$DIR/rusoto/credential/src/profile.rs: `env::remove_var(AWS_PROFILE);`
{"profile::tests::default_profile_location_from_env_var"}
$DIR/rusoto/credential/src/profile.rs: `env::set_var(AWS_SHARED_CREDENTIALS_FILE, "bar");`
{"profile::tests::default_profile_location_from_empty_env_var"}
$DIR/rusoto/credential/src/profile.rs: `env::set_var(AWS_SHARED_CREDENTIALS_FILE, "");`
{"profile::tests::default_profile_location"}
$DIR/rusoto/credential/src/profile.rs: `env::remove_var(AWS_SHARED_CREDENTIALS_FILE);`
{"profile::tests::region_from_profile", "profile::tests::region_from_profile_missing_profile"}
$DIR/rusoto/credential/src/profile.rs: `.and_then(|config| {
                config
                    .get(&self.profile)
                    .and_then(|props| props.get(REGION))
                    .map(std::borrow::ToOwned::to_owned)
            })`
$DIR/rusoto/credential/src/profile.rs: `.get(&self.profile)`
$DIR/rusoto/credential/src/profile.rs: `.and_then(|props| props.get(REGION))`
$DIR/rusoto/credential/src/profile.rs: `.get(REGION)`
{"profile::tests::profile_provider_profile_name"}
$DIR/rusoto/credential/src/profile.rs: `.into()`
{"profile::tests::profile_provider_bad_profile", "profile::tests::profile_provider_credential_process", "profile::tests::profile_provider_happy_path", "profile::tests::profile_provider_profile_name_via_environment_variable"}
$DIR/rusoto/credential/src/profile.rs: `.map(|location| {
            parse_config_file(&location).and_then(|config| {
                config
                    .get(&ProfileProvider::default_profile_name())
                    .and_then(|props| props.get("credential_process"))
                    .map(std::borrow::ToOwned::to_owned)
            })
        })`
$DIR/rusoto/credential/src/profile.rs: `.get(&ProfileProvider::default_profile_name())`
$DIR/rusoto/credential/src/profile.rs: `.and_then(|props| props.get("credential_process"))`
$DIR/rusoto/credential/src/profile.rs: `.get("credential_process")`
$DIR/rusoto/credential/src/profile.rs: `.output()`
$DIR/rusoto/credential/src/profile.rs: `.map_err(|e| {
                    CredentialsError::new(format!("Credential process failed: {:?}", e))
                })`
$DIR/rusoto/credential/src/profile.rs: `.remove(self.profile())`
$DIR/rusoto/credential/src/profile.rs: `.trim()`
$DIR/rusoto/credential/src/profile.rs: `.strip_suffix("]")`
$DIR/rusoto/credential/src/profile.rs: `.strip_prefix("[profile ")`
$DIR/rusoto/credential/src/profile.rs: `.strip_prefix("[")`
{"profile::tests::profile_provider_bad_profile", "profile::tests::profile_provider_credential_process", "profile::tests::profile_provider_happy_path", "profile::tests::profile_provider_profile_name_via_environment_variable", "profile::tests::region_from_profile", "profile::tests::region_from_profile_missing_profile"}
$DIR/rusoto/credential/src/profile.rs: `.is_file()`
$DIR/rusoto/credential/src/profile.rs: `.lines()`
$DIR/rusoto/credential/src/profile.rs: `.filter_map(|line| {
            line.ok()
                .map(|l| l.trim_matches(' ').to_owned())
                .into_iter()
                .find(|l| !l.starts_with('#') && !l.is_empty())
        })`
$DIR/rusoto/credential/src/profile.rs: `.ok()`
$DIR/rusoto/credential/src/profile.rs: `.map(|l| l.trim_matches(' ').to_owned())`
$DIR/rusoto/credential/src/profile.rs: `.trim_matches(' ')`
$DIR/rusoto/credential/src/profile.rs: `.into_iter()`
$DIR/rusoto/credential/src/profile.rs: `.starts_with('#')`
$DIR/rusoto/credential/src/profile.rs: `.is_empty()`
$DIR/rusoto/credential/src/profile.rs: `.fold(Default::default(), |(mut result, profile), line| {
            if let Some(next_profile) = parse_profile_name(&line) {
                (result, Some(next_profile.to_owned()))
            } else {
                match &line
                    .splitn(2, '=')
                    .map(|value| value.trim_matches(' '))
                    .collect::<Vec<&str>>()[..]
                {
                    [key, value] if !key.is_empty() && !value.is_empty() => {
                        if let Some(current) = profile.clone() {
                            let values = result.entry(current).or_insert_with(HashMap::new);
                            (*values).insert((*key).to_string(), (*value).to_string());
                        }
                        (result, profile)
                    }
                    _ => (result, profile),
                }
            }
        })`
$DIR/rusoto/credential/src/profile.rs: `.splitn(2, '=')`
$DIR/rusoto/credential/src/profile.rs: `.map(|value| value.trim_matches(' '))`
$DIR/rusoto/credential/src/profile.rs: `.trim_matches(' ')`
$DIR/rusoto/credential/src/profile.rs: `.collect::<Vec<&str>>()`
$DIR/rusoto/credential/src/profile.rs: `.is_empty()`
$DIR/rusoto/credential/src/profile.rs: `.is_empty()`
$DIR/rusoto/credential/src/profile.rs: `.entry(current)`
$DIR/rusoto/credential/src/profile.rs: `.or_insert_with(HashMap::new)`
$DIR/rusoto/credential/src/profile.rs: `.insert((*key).to_string(), (*value).to_string())`
{"profile::tests::profile_provider_bad_profile", "profile::tests::profile_provider_credential_process", "profile::tests::profile_provider_happy_path", "profile::tests::profile_provider_profile_name_via_environment_variable"}
$DIR/rusoto/credential/src/profile.rs: `.is_file()`
$DIR/rusoto/credential/src/profile.rs: `.lines()`
$DIR/rusoto/credential/src/profile.rs: `.enumerate()`
$DIR/rusoto/credential/src/profile.rs: `.unwrap_or_else(|_| panic!("Failed to read credentials file, line: {}", line_no))`
$DIR/rusoto/credential/src/profile.rs: `.is_empty()`
$DIR/rusoto/credential/src/profile.rs: `.starts_with('#')`
$DIR/rusoto/credential/src/profile.rs: `.insert(profile, creds)`
$DIR/rusoto/credential/src/profile.rs: `.to_ascii_lowercase()`
$DIR/rusoto/credential/src/profile.rs: `.contains("aws_access_key_id")`
$DIR/rusoto/credential/src/profile.rs: `.is_none()`
$DIR/rusoto/credential/src/profile.rs: `.split('=')`
$DIR/rusoto/credential/src/profile.rs: `.collect()`
$DIR/rusoto/credential/src/profile.rs: `.is_empty()`
$DIR/rusoto/credential/src/profile.rs: `.trim_matches(' ')`
$DIR/rusoto/credential/src/profile.rs: `.contains("aws_secret_access_key")`
$DIR/rusoto/credential/src/profile.rs: `.is_none()`
$DIR/rusoto/credential/src/profile.rs: `.split('=')`
$DIR/rusoto/credential/src/profile.rs: `.collect()`
$DIR/rusoto/credential/src/profile.rs: `.is_empty()`
$DIR/rusoto/credential/src/profile.rs: `.trim_matches(' ')`
$DIR/rusoto/credential/src/profile.rs: `.contains("aws_session_token")`
$DIR/rusoto/credential/src/profile.rs: `.is_none()`
$DIR/rusoto/credential/src/profile.rs: `.split('=')`
$DIR/rusoto/credential/src/profile.rs: `.collect()`
$DIR/rusoto/credential/src/profile.rs: `.is_empty()`
$DIR/rusoto/credential/src/profile.rs: `.trim_matches(' ')`
$DIR/rusoto/credential/src/profile.rs: `.contains("aws_security_token")`
$DIR/rusoto/credential/src/profile.rs: `.is_none()`
$DIR/rusoto/credential/src/profile.rs: `.split('=')`
$DIR/rusoto/credential/src/profile.rs: `.collect()`
$DIR/rusoto/credential/src/profile.rs: `.is_empty()`
$DIR/rusoto/credential/src/profile.rs: `.trim_matches(' ')`
$DIR/rusoto/credential/src/profile.rs: `.insert(profile, creds)`
$DIR/rusoto/credential/src/profile.rs: `.is_empty()`
$DIR/rusoto/credential/src/profile.rs: `.ok_or_else(|| CredentialsError::new("Unable to parse credential_process value."))`
$DIR/rusoto/credential/src/profile.rs: `.next()`
$DIR/rusoto/credential/src/profile.rs: `.ok_or_else(|| CredentialsError::new("credential_process value is empty."))`
$DIR/rusoto/credential/src/profile.rs: `.args(iter)`
{"profile::tests::parse_config_file_default_profile"}
$DIR/rusoto/credential/src/profile.rs: `.get(DEFAULT)`
{"profile::tests::parse_config_file_multiple_profiles"}
$DIR/rusoto/credential/src/profile.rs: `.get("foo")`
$DIR/rusoto/credential/src/profile.rs: `.get("bar")`
{"profile::tests::parse_config_file_credential_process"}
$DIR/rusoto/credential/src/profile.rs: `.get(DEFAULT)`
{"profile::tests::parse_credentials_file_default_profile"}
$DIR/rusoto/credential/src/profile.rs: `.ok()`
$DIR/rusoto/credential/src/profile.rs: `.get(DEFAULT)`
{"profile::tests::parse_credentials_file_multiple_profiles"}
$DIR/rusoto/credential/src/profile.rs: `.ok()`
$DIR/rusoto/credential/src/profile.rs: `.get("foo")`
$DIR/rusoto/credential/src/profile.rs: `.get("bar")`
{"profile::tests::parse_all_values_credentials_file"}
$DIR/rusoto/credential/src/profile.rs: `.ok()`
$DIR/rusoto/credential/src/profile.rs: `.get(DEFAULT)`
{"profile::tests::profile_provider_happy_path"}
$DIR/rusoto/credential/src/profile.rs: `.ok()`
{"profile::tests::profile_provider_credential_process"}
$DIR/rusoto/credential/src/profile.rs: `.ok()`
{"profile::tests::parse_credentials_unrecognized_field"}
$DIR/rusoto/credential/src/profile.rs: `.ok()`
$DIR/rusoto/credential/src/profile.rs: `.get(DEFAULT)`
{"static_provider::tests::test_static_provider_creation", "static_provider::tests::test_static_provider_custom_time_expiration", "static_provider::tests::test_static_provider_expiration_time_is_recalculated", "static_provider::tests::test_static_provider_minimal_creation"}
$DIR/rusoto/credential/src/static_provider.rs: `creds.expires_at = self.valid_for.map(|v| Utc::now() + Duration::seconds(v));`
{"static_provider::tests::test_static_provider_expiration_time_is_recalculated"}
$DIR/rusoto/credential/src/static_provider.rs: `thread::sleep(time::Duration::from_secs(1));`
{"static_provider::tests::test_static_provider_creation", "static_provider::tests::test_static_provider_custom_time_expiration", "static_provider::tests::test_static_provider_expiration_time_is_recalculated", "static_provider::tests::test_static_provider_minimal_creation"}
$DIR/rusoto/credential/src/static_provider.rs: `.valid_for.map(|v| Utc::now() + Duration::seconds(v))`
{"static_provider::tests::test_static_provider_custom_time_expiration"}
$DIR/rusoto/credential/src/static_provider.rs: `.expires_at()`
{"variable::test::from_env_var"}
$DIR/rusoto/credential/src/variable.rs: `std::env::set_var(VALUE, VALUE);`
$DIR/rusoto/credential/src/variable.rs: `std::env::remove_var(VALUE);`
{"variable::test::from_empty_env_var"}
$DIR/rusoto/credential/src/variable.rs: `std::env::set_var(VALUE, "");`
{"variable::test::from_text_file"}
$DIR/rusoto/credential/src/variable.rs: `writeln!(file, "{}", VALUE)?;`
{"variable::test::from_binary_file"}
$DIR/rusoto/credential/src/variable.rs: `file.write(VALUE)?;`
{"variable::test::api_ergonomics"}
$DIR/rusoto/credential/src/variable.rs: `.into()`
$DIR/rusoto/credential/src/variable.rs: `.into()`
$DIR/rusoto/credential/src/variable.rs: `.into()`
{"variable::test::from_text_file"}
$DIR/rusoto/credential/src/variable.rs: `.path()`
{"variable::test::from_binary_file"}
$DIR/rusoto/credential/src/variable.rs: `.write(VALUE)`
$DIR/rusoto/credential/src/variable.rs: `.path()`
{"it_fetches_basic_role"}
$DIR/rusoto/credential/tests/instance-profile-test.rs: `provider.set_timeout(Duration::from_secs(5));`
$DIR/rusoto/credential/tests/instance-profile-test.rs: `provider.set_ip_addr_with_port("127.0.0.1", "8080");`
$DIR/rusoto/credential/tests/instance-profile-test.rs: `.set_timeout(Duration::from_secs(5))`
$DIR/rusoto/credential/tests/instance-profile-test.rs: `.set_ip_addr_with_port("127.0.0.1", "8080")`
$DIR/rusoto/credential/tests/instance-profile-test.rs: `.credentials()`
$DIR/rusoto/credential/tests/instance-profile-test.rs: `.expires_at()`
{"custom::custom_tests::register_scalable_target_happy_path"}
$DIR/rusoto/services/application-autoscaling/src/custom/custom_tests.rs: `.with_body(&body)`
$DIR/rusoto/services/application-autoscaling/src/custom/custom_tests.rs: `.register_scalable_target(Default::default())`
{"custom::custom_tests::register_scalable_target_returs_empty_body"}
$DIR/rusoto/services/application-autoscaling/src/custom/custom_tests.rs: `.with_body(&body)`
$DIR/rusoto/services/application-autoscaling/src/custom/custom_tests.rs: `.register_scalable_target(Default::default())`
{"generated::protocol_tests::test_parse_error_autoscaling_delete_policy", "generated::protocol_tests::test_parse_valid_autoscaling_describe_adjustment_types", "generated::protocol_tests::test_parse_valid_autoscaling_describe_auto_scaling_groups", "generated::protocol_tests::test_parse_valid_autoscaling_describe_auto_scaling_instances", "generated::protocol_tests::test_parse_valid_autoscaling_describe_auto_scaling_notification_types", "generated::protocol_tests::test_parse_valid_autoscaling_describe_launch_configurations", "generated::protocol_tests::test_parse_valid_autoscaling_describe_metric_collection_types", "generated::protocol_tests::test_parse_valid_autoscaling_describe_notification_configurations", "generated::protocol_tests::test_parse_valid_autoscaling_describe_policies", "generated::protocol_tests::test_parse_valid_autoscaling_describe_scaling_activities", "generated::protocol_tests::test_parse_valid_autoscaling_describe_scaling_process_types", "generated::protocol_tests::test_parse_valid_autoscaling_describe_scheduled_actions", "generated::protocol_tests::test_parse_valid_autoscaling_describe_tags", "generated::protocol_tests::test_parse_valid_autoscaling_describe_termination_policy_types"}
$DIR/rusoto/services/autoscaling/src/generated.rs: `params.put("Action", operation_name);`
$DIR/rusoto/services/autoscaling/src/generated.rs: `params.put("Version", "2011-01-01");`
{"generated::protocol_tests::test_parse_error_autoscaling_delete_policy"}
$DIR/rusoto/services/autoscaling/src/generated.rs: `DeletePolicyTypeSerializer::serialize(&mut params, "", &input);`
$DIR/rusoto/services/autoscaling/src/generated.rs: `request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));`
$DIR/rusoto/services/autoscaling/src/generated.rs: `request.set_content_type("application/x-www-form-urlencoded".to_owned());`
$DIR/rusoto/services/autoscaling/src/generated.rs: `std::mem::drop(response);`
{"generated::protocol_tests::test_parse_valid_autoscaling_describe_adjustment_types"}
$DIR/rusoto/services/autoscaling/src/generated.rs: `request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));`
$DIR/rusoto/services/autoscaling/src/generated.rs: `request.set_content_type("application/x-www-form-urlencoded".to_owned());`
$DIR/rusoto/services/autoscaling/src/generated.rs: `xml_util::start_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/autoscaling/src/generated.rs: `skip_tree(stack);`
$DIR/rusoto/services/autoscaling/src/generated.rs: `xml_util::end_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/autoscaling/src/generated.rs: `drop(response);`
{"generated::protocol_tests::test_parse_valid_autoscaling_describe_auto_scaling_groups"}
$DIR/rusoto/services/autoscaling/src/generated.rs: `AutoScalingGroupNamesTypeSerializer::serialize(&mut params, "", &input);`
$DIR/rusoto/services/autoscaling/src/generated.rs: `request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));`
$DIR/rusoto/services/autoscaling/src/generated.rs: `request.set_content_type("application/x-www-form-urlencoded".to_owned());`
$DIR/rusoto/services/autoscaling/src/generated.rs: `xml_util::start_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/autoscaling/src/generated.rs: `skip_tree(stack);`
$DIR/rusoto/services/autoscaling/src/generated.rs: `xml_util::end_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/autoscaling/src/generated.rs: `drop(response);`
{"generated::protocol_tests::test_parse_valid_autoscaling_describe_auto_scaling_instances"}
$DIR/rusoto/services/autoscaling/src/generated.rs: `DescribeAutoScalingInstancesTypeSerializer::serialize(&mut params, "", &input);`
$DIR/rusoto/services/autoscaling/src/generated.rs: `request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));`
$DIR/rusoto/services/autoscaling/src/generated.rs: `request.set_content_type("application/x-www-form-urlencoded".to_owned());`
$DIR/rusoto/services/autoscaling/src/generated.rs: `xml_util::start_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/autoscaling/src/generated.rs: `skip_tree(stack);`
$DIR/rusoto/services/autoscaling/src/generated.rs: `xml_util::end_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/autoscaling/src/generated.rs: `drop(response);`
{"generated::protocol_tests::test_parse_valid_autoscaling_describe_auto_scaling_notification_types"}
$DIR/rusoto/services/autoscaling/src/generated.rs: `request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));`
$DIR/rusoto/services/autoscaling/src/generated.rs: `request.set_content_type("application/x-www-form-urlencoded".to_owned());`
$DIR/rusoto/services/autoscaling/src/generated.rs: `xml_util::start_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/autoscaling/src/generated.rs: `skip_tree(stack);`
$DIR/rusoto/services/autoscaling/src/generated.rs: `xml_util::end_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/autoscaling/src/generated.rs: `drop(response);`
{"generated::protocol_tests::test_parse_valid_autoscaling_describe_launch_configurations"}
$DIR/rusoto/services/autoscaling/src/generated.rs: `LaunchConfigurationNamesTypeSerializer::serialize(&mut params, "", &input);`
$DIR/rusoto/services/autoscaling/src/generated.rs: `request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));`
$DIR/rusoto/services/autoscaling/src/generated.rs: `request.set_content_type("application/x-www-form-urlencoded".to_owned());`
$DIR/rusoto/services/autoscaling/src/generated.rs: `xml_util::start_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/autoscaling/src/generated.rs: `skip_tree(stack);`
$DIR/rusoto/services/autoscaling/src/generated.rs: `xml_util::end_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/autoscaling/src/generated.rs: `drop(response);`
{"generated::protocol_tests::test_parse_valid_autoscaling_describe_metric_collection_types"}
$DIR/rusoto/services/autoscaling/src/generated.rs: `request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));`
$DIR/rusoto/services/autoscaling/src/generated.rs: `request.set_content_type("application/x-www-form-urlencoded".to_owned());`
$DIR/rusoto/services/autoscaling/src/generated.rs: `xml_util::start_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/autoscaling/src/generated.rs: `skip_tree(stack);`
$DIR/rusoto/services/autoscaling/src/generated.rs: `xml_util::end_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/autoscaling/src/generated.rs: `drop(response);`
{"generated::protocol_tests::test_parse_valid_autoscaling_describe_notification_configurations"}
$DIR/rusoto/services/autoscaling/src/generated.rs: `DescribeNotificationConfigurationsTypeSerializer::serialize(&mut params, "", &input);`
$DIR/rusoto/services/autoscaling/src/generated.rs: `request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));`
$DIR/rusoto/services/autoscaling/src/generated.rs: `request.set_content_type("application/x-www-form-urlencoded".to_owned());`
$DIR/rusoto/services/autoscaling/src/generated.rs: `xml_util::start_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/autoscaling/src/generated.rs: `skip_tree(stack);`
$DIR/rusoto/services/autoscaling/src/generated.rs: `xml_util::end_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/autoscaling/src/generated.rs: `drop(response);`
{"generated::protocol_tests::test_parse_valid_autoscaling_describe_policies"}
$DIR/rusoto/services/autoscaling/src/generated.rs: `DescribePoliciesTypeSerializer::serialize(&mut params, "", &input);`
$DIR/rusoto/services/autoscaling/src/generated.rs: `request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));`
$DIR/rusoto/services/autoscaling/src/generated.rs: `request.set_content_type("application/x-www-form-urlencoded".to_owned());`
$DIR/rusoto/services/autoscaling/src/generated.rs: `xml_util::start_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/autoscaling/src/generated.rs: `skip_tree(stack);`
$DIR/rusoto/services/autoscaling/src/generated.rs: `xml_util::end_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/autoscaling/src/generated.rs: `drop(response);`
{"generated::protocol_tests::test_parse_valid_autoscaling_describe_scaling_activities"}
$DIR/rusoto/services/autoscaling/src/generated.rs: `DescribeScalingActivitiesTypeSerializer::serialize(&mut params, "", &input);`
$DIR/rusoto/services/autoscaling/src/generated.rs: `request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));`
$DIR/rusoto/services/autoscaling/src/generated.rs: `request.set_content_type("application/x-www-form-urlencoded".to_owned());`
$DIR/rusoto/services/autoscaling/src/generated.rs: `xml_util::start_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/autoscaling/src/generated.rs: `skip_tree(stack);`
$DIR/rusoto/services/autoscaling/src/generated.rs: `xml_util::end_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/autoscaling/src/generated.rs: `drop(response);`
{"generated::protocol_tests::test_parse_valid_autoscaling_describe_scaling_process_types"}
$DIR/rusoto/services/autoscaling/src/generated.rs: `request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));`
$DIR/rusoto/services/autoscaling/src/generated.rs: `request.set_content_type("application/x-www-form-urlencoded".to_owned());`
$DIR/rusoto/services/autoscaling/src/generated.rs: `xml_util::start_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/autoscaling/src/generated.rs: `skip_tree(stack);`
$DIR/rusoto/services/autoscaling/src/generated.rs: `xml_util::end_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/autoscaling/src/generated.rs: `drop(response);`
{"generated::protocol_tests::test_parse_valid_autoscaling_describe_scheduled_actions"}
$DIR/rusoto/services/autoscaling/src/generated.rs: `DescribeScheduledActionsTypeSerializer::serialize(&mut params, "", &input);`
$DIR/rusoto/services/autoscaling/src/generated.rs: `request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));`
$DIR/rusoto/services/autoscaling/src/generated.rs: `request.set_content_type("application/x-www-form-urlencoded".to_owned());`
$DIR/rusoto/services/autoscaling/src/generated.rs: `xml_util::start_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/autoscaling/src/generated.rs: `skip_tree(stack);`
$DIR/rusoto/services/autoscaling/src/generated.rs: `xml_util::end_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/autoscaling/src/generated.rs: `drop(response);`
{"generated::protocol_tests::test_parse_valid_autoscaling_describe_tags"}
$DIR/rusoto/services/autoscaling/src/generated.rs: `DescribeTagsTypeSerializer::serialize(&mut params, "", &input);`
$DIR/rusoto/services/autoscaling/src/generated.rs: `request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));`
$DIR/rusoto/services/autoscaling/src/generated.rs: `request.set_content_type("application/x-www-form-urlencoded".to_owned());`
$DIR/rusoto/services/autoscaling/src/generated.rs: `xml_util::start_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/autoscaling/src/generated.rs: `skip_tree(stack);`
$DIR/rusoto/services/autoscaling/src/generated.rs: `xml_util::end_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/autoscaling/src/generated.rs: `drop(response);`
{"generated::protocol_tests::test_parse_valid_autoscaling_describe_termination_policy_types"}
$DIR/rusoto/services/autoscaling/src/generated.rs: `request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));`
$DIR/rusoto/services/autoscaling/src/generated.rs: `request.set_content_type("application/x-www-form-urlencoded".to_owned());`
$DIR/rusoto/services/autoscaling/src/generated.rs: `xml_util::start_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/autoscaling/src/generated.rs: `skip_tree(stack);`
$DIR/rusoto/services/autoscaling/src/generated.rs: `xml_util::end_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/autoscaling/src/generated.rs: `drop(response);`
{"generated::protocol_tests::test_parse_error_autoscaling_delete_policy", "generated::protocol_tests::test_parse_valid_autoscaling_describe_adjustment_types", "generated::protocol_tests::test_parse_valid_autoscaling_describe_auto_scaling_groups", "generated::protocol_tests::test_parse_valid_autoscaling_describe_auto_scaling_instances", "generated::protocol_tests::test_parse_valid_autoscaling_describe_auto_scaling_notification_types", "generated::protocol_tests::test_parse_valid_autoscaling_describe_launch_configurations", "generated::protocol_tests::test_parse_valid_autoscaling_describe_metric_collection_types", "generated::protocol_tests::test_parse_valid_autoscaling_describe_notification_configurations", "generated::protocol_tests::test_parse_valid_autoscaling_describe_policies", "generated::protocol_tests::test_parse_valid_autoscaling_describe_scaling_activities", "generated::protocol_tests::test_parse_valid_autoscaling_describe_scaling_process_types", "generated::protocol_tests::test_parse_valid_autoscaling_describe_scheduled_actions", "generated::protocol_tests::test_parse_valid_autoscaling_describe_tags", "generated::protocol_tests::test_parse_valid_autoscaling_describe_termination_policy_types"}
$DIR/rusoto/services/autoscaling/src/generated.rs: `.put("Action", operation_name)`
$DIR/rusoto/services/autoscaling/src/generated.rs: `.put("Version", "2011-01-01")`
$DIR/rusoto/services/autoscaling/src/generated.rs: `.client.sign_and_dispatch(request)`
$DIR/rusoto/services/autoscaling/src/generated.rs: `.status.is_success()`
$DIR/rusoto/services/autoscaling/src/generated.rs: `.buffer()`
$DIR/rusoto/services/autoscaling/src/generated.rs: `.map_err(RusotoError::HttpDispatch)`
{"generated::protocol_tests::test_parse_error_autoscaling_delete_policy"}
$DIR/rusoto/services/autoscaling/src/generated.rs: `.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()))`
$DIR/rusoto/services/autoscaling/src/generated.rs: `.set_content_type("application/x-www-form-urlencoded".to_owned())`
{"generated::protocol_tests::test_parse_valid_autoscaling_describe_adjustment_types"}
$DIR/rusoto/services/autoscaling/src/generated.rs: `.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()))`
$DIR/rusoto/services/autoscaling/src/generated.rs: `.set_content_type("application/x-www-form-urlencoded".to_owned())`
{"generated::protocol_tests::test_parse_valid_autoscaling_describe_auto_scaling_groups"}
$DIR/rusoto/services/autoscaling/src/generated.rs: `.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()))`
$DIR/rusoto/services/autoscaling/src/generated.rs: `.set_content_type("application/x-www-form-urlencoded".to_owned())`
{"generated::protocol_tests::test_parse_valid_autoscaling_describe_auto_scaling_instances"}
$DIR/rusoto/services/autoscaling/src/generated.rs: `.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()))`
$DIR/rusoto/services/autoscaling/src/generated.rs: `.set_content_type("application/x-www-form-urlencoded".to_owned())`
{"generated::protocol_tests::test_parse_valid_autoscaling_describe_auto_scaling_notification_types"}
$DIR/rusoto/services/autoscaling/src/generated.rs: `.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()))`
$DIR/rusoto/services/autoscaling/src/generated.rs: `.set_content_type("application/x-www-form-urlencoded".to_owned())`
{"generated::protocol_tests::test_parse_valid_autoscaling_describe_launch_configurations"}
$DIR/rusoto/services/autoscaling/src/generated.rs: `.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()))`
$DIR/rusoto/services/autoscaling/src/generated.rs: `.set_content_type("application/x-www-form-urlencoded".to_owned())`
{"generated::protocol_tests::test_parse_valid_autoscaling_describe_metric_collection_types"}
$DIR/rusoto/services/autoscaling/src/generated.rs: `.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()))`
$DIR/rusoto/services/autoscaling/src/generated.rs: `.set_content_type("application/x-www-form-urlencoded".to_owned())`
{"generated::protocol_tests::test_parse_valid_autoscaling_describe_notification_configurations"}
$DIR/rusoto/services/autoscaling/src/generated.rs: `.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()))`
$DIR/rusoto/services/autoscaling/src/generated.rs: `.set_content_type("application/x-www-form-urlencoded".to_owned())`
{"generated::protocol_tests::test_parse_valid_autoscaling_describe_policies"}
$DIR/rusoto/services/autoscaling/src/generated.rs: `.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()))`
$DIR/rusoto/services/autoscaling/src/generated.rs: `.set_content_type("application/x-www-form-urlencoded".to_owned())`
{"generated::protocol_tests::test_parse_valid_autoscaling_describe_scaling_activities"}
$DIR/rusoto/services/autoscaling/src/generated.rs: `.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()))`
$DIR/rusoto/services/autoscaling/src/generated.rs: `.set_content_type("application/x-www-form-urlencoded".to_owned())`
{"generated::protocol_tests::test_parse_valid_autoscaling_describe_scaling_process_types"}
$DIR/rusoto/services/autoscaling/src/generated.rs: `.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()))`
$DIR/rusoto/services/autoscaling/src/generated.rs: `.set_content_type("application/x-www-form-urlencoded".to_owned())`
{"generated::protocol_tests::test_parse_valid_autoscaling_describe_scheduled_actions"}
$DIR/rusoto/services/autoscaling/src/generated.rs: `.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()))`
$DIR/rusoto/services/autoscaling/src/generated.rs: `.set_content_type("application/x-www-form-urlencoded".to_owned())`
{"generated::protocol_tests::test_parse_valid_autoscaling_describe_tags"}
$DIR/rusoto/services/autoscaling/src/generated.rs: `.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()))`
$DIR/rusoto/services/autoscaling/src/generated.rs: `.set_content_type("application/x-www-form-urlencoded".to_owned())`
{"generated::protocol_tests::test_parse_valid_autoscaling_describe_termination_policy_types"}
$DIR/rusoto/services/autoscaling/src/generated.rs: `.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()))`
$DIR/rusoto/services/autoscaling/src/generated.rs: `.set_content_type("application/x-www-form-urlencoded".to_owned())`
{"generated::protocol_tests::test_parse_error_autoscaling_delete_policy"}
$DIR/rusoto/services/autoscaling/src/generated.rs: `.with_body(&mock_response)`
{"generated::protocol_tests::test_parse_valid_autoscaling_describe_adjustment_types"}
$DIR/rusoto/services/autoscaling/src/generated.rs: `.with_body(&mock_response)`
{"generated::protocol_tests::test_parse_valid_autoscaling_describe_auto_scaling_groups"}
$DIR/rusoto/services/autoscaling/src/generated.rs: `.with_body(&mock_response)`
{"generated::protocol_tests::test_parse_valid_autoscaling_describe_auto_scaling_instances"}
$DIR/rusoto/services/autoscaling/src/generated.rs: `.with_body(&mock_response)`
{"generated::protocol_tests::test_parse_valid_autoscaling_describe_auto_scaling_notification_types"}
$DIR/rusoto/services/autoscaling/src/generated.rs: `.with_body(&mock_response)`
{"generated::protocol_tests::test_parse_valid_autoscaling_describe_launch_configurations"}
$DIR/rusoto/services/autoscaling/src/generated.rs: `.with_body(&mock_response)`
{"generated::protocol_tests::test_parse_valid_autoscaling_describe_metric_collection_types"}
$DIR/rusoto/services/autoscaling/src/generated.rs: `.with_body(&mock_response)`
{"generated::protocol_tests::test_parse_valid_autoscaling_describe_notification_configurations"}
$DIR/rusoto/services/autoscaling/src/generated.rs: `.with_body(&mock_response)`
{"generated::protocol_tests::test_parse_valid_autoscaling_describe_policies"}
$DIR/rusoto/services/autoscaling/src/generated.rs: `.with_body(&mock_response)`
{"generated::protocol_tests::test_parse_valid_autoscaling_describe_scaling_activities"}
$DIR/rusoto/services/autoscaling/src/generated.rs: `.with_body(&mock_response)`
{"generated::protocol_tests::test_parse_valid_autoscaling_describe_scaling_process_types"}
$DIR/rusoto/services/autoscaling/src/generated.rs: `.with_body(&mock_response)`
{"generated::protocol_tests::test_parse_valid_autoscaling_describe_scheduled_actions"}
$DIR/rusoto/services/autoscaling/src/generated.rs: `.with_body(&mock_response)`
{"generated::protocol_tests::test_parse_valid_autoscaling_describe_tags"}
$DIR/rusoto/services/autoscaling/src/generated.rs: `.with_body(&mock_response)`
{"generated::protocol_tests::test_parse_valid_autoscaling_describe_termination_policy_types"}
$DIR/rusoto/services/autoscaling/src/generated.rs: `.with_body(&mock_response)`
{"custom::custom_tests::should_serialize_list_parameters_in_request_body"}
$DIR/rusoto/services/cloudformation/src/custom/custom_tests.rs: `.with_body(
            r#"<?xml version="1.0" encoding="UTF-8"?>
        <ListStacksResponse xmlns="http://cloudformation.amazonaws.com/doc/2010-05-15/">
            <ListStacksResult>
            <StackSummaries>
                <member>
                <StackId>
                    arn:aws:cloudformation:us-east-1:1234567:stack/TestCreate1/aaaaa
                </StackId>
                <StackStatus>CREATE_IN_PROGRESS</StackStatus>
                <StackName>vpc1</StackName>
                <CreationTime>2011-05-23T15:47:44Z</CreationTime>
                <TemplateDescription>
                    Creates one EC2 instance and a load balancer.
                </TemplateDescription>
                </member>
                <member>
                <StackId>
                    arn:aws:cloudformation:us-east-1:1234567:stack/TestDelete2/bbbbb
                </StackId>
                <StackStatus>DELETE_COMPLETE</StackStatus>
                <DeletionTime>2011-03-10T16:20:51Z</DeletionTime>
                <StackName>WP1</StackName>
                <CreationTime>2011-03-05T19:57:58Z</CreationTime>
                <TemplateDescription>
                    A simple basic Cloudformation Template.
                </TemplateDescription>
                </member>
            </StackSummaries>
            </ListStacksResult>
            <ResponseMetadata>
            <RequestId>b9b4b068-3a41-11e5-94eb-example</RequestId>
            </ResponseMetadata>
        </ListStacksResponse>"#,
        )`
$DIR/rusoto/services/cloudformation/src/custom/custom_tests.rs: `.with_request_checker(|request: &SignedRequest| {
            assert_eq!("POST", request.method);
            assert_eq!("/", request.path);
            if let Some(SignedRequestPayload::Buffer(ref buffer)) = request.payload {
                let params: Params = serde_urlencoded::from_bytes(buffer).unwrap();
                assert_eq!(
                    Some(&Some("CREATE_IN_PROGRESS".to_owned())),
                    params.get("StackStatusFilter.member.1")
                );
                assert_eq!(
                    Some(&Some("DELETE_COMPLETE".to_owned())),
                    params.get("StackStatusFilter.member.2")
                );
            } else {
                panic!("Unexpected request.payload: {:?}", request.payload);
            }
        })`
$DIR/rusoto/services/cloudformation/src/custom/custom_tests.rs: `.list_stacks(request)`
{"generated::protocol_tests::test_parse_error_cloudformation_cancel_update_stack", "generated::protocol_tests::test_parse_valid_cloudformation_describe_stacks", "generated::protocol_tests::test_parse_valid_cloudformation_get_template", "generated::protocol_tests::test_parse_valid_cloudformation_list_stacks"}
$DIR/rusoto/services/cloudformation/src/generated.rs: `params.put("Action", operation_name);`
$DIR/rusoto/services/cloudformation/src/generated.rs: `params.put("Version", "2010-05-15");`
{"generated::protocol_tests::test_parse_error_cloudformation_cancel_update_stack"}
$DIR/rusoto/services/cloudformation/src/generated.rs: `CancelUpdateStackInputSerializer::serialize(&mut params, "", &input);`
$DIR/rusoto/services/cloudformation/src/generated.rs: `request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));`
$DIR/rusoto/services/cloudformation/src/generated.rs: `request.set_content_type("application/x-www-form-urlencoded".to_owned());`
$DIR/rusoto/services/cloudformation/src/generated.rs: `std::mem::drop(response);`
{"generated::protocol_tests::test_parse_valid_cloudformation_describe_stacks"}
$DIR/rusoto/services/cloudformation/src/generated.rs: `DescribeStacksInputSerializer::serialize(&mut params, "", &input);`
$DIR/rusoto/services/cloudformation/src/generated.rs: `request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));`
$DIR/rusoto/services/cloudformation/src/generated.rs: `request.set_content_type("application/x-www-form-urlencoded".to_owned());`
$DIR/rusoto/services/cloudformation/src/generated.rs: `xml_util::start_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/cloudformation/src/generated.rs: `skip_tree(stack);`
$DIR/rusoto/services/cloudformation/src/generated.rs: `xml_util::end_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/cloudformation/src/generated.rs: `drop(response);`
{"generated::protocol_tests::test_parse_valid_cloudformation_get_template"}
$DIR/rusoto/services/cloudformation/src/generated.rs: `GetTemplateInputSerializer::serialize(&mut params, "", &input);`
$DIR/rusoto/services/cloudformation/src/generated.rs: `request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));`
$DIR/rusoto/services/cloudformation/src/generated.rs: `request.set_content_type("application/x-www-form-urlencoded".to_owned());`
$DIR/rusoto/services/cloudformation/src/generated.rs: `xml_util::start_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/cloudformation/src/generated.rs: `skip_tree(stack);`
$DIR/rusoto/services/cloudformation/src/generated.rs: `xml_util::end_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/cloudformation/src/generated.rs: `drop(response);`
{"generated::protocol_tests::test_parse_valid_cloudformation_list_stacks"}
$DIR/rusoto/services/cloudformation/src/generated.rs: `ListStacksInputSerializer::serialize(&mut params, "", &input);`
$DIR/rusoto/services/cloudformation/src/generated.rs: `request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));`
$DIR/rusoto/services/cloudformation/src/generated.rs: `request.set_content_type("application/x-www-form-urlencoded".to_owned());`
$DIR/rusoto/services/cloudformation/src/generated.rs: `xml_util::start_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/cloudformation/src/generated.rs: `skip_tree(stack);`
$DIR/rusoto/services/cloudformation/src/generated.rs: `xml_util::end_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/cloudformation/src/generated.rs: `drop(response);`
{"generated::protocol_tests::test_parse_error_cloudformation_cancel_update_stack", "generated::protocol_tests::test_parse_valid_cloudformation_describe_stacks", "generated::protocol_tests::test_parse_valid_cloudformation_get_template", "generated::protocol_tests::test_parse_valid_cloudformation_list_stacks"}
$DIR/rusoto/services/cloudformation/src/generated.rs: `.put("Action", operation_name)`
$DIR/rusoto/services/cloudformation/src/generated.rs: `.put("Version", "2010-05-15")`
$DIR/rusoto/services/cloudformation/src/generated.rs: `.client.sign_and_dispatch(request)`
$DIR/rusoto/services/cloudformation/src/generated.rs: `.status.is_success()`
$DIR/rusoto/services/cloudformation/src/generated.rs: `.buffer()`
$DIR/rusoto/services/cloudformation/src/generated.rs: `.map_err(RusotoError::HttpDispatch)`
{"generated::protocol_tests::test_parse_error_cloudformation_cancel_update_stack"}
$DIR/rusoto/services/cloudformation/src/generated.rs: `.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()))`
$DIR/rusoto/services/cloudformation/src/generated.rs: `.set_content_type("application/x-www-form-urlencoded".to_owned())`
{"generated::protocol_tests::test_parse_valid_cloudformation_describe_stacks"}
$DIR/rusoto/services/cloudformation/src/generated.rs: `.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()))`
$DIR/rusoto/services/cloudformation/src/generated.rs: `.set_content_type("application/x-www-form-urlencoded".to_owned())`
{"generated::protocol_tests::test_parse_valid_cloudformation_get_template"}
$DIR/rusoto/services/cloudformation/src/generated.rs: `.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()))`
$DIR/rusoto/services/cloudformation/src/generated.rs: `.set_content_type("application/x-www-form-urlencoded".to_owned())`
{"generated::protocol_tests::test_parse_valid_cloudformation_list_stacks"}
$DIR/rusoto/services/cloudformation/src/generated.rs: `.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()))`
$DIR/rusoto/services/cloudformation/src/generated.rs: `.set_content_type("application/x-www-form-urlencoded".to_owned())`
{"generated::protocol_tests::test_parse_error_cloudformation_cancel_update_stack"}
$DIR/rusoto/services/cloudformation/src/generated.rs: `.with_body(&mock_response)`
{"generated::protocol_tests::test_parse_valid_cloudformation_describe_stacks"}
$DIR/rusoto/services/cloudformation/src/generated.rs: `.with_body(&mock_response)`
{"generated::protocol_tests::test_parse_valid_cloudformation_get_template"}
$DIR/rusoto/services/cloudformation/src/generated.rs: `.with_body(&mock_response)`
{"generated::protocol_tests::test_parse_valid_cloudformation_list_stacks"}
$DIR/rusoto/services/cloudformation/src/generated.rs: `.with_body(&mock_response)`
{"custom::custom_tests::should_list_distributions"}
$DIR/rusoto/services/cloudfront/src/custom/custom_tests.rs: `.with_body(&body)`
$DIR/rusoto/services/cloudfront/src/custom/custom_tests.rs: `.list_distributions(request)`
{"generated::protocol_tests::test_parse_valid_cloudfront_get_cloud_front_origin_access_identity"}
$DIR/rusoto/services/cloudfront/src/generated.rs: `result.e_tag = response.headers.remove("ETag");`
{"generated::protocol_tests::test_parse_valid_cloudfront_get_distribution"}
$DIR/rusoto/services/cloudfront/src/generated.rs: `result.e_tag = response.headers.remove("ETag");`
{"generated::protocol_tests::test_parse_valid_cloudfront_get_streaming_distribution"}
$DIR/rusoto/services/cloudfront/src/generated.rs: `result.e_tag = response.headers.remove("ETag");`
{"generated::protocol_tests::test_parse_valid_cloudfront_list_cloud_front_origin_access_identities"}
$DIR/rusoto/services/cloudfront/src/generated.rs: `params.put("Marker", x);`
$DIR/rusoto/services/cloudfront/src/generated.rs: `params.put("MaxItems", x);`
$DIR/rusoto/services/cloudfront/src/generated.rs: `request.set_params(params);`
{"generated::protocol_tests::test_parse_valid_cloudfront_list_distributions"}
$DIR/rusoto/services/cloudfront/src/generated.rs: `params.put("Marker", x);`
$DIR/rusoto/services/cloudfront/src/generated.rs: `params.put("MaxItems", x);`
$DIR/rusoto/services/cloudfront/src/generated.rs: `request.set_params(params);`
{"generated::protocol_tests::test_parse_valid_cloudfront_list_invalidations"}
$DIR/rusoto/services/cloudfront/src/generated.rs: `params.put("Marker", x);`
$DIR/rusoto/services/cloudfront/src/generated.rs: `params.put("MaxItems", x);`
$DIR/rusoto/services/cloudfront/src/generated.rs: `request.set_params(params);`
{"generated::protocol_tests::test_parse_valid_cloudfront_list_streaming_distributions"}
$DIR/rusoto/services/cloudfront/src/generated.rs: `params.put("Marker", x);`
$DIR/rusoto/services/cloudfront/src/generated.rs: `params.put("MaxItems", x);`
$DIR/rusoto/services/cloudfront/src/generated.rs: `request.set_params(params);`
{"generated::protocol_tests::test_parse_valid_cloudfront_get_cloud_front_origin_access_identity", "generated::protocol_tests::test_parse_valid_cloudfront_get_distribution", "generated::protocol_tests::test_parse_valid_cloudfront_get_invalidation", "generated::protocol_tests::test_parse_valid_cloudfront_get_streaming_distribution", "generated::protocol_tests::test_parse_valid_cloudfront_list_cloud_front_origin_access_identities", "generated::protocol_tests::test_parse_valid_cloudfront_list_distributions", "generated::protocol_tests::test_parse_valid_cloudfront_list_invalidations", "generated::protocol_tests::test_parse_valid_cloudfront_list_streaming_distributions"}
$DIR/rusoto/services/cloudfront/src/generated.rs: `.client.sign_and_dispatch(request)`
$DIR/rusoto/services/cloudfront/src/generated.rs: `.status.is_success()`
$DIR/rusoto/services/cloudfront/src/generated.rs: `.buffer()`
$DIR/rusoto/services/cloudfront/src/generated.rs: `.map_err(RusotoError::HttpDispatch)`
{"generated::protocol_tests::test_parse_valid_cloudfront_get_cloud_front_origin_access_identity"}
$DIR/rusoto/services/cloudfront/src/generated.rs: `.headers.remove("ETag")`
{"generated::protocol_tests::test_parse_valid_cloudfront_get_distribution"}
$DIR/rusoto/services/cloudfront/src/generated.rs: `.headers.remove("ETag")`
{"generated::protocol_tests::test_parse_valid_cloudfront_get_streaming_distribution"}
$DIR/rusoto/services/cloudfront/src/generated.rs: `.headers.remove("ETag")`
{"generated::protocol_tests::test_parse_valid_cloudfront_list_cloud_front_origin_access_identities"}
$DIR/rusoto/services/cloudfront/src/generated.rs: `.put("Marker", x)`
$DIR/rusoto/services/cloudfront/src/generated.rs: `.put("MaxItems", x)`
$DIR/rusoto/services/cloudfront/src/generated.rs: `.set_params(params)`
{"generated::protocol_tests::test_parse_valid_cloudfront_list_distributions"}
$DIR/rusoto/services/cloudfront/src/generated.rs: `.put("Marker", x)`
$DIR/rusoto/services/cloudfront/src/generated.rs: `.put("MaxItems", x)`
$DIR/rusoto/services/cloudfront/src/generated.rs: `.set_params(params)`
{"generated::protocol_tests::test_parse_valid_cloudfront_list_invalidations"}
$DIR/rusoto/services/cloudfront/src/generated.rs: `.put("Marker", x)`
$DIR/rusoto/services/cloudfront/src/generated.rs: `.put("MaxItems", x)`
$DIR/rusoto/services/cloudfront/src/generated.rs: `.set_params(params)`
{"generated::protocol_tests::test_parse_valid_cloudfront_list_streaming_distributions"}
$DIR/rusoto/services/cloudfront/src/generated.rs: `.put("Marker", x)`
$DIR/rusoto/services/cloudfront/src/generated.rs: `.put("MaxItems", x)`
$DIR/rusoto/services/cloudfront/src/generated.rs: `.set_params(params)`
{"generated::protocol_tests::test_parse_valid_cloudfront_get_cloud_front_origin_access_identity"}
$DIR/rusoto/services/cloudfront/src/generated.rs: `.with_body(&mock_response)`
{"generated::protocol_tests::test_parse_valid_cloudfront_get_distribution"}
$DIR/rusoto/services/cloudfront/src/generated.rs: `.with_body(&mock_response)`
{"generated::protocol_tests::test_parse_valid_cloudfront_get_invalidation"}
$DIR/rusoto/services/cloudfront/src/generated.rs: `.with_body(&mock_response)`
{"generated::protocol_tests::test_parse_valid_cloudfront_get_streaming_distribution"}
$DIR/rusoto/services/cloudfront/src/generated.rs: `.with_body(&mock_response)`
{"generated::protocol_tests::test_parse_valid_cloudfront_list_cloud_front_origin_access_identities"}
$DIR/rusoto/services/cloudfront/src/generated.rs: `.with_body(&mock_response)`
{"generated::protocol_tests::test_parse_valid_cloudfront_list_distributions"}
$DIR/rusoto/services/cloudfront/src/generated.rs: `.with_body(&mock_response)`
{"generated::protocol_tests::test_parse_valid_cloudfront_list_invalidations"}
$DIR/rusoto/services/cloudfront/src/generated.rs: `.with_body(&mock_response)`
{"generated::protocol_tests::test_parse_valid_cloudfront_list_streaming_distributions"}
$DIR/rusoto/services/cloudfront/src/generated.rs: `.with_body(&mock_response)`
{"custom::custom_tests::should_serialize_complex_metric_data_params"}
$DIR/rusoto/services/cloudwatch/src/custom/custom_tests.rs: `.with_body("")`
$DIR/rusoto/services/cloudwatch/src/custom/custom_tests.rs: `.with_request_checker(|request: &SignedRequest| {
            assert_eq!("POST", request.method);
            assert_eq!("/", request.path);
            if let Some(SignedRequestPayload::Buffer(ref buffer)) = request.payload {
                let params: Params = serde_urlencoded::from_bytes(buffer).unwrap();
                assert_eq!(
                    params.get("Namespace"),
                    Some(&Some("TestNamespace".to_owned()))
                );
                assert_eq!(
                    params.get("MetricData.member.1.MetricName"),
                    Some(&Some("buffers".to_owned()))
                );
                assert_eq!(
                    params.get("MetricData.member.1.Unit"),
                    Some(&Some("Bytes".to_owned()))
                );
                assert_eq!(
                    params.get("MetricData.member.1.Value"),
                    Some(&Some("1".to_owned()))
                );
                assert_eq!(
                    params.get("MetricData.member.1.Dimensions.member.1.Name"),
                    Some(&Some("foo".to_owned()))
                );
                assert_eq!(
                    params.get("MetricData.member.1.Dimensions.member.1.Value"),
                    Some(&Some("bar".to_owned()))
                );
            } else {
                panic!("Unexpected request.payload: {:?}", request.payload);
            }
        })`
$DIR/rusoto/services/cloudwatch/src/custom/custom_tests.rs: `.put_metric_data(request)`
{"generated::protocol_tests::test_parse_error_cloudwatch_describe_alarm_history", "generated::protocol_tests::test_parse_valid_cloudwatch_describe_alarm_history", "generated::protocol_tests::test_parse_valid_cloudwatch_describe_alarms", "generated::protocol_tests::test_parse_valid_cloudwatch_list_metrics"}
$DIR/rusoto/services/cloudwatch/src/generated.rs: `params.put("Action", operation_name);`
$DIR/rusoto/services/cloudwatch/src/generated.rs: `params.put("Version", "2010-08-01");`
{"generated::protocol_tests::test_parse_error_cloudwatch_describe_alarm_history", "generated::protocol_tests::test_parse_valid_cloudwatch_describe_alarm_history"}
$DIR/rusoto/services/cloudwatch/src/generated.rs: `DescribeAlarmHistoryInputSerializer::serialize(&mut params, "", &input);`
$DIR/rusoto/services/cloudwatch/src/generated.rs: `request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));`
$DIR/rusoto/services/cloudwatch/src/generated.rs: `request.set_content_type("application/x-www-form-urlencoded".to_owned());`
$DIR/rusoto/services/cloudwatch/src/generated.rs: `xml_util::start_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/cloudwatch/src/generated.rs: `skip_tree(stack);`
$DIR/rusoto/services/cloudwatch/src/generated.rs: `xml_util::end_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/cloudwatch/src/generated.rs: `drop(response);`
{"generated::protocol_tests::test_parse_valid_cloudwatch_describe_alarms"}
$DIR/rusoto/services/cloudwatch/src/generated.rs: `DescribeAlarmsInputSerializer::serialize(&mut params, "", &input);`
$DIR/rusoto/services/cloudwatch/src/generated.rs: `request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));`
$DIR/rusoto/services/cloudwatch/src/generated.rs: `request.set_content_type("application/x-www-form-urlencoded".to_owned());`
$DIR/rusoto/services/cloudwatch/src/generated.rs: `xml_util::start_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/cloudwatch/src/generated.rs: `skip_tree(stack);`
$DIR/rusoto/services/cloudwatch/src/generated.rs: `xml_util::end_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/cloudwatch/src/generated.rs: `drop(response);`
{"generated::protocol_tests::test_parse_valid_cloudwatch_list_metrics"}
$DIR/rusoto/services/cloudwatch/src/generated.rs: `ListMetricsInputSerializer::serialize(&mut params, "", &input);`
$DIR/rusoto/services/cloudwatch/src/generated.rs: `request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));`
$DIR/rusoto/services/cloudwatch/src/generated.rs: `request.set_content_type("application/x-www-form-urlencoded".to_owned());`
$DIR/rusoto/services/cloudwatch/src/generated.rs: `xml_util::start_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/cloudwatch/src/generated.rs: `skip_tree(stack);`
$DIR/rusoto/services/cloudwatch/src/generated.rs: `xml_util::end_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/cloudwatch/src/generated.rs: `drop(response);`
{"generated::protocol_tests::test_parse_error_cloudwatch_describe_alarm_history", "generated::protocol_tests::test_parse_valid_cloudwatch_describe_alarm_history", "generated::protocol_tests::test_parse_valid_cloudwatch_describe_alarms", "generated::protocol_tests::test_parse_valid_cloudwatch_list_metrics"}
$DIR/rusoto/services/cloudwatch/src/generated.rs: `.put("Action", operation_name)`
$DIR/rusoto/services/cloudwatch/src/generated.rs: `.put("Version", "2010-08-01")`
$DIR/rusoto/services/cloudwatch/src/generated.rs: `.client.sign_and_dispatch(request)`
$DIR/rusoto/services/cloudwatch/src/generated.rs: `.status.is_success()`
$DIR/rusoto/services/cloudwatch/src/generated.rs: `.buffer()`
$DIR/rusoto/services/cloudwatch/src/generated.rs: `.map_err(RusotoError::HttpDispatch)`
{"generated::protocol_tests::test_parse_error_cloudwatch_describe_alarm_history", "generated::protocol_tests::test_parse_valid_cloudwatch_describe_alarm_history"}
$DIR/rusoto/services/cloudwatch/src/generated.rs: `.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()))`
$DIR/rusoto/services/cloudwatch/src/generated.rs: `.set_content_type("application/x-www-form-urlencoded".to_owned())`
{"generated::protocol_tests::test_parse_valid_cloudwatch_describe_alarms"}
$DIR/rusoto/services/cloudwatch/src/generated.rs: `.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()))`
$DIR/rusoto/services/cloudwatch/src/generated.rs: `.set_content_type("application/x-www-form-urlencoded".to_owned())`
{"generated::protocol_tests::test_parse_valid_cloudwatch_list_metrics"}
$DIR/rusoto/services/cloudwatch/src/generated.rs: `.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()))`
$DIR/rusoto/services/cloudwatch/src/generated.rs: `.set_content_type("application/x-www-form-urlencoded".to_owned())`
{"generated::protocol_tests::test_parse_error_cloudwatch_describe_alarm_history"}
$DIR/rusoto/services/cloudwatch/src/generated.rs: `.with_body(&mock_response)`
{"generated::protocol_tests::test_parse_valid_cloudwatch_describe_alarm_history"}
$DIR/rusoto/services/cloudwatch/src/generated.rs: `.with_body(&mock_response)`
{"generated::protocol_tests::test_parse_valid_cloudwatch_describe_alarms"}
$DIR/rusoto/services/cloudwatch/src/generated.rs: `.with_body(&mock_response)`
{"generated::protocol_tests::test_parse_valid_cloudwatch_list_metrics"}
$DIR/rusoto/services/cloudwatch/src/generated.rs: `.with_body(&mock_response)`
{"custom::tests::builder_complete", "custom::tests::builder_simple", "custom::tests::builder_two_providers"}
$DIR/rusoto/services/cognito-identity/src/custom/mod.rs: `self.identity_id = Some(identity_id);`
{"custom::tests::builder_complete", "custom::tests::builder_two_providers"}
$DIR/rusoto/services/cognito-identity/src/custom/mod.rs: `self.region = Some(region);`
{"custom::tests::builder_complete"}
$DIR/rusoto/services/cognito-identity/src/custom/mod.rs: `self.custom_role_arn = Some(arn);`
{"custom::tests::builder_complete", "custom::tests::builder_no_identity_id", "custom::tests::builder_two_providers"}
$DIR/rusoto/services/cognito-identity/src/custom/mod.rs: `self.logins = Some(HashMap::new());`
$DIR/rusoto/services/cognito-identity/src/custom/mod.rs: `self.logins.as_mut().unwrap().insert(provider, token);`
{"custom::tests::builder_complete", "custom::tests::builder_empty", "custom::tests::builder_no_identity_id", "custom::tests::builder_simple", "custom::tests::builder_two_providers"}
$DIR/rusoto/services/cognito-identity/src/custom/mod.rs: `.region.unwrap_or(Region::default())`
{"custom::tests::builder_complete", "custom::tests::builder_no_identity_id", "custom::tests::builder_two_providers"}
$DIR/rusoto/services/cognito-identity/src/custom/mod.rs: `.insert(provider, token)`
{"custom::custom_tests::attribute_value_with_blob_contains_only_blob"}
$DIR/rusoto/services/dynamodb/src/custom/custom_tests.rs: `.bytes()`
$DIR/rusoto/services/dynamodb/src/custom/custom_tests.rs: `.collect()`
{"generated::protocol_tests::test_parse_error_ec_2_describe_instances", "generated::protocol_tests::test_parse_valid_ec_2_allocate_address", "generated::protocol_tests::test_parse_valid_ec_2_assign_private_ip_addresses", "generated::protocol_tests::test_parse_valid_ec_2_associate_address", "generated::protocol_tests::test_parse_valid_ec_2_associate_route_table", "generated::protocol_tests::test_parse_valid_ec_2_attach_volume", "generated::protocol_tests::test_parse_valid_ec_2_attach_vpn_gateway", "generated::protocol_tests::test_parse_valid_ec_2_bundle_instance", "generated::protocol_tests::test_parse_valid_ec_2_cancel_bundle_task", "generated::protocol_tests::test_parse_valid_ec_2_cancel_reserved_instances_listing", "generated::protocol_tests::test_parse_valid_ec_2_cancel_spot_instance_requests", "generated::protocol_tests::test_parse_valid_ec_2_confirm_product_instance", "generated::protocol_tests::test_parse_valid_ec_2_copy_snapshot", "generated::protocol_tests::test_parse_valid_ec_2_create_customer_gateway", "generated::protocol_tests::test_parse_valid_ec_2_create_dhcp_options", "generated::protocol_tests::test_parse_valid_ec_2_create_instance_export_task", "generated::protocol_tests::test_parse_valid_ec_2_create_key_pair", "generated::protocol_tests::test_parse_valid_ec_2_create_network_acl", "generated::protocol_tests::test_parse_valid_ec_2_create_network_interface", "generated::protocol_tests::test_parse_valid_ec_2_create_reserved_instances_listing", "generated::protocol_tests::test_parse_valid_ec_2_create_route_table", "generated::protocol_tests::test_parse_valid_ec_2_create_snapshot", "generated::protocol_tests::test_parse_valid_ec_2_create_spot_datafeed_subscription", "generated::protocol_tests::test_parse_valid_ec_2_create_subnet", "generated::protocol_tests::test_parse_valid_ec_2_create_volume", "generated::protocol_tests::test_parse_valid_ec_2_create_vpc", "generated::protocol_tests::test_parse_valid_ec_2_create_vpn_gateway", "generated::protocol_tests::test_parse_valid_ec_2_delete_internet_gateway", "generated::protocol_tests::test_parse_valid_ec_2_describe_account_attributes", "generated::protocol_tests::test_parse_valid_ec_2_describe_addresses", "generated::protocol_tests::test_parse_valid_ec_2_describe_availability_zones", "generated::protocol_tests::test_parse_valid_ec_2_describe_bundle_tasks", "generated::protocol_tests::test_parse_valid_ec_2_describe_customer_gateways", "generated::protocol_tests::test_parse_valid_ec_2_describe_dhcp_options", "generated::protocol_tests::test_parse_valid_ec_2_describe_export_tasks", "generated::protocol_tests::test_parse_valid_ec_2_describe_instance_attribute", "generated::protocol_tests::test_parse_valid_ec_2_describe_instance_status", "generated::protocol_tests::test_parse_valid_ec_2_describe_instances", "generated::protocol_tests::test_parse_valid_ec_2_describe_internet_gateways", "generated::protocol_tests::test_parse_valid_ec_2_describe_key_pairs", "generated::protocol_tests::test_parse_valid_ec_2_describe_network_acls", "generated::protocol_tests::test_parse_valid_ec_2_describe_network_interfaces", "generated::protocol_tests::test_parse_valid_ec_2_describe_placement_groups", "generated::protocol_tests::test_parse_valid_ec_2_describe_regions", "generated::protocol_tests::test_parse_valid_ec_2_describe_reserved_instances", "generated::protocol_tests::test_parse_valid_ec_2_describe_reserved_instances_offerings", "generated::protocol_tests::test_parse_valid_ec_2_describe_route_tables", "generated::protocol_tests::test_parse_valid_ec_2_describe_security_groups", "generated::protocol_tests::test_parse_valid_ec_2_describe_snapshots", "generated::protocol_tests::test_parse_valid_ec_2_describe_spot_instance_requests", "generated::protocol_tests::test_parse_valid_ec_2_describe_spot_price_history", "generated::protocol_tests::test_parse_valid_ec_2_describe_subnets", "generated::protocol_tests::test_parse_valid_ec_2_describe_tags", "generated::protocol_tests::test_parse_valid_ec_2_describe_volume_status", "generated::protocol_tests::test_parse_valid_ec_2_describe_volumes", "generated::protocol_tests::test_parse_valid_ec_2_describe_vpcs", "generated::protocol_tests::test_parse_valid_ec_2_describe_vpn_connections", "generated::protocol_tests::test_parse_valid_ec_2_describe_vpn_gateways", "generated::protocol_tests::test_parse_valid_ec_2_detach_network_interface", "generated::protocol_tests::test_parse_valid_ec_2_detach_volume", "generated::protocol_tests::test_parse_valid_ec_2_get_password_data", "generated::protocol_tests::test_parse_valid_ec_2_import_instance", "generated::protocol_tests::test_parse_valid_ec_2_import_key_pair", "generated::protocol_tests::test_parse_valid_ec_2_import_volume", "generated::protocol_tests::test_parse_valid_ec_2_modify_snapshot_attribute", "generated::protocol_tests::test_parse_valid_ec_2_monitor_instances", "generated::protocol_tests::test_parse_valid_ec_2_register_image", "generated::protocol_tests::test_parse_valid_ec_2_replace_network_acl_association", "generated::protocol_tests::test_parse_valid_ec_2_request_spot_instances", "generated::protocol_tests::test_parse_valid_ec_2_run_instances", "generated::protocol_tests::test_parse_valid_ec_2_start_instances", "generated::protocol_tests::test_parse_valid_ec_2_stop_instances", "generated::protocol_tests::test_parse_valid_ec_2_unmonitor_instances"}
$DIR/rusoto/services/ec2/src/generated.rs: `params.put("Action", operation_name);`
$DIR/rusoto/services/ec2/src/generated.rs: `params.put("Version", "2016-11-15");`
{"generated::protocol_tests::test_parse_valid_ec_2_allocate_address"}
$DIR/rusoto/services/ec2/src/generated.rs: `AllocateAddressRequestSerializer::serialize(&mut params, "", &input);`
$DIR/rusoto/services/ec2/src/generated.rs: `request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));`
$DIR/rusoto/services/ec2/src/generated.rs: `request.set_content_type("application/x-www-form-urlencoded".to_owned());`
$DIR/rusoto/services/ec2/src/generated.rs: `drop(response);`
{"generated::protocol_tests::test_parse_valid_ec_2_assign_private_ip_addresses"}
$DIR/rusoto/services/ec2/src/generated.rs: `AssignPrivateIpAddressesRequestSerializer::serialize(&mut params, "", &input);`
$DIR/rusoto/services/ec2/src/generated.rs: `request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));`
$DIR/rusoto/services/ec2/src/generated.rs: `request.set_content_type("application/x-www-form-urlencoded".to_owned());`
$DIR/rusoto/services/ec2/src/generated.rs: `drop(response);`
{"generated::protocol_tests::test_parse_valid_ec_2_associate_address"}
$DIR/rusoto/services/ec2/src/generated.rs: `AssociateAddressRequestSerializer::serialize(&mut params, "", &input);`
$DIR/rusoto/services/ec2/src/generated.rs: `request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));`
$DIR/rusoto/services/ec2/src/generated.rs: `request.set_content_type("application/x-www-form-urlencoded".to_owned());`
$DIR/rusoto/services/ec2/src/generated.rs: `drop(response);`
{"generated::protocol_tests::test_parse_valid_ec_2_associate_route_table"}
$DIR/rusoto/services/ec2/src/generated.rs: `AssociateRouteTableRequestSerializer::serialize(&mut params, "", &input);`
$DIR/rusoto/services/ec2/src/generated.rs: `request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));`
$DIR/rusoto/services/ec2/src/generated.rs: `request.set_content_type("application/x-www-form-urlencoded".to_owned());`
$DIR/rusoto/services/ec2/src/generated.rs: `drop(response);`
{"generated::protocol_tests::test_parse_valid_ec_2_attach_volume"}
$DIR/rusoto/services/ec2/src/generated.rs: `AttachVolumeRequestSerializer::serialize(&mut params, "", &input);`
$DIR/rusoto/services/ec2/src/generated.rs: `request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));`
$DIR/rusoto/services/ec2/src/generated.rs: `request.set_content_type("application/x-www-form-urlencoded".to_owned());`
$DIR/rusoto/services/ec2/src/generated.rs: `drop(response);`
{"generated::protocol_tests::test_parse_valid_ec_2_attach_vpn_gateway"}
$DIR/rusoto/services/ec2/src/generated.rs: `AttachVpnGatewayRequestSerializer::serialize(&mut params, "", &input);`
$DIR/rusoto/services/ec2/src/generated.rs: `request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));`
$DIR/rusoto/services/ec2/src/generated.rs: `request.set_content_type("application/x-www-form-urlencoded".to_owned());`
$DIR/rusoto/services/ec2/src/generated.rs: `drop(response);`
{"generated::protocol_tests::test_parse_valid_ec_2_bundle_instance"}
$DIR/rusoto/services/ec2/src/generated.rs: `BundleInstanceRequestSerializer::serialize(&mut params, "", &input);`
$DIR/rusoto/services/ec2/src/generated.rs: `request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));`
$DIR/rusoto/services/ec2/src/generated.rs: `request.set_content_type("application/x-www-form-urlencoded".to_owned());`
$DIR/rusoto/services/ec2/src/generated.rs: `drop(response);`
{"generated::protocol_tests::test_parse_valid_ec_2_cancel_bundle_task"}
$DIR/rusoto/services/ec2/src/generated.rs: `CancelBundleTaskRequestSerializer::serialize(&mut params, "", &input);`
$DIR/rusoto/services/ec2/src/generated.rs: `request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));`
$DIR/rusoto/services/ec2/src/generated.rs: `request.set_content_type("application/x-www-form-urlencoded".to_owned());`
$DIR/rusoto/services/ec2/src/generated.rs: `drop(response);`
{"generated::protocol_tests::test_parse_valid_ec_2_cancel_reserved_instances_listing"}
$DIR/rusoto/services/ec2/src/generated.rs: `CancelReservedInstancesListingRequestSerializer::serialize(&mut params, "", &input);`
$DIR/rusoto/services/ec2/src/generated.rs: `request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));`
$DIR/rusoto/services/ec2/src/generated.rs: `request.set_content_type("application/x-www-form-urlencoded".to_owned());`
$DIR/rusoto/services/ec2/src/generated.rs: `drop(response);`
{"generated::protocol_tests::test_parse_valid_ec_2_cancel_spot_instance_requests"}
$DIR/rusoto/services/ec2/src/generated.rs: `CancelSpotInstanceRequestsRequestSerializer::serialize(&mut params, "", &input);`
$DIR/rusoto/services/ec2/src/generated.rs: `request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));`
$DIR/rusoto/services/ec2/src/generated.rs: `request.set_content_type("application/x-www-form-urlencoded".to_owned());`
$DIR/rusoto/services/ec2/src/generated.rs: `drop(response);`
{"generated::protocol_tests::test_parse_valid_ec_2_confirm_product_instance"}
$DIR/rusoto/services/ec2/src/generated.rs: `ConfirmProductInstanceRequestSerializer::serialize(&mut params, "", &input);`
$DIR/rusoto/services/ec2/src/generated.rs: `request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));`
$DIR/rusoto/services/ec2/src/generated.rs: `request.set_content_type("application/x-www-form-urlencoded".to_owned());`
$DIR/rusoto/services/ec2/src/generated.rs: `drop(response);`
{"generated::protocol_tests::test_parse_valid_ec_2_copy_snapshot"}
$DIR/rusoto/services/ec2/src/generated.rs: `CopySnapshotRequestSerializer::serialize(&mut params, "", &input);`
$DIR/rusoto/services/ec2/src/generated.rs: `request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));`
$DIR/rusoto/services/ec2/src/generated.rs: `request.set_content_type("application/x-www-form-urlencoded".to_owned());`
$DIR/rusoto/services/ec2/src/generated.rs: `drop(response);`
{"generated::protocol_tests::test_parse_valid_ec_2_create_customer_gateway"}
$DIR/rusoto/services/ec2/src/generated.rs: `CreateCustomerGatewayRequestSerializer::serialize(&mut params, "", &input);`
$DIR/rusoto/services/ec2/src/generated.rs: `request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));`
$DIR/rusoto/services/ec2/src/generated.rs: `request.set_content_type("application/x-www-form-urlencoded".to_owned());`
$DIR/rusoto/services/ec2/src/generated.rs: `drop(response);`
{"generated::protocol_tests::test_parse_valid_ec_2_create_dhcp_options"}
$DIR/rusoto/services/ec2/src/generated.rs: `CreateDhcpOptionsRequestSerializer::serialize(&mut params, "", &input);`
$DIR/rusoto/services/ec2/src/generated.rs: `request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));`
$DIR/rusoto/services/ec2/src/generated.rs: `request.set_content_type("application/x-www-form-urlencoded".to_owned());`
$DIR/rusoto/services/ec2/src/generated.rs: `drop(response);`
{"generated::protocol_tests::test_parse_valid_ec_2_create_instance_export_task"}
$DIR/rusoto/services/ec2/src/generated.rs: `CreateInstanceExportTaskRequestSerializer::serialize(&mut params, "", &input);`
$DIR/rusoto/services/ec2/src/generated.rs: `request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));`
$DIR/rusoto/services/ec2/src/generated.rs: `request.set_content_type("application/x-www-form-urlencoded".to_owned());`
$DIR/rusoto/services/ec2/src/generated.rs: `drop(response);`
{"generated::protocol_tests::test_parse_valid_ec_2_create_key_pair"}
$DIR/rusoto/services/ec2/src/generated.rs: `CreateKeyPairRequestSerializer::serialize(&mut params, "", &input);`
$DIR/rusoto/services/ec2/src/generated.rs: `request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));`
$DIR/rusoto/services/ec2/src/generated.rs: `request.set_content_type("application/x-www-form-urlencoded".to_owned());`
$DIR/rusoto/services/ec2/src/generated.rs: `drop(response);`
{"generated::protocol_tests::test_parse_valid_ec_2_create_network_acl"}
$DIR/rusoto/services/ec2/src/generated.rs: `CreateNetworkAclRequestSerializer::serialize(&mut params, "", &input);`
$DIR/rusoto/services/ec2/src/generated.rs: `request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));`
$DIR/rusoto/services/ec2/src/generated.rs: `request.set_content_type("application/x-www-form-urlencoded".to_owned());`
$DIR/rusoto/services/ec2/src/generated.rs: `drop(response);`
{"generated::protocol_tests::test_parse_valid_ec_2_create_network_interface"}
$DIR/rusoto/services/ec2/src/generated.rs: `CreateNetworkInterfaceRequestSerializer::serialize(&mut params, "", &input);`
$DIR/rusoto/services/ec2/src/generated.rs: `request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));`
$DIR/rusoto/services/ec2/src/generated.rs: `request.set_content_type("application/x-www-form-urlencoded".to_owned());`
$DIR/rusoto/services/ec2/src/generated.rs: `drop(response);`
{"generated::protocol_tests::test_parse_valid_ec_2_create_reserved_instances_listing"}
$DIR/rusoto/services/ec2/src/generated.rs: `CreateReservedInstancesListingRequestSerializer::serialize(&mut params, "", &input);`
$DIR/rusoto/services/ec2/src/generated.rs: `request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));`
$DIR/rusoto/services/ec2/src/generated.rs: `request.set_content_type("application/x-www-form-urlencoded".to_owned());`
$DIR/rusoto/services/ec2/src/generated.rs: `drop(response);`
{"generated::protocol_tests::test_parse_valid_ec_2_create_route_table"}
$DIR/rusoto/services/ec2/src/generated.rs: `CreateRouteTableRequestSerializer::serialize(&mut params, "", &input);`
$DIR/rusoto/services/ec2/src/generated.rs: `request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));`
$DIR/rusoto/services/ec2/src/generated.rs: `request.set_content_type("application/x-www-form-urlencoded".to_owned());`
$DIR/rusoto/services/ec2/src/generated.rs: `drop(response);`
{"generated::protocol_tests::test_parse_valid_ec_2_create_snapshot"}
$DIR/rusoto/services/ec2/src/generated.rs: `CreateSnapshotRequestSerializer::serialize(&mut params, "", &input);`
$DIR/rusoto/services/ec2/src/generated.rs: `request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));`
$DIR/rusoto/services/ec2/src/generated.rs: `request.set_content_type("application/x-www-form-urlencoded".to_owned());`
$DIR/rusoto/services/ec2/src/generated.rs: `drop(response);`
{"generated::protocol_tests::test_parse_valid_ec_2_create_spot_datafeed_subscription"}
$DIR/rusoto/services/ec2/src/generated.rs: `CreateSpotDatafeedSubscriptionRequestSerializer::serialize(&mut params, "", &input);`
$DIR/rusoto/services/ec2/src/generated.rs: `request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));`
$DIR/rusoto/services/ec2/src/generated.rs: `request.set_content_type("application/x-www-form-urlencoded".to_owned());`
$DIR/rusoto/services/ec2/src/generated.rs: `drop(response);`
{"generated::protocol_tests::test_parse_valid_ec_2_create_subnet"}
$DIR/rusoto/services/ec2/src/generated.rs: `CreateSubnetRequestSerializer::serialize(&mut params, "", &input);`
$DIR/rusoto/services/ec2/src/generated.rs: `request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));`
$DIR/rusoto/services/ec2/src/generated.rs: `request.set_content_type("application/x-www-form-urlencoded".to_owned());`
$DIR/rusoto/services/ec2/src/generated.rs: `drop(response);`
{"generated::protocol_tests::test_parse_valid_ec_2_create_volume"}
$DIR/rusoto/services/ec2/src/generated.rs: `CreateVolumeRequestSerializer::serialize(&mut params, "", &input);`
$DIR/rusoto/services/ec2/src/generated.rs: `request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));`
$DIR/rusoto/services/ec2/src/generated.rs: `request.set_content_type("application/x-www-form-urlencoded".to_owned());`
$DIR/rusoto/services/ec2/src/generated.rs: `drop(response);`
{"generated::protocol_tests::test_parse_valid_ec_2_create_vpc"}
$DIR/rusoto/services/ec2/src/generated.rs: `CreateVpcRequestSerializer::serialize(&mut params, "", &input);`
$DIR/rusoto/services/ec2/src/generated.rs: `request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));`
$DIR/rusoto/services/ec2/src/generated.rs: `request.set_content_type("application/x-www-form-urlencoded".to_owned());`
$DIR/rusoto/services/ec2/src/generated.rs: `drop(response);`
{"generated::protocol_tests::test_parse_valid_ec_2_create_vpn_gateway"}
$DIR/rusoto/services/ec2/src/generated.rs: `CreateVpnGatewayRequestSerializer::serialize(&mut params, "", &input);`
$DIR/rusoto/services/ec2/src/generated.rs: `request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));`
$DIR/rusoto/services/ec2/src/generated.rs: `request.set_content_type("application/x-www-form-urlencoded".to_owned());`
$DIR/rusoto/services/ec2/src/generated.rs: `drop(response);`
{"generated::protocol_tests::test_parse_valid_ec_2_delete_internet_gateway"}
$DIR/rusoto/services/ec2/src/generated.rs: `DeleteInternetGatewayRequestSerializer::serialize(&mut params, "", &input);`
$DIR/rusoto/services/ec2/src/generated.rs: `request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));`
$DIR/rusoto/services/ec2/src/generated.rs: `request.set_content_type("application/x-www-form-urlencoded".to_owned());`
$DIR/rusoto/services/ec2/src/generated.rs: `std::mem::drop(response);`
{"generated::protocol_tests::test_parse_valid_ec_2_describe_account_attributes"}
$DIR/rusoto/services/ec2/src/generated.rs: `DescribeAccountAttributesRequestSerializer::serialize(&mut params, "", &input);`
$DIR/rusoto/services/ec2/src/generated.rs: `request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));`
$DIR/rusoto/services/ec2/src/generated.rs: `request.set_content_type("application/x-www-form-urlencoded".to_owned());`
$DIR/rusoto/services/ec2/src/generated.rs: `drop(response);`
{"generated::protocol_tests::test_parse_valid_ec_2_describe_addresses"}
$DIR/rusoto/services/ec2/src/generated.rs: `DescribeAddressesRequestSerializer::serialize(&mut params, "", &input);`
$DIR/rusoto/services/ec2/src/generated.rs: `request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));`
$DIR/rusoto/services/ec2/src/generated.rs: `request.set_content_type("application/x-www-form-urlencoded".to_owned());`
$DIR/rusoto/services/ec2/src/generated.rs: `drop(response);`
{"generated::protocol_tests::test_parse_valid_ec_2_describe_availability_zones"}
$DIR/rusoto/services/ec2/src/generated.rs: `DescribeAvailabilityZonesRequestSerializer::serialize(&mut params, "", &input);`
$DIR/rusoto/services/ec2/src/generated.rs: `request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));`
$DIR/rusoto/services/ec2/src/generated.rs: `request.set_content_type("application/x-www-form-urlencoded".to_owned());`
$DIR/rusoto/services/ec2/src/generated.rs: `drop(response);`
{"generated::protocol_tests::test_parse_valid_ec_2_describe_bundle_tasks"}
$DIR/rusoto/services/ec2/src/generated.rs: `DescribeBundleTasksRequestSerializer::serialize(&mut params, "", &input);`
$DIR/rusoto/services/ec2/src/generated.rs: `request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));`
$DIR/rusoto/services/ec2/src/generated.rs: `request.set_content_type("application/x-www-form-urlencoded".to_owned());`
$DIR/rusoto/services/ec2/src/generated.rs: `drop(response);`
{"generated::protocol_tests::test_parse_valid_ec_2_describe_customer_gateways"}
$DIR/rusoto/services/ec2/src/generated.rs: `DescribeCustomerGatewaysRequestSerializer::serialize(&mut params, "", &input);`
$DIR/rusoto/services/ec2/src/generated.rs: `request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));`
$DIR/rusoto/services/ec2/src/generated.rs: `request.set_content_type("application/x-www-form-urlencoded".to_owned());`
$DIR/rusoto/services/ec2/src/generated.rs: `drop(response);`
{"generated::protocol_tests::test_parse_valid_ec_2_describe_dhcp_options"}
$DIR/rusoto/services/ec2/src/generated.rs: `DescribeDhcpOptionsRequestSerializer::serialize(&mut params, "", &input);`
$DIR/rusoto/services/ec2/src/generated.rs: `request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));`
$DIR/rusoto/services/ec2/src/generated.rs: `request.set_content_type("application/x-www-form-urlencoded".to_owned());`
$DIR/rusoto/services/ec2/src/generated.rs: `drop(response);`
{"generated::protocol_tests::test_parse_valid_ec_2_describe_export_tasks"}
$DIR/rusoto/services/ec2/src/generated.rs: `DescribeExportTasksRequestSerializer::serialize(&mut params, "", &input);`
$DIR/rusoto/services/ec2/src/generated.rs: `request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));`
$DIR/rusoto/services/ec2/src/generated.rs: `request.set_content_type("application/x-www-form-urlencoded".to_owned());`
$DIR/rusoto/services/ec2/src/generated.rs: `drop(response);`
{"generated::protocol_tests::test_parse_valid_ec_2_describe_instance_attribute"}
$DIR/rusoto/services/ec2/src/generated.rs: `DescribeInstanceAttributeRequestSerializer::serialize(&mut params, "", &input);`
$DIR/rusoto/services/ec2/src/generated.rs: `request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));`
$DIR/rusoto/services/ec2/src/generated.rs: `request.set_content_type("application/x-www-form-urlencoded".to_owned());`
$DIR/rusoto/services/ec2/src/generated.rs: `drop(response);`
{"generated::protocol_tests::test_parse_valid_ec_2_describe_instance_status"}
$DIR/rusoto/services/ec2/src/generated.rs: `DescribeInstanceStatusRequestSerializer::serialize(&mut params, "", &input);`
$DIR/rusoto/services/ec2/src/generated.rs: `request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));`
$DIR/rusoto/services/ec2/src/generated.rs: `request.set_content_type("application/x-www-form-urlencoded".to_owned());`
$DIR/rusoto/services/ec2/src/generated.rs: `drop(response);`
{"generated::protocol_tests::test_parse_error_ec_2_describe_instances", "generated::protocol_tests::test_parse_valid_ec_2_describe_instances"}
$DIR/rusoto/services/ec2/src/generated.rs: `DescribeInstancesRequestSerializer::serialize(&mut params, "", &input);`
$DIR/rusoto/services/ec2/src/generated.rs: `request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));`
$DIR/rusoto/services/ec2/src/generated.rs: `request.set_content_type("application/x-www-form-urlencoded".to_owned());`
$DIR/rusoto/services/ec2/src/generated.rs: `drop(response);`
{"generated::protocol_tests::test_parse_valid_ec_2_describe_internet_gateways"}
$DIR/rusoto/services/ec2/src/generated.rs: `DescribeInternetGatewaysRequestSerializer::serialize(&mut params, "", &input);`
$DIR/rusoto/services/ec2/src/generated.rs: `request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));`
$DIR/rusoto/services/ec2/src/generated.rs: `request.set_content_type("application/x-www-form-urlencoded".to_owned());`
$DIR/rusoto/services/ec2/src/generated.rs: `drop(response);`
{"generated::protocol_tests::test_parse_valid_ec_2_describe_key_pairs"}
$DIR/rusoto/services/ec2/src/generated.rs: `DescribeKeyPairsRequestSerializer::serialize(&mut params, "", &input);`
$DIR/rusoto/services/ec2/src/generated.rs: `request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));`
$DIR/rusoto/services/ec2/src/generated.rs: `request.set_content_type("application/x-www-form-urlencoded".to_owned());`
$DIR/rusoto/services/ec2/src/generated.rs: `drop(response);`
{"generated::protocol_tests::test_parse_valid_ec_2_describe_network_acls"}
$DIR/rusoto/services/ec2/src/generated.rs: `DescribeNetworkAclsRequestSerializer::serialize(&mut params, "", &input);`
$DIR/rusoto/services/ec2/src/generated.rs: `request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));`
$DIR/rusoto/services/ec2/src/generated.rs: `request.set_content_type("application/x-www-form-urlencoded".to_owned());`
$DIR/rusoto/services/ec2/src/generated.rs: `drop(response);`
{"generated::protocol_tests::test_parse_valid_ec_2_describe_network_interfaces"}
$DIR/rusoto/services/ec2/src/generated.rs: `DescribeNetworkInterfacesRequestSerializer::serialize(&mut params, "", &input);`
$DIR/rusoto/services/ec2/src/generated.rs: `request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));`
$DIR/rusoto/services/ec2/src/generated.rs: `request.set_content_type("application/x-www-form-urlencoded".to_owned());`
$DIR/rusoto/services/ec2/src/generated.rs: `drop(response);`
{"generated::protocol_tests::test_parse_valid_ec_2_describe_placement_groups"}
$DIR/rusoto/services/ec2/src/generated.rs: `DescribePlacementGroupsRequestSerializer::serialize(&mut params, "", &input);`
$DIR/rusoto/services/ec2/src/generated.rs: `request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));`
$DIR/rusoto/services/ec2/src/generated.rs: `request.set_content_type("application/x-www-form-urlencoded".to_owned());`
$DIR/rusoto/services/ec2/src/generated.rs: `drop(response);`
{"generated::protocol_tests::test_parse_valid_ec_2_describe_regions"}
$DIR/rusoto/services/ec2/src/generated.rs: `DescribeRegionsRequestSerializer::serialize(&mut params, "", &input);`
$DIR/rusoto/services/ec2/src/generated.rs: `request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));`
$DIR/rusoto/services/ec2/src/generated.rs: `request.set_content_type("application/x-www-form-urlencoded".to_owned());`
$DIR/rusoto/services/ec2/src/generated.rs: `drop(response);`
{"generated::protocol_tests::test_parse_valid_ec_2_describe_reserved_instances"}
$DIR/rusoto/services/ec2/src/generated.rs: `DescribeReservedInstancesRequestSerializer::serialize(&mut params, "", &input);`
$DIR/rusoto/services/ec2/src/generated.rs: `request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));`
$DIR/rusoto/services/ec2/src/generated.rs: `request.set_content_type("application/x-www-form-urlencoded".to_owned());`
$DIR/rusoto/services/ec2/src/generated.rs: `drop(response);`
{"generated::protocol_tests::test_parse_valid_ec_2_describe_reserved_instances_offerings"}
$DIR/rusoto/services/ec2/src/generated.rs: `DescribeReservedInstancesOfferingsRequestSerializer::serialize(&mut params, "", &input);`
$DIR/rusoto/services/ec2/src/generated.rs: `request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));`
$DIR/rusoto/services/ec2/src/generated.rs: `request.set_content_type("application/x-www-form-urlencoded".to_owned());`
$DIR/rusoto/services/ec2/src/generated.rs: `drop(response);`
{"generated::protocol_tests::test_parse_valid_ec_2_describe_route_tables"}
$DIR/rusoto/services/ec2/src/generated.rs: `DescribeRouteTablesRequestSerializer::serialize(&mut params, "", &input);`
$DIR/rusoto/services/ec2/src/generated.rs: `request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));`
$DIR/rusoto/services/ec2/src/generated.rs: `request.set_content_type("application/x-www-form-urlencoded".to_owned());`
$DIR/rusoto/services/ec2/src/generated.rs: `drop(response);`
{"generated::protocol_tests::test_parse_valid_ec_2_describe_security_groups"}
$DIR/rusoto/services/ec2/src/generated.rs: `DescribeSecurityGroupsRequestSerializer::serialize(&mut params, "", &input);`
$DIR/rusoto/services/ec2/src/generated.rs: `request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));`
$DIR/rusoto/services/ec2/src/generated.rs: `request.set_content_type("application/x-www-form-urlencoded".to_owned());`
$DIR/rusoto/services/ec2/src/generated.rs: `drop(response);`
{"generated::protocol_tests::test_parse_valid_ec_2_describe_snapshots"}
$DIR/rusoto/services/ec2/src/generated.rs: `DescribeSnapshotsRequestSerializer::serialize(&mut params, "", &input);`
$DIR/rusoto/services/ec2/src/generated.rs: `request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));`
$DIR/rusoto/services/ec2/src/generated.rs: `request.set_content_type("application/x-www-form-urlencoded".to_owned());`
$DIR/rusoto/services/ec2/src/generated.rs: `drop(response);`
{"generated::protocol_tests::test_parse_valid_ec_2_describe_spot_instance_requests"}
$DIR/rusoto/services/ec2/src/generated.rs: `DescribeSpotInstanceRequestsRequestSerializer::serialize(&mut params, "", &input);`
$DIR/rusoto/services/ec2/src/generated.rs: `request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));`
$DIR/rusoto/services/ec2/src/generated.rs: `request.set_content_type("application/x-www-form-urlencoded".to_owned());`
$DIR/rusoto/services/ec2/src/generated.rs: `drop(response);`
{"generated::protocol_tests::test_parse_valid_ec_2_describe_spot_price_history"}
$DIR/rusoto/services/ec2/src/generated.rs: `DescribeSpotPriceHistoryRequestSerializer::serialize(&mut params, "", &input);`
$DIR/rusoto/services/ec2/src/generated.rs: `request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));`
$DIR/rusoto/services/ec2/src/generated.rs: `request.set_content_type("application/x-www-form-urlencoded".to_owned());`
$DIR/rusoto/services/ec2/src/generated.rs: `drop(response);`
{"generated::protocol_tests::test_parse_valid_ec_2_describe_subnets"}
$DIR/rusoto/services/ec2/src/generated.rs: `DescribeSubnetsRequestSerializer::serialize(&mut params, "", &input);`
$DIR/rusoto/services/ec2/src/generated.rs: `request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));`
$DIR/rusoto/services/ec2/src/generated.rs: `request.set_content_type("application/x-www-form-urlencoded".to_owned());`
$DIR/rusoto/services/ec2/src/generated.rs: `drop(response);`
{"generated::protocol_tests::test_parse_valid_ec_2_describe_tags"}
$DIR/rusoto/services/ec2/src/generated.rs: `DescribeTagsRequestSerializer::serialize(&mut params, "", &input);`
$DIR/rusoto/services/ec2/src/generated.rs: `request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));`
$DIR/rusoto/services/ec2/src/generated.rs: `request.set_content_type("application/x-www-form-urlencoded".to_owned());`
$DIR/rusoto/services/ec2/src/generated.rs: `drop(response);`
{"generated::protocol_tests::test_parse_valid_ec_2_describe_volume_status"}
$DIR/rusoto/services/ec2/src/generated.rs: `DescribeVolumeStatusRequestSerializer::serialize(&mut params, "", &input);`
$DIR/rusoto/services/ec2/src/generated.rs: `request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));`
$DIR/rusoto/services/ec2/src/generated.rs: `request.set_content_type("application/x-www-form-urlencoded".to_owned());`
$DIR/rusoto/services/ec2/src/generated.rs: `drop(response);`
{"generated::protocol_tests::test_parse_valid_ec_2_describe_volumes"}
$DIR/rusoto/services/ec2/src/generated.rs: `DescribeVolumesRequestSerializer::serialize(&mut params, "", &input);`
$DIR/rusoto/services/ec2/src/generated.rs: `request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));`
$DIR/rusoto/services/ec2/src/generated.rs: `request.set_content_type("application/x-www-form-urlencoded".to_owned());`
$DIR/rusoto/services/ec2/src/generated.rs: `drop(response);`
{"generated::protocol_tests::test_parse_valid_ec_2_describe_vpcs"}
$DIR/rusoto/services/ec2/src/generated.rs: `DescribeVpcsRequestSerializer::serialize(&mut params, "", &input);`
$DIR/rusoto/services/ec2/src/generated.rs: `request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));`
$DIR/rusoto/services/ec2/src/generated.rs: `request.set_content_type("application/x-www-form-urlencoded".to_owned());`
$DIR/rusoto/services/ec2/src/generated.rs: `drop(response);`
{"generated::protocol_tests::test_parse_valid_ec_2_describe_vpn_connections"}
$DIR/rusoto/services/ec2/src/generated.rs: `DescribeVpnConnectionsRequestSerializer::serialize(&mut params, "", &input);`
$DIR/rusoto/services/ec2/src/generated.rs: `request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));`
$DIR/rusoto/services/ec2/src/generated.rs: `request.set_content_type("application/x-www-form-urlencoded".to_owned());`
$DIR/rusoto/services/ec2/src/generated.rs: `drop(response);`
{"generated::protocol_tests::test_parse_valid_ec_2_describe_vpn_gateways"}
$DIR/rusoto/services/ec2/src/generated.rs: `DescribeVpnGatewaysRequestSerializer::serialize(&mut params, "", &input);`
$DIR/rusoto/services/ec2/src/generated.rs: `request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));`
$DIR/rusoto/services/ec2/src/generated.rs: `request.set_content_type("application/x-www-form-urlencoded".to_owned());`
$DIR/rusoto/services/ec2/src/generated.rs: `drop(response);`
{"generated::protocol_tests::test_parse_valid_ec_2_detach_network_interface"}
$DIR/rusoto/services/ec2/src/generated.rs: `DetachNetworkInterfaceRequestSerializer::serialize(&mut params, "", &input);`
$DIR/rusoto/services/ec2/src/generated.rs: `request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));`
$DIR/rusoto/services/ec2/src/generated.rs: `request.set_content_type("application/x-www-form-urlencoded".to_owned());`
$DIR/rusoto/services/ec2/src/generated.rs: `std::mem::drop(response);`
{"generated::protocol_tests::test_parse_valid_ec_2_detach_volume"}
$DIR/rusoto/services/ec2/src/generated.rs: `DetachVolumeRequestSerializer::serialize(&mut params, "", &input);`
$DIR/rusoto/services/ec2/src/generated.rs: `request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));`
$DIR/rusoto/services/ec2/src/generated.rs: `request.set_content_type("application/x-www-form-urlencoded".to_owned());`
$DIR/rusoto/services/ec2/src/generated.rs: `drop(response);`
{"generated::protocol_tests::test_parse_valid_ec_2_get_password_data"}
$DIR/rusoto/services/ec2/src/generated.rs: `GetPasswordDataRequestSerializer::serialize(&mut params, "", &input);`
$DIR/rusoto/services/ec2/src/generated.rs: `request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));`
$DIR/rusoto/services/ec2/src/generated.rs: `request.set_content_type("application/x-www-form-urlencoded".to_owned());`
$DIR/rusoto/services/ec2/src/generated.rs: `drop(response);`
{"generated::protocol_tests::test_parse_valid_ec_2_import_instance"}
$DIR/rusoto/services/ec2/src/generated.rs: `ImportInstanceRequestSerializer::serialize(&mut params, "", &input);`
$DIR/rusoto/services/ec2/src/generated.rs: `request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));`
$DIR/rusoto/services/ec2/src/generated.rs: `request.set_content_type("application/x-www-form-urlencoded".to_owned());`
$DIR/rusoto/services/ec2/src/generated.rs: `drop(response);`
{"generated::protocol_tests::test_parse_valid_ec_2_import_key_pair"}
$DIR/rusoto/services/ec2/src/generated.rs: `ImportKeyPairRequestSerializer::serialize(&mut params, "", &input);`
$DIR/rusoto/services/ec2/src/generated.rs: `request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));`
$DIR/rusoto/services/ec2/src/generated.rs: `request.set_content_type("application/x-www-form-urlencoded".to_owned());`
$DIR/rusoto/services/ec2/src/generated.rs: `drop(response);`
{"generated::protocol_tests::test_parse_valid_ec_2_import_volume"}
$DIR/rusoto/services/ec2/src/generated.rs: `ImportVolumeRequestSerializer::serialize(&mut params, "", &input);`
$DIR/rusoto/services/ec2/src/generated.rs: `request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));`
$DIR/rusoto/services/ec2/src/generated.rs: `request.set_content_type("application/x-www-form-urlencoded".to_owned());`
$DIR/rusoto/services/ec2/src/generated.rs: `drop(response);`
{"generated::protocol_tests::test_parse_valid_ec_2_modify_snapshot_attribute"}
$DIR/rusoto/services/ec2/src/generated.rs: `ModifySnapshotAttributeRequestSerializer::serialize(&mut params, "", &input);`
$DIR/rusoto/services/ec2/src/generated.rs: `request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));`
$DIR/rusoto/services/ec2/src/generated.rs: `request.set_content_type("application/x-www-form-urlencoded".to_owned());`
$DIR/rusoto/services/ec2/src/generated.rs: `std::mem::drop(response);`
{"generated::protocol_tests::test_parse_valid_ec_2_monitor_instances"}
$DIR/rusoto/services/ec2/src/generated.rs: `MonitorInstancesRequestSerializer::serialize(&mut params, "", &input);`
$DIR/rusoto/services/ec2/src/generated.rs: `request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));`
$DIR/rusoto/services/ec2/src/generated.rs: `request.set_content_type("application/x-www-form-urlencoded".to_owned());`
$DIR/rusoto/services/ec2/src/generated.rs: `drop(response);`
{"generated::protocol_tests::test_parse_valid_ec_2_register_image"}
$DIR/rusoto/services/ec2/src/generated.rs: `RegisterImageRequestSerializer::serialize(&mut params, "", &input);`
$DIR/rusoto/services/ec2/src/generated.rs: `request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));`
$DIR/rusoto/services/ec2/src/generated.rs: `request.set_content_type("application/x-www-form-urlencoded".to_owned());`
$DIR/rusoto/services/ec2/src/generated.rs: `drop(response);`
{"generated::protocol_tests::test_parse_valid_ec_2_replace_network_acl_association"}
$DIR/rusoto/services/ec2/src/generated.rs: `ReplaceNetworkAclAssociationRequestSerializer::serialize(&mut params, "", &input);`
$DIR/rusoto/services/ec2/src/generated.rs: `request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));`
$DIR/rusoto/services/ec2/src/generated.rs: `request.set_content_type("application/x-www-form-urlencoded".to_owned());`
$DIR/rusoto/services/ec2/src/generated.rs: `drop(response);`
{"generated::protocol_tests::test_parse_valid_ec_2_request_spot_instances"}
$DIR/rusoto/services/ec2/src/generated.rs: `RequestSpotInstancesRequestSerializer::serialize(&mut params, "", &input);`
$DIR/rusoto/services/ec2/src/generated.rs: `request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));`
$DIR/rusoto/services/ec2/src/generated.rs: `request.set_content_type("application/x-www-form-urlencoded".to_owned());`
$DIR/rusoto/services/ec2/src/generated.rs: `drop(response);`
{"generated::protocol_tests::test_parse_valid_ec_2_run_instances"}
$DIR/rusoto/services/ec2/src/generated.rs: `RunInstancesRequestSerializer::serialize(&mut params, "", &input);`
$DIR/rusoto/services/ec2/src/generated.rs: `request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));`
$DIR/rusoto/services/ec2/src/generated.rs: `request.set_content_type("application/x-www-form-urlencoded".to_owned());`
$DIR/rusoto/services/ec2/src/generated.rs: `drop(response);`
{"generated::protocol_tests::test_parse_valid_ec_2_start_instances"}
$DIR/rusoto/services/ec2/src/generated.rs: `StartInstancesRequestSerializer::serialize(&mut params, "", &input);`
$DIR/rusoto/services/ec2/src/generated.rs: `request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));`
$DIR/rusoto/services/ec2/src/generated.rs: `request.set_content_type("application/x-www-form-urlencoded".to_owned());`
$DIR/rusoto/services/ec2/src/generated.rs: `drop(response);`
{"generated::protocol_tests::test_parse_valid_ec_2_stop_instances"}
$DIR/rusoto/services/ec2/src/generated.rs: `StopInstancesRequestSerializer::serialize(&mut params, "", &input);`
$DIR/rusoto/services/ec2/src/generated.rs: `request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));`
$DIR/rusoto/services/ec2/src/generated.rs: `request.set_content_type("application/x-www-form-urlencoded".to_owned());`
$DIR/rusoto/services/ec2/src/generated.rs: `drop(response);`
{"generated::protocol_tests::test_parse_valid_ec_2_unmonitor_instances"}
$DIR/rusoto/services/ec2/src/generated.rs: `UnmonitorInstancesRequestSerializer::serialize(&mut params, "", &input);`
$DIR/rusoto/services/ec2/src/generated.rs: `request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));`
$DIR/rusoto/services/ec2/src/generated.rs: `request.set_content_type("application/x-www-form-urlencoded".to_owned());`
$DIR/rusoto/services/ec2/src/generated.rs: `drop(response);`
{"generated::protocol_tests::test_parse_error_ec_2_describe_instances", "generated::protocol_tests::test_parse_valid_ec_2_allocate_address", "generated::protocol_tests::test_parse_valid_ec_2_assign_private_ip_addresses", "generated::protocol_tests::test_parse_valid_ec_2_associate_address", "generated::protocol_tests::test_parse_valid_ec_2_associate_route_table", "generated::protocol_tests::test_parse_valid_ec_2_attach_volume", "generated::protocol_tests::test_parse_valid_ec_2_attach_vpn_gateway", "generated::protocol_tests::test_parse_valid_ec_2_bundle_instance", "generated::protocol_tests::test_parse_valid_ec_2_cancel_bundle_task", "generated::protocol_tests::test_parse_valid_ec_2_cancel_reserved_instances_listing", "generated::protocol_tests::test_parse_valid_ec_2_cancel_spot_instance_requests", "generated::protocol_tests::test_parse_valid_ec_2_confirm_product_instance", "generated::protocol_tests::test_parse_valid_ec_2_copy_snapshot", "generated::protocol_tests::test_parse_valid_ec_2_create_customer_gateway", "generated::protocol_tests::test_parse_valid_ec_2_create_dhcp_options", "generated::protocol_tests::test_parse_valid_ec_2_create_instance_export_task", "generated::protocol_tests::test_parse_valid_ec_2_create_key_pair", "generated::protocol_tests::test_parse_valid_ec_2_create_network_acl", "generated::protocol_tests::test_parse_valid_ec_2_create_network_interface", "generated::protocol_tests::test_parse_valid_ec_2_create_reserved_instances_listing", "generated::protocol_tests::test_parse_valid_ec_2_create_route_table", "generated::protocol_tests::test_parse_valid_ec_2_create_snapshot", "generated::protocol_tests::test_parse_valid_ec_2_create_spot_datafeed_subscription", "generated::protocol_tests::test_parse_valid_ec_2_create_subnet", "generated::protocol_tests::test_parse_valid_ec_2_create_volume", "generated::protocol_tests::test_parse_valid_ec_2_create_vpc", "generated::protocol_tests::test_parse_valid_ec_2_create_vpn_gateway", "generated::protocol_tests::test_parse_valid_ec_2_delete_internet_gateway", "generated::protocol_tests::test_parse_valid_ec_2_describe_account_attributes", "generated::protocol_tests::test_parse_valid_ec_2_describe_addresses", "generated::protocol_tests::test_parse_valid_ec_2_describe_availability_zones", "generated::protocol_tests::test_parse_valid_ec_2_describe_bundle_tasks", "generated::protocol_tests::test_parse_valid_ec_2_describe_customer_gateways", "generated::protocol_tests::test_parse_valid_ec_2_describe_dhcp_options", "generated::protocol_tests::test_parse_valid_ec_2_describe_export_tasks", "generated::protocol_tests::test_parse_valid_ec_2_describe_instance_attribute", "generated::protocol_tests::test_parse_valid_ec_2_describe_instance_status", "generated::protocol_tests::test_parse_valid_ec_2_describe_instances", "generated::protocol_tests::test_parse_valid_ec_2_describe_internet_gateways", "generated::protocol_tests::test_parse_valid_ec_2_describe_key_pairs", "generated::protocol_tests::test_parse_valid_ec_2_describe_network_acls", "generated::protocol_tests::test_parse_valid_ec_2_describe_network_interfaces", "generated::protocol_tests::test_parse_valid_ec_2_describe_placement_groups", "generated::protocol_tests::test_parse_valid_ec_2_describe_regions", "generated::protocol_tests::test_parse_valid_ec_2_describe_reserved_instances", "generated::protocol_tests::test_parse_valid_ec_2_describe_reserved_instances_offerings", "generated::protocol_tests::test_parse_valid_ec_2_describe_route_tables", "generated::protocol_tests::test_parse_valid_ec_2_describe_security_groups", "generated::protocol_tests::test_parse_valid_ec_2_describe_snapshots", "generated::protocol_tests::test_parse_valid_ec_2_describe_spot_instance_requests", "generated::protocol_tests::test_parse_valid_ec_2_describe_spot_price_history", "generated::protocol_tests::test_parse_valid_ec_2_describe_subnets", "generated::protocol_tests::test_parse_valid_ec_2_describe_tags", "generated::protocol_tests::test_parse_valid_ec_2_describe_volume_status", "generated::protocol_tests::test_parse_valid_ec_2_describe_volumes", "generated::protocol_tests::test_parse_valid_ec_2_describe_vpcs", "generated::protocol_tests::test_parse_valid_ec_2_describe_vpn_connections", "generated::protocol_tests::test_parse_valid_ec_2_describe_vpn_gateways", "generated::protocol_tests::test_parse_valid_ec_2_detach_network_interface", "generated::protocol_tests::test_parse_valid_ec_2_detach_volume", "generated::protocol_tests::test_parse_valid_ec_2_get_password_data", "generated::protocol_tests::test_parse_valid_ec_2_import_instance", "generated::protocol_tests::test_parse_valid_ec_2_import_key_pair", "generated::protocol_tests::test_parse_valid_ec_2_import_volume", "generated::protocol_tests::test_parse_valid_ec_2_modify_snapshot_attribute", "generated::protocol_tests::test_parse_valid_ec_2_monitor_instances", "generated::protocol_tests::test_parse_valid_ec_2_register_image", "generated::protocol_tests::test_parse_valid_ec_2_replace_network_acl_association", "generated::protocol_tests::test_parse_valid_ec_2_request_spot_instances", "generated::protocol_tests::test_parse_valid_ec_2_run_instances", "generated::protocol_tests::test_parse_valid_ec_2_start_instances", "generated::protocol_tests::test_parse_valid_ec_2_stop_instances", "generated::protocol_tests::test_parse_valid_ec_2_unmonitor_instances"}
$DIR/rusoto/services/ec2/src/generated.rs: `.put("Action", operation_name)`
$DIR/rusoto/services/ec2/src/generated.rs: `.put("Version", "2016-11-15")`
$DIR/rusoto/services/ec2/src/generated.rs: `.client.sign_and_dispatch(request)`
$DIR/rusoto/services/ec2/src/generated.rs: `.status.is_success()`
$DIR/rusoto/services/ec2/src/generated.rs: `.buffer()`
$DIR/rusoto/services/ec2/src/generated.rs: `.map_err(RusotoError::HttpDispatch)`
{"generated::protocol_tests::test_parse_valid_ec_2_allocate_address"}
$DIR/rusoto/services/ec2/src/generated.rs: `.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()))`
$DIR/rusoto/services/ec2/src/generated.rs: `.set_content_type("application/x-www-form-urlencoded".to_owned())`
{"generated::protocol_tests::test_parse_valid_ec_2_assign_private_ip_addresses"}
$DIR/rusoto/services/ec2/src/generated.rs: `.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()))`
$DIR/rusoto/services/ec2/src/generated.rs: `.set_content_type("application/x-www-form-urlencoded".to_owned())`
{"generated::protocol_tests::test_parse_valid_ec_2_associate_address"}
$DIR/rusoto/services/ec2/src/generated.rs: `.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()))`
$DIR/rusoto/services/ec2/src/generated.rs: `.set_content_type("application/x-www-form-urlencoded".to_owned())`
{"generated::protocol_tests::test_parse_valid_ec_2_associate_route_table"}
$DIR/rusoto/services/ec2/src/generated.rs: `.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()))`
$DIR/rusoto/services/ec2/src/generated.rs: `.set_content_type("application/x-www-form-urlencoded".to_owned())`
{"generated::protocol_tests::test_parse_valid_ec_2_attach_volume"}
$DIR/rusoto/services/ec2/src/generated.rs: `.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()))`
$DIR/rusoto/services/ec2/src/generated.rs: `.set_content_type("application/x-www-form-urlencoded".to_owned())`
{"generated::protocol_tests::test_parse_valid_ec_2_attach_vpn_gateway"}
$DIR/rusoto/services/ec2/src/generated.rs: `.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()))`
$DIR/rusoto/services/ec2/src/generated.rs: `.set_content_type("application/x-www-form-urlencoded".to_owned())`
{"generated::protocol_tests::test_parse_valid_ec_2_bundle_instance"}
$DIR/rusoto/services/ec2/src/generated.rs: `.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()))`
$DIR/rusoto/services/ec2/src/generated.rs: `.set_content_type("application/x-www-form-urlencoded".to_owned())`
{"generated::protocol_tests::test_parse_valid_ec_2_cancel_bundle_task"}
$DIR/rusoto/services/ec2/src/generated.rs: `.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()))`
$DIR/rusoto/services/ec2/src/generated.rs: `.set_content_type("application/x-www-form-urlencoded".to_owned())`
{"generated::protocol_tests::test_parse_valid_ec_2_cancel_reserved_instances_listing"}
$DIR/rusoto/services/ec2/src/generated.rs: `.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()))`
$DIR/rusoto/services/ec2/src/generated.rs: `.set_content_type("application/x-www-form-urlencoded".to_owned())`
{"generated::protocol_tests::test_parse_valid_ec_2_cancel_spot_instance_requests"}
$DIR/rusoto/services/ec2/src/generated.rs: `.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()))`
$DIR/rusoto/services/ec2/src/generated.rs: `.set_content_type("application/x-www-form-urlencoded".to_owned())`
{"generated::protocol_tests::test_parse_valid_ec_2_confirm_product_instance"}
$DIR/rusoto/services/ec2/src/generated.rs: `.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()))`
$DIR/rusoto/services/ec2/src/generated.rs: `.set_content_type("application/x-www-form-urlencoded".to_owned())`
{"generated::protocol_tests::test_parse_valid_ec_2_copy_snapshot"}
$DIR/rusoto/services/ec2/src/generated.rs: `.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()))`
$DIR/rusoto/services/ec2/src/generated.rs: `.set_content_type("application/x-www-form-urlencoded".to_owned())`
{"generated::protocol_tests::test_parse_valid_ec_2_create_customer_gateway"}
$DIR/rusoto/services/ec2/src/generated.rs: `.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()))`
$DIR/rusoto/services/ec2/src/generated.rs: `.set_content_type("application/x-www-form-urlencoded".to_owned())`
{"generated::protocol_tests::test_parse_valid_ec_2_create_dhcp_options"}
$DIR/rusoto/services/ec2/src/generated.rs: `.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()))`
$DIR/rusoto/services/ec2/src/generated.rs: `.set_content_type("application/x-www-form-urlencoded".to_owned())`
{"generated::protocol_tests::test_parse_valid_ec_2_create_instance_export_task"}
$DIR/rusoto/services/ec2/src/generated.rs: `.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()))`
$DIR/rusoto/services/ec2/src/generated.rs: `.set_content_type("application/x-www-form-urlencoded".to_owned())`
{"generated::protocol_tests::test_parse_valid_ec_2_create_key_pair"}
$DIR/rusoto/services/ec2/src/generated.rs: `.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()))`
$DIR/rusoto/services/ec2/src/generated.rs: `.set_content_type("application/x-www-form-urlencoded".to_owned())`
{"generated::protocol_tests::test_parse_valid_ec_2_create_network_acl"}
$DIR/rusoto/services/ec2/src/generated.rs: `.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()))`
$DIR/rusoto/services/ec2/src/generated.rs: `.set_content_type("application/x-www-form-urlencoded".to_owned())`
{"generated::protocol_tests::test_parse_valid_ec_2_create_network_interface"}
$DIR/rusoto/services/ec2/src/generated.rs: `.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()))`
$DIR/rusoto/services/ec2/src/generated.rs: `.set_content_type("application/x-www-form-urlencoded".to_owned())`
{"generated::protocol_tests::test_parse_valid_ec_2_create_reserved_instances_listing"}
$DIR/rusoto/services/ec2/src/generated.rs: `.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()))`
$DIR/rusoto/services/ec2/src/generated.rs: `.set_content_type("application/x-www-form-urlencoded".to_owned())`
{"generated::protocol_tests::test_parse_valid_ec_2_create_route_table"}
$DIR/rusoto/services/ec2/src/generated.rs: `.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()))`
$DIR/rusoto/services/ec2/src/generated.rs: `.set_content_type("application/x-www-form-urlencoded".to_owned())`
{"generated::protocol_tests::test_parse_valid_ec_2_create_snapshot"}
$DIR/rusoto/services/ec2/src/generated.rs: `.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()))`
$DIR/rusoto/services/ec2/src/generated.rs: `.set_content_type("application/x-www-form-urlencoded".to_owned())`
{"generated::protocol_tests::test_parse_valid_ec_2_create_spot_datafeed_subscription"}
$DIR/rusoto/services/ec2/src/generated.rs: `.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()))`
$DIR/rusoto/services/ec2/src/generated.rs: `.set_content_type("application/x-www-form-urlencoded".to_owned())`
{"generated::protocol_tests::test_parse_valid_ec_2_create_subnet"}
$DIR/rusoto/services/ec2/src/generated.rs: `.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()))`
$DIR/rusoto/services/ec2/src/generated.rs: `.set_content_type("application/x-www-form-urlencoded".to_owned())`
{"generated::protocol_tests::test_parse_valid_ec_2_create_volume"}
$DIR/rusoto/services/ec2/src/generated.rs: `.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()))`
$DIR/rusoto/services/ec2/src/generated.rs: `.set_content_type("application/x-www-form-urlencoded".to_owned())`
{"generated::protocol_tests::test_parse_valid_ec_2_create_vpc"}
$DIR/rusoto/services/ec2/src/generated.rs: `.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()))`
$DIR/rusoto/services/ec2/src/generated.rs: `.set_content_type("application/x-www-form-urlencoded".to_owned())`
{"generated::protocol_tests::test_parse_valid_ec_2_create_vpn_gateway"}
$DIR/rusoto/services/ec2/src/generated.rs: `.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()))`
$DIR/rusoto/services/ec2/src/generated.rs: `.set_content_type("application/x-www-form-urlencoded".to_owned())`
{"generated::protocol_tests::test_parse_valid_ec_2_delete_internet_gateway"}
$DIR/rusoto/services/ec2/src/generated.rs: `.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()))`
$DIR/rusoto/services/ec2/src/generated.rs: `.set_content_type("application/x-www-form-urlencoded".to_owned())`
{"generated::protocol_tests::test_parse_valid_ec_2_describe_account_attributes"}
$DIR/rusoto/services/ec2/src/generated.rs: `.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()))`
$DIR/rusoto/services/ec2/src/generated.rs: `.set_content_type("application/x-www-form-urlencoded".to_owned())`
{"generated::protocol_tests::test_parse_valid_ec_2_describe_addresses"}
$DIR/rusoto/services/ec2/src/generated.rs: `.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()))`
$DIR/rusoto/services/ec2/src/generated.rs: `.set_content_type("application/x-www-form-urlencoded".to_owned())`
{"generated::protocol_tests::test_parse_valid_ec_2_describe_availability_zones"}
$DIR/rusoto/services/ec2/src/generated.rs: `.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()))`
$DIR/rusoto/services/ec2/src/generated.rs: `.set_content_type("application/x-www-form-urlencoded".to_owned())`
{"generated::protocol_tests::test_parse_valid_ec_2_describe_bundle_tasks"}
$DIR/rusoto/services/ec2/src/generated.rs: `.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()))`
$DIR/rusoto/services/ec2/src/generated.rs: `.set_content_type("application/x-www-form-urlencoded".to_owned())`
{"generated::protocol_tests::test_parse_valid_ec_2_describe_customer_gateways"}
$DIR/rusoto/services/ec2/src/generated.rs: `.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()))`
$DIR/rusoto/services/ec2/src/generated.rs: `.set_content_type("application/x-www-form-urlencoded".to_owned())`
{"generated::protocol_tests::test_parse_valid_ec_2_describe_dhcp_options"}
$DIR/rusoto/services/ec2/src/generated.rs: `.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()))`
$DIR/rusoto/services/ec2/src/generated.rs: `.set_content_type("application/x-www-form-urlencoded".to_owned())`
{"generated::protocol_tests::test_parse_valid_ec_2_describe_export_tasks"}
$DIR/rusoto/services/ec2/src/generated.rs: `.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()))`
$DIR/rusoto/services/ec2/src/generated.rs: `.set_content_type("application/x-www-form-urlencoded".to_owned())`
{"generated::protocol_tests::test_parse_valid_ec_2_describe_instance_attribute"}
$DIR/rusoto/services/ec2/src/generated.rs: `.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()))`
$DIR/rusoto/services/ec2/src/generated.rs: `.set_content_type("application/x-www-form-urlencoded".to_owned())`
{"generated::protocol_tests::test_parse_valid_ec_2_describe_instance_status"}
$DIR/rusoto/services/ec2/src/generated.rs: `.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()))`
$DIR/rusoto/services/ec2/src/generated.rs: `.set_content_type("application/x-www-form-urlencoded".to_owned())`
{"generated::protocol_tests::test_parse_error_ec_2_describe_instances", "generated::protocol_tests::test_parse_valid_ec_2_describe_instances"}
$DIR/rusoto/services/ec2/src/generated.rs: `.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()))`
$DIR/rusoto/services/ec2/src/generated.rs: `.set_content_type("application/x-www-form-urlencoded".to_owned())`
{"generated::protocol_tests::test_parse_valid_ec_2_describe_internet_gateways"}
$DIR/rusoto/services/ec2/src/generated.rs: `.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()))`
$DIR/rusoto/services/ec2/src/generated.rs: `.set_content_type("application/x-www-form-urlencoded".to_owned())`
{"generated::protocol_tests::test_parse_valid_ec_2_describe_key_pairs"}
$DIR/rusoto/services/ec2/src/generated.rs: `.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()))`
$DIR/rusoto/services/ec2/src/generated.rs: `.set_content_type("application/x-www-form-urlencoded".to_owned())`
{"generated::protocol_tests::test_parse_valid_ec_2_describe_network_acls"}
$DIR/rusoto/services/ec2/src/generated.rs: `.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()))`
$DIR/rusoto/services/ec2/src/generated.rs: `.set_content_type("application/x-www-form-urlencoded".to_owned())`
{"generated::protocol_tests::test_parse_valid_ec_2_describe_network_interfaces"}
$DIR/rusoto/services/ec2/src/generated.rs: `.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()))`
$DIR/rusoto/services/ec2/src/generated.rs: `.set_content_type("application/x-www-form-urlencoded".to_owned())`
{"generated::protocol_tests::test_parse_valid_ec_2_describe_placement_groups"}
$DIR/rusoto/services/ec2/src/generated.rs: `.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()))`
$DIR/rusoto/services/ec2/src/generated.rs: `.set_content_type("application/x-www-form-urlencoded".to_owned())`
{"generated::protocol_tests::test_parse_valid_ec_2_describe_regions"}
$DIR/rusoto/services/ec2/src/generated.rs: `.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()))`
$DIR/rusoto/services/ec2/src/generated.rs: `.set_content_type("application/x-www-form-urlencoded".to_owned())`
{"generated::protocol_tests::test_parse_valid_ec_2_describe_reserved_instances"}
$DIR/rusoto/services/ec2/src/generated.rs: `.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()))`
$DIR/rusoto/services/ec2/src/generated.rs: `.set_content_type("application/x-www-form-urlencoded".to_owned())`
{"generated::protocol_tests::test_parse_valid_ec_2_describe_reserved_instances_offerings"}
$DIR/rusoto/services/ec2/src/generated.rs: `.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()))`
$DIR/rusoto/services/ec2/src/generated.rs: `.set_content_type("application/x-www-form-urlencoded".to_owned())`
{"generated::protocol_tests::test_parse_valid_ec_2_describe_route_tables"}
$DIR/rusoto/services/ec2/src/generated.rs: `.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()))`
$DIR/rusoto/services/ec2/src/generated.rs: `.set_content_type("application/x-www-form-urlencoded".to_owned())`
{"generated::protocol_tests::test_parse_valid_ec_2_describe_security_groups"}
$DIR/rusoto/services/ec2/src/generated.rs: `.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()))`
$DIR/rusoto/services/ec2/src/generated.rs: `.set_content_type("application/x-www-form-urlencoded".to_owned())`
{"generated::protocol_tests::test_parse_valid_ec_2_describe_snapshots"}
$DIR/rusoto/services/ec2/src/generated.rs: `.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()))`
$DIR/rusoto/services/ec2/src/generated.rs: `.set_content_type("application/x-www-form-urlencoded".to_owned())`
{"generated::protocol_tests::test_parse_valid_ec_2_describe_spot_instance_requests"}
$DIR/rusoto/services/ec2/src/generated.rs: `.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()))`
$DIR/rusoto/services/ec2/src/generated.rs: `.set_content_type("application/x-www-form-urlencoded".to_owned())`
{"generated::protocol_tests::test_parse_valid_ec_2_describe_spot_price_history"}
$DIR/rusoto/services/ec2/src/generated.rs: `.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()))`
$DIR/rusoto/services/ec2/src/generated.rs: `.set_content_type("application/x-www-form-urlencoded".to_owned())`
{"generated::protocol_tests::test_parse_valid_ec_2_describe_subnets"}
$DIR/rusoto/services/ec2/src/generated.rs: `.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()))`
$DIR/rusoto/services/ec2/src/generated.rs: `.set_content_type("application/x-www-form-urlencoded".to_owned())`
{"generated::protocol_tests::test_parse_valid_ec_2_describe_tags"}
$DIR/rusoto/services/ec2/src/generated.rs: `.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()))`
$DIR/rusoto/services/ec2/src/generated.rs: `.set_content_type("application/x-www-form-urlencoded".to_owned())`
{"generated::protocol_tests::test_parse_valid_ec_2_describe_volume_status"}
$DIR/rusoto/services/ec2/src/generated.rs: `.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()))`
$DIR/rusoto/services/ec2/src/generated.rs: `.set_content_type("application/x-www-form-urlencoded".to_owned())`
{"generated::protocol_tests::test_parse_valid_ec_2_describe_volumes"}
$DIR/rusoto/services/ec2/src/generated.rs: `.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()))`
$DIR/rusoto/services/ec2/src/generated.rs: `.set_content_type("application/x-www-form-urlencoded".to_owned())`
{"generated::protocol_tests::test_parse_valid_ec_2_describe_vpcs"}
$DIR/rusoto/services/ec2/src/generated.rs: `.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()))`
$DIR/rusoto/services/ec2/src/generated.rs: `.set_content_type("application/x-www-form-urlencoded".to_owned())`
{"generated::protocol_tests::test_parse_valid_ec_2_describe_vpn_connections"}
$DIR/rusoto/services/ec2/src/generated.rs: `.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()))`
$DIR/rusoto/services/ec2/src/generated.rs: `.set_content_type("application/x-www-form-urlencoded".to_owned())`
{"generated::protocol_tests::test_parse_valid_ec_2_describe_vpn_gateways"}
$DIR/rusoto/services/ec2/src/generated.rs: `.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()))`
$DIR/rusoto/services/ec2/src/generated.rs: `.set_content_type("application/x-www-form-urlencoded".to_owned())`
{"generated::protocol_tests::test_parse_valid_ec_2_detach_network_interface"}
$DIR/rusoto/services/ec2/src/generated.rs: `.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()))`
$DIR/rusoto/services/ec2/src/generated.rs: `.set_content_type("application/x-www-form-urlencoded".to_owned())`
{"generated::protocol_tests::test_parse_valid_ec_2_detach_volume"}
$DIR/rusoto/services/ec2/src/generated.rs: `.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()))`
$DIR/rusoto/services/ec2/src/generated.rs: `.set_content_type("application/x-www-form-urlencoded".to_owned())`
{"generated::protocol_tests::test_parse_valid_ec_2_get_password_data"}
$DIR/rusoto/services/ec2/src/generated.rs: `.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()))`
$DIR/rusoto/services/ec2/src/generated.rs: `.set_content_type("application/x-www-form-urlencoded".to_owned())`
{"generated::protocol_tests::test_parse_valid_ec_2_import_instance"}
$DIR/rusoto/services/ec2/src/generated.rs: `.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()))`
$DIR/rusoto/services/ec2/src/generated.rs: `.set_content_type("application/x-www-form-urlencoded".to_owned())`
{"generated::protocol_tests::test_parse_valid_ec_2_import_key_pair"}
$DIR/rusoto/services/ec2/src/generated.rs: `.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()))`
$DIR/rusoto/services/ec2/src/generated.rs: `.set_content_type("application/x-www-form-urlencoded".to_owned())`
{"generated::protocol_tests::test_parse_valid_ec_2_import_volume"}
$DIR/rusoto/services/ec2/src/generated.rs: `.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()))`
$DIR/rusoto/services/ec2/src/generated.rs: `.set_content_type("application/x-www-form-urlencoded".to_owned())`
{"generated::protocol_tests::test_parse_valid_ec_2_modify_snapshot_attribute"}
$DIR/rusoto/services/ec2/src/generated.rs: `.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()))`
$DIR/rusoto/services/ec2/src/generated.rs: `.set_content_type("application/x-www-form-urlencoded".to_owned())`
{"generated::protocol_tests::test_parse_valid_ec_2_monitor_instances"}
$DIR/rusoto/services/ec2/src/generated.rs: `.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()))`
$DIR/rusoto/services/ec2/src/generated.rs: `.set_content_type("application/x-www-form-urlencoded".to_owned())`
{"generated::protocol_tests::test_parse_valid_ec_2_register_image"}
$DIR/rusoto/services/ec2/src/generated.rs: `.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()))`
$DIR/rusoto/services/ec2/src/generated.rs: `.set_content_type("application/x-www-form-urlencoded".to_owned())`
{"generated::protocol_tests::test_parse_valid_ec_2_replace_network_acl_association"}
$DIR/rusoto/services/ec2/src/generated.rs: `.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()))`
$DIR/rusoto/services/ec2/src/generated.rs: `.set_content_type("application/x-www-form-urlencoded".to_owned())`
{"generated::protocol_tests::test_parse_valid_ec_2_request_spot_instances"}
$DIR/rusoto/services/ec2/src/generated.rs: `.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()))`
$DIR/rusoto/services/ec2/src/generated.rs: `.set_content_type("application/x-www-form-urlencoded".to_owned())`
{"generated::protocol_tests::test_parse_valid_ec_2_run_instances"}
$DIR/rusoto/services/ec2/src/generated.rs: `.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()))`
$DIR/rusoto/services/ec2/src/generated.rs: `.set_content_type("application/x-www-form-urlencoded".to_owned())`
{"generated::protocol_tests::test_parse_valid_ec_2_start_instances"}
$DIR/rusoto/services/ec2/src/generated.rs: `.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()))`
$DIR/rusoto/services/ec2/src/generated.rs: `.set_content_type("application/x-www-form-urlencoded".to_owned())`
{"generated::protocol_tests::test_parse_valid_ec_2_stop_instances"}
$DIR/rusoto/services/ec2/src/generated.rs: `.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()))`
$DIR/rusoto/services/ec2/src/generated.rs: `.set_content_type("application/x-www-form-urlencoded".to_owned())`
{"generated::protocol_tests::test_parse_valid_ec_2_unmonitor_instances"}
$DIR/rusoto/services/ec2/src/generated.rs: `.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()))`
$DIR/rusoto/services/ec2/src/generated.rs: `.set_content_type("application/x-www-form-urlencoded".to_owned())`
{"generated::protocol_tests::test_parse_error_ec_2_describe_instances"}
$DIR/rusoto/services/ec2/src/generated.rs: `.with_body(&mock_response)`
{"generated::protocol_tests::test_parse_valid_ec_2_allocate_address"}
$DIR/rusoto/services/ec2/src/generated.rs: `.with_body(&mock_response)`
{"generated::protocol_tests::test_parse_valid_ec_2_assign_private_ip_addresses"}
$DIR/rusoto/services/ec2/src/generated.rs: `.with_body(&mock_response)`
{"generated::protocol_tests::test_parse_valid_ec_2_associate_address"}
$DIR/rusoto/services/ec2/src/generated.rs: `.with_body(&mock_response)`
{"generated::protocol_tests::test_parse_valid_ec_2_associate_route_table"}
$DIR/rusoto/services/ec2/src/generated.rs: `.with_body(&mock_response)`
{"generated::protocol_tests::test_parse_valid_ec_2_attach_volume"}
$DIR/rusoto/services/ec2/src/generated.rs: `.with_body(&mock_response)`
{"generated::protocol_tests::test_parse_valid_ec_2_attach_vpn_gateway"}
$DIR/rusoto/services/ec2/src/generated.rs: `.with_body(&mock_response)`
{"generated::protocol_tests::test_parse_valid_ec_2_bundle_instance"}
$DIR/rusoto/services/ec2/src/generated.rs: `.with_body(&mock_response)`
{"generated::protocol_tests::test_parse_valid_ec_2_cancel_bundle_task"}
$DIR/rusoto/services/ec2/src/generated.rs: `.with_body(&mock_response)`
{"generated::protocol_tests::test_parse_valid_ec_2_cancel_reserved_instances_listing"}
$DIR/rusoto/services/ec2/src/generated.rs: `.with_body(&mock_response)`
{"generated::protocol_tests::test_parse_valid_ec_2_cancel_spot_instance_requests"}
$DIR/rusoto/services/ec2/src/generated.rs: `.with_body(&mock_response)`
{"generated::protocol_tests::test_parse_valid_ec_2_confirm_product_instance"}
$DIR/rusoto/services/ec2/src/generated.rs: `.with_body(&mock_response)`
{"generated::protocol_tests::test_parse_valid_ec_2_copy_snapshot"}
$DIR/rusoto/services/ec2/src/generated.rs: `.with_body(&mock_response)`
{"generated::protocol_tests::test_parse_valid_ec_2_create_customer_gateway"}
$DIR/rusoto/services/ec2/src/generated.rs: `.with_body(&mock_response)`
{"generated::protocol_tests::test_parse_valid_ec_2_create_dhcp_options"}
$DIR/rusoto/services/ec2/src/generated.rs: `.with_body(&mock_response)`
{"generated::protocol_tests::test_parse_valid_ec_2_create_instance_export_task"}
$DIR/rusoto/services/ec2/src/generated.rs: `.with_body(&mock_response)`
{"generated::protocol_tests::test_parse_valid_ec_2_create_key_pair"}
$DIR/rusoto/services/ec2/src/generated.rs: `.with_body(&mock_response)`
{"generated::protocol_tests::test_parse_valid_ec_2_create_network_acl"}
$DIR/rusoto/services/ec2/src/generated.rs: `.with_body(&mock_response)`
{"generated::protocol_tests::test_parse_valid_ec_2_create_network_interface"}
$DIR/rusoto/services/ec2/src/generated.rs: `.with_body(&mock_response)`
{"generated::protocol_tests::test_parse_valid_ec_2_create_reserved_instances_listing"}
$DIR/rusoto/services/ec2/src/generated.rs: `.with_body(&mock_response)`
{"generated::protocol_tests::test_parse_valid_ec_2_create_route_table"}
$DIR/rusoto/services/ec2/src/generated.rs: `.with_body(&mock_response)`
{"generated::protocol_tests::test_parse_valid_ec_2_create_snapshot"}
$DIR/rusoto/services/ec2/src/generated.rs: `.with_body(&mock_response)`
{"generated::protocol_tests::test_parse_valid_ec_2_create_spot_datafeed_subscription"}
$DIR/rusoto/services/ec2/src/generated.rs: `.with_body(&mock_response)`
{"generated::protocol_tests::test_parse_valid_ec_2_create_subnet"}
$DIR/rusoto/services/ec2/src/generated.rs: `.with_body(&mock_response)`
{"generated::protocol_tests::test_parse_valid_ec_2_create_volume"}
$DIR/rusoto/services/ec2/src/generated.rs: `.with_body(&mock_response)`
{"generated::protocol_tests::test_parse_valid_ec_2_create_vpc"}
$DIR/rusoto/services/ec2/src/generated.rs: `.with_body(&mock_response)`
{"generated::protocol_tests::test_parse_valid_ec_2_create_vpn_gateway"}
$DIR/rusoto/services/ec2/src/generated.rs: `.with_body(&mock_response)`
{"generated::protocol_tests::test_parse_valid_ec_2_delete_internet_gateway"}
$DIR/rusoto/services/ec2/src/generated.rs: `.with_body(&mock_response)`
{"generated::protocol_tests::test_parse_valid_ec_2_describe_account_attributes"}
$DIR/rusoto/services/ec2/src/generated.rs: `.with_body(&mock_response)`
{"generated::protocol_tests::test_parse_valid_ec_2_describe_addresses"}
$DIR/rusoto/services/ec2/src/generated.rs: `.with_body(&mock_response)`
{"generated::protocol_tests::test_parse_valid_ec_2_describe_availability_zones"}
$DIR/rusoto/services/ec2/src/generated.rs: `.with_body(&mock_response)`
{"generated::protocol_tests::test_parse_valid_ec_2_describe_bundle_tasks"}
$DIR/rusoto/services/ec2/src/generated.rs: `.with_body(&mock_response)`
{"generated::protocol_tests::test_parse_valid_ec_2_describe_customer_gateways"}
$DIR/rusoto/services/ec2/src/generated.rs: `.with_body(&mock_response)`
{"generated::protocol_tests::test_parse_valid_ec_2_describe_dhcp_options"}
$DIR/rusoto/services/ec2/src/generated.rs: `.with_body(&mock_response)`
{"generated::protocol_tests::test_parse_valid_ec_2_describe_export_tasks"}
$DIR/rusoto/services/ec2/src/generated.rs: `.with_body(&mock_response)`
{"generated::protocol_tests::test_parse_valid_ec_2_describe_instance_attribute"}
$DIR/rusoto/services/ec2/src/generated.rs: `.with_body(&mock_response)`
{"generated::protocol_tests::test_parse_valid_ec_2_describe_instance_status"}
$DIR/rusoto/services/ec2/src/generated.rs: `.with_body(&mock_response)`
{"generated::protocol_tests::test_parse_valid_ec_2_describe_instances"}
$DIR/rusoto/services/ec2/src/generated.rs: `.with_body(&mock_response)`
{"generated::protocol_tests::test_parse_valid_ec_2_describe_internet_gateways"}
$DIR/rusoto/services/ec2/src/generated.rs: `.with_body(&mock_response)`
{"generated::protocol_tests::test_parse_valid_ec_2_describe_key_pairs"}
$DIR/rusoto/services/ec2/src/generated.rs: `.with_body(&mock_response)`
{"generated::protocol_tests::test_parse_valid_ec_2_describe_network_acls"}
$DIR/rusoto/services/ec2/src/generated.rs: `.with_body(&mock_response)`
{"generated::protocol_tests::test_parse_valid_ec_2_describe_network_interfaces"}
$DIR/rusoto/services/ec2/src/generated.rs: `.with_body(&mock_response)`
{"generated::protocol_tests::test_parse_valid_ec_2_describe_placement_groups"}
$DIR/rusoto/services/ec2/src/generated.rs: `.with_body(&mock_response)`
{"generated::protocol_tests::test_parse_valid_ec_2_describe_regions"}
$DIR/rusoto/services/ec2/src/generated.rs: `.with_body(&mock_response)`
{"generated::protocol_tests::test_parse_valid_ec_2_describe_reserved_instances_offerings"}
$DIR/rusoto/services/ec2/src/generated.rs: `.with_body(&mock_response)`
{"generated::protocol_tests::test_parse_valid_ec_2_describe_reserved_instances"}
$DIR/rusoto/services/ec2/src/generated.rs: `.with_body(&mock_response)`
{"generated::protocol_tests::test_parse_valid_ec_2_describe_route_tables"}
$DIR/rusoto/services/ec2/src/generated.rs: `.with_body(&mock_response)`
{"generated::protocol_tests::test_parse_valid_ec_2_describe_security_groups"}
$DIR/rusoto/services/ec2/src/generated.rs: `.with_body(&mock_response)`
{"generated::protocol_tests::test_parse_valid_ec_2_describe_snapshots"}
$DIR/rusoto/services/ec2/src/generated.rs: `.with_body(&mock_response)`
{"generated::protocol_tests::test_parse_valid_ec_2_describe_spot_instance_requests"}
$DIR/rusoto/services/ec2/src/generated.rs: `.with_body(&mock_response)`
{"generated::protocol_tests::test_parse_valid_ec_2_describe_spot_price_history"}
$DIR/rusoto/services/ec2/src/generated.rs: `.with_body(&mock_response)`
{"generated::protocol_tests::test_parse_valid_ec_2_describe_subnets"}
$DIR/rusoto/services/ec2/src/generated.rs: `.with_body(&mock_response)`
{"generated::protocol_tests::test_parse_valid_ec_2_describe_tags"}
$DIR/rusoto/services/ec2/src/generated.rs: `.with_body(&mock_response)`
{"generated::protocol_tests::test_parse_valid_ec_2_describe_volume_status"}
$DIR/rusoto/services/ec2/src/generated.rs: `.with_body(&mock_response)`
{"generated::protocol_tests::test_parse_valid_ec_2_describe_volumes"}
$DIR/rusoto/services/ec2/src/generated.rs: `.with_body(&mock_response)`
{"generated::protocol_tests::test_parse_valid_ec_2_describe_vpcs"}
$DIR/rusoto/services/ec2/src/generated.rs: `.with_body(&mock_response)`
{"generated::protocol_tests::test_parse_valid_ec_2_describe_vpn_connections"}
$DIR/rusoto/services/ec2/src/generated.rs: `.with_body(&mock_response)`
{"generated::protocol_tests::test_parse_valid_ec_2_describe_vpn_gateways"}
$DIR/rusoto/services/ec2/src/generated.rs: `.with_body(&mock_response)`
{"generated::protocol_tests::test_parse_valid_ec_2_detach_network_interface"}
$DIR/rusoto/services/ec2/src/generated.rs: `.with_body(&mock_response)`
{"generated::protocol_tests::test_parse_valid_ec_2_detach_volume"}
$DIR/rusoto/services/ec2/src/generated.rs: `.with_body(&mock_response)`
{"generated::protocol_tests::test_parse_valid_ec_2_get_password_data"}
$DIR/rusoto/services/ec2/src/generated.rs: `.with_body(&mock_response)`
{"generated::protocol_tests::test_parse_valid_ec_2_import_instance"}
$DIR/rusoto/services/ec2/src/generated.rs: `.with_body(&mock_response)`
{"generated::protocol_tests::test_parse_valid_ec_2_import_key_pair"}
$DIR/rusoto/services/ec2/src/generated.rs: `.with_body(&mock_response)`
{"generated::protocol_tests::test_parse_valid_ec_2_import_volume"}
$DIR/rusoto/services/ec2/src/generated.rs: `.with_body(&mock_response)`
{"generated::protocol_tests::test_parse_valid_ec_2_modify_snapshot_attribute"}
$DIR/rusoto/services/ec2/src/generated.rs: `.with_body(&mock_response)`
{"generated::protocol_tests::test_parse_valid_ec_2_monitor_instances"}
$DIR/rusoto/services/ec2/src/generated.rs: `.with_body(&mock_response)`
{"generated::protocol_tests::test_parse_valid_ec_2_register_image"}
$DIR/rusoto/services/ec2/src/generated.rs: `.with_body(&mock_response)`
{"generated::protocol_tests::test_parse_valid_ec_2_replace_network_acl_association"}
$DIR/rusoto/services/ec2/src/generated.rs: `.with_body(&mock_response)`
{"generated::protocol_tests::test_parse_valid_ec_2_request_spot_instances"}
$DIR/rusoto/services/ec2/src/generated.rs: `.with_body(&mock_response)`
{"generated::protocol_tests::test_parse_valid_ec_2_run_instances"}
$DIR/rusoto/services/ec2/src/generated.rs: `.with_body(&mock_response)`
{"generated::protocol_tests::test_parse_valid_ec_2_start_instances"}
$DIR/rusoto/services/ec2/src/generated.rs: `.with_body(&mock_response)`
{"generated::protocol_tests::test_parse_valid_ec_2_stop_instances"}
$DIR/rusoto/services/ec2/src/generated.rs: `.with_body(&mock_response)`
{"generated::protocol_tests::test_parse_valid_ec_2_unmonitor_instances"}
$DIR/rusoto/services/ec2/src/generated.rs: `.with_body(&mock_response)`
{"generated::protocol_tests::test_parse_valid_elasticbeanstalk_check_dns_availability", "generated::protocol_tests::test_parse_valid_elasticbeanstalk_create_application", "generated::protocol_tests::test_parse_valid_elasticbeanstalk_create_application_version", "generated::protocol_tests::test_parse_valid_elasticbeanstalk_create_configuration_template", "generated::protocol_tests::test_parse_valid_elasticbeanstalk_create_environment", "generated::protocol_tests::test_parse_valid_elasticbeanstalk_create_storage_location", "generated::protocol_tests::test_parse_valid_elasticbeanstalk_delete_application", "generated::protocol_tests::test_parse_valid_elasticbeanstalk_describe_application_versions", "generated::protocol_tests::test_parse_valid_elasticbeanstalk_describe_applications", "generated::protocol_tests::test_parse_valid_elasticbeanstalk_describe_configuration_options", "generated::protocol_tests::test_parse_valid_elasticbeanstalk_describe_environments", "generated::protocol_tests::test_parse_valid_elasticbeanstalk_describe_events", "generated::protocol_tests::test_parse_valid_elasticbeanstalk_list_available_solution_stacks", "generated::protocol_tests::test_parse_valid_elasticbeanstalk_retrieve_environment_info", "generated::protocol_tests::test_parse_valid_elasticbeanstalk_terminate_environment", "generated::protocol_tests::test_parse_valid_elasticbeanstalk_update_application", "generated::protocol_tests::test_parse_valid_elasticbeanstalk_update_application_version"}
$DIR/rusoto/services/elasticbeanstalk/src/generated.rs: `params.put("Action", operation_name);`
$DIR/rusoto/services/elasticbeanstalk/src/generated.rs: `params.put("Version", "2010-12-01");`
{"generated::protocol_tests::test_parse_valid_elasticbeanstalk_check_dns_availability"}
$DIR/rusoto/services/elasticbeanstalk/src/generated.rs: `CheckDNSAvailabilityMessageSerializer::serialize(&mut params, "", &input);`
$DIR/rusoto/services/elasticbeanstalk/src/generated.rs: `request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));`
$DIR/rusoto/services/elasticbeanstalk/src/generated.rs: `request.set_content_type("application/x-www-form-urlencoded".to_owned());`
$DIR/rusoto/services/elasticbeanstalk/src/generated.rs: `xml_util::start_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/elasticbeanstalk/src/generated.rs: `skip_tree(stack);`
$DIR/rusoto/services/elasticbeanstalk/src/generated.rs: `xml_util::end_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/elasticbeanstalk/src/generated.rs: `drop(response);`
{"generated::protocol_tests::test_parse_valid_elasticbeanstalk_create_application"}
$DIR/rusoto/services/elasticbeanstalk/src/generated.rs: `CreateApplicationMessageSerializer::serialize(&mut params, "", &input);`
$DIR/rusoto/services/elasticbeanstalk/src/generated.rs: `request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));`
$DIR/rusoto/services/elasticbeanstalk/src/generated.rs: `request.set_content_type("application/x-www-form-urlencoded".to_owned());`
$DIR/rusoto/services/elasticbeanstalk/src/generated.rs: `xml_util::start_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/elasticbeanstalk/src/generated.rs: `skip_tree(stack);`
$DIR/rusoto/services/elasticbeanstalk/src/generated.rs: `xml_util::end_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/elasticbeanstalk/src/generated.rs: `drop(response);`
{"generated::protocol_tests::test_parse_valid_elasticbeanstalk_create_application_version"}
$DIR/rusoto/services/elasticbeanstalk/src/generated.rs: `CreateApplicationVersionMessageSerializer::serialize(&mut params, "", &input);`
$DIR/rusoto/services/elasticbeanstalk/src/generated.rs: `request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));`
$DIR/rusoto/services/elasticbeanstalk/src/generated.rs: `request.set_content_type("application/x-www-form-urlencoded".to_owned());`
$DIR/rusoto/services/elasticbeanstalk/src/generated.rs: `xml_util::start_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/elasticbeanstalk/src/generated.rs: `skip_tree(stack);`
$DIR/rusoto/services/elasticbeanstalk/src/generated.rs: `xml_util::end_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/elasticbeanstalk/src/generated.rs: `drop(response);`
{"generated::protocol_tests::test_parse_valid_elasticbeanstalk_create_configuration_template"}
$DIR/rusoto/services/elasticbeanstalk/src/generated.rs: `CreateConfigurationTemplateMessageSerializer::serialize(&mut params, "", &input);`
$DIR/rusoto/services/elasticbeanstalk/src/generated.rs: `request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));`
$DIR/rusoto/services/elasticbeanstalk/src/generated.rs: `request.set_content_type("application/x-www-form-urlencoded".to_owned());`
$DIR/rusoto/services/elasticbeanstalk/src/generated.rs: `xml_util::start_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/elasticbeanstalk/src/generated.rs: `skip_tree(stack);`
$DIR/rusoto/services/elasticbeanstalk/src/generated.rs: `xml_util::end_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/elasticbeanstalk/src/generated.rs: `drop(response);`
{"generated::protocol_tests::test_parse_valid_elasticbeanstalk_create_environment"}
$DIR/rusoto/services/elasticbeanstalk/src/generated.rs: `CreateEnvironmentMessageSerializer::serialize(&mut params, "", &input);`
$DIR/rusoto/services/elasticbeanstalk/src/generated.rs: `request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));`
$DIR/rusoto/services/elasticbeanstalk/src/generated.rs: `request.set_content_type("application/x-www-form-urlencoded".to_owned());`
$DIR/rusoto/services/elasticbeanstalk/src/generated.rs: `xml_util::start_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/elasticbeanstalk/src/generated.rs: `skip_tree(stack);`
$DIR/rusoto/services/elasticbeanstalk/src/generated.rs: `xml_util::end_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/elasticbeanstalk/src/generated.rs: `drop(response);`
{"generated::protocol_tests::test_parse_valid_elasticbeanstalk_create_storage_location"}
$DIR/rusoto/services/elasticbeanstalk/src/generated.rs: `request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));`
$DIR/rusoto/services/elasticbeanstalk/src/generated.rs: `request.set_content_type("application/x-www-form-urlencoded".to_owned());`
$DIR/rusoto/services/elasticbeanstalk/src/generated.rs: `xml_util::start_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/elasticbeanstalk/src/generated.rs: `skip_tree(stack);`
$DIR/rusoto/services/elasticbeanstalk/src/generated.rs: `xml_util::end_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/elasticbeanstalk/src/generated.rs: `drop(response);`
{"generated::protocol_tests::test_parse_valid_elasticbeanstalk_delete_application"}
$DIR/rusoto/services/elasticbeanstalk/src/generated.rs: `DeleteApplicationMessageSerializer::serialize(&mut params, "", &input);`
$DIR/rusoto/services/elasticbeanstalk/src/generated.rs: `request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));`
$DIR/rusoto/services/elasticbeanstalk/src/generated.rs: `request.set_content_type("application/x-www-form-urlencoded".to_owned());`
$DIR/rusoto/services/elasticbeanstalk/src/generated.rs: `std::mem::drop(response);`
{"generated::protocol_tests::test_parse_valid_elasticbeanstalk_describe_application_versions"}
$DIR/rusoto/services/elasticbeanstalk/src/generated.rs: `DescribeApplicationVersionsMessageSerializer::serialize(&mut params, "", &input);`
$DIR/rusoto/services/elasticbeanstalk/src/generated.rs: `request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));`
$DIR/rusoto/services/elasticbeanstalk/src/generated.rs: `request.set_content_type("application/x-www-form-urlencoded".to_owned());`
$DIR/rusoto/services/elasticbeanstalk/src/generated.rs: `xml_util::start_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/elasticbeanstalk/src/generated.rs: `skip_tree(stack);`
$DIR/rusoto/services/elasticbeanstalk/src/generated.rs: `xml_util::end_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/elasticbeanstalk/src/generated.rs: `drop(response);`
{"generated::protocol_tests::test_parse_valid_elasticbeanstalk_describe_applications"}
$DIR/rusoto/services/elasticbeanstalk/src/generated.rs: `DescribeApplicationsMessageSerializer::serialize(&mut params, "", &input);`
$DIR/rusoto/services/elasticbeanstalk/src/generated.rs: `request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));`
$DIR/rusoto/services/elasticbeanstalk/src/generated.rs: `request.set_content_type("application/x-www-form-urlencoded".to_owned());`
$DIR/rusoto/services/elasticbeanstalk/src/generated.rs: `xml_util::start_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/elasticbeanstalk/src/generated.rs: `skip_tree(stack);`
$DIR/rusoto/services/elasticbeanstalk/src/generated.rs: `xml_util::end_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/elasticbeanstalk/src/generated.rs: `drop(response);`
{"generated::protocol_tests::test_parse_valid_elasticbeanstalk_describe_configuration_options"}
$DIR/rusoto/services/elasticbeanstalk/src/generated.rs: `DescribeConfigurationOptionsMessageSerializer::serialize(&mut params, "", &input);`
$DIR/rusoto/services/elasticbeanstalk/src/generated.rs: `request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));`
$DIR/rusoto/services/elasticbeanstalk/src/generated.rs: `request.set_content_type("application/x-www-form-urlencoded".to_owned());`
$DIR/rusoto/services/elasticbeanstalk/src/generated.rs: `xml_util::start_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/elasticbeanstalk/src/generated.rs: `skip_tree(stack);`
$DIR/rusoto/services/elasticbeanstalk/src/generated.rs: `xml_util::end_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/elasticbeanstalk/src/generated.rs: `drop(response);`
{"generated::protocol_tests::test_parse_valid_elasticbeanstalk_describe_environments"}
$DIR/rusoto/services/elasticbeanstalk/src/generated.rs: `DescribeEnvironmentsMessageSerializer::serialize(&mut params, "", &input);`
$DIR/rusoto/services/elasticbeanstalk/src/generated.rs: `request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));`
$DIR/rusoto/services/elasticbeanstalk/src/generated.rs: `request.set_content_type("application/x-www-form-urlencoded".to_owned());`
$DIR/rusoto/services/elasticbeanstalk/src/generated.rs: `xml_util::start_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/elasticbeanstalk/src/generated.rs: `skip_tree(stack);`
$DIR/rusoto/services/elasticbeanstalk/src/generated.rs: `xml_util::end_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/elasticbeanstalk/src/generated.rs: `drop(response);`
{"generated::protocol_tests::test_parse_valid_elasticbeanstalk_describe_events"}
$DIR/rusoto/services/elasticbeanstalk/src/generated.rs: `DescribeEventsMessageSerializer::serialize(&mut params, "", &input);`
$DIR/rusoto/services/elasticbeanstalk/src/generated.rs: `request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));`
$DIR/rusoto/services/elasticbeanstalk/src/generated.rs: `request.set_content_type("application/x-www-form-urlencoded".to_owned());`
$DIR/rusoto/services/elasticbeanstalk/src/generated.rs: `xml_util::start_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/elasticbeanstalk/src/generated.rs: `skip_tree(stack);`
$DIR/rusoto/services/elasticbeanstalk/src/generated.rs: `xml_util::end_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/elasticbeanstalk/src/generated.rs: `drop(response);`
{"generated::protocol_tests::test_parse_valid_elasticbeanstalk_list_available_solution_stacks"}
$DIR/rusoto/services/elasticbeanstalk/src/generated.rs: `request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));`
$DIR/rusoto/services/elasticbeanstalk/src/generated.rs: `request.set_content_type("application/x-www-form-urlencoded".to_owned());`
$DIR/rusoto/services/elasticbeanstalk/src/generated.rs: `xml_util::start_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/elasticbeanstalk/src/generated.rs: `skip_tree(stack);`
$DIR/rusoto/services/elasticbeanstalk/src/generated.rs: `xml_util::end_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/elasticbeanstalk/src/generated.rs: `drop(response);`
{"generated::protocol_tests::test_parse_valid_elasticbeanstalk_retrieve_environment_info"}
$DIR/rusoto/services/elasticbeanstalk/src/generated.rs: `RetrieveEnvironmentInfoMessageSerializer::serialize(&mut params, "", &input);`
$DIR/rusoto/services/elasticbeanstalk/src/generated.rs: `request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));`
$DIR/rusoto/services/elasticbeanstalk/src/generated.rs: `request.set_content_type("application/x-www-form-urlencoded".to_owned());`
$DIR/rusoto/services/elasticbeanstalk/src/generated.rs: `xml_util::start_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/elasticbeanstalk/src/generated.rs: `skip_tree(stack);`
$DIR/rusoto/services/elasticbeanstalk/src/generated.rs: `xml_util::end_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/elasticbeanstalk/src/generated.rs: `drop(response);`
{"generated::protocol_tests::test_parse_valid_elasticbeanstalk_terminate_environment"}
$DIR/rusoto/services/elasticbeanstalk/src/generated.rs: `TerminateEnvironmentMessageSerializer::serialize(&mut params, "", &input);`
$DIR/rusoto/services/elasticbeanstalk/src/generated.rs: `request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));`
$DIR/rusoto/services/elasticbeanstalk/src/generated.rs: `request.set_content_type("application/x-www-form-urlencoded".to_owned());`
$DIR/rusoto/services/elasticbeanstalk/src/generated.rs: `xml_util::start_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/elasticbeanstalk/src/generated.rs: `skip_tree(stack);`
$DIR/rusoto/services/elasticbeanstalk/src/generated.rs: `xml_util::end_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/elasticbeanstalk/src/generated.rs: `drop(response);`
{"generated::protocol_tests::test_parse_valid_elasticbeanstalk_update_application"}
$DIR/rusoto/services/elasticbeanstalk/src/generated.rs: `UpdateApplicationMessageSerializer::serialize(&mut params, "", &input);`
$DIR/rusoto/services/elasticbeanstalk/src/generated.rs: `request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));`
$DIR/rusoto/services/elasticbeanstalk/src/generated.rs: `request.set_content_type("application/x-www-form-urlencoded".to_owned());`
$DIR/rusoto/services/elasticbeanstalk/src/generated.rs: `xml_util::start_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/elasticbeanstalk/src/generated.rs: `skip_tree(stack);`
$DIR/rusoto/services/elasticbeanstalk/src/generated.rs: `xml_util::end_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/elasticbeanstalk/src/generated.rs: `drop(response);`
{"generated::protocol_tests::test_parse_valid_elasticbeanstalk_update_application_version"}
$DIR/rusoto/services/elasticbeanstalk/src/generated.rs: `UpdateApplicationVersionMessageSerializer::serialize(&mut params, "", &input);`
$DIR/rusoto/services/elasticbeanstalk/src/generated.rs: `request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));`
$DIR/rusoto/services/elasticbeanstalk/src/generated.rs: `request.set_content_type("application/x-www-form-urlencoded".to_owned());`
$DIR/rusoto/services/elasticbeanstalk/src/generated.rs: `xml_util::start_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/elasticbeanstalk/src/generated.rs: `skip_tree(stack);`
$DIR/rusoto/services/elasticbeanstalk/src/generated.rs: `xml_util::end_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/elasticbeanstalk/src/generated.rs: `drop(response);`
{"generated::protocol_tests::test_parse_valid_elasticbeanstalk_check_dns_availability", "generated::protocol_tests::test_parse_valid_elasticbeanstalk_create_application", "generated::protocol_tests::test_parse_valid_elasticbeanstalk_create_application_version", "generated::protocol_tests::test_parse_valid_elasticbeanstalk_create_configuration_template", "generated::protocol_tests::test_parse_valid_elasticbeanstalk_create_environment", "generated::protocol_tests::test_parse_valid_elasticbeanstalk_create_storage_location", "generated::protocol_tests::test_parse_valid_elasticbeanstalk_delete_application", "generated::protocol_tests::test_parse_valid_elasticbeanstalk_describe_application_versions", "generated::protocol_tests::test_parse_valid_elasticbeanstalk_describe_applications", "generated::protocol_tests::test_parse_valid_elasticbeanstalk_describe_configuration_options", "generated::protocol_tests::test_parse_valid_elasticbeanstalk_describe_environments", "generated::protocol_tests::test_parse_valid_elasticbeanstalk_describe_events", "generated::protocol_tests::test_parse_valid_elasticbeanstalk_list_available_solution_stacks", "generated::protocol_tests::test_parse_valid_elasticbeanstalk_retrieve_environment_info", "generated::protocol_tests::test_parse_valid_elasticbeanstalk_terminate_environment", "generated::protocol_tests::test_parse_valid_elasticbeanstalk_update_application", "generated::protocol_tests::test_parse_valid_elasticbeanstalk_update_application_version"}
$DIR/rusoto/services/elasticbeanstalk/src/generated.rs: `.put("Action", operation_name)`
$DIR/rusoto/services/elasticbeanstalk/src/generated.rs: `.put("Version", "2010-12-01")`
$DIR/rusoto/services/elasticbeanstalk/src/generated.rs: `.client.sign_and_dispatch(request)`
$DIR/rusoto/services/elasticbeanstalk/src/generated.rs: `.status.is_success()`
$DIR/rusoto/services/elasticbeanstalk/src/generated.rs: `.buffer()`
$DIR/rusoto/services/elasticbeanstalk/src/generated.rs: `.map_err(RusotoError::HttpDispatch)`
{"generated::protocol_tests::test_parse_valid_elasticbeanstalk_check_dns_availability"}
$DIR/rusoto/services/elasticbeanstalk/src/generated.rs: `.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()))`
$DIR/rusoto/services/elasticbeanstalk/src/generated.rs: `.set_content_type("application/x-www-form-urlencoded".to_owned())`
{"generated::protocol_tests::test_parse_valid_elasticbeanstalk_create_application"}
$DIR/rusoto/services/elasticbeanstalk/src/generated.rs: `.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()))`
$DIR/rusoto/services/elasticbeanstalk/src/generated.rs: `.set_content_type("application/x-www-form-urlencoded".to_owned())`
{"generated::protocol_tests::test_parse_valid_elasticbeanstalk_create_application_version"}
$DIR/rusoto/services/elasticbeanstalk/src/generated.rs: `.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()))`
$DIR/rusoto/services/elasticbeanstalk/src/generated.rs: `.set_content_type("application/x-www-form-urlencoded".to_owned())`
{"generated::protocol_tests::test_parse_valid_elasticbeanstalk_create_configuration_template"}
$DIR/rusoto/services/elasticbeanstalk/src/generated.rs: `.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()))`
$DIR/rusoto/services/elasticbeanstalk/src/generated.rs: `.set_content_type("application/x-www-form-urlencoded".to_owned())`
{"generated::protocol_tests::test_parse_valid_elasticbeanstalk_create_environment"}
$DIR/rusoto/services/elasticbeanstalk/src/generated.rs: `.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()))`
$DIR/rusoto/services/elasticbeanstalk/src/generated.rs: `.set_content_type("application/x-www-form-urlencoded".to_owned())`
{"generated::protocol_tests::test_parse_valid_elasticbeanstalk_create_storage_location"}
$DIR/rusoto/services/elasticbeanstalk/src/generated.rs: `.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()))`
$DIR/rusoto/services/elasticbeanstalk/src/generated.rs: `.set_content_type("application/x-www-form-urlencoded".to_owned())`
{"generated::protocol_tests::test_parse_valid_elasticbeanstalk_delete_application"}
$DIR/rusoto/services/elasticbeanstalk/src/generated.rs: `.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()))`
$DIR/rusoto/services/elasticbeanstalk/src/generated.rs: `.set_content_type("application/x-www-form-urlencoded".to_owned())`
{"generated::protocol_tests::test_parse_valid_elasticbeanstalk_describe_application_versions"}
$DIR/rusoto/services/elasticbeanstalk/src/generated.rs: `.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()))`
$DIR/rusoto/services/elasticbeanstalk/src/generated.rs: `.set_content_type("application/x-www-form-urlencoded".to_owned())`
{"generated::protocol_tests::test_parse_valid_elasticbeanstalk_describe_applications"}
$DIR/rusoto/services/elasticbeanstalk/src/generated.rs: `.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()))`
$DIR/rusoto/services/elasticbeanstalk/src/generated.rs: `.set_content_type("application/x-www-form-urlencoded".to_owned())`
{"generated::protocol_tests::test_parse_valid_elasticbeanstalk_describe_configuration_options"}
$DIR/rusoto/services/elasticbeanstalk/src/generated.rs: `.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()))`
$DIR/rusoto/services/elasticbeanstalk/src/generated.rs: `.set_content_type("application/x-www-form-urlencoded".to_owned())`
{"generated::protocol_tests::test_parse_valid_elasticbeanstalk_describe_environments"}
$DIR/rusoto/services/elasticbeanstalk/src/generated.rs: `.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()))`
$DIR/rusoto/services/elasticbeanstalk/src/generated.rs: `.set_content_type("application/x-www-form-urlencoded".to_owned())`
{"generated::protocol_tests::test_parse_valid_elasticbeanstalk_describe_events"}
$DIR/rusoto/services/elasticbeanstalk/src/generated.rs: `.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()))`
$DIR/rusoto/services/elasticbeanstalk/src/generated.rs: `.set_content_type("application/x-www-form-urlencoded".to_owned())`
{"generated::protocol_tests::test_parse_valid_elasticbeanstalk_list_available_solution_stacks"}
$DIR/rusoto/services/elasticbeanstalk/src/generated.rs: `.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()))`
$DIR/rusoto/services/elasticbeanstalk/src/generated.rs: `.set_content_type("application/x-www-form-urlencoded".to_owned())`
{"generated::protocol_tests::test_parse_valid_elasticbeanstalk_retrieve_environment_info"}
$DIR/rusoto/services/elasticbeanstalk/src/generated.rs: `.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()))`
$DIR/rusoto/services/elasticbeanstalk/src/generated.rs: `.set_content_type("application/x-www-form-urlencoded".to_owned())`
{"generated::protocol_tests::test_parse_valid_elasticbeanstalk_terminate_environment"}
$DIR/rusoto/services/elasticbeanstalk/src/generated.rs: `.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()))`
$DIR/rusoto/services/elasticbeanstalk/src/generated.rs: `.set_content_type("application/x-www-form-urlencoded".to_owned())`
{"generated::protocol_tests::test_parse_valid_elasticbeanstalk_update_application"}
$DIR/rusoto/services/elasticbeanstalk/src/generated.rs: `.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()))`
$DIR/rusoto/services/elasticbeanstalk/src/generated.rs: `.set_content_type("application/x-www-form-urlencoded".to_owned())`
{"generated::protocol_tests::test_parse_valid_elasticbeanstalk_update_application_version"}
$DIR/rusoto/services/elasticbeanstalk/src/generated.rs: `.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()))`
$DIR/rusoto/services/elasticbeanstalk/src/generated.rs: `.set_content_type("application/x-www-form-urlencoded".to_owned())`
{"generated::protocol_tests::test_parse_valid_elasticbeanstalk_check_dns_availability"}
$DIR/rusoto/services/elasticbeanstalk/src/generated.rs: `.with_body(&mock_response)`
{"generated::protocol_tests::test_parse_valid_elasticbeanstalk_create_application_version"}
$DIR/rusoto/services/elasticbeanstalk/src/generated.rs: `.with_body(&mock_response)`
{"generated::protocol_tests::test_parse_valid_elasticbeanstalk_create_application"}
$DIR/rusoto/services/elasticbeanstalk/src/generated.rs: `.with_body(&mock_response)`
{"generated::protocol_tests::test_parse_valid_elasticbeanstalk_create_configuration_template"}
$DIR/rusoto/services/elasticbeanstalk/src/generated.rs: `.with_body(&mock_response)`
{"generated::protocol_tests::test_parse_valid_elasticbeanstalk_create_environment"}
$DIR/rusoto/services/elasticbeanstalk/src/generated.rs: `.with_body(&mock_response)`
{"generated::protocol_tests::test_parse_valid_elasticbeanstalk_create_storage_location"}
$DIR/rusoto/services/elasticbeanstalk/src/generated.rs: `.with_body(&mock_response)`
{"generated::protocol_tests::test_parse_valid_elasticbeanstalk_delete_application"}
$DIR/rusoto/services/elasticbeanstalk/src/generated.rs: `.with_body(&mock_response)`
{"generated::protocol_tests::test_parse_valid_elasticbeanstalk_describe_application_versions"}
$DIR/rusoto/services/elasticbeanstalk/src/generated.rs: `.with_body(&mock_response)`
{"generated::protocol_tests::test_parse_valid_elasticbeanstalk_describe_applications"}
$DIR/rusoto/services/elasticbeanstalk/src/generated.rs: `.with_body(&mock_response)`
{"generated::protocol_tests::test_parse_valid_elasticbeanstalk_describe_configuration_options"}
$DIR/rusoto/services/elasticbeanstalk/src/generated.rs: `.with_body(&mock_response)`
{"generated::protocol_tests::test_parse_valid_elasticbeanstalk_describe_environments"}
$DIR/rusoto/services/elasticbeanstalk/src/generated.rs: `.with_body(&mock_response)`
{"generated::protocol_tests::test_parse_valid_elasticbeanstalk_describe_events"}
$DIR/rusoto/services/elasticbeanstalk/src/generated.rs: `.with_body(&mock_response)`
{"generated::protocol_tests::test_parse_valid_elasticbeanstalk_list_available_solution_stacks"}
$DIR/rusoto/services/elasticbeanstalk/src/generated.rs: `.with_body(&mock_response)`
{"generated::protocol_tests::test_parse_valid_elasticbeanstalk_retrieve_environment_info"}
$DIR/rusoto/services/elasticbeanstalk/src/generated.rs: `.with_body(&mock_response)`
{"generated::protocol_tests::test_parse_valid_elasticbeanstalk_terminate_environment"}
$DIR/rusoto/services/elasticbeanstalk/src/generated.rs: `.with_body(&mock_response)`
{"generated::protocol_tests::test_parse_valid_elasticbeanstalk_update_application_version"}
$DIR/rusoto/services/elasticbeanstalk/src/generated.rs: `.with_body(&mock_response)`
{"generated::protocol_tests::test_parse_valid_elasticbeanstalk_update_application"}
$DIR/rusoto/services/elasticbeanstalk/src/generated.rs: `.with_body(&mock_response)`
{"generated::protocol_tests::test_parse_error_elb_describe_load_balancers", "generated::protocol_tests::test_parse_valid_elb_describe_load_balancer_policies", "generated::protocol_tests::test_parse_valid_elb_describe_load_balancer_policy_types", "generated::protocol_tests::test_parse_valid_elb_describe_load_balancers"}
$DIR/rusoto/services/elb/src/generated.rs: `params.put("Action", operation_name);`
$DIR/rusoto/services/elb/src/generated.rs: `params.put("Version", "2012-06-01");`
{"generated::protocol_tests::test_parse_valid_elb_describe_load_balancer_policies"}
$DIR/rusoto/services/elb/src/generated.rs: `DescribeLoadBalancerPoliciesInputSerializer::serialize(&mut params, "", &input);`
$DIR/rusoto/services/elb/src/generated.rs: `request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));`
$DIR/rusoto/services/elb/src/generated.rs: `request.set_content_type("application/x-www-form-urlencoded".to_owned());`
$DIR/rusoto/services/elb/src/generated.rs: `xml_util::start_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/elb/src/generated.rs: `skip_tree(stack);`
$DIR/rusoto/services/elb/src/generated.rs: `xml_util::end_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/elb/src/generated.rs: `drop(response);`
{"generated::protocol_tests::test_parse_valid_elb_describe_load_balancer_policy_types"}
$DIR/rusoto/services/elb/src/generated.rs: `DescribeLoadBalancerPolicyTypesInputSerializer::serialize(&mut params, "", &input);`
$DIR/rusoto/services/elb/src/generated.rs: `request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));`
$DIR/rusoto/services/elb/src/generated.rs: `request.set_content_type("application/x-www-form-urlencoded".to_owned());`
$DIR/rusoto/services/elb/src/generated.rs: `xml_util::start_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/elb/src/generated.rs: `skip_tree(stack);`
$DIR/rusoto/services/elb/src/generated.rs: `xml_util::end_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/elb/src/generated.rs: `drop(response);`
{"generated::protocol_tests::test_parse_error_elb_describe_load_balancers", "generated::protocol_tests::test_parse_valid_elb_describe_load_balancers"}
$DIR/rusoto/services/elb/src/generated.rs: `DescribeAccessPointsInputSerializer::serialize(&mut params, "", &input);`
$DIR/rusoto/services/elb/src/generated.rs: `request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));`
$DIR/rusoto/services/elb/src/generated.rs: `request.set_content_type("application/x-www-form-urlencoded".to_owned());`
$DIR/rusoto/services/elb/src/generated.rs: `xml_util::start_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/elb/src/generated.rs: `skip_tree(stack);`
$DIR/rusoto/services/elb/src/generated.rs: `xml_util::end_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/elb/src/generated.rs: `drop(response);`
{"generated::protocol_tests::test_parse_error_elb_describe_load_balancers", "generated::protocol_tests::test_parse_valid_elb_describe_load_balancer_policies", "generated::protocol_tests::test_parse_valid_elb_describe_load_balancer_policy_types", "generated::protocol_tests::test_parse_valid_elb_describe_load_balancers"}
$DIR/rusoto/services/elb/src/generated.rs: `.put("Action", operation_name)`
$DIR/rusoto/services/elb/src/generated.rs: `.put("Version", "2012-06-01")`
$DIR/rusoto/services/elb/src/generated.rs: `.client.sign_and_dispatch(request)`
$DIR/rusoto/services/elb/src/generated.rs: `.status.is_success()`
$DIR/rusoto/services/elb/src/generated.rs: `.buffer()`
$DIR/rusoto/services/elb/src/generated.rs: `.map_err(RusotoError::HttpDispatch)`
{"generated::protocol_tests::test_parse_valid_elb_describe_load_balancer_policies"}
$DIR/rusoto/services/elb/src/generated.rs: `.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()))`
$DIR/rusoto/services/elb/src/generated.rs: `.set_content_type("application/x-www-form-urlencoded".to_owned())`
{"generated::protocol_tests::test_parse_valid_elb_describe_load_balancer_policy_types"}
$DIR/rusoto/services/elb/src/generated.rs: `.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()))`
$DIR/rusoto/services/elb/src/generated.rs: `.set_content_type("application/x-www-form-urlencoded".to_owned())`
{"generated::protocol_tests::test_parse_error_elb_describe_load_balancers", "generated::protocol_tests::test_parse_valid_elb_describe_load_balancers"}
$DIR/rusoto/services/elb/src/generated.rs: `.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()))`
$DIR/rusoto/services/elb/src/generated.rs: `.set_content_type("application/x-www-form-urlencoded".to_owned())`
{"generated::protocol_tests::test_parse_error_elb_describe_load_balancers"}
$DIR/rusoto/services/elb/src/generated.rs: `.with_body(&mock_response)`
{"generated::protocol_tests::test_parse_valid_elb_describe_load_balancer_policies"}
$DIR/rusoto/services/elb/src/generated.rs: `.with_body(&mock_response)`
{"generated::protocol_tests::test_parse_valid_elb_describe_load_balancer_policy_types"}
$DIR/rusoto/services/elb/src/generated.rs: `.with_body(&mock_response)`
{"generated::protocol_tests::test_parse_valid_elb_describe_load_balancers"}
$DIR/rusoto/services/elb/src/generated.rs: `.with_body(&mock_response)`
{"generated::protocol_tests::test_parse_error_elb_describe_load_balancers", "generated::protocol_tests::test_parse_valid_elb_describe_load_balancers"}
$DIR/rusoto/services/elbv2/src/generated.rs: `params.put("Action", operation_name);`
$DIR/rusoto/services/elbv2/src/generated.rs: `params.put("Version", "2015-12-01");`
$DIR/rusoto/services/elbv2/src/generated.rs: `DescribeLoadBalancersInputSerializer::serialize(&mut params, "", &input);`
$DIR/rusoto/services/elbv2/src/generated.rs: `request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));`
$DIR/rusoto/services/elbv2/src/generated.rs: `request.set_content_type("application/x-www-form-urlencoded".to_owned());`
$DIR/rusoto/services/elbv2/src/generated.rs: `xml_util::start_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/elbv2/src/generated.rs: `skip_tree(stack);`
$DIR/rusoto/services/elbv2/src/generated.rs: `xml_util::end_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/elbv2/src/generated.rs: `drop(response);`
$DIR/rusoto/services/elbv2/src/generated.rs: `.put("Action", operation_name)`
$DIR/rusoto/services/elbv2/src/generated.rs: `.put("Version", "2015-12-01")`
$DIR/rusoto/services/elbv2/src/generated.rs: `.client.sign_and_dispatch(request)`
$DIR/rusoto/services/elbv2/src/generated.rs: `.status.is_success()`
$DIR/rusoto/services/elbv2/src/generated.rs: `.buffer()`
$DIR/rusoto/services/elbv2/src/generated.rs: `.map_err(RusotoError::HttpDispatch)`
$DIR/rusoto/services/elbv2/src/generated.rs: `.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()))`
$DIR/rusoto/services/elbv2/src/generated.rs: `.set_content_type("application/x-www-form-urlencoded".to_owned())`
{"generated::protocol_tests::test_parse_error_elb_describe_load_balancers"}
$DIR/rusoto/services/elbv2/src/generated.rs: `.with_body(&mock_response)`
{"generated::protocol_tests::test_parse_valid_elb_describe_load_balancers"}
$DIR/rusoto/services/elbv2/src/generated.rs: `.with_body(&mock_response)`
{"custom::custom_tests::test_initiate_multipart_part_response"}
$DIR/rusoto/services/glacier/src/custom/custom_tests.rs: `.with_header("Location", "/111122223333/vaults/examplevault/multipart-uploads/OW2fM5iVylEpFEMM9_HpKowRapC3vn5sSL39_396UW9zLFUWVrnRHaPjUJddQ5OxSHVXjYtrN47NBZ-khxOjyEXAMPLE")`
$DIR/rusoto/services/glacier/src/custom/custom_tests.rs: `.with_header("x-amz-multipart-upload-id", "OW2fM5iVylEpFEMM9_HpKowRapC3vn5sSL39_396UW9zLFUWVrnRHaPjUJddQ5OxSHVXjYtrN47NBZ-khxOjyEXAMPLE")`
$DIR/rusoto/services/glacier/src/custom/custom_tests.rs: `.initiate_multipart_upload(initiate_multipart_upload_req)`
{"custom::custom_tests::test_upload_multipart_part_response"}
$DIR/rusoto/services/glacier/src/custom/custom_tests.rs: `.with_header("x-amz-sha256-tree-hash", "42")`
$DIR/rusoto/services/glacier/src/custom/custom_tests.rs: `.upload_multipart_part(upload_part_copy_req)`
{"generated::protocol_tests::test_parse_error_iam_get_user", "generated::protocol_tests::test_parse_valid_iam_create_virtual_mfa_device", "generated::protocol_tests::test_parse_valid_iam_get_account_summary", "generated::protocol_tests::test_parse_valid_iam_get_group", "generated::protocol_tests::test_parse_valid_iam_get_user", "generated::protocol_tests::test_parse_valid_iam_get_user_policy", "generated::protocol_tests::test_parse_valid_iam_list_access_keys", "generated::protocol_tests::test_parse_valid_iam_list_account_aliases", "generated::protocol_tests::test_parse_valid_iam_list_groups", "generated::protocol_tests::test_parse_valid_iam_list_instance_profiles", "generated::protocol_tests::test_parse_valid_iam_list_mfa_devices", "generated::protocol_tests::test_parse_valid_iam_list_roles", "generated::protocol_tests::test_parse_valid_iam_list_server_certificates", "generated::protocol_tests::test_parse_valid_iam_list_signing_certificates", "generated::protocol_tests::test_parse_valid_iam_list_users", "generated::protocol_tests::test_parse_valid_iam_list_virtual_mfa_devices"}
$DIR/rusoto/services/iam/src/generated.rs: `params.put("Action", operation_name);`
$DIR/rusoto/services/iam/src/generated.rs: `params.put("Version", "2010-05-08");`
{"generated::protocol_tests::test_parse_valid_iam_create_virtual_mfa_device"}
$DIR/rusoto/services/iam/src/generated.rs: `CreateVirtualMFADeviceRequestSerializer::serialize(&mut params, "", &input);`
$DIR/rusoto/services/iam/src/generated.rs: `request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));`
$DIR/rusoto/services/iam/src/generated.rs: `request.set_content_type("application/x-www-form-urlencoded".to_owned());`
$DIR/rusoto/services/iam/src/generated.rs: `xml_util::start_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/iam/src/generated.rs: `skip_tree(stack);`
$DIR/rusoto/services/iam/src/generated.rs: `xml_util::end_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/iam/src/generated.rs: `drop(response);`
{"generated::protocol_tests::test_parse_valid_iam_get_account_summary"}
$DIR/rusoto/services/iam/src/generated.rs: `request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));`
$DIR/rusoto/services/iam/src/generated.rs: `request.set_content_type("application/x-www-form-urlencoded".to_owned());`
$DIR/rusoto/services/iam/src/generated.rs: `xml_util::start_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/iam/src/generated.rs: `skip_tree(stack);`
$DIR/rusoto/services/iam/src/generated.rs: `xml_util::end_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/iam/src/generated.rs: `drop(response);`
{"generated::protocol_tests::test_parse_valid_iam_get_group"}
$DIR/rusoto/services/iam/src/generated.rs: `GetGroupRequestSerializer::serialize(&mut params, "", &input);`
$DIR/rusoto/services/iam/src/generated.rs: `request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));`
$DIR/rusoto/services/iam/src/generated.rs: `request.set_content_type("application/x-www-form-urlencoded".to_owned());`
$DIR/rusoto/services/iam/src/generated.rs: `xml_util::start_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/iam/src/generated.rs: `skip_tree(stack);`
$DIR/rusoto/services/iam/src/generated.rs: `xml_util::end_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/iam/src/generated.rs: `drop(response);`
{"generated::protocol_tests::test_parse_error_iam_get_user", "generated::protocol_tests::test_parse_valid_iam_get_user"}
$DIR/rusoto/services/iam/src/generated.rs: `GetUserRequestSerializer::serialize(&mut params, "", &input);`
$DIR/rusoto/services/iam/src/generated.rs: `request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));`
$DIR/rusoto/services/iam/src/generated.rs: `request.set_content_type("application/x-www-form-urlencoded".to_owned());`
$DIR/rusoto/services/iam/src/generated.rs: `xml_util::start_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/iam/src/generated.rs: `skip_tree(stack);`
$DIR/rusoto/services/iam/src/generated.rs: `xml_util::end_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/iam/src/generated.rs: `drop(response);`
{"generated::protocol_tests::test_parse_valid_iam_get_user_policy"}
$DIR/rusoto/services/iam/src/generated.rs: `GetUserPolicyRequestSerializer::serialize(&mut params, "", &input);`
$DIR/rusoto/services/iam/src/generated.rs: `request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));`
$DIR/rusoto/services/iam/src/generated.rs: `request.set_content_type("application/x-www-form-urlencoded".to_owned());`
$DIR/rusoto/services/iam/src/generated.rs: `xml_util::start_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/iam/src/generated.rs: `skip_tree(stack);`
$DIR/rusoto/services/iam/src/generated.rs: `xml_util::end_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/iam/src/generated.rs: `drop(response);`
{"generated::protocol_tests::test_parse_valid_iam_list_access_keys"}
$DIR/rusoto/services/iam/src/generated.rs: `ListAccessKeysRequestSerializer::serialize(&mut params, "", &input);`
$DIR/rusoto/services/iam/src/generated.rs: `request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));`
$DIR/rusoto/services/iam/src/generated.rs: `request.set_content_type("application/x-www-form-urlencoded".to_owned());`
$DIR/rusoto/services/iam/src/generated.rs: `xml_util::start_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/iam/src/generated.rs: `skip_tree(stack);`
$DIR/rusoto/services/iam/src/generated.rs: `xml_util::end_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/iam/src/generated.rs: `drop(response);`
{"generated::protocol_tests::test_parse_valid_iam_list_account_aliases"}
$DIR/rusoto/services/iam/src/generated.rs: `ListAccountAliasesRequestSerializer::serialize(&mut params, "", &input);`
$DIR/rusoto/services/iam/src/generated.rs: `request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));`
$DIR/rusoto/services/iam/src/generated.rs: `request.set_content_type("application/x-www-form-urlencoded".to_owned());`
$DIR/rusoto/services/iam/src/generated.rs: `xml_util::start_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/iam/src/generated.rs: `skip_tree(stack);`
$DIR/rusoto/services/iam/src/generated.rs: `xml_util::end_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/iam/src/generated.rs: `drop(response);`
{"generated::protocol_tests::test_parse_valid_iam_list_groups"}
$DIR/rusoto/services/iam/src/generated.rs: `ListGroupsRequestSerializer::serialize(&mut params, "", &input);`
$DIR/rusoto/services/iam/src/generated.rs: `request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));`
$DIR/rusoto/services/iam/src/generated.rs: `request.set_content_type("application/x-www-form-urlencoded".to_owned());`
$DIR/rusoto/services/iam/src/generated.rs: `xml_util::start_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/iam/src/generated.rs: `skip_tree(stack);`
$DIR/rusoto/services/iam/src/generated.rs: `xml_util::end_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/iam/src/generated.rs: `drop(response);`
{"generated::protocol_tests::test_parse_valid_iam_list_instance_profiles"}
$DIR/rusoto/services/iam/src/generated.rs: `ListInstanceProfilesRequestSerializer::serialize(&mut params, "", &input);`
$DIR/rusoto/services/iam/src/generated.rs: `request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));`
$DIR/rusoto/services/iam/src/generated.rs: `request.set_content_type("application/x-www-form-urlencoded".to_owned());`
$DIR/rusoto/services/iam/src/generated.rs: `xml_util::start_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/iam/src/generated.rs: `skip_tree(stack);`
$DIR/rusoto/services/iam/src/generated.rs: `xml_util::end_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/iam/src/generated.rs: `drop(response);`
{"generated::protocol_tests::test_parse_valid_iam_list_mfa_devices"}
$DIR/rusoto/services/iam/src/generated.rs: `ListMFADevicesRequestSerializer::serialize(&mut params, "", &input);`
$DIR/rusoto/services/iam/src/generated.rs: `request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));`
$DIR/rusoto/services/iam/src/generated.rs: `request.set_content_type("application/x-www-form-urlencoded".to_owned());`
$DIR/rusoto/services/iam/src/generated.rs: `xml_util::start_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/iam/src/generated.rs: `skip_tree(stack);`
$DIR/rusoto/services/iam/src/generated.rs: `xml_util::end_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/iam/src/generated.rs: `drop(response);`
{"generated::protocol_tests::test_parse_valid_iam_list_roles"}
$DIR/rusoto/services/iam/src/generated.rs: `ListRolesRequestSerializer::serialize(&mut params, "", &input);`
$DIR/rusoto/services/iam/src/generated.rs: `request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));`
$DIR/rusoto/services/iam/src/generated.rs: `request.set_content_type("application/x-www-form-urlencoded".to_owned());`
$DIR/rusoto/services/iam/src/generated.rs: `xml_util::start_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/iam/src/generated.rs: `skip_tree(stack);`
$DIR/rusoto/services/iam/src/generated.rs: `xml_util::end_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/iam/src/generated.rs: `drop(response);`
{"generated::protocol_tests::test_parse_valid_iam_list_server_certificates"}
$DIR/rusoto/services/iam/src/generated.rs: `ListServerCertificatesRequestSerializer::serialize(&mut params, "", &input);`
$DIR/rusoto/services/iam/src/generated.rs: `request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));`
$DIR/rusoto/services/iam/src/generated.rs: `request.set_content_type("application/x-www-form-urlencoded".to_owned());`
$DIR/rusoto/services/iam/src/generated.rs: `xml_util::start_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/iam/src/generated.rs: `skip_tree(stack);`
$DIR/rusoto/services/iam/src/generated.rs: `xml_util::end_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/iam/src/generated.rs: `drop(response);`
{"generated::protocol_tests::test_parse_valid_iam_list_signing_certificates"}
$DIR/rusoto/services/iam/src/generated.rs: `ListSigningCertificatesRequestSerializer::serialize(&mut params, "", &input);`
$DIR/rusoto/services/iam/src/generated.rs: `request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));`
$DIR/rusoto/services/iam/src/generated.rs: `request.set_content_type("application/x-www-form-urlencoded".to_owned());`
$DIR/rusoto/services/iam/src/generated.rs: `xml_util::start_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/iam/src/generated.rs: `skip_tree(stack);`
$DIR/rusoto/services/iam/src/generated.rs: `xml_util::end_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/iam/src/generated.rs: `drop(response);`
{"generated::protocol_tests::test_parse_valid_iam_list_users"}
$DIR/rusoto/services/iam/src/generated.rs: `ListUsersRequestSerializer::serialize(&mut params, "", &input);`
$DIR/rusoto/services/iam/src/generated.rs: `request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));`
$DIR/rusoto/services/iam/src/generated.rs: `request.set_content_type("application/x-www-form-urlencoded".to_owned());`
$DIR/rusoto/services/iam/src/generated.rs: `xml_util::start_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/iam/src/generated.rs: `skip_tree(stack);`
$DIR/rusoto/services/iam/src/generated.rs: `xml_util::end_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/iam/src/generated.rs: `drop(response);`
{"generated::protocol_tests::test_parse_valid_iam_list_virtual_mfa_devices"}
$DIR/rusoto/services/iam/src/generated.rs: `ListVirtualMFADevicesRequestSerializer::serialize(&mut params, "", &input);`
$DIR/rusoto/services/iam/src/generated.rs: `request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));`
$DIR/rusoto/services/iam/src/generated.rs: `request.set_content_type("application/x-www-form-urlencoded".to_owned());`
$DIR/rusoto/services/iam/src/generated.rs: `xml_util::start_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/iam/src/generated.rs: `skip_tree(stack);`
$DIR/rusoto/services/iam/src/generated.rs: `xml_util::end_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/iam/src/generated.rs: `drop(response);`
{"generated::protocol_tests::test_parse_error_iam_get_user", "generated::protocol_tests::test_parse_valid_iam_create_virtual_mfa_device", "generated::protocol_tests::test_parse_valid_iam_get_account_summary", "generated::protocol_tests::test_parse_valid_iam_get_group", "generated::protocol_tests::test_parse_valid_iam_get_user", "generated::protocol_tests::test_parse_valid_iam_get_user_policy", "generated::protocol_tests::test_parse_valid_iam_list_access_keys", "generated::protocol_tests::test_parse_valid_iam_list_account_aliases", "generated::protocol_tests::test_parse_valid_iam_list_groups", "generated::protocol_tests::test_parse_valid_iam_list_instance_profiles", "generated::protocol_tests::test_parse_valid_iam_list_mfa_devices", "generated::protocol_tests::test_parse_valid_iam_list_roles", "generated::protocol_tests::test_parse_valid_iam_list_server_certificates", "generated::protocol_tests::test_parse_valid_iam_list_signing_certificates", "generated::protocol_tests::test_parse_valid_iam_list_users", "generated::protocol_tests::test_parse_valid_iam_list_virtual_mfa_devices"}
$DIR/rusoto/services/iam/src/generated.rs: `.put("Action", operation_name)`
$DIR/rusoto/services/iam/src/generated.rs: `.put("Version", "2010-05-08")`
$DIR/rusoto/services/iam/src/generated.rs: `.client.sign_and_dispatch(request)`
$DIR/rusoto/services/iam/src/generated.rs: `.status.is_success()`
$DIR/rusoto/services/iam/src/generated.rs: `.buffer()`
$DIR/rusoto/services/iam/src/generated.rs: `.map_err(RusotoError::HttpDispatch)`
{"generated::protocol_tests::test_parse_valid_iam_create_virtual_mfa_device"}
$DIR/rusoto/services/iam/src/generated.rs: `.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()))`
$DIR/rusoto/services/iam/src/generated.rs: `.set_content_type("application/x-www-form-urlencoded".to_owned())`
{"generated::protocol_tests::test_parse_valid_iam_get_account_summary"}
$DIR/rusoto/services/iam/src/generated.rs: `.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()))`
$DIR/rusoto/services/iam/src/generated.rs: `.set_content_type("application/x-www-form-urlencoded".to_owned())`
{"generated::protocol_tests::test_parse_valid_iam_get_group"}
$DIR/rusoto/services/iam/src/generated.rs: `.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()))`
$DIR/rusoto/services/iam/src/generated.rs: `.set_content_type("application/x-www-form-urlencoded".to_owned())`
{"generated::protocol_tests::test_parse_error_iam_get_user", "generated::protocol_tests::test_parse_valid_iam_get_user"}
$DIR/rusoto/services/iam/src/generated.rs: `.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()))`
$DIR/rusoto/services/iam/src/generated.rs: `.set_content_type("application/x-www-form-urlencoded".to_owned())`
{"generated::protocol_tests::test_parse_valid_iam_get_user_policy"}
$DIR/rusoto/services/iam/src/generated.rs: `.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()))`
$DIR/rusoto/services/iam/src/generated.rs: `.set_content_type("application/x-www-form-urlencoded".to_owned())`
{"generated::protocol_tests::test_parse_valid_iam_list_access_keys"}
$DIR/rusoto/services/iam/src/generated.rs: `.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()))`
$DIR/rusoto/services/iam/src/generated.rs: `.set_content_type("application/x-www-form-urlencoded".to_owned())`
{"generated::protocol_tests::test_parse_valid_iam_list_account_aliases"}
$DIR/rusoto/services/iam/src/generated.rs: `.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()))`
$DIR/rusoto/services/iam/src/generated.rs: `.set_content_type("application/x-www-form-urlencoded".to_owned())`
{"generated::protocol_tests::test_parse_valid_iam_list_groups"}
$DIR/rusoto/services/iam/src/generated.rs: `.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()))`
$DIR/rusoto/services/iam/src/generated.rs: `.set_content_type("application/x-www-form-urlencoded".to_owned())`
{"generated::protocol_tests::test_parse_valid_iam_list_instance_profiles"}
$DIR/rusoto/services/iam/src/generated.rs: `.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()))`
$DIR/rusoto/services/iam/src/generated.rs: `.set_content_type("application/x-www-form-urlencoded".to_owned())`
{"generated::protocol_tests::test_parse_valid_iam_list_mfa_devices"}
$DIR/rusoto/services/iam/src/generated.rs: `.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()))`
$DIR/rusoto/services/iam/src/generated.rs: `.set_content_type("application/x-www-form-urlencoded".to_owned())`
{"generated::protocol_tests::test_parse_valid_iam_list_roles"}
$DIR/rusoto/services/iam/src/generated.rs: `.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()))`
$DIR/rusoto/services/iam/src/generated.rs: `.set_content_type("application/x-www-form-urlencoded".to_owned())`
{"generated::protocol_tests::test_parse_valid_iam_list_server_certificates"}
$DIR/rusoto/services/iam/src/generated.rs: `.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()))`
$DIR/rusoto/services/iam/src/generated.rs: `.set_content_type("application/x-www-form-urlencoded".to_owned())`
{"generated::protocol_tests::test_parse_valid_iam_list_signing_certificates"}
$DIR/rusoto/services/iam/src/generated.rs: `.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()))`
$DIR/rusoto/services/iam/src/generated.rs: `.set_content_type("application/x-www-form-urlencoded".to_owned())`
{"generated::protocol_tests::test_parse_valid_iam_list_users"}
$DIR/rusoto/services/iam/src/generated.rs: `.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()))`
$DIR/rusoto/services/iam/src/generated.rs: `.set_content_type("application/x-www-form-urlencoded".to_owned())`
{"generated::protocol_tests::test_parse_valid_iam_list_virtual_mfa_devices"}
$DIR/rusoto/services/iam/src/generated.rs: `.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()))`
$DIR/rusoto/services/iam/src/generated.rs: `.set_content_type("application/x-www-form-urlencoded".to_owned())`
{"generated::protocol_tests::test_parse_error_iam_get_user"}
$DIR/rusoto/services/iam/src/generated.rs: `.with_body(&mock_response)`
{"generated::protocol_tests::test_parse_valid_iam_create_virtual_mfa_device"}
$DIR/rusoto/services/iam/src/generated.rs: `.with_body(&mock_response)`
{"generated::protocol_tests::test_parse_valid_iam_get_account_summary"}
$DIR/rusoto/services/iam/src/generated.rs: `.with_body(&mock_response)`
{"generated::protocol_tests::test_parse_valid_iam_get_group"}
$DIR/rusoto/services/iam/src/generated.rs: `.with_body(&mock_response)`
{"generated::protocol_tests::test_parse_valid_iam_get_user_policy"}
$DIR/rusoto/services/iam/src/generated.rs: `.with_body(&mock_response)`
{"generated::protocol_tests::test_parse_valid_iam_get_user"}
$DIR/rusoto/services/iam/src/generated.rs: `.with_body(&mock_response)`
{"generated::protocol_tests::test_parse_valid_iam_list_access_keys"}
$DIR/rusoto/services/iam/src/generated.rs: `.with_body(&mock_response)`
{"generated::protocol_tests::test_parse_valid_iam_list_account_aliases"}
$DIR/rusoto/services/iam/src/generated.rs: `.with_body(&mock_response)`
{"generated::protocol_tests::test_parse_valid_iam_list_groups"}
$DIR/rusoto/services/iam/src/generated.rs: `.with_body(&mock_response)`
{"generated::protocol_tests::test_parse_valid_iam_list_instance_profiles"}
$DIR/rusoto/services/iam/src/generated.rs: `.with_body(&mock_response)`
{"generated::protocol_tests::test_parse_valid_iam_list_mfa_devices"}
$DIR/rusoto/services/iam/src/generated.rs: `.with_body(&mock_response)`
{"generated::protocol_tests::test_parse_valid_iam_list_roles"}
$DIR/rusoto/services/iam/src/generated.rs: `.with_body(&mock_response)`
{"generated::protocol_tests::test_parse_valid_iam_list_server_certificates"}
$DIR/rusoto/services/iam/src/generated.rs: `.with_body(&mock_response)`
{"generated::protocol_tests::test_parse_valid_iam_list_signing_certificates"}
$DIR/rusoto/services/iam/src/generated.rs: `.with_body(&mock_response)`
{"generated::protocol_tests::test_parse_valid_iam_list_users"}
$DIR/rusoto/services/iam/src/generated.rs: `.with_body(&mock_response)`
{"generated::protocol_tests::test_parse_valid_iam_list_virtual_mfa_devices"}
$DIR/rusoto/services/iam/src/generated.rs: `.with_body(&mock_response)`
{"generated::protocol_tests::test_parse_error_importexport_get_status", "generated::protocol_tests::test_parse_valid_importexport_list_jobs"}
$DIR/rusoto/services/importexport/src/generated.rs: `params.put("Action", operation_name);`
$DIR/rusoto/services/importexport/src/generated.rs: `params.put("Version", "2010-06-01");`
{"generated::protocol_tests::test_parse_error_importexport_get_status"}
$DIR/rusoto/services/importexport/src/generated.rs: `GetStatusInputSerializer::serialize(&mut params, "", &input);`
$DIR/rusoto/services/importexport/src/generated.rs: `request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));`
$DIR/rusoto/services/importexport/src/generated.rs: `request.set_content_type("application/x-www-form-urlencoded".to_owned());`
$DIR/rusoto/services/importexport/src/generated.rs: `xml_util::start_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/importexport/src/generated.rs: `skip_tree(stack);`
$DIR/rusoto/services/importexport/src/generated.rs: `xml_util::end_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/importexport/src/generated.rs: `drop(response);`
{"generated::protocol_tests::test_parse_valid_importexport_list_jobs"}
$DIR/rusoto/services/importexport/src/generated.rs: `ListJobsInputSerializer::serialize(&mut params, "", &input);`
$DIR/rusoto/services/importexport/src/generated.rs: `request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));`
$DIR/rusoto/services/importexport/src/generated.rs: `request.set_content_type("application/x-www-form-urlencoded".to_owned());`
$DIR/rusoto/services/importexport/src/generated.rs: `xml_util::start_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/importexport/src/generated.rs: `skip_tree(stack);`
$DIR/rusoto/services/importexport/src/generated.rs: `xml_util::end_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/importexport/src/generated.rs: `drop(response);`
{"generated::protocol_tests::test_parse_error_importexport_get_status", "generated::protocol_tests::test_parse_valid_importexport_list_jobs"}
$DIR/rusoto/services/importexport/src/generated.rs: `.put("Action", operation_name)`
$DIR/rusoto/services/importexport/src/generated.rs: `.put("Version", "2010-06-01")`
$DIR/rusoto/services/importexport/src/generated.rs: `.client.sign_and_dispatch(request)`
$DIR/rusoto/services/importexport/src/generated.rs: `.status.is_success()`
$DIR/rusoto/services/importexport/src/generated.rs: `.buffer()`
$DIR/rusoto/services/importexport/src/generated.rs: `.map_err(RusotoError::HttpDispatch)`
{"generated::protocol_tests::test_parse_error_importexport_get_status"}
$DIR/rusoto/services/importexport/src/generated.rs: `.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()))`
$DIR/rusoto/services/importexport/src/generated.rs: `.set_content_type("application/x-www-form-urlencoded".to_owned())`
{"generated::protocol_tests::test_parse_valid_importexport_list_jobs"}
$DIR/rusoto/services/importexport/src/generated.rs: `.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()))`
$DIR/rusoto/services/importexport/src/generated.rs: `.set_content_type("application/x-www-form-urlencoded".to_owned())`
{"generated::protocol_tests::test_parse_error_importexport_get_status"}
$DIR/rusoto/services/importexport/src/generated.rs: `.with_body(&mock_response)`
{"generated::protocol_tests::test_parse_valid_importexport_list_jobs"}
$DIR/rusoto/services/importexport/src/generated.rs: `.with_body(&mock_response)`
{"custom::custom_tests::serialize_get_policy_response"}
$DIR/rusoto/services/lambda/src/custom/custom_tests.rs: `.into()`
$DIR/rusoto/services/lambda/src/custom/custom_tests.rs: `.with_json_body(policy.clone())`
$DIR/rusoto/services/lambda/src/custom/custom_tests.rs: `.get_policy(GetPolicyRequest {
            function_name: "test-func".into(),
            ..GetPolicyRequest::default()
        })`
$DIR/rusoto/services/lambda/src/custom/custom_tests.rs: `.into()`
{"custom::custom_tests::should_parse_invocation_response"}
$DIR/rusoto/services/lambda/src/custom/custom_tests.rs: `.with_body(r#"{"arbitrary":"json"}"#)`
$DIR/rusoto/services/lambda/src/custom/custom_tests.rs: `.with_header("X-Amz-Function-Error", "Handled")`
$DIR/rusoto/services/lambda/src/custom/custom_tests.rs: `.with_header("X-Amz-Log-Result", "foo bar baz")`
$DIR/rusoto/services/lambda/src/custom/custom_tests.rs: `.with_request_checker(|request: &SignedRequest| {
            assert_eq!("POST", request.method);
            if let Some(SignedRequestPayload::Buffer(ref buffer)) = request.payload {
                assert_eq!(b"raw payload", buffer.as_ref());
            } else {
                panic!("request payload is not a buffer");
            }
            assert_eq!("/2015-03-31/functions/foo/invocations", request.path);
        })`
$DIR/rusoto/services/lambda/src/custom/custom_tests.rs: `.into()`
$DIR/rusoto/services/lambda/src/custom/custom_tests.rs: `.invoke(request)`
{"custom::custom_tests::test_post_text_resposnse_serialization"}
$DIR/rusoto/services/lex-runtime/src/custom/custom_tests.rs: `slots.insert("CarType".to_owned(), None);`
$DIR/rusoto/services/lex-runtime/src/custom/custom_tests.rs: `slots.insert("PickUpCity".to_owned(), Some("Boston".to_owned()));`
$DIR/rusoto/services/lex-runtime/src/custom/custom_tests.rs: `.with_body(mock_resp_body)`
$DIR/rusoto/services/lex-runtime/src/custom/custom_tests.rs: `.insert("CarType".to_owned(), None)`
$DIR/rusoto/services/lex-runtime/src/custom/custom_tests.rs: `.insert("PickUpCity".to_owned(), Some("Boston".to_owned()))`
$DIR/rusoto/services/lex-runtime/src/custom/custom_tests.rs: `.post_text(post_text_req)`
{"generated::protocol_tests::test_parse_error_rds_describe_db_instances", "generated::protocol_tests::test_parse_valid_rds_describe_db_engine_versions", "generated::protocol_tests::test_parse_valid_rds_describe_db_instances", "generated::protocol_tests::test_parse_valid_rds_describe_db_parameter_groups", "generated::protocol_tests::test_parse_valid_rds_describe_db_security_groups", "generated::protocol_tests::test_parse_valid_rds_describe_db_snapshots", "generated::protocol_tests::test_parse_valid_rds_describe_db_subnet_groups", "generated::protocol_tests::test_parse_valid_rds_describe_event_categories", "generated::protocol_tests::test_parse_valid_rds_describe_event_subscriptions", "generated::protocol_tests::test_parse_valid_rds_describe_events", "generated::protocol_tests::test_parse_valid_rds_describe_option_groups", "generated::protocol_tests::test_parse_valid_rds_describe_reserved_db_instances", "generated::protocol_tests::test_parse_valid_rds_describe_reserved_db_instances_offerings"}
$DIR/rusoto/services/rds/src/generated.rs: `params.put("Action", operation_name);`
$DIR/rusoto/services/rds/src/generated.rs: `params.put("Version", "2014-10-31");`
{"generated::protocol_tests::test_parse_valid_rds_describe_db_engine_versions"}
$DIR/rusoto/services/rds/src/generated.rs: `DescribeDBEngineVersionsMessageSerializer::serialize(&mut params, "", &input);`
$DIR/rusoto/services/rds/src/generated.rs: `request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));`
$DIR/rusoto/services/rds/src/generated.rs: `request.set_content_type("application/x-www-form-urlencoded".to_owned());`
$DIR/rusoto/services/rds/src/generated.rs: `xml_util::start_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/rds/src/generated.rs: `skip_tree(stack);`
$DIR/rusoto/services/rds/src/generated.rs: `xml_util::end_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/rds/src/generated.rs: `drop(response);`
{"generated::protocol_tests::test_parse_error_rds_describe_db_instances", "generated::protocol_tests::test_parse_valid_rds_describe_db_instances"}
$DIR/rusoto/services/rds/src/generated.rs: `DescribeDBInstancesMessageSerializer::serialize(&mut params, "", &input);`
$DIR/rusoto/services/rds/src/generated.rs: `request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));`
$DIR/rusoto/services/rds/src/generated.rs: `request.set_content_type("application/x-www-form-urlencoded".to_owned());`
$DIR/rusoto/services/rds/src/generated.rs: `xml_util::start_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/rds/src/generated.rs: `skip_tree(stack);`
$DIR/rusoto/services/rds/src/generated.rs: `xml_util::end_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/rds/src/generated.rs: `drop(response);`
{"generated::protocol_tests::test_parse_valid_rds_describe_db_parameter_groups"}
$DIR/rusoto/services/rds/src/generated.rs: `DescribeDBParameterGroupsMessageSerializer::serialize(&mut params, "", &input);`
$DIR/rusoto/services/rds/src/generated.rs: `request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));`
$DIR/rusoto/services/rds/src/generated.rs: `request.set_content_type("application/x-www-form-urlencoded".to_owned());`
$DIR/rusoto/services/rds/src/generated.rs: `xml_util::start_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/rds/src/generated.rs: `skip_tree(stack);`
$DIR/rusoto/services/rds/src/generated.rs: `xml_util::end_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/rds/src/generated.rs: `drop(response);`
{"generated::protocol_tests::test_parse_valid_rds_describe_db_security_groups"}
$DIR/rusoto/services/rds/src/generated.rs: `DescribeDBSecurityGroupsMessageSerializer::serialize(&mut params, "", &input);`
$DIR/rusoto/services/rds/src/generated.rs: `request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));`
$DIR/rusoto/services/rds/src/generated.rs: `request.set_content_type("application/x-www-form-urlencoded".to_owned());`
$DIR/rusoto/services/rds/src/generated.rs: `xml_util::start_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/rds/src/generated.rs: `skip_tree(stack);`
$DIR/rusoto/services/rds/src/generated.rs: `xml_util::end_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/rds/src/generated.rs: `drop(response);`
{"generated::protocol_tests::test_parse_valid_rds_describe_db_snapshots"}
$DIR/rusoto/services/rds/src/generated.rs: `DescribeDBSnapshotsMessageSerializer::serialize(&mut params, "", &input);`
$DIR/rusoto/services/rds/src/generated.rs: `request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));`
$DIR/rusoto/services/rds/src/generated.rs: `request.set_content_type("application/x-www-form-urlencoded".to_owned());`
$DIR/rusoto/services/rds/src/generated.rs: `xml_util::start_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/rds/src/generated.rs: `skip_tree(stack);`
$DIR/rusoto/services/rds/src/generated.rs: `xml_util::end_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/rds/src/generated.rs: `drop(response);`
{"generated::protocol_tests::test_parse_valid_rds_describe_db_subnet_groups"}
$DIR/rusoto/services/rds/src/generated.rs: `DescribeDBSubnetGroupsMessageSerializer::serialize(&mut params, "", &input);`
$DIR/rusoto/services/rds/src/generated.rs: `request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));`
$DIR/rusoto/services/rds/src/generated.rs: `request.set_content_type("application/x-www-form-urlencoded".to_owned());`
$DIR/rusoto/services/rds/src/generated.rs: `xml_util::start_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/rds/src/generated.rs: `skip_tree(stack);`
$DIR/rusoto/services/rds/src/generated.rs: `xml_util::end_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/rds/src/generated.rs: `drop(response);`
{"generated::protocol_tests::test_parse_valid_rds_describe_event_categories"}
$DIR/rusoto/services/rds/src/generated.rs: `DescribeEventCategoriesMessageSerializer::serialize(&mut params, "", &input);`
$DIR/rusoto/services/rds/src/generated.rs: `request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));`
$DIR/rusoto/services/rds/src/generated.rs: `request.set_content_type("application/x-www-form-urlencoded".to_owned());`
$DIR/rusoto/services/rds/src/generated.rs: `xml_util::start_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/rds/src/generated.rs: `skip_tree(stack);`
$DIR/rusoto/services/rds/src/generated.rs: `xml_util::end_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/rds/src/generated.rs: `drop(response);`
{"generated::protocol_tests::test_parse_valid_rds_describe_event_subscriptions"}
$DIR/rusoto/services/rds/src/generated.rs: `DescribeEventSubscriptionsMessageSerializer::serialize(&mut params, "", &input);`
$DIR/rusoto/services/rds/src/generated.rs: `request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));`
$DIR/rusoto/services/rds/src/generated.rs: `request.set_content_type("application/x-www-form-urlencoded".to_owned());`
$DIR/rusoto/services/rds/src/generated.rs: `xml_util::start_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/rds/src/generated.rs: `skip_tree(stack);`
$DIR/rusoto/services/rds/src/generated.rs: `xml_util::end_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/rds/src/generated.rs: `drop(response);`
{"generated::protocol_tests::test_parse_valid_rds_describe_events"}
$DIR/rusoto/services/rds/src/generated.rs: `DescribeEventsMessageSerializer::serialize(&mut params, "", &input);`
$DIR/rusoto/services/rds/src/generated.rs: `request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));`
$DIR/rusoto/services/rds/src/generated.rs: `request.set_content_type("application/x-www-form-urlencoded".to_owned());`
$DIR/rusoto/services/rds/src/generated.rs: `xml_util::start_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/rds/src/generated.rs: `skip_tree(stack);`
$DIR/rusoto/services/rds/src/generated.rs: `xml_util::end_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/rds/src/generated.rs: `drop(response);`
{"generated::protocol_tests::test_parse_valid_rds_describe_option_groups"}
$DIR/rusoto/services/rds/src/generated.rs: `DescribeOptionGroupsMessageSerializer::serialize(&mut params, "", &input);`
$DIR/rusoto/services/rds/src/generated.rs: `request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));`
$DIR/rusoto/services/rds/src/generated.rs: `request.set_content_type("application/x-www-form-urlencoded".to_owned());`
$DIR/rusoto/services/rds/src/generated.rs: `xml_util::start_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/rds/src/generated.rs: `skip_tree(stack);`
$DIR/rusoto/services/rds/src/generated.rs: `xml_util::end_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/rds/src/generated.rs: `drop(response);`
{"generated::protocol_tests::test_parse_valid_rds_describe_reserved_db_instances"}
$DIR/rusoto/services/rds/src/generated.rs: `DescribeReservedDBInstancesMessageSerializer::serialize(&mut params, "", &input);`
$DIR/rusoto/services/rds/src/generated.rs: `request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));`
$DIR/rusoto/services/rds/src/generated.rs: `request.set_content_type("application/x-www-form-urlencoded".to_owned());`
$DIR/rusoto/services/rds/src/generated.rs: `xml_util::start_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/rds/src/generated.rs: `skip_tree(stack);`
$DIR/rusoto/services/rds/src/generated.rs: `xml_util::end_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/rds/src/generated.rs: `drop(response);`
{"generated::protocol_tests::test_parse_valid_rds_describe_reserved_db_instances_offerings"}
$DIR/rusoto/services/rds/src/generated.rs: `DescribeReservedDBInstancesOfferingsMessageSerializer::serialize(&mut params, "", &input);`
$DIR/rusoto/services/rds/src/generated.rs: `request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));`
$DIR/rusoto/services/rds/src/generated.rs: `request.set_content_type("application/x-www-form-urlencoded".to_owned());`
$DIR/rusoto/services/rds/src/generated.rs: `xml_util::start_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/rds/src/generated.rs: `skip_tree(stack);`
$DIR/rusoto/services/rds/src/generated.rs: `xml_util::end_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/rds/src/generated.rs: `drop(response);`
{"generated::protocol_tests::test_parse_error_rds_describe_db_instances", "generated::protocol_tests::test_parse_valid_rds_describe_db_engine_versions", "generated::protocol_tests::test_parse_valid_rds_describe_db_instances", "generated::protocol_tests::test_parse_valid_rds_describe_db_parameter_groups", "generated::protocol_tests::test_parse_valid_rds_describe_db_security_groups", "generated::protocol_tests::test_parse_valid_rds_describe_db_snapshots", "generated::protocol_tests::test_parse_valid_rds_describe_db_subnet_groups", "generated::protocol_tests::test_parse_valid_rds_describe_event_categories", "generated::protocol_tests::test_parse_valid_rds_describe_event_subscriptions", "generated::protocol_tests::test_parse_valid_rds_describe_events", "generated::protocol_tests::test_parse_valid_rds_describe_option_groups", "generated::protocol_tests::test_parse_valid_rds_describe_reserved_db_instances", "generated::protocol_tests::test_parse_valid_rds_describe_reserved_db_instances_offerings"}
$DIR/rusoto/services/rds/src/generated.rs: `.put("Action", operation_name)`
$DIR/rusoto/services/rds/src/generated.rs: `.put("Version", "2014-10-31")`
$DIR/rusoto/services/rds/src/generated.rs: `.client.sign_and_dispatch(request)`
$DIR/rusoto/services/rds/src/generated.rs: `.status.is_success()`
$DIR/rusoto/services/rds/src/generated.rs: `.buffer()`
$DIR/rusoto/services/rds/src/generated.rs: `.map_err(RusotoError::HttpDispatch)`
{"generated::protocol_tests::test_parse_valid_rds_describe_db_engine_versions"}
$DIR/rusoto/services/rds/src/generated.rs: `.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()))`
$DIR/rusoto/services/rds/src/generated.rs: `.set_content_type("application/x-www-form-urlencoded".to_owned())`
{"generated::protocol_tests::test_parse_error_rds_describe_db_instances", "generated::protocol_tests::test_parse_valid_rds_describe_db_instances"}
$DIR/rusoto/services/rds/src/generated.rs: `.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()))`
$DIR/rusoto/services/rds/src/generated.rs: `.set_content_type("application/x-www-form-urlencoded".to_owned())`
{"generated::protocol_tests::test_parse_valid_rds_describe_db_parameter_groups"}
$DIR/rusoto/services/rds/src/generated.rs: `.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()))`
$DIR/rusoto/services/rds/src/generated.rs: `.set_content_type("application/x-www-form-urlencoded".to_owned())`
{"generated::protocol_tests::test_parse_valid_rds_describe_db_security_groups"}
$DIR/rusoto/services/rds/src/generated.rs: `.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()))`
$DIR/rusoto/services/rds/src/generated.rs: `.set_content_type("application/x-www-form-urlencoded".to_owned())`
{"generated::protocol_tests::test_parse_valid_rds_describe_db_snapshots"}
$DIR/rusoto/services/rds/src/generated.rs: `.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()))`
$DIR/rusoto/services/rds/src/generated.rs: `.set_content_type("application/x-www-form-urlencoded".to_owned())`
{"generated::protocol_tests::test_parse_valid_rds_describe_db_subnet_groups"}
$DIR/rusoto/services/rds/src/generated.rs: `.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()))`
$DIR/rusoto/services/rds/src/generated.rs: `.set_content_type("application/x-www-form-urlencoded".to_owned())`
{"generated::protocol_tests::test_parse_valid_rds_describe_event_categories"}
$DIR/rusoto/services/rds/src/generated.rs: `.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()))`
$DIR/rusoto/services/rds/src/generated.rs: `.set_content_type("application/x-www-form-urlencoded".to_owned())`
{"generated::protocol_tests::test_parse_valid_rds_describe_event_subscriptions"}
$DIR/rusoto/services/rds/src/generated.rs: `.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()))`
$DIR/rusoto/services/rds/src/generated.rs: `.set_content_type("application/x-www-form-urlencoded".to_owned())`
{"generated::protocol_tests::test_parse_valid_rds_describe_events"}
$DIR/rusoto/services/rds/src/generated.rs: `.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()))`
$DIR/rusoto/services/rds/src/generated.rs: `.set_content_type("application/x-www-form-urlencoded".to_owned())`
{"generated::protocol_tests::test_parse_valid_rds_describe_option_groups"}
$DIR/rusoto/services/rds/src/generated.rs: `.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()))`
$DIR/rusoto/services/rds/src/generated.rs: `.set_content_type("application/x-www-form-urlencoded".to_owned())`
{"generated::protocol_tests::test_parse_valid_rds_describe_reserved_db_instances"}
$DIR/rusoto/services/rds/src/generated.rs: `.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()))`
$DIR/rusoto/services/rds/src/generated.rs: `.set_content_type("application/x-www-form-urlencoded".to_owned())`
{"generated::protocol_tests::test_parse_valid_rds_describe_reserved_db_instances_offerings"}
$DIR/rusoto/services/rds/src/generated.rs: `.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()))`
$DIR/rusoto/services/rds/src/generated.rs: `.set_content_type("application/x-www-form-urlencoded".to_owned())`
{"generated::protocol_tests::test_parse_error_rds_describe_db_instances"}
$DIR/rusoto/services/rds/src/generated.rs: `.with_body(&mock_response)`
{"generated::protocol_tests::test_parse_valid_rds_describe_db_engine_versions"}
$DIR/rusoto/services/rds/src/generated.rs: `.with_body(&mock_response)`
{"generated::protocol_tests::test_parse_valid_rds_describe_db_instances"}
$DIR/rusoto/services/rds/src/generated.rs: `.with_body(&mock_response)`
{"generated::protocol_tests::test_parse_valid_rds_describe_db_parameter_groups"}
$DIR/rusoto/services/rds/src/generated.rs: `.with_body(&mock_response)`
{"generated::protocol_tests::test_parse_valid_rds_describe_db_security_groups"}
$DIR/rusoto/services/rds/src/generated.rs: `.with_body(&mock_response)`
{"generated::protocol_tests::test_parse_valid_rds_describe_db_snapshots"}
$DIR/rusoto/services/rds/src/generated.rs: `.with_body(&mock_response)`
{"generated::protocol_tests::test_parse_valid_rds_describe_db_subnet_groups"}
$DIR/rusoto/services/rds/src/generated.rs: `.with_body(&mock_response)`
{"generated::protocol_tests::test_parse_valid_rds_describe_event_categories"}
$DIR/rusoto/services/rds/src/generated.rs: `.with_body(&mock_response)`
{"generated::protocol_tests::test_parse_valid_rds_describe_event_subscriptions"}
$DIR/rusoto/services/rds/src/generated.rs: `.with_body(&mock_response)`
{"generated::protocol_tests::test_parse_valid_rds_describe_events"}
$DIR/rusoto/services/rds/src/generated.rs: `.with_body(&mock_response)`
{"generated::protocol_tests::test_parse_valid_rds_describe_option_groups"}
$DIR/rusoto/services/rds/src/generated.rs: `.with_body(&mock_response)`
{"generated::protocol_tests::test_parse_valid_rds_describe_reserved_db_instances_offerings"}
$DIR/rusoto/services/rds/src/generated.rs: `.with_body(&mock_response)`
{"generated::protocol_tests::test_parse_valid_rds_describe_reserved_db_instances"}
$DIR/rusoto/services/rds/src/generated.rs: `.with_body(&mock_response)`
{"generated::protocol_tests::test_parse_valid_redshift_authorize_cluster_security_group_ingress", "generated::protocol_tests::test_parse_valid_redshift_copy_cluster_snapshot", "generated::protocol_tests::test_parse_valid_redshift_create_cluster", "generated::protocol_tests::test_parse_valid_redshift_create_cluster_parameter_group", "generated::protocol_tests::test_parse_valid_redshift_create_cluster_security_group", "generated::protocol_tests::test_parse_valid_redshift_create_cluster_snapshot", "generated::protocol_tests::test_parse_valid_redshift_create_cluster_subnet_group", "generated::protocol_tests::test_parse_valid_redshift_delete_cluster", "generated::protocol_tests::test_parse_valid_redshift_delete_cluster_parameter_group", "generated::protocol_tests::test_parse_valid_redshift_delete_cluster_snapshot", "generated::protocol_tests::test_parse_valid_redshift_describe_cluster_parameter_groups", "generated::protocol_tests::test_parse_valid_redshift_describe_cluster_parameters", "generated::protocol_tests::test_parse_valid_redshift_describe_cluster_security_groups", "generated::protocol_tests::test_parse_valid_redshift_describe_cluster_snapshots", "generated::protocol_tests::test_parse_valid_redshift_describe_cluster_subnet_groups", "generated::protocol_tests::test_parse_valid_redshift_describe_cluster_versions", "generated::protocol_tests::test_parse_valid_redshift_describe_clusters", "generated::protocol_tests::test_parse_valid_redshift_describe_events", "generated::protocol_tests::test_parse_valid_redshift_describe_orderable_cluster_options", "generated::protocol_tests::test_parse_valid_redshift_describe_reserved_node_offerings", "generated::protocol_tests::test_parse_valid_redshift_describe_reserved_nodes", "generated::protocol_tests::test_parse_valid_redshift_describe_resize", "generated::protocol_tests::test_parse_valid_redshift_modify_cluster_parameter_group", "generated::protocol_tests::test_parse_valid_redshift_purchase_reserved_node_offering", "generated::protocol_tests::test_parse_valid_redshift_reboot_cluster", "generated::protocol_tests::test_parse_valid_redshift_reset_cluster_parameter_group", "generated::protocol_tests::test_parse_valid_redshift_restore_from_cluster_snapshot", "generated::protocol_tests::test_parse_valid_redshift_revoke_cluster_security_group_ingress"}
$DIR/rusoto/services/redshift/src/generated.rs: `params.put("Action", operation_name);`
$DIR/rusoto/services/redshift/src/generated.rs: `params.put("Version", "2012-12-01");`
{"generated::protocol_tests::test_parse_valid_redshift_authorize_cluster_security_group_ingress"}
$DIR/rusoto/services/redshift/src/generated.rs: `AuthorizeClusterSecurityGroupIngressMessageSerializer::serialize(&mut params, "", &input);`
$DIR/rusoto/services/redshift/src/generated.rs: `request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));`
$DIR/rusoto/services/redshift/src/generated.rs: `request.set_content_type("application/x-www-form-urlencoded".to_owned());`
$DIR/rusoto/services/redshift/src/generated.rs: `xml_util::start_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/redshift/src/generated.rs: `skip_tree(stack);`
$DIR/rusoto/services/redshift/src/generated.rs: `xml_util::end_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/redshift/src/generated.rs: `drop(response);`
{"generated::protocol_tests::test_parse_valid_redshift_copy_cluster_snapshot"}
$DIR/rusoto/services/redshift/src/generated.rs: `CopyClusterSnapshotMessageSerializer::serialize(&mut params, "", &input);`
$DIR/rusoto/services/redshift/src/generated.rs: `request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));`
$DIR/rusoto/services/redshift/src/generated.rs: `request.set_content_type("application/x-www-form-urlencoded".to_owned());`
$DIR/rusoto/services/redshift/src/generated.rs: `xml_util::start_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/redshift/src/generated.rs: `skip_tree(stack);`
$DIR/rusoto/services/redshift/src/generated.rs: `xml_util::end_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/redshift/src/generated.rs: `drop(response);`
{"generated::protocol_tests::test_parse_valid_redshift_create_cluster"}
$DIR/rusoto/services/redshift/src/generated.rs: `CreateClusterMessageSerializer::serialize(&mut params, "", &input);`
$DIR/rusoto/services/redshift/src/generated.rs: `request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));`
$DIR/rusoto/services/redshift/src/generated.rs: `request.set_content_type("application/x-www-form-urlencoded".to_owned());`
$DIR/rusoto/services/redshift/src/generated.rs: `xml_util::start_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/redshift/src/generated.rs: `skip_tree(stack);`
$DIR/rusoto/services/redshift/src/generated.rs: `xml_util::end_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/redshift/src/generated.rs: `drop(response);`
{"generated::protocol_tests::test_parse_valid_redshift_create_cluster_parameter_group"}
$DIR/rusoto/services/redshift/src/generated.rs: `CreateClusterParameterGroupMessageSerializer::serialize(&mut params, "", &input);`
$DIR/rusoto/services/redshift/src/generated.rs: `request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));`
$DIR/rusoto/services/redshift/src/generated.rs: `request.set_content_type("application/x-www-form-urlencoded".to_owned());`
$DIR/rusoto/services/redshift/src/generated.rs: `xml_util::start_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/redshift/src/generated.rs: `skip_tree(stack);`
$DIR/rusoto/services/redshift/src/generated.rs: `xml_util::end_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/redshift/src/generated.rs: `drop(response);`
{"generated::protocol_tests::test_parse_valid_redshift_create_cluster_security_group"}
$DIR/rusoto/services/redshift/src/generated.rs: `CreateClusterSecurityGroupMessageSerializer::serialize(&mut params, "", &input);`
$DIR/rusoto/services/redshift/src/generated.rs: `request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));`
$DIR/rusoto/services/redshift/src/generated.rs: `request.set_content_type("application/x-www-form-urlencoded".to_owned());`
$DIR/rusoto/services/redshift/src/generated.rs: `xml_util::start_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/redshift/src/generated.rs: `skip_tree(stack);`
$DIR/rusoto/services/redshift/src/generated.rs: `xml_util::end_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/redshift/src/generated.rs: `drop(response);`
{"generated::protocol_tests::test_parse_valid_redshift_create_cluster_snapshot"}
$DIR/rusoto/services/redshift/src/generated.rs: `CreateClusterSnapshotMessageSerializer::serialize(&mut params, "", &input);`
$DIR/rusoto/services/redshift/src/generated.rs: `request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));`
$DIR/rusoto/services/redshift/src/generated.rs: `request.set_content_type("application/x-www-form-urlencoded".to_owned());`
$DIR/rusoto/services/redshift/src/generated.rs: `xml_util::start_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/redshift/src/generated.rs: `skip_tree(stack);`
$DIR/rusoto/services/redshift/src/generated.rs: `xml_util::end_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/redshift/src/generated.rs: `drop(response);`
{"generated::protocol_tests::test_parse_valid_redshift_create_cluster_subnet_group"}
$DIR/rusoto/services/redshift/src/generated.rs: `CreateClusterSubnetGroupMessageSerializer::serialize(&mut params, "", &input);`
$DIR/rusoto/services/redshift/src/generated.rs: `request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));`
$DIR/rusoto/services/redshift/src/generated.rs: `request.set_content_type("application/x-www-form-urlencoded".to_owned());`
$DIR/rusoto/services/redshift/src/generated.rs: `xml_util::start_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/redshift/src/generated.rs: `skip_tree(stack);`
$DIR/rusoto/services/redshift/src/generated.rs: `xml_util::end_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/redshift/src/generated.rs: `drop(response);`
{"generated::protocol_tests::test_parse_valid_redshift_delete_cluster"}
$DIR/rusoto/services/redshift/src/generated.rs: `DeleteClusterMessageSerializer::serialize(&mut params, "", &input);`
$DIR/rusoto/services/redshift/src/generated.rs: `request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));`
$DIR/rusoto/services/redshift/src/generated.rs: `request.set_content_type("application/x-www-form-urlencoded".to_owned());`
$DIR/rusoto/services/redshift/src/generated.rs: `xml_util::start_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/redshift/src/generated.rs: `skip_tree(stack);`
$DIR/rusoto/services/redshift/src/generated.rs: `xml_util::end_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/redshift/src/generated.rs: `drop(response);`
{"generated::protocol_tests::test_parse_valid_redshift_delete_cluster_parameter_group"}
$DIR/rusoto/services/redshift/src/generated.rs: `DeleteClusterParameterGroupMessageSerializer::serialize(&mut params, "", &input);`
$DIR/rusoto/services/redshift/src/generated.rs: `request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));`
$DIR/rusoto/services/redshift/src/generated.rs: `request.set_content_type("application/x-www-form-urlencoded".to_owned());`
$DIR/rusoto/services/redshift/src/generated.rs: `std::mem::drop(response);`
{"generated::protocol_tests::test_parse_valid_redshift_delete_cluster_snapshot"}
$DIR/rusoto/services/redshift/src/generated.rs: `DeleteClusterSnapshotMessageSerializer::serialize(&mut params, "", &input);`
$DIR/rusoto/services/redshift/src/generated.rs: `request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));`
$DIR/rusoto/services/redshift/src/generated.rs: `request.set_content_type("application/x-www-form-urlencoded".to_owned());`
$DIR/rusoto/services/redshift/src/generated.rs: `xml_util::start_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/redshift/src/generated.rs: `skip_tree(stack);`
$DIR/rusoto/services/redshift/src/generated.rs: `xml_util::end_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/redshift/src/generated.rs: `drop(response);`
{"generated::protocol_tests::test_parse_valid_redshift_describe_cluster_parameter_groups"}
$DIR/rusoto/services/redshift/src/generated.rs: `DescribeClusterParameterGroupsMessageSerializer::serialize(&mut params, "", &input);`
$DIR/rusoto/services/redshift/src/generated.rs: `request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));`
$DIR/rusoto/services/redshift/src/generated.rs: `request.set_content_type("application/x-www-form-urlencoded".to_owned());`
$DIR/rusoto/services/redshift/src/generated.rs: `xml_util::start_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/redshift/src/generated.rs: `skip_tree(stack);`
$DIR/rusoto/services/redshift/src/generated.rs: `xml_util::end_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/redshift/src/generated.rs: `drop(response);`
{"generated::protocol_tests::test_parse_valid_redshift_describe_cluster_parameters"}
$DIR/rusoto/services/redshift/src/generated.rs: `DescribeClusterParametersMessageSerializer::serialize(&mut params, "", &input);`
$DIR/rusoto/services/redshift/src/generated.rs: `request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));`
$DIR/rusoto/services/redshift/src/generated.rs: `request.set_content_type("application/x-www-form-urlencoded".to_owned());`
$DIR/rusoto/services/redshift/src/generated.rs: `xml_util::start_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/redshift/src/generated.rs: `skip_tree(stack);`
$DIR/rusoto/services/redshift/src/generated.rs: `xml_util::end_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/redshift/src/generated.rs: `drop(response);`
{"generated::protocol_tests::test_parse_valid_redshift_describe_cluster_security_groups"}
$DIR/rusoto/services/redshift/src/generated.rs: `DescribeClusterSecurityGroupsMessageSerializer::serialize(&mut params, "", &input);`
$DIR/rusoto/services/redshift/src/generated.rs: `request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));`
$DIR/rusoto/services/redshift/src/generated.rs: `request.set_content_type("application/x-www-form-urlencoded".to_owned());`
$DIR/rusoto/services/redshift/src/generated.rs: `xml_util::start_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/redshift/src/generated.rs: `skip_tree(stack);`
$DIR/rusoto/services/redshift/src/generated.rs: `xml_util::end_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/redshift/src/generated.rs: `drop(response);`
{"generated::protocol_tests::test_parse_valid_redshift_describe_cluster_snapshots"}
$DIR/rusoto/services/redshift/src/generated.rs: `DescribeClusterSnapshotsMessageSerializer::serialize(&mut params, "", &input);`
$DIR/rusoto/services/redshift/src/generated.rs: `request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));`
$DIR/rusoto/services/redshift/src/generated.rs: `request.set_content_type("application/x-www-form-urlencoded".to_owned());`
$DIR/rusoto/services/redshift/src/generated.rs: `xml_util::start_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/redshift/src/generated.rs: `skip_tree(stack);`
$DIR/rusoto/services/redshift/src/generated.rs: `xml_util::end_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/redshift/src/generated.rs: `drop(response);`
{"generated::protocol_tests::test_parse_valid_redshift_describe_cluster_subnet_groups"}
$DIR/rusoto/services/redshift/src/generated.rs: `DescribeClusterSubnetGroupsMessageSerializer::serialize(&mut params, "", &input);`
$DIR/rusoto/services/redshift/src/generated.rs: `request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));`
$DIR/rusoto/services/redshift/src/generated.rs: `request.set_content_type("application/x-www-form-urlencoded".to_owned());`
$DIR/rusoto/services/redshift/src/generated.rs: `xml_util::start_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/redshift/src/generated.rs: `skip_tree(stack);`
$DIR/rusoto/services/redshift/src/generated.rs: `xml_util::end_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/redshift/src/generated.rs: `drop(response);`
{"generated::protocol_tests::test_parse_valid_redshift_describe_cluster_versions"}
$DIR/rusoto/services/redshift/src/generated.rs: `DescribeClusterVersionsMessageSerializer::serialize(&mut params, "", &input);`
$DIR/rusoto/services/redshift/src/generated.rs: `request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));`
$DIR/rusoto/services/redshift/src/generated.rs: `request.set_content_type("application/x-www-form-urlencoded".to_owned());`
$DIR/rusoto/services/redshift/src/generated.rs: `xml_util::start_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/redshift/src/generated.rs: `skip_tree(stack);`
$DIR/rusoto/services/redshift/src/generated.rs: `xml_util::end_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/redshift/src/generated.rs: `drop(response);`
{"generated::protocol_tests::test_parse_valid_redshift_describe_clusters"}
$DIR/rusoto/services/redshift/src/generated.rs: `DescribeClustersMessageSerializer::serialize(&mut params, "", &input);`
$DIR/rusoto/services/redshift/src/generated.rs: `request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));`
$DIR/rusoto/services/redshift/src/generated.rs: `request.set_content_type("application/x-www-form-urlencoded".to_owned());`
$DIR/rusoto/services/redshift/src/generated.rs: `xml_util::start_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/redshift/src/generated.rs: `skip_tree(stack);`
$DIR/rusoto/services/redshift/src/generated.rs: `xml_util::end_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/redshift/src/generated.rs: `drop(response);`
{"generated::protocol_tests::test_parse_valid_redshift_describe_events"}
$DIR/rusoto/services/redshift/src/generated.rs: `DescribeEventsMessageSerializer::serialize(&mut params, "", &input);`
$DIR/rusoto/services/redshift/src/generated.rs: `request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));`
$DIR/rusoto/services/redshift/src/generated.rs: `request.set_content_type("application/x-www-form-urlencoded".to_owned());`
$DIR/rusoto/services/redshift/src/generated.rs: `xml_util::start_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/redshift/src/generated.rs: `skip_tree(stack);`
$DIR/rusoto/services/redshift/src/generated.rs: `xml_util::end_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/redshift/src/generated.rs: `drop(response);`
{"generated::protocol_tests::test_parse_valid_redshift_describe_orderable_cluster_options"}
$DIR/rusoto/services/redshift/src/generated.rs: `DescribeOrderableClusterOptionsMessageSerializer::serialize(&mut params, "", &input);`
$DIR/rusoto/services/redshift/src/generated.rs: `request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));`
$DIR/rusoto/services/redshift/src/generated.rs: `request.set_content_type("application/x-www-form-urlencoded".to_owned());`
$DIR/rusoto/services/redshift/src/generated.rs: `xml_util::start_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/redshift/src/generated.rs: `skip_tree(stack);`
$DIR/rusoto/services/redshift/src/generated.rs: `xml_util::end_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/redshift/src/generated.rs: `drop(response);`
{"generated::protocol_tests::test_parse_valid_redshift_describe_reserved_node_offerings"}
$DIR/rusoto/services/redshift/src/generated.rs: `DescribeReservedNodeOfferingsMessageSerializer::serialize(&mut params, "", &input);`
$DIR/rusoto/services/redshift/src/generated.rs: `request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));`
$DIR/rusoto/services/redshift/src/generated.rs: `request.set_content_type("application/x-www-form-urlencoded".to_owned());`
$DIR/rusoto/services/redshift/src/generated.rs: `xml_util::start_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/redshift/src/generated.rs: `skip_tree(stack);`
$DIR/rusoto/services/redshift/src/generated.rs: `xml_util::end_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/redshift/src/generated.rs: `drop(response);`
{"generated::protocol_tests::test_parse_valid_redshift_describe_reserved_nodes"}
$DIR/rusoto/services/redshift/src/generated.rs: `DescribeReservedNodesMessageSerializer::serialize(&mut params, "", &input);`
$DIR/rusoto/services/redshift/src/generated.rs: `request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));`
$DIR/rusoto/services/redshift/src/generated.rs: `request.set_content_type("application/x-www-form-urlencoded".to_owned());`
$DIR/rusoto/services/redshift/src/generated.rs: `xml_util::start_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/redshift/src/generated.rs: `skip_tree(stack);`
$DIR/rusoto/services/redshift/src/generated.rs: `xml_util::end_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/redshift/src/generated.rs: `drop(response);`
{"generated::protocol_tests::test_parse_valid_redshift_describe_resize"}
$DIR/rusoto/services/redshift/src/generated.rs: `DescribeResizeMessageSerializer::serialize(&mut params, "", &input);`
$DIR/rusoto/services/redshift/src/generated.rs: `request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));`
$DIR/rusoto/services/redshift/src/generated.rs: `request.set_content_type("application/x-www-form-urlencoded".to_owned());`
$DIR/rusoto/services/redshift/src/generated.rs: `xml_util::start_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/redshift/src/generated.rs: `skip_tree(stack);`
$DIR/rusoto/services/redshift/src/generated.rs: `xml_util::end_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/redshift/src/generated.rs: `drop(response);`
{"generated::protocol_tests::test_parse_valid_redshift_modify_cluster_parameter_group"}
$DIR/rusoto/services/redshift/src/generated.rs: `ModifyClusterParameterGroupMessageSerializer::serialize(&mut params, "", &input);`
$DIR/rusoto/services/redshift/src/generated.rs: `request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));`
$DIR/rusoto/services/redshift/src/generated.rs: `request.set_content_type("application/x-www-form-urlencoded".to_owned());`
$DIR/rusoto/services/redshift/src/generated.rs: `xml_util::start_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/redshift/src/generated.rs: `skip_tree(stack);`
$DIR/rusoto/services/redshift/src/generated.rs: `xml_util::end_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/redshift/src/generated.rs: `drop(response);`
{"generated::protocol_tests::test_parse_valid_redshift_purchase_reserved_node_offering"}
$DIR/rusoto/services/redshift/src/generated.rs: `PurchaseReservedNodeOfferingMessageSerializer::serialize(&mut params, "", &input);`
$DIR/rusoto/services/redshift/src/generated.rs: `request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));`
$DIR/rusoto/services/redshift/src/generated.rs: `request.set_content_type("application/x-www-form-urlencoded".to_owned());`
$DIR/rusoto/services/redshift/src/generated.rs: `xml_util::start_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/redshift/src/generated.rs: `skip_tree(stack);`
$DIR/rusoto/services/redshift/src/generated.rs: `xml_util::end_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/redshift/src/generated.rs: `drop(response);`
{"generated::protocol_tests::test_parse_valid_redshift_reboot_cluster"}
$DIR/rusoto/services/redshift/src/generated.rs: `RebootClusterMessageSerializer::serialize(&mut params, "", &input);`
$DIR/rusoto/services/redshift/src/generated.rs: `request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));`
$DIR/rusoto/services/redshift/src/generated.rs: `request.set_content_type("application/x-www-form-urlencoded".to_owned());`
$DIR/rusoto/services/redshift/src/generated.rs: `xml_util::start_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/redshift/src/generated.rs: `skip_tree(stack);`
$DIR/rusoto/services/redshift/src/generated.rs: `xml_util::end_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/redshift/src/generated.rs: `drop(response);`
{"generated::protocol_tests::test_parse_valid_redshift_reset_cluster_parameter_group"}
$DIR/rusoto/services/redshift/src/generated.rs: `ResetClusterParameterGroupMessageSerializer::serialize(&mut params, "", &input);`
$DIR/rusoto/services/redshift/src/generated.rs: `request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));`
$DIR/rusoto/services/redshift/src/generated.rs: `request.set_content_type("application/x-www-form-urlencoded".to_owned());`
$DIR/rusoto/services/redshift/src/generated.rs: `xml_util::start_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/redshift/src/generated.rs: `skip_tree(stack);`
$DIR/rusoto/services/redshift/src/generated.rs: `xml_util::end_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/redshift/src/generated.rs: `drop(response);`
{"generated::protocol_tests::test_parse_valid_redshift_restore_from_cluster_snapshot"}
$DIR/rusoto/services/redshift/src/generated.rs: `RestoreFromClusterSnapshotMessageSerializer::serialize(&mut params, "", &input);`
$DIR/rusoto/services/redshift/src/generated.rs: `request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));`
$DIR/rusoto/services/redshift/src/generated.rs: `request.set_content_type("application/x-www-form-urlencoded".to_owned());`
$DIR/rusoto/services/redshift/src/generated.rs: `xml_util::start_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/redshift/src/generated.rs: `skip_tree(stack);`
$DIR/rusoto/services/redshift/src/generated.rs: `xml_util::end_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/redshift/src/generated.rs: `drop(response);`
{"generated::protocol_tests::test_parse_valid_redshift_revoke_cluster_security_group_ingress"}
$DIR/rusoto/services/redshift/src/generated.rs: `RevokeClusterSecurityGroupIngressMessageSerializer::serialize(&mut params, "", &input);`
$DIR/rusoto/services/redshift/src/generated.rs: `request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));`
$DIR/rusoto/services/redshift/src/generated.rs: `request.set_content_type("application/x-www-form-urlencoded".to_owned());`
$DIR/rusoto/services/redshift/src/generated.rs: `xml_util::start_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/redshift/src/generated.rs: `skip_tree(stack);`
$DIR/rusoto/services/redshift/src/generated.rs: `xml_util::end_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/redshift/src/generated.rs: `drop(response);`
{"generated::protocol_tests::test_parse_valid_redshift_authorize_cluster_security_group_ingress", "generated::protocol_tests::test_parse_valid_redshift_copy_cluster_snapshot", "generated::protocol_tests::test_parse_valid_redshift_create_cluster", "generated::protocol_tests::test_parse_valid_redshift_create_cluster_parameter_group", "generated::protocol_tests::test_parse_valid_redshift_create_cluster_security_group", "generated::protocol_tests::test_parse_valid_redshift_create_cluster_snapshot", "generated::protocol_tests::test_parse_valid_redshift_create_cluster_subnet_group", "generated::protocol_tests::test_parse_valid_redshift_delete_cluster", "generated::protocol_tests::test_parse_valid_redshift_delete_cluster_parameter_group", "generated::protocol_tests::test_parse_valid_redshift_delete_cluster_snapshot", "generated::protocol_tests::test_parse_valid_redshift_describe_cluster_parameter_groups", "generated::protocol_tests::test_parse_valid_redshift_describe_cluster_parameters", "generated::protocol_tests::test_parse_valid_redshift_describe_cluster_security_groups", "generated::protocol_tests::test_parse_valid_redshift_describe_cluster_snapshots", "generated::protocol_tests::test_parse_valid_redshift_describe_cluster_subnet_groups", "generated::protocol_tests::test_parse_valid_redshift_describe_cluster_versions", "generated::protocol_tests::test_parse_valid_redshift_describe_clusters", "generated::protocol_tests::test_parse_valid_redshift_describe_events", "generated::protocol_tests::test_parse_valid_redshift_describe_orderable_cluster_options", "generated::protocol_tests::test_parse_valid_redshift_describe_reserved_node_offerings", "generated::protocol_tests::test_parse_valid_redshift_describe_reserved_nodes", "generated::protocol_tests::test_parse_valid_redshift_describe_resize", "generated::protocol_tests::test_parse_valid_redshift_modify_cluster_parameter_group", "generated::protocol_tests::test_parse_valid_redshift_purchase_reserved_node_offering", "generated::protocol_tests::test_parse_valid_redshift_reboot_cluster", "generated::protocol_tests::test_parse_valid_redshift_reset_cluster_parameter_group", "generated::protocol_tests::test_parse_valid_redshift_restore_from_cluster_snapshot", "generated::protocol_tests::test_parse_valid_redshift_revoke_cluster_security_group_ingress"}
$DIR/rusoto/services/redshift/src/generated.rs: `.put("Action", operation_name)`
$DIR/rusoto/services/redshift/src/generated.rs: `.put("Version", "2012-12-01")`
$DIR/rusoto/services/redshift/src/generated.rs: `.client.sign_and_dispatch(request)`
$DIR/rusoto/services/redshift/src/generated.rs: `.status.is_success()`
$DIR/rusoto/services/redshift/src/generated.rs: `.buffer()`
$DIR/rusoto/services/redshift/src/generated.rs: `.map_err(RusotoError::HttpDispatch)`
{"generated::protocol_tests::test_parse_valid_redshift_authorize_cluster_security_group_ingress"}
$DIR/rusoto/services/redshift/src/generated.rs: `.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()))`
$DIR/rusoto/services/redshift/src/generated.rs: `.set_content_type("application/x-www-form-urlencoded".to_owned())`
{"generated::protocol_tests::test_parse_valid_redshift_copy_cluster_snapshot"}
$DIR/rusoto/services/redshift/src/generated.rs: `.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()))`
$DIR/rusoto/services/redshift/src/generated.rs: `.set_content_type("application/x-www-form-urlencoded".to_owned())`
{"generated::protocol_tests::test_parse_valid_redshift_create_cluster"}
$DIR/rusoto/services/redshift/src/generated.rs: `.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()))`
$DIR/rusoto/services/redshift/src/generated.rs: `.set_content_type("application/x-www-form-urlencoded".to_owned())`
{"generated::protocol_tests::test_parse_valid_redshift_create_cluster_parameter_group"}
$DIR/rusoto/services/redshift/src/generated.rs: `.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()))`
$DIR/rusoto/services/redshift/src/generated.rs: `.set_content_type("application/x-www-form-urlencoded".to_owned())`
{"generated::protocol_tests::test_parse_valid_redshift_create_cluster_security_group"}
$DIR/rusoto/services/redshift/src/generated.rs: `.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()))`
$DIR/rusoto/services/redshift/src/generated.rs: `.set_content_type("application/x-www-form-urlencoded".to_owned())`
{"generated::protocol_tests::test_parse_valid_redshift_create_cluster_snapshot"}
$DIR/rusoto/services/redshift/src/generated.rs: `.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()))`
$DIR/rusoto/services/redshift/src/generated.rs: `.set_content_type("application/x-www-form-urlencoded".to_owned())`
{"generated::protocol_tests::test_parse_valid_redshift_create_cluster_subnet_group"}
$DIR/rusoto/services/redshift/src/generated.rs: `.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()))`
$DIR/rusoto/services/redshift/src/generated.rs: `.set_content_type("application/x-www-form-urlencoded".to_owned())`
{"generated::protocol_tests::test_parse_valid_redshift_delete_cluster"}
$DIR/rusoto/services/redshift/src/generated.rs: `.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()))`
$DIR/rusoto/services/redshift/src/generated.rs: `.set_content_type("application/x-www-form-urlencoded".to_owned())`
{"generated::protocol_tests::test_parse_valid_redshift_delete_cluster_parameter_group"}
$DIR/rusoto/services/redshift/src/generated.rs: `.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()))`
$DIR/rusoto/services/redshift/src/generated.rs: `.set_content_type("application/x-www-form-urlencoded".to_owned())`
{"generated::protocol_tests::test_parse_valid_redshift_delete_cluster_snapshot"}
$DIR/rusoto/services/redshift/src/generated.rs: `.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()))`
$DIR/rusoto/services/redshift/src/generated.rs: `.set_content_type("application/x-www-form-urlencoded".to_owned())`
{"generated::protocol_tests::test_parse_valid_redshift_describe_cluster_parameter_groups"}
$DIR/rusoto/services/redshift/src/generated.rs: `.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()))`
$DIR/rusoto/services/redshift/src/generated.rs: `.set_content_type("application/x-www-form-urlencoded".to_owned())`
{"generated::protocol_tests::test_parse_valid_redshift_describe_cluster_parameters"}
$DIR/rusoto/services/redshift/src/generated.rs: `.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()))`
$DIR/rusoto/services/redshift/src/generated.rs: `.set_content_type("application/x-www-form-urlencoded".to_owned())`
{"generated::protocol_tests::test_parse_valid_redshift_describe_cluster_security_groups"}
$DIR/rusoto/services/redshift/src/generated.rs: `.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()))`
$DIR/rusoto/services/redshift/src/generated.rs: `.set_content_type("application/x-www-form-urlencoded".to_owned())`
{"generated::protocol_tests::test_parse_valid_redshift_describe_cluster_snapshots"}
$DIR/rusoto/services/redshift/src/generated.rs: `.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()))`
$DIR/rusoto/services/redshift/src/generated.rs: `.set_content_type("application/x-www-form-urlencoded".to_owned())`
{"generated::protocol_tests::test_parse_valid_redshift_describe_cluster_subnet_groups"}
$DIR/rusoto/services/redshift/src/generated.rs: `.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()))`
$DIR/rusoto/services/redshift/src/generated.rs: `.set_content_type("application/x-www-form-urlencoded".to_owned())`
{"generated::protocol_tests::test_parse_valid_redshift_describe_cluster_versions"}
$DIR/rusoto/services/redshift/src/generated.rs: `.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()))`
$DIR/rusoto/services/redshift/src/generated.rs: `.set_content_type("application/x-www-form-urlencoded".to_owned())`
{"generated::protocol_tests::test_parse_valid_redshift_describe_clusters"}
$DIR/rusoto/services/redshift/src/generated.rs: `.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()))`
$DIR/rusoto/services/redshift/src/generated.rs: `.set_content_type("application/x-www-form-urlencoded".to_owned())`
{"generated::protocol_tests::test_parse_valid_redshift_describe_events"}
$DIR/rusoto/services/redshift/src/generated.rs: `.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()))`
$DIR/rusoto/services/redshift/src/generated.rs: `.set_content_type("application/x-www-form-urlencoded".to_owned())`
{"generated::protocol_tests::test_parse_valid_redshift_describe_orderable_cluster_options"}
$DIR/rusoto/services/redshift/src/generated.rs: `.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()))`
$DIR/rusoto/services/redshift/src/generated.rs: `.set_content_type("application/x-www-form-urlencoded".to_owned())`
{"generated::protocol_tests::test_parse_valid_redshift_describe_reserved_node_offerings"}
$DIR/rusoto/services/redshift/src/generated.rs: `.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()))`
$DIR/rusoto/services/redshift/src/generated.rs: `.set_content_type("application/x-www-form-urlencoded".to_owned())`
{"generated::protocol_tests::test_parse_valid_redshift_describe_reserved_nodes"}
$DIR/rusoto/services/redshift/src/generated.rs: `.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()))`
$DIR/rusoto/services/redshift/src/generated.rs: `.set_content_type("application/x-www-form-urlencoded".to_owned())`
{"generated::protocol_tests::test_parse_valid_redshift_describe_resize"}
$DIR/rusoto/services/redshift/src/generated.rs: `.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()))`
$DIR/rusoto/services/redshift/src/generated.rs: `.set_content_type("application/x-www-form-urlencoded".to_owned())`
{"generated::protocol_tests::test_parse_valid_redshift_modify_cluster_parameter_group"}
$DIR/rusoto/services/redshift/src/generated.rs: `.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()))`
$DIR/rusoto/services/redshift/src/generated.rs: `.set_content_type("application/x-www-form-urlencoded".to_owned())`
{"generated::protocol_tests::test_parse_valid_redshift_purchase_reserved_node_offering"}
$DIR/rusoto/services/redshift/src/generated.rs: `.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()))`
$DIR/rusoto/services/redshift/src/generated.rs: `.set_content_type("application/x-www-form-urlencoded".to_owned())`
{"generated::protocol_tests::test_parse_valid_redshift_reboot_cluster"}
$DIR/rusoto/services/redshift/src/generated.rs: `.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()))`
$DIR/rusoto/services/redshift/src/generated.rs: `.set_content_type("application/x-www-form-urlencoded".to_owned())`
{"generated::protocol_tests::test_parse_valid_redshift_reset_cluster_parameter_group"}
$DIR/rusoto/services/redshift/src/generated.rs: `.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()))`
$DIR/rusoto/services/redshift/src/generated.rs: `.set_content_type("application/x-www-form-urlencoded".to_owned())`
{"generated::protocol_tests::test_parse_valid_redshift_restore_from_cluster_snapshot"}
$DIR/rusoto/services/redshift/src/generated.rs: `.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()))`
$DIR/rusoto/services/redshift/src/generated.rs: `.set_content_type("application/x-www-form-urlencoded".to_owned())`
{"generated::protocol_tests::test_parse_valid_redshift_revoke_cluster_security_group_ingress"}
$DIR/rusoto/services/redshift/src/generated.rs: `.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()))`
$DIR/rusoto/services/redshift/src/generated.rs: `.set_content_type("application/x-www-form-urlencoded".to_owned())`
{"generated::protocol_tests::test_parse_valid_redshift_authorize_cluster_security_group_ingress"}
$DIR/rusoto/services/redshift/src/generated.rs: `.with_body(&mock_response)`
{"generated::protocol_tests::test_parse_valid_redshift_copy_cluster_snapshot"}
$DIR/rusoto/services/redshift/src/generated.rs: `.with_body(&mock_response)`
{"generated::protocol_tests::test_parse_valid_redshift_create_cluster_parameter_group"}
$DIR/rusoto/services/redshift/src/generated.rs: `.with_body(&mock_response)`
{"generated::protocol_tests::test_parse_valid_redshift_create_cluster_security_group"}
$DIR/rusoto/services/redshift/src/generated.rs: `.with_body(&mock_response)`
{"generated::protocol_tests::test_parse_valid_redshift_create_cluster_snapshot"}
$DIR/rusoto/services/redshift/src/generated.rs: `.with_body(&mock_response)`
{"generated::protocol_tests::test_parse_valid_redshift_create_cluster_subnet_group"}
$DIR/rusoto/services/redshift/src/generated.rs: `.with_body(&mock_response)`
{"generated::protocol_tests::test_parse_valid_redshift_create_cluster"}
$DIR/rusoto/services/redshift/src/generated.rs: `.with_body(&mock_response)`
{"generated::protocol_tests::test_parse_valid_redshift_delete_cluster_parameter_group"}
$DIR/rusoto/services/redshift/src/generated.rs: `.with_body(&mock_response)`
{"generated::protocol_tests::test_parse_valid_redshift_delete_cluster_snapshot"}
$DIR/rusoto/services/redshift/src/generated.rs: `.with_body(&mock_response)`
{"generated::protocol_tests::test_parse_valid_redshift_delete_cluster"}
$DIR/rusoto/services/redshift/src/generated.rs: `.with_body(&mock_response)`
{"generated::protocol_tests::test_parse_valid_redshift_describe_cluster_parameter_groups"}
$DIR/rusoto/services/redshift/src/generated.rs: `.with_body(&mock_response)`
{"generated::protocol_tests::test_parse_valid_redshift_describe_cluster_parameters"}
$DIR/rusoto/services/redshift/src/generated.rs: `.with_body(&mock_response)`
{"generated::protocol_tests::test_parse_valid_redshift_describe_cluster_security_groups"}
$DIR/rusoto/services/redshift/src/generated.rs: `.with_body(&mock_response)`
{"generated::protocol_tests::test_parse_valid_redshift_describe_cluster_snapshots"}
$DIR/rusoto/services/redshift/src/generated.rs: `.with_body(&mock_response)`
{"generated::protocol_tests::test_parse_valid_redshift_describe_cluster_subnet_groups"}
$DIR/rusoto/services/redshift/src/generated.rs: `.with_body(&mock_response)`
{"generated::protocol_tests::test_parse_valid_redshift_describe_cluster_versions"}
$DIR/rusoto/services/redshift/src/generated.rs: `.with_body(&mock_response)`
{"generated::protocol_tests::test_parse_valid_redshift_describe_clusters"}
$DIR/rusoto/services/redshift/src/generated.rs: `.with_body(&mock_response)`
{"generated::protocol_tests::test_parse_valid_redshift_describe_events"}
$DIR/rusoto/services/redshift/src/generated.rs: `.with_body(&mock_response)`
{"generated::protocol_tests::test_parse_valid_redshift_describe_orderable_cluster_options"}
$DIR/rusoto/services/redshift/src/generated.rs: `.with_body(&mock_response)`
{"generated::protocol_tests::test_parse_valid_redshift_describe_reserved_node_offerings"}
$DIR/rusoto/services/redshift/src/generated.rs: `.with_body(&mock_response)`
{"generated::protocol_tests::test_parse_valid_redshift_describe_reserved_nodes"}
$DIR/rusoto/services/redshift/src/generated.rs: `.with_body(&mock_response)`
{"generated::protocol_tests::test_parse_valid_redshift_describe_resize"}
$DIR/rusoto/services/redshift/src/generated.rs: `.with_body(&mock_response)`
{"generated::protocol_tests::test_parse_valid_redshift_modify_cluster_parameter_group"}
$DIR/rusoto/services/redshift/src/generated.rs: `.with_body(&mock_response)`
{"generated::protocol_tests::test_parse_valid_redshift_purchase_reserved_node_offering"}
$DIR/rusoto/services/redshift/src/generated.rs: `.with_body(&mock_response)`
{"generated::protocol_tests::test_parse_valid_redshift_reboot_cluster"}
$DIR/rusoto/services/redshift/src/generated.rs: `.with_body(&mock_response)`
{"generated::protocol_tests::test_parse_valid_redshift_reset_cluster_parameter_group"}
$DIR/rusoto/services/redshift/src/generated.rs: `.with_body(&mock_response)`
{"generated::protocol_tests::test_parse_valid_redshift_restore_from_cluster_snapshot"}
$DIR/rusoto/services/redshift/src/generated.rs: `.with_body(&mock_response)`
{"generated::protocol_tests::test_parse_valid_redshift_revoke_cluster_security_group_ingress"}
$DIR/rusoto/services/redshift/src/generated.rs: `.with_body(&mock_response)`
{"custom::custom_tests::test_parse_no_such_hosted_zone_error"}
$DIR/rusoto/services/route53/src/custom/custom_tests.rs: `.with_body(
        r#"<?xml version="1.0"?>
            <ErrorResponse xmlns="https://route53.amazonaws.com/doc/2013-04-01/">
                <Error>
                    <Type>Sender</Type>
                    <Code>NoSuchHostedZone</Code>
                    <Message>No hosted zone found with ID: NO-SUCH-ZONE</Message>
                </Error>
                <RequestId>20c2984f-279e-11e8-9a16-83e7725d8022</RequestId>
            </ErrorResponse>"#,
    )`
$DIR/rusoto/services/route53/src/custom/custom_tests.rs: `.list_resource_record_sets(request)`
$DIR/rusoto/services/route53/src/custom/custom_tests.rs: `.err()`
{"generated::protocol_tests::test_parse_error_route_53_get_hosted_zone"}
$DIR/rusoto/services/route53/src/generated.rs: `.client.sign_and_dispatch(request)`
$DIR/rusoto/services/route53/src/generated.rs: `.status.is_success()`
$DIR/rusoto/services/route53/src/generated.rs: `.buffer()`
$DIR/rusoto/services/route53/src/generated.rs: `.map_err(RusotoError::HttpDispatch)`
$DIR/rusoto/services/route53/src/generated.rs: `.replace("/hostedzone/hostedzone/", "/hostedzone/")`
$DIR/rusoto/services/route53/src/generated.rs: `.replace("/hostedzone//hostedzone/", "/hostedzone/")`
$DIR/rusoto/services/route53/src/generated.rs: `.replace("/change/change/", "/change/")`
$DIR/rusoto/services/route53/src/generated.rs: `.with_body(&mock_response)`
{"custom::custom_tests::list_multipart_upload_parts_happy_path"}
$DIR/rusoto/services/s3/src/custom/custom_tests.rs: `req.bucket = "rusoto1440826511".to_owned();`
$DIR/rusoto/services/s3/src/custom/custom_tests.rs: `req.key = "testfile.zip".to_owned();`
{"custom::custom_tests::list_multipart_uploads_no_uploads"}
$DIR/rusoto/services/s3/src/custom/custom_tests.rs: `req.bucket = "test-bucket".to_owned();`
{"custom::custom_tests::structs_should_impl_clone"}
$DIR/rusoto/services/s3/src/custom/custom_tests.rs: `assert_clone::<GetObjectRequest>();`
{"custom::custom_tests::test_multiple_mock"}
$DIR/rusoto/services/s3/src/custom/custom_tests.rs: `request = HeadObjectRequest::default();`
$DIR/rusoto/services/s3/src/custom/custom_tests.rs: `result = client.head_object(request).await.unwrap();`
{"custom::custom_tests::test_multipart_upload_copy_response"}
$DIR/rusoto/services/s3/src/custom/custom_tests.rs: `.with_body(
        r#"<?xml version="1.0" encoding="UTF-8"?>
            <CopyPartResult xmlns="http://s3.amazonaws.com/doc/2006-03-01/">
                <LastModified>2018-11-10T02:47:18.000Z</LastModified>
                <ETag>&quot;9a9d1bbe80188883302bff764b4cb321&quot;</ETag>
            </CopyPartResult>"#,
    )`
$DIR/rusoto/services/s3/src/custom/custom_tests.rs: `.upload_part_copy(upload_part_copy_req)`
{"custom::custom_tests::test_list_object_versions_with_multiple_versions"}
$DIR/rusoto/services/s3/src/custom/custom_tests.rs: `.with_body(
        r#"<?xml version="1.0" encoding="UTF-8"?>
        <ListVersionsResult xmlns="http://s3.amazonaws.com/doc/2006-03-01/">
          <DeleteMarker>
          </DeleteMarker>
          <Version>
          </Version>
          <DeleteMarker>
          </DeleteMarker>
          <Version>
          </Version>
        </ListVersionsResult>
        "#,
    )`
$DIR/rusoto/services/s3/src/custom/custom_tests.rs: `.list_object_versions(ListObjectVersionsRequest {
            bucket: "test_bucket".to_string(),
            ..Default::default()
        })`
{"custom::custom_tests::initiate_multipart_upload_happy_path"}
$DIR/rusoto/services/s3/src/custom/custom_tests.rs: `.with_body(&body)`
$DIR/rusoto/services/s3/src/custom/custom_tests.rs: `.create_multipart_upload(CreateMultipartUploadRequest {
            bucket: "example-bucket".to_owned(),
            key: "example-object".to_owned(),
            ..Default::default()
        })`
{"custom::custom_tests::complete_multipart_upload_happy_path"}
$DIR/rusoto/services/s3/src/custom/custom_tests.rs: `.with_body(&body)`
$DIR/rusoto/services/s3/src/custom/custom_tests.rs: `.complete_multipart_upload(CompleteMultipartUploadRequest {
            bucket: "example-bucket".to_owned(),
            key: "example-object".to_owned(),
            upload_id: "VXBsb2FkIElEIGZvciA2aWWpbmcncyBteS1tb3ZpZS5tMnRzIHVwbG9hZA".to_owned(),
            ..Default::default()
        })`
{"custom::custom_tests::list_multipart_upload_happy_path"}
$DIR/rusoto/services/s3/src/custom/custom_tests.rs: `.with_body(&body)`
$DIR/rusoto/services/s3/src/custom/custom_tests.rs: `.list_multipart_uploads(ListMultipartUploadsRequest {
            bucket: "example-bucket".to_owned(),
            ..Default::default()
        })`
{"custom::custom_tests::list_multipart_upload_parts_happy_path"}
$DIR/rusoto/services/s3/src/custom/custom_tests.rs: `.with_body(r#"
        <?xml version="1.0" encoding="UTF-8"?>
        <ListPartsResult xmlns="http://s3.amazonaws.com/doc/2006-03-01/">
            <Bucket>rusoto1440826511</Bucket>
            <Key>testfile.zip</Key>
            <UploadId>PeePB_uORK5f2AURP_SWcQ4NO1P1oqnGNNNFK3nhFfzMeksdvG7x7nFfH1qk7a3HSossNYB7t8QhcN1Fg6ax7AXbwvAKIZ9DilB4tUcpM7qyUEgkszN4iDmMvSaImGFK</UploadId>
            <Initiator>
                <ID>arn:aws:iam::347452556412:user/matthew</ID>
                <DisplayName>matthew</DisplayName>
            </Initiator>
            <Owner>
                <ID>b84c6b0c308085829b6562b586f6664fc00faab6cfd441e90ad418ea916eed83</ID>
                <DisplayName>matthew</DisplayName>
            </Owner>
            <StorageClass>STANDARD</StorageClass>
            <PartNumberMarker>0</PartNumberMarker>
            <NextPartNumberMarker>2</NextPartNumberMarker>
            <MaxParts>1000</MaxParts>
            <IsTruncated>false</IsTruncated>
            <Part>
                <PartNumber>1</PartNumber>
                <LastModified>2015-09-08T21:02:04.000Z</LastModified>
                <ETag>&quot;ddcaa99616d7cd06d0a5abfef6ccebbb&quot;</ETag>
                <Size>5242880</Size>
            </Part>
            <Part>
                <PartNumber>2</PartNumber>
                <LastModified>2015-09-08T21:02:09.000Z</LastModified>
                <ETag>&quot;c865f7d241e2c9e3d3b5fee6955c616e&quot;</ETag>
                <Size>5242880</Size>
            </Part>
        </ListPartsResult>"#)`
$DIR/rusoto/services/s3/src/custom/custom_tests.rs: `.with_request_checker(|request: &SignedRequest| {
            assert_eq!(request.method, "GET");
            assert_eq!(request.path, "/rusoto1440826511/testfile.zip");
            assert!(request.payload.is_none());
        })`
$DIR/rusoto/services/s3/src/custom/custom_tests.rs: `.list_parts(req)`
{"custom::custom_tests::list_multipart_uploads_no_uploads"}
$DIR/rusoto/services/s3/src/custom/custom_tests.rs: `.with_body(
        r#"
        <?xml version="1.0" encoding="UTF-8"?>
        <ListMultipartUploadsResult xmlns="http://s3.amazonaws.com/doc/2006-03-01/">
            <Bucket>rusoto1440826568</Bucket>
            <KeyMarker></KeyMarker>
            <UploadIdMarker></UploadIdMarker>
            <NextKeyMarker></NextKeyMarker>
            <NextUploadIdMarker></NextUploadIdMarker>
            <MaxUploads>1000</MaxUploads>
            <IsTruncated>false</IsTruncated>
        </ListMultipartUploadsResult>
    "#,
    )`
$DIR/rusoto/services/s3/src/custom/custom_tests.rs: `.list_multipart_uploads(req)`
{"custom::custom_tests::should_parse_sample_list_buckets_response"}
$DIR/rusoto/services/s3/src/custom/custom_tests.rs: `.with_body(
            r#"
        <?xml version="1.0" encoding="UTF-8"?>
        <ListAllMyBucketsResult xmlns="http://s3.amazonaws.com/doc/2006-03-01">
            <Owner>
            <ID>bcaf1ffd86f461ca5fb16fd081034f</ID>
            <DisplayName>webfile</DisplayName>
            </Owner>
            <Buckets>
            <Bucket>
                    <Name>quotes</Name>
                    <CreationDate>2006-02-03T16:45:09.000Z</CreationDate>
            </Bucket>
            <Bucket>
                    <Name>samples</Name>
                    <CreationDate>2006-02-03T16:41:58.000Z</CreationDate>
            </Bucket>
            </Buckets>
        </ListAllMyBucketsResult>
        "#,
        )`
$DIR/rusoto/services/s3/src/custom/custom_tests.rs: `.with_request_checker(|request: &SignedRequest| {
            assert_eq!(request.method, "GET");
            assert_eq!(request.path, "/");
            assert!(request.payload.is_none());
        })`
$DIR/rusoto/services/s3/src/custom/custom_tests.rs: `.list_buckets()`
$DIR/rusoto/services/s3/src/custom/custom_tests.rs: `.get(0)`
{"custom::custom_tests::hould_parse_headers"}
$DIR/rusoto/services/s3/src/custom/custom_tests.rs: `.with_body("")`
$DIR/rusoto/services/s3/src/custom/custom_tests.rs: `.with_header("x-amz-expiration", "foo")`
$DIR/rusoto/services/s3/src/custom/custom_tests.rs: `.with_header("x-amz-restore", "bar")`
$DIR/rusoto/services/s3/src/custom/custom_tests.rs: `.head_object(request)`
{"custom::custom_tests::should_serialize_complicated_request"}
$DIR/rusoto/services/s3/src/custom/custom_tests.rs: `.with_body("")`
$DIR/rusoto/services/s3/src/custom/custom_tests.rs: `.with_request_checker(|request: &SignedRequest| {
            assert_eq!(request.method, "GET");
            assert_eq!(request.path, "/bucket/key");
            assert_eq!(
                *request.params.get("response-content-type").unwrap(),
                sstr("response_content_type")
            );
            assert!(request
                .headers
                .get("range")
                .unwrap()
                .contains(&Vec::from("range")));
            assert!(request.payload.is_none());
        })`
$DIR/rusoto/services/s3/src/custom/custom_tests.rs: `.get_object(request)`
{"custom::custom_tests::should_parse_location_constraint"}
$DIR/rusoto/services/s3/src/custom/custom_tests.rs: `.with_body(&body)`
$DIR/rusoto/services/s3/src/custom/custom_tests.rs: `.get_bucket_location(GetBucketLocationRequest {
            bucket: "example-bucket".to_owned(),
            expected_bucket_owner: sstr("expected_bucket_owner"),
        })`
{"custom::custom_tests::can_construct_streaming_body"}
$DIR/rusoto/services/s3/src/custom/custom_tests.rs: `.into()`
$DIR/rusoto/services/s3/src/custom/custom_tests.rs: `.map_ok(|b| BytesMut::from(&b[..]))`
$DIR/rusoto/services/s3/src/custom/custom_tests.rs: `.try_concat()`
{"custom::custom_tests::test_parse_no_such_bucket_error"}
$DIR/rusoto/services/s3/src/custom/custom_tests.rs: `.with_body(
        r#"<?xml version="1.0" encoding="UTF-8"?>
        <Error>
            <Code>NoSuchBucket</Code>
            <Message>The specified bucket does not exist</Message>
            <RequestId>4442587FB7D0A2F9</RequestId>
        </Error>"#,
    )`
$DIR/rusoto/services/s3/src/custom/custom_tests.rs: `.list_objects_v2(request)`
$DIR/rusoto/services/s3/src/custom/custom_tests.rs: `.err()`
{"custom::custom_tests::test_multiple_mock"}
$DIR/rusoto/services/s3/src/custom/custom_tests.rs: `.head_object(request)`
$DIR/rusoto/services/s3/src/custom/custom_tests.rs: `.head_object(request)`
{"generated::protocol_tests::test_parse_error_s3_create_bucket"}
$DIR/rusoto/services/s3/src/generated.rs: `request.add_optional_header("x-amz-acl", input.acl.as_ref());`
$DIR/rusoto/services/s3/src/generated.rs: `request.add_optional_header(
            "x-amz-grant-full-control",
            input.grant_full_control.as_ref(),
        );`
$DIR/rusoto/services/s3/src/generated.rs: `request.add_optional_header("x-amz-grant-read", input.grant_read.as_ref());`
$DIR/rusoto/services/s3/src/generated.rs: `request.add_optional_header("x-amz-grant-read-acp", input.grant_read_acp.as_ref());`
$DIR/rusoto/services/s3/src/generated.rs: `request.add_optional_header("x-amz-grant-write", input.grant_write.as_ref());`
$DIR/rusoto/services/s3/src/generated.rs: `request.add_optional_header("x-amz-grant-write-acp", input.grant_write_acp.as_ref());`
$DIR/rusoto/services/s3/src/generated.rs: `request.add_optional_header(
            "x-amz-bucket-object-lock-enabled",
            input.object_lock_enabled_for_bucket.as_ref(),
        );`
$DIR/rusoto/services/s3/src/generated.rs: `CreateBucketConfigurationSerializer::serialize(
                &mut writer,
                "CreateBucketConfiguration",
                input.create_bucket_configuration.as_ref().unwrap(),
            );`
$DIR/rusoto/services/s3/src/generated.rs: `request.set_payload(Some(writer.into_inner()));`
$DIR/rusoto/services/s3/src/generated.rs: `request.set_payload(Some(Vec::new()));`
$DIR/rusoto/services/s3/src/generated.rs: `result.location = response.headers.remove("Location");`
{"generated::protocol_tests::test_parse_valid_s3_get_bucket_acl"}
$DIR/rusoto/services/s3/src/generated.rs: `request.add_optional_header(
            "x-amz-expected-bucket-owner",
            input.expected_bucket_owner.as_ref(),
        );`
$DIR/rusoto/services/s3/src/generated.rs: `params.put_key("acl");`
$DIR/rusoto/services/s3/src/generated.rs: `request.set_params(params);`
{"generated::protocol_tests::test_parse_valid_s3_get_bucket_location"}
$DIR/rusoto/services/s3/src/generated.rs: `request.add_optional_header(
            "x-amz-expected-bucket-owner",
            input.expected_bucket_owner.as_ref(),
        );`
$DIR/rusoto/services/s3/src/generated.rs: `params.put_key("location");`
$DIR/rusoto/services/s3/src/generated.rs: `request.set_params(params);`
{"generated::protocol_tests::test_parse_valid_s3_get_bucket_logging"}
$DIR/rusoto/services/s3/src/generated.rs: `request.add_optional_header(
            "x-amz-expected-bucket-owner",
            input.expected_bucket_owner.as_ref(),
        );`
$DIR/rusoto/services/s3/src/generated.rs: `params.put_key("logging");`
$DIR/rusoto/services/s3/src/generated.rs: `request.set_params(params);`
{"generated::protocol_tests::test_parse_valid_s3_get_bucket_policy"}
$DIR/rusoto/services/s3/src/generated.rs: `request.add_optional_header(
            "x-amz-expected-bucket-owner",
            input.expected_bucket_owner.as_ref(),
        );`
$DIR/rusoto/services/s3/src/generated.rs: `params.put_key("policy");`
$DIR/rusoto/services/s3/src/generated.rs: `request.set_params(params);`
$DIR/rusoto/services/s3/src/generated.rs: `result.policy = Some(String::from_utf8_lossy(response.body.as_ref()).into());`
{"generated::protocol_tests::test_parse_valid_s3_list_multipart_uploads"}
$DIR/rusoto/services/s3/src/generated.rs: `request.add_optional_header(
            "x-amz-expected-bucket-owner",
            input.expected_bucket_owner.as_ref(),
        );`
$DIR/rusoto/services/s3/src/generated.rs: `params.put("delimiter", x);`
$DIR/rusoto/services/s3/src/generated.rs: `params.put("encoding-type", x);`
$DIR/rusoto/services/s3/src/generated.rs: `params.put("key-marker", x);`
$DIR/rusoto/services/s3/src/generated.rs: `params.put("max-uploads", x);`
$DIR/rusoto/services/s3/src/generated.rs: `params.put("prefix", x);`
$DIR/rusoto/services/s3/src/generated.rs: `params.put("upload-id-marker", x);`
$DIR/rusoto/services/s3/src/generated.rs: `params.put_key("uploads");`
$DIR/rusoto/services/s3/src/generated.rs: `request.set_params(params);`
{"generated::protocol_tests::test_parse_valid_s3_list_object_versions"}
$DIR/rusoto/services/s3/src/generated.rs: `request.add_optional_header(
            "x-amz-expected-bucket-owner",
            input.expected_bucket_owner.as_ref(),
        );`
$DIR/rusoto/services/s3/src/generated.rs: `params.put("delimiter", x);`
$DIR/rusoto/services/s3/src/generated.rs: `params.put("encoding-type", x);`
$DIR/rusoto/services/s3/src/generated.rs: `params.put("key-marker", x);`
$DIR/rusoto/services/s3/src/generated.rs: `params.put("max-keys", x);`
$DIR/rusoto/services/s3/src/generated.rs: `params.put("prefix", x);`
$DIR/rusoto/services/s3/src/generated.rs: `params.put("version-id-marker", x);`
$DIR/rusoto/services/s3/src/generated.rs: `params.put_key("versions");`
$DIR/rusoto/services/s3/src/generated.rs: `request.set_params(params);`
{"generated::protocol_tests::test_parse_error_s3_list_objects", "generated::protocol_tests::test_parse_valid_s3_list_objects"}
$DIR/rusoto/services/s3/src/generated.rs: `request.add_optional_header(
            "x-amz-expected-bucket-owner",
            input.expected_bucket_owner.as_ref(),
        );`
$DIR/rusoto/services/s3/src/generated.rs: `request.add_optional_header("x-amz-request-payer", input.request_payer.as_ref());`
$DIR/rusoto/services/s3/src/generated.rs: `params.put("delimiter", x);`
$DIR/rusoto/services/s3/src/generated.rs: `params.put("encoding-type", x);`
$DIR/rusoto/services/s3/src/generated.rs: `params.put("marker", x);`
$DIR/rusoto/services/s3/src/generated.rs: `params.put("max-keys", x);`
$DIR/rusoto/services/s3/src/generated.rs: `params.put("prefix", x);`
$DIR/rusoto/services/s3/src/generated.rs: `request.set_params(params);`
{"generated::protocol_tests::test_parse_error_s3_create_bucket", "generated::protocol_tests::test_parse_error_s3_list_objects", "generated::protocol_tests::test_parse_valid_s3_get_bucket_acl", "generated::protocol_tests::test_parse_valid_s3_get_bucket_location", "generated::protocol_tests::test_parse_valid_s3_get_bucket_logging", "generated::protocol_tests::test_parse_valid_s3_get_bucket_policy", "generated::protocol_tests::test_parse_valid_s3_list_buckets", "generated::protocol_tests::test_parse_valid_s3_list_multipart_uploads", "generated::protocol_tests::test_parse_valid_s3_list_object_versions", "generated::protocol_tests::test_parse_valid_s3_list_objects"}
$DIR/rusoto/services/s3/src/generated.rs: `.client.sign_and_dispatch(request)`
$DIR/rusoto/services/s3/src/generated.rs: `.status.is_success()`
$DIR/rusoto/services/s3/src/generated.rs: `.buffer()`
$DIR/rusoto/services/s3/src/generated.rs: `.map_err(RusotoError::HttpDispatch)`
{"generated::protocol_tests::test_parse_error_s3_create_bucket"}
$DIR/rusoto/services/s3/src/generated.rs: `.add_optional_header("x-amz-acl", input.acl.as_ref())`
$DIR/rusoto/services/s3/src/generated.rs: `.add_optional_header(
            "x-amz-grant-full-control",
            input.grant_full_control.as_ref(),
        )`
$DIR/rusoto/services/s3/src/generated.rs: `.add_optional_header("x-amz-grant-read", input.grant_read.as_ref())`
$DIR/rusoto/services/s3/src/generated.rs: `.add_optional_header("x-amz-grant-read-acp", input.grant_read_acp.as_ref())`
$DIR/rusoto/services/s3/src/generated.rs: `.add_optional_header("x-amz-grant-write", input.grant_write.as_ref())`
$DIR/rusoto/services/s3/src/generated.rs: `.add_optional_header("x-amz-grant-write-acp", input.grant_write_acp.as_ref())`
$DIR/rusoto/services/s3/src/generated.rs: `.add_optional_header(
            "x-amz-bucket-object-lock-enabled",
            input.object_lock_enabled_for_bucket.as_ref(),
        )`
$DIR/rusoto/services/s3/src/generated.rs: `.create_bucket_configuration.is_some()`
$DIR/rusoto/services/s3/src/generated.rs: `.set_payload(Some(writer.into_inner()))`
$DIR/rusoto/services/s3/src/generated.rs: `.into_inner()`
$DIR/rusoto/services/s3/src/generated.rs: `.set_payload(Some(Vec::new()))`
$DIR/rusoto/services/s3/src/generated.rs: `.headers.remove("Location")`
{"generated::protocol_tests::test_parse_valid_s3_get_bucket_acl"}
$DIR/rusoto/services/s3/src/generated.rs: `.add_optional_header(
            "x-amz-expected-bucket-owner",
            input.expected_bucket_owner.as_ref(),
        )`
$DIR/rusoto/services/s3/src/generated.rs: `.put_key("acl")`
$DIR/rusoto/services/s3/src/generated.rs: `.set_params(params)`
{"generated::protocol_tests::test_parse_valid_s3_get_bucket_location"}
$DIR/rusoto/services/s3/src/generated.rs: `.add_optional_header(
            "x-amz-expected-bucket-owner",
            input.expected_bucket_owner.as_ref(),
        )`
$DIR/rusoto/services/s3/src/generated.rs: `.put_key("location")`
$DIR/rusoto/services/s3/src/generated.rs: `.set_params(params)`
{"generated::protocol_tests::test_parse_valid_s3_get_bucket_logging"}
$DIR/rusoto/services/s3/src/generated.rs: `.add_optional_header(
            "x-amz-expected-bucket-owner",
            input.expected_bucket_owner.as_ref(),
        )`
$DIR/rusoto/services/s3/src/generated.rs: `.put_key("logging")`
$DIR/rusoto/services/s3/src/generated.rs: `.set_params(params)`
{"generated::protocol_tests::test_parse_valid_s3_get_bucket_policy"}
$DIR/rusoto/services/s3/src/generated.rs: `.add_optional_header(
            "x-amz-expected-bucket-owner",
            input.expected_bucket_owner.as_ref(),
        )`
$DIR/rusoto/services/s3/src/generated.rs: `.put_key("policy")`
$DIR/rusoto/services/s3/src/generated.rs: `.set_params(params)`
$DIR/rusoto/services/s3/src/generated.rs: `.buffer()`
$DIR/rusoto/services/s3/src/generated.rs: `.map_err(RusotoError::HttpDispatch)`
$DIR/rusoto/services/s3/src/generated.rs: `.into()`
{"generated::protocol_tests::test_parse_valid_s3_list_multipart_uploads"}
$DIR/rusoto/services/s3/src/generated.rs: `.add_optional_header(
            "x-amz-expected-bucket-owner",
            input.expected_bucket_owner.as_ref(),
        )`
$DIR/rusoto/services/s3/src/generated.rs: `.put("delimiter", x)`
$DIR/rusoto/services/s3/src/generated.rs: `.put("encoding-type", x)`
$DIR/rusoto/services/s3/src/generated.rs: `.put("key-marker", x)`
$DIR/rusoto/services/s3/src/generated.rs: `.put("max-uploads", x)`
$DIR/rusoto/services/s3/src/generated.rs: `.put("prefix", x)`
$DIR/rusoto/services/s3/src/generated.rs: `.put("upload-id-marker", x)`
$DIR/rusoto/services/s3/src/generated.rs: `.put_key("uploads")`
$DIR/rusoto/services/s3/src/generated.rs: `.set_params(params)`
{"generated::protocol_tests::test_parse_valid_s3_list_object_versions"}
$DIR/rusoto/services/s3/src/generated.rs: `.add_optional_header(
            "x-amz-expected-bucket-owner",
            input.expected_bucket_owner.as_ref(),
        )`
$DIR/rusoto/services/s3/src/generated.rs: `.put("delimiter", x)`
$DIR/rusoto/services/s3/src/generated.rs: `.put("encoding-type", x)`
$DIR/rusoto/services/s3/src/generated.rs: `.put("key-marker", x)`
$DIR/rusoto/services/s3/src/generated.rs: `.put("max-keys", x)`
$DIR/rusoto/services/s3/src/generated.rs: `.put("prefix", x)`
$DIR/rusoto/services/s3/src/generated.rs: `.put("version-id-marker", x)`
$DIR/rusoto/services/s3/src/generated.rs: `.put_key("versions")`
$DIR/rusoto/services/s3/src/generated.rs: `.set_params(params)`
{"generated::protocol_tests::test_parse_error_s3_list_objects", "generated::protocol_tests::test_parse_valid_s3_list_objects"}
$DIR/rusoto/services/s3/src/generated.rs: `.add_optional_header(
            "x-amz-expected-bucket-owner",
            input.expected_bucket_owner.as_ref(),
        )`
$DIR/rusoto/services/s3/src/generated.rs: `.add_optional_header("x-amz-request-payer", input.request_payer.as_ref())`
$DIR/rusoto/services/s3/src/generated.rs: `.put("delimiter", x)`
$DIR/rusoto/services/s3/src/generated.rs: `.put("encoding-type", x)`
$DIR/rusoto/services/s3/src/generated.rs: `.put("marker", x)`
$DIR/rusoto/services/s3/src/generated.rs: `.put("max-keys", x)`
$DIR/rusoto/services/s3/src/generated.rs: `.put("prefix", x)`
$DIR/rusoto/services/s3/src/generated.rs: `.set_params(params)`
{"generated::protocol_tests::test_parse_error_s3_create_bucket"}
$DIR/rusoto/services/s3/src/generated.rs: `.with_body(&mock_response)`
{"generated::protocol_tests::test_parse_error_s3_list_objects"}
$DIR/rusoto/services/s3/src/generated.rs: `.with_body(&mock_response)`
{"generated::protocol_tests::test_parse_valid_s3_get_bucket_acl"}
$DIR/rusoto/services/s3/src/generated.rs: `.with_body(&mock_response)`
{"generated::protocol_tests::test_parse_valid_s3_get_bucket_location"}
$DIR/rusoto/services/s3/src/generated.rs: `.with_body(&mock_response)`
{"generated::protocol_tests::test_parse_valid_s3_get_bucket_logging"}
$DIR/rusoto/services/s3/src/generated.rs: `.with_body(&mock_response)`
{"generated::protocol_tests::test_parse_valid_s3_get_bucket_policy"}
$DIR/rusoto/services/s3/src/generated.rs: `.with_body(&mock_response)`
{"generated::protocol_tests::test_parse_valid_s3_list_buckets"}
$DIR/rusoto/services/s3/src/generated.rs: `.with_body(&mock_response)`
{"generated::protocol_tests::test_parse_valid_s3_list_multipart_uploads"}
$DIR/rusoto/services/s3/src/generated.rs: `.with_body(&mock_response)`
{"generated::protocol_tests::test_parse_valid_s3_list_object_versions"}
$DIR/rusoto/services/s3/src/generated.rs: `.with_body(&mock_response)`
{"generated::protocol_tests::test_parse_valid_s3_list_objects"}
$DIR/rusoto/services/s3/src/generated.rs: `.with_body(&mock_response)`
{"generated::protocol_tests::test_parse_error_ses_delete_identity", "generated::protocol_tests::test_parse_valid_ses_delete_identity", "generated::protocol_tests::test_parse_valid_ses_get_identity_dkim_attributes", "generated::protocol_tests::test_parse_valid_ses_get_identity_notification_attributes", "generated::protocol_tests::test_parse_valid_ses_get_identity_verification_attributes", "generated::protocol_tests::test_parse_valid_ses_get_send_quota", "generated::protocol_tests::test_parse_valid_ses_get_send_statistics", "generated::protocol_tests::test_parse_valid_ses_list_identities", "generated::protocol_tests::test_parse_valid_ses_send_email", "generated::protocol_tests::test_parse_valid_ses_send_raw_email", "generated::protocol_tests::test_parse_valid_ses_set_identity_dkim_enabled", "generated::protocol_tests::test_parse_valid_ses_verify_domain_dkim", "generated::protocol_tests::test_parse_valid_ses_verify_domain_identity"}
$DIR/rusoto/services/ses/src/generated.rs: `params.put("Action", operation_name);`
$DIR/rusoto/services/ses/src/generated.rs: `params.put("Version", "2010-12-01");`
{"generated::protocol_tests::test_parse_error_ses_delete_identity", "generated::protocol_tests::test_parse_valid_ses_delete_identity"}
$DIR/rusoto/services/ses/src/generated.rs: `DeleteIdentityRequestSerializer::serialize(&mut params, "", &input);`
$DIR/rusoto/services/ses/src/generated.rs: `request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));`
$DIR/rusoto/services/ses/src/generated.rs: `request.set_content_type("application/x-www-form-urlencoded".to_owned());`
$DIR/rusoto/services/ses/src/generated.rs: `drop(response);`
{"generated::protocol_tests::test_parse_valid_ses_get_identity_dkim_attributes"}
$DIR/rusoto/services/ses/src/generated.rs: `GetIdentityDkimAttributesRequestSerializer::serialize(&mut params, "", &input);`
$DIR/rusoto/services/ses/src/generated.rs: `request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));`
$DIR/rusoto/services/ses/src/generated.rs: `request.set_content_type("application/x-www-form-urlencoded".to_owned());`
$DIR/rusoto/services/ses/src/generated.rs: `xml_util::start_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/ses/src/generated.rs: `skip_tree(stack);`
$DIR/rusoto/services/ses/src/generated.rs: `xml_util::end_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/ses/src/generated.rs: `drop(response);`
{"generated::protocol_tests::test_parse_valid_ses_get_identity_notification_attributes"}
$DIR/rusoto/services/ses/src/generated.rs: `GetIdentityNotificationAttributesRequestSerializer::serialize(&mut params, "", &input);`
$DIR/rusoto/services/ses/src/generated.rs: `request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));`
$DIR/rusoto/services/ses/src/generated.rs: `request.set_content_type("application/x-www-form-urlencoded".to_owned());`
$DIR/rusoto/services/ses/src/generated.rs: `xml_util::start_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/ses/src/generated.rs: `skip_tree(stack);`
$DIR/rusoto/services/ses/src/generated.rs: `xml_util::end_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/ses/src/generated.rs: `drop(response);`
{"generated::protocol_tests::test_parse_valid_ses_get_identity_verification_attributes"}
$DIR/rusoto/services/ses/src/generated.rs: `GetIdentityVerificationAttributesRequestSerializer::serialize(&mut params, "", &input);`
$DIR/rusoto/services/ses/src/generated.rs: `request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));`
$DIR/rusoto/services/ses/src/generated.rs: `request.set_content_type("application/x-www-form-urlencoded".to_owned());`
$DIR/rusoto/services/ses/src/generated.rs: `xml_util::start_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/ses/src/generated.rs: `skip_tree(stack);`
$DIR/rusoto/services/ses/src/generated.rs: `xml_util::end_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/ses/src/generated.rs: `drop(response);`
{"generated::protocol_tests::test_parse_valid_ses_get_send_quota"}
$DIR/rusoto/services/ses/src/generated.rs: `request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));`
$DIR/rusoto/services/ses/src/generated.rs: `request.set_content_type("application/x-www-form-urlencoded".to_owned());`
$DIR/rusoto/services/ses/src/generated.rs: `xml_util::start_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/ses/src/generated.rs: `skip_tree(stack);`
$DIR/rusoto/services/ses/src/generated.rs: `xml_util::end_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/ses/src/generated.rs: `drop(response);`
{"generated::protocol_tests::test_parse_valid_ses_get_send_statistics"}
$DIR/rusoto/services/ses/src/generated.rs: `request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));`
$DIR/rusoto/services/ses/src/generated.rs: `request.set_content_type("application/x-www-form-urlencoded".to_owned());`
$DIR/rusoto/services/ses/src/generated.rs: `xml_util::start_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/ses/src/generated.rs: `skip_tree(stack);`
$DIR/rusoto/services/ses/src/generated.rs: `xml_util::end_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/ses/src/generated.rs: `drop(response);`
{"generated::protocol_tests::test_parse_valid_ses_list_identities"}
$DIR/rusoto/services/ses/src/generated.rs: `ListIdentitiesRequestSerializer::serialize(&mut params, "", &input);`
$DIR/rusoto/services/ses/src/generated.rs: `request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));`
$DIR/rusoto/services/ses/src/generated.rs: `request.set_content_type("application/x-www-form-urlencoded".to_owned());`
$DIR/rusoto/services/ses/src/generated.rs: `xml_util::start_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/ses/src/generated.rs: `skip_tree(stack);`
$DIR/rusoto/services/ses/src/generated.rs: `xml_util::end_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/ses/src/generated.rs: `drop(response);`
{"generated::protocol_tests::test_parse_valid_ses_send_email"}
$DIR/rusoto/services/ses/src/generated.rs: `SendEmailRequestSerializer::serialize(&mut params, "", &input);`
$DIR/rusoto/services/ses/src/generated.rs: `request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));`
$DIR/rusoto/services/ses/src/generated.rs: `request.set_content_type("application/x-www-form-urlencoded".to_owned());`
$DIR/rusoto/services/ses/src/generated.rs: `xml_util::start_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/ses/src/generated.rs: `skip_tree(stack);`
$DIR/rusoto/services/ses/src/generated.rs: `xml_util::end_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/ses/src/generated.rs: `drop(response);`
{"generated::protocol_tests::test_parse_valid_ses_send_raw_email"}
$DIR/rusoto/services/ses/src/generated.rs: `SendRawEmailRequestSerializer::serialize(&mut params, "", &input);`
$DIR/rusoto/services/ses/src/generated.rs: `request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));`
$DIR/rusoto/services/ses/src/generated.rs: `request.set_content_type("application/x-www-form-urlencoded".to_owned());`
$DIR/rusoto/services/ses/src/generated.rs: `xml_util::start_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/ses/src/generated.rs: `skip_tree(stack);`
$DIR/rusoto/services/ses/src/generated.rs: `xml_util::end_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/ses/src/generated.rs: `drop(response);`
{"generated::protocol_tests::test_parse_valid_ses_set_identity_dkim_enabled"}
$DIR/rusoto/services/ses/src/generated.rs: `SetIdentityDkimEnabledRequestSerializer::serialize(&mut params, "", &input);`
$DIR/rusoto/services/ses/src/generated.rs: `request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));`
$DIR/rusoto/services/ses/src/generated.rs: `request.set_content_type("application/x-www-form-urlencoded".to_owned());`
$DIR/rusoto/services/ses/src/generated.rs: `drop(response);`
{"generated::protocol_tests::test_parse_valid_ses_verify_domain_dkim"}
$DIR/rusoto/services/ses/src/generated.rs: `VerifyDomainDkimRequestSerializer::serialize(&mut params, "", &input);`
$DIR/rusoto/services/ses/src/generated.rs: `request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));`
$DIR/rusoto/services/ses/src/generated.rs: `request.set_content_type("application/x-www-form-urlencoded".to_owned());`
$DIR/rusoto/services/ses/src/generated.rs: `xml_util::start_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/ses/src/generated.rs: `skip_tree(stack);`
$DIR/rusoto/services/ses/src/generated.rs: `xml_util::end_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/ses/src/generated.rs: `drop(response);`
{"generated::protocol_tests::test_parse_valid_ses_verify_domain_identity"}
$DIR/rusoto/services/ses/src/generated.rs: `VerifyDomainIdentityRequestSerializer::serialize(&mut params, "", &input);`
$DIR/rusoto/services/ses/src/generated.rs: `request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));`
$DIR/rusoto/services/ses/src/generated.rs: `request.set_content_type("application/x-www-form-urlencoded".to_owned());`
$DIR/rusoto/services/ses/src/generated.rs: `xml_util::start_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/ses/src/generated.rs: `skip_tree(stack);`
$DIR/rusoto/services/ses/src/generated.rs: `xml_util::end_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/ses/src/generated.rs: `drop(response);`
{"generated::protocol_tests::test_parse_error_ses_delete_identity", "generated::protocol_tests::test_parse_valid_ses_delete_identity", "generated::protocol_tests::test_parse_valid_ses_get_identity_dkim_attributes", "generated::protocol_tests::test_parse_valid_ses_get_identity_notification_attributes", "generated::protocol_tests::test_parse_valid_ses_get_identity_verification_attributes", "generated::protocol_tests::test_parse_valid_ses_get_send_quota", "generated::protocol_tests::test_parse_valid_ses_get_send_statistics", "generated::protocol_tests::test_parse_valid_ses_list_identities", "generated::protocol_tests::test_parse_valid_ses_send_email", "generated::protocol_tests::test_parse_valid_ses_send_raw_email", "generated::protocol_tests::test_parse_valid_ses_set_identity_dkim_enabled", "generated::protocol_tests::test_parse_valid_ses_verify_domain_dkim", "generated::protocol_tests::test_parse_valid_ses_verify_domain_identity"}
$DIR/rusoto/services/ses/src/generated.rs: `.put("Action", operation_name)`
$DIR/rusoto/services/ses/src/generated.rs: `.put("Version", "2010-12-01")`
$DIR/rusoto/services/ses/src/generated.rs: `.client.sign_and_dispatch(request)`
$DIR/rusoto/services/ses/src/generated.rs: `.status.is_success()`
$DIR/rusoto/services/ses/src/generated.rs: `.buffer()`
$DIR/rusoto/services/ses/src/generated.rs: `.map_err(RusotoError::HttpDispatch)`
{"generated::protocol_tests::test_parse_error_ses_delete_identity", "generated::protocol_tests::test_parse_valid_ses_delete_identity"}
$DIR/rusoto/services/ses/src/generated.rs: `.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()))`
$DIR/rusoto/services/ses/src/generated.rs: `.set_content_type("application/x-www-form-urlencoded".to_owned())`
{"generated::protocol_tests::test_parse_valid_ses_get_identity_dkim_attributes"}
$DIR/rusoto/services/ses/src/generated.rs: `.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()))`
$DIR/rusoto/services/ses/src/generated.rs: `.set_content_type("application/x-www-form-urlencoded".to_owned())`
{"generated::protocol_tests::test_parse_valid_ses_get_identity_notification_attributes"}
$DIR/rusoto/services/ses/src/generated.rs: `.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()))`
$DIR/rusoto/services/ses/src/generated.rs: `.set_content_type("application/x-www-form-urlencoded".to_owned())`
{"generated::protocol_tests::test_parse_valid_ses_get_identity_verification_attributes"}
$DIR/rusoto/services/ses/src/generated.rs: `.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()))`
$DIR/rusoto/services/ses/src/generated.rs: `.set_content_type("application/x-www-form-urlencoded".to_owned())`
{"generated::protocol_tests::test_parse_valid_ses_get_send_quota"}
$DIR/rusoto/services/ses/src/generated.rs: `.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()))`
$DIR/rusoto/services/ses/src/generated.rs: `.set_content_type("application/x-www-form-urlencoded".to_owned())`
{"generated::protocol_tests::test_parse_valid_ses_get_send_statistics"}
$DIR/rusoto/services/ses/src/generated.rs: `.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()))`
$DIR/rusoto/services/ses/src/generated.rs: `.set_content_type("application/x-www-form-urlencoded".to_owned())`
{"generated::protocol_tests::test_parse_valid_ses_list_identities"}
$DIR/rusoto/services/ses/src/generated.rs: `.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()))`
$DIR/rusoto/services/ses/src/generated.rs: `.set_content_type("application/x-www-form-urlencoded".to_owned())`
{"generated::protocol_tests::test_parse_valid_ses_send_email"}
$DIR/rusoto/services/ses/src/generated.rs: `.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()))`
$DIR/rusoto/services/ses/src/generated.rs: `.set_content_type("application/x-www-form-urlencoded".to_owned())`
{"generated::protocol_tests::test_parse_valid_ses_send_raw_email"}
$DIR/rusoto/services/ses/src/generated.rs: `.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()))`
$DIR/rusoto/services/ses/src/generated.rs: `.set_content_type("application/x-www-form-urlencoded".to_owned())`
{"generated::protocol_tests::test_parse_valid_ses_set_identity_dkim_enabled"}
$DIR/rusoto/services/ses/src/generated.rs: `.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()))`
$DIR/rusoto/services/ses/src/generated.rs: `.set_content_type("application/x-www-form-urlencoded".to_owned())`
{"generated::protocol_tests::test_parse_valid_ses_verify_domain_dkim"}
$DIR/rusoto/services/ses/src/generated.rs: `.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()))`
$DIR/rusoto/services/ses/src/generated.rs: `.set_content_type("application/x-www-form-urlencoded".to_owned())`
{"generated::protocol_tests::test_parse_valid_ses_verify_domain_identity"}
$DIR/rusoto/services/ses/src/generated.rs: `.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()))`
$DIR/rusoto/services/ses/src/generated.rs: `.set_content_type("application/x-www-form-urlencoded".to_owned())`
{"generated::protocol_tests::test_parse_error_ses_delete_identity"}
$DIR/rusoto/services/ses/src/generated.rs: `.with_body(&mock_response)`
{"generated::protocol_tests::test_parse_valid_ses_delete_identity"}
$DIR/rusoto/services/ses/src/generated.rs: `.with_body(&mock_response)`
{"generated::protocol_tests::test_parse_valid_ses_get_identity_dkim_attributes"}
$DIR/rusoto/services/ses/src/generated.rs: `.with_body(&mock_response)`
{"generated::protocol_tests::test_parse_valid_ses_get_identity_notification_attributes"}
$DIR/rusoto/services/ses/src/generated.rs: `.with_body(&mock_response)`
{"generated::protocol_tests::test_parse_valid_ses_get_identity_verification_attributes"}
$DIR/rusoto/services/ses/src/generated.rs: `.with_body(&mock_response)`
{"generated::protocol_tests::test_parse_valid_ses_get_send_quota"}
$DIR/rusoto/services/ses/src/generated.rs: `.with_body(&mock_response)`
{"generated::protocol_tests::test_parse_valid_ses_get_send_statistics"}
$DIR/rusoto/services/ses/src/generated.rs: `.with_body(&mock_response)`
{"generated::protocol_tests::test_parse_valid_ses_list_identities"}
$DIR/rusoto/services/ses/src/generated.rs: `.with_body(&mock_response)`
{"generated::protocol_tests::test_parse_valid_ses_send_email"}
$DIR/rusoto/services/ses/src/generated.rs: `.with_body(&mock_response)`
{"generated::protocol_tests::test_parse_valid_ses_send_raw_email"}
$DIR/rusoto/services/ses/src/generated.rs: `.with_body(&mock_response)`
{"generated::protocol_tests::test_parse_valid_ses_set_identity_dkim_enabled"}
$DIR/rusoto/services/ses/src/generated.rs: `.with_body(&mock_response)`
{"generated::protocol_tests::test_parse_valid_ses_verify_domain_dkim"}
$DIR/rusoto/services/ses/src/generated.rs: `.with_body(&mock_response)`
{"generated::protocol_tests::test_parse_valid_ses_verify_domain_identity"}
$DIR/rusoto/services/ses/src/generated.rs: `.with_body(&mock_response)`
{"custom::custom_tests::should_serialize_map_parameters_in_create_platform_application_request_body"}
$DIR/rusoto/services/sns/src/custom/custom_tests.rs: `sns_input_attrib.insert(
        "PlatformCredential".to_string(),
        "YOUR_PLATFORM_CREDENTIAL".to_string(),
    );`
$DIR/rusoto/services/sns/src/custom/custom_tests.rs: `sns_input_attrib.insert(
        "PlatformPrincipal".to_string(),
        "YOUR_PLATFORM_PRINCIPAL".to_string(),
    );`
{"custom::custom_tests::should_serialize_map_parameters_in_create_platform_endpoint_request_body"}
$DIR/rusoto/services/sns/src/custom/custom_tests.rs: `sns_input_attrib.insert("Enabled".to_string(), "false".to_string());`
{"custom::custom_tests::should_serialize_map_parameters_in_set_platform_application_attributes_request_body"}
$DIR/rusoto/services/sns/src/custom/custom_tests.rs: `sns_input_attrib.insert(
        "PlatformCredential".to_string(),
        "YOUR_PLATFORM_CREDENTIAL".to_string(),
    );`
{"custom::custom_tests::should_serialize_map_parameters_in_set_endpoint_attributes_request_body"}
$DIR/rusoto/services/sns/src/custom/custom_tests.rs: `sns_input_attrib.insert("Enabled".to_string(), "false".to_string());`
{"custom::custom_tests::should_serialize_map_parameters_in_set_sms_attributes_request_body"}
$DIR/rusoto/services/sns/src/custom/custom_tests.rs: `sns_input_attrib.insert("DefaultSMSType".to_string(), "Promotional".to_string());`
{"custom::custom_tests::should_serialize_map_parameters_in_create_platform_application_request_body"}
$DIR/rusoto/services/sns/src/custom/custom_tests.rs: `.with_request_checker(|request: &SignedRequest| {
            assert_eq!("POST", request.method);

            if let Some(SignedRequestPayload::Buffer(ref buffer)) = request.payload {
                let params: Params = serde_urlencoded::from_bytes(buffer).unwrap();
                for idx in 1..2 {
                    let key = params.get(format!("Attributes.entry.{}.key", idx).as_str());
                    match key.unwrap().as_ref().unwrap().as_str() {
                        "PlatformCredential" => {
                            assert_eq!(
                                Some(&Some("YOUR_PLATFORM_CREDENTIAL".to_owned())),
                                params.get(format!("Attributes.entry.{}.value", idx).as_str())
                            );
                        }
                        "PlatformPrincipal" => {
                            assert_eq!(
                                Some(&Some("YOUR_PLATFORM_PRINCIPAL".to_owned())),
                                params.get(format!("Attributes.entry.{}.value", idx).as_str())
                            );
                        }
                        _ => panic!("invalid params. {:?}", params),
                    }
                }
            } else {
                panic!("Unexpected request.payload: {:?}", request.payload);
            }
        })`
$DIR/rusoto/services/sns/src/custom/custom_tests.rs: `.get(format!("Attributes.entry.{}.key", idx).as_str())`
$DIR/rusoto/services/sns/src/custom/custom_tests.rs: `.insert(
        "PlatformCredential".to_string(),
        "YOUR_PLATFORM_CREDENTIAL".to_string(),
    )`
$DIR/rusoto/services/sns/src/custom/custom_tests.rs: `.insert(
        "PlatformPrincipal".to_string(),
        "YOUR_PLATFORM_PRINCIPAL".to_string(),
    )`
$DIR/rusoto/services/sns/src/custom/custom_tests.rs: `.create_platform_application(sns_input)`
{"custom::custom_tests::should_serialize_map_parameters_in_create_platform_endpoint_request_body"}
$DIR/rusoto/services/sns/src/custom/custom_tests.rs: `.with_request_checker(|request: &SignedRequest| {
            assert_eq!("POST", request.method);

            if let Some(SignedRequestPayload::Buffer(ref buffer)) = request.payload {
                let params: Params = serde_urlencoded::from_bytes(buffer).unwrap();
                assert_eq!(
                    Some(&Some("Enabled".to_owned())),
                    params.get("Attributes.entry.1.key")
                );
                assert_eq!(
                    Some(&Some("false".to_owned())),
                    params.get("Attributes.entry.1.value")
                );
            } else {
                panic!("Unexpected request.payload: {:?}", request.payload);
            }
        })`
$DIR/rusoto/services/sns/src/custom/custom_tests.rs: `.insert("Enabled".to_string(), "false".to_string())`
$DIR/rusoto/services/sns/src/custom/custom_tests.rs: `.create_platform_endpoint(sns_input)`
{"custom::custom_tests::should_serialize_map_parameters_in_set_platform_application_attributes_request_body"}
$DIR/rusoto/services/sns/src/custom/custom_tests.rs: `.with_request_checker(|request: &SignedRequest| {
            assert_eq!("POST", request.method);

            if let Some(SignedRequestPayload::Buffer(ref buffer)) = request.payload {
                let params: Params = serde_urlencoded::from_bytes(buffer).unwrap();
                assert_eq!(
                    Some(&Some("PlatformCredential".to_owned())),
                    params.get("Attributes.entry.1.key")
                );
                assert_eq!(
                    Some(&Some("YOUR_PLATFORM_CREDENTIAL".to_owned())),
                    params.get("Attributes.entry.1.value")
                );
            } else {
                panic!("Unexpected request.payload: {:?}", request.payload);
            }
        })`
$DIR/rusoto/services/sns/src/custom/custom_tests.rs: `.insert(
        "PlatformCredential".to_string(),
        "YOUR_PLATFORM_CREDENTIAL".to_string(),
    )`
$DIR/rusoto/services/sns/src/custom/custom_tests.rs: `.set_platform_application_attributes(sns_input)`
{"custom::custom_tests::should_serialize_map_parameters_in_set_endpoint_attributes_request_body"}
$DIR/rusoto/services/sns/src/custom/custom_tests.rs: `.with_request_checker(|request: &SignedRequest| {
            assert_eq!("POST", request.method);

            if let Some(SignedRequestPayload::Buffer(ref buffer)) = request.payload {
                let params: Params = serde_urlencoded::from_bytes(buffer).unwrap();
                assert_eq!(
                    Some(&Some("Enabled".to_owned())),
                    params.get("Attributes.entry.1.key")
                );
                assert_eq!(
                    Some(&Some("false".to_owned())),
                    params.get("Attributes.entry.1.value")
                );
            } else {
                panic!("Unexpected request.payload: {:?}", request.payload);
            }
        })`
$DIR/rusoto/services/sns/src/custom/custom_tests.rs: `.insert("Enabled".to_string(), "false".to_string())`
$DIR/rusoto/services/sns/src/custom/custom_tests.rs: `.set_endpoint_attributes(sns_input)`
{"custom::custom_tests::should_serialize_map_parameters_in_get_sms_attributes_request_body"}
$DIR/rusoto/services/sns/src/custom/custom_tests.rs: `.with_body(
        r#"<GetSMSAttributesResponse xmlns="http://sns.amazonaws.com/doc/2010-03-31/">
              <GetSMSAttributesResult>
                <attributes>
                  <entry>
                    <key>DefaultSMSType</key>
                    <value>Promotional</value>
                  </entry>
                </attributes>
              </GetSMSAttributesResult>
              <ResponseMetadata>
                <RequestId>7e20a670-be23-5b05-9364-f02cc763f409</RequestId>
              </ResponseMetadata>
            </GetSMSAttributesResponse>"#,
    )`
$DIR/rusoto/services/sns/src/custom/custom_tests.rs: `.get_sms_attributes(sns_input)`
{"custom::custom_tests::should_serialize_map_parameters_in_set_sms_attributes_request_body"}
$DIR/rusoto/services/sns/src/custom/custom_tests.rs: `.with_request_checker(|request: &SignedRequest| {
            assert_eq!("POST", request.method);

            if let Some(SignedRequestPayload::Buffer(ref buffer)) = request.payload {
                let params: Params = serde_urlencoded::from_bytes(buffer).unwrap();
                assert_eq!(
                    Some(&Some("DefaultSMSType".to_owned())),
                    params.get("attributes.entry.1.key")
                );
                assert_eq!(
                    Some(&Some("Promotional".to_owned())),
                    params.get("attributes.entry.1.value")
                );
            } else {
                panic!("Unexpected request.payload: {:?}", request.payload);
            }
        })`
$DIR/rusoto/services/sns/src/custom/custom_tests.rs: `.insert("DefaultSMSType".to_string(), "Promotional".to_string())`
$DIR/rusoto/services/sns/src/custom/custom_tests.rs: `.set_sms_attributes(sns_input)`
{"custom::custom_tests::should_serialize_map_parameters_in_get_subscription_attributes_request_body"}
$DIR/rusoto/services/sns/src/custom/custom_tests.rs: `.with_body(
            r#"<GetSubscriptionAttributesResponse xmlns="https://sns.amazonaws.com/doc/2010-03-31/">
                <GetSubscriptionAttributesResult>
                    <Attributes>
                        <entry>
                            <key>Owner</key>
                            <value>123456789012</value>
                        </entry>
                        <entry>
                            <key>DeliveryPolicy</key>
                            <value>{&quot;healthyRetryPolicy&quot;:{&quot;numRetries&quot;:10}}</value>
                        </entry>
                        <entry>
                            <key>SubscriptionArn</key>
                            <value>arn:aws:sns:us-east-2:123456789012:My-Topic:80289ba6-0fd4-4079-afb4-ce8c8260f0ca</value>
                        </entry>
                    </Attributes>
                </GetSubscriptionAttributesResult>
                <ResponseMetadata>
                    <RequestId>057f074c-33a7-11df-9540-99d0768312d3</RequestId>
                </ResponseMetadata>
            </GetSubscriptionAttributesResponse>"#,
        )`
$DIR/rusoto/services/sns/src/custom/custom_tests.rs: `.get_subscription_attributes(sns_input)`
{"generated::protocol_tests::test_parse_error_sns_delete_topic", "generated::protocol_tests::test_parse_valid_sns_add_permission", "generated::protocol_tests::test_parse_valid_sns_confirm_subscription", "generated::protocol_tests::test_parse_valid_sns_create_topic", "generated::protocol_tests::test_parse_valid_sns_get_subscription_attributes", "generated::protocol_tests::test_parse_valid_sns_get_topic_attributes", "generated::protocol_tests::test_parse_valid_sns_list_subscriptions", "generated::protocol_tests::test_parse_valid_sns_list_subscriptions_by_topic", "generated::protocol_tests::test_parse_valid_sns_list_topics", "generated::protocol_tests::test_parse_valid_sns_publish", "generated::protocol_tests::test_parse_valid_sns_subscribe"}
$DIR/rusoto/services/sns/src/generated.rs: `params.put("Action", operation_name);`
$DIR/rusoto/services/sns/src/generated.rs: `params.put("Version", "2010-03-31");`
{"generated::protocol_tests::test_parse_valid_sns_add_permission"}
$DIR/rusoto/services/sns/src/generated.rs: `AddPermissionInputSerializer::serialize(&mut params, "", &input);`
$DIR/rusoto/services/sns/src/generated.rs: `request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));`
$DIR/rusoto/services/sns/src/generated.rs: `request.set_content_type("application/x-www-form-urlencoded".to_owned());`
$DIR/rusoto/services/sns/src/generated.rs: `std::mem::drop(response);`
{"generated::protocol_tests::test_parse_valid_sns_confirm_subscription"}
$DIR/rusoto/services/sns/src/generated.rs: `ConfirmSubscriptionInputSerializer::serialize(&mut params, "", &input);`
$DIR/rusoto/services/sns/src/generated.rs: `request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));`
$DIR/rusoto/services/sns/src/generated.rs: `request.set_content_type("application/x-www-form-urlencoded".to_owned());`
$DIR/rusoto/services/sns/src/generated.rs: `xml_util::start_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/sns/src/generated.rs: `skip_tree(stack);`
$DIR/rusoto/services/sns/src/generated.rs: `xml_util::end_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/sns/src/generated.rs: `drop(response);`
{"generated::protocol_tests::test_parse_valid_sns_create_topic"}
$DIR/rusoto/services/sns/src/generated.rs: `CreateTopicInputSerializer::serialize(&mut params, "", &input);`
$DIR/rusoto/services/sns/src/generated.rs: `request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));`
$DIR/rusoto/services/sns/src/generated.rs: `request.set_content_type("application/x-www-form-urlencoded".to_owned());`
$DIR/rusoto/services/sns/src/generated.rs: `xml_util::start_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/sns/src/generated.rs: `skip_tree(stack);`
$DIR/rusoto/services/sns/src/generated.rs: `xml_util::end_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/sns/src/generated.rs: `drop(response);`
{"generated::protocol_tests::test_parse_error_sns_delete_topic"}
$DIR/rusoto/services/sns/src/generated.rs: `DeleteTopicInputSerializer::serialize(&mut params, "", &input);`
$DIR/rusoto/services/sns/src/generated.rs: `request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));`
$DIR/rusoto/services/sns/src/generated.rs: `request.set_content_type("application/x-www-form-urlencoded".to_owned());`
$DIR/rusoto/services/sns/src/generated.rs: `std::mem::drop(response);`
{"generated::protocol_tests::test_parse_valid_sns_get_subscription_attributes"}
$DIR/rusoto/services/sns/src/generated.rs: `GetSubscriptionAttributesInputSerializer::serialize(&mut params, "", &input);`
$DIR/rusoto/services/sns/src/generated.rs: `request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));`
$DIR/rusoto/services/sns/src/generated.rs: `request.set_content_type("application/x-www-form-urlencoded".to_owned());`
$DIR/rusoto/services/sns/src/generated.rs: `xml_util::start_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/sns/src/generated.rs: `skip_tree(stack);`
$DIR/rusoto/services/sns/src/generated.rs: `xml_util::end_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/sns/src/generated.rs: `drop(response);`
{"generated::protocol_tests::test_parse_valid_sns_get_topic_attributes"}
$DIR/rusoto/services/sns/src/generated.rs: `GetTopicAttributesInputSerializer::serialize(&mut params, "", &input);`
$DIR/rusoto/services/sns/src/generated.rs: `request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));`
$DIR/rusoto/services/sns/src/generated.rs: `request.set_content_type("application/x-www-form-urlencoded".to_owned());`
$DIR/rusoto/services/sns/src/generated.rs: `xml_util::start_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/sns/src/generated.rs: `skip_tree(stack);`
$DIR/rusoto/services/sns/src/generated.rs: `xml_util::end_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/sns/src/generated.rs: `drop(response);`
{"generated::protocol_tests::test_parse_valid_sns_list_subscriptions"}
$DIR/rusoto/services/sns/src/generated.rs: `ListSubscriptionsInputSerializer::serialize(&mut params, "", &input);`
$DIR/rusoto/services/sns/src/generated.rs: `request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));`
$DIR/rusoto/services/sns/src/generated.rs: `request.set_content_type("application/x-www-form-urlencoded".to_owned());`
$DIR/rusoto/services/sns/src/generated.rs: `xml_util::start_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/sns/src/generated.rs: `skip_tree(stack);`
$DIR/rusoto/services/sns/src/generated.rs: `xml_util::end_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/sns/src/generated.rs: `drop(response);`
{"generated::protocol_tests::test_parse_valid_sns_list_subscriptions_by_topic"}
$DIR/rusoto/services/sns/src/generated.rs: `ListSubscriptionsByTopicInputSerializer::serialize(&mut params, "", &input);`
$DIR/rusoto/services/sns/src/generated.rs: `request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));`
$DIR/rusoto/services/sns/src/generated.rs: `request.set_content_type("application/x-www-form-urlencoded".to_owned());`
$DIR/rusoto/services/sns/src/generated.rs: `xml_util::start_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/sns/src/generated.rs: `skip_tree(stack);`
$DIR/rusoto/services/sns/src/generated.rs: `xml_util::end_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/sns/src/generated.rs: `drop(response);`
{"generated::protocol_tests::test_parse_valid_sns_list_topics"}
$DIR/rusoto/services/sns/src/generated.rs: `ListTopicsInputSerializer::serialize(&mut params, "", &input);`
$DIR/rusoto/services/sns/src/generated.rs: `request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));`
$DIR/rusoto/services/sns/src/generated.rs: `request.set_content_type("application/x-www-form-urlencoded".to_owned());`
$DIR/rusoto/services/sns/src/generated.rs: `xml_util::start_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/sns/src/generated.rs: `skip_tree(stack);`
$DIR/rusoto/services/sns/src/generated.rs: `xml_util::end_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/sns/src/generated.rs: `drop(response);`
{"generated::protocol_tests::test_parse_valid_sns_publish"}
$DIR/rusoto/services/sns/src/generated.rs: `PublishInputSerializer::serialize(&mut params, "", &input);`
$DIR/rusoto/services/sns/src/generated.rs: `request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));`
$DIR/rusoto/services/sns/src/generated.rs: `request.set_content_type("application/x-www-form-urlencoded".to_owned());`
$DIR/rusoto/services/sns/src/generated.rs: `xml_util::start_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/sns/src/generated.rs: `skip_tree(stack);`
$DIR/rusoto/services/sns/src/generated.rs: `xml_util::end_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/sns/src/generated.rs: `drop(response);`
{"generated::protocol_tests::test_parse_valid_sns_subscribe"}
$DIR/rusoto/services/sns/src/generated.rs: `SubscribeInputSerializer::serialize(&mut params, "", &input);`
$DIR/rusoto/services/sns/src/generated.rs: `request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));`
$DIR/rusoto/services/sns/src/generated.rs: `request.set_content_type("application/x-www-form-urlencoded".to_owned());`
$DIR/rusoto/services/sns/src/generated.rs: `xml_util::start_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/sns/src/generated.rs: `skip_tree(stack);`
$DIR/rusoto/services/sns/src/generated.rs: `xml_util::end_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/sns/src/generated.rs: `drop(response);`
{"generated::protocol_tests::test_parse_error_sns_delete_topic", "generated::protocol_tests::test_parse_valid_sns_add_permission", "generated::protocol_tests::test_parse_valid_sns_confirm_subscription", "generated::protocol_tests::test_parse_valid_sns_create_topic", "generated::protocol_tests::test_parse_valid_sns_get_subscription_attributes", "generated::protocol_tests::test_parse_valid_sns_get_topic_attributes", "generated::protocol_tests::test_parse_valid_sns_list_subscriptions", "generated::protocol_tests::test_parse_valid_sns_list_subscriptions_by_topic", "generated::protocol_tests::test_parse_valid_sns_list_topics", "generated::protocol_tests::test_parse_valid_sns_publish", "generated::protocol_tests::test_parse_valid_sns_subscribe"}
$DIR/rusoto/services/sns/src/generated.rs: `.put("Action", operation_name)`
$DIR/rusoto/services/sns/src/generated.rs: `.put("Version", "2010-03-31")`
$DIR/rusoto/services/sns/src/generated.rs: `.client.sign_and_dispatch(request)`
$DIR/rusoto/services/sns/src/generated.rs: `.status.is_success()`
$DIR/rusoto/services/sns/src/generated.rs: `.buffer()`
$DIR/rusoto/services/sns/src/generated.rs: `.map_err(RusotoError::HttpDispatch)`
{"generated::protocol_tests::test_parse_valid_sns_add_permission"}
$DIR/rusoto/services/sns/src/generated.rs: `.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()))`
$DIR/rusoto/services/sns/src/generated.rs: `.set_content_type("application/x-www-form-urlencoded".to_owned())`
{"generated::protocol_tests::test_parse_valid_sns_confirm_subscription"}
$DIR/rusoto/services/sns/src/generated.rs: `.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()))`
$DIR/rusoto/services/sns/src/generated.rs: `.set_content_type("application/x-www-form-urlencoded".to_owned())`
{"generated::protocol_tests::test_parse_valid_sns_create_topic"}
$DIR/rusoto/services/sns/src/generated.rs: `.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()))`
$DIR/rusoto/services/sns/src/generated.rs: `.set_content_type("application/x-www-form-urlencoded".to_owned())`
{"generated::protocol_tests::test_parse_error_sns_delete_topic"}
$DIR/rusoto/services/sns/src/generated.rs: `.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()))`
$DIR/rusoto/services/sns/src/generated.rs: `.set_content_type("application/x-www-form-urlencoded".to_owned())`
{"generated::protocol_tests::test_parse_valid_sns_get_subscription_attributes"}
$DIR/rusoto/services/sns/src/generated.rs: `.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()))`
$DIR/rusoto/services/sns/src/generated.rs: `.set_content_type("application/x-www-form-urlencoded".to_owned())`
{"generated::protocol_tests::test_parse_valid_sns_get_topic_attributes"}
$DIR/rusoto/services/sns/src/generated.rs: `.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()))`
$DIR/rusoto/services/sns/src/generated.rs: `.set_content_type("application/x-www-form-urlencoded".to_owned())`
{"generated::protocol_tests::test_parse_valid_sns_list_subscriptions"}
$DIR/rusoto/services/sns/src/generated.rs: `.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()))`
$DIR/rusoto/services/sns/src/generated.rs: `.set_content_type("application/x-www-form-urlencoded".to_owned())`
{"generated::protocol_tests::test_parse_valid_sns_list_subscriptions_by_topic"}
$DIR/rusoto/services/sns/src/generated.rs: `.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()))`
$DIR/rusoto/services/sns/src/generated.rs: `.set_content_type("application/x-www-form-urlencoded".to_owned())`
{"generated::protocol_tests::test_parse_valid_sns_list_topics"}
$DIR/rusoto/services/sns/src/generated.rs: `.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()))`
$DIR/rusoto/services/sns/src/generated.rs: `.set_content_type("application/x-www-form-urlencoded".to_owned())`
{"generated::protocol_tests::test_parse_valid_sns_publish"}
$DIR/rusoto/services/sns/src/generated.rs: `.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()))`
$DIR/rusoto/services/sns/src/generated.rs: `.set_content_type("application/x-www-form-urlencoded".to_owned())`
{"generated::protocol_tests::test_parse_valid_sns_subscribe"}
$DIR/rusoto/services/sns/src/generated.rs: `.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()))`
$DIR/rusoto/services/sns/src/generated.rs: `.set_content_type("application/x-www-form-urlencoded".to_owned())`
{"generated::protocol_tests::test_parse_error_sns_delete_topic"}
$DIR/rusoto/services/sns/src/generated.rs: `.with_body(&mock_response)`
{"generated::protocol_tests::test_parse_valid_sns_add_permission"}
$DIR/rusoto/services/sns/src/generated.rs: `.with_body(&mock_response)`
{"generated::protocol_tests::test_parse_valid_sns_confirm_subscription"}
$DIR/rusoto/services/sns/src/generated.rs: `.with_body(&mock_response)`
{"generated::protocol_tests::test_parse_valid_sns_create_topic"}
$DIR/rusoto/services/sns/src/generated.rs: `.with_body(&mock_response)`
{"generated::protocol_tests::test_parse_valid_sns_get_subscription_attributes"}
$DIR/rusoto/services/sns/src/generated.rs: `.with_body(&mock_response)`
{"generated::protocol_tests::test_parse_valid_sns_get_topic_attributes"}
$DIR/rusoto/services/sns/src/generated.rs: `.with_body(&mock_response)`
{"generated::protocol_tests::test_parse_valid_sns_list_subscriptions_by_topic"}
$DIR/rusoto/services/sns/src/generated.rs: `.with_body(&mock_response)`
{"generated::protocol_tests::test_parse_valid_sns_list_subscriptions"}
$DIR/rusoto/services/sns/src/generated.rs: `.with_body(&mock_response)`
{"generated::protocol_tests::test_parse_valid_sns_list_topics"}
$DIR/rusoto/services/sns/src/generated.rs: `.with_body(&mock_response)`
{"generated::protocol_tests::test_parse_valid_sns_publish"}
$DIR/rusoto/services/sns/src/generated.rs: `.with_body(&mock_response)`
{"generated::protocol_tests::test_parse_valid_sns_subscribe"}
$DIR/rusoto/services/sns/src/generated.rs: `.with_body(&mock_response)`
{"custom::custom_tests::should_serialize_map_parameters_in_request_body"}
$DIR/rusoto/services/sqs/src/custom/custom_tests.rs: `message_attributes.insert(
        "test_attribute_name".to_owned(),
        MessageAttributeValue {
            string_value: Some("test_attribute_value".to_owned()),
            data_type: "String".to_owned(),
            ..Default::default()
        },
    );`
{"custom::custom_tests::should_deserialize_map_parameters_in_response_body"}
$DIR/rusoto/services/sqs/src/custom/custom_tests.rs: `message_attributes.insert(
        "test_attribute_name".to_owned(),
        MessageAttributeValue {
            string_value: Some("test_attribute_value".to_owned()),
            data_type: "String".to_owned(),
            ..Default::default()
        },
    );`
{"custom::custom_tests::should_serialize_map_parameters_in_request_body"}
$DIR/rusoto/services/sqs/src/custom/custom_tests.rs: `.with_body(
            r#"<?xml version="1.0" encoding="UTF-8"?>
        <SendMessageResponse>
            <SendMessageResult>
                <MD5OfMessageBody>
                    fafb00f5732ab283681e124bf8747ed1
                </MD5OfMessageBody>
                <MD5OfMessageAttributes>
            3ae8f24a165a8cedc005670c81a27295
                </MD5OfMessageAttributes>
                <MessageId>
                    5fea7756-0ea4-451a-a703-a558b933e274
                </MessageId>
            </SendMessageResult>
            <ResponseMetadata>
                <RequestId>
                    27daac76-34dd-47df-bd01-1f6e873584a0
                </RequestId>
            </ResponseMetadata>
        </SendMessageResponse>"#,
        )`
$DIR/rusoto/services/sqs/src/custom/custom_tests.rs: `.with_request_checker(|request: &SignedRequest| {
            println!("{:#?}", request.params);

            assert_eq!("POST", request.method);
            assert_eq!("/", request.path);
            if let Some(SignedRequestPayload::Buffer(ref buffer)) = request.payload {
                let params: Params = serde_urlencoded::from_bytes(buffer).unwrap();
                assert_eq!(
                    Some(&Some("test_attribute_name".to_owned())),
                    params.get("MessageAttribute.1.Name")
                );
                assert_eq!(
                    Some(&Some("test_attribute_value".to_owned())),
                    params.get("MessageAttribute.1.Value.StringValue")
                );
                assert_eq!(
                    Some(&Some("String".to_owned())),
                    params.get("MessageAttribute.1.Value.DataType")
                );
            } else {
                panic!("Unexpected request.payload: {:?}", request.payload);
            }
        })`
$DIR/rusoto/services/sqs/src/custom/custom_tests.rs: `.insert(
        "test_attribute_name".to_owned(),
        MessageAttributeValue {
            string_value: Some("test_attribute_value".to_owned()),
            data_type: "String".to_owned(),
            ..Default::default()
        },
    )`
$DIR/rusoto/services/sqs/src/custom/custom_tests.rs: `.send_message(request)`
{"custom::custom_tests::should_fix_issue_323"}
$DIR/rusoto/services/sqs/src/custom/custom_tests.rs: `.with_body(
            r#"<?xml version="1.0" encoding="UTF-8"?>
        <ReceiveMessageResponse>
            <ReceiveMessageResult>
            <Message>
                <MessageId>
                5fea7756-0ea4-451a-a703-a558b933e274
                </MessageId>
                <ReceiptHandle>
                MbZj6wDWli+JvwwJaBV+3dcjk2YW2vA3+STFFljTM8tJJg6HRG6PYSasuWXPJB+Cw
                Lj1FjgXUv1uSj1gUPAWV66FU/WeR4mq2OKpEGYWbnLmpRCJVAyeMjeU5ZBdtcQ+QE
                auMZc8ZRv37sIW2iJKq3M9MFx1YvV11A2x/KSbkJ0=
                </ReceiptHandle>
                <MD5OfBody>
                fafb00f5732ab283681e124bf8747ed1
                </MD5OfBody>
                <Body>This is a test message</Body>
                <Attribute>
                <Name>SenderId</Name>
                <Value>195004372649</Value>
                </Attribute>
            </Message>
            </ReceiveMessageResult>
            <ResponseMetadata>
            <RequestId>
                b6633655-283d-45b4-aee4-4e84e0ae6afa
            </RequestId>
            </ResponseMetadata>
        </ReceiveMessageResponse>"#,
        )`
$DIR/rusoto/services/sqs/src/custom/custom_tests.rs: `.with_request_checker(|request: &SignedRequest| {
            assert_eq!("POST", request.method);
            assert_eq!("/", request.path);
            if let Some(SignedRequestPayload::Buffer(ref buffer)) = request.payload {
                let params: Params = serde_urlencoded::from_bytes(buffer).unwrap();
                assert_eq!(
                    params.get("Action"),
                    Some(&Some("ReceiveMessage".to_owned()))
                );
                assert_eq!(
                    params.get("MaxNumberOfMessages"),
                    Some(&Some("1".to_owned()))
                );
                assert_eq!(params.get("VisibilityTimeout"), Some(&Some("2".to_owned())));
                assert_eq!(params.get("WaitTimeSeconds"), Some(&Some("3".to_owned())));
                assert_eq!(params.get("Integer"), None);
            } else {
                panic!("Unexpected request.payload: {:?}", request.payload);
            }
        })`
$DIR/rusoto/services/sqs/src/custom/custom_tests.rs: `.receive_message(request)`
{"custom::custom_tests::test_parse_queue_does_not_exist_error"}
$DIR/rusoto/services/sqs/src/custom/custom_tests.rs: `.with_body(
        r#"<?xml version="1.0"?>
        <ErrorResponse xmlns="http://queue.amazonaws.com/doc/2012-11-05/">
            <Error>
                <Type>Sender</Type>
                <Code>AWS.SimpleQueueService.NonExistentQueue</Code>
                <Message>The specified queue does not exist for this wsdl version.</Message>
                <Detail/>
            </Error>
            <RequestId>8f8f9957-c0d9-536a-9ca6-ca7483be06ad</RequestId>
        </ErrorResponse>"#,
    )`
$DIR/rusoto/services/sqs/src/custom/custom_tests.rs: `.get_queue_url(request)`
$DIR/rusoto/services/sqs/src/custom/custom_tests.rs: `.err()`
{"custom::custom_tests::should_deserialize_map_parameters_in_response_body"}
$DIR/rusoto/services/sqs/src/custom/custom_tests.rs: `.with_body(
            r#"<?xml version="1.0" encoding="UTF-8"?>
        <ReceiveMessageResponse>
            <ReceiveMessageResult>
            <Message>
                <MessageId>
                    5fea7756-0ea4-451a-a703-a558b933e274
                </MessageId>
                <ReceiptHandle>
                    MbZj6wDWli+JvwwJaBV+3dcjk2YW2vA3+STFFljTM8tJJg6HRG6PYSasuWXPJB+Cw
                    Lj1FjgXUv1uSj1gUPAWV66FU/WeR4mq2OKpEGYWbnLmpRCJVAyeMjeU5ZBdtcQ+QE
                    auMZc8ZRv37sIW2iJKq3M9MFx1YvV11A2x/KSbkJ0=
                </ReceiptHandle>
                <MD5OfBody>
                    fafb00f5732ab283681e124bf8747ed1
                </MD5OfBody>
                <Body>This is a test message</Body>
                <MessageAttribute>
                    <Name>test_attribute_name</Name>
                    <Value>
                        <DataType>String</DataType>
                        <StringValue>test_attribute_value</StringValue>
                    </Value>
                </MessageAttribute>
            </Message>
            </ReceiveMessageResult>
            <ResponseMetadata>
            <RequestId>
                b6633655-283d-45b4-aee4-4e84e0ae6afa
            </RequestId>
            </ResponseMetadata>
        </ReceiveMessageResponse>"#,
        )`
$DIR/rusoto/services/sqs/src/custom/custom_tests.rs: `.receive_message(request)`
$DIR/rusoto/services/sqs/src/custom/custom_tests.rs: `.pop()`
$DIR/rusoto/services/sqs/src/custom/custom_tests.rs: `.insert(
        "test_attribute_name".to_owned(),
        MessageAttributeValue {
            string_value: Some("test_attribute_value".to_owned()),
            data_type: "String".to_owned(),
            ..Default::default()
        },
    )`
{"generated::protocol_tests::test_parse_error_sqs_delete_queue", "generated::protocol_tests::test_parse_valid_sqs_add_permission", "generated::protocol_tests::test_parse_valid_sqs_change_message_visibility_batch", "generated::protocol_tests::test_parse_valid_sqs_create_queue", "generated::protocol_tests::test_parse_valid_sqs_delete_message_batch", "generated::protocol_tests::test_parse_valid_sqs_get_queue_attributes", "generated::protocol_tests::test_parse_valid_sqs_get_queue_url", "generated::protocol_tests::test_parse_valid_sqs_list_queues", "generated::protocol_tests::test_parse_valid_sqs_receive_message", "generated::protocol_tests::test_parse_valid_sqs_send_message", "generated::protocol_tests::test_parse_valid_sqs_send_message_batch"}
$DIR/rusoto/services/sqs/src/generated.rs: `params.put("Action", operation_name);`
$DIR/rusoto/services/sqs/src/generated.rs: `params.put("Version", "2012-11-05");`
{"generated::protocol_tests::test_parse_valid_sqs_add_permission"}
$DIR/rusoto/services/sqs/src/generated.rs: `AddPermissionRequestSerializer::serialize(&mut params, "", &input);`
$DIR/rusoto/services/sqs/src/generated.rs: `request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));`
$DIR/rusoto/services/sqs/src/generated.rs: `request.set_content_type("application/x-www-form-urlencoded".to_owned());`
$DIR/rusoto/services/sqs/src/generated.rs: `std::mem::drop(response);`
{"generated::protocol_tests::test_parse_valid_sqs_change_message_visibility_batch"}
$DIR/rusoto/services/sqs/src/generated.rs: `ChangeMessageVisibilityBatchRequestSerializer::serialize(&mut params, "", &input);`
$DIR/rusoto/services/sqs/src/generated.rs: `request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));`
$DIR/rusoto/services/sqs/src/generated.rs: `request.set_content_type("application/x-www-form-urlencoded".to_owned());`
$DIR/rusoto/services/sqs/src/generated.rs: `xml_util::start_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/sqs/src/generated.rs: `skip_tree(stack);`
$DIR/rusoto/services/sqs/src/generated.rs: `xml_util::end_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/sqs/src/generated.rs: `drop(response);`
{"generated::protocol_tests::test_parse_valid_sqs_create_queue"}
$DIR/rusoto/services/sqs/src/generated.rs: `CreateQueueRequestSerializer::serialize(&mut params, "", &input);`
$DIR/rusoto/services/sqs/src/generated.rs: `request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));`
$DIR/rusoto/services/sqs/src/generated.rs: `request.set_content_type("application/x-www-form-urlencoded".to_owned());`
$DIR/rusoto/services/sqs/src/generated.rs: `xml_util::start_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/sqs/src/generated.rs: `skip_tree(stack);`
$DIR/rusoto/services/sqs/src/generated.rs: `xml_util::end_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/sqs/src/generated.rs: `drop(response);`
{"generated::protocol_tests::test_parse_valid_sqs_delete_message_batch"}
$DIR/rusoto/services/sqs/src/generated.rs: `DeleteMessageBatchRequestSerializer::serialize(&mut params, "", &input);`
$DIR/rusoto/services/sqs/src/generated.rs: `request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));`
$DIR/rusoto/services/sqs/src/generated.rs: `request.set_content_type("application/x-www-form-urlencoded".to_owned());`
$DIR/rusoto/services/sqs/src/generated.rs: `xml_util::start_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/sqs/src/generated.rs: `skip_tree(stack);`
$DIR/rusoto/services/sqs/src/generated.rs: `xml_util::end_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/sqs/src/generated.rs: `drop(response);`
{"generated::protocol_tests::test_parse_error_sqs_delete_queue"}
$DIR/rusoto/services/sqs/src/generated.rs: `DeleteQueueRequestSerializer::serialize(&mut params, "", &input);`
$DIR/rusoto/services/sqs/src/generated.rs: `request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));`
$DIR/rusoto/services/sqs/src/generated.rs: `request.set_content_type("application/x-www-form-urlencoded".to_owned());`
$DIR/rusoto/services/sqs/src/generated.rs: `std::mem::drop(response);`
{"generated::protocol_tests::test_parse_valid_sqs_get_queue_attributes"}
$DIR/rusoto/services/sqs/src/generated.rs: `GetQueueAttributesRequestSerializer::serialize(&mut params, "", &input);`
$DIR/rusoto/services/sqs/src/generated.rs: `request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));`
$DIR/rusoto/services/sqs/src/generated.rs: `request.set_content_type("application/x-www-form-urlencoded".to_owned());`
$DIR/rusoto/services/sqs/src/generated.rs: `xml_util::start_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/sqs/src/generated.rs: `skip_tree(stack);`
$DIR/rusoto/services/sqs/src/generated.rs: `xml_util::end_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/sqs/src/generated.rs: `drop(response);`
{"generated::protocol_tests::test_parse_valid_sqs_get_queue_url"}
$DIR/rusoto/services/sqs/src/generated.rs: `GetQueueUrlRequestSerializer::serialize(&mut params, "", &input);`
$DIR/rusoto/services/sqs/src/generated.rs: `request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));`
$DIR/rusoto/services/sqs/src/generated.rs: `request.set_content_type("application/x-www-form-urlencoded".to_owned());`
$DIR/rusoto/services/sqs/src/generated.rs: `xml_util::start_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/sqs/src/generated.rs: `skip_tree(stack);`
$DIR/rusoto/services/sqs/src/generated.rs: `xml_util::end_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/sqs/src/generated.rs: `drop(response);`
{"generated::protocol_tests::test_parse_valid_sqs_list_queues"}
$DIR/rusoto/services/sqs/src/generated.rs: `ListQueuesRequestSerializer::serialize(&mut params, "", &input);`
$DIR/rusoto/services/sqs/src/generated.rs: `request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));`
$DIR/rusoto/services/sqs/src/generated.rs: `request.set_content_type("application/x-www-form-urlencoded".to_owned());`
$DIR/rusoto/services/sqs/src/generated.rs: `xml_util::start_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/sqs/src/generated.rs: `skip_tree(stack);`
$DIR/rusoto/services/sqs/src/generated.rs: `xml_util::end_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/sqs/src/generated.rs: `drop(response);`
{"generated::protocol_tests::test_parse_valid_sqs_receive_message"}
$DIR/rusoto/services/sqs/src/generated.rs: `ReceiveMessageRequestSerializer::serialize(&mut params, "", &input);`
$DIR/rusoto/services/sqs/src/generated.rs: `request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));`
$DIR/rusoto/services/sqs/src/generated.rs: `request.set_content_type("application/x-www-form-urlencoded".to_owned());`
$DIR/rusoto/services/sqs/src/generated.rs: `xml_util::start_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/sqs/src/generated.rs: `skip_tree(stack);`
$DIR/rusoto/services/sqs/src/generated.rs: `xml_util::end_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/sqs/src/generated.rs: `drop(response);`
{"generated::protocol_tests::test_parse_valid_sqs_send_message"}
$DIR/rusoto/services/sqs/src/generated.rs: `SendMessageRequestSerializer::serialize(&mut params, "", &input);`
$DIR/rusoto/services/sqs/src/generated.rs: `request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));`
$DIR/rusoto/services/sqs/src/generated.rs: `request.set_content_type("application/x-www-form-urlencoded".to_owned());`
$DIR/rusoto/services/sqs/src/generated.rs: `xml_util::start_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/sqs/src/generated.rs: `skip_tree(stack);`
$DIR/rusoto/services/sqs/src/generated.rs: `xml_util::end_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/sqs/src/generated.rs: `drop(response);`
{"generated::protocol_tests::test_parse_valid_sqs_send_message_batch"}
$DIR/rusoto/services/sqs/src/generated.rs: `SendMessageBatchRequestSerializer::serialize(&mut params, "", &input);`
$DIR/rusoto/services/sqs/src/generated.rs: `request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));`
$DIR/rusoto/services/sqs/src/generated.rs: `request.set_content_type("application/x-www-form-urlencoded".to_owned());`
$DIR/rusoto/services/sqs/src/generated.rs: `xml_util::start_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/sqs/src/generated.rs: `skip_tree(stack);`
$DIR/rusoto/services/sqs/src/generated.rs: `xml_util::end_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/sqs/src/generated.rs: `drop(response);`
{"generated::protocol_tests::test_parse_error_sqs_delete_queue", "generated::protocol_tests::test_parse_valid_sqs_add_permission", "generated::protocol_tests::test_parse_valid_sqs_change_message_visibility_batch", "generated::protocol_tests::test_parse_valid_sqs_create_queue", "generated::protocol_tests::test_parse_valid_sqs_delete_message_batch", "generated::protocol_tests::test_parse_valid_sqs_get_queue_attributes", "generated::protocol_tests::test_parse_valid_sqs_get_queue_url", "generated::protocol_tests::test_parse_valid_sqs_list_queues", "generated::protocol_tests::test_parse_valid_sqs_receive_message", "generated::protocol_tests::test_parse_valid_sqs_send_message", "generated::protocol_tests::test_parse_valid_sqs_send_message_batch"}
$DIR/rusoto/services/sqs/src/generated.rs: `.put("Action", operation_name)`
$DIR/rusoto/services/sqs/src/generated.rs: `.put("Version", "2012-11-05")`
$DIR/rusoto/services/sqs/src/generated.rs: `.client.sign_and_dispatch(request)`
$DIR/rusoto/services/sqs/src/generated.rs: `.status.is_success()`
$DIR/rusoto/services/sqs/src/generated.rs: `.buffer()`
$DIR/rusoto/services/sqs/src/generated.rs: `.map_err(RusotoError::HttpDispatch)`
{"generated::protocol_tests::test_parse_valid_sqs_add_permission"}
$DIR/rusoto/services/sqs/src/generated.rs: `.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()))`
$DIR/rusoto/services/sqs/src/generated.rs: `.set_content_type("application/x-www-form-urlencoded".to_owned())`
{"generated::protocol_tests::test_parse_valid_sqs_change_message_visibility_batch"}
$DIR/rusoto/services/sqs/src/generated.rs: `.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()))`
$DIR/rusoto/services/sqs/src/generated.rs: `.set_content_type("application/x-www-form-urlencoded".to_owned())`
{"generated::protocol_tests::test_parse_valid_sqs_create_queue"}
$DIR/rusoto/services/sqs/src/generated.rs: `.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()))`
$DIR/rusoto/services/sqs/src/generated.rs: `.set_content_type("application/x-www-form-urlencoded".to_owned())`
{"generated::protocol_tests::test_parse_valid_sqs_delete_message_batch"}
$DIR/rusoto/services/sqs/src/generated.rs: `.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()))`
$DIR/rusoto/services/sqs/src/generated.rs: `.set_content_type("application/x-www-form-urlencoded".to_owned())`
{"generated::protocol_tests::test_parse_error_sqs_delete_queue"}
$DIR/rusoto/services/sqs/src/generated.rs: `.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()))`
$DIR/rusoto/services/sqs/src/generated.rs: `.set_content_type("application/x-www-form-urlencoded".to_owned())`
{"generated::protocol_tests::test_parse_valid_sqs_get_queue_attributes"}
$DIR/rusoto/services/sqs/src/generated.rs: `.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()))`
$DIR/rusoto/services/sqs/src/generated.rs: `.set_content_type("application/x-www-form-urlencoded".to_owned())`
{"generated::protocol_tests::test_parse_valid_sqs_get_queue_url"}
$DIR/rusoto/services/sqs/src/generated.rs: `.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()))`
$DIR/rusoto/services/sqs/src/generated.rs: `.set_content_type("application/x-www-form-urlencoded".to_owned())`
{"generated::protocol_tests::test_parse_valid_sqs_list_queues"}
$DIR/rusoto/services/sqs/src/generated.rs: `.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()))`
$DIR/rusoto/services/sqs/src/generated.rs: `.set_content_type("application/x-www-form-urlencoded".to_owned())`
{"generated::protocol_tests::test_parse_valid_sqs_receive_message"}
$DIR/rusoto/services/sqs/src/generated.rs: `.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()))`
$DIR/rusoto/services/sqs/src/generated.rs: `.set_content_type("application/x-www-form-urlencoded".to_owned())`
{"generated::protocol_tests::test_parse_valid_sqs_send_message"}
$DIR/rusoto/services/sqs/src/generated.rs: `.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()))`
$DIR/rusoto/services/sqs/src/generated.rs: `.set_content_type("application/x-www-form-urlencoded".to_owned())`
{"generated::protocol_tests::test_parse_valid_sqs_send_message_batch"}
$DIR/rusoto/services/sqs/src/generated.rs: `.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()))`
$DIR/rusoto/services/sqs/src/generated.rs: `.set_content_type("application/x-www-form-urlencoded".to_owned())`
{"generated::protocol_tests::test_parse_error_sqs_delete_queue"}
$DIR/rusoto/services/sqs/src/generated.rs: `.with_body(&mock_response)`
{"generated::protocol_tests::test_parse_valid_sqs_add_permission"}
$DIR/rusoto/services/sqs/src/generated.rs: `.with_body(&mock_response)`
{"generated::protocol_tests::test_parse_valid_sqs_change_message_visibility_batch"}
$DIR/rusoto/services/sqs/src/generated.rs: `.with_body(&mock_response)`
{"generated::protocol_tests::test_parse_valid_sqs_create_queue"}
$DIR/rusoto/services/sqs/src/generated.rs: `.with_body(&mock_response)`
{"generated::protocol_tests::test_parse_valid_sqs_delete_message_batch"}
$DIR/rusoto/services/sqs/src/generated.rs: `.with_body(&mock_response)`
{"generated::protocol_tests::test_parse_valid_sqs_get_queue_attributes"}
$DIR/rusoto/services/sqs/src/generated.rs: `.with_body(&mock_response)`
{"generated::protocol_tests::test_parse_valid_sqs_get_queue_url"}
$DIR/rusoto/services/sqs/src/generated.rs: `.with_body(&mock_response)`
{"generated::protocol_tests::test_parse_valid_sqs_list_queues"}
$DIR/rusoto/services/sqs/src/generated.rs: `.with_body(&mock_response)`
{"generated::protocol_tests::test_parse_valid_sqs_receive_message"}
$DIR/rusoto/services/sqs/src/generated.rs: `.with_body(&mock_response)`
{"generated::protocol_tests::test_parse_valid_sqs_send_message_batch"}
$DIR/rusoto/services/sqs/src/generated.rs: `.with_body(&mock_response)`
{"generated::protocol_tests::test_parse_valid_sqs_send_message"}
$DIR/rusoto/services/sqs/src/generated.rs: `.with_body(&mock_response)`
{"custom::credential::sts_futures_are_send"}
$DIR/rusoto/services/sts/src/custom/credential.rs: `is_send::<StsSessionCredentialsProvider>();`
$DIR/rusoto/services/sts/src/custom/credential.rs: `is_send::<StsAssumeRoleSessionCredentialsProvider>();`
{"custom::web_identity::tests::from_k8s_env"}
$DIR/rusoto/services/sts/src/custom/web_identity.rs: `writeln!(file, "{}", TOKEN_VALUE)?;`
$DIR/rusoto/services/sts/src/custom/web_identity.rs: `.path()`
$DIR/rusoto/services/sts/src/custom/web_identity.rs: `.to_string_lossy()`
{"generated::protocol_tests::test_parse_error_sts_get_session_token", "generated::protocol_tests::test_parse_valid_sts_get_session_token"}
$DIR/rusoto/services/sts/src/generated.rs: `params.put("Action", operation_name);`
$DIR/rusoto/services/sts/src/generated.rs: `params.put("Version", "2011-06-15");`
$DIR/rusoto/services/sts/src/generated.rs: `GetSessionTokenRequestSerializer::serialize(&mut params, "", &input);`
$DIR/rusoto/services/sts/src/generated.rs: `request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));`
$DIR/rusoto/services/sts/src/generated.rs: `request.set_content_type("application/x-www-form-urlencoded".to_owned());`
$DIR/rusoto/services/sts/src/generated.rs: `xml_util::start_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/sts/src/generated.rs: `skip_tree(stack);`
$DIR/rusoto/services/sts/src/generated.rs: `xml_util::end_element(actual_tag_name, stack)?;`
$DIR/rusoto/services/sts/src/generated.rs: `drop(response);`
$DIR/rusoto/services/sts/src/generated.rs: `.put("Action", operation_name)`
$DIR/rusoto/services/sts/src/generated.rs: `.put("Version", "2011-06-15")`
$DIR/rusoto/services/sts/src/generated.rs: `.client.sign_and_dispatch(request)`
$DIR/rusoto/services/sts/src/generated.rs: `.status.is_success()`
$DIR/rusoto/services/sts/src/generated.rs: `.buffer()`
$DIR/rusoto/services/sts/src/generated.rs: `.map_err(RusotoError::HttpDispatch)`
$DIR/rusoto/services/sts/src/generated.rs: `.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()))`
$DIR/rusoto/services/sts/src/generated.rs: `.set_content_type("application/x-www-form-urlencoded".to_owned())`
{"generated::protocol_tests::test_parse_error_sts_get_session_token"}
$DIR/rusoto/services/sts/src/generated.rs: `.with_body(&mock_response)`
{"generated::protocol_tests::test_parse_valid_sts_get_session_token"}
$DIR/rusoto/services/sts/src/generated.rs: `.with_body(&mock_response)`
{"region::tests::region_serialize_deserialize"}
$DIR/rusoto/signature/src/region.rs: `assert_tokens(&Region::ApEast1, &tokens_for_region("ap-east-1"));`
$DIR/rusoto/signature/src/region.rs: `assert_tokens(&Region::ApNortheast1, &tokens_for_region("ap-northeast-1"));`
$DIR/rusoto/signature/src/region.rs: `assert_tokens(&Region::ApNortheast2, &tokens_for_region("ap-northeast-2"));`
$DIR/rusoto/signature/src/region.rs: `assert_tokens(&Region::ApNortheast3, &tokens_for_region("ap-northeast-3"));`
$DIR/rusoto/signature/src/region.rs: `assert_tokens(&Region::ApSouth1, &tokens_for_region("ap-south-1"));`
$DIR/rusoto/signature/src/region.rs: `assert_tokens(&Region::ApSoutheast1, &tokens_for_region("ap-southeast-1"));`
$DIR/rusoto/signature/src/region.rs: `assert_tokens(&Region::ApSoutheast2, &tokens_for_region("ap-southeast-2"));`
$DIR/rusoto/signature/src/region.rs: `assert_tokens(&Region::ApSoutheast3, &tokens_for_region("ap-southeast-3"));`
$DIR/rusoto/signature/src/region.rs: `assert_tokens(&Region::CaCentral1, &tokens_for_region("ca-central-1"));`
$DIR/rusoto/signature/src/region.rs: `assert_tokens(&Region::EuCentral1, &tokens_for_region("eu-central-1"));`
$DIR/rusoto/signature/src/region.rs: `assert_tokens(&Region::EuWest1, &tokens_for_region("eu-west-1"));`
$DIR/rusoto/signature/src/region.rs: `assert_tokens(&Region::EuWest2, &tokens_for_region("eu-west-2"));`
$DIR/rusoto/signature/src/region.rs: `assert_tokens(&Region::EuWest3, &tokens_for_region("eu-west-3"));`
$DIR/rusoto/signature/src/region.rs: `assert_tokens(&Region::EuNorth1, &tokens_for_region("eu-north-1"));`
$DIR/rusoto/signature/src/region.rs: `assert_tokens(&Region::EuSouth1, &tokens_for_region("eu-south-1"));`
$DIR/rusoto/signature/src/region.rs: `assert_tokens(&Region::MeSouth1, &tokens_for_region("me-south-1"));`
$DIR/rusoto/signature/src/region.rs: `assert_tokens(&Region::SaEast1, &tokens_for_region("sa-east-1"));`
$DIR/rusoto/signature/src/region.rs: `assert_tokens(&Region::UsEast1, &tokens_for_region("us-east-1"));`
$DIR/rusoto/signature/src/region.rs: `assert_tokens(&Region::UsEast2, &tokens_for_region("us-east-2"));`
$DIR/rusoto/signature/src/region.rs: `assert_tokens(&Region::UsWest1, &tokens_for_region("us-west-1"));`
$DIR/rusoto/signature/src/region.rs: `assert_tokens(&Region::UsWest2, &tokens_for_region("us-west-2"));`
$DIR/rusoto/signature/src/region.rs: `assert_tokens(&Region::UsGovEast1, &tokens_for_region("us-gov-east-1"));`
$DIR/rusoto/signature/src/region.rs: `assert_tokens(&Region::UsGovWest1, &tokens_for_region("us-gov-west-1"));`
$DIR/rusoto/signature/src/region.rs: `assert_tokens(&Region::CnNorth1, &tokens_for_region("cn-north-1"));`
$DIR/rusoto/signature/src/region.rs: `assert_tokens(&Region::CnNorthwest1, &tokens_for_region("cn-northwest-1"));`
{"region::tests::region_serialize_deserialize_custom"}
$DIR/rusoto/signature/src/region.rs: `assert_tokens(
            &custom_region,
            &[
                Token::Tuple { len: 2 },
                Token::String("eu-east-1"),
                Token::Some,
                Token::String("http://localhost:8000"),
                Token::TupleEnd,
            ],
        );`
{"signature::tests::convert_request", "signature::tests::path_percent_encoded", "signature::tests::x_amz_content_sha256_header_is_signed"}
$DIR/rusoto/signature/src/signature.rs: `key_lower.make_ascii_lowercase();`
$DIR/rusoto/signature/src/signature.rs: `self.headers.entry(key_lower).or_default().push(value_vec);`
{"signature::tests::query_percent_encoded", "signature::tests::query_string_encoding_outliers"}
$DIR/rusoto/signature/src/signature.rs: `self.params.insert(key.into(), Some(value.into()));`
{"signature::tests::convert_request", "signature::tests::path_percent_encoded", "signature::tests::x_amz_content_sha256_header_is_signed"}
$DIR/rusoto/signature/src/signature.rs: `self.complement();`
$DIR/rusoto/signature/src/signature.rs: `self.remove_header("x-amz-date");`
$DIR/rusoto/signature/src/signature.rs: `self.remove_header("X-Amz-Security-Token");`
$DIR/rusoto/signature/src/signature.rs: `self.remove_header("x-amz-content-sha256");`
$DIR/rusoto/signature/src/signature.rs: `self.remove_header("authorization");`
{"signature::tests::convert_request"}
$DIR/rusoto/signature/src/signature.rs: `headers.append(&name, value);`
$DIR/rusoto/signature/src/signature.rs: `final_uri = final_uri + &format!("?{}", self.canonical_query_string());`
$DIR/rusoto/signature/src/signature.rs: `debug!(
                "Full request: \n method: {}\n final_uri: {}\n payload: {}\nHeaders:\n",
                method, final_uri, payload
            );`
$DIR/rusoto/signature/src/signature.rs: `debug!("{}:{:?}", h.as_str(), v);`
$DIR/rusoto/signature/src/signature.rs: `*request.headers_mut() = headers;`
{"signature::tests::query_encoding_escaped_chars", "signature::tests::query_string_literal_plus"}
$DIR/rusoto/signature/src/signature.rs: `output.push_str("&");`
$DIR/rusoto/signature/src/signature.rs: `output.push_str(&encode_uri_strict(&key));`
$DIR/rusoto/signature/src/signature.rs: `output.push_str("=");`
$DIR/rusoto/signature/src/signature.rs: `output.push_str(&encode_uri_strict(&unwrapped_val));`
{"signature::tests::query_encoding_escaped_chars"}
$DIR/rusoto/signature/src/signature.rs: `params.insert("k".to_owned(), Some((code as char).to_string()));`
{"signature::tests::query_string_literal_plus"}
$DIR/rusoto/signature/src/signature.rs: `params.insert("key".into(), Some("val+ue".into()));`
{"signature::tests::signed_headers_unsigned_first"}
$DIR/rusoto/signature/src/signature.rs: `headers.insert("content-length".to_owned(), vec![vec![]]);`
$DIR/rusoto/signature/src/signature.rs: `headers.insert("content-type".to_owned(), vec![vec![]]);`
$DIR/rusoto/signature/src/signature.rs: `headers.insert("x-amz-date".to_owned(), vec![vec![]]);`
{"signature::tests::signed_headers_unsigned_in_center"}
$DIR/rusoto/signature/src/signature.rs: `headers.insert("cache-control".to_owned(), vec![vec![]]);`
$DIR/rusoto/signature/src/signature.rs: `headers.insert("content-length".to_owned(), vec![vec![]]);`
$DIR/rusoto/signature/src/signature.rs: `headers.insert("content-type".to_owned(), vec![vec![]]);`
$DIR/rusoto/signature/src/signature.rs: `headers.insert("host".to_owned(), vec![vec![]]);`
$DIR/rusoto/signature/src/signature.rs: `headers.insert("x-amz-date".to_owned(), vec![vec![]]);`
{"signature::tests::signed_headers_unsigned_last"}
$DIR/rusoto/signature/src/signature.rs: `headers.insert("cache-control".to_owned(), vec![vec![]]);`
$DIR/rusoto/signature/src/signature.rs: `headers.insert("content-length".to_owned(), vec![vec![]]);`
{"signature::tests::convert_request", "signature::tests::path_percent_encoded", "signature::tests::x_amz_content_sha256_header_is_signed"}
$DIR/rusoto/signature/src/signature.rs: `.make_ascii_lowercase()`
$DIR/rusoto/signature/src/signature.rs: `.headers.entry(key_lower)`
$DIR/rusoto/signature/src/signature.rs: `.or_default()`
$DIR/rusoto/signature/src/signature.rs: `.push(value_vec)`
{"signature::tests::query_percent_encoded", "signature::tests::query_string_encoding_outliers"}
$DIR/rusoto/signature/src/signature.rs: `.params.insert(key.into(), Some(value.into()))`
$DIR/rusoto/signature/src/signature.rs: `.into()`
$DIR/rusoto/signature/src/signature.rs: `.into()`
{"signature::tests::convert_request", "signature::tests::path_percent_encoded", "signature::tests::x_amz_content_sha256_header_is_signed"}
$DIR/rusoto/signature/src/signature.rs: `.complement()`
$DIR/rusoto/signature/src/signature.rs: `.remove_header("x-amz-date")`
$DIR/rusoto/signature/src/signature.rs: `.format("%Y%m%dT%H%M%SZ")`
$DIR/rusoto/signature/src/signature.rs: `.token()`
$DIR/rusoto/signature/src/signature.rs: `.remove_header("X-Amz-Security-Token")`
$DIR/rusoto/signature/src/signature.rs: `.remove_header("x-amz-content-sha256")`
$DIR/rusoto/signature/src/signature.rs: `.aws_secret_access_key()`
$DIR/rusoto/signature/src/signature.rs: `.date()`
$DIR/rusoto/signature/src/signature.rs: `.naive_utc()`
$DIR/rusoto/signature/src/signature.rs: `.region_for_service()`
$DIR/rusoto/signature/src/signature.rs: `.remove_header("authorization")`
{"signature::tests::convert_request"}
$DIR/rusoto/signature/src/signature.rs: `.try_fold::<_, _, Result<_, Self::Error>>(HeaderMap::new(), |mut headers, (k, v)| {
                let name = HeaderName::from_bytes(k.as_bytes())?;
                for v in v.iter() {
                    let value = HeaderValue::from_bytes(v)?;
                    headers.append(&name, value);
                }
                Ok(headers)
            })`
$DIR/rusoto/signature/src/signature.rs: `.append(&name, value)`
$DIR/rusoto/signature/src/signature.rs: `.is_empty()`
$DIR/rusoto/signature/src/signature.rs: `.uri(final_uri)`
$DIR/rusoto/signature/src/signature.rs: `.body(body)`
$DIR/rusoto/signature/src/signature.rs: `.headers_mut()`
{"signature::tests::query_encoding_escaped_chars", "signature::tests::query_string_literal_plus"}
$DIR/rusoto/signature/src/signature.rs: `.is_empty()`
$DIR/rusoto/signature/src/signature.rs: `.is_empty()`
$DIR/rusoto/signature/src/signature.rs: `.push_str("&")`
$DIR/rusoto/signature/src/signature.rs: `.push_str(&encode_uri_strict(&key))`
$DIR/rusoto/signature/src/signature.rs: `.push_str("=")`
$DIR/rusoto/signature/src/signature.rs: `.push_str(&encode_uri_strict(&unwrapped_val))`
{"signature::tests::query_encoding_escaped_chars"}
$DIR/rusoto/signature/src/signature.rs: `.insert("k".to_owned(), Some((code as char).to_string()))`
{"signature::tests::query_string_literal_plus"}
$DIR/rusoto/signature/src/signature.rs: `.insert("key".into(), Some("val+ue".into()))`
$DIR/rusoto/signature/src/signature.rs: `.into()`
$DIR/rusoto/signature/src/signature.rs: `.into()`
{"signature::tests::signed_headers_unsigned_first"}
$DIR/rusoto/signature/src/signature.rs: `.insert("content-length".to_owned(), vec![vec![]])`
$DIR/rusoto/signature/src/signature.rs: `.insert("content-type".to_owned(), vec![vec![]])`
$DIR/rusoto/signature/src/signature.rs: `.insert("x-amz-date".to_owned(), vec![vec![]])`
{"signature::tests::signed_headers_unsigned_in_center"}
$DIR/rusoto/signature/src/signature.rs: `.insert("cache-control".to_owned(), vec![vec![]])`
$DIR/rusoto/signature/src/signature.rs: `.insert("content-length".to_owned(), vec![vec![]])`
$DIR/rusoto/signature/src/signature.rs: `.insert("content-type".to_owned(), vec![vec![]])`
$DIR/rusoto/signature/src/signature.rs: `.insert("host".to_owned(), vec![vec![]])`
$DIR/rusoto/signature/src/signature.rs: `.insert("x-amz-date".to_owned(), vec![vec![]])`
{"signature::tests::signed_headers_unsigned_last"}
$DIR/rusoto/signature/src/signature.rs: `.insert("cache-control".to_owned(), vec![vec![]])`
$DIR/rusoto/signature/src/signature.rs: `.insert("content-length".to_owned(), vec![vec![]])`
{"signature::tests::x_amz_content_sha256_header_is_signed"}
$DIR/rusoto/signature/src/signature.rs: `.headers.get("authorization")`
{"commands::generate::codegen::rest_request_generator::tests::generate_static_param_strings_parses_mixed_params"}
$DIR/service_crategen/src/commands/generate/codegen/rest_request_generator.rs: `.split('&')`
$DIR/service_crategen/src/commands/generate/codegen/rest_request_generator.rs: `.find('=')`
$DIR/service_crategen/src/commands/generate/codegen/rest_request_generator.rs: `.split('=')`
$DIR/service_crategen/src/commands/generate/codegen/rest_request_generator.rs: `.collect()`
$DIR/service_crategen/src/commands/generate/codegen/rest_request_generator.rs: `.push(format!("params.put_key(\"{}\");", param))`
$DIR/service_crategen/src/commands/generate/codegen/rest_request_generator.rs: `.replace("+", "")`
$DIR/service_crategen/src/commands/generate/codegen/rest_request_generator.rs: `.split('?')`
$DIR/service_crategen/src/commands/generate/codegen/rest_request_generator.rs: `.collect()`
$DIR/service_crategen/src/commands/generate/codegen/rest_request_generator.rs: `.len()`
