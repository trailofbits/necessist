$DIR/integration_tests/tests/acm.rs: `.list_certificates(request)`
$DIR/integration_tests/tests/acmpca.rs: `.list_certificate_authorities(request)`
$DIR/integration_tests/tests/alexaforbusiness.rs: `.list_skills(request)`
$DIR/integration_tests/tests/amplify.rs: `.list_apps(Default::default())`
$DIR/integration_tests/tests/apigateway.rs: `.get_rest_apis(request)`
$DIR/integration_tests/tests/apigatewaymanagementapi.rs: `.post_to_connection(PostToConnectionRequest {
            connection_id: "bogus".into(),
            ..PostToConnectionRequest::default()
        })`
$DIR/integration_tests/tests/apigatewaymanagementapi.rs: `.into()`
$DIR/integration_tests/tests/apigatewayv2.rs: `.get_apis(Default::default())`
$DIR/integration_tests/tests/application-autocaling.rs: `.describe_scaling_policies(request)`
$DIR/integration_tests/tests/appmesh.rs: `.list_meshes(ListMeshesInput::default())`
$DIR/integration_tests/tests/appstream.rs: `.describe_fleets(request)`
$DIR/integration_tests/tests/appsync.rs: `.list_graphql_apis(request)`
$DIR/integration_tests/tests/athena.rs: `.list_named_queries(request)`
$DIR/integration_tests/tests/autoscaling-plans.rs: `.describe_scaling_plans(request)`
$DIR/integration_tests/tests/autoscaling.rs: `.describe_auto_scaling_groups(request)`
$DIR/integration_tests/tests/batch.rs: `.describe_job_definitions(request)`
$DIR/integration_tests/tests/budgets.rs: `.describe_budgets(request)`
$DIR/integration_tests/tests/chime.rs: `.list_accounts(request)`
$DIR/integration_tests/tests/cloud9.rs: `.list_environments(request)`
$DIR/integration_tests/tests/clouddirectory.rs: `.list_directories(request)`
$DIR/integration_tests/tests/cloudformation.rs: `.list_stacks(request)`
$DIR/integration_tests/tests/cloudformation.rs: `.list_stacks(request)`
$DIR/integration_tests/tests/cloudfront.rs: `.list_distributions(request)`
$DIR/integration_tests/tests/cloudhsm.rs: `.list_hapgs(request)`
$DIR/integration_tests/tests/cloudhsm.rs: `.contains("This service is unavailable.")`
$DIR/integration_tests/tests/cloudhsm.rs: `.list_hsms(request)`
$DIR/integration_tests/tests/cloudhsm.rs: `.contains("This service is unavailable.")`
$DIR/integration_tests/tests/cloudhsm.rs: `.list_luna_clients(request)`
$DIR/integration_tests/tests/cloudhsm.rs: `.contains("This service is unavailable.")`
$DIR/integration_tests/tests/cloudhsmv2.rs: `.describe_clusters(request)`
$DIR/integration_tests/tests/cloudsearch.rs: `.describe_domains(request)`
$DIR/integration_tests/tests/cloudtrail.rs: `.describe_trails(request)`
$DIR/integration_tests/tests/cloudwatch.rs: `.put_metric_data(request)`
$DIR/integration_tests/tests/codebuild.rs: `.list_projects(request)`
$DIR/integration_tests/tests/codecommit.rs: `.list_repositories(request)`
$DIR/integration_tests/tests/codedeploy.rs: `.list_applications(request)`
$DIR/integration_tests/tests/codepipeline.rs: `.list_pipelines(request)`
$DIR/integration_tests/tests/codestar.rs: `.list_projects(request)`
$DIR/integration_tests/tests/cognito-idp.rs: `.list_user_pools(request)`
$DIR/integration_tests/tests/cognito-sync.rs: `.list_identity_pool_usage(request)`
$DIR/integration_tests/tests/cognitoidentity.rs: `request.max_results = 10;`
$DIR/integration_tests/tests/cognitoidentity.rs: `request.max_results = 10;`
$DIR/integration_tests/tests/cognitoidentity.rs: `request.identity_pool_id = "invalid".to_string();`
$DIR/integration_tests/tests/cognitoidentity.rs: `roles.insert("authenticated".to_string(), role.arn.clone());`
$DIR/integration_tests/tests/cognitoidentity.rs: `roles.insert("unauthenticated".to_string(), role.arn.clone());`
$DIR/integration_tests/tests/cognitoidentity.rs: `logins.insert(developper_provider_name.to_string(), login.to_string());`
$DIR/integration_tests/tests/cognitoidentity.rs: `sleep(Duration::from_secs(10)).await;`
$DIR/integration_tests/tests/cognitoidentity.rs: `.list_identity_pools(request)`
$DIR/integration_tests/tests/cognitoidentity.rs: `.list_identities(request)`
$DIR/integration_tests/tests/cognitoidentity.rs: `.nanosecond()`
$DIR/integration_tests/tests/cognitoidentity.rs: `.create_identity_pool(create_identity_input)`
$DIR/integration_tests/tests/cognitoidentity.rs: `.replace("'", "\"")`
$DIR/integration_tests/tests/cognitoidentity.rs: `.create_role(input_create_role)`
$DIR/integration_tests/tests/cognitoidentity.rs: `.replace("'", "\"")`
$DIR/integration_tests/tests/cognitoidentity.rs: `.put_role_policy(role_policy_input)`
$DIR/integration_tests/tests/cognitoidentity.rs: `.insert("authenticated".to_string(), role.arn.clone())`
$DIR/integration_tests/tests/cognitoidentity.rs: `.insert("unauthenticated".to_string(), role.arn.clone())`
$DIR/integration_tests/tests/cognitoidentity.rs: `.set_identity_pool_roles(roles_input)`
$DIR/integration_tests/tests/cognitoidentity.rs: `.insert(developper_provider_name.to_string(), login.to_string())`
$DIR/integration_tests/tests/cognitoidentity.rs: `.get_open_id_token_for_developer_identity(register_input)`
$DIR/integration_tests/tests/cognitoidentity.rs: `.identity_id(response.identity_id.unwrap())`
$DIR/integration_tests/tests/cognitoidentity.rs: `.region(region.clone())`
$DIR/integration_tests/tests/cognitoidentity.rs: `.login("cognito-identity.amazonaws.com".to_string(), response.token.unwrap())`
$DIR/integration_tests/tests/cognitoidentity.rs: `.build()`
$DIR/integration_tests/tests/cognitoidentity.rs: `.credentials()`
$DIR/integration_tests/tests/cognitoidentity.rs: `.delete_identity_pool(delete_identity_pool_input)`
$DIR/integration_tests/tests/cognitoidentity.rs: `.delete_role_policy(delete_policy_input)`
$DIR/integration_tests/tests/cognitoidentity.rs: `.delete_role(delete_role_input)`
$DIR/integration_tests/tests/comprehend.rs: `.detect_sentiment(request)`
$DIR/integration_tests/tests/comprehendmedical.rs: `.detect_phi(request)`
$DIR/integration_tests/tests/config.rs: `.describe_config_rules(request)`
$DIR/integration_tests/tests/config.rs: `.describe_delivery_channels(request)`
$DIR/integration_tests/tests/core.rs: `params.put("Action", "GetCallerIdentity");`
$DIR/integration_tests/tests/core.rs: `params.put("Version", "2011-06-15");`
$DIR/integration_tests/tests/core.rs: `request.set_params(params);`
$DIR/integration_tests/tests/core.rs: `request.add_header("x-test-header", "foobar");`
$DIR/integration_tests/tests/core.rs: `params.put("Action", "GetCallerIdentity");`
$DIR/integration_tests/tests/core.rs: `params.put("Version", "2011-06-15");`
$DIR/integration_tests/tests/core.rs: `request.set_params(params);`
$DIR/integration_tests/tests/core.rs: `params.put("Action", "GetCallerIdentity");`
$DIR/integration_tests/tests/core.rs: `params.put("Version", "2011-06-15");`
$DIR/integration_tests/tests/core.rs: `request.set_params(params);`
$DIR/integration_tests/tests/core.rs: `.credentials()`
$DIR/integration_tests/tests/core.rs: `.put("Action", "GetCallerIdentity")`
$DIR/integration_tests/tests/core.rs: `.put("Version", "2011-06-15")`
$DIR/integration_tests/tests/core.rs: `.set_params(params)`
$DIR/integration_tests/tests/core.rs: `.add_header("x-test-header", "foobar")`
$DIR/integration_tests/tests/core.rs: `.generate_presigned_url(&credentials, &std::time::Duration::from_secs(60), true)`
$DIR/integration_tests/tests/core.rs: `.get(&url)`
$DIR/integration_tests/tests/core.rs: `.header("x-test-header", "foobar")`
$DIR/integration_tests/tests/core.rs: `.send()`
$DIR/integration_tests/tests/core.rs: `.put("Action", "GetCallerIdentity")`
$DIR/integration_tests/tests/core.rs: `.put("Version", "2011-06-15")`
$DIR/integration_tests/tests/core.rs: `.set_params(params)`
$DIR/integration_tests/tests/core.rs: `.sign_and_dispatch(request)`
$DIR/integration_tests/tests/core.rs: `.put("Action", "GetCallerIdentity")`
$DIR/integration_tests/tests/core.rs: `.put("Version", "2011-06-15")`
$DIR/integration_tests/tests/core.rs: `.set_params(params)`
$DIR/integration_tests/tests/core.rs: `.sign_and_dispatch(request)`
$DIR/integration_tests/tests/cur.rs: `.describe_report_definitions(request)`
$DIR/integration_tests/tests/datapipeline.rs: `.list_pipelines(request)`
$DIR/integration_tests/tests/dax.rs: `.describe_clusters(request)`
$DIR/integration_tests/tests/devicefarm.rs: `.list_devices(request)`
$DIR/integration_tests/tests/directconnect.rs: `.describe_connections(request)`
$DIR/integration_tests/tests/directconnect.rs: `.describe_connections(request)`
$DIR/integration_tests/tests/directconnect.rs: `.describe_locations()`
$DIR/integration_tests/tests/directconnect.rs: `.describe_virtual_gateways()`
$DIR/integration_tests/tests/discovery.rs: `.describe_tags(request)`
$DIR/integration_tests/tests/discovery.rs: `.list_configurations(request)`
$DIR/integration_tests/tests/dms.rs: `.describe_endpoints(request)`
$DIR/integration_tests/tests/docdb.rs: `.describe_db_clusters(request)`
$DIR/integration_tests/tests/ds.rs: `request.directory_id = "d-11111aaaaa".to_string();`
$DIR/integration_tests/tests/ds.rs: `request.directory_id = "d-11111aaaaa".to_string();`
$DIR/integration_tests/tests/ds.rs: `.describe_trusts(request)`
$DIR/integration_tests/tests/ds.rs: `.describe_directories(request)`
$DIR/integration_tests/tests/ds.rs: `.describe_conditional_forwarders(request)`
$DIR/integration_tests/tests/ds.rs: `.describe_domain_controllers(request)`
$DIR/integration_tests/tests/ds.rs: `.describe_event_topics(request)`
$DIR/integration_tests/tests/dynamodb.rs: `.list_tables(request)`
$DIR/integration_tests/tests/dynamodb.rs: `.list_tables(request)`
$DIR/integration_tests/tests/dynamodbstreams.rs: `.list_streams(request)`
$DIR/integration_tests/tests/ec2-instance-connect.rs: `.into()`
$DIR/integration_tests/tests/ec2-instance-connect.rs: `.into()`
$DIR/integration_tests/tests/ec2-instance-connect.rs: `.into()`
$DIR/integration_tests/tests/ec2-instance-connect.rs: `.into()`
$DIR/integration_tests/tests/ec2-instance-connect.rs: `.send_ssh_public_key(request)`
$DIR/integration_tests/tests/ec2.rs: `req.instance_ids = Some(vec!["i-00000000".into(), "i-00000001".into()]);`
$DIR/integration_tests/tests/ec2.rs: `.describe_instances(req)`
$DIR/integration_tests/tests/ec2.rs: `.into()`
$DIR/integration_tests/tests/ec2.rs: `.create_snapshot(req)`
$DIR/integration_tests/tests/ec2.rs: `.create_tags(req)`
$DIR/integration_tests/tests/ecr.rs: `.describe_repositories(request)`
$DIR/integration_tests/tests/ecs.rs: `http_config_with_bigger_buffer.read_buf_size(1024 * 1024 * 2);`
$DIR/integration_tests/tests/ecs.rs: `.read_buf_size(1024 * 1024 * 2)`
$DIR/integration_tests/tests/ecs.rs: `.list_clusters(ListClustersRequest::default())`
$DIR/integration_tests/tests/ecs.rs: `.cluster_arns.unwrap_or(vec![])`
$DIR/integration_tests/tests/ecs.rs: `.list_clusters(ListClustersRequest {
            next_token: Some("bogus".to_owned()),
            ..Default::default()
        })`
$DIR/integration_tests/tests/efs.rs: `.describe_file_systems(request)`
$DIR/integration_tests/tests/eks.rs: `.list_clusters(request)`
$DIR/integration_tests/tests/elasticache.rs: `.describe_cache_clusters(request)`
$DIR/integration_tests/tests/elasticbeanstalk.rs: `.describe_applications(request)`
$DIR/integration_tests/tests/elastictranscoder.rs: `initialize().await;`
$DIR/integration_tests/tests/elastictranscoder.rs: `client.delete_bucket(&s3_client, &input_bucket).await;`
$DIR/integration_tests/tests/elastictranscoder.rs: `initialize().await;`
$DIR/integration_tests/tests/elastictranscoder.rs: `info!("Created preset with id: {:?}", &id);`
$DIR/integration_tests/tests/elastictranscoder.rs: `initialize().await;`
$DIR/integration_tests/tests/elastictranscoder.rs: `tokio::time::sleep(std::time::Duration::from_secs(2)).await;`
$DIR/integration_tests/tests/elastictranscoder.rs: `initialize().await;`
$DIR/integration_tests/tests/elastictranscoder.rs: `initialize().await;`
$DIR/integration_tests/tests/elastictranscoder.rs: `initialize().await;`
$DIR/integration_tests/tests/elastictranscoder.rs: `info!("Got list of presets.");`
$DIR/integration_tests/tests/elastictranscoder.rs: `info!("Preset: {:?}", preset.name);`
$DIR/integration_tests/tests/elastictranscoder.rs: `initialize().await;`
$DIR/integration_tests/tests/elastictranscoder.rs: `info!("Got preset: {:?}", preset.name);`
$DIR/integration_tests/tests/elastictranscoder.rs: `.create_s3_client()`
$DIR/integration_tests/tests/elastictranscoder.rs: `.create_bucket(&s3_client)`
$DIR/integration_tests/tests/elastictranscoder.rs: `.create_bucket(&s3_client)`
$DIR/integration_tests/tests/elastictranscoder.rs: `.create_pipeline(request)`
$DIR/integration_tests/tests/elastictranscoder.rs: `.delete_bucket(&s3_client, &input_bucket)`
$DIR/integration_tests/tests/elastictranscoder.rs: `.create_preset(request)`
$DIR/integration_tests/tests/elastictranscoder.rs: `.delete_preset(request)`
$DIR/integration_tests/tests/elastictranscoder.rs: `.create_preset(request)`
$DIR/integration_tests/tests/elastictranscoder.rs: `.delete_preset(request)`
$DIR/integration_tests/tests/elastictranscoder.rs: `.list_jobs_by_status(request)`
$DIR/integration_tests/tests/elastictranscoder.rs: `.list_pipelines(request)`
$DIR/integration_tests/tests/elastictranscoder.rs: `.list_presets(request)`
$DIR/integration_tests/tests/elastictranscoder.rs: `.filter(|x| x.id == Some(AWS_ETS_WEB_PRESET_ID.to_owned()))`
$DIR/integration_tests/tests/elastictranscoder.rs: `.next()`
$DIR/integration_tests/tests/elastictranscoder.rs: `.list_presets(page_two_request)`
$DIR/integration_tests/tests/elastictranscoder.rs: `.filter(|x| x.id == Some(AWS_ETS_WEB_PRESET_ID.to_owned()))`
$DIR/integration_tests/tests/elastictranscoder.rs: `.next()`
$DIR/integration_tests/tests/elastictranscoder.rs: `.read_preset(request)`
$DIR/integration_tests/tests/elb.rs: `.describe_load_balancers(request)`
$DIR/integration_tests/tests/elbv2.rs: `.describe_load_balancers(request)`
$DIR/integration_tests/tests/emr.rs: `.list_clusters(request)`
$DIR/integration_tests/tests/emr.rs: `.describe_job_flows(request)`
$DIR/integration_tests/tests/events.rs: `.list_rules(request)`
$DIR/integration_tests/tests/firehose.rs: `.list_delivery_streams(request)`
$DIR/integration_tests/tests/fms.rs: `.list_policies(request)`
$DIR/integration_tests/tests/fsx.rs: `.describe_file_systems(request)`
$DIR/integration_tests/tests/gamelift.rs: `.list_fleets(request)`
$DIR/integration_tests/tests/glacier.rs: `.list_vaults(request)`
$DIR/integration_tests/tests/glue.rs: `.get_databases(request)`
$DIR/integration_tests/tests/greengrass.rs: `.list_groups(request)`
$DIR/integration_tests/tests/guardduty.rs: `.list_invitations(request)`
$DIR/integration_tests/tests/iam.rs: `.get_user(request)`
$DIR/integration_tests/tests/iam.rs: `.list_users(request)`
$DIR/integration_tests/tests/importexport.rs: `.list_jobs(request)`
$DIR/integration_tests/tests/inspector.rs: `.list_assessment_runs(request)`
$DIR/integration_tests/tests/iot.rs: `.list_things(request)`
$DIR/integration_tests/tests/kafka.rs: `.list_clusters(request)`
$DIR/integration_tests/tests/kinesis.rs: `ensure_cleanup(&test_stream, || async {
        let stream = test_stream.borrow();

        loop {
            let steam_desc_result = client.describe_stream(rusoto_kinesis::DescribeStreamInput {
                stream_name: stream.name.clone(),

                ..Default::default()
            }).await.unwrap();

            if steam_desc_result.stream_description.stream_status == "CREATING" {
                println!("Stream {} still initializing, waiting...", stream.name);
                sleep(std::time::Duration::from_secs(2)).await;
                continue;
            } else {
                break
            }
        }

        if let Ok(kms_id) = std::env::var("KMS_ID") {
            client.start_stream_encryption(rusoto_kinesis::StartStreamEncryptionInput {
                encryption_type: "KMS".to_string(),
                key_id: kms_id,
                stream_name: stream.name.clone(),
            })
            .await
            .unwrap();
        }

        tokio::time::sleep(Duration::from_secs(10)).await;

        let consumer_result = client
            .register_stream_consumer(rusoto_kinesis::RegisterStreamConsumerInput {
                consumer_name: "test-consumer".to_string(),
                stream_arn: stream.arn.clone(),
            })
            .await
            .unwrap();

        loop {
            let consumer_desc_result = client.describe_stream_consumer(rusoto_kinesis::DescribeStreamConsumerInput {
                consumer_arn: Some(consumer_result.consumer.consumer_arn.clone()),
                stream_arn: Some(stream.arn.clone()),

                ..Default::default()
            }).await.unwrap();

            if consumer_desc_result.consumer_description.consumer_status == "CREATING" {
                println!("Consumer for stream {} still initializing, waiting...", stream.name);
                sleep(std::time::Duration::from_secs(2)).await;
                continue;
            } else {
                break
            }
        }

        let shards_result = client
            .list_shards(rusoto_kinesis::ListShardsInput {
                stream_name: Some(stream.name.clone()),

                ..Default::default()
            })
            .await
            .unwrap();
        let shard_id = shards_result.shards.unwrap()[0].shard_id.clone();

        let mut event_stream = client
            .subscribe_to_shard(rusoto_kinesis::SubscribeToShardInput {
                consumer_arn: consumer_result.consumer.consumer_arn,
                shard_id: shard_id.clone(),
                starting_position: rusoto_kinesis::StartingPosition {
                    sequence_number: None,
                    timestamp: None,
                    type_: "TRIM_HORIZON".to_string()
                },
            })
            .await
            .unwrap()
            .event_stream;

        let mut events: Vec<rusoto_kinesis::Record> = Vec::new();

        for i in 0i32..5 {
            let message = format!("Record {}", i);

            let result = client.put_record(rusoto_kinesis::PutRecordInput {
                data: bytes::Bytes::copy_from_slice(message.as_bytes()),
                partition_key: "hello".to_string(),
                stream_name: stream.name.clone(),

                ..Default::default()
            })
            .await
            .unwrap();

            eprintln!("Put record result: {:?}", result);
        }

        let read_events_future = async {
            while let Some(item) = event_stream.next().await {
                let payload = item.unwrap();
                println!("Got event from the event stream: {:?}", payload);

                match payload {
                    rusoto_kinesis::SubscribeToShardEventStreamItem::SubscribeToShardEvent(e) => {
                        events.extend(e.records);
                    },
                    _ => {},
                }
            }
        };

        timeout(
            Duration::from_secs(10),
            read_events_future,
        ).await.unwrap_err();

        println!("Events: {:?}", events);
        assert_eq!(events.len(), 5);
    }).await;`
$DIR/integration_tests/tests/kinesis.rs: `sleep(std::time::Duration::from_secs(2)).await;`
$DIR/integration_tests/tests/kinesis.rs: `tokio::time::sleep(Duration::from_secs(10)).await;`
$DIR/integration_tests/tests/kinesis.rs: `sleep(std::time::Duration::from_secs(2)).await;`
$DIR/integration_tests/tests/kinesis.rs: `events.extend(e.records);`
$DIR/integration_tests/tests/kinesis.rs: `.list_streams(request)`
$DIR/integration_tests/tests/kinesis.rs: `.describe_stream(rusoto_kinesis::DescribeStreamInput {
                stream_name: stream.name.clone(),

                ..Default::default()
            })`
$DIR/integration_tests/tests/kinesis.rs: `.start_stream_encryption(rusoto_kinesis::StartStreamEncryptionInput {
                encryption_type: "KMS".to_string(),
                key_id: kms_id,
                stream_name: stream.name.clone(),
            })`
$DIR/integration_tests/tests/kinesis.rs: `.register_stream_consumer(rusoto_kinesis::RegisterStreamConsumerInput {
                consumer_name: "test-consumer".to_string(),
                stream_arn: stream.arn.clone(),
            })`
$DIR/integration_tests/tests/kinesis.rs: `.describe_stream_consumer(rusoto_kinesis::DescribeStreamConsumerInput {
                consumer_arn: Some(consumer_result.consumer.consumer_arn.clone()),
                stream_arn: Some(stream.arn.clone()),

                ..Default::default()
            })`
$DIR/integration_tests/tests/kinesis.rs: `.list_shards(rusoto_kinesis::ListShardsInput {
                stream_name: Some(stream.name.clone()),

                ..Default::default()
            })`
$DIR/integration_tests/tests/kinesis.rs: `.subscribe_to_shard(rusoto_kinesis::SubscribeToShardInput {
                consumer_arn: consumer_result.consumer.consumer_arn,
                shard_id: shard_id.clone(),
                starting_position: rusoto_kinesis::StartingPosition {
                    sequence_number: None,
                    timestamp: None,
                    type_: "TRIM_HORIZON".to_string()
                },
            })`
$DIR/integration_tests/tests/kinesis.rs: `.put_record(rusoto_kinesis::PutRecordInput {
                data: bytes::Bytes::copy_from_slice(message.as_bytes()),
                partition_key: "hello".to_string(),
                stream_name: stream.name.clone(),

                ..Default::default()
            })`
$DIR/integration_tests/tests/kinesis.rs: `.next()`
$DIR/integration_tests/tests/kinesis.rs: `.extend(e.records)`
$DIR/integration_tests/tests/kinesisanalytics.rs: `.list_applications(request)`
$DIR/integration_tests/tests/kinesisvideo.rs: `.list_streams(request)`
$DIR/integration_tests/tests/kms.rs: `.list_keys(request)`
$DIR/integration_tests/tests/lambda.rs: `.list_functions(request)`
$DIR/integration_tests/tests/lambda.rs: `.invoke(request)`
$DIR/integration_tests/tests/lambda.rs: `.invoke(request)`
$DIR/integration_tests/tests/lexmodels.rs: `.get_bots(request)`
$DIR/integration_tests/tests/licensemanager.rs: `.get_service_settings()`
$DIR/integration_tests/tests/lightsail.rs: `.get_domains(request)`
$DIR/integration_tests/tests/machinelearning.rs: `.describe_batch_predictions(request)`
$DIR/integration_tests/tests/machinelearning.rs: `.describe_data_sources(request)`
$DIR/integration_tests/tests/machinelearning.rs: `.describe_evaluations(request)`
$DIR/integration_tests/tests/mediaconvert.rs: `.list_jobs(request)`
$DIR/integration_tests/tests/medialive.rs: `.list_channels(request)`
$DIR/integration_tests/tests/mediapackage.rs: `.list_origin_endpoints(request)`
$DIR/integration_tests/tests/mgh.rs: `.list_migration_tasks(request)`
$DIR/integration_tests/tests/mq.rs: `.list_brokers(request)`
$DIR/integration_tests/tests/mturk.rs: `.list_hi_ts(request)`
$DIR/integration_tests/tests/neptune.rs: `.describe_db_clusters(request)`
$DIR/integration_tests/tests/opsworks.rs: `.describe_stacks(request)`
$DIR/integration_tests/tests/opsworks.rs: `.describe_my_user_profile()`
$DIR/integration_tests/tests/opsworkscm.rs: `.describe_servers(request)`
$DIR/integration_tests/tests/organizations.rs: `.describe_organization()`
$DIR/integration_tests/tests/pricing.rs: `.describe_services(request)`
$DIR/integration_tests/tests/qldb.rs: `.list_ledgers(ListLedgersRequest::default())`
$DIR/integration_tests/tests/ram.rs: `.list_resources(ListResourcesRequest {
            resource_owner: "SELF".into(),
            ..ListResourcesRequest::default()
        })`
$DIR/integration_tests/tests/ram.rs: `.into()`
$DIR/integration_tests/tests/rds.rs: `tags.push(tag);`
$DIR/integration_tests/tests/rds.rs: `.describe_db_clusters(request)`
$DIR/integration_tests/tests/rds.rs: `.push(tag)`
$DIR/integration_tests/tests/rds.rs: `.create_option_group(create_opt_group_request)`
$DIR/integration_tests/tests/rds.rs: `.delete_option_group(delete_opt_group_req)`
$DIR/integration_tests/tests/redshift.rs: `.describe_clusters(request)`
$DIR/integration_tests/tests/rekognition.rs: `.list_collections(request)`
$DIR/integration_tests/tests/resourcegroups.rs: `.list_groups(request)`
$DIR/integration_tests/tests/resourcegroupstagging.rs: `.get_resources(request)`
$DIR/integration_tests/tests/route53.rs: `.list_hosted_zones(request)`
$DIR/integration_tests/tests/route53domains.rs: `.list_operations(request)`
$DIR/integration_tests/tests/s3.rs: `init_logging();`
$DIR/integration_tests/tests/s3.rs: `bucket_found = true;`
$DIR/integration_tests/tests/s3.rs: `test_delete_bucket(&test_client.s3, &bucket_name).await;`
$DIR/integration_tests/tests/s3.rs: `test_client.bucket_deleted = true;`
$DIR/integration_tests/tests/s3.rs: `init_logging();`
$DIR/integration_tests/tests/s3.rs: `test_client.create_test_bucket_with_acl(bucket_name.clone(), Some("public-read".to_owned())).await;`
$DIR/integration_tests/tests/s3.rs: `test_put_bucket_cors(&test_client.s3, &test_client.bucket_name).await;`
$DIR/integration_tests/tests/s3.rs: `test_get_object_no_such_object(&test_client.s3, &test_client.bucket_name, &filename).await;`
$DIR/integration_tests/tests/s3.rs: `test_put_object_with_filename_and_acl(
        &test_client.s3,
        &test_client.bucket_name,
        &filename,
        &"tests/sample-data/no_credentials",
        Some("public-read".to_owned()),
    ).await;`
$DIR/integration_tests/tests/s3.rs: `test_put_object_with_filename(
        &test_client.s3,
        &test_client.bucket_name,
        &filename2,
        &"tests/sample-data/no_credentials",
    ).await;`
$DIR/integration_tests/tests/s3.rs: `test_head_object(&ro_s3client, &test_client.bucket_name, &filename).await;`
$DIR/integration_tests/tests/s3.rs: `test_head_object(&test_client.s3, &test_client.bucket_name, &filename2).await;`
$DIR/integration_tests/tests/s3.rs: `test_get_object(&ro_s3client, &test_client.bucket_name, &filename).await;`
$DIR/integration_tests/tests/s3.rs: `test_get_object_range(&ro_s3client, &test_client.bucket_name, &filename).await;`
$DIR/integration_tests/tests/s3.rs: `test_client.put_test_object(format!("test_object_{}", i)).await;`
$DIR/integration_tests/tests/s3.rs: `list_items_in_bucket_paged_v1(&ro_s3client, &test_client.bucket_name).await;`
$DIR/integration_tests/tests/s3.rs: `list_items_in_bucket_paged_v2(&ro_s3client, &test_client.bucket_name).await;`
$DIR/integration_tests/tests/s3.rs: `test_copy_object(&test_client.s3, &test_client.bucket_name, &filename).await;`
$DIR/integration_tests/tests/s3.rs: `test_delete_object(&test_client.s3, &test_client.bucket_name, &filename).await;`
$DIR/integration_tests/tests/s3.rs: `test_client.delete_object(format!("test_object_{}", i)).await;`
$DIR/integration_tests/tests/s3.rs: `init_logging();`
$DIR/integration_tests/tests/s3.rs: `test_client.create_test_bucket(bucket_name.clone()).await;`
$DIR/integration_tests/tests/s3.rs: `test_put_object_with_filename(
        &test_client.s3,
        &test_client.bucket_name,
        &utf8_filename,
        &"tests/sample-data/no_credentials",
    ).await;`
$DIR/integration_tests/tests/s3.rs: `test_copy_object_utf8(&test_client.s3, &test_client.bucket_name, &utf8_filename).await;`
$DIR/integration_tests/tests/s3.rs: `test_delete_object(&test_client.s3, &test_client.bucket_name, &utf8_filename).await;`
$DIR/integration_tests/tests/s3.rs: `init_logging();`
$DIR/integration_tests/tests/s3.rs: `test_client.create_test_bucket(bucket_name.clone()).await;`
$DIR/integration_tests/tests/s3.rs: `test_put_object_with_filename(
        &test_client.s3,
        &test_client.bucket_name,
        &binary_filename,
        &"tests/sample-data/binary-file",
    ).await;`
$DIR/integration_tests/tests/s3.rs: `test_get_object(&test_client.s3, &test_client.bucket_name, &binary_filename).await;`
$DIR/integration_tests/tests/s3.rs: `test_get_object_async_read(&test_client.s3, &test_client.bucket_name, &binary_filename).await;`
$DIR/integration_tests/tests/s3.rs: `test_delete_object(&test_client.s3, &test_client.bucket_name, &binary_filename).await;`
$DIR/integration_tests/tests/s3.rs: `init_logging();`
$DIR/integration_tests/tests/s3.rs: `test_client.create_test_bucket(bucket_name.clone()).await;`
$DIR/integration_tests/tests/s3.rs: `metadata.insert(
        "rusoto-metadata-some".to_string(),
        "some-test-value".to_string(),
    );`
$DIR/integration_tests/tests/s3.rs: `metadata.insert("rusoto-metadata-none".to_string(), "".to_string());`
$DIR/integration_tests/tests/s3.rs: `test_put_object_with_metadata(
        &test_client.s3,
        &test_client.bucket_name,
        &metadata_filename,
        &"tests/sample-data/no_credentials",
        &metadata,
    ).await;`
$DIR/integration_tests/tests/s3.rs: `test_head_object_with_metadata(
        &test_client.s3,
        &test_client.bucket_name,
        &metadata_filename,
        &metadata,
    ).await;`
$DIR/integration_tests/tests/s3.rs: `test_get_object_with_metadata(
        &test_client.s3,
        &test_client.bucket_name,
        &metadata_filename,
        &metadata,
    ).await;`
$DIR/integration_tests/tests/s3.rs: `test_delete_object(
        &test_client.s3,
        &test_client.bucket_name,
        &metadata_filename,
    ).await;`
$DIR/integration_tests/tests/s3.rs: `init_logging();`
$DIR/integration_tests/tests/s3.rs: `test_client.create_test_bucket(bucket_name.clone()).await;`
$DIR/integration_tests/tests/s3.rs: `test_put_object_with_filename(
        &test_client.s3,
        &test_client.bucket_name,
        &filename,
        &"tests/sample-data/no_credentials",
    ).await;`
$DIR/integration_tests/tests/s3.rs: `test_get_object_with_presigned_url(
        &test_client.region,
        &credentials,
        &test_client.bucket_name,
        &filename,
    ).await;`
$DIR/integration_tests/tests/s3.rs: `test_get_object_with_expired_presigned_url(
        &test_client.region,
        &credentials,
        &test_client.bucket_name,
        &filename,
    ).await;`
$DIR/integration_tests/tests/s3.rs: `test_put_object_with_presigned_url(
        &test_client.region,
        &credentials,
        &test_client.bucket_name,
        &filename,
    ).await;`
$DIR/integration_tests/tests/s3.rs: `test_delete_object_with_presigned_url(
        &test_client.region,
        &credentials,
        &test_client.bucket_name,
        &filename,
    ).await;`
$DIR/integration_tests/tests/s3.rs: `test_put_object_with_filename(
        &test_client.s3,
        &test_client.bucket_name,
        &utf8_filename,
        &"tests/sample-data/no_credentials",
    ).await;`
$DIR/integration_tests/tests/s3.rs: `test_get_object_with_presigned_url(
        &test_client.region,
        &credentials,
        &test_client.bucket_name,
        &utf8_filename,
    ).await;`
$DIR/integration_tests/tests/s3.rs: `test_get_object_with_expired_presigned_url(
        &test_client.region,
        &credentials,
        &test_client.bucket_name,
        &utf8_filename,
    ).await;`
$DIR/integration_tests/tests/s3.rs: `test_put_object_with_presigned_url(
        &test_client.region,
        &credentials,
        &test_client.bucket_name,
        &utf8_filename,
    ).await;`
$DIR/integration_tests/tests/s3.rs: `test_delete_object_with_presigned_url(
        &test_client.region,
        &credentials,
        &test_client.bucket_name,
        &utf8_filename,
    ).await;`
$DIR/integration_tests/tests/s3.rs: `init_logging();`
$DIR/integration_tests/tests/s3.rs: `test_client.create_test_bucket(bucket_name.clone()).await;`
$DIR/integration_tests/tests/s3.rs: `test_multipart_upload(
        &test_client.s3,
        &test_client.region,
        &credentials,
        &test_client.bucket_name,
        &multipart_filename,
    ).await;`
$DIR/integration_tests/tests/s3.rs: `test_put_object_stream_with_filename(
        &test_client.s3,
        &test_client.bucket_name,
        &streaming_filename,
        &"tests/sample-data/binary-file",
    ).await;`
$DIR/integration_tests/tests/s3.rs: `test_delete_object(
        &test_client.s3,
        &test_client.bucket_name,
        &multipart_filename,
    ).await;`
$DIR/integration_tests/tests/s3.rs: `test_delete_object(
        &test_client.s3,
        &test_client.bucket_name,
        &streaming_filename,
    ).await;`
$DIR/integration_tests/tests/s3.rs: `init_logging();`
$DIR/integration_tests/tests/s3.rs: `test_client.create_test_bucket(bucket_name.clone()).await;`
$DIR/integration_tests/tests/s3.rs: `test_client.put_test_object(filename.clone()).await;`
$DIR/integration_tests/tests/s3.rs: `test_delete_object(&test_client.s3, &bucket_name, &key).await;`
$DIR/integration_tests/tests/s3.rs: `init_logging();`
$DIR/integration_tests/tests/s3.rs: `test_client.create_test_bucket(bucket_name.clone()).await;`
$DIR/integration_tests/tests/s3.rs: `test_client.put_test_object(filename_spaces.clone()).await;`
$DIR/integration_tests/tests/s3.rs: `test_delete_object(&test_client.s3, &bucket_name, &filename_spaces).await;`
$DIR/integration_tests/tests/s3.rs: `.s3.create_bucket(create_bucket_req)`
$DIR/integration_tests/tests/s3.rs: `.s3.list_buckets()`
$DIR/integration_tests/tests/s3.rs: `.s3.list_objects_v2(list_obj_req)`
$DIR/integration_tests/tests/s3.rs: `.create_test_bucket_with_acl(bucket_name.clone(), Some("public-read".to_owned()))`
$DIR/integration_tests/tests/s3.rs: `.create_anonymous_client()`
$DIR/integration_tests/tests/s3.rs: `.put_test_object(format!("test_object_{}", i))`
$DIR/integration_tests/tests/s3.rs: `.delete_object(format!("test_object_{}", i))`
$DIR/integration_tests/tests/s3.rs: `.create_test_bucket(bucket_name.clone())`
$DIR/integration_tests/tests/s3.rs: `.create_test_bucket(bucket_name.clone())`
$DIR/integration_tests/tests/s3.rs: `.create_test_bucket(bucket_name.clone())`
$DIR/integration_tests/tests/s3.rs: `.insert(
        "rusoto-metadata-some".to_string(),
        "some-test-value".to_string(),
    )`
$DIR/integration_tests/tests/s3.rs: `.insert("rusoto-metadata-none".to_string(), "".to_string())`
$DIR/integration_tests/tests/s3.rs: `.create_test_bucket(bucket_name.clone())`
$DIR/integration_tests/tests/s3.rs: `.credentials()`
$DIR/integration_tests/tests/s3.rs: `.create_test_bucket(bucket_name.clone())`
$DIR/integration_tests/tests/s3.rs: `.credentials()`
$DIR/integration_tests/tests/s3.rs: `.create_test_bucket(bucket_name.clone())`
$DIR/integration_tests/tests/s3.rs: `.put_test_object(filename.clone())`
$DIR/integration_tests/tests/s3.rs: `.s3
        .list_objects(list_obj_req_v1)`
$DIR/integration_tests/tests/s3.rs: `.s3
        .list_objects_v2(list_obj_req_v2)`
$DIR/integration_tests/tests/s3.rs: `.create_test_bucket(bucket_name.clone())`
$DIR/integration_tests/tests/s3.rs: `.put_test_object(filename_spaces.clone())`
$DIR/integration_tests/tests/s3.rs: `.s3
        .list_objects_v2(req)`
$DIR/integration_tests/tests/sagemaker.rs: `.list_models(req)`
$DIR/integration_tests/tests/sdb.rs: `.list_domains(request)`
$DIR/integration_tests/tests/sdb.rs: `.create_domain(create_domain_req)`
$DIR/integration_tests/tests/sdb.rs: `.list_domains(request)`
$DIR/integration_tests/tests/sdb.rs: `.delete_domain(delete_req)`
$DIR/integration_tests/tests/secretsmanager.rs: `.list_secrets(request)`
$DIR/integration_tests/tests/securityhub.rs: `.list_invitations(request)`
$DIR/integration_tests/tests/serverlessrepo.rs: `.list_applications(request)`
$DIR/integration_tests/tests/servicecatalog.rs: `.list_portfolios(request)`
$DIR/integration_tests/tests/servicediscovery.rs: `.list_services(request)`
$DIR/integration_tests/tests/ses.rs: `.list_verified_email_addresses()`
$DIR/integration_tests/tests/shield.rs: `.list_attacks(request)`
$DIR/integration_tests/tests/sms.rs: `.get_servers(GetServersRequest::default())`
$DIR/integration_tests/tests/snowball.rs: `.describe_addresses(request)`
$DIR/integration_tests/tests/sns.rs: `.list_topics(request)`
$DIR/integration_tests/tests/sqs.rs: `attrs.insert(
        String::from("ReceiveMessageWaitTimeSeconds"),
        String::from("1"),
    );`
$DIR/integration_tests/tests/sqs.rs: `result.err().expect("receive did not fail as expected");`
$DIR/integration_tests/tests/sqs.rs: `delete_entries.push(DeleteMessageBatchRequestEntry {
            receipt_handle: msg.receipt_handle.clone().unwrap(),
            id: msg.message_id.clone().unwrap(),
        });`
$DIR/integration_tests/tests/sqs.rs: `.list_queues(request)`
$DIR/integration_tests/tests/sqs.rs: `.insert(
        String::from("ReceiveMessageWaitTimeSeconds"),
        String::from("1"),
    )`
$DIR/integration_tests/tests/sqs.rs: `.create_queue(q_creation_req)`
$DIR/integration_tests/tests/sqs.rs: `.get_queue_url(get_q_by_name_request)`
$DIR/integration_tests/tests/sqs.rs: `.get_queue_attributes(queue_attributes_req)`
$DIR/integration_tests/tests/sqs.rs: `.send_message(send_msg_request)`
$DIR/integration_tests/tests/sqs.rs: `.receive_message(receive_request)`
$DIR/integration_tests/tests/sqs.rs: `.delete_message(delete_message_request)`
$DIR/integration_tests/tests/sqs.rs: `.delete_queue(queue_deletion_req)`
$DIR/integration_tests/tests/sqs.rs: `.create_queue(q_creation_req)`
$DIR/integration_tests/tests/sqs.rs: `.receive_message(receive_request)`
$DIR/integration_tests/tests/sqs.rs: `.err()`
$DIR/integration_tests/tests/sqs.rs: `.delete_queue(queue_deletion_req)`
$DIR/integration_tests/tests/sqs.rs: `.create_queue(q_creation_req)`
$DIR/integration_tests/tests/sqs.rs: `.get_queue_url(get_q_by_name_request)`
$DIR/integration_tests/tests/sqs.rs: `.get_queue_attributes(queue_attributes_req)`
$DIR/integration_tests/tests/sqs.rs: `.send_message_batch(send_msg_request)`
$DIR/integration_tests/tests/sqs.rs: `.receive_message(receive_request)`
$DIR/integration_tests/tests/sqs.rs: `.push(DeleteMessageBatchRequestEntry {
            receipt_handle: msg.receipt_handle.clone().unwrap(),
            id: msg.message_id.clone().unwrap(),
        })`
$DIR/integration_tests/tests/sqs.rs: `.delete_message_batch(delete_message_request)`
$DIR/integration_tests/tests/sqs.rs: `.delete_queue(queue_deletion_req)`
$DIR/integration_tests/tests/ssm.rs: `.list_documents(request)`
$DIR/integration_tests/tests/ssm.rs: `.list_commands(request)`
$DIR/integration_tests/tests/ssm.rs: `.list_command_invocations(request)`
$DIR/integration_tests/tests/stepfunctions.rs: `.list_state_machines(request)`
$DIR/integration_tests/tests/storagegateway.rs: `.list_gateways(request)`
$DIR/integration_tests/tests/sts.rs: `.assume_role(AssumeRoleRequest {
            role_arn: "bogus".to_owned(),
            role_session_name: "rusoto_test_session".to_owned(),
            ..Default::default()
        })`
$DIR/integration_tests/tests/sts.rs: `.get_session_token(GetSessionTokenRequest {
            token_code: Some("123456".to_owned()),
            serial_number: Some("123456789".to_owned()),
            ..Default::default()
        })`
$DIR/integration_tests/tests/sts.rs: `.credentials()`
$DIR/integration_tests/tests/swf.rs: `request.maximum_page_size = Some(10);`
$DIR/integration_tests/tests/swf.rs: `request.registration_status = "REGISTERED".to_string();`
$DIR/integration_tests/tests/swf.rs: `.list_domains(request)`
$DIR/integration_tests/tests/translate.rs: `.translate_text(request)`
$DIR/integration_tests/tests/waf-regional.rs: `.list_rules(request)`
$DIR/integration_tests/tests/workspaces.rs: `.describe_workspaces(request)`
$DIR/integration_tests/tests/xray.rs: `.unix_timestamp()`
$DIR/integration_tests/tests/xray.rs: `.get_service_graph(request)`
$DIR/rusoto/core/src/proto/json/error.rs: `.into()`
$DIR/rusoto/core/src/proto/json/error.rs: `.into()`
$DIR/rusoto/core/src/proto/xml/util.rs: `reader.next();`
$DIR/rusoto/core/src/proto/xml/util.rs: `reader.next();`
$DIR/rusoto/core/src/proto/xml/util.rs: `reader.next();`
$DIR/rusoto/core/src/proto/xml/util.rs: `reader.next();`
$DIR/rusoto/core/src/proto/xml/util.rs: `reader.next();`
$DIR/rusoto/core/src/proto/xml/util.rs: `reader.next();`
$DIR/rusoto/core/src/proto/xml/util.rs: `reader.next();`
$DIR/rusoto/core/src/proto/xml/util.rs: `reader.next();`
$DIR/rusoto/core/src/proto/xml/util.rs: `reader.next();`
$DIR/rusoto/core/src/proto/xml/util.rs: `reader.next();`
$DIR/rusoto/core/src/proto/xml/util.rs: `reader.next();`
$DIR/rusoto/core/src/proto/xml/util.rs: `reader.next();`
$DIR/rusoto/core/src/proto/xml/util.rs: `find_start_element(&mut reader);`
$DIR/rusoto/core/src/proto/xml/util.rs: `find_start_element(&mut reader);`
$DIR/rusoto/core/src/proto/xml/util.rs: `.read_to_string(&mut body)`
$DIR/rusoto/core/src/proto/xml/util.rs: `.into_iter()`
$DIR/rusoto/core/src/proto/xml/util.rs: `.peekable()`
$DIR/rusoto/core/src/proto/xml/util.rs: `.next()`
$DIR/rusoto/core/src/proto/xml/util.rs: `.read_to_string(&mut body)`
$DIR/rusoto/core/src/proto/xml/util.rs: `.into_iter()`
$DIR/rusoto/core/src/proto/xml/util.rs: `.peekable()`
$DIR/rusoto/core/src/proto/xml/util.rs: `.next()`
$DIR/rusoto/core/src/proto/xml/util.rs: `.next()`
$DIR/rusoto/core/src/proto/xml/util.rs: `.read_to_string(&mut body)`
$DIR/rusoto/core/src/proto/xml/util.rs: `.into_iter()`
$DIR/rusoto/core/src/proto/xml/util.rs: `.peekable()`
$DIR/rusoto/core/src/proto/xml/util.rs: `.next()`
$DIR/rusoto/core/src/proto/xml/util.rs: `.next()`
$DIR/rusoto/core/src/proto/xml/util.rs: `.next()`
$DIR/rusoto/core/src/proto/xml/util.rs: `.read_to_string(&mut body)`
$DIR/rusoto/core/src/proto/xml/util.rs: `.into_iter()`
$DIR/rusoto/core/src/proto/xml/util.rs: `.peekable()`
$DIR/rusoto/core/src/proto/xml/util.rs: `.next()`
$DIR/rusoto/core/src/proto/xml/util.rs: `.next()`
$DIR/rusoto/core/src/proto/xml/util.rs: `.next()`
$DIR/rusoto/core/src/proto/xml/util.rs: `.next()`
$DIR/rusoto/core/src/proto/xml/util.rs: `.next()`
$DIR/rusoto/core/src/proto/xml/util.rs: `.next()`
$DIR/rusoto/core/src/proto/xml/util.rs: `.into_iter()`
$DIR/rusoto/core/src/proto/xml/util.rs: `.peekable()`
$DIR/rusoto/credential/src/container.rs: `env::set_var(AWS_CONTAINER_CREDENTIALS_RELATIVE_URI, path);`
$DIR/rusoto/credential/src/container.rs: `env::set_var(AWS_CONTAINER_CREDENTIALS_FULL_URI, "dummy");`
$DIR/rusoto/credential/src/container.rs: `env::set_var(AWS_CONTAINER_AUTHORIZATION_TOKEN, "dummy");`
$DIR/rusoto/credential/src/container.rs: `env::remove_var(AWS_CONTAINER_CREDENTIALS_RELATIVE_URI);`
$DIR/rusoto/credential/src/container.rs: `env::remove_var(AWS_CONTAINER_CREDENTIALS_FULL_URI);`
$DIR/rusoto/credential/src/container.rs: `env::remove_var(AWS_CONTAINER_AUTHORIZATION_TOKEN);`
$DIR/rusoto/credential/src/container.rs: `env::remove_var(AWS_CONTAINER_CREDENTIALS_RELATIVE_URI);`
$DIR/rusoto/credential/src/container.rs: `env::remove_var(AWS_CONTAINER_CREDENTIALS_FULL_URI);`
$DIR/rusoto/credential/src/container.rs: `env::set_var(AWS_CONTAINER_CREDENTIALS_RELATIVE_URI, "");`
$DIR/rusoto/credential/src/container.rs: `env::set_var(AWS_CONTAINER_CREDENTIALS_FULL_URI, "");`
$DIR/rusoto/credential/src/container.rs: `env::set_var(AWS_CONTAINER_AUTHORIZATION_TOKEN, "");`
$DIR/rusoto/credential/src/container.rs: `env::remove_var(AWS_CONTAINER_CREDENTIALS_RELATIVE_URI);`
$DIR/rusoto/credential/src/container.rs: `env::remove_var(AWS_CONTAINER_CREDENTIALS_FULL_URI);`
$DIR/rusoto/credential/src/container.rs: `env::remove_var(AWS_CONTAINER_AUTHORIZATION_TOKEN);`
$DIR/rusoto/credential/src/container.rs: `env::remove_var(AWS_CONTAINER_CREDENTIALS_RELATIVE_URI);`
$DIR/rusoto/credential/src/container.rs: `env::set_var(AWS_CONTAINER_CREDENTIALS_FULL_URI, url);`
$DIR/rusoto/credential/src/container.rs: `env::set_var(AWS_CONTAINER_AUTHORIZATION_TOKEN, "dummy");`
$DIR/rusoto/credential/src/container.rs: `env::remove_var(AWS_CONTAINER_CREDENTIALS_FULL_URI);`
$DIR/rusoto/credential/src/container.rs: `env::remove_var(AWS_CONTAINER_AUTHORIZATION_TOKEN);`
$DIR/rusoto/credential/src/container.rs: `env::remove_var(AWS_CONTAINER_CREDENTIALS_RELATIVE_URI);`
$DIR/rusoto/credential/src/container.rs: `env::set_var(AWS_CONTAINER_CREDENTIALS_FULL_URI, url);`
$DIR/rusoto/credential/src/container.rs: `env::remove_var(AWS_CONTAINER_AUTHORIZATION_TOKEN);`
$DIR/rusoto/credential/src/container.rs: `env::remove_var(AWS_CONTAINER_CREDENTIALS_FULL_URI);`
$DIR/rusoto/credential/src/container.rs: `env::remove_var(AWS_CONTAINER_CREDENTIALS_RELATIVE_URI);`
$DIR/rusoto/credential/src/container.rs: `env::set_var(AWS_CONTAINER_CREDENTIALS_FULL_URI, url);`
$DIR/rusoto/credential/src/container.rs: `env::set_var(AWS_CONTAINER_AUTHORIZATION_TOKEN, "");`
$DIR/rusoto/credential/src/container.rs: `env::remove_var(AWS_CONTAINER_CREDENTIALS_FULL_URI);`
$DIR/rusoto/credential/src/container.rs: `env::remove_var(AWS_CONTAINER_AUTHORIZATION_TOKEN);`
$DIR/rusoto/credential/src/container.rs: `.ok()`
$DIR/rusoto/credential/src/container.rs: `.ok()`
$DIR/rusoto/credential/src/container.rs: `.ok()`
$DIR/rusoto/credential/src/container.rs: `.ok()`
$DIR/rusoto/credential/src/environment.rs: `env::set_var(AWS_ACCESS_KEY_ID, "id");`
$DIR/rusoto/credential/src/environment.rs: `env::set_var(AWS_SECRET_ACCESS_KEY, "secret");`
$DIR/rusoto/credential/src/environment.rs: `env::set_var(AWS_SESSION_TOKEN, "token");`
$DIR/rusoto/credential/src/environment.rs: `env::remove_var(AWS_ACCESS_KEY_ID);`
$DIR/rusoto/credential/src/environment.rs: `env::remove_var(AWS_SECRET_ACCESS_KEY);`
$DIR/rusoto/credential/src/environment.rs: `env::remove_var(AWS_SESSION_TOKEN);`
$DIR/rusoto/credential/src/environment.rs: `env::set_var(AWS_ACCESS_KEY_ID, "id");`
$DIR/rusoto/credential/src/environment.rs: `env::set_var(AWS_SECRET_ACCESS_KEY, "secret");`
$DIR/rusoto/credential/src/environment.rs: `env::remove_var(AWS_SESSION_TOKEN);`
$DIR/rusoto/credential/src/environment.rs: `env::remove_var(AWS_ACCESS_KEY_ID);`
$DIR/rusoto/credential/src/environment.rs: `env::remove_var(AWS_SECRET_ACCESS_KEY);`
$DIR/rusoto/credential/src/environment.rs: `env::remove_var(AWS_ACCESS_KEY_ID);`
$DIR/rusoto/credential/src/environment.rs: `env::set_var(AWS_SECRET_ACCESS_KEY, "secret");`
$DIR/rusoto/credential/src/environment.rs: `env::remove_var(AWS_SESSION_TOKEN);`
$DIR/rusoto/credential/src/environment.rs: `env::remove_var(AWS_SECRET_ACCESS_KEY);`
$DIR/rusoto/credential/src/environment.rs: `env::remove_var(AWS_SECRET_ACCESS_KEY);`
$DIR/rusoto/credential/src/environment.rs: `env::set_var(AWS_ACCESS_KEY_ID, "id");`
$DIR/rusoto/credential/src/environment.rs: `env::remove_var(AWS_SESSION_TOKEN);`
$DIR/rusoto/credential/src/environment.rs: `env::remove_var(AWS_ACCESS_KEY_ID);`
$DIR/rusoto/credential/src/environment.rs: `env::remove_var(AWS_SECRET_ACCESS_KEY);`
$DIR/rusoto/credential/src/environment.rs: `env::remove_var(AWS_ACCESS_KEY_ID);`
$DIR/rusoto/credential/src/environment.rs: `env::remove_var(AWS_SESSION_TOKEN);`
$DIR/rusoto/credential/src/environment.rs: `env::set_var(AWS_ACCESS_KEY_ID, "id");`
$DIR/rusoto/credential/src/environment.rs: `env::set_var(AWS_SECRET_ACCESS_KEY, "secret");`
$DIR/rusoto/credential/src/environment.rs: `env::set_var(AWS_SESSION_TOKEN, "token");`
$DIR/rusoto/credential/src/environment.rs: `env::set_var(AWS_CREDENTIAL_EXPIRATION, "lore ipsum");`
$DIR/rusoto/credential/src/environment.rs: `env::remove_var(AWS_ACCESS_KEY_ID);`
$DIR/rusoto/credential/src/environment.rs: `env::remove_var(AWS_SECRET_ACCESS_KEY);`
$DIR/rusoto/credential/src/environment.rs: `env::remove_var(AWS_SESSION_TOKEN);`
$DIR/rusoto/credential/src/environment.rs: `env::remove_var(AWS_CREDENTIAL_EXPIRATION);`
$DIR/rusoto/credential/src/environment.rs: `env::set_var(AWS_ACCESS_KEY_ID, "id");`
$DIR/rusoto/credential/src/environment.rs: `env::set_var(AWS_SECRET_ACCESS_KEY, "secret");`
$DIR/rusoto/credential/src/environment.rs: `env::set_var(AWS_SESSION_TOKEN, "token");`
$DIR/rusoto/credential/src/environment.rs: `env::set_var(AWS_CREDENTIAL_EXPIRATION, now_str);`
$DIR/rusoto/credential/src/environment.rs: `env::remove_var(AWS_ACCESS_KEY_ID);`
$DIR/rusoto/credential/src/environment.rs: `env::remove_var(AWS_SECRET_ACCESS_KEY);`
$DIR/rusoto/credential/src/environment.rs: `env::remove_var(AWS_SESSION_TOKEN);`
$DIR/rusoto/credential/src/environment.rs: `env::remove_var(AWS_CREDENTIAL_EXPIRATION);`
$DIR/rusoto/credential/src/environment.rs: `env::set_var(AWS_CREDENTIAL_EXPIRATION, "1996-12-19t16:39:57-08:00");`
$DIR/rusoto/credential/src/environment.rs: `env::set_var(AWS_ACCESS_KEY_ID, "id");`
$DIR/rusoto/credential/src/environment.rs: `env::set_var(AWS_SECRET_ACCESS_KEY, "secret");`
$DIR/rusoto/credential/src/environment.rs: `env::remove_var(AWS_CREDENTIAL_EXPIRATION);`
$DIR/rusoto/credential/src/environment.rs: `env::remove_var(AWS_ACCESS_KEY_ID);`
$DIR/rusoto/credential/src/environment.rs: `env::remove_var(AWS_SECRET_ACCESS_KEY);`
$DIR/rusoto/credential/src/environment.rs: `env::set_var("MYAPP_ACCESS_KEY_ID", "id");`
$DIR/rusoto/credential/src/environment.rs: `env::set_var("MYAPP_SECRET_ACCESS_KEY", "secret");`
$DIR/rusoto/credential/src/environment.rs: `env::set_var("MYAPP_SESSION_TOKEN", "token");`
$DIR/rusoto/credential/src/environment.rs: `env::set_var("MYAPP_CREDENTIAL_EXPIRATION", now_str);`
$DIR/rusoto/credential/src/environment.rs: `env::remove_var("MYAPP_ACCESS_KEY_ID");`
$DIR/rusoto/credential/src/environment.rs: `env::remove_var("MYAPP_SECRET_ACCESS_KEY");`
$DIR/rusoto/credential/src/environment.rs: `env::remove_var("MYAPP_SESSION_TOKEN");`
$DIR/rusoto/credential/src/environment.rs: `env::remove_var("MYAPP_CREDENTIAL_EXPIRATION");`
$DIR/rusoto/credential/src/environment.rs: `.credentials()`
$DIR/rusoto/credential/src/environment.rs: `.ok()`
$DIR/rusoto/credential/src/environment.rs: `.credentials()`
$DIR/rusoto/credential/src/environment.rs: `.ok()`
$DIR/rusoto/credential/src/environment.rs: `.credentials()`
$DIR/rusoto/credential/src/environment.rs: `.credentials()`
$DIR/rusoto/credential/src/environment.rs: `.credentials()`
$DIR/rusoto/credential/src/environment.rs: `.credentials()`
$DIR/rusoto/credential/src/environment.rs: `.to_rfc3339()`
$DIR/rusoto/credential/src/environment.rs: `.credentials()`
$DIR/rusoto/credential/src/environment.rs: `.ok()`
$DIR/rusoto/credential/src/environment.rs: `.credentials()`
$DIR/rusoto/credential/src/environment.rs: `.to_rfc3339()`
$DIR/rusoto/credential/src/environment.rs: `.credentials()`
$DIR/rusoto/credential/src/environment.rs: `.ok()`
$DIR/rusoto/credential/src/lib.rs: `is_send_and_sync::<ChainProvider>();`
$DIR/rusoto/credential/src/lib.rs: `is_send_and_sync::<AutoRefreshingProvider<ChainProvider>>();`
$DIR/rusoto/credential/src/lib.rs: `.credentials()`
$DIR/rusoto/credential/src/profile.rs: `env::set_var(AWS_SHARED_CREDENTIALS_FILE, credentials_path);`
$DIR/rusoto/credential/src/profile.rs: `env::set_var(AWS_SHARED_CREDENTIALS_FILE, credentials_path);`
$DIR/rusoto/credential/src/profile.rs: `env::set_var(AWS_PROFILE, "bar");`
$DIR/rusoto/credential/src/profile.rs: `env::remove_var(AWS_SHARED_CREDENTIALS_FILE);`
$DIR/rusoto/credential/src/profile.rs: `env::set_var(
            AWS_CONFIG_FILE,
            "tests/sample-data/credential_process_config",
        );`
$DIR/rusoto/credential/src/profile.rs: `provider.set_profile("foo");`
$DIR/rusoto/credential/src/profile.rs: `env::set_var(AWS_PROFILE, "bar");`
$DIR/rusoto/credential/src/profile.rs: `env::set_var(AWS_PROFILE, "");`
$DIR/rusoto/credential/src/profile.rs: `env::remove_var(AWS_PROFILE);`
$DIR/rusoto/credential/src/profile.rs: `env::set_var(AWS_SHARED_CREDENTIALS_FILE, "bar");`
$DIR/rusoto/credential/src/profile.rs: `env::set_var(AWS_SHARED_CREDENTIALS_FILE, "");`
$DIR/rusoto/credential/src/profile.rs: `env::remove_var(AWS_SHARED_CREDENTIALS_FILE);`
$DIR/rusoto/credential/src/profile.rs: `.get(DEFAULT)`
$DIR/rusoto/credential/src/profile.rs: `.get("foo")`
$DIR/rusoto/credential/src/profile.rs: `.get("bar")`
$DIR/rusoto/credential/src/profile.rs: `.get(DEFAULT)`
$DIR/rusoto/credential/src/profile.rs: `.ok()`
$DIR/rusoto/credential/src/profile.rs: `.get(DEFAULT)`
$DIR/rusoto/credential/src/profile.rs: `.ok()`
$DIR/rusoto/credential/src/profile.rs: `.get("foo")`
$DIR/rusoto/credential/src/profile.rs: `.get("bar")`
$DIR/rusoto/credential/src/profile.rs: `.ok()`
$DIR/rusoto/credential/src/profile.rs: `.get(DEFAULT)`
$DIR/rusoto/credential/src/profile.rs: `.credentials()`
$DIR/rusoto/credential/src/profile.rs: `.ok()`
$DIR/rusoto/credential/src/profile.rs: `.credentials()`
$DIR/rusoto/credential/src/profile.rs: `.credentials()`
$DIR/rusoto/credential/src/profile.rs: `.credentials()`
$DIR/rusoto/credential/src/profile.rs: `.ok()`
$DIR/rusoto/credential/src/profile.rs: `.set_profile("foo")`
$DIR/rusoto/credential/src/profile.rs: `.ok()`
$DIR/rusoto/credential/src/profile.rs: `.get(DEFAULT)`
$DIR/rusoto/credential/src/profile.rs: `.region_from_profile()`
$DIR/rusoto/credential/src/profile.rs: `.region_from_profile()`
$DIR/rusoto/credential/src/static_provider.rs: `thread::sleep(time::Duration::from_secs(1));`
$DIR/rusoto/credential/src/static_provider.rs: `.credentials()`
$DIR/rusoto/credential/src/static_provider.rs: `.credentials()`
$DIR/rusoto/credential/src/static_provider.rs: `.credentials()`
$DIR/rusoto/credential/src/static_provider.rs: `.expires_at()`
$DIR/rusoto/credential/src/static_provider.rs: `.credentials()`
$DIR/rusoto/credential/src/static_provider.rs: `.credentials()`
$DIR/rusoto/credential/src/variable.rs: `std::env::set_var(VALUE, VALUE);`
$DIR/rusoto/credential/src/variable.rs: `std::env::remove_var(VALUE);`
$DIR/rusoto/credential/src/variable.rs: `std::env::set_var(VALUE, "");`
$DIR/rusoto/credential/src/variable.rs: `writeln!(file, "{}", VALUE)?;`
$DIR/rusoto/credential/src/variable.rs: `file.write(VALUE)?;`
$DIR/rusoto/credential/src/variable.rs: `.into()`
$DIR/rusoto/credential/src/variable.rs: `.into()`
$DIR/rusoto/credential/src/variable.rs: `.into()`
$DIR/rusoto/credential/src/variable.rs: `.path()`
$DIR/rusoto/credential/src/variable.rs: `.write(VALUE)`
$DIR/rusoto/credential/src/variable.rs: `.path()`
$DIR/rusoto/credential/tests/instance-profile-test.rs: `provider.set_timeout(Duration::from_secs(5));`
$DIR/rusoto/credential/tests/instance-profile-test.rs: `provider.set_ip_addr_with_port("127.0.0.1", "8080");`
$DIR/rusoto/credential/tests/instance-profile-test.rs: `.set_timeout(Duration::from_secs(5))`
$DIR/rusoto/credential/tests/instance-profile-test.rs: `.set_ip_addr_with_port("127.0.0.1", "8080")`
$DIR/rusoto/credential/tests/instance-profile-test.rs: `.credentials()`
$DIR/rusoto/credential/tests/instance-profile-test.rs: `.expires_at()`
$DIR/rusoto/services/application-autoscaling/src/custom/custom_tests.rs: `.with_body(&body)`
$DIR/rusoto/services/application-autoscaling/src/custom/custom_tests.rs: `.register_scalable_target(Default::default())`
$DIR/rusoto/services/application-autoscaling/src/custom/custom_tests.rs: `.with_body(&body)`
$DIR/rusoto/services/application-autoscaling/src/custom/custom_tests.rs: `.register_scalable_target(Default::default())`
$DIR/rusoto/services/autoscaling/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/autoscaling/src/generated.rs: `.delete_policy(request)`
$DIR/rusoto/services/autoscaling/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/autoscaling/src/generated.rs: `.describe_adjustment_types()`
$DIR/rusoto/services/autoscaling/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/autoscaling/src/generated.rs: `.describe_auto_scaling_groups(request)`
$DIR/rusoto/services/autoscaling/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/autoscaling/src/generated.rs: `.describe_auto_scaling_instances(request)`
$DIR/rusoto/services/autoscaling/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/autoscaling/src/generated.rs: `.describe_auto_scaling_notification_types()`
$DIR/rusoto/services/autoscaling/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/autoscaling/src/generated.rs: `.describe_launch_configurations(request)`
$DIR/rusoto/services/autoscaling/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/autoscaling/src/generated.rs: `.describe_metric_collection_types()`
$DIR/rusoto/services/autoscaling/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/autoscaling/src/generated.rs: `.describe_notification_configurations(request)`
$DIR/rusoto/services/autoscaling/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/autoscaling/src/generated.rs: `.describe_policies(request)`
$DIR/rusoto/services/autoscaling/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/autoscaling/src/generated.rs: `.describe_scaling_activities(request)`
$DIR/rusoto/services/autoscaling/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/autoscaling/src/generated.rs: `.describe_scaling_process_types()`
$DIR/rusoto/services/autoscaling/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/autoscaling/src/generated.rs: `.describe_scheduled_actions(request)`
$DIR/rusoto/services/autoscaling/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/autoscaling/src/generated.rs: `.describe_tags(request)`
$DIR/rusoto/services/autoscaling/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/autoscaling/src/generated.rs: `.describe_termination_policy_types()`
$DIR/rusoto/services/cloudformation/src/custom/custom_tests.rs: `.with_body(
            r#"<?xml version="1.0" encoding="UTF-8"?>
        <ListStacksResponse xmlns="http://cloudformation.amazonaws.com/doc/2010-05-15/">
            <ListStacksResult>
            <StackSummaries>
                <member>
                <StackId>
                    arn:aws:cloudformation:us-east-1:1234567:stack/TestCreate1/aaaaa
                </StackId>
                <StackStatus>CREATE_IN_PROGRESS</StackStatus>
                <StackName>vpc1</StackName>
                <CreationTime>2011-05-23T15:47:44Z</CreationTime>
                <TemplateDescription>
                    Creates one EC2 instance and a load balancer.
                </TemplateDescription>
                </member>
                <member>
                <StackId>
                    arn:aws:cloudformation:us-east-1:1234567:stack/TestDelete2/bbbbb
                </StackId>
                <StackStatus>DELETE_COMPLETE</StackStatus>
                <DeletionTime>2011-03-10T16:20:51Z</DeletionTime>
                <StackName>WP1</StackName>
                <CreationTime>2011-03-05T19:57:58Z</CreationTime>
                <TemplateDescription>
                    A simple basic Cloudformation Template.
                </TemplateDescription>
                </member>
            </StackSummaries>
            </ListStacksResult>
            <ResponseMetadata>
            <RequestId>b9b4b068-3a41-11e5-94eb-example</RequestId>
            </ResponseMetadata>
        </ListStacksResponse>"#,
        )`
$DIR/rusoto/services/cloudformation/src/custom/custom_tests.rs: `.with_request_checker(|request: &SignedRequest| {
            assert_eq!("POST", request.method);
            assert_eq!("/", request.path);
            if let Some(SignedRequestPayload::Buffer(ref buffer)) = request.payload {
                let params: Params = serde_urlencoded::from_bytes(buffer).unwrap();
                assert_eq!(
                    Some(&Some("CREATE_IN_PROGRESS".to_owned())),
                    params.get("StackStatusFilter.member.1")
                );
                assert_eq!(
                    Some(&Some("DELETE_COMPLETE".to_owned())),
                    params.get("StackStatusFilter.member.2")
                );
            } else {
                panic!("Unexpected request.payload: {:?}", request.payload);
            }
        })`
$DIR/rusoto/services/cloudformation/src/custom/custom_tests.rs: `.list_stacks(request)`
$DIR/rusoto/services/cloudformation/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/cloudformation/src/generated.rs: `.cancel_update_stack(request)`
$DIR/rusoto/services/cloudformation/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/cloudformation/src/generated.rs: `.describe_stacks(request)`
$DIR/rusoto/services/cloudformation/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/cloudformation/src/generated.rs: `.get_template(request)`
$DIR/rusoto/services/cloudformation/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/cloudformation/src/generated.rs: `.list_stacks(request)`
$DIR/rusoto/services/cloudfront/src/custom/custom_tests.rs: `.with_body(&body)`
$DIR/rusoto/services/cloudfront/src/custom/custom_tests.rs: `.list_distributions(request)`
$DIR/rusoto/services/cloudfront/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/cloudfront/src/generated.rs: `.get_cloud_front_origin_access_identity(request)`
$DIR/rusoto/services/cloudfront/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/cloudfront/src/generated.rs: `.get_distribution(request)`
$DIR/rusoto/services/cloudfront/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/cloudfront/src/generated.rs: `.get_invalidation(request)`
$DIR/rusoto/services/cloudfront/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/cloudfront/src/generated.rs: `.get_streaming_distribution(request)`
$DIR/rusoto/services/cloudfront/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/cloudfront/src/generated.rs: `.list_cloud_front_origin_access_identities(request)`
$DIR/rusoto/services/cloudfront/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/cloudfront/src/generated.rs: `.list_distributions(request)`
$DIR/rusoto/services/cloudfront/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/cloudfront/src/generated.rs: `.list_invalidations(request)`
$DIR/rusoto/services/cloudfront/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/cloudfront/src/generated.rs: `.list_streaming_distributions(request)`
$DIR/rusoto/services/cloudwatch/src/custom/custom_tests.rs: `.with_body("")`
$DIR/rusoto/services/cloudwatch/src/custom/custom_tests.rs: `.with_request_checker(|request: &SignedRequest| {
            assert_eq!("POST", request.method);
            assert_eq!("/", request.path);
            if let Some(SignedRequestPayload::Buffer(ref buffer)) = request.payload {
                let params: Params = serde_urlencoded::from_bytes(buffer).unwrap();
                assert_eq!(
                    params.get("Namespace"),
                    Some(&Some("TestNamespace".to_owned()))
                );
                assert_eq!(
                    params.get("MetricData.member.1.MetricName"),
                    Some(&Some("buffers".to_owned()))
                );
                assert_eq!(
                    params.get("MetricData.member.1.Unit"),
                    Some(&Some("Bytes".to_owned()))
                );
                assert_eq!(
                    params.get("MetricData.member.1.Value"),
                    Some(&Some("1".to_owned()))
                );
                assert_eq!(
                    params.get("MetricData.member.1.Dimensions.member.1.Name"),
                    Some(&Some("foo".to_owned()))
                );
                assert_eq!(
                    params.get("MetricData.member.1.Dimensions.member.1.Value"),
                    Some(&Some("bar".to_owned()))
                );
            } else {
                panic!("Unexpected request.payload: {:?}", request.payload);
            }
        })`
$DIR/rusoto/services/cloudwatch/src/custom/custom_tests.rs: `.put_metric_data(request)`
$DIR/rusoto/services/cloudwatch/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/cloudwatch/src/generated.rs: `.describe_alarm_history(request)`
$DIR/rusoto/services/cloudwatch/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/cloudwatch/src/generated.rs: `.describe_alarm_history(request)`
$DIR/rusoto/services/cloudwatch/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/cloudwatch/src/generated.rs: `.describe_alarms(request)`
$DIR/rusoto/services/cloudwatch/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/cloudwatch/src/generated.rs: `.list_metrics(request)`
$DIR/rusoto/services/cognito-identity/src/custom/mod.rs: `.login("provider".to_string(), "token".to_string())`
$DIR/rusoto/services/cognito-identity/src/custom/mod.rs: `.identity_id("id_id".to_string())`
$DIR/rusoto/services/cognito-identity/src/custom/mod.rs: `.build()`
$DIR/rusoto/services/cognito-identity/src/custom/mod.rs: `.identity_id("id_id".to_string())`
$DIR/rusoto/services/cognito-identity/src/custom/mod.rs: `.region(Region::EuCentral1)`
$DIR/rusoto/services/cognito-identity/src/custom/mod.rs: `.login("provider".to_string(), "token".to_string())`
$DIR/rusoto/services/cognito-identity/src/custom/mod.rs: `.custom_role_arn("arn".to_string())`
$DIR/rusoto/services/cognito-identity/src/custom/mod.rs: `.build()`
$DIR/rusoto/services/cognito-identity/src/custom/mod.rs: `.identity_id("id_id".to_string())`
$DIR/rusoto/services/cognito-identity/src/custom/mod.rs: `.region(Region::EuCentral1)`
$DIR/rusoto/services/cognito-identity/src/custom/mod.rs: `.login("provider1".to_string(), "token1".to_string())`
$DIR/rusoto/services/cognito-identity/src/custom/mod.rs: `.login("provider2".to_string(), "token2".to_string())`
$DIR/rusoto/services/cognito-identity/src/custom/mod.rs: `.build()`
$DIR/rusoto/services/dynamodb/src/custom/custom_tests.rs: `.bytes()`
$DIR/rusoto/services/dynamodb/src/custom/custom_tests.rs: `.collect()`
$DIR/rusoto/services/ec2/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/ec2/src/generated.rs: `.describe_instances(request)`
$DIR/rusoto/services/ec2/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/ec2/src/generated.rs: `.allocate_address(request)`
$DIR/rusoto/services/ec2/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/ec2/src/generated.rs: `.assign_private_ip_addresses(request)`
$DIR/rusoto/services/ec2/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/ec2/src/generated.rs: `.associate_address(request)`
$DIR/rusoto/services/ec2/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/ec2/src/generated.rs: `.associate_route_table(request)`
$DIR/rusoto/services/ec2/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/ec2/src/generated.rs: `.attach_volume(request)`
$DIR/rusoto/services/ec2/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/ec2/src/generated.rs: `.attach_vpn_gateway(request)`
$DIR/rusoto/services/ec2/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/ec2/src/generated.rs: `.bundle_instance(request)`
$DIR/rusoto/services/ec2/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/ec2/src/generated.rs: `.cancel_bundle_task(request)`
$DIR/rusoto/services/ec2/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/ec2/src/generated.rs: `.cancel_reserved_instances_listing(request)`
$DIR/rusoto/services/ec2/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/ec2/src/generated.rs: `.cancel_spot_instance_requests(request)`
$DIR/rusoto/services/ec2/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/ec2/src/generated.rs: `.confirm_product_instance(request)`
$DIR/rusoto/services/ec2/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/ec2/src/generated.rs: `.copy_snapshot(request)`
$DIR/rusoto/services/ec2/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/ec2/src/generated.rs: `.create_customer_gateway(request)`
$DIR/rusoto/services/ec2/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/ec2/src/generated.rs: `.create_dhcp_options(request)`
$DIR/rusoto/services/ec2/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/ec2/src/generated.rs: `.create_instance_export_task(request)`
$DIR/rusoto/services/ec2/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/ec2/src/generated.rs: `.create_key_pair(request)`
$DIR/rusoto/services/ec2/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/ec2/src/generated.rs: `.create_network_acl(request)`
$DIR/rusoto/services/ec2/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/ec2/src/generated.rs: `.create_network_interface(request)`
$DIR/rusoto/services/ec2/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/ec2/src/generated.rs: `.create_reserved_instances_listing(request)`
$DIR/rusoto/services/ec2/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/ec2/src/generated.rs: `.create_route_table(request)`
$DIR/rusoto/services/ec2/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/ec2/src/generated.rs: `.create_snapshot(request)`
$DIR/rusoto/services/ec2/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/ec2/src/generated.rs: `.create_spot_datafeed_subscription(request)`
$DIR/rusoto/services/ec2/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/ec2/src/generated.rs: `.create_subnet(request)`
$DIR/rusoto/services/ec2/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/ec2/src/generated.rs: `.create_volume(request)`
$DIR/rusoto/services/ec2/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/ec2/src/generated.rs: `.create_vpc(request)`
$DIR/rusoto/services/ec2/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/ec2/src/generated.rs: `.create_vpn_gateway(request)`
$DIR/rusoto/services/ec2/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/ec2/src/generated.rs: `.delete_internet_gateway(request)`
$DIR/rusoto/services/ec2/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/ec2/src/generated.rs: `.describe_account_attributes(request)`
$DIR/rusoto/services/ec2/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/ec2/src/generated.rs: `.describe_addresses(request)`
$DIR/rusoto/services/ec2/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/ec2/src/generated.rs: `.describe_availability_zones(request)`
$DIR/rusoto/services/ec2/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/ec2/src/generated.rs: `.describe_bundle_tasks(request)`
$DIR/rusoto/services/ec2/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/ec2/src/generated.rs: `.describe_customer_gateways(request)`
$DIR/rusoto/services/ec2/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/ec2/src/generated.rs: `.describe_dhcp_options(request)`
$DIR/rusoto/services/ec2/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/ec2/src/generated.rs: `.describe_export_tasks(request)`
$DIR/rusoto/services/ec2/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/ec2/src/generated.rs: `.describe_instance_attribute(request)`
$DIR/rusoto/services/ec2/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/ec2/src/generated.rs: `.describe_instance_status(request)`
$DIR/rusoto/services/ec2/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/ec2/src/generated.rs: `.describe_instances(request)`
$DIR/rusoto/services/ec2/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/ec2/src/generated.rs: `.describe_internet_gateways(request)`
$DIR/rusoto/services/ec2/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/ec2/src/generated.rs: `.describe_key_pairs(request)`
$DIR/rusoto/services/ec2/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/ec2/src/generated.rs: `.describe_network_acls(request)`
$DIR/rusoto/services/ec2/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/ec2/src/generated.rs: `.describe_network_interfaces(request)`
$DIR/rusoto/services/ec2/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/ec2/src/generated.rs: `.describe_placement_groups(request)`
$DIR/rusoto/services/ec2/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/ec2/src/generated.rs: `.describe_regions(request)`
$DIR/rusoto/services/ec2/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/ec2/src/generated.rs: `.describe_reserved_instances_offerings(request)`
$DIR/rusoto/services/ec2/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/ec2/src/generated.rs: `.describe_reserved_instances(request)`
$DIR/rusoto/services/ec2/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/ec2/src/generated.rs: `.describe_route_tables(request)`
$DIR/rusoto/services/ec2/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/ec2/src/generated.rs: `.describe_security_groups(request)`
$DIR/rusoto/services/ec2/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/ec2/src/generated.rs: `.describe_snapshots(request)`
$DIR/rusoto/services/ec2/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/ec2/src/generated.rs: `.describe_spot_instance_requests(request)`
$DIR/rusoto/services/ec2/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/ec2/src/generated.rs: `.describe_spot_price_history(request)`
$DIR/rusoto/services/ec2/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/ec2/src/generated.rs: `.describe_subnets(request)`
$DIR/rusoto/services/ec2/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/ec2/src/generated.rs: `.describe_tags(request)`
$DIR/rusoto/services/ec2/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/ec2/src/generated.rs: `.describe_volume_status(request)`
$DIR/rusoto/services/ec2/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/ec2/src/generated.rs: `.describe_volumes(request)`
$DIR/rusoto/services/ec2/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/ec2/src/generated.rs: `.describe_vpcs(request)`
$DIR/rusoto/services/ec2/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/ec2/src/generated.rs: `.describe_vpn_connections(request)`
$DIR/rusoto/services/ec2/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/ec2/src/generated.rs: `.describe_vpn_gateways(request)`
$DIR/rusoto/services/ec2/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/ec2/src/generated.rs: `.detach_network_interface(request)`
$DIR/rusoto/services/ec2/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/ec2/src/generated.rs: `.detach_volume(request)`
$DIR/rusoto/services/ec2/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/ec2/src/generated.rs: `.get_password_data(request)`
$DIR/rusoto/services/ec2/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/ec2/src/generated.rs: `.import_instance(request)`
$DIR/rusoto/services/ec2/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/ec2/src/generated.rs: `.import_key_pair(request)`
$DIR/rusoto/services/ec2/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/ec2/src/generated.rs: `.import_volume(request)`
$DIR/rusoto/services/ec2/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/ec2/src/generated.rs: `.modify_snapshot_attribute(request)`
$DIR/rusoto/services/ec2/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/ec2/src/generated.rs: `.monitor_instances(request)`
$DIR/rusoto/services/ec2/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/ec2/src/generated.rs: `.register_image(request)`
$DIR/rusoto/services/ec2/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/ec2/src/generated.rs: `.replace_network_acl_association(request)`
$DIR/rusoto/services/ec2/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/ec2/src/generated.rs: `.request_spot_instances(request)`
$DIR/rusoto/services/ec2/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/ec2/src/generated.rs: `.run_instances(request)`
$DIR/rusoto/services/ec2/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/ec2/src/generated.rs: `.start_instances(request)`
$DIR/rusoto/services/ec2/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/ec2/src/generated.rs: `.stop_instances(request)`
$DIR/rusoto/services/ec2/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/ec2/src/generated.rs: `.unmonitor_instances(request)`
$DIR/rusoto/services/elasticbeanstalk/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/elasticbeanstalk/src/generated.rs: `.check_dns_availability(request)`
$DIR/rusoto/services/elasticbeanstalk/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/elasticbeanstalk/src/generated.rs: `.create_application_version(request)`
$DIR/rusoto/services/elasticbeanstalk/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/elasticbeanstalk/src/generated.rs: `.create_application(request)`
$DIR/rusoto/services/elasticbeanstalk/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/elasticbeanstalk/src/generated.rs: `.create_configuration_template(request)`
$DIR/rusoto/services/elasticbeanstalk/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/elasticbeanstalk/src/generated.rs: `.create_environment(request)`
$DIR/rusoto/services/elasticbeanstalk/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/elasticbeanstalk/src/generated.rs: `.create_storage_location()`
$DIR/rusoto/services/elasticbeanstalk/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/elasticbeanstalk/src/generated.rs: `.delete_application(request)`
$DIR/rusoto/services/elasticbeanstalk/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/elasticbeanstalk/src/generated.rs: `.describe_application_versions(request)`
$DIR/rusoto/services/elasticbeanstalk/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/elasticbeanstalk/src/generated.rs: `.describe_applications(request)`
$DIR/rusoto/services/elasticbeanstalk/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/elasticbeanstalk/src/generated.rs: `.describe_configuration_options(request)`
$DIR/rusoto/services/elasticbeanstalk/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/elasticbeanstalk/src/generated.rs: `.describe_environments(request)`
$DIR/rusoto/services/elasticbeanstalk/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/elasticbeanstalk/src/generated.rs: `.describe_events(request)`
$DIR/rusoto/services/elasticbeanstalk/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/elasticbeanstalk/src/generated.rs: `.list_available_solution_stacks()`
$DIR/rusoto/services/elasticbeanstalk/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/elasticbeanstalk/src/generated.rs: `.retrieve_environment_info(request)`
$DIR/rusoto/services/elasticbeanstalk/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/elasticbeanstalk/src/generated.rs: `.terminate_environment(request)`
$DIR/rusoto/services/elasticbeanstalk/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/elasticbeanstalk/src/generated.rs: `.update_application_version(request)`
$DIR/rusoto/services/elasticbeanstalk/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/elasticbeanstalk/src/generated.rs: `.update_application(request)`
$DIR/rusoto/services/elb/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/elb/src/generated.rs: `.describe_load_balancers(request)`
$DIR/rusoto/services/elb/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/elb/src/generated.rs: `.describe_load_balancer_policies(request)`
$DIR/rusoto/services/elb/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/elb/src/generated.rs: `.describe_load_balancer_policy_types(request)`
$DIR/rusoto/services/elb/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/elb/src/generated.rs: `.describe_load_balancers(request)`
$DIR/rusoto/services/elbv2/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/elbv2/src/generated.rs: `.describe_load_balancers(request)`
$DIR/rusoto/services/elbv2/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/elbv2/src/generated.rs: `.describe_load_balancers(request)`
$DIR/rusoto/services/glacier/src/custom/custom_tests.rs: `.with_header("Location", "/111122223333/vaults/examplevault/multipart-uploads/OW2fM5iVylEpFEMM9_HpKowRapC3vn5sSL39_396UW9zLFUWVrnRHaPjUJddQ5OxSHVXjYtrN47NBZ-khxOjyEXAMPLE")`
$DIR/rusoto/services/glacier/src/custom/custom_tests.rs: `.with_header("x-amz-multipart-upload-id", "OW2fM5iVylEpFEMM9_HpKowRapC3vn5sSL39_396UW9zLFUWVrnRHaPjUJddQ5OxSHVXjYtrN47NBZ-khxOjyEXAMPLE")`
$DIR/rusoto/services/glacier/src/custom/custom_tests.rs: `.initiate_multipart_upload(initiate_multipart_upload_req)`
$DIR/rusoto/services/glacier/src/custom/custom_tests.rs: `.with_header("x-amz-sha256-tree-hash", "42")`
$DIR/rusoto/services/glacier/src/custom/custom_tests.rs: `.upload_multipart_part(upload_part_copy_req)`
$DIR/rusoto/services/iam/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/iam/src/generated.rs: `.get_user(request)`
$DIR/rusoto/services/iam/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/iam/src/generated.rs: `.create_virtual_mfa_device(request)`
$DIR/rusoto/services/iam/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/iam/src/generated.rs: `.get_account_summary()`
$DIR/rusoto/services/iam/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/iam/src/generated.rs: `.get_group(request)`
$DIR/rusoto/services/iam/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/iam/src/generated.rs: `.get_user_policy(request)`
$DIR/rusoto/services/iam/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/iam/src/generated.rs: `.get_user(request)`
$DIR/rusoto/services/iam/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/iam/src/generated.rs: `.list_access_keys(request)`
$DIR/rusoto/services/iam/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/iam/src/generated.rs: `.list_account_aliases(request)`
$DIR/rusoto/services/iam/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/iam/src/generated.rs: `.list_groups(request)`
$DIR/rusoto/services/iam/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/iam/src/generated.rs: `.list_instance_profiles(request)`
$DIR/rusoto/services/iam/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/iam/src/generated.rs: `.list_mfa_devices(request)`
$DIR/rusoto/services/iam/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/iam/src/generated.rs: `.list_roles(request)`
$DIR/rusoto/services/iam/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/iam/src/generated.rs: `.list_server_certificates(request)`
$DIR/rusoto/services/iam/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/iam/src/generated.rs: `.list_signing_certificates(request)`
$DIR/rusoto/services/iam/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/iam/src/generated.rs: `.list_users(request)`
$DIR/rusoto/services/iam/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/iam/src/generated.rs: `.list_virtual_mfa_devices(request)`
$DIR/rusoto/services/importexport/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/importexport/src/generated.rs: `.get_status(request)`
$DIR/rusoto/services/importexport/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/importexport/src/generated.rs: `.list_jobs(request)`
$DIR/rusoto/services/lambda/src/custom/custom_tests.rs: `.into()`
$DIR/rusoto/services/lambda/src/custom/custom_tests.rs: `.with_json_body(policy.clone())`
$DIR/rusoto/services/lambda/src/custom/custom_tests.rs: `.get_policy(GetPolicyRequest {
            function_name: "test-func".into(),
            ..GetPolicyRequest::default()
        })`
$DIR/rusoto/services/lambda/src/custom/custom_tests.rs: `.into()`
$DIR/rusoto/services/lambda/src/custom/custom_tests.rs: `.with_body(r#"{"arbitrary":"json"}"#)`
$DIR/rusoto/services/lambda/src/custom/custom_tests.rs: `.with_header("X-Amz-Function-Error", "Handled")`
$DIR/rusoto/services/lambda/src/custom/custom_tests.rs: `.with_header("X-Amz-Log-Result", "foo bar baz")`
$DIR/rusoto/services/lambda/src/custom/custom_tests.rs: `.with_request_checker(|request: &SignedRequest| {
            assert_eq!("POST", request.method);
            if let Some(SignedRequestPayload::Buffer(ref buffer)) = request.payload {
                assert_eq!(b"raw payload", buffer.as_ref());
            } else {
                panic!("request payload is not a buffer");
            }
            assert_eq!("/2015-03-31/functions/foo/invocations", request.path);
        })`
$DIR/rusoto/services/lambda/src/custom/custom_tests.rs: `.into()`
$DIR/rusoto/services/lambda/src/custom/custom_tests.rs: `.invoke(request)`
$DIR/rusoto/services/lex-runtime/src/custom/custom_tests.rs: `slots.insert("CarType".to_owned(), None);`
$DIR/rusoto/services/lex-runtime/src/custom/custom_tests.rs: `slots.insert("PickUpCity".to_owned(), Some("Boston".to_owned()));`
$DIR/rusoto/services/lex-runtime/src/custom/custom_tests.rs: `.with_body(mock_resp_body)`
$DIR/rusoto/services/lex-runtime/src/custom/custom_tests.rs: `.insert("CarType".to_owned(), None)`
$DIR/rusoto/services/lex-runtime/src/custom/custom_tests.rs: `.insert("PickUpCity".to_owned(), Some("Boston".to_owned()))`
$DIR/rusoto/services/lex-runtime/src/custom/custom_tests.rs: `.post_text(post_text_req)`
$DIR/rusoto/services/rds/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/rds/src/generated.rs: `.describe_db_instances(request)`
$DIR/rusoto/services/rds/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/rds/src/generated.rs: `.describe_db_engine_versions(request)`
$DIR/rusoto/services/rds/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/rds/src/generated.rs: `.describe_db_instances(request)`
$DIR/rusoto/services/rds/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/rds/src/generated.rs: `.describe_db_parameter_groups(request)`
$DIR/rusoto/services/rds/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/rds/src/generated.rs: `.describe_db_security_groups(request)`
$DIR/rusoto/services/rds/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/rds/src/generated.rs: `.describe_db_snapshots(request)`
$DIR/rusoto/services/rds/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/rds/src/generated.rs: `.describe_db_subnet_groups(request)`
$DIR/rusoto/services/rds/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/rds/src/generated.rs: `.describe_event_categories(request)`
$DIR/rusoto/services/rds/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/rds/src/generated.rs: `.describe_event_subscriptions(request)`
$DIR/rusoto/services/rds/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/rds/src/generated.rs: `.describe_events(request)`
$DIR/rusoto/services/rds/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/rds/src/generated.rs: `.describe_option_groups(request)`
$DIR/rusoto/services/rds/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/rds/src/generated.rs: `.describe_reserved_db_instances_offerings(request)`
$DIR/rusoto/services/rds/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/rds/src/generated.rs: `.describe_reserved_db_instances(request)`
$DIR/rusoto/services/redshift/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/redshift/src/generated.rs: `.authorize_cluster_security_group_ingress(request)`
$DIR/rusoto/services/redshift/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/redshift/src/generated.rs: `.copy_cluster_snapshot(request)`
$DIR/rusoto/services/redshift/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/redshift/src/generated.rs: `.create_cluster_parameter_group(request)`
$DIR/rusoto/services/redshift/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/redshift/src/generated.rs: `.create_cluster_security_group(request)`
$DIR/rusoto/services/redshift/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/redshift/src/generated.rs: `.create_cluster_snapshot(request)`
$DIR/rusoto/services/redshift/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/redshift/src/generated.rs: `.create_cluster_subnet_group(request)`
$DIR/rusoto/services/redshift/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/redshift/src/generated.rs: `.create_cluster(request)`
$DIR/rusoto/services/redshift/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/redshift/src/generated.rs: `.delete_cluster_parameter_group(request)`
$DIR/rusoto/services/redshift/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/redshift/src/generated.rs: `.delete_cluster_snapshot(request)`
$DIR/rusoto/services/redshift/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/redshift/src/generated.rs: `.delete_cluster(request)`
$DIR/rusoto/services/redshift/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/redshift/src/generated.rs: `.describe_cluster_parameter_groups(request)`
$DIR/rusoto/services/redshift/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/redshift/src/generated.rs: `.describe_cluster_parameters(request)`
$DIR/rusoto/services/redshift/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/redshift/src/generated.rs: `.describe_cluster_security_groups(request)`
$DIR/rusoto/services/redshift/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/redshift/src/generated.rs: `.describe_cluster_snapshots(request)`
$DIR/rusoto/services/redshift/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/redshift/src/generated.rs: `.describe_cluster_subnet_groups(request)`
$DIR/rusoto/services/redshift/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/redshift/src/generated.rs: `.describe_cluster_versions(request)`
$DIR/rusoto/services/redshift/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/redshift/src/generated.rs: `.describe_clusters(request)`
$DIR/rusoto/services/redshift/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/redshift/src/generated.rs: `.describe_events(request)`
$DIR/rusoto/services/redshift/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/redshift/src/generated.rs: `.describe_orderable_cluster_options(request)`
$DIR/rusoto/services/redshift/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/redshift/src/generated.rs: `.describe_reserved_node_offerings(request)`
$DIR/rusoto/services/redshift/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/redshift/src/generated.rs: `.describe_reserved_nodes(request)`
$DIR/rusoto/services/redshift/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/redshift/src/generated.rs: `.describe_resize(request)`
$DIR/rusoto/services/redshift/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/redshift/src/generated.rs: `.modify_cluster_parameter_group(request)`
$DIR/rusoto/services/redshift/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/redshift/src/generated.rs: `.purchase_reserved_node_offering(request)`
$DIR/rusoto/services/redshift/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/redshift/src/generated.rs: `.reboot_cluster(request)`
$DIR/rusoto/services/redshift/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/redshift/src/generated.rs: `.reset_cluster_parameter_group(request)`
$DIR/rusoto/services/redshift/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/redshift/src/generated.rs: `.restore_from_cluster_snapshot(request)`
$DIR/rusoto/services/redshift/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/redshift/src/generated.rs: `.revoke_cluster_security_group_ingress(request)`
$DIR/rusoto/services/route53/src/custom/custom_tests.rs: `.with_body(
        r#"<?xml version="1.0"?>
            <ErrorResponse xmlns="https://route53.amazonaws.com/doc/2013-04-01/">
                <Error>
                    <Type>Sender</Type>
                    <Code>NoSuchHostedZone</Code>
                    <Message>No hosted zone found with ID: NO-SUCH-ZONE</Message>
                </Error>
                <RequestId>20c2984f-279e-11e8-9a16-83e7725d8022</RequestId>
            </ErrorResponse>"#,
    )`
$DIR/rusoto/services/route53/src/custom/custom_tests.rs: `.list_resource_record_sets(request)`
$DIR/rusoto/services/route53/src/custom/custom_tests.rs: `.err()`
$DIR/rusoto/services/route53/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/route53/src/generated.rs: `.get_hosted_zone(request)`
$DIR/rusoto/services/s3/src/custom/custom_tests.rs: `req.bucket = "rusoto1440826511".to_owned();`
$DIR/rusoto/services/s3/src/custom/custom_tests.rs: `req.key = "testfile.zip".to_owned();`
$DIR/rusoto/services/s3/src/custom/custom_tests.rs: `req.bucket = "test-bucket".to_owned();`
$DIR/rusoto/services/s3/src/custom/custom_tests.rs: `assert_clone::<GetObjectRequest>();`
$DIR/rusoto/services/s3/src/custom/custom_tests.rs: `request = HeadObjectRequest::default();`
$DIR/rusoto/services/s3/src/custom/custom_tests.rs: `result = client.head_object(request).await.unwrap();`
$DIR/rusoto/services/s3/src/custom/custom_tests.rs: `.with_body(
        r#"<?xml version="1.0" encoding="UTF-8"?>
            <CopyPartResult xmlns="http://s3.amazonaws.com/doc/2006-03-01/">
                <LastModified>2018-11-10T02:47:18.000Z</LastModified>
                <ETag>&quot;9a9d1bbe80188883302bff764b4cb321&quot;</ETag>
            </CopyPartResult>"#,
    )`
$DIR/rusoto/services/s3/src/custom/custom_tests.rs: `.upload_part_copy(upload_part_copy_req)`
$DIR/rusoto/services/s3/src/custom/custom_tests.rs: `.with_body(
        r#"<?xml version="1.0" encoding="UTF-8"?>
        <ListVersionsResult xmlns="http://s3.amazonaws.com/doc/2006-03-01/">
          <DeleteMarker>
          </DeleteMarker>
          <Version>
          </Version>
          <DeleteMarker>
          </DeleteMarker>
          <Version>
          </Version>
        </ListVersionsResult>
        "#,
    )`
$DIR/rusoto/services/s3/src/custom/custom_tests.rs: `.list_object_versions(ListObjectVersionsRequest {
            bucket: "test_bucket".to_string(),
            ..Default::default()
        })`
$DIR/rusoto/services/s3/src/custom/custom_tests.rs: `.with_body(&body)`
$DIR/rusoto/services/s3/src/custom/custom_tests.rs: `.create_multipart_upload(CreateMultipartUploadRequest {
            bucket: "example-bucket".to_owned(),
            key: "example-object".to_owned(),
            ..Default::default()
        })`
$DIR/rusoto/services/s3/src/custom/custom_tests.rs: `.with_body(&body)`
$DIR/rusoto/services/s3/src/custom/custom_tests.rs: `.complete_multipart_upload(CompleteMultipartUploadRequest {
            bucket: "example-bucket".to_owned(),
            key: "example-object".to_owned(),
            upload_id: "VXBsb2FkIElEIGZvciA2aWWpbmcncyBteS1tb3ZpZS5tMnRzIHVwbG9hZA".to_owned(),
            ..Default::default()
        })`
$DIR/rusoto/services/s3/src/custom/custom_tests.rs: `.with_body(&body)`
$DIR/rusoto/services/s3/src/custom/custom_tests.rs: `.list_multipart_uploads(ListMultipartUploadsRequest {
            bucket: "example-bucket".to_owned(),
            ..Default::default()
        })`
$DIR/rusoto/services/s3/src/custom/custom_tests.rs: `.with_body(r#"
        <?xml version="1.0" encoding="UTF-8"?>
        <ListPartsResult xmlns="http://s3.amazonaws.com/doc/2006-03-01/">
            <Bucket>rusoto1440826511</Bucket>
            <Key>testfile.zip</Key>
            <UploadId>PeePB_uORK5f2AURP_SWcQ4NO1P1oqnGNNNFK3nhFfzMeksdvG7x7nFfH1qk7a3HSossNYB7t8QhcN1Fg6ax7AXbwvAKIZ9DilB4tUcpM7qyUEgkszN4iDmMvSaImGFK</UploadId>
            <Initiator>
                <ID>arn:aws:iam::347452556412:user/matthew</ID>
                <DisplayName>matthew</DisplayName>
            </Initiator>
            <Owner>
                <ID>b84c6b0c308085829b6562b586f6664fc00faab6cfd441e90ad418ea916eed83</ID>
                <DisplayName>matthew</DisplayName>
            </Owner>
            <StorageClass>STANDARD</StorageClass>
            <PartNumberMarker>0</PartNumberMarker>
            <NextPartNumberMarker>2</NextPartNumberMarker>
            <MaxParts>1000</MaxParts>
            <IsTruncated>false</IsTruncated>
            <Part>
                <PartNumber>1</PartNumber>
                <LastModified>2015-09-08T21:02:04.000Z</LastModified>
                <ETag>&quot;ddcaa99616d7cd06d0a5abfef6ccebbb&quot;</ETag>
                <Size>5242880</Size>
            </Part>
            <Part>
                <PartNumber>2</PartNumber>
                <LastModified>2015-09-08T21:02:09.000Z</LastModified>
                <ETag>&quot;c865f7d241e2c9e3d3b5fee6955c616e&quot;</ETag>
                <Size>5242880</Size>
            </Part>
        </ListPartsResult>"#)`
$DIR/rusoto/services/s3/src/custom/custom_tests.rs: `.with_request_checker(|request: &SignedRequest| {
            assert_eq!(request.method, "GET");
            assert_eq!(request.path, "/rusoto1440826511/testfile.zip");
            assert!(request.payload.is_none());
        })`
$DIR/rusoto/services/s3/src/custom/custom_tests.rs: `.list_parts(req)`
$DIR/rusoto/services/s3/src/custom/custom_tests.rs: `.with_body(
        r#"
        <?xml version="1.0" encoding="UTF-8"?>
        <ListMultipartUploadsResult xmlns="http://s3.amazonaws.com/doc/2006-03-01/">
            <Bucket>rusoto1440826568</Bucket>
            <KeyMarker></KeyMarker>
            <UploadIdMarker></UploadIdMarker>
            <NextKeyMarker></NextKeyMarker>
            <NextUploadIdMarker></NextUploadIdMarker>
            <MaxUploads>1000</MaxUploads>
            <IsTruncated>false</IsTruncated>
        </ListMultipartUploadsResult>
    "#,
    )`
$DIR/rusoto/services/s3/src/custom/custom_tests.rs: `.list_multipart_uploads(req)`
$DIR/rusoto/services/s3/src/custom/custom_tests.rs: `.with_body(
            r#"
        <?xml version="1.0" encoding="UTF-8"?>
        <ListAllMyBucketsResult xmlns="http://s3.amazonaws.com/doc/2006-03-01">
            <Owner>
            <ID>bcaf1ffd86f461ca5fb16fd081034f</ID>
            <DisplayName>webfile</DisplayName>
            </Owner>
            <Buckets>
            <Bucket>
                    <Name>quotes</Name>
                    <CreationDate>2006-02-03T16:45:09.000Z</CreationDate>
            </Bucket>
            <Bucket>
                    <Name>samples</Name>
                    <CreationDate>2006-02-03T16:41:58.000Z</CreationDate>
            </Bucket>
            </Buckets>
        </ListAllMyBucketsResult>
        "#,
        )`
$DIR/rusoto/services/s3/src/custom/custom_tests.rs: `.with_request_checker(|request: &SignedRequest| {
            assert_eq!(request.method, "GET");
            assert_eq!(request.path, "/");
            assert!(request.payload.is_none());
        })`
$DIR/rusoto/services/s3/src/custom/custom_tests.rs: `.list_buckets()`
$DIR/rusoto/services/s3/src/custom/custom_tests.rs: `.get(0)`
$DIR/rusoto/services/s3/src/custom/custom_tests.rs: `.with_body("")`
$DIR/rusoto/services/s3/src/custom/custom_tests.rs: `.with_header("x-amz-expiration", "foo")`
$DIR/rusoto/services/s3/src/custom/custom_tests.rs: `.with_header("x-amz-restore", "bar")`
$DIR/rusoto/services/s3/src/custom/custom_tests.rs: `.head_object(request)`
$DIR/rusoto/services/s3/src/custom/custom_tests.rs: `.with_body("")`
$DIR/rusoto/services/s3/src/custom/custom_tests.rs: `.with_request_checker(|request: &SignedRequest| {
            assert_eq!(request.method, "GET");
            assert_eq!(request.path, "/bucket/key");
            assert_eq!(
                *request.params.get("response-content-type").unwrap(),
                sstr("response_content_type")
            );
            assert!(request
                .headers
                .get("range")
                .unwrap()
                .contains(&Vec::from("range")));
            assert!(request.payload.is_none());
        })`
$DIR/rusoto/services/s3/src/custom/custom_tests.rs: `.get_object(request)`
$DIR/rusoto/services/s3/src/custom/custom_tests.rs: `.with_body(&body)`
$DIR/rusoto/services/s3/src/custom/custom_tests.rs: `.get_bucket_location(GetBucketLocationRequest {
            bucket: "example-bucket".to_owned(),
            expected_bucket_owner: sstr("expected_bucket_owner"),
        })`
$DIR/rusoto/services/s3/src/custom/custom_tests.rs: `.into()`
$DIR/rusoto/services/s3/src/custom/custom_tests.rs: `.map_ok(|b| BytesMut::from(&b[..]))`
$DIR/rusoto/services/s3/src/custom/custom_tests.rs: `.try_concat()`
$DIR/rusoto/services/s3/src/custom/custom_tests.rs: `.with_body(
        r#"<?xml version="1.0" encoding="UTF-8"?>
        <Error>
            <Code>NoSuchBucket</Code>
            <Message>The specified bucket does not exist</Message>
            <RequestId>4442587FB7D0A2F9</RequestId>
        </Error>"#,
    )`
$DIR/rusoto/services/s3/src/custom/custom_tests.rs: `.list_objects_v2(request)`
$DIR/rusoto/services/s3/src/custom/custom_tests.rs: `.err()`
$DIR/rusoto/services/s3/src/custom/custom_tests.rs: `.head_object(request)`
$DIR/rusoto/services/s3/src/custom/custom_tests.rs: `.head_object(request)`
$DIR/rusoto/services/s3/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/s3/src/generated.rs: `.create_bucket(request)`
$DIR/rusoto/services/s3/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/s3/src/generated.rs: `.list_objects(request)`
$DIR/rusoto/services/s3/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/s3/src/generated.rs: `.get_bucket_acl(request)`
$DIR/rusoto/services/s3/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/s3/src/generated.rs: `.get_bucket_location(request)`
$DIR/rusoto/services/s3/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/s3/src/generated.rs: `.get_bucket_logging(request)`
$DIR/rusoto/services/s3/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/s3/src/generated.rs: `.get_bucket_policy(request)`
$DIR/rusoto/services/s3/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/s3/src/generated.rs: `.list_buckets()`
$DIR/rusoto/services/s3/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/s3/src/generated.rs: `.list_multipart_uploads(request)`
$DIR/rusoto/services/s3/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/s3/src/generated.rs: `.list_object_versions(request)`
$DIR/rusoto/services/s3/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/s3/src/generated.rs: `.list_objects(request)`
$DIR/rusoto/services/ses/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/ses/src/generated.rs: `.delete_identity(request)`
$DIR/rusoto/services/ses/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/ses/src/generated.rs: `.delete_identity(request)`
$DIR/rusoto/services/ses/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/ses/src/generated.rs: `.get_identity_dkim_attributes(request)`
$DIR/rusoto/services/ses/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/ses/src/generated.rs: `.get_identity_notification_attributes(request)`
$DIR/rusoto/services/ses/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/ses/src/generated.rs: `.get_identity_verification_attributes(request)`
$DIR/rusoto/services/ses/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/ses/src/generated.rs: `.get_send_quota()`
$DIR/rusoto/services/ses/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/ses/src/generated.rs: `.get_send_statistics()`
$DIR/rusoto/services/ses/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/ses/src/generated.rs: `.list_identities(request)`
$DIR/rusoto/services/ses/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/ses/src/generated.rs: `.send_email(request)`
$DIR/rusoto/services/ses/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/ses/src/generated.rs: `.send_raw_email(request)`
$DIR/rusoto/services/ses/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/ses/src/generated.rs: `.set_identity_dkim_enabled(request)`
$DIR/rusoto/services/ses/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/ses/src/generated.rs: `.verify_domain_dkim(request)`
$DIR/rusoto/services/ses/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/ses/src/generated.rs: `.verify_domain_identity(request)`
$DIR/rusoto/services/sns/src/custom/custom_tests.rs: `sns_input_attrib.insert(
        "PlatformCredential".to_string(),
        "YOUR_PLATFORM_CREDENTIAL".to_string(),
    );`
$DIR/rusoto/services/sns/src/custom/custom_tests.rs: `sns_input_attrib.insert(
        "PlatformPrincipal".to_string(),
        "YOUR_PLATFORM_PRINCIPAL".to_string(),
    );`
$DIR/rusoto/services/sns/src/custom/custom_tests.rs: `sns_input_attrib.insert("Enabled".to_string(), "false".to_string());`
$DIR/rusoto/services/sns/src/custom/custom_tests.rs: `sns_input_attrib.insert(
        "PlatformCredential".to_string(),
        "YOUR_PLATFORM_CREDENTIAL".to_string(),
    );`
$DIR/rusoto/services/sns/src/custom/custom_tests.rs: `sns_input_attrib.insert("Enabled".to_string(), "false".to_string());`
$DIR/rusoto/services/sns/src/custom/custom_tests.rs: `sns_input_attrib.insert("DefaultSMSType".to_string(), "Promotional".to_string());`
$DIR/rusoto/services/sns/src/custom/custom_tests.rs: `.with_request_checker(|request: &SignedRequest| {
            assert_eq!("POST", request.method);

            if let Some(SignedRequestPayload::Buffer(ref buffer)) = request.payload {
                let params: Params = serde_urlencoded::from_bytes(buffer).unwrap();
                for idx in 1..2 {
                    let key = params.get(format!("Attributes.entry.{}.key", idx).as_str());
                    match key.unwrap().as_ref().unwrap().as_str() {
                        "PlatformCredential" => {
                            assert_eq!(
                                Some(&Some("YOUR_PLATFORM_CREDENTIAL".to_owned())),
                                params.get(format!("Attributes.entry.{}.value", idx).as_str())
                            );
                        }
                        "PlatformPrincipal" => {
                            assert_eq!(
                                Some(&Some("YOUR_PLATFORM_PRINCIPAL".to_owned())),
                                params.get(format!("Attributes.entry.{}.value", idx).as_str())
                            );
                        }
                        _ => panic!("invalid params. {:?}", params),
                    }
                }
            } else {
                panic!("Unexpected request.payload: {:?}", request.payload);
            }
        })`
$DIR/rusoto/services/sns/src/custom/custom_tests.rs: `.get(format!("Attributes.entry.{}.key", idx).as_str())`
$DIR/rusoto/services/sns/src/custom/custom_tests.rs: `.insert(
        "PlatformCredential".to_string(),
        "YOUR_PLATFORM_CREDENTIAL".to_string(),
    )`
$DIR/rusoto/services/sns/src/custom/custom_tests.rs: `.insert(
        "PlatformPrincipal".to_string(),
        "YOUR_PLATFORM_PRINCIPAL".to_string(),
    )`
$DIR/rusoto/services/sns/src/custom/custom_tests.rs: `.create_platform_application(sns_input)`
$DIR/rusoto/services/sns/src/custom/custom_tests.rs: `.with_request_checker(|request: &SignedRequest| {
            assert_eq!("POST", request.method);

            if let Some(SignedRequestPayload::Buffer(ref buffer)) = request.payload {
                let params: Params = serde_urlencoded::from_bytes(buffer).unwrap();
                assert_eq!(
                    Some(&Some("Enabled".to_owned())),
                    params.get("Attributes.entry.1.key")
                );
                assert_eq!(
                    Some(&Some("false".to_owned())),
                    params.get("Attributes.entry.1.value")
                );
            } else {
                panic!("Unexpected request.payload: {:?}", request.payload);
            }
        })`
$DIR/rusoto/services/sns/src/custom/custom_tests.rs: `.insert("Enabled".to_string(), "false".to_string())`
$DIR/rusoto/services/sns/src/custom/custom_tests.rs: `.create_platform_endpoint(sns_input)`
$DIR/rusoto/services/sns/src/custom/custom_tests.rs: `.with_request_checker(|request: &SignedRequest| {
            assert_eq!("POST", request.method);

            if let Some(SignedRequestPayload::Buffer(ref buffer)) = request.payload {
                let params: Params = serde_urlencoded::from_bytes(buffer).unwrap();
                assert_eq!(
                    Some(&Some("PlatformCredential".to_owned())),
                    params.get("Attributes.entry.1.key")
                );
                assert_eq!(
                    Some(&Some("YOUR_PLATFORM_CREDENTIAL".to_owned())),
                    params.get("Attributes.entry.1.value")
                );
            } else {
                panic!("Unexpected request.payload: {:?}", request.payload);
            }
        })`
$DIR/rusoto/services/sns/src/custom/custom_tests.rs: `.insert(
        "PlatformCredential".to_string(),
        "YOUR_PLATFORM_CREDENTIAL".to_string(),
    )`
$DIR/rusoto/services/sns/src/custom/custom_tests.rs: `.set_platform_application_attributes(sns_input)`
$DIR/rusoto/services/sns/src/custom/custom_tests.rs: `.with_request_checker(|request: &SignedRequest| {
            assert_eq!("POST", request.method);

            if let Some(SignedRequestPayload::Buffer(ref buffer)) = request.payload {
                let params: Params = serde_urlencoded::from_bytes(buffer).unwrap();
                assert_eq!(
                    Some(&Some("Enabled".to_owned())),
                    params.get("Attributes.entry.1.key")
                );
                assert_eq!(
                    Some(&Some("false".to_owned())),
                    params.get("Attributes.entry.1.value")
                );
            } else {
                panic!("Unexpected request.payload: {:?}", request.payload);
            }
        })`
$DIR/rusoto/services/sns/src/custom/custom_tests.rs: `.insert("Enabled".to_string(), "false".to_string())`
$DIR/rusoto/services/sns/src/custom/custom_tests.rs: `.set_endpoint_attributes(sns_input)`
$DIR/rusoto/services/sns/src/custom/custom_tests.rs: `.with_body(
        r#"<GetSMSAttributesResponse xmlns="http://sns.amazonaws.com/doc/2010-03-31/">
              <GetSMSAttributesResult>
                <attributes>
                  <entry>
                    <key>DefaultSMSType</key>
                    <value>Promotional</value>
                  </entry>
                </attributes>
              </GetSMSAttributesResult>
              <ResponseMetadata>
                <RequestId>7e20a670-be23-5b05-9364-f02cc763f409</RequestId>
              </ResponseMetadata>
            </GetSMSAttributesResponse>"#,
    )`
$DIR/rusoto/services/sns/src/custom/custom_tests.rs: `.get_sms_attributes(sns_input)`
$DIR/rusoto/services/sns/src/custom/custom_tests.rs: `.with_request_checker(|request: &SignedRequest| {
            assert_eq!("POST", request.method);

            if let Some(SignedRequestPayload::Buffer(ref buffer)) = request.payload {
                let params: Params = serde_urlencoded::from_bytes(buffer).unwrap();
                assert_eq!(
                    Some(&Some("DefaultSMSType".to_owned())),
                    params.get("attributes.entry.1.key")
                );
                assert_eq!(
                    Some(&Some("Promotional".to_owned())),
                    params.get("attributes.entry.1.value")
                );
            } else {
                panic!("Unexpected request.payload: {:?}", request.payload);
            }
        })`
$DIR/rusoto/services/sns/src/custom/custom_tests.rs: `.insert("DefaultSMSType".to_string(), "Promotional".to_string())`
$DIR/rusoto/services/sns/src/custom/custom_tests.rs: `.set_sms_attributes(sns_input)`
$DIR/rusoto/services/sns/src/custom/custom_tests.rs: `.with_body(
            r#"<GetSubscriptionAttributesResponse xmlns="https://sns.amazonaws.com/doc/2010-03-31/">
                <GetSubscriptionAttributesResult>
                    <Attributes>
                        <entry>
                            <key>Owner</key>
                            <value>123456789012</value>
                        </entry>
                        <entry>
                            <key>DeliveryPolicy</key>
                            <value>{&quot;healthyRetryPolicy&quot;:{&quot;numRetries&quot;:10}}</value>
                        </entry>
                        <entry>
                            <key>SubscriptionArn</key>
                            <value>arn:aws:sns:us-east-2:123456789012:My-Topic:80289ba6-0fd4-4079-afb4-ce8c8260f0ca</value>
                        </entry>
                    </Attributes>
                </GetSubscriptionAttributesResult>
                <ResponseMetadata>
                    <RequestId>057f074c-33a7-11df-9540-99d0768312d3</RequestId>
                </ResponseMetadata>
            </GetSubscriptionAttributesResponse>"#,
        )`
$DIR/rusoto/services/sns/src/custom/custom_tests.rs: `.get_subscription_attributes(sns_input)`
$DIR/rusoto/services/sns/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/sns/src/generated.rs: `.delete_topic(request)`
$DIR/rusoto/services/sns/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/sns/src/generated.rs: `.add_permission(request)`
$DIR/rusoto/services/sns/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/sns/src/generated.rs: `.confirm_subscription(request)`
$DIR/rusoto/services/sns/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/sns/src/generated.rs: `.create_topic(request)`
$DIR/rusoto/services/sns/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/sns/src/generated.rs: `.get_subscription_attributes(request)`
$DIR/rusoto/services/sns/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/sns/src/generated.rs: `.get_topic_attributes(request)`
$DIR/rusoto/services/sns/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/sns/src/generated.rs: `.list_subscriptions_by_topic(request)`
$DIR/rusoto/services/sns/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/sns/src/generated.rs: `.list_subscriptions(request)`
$DIR/rusoto/services/sns/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/sns/src/generated.rs: `.list_topics(request)`
$DIR/rusoto/services/sns/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/sns/src/generated.rs: `.publish(request)`
$DIR/rusoto/services/sns/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/sns/src/generated.rs: `.subscribe(request)`
$DIR/rusoto/services/sqs/src/custom/custom_tests.rs: `message_attributes.insert(
        "test_attribute_name".to_owned(),
        MessageAttributeValue {
            string_value: Some("test_attribute_value".to_owned()),
            data_type: "String".to_owned(),
            ..Default::default()
        },
    );`
$DIR/rusoto/services/sqs/src/custom/custom_tests.rs: `message_attributes.insert(
        "test_attribute_name".to_owned(),
        MessageAttributeValue {
            string_value: Some("test_attribute_value".to_owned()),
            data_type: "String".to_owned(),
            ..Default::default()
        },
    );`
$DIR/rusoto/services/sqs/src/custom/custom_tests.rs: `.with_body(
            r#"<?xml version="1.0" encoding="UTF-8"?>
        <SendMessageResponse>
            <SendMessageResult>
                <MD5OfMessageBody>
                    fafb00f5732ab283681e124bf8747ed1
                </MD5OfMessageBody>
                <MD5OfMessageAttributes>
            3ae8f24a165a8cedc005670c81a27295
                </MD5OfMessageAttributes>
                <MessageId>
                    5fea7756-0ea4-451a-a703-a558b933e274
                </MessageId>
            </SendMessageResult>
            <ResponseMetadata>
                <RequestId>
                    27daac76-34dd-47df-bd01-1f6e873584a0
                </RequestId>
            </ResponseMetadata>
        </SendMessageResponse>"#,
        )`
$DIR/rusoto/services/sqs/src/custom/custom_tests.rs: `.with_request_checker(|request: &SignedRequest| {
            println!("{:#?}", request.params);

            assert_eq!("POST", request.method);
            assert_eq!("/", request.path);
            if let Some(SignedRequestPayload::Buffer(ref buffer)) = request.payload {
                let params: Params = serde_urlencoded::from_bytes(buffer).unwrap();
                assert_eq!(
                    Some(&Some("test_attribute_name".to_owned())),
                    params.get("MessageAttribute.1.Name")
                );
                assert_eq!(
                    Some(&Some("test_attribute_value".to_owned())),
                    params.get("MessageAttribute.1.Value.StringValue")
                );
                assert_eq!(
                    Some(&Some("String".to_owned())),
                    params.get("MessageAttribute.1.Value.DataType")
                );
            } else {
                panic!("Unexpected request.payload: {:?}", request.payload);
            }
        })`
$DIR/rusoto/services/sqs/src/custom/custom_tests.rs: `.insert(
        "test_attribute_name".to_owned(),
        MessageAttributeValue {
            string_value: Some("test_attribute_value".to_owned()),
            data_type: "String".to_owned(),
            ..Default::default()
        },
    )`
$DIR/rusoto/services/sqs/src/custom/custom_tests.rs: `.send_message(request)`
$DIR/rusoto/services/sqs/src/custom/custom_tests.rs: `.with_body(
            r#"<?xml version="1.0" encoding="UTF-8"?>
        <ReceiveMessageResponse>
            <ReceiveMessageResult>
            <Message>
                <MessageId>
                5fea7756-0ea4-451a-a703-a558b933e274
                </MessageId>
                <ReceiptHandle>
                MbZj6wDWli+JvwwJaBV+3dcjk2YW2vA3+STFFljTM8tJJg6HRG6PYSasuWXPJB+Cw
                Lj1FjgXUv1uSj1gUPAWV66FU/WeR4mq2OKpEGYWbnLmpRCJVAyeMjeU5ZBdtcQ+QE
                auMZc8ZRv37sIW2iJKq3M9MFx1YvV11A2x/KSbkJ0=
                </ReceiptHandle>
                <MD5OfBody>
                fafb00f5732ab283681e124bf8747ed1
                </MD5OfBody>
                <Body>This is a test message</Body>
                <Attribute>
                <Name>SenderId</Name>
                <Value>195004372649</Value>
                </Attribute>
            </Message>
            </ReceiveMessageResult>
            <ResponseMetadata>
            <RequestId>
                b6633655-283d-45b4-aee4-4e84e0ae6afa
            </RequestId>
            </ResponseMetadata>
        </ReceiveMessageResponse>"#,
        )`
$DIR/rusoto/services/sqs/src/custom/custom_tests.rs: `.with_request_checker(|request: &SignedRequest| {
            assert_eq!("POST", request.method);
            assert_eq!("/", request.path);
            if let Some(SignedRequestPayload::Buffer(ref buffer)) = request.payload {
                let params: Params = serde_urlencoded::from_bytes(buffer).unwrap();
                assert_eq!(
                    params.get("Action"),
                    Some(&Some("ReceiveMessage".to_owned()))
                );
                assert_eq!(
                    params.get("MaxNumberOfMessages"),
                    Some(&Some("1".to_owned()))
                );
                assert_eq!(params.get("VisibilityTimeout"), Some(&Some("2".to_owned())));
                assert_eq!(params.get("WaitTimeSeconds"), Some(&Some("3".to_owned())));
                assert_eq!(params.get("Integer"), None);
            } else {
                panic!("Unexpected request.payload: {:?}", request.payload);
            }
        })`
$DIR/rusoto/services/sqs/src/custom/custom_tests.rs: `.receive_message(request)`
$DIR/rusoto/services/sqs/src/custom/custom_tests.rs: `.with_body(
        r#"<?xml version="1.0"?>
        <ErrorResponse xmlns="http://queue.amazonaws.com/doc/2012-11-05/">
            <Error>
                <Type>Sender</Type>
                <Code>AWS.SimpleQueueService.NonExistentQueue</Code>
                <Message>The specified queue does not exist for this wsdl version.</Message>
                <Detail/>
            </Error>
            <RequestId>8f8f9957-c0d9-536a-9ca6-ca7483be06ad</RequestId>
        </ErrorResponse>"#,
    )`
$DIR/rusoto/services/sqs/src/custom/custom_tests.rs: `.get_queue_url(request)`
$DIR/rusoto/services/sqs/src/custom/custom_tests.rs: `.err()`
$DIR/rusoto/services/sqs/src/custom/custom_tests.rs: `.with_body(
            r#"<?xml version="1.0" encoding="UTF-8"?>
        <ReceiveMessageResponse>
            <ReceiveMessageResult>
            <Message>
                <MessageId>
                    5fea7756-0ea4-451a-a703-a558b933e274
                </MessageId>
                <ReceiptHandle>
                    MbZj6wDWli+JvwwJaBV+3dcjk2YW2vA3+STFFljTM8tJJg6HRG6PYSasuWXPJB+Cw
                    Lj1FjgXUv1uSj1gUPAWV66FU/WeR4mq2OKpEGYWbnLmpRCJVAyeMjeU5ZBdtcQ+QE
                    auMZc8ZRv37sIW2iJKq3M9MFx1YvV11A2x/KSbkJ0=
                </ReceiptHandle>
                <MD5OfBody>
                    fafb00f5732ab283681e124bf8747ed1
                </MD5OfBody>
                <Body>This is a test message</Body>
                <MessageAttribute>
                    <Name>test_attribute_name</Name>
                    <Value>
                        <DataType>String</DataType>
                        <StringValue>test_attribute_value</StringValue>
                    </Value>
                </MessageAttribute>
            </Message>
            </ReceiveMessageResult>
            <ResponseMetadata>
            <RequestId>
                b6633655-283d-45b4-aee4-4e84e0ae6afa
            </RequestId>
            </ResponseMetadata>
        </ReceiveMessageResponse>"#,
        )`
$DIR/rusoto/services/sqs/src/custom/custom_tests.rs: `.receive_message(request)`
$DIR/rusoto/services/sqs/src/custom/custom_tests.rs: `.pop()`
$DIR/rusoto/services/sqs/src/custom/custom_tests.rs: `.insert(
        "test_attribute_name".to_owned(),
        MessageAttributeValue {
            string_value: Some("test_attribute_value".to_owned()),
            data_type: "String".to_owned(),
            ..Default::default()
        },
    )`
$DIR/rusoto/services/sqs/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/sqs/src/generated.rs: `.delete_queue(request)`
$DIR/rusoto/services/sqs/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/sqs/src/generated.rs: `.add_permission(request)`
$DIR/rusoto/services/sqs/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/sqs/src/generated.rs: `.change_message_visibility_batch(request)`
$DIR/rusoto/services/sqs/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/sqs/src/generated.rs: `.create_queue(request)`
$DIR/rusoto/services/sqs/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/sqs/src/generated.rs: `.delete_message_batch(request)`
$DIR/rusoto/services/sqs/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/sqs/src/generated.rs: `.get_queue_attributes(request)`
$DIR/rusoto/services/sqs/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/sqs/src/generated.rs: `.get_queue_url(request)`
$DIR/rusoto/services/sqs/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/sqs/src/generated.rs: `.list_queues(request)`
$DIR/rusoto/services/sqs/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/sqs/src/generated.rs: `.receive_message(request)`
$DIR/rusoto/services/sqs/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/sqs/src/generated.rs: `.send_message_batch(request)`
$DIR/rusoto/services/sqs/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/sqs/src/generated.rs: `.send_message(request)`
$DIR/rusoto/services/sts/src/custom/credential.rs: `is_send::<StsSessionCredentialsProvider>();`
$DIR/rusoto/services/sts/src/custom/credential.rs: `is_send::<StsAssumeRoleSessionCredentialsProvider>();`
$DIR/rusoto/services/sts/src/custom/web_identity.rs: `writeln!(file, "{}", TOKEN_VALUE)?;`
$DIR/rusoto/services/sts/src/custom/web_identity.rs: `.path()`
$DIR/rusoto/services/sts/src/custom/web_identity.rs: `.to_string_lossy()`
$DIR/rusoto/services/sts/src/custom/web_identity.rs: `.load_token()`
$DIR/rusoto/services/sts/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/sts/src/generated.rs: `.get_session_token(request)`
$DIR/rusoto/services/sts/src/generated.rs: `.with_body(&mock_response)`
$DIR/rusoto/services/sts/src/generated.rs: `.get_session_token(request)`
$DIR/rusoto/signature/src/region.rs: `assert_tokens(&Region::ApEast1, &tokens_for_region("ap-east-1"));`
$DIR/rusoto/signature/src/region.rs: `assert_tokens(&Region::ApNortheast1, &tokens_for_region("ap-northeast-1"));`
$DIR/rusoto/signature/src/region.rs: `assert_tokens(&Region::ApNortheast2, &tokens_for_region("ap-northeast-2"));`
$DIR/rusoto/signature/src/region.rs: `assert_tokens(&Region::ApNortheast3, &tokens_for_region("ap-northeast-3"));`
$DIR/rusoto/signature/src/region.rs: `assert_tokens(&Region::ApSouth1, &tokens_for_region("ap-south-1"));`
$DIR/rusoto/signature/src/region.rs: `assert_tokens(&Region::ApSoutheast1, &tokens_for_region("ap-southeast-1"));`
$DIR/rusoto/signature/src/region.rs: `assert_tokens(&Region::ApSoutheast2, &tokens_for_region("ap-southeast-2"));`
$DIR/rusoto/signature/src/region.rs: `assert_tokens(&Region::ApSoutheast3, &tokens_for_region("ap-southeast-3"));`
$DIR/rusoto/signature/src/region.rs: `assert_tokens(&Region::CaCentral1, &tokens_for_region("ca-central-1"));`
$DIR/rusoto/signature/src/region.rs: `assert_tokens(&Region::EuCentral1, &tokens_for_region("eu-central-1"));`
$DIR/rusoto/signature/src/region.rs: `assert_tokens(&Region::EuWest1, &tokens_for_region("eu-west-1"));`
$DIR/rusoto/signature/src/region.rs: `assert_tokens(&Region::EuWest2, &tokens_for_region("eu-west-2"));`
$DIR/rusoto/signature/src/region.rs: `assert_tokens(&Region::EuWest3, &tokens_for_region("eu-west-3"));`
$DIR/rusoto/signature/src/region.rs: `assert_tokens(&Region::EuNorth1, &tokens_for_region("eu-north-1"));`
$DIR/rusoto/signature/src/region.rs: `assert_tokens(&Region::EuSouth1, &tokens_for_region("eu-south-1"));`
$DIR/rusoto/signature/src/region.rs: `assert_tokens(&Region::MeSouth1, &tokens_for_region("me-south-1"));`
$DIR/rusoto/signature/src/region.rs: `assert_tokens(&Region::SaEast1, &tokens_for_region("sa-east-1"));`
$DIR/rusoto/signature/src/region.rs: `assert_tokens(&Region::UsEast1, &tokens_for_region("us-east-1"));`
$DIR/rusoto/signature/src/region.rs: `assert_tokens(&Region::UsEast2, &tokens_for_region("us-east-2"));`
$DIR/rusoto/signature/src/region.rs: `assert_tokens(&Region::UsWest1, &tokens_for_region("us-west-1"));`
$DIR/rusoto/signature/src/region.rs: `assert_tokens(&Region::UsWest2, &tokens_for_region("us-west-2"));`
$DIR/rusoto/signature/src/region.rs: `assert_tokens(&Region::UsGovEast1, &tokens_for_region("us-gov-east-1"));`
$DIR/rusoto/signature/src/region.rs: `assert_tokens(&Region::UsGovWest1, &tokens_for_region("us-gov-west-1"));`
$DIR/rusoto/signature/src/region.rs: `assert_tokens(&Region::CnNorth1, &tokens_for_region("cn-north-1"));`
$DIR/rusoto/signature/src/region.rs: `assert_tokens(&Region::CnNorthwest1, &tokens_for_region("cn-northwest-1"));`
$DIR/rusoto/signature/src/region.rs: `assert_tokens(
            &custom_region,
            &[
                Token::Tuple { len: 2 },
                Token::String("eu-east-1"),
                Token::Some,
                Token::String("http://localhost:8000"),
                Token::TupleEnd,
            ],
        );`
$DIR/rusoto/signature/src/signature.rs: `request.sign(&AwsCredentials::new(
            "foo_access_key",
            "foo_secret_key",
            None,
            None,
        ));`
$DIR/rusoto/signature/src/signature.rs: `request.sign(&AwsCredentials::new(
            "foo_access_key",
            "foo_secret_key",
            None,
            None,
        ));`
$DIR/rusoto/signature/src/signature.rs: `query_encoding_escaped_chars_range(0u8, 45u8);`
$DIR/rusoto/signature/src/signature.rs: `query_encoding_escaped_chars_range(47u8, 48u8);`
$DIR/rusoto/signature/src/signature.rs: `query_encoding_escaped_chars_range(58u8, 65u8);`
$DIR/rusoto/signature/src/signature.rs: `query_encoding_escaped_chars_range(91u8, 95u8);`
$DIR/rusoto/signature/src/signature.rs: `query_encoding_escaped_chars_range(96u8, 97u8);`
$DIR/rusoto/signature/src/signature.rs: `query_encoding_escaped_chars_range(123u8, 126u8);`
$DIR/rusoto/signature/src/signature.rs: `request.add_param("arg1%7B", "arg1%7B");`
$DIR/rusoto/signature/src/signature.rs: `request.add_param("arg2%7B+%2B", "+%2B");`
$DIR/rusoto/signature/src/signature.rs: `request.add_param(
            "key:with@funny&characters",
            "value with/funny%characters/Рускии",
        );`
$DIR/rusoto/signature/src/signature.rs: `params.insert("key".into(), Some("val+ue".into()));`
$DIR/rusoto/signature/src/signature.rs: `headers.insert("content-length".to_owned(), vec![vec![]]);`
$DIR/rusoto/signature/src/signature.rs: `headers.insert("content-type".to_owned(), vec![vec![]]);`
$DIR/rusoto/signature/src/signature.rs: `headers.insert("x-amz-date".to_owned(), vec![vec![]]);`
$DIR/rusoto/signature/src/signature.rs: `headers.insert("cache-control".to_owned(), vec![vec![]]);`
$DIR/rusoto/signature/src/signature.rs: `headers.insert("content-length".to_owned(), vec![vec![]]);`
$DIR/rusoto/signature/src/signature.rs: `headers.insert("content-type".to_owned(), vec![vec![]]);`
$DIR/rusoto/signature/src/signature.rs: `headers.insert("host".to_owned(), vec![vec![]]);`
$DIR/rusoto/signature/src/signature.rs: `headers.insert("x-amz-date".to_owned(), vec![vec![]]);`
$DIR/rusoto/signature/src/signature.rs: `headers.insert("cache-control".to_owned(), vec![vec![]]);`
$DIR/rusoto/signature/src/signature.rs: `headers.insert("content-length".to_owned(), vec![vec![]]);`
$DIR/rusoto/signature/src/signature.rs: `request.sign(&AwsCredentials::new(
            "foo_access_key",
            "foo_secret_key",
            None,
            None,
        ));`
$DIR/rusoto/signature/src/signature.rs: `.sign(&AwsCredentials::new(
            "foo_access_key",
            "foo_secret_key",
            None,
            None,
        ))`
$DIR/rusoto/signature/src/signature.rs: `.try_into()`
$DIR/rusoto/signature/src/signature.rs: `.sign(&AwsCredentials::new(
            "foo_access_key",
            "foo_secret_key",
            None,
            None,
        ))`
$DIR/rusoto/signature/src/signature.rs: `.add_param("arg1%7B", "arg1%7B")`
$DIR/rusoto/signature/src/signature.rs: `.add_param("arg2%7B+%2B", "+%2B")`
$DIR/rusoto/signature/src/signature.rs: `.add_param(
            "key:with@funny&characters",
            "value with/funny%characters/Рускии",
        )`
$DIR/rusoto/signature/src/signature.rs: `.insert("key".into(), Some("val+ue".into()))`
$DIR/rusoto/signature/src/signature.rs: `.into()`
$DIR/rusoto/signature/src/signature.rs: `.into()`
$DIR/rusoto/signature/src/signature.rs: `.insert("content-length".to_owned(), vec![vec![]])`
$DIR/rusoto/signature/src/signature.rs: `.insert("content-type".to_owned(), vec![vec![]])`
$DIR/rusoto/signature/src/signature.rs: `.insert("x-amz-date".to_owned(), vec![vec![]])`
$DIR/rusoto/signature/src/signature.rs: `.insert("cache-control".to_owned(), vec![vec![]])`
$DIR/rusoto/signature/src/signature.rs: `.insert("content-length".to_owned(), vec![vec![]])`
$DIR/rusoto/signature/src/signature.rs: `.insert("content-type".to_owned(), vec![vec![]])`
$DIR/rusoto/signature/src/signature.rs: `.insert("host".to_owned(), vec![vec![]])`
$DIR/rusoto/signature/src/signature.rs: `.insert("x-amz-date".to_owned(), vec![vec![]])`
$DIR/rusoto/signature/src/signature.rs: `.insert("cache-control".to_owned(), vec![vec![]])`
$DIR/rusoto/signature/src/signature.rs: `.insert("content-length".to_owned(), vec![vec![]])`
$DIR/rusoto/signature/src/signature.rs: `.sign(&AwsCredentials::new(
            "foo_access_key",
            "foo_secret_key",
            None,
            None,
        ))`
$DIR/rusoto/signature/src/signature.rs: `.headers.get("authorization")`
$DIR/rusoto/signature/src/stream.rs: `.into_async_read()`
$DIR/rusoto/signature/src/stream.rs: `.into_blocking_read()`
$DIR/rusoto/signature/src/stream.rs: `.into_async_read()`
