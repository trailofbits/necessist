$DIR/cmd/admin-handlers-users-race_test.go: `testCases = append(testCases,
			newTestSuiteIAM(bt, false),
			newTestSuiteIAM(bt, true),
		)`
$DIR/cmd/admin-handlers-users-race_test.go: `etcdStr = " (with etcd backend)"`
$DIR/cmd/admin-handlers-users-race_test.go: `t.Run(
			fmt.Sprintf("Test: %d, ServerType: %s%s", i+1, testCase.serverType, etcdStr),
			func(t *testing.T) {
				runAllIAMConcurrencyTests(testCase, &check{t, testCase.serverType})
			},
		)`
$DIR/cmd/admin-handlers-users-race_test.go: `runAllIAMConcurrencyTests(testCase, &check{t, testCase.serverType})`
$DIR/cmd/admin-handlers-users-race_test.go: `.Run(
			fmt.Sprintf("Test: %d, ServerType: %s%s", i+1, testCase.serverType, etcdStr),
			func(t *testing.T) {
				runAllIAMConcurrencyTests(testCase, &check{t, testCase.serverType})
			},
		)`
$DIR/cmd/admin-handlers-users-race_test.go: `.Sprintf("Test: %d, ServerType: %s%s", i+1, testCase.serverType, etcdStr)`
$DIR/cmd/admin-handlers-users_test.go: `t.Run(
			fmt.Sprintf("Test: %d, ServerType: %s", i+1, testCase.ServerTypeDescription),
			func(t *testing.T) {
				suite := testCase
				c := &check{t, testCase.serverType}

				suite.SetUpSuite(c)
				suite.TestUserCreate(c)
				suite.TestUserPolicyEscalationBug(c)
				suite.TestPolicyCreate(c)
				suite.TestCannedPolicies(c)
				suite.TestGroupAddRemove(c)
				suite.TestServiceAccountOpsByAdmin(c)
				suite.TestServiceAccountPrivilegeEscalationBug(c)
				suite.TestServiceAccountOpsByUser(c)
				suite.TestServiceAccountDurationSecondsCondition(c)
				suite.TestAddServiceAccountPerms(c)
				suite.TearDownSuite(c)
			},
		)`
$DIR/cmd/admin-handlers-users_test.go: `suite.SetUpSuite(c)`
$DIR/cmd/admin-handlers-users_test.go: `suite.TestUserCreate(c)`
$DIR/cmd/admin-handlers-users_test.go: `suite.TestUserPolicyEscalationBug(c)`
$DIR/cmd/admin-handlers-users_test.go: `suite.TestPolicyCreate(c)`
$DIR/cmd/admin-handlers-users_test.go: `suite.TestCannedPolicies(c)`
$DIR/cmd/admin-handlers-users_test.go: `suite.TestGroupAddRemove(c)`
$DIR/cmd/admin-handlers-users_test.go: `suite.TestServiceAccountOpsByAdmin(c)`
$DIR/cmd/admin-handlers-users_test.go: `suite.TestServiceAccountPrivilegeEscalationBug(c)`
$DIR/cmd/admin-handlers-users_test.go: `suite.TestServiceAccountOpsByUser(c)`
$DIR/cmd/admin-handlers-users_test.go: `suite.TestServiceAccountDurationSecondsCondition(c)`
$DIR/cmd/admin-handlers-users_test.go: `suite.TestAddServiceAccountPerms(c)`
$DIR/cmd/admin-handlers-users_test.go: `suite.TearDownSuite(c)`
$DIR/cmd/admin-handlers-users_test.go: `t.Run(
			fmt.Sprintf("Test: %d, ServerType: %s", i+1, testCase.ServerTypeDescription),
			func(t *testing.T) {
				suite := testCase
				c := &check{t, testCase.serverType}

				suite.SetUpSuite(c)
				defer suite.TearDownSuite(c)

				suite.SetUpAccMgmtPlugin(c)

				suite.TestAccMgmtPlugin(c)
			},
		)`
$DIR/cmd/admin-handlers-users_test.go: `suite.SetUpSuite(c)`
$DIR/cmd/admin-handlers-users_test.go: `suite.SetUpAccMgmtPlugin(c)`
$DIR/cmd/admin-handlers-users_test.go: `suite.TestAccMgmtPlugin(c)`
$DIR/cmd/admin-handlers-users_test.go: `.Run(
			fmt.Sprintf("Test: %d, ServerType: %s", i+1, testCase.ServerTypeDescription),
			func(t *testing.T) {
				suite := testCase
				c := &check{t, testCase.serverType}

				suite.SetUpSuite(c)
				suite.TestUserCreate(c)
				suite.TestUserPolicyEscalationBug(c)
				suite.TestPolicyCreate(c)
				suite.TestCannedPolicies(c)
				suite.TestGroupAddRemove(c)
				suite.TestServiceAccountOpsByAdmin(c)
				suite.TestServiceAccountPrivilegeEscalationBug(c)
				suite.TestServiceAccountOpsByUser(c)
				suite.TestServiceAccountDurationSecondsCondition(c)
				suite.TestAddServiceAccountPerms(c)
				suite.TearDownSuite(c)
			},
		)`
$DIR/cmd/admin-handlers-users_test.go: `.Sprintf("Test: %d, ServerType: %s", i+1, testCase.ServerTypeDescription)`
$DIR/cmd/admin-handlers-users_test.go: `.SetUpSuite(c)`
$DIR/cmd/admin-handlers-users_test.go: `.TestUserCreate(c)`
$DIR/cmd/admin-handlers-users_test.go: `.TestUserPolicyEscalationBug(c)`
$DIR/cmd/admin-handlers-users_test.go: `.TestPolicyCreate(c)`
$DIR/cmd/admin-handlers-users_test.go: `.TestCannedPolicies(c)`
$DIR/cmd/admin-handlers-users_test.go: `.TestGroupAddRemove(c)`
$DIR/cmd/admin-handlers-users_test.go: `.TestServiceAccountOpsByAdmin(c)`
$DIR/cmd/admin-handlers-users_test.go: `.TestServiceAccountPrivilegeEscalationBug(c)`
$DIR/cmd/admin-handlers-users_test.go: `.TestServiceAccountOpsByUser(c)`
$DIR/cmd/admin-handlers-users_test.go: `.TestServiceAccountDurationSecondsCondition(c)`
$DIR/cmd/admin-handlers-users_test.go: `.TestAddServiceAccountPerms(c)`
$DIR/cmd/admin-handlers-users_test.go: `.TearDownSuite(c)`
$DIR/cmd/admin-handlers-users_test.go: `.Run(
			fmt.Sprintf("Test: %d, ServerType: %s", i+1, testCase.ServerTypeDescription),
			func(t *testing.T) {
				suite := testCase
				c := &check{t, testCase.serverType}

				suite.SetUpSuite(c)
				defer suite.TearDownSuite(c)

				suite.SetUpAccMgmtPlugin(c)

				suite.TestAccMgmtPlugin(c)
			},
		)`
$DIR/cmd/admin-handlers-users_test.go: `.Sprintf("Test: %d, ServerType: %s", i+1, testCase.ServerTypeDescription)`
$DIR/cmd/admin-handlers-users_test.go: `.SetUpSuite(c)`
$DIR/cmd/admin-handlers-users_test.go: `.TearDownSuite(c)`
$DIR/cmd/admin-handlers-users_test.go: `.SetUpAccMgmtPlugin(c)`
$DIR/cmd/admin-handlers-users_test.go: `.TestAccMgmtPlugin(c)`
$DIR/cmd/admin-handlers_test.go: `globalMinioAddr = "127.0.0.1:9000"`
$DIR/cmd/admin-handlers_test.go: `queryVal.Set("info", "")`
$DIR/cmd/admin-handlers_test.go: `adminTestBed.router.ServeHTTP(rec, req)`
$DIR/cmd/admin-handlers_test.go: `err = json.NewDecoder(rec.Body).Decode(&results)`
$DIR/cmd/admin-handlers_test.go: `v.Add(mgmtClientToken, clientToken)`
$DIR/cmd/admin-handlers_test.go: `v.Add(mgmtForceStart, "")`
$DIR/cmd/admin-handlers_test.go: `v.Add(mgmtForceStop, "")`
$DIR/cmd/admin-handlers_test.go: `isErrCase = true`
$DIR/cmd/admin-handlers_test.go: `owners = append(owners, fmt.Sprintf("node-%d", i))`
$DIR/cmd/admin-handlers_test.go: `lris = append(lris, lri)`
$DIR/cmd/admin-handlers_test.go: `locksHeld[resource] = []lockRequesterInfo{lri}`
$DIR/cmd/admin-handlers_test.go: `lris = append(lris, lri)`
$DIR/cmd/admin-handlers_test.go: `locksHeld[resource] = append(locksHeld[resource], lri)`
$DIR/cmd/admin-handlers_test.go: `lri.UID = mustGetUUID()`
$DIR/cmd/admin-handlers_test.go: `lris = append(lris, lri)`
$DIR/cmd/admin-handlers_test.go: `locksHeld[resource] = append(locksHeld[resource], lri)`
$DIR/cmd/admin-handlers_test.go: `peerLocks = append(peerLocks, &PeerLocks{
			Addr:  owner,
			Locks: locksHeld,
		})`
$DIR/cmd/admin-handlers_test.go: `exp = append(exp, madmin.LockEntry{
			Resource:   lri.Name,
			Type:       lockType(lri),
			ServerList: owners,
			Owner:      lri.Owner,
			ID:         lri.UID,
			Quorum:     lri.Quorum,
		})`
$DIR/cmd/admin-handlers_test.go: `sort.Slice(exp, byResourceUID{exp}.Less)`
$DIR/cmd/admin-handlers_test.go: `sort.Slice(got, byResourceUID{got}.Less)`
$DIR/cmd/admin-handlers_test.go: `.WithCancel(context.Background())`
$DIR/cmd/admin-handlers_test.go: `.Background()`
$DIR/cmd/admin-handlers_test.go: `.TearDown()`
$DIR/cmd/admin-handlers_test.go: `.Set("info", "")`
$DIR/cmd/admin-handlers_test.go: `.NewRecorder()`
$DIR/cmd/admin-handlers_test.go: `.router.ServeHTTP(rec, req)`
$DIR/cmd/admin-handlers_test.go: `.NewDecoder(rec.Body)`
$DIR/cmd/admin-handlers_test.go: `.Decode(&results)`
$DIR/cmd/admin-handlers_test.go: `.Add(mgmtClientToken, clientToken)`
$DIR/cmd/admin-handlers_test.go: `.Add(mgmtForceStart, "")`
$DIR/cmd/admin-handlers_test.go: `.Add(mgmtForceStop, "")`
$DIR/cmd/admin-handlers_test.go: `.NewReader([]byte(body))`
$DIR/cmd/admin-handlers_test.go: `.Sprintf("node-%d", i)`
$DIR/cmd/admin-handlers_test.go: `.Sprintf("bucket/delete-object-%d", i)`
$DIR/cmd/admin-handlers_test.go: `.Sprintf("bucket/get-object-%d", i)`
$DIR/cmd/admin-handlers_test.go: `.Slice(exp, byResourceUID{exp}.Less)`
$DIR/cmd/admin-handlers_test.go: `.Slice(got, byResourceUID{got}.Less)`
$DIR/cmd/admin-handlers_test.go: `.Timestamp.Equal(got[i].Timestamp)`
$DIR/cmd/api-errors_test.go: `.Background()`
$DIR/cmd/api-headers_test.go: `e = char`
$DIR/cmd/api-response_test.go: `t.Run("", func(t *testing.T) {
			gotLocation := getObjectLocation(testCase.request, testCase.domains, testCase.bucket, testCase.object)
			if testCase.expectedLocation != gotLocation {
				t.Errorf("expected %s, got %s", testCase.expectedLocation, gotLocation)
			}
		})`
$DIR/cmd/api-response_test.go: `tls = true`
$DIR/cmd/api-response_test.go: `gotScheme = getURLScheme(tls)`
$DIR/cmd/api-response_test.go: `.Run("", func(t *testing.T) {
			gotLocation := getObjectLocation(testCase.request, testCase.domains, testCase.bucket, testCase.object)
			if testCase.expectedLocation != gotLocation {
				t.Errorf("expected %s, got %s", testCase.expectedLocation, gotLocation)
			}
		})`
$DIR/cmd/api-utils_test.go: `t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			outputText := s3EncodeName(testCase.inputText, testCase.encodingType)
			if testCase.expectedOutput != outputText {
				t.Errorf("Expected `%s`, got `%s`", testCase.expectedOutput, outputText)
			}
		})`
$DIR/cmd/api-utils_test.go: `.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			outputText := s3EncodeName(testCase.inputText, testCase.encodingType)
			if testCase.expectedOutput != outputText {
				t.Errorf("Expected `%s`, got `%s`", testCase.expectedOutput, outputText)
			}
		})`
$DIR/cmd/api-utils_test.go: `.Sprintf("Test%d", i+1)`
$DIR/cmd/auth-handler_test.go: `q.Add(testCase.inputQueryKey, testCase.inputQueryValue)`
$DIR/cmd/auth-handler_test.go: `inputReq.URL.RawQuery = q.Encode()`
$DIR/cmd/auth-handler_test.go: `inputReq.ParseForm()`
$DIR/cmd/auth-handler_test.go: `q.Add(testCase.inputQueryKey, testCase.inputQueryValue)`
$DIR/cmd/auth-handler_test.go: `inputReq.URL.RawQuery = q.Encode()`
$DIR/cmd/auth-handler_test.go: `inputReq.ParseForm()`
$DIR/cmd/auth-handler_test.go: `initAllSubsystems(ctx)`
$DIR/cmd/auth-handler_test.go: `initConfigSubsystem(ctx, objLayer)`
$DIR/cmd/auth-handler_test.go: `globalActiveCred = creds`
$DIR/cmd/auth-handler_test.go: `globalIAMSys.Init(ctx, objLayer, globalEtcdClient, 2*time.Second)`
$DIR/cmd/auth-handler_test.go: `globalActiveCred = creds`
$DIR/cmd/auth-handler_test.go: `initAllSubsystems(ctx)`
$DIR/cmd/auth-handler_test.go: `initConfigSubsystem(ctx, objLayer)`
$DIR/cmd/auth-handler_test.go: `globalActiveCred = creds`
$DIR/cmd/auth-handler_test.go: `globalIAMSys.Init(ctx, objLayer, globalEtcdClient, 2*time.Second)`
$DIR/cmd/auth-handler_test.go: `.NopCloser(io.LimitReader(&nullReader{}, 1024))`
$DIR/cmd/auth-handler_test.go: `.LimitReader(&nullReader{}, 1024)`
$DIR/cmd/auth-handler_test.go: `.NewRequest(http.MethodGet, "http://example.com", nil)`
$DIR/cmd/auth-handler_test.go: `.URL.Query()`
$DIR/cmd/auth-handler_test.go: `.Add(testCase.inputQueryKey, testCase.inputQueryValue)`
$DIR/cmd/auth-handler_test.go: `.Encode()`
$DIR/cmd/auth-handler_test.go: `.ParseForm()`
$DIR/cmd/auth-handler_test.go: `.NewRequest(http.MethodGet, "http://example.com", nil)`
$DIR/cmd/auth-handler_test.go: `.URL.Query()`
$DIR/cmd/auth-handler_test.go: `.Add(testCase.inputQueryKey, testCase.inputQueryValue)`
$DIR/cmd/auth-handler_test.go: `.Encode()`
$DIR/cmd/auth-handler_test.go: `.ParseForm()`
$DIR/cmd/auth-handler_test.go: `.WithCancel(GlobalContext)`
$DIR/cmd/auth-handler_test.go: `.RemoveAll(fsDir)`
$DIR/cmd/auth-handler_test.go: `.CreateCredentials("myuser", "mypassword")`
$DIR/cmd/auth-handler_test.go: `.Init(ctx, objLayer, globalEtcdClient, 2*time.Second)`
$DIR/cmd/auth-handler_test.go: `.NewReader([]byte("hello"))`
$DIR/cmd/auth-handler_test.go: `.NewReader([]byte("hello"))`
$DIR/cmd/auth-handler_test.go: `.NewReader([]byte("hello"))`
$DIR/cmd/auth-handler_test.go: `.Region()`
$DIR/cmd/auth-handler_test.go: `.ReadAll(testCase.req.Body)`
$DIR/cmd/auth-handler_test.go: `.WithCancel(context.Background())`
$DIR/cmd/auth-handler_test.go: `.Background()`
$DIR/cmd/auth-handler_test.go: `.RemoveAll(fsDir)`
$DIR/cmd/auth-handler_test.go: `.CreateCredentials("myuser", "mypassword")`
$DIR/cmd/auth-handler_test.go: `.Region()`
$DIR/cmd/auth-handler_test.go: `.WithCancel(context.Background())`
$DIR/cmd/auth-handler_test.go: `.Background()`
$DIR/cmd/auth-handler_test.go: `.RemoveAll(fsDir)`
$DIR/cmd/auth-handler_test.go: `.CreateCredentials("admin", "mypassword")`
$DIR/cmd/auth-handler_test.go: `.Init(ctx, objLayer, globalEtcdClient, 2*time.Second)`
$DIR/cmd/background-newdisks-heal-ops_gen_test.go: `left, err = msgp.Skip(bts)`
$DIR/cmd/background-newdisks-heal-ops_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/background-newdisks-heal-ops_gen_test.go: `buf.Reset()`
$DIR/cmd/background-newdisks-heal-ops_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/background-newdisks-heal-ops_gen_test.go: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/background-newdisks-heal-ops_gen_test.go: `.MarshalMsg(nil)`
$DIR/cmd/background-newdisks-heal-ops_gen_test.go: `.UnmarshalMsg(bts)`
$DIR/cmd/background-newdisks-heal-ops_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/background-newdisks-heal-ops_gen_test.go: `.Msgsize()`
$DIR/cmd/background-newdisks-heal-ops_gen_test.go: `.Len()`
$DIR/cmd/background-newdisks-heal-ops_gen_test.go: `.Decode(&buf, &vn)`
$DIR/cmd/background-newdisks-heal-ops_gen_test.go: `.Reset()`
$DIR/cmd/background-newdisks-heal-ops_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/batch-expire_gen_test.go: `left, err = msgp.Skip(bts)`
$DIR/cmd/batch-expire_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/batch-expire_gen_test.go: `buf.Reset()`
$DIR/cmd/batch-expire_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/batch-expire_gen_test.go: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/batch-expire_gen_test.go: `left, err = msgp.Skip(bts)`
$DIR/cmd/batch-expire_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/batch-expire_gen_test.go: `buf.Reset()`
$DIR/cmd/batch-expire_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/batch-expire_gen_test.go: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/batch-expire_gen_test.go: `left, err = msgp.Skip(bts)`
$DIR/cmd/batch-expire_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/batch-expire_gen_test.go: `buf.Reset()`
$DIR/cmd/batch-expire_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/batch-expire_gen_test.go: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/batch-expire_gen_test.go: `.MarshalMsg(nil)`
$DIR/cmd/batch-expire_gen_test.go: `.UnmarshalMsg(bts)`
$DIR/cmd/batch-expire_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/batch-expire_gen_test.go: `.Msgsize()`
$DIR/cmd/batch-expire_gen_test.go: `.Len()`
$DIR/cmd/batch-expire_gen_test.go: `.Decode(&buf, &vn)`
$DIR/cmd/batch-expire_gen_test.go: `.Reset()`
$DIR/cmd/batch-expire_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/batch-expire_gen_test.go: `.MarshalMsg(nil)`
$DIR/cmd/batch-expire_gen_test.go: `.UnmarshalMsg(bts)`
$DIR/cmd/batch-expire_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/batch-expire_gen_test.go: `.Msgsize()`
$DIR/cmd/batch-expire_gen_test.go: `.Len()`
$DIR/cmd/batch-expire_gen_test.go: `.Decode(&buf, &vn)`
$DIR/cmd/batch-expire_gen_test.go: `.Reset()`
$DIR/cmd/batch-expire_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/batch-expire_gen_test.go: `.MarshalMsg(nil)`
$DIR/cmd/batch-expire_gen_test.go: `.UnmarshalMsg(bts)`
$DIR/cmd/batch-expire_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/batch-expire_gen_test.go: `.Msgsize()`
$DIR/cmd/batch-expire_gen_test.go: `.Len()`
$DIR/cmd/batch-expire_gen_test.go: `.Decode(&buf, &vn)`
$DIR/cmd/batch-expire_gen_test.go: `.Reset()`
$DIR/cmd/batch-expire_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/batch-expire_test.go: `.UnmarshalStrict([]byte(expireYaml), &job)`
$DIR/cmd/batch-handlers_gen_test.go: `left, err = msgp.Skip(bts)`
$DIR/cmd/batch-handlers_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/batch-handlers_gen_test.go: `buf.Reset()`
$DIR/cmd/batch-handlers_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/batch-handlers_gen_test.go: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/batch-handlers_gen_test.go: `left, err = msgp.Skip(bts)`
$DIR/cmd/batch-handlers_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/batch-handlers_gen_test.go: `buf.Reset()`
$DIR/cmd/batch-handlers_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/batch-handlers_gen_test.go: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/batch-handlers_gen_test.go: `.MarshalMsg(nil)`
$DIR/cmd/batch-handlers_gen_test.go: `.UnmarshalMsg(bts)`
$DIR/cmd/batch-handlers_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/batch-handlers_gen_test.go: `.Msgsize()`
$DIR/cmd/batch-handlers_gen_test.go: `.Len()`
$DIR/cmd/batch-handlers_gen_test.go: `.Decode(&buf, &vn)`
$DIR/cmd/batch-handlers_gen_test.go: `.Reset()`
$DIR/cmd/batch-handlers_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/batch-handlers_gen_test.go: `.MarshalMsg(nil)`
$DIR/cmd/batch-handlers_gen_test.go: `.UnmarshalMsg(bts)`
$DIR/cmd/batch-handlers_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/batch-handlers_gen_test.go: `.Msgsize()`
$DIR/cmd/batch-handlers_gen_test.go: `.Len()`
$DIR/cmd/batch-handlers_gen_test.go: `.Decode(&buf, &vn)`
$DIR/cmd/batch-handlers_gen_test.go: `.Reset()`
$DIR/cmd/batch-handlers_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/batch-job-common-types_gen_test.go: `left, err = msgp.Skip(bts)`
$DIR/cmd/batch-job-common-types_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/batch-job-common-types_gen_test.go: `buf.Reset()`
$DIR/cmd/batch-job-common-types_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/batch-job-common-types_gen_test.go: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/batch-job-common-types_gen_test.go: `left, err = msgp.Skip(bts)`
$DIR/cmd/batch-job-common-types_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/batch-job-common-types_gen_test.go: `buf.Reset()`
$DIR/cmd/batch-job-common-types_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/batch-job-common-types_gen_test.go: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/batch-job-common-types_gen_test.go: `left, err = msgp.Skip(bts)`
$DIR/cmd/batch-job-common-types_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/batch-job-common-types_gen_test.go: `buf.Reset()`
$DIR/cmd/batch-job-common-types_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/batch-job-common-types_gen_test.go: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/batch-job-common-types_gen_test.go: `left, err = msgp.Skip(bts)`
$DIR/cmd/batch-job-common-types_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/batch-job-common-types_gen_test.go: `buf.Reset()`
$DIR/cmd/batch-job-common-types_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/batch-job-common-types_gen_test.go: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/batch-job-common-types_gen_test.go: `left, err = msgp.Skip(bts)`
$DIR/cmd/batch-job-common-types_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/batch-job-common-types_gen_test.go: `buf.Reset()`
$DIR/cmd/batch-job-common-types_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/batch-job-common-types_gen_test.go: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/batch-job-common-types_gen_test.go: `.MarshalMsg(nil)`
$DIR/cmd/batch-job-common-types_gen_test.go: `.UnmarshalMsg(bts)`
$DIR/cmd/batch-job-common-types_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/batch-job-common-types_gen_test.go: `.Msgsize()`
$DIR/cmd/batch-job-common-types_gen_test.go: `.Len()`
$DIR/cmd/batch-job-common-types_gen_test.go: `.Decode(&buf, &vn)`
$DIR/cmd/batch-job-common-types_gen_test.go: `.Reset()`
$DIR/cmd/batch-job-common-types_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/batch-job-common-types_gen_test.go: `.MarshalMsg(nil)`
$DIR/cmd/batch-job-common-types_gen_test.go: `.UnmarshalMsg(bts)`
$DIR/cmd/batch-job-common-types_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/batch-job-common-types_gen_test.go: `.Msgsize()`
$DIR/cmd/batch-job-common-types_gen_test.go: `.Len()`
$DIR/cmd/batch-job-common-types_gen_test.go: `.Decode(&buf, &vn)`
$DIR/cmd/batch-job-common-types_gen_test.go: `.Reset()`
$DIR/cmd/batch-job-common-types_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/batch-job-common-types_gen_test.go: `.MarshalMsg(nil)`
$DIR/cmd/batch-job-common-types_gen_test.go: `.UnmarshalMsg(bts)`
$DIR/cmd/batch-job-common-types_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/batch-job-common-types_gen_test.go: `.Msgsize()`
$DIR/cmd/batch-job-common-types_gen_test.go: `.Len()`
$DIR/cmd/batch-job-common-types_gen_test.go: `.Decode(&buf, &vn)`
$DIR/cmd/batch-job-common-types_gen_test.go: `.Reset()`
$DIR/cmd/batch-job-common-types_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/batch-job-common-types_gen_test.go: `.MarshalMsg(nil)`
$DIR/cmd/batch-job-common-types_gen_test.go: `.UnmarshalMsg(bts)`
$DIR/cmd/batch-job-common-types_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/batch-job-common-types_gen_test.go: `.Msgsize()`
$DIR/cmd/batch-job-common-types_gen_test.go: `.Len()`
$DIR/cmd/batch-job-common-types_gen_test.go: `.Decode(&buf, &vn)`
$DIR/cmd/batch-job-common-types_gen_test.go: `.Reset()`
$DIR/cmd/batch-job-common-types_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/batch-job-common-types_gen_test.go: `.MarshalMsg(nil)`
$DIR/cmd/batch-job-common-types_gen_test.go: `.UnmarshalMsg(bts)`
$DIR/cmd/batch-job-common-types_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/batch-job-common-types_gen_test.go: `.Msgsize()`
$DIR/cmd/batch-job-common-types_gen_test.go: `.Len()`
$DIR/cmd/batch-job-common-types_gen_test.go: `.Decode(&buf, &vn)`
$DIR/cmd/batch-job-common-types_gen_test.go: `.Reset()`
$DIR/cmd/batch-job-common-types_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/batch-job-common-types_test.go: `t.Run(fmt.Sprintf("test-%d", i+1), func(t *testing.T) {
			if got := test.sizeFilter.InRange(test.objSize); got != test.want {
				t.Fatalf("Expected %v but got %v", test.want, got)
			}
		})`
$DIR/cmd/batch-job-common-types_test.go: `t.Run(fmt.Sprintf("test-%d", i+1), func(t *testing.T) {
			err := test.sizeFilter.Validate()
			if err != nil {
				gotErr := err.(BatchJobYamlErr)
				testErr := test.err.(BatchJobYamlErr)
				if gotErr.message() != testErr.message() {
					t.Fatalf("Expected %v but got %v", test.err, err)
				}
			}
			if err == nil && test.err != nil {
				t.Fatalf("Expected %v but got nil", test.err)
			}
		})`
$DIR/cmd/batch-job-common-types_test.go: `.Run(fmt.Sprintf("test-%d", i+1), func(t *testing.T) {
			if got := test.sizeFilter.InRange(test.objSize); got != test.want {
				t.Fatalf("Expected %v but got %v", test.want, got)
			}
		})`
$DIR/cmd/batch-job-common-types_test.go: `.Sprintf("test-%d", i+1)`
$DIR/cmd/batch-job-common-types_test.go: `.sizeFilter.InRange(test.objSize)`
$DIR/cmd/batch-job-common-types_test.go: `.Run(fmt.Sprintf("test-%d", i+1), func(t *testing.T) {
			err := test.sizeFilter.Validate()
			if err != nil {
				gotErr := err.(BatchJobYamlErr)
				testErr := test.err.(BatchJobYamlErr)
				if gotErr.message() != testErr.message() {
					t.Fatalf("Expected %v but got %v", test.err, err)
				}
			}
			if err == nil && test.err != nil {
				t.Fatalf("Expected %v but got nil", test.err)
			}
		})`
$DIR/cmd/batch-job-common-types_test.go: `.Sprintf("test-%d", i+1)`
$DIR/cmd/batch-job-common-types_test.go: `.sizeFilter.Validate()`
$DIR/cmd/batch-job-common-types_test.go: `.message()`
$DIR/cmd/batch-job-common-types_test.go: `.message()`
$DIR/cmd/batch-replicate_gen_test.go: `left, err = msgp.Skip(bts)`
$DIR/cmd/batch-replicate_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/batch-replicate_gen_test.go: `buf.Reset()`
$DIR/cmd/batch-replicate_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/batch-replicate_gen_test.go: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/batch-replicate_gen_test.go: `left, err = msgp.Skip(bts)`
$DIR/cmd/batch-replicate_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/batch-replicate_gen_test.go: `buf.Reset()`
$DIR/cmd/batch-replicate_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/batch-replicate_gen_test.go: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/batch-replicate_gen_test.go: `left, err = msgp.Skip(bts)`
$DIR/cmd/batch-replicate_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/batch-replicate_gen_test.go: `buf.Reset()`
$DIR/cmd/batch-replicate_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/batch-replicate_gen_test.go: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/batch-replicate_gen_test.go: `left, err = msgp.Skip(bts)`
$DIR/cmd/batch-replicate_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/batch-replicate_gen_test.go: `buf.Reset()`
$DIR/cmd/batch-replicate_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/batch-replicate_gen_test.go: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/batch-replicate_gen_test.go: `left, err = msgp.Skip(bts)`
$DIR/cmd/batch-replicate_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/batch-replicate_gen_test.go: `buf.Reset()`
$DIR/cmd/batch-replicate_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/batch-replicate_gen_test.go: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/batch-replicate_gen_test.go: `left, err = msgp.Skip(bts)`
$DIR/cmd/batch-replicate_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/batch-replicate_gen_test.go: `buf.Reset()`
$DIR/cmd/batch-replicate_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/batch-replicate_gen_test.go: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/batch-replicate_gen_test.go: `.MarshalMsg(nil)`
$DIR/cmd/batch-replicate_gen_test.go: `.UnmarshalMsg(bts)`
$DIR/cmd/batch-replicate_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/batch-replicate_gen_test.go: `.Msgsize()`
$DIR/cmd/batch-replicate_gen_test.go: `.Len()`
$DIR/cmd/batch-replicate_gen_test.go: `.Decode(&buf, &vn)`
$DIR/cmd/batch-replicate_gen_test.go: `.Reset()`
$DIR/cmd/batch-replicate_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/batch-replicate_gen_test.go: `.MarshalMsg(nil)`
$DIR/cmd/batch-replicate_gen_test.go: `.UnmarshalMsg(bts)`
$DIR/cmd/batch-replicate_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/batch-replicate_gen_test.go: `.Msgsize()`
$DIR/cmd/batch-replicate_gen_test.go: `.Len()`
$DIR/cmd/batch-replicate_gen_test.go: `.Decode(&buf, &vn)`
$DIR/cmd/batch-replicate_gen_test.go: `.Reset()`
$DIR/cmd/batch-replicate_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/batch-replicate_gen_test.go: `.MarshalMsg(nil)`
$DIR/cmd/batch-replicate_gen_test.go: `.UnmarshalMsg(bts)`
$DIR/cmd/batch-replicate_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/batch-replicate_gen_test.go: `.Msgsize()`
$DIR/cmd/batch-replicate_gen_test.go: `.Len()`
$DIR/cmd/batch-replicate_gen_test.go: `.Decode(&buf, &vn)`
$DIR/cmd/batch-replicate_gen_test.go: `.Reset()`
$DIR/cmd/batch-replicate_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/batch-replicate_gen_test.go: `.MarshalMsg(nil)`
$DIR/cmd/batch-replicate_gen_test.go: `.UnmarshalMsg(bts)`
$DIR/cmd/batch-replicate_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/batch-replicate_gen_test.go: `.Msgsize()`
$DIR/cmd/batch-replicate_gen_test.go: `.Len()`
$DIR/cmd/batch-replicate_gen_test.go: `.Decode(&buf, &vn)`
$DIR/cmd/batch-replicate_gen_test.go: `.Reset()`
$DIR/cmd/batch-replicate_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/batch-replicate_gen_test.go: `.MarshalMsg(nil)`
$DIR/cmd/batch-replicate_gen_test.go: `.UnmarshalMsg(bts)`
$DIR/cmd/batch-replicate_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/batch-replicate_gen_test.go: `.Msgsize()`
$DIR/cmd/batch-replicate_gen_test.go: `.Len()`
$DIR/cmd/batch-replicate_gen_test.go: `.Decode(&buf, &vn)`
$DIR/cmd/batch-replicate_gen_test.go: `.Reset()`
$DIR/cmd/batch-replicate_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/batch-replicate_gen_test.go: `.MarshalMsg(nil)`
$DIR/cmd/batch-replicate_gen_test.go: `.UnmarshalMsg(bts)`
$DIR/cmd/batch-replicate_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/batch-replicate_gen_test.go: `.Msgsize()`
$DIR/cmd/batch-replicate_gen_test.go: `.Len()`
$DIR/cmd/batch-replicate_gen_test.go: `.Decode(&buf, &vn)`
$DIR/cmd/batch-replicate_gen_test.go: `.Reset()`
$DIR/cmd/batch-replicate_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/batch-rotate_gen_test.go: `left, err = msgp.Skip(bts)`
$DIR/cmd/batch-rotate_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/batch-rotate_gen_test.go: `buf.Reset()`
$DIR/cmd/batch-rotate_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/batch-rotate_gen_test.go: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/batch-rotate_gen_test.go: `left, err = msgp.Skip(bts)`
$DIR/cmd/batch-rotate_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/batch-rotate_gen_test.go: `buf.Reset()`
$DIR/cmd/batch-rotate_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/batch-rotate_gen_test.go: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/batch-rotate_gen_test.go: `left, err = msgp.Skip(bts)`
$DIR/cmd/batch-rotate_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/batch-rotate_gen_test.go: `buf.Reset()`
$DIR/cmd/batch-rotate_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/batch-rotate_gen_test.go: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/batch-rotate_gen_test.go: `left, err = msgp.Skip(bts)`
$DIR/cmd/batch-rotate_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/batch-rotate_gen_test.go: `buf.Reset()`
$DIR/cmd/batch-rotate_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/batch-rotate_gen_test.go: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/batch-rotate_gen_test.go: `left, err = msgp.Skip(bts)`
$DIR/cmd/batch-rotate_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/batch-rotate_gen_test.go: `buf.Reset()`
$DIR/cmd/batch-rotate_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/batch-rotate_gen_test.go: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/batch-rotate_gen_test.go: `.MarshalMsg(nil)`
$DIR/cmd/batch-rotate_gen_test.go: `.UnmarshalMsg(bts)`
$DIR/cmd/batch-rotate_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/batch-rotate_gen_test.go: `.Msgsize()`
$DIR/cmd/batch-rotate_gen_test.go: `.Len()`
$DIR/cmd/batch-rotate_gen_test.go: `.Decode(&buf, &vn)`
$DIR/cmd/batch-rotate_gen_test.go: `.Reset()`
$DIR/cmd/batch-rotate_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/batch-rotate_gen_test.go: `.MarshalMsg(nil)`
$DIR/cmd/batch-rotate_gen_test.go: `.UnmarshalMsg(bts)`
$DIR/cmd/batch-rotate_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/batch-rotate_gen_test.go: `.Msgsize()`
$DIR/cmd/batch-rotate_gen_test.go: `.Len()`
$DIR/cmd/batch-rotate_gen_test.go: `.Decode(&buf, &vn)`
$DIR/cmd/batch-rotate_gen_test.go: `.Reset()`
$DIR/cmd/batch-rotate_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/batch-rotate_gen_test.go: `.MarshalMsg(nil)`
$DIR/cmd/batch-rotate_gen_test.go: `.UnmarshalMsg(bts)`
$DIR/cmd/batch-rotate_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/batch-rotate_gen_test.go: `.Msgsize()`
$DIR/cmd/batch-rotate_gen_test.go: `.Len()`
$DIR/cmd/batch-rotate_gen_test.go: `.Decode(&buf, &vn)`
$DIR/cmd/batch-rotate_gen_test.go: `.Reset()`
$DIR/cmd/batch-rotate_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/batch-rotate_gen_test.go: `.MarshalMsg(nil)`
$DIR/cmd/batch-rotate_gen_test.go: `.UnmarshalMsg(bts)`
$DIR/cmd/batch-rotate_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/batch-rotate_gen_test.go: `.Msgsize()`
$DIR/cmd/batch-rotate_gen_test.go: `.Len()`
$DIR/cmd/batch-rotate_gen_test.go: `.Decode(&buf, &vn)`
$DIR/cmd/batch-rotate_gen_test.go: `.Reset()`
$DIR/cmd/batch-rotate_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/batch-rotate_gen_test.go: `.MarshalMsg(nil)`
$DIR/cmd/batch-rotate_gen_test.go: `.UnmarshalMsg(bts)`
$DIR/cmd/batch-rotate_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/batch-rotate_gen_test.go: `.Msgsize()`
$DIR/cmd/batch-rotate_gen_test.go: `.Len()`
$DIR/cmd/batch-rotate_gen_test.go: `.Decode(&buf, &vn)`
$DIR/cmd/batch-rotate_gen_test.go: `.Reset()`
$DIR/cmd/batch-rotate_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/bitrot_test.go: `testBitrotReaderWriterAlgo(t, bitrotAlgo)`
$DIR/cmd/bootstrap-peer-server_gen_test.go: `left, err = msgp.Skip(bts)`
$DIR/cmd/bootstrap-peer-server_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/bootstrap-peer-server_gen_test.go: `buf.Reset()`
$DIR/cmd/bootstrap-peer-server_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/bootstrap-peer-server_gen_test.go: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/bootstrap-peer-server_gen_test.go: `.MarshalMsg(nil)`
$DIR/cmd/bootstrap-peer-server_gen_test.go: `.UnmarshalMsg(bts)`
$DIR/cmd/bootstrap-peer-server_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/bootstrap-peer-server_gen_test.go: `.Msgsize()`
$DIR/cmd/bootstrap-peer-server_gen_test.go: `.Len()`
$DIR/cmd/bootstrap-peer-server_gen_test.go: `.Decode(&buf, &vn)`
$DIR/cmd/bootstrap-peer-server_gen_test.go: `.Reset()`
$DIR/cmd/bootstrap-peer-server_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/bucket-encryption_test.go: `.NewReader([]byte(tc.inputXML))`
$DIR/cmd/bucket-lifecycle_test.go: `fi.Erasure.Index = 1`
$DIR/cmd/bucket-lifecycle_test.go: `fi.TransitionStatus = lifecycle.TransitionComplete`
$DIR/cmd/bucket-lifecycle_test.go: `fi.Metadata = tc.meta`
$DIR/cmd/bucket-lifecycle_test.go: `fi.TransitionStatus = ""`
$DIR/cmd/bucket-lifecycle_test.go: `fi.Metadata = nil`
$DIR/cmd/bucket-lifecycle_test.go: `globalTierConfigMgr = NewTierConfigMgr()`
$DIR/cmd/bucket-lifecycle_test.go: `err = validateTransitionTier(lc)`
$DIR/cmd/bucket-lifecycle_test.go: `.Date(2012, 12, 21, 0, 0, 0, 0, time.UTC)`
$DIR/cmd/bucket-lifecycle_test.go: `.Now()`
$DIR/cmd/bucket-lifecycle_test.go: `.UTC()`
$DIR/cmd/bucket-lifecycle_test.go: `.String()`
$DIR/cmd/bucket-lifecycle_test.go: `.expiry.Format(http.TimeFormat)`
$DIR/cmd/bucket-lifecycle_test.go: `.expiry.Format(http.TimeFormat)`
$DIR/cmd/bucket-lifecycle_test.go: `.Now()`
$DIR/cmd/bucket-lifecycle_test.go: `.Add(-time.Hour)`
$DIR/cmd/bucket-lifecycle_test.go: `.Now()`
$DIR/cmd/bucket-lifecycle_test.go: `.Add(time.Hour)`
$DIR/cmd/bucket-lifecycle_test.go: `.restoreStatus.OnDisk()`
$DIR/cmd/bucket-lifecycle_test.go: `.String()`
$DIR/cmd/bucket-lifecycle_test.go: `.Now()`
$DIR/cmd/bucket-lifecycle_test.go: `.Add(time.Hour)`
$DIR/cmd/bucket-lifecycle_test.go: `.String()`
$DIR/cmd/bucket-lifecycle_test.go: `.Now()`
$DIR/cmd/bucket-lifecycle_test.go: `.Add(-time.Hour)`
$DIR/cmd/bucket-lifecycle_test.go: `.String()`
$DIR/cmd/bucket-lifecycle_test.go: `.IsValid()`
$DIR/cmd/bucket-lifecycle_test.go: `.String()`
$DIR/cmd/bucket-lifecycle_test.go: `.Now()`
$DIR/cmd/bucket-lifecycle_test.go: `.Add(time.Hour)`
$DIR/cmd/bucket-lifecycle_test.go: `.String()`
$DIR/cmd/bucket-lifecycle_test.go: `.Now()`
$DIR/cmd/bucket-lifecycle_test.go: `.Add(-time.Hour)`
$DIR/cmd/bucket-lifecycle_test.go: `.String()`
$DIR/cmd/bucket-lifecycle_test.go: `.IsRemote()`
$DIR/cmd/bucket-lifecycle_test.go: `.ToObjectInfo("bucket", "object", false)`
$DIR/cmd/bucket-lifecycle_test.go: `.IsRemote()`
$DIR/cmd/bucket-lifecycle_test.go: `.IsRemote()`
$DIR/cmd/bucket-lifecycle_test.go: `.ParseLifecycleConfig(bytes.NewReader(tc.xml))`
$DIR/cmd/bucket-lifecycle_test.go: `.NewReader(tc.xml)`
$DIR/cmd/bucket-metadata_gen_test.go: `left, err = msgp.Skip(bts)`
$DIR/cmd/bucket-metadata_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/bucket-metadata_gen_test.go: `buf.Reset()`
$DIR/cmd/bucket-metadata_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/bucket-metadata_gen_test.go: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/bucket-metadata_gen_test.go: `.MarshalMsg(nil)`
$DIR/cmd/bucket-metadata_gen_test.go: `.UnmarshalMsg(bts)`
$DIR/cmd/bucket-metadata_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/bucket-metadata_gen_test.go: `.Msgsize()`
$DIR/cmd/bucket-metadata_gen_test.go: `.Len()`
$DIR/cmd/bucket-metadata_gen_test.go: `.Decode(&buf, &vn)`
$DIR/cmd/bucket-metadata_gen_test.go: `.Reset()`
$DIR/cmd/bucket-metadata_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/bucket-replication-metrics_gen_test.go: `left, err = msgp.Skip(bts)`
$DIR/cmd/bucket-replication-metrics_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/bucket-replication-metrics_gen_test.go: `buf.Reset()`
$DIR/cmd/bucket-replication-metrics_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/bucket-replication-metrics_gen_test.go: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/bucket-replication-metrics_gen_test.go: `left, err = msgp.Skip(bts)`
$DIR/cmd/bucket-replication-metrics_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/bucket-replication-metrics_gen_test.go: `buf.Reset()`
$DIR/cmd/bucket-replication-metrics_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/bucket-replication-metrics_gen_test.go: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/bucket-replication-metrics_gen_test.go: `left, err = msgp.Skip(bts)`
$DIR/cmd/bucket-replication-metrics_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/bucket-replication-metrics_gen_test.go: `buf.Reset()`
$DIR/cmd/bucket-replication-metrics_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/bucket-replication-metrics_gen_test.go: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/bucket-replication-metrics_gen_test.go: `left, err = msgp.Skip(bts)`
$DIR/cmd/bucket-replication-metrics_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/bucket-replication-metrics_gen_test.go: `buf.Reset()`
$DIR/cmd/bucket-replication-metrics_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/bucket-replication-metrics_gen_test.go: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/bucket-replication-metrics_gen_test.go: `left, err = msgp.Skip(bts)`
$DIR/cmd/bucket-replication-metrics_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/bucket-replication-metrics_gen_test.go: `buf.Reset()`
$DIR/cmd/bucket-replication-metrics_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/bucket-replication-metrics_gen_test.go: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/bucket-replication-metrics_gen_test.go: `left, err = msgp.Skip(bts)`
$DIR/cmd/bucket-replication-metrics_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/bucket-replication-metrics_gen_test.go: `buf.Reset()`
$DIR/cmd/bucket-replication-metrics_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/bucket-replication-metrics_gen_test.go: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/bucket-replication-metrics_gen_test.go: `left, err = msgp.Skip(bts)`
$DIR/cmd/bucket-replication-metrics_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/bucket-replication-metrics_gen_test.go: `buf.Reset()`
$DIR/cmd/bucket-replication-metrics_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/bucket-replication-metrics_gen_test.go: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/bucket-replication-metrics_gen_test.go: `left, err = msgp.Skip(bts)`
$DIR/cmd/bucket-replication-metrics_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/bucket-replication-metrics_gen_test.go: `buf.Reset()`
$DIR/cmd/bucket-replication-metrics_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/bucket-replication-metrics_gen_test.go: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/bucket-replication-metrics_gen_test.go: `.MarshalMsg(nil)`
$DIR/cmd/bucket-replication-metrics_gen_test.go: `.UnmarshalMsg(bts)`
$DIR/cmd/bucket-replication-metrics_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/bucket-replication-metrics_gen_test.go: `.Msgsize()`
$DIR/cmd/bucket-replication-metrics_gen_test.go: `.Len()`
$DIR/cmd/bucket-replication-metrics_gen_test.go: `.Decode(&buf, &vn)`
$DIR/cmd/bucket-replication-metrics_gen_test.go: `.Reset()`
$DIR/cmd/bucket-replication-metrics_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/bucket-replication-metrics_gen_test.go: `.MarshalMsg(nil)`
$DIR/cmd/bucket-replication-metrics_gen_test.go: `.UnmarshalMsg(bts)`
$DIR/cmd/bucket-replication-metrics_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/bucket-replication-metrics_gen_test.go: `.Msgsize()`
$DIR/cmd/bucket-replication-metrics_gen_test.go: `.Len()`
$DIR/cmd/bucket-replication-metrics_gen_test.go: `.Decode(&buf, &vn)`
$DIR/cmd/bucket-replication-metrics_gen_test.go: `.Reset()`
$DIR/cmd/bucket-replication-metrics_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/bucket-replication-metrics_gen_test.go: `.MarshalMsg(nil)`
$DIR/cmd/bucket-replication-metrics_gen_test.go: `.UnmarshalMsg(bts)`
$DIR/cmd/bucket-replication-metrics_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/bucket-replication-metrics_gen_test.go: `.Msgsize()`
$DIR/cmd/bucket-replication-metrics_gen_test.go: `.Len()`
$DIR/cmd/bucket-replication-metrics_gen_test.go: `.Decode(&buf, &vn)`
$DIR/cmd/bucket-replication-metrics_gen_test.go: `.Reset()`
$DIR/cmd/bucket-replication-metrics_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/bucket-replication-metrics_gen_test.go: `.MarshalMsg(nil)`
$DIR/cmd/bucket-replication-metrics_gen_test.go: `.UnmarshalMsg(bts)`
$DIR/cmd/bucket-replication-metrics_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/bucket-replication-metrics_gen_test.go: `.Msgsize()`
$DIR/cmd/bucket-replication-metrics_gen_test.go: `.Len()`
$DIR/cmd/bucket-replication-metrics_gen_test.go: `.Decode(&buf, &vn)`
$DIR/cmd/bucket-replication-metrics_gen_test.go: `.Reset()`
$DIR/cmd/bucket-replication-metrics_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/bucket-replication-metrics_gen_test.go: `.MarshalMsg(nil)`
$DIR/cmd/bucket-replication-metrics_gen_test.go: `.UnmarshalMsg(bts)`
$DIR/cmd/bucket-replication-metrics_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/bucket-replication-metrics_gen_test.go: `.Msgsize()`
$DIR/cmd/bucket-replication-metrics_gen_test.go: `.Len()`
$DIR/cmd/bucket-replication-metrics_gen_test.go: `.Decode(&buf, &vn)`
$DIR/cmd/bucket-replication-metrics_gen_test.go: `.Reset()`
$DIR/cmd/bucket-replication-metrics_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/bucket-replication-metrics_gen_test.go: `.MarshalMsg(nil)`
$DIR/cmd/bucket-replication-metrics_gen_test.go: `.UnmarshalMsg(bts)`
$DIR/cmd/bucket-replication-metrics_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/bucket-replication-metrics_gen_test.go: `.Msgsize()`
$DIR/cmd/bucket-replication-metrics_gen_test.go: `.Len()`
$DIR/cmd/bucket-replication-metrics_gen_test.go: `.Decode(&buf, &vn)`
$DIR/cmd/bucket-replication-metrics_gen_test.go: `.Reset()`
$DIR/cmd/bucket-replication-metrics_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/bucket-replication-metrics_gen_test.go: `.MarshalMsg(nil)`
$DIR/cmd/bucket-replication-metrics_gen_test.go: `.UnmarshalMsg(bts)`
$DIR/cmd/bucket-replication-metrics_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/bucket-replication-metrics_gen_test.go: `.Msgsize()`
$DIR/cmd/bucket-replication-metrics_gen_test.go: `.Len()`
$DIR/cmd/bucket-replication-metrics_gen_test.go: `.Decode(&buf, &vn)`
$DIR/cmd/bucket-replication-metrics_gen_test.go: `.Reset()`
$DIR/cmd/bucket-replication-metrics_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/bucket-replication-metrics_gen_test.go: `.MarshalMsg(nil)`
$DIR/cmd/bucket-replication-metrics_gen_test.go: `.UnmarshalMsg(bts)`
$DIR/cmd/bucket-replication-metrics_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/bucket-replication-metrics_gen_test.go: `.Msgsize()`
$DIR/cmd/bucket-replication-metrics_gen_test.go: `.Len()`
$DIR/cmd/bucket-replication-metrics_gen_test.go: `.Decode(&buf, &vn)`
$DIR/cmd/bucket-replication-metrics_gen_test.go: `.Reset()`
$DIR/cmd/bucket-replication-metrics_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/bucket-replication-utils_gen_test.go: `left, err = msgp.Skip(bts)`
$DIR/cmd/bucket-replication-utils_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/bucket-replication-utils_gen_test.go: `buf.Reset()`
$DIR/cmd/bucket-replication-utils_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/bucket-replication-utils_gen_test.go: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/bucket-replication-utils_gen_test.go: `left, err = msgp.Skip(bts)`
$DIR/cmd/bucket-replication-utils_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/bucket-replication-utils_gen_test.go: `buf.Reset()`
$DIR/cmd/bucket-replication-utils_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/bucket-replication-utils_gen_test.go: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/bucket-replication-utils_gen_test.go: `left, err = msgp.Skip(bts)`
$DIR/cmd/bucket-replication-utils_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/bucket-replication-utils_gen_test.go: `buf.Reset()`
$DIR/cmd/bucket-replication-utils_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/bucket-replication-utils_gen_test.go: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/bucket-replication-utils_gen_test.go: `left, err = msgp.Skip(bts)`
$DIR/cmd/bucket-replication-utils_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/bucket-replication-utils_gen_test.go: `buf.Reset()`
$DIR/cmd/bucket-replication-utils_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/bucket-replication-utils_gen_test.go: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/bucket-replication-utils_gen_test.go: `left, err = msgp.Skip(bts)`
$DIR/cmd/bucket-replication-utils_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/bucket-replication-utils_gen_test.go: `buf.Reset()`
$DIR/cmd/bucket-replication-utils_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/bucket-replication-utils_gen_test.go: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/bucket-replication-utils_gen_test.go: `left, err = msgp.Skip(bts)`
$DIR/cmd/bucket-replication-utils_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/bucket-replication-utils_gen_test.go: `buf.Reset()`
$DIR/cmd/bucket-replication-utils_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/bucket-replication-utils_gen_test.go: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/bucket-replication-utils_gen_test.go: `left, err = msgp.Skip(bts)`
$DIR/cmd/bucket-replication-utils_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/bucket-replication-utils_gen_test.go: `buf.Reset()`
$DIR/cmd/bucket-replication-utils_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/bucket-replication-utils_gen_test.go: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/bucket-replication-utils_gen_test.go: `left, err = msgp.Skip(bts)`
$DIR/cmd/bucket-replication-utils_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/bucket-replication-utils_gen_test.go: `buf.Reset()`
$DIR/cmd/bucket-replication-utils_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/bucket-replication-utils_gen_test.go: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/bucket-replication-utils_gen_test.go: `left, err = msgp.Skip(bts)`
$DIR/cmd/bucket-replication-utils_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/bucket-replication-utils_gen_test.go: `buf.Reset()`
$DIR/cmd/bucket-replication-utils_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/bucket-replication-utils_gen_test.go: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/bucket-replication-utils_gen_test.go: `left, err = msgp.Skip(bts)`
$DIR/cmd/bucket-replication-utils_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/bucket-replication-utils_gen_test.go: `buf.Reset()`
$DIR/cmd/bucket-replication-utils_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/bucket-replication-utils_gen_test.go: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/bucket-replication-utils_gen_test.go: `.MarshalMsg(nil)`
$DIR/cmd/bucket-replication-utils_gen_test.go: `.UnmarshalMsg(bts)`
$DIR/cmd/bucket-replication-utils_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/bucket-replication-utils_gen_test.go: `.Msgsize()`
$DIR/cmd/bucket-replication-utils_gen_test.go: `.Len()`
$DIR/cmd/bucket-replication-utils_gen_test.go: `.Decode(&buf, &vn)`
$DIR/cmd/bucket-replication-utils_gen_test.go: `.Reset()`
$DIR/cmd/bucket-replication-utils_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/bucket-replication-utils_gen_test.go: `.MarshalMsg(nil)`
$DIR/cmd/bucket-replication-utils_gen_test.go: `.UnmarshalMsg(bts)`
$DIR/cmd/bucket-replication-utils_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/bucket-replication-utils_gen_test.go: `.Msgsize()`
$DIR/cmd/bucket-replication-utils_gen_test.go: `.Len()`
$DIR/cmd/bucket-replication-utils_gen_test.go: `.Decode(&buf, &vn)`
$DIR/cmd/bucket-replication-utils_gen_test.go: `.Reset()`
$DIR/cmd/bucket-replication-utils_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/bucket-replication-utils_gen_test.go: `.MarshalMsg(nil)`
$DIR/cmd/bucket-replication-utils_gen_test.go: `.UnmarshalMsg(bts)`
$DIR/cmd/bucket-replication-utils_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/bucket-replication-utils_gen_test.go: `.Msgsize()`
$DIR/cmd/bucket-replication-utils_gen_test.go: `.Len()`
$DIR/cmd/bucket-replication-utils_gen_test.go: `.Decode(&buf, &vn)`
$DIR/cmd/bucket-replication-utils_gen_test.go: `.Reset()`
$DIR/cmd/bucket-replication-utils_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/bucket-replication-utils_gen_test.go: `.MarshalMsg(nil)`
$DIR/cmd/bucket-replication-utils_gen_test.go: `.UnmarshalMsg(bts)`
$DIR/cmd/bucket-replication-utils_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/bucket-replication-utils_gen_test.go: `.Msgsize()`
$DIR/cmd/bucket-replication-utils_gen_test.go: `.Len()`
$DIR/cmd/bucket-replication-utils_gen_test.go: `.Decode(&buf, &vn)`
$DIR/cmd/bucket-replication-utils_gen_test.go: `.Reset()`
$DIR/cmd/bucket-replication-utils_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/bucket-replication-utils_gen_test.go: `.MarshalMsg(nil)`
$DIR/cmd/bucket-replication-utils_gen_test.go: `.UnmarshalMsg(bts)`
$DIR/cmd/bucket-replication-utils_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/bucket-replication-utils_gen_test.go: `.Msgsize()`
$DIR/cmd/bucket-replication-utils_gen_test.go: `.Len()`
$DIR/cmd/bucket-replication-utils_gen_test.go: `.Decode(&buf, &vn)`
$DIR/cmd/bucket-replication-utils_gen_test.go: `.Reset()`
$DIR/cmd/bucket-replication-utils_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/bucket-replication-utils_gen_test.go: `.MarshalMsg(nil)`
$DIR/cmd/bucket-replication-utils_gen_test.go: `.UnmarshalMsg(bts)`
$DIR/cmd/bucket-replication-utils_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/bucket-replication-utils_gen_test.go: `.Msgsize()`
$DIR/cmd/bucket-replication-utils_gen_test.go: `.Len()`
$DIR/cmd/bucket-replication-utils_gen_test.go: `.Decode(&buf, &vn)`
$DIR/cmd/bucket-replication-utils_gen_test.go: `.Reset()`
$DIR/cmd/bucket-replication-utils_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/bucket-replication-utils_gen_test.go: `.MarshalMsg(nil)`
$DIR/cmd/bucket-replication-utils_gen_test.go: `.UnmarshalMsg(bts)`
$DIR/cmd/bucket-replication-utils_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/bucket-replication-utils_gen_test.go: `.Msgsize()`
$DIR/cmd/bucket-replication-utils_gen_test.go: `.Len()`
$DIR/cmd/bucket-replication-utils_gen_test.go: `.Decode(&buf, &vn)`
$DIR/cmd/bucket-replication-utils_gen_test.go: `.Reset()`
$DIR/cmd/bucket-replication-utils_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/bucket-replication-utils_gen_test.go: `.MarshalMsg(nil)`
$DIR/cmd/bucket-replication-utils_gen_test.go: `.UnmarshalMsg(bts)`
$DIR/cmd/bucket-replication-utils_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/bucket-replication-utils_gen_test.go: `.Msgsize()`
$DIR/cmd/bucket-replication-utils_gen_test.go: `.Len()`
$DIR/cmd/bucket-replication-utils_gen_test.go: `.Decode(&buf, &vn)`
$DIR/cmd/bucket-replication-utils_gen_test.go: `.Reset()`
$DIR/cmd/bucket-replication-utils_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/bucket-replication-utils_gen_test.go: `.MarshalMsg(nil)`
$DIR/cmd/bucket-replication-utils_gen_test.go: `.UnmarshalMsg(bts)`
$DIR/cmd/bucket-replication-utils_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/bucket-replication-utils_gen_test.go: `.Msgsize()`
$DIR/cmd/bucket-replication-utils_gen_test.go: `.Len()`
$DIR/cmd/bucket-replication-utils_gen_test.go: `.Decode(&buf, &vn)`
$DIR/cmd/bucket-replication-utils_gen_test.go: `.Reset()`
$DIR/cmd/bucket-replication-utils_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/bucket-replication-utils_gen_test.go: `.MarshalMsg(nil)`
$DIR/cmd/bucket-replication-utils_gen_test.go: `.UnmarshalMsg(bts)`
$DIR/cmd/bucket-replication-utils_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/bucket-replication-utils_gen_test.go: `.Msgsize()`
$DIR/cmd/bucket-replication-utils_gen_test.go: `.Len()`
$DIR/cmd/bucket-replication-utils_gen_test.go: `.Decode(&buf, &vn)`
$DIR/cmd/bucket-replication-utils_gen_test.go: `.Reset()`
$DIR/cmd/bucket-replication-utils_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/bucket-replication-utils_test.go: `.CompletedSize()`
$DIR/cmd/bucket-replication-utils_test.go: `.ReplicationStatusInternal()`
$DIR/cmd/bucket-replication-utils_test.go: `.ReplicationStatus()`
$DIR/cmd/bucket-replication-utils_test.go: `.Action()`
$DIR/cmd/bucket-replication-utils_test.go: `.Background()`
$DIR/cmd/bucket-replication-utils_test.go: `.expDsc.String()`
$DIR/cmd/bucket-replication-utils_test.go: `.rs.CompositeReplicationStatus()`
$DIR/cmd/bucket-replication_test.go: `.Background()`
$DIR/cmd/bucket-replication_test.go: `.rcfg.Resync(ctx, test.info, test.dsc, test.tgtStatuses)`
$DIR/cmd/bucket-replication_test.go: `.mustResync()`
$DIR/cmd/bucket-replication_test.go: `.rcfg.resync(test.info, test.dsc, test.tgtStatuses)`
$DIR/cmd/bucket-replication_test.go: `.mustResync()`
$DIR/cmd/bucket-stats_gen_test.go: `left, err = msgp.Skip(bts)`
$DIR/cmd/bucket-stats_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/bucket-stats_gen_test.go: `buf.Reset()`
$DIR/cmd/bucket-stats_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/bucket-stats_gen_test.go: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/bucket-stats_gen_test.go: `left, err = msgp.Skip(bts)`
$DIR/cmd/bucket-stats_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/bucket-stats_gen_test.go: `buf.Reset()`
$DIR/cmd/bucket-stats_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/bucket-stats_gen_test.go: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/bucket-stats_gen_test.go: `left, err = msgp.Skip(bts)`
$DIR/cmd/bucket-stats_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/bucket-stats_gen_test.go: `buf.Reset()`
$DIR/cmd/bucket-stats_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/bucket-stats_gen_test.go: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/bucket-stats_gen_test.go: `left, err = msgp.Skip(bts)`
$DIR/cmd/bucket-stats_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/bucket-stats_gen_test.go: `buf.Reset()`
$DIR/cmd/bucket-stats_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/bucket-stats_gen_test.go: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/bucket-stats_gen_test.go: `left, err = msgp.Skip(bts)`
$DIR/cmd/bucket-stats_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/bucket-stats_gen_test.go: `buf.Reset()`
$DIR/cmd/bucket-stats_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/bucket-stats_gen_test.go: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/bucket-stats_gen_test.go: `left, err = msgp.Skip(bts)`
$DIR/cmd/bucket-stats_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/bucket-stats_gen_test.go: `buf.Reset()`
$DIR/cmd/bucket-stats_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/bucket-stats_gen_test.go: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/bucket-stats_gen_test.go: `left, err = msgp.Skip(bts)`
$DIR/cmd/bucket-stats_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/bucket-stats_gen_test.go: `buf.Reset()`
$DIR/cmd/bucket-stats_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/bucket-stats_gen_test.go: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/bucket-stats_gen_test.go: `left, err = msgp.Skip(bts)`
$DIR/cmd/bucket-stats_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/bucket-stats_gen_test.go: `buf.Reset()`
$DIR/cmd/bucket-stats_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/bucket-stats_gen_test.go: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/bucket-stats_gen_test.go: `left, err = msgp.Skip(bts)`
$DIR/cmd/bucket-stats_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/bucket-stats_gen_test.go: `buf.Reset()`
$DIR/cmd/bucket-stats_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/bucket-stats_gen_test.go: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/bucket-stats_gen_test.go: `.MarshalMsg(nil)`
$DIR/cmd/bucket-stats_gen_test.go: `.UnmarshalMsg(bts)`
$DIR/cmd/bucket-stats_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/bucket-stats_gen_test.go: `.Msgsize()`
$DIR/cmd/bucket-stats_gen_test.go: `.Len()`
$DIR/cmd/bucket-stats_gen_test.go: `.Decode(&buf, &vn)`
$DIR/cmd/bucket-stats_gen_test.go: `.Reset()`
$DIR/cmd/bucket-stats_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/bucket-stats_gen_test.go: `.MarshalMsg(nil)`
$DIR/cmd/bucket-stats_gen_test.go: `.UnmarshalMsg(bts)`
$DIR/cmd/bucket-stats_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/bucket-stats_gen_test.go: `.Msgsize()`
$DIR/cmd/bucket-stats_gen_test.go: `.Len()`
$DIR/cmd/bucket-stats_gen_test.go: `.Decode(&buf, &vn)`
$DIR/cmd/bucket-stats_gen_test.go: `.Reset()`
$DIR/cmd/bucket-stats_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/bucket-stats_gen_test.go: `.MarshalMsg(nil)`
$DIR/cmd/bucket-stats_gen_test.go: `.UnmarshalMsg(bts)`
$DIR/cmd/bucket-stats_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/bucket-stats_gen_test.go: `.Msgsize()`
$DIR/cmd/bucket-stats_gen_test.go: `.Len()`
$DIR/cmd/bucket-stats_gen_test.go: `.Decode(&buf, &vn)`
$DIR/cmd/bucket-stats_gen_test.go: `.Reset()`
$DIR/cmd/bucket-stats_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/bucket-stats_gen_test.go: `.MarshalMsg(nil)`
$DIR/cmd/bucket-stats_gen_test.go: `.UnmarshalMsg(bts)`
$DIR/cmd/bucket-stats_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/bucket-stats_gen_test.go: `.Msgsize()`
$DIR/cmd/bucket-stats_gen_test.go: `.Len()`
$DIR/cmd/bucket-stats_gen_test.go: `.Decode(&buf, &vn)`
$DIR/cmd/bucket-stats_gen_test.go: `.Reset()`
$DIR/cmd/bucket-stats_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/bucket-stats_gen_test.go: `.MarshalMsg(nil)`
$DIR/cmd/bucket-stats_gen_test.go: `.UnmarshalMsg(bts)`
$DIR/cmd/bucket-stats_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/bucket-stats_gen_test.go: `.Msgsize()`
$DIR/cmd/bucket-stats_gen_test.go: `.Len()`
$DIR/cmd/bucket-stats_gen_test.go: `.Decode(&buf, &vn)`
$DIR/cmd/bucket-stats_gen_test.go: `.Reset()`
$DIR/cmd/bucket-stats_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/bucket-stats_gen_test.go: `.MarshalMsg(nil)`
$DIR/cmd/bucket-stats_gen_test.go: `.UnmarshalMsg(bts)`
$DIR/cmd/bucket-stats_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/bucket-stats_gen_test.go: `.Msgsize()`
$DIR/cmd/bucket-stats_gen_test.go: `.Len()`
$DIR/cmd/bucket-stats_gen_test.go: `.Decode(&buf, &vn)`
$DIR/cmd/bucket-stats_gen_test.go: `.Reset()`
$DIR/cmd/bucket-stats_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/bucket-stats_gen_test.go: `.MarshalMsg(nil)`
$DIR/cmd/bucket-stats_gen_test.go: `.UnmarshalMsg(bts)`
$DIR/cmd/bucket-stats_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/bucket-stats_gen_test.go: `.Msgsize()`
$DIR/cmd/bucket-stats_gen_test.go: `.Len()`
$DIR/cmd/bucket-stats_gen_test.go: `.Decode(&buf, &vn)`
$DIR/cmd/bucket-stats_gen_test.go: `.Reset()`
$DIR/cmd/bucket-stats_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/bucket-stats_gen_test.go: `.MarshalMsg(nil)`
$DIR/cmd/bucket-stats_gen_test.go: `.UnmarshalMsg(bts)`
$DIR/cmd/bucket-stats_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/bucket-stats_gen_test.go: `.Msgsize()`
$DIR/cmd/bucket-stats_gen_test.go: `.Len()`
$DIR/cmd/bucket-stats_gen_test.go: `.Decode(&buf, &vn)`
$DIR/cmd/bucket-stats_gen_test.go: `.Reset()`
$DIR/cmd/bucket-stats_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/bucket-stats_gen_test.go: `.MarshalMsg(nil)`
$DIR/cmd/bucket-stats_gen_test.go: `.UnmarshalMsg(bts)`
$DIR/cmd/bucket-stats_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/bucket-stats_gen_test.go: `.Msgsize()`
$DIR/cmd/bucket-stats_gen_test.go: `.Len()`
$DIR/cmd/bucket-stats_gen_test.go: `.Decode(&buf, &vn)`
$DIR/cmd/bucket-stats_gen_test.go: `.Reset()`
$DIR/cmd/bucket-stats_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/common-main_test.go: `t.Run("", func(t *testing.T) {
			tmpfile, err := os.CreateTemp("", "testfile")
			if err != nil {
				t.Error(err)
			}
			tmpfile.WriteString(testCase.content)
			tmpfile.Sync()
			tmpfile.Close()

			value, err := readFromSecret(tmpfile.Name())
			if err != nil && !testCase.expectedErr {
				t.Error(err)
			}
			if err == nil && testCase.expectedErr {
				t.Error(errors.New("expected error, found success"))
			}
			if value != testCase.expectedValue {
				t.Errorf("Expected %s, got %s", testCase.expectedValue, value)
			}
		})`
$DIR/cmd/common-main_test.go: `tmpfile.WriteString(testCase.content)`
$DIR/cmd/common-main_test.go: `tmpfile.Sync()`
$DIR/cmd/common-main_test.go: `t.Run("", func(t *testing.T) {
			tmpfile, err := os.CreateTemp("", "testfile")
			if err != nil {
				t.Error(err)
			}
			tmpfile.WriteString(testCase.content)
			tmpfile.Sync()
			tmpfile.Close()

			ekvs, err := minioEnvironFromFile(tmpfile.Name())
			if err != nil && !testCase.expectedErr {
				t.Error(err)
			}
			if err == nil && testCase.expectedErr {
				t.Error(errors.New("expected error, found success"))
			}

			if len(ekvs) != len(testCase.expectedEkvs) {
				t.Errorf("expected %v keys, got %v keys", len(testCase.expectedEkvs), len(ekvs))
			}

			if !reflect.DeepEqual(ekvs, testCase.expectedEkvs) {
				t.Errorf("expected %v, got %v", testCase.expectedEkvs, ekvs)
			}
		})`
$DIR/cmd/common-main_test.go: `tmpfile.WriteString(testCase.content)`
$DIR/cmd/common-main_test.go: `tmpfile.Sync()`
$DIR/cmd/common-main_test.go: `.Run("", func(t *testing.T) {
			tmpfile, err := os.CreateTemp("", "testfile")
			if err != nil {
				t.Error(err)
			}
			tmpfile.WriteString(testCase.content)
			tmpfile.Sync()
			tmpfile.Close()

			value, err := readFromSecret(tmpfile.Name())
			if err != nil && !testCase.expectedErr {
				t.Error(err)
			}
			if err == nil && testCase.expectedErr {
				t.Error(errors.New("expected error, found success"))
			}
			if value != testCase.expectedValue {
				t.Errorf("Expected %s, got %s", testCase.expectedValue, value)
			}
		})`
$DIR/cmd/common-main_test.go: `.CreateTemp("", "testfile")`
$DIR/cmd/common-main_test.go: `.WriteString(testCase.content)`
$DIR/cmd/common-main_test.go: `.Sync()`
$DIR/cmd/common-main_test.go: `.Name()`
$DIR/cmd/common-main_test.go: `.Run("", func(t *testing.T) {
			tmpfile, err := os.CreateTemp("", "testfile")
			if err != nil {
				t.Error(err)
			}
			tmpfile.WriteString(testCase.content)
			tmpfile.Sync()
			tmpfile.Close()

			ekvs, err := minioEnvironFromFile(tmpfile.Name())
			if err != nil && !testCase.expectedErr {
				t.Error(err)
			}
			if err == nil && testCase.expectedErr {
				t.Error(errors.New("expected error, found success"))
			}

			if len(ekvs) != len(testCase.expectedEkvs) {
				t.Errorf("expected %v keys, got %v keys", len(testCase.expectedEkvs), len(ekvs))
			}

			if !reflect.DeepEqual(ekvs, testCase.expectedEkvs) {
				t.Errorf("expected %v, got %v", testCase.expectedEkvs, ekvs)
			}
		})`
$DIR/cmd/common-main_test.go: `.CreateTemp("", "testfile")`
$DIR/cmd/common-main_test.go: `.WriteString(testCase.content)`
$DIR/cmd/common-main_test.go: `.Sync()`
$DIR/cmd/common-main_test.go: `.Name()`
$DIR/cmd/common-main_test.go: `.DeepEqual(ekvs, testCase.expectedEkvs)`
$DIR/cmd/config-current_test.go: `config.SetRegion(globalServerConfig, "us-west-1")`
$DIR/cmd/config-current_test.go: `.WithCancel(context.Background())`
$DIR/cmd/config-current_test.go: `.Background()`
$DIR/cmd/config-current_test.go: `.RemoveAll(fsDir)`
$DIR/cmd/config-current_test.go: `.Region()`
$DIR/cmd/config-current_test.go: `.SetRegion(globalServerConfig, "us-west-1")`
$DIR/cmd/config-current_test.go: `.LookupSite(
		globalServerConfig[config.SiteSubSys][config.Default],
		globalServerConfig[config.RegionSubSys][config.Default],
	)`
$DIR/cmd/config-current_test.go: `.Region()`
$DIR/cmd/config-current_test.go: `.Background()`
$DIR/cmd/config-encrypted_test.go: `t.Run("", func(t *testing.T) {
			ddata, err := madmin.DecryptData(test.cred.String(), bytes.NewReader(test.edata))
			if err != nil && test.success {
				t.Errorf("Expected success, saw failure %v", err)
			}
			if err == nil && !test.success {
				t.Error("Expected failure, saw success")
			}
			if test.success {
				if !bytes.Equal(ddata, data) {
					t.Errorf("Expected %s, got %s", string(data), string(ddata))
				}
			}
		})`
$DIR/cmd/config-encrypted_test.go: `.EncryptData(cred1.String(), data)`
$DIR/cmd/config-encrypted_test.go: `.String()`
$DIR/cmd/config-encrypted_test.go: `.EncryptData(cred2.String(), data)`
$DIR/cmd/config-encrypted_test.go: `.String()`
$DIR/cmd/config-encrypted_test.go: `.Run("", func(t *testing.T) {
			ddata, err := madmin.DecryptData(test.cred.String(), bytes.NewReader(test.edata))
			if err != nil && test.success {
				t.Errorf("Expected success, saw failure %v", err)
			}
			if err == nil && !test.success {
				t.Error("Expected failure, saw success")
			}
			if test.success {
				if !bytes.Equal(ddata, data) {
					t.Errorf("Expected %s, got %s", string(data), string(ddata))
				}
			}
		})`
$DIR/cmd/config-encrypted_test.go: `.DecryptData(test.cred.String(), bytes.NewReader(test.edata))`
$DIR/cmd/config-encrypted_test.go: `.cred.String()`
$DIR/cmd/config-encrypted_test.go: `.NewReader(test.edata)`
$DIR/cmd/config-encrypted_test.go: `.Equal(ddata, data)`
$DIR/cmd/copy-part-range_test.go: `.GetOffsetLength(objectSize)`
$DIR/cmd/crossdomain-xml-handler_test.go: `.NewRouter()`
$DIR/cmd/crossdomain-xml-handler_test.go: `.SkipClean(true)`
$DIR/cmd/crossdomain-xml-handler_test.go: `.UseEncodedPath()`
$DIR/cmd/crossdomain-xml-handler_test.go: `.NewServer(handler)`
$DIR/cmd/crossdomain-xml-handler_test.go: `.Get(srv.URL + crossDomainXMLEntity)`
$DIR/cmd/data-scanner_test.go: `setObjectLayer(objAPI)`
$DIR/cmd/data-scanner_test.go: `globalBucketMetadataSys = NewBucketMetadataSys()`
$DIR/cmd/data-scanner_test.go: `globalBucketObjectLockSys = &BucketObjectLockSys{}`
$DIR/cmd/data-scanner_test.go: `globalBucketVersioningSys = &BucketVersioningSys{}`
$DIR/cmd/data-scanner_test.go: `es.workers.Store(&workers)`
$DIR/cmd/data-scanner_test.go: `globalExpiryState = es`
$DIR/cmd/data-scanner_test.go: `wg.Add(1)`
$DIR/cmd/data-scanner_test.go: `expired = append(expired, t.versions...)`
$DIR/cmd/data-scanner_test.go: `globalBucketMetadataSys.Set(bucket, meta)`
$DIR/cmd/data-scanner_test.go: `uuids[i] = uuid.UUID([16]byte{15: uint8(i + 1)})`
$DIR/cmd/data-scanner_test.go: `fivs[i] = FileInfo{
			Volume:      bucket,
			Name:        obj,
			VersionID:   uuids[i].String(),
			IsLatest:    i == 0,
			ModTime:     modTime.Add(-1 * time.Duration(i) * time.Minute),
			Size:        1 << 10,
			NumVersions: 5,
		}`
$DIR/cmd/data-scanner_test.go: `wants[i] = fi.ToObjectInfo(bucket, obj, versioned)`
$DIR/cmd/data-scanner_test.go: `close(workers[0])`
$DIR/cmd/data-scanner_test.go: `wg.Wait()`
$DIR/cmd/data-scanner_test.go: `t.Run(fmt.Sprintf("TestEvalAction-%d", i), func(t *testing.T) {
			if got := evalActionFromLifecycle(context.TODO(), test.ilm, test.retention, nil, test.obj); got.Action != test.want {
				t.Fatalf("Expected %v but got %v", test.want, got)
			}
		})`
$DIR/cmd/data-scanner_test.go: `.Background()`
$DIR/cmd/data-scanner_test.go: `.Background()`
$DIR/cmd/data-scanner_test.go: `.workers.Store(&workers)`
$DIR/cmd/data-scanner_test.go: `.Add(1)`
$DIR/cmd/data-scanner_test.go: `.Done()`
$DIR/cmd/data-scanner_test.go: `.workers.Load()`
$DIR/cmd/data-scanner_test.go: `.Marshal(lc)`
$DIR/cmd/data-scanner_test.go: `.Marshal(vcfg)`
$DIR/cmd/data-scanner_test.go: `.Now()`
$DIR/cmd/data-scanner_test.go: `.Set(bucket, meta)`
$DIR/cmd/data-scanner_test.go: `.Now()`
$DIR/cmd/data-scanner_test.go: `.UUID([16]byte{15: uint8(i + 1)})`
$DIR/cmd/data-scanner_test.go: `.String()`
$DIR/cmd/data-scanner_test.go: `.Add(-1 * time.Duration(i) * time.Minute)`
$DIR/cmd/data-scanner_test.go: `.Duration(i)`
$DIR/cmd/data-scanner_test.go: `.ToObjectInfo(bucket, obj, versioned)`
$DIR/cmd/data-scanner_test.go: `.applyNewerNoncurrentVersionLimit(context.TODO(), objAPI, fivs, es)`
$DIR/cmd/data-scanner_test.go: `.TODO()`
$DIR/cmd/data-scanner_test.go: `.Wait()`
$DIR/cmd/data-scanner_test.go: `.String()`
$DIR/cmd/data-scanner_test.go: `.String()`
$DIR/cmd/data-scanner_test.go: `.String()`
$DIR/cmd/data-scanner_test.go: `.Now()`
$DIR/cmd/data-scanner_test.go: `.Add(-31 * 24 * time.Hour)`
$DIR/cmd/data-scanner_test.go: `.New()`
$DIR/cmd/data-scanner_test.go: `.String()`
$DIR/cmd/data-scanner_test.go: `.Now()`
$DIR/cmd/data-scanner_test.go: `.Add(-61 * 24 * time.Hour)`
$DIR/cmd/data-scanner_test.go: `.New()`
$DIR/cmd/data-scanner_test.go: `.String()`
$DIR/cmd/data-scanner_test.go: `.ParseLifecycleConfig(strings.NewReader(deleteAllILM))`
$DIR/cmd/data-scanner_test.go: `.NewReader(deleteAllILM)`
$DIR/cmd/data-scanner_test.go: `.ParseLifecycleConfig(strings.NewReader(delMarkerILM))`
$DIR/cmd/data-scanner_test.go: `.NewReader(delMarkerILM)`
$DIR/cmd/data-scanner_test.go: `.Run(fmt.Sprintf("TestEvalAction-%d", i), func(t *testing.T) {
			if got := evalActionFromLifecycle(context.TODO(), test.ilm, test.retention, nil, test.obj); got.Action != test.want {
				t.Fatalf("Expected %v but got %v", test.want, got)
			}
		})`
$DIR/cmd/data-scanner_test.go: `.Sprintf("TestEvalAction-%d", i)`
$DIR/cmd/data-scanner_test.go: `.TODO()`
$DIR/cmd/data-usage-cache_gen_test.go: `left, err = msgp.Skip(bts)`
$DIR/cmd/data-usage-cache_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/data-usage-cache_gen_test.go: `buf.Reset()`
$DIR/cmd/data-usage-cache_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/data-usage-cache_gen_test.go: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/data-usage-cache_gen_test.go: `left, err = msgp.Skip(bts)`
$DIR/cmd/data-usage-cache_gen_test.go: `left, err = msgp.Skip(bts)`
$DIR/cmd/data-usage-cache_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/data-usage-cache_gen_test.go: `buf.Reset()`
$DIR/cmd/data-usage-cache_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/data-usage-cache_gen_test.go: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/data-usage-cache_gen_test.go: `left, err = msgp.Skip(bts)`
$DIR/cmd/data-usage-cache_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/data-usage-cache_gen_test.go: `buf.Reset()`
$DIR/cmd/data-usage-cache_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/data-usage-cache_gen_test.go: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/data-usage-cache_gen_test.go: `left, err = msgp.Skip(bts)`
$DIR/cmd/data-usage-cache_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/data-usage-cache_gen_test.go: `buf.Reset()`
$DIR/cmd/data-usage-cache_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/data-usage-cache_gen_test.go: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/data-usage-cache_gen_test.go: `left, err = msgp.Skip(bts)`
$DIR/cmd/data-usage-cache_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/data-usage-cache_gen_test.go: `buf.Reset()`
$DIR/cmd/data-usage-cache_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/data-usage-cache_gen_test.go: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/data-usage-cache_gen_test.go: `left, err = msgp.Skip(bts)`
$DIR/cmd/data-usage-cache_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/data-usage-cache_gen_test.go: `buf.Reset()`
$DIR/cmd/data-usage-cache_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/data-usage-cache_gen_test.go: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/data-usage-cache_gen_test.go: `left, err = msgp.Skip(bts)`
$DIR/cmd/data-usage-cache_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/data-usage-cache_gen_test.go: `buf.Reset()`
$DIR/cmd/data-usage-cache_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/data-usage-cache_gen_test.go: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/data-usage-cache_gen_test.go: `left, err = msgp.Skip(bts)`
$DIR/cmd/data-usage-cache_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/data-usage-cache_gen_test.go: `buf.Reset()`
$DIR/cmd/data-usage-cache_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/data-usage-cache_gen_test.go: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/data-usage-cache_gen_test.go: `left, err = msgp.Skip(bts)`
$DIR/cmd/data-usage-cache_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/data-usage-cache_gen_test.go: `buf.Reset()`
$DIR/cmd/data-usage-cache_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/data-usage-cache_gen_test.go: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/data-usage-cache_gen_test.go: `left, err = msgp.Skip(bts)`
$DIR/cmd/data-usage-cache_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/data-usage-cache_gen_test.go: `buf.Reset()`
$DIR/cmd/data-usage-cache_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/data-usage-cache_gen_test.go: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/data-usage-cache_gen_test.go: `left, err = msgp.Skip(bts)`
$DIR/cmd/data-usage-cache_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/data-usage-cache_gen_test.go: `buf.Reset()`
$DIR/cmd/data-usage-cache_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/data-usage-cache_gen_test.go: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/data-usage-cache_gen_test.go: `left, err = msgp.Skip(bts)`
$DIR/cmd/data-usage-cache_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/data-usage-cache_gen_test.go: `buf.Reset()`
$DIR/cmd/data-usage-cache_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/data-usage-cache_gen_test.go: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/data-usage-cache_gen_test.go: `.MarshalMsg(nil)`
$DIR/cmd/data-usage-cache_gen_test.go: `.UnmarshalMsg(bts)`
$DIR/cmd/data-usage-cache_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/data-usage-cache_gen_test.go: `.Msgsize()`
$DIR/cmd/data-usage-cache_gen_test.go: `.Len()`
$DIR/cmd/data-usage-cache_gen_test.go: `.Decode(&buf, &vn)`
$DIR/cmd/data-usage-cache_gen_test.go: `.Reset()`
$DIR/cmd/data-usage-cache_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/data-usage-cache_gen_test.go: `.MarshalMsg(nil)`
$DIR/cmd/data-usage-cache_gen_test.go: `.UnmarshalMsg(bts)`
$DIR/cmd/data-usage-cache_gen_test.go: `.MarshalMsg(nil)`
$DIR/cmd/data-usage-cache_gen_test.go: `.UnmarshalMsg(bts)`
$DIR/cmd/data-usage-cache_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/data-usage-cache_gen_test.go: `.Msgsize()`
$DIR/cmd/data-usage-cache_gen_test.go: `.Len()`
$DIR/cmd/data-usage-cache_gen_test.go: `.Decode(&buf, &vn)`
$DIR/cmd/data-usage-cache_gen_test.go: `.Reset()`
$DIR/cmd/data-usage-cache_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/data-usage-cache_gen_test.go: `.MarshalMsg(nil)`
$DIR/cmd/data-usage-cache_gen_test.go: `.UnmarshalMsg(bts)`
$DIR/cmd/data-usage-cache_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/data-usage-cache_gen_test.go: `.Msgsize()`
$DIR/cmd/data-usage-cache_gen_test.go: `.Len()`
$DIR/cmd/data-usage-cache_gen_test.go: `.Decode(&buf, &vn)`
$DIR/cmd/data-usage-cache_gen_test.go: `.Reset()`
$DIR/cmd/data-usage-cache_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/data-usage-cache_gen_test.go: `.MarshalMsg(nil)`
$DIR/cmd/data-usage-cache_gen_test.go: `.UnmarshalMsg(bts)`
$DIR/cmd/data-usage-cache_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/data-usage-cache_gen_test.go: `.Msgsize()`
$DIR/cmd/data-usage-cache_gen_test.go: `.Len()`
$DIR/cmd/data-usage-cache_gen_test.go: `.Decode(&buf, &vn)`
$DIR/cmd/data-usage-cache_gen_test.go: `.Reset()`
$DIR/cmd/data-usage-cache_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/data-usage-cache_gen_test.go: `.MarshalMsg(nil)`
$DIR/cmd/data-usage-cache_gen_test.go: `.UnmarshalMsg(bts)`
$DIR/cmd/data-usage-cache_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/data-usage-cache_gen_test.go: `.Msgsize()`
$DIR/cmd/data-usage-cache_gen_test.go: `.Len()`
$DIR/cmd/data-usage-cache_gen_test.go: `.Decode(&buf, &vn)`
$DIR/cmd/data-usage-cache_gen_test.go: `.Reset()`
$DIR/cmd/data-usage-cache_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/data-usage-cache_gen_test.go: `.MarshalMsg(nil)`
$DIR/cmd/data-usage-cache_gen_test.go: `.UnmarshalMsg(bts)`
$DIR/cmd/data-usage-cache_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/data-usage-cache_gen_test.go: `.Msgsize()`
$DIR/cmd/data-usage-cache_gen_test.go: `.Len()`
$DIR/cmd/data-usage-cache_gen_test.go: `.Decode(&buf, &vn)`
$DIR/cmd/data-usage-cache_gen_test.go: `.Reset()`
$DIR/cmd/data-usage-cache_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/data-usage-cache_gen_test.go: `.MarshalMsg(nil)`
$DIR/cmd/data-usage-cache_gen_test.go: `.UnmarshalMsg(bts)`
$DIR/cmd/data-usage-cache_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/data-usage-cache_gen_test.go: `.Msgsize()`
$DIR/cmd/data-usage-cache_gen_test.go: `.Len()`
$DIR/cmd/data-usage-cache_gen_test.go: `.Decode(&buf, &vn)`
$DIR/cmd/data-usage-cache_gen_test.go: `.Reset()`
$DIR/cmd/data-usage-cache_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/data-usage-cache_gen_test.go: `.MarshalMsg(nil)`
$DIR/cmd/data-usage-cache_gen_test.go: `.UnmarshalMsg(bts)`
$DIR/cmd/data-usage-cache_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/data-usage-cache_gen_test.go: `.Msgsize()`
$DIR/cmd/data-usage-cache_gen_test.go: `.Len()`
$DIR/cmd/data-usage-cache_gen_test.go: `.Decode(&buf, &vn)`
$DIR/cmd/data-usage-cache_gen_test.go: `.Reset()`
$DIR/cmd/data-usage-cache_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/data-usage-cache_gen_test.go: `.MarshalMsg(nil)`
$DIR/cmd/data-usage-cache_gen_test.go: `.UnmarshalMsg(bts)`
$DIR/cmd/data-usage-cache_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/data-usage-cache_gen_test.go: `.Msgsize()`
$DIR/cmd/data-usage-cache_gen_test.go: `.Len()`
$DIR/cmd/data-usage-cache_gen_test.go: `.Decode(&buf, &vn)`
$DIR/cmd/data-usage-cache_gen_test.go: `.Reset()`
$DIR/cmd/data-usage-cache_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/data-usage-cache_gen_test.go: `.MarshalMsg(nil)`
$DIR/cmd/data-usage-cache_gen_test.go: `.UnmarshalMsg(bts)`
$DIR/cmd/data-usage-cache_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/data-usage-cache_gen_test.go: `.Msgsize()`
$DIR/cmd/data-usage-cache_gen_test.go: `.Len()`
$DIR/cmd/data-usage-cache_gen_test.go: `.Decode(&buf, &vn)`
$DIR/cmd/data-usage-cache_gen_test.go: `.Reset()`
$DIR/cmd/data-usage-cache_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/data-usage-cache_gen_test.go: `.MarshalMsg(nil)`
$DIR/cmd/data-usage-cache_gen_test.go: `.UnmarshalMsg(bts)`
$DIR/cmd/data-usage-cache_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/data-usage-cache_gen_test.go: `.Msgsize()`
$DIR/cmd/data-usage-cache_gen_test.go: `.Len()`
$DIR/cmd/data-usage-cache_gen_test.go: `.Decode(&buf, &vn)`
$DIR/cmd/data-usage-cache_gen_test.go: `.Reset()`
$DIR/cmd/data-usage-cache_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/data-usage-cache_gen_test.go: `.MarshalMsg(nil)`
$DIR/cmd/data-usage-cache_gen_test.go: `.UnmarshalMsg(bts)`
$DIR/cmd/data-usage-cache_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/data-usage-cache_gen_test.go: `.Msgsize()`
$DIR/cmd/data-usage-cache_gen_test.go: `.Len()`
$DIR/cmd/data-usage-cache_gen_test.go: `.Decode(&buf, &vn)`
$DIR/cmd/data-usage-cache_gen_test.go: `.Reset()`
$DIR/cmd/data-usage-cache_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/data-usage-cache_test.go: `t.Run(fmt.Sprintf("Test-%d", i), func(t *testing.T) {
			var h sizeHistogram
			for _, sz := range test.sizes {
				h.add(sz)
			}
			got := h.toMap()
			exp := test.want
			// what is in exp is in got
			for k := range exp {
				if exp[k] != got[k] {
					t.Fatalf("interval %s: Expected %d values but got %d values\n", k, exp[k], got[k])
				}
			}
			// what is absent in exp is absent in got too
			for k := range got {
				if _, ok := exp[k]; !ok && got[k] > 0 {
					t.Fatalf("Unexpected interval: %s has value %d\n", k, got[k])
				}
			}
		})`
$DIR/cmd/data-usage-cache_test.go: `h.add(sz)`
$DIR/cmd/data-usage-cache_test.go: `t.Run(fmt.Sprintf("test-%d", i), func(t *testing.T) {
			var got sizeHistogram
			got.mergeV1(test.v)
			if got != test.want {
				t.Fatalf("Expected %v but got %v", test.want, got)
			}
		})`
$DIR/cmd/data-usage-cache_test.go: `got.mergeV1(test.v)`
$DIR/cmd/data-usage-cache_test.go: `.Run(fmt.Sprintf("Test-%d", i), func(t *testing.T) {
			var h sizeHistogram
			for _, sz := range test.sizes {
				h.add(sz)
			}
			got := h.toMap()
			exp := test.want
			// what is in exp is in got
			for k := range exp {
				if exp[k] != got[k] {
					t.Fatalf("interval %s: Expected %d values but got %d values\n", k, exp[k], got[k])
				}
			}
			// what is absent in exp is absent in got too
			for k := range got {
				if _, ok := exp[k]; !ok && got[k] > 0 {
					t.Fatalf("Unexpected interval: %s has value %d\n", k, got[k])
				}
			}
		})`
$DIR/cmd/data-usage-cache_test.go: `.Sprintf("Test-%d", i)`
$DIR/cmd/data-usage-cache_test.go: `.add(sz)`
$DIR/cmd/data-usage-cache_test.go: `.toMap()`
$DIR/cmd/data-usage-cache_test.go: `.Run(fmt.Sprintf("test-%d", i), func(t *testing.T) {
			var got sizeHistogram
			got.mergeV1(test.v)
			if got != test.want {
				t.Fatalf("Expected %v but got %v", test.want, got)
			}
		})`
$DIR/cmd/data-usage-cache_test.go: `.Sprintf("test-%d", i)`
$DIR/cmd/data-usage-cache_test.go: `.mergeV1(test.v)`
$DIR/cmd/data-usage_test.go: `createUsageTestFiles(t, base, bucket, files)`
$DIR/cmd/data-usage_test.go: `s, err = os.Stat(item.Path)`
$DIR/cmd/data-usage_test.go: `sizeS.totalSize = s.Size()`
$DIR/cmd/data-usage_test.go: `sizeS.versions++`
$DIR/cmd/data-usage_test.go: `t.Run(p, func(t *testing.T) {
			e := got.find(p)
			if w.isNil {
				if e != nil {
					t.Error("want nil, got", e)
				}
				return
			}
			if e == nil {
				t.Fatal("got nil result")
			}
			if w.flatten {
				*e = got.flatten(*e)
			}
			if e.Size != int64(w.size) {
				t.Error("got size", e.Size, "want", w.size)
			}
			if e.Objects != uint64(w.objs) {
				t.Error("got objects", e.Objects, "want", w.objs)
			}
			if e.Versions != uint64(w.objs) {
				t.Error("got versions", e.Versions, "want", w.objs)
			}
			if e.ObjSizes != w.oSizes {
				t.Error("got histogram", e.ObjSizes, "want", w.oSizes)
			}
		})`
$DIR/cmd/data-usage_test.go: `*e = got.flatten(*e)`
$DIR/cmd/data-usage_test.go: `files = []usageTestFile{
		{
			name: "newfolder/afile",
			size: 4,
		},
		{
			name: "newfolder/anotherone",
			size: 1,
		},
		{
			name: "newfolder/anemptyone",
			size: 0,
		},
		{
			name: "dir1/fileindir1",
			size: 20000,
		},
		{
			name: "dir1/dirc/fileindirc",
			size: 20000,
		},
		{
			name: "rootfile3",
			size: 1000,
		},
		{
			name: "dir1/dira/dirasub/fileindira2",
			size: 200,
		},
	}`
$DIR/cmd/data-usage_test.go: `createUsageTestFiles(t, base, bucket, files)`
$DIR/cmd/data-usage_test.go: `err = os.RemoveAll(filepath.Join(base, bucket, "dir1/dira/dirasub/dcfile"))`
$DIR/cmd/data-usage_test.go: `got, err = scanDataFolder(context.Background(), nil, base, got, getSize, 0, weSleep)`
$DIR/cmd/data-usage_test.go: `got.Info.NextCycle++`
$DIR/cmd/data-usage_test.go: `want = []struct {
		path       string
		isNil      bool
		size, objs int
		flatten    bool
		oSizes     sizeHistogram
	}{
		{
			path:    "/",
			size:    363515,
			flatten: true,
			objs:    14,
			oSizes:  sizeHistogram{0: 7, 1: 5, 2: 2},
		},
		{
			path:    "/dir1",
			size:    342210,
			objs:    7,
			flatten: false,
			oSizes:  sizeHistogram{0: 2, 1: 3, 2: 2},
		},
		{
			path:   "/newfolder",
			size:   5,
			objs:   3,
			oSizes: sizeHistogram{0: 3},
		},
		{
			path:  "/nonexistying",
			isNil: true,
		},
	}`
$DIR/cmd/data-usage_test.go: `t.Run(p, func(t *testing.T) {
			e := got.find(p)
			if w.isNil {
				if e != nil {
					t.Error("want nil, got", e)
				}
				return
			}
			if e == nil {
				t.Fatal("got nil result")
			}
			if w.flatten {
				*e = got.flatten(*e)
			}
			if e.Size != int64(w.size) {
				t.Error("got size", e.Size, "want", w.size)
			}
			if e.Objects != uint64(w.objs) {
				t.Error("got objects", e.Objects, "want", w.objs)
			}
			if e.Versions != uint64(w.objs) {
				t.Error("got versions", e.Versions, "want", w.objs)
			}
			if e.ObjSizes != w.oSizes {
				t.Error("got histogram", e.ObjSizes, "want", w.oSizes)
			}
		})`
$DIR/cmd/data-usage_test.go: `*e = got.flatten(*e)`
$DIR/cmd/data-usage_test.go: `scannerSleeper.Update(0, 0)`
$DIR/cmd/data-usage_test.go: `createUsageTestFiles(t, base, "", files)`
$DIR/cmd/data-usage_test.go: `generateUsageTestFiles(t, base, "bucket/dirwithalot", foldersBelow, filesBelowT, 1)`
$DIR/cmd/data-usage_test.go: `generateUsageTestFiles(t, base, "bucket/dirwithevenmore", filesAboveT, 1, 1)`
$DIR/cmd/data-usage_test.go: `s, err = os.Stat(item.Path)`
$DIR/cmd/data-usage_test.go: `sizeS.totalSize = s.Size()`
$DIR/cmd/data-usage_test.go: `sizeS.versions++`
$DIR/cmd/data-usage_test.go: `t.Run(w.path, func(t *testing.T) {
			e := got.find(w.path)
			if w.path == "flat" {
				f := got.flatten(*got.root())
				e = &f
			}
			if w.isNil {
				if e != nil {
					t.Error("want nil, got", e)
				}
				return
			}
			if e == nil {
				t.Fatal("got nil result")
				return
			}
			if e.Size != int64(w.size) {
				t.Error("got size", e.Size, "want", w.size)
			}
			if e.Objects != uint64(w.objs) {
				t.Error("got objects", e.Objects, "want", w.objs)
			}
			if e.Versions != uint64(w.objs) {
				t.Error("got versions", e.Versions, "want", w.objs)
			}
			if e.ObjSizes != w.oSizes {
				t.Error("got histogram", e.ObjSizes, "want", w.oSizes)
			}
		})`
$DIR/cmd/data-usage_test.go: `e = &f`
$DIR/cmd/data-usage_test.go: `files = []usageTestFile{
		{
			name: "bucket/newfolder/afile",
			size: 4,
		},
		{
			name: "bucket/newfolder/anotherone",
			size: 1,
		},
		{
			name: "bucket/newfolder/anemptyone",
			size: 0,
		},
		{
			name: "bucket/dir1/fileindir1",
			size: 20000,
		},
		{
			name: "bucket/dir1/dirc/fileindirc",
			size: 20000,
		},
		{
			name: "bucket/rootfile3",
			size: 1000,
		},
		{
			name: "bucket/dir1/dira/dirasub/fileindira2",
			size: 200,
		},
	}`
$DIR/cmd/data-usage_test.go: `createUsageTestFiles(t, base, "", files)`
$DIR/cmd/data-usage_test.go: `err = os.RemoveAll(filepath.Join(base, "bucket/dir1/dira/dirasub/dcfile"))`
$DIR/cmd/data-usage_test.go: `got, err = scanDataFolder(context.Background(), nil, base, got, getSize, 0, weSleep)`
$DIR/cmd/data-usage_test.go: `got.Info.NextCycle++`
$DIR/cmd/data-usage_test.go: `want = []struct {
		path       string
		isNil      bool
		size, objs int
		oSizes     sizeHistogram
	}{
		{
			path:   "flat",
			size:   363515 + expectSize,
			objs:   14 + expectSize,
			oSizes: sizeHistogram{0: 7 + expectSize, 1: 5, 2: 2},
		},
		{
			path:   "bucket/dir1",
			size:   342210,
			objs:   7,
			oSizes: sizeHistogram{0: 2, 1: 3, 2: 2},
		},
		{
			path:   "bucket/",
			size:   21000,
			objs:   3,
			oSizes: sizeHistogram{0: 1, 1: 2},
		},
		{
			path:   "bucket/newfolder",
			size:   5,
			objs:   3,
			oSizes: sizeHistogram{0: 3},
		},
		{
			// Compacted into bucket/dir1
			path:  "bucket/dir1/dira",
			isNil: true,
		},
		{
			path:  "bucket/nonexistying",
			isNil: true,
		},
	}`
$DIR/cmd/data-usage_test.go: `t.Run(w.path, func(t *testing.T) {
			e := got.find(w.path)
			if w.path == "flat" {
				f := got.flatten(*got.root())
				e = &f
			}
			if w.isNil {
				if e != nil {
					t.Error("want nil, got", e)
				}
				return
			}
			if e == nil {
				t.Error("got nil result")
				return
			}
			if e.Size != int64(w.size) {
				t.Error("got size", e.Size, "want", w.size)
			}
			if e.Objects != uint64(w.objs) {
				t.Error("got objects", e.Objects, "want", w.objs)
			}
			if e.Versions != uint64(w.objs) {
				t.Error("got versions", e.Versions, "want", w.objs)
			}
			if e.ObjSizes != w.oSizes {
				t.Error("got histogram", e.ObjSizes, "want", w.oSizes)
			}
		})`
$DIR/cmd/data-usage_test.go: `e = &f`
$DIR/cmd/data-usage_test.go: `createUsageTestFiles(t, base, bucket, files)`
$DIR/cmd/data-usage_test.go: `s, err = os.Stat(item.Path)`
$DIR/cmd/data-usage_test.go: `sizeS.versions++`
$DIR/cmd/data-usage_test.go: `sizeS.totalSize = s.Size()`
$DIR/cmd/data-usage_test.go: `e.ReplicationStats = &replicationAllStats{
		Targets: map[string]replicationStats{
			"arn": {
				PendingSize:    1,
				ReplicatedSize: 2,
				FailedSize:     3,
				FailedCount:    5,
				PendingCount:   6,
			},
		},
	}`
$DIR/cmd/data-usage_test.go: `want.replace("abucket/dir2", "", *e)`
$DIR/cmd/data-usage_test.go: `err = want.serializeTo(&buf)`
$DIR/cmd/data-usage_test.go: `err = got.deserialize(&buf)`
$DIR/cmd/data-usage_test.go: `.TempDir()`
$DIR/cmd/data-usage_test.go: `.Stat(item.Path)`
$DIR/cmd/data-usage_test.go: `.Size()`
$DIR/cmd/data-usage_test.go: `.Background()`
$DIR/cmd/data-usage_test.go: `.Join(bucket, w.path)`
$DIR/cmd/data-usage_test.go: `.Run(p, func(t *testing.T) {
			e := got.find(p)
			if w.isNil {
				if e != nil {
					t.Error("want nil, got", e)
				}
				return
			}
			if e == nil {
				t.Fatal("got nil result")
			}
			if w.flatten {
				*e = got.flatten(*e)
			}
			if e.Size != int64(w.size) {
				t.Error("got size", e.Size, "want", w.size)
			}
			if e.Objects != uint64(w.objs) {
				t.Error("got objects", e.Objects, "want", w.objs)
			}
			if e.Versions != uint64(w.objs) {
				t.Error("got versions", e.Versions, "want", w.objs)
			}
			if e.ObjSizes != w.oSizes {
				t.Error("got histogram", e.ObjSizes, "want", w.oSizes)
			}
		})`
$DIR/cmd/data-usage_test.go: `.find(p)`
$DIR/cmd/data-usage_test.go: `.flatten(*e)`
$DIR/cmd/data-usage_test.go: `.RemoveAll(filepath.Join(base, bucket, "dir1/dira/dirasub/dcfile"))`
$DIR/cmd/data-usage_test.go: `.Join(base, bucket, "dir1/dira/dirasub/dcfile")`
$DIR/cmd/data-usage_test.go: `.Background()`
$DIR/cmd/data-usage_test.go: `.Join(bucket, w.path)`
$DIR/cmd/data-usage_test.go: `.Run(p, func(t *testing.T) {
			e := got.find(p)
			if w.isNil {
				if e != nil {
					t.Error("want nil, got", e)
				}
				return
			}
			if e == nil {
				t.Fatal("got nil result")
			}
			if w.flatten {
				*e = got.flatten(*e)
			}
			if e.Size != int64(w.size) {
				t.Error("got size", e.Size, "want", w.size)
			}
			if e.Objects != uint64(w.objs) {
				t.Error("got objects", e.Objects, "want", w.objs)
			}
			if e.Versions != uint64(w.objs) {
				t.Error("got versions", e.Versions, "want", w.objs)
			}
			if e.ObjSizes != w.oSizes {
				t.Error("got histogram", e.ObjSizes, "want", w.oSizes)
			}
		})`
$DIR/cmd/data-usage_test.go: `.find(p)`
$DIR/cmd/data-usage_test.go: `.flatten(*e)`
$DIR/cmd/data-usage_test.go: `.TempDir()`
$DIR/cmd/data-usage_test.go: `.Update(0, 0)`
$DIR/cmd/data-usage_test.go: `.Stat(item.Path)`
$DIR/cmd/data-usage_test.go: `.Size()`
$DIR/cmd/data-usage_test.go: `.Background()`
$DIR/cmd/data-usage_test.go: `.root()`
$DIR/cmd/data-usage_test.go: `.Run(w.path, func(t *testing.T) {
			e := got.find(w.path)
			if w.path == "flat" {
				f := got.flatten(*got.root())
				e = &f
			}
			if w.isNil {
				if e != nil {
					t.Error("want nil, got", e)
				}
				return
			}
			if e == nil {
				t.Fatal("got nil result")
				return
			}
			if e.Size != int64(w.size) {
				t.Error("got size", e.Size, "want", w.size)
			}
			if e.Objects != uint64(w.objs) {
				t.Error("got objects", e.Objects, "want", w.objs)
			}
			if e.Versions != uint64(w.objs) {
				t.Error("got versions", e.Versions, "want", w.objs)
			}
			if e.ObjSizes != w.oSizes {
				t.Error("got histogram", e.ObjSizes, "want", w.oSizes)
			}
		})`
$DIR/cmd/data-usage_test.go: `.find(w.path)`
$DIR/cmd/data-usage_test.go: `.flatten(*got.root())`
$DIR/cmd/data-usage_test.go: `.root()`
$DIR/cmd/data-usage_test.go: `.RemoveAll(filepath.Join(base, "bucket/dir1/dira/dirasub/dcfile"))`
$DIR/cmd/data-usage_test.go: `.Join(base, "bucket/dir1/dira/dirasub/dcfile")`
$DIR/cmd/data-usage_test.go: `.Background()`
$DIR/cmd/data-usage_test.go: `.Run(w.path, func(t *testing.T) {
			e := got.find(w.path)
			if w.path == "flat" {
				f := got.flatten(*got.root())
				e = &f
			}
			if w.isNil {
				if e != nil {
					t.Error("want nil, got", e)
				}
				return
			}
			if e == nil {
				t.Error("got nil result")
				return
			}
			if e.Size != int64(w.size) {
				t.Error("got size", e.Size, "want", w.size)
			}
			if e.Objects != uint64(w.objs) {
				t.Error("got objects", e.Objects, "want", w.objs)
			}
			if e.Versions != uint64(w.objs) {
				t.Error("got versions", e.Versions, "want", w.objs)
			}
			if e.ObjSizes != w.oSizes {
				t.Error("got histogram", e.ObjSizes, "want", w.oSizes)
			}
		})`
$DIR/cmd/data-usage_test.go: `.find(w.path)`
$DIR/cmd/data-usage_test.go: `.flatten(*got.root())`
$DIR/cmd/data-usage_test.go: `.root()`
$DIR/cmd/data-usage_test.go: `.TempDir()`
$DIR/cmd/data-usage_test.go: `.Stat(item.Path)`
$DIR/cmd/data-usage_test.go: `.Size()`
$DIR/cmd/data-usage_test.go: `.Background()`
$DIR/cmd/data-usage_test.go: `.find("abucket/dir2")`
$DIR/cmd/data-usage_test.go: `.replace("abucket/dir2", "", *e)`
$DIR/cmd/data-usage_test.go: `.serializeTo(&buf)`
$DIR/cmd/data-usage_test.go: `.deserialize(&buf)`
$DIR/cmd/data-usage_test.go: `.Info.LastUpdate.IsZero()`
$DIR/cmd/data-usage_test.go: `.Info.LastUpdate.Equal(got.Info.LastUpdate)`
$DIR/cmd/dummy-data-generator_test.go: `checkEq(readAll(NewDummyDataGen(0, 0)), "")`
$DIR/cmd/dummy-data-generator_test.go: `checkEq(readAll(NewDummyDataGen(10, 0)), readAll(NewDummyDataGen(10, int64(len(alphabets)))))`
$DIR/cmd/dummy-data-generator_test.go: `checkEq(readAll(NewDummyDataGen(100, 0)), readAll(NewDummyDataGen(50, 0))+readAll(NewDummyDataGen(50, 50)))`
$DIR/cmd/dummy-data-generator_test.go: `r.Seek(int64(len(alphabets)), 0)`
$DIR/cmd/dummy-data-generator_test.go: `.ReadAll(r)`
$DIR/cmd/dummy-data-generator_test.go: `.Seek(int64(len(alphabets)), 0)`
$DIR/cmd/dummy-data-generator_test.go: `.NewReader([]byte("abc"))`
$DIR/cmd/dummy-data-generator_test.go: `.NewReader([]byte("abc"))`
$DIR/cmd/dummy-data-generator_test.go: `.NewReader([]byte("abc"))`
$DIR/cmd/dummy-data-generator_test.go: `.NewReader([]byte("abcd"))`
$DIR/cmd/dynamic-timeouts_test.go: `timeout.LogFailure()`
$DIR/cmd/dynamic-timeouts_test.go: `timeout.LogFailure()`
$DIR/cmd/dynamic-timeouts_test.go: `timeout.LogFailure()`
$DIR/cmd/dynamic-timeouts_test.go: `timeout.LogSuccess(20 * time.Second)`
$DIR/cmd/dynamic-timeouts_test.go: `timeout.LogSuccess(20 * time.Second)`
$DIR/cmd/dynamic-timeouts_test.go: `timeout.LogSuccess(20 * time.Second)`
$DIR/cmd/dynamic-timeouts_test.go: `timeout.LogSuccess(successTimeout)`
$DIR/cmd/dynamic-timeouts_test.go: `wg.Add(1)`
$DIR/cmd/dynamic-timeouts_test.go: `timeout.LogSuccess(time.Duration(float64(time.Second) * rng.Float64()))`
$DIR/cmd/dynamic-timeouts_test.go: `timeout.LogSuccess(successTimeout)`
$DIR/cmd/dynamic-timeouts_test.go: `rand.Seed(0)`
$DIR/cmd/dynamic-timeouts_test.go: `testDynamicTimeoutAdjust(t, timeout, rand.ExpFloat64)`
$DIR/cmd/dynamic-timeouts_test.go: `rand.Seed(0)`
$DIR/cmd/dynamic-timeouts_test.go: `testDynamicTimeoutAdjust(t, timeout, func() float64 {
			return 1.0 + rand.NormFloat64()
		})`
$DIR/cmd/dynamic-timeouts_test.go: `.Timeout()`
$DIR/cmd/dynamic-timeouts_test.go: `.LogFailure()`
$DIR/cmd/dynamic-timeouts_test.go: `.Timeout()`
$DIR/cmd/dynamic-timeouts_test.go: `.Timeout()`
$DIR/cmd/dynamic-timeouts_test.go: `.LogFailure()`
$DIR/cmd/dynamic-timeouts_test.go: `.Timeout()`
$DIR/cmd/dynamic-timeouts_test.go: `.LogFailure()`
$DIR/cmd/dynamic-timeouts_test.go: `.Timeout()`
$DIR/cmd/dynamic-timeouts_test.go: `.Timeout()`
$DIR/cmd/dynamic-timeouts_test.go: `.LogSuccess(20 * time.Second)`
$DIR/cmd/dynamic-timeouts_test.go: `.Timeout()`
$DIR/cmd/dynamic-timeouts_test.go: `.Timeout()`
$DIR/cmd/dynamic-timeouts_test.go: `.LogSuccess(20 * time.Second)`
$DIR/cmd/dynamic-timeouts_test.go: `.Timeout()`
$DIR/cmd/dynamic-timeouts_test.go: `.LogSuccess(20 * time.Second)`
$DIR/cmd/dynamic-timeouts_test.go: `.Timeout()`
$DIR/cmd/dynamic-timeouts_test.go: `.Timeout()`
$DIR/cmd/dynamic-timeouts_test.go: `.LogSuccess(successTimeout)`
$DIR/cmd/dynamic-timeouts_test.go: `.Timeout()`
$DIR/cmd/dynamic-timeouts_test.go: `.GOMAXPROCS(0)`
$DIR/cmd/dynamic-timeouts_test.go: `.Add(1)`
$DIR/cmd/dynamic-timeouts_test.go: `.New(rand.NewSource(int64(i)))`
$DIR/cmd/dynamic-timeouts_test.go: `.NewSource(int64(i))`
$DIR/cmd/dynamic-timeouts_test.go: `.Done()`
$DIR/cmd/dynamic-timeouts_test.go: `.LogSuccess(time.Duration(float64(time.Second) * rng.Float64()))`
$DIR/cmd/dynamic-timeouts_test.go: `.Duration(float64(time.Second) * rng.Float64())`
$DIR/cmd/dynamic-timeouts_test.go: `.Float64()`
$DIR/cmd/dynamic-timeouts_test.go: `.Timeout()`
$DIR/cmd/dynamic-timeouts_test.go: `.Timeout()`
$DIR/cmd/dynamic-timeouts_test.go: `.LogSuccess(successTimeout)`
$DIR/cmd/dynamic-timeouts_test.go: `.Timeout()`
$DIR/cmd/dynamic-timeouts_test.go: `.Seed(0)`
$DIR/cmd/dynamic-timeouts_test.go: `.Timeout()`
$DIR/cmd/dynamic-timeouts_test.go: `.Timeout()`
$DIR/cmd/dynamic-timeouts_test.go: `.Seed(0)`
$DIR/cmd/dynamic-timeouts_test.go: `.Timeout()`
$DIR/cmd/dynamic-timeouts_test.go: `.NormFloat64()`
$DIR/cmd/dynamic-timeouts_test.go: `.Timeout()`
$DIR/cmd/encryption-v1_test.go: `globalIsTLS = flag`
$DIR/cmd/encryption-v1_test.go: `globalIsTLS = true`
$DIR/cmd/encryption-v1_test.go: `req.Header.Set(k, v)`
$DIR/cmd/encryption-v1_test.go: `delete(m, crypto.MetaMultipart)`
$DIR/cmd/encryption-v1_test.go: `rLen = test.decSz + 32`
$DIR/cmd/encryption-v1_test.go: `rLen = (pkgSz + 32) + (test.decSz - pkgSz + 32)`
$DIR/cmd/encryption-v1_test.go: `rLen = (pkgSz + 32) + (test.decSz - pkgSz + 32*2)`
$DIR/cmd/encryption-v1_test.go: `r[i].Number = i`
$DIR/cmd/encryption-v1_test.go: `r[i].Size = getEncSize(s)`
$DIR/cmd/encryption-v1_test.go: `sum += r[i].Size`
$DIR/cmd/encryption-v1_test.go: `a = append(a, k)`
$DIR/cmd/encryption-v1_test.go: `sum += i`
$DIR/cmd/encryption-v1_test.go: `sum += i.Size`
$DIR/cmd/encryption-v1_test.go: `skipLen = oSize - readLen`
$DIR/cmd/encryption-v1_test.go: `readStart = true`
$DIR/cmd/encryption-v1_test.go: `partOffset = skipLen - cumulativeSum`
$DIR/cmd/encryption-v1_test.go: `sn = uint32(partOffset / pkgSz)`
$DIR/cmd/encryption-v1_test.go: `skip = partOffset % pkgSz`
$DIR/cmd/encryption-v1_test.go: `ps = i`
$DIR/cmd/encryption-v1_test.go: `o = cumulativeEncSum + int64(sn)*(pkgSz+32)`
$DIR/cmd/encryption-v1_test.go: `partDarePkgOffset = partOffset - skip`
$DIR/cmd/encryption-v1_test.go: `toRead -= currentPartBytes`
$DIR/cmd/encryption-v1_test.go: `l += getEncSize(currentPartDareBytes)`
$DIR/cmd/encryption-v1_test.go: `lbPkgEndOffset = v`
$DIR/cmd/encryption-v1_test.go: `l += getEncSize(currentPartDareBytes - bytesToDrop)`
$DIR/cmd/encryption-v1_test.go: `cumulativeSum += v`
$DIR/cmd/encryption-v1_test.go: `cumulativeEncSum += getEncSize(v)`
$DIR/cmd/encryption-v1_test.go: `.NewReader(make([]byte, 64))`
$DIR/cmd/encryption-v1_test.go: `.Header.Set(k, v)`
$DIR/cmd/encryption-v1_test.go: `.IsEncrypted(test.info.UserDefined)`
$DIR/cmd/encryption-v1_test.go: `.GetDecryptedRange(rs)`
$DIR/cmd/encryption-v1_test.go: `.EncryptedSize(uint64(s))`
$DIR/cmd/encryption-v1_test.go: `.oi.GetDecryptedRange(nil)`
$DIR/cmd/encryption-v1_test.go: `.oi.GetDecryptedRange(&HTTPRangeSpec{false, 0, 9})`
$DIR/cmd/encryption-v1_test.go: `.oi.GetDecryptedRange(&HTTPRangeSpec{false, kb32, 3*kb32 - 1})`
$DIR/cmd/encryption-v1_test.go: `.oi.GetDecryptedRange(&HTTPRangeSpec{false, 3 * kb32, 5*kb32 - 1})`
$DIR/cmd/encryption-v1_test.go: `.oi.GetDecryptedRange(nil)`
$DIR/cmd/encryption-v1_test.go: `.oi.GetDecryptedRange(&HTTPRangeSpec{false, skipLen, skipLen + readLen - 1})`
$DIR/cmd/encryption-v1_test.go: `.oi.GetDecryptedRange(&HTTPRangeSpec{true, -readLen, -1})`
$DIR/cmd/encryption-v1_test.go: `.ServerSideEncryption.Type()`
$DIR/cmd/endpoint-ellipses_test.go: `t.Run("", func(t *testing.T) {
			srvCtxt := serverCtxt{}
			err := mergeDisksLayoutFromArgs(testCase.args, &srvCtxt)
			if err != nil && testCase.success {
				t.Fatalf("Test %d: unexpected error: %v", i+1, err)
			}
			_, _, err = createServerEndpoints(testCase.serverAddr, srvCtxt.Layout.pools, srvCtxt.Layout.legacy)
			if err != nil && testCase.success {
				t.Errorf("Test %d: Expected success but failed instead %s", i+1, err)
			}
			if err == nil && !testCase.success {
				t.Errorf("Test %d: Expected failure but passed instead", i+1)
			}
		})`
$DIR/cmd/endpoint-ellipses_test.go: `_, _, err = createServerEndpoints(testCase.serverAddr, srvCtxt.Layout.pools, srvCtxt.Layout.legacy)`
$DIR/cmd/endpoint-ellipses_test.go: `t.Run("", func(t *testing.T) {
			gotGCD := getDivisibleSize(testCase.totalSizes)
			if testCase.result != gotGCD {
				t.Errorf("Expected %v, got %v", testCase.result, gotGCD)
			}
		})`
$DIR/cmd/endpoint-ellipses_test.go: `t.Run("", func(t *testing.T) {
			argPatterns := make([]ellipses.ArgPattern, len(testCase.args))
			for i, arg := range testCase.args {
				patterns, err := ellipses.FindEllipsesPatterns(arg)
				if err != nil {
					t.Fatalf("Unexpected failure %s", err)
				}
				argPatterns[i] = patterns
			}

			gotIndexes, err := getSetIndexes(testCase.args, testCase.totalSizes, testCase.envOverride, argPatterns)
			if err != nil && testCase.success {
				t.Errorf("Expected success but failed instead %s", err)
			}
			if err == nil && !testCase.success {
				t.Errorf("Expected failure but passed instead")
			}
			if !reflect.DeepEqual(testCase.indexes, gotIndexes) {
				t.Errorf("Expected %v, got %v", testCase.indexes, gotIndexes)
			}
		})`
$DIR/cmd/endpoint-ellipses_test.go: `argPatterns[i] = patterns`
$DIR/cmd/endpoint-ellipses_test.go: `t.Run("", func(t *testing.T) {
			argPatterns := make([]ellipses.ArgPattern, len(testCase.args))
			for i, arg := range testCase.args {
				patterns, err := ellipses.FindEllipsesPatterns(arg)
				if err != nil {
					t.Fatalf("Unexpected failure %s", err)
				}
				argPatterns[i] = patterns
			}
			gotIndexes, err := getSetIndexes(testCase.args, testCase.totalSizes, 0, argPatterns)
			if err != nil && testCase.success {
				t.Errorf("Expected success but failed instead %s", err)
			}
			if err == nil && !testCase.success {
				t.Errorf("Expected failure but passed instead")
			}
			if !reflect.DeepEqual(testCase.indexes, gotIndexes) {
				t.Errorf("Expected %v, got %v", testCase.indexes, gotIndexes)
			}
		})`
$DIR/cmd/endpoint-ellipses_test.go: `argPatterns[i] = patterns`
$DIR/cmd/endpoint-ellipses_test.go: `t.Run("", func(t *testing.T) {
			gotEs, err := parseEndpointSet(0, testCase.arg)
			if err != nil && testCase.success {
				t.Errorf("Expected success but failed instead %s", err)
			}
			if err == nil && !testCase.success {
				t.Errorf("Expected failure but passed instead")
			}
			if !reflect.DeepEqual(testCase.es, gotEs) {
				t.Errorf("Expected %v, got %v", testCase.es, gotEs)
			}
		})`
$DIR/cmd/endpoint-ellipses_test.go: `.Run("", func(t *testing.T) {
			srvCtxt := serverCtxt{}
			err := mergeDisksLayoutFromArgs(testCase.args, &srvCtxt)
			if err != nil && testCase.success {
				t.Fatalf("Test %d: unexpected error: %v", i+1, err)
			}
			_, _, err = createServerEndpoints(testCase.serverAddr, srvCtxt.Layout.pools, srvCtxt.Layout.legacy)
			if err != nil && testCase.success {
				t.Errorf("Test %d: Expected success but failed instead %s", i+1, err)
			}
			if err == nil && !testCase.success {
				t.Errorf("Test %d: Expected failure but passed instead", i+1)
			}
		})`
$DIR/cmd/endpoint-ellipses_test.go: `.Run("", func(t *testing.T) {
			gotGCD := getDivisibleSize(testCase.totalSizes)
			if testCase.result != gotGCD {
				t.Errorf("Expected %v, got %v", testCase.result, gotGCD)
			}
		})`
$DIR/cmd/endpoint-ellipses_test.go: `.Run("", func(t *testing.T) {
			argPatterns := make([]ellipses.ArgPattern, len(testCase.args))
			for i, arg := range testCase.args {
				patterns, err := ellipses.FindEllipsesPatterns(arg)
				if err != nil {
					t.Fatalf("Unexpected failure %s", err)
				}
				argPatterns[i] = patterns
			}

			gotIndexes, err := getSetIndexes(testCase.args, testCase.totalSizes, testCase.envOverride, argPatterns)
			if err != nil && testCase.success {
				t.Errorf("Expected success but failed instead %s", err)
			}
			if err == nil && !testCase.success {
				t.Errorf("Expected failure but passed instead")
			}
			if !reflect.DeepEqual(testCase.indexes, gotIndexes) {
				t.Errorf("Expected %v, got %v", testCase.indexes, gotIndexes)
			}
		})`
$DIR/cmd/endpoint-ellipses_test.go: `.FindEllipsesPatterns(arg)`
$DIR/cmd/endpoint-ellipses_test.go: `.DeepEqual(testCase.indexes, gotIndexes)`
$DIR/cmd/endpoint-ellipses_test.go: `.Run("", func(t *testing.T) {
			argPatterns := make([]ellipses.ArgPattern, len(testCase.args))
			for i, arg := range testCase.args {
				patterns, err := ellipses.FindEllipsesPatterns(arg)
				if err != nil {
					t.Fatalf("Unexpected failure %s", err)
				}
				argPatterns[i] = patterns
			}
			gotIndexes, err := getSetIndexes(testCase.args, testCase.totalSizes, 0, argPatterns)
			if err != nil && testCase.success {
				t.Errorf("Expected success but failed instead %s", err)
			}
			if err == nil && !testCase.success {
				t.Errorf("Expected failure but passed instead")
			}
			if !reflect.DeepEqual(testCase.indexes, gotIndexes) {
				t.Errorf("Expected %v, got %v", testCase.indexes, gotIndexes)
			}
		})`
$DIR/cmd/endpoint-ellipses_test.go: `.FindEllipsesPatterns(arg)`
$DIR/cmd/endpoint-ellipses_test.go: `.DeepEqual(testCase.indexes, gotIndexes)`
$DIR/cmd/endpoint-ellipses_test.go: `.Run("", func(t *testing.T) {
			gotEs, err := parseEndpointSet(0, testCase.arg)
			if err != nil && testCase.success {
				t.Errorf("Expected success but failed instead %s", err)
			}
			if err == nil && !testCase.success {
				t.Errorf("Expected failure but passed instead")
			}
			if !reflect.DeepEqual(testCase.es, gotEs) {
				t.Errorf("Expected %v, got %v", testCase.es, gotEs)
			}
		})`
$DIR/cmd/endpoint-ellipses_test.go: `.DeepEqual(testCase.es, gotEs)`
$DIR/cmd/endpoint_contrib_test.go: `globalMinioPort = tempGlobalMinioPort`
$DIR/cmd/endpoint_contrib_test.go: `globalMinioPort = "9000"`
$DIR/cmd/endpoint_contrib_test.go: `globalDomainIPs = tempGlobalDomainIPs`
$DIR/cmd/endpoint_contrib_test.go: `globalDomainIPs = nil`
$DIR/cmd/endpoint_contrib_test.go: `updateDomainIPs(testCase.endPoints)`
$DIR/cmd/endpoint_contrib_test.go: `.NewStringSet()`
$DIR/cmd/endpoint_contrib_test.go: `.NewStringSet()`
$DIR/cmd/endpoint_contrib_test.go: `.CreateStringSet("localhost")`
$DIR/cmd/endpoint_contrib_test.go: `.NewStringSet()`
$DIR/cmd/endpoint_contrib_test.go: `.CreateStringSet("localhost", "10.0.0.1")`
$DIR/cmd/endpoint_contrib_test.go: `.CreateStringSet("10.0.0.1:9000")`
$DIR/cmd/endpoint_contrib_test.go: `.CreateStringSet("localhost:9001", "10.0.0.1")`
$DIR/cmd/endpoint_contrib_test.go: `.CreateStringSet("10.0.0.1:9000")`
$DIR/cmd/endpoint_contrib_test.go: `.CreateStringSet("localhost", "10.0.0.1:9001")`
$DIR/cmd/endpoint_contrib_test.go: `.CreateStringSet("10.0.0.1:9001")`
$DIR/cmd/endpoint_contrib_test.go: `.CreateStringSet("localhost:9000", "10.0.0.1:9001")`
$DIR/cmd/endpoint_contrib_test.go: `.CreateStringSet("10.0.0.1:9001")`
$DIR/cmd/endpoint_contrib_test.go: `.CreateStringSet("10.0.0.1", "10.0.0.2")`
$DIR/cmd/endpoint_contrib_test.go: `.CreateStringSet("10.0.0.1:9000", "10.0.0.2:9000")`
$DIR/cmd/endpoint_contrib_test.go: `.CreateStringSet("10.0.0.1:9001", "10.0.0.2")`
$DIR/cmd/endpoint_contrib_test.go: `.CreateStringSet("10.0.0.1:9001", "10.0.0.2:9000")`
$DIR/cmd/endpoint_contrib_test.go: `.CreateStringSet("10.0.0.1", "10.0.0.2:9002")`
$DIR/cmd/endpoint_contrib_test.go: `.CreateStringSet("10.0.0.1:9000", "10.0.0.2:9002")`
$DIR/cmd/endpoint_contrib_test.go: `.CreateStringSet("10.0.0.1:9001", "10.0.0.2:9002")`
$DIR/cmd/endpoint_contrib_test.go: `.CreateStringSet("10.0.0.1:9001", "10.0.0.2:9002")`
$DIR/cmd/endpoint_contrib_test.go: `.expectedResult.Equals(globalDomainIPs)`
$DIR/cmd/endpoint_test.go: `t.Run(fmt.Sprint("case-", i), func(t *testing.T) {
			endpoint, err := NewEndpoint(test.arg)
			if err == nil {
				err = endpoint.UpdateIsLocal()
			}

			switch {
			case test.expectedErr == nil:
				if err != nil {
					t.Errorf("error: expected = <nil>, got = %v", err)
				}
			case err == nil:
				t.Errorf("error: expected = %v, got = <nil>", test.expectedErr)
			case test.expectedErr.Error() != err.Error():
				t.Errorf("error: expected = %v, got = %v", test.expectedErr, err)
			}

			if err == nil {
				if (test.expectedEndpoint.URL == nil) != (endpoint.URL == nil) {
					t.Errorf("endpoint url: expected = %#v, got = %#v", test.expectedEndpoint.URL, endpoint.URL)
					return
				} else if test.expectedEndpoint.URL.String() != endpoint.URL.String() {
					t.Errorf("endpoint url: expected = %#v, got = %#v", test.expectedEndpoint.URL.String(), endpoint.URL.String())
					return
				}
				if !reflect.DeepEqual(test.expectedEndpoint, endpoint) {
					t.Errorf("endpoint: expected = %#v, got = %#v", test.expectedEndpoint, endpoint)
				}
			}

			if err == nil && test.expectedType != endpoint.Type() {
				t.Errorf("type: expected = %+v, got = %+v", test.expectedType, endpoint.Type())
			}
		})`
$DIR/cmd/endpoint_test.go: `err = endpoint.UpdateIsLocal()`
$DIR/cmd/endpoint_test.go: `globalMinioPort = tempGlobalMinioPort`
$DIR/cmd/endpoint_test.go: `globalMinioPort = "9000"`
$DIR/cmd/endpoint_test.go: `URLs = append(URLs, u)`
$DIR/cmd/endpoint_test.go: `localFlags = append(localFlags, strings.HasPrefix(arg, prefix))`
$DIR/cmd/endpoint_test.go: `args = []string{
		"http://" + nonLoopBackIP + ":10000/d1",
		"http://" + nonLoopBackIP + ":9000/d2",
		"http://example.org:10000/d3",
		"http://example.com:10000/d4",
	}`
$DIR/cmd/endpoint_test.go: `args = []string{
		"http://" + nonLoopBackIP + ":80/d1",
		"http://example.org:9000/d2",
		"http://example.com:80/d3",
		"http://example.net:80/d4",
	}`
$DIR/cmd/endpoint_test.go: `args = []string{
		"http://" + nonLoopBackIP + ":9000/d1",
		"http://example.org:9000/d2",
		"http://example.com:9000/d3",
		"http://example.net:9000/d4",
	}`
$DIR/cmd/endpoint_test.go: `args = []string{
		case5Endpoint1,
		case5Endpoint2,
		case5Endpoint3,
		case5Endpoint4,
	}`
$DIR/cmd/endpoint_test.go: `args = []string{
		"http://localhost:9000/d1",
		"http://localhost:9001/d2",
		"http://127.0.0.1:9002/d3",
		case6Endpoint,
	}`
$DIR/cmd/endpoint_test.go: `t.Run("", func(t *testing.T) {
			var srvCtxt serverCtxt
			err := mergeDisksLayoutFromArgs(testCase.args, &srvCtxt)
			if err != nil && testCase.expectedErr == nil {
				t.Errorf("Test %d: unexpected error: %v", i+1, err)
			}
			pools, setupType, err := CreatePoolEndpoints(testCase.serverAddr, srvCtxt.Layout.pools...)
			if err == nil && testCase.expectedErr != nil {
				t.Errorf("Test %d: expected = %v, got = <nil>", i+1, testCase.expectedErr)
			}
			if err == nil {
				if setupType != testCase.expectedSetupType {
					t.Errorf("Test %d: setupType: expected = %v, got = %v", i+1, testCase.expectedSetupType, setupType)
				}
				endpoints := pools[0]
				if len(endpoints) != len(testCase.expectedEndpoints) {
					t.Errorf("Test %d: endpoints: expected = %d, got = %d", i+1, len(testCase.expectedEndpoints),
						len(endpoints))
				} else {
					for i, endpoint := range endpoints {
						if testCase.expectedEndpoints[i].String() != endpoint.String() {
							t.Errorf("Test %d: endpoints: expected = %s, got = %s",
								i+1,
								testCase.expectedEndpoints[i],
								endpoint)
						}
					}
				}
			}
			if err != nil && testCase.expectedErr == nil {
				t.Errorf("Test %d: error: expected = <nil>, got = %v, testCase: %v", i+1, err, testCase)
			}
		})`
$DIR/cmd/endpoint_test.go: `globalMinioPort = tempGlobalMinioPort`
$DIR/cmd/endpoint_test.go: `globalMinioPort = "9000"`
$DIR/cmd/endpoint_test.go: `globalMinioPort = tempGlobalMinioPort`
$DIR/cmd/endpoint_test.go: `globalMinioPort = "9000"`
$DIR/cmd/endpoint_test.go: `.Parse("https://example.org/path")`
$DIR/cmd/endpoint_test.go: `.Parse("http://192.168.253.200/path")`
$DIR/cmd/endpoint_test.go: `.Abs("/foo")`
$DIR/cmd/endpoint_test.go: `.Run(fmt.Sprint("case-", i), func(t *testing.T) {
			endpoint, err := NewEndpoint(test.arg)
			if err == nil {
				err = endpoint.UpdateIsLocal()
			}

			switch {
			case test.expectedErr == nil:
				if err != nil {
					t.Errorf("error: expected = <nil>, got = %v", err)
				}
			case err == nil:
				t.Errorf("error: expected = %v, got = <nil>", test.expectedErr)
			case test.expectedErr.Error() != err.Error():
				t.Errorf("error: expected = %v, got = %v", test.expectedErr, err)
			}

			if err == nil {
				if (test.expectedEndpoint.URL == nil) != (endpoint.URL == nil) {
					t.Errorf("endpoint url: expected = %#v, got = %#v", test.expectedEndpoint.URL, endpoint.URL)
					return
				} else if test.expectedEndpoint.URL.String() != endpoint.URL.String() {
					t.Errorf("endpoint url: expected = %#v, got = %#v", test.expectedEndpoint.URL.String(), endpoint.URL.String())
					return
				}
				if !reflect.DeepEqual(test.expectedEndpoint, endpoint) {
					t.Errorf("endpoint: expected = %#v, got = %#v", test.expectedEndpoint, endpoint)
				}
			}

			if err == nil && test.expectedType != endpoint.Type() {
				t.Errorf("type: expected = %+v, got = %+v", test.expectedType, endpoint.Type())
			}
		})`
$DIR/cmd/endpoint_test.go: `.Sprint("case-", i)`
$DIR/cmd/endpoint_test.go: `.UpdateIsLocal()`
$DIR/cmd/endpoint_test.go: `.expectedEndpoint.URL.String()`
$DIR/cmd/endpoint_test.go: `.URL.String()`
$DIR/cmd/endpoint_test.go: `.DeepEqual(test.expectedEndpoint, endpoint)`
$DIR/cmd/endpoint_test.go: `.Type()`
$DIR/cmd/endpoint_test.go: `.FuncMatch(func(ip string, matchString string) bool {
		return !net.ParseIP(ip).IsLoopback()
	}, "")`
$DIR/cmd/endpoint_test.go: `.ParseIP(ip)`
$DIR/cmd/endpoint_test.go: `.IsLoopback()`
$DIR/cmd/endpoint_test.go: `.ToSlice()`
$DIR/cmd/endpoint_test.go: `.Abs(s)`
$DIR/cmd/endpoint_test.go: `.Parse(arg)`
$DIR/cmd/endpoint_test.go: `.HasPrefix(arg, prefix)`
$DIR/cmd/endpoint_test.go: `.Run("", func(t *testing.T) {
			var srvCtxt serverCtxt
			err := mergeDisksLayoutFromArgs(testCase.args, &srvCtxt)
			if err != nil && testCase.expectedErr == nil {
				t.Errorf("Test %d: unexpected error: %v", i+1, err)
			}
			pools, setupType, err := CreatePoolEndpoints(testCase.serverAddr, srvCtxt.Layout.pools...)
			if err == nil && testCase.expectedErr != nil {
				t.Errorf("Test %d: expected = %v, got = <nil>", i+1, testCase.expectedErr)
			}
			if err == nil {
				if setupType != testCase.expectedSetupType {
					t.Errorf("Test %d: setupType: expected = %v, got = %v", i+1, testCase.expectedSetupType, setupType)
				}
				endpoints := pools[0]
				if len(endpoints) != len(testCase.expectedEndpoints) {
					t.Errorf("Test %d: endpoints: expected = %d, got = %d", i+1, len(testCase.expectedEndpoints),
						len(endpoints))
				} else {
					for i, endpoint := range endpoints {
						if testCase.expectedEndpoints[i].String() != endpoint.String() {
							t.Errorf("Test %d: endpoints: expected = %s, got = %s",
								i+1,
								testCase.expectedEndpoints[i],
								endpoint)
						}
					}
				}
			}
			if err != nil && testCase.expectedErr == nil {
				t.Errorf("Test %d: error: expected = <nil>, got = %v, testCase: %v", i+1, err, testCase)
			}
		})`
$DIR/cmd/endpoint_test.go: `.String()`
$DIR/cmd/endpoint_test.go: `.String()`
$DIR/cmd/endpoint_test.go: `.Endpoints.UpdateIsLocal()`
$DIR/cmd/endpoint_test.go: `.Endpoints.UpdateIsLocal()`
$DIR/cmd/endpoint_test.go: `.peers()`
$DIR/cmd/endpoint_test.go: `.DeepEqual(remotePeers, testCase.expectedResult)`
$DIR/cmd/erasure-decode_test.go: `writeAlgorithm = DefaultBitrotAlgorithm`
$DIR/cmd/erasure-decode_test.go: `writers[i] = newBitrotWriter(disk, "", "testbucket", "object", erasure.ShardFileSize(test.data), writeAlgorithm, erasure.ShardSize())`
$DIR/cmd/erasure-decode_test.go: `closeBitrotWriters(writers)`
$DIR/cmd/erasure-decode_test.go: `disks[i] = nil`
$DIR/cmd/erasure-decode_test.go: `bitrotReaders[index] = newBitrotReader(disk, nil, "testbucket", "object", tillOffset, writeAlgorithm, bitrotWriterSum(writers[index]), erasure.ShardSize())`
$DIR/cmd/erasure-decode_test.go: `_, err = erasure.Decode(context.Background(), writer, bitrotReaders, test.offset, test.length, test.data, nil)`
$DIR/cmd/erasure-decode_test.go: `closeBitrotReaders(bitrotReaders)`
$DIR/cmd/erasure-decode_test.go: `disks[i] = OfflineDisk`
$DIR/cmd/erasure-decode_test.go: `bitrotReaders = make([]io.ReaderAt, len(disks))`
$DIR/cmd/erasure-decode_test.go: `bitrotReaders[index] = newBitrotReader(disk, nil, "testbucket", "object", tillOffset, writeAlgorithm, bitrotWriterSum(writers[index]), erasure.ShardSize())`
$DIR/cmd/erasure-decode_test.go: `r.disk = badDisk{nil}`
$DIR/cmd/erasure-decode_test.go: `r.disk = badDisk{nil}`
$DIR/cmd/erasure-decode_test.go: `bitrotReaders[0] = nil`
$DIR/cmd/erasure-decode_test.go: `writer.Reset()`
$DIR/cmd/erasure-decode_test.go: `_, err = erasure.Decode(context.Background(), writer, bitrotReaders, test.offset, test.length, test.data, nil)`
$DIR/cmd/erasure-decode_test.go: `closeBitrotReaders(bitrotReaders)`
$DIR/cmd/erasure-decode_test.go: `_, err = rand.Read(data)`
$DIR/cmd/erasure-decode_test.go: `writers[i] = newBitrotWriter(disk, "", "testbucket", "object", erasure.ShardFileSize(length), DefaultBitrotAlgorithm, erasure.ShardSize())`
$DIR/cmd/erasure-decode_test.go: `closeBitrotWriters(writers)`
$DIR/cmd/erasure-decode_test.go: `bitrotReaders[index] = newStreamingBitrotReader(disk, nil, "testbucket", "object", tillOffset, DefaultBitrotAlgorithm, erasure.ShardSize())`
$DIR/cmd/erasure-decode_test.go: `_, err = erasure.Decode(context.Background(), buf, bitrotReaders, offset, readLen, length, nil)`
$DIR/cmd/erasure-decode_test.go: `closeBitrotReaders(bitrotReaders)`
$DIR/cmd/erasure-decode_test.go: `buf.Reset()`
$DIR/cmd/erasure-decode_test.go: `.Background()`
$DIR/cmd/erasure-decode_test.go: `.ReadFull(crand.Reader, data)`
$DIR/cmd/erasure-decode_test.go: `.algorithm.Available()`
$DIR/cmd/erasure-decode_test.go: `.ShardFileSize(test.data)`
$DIR/cmd/erasure-decode_test.go: `.ShardSize()`
$DIR/cmd/erasure-decode_test.go: `.Encode(context.Background(), bytes.NewReader(data), writers, buffer, erasure.dataBlocks+1)`
$DIR/cmd/erasure-decode_test.go: `.Background()`
$DIR/cmd/erasure-decode_test.go: `.NewReader(data)`
$DIR/cmd/erasure-decode_test.go: `.ShardFileOffset(test.offset, test.length, test.data)`
$DIR/cmd/erasure-decode_test.go: `.ShardSize()`
$DIR/cmd/erasure-decode_test.go: `.NewBuffer(nil)`
$DIR/cmd/erasure-decode_test.go: `.Decode(context.Background(), writer, bitrotReaders, test.offset, test.length, test.data, nil)`
$DIR/cmd/erasure-decode_test.go: `.Background()`
$DIR/cmd/erasure-decode_test.go: `.Bytes()`
$DIR/cmd/erasure-decode_test.go: `.Equal(content, data[test.offset:test.offset+test.length])`
$DIR/cmd/erasure-decode_test.go: `.ShardFileOffset(test.offset, test.length, test.data)`
$DIR/cmd/erasure-decode_test.go: `.ShardSize()`
$DIR/cmd/erasure-decode_test.go: `.Reset()`
$DIR/cmd/erasure-decode_test.go: `.Decode(context.Background(), writer, bitrotReaders, test.offset, test.length, test.data, nil)`
$DIR/cmd/erasure-decode_test.go: `.Background()`
$DIR/cmd/erasure-decode_test.go: `.Bytes()`
$DIR/cmd/erasure-decode_test.go: `.Equal(content, data[test.offset:test.offset+test.length])`
$DIR/cmd/erasure-decode_test.go: `.Short()`
$DIR/cmd/erasure-decode_test.go: `.Background()`
$DIR/cmd/erasure-decode_test.go: `.Read(data)`
$DIR/cmd/erasure-decode_test.go: `.ShardFileSize(length)`
$DIR/cmd/erasure-decode_test.go: `.ShardSize()`
$DIR/cmd/erasure-decode_test.go: `.Encode(context.Background(), bytes.NewReader(data), writers, buffer, erasure.dataBlocks+1)`
$DIR/cmd/erasure-decode_test.go: `.Background()`
$DIR/cmd/erasure-decode_test.go: `.NewReader(data)`
$DIR/cmd/erasure-decode_test.go: `.New(rand.NewSource(UTCNow().UnixNano()))`
$DIR/cmd/erasure-decode_test.go: `.NewSource(UTCNow().UnixNano())`
$DIR/cmd/erasure-decode_test.go: `.UnixNano()`
$DIR/cmd/erasure-decode_test.go: `.Int63n(length)`
$DIR/cmd/erasure-decode_test.go: `.Int63n(length - offset)`
$DIR/cmd/erasure-decode_test.go: `.ShardFileOffset(offset, readLen, length)`
$DIR/cmd/erasure-decode_test.go: `.ShardSize()`
$DIR/cmd/erasure-decode_test.go: `.Decode(context.Background(), buf, bitrotReaders, offset, readLen, length, nil)`
$DIR/cmd/erasure-decode_test.go: `.Background()`
$DIR/cmd/erasure-decode_test.go: `.Bytes()`
$DIR/cmd/erasure-decode_test.go: `.Equal(expected, got)`
$DIR/cmd/erasure-decode_test.go: `.Reset()`
$DIR/cmd/erasure-encode_test.go: `writers[i] = newBitrotWriter(disk, "", "testbucket", "object", erasure.ShardFileSize(int64(len(data[test.offset:]))), test.algorithm, erasure.ShardSize())`
$DIR/cmd/erasure-encode_test.go: `closeBitrotWriters(writers)`
$DIR/cmd/erasure-encode_test.go: `disks[i] = OfflineDisk`
$DIR/cmd/erasure-encode_test.go: `writers[i] = newBitrotWriter(disk, "", "testbucket", "object2", erasure.ShardFileSize(int64(len(data[test.offset:]))), test.algorithm, erasure.ShardSize())`
$DIR/cmd/erasure-encode_test.go: `w.disk = badDisk{nil}`
$DIR/cmd/erasure-encode_test.go: `w.closeWithErr(errFaultyDisk)`
$DIR/cmd/erasure-encode_test.go: `writers[0] = nil`
$DIR/cmd/erasure-encode_test.go: `n, err = erasure.Encode(context.Background(), bytes.NewReader(data[test.offset:]), writers, buffer, erasure.dataBlocks+1)`
$DIR/cmd/erasure-encode_test.go: `closeBitrotWriters(writers)`
$DIR/cmd/erasure-encode_test.go: `.Background()`
$DIR/cmd/erasure-encode_test.go: `.ReadFull(rand.Reader, data)`
$DIR/cmd/erasure-encode_test.go: `.ShardFileSize(int64(len(data[test.offset:])))`
$DIR/cmd/erasure-encode_test.go: `.ShardSize()`
$DIR/cmd/erasure-encode_test.go: `.Encode(context.Background(), bytes.NewReader(data[test.offset:]), writers, buffer, erasure.dataBlocks+1)`
$DIR/cmd/erasure-encode_test.go: `.Background()`
$DIR/cmd/erasure-encode_test.go: `.NewReader(data[test.offset:])`
$DIR/cmd/erasure-encode_test.go: `.ShardFileSize(int64(len(data[test.offset:])))`
$DIR/cmd/erasure-encode_test.go: `.ShardSize()`
$DIR/cmd/erasure-encode_test.go: `.closeWithErr(errFaultyDisk)`
$DIR/cmd/erasure-encode_test.go: `.Encode(context.Background(), bytes.NewReader(data[test.offset:]), writers, buffer, erasure.dataBlocks+1)`
$DIR/cmd/erasure-encode_test.go: `.Background()`
$DIR/cmd/erasure-encode_test.go: `.NewReader(data[test.offset:])`
$DIR/cmd/erasure-heal_test.go: `writers[i] = newBitrotWriter(disk, "", "testbucket", "testobject", erasure.ShardFileSize(test.size), test.algorithm, erasure.ShardSize())`
$DIR/cmd/erasure-heal_test.go: `_, err = erasure.Encode(context.Background(), bytes.NewReader(data), writers, buffer, erasure.dataBlocks+1)`
$DIR/cmd/erasure-heal_test.go: `closeBitrotWriters(writers)`
$DIR/cmd/erasure-heal_test.go: `readers[i] = newBitrotReader(disk, nil, "testbucket", "testobject", shardFilesize, test.algorithm, bitrotWriterSum(writers[i]), erasure.ShardSize())`
$DIR/cmd/erasure-heal_test.go: `copy(staleDisks, disks)`
$DIR/cmd/erasure-heal_test.go: `readers[j] = nil`
$DIR/cmd/erasure-heal_test.go: `staleDisks[j] = nil`
$DIR/cmd/erasure-heal_test.go: `r.disk = badDisk{nil}`
$DIR/cmd/erasure-heal_test.go: `r.disk = badDisk{nil}`
$DIR/cmd/erasure-heal_test.go: `staleDisks[j] = badDisk{nil}`
$DIR/cmd/erasure-heal_test.go: `os.Remove(pathJoin(disk.String(), "testbucket", "testobject"))`
$DIR/cmd/erasure-heal_test.go: `staleWriters[i] = newBitrotWriter(disk, "", "testbucket", "testobject", erasure.ShardFileSize(test.size), test.algorithm, erasure.ShardSize())`
$DIR/cmd/erasure-heal_test.go: `err = erasure.Heal(context.Background(), staleWriters, readers, test.size, nil)`
$DIR/cmd/erasure-heal_test.go: `closeBitrotReaders(readers)`
$DIR/cmd/erasure-heal_test.go: `closeBitrotWriters(staleWriters)`
$DIR/cmd/erasure-heal_test.go: `.Background()`
$DIR/cmd/erasure-heal_test.go: `.ReadFull(rand.Reader, data)`
$DIR/cmd/erasure-heal_test.go: `.ShardFileSize(test.size)`
$DIR/cmd/erasure-heal_test.go: `.ShardSize()`
$DIR/cmd/erasure-heal_test.go: `.Encode(context.Background(), bytes.NewReader(data), writers, buffer, erasure.dataBlocks+1)`
$DIR/cmd/erasure-heal_test.go: `.Background()`
$DIR/cmd/erasure-heal_test.go: `.NewReader(data)`
$DIR/cmd/erasure-heal_test.go: `.ShardFileSize(test.size)`
$DIR/cmd/erasure-heal_test.go: `.ShardSize()`
$DIR/cmd/erasure-heal_test.go: `.Remove(pathJoin(disk.String(), "testbucket", "testobject"))`
$DIR/cmd/erasure-heal_test.go: `.String()`
$DIR/cmd/erasure-heal_test.go: `.ShardFileSize(test.size)`
$DIR/cmd/erasure-heal_test.go: `.ShardSize()`
$DIR/cmd/erasure-heal_test.go: `.Heal(context.Background(), staleWriters, readers, test.size, nil)`
$DIR/cmd/erasure-heal_test.go: `.Background()`
$DIR/cmd/erasure-heal_test.go: `.Equal(bitrotWriterSum(staleWriters[i]), bitrotWriterSum(writers[i]))`
$DIR/cmd/erasure-healing-common_test.go: `setObjectLayer(obj)`
$DIR/cmd/erasure-healing-common_test.go: `modTimesThreeFour[i] = fourNanoSecs`
$DIR/cmd/erasure-healing-common_test.go: `modTimesThreeNone[i] = timeSentinel`
$DIR/cmd/erasure-healing-common_test.go: `modTimesThreeFour[i] = threeNanoSecs`
$DIR/cmd/erasure-healing-common_test.go: `modTimesThreeNone[i] = threeNanoSecs`
$DIR/cmd/erasure-healing-common_test.go: `err = obj.MakeBucket(ctx, "bucket", MakeBucketOptions{})`
$DIR/cmd/erasure-healing-common_test.go: `t.Run(fmt.Sprintf("case-%d", i), func(t *testing.T) {
			_, err = obj.PutObject(ctx, bucket, object, mustGetPutObjReader(t, bytes.NewReader(data), int64(len(data)), "", ""), ObjectOptions{})
			if err != nil {
				t.Fatalf("Failed to putObject %v", err)
			}

			partsMetadata, errs := readAllFileInfo(ctx, erasureDisks, "", bucket, object, "", false, true)
			fi, err := getLatestFileInfo(ctx, partsMetadata, z.serverPools[0].sets[0].defaultParityCount, errs)
			if err != nil {
				t.Fatalf("Failed to getLatestFileInfo %v", err)
			}

			for j := range partsMetadata {
				if errs[j] != nil {
					t.Fatalf("expected error to be nil: %s", errs[j])
				}
				partsMetadata[j].ModTime = test.modTimes[j]
			}

			tamperedIndex := -1
			switch test._tamperBackend {
			case deletePart:
				for index, err := range test.errs {
					if err != nil {
						continue
					}
					// Remove a part from a disk
					// which has a valid xl.meta,
					// and check if that disk
					// appears in outDatedDisks.
					tamperedIndex = index
					dErr := erasureDisks[index].Delete(context.Background(), bucket, pathJoin(object, fi.DataDir, "part.1"), DeleteOptions{
						Recursive: false,
						Immediate: false,
					})
					if dErr != nil {
						t.Fatalf("Failed to delete %s - %v", filepath.Join(object, "part.1"), dErr)
					}
					break
				}
			case corruptPart:
				for index, err := range test.errs {
					if err != nil {
						continue
					}
					// Corrupt a part from a disk
					// which has a valid xl.meta,
					// and check if that disk
					// appears in outDatedDisks.
					tamperedIndex = index
					filePath := pathJoin(erasureDisks[index].String(), bucket, object, fi.DataDir, "part.1")
					f, err := os.OpenFile(filePath, os.O_WRONLY|os.O_SYNC, 0)
					if err != nil {
						t.Fatalf("Failed to open %s: %s\n", filePath, err)
					}
					f.WriteString("oops") // Will cause bitrot error
					f.Close()
					break
				}

			}

			rQuorum := len(errs) - z.serverPools[0].sets[0].defaultParityCount
			onlineDisks, modTime, _ := listOnlineDisks(erasureDisks, partsMetadata, test.errs, rQuorum)
			if !modTime.Equal(test.expectedTime) {
				t.Fatalf("Expected modTime to be equal to %v but was found to be %v",
					test.expectedTime, modTime)
			}
			availableDisks, newErrs, _ := disksWithAllParts(ctx, onlineDisks, partsMetadata,
				test.errs, fi, bucket, object, madmin.HealDeepScan)
			test.errs = newErrs

			if test._tamperBackend != noTamper {
				if tamperedIndex != -1 && availableDisks[tamperedIndex] != nil {
					t.Fatalf("Drive (%v) with part.1 missing is not a drive with available data",
						erasureDisks[tamperedIndex])
				}
			}
		})`
$DIR/cmd/erasure-healing-common_test.go: `_, err = obj.PutObject(ctx, bucket, object, mustGetPutObjReader(t, bytes.NewReader(data), int64(len(data)), "", ""), ObjectOptions{})`
$DIR/cmd/erasure-healing-common_test.go: `partsMetadata[j].ModTime = test.modTimes[j]`
$DIR/cmd/erasure-healing-common_test.go: `tamperedIndex = index`
$DIR/cmd/erasure-healing-common_test.go: `tamperedIndex = index`
$DIR/cmd/erasure-healing-common_test.go: `f.WriteString("oops")`
$DIR/cmd/erasure-healing-common_test.go: `test.errs = newErrs`
$DIR/cmd/erasure-healing-common_test.go: `setObjectLayer(obj)`
$DIR/cmd/erasure-healing-common_test.go: `modTimesThreeFour[i] = fourNanoSecs`
$DIR/cmd/erasure-healing-common_test.go: `modTimesThreeNone[i] = timeSentinel`
$DIR/cmd/erasure-healing-common_test.go: `modTimesThreeFour[i] = threeNanoSecs`
$DIR/cmd/erasure-healing-common_test.go: `modTimesThreeNone[i] = threeNanoSecs`
$DIR/cmd/erasure-healing-common_test.go: `err = obj.MakeBucket(ctx, "bucket", MakeBucketOptions{})`
$DIR/cmd/erasure-healing-common_test.go: `t.Run(fmt.Sprintf("case-%d", i), func(t *testing.T) {
			_, err := obj.PutObject(ctx, bucket, object,
				mustGetPutObjReader(t, bytes.NewReader(data), int64(len(data)), "", ""), ObjectOptions{})
			if err != nil {
				t.Fatalf("Failed to putObject %v", err)
			}

			partsMetadata, errs := readAllFileInfo(ctx, erasureDisks, "", bucket, object, "", true, true)
			fi, err := getLatestFileInfo(ctx, partsMetadata, z.serverPools[0].sets[0].defaultParityCount, errs)
			if err != nil {
				t.Fatalf("Failed to getLatestFileInfo %v", err)
			}

			for j := range partsMetadata {
				if errs[j] != nil {
					t.Fatalf("expected error to be nil: %s", errs[j])
				}
				partsMetadata[j].ModTime = test.modTimes[j]
			}

			if erasureDisks, err = writeUniqueFileInfo(ctx, erasureDisks, "", bucket, object, partsMetadata, diskCount(erasureDisks)); err != nil {
				t.Fatal(ctx, err)
			}

			tamperedIndex := -1
			switch test._tamperBackend {
			case deletePart:
				for index, err := range test.errs {
					if err != nil {
						continue
					}
					// Remove a part from a disk
					// which has a valid xl.meta,
					// and check if that disk
					// appears in outDatedDisks.
					tamperedIndex = index
					dErr := erasureDisks[index].Delete(context.Background(), bucket, pathJoin(object, xlStorageFormatFile), DeleteOptions{
						Recursive: false,
						Immediate: false,
					})
					if dErr != nil {
						t.Fatalf("Failed to delete %s - %v", pathJoin(object, xlStorageFormatFile), dErr)
					}
					break
				}
			case corruptPart:
				for index, err := range test.errs {
					if err != nil {
						continue
					}
					// Corrupt a part from a disk
					// which has a valid xl.meta,
					// and check if that disk
					// appears in outDatedDisks.
					tamperedIndex = index
					filePath := pathJoin(erasureDisks[index].String(), bucket, object, xlStorageFormatFile)
					f, err := os.OpenFile(filePath, os.O_WRONLY|os.O_SYNC, 0)
					if err != nil {
						t.Fatalf("Failed to open %s: %s\n", filePath, err)
					}
					f.WriteString("oops") // Will cause bitrot error
					f.Close()
					break
				}

			}

			rQuorum := len(errs) - z.serverPools[0].sets[0].defaultParityCount
			onlineDisks, modTime, _ := listOnlineDisks(erasureDisks, partsMetadata, test.errs, rQuorum)
			if !modTime.Equal(test.expectedTime) {
				t.Fatalf("Expected modTime to be equal to %v but was found to be %v",
					test.expectedTime, modTime)
			}

			availableDisks, newErrs, _ := disksWithAllParts(ctx, onlineDisks, partsMetadata,
				test.errs, fi, bucket, object, madmin.HealDeepScan)
			test.errs = newErrs

			if test._tamperBackend != noTamper {
				if tamperedIndex != -1 && availableDisks[tamperedIndex] != nil {
					t.Fatalf("Drive (%v) with part.1 missing is not a drive with available data",
						erasureDisks[tamperedIndex])
				}
			}
		})`
$DIR/cmd/erasure-healing-common_test.go: `partsMetadata[j].ModTime = test.modTimes[j]`
$DIR/cmd/erasure-healing-common_test.go: `tamperedIndex = index`
$DIR/cmd/erasure-healing-common_test.go: `tamperedIndex = index`
$DIR/cmd/erasure-healing-common_test.go: `f.WriteString("oops")`
$DIR/cmd/erasure-healing-common_test.go: `test.errs = newErrs`
$DIR/cmd/erasure-healing-common_test.go: `setObjectLayer(obj)`
$DIR/cmd/erasure-healing-common_test.go: `err = obj.MakeBucket(ctx, "bucket", MakeBucketOptions{})`
$DIR/cmd/erasure-healing-common_test.go: `_, err = obj.PutObject(ctx, bucket, object, mustGetPutObjReader(t, bytes.NewReader(data), int64(len(data)), "", ""), ObjectOptions{})`
$DIR/cmd/erasure-healing-common_test.go: `erasureDisks, _, _ = listOnlineDisks(erasureDisks, partsMetadata, errs, readQuorum)`
$DIR/cmd/erasure-healing-common_test.go: `partsMetadata[0].ModTime = partsMetadata[0].ModTime.Add(-1 * time.Hour)`
$DIR/cmd/erasure-healing-common_test.go: `errs = make([]error, len(erasureDisks))`
$DIR/cmd/erasure-healing-common_test.go: `filteredDisks, _, _ = disksWithAllParts(ctx, erasureDisks, partsMetadata,
		errs, fi, bucket, object, madmin.HealDeepScan)`
$DIR/cmd/erasure-healing-common_test.go: `partsMetadata[0] = partsMetadataBackup`
$DIR/cmd/erasure-healing-common_test.go: `partsMetadataBackup = partsMetadata[1]`
$DIR/cmd/erasure-healing-common_test.go: `partsMetadata[1].DataDir = "foo-random"`
$DIR/cmd/erasure-healing-common_test.go: `errs = make([]error, len(erasureDisks))`
$DIR/cmd/erasure-healing-common_test.go: `filteredDisks, _, _ = disksWithAllParts(ctx, erasureDisks, partsMetadata,
		errs, fi, bucket, object, madmin.HealDeepScan)`
$DIR/cmd/erasure-healing-common_test.go: `partsMetadata[1] = partsMetadataBackup`
$DIR/cmd/erasure-healing-common_test.go: `diskFailures[0] = "part.1"`
$DIR/cmd/erasure-healing-common_test.go: `diskFailures[3] = "part.1"`
$DIR/cmd/erasure-healing-common_test.go: `diskFailures[15] = "part.1"`
$DIR/cmd/erasure-healing-common_test.go: `f.WriteString("oops")`
$DIR/cmd/erasure-healing-common_test.go: `errs = make([]error, len(erasureDisks))`
$DIR/cmd/erasure-healing-common_test.go: `filteredDisks, errs, _ = disksWithAllParts(ctx, erasureDisks, partsMetadata,
		errs, fi, bucket, object, madmin.HealDeepScan)`
$DIR/cmd/erasure-healing-common_test.go: `fi = test.fi2`
$DIR/cmd/erasure-healing-common_test.go: `metaArr = append(metaArr, fi)`
$DIR/cmd/erasure-healing-common_test.go: `match++`
$DIR/cmd/erasure-healing-common_test.go: `.Unix(0, 1)`
$DIR/cmd/erasure-healing-common_test.go: `.UTC()`
$DIR/cmd/erasure-healing-common_test.go: `.Unix(0, 2)`
$DIR/cmd/erasure-healing-common_test.go: `.UTC()`
$DIR/cmd/erasure-healing-common_test.go: `.Unix(0, 3)`
$DIR/cmd/erasure-healing-common_test.go: `.UTC()`
$DIR/cmd/erasure-healing-common_test.go: `.Unix(0, 3)`
$DIR/cmd/erasure-healing-common_test.go: `.UTC()`
$DIR/cmd/erasure-healing-common_test.go: `.Unix(0, 2)`
$DIR/cmd/erasure-healing-common_test.go: `.UTC()`
$DIR/cmd/erasure-healing-common_test.go: `.Unix(0, 3)`
$DIR/cmd/erasure-healing-common_test.go: `.UTC()`
$DIR/cmd/erasure-healing-common_test.go: `.Unix(0, 1)`
$DIR/cmd/erasure-healing-common_test.go: `.UTC()`
$DIR/cmd/erasure-healing-common_test.go: `.Unix(0, 3)`
$DIR/cmd/erasure-healing-common_test.go: `.UTC()`
$DIR/cmd/erasure-healing-common_test.go: `.Unix(0, 3)`
$DIR/cmd/erasure-healing-common_test.go: `.UTC()`
$DIR/cmd/erasure-healing-common_test.go: `.Unix(0, 3)`
$DIR/cmd/erasure-healing-common_test.go: `.UTC()`
$DIR/cmd/erasure-healing-common_test.go: `.Unix(0, 3)`
$DIR/cmd/erasure-healing-common_test.go: `.UTC()`
$DIR/cmd/erasure-healing-common_test.go: `.Unix(0, 3)`
$DIR/cmd/erasure-healing-common_test.go: `.UTC()`
$DIR/cmd/erasure-healing-common_test.go: `.Unix(0, 3)`
$DIR/cmd/erasure-healing-common_test.go: `.UTC()`
$DIR/cmd/erasure-healing-common_test.go: `.Unix(0, 3)`
$DIR/cmd/erasure-healing-common_test.go: `.UTC()`
$DIR/cmd/erasure-healing-common_test.go: `.Unix(0, 3)`
$DIR/cmd/erasure-healing-common_test.go: `.UTC()`
$DIR/cmd/erasure-healing-common_test.go: `.Unix(0, 3)`
$DIR/cmd/erasure-healing-common_test.go: `.UTC()`
$DIR/cmd/erasure-healing-common_test.go: `.Unix(0, 3)`
$DIR/cmd/erasure-healing-common_test.go: `.UTC()`
$DIR/cmd/erasure-healing-common_test.go: `.Unix(0, 3)`
$DIR/cmd/erasure-healing-common_test.go: `.UTC()`
$DIR/cmd/erasure-healing-common_test.go: `.Unix(0, 2)`
$DIR/cmd/erasure-healing-common_test.go: `.UTC()`
$DIR/cmd/erasure-healing-common_test.go: `.Unix(0, 1)`
$DIR/cmd/erasure-healing-common_test.go: `.UTC()`
$DIR/cmd/erasure-healing-common_test.go: `.Unix(0, 3)`
$DIR/cmd/erasure-healing-common_test.go: `.UTC()`
$DIR/cmd/erasure-healing-common_test.go: `.Unix(0, 4)`
$DIR/cmd/erasure-healing-common_test.go: `.UTC()`
$DIR/cmd/erasure-healing-common_test.go: `.Unix(0, 3)`
$DIR/cmd/erasure-healing-common_test.go: `.UTC()`
$DIR/cmd/erasure-healing-common_test.go: `.time.Equal(ctime)`
$DIR/cmd/erasure-healing-common_test.go: `.WithCancel(context.Background())`
$DIR/cmd/erasure-healing-common_test.go: `.Background()`
$DIR/cmd/erasure-healing-common_test.go: `.Shutdown(context.Background())`
$DIR/cmd/erasure-healing-common_test.go: `.Background()`
$DIR/cmd/erasure-healing-common_test.go: `.Unix(1, 0)`
$DIR/cmd/erasure-healing-common_test.go: `.UTC()`
$DIR/cmd/erasure-healing-common_test.go: `.Unix(3, 0)`
$DIR/cmd/erasure-healing-common_test.go: `.UTC()`
$DIR/cmd/erasure-healing-common_test.go: `.Unix(4, 0)`
$DIR/cmd/erasure-healing-common_test.go: `.UTC()`
$DIR/cmd/erasure-healing-common_test.go: `.MakeBucket(ctx, "bucket", MakeBucketOptions{})`
$DIR/cmd/erasure-healing-common_test.go: `.Repeat([]byte("a"), smallFileThreshold*16)`
$DIR/cmd/erasure-healing-common_test.go: `.GetDisks(0, 0)`
$DIR/cmd/erasure-healing-common_test.go: `.Run(fmt.Sprintf("case-%d", i), func(t *testing.T) {
			_, err = obj.PutObject(ctx, bucket, object, mustGetPutObjReader(t, bytes.NewReader(data), int64(len(data)), "", ""), ObjectOptions{})
			if err != nil {
				t.Fatalf("Failed to putObject %v", err)
			}

			partsMetadata, errs := readAllFileInfo(ctx, erasureDisks, "", bucket, object, "", false, true)
			fi, err := getLatestFileInfo(ctx, partsMetadata, z.serverPools[0].sets[0].defaultParityCount, errs)
			if err != nil {
				t.Fatalf("Failed to getLatestFileInfo %v", err)
			}

			for j := range partsMetadata {
				if errs[j] != nil {
					t.Fatalf("expected error to be nil: %s", errs[j])
				}
				partsMetadata[j].ModTime = test.modTimes[j]
			}

			tamperedIndex := -1
			switch test._tamperBackend {
			case deletePart:
				for index, err := range test.errs {
					if err != nil {
						continue
					}
					// Remove a part from a disk
					// which has a valid xl.meta,
					// and check if that disk
					// appears in outDatedDisks.
					tamperedIndex = index
					dErr := erasureDisks[index].Delete(context.Background(), bucket, pathJoin(object, fi.DataDir, "part.1"), DeleteOptions{
						Recursive: false,
						Immediate: false,
					})
					if dErr != nil {
						t.Fatalf("Failed to delete %s - %v", filepath.Join(object, "part.1"), dErr)
					}
					break
				}
			case corruptPart:
				for index, err := range test.errs {
					if err != nil {
						continue
					}
					// Corrupt a part from a disk
					// which has a valid xl.meta,
					// and check if that disk
					// appears in outDatedDisks.
					tamperedIndex = index
					filePath := pathJoin(erasureDisks[index].String(), bucket, object, fi.DataDir, "part.1")
					f, err := os.OpenFile(filePath, os.O_WRONLY|os.O_SYNC, 0)
					if err != nil {
						t.Fatalf("Failed to open %s: %s\n", filePath, err)
					}
					f.WriteString("oops") // Will cause bitrot error
					f.Close()
					break
				}

			}

			rQuorum := len(errs) - z.serverPools[0].sets[0].defaultParityCount
			onlineDisks, modTime, _ := listOnlineDisks(erasureDisks, partsMetadata, test.errs, rQuorum)
			if !modTime.Equal(test.expectedTime) {
				t.Fatalf("Expected modTime to be equal to %v but was found to be %v",
					test.expectedTime, modTime)
			}
			availableDisks, newErrs, _ := disksWithAllParts(ctx, onlineDisks, partsMetadata,
				test.errs, fi, bucket, object, madmin.HealDeepScan)
			test.errs = newErrs

			if test._tamperBackend != noTamper {
				if tamperedIndex != -1 && availableDisks[tamperedIndex] != nil {
					t.Fatalf("Drive (%v) with part.1 missing is not a drive with available data",
						erasureDisks[tamperedIndex])
				}
			}
		})`
$DIR/cmd/erasure-healing-common_test.go: `.Sprintf("case-%d", i)`
$DIR/cmd/erasure-healing-common_test.go: `.PutObject(ctx, bucket, object, mustGetPutObjReader(t, bytes.NewReader(data), int64(len(data)), "", ""), ObjectOptions{})`
$DIR/cmd/erasure-healing-common_test.go: `.NewReader(data)`
$DIR/cmd/erasure-healing-common_test.go: `.Delete(context.Background(), bucket, pathJoin(object, fi.DataDir, "part.1"), DeleteOptions{
						Recursive: false,
						Immediate: false,
					})`
$DIR/cmd/erasure-healing-common_test.go: `.Background()`
$DIR/cmd/erasure-healing-common_test.go: `.String()`
$DIR/cmd/erasure-healing-common_test.go: `.OpenFile(filePath, os.O_WRONLY|os.O_SYNC, 0)`
$DIR/cmd/erasure-healing-common_test.go: `.WriteString("oops")`
$DIR/cmd/erasure-healing-common_test.go: `.Equal(test.expectedTime)`
$DIR/cmd/erasure-healing-common_test.go: `.WithCancel(context.Background())`
$DIR/cmd/erasure-healing-common_test.go: `.Background()`
$DIR/cmd/erasure-healing-common_test.go: `.Shutdown(context.Background())`
$DIR/cmd/erasure-healing-common_test.go: `.Background()`
$DIR/cmd/erasure-healing-common_test.go: `.Unix(1, 0)`
$DIR/cmd/erasure-healing-common_test.go: `.UTC()`
$DIR/cmd/erasure-healing-common_test.go: `.Unix(3, 0)`
$DIR/cmd/erasure-healing-common_test.go: `.UTC()`
$DIR/cmd/erasure-healing-common_test.go: `.Unix(4, 0)`
$DIR/cmd/erasure-healing-common_test.go: `.UTC()`
$DIR/cmd/erasure-healing-common_test.go: `.MakeBucket(ctx, "bucket", MakeBucketOptions{})`
$DIR/cmd/erasure-healing-common_test.go: `.Repeat([]byte("a"), smallFileThreshold/2)`
$DIR/cmd/erasure-healing-common_test.go: `.GetDisks(0, 0)`
$DIR/cmd/erasure-healing-common_test.go: `.Run(fmt.Sprintf("case-%d", i), func(t *testing.T) {
			_, err := obj.PutObject(ctx, bucket, object,
				mustGetPutObjReader(t, bytes.NewReader(data), int64(len(data)), "", ""), ObjectOptions{})
			if err != nil {
				t.Fatalf("Failed to putObject %v", err)
			}

			partsMetadata, errs := readAllFileInfo(ctx, erasureDisks, "", bucket, object, "", true, true)
			fi, err := getLatestFileInfo(ctx, partsMetadata, z.serverPools[0].sets[0].defaultParityCount, errs)
			if err != nil {
				t.Fatalf("Failed to getLatestFileInfo %v", err)
			}

			for j := range partsMetadata {
				if errs[j] != nil {
					t.Fatalf("expected error to be nil: %s", errs[j])
				}
				partsMetadata[j].ModTime = test.modTimes[j]
			}

			if erasureDisks, err = writeUniqueFileInfo(ctx, erasureDisks, "", bucket, object, partsMetadata, diskCount(erasureDisks)); err != nil {
				t.Fatal(ctx, err)
			}

			tamperedIndex := -1
			switch test._tamperBackend {
			case deletePart:
				for index, err := range test.errs {
					if err != nil {
						continue
					}
					// Remove a part from a disk
					// which has a valid xl.meta,
					// and check if that disk
					// appears in outDatedDisks.
					tamperedIndex = index
					dErr := erasureDisks[index].Delete(context.Background(), bucket, pathJoin(object, xlStorageFormatFile), DeleteOptions{
						Recursive: false,
						Immediate: false,
					})
					if dErr != nil {
						t.Fatalf("Failed to delete %s - %v", pathJoin(object, xlStorageFormatFile), dErr)
					}
					break
				}
			case corruptPart:
				for index, err := range test.errs {
					if err != nil {
						continue
					}
					// Corrupt a part from a disk
					// which has a valid xl.meta,
					// and check if that disk
					// appears in outDatedDisks.
					tamperedIndex = index
					filePath := pathJoin(erasureDisks[index].String(), bucket, object, xlStorageFormatFile)
					f, err := os.OpenFile(filePath, os.O_WRONLY|os.O_SYNC, 0)
					if err != nil {
						t.Fatalf("Failed to open %s: %s\n", filePath, err)
					}
					f.WriteString("oops") // Will cause bitrot error
					f.Close()
					break
				}

			}

			rQuorum := len(errs) - z.serverPools[0].sets[0].defaultParityCount
			onlineDisks, modTime, _ := listOnlineDisks(erasureDisks, partsMetadata, test.errs, rQuorum)
			if !modTime.Equal(test.expectedTime) {
				t.Fatalf("Expected modTime to be equal to %v but was found to be %v",
					test.expectedTime, modTime)
			}

			availableDisks, newErrs, _ := disksWithAllParts(ctx, onlineDisks, partsMetadata,
				test.errs, fi, bucket, object, madmin.HealDeepScan)
			test.errs = newErrs

			if test._tamperBackend != noTamper {
				if tamperedIndex != -1 && availableDisks[tamperedIndex] != nil {
					t.Fatalf("Drive (%v) with part.1 missing is not a drive with available data",
						erasureDisks[tamperedIndex])
				}
			}
		})`
$DIR/cmd/erasure-healing-common_test.go: `.Sprintf("case-%d", i)`
$DIR/cmd/erasure-healing-common_test.go: `.PutObject(ctx, bucket, object,
				mustGetPutObjReader(t, bytes.NewReader(data), int64(len(data)), "", ""), ObjectOptions{})`
$DIR/cmd/erasure-healing-common_test.go: `.NewReader(data)`
$DIR/cmd/erasure-healing-common_test.go: `.Delete(context.Background(), bucket, pathJoin(object, xlStorageFormatFile), DeleteOptions{
						Recursive: false,
						Immediate: false,
					})`
$DIR/cmd/erasure-healing-common_test.go: `.Background()`
$DIR/cmd/erasure-healing-common_test.go: `.String()`
$DIR/cmd/erasure-healing-common_test.go: `.OpenFile(filePath, os.O_WRONLY|os.O_SYNC, 0)`
$DIR/cmd/erasure-healing-common_test.go: `.WriteString("oops")`
$DIR/cmd/erasure-healing-common_test.go: `.Equal(test.expectedTime)`
$DIR/cmd/erasure-healing-common_test.go: `.WithCancel(context.Background())`
$DIR/cmd/erasure-healing-common_test.go: `.Background()`
$DIR/cmd/erasure-healing-common_test.go: `.Shutdown(context.Background())`
$DIR/cmd/erasure-healing-common_test.go: `.Background()`
$DIR/cmd/erasure-healing-common_test.go: `.Repeat([]byte("a"), 6*1024*1024*partCount)`
$DIR/cmd/erasure-healing-common_test.go: `.getDisks()`
$DIR/cmd/erasure-healing-common_test.go: `.MakeBucket(ctx, "bucket", MakeBucketOptions{})`
$DIR/cmd/erasure-healing-common_test.go: `.PutObject(ctx, bucket, object, mustGetPutObjReader(t, bytes.NewReader(data), int64(len(data)), "", ""), ObjectOptions{})`
$DIR/cmd/erasure-healing-common_test.go: `.NewReader(data)`
$DIR/cmd/erasure-healing-common_test.go: `.ModTime.Add(-1 * time.Hour)`
$DIR/cmd/erasure-healing-common_test.go: `.Sprintf("part.%d", i+1)`
$DIR/cmd/erasure-healing-common_test.go: `.String()`
$DIR/cmd/erasure-healing-common_test.go: `.OpenFile(filePath, os.O_WRONLY|os.O_SYNC, 0)`
$DIR/cmd/erasure-healing-common_test.go: `.WriteString("oops")`
$DIR/cmd/erasure-healing-common_test.go: `.Date(2023, time.March, 15, 11, 18, 4, 989906961, time.UTC)`
$DIR/cmd/erasure-healing-common_test.go: `.Date(1, time.January, 1, 0, 0, 0, 0, time.UTC)`
$DIR/cmd/erasure-healing-common_test.go: `.Date(2023, time.March, 15, 19, 57, 30, 492530160, time.UTC)`
$DIR/cmd/erasure-healing-common_test.go: `.Date(1, time.January, 1, 0, 0, 0, 0, time.UTC)`
$DIR/cmd/erasure-healing-common_test.go: `.Date(2023, time.March, 15, 19, 57, 30, 492530160, time.UTC)`
$DIR/cmd/erasure-healing_test.go: `fi.Erasure.Index = 1`
$DIR/cmd/erasure-healing_test.go: `ifi.SetInlineData()`
$DIR/cmd/erasure-healing_test.go: `ifi.Erasure.Index = 1`
$DIR/cmd/erasure-healing_test.go: `t.Run(testCase.name, func(t *testing.T) {
			gotMeta, dangling := isObjectDangling(testCase.metaArr, testCase.errs, testCase.dataErrs)
			if !gotMeta.Equals(testCase.expectedMeta) {
				t.Errorf("Expected %#v, got %#v", testCase.expectedMeta, gotMeta)
			}
			if dangling != testCase.expectedDangling {
				t.Errorf("Expected dangling %t, got %t", testCase.expectedDangling, dangling)
			}
		})`
$DIR/cmd/erasure-healing_test.go: `err = obj.MakeBucket(ctx, "bucket", MakeBucketOptions{})`
$DIR/cmd/erasure-healing_test.go: `_, err = rand.Read(data)`
$DIR/cmd/erasure-healing_test.go: `_, err = obj.PutObject(ctx, bucket, object, mustGetPutObjReader(t, bytes.NewReader(data), length, "", ""), ObjectOptions{})`
$DIR/cmd/erasure-healing_test.go: `err = removeAll(pathJoin(disk.String(), bucket, object))`
$DIR/cmd/erasure-healing_test.go: `err = er.checkAbandonedParts(ctx, bucket, object, madmin.HealOpts{ScanMode: madmin.HealNormalScan, Remove: true})`
$DIR/cmd/erasure-healing_test.go: `_, err = er.HealObject(ctx, bucket, object, "", madmin.HealOpts{ScanMode: madmin.HealNormalScan})`
$DIR/cmd/erasure-healing_test.go: `err = os.RemoveAll(path.Join(fsDirs[0], bucket, object, "xl.meta"))`
$DIR/cmd/erasure-healing_test.go: `fileInfoOutDated.ModTime = time.Now()`
$DIR/cmd/erasure-healing_test.go: `err = disk.WriteMetadata(context.Background(), "", bucket, object, fileInfoOutDated)`
$DIR/cmd/erasure-healing_test.go: `_, err = er.HealObject(ctx, bucket, object, "", madmin.HealOpts{ScanMode: madmin.HealDeepScan})`
$DIR/cmd/erasure-healing_test.go: `fileInfoPostHeal, err = disk.ReadVersion(context.Background(), "", bucket, object, "", ReadOptions{ReadData: false, Healing: true})`
$DIR/cmd/erasure-healing_test.go: `err = os.MkdirAll(dir, os.ModePerm)`
$DIR/cmd/erasure-healing_test.go: `err = os.WriteFile(pathJoin(dir, "part.1"), []byte("some data"), os.ModePerm)`
$DIR/cmd/erasure-healing_test.go: `err = er.checkAbandonedParts(ctx, bucket, object, madmin.HealOpts{ScanMode: madmin.HealNormalScan, Remove: true})`
$DIR/cmd/erasure-healing_test.go: `err = os.RemoveAll(path.Join(fsDirs[0], bucket))`
$DIR/cmd/erasure-healing_test.go: `_, err = obj.HealBucket(ctx, bucket, madmin.HealOpts{
		DryRun: false,
		Remove: false,
	})`
$DIR/cmd/erasure-healing_test.go: `_, err = er.getDisks()[0].StatVol(context.Background(), bucket)`
$DIR/cmd/erasure-healing_test.go: `err = obj.MakeBucket(ctx, "bucket", MakeBucketOptions{VersioningEnabled: true})`
$DIR/cmd/erasure-healing_test.go: `_, err = rand.Read(data)`
$DIR/cmd/erasure-healing_test.go: `_, _ = rand.Read(data)`
$DIR/cmd/erasure-healing_test.go: `err = removeAll(pathJoin(disk.String(), bucket, object))`
$DIR/cmd/erasure-healing_test.go: `err = er.checkAbandonedParts(ctx, bucket, object, madmin.HealOpts{ScanMode: madmin.HealNormalScan, Remove: true})`
$DIR/cmd/erasure-healing_test.go: `_, err = er.HealObject(ctx, bucket, object, "", madmin.HealOpts{ScanMode: madmin.HealNormalScan})`
$DIR/cmd/erasure-healing_test.go: `err = os.RemoveAll(path.Join(fsDirs[0], bucket, object, "xl.meta"))`
$DIR/cmd/erasure-healing_test.go: `fileInfoOutDated.ModTime = time.Now()`
$DIR/cmd/erasure-healing_test.go: `err = disk.WriteMetadata(context.Background(), "", bucket, object, fileInfoOutDated)`
$DIR/cmd/erasure-healing_test.go: `_, err = er.HealObject(ctx, bucket, object, "", madmin.HealOpts{ScanMode: madmin.HealDeepScan})`
$DIR/cmd/erasure-healing_test.go: `fileInfoPostHeal1, err = disk.ReadVersion(context.Background(), "", bucket, object, "", ReadOptions{ReadData: false, Healing: true})`
$DIR/cmd/erasure-healing_test.go: `fileInfoPostHeal2, err = disk.ReadVersion(context.Background(), "", bucket, object, "", ReadOptions{ReadData: false, Healing: true})`
$DIR/cmd/erasure-healing_test.go: `err = os.MkdirAll(dir, os.ModePerm)`
$DIR/cmd/erasure-healing_test.go: `err = os.WriteFile(pathJoin(dir, "part.1"), []byte("some data"), os.ModePerm)`
$DIR/cmd/erasure-healing_test.go: `err = er.checkAbandonedParts(ctx, bucket, object, madmin.HealOpts{ScanMode: madmin.HealNormalScan, Remove: true})`
$DIR/cmd/erasure-healing_test.go: `err = os.RemoveAll(path.Join(fsDirs[0], bucket))`
$DIR/cmd/erasure-healing_test.go: `_, err = obj.HealBucket(ctx, bucket, madmin.HealOpts{
		DryRun: false,
		Remove: false,
	})`
$DIR/cmd/erasure-healing_test.go: `_, err = er.getDisks()[0].StatVol(context.Background(), bucket)`
$DIR/cmd/erasure-healing_test.go: `resetGlobalHealState()`
$DIR/cmd/erasure-healing_test.go: `globalStorageClass.Update(saveSC)`
$DIR/cmd/erasure-healing_test.go: `globalStorageClass.Update(storageclass.Config{
		Standard: storageclass.StorageClass{
			Parity: 4,
		},
	})`
$DIR/cmd/erasure-healing_test.go: `setObjectLayer(objLayer)`
$DIR/cmd/erasure-healing_test.go: `err = objLayer.MakeBucket(ctx, bucket, MakeBucketOptions{})`
$DIR/cmd/erasure-healing_test.go: `globalBucketMetadataSys.Update(ctx, bucket, bucketVersioningConfig, []byte(`<VersioningConfiguration><Status>Enabled</Status></VersioningConfiguration>`))`
$DIR/cmd/erasure-healing_test.go: `_, err = objLayer.PutObject(ctx, bucket, object, mustGetPutObjReader(t, bytes.NewReader(data), int64(len(data)), "", ""), ObjectOptions{
		Versioned: true,
	})`
$DIR/cmd/erasure-healing_test.go: `objLayer.(*erasureServerPools).serverPools[0].erasureDisksMu.Lock()`
$DIR/cmd/erasure-healing_test.go: `copy(disks, newDisks)`
$DIR/cmd/erasure-healing_test.go: `objLayer.(*erasureServerPools).serverPools[0].erasureDisksMu.Unlock()`
$DIR/cmd/erasure-healing_test.go: `objLayer.(*erasureServerPools).serverPools[0].erasureDisksMu.Lock()`
$DIR/cmd/erasure-healing_test.go: `objLayer.(*erasureServerPools).serverPools[0].erasureDisksMu.Unlock()`
$DIR/cmd/erasure-healing_test.go: `setDisks(nil, nil, nil, nil)`
$DIR/cmd/erasure-healing_test.go: `setDisks(orgDisks[:4]...)`
$DIR/cmd/erasure-healing_test.go: `setDisks(nil, nil, nil, nil)`
$DIR/cmd/erasure-healing_test.go: `_, err = objLayer.PutObject(ctx, bucket, object, rd, ObjectOptions{
		Versioned: true,
	})`
$DIR/cmd/erasure-healing_test.go: `setDisks(orgDisks[:4]...)`
$DIR/cmd/erasure-healing_test.go: `fileInfoPreHeal, err = disk.ReadVersion(context.Background(), "", bucket, object, "", ReadOptions{ReadData: false, Healing: true})`
$DIR/cmd/erasure-healing_test.go: `disk = getDisk(0)`
$DIR/cmd/erasure-healing_test.go: `fileInfoPostHeal, err = disk.ReadVersion(context.Background(), "", bucket, object, "", ReadOptions{ReadData: false, Healing: true})`
$DIR/cmd/erasure-healing_test.go: `rd = mustGetPutObjReader(t, bytes.NewReader(data), int64(len(data)), "", "")`
$DIR/cmd/erasure-healing_test.go: `objInfo, err = objLayer.PutObject(ctx, bucket, object, rd, ObjectOptions{
		Versioned: true,
	})`
$DIR/cmd/erasure-healing_test.go: `setDisks(nil, nil, nil, nil)`
$DIR/cmd/erasure-healing_test.go: `_, err = objLayer.DeleteObject(ctx, bucket, object, ObjectOptions{
		Versioned: true,
		VersionID: objInfo.VersionID,
	})`
$DIR/cmd/erasure-healing_test.go: `setDisks(orgDisks[:4]...)`
$DIR/cmd/erasure-healing_test.go: `disk = getDisk(0)`
$DIR/cmd/erasure-healing_test.go: `fileInfoPreHeal, err = disk.ReadVersion(context.Background(), "", bucket, object, "", ReadOptions{ReadData: false, Healing: true})`
$DIR/cmd/erasure-healing_test.go: `disk = getDisk(0)`
$DIR/cmd/erasure-healing_test.go: `fileInfoPostHeal, err = disk.ReadVersion(context.Background(), "", bucket, object, "", ReadOptions{ReadData: false, Healing: true})`
$DIR/cmd/erasure-healing_test.go: `resetGlobalHealState()`
$DIR/cmd/erasure-healing_test.go: `pools = append(pools, mustGetPoolEndpoints(1, fsDirs[16:]...)...)`
$DIR/cmd/erasure-healing_test.go: `err = objLayer.MakeBucket(ctx, bucket, MakeBucketOptions{})`
$DIR/cmd/erasure-healing_test.go: `uploadedParts = append(uploadedParts, CompletePart{
			PartNumber: pInfo.PartNumber,
			ETag:       pInfo.ETag,
		})`
$DIR/cmd/erasure-healing_test.go: `_, err = objLayer.CompleteMultipartUpload(ctx, bucket, object, res.UploadID, uploadedParts, ObjectOptions{})`
$DIR/cmd/erasure-healing_test.go: `erasureDisks[i].Delete(context.Background(), bucket, pathJoin(object, xlStorageFormatFile), DeleteOptions{
				Recursive: false,
				Immediate: false,
			})`
$DIR/cmd/erasure-healing_test.go: `_, err = objLayer.HealObject(ctx, bucket, object, "", hopts)`
$DIR/cmd/erasure-healing_test.go: `fileInfos, errs = readAllFileInfo(ctx, erasureDisks, "", bucket, object, "", false, true)`
$DIR/cmd/erasure-healing_test.go: `fileInfos, errs = readAllFileInfo(ctx, erasureDisks, "", minioMetaBucket, cfgFile, "", false, true)`
$DIR/cmd/erasure-healing_test.go: `nfi, err = getLatestFileInfo(ctx, fileInfos, er.defaultParityCount, errs)`
$DIR/cmd/erasure-healing_test.go: `erasureDisks[i].Delete(context.Background(), minioMetaBucket, pathJoin(cfgFile, xlStorageFormatFile), DeleteOptions{
				Recursive: false,
				Immediate: false,
			})`
$DIR/cmd/erasure-healing_test.go: `_, err = objLayer.HealObject(ctx, minioMetaBucket, cfgFile, "", hopts)`
$DIR/cmd/erasure-healing_test.go: `fileInfos, errs = readAllFileInfo(ctx, erasureDisks, "", minioMetaBucket, cfgFile, "", false, true)`
$DIR/cmd/erasure-healing_test.go: `resetGlobalHealState()`
$DIR/cmd/erasure-healing_test.go: `pools = append(pools, mustGetPoolEndpoints(1, fsDirs[16:]...)...)`
$DIR/cmd/erasure-healing_test.go: `err = objLayer.MakeBucket(ctx, bucket, MakeBucketOptions{})`
$DIR/cmd/erasure-healing_test.go: `uploadedParts = append(uploadedParts, CompletePart{
			PartNumber: pInfo.PartNumber,
			ETag:       pInfo.ETag,
		})`
$DIR/cmd/erasure-healing_test.go: `_, err = set.CompleteMultipartUpload(ctx, bucket, object, uploadID, uploadedParts, ObjectOptions{})`
$DIR/cmd/erasure-healing_test.go: `err = firstDisk.Delete(context.Background(), bucket, pathJoin(object, xlStorageFormatFile), DeleteOptions{
		Recursive: false,
		Immediate: false,
	})`
$DIR/cmd/erasure-healing_test.go: `_, err = objLayer.HealObject(ctx, bucket, object, "", madmin.HealOpts{ScanMode: madmin.HealNormalScan})`
$DIR/cmd/erasure-healing_test.go: `err = firstDisk.Delete(context.Background(), bucket, pathJoin(object, fi.DataDir, "part.1"), DeleteOptions{
		Recursive: false,
		Immediate: false,
	})`
$DIR/cmd/erasure-healing_test.go: `err = firstDisk.WriteAll(context.Background(), bucket, pathJoin(object, fi.DataDir, "part.1"), []byte{})`
$DIR/cmd/erasure-healing_test.go: `_, err = objLayer.HealObject(ctx, bucket, object, "", madmin.HealOpts{DryRun: false, Remove: true, ScanMode: madmin.HealDeepScan})`
$DIR/cmd/erasure-healing_test.go: `fileInfos, errs = readAllFileInfo(ctx, erasureDisks, "", bucket, object, "", false, true)`
$DIR/cmd/erasure-healing_test.go: `err = firstDisk.Delete(context.Background(), bucket, pathJoin(object, fi.DataDir, "part.1"), DeleteOptions{
		Recursive: false,
		Immediate: false,
	})`
$DIR/cmd/erasure-healing_test.go: `err = firstDisk.WriteAll(context.Background(), bucket, pathJoin(object, fi.DataDir, "part.1"), bdata)`
$DIR/cmd/erasure-healing_test.go: `_, err = objLayer.HealObject(ctx, bucket, object, "", madmin.HealOpts{DryRun: false, Remove: true, ScanMode: madmin.HealDeepScan})`
$DIR/cmd/erasure-healing_test.go: `fileInfos, errs = readAllFileInfo(ctx, erasureDisks, "", bucket, object, "", false, true)`
$DIR/cmd/erasure-healing_test.go: `nfi, err = getLatestFileInfo(ctx, fileInfos, er.defaultParityCount, errs)`
$DIR/cmd/erasure-healing_test.go: `erasureDisks[i].Delete(context.Background(), bucket, pathJoin(object, xlStorageFormatFile), DeleteOptions{
			Recursive: false,
			Immediate: false,
		})`
$DIR/cmd/erasure-healing_test.go: `_, err = objLayer.HealObject(ctx, bucket, object, "", madmin.HealOpts{DryRun: false, Remove: true, ScanMode: madmin.HealDeepScan})`
$DIR/cmd/erasure-healing_test.go: `_, err = objLayer.GetObjectInfo(ctx, bucket, object, ObjectOptions{})`
$DIR/cmd/erasure-healing_test.go: `resetGlobalHealState()`
$DIR/cmd/erasure-healing_test.go: `err = objLayer.MakeBucket(ctx, bucket, MakeBucketOptions{})`
$DIR/cmd/erasure-healing_test.go: `uploadedParts = append(uploadedParts, CompletePart{
			PartNumber: pInfo.PartNumber,
			ETag:       pInfo.ETag,
		})`
$DIR/cmd/erasure-healing_test.go: `_, err = objLayer.CompleteMultipartUpload(ctx, bucket, object, res.UploadID, uploadedParts, ObjectOptions{})`
$DIR/cmd/erasure-healing_test.go: `err = firstDisk.Delete(context.Background(), bucket, pathJoin(object, xlStorageFormatFile), DeleteOptions{
		Recursive: false,
		Immediate: false,
	})`
$DIR/cmd/erasure-healing_test.go: `_, err = objLayer.HealObject(ctx, bucket, object, "", madmin.HealOpts{ScanMode: madmin.HealNormalScan})`
$DIR/cmd/erasure-healing_test.go: `fileInfos, errs = readAllFileInfo(ctx, erasureDisks, "", bucket, object, "", false, true)`
$DIR/cmd/erasure-healing_test.go: `err = firstDisk.WriteAll(context.Background(), bucket, pathJoin(object, xlStorageFormatFile), []byte("abcd"))`
$DIR/cmd/erasure-healing_test.go: `_, err = objLayer.HealObject(ctx, bucket, object, "", madmin.HealOpts{ScanMode: madmin.HealNormalScan})`
$DIR/cmd/erasure-healing_test.go: `fileInfos, errs = readAllFileInfo(ctx, erasureDisks, "", bucket, object, "", false, true)`
$DIR/cmd/erasure-healing_test.go: `erasureDisks[i].Delete(context.Background(), bucket, pathJoin(object, xlStorageFormatFile), DeleteOptions{
			Recursive: false,
			Immediate: false,
		})`
$DIR/cmd/erasure-healing_test.go: `_, err = objLayer.HealObject(ctx, bucket, object, "", madmin.HealOpts{DryRun: false, Remove: true, ScanMode: madmin.HealDeepScan})`
$DIR/cmd/erasure-healing_test.go: `_, err = objLayer.GetObjectInfo(ctx, bucket, object, ObjectOptions{})`
$DIR/cmd/erasure-healing_test.go: `resetGlobalHealState()`
$DIR/cmd/erasure-healing_test.go: `err = objLayer.MakeBucket(ctx, bucket, MakeBucketOptions{})`
$DIR/cmd/erasure-healing_test.go: `uploadedParts = append(uploadedParts, CompletePart{
			PartNumber: pInfo.PartNumber,
			ETag:       pInfo.ETag,
		})`
$DIR/cmd/erasure-healing_test.go: `_, err = objLayer.CompleteMultipartUpload(ctx, bucket, object, res.UploadID, uploadedParts, ObjectOptions{})`
$DIR/cmd/erasure-healing_test.go: `err = firstDisk.Delete(context.Background(), bucket, pathJoin(object, fi.DataDir, "part.1"), DeleteOptions{
		Recursive: false,
		Immediate: false,
	})`
$DIR/cmd/erasure-healing_test.go: `_, err = objLayer.HealObject(ctx, bucket, object, "", madmin.HealOpts{ScanMode: madmin.HealNormalScan})`
$DIR/cmd/erasure-healing_test.go: `err = firstDisk.WriteAll(context.Background(), bucket, pathJoin(object, fi.DataDir, "part.1"), []byte("foobytes"))`
$DIR/cmd/erasure-healing_test.go: `_, err = objLayer.HealObject(ctx, bucket, object, "", madmin.HealOpts{ScanMode: madmin.HealNormalScan})`
$DIR/cmd/erasure-healing_test.go: `part1Replaced, err = firstDisk.ReadAll(context.Background(), bucket, pathJoin(object, fi.DataDir, "part.1"))`
$DIR/cmd/erasure-healing_test.go: `err = firstDisk.WriteAll(context.Background(), bucket, pathJoin(object, fi.DataDir, "part.1"), []byte("foobytes"))`
$DIR/cmd/erasure-healing_test.go: `err = secondDisk.Delete(context.Background(), bucket, object, DeleteOptions{
		Recursive: true,
		Immediate: false,
	})`
$DIR/cmd/erasure-healing_test.go: `_, err = objLayer.HealObject(ctx, bucket, object, "", madmin.HealOpts{ScanMode: madmin.HealNormalScan})`
$DIR/cmd/erasure-healing_test.go: `partReconstructed, err = secondDisk.ReadAll(context.Background(), bucket, pathJoin(object, fi.DataDir, "part.1"))`
$DIR/cmd/erasure-healing_test.go: `err = obj.MakeBucket(ctx, bucket, MakeBucketOptions{})`
$DIR/cmd/erasure-healing_test.go: `uploadedParts = append(uploadedParts, CompletePart{
			PartNumber: pInfo.PartNumber,
			ETag:       pInfo.ETag,
		})`
$DIR/cmd/erasure-healing_test.go: `_, err = obj.CompleteMultipartUpload(ctx, bucket, object, res.UploadID, uploadedParts, ObjectOptions{})`
$DIR/cmd/erasure-healing_test.go: `err = firstDisk.Delete(context.Background(), bucket, object, DeleteOptions{
		Recursive: true,
		Immediate: false,
	})`
$DIR/cmd/erasure-healing_test.go: `_, err = obj.HealObject(ctx, bucket, object, "", madmin.HealOpts{ScanMode: madmin.HealNormalScan})`
$DIR/cmd/erasure-healing_test.go: `z.serverPools[0].erasureDisksMu.Lock()`
$DIR/cmd/erasure-healing_test.go: `z.serverPools[0].erasureDisksMu.Unlock()`
$DIR/cmd/erasure-healing_test.go: `_, err = obj.HealObject(ctx, bucket, object, "", madmin.HealOpts{
		ScanMode: madmin.HealDeepScan,
	})`
$DIR/cmd/erasure-healing_test.go: `err = obj.MakeBucket(ctx, bucket, MakeBucketOptions{})`
$DIR/cmd/erasure-healing_test.go: `_, err = obj.PutObject(ctx, bucket, object, mustGetPutObjReader(t,
		bytes.NewReader([]byte{}), 0, "", ""), opts)`
$DIR/cmd/erasure-healing_test.go: `err = firstDisk.DeleteVol(context.Background(), pathJoin(bucket, encodeDirObject(object)), true)`
$DIR/cmd/erasure-healing_test.go: `_, err = firstDisk.StatVol(context.Background(), pathJoin(bucket, encodeDirObject(object)))`
$DIR/cmd/erasure-healing_test.go: `hr, err = obj.HealObject(ctx, bucket, object, "", madmin.HealOpts{ScanMode: madmin.HealNormalScan})`
$DIR/cmd/erasure-healing_test.go: `t.Run(test.name, func(t *testing.T) {
			ctx, cancel := context.WithCancel(context.Background())
			defer cancel()

			nDisks := 16
			fsDirs, err := getRandomDisks(nDisks)
			if err != nil {
				t.Fatal(err)
			}

			defer removeRoots(fsDirs)

			obj, _, err := initObjectLayer(ctx, mustGetPoolEndpoints(0, fsDirs...))
			if err != nil {
				t.Fatal(err)
			}
			bucket := "bucket"
			object := "object"

			data := make([]byte, test.dataSize)
			_, err = rand.Read(data)
			if err != nil {
				t.Fatal(err)
			}
			var opts ObjectOptions

			err = obj.MakeBucket(ctx, bucket, MakeBucketOptions{})
			if err != nil {
				t.Fatalf("Failed to make a bucket - %v", err)
			}

			_, err = obj.PutObject(ctx, bucket, object,
				mustGetPutObjReader(t, bytes.NewReader(data), int64(len(data)), "", ""), opts)
			if err != nil {
				t.Fatal(err)
			}

			actualH := sha256.New()
			_, err = io.Copy(actualH, bytes.NewReader(data))
			if err != nil {
				return
			}
			actualSha256 := actualH.Sum(nil)

			z := obj.(*erasureServerPools)
			er := z.serverPools[0].getHashedSet(object)

			disks := er.getDisks()
			distribution := hashOrder(pathJoin(bucket, object), nDisks)
			shuffledDisks := shuffleDisks(disks, distribution)

			// remove last data shard
			err = removeAll(pathJoin(shuffledDisks[11].String(), bucket, object))
			if err != nil {
				t.Fatalf("Failed to delete a file - %v", err)
			}
			_, err = obj.HealObject(ctx, bucket, object, "", madmin.HealOpts{
				ScanMode: madmin.HealNormalScan,
			})
			if err != nil {
				t.Fatal(err)
			}

			firstGr, err := obj.GetObjectNInfo(ctx, bucket, object, nil, nil, ObjectOptions{NoLock: true})
			if err != nil {
				t.Fatal(err)
			}
			defer firstGr.Close()

			firstHealedH := sha256.New()
			_, err = io.Copy(firstHealedH, firstGr)
			if err != nil {
				t.Fatal(err)
			}
			firstHealedDataSha256 := firstHealedH.Sum(nil)

			if !bytes.Equal(actualSha256, firstHealedDataSha256) {
				t.Fatalf("object healed wrong, expected %x, got %x",
					actualSha256, firstHealedDataSha256)
			}

			// remove another data shard
			if err = removeAll(pathJoin(shuffledDisks[1].String(), bucket, object)); err != nil {
				t.Fatalf("Failed to delete a file - %v", err)
			}

			_, err = obj.HealObject(ctx, bucket, object, "", madmin.HealOpts{
				ScanMode: madmin.HealNormalScan,
			})
			if err != nil {
				t.Fatal(err)
			}

			secondGr, err := obj.GetObjectNInfo(ctx, bucket, object, nil, nil, ObjectOptions{NoLock: true})
			if err != nil {
				t.Fatal(err)
			}
			defer secondGr.Close()

			secondHealedH := sha256.New()
			_, err = io.Copy(secondHealedH, secondGr)
			if err != nil {
				t.Fatal(err)
			}
			secondHealedDataSha256 := secondHealedH.Sum(nil)

			if !bytes.Equal(actualSha256, secondHealedDataSha256) {
				t.Fatalf("object healed wrong, expected %x, got %x",
					actualSha256, secondHealedDataSha256)
			}
		})`
$DIR/cmd/erasure-healing_test.go: `_, err = rand.Read(data)`
$DIR/cmd/erasure-healing_test.go: `err = obj.MakeBucket(ctx, bucket, MakeBucketOptions{})`
$DIR/cmd/erasure-healing_test.go: `_, err = obj.PutObject(ctx, bucket, object,
				mustGetPutObjReader(t, bytes.NewReader(data), int64(len(data)), "", ""), opts)`
$DIR/cmd/erasure-healing_test.go: `_, err = io.Copy(actualH, bytes.NewReader(data))`
$DIR/cmd/erasure-healing_test.go: `err = removeAll(pathJoin(shuffledDisks[11].String(), bucket, object))`
$DIR/cmd/erasure-healing_test.go: `_, err = obj.HealObject(ctx, bucket, object, "", madmin.HealOpts{
				ScanMode: madmin.HealNormalScan,
			})`
$DIR/cmd/erasure-healing_test.go: `_, err = io.Copy(firstHealedH, firstGr)`
$DIR/cmd/erasure-healing_test.go: `_, err = obj.HealObject(ctx, bucket, object, "", madmin.HealOpts{
				ScanMode: madmin.HealNormalScan,
			})`
$DIR/cmd/erasure-healing_test.go: `_, err = io.Copy(secondHealedH, secondGr)`
$DIR/cmd/erasure-healing_test.go: `.SetInlineData()`
$DIR/cmd/erasure-healing_test.go: `.Run(testCase.name, func(t *testing.T) {
			gotMeta, dangling := isObjectDangling(testCase.metaArr, testCase.errs, testCase.dataErrs)
			if !gotMeta.Equals(testCase.expectedMeta) {
				t.Errorf("Expected %#v, got %#v", testCase.expectedMeta, gotMeta)
			}
			if dangling != testCase.expectedDangling {
				t.Errorf("Expected dangling %t, got %t", testCase.expectedDangling, dangling)
			}
		})`
$DIR/cmd/erasure-healing_test.go: `.Equals(testCase.expectedMeta)`
$DIR/cmd/erasure-healing_test.go: `.WithCancel(context.Background())`
$DIR/cmd/erasure-healing_test.go: `.Background()`
$DIR/cmd/erasure-healing_test.go: `.Shutdown(context.Background())`
$DIR/cmd/erasure-healing_test.go: `.Background()`
$DIR/cmd/erasure-healing_test.go: `.MakeBucket(ctx, "bucket", MakeBucketOptions{})`
$DIR/cmd/erasure-healing_test.go: `.Read(data)`
$DIR/cmd/erasure-healing_test.go: `.PutObject(ctx, bucket, object, mustGetPutObjReader(t, bytes.NewReader(data), length, "", ""), ObjectOptions{})`
$DIR/cmd/erasure-healing_test.go: `.NewReader(data)`
$DIR/cmd/erasure-healing_test.go: `.getDisks()`
$DIR/cmd/erasure-healing_test.go: `.ReadVersion(context.Background(), "", bucket, object, "", ReadOptions{ReadData: false, Healing: true})`
$DIR/cmd/erasure-healing_test.go: `.Background()`
$DIR/cmd/erasure-healing_test.go: `.String()`
$DIR/cmd/erasure-healing_test.go: `.checkAbandonedParts(ctx, bucket, object, madmin.HealOpts{ScanMode: madmin.HealNormalScan, Remove: true})`
$DIR/cmd/erasure-healing_test.go: `.HealObject(ctx, bucket, object, "", madmin.HealOpts{ScanMode: madmin.HealNormalScan})`
$DIR/cmd/erasure-healing_test.go: `.ReadVersion(context.Background(), "", bucket, object, "", ReadOptions{ReadData: false, Healing: true})`
$DIR/cmd/erasure-healing_test.go: `.Background()`
$DIR/cmd/erasure-healing_test.go: `.Equals(fileInfoPostHeal)`
$DIR/cmd/erasure-healing_test.go: `.RemoveAll(path.Join(fsDirs[0], bucket, object, "xl.meta"))`
$DIR/cmd/erasure-healing_test.go: `.Join(fsDirs[0], bucket, object, "xl.meta")`
$DIR/cmd/erasure-healing_test.go: `.Now()`
$DIR/cmd/erasure-healing_test.go: `.WriteMetadata(context.Background(), "", bucket, object, fileInfoOutDated)`
$DIR/cmd/erasure-healing_test.go: `.Background()`
$DIR/cmd/erasure-healing_test.go: `.HealObject(ctx, bucket, object, "", madmin.HealOpts{ScanMode: madmin.HealDeepScan})`
$DIR/cmd/erasure-healing_test.go: `.ReadVersion(context.Background(), "", bucket, object, "", ReadOptions{ReadData: false, Healing: true})`
$DIR/cmd/erasure-healing_test.go: `.Background()`
$DIR/cmd/erasure-healing_test.go: `.Equals(fileInfoPostHeal)`
$DIR/cmd/erasure-healing_test.go: `.NewRandom()`
$DIR/cmd/erasure-healing_test.go: `.Join(drive, bucket, object, uuid.String())`
$DIR/cmd/erasure-healing_test.go: `.String()`
$DIR/cmd/erasure-healing_test.go: `.MkdirAll(dir, os.ModePerm)`
$DIR/cmd/erasure-healing_test.go: `.WriteFile(pathJoin(dir, "part.1"), []byte("some data"), os.ModePerm)`
$DIR/cmd/erasure-healing_test.go: `.checkAbandonedParts(ctx, bucket, object, madmin.HealOpts{ScanMode: madmin.HealNormalScan, Remove: true})`
$DIR/cmd/erasure-healing_test.go: `.Join(drive, bucket, object, uuid.String())`
$DIR/cmd/erasure-healing_test.go: `.String()`
$DIR/cmd/erasure-healing_test.go: `.ReadFile(pathJoin(dir, "part.1"))`
$DIR/cmd/erasure-healing_test.go: `.RemoveAll(path.Join(fsDirs[0], bucket))`
$DIR/cmd/erasure-healing_test.go: `.Join(fsDirs[0], bucket)`
$DIR/cmd/erasure-healing_test.go: `.HealBucket(ctx, bucket, madmin.HealOpts{
		DryRun: false,
		Remove: false,
	})`
$DIR/cmd/erasure-healing_test.go: `.getDisks()`
$DIR/cmd/erasure-healing_test.go: `.StatVol(context.Background(), bucket)`
$DIR/cmd/erasure-healing_test.go: `.Background()`
$DIR/cmd/erasure-healing_test.go: `.WithCancel(context.Background())`
$DIR/cmd/erasure-healing_test.go: `.Background()`
$DIR/cmd/erasure-healing_test.go: `.Shutdown(context.Background())`
$DIR/cmd/erasure-healing_test.go: `.Background()`
$DIR/cmd/erasure-healing_test.go: `.MakeBucket(ctx, "bucket", MakeBucketOptions{VersioningEnabled: true})`
$DIR/cmd/erasure-healing_test.go: `.Read(data)`
$DIR/cmd/erasure-healing_test.go: `.PutObject(ctx, bucket, object, mustGetPutObjReader(t, bytes.NewReader(data), length, "", ""), ObjectOptions{})`
$DIR/cmd/erasure-healing_test.go: `.NewReader(data)`
$DIR/cmd/erasure-healing_test.go: `.Read(data)`
$DIR/cmd/erasure-healing_test.go: `.PutObject(ctx, bucket, object, mustGetPutObjReader(t, bytes.NewReader(data), length, "", ""), ObjectOptions{})`
$DIR/cmd/erasure-healing_test.go: `.NewReader(data)`
$DIR/cmd/erasure-healing_test.go: `.getDisks()`
$DIR/cmd/erasure-healing_test.go: `.ReadVersion(context.Background(), "", bucket, object, oi1.VersionID, ReadOptions{ReadData: false, Healing: true})`
$DIR/cmd/erasure-healing_test.go: `.Background()`
$DIR/cmd/erasure-healing_test.go: `.ReadVersion(context.Background(), "", bucket, object, oi2.VersionID, ReadOptions{ReadData: false, Healing: true})`
$DIR/cmd/erasure-healing_test.go: `.Background()`
$DIR/cmd/erasure-healing_test.go: `.String()`
$DIR/cmd/erasure-healing_test.go: `.checkAbandonedParts(ctx, bucket, object, madmin.HealOpts{ScanMode: madmin.HealNormalScan, Remove: true})`
$DIR/cmd/erasure-healing_test.go: `.HealObject(ctx, bucket, object, "", madmin.HealOpts{ScanMode: madmin.HealNormalScan})`
$DIR/cmd/erasure-healing_test.go: `.ReadVersion(context.Background(), "", bucket, object, oi1.VersionID, ReadOptions{ReadData: false, Healing: true})`
$DIR/cmd/erasure-healing_test.go: `.Background()`
$DIR/cmd/erasure-healing_test.go: `.ReadVersion(context.Background(), "", bucket, object, oi2.VersionID, ReadOptions{ReadData: false, Healing: true})`
$DIR/cmd/erasure-healing_test.go: `.Background()`
$DIR/cmd/erasure-healing_test.go: `.Equals(fileInfoPostHeal1)`
$DIR/cmd/erasure-healing_test.go: `.Equals(fileInfoPostHeal2)`
$DIR/cmd/erasure-healing_test.go: `.RemoveAll(path.Join(fsDirs[0], bucket, object, "xl.meta"))`
$DIR/cmd/erasure-healing_test.go: `.Join(fsDirs[0], bucket, object, "xl.meta")`
$DIR/cmd/erasure-healing_test.go: `.Now()`
$DIR/cmd/erasure-healing_test.go: `.WriteMetadata(context.Background(), "", bucket, object, fileInfoOutDated)`
$DIR/cmd/erasure-healing_test.go: `.Background()`
$DIR/cmd/erasure-healing_test.go: `.HealObject(ctx, bucket, object, "", madmin.HealOpts{ScanMode: madmin.HealDeepScan})`
$DIR/cmd/erasure-healing_test.go: `.ReadVersion(context.Background(), "", bucket, object, "", ReadOptions{ReadData: false, Healing: true})`
$DIR/cmd/erasure-healing_test.go: `.Background()`
$DIR/cmd/erasure-healing_test.go: `.Equals(fileInfoPostHeal1)`
$DIR/cmd/erasure-healing_test.go: `.ReadVersion(context.Background(), "", bucket, object, "", ReadOptions{ReadData: false, Healing: true})`
$DIR/cmd/erasure-healing_test.go: `.Background()`
$DIR/cmd/erasure-healing_test.go: `.Equals(fileInfoPostHeal2)`
$DIR/cmd/erasure-healing_test.go: `.NewRandom()`
$DIR/cmd/erasure-healing_test.go: `.Join(drive, bucket, object, uuid.String())`
$DIR/cmd/erasure-healing_test.go: `.String()`
$DIR/cmd/erasure-healing_test.go: `.MkdirAll(dir, os.ModePerm)`
$DIR/cmd/erasure-healing_test.go: `.WriteFile(pathJoin(dir, "part.1"), []byte("some data"), os.ModePerm)`
$DIR/cmd/erasure-healing_test.go: `.checkAbandonedParts(ctx, bucket, object, madmin.HealOpts{ScanMode: madmin.HealNormalScan, Remove: true})`
$DIR/cmd/erasure-healing_test.go: `.Join(drive, bucket, object, uuid.String())`
$DIR/cmd/erasure-healing_test.go: `.String()`
$DIR/cmd/erasure-healing_test.go: `.ReadFile(pathJoin(dir, "part.1"))`
$DIR/cmd/erasure-healing_test.go: `.RemoveAll(path.Join(fsDirs[0], bucket))`
$DIR/cmd/erasure-healing_test.go: `.Join(fsDirs[0], bucket)`
$DIR/cmd/erasure-healing_test.go: `.HealBucket(ctx, bucket, madmin.HealOpts{
		DryRun: false,
		Remove: false,
	})`
$DIR/cmd/erasure-healing_test.go: `.getDisks()`
$DIR/cmd/erasure-healing_test.go: `.StatVol(context.Background(), bucket)`
$DIR/cmd/erasure-healing_test.go: `.Background()`
$DIR/cmd/erasure-healing_test.go: `.WithCancel(context.Background())`
$DIR/cmd/erasure-healing_test.go: `.Background()`
$DIR/cmd/erasure-healing_test.go: `.Update(saveSC)`
$DIR/cmd/erasure-healing_test.go: `.Update(storageclass.Config{
		Standard: storageclass.StorageClass{
			Parity: 4,
		},
	})`
$DIR/cmd/erasure-healing_test.go: `.Repeat([]byte("a"), 128*1024)`
$DIR/cmd/erasure-healing_test.go: `.MakeBucket(ctx, bucket, MakeBucketOptions{})`
$DIR/cmd/erasure-healing_test.go: `.Update(ctx, bucket, bucketVersioningConfig, []byte(`<VersioningConfiguration><Status>Enabled</Status></VersioningConfiguration>`))`
$DIR/cmd/erasure-healing_test.go: `.PutObject(ctx, bucket, object, mustGetPutObjReader(t, bytes.NewReader(data), int64(len(data)), "", ""), ObjectOptions{
		Versioned: true,
	})`
$DIR/cmd/erasure-healing_test.go: `.NewReader(data)`
$DIR/cmd/erasure-healing_test.go: `.erasureDisksMu.Lock()`
$DIR/cmd/erasure-healing_test.go: `.erasureDisksMu.Unlock()`
$DIR/cmd/erasure-healing_test.go: `.erasureDisksMu.Lock()`
$DIR/cmd/erasure-healing_test.go: `.erasureDisksMu.Unlock()`
$DIR/cmd/erasure-healing_test.go: `.DeleteObject(ctx, bucket, object, ObjectOptions{Versioned: true})`
$DIR/cmd/erasure-healing_test.go: `.ReadVersion(context.Background(), "", bucket, object, "", ReadOptions{ReadData: false, Healing: true})`
$DIR/cmd/erasure-healing_test.go: `.Background()`
$DIR/cmd/erasure-healing_test.go: `.HealObjects(ctx, bucket, "", madmin.HealOpts{Remove: true},
		func(bucket, object, vid string, scanMode madmin.HealScanMode) error {
			_, err := objLayer.HealObject(ctx, bucket, object, vid, madmin.HealOpts{ScanMode: scanMode, Remove: true})
			return err
		})`
$DIR/cmd/erasure-healing_test.go: `.HealObject(ctx, bucket, object, vid, madmin.HealOpts{ScanMode: scanMode, Remove: true})`
$DIR/cmd/erasure-healing_test.go: `.ReadVersion(context.Background(), "", bucket, object, "", ReadOptions{ReadData: false, Healing: true})`
$DIR/cmd/erasure-healing_test.go: `.Background()`
$DIR/cmd/erasure-healing_test.go: `.DeleteObject(ctx, bucket, object, ObjectOptions{
			Versioned: true,
			VersionID: objInfo.VersionID,
		})`
$DIR/cmd/erasure-healing_test.go: `.NewReader(data)`
$DIR/cmd/erasure-healing_test.go: `.PutObject(ctx, bucket, object, rd, ObjectOptions{
		Versioned: true,
	})`
$DIR/cmd/erasure-healing_test.go: `.ReadVersion(context.Background(), "", bucket, object, "", ReadOptions{ReadData: false, Healing: true})`
$DIR/cmd/erasure-healing_test.go: `.Background()`
$DIR/cmd/erasure-healing_test.go: `.HealObjects(ctx, bucket, "", madmin.HealOpts{Remove: true},
		func(bucket, object, vid string, scanMode madmin.HealScanMode) error {
			_, err := objLayer.HealObject(ctx, bucket, object, vid, madmin.HealOpts{ScanMode: scanMode, Remove: true})
			return err
		})`
$DIR/cmd/erasure-healing_test.go: `.HealObject(ctx, bucket, object, vid, madmin.HealOpts{ScanMode: scanMode, Remove: true})`
$DIR/cmd/erasure-healing_test.go: `.ReadVersion(context.Background(), "", bucket, object, "", ReadOptions{ReadData: false, Healing: true})`
$DIR/cmd/erasure-healing_test.go: `.Background()`
$DIR/cmd/erasure-healing_test.go: `.NewReader(data)`
$DIR/cmd/erasure-healing_test.go: `.PutObject(ctx, bucket, object, rd, ObjectOptions{
		Versioned: true,
	})`
$DIR/cmd/erasure-healing_test.go: `.DeleteObject(ctx, bucket, object, ObjectOptions{
		Versioned: true,
		VersionID: objInfo.VersionID,
	})`
$DIR/cmd/erasure-healing_test.go: `.ReadVersion(context.Background(), "", bucket, object, "", ReadOptions{ReadData: false, Healing: true})`
$DIR/cmd/erasure-healing_test.go: `.Background()`
$DIR/cmd/erasure-healing_test.go: `.HealObjects(ctx, bucket, "", madmin.HealOpts{Remove: true},
		func(bucket, object, vid string, scanMode madmin.HealScanMode) error {
			_, err := objLayer.HealObject(ctx, bucket, object, vid, madmin.HealOpts{ScanMode: scanMode, Remove: true})
			return err
		})`
$DIR/cmd/erasure-healing_test.go: `.HealObject(ctx, bucket, object, vid, madmin.HealOpts{ScanMode: scanMode, Remove: true})`
$DIR/cmd/erasure-healing_test.go: `.ReadVersion(context.Background(), "", bucket, object, "", ReadOptions{ReadData: false, Healing: true})`
$DIR/cmd/erasure-healing_test.go: `.Background()`
$DIR/cmd/erasure-healing_test.go: `.WithCancel(context.Background())`
$DIR/cmd/erasure-healing_test.go: `.Background()`
$DIR/cmd/erasure-healing_test.go: `.Repeat([]byte("a"), 5*1024*1024)`
$DIR/cmd/erasure-healing_test.go: `.MakeBucket(ctx, bucket, MakeBucketOptions{})`
$DIR/cmd/erasure-healing_test.go: `.NewMultipartUpload(ctx, bucket, object, opts)`
$DIR/cmd/erasure-healing_test.go: `.PutObjectPart(ctx, bucket, object, res.UploadID, partID, mustGetPutObjReader(t, bytes.NewReader(data), int64(len(data)), "", ""), opts)`
$DIR/cmd/erasure-healing_test.go: `.NewReader(data)`
$DIR/cmd/erasure-healing_test.go: `.CompleteMultipartUpload(ctx, bucket, object, res.UploadID, uploadedParts, ObjectOptions{})`
$DIR/cmd/erasure-healing_test.go: `.getDisks()`
$DIR/cmd/erasure-healing_test.go: `.Is(err, errFileNotFound)`
$DIR/cmd/erasure-healing_test.go: `.Delete(context.Background(), bucket, pathJoin(object, xlStorageFormatFile), DeleteOptions{
				Recursive: false,
				Immediate: false,
			})`
$DIR/cmd/erasure-healing_test.go: `.Background()`
$DIR/cmd/erasure-healing_test.go: `.HealObject(ctx, bucket, object, "", hopts)`
$DIR/cmd/erasure-healing_test.go: `.Is(err, errFileNotFound)`
$DIR/cmd/erasure-healing_test.go: `.Delete(context.Background(), minioMetaBucket, pathJoin(cfgFile, xlStorageFormatFile), DeleteOptions{
				Recursive: false,
				Immediate: false,
			})`
$DIR/cmd/erasure-healing_test.go: `.Background()`
$DIR/cmd/erasure-healing_test.go: `.HealObject(ctx, minioMetaBucket, cfgFile, "", hopts)`
$DIR/cmd/erasure-healing_test.go: `.WithCancel(context.Background())`
$DIR/cmd/erasure-healing_test.go: `.Background()`
$DIR/cmd/erasure-healing_test.go: `.Repeat([]byte("a"), 5*1024*1024)`
$DIR/cmd/erasure-healing_test.go: `.MakeBucket(ctx, bucket, MakeBucketOptions{})`
$DIR/cmd/erasure-healing_test.go: `.NewMultipartUpload(ctx, bucket, object, opts)`
$DIR/cmd/erasure-healing_test.go: `.PutObjectPart(ctx, bucket, object, uploadID, partID, mustGetPutObjReader(t, bytes.NewReader(data), int64(len(data)), "", ""), opts)`
$DIR/cmd/erasure-healing_test.go: `.NewReader(data)`
$DIR/cmd/erasure-healing_test.go: `.CompleteMultipartUpload(ctx, bucket, object, uploadID, uploadedParts, ObjectOptions{})`
$DIR/cmd/erasure-healing_test.go: `.getDisks()`
$DIR/cmd/erasure-healing_test.go: `.Delete(context.Background(), bucket, pathJoin(object, xlStorageFormatFile), DeleteOptions{
		Recursive: false,
		Immediate: false,
	})`
$DIR/cmd/erasure-healing_test.go: `.Background()`
$DIR/cmd/erasure-healing_test.go: `.HealObject(ctx, bucket, object, "", madmin.HealOpts{ScanMode: madmin.HealNormalScan})`
$DIR/cmd/erasure-healing_test.go: `.StatInfoFile(context.Background(), bucket, object+"/"+xlStorageFormatFile, false)`
$DIR/cmd/erasure-healing_test.go: `.Background()`
$DIR/cmd/erasure-healing_test.go: `.Delete(context.Background(), bucket, pathJoin(object, fi.DataDir, "part.1"), DeleteOptions{
		Recursive: false,
		Immediate: false,
	})`
$DIR/cmd/erasure-healing_test.go: `.Background()`
$DIR/cmd/erasure-healing_test.go: `.WriteAll(context.Background(), bucket, pathJoin(object, fi.DataDir, "part.1"), []byte{})`
$DIR/cmd/erasure-healing_test.go: `.Background()`
$DIR/cmd/erasure-healing_test.go: `.HealObject(ctx, bucket, object, "", madmin.HealOpts{DryRun: false, Remove: true, ScanMode: madmin.HealDeepScan})`
$DIR/cmd/erasure-healing_test.go: `.DeepEqual(fi, nfi)`
$DIR/cmd/erasure-healing_test.go: `.Delete(context.Background(), bucket, pathJoin(object, fi.DataDir, "part.1"), DeleteOptions{
		Recursive: false,
		Immediate: false,
	})`
$DIR/cmd/erasure-healing_test.go: `.Background()`
$DIR/cmd/erasure-healing_test.go: `.Repeat([]byte("b"), int(nfi.Size))`
$DIR/cmd/erasure-healing_test.go: `.WriteAll(context.Background(), bucket, pathJoin(object, fi.DataDir, "part.1"), bdata)`
$DIR/cmd/erasure-healing_test.go: `.Background()`
$DIR/cmd/erasure-healing_test.go: `.HealObject(ctx, bucket, object, "", madmin.HealOpts{DryRun: false, Remove: true, ScanMode: madmin.HealDeepScan})`
$DIR/cmd/erasure-healing_test.go: `.DeepEqual(fi, nfi)`
$DIR/cmd/erasure-healing_test.go: `.Delete(context.Background(), bucket, pathJoin(object, xlStorageFormatFile), DeleteOptions{
			Recursive: false,
			Immediate: false,
		})`
$DIR/cmd/erasure-healing_test.go: `.Background()`
$DIR/cmd/erasure-healing_test.go: `.HealObject(ctx, bucket, object, "", madmin.HealOpts{DryRun: false, Remove: true, ScanMode: madmin.HealDeepScan})`
$DIR/cmd/erasure-healing_test.go: `.GetObjectInfo(ctx, bucket, object, ObjectOptions{})`
$DIR/cmd/erasure-healing_test.go: `.StatInfoFile(context.Background(), bucket, pathJoin(object, xlStorageFormatFile), false)`
$DIR/cmd/erasure-healing_test.go: `.Background()`
$DIR/cmd/erasure-healing_test.go: `.WithCancel(context.Background())`
$DIR/cmd/erasure-healing_test.go: `.Background()`
$DIR/cmd/erasure-healing_test.go: `.Repeat([]byte("a"), 5*1024*1024)`
$DIR/cmd/erasure-healing_test.go: `.MakeBucket(ctx, bucket, MakeBucketOptions{})`
$DIR/cmd/erasure-healing_test.go: `.NewMultipartUpload(ctx, bucket, object, opts)`
$DIR/cmd/erasure-healing_test.go: `.PutObjectPart(ctx, bucket, object, res.UploadID, partID, mustGetPutObjReader(t, bytes.NewReader(data), int64(len(data)), "", ""), opts)`
$DIR/cmd/erasure-healing_test.go: `.NewReader(data)`
$DIR/cmd/erasure-healing_test.go: `.CompleteMultipartUpload(ctx, bucket, object, res.UploadID, uploadedParts, ObjectOptions{})`
$DIR/cmd/erasure-healing_test.go: `.getDisks()`
$DIR/cmd/erasure-healing_test.go: `.Delete(context.Background(), bucket, pathJoin(object, xlStorageFormatFile), DeleteOptions{
		Recursive: false,
		Immediate: false,
	})`
$DIR/cmd/erasure-healing_test.go: `.Background()`
$DIR/cmd/erasure-healing_test.go: `.HealObject(ctx, bucket, object, "", madmin.HealOpts{ScanMode: madmin.HealNormalScan})`
$DIR/cmd/erasure-healing_test.go: `.StatInfoFile(context.Background(), bucket, object+"/"+xlStorageFormatFile, false)`
$DIR/cmd/erasure-healing_test.go: `.Background()`
$DIR/cmd/erasure-healing_test.go: `.DeepEqual(fi, nfi1)`
$DIR/cmd/erasure-healing_test.go: `.WriteAll(context.Background(), bucket, pathJoin(object, xlStorageFormatFile), []byte("abcd"))`
$DIR/cmd/erasure-healing_test.go: `.Background()`
$DIR/cmd/erasure-healing_test.go: `.HealObject(ctx, bucket, object, "", madmin.HealOpts{ScanMode: madmin.HealNormalScan})`
$DIR/cmd/erasure-healing_test.go: `.DeepEqual(fi, nfi2)`
$DIR/cmd/erasure-healing_test.go: `.Delete(context.Background(), bucket, pathJoin(object, xlStorageFormatFile), DeleteOptions{
			Recursive: false,
			Immediate: false,
		})`
$DIR/cmd/erasure-healing_test.go: `.Background()`
$DIR/cmd/erasure-healing_test.go: `.HealObject(ctx, bucket, object, "", madmin.HealOpts{DryRun: false, Remove: true, ScanMode: madmin.HealDeepScan})`
$DIR/cmd/erasure-healing_test.go: `.GetObjectInfo(ctx, bucket, object, ObjectOptions{})`
$DIR/cmd/erasure-healing_test.go: `.WithCancel(context.Background())`
$DIR/cmd/erasure-healing_test.go: `.Background()`
$DIR/cmd/erasure-healing_test.go: `.Repeat([]byte("a"), 5*1024*1024)`
$DIR/cmd/erasure-healing_test.go: `.MakeBucket(ctx, bucket, MakeBucketOptions{})`
$DIR/cmd/erasure-healing_test.go: `.NewMultipartUpload(ctx, bucket, object, opts)`
$DIR/cmd/erasure-healing_test.go: `.PutObjectPart(ctx, bucket, object, res.UploadID, partID, mustGetPutObjReader(t, bytes.NewReader(data), int64(len(data)), "", ""), opts)`
$DIR/cmd/erasure-healing_test.go: `.NewReader(data)`
$DIR/cmd/erasure-healing_test.go: `.CompleteMultipartUpload(ctx, bucket, object, res.UploadID, uploadedParts, ObjectOptions{})`
$DIR/cmd/erasure-healing_test.go: `.getDisks()`
$DIR/cmd/erasure-healing_test.go: `.ReadAll(context.Background(), bucket, pathJoin(object, fi.DataDir, "part.1"))`
$DIR/cmd/erasure-healing_test.go: `.Background()`
$DIR/cmd/erasure-healing_test.go: `.ReadAll(context.Background(), bucket, pathJoin(object, fi.DataDir, "part.1"))`
$DIR/cmd/erasure-healing_test.go: `.Background()`
$DIR/cmd/erasure-healing_test.go: `.Delete(context.Background(), bucket, pathJoin(object, fi.DataDir, "part.1"), DeleteOptions{
		Recursive: false,
		Immediate: false,
	})`
$DIR/cmd/erasure-healing_test.go: `.Background()`
$DIR/cmd/erasure-healing_test.go: `.HealObject(ctx, bucket, object, "", madmin.HealOpts{ScanMode: madmin.HealNormalScan})`
$DIR/cmd/erasure-healing_test.go: `.ReadAll(context.Background(), bucket, pathJoin(object, fi.DataDir, "part.1"))`
$DIR/cmd/erasure-healing_test.go: `.Background()`
$DIR/cmd/erasure-healing_test.go: `.DeepEqual(part1Disk1Origin, part1Replaced)`
$DIR/cmd/erasure-healing_test.go: `.WriteAll(context.Background(), bucket, pathJoin(object, fi.DataDir, "part.1"), []byte("foobytes"))`
$DIR/cmd/erasure-healing_test.go: `.Background()`
$DIR/cmd/erasure-healing_test.go: `.HealObject(ctx, bucket, object, "", madmin.HealOpts{ScanMode: madmin.HealNormalScan})`
$DIR/cmd/erasure-healing_test.go: `.ReadAll(context.Background(), bucket, pathJoin(object, fi.DataDir, "part.1"))`
$DIR/cmd/erasure-healing_test.go: `.Background()`
$DIR/cmd/erasure-healing_test.go: `.DeepEqual(part1Disk1Origin, part1Replaced)`
$DIR/cmd/erasure-healing_test.go: `.WriteAll(context.Background(), bucket, pathJoin(object, fi.DataDir, "part.1"), []byte("foobytes"))`
$DIR/cmd/erasure-healing_test.go: `.Background()`
$DIR/cmd/erasure-healing_test.go: `.Delete(context.Background(), bucket, object, DeleteOptions{
		Recursive: true,
		Immediate: false,
	})`
$DIR/cmd/erasure-healing_test.go: `.Background()`
$DIR/cmd/erasure-healing_test.go: `.HealObject(ctx, bucket, object, "", madmin.HealOpts{ScanMode: madmin.HealNormalScan})`
$DIR/cmd/erasure-healing_test.go: `.ReadAll(context.Background(), bucket, pathJoin(object, fi.DataDir, "part.1"))`
$DIR/cmd/erasure-healing_test.go: `.Background()`
$DIR/cmd/erasure-healing_test.go: `.DeepEqual(part1Disk1Origin, partReconstructed)`
$DIR/cmd/erasure-healing_test.go: `.ReadAll(context.Background(), bucket, pathJoin(object, fi.DataDir, "part.1"))`
$DIR/cmd/erasure-healing_test.go: `.Background()`
$DIR/cmd/erasure-healing_test.go: `.DeepEqual(part1Disk2Origin, partReconstructed)`
$DIR/cmd/erasure-healing_test.go: `.WithCancel(context.Background())`
$DIR/cmd/erasure-healing_test.go: `.Background()`
$DIR/cmd/erasure-healing_test.go: `.Repeat([]byte("a"), 5*1024*1024)`
$DIR/cmd/erasure-healing_test.go: `.MakeBucket(ctx, bucket, MakeBucketOptions{})`
$DIR/cmd/erasure-healing_test.go: `.NewMultipartUpload(ctx, bucket, object, opts)`
$DIR/cmd/erasure-healing_test.go: `.PutObjectPart(ctx, bucket, object, res.UploadID, partID, mustGetPutObjReader(t, bytes.NewReader(data), int64(len(data)), "", ""), opts)`
$DIR/cmd/erasure-healing_test.go: `.NewReader(data)`
$DIR/cmd/erasure-healing_test.go: `.getDisks()`
$DIR/cmd/erasure-healing_test.go: `.CompleteMultipartUpload(ctx, bucket, object, res.UploadID, uploadedParts, ObjectOptions{})`
$DIR/cmd/erasure-healing_test.go: `.Delete(context.Background(), bucket, object, DeleteOptions{
		Recursive: true,
		Immediate: false,
	})`
$DIR/cmd/erasure-healing_test.go: `.Background()`
$DIR/cmd/erasure-healing_test.go: `.HealObject(ctx, bucket, object, "", madmin.HealOpts{ScanMode: madmin.HealNormalScan})`
$DIR/cmd/erasure-healing_test.go: `.StatInfoFile(context.Background(), bucket, object+"/"+xlStorageFormatFile, false)`
$DIR/cmd/erasure-healing_test.go: `.Background()`
$DIR/cmd/erasure-healing_test.go: `.getDisks()`
$DIR/cmd/erasure-healing_test.go: `.erasureDisksMu.Lock()`
$DIR/cmd/erasure-healing_test.go: `.Delete(context.Background(), bucket, object, DeleteOptions{
				Recursive: true,
				Immediate: false,
			})`
$DIR/cmd/erasure-healing_test.go: `.Background()`
$DIR/cmd/erasure-healing_test.go: `.erasureDisksMu.Unlock()`
$DIR/cmd/erasure-healing_test.go: `.HealObject(ctx, bucket, object, "", madmin.HealOpts{
		ScanMode: madmin.HealDeepScan,
	})`
$DIR/cmd/erasure-healing_test.go: `.WithCancel(context.Background())`
$DIR/cmd/erasure-healing_test.go: `.Background()`
$DIR/cmd/erasure-healing_test.go: `.MakeBucket(ctx, bucket, MakeBucketOptions{})`
$DIR/cmd/erasure-healing_test.go: `.PutObject(ctx, bucket, object, mustGetPutObjReader(t,
		bytes.NewReader([]byte{}), 0, "", ""), opts)`
$DIR/cmd/erasure-healing_test.go: `.NewReader([]byte{})`
$DIR/cmd/erasure-healing_test.go: `.getDisks()`
$DIR/cmd/erasure-healing_test.go: `.DeleteVol(context.Background(), pathJoin(bucket, encodeDirObject(object)), true)`
$DIR/cmd/erasure-healing_test.go: `.Background()`
$DIR/cmd/erasure-healing_test.go: `.HealObject(ctx, bucket, object, "", madmin.HealOpts{ScanMode: madmin.HealNormalScan})`
$DIR/cmd/erasure-healing_test.go: `.StatVol(context.Background(), pathJoin(bucket, encodeDirObject(object)))`
$DIR/cmd/erasure-healing_test.go: `.Background()`
$DIR/cmd/erasure-healing_test.go: `.HealObject(ctx, bucket, object, "", madmin.HealOpts{ScanMode: madmin.HealNormalScan})`
$DIR/cmd/erasure-healing_test.go: `.Run(test.name, func(t *testing.T) {
			ctx, cancel := context.WithCancel(context.Background())
			defer cancel()

			nDisks := 16
			fsDirs, err := getRandomDisks(nDisks)
			if err != nil {
				t.Fatal(err)
			}

			defer removeRoots(fsDirs)

			obj, _, err := initObjectLayer(ctx, mustGetPoolEndpoints(0, fsDirs...))
			if err != nil {
				t.Fatal(err)
			}
			bucket := "bucket"
			object := "object"

			data := make([]byte, test.dataSize)
			_, err = rand.Read(data)
			if err != nil {
				t.Fatal(err)
			}
			var opts ObjectOptions

			err = obj.MakeBucket(ctx, bucket, MakeBucketOptions{})
			if err != nil {
				t.Fatalf("Failed to make a bucket - %v", err)
			}

			_, err = obj.PutObject(ctx, bucket, object,
				mustGetPutObjReader(t, bytes.NewReader(data), int64(len(data)), "", ""), opts)
			if err != nil {
				t.Fatal(err)
			}

			actualH := sha256.New()
			_, err = io.Copy(actualH, bytes.NewReader(data))
			if err != nil {
				return
			}
			actualSha256 := actualH.Sum(nil)

			z := obj.(*erasureServerPools)
			er := z.serverPools[0].getHashedSet(object)

			disks := er.getDisks()
			distribution := hashOrder(pathJoin(bucket, object), nDisks)
			shuffledDisks := shuffleDisks(disks, distribution)

			// remove last data shard
			err = removeAll(pathJoin(shuffledDisks[11].String(), bucket, object))
			if err != nil {
				t.Fatalf("Failed to delete a file - %v", err)
			}
			_, err = obj.HealObject(ctx, bucket, object, "", madmin.HealOpts{
				ScanMode: madmin.HealNormalScan,
			})
			if err != nil {
				t.Fatal(err)
			}

			firstGr, err := obj.GetObjectNInfo(ctx, bucket, object, nil, nil, ObjectOptions{NoLock: true})
			if err != nil {
				t.Fatal(err)
			}
			defer firstGr.Close()

			firstHealedH := sha256.New()
			_, err = io.Copy(firstHealedH, firstGr)
			if err != nil {
				t.Fatal(err)
			}
			firstHealedDataSha256 := firstHealedH.Sum(nil)

			if !bytes.Equal(actualSha256, firstHealedDataSha256) {
				t.Fatalf("object healed wrong, expected %x, got %x",
					actualSha256, firstHealedDataSha256)
			}

			// remove another data shard
			if err = removeAll(pathJoin(shuffledDisks[1].String(), bucket, object)); err != nil {
				t.Fatalf("Failed to delete a file - %v", err)
			}

			_, err = obj.HealObject(ctx, bucket, object, "", madmin.HealOpts{
				ScanMode: madmin.HealNormalScan,
			})
			if err != nil {
				t.Fatal(err)
			}

			secondGr, err := obj.GetObjectNInfo(ctx, bucket, object, nil, nil, ObjectOptions{NoLock: true})
			if err != nil {
				t.Fatal(err)
			}
			defer secondGr.Close()

			secondHealedH := sha256.New()
			_, err = io.Copy(secondHealedH, secondGr)
			if err != nil {
				t.Fatal(err)
			}
			secondHealedDataSha256 := secondHealedH.Sum(nil)

			if !bytes.Equal(actualSha256, secondHealedDataSha256) {
				t.Fatalf("object healed wrong, expected %x, got %x",
					actualSha256, secondHealedDataSha256)
			}
		})`
$DIR/cmd/erasure-healing_test.go: `.WithCancel(context.Background())`
$DIR/cmd/erasure-healing_test.go: `.Background()`
$DIR/cmd/erasure-healing_test.go: `.Read(data)`
$DIR/cmd/erasure-healing_test.go: `.MakeBucket(ctx, bucket, MakeBucketOptions{})`
$DIR/cmd/erasure-healing_test.go: `.PutObject(ctx, bucket, object,
				mustGetPutObjReader(t, bytes.NewReader(data), int64(len(data)), "", ""), opts)`
$DIR/cmd/erasure-healing_test.go: `.NewReader(data)`
$DIR/cmd/erasure-healing_test.go: `.New()`
$DIR/cmd/erasure-healing_test.go: `.Copy(actualH, bytes.NewReader(data))`
$DIR/cmd/erasure-healing_test.go: `.NewReader(data)`
$DIR/cmd/erasure-healing_test.go: `.Sum(nil)`
$DIR/cmd/erasure-healing_test.go: `.getHashedSet(object)`
$DIR/cmd/erasure-healing_test.go: `.getDisks()`
$DIR/cmd/erasure-healing_test.go: `.String()`
$DIR/cmd/erasure-healing_test.go: `.HealObject(ctx, bucket, object, "", madmin.HealOpts{
				ScanMode: madmin.HealNormalScan,
			})`
$DIR/cmd/erasure-healing_test.go: `.GetObjectNInfo(ctx, bucket, object, nil, nil, ObjectOptions{NoLock: true})`
$DIR/cmd/erasure-healing_test.go: `.New()`
$DIR/cmd/erasure-healing_test.go: `.Copy(firstHealedH, firstGr)`
$DIR/cmd/erasure-healing_test.go: `.Sum(nil)`
$DIR/cmd/erasure-healing_test.go: `.Equal(actualSha256, firstHealedDataSha256)`
$DIR/cmd/erasure-healing_test.go: `.String()`
$DIR/cmd/erasure-healing_test.go: `.HealObject(ctx, bucket, object, "", madmin.HealOpts{
				ScanMode: madmin.HealNormalScan,
			})`
$DIR/cmd/erasure-healing_test.go: `.GetObjectNInfo(ctx, bucket, object, nil, nil, ObjectOptions{NoLock: true})`
$DIR/cmd/erasure-healing_test.go: `.New()`
$DIR/cmd/erasure-healing_test.go: `.Copy(secondHealedH, secondGr)`
$DIR/cmd/erasure-healing_test.go: `.Sum(nil)`
$DIR/cmd/erasure-healing_test.go: `.Equal(actualSha256, secondHealedDataSha256)`
$DIR/cmd/erasure-metadata-utils_test.go: `canceledErrs = append(canceledErrs, fmt.Errorf("error %d: %w", i, context.Canceled))`
$DIR/cmd/erasure-metadata-utils_test.go: `removeRoots(disks)`
$DIR/cmd/erasure-metadata-utils_test.go: `removeRoots(disks)`
$DIR/cmd/erasure-metadata-utils_test.go: `t.Run(fmt.Sprintf("%d", x), func(t *testing.T) {
			var first [17]int
			rng := rand.New(rand.NewSource(0))
			var tmp [16]byte
			rng.Read(tmp[:])
			prefix := hex.EncodeToString(tmp[:])
			for i := 0; i < 10000; i++ {
				rng.Read(tmp[:])

				y := hashOrder(fmt.Sprintf("%s/%x", prefix, hex.EncodeToString(tmp[:3])), x)
				first[y[0]]++
			}
			t.Log("first:", first[:x])
		})`
$DIR/cmd/erasure-metadata-utils_test.go: `rng.Read(tmp[:])`
$DIR/cmd/erasure-metadata-utils_test.go: `rng.Read(tmp[:])`
$DIR/cmd/erasure-metadata-utils_test.go: `first[y[0]]++`
$DIR/cmd/erasure-metadata-utils_test.go: `.Background()`
$DIR/cmd/erasure-metadata-utils_test.go: `.Background()`
$DIR/cmd/erasure-metadata-utils_test.go: `.DeepEqual(testCase.hashedOrder, hashedOrder)`
$DIR/cmd/erasure-metadata-utils_test.go: `.WithCancel(context.Background())`
$DIR/cmd/erasure-metadata-utils_test.go: `.Background()`
$DIR/cmd/erasure-metadata-utils_test.go: `.WithCancel(context.Background())`
$DIR/cmd/erasure-metadata-utils_test.go: `.Background()`
$DIR/cmd/erasure-metadata-utils_test.go: `.Run(fmt.Sprintf("%d", x), func(t *testing.T) {
			var first [17]int
			rng := rand.New(rand.NewSource(0))
			var tmp [16]byte
			rng.Read(tmp[:])
			prefix := hex.EncodeToString(tmp[:])
			for i := 0; i < 10000; i++ {
				rng.Read(tmp[:])

				y := hashOrder(fmt.Sprintf("%s/%x", prefix, hex.EncodeToString(tmp[:3])), x)
				first[y[0]]++
			}
			t.Log("first:", first[:x])
		})`
$DIR/cmd/erasure-metadata-utils_test.go: `.Sprintf("%d", x)`
$DIR/cmd/erasure-metadata-utils_test.go: `.New(rand.NewSource(0))`
$DIR/cmd/erasure-metadata-utils_test.go: `.NewSource(0)`
$DIR/cmd/erasure-metadata-utils_test.go: `.Read(tmp[:])`
$DIR/cmd/erasure-metadata-utils_test.go: `.EncodeToString(tmp[:])`
$DIR/cmd/erasure-metadata-utils_test.go: `.Read(tmp[:])`
$DIR/cmd/erasure-metadata-utils_test.go: `.Sprintf("%s/%x", prefix, hex.EncodeToString(tmp[:3]))`
$DIR/cmd/erasure-metadata-utils_test.go: `.EncodeToString(tmp[:3])`
$DIR/cmd/erasure-metadata_test.go: `fi.Erasure.Index = 1`
$DIR/cmd/erasure-metadata_test.go: `fi.AddObjectPart(testCase.partNum, "etag."+partNumString, int64(testCase.partNum+humanize.MiByte), ActualSize, UTCNow(), nil, nil)`
$DIR/cmd/erasure-metadata_test.go: `fi.Erasure.Index = 1`
$DIR/cmd/erasure-metadata_test.go: `fi.AddObjectPart(testCase.partNum, "etag."+partNumString, int64(testCase.partNum+humanize.MiByte), ActualSize, UTCNow(), nil, nil)`
$DIR/cmd/erasure-metadata_test.go: `testCases = append(testCases, struct {
		partNum       int
		expectedIndex int
	}{6, -1})`
$DIR/cmd/erasure-metadata_test.go: `fi.Erasure.Index = 1`
$DIR/cmd/erasure-metadata_test.go: `fi.AddObjectPart(partNum, "etag."+partNumString, int64(partNum+humanize.MiByte), ActualSize, UTCNow(), nil, nil)`
$DIR/cmd/erasure-metadata_test.go: `fi.AddObjectPart(1, "etag", 100, 100, UTCNow(), nil, nil)`
$DIR/cmd/erasure-metadata_test.go: `fi.ModTime = time.Unix(t, 0)`
$DIR/cmd/erasure-metadata_test.go: `fi.DataDir = dataDir`
$DIR/cmd/erasure-metadata_test.go: `fis[i] = fi`
$DIR/cmd/erasure-metadata_test.go: `fis[i].Erasure.Index = i + 1`
$DIR/cmd/erasure-metadata_test.go: `fis[i].SuccessorModTime = succModTimes[i]`
$DIR/cmd/erasure-metadata_test.go: `fis[i].IsLatest = succModTimes[i].IsZero()`
$DIR/cmd/erasure-metadata_test.go: `fis[i].NumVersions = numVersions[i]`
$DIR/cmd/erasure-metadata_test.go: `quorum--`
$DIR/cmd/erasure-metadata_test.go: `succModTimesInQuorum[i] = commonSuccModTime`
$DIR/cmd/erasure-metadata_test.go: `numVersionsInQuorum[i] = commonNumVersions`
$DIR/cmd/erasure-metadata_test.go: `succModTimesNoQuorum[i] = commonSuccModTime`
$DIR/cmd/erasure-metadata_test.go: `numVersionsNoQuorum[i] = commonNumVersions`
$DIR/cmd/erasure-metadata_test.go: `t.Run("", func(t *testing.T) {
			fi, err := findFileInfoInQuorum(context.Background(), test.fis, test.modTime, "", test.expectedQuorum)
			_, ok1 := err.(InsufficientReadQuorum)
			_, ok2 := test.expectedErr.(InsufficientReadQuorum)
			if ok1 != ok2 {
				t.Errorf("Expected %s, got %s", test.expectedErr, err)
			}
			if test.succmodTimes != nil {
				if !test.expectedSuccModTime.Equal(fi.SuccessorModTime) {
					t.Errorf("Expected successor mod time to be %v but got %v", test.expectedSuccModTime, fi.SuccessorModTime)
				}
				if test.expectedIsLatest != fi.IsLatest {
					t.Errorf("Expected IsLatest to be %v but got %v", test.expectedIsLatest, fi.IsLatest)
				}
			}
			if test.numVersions != nil && test.expectedNumVersions > 0 {
				if test.expectedNumVersions != fi.NumVersions {
					t.Errorf("Expected Numversions to be %d but got %d", test.expectedNumVersions, fi.NumVersions)
				}
			}
		})`
$DIR/cmd/erasure-metadata_test.go: `ofi.TransitionTier = inputs[1].tier`
$DIR/cmd/erasure-metadata_test.go: `ofi.TransitionedObjName = inputs[1].remoteObjName`
$DIR/cmd/erasure-metadata_test.go: `ofi.TransitionVersionID = inputs[1].remoteVersionID`
$DIR/cmd/erasure-metadata_test.go: `fi.SetSkipTierFreeVersion()`
$DIR/cmd/erasure-metadata_test.go: `.IsValid()`
$DIR/cmd/erasure-metadata_test.go: `.Itoa(testCase.partNum)`
$DIR/cmd/erasure-metadata_test.go: `.AddObjectPart(testCase.partNum, "etag."+partNumString, int64(testCase.partNum+humanize.MiByte), ActualSize, UTCNow(), nil, nil)`
$DIR/cmd/erasure-metadata_test.go: `.IsValid()`
$DIR/cmd/erasure-metadata_test.go: `.Itoa(testCase.partNum)`
$DIR/cmd/erasure-metadata_test.go: `.AddObjectPart(testCase.partNum, "etag."+partNumString, int64(testCase.partNum+humanize.MiByte), ActualSize, UTCNow(), nil, nil)`
$DIR/cmd/erasure-metadata_test.go: `.IsValid()`
$DIR/cmd/erasure-metadata_test.go: `.Itoa(partNum)`
$DIR/cmd/erasure-metadata_test.go: `.AddObjectPart(partNum, "etag."+partNumString, int64(partNum+humanize.MiByte), ActualSize, UTCNow(), nil, nil)`
$DIR/cmd/erasure-metadata_test.go: `.ObjectToPartOffset(context.Background(), testCase.offset)`
$DIR/cmd/erasure-metadata_test.go: `.Background()`
$DIR/cmd/erasure-metadata_test.go: `.AddObjectPart(1, "etag", 100, 100, UTCNow(), nil, nil)`
$DIR/cmd/erasure-metadata_test.go: `.Unix(t, 0)`
$DIR/cmd/erasure-metadata_test.go: `.IsZero()`
$DIR/cmd/erasure-metadata_test.go: `.Date(2023, time.August, 25, 0, 0, 0, 0, time.UTC)`
$DIR/cmd/erasure-metadata_test.go: `.Unix(1603863445, 0)`
$DIR/cmd/erasure-metadata_test.go: `.Unix(1603863445, 0)`
$DIR/cmd/erasure-metadata_test.go: `.Unix(1603863445, 0)`
$DIR/cmd/erasure-metadata_test.go: `.Unix(1603863445, 0)`
$DIR/cmd/erasure-metadata_test.go: `.Unix(1603863445, 0)`
$DIR/cmd/erasure-metadata_test.go: `.Unix(1603863445, 0)`
$DIR/cmd/erasure-metadata_test.go: `.Unix(1603863445, 0)`
$DIR/cmd/erasure-metadata_test.go: `.Run("", func(t *testing.T) {
			fi, err := findFileInfoInQuorum(context.Background(), test.fis, test.modTime, "", test.expectedQuorum)
			_, ok1 := err.(InsufficientReadQuorum)
			_, ok2 := test.expectedErr.(InsufficientReadQuorum)
			if ok1 != ok2 {
				t.Errorf("Expected %s, got %s", test.expectedErr, err)
			}
			if test.succmodTimes != nil {
				if !test.expectedSuccModTime.Equal(fi.SuccessorModTime) {
					t.Errorf("Expected successor mod time to be %v but got %v", test.expectedSuccModTime, fi.SuccessorModTime)
				}
				if test.expectedIsLatest != fi.IsLatest {
					t.Errorf("Expected IsLatest to be %v but got %v", test.expectedIsLatest, fi.IsLatest)
				}
			}
			if test.numVersions != nil && test.expectedNumVersions > 0 {
				if test.expectedNumVersions != fi.NumVersions {
					t.Errorf("Expected Numversions to be %d but got %d", test.expectedNumVersions, fi.NumVersions)
				}
			}
		})`
$DIR/cmd/erasure-metadata_test.go: `.Background()`
$DIR/cmd/erasure-metadata_test.go: `.expectedSuccModTime.Equal(fi.SuccessorModTime)`
$DIR/cmd/erasure-metadata_test.go: `.TransitionInfoEquals(ofi)`
$DIR/cmd/erasure-metadata_test.go: `.TransitionInfoEquals(ofi)`
$DIR/cmd/erasure-metadata_test.go: `.SetSkipTierFreeVersion()`
$DIR/cmd/erasure-metadata_test.go: `.SkipTierFreeVersion()`
$DIR/cmd/erasure-object_test.go: `objLayer, disks, err = prepareErasure16(ctx)`
$DIR/cmd/erasure-object_test.go: `err = objLayer.MakeBucket(ctx, "bucket1", MakeBucketOptions{})`
$DIR/cmd/erasure-object_test.go: `_, err = objLayer.PutObjectPart(ctx, "bucket1", "mpartObj1", res.UploadID, 1, mustGetPutObjReader(t, bytes.NewReader(fiveMBBytes), 5*humanize.MiByte, md5Hex, ""), opts)`
$DIR/cmd/erasure-object_test.go: `_, err = objLayer.PutObjectPart(ctx, "bucket1", "mpartObj1", res.UploadID, 1, mustGetPutObjReader(t, bytes.NewReader(fiveMBBytes), 5*humanize.MiByte, md5Hex, ""), opts)`
$DIR/cmd/erasure-object_test.go: `err = xl.MakeBucket(ctx, "bucket", MakeBucketOptions{})`
$DIR/cmd/erasure-object_test.go: `_, err = xl.PutObject(ctx, "bucket", "dir/obj", mustGetPutObjReader(t, bytes.NewReader([]byte("abcd")), int64(len("abcd")), "", ""), ObjectOptions{})`
$DIR/cmd/erasure-object_test.go: `t.Run("", func(t *testing.T) {
			_, err := xl.GetObjectInfo(ctx, "bucket", "dir/obj", ObjectOptions{})
			if err != nil {
				t.Fatal("dir/obj not found before last test")
			}
			_, actualErr := xl.DeleteObject(ctx, test.bucket, test.object, ObjectOptions{})
			if test.expectedErr != nil && actualErr != test.expectedErr {
				t.Errorf("Expected to fail with %s, but failed with %s", test.expectedErr, actualErr)
			}
			if test.expectedErr == nil && actualErr != nil {
				t.Errorf("Expected to pass, but failed with %s", actualErr)
			}
		})`
$DIR/cmd/erasure-object_test.go: `err = obj.MakeBucket(ctx, bucketName, MakeBucketOptions{
		VersioningEnabled: true,
	})`
$DIR/cmd/erasure-object_test.go: `names[i] = ObjectToDelete{
			ObjectV: ObjectV{
				ObjectName: objInfo.Name,
				VersionID:  objInfo.VersionID,
			},
		}`
$DIR/cmd/erasure-object_test.go: `names = append(names, ObjectToDelete{
		ObjectV: ObjectV{
			ObjectName: "dir/obj1",
			VersionID:  mustGetUUID(), // add a non-existent UUID.
		},
	})`
$DIR/cmd/erasure-object_test.go: `setObjectLayer(obj)`
$DIR/cmd/erasure-object_test.go: `initConfigSubsystem(ctx, obj)`
$DIR/cmd/erasure-object_test.go: `_, err = obj.PutObject(ctx, testCase.bucket, testCase.object,
			mustGetPutObjReader(t, bytes.NewReader([]byte("abcd")), int64(len("abcd")), "", ""), ObjectOptions{})`
$DIR/cmd/erasure-object_test.go: `names[i] = ObjectToDelete{
				ObjectV: ObjectV{
					ObjectName: testCases[i].object,
				},
			}`
$DIR/cmd/erasure-object_test.go: `err = obj.MakeBucket(ctx, "bucket", MakeBucketOptions{})`
$DIR/cmd/erasure-object_test.go: `_, err = obj.PutObject(ctx, bucket, object, mustGetPutObjReader(t, bytes.NewReader([]byte("abcd")), int64(len("abcd")), "", ""), opts)`
$DIR/cmd/erasure-object_test.go: `z.serverPools[0].erasureDisksMu.Lock()`
$DIR/cmd/erasure-object_test.go: `erasureDisks[i] = newNaughtyDisk(erasureDisks[i], nil, errFaultyDisk)`
$DIR/cmd/erasure-object_test.go: `z.serverPools[0].erasureDisksMu.Unlock()`
$DIR/cmd/erasure-object_test.go: `_, err = obj.DeleteObject(ctx, bucket, object, ObjectOptions{})`
$DIR/cmd/erasure-object_test.go: `_, err = obj.PutObject(ctx, bucket, object, mustGetPutObjReader(t, bytes.NewReader([]byte("abcd")), int64(len("abcd")), "", ""), opts)`
$DIR/cmd/erasure-object_test.go: `erasureDisks = xl.getDisks()`
$DIR/cmd/erasure-object_test.go: `z.serverPools[0].erasureDisksMu.Lock()`
$DIR/cmd/erasure-object_test.go: `erasureDisks[7] = nil`
$DIR/cmd/erasure-object_test.go: `erasureDisks[8] = nil`
$DIR/cmd/erasure-object_test.go: `z.serverPools[0].erasureDisksMu.Unlock()`
$DIR/cmd/erasure-object_test.go: `_, err = obj.DeleteObject(ctx, bucket, object, ObjectOptions{})`
$DIR/cmd/erasure-object_test.go: `err = obj.MakeBucket(ctx, "bucket", MakeBucketOptions{})`
$DIR/cmd/erasure-object_test.go: `_, err = obj.PutObject(ctx, bucket, object, mustGetPutObjReader(t, bytes.NewReader([]byte("abcd")), int64(len("abcd")), "", ""), opts)`
$DIR/cmd/erasure-object_test.go: `_, err = obj.DeleteObject(ctx, bucket, object, ObjectOptions{})`
$DIR/cmd/erasure-object_test.go: `_, err = obj.PutObject(ctx, bucket, object, mustGetPutObjReader(t, bytes.NewReader([]byte("abcd")), int64(len("abcd")), "", ""), opts)`
$DIR/cmd/erasure-object_test.go: `z.serverPools[0].erasureDisksMu.Lock()`
$DIR/cmd/erasure-object_test.go: `erasureDisks[i] = newNaughtyDisk(erasureDisks[i], nil, errFaultyDisk)`
$DIR/cmd/erasure-object_test.go: `z.serverPools[0].erasureDisksMu.Unlock()`
$DIR/cmd/erasure-object_test.go: `_, err = obj.DeleteObject(ctx, bucket, object, ObjectOptions{})`
$DIR/cmd/erasure-object_test.go: `err = obj.MakeBucket(ctx, "bucket", MakeBucketOptions{})`
$DIR/cmd/erasure-object_test.go: `_, err = obj.PutObject(ctx, bucket, object, mustGetPutObjReader(t, bytes.NewReader([]byte("abcd")), int64(len("abcd")), "", ""), opts)`
$DIR/cmd/erasure-object_test.go: `z.serverPools[0].erasureDisksMu.Lock()`
$DIR/cmd/erasure-object_test.go: `erasureDisks[i] = newNaughtyDisk(erasureDisks[i], nil, errFaultyDisk)`
$DIR/cmd/erasure-object_test.go: `z.serverPools[0].erasureDisksMu.Unlock()`
$DIR/cmd/erasure-object_test.go: `_, err = obj.DeleteObject(ctx, bucket, object, ObjectOptions{})`
$DIR/cmd/erasure-object_test.go: `_, err = obj.PutObject(ctx, bucket, object, mustGetPutObjReader(t, bytes.NewReader([]byte("abcd")), int64(len("abcd")), "", ""), opts)`
$DIR/cmd/erasure-object_test.go: `erasureDisks = xl.getDisks()`
$DIR/cmd/erasure-object_test.go: `z.serverPools[0].erasureDisksMu.Lock()`
$DIR/cmd/erasure-object_test.go: `erasureDisks[7] = nil`
$DIR/cmd/erasure-object_test.go: `erasureDisks[8] = nil`
$DIR/cmd/erasure-object_test.go: `erasureDisks[9] = nil`
$DIR/cmd/erasure-object_test.go: `z.serverPools[0].erasureDisksMu.Unlock()`
$DIR/cmd/erasure-object_test.go: `_, err = obj.DeleteObject(ctx, bucket, object, ObjectOptions{})`
$DIR/cmd/erasure-object_test.go: `err = obj.MakeBucket(ctx, "bucket", MakeBucketOptions{})`
$DIR/cmd/erasure-object_test.go: `_, err = obj.PutObject(ctx, bucket, object, mustGetPutObjReader(t, bytes.NewReader(buf), int64(len(buf)), "", ""), opts)`
$DIR/cmd/erasure-object_test.go: `disk.Delete(ctx, bucket, pathJoin(object, file), DeleteOptions{
					Recursive: true,
					Immediate: false,
				})`
$DIR/cmd/erasure-object_test.go: `_, err = io.Copy(io.Discard, gr)`
$DIR/cmd/erasure-object_test.go: `_, err = obj.PutObject(ctx, bucket, object, mustGetPutObjReader(t, bytes.NewReader(buf), int64(len(buf)), "", ""), opts)`
$DIR/cmd/erasure-object_test.go: `diskErrors[i] = nil`
$DIR/cmd/erasure-object_test.go: `erasureDisks[i] = newNaughtyDisk(diskType.disk, diskErrors, errFaultyDisk)`
$DIR/cmd/erasure-object_test.go: `erasureDisks[i] = newNaughtyDisk(erasureDisks[i], diskErrors, errFaultyDisk)`
$DIR/cmd/erasure-object_test.go: `z.serverPools[0].erasureDisksMu.Lock()`
$DIR/cmd/erasure-object_test.go: `z.serverPools[0].erasureDisksMu.Unlock()`
$DIR/cmd/erasure-object_test.go: `_, err = io.Copy(io.Discard, gr)`
$DIR/cmd/erasure-object_test.go: `err = obj.MakeBucket(ctx, "bucket", MakeBucketOptions{})`
$DIR/cmd/erasure-object_test.go: `_, err = obj.PutObject(ctx, bucket, object, mustGetPutObjReader(t, bytes.NewReader([]byte("abcd")), int64(len("abcd")), "", ""), opts)`
$DIR/cmd/erasure-object_test.go: `disk.Delete(ctx, bucket, pathJoin(object, file), DeleteOptions{
					Recursive: true,
					Immediate: false,
				})`
$DIR/cmd/erasure-object_test.go: `_, err = xl.GetObjectInfo(ctx, bucket, object, opts)`
$DIR/cmd/erasure-object_test.go: `_, err = obj.PutObject(ctx, bucket, object, mustGetPutObjReader(t, bytes.NewReader([]byte("abcd")), int64(len("abcd")), "", ""), opts)`
$DIR/cmd/erasure-object_test.go: `erasureDisks[i] = nil`
$DIR/cmd/erasure-object_test.go: `z.serverPools[0].erasureDisksMu.Lock()`
$DIR/cmd/erasure-object_test.go: `z.serverPools[0].erasureDisksMu.Unlock()`
$DIR/cmd/erasure-object_test.go: `_, err = xl.GetObjectInfo(ctx, bucket, object, opts)`
$DIR/cmd/erasure-object_test.go: `err = obj.MakeBucket(ctx, "bucket", MakeBucketOptions{})`
$DIR/cmd/erasure-object_test.go: `_, err = obj.PutObject(ctx, bucket, object, mustGetPutObjReader(t, bytes.NewReader(bytes.Repeat([]byte{'a'}, smallFileThreshold*16)), smallFileThreshold*16, "", ""), opts)`
$DIR/cmd/erasure-object_test.go: `diskErrors[i] = nil`
$DIR/cmd/erasure-object_test.go: `erasureDisks[i] = newNaughtyDisk(diskType.disk, diskErrors, errFaultyDisk)`
$DIR/cmd/erasure-object_test.go: `erasureDisks[i] = newNaughtyDisk(erasureDisks[i], diskErrors, errFaultyDisk)`
$DIR/cmd/erasure-object_test.go: `z.serverPools[0].erasureDisksMu.Lock()`
$DIR/cmd/erasure-object_test.go: `z.serverPools[0].erasureDisksMu.Unlock()`
$DIR/cmd/erasure-object_test.go: `_, err = obj.PutObject(ctx, bucket, object, mustGetPutObjReader(t, bytes.NewReader(bytes.Repeat([]byte{byte(f)}, smallFileThreshold*16)), smallFileThreshold*16, "", ""), opts)`
$DIR/cmd/erasure-object_test.go: `err = obj.MakeBucket(ctx, "bucket", MakeBucketOptions{})`
$DIR/cmd/erasure-object_test.go: `_, err = obj.PutObject(ctx, bucket, object, mustGetPutObjReader(t, bytes.NewReader(bytes.Repeat([]byte{'a'}, smallFileThreshold/2)), smallFileThreshold/2, "", ""), opts)`
$DIR/cmd/erasure-object_test.go: `t.Run("exec-"+strconv.Itoa(f), func(t *testing.T) {
			diskErrors := make(map[int]error)
			for i := 0; i <= f; i++ {
				diskErrors[i] = nil
			}
			erasureDisks := xl.getDisks()
			for i := range erasureDisks[:9] {
				switch diskType := erasureDisks[i].(type) {
				case *naughtyDisk:
					erasureDisks[i] = newNaughtyDisk(diskType.disk, diskErrors, errFaultyDisk)
				default:
					erasureDisks[i] = newNaughtyDisk(erasureDisks[i], diskErrors, errFaultyDisk)
				}
			}
			z.serverPools[0].erasureDisksMu.Lock()
			xl.getDisks = func() []StorageAPI {
				return erasureDisks
			}
			z.serverPools[0].erasureDisksMu.Unlock()
			// Upload new content to same object "object"
			_, err = obj.PutObject(ctx, bucket, object, mustGetPutObjReader(t, bytes.NewReader(bytes.Repeat([]byte{byte(f)}, smallFileThreshold/2)), smallFileThreshold/2, "", ""), opts)
			if !errors.Is(err, errErasureWriteQuorum) {
				t.Errorf("Expected putObject to fail with %v, but failed with %v", toObjectErr(errErasureWriteQuorum, bucket, object), err)
			}
		})`
$DIR/cmd/erasure-object_test.go: `diskErrors[i] = nil`
$DIR/cmd/erasure-object_test.go: `erasureDisks[i] = newNaughtyDisk(diskType.disk, diskErrors, errFaultyDisk)`
$DIR/cmd/erasure-object_test.go: `erasureDisks[i] = newNaughtyDisk(erasureDisks[i], diskErrors, errFaultyDisk)`
$DIR/cmd/erasure-object_test.go: `z.serverPools[0].erasureDisksMu.Lock()`
$DIR/cmd/erasure-object_test.go: `z.serverPools[0].erasureDisksMu.Unlock()`
$DIR/cmd/erasure-object_test.go: `_, err = obj.PutObject(ctx, bucket, object, mustGetPutObjReader(t, bytes.NewReader(bytes.Repeat([]byte{byte(f)}, smallFileThreshold/2)), smallFileThreshold/2, "", ""), opts)`
$DIR/cmd/erasure-object_test.go: `err = obj.MakeBucket(ctx, bucket, MakeBucketOptions{})`
$DIR/cmd/erasure-object_test.go: `_, err = obj.PutObject(ctx, bucket, object, mustGetPutObjReader(t, bytes.NewReader(smallData), int64(len(smallData)), "", ""), ObjectOptions{})`
$DIR/cmd/erasure-object_test.go: `_, err = io.Copy(output, gr)`
$DIR/cmd/erasure-object_test.go: `output.Reset()`
$DIR/cmd/erasure-object_test.go: `_, err = obj.PutObject(ctx, bucket, object, mustGetPutObjReader(t, bytes.NewReader(bigData), int64(len(bigData)), "", ""), ObjectOptions{})`
$DIR/cmd/erasure-object_test.go: `gr, err = obj.GetObjectNInfo(ctx, bucket, object, nil, nil, ObjectOptions{})`
$DIR/cmd/erasure-object_test.go: `_, err = io.Copy(output, gr)`
$DIR/cmd/erasure-object_test.go: `fsDirs = append(fsDirs, filepath.Join(path, fmt.Sprintf("disk%d", i)))`
$DIR/cmd/erasure-object_test.go: `removeRoots(fsDirs)`
$DIR/cmd/erasure-object_test.go: `err = objLayer.MakeBucket(ctx, "testbucket", MakeBucketOptions{})`
$DIR/cmd/erasure-object_test.go: `err = unzipArchive("testdata/xl-meta-inline-notinline.zip", path)`
$DIR/cmd/erasure-object_test.go: `_, err = io.Copy(h, gr)`
$DIR/cmd/erasure-object_test.go: `err = z.MakeBucket(ctx, testCase.bucket, MakeBucketOptions{VersioningEnabled: testCase.versioned})`
$DIR/cmd/erasure-object_test.go: `sets.erasureDisksMu.Lock()`
$DIR/cmd/erasure-object_test.go: `sets.erasureDisksMu.Unlock()`
$DIR/cmd/erasure-object_test.go: `_, err = z.PutObject(ctx, testCase.bucket, testCase.object, mustGetPutObjReader(t, bytes.NewReader(initialData), int64(len(initialData)), "", ""),
			ObjectOptions{Versioned: testCase.versioned})`
$DIR/cmd/erasure-object_test.go: `sets.erasureDisksMu.Lock()`
$DIR/cmd/erasure-object_test.go: `copy(disks, origErasureDisks)`
$DIR/cmd/erasure-object_test.go: `disks[0] = nil`
$DIR/cmd/erasure-object_test.go: `disks[1] = nil`
$DIR/cmd/erasure-object_test.go: `sets.erasureDisksMu.Unlock()`
$DIR/cmd/erasure-object_test.go: `sets.erasureDisksMu.Lock()`
$DIR/cmd/erasure-object_test.go: `sets.erasureDisksMu.Unlock()`
$DIR/cmd/erasure-object_test.go: `h.Write(testCase.content)`
$DIR/cmd/erasure-object_test.go: `h.Reset()`
$DIR/cmd/erasure-object_test.go: `_, err = io.Copy(h, gr)`
$DIR/cmd/erasure-object_test.go: `.WithCancel(context.Background())`
$DIR/cmd/erasure-object_test.go: `.Background()`
$DIR/cmd/erasure-object_test.go: `.Shutdown(context.Background())`
$DIR/cmd/erasure-object_test.go: `.Background()`
$DIR/cmd/erasure-object_test.go: `.MakeBucket(ctx, "bucket1", MakeBucketOptions{})`
$DIR/cmd/erasure-object_test.go: `.NewMultipartUpload(ctx, "bucket1", "mpartObj1", opts)`
$DIR/cmd/erasure-object_test.go: `.Repeat([]byte("a"), 5*humanize.MiByte)`
$DIR/cmd/erasure-object_test.go: `.PutObjectPart(ctx, "bucket1", "mpartObj1", res.UploadID, 1, mustGetPutObjReader(t, bytes.NewReader(fiveMBBytes), 5*humanize.MiByte, md5Hex, ""), opts)`
$DIR/cmd/erasure-object_test.go: `.NewReader(fiveMBBytes)`
$DIR/cmd/erasure-object_test.go: `.PutObjectPart(ctx, "bucket1", "mpartObj1", res.UploadID, 1, mustGetPutObjReader(t, bytes.NewReader(fiveMBBytes), 5*humanize.MiByte, md5Hex, ""), opts)`
$DIR/cmd/erasure-object_test.go: `.NewReader(fiveMBBytes)`
$DIR/cmd/erasure-object_test.go: `.WithCancel(context.Background())`
$DIR/cmd/erasure-object_test.go: `.Background()`
$DIR/cmd/erasure-object_test.go: `.Shutdown(context.Background())`
$DIR/cmd/erasure-object_test.go: `.Background()`
$DIR/cmd/erasure-object_test.go: `.MakeBucket(ctx, "bucket", MakeBucketOptions{})`
$DIR/cmd/erasure-object_test.go: `.PutObject(ctx, "bucket", "dir/obj", mustGetPutObjReader(t, bytes.NewReader([]byte("abcd")), int64(len("abcd")), "", ""), ObjectOptions{})`
$DIR/cmd/erasure-object_test.go: `.NewReader([]byte("abcd"))`
$DIR/cmd/erasure-object_test.go: `.Run("", func(t *testing.T) {
			_, err := xl.GetObjectInfo(ctx, "bucket", "dir/obj", ObjectOptions{})
			if err != nil {
				t.Fatal("dir/obj not found before last test")
			}
			_, actualErr := xl.DeleteObject(ctx, test.bucket, test.object, ObjectOptions{})
			if test.expectedErr != nil && actualErr != test.expectedErr {
				t.Errorf("Expected to fail with %s, but failed with %s", test.expectedErr, actualErr)
			}
			if test.expectedErr == nil && actualErr != nil {
				t.Errorf("Expected to pass, but failed with %s", actualErr)
			}
		})`
$DIR/cmd/erasure-object_test.go: `.GetObjectInfo(ctx, "bucket", "dir/obj", ObjectOptions{})`
$DIR/cmd/erasure-object_test.go: `.DeleteObject(ctx, test.bucket, test.object, ObjectOptions{})`
$DIR/cmd/erasure-object_test.go: `.WithCancel(context.Background())`
$DIR/cmd/erasure-object_test.go: `.Background()`
$DIR/cmd/erasure-object_test.go: `.RemoveAll(dir)`
$DIR/cmd/erasure-object_test.go: `.MakeBucket(ctx, bucketName, MakeBucketOptions{
		VersioningEnabled: true,
	})`
$DIR/cmd/erasure-object_test.go: `.PutObject(ctx, testCase.bucket, testCase.object,
			mustGetPutObjReader(t, bytes.NewReader([]byte("abcd")), int64(len("abcd")), "", ""), ObjectOptions{
				Versioned: true,
			})`
$DIR/cmd/erasure-object_test.go: `.NewReader([]byte("abcd"))`
$DIR/cmd/erasure-object_test.go: `.DeleteObjects(ctx, bucketName, names, ObjectOptions{
		Versioned: true,
	})`
$DIR/cmd/erasure-object_test.go: `.GetObjectInfo(ctx, test.bucket, test.object, ObjectOptions{
			VersionID: names[i].ObjectV.VersionID,
		})`
$DIR/cmd/erasure-object_test.go: `.ReadFile(pathJoin(fsDirs[0], bucketName, "dir/obj1", "xl.meta"))`
$DIR/cmd/erasure-object_test.go: `.WithCancel(context.Background())`
$DIR/cmd/erasure-object_test.go: `.Background()`
$DIR/cmd/erasure-object_test.go: `.RemoveAll(dir)`
$DIR/cmd/erasure-object_test.go: `.MakeBucket(ctx, bucketName, MakeBucketOptions{})`
$DIR/cmd/erasure-object_test.go: `.PutObject(ctx, testCase.bucket, testCase.object,
			mustGetPutObjReader(t, bytes.NewReader([]byte("abcd")), int64(len("abcd")), "", ""), ObjectOptions{})`
$DIR/cmd/erasure-object_test.go: `.NewReader([]byte("abcd"))`
$DIR/cmd/erasure-object_test.go: `.DeleteObjects(ctx, bucketName, objectNames, ObjectOptions{})`
$DIR/cmd/erasure-object_test.go: `.GetObjectInfo(ctx, test.bucket, test.object, ObjectOptions{})`
$DIR/cmd/erasure-object_test.go: `.WithCancel(context.Background())`
$DIR/cmd/erasure-object_test.go: `.Background()`
$DIR/cmd/erasure-object_test.go: `.Shutdown(context.Background())`
$DIR/cmd/erasure-object_test.go: `.Background()`
$DIR/cmd/erasure-object_test.go: `.MakeBucket(ctx, "bucket", MakeBucketOptions{})`
$DIR/cmd/erasure-object_test.go: `.PutObject(ctx, bucket, object, mustGetPutObjReader(t, bytes.NewReader([]byte("abcd")), int64(len("abcd")), "", ""), opts)`
$DIR/cmd/erasure-object_test.go: `.NewReader([]byte("abcd"))`
$DIR/cmd/erasure-object_test.go: `.getDisks()`
$DIR/cmd/erasure-object_test.go: `.erasureDisksMu.Lock()`
$DIR/cmd/erasure-object_test.go: `.erasureDisksMu.Unlock()`
$DIR/cmd/erasure-object_test.go: `.DeleteObject(ctx, bucket, object, ObjectOptions{})`
$DIR/cmd/erasure-object_test.go: `.Is(err, errErasureWriteQuorum)`
$DIR/cmd/erasure-object_test.go: `.PutObject(ctx, bucket, object, mustGetPutObjReader(t, bytes.NewReader([]byte("abcd")), int64(len("abcd")), "", ""), opts)`
$DIR/cmd/erasure-object_test.go: `.NewReader([]byte("abcd"))`
$DIR/cmd/erasure-object_test.go: `.getDisks()`
$DIR/cmd/erasure-object_test.go: `.erasureDisksMu.Lock()`
$DIR/cmd/erasure-object_test.go: `.erasureDisksMu.Unlock()`
$DIR/cmd/erasure-object_test.go: `.DeleteObject(ctx, bucket, object, ObjectOptions{})`
$DIR/cmd/erasure-object_test.go: `.Is(err, errErasureWriteQuorum)`
$DIR/cmd/erasure-object_test.go: `.WithCancel(context.Background())`
$DIR/cmd/erasure-object_test.go: `.Background()`
$DIR/cmd/erasure-object_test.go: `.Shutdown(context.Background())`
$DIR/cmd/erasure-object_test.go: `.Background()`
$DIR/cmd/erasure-object_test.go: `.MakeBucket(ctx, "bucket", MakeBucketOptions{})`
$DIR/cmd/erasure-object_test.go: `.PutObject(ctx, bucket, object, mustGetPutObjReader(t, bytes.NewReader([]byte("abcd")), int64(len("abcd")), "", ""), opts)`
$DIR/cmd/erasure-object_test.go: `.NewReader([]byte("abcd"))`
$DIR/cmd/erasure-object_test.go: `.DeleteObject(ctx, bucket, object, ObjectOptions{})`
$DIR/cmd/erasure-object_test.go: `.PutObject(ctx, bucket, object, mustGetPutObjReader(t, bytes.NewReader([]byte("abcd")), int64(len("abcd")), "", ""), opts)`
$DIR/cmd/erasure-object_test.go: `.NewReader([]byte("abcd"))`
$DIR/cmd/erasure-object_test.go: `.getDisks()`
$DIR/cmd/erasure-object_test.go: `.erasureDisksMu.Lock()`
$DIR/cmd/erasure-object_test.go: `.erasureDisksMu.Unlock()`
$DIR/cmd/erasure-object_test.go: `.DeleteObject(ctx, bucket, object, ObjectOptions{})`
$DIR/cmd/erasure-object_test.go: `.Is(err, errErasureWriteQuorum)`
$DIR/cmd/erasure-object_test.go: `.WithCancel(context.Background())`
$DIR/cmd/erasure-object_test.go: `.Background()`
$DIR/cmd/erasure-object_test.go: `.Shutdown(context.Background())`
$DIR/cmd/erasure-object_test.go: `.Background()`
$DIR/cmd/erasure-object_test.go: `.MakeBucket(ctx, "bucket", MakeBucketOptions{})`
$DIR/cmd/erasure-object_test.go: `.PutObject(ctx, bucket, object, mustGetPutObjReader(t, bytes.NewReader([]byte("abcd")), int64(len("abcd")), "", ""), opts)`
$DIR/cmd/erasure-object_test.go: `.NewReader([]byte("abcd"))`
$DIR/cmd/erasure-object_test.go: `.getDisks()`
$DIR/cmd/erasure-object_test.go: `.erasureDisksMu.Lock()`
$DIR/cmd/erasure-object_test.go: `.erasureDisksMu.Unlock()`
$DIR/cmd/erasure-object_test.go: `.DeleteObject(ctx, bucket, object, ObjectOptions{})`
$DIR/cmd/erasure-object_test.go: `.PutObject(ctx, bucket, object, mustGetPutObjReader(t, bytes.NewReader([]byte("abcd")), int64(len("abcd")), "", ""), opts)`
$DIR/cmd/erasure-object_test.go: `.NewReader([]byte("abcd"))`
$DIR/cmd/erasure-object_test.go: `.getDisks()`
$DIR/cmd/erasure-object_test.go: `.erasureDisksMu.Lock()`
$DIR/cmd/erasure-object_test.go: `.erasureDisksMu.Unlock()`
$DIR/cmd/erasure-object_test.go: `.DeleteObject(ctx, bucket, object, ObjectOptions{})`
$DIR/cmd/erasure-object_test.go: `.WithCancel(context.Background())`
$DIR/cmd/erasure-object_test.go: `.Background()`
$DIR/cmd/erasure-object_test.go: `.Shutdown(context.Background())`
$DIR/cmd/erasure-object_test.go: `.Background()`
$DIR/cmd/erasure-object_test.go: `.MakeBucket(ctx, "bucket", MakeBucketOptions{})`
$DIR/cmd/erasure-object_test.go: `.ReadFull(crand.Reader, buf)`
$DIR/cmd/erasure-object_test.go: `.PutObject(ctx, bucket, object, mustGetPutObjReader(t, bytes.NewReader(buf), int64(len(buf)), "", ""), opts)`
$DIR/cmd/erasure-object_test.go: `.NewReader(buf)`
$DIR/cmd/erasure-object_test.go: `.getDisks()`
$DIR/cmd/erasure-object_test.go: `.ListDir(ctx, "", bucket, object, -1)`
$DIR/cmd/erasure-object_test.go: `.Delete(ctx, bucket, pathJoin(object, file), DeleteOptions{
					Recursive: true,
					Immediate: false,
				})`
$DIR/cmd/erasure-object_test.go: `.GetObjectNInfo(ctx, bucket, object, nil, nil, opts)`
$DIR/cmd/erasure-object_test.go: `.Copy(io.Discard, gr)`
$DIR/cmd/erasure-object_test.go: `.PutObject(ctx, bucket, object, mustGetPutObjReader(t, bytes.NewReader(buf), int64(len(buf)), "", ""), opts)`
$DIR/cmd/erasure-object_test.go: `.NewReader(buf)`
$DIR/cmd/erasure-object_test.go: `.getDisks()`
$DIR/cmd/erasure-object_test.go: `.erasureDisksMu.Lock()`
$DIR/cmd/erasure-object_test.go: `.erasureDisksMu.Unlock()`
$DIR/cmd/erasure-object_test.go: `.GetObjectNInfo(ctx, bucket, object, nil, nil, opts)`
$DIR/cmd/erasure-object_test.go: `.Copy(io.Discard, gr)`
$DIR/cmd/erasure-object_test.go: `.WithCancel(context.Background())`
$DIR/cmd/erasure-object_test.go: `.Background()`
$DIR/cmd/erasure-object_test.go: `.Shutdown(context.Background())`
$DIR/cmd/erasure-object_test.go: `.Background()`
$DIR/cmd/erasure-object_test.go: `.MakeBucket(ctx, "bucket", MakeBucketOptions{})`
$DIR/cmd/erasure-object_test.go: `.PutObject(ctx, bucket, object, mustGetPutObjReader(t, bytes.NewReader([]byte("abcd")), int64(len("abcd")), "", ""), opts)`
$DIR/cmd/erasure-object_test.go: `.NewReader([]byte("abcd"))`
$DIR/cmd/erasure-object_test.go: `.getDisks()`
$DIR/cmd/erasure-object_test.go: `.ListDir(ctx, "", bucket, object, -1)`
$DIR/cmd/erasure-object_test.go: `.Delete(ctx, bucket, pathJoin(object, file), DeleteOptions{
					Recursive: true,
					Immediate: false,
				})`
$DIR/cmd/erasure-object_test.go: `.GetObjectInfo(ctx, bucket, object, opts)`
$DIR/cmd/erasure-object_test.go: `.PutObject(ctx, bucket, object, mustGetPutObjReader(t, bytes.NewReader([]byte("abcd")), int64(len("abcd")), "", ""), opts)`
$DIR/cmd/erasure-object_test.go: `.NewReader([]byte("abcd"))`
$DIR/cmd/erasure-object_test.go: `.getDisks()`
$DIR/cmd/erasure-object_test.go: `.erasureDisksMu.Lock()`
$DIR/cmd/erasure-object_test.go: `.erasureDisksMu.Unlock()`
$DIR/cmd/erasure-object_test.go: `.GetObjectInfo(ctx, bucket, object, opts)`
$DIR/cmd/erasure-object_test.go: `.WithCancel(context.Background())`
$DIR/cmd/erasure-object_test.go: `.Background()`
$DIR/cmd/erasure-object_test.go: `.Shutdown(context.Background())`
$DIR/cmd/erasure-object_test.go: `.Background()`
$DIR/cmd/erasure-object_test.go: `.MakeBucket(ctx, "bucket", MakeBucketOptions{})`
$DIR/cmd/erasure-object_test.go: `.PutObject(ctx, bucket, object, mustGetPutObjReader(t, bytes.NewReader(bytes.Repeat([]byte{'a'}, smallFileThreshold*16)), smallFileThreshold*16, "", ""), opts)`
$DIR/cmd/erasure-object_test.go: `.NewReader(bytes.Repeat([]byte{'a'}, smallFileThreshold*16))`
$DIR/cmd/erasure-object_test.go: `.Repeat([]byte{'a'}, smallFileThreshold*16)`
$DIR/cmd/erasure-object_test.go: `.getDisks()`
$DIR/cmd/erasure-object_test.go: `.erasureDisksMu.Lock()`
$DIR/cmd/erasure-object_test.go: `.erasureDisksMu.Unlock()`
$DIR/cmd/erasure-object_test.go: `.PutObject(ctx, bucket, object, mustGetPutObjReader(t, bytes.NewReader(bytes.Repeat([]byte{byte(f)}, smallFileThreshold*16)), smallFileThreshold*16, "", ""), opts)`
$DIR/cmd/erasure-object_test.go: `.NewReader(bytes.Repeat([]byte{byte(f)}, smallFileThreshold*16))`
$DIR/cmd/erasure-object_test.go: `.Repeat([]byte{byte(f)}, smallFileThreshold*16)`
$DIR/cmd/erasure-object_test.go: `.Is(err, errErasureWriteQuorum)`
$DIR/cmd/erasure-object_test.go: `.WithCancel(context.Background())`
$DIR/cmd/erasure-object_test.go: `.Background()`
$DIR/cmd/erasure-object_test.go: `.Shutdown(context.Background())`
$DIR/cmd/erasure-object_test.go: `.Background()`
$DIR/cmd/erasure-object_test.go: `.MakeBucket(ctx, "bucket", MakeBucketOptions{})`
$DIR/cmd/erasure-object_test.go: `.PutObject(ctx, bucket, object, mustGetPutObjReader(t, bytes.NewReader(bytes.Repeat([]byte{'a'}, smallFileThreshold/2)), smallFileThreshold/2, "", ""), opts)`
$DIR/cmd/erasure-object_test.go: `.NewReader(bytes.Repeat([]byte{'a'}, smallFileThreshold/2))`
$DIR/cmd/erasure-object_test.go: `.Repeat([]byte{'a'}, smallFileThreshold/2)`
$DIR/cmd/erasure-object_test.go: `.Run("exec-"+strconv.Itoa(f), func(t *testing.T) {
			diskErrors := make(map[int]error)
			for i := 0; i <= f; i++ {
				diskErrors[i] = nil
			}
			erasureDisks := xl.getDisks()
			for i := range erasureDisks[:9] {
				switch diskType := erasureDisks[i].(type) {
				case *naughtyDisk:
					erasureDisks[i] = newNaughtyDisk(diskType.disk, diskErrors, errFaultyDisk)
				default:
					erasureDisks[i] = newNaughtyDisk(erasureDisks[i], diskErrors, errFaultyDisk)
				}
			}
			z.serverPools[0].erasureDisksMu.Lock()
			xl.getDisks = func() []StorageAPI {
				return erasureDisks
			}
			z.serverPools[0].erasureDisksMu.Unlock()
			// Upload new content to same object "object"
			_, err = obj.PutObject(ctx, bucket, object, mustGetPutObjReader(t, bytes.NewReader(bytes.Repeat([]byte{byte(f)}, smallFileThreshold/2)), smallFileThreshold/2, "", ""), opts)
			if !errors.Is(err, errErasureWriteQuorum) {
				t.Errorf("Expected putObject to fail with %v, but failed with %v", toObjectErr(errErasureWriteQuorum, bucket, object), err)
			}
		})`
$DIR/cmd/erasure-object_test.go: `.Itoa(f)`
$DIR/cmd/erasure-object_test.go: `.getDisks()`
$DIR/cmd/erasure-object_test.go: `.erasureDisksMu.Lock()`
$DIR/cmd/erasure-object_test.go: `.erasureDisksMu.Unlock()`
$DIR/cmd/erasure-object_test.go: `.PutObject(ctx, bucket, object, mustGetPutObjReader(t, bytes.NewReader(bytes.Repeat([]byte{byte(f)}, smallFileThreshold/2)), smallFileThreshold/2, "", ""), opts)`
$DIR/cmd/erasure-object_test.go: `.NewReader(bytes.Repeat([]byte{byte(f)}, smallFileThreshold/2))`
$DIR/cmd/erasure-object_test.go: `.Repeat([]byte{byte(f)}, smallFileThreshold/2)`
$DIR/cmd/erasure-object_test.go: `.Is(err, errErasureWriteQuorum)`
$DIR/cmd/erasure-object_test.go: `.WithCancel(context.Background())`
$DIR/cmd/erasure-object_test.go: `.Background()`
$DIR/cmd/erasure-object_test.go: `.Shutdown(context.Background())`
$DIR/cmd/erasure-object_test.go: `.Background()`
$DIR/cmd/erasure-object_test.go: `.MakeBucket(ctx, bucket, MakeBucketOptions{})`
$DIR/cmd/erasure-object_test.go: `.PutObject(ctx, bucket, object, mustGetPutObjReader(t, bytes.NewReader(smallData), int64(len(smallData)), "", ""), ObjectOptions{})`
$DIR/cmd/erasure-object_test.go: `.NewReader(smallData)`
$DIR/cmd/erasure-object_test.go: `.GetObjectNInfo(ctx, bucket, object, nil, nil, ObjectOptions{})`
$DIR/cmd/erasure-object_test.go: `.NewBuffer([]byte{})`
$DIR/cmd/erasure-object_test.go: `.Copy(output, gr)`
$DIR/cmd/erasure-object_test.go: `.Equal(output.Bytes(), smallData)`
$DIR/cmd/erasure-object_test.go: `.Bytes()`
$DIR/cmd/erasure-object_test.go: `.Reset()`
$DIR/cmd/erasure-object_test.go: `.Repeat([]byte{'b'}, smallFileThreshold*numberOfDisks/2)`
$DIR/cmd/erasure-object_test.go: `.PutObject(ctx, bucket, object, mustGetPutObjReader(t, bytes.NewReader(bigData), int64(len(bigData)), "", ""), ObjectOptions{})`
$DIR/cmd/erasure-object_test.go: `.NewReader(bigData)`
$DIR/cmd/erasure-object_test.go: `.GetObjectNInfo(ctx, bucket, object, nil, nil, ObjectOptions{})`
$DIR/cmd/erasure-object_test.go: `.Copy(output, gr)`
$DIR/cmd/erasure-object_test.go: `.Equal(output.Bytes(), bigData)`
$DIR/cmd/erasure-object_test.go: `.Bytes()`
$DIR/cmd/erasure-object_test.go: `.WithCancel(context.Background())`
$DIR/cmd/erasure-object_test.go: `.Background()`
$DIR/cmd/erasure-object_test.go: `.TempDir()`
$DIR/cmd/erasure-object_test.go: `.Join(path, fmt.Sprintf("disk%d", i))`
$DIR/cmd/erasure-object_test.go: `.Sprintf("disk%d", i)`
$DIR/cmd/erasure-object_test.go: `.Shutdown(context.Background())`
$DIR/cmd/erasure-object_test.go: `.Background()`
$DIR/cmd/erasure-object_test.go: `.MakeBucket(ctx, "testbucket", MakeBucketOptions{})`
$DIR/cmd/erasure-object_test.go: `.GetObjectNInfo(ctx, "testbucket", "file", nil, nil, ObjectOptions{})`
$DIR/cmd/erasure-object_test.go: `.New()`
$DIR/cmd/erasure-object_test.go: `.Copy(h, gr)`
$DIR/cmd/erasure-object_test.go: `.Sprintf("%x", h.Sum(nil))`
$DIR/cmd/erasure-object_test.go: `.Sum(nil)`
$DIR/cmd/erasure-object_test.go: `.WithCancel(context.Background())`
$DIR/cmd/erasure-object_test.go: `.Background()`
$DIR/cmd/erasure-object_test.go: `.Shutdown(context.Background())`
$DIR/cmd/erasure-object_test.go: `.Background()`
$DIR/cmd/erasure-object_test.go: `.getDisks()`
$DIR/cmd/erasure-object_test.go: `.Repeat([]byte{'a'}, smallFileThreshold*2)`
$DIR/cmd/erasure-object_test.go: `.Repeat([]byte{'a'}, smallFileThreshold*2)`
$DIR/cmd/erasure-object_test.go: `.MakeBucket(ctx, testCase.bucket, MakeBucketOptions{VersioningEnabled: testCase.versioned})`
$DIR/cmd/erasure-object_test.go: `.Repeat([]byte{'b'}, len(testCase.content))`
$DIR/cmd/erasure-object_test.go: `.erasureDisksMu.Lock()`
$DIR/cmd/erasure-object_test.go: `.erasureDisksMu.Unlock()`
$DIR/cmd/erasure-object_test.go: `.PutObject(ctx, testCase.bucket, testCase.object, mustGetPutObjReader(t, bytes.NewReader(initialData), int64(len(initialData)), "", ""),
			ObjectOptions{Versioned: testCase.versioned})`
$DIR/cmd/erasure-object_test.go: `.NewReader(initialData)`
$DIR/cmd/erasure-object_test.go: `.erasureDisksMu.Lock()`
$DIR/cmd/erasure-object_test.go: `.erasureDisksMu.Unlock()`
$DIR/cmd/erasure-object_test.go: `.PutObject(ctx, testCase.bucket, testCase.object, mustGetPutObjReader(t, bytes.NewReader(testCase.content), int64(len(testCase.content)), "", ""),
			ObjectOptions{Versioned: testCase.versioned})`
$DIR/cmd/erasure-object_test.go: `.NewReader(testCase.content)`
$DIR/cmd/erasure-object_test.go: `.erasureDisksMu.Lock()`
$DIR/cmd/erasure-object_test.go: `.erasureDisksMu.Unlock()`
$DIR/cmd/erasure-object_test.go: `.GetObjectNInfo(ctx, testCase.bucket, testCase.object, nil, nil, ObjectOptions{VersionID: got.VersionID})`
$DIR/cmd/erasure-object_test.go: `.New()`
$DIR/cmd/erasure-object_test.go: `.Write(testCase.content)`
$DIR/cmd/erasure-object_test.go: `.Sum(nil)`
$DIR/cmd/erasure-object_test.go: `.Reset()`
$DIR/cmd/erasure-object_test.go: `.Copy(h, gr)`
$DIR/cmd/erasure-object_test.go: `.Sum(nil)`
$DIR/cmd/erasure-object_test.go: `.Equal(foundHash, expectedHash)`
$DIR/cmd/erasure-server-pool-decom_gen_test.go: `left, err = msgp.Skip(bts)`
$DIR/cmd/erasure-server-pool-decom_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/erasure-server-pool-decom_gen_test.go: `buf.Reset()`
$DIR/cmd/erasure-server-pool-decom_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/erasure-server-pool-decom_gen_test.go: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/erasure-server-pool-decom_gen_test.go: `left, err = msgp.Skip(bts)`
$DIR/cmd/erasure-server-pool-decom_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/erasure-server-pool-decom_gen_test.go: `buf.Reset()`
$DIR/cmd/erasure-server-pool-decom_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/erasure-server-pool-decom_gen_test.go: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/erasure-server-pool-decom_gen_test.go: `left, err = msgp.Skip(bts)`
$DIR/cmd/erasure-server-pool-decom_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/erasure-server-pool-decom_gen_test.go: `buf.Reset()`
$DIR/cmd/erasure-server-pool-decom_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/erasure-server-pool-decom_gen_test.go: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/erasure-server-pool-decom_gen_test.go: `left, err = msgp.Skip(bts)`
$DIR/cmd/erasure-server-pool-decom_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/erasure-server-pool-decom_gen_test.go: `buf.Reset()`
$DIR/cmd/erasure-server-pool-decom_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/erasure-server-pool-decom_gen_test.go: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/erasure-server-pool-decom_gen_test.go: `left, err = msgp.Skip(bts)`
$DIR/cmd/erasure-server-pool-decom_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/erasure-server-pool-decom_gen_test.go: `buf.Reset()`
$DIR/cmd/erasure-server-pool-decom_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/erasure-server-pool-decom_gen_test.go: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/erasure-server-pool-decom_gen_test.go: `.MarshalMsg(nil)`
$DIR/cmd/erasure-server-pool-decom_gen_test.go: `.UnmarshalMsg(bts)`
$DIR/cmd/erasure-server-pool-decom_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/erasure-server-pool-decom_gen_test.go: `.Msgsize()`
$DIR/cmd/erasure-server-pool-decom_gen_test.go: `.Len()`
$DIR/cmd/erasure-server-pool-decom_gen_test.go: `.Decode(&buf, &vn)`
$DIR/cmd/erasure-server-pool-decom_gen_test.go: `.Reset()`
$DIR/cmd/erasure-server-pool-decom_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/erasure-server-pool-decom_gen_test.go: `.MarshalMsg(nil)`
$DIR/cmd/erasure-server-pool-decom_gen_test.go: `.UnmarshalMsg(bts)`
$DIR/cmd/erasure-server-pool-decom_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/erasure-server-pool-decom_gen_test.go: `.Msgsize()`
$DIR/cmd/erasure-server-pool-decom_gen_test.go: `.Len()`
$DIR/cmd/erasure-server-pool-decom_gen_test.go: `.Decode(&buf, &vn)`
$DIR/cmd/erasure-server-pool-decom_gen_test.go: `.Reset()`
$DIR/cmd/erasure-server-pool-decom_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/erasure-server-pool-decom_gen_test.go: `.MarshalMsg(nil)`
$DIR/cmd/erasure-server-pool-decom_gen_test.go: `.UnmarshalMsg(bts)`
$DIR/cmd/erasure-server-pool-decom_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/erasure-server-pool-decom_gen_test.go: `.Msgsize()`
$DIR/cmd/erasure-server-pool-decom_gen_test.go: `.Len()`
$DIR/cmd/erasure-server-pool-decom_gen_test.go: `.Decode(&buf, &vn)`
$DIR/cmd/erasure-server-pool-decom_gen_test.go: `.Reset()`
$DIR/cmd/erasure-server-pool-decom_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/erasure-server-pool-decom_gen_test.go: `.MarshalMsg(nil)`
$DIR/cmd/erasure-server-pool-decom_gen_test.go: `.UnmarshalMsg(bts)`
$DIR/cmd/erasure-server-pool-decom_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/erasure-server-pool-decom_gen_test.go: `.Msgsize()`
$DIR/cmd/erasure-server-pool-decom_gen_test.go: `.Len()`
$DIR/cmd/erasure-server-pool-decom_gen_test.go: `.Decode(&buf, &vn)`
$DIR/cmd/erasure-server-pool-decom_gen_test.go: `.Reset()`
$DIR/cmd/erasure-server-pool-decom_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/erasure-server-pool-decom_gen_test.go: `.MarshalMsg(nil)`
$DIR/cmd/erasure-server-pool-decom_gen_test.go: `.UnmarshalMsg(bts)`
$DIR/cmd/erasure-server-pool-decom_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/erasure-server-pool-decom_gen_test.go: `.Msgsize()`
$DIR/cmd/erasure-server-pool-decom_gen_test.go: `.Len()`
$DIR/cmd/erasure-server-pool-decom_gen_test.go: `.Decode(&buf, &vn)`
$DIR/cmd/erasure-server-pool-decom_gen_test.go: `.Reset()`
$DIR/cmd/erasure-server-pool-decom_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/erasure-server-pool-decom_test.go: `nmeta1.Version = poolMetaVersion`
$DIR/cmd/erasure-server-pool-decom_test.go: `nmeta1.Pools = append(nmeta1.Pools, meta.Pools...)`
$DIR/cmd/erasure-server-pool-decom_test.go: `nmeta1.Pools[i] = PoolStatus{
				CmdLine:    pool.CmdLine,
				ID:         i,
				LastUpdate: UTCNow(),
				Decommission: &PoolDecommissionInfo{
					Complete: true,
				},
			}`
$DIR/cmd/erasure-server-pool-decom_test.go: `nmeta2.Version = poolMetaVersion`
$DIR/cmd/erasure-server-pool-decom_test.go: `nmeta2.Pools = append(nmeta2.Pools, meta.Pools...)`
$DIR/cmd/erasure-server-pool-decom_test.go: `nmeta2.Pools[i] = PoolStatus{
				CmdLine:    pool.CmdLine,
				ID:         i,
				LastUpdate: UTCNow(),
				Decommission: &PoolDecommissionInfo{
					Complete: false,
				},
			}`
$DIR/cmd/erasure-server-pool-decom_test.go: `t.Run(testCase.name, func(t *testing.T) {
			update, err := testCase.meta.validate(testCase.pools)
			if testCase.expectedErr {
				t.Log(err)
			}
			if err != nil && !testCase.expectedErr {
				t.Errorf("Expected success, but found %s", err)
			}
			if err == nil && testCase.expectedErr {
				t.Error("Expected error, but got `nil`")
			}
			if update != testCase.expectedUpdate {
				t.Errorf("Expected %t, got %t", testCase.expectedUpdate, update)
			}
		})`
$DIR/cmd/erasure-server-pool-decom_test.go: `.Run(testCase.name, func(t *testing.T) {
			update, err := testCase.meta.validate(testCase.pools)
			if testCase.expectedErr {
				t.Log(err)
			}
			if err != nil && !testCase.expectedErr {
				t.Errorf("Expected success, but found %s", err)
			}
			if err == nil && testCase.expectedErr {
				t.Error("Expected error, but got `nil`")
			}
			if update != testCase.expectedUpdate {
				t.Errorf("Expected %t, got %t", testCase.expectedUpdate, update)
			}
		})`
$DIR/cmd/erasure-server-pool-decom_test.go: `.meta.validate(testCase.pools)`
$DIR/cmd/erasure-server-pool-rebalance_gen_test.go: `left, err = msgp.Skip(bts)`
$DIR/cmd/erasure-server-pool-rebalance_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/erasure-server-pool-rebalance_gen_test.go: `buf.Reset()`
$DIR/cmd/erasure-server-pool-rebalance_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/erasure-server-pool-rebalance_gen_test.go: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/erasure-server-pool-rebalance_gen_test.go: `left, err = msgp.Skip(bts)`
$DIR/cmd/erasure-server-pool-rebalance_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/erasure-server-pool-rebalance_gen_test.go: `buf.Reset()`
$DIR/cmd/erasure-server-pool-rebalance_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/erasure-server-pool-rebalance_gen_test.go: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/erasure-server-pool-rebalance_gen_test.go: `left, err = msgp.Skip(bts)`
$DIR/cmd/erasure-server-pool-rebalance_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/erasure-server-pool-rebalance_gen_test.go: `buf.Reset()`
$DIR/cmd/erasure-server-pool-rebalance_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/erasure-server-pool-rebalance_gen_test.go: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/erasure-server-pool-rebalance_gen_test.go: `left, err = msgp.Skip(bts)`
$DIR/cmd/erasure-server-pool-rebalance_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/erasure-server-pool-rebalance_gen_test.go: `buf.Reset()`
$DIR/cmd/erasure-server-pool-rebalance_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/erasure-server-pool-rebalance_gen_test.go: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/erasure-server-pool-rebalance_gen_test.go: `left, err = msgp.Skip(bts)`
$DIR/cmd/erasure-server-pool-rebalance_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/erasure-server-pool-rebalance_gen_test.go: `buf.Reset()`
$DIR/cmd/erasure-server-pool-rebalance_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/erasure-server-pool-rebalance_gen_test.go: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/erasure-server-pool-rebalance_gen_test.go: `.MarshalMsg(nil)`
$DIR/cmd/erasure-server-pool-rebalance_gen_test.go: `.UnmarshalMsg(bts)`
$DIR/cmd/erasure-server-pool-rebalance_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/erasure-server-pool-rebalance_gen_test.go: `.Msgsize()`
$DIR/cmd/erasure-server-pool-rebalance_gen_test.go: `.Len()`
$DIR/cmd/erasure-server-pool-rebalance_gen_test.go: `.Decode(&buf, &vn)`
$DIR/cmd/erasure-server-pool-rebalance_gen_test.go: `.Reset()`
$DIR/cmd/erasure-server-pool-rebalance_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/erasure-server-pool-rebalance_gen_test.go: `.MarshalMsg(nil)`
$DIR/cmd/erasure-server-pool-rebalance_gen_test.go: `.UnmarshalMsg(bts)`
$DIR/cmd/erasure-server-pool-rebalance_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/erasure-server-pool-rebalance_gen_test.go: `.Msgsize()`
$DIR/cmd/erasure-server-pool-rebalance_gen_test.go: `.Len()`
$DIR/cmd/erasure-server-pool-rebalance_gen_test.go: `.Decode(&buf, &vn)`
$DIR/cmd/erasure-server-pool-rebalance_gen_test.go: `.Reset()`
$DIR/cmd/erasure-server-pool-rebalance_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/erasure-server-pool-rebalance_gen_test.go: `.MarshalMsg(nil)`
$DIR/cmd/erasure-server-pool-rebalance_gen_test.go: `.UnmarshalMsg(bts)`
$DIR/cmd/erasure-server-pool-rebalance_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/erasure-server-pool-rebalance_gen_test.go: `.Msgsize()`
$DIR/cmd/erasure-server-pool-rebalance_gen_test.go: `.Len()`
$DIR/cmd/erasure-server-pool-rebalance_gen_test.go: `.Decode(&buf, &vn)`
$DIR/cmd/erasure-server-pool-rebalance_gen_test.go: `.Reset()`
$DIR/cmd/erasure-server-pool-rebalance_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/erasure-server-pool-rebalance_gen_test.go: `.MarshalMsg(nil)`
$DIR/cmd/erasure-server-pool-rebalance_gen_test.go: `.UnmarshalMsg(bts)`
$DIR/cmd/erasure-server-pool-rebalance_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/erasure-server-pool-rebalance_gen_test.go: `.Msgsize()`
$DIR/cmd/erasure-server-pool-rebalance_gen_test.go: `.Len()`
$DIR/cmd/erasure-server-pool-rebalance_gen_test.go: `.Decode(&buf, &vn)`
$DIR/cmd/erasure-server-pool-rebalance_gen_test.go: `.Reset()`
$DIR/cmd/erasure-server-pool-rebalance_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/erasure-server-pool-rebalance_gen_test.go: `.MarshalMsg(nil)`
$DIR/cmd/erasure-server-pool-rebalance_gen_test.go: `.UnmarshalMsg(bts)`
$DIR/cmd/erasure-server-pool-rebalance_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/erasure-server-pool-rebalance_gen_test.go: `.Msgsize()`
$DIR/cmd/erasure-server-pool-rebalance_gen_test.go: `.Len()`
$DIR/cmd/erasure-server-pool-rebalance_gen_test.go: `.Decode(&buf, &vn)`
$DIR/cmd/erasure-server-pool-rebalance_gen_test.go: `.Reset()`
$DIR/cmd/erasure-server-pool-rebalance_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/erasure-sets_test.go: `erasureDisks = append(erasureDisks, disk)`
$DIR/cmd/erasure-sets_test.go: `_, _, err = waitForFormatErasure(true, nil, 1, 1, 16, "")`
$DIR/cmd/erasure-sets_test.go: `objs[i] = &erasureObjects{}`
$DIR/cmd/erasure-sets_test.go: `.WithCancel(context.Background())`
$DIR/cmd/erasure-sets_test.go: `.Background()`
$DIR/cmd/erasure-sets_test.go: `.Join(globalTestTmpDir, "minio-"+nextSuffix())`
$DIR/cmd/erasure-sets_test.go: `.RemoveAll(disk)`
$DIR/cmd/erasure-sets_test.go: `.getHashedSet(testCase.objectName)`
$DIR/cmd/erasure_test.go: `copy(buffer, data)`
$DIR/cmd/erasure_test.go: `encoded[j] = nil`
$DIR/cmd/erasure_test.go: `encoded[j] = nil`
$DIR/cmd/erasure_test.go: `err = erasure.DecodeDataAndParityBlocks(context.Background(), encoded)`
$DIR/cmd/erasure_test.go: `err = erasure.DecodeDataBlocks(encoded)`
$DIR/cmd/erasure_test.go: `.ReadFull(rand.Reader, data)`
$DIR/cmd/erasure_test.go: `.Background()`
$DIR/cmd/erasure_test.go: `.EncodeData(context.Background(), buffer)`
$DIR/cmd/erasure_test.go: `.Background()`
$DIR/cmd/erasure_test.go: `.DecodeDataAndParityBlocks(context.Background(), encoded)`
$DIR/cmd/erasure_test.go: `.Background()`
$DIR/cmd/erasure_test.go: `.DecodeDataBlocks(encoded)`
$DIR/cmd/erasure_test.go: `.Background()`
$DIR/cmd/erasure_test.go: `.Equal(decodedData.Bytes(), data)`
$DIR/cmd/erasure_test.go: `.Bytes()`
$DIR/cmd/format-erasure_test.go: `format.Erasure.DistributionAlgo = formatErasureVersionV2DistributionAlgoV1`
$DIR/cmd/format-erasure_test.go: `newFormat.Erasure.This = format.Erasure.Sets[0][j]`
$DIR/cmd/format-erasure_test.go: `formats[j] = newFormat`
$DIR/cmd/format-erasure_test.go: `formats[1] = nil`
$DIR/cmd/format-erasure_test.go: `formats[2].Erasure.This = ""`
$DIR/cmd/format-erasure_test.go: `format.Erasure.DistributionAlgo = formatErasureVersionV2DistributionAlgoV1`
$DIR/cmd/format-erasure_test.go: `newFormat.Erasure.This = format.Erasure.Sets[0][j]`
$DIR/cmd/format-erasure_test.go: `formats[j] = newFormat`
$DIR/cmd/format-erasure_test.go: `formats[0] = nil`
$DIR/cmd/format-erasure_test.go: `formats[2].Erasure.This = ""`
$DIR/cmd/format-erasure_test.go: `m.Format = formatBackendErasure`
$DIR/cmd/format-erasure_test.go: `m.Version = formatMetaVersionV1`
$DIR/cmd/format-erasure_test.go: `m.Erasure.Version = formatErasureVersionV1`
$DIR/cmd/format-erasure_test.go: `m.Erasure.Disk = mustGetUUID()`
$DIR/cmd/format-erasure_test.go: `m.Erasure.JBOD = []string{m.Erasure.Disk, mustGetUUID(), mustGetUUID(), mustGetUUID()}`
$DIR/cmd/format-erasure_test.go: `b, err = os.ReadFile(pathJoin(rootPath, minioMetaBucket, formatConfigFile))`
$DIR/cmd/format-erasure_test.go: `m = &formatErasureV1{}`
$DIR/cmd/format-erasure_test.go: `m.Format = "unknown"`
$DIR/cmd/format-erasure_test.go: `m.Version = formatMetaVersionV1`
$DIR/cmd/format-erasure_test.go: `m.Erasure.Version = formatErasureVersionV1`
$DIR/cmd/format-erasure_test.go: `m.Erasure.Disk = mustGetUUID()`
$DIR/cmd/format-erasure_test.go: `m.Erasure.JBOD = []string{m.Erasure.Disk, mustGetUUID(), mustGetUUID(), mustGetUUID()}`
$DIR/cmd/format-erasure_test.go: `b, err = json.Marshal(m)`
$DIR/cmd/format-erasure_test.go: `m = &formatErasureV1{}`
$DIR/cmd/format-erasure_test.go: `m.Format = formatBackendErasure`
$DIR/cmd/format-erasure_test.go: `m.Version = formatMetaVersionV1`
$DIR/cmd/format-erasure_test.go: `m.Erasure.Version = "30"`
$DIR/cmd/format-erasure_test.go: `m.Erasure.Disk = mustGetUUID()`
$DIR/cmd/format-erasure_test.go: `m.Erasure.JBOD = []string{m.Erasure.Disk, mustGetUUID(), mustGetUUID(), mustGetUUID()}`
$DIR/cmd/format-erasure_test.go: `b, err = json.Marshal(m)`
$DIR/cmd/format-erasure_test.go: `format.Erasure.DistributionAlgo = formatErasureVersionV2DistributionAlgoV1`
$DIR/cmd/format-erasure_test.go: `newFormat.Erasure.This = format.Erasure.Sets[i][j]`
$DIR/cmd/format-erasure_test.go: `formats[i*setDriveCount+j] = newFormat`
$DIR/cmd/format-erasure_test.go: `formats[0] = nil`
$DIR/cmd/format-erasure_test.go: `quorumFormat, err = getFormatErasureInQuorum(formats)`
$DIR/cmd/format-erasure_test.go: `badFormat.Erasure.Sets = nil`
$DIR/cmd/format-erasure_test.go: `badFormatUUID.Erasure.Sets[0][0] = "bad-uuid"`
$DIR/cmd/format-erasure_test.go: `badFormatSetSize.Erasure.Sets[0] = nil`
$DIR/cmd/format-erasure_test.go: `formats[i] = nil`
$DIR/cmd/format-erasure_test.go: `format.Erasure.DistributionAlgo = formatErasureVersionV2DistributionAlgoV1`
$DIR/cmd/format-erasure_test.go: `newFormat.Erasure.This = format.Erasure.Sets[i][j]`
$DIR/cmd/format-erasure_test.go: `formats[i*setDriveCount+j] = newFormat`
$DIR/cmd/format-erasure_test.go: `errs[15] = errUnformattedDisk`
$DIR/cmd/format-erasure_test.go: `.RemoveAll(erasureDir)`
$DIR/cmd/format-erasure_test.go: `.Clone()`
$DIR/cmd/format-erasure_test.go: `.Clone()`
$DIR/cmd/format-erasure_test.go: `.TempDir()`
$DIR/cmd/format-erasure_test.go: `.Marshal(m)`
$DIR/cmd/format-erasure_test.go: `.MkdirAll(pathJoin(rootPath, minioMetaBucket), os.FileMode(0o755))`
$DIR/cmd/format-erasure_test.go: `.FileMode(0o755)`
$DIR/cmd/format-erasure_test.go: `.WriteFile(pathJoin(rootPath, minioMetaBucket, formatConfigFile), b, os.FileMode(0o644))`
$DIR/cmd/format-erasure_test.go: `.FileMode(0o644)`
$DIR/cmd/format-erasure_test.go: `.ReadFile(pathJoin(rootPath, minioMetaBucket, formatConfigFile))`
$DIR/cmd/format-erasure_test.go: `.Unmarshal(b, formatV3)`
$DIR/cmd/format-erasure_test.go: `.DeepEqual(formatV3.Erasure.Sets[0], m.Erasure.JBOD)`
$DIR/cmd/format-erasure_test.go: `.Marshal(m)`
$DIR/cmd/format-erasure_test.go: `.WriteFile(pathJoin(rootPath, minioMetaBucket, formatConfigFile), b, os.FileMode(0o644))`
$DIR/cmd/format-erasure_test.go: `.FileMode(0o644)`
$DIR/cmd/format-erasure_test.go: `.Marshal(m)`
$DIR/cmd/format-erasure_test.go: `.WriteFile(pathJoin(rootPath, minioMetaBucket, formatConfigFile), b, os.FileMode(0o644))`
$DIR/cmd/format-erasure_test.go: `.FileMode(0o644)`
$DIR/cmd/format-erasure_test.go: `.Clone()`
$DIR/cmd/format-erasure_test.go: `.Clone()`
$DIR/cmd/generic-handlers_test.go: `r = &http.Request{
		Proto:  "HTTP/1.1",
		Method: http.MethodGet,
	}`
$DIR/cmd/generic-handlers_test.go: `r = &http.Request{
		Proto:  "HTTP/1.1",
		Method: http.MethodGet,
		URL:    &url.URL{Path: grid.RoutePath},
	}`
$DIR/cmd/generic-handlers_test.go: `t.Run("", func(t *testing.T) {
			contains := containsReservedMetadata(test.header)
			if contains && !test.shouldFail {
				t.Errorf("contains reserved header but should not fail")
			} else if !contains && test.shouldFail {
				t.Errorf("does not contain reserved header but failed")
			}
		})`
$DIR/cmd/generic-handlers_test.go: `globalIsTLS = isSSL`
$DIR/cmd/generic-handlers_test.go: `w.WriteHeader(http.StatusOK)`
$DIR/cmd/generic-handlers_test.go: `globalIsTLS = test.IsTLS`
$DIR/cmd/generic-handlers_test.go: `r.Header = test.Header`
$DIR/cmd/generic-handlers_test.go: `r.URL = test.URL`
$DIR/cmd/generic-handlers_test.go: `h.ServeHTTP(w, r)`
$DIR/cmd/generic-handlers_test.go: `.Parse("http://localhost:9000/minio/lock")`
$DIR/cmd/generic-handlers_test.go: `.Run("", func(t *testing.T) {
			contains := containsReservedMetadata(test.header)
			if contains && !test.shouldFail {
				t.Errorf("contains reserved header but should not fail")
			} else if !contains && test.shouldFail {
				t.Errorf("does not contain reserved header but failed")
			}
		})`
$DIR/cmd/generic-handlers_test.go: `.WriteHeader(http.StatusOK)`
$DIR/cmd/generic-handlers_test.go: `.NewRecorder()`
$DIR/cmd/generic-handlers_test.go: `.ServeHTTP(w, r)`
$DIR/cmd/handler-utils_test.go: `createBucketConfig.Location = location`
$DIR/cmd/handler-utils_test.go: `req.Body = io.NopCloser(createBucketConfigBuffer)`
$DIR/cmd/handler-utils_test.go: `req.ContentLength = int64(createBucketConfigBuffer.Len())`
$DIR/cmd/handler-utils_test.go: `config.SetRegion(globalServerConfig, testCase.serverConfigRegion)`
$DIR/cmd/handler-utils_test.go: `.WithCancel(context.Background())`
$DIR/cmd/handler-utils_test.go: `.Background()`
$DIR/cmd/handler-utils_test.go: `.RemoveAll(fsDir)`
$DIR/cmd/handler-utils_test.go: `.NopCloser(bytes.NewReader([]byte("<>")))`
$DIR/cmd/handler-utils_test.go: `.NewReader([]byte("<>"))`
$DIR/cmd/handler-utils_test.go: `.NopCloser(bytes.NewReader([]byte("garbage")))`
$DIR/cmd/handler-utils_test.go: `.NewReader([]byte("garbage"))`
$DIR/cmd/handler-utils_test.go: `.Marshal(createBucketConfig)`
$DIR/cmd/handler-utils_test.go: `.NewReader(createBucketConfigBytes)`
$DIR/cmd/handler-utils_test.go: `.NopCloser(createBucketConfigBuffer)`
$DIR/cmd/handler-utils_test.go: `.Len()`
$DIR/cmd/handler-utils_test.go: `.SetRegion(globalServerConfig, testCase.serverConfigRegion)`
$DIR/cmd/handler-utils_test.go: `.Background()`
$DIR/cmd/handler-utils_test.go: `.MIMEHeader(testCase.header)`
$DIR/cmd/handler-utils_test.go: `.DeepEqual(metadata, testCase.metadata)`
$DIR/cmd/httprange_test.go: `rs, err1 = parseRequestRangeSpec(irs)`
$DIR/cmd/httprange_test.go: `o, l, err2 = rs.GetOffsetLength(resourceSize)`
$DIR/cmd/httprange_test.go: `.GetOffsetLength(resourceSize)`
$DIR/cmd/httprange_test.go: `.GetOffsetLength(resourceSize)`
$DIR/cmd/httprange_test.go: `.ToHeader()`
$DIR/cmd/jwt_test.go: `.WithCancel(context.Background())`
$DIR/cmd/jwt_test.go: `.Background()`
$DIR/cmd/jwt_test.go: `.RemoveAll(fsDir)`
$DIR/cmd/last-minute_gen_test.go: `left, err = msgp.Skip(bts)`
$DIR/cmd/last-minute_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/last-minute_gen_test.go: `buf.Reset()`
$DIR/cmd/last-minute_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/last-minute_gen_test.go: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/last-minute_gen_test.go: `left, err = msgp.Skip(bts)`
$DIR/cmd/last-minute_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/last-minute_gen_test.go: `buf.Reset()`
$DIR/cmd/last-minute_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/last-minute_gen_test.go: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/last-minute_gen_test.go: `left, err = msgp.Skip(bts)`
$DIR/cmd/last-minute_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/last-minute_gen_test.go: `buf.Reset()`
$DIR/cmd/last-minute_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/last-minute_gen_test.go: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/last-minute_gen_test.go: `.MarshalMsg(nil)`
$DIR/cmd/last-minute_gen_test.go: `.UnmarshalMsg(bts)`
$DIR/cmd/last-minute_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/last-minute_gen_test.go: `.Msgsize()`
$DIR/cmd/last-minute_gen_test.go: `.Len()`
$DIR/cmd/last-minute_gen_test.go: `.Decode(&buf, &vn)`
$DIR/cmd/last-minute_gen_test.go: `.Reset()`
$DIR/cmd/last-minute_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/last-minute_gen_test.go: `.MarshalMsg(nil)`
$DIR/cmd/last-minute_gen_test.go: `.UnmarshalMsg(bts)`
$DIR/cmd/last-minute_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/last-minute_gen_test.go: `.Msgsize()`
$DIR/cmd/last-minute_gen_test.go: `.Len()`
$DIR/cmd/last-minute_gen_test.go: `.Decode(&buf, &vn)`
$DIR/cmd/last-minute_gen_test.go: `.Reset()`
$DIR/cmd/last-minute_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/last-minute_gen_test.go: `.MarshalMsg(nil)`
$DIR/cmd/last-minute_gen_test.go: `.UnmarshalMsg(bts)`
$DIR/cmd/last-minute_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/last-minute_gen_test.go: `.Msgsize()`
$DIR/cmd/last-minute_gen_test.go: `.Len()`
$DIR/cmd/last-minute_gen_test.go: `.Decode(&buf, &vn)`
$DIR/cmd/last-minute_gen_test.go: `.Reset()`
$DIR/cmd/last-minute_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/local-locker_gen_test.go: `left, err = msgp.Skip(bts)`
$DIR/cmd/local-locker_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/local-locker_gen_test.go: `buf.Reset()`
$DIR/cmd/local-locker_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/local-locker_gen_test.go: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/local-locker_gen_test.go: `left, err = msgp.Skip(bts)`
$DIR/cmd/local-locker_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/local-locker_gen_test.go: `buf.Reset()`
$DIR/cmd/local-locker_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/local-locker_gen_test.go: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/local-locker_gen_test.go: `left, err = msgp.Skip(bts)`
$DIR/cmd/local-locker_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/local-locker_gen_test.go: `buf.Reset()`
$DIR/cmd/local-locker_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/local-locker_gen_test.go: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/local-locker_gen_test.go: `.MarshalMsg(nil)`
$DIR/cmd/local-locker_gen_test.go: `.UnmarshalMsg(bts)`
$DIR/cmd/local-locker_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/local-locker_gen_test.go: `.Msgsize()`
$DIR/cmd/local-locker_gen_test.go: `.Len()`
$DIR/cmd/local-locker_gen_test.go: `.Decode(&buf, &vn)`
$DIR/cmd/local-locker_gen_test.go: `.Reset()`
$DIR/cmd/local-locker_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/local-locker_gen_test.go: `.MarshalMsg(nil)`
$DIR/cmd/local-locker_gen_test.go: `.UnmarshalMsg(bts)`
$DIR/cmd/local-locker_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/local-locker_gen_test.go: `.Msgsize()`
$DIR/cmd/local-locker_gen_test.go: `.Len()`
$DIR/cmd/local-locker_gen_test.go: `.Decode(&buf, &vn)`
$DIR/cmd/local-locker_gen_test.go: `.Reset()`
$DIR/cmd/local-locker_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/local-locker_gen_test.go: `.MarshalMsg(nil)`
$DIR/cmd/local-locker_gen_test.go: `.UnmarshalMsg(bts)`
$DIR/cmd/local-locker_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/local-locker_gen_test.go: `.Msgsize()`
$DIR/cmd/local-locker_gen_test.go: `.Len()`
$DIR/cmd/local-locker_gen_test.go: `.Decode(&buf, &vn)`
$DIR/cmd/local-locker_gen_test.go: `.Reset()`
$DIR/cmd/local-locker_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/local-locker_test.go: `wResources[i] = arg.Resources[0]`
$DIR/cmd/local-locker_test.go: `ok, err = l.RLock(ctx, arg)`
$DIR/cmd/local-locker_test.go: `rResources[i] = arg.Resources[0]`
$DIR/cmd/local-locker_test.go: `l.expireOldLocks(time.Hour)`
$DIR/cmd/local-locker_test.go: `l.expireOldLocks(-time.Minute)`
$DIR/cmd/local-locker_test.go: `names[j] = mustGetUUID()`
$DIR/cmd/local-locker_test.go: `wResources[i] = names`
$DIR/cmd/local-locker_test.go: `wUIDs[i] = uid`
$DIR/cmd/local-locker_test.go: `rUIDs = append(rUIDs, uid)`
$DIR/cmd/local-locker_test.go: `uid = mustGetUUID()`
$DIR/cmd/local-locker_test.go: `arg.UID = uid`
$DIR/cmd/local-locker_test.go: `ok, err = l.RLock(ctx, arg)`
$DIR/cmd/local-locker_test.go: `rResources[i] = name`
$DIR/cmd/local-locker_test.go: `rUIDs = append(rUIDs, uid)`
$DIR/cmd/local-locker_test.go: `t.Run(fmt.Sprintf("%d-locks", locks), func(t *testing.T) {
			// Number of readers per lock...
			for _, readers := range []int{1, 10, 100} {
				if locks > 1000 && readers > 1 {
					continue
				}
				if testing.Short() && readers > 10 {
					continue
				}
				t.Run(fmt.Sprintf("%d-read", readers), func(t *testing.T) {
					l := newLocker()
					for i := 0; i < locks; i++ {
						var tmp [16]byte
						rng.Read(tmp[:])
						res := []string{hex.EncodeToString(tmp[:])}

						for i := 0; i < readers; i++ {
							rng.Read(tmp[:])
							ok, err := l.RLock(context.Background(), dsync.LockArgs{
								UID:       uuid.NewString(),
								Resources: res,
								Source:    hex.EncodeToString(tmp[:8]),
								Owner:     hex.EncodeToString(tmp[8:]),
								Quorum:    0,
							})
							if !ok || err != nil {
								t.Fatal("failed:", err, ok)
							}
						}
					}
					start := time.Now()
					l.expireOldLocks(time.Hour)
					t.Logf("Scan Took: %v. Left: %d/%d", time.Since(start).Round(time.Millisecond), len(l.lockUID), len(l.lockMap))
					if len(l.lockMap) != locks {
						t.Fatalf("objects deleted, want %d != got %d", locks, len(l.lockMap))
					}
					if len(l.lockUID) != locks*readers {
						t.Fatalf("objects deleted, want %d != got %d", locks*readers, len(l.lockUID))
					}

					// Expire 50%
					expired := time.Now().Add(-time.Hour * 2)
					for _, v := range l.lockMap {
						for i := range v {
							if rng.Intn(2) == 0 {
								v[i].TimeLastRefresh = expired
							}
						}
					}
					start = time.Now()
					l.expireOldLocks(time.Hour)
					t.Logf("Expire 50%% took: %v. Left: %d/%d", time.Since(start).Round(time.Millisecond), len(l.lockUID), len(l.lockMap))

					if len(l.lockUID) == locks*readers {
						t.Fatalf("objects uids all remain, unlikely")
					}
					if len(l.lockMap) == 0 {
						t.Fatalf("objects all deleted, 0 remains")
					}
					if len(l.lockUID) == 0 {
						t.Fatalf("objects uids all deleted, 0 remains")
					}

					start = time.Now()
					l.expireOldLocks(-time.Minute)
					t.Logf("Expire rest took: %v. Left: %d/%d", time.Since(start).Round(time.Millisecond), len(l.lockUID), len(l.lockMap))

					if len(l.lockMap) != 0 {
						t.Fatalf("objects not deleted, want %d != got %d", 0, len(l.lockMap))
					}
					if len(l.lockUID) != 0 {
						t.Fatalf("objects not deleted, want %d != got %d", 0, len(l.lockUID))
					}
				})
			}
		})`
$DIR/cmd/local-locker_test.go: `t.Run(fmt.Sprintf("%d-read", readers), func(t *testing.T) {
					l := newLocker()
					for i := 0; i < locks; i++ {
						var tmp [16]byte
						rng.Read(tmp[:])
						res := []string{hex.EncodeToString(tmp[:])}

						for i := 0; i < readers; i++ {
							rng.Read(tmp[:])
							ok, err := l.RLock(context.Background(), dsync.LockArgs{
								UID:       uuid.NewString(),
								Resources: res,
								Source:    hex.EncodeToString(tmp[:8]),
								Owner:     hex.EncodeToString(tmp[8:]),
								Quorum:    0,
							})
							if !ok || err != nil {
								t.Fatal("failed:", err, ok)
							}
						}
					}
					start := time.Now()
					l.expireOldLocks(time.Hour)
					t.Logf("Scan Took: %v. Left: %d/%d", time.Since(start).Round(time.Millisecond), len(l.lockUID), len(l.lockMap))
					if len(l.lockMap) != locks {
						t.Fatalf("objects deleted, want %d != got %d", locks, len(l.lockMap))
					}
					if len(l.lockUID) != locks*readers {
						t.Fatalf("objects deleted, want %d != got %d", locks*readers, len(l.lockUID))
					}

					// Expire 50%
					expired := time.Now().Add(-time.Hour * 2)
					for _, v := range l.lockMap {
						for i := range v {
							if rng.Intn(2) == 0 {
								v[i].TimeLastRefresh = expired
							}
						}
					}
					start = time.Now()
					l.expireOldLocks(time.Hour)
					t.Logf("Expire 50%% took: %v. Left: %d/%d", time.Since(start).Round(time.Millisecond), len(l.lockUID), len(l.lockMap))

					if len(l.lockUID) == locks*readers {
						t.Fatalf("objects uids all remain, unlikely")
					}
					if len(l.lockMap) == 0 {
						t.Fatalf("objects all deleted, 0 remains")
					}
					if len(l.lockUID) == 0 {
						t.Fatalf("objects uids all deleted, 0 remains")
					}

					start = time.Now()
					l.expireOldLocks(-time.Minute)
					t.Logf("Expire rest took: %v. Left: %d/%d", time.Since(start).Round(time.Millisecond), len(l.lockUID), len(l.lockMap))

					if len(l.lockMap) != 0 {
						t.Fatalf("objects not deleted, want %d != got %d", 0, len(l.lockMap))
					}
					if len(l.lockUID) != 0 {
						t.Fatalf("objects not deleted, want %d != got %d", 0, len(l.lockUID))
					}
				})`
$DIR/cmd/local-locker_test.go: `rng.Read(tmp[:])`
$DIR/cmd/local-locker_test.go: `rng.Read(tmp[:])`
$DIR/cmd/local-locker_test.go: `l.expireOldLocks(time.Hour)`
$DIR/cmd/local-locker_test.go: `v[i].TimeLastRefresh = expired`
$DIR/cmd/local-locker_test.go: `start = time.Now()`
$DIR/cmd/local-locker_test.go: `l.expireOldLocks(time.Hour)`
$DIR/cmd/local-locker_test.go: `start = time.Now()`
$DIR/cmd/local-locker_test.go: `l.expireOldLocks(-time.Minute)`
$DIR/cmd/local-locker_test.go: `t.Run(fmt.Sprintf("%d-locks", locks), func(t *testing.T) {
			// Number of readers per lock...
			for _, readers := range []int{1, 10, 100} {
				if locks > 1000 && readers > 1 {
					continue
				}
				if testing.Short() && readers > 10 {
					continue
				}
				t.Run(fmt.Sprintf("%d-read", readers), func(t *testing.T) {
					l := newLocker()
					for i := 0; i < locks; i++ {
						var tmp [16]byte
						rng.Read(tmp[:])
						res := []string{hex.EncodeToString(tmp[:])}

						for i := 0; i < readers; i++ {
							rng.Read(tmp[:])
							ok, err := l.RLock(context.Background(), dsync.LockArgs{
								UID:       uuid.NewString(),
								Resources: res,
								Source:    hex.EncodeToString(tmp[:8]),
								Owner:     hex.EncodeToString(tmp[8:]),
								Quorum:    0,
							})
							if !ok || err != nil {
								t.Fatal("failed:", err, ok)
							}
						}
					}

					// Expire 50%
					toUnLock := make([]dsync.LockArgs, 0, locks*readers)
					for k, v := range l.lockMap {
						for _, lock := range v {
							if rng.Intn(2) == 0 {
								toUnLock = append(toUnLock, dsync.LockArgs{Resources: []string{k}, UID: lock.UID})
							}
						}
					}
					start := time.Now()
					for _, lock := range toUnLock {
						ok, err := l.ForceUnlock(context.Background(), lock)
						if err != nil || !ok {
							t.Fatal(err)
						}
					}
					t.Logf("Expire 50%% took: %v. Left: %d/%d", time.Since(start).Round(time.Millisecond), len(l.lockUID), len(l.lockMap))

					if len(l.lockUID) == locks*readers {
						t.Fatalf("objects uids all remain, unlikely")
					}
					if len(l.lockMap) == 0 && locks > 10 {
						t.Fatalf("objects all deleted, 0 remains")
					}
					if len(l.lockUID) != locks*readers-len(toUnLock) {
						t.Fatalf("want %d objects uids all deleted, %d remains", len(l.lockUID), locks*readers-len(toUnLock))
					}

					toUnLock = toUnLock[:0]
					for k, v := range l.lockMap {
						for _, lock := range v {
							toUnLock = append(toUnLock, dsync.LockArgs{Resources: []string{k}, UID: lock.UID, Owner: lock.Owner})
						}
					}
					start = time.Now()
					for _, lock := range toUnLock {
						ok, err := l.RUnlock(context.TODO(), lock)
						if err != nil || !ok {
							t.Fatal(err)
						}
					}
					t.Logf("Expire rest took: %v. Left: %d/%d", time.Since(start).Round(time.Millisecond), len(l.lockUID), len(l.lockMap))

					if len(l.lockMap) != 0 {
						t.Fatalf("objects not deleted, want %d != got %d", 0, len(l.lockMap))
					}
					if len(l.lockUID) != 0 {
						t.Fatalf("objects not deleted, want %d != got %d", 0, len(l.lockUID))
					}
				})
			}
		})`
$DIR/cmd/local-locker_test.go: `t.Run(fmt.Sprintf("%d-read", readers), func(t *testing.T) {
					l := newLocker()
					for i := 0; i < locks; i++ {
						var tmp [16]byte
						rng.Read(tmp[:])
						res := []string{hex.EncodeToString(tmp[:])}

						for i := 0; i < readers; i++ {
							rng.Read(tmp[:])
							ok, err := l.RLock(context.Background(), dsync.LockArgs{
								UID:       uuid.NewString(),
								Resources: res,
								Source:    hex.EncodeToString(tmp[:8]),
								Owner:     hex.EncodeToString(tmp[8:]),
								Quorum:    0,
							})
							if !ok || err != nil {
								t.Fatal("failed:", err, ok)
							}
						}
					}

					// Expire 50%
					toUnLock := make([]dsync.LockArgs, 0, locks*readers)
					for k, v := range l.lockMap {
						for _, lock := range v {
							if rng.Intn(2) == 0 {
								toUnLock = append(toUnLock, dsync.LockArgs{Resources: []string{k}, UID: lock.UID})
							}
						}
					}
					start := time.Now()
					for _, lock := range toUnLock {
						ok, err := l.ForceUnlock(context.Background(), lock)
						if err != nil || !ok {
							t.Fatal(err)
						}
					}
					t.Logf("Expire 50%% took: %v. Left: %d/%d", time.Since(start).Round(time.Millisecond), len(l.lockUID), len(l.lockMap))

					if len(l.lockUID) == locks*readers {
						t.Fatalf("objects uids all remain, unlikely")
					}
					if len(l.lockMap) == 0 && locks > 10 {
						t.Fatalf("objects all deleted, 0 remains")
					}
					if len(l.lockUID) != locks*readers-len(toUnLock) {
						t.Fatalf("want %d objects uids all deleted, %d remains", len(l.lockUID), locks*readers-len(toUnLock))
					}

					toUnLock = toUnLock[:0]
					for k, v := range l.lockMap {
						for _, lock := range v {
							toUnLock = append(toUnLock, dsync.LockArgs{Resources: []string{k}, UID: lock.UID, Owner: lock.Owner})
						}
					}
					start = time.Now()
					for _, lock := range toUnLock {
						ok, err := l.RUnlock(context.TODO(), lock)
						if err != nil || !ok {
							t.Fatal(err)
						}
					}
					t.Logf("Expire rest took: %v. Left: %d/%d", time.Since(start).Round(time.Millisecond), len(l.lockUID), len(l.lockMap))

					if len(l.lockMap) != 0 {
						t.Fatalf("objects not deleted, want %d != got %d", 0, len(l.lockMap))
					}
					if len(l.lockUID) != 0 {
						t.Fatalf("objects not deleted, want %d != got %d", 0, len(l.lockUID))
					}
				})`
$DIR/cmd/local-locker_test.go: `rng.Read(tmp[:])`
$DIR/cmd/local-locker_test.go: `rng.Read(tmp[:])`
$DIR/cmd/local-locker_test.go: `toUnLock = append(toUnLock, dsync.LockArgs{Resources: []string{k}, UID: lock.UID})`
$DIR/cmd/local-locker_test.go: `toUnLock = toUnLock[:0]`
$DIR/cmd/local-locker_test.go: `toUnLock = append(toUnLock, dsync.LockArgs{Resources: []string{k}, UID: lock.UID, Owner: lock.Owner})`
$DIR/cmd/local-locker_test.go: `start = time.Now()`
$DIR/cmd/local-locker_test.go: `.Background()`
$DIR/cmd/local-locker_test.go: `.Name()`
$DIR/cmd/local-locker_test.go: `.Lock(ctx, arg)`
$DIR/cmd/local-locker_test.go: `.Name()`
$DIR/cmd/local-locker_test.go: `.RLock(ctx, arg)`
$DIR/cmd/local-locker_test.go: `.RLock(ctx, arg)`
$DIR/cmd/local-locker_test.go: `.expireOldLocks(time.Hour)`
$DIR/cmd/local-locker_test.go: `.expireOldLocks(-time.Minute)`
$DIR/cmd/local-locker_test.go: `.Background()`
$DIR/cmd/local-locker_test.go: `.Name()`
$DIR/cmd/local-locker_test.go: `.Lock(ctx, arg)`
$DIR/cmd/local-locker_test.go: `.Name()`
$DIR/cmd/local-locker_test.go: `.RLock(ctx, arg)`
$DIR/cmd/local-locker_test.go: `.RLock(ctx, arg)`
$DIR/cmd/local-locker_test.go: `.Name()`
$DIR/cmd/local-locker_test.go: `.RUnlock(ctx, arg)`
$DIR/cmd/local-locker_test.go: `.RUnlock(ctx, arg)`
$DIR/cmd/local-locker_test.go: `.Unlock(ctx, arg)`
$DIR/cmd/local-locker_test.go: `.New(rand.NewSource(0))`
$DIR/cmd/local-locker_test.go: `.NewSource(0)`
$DIR/cmd/local-locker_test.go: `.Short()`
$DIR/cmd/local-locker_test.go: `.Run(fmt.Sprintf("%d-locks", locks), func(t *testing.T) {
			// Number of readers per lock...
			for _, readers := range []int{1, 10, 100} {
				if locks > 1000 && readers > 1 {
					continue
				}
				if testing.Short() && readers > 10 {
					continue
				}
				t.Run(fmt.Sprintf("%d-read", readers), func(t *testing.T) {
					l := newLocker()
					for i := 0; i < locks; i++ {
						var tmp [16]byte
						rng.Read(tmp[:])
						res := []string{hex.EncodeToString(tmp[:])}

						for i := 0; i < readers; i++ {
							rng.Read(tmp[:])
							ok, err := l.RLock(context.Background(), dsync.LockArgs{
								UID:       uuid.NewString(),
								Resources: res,
								Source:    hex.EncodeToString(tmp[:8]),
								Owner:     hex.EncodeToString(tmp[8:]),
								Quorum:    0,
							})
							if !ok || err != nil {
								t.Fatal("failed:", err, ok)
							}
						}
					}
					start := time.Now()
					l.expireOldLocks(time.Hour)
					t.Logf("Scan Took: %v. Left: %d/%d", time.Since(start).Round(time.Millisecond), len(l.lockUID), len(l.lockMap))
					if len(l.lockMap) != locks {
						t.Fatalf("objects deleted, want %d != got %d", locks, len(l.lockMap))
					}
					if len(l.lockUID) != locks*readers {
						t.Fatalf("objects deleted, want %d != got %d", locks*readers, len(l.lockUID))
					}

					// Expire 50%
					expired := time.Now().Add(-time.Hour * 2)
					for _, v := range l.lockMap {
						for i := range v {
							if rng.Intn(2) == 0 {
								v[i].TimeLastRefresh = expired
							}
						}
					}
					start = time.Now()
					l.expireOldLocks(time.Hour)
					t.Logf("Expire 50%% took: %v. Left: %d/%d", time.Since(start).Round(time.Millisecond), len(l.lockUID), len(l.lockMap))

					if len(l.lockUID) == locks*readers {
						t.Fatalf("objects uids all remain, unlikely")
					}
					if len(l.lockMap) == 0 {
						t.Fatalf("objects all deleted, 0 remains")
					}
					if len(l.lockUID) == 0 {
						t.Fatalf("objects uids all deleted, 0 remains")
					}

					start = time.Now()
					l.expireOldLocks(-time.Minute)
					t.Logf("Expire rest took: %v. Left: %d/%d", time.Since(start).Round(time.Millisecond), len(l.lockUID), len(l.lockMap))

					if len(l.lockMap) != 0 {
						t.Fatalf("objects not deleted, want %d != got %d", 0, len(l.lockMap))
					}
					if len(l.lockUID) != 0 {
						t.Fatalf("objects not deleted, want %d != got %d", 0, len(l.lockUID))
					}
				})
			}
		})`
$DIR/cmd/local-locker_test.go: `.Sprintf("%d-locks", locks)`
$DIR/cmd/local-locker_test.go: `.Short()`
$DIR/cmd/local-locker_test.go: `.Run(fmt.Sprintf("%d-read", readers), func(t *testing.T) {
					l := newLocker()
					for i := 0; i < locks; i++ {
						var tmp [16]byte
						rng.Read(tmp[:])
						res := []string{hex.EncodeToString(tmp[:])}

						for i := 0; i < readers; i++ {
							rng.Read(tmp[:])
							ok, err := l.RLock(context.Background(), dsync.LockArgs{
								UID:       uuid.NewString(),
								Resources: res,
								Source:    hex.EncodeToString(tmp[:8]),
								Owner:     hex.EncodeToString(tmp[8:]),
								Quorum:    0,
							})
							if !ok || err != nil {
								t.Fatal("failed:", err, ok)
							}
						}
					}
					start := time.Now()
					l.expireOldLocks(time.Hour)
					t.Logf("Scan Took: %v. Left: %d/%d", time.Since(start).Round(time.Millisecond), len(l.lockUID), len(l.lockMap))
					if len(l.lockMap) != locks {
						t.Fatalf("objects deleted, want %d != got %d", locks, len(l.lockMap))
					}
					if len(l.lockUID) != locks*readers {
						t.Fatalf("objects deleted, want %d != got %d", locks*readers, len(l.lockUID))
					}

					// Expire 50%
					expired := time.Now().Add(-time.Hour * 2)
					for _, v := range l.lockMap {
						for i := range v {
							if rng.Intn(2) == 0 {
								v[i].TimeLastRefresh = expired
							}
						}
					}
					start = time.Now()
					l.expireOldLocks(time.Hour)
					t.Logf("Expire 50%% took: %v. Left: %d/%d", time.Since(start).Round(time.Millisecond), len(l.lockUID), len(l.lockMap))

					if len(l.lockUID) == locks*readers {
						t.Fatalf("objects uids all remain, unlikely")
					}
					if len(l.lockMap) == 0 {
						t.Fatalf("objects all deleted, 0 remains")
					}
					if len(l.lockUID) == 0 {
						t.Fatalf("objects uids all deleted, 0 remains")
					}

					start = time.Now()
					l.expireOldLocks(-time.Minute)
					t.Logf("Expire rest took: %v. Left: %d/%d", time.Since(start).Round(time.Millisecond), len(l.lockUID), len(l.lockMap))

					if len(l.lockMap) != 0 {
						t.Fatalf("objects not deleted, want %d != got %d", 0, len(l.lockMap))
					}
					if len(l.lockUID) != 0 {
						t.Fatalf("objects not deleted, want %d != got %d", 0, len(l.lockUID))
					}
				})`
$DIR/cmd/local-locker_test.go: `.Sprintf("%d-read", readers)`
$DIR/cmd/local-locker_test.go: `.Read(tmp[:])`
$DIR/cmd/local-locker_test.go: `.EncodeToString(tmp[:])`
$DIR/cmd/local-locker_test.go: `.Read(tmp[:])`
$DIR/cmd/local-locker_test.go: `.RLock(context.Background(), dsync.LockArgs{
								UID:       uuid.NewString(),
								Resources: res,
								Source:    hex.EncodeToString(tmp[:8]),
								Owner:     hex.EncodeToString(tmp[8:]),
								Quorum:    0,
							})`
$DIR/cmd/local-locker_test.go: `.Background()`
$DIR/cmd/local-locker_test.go: `.NewString()`
$DIR/cmd/local-locker_test.go: `.EncodeToString(tmp[:8])`
$DIR/cmd/local-locker_test.go: `.EncodeToString(tmp[8:])`
$DIR/cmd/local-locker_test.go: `.Now()`
$DIR/cmd/local-locker_test.go: `.expireOldLocks(time.Hour)`
$DIR/cmd/local-locker_test.go: `.Now()`
$DIR/cmd/local-locker_test.go: `.Add(-time.Hour * 2)`
$DIR/cmd/local-locker_test.go: `.Intn(2)`
$DIR/cmd/local-locker_test.go: `.Now()`
$DIR/cmd/local-locker_test.go: `.expireOldLocks(time.Hour)`
$DIR/cmd/local-locker_test.go: `.Now()`
$DIR/cmd/local-locker_test.go: `.expireOldLocks(-time.Minute)`
$DIR/cmd/local-locker_test.go: `.New(rand.NewSource(0))`
$DIR/cmd/local-locker_test.go: `.NewSource(0)`
$DIR/cmd/local-locker_test.go: `.Short()`
$DIR/cmd/local-locker_test.go: `.Run(fmt.Sprintf("%d-locks", locks), func(t *testing.T) {
			// Number of readers per lock...
			for _, readers := range []int{1, 10, 100} {
				if locks > 1000 && readers > 1 {
					continue
				}
				if testing.Short() && readers > 10 {
					continue
				}
				t.Run(fmt.Sprintf("%d-read", readers), func(t *testing.T) {
					l := newLocker()
					for i := 0; i < locks; i++ {
						var tmp [16]byte
						rng.Read(tmp[:])
						res := []string{hex.EncodeToString(tmp[:])}

						for i := 0; i < readers; i++ {
							rng.Read(tmp[:])
							ok, err := l.RLock(context.Background(), dsync.LockArgs{
								UID:       uuid.NewString(),
								Resources: res,
								Source:    hex.EncodeToString(tmp[:8]),
								Owner:     hex.EncodeToString(tmp[8:]),
								Quorum:    0,
							})
							if !ok || err != nil {
								t.Fatal("failed:", err, ok)
							}
						}
					}

					// Expire 50%
					toUnLock := make([]dsync.LockArgs, 0, locks*readers)
					for k, v := range l.lockMap {
						for _, lock := range v {
							if rng.Intn(2) == 0 {
								toUnLock = append(toUnLock, dsync.LockArgs{Resources: []string{k}, UID: lock.UID})
							}
						}
					}
					start := time.Now()
					for _, lock := range toUnLock {
						ok, err := l.ForceUnlock(context.Background(), lock)
						if err != nil || !ok {
							t.Fatal(err)
						}
					}
					t.Logf("Expire 50%% took: %v. Left: %d/%d", time.Since(start).Round(time.Millisecond), len(l.lockUID), len(l.lockMap))

					if len(l.lockUID) == locks*readers {
						t.Fatalf("objects uids all remain, unlikely")
					}
					if len(l.lockMap) == 0 && locks > 10 {
						t.Fatalf("objects all deleted, 0 remains")
					}
					if len(l.lockUID) != locks*readers-len(toUnLock) {
						t.Fatalf("want %d objects uids all deleted, %d remains", len(l.lockUID), locks*readers-len(toUnLock))
					}

					toUnLock = toUnLock[:0]
					for k, v := range l.lockMap {
						for _, lock := range v {
							toUnLock = append(toUnLock, dsync.LockArgs{Resources: []string{k}, UID: lock.UID, Owner: lock.Owner})
						}
					}
					start = time.Now()
					for _, lock := range toUnLock {
						ok, err := l.RUnlock(context.TODO(), lock)
						if err != nil || !ok {
							t.Fatal(err)
						}
					}
					t.Logf("Expire rest took: %v. Left: %d/%d", time.Since(start).Round(time.Millisecond), len(l.lockUID), len(l.lockMap))

					if len(l.lockMap) != 0 {
						t.Fatalf("objects not deleted, want %d != got %d", 0, len(l.lockMap))
					}
					if len(l.lockUID) != 0 {
						t.Fatalf("objects not deleted, want %d != got %d", 0, len(l.lockUID))
					}
				})
			}
		})`
$DIR/cmd/local-locker_test.go: `.Sprintf("%d-locks", locks)`
$DIR/cmd/local-locker_test.go: `.Short()`
$DIR/cmd/local-locker_test.go: `.Run(fmt.Sprintf("%d-read", readers), func(t *testing.T) {
					l := newLocker()
					for i := 0; i < locks; i++ {
						var tmp [16]byte
						rng.Read(tmp[:])
						res := []string{hex.EncodeToString(tmp[:])}

						for i := 0; i < readers; i++ {
							rng.Read(tmp[:])
							ok, err := l.RLock(context.Background(), dsync.LockArgs{
								UID:       uuid.NewString(),
								Resources: res,
								Source:    hex.EncodeToString(tmp[:8]),
								Owner:     hex.EncodeToString(tmp[8:]),
								Quorum:    0,
							})
							if !ok || err != nil {
								t.Fatal("failed:", err, ok)
							}
						}
					}

					// Expire 50%
					toUnLock := make([]dsync.LockArgs, 0, locks*readers)
					for k, v := range l.lockMap {
						for _, lock := range v {
							if rng.Intn(2) == 0 {
								toUnLock = append(toUnLock, dsync.LockArgs{Resources: []string{k}, UID: lock.UID})
							}
						}
					}
					start := time.Now()
					for _, lock := range toUnLock {
						ok, err := l.ForceUnlock(context.Background(), lock)
						if err != nil || !ok {
							t.Fatal(err)
						}
					}
					t.Logf("Expire 50%% took: %v. Left: %d/%d", time.Since(start).Round(time.Millisecond), len(l.lockUID), len(l.lockMap))

					if len(l.lockUID) == locks*readers {
						t.Fatalf("objects uids all remain, unlikely")
					}
					if len(l.lockMap) == 0 && locks > 10 {
						t.Fatalf("objects all deleted, 0 remains")
					}
					if len(l.lockUID) != locks*readers-len(toUnLock) {
						t.Fatalf("want %d objects uids all deleted, %d remains", len(l.lockUID), locks*readers-len(toUnLock))
					}

					toUnLock = toUnLock[:0]
					for k, v := range l.lockMap {
						for _, lock := range v {
							toUnLock = append(toUnLock, dsync.LockArgs{Resources: []string{k}, UID: lock.UID, Owner: lock.Owner})
						}
					}
					start = time.Now()
					for _, lock := range toUnLock {
						ok, err := l.RUnlock(context.TODO(), lock)
						if err != nil || !ok {
							t.Fatal(err)
						}
					}
					t.Logf("Expire rest took: %v. Left: %d/%d", time.Since(start).Round(time.Millisecond), len(l.lockUID), len(l.lockMap))

					if len(l.lockMap) != 0 {
						t.Fatalf("objects not deleted, want %d != got %d", 0, len(l.lockMap))
					}
					if len(l.lockUID) != 0 {
						t.Fatalf("objects not deleted, want %d != got %d", 0, len(l.lockUID))
					}
				})`
$DIR/cmd/local-locker_test.go: `.Sprintf("%d-read", readers)`
$DIR/cmd/local-locker_test.go: `.Read(tmp[:])`
$DIR/cmd/local-locker_test.go: `.EncodeToString(tmp[:])`
$DIR/cmd/local-locker_test.go: `.Read(tmp[:])`
$DIR/cmd/local-locker_test.go: `.RLock(context.Background(), dsync.LockArgs{
								UID:       uuid.NewString(),
								Resources: res,
								Source:    hex.EncodeToString(tmp[:8]),
								Owner:     hex.EncodeToString(tmp[8:]),
								Quorum:    0,
							})`
$DIR/cmd/local-locker_test.go: `.Background()`
$DIR/cmd/local-locker_test.go: `.NewString()`
$DIR/cmd/local-locker_test.go: `.EncodeToString(tmp[:8])`
$DIR/cmd/local-locker_test.go: `.EncodeToString(tmp[8:])`
$DIR/cmd/local-locker_test.go: `.Intn(2)`
$DIR/cmd/local-locker_test.go: `.Now()`
$DIR/cmd/local-locker_test.go: `.ForceUnlock(context.Background(), lock)`
$DIR/cmd/local-locker_test.go: `.Background()`
$DIR/cmd/local-locker_test.go: `.Now()`
$DIR/cmd/local-locker_test.go: `.RUnlock(context.TODO(), lock)`
$DIR/cmd/local-locker_test.go: `.TODO()`
$DIR/cmd/lock-rest-client_test.go: `endpointLocal.IsLocal = true`
$DIR/cmd/lock-rest-client_test.go: `err = initGlobalGrid(ctx, []PoolEndpoints{{Endpoints: Endpoints{endpoint, endpointLocal}}})`
$DIR/cmd/lock-rest-client_test.go: `_, err = lkClient.RLock(context.Background(), dsync.LockArgs{})`
$DIR/cmd/lock-rest-client_test.go: `_, err = lkClient.Lock(context.Background(), dsync.LockArgs{})`
$DIR/cmd/lock-rest-client_test.go: `_, err = lkClient.RUnlock(context.Background(), dsync.LockArgs{})`
$DIR/cmd/lock-rest-client_test.go: `_, err = lkClient.Unlock(context.Background(), dsync.LockArgs{})`
$DIR/cmd/lock-rest-client_test.go: `.WithCancel(context.Background())`
$DIR/cmd/lock-rest-client_test.go: `.Background()`
$DIR/cmd/lock-rest-client_test.go: `.IsOnline()`
$DIR/cmd/lock-rest-client_test.go: `.RLock(context.Background(), dsync.LockArgs{})`
$DIR/cmd/lock-rest-client_test.go: `.Background()`
$DIR/cmd/lock-rest-client_test.go: `.Lock(context.Background(), dsync.LockArgs{})`
$DIR/cmd/lock-rest-client_test.go: `.Background()`
$DIR/cmd/lock-rest-client_test.go: `.RUnlock(context.Background(), dsync.LockArgs{})`
$DIR/cmd/lock-rest-client_test.go: `.Background()`
$DIR/cmd/lock-rest-client_test.go: `.Unlock(context.Background(), dsync.LockArgs{})`
$DIR/cmd/lock-rest-client_test.go: `.Background()`
$DIR/cmd/lock-rest-server-common_test.go: `locker.ll.lockMap["name"] = []lockRequesterInfo{
		lockRequesterInfo1,
		lockRequesterInfo2,
	}`
$DIR/cmd/lock-rest-server-common_test.go: `.WithCancel(context.Background())`
$DIR/cmd/lock-rest-server-common_test.go: `.Background()`
$DIR/cmd/lock-rest-server-common_test.go: `.RemoveAll(testPath)`
$DIR/cmd/lock-rest-server-common_test.go: `.ll.removeEntry("name", dsync.LockArgs{
		Owner: "owner",
		UID:   "unknown-uid",
	}, &lri)`
$DIR/cmd/lock-rest-server-common_test.go: `.ll.removeEntry("name", dsync.LockArgs{
		Owner: "owner",
		UID:   "0123-4567",
	}, &lri)`
$DIR/cmd/lock-rest-server-common_test.go: `.DeepEqual(expectedLri, gotLri)`
$DIR/cmd/lock-rest-server-common_test.go: `.ll.removeEntry("name", dsync.LockArgs{
		Owner: "owner",
		UID:   "89ab-cdef",
	}, &lri)`
$DIR/cmd/lock-rest-server-common_test.go: `.DeepEqual(expectedLri, gotLri)`
$DIR/cmd/metacache-entries_test.go: `o[0], o[len(o)-1] = o[len(o)-1], o[0]`
$DIR/cmd/metacache-entries_test.go: `entries.forwardTo("src/compress/zlib/reader_test.go")`
$DIR/cmd/metacache-entries_test.go: `entries = org`
$DIR/cmd/metacache-entries_test.go: `entries.forwardTo("src/compress/zlib/reader_t")`
$DIR/cmd/metacache-entries_test.go: `got = entries.entries().names()`
$DIR/cmd/metacache-entries_test.go: `be[i].metadata = []byte("something-else")`
$DIR/cmd/metacache-entries_test.go: `a.merge(b, -1)`
$DIR/cmd/metacache-entries_test.go: `sort.Strings(want)`
$DIR/cmd/metacache-entries_test.go: `data.filterObjectsOnly()`
$DIR/cmd/metacache-entries_test.go: `data.filterPrefixesOnly()`
$DIR/cmd/metacache-entries_test.go: `data.filterRecursiveEntries("src/compress/bzip2/", slashSeparator)`
$DIR/cmd/metacache-entries_test.go: `data.filterRecursiveEntries("", slashSeparator)`
$DIR/cmd/metacache-entries_test.go: `data.filterRecursiveEntries("", "bzip2/")`
$DIR/cmd/metacache-entries_test.go: `data.filterPrefix("src/compress/bzip2/")`
$DIR/cmd/metacache-entries_test.go: `t.Run(tt.testName, func(t *testing.T) {
			e := metaCacheEntry{
				name: tt.entry,
			}
			if got := e.isInDir(tt.dir, tt.sep); got != tt.want {
				t.Errorf("isInDir() = %v, want %v", got, tt.want)
			}
		})`
$DIR/cmd/metacache-entries_test.go: `xl.sortByModTime()`
$DIR/cmd/metacache-entries_test.go: `entry.metadata, err = xl.AppendTo(nil)`
$DIR/cmd/metacache-entries_test.go: `inputSerialized[i] = entry`
$DIR/cmd/metacache-entries_test.go: `t.Run(fmt.Sprintf("test-%d-%s-run-%d", testID, tt.name, i), func(t *testing.T) {
				if i > 0 {
					rng.Shuffle(len(tt.m), func(i, j int) {
						tt.m[i], tt.m[j] = tt.m[j], tt.m[i]
					})
				}
				gotSelected, gotOk := tt.m.resolve(&tt.r)
				if gotOk != tt.wantOk {
					t.Errorf("resolve() gotOk = %v, want %v", gotOk, tt.wantOk)
				}
				if gotSelected != nil {
					gotSelected.cached = nil
					gotSelected.reusable = false
				}
				if !reflect.DeepEqual(gotSelected, tt.wantSelected) {
					wantM, _ := tt.wantSelected.xlmeta()
					gotM, _ := gotSelected.xlmeta()
					t.Errorf("resolve() gotSelected = \n%#v, want \n%#v", *gotM, *wantM)
				}
			})`
$DIR/cmd/metacache-entries_test.go: `rng.Shuffle(len(tt.m), func(i, j int) {
						tt.m[i], tt.m[j] = tt.m[j], tt.m[i]
					})`
$DIR/cmd/metacache-entries_test.go: `tt.m[i], tt.m[j] = tt.m[j], tt.m[i]`
$DIR/cmd/metacache-entries_test.go: `gotSelected.cached = nil`
$DIR/cmd/metacache-entries_test.go: `gotSelected.reusable = false`
$DIR/cmd/metacache-entries_test.go: `.entries()`
$DIR/cmd/metacache-entries_test.go: `.isSorted()`
$DIR/cmd/metacache-entries_test.go: `.isSorted()`
$DIR/cmd/metacache-entries_test.go: `.sort()`
$DIR/cmd/metacache-entries_test.go: `.isSorted()`
$DIR/cmd/metacache-entries_test.go: `.entries()`
$DIR/cmd/metacache-entries_test.go: `.isSorted()`
$DIR/cmd/metacache-entries_test.go: `.forwardTo("src/compress/zlib/reader_test.go")`
$DIR/cmd/metacache-entries_test.go: `.entries()`
$DIR/cmd/metacache-entries_test.go: `.names()`
$DIR/cmd/metacache-entries_test.go: `.DeepEqual(got, want)`
$DIR/cmd/metacache-entries_test.go: `.forwardTo("src/compress/zlib/reader_t")`
$DIR/cmd/metacache-entries_test.go: `.entries()`
$DIR/cmd/metacache-entries_test.go: `.names()`
$DIR/cmd/metacache-entries_test.go: `.DeepEqual(got, want)`
$DIR/cmd/metacache-entries_test.go: `.shallowClone()`
$DIR/cmd/metacache-entries_test.go: `.shallowClone()`
$DIR/cmd/metacache-entries_test.go: `.entries()`
$DIR/cmd/metacache-entries_test.go: `.merge(b, -1)`
$DIR/cmd/metacache-entries_test.go: `.Strings(want)`
$DIR/cmd/metacache-entries_test.go: `.entries()`
$DIR/cmd/metacache-entries_test.go: `.names()`
$DIR/cmd/metacache-entries_test.go: `.filterObjectsOnly()`
$DIR/cmd/metacache-entries_test.go: `.entries()`
$DIR/cmd/metacache-entries_test.go: `.names()`
$DIR/cmd/metacache-entries_test.go: `.DeepEqual(want, got)`
$DIR/cmd/metacache-entries_test.go: `.filterPrefixesOnly()`
$DIR/cmd/metacache-entries_test.go: `.entries()`
$DIR/cmd/metacache-entries_test.go: `.names()`
$DIR/cmd/metacache-entries_test.go: `.DeepEqual(want, got)`
$DIR/cmd/metacache-entries_test.go: `.filterRecursiveEntries("src/compress/bzip2/", slashSeparator)`
$DIR/cmd/metacache-entries_test.go: `.entries()`
$DIR/cmd/metacache-entries_test.go: `.names()`
$DIR/cmd/metacache-entries_test.go: `.DeepEqual(want, got)`
$DIR/cmd/metacache-entries_test.go: `.filterRecursiveEntries("", slashSeparator)`
$DIR/cmd/metacache-entries_test.go: `.entries()`
$DIR/cmd/metacache-entries_test.go: `.names()`
$DIR/cmd/metacache-entries_test.go: `.DeepEqual(want, got)`
$DIR/cmd/metacache-entries_test.go: `.filterRecursiveEntries("", "bzip2/")`
$DIR/cmd/metacache-entries_test.go: `.entries()`
$DIR/cmd/metacache-entries_test.go: `.names()`
$DIR/cmd/metacache-entries_test.go: `.DeepEqual(want, got)`
$DIR/cmd/metacache-entries_test.go: `.filterPrefix("src/compress/bzip2/")`
$DIR/cmd/metacache-entries_test.go: `.entries()`
$DIR/cmd/metacache-entries_test.go: `.names()`
$DIR/cmd/metacache-entries_test.go: `.DeepEqual(want, got)`
$DIR/cmd/metacache-entries_test.go: `.Run(tt.testName, func(t *testing.T) {
			e := metaCacheEntry{
				name: tt.entry,
			}
			if got := e.isInDir(tt.dir, tt.sep); got != tt.want {
				t.Errorf("isInDir() = %v, want %v", got, tt.want)
			}
		})`
$DIR/cmd/metacache-entries_test.go: `.isInDir(tt.dir, tt.sep)`
$DIR/cmd/metacache-entries_test.go: `.Parse("2006/01/02", "2015/02/25")`
$DIR/cmd/metacache-entries_test.go: `.Add(30 * time.Minute)`
$DIR/cmd/metacache-entries_test.go: `.UnixNano()`
$DIR/cmd/metacache-entries_test.go: `.Add(15 * time.Minute)`
$DIR/cmd/metacache-entries_test.go: `.UnixNano()`
$DIR/cmd/metacache-entries_test.go: `.Add(60 * time.Minute)`
$DIR/cmd/metacache-entries_test.go: `.UnixNano()`
$DIR/cmd/metacache-entries_test.go: `.Add(30 * time.Minute)`
$DIR/cmd/metacache-entries_test.go: `.UnixNano()`
$DIR/cmd/metacache-entries_test.go: `.Add(60 * time.Minute)`
$DIR/cmd/metacache-entries_test.go: `.UnixNano()`
$DIR/cmd/metacache-entries_test.go: `.Add(60 * time.Minute)`
$DIR/cmd/metacache-entries_test.go: `.UnixNano()`
$DIR/cmd/metacache-entries_test.go: `.Add(90 * time.Minute)`
$DIR/cmd/metacache-entries_test.go: `.UnixNano()`
$DIR/cmd/metacache-entries_test.go: `.Add(90 * time.Minute)`
$DIR/cmd/metacache-entries_test.go: `.UnixNano()`
$DIR/cmd/metacache-entries_test.go: `.Add(60 * time.Minute)`
$DIR/cmd/metacache-entries_test.go: `.UnixNano()`
$DIR/cmd/metacache-entries_test.go: `.Add(60 * time.Minute)`
$DIR/cmd/metacache-entries_test.go: `.UnixNano()`
$DIR/cmd/metacache-entries_test.go: `.Add(30 * time.Minute)`
$DIR/cmd/metacache-entries_test.go: `.UnixNano()`
$DIR/cmd/metacache-entries_test.go: `.Add(90 * time.Minute)`
$DIR/cmd/metacache-entries_test.go: `.UnixNano()`
$DIR/cmd/metacache-entries_test.go: `.Add(90 * time.Minute)`
$DIR/cmd/metacache-entries_test.go: `.UnixNano()`
$DIR/cmd/metacache-entries_test.go: `.Add(15 * time.Minute)`
$DIR/cmd/metacache-entries_test.go: `.UnixNano()`
$DIR/cmd/metacache-entries_test.go: `.sortByModTime()`
$DIR/cmd/metacache-entries_test.go: `.AppendTo(nil)`
$DIR/cmd/metacache-entries_test.go: `.New(rand.NewSource(0))`
$DIR/cmd/metacache-entries_test.go: `.NewSource(0)`
$DIR/cmd/metacache-entries_test.go: `.Run(fmt.Sprintf("test-%d-%s-run-%d", testID, tt.name, i), func(t *testing.T) {
				if i > 0 {
					rng.Shuffle(len(tt.m), func(i, j int) {
						tt.m[i], tt.m[j] = tt.m[j], tt.m[i]
					})
				}
				gotSelected, gotOk := tt.m.resolve(&tt.r)
				if gotOk != tt.wantOk {
					t.Errorf("resolve() gotOk = %v, want %v", gotOk, tt.wantOk)
				}
				if gotSelected != nil {
					gotSelected.cached = nil
					gotSelected.reusable = false
				}
				if !reflect.DeepEqual(gotSelected, tt.wantSelected) {
					wantM, _ := tt.wantSelected.xlmeta()
					gotM, _ := gotSelected.xlmeta()
					t.Errorf("resolve() gotSelected = \n%#v, want \n%#v", *gotM, *wantM)
				}
			})`
$DIR/cmd/metacache-entries_test.go: `.Sprintf("test-%d-%s-run-%d", testID, tt.name, i)`
$DIR/cmd/metacache-entries_test.go: `.Shuffle(len(tt.m), func(i, j int) {
						tt.m[i], tt.m[j] = tt.m[j], tt.m[i]
					})`
$DIR/cmd/metacache-entries_test.go: `.m.resolve(&tt.r)`
$DIR/cmd/metacache-entries_test.go: `.DeepEqual(gotSelected, tt.wantSelected)`
$DIR/cmd/metacache-entries_test.go: `.wantSelected.xlmeta()`
$DIR/cmd/metacache-entries_test.go: `.xlmeta()`
$DIR/cmd/metacache-set_gen_test.go: `left, err = msgp.Skip(bts)`
$DIR/cmd/metacache-set_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/metacache-set_gen_test.go: `buf.Reset()`
$DIR/cmd/metacache-set_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/metacache-set_gen_test.go: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/metacache-set_gen_test.go: `.MarshalMsg(nil)`
$DIR/cmd/metacache-set_gen_test.go: `.UnmarshalMsg(bts)`
$DIR/cmd/metacache-set_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/metacache-set_gen_test.go: `.Msgsize()`
$DIR/cmd/metacache-set_gen_test.go: `.Len()`
$DIR/cmd/metacache-set_gen_test.go: `.Decode(&buf, &vn)`
$DIR/cmd/metacache-set_gen_test.go: `.Reset()`
$DIR/cmd/metacache-set_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/metacache-stream_test.go: `want = want[:0]`
$DIR/cmd/metacache-stream_test.go: `entries, err = r.readN(0, false, true, false, "")`
$DIR/cmd/metacache-stream_test.go: `r = loadMetacacheSample(t)`
$DIR/cmd/metacache-stream_test.go: `entries, err = r.readN(0, false, true, false, "")`
$DIR/cmd/metacache-stream_test.go: `entries, err = r.readN(5, false, true, false, "")`
$DIR/cmd/metacache-stream_test.go: `want = loadMetacacheSampleNames[:5]`
$DIR/cmd/metacache-stream_test.go: `noDirs = append(noDirs, entry.name)`
$DIR/cmd/metacache-stream_test.go: `want = noDirs`
$DIR/cmd/metacache-stream_test.go: `r = loadMetacacheSample(t)`
$DIR/cmd/metacache-stream_test.go: `entries, err = r.readN(-1, false, false, false, "")`
$DIR/cmd/metacache-stream_test.go: `want = want[:0]`
$DIR/cmd/metacache-stream_test.go: `entries, err = r.readN(0, false, false, false, "")`
$DIR/cmd/metacache-stream_test.go: `r = loadMetacacheSample(t)`
$DIR/cmd/metacache-stream_test.go: `entries, err = r.readN(0, false, false, false, "")`
$DIR/cmd/metacache-stream_test.go: `entries, err = r.readN(5, false, false, false, "")`
$DIR/cmd/metacache-stream_test.go: `want = noDirs[:5]`
$DIR/cmd/metacache-stream_test.go: `r = loadMetacacheSample(t)`
$DIR/cmd/metacache-stream_test.go: `entries, err = r.readN(-1, false, true, false, "src/nonexist")`
$DIR/cmd/metacache-stream_test.go: `want = loadMetacacheSampleNames[:0]`
$DIR/cmd/metacache-stream_test.go: `r = loadMetacacheSample(t)`
$DIR/cmd/metacache-stream_test.go: `entries, err = r.readN(-1, false, true, false, "src/a")`
$DIR/cmd/metacache-stream_test.go: `want = loadMetacacheSampleNames[:0]`
$DIR/cmd/metacache-stream_test.go: `r = loadMetacacheSample(t)`
$DIR/cmd/metacache-stream_test.go: `entries, err = r.readN(-1, false, true, false, "src/compress/zlib/e")`
$DIR/cmd/metacache-stream_test.go: `want = []string{"src/compress/zlib/example_test.go"}`
$DIR/cmd/metacache-stream_test.go: `i++`
$DIR/cmd/metacache-stream_test.go: `wg.Add(1)`
$DIR/cmd/metacache-stream_test.go: `readErr = r.readAll(context.Background(), objs)`
$DIR/cmd/metacache-stream_test.go: `wg.Done()`
$DIR/cmd/metacache-stream_test.go: `i++`
$DIR/cmd/metacache-stream_test.go: `wg.Wait()`
$DIR/cmd/metacache-stream_test.go: `r = loadMetacacheSample(t)`
$DIR/cmd/metacache-stream_test.go: `err = r.forwardTo("src/compress/zlib/reader_t")`
$DIR/cmd/metacache-stream_test.go: `names, err = r.readNames(-1)`
$DIR/cmd/metacache-stream_test.go: `err = w.Close()`
$DIR/cmd/metacache-stream_test.go: `r = newMetacacheReader(&buf)`
$DIR/cmd/metacache-stream_test.go: `err = r.skip(5)`
$DIR/cmd/metacache-stream_test.go: `names, err = r.readNames(5)`
$DIR/cmd/metacache-stream_test.go: `want = loadMetacacheSampleNames[10:15]`
$DIR/cmd/metacache-stream_test.go: `err = r.skip(len(loadMetacacheSampleNames))`
$DIR/cmd/metacache-stream_test.go: `.readNames(-1)`
$DIR/cmd/metacache-stream_test.go: `.DeepEqual(names, want)`
$DIR/cmd/metacache-stream_test.go: `.readN(-1, false, true, false, "")`
$DIR/cmd/metacache-stream_test.go: `.entries()`
$DIR/cmd/metacache-stream_test.go: `.len()`
$DIR/cmd/metacache-stream_test.go: `.readN(0, false, true, false, "")`
$DIR/cmd/metacache-stream_test.go: `.len()`
$DIR/cmd/metacache-stream_test.go: `.readN(0, false, true, false, "")`
$DIR/cmd/metacache-stream_test.go: `.len()`
$DIR/cmd/metacache-stream_test.go: `.readN(5, false, true, false, "")`
$DIR/cmd/metacache-stream_test.go: `.len()`
$DIR/cmd/metacache-stream_test.go: `.entries()`
$DIR/cmd/metacache-stream_test.go: `.readN(-1, false, true, false, "")`
$DIR/cmd/metacache-stream_test.go: `.entries()`
$DIR/cmd/metacache-stream_test.go: `.isDir()`
$DIR/cmd/metacache-stream_test.go: `.len()`
$DIR/cmd/metacache-stream_test.go: `.readN(-1, false, false, false, "")`
$DIR/cmd/metacache-stream_test.go: `.entries()`
$DIR/cmd/metacache-stream_test.go: `.len()`
$DIR/cmd/metacache-stream_test.go: `.readN(0, false, false, false, "")`
$DIR/cmd/metacache-stream_test.go: `.len()`
$DIR/cmd/metacache-stream_test.go: `.readN(0, false, false, false, "")`
$DIR/cmd/metacache-stream_test.go: `.len()`
$DIR/cmd/metacache-stream_test.go: `.readN(5, false, false, false, "")`
$DIR/cmd/metacache-stream_test.go: `.len()`
$DIR/cmd/metacache-stream_test.go: `.entries()`
$DIR/cmd/metacache-stream_test.go: `.readN(-1, false, true, false, "src/compress/bzip2/")`
$DIR/cmd/metacache-stream_test.go: `.entries()`
$DIR/cmd/metacache-stream_test.go: `.len()`
$DIR/cmd/metacache-stream_test.go: `.readN(-1, false, true, false, "src/nonexist")`
$DIR/cmd/metacache-stream_test.go: `.len()`
$DIR/cmd/metacache-stream_test.go: `.entries()`
$DIR/cmd/metacache-stream_test.go: `.readN(-1, false, true, false, "src/a")`
$DIR/cmd/metacache-stream_test.go: `.len()`
$DIR/cmd/metacache-stream_test.go: `.entries()`
$DIR/cmd/metacache-stream_test.go: `.readN(-1, false, true, false, "src/compress/zlib/e")`
$DIR/cmd/metacache-stream_test.go: `.len()`
$DIR/cmd/metacache-stream_test.go: `.entries()`
$DIR/cmd/metacache-stream_test.go: `.readFn(func(entry metaCacheEntry) bool {
		want := loadMetacacheSampleNames[i]
		if entry.name != want {
			t.Errorf("entry %d, want %q, got %q", i, want, entry.name)
		}
		i++
		return true
	})`
$DIR/cmd/metacache-stream_test.go: `.Add(1)`
$DIR/cmd/metacache-stream_test.go: `.readAll(context.Background(), objs)`
$DIR/cmd/metacache-stream_test.go: `.Background()`
$DIR/cmd/metacache-stream_test.go: `.Done()`
$DIR/cmd/metacache-stream_test.go: `.Wait()`
$DIR/cmd/metacache-stream_test.go: `.forwardTo("src/compress/zlib/reader_test.go")`
$DIR/cmd/metacache-stream_test.go: `.readNames(-1)`
$DIR/cmd/metacache-stream_test.go: `.DeepEqual(names, want)`
$DIR/cmd/metacache-stream_test.go: `.forwardTo("src/compress/zlib/reader_t")`
$DIR/cmd/metacache-stream_test.go: `.readNames(-1)`
$DIR/cmd/metacache-stream_test.go: `.DeepEqual(names, want)`
$DIR/cmd/metacache-stream_test.go: `.next()`
$DIR/cmd/metacache-stream_test.go: `.peek()`
$DIR/cmd/metacache-stream_test.go: `.next()`
$DIR/cmd/metacache-stream_test.go: `.readFn(func(object metaCacheEntry) bool {
		err := w.write(object)
		if err != nil {
			t.Fatal(err)
		}
		return true
	})`
$DIR/cmd/metacache-stream_test.go: `.write(object)`
$DIR/cmd/metacache-stream_test.go: `.readNames(-1)`
$DIR/cmd/metacache-stream_test.go: `.DeepEqual(names, want)`
$DIR/cmd/metacache-stream_test.go: `.readNames(5)`
$DIR/cmd/metacache-stream_test.go: `.DeepEqual(names, want)`
$DIR/cmd/metacache-stream_test.go: `.skip(5)`
$DIR/cmd/metacache-stream_test.go: `.readNames(5)`
$DIR/cmd/metacache-stream_test.go: `.DeepEqual(names, want)`
$DIR/cmd/metacache-stream_test.go: `.skip(len(loadMetacacheSampleNames))`
$DIR/cmd/metacache-walk_gen_test.go: `left, err = msgp.Skip(bts)`
$DIR/cmd/metacache-walk_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/metacache-walk_gen_test.go: `buf.Reset()`
$DIR/cmd/metacache-walk_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/metacache-walk_gen_test.go: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/metacache-walk_gen_test.go: `.MarshalMsg(nil)`
$DIR/cmd/metacache-walk_gen_test.go: `.UnmarshalMsg(bts)`
$DIR/cmd/metacache-walk_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/metacache-walk_gen_test.go: `.Msgsize()`
$DIR/cmd/metacache-walk_gen_test.go: `.Len()`
$DIR/cmd/metacache-walk_gen_test.go: `.Decode(&buf, &vn)`
$DIR/cmd/metacache-walk_gen_test.go: `.Reset()`
$DIR/cmd/metacache-walk_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/metacache_gen_test.go: `left, err = msgp.Skip(bts)`
$DIR/cmd/metacache_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/metacache_gen_test.go: `buf.Reset()`
$DIR/cmd/metacache_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/metacache_gen_test.go: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/metacache_gen_test.go: `.MarshalMsg(nil)`
$DIR/cmd/metacache_gen_test.go: `.UnmarshalMsg(bts)`
$DIR/cmd/metacache_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/metacache_gen_test.go: `.Msgsize()`
$DIR/cmd/metacache_gen_test.go: `.Len()`
$DIR/cmd/metacache_gen_test.go: `.Decode(&buf, &vn)`
$DIR/cmd/metacache_gen_test.go: `.Reset()`
$DIR/cmd/metacache_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/metacache_test.go: `t.Run(tt.name, func(t *testing.T) {
			if got := baseDirFromPrefix(tt.prefix); got != tt.want {
				t.Errorf("baseDirFromPrefix() = %v, want %v", got, tt.want)
			}
		})`
$DIR/cmd/metacache_test.go: `t.Run(tt.id, func(t *testing.T) {
			var want bool
			if i >= len(wantResults) {
				t.Logf("no expected result for test #%d", i)
			} else {
				want = wantResults[i]
			}

			got := tt.finished()
			if got != want {
				t.Errorf("#%d: want %v, got %v", i, want, got)
			}
		})`
$DIR/cmd/metacache_test.go: `want = wantResults[i]`
$DIR/cmd/metacache_test.go: `t.Run(tt.id, func(t *testing.T) {
			var want bool
			if i >= len(wantResults) {
				t.Logf("no expected result for test #%d", i)
			} else {
				want = wantResults[i]
			}

			got := tt.worthKeeping()
			if got != want {
				t.Errorf("#%d: want %v, got %v", i, want, got)
			}
		})`
$DIR/cmd/metacache_test.go: `want = wantResults[i]`
$DIR/cmd/metacache_test.go: `.Run(tt.name, func(t *testing.T) {
			if got := baseDirFromPrefix(tt.prefix); got != tt.want {
				t.Errorf("baseDirFromPrefix() = %v, want %v", got, tt.want)
			}
		})`
$DIR/cmd/metacache_test.go: `.Run(tt.id, func(t *testing.T) {
			var want bool
			if i >= len(wantResults) {
				t.Logf("no expected result for test #%d", i)
			} else {
				want = wantResults[i]
			}

			got := tt.finished()
			if got != want {
				t.Errorf("#%d: want %v, got %v", i, want, got)
			}
		})`
$DIR/cmd/metacache_test.go: `.finished()`
$DIR/cmd/metacache_test.go: `.Run(tt.id, func(t *testing.T) {
			var want bool
			if i >= len(wantResults) {
				t.Logf("no expected result for test #%d", i)
			} else {
				want = wantResults[i]
			}

			got := tt.worthKeeping()
			if got != want {
				t.Errorf("#%d: want %v, got %v", i, want, got)
			}
		})`
$DIR/cmd/metacache_test.go: `.worthKeeping()`
$DIR/cmd/metrics-v2_gen_test.go: `left, err = msgp.Skip(bts)`
$DIR/cmd/metrics-v2_gen_test.go: `left, err = msgp.Skip(bts)`
$DIR/cmd/metrics-v2_gen_test.go: `left, err = msgp.Skip(bts)`
$DIR/cmd/metrics-v2_gen_test.go: `left, err = msgp.Skip(bts)`
$DIR/cmd/metrics-v2_gen_test.go: `.MarshalMsg(nil)`
$DIR/cmd/metrics-v2_gen_test.go: `.UnmarshalMsg(bts)`
$DIR/cmd/metrics-v2_gen_test.go: `.MarshalMsg(nil)`
$DIR/cmd/metrics-v2_gen_test.go: `.UnmarshalMsg(bts)`
$DIR/cmd/metrics-v2_gen_test.go: `.MarshalMsg(nil)`
$DIR/cmd/metrics-v2_gen_test.go: `.UnmarshalMsg(bts)`
$DIR/cmd/metrics-v2_gen_test.go: `.MarshalMsg(nil)`
$DIR/cmd/metrics-v2_gen_test.go: `.UnmarshalMsg(bts)`
$DIR/cmd/metrics-v2_test.go: `ttfbHist.With(prometheus.Labels{"api": obs.label}).Observe(obs.val)`
$DIR/cmd/metrics-v2_test.go: `.NewHistogramVec(
		prometheus.HistogramOpts{
			Name:    "s3_ttfb_seconds",
			Help:    "Time taken by requests served by current MinIO server instance",
			Buckets: histBuckets,
		},
		[]string{"api"},
	)`
$DIR/cmd/metrics-v2_test.go: `.NewTicker(1 * time.Millisecond)`
$DIR/cmd/metrics-v2_test.go: `.Stop()`
$DIR/cmd/metrics-v2_test.go: `.With(prometheus.Labels{"api": obs.label})`
$DIR/cmd/metrics-v2_test.go: `.Observe(obs.val)`
$DIR/cmd/namespace-lock_test.go: `nsLk.lock(ctx, "volume", "path", "source", "opsID", false, 1*time.Millisecond)`
$DIR/cmd/namespace-lock_test.go: `time.Sleep(1 * time.Millisecond)`
$DIR/cmd/namespace-lock_test.go: `nsLk.unlock("volume", "path", false)`
$DIR/cmd/namespace-lock_test.go: `nsLk.lockMapMutex.Lock()`
$DIR/cmd/namespace-lock_test.go: `lk3ch <- nsLk.lock(ctx, "volume", "path", "source", "opsID", false, 0)`
$DIR/cmd/namespace-lock_test.go: `lk4ch <- nsLk.lock(ctx, "volume", "path", "source", "opsID", false, 0)`
$DIR/cmd/namespace-lock_test.go: `runtime.Gosched()`
$DIR/cmd/namespace-lock_test.go: `nsLk.lockMapMutex.Unlock()`
$DIR/cmd/namespace-lock_test.go: `<-lk2ch`
$DIR/cmd/namespace-lock_test.go: `.Background()`
$DIR/cmd/namespace-lock_test.go: `.lock(ctx, "volume", "path", "source", "opsID", false, time.Second)`
$DIR/cmd/namespace-lock_test.go: `.lock(ctx, "volume", "path", "source", "opsID", false, 1*time.Millisecond)`
$DIR/cmd/namespace-lock_test.go: `.Sleep(1 * time.Millisecond)`
$DIR/cmd/namespace-lock_test.go: `.unlock("volume", "path", false)`
$DIR/cmd/namespace-lock_test.go: `.lockMapMutex.Lock()`
$DIR/cmd/namespace-lock_test.go: `.lock(ctx, "volume", "path", "source", "opsID", false, 0)`
$DIR/cmd/namespace-lock_test.go: `.lock(ctx, "volume", "path", "source", "opsID", false, 0)`
$DIR/cmd/namespace-lock_test.go: `.Gosched()`
$DIR/cmd/namespace-lock_test.go: `.lockMapMutex.Unlock()`
$DIR/cmd/net_test.go: `found = true`
$DIR/cmd/net_test.go: `globalMinioHost, globalMinioPort = host, port`
$DIR/cmd/net_test.go: `globalMinioHost, globalMinioPort = testCase.host, testCase.port`
$DIR/cmd/net_test.go: `t.Run("", func(t *testing.T) {
			err := CheckLocalServerAddr(testCase.serverAddr)
			switch {
			case testCase.expectedErr == nil:
				if err != nil {
					t.Errorf("error: expected = <nil>, got = %v", err)
				}
			case err == nil:
				t.Errorf("error: expected = %v, got = <nil>", testCase.expectedErr)
			case testCase.expectedErr.Error() != err.Error():
				t.Errorf("error: expected = %v, got = %v", testCase.expectedErr, err)
			}
		})`
$DIR/cmd/net_test.go: `t.Run("", func(t *testing.T) {
			sameAddr, err := sameLocalAddrs(testCase.addr1, testCase.addr2)
			if testCase.expectedErr != nil && err == nil {
				t.Errorf("should fail but succeeded")
			}
			if testCase.expectedErr == nil && err != nil {
				t.Errorf("should succeed but failed with %v", err)
			}
			if err == nil {
				if sameAddr != testCase.sameAddr {
					t.Errorf("expected: %v, found: %v", testCase.sameAddr, sameAddr)
				}
			} else {
				if err.Error() != testCase.expectedErr.Error() {
					t.Errorf("failed with different error, expected: '%v', found:'%v'.",
						testCase.expectedErr, err)
				}
			}
		})`
$DIR/cmd/net_test.go: `.DeepEqual(testCase.sortedIPList, gotIPList)`
$DIR/cmd/net_test.go: `.CreateStringSet("127.0.0.1")`
$DIR/cmd/net_test.go: `.expectedIPList.Intersection(ipList)`
$DIR/cmd/net_test.go: `.IsEmpty()`
$DIR/cmd/net_test.go: `.CreateStringSet("127.0.0.1")`
$DIR/cmd/net_test.go: `.ToSlice()`
$DIR/cmd/net_test.go: `.expectedIPList.Contains(ip)`
$DIR/cmd/net_test.go: `.CreateStringSet(apiEndpoints...)`
$DIR/cmd/net_test.go: `.Contains(testCase.expectedResult)`
$DIR/cmd/net_test.go: `.Run("", func(t *testing.T) {
			err := CheckLocalServerAddr(testCase.serverAddr)
			switch {
			case testCase.expectedErr == nil:
				if err != nil {
					t.Errorf("error: expected = <nil>, got = %v", err)
				}
			case err == nil:
				t.Errorf("error: expected = %v, got = <nil>", testCase.expectedErr)
			case testCase.expectedErr.Error() != err.Error():
				t.Errorf("error: expected = %v, got = %v", testCase.expectedErr, err)
			}
		})`
$DIR/cmd/net_test.go: `.New("unable to process empty address")`
$DIR/cmd/net_test.go: `.New("unable to process empty address")`
$DIR/cmd/net_test.go: `.Run("", func(t *testing.T) {
			sameAddr, err := sameLocalAddrs(testCase.addr1, testCase.addr2)
			if testCase.expectedErr != nil && err == nil {
				t.Errorf("should fail but succeeded")
			}
			if testCase.expectedErr == nil && err != nil {
				t.Errorf("should succeed but failed with %v", err)
			}
			if err == nil {
				if sameAddr != testCase.sameAddr {
					t.Errorf("expected: %v, found: %v", testCase.sameAddr, sameAddr)
				}
			} else {
				if err.Error() != testCase.expectedErr.Error() {
					t.Errorf("failed with different error, expected: '%v', found:'%v'.",
						testCase.expectedErr, err)
				}
			}
		})`
$DIR/cmd/object-api-utils_test.go: `t.Run(strconv.Itoa(i), func(t *testing.T) {
			got := test.objInfo.IsCompressed()
			if got != test.result {
				t.Errorf("IsCompressed: Expected %v but received %v",
					test.result, got)
			}
			got, gErr := test.objInfo.IsCompressedOK()
			if got != test.result {
				t.Errorf("IsCompressedOK: Expected %v but received %v",
					test.result, got)
			}
			if gErr != nil != test.err {
				t.Errorf("IsCompressedOK: want error: %t, got error: %v", test.err, gErr)
			}
		})`
$DIR/cmd/object-api-utils_test.go: `t.Run(tt.name, func(t *testing.T) {
			buf := make([]byte, 100) // make small buffer to ensure multiple reads are required for large case

			r, idxCB := newS2CompressReader(bytes.NewReader(tt.data), int64(len(tt.data)), false)
			defer r.Close()

			var rdrBuf bytes.Buffer
			_, err := io.CopyBuffer(&rdrBuf, r, buf)
			if err != nil {
				t.Fatal(err)
			}
			r.Close()
			idx := idxCB()
			if !tt.wantIdx && len(idx) > 0 {
				t.Errorf("index returned above threshold")
			}
			if tt.wantIdx {
				if idx == nil {
					t.Errorf("no index returned")
				}
				var index s2.Index
				_, err = index.Load(s2.RestoreIndexHeaders(idx))
				if err != nil {
					t.Errorf("error loading index: %v", err)
				}
				t.Log("size:", len(idx))
				t.Log(string(index.JSON()))
				if index.TotalUncompressed != int64(len(tt.data)) {
					t.Errorf("Expected size %d, got %d", len(tt.data), index.TotalUncompressed)
				}
			}
			var stdBuf bytes.Buffer
			w := s2.NewWriter(&stdBuf)
			_, err = io.CopyBuffer(w, bytes.NewReader(tt.data), buf)
			if err != nil {
				t.Fatal(err)
			}
			err = w.Close()
			if err != nil {
				t.Fatal(err)
			}

			var (
				got  = rdrBuf.Bytes()
				want = stdBuf.Bytes()
			)
			if !bytes.Equal(got, want) {
				t.Errorf("encoded data does not match\n\t%q\n\t%q", got, want)
			}

			var decBuf bytes.Buffer
			decRdr := s2.NewReader(&rdrBuf)
			_, err = io.Copy(&decBuf, decRdr)
			if err != nil {
				t.Fatal(err)
			}

			if !bytes.Equal(tt.data, decBuf.Bytes()) {
				t.Errorf("roundtrip failed\n\t%q\n\t%q", tt.data, decBuf.Bytes())
			}
		})`
$DIR/cmd/object-api-utils_test.go: `_, err = index.Load(s2.RestoreIndexHeaders(idx))`
$DIR/cmd/object-api-utils_test.go: `_, err = io.CopyBuffer(w, bytes.NewReader(tt.data), buf)`
$DIR/cmd/object-api-utils_test.go: `err = w.Close()`
$DIR/cmd/object-api-utils_test.go: `_, err = io.Copy(&decBuf, decRdr)`
$DIR/cmd/object-api-utils_test.go: `.DeepEqual(got, tt.want)`
$DIR/cmd/object-api-utils_test.go: `.DeepEqual(got, tt.want)`
$DIR/cmd/object-api-utils_test.go: `.DeepEqual(got, tt.want)`
$DIR/cmd/object-api-utils_test.go: `.Run(strconv.Itoa(i), func(t *testing.T) {
			got := test.objInfo.IsCompressed()
			if got != test.result {
				t.Errorf("IsCompressed: Expected %v but received %v",
					test.result, got)
			}
			got, gErr := test.objInfo.IsCompressedOK()
			if got != test.result {
				t.Errorf("IsCompressedOK: Expected %v but received %v",
					test.result, got)
			}
			if gErr != nil != test.err {
				t.Errorf("IsCompressedOK: want error: %t, got error: %v", test.err, gErr)
			}
		})`
$DIR/cmd/object-api-utils_test.go: `.Itoa(i)`
$DIR/cmd/object-api-utils_test.go: `.objInfo.IsCompressed()`
$DIR/cmd/object-api-utils_test.go: `.objInfo.IsCompressedOK()`
$DIR/cmd/object-api-utils_test.go: `.objInfo.GetActualSize()`
$DIR/cmd/object-api-utils_test.go: `.Repeat([]byte("hello, world"), 1000000)`
$DIR/cmd/object-api-utils_test.go: `.Run(tt.name, func(t *testing.T) {
			buf := make([]byte, 100) // make small buffer to ensure multiple reads are required for large case

			r, idxCB := newS2CompressReader(bytes.NewReader(tt.data), int64(len(tt.data)), false)
			defer r.Close()

			var rdrBuf bytes.Buffer
			_, err := io.CopyBuffer(&rdrBuf, r, buf)
			if err != nil {
				t.Fatal(err)
			}
			r.Close()
			idx := idxCB()
			if !tt.wantIdx && len(idx) > 0 {
				t.Errorf("index returned above threshold")
			}
			if tt.wantIdx {
				if idx == nil {
					t.Errorf("no index returned")
				}
				var index s2.Index
				_, err = index.Load(s2.RestoreIndexHeaders(idx))
				if err != nil {
					t.Errorf("error loading index: %v", err)
				}
				t.Log("size:", len(idx))
				t.Log(string(index.JSON()))
				if index.TotalUncompressed != int64(len(tt.data)) {
					t.Errorf("Expected size %d, got %d", len(tt.data), index.TotalUncompressed)
				}
			}
			var stdBuf bytes.Buffer
			w := s2.NewWriter(&stdBuf)
			_, err = io.CopyBuffer(w, bytes.NewReader(tt.data), buf)
			if err != nil {
				t.Fatal(err)
			}
			err = w.Close()
			if err != nil {
				t.Fatal(err)
			}

			var (
				got  = rdrBuf.Bytes()
				want = stdBuf.Bytes()
			)
			if !bytes.Equal(got, want) {
				t.Errorf("encoded data does not match\n\t%q\n\t%q", got, want)
			}

			var decBuf bytes.Buffer
			decRdr := s2.NewReader(&rdrBuf)
			_, err = io.Copy(&decBuf, decRdr)
			if err != nil {
				t.Fatal(err)
			}

			if !bytes.Equal(tt.data, decBuf.Bytes()) {
				t.Errorf("roundtrip failed\n\t%q\n\t%q", tt.data, decBuf.Bytes())
			}
		})`
$DIR/cmd/object-api-utils_test.go: `.NewReader(tt.data)`
$DIR/cmd/object-api-utils_test.go: `.CopyBuffer(&rdrBuf, r, buf)`
$DIR/cmd/object-api-utils_test.go: `.Load(s2.RestoreIndexHeaders(idx))`
$DIR/cmd/object-api-utils_test.go: `.RestoreIndexHeaders(idx)`
$DIR/cmd/object-api-utils_test.go: `.NewWriter(&stdBuf)`
$DIR/cmd/object-api-utils_test.go: `.CopyBuffer(w, bytes.NewReader(tt.data), buf)`
$DIR/cmd/object-api-utils_test.go: `.NewReader(tt.data)`
$DIR/cmd/object-api-utils_test.go: `.Bytes()`
$DIR/cmd/object-api-utils_test.go: `.Bytes()`
$DIR/cmd/object-api-utils_test.go: `.Equal(got, want)`
$DIR/cmd/object-api-utils_test.go: `.NewReader(&rdrBuf)`
$DIR/cmd/object-api-utils_test.go: `.Copy(&decBuf, decRdr)`
$DIR/cmd/object-api-utils_test.go: `.Equal(tt.data, decBuf.Bytes())`
$DIR/cmd/object-api-utils_test.go: `.Bytes()`
$DIR/cmd/object-handlers_test.go: `globalPolicySys = NewPolicySys()`
$DIR/cmd/object-handlers_test.go: `globalPolicySys = nil`
$DIR/cmd/object-handlers_test.go: `globalPolicySys = NewPolicySys()`
$DIR/cmd/object-handlers_test.go: `globalPolicySys = nil`
$DIR/cmd/object-handlers_test.go: `globalPolicySys = NewPolicySys()`
$DIR/cmd/object-handlers_test.go: `globalPolicySys = nil`
$DIR/cmd/object-handlers_test.go: `globalPolicySys = NewPolicySys()`
$DIR/cmd/object-handlers_test.go: `globalPolicySys = nil`
$DIR/cmd/os-readdir_test.go: `testResults = append(testResults, setupTestReadDirEmpty(t)...)`
$DIR/cmd/os-readdir_test.go: `testResults = append(testResults, setupTestReadDirFiles(t)...)`
$DIR/cmd/os-readdir_test.go: `testResults = append(testResults, setupTestReadDirGeneric(t)...)`
$DIR/cmd/os-readdir_test.go: `testResults = append(testResults, setupTestReadDirSymlink(t)...)`
$DIR/cmd/os-readdir_test.go: `sort.Strings(entries)`
$DIR/cmd/os-readdir_test.go: `os.RemoveAll(dir)`
$DIR/cmd/os-readdir_test.go: `os.RemoveAll(dir)`
$DIR/cmd/os-readdir_test.go: `os.RemoveAll(dir)`
$DIR/cmd/os-readdir_test.go: `os.RemoveAll(dir)`
$DIR/cmd/os-readdir_test.go: `.Join(os.TempDir(), "issue")`
$DIR/cmd/os-readdir_test.go: `.TempDir()`
$DIR/cmd/os-readdir_test.go: `.WriteFile(file, []byte(""), 0o644)`
$DIR/cmd/os-readdir_test.go: `.RemoveAll(file)`
$DIR/cmd/os-readdir_test.go: `.Join(file, "mydir")`
$DIR/cmd/os-readdir_test.go: `.Join(os.TempDir(), "perm-dir")`
$DIR/cmd/os-readdir_test.go: `.TempDir()`
$DIR/cmd/os-readdir_test.go: `.MkdirAll(permDir, os.FileMode(0o200))`
$DIR/cmd/os-readdir_test.go: `.FileMode(0o200)`
$DIR/cmd/os-readdir_test.go: `.RemoveAll(permDir)`
$DIR/cmd/os-readdir_test.go: `.Strings(entries)`
$DIR/cmd/os-readdir_test.go: `.TempDir()`
$DIR/cmd/os-readdir_test.go: `.WriteFile(filepath.Join(dir, fmt.Sprintf("%d", c)), []byte{}, os.ModePerm)`
$DIR/cmd/os-readdir_test.go: `.Join(dir, fmt.Sprintf("%d", c))`
$DIR/cmd/os-readdir_test.go: `.Sprintf("%d", c)`
$DIR/cmd/os-readdir_test.go: `.RemoveAll(dir)`
$DIR/cmd/os-readdir_test.go: `.RemoveAll(dir)`
$DIR/cmd/os-readdir_test.go: `.RemoveAll(dir)`
$DIR/cmd/os-readdir_test.go: `.RemoveAll(dir)`
$DIR/cmd/policy_test.go: `.NewBPStatement("",
				policy.Allow,
				policy.NewPrincipal("*"),
				policy.NewActionSet(policy.GetBucketLocationAction),
				policy.NewResourceSet(policy.NewResource("mybucket")),
				condition.NewFunctions(),
			)`
$DIR/cmd/policy_test.go: `.NewPrincipal("*")`
$DIR/cmd/policy_test.go: `.NewActionSet(policy.GetBucketLocationAction)`
$DIR/cmd/policy_test.go: `.NewResourceSet(policy.NewResource("mybucket"))`
$DIR/cmd/policy_test.go: `.NewResource("mybucket")`
$DIR/cmd/policy_test.go: `.NewFunctions()`
$DIR/cmd/policy_test.go: `.NewBPStatement("",
				policy.Allow,
				policy.NewPrincipal("*"),
				policy.NewActionSet(policy.PutObjectAction),
				policy.NewResourceSet(policy.NewResource("mybucket/myobject*")),
				condition.NewFunctions(),
			)`
$DIR/cmd/policy_test.go: `.NewPrincipal("*")`
$DIR/cmd/policy_test.go: `.NewActionSet(policy.PutObjectAction)`
$DIR/cmd/policy_test.go: `.NewResourceSet(policy.NewResource("mybucket/myobject*"))`
$DIR/cmd/policy_test.go: `.NewResource("mybucket/myobject*")`
$DIR/cmd/policy_test.go: `.NewFunctions()`
$DIR/cmd/policy_test.go: `.IsAllowed(testCase.args)`
$DIR/cmd/policy_test.go: `.NewBPStatement("",
				policy.Allow,
				policy.NewPrincipal("*"),
				policy.NewActionSet(policy.GetBucketLocationAction, policy.ListBucketAction),
				policy.NewResourceSet(policy.NewResource("mybucket")),
				condition.NewFunctions(),
			)`
$DIR/cmd/policy_test.go: `.NewPrincipal("*")`
$DIR/cmd/policy_test.go: `.NewActionSet(policy.GetBucketLocationAction, policy.ListBucketAction)`
$DIR/cmd/policy_test.go: `.NewResourceSet(policy.NewResource("mybucket"))`
$DIR/cmd/policy_test.go: `.NewResource("mybucket")`
$DIR/cmd/policy_test.go: `.NewFunctions()`
$DIR/cmd/policy_test.go: `.NewBPStatement("",
				policy.Allow,
				policy.NewPrincipal("*"),
				policy.NewActionSet(policy.GetObjectAction),
				policy.NewResourceSet(policy.NewResource("mybucket/myobject*")),
				condition.NewFunctions(),
			)`
$DIR/cmd/policy_test.go: `.NewPrincipal("*")`
$DIR/cmd/policy_test.go: `.NewActionSet(policy.GetObjectAction)`
$DIR/cmd/policy_test.go: `.NewResourceSet(policy.NewResource("mybucket/myobject*"))`
$DIR/cmd/policy_test.go: `.NewResource("mybucket/myobject*")`
$DIR/cmd/policy_test.go: `.NewFunctions()`
$DIR/cmd/policy_test.go: `.NewBPStatement("",
				policy.Allow,
				policy.NewPrincipal("*"),
				policy.NewActionSet(policy.PutObjectAction),
				policy.NewResourceSet(policy.NewResource("mybucket/myobject*")),
				condition.NewFunctions(),
			)`
$DIR/cmd/policy_test.go: `.NewPrincipal("*")`
$DIR/cmd/policy_test.go: `.NewActionSet(policy.PutObjectAction)`
$DIR/cmd/policy_test.go: `.NewResourceSet(policy.NewResource("mybucket/myobject*"))`
$DIR/cmd/policy_test.go: `.NewResource("mybucket/myobject*")`
$DIR/cmd/policy_test.go: `.NewFunctions()`
$DIR/cmd/policy_test.go: `.DeepEqual(result, testCase.expectedResult)`
$DIR/cmd/policy_test.go: `.NewBPStatement("",
				policy.Allow,
				policy.NewPrincipal("*"),
				policy.NewActionSet(policy.GetBucketLocationAction, policy.ListBucketAction),
				policy.NewResourceSet(policy.NewResource("mybucket")),
				condition.NewFunctions(),
			)`
$DIR/cmd/policy_test.go: `.NewPrincipal("*")`
$DIR/cmd/policy_test.go: `.NewActionSet(policy.GetBucketLocationAction, policy.ListBucketAction)`
$DIR/cmd/policy_test.go: `.NewResourceSet(policy.NewResource("mybucket"))`
$DIR/cmd/policy_test.go: `.NewResource("mybucket")`
$DIR/cmd/policy_test.go: `.NewFunctions()`
$DIR/cmd/policy_test.go: `.NewBPStatement("",
				policy.Allow,
				policy.NewPrincipal("*"),
				policy.NewActionSet(policy.GetObjectAction),
				policy.NewResourceSet(policy.NewResource("mybucket/myobject*")),
				condition.NewFunctions(),
			)`
$DIR/cmd/policy_test.go: `.NewPrincipal("*")`
$DIR/cmd/policy_test.go: `.NewActionSet(policy.GetObjectAction)`
$DIR/cmd/policy_test.go: `.NewResourceSet(policy.NewResource("mybucket/myobject*"))`
$DIR/cmd/policy_test.go: `.NewResource("mybucket/myobject*")`
$DIR/cmd/policy_test.go: `.NewFunctions()`
$DIR/cmd/policy_test.go: `.DeepEqual(result, testCase.expectedResult)`
$DIR/cmd/postpolicyform_test.go: `t.Run("", func(t *testing.T) {
			_, err := parsePostPolicyForm(strings.NewReader(testCase.policy))
			if testCase.success && err != nil {
				t.Errorf("Expected success but failed with %s", err)
			}
			if !testCase.success && err == nil {
				t.Errorf("Expected failed but succeeded")
			}
		})`
$DIR/cmd/postpolicyform_test.go: `pp.SetBucket("testbucket")`
$DIR/cmd/postpolicyform_test.go: `pp.SetContentType("image/jpeg")`
$DIR/cmd/postpolicyform_test.go: `pp.SetUserMetadata("uuid", "14365123651274")`
$DIR/cmd/postpolicyform_test.go: `pp.SetKeyStartsWith("user/user1/filename")`
$DIR/cmd/postpolicyform_test.go: `pp.SetContentLengthRange(1048579, 10485760)`
$DIR/cmd/postpolicyform_test.go: `pp.SetSuccessStatusAction("201")`
$DIR/cmd/postpolicyform_test.go: `formValues.Set("Bucket", tt.Bucket)`
$DIR/cmd/postpolicyform_test.go: `formValues.Set("Key", tt.Key)`
$DIR/cmd/postpolicyform_test.go: `formValues.Set("Content-Type", tt.ContentType)`
$DIR/cmd/postpolicyform_test.go: `formValues.Set("X-Amz-Date", tt.XAmzDate)`
$DIR/cmd/postpolicyform_test.go: `formValues.Set("X-Amz-Meta-Uuid", tt.XAmzMetaUUID)`
$DIR/cmd/postpolicyform_test.go: `formValues.Set("X-Amz-Algorithm", tt.XAmzAlgorithm)`
$DIR/cmd/postpolicyform_test.go: `formValues.Set("X-Amz-Credential", tt.XAmzCredential)`
$DIR/cmd/postpolicyform_test.go: `pp.SetExpires(UTCNow().AddDate(0, 0, -10))`
$DIR/cmd/postpolicyform_test.go: `pp.SetExpires(UTCNow().AddDate(0, 0, 10))`
$DIR/cmd/postpolicyform_test.go: `formValues.Set("Policy", base64.StdEncoding.EncodeToString([]byte(pp.String())))`
$DIR/cmd/postpolicyform_test.go: `formValues.Set("Success_action_status", tt.SuccessActionStatus)`
$DIR/cmd/postpolicyform_test.go: `err = checkPostPolicy(formValues, postPolicyForm)`
$DIR/cmd/postpolicyform_test.go: `.Run("", func(t *testing.T) {
			_, err := parsePostPolicyForm(strings.NewReader(testCase.policy))
			if testCase.success && err != nil {
				t.Errorf("Expected success but failed with %s", err)
			}
			if !testCase.success && err == nil {
				t.Errorf("Expected failed but succeeded")
			}
		})`
$DIR/cmd/postpolicyform_test.go: `.NewReader(testCase.policy)`
$DIR/cmd/postpolicyform_test.go: `.NewPostPolicy()`
$DIR/cmd/postpolicyform_test.go: `.SetBucket("testbucket")`
$DIR/cmd/postpolicyform_test.go: `.SetContentType("image/jpeg")`
$DIR/cmd/postpolicyform_test.go: `.SetUserMetadata("uuid", "14365123651274")`
$DIR/cmd/postpolicyform_test.go: `.SetKeyStartsWith("user/user1/filename")`
$DIR/cmd/postpolicyform_test.go: `.SetContentLengthRange(1048579, 10485760)`
$DIR/cmd/postpolicyform_test.go: `.SetSuccessStatusAction("201")`
$DIR/cmd/postpolicyform_test.go: `.Set("Bucket", tt.Bucket)`
$DIR/cmd/postpolicyform_test.go: `.Set("Key", tt.Key)`
$DIR/cmd/postpolicyform_test.go: `.Set("Content-Type", tt.ContentType)`
$DIR/cmd/postpolicyform_test.go: `.Set("X-Amz-Date", tt.XAmzDate)`
$DIR/cmd/postpolicyform_test.go: `.Set("X-Amz-Meta-Uuid", tt.XAmzMetaUUID)`
$DIR/cmd/postpolicyform_test.go: `.Set("X-Amz-Algorithm", tt.XAmzAlgorithm)`
$DIR/cmd/postpolicyform_test.go: `.Set("X-Amz-Credential", tt.XAmzCredential)`
$DIR/cmd/postpolicyform_test.go: `.SetExpires(UTCNow().AddDate(0, 0, -10))`
$DIR/cmd/postpolicyform_test.go: `.AddDate(0, 0, -10)`
$DIR/cmd/postpolicyform_test.go: `.SetExpires(UTCNow().AddDate(0, 0, 10))`
$DIR/cmd/postpolicyform_test.go: `.AddDate(0, 0, 10)`
$DIR/cmd/postpolicyform_test.go: `.Set("Policy", base64.StdEncoding.EncodeToString([]byte(pp.String())))`
$DIR/cmd/postpolicyform_test.go: `.StdEncoding.EncodeToString([]byte(pp.String()))`
$DIR/cmd/postpolicyform_test.go: `.String()`
$DIR/cmd/postpolicyform_test.go: `.Set("Success_action_status", tt.SuccessActionStatus)`
$DIR/cmd/postpolicyform_test.go: `.StdEncoding.DecodeString(base64.StdEncoding.EncodeToString([]byte(pp.String())))`
$DIR/cmd/postpolicyform_test.go: `.StdEncoding.EncodeToString([]byte(pp.String()))`
$DIR/cmd/postpolicyform_test.go: `.String()`
$DIR/cmd/postpolicyform_test.go: `.NewReader(policyBytes)`
$DIR/cmd/server-main_test.go: `t.Run(testcase.config, func(t *testing.T) {
			sctx := &serverCtxt{}
			err := mergeServerCtxtFromConfigFile(testcase.config, sctx)
			if testcase.expectedErr && err == nil {
				t.Error("expected failure, got success")
			}
			if !testcase.expectedErr && err != nil {
				t.Error("expected success, got failure", err)
			}
			if err == nil {
				if len(sctx.Layout.pools) != 2 {
					t.Error("expected parsed pools to be 2, not", len(sctx.Layout.pools))
				}
				if sctx.Layout.pools[0].cmdline != testcase.hash {
					t.Error("expected hash", testcase.hash, "got", sctx.Layout.pools[0].cmdline)
				}
			}
		})`
$DIR/cmd/server-main_test.go: `nDisks = 16`
$DIR/cmd/server-main_test.go: `disks, err = getRandomDisks(nDisks)`
$DIR/cmd/server-main_test.go: `obj, err = newObjectLayer(ctx, mustGetPoolEndpoints(0, disks...))`
$DIR/cmd/server-main_test.go: `_, ok = obj.(*erasureServerPools)`
$DIR/cmd/server-main_test.go: `.Run(testcase.config, func(t *testing.T) {
			sctx := &serverCtxt{}
			err := mergeServerCtxtFromConfigFile(testcase.config, sctx)
			if testcase.expectedErr && err == nil {
				t.Error("expected failure, got success")
			}
			if !testcase.expectedErr && err != nil {
				t.Error("expected success, got failure", err)
			}
			if err == nil {
				if len(sctx.Layout.pools) != 2 {
					t.Error("expected parsed pools to be 2, not", len(sctx.Layout.pools))
				}
				if sctx.Layout.pools[0].cmdline != testcase.hash {
					t.Error("expected hash", testcase.hash, "got", sctx.Layout.pools[0].cmdline)
				}
			}
		})`
$DIR/cmd/server-main_test.go: `.WithCancel(context.Background())`
$DIR/cmd/server-main_test.go: `.Background()`
$DIR/cmd/server-startup-msg_test.go: `infoStorage.Disks = []madmin.Disk{
		{Endpoint: "http://127.0.0.1:9000/data/1/", State: madmin.DriveStateOk},
		{Endpoint: "http://127.0.0.1:9000/data/2/", State: madmin.DriveStateOk},
		{Endpoint: "http://127.0.0.1:9000/data/3/", State: madmin.DriveStateOk},
		{Endpoint: "http://127.0.0.1:9000/data/4/", State: madmin.DriveStateOk},
		{Endpoint: "http://127.0.0.1:9001/data/1/", State: madmin.DriveStateOk},
		{Endpoint: "http://127.0.0.1:9001/data/2/", State: madmin.DriveStateOk},
		{Endpoint: "http://127.0.0.1:9001/data/3/", State: madmin.DriveStateOk},
		{Endpoint: "http://127.0.0.1:9001/data/4/", State: madmin.DriveStateOffline},
	}`
$DIR/cmd/server-startup-msg_test.go: `infoStorage.Backend.Type = madmin.Erasure`
$DIR/cmd/server-startup-msg_test.go: `apiEndpoints = []string{"http://%%%%%:9000"}`
$DIR/cmd/server-startup-msg_test.go: `newAPIEndpoints = stripStandardPorts(apiEndpoints, "")`
$DIR/cmd/server-startup-msg_test.go: `apiEndpoints = []string{"http://127.0.0.1:443", "https://127.0.0.1:80"}`
$DIR/cmd/server-startup-msg_test.go: `newAPIEndpoints = stripStandardPorts(apiEndpoints, "")`
$DIR/cmd/server-startup-msg_test.go: `.Contains(msg, "7 Online, 1 Offline")`
$DIR/cmd/server-startup-msg_test.go: `.DeepEqual(expectedAPIEndpoints, newAPIEndpoints)`
$DIR/cmd/server-startup-msg_test.go: `.DeepEqual(apiEndpoints, newAPIEndpoints)`
$DIR/cmd/server-startup-msg_test.go: `.DeepEqual(apiEndpoints, newAPIEndpoints)`
$DIR/cmd/server-startup-msg_test.go: `.WithCancel(context.Background())`
$DIR/cmd/server-startup-msg_test.go: `.Background()`
$DIR/cmd/server-startup-msg_test.go: `.RemoveAll(fsDir)`
$DIR/cmd/server-startup-msg_test.go: `.WithCancel(context.Background())`
$DIR/cmd/server-startup-msg_test.go: `.Background()`
$DIR/cmd/server-startup-msg_test.go: `.RemoveAll(fsDir)`
$DIR/cmd/server-startup-msg_test.go: `.WithCancel(context.Background())`
$DIR/cmd/server-startup-msg_test.go: `.Background()`
$DIR/cmd/server-startup-msg_test.go: `.RemoveAll(fsDir)`
$DIR/cmd/server_test.go: `globalServerCtxt.StrictS3Compat = true`
$DIR/cmd/server_test.go: `t.Run(fmt.Sprintf("Test: %d, ServerType: %s", i+1, testCase.serverType), func(t *testing.T) {
			runAllTests(testCase, &check{t, testCase.serverType})
		})`
$DIR/cmd/server_test.go: `runAllTests(testCase, &check{t, testCase.serverType})`
$DIR/cmd/server_test.go: `.Run(fmt.Sprintf("Test: %d, ServerType: %s", i+1, testCase.serverType), func(t *testing.T) {
			runAllTests(testCase, &check{t, testCase.serverType})
		})`
$DIR/cmd/server_test.go: `.Sprintf("Test: %d, ServerType: %s", i+1, testCase.serverType)`
$DIR/cmd/sftp-server_test.go: `t.Run(
			fmt.Sprintf("Test: %d, ServerType: %s", i+1, testCase.ServerTypeDescription),
			func(t *testing.T) {
				c := &check{t, testCase.serverType}
				suite := testCase

				suite.SetUpSuite(c)

				suite.SFTPServiceAccountLogin(c)
				suite.SFTPInvalidServiceAccountPassword(c)

				// LDAP tests
				ldapServer := os.Getenv(EnvTestLDAPServer)
				if ldapServer == "" {
					c.Skipf("Skipping LDAP test as no LDAP server is provided via %s", EnvTestLDAPServer)
				}

				suite.SetUpLDAP(c, ldapServer)

				suite.SFTPFailedAuthDueToMissingPolicy(c)
				suite.SFTPFailedAuthDueToInvalidUser(c)
				suite.SFTPFailedForcedServiceAccountAuthOnLDAPUser(c)
				suite.SFTPFailedAuthDueToInvalidPassword(c)

				suite.SFTPValidLDAPLoginWithPassword(c)

				suite.SFTPPublicKeyAuthentication(c)
				suite.SFTPFailedPublicKeyAuthenticationInvalidKey(c)

				suite.TearDownSuite(c)
			},
		)`
$DIR/cmd/sftp-server_test.go: `suite.SetUpSuite(c)`
$DIR/cmd/sftp-server_test.go: `suite.SFTPServiceAccountLogin(c)`
$DIR/cmd/sftp-server_test.go: `suite.SFTPInvalidServiceAccountPassword(c)`
$DIR/cmd/sftp-server_test.go: `suite.SetUpLDAP(c, ldapServer)`
$DIR/cmd/sftp-server_test.go: `suite.SFTPFailedAuthDueToMissingPolicy(c)`
$DIR/cmd/sftp-server_test.go: `suite.SFTPFailedAuthDueToInvalidUser(c)`
$DIR/cmd/sftp-server_test.go: `suite.SFTPFailedForcedServiceAccountAuthOnLDAPUser(c)`
$DIR/cmd/sftp-server_test.go: `suite.SFTPFailedAuthDueToInvalidPassword(c)`
$DIR/cmd/sftp-server_test.go: `suite.SFTPValidLDAPLoginWithPassword(c)`
$DIR/cmd/sftp-server_test.go: `suite.SFTPPublicKeyAuthentication(c)`
$DIR/cmd/sftp-server_test.go: `suite.SFTPFailedPublicKeyAuthenticationInvalidKey(c)`
$DIR/cmd/sftp-server_test.go: `suite.TearDownSuite(c)`
$DIR/cmd/sftp-server_test.go: `.Run(
			fmt.Sprintf("Test: %d, ServerType: %s", i+1, testCase.ServerTypeDescription),
			func(t *testing.T) {
				c := &check{t, testCase.serverType}
				suite := testCase

				suite.SetUpSuite(c)

				suite.SFTPServiceAccountLogin(c)
				suite.SFTPInvalidServiceAccountPassword(c)

				// LDAP tests
				ldapServer := os.Getenv(EnvTestLDAPServer)
				if ldapServer == "" {
					c.Skipf("Skipping LDAP test as no LDAP server is provided via %s", EnvTestLDAPServer)
				}

				suite.SetUpLDAP(c, ldapServer)

				suite.SFTPFailedAuthDueToMissingPolicy(c)
				suite.SFTPFailedAuthDueToInvalidUser(c)
				suite.SFTPFailedForcedServiceAccountAuthOnLDAPUser(c)
				suite.SFTPFailedAuthDueToInvalidPassword(c)

				suite.SFTPValidLDAPLoginWithPassword(c)

				suite.SFTPPublicKeyAuthentication(c)
				suite.SFTPFailedPublicKeyAuthenticationInvalidKey(c)

				suite.TearDownSuite(c)
			},
		)`
$DIR/cmd/sftp-server_test.go: `.Sprintf("Test: %d, ServerType: %s", i+1, testCase.ServerTypeDescription)`
$DIR/cmd/sftp-server_test.go: `.SetUpSuite(c)`
$DIR/cmd/sftp-server_test.go: `.SFTPServiceAccountLogin(c)`
$DIR/cmd/sftp-server_test.go: `.SFTPInvalidServiceAccountPassword(c)`
$DIR/cmd/sftp-server_test.go: `.Getenv(EnvTestLDAPServer)`
$DIR/cmd/sftp-server_test.go: `.SetUpLDAP(c, ldapServer)`
$DIR/cmd/sftp-server_test.go: `.SFTPFailedAuthDueToMissingPolicy(c)`
$DIR/cmd/sftp-server_test.go: `.SFTPFailedAuthDueToInvalidUser(c)`
$DIR/cmd/sftp-server_test.go: `.SFTPFailedForcedServiceAccountAuthOnLDAPUser(c)`
$DIR/cmd/sftp-server_test.go: `.SFTPFailedAuthDueToInvalidPassword(c)`
$DIR/cmd/sftp-server_test.go: `.SFTPValidLDAPLoginWithPassword(c)`
$DIR/cmd/sftp-server_test.go: `.SFTPPublicKeyAuthentication(c)`
$DIR/cmd/sftp-server_test.go: `.SFTPFailedPublicKeyAuthenticationInvalidKey(c)`
$DIR/cmd/sftp-server_test.go: `.TearDownSuite(c)`
$DIR/cmd/signature-v2_test.go: `copy(sortedResourceList, resourceList)`
$DIR/cmd/signature-v2_test.go: `sort.Strings(sortedResourceList)`
$DIR/cmd/signature-v2_test.go: `query.Set(key, value)`
$DIR/cmd/signature-v2_test.go: `req.RequestURI = req.URL.RequestURI()`
$DIR/cmd/signature-v2_test.go: `err = preSignV2(req, accessKey, secretKey, now.Unix()+60)`
$DIR/cmd/signature-v2_test.go: `req.RequestURI = req.URL.RequestURI()`
$DIR/cmd/signature-v2_test.go: `t.Run(fmt.Sprintf("Case %d AuthStr \"%s\".", i+1, testCase.authString), func(t *testing.T) {
			req := &http.Request{
				Header: make(http.Header),
				URL:    &url.URL{},
			}
			req.Header.Set("Authorization", testCase.authString)
			_, actualErrCode := validateV2AuthHeader(req)

			if testCase.expectedError != actualErrCode {
				t.Errorf("Expected the error code to be %v, got %v.", testCase.expectedError, actualErrCode)
			}
		})`
$DIR/cmd/signature-v2_test.go: `req.Header.Set("Authorization", testCase.authString)`
$DIR/cmd/signature-v2_test.go: `formValues.Set("Awsaccesskeyid", test.accessKey)`
$DIR/cmd/signature-v2_test.go: `formValues.Set("Signature", test.signature)`
$DIR/cmd/signature-v2_test.go: `formValues.Set("Policy", test.policy)`
$DIR/cmd/signature-v2_test.go: `.Strings(sortedResourceList)`
$DIR/cmd/signature-v2_test.go: `.WithCancel(context.Background())`
$DIR/cmd/signature-v2_test.go: `.Background()`
$DIR/cmd/signature-v2_test.go: `.RemoveAll(fsDir)`
$DIR/cmd/signature-v2_test.go: `.Sprintf("%d", now.Unix()+60)`
$DIR/cmd/signature-v2_test.go: `.Unix()`
$DIR/cmd/signature-v2_test.go: `.Sprintf("%d", now.Unix()+60)`
$DIR/cmd/signature-v2_test.go: `.Unix()`
$DIR/cmd/signature-v2_test.go: `.Set(key, value)`
$DIR/cmd/signature-v2_test.go: `.NewRequest(http.MethodGet, "http://host/a/b?"+query.Encode(), nil)`
$DIR/cmd/signature-v2_test.go: `.Encode()`
$DIR/cmd/signature-v2_test.go: `.URL.RequestURI()`
$DIR/cmd/signature-v2_test.go: `.Unix()`
$DIR/cmd/signature-v2_test.go: `.URL.RequestURI()`
$DIR/cmd/signature-v2_test.go: `.WithCancel(context.Background())`
$DIR/cmd/signature-v2_test.go: `.Background()`
$DIR/cmd/signature-v2_test.go: `.RemoveAll(fsDir)`
$DIR/cmd/signature-v2_test.go: `.Sprintf("%s %s", signV2Algorithm, accessID)`
$DIR/cmd/signature-v2_test.go: `.Sprintf("%s %s:%s", signV2Algorithm, "InvalidAccessID", "signature")`
$DIR/cmd/signature-v2_test.go: `.Sprintf("%s %s:%s", signV2Algorithm, accessID, "signature")`
$DIR/cmd/signature-v2_test.go: `.Run(fmt.Sprintf("Case %d AuthStr \"%s\".", i+1, testCase.authString), func(t *testing.T) {
			req := &http.Request{
				Header: make(http.Header),
				URL:    &url.URL{},
			}
			req.Header.Set("Authorization", testCase.authString)
			_, actualErrCode := validateV2AuthHeader(req)

			if testCase.expectedError != actualErrCode {
				t.Errorf("Expected the error code to be %v, got %v.", testCase.expectedError, actualErrCode)
			}
		})`
$DIR/cmd/signature-v2_test.go: `.Sprintf("Case %d AuthStr \"%s\".", i+1, testCase.authString)`
$DIR/cmd/signature-v2_test.go: `.Header.Set("Authorization", testCase.authString)`
$DIR/cmd/signature-v2_test.go: `.WithCancel(context.Background())`
$DIR/cmd/signature-v2_test.go: `.Background()`
$DIR/cmd/signature-v2_test.go: `.RemoveAll(fsDir)`
$DIR/cmd/signature-v2_test.go: `.Set("Awsaccesskeyid", test.accessKey)`
$DIR/cmd/signature-v2_test.go: `.Set("Signature", test.signature)`
$DIR/cmd/signature-v2_test.go: `.Set("Policy", test.policy)`
$DIR/cmd/signature-v4-parser_test.go: `validateCredentialfields(t, i+1, testCase.expectedCredentials, actualCredential)`
$DIR/cmd/signature-v4-parser_test.go: `validateCredentialfields(t, i+1, testCase.expectedAuthField.Credential, parsedAuthField.Credential)`
$DIR/cmd/signature-v4-parser_test.go: `inputQuery.Set(testCase.inputQueryKeyVals[j], testCase.inputQueryKeyVals[j+1])`
$DIR/cmd/signature-v4-parser_test.go: `inputQuery.Set(testCase.inputQueryKeyVals[j], testCase.inputQueryKeyVals[j+1])`
$DIR/cmd/signature-v4-parser_test.go: `validateCredentialfields(t, i+1, testCase.expectedPreSignValues.Credential, parsedPreSign.Credential)`
$DIR/cmd/signature-v4-parser_test.go: `.Format(yyyymmdd)`
$DIR/cmd/signature-v4-parser_test.go: `.Format(yyyymmdd)`
$DIR/cmd/signature-v4-parser_test.go: `.String()`
$DIR/cmd/signature-v4-parser_test.go: `.Format(yyyymmdd)`
$DIR/cmd/signature-v4-parser_test.go: `.Format(yyyymmdd)`
$DIR/cmd/signature-v4-parser_test.go: `.Format(yyyymmdd)`
$DIR/cmd/signature-v4-parser_test.go: `.Join(testCase.expectedSignedHeaders, ",")`
$DIR/cmd/signature-v4-parser_test.go: `.Join(actualSignedHeaders, ",")`
$DIR/cmd/signature-v4-parser_test.go: `.Format(yyyymmdd)`
$DIR/cmd/signature-v4-parser_test.go: `.Join([]string{
					// generating a valid credential field.
					generateCredentialStr(
						"Z7IXGOO6BZ0REAN1Q26I",
						sampleTimeStr,
						"us-west-1",
						"s3",
						"aws4_request"),
					// Incorrect SignedHeader field.
					"SignIncorrectHeader=",
					"b",
				}, ",")`
$DIR/cmd/signature-v4-parser_test.go: `.Join([]string{
					// generating a valid credential.
					generateCredentialStr(
						"Z7IXGOO6BZ0REAN1Q26I",
						sampleTimeStr,
						"us-west-1",
						"s3",
						"aws4_request"),
					// valid SignedHeader.
					"SignedHeaders=host;x-amz-content-sha256;x-amz-date",
					// invalid Signature field.
					// a valid signature is of form "Signature="
					"Sign=",
				}, ",")`
$DIR/cmd/signature-v4-parser_test.go: `.Join([]string{
					// generating a valid credential.
					generateCredentialStr(
						"Z7IXGOO6BZ0REAN1Q26I",
						sampleTimeStr,
						"us-west-1",
						"s3",
						"aws4_request"),
					// valid SignedHeader.
					"SignedHeaders=host;x-amz-content-sha256;x-amz-date",
					// valid Signature field.
					// a valid signature is of form "Signature="
					"Signature=abcd",
				}, ",")`
$DIR/cmd/signature-v4-parser_test.go: `.Join([]string{
					// generating a valid credential.
					generateCredentialStr(
						"access key",
						sampleTimeStr,
						"us-west-1",
						"s3",
						"aws4_request"),
					// valid SignedHeader.
					"SignedHeaders=host;x-amz-content-sha256;x-amz-date",
					// valid Signature field.
					// a valid signature is of form "Signature="
					"Signature=abcd",
				}, ",")`
$DIR/cmd/signature-v4-parser_test.go: `.Join(testCase.expectedAuthField.SignedHeaders, ",")`
$DIR/cmd/signature-v4-parser_test.go: `.Join(parsedAuthField.SignedHeaders, ",")`
$DIR/cmd/signature-v4-parser_test.go: `.Set(testCase.inputQueryKeyVals[j], testCase.inputQueryKeyVals[j+1])`
$DIR/cmd/signature-v4-parser_test.go: `.Format(yyyymmdd)`
$DIR/cmd/signature-v4-parser_test.go: `.Format(iso8601Format)`
$DIR/cmd/signature-v4-parser_test.go: `.UTC()`
$DIR/cmd/signature-v4-parser_test.go: `.Format(iso8601Format)`
$DIR/cmd/signature-v4-parser_test.go: `.UTC()`
$DIR/cmd/signature-v4-parser_test.go: `.Format(iso8601Format)`
$DIR/cmd/signature-v4-parser_test.go: `.UTC()`
$DIR/cmd/signature-v4-parser_test.go: `.Format(iso8601Format)`
$DIR/cmd/signature-v4-parser_test.go: `.UTC()`
$DIR/cmd/signature-v4-parser_test.go: `.Format(iso8601Format)`
$DIR/cmd/signature-v4-parser_test.go: `.Set(testCase.inputQueryKeyVals[j], testCase.inputQueryKeyVals[j+1])`
$DIR/cmd/signature-v4-parser_test.go: `.Join(testCase.expectedPreSignValues.SignedHeaders, ",")`
$DIR/cmd/signature-v4-parser_test.go: `.Join(parsedPreSign.SignedHeaders, ",")`
$DIR/cmd/signature-v4-parser_test.go: `.expectedPreSignValues.Date.UTC()`
$DIR/cmd/signature-v4-parser_test.go: `.Format(iso8601Format)`
$DIR/cmd/signature-v4-parser_test.go: `.Date.UTC()`
$DIR/cmd/signature-v4-parser_test.go: `.Format(iso8601Format)`
$DIR/cmd/signature-v4-utils_test.go: `initAllSubsystems(ctx)`
$DIR/cmd/signature-v4-utils_test.go: `initConfigSubsystem(ctx, objLayer)`
$DIR/cmd/signature-v4-utils_test.go: `globalIAMSys.Init(ctx, objLayer, globalEtcdClient, 2*time.Second)`
$DIR/cmd/signature-v4-utils_test.go: `_, _, s3Err = checkKeyValid(req, "does-not-exist")`
$DIR/cmd/signature-v4-utils_test.go: `_, err = globalIAMSys.CreateUser(ctx, ucreds.AccessKey, madmin.AddOrUpdateUserReq{
		SecretKey: ucreds.SecretKey,
		Status:    madmin.AccountEnabled,
	})`
$DIR/cmd/signature-v4-utils_test.go: `_, owner, s3Err = checkKeyValid(req, ucreds.AccessKey)`
$DIR/cmd/signature-v4-utils_test.go: `_, err = globalIAMSys.PolicyDBSet(ctx, ucreds.AccessKey, "consoleAdmin", regUser, false)`
$DIR/cmd/signature-v4-utils_test.go: `time.Sleep(4 * time.Second)`
$DIR/cmd/signature-v4-utils_test.go: `q.Add(testCase.inputQueryKey, testCase.inputQueryValue)`
$DIR/cmd/signature-v4-utils_test.go: `q.Add(testCase.inputHeaderKey, testCase.inputHeaderValue)`
$DIR/cmd/signature-v4-utils_test.go: `inputReq.URL.RawQuery = q.Encode()`
$DIR/cmd/signature-v4-utils_test.go: `inputReq.Header.Set(testCase.inputHeaderKey, testCase.inputHeaderValue)`
$DIR/cmd/signature-v4-utils_test.go: `inputReq.ParseForm()`
$DIR/cmd/signature-v4-utils_test.go: `signedHeaders = append(signedHeaders, "expect")`
$DIR/cmd/signature-v4-utils_test.go: `r.TransferEncoding = []string{expectedTransferEncoding}`
$DIR/cmd/signature-v4-utils_test.go: `inputHeader.Set("x-amz-content-sha256", expectedContentSha256)`
$DIR/cmd/signature-v4-utils_test.go: `inputHeader.Set("x-amz-date", expectedTime)`
$DIR/cmd/signature-v4-utils_test.go: `signedHeaders = append(signedHeaders, "x-amz-server-side-encryption")`
$DIR/cmd/signature-v4-utils_test.go: `_, errCode = extractSignedHeaders(signedHeaders, r)`
$DIR/cmd/signature-v4-utils_test.go: `inputQuery.Add("x-amz-server-side-encryption", xhttp.AmzEncryptionAES)`
$DIR/cmd/signature-v4-utils_test.go: `r.URL.RawQuery = inputQuery.Encode()`
$DIR/cmd/signature-v4-utils_test.go: `r.ParseForm()`
$DIR/cmd/signature-v4-utils_test.go: `_, errCode = extractSignedHeaders(signedHeaders, r)`
$DIR/cmd/signature-v4-utils_test.go: `signedHeaders = append(signedHeaders, "X-Amz-Credential")`
$DIR/cmd/signature-v4-utils_test.go: `_, errCode = extractSignedHeaders(signedHeaders, r)`
$DIR/cmd/signature-v4-utils_test.go: `signedHeaders = signedHeaders[2:5]`
$DIR/cmd/signature-v4-utils_test.go: `_, errCode = extractSignedHeaders(signedHeaders, r)`
$DIR/cmd/signature-v4-utils_test.go: `r.Header.Set("x-amz-content-sha256", testCase.h)`
$DIR/cmd/signature-v4-utils_test.go: `r.ParseForm()`
$DIR/cmd/signature-v4-utils_test.go: `inputHeader.Set("X-Amz-Meta-Test", expectedMetaTest)`
$DIR/cmd/signature-v4-utils_test.go: `inputHeader.Set("X-Amz-Meta-Extension", expectedMetaExtension)`
$DIR/cmd/signature-v4-utils_test.go: `inputHeader.Set("X-Amz-Meta-Name", expectedMetaName)`
$DIR/cmd/signature-v4-utils_test.go: `inputHeader.Set("X-Amz-Meta-Clone", "fail")`
$DIR/cmd/signature-v4-utils_test.go: `errCode = checkMetaHeaders(signedHeadersMap, r)`
$DIR/cmd/signature-v4-utils_test.go: `inputHeader.Del("X-Amz-Meta-Clone")`
$DIR/cmd/signature-v4-utils_test.go: `errCode = checkMetaHeaders(signedHeadersMap, r)`
$DIR/cmd/signature-v4-utils_test.go: `r, err = http.NewRequest(http.MethodPut, "http://play.min.io:9000?x-amz-meta-test=test&x-amz-meta-extension=png&x-amz-meta-name=imagepng", nil)`
$DIR/cmd/signature-v4-utils_test.go: `r.ParseForm()`
$DIR/cmd/signature-v4-utils_test.go: `errCode = checkMetaHeaders(signedHeadersMap, r)`
$DIR/cmd/signature-v4-utils_test.go: `.WithCancel(context.Background())`
$DIR/cmd/signature-v4-utils_test.go: `.Background()`
$DIR/cmd/signature-v4-utils_test.go: `.RemoveAll(fsDir)`
$DIR/cmd/signature-v4-utils_test.go: `.Init(ctx, objLayer, globalEtcdClient, 2*time.Second)`
$DIR/cmd/signature-v4-utils_test.go: `.CreateCredentials("myuser1", "mypassword1")`
$DIR/cmd/signature-v4-utils_test.go: `.CreateUser(ctx, ucreds.AccessKey, madmin.AddOrUpdateUserReq{
		SecretKey: ucreds.SecretKey,
		Status:    madmin.AccountEnabled,
	})`
$DIR/cmd/signature-v4-utils_test.go: `.PolicyDBSet(ctx, ucreds.AccessKey, "consoleAdmin", regUser, false)`
$DIR/cmd/signature-v4-utils_test.go: `.Sleep(4 * time.Second)`
$DIR/cmd/signature-v4-utils_test.go: `.PolicyDBGet(ucreds.AccessKey)`
$DIR/cmd/signature-v4-utils_test.go: `.NewRequest(http.MethodGet, "http://example.com", nil)`
$DIR/cmd/signature-v4-utils_test.go: `.URL.Query()`
$DIR/cmd/signature-v4-utils_test.go: `.Add(testCase.inputQueryKey, testCase.inputQueryValue)`
$DIR/cmd/signature-v4-utils_test.go: `.Add(testCase.inputHeaderKey, testCase.inputHeaderValue)`
$DIR/cmd/signature-v4-utils_test.go: `.Encode()`
$DIR/cmd/signature-v4-utils_test.go: `.Header.Set(testCase.inputHeaderKey, testCase.inputHeaderValue)`
$DIR/cmd/signature-v4-utils_test.go: `.ParseForm()`
$DIR/cmd/signature-v4-utils_test.go: `.Format(iso8601Format)`
$DIR/cmd/signature-v4-utils_test.go: `.NewRequest(http.MethodGet, "http://play.min.io:9000", nil)`
$DIR/cmd/signature-v4-utils_test.go: `.Set("x-amz-content-sha256", expectedContentSha256)`
$DIR/cmd/signature-v4-utils_test.go: `.Set("x-amz-date", expectedTime)`
$DIR/cmd/signature-v4-utils_test.go: `.URL.Query()`
$DIR/cmd/signature-v4-utils_test.go: `.Add("x-amz-server-side-encryption", xhttp.AmzEncryptionAES)`
$DIR/cmd/signature-v4-utils_test.go: `.Encode()`
$DIR/cmd/signature-v4-utils_test.go: `.ParseForm()`
$DIR/cmd/signature-v4-utils_test.go: `.Get("x-amz-content-sha256")`
$DIR/cmd/signature-v4-utils_test.go: `.Get("host")`
$DIR/cmd/signature-v4-utils_test.go: `.Get("x-amz-date")`
$DIR/cmd/signature-v4-utils_test.go: `.Get("expect")`
$DIR/cmd/signature-v4-utils_test.go: `.Get("transfer-encoding")`
$DIR/cmd/signature-v4-utils_test.go: `.NewRequest(http.MethodGet, "http://localhost/?"+testCase.q, nil)`
$DIR/cmd/signature-v4-utils_test.go: `.Header.Set("x-amz-content-sha256", testCase.h)`
$DIR/cmd/signature-v4-utils_test.go: `.ParseForm()`
$DIR/cmd/signature-v4-utils_test.go: `.NewRequest(http.MethodPut, "http://play.min.io:9000", nil)`
$DIR/cmd/signature-v4-utils_test.go: `.Set("X-Amz-Meta-Test", expectedMetaTest)`
$DIR/cmd/signature-v4-utils_test.go: `.Set("X-Amz-Meta-Extension", expectedMetaExtension)`
$DIR/cmd/signature-v4-utils_test.go: `.Set("X-Amz-Meta-Name", expectedMetaName)`
$DIR/cmd/signature-v4-utils_test.go: `.Set("X-Amz-Meta-Clone", "fail")`
$DIR/cmd/signature-v4-utils_test.go: `.Del("X-Amz-Meta-Clone")`
$DIR/cmd/signature-v4-utils_test.go: `.NewRequest(http.MethodPut, "http://play.min.io:9000?x-amz-meta-test=test&x-amz-meta-extension=png&x-amz-meta-name=imagepng", nil)`
$DIR/cmd/signature-v4-utils_test.go: `.ParseForm()`
$DIR/cmd/signature-v4_test.go: `query.Set(key, value)`
$DIR/cmd/signature-v4_test.go: `req.Header.Set(key, value)`
$DIR/cmd/signature-v4_test.go: `req.ParseForm()`
$DIR/cmd/signature-v4_test.go: `.Sprintf(credentialTemplate, "EXAMPLEINVALIDEXAMPL", now.Format(yyyymmdd), globalMinioDefaultRegion)`
$DIR/cmd/signature-v4_test.go: `.Format(yyyymmdd)`
$DIR/cmd/signature-v4_test.go: `.Sprintf(credentialTemplate, accessKey, now.Format(yyyymmdd), globalMinioDefaultRegion)`
$DIR/cmd/signature-v4_test.go: `.Format(yyyymmdd)`
$DIR/cmd/signature-v4_test.go: `.Format(iso8601Format)`
$DIR/cmd/signature-v4_test.go: `.Sprintf(credentialTemplate, accessKey, now.Format(yyyymmdd), globalMinioDefaultRegion)`
$DIR/cmd/signature-v4_test.go: `.Format(yyyymmdd)`
$DIR/cmd/signature-v4_test.go: `.Format(iso8601Format)`
$DIR/cmd/signature-v4_test.go: `.WithCancel(context.Background())`
$DIR/cmd/signature-v4_test.go: `.Background()`
$DIR/cmd/signature-v4_test.go: `.RemoveAll(fsDir)`
$DIR/cmd/signature-v4_test.go: `.Region()`
$DIR/cmd/signature-v4_test.go: `.Format(iso8601Format)`
$DIR/cmd/signature-v4_test.go: `.Sprintf(credentialTemplate, "Z7IXGOO6BZ0REAN1Q26I", now.Format(yyyymmdd), "us-west-1")`
$DIR/cmd/signature-v4_test.go: `.Format(yyyymmdd)`
$DIR/cmd/signature-v4_test.go: `.Format(iso8601Format)`
$DIR/cmd/signature-v4_test.go: `.Sprintf(credentialTemplate, accessKeyID, now.Format(yyyymmdd), "us-west-1")`
$DIR/cmd/signature-v4_test.go: `.Format(yyyymmdd)`
$DIR/cmd/signature-v4_test.go: `.Format(iso8601Format)`
$DIR/cmd/signature-v4_test.go: `.Sprintf(credentialTemplate, accessKeyID, now.Format(yyyymmdd), region)`
$DIR/cmd/signature-v4_test.go: `.Format(yyyymmdd)`
$DIR/cmd/signature-v4_test.go: `.AddDate(0, 0, -2)`
$DIR/cmd/signature-v4_test.go: `.Format(iso8601Format)`
$DIR/cmd/signature-v4_test.go: `.Sprintf(credentialTemplate, accessKeyID, now.Format(yyyymmdd), region)`
$DIR/cmd/signature-v4_test.go: `.Format(yyyymmdd)`
$DIR/cmd/signature-v4_test.go: `.AddDate(0, 0, -2)`
$DIR/cmd/signature-v4_test.go: `.Format(iso8601Format)`
$DIR/cmd/signature-v4_test.go: `.Format(iso8601Format)`
$DIR/cmd/signature-v4_test.go: `.Sprintf(credentialTemplate, accessKeyID, now.Format(yyyymmdd), region)`
$DIR/cmd/signature-v4_test.go: `.Format(yyyymmdd)`
$DIR/cmd/signature-v4_test.go: `.Format(iso8601Format)`
$DIR/cmd/signature-v4_test.go: `.Add(1 * time.Hour)`
$DIR/cmd/signature-v4_test.go: `.Format(iso8601Format)`
$DIR/cmd/signature-v4_test.go: `.Sprintf(credentialTemplate, accessKeyID, now.Format(yyyymmdd), region)`
$DIR/cmd/signature-v4_test.go: `.Format(yyyymmdd)`
$DIR/cmd/signature-v4_test.go: `.Format(iso8601Format)`
$DIR/cmd/signature-v4_test.go: `.Format(iso8601Format)`
$DIR/cmd/signature-v4_test.go: `.Sprintf(credentialTemplate, accessKeyID, now.Format(yyyymmdd), region)`
$DIR/cmd/signature-v4_test.go: `.Format(yyyymmdd)`
$DIR/cmd/signature-v4_test.go: `.Format(iso8601Format)`
$DIR/cmd/signature-v4_test.go: `.Format(iso8601Format)`
$DIR/cmd/signature-v4_test.go: `.Sprintf(credentialTemplate, accessKeyID, now.Format(yyyymmdd), region)`
$DIR/cmd/signature-v4_test.go: `.Format(yyyymmdd)`
$DIR/cmd/signature-v4_test.go: `.Format(iso8601Format)`
$DIR/cmd/signature-v4_test.go: `.Format(iso8601Format)`
$DIR/cmd/signature-v4_test.go: `.Sprintf(credentialTemplate, accessKeyID, now.Format(yyyymmdd), region)`
$DIR/cmd/signature-v4_test.go: `.Format(yyyymmdd)`
$DIR/cmd/signature-v4_test.go: `.Format(iso8601Format)`
$DIR/cmd/signature-v4_test.go: `.Set(key, value)`
$DIR/cmd/signature-v4_test.go: `.NewRequest(http.MethodGet, "http://host/a/b?"+query.Encode(), nil)`
$DIR/cmd/signature-v4_test.go: `.Encode()`
$DIR/cmd/signature-v4_test.go: `.Header.Set(key, value)`
$DIR/cmd/signature-v4_test.go: `.ParseForm()`
$DIR/cmd/site-replication-metrics_gen_test.go: `left, err = msgp.Skip(bts)`
$DIR/cmd/site-replication-metrics_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/site-replication-metrics_gen_test.go: `buf.Reset()`
$DIR/cmd/site-replication-metrics_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/site-replication-metrics_gen_test.go: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/site-replication-metrics_gen_test.go: `left, err = msgp.Skip(bts)`
$DIR/cmd/site-replication-metrics_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/site-replication-metrics_gen_test.go: `buf.Reset()`
$DIR/cmd/site-replication-metrics_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/site-replication-metrics_gen_test.go: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/site-replication-metrics_gen_test.go: `left, err = msgp.Skip(bts)`
$DIR/cmd/site-replication-metrics_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/site-replication-metrics_gen_test.go: `buf.Reset()`
$DIR/cmd/site-replication-metrics_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/site-replication-metrics_gen_test.go: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/site-replication-metrics_gen_test.go: `left, err = msgp.Skip(bts)`
$DIR/cmd/site-replication-metrics_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/site-replication-metrics_gen_test.go: `buf.Reset()`
$DIR/cmd/site-replication-metrics_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/site-replication-metrics_gen_test.go: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/site-replication-metrics_gen_test.go: `left, err = msgp.Skip(bts)`
$DIR/cmd/site-replication-metrics_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/site-replication-metrics_gen_test.go: `buf.Reset()`
$DIR/cmd/site-replication-metrics_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/site-replication-metrics_gen_test.go: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/site-replication-metrics_gen_test.go: `left, err = msgp.Skip(bts)`
$DIR/cmd/site-replication-metrics_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/site-replication-metrics_gen_test.go: `buf.Reset()`
$DIR/cmd/site-replication-metrics_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/site-replication-metrics_gen_test.go: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/site-replication-metrics_gen_test.go: `.MarshalMsg(nil)`
$DIR/cmd/site-replication-metrics_gen_test.go: `.UnmarshalMsg(bts)`
$DIR/cmd/site-replication-metrics_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/site-replication-metrics_gen_test.go: `.Msgsize()`
$DIR/cmd/site-replication-metrics_gen_test.go: `.Len()`
$DIR/cmd/site-replication-metrics_gen_test.go: `.Decode(&buf, &vn)`
$DIR/cmd/site-replication-metrics_gen_test.go: `.Reset()`
$DIR/cmd/site-replication-metrics_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/site-replication-metrics_gen_test.go: `.MarshalMsg(nil)`
$DIR/cmd/site-replication-metrics_gen_test.go: `.UnmarshalMsg(bts)`
$DIR/cmd/site-replication-metrics_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/site-replication-metrics_gen_test.go: `.Msgsize()`
$DIR/cmd/site-replication-metrics_gen_test.go: `.Len()`
$DIR/cmd/site-replication-metrics_gen_test.go: `.Decode(&buf, &vn)`
$DIR/cmd/site-replication-metrics_gen_test.go: `.Reset()`
$DIR/cmd/site-replication-metrics_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/site-replication-metrics_gen_test.go: `.MarshalMsg(nil)`
$DIR/cmd/site-replication-metrics_gen_test.go: `.UnmarshalMsg(bts)`
$DIR/cmd/site-replication-metrics_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/site-replication-metrics_gen_test.go: `.Msgsize()`
$DIR/cmd/site-replication-metrics_gen_test.go: `.Len()`
$DIR/cmd/site-replication-metrics_gen_test.go: `.Decode(&buf, &vn)`
$DIR/cmd/site-replication-metrics_gen_test.go: `.Reset()`
$DIR/cmd/site-replication-metrics_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/site-replication-metrics_gen_test.go: `.MarshalMsg(nil)`
$DIR/cmd/site-replication-metrics_gen_test.go: `.UnmarshalMsg(bts)`
$DIR/cmd/site-replication-metrics_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/site-replication-metrics_gen_test.go: `.Msgsize()`
$DIR/cmd/site-replication-metrics_gen_test.go: `.Len()`
$DIR/cmd/site-replication-metrics_gen_test.go: `.Decode(&buf, &vn)`
$DIR/cmd/site-replication-metrics_gen_test.go: `.Reset()`
$DIR/cmd/site-replication-metrics_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/site-replication-metrics_gen_test.go: `.MarshalMsg(nil)`
$DIR/cmd/site-replication-metrics_gen_test.go: `.UnmarshalMsg(bts)`
$DIR/cmd/site-replication-metrics_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/site-replication-metrics_gen_test.go: `.Msgsize()`
$DIR/cmd/site-replication-metrics_gen_test.go: `.Len()`
$DIR/cmd/site-replication-metrics_gen_test.go: `.Decode(&buf, &vn)`
$DIR/cmd/site-replication-metrics_gen_test.go: `.Reset()`
$DIR/cmd/site-replication-metrics_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/site-replication-metrics_gen_test.go: `.MarshalMsg(nil)`
$DIR/cmd/site-replication-metrics_gen_test.go: `.UnmarshalMsg(bts)`
$DIR/cmd/site-replication-metrics_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/site-replication-metrics_gen_test.go: `.Msgsize()`
$DIR/cmd/site-replication-metrics_gen_test.go: `.Len()`
$DIR/cmd/site-replication-metrics_gen_test.go: `.Decode(&buf, &vn)`
$DIR/cmd/site-replication-metrics_gen_test.go: `.Reset()`
$DIR/cmd/site-replication-metrics_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/site-replication-utils_gen_test.go: `left, err = msgp.Skip(bts)`
$DIR/cmd/site-replication-utils_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/site-replication-utils_gen_test.go: `buf.Reset()`
$DIR/cmd/site-replication-utils_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/site-replication-utils_gen_test.go: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/site-replication-utils_gen_test.go: `.MarshalMsg(nil)`
$DIR/cmd/site-replication-utils_gen_test.go: `.UnmarshalMsg(bts)`
$DIR/cmd/site-replication-utils_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/site-replication-utils_gen_test.go: `.Msgsize()`
$DIR/cmd/site-replication-utils_gen_test.go: `.Len()`
$DIR/cmd/site-replication-utils_gen_test.go: `.Decode(&buf, &vn)`
$DIR/cmd/site-replication-utils_gen_test.go: `.Reset()`
$DIR/cmd/site-replication-utils_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/site-replication_test.go: `.CreateStringSet("dep1", "dep2", "dep3")`
$DIR/cmd/site-replication_test.go: `.CreateStringSet("dep1")`
$DIR/cmd/site-replication_test.go: `.CreateStringSet("dep1", "dep2", "dep3")`
$DIR/cmd/site-replication_test.go: `.CreateStringSet("dep1", "dep2", "dep3", "dep4")`
$DIR/cmd/site-replication_test.go: `.CreateStringSet()`
$DIR/cmd/site-replication_test.go: `.CreateStringSet("dep1", "dep2", "dep3", "dep4")`
$DIR/cmd/storage-datatypes_gen_test.go: `left, err = msgp.Skip(bts)`
$DIR/cmd/storage-datatypes_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go: `buf.Reset()`
$DIR/cmd/storage-datatypes_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/storage-datatypes_gen_test.go: `left, err = msgp.Skip(bts)`
$DIR/cmd/storage-datatypes_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go: `buf.Reset()`
$DIR/cmd/storage-datatypes_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/storage-datatypes_gen_test.go: `left, err = msgp.Skip(bts)`
$DIR/cmd/storage-datatypes_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go: `buf.Reset()`
$DIR/cmd/storage-datatypes_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/storage-datatypes_gen_test.go: `left, err = msgp.Skip(bts)`
$DIR/cmd/storage-datatypes_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go: `buf.Reset()`
$DIR/cmd/storage-datatypes_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/storage-datatypes_gen_test.go: `left, err = msgp.Skip(bts)`
$DIR/cmd/storage-datatypes_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go: `buf.Reset()`
$DIR/cmd/storage-datatypes_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/storage-datatypes_gen_test.go: `left, err = msgp.Skip(bts)`
$DIR/cmd/storage-datatypes_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go: `buf.Reset()`
$DIR/cmd/storage-datatypes_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/storage-datatypes_gen_test.go: `left, err = msgp.Skip(bts)`
$DIR/cmd/storage-datatypes_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go: `buf.Reset()`
$DIR/cmd/storage-datatypes_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/storage-datatypes_gen_test.go: `left, err = msgp.Skip(bts)`
$DIR/cmd/storage-datatypes_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go: `buf.Reset()`
$DIR/cmd/storage-datatypes_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/storage-datatypes_gen_test.go: `left, err = msgp.Skip(bts)`
$DIR/cmd/storage-datatypes_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go: `buf.Reset()`
$DIR/cmd/storage-datatypes_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/storage-datatypes_gen_test.go: `left, err = msgp.Skip(bts)`
$DIR/cmd/storage-datatypes_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go: `buf.Reset()`
$DIR/cmd/storage-datatypes_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/storage-datatypes_gen_test.go: `left, err = msgp.Skip(bts)`
$DIR/cmd/storage-datatypes_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go: `buf.Reset()`
$DIR/cmd/storage-datatypes_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/storage-datatypes_gen_test.go: `left, err = msgp.Skip(bts)`
$DIR/cmd/storage-datatypes_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go: `buf.Reset()`
$DIR/cmd/storage-datatypes_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/storage-datatypes_gen_test.go: `left, err = msgp.Skip(bts)`
$DIR/cmd/storage-datatypes_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go: `buf.Reset()`
$DIR/cmd/storage-datatypes_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/storage-datatypes_gen_test.go: `left, err = msgp.Skip(bts)`
$DIR/cmd/storage-datatypes_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go: `buf.Reset()`
$DIR/cmd/storage-datatypes_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/storage-datatypes_gen_test.go: `left, err = msgp.Skip(bts)`
$DIR/cmd/storage-datatypes_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go: `buf.Reset()`
$DIR/cmd/storage-datatypes_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/storage-datatypes_gen_test.go: `left, err = msgp.Skip(bts)`
$DIR/cmd/storage-datatypes_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go: `buf.Reset()`
$DIR/cmd/storage-datatypes_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/storage-datatypes_gen_test.go: `left, err = msgp.Skip(bts)`
$DIR/cmd/storage-datatypes_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go: `buf.Reset()`
$DIR/cmd/storage-datatypes_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/storage-datatypes_gen_test.go: `left, err = msgp.Skip(bts)`
$DIR/cmd/storage-datatypes_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go: `buf.Reset()`
$DIR/cmd/storage-datatypes_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/storage-datatypes_gen_test.go: `left, err = msgp.Skip(bts)`
$DIR/cmd/storage-datatypes_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go: `buf.Reset()`
$DIR/cmd/storage-datatypes_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/storage-datatypes_gen_test.go: `left, err = msgp.Skip(bts)`
$DIR/cmd/storage-datatypes_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go: `buf.Reset()`
$DIR/cmd/storage-datatypes_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/storage-datatypes_gen_test.go: `left, err = msgp.Skip(bts)`
$DIR/cmd/storage-datatypes_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go: `buf.Reset()`
$DIR/cmd/storage-datatypes_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/storage-datatypes_gen_test.go: `left, err = msgp.Skip(bts)`
$DIR/cmd/storage-datatypes_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go: `buf.Reset()`
$DIR/cmd/storage-datatypes_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/storage-datatypes_gen_test.go: `left, err = msgp.Skip(bts)`
$DIR/cmd/storage-datatypes_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go: `buf.Reset()`
$DIR/cmd/storage-datatypes_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/storage-datatypes_gen_test.go: `left, err = msgp.Skip(bts)`
$DIR/cmd/storage-datatypes_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go: `buf.Reset()`
$DIR/cmd/storage-datatypes_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/storage-datatypes_gen_test.go: `left, err = msgp.Skip(bts)`
$DIR/cmd/storage-datatypes_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go: `buf.Reset()`
$DIR/cmd/storage-datatypes_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/storage-datatypes_gen_test.go: `left, err = msgp.Skip(bts)`
$DIR/cmd/storage-datatypes_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go: `buf.Reset()`
$DIR/cmd/storage-datatypes_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/storage-datatypes_gen_test.go: `left, err = msgp.Skip(bts)`
$DIR/cmd/storage-datatypes_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go: `buf.Reset()`
$DIR/cmd/storage-datatypes_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/storage-datatypes_gen_test.go: `.MarshalMsg(nil)`
$DIR/cmd/storage-datatypes_gen_test.go: `.UnmarshalMsg(bts)`
$DIR/cmd/storage-datatypes_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go: `.Msgsize()`
$DIR/cmd/storage-datatypes_gen_test.go: `.Len()`
$DIR/cmd/storage-datatypes_gen_test.go: `.Decode(&buf, &vn)`
$DIR/cmd/storage-datatypes_gen_test.go: `.Reset()`
$DIR/cmd/storage-datatypes_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go: `.MarshalMsg(nil)`
$DIR/cmd/storage-datatypes_gen_test.go: `.UnmarshalMsg(bts)`
$DIR/cmd/storage-datatypes_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go: `.Msgsize()`
$DIR/cmd/storage-datatypes_gen_test.go: `.Len()`
$DIR/cmd/storage-datatypes_gen_test.go: `.Decode(&buf, &vn)`
$DIR/cmd/storage-datatypes_gen_test.go: `.Reset()`
$DIR/cmd/storage-datatypes_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go: `.MarshalMsg(nil)`
$DIR/cmd/storage-datatypes_gen_test.go: `.UnmarshalMsg(bts)`
$DIR/cmd/storage-datatypes_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go: `.Msgsize()`
$DIR/cmd/storage-datatypes_gen_test.go: `.Len()`
$DIR/cmd/storage-datatypes_gen_test.go: `.Decode(&buf, &vn)`
$DIR/cmd/storage-datatypes_gen_test.go: `.Reset()`
$DIR/cmd/storage-datatypes_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go: `.MarshalMsg(nil)`
$DIR/cmd/storage-datatypes_gen_test.go: `.UnmarshalMsg(bts)`
$DIR/cmd/storage-datatypes_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go: `.Msgsize()`
$DIR/cmd/storage-datatypes_gen_test.go: `.Len()`
$DIR/cmd/storage-datatypes_gen_test.go: `.Decode(&buf, &vn)`
$DIR/cmd/storage-datatypes_gen_test.go: `.Reset()`
$DIR/cmd/storage-datatypes_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go: `.MarshalMsg(nil)`
$DIR/cmd/storage-datatypes_gen_test.go: `.UnmarshalMsg(bts)`
$DIR/cmd/storage-datatypes_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go: `.Msgsize()`
$DIR/cmd/storage-datatypes_gen_test.go: `.Len()`
$DIR/cmd/storage-datatypes_gen_test.go: `.Decode(&buf, &vn)`
$DIR/cmd/storage-datatypes_gen_test.go: `.Reset()`
$DIR/cmd/storage-datatypes_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go: `.MarshalMsg(nil)`
$DIR/cmd/storage-datatypes_gen_test.go: `.UnmarshalMsg(bts)`
$DIR/cmd/storage-datatypes_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go: `.Msgsize()`
$DIR/cmd/storage-datatypes_gen_test.go: `.Len()`
$DIR/cmd/storage-datatypes_gen_test.go: `.Decode(&buf, &vn)`
$DIR/cmd/storage-datatypes_gen_test.go: `.Reset()`
$DIR/cmd/storage-datatypes_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go: `.MarshalMsg(nil)`
$DIR/cmd/storage-datatypes_gen_test.go: `.UnmarshalMsg(bts)`
$DIR/cmd/storage-datatypes_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go: `.Msgsize()`
$DIR/cmd/storage-datatypes_gen_test.go: `.Len()`
$DIR/cmd/storage-datatypes_gen_test.go: `.Decode(&buf, &vn)`
$DIR/cmd/storage-datatypes_gen_test.go: `.Reset()`
$DIR/cmd/storage-datatypes_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go: `.MarshalMsg(nil)`
$DIR/cmd/storage-datatypes_gen_test.go: `.UnmarshalMsg(bts)`
$DIR/cmd/storage-datatypes_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go: `.Msgsize()`
$DIR/cmd/storage-datatypes_gen_test.go: `.Len()`
$DIR/cmd/storage-datatypes_gen_test.go: `.Decode(&buf, &vn)`
$DIR/cmd/storage-datatypes_gen_test.go: `.Reset()`
$DIR/cmd/storage-datatypes_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go: `.MarshalMsg(nil)`
$DIR/cmd/storage-datatypes_gen_test.go: `.UnmarshalMsg(bts)`
$DIR/cmd/storage-datatypes_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go: `.Msgsize()`
$DIR/cmd/storage-datatypes_gen_test.go: `.Len()`
$DIR/cmd/storage-datatypes_gen_test.go: `.Decode(&buf, &vn)`
$DIR/cmd/storage-datatypes_gen_test.go: `.Reset()`
$DIR/cmd/storage-datatypes_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go: `.MarshalMsg(nil)`
$DIR/cmd/storage-datatypes_gen_test.go: `.UnmarshalMsg(bts)`
$DIR/cmd/storage-datatypes_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go: `.Msgsize()`
$DIR/cmd/storage-datatypes_gen_test.go: `.Len()`
$DIR/cmd/storage-datatypes_gen_test.go: `.Decode(&buf, &vn)`
$DIR/cmd/storage-datatypes_gen_test.go: `.Reset()`
$DIR/cmd/storage-datatypes_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go: `.MarshalMsg(nil)`
$DIR/cmd/storage-datatypes_gen_test.go: `.UnmarshalMsg(bts)`
$DIR/cmd/storage-datatypes_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go: `.Msgsize()`
$DIR/cmd/storage-datatypes_gen_test.go: `.Len()`
$DIR/cmd/storage-datatypes_gen_test.go: `.Decode(&buf, &vn)`
$DIR/cmd/storage-datatypes_gen_test.go: `.Reset()`
$DIR/cmd/storage-datatypes_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go: `.MarshalMsg(nil)`
$DIR/cmd/storage-datatypes_gen_test.go: `.UnmarshalMsg(bts)`
$DIR/cmd/storage-datatypes_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go: `.Msgsize()`
$DIR/cmd/storage-datatypes_gen_test.go: `.Len()`
$DIR/cmd/storage-datatypes_gen_test.go: `.Decode(&buf, &vn)`
$DIR/cmd/storage-datatypes_gen_test.go: `.Reset()`
$DIR/cmd/storage-datatypes_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go: `.MarshalMsg(nil)`
$DIR/cmd/storage-datatypes_gen_test.go: `.UnmarshalMsg(bts)`
$DIR/cmd/storage-datatypes_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go: `.Msgsize()`
$DIR/cmd/storage-datatypes_gen_test.go: `.Len()`
$DIR/cmd/storage-datatypes_gen_test.go: `.Decode(&buf, &vn)`
$DIR/cmd/storage-datatypes_gen_test.go: `.Reset()`
$DIR/cmd/storage-datatypes_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go: `.MarshalMsg(nil)`
$DIR/cmd/storage-datatypes_gen_test.go: `.UnmarshalMsg(bts)`
$DIR/cmd/storage-datatypes_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go: `.Msgsize()`
$DIR/cmd/storage-datatypes_gen_test.go: `.Len()`
$DIR/cmd/storage-datatypes_gen_test.go: `.Decode(&buf, &vn)`
$DIR/cmd/storage-datatypes_gen_test.go: `.Reset()`
$DIR/cmd/storage-datatypes_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go: `.MarshalMsg(nil)`
$DIR/cmd/storage-datatypes_gen_test.go: `.UnmarshalMsg(bts)`
$DIR/cmd/storage-datatypes_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go: `.Msgsize()`
$DIR/cmd/storage-datatypes_gen_test.go: `.Len()`
$DIR/cmd/storage-datatypes_gen_test.go: `.Decode(&buf, &vn)`
$DIR/cmd/storage-datatypes_gen_test.go: `.Reset()`
$DIR/cmd/storage-datatypes_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go: `.MarshalMsg(nil)`
$DIR/cmd/storage-datatypes_gen_test.go: `.UnmarshalMsg(bts)`
$DIR/cmd/storage-datatypes_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go: `.Msgsize()`
$DIR/cmd/storage-datatypes_gen_test.go: `.Len()`
$DIR/cmd/storage-datatypes_gen_test.go: `.Decode(&buf, &vn)`
$DIR/cmd/storage-datatypes_gen_test.go: `.Reset()`
$DIR/cmd/storage-datatypes_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go: `.MarshalMsg(nil)`
$DIR/cmd/storage-datatypes_gen_test.go: `.UnmarshalMsg(bts)`
$DIR/cmd/storage-datatypes_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go: `.Msgsize()`
$DIR/cmd/storage-datatypes_gen_test.go: `.Len()`
$DIR/cmd/storage-datatypes_gen_test.go: `.Decode(&buf, &vn)`
$DIR/cmd/storage-datatypes_gen_test.go: `.Reset()`
$DIR/cmd/storage-datatypes_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go: `.MarshalMsg(nil)`
$DIR/cmd/storage-datatypes_gen_test.go: `.UnmarshalMsg(bts)`
$DIR/cmd/storage-datatypes_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go: `.Msgsize()`
$DIR/cmd/storage-datatypes_gen_test.go: `.Len()`
$DIR/cmd/storage-datatypes_gen_test.go: `.Decode(&buf, &vn)`
$DIR/cmd/storage-datatypes_gen_test.go: `.Reset()`
$DIR/cmd/storage-datatypes_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go: `.MarshalMsg(nil)`
$DIR/cmd/storage-datatypes_gen_test.go: `.UnmarshalMsg(bts)`
$DIR/cmd/storage-datatypes_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go: `.Msgsize()`
$DIR/cmd/storage-datatypes_gen_test.go: `.Len()`
$DIR/cmd/storage-datatypes_gen_test.go: `.Decode(&buf, &vn)`
$DIR/cmd/storage-datatypes_gen_test.go: `.Reset()`
$DIR/cmd/storage-datatypes_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go: `.MarshalMsg(nil)`
$DIR/cmd/storage-datatypes_gen_test.go: `.UnmarshalMsg(bts)`
$DIR/cmd/storage-datatypes_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go: `.Msgsize()`
$DIR/cmd/storage-datatypes_gen_test.go: `.Len()`
$DIR/cmd/storage-datatypes_gen_test.go: `.Decode(&buf, &vn)`
$DIR/cmd/storage-datatypes_gen_test.go: `.Reset()`
$DIR/cmd/storage-datatypes_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go: `.MarshalMsg(nil)`
$DIR/cmd/storage-datatypes_gen_test.go: `.UnmarshalMsg(bts)`
$DIR/cmd/storage-datatypes_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go: `.Msgsize()`
$DIR/cmd/storage-datatypes_gen_test.go: `.Len()`
$DIR/cmd/storage-datatypes_gen_test.go: `.Decode(&buf, &vn)`
$DIR/cmd/storage-datatypes_gen_test.go: `.Reset()`
$DIR/cmd/storage-datatypes_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go: `.MarshalMsg(nil)`
$DIR/cmd/storage-datatypes_gen_test.go: `.UnmarshalMsg(bts)`
$DIR/cmd/storage-datatypes_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go: `.Msgsize()`
$DIR/cmd/storage-datatypes_gen_test.go: `.Len()`
$DIR/cmd/storage-datatypes_gen_test.go: `.Decode(&buf, &vn)`
$DIR/cmd/storage-datatypes_gen_test.go: `.Reset()`
$DIR/cmd/storage-datatypes_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go: `.MarshalMsg(nil)`
$DIR/cmd/storage-datatypes_gen_test.go: `.UnmarshalMsg(bts)`
$DIR/cmd/storage-datatypes_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go: `.Msgsize()`
$DIR/cmd/storage-datatypes_gen_test.go: `.Len()`
$DIR/cmd/storage-datatypes_gen_test.go: `.Decode(&buf, &vn)`
$DIR/cmd/storage-datatypes_gen_test.go: `.Reset()`
$DIR/cmd/storage-datatypes_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go: `.MarshalMsg(nil)`
$DIR/cmd/storage-datatypes_gen_test.go: `.UnmarshalMsg(bts)`
$DIR/cmd/storage-datatypes_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go: `.Msgsize()`
$DIR/cmd/storage-datatypes_gen_test.go: `.Len()`
$DIR/cmd/storage-datatypes_gen_test.go: `.Decode(&buf, &vn)`
$DIR/cmd/storage-datatypes_gen_test.go: `.Reset()`
$DIR/cmd/storage-datatypes_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go: `.MarshalMsg(nil)`
$DIR/cmd/storage-datatypes_gen_test.go: `.UnmarshalMsg(bts)`
$DIR/cmd/storage-datatypes_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go: `.Msgsize()`
$DIR/cmd/storage-datatypes_gen_test.go: `.Len()`
$DIR/cmd/storage-datatypes_gen_test.go: `.Decode(&buf, &vn)`
$DIR/cmd/storage-datatypes_gen_test.go: `.Reset()`
$DIR/cmd/storage-datatypes_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go: `.MarshalMsg(nil)`
$DIR/cmd/storage-datatypes_gen_test.go: `.UnmarshalMsg(bts)`
$DIR/cmd/storage-datatypes_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go: `.Msgsize()`
$DIR/cmd/storage-datatypes_gen_test.go: `.Len()`
$DIR/cmd/storage-datatypes_gen_test.go: `.Decode(&buf, &vn)`
$DIR/cmd/storage-datatypes_gen_test.go: `.Reset()`
$DIR/cmd/storage-datatypes_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go: `.MarshalMsg(nil)`
$DIR/cmd/storage-datatypes_gen_test.go: `.UnmarshalMsg(bts)`
$DIR/cmd/storage-datatypes_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go: `.Msgsize()`
$DIR/cmd/storage-datatypes_gen_test.go: `.Len()`
$DIR/cmd/storage-datatypes_gen_test.go: `.Decode(&buf, &vn)`
$DIR/cmd/storage-datatypes_gen_test.go: `.Reset()`
$DIR/cmd/storage-datatypes_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/storage-rest-common_gen_test.go: `left, err = msgp.Skip(bts)`
$DIR/cmd/storage-rest-common_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/storage-rest-common_gen_test.go: `buf.Reset()`
$DIR/cmd/storage-rest-common_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/storage-rest-common_gen_test.go: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/storage-rest-common_gen_test.go: `left, err = msgp.Skip(bts)`
$DIR/cmd/storage-rest-common_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/storage-rest-common_gen_test.go: `buf.Reset()`
$DIR/cmd/storage-rest-common_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/storage-rest-common_gen_test.go: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/storage-rest-common_gen_test.go: `.MarshalMsg(nil)`
$DIR/cmd/storage-rest-common_gen_test.go: `.UnmarshalMsg(bts)`
$DIR/cmd/storage-rest-common_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/storage-rest-common_gen_test.go: `.Msgsize()`
$DIR/cmd/storage-rest-common_gen_test.go: `.Len()`
$DIR/cmd/storage-rest-common_gen_test.go: `.Decode(&buf, &vn)`
$DIR/cmd/storage-rest-common_gen_test.go: `.Reset()`
$DIR/cmd/storage-rest-common_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/storage-rest-common_gen_test.go: `.MarshalMsg(nil)`
$DIR/cmd/storage-rest-common_gen_test.go: `.UnmarshalMsg(bts)`
$DIR/cmd/storage-rest-common_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/storage-rest-common_gen_test.go: `.Msgsize()`
$DIR/cmd/storage-rest-common_gen_test.go: `.Len()`
$DIR/cmd/storage-rest-common_gen_test.go: `.Decode(&buf, &vn)`
$DIR/cmd/storage-rest-common_gen_test.go: `.Reset()`
$DIR/cmd/storage-rest-common_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/streaming-signature-v4_test.go: `tests = append(tests, testCase{in: fmt.Sprintf("%x", i), want: i})`
$DIR/cmd/streaming-signature-v4_test.go: `.NewReader([]byte("1000;chunk-signature=111123333333333333334444211\r\n"))`
$DIR/cmd/streaming-signature-v4_test.go: `.NewReader([]byte("1000;"))`
$DIR/cmd/streaming-signature-v4_test.go: `.NewReader([]byte(fmt.Sprintf("%4097d", 1)))`
$DIR/cmd/streaming-signature-v4_test.go: `.Sprintf("%4097d", 1)`
$DIR/cmd/streaming-signature-v4_test.go: `.NewReader([]byte("1000;chunk-signature=111123333333333333334444211\r\n"))`
$DIR/cmd/streaming-signature-v4_test.go: `.NewReaderSize(readers[0], 16)`
$DIR/cmd/streaming-signature-v4_test.go: `.NewReader(readers[1])`
$DIR/cmd/streaming-signature-v4_test.go: `.NewReader(readers[2])`
$DIR/cmd/streaming-signature-v4_test.go: `.NewReader(readers[3])`
$DIR/cmd/streaming-signature-v4_test.go: `.Equal(chunkSize, tt.chunkSize)`
$DIR/cmd/streaming-signature-v4_test.go: `.Equal(chunkSignature, tt.chunkSignature)`
$DIR/cmd/streaming-signature-v4_test.go: `.Equal(hexChunkSize, tt.chunkSize)`
$DIR/cmd/streaming-signature-v4_test.go: `.Equal(hexChunkSignature, tt.chunkSign)`
$DIR/cmd/streaming-signature-v4_test.go: `.NewReader([]byte("\r\n"))`
$DIR/cmd/streaming-signature-v4_test.go: `.NewReader([]byte("he"))`
$DIR/cmd/streaming-signature-v4_test.go: `.NewReader([]byte("he\r\n"))`
$DIR/cmd/streaming-signature-v4_test.go: `.NewReader([]byte("h"))`
$DIR/cmd/streaming-signature-v4_test.go: `.Sprintf("%x", i)`
$DIR/cmd/streaming-signature-v4_test.go: `.Contains(err.Error(), tt.wantErr)`
$DIR/cmd/sts-handlers_test.go: `testCases = append(testCases,
			newTestSuiteIAM(bt, false),
			newTestSuiteIAM(bt, true),
		)`
$DIR/cmd/sts-handlers_test.go: `etcdStr = " (with etcd backend)"`
$DIR/cmd/sts-handlers_test.go: `t.Run(
			fmt.Sprintf("Test: %d, ServerType: %s%s", i+1, testCase.serverType, etcdStr),
			func(t *testing.T) {
				runAllIAMSTSTests(testCase, &check{t, testCase.serverType})
			},
		)`
$DIR/cmd/sts-handlers_test.go: `runAllIAMSTSTests(testCase, &check{t, testCase.serverType})`
$DIR/cmd/sts-handlers_test.go: `t.Run(
			fmt.Sprintf("Test: %d, ServerType: %s", i+1, testCase.ServerTypeDescription),
			func(t *testing.T) {
				c := &check{t, testCase.serverType}
				suite := testCase

				ldapServer := os.Getenv(EnvTestLDAPServer)
				if ldapServer == "" {
					c.Skipf("Skipping LDAP test as no LDAP server is provided via %s", EnvTestLDAPServer)
				}

				suite.SetUpSuite(c)
				suite.SetUpLDAP(c, ldapServer)
				suite.TestLDAPSTS(c)
				suite.TestLDAPUnicodeVariations(c)
				suite.TestLDAPSTSServiceAccounts(c)
				suite.TestLDAPSTSServiceAccountsWithUsername(c)
				suite.TestLDAPSTSServiceAccountsWithGroups(c)
				suite.TestLDAPAttributesLookup(c)
				suite.TestLDAPCyrillicUser(c)
				suite.TearDownSuite(c)
			},
		)`
$DIR/cmd/sts-handlers_test.go: `suite.SetUpSuite(c)`
$DIR/cmd/sts-handlers_test.go: `suite.SetUpLDAP(c, ldapServer)`
$DIR/cmd/sts-handlers_test.go: `suite.TestLDAPSTS(c)`
$DIR/cmd/sts-handlers_test.go: `suite.TestLDAPUnicodeVariations(c)`
$DIR/cmd/sts-handlers_test.go: `suite.TestLDAPSTSServiceAccounts(c)`
$DIR/cmd/sts-handlers_test.go: `suite.TestLDAPSTSServiceAccountsWithUsername(c)`
$DIR/cmd/sts-handlers_test.go: `suite.TestLDAPSTSServiceAccountsWithGroups(c)`
$DIR/cmd/sts-handlers_test.go: `suite.TestLDAPAttributesLookup(c)`
$DIR/cmd/sts-handlers_test.go: `suite.TestLDAPCyrillicUser(c)`
$DIR/cmd/sts-handlers_test.go: `suite.TearDownSuite(c)`
$DIR/cmd/sts-handlers_test.go: `t.Run(
			fmt.Sprintf("Test: %d, ServerType: %s", i+1, testCase.ServerTypeDescription),
			func(t *testing.T) {
				c := &check{t, testCase.serverType}
				suite := testCase

				ldapServer := os.Getenv(EnvTestLDAPServer)
				if ldapServer == "" {
					c.Skipf("Skipping LDAP test as no LDAP server is provided via %s", EnvTestLDAPServer)
				}

				suite.SetUpSuite(c)
				suite.SetUpLDAPWithNonNormalizedBaseDN(c, ldapServer)
				suite.TestLDAPSTS(c)
				suite.TestLDAPUnicodeVariations(c)
				suite.TestLDAPSTSServiceAccounts(c)
				suite.TestLDAPSTSServiceAccountsWithUsername(c)
				suite.TestLDAPSTSServiceAccountsWithGroups(c)
				suite.TearDownSuite(c)
			},
		)`
$DIR/cmd/sts-handlers_test.go: `suite.SetUpSuite(c)`
$DIR/cmd/sts-handlers_test.go: `suite.SetUpLDAPWithNonNormalizedBaseDN(c, ldapServer)`
$DIR/cmd/sts-handlers_test.go: `suite.TestLDAPSTS(c)`
$DIR/cmd/sts-handlers_test.go: `suite.TestLDAPUnicodeVariations(c)`
$DIR/cmd/sts-handlers_test.go: `suite.TestLDAPSTSServiceAccounts(c)`
$DIR/cmd/sts-handlers_test.go: `suite.TestLDAPSTSServiceAccountsWithUsername(c)`
$DIR/cmd/sts-handlers_test.go: `suite.TestLDAPSTSServiceAccountsWithGroups(c)`
$DIR/cmd/sts-handlers_test.go: `suite.TearDownSuite(c)`
$DIR/cmd/sts-handlers_test.go: `t.Run(
			fmt.Sprintf("Test: %d, ServerType: %s", i+1, testCase.ServerTypeDescription),
			func(t *testing.T) {
				c := &check{t, testCase.serverType}
				suite := testCase

				ldapServer := os.Getenv(EnvTestLDAPServer)
				if ldapServer == "" {
					c.Skipf("Skipping LDAP test as no LDAP server is provided via %s", EnvTestLDAPServer)
				}

				iamTestContentCases := []iamTestContent{
					{
						policies: map[string][]byte{
							"mypolicy": []byte(`{"Version":"2012-10-17","Statement":[{"Effect":"Allow","Action":["s3:GetObject","s3:ListBucket","s3:PutObject"],"Resource":["arn:aws:s3:::mybucket/*"]}]}`),
						},
						ldapUserPolicyMappings: map[string][]string{
							"uid=dillon,ou=people,ou=swengg,dc=min,dc=io": {"mypolicy"},
							"uid=liza,ou=people,ou=swengg,dc=min,dc=io":   {"consoleAdmin"},
						},
						ldapGroupPolicyMappings: map[string][]string{
							"cn=projectb,ou=groups,ou=swengg,dc=min,dc=io": {"mypolicy"},
							"cn=projecta,ou=groups,ou=swengg,dc=min,dc=io": {"consoleAdmin"},
						},
					},
				}

				for caseNum, content := range iamTestContentCases {
					suite.SetUpSuite(c)
					suite.SetUpLDAP(c, ldapServer)
					exportedContent := suite.TestIAMExport(c, caseNum, content)
					suite.TearDownSuite(c)
					suite.SetUpSuite(c)
					suite.SetUpLDAP(c, ldapServer)
					suite.TestIAMImport(c, exportedContent, caseNum, content)
					suite.TearDownSuite(c)
				}
			},
		)`
$DIR/cmd/sts-handlers_test.go: `suite.SetUpSuite(c)`
$DIR/cmd/sts-handlers_test.go: `suite.SetUpLDAP(c, ldapServer)`
$DIR/cmd/sts-handlers_test.go: `suite.TearDownSuite(c)`
$DIR/cmd/sts-handlers_test.go: `suite.SetUpSuite(c)`
$DIR/cmd/sts-handlers_test.go: `suite.SetUpLDAP(c, ldapServer)`
$DIR/cmd/sts-handlers_test.go: `suite.TestIAMImport(c, exportedContent, caseNum, content)`
$DIR/cmd/sts-handlers_test.go: `suite.TearDownSuite(c)`
$DIR/cmd/sts-handlers_test.go: `exportContent[k] = []byte(v)`
$DIR/cmd/sts-handlers_test.go: `adminLogIf(ctx, zerr)`
$DIR/cmd/sts-handlers_test.go: `header.Method = zip.Deflate`
$DIR/cmd/sts-handlers_test.go: `adminLogIf(ctx, zerr)`
$DIR/cmd/sts-handlers_test.go: `adminLogIf(ctx, err)`
$DIR/cmd/sts-handlers_test.go: `importContent = b.Bytes()`
$DIR/cmd/sts-handlers_test.go: `t.Run(
			fmt.Sprintf("Test: %d, ServerType: %s", i+1, testCase.ServerTypeDescription),
			func(t *testing.T) {
				c := &check{t, testCase.serverType}
				suite := testCase

				ldapServer := os.Getenv(EnvTestLDAPServer)
				if ldapServer == "" {
					c.Skipf("Skipping LDAP test as no LDAP server is provided via %s", EnvTestLDAPServer)
				}

				suite.SetUpSuite(c)
				suite.SetUpLDAP(c, ldapServer)
				suite.TestIAMImportAssetContent(c, importContent)
				suite.TearDownSuite(c)
			},
		)`
$DIR/cmd/sts-handlers_test.go: `suite.SetUpSuite(c)`
$DIR/cmd/sts-handlers_test.go: `suite.SetUpLDAP(c, ldapServer)`
$DIR/cmd/sts-handlers_test.go: `suite.TestIAMImportAssetContent(c, importContent)`
$DIR/cmd/sts-handlers_test.go: `suite.TearDownSuite(c)`
$DIR/cmd/sts-handlers_test.go: `t.Run(
			fmt.Sprintf("Test: %d, ServerType: %s", i+1, testCase.ServerTypeDescription),
			func(t *testing.T) {
				c := &check{t, testCase.serverType}
				suite := testCase

				openIDServer := os.Getenv(EnvTestOpenIDServer)
				if openIDServer == "" {
					c.Skip("Skipping OpenID test as no OpenID server is provided.")
				}

				suite.SetUpSuite(c)
				suite.SetUpOpenID(c, openIDServer, "")
				suite.TestOpenIDSTS(c)
				suite.TestOpenIDSTSDurationSeconds(c)
				suite.TestOpenIDServiceAcc(c)
				suite.TestOpenIDSTSAddUser(c)
				suite.TearDownSuite(c)
			},
		)`
$DIR/cmd/sts-handlers_test.go: `suite.SetUpSuite(c)`
$DIR/cmd/sts-handlers_test.go: `suite.SetUpOpenID(c, openIDServer, "")`
$DIR/cmd/sts-handlers_test.go: `suite.TestOpenIDSTS(c)`
$DIR/cmd/sts-handlers_test.go: `suite.TestOpenIDSTSDurationSeconds(c)`
$DIR/cmd/sts-handlers_test.go: `suite.TestOpenIDServiceAcc(c)`
$DIR/cmd/sts-handlers_test.go: `suite.TestOpenIDSTSAddUser(c)`
$DIR/cmd/sts-handlers_test.go: `suite.TearDownSuite(c)`
$DIR/cmd/sts-handlers_test.go: `t.Run(
			fmt.Sprintf("Test: %d, ServerType: %s", i+1, testCase.ServerTypeDescription),
			func(t *testing.T) {
				c := &check{t, testCase.serverType}
				suite := testCase

				openIDServer := os.Getenv(EnvTestOpenIDServer)
				if openIDServer == "" {
					c.Skip("Skipping OpenID test as no OpenID server is provided.")
				}

				suite.SetUpSuite(c)
				suite.SetUpOpenID(c, openIDServer, "readwrite")
				suite.TestOpenIDSTSWithRolePolicy(c, testRoleARNs[0], testRoleMap[testRoleARNs[0]])
				suite.TestOpenIDServiceAccWithRolePolicy(c)
				suite.TearDownSuite(c)
			},
		)`
$DIR/cmd/sts-handlers_test.go: `suite.SetUpSuite(c)`
$DIR/cmd/sts-handlers_test.go: `suite.SetUpOpenID(c, openIDServer, "readwrite")`
$DIR/cmd/sts-handlers_test.go: `suite.TestOpenIDSTSWithRolePolicy(c, testRoleARNs[0], testRoleMap[testRoleARNs[0]])`
$DIR/cmd/sts-handlers_test.go: `suite.TestOpenIDServiceAccWithRolePolicy(c)`
$DIR/cmd/sts-handlers_test.go: `suite.TearDownSuite(c)`
$DIR/cmd/sts-handlers_test.go: `t.Run(
			fmt.Sprintf("Test: %d, ServerType: %s", i+1, testCase.ServerTypeDescription),
			func(t *testing.T) {
				c := &check{t, testCase.serverType}
				suite := testCase

				openIDServer := os.Getenv(EnvTestOpenIDServer)
				if openIDServer == "" {
					c.Skip("Skipping OpenID test as no OpenID server is provided.")
				}

				suite.SetUpSuite(c)
				suite.SetUpOpenID(c, openIDServer, "projecta,projectb,projectaorb")
				suite.TestOpenIDSTSWithRolePolicyWithPolVar(c, testRoleARNs[0], testRoleMap[testRoleARNs[0]])
				suite.TearDownSuite(c)
			},
		)`
$DIR/cmd/sts-handlers_test.go: `suite.SetUpSuite(c)`
$DIR/cmd/sts-handlers_test.go: `suite.SetUpOpenID(c, openIDServer, "projecta,projectb,projectaorb")`
$DIR/cmd/sts-handlers_test.go: `suite.TestOpenIDSTSWithRolePolicyWithPolVar(c, testRoleARNs[0], testRoleMap[testRoleARNs[0]])`
$DIR/cmd/sts-handlers_test.go: `suite.TearDownSuite(c)`
$DIR/cmd/sts-handlers_test.go: `t.Run(
			fmt.Sprintf("Test: %d, ServerType: %s", i+1, testCase.ServerTypeDescription),
			func(t *testing.T) {
				c := &check{t, testCase.serverType}
				suite := testCase

				suite.SetUpSuite(c)
				defer suite.TearDownSuite(c)

				err := suite.SetUpOpenIDs(c, testApps, rolePolicies)
				if err != nil {
					c.Fatalf("config with 1 claim based and 1 role based provider should pass but got: %v", err)
				}
			},
		)`
$DIR/cmd/sts-handlers_test.go: `suite.SetUpSuite(c)`
$DIR/cmd/sts-handlers_test.go: `t.Run(
			fmt.Sprintf("Test: %d, ServerType: %s", i+1, testCase.ServerTypeDescription),
			func(t *testing.T) {
				c := &check{t, testCase.serverType}
				suite := testCase

				suite.SetUpSuite(c)
				defer suite.TearDownSuite(c)

				err := suite.SetUpOpenIDs(c, testApps, rolePolicies)
				if err == nil {
					c.Fatalf("config with 2 claim based provider should fail")
				}
			},
		)`
$DIR/cmd/sts-handlers_test.go: `suite.SetUpSuite(c)`
$DIR/cmd/sts-handlers_test.go: `t.Run(
			fmt.Sprintf("Test: %d, ServerType: %s", i+1, testCase.ServerTypeDescription),
			func(t *testing.T) {
				c := &check{t, testCase.serverType}
				suite := testCase

				suite.SetUpSuite(c)
				err := suite.SetUpOpenIDs(c, testApps, rolePolicies)
				if err != nil {
					c.Fatalf("Error setting up openid providers for tests: %v", err)
				}
				suite.TestOpenIDSTSWithRolePolicy(c, testRoleARNs[0], testRoleMap[testRoleARNs[0]])
				suite.TestOpenIDSTSWithRolePolicy(c, testRoleARNs[1], testRoleMap[testRoleARNs[1]])
				suite.TestOpenIDServiceAccWithRolePolicy(c)
				suite.TearDownSuite(c)
			},
		)`
$DIR/cmd/sts-handlers_test.go: `suite.SetUpSuite(c)`
$DIR/cmd/sts-handlers_test.go: `suite.TestOpenIDSTSWithRolePolicy(c, testRoleARNs[0], testRoleMap[testRoleARNs[0]])`
$DIR/cmd/sts-handlers_test.go: `suite.TestOpenIDSTSWithRolePolicy(c, testRoleARNs[1], testRoleMap[testRoleARNs[1]])`
$DIR/cmd/sts-handlers_test.go: `suite.TestOpenIDServiceAccWithRolePolicy(c)`
$DIR/cmd/sts-handlers_test.go: `suite.TearDownSuite(c)`
$DIR/cmd/sts-handlers_test.go: `t.Run(
			fmt.Sprintf("Test: %d, ServerType: %s", i+1, testCase.ServerTypeDescription),
			func(t *testing.T) {
				c := &check{t, testCase.serverType}
				suite := testCase

				suite.SetUpSuite(c)
				defer suite.TearDownSuite(c)

				err := suite.SetUpOpenIDs(c, testApps, rolePolicies)
				if err != nil {
					c.Fatalf("Error setting up openid providers for tests: %v", err)
				}

				suite.SetUpAccMgmtPlugin(c)

				suite.TestOpenIDSTSWithRolePolicyUnderAMP(c, testRoleARNs[0], testRoleMap[testRoleARNs[0]])
				suite.TestOpenIDSTSWithRolePolicyUnderAMP(c, testRoleARNs[1], testRoleMap[testRoleARNs[1]])
				suite.TestOpenIDServiceAccWithRolePolicyUnderAMP(c)
			},
		)`
$DIR/cmd/sts-handlers_test.go: `suite.SetUpSuite(c)`
$DIR/cmd/sts-handlers_test.go: `suite.SetUpAccMgmtPlugin(c)`
$DIR/cmd/sts-handlers_test.go: `suite.TestOpenIDSTSWithRolePolicyUnderAMP(c, testRoleARNs[0], testRoleMap[testRoleARNs[0]])`
$DIR/cmd/sts-handlers_test.go: `suite.TestOpenIDSTSWithRolePolicyUnderAMP(c, testRoleARNs[1], testRoleMap[testRoleARNs[1]])`
$DIR/cmd/sts-handlers_test.go: `suite.TestOpenIDServiceAccWithRolePolicyUnderAMP(c)`
$DIR/cmd/sts-handlers_test.go: `.Run(
			fmt.Sprintf("Test: %d, ServerType: %s%s", i+1, testCase.serverType, etcdStr),
			func(t *testing.T) {
				runAllIAMSTSTests(testCase, &check{t, testCase.serverType})
			},
		)`
$DIR/cmd/sts-handlers_test.go: `.Sprintf("Test: %d, ServerType: %s%s", i+1, testCase.serverType, etcdStr)`
$DIR/cmd/sts-handlers_test.go: `.Run(
			fmt.Sprintf("Test: %d, ServerType: %s", i+1, testCase.ServerTypeDescription),
			func(t *testing.T) {
				c := &check{t, testCase.serverType}
				suite := testCase

				ldapServer := os.Getenv(EnvTestLDAPServer)
				if ldapServer == "" {
					c.Skipf("Skipping LDAP test as no LDAP server is provided via %s", EnvTestLDAPServer)
				}

				suite.SetUpSuite(c)
				suite.SetUpLDAP(c, ldapServer)
				suite.TestLDAPSTS(c)
				suite.TestLDAPUnicodeVariations(c)
				suite.TestLDAPSTSServiceAccounts(c)
				suite.TestLDAPSTSServiceAccountsWithUsername(c)
				suite.TestLDAPSTSServiceAccountsWithGroups(c)
				suite.TestLDAPAttributesLookup(c)
				suite.TestLDAPCyrillicUser(c)
				suite.TearDownSuite(c)
			},
		)`
$DIR/cmd/sts-handlers_test.go: `.Sprintf("Test: %d, ServerType: %s", i+1, testCase.ServerTypeDescription)`
$DIR/cmd/sts-handlers_test.go: `.Getenv(EnvTestLDAPServer)`
$DIR/cmd/sts-handlers_test.go: `.SetUpSuite(c)`
$DIR/cmd/sts-handlers_test.go: `.SetUpLDAP(c, ldapServer)`
$DIR/cmd/sts-handlers_test.go: `.TestLDAPSTS(c)`
$DIR/cmd/sts-handlers_test.go: `.TestLDAPUnicodeVariations(c)`
$DIR/cmd/sts-handlers_test.go: `.TestLDAPSTSServiceAccounts(c)`
$DIR/cmd/sts-handlers_test.go: `.TestLDAPSTSServiceAccountsWithUsername(c)`
$DIR/cmd/sts-handlers_test.go: `.TestLDAPSTSServiceAccountsWithGroups(c)`
$DIR/cmd/sts-handlers_test.go: `.TestLDAPAttributesLookup(c)`
$DIR/cmd/sts-handlers_test.go: `.TestLDAPCyrillicUser(c)`
$DIR/cmd/sts-handlers_test.go: `.TearDownSuite(c)`
$DIR/cmd/sts-handlers_test.go: `.Run(
			fmt.Sprintf("Test: %d, ServerType: %s", i+1, testCase.ServerTypeDescription),
			func(t *testing.T) {
				c := &check{t, testCase.serverType}
				suite := testCase

				ldapServer := os.Getenv(EnvTestLDAPServer)
				if ldapServer == "" {
					c.Skipf("Skipping LDAP test as no LDAP server is provided via %s", EnvTestLDAPServer)
				}

				suite.SetUpSuite(c)
				suite.SetUpLDAPWithNonNormalizedBaseDN(c, ldapServer)
				suite.TestLDAPSTS(c)
				suite.TestLDAPUnicodeVariations(c)
				suite.TestLDAPSTSServiceAccounts(c)
				suite.TestLDAPSTSServiceAccountsWithUsername(c)
				suite.TestLDAPSTSServiceAccountsWithGroups(c)
				suite.TearDownSuite(c)
			},
		)`
$DIR/cmd/sts-handlers_test.go: `.Sprintf("Test: %d, ServerType: %s", i+1, testCase.ServerTypeDescription)`
$DIR/cmd/sts-handlers_test.go: `.Getenv(EnvTestLDAPServer)`
$DIR/cmd/sts-handlers_test.go: `.SetUpSuite(c)`
$DIR/cmd/sts-handlers_test.go: `.SetUpLDAPWithNonNormalizedBaseDN(c, ldapServer)`
$DIR/cmd/sts-handlers_test.go: `.TestLDAPSTS(c)`
$DIR/cmd/sts-handlers_test.go: `.TestLDAPUnicodeVariations(c)`
$DIR/cmd/sts-handlers_test.go: `.TestLDAPSTSServiceAccounts(c)`
$DIR/cmd/sts-handlers_test.go: `.TestLDAPSTSServiceAccountsWithUsername(c)`
$DIR/cmd/sts-handlers_test.go: `.TestLDAPSTSServiceAccountsWithGroups(c)`
$DIR/cmd/sts-handlers_test.go: `.TearDownSuite(c)`
$DIR/cmd/sts-handlers_test.go: `.Run(
			fmt.Sprintf("Test: %d, ServerType: %s", i+1, testCase.ServerTypeDescription),
			func(t *testing.T) {
				c := &check{t, testCase.serverType}
				suite := testCase

				ldapServer := os.Getenv(EnvTestLDAPServer)
				if ldapServer == "" {
					c.Skipf("Skipping LDAP test as no LDAP server is provided via %s", EnvTestLDAPServer)
				}

				iamTestContentCases := []iamTestContent{
					{
						policies: map[string][]byte{
							"mypolicy": []byte(`{"Version":"2012-10-17","Statement":[{"Effect":"Allow","Action":["s3:GetObject","s3:ListBucket","s3:PutObject"],"Resource":["arn:aws:s3:::mybucket/*"]}]}`),
						},
						ldapUserPolicyMappings: map[string][]string{
							"uid=dillon,ou=people,ou=swengg,dc=min,dc=io": {"mypolicy"},
							"uid=liza,ou=people,ou=swengg,dc=min,dc=io":   {"consoleAdmin"},
						},
						ldapGroupPolicyMappings: map[string][]string{
							"cn=projectb,ou=groups,ou=swengg,dc=min,dc=io": {"mypolicy"},
							"cn=projecta,ou=groups,ou=swengg,dc=min,dc=io": {"consoleAdmin"},
						},
					},
				}

				for caseNum, content := range iamTestContentCases {
					suite.SetUpSuite(c)
					suite.SetUpLDAP(c, ldapServer)
					exportedContent := suite.TestIAMExport(c, caseNum, content)
					suite.TearDownSuite(c)
					suite.SetUpSuite(c)
					suite.SetUpLDAP(c, ldapServer)
					suite.TestIAMImport(c, exportedContent, caseNum, content)
					suite.TearDownSuite(c)
				}
			},
		)`
$DIR/cmd/sts-handlers_test.go: `.Sprintf("Test: %d, ServerType: %s", i+1, testCase.ServerTypeDescription)`
$DIR/cmd/sts-handlers_test.go: `.Getenv(EnvTestLDAPServer)`
$DIR/cmd/sts-handlers_test.go: `.SetUpSuite(c)`
$DIR/cmd/sts-handlers_test.go: `.SetUpLDAP(c, ldapServer)`
$DIR/cmd/sts-handlers_test.go: `.TestIAMExport(c, caseNum, content)`
$DIR/cmd/sts-handlers_test.go: `.TearDownSuite(c)`
$DIR/cmd/sts-handlers_test.go: `.SetUpSuite(c)`
$DIR/cmd/sts-handlers_test.go: `.SetUpLDAP(c, ldapServer)`
$DIR/cmd/sts-handlers_test.go: `.TestIAMImport(c, exportedContent, caseNum, content)`
$DIR/cmd/sts-handlers_test.go: `.TearDownSuite(c)`
$DIR/cmd/sts-handlers_test.go: `.WithTimeout(context.Background(), testDefaultTimeout)`
$DIR/cmd/sts-handlers_test.go: `.Background()`
$DIR/cmd/sts-handlers_test.go: `.NewWriter(&b)`
$DIR/cmd/sts-handlers_test.go: `.FileInfoHeader(dummyFileInfo{
				name:    filename,
				size:    int64(sz),
				mode:    0o600,
				modTime: time.Now(),
				isDir:   false,
				sys:     nil,
			})`
$DIR/cmd/sts-handlers_test.go: `.Now()`
$DIR/cmd/sts-handlers_test.go: `.CreateHeader(header)`
$DIR/cmd/sts-handlers_test.go: `.Copy(zwriter, r)`
$DIR/cmd/sts-handlers_test.go: `.NewReader(fileContent)`
$DIR/cmd/sts-handlers_test.go: `.Bytes()`
$DIR/cmd/sts-handlers_test.go: `.Run(
			fmt.Sprintf("Test: %d, ServerType: %s", i+1, testCase.ServerTypeDescription),
			func(t *testing.T) {
				c := &check{t, testCase.serverType}
				suite := testCase

				ldapServer := os.Getenv(EnvTestLDAPServer)
				if ldapServer == "" {
					c.Skipf("Skipping LDAP test as no LDAP server is provided via %s", EnvTestLDAPServer)
				}

				suite.SetUpSuite(c)
				suite.SetUpLDAP(c, ldapServer)
				suite.TestIAMImportAssetContent(c, importContent)
				suite.TearDownSuite(c)
			},
		)`
$DIR/cmd/sts-handlers_test.go: `.Sprintf("Test: %d, ServerType: %s", i+1, testCase.ServerTypeDescription)`
$DIR/cmd/sts-handlers_test.go: `.Getenv(EnvTestLDAPServer)`
$DIR/cmd/sts-handlers_test.go: `.SetUpSuite(c)`
$DIR/cmd/sts-handlers_test.go: `.SetUpLDAP(c, ldapServer)`
$DIR/cmd/sts-handlers_test.go: `.TestIAMImportAssetContent(c, importContent)`
$DIR/cmd/sts-handlers_test.go: `.TearDownSuite(c)`
$DIR/cmd/sts-handlers_test.go: `.Run(
			fmt.Sprintf("Test: %d, ServerType: %s", i+1, testCase.ServerTypeDescription),
			func(t *testing.T) {
				c := &check{t, testCase.serverType}
				suite := testCase

				openIDServer := os.Getenv(EnvTestOpenIDServer)
				if openIDServer == "" {
					c.Skip("Skipping OpenID test as no OpenID server is provided.")
				}

				suite.SetUpSuite(c)
				suite.SetUpOpenID(c, openIDServer, "")
				suite.TestOpenIDSTS(c)
				suite.TestOpenIDSTSDurationSeconds(c)
				suite.TestOpenIDServiceAcc(c)
				suite.TestOpenIDSTSAddUser(c)
				suite.TearDownSuite(c)
			},
		)`
$DIR/cmd/sts-handlers_test.go: `.Sprintf("Test: %d, ServerType: %s", i+1, testCase.ServerTypeDescription)`
$DIR/cmd/sts-handlers_test.go: `.Getenv(EnvTestOpenIDServer)`
$DIR/cmd/sts-handlers_test.go: `.SetUpSuite(c)`
$DIR/cmd/sts-handlers_test.go: `.SetUpOpenID(c, openIDServer, "")`
$DIR/cmd/sts-handlers_test.go: `.TestOpenIDSTS(c)`
$DIR/cmd/sts-handlers_test.go: `.TestOpenIDSTSDurationSeconds(c)`
$DIR/cmd/sts-handlers_test.go: `.TestOpenIDServiceAcc(c)`
$DIR/cmd/sts-handlers_test.go: `.TestOpenIDSTSAddUser(c)`
$DIR/cmd/sts-handlers_test.go: `.TearDownSuite(c)`
$DIR/cmd/sts-handlers_test.go: `.Run(
			fmt.Sprintf("Test: %d, ServerType: %s", i+1, testCase.ServerTypeDescription),
			func(t *testing.T) {
				c := &check{t, testCase.serverType}
				suite := testCase

				openIDServer := os.Getenv(EnvTestOpenIDServer)
				if openIDServer == "" {
					c.Skip("Skipping OpenID test as no OpenID server is provided.")
				}

				suite.SetUpSuite(c)
				suite.SetUpOpenID(c, openIDServer, "readwrite")
				suite.TestOpenIDSTSWithRolePolicy(c, testRoleARNs[0], testRoleMap[testRoleARNs[0]])
				suite.TestOpenIDServiceAccWithRolePolicy(c)
				suite.TearDownSuite(c)
			},
		)`
$DIR/cmd/sts-handlers_test.go: `.Sprintf("Test: %d, ServerType: %s", i+1, testCase.ServerTypeDescription)`
$DIR/cmd/sts-handlers_test.go: `.Getenv(EnvTestOpenIDServer)`
$DIR/cmd/sts-handlers_test.go: `.SetUpSuite(c)`
$DIR/cmd/sts-handlers_test.go: `.SetUpOpenID(c, openIDServer, "readwrite")`
$DIR/cmd/sts-handlers_test.go: `.TestOpenIDSTSWithRolePolicy(c, testRoleARNs[0], testRoleMap[testRoleARNs[0]])`
$DIR/cmd/sts-handlers_test.go: `.TestOpenIDServiceAccWithRolePolicy(c)`
$DIR/cmd/sts-handlers_test.go: `.TearDownSuite(c)`
$DIR/cmd/sts-handlers_test.go: `.Run(
			fmt.Sprintf("Test: %d, ServerType: %s", i+1, testCase.ServerTypeDescription),
			func(t *testing.T) {
				c := &check{t, testCase.serverType}
				suite := testCase

				openIDServer := os.Getenv(EnvTestOpenIDServer)
				if openIDServer == "" {
					c.Skip("Skipping OpenID test as no OpenID server is provided.")
				}

				suite.SetUpSuite(c)
				suite.SetUpOpenID(c, openIDServer, "projecta,projectb,projectaorb")
				suite.TestOpenIDSTSWithRolePolicyWithPolVar(c, testRoleARNs[0], testRoleMap[testRoleARNs[0]])
				suite.TearDownSuite(c)
			},
		)`
$DIR/cmd/sts-handlers_test.go: `.Sprintf("Test: %d, ServerType: %s", i+1, testCase.ServerTypeDescription)`
$DIR/cmd/sts-handlers_test.go: `.Getenv(EnvTestOpenIDServer)`
$DIR/cmd/sts-handlers_test.go: `.SetUpSuite(c)`
$DIR/cmd/sts-handlers_test.go: `.SetUpOpenID(c, openIDServer, "projecta,projectb,projectaorb")`
$DIR/cmd/sts-handlers_test.go: `.TestOpenIDSTSWithRolePolicyWithPolVar(c, testRoleARNs[0], testRoleMap[testRoleARNs[0]])`
$DIR/cmd/sts-handlers_test.go: `.TearDownSuite(c)`
$DIR/cmd/sts-handlers_test.go: `.Getenv(EnvTestOpenIDServer)`
$DIR/cmd/sts-handlers_test.go: `.Getenv(EnvTestOpenIDServer2)`
$DIR/cmd/sts-handlers_test.go: `.Run(
			fmt.Sprintf("Test: %d, ServerType: %s", i+1, testCase.ServerTypeDescription),
			func(t *testing.T) {
				c := &check{t, testCase.serverType}
				suite := testCase

				suite.SetUpSuite(c)
				defer suite.TearDownSuite(c)

				err := suite.SetUpOpenIDs(c, testApps, rolePolicies)
				if err != nil {
					c.Fatalf("config with 1 claim based and 1 role based provider should pass but got: %v", err)
				}
			},
		)`
$DIR/cmd/sts-handlers_test.go: `.Sprintf("Test: %d, ServerType: %s", i+1, testCase.ServerTypeDescription)`
$DIR/cmd/sts-handlers_test.go: `.SetUpSuite(c)`
$DIR/cmd/sts-handlers_test.go: `.TearDownSuite(c)`
$DIR/cmd/sts-handlers_test.go: `.SetUpOpenIDs(c, testApps, rolePolicies)`
$DIR/cmd/sts-handlers_test.go: `.Getenv(EnvTestOpenIDServer)`
$DIR/cmd/sts-handlers_test.go: `.Getenv(EnvTestOpenIDServer2)`
$DIR/cmd/sts-handlers_test.go: `.Run(
			fmt.Sprintf("Test: %d, ServerType: %s", i+1, testCase.ServerTypeDescription),
			func(t *testing.T) {
				c := &check{t, testCase.serverType}
				suite := testCase

				suite.SetUpSuite(c)
				defer suite.TearDownSuite(c)

				err := suite.SetUpOpenIDs(c, testApps, rolePolicies)
				if err == nil {
					c.Fatalf("config with 2 claim based provider should fail")
				}
			},
		)`
$DIR/cmd/sts-handlers_test.go: `.Sprintf("Test: %d, ServerType: %s", i+1, testCase.ServerTypeDescription)`
$DIR/cmd/sts-handlers_test.go: `.SetUpSuite(c)`
$DIR/cmd/sts-handlers_test.go: `.TearDownSuite(c)`
$DIR/cmd/sts-handlers_test.go: `.SetUpOpenIDs(c, testApps, rolePolicies)`
$DIR/cmd/sts-handlers_test.go: `.Getenv(EnvTestOpenIDServer)`
$DIR/cmd/sts-handlers_test.go: `.Getenv(EnvTestOpenIDServer2)`
$DIR/cmd/sts-handlers_test.go: `.Run(
			fmt.Sprintf("Test: %d, ServerType: %s", i+1, testCase.ServerTypeDescription),
			func(t *testing.T) {
				c := &check{t, testCase.serverType}
				suite := testCase

				suite.SetUpSuite(c)
				err := suite.SetUpOpenIDs(c, testApps, rolePolicies)
				if err != nil {
					c.Fatalf("Error setting up openid providers for tests: %v", err)
				}
				suite.TestOpenIDSTSWithRolePolicy(c, testRoleARNs[0], testRoleMap[testRoleARNs[0]])
				suite.TestOpenIDSTSWithRolePolicy(c, testRoleARNs[1], testRoleMap[testRoleARNs[1]])
				suite.TestOpenIDServiceAccWithRolePolicy(c)
				suite.TearDownSuite(c)
			},
		)`
$DIR/cmd/sts-handlers_test.go: `.Sprintf("Test: %d, ServerType: %s", i+1, testCase.ServerTypeDescription)`
$DIR/cmd/sts-handlers_test.go: `.SetUpSuite(c)`
$DIR/cmd/sts-handlers_test.go: `.SetUpOpenIDs(c, testApps, rolePolicies)`
$DIR/cmd/sts-handlers_test.go: `.TestOpenIDSTSWithRolePolicy(c, testRoleARNs[0], testRoleMap[testRoleARNs[0]])`
$DIR/cmd/sts-handlers_test.go: `.TestOpenIDSTSWithRolePolicy(c, testRoleARNs[1], testRoleMap[testRoleARNs[1]])`
$DIR/cmd/sts-handlers_test.go: `.TestOpenIDServiceAccWithRolePolicy(c)`
$DIR/cmd/sts-handlers_test.go: `.TearDownSuite(c)`
$DIR/cmd/sts-handlers_test.go: `.Getenv(EnvTestOpenIDServer)`
$DIR/cmd/sts-handlers_test.go: `.Getenv(EnvTestOpenIDServer2)`
$DIR/cmd/sts-handlers_test.go: `.Run(
			fmt.Sprintf("Test: %d, ServerType: %s", i+1, testCase.ServerTypeDescription),
			func(t *testing.T) {
				c := &check{t, testCase.serverType}
				suite := testCase

				suite.SetUpSuite(c)
				defer suite.TearDownSuite(c)

				err := suite.SetUpOpenIDs(c, testApps, rolePolicies)
				if err != nil {
					c.Fatalf("Error setting up openid providers for tests: %v", err)
				}

				suite.SetUpAccMgmtPlugin(c)

				suite.TestOpenIDSTSWithRolePolicyUnderAMP(c, testRoleARNs[0], testRoleMap[testRoleARNs[0]])
				suite.TestOpenIDSTSWithRolePolicyUnderAMP(c, testRoleARNs[1], testRoleMap[testRoleARNs[1]])
				suite.TestOpenIDServiceAccWithRolePolicyUnderAMP(c)
			},
		)`
$DIR/cmd/sts-handlers_test.go: `.Sprintf("Test: %d, ServerType: %s", i+1, testCase.ServerTypeDescription)`
$DIR/cmd/sts-handlers_test.go: `.SetUpSuite(c)`
$DIR/cmd/sts-handlers_test.go: `.TearDownSuite(c)`
$DIR/cmd/sts-handlers_test.go: `.SetUpOpenIDs(c, testApps, rolePolicies)`
$DIR/cmd/sts-handlers_test.go: `.SetUpAccMgmtPlugin(c)`
$DIR/cmd/sts-handlers_test.go: `.TestOpenIDSTSWithRolePolicyUnderAMP(c, testRoleARNs[0], testRoleMap[testRoleARNs[0]])`
$DIR/cmd/sts-handlers_test.go: `.TestOpenIDSTSWithRolePolicyUnderAMP(c, testRoleARNs[1], testRoleMap[testRoleARNs[1]])`
$DIR/cmd/sts-handlers_test.go: `.TestOpenIDServiceAccWithRolePolicyUnderAMP(c)`
$DIR/cmd/test-utils_test.go: `flag.Parse()`
$DIR/cmd/test-utils_test.go: `globalIsTesting = true`
$DIR/cmd/test-utils_test.go: `globalIsCICD = globalIsTesting`
$DIR/cmd/test-utils_test.go: `globalActiveCred = auth.Credentials{
		AccessKey: auth.DefaultAccessKey,
		SecretKey: auth.DefaultSecretKey,
	}`
$DIR/cmd/test-utils_test.go: `os.Unsetenv(env)`
$DIR/cmd/test-utils_test.go: `globalIsDistErasure = false`
$DIR/cmd/test-utils_test.go: `color.Output = io.Discard`
$DIR/cmd/test-utils_test.go: `logger.DisableErrorLog = true`
$DIR/cmd/test-utils_test.go: `setMaxResources(serverCtxt{})`
$DIR/cmd/test-utils_test.go: `globalConsoleSys = NewConsoleLogger(context.Background(), io.Discard)`
$DIR/cmd/test-utils_test.go: `globalInternodeTransport = NewInternodeHTTPTransport(0)()`
$DIR/cmd/test-utils_test.go: `initHelp()`
$DIR/cmd/test-utils_test.go: `resetTestGlobals()`
$DIR/cmd/test-utils_test.go: `globalIsCICD = true`
$DIR/cmd/test-utils_test.go: `.Parse()`
$DIR/cmd/test-utils_test.go: `.Unsetenv(env)`
$DIR/cmd/test-utils_test.go: `.Background()`
$DIR/cmd/test-utils_test.go: `.Run()`
$DIR/cmd/test-utils_test.go: `.Background()`
$DIR/cmd/tier-last-day-stats_gen_test.go: `left, err = msgp.Skip(bts)`
$DIR/cmd/tier-last-day-stats_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/tier-last-day-stats_gen_test.go: `buf.Reset()`
$DIR/cmd/tier-last-day-stats_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/tier-last-day-stats_gen_test.go: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/tier-last-day-stats_gen_test.go: `left, err = msgp.Skip(bts)`
$DIR/cmd/tier-last-day-stats_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/tier-last-day-stats_gen_test.go: `buf.Reset()`
$DIR/cmd/tier-last-day-stats_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/tier-last-day-stats_gen_test.go: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/tier-last-day-stats_gen_test.go: `.MarshalMsg(nil)`
$DIR/cmd/tier-last-day-stats_gen_test.go: `.UnmarshalMsg(bts)`
$DIR/cmd/tier-last-day-stats_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/tier-last-day-stats_gen_test.go: `.Msgsize()`
$DIR/cmd/tier-last-day-stats_gen_test.go: `.Len()`
$DIR/cmd/tier-last-day-stats_gen_test.go: `.Decode(&buf, &vn)`
$DIR/cmd/tier-last-day-stats_gen_test.go: `.Reset()`
$DIR/cmd/tier-last-day-stats_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/tier-last-day-stats_gen_test.go: `.MarshalMsg(nil)`
$DIR/cmd/tier-last-day-stats_gen_test.go: `.UnmarshalMsg(bts)`
$DIR/cmd/tier-last-day-stats_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/tier-last-day-stats_gen_test.go: `.Msgsize()`
$DIR/cmd/tier-last-day-stats_gen_test.go: `.Len()`
$DIR/cmd/tier-last-day-stats_gen_test.go: `.Decode(&buf, &vn)`
$DIR/cmd/tier-last-day-stats_gen_test.go: `.Reset()`
$DIR/cmd/tier-last-day-stats_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/tier_gen_test.go: `left, err = msgp.Skip(bts)`
$DIR/cmd/tier_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/tier_gen_test.go: `buf.Reset()`
$DIR/cmd/tier_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/tier_gen_test.go: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/tier_gen_test.go: `.MarshalMsg(nil)`
$DIR/cmd/tier_gen_test.go: `.UnmarshalMsg(bts)`
$DIR/cmd/tier_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/tier_gen_test.go: `.Msgsize()`
$DIR/cmd/tier_gen_test.go: `.Len()`
$DIR/cmd/tier_gen_test.go: `.Decode(&buf, &vn)`
$DIR/cmd/tier_gen_test.go: `.Reset()`
$DIR/cmd/tier_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/tier_test.go: `globalTierMetrics.Observe(tier, 200*time.Millisecond)`
$DIR/cmd/tier_test.go: `globalTierMetrics.logSuccess(tier)`
$DIR/cmd/tier_test.go: `globalTierMetrics.logFailure(tier)`
$DIR/cmd/tier_test.go: `succ += metric.Value`
$DIR/cmd/tier_test.go: `fail += metric.Value`
$DIR/cmd/tier_test.go: `.Observe(tier, 200*time.Millisecond)`
$DIR/cmd/tier_test.go: `.logSuccess(tier)`
$DIR/cmd/tier_test.go: `.logFailure(tier)`
$DIR/cmd/tier_test.go: `.Report()`
$DIR/cmd/update-notifier_test.go: `.Sprintf("%s %s", plainMsg, color.YellowBold(testCase.expectedSubStr))`
$DIR/cmd/update-notifier_test.go: `.YellowBold(testCase.expectedSubStr)`
$DIR/cmd/update-notifier_test.go: `.Sprintf("Update: %s", color.CyanBold(testCase.dlURL))`
$DIR/cmd/update-notifier_test.go: `.CyanBold(testCase.dlURL)`
$DIR/cmd/update-notifier_test.go: `.Contains(output, line1)`
$DIR/cmd/update-notifier_test.go: `.Contains(output, line2)`
$DIR/cmd/update_test.go: `globalIsCICD = false`
$DIR/cmd/update_test.go: `globalIsCICD = sci`
$DIR/cmd/update_test.go: `t.Setenv("KUBERNETES_SERVICE_HOST", "10.11.148.5")`
$DIR/cmd/update_test.go: `durl = getDownloadURL(minioVersion1)`
$DIR/cmd/update_test.go: `t.Setenv("MESOS_CONTAINER_NAME", "mesos-1111")`
$DIR/cmd/update_test.go: `durl = getDownloadURL(minioVersion1)`
$DIR/cmd/update_test.go: `globalIsCICD = false`
$DIR/cmd/update_test.go: `t.Setenv(testCase.envName, testCase.envValue)`
$DIR/cmd/update_test.go: `t.Setenv("MARATHON_APP_LABEL_DCOS_PACKAGE_VERSION", "mesos-1111")`
$DIR/cmd/update_test.go: `expectedStr = strings.ReplaceAll(expectedStr, "; source", "; docker; source")`
$DIR/cmd/update_test.go: `globalIsCICD = sci`
$DIR/cmd/update_test.go: `os.Unsetenv("MARATHON_APP_LABEL_DCOS_PACKAGE_VERSION")`
$DIR/cmd/update_test.go: `os.Unsetenv(testCase.envName)`
$DIR/cmd/update_test.go: `globalIsCICD = false`
$DIR/cmd/update_test.go: `globalIsCICD = sci`
$DIR/cmd/update_test.go: `t.Setenv("MESOS_CONTAINER_NAME", "mesos-1111")`
$DIR/cmd/update_test.go: `os.Unsetenv("MESOS_CONTAINER_NAME")`
$DIR/cmd/update_test.go: `dcos = IsDCOS()`
$DIR/cmd/update_test.go: `globalIsCICD = false`
$DIR/cmd/update_test.go: `globalIsCICD = sci`
$DIR/cmd/update_test.go: `t.Setenv("KUBERNETES_SERVICE_HOST", "10.11.148.5")`
$DIR/cmd/update_test.go: `os.Unsetenv("KUBERNETES_SERVICE_HOST")`
$DIR/cmd/update_test.go: `kubernetes = IsKubernetes()`
$DIR/cmd/update_test.go: `fmt.Fprintln(w, "fbe246edbd382902db9a4035df7dce8cb441357d minio.RELEASE.2016-10-07T01-16-39Z")`
$DIR/cmd/update_test.go: `.LoadLocation("")`
$DIR/cmd/update_test.go: `.Date(2017, time.September, 29, 19, 16, 56, 0, utcLoc)`
$DIR/cmd/update_test.go: `.Date(2017, time.August, 5, 0, 0, 53, 0, utcLoc)`
$DIR/cmd/update_test.go: `.Now()`
$DIR/cmd/update_test.go: `.UTC()`
$DIR/cmd/update_test.go: `.Now()`
$DIR/cmd/update_test.go: `.UTC()`
$DIR/cmd/update_test.go: `.Date(2017, time.August, 5, 0, 0, 53, 0, utcLoc)`
$DIR/cmd/update_test.go: `.Date(2017, time.August, 5, 0, 0, 53, 0, utcLoc)`
$DIR/cmd/update_test.go: `.Equal(testCase.t)`
$DIR/cmd/update_test.go: `.Setenv("KUBERNETES_SERVICE_HOST", "10.11.148.5")`
$DIR/cmd/update_test.go: `.Setenv("MESOS_CONTAINER_NAME", "mesos-1111")`
$DIR/cmd/update_test.go: `.Sprintf("MinIO (%s; %s; %s; source DEVELOPMENT.GOGET DEVELOPMENT.GOGET DEVELOPMENT.GOGET", runtime.GOOS, runtime.GOARCH, globalMinioModeFS)`
$DIR/cmd/update_test.go: `.Sprintf("MinIO (%s; %s; %s; %s; source DEVELOPMENT.GOGET DEVELOPMENT.GOGET DEVELOPMENT.GOGET universe-%s", runtime.GOOS, runtime.GOARCH, globalMinioModeErasure, "dcos", "mesos-1111")`
$DIR/cmd/update_test.go: `.Sprintf("MinIO (%s; %s; %s; %s; source DEVELOPMENT.GOGET DEVELOPMENT.GOGET DEVELOPMENT.GOGET", runtime.GOOS, runtime.GOARCH, globalMinioModeErasure, "kubernetes")`
$DIR/cmd/update_test.go: `.Setenv(testCase.envName, testCase.envValue)`
$DIR/cmd/update_test.go: `.Setenv("MARATHON_APP_LABEL_DCOS_PACKAGE_VERSION", "mesos-1111")`
$DIR/cmd/update_test.go: `.ReplaceAll(expectedStr, "; source", "; docker; source")`
$DIR/cmd/update_test.go: `.Contains(str, expectedStr)`
$DIR/cmd/update_test.go: `.Unsetenv("MARATHON_APP_LABEL_DCOS_PACKAGE_VERSION")`
$DIR/cmd/update_test.go: `.Unsetenv(testCase.envName)`
$DIR/cmd/update_test.go: `.Setenv("MESOS_CONTAINER_NAME", "mesos-1111")`
$DIR/cmd/update_test.go: `.Unsetenv("MESOS_CONTAINER_NAME")`
$DIR/cmd/update_test.go: `.Setenv("KUBERNETES_SERVICE_HOST", "10.11.148.5")`
$DIR/cmd/update_test.go: `.Unsetenv("KUBERNETES_SERVICE_HOST")`
$DIR/cmd/update_test.go: `.CreateTemp("", "helm-testfile-")`
$DIR/cmd/update_test.go: `.WriteString(content)`
$DIR/cmd/update_test.go: `.Name()`
$DIR/cmd/update_test.go: `.Remove(filename)`
$DIR/cmd/update_test.go: `.NewServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {}))`
$DIR/cmd/update_test.go: `.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {})`
$DIR/cmd/update_test.go: `.NewServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		fmt.Fprintln(w, "fbe246edbd382902db9a4035df7dce8cb441357d minio.RELEASE.2016-10-07T01-16-39Z")
	}))`
$DIR/cmd/update_test.go: `.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		fmt.Fprintln(w, "fbe246edbd382902db9a4035df7dce8cb441357d minio.RELEASE.2016-10-07T01-16-39Z")
	})`
$DIR/cmd/update_test.go: `.Fprintln(w, "fbe246edbd382902db9a4035df7dce8cb441357d minio.RELEASE.2016-10-07T01-16-39Z")`
$DIR/cmd/update_test.go: `.NewServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		http.Error(w, "", http.StatusNotFound)
	}))`
$DIR/cmd/update_test.go: `.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		http.Error(w, "", http.StatusNotFound)
	})`
$DIR/cmd/update_test.go: `.Parse(testCase.releaseChecksumURL)`
$DIR/cmd/update_test.go: `.EncodeToString(sha256Sum)`
$DIR/cmd/update_test.go: `.expectedResult.Equal(result)`
$DIR/cmd/utils_test.go: `t.Run("", func(t *testing.T) {
			bucketName, objectName := path2BucketObject(testCase.path)
			if bucketName != testCase.bucket {
				t.Errorf("failed expected bucket name \"%s\", got \"%s\"", testCase.bucket, bucketName)
			}
			if objectName != testCase.object {
				t.Errorf("failed expected bucket name \"%s\", got \"%s\"", testCase.object, objectName)
			}
		})`
$DIR/cmd/utils_test.go: `req.RequestURI = "/?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=USWUXHGYZQYFYFFIT3RE%2F20170529%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20170529T190139Z&X-Amz-Expires=600&X-Amz-Signature=19b58080999df54b446fc97304eb8dda60d3df1812ae97f3e8783351bfd9781d&X-Amz-SignedHeaders=host&prefix=Hello%2AWorld%2A"`
$DIR/cmd/utils_test.go: `req.Header.Set("content-md5", "====test")`
$DIR/cmd/utils_test.go: `expectedQuery.Set("prefix", "Hello*World*")`
$DIR/cmd/utils_test.go: `expectedQuery.Set("X-Amz-Algorithm", "AWS4-HMAC-SHA256")`
$DIR/cmd/utils_test.go: `expectedQuery.Set("X-Amz-Credential", "USWUXHGYZQYFYFFIT3RE/20170529/us-east-1/s3/aws4_request")`
$DIR/cmd/utils_test.go: `expectedQuery.Set("X-Amz-Date", "20170529T190139Z")`
$DIR/cmd/utils_test.go: `expectedQuery.Set("X-Amz-Expires", "600")`
$DIR/cmd/utils_test.go: `expectedQuery.Set("X-Amz-SignedHeaders", "host")`
$DIR/cmd/utils_test.go: `expectedQuery.Set("X-Amz-Signature", "19b58080999df54b446fc97304eb8dda60d3df1812ae97f3e8783351bfd9781d")`
$DIR/cmd/utils_test.go: `expectedHeader.Set("content-md5", "====test")`
$DIR/cmd/utils_test.go: `expectedHeader.Set("host", "localhost:9000")`
$DIR/cmd/utils_test.go: `globalIsDistErasure = true`
$DIR/cmd/utils_test.go: `testMinioMode(globalMinioModeDistErasure)`
$DIR/cmd/utils_test.go: `globalIsDistErasure = false`
$DIR/cmd/utils_test.go: `globalIsErasure = true`
$DIR/cmd/utils_test.go: `testMinioMode(globalMinioModeErasure)`
$DIR/cmd/utils_test.go: `globalIsDistErasure, globalIsErasure = false, false`
$DIR/cmd/utils_test.go: `.Run("", func(t *testing.T) {
			bucketName, objectName := path2BucketObject(testCase.path)
			if bucketName != testCase.bucket {
				t.Errorf("failed expected bucket name \"%s\", got \"%s\"", testCase.bucket, bucketName)
			}
			if objectName != testCase.object {
				t.Errorf("failed expected bucket name \"%s\", got \"%s\"", testCase.object, objectName)
			}
		})`
$DIR/cmd/utils_test.go: `.NewRequest(http.MethodGet, "http://localhost:9000?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=USWUXHGYZQYFYFFIT3RE%2F20170529%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20170529T190139Z&X-Amz-Expires=600&X-Amz-Signature=19b58080999df54b446fc97304eb8dda60d3df1812ae97f3e8783351bfd9781d&X-Amz-SignedHeaders=host&prefix=Hello%2AWorld%2A", nil)`
$DIR/cmd/utils_test.go: `.Header.Set("content-md5", "====test")`
$DIR/cmd/utils_test.go: `.Unmarshal([]byte(strings.ReplaceAll(jsonReq, "%%", "%")), &res)`
$DIR/cmd/utils_test.go: `.ReplaceAll(jsonReq, "%%", "%")`
$DIR/cmd/utils_test.go: `.Set("prefix", "Hello*World*")`
$DIR/cmd/utils_test.go: `.Set("X-Amz-Algorithm", "AWS4-HMAC-SHA256")`
$DIR/cmd/utils_test.go: `.Set("X-Amz-Credential", "USWUXHGYZQYFYFFIT3RE/20170529/us-east-1/s3/aws4_request")`
$DIR/cmd/utils_test.go: `.Set("X-Amz-Date", "20170529T190139Z")`
$DIR/cmd/utils_test.go: `.Set("X-Amz-Expires", "600")`
$DIR/cmd/utils_test.go: `.Set("X-Amz-SignedHeaders", "host")`
$DIR/cmd/utils_test.go: `.Set("X-Amz-Signature", "19b58080999df54b446fc97304eb8dda60d3df1812ae97f3e8783351bfd9781d")`
$DIR/cmd/utils_test.go: `.Encode()`
$DIR/cmd/utils_test.go: `.DeepEqual(res.RequestURI, expectedRequestURI)`
$DIR/cmd/utils_test.go: `.Set("content-md5", "====test")`
$DIR/cmd/utils_test.go: `.Set("host", "localhost:9000")`
$DIR/cmd/utils_test.go: `.DeepEqual(res.Header, expectedHeader)`
$DIR/cmd/version_test.go: `Version = "2017-05-07T06:37:49Z"`
$DIR/cmd/version_test.go: `.Parse(time.RFC3339, Version)`
$DIR/cmd/xl-storage-errors_test.go: `pathErr = &os.PathError{Err: syscall.ENOTDIR}`
$DIR/cmd/xl-storage-errors_test.go: `ok = isSysErrNotDir(pathErr)`
$DIR/cmd/xl-storage-errors_test.go: `pathErr = &os.PathError{Err: syscall.ENOTEMPTY}`
$DIR/cmd/xl-storage-errors_test.go: `ok = isSysErrNotEmpty(pathErr)`
$DIR/cmd/xl-storage-errors_test.go: `pathErr = &os.PathError{Err: syscall.Errno(0x91)}`
$DIR/cmd/xl-storage-errors_test.go: `ok = isSysErrNotEmpty(pathErr)`
$DIR/cmd/xl-storage-errors_test.go: `pathErr = &os.PathError{Err: syscall.Errno(0x03)}`
$DIR/cmd/xl-storage-errors_test.go: `ok = isSysErrPathNotFound(pathErr)`
$DIR/cmd/xl-storage-errors_test.go: `.Errno(0x91)`
$DIR/cmd/xl-storage-errors_test.go: `.Errno(0x03)`
$DIR/cmd/xl-storage-format-utils_test.go: `t.Run(tt.name, func(t *testing.T) {
			const n = 100
			want := hashDeterministicString(tt.arg)
			m := tt.arg
			for i := 0; i < n; i++ {
				if got := hashDeterministicString(m); got != want {
					t.Errorf("hashDeterministicString() = %v, want %v", got, want)
				}
			}
			// Check casual collisions
			if m == nil {
				m = make(map[string]string)
			}
			m["12312312"] = ""
			if got := hashDeterministicString(m); got == want {
				t.Errorf("hashDeterministicString() = %v, does not want %v", got, want)
			}
			want = hashDeterministicString(m)
			delete(m, "12312312")
			m["another"] = ""

			if got := hashDeterministicString(m); got == want {
				t.Errorf("hashDeterministicString() = %v, does not want %v", got, want)
			}

			want = hashDeterministicString(m)
			m["another"] = "hashDeterministicString"
			if got := hashDeterministicString(m); got == want {
				t.Errorf("hashDeterministicString() = %v, does not want %v", got, want)
			}

			want = hashDeterministicString(m)
			m["another"] = "hashDeterministicStringhashDeterministicStringhashDeterministicStringhashDeterministicStringhashDeterministicStringhashDeterministicStringhashDeterministicString"
			if got := hashDeterministicString(m); got == want {
				t.Errorf("hashDeterministicString() = %v, does not want %v", got, want)
			}

			// Flip key/value
			want = hashDeterministicString(m)
			delete(m, "another")
			m["hashDeterministicStringhashDeterministicStringhashDeterministicStringhashDeterministicStringhashDeterministicStringhashDeterministicStringhashDeterministicString"] = "another"
			if got := hashDeterministicString(m); got == want {
				t.Errorf("hashDeterministicString() = %v, does not want %v", got, want)
			}
		})`
$DIR/cmd/xl-storage-format-utils_test.go: `m = make(map[string]string)`
$DIR/cmd/xl-storage-format-utils_test.go: `m["12312312"] = ""`
$DIR/cmd/xl-storage-format-utils_test.go: `want = hashDeterministicString(m)`
$DIR/cmd/xl-storage-format-utils_test.go: `delete(m, "12312312")`
$DIR/cmd/xl-storage-format-utils_test.go: `m["another"] = ""`
$DIR/cmd/xl-storage-format-utils_test.go: `want = hashDeterministicString(m)`
$DIR/cmd/xl-storage-format-utils_test.go: `m["another"] = "hashDeterministicString"`
$DIR/cmd/xl-storage-format-utils_test.go: `want = hashDeterministicString(m)`
$DIR/cmd/xl-storage-format-utils_test.go: `m["another"] = "hashDeterministicStringhashDeterministicStringhashDeterministicStringhashDeterministicStringhashDeterministicStringhashDeterministicStringhashDeterministicString"`
$DIR/cmd/xl-storage-format-utils_test.go: `want = hashDeterministicString(m)`
$DIR/cmd/xl-storage-format-utils_test.go: `delete(m, "another")`
$DIR/cmd/xl-storage-format-utils_test.go: `m["hashDeterministicStringhashDeterministicStringhashDeterministicStringhashDeterministicStringhashDeterministicStringhashDeterministicStringhashDeterministicString"] = "another"`
$DIR/cmd/xl-storage-format-utils_test.go: `fi.VersionID = mustGetUUID()`
$DIR/cmd/xl-storage-format-utils_test.go: `fi.DataDir = mustGetUUID()`
$DIR/cmd/xl-storage-format-utils_test.go: `fi.ModTime = basefi.ModTime.Add(time.Duration(i) * time.Second)`
$DIR/cmd/xl-storage-format-utils_test.go: `transfi.TransitionStatus = lifecycle.TransitionComplete`
$DIR/cmd/xl-storage-format-utils_test.go: `transfi.TransitionTier = "MINIO-TIER"`
$DIR/cmd/xl-storage-format-utils_test.go: `transfi.TransitionedObjName = mustGetUUID()`
$DIR/cmd/xl-storage-format-utils_test.go: `xl.DeleteVersion(transfi)`
$DIR/cmd/xl-storage-format-utils_test.go: `fi.SetTierFreeVersionID(mustGetUUID())`
$DIR/cmd/xl-storage-format-utils_test.go: `xl.DeleteVersion(fi)`
$DIR/cmd/xl-storage-format-utils_test.go: `freeVersionIDs = append(freeVersionIDs, fi.TierFreeVersionID())`
$DIR/cmd/xl-storage-format-utils_test.go: `versions = append(versions, fi)`
$DIR/cmd/xl-storage-format-utils_test.go: `sort.Slice(versions, func(i, j int) bool {
		if versions[i].IsLatest {
			return true
		}
		if versions[j].IsLatest {
			return false
		}
		return versions[i].ModTime.After(versions[j].ModTime)
	})`
$DIR/cmd/xl-storage-format-utils_test.go: `.Run(tt.name, func(t *testing.T) {
			const n = 100
			want := hashDeterministicString(tt.arg)
			m := tt.arg
			for i := 0; i < n; i++ {
				if got := hashDeterministicString(m); got != want {
					t.Errorf("hashDeterministicString() = %v, want %v", got, want)
				}
			}
			// Check casual collisions
			if m == nil {
				m = make(map[string]string)
			}
			m["12312312"] = ""
			if got := hashDeterministicString(m); got == want {
				t.Errorf("hashDeterministicString() = %v, does not want %v", got, want)
			}
			want = hashDeterministicString(m)
			delete(m, "12312312")
			m["another"] = ""

			if got := hashDeterministicString(m); got == want {
				t.Errorf("hashDeterministicString() = %v, does not want %v", got, want)
			}

			want = hashDeterministicString(m)
			m["another"] = "hashDeterministicString"
			if got := hashDeterministicString(m); got == want {
				t.Errorf("hashDeterministicString() = %v, does not want %v", got, want)
			}

			want = hashDeterministicString(m)
			m["another"] = "hashDeterministicStringhashDeterministicStringhashDeterministicStringhashDeterministicStringhashDeterministicStringhashDeterministicStringhashDeterministicString"
			if got := hashDeterministicString(m); got == want {
				t.Errorf("hashDeterministicString() = %v, does not want %v", got, want)
			}

			// Flip key/value
			want = hashDeterministicString(m)
			delete(m, "another")
			m["hashDeterministicStringhashDeterministicStringhashDeterministicStringhashDeterministicStringhashDeterministicStringhashDeterministicStringhashDeterministicString"] = "another"
			if got := hashDeterministicString(m); got == want {
				t.Errorf("hashDeterministicString() = %v, does not want %v", got, want)
			}
		})`
$DIR/cmd/xl-storage-format-utils_test.go: `.Now()`
$DIR/cmd/xl-storage-format-utils_test.go: `.UTC()`
$DIR/cmd/xl-storage-format-utils_test.go: `.String()`
$DIR/cmd/xl-storage-format-utils_test.go: `.ModTime.Add(time.Duration(i) * time.Second)`
$DIR/cmd/xl-storage-format-utils_test.go: `.Duration(i)`
$DIR/cmd/xl-storage-format-utils_test.go: `.AddVersion(fi)`
$DIR/cmd/xl-storage-format-utils_test.go: `.DeleteVersion(transfi)`
$DIR/cmd/xl-storage-format-utils_test.go: `.SetTierFreeVersionID(mustGetUUID())`
$DIR/cmd/xl-storage-format-utils_test.go: `.DeleteVersion(fi)`
$DIR/cmd/xl-storage-format-utils_test.go: `.TierFreeVersionID()`
$DIR/cmd/xl-storage-format-utils_test.go: `.AppendTo(nil)`
$DIR/cmd/xl-storage-format-utils_test.go: `.Slice(versions, func(i, j int) bool {
		if versions[i].IsLatest {
			return true
		}
		if versions[j].IsLatest {
			return false
		}
		return versions[i].ModTime.After(versions[j].ModTime)
	})`
$DIR/cmd/xl-storage-format-utils_test.go: `.ModTime.After(versions[j].ModTime)`
$DIR/cmd/xl-storage-format-v1_gen_test.go: `left, err = msgp.Skip(bts)`
$DIR/cmd/xl-storage-format-v1_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/xl-storage-format-v1_gen_test.go: `buf.Reset()`
$DIR/cmd/xl-storage-format-v1_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/xl-storage-format-v1_gen_test.go: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/xl-storage-format-v1_gen_test.go: `left, err = msgp.Skip(bts)`
$DIR/cmd/xl-storage-format-v1_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/xl-storage-format-v1_gen_test.go: `buf.Reset()`
$DIR/cmd/xl-storage-format-v1_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/xl-storage-format-v1_gen_test.go: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/xl-storage-format-v1_gen_test.go: `left, err = msgp.Skip(bts)`
$DIR/cmd/xl-storage-format-v1_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/xl-storage-format-v1_gen_test.go: `buf.Reset()`
$DIR/cmd/xl-storage-format-v1_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/xl-storage-format-v1_gen_test.go: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/xl-storage-format-v1_gen_test.go: `left, err = msgp.Skip(bts)`
$DIR/cmd/xl-storage-format-v1_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/xl-storage-format-v1_gen_test.go: `buf.Reset()`
$DIR/cmd/xl-storage-format-v1_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/xl-storage-format-v1_gen_test.go: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/xl-storage-format-v1_gen_test.go: `left, err = msgp.Skip(bts)`
$DIR/cmd/xl-storage-format-v1_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/xl-storage-format-v1_gen_test.go: `buf.Reset()`
$DIR/cmd/xl-storage-format-v1_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/xl-storage-format-v1_gen_test.go: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/xl-storage-format-v1_gen_test.go: `left, err = msgp.Skip(bts)`
$DIR/cmd/xl-storage-format-v1_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/xl-storage-format-v1_gen_test.go: `buf.Reset()`
$DIR/cmd/xl-storage-format-v1_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/xl-storage-format-v1_gen_test.go: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/xl-storage-format-v1_gen_test.go: `.MarshalMsg(nil)`
$DIR/cmd/xl-storage-format-v1_gen_test.go: `.UnmarshalMsg(bts)`
$DIR/cmd/xl-storage-format-v1_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/xl-storage-format-v1_gen_test.go: `.Msgsize()`
$DIR/cmd/xl-storage-format-v1_gen_test.go: `.Len()`
$DIR/cmd/xl-storage-format-v1_gen_test.go: `.Decode(&buf, &vn)`
$DIR/cmd/xl-storage-format-v1_gen_test.go: `.Reset()`
$DIR/cmd/xl-storage-format-v1_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/xl-storage-format-v1_gen_test.go: `.MarshalMsg(nil)`
$DIR/cmd/xl-storage-format-v1_gen_test.go: `.UnmarshalMsg(bts)`
$DIR/cmd/xl-storage-format-v1_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/xl-storage-format-v1_gen_test.go: `.Msgsize()`
$DIR/cmd/xl-storage-format-v1_gen_test.go: `.Len()`
$DIR/cmd/xl-storage-format-v1_gen_test.go: `.Decode(&buf, &vn)`
$DIR/cmd/xl-storage-format-v1_gen_test.go: `.Reset()`
$DIR/cmd/xl-storage-format-v1_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/xl-storage-format-v1_gen_test.go: `.MarshalMsg(nil)`
$DIR/cmd/xl-storage-format-v1_gen_test.go: `.UnmarshalMsg(bts)`
$DIR/cmd/xl-storage-format-v1_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/xl-storage-format-v1_gen_test.go: `.Msgsize()`
$DIR/cmd/xl-storage-format-v1_gen_test.go: `.Len()`
$DIR/cmd/xl-storage-format-v1_gen_test.go: `.Decode(&buf, &vn)`
$DIR/cmd/xl-storage-format-v1_gen_test.go: `.Reset()`
$DIR/cmd/xl-storage-format-v1_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/xl-storage-format-v1_gen_test.go: `.MarshalMsg(nil)`
$DIR/cmd/xl-storage-format-v1_gen_test.go: `.UnmarshalMsg(bts)`
$DIR/cmd/xl-storage-format-v1_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/xl-storage-format-v1_gen_test.go: `.Msgsize()`
$DIR/cmd/xl-storage-format-v1_gen_test.go: `.Len()`
$DIR/cmd/xl-storage-format-v1_gen_test.go: `.Decode(&buf, &vn)`
$DIR/cmd/xl-storage-format-v1_gen_test.go: `.Reset()`
$DIR/cmd/xl-storage-format-v1_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/xl-storage-format-v1_gen_test.go: `.MarshalMsg(nil)`
$DIR/cmd/xl-storage-format-v1_gen_test.go: `.UnmarshalMsg(bts)`
$DIR/cmd/xl-storage-format-v1_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/xl-storage-format-v1_gen_test.go: `.Msgsize()`
$DIR/cmd/xl-storage-format-v1_gen_test.go: `.Len()`
$DIR/cmd/xl-storage-format-v1_gen_test.go: `.Decode(&buf, &vn)`
$DIR/cmd/xl-storage-format-v1_gen_test.go: `.Reset()`
$DIR/cmd/xl-storage-format-v1_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/xl-storage-format-v1_gen_test.go: `.MarshalMsg(nil)`
$DIR/cmd/xl-storage-format-v1_gen_test.go: `.UnmarshalMsg(bts)`
$DIR/cmd/xl-storage-format-v1_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/xl-storage-format-v1_gen_test.go: `.Msgsize()`
$DIR/cmd/xl-storage-format-v1_gen_test.go: `.Len()`
$DIR/cmd/xl-storage-format-v1_gen_test.go: `.Decode(&buf, &vn)`
$DIR/cmd/xl-storage-format-v1_gen_test.go: `.Reset()`
$DIR/cmd/xl-storage-format-v1_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/xl-storage-format-v2_gen_test.go: `left, err = msgp.Skip(bts)`
$DIR/cmd/xl-storage-format-v2_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/xl-storage-format-v2_gen_test.go: `buf.Reset()`
$DIR/cmd/xl-storage-format-v2_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/xl-storage-format-v2_gen_test.go: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/xl-storage-format-v2_gen_test.go: `left, err = msgp.Skip(bts)`
$DIR/cmd/xl-storage-format-v2_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/xl-storage-format-v2_gen_test.go: `buf.Reset()`
$DIR/cmd/xl-storage-format-v2_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/xl-storage-format-v2_gen_test.go: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/xl-storage-format-v2_gen_test.go: `left, err = msgp.Skip(bts)`
$DIR/cmd/xl-storage-format-v2_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/xl-storage-format-v2_gen_test.go: `buf.Reset()`
$DIR/cmd/xl-storage-format-v2_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/xl-storage-format-v2_gen_test.go: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/xl-storage-format-v2_gen_test.go: `left, err = msgp.Skip(bts)`
$DIR/cmd/xl-storage-format-v2_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/xl-storage-format-v2_gen_test.go: `buf.Reset()`
$DIR/cmd/xl-storage-format-v2_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/xl-storage-format-v2_gen_test.go: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/xl-storage-format-v2_gen_test.go: `left, err = msgp.Skip(bts)`
$DIR/cmd/xl-storage-format-v2_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/xl-storage-format-v2_gen_test.go: `buf.Reset()`
$DIR/cmd/xl-storage-format-v2_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/cmd/xl-storage-format-v2_gen_test.go: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/xl-storage-format-v2_gen_test.go: `.MarshalMsg(nil)`
$DIR/cmd/xl-storage-format-v2_gen_test.go: `.UnmarshalMsg(bts)`
$DIR/cmd/xl-storage-format-v2_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/xl-storage-format-v2_gen_test.go: `.Msgsize()`
$DIR/cmd/xl-storage-format-v2_gen_test.go: `.Len()`
$DIR/cmd/xl-storage-format-v2_gen_test.go: `.Decode(&buf, &vn)`
$DIR/cmd/xl-storage-format-v2_gen_test.go: `.Reset()`
$DIR/cmd/xl-storage-format-v2_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/xl-storage-format-v2_gen_test.go: `.MarshalMsg(nil)`
$DIR/cmd/xl-storage-format-v2_gen_test.go: `.UnmarshalMsg(bts)`
$DIR/cmd/xl-storage-format-v2_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/xl-storage-format-v2_gen_test.go: `.Msgsize()`
$DIR/cmd/xl-storage-format-v2_gen_test.go: `.Len()`
$DIR/cmd/xl-storage-format-v2_gen_test.go: `.Decode(&buf, &vn)`
$DIR/cmd/xl-storage-format-v2_gen_test.go: `.Reset()`
$DIR/cmd/xl-storage-format-v2_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/xl-storage-format-v2_gen_test.go: `.MarshalMsg(nil)`
$DIR/cmd/xl-storage-format-v2_gen_test.go: `.UnmarshalMsg(bts)`
$DIR/cmd/xl-storage-format-v2_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/xl-storage-format-v2_gen_test.go: `.Msgsize()`
$DIR/cmd/xl-storage-format-v2_gen_test.go: `.Len()`
$DIR/cmd/xl-storage-format-v2_gen_test.go: `.Decode(&buf, &vn)`
$DIR/cmd/xl-storage-format-v2_gen_test.go: `.Reset()`
$DIR/cmd/xl-storage-format-v2_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/xl-storage-format-v2_gen_test.go: `.MarshalMsg(nil)`
$DIR/cmd/xl-storage-format-v2_gen_test.go: `.UnmarshalMsg(bts)`
$DIR/cmd/xl-storage-format-v2_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/xl-storage-format-v2_gen_test.go: `.Msgsize()`
$DIR/cmd/xl-storage-format-v2_gen_test.go: `.Len()`
$DIR/cmd/xl-storage-format-v2_gen_test.go: `.Decode(&buf, &vn)`
$DIR/cmd/xl-storage-format-v2_gen_test.go: `.Reset()`
$DIR/cmd/xl-storage-format-v2_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/xl-storage-format-v2_gen_test.go: `.MarshalMsg(nil)`
$DIR/cmd/xl-storage-format-v2_gen_test.go: `.UnmarshalMsg(bts)`
$DIR/cmd/xl-storage-format-v2_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/xl-storage-format-v2_gen_test.go: `.Msgsize()`
$DIR/cmd/xl-storage-format-v2_gen_test.go: `.Len()`
$DIR/cmd/xl-storage-format-v2_gen_test.go: `.Decode(&buf, &vn)`
$DIR/cmd/xl-storage-format-v2_gen_test.go: `.Reset()`
$DIR/cmd/xl-storage-format-v2_gen_test.go: `.Encode(&buf, &v)`
$DIR/cmd/xl-storage-format-v2_test.go: `_, err = readXLMetaNoData(bytes.NewReader(buf), int64(len(buf)))`
$DIR/cmd/xl-storage-format-v2_test.go: `t.Helper()`
$DIR/cmd/xl-storage-format-v2_test.go: `failOnErr(xl.AddVersion(fi))`
$DIR/cmd/xl-storage-format-v2_test.go: `fi.VersionID = mustGetUUID()`
$DIR/cmd/xl-storage-format-v2_test.go: `fi.DataDir = mustGetUUID()`
$DIR/cmd/xl-storage-format-v2_test.go: `fi.Data = data2`
$DIR/cmd/xl-storage-format-v2_test.go: `failOnErr(xl.AddVersion(fi))`
$DIR/cmd/xl-storage-format-v2_test.go: `failOnErr(err)`
$DIR/cmd/xl-storage-format-v2_test.go: `failOnErr(xl2.Load(serialized))`
$DIR/cmd/xl-storage-format-v2_test.go: `failOnErr(err)`
$DIR/cmd/xl-storage-format-v2_test.go: `xl2.data.remove(fi.VersionID)`
$DIR/cmd/xl-storage-format-v2_test.go: `failOnErr(xl2.data.validate())`
$DIR/cmd/xl-storage-format-v2_test.go: `xl2.data.replace(fi.VersionID, fi.Data)`
$DIR/cmd/xl-storage-format-v2_test.go: `failOnErr(xl2.data.validate())`
$DIR/cmd/xl-storage-format-v2_test.go: `xl2.data.replace("756100c6-b393-4981-928a-d49bbc164741", data2)`
$DIR/cmd/xl-storage-format-v2_test.go: `failOnErr(xl2.data.validate())`
$DIR/cmd/xl-storage-format-v2_test.go: `failOnErr(xl2.data.validate())`
$DIR/cmd/xl-storage-format-v2_test.go: `xl2 = xlMetaV2{}`
$DIR/cmd/xl-storage-format-v2_test.go: `failOnErr(xl2.Load(trimmed))`
$DIR/cmd/xl-storage-format-v2_test.go: `trimmed[len(trimmed)-10] += 10`
$DIR/cmd/xl-storage-format-v2_test.go: `transitioned[ReservedMetadataPrefixLower+TransitionStatus] = []byte(lifecycle.TransitionComplete)`
$DIR/cmd/xl-storage-format-v2_test.go: `toBeRestored[xhttp.AmzRestore] = ongoingRestoreObj().String()`
$DIR/cmd/xl-storage-format-v2_test.go: `restored[xhttp.AmzRestore] = completedRestoreObj(time.Now().UTC().Add(time.Hour)).String()`
$DIR/cmd/xl-storage-format-v2_test.go: `restoredExpired[xhttp.AmzRestore] = completedRestoreObj(time.Now().UTC().Add(-time.Hour)).String()`
$DIR/cmd/xl-storage-format-v2_test.go: `t.Helper()`
$DIR/cmd/xl-storage-format-v2_test.go: `fi.VersionID = tc.versionID`
$DIR/cmd/xl-storage-format-v2_test.go: `fi.DataDir = tc.dataDir`
$DIR/cmd/xl-storage-format-v2_test.go: `fi.Data = tc.data`
$DIR/cmd/xl-storage-format-v2_test.go: `fi.Size = 42`
$DIR/cmd/xl-storage-format-v2_test.go: `fi.Metadata = map[string]string{
				xhttp.AmzRestore: tc.restoreObjStatus,
			}`
$DIR/cmd/xl-storage-format-v2_test.go: `fi.TransitionStatus = tc.transitionStatus`
$DIR/cmd/xl-storage-format-v2_test.go: `fi.ModTime = fi.ModTime.Add(time.Duration(i) * time.Second)`
$DIR/cmd/xl-storage-format-v2_test.go: `failOnErr(i+1, xl.AddVersion(fi))`
$DIR/cmd/xl-storage-format-v2_test.go: `fi.ExpireRestored = tc.expireRestored`
$DIR/cmd/xl-storage-format-v2_test.go: `fileInfos = append(fileInfos, fi)`
$DIR/cmd/xl-storage-format-v2_test.go: `failOnErr(i+1, err)`
$DIR/cmd/xl-storage-format-v2_test.go: `failOnErr(count+1, err)`
$DIR/cmd/xl-storage-format-v2_test.go: `count++`
$DIR/cmd/xl-storage-format-v2_test.go: `data, err = dec.DecodeAll(data, nil)`
$DIR/cmd/xl-storage-format-v2_test.go: `xl.sortByModTime()`
$DIR/cmd/xl-storage-format-v2_test.go: `t.Run("load-legacy", func(t *testing.T) {
		var xl xlMetaV2
		err = xl.Load(data)
		if err != nil {
			t.Fatal(err)
		}
		test(t, &xl)
	})`
$DIR/cmd/xl-storage-format-v2_test.go: `err = xl.Load(data)`
$DIR/cmd/xl-storage-format-v2_test.go: `test(t, &xl)`
$DIR/cmd/xl-storage-format-v2_test.go: `t.Run("roundtrip", func(t *testing.T) {
		var xl xlMetaV2
		err = xl.Load(data)
		if err != nil {
			t.Fatal(err)
		}
		data, err = xl.AppendTo(nil)
		if err != nil {
			t.Fatal(err)
		}
		xl = xlMetaV2{}
		err = xl.Load(data)
		if err != nil {
			t.Fatal(err)
		}
		test(t, &xl)
	})`
$DIR/cmd/xl-storage-format-v2_test.go: `err = xl.Load(data)`
$DIR/cmd/xl-storage-format-v2_test.go: `data, err = xl.AppendTo(nil)`
$DIR/cmd/xl-storage-format-v2_test.go: `xl = xlMetaV2{}`
$DIR/cmd/xl-storage-format-v2_test.go: `err = xl.Load(data)`
$DIR/cmd/xl-storage-format-v2_test.go: `test(t, &xl)`
$DIR/cmd/xl-storage-format-v2_test.go: `err = xl.Load(data)`
$DIR/cmd/xl-storage-format-v2_test.go: `xl.data = nil`
$DIR/cmd/xl-storage-format-v2_test.go: `xl.versions = xl.versions[:2]`
$DIR/cmd/xl-storage-format-v2_test.go: `xl.addVersion(ventry)`
$DIR/cmd/xl-storage-format-v2_test.go: `data, err = xl.AppendTo(nil)`
$DIR/cmd/xl-storage-format-v2_test.go: `got = string(v.DeleteMarker.MetaSys[ReservedMetadataPrefixLower+ReplicaTimestamp])`
$DIR/cmd/xl-storage-format-v2_test.go: `err = xl.LoadOrConvert(buf)`
$DIR/cmd/xl-storage-format-v2_test.go: `vers = append(vers, xl.versions)`
$DIR/cmd/xl-storage-format-v2_test.go: `_, _ = x.unmarshalV(0, ver.meta)`
$DIR/cmd/xl-storage-format-v2_test.go: `b, _ = json.Marshal(x)`
$DIR/cmd/xl-storage-format-v2_test.go: `t.Run(fmt.Sprintf("non-strict-q%d", i), func(t *testing.T) {
			merged := mergeXLV2Versions(i, false, 0, vers...)
			if len(merged) == 0 {
				t.Error("Did not get any results")
				return
			}
			for _, ver := range merged {
				if ver.header.Type == invalidVersionType {
					t.Errorf("Invalid result returned: %v", ver.header)
				}
			}
		})`
$DIR/cmd/xl-storage-format-v2_test.go: `t.Run(fmt.Sprintf("strict-q%d", i), func(t *testing.T) {
			merged := mergeXLV2Versions(i, true, 0, vers...)
			if len(merged) == 0 {
				t.Error("Did not get any results")
				return
			}
			for _, ver := range merged {
				if ver.header.Type == invalidVersionType {
					t.Errorf("Invalid result returned: %v", ver.header)
				}
			}
		})`
$DIR/cmd/xl-storage-format-v2_test.go: `t.Run(fmt.Sprintf("signature-q%d", i), func(t *testing.T) {
			// Mutate signature, non strict
			vMod := make([][]xlMetaV2ShallowVersion, 0, len(vers))
			for i, ver := range vers {
				newVers := make([]xlMetaV2ShallowVersion, 0, len(ver))
				for _, v := range ver {
					v.header.Signature = [4]byte{byte(i + 10), 0, 0, 0}
					newVers = append(newVers, v)
				}
				vMod = append(vMod, newVers)
			}
			merged := mergeXLV2Versions(i, false, 0, vMod...)
			if len(merged) == 0 {
				t.Error("Did not get any results")
				return
			}
			for _, ver := range merged {
				if ver.header.Type == invalidVersionType {
					t.Errorf("Invalid result returned: %v", ver.header)
				}
			}
		})`
$DIR/cmd/xl-storage-format-v2_test.go: `v.header.Signature = [4]byte{byte(i + 10), 0, 0, 0}`
$DIR/cmd/xl-storage-format-v2_test.go: `newVers = append(newVers, v)`
$DIR/cmd/xl-storage-format-v2_test.go: `vMod = append(vMod, newVers)`
$DIR/cmd/xl-storage-format-v2_test.go: `t.Run(fmt.Sprintf("modtime-q%d", i), func(t *testing.T) {
			// Mutate modtime, but rest is consistent.
			vMod := make([][]xlMetaV2ShallowVersion, 0, len(vers))
			for i, ver := range vers {
				newVers := make([]xlMetaV2ShallowVersion, 0, len(ver))
				for _, v := range ver {
					v.header.ModTime += int64(i)
					newVers = append(newVers, v)
				}
				vMod = append(vMod, newVers)
			}
			merged := mergeXLV2Versions(i, false, 0, vMod...)
			if len(merged) == 0 && i < 2 {
				t.Error("Did not get any results")
				return
			}
			if len(merged) > 0 && i >= 2 {
				t.Error("Got unexpected results")
				return
			}
			for _, ver := range merged {
				if ver.header.Type == invalidVersionType {
					t.Errorf("Invalid result returned: %v", ver.header)
				}
			}
		})`
$DIR/cmd/xl-storage-format-v2_test.go: `v.header.ModTime += int64(i)`
$DIR/cmd/xl-storage-format-v2_test.go: `newVers = append(newVers, v)`
$DIR/cmd/xl-storage-format-v2_test.go: `vMod = append(vMod, newVers)`
$DIR/cmd/xl-storage-format-v2_test.go: `t.Run(fmt.Sprintf("flags-q%d", i), func(t *testing.T) {
			// Mutate signature, non strict
			vMod := make([][]xlMetaV2ShallowVersion, 0, len(vers))
			for i, ver := range vers {
				newVers := make([]xlMetaV2ShallowVersion, 0, len(ver))
				for _, v := range ver {
					v.header.Flags += xlFlags(i)
					newVers = append(newVers, v)
				}
				vMod = append(vMod, newVers)
			}
			merged := mergeXLV2Versions(i, false, 0, vMod...)
			if len(merged) == 0 {
				t.Error("Did not get any results")
				return
			}
			for _, ver := range merged {
				if ver.header.Type == invalidVersionType {
					t.Errorf("Invalid result returned: %v", ver.header)
				}
			}
		})`
$DIR/cmd/xl-storage-format-v2_test.go: `v.header.Flags += xlFlags(i)`
$DIR/cmd/xl-storage-format-v2_test.go: `newVers = append(newVers, v)`
$DIR/cmd/xl-storage-format-v2_test.go: `vMod = append(vMod, newVers)`
$DIR/cmd/xl-storage-format-v2_test.go: `t.Run(fmt.Sprintf("versionid-q%d", i), func(t *testing.T) {
			// Mutate signature, non strict
			vMod := make([][]xlMetaV2ShallowVersion, 0, len(vers))
			for i, ver := range vers {
				newVers := make([]xlMetaV2ShallowVersion, 0, len(ver))
				for _, v := range ver {
					v.header.VersionID[0] += byte(i)
					newVers = append(newVers, v)
				}
				vMod = append(vMod, newVers)
			}
			merged := mergeXLV2Versions(i, false, 0, vMod...)
			if len(merged) == 0 && i < 2 {
				t.Error("Did not get any results")
				return
			}
			if len(merged) > 0 && i >= 2 {
				t.Error("Got unexpected results")
				return
			}
			for _, ver := range merged {
				if ver.header.Type == invalidVersionType {
					t.Errorf("Invalid result returned: %v", ver.header)
				}
			}
		})`
$DIR/cmd/xl-storage-format-v2_test.go: `v.header.VersionID[0] += byte(i)`
$DIR/cmd/xl-storage-format-v2_test.go: `newVers = append(newVers, v)`
$DIR/cmd/xl-storage-format-v2_test.go: `vMod = append(vMod, newVers)`
$DIR/cmd/xl-storage-format-v2_test.go: `t.Run(fmt.Sprintf("strict-signature-q%d", i), func(t *testing.T) {
			// Mutate signature, non strict
			vMod := make([][]xlMetaV2ShallowVersion, 0, len(vers))
			for i, ver := range vers {
				newVers := make([]xlMetaV2ShallowVersion, 0, len(ver))
				for _, v := range ver {
					v.header.Signature = [4]byte{byte(i + 10), 0, 0, 0}
					newVers = append(newVers, v)
				}
				vMod = append(vMod, newVers)
			}
			merged := mergeXLV2Versions(i, true, 0, vMod...)
			if len(merged) == 0 && i < 2 {
				t.Error("Did not get any results")
				return
			}
			if len(merged) > 0 && i >= 2 {
				t.Error("Got unexpected results")
				return
			}
			for _, ver := range merged {
				if ver.header.Type == invalidVersionType {
					t.Errorf("Invalid result returned: %v", ver.header)
				}
			}
		})`
$DIR/cmd/xl-storage-format-v2_test.go: `v.header.Signature = [4]byte{byte(i + 10), 0, 0, 0}`
$DIR/cmd/xl-storage-format-v2_test.go: `newVers = append(newVers, v)`
$DIR/cmd/xl-storage-format-v2_test.go: `vMod = append(vMod, newVers)`
$DIR/cmd/xl-storage-format-v2_test.go: `t.Run(fmt.Sprintf("strict-modtime-q%d", i), func(t *testing.T) {
			// Mutate signature, non strict
			vMod := make([][]xlMetaV2ShallowVersion, 0, len(vers))
			for i, ver := range vers {
				newVers := make([]xlMetaV2ShallowVersion, 0, len(ver))
				for _, v := range ver {
					v.header.ModTime += int64(i + 10)
					newVers = append(newVers, v)
				}
				vMod = append(vMod, newVers)
			}
			merged := mergeXLV2Versions(i, true, 0, vMod...)
			if len(merged) == 0 && i < 2 {
				t.Error("Did not get any results")
				return
			}
			if len(merged) > 0 && i >= 2 {
				t.Error("Got unexpected results", len(merged), merged[0].header)
				return
			}
			for _, ver := range merged {
				if ver.header.Type == invalidVersionType {
					t.Errorf("Invalid result returned: %v", ver.header)
				}
			}
		})`
$DIR/cmd/xl-storage-format-v2_test.go: `v.header.ModTime += int64(i + 10)`
$DIR/cmd/xl-storage-format-v2_test.go: `newVers = append(newVers, v)`
$DIR/cmd/xl-storage-format-v2_test.go: `vMod = append(vMod, newVers)`
$DIR/cmd/xl-storage-format-v2_test.go: `t.Run(fmt.Sprintf("strict-flags-q%d", i), func(t *testing.T) {
			// Mutate signature, non strict
			vMod := make([][]xlMetaV2ShallowVersion, 0, len(vers))
			for i, ver := range vers {
				newVers := make([]xlMetaV2ShallowVersion, 0, len(ver))
				for _, v := range ver {
					v.header.Flags += xlFlags(i + 10)
					newVers = append(newVers, v)
				}
				vMod = append(vMod, newVers)
			}
			merged := mergeXLV2Versions(i, true, 0, vMod...)
			if len(merged) == 0 && i < 2 {
				t.Error("Did not get any results")
				return
			}
			if len(merged) > 0 && i >= 2 {
				t.Error("Got unexpected results", len(merged))
				return
			}
			for _, ver := range merged {
				if ver.header.Type == invalidVersionType {
					t.Errorf("Invalid result returned: %v", ver.header)
				}
			}
		})`
$DIR/cmd/xl-storage-format-v2_test.go: `v.header.Flags += xlFlags(i + 10)`
$DIR/cmd/xl-storage-format-v2_test.go: `newVers = append(newVers, v)`
$DIR/cmd/xl-storage-format-v2_test.go: `vMod = append(vMod, newVers)`
$DIR/cmd/xl-storage-format-v2_test.go: `t.Run(fmt.Sprintf("strict-type-q%d", i), func(t *testing.T) {
			// Mutate signature, non strict
			vMod := make([][]xlMetaV2ShallowVersion, 0, len(vers))
			for i, ver := range vers {
				newVers := make([]xlMetaV2ShallowVersion, 0, len(ver))
				for _, v := range ver {
					v.header.Type += VersionType(i + 10)
					newVers = append(newVers, v)
				}
				vMod = append(vMod, newVers)
			}
			merged := mergeXLV2Versions(i, true, 0, vMod...)
			if len(merged) == 0 && i < 2 {
				t.Error("Did not get any results")
				return
			}
			if len(merged) > 0 && i >= 2 {
				t.Error("Got unexpected results", len(merged))
				return
			}
			for _, ver := range merged {
				if ver.header.Type == invalidVersionType {
					t.Errorf("Invalid result returned: %v", ver.header)
				}
			}
		})`
$DIR/cmd/xl-storage-format-v2_test.go: `v.header.Type += VersionType(i + 10)`
$DIR/cmd/xl-storage-format-v2_test.go: `newVers = append(newVers, v)`
$DIR/cmd/xl-storage-format-v2_test.go: `vMod = append(vMod, newVers)`
$DIR/cmd/xl-storage-format-v2_test.go: `vDelMarker.meta, _ = base64.StdEncoding.DecodeString("gqRUeXBlAqZEZWxPYmqDoklExBCvwGEaY+BAO4B4vyG5ERorpU1UaW1l0xbgJlsWE9IHp01ldGFTeXOA")`
$DIR/cmd/xl-storage-format-v2_test.go: `vObj.meta, _ = base64.StdEncoding.DecodeString("gqRUeXBlAaVWMk9iat4AEaJJRMQQEkaOteYCSrWB3nqppSIKTqRERGlyxBAO8fXSJ5RI+YEtsp8KneVVpkVjQWxnbwGjRWNNDKNFY04Ep0VjQlNpemXSABAAAKdFY0luZGV4BaZFY0Rpc3TcABAFBgcICQoLDA0ODxABAgMEqENTdW1BbGdvAahQYXJ0TnVtc5EBqVBhcnRFVGFnc8CpUGFydFNpemVzkdEBL6pQYXJ0QVNpemVzkdEBL6RTaXpl0QEvpU1UaW1l0xbgJhIa6ABvp01ldGFTeXOBvHgtbWluaW8taW50ZXJuYWwtaW5saW5lLWRhdGHEBHRydWWnTWV0YVVzcoKsY29udGVudC10eXBluGFwcGxpY2F0aW9uL29jdGV0LXN0cmVhbaRldGFn2SBlYTIxMDE2MmVlYjRhZGMzMWZmOTg0Y2I3NDRkNmFmNg==")`
$DIR/cmd/xl-storage-format-v2_test.go: `t.Run(test.name, func(t *testing.T) {
			// Run multiple times, shuffling the input order.
			for i := int64(0); i < 50; i++ {
				t.Run(fmt.Sprint(i), func(t *testing.T) {
					rng := rand.New(rand.NewSource(i))
					rng.Shuffle(len(test.input), func(i, j int) {
						test.input[i], test.input[j] = test.input[j], test.input[i]
					})
					got := mergeXLV2Versions(test.quorum, true, 0, test.input...)
					if !reflect.DeepEqual(test.want, got) {
						t.Errorf("want %v != got %v", test.want, got)
					}
				})
			}
		})`
$DIR/cmd/xl-storage-format-v2_test.go: `t.Run(fmt.Sprint(i), func(t *testing.T) {
					rng := rand.New(rand.NewSource(i))
					rng.Shuffle(len(test.input), func(i, j int) {
						test.input[i], test.input[j] = test.input[j], test.input[i]
					})
					got := mergeXLV2Versions(test.quorum, true, 0, test.input...)
					if !reflect.DeepEqual(test.want, got) {
						t.Errorf("want %v != got %v", test.want, got)
					}
				})`
$DIR/cmd/xl-storage-format-v2_test.go: `rng.Shuffle(len(test.input), func(i, j int) {
						test.input[i], test.input[j] = test.input[j], test.input[i]
					})`
$DIR/cmd/xl-storage-format-v2_test.go: `test.input[i], test.input[j] = test.input[j], test.input[i]`
$DIR/cmd/xl-storage-format-v2_test.go: `buf = xlMetaV2TrimData(buf)`
$DIR/cmd/xl-storage-format-v2_test.go: `vers = append(vers, metaCacheEntry{
			name:     "a",
			metadata: buf,
		})`
$DIR/cmd/xl-storage-format-v2_test.go: `rng.Shuffle(len(vers), func(i, j int) {
			vers[i], vers[j] = vers[j], vers[i]
		})`
$DIR/cmd/xl-storage-format-v2_test.go: `vers[i], vers[j] = vers[j], vers[i]`
$DIR/cmd/xl-storage-format-v2_test.go: `v.cached = nil`
$DIR/cmd/xl-storage-format-v2_test.go: `ch <- v`
$DIR/cmd/xl-storage-format-v2_test.go: `close(ch)`
$DIR/cmd/xl-storage-format-v2_test.go: `entries = append(entries, ch)`
$DIR/cmd/xl-storage-format-v2_test.go: `t.Helper()`
$DIR/cmd/xl-storage-format-v2_test.go: `fi.SetHealing()`
$DIR/cmd/xl-storage-format-v2_test.go: `failOnErr(xl.AddVersion(fi))`
$DIR/cmd/xl-storage-format-v2_test.go: `fi, err = xl.ToFileInfo(fi.Volume, fi.Name, fi.VersionID, false, true)`
$DIR/cmd/xl-storage-format-v2_test.go: `.Open("testdata/xl.meta-corrupt.gz")`
$DIR/cmd/xl-storage-format-v2_test.go: `.NewReader(bufio.NewReader(f))`
$DIR/cmd/xl-storage-format-v2_test.go: `.NewReader(f)`
$DIR/cmd/xl-storage-format-v2_test.go: `.ReadAll(gz)`
$DIR/cmd/xl-storage-format-v2_test.go: `.NewReader(buf)`
$DIR/cmd/xl-storage-format-v2_test.go: `.Helper()`
$DIR/cmd/xl-storage-format-v2_test.go: `.Now()`
$DIR/cmd/xl-storage-format-v2_test.go: `.String()`
$DIR/cmd/xl-storage-format-v2_test.go: `.AddVersion(fi)`
$DIR/cmd/xl-storage-format-v2_test.go: `.AddVersion(fi)`
$DIR/cmd/xl-storage-format-v2_test.go: `.AppendTo(nil)`
$DIR/cmd/xl-storage-format-v2_test.go: `.Load(serialized)`
$DIR/cmd/xl-storage-format-v2_test.go: `.data.list()`
$DIR/cmd/xl-storage-format-v2_test.go: `.Equal(xl2.data.find("756100c6-b393-4981-928a-d49bbc164741"), data)`
$DIR/cmd/xl-storage-format-v2_test.go: `.data.find("756100c6-b393-4981-928a-d49bbc164741")`
$DIR/cmd/xl-storage-format-v2_test.go: `.Equal(xl2.data.find(fi.VersionID), data2)`
$DIR/cmd/xl-storage-format-v2_test.go: `.data.find(fi.VersionID)`
$DIR/cmd/xl-storage-format-v2_test.go: `.data.remove(fi.VersionID)`
$DIR/cmd/xl-storage-format-v2_test.go: `.data.validate()`
$DIR/cmd/xl-storage-format-v2_test.go: `.data.find(fi.VersionID)`
$DIR/cmd/xl-storage-format-v2_test.go: `.data.entries()`
$DIR/cmd/xl-storage-format-v2_test.go: `.data.replace(fi.VersionID, fi.Data)`
$DIR/cmd/xl-storage-format-v2_test.go: `.data.validate()`
$DIR/cmd/xl-storage-format-v2_test.go: `.data.entries()`
$DIR/cmd/xl-storage-format-v2_test.go: `.data.replace("756100c6-b393-4981-928a-d49bbc164741", data2)`
$DIR/cmd/xl-storage-format-v2_test.go: `.data.validate()`
$DIR/cmd/xl-storage-format-v2_test.go: `.data.entries()`
$DIR/cmd/xl-storage-format-v2_test.go: `.Equal(xl2.data.find("756100c6-b393-4981-928a-d49bbc164741"), data2)`
$DIR/cmd/xl-storage-format-v2_test.go: `.data.find("756100c6-b393-4981-928a-d49bbc164741")`
$DIR/cmd/xl-storage-format-v2_test.go: `.data.rename("756100c6-b393-4981-928a-d49bbc164741", "new-key")`
$DIR/cmd/xl-storage-format-v2_test.go: `.data.validate()`
$DIR/cmd/xl-storage-format-v2_test.go: `.Equal(xl2.data.find("new-key"), data2)`
$DIR/cmd/xl-storage-format-v2_test.go: `.data.find("new-key")`
$DIR/cmd/xl-storage-format-v2_test.go: `.data.entries()`
$DIR/cmd/xl-storage-format-v2_test.go: `.Equal(xl2.data.find(fi.VersionID), data2)`
$DIR/cmd/xl-storage-format-v2_test.go: `.data.find(fi.VersionID)`
$DIR/cmd/xl-storage-format-v2_test.go: `.Load(trimmed)`
$DIR/cmd/xl-storage-format-v2_test.go: `.Load(trimmed)`
$DIR/cmd/xl-storage-format-v2_test.go: `.New()`
$DIR/cmd/xl-storage-format-v2_test.go: `.New()`
$DIR/cmd/xl-storage-format-v2_test.go: `.String()`
$DIR/cmd/xl-storage-format-v2_test.go: `.Now()`
$DIR/cmd/xl-storage-format-v2_test.go: `.UTC()`
$DIR/cmd/xl-storage-format-v2_test.go: `.Add(time.Hour)`
$DIR/cmd/xl-storage-format-v2_test.go: `.String()`
$DIR/cmd/xl-storage-format-v2_test.go: `.Now()`
$DIR/cmd/xl-storage-format-v2_test.go: `.UTC()`
$DIR/cmd/xl-storage-format-v2_test.go: `.Add(-time.Hour)`
$DIR/cmd/xl-storage-format-v2_test.go: `.String()`
$DIR/cmd/xl-storage-format-v2_test.go: `.xlmeta.UsesDataDir()`
$DIR/cmd/xl-storage-format-v2_test.go: `.Helper()`
$DIR/cmd/xl-storage-format-v2_test.go: `.Now()`
$DIR/cmd/xl-storage-format-v2_test.go: `.String()`
$DIR/cmd/xl-storage-format-v2_test.go: `.String()`
$DIR/cmd/xl-storage-format-v2_test.go: `.Now()`
$DIR/cmd/xl-storage-format-v2_test.go: `.Add(10 * time.Hour)`
$DIR/cmd/xl-storage-format-v2_test.go: `.String()`
$DIR/cmd/xl-storage-format-v2_test.go: `.ModTime.Add(time.Duration(i) * time.Second)`
$DIR/cmd/xl-storage-format-v2_test.go: `.Duration(i)`
$DIR/cmd/xl-storage-format-v2_test.go: `.AddVersion(fi)`
$DIR/cmd/xl-storage-format-v2_test.go: `.findVersion(uuid.MustParse(tc.versionID))`
$DIR/cmd/xl-storage-format-v2_test.go: `.MustParse(tc.versionID)`
$DIR/cmd/xl-storage-format-v2_test.go: `.SharedDataDirCount(version.getVersionID(), version.ObjectV2.DataDir)`
$DIR/cmd/xl-storage-format-v2_test.go: `.getVersionID()`
$DIR/cmd/xl-storage-format-v2_test.go: `.DeleteVersion(fileInfos[i])`
$DIR/cmd/xl-storage-format-v2_test.go: `.ReadFile("testdata/xl.meta-v1.2.zst")`
$DIR/cmd/xl-storage-format-v2_test.go: `.NewReader(nil)`
$DIR/cmd/xl-storage-format-v2_test.go: `.DecodeAll(data, nil)`
$DIR/cmd/xl-storage-format-v2_test.go: `.sortByModTime()`
$DIR/cmd/xl-storage-format-v2_test.go: `.SliceIsSorted(xl.versions, func(i, j int) bool {
			return xl.versions[i].header.ModTime > xl.versions[j].header.ModTime
		})`
$DIR/cmd/xl-storage-format-v2_test.go: `.getIdx(i)`
$DIR/cmd/xl-storage-format-v2_test.go: `.header()`
$DIR/cmd/xl-storage-format-v2_test.go: `.Run("load-legacy", func(t *testing.T) {
		var xl xlMetaV2
		err = xl.Load(data)
		if err != nil {
			t.Fatal(err)
		}
		test(t, &xl)
	})`
$DIR/cmd/xl-storage-format-v2_test.go: `.Load(data)`
$DIR/cmd/xl-storage-format-v2_test.go: `.Run("roundtrip", func(t *testing.T) {
		var xl xlMetaV2
		err = xl.Load(data)
		if err != nil {
			t.Fatal(err)
		}
		data, err = xl.AppendTo(nil)
		if err != nil {
			t.Fatal(err)
		}
		xl = xlMetaV2{}
		err = xl.Load(data)
		if err != nil {
			t.Fatal(err)
		}
		test(t, &xl)
	})`
$DIR/cmd/xl-storage-format-v2_test.go: `.Load(data)`
$DIR/cmd/xl-storage-format-v2_test.go: `.AppendTo(nil)`
$DIR/cmd/xl-storage-format-v2_test.go: `.Load(data)`
$DIR/cmd/xl-storage-format-v2_test.go: `.Load(data)`
$DIR/cmd/xl-storage-format-v2_test.go: `.New()`
$DIR/cmd/xl-storage-format-v2_test.go: `.Now()`
$DIR/cmd/xl-storage-format-v2_test.go: `.UnixNano()`
$DIR/cmd/xl-storage-format-v2_test.go: `.addVersion(ventry)`
$DIR/cmd/xl-storage-format-v2_test.go: `.AppendTo(nil)`
$DIR/cmd/xl-storage-format-v2_test.go: `.Load(data)`
$DIR/cmd/xl-storage-format-v2_test.go: `.getIdx(0)`
$DIR/cmd/xl-storage-format-v2_test.go: `.ReadFile("testdata/xl-meta-consist.zip")`
$DIR/cmd/xl-storage-format-v2_test.go: `.NewReader(bytes.NewReader(dataZ), int64(len(dataZ)))`
$DIR/cmd/xl-storage-format-v2_test.go: `.NewReader(dataZ)`
$DIR/cmd/xl-storage-format-v2_test.go: `.Open()`
$DIR/cmd/xl-storage-format-v2_test.go: `.ReadAll(in)`
$DIR/cmd/xl-storage-format-v2_test.go: `.LoadOrConvert(buf)`
$DIR/cmd/xl-storage-format-v2_test.go: `.Marshal(ver.header)`
$DIR/cmd/xl-storage-format-v2_test.go: `.unmarshalV(0, ver.meta)`
$DIR/cmd/xl-storage-format-v2_test.go: `.Marshal(x)`
$DIR/cmd/xl-storage-format-v2_test.go: `.Run(fmt.Sprintf("non-strict-q%d", i), func(t *testing.T) {
			merged := mergeXLV2Versions(i, false, 0, vers...)
			if len(merged) == 0 {
				t.Error("Did not get any results")
				return
			}
			for _, ver := range merged {
				if ver.header.Type == invalidVersionType {
					t.Errorf("Invalid result returned: %v", ver.header)
				}
			}
		})`
$DIR/cmd/xl-storage-format-v2_test.go: `.Sprintf("non-strict-q%d", i)`
$DIR/cmd/xl-storage-format-v2_test.go: `.Run(fmt.Sprintf("strict-q%d", i), func(t *testing.T) {
			merged := mergeXLV2Versions(i, true, 0, vers...)
			if len(merged) == 0 {
				t.Error("Did not get any results")
				return
			}
			for _, ver := range merged {
				if ver.header.Type == invalidVersionType {
					t.Errorf("Invalid result returned: %v", ver.header)
				}
			}
		})`
$DIR/cmd/xl-storage-format-v2_test.go: `.Sprintf("strict-q%d", i)`
$DIR/cmd/xl-storage-format-v2_test.go: `.Run(fmt.Sprintf("signature-q%d", i), func(t *testing.T) {
			// Mutate signature, non strict
			vMod := make([][]xlMetaV2ShallowVersion, 0, len(vers))
			for i, ver := range vers {
				newVers := make([]xlMetaV2ShallowVersion, 0, len(ver))
				for _, v := range ver {
					v.header.Signature = [4]byte{byte(i + 10), 0, 0, 0}
					newVers = append(newVers, v)
				}
				vMod = append(vMod, newVers)
			}
			merged := mergeXLV2Versions(i, false, 0, vMod...)
			if len(merged) == 0 {
				t.Error("Did not get any results")
				return
			}
			for _, ver := range merged {
				if ver.header.Type == invalidVersionType {
					t.Errorf("Invalid result returned: %v", ver.header)
				}
			}
		})`
$DIR/cmd/xl-storage-format-v2_test.go: `.Sprintf("signature-q%d", i)`
$DIR/cmd/xl-storage-format-v2_test.go: `.Run(fmt.Sprintf("modtime-q%d", i), func(t *testing.T) {
			// Mutate modtime, but rest is consistent.
			vMod := make([][]xlMetaV2ShallowVersion, 0, len(vers))
			for i, ver := range vers {
				newVers := make([]xlMetaV2ShallowVersion, 0, len(ver))
				for _, v := range ver {
					v.header.ModTime += int64(i)
					newVers = append(newVers, v)
				}
				vMod = append(vMod, newVers)
			}
			merged := mergeXLV2Versions(i, false, 0, vMod...)
			if len(merged) == 0 && i < 2 {
				t.Error("Did not get any results")
				return
			}
			if len(merged) > 0 && i >= 2 {
				t.Error("Got unexpected results")
				return
			}
			for _, ver := range merged {
				if ver.header.Type == invalidVersionType {
					t.Errorf("Invalid result returned: %v", ver.header)
				}
			}
		})`
$DIR/cmd/xl-storage-format-v2_test.go: `.Sprintf("modtime-q%d", i)`
$DIR/cmd/xl-storage-format-v2_test.go: `.Run(fmt.Sprintf("flags-q%d", i), func(t *testing.T) {
			// Mutate signature, non strict
			vMod := make([][]xlMetaV2ShallowVersion, 0, len(vers))
			for i, ver := range vers {
				newVers := make([]xlMetaV2ShallowVersion, 0, len(ver))
				for _, v := range ver {
					v.header.Flags += xlFlags(i)
					newVers = append(newVers, v)
				}
				vMod = append(vMod, newVers)
			}
			merged := mergeXLV2Versions(i, false, 0, vMod...)
			if len(merged) == 0 {
				t.Error("Did not get any results")
				return
			}
			for _, ver := range merged {
				if ver.header.Type == invalidVersionType {
					t.Errorf("Invalid result returned: %v", ver.header)
				}
			}
		})`
$DIR/cmd/xl-storage-format-v2_test.go: `.Sprintf("flags-q%d", i)`
$DIR/cmd/xl-storage-format-v2_test.go: `.Run(fmt.Sprintf("versionid-q%d", i), func(t *testing.T) {
			// Mutate signature, non strict
			vMod := make([][]xlMetaV2ShallowVersion, 0, len(vers))
			for i, ver := range vers {
				newVers := make([]xlMetaV2ShallowVersion, 0, len(ver))
				for _, v := range ver {
					v.header.VersionID[0] += byte(i)
					newVers = append(newVers, v)
				}
				vMod = append(vMod, newVers)
			}
			merged := mergeXLV2Versions(i, false, 0, vMod...)
			if len(merged) == 0 && i < 2 {
				t.Error("Did not get any results")
				return
			}
			if len(merged) > 0 && i >= 2 {
				t.Error("Got unexpected results")
				return
			}
			for _, ver := range merged {
				if ver.header.Type == invalidVersionType {
					t.Errorf("Invalid result returned: %v", ver.header)
				}
			}
		})`
$DIR/cmd/xl-storage-format-v2_test.go: `.Sprintf("versionid-q%d", i)`
$DIR/cmd/xl-storage-format-v2_test.go: `.Run(fmt.Sprintf("strict-signature-q%d", i), func(t *testing.T) {
			// Mutate signature, non strict
			vMod := make([][]xlMetaV2ShallowVersion, 0, len(vers))
			for i, ver := range vers {
				newVers := make([]xlMetaV2ShallowVersion, 0, len(ver))
				for _, v := range ver {
					v.header.Signature = [4]byte{byte(i + 10), 0, 0, 0}
					newVers = append(newVers, v)
				}
				vMod = append(vMod, newVers)
			}
			merged := mergeXLV2Versions(i, true, 0, vMod...)
			if len(merged) == 0 && i < 2 {
				t.Error("Did not get any results")
				return
			}
			if len(merged) > 0 && i >= 2 {
				t.Error("Got unexpected results")
				return
			}
			for _, ver := range merged {
				if ver.header.Type == invalidVersionType {
					t.Errorf("Invalid result returned: %v", ver.header)
				}
			}
		})`
$DIR/cmd/xl-storage-format-v2_test.go: `.Sprintf("strict-signature-q%d", i)`
$DIR/cmd/xl-storage-format-v2_test.go: `.Run(fmt.Sprintf("strict-modtime-q%d", i), func(t *testing.T) {
			// Mutate signature, non strict
			vMod := make([][]xlMetaV2ShallowVersion, 0, len(vers))
			for i, ver := range vers {
				newVers := make([]xlMetaV2ShallowVersion, 0, len(ver))
				for _, v := range ver {
					v.header.ModTime += int64(i + 10)
					newVers = append(newVers, v)
				}
				vMod = append(vMod, newVers)
			}
			merged := mergeXLV2Versions(i, true, 0, vMod...)
			if len(merged) == 0 && i < 2 {
				t.Error("Did not get any results")
				return
			}
			if len(merged) > 0 && i >= 2 {
				t.Error("Got unexpected results", len(merged), merged[0].header)
				return
			}
			for _, ver := range merged {
				if ver.header.Type == invalidVersionType {
					t.Errorf("Invalid result returned: %v", ver.header)
				}
			}
		})`
$DIR/cmd/xl-storage-format-v2_test.go: `.Sprintf("strict-modtime-q%d", i)`
$DIR/cmd/xl-storage-format-v2_test.go: `.Run(fmt.Sprintf("strict-flags-q%d", i), func(t *testing.T) {
			// Mutate signature, non strict
			vMod := make([][]xlMetaV2ShallowVersion, 0, len(vers))
			for i, ver := range vers {
				newVers := make([]xlMetaV2ShallowVersion, 0, len(ver))
				for _, v := range ver {
					v.header.Flags += xlFlags(i + 10)
					newVers = append(newVers, v)
				}
				vMod = append(vMod, newVers)
			}
			merged := mergeXLV2Versions(i, true, 0, vMod...)
			if len(merged) == 0 && i < 2 {
				t.Error("Did not get any results")
				return
			}
			if len(merged) > 0 && i >= 2 {
				t.Error("Got unexpected results", len(merged))
				return
			}
			for _, ver := range merged {
				if ver.header.Type == invalidVersionType {
					t.Errorf("Invalid result returned: %v", ver.header)
				}
			}
		})`
$DIR/cmd/xl-storage-format-v2_test.go: `.Sprintf("strict-flags-q%d", i)`
$DIR/cmd/xl-storage-format-v2_test.go: `.Run(fmt.Sprintf("strict-type-q%d", i), func(t *testing.T) {
			// Mutate signature, non strict
			vMod := make([][]xlMetaV2ShallowVersion, 0, len(vers))
			for i, ver := range vers {
				newVers := make([]xlMetaV2ShallowVersion, 0, len(ver))
				for _, v := range ver {
					v.header.Type += VersionType(i + 10)
					newVers = append(newVers, v)
				}
				vMod = append(vMod, newVers)
			}
			merged := mergeXLV2Versions(i, true, 0, vMod...)
			if len(merged) == 0 && i < 2 {
				t.Error("Did not get any results")
				return
			}
			if len(merged) > 0 && i >= 2 {
				t.Error("Got unexpected results", len(merged))
				return
			}
			for _, ver := range merged {
				if ver.header.Type == invalidVersionType {
					t.Errorf("Invalid result returned: %v", ver.header)
				}
			}
		})`
$DIR/cmd/xl-storage-format-v2_test.go: `.Sprintf("strict-type-q%d", i)`
$DIR/cmd/xl-storage-format-v2_test.go: `.StdEncoding.DecodeString("gqRUeXBlAqZEZWxPYmqDoklExBCvwGEaY+BAO4B4vyG5ERorpU1UaW1l0xbgJlsWE9IHp01ldGFTeXOA")`
$DIR/cmd/xl-storage-format-v2_test.go: `.StdEncoding.DecodeString("gqRUeXBlAaVWMk9iat4AEaJJRMQQEkaOteYCSrWB3nqppSIKTqRERGlyxBAO8fXSJ5RI+YEtsp8KneVVpkVjQWxnbwGjRWNNDKNFY04Ep0VjQlNpemXSABAAAKdFY0luZGV4BaZFY0Rpc3TcABAFBgcICQoLDA0ODxABAgMEqENTdW1BbGdvAahQYXJ0TnVtc5EBqVBhcnRFVGFnc8CpUGFydFNpemVzkdEBL6pQYXJ0QVNpemVzkdEBL6RTaXpl0QEvpU1UaW1l0xbgJhIa6ABvp01ldGFTeXOBvHgtbWluaW8taW50ZXJuYWwtaW5saW5lLWRhdGHEBHRydWWnTWV0YVVzcoKsY29udGVudC10eXBluGFwcGxpY2F0aW9uL29jdGV0LXN0cmVhbaRldGFn2SBlYTIxMDE2MmVlYjRhZGMzMWZmOTg0Y2I3NDRkNmFmNg==")`
$DIR/cmd/xl-storage-format-v2_test.go: `.Run(test.name, func(t *testing.T) {
			// Run multiple times, shuffling the input order.
			for i := int64(0); i < 50; i++ {
				t.Run(fmt.Sprint(i), func(t *testing.T) {
					rng := rand.New(rand.NewSource(i))
					rng.Shuffle(len(test.input), func(i, j int) {
						test.input[i], test.input[j] = test.input[j], test.input[i]
					})
					got := mergeXLV2Versions(test.quorum, true, 0, test.input...)
					if !reflect.DeepEqual(test.want, got) {
						t.Errorf("want %v != got %v", test.want, got)
					}
				})
			}
		})`
$DIR/cmd/xl-storage-format-v2_test.go: `.Run(fmt.Sprint(i), func(t *testing.T) {
					rng := rand.New(rand.NewSource(i))
					rng.Shuffle(len(test.input), func(i, j int) {
						test.input[i], test.input[j] = test.input[j], test.input[i]
					})
					got := mergeXLV2Versions(test.quorum, true, 0, test.input...)
					if !reflect.DeepEqual(test.want, got) {
						t.Errorf("want %v != got %v", test.want, got)
					}
				})`
$DIR/cmd/xl-storage-format-v2_test.go: `.Sprint(i)`
$DIR/cmd/xl-storage-format-v2_test.go: `.New(rand.NewSource(i))`
$DIR/cmd/xl-storage-format-v2_test.go: `.NewSource(i)`
$DIR/cmd/xl-storage-format-v2_test.go: `.Shuffle(len(test.input), func(i, j int) {
						test.input[i], test.input[j] = test.input[j], test.input[i]
					})`
$DIR/cmd/xl-storage-format-v2_test.go: `.DeepEqual(test.want, got)`
$DIR/cmd/xl-storage-format-v2_test.go: `.ReadFile("testdata/xl-meta-merge.zip")`
$DIR/cmd/xl-storage-format-v2_test.go: `.NewReader(bytes.NewReader(dataZ), int64(len(dataZ)))`
$DIR/cmd/xl-storage-format-v2_test.go: `.NewReader(dataZ)`
$DIR/cmd/xl-storage-format-v2_test.go: `.Open()`
$DIR/cmd/xl-storage-format-v2_test.go: `.ReadAll(in)`
$DIR/cmd/xl-storage-format-v2_test.go: `.New(rand.NewSource(int64(i)))`
$DIR/cmd/xl-storage-format-v2_test.go: `.NewSource(int64(i))`
$DIR/cmd/xl-storage-format-v2_test.go: `.Shuffle(len(vers), func(i, j int) {
			vers[i], vers[j] = vers[j], vers[i]
		})`
$DIR/cmd/xl-storage-format-v2_test.go: `.Background()`
$DIR/cmd/xl-storage-format-v2_test.go: `.xlmeta()`
$DIR/cmd/xl-storage-format-v2_test.go: `.SliceIsSorted(xl.versions, func(i, j int) bool {
			return xl.versions[i].header.sortsBefore(xl.versions[j].header)
		})`
$DIR/cmd/xl-storage-format-v2_test.go: `.header.sortsBefore(xl.versions[j].header)`
$DIR/cmd/xl-storage-format-v2_test.go: `.Helper()`
$DIR/cmd/xl-storage-format-v2_test.go: `.Now()`
$DIR/cmd/xl-storage-format-v2_test.go: `.String()`
$DIR/cmd/xl-storage-format-v2_test.go: `.SetHealing()`
$DIR/cmd/xl-storage-format-v2_test.go: `.AddVersion(fi)`
$DIR/cmd/xl-storage-format-v2_test.go: `.ToFileInfo(fi.Volume, fi.Name, fi.VersionID, false, true)`
$DIR/cmd/xl-storage-format-v2_test.go: `.Healing()`
$DIR/cmd/xl-storage-format_test.go: `.Unmarshal(xlMetaJSON, &unMarshalXLMeta)`
$DIR/cmd/xl-storage-format_test.go: `.Unmarshal(xlMetaJSON, &jsoniterXLMeta)`
$DIR/cmd/xl-storage-format_test.go: `.Unmarshal(xlMetaJSON, &unMarshalXLMeta)`
$DIR/cmd/xl-storage-format_test.go: `.Unmarshal(xlMetaJSON, &jsoniterXLMeta)`
$DIR/cmd/xl-storage-free-version_test.go: `t.Helper()`
$DIR/cmd/xl-storage-free-version_test.go: `t.Helper()`
$DIR/cmd/xl-storage-free-version_test.go: `counter++`
$DIR/cmd/xl-storage-free-version_test.go: `fatalErr(xl.AddVersion(fi))`
$DIR/cmd/xl-storage-free-version_test.go: `report()`
$DIR/cmd/xl-storage-free-version_test.go: `tierfi.VersionID = ""`
$DIR/cmd/xl-storage-free-version_test.go: `fatalErr(xl.AddVersion(tierfi))`
$DIR/cmd/xl-storage-free-version_test.go: `report()`
$DIR/cmd/xl-storage-free-version_test.go: `tierfi.TransitionStatus = lifecycle.TransitionComplete`
$DIR/cmd/xl-storage-free-version_test.go: `tierfi.TransitionedObjName = mustGetUUID()`
$DIR/cmd/xl-storage-free-version_test.go: `tierfi.TransitionTier = "MINIOTIER-1"`
$DIR/cmd/xl-storage-free-version_test.go: `_, err = xl.DeleteVersion(tierfi)`
$DIR/cmd/xl-storage-free-version_test.go: `fatalErr(err)`
$DIR/cmd/xl-storage-free-version_test.go: `report()`
$DIR/cmd/xl-storage-free-version_test.go: `newtierfi.SetTierFreeVersionID(fvIDs[0])`
$DIR/cmd/xl-storage-free-version_test.go: `fatalErr(xl.AddFreeVersion(newtierfi))`
$DIR/cmd/xl-storage-free-version_test.go: `report()`
$DIR/cmd/xl-storage-free-version_test.go: `fatalErr(xl.AddVersion(newtierfi))`
$DIR/cmd/xl-storage-free-version_test.go: `report()`
$DIR/cmd/xl-storage-free-version_test.go: `newtierfi.TransitionTier = ""`
$DIR/cmd/xl-storage-free-version_test.go: `newtierfi.TransitionedObjName = ""`
$DIR/cmd/xl-storage-free-version_test.go: `newtierfi.TransitionStatus = ""`
$DIR/cmd/xl-storage-free-version_test.go: `newtierfi.SetTierFreeVersionID(fvIDs[1])`
$DIR/cmd/xl-storage-free-version_test.go: `report()`
$DIR/cmd/xl-storage-free-version_test.go: `_, err = xl.DeleteVersion(newtierfi)`
$DIR/cmd/xl-storage-free-version_test.go: `report()`
$DIR/cmd/xl-storage-free-version_test.go: `fatalErr(err)`
$DIR/cmd/xl-storage-free-version_test.go: `_, err = ft.afterFn(fi)`
$DIR/cmd/xl-storage-free-version_test.go: `freefi.VersionID = fvID`
$DIR/cmd/xl-storage-free-version_test.go: `_, err = xl.DeleteVersion(freefi)`
$DIR/cmd/xl-storage-free-version_test.go: `fatalErr(err)`
$DIR/cmd/xl-storage-free-version_test.go: `report()`
$DIR/cmd/xl-storage-free-version_test.go: `freeVersions, err = xl.listFreeVersions(newtierfi.Volume, newtierfi.Name)`
$DIR/cmd/xl-storage-free-version_test.go: `report()`
$DIR/cmd/xl-storage-free-version_test.go: `newfi.SetTierFreeVersionID("00000000-0000-0000-0000-0000000000f3")`
$DIR/cmd/xl-storage-free-version_test.go: `fatalErr(xl.AddFreeVersion(newfi))`
$DIR/cmd/xl-storage-free-version_test.go: `report()`
$DIR/cmd/xl-storage-free-version_test.go: `freeVersions, err = xl.listFreeVersions(newtierfi.Volume, newtierfi.Name)`
$DIR/cmd/xl-storage-free-version_test.go: `fi.SetTierFreeVersionID(uuid.New().String())`
$DIR/cmd/xl-storage-free-version_test.go: `j.MetaSys = make(map[string][]byte)`
$DIR/cmd/xl-storage-free-version_test.go: `j.MetaSys[metaTierName] = []byte("WARM-1")`
$DIR/cmd/xl-storage-free-version_test.go: `j.MetaSys[metaTierStatus] = []byte(lifecycle.TransitionComplete)`
$DIR/cmd/xl-storage-free-version_test.go: `j.MetaSys[metaTierObjName] = []byte("obj-1")`
$DIR/cmd/xl-storage-free-version_test.go: `fi.SetSkipTierFreeVersion()`
$DIR/cmd/xl-storage-free-version_test.go: `.Helper()`
$DIR/cmd/xl-storage-free-version_test.go: `.Helper()`
$DIR/cmd/xl-storage-free-version_test.go: `.Now()`
$DIR/cmd/xl-storage-free-version_test.go: `.String()`
$DIR/cmd/xl-storage-free-version_test.go: `.AddVersion(fi)`
$DIR/cmd/xl-storage-free-version_test.go: `.AddVersion(tierfi)`
$DIR/cmd/xl-storage-free-version_test.go: `.DeleteVersion(tierfi)`
$DIR/cmd/xl-storage-free-version_test.go: `.SetTierFreeVersionID(fvIDs[0])`
$DIR/cmd/xl-storage-free-version_test.go: `.AddFreeVersion(newtierfi)`
$DIR/cmd/xl-storage-free-version_test.go: `.AddVersion(newtierfi)`
$DIR/cmd/xl-storage-free-version_test.go: `.SetTierFreeVersionID(fvIDs[1])`
$DIR/cmd/xl-storage-free-version_test.go: `.DeleteVersion(newtierfi)`
$DIR/cmd/xl-storage-free-version_test.go: `.listFreeVersions(newtierfi.Volume, newtierfi.Name)`
$DIR/cmd/xl-storage-free-version_test.go: `.ToFileInfo(ft.vol, ft.name, "", ft.inclFreeVers, true)`
$DIR/cmd/xl-storage-free-version_test.go: `.Is(err, ft.expectedErr)`
$DIR/cmd/xl-storage-free-version_test.go: `.TierFreeVersion()`
$DIR/cmd/xl-storage-free-version_test.go: `.afterFn(fi)`
$DIR/cmd/xl-storage-free-version_test.go: `.DeleteVersion(freefi)`
$DIR/cmd/xl-storage-free-version_test.go: `.listFreeVersions(newtierfi.Volume, newtierfi.Name)`
$DIR/cmd/xl-storage-free-version_test.go: `.SetTierFreeVersionID("00000000-0000-0000-0000-0000000000f3")`
$DIR/cmd/xl-storage-free-version_test.go: `.AddFreeVersion(newfi)`
$DIR/cmd/xl-storage-free-version_test.go: `.listFreeVersions(newtierfi.Volume, newtierfi.Name)`
$DIR/cmd/xl-storage-free-version_test.go: `.Now()`
$DIR/cmd/xl-storage-free-version_test.go: `.String()`
$DIR/cmd/xl-storage-free-version_test.go: `.SetTierFreeVersionID(uuid.New().String())`
$DIR/cmd/xl-storage-free-version_test.go: `.New()`
$DIR/cmd/xl-storage-free-version_test.go: `.String()`
$DIR/cmd/xl-storage-free-version_test.go: `.InitFreeVersion(fi)`
$DIR/cmd/xl-storage-free-version_test.go: `.SetSkipTierFreeVersion()`
$DIR/cmd/xl-storage-free-version_test.go: `.InitFreeVersion(fi)`
$DIR/cmd/xl-storage_test.go: `t.Run("", func(t *testing.T) {
			if gotErr != testCase.expectedErr {
				t.Errorf("Expected %s, got %s", testCase.expectedErr, gotErr)
			}
		})`
$DIR/cmd/xl-storage_test.go: `err = os.Mkdir(dir3, 0o777)`
$DIR/cmd/xl-storage_test.go: `_, err = xlStorage.ReadVersion(context.Background(), "", testCase.volume, testCase.path, "", ReadOptions{})`
$DIR/cmd/xl-storage_test.go: `dataRead, err = xlStorage.ReadAll(context.Background(), testCase.volume, testCase.path)`
$DIR/cmd/xl-storage_test.go: `_, err = newLocalXLStorage(permDeniedDir)`
$DIR/cmd/xl-storage_test.go: `t.Cleanup(func() {
			os.Chmod(slashpath.Join(permDeniedDir, "mybucket"), 0o775)
		})`
$DIR/cmd/xl-storage_test.go: `os.Chmod(slashpath.Join(permDeniedDir, "mybucket"), 0o775)`
$DIR/cmd/xl-storage_test.go: `t.Cleanup(func() {
			os.Chmod(permDeniedDir, 0o775)
		})`
$DIR/cmd/xl-storage_test.go: `os.Chmod(permDeniedDir, 0o775)`
$DIR/cmd/xl-storage_test.go: `_, err = newLocalXLStorage(permDeniedDir)`
$DIR/cmd/xl-storage_test.go: `os.RemoveAll(diskPath)`
$DIR/cmd/xl-storage_test.go: `err = xlStorageDeletedStorage.DeleteVol(context.Background(), "Del-Vol", false)`
$DIR/cmd/xl-storage_test.go: `volInfo, err = xlStorage.StatVol(context.Background(), testCase.volName)`
$DIR/cmd/xl-storage_test.go: `os.RemoveAll(diskPath)`
$DIR/cmd/xl-storage_test.go: `_, err = xlStorageDeletedStorage.StatVol(context.Background(), "Stat vol")`
$DIR/cmd/xl-storage_test.go: `volInfos, err = xlStorage.ListVols(context.Background())`
$DIR/cmd/xl-storage_test.go: `volFound = true`
$DIR/cmd/xl-storage_test.go: `os.RemoveAll(path)`
$DIR/cmd/xl-storage_test.go: `os.RemoveAll(diskPath)`
$DIR/cmd/xl-storage_test.go: `dirList, err = xlStorage.ListDir(context.Background(), "", testCase.srcVol, testCase.srcPath, -1)`
$DIR/cmd/xl-storage_test.go: `_, err = newLocalXLStorage(permDeniedDir)`
$DIR/cmd/xl-storage_test.go: `err = xlStorageDeletedStorage.Delete(context.Background(), "del-vol", "my-file", DeleteOptions{
		Recursive: false,
		Immediate: false,
	})`
$DIR/cmd/xl-storage_test.go: `t.Cleanup(func() {
		os.Chmod(pathJoin(path, "no-permissions"), 0o775)
	})`
$DIR/cmd/xl-storage_test.go: `os.Chmod(pathJoin(path, "no-permissions"), 0o775)`
$DIR/cmd/xl-storage_test.go: `_, err = newLocalXLStorage(permDeniedDir)`
$DIR/cmd/xl-storage_test.go: `err = os.RemoveAll(diskPath)`
$DIR/cmd/xl-storage_test.go: `err = xlStorageDeletedStorage.Delete(context.Background(), "del-vol", "my-file", DeleteOptions{
		Recursive: false,
		Immediate: false,
	})`
$DIR/cmd/xl-storage_test.go: `err = xlStorage.AppendFile(context.Background(), volume, appendFile.fileName, []byte("hello, world"))`
$DIR/cmd/xl-storage_test.go: `n, err = xlStorage.ReadFile(context.Background(), testCase.volume, testCase.fileName, testCase.offset, buf, v)`
$DIR/cmd/xl-storage_test.go: `resultErrno = uintptr(errno)`
$DIR/cmd/xl-storage_test.go: `expectErrno = uintptr(errno)`
$DIR/cmd/xl-storage_test.go: `_, err = newLocalXLStorage(permDeniedDir)`
$DIR/cmd/xl-storage_test.go: `h.Write(data)`
$DIR/cmd/xl-storage_test.go: `h.Write([]byte{0})`
$DIR/cmd/xl-storage_test.go: `err = xlStorage.MakeVol(context.Background(), volume)`
$DIR/cmd/xl-storage_test.go: `_, err = newLocalXLStorage(permDeniedDir)`
$DIR/cmd/xl-storage_test.go: `xlStoragePermStorage, err = newLocalXLStorage(permDeniedDir)`
$DIR/cmd/xl-storage_test.go: `err = xlStorage.AppendFile(context.Background(), "bn", "yes", []byte("hello, world"))`
$DIR/cmd/xl-storage_test.go: `versions[i] = uuid.New().String()`
$DIR/cmd/xl-storage_test.go: `t.Helper()`
$DIR/cmd/xl-storage_test.go: `checkVerExist(t)`
$DIR/cmd/xl-storage_test.go: `err = xl.DeleteVersion(ctx, volume, object, FileInfo{Name: object, Volume: volume, VersionID: versions[0]}, false, DeleteOptions{})`
$DIR/cmd/xl-storage_test.go: `deleted[0] = true`
$DIR/cmd/xl-storage_test.go: `checkVerExist(t)`
$DIR/cmd/xl-storage_test.go: `fis[0].Versions = append(fis[0].Versions, FileInfo{Name: object, Volume: volume, VersionID: versions[i]})`
$DIR/cmd/xl-storage_test.go: `deleted[i] = true`
$DIR/cmd/xl-storage_test.go: `checkVerExist(t)`
$DIR/cmd/xl-storage_test.go: `fis[0].Versions = nil`
$DIR/cmd/xl-storage_test.go: `fis[0].Versions = append(fis[0].Versions, FileInfo{Name: object, Volume: volume, VersionID: versions[i]})`
$DIR/cmd/xl-storage_test.go: `deleted[i] = true`
$DIR/cmd/xl-storage_test.go: `errs = xl.DeleteVersions(ctx, volume, fis, DeleteOptions{})`
$DIR/cmd/xl-storage_test.go: `checkVerExist(t)`
$DIR/cmd/xl-storage_test.go: `h.Write(data)`
$DIR/cmd/xl-storage_test.go: `algo = HighwayHash256S`
$DIR/cmd/xl-storage_test.go: `w.Write(shard[:n])`
$DIR/cmd/xl-storage_test.go: `disk.MakeVol(context.Background(), volume)`
$DIR/cmd/xl-storage_test.go: `.Run("", func(t *testing.T) {
			if gotErr != testCase.expectedErr {
				t.Errorf("Expected %s, got %s", testCase.expectedErr, gotErr)
			}
		})`
$DIR/cmd/xl-storage_test.go: `.TempDir()`
$DIR/cmd/xl-storage_test.go: `.TempDir()`
$DIR/cmd/xl-storage_test.go: `.Join(tmp, "non-existent-directory")`
$DIR/cmd/xl-storage_test.go: `.Join(tmp, "file")`
$DIR/cmd/xl-storage_test.go: `.WriteFile(dir2, []byte("hello"), 0o777)`
$DIR/cmd/xl-storage_test.go: `.Join(tmp, "empty")`
$DIR/cmd/xl-storage_test.go: `.Mkdir(dir3, 0o777)`
$DIR/cmd/xl-storage_test.go: `.MakeVol(context.Background(), "exists-legacy")`
$DIR/cmd/xl-storage_test.go: `.Background()`
$DIR/cmd/xl-storage_test.go: `.AppendFile(context.Background(), "exists-legacy", "as-file/xl.json", []byte(legacyJSON))`
$DIR/cmd/xl-storage_test.go: `.Background()`
$DIR/cmd/xl-storage_test.go: `.ReadVersion(context.Background(), "", "exists-legacy", "as-file", "", ReadOptions{})`
$DIR/cmd/xl-storage_test.go: `.Background()`
$DIR/cmd/xl-storage_test.go: `.ReadFile("testdata/xl.meta")`
$DIR/cmd/xl-storage_test.go: `.MakeVol(context.Background(), "exists")`
$DIR/cmd/xl-storage_test.go: `.Background()`
$DIR/cmd/xl-storage_test.go: `.AppendFile(context.Background(), "exists", "as-directory/as-file/xl.meta", xlMeta)`
$DIR/cmd/xl-storage_test.go: `.Background()`
$DIR/cmd/xl-storage_test.go: `.AppendFile(context.Background(), "exists", "as-file/xl.meta", xlMeta)`
$DIR/cmd/xl-storage_test.go: `.Background()`
$DIR/cmd/xl-storage_test.go: `.AppendFile(context.Background(), "exists", "as-file-parent/xl.meta", xlMeta)`
$DIR/cmd/xl-storage_test.go: `.Background()`
$DIR/cmd/xl-storage_test.go: `.MakeVol(context.Background(), "exists/as-file/"+fi.DataDir)`
$DIR/cmd/xl-storage_test.go: `.Background()`
$DIR/cmd/xl-storage_test.go: `.ReadVersion(context.Background(), "", testCase.volume, testCase.path, "", ReadOptions{})`
$DIR/cmd/xl-storage_test.go: `.Background()`
$DIR/cmd/xl-storage_test.go: `.MakeVol(context.Background(), "exists")`
$DIR/cmd/xl-storage_test.go: `.Background()`
$DIR/cmd/xl-storage_test.go: `.AppendFile(context.Background(), "exists", "as-directory/as-file", []byte("Hello, World"))`
$DIR/cmd/xl-storage_test.go: `.Background()`
$DIR/cmd/xl-storage_test.go: `.AppendFile(context.Background(), "exists", "as-file", []byte("Hello, World"))`
$DIR/cmd/xl-storage_test.go: `.Background()`
$DIR/cmd/xl-storage_test.go: `.AppendFile(context.Background(), "exists", "as-file-parent", []byte("Hello, World"))`
$DIR/cmd/xl-storage_test.go: `.Background()`
$DIR/cmd/xl-storage_test.go: `.ReadAll(context.Background(), testCase.volume, testCase.path)`
$DIR/cmd/xl-storage_test.go: `.Background()`
$DIR/cmd/xl-storage_test.go: `.Equal(dataRead, []byte("Hello, World"))`
$DIR/cmd/xl-storage_test.go: `.Create(tmpFileName)`
$DIR/cmd/xl-storage_test.go: `.Remove(tmpFileName)`
$DIR/cmd/xl-storage_test.go: `.WriteFile(slashpath.Join(path, "vol-as-file"), []byte{}, os.ModePerm)`
$DIR/cmd/xl-storage_test.go: `.Join(path, "vol-as-file")`
$DIR/cmd/xl-storage_test.go: `.Mkdir(slashpath.Join(path, "existing-vol"), 0o777)`
$DIR/cmd/xl-storage_test.go: `.Join(path, "existing-vol")`
$DIR/cmd/xl-storage_test.go: `.MakeVol(context.Background(), testCase.volName)`
$DIR/cmd/xl-storage_test.go: `.Background()`
$DIR/cmd/xl-storage_test.go: `.Chmod(permDeniedDir, 0o400)`
$DIR/cmd/xl-storage_test.go: `.Chmod(permDeniedDir, 0o755)`
$DIR/cmd/xl-storage_test.go: `.Chmod(permDeniedDir, 0o400)`
$DIR/cmd/xl-storage_test.go: `.MakeVol(context.Background(), "test-vol")`
$DIR/cmd/xl-storage_test.go: `.Background()`
$DIR/cmd/xl-storage_test.go: `.MakeVol(context.Background(), "success-vol")`
$DIR/cmd/xl-storage_test.go: `.Background()`
$DIR/cmd/xl-storage_test.go: `.Join(path, "nonempty-vol")`
$DIR/cmd/xl-storage_test.go: `.Mkdir(vol, 0o777)`
$DIR/cmd/xl-storage_test.go: `.WriteFile(slashpath.Join(vol, "test-file"), []byte{}, os.ModePerm)`
$DIR/cmd/xl-storage_test.go: `.Join(vol, "test-file")`
$DIR/cmd/xl-storage_test.go: `.DeleteVol(context.Background(), testCase.volName, false)`
$DIR/cmd/xl-storage_test.go: `.Background()`
$DIR/cmd/xl-storage_test.go: `.TempDir()`
$DIR/cmd/xl-storage_test.go: `.Mkdir(slashpath.Join(permDeniedDir, "mybucket"), 0o400)`
$DIR/cmd/xl-storage_test.go: `.Join(permDeniedDir, "mybucket")`
$DIR/cmd/xl-storage_test.go: `.Cleanup(func() {
			os.Chmod(slashpath.Join(permDeniedDir, "mybucket"), 0o775)
		})`
$DIR/cmd/xl-storage_test.go: `.Chmod(slashpath.Join(permDeniedDir, "mybucket"), 0o775)`
$DIR/cmd/xl-storage_test.go: `.Join(permDeniedDir, "mybucket")`
$DIR/cmd/xl-storage_test.go: `.Chmod(permDeniedDir, 0o400)`
$DIR/cmd/xl-storage_test.go: `.Cleanup(func() {
			os.Chmod(permDeniedDir, 0o775)
		})`
$DIR/cmd/xl-storage_test.go: `.Chmod(permDeniedDir, 0o775)`
$DIR/cmd/xl-storage_test.go: `.Chmod(permDeniedDir, 0o755)`
$DIR/cmd/xl-storage_test.go: `.Chmod(permDeniedDir, 0o400)`
$DIR/cmd/xl-storage_test.go: `.DeleteVol(context.Background(), "mybucket", false)`
$DIR/cmd/xl-storage_test.go: `.Background()`
$DIR/cmd/xl-storage_test.go: `.RemoveAll(diskPath)`
$DIR/cmd/xl-storage_test.go: `.DeleteVol(context.Background(), "Del-Vol", false)`
$DIR/cmd/xl-storage_test.go: `.Background()`
$DIR/cmd/xl-storage_test.go: `.MakeVol(context.Background(), "success-vol")`
$DIR/cmd/xl-storage_test.go: `.Background()`
$DIR/cmd/xl-storage_test.go: `.StatVol(context.Background(), testCase.volName)`
$DIR/cmd/xl-storage_test.go: `.Background()`
$DIR/cmd/xl-storage_test.go: `.RemoveAll(diskPath)`
$DIR/cmd/xl-storage_test.go: `.StatVol(context.Background(), "Stat vol")`
$DIR/cmd/xl-storage_test.go: `.Background()`
$DIR/cmd/xl-storage_test.go: `.ListVols(context.Background())`
$DIR/cmd/xl-storage_test.go: `.Background()`
$DIR/cmd/xl-storage_test.go: `.MakeVol(context.Background(), "success-vol")`
$DIR/cmd/xl-storage_test.go: `.Background()`
$DIR/cmd/xl-storage_test.go: `.ListVols(context.Background())`
$DIR/cmd/xl-storage_test.go: `.Background()`
$DIR/cmd/xl-storage_test.go: `.RemoveAll(path)`
$DIR/cmd/xl-storage_test.go: `.ListVols(context.Background())`
$DIR/cmd/xl-storage_test.go: `.Background()`
$DIR/cmd/xl-storage_test.go: `.RemoveAll(diskPath)`
$DIR/cmd/xl-storage_test.go: `.MakeVol(context.Background(), "success-vol")`
$DIR/cmd/xl-storage_test.go: `.Background()`
$DIR/cmd/xl-storage_test.go: `.AppendFile(context.Background(), "success-vol", "abc/def/ghi/success-file", []byte("Hello, world"))`
$DIR/cmd/xl-storage_test.go: `.Background()`
$DIR/cmd/xl-storage_test.go: `.AppendFile(context.Background(), "success-vol", "abc/xyz/ghi/success-file", []byte("Hello, world"))`
$DIR/cmd/xl-storage_test.go: `.Background()`
$DIR/cmd/xl-storage_test.go: `.ListDir(context.Background(), "", testCase.srcVol, testCase.srcPath, -1)`
$DIR/cmd/xl-storage_test.go: `.Background()`
$DIR/cmd/xl-storage_test.go: `.Contains(strings.Join(dirList, ","), expected)`
$DIR/cmd/xl-storage_test.go: `.Join(dirList, ",")`
$DIR/cmd/xl-storage_test.go: `.Chmod(permDeniedDir, 0o755)`
$DIR/cmd/xl-storage_test.go: `.Delete(context.Background(), "mybucket", "myobject", DeleteOptions{
			Recursive: false,
			Immediate: false,
		})`
$DIR/cmd/xl-storage_test.go: `.Background()`
$DIR/cmd/xl-storage_test.go: `.Delete(context.Background(), "del-vol", "my-file", DeleteOptions{
		Recursive: false,
		Immediate: false,
	})`
$DIR/cmd/xl-storage_test.go: `.Background()`
$DIR/cmd/xl-storage_test.go: `.MakeVol(context.Background(), "success-vol")`
$DIR/cmd/xl-storage_test.go: `.Background()`
$DIR/cmd/xl-storage_test.go: `.AppendFile(context.Background(), "success-vol", "success-file", []byte("Hello, world"))`
$DIR/cmd/xl-storage_test.go: `.Background()`
$DIR/cmd/xl-storage_test.go: `.MakeVol(context.Background(), "no-permissions")`
$DIR/cmd/xl-storage_test.go: `.Background()`
$DIR/cmd/xl-storage_test.go: `.AppendFile(context.Background(), "no-permissions", "dir/file", []byte("Hello, world"))`
$DIR/cmd/xl-storage_test.go: `.Background()`
$DIR/cmd/xl-storage_test.go: `.Chmod(pathJoin(path, "no-permissions"), 0o555)`
$DIR/cmd/xl-storage_test.go: `.Cleanup(func() {
		os.Chmod(pathJoin(path, "no-permissions"), 0o775)
	})`
$DIR/cmd/xl-storage_test.go: `.Chmod(pathJoin(path, "no-permissions"), 0o775)`
$DIR/cmd/xl-storage_test.go: `.Delete(context.Background(), testCase.srcVol, testCase.srcPath, DeleteOptions{
			Recursive: false,
			Immediate: false,
		})`
$DIR/cmd/xl-storage_test.go: `.Background()`
$DIR/cmd/xl-storage_test.go: `.Chmod(permDeniedDir, 0o755)`
$DIR/cmd/xl-storage_test.go: `.Delete(context.Background(), "mybucket", "myobject", DeleteOptions{
			Recursive: false,
			Immediate: false,
		})`
$DIR/cmd/xl-storage_test.go: `.Background()`
$DIR/cmd/xl-storage_test.go: `.RemoveAll(diskPath)`
$DIR/cmd/xl-storage_test.go: `.Delete(context.Background(), "del-vol", "my-file", DeleteOptions{
		Recursive: false,
		Immediate: false,
	})`
$DIR/cmd/xl-storage_test.go: `.Background()`
$DIR/cmd/xl-storage_test.go: `.MakeVol(context.Background(), volume)`
$DIR/cmd/xl-storage_test.go: `.Background()`
$DIR/cmd/xl-storage_test.go: `.Mkdir(slashpath.Join(path, "success-vol", "object-as-dir"), 0o777)`
$DIR/cmd/xl-storage_test.go: `.Join(path, "success-vol", "object-as-dir")`
$DIR/cmd/xl-storage_test.go: `.AppendFile(context.Background(), volume, appendFile.fileName, []byte("hello, world"))`
$DIR/cmd/xl-storage_test.go: `.Background()`
$DIR/cmd/xl-storage_test.go: `.ReadFile(context.Background(), volume, "myobject", -1, buf, v)`
$DIR/cmd/xl-storage_test.go: `.Background()`
$DIR/cmd/xl-storage_test.go: `.ReadFile(context.Background(), testCase.volume, testCase.fileName, testCase.offset, buf, v)`
$DIR/cmd/xl-storage_test.go: `.Background()`
$DIR/cmd/xl-storage_test.go: `.Equal(testCase.expectedBuf, buf[:n])`
$DIR/cmd/xl-storage_test.go: `.Equal(testCase.expectedBuf, buf)`
$DIR/cmd/xl-storage_test.go: `.Chmod(permDeniedDir, 0o755)`
$DIR/cmd/xl-storage_test.go: `.ReadFile(context.Background(), "mybucket", "myobject", 0, buf, v)`
$DIR/cmd/xl-storage_test.go: `.Background()`
$DIR/cmd/xl-storage_test.go: `.MakeVol(context.Background(), volume)`
$DIR/cmd/xl-storage_test.go: `.Background()`
$DIR/cmd/xl-storage_test.go: `.ReadFull(rand.Reader, data)`
$DIR/cmd/xl-storage_test.go: `.AppendFile(context.Background(), volume, object, data)`
$DIR/cmd/xl-storage_test.go: `.Background()`
$DIR/cmd/xl-storage_test.go: `.algorithm.New()`
$DIR/cmd/xl-storage_test.go: `.Write(data)`
$DIR/cmd/xl-storage_test.go: `.Write([]byte{0})`
$DIR/cmd/xl-storage_test.go: `.ReadFile(context.Background(), volume, test.file, int64(test.offset), buffer, NewBitrotVerifier(test.algorithm, h.Sum(nil)))`
$DIR/cmd/xl-storage_test.go: `.Background()`
$DIR/cmd/xl-storage_test.go: `.Sum(nil)`
$DIR/cmd/xl-storage_test.go: `.Equal(data[test.offset:test.offset+test.length], buffer)`
$DIR/cmd/xl-storage_test.go: `.MakeVol(context.Background(), volume)`
$DIR/cmd/xl-storage_test.go: `.Background()`
$DIR/cmd/xl-storage_test.go: `.WriteFile(pathJoin(xlStorage.String(), minioMetaBucket, formatConfigFile), []byte(`{"version":"1","format":"xl","id":"592a41c2-b7cc-4130-b883-c4b5cb15965b","xl":{"version":"3","this":"randomid","sets":[["e07285a6-8c73-4962-89c6-047fb939f803","33b8d431-482d-4376-b63c-626d229f0a29","cff6513a-4439-4dc1-bcaa-56c9e880c352","randomid","9c9f21d5-1f15-4737-bce6-835faa0d9626","0a59b346-1424-4fc2-9fa2-a2e80541d0c1","7924a3dc-b69a-4971-9a2e-014966d6aebb","4d2b8dd9-4e48-444b-bdca-c89194b26042"]],"distributionAlgo":"CRCMOD"}}`), 0o644)`
$DIR/cmd/xl-storage_test.go: `.String()`
$DIR/cmd/xl-storage_test.go: `.MakeVol(context.Background(), volume)`
$DIR/cmd/xl-storage_test.go: `.Background()`
$DIR/cmd/xl-storage_test.go: `.MakeVol(context.Background(), "success-vol")`
$DIR/cmd/xl-storage_test.go: `.Background()`
$DIR/cmd/xl-storage_test.go: `.Mkdir(slashpath.Join(path, "success-vol", "object-as-dir"), 0o777)`
$DIR/cmd/xl-storage_test.go: `.Join(path, "success-vol", "object-as-dir")`
$DIR/cmd/xl-storage_test.go: `.AppendFile(context.Background(), "success-vol", testCase.fileName, []byte("hello, world"))`
$DIR/cmd/xl-storage_test.go: `.Background()`
$DIR/cmd/xl-storage_test.go: `.Chmod(permDeniedDir, 0o755)`
$DIR/cmd/xl-storage_test.go: `.AppendFile(context.Background(), "mybucket", "myobject", []byte("hello, world"))`
$DIR/cmd/xl-storage_test.go: `.Background()`
$DIR/cmd/xl-storage_test.go: `.AppendFile(context.Background(), "bn", "yes", []byte("hello, world"))`
$DIR/cmd/xl-storage_test.go: `.Background()`
$DIR/cmd/xl-storage_test.go: `.MakeVol(context.Background(), "src-vol")`
$DIR/cmd/xl-storage_test.go: `.Background()`
$DIR/cmd/xl-storage_test.go: `.MakeVol(context.Background(), "dest-vol")`
$DIR/cmd/xl-storage_test.go: `.Background()`
$DIR/cmd/xl-storage_test.go: `.AppendFile(context.Background(), "src-vol", "file1", []byte("Hello, world"))`
$DIR/cmd/xl-storage_test.go: `.Background()`
$DIR/cmd/xl-storage_test.go: `.AppendFile(context.Background(), "src-vol", "file2", []byte("Hello, world"))`
$DIR/cmd/xl-storage_test.go: `.Background()`
$DIR/cmd/xl-storage_test.go: `.AppendFile(context.Background(), "src-vol", "file3", []byte("Hello, world"))`
$DIR/cmd/xl-storage_test.go: `.Background()`
$DIR/cmd/xl-storage_test.go: `.AppendFile(context.Background(), "src-vol", "file4", []byte("Hello, world"))`
$DIR/cmd/xl-storage_test.go: `.Background()`
$DIR/cmd/xl-storage_test.go: `.AppendFile(context.Background(), "src-vol", "file5", []byte("Hello, world"))`
$DIR/cmd/xl-storage_test.go: `.Background()`
$DIR/cmd/xl-storage_test.go: `.AppendFile(context.Background(), "src-vol", "path/to/file1", []byte("Hello, world"))`
$DIR/cmd/xl-storage_test.go: `.Background()`
$DIR/cmd/xl-storage_test.go: `.RenameFile(context.Background(), testCase.srcVol, testCase.srcPath, testCase.destVol, testCase.destPath)`
$DIR/cmd/xl-storage_test.go: `.Background()`
$DIR/cmd/xl-storage_test.go: `.Background()`
$DIR/cmd/xl-storage_test.go: `.MakeVol(ctx, volume)`
$DIR/cmd/xl-storage_test.go: `.New()`
$DIR/cmd/xl-storage_test.go: `.String()`
$DIR/cmd/xl-storage_test.go: `.WriteMetadata(ctx, "", volume, object, fi)`
$DIR/cmd/xl-storage_test.go: `.Helper()`
$DIR/cmd/xl-storage_test.go: `.ReadVersion(ctx, "", volume, object, versions[i], ReadOptions{})`
$DIR/cmd/xl-storage_test.go: `.DeleteVersion(ctx, volume, object, FileInfo{Name: object, Volume: volume, VersionID: versions[0]}, false, DeleteOptions{})`
$DIR/cmd/xl-storage_test.go: `.DeleteVersions(ctx, volume, fis, DeleteOptions{})`
$DIR/cmd/xl-storage_test.go: `.DeleteVersions(ctx, volume, fis, DeleteOptions{})`
$DIR/cmd/xl-storage_test.go: `.ReadVersion(ctx, "", volume, object, "", ReadOptions{})`
$DIR/cmd/xl-storage_test.go: `.MakeVol(context.Background(), "success-vol")`
$DIR/cmd/xl-storage_test.go: `.Background()`
$DIR/cmd/xl-storage_test.go: `.AppendFile(context.Background(), "success-vol", pathJoin("success-file", xlStorageFormatFile), []byte("Hello, world"))`
$DIR/cmd/xl-storage_test.go: `.Background()`
$DIR/cmd/xl-storage_test.go: `.AppendFile(context.Background(), "success-vol", pathJoin("path/to/success-file", xlStorageFormatFile), []byte("Hello, world"))`
$DIR/cmd/xl-storage_test.go: `.Background()`
$DIR/cmd/xl-storage_test.go: `.MakeVol(context.Background(), "success-vol/path/to/"+xlStorageFormatFile)`
$DIR/cmd/xl-storage_test.go: `.Background()`
$DIR/cmd/xl-storage_test.go: `.StatInfoFile(context.Background(), testCase.srcVol, testCase.srcPath+"/"+xlStorageFormatFile, false)`
$DIR/cmd/xl-storage_test.go: `.Background()`
$DIR/cmd/xl-storage_test.go: `.MakeVol(context.Background(), volName)`
$DIR/cmd/xl-storage_test.go: `.Background()`
$DIR/cmd/xl-storage_test.go: `.Read(data)`
$DIR/cmd/xl-storage_test.go: `.New()`
$DIR/cmd/xl-storage_test.go: `.Write(data)`
$DIR/cmd/xl-storage_test.go: `.Sum(nil)`
$DIR/cmd/xl-storage_test.go: `.WriteAll(context.Background(), volName, fileName, data)`
$DIR/cmd/xl-storage_test.go: `.Background()`
$DIR/cmd/xl-storage_test.go: `.storage.bitrotVerify(context.Background(), pathJoin(path, volName, fileName), size, algo, hashBytes, 0)`
$DIR/cmd/xl-storage_test.go: `.Background()`
$DIR/cmd/xl-storage_test.go: `.AppendFile(context.Background(), volName, fileName, []byte("a"))`
$DIR/cmd/xl-storage_test.go: `.Background()`
$DIR/cmd/xl-storage_test.go: `.storage.bitrotVerify(context.Background(), pathJoin(path, volName, fileName), size, algo, hashBytes, 0)`
$DIR/cmd/xl-storage_test.go: `.Background()`
$DIR/cmd/xl-storage_test.go: `.storage.bitrotVerify(context.Background(), pathJoin(path, volName, fileName), size+1, algo, hashBytes, 0)`
$DIR/cmd/xl-storage_test.go: `.Background()`
$DIR/cmd/xl-storage_test.go: `.Delete(context.Background(), volName, fileName, DeleteOptions{
		Recursive: false,
		Immediate: false,
	})`
$DIR/cmd/xl-storage_test.go: `.Background()`
$DIR/cmd/xl-storage_test.go: `.NewReader(data)`
$DIR/cmd/xl-storage_test.go: `.Read(shard)`
$DIR/cmd/xl-storage_test.go: `.Write(shard[:n])`
$DIR/cmd/xl-storage_test.go: `.storage.bitrotVerify(context.Background(), pathJoin(path, volName, fileName), size, algo, nil, shardSize)`
$DIR/cmd/xl-storage_test.go: `.Background()`
$DIR/cmd/xl-storage_test.go: `.String()`
$DIR/cmd/xl-storage_test.go: `.OpenFile(filePath, os.O_WRONLY|os.O_SYNC, 0o644)`
$DIR/cmd/xl-storage_test.go: `.WriteString(strings.Repeat("a", 256))`
$DIR/cmd/xl-storage_test.go: `.Repeat("a", 256)`
$DIR/cmd/xl-storage_test.go: `.storage.bitrotVerify(context.Background(), pathJoin(path, volName, fileName), size, algo, nil, shardSize)`
$DIR/cmd/xl-storage_test.go: `.Background()`
$DIR/cmd/xl-storage_test.go: `.storage.bitrotVerify(context.Background(), pathJoin(path, volName, fileName), size+1, algo, nil, shardSize)`
$DIR/cmd/xl-storage_test.go: `.Background()`
$DIR/cmd/xl-storage_test.go: `.TempDir()`
$DIR/cmd/xl-storage_test.go: `.MakeVol(context.Background(), volume)`
$DIR/cmd/xl-storage_test.go: `.Background()`
$DIR/cmd/xl-storage_test.go: `.readMetadata(context.Background(), pathJoin(tmpDir, volume, object))`
$DIR/cmd/xl-storage_test.go: `.Background()`
$DIR/cmd/xl-storage_unix_test.go: `.TempDir()`
$DIR/cmd/xl-storage_unix_test.go: `.MakeVol(context.Background(), testCase.volName)`
$DIR/cmd/xl-storage_unix_test.go: `.Background()`
$DIR/cmd/xl-storage_unix_test.go: `.Stat(path.Join(tmpPath, testCase.volName))`
$DIR/cmd/xl-storage_unix_test.go: `.Join(tmpPath, testCase.volName)`
$DIR/cmd/xl-storage_unix_test.go: `.Mode()`
$DIR/cmd/xl-storage_unix_test.go: `.Perm()`
$DIR/cmd/xl-storage_unix_test.go: `.TempDir()`
$DIR/cmd/xl-storage_unix_test.go: `.MakeVol(context.Background(), testCase.volName)`
$DIR/cmd/xl-storage_unix_test.go: `.Background()`
$DIR/cmd/xl-storage_unix_test.go: `.AppendFile(context.Background(), testCase.volName, pathJoin("hello-world.txt", xlStorageFormatFile), []byte("Hello World"))`
$DIR/cmd/xl-storage_unix_test.go: `.Background()`
$DIR/cmd/xl-storage_unix_test.go: `.StatInfoFile(context.Background(), testCase.volName, "hello-world.txt/"+xlStorageFormatFile, false)`
$DIR/cmd/xl-storage_unix_test.go: `.Background()`
$DIR/cmd/xl-storage_windows_test.go: `err = fs.MakeVol(context.Background(), "voldir")`
$DIR/cmd/xl-storage_windows_test.go: `t.Run(fmt.Sprint(i), func(t *testing.T) {
			err = fs.AppendFile(context.Background(), "voldir", test.objName, []byte("hello"))
			if err != nil && test.pass {
				t.Error(err)
			} else if err == nil && !test.pass {
				t.Error(err)
			}
			fs.Delete(context.Background(), "voldir", test.objName, DeleteOptions{
				Recursive: false,
				Immediate: false,
			})
		})`
$DIR/cmd/xl-storage_windows_test.go: `err = fs.AppendFile(context.Background(), "voldir", test.objName, []byte("hello"))`
$DIR/cmd/xl-storage_windows_test.go: `fs.Delete(context.Background(), "voldir", test.objName, DeleteOptions{
				Recursive: false,
				Immediate: false,
			})`
$DIR/cmd/xl-storage_windows_test.go: `err = fs.MakeVol(context.Background(), "voldir")`
$DIR/cmd/xl-storage_windows_test.go: `err = fs.AppendFile(context.Background(), "voldir", "/file", []byte("hello"))`
$DIR/cmd/xl-storage_windows_test.go: `err = fs.AppendFile(context.Background(), "voldir", "/file/obj1", []byte("hello"))`
$DIR/cmd/xl-storage_windows_test.go: `.Repeat([]byte("界"), 85)`
$DIR/cmd/xl-storage_windows_test.go: `.Repeat([]byte("界"), 280)`
$DIR/cmd/xl-storage_windows_test.go: `.TempDir()`
$DIR/cmd/xl-storage_windows_test.go: `.MakeVol(context.Background(), "voldir")`
$DIR/cmd/xl-storage_windows_test.go: `.Background()`
$DIR/cmd/xl-storage_windows_test.go: `.Run(fmt.Sprint(i), func(t *testing.T) {
			err = fs.AppendFile(context.Background(), "voldir", test.objName, []byte("hello"))
			if err != nil && test.pass {
				t.Error(err)
			} else if err == nil && !test.pass {
				t.Error(err)
			}
			fs.Delete(context.Background(), "voldir", test.objName, DeleteOptions{
				Recursive: false,
				Immediate: false,
			})
		})`
$DIR/cmd/xl-storage_windows_test.go: `.Sprint(i)`
$DIR/cmd/xl-storage_windows_test.go: `.AppendFile(context.Background(), "voldir", test.objName, []byte("hello"))`
$DIR/cmd/xl-storage_windows_test.go: `.Background()`
$DIR/cmd/xl-storage_windows_test.go: `.Delete(context.Background(), "voldir", test.objName, DeleteOptions{
				Recursive: false,
				Immediate: false,
			})`
$DIR/cmd/xl-storage_windows_test.go: `.Background()`
$DIR/cmd/xl-storage_windows_test.go: `.TempDir()`
$DIR/cmd/xl-storage_windows_test.go: `.MakeVol(context.Background(), "voldir")`
$DIR/cmd/xl-storage_windows_test.go: `.Background()`
$DIR/cmd/xl-storage_windows_test.go: `.AppendFile(context.Background(), "voldir", "/file", []byte("hello"))`
$DIR/cmd/xl-storage_windows_test.go: `.Background()`
$DIR/cmd/xl-storage_windows_test.go: `.AppendFile(context.Background(), "voldir", "/file/obj1", []byte("hello"))`
$DIR/cmd/xl-storage_windows_test.go: `.Background()`
$DIR/internal/amztime/iso8601_time_test.go: `t.Run(testCase.expectedOutput, func(t *testing.T) {
			gotOutput := ISO8601Format(testCase.date)
			t.Log("Go", testCase.date.Format(iso8601TimeFormat))
			if gotOutput != testCase.expectedOutput {
				t.Errorf("Expected %s, got %s", testCase.expectedOutput, gotOutput)
			}
		})`
$DIR/internal/amztime/iso8601_time_test.go: `.Date(2009, time.November, 13, 4, 51, 1, 940303531, time.UTC)`
$DIR/internal/amztime/iso8601_time_test.go: `.Date(2009, time.November, 13, 4, 51, 1, 901303531, time.UTC)`
$DIR/internal/amztime/iso8601_time_test.go: `.Date(2009, time.November, 13, 4, 51, 1, 900303531, time.UTC)`
$DIR/internal/amztime/iso8601_time_test.go: `.Date(2009, time.November, 13, 4, 51, 1, 941303531, time.UTC)`
$DIR/internal/amztime/iso8601_time_test.go: `.Run(testCase.expectedOutput, func(t *testing.T) {
			gotOutput := ISO8601Format(testCase.date)
			t.Log("Go", testCase.date.Format(iso8601TimeFormat))
			if gotOutput != testCase.expectedOutput {
				t.Errorf("Expected %s, got %s", testCase.expectedOutput, gotOutput)
			}
		})`
$DIR/internal/amztime/parse_test.go: `t.Run(testCase.timeStr, func(t *testing.T) {
			gott, goterr := Parse(testCase.timeStr)
			if !errors.Is(goterr, testCase.expectedErr) {
				t.Errorf("expected %v, got %v", testCase.expectedErr, goterr)
			}
			if !gott.Equal(testCase.expectedTime) {
				t.Errorf("expected %v, got %v", testCase.expectedTime, gott)
			}
		})`
$DIR/internal/amztime/parse_test.go: `.Date(2009, time.November, 10, 23, 0, 0, 0, time.UTC)`
$DIR/internal/amztime/parse_test.go: `.Run(testCase.timeStr, func(t *testing.T) {
			gott, goterr := Parse(testCase.timeStr)
			if !errors.Is(goterr, testCase.expectedErr) {
				t.Errorf("expected %v, got %v", testCase.expectedErr, goterr)
			}
			if !gott.Equal(testCase.expectedTime) {
				t.Errorf("expected %v, got %v", testCase.expectedTime, gott)
			}
		})`
$DIR/internal/amztime/parse_test.go: `.Is(goterr, testCase.expectedErr)`
$DIR/internal/amztime/parse_test.go: `.Equal(testCase.expectedTime)`
$DIR/internal/arn/arn_test.go: `t.Run(tt.want, func(t *testing.T) {
			if got := tt.arn.String(); got != tt.want {
				t.Errorf("ARN.String() = %v, want %v", got, tt.want)
			}
		})`
$DIR/internal/arn/arn_test.go: `t.Run(tt.name, func(t *testing.T) {
			got, err := NewIAMRoleARN(tt.args.resourceID, tt.args.serverRegion)
			if (err != nil) != tt.wantErr {
				t.Errorf("NewIAMRoleARN() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(got, tt.want) {
				t.Errorf("NewIAMRoleARN() got = %v, want %v", got, tt.want)
			}
		})`
$DIR/internal/arn/arn_test.go: `t.Run(tt.name, func(t *testing.T) {
			gotArn, err := Parse(tt.args.arnStr)
			if err == nil && tt.wantErr {
				t.Errorf("Parse() error = %v, wantErr %v", err, tt.wantErr)
			}
			if err != nil && !tt.wantErr {
				t.Errorf("Parse() error = %v, wantErr %v", err, tt.wantErr)
			}
			if err == nil {
				if !reflect.DeepEqual(gotArn, tt.wantArn) {
					t.Errorf("Parse() gotArn = %v, want %v", gotArn, tt.wantArn)
				}
			}
		})`
$DIR/internal/arn/arn_test.go: `.Run(tt.want, func(t *testing.T) {
			if got := tt.arn.String(); got != tt.want {
				t.Errorf("ARN.String() = %v, want %v", got, tt.want)
			}
		})`
$DIR/internal/arn/arn_test.go: `.arn.String()`
$DIR/internal/arn/arn_test.go: `.Run(tt.name, func(t *testing.T) {
			got, err := NewIAMRoleARN(tt.args.resourceID, tt.args.serverRegion)
			if (err != nil) != tt.wantErr {
				t.Errorf("NewIAMRoleARN() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(got, tt.want) {
				t.Errorf("NewIAMRoleARN() got = %v, want %v", got, tt.want)
			}
		})`
$DIR/internal/arn/arn_test.go: `.DeepEqual(got, tt.want)`
$DIR/internal/arn/arn_test.go: `.Run(tt.name, func(t *testing.T) {
			gotArn, err := Parse(tt.args.arnStr)
			if err == nil && tt.wantErr {
				t.Errorf("Parse() error = %v, wantErr %v", err, tt.wantErr)
			}
			if err != nil && !tt.wantErr {
				t.Errorf("Parse() error = %v, wantErr %v", err, tt.wantErr)
			}
			if err == nil {
				if !reflect.DeepEqual(gotArn, tt.wantArn) {
					t.Errorf("Parse() gotArn = %v, want %v", gotArn, tt.wantArn)
				}
			}
		})`
$DIR/internal/arn/arn_test.go: `.DeepEqual(gotArn, tt.wantArn)`
$DIR/internal/auth/credentials_test.go: `t.Run("", func(t *testing.T) {
			_, err := ExpToInt64(testCase.exp)
			if err != nil && !testCase.expectedFailure {
				t.Errorf("Expected success but got failure %s", err)
			}
			if err == nil && testCase.expectedFailure {
				t.Error("Expected failure but got success")
			}
		})`
$DIR/internal/auth/credentials_test.go: `.Number("1574812326")`
$DIR/internal/auth/credentials_test.go: `.Duration(3)`
$DIR/internal/auth/credentials_test.go: `.Run("", func(t *testing.T) {
			_, err := ExpToInt64(testCase.exp)
			if err != nil && !testCase.expectedFailure {
				t.Errorf("Expected success but got failure %s", err)
			}
			if err == nil && testCase.expectedFailure {
				t.Error("Expected failure but got success")
			}
		})`
$DIR/internal/auth/credentials_test.go: `.IsValid()`
$DIR/internal/auth/credentials_test.go: `.IsValid()`
$DIR/internal/auth/credentials_test.go: `.cred.Equal(testCase.ccred)`
$DIR/internal/bpool/bpool_test.go: `bufPool.Put(b)`
$DIR/internal/bpool/bpool_test.go: `bufPool.Put(make([]byte, bufPool.w))`
$DIR/internal/bpool/bpool_test.go: `b = bufPool.Get()`
$DIR/internal/bpool/bpool_test.go: `bufPool.Put(b)`
$DIR/internal/bpool/bpool_test.go: `close(bufPool.c)`
$DIR/internal/bpool/bpool_test.go: `b = bufPoolNoCap.Get()`
$DIR/internal/bpool/bpool_test.go: `.Width()`
$DIR/internal/bpool/bpool_test.go: `.WidthCap()`
$DIR/internal/bpool/bpool_test.go: `.Get()`
$DIR/internal/bpool/bpool_test.go: `.Put(b)`
$DIR/internal/bpool/bpool_test.go: `.Put(make([]byte, bufPool.w))`
$DIR/internal/bpool/bpool_test.go: `.Get()`
$DIR/internal/bpool/bpool_test.go: `.Put(b)`
$DIR/internal/bpool/bpool_test.go: `.Width()`
$DIR/internal/bpool/bpool_test.go: `.WidthCap()`
$DIR/internal/bpool/bpool_test.go: `.Get()`
$DIR/internal/bucket/bandwidth/monitor_gen_test.go: `left, err = msgp.Skip(bts)`
$DIR/internal/bucket/bandwidth/monitor_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/internal/bucket/bandwidth/monitor_gen_test.go: `buf.Reset()`
$DIR/internal/bucket/bandwidth/monitor_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/internal/bucket/bandwidth/monitor_gen_test.go: `err = msgp.NewReader(&buf).Skip()`
$DIR/internal/bucket/bandwidth/monitor_gen_test.go: `left, err = msgp.Skip(bts)`
$DIR/internal/bucket/bandwidth/monitor_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/internal/bucket/bandwidth/monitor_gen_test.go: `buf.Reset()`
$DIR/internal/bucket/bandwidth/monitor_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/internal/bucket/bandwidth/monitor_gen_test.go: `err = msgp.NewReader(&buf).Skip()`
$DIR/internal/bucket/bandwidth/monitor_gen_test.go: `.MarshalMsg(nil)`
$DIR/internal/bucket/bandwidth/monitor_gen_test.go: `.UnmarshalMsg(bts)`
$DIR/internal/bucket/bandwidth/monitor_gen_test.go: `.Encode(&buf, &v)`
$DIR/internal/bucket/bandwidth/monitor_gen_test.go: `.Msgsize()`
$DIR/internal/bucket/bandwidth/monitor_gen_test.go: `.Len()`
$DIR/internal/bucket/bandwidth/monitor_gen_test.go: `.Decode(&buf, &vn)`
$DIR/internal/bucket/bandwidth/monitor_gen_test.go: `.Reset()`
$DIR/internal/bucket/bandwidth/monitor_gen_test.go: `.Encode(&buf, &v)`
$DIR/internal/bucket/bandwidth/monitor_gen_test.go: `.MarshalMsg(nil)`
$DIR/internal/bucket/bandwidth/monitor_gen_test.go: `.UnmarshalMsg(bts)`
$DIR/internal/bucket/bandwidth/monitor_gen_test.go: `.Encode(&buf, &v)`
$DIR/internal/bucket/bandwidth/monitor_gen_test.go: `.Msgsize()`
$DIR/internal/bucket/bandwidth/monitor_gen_test.go: `.Len()`
$DIR/internal/bucket/bandwidth/monitor_gen_test.go: `.Decode(&buf, &vn)`
$DIR/internal/bucket/bandwidth/monitor_gen_test.go: `.Reset()`
$DIR/internal/bucket/bandwidth/monitor_gen_test.go: `.Encode(&buf, &v)`
$DIR/internal/bucket/bandwidth/monitor_test.go: `m0.incrementBytes(0)`
$DIR/internal/bucket/bandwidth/monitor_test.go: `m1MiBPS.incrementBytes(oneMiB)`
$DIR/internal/bucket/bandwidth/monitor_test.go: `test1Want[BucketOptions{Name: "bucket", ReplicationARN: "arn"}] = Details{LimitInBytesPerSecond: 1024 * 1024, CurrentBandwidthInBytesPerSecond: 0}`
$DIR/internal/bucket/bandwidth/monitor_test.go: `test1Want2[BucketOptions{Name: "bucket", ReplicationARN: "arn"}] = Details{
		LimitInBytesPerSecond:            1024 * 1024,
		CurrentBandwidthInBytesPerSecond: (1024 * 1024) / start.Add(2*time.Second).Sub(start.Add(1*time.Second)).Seconds(),
	}`
$DIR/internal/bucket/bandwidth/monitor_test.go: `test2Want[BucketOptions{Name: "bucket", ReplicationARN: "arn"}] = Details{LimitInBytesPerSecond: 1024 * 1024, CurrentBandwidthInBytesPerSecond: float64(oneMiB)}`
$DIR/internal/bucket/bandwidth/monitor_test.go: `test2Want2[BucketOptions{Name: "bucket", ReplicationARN: "arn"}] = Details{
		LimitInBytesPerSecond:            1024 * 1024,
		CurrentBandwidthInBytesPerSecond: exponentialMovingAverage(betaBucket, float64(oneMiB), 2*float64(oneMiB)),
	}`
$DIR/internal/bucket/bandwidth/monitor_test.go: `test1ActiveBuckets[BucketOptions{Name: "bucket", ReplicationARN: "arn"}] = m0`
$DIR/internal/bucket/bandwidth/monitor_test.go: `test1ActiveBuckets2[BucketOptions{Name: "bucket", ReplicationARN: "arn"}] = m1MiBPS`
$DIR/internal/bucket/bandwidth/monitor_test.go: `t.Run(tt.name, func(t *testing.T) {
			t.Parallel()
			thr := bucketThrottle{
				NodeBandwidthPerSec: 1024 * 1024,
			}
			th := make(map[BucketOptions]*bucketThrottle)
			th[BucketOptions{Name: "bucket", ReplicationARN: "arn"}] = &thr
			m := &Monitor{
				bucketsMeasurement: tt.fields.activeBuckets,
				bucketsThrottle:    th,
				NodeCount:          1,
			}
			m.bucketsMeasurement[BucketOptions{Name: "bucket", ReplicationARN: "arn"}].updateExponentialMovingAverage(tt.fields.endTime)
			got := m.GetReport(SelectBuckets())
			if !reflect.DeepEqual(got, tt.want) {
				t.Errorf("GetReport() = %v, want %v", got, tt.want)
			}
			m.bucketsMeasurement[BucketOptions{Name: "bucket", ReplicationARN: "arn"}].incrementBytes(tt.fields.update2)
			m.bucketsMeasurement[BucketOptions{Name: "bucket", ReplicationARN: "arn"}].updateExponentialMovingAverage(tt.fields.endTime2)
			got = m.GetReport(SelectBuckets())
			if !reflect.DeepEqual(got.BucketStats, tt.want2.BucketStats) {
				t.Errorf("GetReport() = %v, want %v", got.BucketStats, tt.want2.BucketStats)
			}
		})`
$DIR/internal/bucket/bandwidth/monitor_test.go: `th[BucketOptions{Name: "bucket", ReplicationARN: "arn"}] = &thr`
$DIR/internal/bucket/bandwidth/monitor_test.go: `m.bucketsMeasurement[BucketOptions{Name: "bucket", ReplicationARN: "arn"}].updateExponentialMovingAverage(tt.fields.endTime)`
$DIR/internal/bucket/bandwidth/monitor_test.go: `m.bucketsMeasurement[BucketOptions{Name: "bucket", ReplicationARN: "arn"}].incrementBytes(tt.fields.update2)`
$DIR/internal/bucket/bandwidth/monitor_test.go: `m.bucketsMeasurement[BucketOptions{Name: "bucket", ReplicationARN: "arn"}].updateExponentialMovingAverage(tt.fields.endTime2)`
$DIR/internal/bucket/bandwidth/monitor_test.go: `got = m.GetReport(SelectBuckets())`
$DIR/internal/bucket/bandwidth/monitor_test.go: `.Now()`
$DIR/internal/bucket/bandwidth/monitor_test.go: `.incrementBytes(0)`
$DIR/internal/bucket/bandwidth/monitor_test.go: `.incrementBytes(oneMiB)`
$DIR/internal/bucket/bandwidth/monitor_test.go: `.Add(2*time.Second)`
$DIR/internal/bucket/bandwidth/monitor_test.go: `.Sub(start.Add(1*time.Second))`
$DIR/internal/bucket/bandwidth/monitor_test.go: `.Add(1*time.Second)`
$DIR/internal/bucket/bandwidth/monitor_test.go: `.Seconds()`
$DIR/internal/bucket/bandwidth/monitor_test.go: `.Add(1 * time.Second)`
$DIR/internal/bucket/bandwidth/monitor_test.go: `.Add(2 * time.Second)`
$DIR/internal/bucket/bandwidth/monitor_test.go: `.Add(1 * time.Second)`
$DIR/internal/bucket/bandwidth/monitor_test.go: `.Add(2 * time.Second)`
$DIR/internal/bucket/bandwidth/monitor_test.go: `.Run(tt.name, func(t *testing.T) {
			t.Parallel()
			thr := bucketThrottle{
				NodeBandwidthPerSec: 1024 * 1024,
			}
			th := make(map[BucketOptions]*bucketThrottle)
			th[BucketOptions{Name: "bucket", ReplicationARN: "arn"}] = &thr
			m := &Monitor{
				bucketsMeasurement: tt.fields.activeBuckets,
				bucketsThrottle:    th,
				NodeCount:          1,
			}
			m.bucketsMeasurement[BucketOptions{Name: "bucket", ReplicationARN: "arn"}].updateExponentialMovingAverage(tt.fields.endTime)
			got := m.GetReport(SelectBuckets())
			if !reflect.DeepEqual(got, tt.want) {
				t.Errorf("GetReport() = %v, want %v", got, tt.want)
			}
			m.bucketsMeasurement[BucketOptions{Name: "bucket", ReplicationARN: "arn"}].incrementBytes(tt.fields.update2)
			m.bucketsMeasurement[BucketOptions{Name: "bucket", ReplicationARN: "arn"}].updateExponentialMovingAverage(tt.fields.endTime2)
			got = m.GetReport(SelectBuckets())
			if !reflect.DeepEqual(got.BucketStats, tt.want2.BucketStats) {
				t.Errorf("GetReport() = %v, want %v", got.BucketStats, tt.want2.BucketStats)
			}
		})`
$DIR/internal/bucket/bandwidth/monitor_test.go: `.updateExponentialMovingAverage(tt.fields.endTime)`
$DIR/internal/bucket/bandwidth/monitor_test.go: `.GetReport(SelectBuckets())`
$DIR/internal/bucket/bandwidth/monitor_test.go: `.DeepEqual(got, tt.want)`
$DIR/internal/bucket/bandwidth/monitor_test.go: `.incrementBytes(tt.fields.update2)`
$DIR/internal/bucket/bandwidth/monitor_test.go: `.updateExponentialMovingAverage(tt.fields.endTime2)`
$DIR/internal/bucket/bandwidth/monitor_test.go: `.GetReport(SelectBuckets())`
$DIR/internal/bucket/bandwidth/monitor_test.go: `.DeepEqual(got.BucketStats, tt.want2.BucketStats)`
$DIR/internal/bucket/encryption/bucket-sse-config_test.go: `.New("only one server-side encryption rule is allowed at a time")`
$DIR/internal/bucket/encryption/bucket-sse-config_test.go: `.New("MasterKeyID is allowed with aws:kms only")`
$DIR/internal/bucket/encryption/bucket-sse-config_test.go: `.New("MasterKeyID is missing with aws:kms")`
$DIR/internal/bucket/encryption/bucket-sse-config_test.go: `.New("Unknown SSE algorithm")`
$DIR/internal/bucket/encryption/bucket-sse-config_test.go: `.New("MasterKeyID contains unsupported characters")`
$DIR/internal/bucket/encryption/bucket-sse-config_test.go: `.NewReader([]byte(tc.inputXML))`
$DIR/internal/bucket/encryption/bucket-sse-config_test.go: `.KeyID()`
$DIR/internal/bucket/encryption/bucket-sse-config_test.go: `.Marshal(tc.expectedConfig)`
$DIR/internal/bucket/encryption/bucket-sse-config_test.go: `.Equal(expectedXML, []byte(tc.inputXML))`
$DIR/internal/bucket/lifecycle/delmarker-expiration_test.go: `t.Run(fmt.Sprintf("TestDelMarker-%d", i), func(t *testing.T) {
			var dexp DelMarkerExpiration
			var fail bool
			err := xml.Unmarshal([]byte(test.xml), &dexp)
			if test.err == nil {
				if err != nil {
					fail = true
				}
			} else {
				if err == nil {
					fail = true
				}
				if test.err.Error() != err.Error() {
					fail = true
				}
			}
			if fail {
				t.Fatalf("Expected %v but got %v", test.err, err)
			}
		})`
$DIR/internal/bucket/lifecycle/delmarker-expiration_test.go: `fail = true`
$DIR/internal/bucket/lifecycle/delmarker-expiration_test.go: `fail = true`
$DIR/internal/bucket/lifecycle/delmarker-expiration_test.go: `fail = true`
$DIR/internal/bucket/lifecycle/delmarker-expiration_test.go: `.Run(fmt.Sprintf("TestDelMarker-%d", i), func(t *testing.T) {
			var dexp DelMarkerExpiration
			var fail bool
			err := xml.Unmarshal([]byte(test.xml), &dexp)
			if test.err == nil {
				if err != nil {
					fail = true
				}
			} else {
				if err == nil {
					fail = true
				}
				if test.err.Error() != err.Error() {
					fail = true
				}
			}
			if fail {
				t.Fatalf("Expected %v but got %v", test.err, err)
			}
		})`
$DIR/internal/bucket/lifecycle/delmarker-expiration_test.go: `.Sprintf("TestDelMarker-%d", i)`
$DIR/internal/bucket/lifecycle/delmarker-expiration_test.go: `.Unmarshal([]byte(test.xml), &dexp)`
$DIR/internal/bucket/lifecycle/expiration_test.go: `t.Run(fmt.Sprintf("Test %d", i+1), func(t *testing.T) {
			var expiration Expiration
			err := xml.Unmarshal([]byte(tc.inputXML), &expiration)
			if err != tc.expectedErr {
				t.Fatalf("%d: Expected %v but got %v", i+1, tc.expectedErr, err)
			}
		})`
$DIR/internal/bucket/lifecycle/expiration_test.go: `t.Run(fmt.Sprintf("Test %d", i+1), func(t *testing.T) {
			var expiration Expiration
			err := xml.Unmarshal([]byte(tc.inputXML), &expiration)
			if err != nil {
				t.Fatalf("%d: %v", i+1, err)
			}

			err = expiration.Validate()
			if err != tc.expectedErr {
				t.Fatalf("%d: got: %v, expected: %v", i+1, err, tc.expectedErr)
			}
		})`
$DIR/internal/bucket/lifecycle/expiration_test.go: `err = expiration.Validate()`
$DIR/internal/bucket/lifecycle/expiration_test.go: `.Run(fmt.Sprintf("Test %d", i+1), func(t *testing.T) {
			var expiration Expiration
			err := xml.Unmarshal([]byte(tc.inputXML), &expiration)
			if err != tc.expectedErr {
				t.Fatalf("%d: Expected %v but got %v", i+1, tc.expectedErr, err)
			}
		})`
$DIR/internal/bucket/lifecycle/expiration_test.go: `.Sprintf("Test %d", i+1)`
$DIR/internal/bucket/lifecycle/expiration_test.go: `.Unmarshal([]byte(tc.inputXML), &expiration)`
$DIR/internal/bucket/lifecycle/expiration_test.go: `.Run(fmt.Sprintf("Test %d", i+1), func(t *testing.T) {
			var expiration Expiration
			err := xml.Unmarshal([]byte(tc.inputXML), &expiration)
			if err != nil {
				t.Fatalf("%d: %v", i+1, err)
			}

			err = expiration.Validate()
			if err != tc.expectedErr {
				t.Fatalf("%d: got: %v, expected: %v", i+1, err, tc.expectedErr)
			}
		})`
$DIR/internal/bucket/lifecycle/expiration_test.go: `.Sprintf("Test %d", i+1)`
$DIR/internal/bucket/lifecycle/expiration_test.go: `.Unmarshal([]byte(tc.inputXML), &expiration)`
$DIR/internal/bucket/lifecycle/expiration_test.go: `.Validate()`
$DIR/internal/bucket/lifecycle/filter_test.go: `t.Run(fmt.Sprintf("Test %d", i+1), func(t *testing.T) {
			var filter Filter
			err := xml.Unmarshal([]byte(tc.inputXML), &filter)
			if err != nil {
				t.Fatalf("%d: Expected no error but got %v", i+1, err)
			}
			err = filter.Validate()
			if err != tc.expectedErr {
				t.Fatalf("%d: Expected %v but got %v", i+1, tc.expectedErr, err)
			}
		})`
$DIR/internal/bucket/lifecycle/filter_test.go: `err = filter.Validate()`
$DIR/internal/bucket/lifecycle/filter_test.go: `err = xml.Unmarshal(b, &f2)`
$DIR/internal/bucket/lifecycle/filter_test.go: `f1 = Filter{
		set: true,
		And: And{
			ObjectSizeGreaterThan: 100 * humanize.MiByte,
			ObjectSizeLessThan:    1 * humanize.GiByte,
			Prefix:                Prefix{},
		},
		andSet: true,
	}`
$DIR/internal/bucket/lifecycle/filter_test.go: `b, err = xml.Marshal(f1)`
$DIR/internal/bucket/lifecycle/filter_test.go: `f2 = Filter{}`
$DIR/internal/bucket/lifecycle/filter_test.go: `err = xml.Unmarshal(b, &f2)`
$DIR/internal/bucket/lifecycle/filter_test.go: `t.Run(fmt.Sprintf("Test %d", i+1), func(t *testing.T) {
			if got := test.filter.BySize(test.objSize); got != test.want {
				t.Fatalf("Expected %v but got %v", test.want, got)
			}
		})`
$DIR/internal/bucket/lifecycle/filter_test.go: `t.Run(fmt.Sprintf("Test %d", i+1), func(t *testing.T) {
			if got := test.filter.TestTags(test.userTags); got != test.want {
				t.Errorf("Expected %v but got %v", test.want, got)
			}
		})`
$DIR/internal/bucket/lifecycle/filter_test.go: `.Run(fmt.Sprintf("Test %d", i+1), func(t *testing.T) {
			var filter Filter
			err := xml.Unmarshal([]byte(tc.inputXML), &filter)
			if err != nil {
				t.Fatalf("%d: Expected no error but got %v", i+1, err)
			}
			err = filter.Validate()
			if err != tc.expectedErr {
				t.Fatalf("%d: Expected %v but got %v", i+1, tc.expectedErr, err)
			}
		})`
$DIR/internal/bucket/lifecycle/filter_test.go: `.Sprintf("Test %d", i+1)`
$DIR/internal/bucket/lifecycle/filter_test.go: `.Unmarshal([]byte(tc.inputXML), &filter)`
$DIR/internal/bucket/lifecycle/filter_test.go: `.Validate()`
$DIR/internal/bucket/lifecycle/filter_test.go: `.Marshal(f1)`
$DIR/internal/bucket/lifecycle/filter_test.go: `.Unmarshal(b, &f2)`
$DIR/internal/bucket/lifecycle/filter_test.go: `.Marshal(f1)`
$DIR/internal/bucket/lifecycle/filter_test.go: `.Unmarshal(b, &f2)`
$DIR/internal/bucket/lifecycle/filter_test.go: `.Run(fmt.Sprintf("Test %d", i+1), func(t *testing.T) {
			if got := test.filter.BySize(test.objSize); got != test.want {
				t.Fatalf("Expected %v but got %v", test.want, got)
			}
		})`
$DIR/internal/bucket/lifecycle/filter_test.go: `.Sprintf("Test %d", i+1)`
$DIR/internal/bucket/lifecycle/filter_test.go: `.filter.BySize(test.objSize)`
$DIR/internal/bucket/lifecycle/filter_test.go: `.Run(fmt.Sprintf("Test %d", i+1), func(t *testing.T) {
			if got := test.filter.TestTags(test.userTags); got != test.want {
				t.Errorf("Expected %v but got %v", test.want, got)
			}
		})`
$DIR/internal/bucket/lifecycle/filter_test.go: `.Sprintf("Test %d", i+1)`
$DIR/internal/bucket/lifecycle/filter_test.go: `.filter.TestTags(test.userTags)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `t.Run(fmt.Sprintf("Test %d", i+1), func(t *testing.T) {
			lc, err := ParseLifecycleConfig(bytes.NewReader([]byte(tc.inputConfig)))
			if err != tc.expectedParsingErr {
				t.Fatalf("%d: Expected %v during parsing but got %v", i+1, tc.expectedParsingErr, err)
			}
			if tc.expectedParsingErr != nil {
				// We already expect a parsing error,
				// no need to continue this test.
				return
			}
			err = lc.Validate(tc.lr)
			if err != tc.expectedValidationErr {
				t.Fatalf("%d: Expected %v during validation but got %v", i+1, tc.expectedValidationErr, err)
			}
		})`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `err = lc.Validate(tc.lr)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `err = xml.Unmarshal(b, &lc1)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `ruleSet[string(ruleBytes)] = struct{}{}`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `t.Run(fmt.Sprintf("Test %d", i+1), func(t *testing.T) {
			got := ExpectedExpiryTime(tc.modTime, int(tc.days))
			if !got.Equal(tc.expected) {
				t.Fatalf("Expected %v to be equal to %v", got, tc.expected)
			}
		})`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `t.Run("", func(t *testing.T) {
			lc, err := ParseLifecycleConfig(bytes.NewReader([]byte(tc.inputConfig)))
			if err != nil {
				t.Fatalf("Got unexpected error: %v", err)
			}
			opts := ObjectOpts{
				Name:             tc.objectName,
				UserTags:         tc.objectTags,
				ModTime:          tc.objectModTime,
				DeleteMarker:     tc.isDelMarker,
				IsLatest:         !tc.isNoncurrent,
				SuccessorModTime: tc.objectSuccessorModTime,
				VersionID:        tc.versionID,
			}
			opts.NumVersions = 1
			if tc.hasManyVersions {
				opts.NumVersions = 2 // at least one noncurrent version
			}
			if res := lc.Eval(opts); res.Action != tc.expectedAction {
				t.Fatalf("Expected action: `%v`, got: `%v`", tc.expectedAction, res.Action)
			}
		})`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `opts.NumVersions = 1`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `opts.NumVersions = 2`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `t.Run(fmt.Sprintf("Test_%d", i+1), func(t *testing.T) {
			lc, err := ParseLifecycleConfig(bytes.NewReader([]byte(tc.inputConfig)))
			if err != nil {
				t.Fatalf("Got unexpected error: %v", err)
			}
			// To ensure input lifecycle configurations are valid
			if err := lc.Validate(lock.Retention{}); err != nil {
				t.Fatalf("Invalid test case: %d %v", i+1, err)
			}
			if got := lc.HasActiveRules(tc.prefix); got != tc.want {
				t.Fatalf("Expected result: `%v`, got: `%v`", tc.want, got)
			}
		})`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `lc.SetPredictionHeaders(w, tc.obj)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `now = now.Add(7 * 24 * time.Hour)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `evt = lc.eval(obj2, now)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `now = now.Add(7 * 24 * time.Hour)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `evt = lc.eval(obj2, now)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `evt = lc.eval(obj3, now)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `rules = append(rules, Rule{
			ID:     strconv.Itoa(i),
			Status: "Enabled",
			NoncurrentVersionExpiration: NoncurrentVersionExpiration{
				NewerNoncurrentVersions: i,
				NoncurrentDays:          ExpirationDays(i),
			},
		})`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `t.Run(fmt.Sprintf("test-%d", i+1), func(t *testing.T) {
			if got := tc.lc.FilterRules(tc.opts); len(got) != tc.want {
				t.Fatalf("Expected %d rules to match but got %d", tc.want, len(got))
			}
			w := httptest.NewRecorder()
			tc.lc.SetPredictionHeaders(w, tc.opts)
			expHdr, ok := w.Header()[xhttp.AmzExpiration]
			switch {
			case ok && tc.want == 0:
				t.Fatalf("Expected no rule to match but found x-amz-expiration header set: %v", expHdr)
			case !ok && tc.want > 0:
				t.Fatal("Expected x-amz-expiration header to be set but not found")
			}
		})`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `tc.lc.SetPredictionHeaders(w, tc.opts)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `t.Run(fmt.Sprintf("test-%d", i+1), func(t *testing.T) {
			if err := tc.lc.Validate(lock.Retention{}); err != nil {
				t.Fatalf("Lifecycle validation failed - %v", err)
			}
			rules := tc.lc.FilterRules(tc.opts)
			if tc.hasRules && len(rules) == 0 {
				t.Fatalf("%d: Expected at least one rule to match but none matched", i+1)
			}
			if !tc.hasRules && len(rules) > 0 {
				t.Fatalf("%d: Expected no rules to match but got matches %v", i+1, rules)
			}
		})`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `lc = Lifecycle{
		Rules: []Rule{
			{
				ID:     "delmarker-exp-20",
				Status: "Enabled",
				DelMarkerExpiration: DelMarkerExpiration{
					Days: 20,
				},
			},
			{
				ID:     "delmarker-exp-10",
				Status: "Enabled",
				DelMarkerExpiration: DelMarkerExpiration{
					Days: 10,
				},
			},
		},
	}`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `opts = ObjectOpts{
		Name:         "foo.txt",
		ModTime:      time.Now().UTC().Add(-10 * 24 * time.Hour), // created 10 days ago
		Size:         0,
		VersionID:    uuid.New().String(),
		IsLatest:     true,
		DeleteMarker: true,
		NumVersions:  4,
	}`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `event = lc.eval(opts, time.Time{})`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.Run(fmt.Sprintf("Test %d", i+1), func(t *testing.T) {
			lc, err := ParseLifecycleConfig(bytes.NewReader([]byte(tc.inputConfig)))
			if err != tc.expectedParsingErr {
				t.Fatalf("%d: Expected %v during parsing but got %v", i+1, tc.expectedParsingErr, err)
			}
			if tc.expectedParsingErr != nil {
				// We already expect a parsing error,
				// no need to continue this test.
				return
			}
			err = lc.Validate(tc.lr)
			if err != tc.expectedValidationErr {
				t.Fatalf("%d: Expected %v during validation but got %v", i+1, tc.expectedValidationErr, err)
			}
		})`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.Sprintf("Test %d", i+1)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.NewReader([]byte(tc.inputConfig))`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.Validate(tc.lr)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.Date(2019, time.April, 20, 0, 0, 0, 0, time.UTC)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.MarshalIndent(&lc, "", "\t")`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.Unmarshal(b, &lc1)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.Marshal(rule)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.Marshal(rule)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.Date(2020, time.March, 15, 10, 10, 10, 0, time.UTC)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.Date(2020, time.March, 20, 0, 0, 0, 0, time.UTC)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.Date(2020, time.March, 15, 0, 0, 0, 0, time.UTC)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.Date(2020, time.March, 17, 0, 0, 0, 0, time.UTC)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.Run(fmt.Sprintf("Test %d", i+1), func(t *testing.T) {
			got := ExpectedExpiryTime(tc.modTime, int(tc.days))
			if !got.Equal(tc.expected) {
				t.Fatalf("Expected %v to be equal to %v", got, tc.expected)
			}
		})`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.Sprintf("Test %d", i+1)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.Equal(tc.expected)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.Now()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.UTC()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.Add(-10 * 24 * time.Hour)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.Now()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.UTC()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.Add(-10 * 24 * time.Hour)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.Now()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.UTC()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.Add(-10 * 24 * time.Hour)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.Now()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.UTC()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.Add(-10 * 24 * time.Hour)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.Now()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.UTC()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.Add(-6 * 24 * time.Hour)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.Now()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.UTC()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.Truncate(24*time.Hour)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.Add(24*time.Hour)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.Format(time.RFC3339)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.Now()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.UTC()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.Add(-24 * time.Hour)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.Now()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.UTC()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.Truncate(24*time.Hour)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.Add(-24*time.Hour)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.Format(time.RFC3339)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.Now()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.UTC()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.Add(-24 * time.Hour)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.Now()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.UTC()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.Truncate(24*time.Hour)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.Add(-24*time.Hour)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.Format(time.RFC3339)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.Now()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.UTC()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.Add(-24 * time.Hour)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.Now()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.Truncate(24*time.Hour)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.UTC()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.Add(-24*time.Hour)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.Format(time.RFC3339)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.Now()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.Truncate(24*time.Hour)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.UTC()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.Add(-24*time.Hour)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.Format(time.RFC3339)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.Now()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.UTC()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.Add(-24 * time.Hour)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.Now()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.Truncate(24*time.Hour)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.UTC()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.Add(-24*time.Hour)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.Format(time.RFC3339)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.Now()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.UTC()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.Add(-24 * time.Hour)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.Now()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.Truncate(24*time.Hour)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.UTC()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.Add(-24*time.Hour)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.Format(time.RFC3339)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.Now()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.UTC()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.Add(-24 * time.Hour)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.Now()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.Truncate(24*time.Hour)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.UTC()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.Add(-24*time.Hour)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.Format(time.RFC3339)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.Now()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.UTC()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.Add(-24 * time.Hour)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.Now()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.UTC()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.Truncate(24*time.Hour)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.Add(-24*time.Hour)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.Format(time.RFC3339)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.Now()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.UTC()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.Add(-24 * time.Hour)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.Now()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.Truncate(24*time.Hour)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.UTC()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.Add(-24*time.Hour)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.Format(time.RFC3339)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.Now()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.UTC()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.Add(-24 * time.Hour)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.Now()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.Truncate(24*time.Hour)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.UTC()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.Add(-24*time.Hour)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.Format(time.RFC3339)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.Now()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.UTC()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.Add(-24 * time.Hour)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.Now()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.UTC()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.Add(-48 * time.Hour)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.Now()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.Truncate(24*time.Hour)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.UTC()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.Add(24*time.Hour)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.Format(time.RFC3339)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.Now()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.Truncate(24*time.Hour)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.UTC()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.Add(-24*time.Hour)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.Format(time.RFC3339)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.Now()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.UTC()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.Add(-24 * time.Hour)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.Now()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.Truncate(24*time.Hour)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.UTC()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.Add(-24*time.Hour)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.Format(time.RFC3339)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.Now()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.UTC()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.Add(-24 * time.Hour)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.Now()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.UTC()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.Add(-1 * time.Hour)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.Now()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.UTC()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.Add(-10 * 24 * time.Hour)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.Now()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.UTC()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.Add(-10 * 24 * time.Hour)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.Now()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.UTC()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.Add(-11 * 24 * time.Hour)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.Now()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.UTC()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.Add(-12 * time.Hour)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.Now()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.UTC()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.Add(-10 * 24 * time.Hour)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.Now()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.Add(-1 * time.Nanosecond)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.UTC()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.Now()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.Add(-1 * time.Nanosecond)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.UTC()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.Now()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.Add(-1 * time.Nanosecond)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.UTC()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.New()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.String()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.NewString()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.Now()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.UTC()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.Add(-10 * 24 * time.Hour)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.NewString()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.Now()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.UTC()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.Add(-10 * 24 * time.Hour)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.Now()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.UTC()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.Add(-10 * 24 * time.Hour)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.Now()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.UTC()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.Add(-31 * 24 * time.Hour)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.Now()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.UTC()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.Add(-366 * 24 * time.Hour)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.Now()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.UTC()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.Add(-15 * 24 * time.Hour)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.Now()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.UTC()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.Add(-90 * 24 * time.Hour)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.Now()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.UTC()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.Add(-90 * 24 * time.Hour)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.Now()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.UTC()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.Add(-90 * 24 * time.Hour)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.Now()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.UTC()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.Add(-90 * 24 * time.Hour)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.Now()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.UTC()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.Add(-50 * 24 * time.Hour)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.Now()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.UTC()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.Add(-90 * 24 * time.Hour)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.Now()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.UTC()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.Add(-90 * 24 * time.Hour)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.Now()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.UTC()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.Add(-60 * 24 * time.Hour)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.Run("", func(t *testing.T) {
			lc, err := ParseLifecycleConfig(bytes.NewReader([]byte(tc.inputConfig)))
			if err != nil {
				t.Fatalf("Got unexpected error: %v", err)
			}
			opts := ObjectOpts{
				Name:             tc.objectName,
				UserTags:         tc.objectTags,
				ModTime:          tc.objectModTime,
				DeleteMarker:     tc.isDelMarker,
				IsLatest:         !tc.isNoncurrent,
				SuccessorModTime: tc.objectSuccessorModTime,
				VersionID:        tc.versionID,
			}
			opts.NumVersions = 1
			if tc.hasManyVersions {
				opts.NumVersions = 2 // at least one noncurrent version
			}
			if res := lc.Eval(opts); res.Action != tc.expectedAction {
				t.Fatalf("Expected action: `%v`, got: `%v`", tc.expectedAction, res.Action)
			}
		})`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.NewReader([]byte(tc.inputConfig))`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.Eval(opts)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.Run(fmt.Sprintf("Test_%d", i+1), func(t *testing.T) {
			lc, err := ParseLifecycleConfig(bytes.NewReader([]byte(tc.inputConfig)))
			if err != nil {
				t.Fatalf("Got unexpected error: %v", err)
			}
			// To ensure input lifecycle configurations are valid
			if err := lc.Validate(lock.Retention{}); err != nil {
				t.Fatalf("Invalid test case: %d %v", i+1, err)
			}
			if got := lc.HasActiveRules(tc.prefix); got != tc.want {
				t.Fatalf("Expected result: `%v`, got: `%v`", tc.want, got)
			}
		})`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.Sprintf("Test_%d", i+1)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.NewReader([]byte(tc.inputConfig))`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.Validate(lock.Retention{})`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.HasActiveRules(tc.prefix)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.NewRecorder()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.SetPredictionHeaders(w, tc.obj)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.Header()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.Contains(expHdrs[0], lc.Rules[tc.expRuleID].ID)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.Header()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.Contains(transHdrs[0], lc.Rules[tc.transRuleID].ID)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.Transition.NextDue(tc.obj)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.Contains(transHdrs[0], expectedDue.Format(http.TimeFormat))`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.Format(http.TimeFormat)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.NoncurrentVersionTransition.NextDue(tc.obj)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.Contains(transHdrs[0], expectedDue.Format(http.TimeFormat))`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.Format(http.TimeFormat)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.Now()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.UTC()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.Add(7 * 24 * time.Hour)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.eval(obj1, now)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.eval(obj2, now)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.Now()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.UTC()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.Add(7 * 24 * time.Hour)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.eval(obj1, now)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.eval(obj2, now)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.eval(obj3, now)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.Itoa(i)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.NoncurrentVersionsExpirationLimit(ObjectOpts{Name: "obj"})`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.NewDecoder(strings.NewReader(tc.xml))`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.NewReader(tc.xml)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.Decode(&got)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.NewReader([]byte(`<LifecycleConfiguration>
								  <Rule>
	                              <ID>rule-1</ID>
		                          <Filter>
		                             <Prefix>prefix</Prefix>
		                          </Filter>
		                          <Status>Enabled</Status>
		                          <Expiration><Days>3</Days></Expiration>
		                          </Rule>
		                          <Rule>
		                          <Filter>
		                             <Prefix>another-prefix</Prefix>
		                          </Filter>
		                          <Status>Enabled</Status>
		                          <Expiration><Days>3</Days></Expiration>
		                          </Rule>
		                          </LifecycleConfiguration>`))`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.Now()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.UTC()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.Add(-10 * 24 * time.Hour)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.Now()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.UTC()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.Add(-10 * 24 * time.Hour)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.Run(fmt.Sprintf("test-%d", i+1), func(t *testing.T) {
			if got := tc.lc.FilterRules(tc.opts); len(got) != tc.want {
				t.Fatalf("Expected %d rules to match but got %d", tc.want, len(got))
			}
			w := httptest.NewRecorder()
			tc.lc.SetPredictionHeaders(w, tc.opts)
			expHdr, ok := w.Header()[xhttp.AmzExpiration]
			switch {
			case ok && tc.want == 0:
				t.Fatalf("Expected no rule to match but found x-amz-expiration header set: %v", expHdr)
			case !ok && tc.want > 0:
				t.Fatal("Expected x-amz-expiration header to be set but not found")
			}
		})`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.Sprintf("test-%d", i+1)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.lc.FilterRules(tc.opts)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.NewRecorder()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.lc.SetPredictionHeaders(w, tc.opts)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.Header()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.Run(fmt.Sprintf("test-%d", i+1), func(t *testing.T) {
			if err := tc.lc.Validate(lock.Retention{}); err != nil {
				t.Fatalf("Lifecycle validation failed - %v", err)
			}
			rules := tc.lc.FilterRules(tc.opts)
			if tc.hasRules && len(rules) == 0 {
				t.Fatalf("%d: Expected at least one rule to match but none matched", i+1)
			}
			if !tc.hasRules && len(rules) > 0 {
				t.Fatalf("%d: Expected no rules to match but got matches %v", i+1, rules)
			}
		})`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.Sprintf("test-%d", i+1)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.lc.Validate(lock.Retention{})`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.lc.FilterRules(tc.opts)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.Now()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.UTC()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.Add(-10 * 24 * time.Hour)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.New()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.String()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.eval(opts, time.Time{})`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.Now()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.UTC()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.Add(-10 * 24 * time.Hour)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.New()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.String()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go: `.eval(opts, time.Time{})`
$DIR/internal/bucket/lifecycle/noncurrentversion_test.go: `.n.Validate()`
$DIR/internal/bucket/lifecycle/rule_test.go: `t.Run(fmt.Sprintf("Test %d", i+1), func(t *testing.T) {
			var rule Rule
			err := xml.Unmarshal([]byte(tc.inputXML), &rule)
			if err != nil {
				t.Fatal(err)
			}

			if err := rule.Validate(); err != tc.expectedErr {
				t.Fatalf("%d: Expected %v but got %v", i+1, tc.expectedErr, err)
			}
		})`
$DIR/internal/bucket/lifecycle/rule_test.go: `.Run(fmt.Sprintf("Test %d", i+1), func(t *testing.T) {
			var rule Rule
			err := xml.Unmarshal([]byte(tc.inputXML), &rule)
			if err != nil {
				t.Fatal(err)
			}

			if err := rule.Validate(); err != tc.expectedErr {
				t.Fatalf("%d: Expected %v but got %v", i+1, tc.expectedErr, err)
			}
		})`
$DIR/internal/bucket/lifecycle/rule_test.go: `.Sprintf("Test %d", i+1)`
$DIR/internal/bucket/lifecycle/rule_test.go: `.Unmarshal([]byte(tc.inputXML), &rule)`
$DIR/internal/bucket/lifecycle/rule_test.go: `.Validate()`
$DIR/internal/bucket/lifecycle/transition_test.go: `.Unmarshal([]byte(tc.input), &tr)`
$DIR/internal/bucket/lifecycle/transition_test.go: `.Validate()`
$DIR/internal/bucket/lifecycle/transition_test.go: `.Unmarshal([]byte(tc.input), &ntr)`
$DIR/internal/bucket/lifecycle/transition_test.go: `.Validate()`
$DIR/internal/bucket/object/lock/lock_test.go: `err = xml.Unmarshal(d, &dr)`
$DIR/internal/bucket/object/lock/lock_test.go: `t.Run("", func(t *testing.T) {
			_, err := ParseObjectLockConfig(strings.NewReader(tt.value))
			//nolint:gocritic
			if tt.expectedErr == nil {
				if err != nil {
					t.Fatalf("error: expected = <nil>, got = %v", err)
				}
			} else if err == nil {
				t.Fatalf("error: expected = %v, got = <nil>", tt.expectedErr)
			} else if tt.expectedErr.Error() != err.Error() {
				t.Fatalf("error: expected = %v, got = %v", tt.expectedErr, err)
			}
		})`
$DIR/internal/bucket/object/lock/lock_test.go: `t.Run("", func(t *testing.T) {
			_, err := ParseObjectRetention(strings.NewReader(tt.value))
			//nolint:gocritic
			if tt.expectedErr == nil {
				if err != nil {
					t.Fatalf("error: expected = <nil>, got = %v", err)
				}
			} else if err == nil {
				t.Fatalf("error: expected = %v, got = <nil>", tt.expectedErr)
			} else if tt.expectedErr.Error() != err.Error() {
				t.Fatalf("error: expected = %v, got = %v", tt.expectedErr, err)
			}
		})`
$DIR/internal/bucket/object/lock/lock_test.go: `.MarshalIndent(&tt.value, "", "\t")`
$DIR/internal/bucket/object/lock/lock_test.go: `.Unmarshal(d, &dr)`
$DIR/internal/bucket/object/lock/lock_test.go: `.Run("", func(t *testing.T) {
			_, err := ParseObjectLockConfig(strings.NewReader(tt.value))
			//nolint:gocritic
			if tt.expectedErr == nil {
				if err != nil {
					t.Fatalf("error: expected = <nil>, got = %v", err)
				}
			} else if err == nil {
				t.Fatalf("error: expected = %v, got = <nil>", tt.expectedErr)
			} else if tt.expectedErr.Error() != err.Error() {
				t.Fatalf("error: expected = %v, got = %v", tt.expectedErr, err)
			}
		})`
$DIR/internal/bucket/object/lock/lock_test.go: `.NewReader(tt.value)`
$DIR/internal/bucket/object/lock/lock_test.go: `.Run("", func(t *testing.T) {
			_, err := ParseObjectRetention(strings.NewReader(tt.value))
			//nolint:gocritic
			if tt.expectedErr == nil {
				if err != nil {
					t.Fatalf("error: expected = <nil>, got = %v", err)
				}
			} else if err == nil {
				t.Fatalf("error: expected = %v, got = <nil>", tt.expectedErr)
			} else if tt.expectedErr.Error() != err.Error() {
				t.Fatalf("error: expected = %v, got = %v", tt.expectedErr, err)
			}
		})`
$DIR/internal/bucket/object/lock/lock_test.go: `.NewReader(tt.value)`
$DIR/internal/bucket/object/lock/lock_test.go: `.Date(2020, 2, 1, 12, 0, 0, 0, time.UTC)`
$DIR/internal/bucket/object/lock/lock_test.go: `.New("expected element type <Status> but have <MyStatus>")`
$DIR/internal/bucket/object/lock/lock_test.go: `.New("expected element type <LegalHold>/<ObjectLockLegalHold> but have <UnknownLegalHold>")`
$DIR/internal/bucket/object/lock/lock_test.go: `.NewReader(tt.value)`
$DIR/internal/bucket/object/lock/lock_test.go: `.DeepEqual(o, tt.metadata)`
$DIR/internal/bucket/replication/replication_test.go: `t.Run(fmt.Sprintf("Test %d", i+1), func(t *testing.T) {
			cfg, err := ParseConfig(bytes.NewReader([]byte(tc.inputConfig)))
			if err != nil && tc.expectedParsingErr != nil && err.Error() != tc.expectedParsingErr.Error() {
				t.Fatalf("%d: Expected '%v' during parsing but got '%v'", i+1, tc.expectedParsingErr, err)
			}
			if err == nil && tc.expectedParsingErr != nil {
				t.Fatalf("%d: Expected '%v' during parsing but got '%v'", i+1, tc.expectedParsingErr, err)
			}
			if tc.expectedParsingErr != nil {
				// We already expect a parsing error,
				// no need to continue this test.
				return
			}
			err = cfg.Validate(tc.destBucket, tc.sameTarget)
			if err != tc.expectedValidationErr {
				t.Fatalf("%d: Expected %v during parsing but got %v", i+1, tc.expectedValidationErr, err)
			}
		})`
$DIR/internal/bucket/replication/replication_test.go: `err = cfg.Validate(tc.destBucket, tc.sameTarget)`
$DIR/internal/bucket/replication/replication_test.go: `t.Run(testCase.opts.Name, func(t *testing.T) {
			result := testCase.c.Replicate(testCase.opts)
			if result != testCase.expectedResult {
				t.Errorf("expected: %v, got: %v", testCase.expectedResult, result)
			}
		})`
$DIR/internal/bucket/replication/replication_test.go: `t.Run(fmt.Sprintf("Test_%d", i+1), func(t *testing.T) {
			cfg, err := ParseConfig(bytes.NewReader([]byte(tc.inputConfig)))
			if err != nil {
				t.Fatalf("Got unexpected error: %v", err)
			}
			if got := cfg.HasActiveRules(tc.prefix, false); got != tc.expectedNonRec {
				t.Fatalf("Expected result with recursive set to false: `%v`, got: `%v`", tc.expectedNonRec, got)
			}
			if got := cfg.HasActiveRules(tc.prefix, true); got != tc.expectedRec {
				t.Fatalf("Expected result with recursive set to true: `%v`, got: `%v`", tc.expectedRec, got)
			}
		})`
$DIR/internal/bucket/replication/replication_test.go: `.Run(fmt.Sprintf("Test %d", i+1), func(t *testing.T) {
			cfg, err := ParseConfig(bytes.NewReader([]byte(tc.inputConfig)))
			if err != nil && tc.expectedParsingErr != nil && err.Error() != tc.expectedParsingErr.Error() {
				t.Fatalf("%d: Expected '%v' during parsing but got '%v'", i+1, tc.expectedParsingErr, err)
			}
			if err == nil && tc.expectedParsingErr != nil {
				t.Fatalf("%d: Expected '%v' during parsing but got '%v'", i+1, tc.expectedParsingErr, err)
			}
			if tc.expectedParsingErr != nil {
				// We already expect a parsing error,
				// no need to continue this test.
				return
			}
			err = cfg.Validate(tc.destBucket, tc.sameTarget)
			if err != tc.expectedValidationErr {
				t.Fatalf("%d: Expected %v during parsing but got %v", i+1, tc.expectedValidationErr, err)
			}
		})`
$DIR/internal/bucket/replication/replication_test.go: `.Sprintf("Test %d", i+1)`
$DIR/internal/bucket/replication/replication_test.go: `.NewReader([]byte(tc.inputConfig))`
$DIR/internal/bucket/replication/replication_test.go: `.Validate(tc.destBucket, tc.sameTarget)`
$DIR/internal/bucket/replication/replication_test.go: `.Run(testCase.opts.Name, func(t *testing.T) {
			result := testCase.c.Replicate(testCase.opts)
			if result != testCase.expectedResult {
				t.Errorf("expected: %v, got: %v", testCase.expectedResult, result)
			}
		})`
$DIR/internal/bucket/replication/replication_test.go: `.c.Replicate(testCase.opts)`
$DIR/internal/bucket/replication/replication_test.go: `.Run(fmt.Sprintf("Test_%d", i+1), func(t *testing.T) {
			cfg, err := ParseConfig(bytes.NewReader([]byte(tc.inputConfig)))
			if err != nil {
				t.Fatalf("Got unexpected error: %v", err)
			}
			if got := cfg.HasActiveRules(tc.prefix, false); got != tc.expectedNonRec {
				t.Fatalf("Expected result with recursive set to false: `%v`, got: `%v`", tc.expectedNonRec, got)
			}
			if got := cfg.HasActiveRules(tc.prefix, true); got != tc.expectedRec {
				t.Fatalf("Expected result with recursive set to true: `%v`, got: `%v`", tc.expectedRec, got)
			}
		})`
$DIR/internal/bucket/replication/replication_test.go: `.Sprintf("Test_%d", i+1)`
$DIR/internal/bucket/replication/replication_test.go: `.NewReader([]byte(tc.inputConfig))`
$DIR/internal/bucket/replication/replication_test.go: `.HasActiveRules(tc.prefix, false)`
$DIR/internal/bucket/replication/replication_test.go: `.HasActiveRules(tc.prefix, true)`
$DIR/internal/bucket/replication/replication_test.go: `.NewReader([]byte(tc.inputConfig))`
$DIR/internal/bucket/replication/replication_test.go: `.FilterActionableRules(ObjectOpts{Name: tc.prefix})`
$DIR/internal/bucket/replication/rule_test.go: `t.Run(fmt.Sprintf("Test_%d", i+1), func(t *testing.T) {
			cfg, err := ParseConfig(bytes.NewReader([]byte(tc.inputConfig)))
			if err != nil {
				t.Fatalf("Got unexpected error: %v", err)
			}
			if got := cfg.Rules[0].MetadataReplicate(tc.opts); got != tc.expectedResult {
				t.Fatalf("Expected result with recursive set to false: `%v`, got: `%v`", tc.expectedResult, got)
			}
		})`
$DIR/internal/bucket/replication/rule_test.go: `.Run(fmt.Sprintf("Test_%d", i+1), func(t *testing.T) {
			cfg, err := ParseConfig(bytes.NewReader([]byte(tc.inputConfig)))
			if err != nil {
				t.Fatalf("Got unexpected error: %v", err)
			}
			if got := cfg.Rules[0].MetadataReplicate(tc.opts); got != tc.expectedResult {
				t.Fatalf("Expected result with recursive set to false: `%v`, got: `%v`", tc.expectedResult, got)
			}
		})`
$DIR/internal/bucket/replication/rule_test.go: `.Sprintf("Test_%d", i+1)`
$DIR/internal/bucket/replication/rule_test.go: `.NewReader([]byte(tc.inputConfig))`
$DIR/internal/bucket/replication/rule_test.go: `.MetadataReplicate(tc.opts)`
$DIR/internal/bucket/versioning/versioning_test.go: `v, err = ParseConfig(strings.NewReader(tc.input))`
$DIR/internal/bucket/versioning/versioning_test.go: `mismatch = true`
$DIR/internal/bucket/versioning/versioning_test.go: `v.ExcludeFolders = false`
$DIR/internal/bucket/versioning/versioning_test.go: `.NewReader(tc.input)`
$DIR/internal/bucket/versioning/versioning_test.go: `.Validate()`
$DIR/internal/bucket/versioning/versioning_test.go: `.Marshal(v)`
$DIR/internal/bucket/versioning/versioning_test.go: `.Contains(str, "ExcludedPrefixes")`
$DIR/internal/bucket/versioning/versioning_test.go: `.Enabled()`
$DIR/internal/bucket/versioning/versioning_test.go: `.Suspended()`
$DIR/internal/bucket/versioning/versioning_test.go: `.PrefixEnabled(prefix)`
$DIR/internal/bucket/versioning/versioning_test.go: `.PrefixSuspended(prefix)`
$DIR/internal/bucket/versioning/versioning_test.go: `.PrefixEnabled(prefix)`
$DIR/internal/bucket/versioning/versioning_test.go: `.PrefixSuspended(prefix)`
$DIR/internal/bucket/versioning/versioning_test.go: `.PrefixEnabled(prefix)`
$DIR/internal/bucket/versioning/versioning_test.go: `.PrefixSuspended(prefix)`
$DIR/internal/bucket/versioning/versioning_test.go: `.Validate()`
$DIR/internal/bucket/versioning/versioning_test.go: `.PrefixSuspended(test.prefix)`
$DIR/internal/cachevalue/cache_test.go: `cache.InitOnce(2*time.Second, Opts{},
		func(ctx context.Context) (time.Time, error) {
			return time.Now(), slowCaller(ctx)
		},
	)`
$DIR/internal/cachevalue/cache_test.go: `cancel()`
$DIR/internal/cachevalue/cache_test.go: `ctx, cancel = context.WithCancel(context.Background())`
$DIR/internal/cachevalue/cache_test.go: `time.Sleep(3 * time.Second)`
$DIR/internal/cachevalue/cache_test.go: `cache.InitOnce(2*time.Second, Opts{},
		func(ctx context.Context) (time.Time, error) {
			return time.Now(), nil
		},
	)`
$DIR/internal/cachevalue/cache_test.go: `time.Sleep(3 * time.Second)`
$DIR/internal/cachevalue/cache_test.go: `.InitOnce(2*time.Second, Opts{},
		func(ctx context.Context) (time.Time, error) {
			return time.Now(), slowCaller(ctx)
		},
	)`
$DIR/internal/cachevalue/cache_test.go: `.Now()`
$DIR/internal/cachevalue/cache_test.go: `.WithCancel(context.Background())`
$DIR/internal/cachevalue/cache_test.go: `.Background()`
$DIR/internal/cachevalue/cache_test.go: `.GetWithCtx(ctx)`
$DIR/internal/cachevalue/cache_test.go: `.Is(err, context.Canceled)`
$DIR/internal/cachevalue/cache_test.go: `.WithCancel(context.Background())`
$DIR/internal/cachevalue/cache_test.go: `.Background()`
$DIR/internal/cachevalue/cache_test.go: `.GetWithCtx(ctx)`
$DIR/internal/cachevalue/cache_test.go: `.GetWithCtx(ctx)`
$DIR/internal/cachevalue/cache_test.go: `.Equal(t2)`
$DIR/internal/cachevalue/cache_test.go: `.Sleep(3 * time.Second)`
$DIR/internal/cachevalue/cache_test.go: `.GetWithCtx(ctx)`
$DIR/internal/cachevalue/cache_test.go: `.Equal(t3)`
$DIR/internal/cachevalue/cache_test.go: `.InitOnce(2*time.Second, Opts{},
		func(ctx context.Context) (time.Time, error) {
			return time.Now(), nil
		},
	)`
$DIR/internal/cachevalue/cache_test.go: `.Now()`
$DIR/internal/cachevalue/cache_test.go: `.Get()`
$DIR/internal/cachevalue/cache_test.go: `.Get()`
$DIR/internal/cachevalue/cache_test.go: `.Equal(t2)`
$DIR/internal/cachevalue/cache_test.go: `.Sleep(3 * time.Second)`
$DIR/internal/cachevalue/cache_test.go: `.Get()`
$DIR/internal/cachevalue/cache_test.go: `.Equal(t3)`
$DIR/internal/config/bool-flag_test.go: `.flag.String()`
$DIR/internal/config/bool-flag_test.go: `.flag.MarshalJSON()`
$DIR/internal/config/bool-flag_test.go: `.UnmarshalJSON(testCase.data)`
$DIR/internal/config/cache/remote_gen_test.go: `left, err = msgp.Skip(bts)`
$DIR/internal/config/cache/remote_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/internal/config/cache/remote_gen_test.go: `buf.Reset()`
$DIR/internal/config/cache/remote_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/internal/config/cache/remote_gen_test.go: `err = msgp.NewReader(&buf).Skip()`
$DIR/internal/config/cache/remote_gen_test.go: `left, err = msgp.Skip(bts)`
$DIR/internal/config/cache/remote_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/internal/config/cache/remote_gen_test.go: `buf.Reset()`
$DIR/internal/config/cache/remote_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/internal/config/cache/remote_gen_test.go: `err = msgp.NewReader(&buf).Skip()`
$DIR/internal/config/cache/remote_gen_test.go: `.MarshalMsg(nil)`
$DIR/internal/config/cache/remote_gen_test.go: `.UnmarshalMsg(bts)`
$DIR/internal/config/cache/remote_gen_test.go: `.Encode(&buf, &v)`
$DIR/internal/config/cache/remote_gen_test.go: `.Msgsize()`
$DIR/internal/config/cache/remote_gen_test.go: `.Len()`
$DIR/internal/config/cache/remote_gen_test.go: `.Decode(&buf, &vn)`
$DIR/internal/config/cache/remote_gen_test.go: `.Reset()`
$DIR/internal/config/cache/remote_gen_test.go: `.Encode(&buf, &v)`
$DIR/internal/config/cache/remote_gen_test.go: `.MarshalMsg(nil)`
$DIR/internal/config/cache/remote_gen_test.go: `.UnmarshalMsg(bts)`
$DIR/internal/config/cache/remote_gen_test.go: `.Encode(&buf, &v)`
$DIR/internal/config/cache/remote_gen_test.go: `.Msgsize()`
$DIR/internal/config/cache/remote_gen_test.go: `.Len()`
$DIR/internal/config/cache/remote_gen_test.go: `.Decode(&buf, &vn)`
$DIR/internal/config/cache/remote_gen_test.go: `.Reset()`
$DIR/internal/config/cache/remote_gen_test.go: `.Encode(&buf, &v)`
$DIR/internal/config/certs_test.go: `t.Cleanup(func() {
		os.Unsetenv(EnvCertPassword)
	})`
$DIR/internal/config/certs_test.go: `os.Unsetenv(EnvCertPassword)`
$DIR/internal/config/certs_test.go: `os.Remove(privateKey)`
$DIR/internal/config/certs_test.go: `t.Setenv(EnvCertPassword, testCase.password)`
$DIR/internal/config/certs_test.go: `_, err = LoadX509KeyPair(certificate, privateKey)`
$DIR/internal/config/certs_test.go: `os.Remove(privateKey)`
$DIR/internal/config/certs_test.go: `os.Remove(certificate)`
$DIR/internal/config/certs_test.go: `.Remove(tempFile1)`
$DIR/internal/config/certs_test.go: `.Remove(tempFile2)`
$DIR/internal/config/certs_test.go: `.Remove(tempFile3)`
$DIR/internal/config/certs_test.go: `.Remove(tempFile4)`
$DIR/internal/config/certs_test.go: `.Remove(tempFile5)`
$DIR/internal/config/certs_test.go: `.Cleanup(func() {
		os.Unsetenv(EnvCertPassword)
	})`
$DIR/internal/config/certs_test.go: `.Unsetenv(EnvCertPassword)`
$DIR/internal/config/certs_test.go: `.Remove(privateKey)`
$DIR/internal/config/certs_test.go: `.Setenv(EnvCertPassword, testCase.password)`
$DIR/internal/config/certs_test.go: `.Remove(privateKey)`
$DIR/internal/config/certs_test.go: `.Remove(certificate)`
$DIR/internal/config/compress/compress_test.go: `t.Run(testCase.str, func(t *testing.T) {
			gotPatterns, err := parseCompressIncludes(testCase.str)
			if !testCase.success && err == nil {
				t.Error("expected failure but success instead")
			}
			if testCase.success && err != nil {
				t.Errorf("expected success but failed instead %s", err)
			}
			if testCase.success && !reflect.DeepEqual(testCase.expectedPatterns, gotPatterns) {
				t.Errorf("expected patterns %s but got %s", testCase.expectedPatterns, gotPatterns)
			}
		})`
$DIR/internal/config/compress/compress_test.go: `.Run(testCase.str, func(t *testing.T) {
			gotPatterns, err := parseCompressIncludes(testCase.str)
			if !testCase.success && err == nil {
				t.Error("expected failure but success instead")
			}
			if testCase.success && err != nil {
				t.Errorf("expected success but failed instead %s", err)
			}
			if testCase.success && !reflect.DeepEqual(testCase.expectedPatterns, gotPatterns) {
				t.Errorf("expected patterns %s but got %s", testCase.expectedPatterns, gotPatterns)
			}
		})`
$DIR/internal/config/compress/compress_test.go: `.DeepEqual(testCase.expectedPatterns, gotPatterns)`
$DIR/internal/config/config_test.go: `t.Run("", func(t *testing.T) {
			gotFields := kvFields(test.input, test.keys)
			if len(gotFields) != len(test.expectedFields) {
				t.Errorf("Expected keys %d, found %d", len(test.expectedFields), len(gotFields))
			}
			found := true
			for _, field := range gotFields {
				_, ok := test.expectedFields[field]
				found = found && ok
			}
			if !found {
				t.Errorf("Expected %s, got %s", test.expectedFields, gotFields)
			}
		})`
$DIR/internal/config/config_test.go: `found = found && ok`
$DIR/internal/config/config_test.go: `t.Run(test.name, func(t *testing.T) {
			ok := validRegionRegex.MatchString(test.name)
			if test.success != ok {
				t.Errorf("Expected %t, got %t", test.success, ok)
			}
		})`
$DIR/internal/config/config_test.go: `.Run("", func(t *testing.T) {
			gotFields := kvFields(test.input, test.keys)
			if len(gotFields) != len(test.expectedFields) {
				t.Errorf("Expected keys %d, found %d", len(test.expectedFields), len(gotFields))
			}
			found := true
			for _, field := range gotFields {
				_, ok := test.expectedFields[field]
				found = found && ok
			}
			if !found {
				t.Errorf("Expected %s, got %s", test.expectedFields, gotFields)
			}
		})`
$DIR/internal/config/config_test.go: `.Run(test.name, func(t *testing.T) {
			ok := validRegionRegex.MatchString(test.name)
			if test.success != ok {
				t.Errorf("Expected %t, got %t", test.success, ok)
			}
		})`
$DIR/internal/config/config_test.go: `.MatchString(test.name)`
$DIR/internal/config/crypto_test.go: `data, err = io.ReadAll(plaintext)`
$DIR/internal/config/crypto_test.go: `.DecodeString("ddedadb867afa3f73bd33c25499a723ed7f9f51172ee7b1b679e08dc795debcc")`
$DIR/internal/config/crypto_test.go: `.NewBuiltin("my-key", key)`
$DIR/internal/config/crypto_test.go: `.NewReader(test.Data)`
$DIR/internal/config/crypto_test.go: `.ReadAll(ciphertext)`
$DIR/internal/config/crypto_test.go: `.NewReader(data)`
$DIR/internal/config/crypto_test.go: `.ReadAll(plaintext)`
$DIR/internal/config/crypto_test.go: `.Equal(data, test.Data)`
$DIR/internal/config/etcd/etcd_test.go: `t.Run(testCase.s, func(t *testing.T) {
			endpoints, secure, err := parseEndpoints(testCase.s)
			if err != nil && testCase.success {
				t.Errorf("expected to succeed but failed with %s", err)
			}
			if !testCase.success && err == nil {
				t.Error("expected failure but succeeded instead")
			}
			if testCase.success {
				if !reflect.DeepEqual(endpoints, testCase.endpoints) {
					t.Errorf("expected %s, got %s", testCase.endpoints, endpoints)
				}
				if secure != testCase.secure {
					t.Errorf("expected %t, got %t", testCase.secure, secure)
				}
			}
		})`
$DIR/internal/config/etcd/etcd_test.go: `.Run(testCase.s, func(t *testing.T) {
			endpoints, secure, err := parseEndpoints(testCase.s)
			if err != nil && testCase.success {
				t.Errorf("expected to succeed but failed with %s", err)
			}
			if !testCase.success && err == nil {
				t.Error("expected failure but succeeded instead")
			}
			if testCase.success {
				if !reflect.DeepEqual(endpoints, testCase.endpoints) {
					t.Errorf("expected %s, got %s", testCase.endpoints, endpoints)
				}
				if secure != testCase.secure {
					t.Errorf("expected %t, got %t", testCase.secure, secure)
				}
			}
		})`
$DIR/internal/config/etcd/etcd_test.go: `.DeepEqual(endpoints, testCase.endpoints)`
$DIR/internal/config/identity/openid/jwks_test.go: `kids = append(kids, jks.Kid)`
$DIR/internal/config/identity/openid/jwks_test.go: `keys[ii], err = jks.DecodePublicKey()`
$DIR/internal/config/identity/openid/jwks_test.go: `.Unmarshal([]byte(jsonkey), &jk)`
$DIR/internal/config/identity/openid/jwks_test.go: `.DecodePublicKey()`
$DIR/internal/config/identity/openid/jwks_test.go: `.Unmarshal([]byte(jsonkey), &jk)`
$DIR/internal/config/identity/openid/jwks_test.go: `.DecodePublicKey()`
$DIR/internal/config/identity/openid/jwks_test.go: `.P256()`
$DIR/internal/config/identity/openid/jwks_test.go: `.Equal(key0.X.Bytes(), []byte{
		0x30, 0xa0, 0x42, 0x4c, 0xd2,
		0x1c, 0x29, 0x44, 0x83, 0x8a, 0x2d, 0x75, 0xc9, 0x2b, 0x37, 0xe7, 0x6e, 0xa2,
		0xd, 0x9f, 0x0, 0x89, 0x3a, 0x3b, 0x4e, 0xee, 0x8a, 0x3c, 0xa, 0xaf, 0xec, 0x3e,
	})`
$DIR/internal/config/identity/openid/jwks_test.go: `.X.Bytes()`
$DIR/internal/config/identity/openid/jwks_test.go: `.Equal(key0.Y.Bytes(), []byte{
		0xe0, 0x4b, 0x65, 0xe9, 0x24,
		0x56, 0xd9, 0x88, 0x8b, 0x52, 0xb3, 0x79, 0xbd, 0xfb, 0xd5, 0x1e, 0xe8,
		0x69, 0xef, 0x1f, 0xf, 0xc6, 0x5b, 0x66, 0x59, 0x69, 0x5b, 0x6c, 0xce,
		0x8, 0x17, 0x23,
	})`
$DIR/internal/config/identity/openid/jwks_test.go: `.Y.Bytes()`
$DIR/internal/config/identity/openid/jwks_test.go: `.Equal(key1.N.Bytes(), []byte{
		0xd2, 0xfc, 0x7b, 0x6a, 0xa, 0x1e,
		0x6c, 0x67, 0x10, 0x4a, 0xeb, 0x8f, 0x88, 0xb2, 0x57, 0x66, 0x9b, 0x4d, 0xf6,
		0x79, 0xdd, 0xad, 0x9, 0x9b, 0x5c, 0x4a, 0x6c, 0xd9, 0xa8, 0x80, 0x15, 0xb5,
		0xa1, 0x33, 0xbf, 0xb, 0x85, 0x6c, 0x78, 0x71, 0xb6, 0xdf, 0x0, 0xb, 0x55,
		0x4f, 0xce, 0xb3, 0xc2, 0xed, 0x51, 0x2b, 0xb6, 0x8f, 0x14, 0x5c, 0x6e, 0x84,
		0x34, 0x75, 0x2f, 0xab, 0x52, 0xa1, 0xcf, 0xc1, 0x24, 0x40, 0x8f, 0x79, 0xb5,
		0x8a, 0x45, 0x78, 0xc1, 0x64, 0x28, 0x85, 0x57, 0x89, 0xf7, 0xa2, 0x49, 0xe3,
		0x84, 0xcb, 0x2d, 0x9f, 0xae, 0x2d, 0x67, 0xfd, 0x96, 0xfb, 0x92, 0x6c, 0x19,
		0x8e, 0x7, 0x73, 0x99, 0xfd, 0xc8, 0x15, 0xc0, 0xaf, 0x9, 0x7d, 0xde, 0x5a,
		0xad, 0xef, 0xf4, 0x4d, 0xe7, 0xe, 0x82, 0x7f, 0x48, 0x78, 0x43, 0x24, 0x39,
		0xbf, 0xee, 0xb9, 0x60, 0x68, 0xd0, 0x47, 0x4f, 0xc5, 0xd, 0x6d, 0x90, 0xbf,
		0x3a, 0x98, 0xdf, 0xaf, 0x10, 0x40, 0xc8, 0x9c, 0x2, 0xd6, 0x92, 0xab, 0x3b,
		0x3c, 0x28, 0x96, 0x60, 0x9d, 0x86, 0xfd, 0x73, 0xb7, 0x74, 0xce, 0x7, 0x40,
		0x64, 0x7c, 0xee, 0xea, 0xa3, 0x10, 0xbd, 0x12, 0xf9, 0x85, 0xa8, 0xeb, 0x9f,
		0x59, 0xfd, 0xd4, 0x26, 0xce, 0xa5, 0xb2, 0x12, 0xf, 0x4f, 0x2a, 0x34, 0xbc,
		0xab, 0x76, 0x4b, 0x7e, 0x6c, 0x54, 0xd6, 0x84, 0x2, 0x38, 0xbc, 0xc4, 0x5, 0x87,
		0xa5, 0x9e, 0x66, 0xed, 0x1f, 0x33, 0x89, 0x45, 0x77, 0x63, 0x5c, 0x47, 0xa,
		0xf7, 0x5c, 0xf9, 0x2c, 0x20, 0xd1, 0xda, 0x43, 0xe1, 0xbf, 0xc4, 0x19, 0xe2,
		0x22, 0xa6, 0xf0, 0xd0, 0xbb, 0x35, 0x8c, 0x5e, 0x38, 0xf9, 0xcb, 0x5, 0xa, 0xea,
		0xfe, 0x90, 0x48, 0x14, 0xf1, 0xac, 0x1a, 0xa4, 0x9c, 0xca, 0x9e, 0xa0, 0xca, 0x83,
	})`
$DIR/internal/config/identity/openid/jwks_test.go: `.N.Bytes()`
$DIR/internal/config/identity/openid/jwt_test.go: `t.Run("", func(t *testing.T) {
			claims := map[string]interface{}{}
			claims["exp"] = testCase.exp
			err := updateClaimsExpiry(testCase.dsecs, claims)
			if err != nil && !testCase.expectedFailure {
				t.Errorf("Expected success, got failure %s", err)
			}
			if err == nil && testCase.expectedFailure {
				t.Error("Expected failure, got success")
			}
		})`
$DIR/internal/config/identity/openid/jwt_test.go: `claims["exp"] = testCase.exp`
$DIR/internal/config/identity/openid/jwt_test.go: `fmt.Println(token)`
$DIR/internal/config/identity/openid/jwt_test.go: `pubKeys.add("76b95ae5-33ef-4283-97b7-d2a85dc2d8f4", []byte("WNGvKVyyNmXq0TraSvjaDN9CtpFgx35IXtGEffMCPR0"))`
$DIR/internal/config/identity/openid/jwt_test.go: `provider.JWKS.URL = u1`
$DIR/internal/config/identity/openid/jwt_test.go: `provider.JWKS.URL = u1`
$DIR/internal/config/identity/openid/jwt_test.go: `claimsMap.SetExpiry(time.Now().Add(time.Minute))`
$DIR/internal/config/identity/openid/jwt_test.go: `claimsMap.SetAccessKey("test-access")`
$DIR/internal/config/identity/openid/jwt_test.go: `testKvs.Set(Vendor, "keycloak")`
$DIR/internal/config/identity/openid/jwt_test.go: `testKvs.Set(KeyCloakRealm, "TestRealm")`
$DIR/internal/config/identity/openid/jwt_test.go: `testKvs.Set(KeyCloakAdminURL, "http://keycloak.test/auth/admin")`
$DIR/internal/config/identity/openid/jwt_test.go: `.Number("1574812326")`
$DIR/internal/config/identity/openid/jwt_test.go: `.Duration(3)`
$DIR/internal/config/identity/openid/jwt_test.go: `.Run("", func(t *testing.T) {
			claims := map[string]interface{}{}
			claims["exp"] = testCase.exp
			err := updateClaimsExpiry(testCase.dsecs, claims)
			if err != nil && !testCase.expectedFailure {
				t.Errorf("Expected success, got failure %s", err)
			}
			if err == nil && testCase.expectedFailure {
				t.Error("Expected failure, got success")
			}
		})`
$DIR/internal/config/identity/openid/jwt_test.go: `.SigningMethodHS256.Alg()`
$DIR/internal/config/identity/openid/jwt_test.go: `.SignedString([]byte("WNGvKVyyNmXq0TraSvjaDN9CtpFgx35IXtGEffMCPR0"))`
$DIR/internal/config/identity/openid/jwt_test.go: `.Println(token)`
$DIR/internal/config/identity/openid/jwt_test.go: `.ParseHTTPURL(server.URL)`
$DIR/internal/config/identity/openid/jwt_test.go: `.add("76b95ae5-33ef-4283-97b7-d2a85dc2d8f4", []byte("WNGvKVyyNmXq0TraSvjaDN9CtpFgx35IXtGEffMCPR0"))`
$DIR/internal/config/identity/openid/jwt_test.go: `.Validate(context.Background(), DummyRoleARN, token, "", "", claims)`
$DIR/internal/config/identity/openid/jwt_test.go: `.Background()`
$DIR/internal/config/identity/openid/jwt_test.go: `.parseAndAdd(bytes.NewBuffer([]byte(jsonkey)))`
$DIR/internal/config/identity/openid/jwt_test.go: `.NewBuffer([]byte(jsonkey))`
$DIR/internal/config/identity/openid/jwt_test.go: `.ParseHTTPURL("http://127.0.0.1:8443")`
$DIR/internal/config/identity/openid/jwt_test.go: `.Parse("http://127.0.0.1:8443/?Token=invalid")`
$DIR/internal/config/identity/openid/jwt_test.go: `.Validate(context.Background(), DummyRoleARN, u.Query().Get("Token"), "", "", claims)`
$DIR/internal/config/identity/openid/jwt_test.go: `.Background()`
$DIR/internal/config/identity/openid/jwt_test.go: `.Query()`
$DIR/internal/config/identity/openid/jwt_test.go: `.Get("Token")`
$DIR/internal/config/identity/openid/jwt_test.go: `.Duration(60)`
$DIR/internal/config/identity/openid/jwt_test.go: `.Duration(901)`
$DIR/internal/config/identity/openid/jwt_test.go: `.Parse(testCase.reqURL)`
$DIR/internal/config/identity/openid/jwt_test.go: `.Query()`
$DIR/internal/config/identity/openid/jwt_test.go: `.Get("DurationSeconds")`
$DIR/internal/config/identity/openid/jwt_test.go: `.StdEncoding.DecodeString("NTNv7j0TuYARvmNMmWXo6fKvM4o6nv/aUi9ryX38ZH+L1bkrnD1ObOQ8JAUmHCBq7Iy7otZcyAagBLHVKvvYaIpmMuxmARQ97jUVG16Jkpkp1wXOPsrF9zwew6TpczyHkHgX5EuLg2MeBuiT/qJACs1J0apruOOJCg/gOtkjB4c=")`
$DIR/internal/config/identity/openid/jwt_test.go: `.NewMapClaims()`
$DIR/internal/config/identity/openid/jwt_test.go: `.SetExpiry(time.Now().Add(time.Minute))`
$DIR/internal/config/identity/openid/jwt_test.go: `.Now()`
$DIR/internal/config/identity/openid/jwt_test.go: `.Add(time.Minute)`
$DIR/internal/config/identity/openid/jwt_test.go: `.SetAccessKey("test-access")`
$DIR/internal/config/identity/openid/jwt_test.go: `.NewWithClaims(jwtgo.SigningMethodHS256, claimsMap)`
$DIR/internal/config/identity/openid/jwt_test.go: `.SignedString(signKey)`
$DIR/internal/config/identity/openid/jwt_test.go: `.ParseWithClaims(tokenString, claimsMap, func(*jwtm.MapClaims) ([]byte, error) {
		return signKey, nil
	})`
$DIR/internal/config/identity/openid/jwt_test.go: `.Set(Vendor, "keycloak")`
$DIR/internal/config/identity/openid/jwt_test.go: `.Set(KeyCloakRealm, "TestRealm")`
$DIR/internal/config/identity/openid/jwt_test.go: `.Set(KeyCloakAdminURL, "http://keycloak.test/auth/admin")`
$DIR/internal/config/identity/openid/jwt_test.go: `.Get(param)`
$DIR/internal/config/identity/openid/jwt_test.go: `.initializeProvider(cfgGet, http.DefaultTransport)`
$DIR/internal/config/lambda/event/arn_test.go: `.arn.String()`
$DIR/internal/config/lambda/event/targetid_test.go: `.tid.String()`
$DIR/internal/config/lambda/event/targetid_test.go: `.tid.ToARN(testCase.region)`
$DIR/internal/config/lambda/event/targetid_test.go: `.tid.MarshalJSON()`
$DIR/internal/config/lambda/event/targetid_test.go: `.DeepEqual(data, testCase.expectedData)`
$DIR/internal/config/lambda/event/targetid_test.go: `.UnmarshalJSON(testCase.data)`
$DIR/internal/config/lambda/event/targetidset_test.go: `result.add(testCase.targetIDToAdd)`
$DIR/internal/config/lambda/event/targetidset_test.go: `.set.Clone()`
$DIR/internal/config/lambda/event/targetidset_test.go: `.DeepEqual(result, testCase.set)`
$DIR/internal/config/lambda/event/targetidset_test.go: `.add(testCase.targetIDToAdd)`
$DIR/internal/config/lambda/event/targetidset_test.go: `.DeepEqual(result, testCase.set)`
$DIR/internal/config/lambda/event/targetidset_test.go: `.set.Union(testCase.setToAdd)`
$DIR/internal/config/lambda/event/targetidset_test.go: `.DeepEqual(testCase.expectedResult, result)`
$DIR/internal/config/lambda/event/targetidset_test.go: `.set.Difference(testCase.setToRemove)`
$DIR/internal/config/lambda/event/targetidset_test.go: `.DeepEqual(testCase.expectedResult, result)`
$DIR/internal/config/lambda/event/targetidset_test.go: `.DeepEqual(testCase.expectedResult, result)`
$DIR/internal/config/storageclass/storage-class_test.go: `scfg.RRS.Parity = 7`
$DIR/internal/config/storageclass/storage-class_test.go: `scfg.Standard.Parity = 6`
$DIR/internal/config/storageclass/storage-class_test.go: `scfg.Standard.Parity = 7`
$DIR/internal/config/storageclass/storage-class_test.go: `.New("Unsupported scheme AB. Supported scheme is EC")`
$DIR/internal/config/storageclass/storage-class_test.go: `.New("Too many sections in EC:4:5")`
$DIR/internal/config/storageclass/storage-class_test.go: `.New(`strconv.Atoi: parsing "A": invalid syntax`)`
$DIR/internal/config/storageclass/storage-class_test.go: `.New("Too few sections in AB")`
$DIR/internal/config/storageclass/storage-class_test.go: `.DeepEqual(gotSc, tt.wantSc)`
$DIR/internal/config/storageclass/storage-class_test.go: `.GetParityForSC(tt.sc)`
$DIR/internal/crypto/header_test.go: `got = got && S3KMS.IsRequested(test.Header)`
$DIR/internal/crypto/header_test.go: `got = got && S3.IsRequested(test.Header)`
$DIR/internal/crypto/header_test.go: `got = got && SSEC.IsRequested(test.Header)`
$DIR/internal/crypto/header_test.go: `sort.Strings(v)`
$DIR/internal/crypto/header_test.go: `sort.Strings(u)`
$DIR/internal/crypto/header_test.go: `metadata[k] = ""`
$DIR/internal/crypto/header_test.go: `RemoveSensitiveHeaders(test.Header)`
$DIR/internal/crypto/header_test.go: `RemoveSensitiveEntries(metadata)`
$DIR/internal/crypto/header_test.go: `.IsRequested(test.Header)`
$DIR/internal/crypto/header_test.go: `.IsRequested(test.Header)`
$DIR/internal/crypto/header_test.go: `.IsRequested(test.Header)`
$DIR/internal/crypto/header_test.go: `.IsRequested(test.Header)`
$DIR/internal/crypto/header_test.go: `.ParseHTTP(test.Header)`
$DIR/internal/crypto/header_test.go: `.IsRequested(test.Header)`
$DIR/internal/crypto/header_test.go: `.ParseHTTP(test.Header)`
$DIR/internal/crypto/header_test.go: `.IsRequested(test.Header)`
$DIR/internal/crypto/header_test.go: `.IsRequested(test.Header)`
$DIR/internal/crypto/header_test.go: `.ParseHTTP(test.Header)`
$DIR/internal/crypto/header_test.go: `.ParseHTTP(test.Header)`
$DIR/internal/crypto/header_test.go: `.Strings(v)`
$DIR/internal/crypto/header_test.go: `.Strings(u)`
$DIR/internal/crypto/key_test.go: `logger.DisableErrorLog = l`
$DIR/internal/crypto/key_test.go: `logger.DisableErrorLog = true`
$DIR/internal/crypto/key_test.go: `func() {
			defer recoverTest(i, test.ShouldPass, t)
			key := GenerateKey(test.ExtKey[:], test.Random)
			if [32]byte(key) == [32]byte{} {
				t.Errorf("Test %d: generated key is zero key", i) // check that we generate random and unique key
			}
		}()`
$DIR/internal/crypto/key_test.go: `logger.DisableErrorLog = l`
$DIR/internal/crypto/key_test.go: `logger.DisableErrorLog = true`
$DIR/internal/crypto/key_test.go: `func() {
			defer recoverTest(i, test.ShouldPass, t)
			iv := GenerateIV(test.Random)
			if iv == [32]byte{} {
				t.Errorf("Test %d: generated IV is zero IV", i) // check that we generate random and unique IV
			}
		}()`
$DIR/internal/crypto/key_test.go: `sealedKey.Algorithm = InsecureSealAlgorithm`
$DIR/internal/crypto/key_test.go: `key[i] = byte(i)`
$DIR/internal/crypto/key_test.go: `.Seal(test.SealExtKey[:], test.SealIV, test.SealDomain, test.SealBucket, test.SealObject)`
$DIR/internal/crypto/key_test.go: `.Unseal(test.UnsealExtKey[:], sealedKey, test.UnsealDomain, test.UnsealBucket, test.UnsealObject)`
$DIR/internal/crypto/key_test.go: `.Seal(extKey[:], iv, "SSE-S3", "bucket", "object")`
$DIR/internal/crypto/key_test.go: `.Unseal(extKey[:], sealedKey, "SSE-S3", "bucket", "object")`
$DIR/internal/crypto/key_test.go: `.DecodeString(test.PartKey)`
$DIR/internal/crypto/key_test.go: `.DerivePartKey(test.PartID)`
$DIR/internal/crypto/key_test.go: `.Equal(partKey[:], expectedPartKey)`
$DIR/internal/crypto/key_test.go: `.DecodeString(etag)`
$DIR/internal/crypto/key_test.go: `.SealETag(tag)`
$DIR/internal/crypto/key_test.go: `.UnsealETag(sealedETag)`
$DIR/internal/crypto/key_test.go: `.Equal(unsealedETag, tag)`
$DIR/internal/crypto/metadata_test.go: `logger.DisableErrorLog = l`
$DIR/internal/crypto/metadata_test.go: `logger.DisableErrorLog = true`
$DIR/internal/crypto/metadata_test.go: `logger.DisableErrorLog = l`
$DIR/internal/crypto/metadata_test.go: `logger.DisableErrorLog = true`
$DIR/internal/crypto/metadata_test.go: `RemoveInternalEntries(test.Metadata)`
$DIR/internal/crypto/metadata_test.go: `.IsEncrypted(test.Metadata)`
$DIR/internal/crypto/metadata_test.go: `.IsEncrypted(test.Metadata)`
$DIR/internal/crypto/metadata_test.go: `.ParseMetadata(test.Metadata)`
$DIR/internal/crypto/metadata_test.go: `.Equal(dataKey, test.DataKey)`
$DIR/internal/crypto/metadata_test.go: `.Equal(sealedKey.Key[:], test.SealedKey.Key[:])`
$DIR/internal/crypto/metadata_test.go: `.Equal(sealedKey.IV[:], test.SealedKey.IV[:])`
$DIR/internal/crypto/metadata_test.go: `.ParseMetadata(test.Metadata)`
$DIR/internal/crypto/metadata_test.go: `.Equal(sealedKey.Key[:], test.SealedKey.Key[:])`
$DIR/internal/crypto/metadata_test.go: `.Equal(sealedKey.IV[:], test.SealedKey.IV[:])`
$DIR/internal/crypto/metadata_test.go: `.CreateMetadata(nil, test.KeyID, test.SealedDataKey, test.SealedKey)`
$DIR/internal/crypto/metadata_test.go: `.ParseMetadata(metadata)`
$DIR/internal/crypto/metadata_test.go: `.Equal(kmsKey, test.SealedDataKey)`
$DIR/internal/crypto/metadata_test.go: `.Equal(sealedKey.IV[:], test.SealedKey.IV[:])`
$DIR/internal/crypto/metadata_test.go: `.Equal(sealedKey.Key[:], test.SealedKey.Key[:])`
$DIR/internal/crypto/metadata_test.go: `.CreateMetadata(nil, "", []byte{}, SealedKey{Algorithm: InsecureSealAlgorithm})`
$DIR/internal/crypto/metadata_test.go: `.CreateMetadata(nil, test.SealedKey)`
$DIR/internal/crypto/metadata_test.go: `.ParseMetadata(metadata)`
$DIR/internal/crypto/metadata_test.go: `.Equal(sealedKey.IV[:], test.SealedKey.IV[:])`
$DIR/internal/crypto/metadata_test.go: `.Equal(sealedKey.Key[:], test.SealedKey.Key[:])`
$DIR/internal/crypto/metadata_test.go: `.CreateMetadata(nil, SealedKey{Algorithm: InsecureSealAlgorithm})`
$DIR/internal/crypto/metadata_test.go: `.DecodeString(test.ETag)`
$DIR/internal/crypto/sse_test.go: `.String()`
$DIR/internal/crypto/sse_test.go: `.String()`
$DIR/internal/crypto/sse_test.go: `.UnsealObjectKey(test.Headers, test.Metadata, test.Bucket, test.Object)`
$DIR/internal/crypto/sse_test.go: `.UnsealObjectKey(test.Headers, test.Metadata, test.Bucket, test.Object)`
$DIR/internal/deadlineconn/deadlineconn_test.go: `wg.Add(1)`
$DIR/internal/deadlineconn/deadlineconn_test.go: `deadlineconn.WithReadDeadline(time.Second)`
$DIR/internal/deadlineconn/deadlineconn_test.go: `deadlineconn.WithWriteDeadline(time.Second)`
$DIR/internal/deadlineconn/deadlineconn_test.go: `_, terr = deadlineconn.Read(b)`
$DIR/internal/deadlineconn/deadlineconn_test.go: `time.Sleep(3 * time.Second)`
$DIR/internal/deadlineconn/deadlineconn_test.go: `_, terr = deadlineconn.Read(b)`
$DIR/internal/deadlineconn/deadlineconn_test.go: `received = string(b)`
$DIR/internal/deadlineconn/deadlineconn_test.go: `_, terr = io.WriteString(deadlineconn, "messages received\n")`
$DIR/internal/deadlineconn/deadlineconn_test.go: `_, err = io.WriteString(c, "message one\n")`
$DIR/internal/deadlineconn/deadlineconn_test.go: `_, err = io.WriteString(c, "message two\n")`
$DIR/internal/deadlineconn/deadlineconn_test.go: `.Listen("tcp", "localhost:0")`
$DIR/internal/deadlineconn/deadlineconn_test.go: `.Addr()`
$DIR/internal/deadlineconn/deadlineconn_test.go: `.String()`
$DIR/internal/deadlineconn/deadlineconn_test.go: `.Add(1)`
$DIR/internal/deadlineconn/deadlineconn_test.go: `.Done()`
$DIR/internal/deadlineconn/deadlineconn_test.go: `.AcceptTCP()`
$DIR/internal/deadlineconn/deadlineconn_test.go: `.WithReadDeadline(time.Second)`
$DIR/internal/deadlineconn/deadlineconn_test.go: `.WithWriteDeadline(time.Second)`
$DIR/internal/deadlineconn/deadlineconn_test.go: `.Read(b)`
$DIR/internal/deadlineconn/deadlineconn_test.go: `.Sleep(3 * time.Second)`
$DIR/internal/deadlineconn/deadlineconn_test.go: `.Read(b)`
$DIR/internal/deadlineconn/deadlineconn_test.go: `.WriteString(deadlineconn, "messages received\n")`
$DIR/internal/deadlineconn/deadlineconn_test.go: `.Dial("tcp", serverAddr)`
$DIR/internal/deadlineconn/deadlineconn_test.go: `.WriteString(c, "message one\n")`
$DIR/internal/deadlineconn/deadlineconn_test.go: `.WriteString(c, "message two\n")`
$DIR/internal/deadlineconn/deadlineconn_test.go: `.NewReader(c)`
$DIR/internal/deadlineconn/deadlineconn_test.go: `.ReadString('\n')`
$DIR/internal/disk/disk_test.go: `.GetInfo(t.TempDir(), true)`
$DIR/internal/disk/disk_test.go: `.TempDir()`
$DIR/internal/disk/stat_test.go: `t.Run("", func(t *testing.T) {
			tmpfile, err := os.CreateTemp("", "testfile")
			if err != nil {
				t.Error(err)
			}
			tmpfile.WriteString(testCase.stat)
			tmpfile.Sync()
			tmpfile.Close()

			iostats, err := readDriveStats(tmpfile.Name())
			if err != nil && !testCase.expectErr {
				t.Fatalf("unexpected err; %v", err)
			}
			if testCase.expectErr && err == nil {
				t.Fatal("expected to fail but err is nil")
			}
			if !reflect.DeepEqual(iostats, testCase.expectedIOStats) {
				t.Fatalf("expected iostats: %v but got %v", testCase.expectedIOStats, iostats)
			}
		})`
$DIR/internal/disk/stat_test.go: `tmpfile.WriteString(testCase.stat)`
$DIR/internal/disk/stat_test.go: `tmpfile.Sync()`
$DIR/internal/disk/stat_test.go: `.Run("", func(t *testing.T) {
			tmpfile, err := os.CreateTemp("", "testfile")
			if err != nil {
				t.Error(err)
			}
			tmpfile.WriteString(testCase.stat)
			tmpfile.Sync()
			tmpfile.Close()

			iostats, err := readDriveStats(tmpfile.Name())
			if err != nil && !testCase.expectErr {
				t.Fatalf("unexpected err; %v", err)
			}
			if testCase.expectErr && err == nil {
				t.Fatal("expected to fail but err is nil")
			}
			if !reflect.DeepEqual(iostats, testCase.expectedIOStats) {
				t.Fatalf("expected iostats: %v but got %v", testCase.expectedIOStats, iostats)
			}
		})`
$DIR/internal/disk/stat_test.go: `.CreateTemp("", "testfile")`
$DIR/internal/disk/stat_test.go: `.WriteString(testCase.stat)`
$DIR/internal/disk/stat_test.go: `.Sync()`
$DIR/internal/disk/stat_test.go: `.Name()`
$DIR/internal/disk/stat_test.go: `.DeepEqual(iostats, testCase.expectedIOStats)`
$DIR/internal/dsync/drwmutex_test.go: `doTestParallelReaders(1, 4)`
$DIR/internal/dsync/drwmutex_test.go: `doTestParallelReaders(3, 4)`
$DIR/internal/dsync/drwmutex_test.go: `n = 5`
$DIR/internal/dsync/drwmutex_test.go: `hammerRWMutex(t, 1, 1, n)`
$DIR/internal/dsync/drwmutex_test.go: `hammerRWMutex(t, 1, 3, n)`
$DIR/internal/dsync/drwmutex_test.go: `hammerRWMutex(t, 1, 10, n)`
$DIR/internal/dsync/drwmutex_test.go: `hammerRWMutex(t, 4, 1, n)`
$DIR/internal/dsync/drwmutex_test.go: `hammerRWMutex(t, 4, 3, n)`
$DIR/internal/dsync/drwmutex_test.go: `hammerRWMutex(t, 4, 10, n)`
$DIR/internal/dsync/drwmutex_test.go: `hammerRWMutex(t, 10, 1, n)`
$DIR/internal/dsync/drwmutex_test.go: `hammerRWMutex(t, 10, 3, n)`
$DIR/internal/dsync/drwmutex_test.go: `hammerRWMutex(t, 10, 10, n)`
$DIR/internal/dsync/drwmutex_test.go: `mu.RUnlock(context.Background())`
$DIR/internal/dsync/drwmutex_test.go: `mu.RLock(id, source)`
$DIR/internal/dsync/drwmutex_test.go: `mu.Unlock(context.Background())`
$DIR/internal/dsync/drwmutex_test.go: `mu.Lock(id, source)`
$DIR/internal/dsync/drwmutex_test.go: `.GOMAXPROCS(runtime.GOMAXPROCS(-1))`
$DIR/internal/dsync/drwmutex_test.go: `.GOMAXPROCS(-1)`
$DIR/internal/dsync/drwmutex_test.go: `.GOMAXPROCS(runtime.GOMAXPROCS(-1))`
$DIR/internal/dsync/drwmutex_test.go: `.GOMAXPROCS(-1)`
$DIR/internal/dsync/drwmutex_test.go: `.Short()`
$DIR/internal/dsync/drwmutex_test.go: `.Background()`
$DIR/internal/dsync/drwmutex_test.go: `.RUnlock(context.Background())`
$DIR/internal/dsync/drwmutex_test.go: `.Background()`
$DIR/internal/dsync/drwmutex_test.go: `.RLock(id, source)`
$DIR/internal/dsync/drwmutex_test.go: `.Background()`
$DIR/internal/dsync/drwmutex_test.go: `.Background()`
$DIR/internal/dsync/drwmutex_test.go: `.Unlock(context.Background())`
$DIR/internal/dsync/drwmutex_test.go: `.Background()`
$DIR/internal/dsync/drwmutex_test.go: `.Lock(id, source)`
$DIR/internal/dsync/drwmutex_test.go: `.Background()`
$DIR/internal/dsync/dsync_test.go: `startLockServers()`
$DIR/internal/dsync/dsync_test.go: `clnts = append(clnts, newClient(nodes[i].URL))`
$DIR/internal/dsync/dsync_test.go: `stopLockServers()`
$DIR/internal/dsync/dsync_test.go: `dm.Lock(id, source)`
$DIR/internal/dsync/dsync_test.go: `time.Sleep(testDrwMutexRefreshCallTimeout)`
$DIR/internal/dsync/dsync_test.go: `dm.Lock(id, source)`
$DIR/internal/dsync/dsync_test.go: `time.Sleep(time.Duration(10+(rand.Float32()*50)) * time.Millisecond)`
$DIR/internal/dsync/dsync_test.go: `dm.Unlock(context.Background())`
$DIR/internal/dsync/dsync_test.go: `dm.Lock(id, source)`
$DIR/internal/dsync/dsync_test.go: `time.Sleep(time.Duration(10+(rand.Float32()*50)) * time.Millisecond)`
$DIR/internal/dsync/dsync_test.go: `dm.Unlock(context.Background())`
$DIR/internal/dsync/dsync_test.go: `dm.Lock(id, source)`
$DIR/internal/dsync/dsync_test.go: `time.Sleep(time.Duration(10+(rand.Float32()*50)) * time.Millisecond)`
$DIR/internal/dsync/dsync_test.go: `dm.Unlock(context.Background())`
$DIR/internal/dsync/dsync_test.go: `dm.Lock(id, source)`
$DIR/internal/dsync/dsync_test.go: `time.Sleep(time.Duration(10+(rand.Float32()*50)) * time.Millisecond)`
$DIR/internal/dsync/dsync_test.go: `dm.Unlock(context.Background())`
$DIR/internal/dsync/dsync_test.go: `dm.Lock(id, source)`
$DIR/internal/dsync/dsync_test.go: `time.Sleep(time.Duration(10+(rand.Float32()*50)) * time.Millisecond)`
$DIR/internal/dsync/dsync_test.go: `dm1st.Lock(id, source)`
$DIR/internal/dsync/dsync_test.go: `time.Sleep(5 * testDrwMutexAcquireTimeout)`
$DIR/internal/dsync/dsync_test.go: `dm1st.Unlock(context.Background())`
$DIR/internal/dsync/dsync_test.go: `dm2nd.Lock(id, source)`
$DIR/internal/dsync/dsync_test.go: `time.Sleep(testDrwMutexRefreshCallTimeout * 2)`
$DIR/internal/dsync/dsync_test.go: `dm1st.Lock(id, source)`
$DIR/internal/dsync/dsync_test.go: `time.Sleep(2 * testDrwMutexAcquireTimeout)`
$DIR/internal/dsync/dsync_test.go: `dm1st.Unlock(context.Background())`
$DIR/internal/dsync/dsync_test.go: `expect += 2 * testDrwMutexAcquireTimeout`
$DIR/internal/dsync/dsync_test.go: `wg.Add(2)`
$DIR/internal/dsync/dsync_test.go: `dm2nd.Lock(id, source)`
$DIR/internal/dsync/dsync_test.go: `time.Sleep(2 * testDrwMutexAcquireTimeout)`
$DIR/internal/dsync/dsync_test.go: `dm2nd.Unlock(context.Background())`
$DIR/internal/dsync/dsync_test.go: `dm3rd.Lock(id, source)`
$DIR/internal/dsync/dsync_test.go: `time.Sleep(testDrwMutexRefreshCallTimeout)`
$DIR/internal/dsync/dsync_test.go: `dm3rd.Unlock(context.Background())`
$DIR/internal/dsync/dsync_test.go: `expect += 2*testDrwMutexAcquireTimeout + testDrwMutexRefreshCallTimeout`
$DIR/internal/dsync/dsync_test.go: `dm3rd.Lock(id, source)`
$DIR/internal/dsync/dsync_test.go: `time.Sleep(2 * testDrwMutexAcquireTimeout)`
$DIR/internal/dsync/dsync_test.go: `dm3rd.Unlock(context.Background())`
$DIR/internal/dsync/dsync_test.go: `dm2nd.Lock(id, source)`
$DIR/internal/dsync/dsync_test.go: `time.Sleep(testDrwMutexRefreshCallTimeout)`
$DIR/internal/dsync/dsync_test.go: `dm2nd.Unlock(context.Background())`
$DIR/internal/dsync/dsync_test.go: `expect += 2*testDrwMutexAcquireTimeout + testDrwMutexRefreshCallTimeout`
$DIR/internal/dsync/dsync_test.go: `wg.Wait()`
$DIR/internal/dsync/dsync_test.go: `dm1.Lock(id, source)`
$DIR/internal/dsync/dsync_test.go: `dm2.Lock(id, source)`
$DIR/internal/dsync/dsync_test.go: `dm1.Unlock(context.Background())`
$DIR/internal/dsync/dsync_test.go: `dm.refreshInterval = testDrwMutexRefreshInterval`
$DIR/internal/dsync/dsync_test.go: `lockServers[i].setRefreshReply(false)`
$DIR/internal/dsync/dsync_test.go: `dm.refreshInterval = 500 * time.Millisecond`
$DIR/internal/dsync/dsync_test.go: `wg.Add(1)`
$DIR/internal/dsync/dsync_test.go: `cl()`
$DIR/internal/dsync/dsync_test.go: `wg.Done()`
$DIR/internal/dsync/dsync_test.go: `wg.Wait()`
$DIR/internal/dsync/dsync_test.go: `dm.refreshInterval = testDrwMutexUnlockCallTimeout`
$DIR/internal/dsync/dsync_test.go: `lockServers[i].setResponseDelay(5 * testDrwMutexUnlockCallTimeout)`
$DIR/internal/dsync/dsync_test.go: `dm.Unlock(ctx)`
$DIR/internal/dsync/dsync_test.go: `unlockReturned <- struct{}{}`
$DIR/internal/dsync/dsync_test.go: `loops = 5`
$DIR/internal/dsync/dsync_test.go: `go HammerMutex(m, loops, c)`
$DIR/internal/dsync/dsync_test.go: `<-c`
$DIR/internal/dsync/dsync_test.go: `.New()`
$DIR/internal/dsync/dsync_test.go: `.String()`
$DIR/internal/dsync/dsync_test.go: `.Run()`
$DIR/internal/dsync/dsync_test.go: `.Lock(id, source)`
$DIR/internal/dsync/dsync_test.go: `.Sleep(testDrwMutexRefreshCallTimeout)`
$DIR/internal/dsync/dsync_test.go: `.Background()`
$DIR/internal/dsync/dsync_test.go: `.Lock(id, source)`
$DIR/internal/dsync/dsync_test.go: `.Sleep(time.Duration(10+(rand.Float32()*50)) * time.Millisecond)`
$DIR/internal/dsync/dsync_test.go: `.Duration(10+(rand.Float32()*50))`
$DIR/internal/dsync/dsync_test.go: `.Float32()`
$DIR/internal/dsync/dsync_test.go: `.Unlock(context.Background())`
$DIR/internal/dsync/dsync_test.go: `.Background()`
$DIR/internal/dsync/dsync_test.go: `.Lock(id, source)`
$DIR/internal/dsync/dsync_test.go: `.Sleep(time.Duration(10+(rand.Float32()*50)) * time.Millisecond)`
$DIR/internal/dsync/dsync_test.go: `.Duration(10+(rand.Float32()*50))`
$DIR/internal/dsync/dsync_test.go: `.Float32()`
$DIR/internal/dsync/dsync_test.go: `.Unlock(context.Background())`
$DIR/internal/dsync/dsync_test.go: `.Background()`
$DIR/internal/dsync/dsync_test.go: `.Lock(id, source)`
$DIR/internal/dsync/dsync_test.go: `.Sleep(time.Duration(10+(rand.Float32()*50)) * time.Millisecond)`
$DIR/internal/dsync/dsync_test.go: `.Duration(10+(rand.Float32()*50))`
$DIR/internal/dsync/dsync_test.go: `.Float32()`
$DIR/internal/dsync/dsync_test.go: `.Unlock(context.Background())`
$DIR/internal/dsync/dsync_test.go: `.Background()`
$DIR/internal/dsync/dsync_test.go: `.Lock(id, source)`
$DIR/internal/dsync/dsync_test.go: `.Sleep(time.Duration(10+(rand.Float32()*50)) * time.Millisecond)`
$DIR/internal/dsync/dsync_test.go: `.Duration(10+(rand.Float32()*50))`
$DIR/internal/dsync/dsync_test.go: `.Float32()`
$DIR/internal/dsync/dsync_test.go: `.Unlock(context.Background())`
$DIR/internal/dsync/dsync_test.go: `.Background()`
$DIR/internal/dsync/dsync_test.go: `.Lock(id, source)`
$DIR/internal/dsync/dsync_test.go: `.Sleep(time.Duration(10+(rand.Float32()*50)) * time.Millisecond)`
$DIR/internal/dsync/dsync_test.go: `.Duration(10+(rand.Float32()*50))`
$DIR/internal/dsync/dsync_test.go: `.Float32()`
$DIR/internal/dsync/dsync_test.go: `.Background()`
$DIR/internal/dsync/dsync_test.go: `.Lock(id, source)`
$DIR/internal/dsync/dsync_test.go: `.Sleep(5 * testDrwMutexAcquireTimeout)`
$DIR/internal/dsync/dsync_test.go: `.Unlock(context.Background())`
$DIR/internal/dsync/dsync_test.go: `.Background()`
$DIR/internal/dsync/dsync_test.go: `.Lock(id, source)`
$DIR/internal/dsync/dsync_test.go: `.Sleep(testDrwMutexRefreshCallTimeout * 2)`
$DIR/internal/dsync/dsync_test.go: `.Background()`
$DIR/internal/dsync/dsync_test.go: `.Lock(id, source)`
$DIR/internal/dsync/dsync_test.go: `.Now()`
$DIR/internal/dsync/dsync_test.go: `.Sleep(2 * testDrwMutexAcquireTimeout)`
$DIR/internal/dsync/dsync_test.go: `.Unlock(context.Background())`
$DIR/internal/dsync/dsync_test.go: `.Background()`
$DIR/internal/dsync/dsync_test.go: `.Add(2)`
$DIR/internal/dsync/dsync_test.go: `.Done()`
$DIR/internal/dsync/dsync_test.go: `.Lock(id, source)`
$DIR/internal/dsync/dsync_test.go: `.Sleep(2 * testDrwMutexAcquireTimeout)`
$DIR/internal/dsync/dsync_test.go: `.Unlock(context.Background())`
$DIR/internal/dsync/dsync_test.go: `.Background()`
$DIR/internal/dsync/dsync_test.go: `.Lock(id, source)`
$DIR/internal/dsync/dsync_test.go: `.Sleep(testDrwMutexRefreshCallTimeout)`
$DIR/internal/dsync/dsync_test.go: `.Unlock(context.Background())`
$DIR/internal/dsync/dsync_test.go: `.Background()`
$DIR/internal/dsync/dsync_test.go: `.Done()`
$DIR/internal/dsync/dsync_test.go: `.Lock(id, source)`
$DIR/internal/dsync/dsync_test.go: `.Sleep(2 * testDrwMutexAcquireTimeout)`
$DIR/internal/dsync/dsync_test.go: `.Unlock(context.Background())`
$DIR/internal/dsync/dsync_test.go: `.Background()`
$DIR/internal/dsync/dsync_test.go: `.Lock(id, source)`
$DIR/internal/dsync/dsync_test.go: `.Sleep(testDrwMutexRefreshCallTimeout)`
$DIR/internal/dsync/dsync_test.go: `.Unlock(context.Background())`
$DIR/internal/dsync/dsync_test.go: `.Background()`
$DIR/internal/dsync/dsync_test.go: `.Wait()`
$DIR/internal/dsync/dsync_test.go: `.Since(started)`
$DIR/internal/dsync/dsync_test.go: `.Lock(id, source)`
$DIR/internal/dsync/dsync_test.go: `.Lock(id, source)`
$DIR/internal/dsync/dsync_test.go: `.Unlock(context.Background())`
$DIR/internal/dsync/dsync_test.go: `.Background()`
$DIR/internal/dsync/dsync_test.go: `.Background()`
$DIR/internal/dsync/dsync_test.go: `.Short()`
$DIR/internal/dsync/dsync_test.go: `.WithCancel(context.Background())`
$DIR/internal/dsync/dsync_test.go: `.Background()`
$DIR/internal/dsync/dsync_test.go: `.GetLock(ctx, cancel, id, source, Options{Timeout: 5 * time.Minute})`
$DIR/internal/dsync/dsync_test.go: `.NewTimer(testDrwMutexRefreshInterval * 2)`
$DIR/internal/dsync/dsync_test.go: `.Done()`
$DIR/internal/dsync/dsync_test.go: `.Background()`
$DIR/internal/dsync/dsync_test.go: `.Short()`
$DIR/internal/dsync/dsync_test.go: `.setRefreshReply(false)`
$DIR/internal/dsync/dsync_test.go: `.setRefreshReply(true)`
$DIR/internal/dsync/dsync_test.go: `.Add(1)`
$DIR/internal/dsync/dsync_test.go: `.WithCancel(context.Background())`
$DIR/internal/dsync/dsync_test.go: `.Background()`
$DIR/internal/dsync/dsync_test.go: `.Done()`
$DIR/internal/dsync/dsync_test.go: `.GetLock(ctx, cancel, id, source, Options{Timeout: 5 * time.Minute})`
$DIR/internal/dsync/dsync_test.go: `.Wait()`
$DIR/internal/dsync/dsync_test.go: `.Err()`
$DIR/internal/dsync/dsync_test.go: `.Background()`
$DIR/internal/dsync/dsync_test.go: `.Short()`
$DIR/internal/dsync/dsync_test.go: `.GetLock(context.Background(), nil, id, source, Options{Timeout: 5 * time.Minute})`
$DIR/internal/dsync/dsync_test.go: `.Background()`
$DIR/internal/dsync/dsync_test.go: `.setResponseDelay(5 * testDrwMutexUnlockCallTimeout)`
$DIR/internal/dsync/dsync_test.go: `.setResponseDelay(0)`
$DIR/internal/dsync/dsync_test.go: `.WithTimeout(context.Background(), 500*time.Millisecond)`
$DIR/internal/dsync/dsync_test.go: `.Background()`
$DIR/internal/dsync/dsync_test.go: `.Unlock(ctx)`
$DIR/internal/dsync/dsync_test.go: `.NewTimer(2 * testDrwMutexUnlockCallTimeout)`
$DIR/internal/dsync/dsync_test.go: `.Stop()`
$DIR/internal/dsync/dsync_test.go: `.Short()`
$DIR/internal/dsync/lock-args_gen_test.go: `left, err = msgp.Skip(bts)`
$DIR/internal/dsync/lock-args_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/internal/dsync/lock-args_gen_test.go: `buf.Reset()`
$DIR/internal/dsync/lock-args_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/internal/dsync/lock-args_gen_test.go: `err = msgp.NewReader(&buf).Skip()`
$DIR/internal/dsync/lock-args_gen_test.go: `left, err = msgp.Skip(bts)`
$DIR/internal/dsync/lock-args_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/internal/dsync/lock-args_gen_test.go: `buf.Reset()`
$DIR/internal/dsync/lock-args_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/internal/dsync/lock-args_gen_test.go: `err = msgp.NewReader(&buf).Skip()`
$DIR/internal/dsync/lock-args_gen_test.go: `.MarshalMsg(nil)`
$DIR/internal/dsync/lock-args_gen_test.go: `.UnmarshalMsg(bts)`
$DIR/internal/dsync/lock-args_gen_test.go: `.Encode(&buf, &v)`
$DIR/internal/dsync/lock-args_gen_test.go: `.Msgsize()`
$DIR/internal/dsync/lock-args_gen_test.go: `.Len()`
$DIR/internal/dsync/lock-args_gen_test.go: `.Decode(&buf, &vn)`
$DIR/internal/dsync/lock-args_gen_test.go: `.Reset()`
$DIR/internal/dsync/lock-args_gen_test.go: `.Encode(&buf, &v)`
$DIR/internal/dsync/lock-args_gen_test.go: `.MarshalMsg(nil)`
$DIR/internal/dsync/lock-args_gen_test.go: `.UnmarshalMsg(bts)`
$DIR/internal/dsync/lock-args_gen_test.go: `.Encode(&buf, &v)`
$DIR/internal/dsync/lock-args_gen_test.go: `.Msgsize()`
$DIR/internal/dsync/lock-args_gen_test.go: `.Len()`
$DIR/internal/dsync/lock-args_gen_test.go: `.Decode(&buf, &vn)`
$DIR/internal/dsync/lock-args_gen_test.go: `.Reset()`
$DIR/internal/dsync/lock-args_gen_test.go: `.Encode(&buf, &v)`
$DIR/internal/etag/etag_test.go: `.ETag.String()`
$DIR/internal/etag/etag_test.go: `.Background()`
$DIR/internal/etag/etag_test.go: `.NewReader(test.Content)`
$DIR/internal/etag/etag_test.go: `.Copy(io.Discard, reader)`
$DIR/internal/etag/etag_test.go: `.ETag()`
$DIR/internal/etag/etag_test.go: `.IsEncrypted()`
$DIR/internal/etag/etag_test.go: `.Format()`
$DIR/internal/etag/etag_test.go: `.String()`
$DIR/internal/event/arn_test.go: `.arn.String()`
$DIR/internal/event/arn_test.go: `.Marshal(testCase.arn)`
$DIR/internal/event/arn_test.go: `.DeepEqual(data, testCase.expectedData)`
$DIR/internal/event/arn_test.go: `.Unmarshal(testCase.data, &arn)`
$DIR/internal/event/config_test.go: `data = []byte(`
<QueueConfiguration>
   <Id>1</Id>
    <Filter>
        <S3Key>
            <FilterRule>
                <Name>prefix</Name>
                <Value>images/</Value>
            </FilterRule>
            <FilterRule>
                <Name>suffix</Name>
                <Value>jpg</Value>
            </FilterRule>
        </S3Key>
   </Filter>
   <Queue>arn:minio:sqs:us-east-1:1:webhook</Queue>
   <Event>s3:ObjectCreated:Put</Event>
</QueueConfiguration>`)`
$DIR/internal/event/config_test.go: `data = []byte(`
<QueueConfiguration>
   <Id>1</Id>
   <Filter></Filter>
   <Queue>arn:minio:sqs:eu-west-2:1:webhook</Queue>
   <Event>s3:ObjectAccessed:*</Event>
   <Event>s3:ObjectCreated:*</Event>
   <Event>s3:ObjectRemoved:*</Event>
</QueueConfiguration>`)`
$DIR/internal/event/config_test.go: `data = []byte(`
<QueueConfiguration>
   <Id>1</Id>
    <Filter>
        <S3Key>
            <FilterRule>
                <Name>prefix</Name>
                <Value>images/</Value>
            </FilterRule>
            <FilterRule>
                <Name>suffix</Name>
                <Value>jpg</Value>
            </FilterRule>
        </S3Key>
   </Filter>
   <Queue>arn:minio:sqs::1:webhook</Queue>
   <Event>s3:ObjectCreated:Put</Event>
</QueueConfiguration>`)`
$DIR/internal/event/config_test.go: `testCase.queue.SetRegion(testCase.region)`
$DIR/internal/event/config_test.go: `data = []byte(`
<QueueConfiguration>
   <Id>1</Id>
    <Filter>
        <S3Key>
            <FilterRule>
                <Name>prefix</Name>
                <Value>images/</Value>
            </FilterRule>
            <FilterRule>
                <Name>suffix</Name>
                <Value>jpg</Value>
            </FilterRule>
        </S3Key>
   </Filter>
   <Queue>arn:minio:sqs:us-east-1:1:webhook</Queue>
   <Event>s3:ObjectCreated:Put</Event>
</QueueConfiguration>`)`
$DIR/internal/event/config_test.go: `data = []byte(`
<NotificationConfiguration  xmlns="http://s3.amazonaws.com/doc/2006-03-01/">
   <QueueConfiguration>
      <Id>1</Id>
       <Filter>
           <S3Key>
               <FilterRule>
                   <Name>prefix</Name>
                   <Value>images/</Value>
               </FilterRule>
               <FilterRule>
                   <Name>suffix</Name>
                   <Value>jpg</Value>
               </FilterRule>
           </S3Key>
      </Filter>
      <Queue>arn:minio:sqs:us-east-1:1:webhook</Queue>
      <Event>s3:ObjectCreated:Put</Event>
   </QueueConfiguration>
</NotificationConfiguration>
`)`
$DIR/internal/event/config_test.go: `data = []byte(`
<NotificationConfiguration  xmlns="http://s3.amazonaws.com/doc/2006-03-01/">
   <QueueConfiguration>
      <Id>1</Id>
      <Filter></Filter>
      <Queue>arn:minio:sqs:us-east-1:1:webhook</Queue>
      <Event>s3:ObjectAccessed:*</Event>
      <Event>s3:ObjectCreated:*</Event>
      <Event>s3:ObjectRemoved:*</Event>
   </QueueConfiguration>
   <QueueConfiguration>
      <Id>2</Id>
       <Filter>
           <S3Key>
               <FilterRule>
                   <Name>prefix</Name>
                   <Value>images/</Value>
               </FilterRule>
               <FilterRule>
                   <Name>suffix</Name>
                   <Value>jpg</Value>
               </FilterRule>
           </S3Key>
      </Filter>
      <Queue>arn:minio:sqs:us-east-1:1:webhook</Queue>
      <Event>s3:ObjectCreated:Put</Event>
   </QueueConfiguration>
</NotificationConfiguration>
`)`
$DIR/internal/event/config_test.go: `data = []byte(`
<NotificationConfiguration  xmlns="http://s3.amazonaws.com/doc/2006-03-01/">
   <QueueConfiguration>
      <Id>1</Id>
       <Filter>
           <S3Key>
               <FilterRule>
                   <Name>prefix</Name>
                   <Value>images/</Value>
               </FilterRule>
               <FilterRule>
                   <Name>suffix</Name>
                   <Value>jpg</Value>
               </FilterRule>
           </S3Key>
      </Filter>
      <Queue>arn:minio:sqs::1:webhook</Queue>
      <Event>s3:ObjectCreated:Put</Event>
   </QueueConfiguration>
</NotificationConfiguration>
`)`
$DIR/internal/event/config_test.go: `data = []byte(`
<NotificationConfiguration  xmlns="http://s3.amazonaws.com/doc/2006-03-01/">
   <QueueConfiguration>
      <Id>1</Id>
      <Filter></Filter>
      <Queue>arn:minio:sqs:us-east-1:1:webhook</Queue>
      <Event>s3:ObjectAccessed:*</Event>
      <Event>s3:ObjectCreated:*</Event>
      <Event>s3:ObjectRemoved:*</Event>
   </QueueConfiguration>
   <QueueConfiguration>
      <Id>2</Id>
       <Filter>
           <S3Key>
               <FilterRule>
                   <Name>prefix</Name>
                   <Value>images/</Value>
               </FilterRule>
               <FilterRule>
                   <Name>suffix</Name>
                   <Value>jpg</Value>
               </FilterRule>
           </S3Key>
      </Filter>
      <Queue>arn:minio:sqs:us-east-1:2:amqp</Queue>
      <Event>s3:ObjectCreated:Put</Event>
   </QueueConfiguration>
</NotificationConfiguration>
`)`
$DIR/internal/event/config_test.go: `testCase.config.SetRegion(testCase.region)`
$DIR/internal/event/config_test.go: `result = append(result, queue.ARN)`
$DIR/internal/event/config_test.go: `data = []byte(`
<NotificationConfiguration  xmlns="http://s3.amazonaws.com/doc/2006-03-01/">
   <QueueConfiguration>
      <Id>1</Id>
       <Filter>
           <S3Key>
               <FilterRule>
                   <Name>prefix</Name>
                   <Value>images/</Value>
               </FilterRule>
               <FilterRule>
                   <Name>suffix</Name>
                   <Value>jpg</Value>
               </FilterRule>
           </S3Key>
      </Filter>
      <Queue>arn:minio:sqs::1:webhook</Queue>
      <Event>s3:ObjectCreated:Put</Event>
   </QueueConfiguration>
</NotificationConfiguration>
`)`
$DIR/internal/event/config_test.go: `data = []byte(`
<NotificationConfiguration  xmlns="http://s3.amazonaws.com/doc/2006-03-01/">
   <QueueConfiguration>
      <Id>1</Id>
      <Filter></Filter>
      <Queue>arn:minio:sqs:us-east-1:1:webhook</Queue>
      <Event>s3:ObjectAccessed:*</Event>
      <Event>s3:ObjectCreated:*</Event>
      <Event>s3:ObjectRemoved:*</Event>
   </QueueConfiguration>
   <QueueConfiguration>
      <Id>2</Id>
       <Filter>
           <S3Key>
               <FilterRule>
                   <Name>prefix</Name>
                   <Value>images/</Value>
               </FilterRule>
               <FilterRule>
                   <Name>suffix</Name>
                   <Value>jpg</Value>
               </FilterRule>
           </S3Key>
      </Filter>
      <Queue>arn:minio:sqs:us-east-1:2:amqp</Queue>
      <Event>s3:ObjectCreated:Put</Event>
   </QueueConfiguration>
</NotificationConfiguration>
`)`
$DIR/internal/event/config_test.go: `rulesMapCase3.add([]Name{ObjectCreatedPut}, "images/*jpg", TargetID{"2", "amqp"})`
$DIR/internal/event/config_test.go: `.Unmarshal(testCase.data, result)`
$DIR/internal/event/config_test.go: `.DeepEqual(result, testCase.expectedResult)`
$DIR/internal/event/config_test.go: `.Unmarshal(testCase.data, result)`
$DIR/internal/event/config_test.go: `.DeepEqual(result, testCase.expectedResult)`
$DIR/internal/event/config_test.go: `.filterRuleList.Pattern()`
$DIR/internal/event/config_test.go: `.Unmarshal(testCase.data, &Queue{})`
$DIR/internal/event/config_test.go: `.Unmarshal(data, queue1)`
$DIR/internal/event/config_test.go: `.Unmarshal(data, queue2)`
$DIR/internal/event/config_test.go: `.Unmarshal(data, queue3)`
$DIR/internal/event/config_test.go: `.Background()`
$DIR/internal/event/config_test.go: `.Background()`
$DIR/internal/event/config_test.go: `.Add(&ExampleTarget{TargetID{"1", "webhook"}, false, false})`
$DIR/internal/event/config_test.go: `.queue.Validate(testCase.region, testCase.targetList)`
$DIR/internal/event/config_test.go: `.Unmarshal(data, queue1)`
$DIR/internal/event/config_test.go: `.Unmarshal(data, queue2)`
$DIR/internal/event/config_test.go: `.queue.SetRegion(testCase.region)`
$DIR/internal/event/config_test.go: `.DeepEqual(result, testCase.expectedResult)`
$DIR/internal/event/config_test.go: `.Unmarshal(data, queueCase1)`
$DIR/internal/event/config_test.go: `.Unmarshal(data, queueCase2)`
$DIR/internal/event/config_test.go: `.queue.ToRulesMap()`
$DIR/internal/event/config_test.go: `.DeepEqual(result, testCase.expectedResult)`
$DIR/internal/event/config_test.go: `.Unmarshal(testCase.data, &Config{})`
$DIR/internal/event/config_test.go: `.Unmarshal(data, config1)`
$DIR/internal/event/config_test.go: `.Unmarshal(data, config2)`
$DIR/internal/event/config_test.go: `.Unmarshal(data, config3)`
$DIR/internal/event/config_test.go: `.Background()`
$DIR/internal/event/config_test.go: `.Background()`
$DIR/internal/event/config_test.go: `.Add(&ExampleTarget{TargetID{"1", "webhook"}, false, false})`
$DIR/internal/event/config_test.go: `.config.Validate(testCase.region, testCase.targetList)`
$DIR/internal/event/config_test.go: `.Unmarshal(data, config1)`
$DIR/internal/event/config_test.go: `.Unmarshal(data, config2)`
$DIR/internal/event/config_test.go: `.Unmarshal(data, config3)`
$DIR/internal/event/config_test.go: `.config.SetRegion(testCase.region)`
$DIR/internal/event/config_test.go: `.DeepEqual(result, testCase.expectedResult)`
$DIR/internal/event/config_test.go: `.Unmarshal(data, config1)`
$DIR/internal/event/config_test.go: `.Unmarshal(data, config2)`
$DIR/internal/event/config_test.go: `.Unmarshal(data, config3)`
$DIR/internal/event/config_test.go: `.add([]Name{ObjectCreatedPut}, "images/*jpg", TargetID{"2", "amqp"})`
$DIR/internal/event/config_test.go: `.config.ToRulesMap()`
$DIR/internal/event/config_test.go: `.DeepEqual(result, testCase.expectedResult)`
$DIR/internal/event/config_test.go: `.NewReader(`
<NotificationConfiguration  xmlns="http://s3.amazonaws.com/doc/2006-03-01/">
   <QueueConfiguration>
      <Id>1</Id>
      <Filter></Filter>
      <Queue>arn:minio:sqs:us-east-1:1:webhook</Queue>
      <Event>s3:ObjectAccessed:*</Event>
      <Event>s3:ObjectCreated:*</Event>
      <Event>s3:ObjectRemoved:*</Event>
   </QueueConfiguration>
</NotificationConfiguration>
`)`
$DIR/internal/event/config_test.go: `.NewReader(`
<NotificationConfiguration  xmlns="http://s3.amazonaws.com/doc/2006-03-01/">
   <QueueConfiguration>
      <Id>1</Id>
       <Filter>
           <S3Key>
               <FilterRule>
                   <Name>prefix</Name>
                   <Value>images/</Value>
               </FilterRule>
               <FilterRule>
                   <Name>suffix</Name>
                   <Value>jpg</Value>
               </FilterRule>
           </S3Key>
      </Filter>
      <Queue>arn:minio:sqs:us-east-1:1:webhook</Queue>
      <Event>s3:ObjectCreated:Put</Event>
   </QueueConfiguration>
</NotificationConfiguration>
`)`
$DIR/internal/event/config_test.go: `.NewReader(`
<NotificationConfiguration  xmlns="http://s3.amazonaws.com/doc/2006-03-01/">
   <QueueConfiguration>
      <Id>1</Id>
      <Filter></Filter>
      <Queue>arn:minio:sqs:us-east-1:1:webhook</Queue>
      <Event>s3:ObjectAccessed:*</Event>
      <Event>s3:ObjectCreated:*</Event>
      <Event>s3:ObjectRemoved:*</Event>
   </QueueConfiguration>
   <QueueConfiguration>
      <Id>2</Id>
       <Filter>
           <S3Key>
               <FilterRule>
                   <Name>prefix</Name>
                   <Value>images/</Value>
               </FilterRule>
               <FilterRule>
                   <Name>suffix</Name>
                   <Value>jpg</Value>
               </FilterRule>
           </S3Key>
      </Filter>
      <Queue>arn:minio:sqs:us-east-1:1:webhook</Queue>
      <Event>s3:ObjectCreated:Put</Event>
   </QueueConfiguration>
</NotificationConfiguration>
`)`
$DIR/internal/event/config_test.go: `.NewReader(`
<NotificationConfiguration  xmlns="http://s3.amazonaws.com/doc/2006-03-01/">
   <QueueConfiguration>
      <Id>1</Id>
      <Filter></Filter>
      <Queue>arn:minio:sqs:us-east-1:1:webhook</Queue>
      <Event>s3:ObjectAccessed:*</Event>
      <Event>s3:ObjectCreated:*</Event>
      <Event>s3:ObjectRemoved:*</Event>
   </QueueConfiguration>
   <CloudFunctionConfiguration>
      <Id>1</Id>
      <Filter>
             <S3Key>
                 <FilterRule>
                     <Name>suffix</Name>
                     <Value>.jpg</Value>
                 </FilterRule>
             </S3Key>
      </Filter>
      <Cloudcode>arn:aws:lambda:us-west-2:444455556666:cloud-function-A</Cloudcode>
      <Event>s3:ObjectCreated:Put</Event>
   </CloudFunctionConfiguration>
   <TopicConfiguration>
      <Topic>arn:aws:sns:us-west-2:444455556666:sns-notification-one</Topic>
      <Event>s3:ObjectCreated:*</Event>
  </TopicConfiguration>
</NotificationConfiguration>
`)`
$DIR/internal/event/config_test.go: `.Background()`
$DIR/internal/event/config_test.go: `.Background()`
$DIR/internal/event/config_test.go: `.Add(&ExampleTarget{TargetID{"1", "webhook"}, false, false})`
$DIR/internal/event/config_test.go: `.reader.Seek(0, 0)`
$DIR/internal/event/name_test.go: `.name.Expand()`
$DIR/internal/event/name_test.go: `.DeepEqual(result, testCase.expectedResult)`
$DIR/internal/event/name_test.go: `.name.String()`
$DIR/internal/event/name_test.go: `.Marshal(testCase.name)`
$DIR/internal/event/name_test.go: `.DeepEqual(data, testCase.expectedData)`
$DIR/internal/event/name_test.go: `.Unmarshal(testCase.data, &name)`
$DIR/internal/event/name_test.go: `.DeepEqual(name, testCase.expectedName)`
$DIR/internal/event/name_test.go: `.Marshal(testCase.name)`
$DIR/internal/event/name_test.go: `.DeepEqual(data, testCase.expectedData)`
$DIR/internal/event/name_test.go: `.Unmarshal(testCase.data, &name)`
$DIR/internal/event/name_test.go: `.DeepEqual(name, testCase.expectedName)`
$DIR/internal/event/name_test.go: `.DeepEqual(name, testCase.expectedName)`
$DIR/internal/event/rules_test.go: `rulesCase2.Add(NewPattern("2010*", ""), TargetID{"1", "webhook"})`
$DIR/internal/event/rules_test.go: `rulesCase3.Add(NewPattern("2010*", ""), TargetID{"1", "webhook"})`
$DIR/internal/event/rules_test.go: `rulesCase4.Add(NewPattern("", "*.jpg"), TargetID{"1", "webhook"})`
$DIR/internal/event/rules_test.go: `rulesCase6.Add(NewPattern("", "*.jpg"), TargetID{"1", "webhook"})`
$DIR/internal/event/rules_test.go: `rulesCase7.Add(NewPattern("", "*.jpg"), TargetID{"1", "webhook"})`
$DIR/internal/event/rules_test.go: `rulesCase8.Add(NewPattern("2010*", ""), TargetID{"1", "webhook"})`
$DIR/internal/event/rules_test.go: `testCase.rules.Add(testCase.pattern, testCase.targetID)`
$DIR/internal/event/rules_test.go: `rulesCase2.Add(NewPattern("*", "*"), TargetID{"1", "webhook"})`
$DIR/internal/event/rules_test.go: `rulesCase3.Add(NewPattern("2010*", ""), TargetID{"1", "webhook"})`
$DIR/internal/event/rules_test.go: `rulesCase3.Add(NewPattern("", "*.png"), TargetID{"2", "amqp"})`
$DIR/internal/event/rules_test.go: `rulesCase4.Add(NewPattern("2010*", ""), TargetID{"1", "webhook"})`
$DIR/internal/event/rules_test.go: `rulesCase2.Add(NewPattern("2010*", ""), TargetID{"1", "webhook"})`
$DIR/internal/event/rules_test.go: `rulesCase3.Add(NewPattern("", "*.jpg"), TargetID{"1", "webhook"})`
$DIR/internal/event/rules_test.go: `result.Add(NewPattern(testCase.prefix, ""), testCase.targetID)`
$DIR/internal/event/rules_test.go: `rules2Case2.Add(NewPattern("*", ""), TargetID{"1", "webhook"})`
$DIR/internal/event/rules_test.go: `expectedResultCase2.Add(NewPattern("*", ""), TargetID{"1", "webhook"})`
$DIR/internal/event/rules_test.go: `rulesCase3.Add(NewPattern("", "*"), TargetID{"1", "webhook"})`
$DIR/internal/event/rules_test.go: `expectedResultCase3.Add(NewPattern("", "*"), TargetID{"1", "webhook"})`
$DIR/internal/event/rules_test.go: `rulesCase4.Add(NewPattern("2010*", ""), TargetID{"1", "webhook"})`
$DIR/internal/event/rules_test.go: `rules2Case4.Add(NewPattern("2010*", ""), TargetID{"1", "webhook"})`
$DIR/internal/event/rules_test.go: `expectedResultCase4.Add(NewPattern("2010*", ""), TargetID{"1", "webhook"})`
$DIR/internal/event/rules_test.go: `rulesCase5.Add(NewPattern("2010*", ""), TargetID{"1", "webhook"})`
$DIR/internal/event/rules_test.go: `rulesCase5.Add(NewPattern("", "*.png"), TargetID{"2", "amqp"})`
$DIR/internal/event/rules_test.go: `rules2Case5.Add(NewPattern("*", ""), TargetID{"1", "webhook"})`
$DIR/internal/event/rules_test.go: `expectedResultCase5.Add(NewPattern("2010*", ""), TargetID{"1", "webhook"})`
$DIR/internal/event/rules_test.go: `expectedResultCase5.Add(NewPattern("", "*.png"), TargetID{"2", "amqp"})`
$DIR/internal/event/rules_test.go: `expectedResultCase5.Add(NewPattern("*", ""), TargetID{"1", "webhook"})`
$DIR/internal/event/rules_test.go: `rules2Case2.Add(NewPattern("*", "*"), TargetID{"1", "webhook"})`
$DIR/internal/event/rules_test.go: `rulesCase3.Add(NewPattern("*", "*"), TargetID{"1", "webhook"})`
$DIR/internal/event/rules_test.go: `expectedResultCase3.Add(NewPattern("*", "*"), TargetID{"1", "webhook"})`
$DIR/internal/event/rules_test.go: `rulesCase4.Add(NewPattern("*", "*"), TargetID{"1", "webhook"})`
$DIR/internal/event/rules_test.go: `rules2Case4.Add(NewPattern("2010*", ""), TargetID{"1", "webhook"})`
$DIR/internal/event/rules_test.go: `rules2Case4.Add(NewPattern("", "*.png"), TargetID{"2", "amqp"})`
$DIR/internal/event/rules_test.go: `expectedResultCase4.Add(NewPattern("*", "*"), TargetID{"1", "webhook"})`
$DIR/internal/event/rules_test.go: `rulesCase5.Add(NewPattern("*", ""), TargetID{"1", "webhook"})`
$DIR/internal/event/rules_test.go: `rulesCase5.Add(NewPattern("", "*"), TargetID{"2", "amqp"})`
$DIR/internal/event/rules_test.go: `rules2Case5.Add(NewPattern("2010*", ""), TargetID{"1", "webhook"})`
$DIR/internal/event/rules_test.go: `rules2Case5.Add(NewPattern("", "*"), TargetID{"2", "amqp"})`
$DIR/internal/event/rules_test.go: `expectedResultCase5.Add(NewPattern("*", ""), TargetID{"1", "webhook"})`
$DIR/internal/event/rules_test.go: `.Add(NewPattern("2010*", ""), TargetID{"1", "webhook"})`
$DIR/internal/event/rules_test.go: `.Add(NewPattern("2010*", ""), TargetID{"1", "webhook"})`
$DIR/internal/event/rules_test.go: `.Add(NewPattern("", "*.jpg"), TargetID{"1", "webhook"})`
$DIR/internal/event/rules_test.go: `.Add(NewPattern("", "*.jpg"), TargetID{"1", "webhook"})`
$DIR/internal/event/rules_test.go: `.Add(NewPattern("", "*.jpg"), TargetID{"1", "webhook"})`
$DIR/internal/event/rules_test.go: `.Add(NewPattern("2010*", ""), TargetID{"1", "webhook"})`
$DIR/internal/event/rules_test.go: `.rules.Add(testCase.pattern, testCase.targetID)`
$DIR/internal/event/rules_test.go: `.Add(NewPattern("*", "*"), TargetID{"1", "webhook"})`
$DIR/internal/event/rules_test.go: `.Add(NewPattern("2010*", ""), TargetID{"1", "webhook"})`
$DIR/internal/event/rules_test.go: `.Add(NewPattern("", "*.png"), TargetID{"2", "amqp"})`
$DIR/internal/event/rules_test.go: `.Add(NewPattern("2010*", ""), TargetID{"1", "webhook"})`
$DIR/internal/event/rules_test.go: `.rules.Match(testCase.objectName)`
$DIR/internal/event/rules_test.go: `.DeepEqual(testCase.expectedResult, result)`
$DIR/internal/event/rules_test.go: `.Add(NewPattern("2010*", ""), TargetID{"1", "webhook"})`
$DIR/internal/event/rules_test.go: `.Add(NewPattern("", "*.jpg"), TargetID{"1", "webhook"})`
$DIR/internal/event/rules_test.go: `.rules.Clone()`
$DIR/internal/event/rules_test.go: `.DeepEqual(result, testCase.rules)`
$DIR/internal/event/rules_test.go: `.Add(NewPattern(testCase.prefix, ""), testCase.targetID)`
$DIR/internal/event/rules_test.go: `.DeepEqual(result, testCase.rules)`
$DIR/internal/event/rules_test.go: `.Add(NewPattern("*", ""), TargetID{"1", "webhook"})`
$DIR/internal/event/rules_test.go: `.Add(NewPattern("*", ""), TargetID{"1", "webhook"})`
$DIR/internal/event/rules_test.go: `.Add(NewPattern("", "*"), TargetID{"1", "webhook"})`
$DIR/internal/event/rules_test.go: `.Add(NewPattern("", "*"), TargetID{"1", "webhook"})`
$DIR/internal/event/rules_test.go: `.Add(NewPattern("2010*", ""), TargetID{"1", "webhook"})`
$DIR/internal/event/rules_test.go: `.Add(NewPattern("2010*", ""), TargetID{"1", "webhook"})`
$DIR/internal/event/rules_test.go: `.Add(NewPattern("2010*", ""), TargetID{"1", "webhook"})`
$DIR/internal/event/rules_test.go: `.Add(NewPattern("2010*", ""), TargetID{"1", "webhook"})`
$DIR/internal/event/rules_test.go: `.Add(NewPattern("", "*.png"), TargetID{"2", "amqp"})`
$DIR/internal/event/rules_test.go: `.Add(NewPattern("*", ""), TargetID{"1", "webhook"})`
$DIR/internal/event/rules_test.go: `.Add(NewPattern("2010*", ""), TargetID{"1", "webhook"})`
$DIR/internal/event/rules_test.go: `.Add(NewPattern("", "*.png"), TargetID{"2", "amqp"})`
$DIR/internal/event/rules_test.go: `.Add(NewPattern("*", ""), TargetID{"1", "webhook"})`
$DIR/internal/event/rules_test.go: `.rules.Union(testCase.rules2)`
$DIR/internal/event/rules_test.go: `.DeepEqual(testCase.expectedResult, result)`
$DIR/internal/event/rules_test.go: `.Add(NewPattern("*", "*"), TargetID{"1", "webhook"})`
$DIR/internal/event/rules_test.go: `.Add(NewPattern("*", "*"), TargetID{"1", "webhook"})`
$DIR/internal/event/rules_test.go: `.Add(NewPattern("*", "*"), TargetID{"1", "webhook"})`
$DIR/internal/event/rules_test.go: `.Add(NewPattern("*", "*"), TargetID{"1", "webhook"})`
$DIR/internal/event/rules_test.go: `.Add(NewPattern("2010*", ""), TargetID{"1", "webhook"})`
$DIR/internal/event/rules_test.go: `.Add(NewPattern("", "*.png"), TargetID{"2", "amqp"})`
$DIR/internal/event/rules_test.go: `.Add(NewPattern("*", "*"), TargetID{"1", "webhook"})`
$DIR/internal/event/rules_test.go: `.Add(NewPattern("*", ""), TargetID{"1", "webhook"})`
$DIR/internal/event/rules_test.go: `.Add(NewPattern("", "*"), TargetID{"2", "amqp"})`
$DIR/internal/event/rules_test.go: `.Add(NewPattern("2010*", ""), TargetID{"1", "webhook"})`
$DIR/internal/event/rules_test.go: `.Add(NewPattern("", "*"), TargetID{"2", "amqp"})`
$DIR/internal/event/rules_test.go: `.Add(NewPattern("*", ""), TargetID{"1", "webhook"})`
$DIR/internal/event/rules_test.go: `.rules.Difference(testCase.rules2)`
$DIR/internal/event/rules_test.go: `.DeepEqual(testCase.expectedResult, result)`
$DIR/internal/event/rulesmap_test.go: `result.Add(testCase.rulesMapToAdd)`
$DIR/internal/event/rulesmap_test.go: `expectedResultCase3.add([]Name{ObjectCreatedAll}, "*", TargetID{"1", "webhook"})`
$DIR/internal/event/rulesmap_test.go: `testCase.rulesMap.Add(testCase.rulesMapToAdd)`
$DIR/internal/event/rulesmap_test.go: `rulesMapCase3.add([]Name{ObjectCreatedAll}, "*", TargetID{"1", "webhook"})`
$DIR/internal/event/rulesmap_test.go: `testCase.rulesMap.Remove(testCase.rulesMapToAdd)`
$DIR/internal/event/rulesmap_test.go: `rulesMapCase4.add([]Name{ObjectCreatedAll}, "*", TargetID{"2", "amqp"})`
$DIR/internal/event/rulesmap_test.go: `rulesMapCase1.add([]Name{ObjectAccessedGet, ObjectAccessedHead, ObjectAccessedGetRetention, ObjectAccessedGetLegalHold, ObjectAccessedAttributes},
		"*", TargetID{"1", "webhook"})`
$DIR/internal/event/rulesmap_test.go: `rulesMapCase2.add([]Name{
		ObjectAccessedGet, ObjectAccessedHead, ObjectAccessedAttributes,
		ObjectCreatedPut, ObjectAccessedGetRetention, ObjectAccessedGetLegalHold,
	}, "*", TargetID{"1", "webhook"})`
$DIR/internal/event/rulesmap_test.go: `rulesMapCase3.add([]Name{ObjectRemovedDelete}, "2010*.jpg", TargetID{"1", "webhook"})`
$DIR/internal/event/rulesmap_test.go: `.rulesMap.Clone()`
$DIR/internal/event/rulesmap_test.go: `.DeepEqual(result, testCase.rulesMap)`
$DIR/internal/event/rulesmap_test.go: `.Add(testCase.rulesMapToAdd)`
$DIR/internal/event/rulesmap_test.go: `.DeepEqual(result, testCase.rulesMap)`
$DIR/internal/event/rulesmap_test.go: `.add([]Name{ObjectCreatedAll}, "*", TargetID{"1", "webhook"})`
$DIR/internal/event/rulesmap_test.go: `.rulesMap.Add(testCase.rulesMapToAdd)`
$DIR/internal/event/rulesmap_test.go: `.DeepEqual(testCase.rulesMap, testCase.expectedResult)`
$DIR/internal/event/rulesmap_test.go: `.add([]Name{ObjectCreatedAll}, "*", TargetID{"1", "webhook"})`
$DIR/internal/event/rulesmap_test.go: `.rulesMap.Remove(testCase.rulesMapToAdd)`
$DIR/internal/event/rulesmap_test.go: `.DeepEqual(testCase.rulesMap, testCase.expectedResult)`
$DIR/internal/event/rulesmap_test.go: `.add([]Name{ObjectCreatedAll}, "*", TargetID{"2", "amqp"})`
$DIR/internal/event/rulesmap_test.go: `.rulesMap.Match(testCase.eventName, testCase.objectName)`
$DIR/internal/event/rulesmap_test.go: `.DeepEqual(result, testCase.expectedResult)`
$DIR/internal/event/rulesmap_test.go: `.add([]Name{ObjectAccessedGet, ObjectAccessedHead, ObjectAccessedGetRetention, ObjectAccessedGetLegalHold, ObjectAccessedAttributes},
		"*", TargetID{"1", "webhook"})`
$DIR/internal/event/rulesmap_test.go: `.add([]Name{
		ObjectAccessedGet, ObjectAccessedHead, ObjectAccessedAttributes,
		ObjectCreatedPut, ObjectAccessedGetRetention, ObjectAccessedGetLegalHold,
	}, "*", TargetID{"1", "webhook"})`
$DIR/internal/event/rulesmap_test.go: `.add([]Name{ObjectRemovedDelete}, "2010*.jpg", TargetID{"1", "webhook"})`
$DIR/internal/event/rulesmap_test.go: `.DeepEqual(result, testCase.expectedResult)`
$DIR/internal/event/target/mysql_test.go: `found = true`
$DIR/internal/event/target/mysql_test.go: `.Drivers()`
$DIR/internal/event/target/nats_contrib_test.go: `opts.Port = 14222`
$DIR/internal/event/target/nats_contrib_test.go: `opts.Port = 14223`
$DIR/internal/event/target/nats_contrib_test.go: `opts.Username = "testminio"`
$DIR/internal/event/target/nats_contrib_test.go: `opts.Password = "miniotest"`
$DIR/internal/event/target/nats_contrib_test.go: `opts.Port = 14223`
$DIR/internal/event/target/nats_contrib_test.go: `opts.Authorization = "s3cr3t"`
$DIR/internal/event/target/nats_contrib_test.go: `.RunServer(&opts)`
$DIR/internal/event/target/nats_contrib_test.go: `.Shutdown()`
$DIR/internal/event/target/nats_contrib_test.go: `.Port(opts.Port)`
$DIR/internal/event/target/nats_contrib_test.go: `.connectNats()`
$DIR/internal/event/target/nats_contrib_test.go: `.RunServer(&opts)`
$DIR/internal/event/target/nats_contrib_test.go: `.Shutdown()`
$DIR/internal/event/target/nats_contrib_test.go: `.Port(opts.Port)`
$DIR/internal/event/target/nats_contrib_test.go: `.connectNats()`
$DIR/internal/event/target/nats_contrib_test.go: `.RunServer(&opts)`
$DIR/internal/event/target/nats_contrib_test.go: `.Shutdown()`
$DIR/internal/event/target/nats_contrib_test.go: `.Port(opts.Port)`
$DIR/internal/event/target/nats_contrib_test.go: `.connectNats()`
$DIR/internal/event/target/nats_tls_contrib_test.go: `.RunServerWithConfig(filepath.Join("testdata", "contrib", "nats_tls.conf"))`
$DIR/internal/event/target/nats_tls_contrib_test.go: `.Join("testdata", "contrib", "nats_tls.conf")`
$DIR/internal/event/target/nats_tls_contrib_test.go: `.Shutdown()`
$DIR/internal/event/target/nats_tls_contrib_test.go: `.Port(opts.Port)`
$DIR/internal/event/target/nats_tls_contrib_test.go: `.Join("testdata", "contrib", "certs", "root_ca_cert.pem")`
$DIR/internal/event/target/nats_tls_contrib_test.go: `.connectNats()`
$DIR/internal/event/target/nats_tls_contrib_test.go: `.RunServerWithConfig(filepath.Join("testdata", "contrib", "nats_tls_client_cert.conf"))`
$DIR/internal/event/target/nats_tls_contrib_test.go: `.Join("testdata", "contrib", "nats_tls_client_cert.conf")`
$DIR/internal/event/target/nats_tls_contrib_test.go: `.Shutdown()`
$DIR/internal/event/target/nats_tls_contrib_test.go: `.Port(opts.Port)`
$DIR/internal/event/target/nats_tls_contrib_test.go: `.Join("testdata", "contrib", "certs", "root_ca_cert.pem")`
$DIR/internal/event/target/nats_tls_contrib_test.go: `.Join("testdata", "contrib", "certs", "nats_client_cert.pem")`
$DIR/internal/event/target/nats_tls_contrib_test.go: `.Join("testdata", "contrib", "certs", "nats_client_key.pem")`
$DIR/internal/event/target/nats_tls_contrib_test.go: `.connectNats()`
$DIR/internal/event/target/nsq_test.go: `t.Run(tt.name, func(t *testing.T) {
			n := NSQArgs{
				Enable:      tt.fields.Enable,
				NSQDAddress: tt.fields.NSQDAddress,
				Topic:       tt.fields.Topic,
			}
			if err := n.Validate(); (err != nil) != tt.wantErr {
				t.Errorf("NSQArgs.Validate() error = %v, wantErr %v", err, tt.wantErr)
			}
		})`
$DIR/internal/event/target/nsq_test.go: `.Run(tt.name, func(t *testing.T) {
			n := NSQArgs{
				Enable:      tt.fields.Enable,
				NSQDAddress: tt.fields.NSQDAddress,
				Topic:       tt.fields.Topic,
			}
			if err := n.Validate(); (err != nil) != tt.wantErr {
				t.Errorf("NSQArgs.Validate() error = %v, wantErr %v", err, tt.wantErr)
			}
		})`
$DIR/internal/event/target/nsq_test.go: `.Validate()`
$DIR/internal/event/target/postgresql_test.go: `found = true`
$DIR/internal/event/target/postgresql_test.go: `.Drivers()`
$DIR/internal/event/targetid_test.go: `.tid.String()`
$DIR/internal/event/targetid_test.go: `.tid.ToARN(testCase.region)`
$DIR/internal/event/targetid_test.go: `.tid.MarshalJSON()`
$DIR/internal/event/targetid_test.go: `.DeepEqual(data, testCase.expectedData)`
$DIR/internal/event/targetid_test.go: `.UnmarshalJSON(testCase.data)`
$DIR/internal/event/targetidset_test.go: `result.add(testCase.targetIDToAdd)`
$DIR/internal/event/targetidset_test.go: `.set.Clone()`
$DIR/internal/event/targetidset_test.go: `.DeepEqual(result, testCase.set)`
$DIR/internal/event/targetidset_test.go: `.add(testCase.targetIDToAdd)`
$DIR/internal/event/targetidset_test.go: `.DeepEqual(result, testCase.set)`
$DIR/internal/event/targetidset_test.go: `.set.Union(testCase.setToAdd)`
$DIR/internal/event/targetidset_test.go: `.DeepEqual(testCase.expectedResult, result)`
$DIR/internal/event/targetidset_test.go: `.set.Difference(testCase.setToRemove)`
$DIR/internal/event/targetidset_test.go: `.DeepEqual(testCase.expectedResult, result)`
$DIR/internal/event/targetidset_test.go: `.DeepEqual(testCase.expectedResult, result)`
$DIR/internal/event/targetlist_test.go: `found = true`
$DIR/internal/event/targetlist_test.go: `found = true`
$DIR/internal/event/targetlist_test.go: `.Background()`
$DIR/internal/event/targetlist_test.go: `.Background()`
$DIR/internal/event/targetlist_test.go: `.Add(&ExampleTarget{TargetID{"2", "testcase"}, false, false})`
$DIR/internal/event/targetlist_test.go: `.Background()`
$DIR/internal/event/targetlist_test.go: `.Add(&ExampleTarget{TargetID{"3", "testcase"}, false, false})`
$DIR/internal/event/targetlist_test.go: `.targetList.Add(testCase.target)`
$DIR/internal/event/targetlist_test.go: `.targetList.List()`
$DIR/internal/event/targetlist_test.go: `.DeepEqual(targetID1, targetID2)`
$DIR/internal/event/targetlist_test.go: `.Background()`
$DIR/internal/event/targetlist_test.go: `.Background()`
$DIR/internal/event/targetlist_test.go: `.Add(&ExampleTarget{TargetID{"2", "testcase"}, false, false})`
$DIR/internal/event/targetlist_test.go: `.Background()`
$DIR/internal/event/targetlist_test.go: `.Add(&ExampleTarget{TargetID{"3", "testcase"}, false, false})`
$DIR/internal/event/targetlist_test.go: `.targetList.Exists(testCase.targetID)`
$DIR/internal/event/targetlist_test.go: `.Background()`
$DIR/internal/event/targetlist_test.go: `.Background()`
$DIR/internal/event/targetlist_test.go: `.Add(&ExampleTarget{TargetID{"2", "testcase"}, false, false})`
$DIR/internal/event/targetlist_test.go: `.Background()`
$DIR/internal/event/targetlist_test.go: `.Add(&ExampleTarget{TargetID{"3", "testcase"}, false, false})`
$DIR/internal/event/targetlist_test.go: `.Add(&ExampleTarget{TargetID{"1", "webhook"}, false, false})`
$DIR/internal/event/targetlist_test.go: `.targetList.List()`
$DIR/internal/event/targetlist_test.go: `.DeepEqual(targetID1, targetID2)`
$DIR/internal/event/targetlist_test.go: `.Background()`
$DIR/internal/grid/connection_test.go: `t.Helper()`
$DIR/internal/grid/connection_test.go: `handler.ServeHTTP(w, r)`
$DIR/internal/grid/connection_test.go: `errFatal(err)`
$DIR/internal/grid/connection_test.go: `errFatal(local.RegisterSingleHandler(handlerTest, func(payload []byte) ([]byte, *RemoteErr) {
		t.Log("1: server payload: ", len(payload), "bytes.")
		return append([]byte{}, payload...), nil
	}))`
$DIR/internal/grid/connection_test.go: `errFatal(local.RegisterSingleHandler(handlerTest2, func(payload []byte) ([]byte, *RemoteErr) {
		t.Log("2: server payload: ", len(payload), "bytes.")
		err := RemoteErr(payload)
		return nil, &err
	}))`
$DIR/internal/grid/connection_test.go: `errFatal(err)`
$DIR/internal/grid/connection_test.go: `close(connReady)`
$DIR/internal/grid/connection_test.go: `local.debugMsg(debugShutdown)`
$DIR/internal/grid/connection_test.go: `remote.debugMsg(debugShutdown)`
$DIR/internal/grid/connection_test.go: `remote.debugMsg(debugWaitForExit)`
$DIR/internal/grid/connection_test.go: `local.debugMsg(debugWaitForExit)`
$DIR/internal/grid/connection_test.go: `gotCall <- struct{}{}`
$DIR/internal/grid/connection_test.go: `<-cleanReqs`
$DIR/internal/grid/connection_test.go: `gotCall <- struct{}{}`
$DIR/internal/grid/connection_test.go: `gotCall <- struct{}{}`
$DIR/internal/grid/connection_test.go: `errFatal(remote.RegisterSingleHandler(handlerTest, h1))`
$DIR/internal/grid/connection_test.go: `errFatal(remote.RegisterStreamingHandler(handlerTest2, h2))`
$DIR/internal/grid/connection_test.go: `errFatal(local.RegisterSingleHandler(handlerTest, h1))`
$DIR/internal/grid/connection_test.go: `errFatal(local.RegisterStreamingHandler(handlerTest2, h2))`
$DIR/internal/grid/connection_test.go: `errFatal(remoteConn.WaitForConnect(context.Background()))`
$DIR/internal/grid/connection_test.go: `gotResp <- struct{}{}`
$DIR/internal/grid/connection_test.go: `<-gotCall`
$DIR/internal/grid/connection_test.go: `remote.debugMsg(debugKillInbound)`
$DIR/internal/grid/connection_test.go: `local.debugMsg(debugKillInbound)`
$DIR/internal/grid/connection_test.go: `<-gotResp`
$DIR/internal/grid/connection_test.go: `errFatal(remoteConn.WaitForConnect(context.Background()))`
$DIR/internal/grid/connection_test.go: `errFatal(err)`
$DIR/internal/grid/connection_test.go: `gotResp <- struct{}{}`
$DIR/internal/grid/connection_test.go: `<-gotCall`
$DIR/internal/grid/connection_test.go: `remote.debugMsg(debugKillOutbound)`
$DIR/internal/grid/connection_test.go: `local.debugMsg(debugKillOutbound)`
$DIR/internal/grid/connection_test.go: `errFatal(remoteConn.WaitForConnect(context.Background()))`
$DIR/internal/grid/connection_test.go: `<-gotResp`
$DIR/internal/grid/connection_test.go: `c.Local = hosts[x]`
$DIR/internal/grid/connection_test.go: `c.Remote = hosts[y]`
$DIR/internal/grid/connection_test.go: `cReverse.Local = hosts[y]`
$DIR/internal/grid/connection_test.go: `cReverse.Remote = hosts[x]`
$DIR/internal/grid/connection_test.go: `should++`
$DIR/internal/grid/connection_test.go: `.T.SetLogTB(t)`
$DIR/internal/grid/connection_test.go: `.Helper()`
$DIR/internal/grid/connection_test.go: `.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
			t.Logf("Got a %s request for: %v", r.Method, r.URL)
			handler.ServeHTTP(w, r)
		})`
$DIR/internal/grid/connection_test.go: `.ServeHTTP(w, r)`
$DIR/internal/grid/connection_test.go: `.Background()`
$DIR/internal/grid/connection_test.go: `.RegisterSingleHandler(handlerTest, func(payload []byte) ([]byte, *RemoteErr) {
		t.Log("1: server payload: ", len(payload), "bytes.")
		return append([]byte{}, payload...), nil
	})`
$DIR/internal/grid/connection_test.go: `.RegisterSingleHandler(handlerTest2, func(payload []byte) ([]byte, *RemoteErr) {
		t.Log("2: server payload: ", len(payload), "bytes.")
		err := RemoteErr(payload)
		return nil, &err
	})`
$DIR/internal/grid/connection_test.go: `.Background()`
$DIR/internal/grid/connection_test.go: `.Handler()`
$DIR/internal/grid/connection_test.go: `.Handler()`
$DIR/internal/grid/connection_test.go: `.debugMsg(debugShutdown)`
$DIR/internal/grid/connection_test.go: `.debugMsg(debugShutdown)`
$DIR/internal/grid/connection_test.go: `.debugMsg(debugWaitForExit)`
$DIR/internal/grid/connection_test.go: `.debugMsg(debugWaitForExit)`
$DIR/internal/grid/connection_test.go: `.Done()`
$DIR/internal/grid/connection_test.go: `.RegisterSingleHandler(handlerTest, h1)`
$DIR/internal/grid/connection_test.go: `.RegisterStreamingHandler(handlerTest2, h2)`
$DIR/internal/grid/connection_test.go: `.RegisterSingleHandler(handlerTest, h1)`
$DIR/internal/grid/connection_test.go: `.RegisterStreamingHandler(handlerTest2, h2)`
$DIR/internal/grid/connection_test.go: `.Connection(remoteHost)`
$DIR/internal/grid/connection_test.go: `.WaitForConnect(context.Background())`
$DIR/internal/grid/connection_test.go: `.Background()`
$DIR/internal/grid/connection_test.go: `.Now()`
$DIR/internal/grid/connection_test.go: `.Request(context.Background(), handlerTest, []byte(testPayload))`
$DIR/internal/grid/connection_test.go: `.Background()`
$DIR/internal/grid/connection_test.go: `.debugMsg(debugKillInbound)`
$DIR/internal/grid/connection_test.go: `.debugMsg(debugKillInbound)`
$DIR/internal/grid/connection_test.go: `.WaitForConnect(context.Background())`
$DIR/internal/grid/connection_test.go: `.Background()`
$DIR/internal/grid/connection_test.go: `.NewStream(context.Background(), handlerTest2, []byte(testPayload))`
$DIR/internal/grid/connection_test.go: `.Background()`
$DIR/internal/grid/connection_test.go: `.debugMsg(debugKillOutbound)`
$DIR/internal/grid/connection_test.go: `.debugMsg(debugKillOutbound)`
$DIR/internal/grid/connection_test.go: `.WaitForConnect(context.Background())`
$DIR/internal/grid/connection_test.go: `.Background()`
$DIR/internal/grid/connection_test.go: `.shouldConnect()`
$DIR/internal/grid/connection_test.go: `.shouldConnect()`
$DIR/internal/grid/connection_test.go: `.shouldConnect()`
$DIR/internal/grid/grid_test.go: `t.Helper()`
$DIR/internal/grid/grid_test.go: `errFatal(err)`
$DIR/internal/grid/grid_test.go: `errFatal(local.RegisterSingleHandler(handlerTest, func(payload []byte) ([]byte, *RemoteErr) {
		t.Log("1: server payload: ", len(payload), "bytes.")
		return append([]byte{}, payload...), nil
	}))`
$DIR/internal/grid/grid_test.go: `errFatal(local.RegisterSingleHandler(handlerTest2, func(payload []byte) ([]byte, *RemoteErr) {
		t.Log("2: server payload: ", len(payload), "bytes.")
		err := RemoteErr(payload)
		return nil, &err
	}))`
$DIR/internal/grid/grid_test.go: `errFatal(remote.RegisterSingleHandler(handlerTest, func(payload []byte) ([]byte, *RemoteErr) {
		t.Log("1: server payload: ", len(payload), "bytes.")
		return append([]byte{}, payload...), nil
	}))`
$DIR/internal/grid/grid_test.go: `errFatal(remote.RegisterSingleHandler(handlerTest2, func(payload []byte) ([]byte, *RemoteErr) {
		t.Log("2: server payload: ", len(payload), "bytes.")
		err := RemoteErr(payload)
		return nil, &err
	}))`
$DIR/internal/grid/grid_test.go: `remoteConn.WaitForConnect(context.Background())`
$DIR/internal/grid/grid_test.go: `t.Run("localToRemote", func(t *testing.T) {
		const testPayload = "Hello Grid World!"

		start := time.Now()
		resp, err := remoteConn.Request(context.Background(), handlerTest, []byte(testPayload))
		errFatal(err)
		if string(resp) != testPayload {
			t.Errorf("want %q, got %q", testPayload, string(resp))
		}
		t.Log("Roundtrip:", time.Since(start))
	})`
$DIR/internal/grid/grid_test.go: `errFatal(err)`
$DIR/internal/grid/grid_test.go: `t.Run("localToRemoteErr", func(t *testing.T) {
		const testPayload = "Hello Grid World!"
		start := time.Now()
		resp, err := remoteConn.Request(context.Background(), handlerTest2, []byte(testPayload))
		t.Log("Roundtrip:", time.Since(start))
		if len(resp) != 0 {
			t.Errorf("want nil, got %q", string(resp))
		}
		if err != RemoteErr(testPayload) {
			t.Errorf("want error %v(%T), got %v(%T)", RemoteErr(testPayload), RemoteErr(testPayload), err, err)
		}
		t.Log("Roundtrip:", time.Since(start))
	})`
$DIR/internal/grid/grid_test.go: `t.Run("localToRemoteHuge", func(t *testing.T) {
		testPayload := bytes.Repeat([]byte("?"), 1<<20)

		start := time.Now()
		resp, err := remoteConn.Request(context.Background(), handlerTest, testPayload)
		errFatal(err)
		if string(resp) != string(testPayload) {
			t.Errorf("want %q, got %q", testPayload, string(resp))
		}
		t.Log("Roundtrip:", time.Since(start))
	})`
$DIR/internal/grid/grid_test.go: `errFatal(err)`
$DIR/internal/grid/grid_test.go: `t.Helper()`
$DIR/internal/grid/grid_test.go: `errFatal(t, err)`
$DIR/internal/grid/grid_test.go: `errFatal(t, local.RegisterSingleHandler(handlerTest, func(payload []byte) ([]byte, *RemoteErr) {
		t.Log("1: server payload: ", len(payload), "bytes.")
		return append([]byte{}, payload...), nil
	}))`
$DIR/internal/grid/grid_test.go: `errFatal(t, local.RegisterSingleHandler(handlerTest2, func(payload []byte) ([]byte, *RemoteErr) {
		t.Log("2: server payload: ", len(payload), "bytes.")
		err := RemoteErr(payload)
		return nil, &err
	}))`
$DIR/internal/grid/grid_test.go: `remoteConn.WaitForConnect(context.Background())`
$DIR/internal/grid/grid_test.go: `_, err = remoteConn.NewStream(context.Background(), handlerTest, []byte(testPayload))`
$DIR/internal/grid/grid_test.go: `t.Helper()`
$DIR/internal/grid/grid_test.go: `errFatal(err)`
$DIR/internal/grid/grid_test.go: `resp = h1.NewResponse()`
$DIR/internal/grid/grid_test.go: `*resp = testResponse{
			OrgNum:    req.Num,
			OrgString: req.String,
			Embedded:  *req,
		}`
$DIR/internal/grid/grid_test.go: `errFatal(h1.Register(local, handler1))`
$DIR/internal/grid/grid_test.go: `errFatal(h2.Register(local, handler2))`
$DIR/internal/grid/grid_test.go: `errFatal(h1.Register(remote, handler1))`
$DIR/internal/grid/grid_test.go: `errFatal(h2.Register(remote, handler2))`
$DIR/internal/grid/grid_test.go: `errFatal(err)`
$DIR/internal/grid/grid_test.go: `h1.PutResponse(resp)`
$DIR/internal/grid/grid_test.go: `start = time.Now()`
$DIR/internal/grid/grid_test.go: `resp, err = h2.Call(context.Background(), remoteConn, &testRequest{Num: 1, String: testPayload})`
$DIR/internal/grid/grid_test.go: `h2.PutResponse(resp)`
$DIR/internal/grid/grid_test.go: `t.Helper()`
$DIR/internal/grid/grid_test.go: `errFatal(err)`
$DIR/internal/grid/grid_test.go: `resp = h1.NewResponse()`
$DIR/internal/grid/grid_test.go: `(*resp)[k] = v`
$DIR/internal/grid/grid_test.go: `errFatal(h1.Register(local, handler1))`
$DIR/internal/grid/grid_test.go: `errFatal(h2.Register(local, handler2))`
$DIR/internal/grid/grid_test.go: `errFatal(h1.Register(remote, handler1))`
$DIR/internal/grid/grid_test.go: `errFatal(h2.Register(remote, handler2))`
$DIR/internal/grid/grid_test.go: `errFatal(err)`
$DIR/internal/grid/grid_test.go: `h1.PutResponse(resp)`
$DIR/internal/grid/grid_test.go: `start = time.Now()`
$DIR/internal/grid/grid_test.go: `resp, err = h2.Call(context.Background(), remoteConn, NewMSSWith(map[string]string{"err": testPayload}))`
$DIR/internal/grid/grid_test.go: `t.Helper()`
$DIR/internal/grid/grid_test.go: `errFatal(err)`
$DIR/internal/grid/grid_test.go: `t.Cleanup(grid.Cleanup)`
$DIR/internal/grid/grid_test.go: `t.Run("testStreamRoundtrip", func(t *testing.T) {
		defer timeout(5 * time.Second)()
		testStreamRoundtrip(t, local, remote)
		assertNoActive(t, connRemoteLocal)
		assertNoActive(t, connLocalToRemote)
	})`
$DIR/internal/grid/grid_test.go: `testStreamRoundtrip(t, local, remote)`
$DIR/internal/grid/grid_test.go: `assertNoActive(t, connRemoteLocal)`
$DIR/internal/grid/grid_test.go: `assertNoActive(t, connLocalToRemote)`
$DIR/internal/grid/grid_test.go: `t.Run("testStreamCancel", func(t *testing.T) {
		defer timeout(5 * time.Second)()
		testStreamCancel(t, local, remote)
		assertNoActive(t, connRemoteLocal)
		assertNoActive(t, connLocalToRemote)
	})`
$DIR/internal/grid/grid_test.go: `testStreamCancel(t, local, remote)`
$DIR/internal/grid/grid_test.go: `assertNoActive(t, connRemoteLocal)`
$DIR/internal/grid/grid_test.go: `assertNoActive(t, connLocalToRemote)`
$DIR/internal/grid/grid_test.go: `t.Run("testStreamDeadline", func(t *testing.T) {
		defer timeout(5 * time.Second)()
		testStreamDeadline(t, local, remote)
		assertNoActive(t, connRemoteLocal)
		assertNoActive(t, connLocalToRemote)
	})`
$DIR/internal/grid/grid_test.go: `testStreamDeadline(t, local, remote)`
$DIR/internal/grid/grid_test.go: `assertNoActive(t, connRemoteLocal)`
$DIR/internal/grid/grid_test.go: `assertNoActive(t, connLocalToRemote)`
$DIR/internal/grid/grid_test.go: `t.Run("testServerOutCongestion", func(t *testing.T) {
		defer timeout(1 * time.Minute)()
		testServerOutCongestion(t, local, remote)
		assertNoActive(t, connRemoteLocal)
		assertNoActive(t, connLocalToRemote)
	})`
$DIR/internal/grid/grid_test.go: `testServerOutCongestion(t, local, remote)`
$DIR/internal/grid/grid_test.go: `assertNoActive(t, connRemoteLocal)`
$DIR/internal/grid/grid_test.go: `assertNoActive(t, connLocalToRemote)`
$DIR/internal/grid/grid_test.go: `t.Run("testServerInCongestion", func(t *testing.T) {
		defer timeout(1 * time.Minute)()
		testServerInCongestion(t, local, remote)
		assertNoActive(t, connRemoteLocal)
		assertNoActive(t, connLocalToRemote)
	})`
$DIR/internal/grid/grid_test.go: `testServerInCongestion(t, local, remote)`
$DIR/internal/grid/grid_test.go: `assertNoActive(t, connRemoteLocal)`
$DIR/internal/grid/grid_test.go: `assertNoActive(t, connLocalToRemote)`
$DIR/internal/grid/grid_test.go: `t.Run("testGenericsStreamRoundtrip", func(t *testing.T) {
		defer timeout(1 * time.Minute)()
		testGenericsStreamRoundtrip(t, local, remote)
		assertNoActive(t, connRemoteLocal)
		assertNoActive(t, connLocalToRemote)
	})`
$DIR/internal/grid/grid_test.go: `testGenericsStreamRoundtrip(t, local, remote)`
$DIR/internal/grid/grid_test.go: `assertNoActive(t, connRemoteLocal)`
$DIR/internal/grid/grid_test.go: `assertNoActive(t, connLocalToRemote)`
$DIR/internal/grid/grid_test.go: `t.Run("testGenericsStreamRoundtripSubroute", func(t *testing.T) {
		defer timeout(1 * time.Minute)()
		testGenericsStreamRoundtripSubroute(t, local, remote)
		assertNoActive(t, connRemoteLocal)
		assertNoActive(t, connLocalToRemote)
	})`
$DIR/internal/grid/grid_test.go: `testGenericsStreamRoundtripSubroute(t, local, remote)`
$DIR/internal/grid/grid_test.go: `assertNoActive(t, connRemoteLocal)`
$DIR/internal/grid/grid_test.go: `assertNoActive(t, connLocalToRemote)`
$DIR/internal/grid/grid_test.go: `testServerStreamResponseBlocked(t, local, remote)`
$DIR/internal/grid/grid_test.go: `assertNoActive(t, connRemoteLocal)`
$DIR/internal/grid/grid_test.go: `assertNoActive(t, connLocalToRemote)`
$DIR/internal/grid/grid_test.go: `.T.SetLogTB(t)`
$DIR/internal/grid/grid_test.go: `.Helper()`
$DIR/internal/grid/grid_test.go: `.RegisterSingleHandler(handlerTest, func(payload []byte) ([]byte, *RemoteErr) {
		t.Log("1: server payload: ", len(payload), "bytes.")
		return append([]byte{}, payload...), nil
	})`
$DIR/internal/grid/grid_test.go: `.RegisterSingleHandler(handlerTest2, func(payload []byte) ([]byte, *RemoteErr) {
		t.Log("2: server payload: ", len(payload), "bytes.")
		err := RemoteErr(payload)
		return nil, &err
	})`
$DIR/internal/grid/grid_test.go: `.RegisterSingleHandler(handlerTest, func(payload []byte) ([]byte, *RemoteErr) {
		t.Log("1: server payload: ", len(payload), "bytes.")
		return append([]byte{}, payload...), nil
	})`
$DIR/internal/grid/grid_test.go: `.RegisterSingleHandler(handlerTest2, func(payload []byte) ([]byte, *RemoteErr) {
		t.Log("2: server payload: ", len(payload), "bytes.")
		err := RemoteErr(payload)
		return nil, &err
	})`
$DIR/internal/grid/grid_test.go: `.Connection(remoteHost)`
$DIR/internal/grid/grid_test.go: `.WaitForConnect(context.Background())`
$DIR/internal/grid/grid_test.go: `.Background()`
$DIR/internal/grid/grid_test.go: `.T.SetErrorTB(t)`
$DIR/internal/grid/grid_test.go: `.Run("localToRemote", func(t *testing.T) {
		const testPayload = "Hello Grid World!"

		start := time.Now()
		resp, err := remoteConn.Request(context.Background(), handlerTest, []byte(testPayload))
		errFatal(err)
		if string(resp) != testPayload {
			t.Errorf("want %q, got %q", testPayload, string(resp))
		}
		t.Log("Roundtrip:", time.Since(start))
	})`
$DIR/internal/grid/grid_test.go: `.Now()`
$DIR/internal/grid/grid_test.go: `.Request(context.Background(), handlerTest, []byte(testPayload))`
$DIR/internal/grid/grid_test.go: `.Background()`
$DIR/internal/grid/grid_test.go: `.Run("localToRemoteErr", func(t *testing.T) {
		const testPayload = "Hello Grid World!"
		start := time.Now()
		resp, err := remoteConn.Request(context.Background(), handlerTest2, []byte(testPayload))
		t.Log("Roundtrip:", time.Since(start))
		if len(resp) != 0 {
			t.Errorf("want nil, got %q", string(resp))
		}
		if err != RemoteErr(testPayload) {
			t.Errorf("want error %v(%T), got %v(%T)", RemoteErr(testPayload), RemoteErr(testPayload), err, err)
		}
		t.Log("Roundtrip:", time.Since(start))
	})`
$DIR/internal/grid/grid_test.go: `.Now()`
$DIR/internal/grid/grid_test.go: `.Request(context.Background(), handlerTest2, []byte(testPayload))`
$DIR/internal/grid/grid_test.go: `.Background()`
$DIR/internal/grid/grid_test.go: `.Run("localToRemoteHuge", func(t *testing.T) {
		testPayload := bytes.Repeat([]byte("?"), 1<<20)

		start := time.Now()
		resp, err := remoteConn.Request(context.Background(), handlerTest, testPayload)
		errFatal(err)
		if string(resp) != string(testPayload) {
			t.Errorf("want %q, got %q", testPayload, string(resp))
		}
		t.Log("Roundtrip:", time.Since(start))
	})`
$DIR/internal/grid/grid_test.go: `.Repeat([]byte("?"), 1<<20)`
$DIR/internal/grid/grid_test.go: `.Now()`
$DIR/internal/grid/grid_test.go: `.Request(context.Background(), handlerTest, testPayload)`
$DIR/internal/grid/grid_test.go: `.Background()`
$DIR/internal/grid/grid_test.go: `.Repeat([]byte("!"), 1<<10)`
$DIR/internal/grid/grid_test.go: `.Now()`
$DIR/internal/grid/grid_test.go: `.Request(context.Background(), handlerTest2, testPayload)`
$DIR/internal/grid/grid_test.go: `.Background()`
$DIR/internal/grid/grid_test.go: `.T.SetLogTB(t)`
$DIR/internal/grid/grid_test.go: `.Helper()`
$DIR/internal/grid/grid_test.go: `.RegisterSingleHandler(handlerTest, func(payload []byte) ([]byte, *RemoteErr) {
		t.Log("1: server payload: ", len(payload), "bytes.")
		return append([]byte{}, payload...), nil
	})`
$DIR/internal/grid/grid_test.go: `.RegisterSingleHandler(handlerTest2, func(payload []byte) ([]byte, *RemoteErr) {
		t.Log("2: server payload: ", len(payload), "bytes.")
		err := RemoteErr(payload)
		return nil, &err
	})`
$DIR/internal/grid/grid_test.go: `.Connection(remoteHost)`
$DIR/internal/grid/grid_test.go: `.WaitForConnect(context.Background())`
$DIR/internal/grid/grid_test.go: `.Background()`
$DIR/internal/grid/grid_test.go: `.T.SetErrorTB(t)`
$DIR/internal/grid/grid_test.go: `.Request(context.Background(), handlerTest, []byte(testPayload))`
$DIR/internal/grid/grid_test.go: `.Background()`
$DIR/internal/grid/grid_test.go: `.NewStream(context.Background(), handlerTest, []byte(testPayload))`
$DIR/internal/grid/grid_test.go: `.Background()`
$DIR/internal/grid/grid_test.go: `.Is(err, ErrUnknownHandler)`
$DIR/internal/grid/grid_test.go: `.T.SetLogTB(t)`
$DIR/internal/grid/grid_test.go: `.Helper()`
$DIR/internal/grid/grid_test.go: `.NewResponse()`
$DIR/internal/grid/grid_test.go: `.Register(local, handler1)`
$DIR/internal/grid/grid_test.go: `.Register(local, handler2)`
$DIR/internal/grid/grid_test.go: `.Register(remote, handler1)`
$DIR/internal/grid/grid_test.go: `.Register(remote, handler2)`
$DIR/internal/grid/grid_test.go: `.Connection(remoteHost)`
$DIR/internal/grid/grid_test.go: `.Now()`
$DIR/internal/grid/grid_test.go: `.Call(context.Background(), remoteConn, &req)`
$DIR/internal/grid/grid_test.go: `.Background()`
$DIR/internal/grid/grid_test.go: `.PutResponse(resp)`
$DIR/internal/grid/grid_test.go: `.Now()`
$DIR/internal/grid/grid_test.go: `.Call(context.Background(), remoteConn, &testRequest{Num: 1, String: testPayload})`
$DIR/internal/grid/grid_test.go: `.Background()`
$DIR/internal/grid/grid_test.go: `.PutResponse(resp)`
$DIR/internal/grid/grid_test.go: `.Since(start)`
$DIR/internal/grid/grid_test.go: `.T.SetLogTB(t)`
$DIR/internal/grid/grid_test.go: `.Helper()`
$DIR/internal/grid/grid_test.go: `.NewResponse()`
$DIR/internal/grid/grid_test.go: `.Recycle()`
$DIR/internal/grid/grid_test.go: `.Get("err")`
$DIR/internal/grid/grid_test.go: `.Register(local, handler1)`
$DIR/internal/grid/grid_test.go: `.Register(local, handler2)`
$DIR/internal/grid/grid_test.go: `.Register(remote, handler1)`
$DIR/internal/grid/grid_test.go: `.Register(remote, handler2)`
$DIR/internal/grid/grid_test.go: `.Connection(remoteHost)`
$DIR/internal/grid/grid_test.go: `.Now()`
$DIR/internal/grid/grid_test.go: `.Call(context.Background(), remoteConn, req)`
$DIR/internal/grid/grid_test.go: `.Background()`
$DIR/internal/grid/grid_test.go: `.Get("test")`
$DIR/internal/grid/grid_test.go: `.PutResponse(resp)`
$DIR/internal/grid/grid_test.go: `.Now()`
$DIR/internal/grid/grid_test.go: `.Call(context.Background(), remoteConn, NewMSSWith(map[string]string{"err": testPayload}))`
$DIR/internal/grid/grid_test.go: `.Background()`
$DIR/internal/grid/grid_test.go: `.T.SetErrorTB(t)`
$DIR/internal/grid/grid_test.go: `.Helper()`
$DIR/internal/grid/grid_test.go: `.Cleanup(grid.Cleanup)`
$DIR/internal/grid/grid_test.go: `.Connection(remoteHost)`
$DIR/internal/grid/grid_test.go: `.Connection(localHost)`
$DIR/internal/grid/grid_test.go: `.Run("testStreamRoundtrip", func(t *testing.T) {
		defer timeout(5 * time.Second)()
		testStreamRoundtrip(t, local, remote)
		assertNoActive(t, connRemoteLocal)
		assertNoActive(t, connLocalToRemote)
	})`
$DIR/internal/grid/grid_test.go: `.Run("testStreamCancel", func(t *testing.T) {
		defer timeout(5 * time.Second)()
		testStreamCancel(t, local, remote)
		assertNoActive(t, connRemoteLocal)
		assertNoActive(t, connLocalToRemote)
	})`
$DIR/internal/grid/grid_test.go: `.Run("testStreamDeadline", func(t *testing.T) {
		defer timeout(5 * time.Second)()
		testStreamDeadline(t, local, remote)
		assertNoActive(t, connRemoteLocal)
		assertNoActive(t, connLocalToRemote)
	})`
$DIR/internal/grid/grid_test.go: `.Run("testServerOutCongestion", func(t *testing.T) {
		defer timeout(1 * time.Minute)()
		testServerOutCongestion(t, local, remote)
		assertNoActive(t, connRemoteLocal)
		assertNoActive(t, connLocalToRemote)
	})`
$DIR/internal/grid/grid_test.go: `.Run("testServerInCongestion", func(t *testing.T) {
		defer timeout(1 * time.Minute)()
		testServerInCongestion(t, local, remote)
		assertNoActive(t, connRemoteLocal)
		assertNoActive(t, connLocalToRemote)
	})`
$DIR/internal/grid/grid_test.go: `.Run("testGenericsStreamRoundtrip", func(t *testing.T) {
		defer timeout(1 * time.Minute)()
		testGenericsStreamRoundtrip(t, local, remote)
		assertNoActive(t, connRemoteLocal)
		assertNoActive(t, connLocalToRemote)
	})`
$DIR/internal/grid/grid_test.go: `.Run("testGenericsStreamRoundtripSubroute", func(t *testing.T) {
		defer timeout(1 * time.Minute)()
		testGenericsStreamRoundtripSubroute(t, local, remote)
		assertNoActive(t, connRemoteLocal)
		assertNoActive(t, connLocalToRemote)
	})`
$DIR/internal/grid/msg_gen_test.go: `left, err = msgp.Skip(bts)`
$DIR/internal/grid/msg_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/internal/grid/msg_gen_test.go: `buf.Reset()`
$DIR/internal/grid/msg_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/internal/grid/msg_gen_test.go: `err = msgp.NewReader(&buf).Skip()`
$DIR/internal/grid/msg_gen_test.go: `left, err = msgp.Skip(bts)`
$DIR/internal/grid/msg_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/internal/grid/msg_gen_test.go: `buf.Reset()`
$DIR/internal/grid/msg_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/internal/grid/msg_gen_test.go: `err = msgp.NewReader(&buf).Skip()`
$DIR/internal/grid/msg_gen_test.go: `left, err = msgp.Skip(bts)`
$DIR/internal/grid/msg_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/internal/grid/msg_gen_test.go: `buf.Reset()`
$DIR/internal/grid/msg_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/internal/grid/msg_gen_test.go: `err = msgp.NewReader(&buf).Skip()`
$DIR/internal/grid/msg_gen_test.go: `left, err = msgp.Skip(bts)`
$DIR/internal/grid/msg_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/internal/grid/msg_gen_test.go: `buf.Reset()`
$DIR/internal/grid/msg_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/internal/grid/msg_gen_test.go: `err = msgp.NewReader(&buf).Skip()`
$DIR/internal/grid/msg_gen_test.go: `left, err = msgp.Skip(bts)`
$DIR/internal/grid/msg_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/internal/grid/msg_gen_test.go: `buf.Reset()`
$DIR/internal/grid/msg_gen_test.go: `msgp.Encode(&buf, &v)`
$DIR/internal/grid/msg_gen_test.go: `err = msgp.NewReader(&buf).Skip()`
$DIR/internal/grid/msg_gen_test.go: `.MarshalMsg(nil)`
$DIR/internal/grid/msg_gen_test.go: `.UnmarshalMsg(bts)`
$DIR/internal/grid/msg_gen_test.go: `.Encode(&buf, &v)`
$DIR/internal/grid/msg_gen_test.go: `.Msgsize()`
$DIR/internal/grid/msg_gen_test.go: `.Len()`
$DIR/internal/grid/msg_gen_test.go: `.Decode(&buf, &vn)`
$DIR/internal/grid/msg_gen_test.go: `.Reset()`
$DIR/internal/grid/msg_gen_test.go: `.Encode(&buf, &v)`
$DIR/internal/grid/msg_gen_test.go: `.MarshalMsg(nil)`
$DIR/internal/grid/msg_gen_test.go: `.UnmarshalMsg(bts)`
$DIR/internal/grid/msg_gen_test.go: `.Encode(&buf, &v)`
$DIR/internal/grid/msg_gen_test.go: `.Msgsize()`
$DIR/internal/grid/msg_gen_test.go: `.Len()`
$DIR/internal/grid/msg_gen_test.go: `.Decode(&buf, &vn)`
$DIR/internal/grid/msg_gen_test.go: `.Reset()`
$DIR/internal/grid/msg_gen_test.go: `.Encode(&buf, &v)`
$DIR/internal/grid/msg_gen_test.go: `.MarshalMsg(nil)`
$DIR/internal/grid/msg_gen_test.go: `.UnmarshalMsg(bts)`
$DIR/internal/grid/msg_gen_test.go: `.Encode(&buf, &v)`
$DIR/internal/grid/msg_gen_test.go: `.Msgsize()`
$DIR/internal/grid/msg_gen_test.go: `.Len()`
$DIR/internal/grid/msg_gen_test.go: `.Decode(&buf, &vn)`
$DIR/internal/grid/msg_gen_test.go: `.Reset()`
$DIR/internal/grid/msg_gen_test.go: `.Encode(&buf, &v)`
$DIR/internal/grid/msg_gen_test.go: `.MarshalMsg(nil)`
$DIR/internal/grid/msg_gen_test.go: `.UnmarshalMsg(bts)`
$DIR/internal/grid/msg_gen_test.go: `.Encode(&buf, &v)`
$DIR/internal/grid/msg_gen_test.go: `.Msgsize()`
$DIR/internal/grid/msg_gen_test.go: `.Len()`
$DIR/internal/grid/msg_gen_test.go: `.Decode(&buf, &vn)`
$DIR/internal/grid/msg_gen_test.go: `.Reset()`
$DIR/internal/grid/msg_gen_test.go: `.Encode(&buf, &v)`
$DIR/internal/grid/msg_gen_test.go: `.MarshalMsg(nil)`
$DIR/internal/grid/msg_gen_test.go: `.UnmarshalMsg(bts)`
$DIR/internal/grid/msg_gen_test.go: `.Encode(&buf, &v)`
$DIR/internal/grid/msg_gen_test.go: `.Msgsize()`
$DIR/internal/grid/msg_gen_test.go: `.Len()`
$DIR/internal/grid/msg_gen_test.go: `.Decode(&buf, &vn)`
$DIR/internal/grid/msg_gen_test.go: `.Reset()`
$DIR/internal/grid/msg_gen_test.go: `.Encode(&buf, &v)`
$DIR/internal/grid/types_test.go: `left, err = msgp.Skip(bts)`
$DIR/internal/grid/types_test.go: `left, err = msgp.Skip(bts)`
$DIR/internal/grid/types_test.go: `left, err = msgp.Skip(bts)`
$DIR/internal/grid/types_test.go: `left, err = msgp.Skip(bts)`
$DIR/internal/grid/types_test.go: `.MarshalMsg(nil)`
$DIR/internal/grid/types_test.go: `.UnmarshalMsg(bts)`
$DIR/internal/grid/types_test.go: `.DeepEqual(v, v2)`
$DIR/internal/grid/types_test.go: `.MarshalMsg(nil)`
$DIR/internal/grid/types_test.go: `.UnmarshalMsg(bts)`
$DIR/internal/grid/types_test.go: `.DeepEqual(v, v2)`
$DIR/internal/grid/types_test.go: `.MarshalMsg(nil)`
$DIR/internal/grid/types_test.go: `.UnmarshalMsg(bts)`
$DIR/internal/grid/types_test.go: `.DeepEqual(v, v2)`
$DIR/internal/grid/types_test.go: `.MarshalMsg(nil)`
$DIR/internal/grid/types_test.go: `.UnmarshalMsg(bts)`
$DIR/internal/grid/types_test.go: `.DeepEqual(v, v2)`
$DIR/internal/hash/reader_test.go: `_, err = io.Copy(io.Discard, r)`
$DIR/internal/hash/reader_test.go: `t.Run(fmt.Sprintf("case-%d", i+1), func(t *testing.T) {
			r, err := NewReader(context.Background(), testCase.src, testCase.size, testCase.md5hex, testCase.sha256hex, testCase.actualSize)
			if err != nil {
				t.Fatalf("Test %q: Initializing reader failed %s", testCase.desc, err)
			}
			_, err = io.Copy(io.Discard, r)
			if err != nil {
				if testCase.err == nil {
					t.Errorf("Test %q; got unexpected error: %v", testCase.desc, err)
					return
				}
				if err.Error() != testCase.err.Error() {
					t.Errorf("Test %q: Expected error %s, got error %s", testCase.desc, testCase.err, err)
				}
			}
		})`
$DIR/internal/hash/reader_test.go: `_, err = io.Copy(io.Discard, r)`
$DIR/internal/hash/reader_test.go: `t.Run(fmt.Sprintf("case-%d", i+1), func(t *testing.T) {
			_, err := NewReader(context.Background(), testCase.src, testCase.size, testCase.md5hex, testCase.sha256hex, testCase.actualSize)
			if err != nil && testCase.success {
				t.Errorf("Test %q: Expected success, but got error %s instead", testCase.desc, err)
			}
			if err == nil && !testCase.success {
				t.Errorf("Test %q: Expected error, but got success", testCase.desc)
			}
		})`
$DIR/internal/hash/reader_test.go: `.Background()`
$DIR/internal/hash/reader_test.go: `.NewReader([]byte("abcd"))`
$DIR/internal/hash/reader_test.go: `.Copy(io.Discard, r)`
$DIR/internal/hash/reader_test.go: `.MD5Current()`
$DIR/internal/hash/reader_test.go: `.EncodeToString(md5sum)`
$DIR/internal/hash/reader_test.go: `.SHA256HexString()`
$DIR/internal/hash/reader_test.go: `.StdEncoding.EncodeToString(md5sum)`
$DIR/internal/hash/reader_test.go: `.Size()`
$DIR/internal/hash/reader_test.go: `.ActualSize()`
$DIR/internal/hash/reader_test.go: `.DecodeString("e2fc714c4727ee9395f324cd2e7f331f")`
$DIR/internal/hash/reader_test.go: `.Equal(r.MD5Current(), expectedMD5)`
$DIR/internal/hash/reader_test.go: `.MD5Current()`
$DIR/internal/hash/reader_test.go: `.DecodeString("88d4266fd4e6338d13b845fcf289579d209c897823b9217da3e161936f031589")`
$DIR/internal/hash/reader_test.go: `.Equal(r.SHA256(), expectedSHA256)`
$DIR/internal/hash/reader_test.go: `.SHA256()`
$DIR/internal/hash/reader_test.go: `.NewReader([]byte("abcd"))`
$DIR/internal/hash/reader_test.go: `.NewReader([]byte("abcd"))`
$DIR/internal/hash/reader_test.go: `.NewReader([]byte("abcd"))`
$DIR/internal/hash/reader_test.go: `.NewReader([]byte("abcd"))`
$DIR/internal/hash/reader_test.go: `.NewReader([]byte("abcd"))`
$DIR/internal/hash/reader_test.go: `.NewReader([]byte("abcd"))`
$DIR/internal/hash/reader_test.go: `.NewReader([]byte("abcd-more-stuff-to-be ignored"))`
$DIR/internal/hash/reader_test.go: `.NewReader([]byte("abcd-more-stuff-to-be ignored"))`
$DIR/internal/hash/reader_test.go: `.NewReader([]byte("abcd"))`
$DIR/internal/hash/reader_test.go: `.NewReader([]byte("abcd-morethan-4-bytes"))`
$DIR/internal/hash/reader_test.go: `.NewReader([]byte("abcd"))`
$DIR/internal/hash/reader_test.go: `.NewReader([]byte("abcd-morethan-4-bytes"))`
$DIR/internal/hash/reader_test.go: `.NewReader([]byte("abcd-morestuff"))`
$DIR/internal/hash/reader_test.go: `.Run(fmt.Sprintf("case-%d", i+1), func(t *testing.T) {
			r, err := NewReader(context.Background(), testCase.src, testCase.size, testCase.md5hex, testCase.sha256hex, testCase.actualSize)
			if err != nil {
				t.Fatalf("Test %q: Initializing reader failed %s", testCase.desc, err)
			}
			_, err = io.Copy(io.Discard, r)
			if err != nil {
				if testCase.err == nil {
					t.Errorf("Test %q; got unexpected error: %v", testCase.desc, err)
					return
				}
				if err.Error() != testCase.err.Error() {
					t.Errorf("Test %q: Expected error %s, got error %s", testCase.desc, testCase.err, err)
				}
			}
		})`
$DIR/internal/hash/reader_test.go: `.Sprintf("case-%d", i+1)`
$DIR/internal/hash/reader_test.go: `.Background()`
$DIR/internal/hash/reader_test.go: `.Copy(io.Discard, r)`
$DIR/internal/hash/reader_test.go: `.NewReader([]byte("abcd"))`
$DIR/internal/hash/reader_test.go: `.NewReader([]byte("abcd"))`
$DIR/internal/hash/reader_test.go: `.NewReader([]byte("abcd"))`
$DIR/internal/hash/reader_test.go: `.NewReader([]byte("abcd"))`
$DIR/internal/hash/reader_test.go: `.NewReader([]byte("abcd"))`
$DIR/internal/hash/reader_test.go: `.NewReader([]byte("abcd"))`
$DIR/internal/hash/reader_test.go: `.NewReader([]byte("abcd"))`
$DIR/internal/hash/reader_test.go: `.NewReader([]byte("abcd"))`
$DIR/internal/hash/reader_test.go: `.NewReader([]byte("abcd-morestuff"))`
$DIR/internal/hash/reader_test.go: `.Run(fmt.Sprintf("case-%d", i+1), func(t *testing.T) {
			_, err := NewReader(context.Background(), testCase.src, testCase.size, testCase.md5hex, testCase.sha256hex, testCase.actualSize)
			if err != nil && testCase.success {
				t.Errorf("Test %q: Expected success, but got error %s instead", testCase.desc, err)
			}
			if err == nil && !testCase.success {
				t.Errorf("Test %q: Expected error, but got success", testCase.desc)
			}
		})`
$DIR/internal/hash/reader_test.go: `.Sprintf("case-%d", i+1)`
$DIR/internal/hash/reader_test.go: `.Background()`
$DIR/internal/http/check_port_test.go: `.Listen("tcp", "localhost:0")`
$DIR/internal/http/check_port_test.go: `.Addr()`
$DIR/internal/http/check_port_test.go: `.Itoa(testCase.port)`
$DIR/internal/http/listener_test.go: `casePorts = append(casePorts, getNextPort())`
$DIR/internal/http/listener_test.go: `casePorts = append(casePorts, getNextPort())`
$DIR/internal/http/listener_test.go: `addrSet.Add(addr.String())`
$DIR/internal/http/listener_test.go: `.Duration(0)`
$DIR/internal/http/listener_test.go: `.Duration(0)`
$DIR/internal/http/listener_test.go: `.Duration(0)`
$DIR/internal/http/listener_test.go: `.Duration(0)`
$DIR/internal/http/listener_test.go: `.Duration(0)`
$DIR/internal/http/listener_test.go: `.Duration(0)`
$DIR/internal/http/listener_test.go: `.Duration(0)`
$DIR/internal/http/listener_test.go: `.Duration(0)`
$DIR/internal/http/listener_test.go: `.Duration(0)`
$DIR/internal/http/listener_test.go: `.Duration(0)`
$DIR/internal/http/listener_test.go: `.Duration(0)`
$DIR/internal/http/listener_test.go: `.Duration(0)`
$DIR/internal/http/listener_test.go: `.Duration(0)`
$DIR/internal/http/listener_test.go: `.Duration(0)`
$DIR/internal/http/listener_test.go: `.Duration(0)`
$DIR/internal/http/listener_test.go: `.Duration(0)`
$DIR/internal/http/listener_test.go: `.Duration(0)`
$DIR/internal/http/listener_test.go: `.Duration(0)`
$DIR/internal/http/listener_test.go: `.Duration(0)`
$DIR/internal/http/listener_test.go: `.Duration(0)`
$DIR/internal/http/listener_test.go: `.Duration(0)`
$DIR/internal/http/listener_test.go: `.Duration(0)`
$DIR/internal/http/listener_test.go: `.Duration(0)`
$DIR/internal/http/listener_test.go: `.Duration(0)`
$DIR/internal/http/listener_test.go: `.Duration(0)`
$DIR/internal/http/listener_test.go: `.Duration(0)`
$DIR/internal/http/listener_test.go: `.Duration(0)`
$DIR/internal/http/listener_test.go: `.Duration(0)`
$DIR/internal/http/listener_test.go: `.Duration(0)`
$DIR/internal/http/listener_test.go: `.Duration(0)`
$DIR/internal/http/listener_test.go: `.Duration(0)`
$DIR/internal/http/listener_test.go: `.Duration(0)`
$DIR/internal/http/listener_test.go: `.Duration(0)`
$DIR/internal/http/listener_test.go: `.Duration(0)`
$DIR/internal/http/listener_test.go: `.Duration(0)`
$DIR/internal/http/listener_test.go: `.Duration(0)`
$DIR/internal/http/listener_test.go: `.Background()`
$DIR/internal/http/listener_test.go: `.Background()`
$DIR/internal/http/listener_test.go: `.Contains(err.Error(), "The requested address is not valid in its context")`
$DIR/internal/http/listener_test.go: `.Contains(err.Error(), "bind: address already in use")`
$DIR/internal/http/listener_test.go: `.Addrs()`
$DIR/internal/http/listener_test.go: `.Dial("tcp", serverAddr.String())`
$DIR/internal/http/listener_test.go: `.String()`
$DIR/internal/http/listener_test.go: `.Background()`
$DIR/internal/http/listener_test.go: `.Contains(err.Error(), "The requested address is not valid in its context")`
$DIR/internal/http/listener_test.go: `.Contains(err.Error(), "bind: address already in use")`
$DIR/internal/http/listener_test.go: `.Addr()`
$DIR/internal/http/listener_test.go: `.String()`
$DIR/internal/http/listener_test.go: `.CreateStringSet("127.0.0.1:" + casePorts[0])`
$DIR/internal/http/listener_test.go: `.CreateStringSet(nonLoopBackIP + ":" + casePorts[1])`
$DIR/internal/http/listener_test.go: `.CreateStringSet("127.0.0.1:"+casePorts[2], nonLoopBackIP+":"+casePorts[2])`
$DIR/internal/http/listener_test.go: `.CreateStringSet("127.0.0.1:" + casePorts[3])`
$DIR/internal/http/listener_test.go: `.CreateStringSet(nonLoopBackIP + ":" + casePorts[4])`
$DIR/internal/http/listener_test.go: `.CreateStringSet("127.0.0.1:"+casePorts[5], nonLoopBackIP+":"+casePorts[5])`
$DIR/internal/http/listener_test.go: `.Background()`
$DIR/internal/http/listener_test.go: `.Contains(err.Error(), "The requested address is not valid in its context")`
$DIR/internal/http/listener_test.go: `.Contains(err.Error(), "bind: address already in use")`
$DIR/internal/http/listener_test.go: `.Addrs()`
$DIR/internal/http/listener_test.go: `.NewStringSet()`
$DIR/internal/http/listener_test.go: `.Add(addr.String())`
$DIR/internal/http/listener_test.go: `.String()`
$DIR/internal/http/listener_test.go: `.Equals(testCase.expectedAddrs)`
$DIR/internal/http/server_test.go: `fmt.Fprintf(w, "Hello, world")`
$DIR/internal/http/server_test.go: `server = server.UseTLSConfig(&tls.Config{
				PreferServerCipherSuites: true,
				GetCertificate:           testCase.certFn,
			})`
$DIR/internal/http/server_test.go: `.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		fmt.Fprintf(w, "Hello, world")
	})`
$DIR/internal/http/server_test.go: `.Fprintf(w, "Hello, world")`
$DIR/internal/http/server_test.go: `.
			UseHandler(testCase.handler)`
$DIR/internal/http/server_test.go: `.
			UseShutdownTimeout(DefaultShutdownTimeout)`
$DIR/internal/http/server_test.go: `.UseTLSConfig(&tls.Config{
				PreferServerCipherSuites: true,
				GetCertificate:           testCase.certFn,
			})`
$DIR/internal/http/server_test.go: `.DeepEqual(server.Addrs, testCase.addrs)`
$DIR/internal/ioutil/ioutil_test.go: `time.Sleep(600 * time.Millisecond)`
$DIR/internal/ioutil/ioutil_test.go: `time.Sleep(450 * time.Millisecond)`
$DIR/internal/ioutil/ioutil_test.go: `_, err = w.Write([]byte("1"))`
$DIR/internal/ioutil/ioutil_test.go: `w = NewDeadlineWriter(&sleepWriter{timeout: 100 * time.Millisecond}, 600*time.Millisecond)`
$DIR/internal/ioutil/ioutil_test.go: `writer.Write(nil)`
$DIR/internal/ioutil/ioutil_test.go: `writer = WriteOnClose(io.Discard)`
$DIR/internal/ioutil/ioutil_test.go: `f.WriteString("aaaaaaaaaa")`
$DIR/internal/ioutil/ioutil_test.go: `f, err = os.CreateTemp("", "")`
$DIR/internal/ioutil/ioutil_test.go: `f.WriteString("bbbbbbbbbb")`
$DIR/internal/ioutil/ioutil_test.go: `fi2, err = os.Stat(tmpFile)`
$DIR/internal/ioutil/ioutil_test.go: `f.Seek(0, io.SeekStart)`
$DIR/internal/ioutil/ioutil_test.go: `r.Seek(0, io.SeekStart)`
$DIR/internal/ioutil/ioutil_test.go: `written, err = CopyAligned(f, r, *bufp, r.Size(), f)`
$DIR/internal/ioutil/ioutil_test.go: `.Run(func() error {
		time.Sleep(600 * time.Millisecond)
		return nil
	})`
$DIR/internal/ioutil/ioutil_test.go: `.Sleep(600 * time.Millisecond)`
$DIR/internal/ioutil/ioutil_test.go: `.Run(func() error {
		time.Sleep(450 * time.Millisecond)
		return nil
	})`
$DIR/internal/ioutil/ioutil_test.go: `.Sleep(450 * time.Millisecond)`
$DIR/internal/ioutil/ioutil_test.go: `.Write([]byte("1"))`
$DIR/internal/ioutil/ioutil_test.go: `.Write([]byte("1"))`
$DIR/internal/ioutil/ioutil_test.go: `.Write([]byte("abcd"))`
$DIR/internal/ioutil/ioutil_test.go: `.HasWritten()`
$DIR/internal/ioutil/ioutil_test.go: `.Write(nil)`
$DIR/internal/ioutil/ioutil_test.go: `.HasWritten()`
$DIR/internal/ioutil/ioutil_test.go: `.HasWritten()`
$DIR/internal/ioutil/ioutil_test.go: `.CreateTemp("", "")`
$DIR/internal/ioutil/ioutil_test.go: `.Name()`
$DIR/internal/ioutil/ioutil_test.go: `.Remove(name1)`
$DIR/internal/ioutil/ioutil_test.go: `.WriteString("aaaaaaaaaa")`
$DIR/internal/ioutil/ioutil_test.go: `.CreateTemp("", "")`
$DIR/internal/ioutil/ioutil_test.go: `.Name()`
$DIR/internal/ioutil/ioutil_test.go: `.Remove(name2)`
$DIR/internal/ioutil/ioutil_test.go: `.WriteString("bbbbbbbbbb")`
$DIR/internal/ioutil/ioutil_test.go: `.ReadFile(name1)`
$DIR/internal/ioutil/ioutil_test.go: `.NewBuffer([]byte(""))`
$DIR/internal/ioutil/ioutil_test.go: `.NewBuffer([]byte(""))`
$DIR/internal/ioutil/ioutil_test.go: `.NewBuffer([]byte("abc"))`
$DIR/internal/ioutil/ioutil_test.go: `.NewBuffer([]byte("abc"))`
$DIR/internal/ioutil/ioutil_test.go: `.NewBuffer([]byte("abc"))`
$DIR/internal/ioutil/ioutil_test.go: `.NewBuffer([]byte("abc"))`
$DIR/internal/ioutil/ioutil_test.go: `.NewBuffer([]byte("abc"))`
$DIR/internal/ioutil/ioutil_test.go: `.ReadAll(r)`
$DIR/internal/ioutil/ioutil_test.go: `.CreateTemp("", "")`
$DIR/internal/ioutil/ioutil_test.go: `.Name()`
$DIR/internal/ioutil/ioutil_test.go: `.Remove(f.Name())`
$DIR/internal/ioutil/ioutil_test.go: `.Name()`
$DIR/internal/ioutil/ioutil_test.go: `.Stat(tmpFile)`
$DIR/internal/ioutil/ioutil_test.go: `.Stat(tmpFile)`
$DIR/internal/ioutil/ioutil_test.go: `.WriteFile(tmpFile, []byte("aaa"), 0o644)`
$DIR/internal/ioutil/ioutil_test.go: `.Stat(tmpFile)`
$DIR/internal/ioutil/ioutil_test.go: `.CreateTemp("", "")`
$DIR/internal/ioutil/ioutil_test.go: `.Remove(f.Name())`
$DIR/internal/ioutil/ioutil_test.go: `.Name()`
$DIR/internal/ioutil/ioutil_test.go: `.NewReader("hello world")`
$DIR/internal/ioutil/ioutil_test.go: `.Get()`
$DIR/internal/ioutil/ioutil_test.go: `.Put(bufp)`
$DIR/internal/ioutil/ioutil_test.go: `.LimitReader(r, 5)`
$DIR/internal/ioutil/ioutil_test.go: `.Size()`
$DIR/internal/ioutil/ioutil_test.go: `.Is(err, io.ErrUnexpectedEOF)`
$DIR/internal/ioutil/ioutil_test.go: `.Seek(0, io.SeekStart)`
$DIR/internal/ioutil/ioutil_test.go: `.Seek(0, io.SeekStart)`
$DIR/internal/ioutil/ioutil_test.go: `.Size()`
$DIR/internal/ioutil/ioutil_test.go: `.Is(err, nil)`
$DIR/internal/ioutil/ioutil_test.go: `.Size()`
$DIR/internal/jwt/parser_test.go: `t.Run(data.name, func(t *testing.T) {
			// Parse the token
			var err error

			// Figure out correct claims type
			switch claims := data.claims.(type) {
			case *MapClaims:
				if data.tokenString == "" {
					data.tokenString = mapClaimsToken(claims)
				}
				err = ParseWithClaims(data.tokenString, &MapClaims{}, data.keyfunc)
			case *StandardClaims:
				if data.tokenString == "" {
					data.tokenString = standardClaimsToken(claims)
				}
				err = ParseWithStandardClaims(data.tokenString, &StandardClaims{}, []byte("HelloSecret"))
			}

			if data.valid && err != nil {
				t.Errorf("Error while verifying token: %T:%v", err, err)
			}

			if !data.valid && err == nil {
				t.Errorf("Invalid token passed validation")
			}

			if data.errors != 0 {
				_, ok := err.(*jwt.ValidationError)
				if !ok {
					t.Errorf("Expected *jwt.ValidationError, but got %#v instead", err)
				}
			}
		})`
$DIR/internal/jwt/parser_test.go: `data.tokenString = mapClaimsToken(claims)`
$DIR/internal/jwt/parser_test.go: `err = ParseWithClaims(data.tokenString, &MapClaims{}, data.keyfunc)`
$DIR/internal/jwt/parser_test.go: `data.tokenString = standardClaimsToken(claims)`
$DIR/internal/jwt/parser_test.go: `err = ParseWithStandardClaims(data.tokenString, &StandardClaims{}, []byte("HelloSecret"))`
$DIR/internal/jwt/parser_test.go: `.Run(data.name, func(t *testing.T) {
			// Parse the token
			var err error

			// Figure out correct claims type
			switch claims := data.claims.(type) {
			case *MapClaims:
				if data.tokenString == "" {
					data.tokenString = mapClaimsToken(claims)
				}
				err = ParseWithClaims(data.tokenString, &MapClaims{}, data.keyfunc)
			case *StandardClaims:
				if data.tokenString == "" {
					data.tokenString = standardClaimsToken(claims)
				}
				err = ParseWithStandardClaims(data.tokenString, &StandardClaims{}, []byte("HelloSecret"))
			}

			if data.valid && err != nil {
				t.Errorf("Error while verifying token: %T:%v", err, err)
			}

			if !data.valid && err == nil {
				t.Errorf("Invalid token passed validation")
			}

			if data.errors != 0 {
				_, ok := err.(*jwt.ValidationError)
				if !ok {
					t.Errorf("Expected *jwt.ValidationError, but got %#v instead", err)
				}
			}
		})`
$DIR/internal/kms/config_test.go: `os.Clearenv()`
$DIR/internal/kms/config_test.go: `os.Setenv(k, v)`
$DIR/internal/kms/config_test.go: `.Clearenv()`
$DIR/internal/kms/config_test.go: `.Setenv(k, v)`
$DIR/internal/kms/dek_test.go: `.Key.MarshalText()`
$DIR/internal/kms/dek_test.go: `.UnmarshalText(text)`
$DIR/internal/kms/dek_test.go: `.Equal(key.Ciphertext, test.Key.Ciphertext)`
$DIR/internal/kms/secret-key_test.go: `.GenerateKey(context.Background(), &GenerateKeyRequest{Name: "my-key"})`
$DIR/internal/kms/secret-key_test.go: `.Background()`
$DIR/internal/kms/secret-key_test.go: `.Decrypt(context.TODO(), &DecryptRequest{
		Name:       key.KeyID,
		Ciphertext: key.Ciphertext,
	})`
$DIR/internal/kms/secret-key_test.go: `.TODO()`
$DIR/internal/kms/secret-key_test.go: `.Equal(key.Plaintext, plaintext)`
$DIR/internal/kms/secret-key_test.go: `.StdEncoding.DecodeString(test.Plaintext)`
$DIR/internal/kms/secret-key_test.go: `.Decrypt(context.TODO(), &DecryptRequest{
			Name:           test.KeyID,
			Ciphertext:     []byte(test.Ciphertext),
			AssociatedData: test.Context,
		})`
$DIR/internal/kms/secret-key_test.go: `.TODO()`
$DIR/internal/kms/secret-key_test.go: `.Equal(plaintext, dataKey)`
$DIR/internal/lock/lock_test.go: `err = os.Remove(f.Name())`
$DIR/internal/lock/lock_test.go: `_, err = LockedOpenFile(f.Name(), os.O_APPEND, 0o600)`
$DIR/internal/lock/lock_test.go: `err = os.Remove(f.Name())`
$DIR/internal/lock/lock_test.go: `rlk.IncLockRef()`
$DIR/internal/lock/lock_test.go: `isClosed = rlk.IsClosed()`
$DIR/internal/lock/lock_test.go: `isClosed = rlk.IsClosed()`
$DIR/internal/lock/lock_test.go: `isClosed = rlk.IsClosed()`
$DIR/internal/lock/lock_test.go: `_, err = newRLockedFile(nil)`
$DIR/internal/lock/lock_test.go: `err = os.Remove(f.Name())`
$DIR/internal/lock/lock_test.go: `locked <- struct{}{}`
$DIR/internal/lock/lock_test.go: `.CreateTemp("", "lock")`
$DIR/internal/lock/lock_test.go: `.Remove(f.Name())`
$DIR/internal/lock/lock_test.go: `.Name()`
$DIR/internal/lock/lock_test.go: `.Name()`
$DIR/internal/lock/lock_test.go: `.TempDir()`
$DIR/internal/lock/lock_test.go: `.CreateTemp("", "lock")`
$DIR/internal/lock/lock_test.go: `.Remove(f.Name())`
$DIR/internal/lock/lock_test.go: `.Name()`
$DIR/internal/lock/lock_test.go: `.Name()`
$DIR/internal/lock/lock_test.go: `.IsClosed()`
$DIR/internal/lock/lock_test.go: `.IncLockRef()`
$DIR/internal/lock/lock_test.go: `.IsClosed()`
$DIR/internal/lock/lock_test.go: `.IsClosed()`
$DIR/internal/lock/lock_test.go: `.IsClosed()`
$DIR/internal/lock/lock_test.go: `.CreateTemp("", "lock")`
$DIR/internal/lock/lock_test.go: `.Remove(f.Name())`
$DIR/internal/lock/lock_test.go: `.Name()`
$DIR/internal/lock/lock_test.go: `.Name()`
$DIR/internal/lock/lock_test.go: `.Name()`
$DIR/internal/lock/lock_test.go: `.Name()`
$DIR/internal/lock/lock_test.go: `.After(100 * time.Millisecond)`
$DIR/internal/lock/lock_test.go: `.After(1 * time.Second)`
$DIR/internal/lock/lock_windows_test.go: `got = strings.ReplaceAll(got, veryLong, "long")`
$DIR/internal/lock/lock_windows_test.go: `.Repeat("o", 248)`
$DIR/internal/lock/lock_windows_test.go: `.ReplaceAll(test.in, "long", veryLong)`
$DIR/internal/lock/lock_windows_test.go: `.ReplaceAll(test.want, "long", veryLong)`
$DIR/internal/lock/lock_windows_test.go: `.ReplaceAll(got, veryLong, "long")`
$DIR/internal/lsync/lrwmutex_test.go: `doTestParallelReaders(1, 4)`
$DIR/internal/lsync/lrwmutex_test.go: `doTestParallelReaders(3, 4)`
$DIR/internal/lsync/lrwmutex_test.go: `n = 5`
$DIR/internal/lsync/lrwmutex_test.go: `HammerRWMutex(1, 1, n)`
$DIR/internal/lsync/lrwmutex_test.go: `HammerRWMutex(1, 3, n)`
$DIR/internal/lsync/lrwmutex_test.go: `HammerRWMutex(1, 10, n)`
$DIR/internal/lsync/lrwmutex_test.go: `HammerRWMutex(4, 1, n)`
$DIR/internal/lsync/lrwmutex_test.go: `HammerRWMutex(4, 3, n)`
$DIR/internal/lsync/lrwmutex_test.go: `HammerRWMutex(4, 10, n)`
$DIR/internal/lsync/lrwmutex_test.go: `HammerRWMutex(10, 1, n)`
$DIR/internal/lsync/lrwmutex_test.go: `HammerRWMutex(10, 3, n)`
$DIR/internal/lsync/lrwmutex_test.go: `HammerRWMutex(10, 10, n)`
$DIR/internal/lsync/lrwmutex_test.go: `rl = wl.DRLocker()`
$DIR/internal/lsync/lrwmutex_test.go: `rl.Lock()`
$DIR/internal/lsync/lrwmutex_test.go: `rl.Lock()`
$DIR/internal/lsync/lrwmutex_test.go: `rlocked <- true`
$DIR/internal/lsync/lrwmutex_test.go: `wl.Lock()`
$DIR/internal/lsync/lrwmutex_test.go: `wlocked <- true`
$DIR/internal/lsync/lrwmutex_test.go: `<-rlocked`
$DIR/internal/lsync/lrwmutex_test.go: `rl.Unlock()`
$DIR/internal/lsync/lrwmutex_test.go: `rl.Unlock()`
$DIR/internal/lsync/lrwmutex_test.go: `<-wlocked`
$DIR/internal/lsync/lrwmutex_test.go: `wl.Unlock()`
$DIR/internal/lsync/lrwmutex_test.go: `mu.RLock()`
$DIR/internal/lsync/lrwmutex_test.go: `mu.Lock()`
$DIR/internal/lsync/lrwmutex_test.go: `.GOMAXPROCS(runtime.GOMAXPROCS(-1))`
$DIR/internal/lsync/lrwmutex_test.go: `.GOMAXPROCS(-1)`
$DIR/internal/lsync/lrwmutex_test.go: `.GOMAXPROCS(runtime.GOMAXPROCS(-1))`
$DIR/internal/lsync/lrwmutex_test.go: `.GOMAXPROCS(-1)`
$DIR/internal/lsync/lrwmutex_test.go: `.Short()`
$DIR/internal/lsync/lrwmutex_test.go: `.DRLocker()`
$DIR/internal/lsync/lrwmutex_test.go: `.Lock()`
$DIR/internal/lsync/lrwmutex_test.go: `.Lock()`
$DIR/internal/lsync/lrwmutex_test.go: `.Lock()`
$DIR/internal/lsync/lrwmutex_test.go: `.Unlock()`
$DIR/internal/lsync/lrwmutex_test.go: `.Unlock()`
$DIR/internal/lsync/lrwmutex_test.go: `.Unlock()`
$DIR/internal/lsync/lrwmutex_test.go: `.RLock()`
$DIR/internal/lsync/lrwmutex_test.go: `.Lock()`
$DIR/internal/mountinfo/mountinfo_linux_test.go: `mounts, err = readProcMounts(mountsPath)`
$DIR/internal/mountinfo/mountinfo_linux_test.go: `mp = mountInfo{"/dev/1", "/path/to/1", "type1", []string{"flags"}, "1", "1"}`
$DIR/internal/mountinfo/mountinfo_linux_test.go: `mp = mountInfo{"/dev/2", "/path/to/2", "type2", []string{"flags", "1", "2=3"}, "2", "2"}`
$DIR/internal/mountinfo/mountinfo_linux_test.go: `mp = mountInfo{"/dev/1", "/path/to/1", "type1", []string{"flags"}, "1", "1"}`
$DIR/internal/mountinfo/mountinfo_linux_test.go: `mp = mountInfo{"/dev/2", "/path/to/2", "type2", []string{"flags", "1", "2=3"}, "2", "2"}`
$DIR/internal/mountinfo/mountinfo_linux_test.go: `.TempDir()`
$DIR/internal/mountinfo/mountinfo_linux_test.go: `.Join(dir, "mounts")`
$DIR/internal/mountinfo/mountinfo_linux_test.go: `.WriteFile(mountsPath, []byte(successCase), 0o666)`
$DIR/internal/mountinfo/mountinfo_linux_test.go: `.Sprintf("Cross-device mounts detected on path (/path/to/1) at following locations %s. Export path should not have any sub-mounts, refusing to start.", mp)`
$DIR/internal/mountinfo/mountinfo_linux_test.go: `.Sprintf("Invalid argument, path (%s) is expected to be absolute", ".")`
$DIR/internal/mountinfo/mountinfo_linux_test.go: `.TempDir()`
$DIR/internal/mountinfo/mountinfo_linux_test.go: `.Join(dir, "mounts")`
$DIR/internal/mountinfo/mountinfo_linux_test.go: `.WriteFile(mountsPath, []byte(successCase), 0o666)`
$DIR/internal/mountinfo/mountinfo_linux_test.go: `.checkCrossMounts("/path/to/1")`
$DIR/internal/mountinfo/mountinfo_linux_test.go: `.Sprintf("Cross-device mounts detected on path (/path/to/1) at following locations %s. Export path should not have any sub-mounts, refusing to start.", mp)`
$DIR/internal/mountinfo/mountinfo_linux_test.go: `.checkCrossMounts(".")`
$DIR/internal/mountinfo/mountinfo_linux_test.go: `.Sprintf("Invalid argument, path (%s) is expected to be absolute", ".")`
$DIR/internal/mountinfo/mountinfo_linux_test.go: `.checkCrossMounts("/path/to/x")`
$DIR/internal/mountinfo/mountinfo_linux_test.go: `.TempDir()`
$DIR/internal/mountinfo/mountinfo_linux_test.go: `.Join(dir, "mounts")`
$DIR/internal/mountinfo/mountinfo_linux_test.go: `.WriteFile(mountsPath, []byte(successCase), 0o666)`
$DIR/internal/mountinfo/mountinfo_linux_test.go: `.Join(dir, "non-existent")`
$DIR/internal/mountinfo/mountinfo_linux_test.go: `.IsNotExist(err)`
$DIR/internal/mountinfo/mountinfo_linux_test.go: `.NewReader(successCase)`
$DIR/internal/mountinfo/mountinfo_linux_test.go: `.NewReader(ec)`
$DIR/internal/pubsub/pubsub_test.go: `ps.Lock()`
$DIR/internal/pubsub/pubsub_test.go: `ps.Lock()`
$DIR/internal/pubsub/pubsub_test.go: `close(doneCh1)`
$DIR/internal/pubsub/pubsub_test.go: `time.Sleep(100 * time.Millisecond)`
$DIR/internal/pubsub/pubsub_test.go: `ps.Lock()`
$DIR/internal/pubsub/pubsub_test.go: `ps.Unlock()`
$DIR/internal/pubsub/pubsub_test.go: `ps.Publish(val)`
$DIR/internal/pubsub/pubsub_test.go: `ps.Publish(val)`
$DIR/internal/pubsub/pubsub_test.go: `ps.Publish(val)`
$DIR/internal/pubsub/pubsub_test.go: `.Subscribe(MaskAll, ch1, doneCh, nil)`
$DIR/internal/pubsub/pubsub_test.go: `.Subscribe(MaskAll, ch2, doneCh, nil)`
$DIR/internal/pubsub/pubsub_test.go: `.Lock()`
$DIR/internal/pubsub/pubsub_test.go: `.Unlock()`
$DIR/internal/pubsub/pubsub_test.go: `.NumSubscribers(MaskAll)`
$DIR/internal/pubsub/pubsub_test.go: `.Subscribers()`
$DIR/internal/pubsub/pubsub_test.go: `.Subscribe(Mask(1), ch1, doneCh, nil)`
$DIR/internal/pubsub/pubsub_test.go: `.Subscribe(Mask(2), ch2, doneCh, nil)`
$DIR/internal/pubsub/pubsub_test.go: `.Lock()`
$DIR/internal/pubsub/pubsub_test.go: `.Unlock()`
$DIR/internal/pubsub/pubsub_test.go: `.NumSubscribers(Mask(1))`
$DIR/internal/pubsub/pubsub_test.go: `.NumSubscribers(Mask(2))`
$DIR/internal/pubsub/pubsub_test.go: `.NumSubscribers(Mask(1|2))`
$DIR/internal/pubsub/pubsub_test.go: `.NumSubscribers(MaskAll)`
$DIR/internal/pubsub/pubsub_test.go: `.NumSubscribers(Mask(4))`
$DIR/internal/pubsub/pubsub_test.go: `.Subscribe(MaskAll, ch1, doneCh, nil)`
$DIR/internal/pubsub/pubsub_test.go: `.Subscribe(MaskAll, ch2, doneCh, nil)`
$DIR/internal/pubsub/pubsub_test.go: `.Subscribe(MaskAll, ch3, doneCh, nil)`
$DIR/internal/pubsub/pubsub_test.go: `.Subscribe(MaskAll, ch1, doneCh1, nil)`
$DIR/internal/pubsub/pubsub_test.go: `.Subscribe(MaskAll, ch2, doneCh2, nil)`
$DIR/internal/pubsub/pubsub_test.go: `.Sleep(100 * time.Millisecond)`
$DIR/internal/pubsub/pubsub_test.go: `.Lock()`
$DIR/internal/pubsub/pubsub_test.go: `.Unlock()`
$DIR/internal/pubsub/pubsub_test.go: `.Subscribe(MaskAll, ch1, doneCh1, func(entry Maskable) bool { return true })`
$DIR/internal/pubsub/pubsub_test.go: `.Publish(val)`
$DIR/internal/pubsub/pubsub_test.go: `.Subscribe(MaskAll, ch1, doneCh, func(entry Maskable) bool { return true })`
$DIR/internal/pubsub/pubsub_test.go: `.Subscribe(MaskAll, ch2, doneCh, func(entry Maskable) bool { return true })`
$DIR/internal/pubsub/pubsub_test.go: `.Publish(val)`
$DIR/internal/pubsub/pubsub_test.go: `.Subscribe(Mask(1), ch1, doneCh, func(entry Maskable) bool { return true })`
$DIR/internal/pubsub/pubsub_test.go: `.Subscribe(Mask(1|2), ch2, doneCh, func(entry Maskable) bool { return true })`
$DIR/internal/pubsub/pubsub_test.go: `.Subscribe(Mask(2), ch3, doneCh, func(entry Maskable) bool { return true })`
$DIR/internal/pubsub/pubsub_test.go: `.Publish(val)`
$DIR/internal/rest/client_test.go: `t.Run(tt.name, func(t *testing.T) {
			// Wrap error
			n := &NetworkError{
				Err: tt.err,
			}
			//nolint:gocritic
			if tt.target == nil {
				var netErrInterface net.Error
				if errors.As(n, &netErrInterface) != tt.want {
					t.Errorf("errors.As(n, &tt.target) != tt.want, n: %#v, target: %#v, want:%v, got: %v", n, tt.target, tt.want, !tt.want)
				}
			} else {
				if errors.As(n, &tt.target) != tt.want {
					t.Errorf("errors.As(n, &tt.target) != tt.want, n: %#v, target: %#v, want:%v, got: %v", n, tt.target, tt.want, !tt.want)
				}
			}
		})`
$DIR/internal/rest/client_test.go: `.New("something")`
$DIR/internal/rest/client_test.go: `.Run(tt.name, func(t *testing.T) {
			// Wrap error
			n := &NetworkError{
				Err: tt.err,
			}
			//nolint:gocritic
			if tt.target == nil {
				var netErrInterface net.Error
				if errors.As(n, &netErrInterface) != tt.want {
					t.Errorf("errors.As(n, &tt.target) != tt.want, n: %#v, target: %#v, want:%v, got: %v", n, tt.target, tt.want, !tt.want)
				}
			} else {
				if errors.As(n, &tt.target) != tt.want {
					t.Errorf("errors.As(n, &tt.target) != tt.want, n: %#v, target: %#v, want:%v, got: %v", n, tt.target, tt.want, !tt.want)
				}
			}
		})`
$DIR/internal/rest/client_test.go: `.As(n, &netErrInterface)`
$DIR/internal/rest/client_test.go: `.As(n, &tt.target)`
$DIR/internal/ringbuffer/ring_buffer_test.go: `n, err = rb.Write([]byte(strings.Repeat("abcd", 12)))`
$DIR/internal/ringbuffer/ring_buffer_test.go: `n, err = rb.Write([]byte(strings.Repeat("abcd", 1)))`
$DIR/internal/ringbuffer/ring_buffer_test.go: `rb.Reset()`
$DIR/internal/ringbuffer/ring_buffer_test.go: `n, err = rb.Write([]byte(strings.Repeat("abcd", 20)))`
$DIR/internal/ringbuffer/ring_buffer_test.go: `rb.Reset()`
$DIR/internal/ringbuffer/ring_buffer_test.go: `n, err = rb.Write([]byte(strings.Repeat("abcd", 2)))`
$DIR/internal/ringbuffer/ring_buffer_test.go: `rb.Read(buf)`
$DIR/internal/ringbuffer/ring_buffer_test.go: `rb.Write([]byte(strings.Repeat("abcd", 15)))`
$DIR/internal/ringbuffer/ring_buffer_test.go: `rb.Reset()`
$DIR/internal/ringbuffer/ring_buffer_test.go: `n, err = rb.Write([]byte(strings.Repeat("abcd", 16)))`
$DIR/internal/ringbuffer/ring_buffer_test.go: `buf = make([]byte, 16)`
$DIR/internal/ringbuffer/ring_buffer_test.go: `rb.Read(buf)`
$DIR/internal/ringbuffer/ring_buffer_test.go: `n, err = rb.Write([]byte(strings.Repeat("1234", 4)))`
$DIR/internal/ringbuffer/ring_buffer_test.go: `n, err = rb.Write([]byte(strings.Repeat("abcd", 12)))`
$DIR/internal/ringbuffer/ring_buffer_test.go: `rb.Reset()`
$DIR/internal/ringbuffer/ring_buffer_test.go: `n, err = rb.Write([]byte(strings.Repeat("abcd", 2)))`
$DIR/internal/ringbuffer/ring_buffer_test.go: `rb.Read(buf)`
$DIR/internal/ringbuffer/ring_buffer_test.go: `rb.Write([]byte(strings.Repeat("abcd", 15)))`
$DIR/internal/ringbuffer/ring_buffer_test.go: `rb.Reset()`
$DIR/internal/ringbuffer/ring_buffer_test.go: `n, err = rb.Write([]byte(strings.Repeat("abcd", 16)))`
$DIR/internal/ringbuffer/ring_buffer_test.go: `buf = make([]byte, 16)`
$DIR/internal/ringbuffer/ring_buffer_test.go: `rb.Read(buf)`
$DIR/internal/ringbuffer/ring_buffer_test.go: `n, err = rb.Write([]byte(strings.Repeat("1234", 4)))`
$DIR/internal/ringbuffer/ring_buffer_test.go: `rb.Write([]byte(strings.Repeat("abcd", 4)))`
$DIR/internal/ringbuffer/ring_buffer_test.go: `n, err = rb.Read(buf)`
$DIR/internal/ringbuffer/ring_buffer_test.go: `rb.Write([]byte(strings.Repeat("abcd", 20)))`
$DIR/internal/ringbuffer/ring_buffer_test.go: `n, err = rb.Read(buf)`
$DIR/internal/ringbuffer/ring_buffer_test.go: `read = io.MultiWriter(read, &readBuf)`
$DIR/internal/ringbuffer/ring_buffer_test.go: `wrote = io.MultiWriter(wrote, &wroteBuf)`
$DIR/internal/ringbuffer/ring_buffer_test.go: `fmt.Println(args...)`
$DIR/internal/ringbuffer/ring_buffer_test.go: `wg.Add(1)`
$DIR/internal/ringbuffer/ring_buffer_test.go: `readBytes += n`
$DIR/internal/ringbuffer/ring_buffer_test.go: `read.Write(buf[:n])`
$DIR/internal/ringbuffer/ring_buffer_test.go: `debugln("READ 1\t", n, readBytes)`
$DIR/internal/ringbuffer/ring_buffer_test.go: `readErr = err`
$DIR/internal/ringbuffer/ring_buffer_test.go: `readErr = err`
$DIR/internal/ringbuffer/ring_buffer_test.go: `readBytes++`
$DIR/internal/ringbuffer/ring_buffer_test.go: `read.Write([]byte{b})`
$DIR/internal/ringbuffer/ring_buffer_test.go: `debugln("READ 2\t", 1, readBytes)`
$DIR/internal/ringbuffer/ring_buffer_test.go: `n, err = rb.TryRead(buf[:readRng.Intn(len(buf))])`
$DIR/internal/ringbuffer/ring_buffer_test.go: `readBytes += n`
$DIR/internal/ringbuffer/ring_buffer_test.go: `read.Write(buf[:n])`
$DIR/internal/ringbuffer/ring_buffer_test.go: `debugln("READ 3\t", n, readBytes)`
$DIR/internal/ringbuffer/ring_buffer_test.go: `readErr = err`
$DIR/internal/ringbuffer/ring_buffer_test.go: `time.Sleep(time.Duration(readRng.Intn(maxSleep)))`
$DIR/internal/ringbuffer/ring_buffer_test.go: `writeRng.Read(buf)`
$DIR/internal/ringbuffer/ring_buffer_test.go: `wroteBytes += n`
$DIR/internal/ringbuffer/ring_buffer_test.go: `wrote.Write(buf[:n])`
$DIR/internal/ringbuffer/ring_buffer_test.go: `debugln("WRITE 1\t", n, wroteBytes)`
$DIR/internal/ringbuffer/ring_buffer_test.go: `n, err = rb.WriteString(string(buf[:writeRng.Intn(len(buf))]))`
$DIR/internal/ringbuffer/ring_buffer_test.go: `wroteBytes += n`
$DIR/internal/ringbuffer/ring_buffer_test.go: `wrote.Write(buf[:n])`
$DIR/internal/ringbuffer/ring_buffer_test.go: `debugln("WRITE 2\t", writeRng.Intn(len(buf)), wroteBytes)`
$DIR/internal/ringbuffer/ring_buffer_test.go: `err = rb.WriteByte(buf[0])`
$DIR/internal/ringbuffer/ring_buffer_test.go: `wroteBytes++`
$DIR/internal/ringbuffer/ring_buffer_test.go: `wrote.Write(buf[:1])`
$DIR/internal/ringbuffer/ring_buffer_test.go: `debugln("WRITE 3\t", 1, wroteBytes)`
$DIR/internal/ringbuffer/ring_buffer_test.go: `n, err = rb.TryWrite(buf[:writeRng.Intn(len(buf))])`
$DIR/internal/ringbuffer/ring_buffer_test.go: `wroteBytes += n`
$DIR/internal/ringbuffer/ring_buffer_test.go: `wrote.Write(buf[:n])`
$DIR/internal/ringbuffer/ring_buffer_test.go: `debugln("WRITE 4\t", n, wroteBytes)`
$DIR/internal/ringbuffer/ring_buffer_test.go: `err = rb.TryWriteByte(buf[0])`
$DIR/internal/ringbuffer/ring_buffer_test.go: `wroteBytes++`
$DIR/internal/ringbuffer/ring_buffer_test.go: `wrote.Write(buf[:1])`
$DIR/internal/ringbuffer/ring_buffer_test.go: `debugln("WRITE 5\t", 1, wroteBytes)`
$DIR/internal/ringbuffer/ring_buffer_test.go: `time.Sleep(time.Duration(writeRng.Intn(maxSleep)))`
$DIR/internal/ringbuffer/ring_buffer_test.go: `rb.CloseWriter()`
$DIR/internal/ringbuffer/ring_buffer_test.go: `wg.Wait()`
$DIR/internal/ringbuffer/ring_buffer_test.go: `common = i`
$DIR/internal/ringbuffer/ring_buffer_test.go: `a, b = a[common:], b[common:]`
$DIR/internal/ringbuffer/ring_buffer_test.go: `a = a[:64]`
$DIR/internal/ringbuffer/ring_buffer_test.go: `b = b[:64]`
$DIR/internal/ringbuffer/ring_buffer_test.go: `read = io.MultiWriter(read, &readBuf)`
$DIR/internal/ringbuffer/ring_buffer_test.go: `wrote = io.MultiWriter(wrote, &wroteBuf)`
$DIR/internal/ringbuffer/ring_buffer_test.go: `fmt.Println(args...)`
$DIR/internal/ringbuffer/ring_buffer_test.go: `wg.Add(1)`
$DIR/internal/ringbuffer/ring_buffer_test.go: `readBytes += n`
$DIR/internal/ringbuffer/ring_buffer_test.go: `read.Write(buf[:n])`
$DIR/internal/ringbuffer/ring_buffer_test.go: `readErr = err`
$DIR/internal/ringbuffer/ring_buffer_test.go: `debugln("READ 1\t", n, readBytes)`
$DIR/internal/ringbuffer/ring_buffer_test.go: `readErr = err`
$DIR/internal/ringbuffer/ring_buffer_test.go: `readBytes++`
$DIR/internal/ringbuffer/ring_buffer_test.go: `read.Write([]byte{b})`
$DIR/internal/ringbuffer/ring_buffer_test.go: `debugln("READ 2\t", 1, readBytes)`
$DIR/internal/ringbuffer/ring_buffer_test.go: `n, err = rb.TryRead(buf[:readRng.Intn(len(buf))])`
$DIR/internal/ringbuffer/ring_buffer_test.go: `readBytes += n`
$DIR/internal/ringbuffer/ring_buffer_test.go: `read.Write(buf[:n])`
$DIR/internal/ringbuffer/ring_buffer_test.go: `readErr = err`
$DIR/internal/ringbuffer/ring_buffer_test.go: `debugln("READ 3\t", n, readBytes)`
$DIR/internal/ringbuffer/ring_buffer_test.go: `time.Sleep(time.Duration(readRng.Intn(maxSleep)))`
$DIR/internal/ringbuffer/ring_buffer_test.go: `writeRng.Read(buf)`
$DIR/internal/ringbuffer/ring_buffer_test.go: `wroteBytes += n`
$DIR/internal/ringbuffer/ring_buffer_test.go: `wrote.Write(buf[:n])`
$DIR/internal/ringbuffer/ring_buffer_test.go: `debugln("WRITE 1\t", n, wroteBytes)`
$DIR/internal/ringbuffer/ring_buffer_test.go: `n, err = rb.WriteString(string(buf[:writeRng.Intn(len(buf))]))`
$DIR/internal/ringbuffer/ring_buffer_test.go: `wroteBytes += n`
$DIR/internal/ringbuffer/ring_buffer_test.go: `wrote.Write(buf[:n])`
$DIR/internal/ringbuffer/ring_buffer_test.go: `debugln("WRITE 2\t", writeRng.Intn(len(buf)), wroteBytes)`
$DIR/internal/ringbuffer/ring_buffer_test.go: `err = rb.WriteByte(buf[0])`
$DIR/internal/ringbuffer/ring_buffer_test.go: `wroteBytes++`
$DIR/internal/ringbuffer/ring_buffer_test.go: `wrote.Write(buf[:1])`
$DIR/internal/ringbuffer/ring_buffer_test.go: `debugln("WRITE 3\t", 1, wroteBytes)`
$DIR/internal/ringbuffer/ring_buffer_test.go: `n, err = rb.TryWrite(buf[:writeRng.Intn(len(buf))])`
$DIR/internal/ringbuffer/ring_buffer_test.go: `wroteBytes += n`
$DIR/internal/ringbuffer/ring_buffer_test.go: `wrote.Write(buf[:n])`
$DIR/internal/ringbuffer/ring_buffer_test.go: `debugln("WRITE 4\t", n, wroteBytes)`
$DIR/internal/ringbuffer/ring_buffer_test.go: `err = rb.TryWriteByte(buf[0])`
$DIR/internal/ringbuffer/ring_buffer_test.go: `wroteBytes++`
$DIR/internal/ringbuffer/ring_buffer_test.go: `wrote.Write(buf[:1])`
$DIR/internal/ringbuffer/ring_buffer_test.go: `debugln("WRITE 5\t", 1, wroteBytes)`
$DIR/internal/ringbuffer/ring_buffer_test.go: `time.Sleep(time.Duration(writeRng.Intn(maxSleep)))`
$DIR/internal/ringbuffer/ring_buffer_test.go: `rb.CloseWriter()`
$DIR/internal/ringbuffer/ring_buffer_test.go: `wg.Wait()`
$DIR/internal/ringbuffer/ring_buffer_test.go: `common = i`
$DIR/internal/ringbuffer/ring_buffer_test.go: `a, b = a[common:], b[common:]`
$DIR/internal/ringbuffer/ring_buffer_test.go: `a = a[:64]`
$DIR/internal/ringbuffer/ring_buffer_test.go: `b = b[:64]`
$DIR/internal/ringbuffer/ring_buffer_test.go: `err = rb.WriteByte('b')`
$DIR/internal/ringbuffer/ring_buffer_test.go: `err = rb.WriteByte('c')`
$DIR/internal/ringbuffer/ring_buffer_test.go: `b, err = rb.ReadByte()`
$DIR/internal/ringbuffer/ring_buffer_test.go: `_, err = rb.ReadByte()`
$DIR/internal/ringbuffer/ring_buffer_test.go: `rb.CloseWithError(testError1{})`
$DIR/internal/ringbuffer/ring_buffer_test.go: `rb.CloseWithError(testError2{})`
$DIR/internal/ringbuffer/ring_buffer_test.go: `rb.Reset()`
$DIR/internal/ringbuffer/ring_buffer_test.go: `rb.CloseWithError(testError1{})`
$DIR/internal/ringbuffer/ring_buffer_test.go: `rb.CloseWithError(testError2{})`
$DIR/internal/ringbuffer/ring_buffer_test.go: `t.Helper()`
$DIR/internal/ringbuffer/ring_buffer_test.go: `rb.Reset()`
$DIR/internal/ringbuffer/ring_buffer_test.go: `time.Sleep(10 * time.Millisecond)`
$DIR/internal/ringbuffer/ring_buffer_test.go: `fn()`
$DIR/internal/ringbuffer/ring_buffer_test.go: `rb.CloseWithError(errors.New("test error"))`
$DIR/internal/ringbuffer/ring_buffer_test.go: `<-done`
$DIR/internal/ringbuffer/ring_buffer_test.go: `rb.Reset()`
$DIR/internal/ringbuffer/ring_buffer_test.go: `done = make(chan struct{})`
$DIR/internal/ringbuffer/ring_buffer_test.go: `fn()`
$DIR/internal/ringbuffer/ring_buffer_test.go: `time.Sleep(10 * time.Millisecond)`
$DIR/internal/ringbuffer/ring_buffer_test.go: `rb.CloseWithError(errors.New("test error"))`
$DIR/internal/ringbuffer/ring_buffer_test.go: `<-done`
$DIR/internal/ringbuffer/ring_buffer_test.go: `testCancel(func() {
		rb.Write([]byte{sz + 5: 1})
	})`
$DIR/internal/ringbuffer/ring_buffer_test.go: `rb.Write([]byte{sz + 5: 1})`
$DIR/internal/ringbuffer/ring_buffer_test.go: `testCancel(func() {
		rb.Write(make([]byte, sz))
		rb.WriteByte(0)
	})`
$DIR/internal/ringbuffer/ring_buffer_test.go: `rb.Write(make([]byte, sz))`
$DIR/internal/ringbuffer/ring_buffer_test.go: `rb.WriteByte(0)`
$DIR/internal/ringbuffer/ring_buffer_test.go: `testCancel(func() {
		rb.Read([]byte{10: 1})
	})`
$DIR/internal/ringbuffer/ring_buffer_test.go: `rb.Read([]byte{10: 1})`
$DIR/internal/ringbuffer/ring_buffer_test.go: `testCancel(func() {
		rb.ReadByte()
	})`
$DIR/internal/ringbuffer/ring_buffer_test.go: `rb.ReadByte()`
$DIR/internal/ringbuffer/ring_buffer_test.go: `rb.Write(make([]byte, sz))`
$DIR/internal/ringbuffer/ring_buffer_test.go: `rb.Flush()`
$DIR/internal/ringbuffer/ring_buffer_test.go: `rb.CloseWriter()`
$DIR/internal/ringbuffer/ring_buffer_test.go: `_, err = rb.Write([]byte("world"))`
$DIR/internal/ringbuffer/ring_buffer_test.go: `done <- err`
$DIR/internal/ringbuffer/ring_buffer_test.go: `err = rb.WriteByte(0)`
$DIR/internal/ringbuffer/ring_buffer_test.go: `done <- err`
$DIR/internal/ringbuffer/ring_buffer_test.go: `_, err = rb.TryWrite([]byte("world"))`
$DIR/internal/ringbuffer/ring_buffer_test.go: `done <- err`
$DIR/internal/ringbuffer/ring_buffer_test.go: `err = rb.TryWriteByte(0)`
$DIR/internal/ringbuffer/ring_buffer_test.go: `done <- err`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.IsEmpty()`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.IsFull()`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.Length()`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.Free()`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.Write([]byte(strings.Repeat("abcd", 4)))`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.Repeat("abcd", 4)`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.Length()`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.Free()`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.Equal(rb.Bytes(nil), []byte(strings.Repeat("abcd", 4)))`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.Bytes(nil)`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.Repeat("abcd", 4)`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.IsEmpty()`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.IsFull()`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.Write([]byte(strings.Repeat("abcd", 12)))`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.Repeat("abcd", 12)`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.Length()`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.Free()`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.Equal(rb.Bytes(nil), []byte(strings.Repeat("abcd", 16)))`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.Bytes(nil)`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.Repeat("abcd", 16)`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.IsEmpty()`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.IsFull()`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.Write([]byte(strings.Repeat("abcd", 1)))`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.Repeat("abcd", 1)`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.Length()`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.Free()`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.IsEmpty()`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.IsFull()`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.Reset()`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.Write([]byte(strings.Repeat("abcd", 20)))`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.Repeat("abcd", 20)`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.Length()`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.Free()`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.IsEmpty()`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.IsFull()`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.Equal(rb.Bytes(nil), []byte(strings.Repeat("abcd", 16)))`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.Bytes(nil)`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.Repeat("abcd", 16)`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.Reset()`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.Write([]byte(strings.Repeat("abcd", 2)))`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.Repeat("abcd", 2)`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.Length()`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.Free()`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.Read(buf)`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.Length()`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.Write([]byte(strings.Repeat("abcd", 15)))`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.Repeat("abcd", 15)`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.Equal(rb.Bytes(nil), []byte("bcd"+strings.Repeat("abcd", 15)))`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.Bytes(nil)`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.Repeat("abcd", 15)`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.Reset()`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.Write([]byte(strings.Repeat("abcd", 16)))`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.Repeat("abcd", 16)`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.Free()`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.Read(buf)`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.Write([]byte(strings.Repeat("1234", 4)))`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.Repeat("1234", 4)`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.Free()`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.Equal(append(buf, rb.Bytes(nil)...), []byte(strings.Repeat("abcd", 16)+strings.Repeat("1234", 4)))`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.Bytes(nil)`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.Repeat("abcd", 16)`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.Repeat("1234", 4)`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.SetBlocking(true)`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.IsEmpty()`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.IsFull()`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.Length()`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.Free()`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.Write([]byte(strings.Repeat("abcd", 4)))`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.Repeat("abcd", 4)`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.Length()`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.Free()`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.Equal(rb.Bytes(nil), []byte(strings.Repeat("abcd", 4)))`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.Bytes(nil)`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.Repeat("abcd", 4)`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.IsEmpty()`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.IsFull()`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.Write([]byte(strings.Repeat("abcd", 12)))`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.Repeat("abcd", 12)`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.Length()`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.Free()`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.Equal(rb.Bytes(nil), []byte(strings.Repeat("abcd", 16)))`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.Bytes(nil)`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.Repeat("abcd", 16)`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.IsEmpty()`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.IsFull()`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.Reset()`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.Write([]byte(strings.Repeat("abcd", 2)))`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.Repeat("abcd", 2)`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.Length()`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.Free()`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.Read(buf)`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.Length()`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.Write([]byte(strings.Repeat("abcd", 15)))`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.Repeat("abcd", 15)`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.Equal(rb.Bytes(nil), []byte("bcd"+strings.Repeat("abcd", 15)))`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.Bytes(nil)`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.Repeat("abcd", 15)`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.Reset()`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.Write([]byte(strings.Repeat("abcd", 16)))`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.Repeat("abcd", 16)`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.Free()`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.Read(buf)`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.Write([]byte(strings.Repeat("1234", 4)))`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.Repeat("1234", 4)`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.Free()`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.Equal(append(buf, rb.Bytes(nil)...), []byte(strings.Repeat("abcd", 16)+strings.Repeat("1234", 4)))`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.Bytes(nil)`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.Repeat("abcd", 16)`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.Repeat("1234", 4)`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.IsEmpty()`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.IsFull()`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.Length()`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.Free()`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.Read(buf)`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.Length()`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.Free()`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.Write([]byte(strings.Repeat("abcd", 4)))`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.Repeat("abcd", 4)`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.Read(buf)`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.Length()`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.Free()`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.Write([]byte(strings.Repeat("abcd", 20)))`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.Repeat("abcd", 20)`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.Read(buf)`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.Length()`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.Free()`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.NewIEEE()`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.NewIEEE()`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.Writer(readHash)`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.Writer(wroteHash)`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.MultiWriter(read, &readBuf)`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.MultiWriter(wrote, &wroteBuf)`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.Println(args...)`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.Short()`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.SetBlocking(true)`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.Add(1)`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.New(rand.NewSource(1))`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.NewSource(1)`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.Done()`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.CloseWithError(readErr)`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.Read(buf[:readRng.Intn(len(buf))])`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.Intn(len(buf))`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.Write(buf[:n])`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.ReadByte()`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.Write([]byte{b})`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.TryRead(buf[:readRng.Intn(len(buf))])`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.Intn(len(buf))`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.Write(buf[:n])`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.Intn(20)`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.Sleep(time.Duration(readRng.Intn(maxSleep)))`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.Duration(readRng.Intn(maxSleep))`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.Intn(maxSleep)`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.New(rand.NewSource(2))`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.NewSource(2)`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.Read(buf)`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.Write(buf[:writeRng.Intn(len(buf))])`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.Intn(len(buf))`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.Write(buf[:n])`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.WriteString(string(buf[:writeRng.Intn(len(buf))]))`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.Intn(len(buf))`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.Write(buf[:n])`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.Intn(len(buf))`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.WriteByte(buf[0])`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.Write(buf[:1])`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.TryWrite(buf[:writeRng.Intn(len(buf))])`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.Intn(len(buf))`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.Write(buf[:n])`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.TryWriteByte(buf[0])`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.Write(buf[:1])`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.Intn(10)`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.Sleep(time.Duration(writeRng.Intn(maxSleep)))`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.Duration(writeRng.Intn(maxSleep))`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.Intn(maxSleep)`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.Flush()`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.CloseWriter()`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.Wait()`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.Is(readErr, io.EOF)`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.Bytes()`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.Bytes()`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.Equal(a, b)`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.Sum32()`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.Sum32()`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.NewIEEE()`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.NewIEEE()`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.Writer(readHash)`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.Writer(wroteHash)`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.MultiWriter(read, &readBuf)`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.MultiWriter(wrote, &wroteBuf)`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.Println(args...)`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.Short()`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.SetBlocking(true)`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.Add(1)`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.Done()`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.CloseWithError(readErr)`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.New(rand.NewSource(1))`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.NewSource(1)`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.Read(buf[:readRng.Intn(len(buf))])`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.Intn(len(buf))`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.Write(buf[:n])`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.ReadByte()`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.Write([]byte{b})`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.TryRead(buf[:readRng.Intn(len(buf))])`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.Intn(len(buf))`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.Write(buf[:n])`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.Intn(20)`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.Sleep(time.Duration(readRng.Intn(maxSleep)))`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.Duration(readRng.Intn(maxSleep))`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.Intn(maxSleep)`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.New(rand.NewSource(2))`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.NewSource(2)`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.Read(buf)`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.Write(buf[:writeRng.Intn(len(buf))])`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.Intn(len(buf))`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.Write(buf[:n])`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.WriteString(string(buf[:writeRng.Intn(len(buf))]))`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.Intn(len(buf))`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.Write(buf[:n])`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.Intn(len(buf))`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.WriteByte(buf[0])`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.Write(buf[:1])`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.TryWrite(buf[:writeRng.Intn(len(buf))])`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.Intn(len(buf))`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.Write(buf[:n])`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.TryWriteByte(buf[0])`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.Write(buf[:1])`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.Intn(10)`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.Sleep(time.Duration(writeRng.Intn(maxSleep)))`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.Duration(writeRng.Intn(maxSleep))`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.Intn(maxSleep)`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.Flush()`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.CloseWriter()`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.Wait()`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.Is(readErr, io.EOF)`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.Bytes()`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.Bytes()`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.Equal(a, b)`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.Sum32()`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.Sum32()`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.WriteByte('a')`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.Length()`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.Free()`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.Equal(rb.Bytes(nil), []byte{'a'})`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.Bytes(nil)`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.IsEmpty()`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.IsFull()`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.WriteByte('b')`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.Length()`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.Free()`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.Equal(rb.Bytes(nil), []byte{'a', 'b'})`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.Bytes(nil)`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.IsEmpty()`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.IsFull()`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.WriteByte('c')`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.Length()`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.Free()`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.Equal(rb.Bytes(nil), []byte{'a', 'b'})`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.Bytes(nil)`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.IsEmpty()`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.IsFull()`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.ReadByte()`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.Length()`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.Free()`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.Equal(rb.Bytes(nil), []byte{'b'})`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.Bytes(nil)`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.IsEmpty()`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.IsFull()`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.ReadByte()`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.Length()`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.Free()`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.IsEmpty()`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.IsFull()`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.ReadByte()`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.Length()`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.Free()`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.IsEmpty()`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.IsFull()`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.CloseWithError(testError1{})`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.Write(nil)`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.Write([]byte{1})`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.WriteByte(0)`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.TryWrite(nil)`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.TryWrite([]byte{1})`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.TryWriteByte(0)`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.Flush()`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.CloseWithError(testError2{})`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.Write(nil)`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.Reset()`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.CloseWithError(testError1{})`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.Read(nil)`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.Read([]byte{0})`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.ReadByte()`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.TryRead(nil)`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.TryRead([]byte{0})`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.CloseWithError(testError2{})`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.Read(nil)`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.Read([]byte{0})`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.ReadByte()`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.TryRead(nil)`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.TryRead([]byte{0})`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.SetBlocking(true)`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.Helper()`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.Reset()`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.Sleep(10 * time.Millisecond)`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.CloseWithError(errors.New("test error"))`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.New("test error")`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.Reset()`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.Sleep(10 * time.Millisecond)`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.CloseWithError(errors.New("test error"))`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.New("test error")`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.Write([]byte{sz + 5: 1})`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.Write(make([]byte, sz))`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.WriteByte(0)`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.Read([]byte{10: 1})`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.ReadByte()`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.Write(make([]byte, sz))`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.Flush()`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.SetBlocking(true)`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.Write([]byte("hello"))`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.CloseWriter()`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.Write([]byte("world"))`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.WriteByte(0)`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.TryWrite([]byte("world"))`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.TryWriteByte(0)`
$DIR/internal/ringbuffer/ring_buffer_test.go: `.ReadFull(rb, buf)`
$DIR/internal/s3select/csv/reader_contrib_test.go: `record, err = r.Read(record)`
$DIR/internal/s3select/csv/reader_contrib_test.go: `record.WriteCSV(&result, opts)`
$DIR/internal/s3select/csv/reader_contrib_test.go: `result.Truncate(result.Len() - 1)`
$DIR/internal/s3select/csv/reader_contrib_test.go: `result.WriteString(c.recordDelimiter)`
$DIR/internal/s3select/csv/reader_contrib_test.go: `t.Run(c.file, func(t *testing.T) {
			var err error
			var record sql.Record
			var result bytes.Buffer
			input := openTestFile(t, c.file)
			// Get above block size.
			input = append(input, input...)
			args := ReaderArgs{
				FileHeaderInfo:             use,
				RecordDelimiter:            c.recordDelimiter,
				FieldDelimiter:             c.fieldDelimiter,
				QuoteCharacter:             defaultQuoteCharacter,
				QuoteEscapeCharacter:       defaultQuoteEscapeCharacter,
				CommentCharacter:           defaultCommentCharacter,
				AllowQuotedRecordDelimiter: false,
				unmarshaled:                true,
			}
			if !c.header {
				args.FileHeaderInfo = none
			}
			r, _ := NewReader(io.NopCloser(bytes.NewReader(input)), &args)
			fields := 0
			for {
				record, err = r.Read(record)
				if err != nil {
					break
				}
				if fields < 10 {
					opts := sql.WriteCSVOpts{
						FieldDelimiter: ',',
						Quote:          '"',
						QuoteEscape:    '"',
						AlwaysQuote:    false,
					}
					// Write with fixed delimiters, newlines.
					err := record.WriteCSV(&result, opts)
					if err != nil {
						t.Error(err)
					}
				}
				fields++
			}
			r.Close()
			if err != io.EOF {
				t.Fatalf("Case %d failed with %s", i, err)
			}
			if !reflect.DeepEqual(r.columnNames, c.wantColumns) {
				t.Errorf("Case %d failed: expected %#v, got result %#v", i, c.wantColumns, r.columnNames)
			}
			if result.String() != c.wantTenFields {
				t.Errorf("Case %d failed: expected %v, got result %v", i, c.wantTenFields, result.String())
			}
			if fields != c.totalFields {
				t.Errorf("Case %d failed: expected %v results %v", i, c.totalFields, fields)
			}
		})`
$DIR/internal/s3select/csv/reader_contrib_test.go: `input = append(input, input...)`
$DIR/internal/s3select/csv/reader_contrib_test.go: `args.FileHeaderInfo = none`
$DIR/internal/s3select/csv/reader_contrib_test.go: `record, err = r.Read(record)`
$DIR/internal/s3select/csv/reader_contrib_test.go: `fields++`
$DIR/internal/s3select/csv/reader_contrib_test.go: `t.Run(c.file, func(t *testing.T) {
			var err error
			var record sql.Record
			var result bytes.Buffer
			input := openTestFile(t, c.file)
			args := ReaderArgs{
				FileHeaderInfo:             use,
				RecordDelimiter:            c.recordDelimiter,
				FieldDelimiter:             c.fieldDelimiter,
				QuoteCharacter:             defaultQuoteCharacter,
				QuoteEscapeCharacter:       defaultQuoteEscapeCharacter,
				CommentCharacter:           defaultCommentCharacter,
				AllowQuotedRecordDelimiter: false,
				unmarshaled:                true,
			}
			if !c.header {
				args.FileHeaderInfo = none
			}
			inr := io.Reader(bytes.NewReader(input))
			if c.sendErr != nil {
				inr = io.MultiReader(inr, errReader{c.sendErr})
			}
			r, _ := NewReader(io.NopCloser(inr), &args)
			fields := 0
			for {
				record, err = r.Read(record)
				if err != nil {
					break
				}

				opts := sql.WriteCSVOpts{
					FieldDelimiter: ',',
					Quote:          '"',
					QuoteEscape:    '"',
					AlwaysQuote:    false,
				}
				// Write with fixed delimiters, newlines.
				err := record.WriteCSV(&result, opts)
				if err != nil {
					t.Error(err)
				}
				fields++
			}
			r.Close()
			if err != c.wantErr {
				t.Fatalf("Case %d failed with %s", i, err)
			}
			if !reflect.DeepEqual(r.columnNames, c.wantColumns) {
				t.Errorf("Case %d failed: expected \n%#v, got result \n%#v", i, c.wantColumns, r.columnNames)
			}
			if result.String() != c.wantFields {
				t.Errorf("Case %d failed: expected \n%v\nGot result \n%v", i, c.wantFields, result.String())
			}
		})`
$DIR/internal/s3select/csv/reader_contrib_test.go: `args.FileHeaderInfo = none`
$DIR/internal/s3select/csv/reader_contrib_test.go: `inr = io.MultiReader(inr, errReader{c.sendErr})`
$DIR/internal/s3select/csv/reader_contrib_test.go: `record, err = r.Read(record)`
$DIR/internal/s3select/csv/reader_contrib_test.go: `fields++`
$DIR/internal/s3select/csv/reader_contrib_test.go: `.NopCloser(strings.NewReader(c.content))`
$DIR/internal/s3select/csv/reader_contrib_test.go: `.NewReader(c.content)`
$DIR/internal/s3select/csv/reader_contrib_test.go: `.Read(record)`
$DIR/internal/s3select/csv/reader_contrib_test.go: `.WriteCSV(&result, opts)`
$DIR/internal/s3select/csv/reader_contrib_test.go: `.Truncate(result.Len() - 1)`
$DIR/internal/s3select/csv/reader_contrib_test.go: `.Len()`
$DIR/internal/s3select/csv/reader_contrib_test.go: `.WriteString(c.recordDelimiter)`
$DIR/internal/s3select/csv/reader_contrib_test.go: `.String()`
$DIR/internal/s3select/csv/reader_contrib_test.go: `.Run(c.file, func(t *testing.T) {
			var err error
			var record sql.Record
			var result bytes.Buffer
			input := openTestFile(t, c.file)
			// Get above block size.
			input = append(input, input...)
			args := ReaderArgs{
				FileHeaderInfo:             use,
				RecordDelimiter:            c.recordDelimiter,
				FieldDelimiter:             c.fieldDelimiter,
				QuoteCharacter:             defaultQuoteCharacter,
				QuoteEscapeCharacter:       defaultQuoteEscapeCharacter,
				CommentCharacter:           defaultCommentCharacter,
				AllowQuotedRecordDelimiter: false,
				unmarshaled:                true,
			}
			if !c.header {
				args.FileHeaderInfo = none
			}
			r, _ := NewReader(io.NopCloser(bytes.NewReader(input)), &args)
			fields := 0
			for {
				record, err = r.Read(record)
				if err != nil {
					break
				}
				if fields < 10 {
					opts := sql.WriteCSVOpts{
						FieldDelimiter: ',',
						Quote:          '"',
						QuoteEscape:    '"',
						AlwaysQuote:    false,
					}
					// Write with fixed delimiters, newlines.
					err := record.WriteCSV(&result, opts)
					if err != nil {
						t.Error(err)
					}
				}
				fields++
			}
			r.Close()
			if err != io.EOF {
				t.Fatalf("Case %d failed with %s", i, err)
			}
			if !reflect.DeepEqual(r.columnNames, c.wantColumns) {
				t.Errorf("Case %d failed: expected %#v, got result %#v", i, c.wantColumns, r.columnNames)
			}
			if result.String() != c.wantTenFields {
				t.Errorf("Case %d failed: expected %v, got result %v", i, c.wantTenFields, result.String())
			}
			if fields != c.totalFields {
				t.Errorf("Case %d failed: expected %v results %v", i, c.totalFields, fields)
			}
		})`
$DIR/internal/s3select/csv/reader_contrib_test.go: `.NopCloser(bytes.NewReader(input))`
$DIR/internal/s3select/csv/reader_contrib_test.go: `.NewReader(input)`
$DIR/internal/s3select/csv/reader_contrib_test.go: `.Read(record)`
$DIR/internal/s3select/csv/reader_contrib_test.go: `.WriteCSV(&result, opts)`
$DIR/internal/s3select/csv/reader_contrib_test.go: `.DeepEqual(r.columnNames, c.wantColumns)`
$DIR/internal/s3select/csv/reader_contrib_test.go: `.String()`
$DIR/internal/s3select/csv/reader_contrib_test.go: `.New("unable to read file :(")`
$DIR/internal/s3select/csv/reader_contrib_test.go: `.Run(c.file, func(t *testing.T) {
			var err error
			var record sql.Record
			var result bytes.Buffer
			input := openTestFile(t, c.file)
			args := ReaderArgs{
				FileHeaderInfo:             use,
				RecordDelimiter:            c.recordDelimiter,
				FieldDelimiter:             c.fieldDelimiter,
				QuoteCharacter:             defaultQuoteCharacter,
				QuoteEscapeCharacter:       defaultQuoteEscapeCharacter,
				CommentCharacter:           defaultCommentCharacter,
				AllowQuotedRecordDelimiter: false,
				unmarshaled:                true,
			}
			if !c.header {
				args.FileHeaderInfo = none
			}
			inr := io.Reader(bytes.NewReader(input))
			if c.sendErr != nil {
				inr = io.MultiReader(inr, errReader{c.sendErr})
			}
			r, _ := NewReader(io.NopCloser(inr), &args)
			fields := 0
			for {
				record, err = r.Read(record)
				if err != nil {
					break
				}

				opts := sql.WriteCSVOpts{
					FieldDelimiter: ',',
					Quote:          '"',
					QuoteEscape:    '"',
					AlwaysQuote:    false,
				}
				// Write with fixed delimiters, newlines.
				err := record.WriteCSV(&result, opts)
				if err != nil {
					t.Error(err)
				}
				fields++
			}
			r.Close()
			if err != c.wantErr {
				t.Fatalf("Case %d failed with %s", i, err)
			}
			if !reflect.DeepEqual(r.columnNames, c.wantColumns) {
				t.Errorf("Case %d failed: expected \n%#v, got result \n%#v", i, c.wantColumns, r.columnNames)
			}
			if result.String() != c.wantFields {
				t.Errorf("Case %d failed: expected \n%v\nGot result \n%v", i, c.wantFields, result.String())
			}
		})`
$DIR/internal/s3select/csv/reader_contrib_test.go: `.Reader(bytes.NewReader(input))`
$DIR/internal/s3select/csv/reader_contrib_test.go: `.NewReader(input)`
$DIR/internal/s3select/csv/reader_contrib_test.go: `.MultiReader(inr, errReader{c.sendErr})`
$DIR/internal/s3select/csv/reader_contrib_test.go: `.NopCloser(inr)`
$DIR/internal/s3select/csv/reader_contrib_test.go: `.Read(record)`
$DIR/internal/s3select/csv/reader_contrib_test.go: `.WriteCSV(&result, opts)`
$DIR/internal/s3select/csv/reader_contrib_test.go: `.DeepEqual(r.columnNames, c.wantColumns)`
$DIR/internal/s3select/csv/reader_contrib_test.go: `.String()`
$DIR/internal/s3select/json/preader_test.go: `t.Run(file.Name(), func(t *testing.T) {
			f, err := os.Open(filepath.Join("testdata", file.Name()))
			if err != nil {
				t.Fatal(err)
			}
			r := NewPReader(f, &ReaderArgs{})
			var record sql.Record
			for {
				record, err = r.Read(record)
				if err != nil {
					break
				}
			}
			r.Close()
			if err != io.EOF {
				t.Fatalf("Reading failed with %s, %s", err, file.Name())
			}
		})`
$DIR/internal/s3select/json/preader_test.go: `record, err = r.Read(record)`
$DIR/internal/s3select/json/preader_test.go: `t.Run(file.Name()+"-close", func(t *testing.T) {
			f, err := os.Open(filepath.Join("testdata", file.Name()))
			if err != nil {
				t.Fatal(err)
			}
			r := NewPReader(f, &ReaderArgs{})
			r.Close()
			var record sql.Record
			for {
				record, err = r.Read(record)
				if err != nil {
					break
				}
			}
			if err != io.EOF {
				t.Fatalf("Reading failed with %s, %s", err, file.Name())
			}
		})`
$DIR/internal/s3select/json/preader_test.go: `record, err = r.Read(record)`
$DIR/internal/s3select/json/preader_test.go: `.ReadDir("testdata")`
$DIR/internal/s3select/json/preader_test.go: `.Run(file.Name(), func(t *testing.T) {
			f, err := os.Open(filepath.Join("testdata", file.Name()))
			if err != nil {
				t.Fatal(err)
			}
			r := NewPReader(f, &ReaderArgs{})
			var record sql.Record
			for {
				record, err = r.Read(record)
				if err != nil {
					break
				}
			}
			r.Close()
			if err != io.EOF {
				t.Fatalf("Reading failed with %s, %s", err, file.Name())
			}
		})`
$DIR/internal/s3select/json/preader_test.go: `.Name()`
$DIR/internal/s3select/json/preader_test.go: `.Open(filepath.Join("testdata", file.Name()))`
$DIR/internal/s3select/json/preader_test.go: `.Join("testdata", file.Name())`
$DIR/internal/s3select/json/preader_test.go: `.Name()`
$DIR/internal/s3select/json/preader_test.go: `.Read(record)`
$DIR/internal/s3select/json/preader_test.go: `.Run(file.Name()+"-close", func(t *testing.T) {
			f, err := os.Open(filepath.Join("testdata", file.Name()))
			if err != nil {
				t.Fatal(err)
			}
			r := NewPReader(f, &ReaderArgs{})
			r.Close()
			var record sql.Record
			for {
				record, err = r.Read(record)
				if err != nil {
					break
				}
			}
			if err != io.EOF {
				t.Fatalf("Reading failed with %s, %s", err, file.Name())
			}
		})`
$DIR/internal/s3select/json/preader_test.go: `.Name()`
$DIR/internal/s3select/json/preader_test.go: `.Open(filepath.Join("testdata", file.Name()))`
$DIR/internal/s3select/json/preader_test.go: `.Join("testdata", file.Name())`
$DIR/internal/s3select/json/preader_test.go: `.Name()`
$DIR/internal/s3select/json/preader_test.go: `.Read(record)`
$DIR/internal/s3select/json/reader_test.go: `t.Run(file.Name(), func(t *testing.T) {
			f, err := os.Open(filepath.Join("testdata", file.Name()))
			if err != nil {
				t.Fatal(err)
			}
			r := NewReader(f, &ReaderArgs{})
			var record sql.Record
			for {
				record, err = r.Read(record)
				if err != nil {
					break
				}
			}
			r.Close()
			if err != io.EOF {
				t.Fatalf("Reading failed with %s, %s", err, file.Name())
			}
		})`
$DIR/internal/s3select/json/reader_test.go: `record, err = r.Read(record)`
$DIR/internal/s3select/json/reader_test.go: `t.Run(file.Name()+"-close", func(t *testing.T) {
			f, err := os.Open(filepath.Join("testdata", file.Name()))
			if err != nil {
				t.Fatal(err)
			}
			r := NewReader(f, &ReaderArgs{})
			r.Close()
			var record sql.Record
			for {
				record, err = r.Read(record)
				if err != nil {
					break
				}
			}
			if err != io.EOF {
				t.Fatalf("Reading failed with %s, %s", err, file.Name())
			}
		})`
$DIR/internal/s3select/json/reader_test.go: `record, err = r.Read(record)`
$DIR/internal/s3select/json/reader_test.go: `.ReadDir("testdata")`
$DIR/internal/s3select/json/reader_test.go: `.Run(file.Name(), func(t *testing.T) {
			f, err := os.Open(filepath.Join("testdata", file.Name()))
			if err != nil {
				t.Fatal(err)
			}
			r := NewReader(f, &ReaderArgs{})
			var record sql.Record
			for {
				record, err = r.Read(record)
				if err != nil {
					break
				}
			}
			r.Close()
			if err != io.EOF {
				t.Fatalf("Reading failed with %s, %s", err, file.Name())
			}
		})`
$DIR/internal/s3select/json/reader_test.go: `.Name()`
$DIR/internal/s3select/json/reader_test.go: `.Open(filepath.Join("testdata", file.Name()))`
$DIR/internal/s3select/json/reader_test.go: `.Join("testdata", file.Name())`
$DIR/internal/s3select/json/reader_test.go: `.Name()`
$DIR/internal/s3select/json/reader_test.go: `.Read(record)`
$DIR/internal/s3select/json/reader_test.go: `.Run(file.Name()+"-close", func(t *testing.T) {
			f, err := os.Open(filepath.Join("testdata", file.Name()))
			if err != nil {
				t.Fatal(err)
			}
			r := NewReader(f, &ReaderArgs{})
			r.Close()
			var record sql.Record
			for {
				record, err = r.Read(record)
				if err != nil {
					break
				}
			}
			if err != io.EOF {
				t.Fatalf("Reading failed with %s, %s", err, file.Name())
			}
		})`
$DIR/internal/s3select/json/reader_test.go: `.Name()`
$DIR/internal/s3select/json/reader_test.go: `.Open(filepath.Join("testdata", file.Name()))`
$DIR/internal/s3select/json/reader_test.go: `.Join("testdata", file.Name())`
$DIR/internal/s3select/json/reader_test.go: `.Name()`
$DIR/internal/s3select/json/reader_test.go: `.Read(record)`
$DIR/internal/s3select/select_test.go: `t.Run(testCase.name, func(t *testing.T) {
			// Hack cpuid to the CPU doesn't appear to support AVX2.
			// Restore whatever happens.
			if cpuid.CPU.Supports(cpuid.AVX2) {
				cpuid.CPU.Disable(cpuid.AVX2)
				defer cpuid.CPU.Enable(cpuid.AVX2)
			}
			if simdjson.SupportedCPU() {
				t.Fatal("setup error: expected cpu to be unsupported")
			}
			testReq := testCase.requestXML
			if len(testReq) == 0 {
				var escaped bytes.Buffer
				xml.EscapeText(&escaped, []byte(testCase.query))
				testReq = []byte(fmt.Sprintf(defRequest, escaped.String()))
			}
			s3Select, err := NewS3Select(bytes.NewReader(testReq))
			if err != nil {
				t.Fatal(err)
			}

			in := input
			if len(testCase.withJSON) > 0 {
				in = testCase.withJSON
			}
			if err = s3Select.Open(newStringRSC(in)); err != nil {
				t.Fatal(err)
			}

			w := &testResponseWriter{}
			s3Select.Evaluate(w)
			s3Select.Close()
			resp := http.Response{
				StatusCode:    http.StatusOK,
				Body:          io.NopCloser(bytes.NewReader(w.response)),
				ContentLength: int64(len(w.response)),
			}
			res, err := minio.NewSelectResults(&resp, "testbucket")
			if err != nil {
				t.Error(err)
				return
			}
			got, err := io.ReadAll(res)
			if err != nil {
				t.Error(err)
				return
			}
			gotS := strings.TrimSpace(string(got))
			if !reflect.DeepEqual(gotS, testCase.wantResult) {
				t.Errorf("received response does not match with expected reply. Query: %s\ngot: %s\nwant:%s", testCase.query, gotS, testCase.wantResult)
			}
		})`
$DIR/internal/s3select/select_test.go: `cpuid.CPU.Disable(cpuid.AVX2)`
$DIR/internal/s3select/select_test.go: `xml.EscapeText(&escaped, []byte(testCase.query))`
$DIR/internal/s3select/select_test.go: `testReq = []byte(fmt.Sprintf(defRequest, escaped.String()))`
$DIR/internal/s3select/select_test.go: `in = testCase.withJSON`
$DIR/internal/s3select/select_test.go: `s3Select.Evaluate(w)`
$DIR/internal/s3select/select_test.go: `t.Run("simd-"+testCase.name, func(t *testing.T) {
			if !simdjson.SupportedCPU() {
				t.Skip("No CPU support")
			}
			testReq := testCase.requestXML
			if len(testReq) == 0 {
				var escaped bytes.Buffer
				xml.EscapeText(&escaped, []byte(testCase.query))
				testReq = []byte(fmt.Sprintf(defRequest, escaped.String()))
			}
			s3Select, err := NewS3Select(bytes.NewReader(testReq))
			if err != nil {
				t.Fatal(err)
			}

			in := input
			if len(testCase.withJSON) > 0 {
				in = testCase.withJSON
			}
			if err = s3Select.Open(newStringRSC(in)); err != nil {
				t.Fatal(err)
			}

			w := &testResponseWriter{}
			s3Select.Evaluate(w)
			s3Select.Close()
			resp := http.Response{
				StatusCode:    http.StatusOK,
				Body:          io.NopCloser(bytes.NewReader(w.response)),
				ContentLength: int64(len(w.response)),
			}
			res, err := minio.NewSelectResults(&resp, "testbucket")
			if err != nil {
				t.Error(err)
				return
			}
			got, err := io.ReadAll(res)
			if err != nil {
				t.Error(err)
				return
			}
			gotS := strings.TrimSpace(string(got))
			if !reflect.DeepEqual(gotS, testCase.wantResult) {
				t.Errorf("received response does not match with expected reply. Query: %s\ngot: %s\nwant:%s", testCase.query, gotS, testCase.wantResult)
			}
		})`
$DIR/internal/s3select/select_test.go: `xml.EscapeText(&escaped, []byte(testCase.query))`
$DIR/internal/s3select/select_test.go: `testReq = []byte(fmt.Sprintf(defRequest, escaped.String()))`
$DIR/internal/s3select/select_test.go: `in = testCase.withJSON`
$DIR/internal/s3select/select_test.go: `s3Select.Evaluate(w)`
$DIR/internal/s3select/select_test.go: `t.Run(testCase.name, func(t *testing.T) {
			testReq := testCase.requestXML
			if len(testReq) == 0 {
				testReq = []byte(fmt.Sprintf(defRequest, testCase.query))
			}
			s3Select, err := NewS3Select(bytes.NewReader(testReq))
			if err != nil {
				t.Fatal(err)
			}

			if err = s3Select.Open(newStringRSC(input)); err != nil {
				t.Fatal(err)
			}

			w := &testResponseWriter{}
			s3Select.Evaluate(w)
			s3Select.Close()
			resp := http.Response{
				StatusCode:    http.StatusOK,
				Body:          io.NopCloser(bytes.NewReader(w.response)),
				ContentLength: int64(len(w.response)),
			}
			res, err := minio.NewSelectResults(&resp, "testbucket")
			if err != nil {
				t.Error(err)
				return
			}
			got, err := io.ReadAll(res)
			if err != nil {
				t.Error(err)
				return
			}
			gotS := strings.TrimSpace(string(got))
			if !reflect.DeepEqual(gotS, testCase.wantResult) {
				t.Errorf("received response does not match with expected reply. Query: %s\ngot: %s\nwant:%s", testCase.query, gotS, testCase.wantResult)
			}
		})`
$DIR/internal/s3select/select_test.go: `testReq = []byte(fmt.Sprintf(defRequest, testCase.query))`
$DIR/internal/s3select/select_test.go: `s3Select.Evaluate(w)`
$DIR/internal/s3select/select_test.go: `t.Run(testCase.name, func(t *testing.T) {
			testReq := testCase.requestXML
			if len(testReq) == 0 {
				testReq = []byte(fmt.Sprintf(defRequest, testCase.query))
			}
			s3Select, err := NewS3Select(bytes.NewReader(testReq))
			if err != nil {
				t.Fatal(err)
			}

			if err = s3Select.Open(newBytesRSC(testCase.input)); err != nil {
				t.Fatal(err)
			}

			w := &testResponseWriter{}
			s3Select.Evaluate(w)
			s3Select.Close()
			resp := http.Response{
				StatusCode:    http.StatusOK,
				Body:          io.NopCloser(bytes.NewReader(w.response)),
				ContentLength: int64(len(w.response)),
			}
			res, err := minio.NewSelectResults(&resp, "testbucket")
			if err != nil {
				t.Error(err)
				return
			}
			got, err := io.ReadAll(res)
			if err != nil {
				t.Error(err)
				return
			}
			gotS := strings.TrimSpace(string(got))
			if !reflect.DeepEqual(gotS, testCase.wantResult) {
				t.Errorf("received response does not match with expected reply. Query: %s\ngot: %s\nwant:%s", testCase.query, gotS, testCase.wantResult)
			}
		})`
$DIR/internal/s3select/select_test.go: `testReq = []byte(fmt.Sprintf(defRequest, testCase.query))`
$DIR/internal/s3select/select_test.go: `s3Select.Evaluate(w)`
$DIR/internal/s3select/select_test.go: `t.Run(testCase.name, func(t *testing.T) {
			testReq := testCase.requestXML
			if len(testReq) == 0 {
				testReq = []byte(fmt.Sprintf(defRequest, testCase.query))
			}
			s3Select, err := NewS3Select(bytes.NewReader(testReq))
			if err != nil {
				t.Fatal(err)
			}

			if err = s3Select.Open(newStringRSC(input)); err != nil {
				t.Fatal(err)
			}

			w := &testResponseWriter{}
			s3Select.Evaluate(w)
			s3Select.Close()
			resp := http.Response{
				StatusCode:    http.StatusOK,
				Body:          io.NopCloser(bytes.NewReader(w.response)),
				ContentLength: int64(len(w.response)),
			}
			res, err := minio.NewSelectResults(&resp, "testbucket")
			if err != nil {
				t.Error(err)
				return
			}
			got, err := io.ReadAll(res)
			if err != nil {
				t.Error(err)
				return
			}
			gotS := strings.TrimSpace(string(got))
			if gotS != testCase.wantResult {
				t.Errorf("received response does not match with expected reply.\nQuery: %s\n=====\ngot: %s\n=====\nwant: %s\n=====\n", testCase.query, gotS, testCase.wantResult)
			}
		})`
$DIR/internal/s3select/select_test.go: `testReq = []byte(fmt.Sprintf(defRequest, testCase.query))`
$DIR/internal/s3select/select_test.go: `s3Select.Evaluate(w)`
$DIR/internal/s3select/select_test.go: `t.Run(fmt.Sprint(i), func(t *testing.T) {
			s3Select, err := NewS3Select(bytes.NewReader(testCase.requestXML))
			if err != nil {
				t.Fatal(err)
			}

			if err = s3Select.Open(newBytesRSC(csvData)); err != nil {
				t.Fatal(err)
			}

			w := &testResponseWriter{}
			s3Select.Evaluate(w)
			s3Select.Close()

			if !reflect.DeepEqual(w.response, testCase.expectedResult) {
				resp := http.Response{
					StatusCode:    http.StatusOK,
					Body:          io.NopCloser(bytes.NewReader(w.response)),
					ContentLength: int64(len(w.response)),
				}
				res, err := minio.NewSelectResults(&resp, "testbucket")
				if err != nil {
					t.Error(err)
					return
				}
				got, err := io.ReadAll(res)
				if err != nil {
					t.Error(err)
					return
				}

				t.Errorf("received response does not match with expected reply\ngot: %#v\nwant:%#v\ndecoded:%s", w.response, testCase.expectedResult, string(got))
			}
		})`
$DIR/internal/s3select/select_test.go: `s3Select.Evaluate(w)`
$DIR/internal/s3select/select_test.go: `t.Run(fmt.Sprint(i), func(t *testing.T) {
			s3Select, err := NewS3Select(bytes.NewReader(testCase.requestXML))
			if err != nil {
				t.Fatal(err)
			}

			if err = s3Select.Open(newBytesRSC(jsonData)); err != nil {
				t.Fatal(err)
			}

			w := &testResponseWriter{}
			s3Select.Evaluate(w)
			s3Select.Close()

			if !reflect.DeepEqual(w.response, testCase.expectedResult) {
				resp := http.Response{
					StatusCode:    http.StatusOK,
					Body:          io.NopCloser(bytes.NewReader(w.response)),
					ContentLength: int64(len(w.response)),
				}
				res, err := minio.NewSelectResults(&resp, "testbucket")
				if err != nil {
					t.Error(err)
					return
				}
				got, err := io.ReadAll(res)
				if err != nil {
					t.Error(err)
					return
				}

				t.Errorf("received response does not match with expected reply\ngot: %#v\nwant:%#v\ndecoded:%s", w.response, testCase.expectedResult, string(got))
			}
		})`
$DIR/internal/s3select/select_test.go: `s3Select.Evaluate(w)`
$DIR/internal/s3select/select_test.go: `t.Run(testCase.name, func(t *testing.T) {
			testReq := testCase.requestXML
			s3Select, err := NewS3Select(bytes.NewReader(testReq))
			if err != nil {
				if !testCase.wantErr {
					t.Fatal(err)
				}
				t.Logf("got expected error: %v", err)
				return
			}

			if err = s3Select.Open(newBytesRSC(testCase.input)); err != nil {
				if !testCase.wantErr {
					t.Fatal(err)
				}
				t.Logf("got expected error: %v", err)
				return
			} else if testCase.wantErr {
				t.Error("did not get expected error")
				return
			}

			w := &testResponseWriter{}
			s3Select.Evaluate(w)
			s3Select.Close()
			resp := http.Response{
				StatusCode:    http.StatusOK,
				Body:          io.NopCloser(bytes.NewReader(w.response)),
				ContentLength: int64(len(w.response)),
			}
			res, err := minio.NewSelectResults(&resp, "testbucket")
			if err != nil {
				t.Error(err)
				return
			}
			got, err := io.ReadAll(res)
			if err != nil {
				t.Error(err)
				return
			}
			gotS := strings.TrimSpace(string(got))
			if !reflect.DeepEqual(gotS, testCase.wantResult) {
				t.Errorf("received response does not match with expected reply. Query: %s\ngot: %s\nwant:%s", testCase.query, gotS, testCase.wantResult)
			}
		})`
$DIR/internal/s3select/select_test.go: `s3Select.Evaluate(w)`
$DIR/internal/s3select/select_test.go: `parquetSupport = saved`
$DIR/internal/s3select/select_test.go: `parquetSupport = true`
$DIR/internal/s3select/select_test.go: `t.Run(fmt.Sprint(i), func(t *testing.T) {
			testdataFile := "testdata/testdata.parquet"
			file, err := os.Open(testdataFile)
			if err != nil {
				t.Fatal(err)
			}

			s3Select, err := NewS3Select(bytes.NewReader(testCase.requestXML))
			if err != nil {
				t.Fatal(err)
			}

			if err = s3Select.Open(file); err != nil {
				t.Fatal(err)
			}

			fmt.Printf("R: \nE: %s\n" /* string(w.response), */, string(testCase.expectedResult))

			w := &testResponseWriter{}
			s3Select.Evaluate(w)
			s3Select.Close()

			if !reflect.DeepEqual(w.response, testCase.expectedResult) {
				resp := http.Response{
					StatusCode:    http.StatusOK,
					Body:          io.NopCloser(bytes.NewReader(w.response)),
					ContentLength: int64(len(w.response)),
				}
				res, err := minio.NewSelectResults(&resp, "testbucket")
				if err != nil {
					t.Error(err)
					return
				}
				got, err := io.ReadAll(res)
				if err != nil {
					t.Error(err)
					return
				}

				t.Errorf("received response does not match with expected reply\ngot: %#v\nwant:%#v\ndecoded:%s", w.response, testCase.expectedResult, string(got))
			}
		})`
$DIR/internal/s3select/select_test.go: `fmt.Printf("R: \nE: %s\n" /* string(w.response), */, string(testCase.expectedResult))`
$DIR/internal/s3select/select_test.go: `s3Select.Evaluate(w)`
$DIR/internal/s3select/select_test.go: `parquetSupport = saved`
$DIR/internal/s3select/select_test.go: `parquetSupport = true`
$DIR/internal/s3select/select_test.go: `t.Run(fmt.Sprint(i), func(t *testing.T) {
			testdataFile := "testdata/lineitem_shipdate.parquet"
			file, err := os.Open(testdataFile)
			if err != nil {
				t.Fatal(err)
			}

			s3Select, err := NewS3Select(bytes.NewReader(testCase.requestXML))
			if err != nil {
				t.Fatal(err)
			}

			if err = s3Select.Open(file); err != nil {
				t.Fatal(err)
			}

			w := &testResponseWriter{}
			s3Select.Evaluate(w)
			s3Select.Close()
			resp := http.Response{
				StatusCode:    http.StatusOK,
				Body:          io.NopCloser(bytes.NewReader(w.response)),
				ContentLength: int64(len(w.response)),
			}
			res, err := minio.NewSelectResults(&resp, "testbucket")
			if err != nil {
				t.Error(err)
				return
			}
			got, err := io.ReadAll(res)
			if err != nil {
				t.Error(err)
				return
			}
			gotS := strings.TrimSpace(string(got))
			if !reflect.DeepEqual(gotS, testCase.wantResult) {
				t.Errorf("received response does not match with expected reply. Query: %s\ngot: %s\nwant:%s", testCase.requestXML, gotS, testCase.wantResult)
			}
		})`
$DIR/internal/s3select/select_test.go: `s3Select.Evaluate(w)`
$DIR/internal/s3select/select_test.go: `parquetSupport = saved`
$DIR/internal/s3select/select_test.go: `parquetSupport = true`
$DIR/internal/s3select/select_test.go: `t.Run(fmt.Sprint(i), func(t *testing.T) {
			testdataFile := "testdata/lineitem_shipdate.parquet"
			file, err := os.Open(testdataFile)
			if err != nil {
				t.Fatal(err)
			}

			s3Select, err := NewS3Select(bytes.NewReader(testCase.requestXML))
			if err != nil {
				t.Fatal(err)
			}

			if err = s3Select.Open(file); err != nil {
				t.Fatal(err)
			}

			w := &testResponseWriter{}
			s3Select.Evaluate(w)
			s3Select.Close()
			resp := http.Response{
				StatusCode:    http.StatusOK,
				Body:          io.NopCloser(bytes.NewReader(w.response)),
				ContentLength: int64(len(w.response)),
			}
			res, err := minio.NewSelectResults(&resp, "testbucket")
			if err != nil {
				t.Error(err)
				return
			}
			got, err := io.ReadAll(res)
			if err != nil {
				t.Error(err)
				return
			}
			gotS := strings.TrimSpace(string(got))
			if !reflect.DeepEqual(gotS, testCase.wantResult) {
				t.Errorf("received response does not match with expected reply. Query: %s\ngot: %s\nwant:%s", testCase.requestXML, gotS, testCase.wantResult)
			}
		})`
$DIR/internal/s3select/select_test.go: `s3Select.Evaluate(w)`
$DIR/internal/s3select/select_test.go: `.Run(testCase.name, func(t *testing.T) {
			// Hack cpuid to the CPU doesn't appear to support AVX2.
			// Restore whatever happens.
			if cpuid.CPU.Supports(cpuid.AVX2) {
				cpuid.CPU.Disable(cpuid.AVX2)
				defer cpuid.CPU.Enable(cpuid.AVX2)
			}
			if simdjson.SupportedCPU() {
				t.Fatal("setup error: expected cpu to be unsupported")
			}
			testReq := testCase.requestXML
			if len(testReq) == 0 {
				var escaped bytes.Buffer
				xml.EscapeText(&escaped, []byte(testCase.query))
				testReq = []byte(fmt.Sprintf(defRequest, escaped.String()))
			}
			s3Select, err := NewS3Select(bytes.NewReader(testReq))
			if err != nil {
				t.Fatal(err)
			}

			in := input
			if len(testCase.withJSON) > 0 {
				in = testCase.withJSON
			}
			if err = s3Select.Open(newStringRSC(in)); err != nil {
				t.Fatal(err)
			}

			w := &testResponseWriter{}
			s3Select.Evaluate(w)
			s3Select.Close()
			resp := http.Response{
				StatusCode:    http.StatusOK,
				Body:          io.NopCloser(bytes.NewReader(w.response)),
				ContentLength: int64(len(w.response)),
			}
			res, err := minio.NewSelectResults(&resp, "testbucket")
			if err != nil {
				t.Error(err)
				return
			}
			got, err := io.ReadAll(res)
			if err != nil {
				t.Error(err)
				return
			}
			gotS := strings.TrimSpace(string(got))
			if !reflect.DeepEqual(gotS, testCase.wantResult) {
				t.Errorf("received response does not match with expected reply. Query: %s\ngot: %s\nwant:%s", testCase.query, gotS, testCase.wantResult)
			}
		})`
$DIR/internal/s3select/select_test.go: `.CPU.Supports(cpuid.AVX2)`
$DIR/internal/s3select/select_test.go: `.CPU.Disable(cpuid.AVX2)`
$DIR/internal/s3select/select_test.go: `.CPU.Enable(cpuid.AVX2)`
$DIR/internal/s3select/select_test.go: `.SupportedCPU()`
$DIR/internal/s3select/select_test.go: `.EscapeText(&escaped, []byte(testCase.query))`
$DIR/internal/s3select/select_test.go: `.Sprintf(defRequest, escaped.String())`
$DIR/internal/s3select/select_test.go: `.String()`
$DIR/internal/s3select/select_test.go: `.NewReader(testReq)`
$DIR/internal/s3select/select_test.go: `.Open(newStringRSC(in))`
$DIR/internal/s3select/select_test.go: `.Evaluate(w)`
$DIR/internal/s3select/select_test.go: `.NopCloser(bytes.NewReader(w.response))`
$DIR/internal/s3select/select_test.go: `.NewReader(w.response)`
$DIR/internal/s3select/select_test.go: `.NewSelectResults(&resp, "testbucket")`
$DIR/internal/s3select/select_test.go: `.ReadAll(res)`
$DIR/internal/s3select/select_test.go: `.TrimSpace(string(got))`
$DIR/internal/s3select/select_test.go: `.DeepEqual(gotS, testCase.wantResult)`
$DIR/internal/s3select/select_test.go: `.Run("simd-"+testCase.name, func(t *testing.T) {
			if !simdjson.SupportedCPU() {
				t.Skip("No CPU support")
			}
			testReq := testCase.requestXML
			if len(testReq) == 0 {
				var escaped bytes.Buffer
				xml.EscapeText(&escaped, []byte(testCase.query))
				testReq = []byte(fmt.Sprintf(defRequest, escaped.String()))
			}
			s3Select, err := NewS3Select(bytes.NewReader(testReq))
			if err != nil {
				t.Fatal(err)
			}

			in := input
			if len(testCase.withJSON) > 0 {
				in = testCase.withJSON
			}
			if err = s3Select.Open(newStringRSC(in)); err != nil {
				t.Fatal(err)
			}

			w := &testResponseWriter{}
			s3Select.Evaluate(w)
			s3Select.Close()
			resp := http.Response{
				StatusCode:    http.StatusOK,
				Body:          io.NopCloser(bytes.NewReader(w.response)),
				ContentLength: int64(len(w.response)),
			}
			res, err := minio.NewSelectResults(&resp, "testbucket")
			if err != nil {
				t.Error(err)
				return
			}
			got, err := io.ReadAll(res)
			if err != nil {
				t.Error(err)
				return
			}
			gotS := strings.TrimSpace(string(got))
			if !reflect.DeepEqual(gotS, testCase.wantResult) {
				t.Errorf("received response does not match with expected reply. Query: %s\ngot: %s\nwant:%s", testCase.query, gotS, testCase.wantResult)
			}
		})`
$DIR/internal/s3select/select_test.go: `.SupportedCPU()`
$DIR/internal/s3select/select_test.go: `.EscapeText(&escaped, []byte(testCase.query))`
$DIR/internal/s3select/select_test.go: `.Sprintf(defRequest, escaped.String())`
$DIR/internal/s3select/select_test.go: `.String()`
$DIR/internal/s3select/select_test.go: `.NewReader(testReq)`
$DIR/internal/s3select/select_test.go: `.Open(newStringRSC(in))`
$DIR/internal/s3select/select_test.go: `.Evaluate(w)`
$DIR/internal/s3select/select_test.go: `.NopCloser(bytes.NewReader(w.response))`
$DIR/internal/s3select/select_test.go: `.NewReader(w.response)`
$DIR/internal/s3select/select_test.go: `.NewSelectResults(&resp, "testbucket")`
$DIR/internal/s3select/select_test.go: `.ReadAll(res)`
$DIR/internal/s3select/select_test.go: `.TrimSpace(string(got))`
$DIR/internal/s3select/select_test.go: `.DeepEqual(gotS, testCase.wantResult)`
$DIR/internal/s3select/select_test.go: `.Run(testCase.name, func(t *testing.T) {
			testReq := testCase.requestXML
			if len(testReq) == 0 {
				testReq = []byte(fmt.Sprintf(defRequest, testCase.query))
			}
			s3Select, err := NewS3Select(bytes.NewReader(testReq))
			if err != nil {
				t.Fatal(err)
			}

			if err = s3Select.Open(newStringRSC(input)); err != nil {
				t.Fatal(err)
			}

			w := &testResponseWriter{}
			s3Select.Evaluate(w)
			s3Select.Close()
			resp := http.Response{
				StatusCode:    http.StatusOK,
				Body:          io.NopCloser(bytes.NewReader(w.response)),
				ContentLength: int64(len(w.response)),
			}
			res, err := minio.NewSelectResults(&resp, "testbucket")
			if err != nil {
				t.Error(err)
				return
			}
			got, err := io.ReadAll(res)
			if err != nil {
				t.Error(err)
				return
			}
			gotS := strings.TrimSpace(string(got))
			if !reflect.DeepEqual(gotS, testCase.wantResult) {
				t.Errorf("received response does not match with expected reply. Query: %s\ngot: %s\nwant:%s", testCase.query, gotS, testCase.wantResult)
			}
		})`
$DIR/internal/s3select/select_test.go: `.Sprintf(defRequest, testCase.query)`
$DIR/internal/s3select/select_test.go: `.NewReader(testReq)`
$DIR/internal/s3select/select_test.go: `.Open(newStringRSC(input))`
$DIR/internal/s3select/select_test.go: `.Evaluate(w)`
$DIR/internal/s3select/select_test.go: `.NopCloser(bytes.NewReader(w.response))`
$DIR/internal/s3select/select_test.go: `.NewReader(w.response)`
$DIR/internal/s3select/select_test.go: `.NewSelectResults(&resp, "testbucket")`
$DIR/internal/s3select/select_test.go: `.ReadAll(res)`
$DIR/internal/s3select/select_test.go: `.TrimSpace(string(got))`
$DIR/internal/s3select/select_test.go: `.DeepEqual(gotS, testCase.wantResult)`
$DIR/internal/s3select/select_test.go: `.Run(testCase.name, func(t *testing.T) {
			testReq := testCase.requestXML
			if len(testReq) == 0 {
				testReq = []byte(fmt.Sprintf(defRequest, testCase.query))
			}
			s3Select, err := NewS3Select(bytes.NewReader(testReq))
			if err != nil {
				t.Fatal(err)
			}

			if err = s3Select.Open(newBytesRSC(testCase.input)); err != nil {
				t.Fatal(err)
			}

			w := &testResponseWriter{}
			s3Select.Evaluate(w)
			s3Select.Close()
			resp := http.Response{
				StatusCode:    http.StatusOK,
				Body:          io.NopCloser(bytes.NewReader(w.response)),
				ContentLength: int64(len(w.response)),
			}
			res, err := minio.NewSelectResults(&resp, "testbucket")
			if err != nil {
				t.Error(err)
				return
			}
			got, err := io.ReadAll(res)
			if err != nil {
				t.Error(err)
				return
			}
			gotS := strings.TrimSpace(string(got))
			if !reflect.DeepEqual(gotS, testCase.wantResult) {
				t.Errorf("received response does not match with expected reply. Query: %s\ngot: %s\nwant:%s", testCase.query, gotS, testCase.wantResult)
			}
		})`
$DIR/internal/s3select/select_test.go: `.Sprintf(defRequest, testCase.query)`
$DIR/internal/s3select/select_test.go: `.NewReader(testReq)`
$DIR/internal/s3select/select_test.go: `.Open(newBytesRSC(testCase.input))`
$DIR/internal/s3select/select_test.go: `.Evaluate(w)`
$DIR/internal/s3select/select_test.go: `.NopCloser(bytes.NewReader(w.response))`
$DIR/internal/s3select/select_test.go: `.NewReader(w.response)`
$DIR/internal/s3select/select_test.go: `.NewSelectResults(&resp, "testbucket")`
$DIR/internal/s3select/select_test.go: `.ReadAll(res)`
$DIR/internal/s3select/select_test.go: `.TrimSpace(string(got))`
$DIR/internal/s3select/select_test.go: `.DeepEqual(gotS, testCase.wantResult)`
$DIR/internal/s3select/select_test.go: `.Run(testCase.name, func(t *testing.T) {
			testReq := testCase.requestXML
			if len(testReq) == 0 {
				testReq = []byte(fmt.Sprintf(defRequest, testCase.query))
			}
			s3Select, err := NewS3Select(bytes.NewReader(testReq))
			if err != nil {
				t.Fatal(err)
			}

			if err = s3Select.Open(newStringRSC(input)); err != nil {
				t.Fatal(err)
			}

			w := &testResponseWriter{}
			s3Select.Evaluate(w)
			s3Select.Close()
			resp := http.Response{
				StatusCode:    http.StatusOK,
				Body:          io.NopCloser(bytes.NewReader(w.response)),
				ContentLength: int64(len(w.response)),
			}
			res, err := minio.NewSelectResults(&resp, "testbucket")
			if err != nil {
				t.Error(err)
				return
			}
			got, err := io.ReadAll(res)
			if err != nil {
				t.Error(err)
				return
			}
			gotS := strings.TrimSpace(string(got))
			if gotS != testCase.wantResult {
				t.Errorf("received response does not match with expected reply.\nQuery: %s\n=====\ngot: %s\n=====\nwant: %s\n=====\n", testCase.query, gotS, testCase.wantResult)
			}
		})`
$DIR/internal/s3select/select_test.go: `.Sprintf(defRequest, testCase.query)`
$DIR/internal/s3select/select_test.go: `.NewReader(testReq)`
$DIR/internal/s3select/select_test.go: `.Open(newStringRSC(input))`
$DIR/internal/s3select/select_test.go: `.Evaluate(w)`
$DIR/internal/s3select/select_test.go: `.NopCloser(bytes.NewReader(w.response))`
$DIR/internal/s3select/select_test.go: `.NewReader(w.response)`
$DIR/internal/s3select/select_test.go: `.NewSelectResults(&resp, "testbucket")`
$DIR/internal/s3select/select_test.go: `.ReadAll(res)`
$DIR/internal/s3select/select_test.go: `.TrimSpace(string(got))`
$DIR/internal/s3select/select_test.go: `.Run(fmt.Sprint(i), func(t *testing.T) {
			s3Select, err := NewS3Select(bytes.NewReader(testCase.requestXML))
			if err != nil {
				t.Fatal(err)
			}

			if err = s3Select.Open(newBytesRSC(csvData)); err != nil {
				t.Fatal(err)
			}

			w := &testResponseWriter{}
			s3Select.Evaluate(w)
			s3Select.Close()

			if !reflect.DeepEqual(w.response, testCase.expectedResult) {
				resp := http.Response{
					StatusCode:    http.StatusOK,
					Body:          io.NopCloser(bytes.NewReader(w.response)),
					ContentLength: int64(len(w.response)),
				}
				res, err := minio.NewSelectResults(&resp, "testbucket")
				if err != nil {
					t.Error(err)
					return
				}
				got, err := io.ReadAll(res)
				if err != nil {
					t.Error(err)
					return
				}

				t.Errorf("received response does not match with expected reply\ngot: %#v\nwant:%#v\ndecoded:%s", w.response, testCase.expectedResult, string(got))
			}
		})`
$DIR/internal/s3select/select_test.go: `.Sprint(i)`
$DIR/internal/s3select/select_test.go: `.NewReader(testCase.requestXML)`
$DIR/internal/s3select/select_test.go: `.Open(newBytesRSC(csvData))`
$DIR/internal/s3select/select_test.go: `.Evaluate(w)`
$DIR/internal/s3select/select_test.go: `.DeepEqual(w.response, testCase.expectedResult)`
$DIR/internal/s3select/select_test.go: `.NopCloser(bytes.NewReader(w.response))`
$DIR/internal/s3select/select_test.go: `.NewReader(w.response)`
$DIR/internal/s3select/select_test.go: `.NewSelectResults(&resp, "testbucket")`
$DIR/internal/s3select/select_test.go: `.ReadAll(res)`
$DIR/internal/s3select/select_test.go: `.Run(fmt.Sprint(i), func(t *testing.T) {
			s3Select, err := NewS3Select(bytes.NewReader(testCase.requestXML))
			if err != nil {
				t.Fatal(err)
			}

			if err = s3Select.Open(newBytesRSC(jsonData)); err != nil {
				t.Fatal(err)
			}

			w := &testResponseWriter{}
			s3Select.Evaluate(w)
			s3Select.Close()

			if !reflect.DeepEqual(w.response, testCase.expectedResult) {
				resp := http.Response{
					StatusCode:    http.StatusOK,
					Body:          io.NopCloser(bytes.NewReader(w.response)),
					ContentLength: int64(len(w.response)),
				}
				res, err := minio.NewSelectResults(&resp, "testbucket")
				if err != nil {
					t.Error(err)
					return
				}
				got, err := io.ReadAll(res)
				if err != nil {
					t.Error(err)
					return
				}

				t.Errorf("received response does not match with expected reply\ngot: %#v\nwant:%#v\ndecoded:%s", w.response, testCase.expectedResult, string(got))
			}
		})`
$DIR/internal/s3select/select_test.go: `.Sprint(i)`
$DIR/internal/s3select/select_test.go: `.NewReader(testCase.requestXML)`
$DIR/internal/s3select/select_test.go: `.Open(newBytesRSC(jsonData))`
$DIR/internal/s3select/select_test.go: `.Evaluate(w)`
$DIR/internal/s3select/select_test.go: `.DeepEqual(w.response, testCase.expectedResult)`
$DIR/internal/s3select/select_test.go: `.NopCloser(bytes.NewReader(w.response))`
$DIR/internal/s3select/select_test.go: `.NewReader(w.response)`
$DIR/internal/s3select/select_test.go: `.NewSelectResults(&resp, "testbucket")`
$DIR/internal/s3select/select_test.go: `.ReadAll(res)`
$DIR/internal/s3select/select_test.go: `.Run(testCase.name, func(t *testing.T) {
			testReq := testCase.requestXML
			s3Select, err := NewS3Select(bytes.NewReader(testReq))
			if err != nil {
				if !testCase.wantErr {
					t.Fatal(err)
				}
				t.Logf("got expected error: %v", err)
				return
			}

			if err = s3Select.Open(newBytesRSC(testCase.input)); err != nil {
				if !testCase.wantErr {
					t.Fatal(err)
				}
				t.Logf("got expected error: %v", err)
				return
			} else if testCase.wantErr {
				t.Error("did not get expected error")
				return
			}

			w := &testResponseWriter{}
			s3Select.Evaluate(w)
			s3Select.Close()
			resp := http.Response{
				StatusCode:    http.StatusOK,
				Body:          io.NopCloser(bytes.NewReader(w.response)),
				ContentLength: int64(len(w.response)),
			}
			res, err := minio.NewSelectResults(&resp, "testbucket")
			if err != nil {
				t.Error(err)
				return
			}
			got, err := io.ReadAll(res)
			if err != nil {
				t.Error(err)
				return
			}
			gotS := strings.TrimSpace(string(got))
			if !reflect.DeepEqual(gotS, testCase.wantResult) {
				t.Errorf("received response does not match with expected reply. Query: %s\ngot: %s\nwant:%s", testCase.query, gotS, testCase.wantResult)
			}
		})`
$DIR/internal/s3select/select_test.go: `.NewReader(testReq)`
$DIR/internal/s3select/select_test.go: `.Open(newBytesRSC(testCase.input))`
$DIR/internal/s3select/select_test.go: `.Evaluate(w)`
$DIR/internal/s3select/select_test.go: `.NopCloser(bytes.NewReader(w.response))`
$DIR/internal/s3select/select_test.go: `.NewReader(w.response)`
$DIR/internal/s3select/select_test.go: `.NewSelectResults(&resp, "testbucket")`
$DIR/internal/s3select/select_test.go: `.ReadAll(res)`
$DIR/internal/s3select/select_test.go: `.TrimSpace(string(got))`
$DIR/internal/s3select/select_test.go: `.DeepEqual(gotS, testCase.wantResult)`
$DIR/internal/s3select/select_test.go: `.Run(fmt.Sprint(i), func(t *testing.T) {
			testdataFile := "testdata/testdata.parquet"
			file, err := os.Open(testdataFile)
			if err != nil {
				t.Fatal(err)
			}

			s3Select, err := NewS3Select(bytes.NewReader(testCase.requestXML))
			if err != nil {
				t.Fatal(err)
			}

			if err = s3Select.Open(file); err != nil {
				t.Fatal(err)
			}

			fmt.Printf("R: \nE: %s\n" /* string(w.response), */, string(testCase.expectedResult))

			w := &testResponseWriter{}
			s3Select.Evaluate(w)
			s3Select.Close()

			if !reflect.DeepEqual(w.response, testCase.expectedResult) {
				resp := http.Response{
					StatusCode:    http.StatusOK,
					Body:          io.NopCloser(bytes.NewReader(w.response)),
					ContentLength: int64(len(w.response)),
				}
				res, err := minio.NewSelectResults(&resp, "testbucket")
				if err != nil {
					t.Error(err)
					return
				}
				got, err := io.ReadAll(res)
				if err != nil {
					t.Error(err)
					return
				}

				t.Errorf("received response does not match with expected reply\ngot: %#v\nwant:%#v\ndecoded:%s", w.response, testCase.expectedResult, string(got))
			}
		})`
$DIR/internal/s3select/select_test.go: `.Sprint(i)`
$DIR/internal/s3select/select_test.go: `.Open(testdataFile)`
$DIR/internal/s3select/select_test.go: `.NewReader(testCase.requestXML)`
$DIR/internal/s3select/select_test.go: `.Open(file)`
$DIR/internal/s3select/select_test.go: `.Printf("R: \nE: %s\n" /* string(w.response), */, string(testCase.expectedResult))`
$DIR/internal/s3select/select_test.go: `.Evaluate(w)`
$DIR/internal/s3select/select_test.go: `.DeepEqual(w.response, testCase.expectedResult)`
$DIR/internal/s3select/select_test.go: `.NopCloser(bytes.NewReader(w.response))`
$DIR/internal/s3select/select_test.go: `.NewReader(w.response)`
$DIR/internal/s3select/select_test.go: `.NewSelectResults(&resp, "testbucket")`
$DIR/internal/s3select/select_test.go: `.ReadAll(res)`
$DIR/internal/s3select/select_test.go: `.Run(fmt.Sprint(i), func(t *testing.T) {
			testdataFile := "testdata/lineitem_shipdate.parquet"
			file, err := os.Open(testdataFile)
			if err != nil {
				t.Fatal(err)
			}

			s3Select, err := NewS3Select(bytes.NewReader(testCase.requestXML))
			if err != nil {
				t.Fatal(err)
			}

			if err = s3Select.Open(file); err != nil {
				t.Fatal(err)
			}

			w := &testResponseWriter{}
			s3Select.Evaluate(w)
			s3Select.Close()
			resp := http.Response{
				StatusCode:    http.StatusOK,
				Body:          io.NopCloser(bytes.NewReader(w.response)),
				ContentLength: int64(len(w.response)),
			}
			res, err := minio.NewSelectResults(&resp, "testbucket")
			if err != nil {
				t.Error(err)
				return
			}
			got, err := io.ReadAll(res)
			if err != nil {
				t.Error(err)
				return
			}
			gotS := strings.TrimSpace(string(got))
			if !reflect.DeepEqual(gotS, testCase.wantResult) {
				t.Errorf("received response does not match with expected reply. Query: %s\ngot: %s\nwant:%s", testCase.requestXML, gotS, testCase.wantResult)
			}
		})`
$DIR/internal/s3select/select_test.go: `.Sprint(i)`
$DIR/internal/s3select/select_test.go: `.Open(testdataFile)`
$DIR/internal/s3select/select_test.go: `.NewReader(testCase.requestXML)`
$DIR/internal/s3select/select_test.go: `.Open(file)`
$DIR/internal/s3select/select_test.go: `.Evaluate(w)`
$DIR/internal/s3select/select_test.go: `.NopCloser(bytes.NewReader(w.response))`
$DIR/internal/s3select/select_test.go: `.NewReader(w.response)`
$DIR/internal/s3select/select_test.go: `.NewSelectResults(&resp, "testbucket")`
$DIR/internal/s3select/select_test.go: `.ReadAll(res)`
$DIR/internal/s3select/select_test.go: `.TrimSpace(string(got))`
$DIR/internal/s3select/select_test.go: `.DeepEqual(gotS, testCase.wantResult)`
$DIR/internal/s3select/select_test.go: `.Run(fmt.Sprint(i), func(t *testing.T) {
			testdataFile := "testdata/lineitem_shipdate.parquet"
			file, err := os.Open(testdataFile)
			if err != nil {
				t.Fatal(err)
			}

			s3Select, err := NewS3Select(bytes.NewReader(testCase.requestXML))
			if err != nil {
				t.Fatal(err)
			}

			if err = s3Select.Open(file); err != nil {
				t.Fatal(err)
			}

			w := &testResponseWriter{}
			s3Select.Evaluate(w)
			s3Select.Close()
			resp := http.Response{
				StatusCode:    http.StatusOK,
				Body:          io.NopCloser(bytes.NewReader(w.response)),
				ContentLength: int64(len(w.response)),
			}
			res, err := minio.NewSelectResults(&resp, "testbucket")
			if err != nil {
				t.Error(err)
				return
			}
			got, err := io.ReadAll(res)
			if err != nil {
				t.Error(err)
				return
			}
			gotS := strings.TrimSpace(string(got))
			if !reflect.DeepEqual(gotS, testCase.wantResult) {
				t.Errorf("received response does not match with expected reply. Query: %s\ngot: %s\nwant:%s", testCase.requestXML, gotS, testCase.wantResult)
			}
		})`
$DIR/internal/s3select/select_test.go: `.Sprint(i)`
$DIR/internal/s3select/select_test.go: `.Open(testdataFile)`
$DIR/internal/s3select/select_test.go: `.NewReader(testCase.requestXML)`
$DIR/internal/s3select/select_test.go: `.Open(file)`
$DIR/internal/s3select/select_test.go: `.Evaluate(w)`
$DIR/internal/s3select/select_test.go: `.NopCloser(bytes.NewReader(w.response))`
$DIR/internal/s3select/select_test.go: `.NewReader(w.response)`
$DIR/internal/s3select/select_test.go: `.NewSelectResults(&resp, "testbucket")`
$DIR/internal/s3select/select_test.go: `.ReadAll(res)`
$DIR/internal/s3select/select_test.go: `.TrimSpace(string(got))`
$DIR/internal/s3select/select_test.go: `.DeepEqual(gotS, testCase.wantResult)`
$DIR/internal/s3select/simdj/reader_amd64_test.go: `t.Run(tt.name, func(t *testing.T) {
			ref := loadCompressed(t, tt.name)

			var err error
			dst := make(chan simdjson.Object, 100)
			dec := NewElementReader(dst, &err, &json.ReaderArgs{ContentType: "json"})
			pj, err := simdjson.ParseND(ref, nil)
			if err != nil {
				t.Fatal(err)
			}
			i := pj.Iter()
			cpy := i
			b, err := cpy.MarshalJSON()
			if err != nil {
				t.Fatal(err)
			}
			if false {
				t.Log(string(b))
			}
			// _ = os.WriteFile(filepath.Join("testdata", tt.name+".json"), b, os.ModePerm)

		parser:
			for {
				var next simdjson.Iter
				typ, err := i.AdvanceIter(&next)
				if err != nil {
					t.Fatal(err)
				}
				switch typ {
				case simdjson.TypeNone:
					close(dst)
					break parser
				case simdjson.TypeRoot:
					typ, obj, err := next.Root(nil)
					if err != nil {
						t.Fatal(err)
					}
					if typ != simdjson.TypeObject {
						if typ == simdjson.TypeNone {
							close(dst)
							break parser
						}
						t.Fatal("Unexpected type:", typ.String())
					}

					o, err := obj.Object(nil)
					if err != nil {
						t.Fatal(err)
					}
					dst <- *o
				default:
					t.Fatal("unexpected type:", typ.String())
				}
			}
			refDec := json.NewReader(io.NopCloser(bytes.NewBuffer(ref)), &json.ReaderArgs{ContentType: "json"})

			for {
				rec, err := dec.Read(nil)
				if err == io.EOF {
					break
				}
				if err != nil {
					t.Error(err)
				}
				want, err := refDec.Read(nil)
				if err != nil {
					t.Error(err)
				}
				var gotB, wantB bytes.Buffer
				opts := sql.WriteCSVOpts{
					FieldDelimiter: ',',
					Quote:          '"',
					QuoteEscape:    '"',
					AlwaysQuote:    false,
				}
				err = rec.WriteCSV(&gotB, opts)
				if err != nil {
					t.Error(err)
				}
				err = want.WriteCSV(&wantB, opts)
				if err != nil {
					t.Error(err)
				}

				if !bytes.Equal(gotB.Bytes(), wantB.Bytes()) {
					t.Errorf("CSV output mismatch.\nwant: %s(%x)\ngot:  %s(%x)", wantB.String(), wantB.Bytes(), gotB.String(), gotB.Bytes())
				}
				gotB.Reset()
				wantB.Reset()

				err = rec.WriteJSON(&gotB)
				if err != nil {
					t.Error(err)
				}
				err = want.WriteJSON(&wantB)
				if err != nil {
					t.Error(err)
				}
				// truncate newline from 'want'
				wantB.Truncate(wantB.Len() - 1)
				if !bytes.Equal(gotB.Bytes(), wantB.Bytes()) {
					t.Errorf("JSON output mismatch.\nwant: %s\ngot:  %s", wantB.String(), gotB.String())
				}
			}
		})`
$DIR/internal/s3select/simdj/reader_amd64_test.go: `close(dst)`
$DIR/internal/s3select/simdj/reader_amd64_test.go: `close(dst)`
$DIR/internal/s3select/simdj/reader_amd64_test.go: `dst <- *o`
$DIR/internal/s3select/simdj/reader_amd64_test.go: `err = rec.WriteCSV(&gotB, opts)`
$DIR/internal/s3select/simdj/reader_amd64_test.go: `err = want.WriteCSV(&wantB, opts)`
$DIR/internal/s3select/simdj/reader_amd64_test.go: `gotB.Reset()`
$DIR/internal/s3select/simdj/reader_amd64_test.go: `wantB.Reset()`
$DIR/internal/s3select/simdj/reader_amd64_test.go: `err = rec.WriteJSON(&gotB)`
$DIR/internal/s3select/simdj/reader_amd64_test.go: `err = want.WriteJSON(&wantB)`
$DIR/internal/s3select/simdj/reader_amd64_test.go: `wantB.Truncate(wantB.Len() - 1)`
$DIR/internal/s3select/simdj/reader_amd64_test.go: `.SupportedCPU()`
$DIR/internal/s3select/simdj/reader_amd64_test.go: `.Run(tt.name, func(t *testing.T) {
			ref := loadCompressed(t, tt.name)

			var err error
			dst := make(chan simdjson.Object, 100)
			dec := NewElementReader(dst, &err, &json.ReaderArgs{ContentType: "json"})
			pj, err := simdjson.ParseND(ref, nil)
			if err != nil {
				t.Fatal(err)
			}
			i := pj.Iter()
			cpy := i
			b, err := cpy.MarshalJSON()
			if err != nil {
				t.Fatal(err)
			}
			if false {
				t.Log(string(b))
			}
			// _ = os.WriteFile(filepath.Join("testdata", tt.name+".json"), b, os.ModePerm)

		parser:
			for {
				var next simdjson.Iter
				typ, err := i.AdvanceIter(&next)
				if err != nil {
					t.Fatal(err)
				}
				switch typ {
				case simdjson.TypeNone:
					close(dst)
					break parser
				case simdjson.TypeRoot:
					typ, obj, err := next.Root(nil)
					if err != nil {
						t.Fatal(err)
					}
					if typ != simdjson.TypeObject {
						if typ == simdjson.TypeNone {
							close(dst)
							break parser
						}
						t.Fatal("Unexpected type:", typ.String())
					}

					o, err := obj.Object(nil)
					if err != nil {
						t.Fatal(err)
					}
					dst <- *o
				default:
					t.Fatal("unexpected type:", typ.String())
				}
			}
			refDec := json.NewReader(io.NopCloser(bytes.NewBuffer(ref)), &json.ReaderArgs{ContentType: "json"})

			for {
				rec, err := dec.Read(nil)
				if err == io.EOF {
					break
				}
				if err != nil {
					t.Error(err)
				}
				want, err := refDec.Read(nil)
				if err != nil {
					t.Error(err)
				}
				var gotB, wantB bytes.Buffer
				opts := sql.WriteCSVOpts{
					FieldDelimiter: ',',
					Quote:          '"',
					QuoteEscape:    '"',
					AlwaysQuote:    false,
				}
				err = rec.WriteCSV(&gotB, opts)
				if err != nil {
					t.Error(err)
				}
				err = want.WriteCSV(&wantB, opts)
				if err != nil {
					t.Error(err)
				}

				if !bytes.Equal(gotB.Bytes(), wantB.Bytes()) {
					t.Errorf("CSV output mismatch.\nwant: %s(%x)\ngot:  %s(%x)", wantB.String(), wantB.Bytes(), gotB.String(), gotB.Bytes())
				}
				gotB.Reset()
				wantB.Reset()

				err = rec.WriteJSON(&gotB)
				if err != nil {
					t.Error(err)
				}
				err = want.WriteJSON(&wantB)
				if err != nil {
					t.Error(err)
				}
				// truncate newline from 'want'
				wantB.Truncate(wantB.Len() - 1)
				if !bytes.Equal(gotB.Bytes(), wantB.Bytes()) {
					t.Errorf("JSON output mismatch.\nwant: %s\ngot:  %s", wantB.String(), gotB.String())
				}
			}
		})`
$DIR/internal/s3select/simdj/reader_amd64_test.go: `.ParseND(ref, nil)`
$DIR/internal/s3select/simdj/reader_amd64_test.go: `.Iter()`
$DIR/internal/s3select/simdj/reader_amd64_test.go: `.MarshalJSON()`
$DIR/internal/s3select/simdj/reader_amd64_test.go: `.AdvanceIter(&next)`
$DIR/internal/s3select/simdj/reader_amd64_test.go: `.Root(nil)`
$DIR/internal/s3select/simdj/reader_amd64_test.go: `.Object(nil)`
$DIR/internal/s3select/simdj/reader_amd64_test.go: `.NewReader(io.NopCloser(bytes.NewBuffer(ref)), &json.ReaderArgs{ContentType: "json"})`
$DIR/internal/s3select/simdj/reader_amd64_test.go: `.NopCloser(bytes.NewBuffer(ref))`
$DIR/internal/s3select/simdj/reader_amd64_test.go: `.NewBuffer(ref)`
$DIR/internal/s3select/simdj/reader_amd64_test.go: `.Read(nil)`
$DIR/internal/s3select/simdj/reader_amd64_test.go: `.Read(nil)`
$DIR/internal/s3select/simdj/reader_amd64_test.go: `.WriteCSV(&gotB, opts)`
$DIR/internal/s3select/simdj/reader_amd64_test.go: `.WriteCSV(&wantB, opts)`
$DIR/internal/s3select/simdj/reader_amd64_test.go: `.Equal(gotB.Bytes(), wantB.Bytes())`
$DIR/internal/s3select/simdj/reader_amd64_test.go: `.Bytes()`
$DIR/internal/s3select/simdj/reader_amd64_test.go: `.Bytes()`
$DIR/internal/s3select/simdj/reader_amd64_test.go: `.Reset()`
$DIR/internal/s3select/simdj/reader_amd64_test.go: `.Reset()`
$DIR/internal/s3select/simdj/reader_amd64_test.go: `.WriteJSON(&gotB)`
$DIR/internal/s3select/simdj/reader_amd64_test.go: `.WriteJSON(&wantB)`
$DIR/internal/s3select/simdj/reader_amd64_test.go: `.Truncate(wantB.Len() - 1)`
$DIR/internal/s3select/simdj/reader_amd64_test.go: `.Len()`
$DIR/internal/s3select/simdj/reader_amd64_test.go: `.Equal(gotB.Bytes(), wantB.Bytes())`
$DIR/internal/s3select/simdj/reader_amd64_test.go: `.Bytes()`
$DIR/internal/s3select/simdj/reader_amd64_test.go: `.Bytes()`
$DIR/internal/s3select/sql/jsonpath_test.go: `t.Run(tc.str, func(t *testing.T) {
			jp := JSONPath{}
			err := p.ParseString(tc.str, &jp)
			// fmt.Println(jp)
			if err != nil {
				t.Fatalf("parse failed!: %d %v %s", i, err, tc)
			}

			// Read only the first json object from the file
			recs, err := getJSONStructs(b)
			if err != nil || len(recs) != 3 {
				t.Fatalf("%v or length was not 3", err)
			}

			for j, rec := range recs {
				// fmt.Println(rec)
				r, _, err := jsonpathEval(jp.PathExpr, rec)
				if err != nil {
					t.Errorf("Error: %d %d %v", i, j, err)
				}
				if !reflect.DeepEqual(r, tc.res[j]) {
					fmt.Printf("%#v (%v) != %v (%v)\n", r, reflect.TypeOf(r), tc.res[j], reflect.TypeOf(tc.res[j]))
					t.Errorf("case: %d %d failed", i, j)
				}
			}
		})`
$DIR/internal/s3select/sql/jsonpath_test.go: `fmt.Printf("%#v (%v) != %v (%v)\n", r, reflect.TypeOf(r), tc.res[j], reflect.TypeOf(tc.res[j]))`
$DIR/internal/s3select/sql/jsonpath_test.go: `.Open(filepath.Join("jsondata", "books.json"))`
$DIR/internal/s3select/sql/jsonpath_test.go: `.Join("jsondata", "books.json")`
$DIR/internal/s3select/sql/jsonpath_test.go: `.ReadAll(f)`
$DIR/internal/s3select/sql/jsonpath_test.go: `.MustBuild(
		&JSONPath{},
		participle.Lexer(sqlLexer),
		participle.CaseInsensitive("Keyword"),
	)`
$DIR/internal/s3select/sql/jsonpath_test.go: `.Lexer(sqlLexer)`
$DIR/internal/s3select/sql/jsonpath_test.go: `.CaseInsensitive("Keyword")`
$DIR/internal/s3select/sql/jsonpath_test.go: `.Run(tc.str, func(t *testing.T) {
			jp := JSONPath{}
			err := p.ParseString(tc.str, &jp)
			// fmt.Println(jp)
			if err != nil {
				t.Fatalf("parse failed!: %d %v %s", i, err, tc)
			}

			// Read only the first json object from the file
			recs, err := getJSONStructs(b)
			if err != nil || len(recs) != 3 {
				t.Fatalf("%v or length was not 3", err)
			}

			for j, rec := range recs {
				// fmt.Println(rec)
				r, _, err := jsonpathEval(jp.PathExpr, rec)
				if err != nil {
					t.Errorf("Error: %d %d %v", i, j, err)
				}
				if !reflect.DeepEqual(r, tc.res[j]) {
					fmt.Printf("%#v (%v) != %v (%v)\n", r, reflect.TypeOf(r), tc.res[j], reflect.TypeOf(tc.res[j]))
					t.Errorf("case: %d %d failed", i, j)
				}
			}
		})`
$DIR/internal/s3select/sql/jsonpath_test.go: `.ParseString(tc.str, &jp)`
$DIR/internal/s3select/sql/jsonpath_test.go: `.DeepEqual(r, tc.res[j])`
$DIR/internal/s3select/sql/jsonpath_test.go: `.Printf("%#v (%v) != %v (%v)\n", r, reflect.TypeOf(r), tc.res[j], reflect.TypeOf(tc.res[j]))`
$DIR/internal/s3select/sql/jsonpath_test.go: `.TypeOf(r)`
$DIR/internal/s3select/sql/jsonpath_test.go: `.TypeOf(tc.res[j])`
$DIR/internal/s3select/sql/parser_test.go: `.MustBuild(
		&JSONPathElement{},
		participle.Lexer(sqlLexer),
		participle.CaseInsensitive("Keyword"),
		participle.CaseInsensitive("Timeword"),
	)`
$DIR/internal/s3select/sql/parser_test.go: `.Lexer(sqlLexer)`
$DIR/internal/s3select/sql/parser_test.go: `.CaseInsensitive("Keyword")`
$DIR/internal/s3select/sql/parser_test.go: `.CaseInsensitive("Timeword")`
$DIR/internal/s3select/sql/parser_test.go: `.ParseString(tc, &j)`
$DIR/internal/s3select/sql/parser_test.go: `.MustBuild(
		&JSONPath{},
		participle.Lexer(sqlLexer),
		participle.CaseInsensitive("Keyword"),
		participle.CaseInsensitive("Timeword"),
	)`
$DIR/internal/s3select/sql/parser_test.go: `.Lexer(sqlLexer)`
$DIR/internal/s3select/sql/parser_test.go: `.CaseInsensitive("Keyword")`
$DIR/internal/s3select/sql/parser_test.go: `.CaseInsensitive("Timeword")`
$DIR/internal/s3select/sql/parser_test.go: `.ParseString(tc, &j)`
$DIR/internal/s3select/sql/parser_test.go: `.MustBuild(
		&Identifier{},
		participle.Lexer(sqlLexer),
		participle.CaseInsensitive("Keyword"),
	)`
$DIR/internal/s3select/sql/parser_test.go: `.Lexer(sqlLexer)`
$DIR/internal/s3select/sql/parser_test.go: `.CaseInsensitive("Keyword")`
$DIR/internal/s3select/sql/parser_test.go: `.ParseString(tc, &id)`
$DIR/internal/s3select/sql/parser_test.go: `.ParseString(tc, &id)`
$DIR/internal/s3select/sql/parser_test.go: `.MustBuild(
		&ObjectKey{},
		participle.Lexer(sqlLexer),
		participle.CaseInsensitive("Keyword"),
	)`
$DIR/internal/s3select/sql/parser_test.go: `.Lexer(sqlLexer)`
$DIR/internal/s3select/sql/parser_test.go: `.CaseInsensitive("Keyword")`
$DIR/internal/s3select/sql/parser_test.go: `.ParseString(tc, &k)`
$DIR/internal/s3select/sql/parser_test.go: `.ParseString(tc, &k)`
$DIR/internal/s3select/sql/parser_test.go: `.MustBuild(
		&FuncExpr{},
		participle.Lexer(sqlLexer),
		participle.CaseInsensitive("Keyword"),
		participle.CaseInsensitive("Timeword"),
	)`
$DIR/internal/s3select/sql/parser_test.go: `.Lexer(sqlLexer)`
$DIR/internal/s3select/sql/parser_test.go: `.CaseInsensitive("Keyword")`
$DIR/internal/s3select/sql/parser_test.go: `.CaseInsensitive("Timeword")`
$DIR/internal/s3select/sql/parser_test.go: `.ParseString(tc, &fex)`
$DIR/internal/s3select/sql/parser_test.go: `.NewBuffer([]byte("S3Object.words.*.id"))`
$DIR/internal/s3select/sql/parser_test.go: `.Lex(s)`
$DIR/internal/s3select/sql/parser_test.go: `.ConsumeAll(lex)`
$DIR/internal/s3select/sql/parser_test.go: `.MustBuild(
		&Select{},
		participle.Lexer(sqlLexer),
		participle.CaseInsensitive("Keyword"),
	)`
$DIR/internal/s3select/sql/parser_test.go: `.Lexer(sqlLexer)`
$DIR/internal/s3select/sql/parser_test.go: `.CaseInsensitive("Keyword")`
$DIR/internal/s3select/sql/parser_test.go: `.ParseString(tc, &s)`
$DIR/internal/s3select/sql/parser_test.go: `.MustBuild(
		&Select{},
		participle.Lexer(sqlLexer),
		participle.CaseInsensitive("Keyword"),
	)`
$DIR/internal/s3select/sql/parser_test.go: `.Lexer(sqlLexer)`
$DIR/internal/s3select/sql/parser_test.go: `.CaseInsensitive("Keyword")`
$DIR/internal/s3select/sql/parser_test.go: `.ParseString(tc, &s)`
$DIR/internal/s3select/sql/parser_test.go: `.MustBuild(
		&Select{},
		participle.Lexer(sqlLexer),
		participle.CaseInsensitive("Keyword"),
	)`
$DIR/internal/s3select/sql/parser_test.go: `.Lexer(sqlLexer)`
$DIR/internal/s3select/sql/parser_test.go: `.CaseInsensitive("Keyword")`
$DIR/internal/s3select/sql/parser_test.go: `.ParseString(tc, &s)`
$DIR/internal/s3select/sql/parser_test.go: `.MustBuild(
		&Select{},
		participle.Lexer(sqlLexer),
		participle.CaseInsensitive("Keyword"),
	)`
$DIR/internal/s3select/sql/parser_test.go: `.Lexer(sqlLexer)`
$DIR/internal/s3select/sql/parser_test.go: `.CaseInsensitive("Keyword")`
$DIR/internal/s3select/sql/parser_test.go: `.ParseString(tc, &s)`
$DIR/internal/s3select/sql/parser_test.go: `.MustBuild(
		&Select{},
		participle.Lexer(sqlLexer),
		participle.CaseInsensitive("Keyword"),
	)`
$DIR/internal/s3select/sql/parser_test.go: `.Lexer(sqlLexer)`
$DIR/internal/s3select/sql/parser_test.go: `.CaseInsensitive("Keyword")`
$DIR/internal/s3select/sql/parser_test.go: `.ParseString(tc, &s)`
$DIR/internal/s3select/sql/parser_test.go: `.NewBuffer([]byte("year from select month hour distinct"))`
$DIR/internal/s3select/sql/parser_test.go: `.Lex(s)`
$DIR/internal/s3select/sql/parser_test.go: `.ConsumeAll(lex)`
$DIR/internal/s3select/sql/timestampfuncs_test.go: `.FixedZone("", int((8 * time.Hour).Seconds()))`
$DIR/internal/s3select/sql/timestampfuncs_test.go: `.Seconds()`
$DIR/internal/s3select/sql/timestampfuncs_test.go: `.FixedZone("", -int((8 * time.Hour).Seconds()))`
$DIR/internal/s3select/sql/timestampfuncs_test.go: `.Seconds()`
$DIR/internal/s3select/sql/timestampfuncs_test.go: `.Date(2010, 1, 1, 0, 0, 0, 0, time.UTC)`
$DIR/internal/s3select/sql/timestampfuncs_test.go: `.Date(2010, 2, 1, 0, 0, 0, 0, time.UTC)`
$DIR/internal/s3select/sql/timestampfuncs_test.go: `.Date(2010, 2, 3, 0, 0, 0, 0, time.UTC)`
$DIR/internal/s3select/sql/timestampfuncs_test.go: `.Date(2010, 2, 3, 4, 11, 0, 0, time.UTC)`
$DIR/internal/s3select/sql/timestampfuncs_test.go: `.Date(2010, 2, 3, 4, 11, 30, 0, time.UTC)`
$DIR/internal/s3select/sql/timestampfuncs_test.go: `.Date(2010, 2, 3, 4, 11, 30, 230000000, time.UTC)`
$DIR/internal/s3select/sql/timestampfuncs_test.go: `.Date(2010, 2, 3, 4, 11, 0, 0, beijing)`
$DIR/internal/s3select/sql/timestampfuncs_test.go: `.Date(2010, 2, 3, 4, 11, 30, 0, beijing)`
$DIR/internal/s3select/sql/timestampfuncs_test.go: `.Date(2010, 2, 3, 4, 11, 30, 230000000, beijing)`
$DIR/internal/s3select/sql/timestampfuncs_test.go: `.Date(2010, 2, 3, 4, 11, 30, 0, fakeLosAngeles)`
$DIR/internal/s3select/sql/timestampfuncs_test.go: `.Date(2010, 2, 3, 4, 11, 30, 230000000, fakeLosAngeles)`
$DIR/internal/s3select/sql/timestampfuncs_test.go: `.Equal(tc.t)`
$DIR/internal/s3select/sql/value_test.go: `tests = append(tests, test{
				name: fmt.Sprint(a.GetTypeString(), "==", b.GetTypeString()),
				fields: fields{
					a: *a, b: *b,
				},
				wantOk: i == j,
			})`
$DIR/internal/s3select/sql/value_test.go: `t.Run(tt.name, func(t *testing.T) {
			if gotOk := tt.fields.a.SameTypeAs(tt.fields.b); gotOk != tt.wantOk {
				t.Errorf("SameTypeAs() = %v, want %v", gotOk, tt.wantOk)
			}
		})`
$DIR/internal/s3select/sql/value_test.go: `tests = append(tests, test{
				name: fmt.Sprint(a.GetTypeString(), "==", b.GetTypeString()),
				fields: fields{
					a: *a, b: *b,
				},
				wantOk: i == j,
			})`
$DIR/internal/s3select/sql/value_test.go: `tests = append(tests, test{
				name: fmt.Sprint(a.GetTypeString(), "!=", b.GetTypeString()),
				fields: fields{
					a: *a, b: *b,
				},
				// Only Null == Null
				wantOk: a.IsNull() && b.IsNull() && i == 0 && j == 0,
			})`
$DIR/internal/s3select/sql/value_test.go: `t.Run(tt.name, func(t *testing.T) {
			if gotOk := tt.fields.a.Equals(tt.fields.b); gotOk != tt.wantOk {
				t.Errorf("Equals() = %v, want %v", gotOk, tt.wantOk)
			}
		})`
$DIR/internal/s3select/sql/value_test.go: `t.Run(tt.name, func(t *testing.T) {
			v := valueBuilders[i]()
			vAlt := altValueBuilders[i]()
			if got := v.CSVString(); got != tt.want {
				t.Errorf("CSVString() = %v, want %v", got, tt.want)
			}
			if got := vAlt.CSVString(); got != tt.wantAlt {
				t.Errorf("CSVString() = %v, want %v", got, tt.wantAlt)
			}
		})`
$DIR/internal/s3select/sql/value_test.go: `t.Run(tt.name, func(t *testing.T) {
			v := &Value{
				value: tt.fields.value,
			}
			got, got1 := v.bytesToInt()
			if got != tt.want {
				t.Errorf("bytesToInt() got = %v, want %v", got, tt.want)
			}
			if got1 != tt.wantOK {
				t.Errorf("bytesToInt() got1 = %v, want %v", got1, tt.wantOK)
			}
		})`
$DIR/internal/s3select/sql/value_test.go: `t.Run(tt.name, func(t *testing.T) {
			v := Value{
				value: tt.fields.value,
			}
			got, got1 := v.bytesToFloat()
			diff := math.Abs(got - tt.want)
			if diff > floatCmpTolerance {
				t.Errorf("bytesToFloat() got = %v, want %v", got, tt.want)
			}
			if got1 != tt.wantOK {
				t.Errorf("bytesToFloat() got1 = %v, want %v", got1, tt.wantOK)
			}
		})`
$DIR/internal/s3select/sql/value_test.go: `t.Run(tt.name, func(t *testing.T) {
			v := Value{
				value: tt.fields.value,
			}
			gotVal, gotOk := v.bytesToBool()
			if gotVal != tt.wantVal {
				t.Errorf("bytesToBool() gotVal = %v, want %v", gotVal, tt.wantVal)
			}
			if gotOk != tt.wantOk {
				t.Errorf("bytesToBool() gotOk = %v, want %v", gotOk, tt.wantOk)
			}
		})`
$DIR/internal/s3select/sql/value_test.go: `.Sprint(a.GetTypeString(), "==", b.GetTypeString())`
$DIR/internal/s3select/sql/value_test.go: `.GetTypeString()`
$DIR/internal/s3select/sql/value_test.go: `.GetTypeString()`
$DIR/internal/s3select/sql/value_test.go: `.Run(tt.name, func(t *testing.T) {
			if gotOk := tt.fields.a.SameTypeAs(tt.fields.b); gotOk != tt.wantOk {
				t.Errorf("SameTypeAs() = %v, want %v", gotOk, tt.wantOk)
			}
		})`
$DIR/internal/s3select/sql/value_test.go: `.fields.a.SameTypeAs(tt.fields.b)`
$DIR/internal/s3select/sql/value_test.go: `.Sprint(a.GetTypeString(), "==", b.GetTypeString())`
$DIR/internal/s3select/sql/value_test.go: `.GetTypeString()`
$DIR/internal/s3select/sql/value_test.go: `.GetTypeString()`
$DIR/internal/s3select/sql/value_test.go: `.Sprint(a.GetTypeString(), "!=", b.GetTypeString())`
$DIR/internal/s3select/sql/value_test.go: `.GetTypeString()`
$DIR/internal/s3select/sql/value_test.go: `.GetTypeString()`
$DIR/internal/s3select/sql/value_test.go: `.IsNull()`
$DIR/internal/s3select/sql/value_test.go: `.IsNull()`
$DIR/internal/s3select/sql/value_test.go: `.Run(tt.name, func(t *testing.T) {
			if gotOk := tt.fields.a.Equals(tt.fields.b); gotOk != tt.wantOk {
				t.Errorf("Equals() = %v, want %v", gotOk, tt.wantOk)
			}
		})`
$DIR/internal/s3select/sql/value_test.go: `.fields.a.Equals(tt.fields.b)`
$DIR/internal/s3select/sql/value_test.go: `.String()`
$DIR/internal/s3select/sql/value_test.go: `.String()`
$DIR/internal/s3select/sql/value_test.go: `.String()`
$DIR/internal/s3select/sql/value_test.go: `.String()`
$DIR/internal/s3select/sql/value_test.go: `.String()`
$DIR/internal/s3select/sql/value_test.go: `.String()`
$DIR/internal/s3select/sql/value_test.go: `.String()`
$DIR/internal/s3select/sql/value_test.go: `.Run(tt.name, func(t *testing.T) {
			v := valueBuilders[i]()
			vAlt := altValueBuilders[i]()
			if got := v.CSVString(); got != tt.want {
				t.Errorf("CSVString() = %v, want %v", got, tt.want)
			}
			if got := vAlt.CSVString(); got != tt.wantAlt {
				t.Errorf("CSVString() = %v, want %v", got, tt.wantAlt)
			}
		})`
$DIR/internal/s3select/sql/value_test.go: `.CSVString()`
$DIR/internal/s3select/sql/value_test.go: `.CSVString()`
$DIR/internal/s3select/sql/value_test.go: `.FormatInt(math.MaxInt64, 10)`
$DIR/internal/s3select/sql/value_test.go: `.FormatInt(math.MinInt64, 10)`
$DIR/internal/s3select/sql/value_test.go: `.Run(tt.name, func(t *testing.T) {
			v := &Value{
				value: tt.fields.value,
			}
			got, got1 := v.bytesToInt()
			if got != tt.want {
				t.Errorf("bytesToInt() got = %v, want %v", got, tt.want)
			}
			if got1 != tt.wantOK {
				t.Errorf("bytesToInt() got1 = %v, want %v", got1, tt.wantOK)
			}
		})`
$DIR/internal/s3select/sql/value_test.go: `.bytesToInt()`
$DIR/internal/s3select/sql/value_test.go: `.FormatInt(math.MaxInt64, 10)`
$DIR/internal/s3select/sql/value_test.go: `.FormatInt(math.MinInt64, 10)`
$DIR/internal/s3select/sql/value_test.go: `.FormatFloat(math.MaxFloat64, 'g', -1, 64)`
$DIR/internal/s3select/sql/value_test.go: `.FormatFloat(-math.MaxFloat64, 'g', -1, 64)`
$DIR/internal/s3select/sql/value_test.go: `.Inf(1)`
$DIR/internal/s3select/sql/value_test.go: `.Inf(-1)`
$DIR/internal/s3select/sql/value_test.go: `.FormatFloat(math.SmallestNonzeroFloat64, 'g', -1, 64)`
$DIR/internal/s3select/sql/value_test.go: `.FormatFloat(-math.SmallestNonzeroFloat64, 'g', -1, 64)`
$DIR/internal/s3select/sql/value_test.go: `.Run(tt.name, func(t *testing.T) {
			v := Value{
				value: tt.fields.value,
			}
			got, got1 := v.bytesToFloat()
			diff := math.Abs(got - tt.want)
			if diff > floatCmpTolerance {
				t.Errorf("bytesToFloat() got = %v, want %v", got, tt.want)
			}
			if got1 != tt.wantOK {
				t.Errorf("bytesToFloat() got1 = %v, want %v", got1, tt.wantOK)
			}
		})`
$DIR/internal/s3select/sql/value_test.go: `.bytesToFloat()`
$DIR/internal/s3select/sql/value_test.go: `.Abs(got - tt.want)`
$DIR/internal/s3select/sql/value_test.go: `.Run(tt.name, func(t *testing.T) {
			v := Value{
				value: tt.fields.value,
			}
			gotVal, gotOk := v.bytesToBool()
			if gotVal != tt.wantVal {
				t.Errorf("bytesToBool() gotVal = %v, want %v", gotVal, tt.wantVal)
			}
			if gotOk != tt.wantOk {
				t.Errorf("bytesToBool() gotOk = %v, want %v", gotOk, tt.wantOk)
			}
		})`
$DIR/internal/s3select/sql/value_test.go: `.bytesToBool()`
$DIR/internal/store/batch_test.go: `batchLen = batch.Len()`
$DIR/internal/store/batch_test.go: `keys, items, err = batch.GetAll()`
$DIR/internal/store/batch_test.go: `wg.Add(1)`
$DIR/internal/store/batch_test.go: `wg.Wait()`
$DIR/internal/store/batch_test.go: `.Add(i, i)`
$DIR/internal/store/batch_test.go: `.GetByKey(i)`
$DIR/internal/store/batch_test.go: `.Add(101, 101)`
$DIR/internal/store/batch_test.go: `.Is(err, ErrBatchFull)`
$DIR/internal/store/batch_test.go: `.IsFull()`
$DIR/internal/store/batch_test.go: `.Len()`
$DIR/internal/store/batch_test.go: `.GetAll()`
$DIR/internal/store/batch_test.go: `.Len()`
$DIR/internal/store/batch_test.go: `.Add(99, 99)`
$DIR/internal/store/batch_test.go: `.GetByKey(99)`
$DIR/internal/store/batch_test.go: `.GetAll()`
$DIR/internal/store/batch_test.go: `.Add(i, i)`
$DIR/internal/store/batch_test.go: `.GetByKey(i)`
$DIR/internal/store/batch_test.go: `.Add(1)`
$DIR/internal/store/batch_test.go: `.Done()`
$DIR/internal/store/batch_test.go: `.Add(item, item)`
$DIR/internal/store/batch_test.go: `.GetByKey(item)`
$DIR/internal/store/batch_test.go: `.Wait()`
$DIR/internal/store/batch_test.go: `.GetAll()`
$DIR/internal/store/batch_test.go: `.Len()`
$DIR/internal/store/queuestore_test.go: `store, err = setUpQueueStore(queueDir, 10)`
$DIR/internal/store/queuestore_test.go: `names, err = store.List()`
$DIR/internal/store/queuestore_test.go: `.Put(testItem)`
$DIR/internal/store/queuestore_test.go: `.List()`
$DIR/internal/store/queuestore_test.go: `.Put(testItem)`
$DIR/internal/store/queuestore_test.go: `.List()`
$DIR/internal/store/queuestore_test.go: `.Get(strings.TrimSuffix(key, testItemExt))`
$DIR/internal/store/queuestore_test.go: `.TrimSuffix(key, testItemExt)`
$DIR/internal/store/queuestore_test.go: `.DeepEqual(testItem, item)`
$DIR/internal/store/queuestore_test.go: `.Put(testItem)`
$DIR/internal/store/queuestore_test.go: `.List()`
$DIR/internal/store/queuestore_test.go: `.Del(strings.TrimSuffix(key, testItemExt))`
$DIR/internal/store/queuestore_test.go: `.TrimSuffix(key, testItemExt)`
$DIR/internal/store/queuestore_test.go: `.List()`
$DIR/internal/store/queuestore_test.go: `.Put(testItem)`
$DIR/internal/store/queuestore_test.go: `.Put(testItem)`
$DIR/internal/store/queuestore_test.go: `.Put(testItem)`
$DIR/internal/store/queuestore_test.go: `.List()`
$DIR/internal/store/queuestore_test.go: `.List()`
$DIR/internal/store/queuestore_test.go: `.Len()`
$DIR/internal/store/queuestore_test.go: `.Del(key)`
$DIR/internal/store/queuestore_test.go: `.List()`
