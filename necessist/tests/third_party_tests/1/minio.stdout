$DIR/cmd/admin-handlers-users-race_test.go:61:3-64:4: `testCases = append(testCases,
			newTestSuiteIAM(bt, false),
			newTestSuiteIAM(bt, true),
		)`
$DIR/cmd/admin-handlers-users-race_test.go:69:4-69:36: `etcdStr = " (with etcd backend)"`
$DIR/cmd/admin-handlers-users-race_test.go:71:3-76:4: `t.Run(
			fmt.Sprintf("Test: %d, ServerType: %s%s", i+1, testCase.serverType, etcdStr),
			func(t *testing.T) {
				runAllIAMConcurrencyTests(testCase, &check{t, testCase.serverType})
			},
		)`
$DIR/cmd/admin-handlers-users-race_test.go:71:4-76:4: `.Run(
			fmt.Sprintf("Test: %d, ServerType: %s%s", i+1, testCase.serverType, etcdStr),
			func(t *testing.T) {
				runAllIAMConcurrencyTests(testCase, &check{t, testCase.serverType})
			},
		)`
$DIR/cmd/admin-handlers-users-race_test.go:72:7-72:80: `.Sprintf("Test: %d, ServerType: %s%s", i+1, testCase.serverType, etcdStr)`
$DIR/cmd/admin-handlers-users-race_test.go:74:5-74:72: `runAllIAMConcurrencyTests(testCase, &check{t, testCase.serverType})`
$DIR/cmd/admin-handlers-users_test.go:196:3-215:4: `t.Run(
			fmt.Sprintf("Test: %d, ServerType: %s", i+1, testCase.ServerTypeDescription),
			func(t *testing.T) {
				suite := testCase
				c := &check{t, testCase.serverType}

				suite.SetUpSuite(c)
				suite.TestUserCreate(c)
				suite.TestUserPolicyEscalationBug(c)
				suite.TestPolicyCreate(c)
				suite.TestCannedPolicies(c)
				suite.TestGroupAddRemove(c)
				suite.TestServiceAccountOpsByAdmin(c)
				suite.TestServiceAccountPrivilegeEscalationBug(c)
				suite.TestServiceAccountOpsByUser(c)
				suite.TestServiceAccountDurationSecondsCondition(c)
				suite.TestAddServiceAccountPerms(c)
				suite.TearDownSuite(c)
			},
		)`
$DIR/cmd/admin-handlers-users_test.go:196:4-215:4: `.Run(
			fmt.Sprintf("Test: %d, ServerType: %s", i+1, testCase.ServerTypeDescription),
			func(t *testing.T) {
				suite := testCase
				c := &check{t, testCase.serverType}

				suite.SetUpSuite(c)
				suite.TestUserCreate(c)
				suite.TestUserPolicyEscalationBug(c)
				suite.TestPolicyCreate(c)
				suite.TestCannedPolicies(c)
				suite.TestGroupAddRemove(c)
				suite.TestServiceAccountOpsByAdmin(c)
				suite.TestServiceAccountPrivilegeEscalationBug(c)
				suite.TestServiceAccountOpsByUser(c)
				suite.TestServiceAccountDurationSecondsCondition(c)
				suite.TestAddServiceAccountPerms(c)
				suite.TearDownSuite(c)
			},
		)`
$DIR/cmd/admin-handlers-users_test.go:197:7-197:80: `.Sprintf("Test: %d, ServerType: %s", i+1, testCase.ServerTypeDescription)`
$DIR/cmd/admin-handlers-users_test.go:202:5-202:24: `suite.SetUpSuite(c)`
$DIR/cmd/admin-handlers-users_test.go:202:10-202:24: `.SetUpSuite(c)`
$DIR/cmd/admin-handlers-users_test.go:203:5-203:28: `suite.TestUserCreate(c)`
$DIR/cmd/admin-handlers-users_test.go:203:10-203:28: `.TestUserCreate(c)`
$DIR/cmd/admin-handlers-users_test.go:204:5-204:41: `suite.TestUserPolicyEscalationBug(c)`
$DIR/cmd/admin-handlers-users_test.go:204:10-204:41: `.TestUserPolicyEscalationBug(c)`
$DIR/cmd/admin-handlers-users_test.go:205:5-205:30: `suite.TestPolicyCreate(c)`
$DIR/cmd/admin-handlers-users_test.go:205:10-205:30: `.TestPolicyCreate(c)`
$DIR/cmd/admin-handlers-users_test.go:206:5-206:32: `suite.TestCannedPolicies(c)`
$DIR/cmd/admin-handlers-users_test.go:206:10-206:32: `.TestCannedPolicies(c)`
$DIR/cmd/admin-handlers-users_test.go:207:5-207:32: `suite.TestGroupAddRemove(c)`
$DIR/cmd/admin-handlers-users_test.go:207:10-207:32: `.TestGroupAddRemove(c)`
$DIR/cmd/admin-handlers-users_test.go:208:5-208:42: `suite.TestServiceAccountOpsByAdmin(c)`
$DIR/cmd/admin-handlers-users_test.go:208:10-208:42: `.TestServiceAccountOpsByAdmin(c)`
$DIR/cmd/admin-handlers-users_test.go:209:5-209:54: `suite.TestServiceAccountPrivilegeEscalationBug(c)`
$DIR/cmd/admin-handlers-users_test.go:209:10-209:54: `.TestServiceAccountPrivilegeEscalationBug(c)`
$DIR/cmd/admin-handlers-users_test.go:210:5-210:41: `suite.TestServiceAccountOpsByUser(c)`
$DIR/cmd/admin-handlers-users_test.go:210:10-210:41: `.TestServiceAccountOpsByUser(c)`
$DIR/cmd/admin-handlers-users_test.go:211:5-211:56: `suite.TestServiceAccountDurationSecondsCondition(c)`
$DIR/cmd/admin-handlers-users_test.go:211:10-211:56: `.TestServiceAccountDurationSecondsCondition(c)`
$DIR/cmd/admin-handlers-users_test.go:212:5-212:40: `suite.TestAddServiceAccountPerms(c)`
$DIR/cmd/admin-handlers-users_test.go:212:10-212:40: `.TestAddServiceAccountPerms(c)`
$DIR/cmd/admin-handlers-users_test.go:213:5-213:27: `suite.TearDownSuite(c)`
$DIR/cmd/admin-handlers-users_test.go:213:10-213:27: `.TearDownSuite(c)`
$DIR/cmd/admin-handlers-users_test.go:1177:3-1190:4: `t.Run(
			fmt.Sprintf("Test: %d, ServerType: %s", i+1, testCase.ServerTypeDescription),
			func(t *testing.T) {
				suite := testCase
				c := &check{t, testCase.serverType}

				suite.SetUpSuite(c)
				defer suite.TearDownSuite(c)

				suite.SetUpAccMgmtPlugin(c)

				suite.TestAccMgmtPlugin(c)
			},
		)`
$DIR/cmd/admin-handlers-users_test.go:1177:4-1190:4: `.Run(
			fmt.Sprintf("Test: %d, ServerType: %s", i+1, testCase.ServerTypeDescription),
			func(t *testing.T) {
				suite := testCase
				c := &check{t, testCase.serverType}

				suite.SetUpSuite(c)
				defer suite.TearDownSuite(c)

				suite.SetUpAccMgmtPlugin(c)

				suite.TestAccMgmtPlugin(c)
			},
		)`
$DIR/cmd/admin-handlers-users_test.go:1178:7-1178:80: `.Sprintf("Test: %d, ServerType: %s", i+1, testCase.ServerTypeDescription)`
$DIR/cmd/admin-handlers-users_test.go:1183:5-1183:24: `suite.SetUpSuite(c)`
$DIR/cmd/admin-handlers-users_test.go:1183:10-1183:24: `.SetUpSuite(c)`
$DIR/cmd/admin-handlers-users_test.go:1184:16-1184:33: `.TearDownSuite(c)`
$DIR/cmd/admin-handlers-users_test.go:1186:5-1186:32: `suite.SetUpAccMgmtPlugin(c)`
$DIR/cmd/admin-handlers-users_test.go:1186:10-1186:32: `.SetUpAccMgmtPlugin(c)`
$DIR/cmd/admin-handlers-users_test.go:1188:5-1188:31: `suite.TestAccMgmtPlugin(c)`
$DIR/cmd/admin-handlers-users_test.go:1188:10-1188:31: `.TestAccMgmtPlugin(c)`
$DIR/cmd/admin-handlers_test.go:266:24-266:57: `.WithCancel(context.Background())`
$DIR/cmd/admin-handlers_test.go:266:43-266:56: `.Background()`
$DIR/cmd/admin-handlers_test.go:274:20-274:31: `.TearDown()`
$DIR/cmd/admin-handlers_test.go:277:2-277:36: `globalMinioAddr = "127.0.0.1:9000"`
$DIR/cmd/admin-handlers_test.go:281:2-281:26: `queryVal.Set("info", "")`
$DIR/cmd/admin-handlers_test.go:281:10-281:26: `.Set("info", "")`
$DIR/cmd/admin-handlers_test.go:288:17-288:31: `.NewRecorder()`
$DIR/cmd/admin-handlers_test.go:289:2-289:41: `adminTestBed.router.ServeHTTP(rec, req)`
$DIR/cmd/admin-handlers_test.go:289:14-289:41: `.router.ServeHTTP(rec, req)`
$DIR/cmd/admin-handlers_test.go:295:2-295:50: `err = json.NewDecoder(rec.Body).Decode(&results)`
$DIR/cmd/admin-handlers_test.go:295:12-295:33: `.NewDecoder(rec.Body)`
$DIR/cmd/admin-handlers_test.go:295:33-295:50: `.Decode(&results)`
$DIR/cmd/admin-handlers_test.go:341:4-341:39: `v.Add(mgmtClientToken, clientToken)`
$DIR/cmd/admin-handlers_test.go:341:5-341:39: `.Add(mgmtClientToken, clientToken)`
$DIR/cmd/admin-handlers_test.go:344:4-344:29: `v.Add(mgmtForceStart, "")`
$DIR/cmd/admin-handlers_test.go:344:5-344:29: `.Add(mgmtForceStart, "")`
$DIR/cmd/admin-handlers_test.go:347:4-347:28: `v.Add(mgmtForceStop, "")`
$DIR/cmd/admin-handlers_test.go:347:5-347:28: `.Add(mgmtForceStop, "")`
$DIR/cmd/admin-handlers_test.go:378:55-378:79: `.NewReader([]byte(body))`
$DIR/cmd/admin-handlers_test.go:381:5-381:21: `isErrCase = true`
$DIR/cmd/admin-handlers_test.go:406:3-406:53: `owners = append(owners, fmt.Sprintf("node-%d", i))`
$DIR/cmd/admin-handlers_test.go:406:30-406:52: `.Sprintf("node-%d", i)`
$DIR/cmd/admin-handlers_test.go:414:18-414:56: `.Sprintf("bucket/delete-object-%d", i)`
$DIR/cmd/admin-handlers_test.go:423:3-423:27: `lris = append(lris, lri)`
$DIR/cmd/admin-handlers_test.go:424:3-424:49: `locksHeld[resource] = []lockRequesterInfo{lri}`
$DIR/cmd/admin-handlers_test.go:429:18-429:53: `.Sprintf("bucket/get-object-%d", i)`
$DIR/cmd/admin-handlers_test.go:436:3-436:27: `lris = append(lris, lri)`
$DIR/cmd/admin-handlers_test.go:437:3-437:57: `locksHeld[resource] = append(locksHeld[resource], lri)`
$DIR/cmd/admin-handlers_test.go:439:3-439:26: `lri.UID = mustGetUUID()`
$DIR/cmd/admin-handlers_test.go:440:3-440:27: `lris = append(lris, lri)`
$DIR/cmd/admin-handlers_test.go:441:3-441:57: `locksHeld[resource] = append(locksHeld[resource], lri)`
$DIR/cmd/admin-handlers_test.go:446:3-449:5: `peerLocks = append(peerLocks, &PeerLocks{
			Addr:  owner,
			Locks: locksHeld,
		})`
$DIR/cmd/admin-handlers_test.go:459:3-466:5: `exp = append(exp, madmin.LockEntry{
			Resource:   lri.Name,
			Type:       lockType(lri),
			ServerList: owners,
			Owner:      lri.Owner,
			ID:         lri.UID,
			Quorum:     lri.Quorum,
		})`
$DIR/cmd/admin-handlers_test.go:489:3-489:43: `sort.Slice(exp, byResourceUID{exp}.Less)`
$DIR/cmd/admin-handlers_test.go:489:7-489:43: `.Slice(exp, byResourceUID{exp}.Less)`
$DIR/cmd/admin-handlers_test.go:490:3-490:43: `sort.Slice(got, byResourceUID{got}.Less)`
$DIR/cmd/admin-handlers_test.go:490:7-490:43: `.Slice(got, byResourceUID{got}.Less)`
$DIR/cmd/admin-handlers_test.go:494:9-494:43: `.Timestamp.Equal(got[i].Timestamp)`
$DIR/cmd/api-errors_test.go:67:16-67:29: `.Background()`
$DIR/cmd/api-headers_test.go:34:3-34:11: `e = char`
$DIR/cmd/api-response_test.go:104:3-109:5: `t.Run("", func(t *testing.T) {
			gotLocation := getObjectLocation(testCase.request, testCase.domains, testCase.bucket, testCase.object)
			if testCase.expectedLocation != gotLocation {
				t.Errorf("expected %s, got %s", testCase.expectedLocation, gotLocation)
			}
		})`
$DIR/cmd/api-response_test.go:104:4-109:5: `.Run("", func(t *testing.T) {
			gotLocation := getObjectLocation(testCase.request, testCase.domains, testCase.bucket, testCase.object)
			if testCase.expectedLocation != gotLocation {
				t.Errorf("expected %s, got %s", testCase.expectedLocation, gotLocation)
			}
		})`
$DIR/cmd/api-response_test.go:120:2-120:12: `tls = true`
$DIR/cmd/api-response_test.go:121:2-121:31: `gotScheme = getURLScheme(tls)`
$DIR/cmd/api-utils_test.go:42:3-47:5: `t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			outputText := s3EncodeName(testCase.inputText, testCase.encodingType)
			if testCase.expectedOutput != outputText {
				t.Errorf("Expected `%s`, got `%s`", testCase.expectedOutput, outputText)
			}
		})`
$DIR/cmd/api-utils_test.go:42:4-47:5: `.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			outputText := s3EncodeName(testCase.inputText, testCase.encodingType)
			if testCase.expectedOutput != outputText {
				t.Errorf("Expected `%s`, got `%s`", testCase.expectedOutput, outputText)
			}
		})`
$DIR/cmd/api-utils_test.go:42:12-42:35: `.Sprintf("Test%d", i+1)`
$DIR/cmd/auth-handler_test.go:42:2-45:3: `type testCase struct {
		req   *http.Request
		authT authType
	}`
$DIR/cmd/auth-handler_test.go:46:17-46:64: `.NopCloser(io.LimitReader(&nullReader{}, 1024))`
$DIR/cmd/auth-handler_test.go:46:30-46:63: `.LimitReader(&nullReader{}, 1024)`
$DIR/cmd/auth-handler_test.go:140:2-143:3: `type testCase struct {
		authT authType
		pass  bool
	}`
$DIR/cmd/auth-handler_test.go:224:24-224:78: `.NewRequest(http.MethodGet, "http://example.com", nil)`
$DIR/cmd/auth-handler_test.go:228:16-228:28: `.URL.Query()`
$DIR/cmd/auth-handler_test.go:229:3-229:58: `q.Add(testCase.inputQueryKey, testCase.inputQueryValue)`
$DIR/cmd/auth-handler_test.go:229:4-229:58: `.Add(testCase.inputQueryKey, testCase.inputQueryValue)`
$DIR/cmd/auth-handler_test.go:230:3-230:37: `inputReq.URL.RawQuery = q.Encode()`
$DIR/cmd/auth-handler_test.go:230:28-230:37: `.Encode()`
$DIR/cmd/auth-handler_test.go:231:3-231:23: `inputReq.ParseForm()`
$DIR/cmd/auth-handler_test.go:231:11-231:23: `.ParseForm()`
$DIR/cmd/auth-handler_test.go:259:24-259:78: `.NewRequest(http.MethodGet, "http://example.com", nil)`
$DIR/cmd/auth-handler_test.go:263:16-263:28: `.URL.Query()`
$DIR/cmd/auth-handler_test.go:264:3-264:58: `q.Add(testCase.inputQueryKey, testCase.inputQueryValue)`
$DIR/cmd/auth-handler_test.go:264:4-264:58: `.Add(testCase.inputQueryKey, testCase.inputQueryValue)`
$DIR/cmd/auth-handler_test.go:265:3-265:37: `inputReq.URL.RawQuery = q.Encode()`
$DIR/cmd/auth-handler_test.go:265:28-265:37: `.Encode()`
$DIR/cmd/auth-handler_test.go:266:3-266:23: `inputReq.ParseForm()`
$DIR/cmd/auth-handler_test.go:266:11-266:23: `.ParseForm()`
$DIR/cmd/auth-handler_test.go:362:24-362:50: `.WithCancel(GlobalContext)`
$DIR/cmd/auth-handler_test.go:369:10-369:27: `.RemoveAll(fsDir)`
$DIR/cmd/auth-handler_test.go:374:2-374:24: `initAllSubsystems(ctx)`
$DIR/cmd/auth-handler_test.go:376:2-376:36: `initConfigSubsystem(ctx, objLayer)`
$DIR/cmd/auth-handler_test.go:378:20-378:62: `.CreateCredentials("myuser", "mypassword")`
$DIR/cmd/auth-handler_test.go:383:2-383:26: `globalActiveCred = creds`
$DIR/cmd/auth-handler_test.go:385:2-385:67: `globalIAMSys.Init(ctx, objLayer, globalEtcdClient, 2*time.Second)`
$DIR/cmd/auth-handler_test.go:385:14-385:67: `.Init(ctx, objLayer, globalEtcdClient, 2*time.Second)`
$DIR/cmd/auth-handler_test.go:395:83-395:110: `.NewReader([]byte("hello"))`
$DIR/cmd/auth-handler_test.go:397:83-397:110: `.NewReader([]byte("hello"))`
$DIR/cmd/auth-handler_test.go:399:81-399:108: `.NewReader([]byte("hello"))`
$DIR/cmd/auth-handler_test.go:408:19-408:46: `.ReadAll(testCase.req.Body)`
$DIR/cmd/auth-handler_test.go:416:24-416:57: `.WithCancel(context.Background())`
$DIR/cmd/auth-handler_test.go:416:43-416:56: `.Background()`
$DIR/cmd/auth-handler_test.go:423:10-423:27: `.RemoveAll(fsDir)`
$DIR/cmd/auth-handler_test.go:429:20-429:62: `.CreateCredentials("myuser", "mypassword")`
$DIR/cmd/auth-handler_test.go:434:2-434:26: `globalActiveCred = creds`
$DIR/cmd/auth-handler_test.go:453:24-453:57: `.WithCancel(context.Background())`
$DIR/cmd/auth-handler_test.go:453:43-453:56: `.Background()`
$DIR/cmd/auth-handler_test.go:460:10-460:27: `.RemoveAll(fsDir)`
$DIR/cmd/auth-handler_test.go:466:2-466:24: `initAllSubsystems(ctx)`
$DIR/cmd/auth-handler_test.go:468:2-468:36: `initConfigSubsystem(ctx, objLayer)`
$DIR/cmd/auth-handler_test.go:470:20-470:61: `.CreateCredentials("admin", "mypassword")`
$DIR/cmd/auth-handler_test.go:474:2-474:26: `globalActiveCred = creds`
$DIR/cmd/auth-handler_test.go:476:2-476:67: `globalIAMSys.Init(ctx, objLayer, globalEtcdClient, 2*time.Second)`
$DIR/cmd/auth-handler_test.go:476:14-476:67: `.Init(ctx, objLayer, globalEtcdClient, 2*time.Second)`
$DIR/cmd/background-newdisks-heal-ops_gen_test.go:14:15-14:31: `.MarshalMsg(nil)`
$DIR/cmd/background-newdisks-heal-ops_gen_test.go:18:16-18:34: `.UnmarshalMsg(bts)`
$DIR/cmd/background-newdisks-heal-ops_gen_test.go:26:2-26:28: `left, err = msgp.Skip(bts)`
$DIR/cmd/background-newdisks-heal-ops_gen_test.go:73:2-73:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/background-newdisks-heal-ops_gen_test.go:73:6-73:23: `.Encode(&buf, &v)`
$DIR/cmd/background-newdisks-heal-ops_gen_test.go:75:8-75:18: `.Msgsize()`
$DIR/cmd/background-newdisks-heal-ops_gen_test.go:76:8-76:14: `.Len()`
$DIR/cmd/background-newdisks-heal-ops_gen_test.go:81:13-81:31: `.Decode(&buf, &vn)`
$DIR/cmd/background-newdisks-heal-ops_gen_test.go:86:2-86:13: `buf.Reset()`
$DIR/cmd/background-newdisks-heal-ops_gen_test.go:86:5-86:13: `.Reset()`
$DIR/cmd/background-newdisks-heal-ops_gen_test.go:87:2-87:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/background-newdisks-heal-ops_gen_test.go:87:6-87:23: `.Encode(&buf, &v)`
$DIR/cmd/background-newdisks-heal-ops_gen_test.go:88:2-88:35: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/batch-expire_gen_test.go:14:15-14:31: `.MarshalMsg(nil)`
$DIR/cmd/batch-expire_gen_test.go:18:16-18:34: `.UnmarshalMsg(bts)`
$DIR/cmd/batch-expire_gen_test.go:26:2-26:28: `left, err = msgp.Skip(bts)`
$DIR/cmd/batch-expire_gen_test.go:73:2-73:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/batch-expire_gen_test.go:73:6-73:23: `.Encode(&buf, &v)`
$DIR/cmd/batch-expire_gen_test.go:75:8-75:18: `.Msgsize()`
$DIR/cmd/batch-expire_gen_test.go:76:8-76:14: `.Len()`
$DIR/cmd/batch-expire_gen_test.go:81:13-81:31: `.Decode(&buf, &vn)`
$DIR/cmd/batch-expire_gen_test.go:86:2-86:13: `buf.Reset()`
$DIR/cmd/batch-expire_gen_test.go:86:5-86:13: `.Reset()`
$DIR/cmd/batch-expire_gen_test.go:87:2-87:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/batch-expire_gen_test.go:87:6-87:23: `.Encode(&buf, &v)`
$DIR/cmd/batch-expire_gen_test.go:88:2-88:35: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/batch-expire_gen_test.go:127:15-127:31: `.MarshalMsg(nil)`
$DIR/cmd/batch-expire_gen_test.go:131:16-131:34: `.UnmarshalMsg(bts)`
$DIR/cmd/batch-expire_gen_test.go:139:2-139:28: `left, err = msgp.Skip(bts)`
$DIR/cmd/batch-expire_gen_test.go:186:2-186:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/batch-expire_gen_test.go:186:6-186:23: `.Encode(&buf, &v)`
$DIR/cmd/batch-expire_gen_test.go:188:8-188:18: `.Msgsize()`
$DIR/cmd/batch-expire_gen_test.go:189:8-189:14: `.Len()`
$DIR/cmd/batch-expire_gen_test.go:194:13-194:31: `.Decode(&buf, &vn)`
$DIR/cmd/batch-expire_gen_test.go:199:2-199:13: `buf.Reset()`
$DIR/cmd/batch-expire_gen_test.go:199:5-199:13: `.Reset()`
$DIR/cmd/batch-expire_gen_test.go:200:2-200:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/batch-expire_gen_test.go:200:6-200:23: `.Encode(&buf, &v)`
$DIR/cmd/batch-expire_gen_test.go:201:2-201:35: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/batch-expire_gen_test.go:240:15-240:31: `.MarshalMsg(nil)`
$DIR/cmd/batch-expire_gen_test.go:244:16-244:34: `.UnmarshalMsg(bts)`
$DIR/cmd/batch-expire_gen_test.go:252:2-252:28: `left, err = msgp.Skip(bts)`
$DIR/cmd/batch-expire_gen_test.go:299:2-299:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/batch-expire_gen_test.go:299:6-299:23: `.Encode(&buf, &v)`
$DIR/cmd/batch-expire_gen_test.go:301:8-301:18: `.Msgsize()`
$DIR/cmd/batch-expire_gen_test.go:302:8-302:14: `.Len()`
$DIR/cmd/batch-expire_gen_test.go:307:13-307:31: `.Decode(&buf, &vn)`
$DIR/cmd/batch-expire_gen_test.go:312:2-312:13: `buf.Reset()`
$DIR/cmd/batch-expire_gen_test.go:312:5-312:13: `.Reset()`
$DIR/cmd/batch-expire_gen_test.go:313:2-313:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/batch-expire_gen_test.go:313:6-313:23: `.Encode(&buf, &v)`
$DIR/cmd/batch-expire_gen_test.go:314:2-314:35: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/batch-expire_test.go:67:13-67:55: `.UnmarshalStrict([]byte(expireYaml), &job)`
$DIR/cmd/batch-handlers_gen_test.go:14:15-14:31: `.MarshalMsg(nil)`
$DIR/cmd/batch-handlers_gen_test.go:18:16-18:34: `.UnmarshalMsg(bts)`
$DIR/cmd/batch-handlers_gen_test.go:26:2-26:28: `left, err = msgp.Skip(bts)`
$DIR/cmd/batch-handlers_gen_test.go:73:2-73:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/batch-handlers_gen_test.go:73:6-73:23: `.Encode(&buf, &v)`
$DIR/cmd/batch-handlers_gen_test.go:75:8-75:18: `.Msgsize()`
$DIR/cmd/batch-handlers_gen_test.go:76:8-76:14: `.Len()`
$DIR/cmd/batch-handlers_gen_test.go:81:13-81:31: `.Decode(&buf, &vn)`
$DIR/cmd/batch-handlers_gen_test.go:86:2-86:13: `buf.Reset()`
$DIR/cmd/batch-handlers_gen_test.go:86:5-86:13: `.Reset()`
$DIR/cmd/batch-handlers_gen_test.go:87:2-87:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/batch-handlers_gen_test.go:87:6-87:23: `.Encode(&buf, &v)`
$DIR/cmd/batch-handlers_gen_test.go:88:2-88:35: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/batch-handlers_gen_test.go:127:15-127:31: `.MarshalMsg(nil)`
$DIR/cmd/batch-handlers_gen_test.go:131:16-131:34: `.UnmarshalMsg(bts)`
$DIR/cmd/batch-handlers_gen_test.go:139:2-139:28: `left, err = msgp.Skip(bts)`
$DIR/cmd/batch-handlers_gen_test.go:186:2-186:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/batch-handlers_gen_test.go:186:6-186:23: `.Encode(&buf, &v)`
$DIR/cmd/batch-handlers_gen_test.go:188:8-188:18: `.Msgsize()`
$DIR/cmd/batch-handlers_gen_test.go:189:8-189:14: `.Len()`
$DIR/cmd/batch-handlers_gen_test.go:194:13-194:31: `.Decode(&buf, &vn)`
$DIR/cmd/batch-handlers_gen_test.go:199:2-199:13: `buf.Reset()`
$DIR/cmd/batch-handlers_gen_test.go:199:5-199:13: `.Reset()`
$DIR/cmd/batch-handlers_gen_test.go:200:2-200:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/batch-handlers_gen_test.go:200:6-200:23: `.Encode(&buf, &v)`
$DIR/cmd/batch-handlers_gen_test.go:201:2-201:35: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/batch-job-common-types_gen_test.go:14:15-14:31: `.MarshalMsg(nil)`
$DIR/cmd/batch-job-common-types_gen_test.go:18:16-18:34: `.UnmarshalMsg(bts)`
$DIR/cmd/batch-job-common-types_gen_test.go:26:2-26:28: `left, err = msgp.Skip(bts)`
$DIR/cmd/batch-job-common-types_gen_test.go:73:2-73:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/batch-job-common-types_gen_test.go:73:6-73:23: `.Encode(&buf, &v)`
$DIR/cmd/batch-job-common-types_gen_test.go:75:8-75:18: `.Msgsize()`
$DIR/cmd/batch-job-common-types_gen_test.go:76:8-76:14: `.Len()`
$DIR/cmd/batch-job-common-types_gen_test.go:81:13-81:31: `.Decode(&buf, &vn)`
$DIR/cmd/batch-job-common-types_gen_test.go:86:2-86:13: `buf.Reset()`
$DIR/cmd/batch-job-common-types_gen_test.go:86:5-86:13: `.Reset()`
$DIR/cmd/batch-job-common-types_gen_test.go:87:2-87:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/batch-job-common-types_gen_test.go:87:6-87:23: `.Encode(&buf, &v)`
$DIR/cmd/batch-job-common-types_gen_test.go:88:2-88:35: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/batch-job-common-types_gen_test.go:127:15-127:31: `.MarshalMsg(nil)`
$DIR/cmd/batch-job-common-types_gen_test.go:131:16-131:34: `.UnmarshalMsg(bts)`
$DIR/cmd/batch-job-common-types_gen_test.go:139:2-139:28: `left, err = msgp.Skip(bts)`
$DIR/cmd/batch-job-common-types_gen_test.go:186:2-186:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/batch-job-common-types_gen_test.go:186:6-186:23: `.Encode(&buf, &v)`
$DIR/cmd/batch-job-common-types_gen_test.go:188:8-188:18: `.Msgsize()`
$DIR/cmd/batch-job-common-types_gen_test.go:189:8-189:14: `.Len()`
$DIR/cmd/batch-job-common-types_gen_test.go:194:13-194:31: `.Decode(&buf, &vn)`
$DIR/cmd/batch-job-common-types_gen_test.go:199:2-199:13: `buf.Reset()`
$DIR/cmd/batch-job-common-types_gen_test.go:199:5-199:13: `.Reset()`
$DIR/cmd/batch-job-common-types_gen_test.go:200:2-200:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/batch-job-common-types_gen_test.go:200:6-200:23: `.Encode(&buf, &v)`
$DIR/cmd/batch-job-common-types_gen_test.go:201:2-201:35: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/batch-job-common-types_gen_test.go:240:15-240:31: `.MarshalMsg(nil)`
$DIR/cmd/batch-job-common-types_gen_test.go:244:16-244:34: `.UnmarshalMsg(bts)`
$DIR/cmd/batch-job-common-types_gen_test.go:252:2-252:28: `left, err = msgp.Skip(bts)`
$DIR/cmd/batch-job-common-types_gen_test.go:299:2-299:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/batch-job-common-types_gen_test.go:299:6-299:23: `.Encode(&buf, &v)`
$DIR/cmd/batch-job-common-types_gen_test.go:301:8-301:18: `.Msgsize()`
$DIR/cmd/batch-job-common-types_gen_test.go:302:8-302:14: `.Len()`
$DIR/cmd/batch-job-common-types_gen_test.go:307:13-307:31: `.Decode(&buf, &vn)`
$DIR/cmd/batch-job-common-types_gen_test.go:312:2-312:13: `buf.Reset()`
$DIR/cmd/batch-job-common-types_gen_test.go:312:5-312:13: `.Reset()`
$DIR/cmd/batch-job-common-types_gen_test.go:313:2-313:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/batch-job-common-types_gen_test.go:313:6-313:23: `.Encode(&buf, &v)`
$DIR/cmd/batch-job-common-types_gen_test.go:314:2-314:35: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/batch-job-common-types_gen_test.go:353:15-353:31: `.MarshalMsg(nil)`
$DIR/cmd/batch-job-common-types_gen_test.go:357:16-357:34: `.UnmarshalMsg(bts)`
$DIR/cmd/batch-job-common-types_gen_test.go:365:2-365:28: `left, err = msgp.Skip(bts)`
$DIR/cmd/batch-job-common-types_gen_test.go:412:2-412:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/batch-job-common-types_gen_test.go:412:6-412:23: `.Encode(&buf, &v)`
$DIR/cmd/batch-job-common-types_gen_test.go:414:8-414:18: `.Msgsize()`
$DIR/cmd/batch-job-common-types_gen_test.go:415:8-415:14: `.Len()`
$DIR/cmd/batch-job-common-types_gen_test.go:420:13-420:31: `.Decode(&buf, &vn)`
$DIR/cmd/batch-job-common-types_gen_test.go:425:2-425:13: `buf.Reset()`
$DIR/cmd/batch-job-common-types_gen_test.go:425:5-425:13: `.Reset()`
$DIR/cmd/batch-job-common-types_gen_test.go:426:2-426:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/batch-job-common-types_gen_test.go:426:6-426:23: `.Encode(&buf, &v)`
$DIR/cmd/batch-job-common-types_gen_test.go:427:2-427:35: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/batch-job-common-types_gen_test.go:466:15-466:31: `.MarshalMsg(nil)`
$DIR/cmd/batch-job-common-types_gen_test.go:470:16-470:34: `.UnmarshalMsg(bts)`
$DIR/cmd/batch-job-common-types_gen_test.go:478:2-478:28: `left, err = msgp.Skip(bts)`
$DIR/cmd/batch-job-common-types_gen_test.go:525:2-525:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/batch-job-common-types_gen_test.go:525:6-525:23: `.Encode(&buf, &v)`
$DIR/cmd/batch-job-common-types_gen_test.go:527:8-527:18: `.Msgsize()`
$DIR/cmd/batch-job-common-types_gen_test.go:528:8-528:14: `.Len()`
$DIR/cmd/batch-job-common-types_gen_test.go:533:13-533:31: `.Decode(&buf, &vn)`
$DIR/cmd/batch-job-common-types_gen_test.go:538:2-538:13: `buf.Reset()`
$DIR/cmd/batch-job-common-types_gen_test.go:538:5-538:13: `.Reset()`
$DIR/cmd/batch-job-common-types_gen_test.go:539:2-539:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/batch-job-common-types_gen_test.go:539:6-539:23: `.Encode(&buf, &v)`
$DIR/cmd/batch-job-common-types_gen_test.go:540:2-540:35: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/batch-job-common-types_test.go:77:3-81:5: `t.Run(fmt.Sprintf("test-%d", i+1), func(t *testing.T) {
			if got := test.sizeFilter.InRange(test.objSize); got != test.want {
				t.Fatalf("Expected %v but got %v", test.want, got)
			}
		})`
$DIR/cmd/batch-job-common-types_test.go:77:4-81:5: `.Run(fmt.Sprintf("test-%d", i+1), func(t *testing.T) {
			if got := test.sizeFilter.InRange(test.objSize); got != test.want {
				t.Fatalf("Expected %v but got %v", test.want, got)
			}
		})`
$DIR/cmd/batch-job-common-types_test.go:77:12-77:36: `.Sprintf("test-%d", i+1)`
$DIR/cmd/batch-job-common-types_test.go:78:18-78:51: `.sizeFilter.InRange(test.objSize)`
$DIR/cmd/batch-job-common-types_test.go:134:3-146:5: `t.Run(fmt.Sprintf("test-%d", i+1), func(t *testing.T) {
			err := test.sizeFilter.Validate()
			if err != nil {
				gotErr := err.(BatchJobYamlErr)
				testErr := test.err.(BatchJobYamlErr)
				if gotErr.message() != testErr.message() {
					t.Fatalf("Expected %v but got %v", test.err, err)
				}
			}
			if err == nil && test.err != nil {
				t.Fatalf("Expected %v but got nil", test.err)
			}
		})`
$DIR/cmd/batch-job-common-types_test.go:134:4-146:5: `.Run(fmt.Sprintf("test-%d", i+1), func(t *testing.T) {
			err := test.sizeFilter.Validate()
			if err != nil {
				gotErr := err.(BatchJobYamlErr)
				testErr := test.err.(BatchJobYamlErr)
				if gotErr.message() != testErr.message() {
					t.Fatalf("Expected %v but got %v", test.err, err)
				}
			}
			if err == nil && test.err != nil {
				t.Fatalf("Expected %v but got nil", test.err)
			}
		})`
$DIR/cmd/batch-job-common-types_test.go:134:12-134:36: `.Sprintf("test-%d", i+1)`
$DIR/cmd/batch-job-common-types_test.go:135:15-135:37: `.sizeFilter.Validate()`
$DIR/cmd/batch-job-common-types_test.go:139:14-139:24: `.message()`
$DIR/cmd/batch-job-common-types_test.go:139:35-139:45: `.message()`
$DIR/cmd/batch-replicate_gen_test.go:14:15-14:31: `.MarshalMsg(nil)`
$DIR/cmd/batch-replicate_gen_test.go:18:16-18:34: `.UnmarshalMsg(bts)`
$DIR/cmd/batch-replicate_gen_test.go:26:2-26:28: `left, err = msgp.Skip(bts)`
$DIR/cmd/batch-replicate_gen_test.go:73:2-73:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/batch-replicate_gen_test.go:73:6-73:23: `.Encode(&buf, &v)`
$DIR/cmd/batch-replicate_gen_test.go:75:8-75:18: `.Msgsize()`
$DIR/cmd/batch-replicate_gen_test.go:76:8-76:14: `.Len()`
$DIR/cmd/batch-replicate_gen_test.go:81:13-81:31: `.Decode(&buf, &vn)`
$DIR/cmd/batch-replicate_gen_test.go:86:2-86:13: `buf.Reset()`
$DIR/cmd/batch-replicate_gen_test.go:86:5-86:13: `.Reset()`
$DIR/cmd/batch-replicate_gen_test.go:87:2-87:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/batch-replicate_gen_test.go:87:6-87:23: `.Encode(&buf, &v)`
$DIR/cmd/batch-replicate_gen_test.go:88:2-88:35: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/batch-replicate_gen_test.go:127:15-127:31: `.MarshalMsg(nil)`
$DIR/cmd/batch-replicate_gen_test.go:131:16-131:34: `.UnmarshalMsg(bts)`
$DIR/cmd/batch-replicate_gen_test.go:139:2-139:28: `left, err = msgp.Skip(bts)`
$DIR/cmd/batch-replicate_gen_test.go:186:2-186:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/batch-replicate_gen_test.go:186:6-186:23: `.Encode(&buf, &v)`
$DIR/cmd/batch-replicate_gen_test.go:188:8-188:18: `.Msgsize()`
$DIR/cmd/batch-replicate_gen_test.go:189:8-189:14: `.Len()`
$DIR/cmd/batch-replicate_gen_test.go:194:13-194:31: `.Decode(&buf, &vn)`
$DIR/cmd/batch-replicate_gen_test.go:199:2-199:13: `buf.Reset()`
$DIR/cmd/batch-replicate_gen_test.go:199:5-199:13: `.Reset()`
$DIR/cmd/batch-replicate_gen_test.go:200:2-200:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/batch-replicate_gen_test.go:200:6-200:23: `.Encode(&buf, &v)`
$DIR/cmd/batch-replicate_gen_test.go:201:2-201:35: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/batch-replicate_gen_test.go:240:15-240:31: `.MarshalMsg(nil)`
$DIR/cmd/batch-replicate_gen_test.go:244:16-244:34: `.UnmarshalMsg(bts)`
$DIR/cmd/batch-replicate_gen_test.go:252:2-252:28: `left, err = msgp.Skip(bts)`
$DIR/cmd/batch-replicate_gen_test.go:299:2-299:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/batch-replicate_gen_test.go:299:6-299:23: `.Encode(&buf, &v)`
$DIR/cmd/batch-replicate_gen_test.go:301:8-301:18: `.Msgsize()`
$DIR/cmd/batch-replicate_gen_test.go:302:8-302:14: `.Len()`
$DIR/cmd/batch-replicate_gen_test.go:307:13-307:31: `.Decode(&buf, &vn)`
$DIR/cmd/batch-replicate_gen_test.go:312:2-312:13: `buf.Reset()`
$DIR/cmd/batch-replicate_gen_test.go:312:5-312:13: `.Reset()`
$DIR/cmd/batch-replicate_gen_test.go:313:2-313:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/batch-replicate_gen_test.go:313:6-313:23: `.Encode(&buf, &v)`
$DIR/cmd/batch-replicate_gen_test.go:314:2-314:35: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/batch-replicate_gen_test.go:353:15-353:31: `.MarshalMsg(nil)`
$DIR/cmd/batch-replicate_gen_test.go:357:16-357:34: `.UnmarshalMsg(bts)`
$DIR/cmd/batch-replicate_gen_test.go:365:2-365:28: `left, err = msgp.Skip(bts)`
$DIR/cmd/batch-replicate_gen_test.go:412:2-412:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/batch-replicate_gen_test.go:412:6-412:23: `.Encode(&buf, &v)`
$DIR/cmd/batch-replicate_gen_test.go:414:8-414:18: `.Msgsize()`
$DIR/cmd/batch-replicate_gen_test.go:415:8-415:14: `.Len()`
$DIR/cmd/batch-replicate_gen_test.go:420:13-420:31: `.Decode(&buf, &vn)`
$DIR/cmd/batch-replicate_gen_test.go:425:2-425:13: `buf.Reset()`
$DIR/cmd/batch-replicate_gen_test.go:425:5-425:13: `.Reset()`
$DIR/cmd/batch-replicate_gen_test.go:426:2-426:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/batch-replicate_gen_test.go:426:6-426:23: `.Encode(&buf, &v)`
$DIR/cmd/batch-replicate_gen_test.go:427:2-427:35: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/batch-replicate_gen_test.go:466:15-466:31: `.MarshalMsg(nil)`
$DIR/cmd/batch-replicate_gen_test.go:470:16-470:34: `.UnmarshalMsg(bts)`
$DIR/cmd/batch-replicate_gen_test.go:478:2-478:28: `left, err = msgp.Skip(bts)`
$DIR/cmd/batch-replicate_gen_test.go:525:2-525:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/batch-replicate_gen_test.go:525:6-525:23: `.Encode(&buf, &v)`
$DIR/cmd/batch-replicate_gen_test.go:527:8-527:18: `.Msgsize()`
$DIR/cmd/batch-replicate_gen_test.go:528:8-528:14: `.Len()`
$DIR/cmd/batch-replicate_gen_test.go:533:13-533:31: `.Decode(&buf, &vn)`
$DIR/cmd/batch-replicate_gen_test.go:538:2-538:13: `buf.Reset()`
$DIR/cmd/batch-replicate_gen_test.go:538:5-538:13: `.Reset()`
$DIR/cmd/batch-replicate_gen_test.go:539:2-539:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/batch-replicate_gen_test.go:539:6-539:23: `.Encode(&buf, &v)`
$DIR/cmd/batch-replicate_gen_test.go:540:2-540:35: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/batch-replicate_gen_test.go:579:15-579:31: `.MarshalMsg(nil)`
$DIR/cmd/batch-replicate_gen_test.go:583:16-583:34: `.UnmarshalMsg(bts)`
$DIR/cmd/batch-replicate_gen_test.go:591:2-591:28: `left, err = msgp.Skip(bts)`
$DIR/cmd/batch-replicate_gen_test.go:638:2-638:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/batch-replicate_gen_test.go:638:6-638:23: `.Encode(&buf, &v)`
$DIR/cmd/batch-replicate_gen_test.go:640:8-640:18: `.Msgsize()`
$DIR/cmd/batch-replicate_gen_test.go:641:8-641:14: `.Len()`
$DIR/cmd/batch-replicate_gen_test.go:646:13-646:31: `.Decode(&buf, &vn)`
$DIR/cmd/batch-replicate_gen_test.go:651:2-651:13: `buf.Reset()`
$DIR/cmd/batch-replicate_gen_test.go:651:5-651:13: `.Reset()`
$DIR/cmd/batch-replicate_gen_test.go:652:2-652:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/batch-replicate_gen_test.go:652:6-652:23: `.Encode(&buf, &v)`
$DIR/cmd/batch-replicate_gen_test.go:653:2-653:35: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/batch-rotate_gen_test.go:14:15-14:31: `.MarshalMsg(nil)`
$DIR/cmd/batch-rotate_gen_test.go:18:16-18:34: `.UnmarshalMsg(bts)`
$DIR/cmd/batch-rotate_gen_test.go:26:2-26:28: `left, err = msgp.Skip(bts)`
$DIR/cmd/batch-rotate_gen_test.go:73:2-73:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/batch-rotate_gen_test.go:73:6-73:23: `.Encode(&buf, &v)`
$DIR/cmd/batch-rotate_gen_test.go:75:8-75:18: `.Msgsize()`
$DIR/cmd/batch-rotate_gen_test.go:76:8-76:14: `.Len()`
$DIR/cmd/batch-rotate_gen_test.go:81:13-81:31: `.Decode(&buf, &vn)`
$DIR/cmd/batch-rotate_gen_test.go:86:2-86:13: `buf.Reset()`
$DIR/cmd/batch-rotate_gen_test.go:86:5-86:13: `.Reset()`
$DIR/cmd/batch-rotate_gen_test.go:87:2-87:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/batch-rotate_gen_test.go:87:6-87:23: `.Encode(&buf, &v)`
$DIR/cmd/batch-rotate_gen_test.go:88:2-88:35: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/batch-rotate_gen_test.go:127:15-127:31: `.MarshalMsg(nil)`
$DIR/cmd/batch-rotate_gen_test.go:131:16-131:34: `.UnmarshalMsg(bts)`
$DIR/cmd/batch-rotate_gen_test.go:139:2-139:28: `left, err = msgp.Skip(bts)`
$DIR/cmd/batch-rotate_gen_test.go:186:2-186:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/batch-rotate_gen_test.go:186:6-186:23: `.Encode(&buf, &v)`
$DIR/cmd/batch-rotate_gen_test.go:188:8-188:18: `.Msgsize()`
$DIR/cmd/batch-rotate_gen_test.go:189:8-189:14: `.Len()`
$DIR/cmd/batch-rotate_gen_test.go:194:13-194:31: `.Decode(&buf, &vn)`
$DIR/cmd/batch-rotate_gen_test.go:199:2-199:13: `buf.Reset()`
$DIR/cmd/batch-rotate_gen_test.go:199:5-199:13: `.Reset()`
$DIR/cmd/batch-rotate_gen_test.go:200:2-200:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/batch-rotate_gen_test.go:200:6-200:23: `.Encode(&buf, &v)`
$DIR/cmd/batch-rotate_gen_test.go:201:2-201:35: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/batch-rotate_gen_test.go:240:15-240:31: `.MarshalMsg(nil)`
$DIR/cmd/batch-rotate_gen_test.go:244:16-244:34: `.UnmarshalMsg(bts)`
$DIR/cmd/batch-rotate_gen_test.go:252:2-252:28: `left, err = msgp.Skip(bts)`
$DIR/cmd/batch-rotate_gen_test.go:299:2-299:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/batch-rotate_gen_test.go:299:6-299:23: `.Encode(&buf, &v)`
$DIR/cmd/batch-rotate_gen_test.go:301:8-301:18: `.Msgsize()`
$DIR/cmd/batch-rotate_gen_test.go:302:8-302:14: `.Len()`
$DIR/cmd/batch-rotate_gen_test.go:307:13-307:31: `.Decode(&buf, &vn)`
$DIR/cmd/batch-rotate_gen_test.go:312:2-312:13: `buf.Reset()`
$DIR/cmd/batch-rotate_gen_test.go:312:5-312:13: `.Reset()`
$DIR/cmd/batch-rotate_gen_test.go:313:2-313:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/batch-rotate_gen_test.go:313:6-313:23: `.Encode(&buf, &v)`
$DIR/cmd/batch-rotate_gen_test.go:314:2-314:35: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/batch-rotate_gen_test.go:353:15-353:31: `.MarshalMsg(nil)`
$DIR/cmd/batch-rotate_gen_test.go:357:16-357:34: `.UnmarshalMsg(bts)`
$DIR/cmd/batch-rotate_gen_test.go:365:2-365:28: `left, err = msgp.Skip(bts)`
$DIR/cmd/batch-rotate_gen_test.go:412:2-412:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/batch-rotate_gen_test.go:412:6-412:23: `.Encode(&buf, &v)`
$DIR/cmd/batch-rotate_gen_test.go:414:8-414:18: `.Msgsize()`
$DIR/cmd/batch-rotate_gen_test.go:415:8-415:14: `.Len()`
$DIR/cmd/batch-rotate_gen_test.go:420:13-420:31: `.Decode(&buf, &vn)`
$DIR/cmd/batch-rotate_gen_test.go:425:2-425:13: `buf.Reset()`
$DIR/cmd/batch-rotate_gen_test.go:425:5-425:13: `.Reset()`
$DIR/cmd/batch-rotate_gen_test.go:426:2-426:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/batch-rotate_gen_test.go:426:6-426:23: `.Encode(&buf, &v)`
$DIR/cmd/batch-rotate_gen_test.go:427:2-427:35: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/batch-rotate_gen_test.go:466:15-466:31: `.MarshalMsg(nil)`
$DIR/cmd/batch-rotate_gen_test.go:470:16-470:34: `.UnmarshalMsg(bts)`
$DIR/cmd/batch-rotate_gen_test.go:478:2-478:28: `left, err = msgp.Skip(bts)`
$DIR/cmd/batch-rotate_gen_test.go:525:2-525:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/batch-rotate_gen_test.go:525:6-525:23: `.Encode(&buf, &v)`
$DIR/cmd/batch-rotate_gen_test.go:527:8-527:18: `.Msgsize()`
$DIR/cmd/batch-rotate_gen_test.go:528:8-528:14: `.Len()`
$DIR/cmd/batch-rotate_gen_test.go:533:13-533:31: `.Decode(&buf, &vn)`
$DIR/cmd/batch-rotate_gen_test.go:538:2-538:13: `buf.Reset()`
$DIR/cmd/batch-rotate_gen_test.go:538:5-538:13: `.Reset()`
$DIR/cmd/batch-rotate_gen_test.go:539:2-539:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/batch-rotate_gen_test.go:539:6-539:23: `.Encode(&buf, &v)`
$DIR/cmd/batch-rotate_gen_test.go:540:2-540:35: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/bitrot_test.go:82:3-82:44: `testBitrotReaderWriterAlgo(t, bitrotAlgo)`
$DIR/cmd/bootstrap-peer-server_gen_test.go:14:15-14:31: `.MarshalMsg(nil)`
$DIR/cmd/bootstrap-peer-server_gen_test.go:18:16-18:34: `.UnmarshalMsg(bts)`
$DIR/cmd/bootstrap-peer-server_gen_test.go:26:2-26:28: `left, err = msgp.Skip(bts)`
$DIR/cmd/bootstrap-peer-server_gen_test.go:73:2-73:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/bootstrap-peer-server_gen_test.go:73:6-73:23: `.Encode(&buf, &v)`
$DIR/cmd/bootstrap-peer-server_gen_test.go:75:8-75:18: `.Msgsize()`
$DIR/cmd/bootstrap-peer-server_gen_test.go:76:8-76:14: `.Len()`
$DIR/cmd/bootstrap-peer-server_gen_test.go:81:13-81:31: `.Decode(&buf, &vn)`
$DIR/cmd/bootstrap-peer-server_gen_test.go:86:2-86:13: `buf.Reset()`
$DIR/cmd/bootstrap-peer-server_gen_test.go:86:5-86:13: `.Reset()`
$DIR/cmd/bootstrap-peer-server_gen_test.go:87:2-87:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/bootstrap-peer-server_gen_test.go:87:6-87:23: `.Encode(&buf, &v)`
$DIR/cmd/bootstrap-peer-server_gen_test.go:88:2-88:35: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/bucket-encryption_test.go:59:42-59:73: `.NewReader([]byte(tc.inputXML))`
$DIR/cmd/bucket-lifecycle_test.go:42:18-42:59: `.Date(2012, 12, 21, 0, 0, 0, 0, time.UTC)`
$DIR/cmd/bucket-lifecycle_test.go:82:27-82:33: `.Now()`
$DIR/cmd/bucket-lifecycle_test.go:82:33-82:39: `.UTC()`
$DIR/cmd/bucket-lifecycle_test.go:85:42-85:51: `.String()`
$DIR/cmd/bucket-lifecycle_test.go:89:44-89:75: `.expiry.Format(http.TimeFormat)`
$DIR/cmd/bucket-lifecycle_test.go:89:81-89:112: `.expiry.Format(http.TimeFormat)`
$DIR/cmd/bucket-lifecycle_test.go:108:43-108:49: `.Now()`
$DIR/cmd/bucket-lifecycle_test.go:108:49-108:65: `.Add(-time.Hour)`
$DIR/cmd/bucket-lifecycle_test.go:113:43-113:49: `.Now()`
$DIR/cmd/bucket-lifecycle_test.go:113:49-113:64: `.Add(time.Hour)`
$DIR/cmd/bucket-lifecycle_test.go:119:18-119:41: `.restoreStatus.OnDisk()`
$DIR/cmd/bucket-lifecycle_test.go:134:42-134:51: `.String()`
$DIR/cmd/bucket-lifecycle_test.go:141:47-141:53: `.Now()`
$DIR/cmd/bucket-lifecycle_test.go:141:53-141:68: `.Add(time.Hour)`
$DIR/cmd/bucket-lifecycle_test.go:141:69-141:78: `.String()`
$DIR/cmd/bucket-lifecycle_test.go:148:47-148:53: `.Now()`
$DIR/cmd/bucket-lifecycle_test.go:148:53-148:69: `.Add(-time.Hour)`
$DIR/cmd/bucket-lifecycle_test.go:148:70-148:79: `.String()`
$DIR/cmd/bucket-lifecycle_test.go:163:2-163:22: `fi.Erasure.Index = 1`
$DIR/cmd/bucket-lifecycle_test.go:164:8-164:18: `.IsValid()`
$DIR/cmd/bucket-lifecycle_test.go:175:42-175:51: `.String()`
$DIR/cmd/bucket-lifecycle_test.go:182:47-182:53: `.Now()`
$DIR/cmd/bucket-lifecycle_test.go:182:53-182:68: `.Add(time.Hour)`
$DIR/cmd/bucket-lifecycle_test.go:182:69-182:78: `.String()`
$DIR/cmd/bucket-lifecycle_test.go:189:47-189:53: `.Now()`
$DIR/cmd/bucket-lifecycle_test.go:189:53-189:69: `.Add(-time.Hour)`
$DIR/cmd/bucket-lifecycle_test.go:189:70-189:79: `.String()`
$DIR/cmd/bucket-lifecycle_test.go:201:3-201:53: `fi.TransitionStatus = lifecycle.TransitionComplete`
$DIR/cmd/bucket-lifecycle_test.go:202:3-202:24: `fi.Metadata = tc.meta`
$DIR/cmd/bucket-lifecycle_test.go:203:15-203:26: `.IsRemote()`
$DIR/cmd/bucket-lifecycle_test.go:206:11-206:51: `.ToObjectInfo("bucket", "object", false)`
$DIR/cmd/bucket-lifecycle_test.go:207:15-207:26: `.IsRemote()`
$DIR/cmd/bucket-lifecycle_test.go:212:2-212:26: `fi.TransitionStatus = ""`
$DIR/cmd/bucket-lifecycle_test.go:213:2-213:19: `fi.Metadata = nil`
$DIR/cmd/bucket-lifecycle_test.go:214:14-214:25: `.IsRemote()`
$DIR/cmd/bucket-lifecycle_test.go:220:2-220:42: `globalTierConfigMgr = NewTierConfigMgr()`
$DIR/cmd/bucket-lifecycle_test.go:237:23-237:69: `.ParseLifecycleConfig(bytes.NewReader(tc.xml))`
$DIR/cmd/bucket-lifecycle_test.go:237:50-237:68: `.NewReader(tc.xml)`
$DIR/cmd/bucket-lifecycle_test.go:242:3-242:35: `err = validateTransitionTier(lc)`
$DIR/cmd/bucket-metadata_gen_test.go:14:15-14:31: `.MarshalMsg(nil)`
$DIR/cmd/bucket-metadata_gen_test.go:18:16-18:34: `.UnmarshalMsg(bts)`
$DIR/cmd/bucket-metadata_gen_test.go:26:2-26:28: `left, err = msgp.Skip(bts)`
$DIR/cmd/bucket-metadata_gen_test.go:73:2-73:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/bucket-metadata_gen_test.go:73:6-73:23: `.Encode(&buf, &v)`
$DIR/cmd/bucket-metadata_gen_test.go:75:8-75:18: `.Msgsize()`
$DIR/cmd/bucket-metadata_gen_test.go:76:8-76:14: `.Len()`
$DIR/cmd/bucket-metadata_gen_test.go:81:13-81:31: `.Decode(&buf, &vn)`
$DIR/cmd/bucket-metadata_gen_test.go:86:2-86:13: `buf.Reset()`
$DIR/cmd/bucket-metadata_gen_test.go:86:5-86:13: `.Reset()`
$DIR/cmd/bucket-metadata_gen_test.go:87:2-87:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/bucket-metadata_gen_test.go:87:6-87:23: `.Encode(&buf, &v)`
$DIR/cmd/bucket-metadata_gen_test.go:88:2-88:35: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/bucket-replication-metrics_gen_test.go:14:15-14:31: `.MarshalMsg(nil)`
$DIR/cmd/bucket-replication-metrics_gen_test.go:18:16-18:34: `.UnmarshalMsg(bts)`
$DIR/cmd/bucket-replication-metrics_gen_test.go:26:2-26:28: `left, err = msgp.Skip(bts)`
$DIR/cmd/bucket-replication-metrics_gen_test.go:73:2-73:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/bucket-replication-metrics_gen_test.go:73:6-73:23: `.Encode(&buf, &v)`
$DIR/cmd/bucket-replication-metrics_gen_test.go:75:8-75:18: `.Msgsize()`
$DIR/cmd/bucket-replication-metrics_gen_test.go:76:8-76:14: `.Len()`
$DIR/cmd/bucket-replication-metrics_gen_test.go:81:13-81:31: `.Decode(&buf, &vn)`
$DIR/cmd/bucket-replication-metrics_gen_test.go:86:2-86:13: `buf.Reset()`
$DIR/cmd/bucket-replication-metrics_gen_test.go:86:5-86:13: `.Reset()`
$DIR/cmd/bucket-replication-metrics_gen_test.go:87:2-87:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/bucket-replication-metrics_gen_test.go:87:6-87:23: `.Encode(&buf, &v)`
$DIR/cmd/bucket-replication-metrics_gen_test.go:88:2-88:35: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/bucket-replication-metrics_gen_test.go:127:15-127:31: `.MarshalMsg(nil)`
$DIR/cmd/bucket-replication-metrics_gen_test.go:131:16-131:34: `.UnmarshalMsg(bts)`
$DIR/cmd/bucket-replication-metrics_gen_test.go:139:2-139:28: `left, err = msgp.Skip(bts)`
$DIR/cmd/bucket-replication-metrics_gen_test.go:186:2-186:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/bucket-replication-metrics_gen_test.go:186:6-186:23: `.Encode(&buf, &v)`
$DIR/cmd/bucket-replication-metrics_gen_test.go:188:8-188:18: `.Msgsize()`
$DIR/cmd/bucket-replication-metrics_gen_test.go:189:8-189:14: `.Len()`
$DIR/cmd/bucket-replication-metrics_gen_test.go:194:13-194:31: `.Decode(&buf, &vn)`
$DIR/cmd/bucket-replication-metrics_gen_test.go:199:2-199:13: `buf.Reset()`
$DIR/cmd/bucket-replication-metrics_gen_test.go:199:5-199:13: `.Reset()`
$DIR/cmd/bucket-replication-metrics_gen_test.go:200:2-200:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/bucket-replication-metrics_gen_test.go:200:6-200:23: `.Encode(&buf, &v)`
$DIR/cmd/bucket-replication-metrics_gen_test.go:201:2-201:35: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/bucket-replication-metrics_gen_test.go:240:15-240:31: `.MarshalMsg(nil)`
$DIR/cmd/bucket-replication-metrics_gen_test.go:244:16-244:34: `.UnmarshalMsg(bts)`
$DIR/cmd/bucket-replication-metrics_gen_test.go:252:2-252:28: `left, err = msgp.Skip(bts)`
$DIR/cmd/bucket-replication-metrics_gen_test.go:299:2-299:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/bucket-replication-metrics_gen_test.go:299:6-299:23: `.Encode(&buf, &v)`
$DIR/cmd/bucket-replication-metrics_gen_test.go:301:8-301:18: `.Msgsize()`
$DIR/cmd/bucket-replication-metrics_gen_test.go:302:8-302:14: `.Len()`
$DIR/cmd/bucket-replication-metrics_gen_test.go:307:13-307:31: `.Decode(&buf, &vn)`
$DIR/cmd/bucket-replication-metrics_gen_test.go:312:2-312:13: `buf.Reset()`
$DIR/cmd/bucket-replication-metrics_gen_test.go:312:5-312:13: `.Reset()`
$DIR/cmd/bucket-replication-metrics_gen_test.go:313:2-313:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/bucket-replication-metrics_gen_test.go:313:6-313:23: `.Encode(&buf, &v)`
$DIR/cmd/bucket-replication-metrics_gen_test.go:314:2-314:35: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/bucket-replication-metrics_gen_test.go:353:15-353:31: `.MarshalMsg(nil)`
$DIR/cmd/bucket-replication-metrics_gen_test.go:357:16-357:34: `.UnmarshalMsg(bts)`
$DIR/cmd/bucket-replication-metrics_gen_test.go:365:2-365:28: `left, err = msgp.Skip(bts)`
$DIR/cmd/bucket-replication-metrics_gen_test.go:412:2-412:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/bucket-replication-metrics_gen_test.go:412:6-412:23: `.Encode(&buf, &v)`
$DIR/cmd/bucket-replication-metrics_gen_test.go:414:8-414:18: `.Msgsize()`
$DIR/cmd/bucket-replication-metrics_gen_test.go:415:8-415:14: `.Len()`
$DIR/cmd/bucket-replication-metrics_gen_test.go:420:13-420:31: `.Decode(&buf, &vn)`
$DIR/cmd/bucket-replication-metrics_gen_test.go:425:2-425:13: `buf.Reset()`
$DIR/cmd/bucket-replication-metrics_gen_test.go:425:5-425:13: `.Reset()`
$DIR/cmd/bucket-replication-metrics_gen_test.go:426:2-426:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/bucket-replication-metrics_gen_test.go:426:6-426:23: `.Encode(&buf, &v)`
$DIR/cmd/bucket-replication-metrics_gen_test.go:427:2-427:35: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/bucket-replication-metrics_gen_test.go:466:15-466:31: `.MarshalMsg(nil)`
$DIR/cmd/bucket-replication-metrics_gen_test.go:470:16-470:34: `.UnmarshalMsg(bts)`
$DIR/cmd/bucket-replication-metrics_gen_test.go:478:2-478:28: `left, err = msgp.Skip(bts)`
$DIR/cmd/bucket-replication-metrics_gen_test.go:525:2-525:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/bucket-replication-metrics_gen_test.go:525:6-525:23: `.Encode(&buf, &v)`
$DIR/cmd/bucket-replication-metrics_gen_test.go:527:8-527:18: `.Msgsize()`
$DIR/cmd/bucket-replication-metrics_gen_test.go:528:8-528:14: `.Len()`
$DIR/cmd/bucket-replication-metrics_gen_test.go:533:13-533:31: `.Decode(&buf, &vn)`
$DIR/cmd/bucket-replication-metrics_gen_test.go:538:2-538:13: `buf.Reset()`
$DIR/cmd/bucket-replication-metrics_gen_test.go:538:5-538:13: `.Reset()`
$DIR/cmd/bucket-replication-metrics_gen_test.go:539:2-539:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/bucket-replication-metrics_gen_test.go:539:6-539:23: `.Encode(&buf, &v)`
$DIR/cmd/bucket-replication-metrics_gen_test.go:540:2-540:35: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/bucket-replication-metrics_gen_test.go:579:15-579:31: `.MarshalMsg(nil)`
$DIR/cmd/bucket-replication-metrics_gen_test.go:583:16-583:34: `.UnmarshalMsg(bts)`
$DIR/cmd/bucket-replication-metrics_gen_test.go:591:2-591:28: `left, err = msgp.Skip(bts)`
$DIR/cmd/bucket-replication-metrics_gen_test.go:638:2-638:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/bucket-replication-metrics_gen_test.go:638:6-638:23: `.Encode(&buf, &v)`
$DIR/cmd/bucket-replication-metrics_gen_test.go:640:8-640:18: `.Msgsize()`
$DIR/cmd/bucket-replication-metrics_gen_test.go:641:8-641:14: `.Len()`
$DIR/cmd/bucket-replication-metrics_gen_test.go:646:13-646:31: `.Decode(&buf, &vn)`
$DIR/cmd/bucket-replication-metrics_gen_test.go:651:2-651:13: `buf.Reset()`
$DIR/cmd/bucket-replication-metrics_gen_test.go:651:5-651:13: `.Reset()`
$DIR/cmd/bucket-replication-metrics_gen_test.go:652:2-652:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/bucket-replication-metrics_gen_test.go:652:6-652:23: `.Encode(&buf, &v)`
$DIR/cmd/bucket-replication-metrics_gen_test.go:653:2-653:35: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/bucket-replication-metrics_gen_test.go:692:15-692:31: `.MarshalMsg(nil)`
$DIR/cmd/bucket-replication-metrics_gen_test.go:696:16-696:34: `.UnmarshalMsg(bts)`
$DIR/cmd/bucket-replication-metrics_gen_test.go:704:2-704:28: `left, err = msgp.Skip(bts)`
$DIR/cmd/bucket-replication-metrics_gen_test.go:751:2-751:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/bucket-replication-metrics_gen_test.go:751:6-751:23: `.Encode(&buf, &v)`
$DIR/cmd/bucket-replication-metrics_gen_test.go:753:8-753:18: `.Msgsize()`
$DIR/cmd/bucket-replication-metrics_gen_test.go:754:8-754:14: `.Len()`
$DIR/cmd/bucket-replication-metrics_gen_test.go:759:13-759:31: `.Decode(&buf, &vn)`
$DIR/cmd/bucket-replication-metrics_gen_test.go:764:2-764:13: `buf.Reset()`
$DIR/cmd/bucket-replication-metrics_gen_test.go:764:5-764:13: `.Reset()`
$DIR/cmd/bucket-replication-metrics_gen_test.go:765:2-765:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/bucket-replication-metrics_gen_test.go:765:6-765:23: `.Encode(&buf, &v)`
$DIR/cmd/bucket-replication-metrics_gen_test.go:766:2-766:35: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/bucket-replication-metrics_gen_test.go:805:15-805:31: `.MarshalMsg(nil)`
$DIR/cmd/bucket-replication-metrics_gen_test.go:809:16-809:34: `.UnmarshalMsg(bts)`
$DIR/cmd/bucket-replication-metrics_gen_test.go:817:2-817:28: `left, err = msgp.Skip(bts)`
$DIR/cmd/bucket-replication-metrics_gen_test.go:864:2-864:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/bucket-replication-metrics_gen_test.go:864:6-864:23: `.Encode(&buf, &v)`
$DIR/cmd/bucket-replication-metrics_gen_test.go:866:8-866:18: `.Msgsize()`
$DIR/cmd/bucket-replication-metrics_gen_test.go:867:8-867:14: `.Len()`
$DIR/cmd/bucket-replication-metrics_gen_test.go:872:13-872:31: `.Decode(&buf, &vn)`
$DIR/cmd/bucket-replication-metrics_gen_test.go:877:2-877:13: `buf.Reset()`
$DIR/cmd/bucket-replication-metrics_gen_test.go:877:5-877:13: `.Reset()`
$DIR/cmd/bucket-replication-metrics_gen_test.go:878:2-878:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/bucket-replication-metrics_gen_test.go:878:6-878:23: `.Encode(&buf, &v)`
$DIR/cmd/bucket-replication-metrics_gen_test.go:879:2-879:35: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/bucket-replication-utils_gen_test.go:14:15-14:31: `.MarshalMsg(nil)`
$DIR/cmd/bucket-replication-utils_gen_test.go:18:16-18:34: `.UnmarshalMsg(bts)`
$DIR/cmd/bucket-replication-utils_gen_test.go:26:2-26:28: `left, err = msgp.Skip(bts)`
$DIR/cmd/bucket-replication-utils_gen_test.go:73:2-73:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/bucket-replication-utils_gen_test.go:73:6-73:23: `.Encode(&buf, &v)`
$DIR/cmd/bucket-replication-utils_gen_test.go:75:8-75:18: `.Msgsize()`
$DIR/cmd/bucket-replication-utils_gen_test.go:76:8-76:14: `.Len()`
$DIR/cmd/bucket-replication-utils_gen_test.go:81:13-81:31: `.Decode(&buf, &vn)`
$DIR/cmd/bucket-replication-utils_gen_test.go:86:2-86:13: `buf.Reset()`
$DIR/cmd/bucket-replication-utils_gen_test.go:86:5-86:13: `.Reset()`
$DIR/cmd/bucket-replication-utils_gen_test.go:87:2-87:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/bucket-replication-utils_gen_test.go:87:6-87:23: `.Encode(&buf, &v)`
$DIR/cmd/bucket-replication-utils_gen_test.go:88:2-88:35: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/bucket-replication-utils_gen_test.go:127:15-127:31: `.MarshalMsg(nil)`
$DIR/cmd/bucket-replication-utils_gen_test.go:131:16-131:34: `.UnmarshalMsg(bts)`
$DIR/cmd/bucket-replication-utils_gen_test.go:139:2-139:28: `left, err = msgp.Skip(bts)`
$DIR/cmd/bucket-replication-utils_gen_test.go:186:2-186:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/bucket-replication-utils_gen_test.go:186:6-186:23: `.Encode(&buf, &v)`
$DIR/cmd/bucket-replication-utils_gen_test.go:188:8-188:18: `.Msgsize()`
$DIR/cmd/bucket-replication-utils_gen_test.go:189:8-189:14: `.Len()`
$DIR/cmd/bucket-replication-utils_gen_test.go:194:13-194:31: `.Decode(&buf, &vn)`
$DIR/cmd/bucket-replication-utils_gen_test.go:199:2-199:13: `buf.Reset()`
$DIR/cmd/bucket-replication-utils_gen_test.go:199:5-199:13: `.Reset()`
$DIR/cmd/bucket-replication-utils_gen_test.go:200:2-200:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/bucket-replication-utils_gen_test.go:200:6-200:23: `.Encode(&buf, &v)`
$DIR/cmd/bucket-replication-utils_gen_test.go:201:2-201:35: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/bucket-replication-utils_gen_test.go:240:15-240:31: `.MarshalMsg(nil)`
$DIR/cmd/bucket-replication-utils_gen_test.go:244:16-244:34: `.UnmarshalMsg(bts)`
$DIR/cmd/bucket-replication-utils_gen_test.go:252:2-252:28: `left, err = msgp.Skip(bts)`
$DIR/cmd/bucket-replication-utils_gen_test.go:299:2-299:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/bucket-replication-utils_gen_test.go:299:6-299:23: `.Encode(&buf, &v)`
$DIR/cmd/bucket-replication-utils_gen_test.go:301:8-301:18: `.Msgsize()`
$DIR/cmd/bucket-replication-utils_gen_test.go:302:8-302:14: `.Len()`
$DIR/cmd/bucket-replication-utils_gen_test.go:307:13-307:31: `.Decode(&buf, &vn)`
$DIR/cmd/bucket-replication-utils_gen_test.go:312:2-312:13: `buf.Reset()`
$DIR/cmd/bucket-replication-utils_gen_test.go:312:5-312:13: `.Reset()`
$DIR/cmd/bucket-replication-utils_gen_test.go:313:2-313:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/bucket-replication-utils_gen_test.go:313:6-313:23: `.Encode(&buf, &v)`
$DIR/cmd/bucket-replication-utils_gen_test.go:314:2-314:35: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/bucket-replication-utils_gen_test.go:353:15-353:31: `.MarshalMsg(nil)`
$DIR/cmd/bucket-replication-utils_gen_test.go:357:16-357:34: `.UnmarshalMsg(bts)`
$DIR/cmd/bucket-replication-utils_gen_test.go:365:2-365:28: `left, err = msgp.Skip(bts)`
$DIR/cmd/bucket-replication-utils_gen_test.go:412:2-412:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/bucket-replication-utils_gen_test.go:412:6-412:23: `.Encode(&buf, &v)`
$DIR/cmd/bucket-replication-utils_gen_test.go:414:8-414:18: `.Msgsize()`
$DIR/cmd/bucket-replication-utils_gen_test.go:415:8-415:14: `.Len()`
$DIR/cmd/bucket-replication-utils_gen_test.go:420:13-420:31: `.Decode(&buf, &vn)`
$DIR/cmd/bucket-replication-utils_gen_test.go:425:2-425:13: `buf.Reset()`
$DIR/cmd/bucket-replication-utils_gen_test.go:425:5-425:13: `.Reset()`
$DIR/cmd/bucket-replication-utils_gen_test.go:426:2-426:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/bucket-replication-utils_gen_test.go:426:6-426:23: `.Encode(&buf, &v)`
$DIR/cmd/bucket-replication-utils_gen_test.go:427:2-427:35: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/bucket-replication-utils_gen_test.go:466:15-466:31: `.MarshalMsg(nil)`
$DIR/cmd/bucket-replication-utils_gen_test.go:470:16-470:34: `.UnmarshalMsg(bts)`
$DIR/cmd/bucket-replication-utils_gen_test.go:478:2-478:28: `left, err = msgp.Skip(bts)`
$DIR/cmd/bucket-replication-utils_gen_test.go:525:2-525:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/bucket-replication-utils_gen_test.go:525:6-525:23: `.Encode(&buf, &v)`
$DIR/cmd/bucket-replication-utils_gen_test.go:527:8-527:18: `.Msgsize()`
$DIR/cmd/bucket-replication-utils_gen_test.go:528:8-528:14: `.Len()`
$DIR/cmd/bucket-replication-utils_gen_test.go:533:13-533:31: `.Decode(&buf, &vn)`
$DIR/cmd/bucket-replication-utils_gen_test.go:538:2-538:13: `buf.Reset()`
$DIR/cmd/bucket-replication-utils_gen_test.go:538:5-538:13: `.Reset()`
$DIR/cmd/bucket-replication-utils_gen_test.go:539:2-539:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/bucket-replication-utils_gen_test.go:539:6-539:23: `.Encode(&buf, &v)`
$DIR/cmd/bucket-replication-utils_gen_test.go:540:2-540:35: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/bucket-replication-utils_gen_test.go:579:15-579:31: `.MarshalMsg(nil)`
$DIR/cmd/bucket-replication-utils_gen_test.go:583:16-583:34: `.UnmarshalMsg(bts)`
$DIR/cmd/bucket-replication-utils_gen_test.go:591:2-591:28: `left, err = msgp.Skip(bts)`
$DIR/cmd/bucket-replication-utils_gen_test.go:638:2-638:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/bucket-replication-utils_gen_test.go:638:6-638:23: `.Encode(&buf, &v)`
$DIR/cmd/bucket-replication-utils_gen_test.go:640:8-640:18: `.Msgsize()`
$DIR/cmd/bucket-replication-utils_gen_test.go:641:8-641:14: `.Len()`
$DIR/cmd/bucket-replication-utils_gen_test.go:646:13-646:31: `.Decode(&buf, &vn)`
$DIR/cmd/bucket-replication-utils_gen_test.go:651:2-651:13: `buf.Reset()`
$DIR/cmd/bucket-replication-utils_gen_test.go:651:5-651:13: `.Reset()`
$DIR/cmd/bucket-replication-utils_gen_test.go:652:2-652:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/bucket-replication-utils_gen_test.go:652:6-652:23: `.Encode(&buf, &v)`
$DIR/cmd/bucket-replication-utils_gen_test.go:653:2-653:35: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/bucket-replication-utils_gen_test.go:692:15-692:31: `.MarshalMsg(nil)`
$DIR/cmd/bucket-replication-utils_gen_test.go:696:16-696:34: `.UnmarshalMsg(bts)`
$DIR/cmd/bucket-replication-utils_gen_test.go:704:2-704:28: `left, err = msgp.Skip(bts)`
$DIR/cmd/bucket-replication-utils_gen_test.go:751:2-751:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/bucket-replication-utils_gen_test.go:751:6-751:23: `.Encode(&buf, &v)`
$DIR/cmd/bucket-replication-utils_gen_test.go:753:8-753:18: `.Msgsize()`
$DIR/cmd/bucket-replication-utils_gen_test.go:754:8-754:14: `.Len()`
$DIR/cmd/bucket-replication-utils_gen_test.go:759:13-759:31: `.Decode(&buf, &vn)`
$DIR/cmd/bucket-replication-utils_gen_test.go:764:2-764:13: `buf.Reset()`
$DIR/cmd/bucket-replication-utils_gen_test.go:764:5-764:13: `.Reset()`
$DIR/cmd/bucket-replication-utils_gen_test.go:765:2-765:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/bucket-replication-utils_gen_test.go:765:6-765:23: `.Encode(&buf, &v)`
$DIR/cmd/bucket-replication-utils_gen_test.go:766:2-766:35: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/bucket-replication-utils_gen_test.go:805:15-805:31: `.MarshalMsg(nil)`
$DIR/cmd/bucket-replication-utils_gen_test.go:809:16-809:34: `.UnmarshalMsg(bts)`
$DIR/cmd/bucket-replication-utils_gen_test.go:817:2-817:28: `left, err = msgp.Skip(bts)`
$DIR/cmd/bucket-replication-utils_gen_test.go:864:2-864:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/bucket-replication-utils_gen_test.go:864:6-864:23: `.Encode(&buf, &v)`
$DIR/cmd/bucket-replication-utils_gen_test.go:866:8-866:18: `.Msgsize()`
$DIR/cmd/bucket-replication-utils_gen_test.go:867:8-867:14: `.Len()`
$DIR/cmd/bucket-replication-utils_gen_test.go:872:13-872:31: `.Decode(&buf, &vn)`
$DIR/cmd/bucket-replication-utils_gen_test.go:877:2-877:13: `buf.Reset()`
$DIR/cmd/bucket-replication-utils_gen_test.go:877:5-877:13: `.Reset()`
$DIR/cmd/bucket-replication-utils_gen_test.go:878:2-878:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/bucket-replication-utils_gen_test.go:878:6-878:23: `.Encode(&buf, &v)`
$DIR/cmd/bucket-replication-utils_gen_test.go:879:2-879:35: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/bucket-replication-utils_gen_test.go:918:15-918:31: `.MarshalMsg(nil)`
$DIR/cmd/bucket-replication-utils_gen_test.go:922:16-922:34: `.UnmarshalMsg(bts)`
$DIR/cmd/bucket-replication-utils_gen_test.go:930:2-930:28: `left, err = msgp.Skip(bts)`
$DIR/cmd/bucket-replication-utils_gen_test.go:977:2-977:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/bucket-replication-utils_gen_test.go:977:6-977:23: `.Encode(&buf, &v)`
$DIR/cmd/bucket-replication-utils_gen_test.go:979:8-979:18: `.Msgsize()`
$DIR/cmd/bucket-replication-utils_gen_test.go:980:8-980:14: `.Len()`
$DIR/cmd/bucket-replication-utils_gen_test.go:985:13-985:31: `.Decode(&buf, &vn)`
$DIR/cmd/bucket-replication-utils_gen_test.go:990:2-990:13: `buf.Reset()`
$DIR/cmd/bucket-replication-utils_gen_test.go:990:5-990:13: `.Reset()`
$DIR/cmd/bucket-replication-utils_gen_test.go:991:2-991:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/bucket-replication-utils_gen_test.go:991:6-991:23: `.Encode(&buf, &v)`
$DIR/cmd/bucket-replication-utils_gen_test.go:992:2-992:35: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/bucket-replication-utils_gen_test.go:1031:15-1031:31: `.MarshalMsg(nil)`
$DIR/cmd/bucket-replication-utils_gen_test.go:1035:16-1035:34: `.UnmarshalMsg(bts)`
$DIR/cmd/bucket-replication-utils_gen_test.go:1043:2-1043:28: `left, err = msgp.Skip(bts)`
$DIR/cmd/bucket-replication-utils_gen_test.go:1090:2-1090:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/bucket-replication-utils_gen_test.go:1090:6-1090:23: `.Encode(&buf, &v)`
$DIR/cmd/bucket-replication-utils_gen_test.go:1092:8-1092:18: `.Msgsize()`
$DIR/cmd/bucket-replication-utils_gen_test.go:1093:8-1093:14: `.Len()`
$DIR/cmd/bucket-replication-utils_gen_test.go:1098:13-1098:31: `.Decode(&buf, &vn)`
$DIR/cmd/bucket-replication-utils_gen_test.go:1103:2-1103:13: `buf.Reset()`
$DIR/cmd/bucket-replication-utils_gen_test.go:1103:5-1103:13: `.Reset()`
$DIR/cmd/bucket-replication-utils_gen_test.go:1104:2-1104:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/bucket-replication-utils_gen_test.go:1104:6-1104:23: `.Encode(&buf, &v)`
$DIR/cmd/bucket-replication-utils_gen_test.go:1105:2-1105:35: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/bucket-replication-utils_test.go:122:26-122:42: `.CompletedSize()`
$DIR/cmd/bucket-replication-utils_test.go:125:28-125:56: `.ReplicationStatusInternal()`
$DIR/cmd/bucket-replication-utils_test.go:128:25-128:45: `.ReplicationStatus()`
$DIR/cmd/bucket-replication-utils_test.go:131:22-131:31: `.Action()`
$DIR/cmd/bucket-replication-utils_test.go:187:45-187:58: `.Background()`
$DIR/cmd/bucket-replication-utils_test.go:187:74-187:90: `.expDsc.String()`
$DIR/cmd/bucket-replication-utils_test.go:244:21-244:53: `.rs.CompositeReplicationStatus()`
$DIR/cmd/bucket-replication_test.go:89:16-89:29: `.Background()`
$DIR/cmd/bucket-replication_test.go:91:18-91:74: `.rcfg.Resync(ctx, test.info, test.dsc, test.tgtStatuses)`
$DIR/cmd/bucket-replication_test.go:91:80-91:93: `.mustResync()`
$DIR/cmd/bucket-replication_test.go:286:18-286:69: `.rcfg.resync(test.info, test.dsc, test.tgtStatuses)`
$DIR/cmd/bucket-replication_test.go:286:75-286:88: `.mustResync()`
$DIR/cmd/bucket-stats_gen_test.go:14:15-14:31: `.MarshalMsg(nil)`
$DIR/cmd/bucket-stats_gen_test.go:18:16-18:34: `.UnmarshalMsg(bts)`
$DIR/cmd/bucket-stats_gen_test.go:26:2-26:28: `left, err = msgp.Skip(bts)`
$DIR/cmd/bucket-stats_gen_test.go:73:2-73:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/bucket-stats_gen_test.go:73:6-73:23: `.Encode(&buf, &v)`
$DIR/cmd/bucket-stats_gen_test.go:75:8-75:18: `.Msgsize()`
$DIR/cmd/bucket-stats_gen_test.go:76:8-76:14: `.Len()`
$DIR/cmd/bucket-stats_gen_test.go:81:13-81:31: `.Decode(&buf, &vn)`
$DIR/cmd/bucket-stats_gen_test.go:86:2-86:13: `buf.Reset()`
$DIR/cmd/bucket-stats_gen_test.go:86:5-86:13: `.Reset()`
$DIR/cmd/bucket-stats_gen_test.go:87:2-87:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/bucket-stats_gen_test.go:87:6-87:23: `.Encode(&buf, &v)`
$DIR/cmd/bucket-stats_gen_test.go:88:2-88:35: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/bucket-stats_gen_test.go:127:15-127:31: `.MarshalMsg(nil)`
$DIR/cmd/bucket-stats_gen_test.go:131:16-131:34: `.UnmarshalMsg(bts)`
$DIR/cmd/bucket-stats_gen_test.go:139:2-139:28: `left, err = msgp.Skip(bts)`
$DIR/cmd/bucket-stats_gen_test.go:186:2-186:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/bucket-stats_gen_test.go:186:6-186:23: `.Encode(&buf, &v)`
$DIR/cmd/bucket-stats_gen_test.go:188:8-188:18: `.Msgsize()`
$DIR/cmd/bucket-stats_gen_test.go:189:8-189:14: `.Len()`
$DIR/cmd/bucket-stats_gen_test.go:194:13-194:31: `.Decode(&buf, &vn)`
$DIR/cmd/bucket-stats_gen_test.go:199:2-199:13: `buf.Reset()`
$DIR/cmd/bucket-stats_gen_test.go:199:5-199:13: `.Reset()`
$DIR/cmd/bucket-stats_gen_test.go:200:2-200:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/bucket-stats_gen_test.go:200:6-200:23: `.Encode(&buf, &v)`
$DIR/cmd/bucket-stats_gen_test.go:201:2-201:35: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/bucket-stats_gen_test.go:240:15-240:31: `.MarshalMsg(nil)`
$DIR/cmd/bucket-stats_gen_test.go:244:16-244:34: `.UnmarshalMsg(bts)`
$DIR/cmd/bucket-stats_gen_test.go:252:2-252:28: `left, err = msgp.Skip(bts)`
$DIR/cmd/bucket-stats_gen_test.go:299:2-299:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/bucket-stats_gen_test.go:299:6-299:23: `.Encode(&buf, &v)`
$DIR/cmd/bucket-stats_gen_test.go:301:8-301:18: `.Msgsize()`
$DIR/cmd/bucket-stats_gen_test.go:302:8-302:14: `.Len()`
$DIR/cmd/bucket-stats_gen_test.go:307:13-307:31: `.Decode(&buf, &vn)`
$DIR/cmd/bucket-stats_gen_test.go:312:2-312:13: `buf.Reset()`
$DIR/cmd/bucket-stats_gen_test.go:312:5-312:13: `.Reset()`
$DIR/cmd/bucket-stats_gen_test.go:313:2-313:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/bucket-stats_gen_test.go:313:6-313:23: `.Encode(&buf, &v)`
$DIR/cmd/bucket-stats_gen_test.go:314:2-314:35: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/bucket-stats_gen_test.go:353:15-353:31: `.MarshalMsg(nil)`
$DIR/cmd/bucket-stats_gen_test.go:357:16-357:34: `.UnmarshalMsg(bts)`
$DIR/cmd/bucket-stats_gen_test.go:365:2-365:28: `left, err = msgp.Skip(bts)`
$DIR/cmd/bucket-stats_gen_test.go:412:2-412:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/bucket-stats_gen_test.go:412:6-412:23: `.Encode(&buf, &v)`
$DIR/cmd/bucket-stats_gen_test.go:414:8-414:18: `.Msgsize()`
$DIR/cmd/bucket-stats_gen_test.go:415:8-415:14: `.Len()`
$DIR/cmd/bucket-stats_gen_test.go:420:13-420:31: `.Decode(&buf, &vn)`
$DIR/cmd/bucket-stats_gen_test.go:425:2-425:13: `buf.Reset()`
$DIR/cmd/bucket-stats_gen_test.go:425:5-425:13: `.Reset()`
$DIR/cmd/bucket-stats_gen_test.go:426:2-426:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/bucket-stats_gen_test.go:426:6-426:23: `.Encode(&buf, &v)`
$DIR/cmd/bucket-stats_gen_test.go:427:2-427:35: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/bucket-stats_gen_test.go:466:15-466:31: `.MarshalMsg(nil)`
$DIR/cmd/bucket-stats_gen_test.go:470:16-470:34: `.UnmarshalMsg(bts)`
$DIR/cmd/bucket-stats_gen_test.go:478:2-478:28: `left, err = msgp.Skip(bts)`
$DIR/cmd/bucket-stats_gen_test.go:525:2-525:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/bucket-stats_gen_test.go:525:6-525:23: `.Encode(&buf, &v)`
$DIR/cmd/bucket-stats_gen_test.go:527:8-527:18: `.Msgsize()`
$DIR/cmd/bucket-stats_gen_test.go:528:8-528:14: `.Len()`
$DIR/cmd/bucket-stats_gen_test.go:533:13-533:31: `.Decode(&buf, &vn)`
$DIR/cmd/bucket-stats_gen_test.go:538:2-538:13: `buf.Reset()`
$DIR/cmd/bucket-stats_gen_test.go:538:5-538:13: `.Reset()`
$DIR/cmd/bucket-stats_gen_test.go:539:2-539:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/bucket-stats_gen_test.go:539:6-539:23: `.Encode(&buf, &v)`
$DIR/cmd/bucket-stats_gen_test.go:540:2-540:35: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/bucket-stats_gen_test.go:579:15-579:31: `.MarshalMsg(nil)`
$DIR/cmd/bucket-stats_gen_test.go:583:16-583:34: `.UnmarshalMsg(bts)`
$DIR/cmd/bucket-stats_gen_test.go:591:2-591:28: `left, err = msgp.Skip(bts)`
$DIR/cmd/bucket-stats_gen_test.go:638:2-638:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/bucket-stats_gen_test.go:638:6-638:23: `.Encode(&buf, &v)`
$DIR/cmd/bucket-stats_gen_test.go:640:8-640:18: `.Msgsize()`
$DIR/cmd/bucket-stats_gen_test.go:641:8-641:14: `.Len()`
$DIR/cmd/bucket-stats_gen_test.go:646:13-646:31: `.Decode(&buf, &vn)`
$DIR/cmd/bucket-stats_gen_test.go:651:2-651:13: `buf.Reset()`
$DIR/cmd/bucket-stats_gen_test.go:651:5-651:13: `.Reset()`
$DIR/cmd/bucket-stats_gen_test.go:652:2-652:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/bucket-stats_gen_test.go:652:6-652:23: `.Encode(&buf, &v)`
$DIR/cmd/bucket-stats_gen_test.go:653:2-653:35: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/bucket-stats_gen_test.go:692:15-692:31: `.MarshalMsg(nil)`
$DIR/cmd/bucket-stats_gen_test.go:696:16-696:34: `.UnmarshalMsg(bts)`
$DIR/cmd/bucket-stats_gen_test.go:704:2-704:28: `left, err = msgp.Skip(bts)`
$DIR/cmd/bucket-stats_gen_test.go:751:2-751:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/bucket-stats_gen_test.go:751:6-751:23: `.Encode(&buf, &v)`
$DIR/cmd/bucket-stats_gen_test.go:753:8-753:18: `.Msgsize()`
$DIR/cmd/bucket-stats_gen_test.go:754:8-754:14: `.Len()`
$DIR/cmd/bucket-stats_gen_test.go:759:13-759:31: `.Decode(&buf, &vn)`
$DIR/cmd/bucket-stats_gen_test.go:764:2-764:13: `buf.Reset()`
$DIR/cmd/bucket-stats_gen_test.go:764:5-764:13: `.Reset()`
$DIR/cmd/bucket-stats_gen_test.go:765:2-765:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/bucket-stats_gen_test.go:765:6-765:23: `.Encode(&buf, &v)`
$DIR/cmd/bucket-stats_gen_test.go:766:2-766:35: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/bucket-stats_gen_test.go:805:15-805:31: `.MarshalMsg(nil)`
$DIR/cmd/bucket-stats_gen_test.go:809:16-809:34: `.UnmarshalMsg(bts)`
$DIR/cmd/bucket-stats_gen_test.go:817:2-817:28: `left, err = msgp.Skip(bts)`
$DIR/cmd/bucket-stats_gen_test.go:864:2-864:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/bucket-stats_gen_test.go:864:6-864:23: `.Encode(&buf, &v)`
$DIR/cmd/bucket-stats_gen_test.go:866:8-866:18: `.Msgsize()`
$DIR/cmd/bucket-stats_gen_test.go:867:8-867:14: `.Len()`
$DIR/cmd/bucket-stats_gen_test.go:872:13-872:31: `.Decode(&buf, &vn)`
$DIR/cmd/bucket-stats_gen_test.go:877:2-877:13: `buf.Reset()`
$DIR/cmd/bucket-stats_gen_test.go:877:5-877:13: `.Reset()`
$DIR/cmd/bucket-stats_gen_test.go:878:2-878:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/bucket-stats_gen_test.go:878:6-878:23: `.Encode(&buf, &v)`
$DIR/cmd/bucket-stats_gen_test.go:879:2-879:35: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/bucket-stats_gen_test.go:918:15-918:31: `.MarshalMsg(nil)`
$DIR/cmd/bucket-stats_gen_test.go:922:16-922:34: `.UnmarshalMsg(bts)`
$DIR/cmd/bucket-stats_gen_test.go:930:2-930:28: `left, err = msgp.Skip(bts)`
$DIR/cmd/bucket-stats_gen_test.go:977:2-977:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/bucket-stats_gen_test.go:977:6-977:23: `.Encode(&buf, &v)`
$DIR/cmd/bucket-stats_gen_test.go:979:8-979:18: `.Msgsize()`
$DIR/cmd/bucket-stats_gen_test.go:980:8-980:14: `.Len()`
$DIR/cmd/bucket-stats_gen_test.go:985:13-985:31: `.Decode(&buf, &vn)`
$DIR/cmd/bucket-stats_gen_test.go:990:2-990:13: `buf.Reset()`
$DIR/cmd/bucket-stats_gen_test.go:990:5-990:13: `.Reset()`
$DIR/cmd/bucket-stats_gen_test.go:991:2-991:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/bucket-stats_gen_test.go:991:6-991:23: `.Encode(&buf, &v)`
$DIR/cmd/bucket-stats_gen_test.go:992:2-992:35: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/common-main_test.go:47:3-66:5: `t.Run("", func(t *testing.T) {
			tmpfile, err := os.CreateTemp("", "testfile")
			if err != nil {
				t.Error(err)
			}
			tmpfile.WriteString(testCase.content)
			tmpfile.Sync()
			tmpfile.Close()

			value, err := readFromSecret(tmpfile.Name())
			if err != nil && !testCase.expectedErr {
				t.Error(err)
			}
			if err == nil && testCase.expectedErr {
				t.Error(errors.New("expected error, found success"))
			}
			if value != testCase.expectedValue {
				t.Errorf("Expected %s, got %s", testCase.expectedValue, value)
			}
		})`
$DIR/cmd/common-main_test.go:47:4-66:5: `.Run("", func(t *testing.T) {
			tmpfile, err := os.CreateTemp("", "testfile")
			if err != nil {
				t.Error(err)
			}
			tmpfile.WriteString(testCase.content)
			tmpfile.Sync()
			tmpfile.Close()

			value, err := readFromSecret(tmpfile.Name())
			if err != nil && !testCase.expectedErr {
				t.Error(err)
			}
			if err == nil && testCase.expectedErr {
				t.Error(errors.New("expected error, found success"))
			}
			if value != testCase.expectedValue {
				t.Errorf("Expected %s, got %s", testCase.expectedValue, value)
			}
		})`
$DIR/cmd/common-main_test.go:48:22-48:49: `.CreateTemp("", "testfile")`
$DIR/cmd/common-main_test.go:52:4-52:41: `tmpfile.WriteString(testCase.content)`
$DIR/cmd/common-main_test.go:52:11-52:41: `.WriteString(testCase.content)`
$DIR/cmd/common-main_test.go:53:4-53:18: `tmpfile.Sync()`
$DIR/cmd/common-main_test.go:53:11-53:18: `.Sync()`
$DIR/cmd/common-main_test.go:56:40-56:47: `.Name()`
$DIR/cmd/common-main_test.go:159:3-183:5: `t.Run("", func(t *testing.T) {
			tmpfile, err := os.CreateTemp("", "testfile")
			if err != nil {
				t.Error(err)
			}
			tmpfile.WriteString(testCase.content)
			tmpfile.Sync()
			tmpfile.Close()

			ekvs, err := minioEnvironFromFile(tmpfile.Name())
			if err != nil && !testCase.expectedErr {
				t.Error(err)
			}
			if err == nil && testCase.expectedErr {
				t.Error(errors.New("expected error, found success"))
			}

			if len(ekvs) != len(testCase.expectedEkvs) {
				t.Errorf("expected %v keys, got %v keys", len(testCase.expectedEkvs), len(ekvs))
			}

			if !reflect.DeepEqual(ekvs, testCase.expectedEkvs) {
				t.Errorf("expected %v, got %v", testCase.expectedEkvs, ekvs)
			}
		})`
$DIR/cmd/common-main_test.go:159:4-183:5: `.Run("", func(t *testing.T) {
			tmpfile, err := os.CreateTemp("", "testfile")
			if err != nil {
				t.Error(err)
			}
			tmpfile.WriteString(testCase.content)
			tmpfile.Sync()
			tmpfile.Close()

			ekvs, err := minioEnvironFromFile(tmpfile.Name())
			if err != nil && !testCase.expectedErr {
				t.Error(err)
			}
			if err == nil && testCase.expectedErr {
				t.Error(errors.New("expected error, found success"))
			}

			if len(ekvs) != len(testCase.expectedEkvs) {
				t.Errorf("expected %v keys, got %v keys", len(testCase.expectedEkvs), len(ekvs))
			}

			if !reflect.DeepEqual(ekvs, testCase.expectedEkvs) {
				t.Errorf("expected %v, got %v", testCase.expectedEkvs, ekvs)
			}
		})`
$DIR/cmd/common-main_test.go:160:22-160:49: `.CreateTemp("", "testfile")`
$DIR/cmd/common-main_test.go:164:4-164:41: `tmpfile.WriteString(testCase.content)`
$DIR/cmd/common-main_test.go:164:11-164:41: `.WriteString(testCase.content)`
$DIR/cmd/common-main_test.go:165:4-165:18: `tmpfile.Sync()`
$DIR/cmd/common-main_test.go:165:11-165:18: `.Sync()`
$DIR/cmd/common-main_test.go:168:45-168:52: `.Name()`
$DIR/cmd/common-main_test.go:180:15-180:54: `.DeepEqual(ekvs, testCase.expectedEkvs)`
$DIR/cmd/config-current_test.go:29:24-29:57: `.WithCancel(context.Background())`
$DIR/cmd/config-current_test.go:29:43-29:56: `.Background()`
$DIR/cmd/config-current_test.go:36:10-36:27: `.RemoveAll(fsDir)`
$DIR/cmd/config-current_test.go:47:2-47:51: `config.SetRegion(globalServerConfig, "us-west-1")`
$DIR/cmd/config-current_test.go:47:8-47:51: `.SetRegion(globalServerConfig, "us-west-1")`
$DIR/cmd/config-current_test.go:48:21-51:3: `.LookupSite(
		globalServerConfig[config.SiteSubSys][config.Default],
		globalServerConfig[config.RegionSubSys][config.Default],
	)`
$DIR/cmd/config-current_test.go:59:36-59:49: `.Background()`
$DIR/cmd/config-encrypted_test.go:40:23-40:57: `.EncryptData(cred1.String(), data)`
$DIR/cmd/config-encrypted_test.go:40:41-40:50: `.String()`
$DIR/cmd/config-encrypted_test.go:45:23-45:57: `.EncryptData(cred2.String(), data)`
$DIR/cmd/config-encrypted_test.go:45:41-45:50: `.String()`
$DIR/cmd/config-encrypted_test.go:61:3-74:5: `t.Run("", func(t *testing.T) {
			ddata, err := madmin.DecryptData(test.cred.String(), bytes.NewReader(test.edata))
			if err != nil && test.success {
				t.Errorf("Expected success, saw failure %v", err)
			}
			if err == nil && !test.success {
				t.Error("Expected failure, saw success")
			}
			if test.success {
				if !bytes.Equal(ddata, data) {
					t.Errorf("Expected %s, got %s", string(data), string(ddata))
				}
			}
		})`
$DIR/cmd/config-encrypted_test.go:61:4-74:5: `.Run("", func(t *testing.T) {
			ddata, err := madmin.DecryptData(test.cred.String(), bytes.NewReader(test.edata))
			if err != nil && test.success {
				t.Errorf("Expected success, saw failure %v", err)
			}
			if err == nil && !test.success {
				t.Error("Expected failure, saw success")
			}
			if test.success {
				if !bytes.Equal(ddata, data) {
					t.Errorf("Expected %s, got %s", string(data), string(ddata))
				}
			}
		})`
$DIR/cmd/config-encrypted_test.go:62:24-62:85: `.DecryptData(test.cred.String(), bytes.NewReader(test.edata))`
$DIR/cmd/config-encrypted_test.go:62:41-62:55: `.cred.String()`
$DIR/cmd/config-encrypted_test.go:62:62-62:84: `.NewReader(test.edata)`
$DIR/cmd/config-encrypted_test.go:70:14-70:33: `.Equal(ddata, data)`
$DIR/cmd/copy-part-range_test.go:43:28-43:56: `.GetOffsetLength(objectSize)`
$DIR/cmd/crossdomain-xml-handler_test.go:31:15-31:27: `.NewRouter()`
$DIR/cmd/crossdomain-xml-handler_test.go:31:27-31:43: `.SkipClean(true)`
$DIR/cmd/crossdomain-xml-handler_test.go:31:43-31:60: `.UseEncodedPath()`
$DIR/cmd/crossdomain-xml-handler_test.go:33:17-33:36: `.NewServer(handler)`
$DIR/cmd/crossdomain-xml-handler_test.go:35:19-35:55: `.Get(srv.URL + crossDomainXMLEntity)`
$DIR/cmd/data-scanner_test.go:33:46-33:59: `.Background()`
$DIR/cmd/data-scanner_test.go:38:2-38:24: `setObjectLayer(objAPI)`
$DIR/cmd/data-scanner_test.go:39:2-39:50: `globalBucketMetadataSys = NewBucketMetadataSys()`
$DIR/cmd/data-scanner_test.go:40:2-40:52: `globalBucketObjectLockSys = &BucketObjectLockSys{}`
$DIR/cmd/data-scanner_test.go:41:2-41:52: `globalBucketVersioningSys = &BucketVersioningSys{}`
$DIR/cmd/data-scanner_test.go:42:30-42:43: `.Background()`
$DIR/cmd/data-scanner_test.go:44:2-44:28: `es.workers.Store(&workers)`
$DIR/cmd/data-scanner_test.go:44:4-44:28: `.workers.Store(&workers)`
$DIR/cmd/data-scanner_test.go:45:2-45:24: `globalExpiryState = es`
$DIR/cmd/data-scanner_test.go:47:2-47:11: `wg.Add(1)`
$DIR/cmd/data-scanner_test.go:47:4-47:11: `.Add(1)`
$DIR/cmd/data-scanner_test.go:50:11-50:18: `.Done()`
$DIR/cmd/data-scanner_test.go:51:31-51:46: `.workers.Load()`
$DIR/cmd/data-scanner_test.go:54:5-54:45: `expired = append(expired, t.versions...)`
$DIR/cmd/data-scanner_test.go:69:19-69:31: `.Marshal(lc)`
$DIR/cmd/data-scanner_test.go:76:21-76:35: `.Marshal(vcfg)`
$DIR/cmd/data-scanner_test.go:83:13-83:19: `.Now()`
$DIR/cmd/data-scanner_test.go:94:2-94:43: `globalBucketMetadataSys.Set(bucket, meta)`
$DIR/cmd/data-scanner_test.go:94:25-94:43: `.Set(bucket, meta)`
$DIR/cmd/data-scanner_test.go:103:17-103:23: `.Now()`
$DIR/cmd/data-scanner_test.go:106:3-106:51: `uuids[i] = uuid.UUID([16]byte{15: uint8(i + 1)})`
$DIR/cmd/data-scanner_test.go:106:18-106:51: `.UUID([16]byte{15: uint8(i + 1)})`
$DIR/cmd/data-scanner_test.go:110:3-118:4: `fivs[i] = FileInfo{
			Volume:      bucket,
			Name:        obj,
			VersionID:   uuids[i].String(),
			IsLatest:    i == 0,
			ModTime:     modTime.Add(-1 * time.Duration(i) * time.Minute),
			Size:        1 << 10,
			NumVersions: 5,
		}`
$DIR/cmd/data-scanner_test.go:113:25-113:34: `.String()`
$DIR/cmd/data-scanner_test.go:115:24-115:65: `.Add(-1 * time.Duration(i) * time.Minute)`
$DIR/cmd/data-scanner_test.go:115:38-115:50: `.Duration(i)`
$DIR/cmd/data-scanner_test.go:123:3-123:53: `wants[i] = fi.ToObjectInfo(bucket, obj, versioned)`
$DIR/cmd/data-scanner_test.go:123:16-123:53: `.ToObjectInfo(bucket, obj, versioned)`
$DIR/cmd/data-scanner_test.go:125:19-125:86: `.applyNewerNoncurrentVersionLimit(context.TODO(), objAPI, fivs, es)`
$DIR/cmd/data-scanner_test.go:125:60-125:67: `.TODO()`
$DIR/cmd/data-scanner_test.go:134:2-134:19: `close(workers[0])`
$DIR/cmd/data-scanner_test.go:135:2-135:11: `wg.Wait()`
$DIR/cmd/data-scanner_test.go:135:4-135:11: `.Wait()`
$DIR/cmd/data-scanner_test.go:138:16-138:25: `.String()`
$DIR/cmd/data-scanner_test.go:138:35-138:44: `.String()`
$DIR/cmd/data-scanner_test.go:138:54-138:63: `.String()`
$DIR/cmd/data-usage-cache_gen_test.go:14:15-14:31: `.MarshalMsg(nil)`
$DIR/cmd/data-usage-cache_gen_test.go:18:16-18:34: `.UnmarshalMsg(bts)`
$DIR/cmd/data-usage-cache_gen_test.go:26:2-26:28: `left, err = msgp.Skip(bts)`
$DIR/cmd/data-usage-cache_gen_test.go:73:2-73:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/data-usage-cache_gen_test.go:73:6-73:23: `.Encode(&buf, &v)`
$DIR/cmd/data-usage-cache_gen_test.go:75:8-75:18: `.Msgsize()`
$DIR/cmd/data-usage-cache_gen_test.go:76:8-76:14: `.Len()`
$DIR/cmd/data-usage-cache_gen_test.go:81:13-81:31: `.Decode(&buf, &vn)`
$DIR/cmd/data-usage-cache_gen_test.go:86:2-86:13: `buf.Reset()`
$DIR/cmd/data-usage-cache_gen_test.go:86:5-86:13: `.Reset()`
$DIR/cmd/data-usage-cache_gen_test.go:87:2-87:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/data-usage-cache_gen_test.go:87:6-87:23: `.Encode(&buf, &v)`
$DIR/cmd/data-usage-cache_gen_test.go:88:2-88:35: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/data-usage-cache_gen_test.go:127:15-127:31: `.MarshalMsg(nil)`
$DIR/cmd/data-usage-cache_gen_test.go:131:16-131:34: `.UnmarshalMsg(bts)`
$DIR/cmd/data-usage-cache_gen_test.go:139:2-139:28: `left, err = msgp.Skip(bts)`
$DIR/cmd/data-usage-cache_gen_test.go:185:15-185:31: `.MarshalMsg(nil)`
$DIR/cmd/data-usage-cache_gen_test.go:189:16-189:34: `.UnmarshalMsg(bts)`
$DIR/cmd/data-usage-cache_gen_test.go:197:2-197:28: `left, err = msgp.Skip(bts)`
$DIR/cmd/data-usage-cache_gen_test.go:244:2-244:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/data-usage-cache_gen_test.go:244:6-244:23: `.Encode(&buf, &v)`
$DIR/cmd/data-usage-cache_gen_test.go:246:8-246:18: `.Msgsize()`
$DIR/cmd/data-usage-cache_gen_test.go:247:8-247:14: `.Len()`
$DIR/cmd/data-usage-cache_gen_test.go:252:13-252:31: `.Decode(&buf, &vn)`
$DIR/cmd/data-usage-cache_gen_test.go:257:2-257:13: `buf.Reset()`
$DIR/cmd/data-usage-cache_gen_test.go:257:5-257:13: `.Reset()`
$DIR/cmd/data-usage-cache_gen_test.go:258:2-258:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/data-usage-cache_gen_test.go:258:6-258:23: `.Encode(&buf, &v)`
$DIR/cmd/data-usage-cache_gen_test.go:259:2-259:35: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/data-usage-cache_gen_test.go:298:15-298:31: `.MarshalMsg(nil)`
$DIR/cmd/data-usage-cache_gen_test.go:302:16-302:34: `.UnmarshalMsg(bts)`
$DIR/cmd/data-usage-cache_gen_test.go:310:2-310:28: `left, err = msgp.Skip(bts)`
$DIR/cmd/data-usage-cache_gen_test.go:357:2-357:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/data-usage-cache_gen_test.go:357:6-357:23: `.Encode(&buf, &v)`
$DIR/cmd/data-usage-cache_gen_test.go:359:8-359:18: `.Msgsize()`
$DIR/cmd/data-usage-cache_gen_test.go:360:8-360:14: `.Len()`
$DIR/cmd/data-usage-cache_gen_test.go:365:13-365:31: `.Decode(&buf, &vn)`
$DIR/cmd/data-usage-cache_gen_test.go:370:2-370:13: `buf.Reset()`
$DIR/cmd/data-usage-cache_gen_test.go:370:5-370:13: `.Reset()`
$DIR/cmd/data-usage-cache_gen_test.go:371:2-371:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/data-usage-cache_gen_test.go:371:6-371:23: `.Encode(&buf, &v)`
$DIR/cmd/data-usage-cache_gen_test.go:372:2-372:35: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/data-usage-cache_gen_test.go:411:15-411:31: `.MarshalMsg(nil)`
$DIR/cmd/data-usage-cache_gen_test.go:415:16-415:34: `.UnmarshalMsg(bts)`
$DIR/cmd/data-usage-cache_gen_test.go:423:2-423:28: `left, err = msgp.Skip(bts)`
$DIR/cmd/data-usage-cache_gen_test.go:470:2-470:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/data-usage-cache_gen_test.go:470:6-470:23: `.Encode(&buf, &v)`
$DIR/cmd/data-usage-cache_gen_test.go:472:8-472:18: `.Msgsize()`
$DIR/cmd/data-usage-cache_gen_test.go:473:8-473:14: `.Len()`
$DIR/cmd/data-usage-cache_gen_test.go:478:13-478:31: `.Decode(&buf, &vn)`
$DIR/cmd/data-usage-cache_gen_test.go:483:2-483:13: `buf.Reset()`
$DIR/cmd/data-usage-cache_gen_test.go:483:5-483:13: `.Reset()`
$DIR/cmd/data-usage-cache_gen_test.go:484:2-484:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/data-usage-cache_gen_test.go:484:6-484:23: `.Encode(&buf, &v)`
$DIR/cmd/data-usage-cache_gen_test.go:485:2-485:35: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/data-usage-cache_gen_test.go:524:15-524:31: `.MarshalMsg(nil)`
$DIR/cmd/data-usage-cache_gen_test.go:528:16-528:34: `.UnmarshalMsg(bts)`
$DIR/cmd/data-usage-cache_gen_test.go:536:2-536:28: `left, err = msgp.Skip(bts)`
$DIR/cmd/data-usage-cache_gen_test.go:583:2-583:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/data-usage-cache_gen_test.go:583:6-583:23: `.Encode(&buf, &v)`
$DIR/cmd/data-usage-cache_gen_test.go:585:8-585:18: `.Msgsize()`
$DIR/cmd/data-usage-cache_gen_test.go:586:8-586:14: `.Len()`
$DIR/cmd/data-usage-cache_gen_test.go:591:13-591:31: `.Decode(&buf, &vn)`
$DIR/cmd/data-usage-cache_gen_test.go:596:2-596:13: `buf.Reset()`
$DIR/cmd/data-usage-cache_gen_test.go:596:5-596:13: `.Reset()`
$DIR/cmd/data-usage-cache_gen_test.go:597:2-597:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/data-usage-cache_gen_test.go:597:6-597:23: `.Encode(&buf, &v)`
$DIR/cmd/data-usage-cache_gen_test.go:598:2-598:35: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/data-usage-cache_gen_test.go:637:15-637:31: `.MarshalMsg(nil)`
$DIR/cmd/data-usage-cache_gen_test.go:641:16-641:34: `.UnmarshalMsg(bts)`
$DIR/cmd/data-usage-cache_gen_test.go:649:2-649:28: `left, err = msgp.Skip(bts)`
$DIR/cmd/data-usage-cache_gen_test.go:696:2-696:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/data-usage-cache_gen_test.go:696:6-696:23: `.Encode(&buf, &v)`
$DIR/cmd/data-usage-cache_gen_test.go:698:8-698:18: `.Msgsize()`
$DIR/cmd/data-usage-cache_gen_test.go:699:8-699:14: `.Len()`
$DIR/cmd/data-usage-cache_gen_test.go:704:13-704:31: `.Decode(&buf, &vn)`
$DIR/cmd/data-usage-cache_gen_test.go:709:2-709:13: `buf.Reset()`
$DIR/cmd/data-usage-cache_gen_test.go:709:5-709:13: `.Reset()`
$DIR/cmd/data-usage-cache_gen_test.go:710:2-710:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/data-usage-cache_gen_test.go:710:6-710:23: `.Encode(&buf, &v)`
$DIR/cmd/data-usage-cache_gen_test.go:711:2-711:35: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/data-usage-cache_gen_test.go:750:15-750:31: `.MarshalMsg(nil)`
$DIR/cmd/data-usage-cache_gen_test.go:754:16-754:34: `.UnmarshalMsg(bts)`
$DIR/cmd/data-usage-cache_gen_test.go:762:2-762:28: `left, err = msgp.Skip(bts)`
$DIR/cmd/data-usage-cache_gen_test.go:809:2-809:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/data-usage-cache_gen_test.go:809:6-809:23: `.Encode(&buf, &v)`
$DIR/cmd/data-usage-cache_gen_test.go:811:8-811:18: `.Msgsize()`
$DIR/cmd/data-usage-cache_gen_test.go:812:8-812:14: `.Len()`
$DIR/cmd/data-usage-cache_gen_test.go:817:13-817:31: `.Decode(&buf, &vn)`
$DIR/cmd/data-usage-cache_gen_test.go:822:2-822:13: `buf.Reset()`
$DIR/cmd/data-usage-cache_gen_test.go:822:5-822:13: `.Reset()`
$DIR/cmd/data-usage-cache_gen_test.go:823:2-823:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/data-usage-cache_gen_test.go:823:6-823:23: `.Encode(&buf, &v)`
$DIR/cmd/data-usage-cache_gen_test.go:824:2-824:35: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/data-usage-cache_gen_test.go:863:15-863:31: `.MarshalMsg(nil)`
$DIR/cmd/data-usage-cache_gen_test.go:867:16-867:34: `.UnmarshalMsg(bts)`
$DIR/cmd/data-usage-cache_gen_test.go:875:2-875:28: `left, err = msgp.Skip(bts)`
$DIR/cmd/data-usage-cache_gen_test.go:922:2-922:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/data-usage-cache_gen_test.go:922:6-922:23: `.Encode(&buf, &v)`
$DIR/cmd/data-usage-cache_gen_test.go:924:8-924:18: `.Msgsize()`
$DIR/cmd/data-usage-cache_gen_test.go:925:8-925:14: `.Len()`
$DIR/cmd/data-usage-cache_gen_test.go:930:13-930:31: `.Decode(&buf, &vn)`
$DIR/cmd/data-usage-cache_gen_test.go:935:2-935:13: `buf.Reset()`
$DIR/cmd/data-usage-cache_gen_test.go:935:5-935:13: `.Reset()`
$DIR/cmd/data-usage-cache_gen_test.go:936:2-936:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/data-usage-cache_gen_test.go:936:6-936:23: `.Encode(&buf, &v)`
$DIR/cmd/data-usage-cache_gen_test.go:937:2-937:35: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/data-usage-cache_gen_test.go:976:15-976:31: `.MarshalMsg(nil)`
$DIR/cmd/data-usage-cache_gen_test.go:980:16-980:34: `.UnmarshalMsg(bts)`
$DIR/cmd/data-usage-cache_gen_test.go:988:2-988:28: `left, err = msgp.Skip(bts)`
$DIR/cmd/data-usage-cache_gen_test.go:1035:2-1035:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/data-usage-cache_gen_test.go:1035:6-1035:23: `.Encode(&buf, &v)`
$DIR/cmd/data-usage-cache_gen_test.go:1037:8-1037:18: `.Msgsize()`
$DIR/cmd/data-usage-cache_gen_test.go:1038:8-1038:14: `.Len()`
$DIR/cmd/data-usage-cache_gen_test.go:1043:13-1043:31: `.Decode(&buf, &vn)`
$DIR/cmd/data-usage-cache_gen_test.go:1048:2-1048:13: `buf.Reset()`
$DIR/cmd/data-usage-cache_gen_test.go:1048:5-1048:13: `.Reset()`
$DIR/cmd/data-usage-cache_gen_test.go:1049:2-1049:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/data-usage-cache_gen_test.go:1049:6-1049:23: `.Encode(&buf, &v)`
$DIR/cmd/data-usage-cache_gen_test.go:1050:2-1050:35: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/data-usage-cache_gen_test.go:1089:15-1089:31: `.MarshalMsg(nil)`
$DIR/cmd/data-usage-cache_gen_test.go:1093:16-1093:34: `.UnmarshalMsg(bts)`
$DIR/cmd/data-usage-cache_gen_test.go:1101:2-1101:28: `left, err = msgp.Skip(bts)`
$DIR/cmd/data-usage-cache_gen_test.go:1148:2-1148:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/data-usage-cache_gen_test.go:1148:6-1148:23: `.Encode(&buf, &v)`
$DIR/cmd/data-usage-cache_gen_test.go:1150:8-1150:18: `.Msgsize()`
$DIR/cmd/data-usage-cache_gen_test.go:1151:8-1151:14: `.Len()`
$DIR/cmd/data-usage-cache_gen_test.go:1156:13-1156:31: `.Decode(&buf, &vn)`
$DIR/cmd/data-usage-cache_gen_test.go:1161:2-1161:13: `buf.Reset()`
$DIR/cmd/data-usage-cache_gen_test.go:1161:5-1161:13: `.Reset()`
$DIR/cmd/data-usage-cache_gen_test.go:1162:2-1162:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/data-usage-cache_gen_test.go:1162:6-1162:23: `.Encode(&buf, &v)`
$DIR/cmd/data-usage-cache_gen_test.go:1163:2-1163:35: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/data-usage-cache_gen_test.go:1202:15-1202:31: `.MarshalMsg(nil)`
$DIR/cmd/data-usage-cache_gen_test.go:1206:16-1206:34: `.UnmarshalMsg(bts)`
$DIR/cmd/data-usage-cache_gen_test.go:1214:2-1214:28: `left, err = msgp.Skip(bts)`
$DIR/cmd/data-usage-cache_gen_test.go:1261:2-1261:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/data-usage-cache_gen_test.go:1261:6-1261:23: `.Encode(&buf, &v)`
$DIR/cmd/data-usage-cache_gen_test.go:1263:8-1263:18: `.Msgsize()`
$DIR/cmd/data-usage-cache_gen_test.go:1264:8-1264:14: `.Len()`
$DIR/cmd/data-usage-cache_gen_test.go:1269:13-1269:31: `.Decode(&buf, &vn)`
$DIR/cmd/data-usage-cache_gen_test.go:1274:2-1274:13: `buf.Reset()`
$DIR/cmd/data-usage-cache_gen_test.go:1274:5-1274:13: `.Reset()`
$DIR/cmd/data-usage-cache_gen_test.go:1275:2-1275:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/data-usage-cache_gen_test.go:1275:6-1275:23: `.Encode(&buf, &v)`
$DIR/cmd/data-usage-cache_gen_test.go:1276:2-1276:35: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/data-usage-cache_gen_test.go:1315:15-1315:31: `.MarshalMsg(nil)`
$DIR/cmd/data-usage-cache_gen_test.go:1319:16-1319:34: `.UnmarshalMsg(bts)`
$DIR/cmd/data-usage-cache_gen_test.go:1327:2-1327:28: `left, err = msgp.Skip(bts)`
$DIR/cmd/data-usage-cache_gen_test.go:1374:2-1374:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/data-usage-cache_gen_test.go:1374:6-1374:23: `.Encode(&buf, &v)`
$DIR/cmd/data-usage-cache_gen_test.go:1376:8-1376:18: `.Msgsize()`
$DIR/cmd/data-usage-cache_gen_test.go:1377:8-1377:14: `.Len()`
$DIR/cmd/data-usage-cache_gen_test.go:1382:13-1382:31: `.Decode(&buf, &vn)`
$DIR/cmd/data-usage-cache_gen_test.go:1387:2-1387:13: `buf.Reset()`
$DIR/cmd/data-usage-cache_gen_test.go:1387:5-1387:13: `.Reset()`
$DIR/cmd/data-usage-cache_gen_test.go:1388:2-1388:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/data-usage-cache_gen_test.go:1388:6-1388:23: `.Encode(&buf, &v)`
$DIR/cmd/data-usage-cache_gen_test.go:1389:2-1389:35: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/data-usage-cache_test.go:52:3-71:5: `t.Run(fmt.Sprintf("Test-%d", i), func(t *testing.T) {
			var h sizeHistogram
			for _, sz := range test.sizes {
				h.add(sz)
			}
			got := h.toMap()
			exp := test.want
			// what is in exp is in got
			for k := range exp {
				if exp[k] != got[k] {
					t.Fatalf("interval %s: Expected %d values but got %d values\n", k, exp[k], got[k])
				}
			}
			// what is absent in exp is absent in got too
			for k := range got {
				if _, ok := exp[k]; !ok && got[k] > 0 {
					t.Fatalf("Unexpected interval: %s has value %d\n", k, got[k])
				}
			}
		})`
$DIR/cmd/data-usage-cache_test.go:52:4-71:5: `.Run(fmt.Sprintf("Test-%d", i), func(t *testing.T) {
			var h sizeHistogram
			for _, sz := range test.sizes {
				h.add(sz)
			}
			got := h.toMap()
			exp := test.want
			// what is in exp is in got
			for k := range exp {
				if exp[k] != got[k] {
					t.Fatalf("interval %s: Expected %d values but got %d values\n", k, exp[k], got[k])
				}
			}
			// what is absent in exp is absent in got too
			for k := range got {
				if _, ok := exp[k]; !ok && got[k] > 0 {
					t.Fatalf("Unexpected interval: %s has value %d\n", k, got[k])
				}
			}
		})`
$DIR/cmd/data-usage-cache_test.go:52:12-52:34: `.Sprintf("Test-%d", i)`
$DIR/cmd/data-usage-cache_test.go:55:5-55:14: `h.add(sz)`
$DIR/cmd/data-usage-cache_test.go:55:6-55:14: `.add(sz)`
$DIR/cmd/data-usage-cache_test.go:57:12-57:20: `.toMap()`
$DIR/cmd/data-usage-cache_test.go:90:3-96:5: `t.Run(fmt.Sprintf("test-%d", i), func(t *testing.T) {
			var got sizeHistogram
			got.mergeV1(test.v)
			if got != test.want {
				t.Fatalf("Expected %v but got %v", test.want, got)
			}
		})`
$DIR/cmd/data-usage-cache_test.go:90:4-96:5: `.Run(fmt.Sprintf("test-%d", i), func(t *testing.T) {
			var got sizeHistogram
			got.mergeV1(test.v)
			if got != test.want {
				t.Fatalf("Expected %v but got %v", test.want, got)
			}
		})`
$DIR/cmd/data-usage-cache_test.go:90:12-90:34: `.Sprintf("test-%d", i)`
$DIR/cmd/data-usage-cache_test.go:92:4-92:23: `got.mergeV1(test.v)`
$DIR/cmd/data-usage-cache_test.go:92:7-92:23: `.mergeV1(test.v)`
$DIR/cmd/data-usage_test.go:37:11-37:21: `.TempDir()`
$DIR/cmd/data-usage_test.go:38:2-38:25: `const bucket = "bucket"`
$DIR/cmd/data-usage_test.go:49:2-49:46: `createUsageTestFiles(t, base, bucket, files)`
$DIR/cmd/data-usage_test.go:54:4-54:31: `s, err = os.Stat(item.Path)`
$DIR/cmd/data-usage_test.go:54:15-54:31: `.Stat(item.Path)`
$DIR/cmd/data-usage_test.go:58:4-58:30: `sizeS.totalSize = s.Size()`
$DIR/cmd/data-usage_test.go:58:23-58:30: `.Size()`
$DIR/cmd/data-usage_test.go:59:4-59:20: `sizeS.versions++`
$DIR/cmd/data-usage_test.go:67:36-67:49: `.Background()`
$DIR/cmd/data-usage_test.go:110:12-110:33: `.Join(bucket, w.path)`
$DIR/cmd/data-usage_test.go:111:3-137:5: `t.Run(p, func(t *testing.T) {
			e := got.find(p)
			if w.isNil {
				if e != nil {
					t.Error("want nil, got", e)
				}
				return
			}
			if e == nil {
				t.Fatal("got nil result")
			}
			if w.flatten {
				*e = got.flatten(*e)
			}
			if e.Size != int64(w.size) {
				t.Error("got size", e.Size, "want", w.size)
			}
			if e.Objects != uint64(w.objs) {
				t.Error("got objects", e.Objects, "want", w.objs)
			}
			if e.Versions != uint64(w.objs) {
				t.Error("got versions", e.Versions, "want", w.objs)
			}
			if e.ObjSizes != w.oSizes {
				t.Error("got histogram", e.ObjSizes, "want", w.oSizes)
			}
		})`
$DIR/cmd/data-usage_test.go:111:4-137:5: `.Run(p, func(t *testing.T) {
			e := got.find(p)
			if w.isNil {
				if e != nil {
					t.Error("want nil, got", e)
				}
				return
			}
			if e == nil {
				t.Fatal("got nil result")
			}
			if w.flatten {
				*e = got.flatten(*e)
			}
			if e.Size != int64(w.size) {
				t.Error("got size", e.Size, "want", w.size)
			}
			if e.Objects != uint64(w.objs) {
				t.Error("got objects", e.Objects, "want", w.objs)
			}
			if e.Versions != uint64(w.objs) {
				t.Error("got versions", e.Versions, "want", w.objs)
			}
			if e.ObjSizes != w.oSizes {
				t.Error("got histogram", e.ObjSizes, "want", w.oSizes)
			}
		})`
$DIR/cmd/data-usage_test.go:112:12-112:20: `.find(p)`
$DIR/cmd/data-usage_test.go:123:5-123:25: `*e = got.flatten(*e)`
$DIR/cmd/data-usage_test.go:123:13-123:25: `.flatten(*e)`
$DIR/cmd/data-usage_test.go:140:2-169:3: `files = []usageTestFile{
		{
			name: "newfolder/afile",
			size: 4,
		},
		{
			name: "newfolder/anotherone",
			size: 1,
		},
		{
			name: "newfolder/anemptyone",
			size: 0,
		},
		{
			name: "dir1/fileindir1",
			size: 20000,
		},
		{
			name: "dir1/dirc/fileindirc",
			size: 20000,
		},
		{
			name: "rootfile3",
			size: 1000,
		},
		{
			name: "dir1/dira/dirasub/fileindira2",
			size: 200,
		},
	}`
$DIR/cmd/data-usage_test.go:170:2-170:46: `createUsageTestFiles(t, base, bucket, files)`
$DIR/cmd/data-usage_test.go:171:2-171:77: `err = os.RemoveAll(filepath.Join(base, bucket, "dir1/dira/dirasub/dcfile"))`
$DIR/cmd/data-usage_test.go:171:10-171:77: `.RemoveAll(filepath.Join(base, bucket, "dir1/dira/dirasub/dcfile"))`
$DIR/cmd/data-usage_test.go:171:29-171:76: `.Join(base, bucket, "dir1/dira/dirasub/dcfile")`
$DIR/cmd/data-usage_test.go:177:3-177:87: `got, err = scanDataFolder(context.Background(), nil, base, got, getSize, 0, weSleep)`
$DIR/cmd/data-usage_test.go:177:36-177:49: `.Background()`
$DIR/cmd/data-usage_test.go:178:3-178:23: `got.Info.NextCycle++`
$DIR/cmd/data-usage_test.go:184:2-215:3: `want = []struct {
		path       string
		isNil      bool
		size, objs int
		flatten    bool
		oSizes     sizeHistogram
	}{
		{
			path:    "/",
			size:    363515,
			flatten: true,
			objs:    14,
			oSizes:  sizeHistogram{0: 7, 1: 5, 2: 2},
		},
		{
			path:    "/dir1",
			size:    342210,
			objs:    7,
			flatten: false,
			oSizes:  sizeHistogram{0: 2, 1: 3, 2: 2},
		},
		{
			path:   "/newfolder",
			size:   5,
			objs:   3,
			oSizes: sizeHistogram{0: 3},
		},
		{
			path:  "/nonexistying",
			isNil: true,
		},
	}`
$DIR/cmd/data-usage_test.go:218:12-218:33: `.Join(bucket, w.path)`
$DIR/cmd/data-usage_test.go:219:3-245:5: `t.Run(p, func(t *testing.T) {
			e := got.find(p)
			if w.isNil {
				if e != nil {
					t.Error("want nil, got", e)
				}
				return
			}
			if e == nil {
				t.Fatal("got nil result")
			}
			if w.flatten {
				*e = got.flatten(*e)
			}
			if e.Size != int64(w.size) {
				t.Error("got size", e.Size, "want", w.size)
			}
			if e.Objects != uint64(w.objs) {
				t.Error("got objects", e.Objects, "want", w.objs)
			}
			if e.Versions != uint64(w.objs) {
				t.Error("got versions", e.Versions, "want", w.objs)
			}
			if e.ObjSizes != w.oSizes {
				t.Error("got histogram", e.ObjSizes, "want", w.oSizes)
			}
		})`
$DIR/cmd/data-usage_test.go:219:4-245:5: `.Run(p, func(t *testing.T) {
			e := got.find(p)
			if w.isNil {
				if e != nil {
					t.Error("want nil, got", e)
				}
				return
			}
			if e == nil {
				t.Fatal("got nil result")
			}
			if w.flatten {
				*e = got.flatten(*e)
			}
			if e.Size != int64(w.size) {
				t.Error("got size", e.Size, "want", w.size)
			}
			if e.Objects != uint64(w.objs) {
				t.Error("got objects", e.Objects, "want", w.objs)
			}
			if e.Versions != uint64(w.objs) {
				t.Error("got versions", e.Versions, "want", w.objs)
			}
			if e.ObjSizes != w.oSizes {
				t.Error("got histogram", e.ObjSizes, "want", w.oSizes)
			}
		})`
$DIR/cmd/data-usage_test.go:220:12-220:20: `.find(p)`
$DIR/cmd/data-usage_test.go:231:5-231:25: `*e = got.flatten(*e)`
$DIR/cmd/data-usage_test.go:231:13-231:25: `.flatten(*e)`
$DIR/cmd/data-usage_test.go:250:11-250:21: `.TempDir()`
$DIR/cmd/data-usage_test.go:251:2-251:29: `scannerSleeper.Update(0, 0)`
$DIR/cmd/data-usage_test.go:251:16-251:29: `.Update(0, 0)`
$DIR/cmd/data-usage_test.go:262:2-262:42: `createUsageTestFiles(t, base, "", files)`
$DIR/cmd/data-usage_test.go:263:2-263:24: `const foldersBelow = 3`
$DIR/cmd/data-usage_test.go:264:2-264:55: `const filesBelowT = dataScannerCompactLeastObject / 2`
$DIR/cmd/data-usage_test.go:265:2-265:53: `const filesAboveT = dataScannerCompactAtFolders + 1`
$DIR/cmd/data-usage_test.go:266:2-266:59: `const expectSize = foldersBelow*filesBelowT + filesAboveT`
$DIR/cmd/data-usage_test.go:268:2-268:85: `generateUsageTestFiles(t, base, "bucket/dirwithalot", foldersBelow, filesBelowT, 1)`
$DIR/cmd/data-usage_test.go:269:2-269:78: `generateUsageTestFiles(t, base, "bucket/dirwithevenmore", filesAboveT, 1, 1)`
$DIR/cmd/data-usage_test.go:274:4-274:31: `s, err = os.Stat(item.Path)`
$DIR/cmd/data-usage_test.go:274:15-274:31: `.Stat(item.Path)`
$DIR/cmd/data-usage_test.go:278:4-278:30: `sizeS.totalSize = s.Size()`
$DIR/cmd/data-usage_test.go:278:23-278:30: `.Size()`
$DIR/cmd/data-usage_test.go:279:4-279:20: `sizeS.versions++`
$DIR/cmd/data-usage_test.go:287:36-287:49: `.Background()`
$DIR/cmd/data-usage_test.go:291:8-291:15: `.root()`
$DIR/cmd/data-usage_test.go:353:3-381:5: `t.Run(w.path, func(t *testing.T) {
			e := got.find(w.path)
			if w.path == "flat" {
				f := got.flatten(*got.root())
				e = &f
			}
			if w.isNil {
				if e != nil {
					t.Error("want nil, got", e)
				}
				return
			}
			if e == nil {
				t.Fatal("got nil result")
				return
			}
			if e.Size != int64(w.size) {
				t.Error("got size", e.Size, "want", w.size)
			}
			if e.Objects != uint64(w.objs) {
				t.Error("got objects", e.Objects, "want", w.objs)
			}
			if e.Versions != uint64(w.objs) {
				t.Error("got versions", e.Versions, "want", w.objs)
			}
			if e.ObjSizes != w.oSizes {
				t.Error("got histogram", e.ObjSizes, "want", w.oSizes)
			}
		})`
$DIR/cmd/data-usage_test.go:353:4-381:5: `.Run(w.path, func(t *testing.T) {
			e := got.find(w.path)
			if w.path == "flat" {
				f := got.flatten(*got.root())
				e = &f
			}
			if w.isNil {
				if e != nil {
					t.Error("want nil, got", e)
				}
				return
			}
			if e == nil {
				t.Fatal("got nil result")
				return
			}
			if e.Size != int64(w.size) {
				t.Error("got size", e.Size, "want", w.size)
			}
			if e.Objects != uint64(w.objs) {
				t.Error("got objects", e.Objects, "want", w.objs)
			}
			if e.Versions != uint64(w.objs) {
				t.Error("got versions", e.Versions, "want", w.objs)
			}
			if e.ObjSizes != w.oSizes {
				t.Error("got histogram", e.ObjSizes, "want", w.oSizes)
			}
		})`
$DIR/cmd/data-usage_test.go:354:12-354:25: `.find(w.path)`
$DIR/cmd/data-usage_test.go:356:13-356:34: `.flatten(*got.root())`
$DIR/cmd/data-usage_test.go:356:26-356:33: `.root()`
$DIR/cmd/data-usage_test.go:357:5-357:11: `e = &f`
$DIR/cmd/data-usage_test.go:384:2-413:3: `files = []usageTestFile{
		{
			name: "bucket/newfolder/afile",
			size: 4,
		},
		{
			name: "bucket/newfolder/anotherone",
			size: 1,
		},
		{
			name: "bucket/newfolder/anemptyone",
			size: 0,
		},
		{
			name: "bucket/dir1/fileindir1",
			size: 20000,
		},
		{
			name: "bucket/dir1/dirc/fileindirc",
			size: 20000,
		},
		{
			name: "bucket/rootfile3",
			size: 1000,
		},
		{
			name: "bucket/dir1/dira/dirasub/fileindira2",
			size: 200,
		},
	}`
$DIR/cmd/data-usage_test.go:415:2-415:42: `createUsageTestFiles(t, base, "", files)`
$DIR/cmd/data-usage_test.go:416:2-416:76: `err = os.RemoveAll(filepath.Join(base, "bucket/dir1/dira/dirasub/dcfile"))`
$DIR/cmd/data-usage_test.go:416:10-416:76: `.RemoveAll(filepath.Join(base, "bucket/dir1/dira/dirasub/dcfile"))`
$DIR/cmd/data-usage_test.go:416:29-416:75: `.Join(base, "bucket/dir1/dira/dirasub/dcfile")`
$DIR/cmd/data-usage_test.go:422:3-422:87: `got, err = scanDataFolder(context.Background(), nil, base, got, getSize, 0, weSleep)`
$DIR/cmd/data-usage_test.go:422:36-422:49: `.Background()`
$DIR/cmd/data-usage_test.go:423:3-423:23: `got.Info.NextCycle++`
$DIR/cmd/data-usage_test.go:429:2-468:3: `want = []struct {
		path       string
		isNil      bool
		size, objs int
		oSizes     sizeHistogram
	}{
		{
			path:   "flat",
			size:   363515 + expectSize,
			objs:   14 + expectSize,
			oSizes: sizeHistogram{0: 7 + expectSize, 1: 5, 2: 2},
		},
		{
			path:   "bucket/dir1",
			size:   342210,
			objs:   7,
			oSizes: sizeHistogram{0: 2, 1: 3, 2: 2},
		},
		{
			path:   "bucket/",
			size:   21000,
			objs:   3,
			oSizes: sizeHistogram{0: 1, 1: 2},
		},
		{
			path:   "bucket/newfolder",
			size:   5,
			objs:   3,
			oSizes: sizeHistogram{0: 3},
		},
		{
			// Compacted into bucket/dir1
			path:  "bucket/dir1/dira",
			isNil: true,
		},
		{
			path:  "bucket/nonexistying",
			isNil: true,
		},
	}`
$DIR/cmd/data-usage_test.go:471:3-499:5: `t.Run(w.path, func(t *testing.T) {
			e := got.find(w.path)
			if w.path == "flat" {
				f := got.flatten(*got.root())
				e = &f
			}
			if w.isNil {
				if e != nil {
					t.Error("want nil, got", e)
				}
				return
			}
			if e == nil {
				t.Error("got nil result")
				return
			}
			if e.Size != int64(w.size) {
				t.Error("got size", e.Size, "want", w.size)
			}
			if e.Objects != uint64(w.objs) {
				t.Error("got objects", e.Objects, "want", w.objs)
			}
			if e.Versions != uint64(w.objs) {
				t.Error("got versions", e.Versions, "want", w.objs)
			}
			if e.ObjSizes != w.oSizes {
				t.Error("got histogram", e.ObjSizes, "want", w.oSizes)
			}
		})`
$DIR/cmd/data-usage_test.go:471:4-499:5: `.Run(w.path, func(t *testing.T) {
			e := got.find(w.path)
			if w.path == "flat" {
				f := got.flatten(*got.root())
				e = &f
			}
			if w.isNil {
				if e != nil {
					t.Error("want nil, got", e)
				}
				return
			}
			if e == nil {
				t.Error("got nil result")
				return
			}
			if e.Size != int64(w.size) {
				t.Error("got size", e.Size, "want", w.size)
			}
			if e.Objects != uint64(w.objs) {
				t.Error("got objects", e.Objects, "want", w.objs)
			}
			if e.Versions != uint64(w.objs) {
				t.Error("got versions", e.Versions, "want", w.objs)
			}
			if e.ObjSizes != w.oSizes {
				t.Error("got histogram", e.ObjSizes, "want", w.oSizes)
			}
		})`
$DIR/cmd/data-usage_test.go:472:12-472:25: `.find(w.path)`
$DIR/cmd/data-usage_test.go:474:13-474:34: `.flatten(*got.root())`
$DIR/cmd/data-usage_test.go:474:26-474:33: `.root()`
$DIR/cmd/data-usage_test.go:475:5-475:11: `e = &f`
$DIR/cmd/data-usage_test.go:536:11-536:21: `.TempDir()`
$DIR/cmd/data-usage_test.go:537:2-537:26: `const bucket = "abucket"`
$DIR/cmd/data-usage_test.go:555:2-555:46: `createUsageTestFiles(t, base, bucket, files)`
$DIR/cmd/data-usage_test.go:560:4-560:31: `s, err = os.Stat(item.Path)`
$DIR/cmd/data-usage_test.go:560:15-560:31: `.Stat(item.Path)`
$DIR/cmd/data-usage_test.go:564:4-564:20: `sizeS.versions++`
$DIR/cmd/data-usage_test.go:565:4-565:30: `sizeS.totalSize = s.Size()`
$DIR/cmd/data-usage_test.go:565:23-565:30: `.Size()`
$DIR/cmd/data-usage_test.go:571:37-571:50: `.Background()`
$DIR/cmd/data-usage_test.go:575:11-575:32: `.find("abucket/dir2")`
$DIR/cmd/data-usage_test.go:576:2-586:3: `e.ReplicationStats = &replicationAllStats{
		Targets: map[string]replicationStats{
			"arn": {
				PendingSize:    1,
				ReplicatedSize: 2,
				FailedSize:     3,
				FailedCount:    5,
				PendingCount:   6,
			},
		},
	}`
$DIR/cmd/data-usage_test.go:587:2-587:38: `want.replace("abucket/dir2", "", *e)`
$DIR/cmd/data-usage_test.go:587:6-587:38: `.replace("abucket/dir2", "", *e)`
$DIR/cmd/data-usage_test.go:589:2-589:30: `err = want.serializeTo(&buf)`
$DIR/cmd/data-usage_test.go:589:12-589:30: `.serializeTo(&buf)`
$DIR/cmd/data-usage_test.go:595:2-595:29: `err = got.deserialize(&buf)`
$DIR/cmd/data-usage_test.go:595:11-595:29: `.deserialize(&buf)`
$DIR/cmd/data-usage_test.go:599:8-599:33: `.Info.LastUpdate.IsZero()`
$DIR/cmd/data-usage_test.go:603:10-603:53: `.Info.LastUpdate.Equal(got.Info.LastUpdate)`
$DIR/cmd/dummy-data-generator_test.go:117:13-117:24: `.ReadAll(r)`
$DIR/cmd/dummy-data-generator_test.go:126:2-126:45: `checkEq(readAll(NewDummyDataGen(0, 0)), "")`
$DIR/cmd/dummy-data-generator_test.go:128:2-128:95: `checkEq(readAll(NewDummyDataGen(10, 0)), readAll(NewDummyDataGen(10, int64(len(alphabets)))))`
$DIR/cmd/dummy-data-generator_test.go:130:2-130:109: `checkEq(readAll(NewDummyDataGen(100, 0)), readAll(NewDummyDataGen(50, 0))+readAll(NewDummyDataGen(50, 50)))`
$DIR/cmd/dummy-data-generator_test.go:133:2-133:34: `r.Seek(int64(len(alphabets)), 0)`
$DIR/cmd/dummy-data-generator_test.go:133:3-133:34: `.Seek(int64(len(alphabets)), 0)`
$DIR/cmd/dummy-data-generator_test.go:166:14-166:39: `.NewReader([]byte("abc"))`
$DIR/cmd/dummy-data-generator_test.go:167:14-167:39: `.NewReader([]byte("abc"))`
$DIR/cmd/dummy-data-generator_test.go:175:14-175:39: `.NewReader([]byte("abc"))`
$DIR/cmd/dummy-data-generator_test.go:176:14-176:40: `.NewReader([]byte("abcd"))`
$DIR/cmd/dynamic-timeouts_test.go:31:20-31:30: `.Timeout()`
$DIR/cmd/dynamic-timeouts_test.go:34:3-34:23: `timeout.LogFailure()`
$DIR/cmd/dynamic-timeouts_test.go:34:10-34:23: `.LogFailure()`
$DIR/cmd/dynamic-timeouts_test.go:37:21-37:31: `.Timeout()`
$DIR/cmd/dynamic-timeouts_test.go:47:20-47:30: `.Timeout()`
$DIR/cmd/dynamic-timeouts_test.go:50:3-50:23: `timeout.LogFailure()`
$DIR/cmd/dynamic-timeouts_test.go:50:10-50:23: `.LogFailure()`
$DIR/cmd/dynamic-timeouts_test.go:53:21-53:31: `.Timeout()`
$DIR/cmd/dynamic-timeouts_test.go:56:3-56:23: `timeout.LogFailure()`
$DIR/cmd/dynamic-timeouts_test.go:56:10-56:23: `.LogFailure()`
$DIR/cmd/dynamic-timeouts_test.go:59:26-59:36: `.Timeout()`
$DIR/cmd/dynamic-timeouts_test.go:69:20-69:30: `.Timeout()`
$DIR/cmd/dynamic-timeouts_test.go:72:3-72:39: `timeout.LogSuccess(20 * time.Second)`
$DIR/cmd/dynamic-timeouts_test.go:72:10-72:39: `.LogSuccess(20 * time.Second)`
$DIR/cmd/dynamic-timeouts_test.go:75:21-75:31: `.Timeout()`
$DIR/cmd/dynamic-timeouts_test.go:85:20-85:30: `.Timeout()`
$DIR/cmd/dynamic-timeouts_test.go:88:3-88:39: `timeout.LogSuccess(20 * time.Second)`
$DIR/cmd/dynamic-timeouts_test.go:88:10-88:39: `.LogSuccess(20 * time.Second)`
$DIR/cmd/dynamic-timeouts_test.go:91:21-91:31: `.Timeout()`
$DIR/cmd/dynamic-timeouts_test.go:94:3-94:39: `timeout.LogSuccess(20 * time.Second)`
$DIR/cmd/dynamic-timeouts_test.go:94:10-94:39: `.LogSuccess(20 * time.Second)`
$DIR/cmd/dynamic-timeouts_test.go:97:26-97:36: `.Timeout()`
$DIR/cmd/dynamic-timeouts_test.go:107:20-107:30: `.Timeout()`
$DIR/cmd/dynamic-timeouts_test.go:109:2-109:41: `const successTimeout = 20 * time.Second`
$DIR/cmd/dynamic-timeouts_test.go:112:4-112:38: `timeout.LogSuccess(successTimeout)`
$DIR/cmd/dynamic-timeouts_test.go:112:11-112:38: `.LogSuccess(successTimeout)`
$DIR/cmd/dynamic-timeouts_test.go:116:21-116:31: `.Timeout()`
$DIR/cmd/dynamic-timeouts_test.go:127:25-127:39: `.GOMAXPROCS(0)`
$DIR/cmd/dynamic-timeouts_test.go:128:3-128:12: `wg.Add(1)`
$DIR/cmd/dynamic-timeouts_test.go:128:5-128:12: `.Add(1)`
$DIR/cmd/dynamic-timeouts_test.go:129:14-129:44: `.New(rand.NewSource(int64(i)))`
$DIR/cmd/dynamic-timeouts_test.go:129:23-129:43: `.NewSource(int64(i))`
$DIR/cmd/dynamic-timeouts_test.go:131:12-131:19: `.Done()`
$DIR/cmd/dynamic-timeouts_test.go:134:6-134:77: `timeout.LogSuccess(time.Duration(float64(time.Second) * rng.Float64()))`
$DIR/cmd/dynamic-timeouts_test.go:134:13-134:77: `.LogSuccess(time.Duration(float64(time.Second) * rng.Float64()))`
$DIR/cmd/dynamic-timeouts_test.go:134:29-134:76: `.Duration(float64(time.Second) * rng.Float64())`
$DIR/cmd/dynamic-timeouts_test.go:134:65-134:75: `.Float64()`
$DIR/cmd/dynamic-timeouts_test.go:136:18-136:28: `.Timeout()`
$DIR/cmd/dynamic-timeouts_test.go:138:6-138:15: `panic(to)`
$DIR/cmd/dynamic-timeouts_test.go:147:2-147:34: `const minimum = 30 * time.Second`
$DIR/cmd/dynamic-timeouts_test.go:150:20-150:30: `.Timeout()`
$DIR/cmd/dynamic-timeouts_test.go:152:2-152:41: `const successTimeout = 20 * time.Second`
$DIR/cmd/dynamic-timeouts_test.go:155:4-155:38: `timeout.LogSuccess(successTimeout)`
$DIR/cmd/dynamic-timeouts_test.go:155:11-155:38: `.LogSuccess(successTimeout)`
$DIR/cmd/dynamic-timeouts_test.go:159:21-159:31: `.Timeout()`
$DIR/cmd/dynamic-timeouts_test.go:188:2-188:14: `rand.Seed(0)`
$DIR/cmd/dynamic-timeouts_test.go:188:6-188:14: `.Seed(0)`
$DIR/cmd/dynamic-timeouts_test.go:190:20-190:30: `.Timeout()`
$DIR/cmd/dynamic-timeouts_test.go:193:3-193:56: `testDynamicTimeoutAdjust(t, timeout, rand.ExpFloat64)`
$DIR/cmd/dynamic-timeouts_test.go:196:21-196:31: `.Timeout()`
$DIR/cmd/dynamic-timeouts_test.go:205:2-205:14: `rand.Seed(0)`
$DIR/cmd/dynamic-timeouts_test.go:205:6-205:14: `.Seed(0)`
$DIR/cmd/dynamic-timeouts_test.go:207:20-207:30: `.Timeout()`
$DIR/cmd/dynamic-timeouts_test.go:210:3-212:5: `testDynamicTimeoutAdjust(t, timeout, func() float64 {
			return 1.0 + rand.NormFloat64()
		})`
$DIR/cmd/dynamic-timeouts_test.go:211:21-211:35: `.NormFloat64()`
$DIR/cmd/dynamic-timeouts_test.go:215:21-215:31: `.Timeout()`
$DIR/cmd/encryption-v1_test.go:58:26-58:44: `globalIsTLS = flag`
$DIR/cmd/encryption-v1_test.go:59:2-59:20: `globalIsTLS = true`
$DIR/cmd/encryption-v1_test.go:61:19-61:47: `.NewReader(make([]byte, 64))`
$DIR/cmd/encryption-v1_test.go:64:4-64:24: `req.Header.Set(k, v)`
$DIR/cmd/encryption-v1_test.go:64:7-64:24: `.Header.Set(k, v)`
$DIR/cmd/encryption-v1_test.go:128:29-128:64: `.IsEncrypted(test.info.UserDefined)`
$DIR/cmd/encryption-v1_test.go:243:66-243:88: `.GetDecryptedRange(rs)`
$DIR/cmd/encryption-v1_test.go:271:15-271:40: `.EncryptedSize(uint64(s))`
$DIR/cmd/encryption-v1_test.go:280:5-280:36: `delete(m, crypto.MetaMultipart)`
$DIR/cmd/encryption-v1_test.go:311:35-311:61: `.oi.GetDecryptedRange(nil)`
$DIR/cmd/encryption-v1_test.go:322:35-322:85: `.oi.GetDecryptedRange(&HTTPRangeSpec{false, 0, 9})`
$DIR/cmd/encryption-v1_test.go:328:5-328:27: `rLen = test.decSz + 32`
$DIR/cmd/encryption-v1_test.go:338:35-338:97: `.oi.GetDecryptedRange(&HTTPRangeSpec{false, kb32, 3*kb32 - 1})`
$DIR/cmd/encryption-v1_test.go:344:5-344:52: `rLen = (pkgSz + 32) + (test.decSz - pkgSz + 32)`
$DIR/cmd/encryption-v1_test.go:353:35-353:101: `.oi.GetDecryptedRange(&HTTPRangeSpec{false, 3 * kb32, 5*kb32 - 1})`
$DIR/cmd/encryption-v1_test.go:359:5-359:54: `rLen = (pkgSz + 32) + (test.decSz - pkgSz + 32*2)`
$DIR/cmd/encryption-v1_test.go:375:5-375:20: `r[i].Number = i`
$DIR/cmd/encryption-v1_test.go:376:5-376:30: `r[i].Size = getEncSize(s)`
$DIR/cmd/encryption-v1_test.go:377:5-377:21: `sum += r[i].Size`
$DIR/cmd/encryption-v1_test.go:389:5-389:21: `a = append(a, k)`
$DIR/cmd/encryption-v1_test.go:399:5-399:13: `sum += i`
$DIR/cmd/encryption-v1_test.go:406:5-406:18: `sum += i.Size`
$DIR/cmd/encryption-v1_test.go:434:4-434:29: `skipLen = oSize - readLen`
$DIR/cmd/encryption-v1_test.go:448:5-448:21: `readStart = true`
$DIR/cmd/encryption-v1_test.go:450:5-450:41: `partOffset = skipLen - cumulativeSum`
$DIR/cmd/encryption-v1_test.go:454:5-454:36: `sn = uint32(partOffset / pkgSz)`
$DIR/cmd/encryption-v1_test.go:455:5-455:30: `skip = partOffset % pkgSz`
$DIR/cmd/encryption-v1_test.go:456:5-456:11: `ps = i`
$DIR/cmd/encryption-v1_test.go:457:5-457:48: `o = cumulativeEncSum + int64(sn)*(pkgSz+32)`
$DIR/cmd/encryption-v1_test.go:459:5-459:42: `partDarePkgOffset = partOffset - skip`
$DIR/cmd/encryption-v1_test.go:465:6-465:32: `toRead -= currentPartBytes`
$DIR/cmd/encryption-v1_test.go:466:6-466:43: `l += getEncSize(currentPartDareBytes)`
$DIR/cmd/encryption-v1_test.go:477:7-477:25: `lbPkgEndOffset = v`
$DIR/cmd/encryption-v1_test.go:482:6-482:57: `l += getEncSize(currentPartDareBytes - bytesToDrop)`
$DIR/cmd/encryption-v1_test.go:487:4-487:22: `cumulativeSum += v`
$DIR/cmd/encryption-v1_test.go:488:4-488:37: `cumulativeEncSum += getEncSize(v)`
$DIR/cmd/encryption-v1_test.go:496:35-496:61: `.oi.GetDecryptedRange(nil)`
$DIR/cmd/encryption-v1_test.go:511:35-511:111: `.oi.GetDecryptedRange(&HTTPRangeSpec{false, skipLen, skipLen + readLen - 1})`
$DIR/cmd/encryption-v1_test.go:530:35-530:92: `.oi.GetDecryptedRange(&HTTPRangeSpec{true, -readLen, -1})`
$DIR/cmd/encryption-v1_test.go:648:70-648:98: `.ServerSideEncryption.Type()`
$DIR/cmd/endpoint-ellipses_test.go:59:3-72:5: `t.Run("", func(t *testing.T) {
			srvCtxt := serverCtxt{}
			err := mergeDisksLayoutFromArgs(testCase.args, &srvCtxt)
			if err != nil && testCase.success {
				t.Fatalf("Test %d: unexpected error: %v", i+1, err)
			}
			_, _, err = createServerEndpoints(testCase.serverAddr, srvCtxt.Layout.pools, srvCtxt.Layout.legacy)
			if err != nil && testCase.success {
				t.Errorf("Test %d: Expected success but failed instead %s", i+1, err)
			}
			if err == nil && !testCase.success {
				t.Errorf("Test %d: Expected failure but passed instead", i+1)
			}
		})`
$DIR/cmd/endpoint-ellipses_test.go:59:4-72:5: `.Run("", func(t *testing.T) {
			srvCtxt := serverCtxt{}
			err := mergeDisksLayoutFromArgs(testCase.args, &srvCtxt)
			if err != nil && testCase.success {
				t.Fatalf("Test %d: unexpected error: %v", i+1, err)
			}
			_, _, err = createServerEndpoints(testCase.serverAddr, srvCtxt.Layout.pools, srvCtxt.Layout.legacy)
			if err != nil && testCase.success {
				t.Errorf("Test %d: Expected success but failed instead %s", i+1, err)
			}
			if err == nil && !testCase.success {
				t.Errorf("Test %d: Expected failure but passed instead", i+1)
			}
		})`
$DIR/cmd/endpoint-ellipses_test.go:65:4-65:103: `_, _, err = createServerEndpoints(testCase.serverAddr, srvCtxt.Layout.pools, srvCtxt.Layout.legacy)`
$DIR/cmd/endpoint-ellipses_test.go:89:3-94:5: `t.Run("", func(t *testing.T) {
			gotGCD := getDivisibleSize(testCase.totalSizes)
			if testCase.result != gotGCD {
				t.Errorf("Expected %v, got %v", testCase.result, gotGCD)
			}
		})`
$DIR/cmd/endpoint-ellipses_test.go:89:4-94:5: `.Run("", func(t *testing.T) {
			gotGCD := getDivisibleSize(testCase.totalSizes)
			if testCase.result != gotGCD {
				t.Errorf("Expected %v, got %v", testCase.result, gotGCD)
			}
		})`
$DIR/cmd/endpoint-ellipses_test.go:176:3-196:5: `t.Run("", func(t *testing.T) {
			argPatterns := make([]ellipses.ArgPattern, len(testCase.args))
			for i, arg := range testCase.args {
				patterns, err := ellipses.FindEllipsesPatterns(arg)
				if err != nil {
					t.Fatalf("Unexpected failure %s", err)
				}
				argPatterns[i] = patterns
			}

			gotIndexes, err := getSetIndexes(testCase.args, testCase.totalSizes, testCase.envOverride, argPatterns)
			if err != nil && testCase.success {
				t.Errorf("Expected success but failed instead %s", err)
			}
			if err == nil && !testCase.success {
				t.Errorf("Expected failure but passed instead")
			}
			if !reflect.DeepEqual(testCase.indexes, gotIndexes) {
				t.Errorf("Expected %v, got %v", testCase.indexes, gotIndexes)
			}
		})`
$DIR/cmd/endpoint-ellipses_test.go:176:4-196:5: `.Run("", func(t *testing.T) {
			argPatterns := make([]ellipses.ArgPattern, len(testCase.args))
			for i, arg := range testCase.args {
				patterns, err := ellipses.FindEllipsesPatterns(arg)
				if err != nil {
					t.Fatalf("Unexpected failure %s", err)
				}
				argPatterns[i] = patterns
			}

			gotIndexes, err := getSetIndexes(testCase.args, testCase.totalSizes, testCase.envOverride, argPatterns)
			if err != nil && testCase.success {
				t.Errorf("Expected success but failed instead %s", err)
			}
			if err == nil && !testCase.success {
				t.Errorf("Expected failure but passed instead")
			}
			if !reflect.DeepEqual(testCase.indexes, gotIndexes) {
				t.Errorf("Expected %v, got %v", testCase.indexes, gotIndexes)
			}
		})`
$DIR/cmd/endpoint-ellipses_test.go:179:30-179:56: `.FindEllipsesPatterns(arg)`
$DIR/cmd/endpoint-ellipses_test.go:183:5-183:30: `argPatterns[i] = patterns`
$DIR/cmd/endpoint-ellipses_test.go:193:15-193:55: `.DeepEqual(testCase.indexes, gotIndexes)`
$DIR/cmd/endpoint-ellipses_test.go:298:3-317:5: `t.Run("", func(t *testing.T) {
			argPatterns := make([]ellipses.ArgPattern, len(testCase.args))
			for i, arg := range testCase.args {
				patterns, err := ellipses.FindEllipsesPatterns(arg)
				if err != nil {
					t.Fatalf("Unexpected failure %s", err)
				}
				argPatterns[i] = patterns
			}
			gotIndexes, err := getSetIndexes(testCase.args, testCase.totalSizes, 0, argPatterns)
			if err != nil && testCase.success {
				t.Errorf("Expected success but failed instead %s", err)
			}
			if err == nil && !testCase.success {
				t.Errorf("Expected failure but passed instead")
			}
			if !reflect.DeepEqual(testCase.indexes, gotIndexes) {
				t.Errorf("Expected %v, got %v", testCase.indexes, gotIndexes)
			}
		})`
$DIR/cmd/endpoint-ellipses_test.go:298:4-317:5: `.Run("", func(t *testing.T) {
			argPatterns := make([]ellipses.ArgPattern, len(testCase.args))
			for i, arg := range testCase.args {
				patterns, err := ellipses.FindEllipsesPatterns(arg)
				if err != nil {
					t.Fatalf("Unexpected failure %s", err)
				}
				argPatterns[i] = patterns
			}
			gotIndexes, err := getSetIndexes(testCase.args, testCase.totalSizes, 0, argPatterns)
			if err != nil && testCase.success {
				t.Errorf("Expected success but failed instead %s", err)
			}
			if err == nil && !testCase.success {
				t.Errorf("Expected failure but passed instead")
			}
			if !reflect.DeepEqual(testCase.indexes, gotIndexes) {
				t.Errorf("Expected %v, got %v", testCase.indexes, gotIndexes)
			}
		})`
$DIR/cmd/endpoint-ellipses_test.go:301:30-301:56: `.FindEllipsesPatterns(arg)`
$DIR/cmd/endpoint-ellipses_test.go:305:5-305:30: `argPatterns[i] = patterns`
$DIR/cmd/endpoint-ellipses_test.go:314:15-314:55: `.DeepEqual(testCase.indexes, gotIndexes)`
$DIR/cmd/endpoint-ellipses_test.go:641:3-652:5: `t.Run("", func(t *testing.T) {
			gotEs, err := parseEndpointSet(0, testCase.arg)
			if err != nil && testCase.success {
				t.Errorf("Expected success but failed instead %s", err)
			}
			if err == nil && !testCase.success {
				t.Errorf("Expected failure but passed instead")
			}
			if !reflect.DeepEqual(testCase.es, gotEs) {
				t.Errorf("Expected %v, got %v", testCase.es, gotEs)
			}
		})`
$DIR/cmd/endpoint-ellipses_test.go:641:4-652:5: `.Run("", func(t *testing.T) {
			gotEs, err := parseEndpointSet(0, testCase.arg)
			if err != nil && testCase.success {
				t.Errorf("Expected success but failed instead %s", err)
			}
			if err == nil && !testCase.success {
				t.Errorf("Expected failure but passed instead")
			}
			if !reflect.DeepEqual(testCase.es, gotEs) {
				t.Errorf("Expected %v, got %v", testCase.es, gotEs)
			}
		})`
$DIR/cmd/endpoint-ellipses_test.go:649:15-649:45: `.DeepEqual(testCase.es, gotEs)`
$DIR/cmd/endpoint_contrib_test.go:28:3-28:40: `globalMinioPort = tempGlobalMinioPort`
$DIR/cmd/endpoint_contrib_test.go:30:2-30:26: `globalMinioPort = "9000"`
$DIR/cmd/endpoint_contrib_test.go:34:3-34:40: `globalDomainIPs = tempGlobalDomainIPs`
$DIR/cmd/endpoint_contrib_test.go:41:7-41:22: `.NewStringSet()`
$DIR/cmd/endpoint_contrib_test.go:41:27-41:42: `.NewStringSet()`
$DIR/cmd/endpoint_contrib_test.go:42:7-42:36: `.CreateStringSet("localhost")`
$DIR/cmd/endpoint_contrib_test.go:42:41-42:56: `.NewStringSet()`
$DIR/cmd/endpoint_contrib_test.go:43:7-43:48: `.CreateStringSet("localhost", "10.0.0.1")`
$DIR/cmd/endpoint_contrib_test.go:43:53-43:86: `.CreateStringSet("10.0.0.1:9000")`
$DIR/cmd/endpoint_contrib_test.go:44:7-44:53: `.CreateStringSet("localhost:9001", "10.0.0.1")`
$DIR/cmd/endpoint_contrib_test.go:44:58-44:91: `.CreateStringSet("10.0.0.1:9000")`
$DIR/cmd/endpoint_contrib_test.go:45:7-45:53: `.CreateStringSet("localhost", "10.0.0.1:9001")`
$DIR/cmd/endpoint_contrib_test.go:45:58-45:91: `.CreateStringSet("10.0.0.1:9001")`
$DIR/cmd/endpoint_contrib_test.go:46:7-46:58: `.CreateStringSet("localhost:9000", "10.0.0.1:9001")`
$DIR/cmd/endpoint_contrib_test.go:46:63-46:96: `.CreateStringSet("10.0.0.1:9001")`
$DIR/cmd/endpoint_contrib_test.go:48:7-48:47: `.CreateStringSet("10.0.0.1", "10.0.0.2")`
$DIR/cmd/endpoint_contrib_test.go:48:52-48:102: `.CreateStringSet("10.0.0.1:9000", "10.0.0.2:9000")`
$DIR/cmd/endpoint_contrib_test.go:49:7-49:52: `.CreateStringSet("10.0.0.1:9001", "10.0.0.2")`
$DIR/cmd/endpoint_contrib_test.go:49:57-49:107: `.CreateStringSet("10.0.0.1:9001", "10.0.0.2:9000")`
$DIR/cmd/endpoint_contrib_test.go:50:7-50:52: `.CreateStringSet("10.0.0.1", "10.0.0.2:9002")`
$DIR/cmd/endpoint_contrib_test.go:50:57-50:107: `.CreateStringSet("10.0.0.1:9000", "10.0.0.2:9002")`
$DIR/cmd/endpoint_contrib_test.go:51:7-51:57: `.CreateStringSet("10.0.0.1:9001", "10.0.0.2:9002")`
$DIR/cmd/endpoint_contrib_test.go:51:62-51:112: `.CreateStringSet("10.0.0.1:9001", "10.0.0.2:9002")`
$DIR/cmd/endpoint_contrib_test.go:55:3-55:24: `globalDomainIPs = nil`
$DIR/cmd/endpoint_contrib_test.go:57:3-57:38: `updateDomainIPs(testCase.endPoints)`
$DIR/cmd/endpoint_contrib_test.go:59:15-59:54: `.expectedResult.Equals(globalDomainIPs)`
$DIR/cmd/endpoint_test.go:31:14-31:48: `.Parse("https://example.org/path")`
$DIR/cmd/endpoint_test.go:32:14-32:51: `.Parse("http://192.168.253.200/path")`
$DIR/cmd/endpoint_test.go:33:29-33:41: `.Abs("/foo")`
$DIR/cmd/endpoint_test.go:59:3-92:5: `t.Run(fmt.Sprint("case-", i), func(t *testing.T) {
			endpoint, err := NewEndpoint(test.arg)
			if err == nil {
				err = endpoint.UpdateIsLocal()
			}

			switch {
			case test.expectedErr == nil:
				if err != nil {
					t.Errorf("error: expected = <nil>, got = %v", err)
				}
			case err == nil:
				t.Errorf("error: expected = %v, got = <nil>", test.expectedErr)
			case test.expectedErr.Error() != err.Error():
				t.Errorf("error: expected = %v, got = %v", test.expectedErr, err)
			}

			if err == nil {
				if (test.expectedEndpoint.URL == nil) != (endpoint.URL == nil) {
					t.Errorf("endpoint url: expected = %#v, got = %#v", test.expectedEndpoint.URL, endpoint.URL)
					return
				} else if test.expectedEndpoint.URL.String() != endpoint.URL.String() {
					t.Errorf("endpoint url: expected = %#v, got = %#v", test.expectedEndpoint.URL.String(), endpoint.URL.String())
					return
				}
				if !reflect.DeepEqual(test.expectedEndpoint, endpoint) {
					t.Errorf("endpoint: expected = %#v, got = %#v", test.expectedEndpoint, endpoint)
				}
			}

			if err == nil && test.expectedType != endpoint.Type() {
				t.Errorf("type: expected = %+v, got = %+v", test.expectedType, endpoint.Type())
			}
		})`
$DIR/cmd/endpoint_test.go:59:4-92:5: `.Run(fmt.Sprint("case-", i), func(t *testing.T) {
			endpoint, err := NewEndpoint(test.arg)
			if err == nil {
				err = endpoint.UpdateIsLocal()
			}

			switch {
			case test.expectedErr == nil:
				if err != nil {
					t.Errorf("error: expected = <nil>, got = %v", err)
				}
			case err == nil:
				t.Errorf("error: expected = %v, got = <nil>", test.expectedErr)
			case test.expectedErr.Error() != err.Error():
				t.Errorf("error: expected = %v, got = %v", test.expectedErr, err)
			}

			if err == nil {
				if (test.expectedEndpoint.URL == nil) != (endpoint.URL == nil) {
					t.Errorf("endpoint url: expected = %#v, got = %#v", test.expectedEndpoint.URL, endpoint.URL)
					return
				} else if test.expectedEndpoint.URL.String() != endpoint.URL.String() {
					t.Errorf("endpoint url: expected = %#v, got = %#v", test.expectedEndpoint.URL.String(), endpoint.URL.String())
					return
				}
				if !reflect.DeepEqual(test.expectedEndpoint, endpoint) {
					t.Errorf("endpoint: expected = %#v, got = %#v", test.expectedEndpoint, endpoint)
				}
			}

			if err == nil && test.expectedType != endpoint.Type() {
				t.Errorf("type: expected = %+v, got = %+v", test.expectedType, endpoint.Type())
			}
		})`
$DIR/cmd/endpoint_test.go:59:12-59:31: `.Sprint("case-", i)`
$DIR/cmd/endpoint_test.go:62:5-62:35: `err = endpoint.UpdateIsLocal()`
$DIR/cmd/endpoint_test.go:62:19-62:35: `.UpdateIsLocal()`
$DIR/cmd/endpoint_test.go:80:19-80:49: `.expectedEndpoint.URL.String()`
$DIR/cmd/endpoint_test.go:80:61-80:74: `.URL.String()`
$DIR/cmd/endpoint_test.go:84:16-84:59: `.DeepEqual(test.expectedEndpoint, endpoint)`
$DIR/cmd/endpoint_test.go:89:50-89:57: `.Type()`
$DIR/cmd/endpoint_test.go:135:3-135:40: `globalMinioPort = tempGlobalMinioPort`
$DIR/cmd/endpoint_test.go:137:2-137:26: `globalMinioPort = "9000"`
$DIR/cmd/endpoint_test.go:140:28-142:8: `.FuncMatch(func(ip string, matchString string) bool {
		return !net.ParseIP(ip).IsLoopback()
	}, "")`
$DIR/cmd/endpoint_test.go:141:14-141:26: `.ParseIP(ip)`
$DIR/cmd/endpoint_test.go:141:26-141:39: `.IsLoopback()`
$DIR/cmd/endpoint_test.go:146:33-146:43: `.ToSlice()`
$DIR/cmd/endpoint_test.go:149:21-149:28: `.Abs(s)`
$DIR/cmd/endpoint_test.go:159:15-159:26: `.Parse(arg)`
$DIR/cmd/endpoint_test.go:160:4-160:26: `URLs = append(URLs, u)`
$DIR/cmd/endpoint_test.go:161:4-161:67: `localFlags = append(localFlags, strings.HasPrefix(arg, prefix))`
$DIR/cmd/endpoint_test.go:161:43-161:66: `.HasPrefix(arg, prefix)`
$DIR/cmd/endpoint_test.go:179:2-184:3: `args = []string{
		"http://" + nonLoopBackIP + ":10000/d1",
		"http://" + nonLoopBackIP + ":9000/d2",
		"http://example.org:10000/d3",
		"http://example.com:10000/d4",
	}`
$DIR/cmd/endpoint_test.go:188:2-193:3: `args = []string{
		"http://" + nonLoopBackIP + ":80/d1",
		"http://example.org:9000/d2",
		"http://example.com:80/d3",
		"http://example.net:80/d4",
	}`
$DIR/cmd/endpoint_test.go:197:2-202:3: `args = []string{
		"http://" + nonLoopBackIP + ":9000/d1",
		"http://example.org:9000/d2",
		"http://example.com:9000/d3",
		"http://example.net:9000/d4",
	}`
$DIR/cmd/endpoint_test.go:209:2-214:3: `args = []string{
		case5Endpoint1,
		case5Endpoint2,
		case5Endpoint3,
		case5Endpoint4,
	}`
$DIR/cmd/endpoint_test.go:218:2-223:3: `args = []string{
		"http://localhost:9000/d1",
		"http://localhost:9001/d2",
		"http://127.0.0.1:9002/d3",
		case6Endpoint,
	}`
$DIR/cmd/endpoint_test.go:317:3-349:5: `t.Run("", func(t *testing.T) {
			var srvCtxt serverCtxt
			err := mergeDisksLayoutFromArgs(testCase.args, &srvCtxt)
			if err != nil && testCase.expectedErr == nil {
				t.Errorf("Test %d: unexpected error: %v", i+1, err)
			}
			pools, setupType, err := CreatePoolEndpoints(testCase.serverAddr, srvCtxt.Layout.pools...)
			if err == nil && testCase.expectedErr != nil {
				t.Errorf("Test %d: expected = %v, got = <nil>", i+1, testCase.expectedErr)
			}
			if err == nil {
				if setupType != testCase.expectedSetupType {
					t.Errorf("Test %d: setupType: expected = %v, got = %v", i+1, testCase.expectedSetupType, setupType)
				}
				endpoints := pools[0]
				if len(endpoints) != len(testCase.expectedEndpoints) {
					t.Errorf("Test %d: endpoints: expected = %d, got = %d", i+1, len(testCase.expectedEndpoints),
						len(endpoints))
				} else {
					for i, endpoint := range endpoints {
						if testCase.expectedEndpoints[i].String() != endpoint.String() {
							t.Errorf("Test %d: endpoints: expected = %s, got = %s",
								i+1,
								testCase.expectedEndpoints[i],
								endpoint)
						}
					}
				}
			}
			if err != nil && testCase.expectedErr == nil {
				t.Errorf("Test %d: error: expected = <nil>, got = %v, testCase: %v", i+1, err, testCase)
			}
		})`
$DIR/cmd/endpoint_test.go:317:4-349:5: `.Run("", func(t *testing.T) {
			var srvCtxt serverCtxt
			err := mergeDisksLayoutFromArgs(testCase.args, &srvCtxt)
			if err != nil && testCase.expectedErr == nil {
				t.Errorf("Test %d: unexpected error: %v", i+1, err)
			}
			pools, setupType, err := CreatePoolEndpoints(testCase.serverAddr, srvCtxt.Layout.pools...)
			if err == nil && testCase.expectedErr != nil {
				t.Errorf("Test %d: expected = %v, got = <nil>", i+1, testCase.expectedErr)
			}
			if err == nil {
				if setupType != testCase.expectedSetupType {
					t.Errorf("Test %d: setupType: expected = %v, got = %v", i+1, testCase.expectedSetupType, setupType)
				}
				endpoints := pools[0]
				if len(endpoints) != len(testCase.expectedEndpoints) {
					t.Errorf("Test %d: endpoints: expected = %d, got = %d", i+1, len(testCase.expectedEndpoints),
						len(endpoints))
				} else {
					for i, endpoint := range endpoints {
						if testCase.expectedEndpoints[i].String() != endpoint.String() {
							t.Errorf("Test %d: endpoints: expected = %s, got = %s",
								i+1,
								testCase.expectedEndpoints[i],
								endpoint)
						}
					}
				}
			}
			if err != nil && testCase.expectedErr == nil {
				t.Errorf("Test %d: error: expected = <nil>, got = %v, testCase: %v", i+1, err, testCase)
			}
		})`
$DIR/cmd/endpoint_test.go:337:39-337:48: `.String()`
$DIR/cmd/endpoint_test.go:337:60-337:69: `.String()`
$DIR/cmd/endpoint_test.go:359:3-359:40: `globalMinioPort = tempGlobalMinioPort`
$DIR/cmd/endpoint_test.go:361:2-361:26: `globalMinioPort = "9000"`
$DIR/cmd/endpoint_test.go:385:27-385:53: `.Endpoints.UpdateIsLocal()`
$DIR/cmd/endpoint_test.go:399:3-399:40: `globalMinioPort = tempGlobalMinioPort`
$DIR/cmd/endpoint_test.go:401:2-401:26: `globalMinioPort = "9000"`
$DIR/cmd/endpoint_test.go:418:27-418:53: `.Endpoints.UpdateIsLocal()`
$DIR/cmd/endpoint_test.go:422:35-422:43: `.peers()`
$DIR/cmd/endpoint_test.go:423:14-423:62: `.DeepEqual(remotePeers, testCase.expectedResult)`
$DIR/cmd/erasure-decode_test.go:92:37-92:50: `.Background()`
$DIR/cmd/erasure-decode_test.go:98:17-98:46: `.ReadFull(crand.Reader, data)`
$DIR/cmd/erasure-decode_test.go:103:11-103:33: `.algorithm.Available()`
$DIR/cmd/erasure-decode_test.go:104:4-104:43: `writeAlgorithm = DefaultBitrotAlgorithm`
$DIR/cmd/erasure-decode_test.go:109:4-109:137: `writers[i] = newBitrotWriter(disk, "", "testbucket", "object", erasure.ShardFileSize(test.data), writeAlgorithm, erasure.ShardSize())`
$DIR/cmd/erasure-decode_test.go:109:74-109:99: `.ShardFileSize(test.data)`
$DIR/cmd/erasure-decode_test.go:109:124-109:136: `.ShardSize()`
$DIR/cmd/erasure-decode_test.go:111:20-111:111: `.Encode(context.Background(), bytes.NewReader(data), writers, buffer, erasure.dataBlocks+1)`
$DIR/cmd/erasure-decode_test.go:111:35-111:48: `.Background()`
$DIR/cmd/erasure-decode_test.go:111:55-111:71: `.NewReader(data)`
$DIR/cmd/erasure-decode_test.go:112:3-112:30: `closeBitrotWriters(writers)`
$DIR/cmd/erasure-decode_test.go:121:5-121:19: `disks[i] = nil`
$DIR/cmd/erasure-decode_test.go:131:25-131:78: `.ShardFileOffset(test.offset, test.length, test.data)`
$DIR/cmd/erasure-decode_test.go:133:4-133:159: `bitrotReaders[index] = newBitrotReader(disk, nil, "testbucket", "object", tillOffset, writeAlgorithm, bitrotWriterSum(writers[index]), erasure.ShardSize())`
$DIR/cmd/erasure-decode_test.go:133:146-133:158: `.ShardSize()`
$DIR/cmd/erasure-decode_test.go:136:18-136:33: `.NewBuffer(nil)`
$DIR/cmd/erasure-decode_test.go:137:3-137:113: `_, err = erasure.Decode(context.Background(), writer, bitrotReaders, test.offset, test.length, test.data, nil)`
$DIR/cmd/erasure-decode_test.go:137:19-137:113: `.Decode(context.Background(), writer, bitrotReaders, test.offset, test.length, test.data, nil)`
$DIR/cmd/erasure-decode_test.go:137:34-137:47: `.Background()`
$DIR/cmd/erasure-decode_test.go:138:3-138:36: `closeBitrotReaders(bitrotReaders)`
$DIR/cmd/erasure-decode_test.go:146:24-146:32: `.Bytes()`
$DIR/cmd/erasure-decode_test.go:146:40-146:98: `.Equal(content, data[test.offset:test.offset+test.length])`
$DIR/cmd/erasure-decode_test.go:153:5-153:27: `disks[i] = OfflineDisk`
$DIR/cmd/erasure-decode_test.go:157:4-157:51: `bitrotReaders = make([]io.ReaderAt, len(disks))`
$DIR/cmd/erasure-decode_test.go:162:26-162:79: `.ShardFileOffset(test.offset, test.length, test.data)`
$DIR/cmd/erasure-decode_test.go:163:5-163:160: `bitrotReaders[index] = newBitrotReader(disk, nil, "testbucket", "object", tillOffset, writeAlgorithm, bitrotWriterSum(writers[index]), erasure.ShardSize())`
$DIR/cmd/erasure-decode_test.go:163:147-163:159: `.ShardSize()`
$DIR/cmd/erasure-decode_test.go:171:6-171:27: `r.disk = badDisk{nil}`
$DIR/cmd/erasure-decode_test.go:173:6-173:27: `r.disk = badDisk{nil}`
$DIR/cmd/erasure-decode_test.go:177:5-177:27: `bitrotReaders[0] = nil`
$DIR/cmd/erasure-decode_test.go:179:4-179:18: `writer.Reset()`
$DIR/cmd/erasure-decode_test.go:179:10-179:18: `.Reset()`
$DIR/cmd/erasure-decode_test.go:180:4-180:114: `_, err = erasure.Decode(context.Background(), writer, bitrotReaders, test.offset, test.length, test.data, nil)`
$DIR/cmd/erasure-decode_test.go:180:20-180:114: `.Decode(context.Background(), writer, bitrotReaders, test.offset, test.length, test.data, nil)`
$DIR/cmd/erasure-decode_test.go:180:35-180:48: `.Background()`
$DIR/cmd/erasure-decode_test.go:181:4-181:37: `closeBitrotReaders(bitrotReaders)`
$DIR/cmd/erasure-decode_test.go:189:25-189:33: `.Bytes()`
$DIR/cmd/erasure-decode_test.go:189:41-189:99: `.Equal(content, data[test.offset:test.offset+test.length])`
$DIR/cmd/erasure-decode_test.go:201:12-201:20: `.Short()`
$DIR/cmd/erasure-decode_test.go:214:36-214:49: `.Background()`
$DIR/cmd/erasure-decode_test.go:221:2-221:26: `_, err = rand.Read(data)`
$DIR/cmd/erasure-decode_test.go:221:15-221:26: `.Read(data)`
$DIR/cmd/erasure-decode_test.go:231:3-231:141: `writers[i] = newBitrotWriter(disk, "", "testbucket", "object", erasure.ShardFileSize(length), DefaultBitrotAlgorithm, erasure.ShardSize())`
$DIR/cmd/erasure-decode_test.go:231:73-231:95: `.ShardFileSize(length)`
$DIR/cmd/erasure-decode_test.go:231:128-231:140: `.ShardSize()`
$DIR/cmd/erasure-decode_test.go:239:19-239:110: `.Encode(context.Background(), bytes.NewReader(data), writers, buffer, erasure.dataBlocks+1)`
$DIR/cmd/erasure-decode_test.go:239:34-239:47: `.Background()`
$DIR/cmd/erasure-decode_test.go:239:54-239:70: `.NewReader(data)`
$DIR/cmd/erasure-decode_test.go:240:2-240:29: `closeBitrotWriters(writers)`
$DIR/cmd/erasure-decode_test.go:249:11-249:52: `.New(rand.NewSource(UTCNow().UnixNano()))`
$DIR/cmd/erasure-decode_test.go:249:20-249:51: `.NewSource(UTCNow().UnixNano())`
$DIR/cmd/erasure-decode_test.go:249:39-249:50: `.UnixNano()`
$DIR/cmd/erasure-decode_test.go:255:14-255:29: `.Int63n(length)`
$DIR/cmd/erasure-decode_test.go:256:15-256:39: `.Int63n(length - offset)`
$DIR/cmd/erasure-decode_test.go:266:25-266:66: `.ShardFileOffset(offset, readLen, length)`
$DIR/cmd/erasure-decode_test.go:267:4-267:143: `bitrotReaders[index] = newStreamingBitrotReader(disk, nil, "testbucket", "object", tillOffset, DefaultBitrotAlgorithm, erasure.ShardSize())`
$DIR/cmd/erasure-decode_test.go:267:130-267:142: `.ShardSize()`
$DIR/cmd/erasure-decode_test.go:269:3-269:98: `_, err = erasure.Decode(context.Background(), buf, bitrotReaders, offset, readLen, length, nil)`
$DIR/cmd/erasure-decode_test.go:269:19-269:98: `.Decode(context.Background(), buf, bitrotReaders, offset, readLen, length, nil)`
$DIR/cmd/erasure-decode_test.go:269:34-269:47: `.Background()`
$DIR/cmd/erasure-decode_test.go:270:3-270:36: `closeBitrotReaders(bitrotReaders)`
$DIR/cmd/erasure-decode_test.go:274:13-274:21: `.Bytes()`
$DIR/cmd/erasure-decode_test.go:275:12-275:33: `.Equal(expected, got)`
$DIR/cmd/erasure-decode_test.go:278:3-278:14: `buf.Reset()`
$DIR/cmd/erasure-decode_test.go:278:6-278:14: `.Reset()`
$DIR/cmd/erasure-encode_test.go:91:37-91:50: `.Background()`
$DIR/cmd/erasure-encode_test.go:98:17-98:45: `.ReadFull(rand.Reader, data)`
$DIR/cmd/erasure-encode_test.go:106:4-106:158: `writers[i] = newBitrotWriter(disk, "", "testbucket", "object", erasure.ShardFileSize(int64(len(data[test.offset:]))), test.algorithm, erasure.ShardSize())`
$DIR/cmd/erasure-encode_test.go:106:74-106:120: `.ShardFileSize(int64(len(data[test.offset:])))`
$DIR/cmd/erasure-encode_test.go:106:145-106:157: `.ShardSize()`
$DIR/cmd/erasure-encode_test.go:108:20-108:125: `.Encode(context.Background(), bytes.NewReader(data[test.offset:]), writers, buffer, erasure.dataBlocks+1)`
$DIR/cmd/erasure-encode_test.go:108:35-108:48: `.Background()`
$DIR/cmd/erasure-encode_test.go:108:55-108:85: `.NewReader(data[test.offset:])`
$DIR/cmd/erasure-encode_test.go:109:3-109:30: `closeBitrotWriters(writers)`
$DIR/cmd/erasure-encode_test.go:118:5-118:27: `disks[i] = OfflineDisk`
$DIR/cmd/erasure-encode_test.go:130:5-130:160: `writers[i] = newBitrotWriter(disk, "", "testbucket", "object2", erasure.ShardFileSize(int64(len(data[test.offset:]))), test.algorithm, erasure.ShardSize())`
$DIR/cmd/erasure-encode_test.go:130:76-130:122: `.ShardFileSize(int64(len(data[test.offset:])))`
$DIR/cmd/erasure-encode_test.go:130:147-130:159: `.ShardSize()`
$DIR/cmd/erasure-encode_test.go:135:6-135:27: `w.disk = badDisk{nil}`
$DIR/cmd/erasure-encode_test.go:137:6-137:35: `w.closeWithErr(errFaultyDisk)`
$DIR/cmd/erasure-encode_test.go:137:7-137:35: `.closeWithErr(errFaultyDisk)`
$DIR/cmd/erasure-encode_test.go:141:5-141:21: `writers[0] = nil`
$DIR/cmd/erasure-encode_test.go:143:4-143:125: `n, err = erasure.Encode(context.Background(), bytes.NewReader(data[test.offset:]), writers, buffer, erasure.dataBlocks+1)`
$DIR/cmd/erasure-encode_test.go:143:20-143:125: `.Encode(context.Background(), bytes.NewReader(data[test.offset:]), writers, buffer, erasure.dataBlocks+1)`
$DIR/cmd/erasure-encode_test.go:143:35-143:48: `.Background()`
$DIR/cmd/erasure-encode_test.go:143:55-143:85: `.NewReader(data[test.offset:])`
$DIR/cmd/erasure-encode_test.go:144:4-144:31: `closeBitrotWriters(writers)`
$DIR/cmd/erasure-heal_test.go:78:37-78:50: `.Background()`
$DIR/cmd/erasure-heal_test.go:83:17-83:45: `.ReadFull(rand.Reader, data)`
$DIR/cmd/erasure-heal_test.go:89:4-89:141: `writers[i] = newBitrotWriter(disk, "", "testbucket", "testobject", erasure.ShardFileSize(test.size), test.algorithm, erasure.ShardSize())`
$DIR/cmd/erasure-heal_test.go:89:78-89:103: `.ShardFileSize(test.size)`
$DIR/cmd/erasure-heal_test.go:89:128-89:140: `.ShardSize()`
$DIR/cmd/erasure-heal_test.go:91:3-91:110: `_, err = erasure.Encode(context.Background(), bytes.NewReader(data), writers, buffer, erasure.dataBlocks+1)`
$DIR/cmd/erasure-heal_test.go:91:19-91:110: `.Encode(context.Background(), bytes.NewReader(data), writers, buffer, erasure.dataBlocks+1)`
$DIR/cmd/erasure-heal_test.go:91:34-91:47: `.Background()`
$DIR/cmd/erasure-heal_test.go:91:54-91:70: `.NewReader(data)`
$DIR/cmd/erasure-heal_test.go:92:3-92:30: `closeBitrotWriters(writers)`
$DIR/cmd/erasure-heal_test.go:99:28-99:53: `.ShardFileSize(test.size)`
$DIR/cmd/erasure-heal_test.go:100:4-100:152: `readers[i] = newBitrotReader(disk, nil, "testbucket", "testobject", shardFilesize, test.algorithm, bitrotWriterSum(writers[i]), erasure.ShardSize())`
$DIR/cmd/erasure-heal_test.go:100:139-100:151: `.ShardSize()`
$DIR/cmd/erasure-heal_test.go:105:3-105:26: `copy(staleDisks, disks)`
$DIR/cmd/erasure-heal_test.go:108:5-108:21: `readers[j] = nil`
$DIR/cmd/erasure-heal_test.go:110:5-110:24: `staleDisks[j] = nil`
$DIR/cmd/erasure-heal_test.go:116:5-116:26: `r.disk = badDisk{nil}`
$DIR/cmd/erasure-heal_test.go:118:5-118:26: `r.disk = badDisk{nil}`
$DIR/cmd/erasure-heal_test.go:122:4-122:32: `staleDisks[j] = badDisk{nil}`
$DIR/cmd/erasure-heal_test.go:130:4-130:66: `os.Remove(pathJoin(disk.String(), "testbucket", "testobject"))`
$DIR/cmd/erasure-heal_test.go:130:6-130:66: `.Remove(pathJoin(disk.String(), "testbucket", "testobject"))`
$DIR/cmd/erasure-heal_test.go:130:27-130:36: `.String()`
$DIR/cmd/erasure-heal_test.go:131:4-131:146: `staleWriters[i] = newBitrotWriter(disk, "", "testbucket", "testobject", erasure.ShardFileSize(test.size), test.algorithm, erasure.ShardSize())`
$DIR/cmd/erasure-heal_test.go:131:83-131:108: `.ShardFileSize(test.size)`
$DIR/cmd/erasure-heal_test.go:131:133-131:145: `.ShardSize()`
$DIR/cmd/erasure-heal_test.go:135:3-135:82: `err = erasure.Heal(context.Background(), staleWriters, readers, test.size, nil)`
$DIR/cmd/erasure-heal_test.go:135:16-135:82: `.Heal(context.Background(), staleWriters, readers, test.size, nil)`
$DIR/cmd/erasure-heal_test.go:135:29-135:42: `.Background()`
$DIR/cmd/erasure-heal_test.go:136:3-136:30: `closeBitrotReaders(readers)`
$DIR/cmd/erasure-heal_test.go:137:3-137:35: `closeBitrotWriters(staleWriters)`
$DIR/cmd/erasure-heal_test.go:151:14-151:83: `.Equal(bitrotWriterSum(staleWriters[i]), bitrotWriterSum(writers[i]))`
$DIR/cmd/erasure-healing-common_test.go:91:9-91:20: `.Unix(0, 1)`
$DIR/cmd/erasure-healing-common_test.go:91:20-91:26: `.UTC()`
$DIR/cmd/erasure-healing-common_test.go:92:9-92:20: `.Unix(0, 2)`
$DIR/cmd/erasure-healing-common_test.go:92:20-92:26: `.UTC()`
$DIR/cmd/erasure-healing-common_test.go:93:9-93:20: `.Unix(0, 3)`
$DIR/cmd/erasure-healing-common_test.go:93:20-93:26: `.UTC()`
$DIR/cmd/erasure-healing-common_test.go:94:9-94:20: `.Unix(0, 3)`
$DIR/cmd/erasure-healing-common_test.go:94:20-94:26: `.UTC()`
$DIR/cmd/erasure-healing-common_test.go:95:9-95:20: `.Unix(0, 2)`
$DIR/cmd/erasure-healing-common_test.go:95:20-95:26: `.UTC()`
$DIR/cmd/erasure-healing-common_test.go:96:9-96:20: `.Unix(0, 3)`
$DIR/cmd/erasure-healing-common_test.go:96:20-96:26: `.UTC()`
$DIR/cmd/erasure-healing-common_test.go:97:9-97:20: `.Unix(0, 1)`
$DIR/cmd/erasure-healing-common_test.go:97:20-97:26: `.UTC()`
$DIR/cmd/erasure-healing-common_test.go:99:8-99:19: `.Unix(0, 3)`
$DIR/cmd/erasure-healing-common_test.go:99:19-99:25: `.UTC()`
$DIR/cmd/erasure-healing-common_test.go:105:9-105:20: `.Unix(0, 3)`
$DIR/cmd/erasure-healing-common_test.go:105:20-105:26: `.UTC()`
$DIR/cmd/erasure-healing-common_test.go:106:9-106:20: `.Unix(0, 3)`
$DIR/cmd/erasure-healing-common_test.go:106:20-106:26: `.UTC()`
$DIR/cmd/erasure-healing-common_test.go:107:9-107:20: `.Unix(0, 3)`
$DIR/cmd/erasure-healing-common_test.go:107:20-107:26: `.UTC()`
$DIR/cmd/erasure-healing-common_test.go:108:9-108:20: `.Unix(0, 3)`
$DIR/cmd/erasure-healing-common_test.go:108:20-108:26: `.UTC()`
$DIR/cmd/erasure-healing-common_test.go:109:9-109:20: `.Unix(0, 3)`
$DIR/cmd/erasure-healing-common_test.go:109:20-109:26: `.UTC()`
$DIR/cmd/erasure-healing-common_test.go:110:9-110:20: `.Unix(0, 3)`
$DIR/cmd/erasure-healing-common_test.go:110:20-110:26: `.UTC()`
$DIR/cmd/erasure-healing-common_test.go:111:9-111:20: `.Unix(0, 3)`
$DIR/cmd/erasure-healing-common_test.go:111:20-111:26: `.UTC()`
$DIR/cmd/erasure-healing-common_test.go:113:8-113:19: `.Unix(0, 3)`
$DIR/cmd/erasure-healing-common_test.go:113:19-113:25: `.UTC()`
$DIR/cmd/erasure-healing-common_test.go:120:9-120:20: `.Unix(0, 3)`
$DIR/cmd/erasure-healing-common_test.go:120:20-120:26: `.UTC()`
$DIR/cmd/erasure-healing-common_test.go:121:9-121:20: `.Unix(0, 3)`
$DIR/cmd/erasure-healing-common_test.go:121:20-121:26: `.UTC()`
$DIR/cmd/erasure-healing-common_test.go:122:9-122:20: `.Unix(0, 2)`
$DIR/cmd/erasure-healing-common_test.go:122:20-122:26: `.UTC()`
$DIR/cmd/erasure-healing-common_test.go:123:9-123:20: `.Unix(0, 1)`
$DIR/cmd/erasure-healing-common_test.go:123:20-123:26: `.UTC()`
$DIR/cmd/erasure-healing-common_test.go:124:9-124:20: `.Unix(0, 3)`
$DIR/cmd/erasure-healing-common_test.go:124:20-124:26: `.UTC()`
$DIR/cmd/erasure-healing-common_test.go:125:9-125:20: `.Unix(0, 4)`
$DIR/cmd/erasure-healing-common_test.go:125:20-125:26: `.UTC()`
$DIR/cmd/erasure-healing-common_test.go:126:9-126:20: `.Unix(0, 3)`
$DIR/cmd/erasure-healing-common_test.go:126:20-126:26: `.UTC()`
$DIR/cmd/erasure-healing-common_test.go:141:15-141:33: `.time.Equal(ctime)`
$DIR/cmd/erasure-healing-common_test.go:150:24-150:57: `.WithCancel(context.Background())`
$DIR/cmd/erasure-healing-common_test.go:150:43-150:56: `.Background()`
$DIR/cmd/erasure-healing-common_test.go:157:2-157:21: `setObjectLayer(obj)`
$DIR/cmd/erasure-healing-common_test.go:158:11-158:42: `.Shutdown(context.Background())`
$DIR/cmd/erasure-healing-common_test.go:158:28-158:41: `.Background()`
$DIR/cmd/erasure-healing-common_test.go:161:2-161:21: `type tamperKind int`
$DIR/cmd/erasure-healing-common_test.go:162:2-166:3: `const (
		noTamper tamperKind = iota
		deletePart
		corruptPart
	)`
$DIR/cmd/erasure-healing-common_test.go:168:22-168:33: `.Unix(1, 0)`
$DIR/cmd/erasure-healing-common_test.go:168:33-168:39: `.UTC()`
$DIR/cmd/erasure-healing-common_test.go:169:23-169:34: `.Unix(3, 0)`
$DIR/cmd/erasure-healing-common_test.go:169:34-169:40: `.UTC()`
$DIR/cmd/erasure-healing-common_test.go:170:22-170:33: `.Unix(4, 0)`
$DIR/cmd/erasure-healing-common_test.go:170:33-170:39: `.UTC()`
$DIR/cmd/erasure-healing-common_test.go:177:4-177:39: `modTimesThreeFour[i] = fourNanoSecs`
$DIR/cmd/erasure-healing-common_test.go:178:4-178:39: `modTimesThreeNone[i] = timeSentinel`
$DIR/cmd/erasure-healing-common_test.go:181:3-181:39: `modTimesThreeFour[i] = threeNanoSecs`
$DIR/cmd/erasure-healing-common_test.go:182:3-182:39: `modTimesThreeNone[i] = threeNanoSecs`
$DIR/cmd/erasure-healing-common_test.go:227:2-227:58: `err = obj.MakeBucket(ctx, "bucket", MakeBucketOptions{})`
$DIR/cmd/erasure-healing-common_test.go:227:11-227:58: `.MakeBucket(ctx, "bucket", MakeBucketOptions{})`
$DIR/cmd/erasure-healing-common_test.go:233:15-233:58: `.Repeat([]byte("a"), smallFileThreshold*16)`
$DIR/cmd/erasure-healing-common_test.go:236:24-236:39: `.GetDisks(0, 0)`
$DIR/cmd/erasure-healing-common_test.go:243:3-321:5: `t.Run(fmt.Sprintf("case-%d", i), func(t *testing.T) {
			_, err = obj.PutObject(ctx, bucket, object, mustGetPutObjReader(t, bytes.NewReader(data), int64(len(data)), "", ""), ObjectOptions{})
			if err != nil {
				t.Fatalf("Failed to putObject %v", err)
			}

			partsMetadata, errs := readAllFileInfo(ctx, erasureDisks, "", bucket, object, "", false, true)
			fi, err := getLatestFileInfo(ctx, partsMetadata, z.serverPools[0].sets[0].defaultParityCount, errs)
			if err != nil {
				t.Fatalf("Failed to getLatestFileInfo %v", err)
			}

			for j := range partsMetadata {
				if errs[j] != nil {
					t.Fatalf("expected error to be nil: %s", errs[j])
				}
				partsMetadata[j].ModTime = test.modTimes[j]
			}

			tamperedIndex := -1
			switch test._tamperBackend {
			case deletePart:
				for index, err := range test.errs {
					if err != nil {
						continue
					}
					// Remove a part from a disk
					// which has a valid xl.meta,
					// and check if that disk
					// appears in outDatedDisks.
					tamperedIndex = index
					dErr := erasureDisks[index].Delete(context.Background(), bucket, pathJoin(object, fi.DataDir, "part.1"), DeleteOptions{
						Recursive: false,
						Immediate: false,
					})
					if dErr != nil {
						t.Fatalf("Failed to delete %s - %v", filepath.Join(object, "part.1"), dErr)
					}
					break
				}
			case corruptPart:
				for index, err := range test.errs {
					if err != nil {
						continue
					}
					// Corrupt a part from a disk
					// which has a valid xl.meta,
					// and check if that disk
					// appears in outDatedDisks.
					tamperedIndex = index
					filePath := pathJoin(erasureDisks[index].String(), bucket, object, fi.DataDir, "part.1")
					f, err := os.OpenFile(filePath, os.O_WRONLY|os.O_SYNC, 0)
					if err != nil {
						t.Fatalf("Failed to open %s: %s\n", filePath, err)
					}
					f.WriteString("oops") // Will cause bitrot error
					f.Close()
					break
				}

			}

			rQuorum := len(errs) - z.serverPools[0].sets[0].defaultParityCount
			onlineDisks, modTime, _ := listOnlineDisks(erasureDisks, partsMetadata, test.errs, rQuorum)
			if !modTime.Equal(test.expectedTime) {
				t.Fatalf("Expected modTime to be equal to %v but was found to be %v",
					test.expectedTime, modTime)
			}
			availableDisks, newErrs, _ := disksWithAllParts(ctx, onlineDisks, partsMetadata,
				test.errs, fi, bucket, object, madmin.HealDeepScan)
			test.errs = newErrs

			if test._tamperBackend != noTamper {
				if tamperedIndex != -1 && availableDisks[tamperedIndex] != nil {
					t.Fatalf("Drive (%v) with part.1 missing is not a drive with available data",
						erasureDisks[tamperedIndex])
				}
			}
		})`
$DIR/cmd/erasure-healing-common_test.go:243:4-321:5: `.Run(fmt.Sprintf("case-%d", i), func(t *testing.T) {
			_, err = obj.PutObject(ctx, bucket, object, mustGetPutObjReader(t, bytes.NewReader(data), int64(len(data)), "", ""), ObjectOptions{})
			if err != nil {
				t.Fatalf("Failed to putObject %v", err)
			}

			partsMetadata, errs := readAllFileInfo(ctx, erasureDisks, "", bucket, object, "", false, true)
			fi, err := getLatestFileInfo(ctx, partsMetadata, z.serverPools[0].sets[0].defaultParityCount, errs)
			if err != nil {
				t.Fatalf("Failed to getLatestFileInfo %v", err)
			}

			for j := range partsMetadata {
				if errs[j] != nil {
					t.Fatalf("expected error to be nil: %s", errs[j])
				}
				partsMetadata[j].ModTime = test.modTimes[j]
			}

			tamperedIndex := -1
			switch test._tamperBackend {
			case deletePart:
				for index, err := range test.errs {
					if err != nil {
						continue
					}
					// Remove a part from a disk
					// which has a valid xl.meta,
					// and check if that disk
					// appears in outDatedDisks.
					tamperedIndex = index
					dErr := erasureDisks[index].Delete(context.Background(), bucket, pathJoin(object, fi.DataDir, "part.1"), DeleteOptions{
						Recursive: false,
						Immediate: false,
					})
					if dErr != nil {
						t.Fatalf("Failed to delete %s - %v", filepath.Join(object, "part.1"), dErr)
					}
					break
				}
			case corruptPart:
				for index, err := range test.errs {
					if err != nil {
						continue
					}
					// Corrupt a part from a disk
					// which has a valid xl.meta,
					// and check if that disk
					// appears in outDatedDisks.
					tamperedIndex = index
					filePath := pathJoin(erasureDisks[index].String(), bucket, object, fi.DataDir, "part.1")
					f, err := os.OpenFile(filePath, os.O_WRONLY|os.O_SYNC, 0)
					if err != nil {
						t.Fatalf("Failed to open %s: %s\n", filePath, err)
					}
					f.WriteString("oops") // Will cause bitrot error
					f.Close()
					break
				}

			}

			rQuorum := len(errs) - z.serverPools[0].sets[0].defaultParityCount
			onlineDisks, modTime, _ := listOnlineDisks(erasureDisks, partsMetadata, test.errs, rQuorum)
			if !modTime.Equal(test.expectedTime) {
				t.Fatalf("Expected modTime to be equal to %v but was found to be %v",
					test.expectedTime, modTime)
			}
			availableDisks, newErrs, _ := disksWithAllParts(ctx, onlineDisks, partsMetadata,
				test.errs, fi, bucket, object, madmin.HealDeepScan)
			test.errs = newErrs

			if test._tamperBackend != noTamper {
				if tamperedIndex != -1 && availableDisks[tamperedIndex] != nil {
					t.Fatalf("Drive (%v) with part.1 missing is not a drive with available data",
						erasureDisks[tamperedIndex])
				}
			}
		})`
$DIR/cmd/erasure-healing-common_test.go:243:12-243:34: `.Sprintf("case-%d", i)`
$DIR/cmd/erasure-healing-common_test.go:244:4-244:137: `_, err = obj.PutObject(ctx, bucket, object, mustGetPutObjReader(t, bytes.NewReader(data), int64(len(data)), "", ""), ObjectOptions{})`
$DIR/cmd/erasure-healing-common_test.go:244:16-244:137: `.PutObject(ctx, bucket, object, mustGetPutObjReader(t, bytes.NewReader(data), int64(len(data)), "", ""), ObjectOptions{})`
$DIR/cmd/erasure-healing-common_test.go:244:76-244:92: `.NewReader(data)`
$DIR/cmd/erasure-healing-common_test.go:259:5-259:48: `partsMetadata[j].ModTime = test.modTimes[j]`
$DIR/cmd/erasure-healing-common_test.go:273:6-273:27: `tamperedIndex = index`
$DIR/cmd/erasure-healing-common_test.go:274:33-277:8: `.Delete(context.Background(), bucket, pathJoin(object, fi.DataDir, "part.1"), DeleteOptions{
						Recursive: false,
						Immediate: false,
					})`
$DIR/cmd/erasure-healing-common_test.go:274:48-274:61: `.Background()`
$DIR/cmd/erasure-healing-common_test.go:292:6-292:27: `tamperedIndex = index`
$DIR/cmd/erasure-healing-common_test.go:293:46-293:55: `.String()`
$DIR/cmd/erasure-healing-common_test.go:294:18-294:63: `.OpenFile(filePath, os.O_WRONLY|os.O_SYNC, 0)`
$DIR/cmd/erasure-healing-common_test.go:298:6-298:27: `f.WriteString("oops")`
$DIR/cmd/erasure-healing-common_test.go:298:7-298:27: `.WriteString("oops")`
$DIR/cmd/erasure-healing-common_test.go:307:15-307:40: `.Equal(test.expectedTime)`
$DIR/cmd/erasure-healing-common_test.go:313:4-313:23: `test.errs = newErrs`
$DIR/cmd/erasure-healing-common_test.go:328:24-328:57: `.WithCancel(context.Background())`
$DIR/cmd/erasure-healing-common_test.go:328:43-328:56: `.Background()`
$DIR/cmd/erasure-healing-common_test.go:335:2-335:21: `setObjectLayer(obj)`
$DIR/cmd/erasure-healing-common_test.go:336:11-336:42: `.Shutdown(context.Background())`
$DIR/cmd/erasure-healing-common_test.go:336:28-336:41: `.Background()`
$DIR/cmd/erasure-healing-common_test.go:339:2-339:21: `type tamperKind int`
$DIR/cmd/erasure-healing-common_test.go:340:2-344:3: `const (
		noTamper    tamperKind = iota
		deletePart  tamperKind = iota
		corruptPart tamperKind = iota
	)`
$DIR/cmd/erasure-healing-common_test.go:345:22-345:33: `.Unix(1, 0)`
$DIR/cmd/erasure-healing-common_test.go:345:33-345:39: `.UTC()`
$DIR/cmd/erasure-healing-common_test.go:346:23-346:34: `.Unix(3, 0)`
$DIR/cmd/erasure-healing-common_test.go:346:34-346:40: `.UTC()`
$DIR/cmd/erasure-healing-common_test.go:347:22-347:33: `.Unix(4, 0)`
$DIR/cmd/erasure-healing-common_test.go:347:33-347:39: `.UTC()`
$DIR/cmd/erasure-healing-common_test.go:354:4-354:39: `modTimesThreeFour[i] = fourNanoSecs`
$DIR/cmd/erasure-healing-common_test.go:355:4-355:39: `modTimesThreeNone[i] = timeSentinel`
$DIR/cmd/erasure-healing-common_test.go:358:3-358:39: `modTimesThreeFour[i] = threeNanoSecs`
$DIR/cmd/erasure-healing-common_test.go:359:3-359:39: `modTimesThreeNone[i] = threeNanoSecs`
$DIR/cmd/erasure-healing-common_test.go:404:2-404:58: `err = obj.MakeBucket(ctx, "bucket", MakeBucketOptions{})`
$DIR/cmd/erasure-healing-common_test.go:404:11-404:58: `.MakeBucket(ctx, "bucket", MakeBucketOptions{})`
$DIR/cmd/erasure-healing-common_test.go:410:15-410:57: `.Repeat([]byte("a"), smallFileThreshold/2)`
$DIR/cmd/erasure-healing-common_test.go:413:24-413:39: `.GetDisks(0, 0)`
$DIR/cmd/erasure-healing-common_test.go:420:3-504:5: `t.Run(fmt.Sprintf("case-%d", i), func(t *testing.T) {
			_, err := obj.PutObject(ctx, bucket, object,
				mustGetPutObjReader(t, bytes.NewReader(data), int64(len(data)), "", ""), ObjectOptions{})
			if err != nil {
				t.Fatalf("Failed to putObject %v", err)
			}

			partsMetadata, errs := readAllFileInfo(ctx, erasureDisks, "", bucket, object, "", true, true)
			fi, err := getLatestFileInfo(ctx, partsMetadata, z.serverPools[0].sets[0].defaultParityCount, errs)
			if err != nil {
				t.Fatalf("Failed to getLatestFileInfo %v", err)
			}

			for j := range partsMetadata {
				if errs[j] != nil {
					t.Fatalf("expected error to be nil: %s", errs[j])
				}
				partsMetadata[j].ModTime = test.modTimes[j]
			}

			if erasureDisks, err = writeUniqueFileInfo(ctx, erasureDisks, "", bucket, object, partsMetadata, diskCount(erasureDisks)); err != nil {
				t.Fatal(ctx, err)
			}

			tamperedIndex := -1
			switch test._tamperBackend {
			case deletePart:
				for index, err := range test.errs {
					if err != nil {
						continue
					}
					// Remove a part from a disk
					// which has a valid xl.meta,
					// and check if that disk
					// appears in outDatedDisks.
					tamperedIndex = index
					dErr := erasureDisks[index].Delete(context.Background(), bucket, pathJoin(object, xlStorageFormatFile), DeleteOptions{
						Recursive: false,
						Immediate: false,
					})
					if dErr != nil {
						t.Fatalf("Failed to delete %s - %v", pathJoin(object, xlStorageFormatFile), dErr)
					}
					break
				}
			case corruptPart:
				for index, err := range test.errs {
					if err != nil {
						continue
					}
					// Corrupt a part from a disk
					// which has a valid xl.meta,
					// and check if that disk
					// appears in outDatedDisks.
					tamperedIndex = index
					filePath := pathJoin(erasureDisks[index].String(), bucket, object, xlStorageFormatFile)
					f, err := os.OpenFile(filePath, os.O_WRONLY|os.O_SYNC, 0)
					if err != nil {
						t.Fatalf("Failed to open %s: %s\n", filePath, err)
					}
					f.WriteString("oops") // Will cause bitrot error
					f.Close()
					break
				}

			}

			rQuorum := len(errs) - z.serverPools[0].sets[0].defaultParityCount
			onlineDisks, modTime, _ := listOnlineDisks(erasureDisks, partsMetadata, test.errs, rQuorum)
			if !modTime.Equal(test.expectedTime) {
				t.Fatalf("Expected modTime to be equal to %v but was found to be %v",
					test.expectedTime, modTime)
			}

			availableDisks, newErrs, _ := disksWithAllParts(ctx, onlineDisks, partsMetadata,
				test.errs, fi, bucket, object, madmin.HealDeepScan)
			test.errs = newErrs

			if test._tamperBackend != noTamper {
				if tamperedIndex != -1 && availableDisks[tamperedIndex] != nil {
					t.Fatalf("Drive (%v) with part.1 missing is not a drive with available data",
						erasureDisks[tamperedIndex])
				}
			}
		})`
$DIR/cmd/erasure-healing-common_test.go:420:4-504:5: `.Run(fmt.Sprintf("case-%d", i), func(t *testing.T) {
			_, err := obj.PutObject(ctx, bucket, object,
				mustGetPutObjReader(t, bytes.NewReader(data), int64(len(data)), "", ""), ObjectOptions{})
			if err != nil {
				t.Fatalf("Failed to putObject %v", err)
			}

			partsMetadata, errs := readAllFileInfo(ctx, erasureDisks, "", bucket, object, "", true, true)
			fi, err := getLatestFileInfo(ctx, partsMetadata, z.serverPools[0].sets[0].defaultParityCount, errs)
			if err != nil {
				t.Fatalf("Failed to getLatestFileInfo %v", err)
			}

			for j := range partsMetadata {
				if errs[j] != nil {
					t.Fatalf("expected error to be nil: %s", errs[j])
				}
				partsMetadata[j].ModTime = test.modTimes[j]
			}

			if erasureDisks, err = writeUniqueFileInfo(ctx, erasureDisks, "", bucket, object, partsMetadata, diskCount(erasureDisks)); err != nil {
				t.Fatal(ctx, err)
			}

			tamperedIndex := -1
			switch test._tamperBackend {
			case deletePart:
				for index, err := range test.errs {
					if err != nil {
						continue
					}
					// Remove a part from a disk
					// which has a valid xl.meta,
					// and check if that disk
					// appears in outDatedDisks.
					tamperedIndex = index
					dErr := erasureDisks[index].Delete(context.Background(), bucket, pathJoin(object, xlStorageFormatFile), DeleteOptions{
						Recursive: false,
						Immediate: false,
					})
					if dErr != nil {
						t.Fatalf("Failed to delete %s - %v", pathJoin(object, xlStorageFormatFile), dErr)
					}
					break
				}
			case corruptPart:
				for index, err := range test.errs {
					if err != nil {
						continue
					}
					// Corrupt a part from a disk
					// which has a valid xl.meta,
					// and check if that disk
					// appears in outDatedDisks.
					tamperedIndex = index
					filePath := pathJoin(erasureDisks[index].String(), bucket, object, xlStorageFormatFile)
					f, err := os.OpenFile(filePath, os.O_WRONLY|os.O_SYNC, 0)
					if err != nil {
						t.Fatalf("Failed to open %s: %s\n", filePath, err)
					}
					f.WriteString("oops") // Will cause bitrot error
					f.Close()
					break
				}

			}

			rQuorum := len(errs) - z.serverPools[0].sets[0].defaultParityCount
			onlineDisks, modTime, _ := listOnlineDisks(erasureDisks, partsMetadata, test.errs, rQuorum)
			if !modTime.Equal(test.expectedTime) {
				t.Fatalf("Expected modTime to be equal to %v but was found to be %v",
					test.expectedTime, modTime)
			}

			availableDisks, newErrs, _ := disksWithAllParts(ctx, onlineDisks, partsMetadata,
				test.errs, fi, bucket, object, madmin.HealDeepScan)
			test.errs = newErrs

			if test._tamperBackend != noTamper {
				if tamperedIndex != -1 && availableDisks[tamperedIndex] != nil {
					t.Fatalf("Drive (%v) with part.1 missing is not a drive with available data",
						erasureDisks[tamperedIndex])
				}
			}
		})`
$DIR/cmd/erasure-healing-common_test.go:420:12-420:34: `.Sprintf("case-%d", i)`
$DIR/cmd/erasure-healing-common_test.go:421:17-422:94: `.PutObject(ctx, bucket, object,
				mustGetPutObjReader(t, bytes.NewReader(data), int64(len(data)), "", ""), ObjectOptions{})`
$DIR/cmd/erasure-healing-common_test.go:422:33-422:49: `.NewReader(data)`
$DIR/cmd/erasure-healing-common_test.go:437:5-437:48: `partsMetadata[j].ModTime = test.modTimes[j]`
$DIR/cmd/erasure-healing-common_test.go:455:6-455:27: `tamperedIndex = index`
$DIR/cmd/erasure-healing-common_test.go:456:33-459:8: `.Delete(context.Background(), bucket, pathJoin(object, xlStorageFormatFile), DeleteOptions{
						Recursive: false,
						Immediate: false,
					})`
$DIR/cmd/erasure-healing-common_test.go:456:48-456:61: `.Background()`
$DIR/cmd/erasure-healing-common_test.go:474:6-474:27: `tamperedIndex = index`
$DIR/cmd/erasure-healing-common_test.go:475:46-475:55: `.String()`
$DIR/cmd/erasure-healing-common_test.go:476:18-476:63: `.OpenFile(filePath, os.O_WRONLY|os.O_SYNC, 0)`
$DIR/cmd/erasure-healing-common_test.go:480:6-480:27: `f.WriteString("oops")`
$DIR/cmd/erasure-healing-common_test.go:480:7-480:27: `.WriteString("oops")`
$DIR/cmd/erasure-healing-common_test.go:489:15-489:40: `.Equal(test.expectedTime)`
$DIR/cmd/erasure-healing-common_test.go:496:4-496:23: `test.errs = newErrs`
$DIR/cmd/erasure-healing-common_test.go:509:24-509:57: `.WithCancel(context.Background())`
$DIR/cmd/erasure-healing-common_test.go:509:43-509:56: `.Background()`
$DIR/cmd/erasure-healing-common_test.go:515:2-515:21: `setObjectLayer(obj)`
$DIR/cmd/erasure-healing-common_test.go:516:11-516:42: `.Shutdown(context.Background())`
$DIR/cmd/erasure-healing-common_test.go:516:28-516:41: `.Background()`
$DIR/cmd/erasure-healing-common_test.go:523:15-523:58: `.Repeat([]byte("a"), 6*1024*1024*partCount)`
$DIR/cmd/erasure-healing-common_test.go:526:19-526:30: `.getDisks()`
$DIR/cmd/erasure-healing-common_test.go:527:2-527:58: `err = obj.MakeBucket(ctx, "bucket", MakeBucketOptions{})`
$DIR/cmd/erasure-healing-common_test.go:527:11-527:58: `.MakeBucket(ctx, "bucket", MakeBucketOptions{})`
$DIR/cmd/erasure-healing-common_test.go:532:2-532:135: `_, err = obj.PutObject(ctx, bucket, object, mustGetPutObjReader(t, bytes.NewReader(data), int64(len(data)), "", ""), ObjectOptions{})`
$DIR/cmd/erasure-healing-common_test.go:532:14-532:135: `.PutObject(ctx, bucket, object, mustGetPutObjReader(t, bytes.NewReader(data), int64(len(data)), "", ""), ObjectOptions{})`
$DIR/cmd/erasure-healing-common_test.go:532:74-532:90: `.NewReader(data)`
$DIR/cmd/erasure-healing-common_test.go:555:2-555:85: `erasureDisks, _, _ = listOnlineDisks(erasureDisks, partsMetadata, errs, readQuorum)`
$DIR/cmd/erasure-healing-common_test.go:576:2-576:73: `partsMetadata[0].ModTime = partsMetadata[0].ModTime.Add(-1 * time.Hour)`
$DIR/cmd/erasure-healing-common_test.go:576:45-576:73: `.ModTime.Add(-1 * time.Hour)`
$DIR/cmd/erasure-healing-common_test.go:578:2-578:41: `errs = make([]error, len(erasureDisks))`
$DIR/cmd/erasure-healing-common_test.go:579:2-580:49: `filteredDisks, _, _ = disksWithAllParts(ctx, erasureDisks, partsMetadata,
		errs, fi, bucket, object, madmin.HealDeepScan)`
$DIR/cmd/erasure-healing-common_test.go:593:2-593:40: `partsMetadata[0] = partsMetadataBackup`
$DIR/cmd/erasure-healing-common_test.go:596:2-596:40: `partsMetadataBackup = partsMetadata[1]`
$DIR/cmd/erasure-healing-common_test.go:597:2-597:41: `partsMetadata[1].DataDir = "foo-random"`
$DIR/cmd/erasure-healing-common_test.go:599:2-599:41: `errs = make([]error, len(erasureDisks))`
$DIR/cmd/erasure-healing-common_test.go:600:2-601:49: `filteredDisks, _, _ = disksWithAllParts(ctx, erasureDisks, partsMetadata,
		errs, fi, bucket, object, madmin.HealDeepScan)`
$DIR/cmd/erasure-healing-common_test.go:614:2-614:40: `partsMetadata[1] = partsMetadataBackup`
$DIR/cmd/erasure-healing-common_test.go:618:2-618:28: `diskFailures[0] = "part.1"`
$DIR/cmd/erasure-healing-common_test.go:619:2-619:28: `diskFailures[3] = "part.1"`
$DIR/cmd/erasure-healing-common_test.go:620:2-620:29: `diskFailures[15] = "part.1"`
$DIR/cmd/erasure-healing-common_test.go:624:10-624:34: `.Sprintf("part.%d", i+1)`
$DIR/cmd/erasure-healing-common_test.go:625:49-625:58: `.String()`
$DIR/cmd/erasure-healing-common_test.go:626:17-626:62: `.OpenFile(filePath, os.O_WRONLY|os.O_SYNC, 0)`
$DIR/cmd/erasure-healing-common_test.go:630:5-630:26: `f.WriteString("oops")`
$DIR/cmd/erasure-healing-common_test.go:630:6-630:26: `.WriteString("oops")`
$DIR/cmd/erasure-healing-common_test.go:636:2-636:41: `errs = make([]error, len(erasureDisks))`
$DIR/cmd/erasure-healing-common_test.go:637:2-638:49: `filteredDisks, errs, _ = disksWithAllParts(ctx, erasureDisks, partsMetadata,
		errs, fi, bucket, object, madmin.HealDeepScan)`
$DIR/cmd/erasure-healing-common_test.go:678:23-678:82: `.Date(2023, time.March, 15, 11, 18, 4, 989906961, time.UTC)`
$DIR/cmd/erasure-healing-common_test.go:689:21-689:68: `.Date(1, time.January, 1, 0, 0, 0, 0, time.UTC)`
$DIR/cmd/erasure-healing-common_test.go:714:25-714:85: `.Date(2023, time.March, 15, 19, 57, 30, 492530160, time.UTC)`
$DIR/cmd/erasure-healing-common_test.go:725:21-725:68: `.Date(1, time.January, 1, 0, 0, 0, 0, time.UTC)`
$DIR/cmd/erasure-healing-common_test.go:751:25-751:85: `.Date(2023, time.March, 15, 19, 57, 30, 492530160, time.UTC)`
$DIR/cmd/erasure-healing-common_test.go:775:5-775:18: `fi = test.fi2`
$DIR/cmd/erasure-healing-common_test.go:777:4-777:33: `metaArr = append(metaArr, fi)`
$DIR/cmd/erasure-healing-common_test.go:785:5-785:12: `match++`
$DIR/cmd/erasure-healing_test.go:42:2-42:22: `fi.Erasure.Index = 1`
$DIR/cmd/erasure-healing_test.go:45:2-45:21: `ifi.SetInlineData()`
$DIR/cmd/erasure-healing_test.go:45:5-45:21: `.SetInlineData()`
$DIR/cmd/erasure-healing_test.go:46:2-46:23: `ifi.Erasure.Index = 1`
$DIR/cmd/erasure-healing_test.go:263:3-271:5: `t.Run(testCase.name, func(t *testing.T) {
			gotMeta, dangling := isObjectDangling(testCase.metaArr, testCase.errs, testCase.dataErrs)
			if !gotMeta.Equals(testCase.expectedMeta) {
				t.Errorf("Expected %#v, got %#v", testCase.expectedMeta, gotMeta)
			}
			if dangling != testCase.expectedDangling {
				t.Errorf("Expected dangling %t, got %t", testCase.expectedDangling, dangling)
			}
		})`
$DIR/cmd/erasure-healing_test.go:263:4-271:5: `.Run(testCase.name, func(t *testing.T) {
			gotMeta, dangling := isObjectDangling(testCase.metaArr, testCase.errs, testCase.dataErrs)
			if !gotMeta.Equals(testCase.expectedMeta) {
				t.Errorf("Expected %#v, got %#v", testCase.expectedMeta, gotMeta)
			}
			if dangling != testCase.expectedDangling {
				t.Errorf("Expected dangling %t, got %t", testCase.expectedDangling, dangling)
			}
		})`
$DIR/cmd/erasure-healing_test.go:265:15-265:45: `.Equals(testCase.expectedMeta)`
$DIR/cmd/erasure-healing_test.go:277:24-277:57: `.WithCancel(context.Background())`
$DIR/cmd/erasure-healing_test.go:277:43-277:56: `.Background()`
$DIR/cmd/erasure-healing_test.go:284:11-284:42: `.Shutdown(context.Background())`
$DIR/cmd/erasure-healing_test.go:284:28-284:41: `.Background()`
$DIR/cmd/erasure-healing_test.go:298:2-298:58: `err = obj.MakeBucket(ctx, "bucket", MakeBucketOptions{})`
$DIR/cmd/erasure-healing_test.go:298:11-298:58: `.MakeBucket(ctx, "bucket", MakeBucketOptions{})`
$DIR/cmd/erasure-healing_test.go:308:2-308:26: `_, err = rand.Read(data)`
$DIR/cmd/erasure-healing_test.go:308:15-308:26: `.Read(data)`
$DIR/cmd/erasure-healing_test.go:313:2-313:125: `_, err = obj.PutObject(ctx, bucket, object, mustGetPutObjReader(t, bytes.NewReader(data), length, "", ""), ObjectOptions{})`
$DIR/cmd/erasure-healing_test.go:313:14-313:125: `.PutObject(ctx, bucket, object, mustGetPutObjReader(t, bytes.NewReader(data), length, "", ""), ObjectOptions{})`
$DIR/cmd/erasure-healing_test.go:313:74-313:90: `.NewReader(data)`
$DIR/cmd/erasure-healing_test.go:318:12-318:23: `.getDisks()`
$DIR/cmd/erasure-healing_test.go:319:30-319:133: `.ReadVersion(context.Background(), "", bucket, object, "", ReadOptions{ReadData: false, Healing: true})`
$DIR/cmd/erasure-healing_test.go:319:50-319:63: `.Background()`
$DIR/cmd/erasure-healing_test.go:326:2-326:58: `err = removeAll(pathJoin(disk.String(), bucket, object))`
$DIR/cmd/erasure-healing_test.go:326:31-326:40: `.String()`
$DIR/cmd/erasure-healing_test.go:332:2-332:115: `err = er.checkAbandonedParts(ctx, bucket, object, madmin.HealOpts{ScanMode: madmin.HealNormalScan, Remove: true})`
$DIR/cmd/erasure-healing_test.go:332:10-332:115: `.checkAbandonedParts(ctx, bucket, object, madmin.HealOpts{ScanMode: madmin.HealNormalScan, Remove: true})`
$DIR/cmd/erasure-healing_test.go:337:2-337:99: `_, err = er.HealObject(ctx, bucket, object, "", madmin.HealOpts{ScanMode: madmin.HealNormalScan})`
$DIR/cmd/erasure-healing_test.go:337:13-337:99: `.HealObject(ctx, bucket, object, "", madmin.HealOpts{ScanMode: madmin.HealNormalScan})`
$DIR/cmd/erasure-healing_test.go:342:31-342:134: `.ReadVersion(context.Background(), "", bucket, object, "", ReadOptions{ReadData: false, Healing: true})`
$DIR/cmd/erasure-healing_test.go:342:51-342:64: `.Background()`
$DIR/cmd/erasure-healing_test.go:348:21-348:46: `.Equals(fileInfoPostHeal)`
$DIR/cmd/erasure-healing_test.go:352:2-352:69: `err = os.RemoveAll(path.Join(fsDirs[0], bucket, object, "xl.meta"))`
$DIR/cmd/erasure-healing_test.go:352:10-352:69: `.RemoveAll(path.Join(fsDirs[0], bucket, object, "xl.meta"))`
$DIR/cmd/erasure-healing_test.go:352:25-352:68: `.Join(fsDirs[0], bucket, object, "xl.meta")`
$DIR/cmd/erasure-healing_test.go:360:2-360:39: `fileInfoOutDated.ModTime = time.Now()`
$DIR/cmd/erasure-healing_test.go:360:33-360:39: `.Now()`
$DIR/cmd/erasure-healing_test.go:361:2-361:86: `err = disk.WriteMetadata(context.Background(), "", bucket, object, fileInfoOutDated)`
$DIR/cmd/erasure-healing_test.go:361:12-361:86: `.WriteMetadata(context.Background(), "", bucket, object, fileInfoOutDated)`
$DIR/cmd/erasure-healing_test.go:361:34-361:47: `.Background()`
$DIR/cmd/erasure-healing_test.go:366:2-366:97: `_, err = er.HealObject(ctx, bucket, object, "", madmin.HealOpts{ScanMode: madmin.HealDeepScan})`
$DIR/cmd/erasure-healing_test.go:366:13-366:97: `.HealObject(ctx, bucket, object, "", madmin.HealOpts{ScanMode: madmin.HealDeepScan})`
$DIR/cmd/erasure-healing_test.go:371:2-371:133: `fileInfoPostHeal, err = disk.ReadVersion(context.Background(), "", bucket, object, "", ReadOptions{ReadData: false, Healing: true})`
$DIR/cmd/erasure-healing_test.go:371:30-371:133: `.ReadVersion(context.Background(), "", bucket, object, "", ReadOptions{ReadData: false, Healing: true})`
$DIR/cmd/erasure-healing_test.go:371:50-371:63: `.Background()`
$DIR/cmd/erasure-healing_test.go:377:21-377:46: `.Equals(fileInfoPostHeal)`
$DIR/cmd/erasure-healing_test.go:381:18-381:30: `.NewRandom()`
$DIR/cmd/erasure-healing_test.go:383:14-383:57: `.Join(drive, bucket, object, uuid.String())`
$DIR/cmd/erasure-healing_test.go:383:47-383:56: `.String()`
$DIR/cmd/erasure-healing_test.go:384:3-384:38: `err = os.MkdirAll(dir, os.ModePerm)`
$DIR/cmd/erasure-healing_test.go:384:11-384:38: `.MkdirAll(dir, os.ModePerm)`
$DIR/cmd/erasure-healing_test.go:388:3-388:80: `err = os.WriteFile(pathJoin(dir, "part.1"), []byte("some data"), os.ModePerm)`
$DIR/cmd/erasure-healing_test.go:388:11-388:80: `.WriteFile(pathJoin(dir, "part.1"), []byte("some data"), os.ModePerm)`
$DIR/cmd/erasure-healing_test.go:395:2-395:115: `err = er.checkAbandonedParts(ctx, bucket, object, madmin.HealOpts{ScanMode: madmin.HealNormalScan, Remove: true})`
$DIR/cmd/erasure-healing_test.go:395:10-395:115: `.checkAbandonedParts(ctx, bucket, object, madmin.HealOpts{ScanMode: madmin.HealNormalScan, Remove: true})`
$DIR/cmd/erasure-healing_test.go:401:14-401:57: `.Join(drive, bucket, object, uuid.String())`
$DIR/cmd/erasure-healing_test.go:401:47-401:56: `.String()`
$DIR/cmd/erasure-healing_test.go:402:15-402:49: `.ReadFile(pathJoin(dir, "part.1"))`
$DIR/cmd/erasure-healing_test.go:410:2-410:50: `err = os.RemoveAll(path.Join(fsDirs[0], bucket))`
$DIR/cmd/erasure-healing_test.go:410:10-410:50: `.RemoveAll(path.Join(fsDirs[0], bucket))`
$DIR/cmd/erasure-healing_test.go:410:25-410:49: `.Join(fsDirs[0], bucket)`
$DIR/cmd/erasure-healing_test.go:415:2-418:4: `_, err = obj.HealBucket(ctx, bucket, madmin.HealOpts{
		DryRun: false,
		Remove: false,
	})`
$DIR/cmd/erasure-healing_test.go:415:14-418:4: `.HealBucket(ctx, bucket, madmin.HealOpts{
		DryRun: false,
		Remove: false,
	})`
$DIR/cmd/erasure-healing_test.go:423:2-423:65: `_, err = er.getDisks()[0].StatVol(context.Background(), bucket)`
$DIR/cmd/erasure-healing_test.go:423:13-423:24: `.getDisks()`
$DIR/cmd/erasure-healing_test.go:423:27-423:65: `.StatVol(context.Background(), bucket)`
$DIR/cmd/erasure-healing_test.go:423:43-423:56: `.Background()`
$DIR/cmd/erasure-healing_test.go:431:24-431:57: `.WithCancel(context.Background())`
$DIR/cmd/erasure-healing_test.go:431:43-431:56: `.Background()`
$DIR/cmd/erasure-healing_test.go:438:11-438:42: `.Shutdown(context.Background())`
$DIR/cmd/erasure-healing_test.go:438:28-438:41: `.Background()`
$DIR/cmd/erasure-healing_test.go:452:2-452:81: `err = obj.MakeBucket(ctx, "bucket", MakeBucketOptions{VersioningEnabled: true})`
$DIR/cmd/erasure-healing_test.go:452:11-452:81: `.MakeBucket(ctx, "bucket", MakeBucketOptions{VersioningEnabled: true})`
$DIR/cmd/erasure-healing_test.go:462:2-462:26: `_, err = rand.Read(data)`
$DIR/cmd/erasure-healing_test.go:462:15-462:26: `.Read(data)`
$DIR/cmd/erasure-healing_test.go:467:17-467:128: `.PutObject(ctx, bucket, object, mustGetPutObjReader(t, bytes.NewReader(data), length, "", ""), ObjectOptions{})`
$DIR/cmd/erasure-healing_test.go:467:77-467:93: `.NewReader(data)`
$DIR/cmd/erasure-healing_test.go:472:2-472:24: `_, _ = rand.Read(data)`
$DIR/cmd/erasure-healing_test.go:472:13-472:24: `.Read(data)`
$DIR/cmd/erasure-healing_test.go:473:17-473:128: `.PutObject(ctx, bucket, object, mustGetPutObjReader(t, bytes.NewReader(data), length, "", ""), ObjectOptions{})`
$DIR/cmd/erasure-healing_test.go:473:77-473:93: `.NewReader(data)`
$DIR/cmd/erasure-healing_test.go:478:12-478:23: `.getDisks()`
$DIR/cmd/erasure-healing_test.go:479:31-479:145: `.ReadVersion(context.Background(), "", bucket, object, oi1.VersionID, ReadOptions{ReadData: false, Healing: true})`
$DIR/cmd/erasure-healing_test.go:479:51-479:64: `.Background()`
$DIR/cmd/erasure-healing_test.go:483:31-483:145: `.ReadVersion(context.Background(), "", bucket, object, oi2.VersionID, ReadOptions{ReadData: false, Healing: true})`
$DIR/cmd/erasure-healing_test.go:483:51-483:64: `.Background()`
$DIR/cmd/erasure-healing_test.go:490:2-490:58: `err = removeAll(pathJoin(disk.String(), bucket, object))`
$DIR/cmd/erasure-healing_test.go:490:31-490:40: `.String()`
$DIR/cmd/erasure-healing_test.go:496:2-496:115: `err = er.checkAbandonedParts(ctx, bucket, object, madmin.HealOpts{ScanMode: madmin.HealNormalScan, Remove: true})`
$DIR/cmd/erasure-healing_test.go:496:10-496:115: `.checkAbandonedParts(ctx, bucket, object, madmin.HealOpts{ScanMode: madmin.HealNormalScan, Remove: true})`
$DIR/cmd/erasure-healing_test.go:501:2-501:99: `_, err = er.HealObject(ctx, bucket, object, "", madmin.HealOpts{ScanMode: madmin.HealNormalScan})`
$DIR/cmd/erasure-healing_test.go:501:13-501:99: `.HealObject(ctx, bucket, object, "", madmin.HealOpts{ScanMode: madmin.HealNormalScan})`
$DIR/cmd/erasure-healing_test.go:506:32-506:146: `.ReadVersion(context.Background(), "", bucket, object, oi1.VersionID, ReadOptions{ReadData: false, Healing: true})`
$DIR/cmd/erasure-healing_test.go:506:52-506:65: `.Background()`
$DIR/cmd/erasure-healing_test.go:510:32-510:146: `.ReadVersion(context.Background(), "", bucket, object, oi2.VersionID, ReadOptions{ReadData: false, Healing: true})`
$DIR/cmd/erasure-healing_test.go:510:52-510:65: `.Background()`
$DIR/cmd/erasure-healing_test.go:516:22-516:48: `.Equals(fileInfoPostHeal1)`
$DIR/cmd/erasure-healing_test.go:519:22-519:48: `.Equals(fileInfoPostHeal2)`
$DIR/cmd/erasure-healing_test.go:523:2-523:69: `err = os.RemoveAll(path.Join(fsDirs[0], bucket, object, "xl.meta"))`
$DIR/cmd/erasure-healing_test.go:523:10-523:69: `.RemoveAll(path.Join(fsDirs[0], bucket, object, "xl.meta"))`
$DIR/cmd/erasure-healing_test.go:523:25-523:68: `.Join(fsDirs[0], bucket, object, "xl.meta")`
$DIR/cmd/erasure-healing_test.go:531:2-531:39: `fileInfoOutDated.ModTime = time.Now()`
$DIR/cmd/erasure-healing_test.go:531:33-531:39: `.Now()`
$DIR/cmd/erasure-healing_test.go:532:2-532:86: `err = disk.WriteMetadata(context.Background(), "", bucket, object, fileInfoOutDated)`
$DIR/cmd/erasure-healing_test.go:532:12-532:86: `.WriteMetadata(context.Background(), "", bucket, object, fileInfoOutDated)`
$DIR/cmd/erasure-healing_test.go:532:34-532:47: `.Background()`
$DIR/cmd/erasure-healing_test.go:537:2-537:97: `_, err = er.HealObject(ctx, bucket, object, "", madmin.HealOpts{ScanMode: madmin.HealDeepScan})`
$DIR/cmd/erasure-healing_test.go:537:13-537:97: `.HealObject(ctx, bucket, object, "", madmin.HealOpts{ScanMode: madmin.HealDeepScan})`
$DIR/cmd/erasure-healing_test.go:542:2-542:134: `fileInfoPostHeal1, err = disk.ReadVersion(context.Background(), "", bucket, object, "", ReadOptions{ReadData: false, Healing: true})`
$DIR/cmd/erasure-healing_test.go:542:31-542:134: `.ReadVersion(context.Background(), "", bucket, object, "", ReadOptions{ReadData: false, Healing: true})`
$DIR/cmd/erasure-healing_test.go:542:51-542:64: `.Background()`
$DIR/cmd/erasure-healing_test.go:548:22-548:48: `.Equals(fileInfoPostHeal1)`
$DIR/cmd/erasure-healing_test.go:552:2-552:134: `fileInfoPostHeal2, err = disk.ReadVersion(context.Background(), "", bucket, object, "", ReadOptions{ReadData: false, Healing: true})`
$DIR/cmd/erasure-healing_test.go:552:31-552:134: `.ReadVersion(context.Background(), "", bucket, object, "", ReadOptions{ReadData: false, Healing: true})`
$DIR/cmd/erasure-healing_test.go:552:51-552:64: `.Background()`
$DIR/cmd/erasure-healing_test.go:558:22-558:48: `.Equals(fileInfoPostHeal2)`
$DIR/cmd/erasure-healing_test.go:562:18-562:30: `.NewRandom()`
$DIR/cmd/erasure-healing_test.go:564:14-564:57: `.Join(drive, bucket, object, uuid.String())`
$DIR/cmd/erasure-healing_test.go:564:47-564:56: `.String()`
$DIR/cmd/erasure-healing_test.go:565:3-565:38: `err = os.MkdirAll(dir, os.ModePerm)`
$DIR/cmd/erasure-healing_test.go:565:11-565:38: `.MkdirAll(dir, os.ModePerm)`
$DIR/cmd/erasure-healing_test.go:569:3-569:80: `err = os.WriteFile(pathJoin(dir, "part.1"), []byte("some data"), os.ModePerm)`
$DIR/cmd/erasure-healing_test.go:569:11-569:80: `.WriteFile(pathJoin(dir, "part.1"), []byte("some data"), os.ModePerm)`
$DIR/cmd/erasure-healing_test.go:576:2-576:115: `err = er.checkAbandonedParts(ctx, bucket, object, madmin.HealOpts{ScanMode: madmin.HealNormalScan, Remove: true})`
$DIR/cmd/erasure-healing_test.go:576:10-576:115: `.checkAbandonedParts(ctx, bucket, object, madmin.HealOpts{ScanMode: madmin.HealNormalScan, Remove: true})`
$DIR/cmd/erasure-healing_test.go:582:14-582:57: `.Join(drive, bucket, object, uuid.String())`
$DIR/cmd/erasure-healing_test.go:582:47-582:56: `.String()`
$DIR/cmd/erasure-healing_test.go:583:15-583:49: `.ReadFile(pathJoin(dir, "part.1"))`
$DIR/cmd/erasure-healing_test.go:591:2-591:50: `err = os.RemoveAll(path.Join(fsDirs[0], bucket))`
$DIR/cmd/erasure-healing_test.go:591:10-591:50: `.RemoveAll(path.Join(fsDirs[0], bucket))`
$DIR/cmd/erasure-healing_test.go:591:25-591:49: `.Join(fsDirs[0], bucket)`
$DIR/cmd/erasure-healing_test.go:596:2-599:4: `_, err = obj.HealBucket(ctx, bucket, madmin.HealOpts{
		DryRun: false,
		Remove: false,
	})`
$DIR/cmd/erasure-healing_test.go:596:14-599:4: `.HealBucket(ctx, bucket, madmin.HealOpts{
		DryRun: false,
		Remove: false,
	})`
$DIR/cmd/erasure-healing_test.go:604:2-604:65: `_, err = er.getDisks()[0].StatVol(context.Background(), bucket)`
$DIR/cmd/erasure-healing_test.go:604:13-604:24: `.getDisks()`
$DIR/cmd/erasure-healing_test.go:604:27-604:65: `.StatVol(context.Background(), bucket)`
$DIR/cmd/erasure-healing_test.go:604:43-604:56: `.Background()`
$DIR/cmd/erasure-healing_test.go:611:24-611:57: `.WithCancel(context.Background())`
$DIR/cmd/erasure-healing_test.go:611:43-611:56: `.Background()`
$DIR/cmd/erasure-healing_test.go:614:2-614:24: `resetGlobalHealState()`
$DIR/cmd/erasure-healing_test.go:620:3-620:36: `globalStorageClass.Update(saveSC)`
$DIR/cmd/erasure-healing_test.go:620:21-620:36: `.Update(saveSC)`
$DIR/cmd/erasure-healing_test.go:622:2-626:4: `globalStorageClass.Update(storageclass.Config{
		Standard: storageclass.StorageClass{
			Parity: 4,
		},
	})`
$DIR/cmd/erasure-healing_test.go:622:20-626:4: `.Update(storageclass.Config{
		Standard: storageclass.StorageClass{
			Parity: 4,
		},
	})`
$DIR/cmd/erasure-healing_test.go:642:2-642:26: `setObjectLayer(objLayer)`
$DIR/cmd/erasure-healing_test.go:646:15-646:45: `.Repeat([]byte("a"), 128*1024)`
$DIR/cmd/erasure-healing_test.go:648:2-648:61: `err = objLayer.MakeBucket(ctx, bucket, MakeBucketOptions{})`
$DIR/cmd/erasure-healing_test.go:648:16-648:61: `.MakeBucket(ctx, bucket, MakeBucketOptions{})`
$DIR/cmd/erasure-healing_test.go:657:2-657:156: `globalBucketMetadataSys.Update(ctx, bucket, bucketVersioningConfig, []byte(`<VersioningConfiguration><Status>Enabled</Status></VersioningConfiguration>`))`
$DIR/cmd/erasure-healing_test.go:657:25-657:156: `.Update(ctx, bucket, bucketVersioningConfig, []byte(`<VersioningConfiguration><Status>Enabled</Status></VersioningConfiguration>`))`
$DIR/cmd/erasure-healing_test.go:659:2-661:4: `_, err = objLayer.PutObject(ctx, bucket, object, mustGetPutObjReader(t, bytes.NewReader(data), int64(len(data)), "", ""), ObjectOptions{
		Versioned: true,
	})`
$DIR/cmd/erasure-healing_test.go:659:19-661:4: `.PutObject(ctx, bucket, object, mustGetPutObjReader(t, bytes.NewReader(data), int64(len(data)), "", ""), ObjectOptions{
		Versioned: true,
	})`
$DIR/cmd/erasure-healing_test.go:659:79-659:95: `.NewReader(data)`
$DIR/cmd/erasure-healing_test.go:667:3-667:70: `objLayer.(*erasureServerPools).serverPools[0].erasureDisksMu.Lock()`
$DIR/cmd/erasure-healing_test.go:667:48-667:70: `.erasureDisksMu.Lock()`
$DIR/cmd/erasure-healing_test.go:668:3-668:24: `copy(disks, newDisks)`
$DIR/cmd/erasure-healing_test.go:669:3-669:72: `objLayer.(*erasureServerPools).serverPools[0].erasureDisksMu.Unlock()`
$DIR/cmd/erasure-healing_test.go:669:48-669:72: `.erasureDisksMu.Unlock()`
$DIR/cmd/erasure-healing_test.go:672:3-672:70: `objLayer.(*erasureServerPools).serverPools[0].erasureDisksMu.Lock()`
$DIR/cmd/erasure-healing_test.go:672:48-672:70: `.erasureDisksMu.Lock()`
$DIR/cmd/erasure-healing_test.go:674:3-674:72: `objLayer.(*erasureServerPools).serverPools[0].erasureDisksMu.Unlock()`
$DIR/cmd/erasure-healing_test.go:674:48-674:72: `.erasureDisksMu.Unlock()`
$DIR/cmd/erasure-healing_test.go:679:2-679:30: `setDisks(nil, nil, nil, nil)`
$DIR/cmd/erasure-healing_test.go:682:26-682:92: `.DeleteObject(ctx, bucket, object, ObjectOptions{Versioned: true})`
$DIR/cmd/erasure-healing_test.go:688:2-688:27: `setDisks(orgDisks[:4]...)`
$DIR/cmd/erasure-healing_test.go:690:34-690:137: `.ReadVersion(context.Background(), "", bucket, object, "", ReadOptions{ReadData: false, Healing: true})`
$DIR/cmd/erasure-healing_test.go:690:54-690:67: `.Background()`
$DIR/cmd/erasure-healing_test.go:699:19-703:5: `.HealObjects(ctx, bucket, "", madmin.HealOpts{Remove: true},
		func(bucket, object, vid string, scanMode madmin.HealScanMode) error {
			_, err := objLayer.HealObject(ctx, bucket, object, vid, madmin.HealOpts{ScanMode: scanMode, Remove: true})
			return err
		})`
$DIR/cmd/erasure-healing_test.go:701:22-701:110: `.HealObject(ctx, bucket, object, vid, madmin.HealOpts{ScanMode: scanMode, Remove: true})`
$DIR/cmd/erasure-healing_test.go:707:35-707:138: `.ReadVersion(context.Background(), "", bucket, object, "", ReadOptions{ReadData: false, Healing: true})`
$DIR/cmd/erasure-healing_test.go:707:55-707:68: `.Background()`
$DIR/cmd/erasure-healing_test.go:717:23-720:5: `.DeleteObject(ctx, bucket, object, ObjectOptions{
			Versioned: true,
			VersionID: objInfo.VersionID,
		})`
$DIR/cmd/erasure-healing_test.go:725:2-725:30: `setDisks(nil, nil, nil, nil)`
$DIR/cmd/erasure-healing_test.go:727:36-727:52: `.NewReader(data)`
$DIR/cmd/erasure-healing_test.go:728:2-730:4: `_, err = objLayer.PutObject(ctx, bucket, object, rd, ObjectOptions{
		Versioned: true,
	})`
$DIR/cmd/erasure-healing_test.go:728:19-730:4: `.PutObject(ctx, bucket, object, rd, ObjectOptions{
		Versioned: true,
	})`
$DIR/cmd/erasure-healing_test.go:735:2-735:27: `setDisks(orgDisks[:4]...)`
$DIR/cmd/erasure-healing_test.go:737:2-737:132: `fileInfoPreHeal, err = disk.ReadVersion(context.Background(), "", bucket, object, "", ReadOptions{ReadData: false, Healing: true})`
$DIR/cmd/erasure-healing_test.go:737:29-737:132: `.ReadVersion(context.Background(), "", bucket, object, "", ReadOptions{ReadData: false, Healing: true})`
$DIR/cmd/erasure-healing_test.go:737:49-737:62: `.Background()`
$DIR/cmd/erasure-healing_test.go:746:19-750:5: `.HealObjects(ctx, bucket, "", madmin.HealOpts{Remove: true},
		func(bucket, object, vid string, scanMode madmin.HealScanMode) error {
			_, err := objLayer.HealObject(ctx, bucket, object, vid, madmin.HealOpts{ScanMode: scanMode, Remove: true})
			return err
		})`
$DIR/cmd/erasure-healing_test.go:748:22-748:110: `.HealObject(ctx, bucket, object, vid, madmin.HealOpts{ScanMode: scanMode, Remove: true})`
$DIR/cmd/erasure-healing_test.go:754:2-754:19: `disk = getDisk(0)`
$DIR/cmd/erasure-healing_test.go:755:2-755:133: `fileInfoPostHeal, err = disk.ReadVersion(context.Background(), "", bucket, object, "", ReadOptions{ReadData: false, Healing: true})`
$DIR/cmd/erasure-healing_test.go:755:30-755:133: `.ReadVersion(context.Background(), "", bucket, object, "", ReadOptions{ReadData: false, Healing: true})`
$DIR/cmd/erasure-healing_test.go:755:50-755:63: `.Background()`
$DIR/cmd/erasure-healing_test.go:764:2-764:78: `rd = mustGetPutObjReader(t, bytes.NewReader(data), int64(len(data)), "", "")`
$DIR/cmd/erasure-healing_test.go:764:35-764:51: `.NewReader(data)`
$DIR/cmd/erasure-healing_test.go:765:2-767:4: `objInfo, err = objLayer.PutObject(ctx, bucket, object, rd, ObjectOptions{
		Versioned: true,
	})`
$DIR/cmd/erasure-healing_test.go:765:25-767:4: `.PutObject(ctx, bucket, object, rd, ObjectOptions{
		Versioned: true,
	})`
$DIR/cmd/erasure-healing_test.go:772:2-772:30: `setDisks(nil, nil, nil, nil)`
$DIR/cmd/erasure-healing_test.go:775:2-778:4: `_, err = objLayer.DeleteObject(ctx, bucket, object, ObjectOptions{
		Versioned: true,
		VersionID: objInfo.VersionID,
	})`
$DIR/cmd/erasure-healing_test.go:775:19-778:4: `.DeleteObject(ctx, bucket, object, ObjectOptions{
		Versioned: true,
		VersionID: objInfo.VersionID,
	})`
$DIR/cmd/erasure-healing_test.go:783:2-783:27: `setDisks(orgDisks[:4]...)`
$DIR/cmd/erasure-healing_test.go:785:2-785:19: `disk = getDisk(0)`
$DIR/cmd/erasure-healing_test.go:786:2-786:132: `fileInfoPreHeal, err = disk.ReadVersion(context.Background(), "", bucket, object, "", ReadOptions{ReadData: false, Healing: true})`
$DIR/cmd/erasure-healing_test.go:786:29-786:132: `.ReadVersion(context.Background(), "", bucket, object, "", ReadOptions{ReadData: false, Healing: true})`
$DIR/cmd/erasure-healing_test.go:786:49-786:62: `.Background()`
$DIR/cmd/erasure-healing_test.go:795:19-799:5: `.HealObjects(ctx, bucket, "", madmin.HealOpts{Remove: true},
		func(bucket, object, vid string, scanMode madmin.HealScanMode) error {
			_, err := objLayer.HealObject(ctx, bucket, object, vid, madmin.HealOpts{ScanMode: scanMode, Remove: true})
			return err
		})`
$DIR/cmd/erasure-healing_test.go:797:22-797:110: `.HealObject(ctx, bucket, object, vid, madmin.HealOpts{ScanMode: scanMode, Remove: true})`
$DIR/cmd/erasure-healing_test.go:803:2-803:19: `disk = getDisk(0)`
$DIR/cmd/erasure-healing_test.go:804:2-804:133: `fileInfoPostHeal, err = disk.ReadVersion(context.Background(), "", bucket, object, "", ReadOptions{ReadData: false, Healing: true})`
$DIR/cmd/erasure-healing_test.go:804:30-804:133: `.ReadVersion(context.Background(), "", bucket, object, "", ReadOptions{ReadData: false, Healing: true})`
$DIR/cmd/erasure-healing_test.go:804:50-804:63: `.Background()`
$DIR/cmd/erasure-healing_test.go:815:24-815:57: `.WithCancel(context.Background())`
$DIR/cmd/erasure-healing_test.go:815:43-815:56: `.Background()`
$DIR/cmd/erasure-healing_test.go:818:2-818:24: `resetGlobalHealState()`
$DIR/cmd/erasure-healing_test.go:830:2-830:67: `pools = append(pools, mustGetPoolEndpoints(1, fsDirs[16:]...)...)`
$DIR/cmd/erasure-healing_test.go:840:15-840:48: `.Repeat([]byte("a"), 5*1024*1024)`
$DIR/cmd/erasure-healing_test.go:843:2-843:61: `err = objLayer.MakeBucket(ctx, bucket, MakeBucketOptions{})`
$DIR/cmd/erasure-healing_test.go:843:16-843:61: `.MakeBucket(ctx, bucket, MakeBucketOptions{})`
$DIR/cmd/erasure-healing_test.go:850:22-850:68: `.NewMultipartUpload(ctx, bucket, object, opts)`
$DIR/cmd/erasure-healing_test.go:857:26-857:162: `.PutObjectPart(ctx, bucket, object, res.UploadID, partID, mustGetPutObjReader(t, bytes.NewReader(data), int64(len(data)), "", ""), opts)`
$DIR/cmd/erasure-healing_test.go:857:112-857:128: `.NewReader(data)`
$DIR/cmd/erasure-healing_test.go:861:3-864:5: `uploadedParts = append(uploadedParts, CompletePart{
			PartNumber: pInfo.PartNumber,
			ETag:       pInfo.ETag,
		})`
$DIR/cmd/erasure-healing_test.go:867:2-867:110: `_, err = objLayer.CompleteMultipartUpload(ctx, bucket, object, res.UploadID, uploadedParts, ObjectOptions{})`
$DIR/cmd/erasure-healing_test.go:867:19-867:110: `.CompleteMultipartUpload(ctx, bucket, object, res.UploadID, uploadedParts, ObjectOptions{})`
$DIR/cmd/erasure-healing_test.go:887:21-887:32: `.getDisks()`
$DIR/cmd/erasure-healing_test.go:891:12-891:37: `.Is(err, errFileNotFound)`
$DIR/cmd/erasure-healing_test.go:899:4-902:6: `erasureDisks[i].Delete(context.Background(), bucket, pathJoin(object, xlStorageFormatFile), DeleteOptions{
				Recursive: false,
				Immediate: false,
			})`
$DIR/cmd/erasure-healing_test.go:899:19-902:6: `.Delete(context.Background(), bucket, pathJoin(object, xlStorageFormatFile), DeleteOptions{
				Recursive: false,
				Immediate: false,
			})`
$DIR/cmd/erasure-healing_test.go:899:34-899:47: `.Background()`
$DIR/cmd/erasure-healing_test.go:906:3-906:63: `_, err = objLayer.HealObject(ctx, bucket, object, "", hopts)`
$DIR/cmd/erasure-healing_test.go:906:20-906:63: `.HealObject(ctx, bucket, object, "", hopts)`
$DIR/cmd/erasure-healing_test.go:911:3-911:92: `fileInfos, errs = readAllFileInfo(ctx, erasureDisks, "", bucket, object, "", false, true)`
$DIR/cmd/erasure-healing_test.go:916:3-916:102: `fileInfos, errs = readAllFileInfo(ctx, erasureDisks, "", minioMetaBucket, cfgFile, "", false, true)`
$DIR/cmd/erasure-healing_test.go:917:3-917:76: `nfi, err = getLatestFileInfo(ctx, fileInfos, er.defaultParityCount, errs)`
$DIR/cmd/erasure-healing_test.go:918:12-918:37: `.Is(err, errFileNotFound)`
$DIR/cmd/erasure-healing_test.go:926:4-929:6: `erasureDisks[i].Delete(context.Background(), minioMetaBucket, pathJoin(cfgFile, xlStorageFormatFile), DeleteOptions{
				Recursive: false,
				Immediate: false,
			})`
$DIR/cmd/erasure-healing_test.go:926:19-929:6: `.Delete(context.Background(), minioMetaBucket, pathJoin(cfgFile, xlStorageFormatFile), DeleteOptions{
				Recursive: false,
				Immediate: false,
			})`
$DIR/cmd/erasure-healing_test.go:926:34-926:47: `.Background()`
$DIR/cmd/erasure-healing_test.go:933:3-933:73: `_, err = objLayer.HealObject(ctx, minioMetaBucket, cfgFile, "", hopts)`
$DIR/cmd/erasure-healing_test.go:933:20-933:73: `.HealObject(ctx, minioMetaBucket, cfgFile, "", hopts)`
$DIR/cmd/erasure-healing_test.go:938:3-938:102: `fileInfos, errs = readAllFileInfo(ctx, erasureDisks, "", minioMetaBucket, cfgFile, "", false, true)`
$DIR/cmd/erasure-healing_test.go:946:24-946:57: `.WithCancel(context.Background())`
$DIR/cmd/erasure-healing_test.go:946:43-946:56: `.Background()`
$DIR/cmd/erasure-healing_test.go:949:2-949:24: `resetGlobalHealState()`
$DIR/cmd/erasure-healing_test.go:961:2-961:67: `pools = append(pools, mustGetPoolEndpoints(1, fsDirs[16:]...)...)`
$DIR/cmd/erasure-healing_test.go:971:15-971:48: `.Repeat([]byte("a"), 5*1024*1024)`
$DIR/cmd/erasure-healing_test.go:974:2-974:61: `err = objLayer.MakeBucket(ctx, bucket, MakeBucketOptions{})`
$DIR/cmd/erasure-healing_test.go:974:16-974:61: `.MakeBucket(ctx, bucket, MakeBucketOptions{})`
$DIR/cmd/erasure-healing_test.go:983:17-983:63: `.NewMultipartUpload(ctx, bucket, object, opts)`
$DIR/cmd/erasure-healing_test.go:991:21-991:153: `.PutObjectPart(ctx, bucket, object, uploadID, partID, mustGetPutObjReader(t, bytes.NewReader(data), int64(len(data)), "", ""), opts)`
$DIR/cmd/erasure-healing_test.go:991:103-991:119: `.NewReader(data)`
$DIR/cmd/erasure-healing_test.go:995:3-998:5: `uploadedParts = append(uploadedParts, CompletePart{
			PartNumber: pInfo.PartNumber,
			ETag:       pInfo.ETag,
		})`
$DIR/cmd/erasure-healing_test.go:1001:2-1001:101: `_, err = set.CompleteMultipartUpload(ctx, bucket, object, uploadID, uploadedParts, ObjectOptions{})`
$DIR/cmd/erasure-healing_test.go:1001:14-1001:101: `.CompleteMultipartUpload(ctx, bucket, object, uploadID, uploadedParts, ObjectOptions{})`
$DIR/cmd/erasure-healing_test.go:1008:20-1008:31: `.getDisks()`
$DIR/cmd/erasure-healing_test.go:1010:2-1013:4: `err = firstDisk.Delete(context.Background(), bucket, pathJoin(object, xlStorageFormatFile), DeleteOptions{
		Recursive: false,
		Immediate: false,
	})`
$DIR/cmd/erasure-healing_test.go:1010:17-1013:4: `.Delete(context.Background(), bucket, pathJoin(object, xlStorageFormatFile), DeleteOptions{
		Recursive: false,
		Immediate: false,
	})`
$DIR/cmd/erasure-healing_test.go:1010:32-1010:45: `.Background()`
$DIR/cmd/erasure-healing_test.go:1018:2-1018:105: `_, err = objLayer.HealObject(ctx, bucket, object, "", madmin.HealOpts{ScanMode: madmin.HealNormalScan})`
$DIR/cmd/erasure-healing_test.go:1018:19-1018:105: `.HealObject(ctx, bucket, object, "", madmin.HealOpts{ScanMode: madmin.HealNormalScan})`
$DIR/cmd/erasure-healing_test.go:1029:23-1029:105: `.StatInfoFile(context.Background(), bucket, object+"/"+xlStorageFormatFile, false)`
$DIR/cmd/erasure-healing_test.go:1029:44-1029:57: `.Background()`
$DIR/cmd/erasure-healing_test.go:1033:2-1036:4: `err = firstDisk.Delete(context.Background(), bucket, pathJoin(object, fi.DataDir, "part.1"), DeleteOptions{
		Recursive: false,
		Immediate: false,
	})`
$DIR/cmd/erasure-healing_test.go:1033:17-1036:4: `.Delete(context.Background(), bucket, pathJoin(object, fi.DataDir, "part.1"), DeleteOptions{
		Recursive: false,
		Immediate: false,
	})`
$DIR/cmd/erasure-healing_test.go:1033:32-1033:45: `.Background()`
$DIR/cmd/erasure-healing_test.go:1041:2-1041:106: `err = firstDisk.WriteAll(context.Background(), bucket, pathJoin(object, fi.DataDir, "part.1"), []byte{})`
$DIR/cmd/erasure-healing_test.go:1041:17-1041:106: `.WriteAll(context.Background(), bucket, pathJoin(object, fi.DataDir, "part.1"), []byte{})`
$DIR/cmd/erasure-healing_test.go:1041:34-1041:47: `.Background()`
$DIR/cmd/erasure-healing_test.go:1046:2-1046:132: `_, err = objLayer.HealObject(ctx, bucket, object, "", madmin.HealOpts{DryRun: false, Remove: true, ScanMode: madmin.HealDeepScan})`
$DIR/cmd/erasure-healing_test.go:1046:19-1046:132: `.HealObject(ctx, bucket, object, "", madmin.HealOpts{DryRun: false, Remove: true, ScanMode: madmin.HealDeepScan})`
$DIR/cmd/erasure-healing_test.go:1051:2-1051:91: `fileInfos, errs = readAllFileInfo(ctx, erasureDisks, "", bucket, object, "", false, true)`
$DIR/cmd/erasure-healing_test.go:1057:13-1057:32: `.DeepEqual(fi, nfi)`
$DIR/cmd/erasure-healing_test.go:1061:2-1064:4: `err = firstDisk.Delete(context.Background(), bucket, pathJoin(object, fi.DataDir, "part.1"), DeleteOptions{
		Recursive: false,
		Immediate: false,
	})`
$DIR/cmd/erasure-healing_test.go:1061:17-1064:4: `.Delete(context.Background(), bucket, pathJoin(object, fi.DataDir, "part.1"), DeleteOptions{
		Recursive: false,
		Immediate: false,
	})`
$DIR/cmd/erasure-healing_test.go:1061:32-1061:45: `.Background()`
$DIR/cmd/erasure-healing_test.go:1069:16-1069:51: `.Repeat([]byte("b"), int(nfi.Size))`
$DIR/cmd/erasure-healing_test.go:1070:2-1070:103: `err = firstDisk.WriteAll(context.Background(), bucket, pathJoin(object, fi.DataDir, "part.1"), bdata)`
$DIR/cmd/erasure-healing_test.go:1070:17-1070:103: `.WriteAll(context.Background(), bucket, pathJoin(object, fi.DataDir, "part.1"), bdata)`
$DIR/cmd/erasure-healing_test.go:1070:34-1070:47: `.Background()`
$DIR/cmd/erasure-healing_test.go:1075:2-1075:132: `_, err = objLayer.HealObject(ctx, bucket, object, "", madmin.HealOpts{DryRun: false, Remove: true, ScanMode: madmin.HealDeepScan})`
$DIR/cmd/erasure-healing_test.go:1075:19-1075:132: `.HealObject(ctx, bucket, object, "", madmin.HealOpts{DryRun: false, Remove: true, ScanMode: madmin.HealDeepScan})`
$DIR/cmd/erasure-healing_test.go:1080:2-1080:91: `fileInfos, errs = readAllFileInfo(ctx, erasureDisks, "", bucket, object, "", false, true)`
$DIR/cmd/erasure-healing_test.go:1081:2-1081:75: `nfi, err = getLatestFileInfo(ctx, fileInfos, er.defaultParityCount, errs)`
$DIR/cmd/erasure-healing_test.go:1086:13-1086:32: `.DeepEqual(fi, nfi)`
$DIR/cmd/erasure-healing_test.go:1093:3-1096:5: `erasureDisks[i].Delete(context.Background(), bucket, pathJoin(object, xlStorageFormatFile), DeleteOptions{
			Recursive: false,
			Immediate: false,
		})`
$DIR/cmd/erasure-healing_test.go:1093:18-1096:5: `.Delete(context.Background(), bucket, pathJoin(object, xlStorageFormatFile), DeleteOptions{
			Recursive: false,
			Immediate: false,
		})`
$DIR/cmd/erasure-healing_test.go:1093:33-1093:46: `.Background()`
$DIR/cmd/erasure-healing_test.go:1100:2-1100:132: `_, err = objLayer.HealObject(ctx, bucket, object, "", madmin.HealOpts{DryRun: false, Remove: true, ScanMode: madmin.HealDeepScan})`
$DIR/cmd/erasure-healing_test.go:1100:19-1100:132: `.HealObject(ctx, bucket, object, "", madmin.HealOpts{DryRun: false, Remove: true, ScanMode: madmin.HealDeepScan})`
$DIR/cmd/erasure-healing_test.go:1108:2-1108:71: `_, err = objLayer.GetObjectInfo(ctx, bucket, object, ObjectOptions{})`
$DIR/cmd/erasure-healing_test.go:1108:19-1108:71: `.GetObjectInfo(ctx, bucket, object, ObjectOptions{})`
$DIR/cmd/erasure-healing_test.go:1114:30-1114:119: `.StatInfoFile(context.Background(), bucket, pathJoin(object, xlStorageFormatFile), false)`
$DIR/cmd/erasure-healing_test.go:1114:51-1114:64: `.Background()`
$DIR/cmd/erasure-healing_test.go:1122:24-1122:57: `.WithCancel(context.Background())`
$DIR/cmd/erasure-healing_test.go:1122:43-1122:56: `.Background()`
$DIR/cmd/erasure-healing_test.go:1125:2-1125:24: `resetGlobalHealState()`
$DIR/cmd/erasure-healing_test.go:1144:15-1144:48: `.Repeat([]byte("a"), 5*1024*1024)`
$DIR/cmd/erasure-healing_test.go:1147:2-1147:61: `err = objLayer.MakeBucket(ctx, bucket, MakeBucketOptions{})`
$DIR/cmd/erasure-healing_test.go:1147:16-1147:61: `.MakeBucket(ctx, bucket, MakeBucketOptions{})`
$DIR/cmd/erasure-healing_test.go:1154:22-1154:68: `.NewMultipartUpload(ctx, bucket, object, opts)`
$DIR/cmd/erasure-healing_test.go:1161:26-1161:162: `.PutObjectPart(ctx, bucket, object, res.UploadID, partID, mustGetPutObjReader(t, bytes.NewReader(data), int64(len(data)), "", ""), opts)`
$DIR/cmd/erasure-healing_test.go:1161:112-1161:128: `.NewReader(data)`
$DIR/cmd/erasure-healing_test.go:1165:3-1168:5: `uploadedParts = append(uploadedParts, CompletePart{
			PartNumber: pInfo.PartNumber,
			ETag:       pInfo.ETag,
		})`
$DIR/cmd/erasure-healing_test.go:1171:2-1171:110: `_, err = objLayer.CompleteMultipartUpload(ctx, bucket, object, res.UploadID, uploadedParts, ObjectOptions{})`
$DIR/cmd/erasure-healing_test.go:1171:19-1171:110: `.CompleteMultipartUpload(ctx, bucket, object, res.UploadID, uploadedParts, ObjectOptions{})`
$DIR/cmd/erasure-healing_test.go:1178:20-1178:31: `.getDisks()`
$DIR/cmd/erasure-healing_test.go:1188:2-1191:4: `err = firstDisk.Delete(context.Background(), bucket, pathJoin(object, xlStorageFormatFile), DeleteOptions{
		Recursive: false,
		Immediate: false,
	})`
$DIR/cmd/erasure-healing_test.go:1188:17-1191:4: `.Delete(context.Background(), bucket, pathJoin(object, xlStorageFormatFile), DeleteOptions{
		Recursive: false,
		Immediate: false,
	})`
$DIR/cmd/erasure-healing_test.go:1188:32-1188:45: `.Background()`
$DIR/cmd/erasure-healing_test.go:1196:2-1196:105: `_, err = objLayer.HealObject(ctx, bucket, object, "", madmin.HealOpts{ScanMode: madmin.HealNormalScan})`
$DIR/cmd/erasure-healing_test.go:1196:19-1196:105: `.HealObject(ctx, bucket, object, "", madmin.HealOpts{ScanMode: madmin.HealNormalScan})`
$DIR/cmd/erasure-healing_test.go:1201:23-1201:105: `.StatInfoFile(context.Background(), bucket, object+"/"+xlStorageFormatFile, false)`
$DIR/cmd/erasure-healing_test.go:1201:44-1201:57: `.Background()`
$DIR/cmd/erasure-healing_test.go:1205:2-1205:91: `fileInfos, errs = readAllFileInfo(ctx, erasureDisks, "", bucket, object, "", false, true)`
$DIR/cmd/erasure-healing_test.go:1211:13-1211:33: `.DeepEqual(fi, nfi1)`
$DIR/cmd/erasure-healing_test.go:1216:2-1216:111: `err = firstDisk.WriteAll(context.Background(), bucket, pathJoin(object, xlStorageFormatFile), []byte("abcd"))`
$DIR/cmd/erasure-healing_test.go:1216:17-1216:111: `.WriteAll(context.Background(), bucket, pathJoin(object, xlStorageFormatFile), []byte("abcd"))`
$DIR/cmd/erasure-healing_test.go:1216:34-1216:47: `.Background()`
$DIR/cmd/erasure-healing_test.go:1221:2-1221:105: `_, err = objLayer.HealObject(ctx, bucket, object, "", madmin.HealOpts{ScanMode: madmin.HealNormalScan})`
$DIR/cmd/erasure-healing_test.go:1221:19-1221:105: `.HealObject(ctx, bucket, object, "", madmin.HealOpts{ScanMode: madmin.HealNormalScan})`
$DIR/cmd/erasure-healing_test.go:1226:2-1226:91: `fileInfos, errs = readAllFileInfo(ctx, erasureDisks, "", bucket, object, "", false, true)`
$DIR/cmd/erasure-healing_test.go:1232:13-1232:33: `.DeepEqual(fi, nfi2)`
$DIR/cmd/erasure-healing_test.go:1239:3-1242:5: `erasureDisks[i].Delete(context.Background(), bucket, pathJoin(object, xlStorageFormatFile), DeleteOptions{
			Recursive: false,
			Immediate: false,
		})`
$DIR/cmd/erasure-healing_test.go:1239:18-1242:5: `.Delete(context.Background(), bucket, pathJoin(object, xlStorageFormatFile), DeleteOptions{
			Recursive: false,
			Immediate: false,
		})`
$DIR/cmd/erasure-healing_test.go:1239:33-1239:46: `.Background()`
$DIR/cmd/erasure-healing_test.go:1246:2-1246:132: `_, err = objLayer.HealObject(ctx, bucket, object, "", madmin.HealOpts{DryRun: false, Remove: true, ScanMode: madmin.HealDeepScan})`
$DIR/cmd/erasure-healing_test.go:1246:19-1246:132: `.HealObject(ctx, bucket, object, "", madmin.HealOpts{DryRun: false, Remove: true, ScanMode: madmin.HealDeepScan})`
$DIR/cmd/erasure-healing_test.go:1254:2-1254:71: `_, err = objLayer.GetObjectInfo(ctx, bucket, object, ObjectOptions{})`
$DIR/cmd/erasure-healing_test.go:1254:19-1254:71: `.GetObjectInfo(ctx, bucket, object, ObjectOptions{})`
$DIR/cmd/erasure-healing_test.go:1261:24-1261:57: `.WithCancel(context.Background())`
$DIR/cmd/erasure-healing_test.go:1261:43-1261:56: `.Background()`
$DIR/cmd/erasure-healing_test.go:1264:2-1264:24: `resetGlobalHealState()`
$DIR/cmd/erasure-healing_test.go:1283:15-1283:48: `.Repeat([]byte("a"), 5*1024*1024)`
$DIR/cmd/erasure-healing_test.go:1286:2-1286:61: `err = objLayer.MakeBucket(ctx, bucket, MakeBucketOptions{})`
$DIR/cmd/erasure-healing_test.go:1286:16-1286:61: `.MakeBucket(ctx, bucket, MakeBucketOptions{})`
$DIR/cmd/erasure-healing_test.go:1293:22-1293:68: `.NewMultipartUpload(ctx, bucket, object, opts)`
$DIR/cmd/erasure-healing_test.go:1300:26-1300:162: `.PutObjectPart(ctx, bucket, object, res.UploadID, partID, mustGetPutObjReader(t, bytes.NewReader(data), int64(len(data)), "", ""), opts)`
$DIR/cmd/erasure-healing_test.go:1300:112-1300:128: `.NewReader(data)`
$DIR/cmd/erasure-healing_test.go:1304:3-1307:5: `uploadedParts = append(uploadedParts, CompletePart{
			PartNumber: pInfo.PartNumber,
			ETag:       pInfo.ETag,
		})`
$DIR/cmd/erasure-healing_test.go:1310:2-1310:110: `_, err = objLayer.CompleteMultipartUpload(ctx, bucket, object, res.UploadID, uploadedParts, ObjectOptions{})`
$DIR/cmd/erasure-healing_test.go:1310:19-1310:110: `.CompleteMultipartUpload(ctx, bucket, object, res.UploadID, uploadedParts, ObjectOptions{})`
$DIR/cmd/erasure-healing_test.go:1318:20-1318:31: `.getDisks()`
$DIR/cmd/erasure-healing_test.go:1328:36-1328:114: `.ReadAll(context.Background(), bucket, pathJoin(object, fi.DataDir, "part.1"))`
$DIR/cmd/erasure-healing_test.go:1328:52-1328:65: `.Background()`
$DIR/cmd/erasure-healing_test.go:1333:37-1333:115: `.ReadAll(context.Background(), bucket, pathJoin(object, fi.DataDir, "part.1"))`
$DIR/cmd/erasure-healing_test.go:1333:53-1333:66: `.Background()`
$DIR/cmd/erasure-healing_test.go:1339:2-1342:4: `err = firstDisk.Delete(context.Background(), bucket, pathJoin(object, fi.DataDir, "part.1"), DeleteOptions{
		Recursive: false,
		Immediate: false,
	})`
$DIR/cmd/erasure-healing_test.go:1339:17-1342:4: `.Delete(context.Background(), bucket, pathJoin(object, fi.DataDir, "part.1"), DeleteOptions{
		Recursive: false,
		Immediate: false,
	})`
$DIR/cmd/erasure-healing_test.go:1339:32-1339:45: `.Background()`
$DIR/cmd/erasure-healing_test.go:1347:2-1347:105: `_, err = objLayer.HealObject(ctx, bucket, object, "", madmin.HealOpts{ScanMode: madmin.HealNormalScan})`
$DIR/cmd/erasure-healing_test.go:1347:19-1347:105: `.HealObject(ctx, bucket, object, "", madmin.HealOpts{ScanMode: madmin.HealNormalScan})`
$DIR/cmd/erasure-healing_test.go:1352:33-1352:111: `.ReadAll(context.Background(), bucket, pathJoin(object, fi.DataDir, "part.1"))`
$DIR/cmd/erasure-healing_test.go:1352:49-1352:62: `.Background()`
$DIR/cmd/erasure-healing_test.go:1357:13-1357:56: `.DeepEqual(part1Disk1Origin, part1Replaced)`
$DIR/cmd/erasure-healing_test.go:1362:2-1362:116: `err = firstDisk.WriteAll(context.Background(), bucket, pathJoin(object, fi.DataDir, "part.1"), []byte("foobytes"))`
$DIR/cmd/erasure-healing_test.go:1362:17-1362:116: `.WriteAll(context.Background(), bucket, pathJoin(object, fi.DataDir, "part.1"), []byte("foobytes"))`
$DIR/cmd/erasure-healing_test.go:1362:34-1362:47: `.Background()`
$DIR/cmd/erasure-healing_test.go:1367:2-1367:105: `_, err = objLayer.HealObject(ctx, bucket, object, "", madmin.HealOpts{ScanMode: madmin.HealNormalScan})`
$DIR/cmd/erasure-healing_test.go:1367:19-1367:105: `.HealObject(ctx, bucket, object, "", madmin.HealOpts{ScanMode: madmin.HealNormalScan})`
$DIR/cmd/erasure-healing_test.go:1372:2-1372:110: `part1Replaced, err = firstDisk.ReadAll(context.Background(), bucket, pathJoin(object, fi.DataDir, "part.1"))`
$DIR/cmd/erasure-healing_test.go:1372:32-1372:110: `.ReadAll(context.Background(), bucket, pathJoin(object, fi.DataDir, "part.1"))`
$DIR/cmd/erasure-healing_test.go:1372:48-1372:61: `.Background()`
$DIR/cmd/erasure-healing_test.go:1377:13-1377:56: `.DeepEqual(part1Disk1Origin, part1Replaced)`
$DIR/cmd/erasure-healing_test.go:1382:2-1382:116: `err = firstDisk.WriteAll(context.Background(), bucket, pathJoin(object, fi.DataDir, "part.1"), []byte("foobytes"))`
$DIR/cmd/erasure-healing_test.go:1382:17-1382:116: `.WriteAll(context.Background(), bucket, pathJoin(object, fi.DataDir, "part.1"), []byte("foobytes"))`
$DIR/cmd/erasure-healing_test.go:1382:34-1382:47: `.Background()`
$DIR/cmd/erasure-healing_test.go:1387:2-1390:4: `err = secondDisk.Delete(context.Background(), bucket, object, DeleteOptions{
		Recursive: true,
		Immediate: false,
	})`
$DIR/cmd/erasure-healing_test.go:1387:18-1390:4: `.Delete(context.Background(), bucket, object, DeleteOptions{
		Recursive: true,
		Immediate: false,
	})`
$DIR/cmd/erasure-healing_test.go:1387:33-1387:46: `.Background()`
$DIR/cmd/erasure-healing_test.go:1395:2-1395:105: `_, err = objLayer.HealObject(ctx, bucket, object, "", madmin.HealOpts{ScanMode: madmin.HealNormalScan})`
$DIR/cmd/erasure-healing_test.go:1395:19-1395:105: `.HealObject(ctx, bucket, object, "", madmin.HealOpts{ScanMode: madmin.HealNormalScan})`
$DIR/cmd/erasure-healing_test.go:1400:37-1400:115: `.ReadAll(context.Background(), bucket, pathJoin(object, fi.DataDir, "part.1"))`
$DIR/cmd/erasure-healing_test.go:1400:53-1400:66: `.Background()`
$DIR/cmd/erasure-healing_test.go:1405:13-1405:60: `.DeepEqual(part1Disk1Origin, partReconstructed)`
$DIR/cmd/erasure-healing_test.go:1409:2-1409:115: `partReconstructed, err = secondDisk.ReadAll(context.Background(), bucket, pathJoin(object, fi.DataDir, "part.1"))`
$DIR/cmd/erasure-healing_test.go:1409:37-1409:115: `.ReadAll(context.Background(), bucket, pathJoin(object, fi.DataDir, "part.1"))`
$DIR/cmd/erasure-healing_test.go:1409:53-1409:66: `.Background()`
$DIR/cmd/erasure-healing_test.go:1414:13-1414:60: `.DeepEqual(part1Disk2Origin, partReconstructed)`
$DIR/cmd/erasure-healing_test.go:1421:24-1421:57: `.WithCancel(context.Background())`
$DIR/cmd/erasure-healing_test.go:1421:43-1421:56: `.Background()`
$DIR/cmd/erasure-healing_test.go:1440:15-1440:48: `.Repeat([]byte("a"), 5*1024*1024)`
$DIR/cmd/erasure-healing_test.go:1443:2-1443:56: `err = obj.MakeBucket(ctx, bucket, MakeBucketOptions{})`
$DIR/cmd/erasure-healing_test.go:1443:11-1443:56: `.MakeBucket(ctx, bucket, MakeBucketOptions{})`
$DIR/cmd/erasure-healing_test.go:1450:17-1450:63: `.NewMultipartUpload(ctx, bucket, object, opts)`
$DIR/cmd/erasure-healing_test.go:1457:21-1457:157: `.PutObjectPart(ctx, bucket, object, res.UploadID, partID, mustGetPutObjReader(t, bytes.NewReader(data), int64(len(data)), "", ""), opts)`
$DIR/cmd/erasure-healing_test.go:1457:107-1457:123: `.NewReader(data)`
$DIR/cmd/erasure-healing_test.go:1461:3-1464:5: `uploadedParts = append(uploadedParts, CompletePart{
			PartNumber: pInfo.PartNumber,
			ETag:       pInfo.ETag,
		})`
$DIR/cmd/erasure-healing_test.go:1470:17-1470:28: `.getDisks()`
$DIR/cmd/erasure-healing_test.go:1472:2-1472:105: `_, err = obj.CompleteMultipartUpload(ctx, bucket, object, res.UploadID, uploadedParts, ObjectOptions{})`
$DIR/cmd/erasure-healing_test.go:1472:14-1472:105: `.CompleteMultipartUpload(ctx, bucket, object, res.UploadID, uploadedParts, ObjectOptions{})`
$DIR/cmd/erasure-healing_test.go:1478:2-1481:4: `err = firstDisk.Delete(context.Background(), bucket, object, DeleteOptions{
		Recursive: true,
		Immediate: false,
	})`
$DIR/cmd/erasure-healing_test.go:1478:17-1481:4: `.Delete(context.Background(), bucket, object, DeleteOptions{
		Recursive: true,
		Immediate: false,
	})`
$DIR/cmd/erasure-healing_test.go:1478:32-1478:45: `.Background()`
$DIR/cmd/erasure-healing_test.go:1486:2-1486:100: `_, err = obj.HealObject(ctx, bucket, object, "", madmin.HealOpts{ScanMode: madmin.HealNormalScan})`
$DIR/cmd/erasure-healing_test.go:1486:14-1486:100: `.HealObject(ctx, bucket, object, "", madmin.HealOpts{ScanMode: madmin.HealNormalScan})`
$DIR/cmd/erasure-healing_test.go:1491:23-1491:105: `.StatInfoFile(context.Background(), bucket, object+"/"+xlStorageFormatFile, false)`
$DIR/cmd/erasure-healing_test.go:1491:44-1491:57: `.Background()`
$DIR/cmd/erasure-healing_test.go:1495:20-1495:31: `.getDisks()`
$DIR/cmd/erasure-healing_test.go:1496:2-1496:40: `z.serverPools[0].erasureDisksMu.Lock()`
$DIR/cmd/erasure-healing_test.go:1496:18-1496:40: `.erasureDisksMu.Lock()`
$DIR/cmd/erasure-healing_test.go:1500:4-1500:25: `erasureDisks[i] = nil`
$DIR/cmd/erasure-healing_test.go:1504:2-1504:42: `z.serverPools[0].erasureDisksMu.Unlock()`
$DIR/cmd/erasure-healing_test.go:1504:18-1504:42: `.erasureDisksMu.Unlock()`
$DIR/cmd/erasure-healing_test.go:1507:2-1509:4: `_, err = obj.HealObject(ctx, bucket, object, "", madmin.HealOpts{
		ScanMode: madmin.HealDeepScan,
	})`
$DIR/cmd/erasure-healing_test.go:1507:14-1509:4: `.HealObject(ctx, bucket, object, "", madmin.HealOpts{
		ScanMode: madmin.HealDeepScan,
	})`
$DIR/cmd/erasure-healing_test.go:1520:24-1520:57: `.WithCancel(context.Background())`
$DIR/cmd/erasure-healing_test.go:1520:43-1520:56: `.Background()`
$DIR/cmd/erasure-healing_test.go:1540:2-1540:56: `err = obj.MakeBucket(ctx, bucket, MakeBucketOptions{})`
$DIR/cmd/erasure-healing_test.go:1540:11-1540:56: `.MakeBucket(ctx, bucket, MakeBucketOptions{})`
$DIR/cmd/erasure-healing_test.go:1546:2-1547:47: `_, err = obj.PutObject(ctx, bucket, object, mustGetPutObjReader(t,
		bytes.NewReader([]byte{}), 0, "", ""), opts)`
$DIR/cmd/erasure-healing_test.go:1546:14-1547:47: `.PutObject(ctx, bucket, object, mustGetPutObjReader(t,
		bytes.NewReader([]byte{}), 0, "", ""), opts)`
$DIR/cmd/erasure-healing_test.go:1547:8-1547:28: `.NewReader([]byte{})`
$DIR/cmd/erasure-healing_test.go:1555:17-1555:28: `.getDisks()`
$DIR/cmd/erasure-healing_test.go:1556:2-1556:98: `err = firstDisk.DeleteVol(context.Background(), pathJoin(bucket, encodeDirObject(object)), true)`
$DIR/cmd/erasure-healing_test.go:1556:17-1556:98: `.DeleteVol(context.Background(), pathJoin(bucket, encodeDirObject(object)), true)`
$DIR/cmd/erasure-healing_test.go:1556:35-1556:48: `.Background()`
$DIR/cmd/erasure-healing_test.go:1562:16-1562:102: `.HealObject(ctx, bucket, object, "", madmin.HealOpts{ScanMode: madmin.HealNormalScan})`
$DIR/cmd/erasure-healing_test.go:1568:2-1568:93: `_, err = firstDisk.StatVol(context.Background(), pathJoin(bucket, encodeDirObject(object)))`
$DIR/cmd/erasure-healing_test.go:1568:20-1568:93: `.StatVol(context.Background(), pathJoin(bucket, encodeDirObject(object)))`
$DIR/cmd/erasure-healing_test.go:1568:36-1568:49: `.Background()`
$DIR/cmd/erasure-healing_test.go:1586:2-1586:101: `hr, err = obj.HealObject(ctx, bucket, object, "", madmin.HealOpts{ScanMode: madmin.HealNormalScan})`
$DIR/cmd/erasure-healing_test.go:1586:15-1586:101: `.HealObject(ctx, bucket, object, "", madmin.HealOpts{ScanMode: madmin.HealNormalScan})`
$DIR/cmd/erasure-healing_test.go:1615:3-1725:5: `t.Run(test.name, func(t *testing.T) {
			ctx, cancel := context.WithCancel(context.Background())
			defer cancel()

			nDisks := 16
			fsDirs, err := getRandomDisks(nDisks)
			if err != nil {
				t.Fatal(err)
			}

			defer removeRoots(fsDirs)

			obj, _, err := initObjectLayer(ctx, mustGetPoolEndpoints(0, fsDirs...))
			if err != nil {
				t.Fatal(err)
			}
			bucket := "bucket"
			object := "object"

			data := make([]byte, test.dataSize)
			_, err = rand.Read(data)
			if err != nil {
				t.Fatal(err)
			}
			var opts ObjectOptions

			err = obj.MakeBucket(ctx, bucket, MakeBucketOptions{})
			if err != nil {
				t.Fatalf("Failed to make a bucket - %v", err)
			}

			_, err = obj.PutObject(ctx, bucket, object,
				mustGetPutObjReader(t, bytes.NewReader(data), int64(len(data)), "", ""), opts)
			if err != nil {
				t.Fatal(err)
			}

			actualH := sha256.New()
			_, err = io.Copy(actualH, bytes.NewReader(data))
			if err != nil {
				return
			}
			actualSha256 := actualH.Sum(nil)

			z := obj.(*erasureServerPools)
			er := z.serverPools[0].getHashedSet(object)

			disks := er.getDisks()
			distribution := hashOrder(pathJoin(bucket, object), nDisks)
			shuffledDisks := shuffleDisks(disks, distribution)

			// remove last data shard
			err = removeAll(pathJoin(shuffledDisks[11].String(), bucket, object))
			if err != nil {
				t.Fatalf("Failed to delete a file - %v", err)
			}
			_, err = obj.HealObject(ctx, bucket, object, "", madmin.HealOpts{
				ScanMode: madmin.HealNormalScan,
			})
			if err != nil {
				t.Fatal(err)
			}

			firstGr, err := obj.GetObjectNInfo(ctx, bucket, object, nil, nil, ObjectOptions{NoLock: true})
			if err != nil {
				t.Fatal(err)
			}
			defer firstGr.Close()

			firstHealedH := sha256.New()
			_, err = io.Copy(firstHealedH, firstGr)
			if err != nil {
				t.Fatal(err)
			}
			firstHealedDataSha256 := firstHealedH.Sum(nil)

			if !bytes.Equal(actualSha256, firstHealedDataSha256) {
				t.Fatalf("object healed wrong, expected %x, got %x",
					actualSha256, firstHealedDataSha256)
			}

			// remove another data shard
			if err = removeAll(pathJoin(shuffledDisks[1].String(), bucket, object)); err != nil {
				t.Fatalf("Failed to delete a file - %v", err)
			}

			_, err = obj.HealObject(ctx, bucket, object, "", madmin.HealOpts{
				ScanMode: madmin.HealNormalScan,
			})
			if err != nil {
				t.Fatal(err)
			}

			secondGr, err := obj.GetObjectNInfo(ctx, bucket, object, nil, nil, ObjectOptions{NoLock: true})
			if err != nil {
				t.Fatal(err)
			}
			defer secondGr.Close()

			secondHealedH := sha256.New()
			_, err = io.Copy(secondHealedH, secondGr)
			if err != nil {
				t.Fatal(err)
			}
			secondHealedDataSha256 := secondHealedH.Sum(nil)

			if !bytes.Equal(actualSha256, secondHealedDataSha256) {
				t.Fatalf("object healed wrong, expected %x, got %x",
					actualSha256, secondHealedDataSha256)
			}
		})`
$DIR/cmd/erasure-healing_test.go:1615:4-1725:5: `.Run(test.name, func(t *testing.T) {
			ctx, cancel := context.WithCancel(context.Background())
			defer cancel()

			nDisks := 16
			fsDirs, err := getRandomDisks(nDisks)
			if err != nil {
				t.Fatal(err)
			}

			defer removeRoots(fsDirs)

			obj, _, err := initObjectLayer(ctx, mustGetPoolEndpoints(0, fsDirs...))
			if err != nil {
				t.Fatal(err)
			}
			bucket := "bucket"
			object := "object"

			data := make([]byte, test.dataSize)
			_, err = rand.Read(data)
			if err != nil {
				t.Fatal(err)
			}
			var opts ObjectOptions

			err = obj.MakeBucket(ctx, bucket, MakeBucketOptions{})
			if err != nil {
				t.Fatalf("Failed to make a bucket - %v", err)
			}

			_, err = obj.PutObject(ctx, bucket, object,
				mustGetPutObjReader(t, bytes.NewReader(data), int64(len(data)), "", ""), opts)
			if err != nil {
				t.Fatal(err)
			}

			actualH := sha256.New()
			_, err = io.Copy(actualH, bytes.NewReader(data))
			if err != nil {
				return
			}
			actualSha256 := actualH.Sum(nil)

			z := obj.(*erasureServerPools)
			er := z.serverPools[0].getHashedSet(object)

			disks := er.getDisks()
			distribution := hashOrder(pathJoin(bucket, object), nDisks)
			shuffledDisks := shuffleDisks(disks, distribution)

			// remove last data shard
			err = removeAll(pathJoin(shuffledDisks[11].String(), bucket, object))
			if err != nil {
				t.Fatalf("Failed to delete a file - %v", err)
			}
			_, err = obj.HealObject(ctx, bucket, object, "", madmin.HealOpts{
				ScanMode: madmin.HealNormalScan,
			})
			if err != nil {
				t.Fatal(err)
			}

			firstGr, err := obj.GetObjectNInfo(ctx, bucket, object, nil, nil, ObjectOptions{NoLock: true})
			if err != nil {
				t.Fatal(err)
			}
			defer firstGr.Close()

			firstHealedH := sha256.New()
			_, err = io.Copy(firstHealedH, firstGr)
			if err != nil {
				t.Fatal(err)
			}
			firstHealedDataSha256 := firstHealedH.Sum(nil)

			if !bytes.Equal(actualSha256, firstHealedDataSha256) {
				t.Fatalf("object healed wrong, expected %x, got %x",
					actualSha256, firstHealedDataSha256)
			}

			// remove another data shard
			if err = removeAll(pathJoin(shuffledDisks[1].String(), bucket, object)); err != nil {
				t.Fatalf("Failed to delete a file - %v", err)
			}

			_, err = obj.HealObject(ctx, bucket, object, "", madmin.HealOpts{
				ScanMode: madmin.HealNormalScan,
			})
			if err != nil {
				t.Fatal(err)
			}

			secondGr, err := obj.GetObjectNInfo(ctx, bucket, object, nil, nil, ObjectOptions{NoLock: true})
			if err != nil {
				t.Fatal(err)
			}
			defer secondGr.Close()

			secondHealedH := sha256.New()
			_, err = io.Copy(secondHealedH, secondGr)
			if err != nil {
				t.Fatal(err)
			}
			secondHealedDataSha256 := secondHealedH.Sum(nil)

			if !bytes.Equal(actualSha256, secondHealedDataSha256) {
				t.Fatalf("object healed wrong, expected %x, got %x",
					actualSha256, secondHealedDataSha256)
			}
		})`
$DIR/cmd/erasure-healing_test.go:1616:26-1616:59: `.WithCancel(context.Background())`
$DIR/cmd/erasure-healing_test.go:1616:45-1616:58: `.Background()`
$DIR/cmd/erasure-healing_test.go:1635:4-1635:28: `_, err = rand.Read(data)`
$DIR/cmd/erasure-healing_test.go:1635:17-1635:28: `.Read(data)`
$DIR/cmd/erasure-healing_test.go:1641:4-1641:58: `err = obj.MakeBucket(ctx, bucket, MakeBucketOptions{})`
$DIR/cmd/erasure-healing_test.go:1641:13-1641:58: `.MakeBucket(ctx, bucket, MakeBucketOptions{})`
$DIR/cmd/erasure-healing_test.go:1646:4-1647:83: `_, err = obj.PutObject(ctx, bucket, object,
				mustGetPutObjReader(t, bytes.NewReader(data), int64(len(data)), "", ""), opts)`
$DIR/cmd/erasure-healing_test.go:1646:16-1647:83: `.PutObject(ctx, bucket, object,
				mustGetPutObjReader(t, bytes.NewReader(data), int64(len(data)), "", ""), opts)`
$DIR/cmd/erasure-healing_test.go:1647:33-1647:49: `.NewReader(data)`
$DIR/cmd/erasure-healing_test.go:1652:21-1652:27: `.New()`
$DIR/cmd/erasure-healing_test.go:1653:4-1653:52: `_, err = io.Copy(actualH, bytes.NewReader(data))`
$DIR/cmd/erasure-healing_test.go:1653:15-1653:52: `.Copy(actualH, bytes.NewReader(data))`
$DIR/cmd/erasure-healing_test.go:1653:35-1653:51: `.NewReader(data)`
$DIR/cmd/erasure-healing_test.go:1657:27-1657:36: `.Sum(nil)`
$DIR/cmd/erasure-healing_test.go:1660:26-1660:47: `.getHashedSet(object)`
$DIR/cmd/erasure-healing_test.go:1662:15-1662:26: `.getDisks()`
$DIR/cmd/erasure-healing_test.go:1667:4-1667:73: `err = removeAll(pathJoin(shuffledDisks[11].String(), bucket, object))`
$DIR/cmd/erasure-healing_test.go:1667:46-1667:55: `.String()`
$DIR/cmd/erasure-healing_test.go:1671:4-1673:6: `_, err = obj.HealObject(ctx, bucket, object, "", madmin.HealOpts{
				ScanMode: madmin.HealNormalScan,
			})`
$DIR/cmd/erasure-healing_test.go:1671:16-1673:6: `.HealObject(ctx, bucket, object, "", madmin.HealOpts{
				ScanMode: madmin.HealNormalScan,
			})`
$DIR/cmd/erasure-healing_test.go:1678:23-1678:98: `.GetObjectNInfo(ctx, bucket, object, nil, nil, ObjectOptions{NoLock: true})`
$DIR/cmd/erasure-healing_test.go:1684:26-1684:32: `.New()`
$DIR/cmd/erasure-healing_test.go:1685:4-1685:43: `_, err = io.Copy(firstHealedH, firstGr)`
$DIR/cmd/erasure-healing_test.go:1685:15-1685:43: `.Copy(firstHealedH, firstGr)`
$DIR/cmd/erasure-healing_test.go:1689:41-1689:50: `.Sum(nil)`
$DIR/cmd/erasure-healing_test.go:1691:13-1691:56: `.Equal(actualSha256, firstHealedDataSha256)`
$DIR/cmd/erasure-healing_test.go:1697:48-1697:57: `.String()`
$DIR/cmd/erasure-healing_test.go:1701:4-1703:6: `_, err = obj.HealObject(ctx, bucket, object, "", madmin.HealOpts{
				ScanMode: madmin.HealNormalScan,
			})`
$DIR/cmd/erasure-healing_test.go:1701:16-1703:6: `.HealObject(ctx, bucket, object, "", madmin.HealOpts{
				ScanMode: madmin.HealNormalScan,
			})`
$DIR/cmd/erasure-healing_test.go:1708:24-1708:99: `.GetObjectNInfo(ctx, bucket, object, nil, nil, ObjectOptions{NoLock: true})`
$DIR/cmd/erasure-healing_test.go:1714:27-1714:33: `.New()`
$DIR/cmd/erasure-healing_test.go:1715:4-1715:45: `_, err = io.Copy(secondHealedH, secondGr)`
$DIR/cmd/erasure-healing_test.go:1715:15-1715:45: `.Copy(secondHealedH, secondGr)`
$DIR/cmd/erasure-healing_test.go:1719:43-1719:52: `.Sum(nil)`
$DIR/cmd/erasure-healing_test.go:1721:13-1721:57: `.Equal(actualSha256, secondHealedDataSha256)`
$DIR/cmd/erasure-metadata-utils_test.go:59:3-59:87: `canceledErrs = append(canceledErrs, fmt.Errorf("error %d: %w", i, context.Canceled))`
$DIR/cmd/erasure-metadata-utils_test.go:102:41-102:54: `.Background()`
$DIR/cmd/erasure-metadata-utils_test.go:106:45-106:58: `.Background()`
$DIR/cmd/erasure-metadata-utils_test.go:135:14-135:59: `.DeepEqual(testCase.hashedOrder, hashedOrder)`
$DIR/cmd/erasure-metadata-utils_test.go:151:24-151:57: `.WithCancel(context.Background())`
$DIR/cmd/erasure-metadata-utils_test.go:151:43-151:56: `.Background()`
$DIR/cmd/erasure-metadata-utils_test.go:161:3-161:21: `removeRoots(disks)`
$DIR/cmd/erasure-metadata-utils_test.go:199:24-199:57: `.WithCancel(context.Background())`
$DIR/cmd/erasure-metadata-utils_test.go:199:43-199:56: `.Background()`
$DIR/cmd/erasure-metadata-utils_test.go:209:3-209:21: `removeRoots(disks)`
$DIR/cmd/erasure-metadata-utils_test.go:219:3-232:5: `t.Run(fmt.Sprintf("%d", x), func(t *testing.T) {
			var first [17]int
			rng := rand.New(rand.NewSource(0))
			var tmp [16]byte
			rng.Read(tmp[:])
			prefix := hex.EncodeToString(tmp[:])
			for i := 0; i < 10000; i++ {
				rng.Read(tmp[:])

				y := hashOrder(fmt.Sprintf("%s/%x", prefix, hex.EncodeToString(tmp[:3])), x)
				first[y[0]]++
			}
			t.Log("first:", first[:x])
		})`
$DIR/cmd/erasure-metadata-utils_test.go:219:4-232:5: `.Run(fmt.Sprintf("%d", x), func(t *testing.T) {
			var first [17]int
			rng := rand.New(rand.NewSource(0))
			var tmp [16]byte
			rng.Read(tmp[:])
			prefix := hex.EncodeToString(tmp[:])
			for i := 0; i < 10000; i++ {
				rng.Read(tmp[:])

				y := hashOrder(fmt.Sprintf("%s/%x", prefix, hex.EncodeToString(tmp[:3])), x)
				first[y[0]]++
			}
			t.Log("first:", first[:x])
		})`
$DIR/cmd/erasure-metadata-utils_test.go:219:12-219:29: `.Sprintf("%d", x)`
$DIR/cmd/erasure-metadata-utils_test.go:221:15-221:38: `.New(rand.NewSource(0))`
$DIR/cmd/erasure-metadata-utils_test.go:221:24-221:37: `.NewSource(0)`
$DIR/cmd/erasure-metadata-utils_test.go:223:4-223:20: `rng.Read(tmp[:])`
$DIR/cmd/erasure-metadata-utils_test.go:223:7-223:20: `.Read(tmp[:])`
$DIR/cmd/erasure-metadata-utils_test.go:224:17-224:40: `.EncodeToString(tmp[:])`
$DIR/cmd/erasure-metadata-utils_test.go:226:5-226:21: `rng.Read(tmp[:])`
$DIR/cmd/erasure-metadata-utils_test.go:226:8-226:21: `.Read(tmp[:])`
$DIR/cmd/erasure-metadata-utils_test.go:228:23-228:77: `.Sprintf("%s/%x", prefix, hex.EncodeToString(tmp[:3]))`
$DIR/cmd/erasure-metadata-utils_test.go:228:52-228:76: `.EncodeToString(tmp[:3])`
$DIR/cmd/erasure-metadata-utils_test.go:229:5-229:18: `first[y[0]]++`
$DIR/cmd/erasure-metadata_test.go:52:2-52:22: `fi.Erasure.Index = 1`
$DIR/cmd/erasure-metadata_test.go:53:8-53:18: `.IsValid()`
$DIR/cmd/erasure-metadata_test.go:60:28-60:51: `.Itoa(testCase.partNum)`
$DIR/cmd/erasure-metadata_test.go:61:4-61:134: `fi.AddObjectPart(testCase.partNum, "etag."+partNumString, int64(testCase.partNum+humanize.MiByte), ActualSize, UTCNow(), nil, nil)`
$DIR/cmd/erasure-metadata_test.go:61:6-61:134: `.AddObjectPart(testCase.partNum, "etag."+partNumString, int64(testCase.partNum+humanize.MiByte), ActualSize, UTCNow(), nil, nil)`
$DIR/cmd/erasure-metadata_test.go:86:2-86:22: `fi.Erasure.Index = 1`
$DIR/cmd/erasure-metadata_test.go:87:8-87:18: `.IsValid()`
$DIR/cmd/erasure-metadata_test.go:93:27-93:50: `.Itoa(testCase.partNum)`
$DIR/cmd/erasure-metadata_test.go:94:3-94:133: `fi.AddObjectPart(testCase.partNum, "etag."+partNumString, int64(testCase.partNum+humanize.MiByte), ActualSize, UTCNow(), nil, nil)`
$DIR/cmd/erasure-metadata_test.go:94:5-94:133: `.AddObjectPart(testCase.partNum, "etag."+partNumString, int64(testCase.partNum+humanize.MiByte), ActualSize, UTCNow(), nil, nil)`
$DIR/cmd/erasure-metadata_test.go:98:2-101:11: `testCases = append(testCases, struct {
		partNum       int
		expectedIndex int
	}{6, -1})`
$DIR/cmd/erasure-metadata_test.go:115:2-115:22: `fi.Erasure.Index = 1`
$DIR/cmd/erasure-metadata_test.go:116:8-116:18: `.IsValid()`
$DIR/cmd/erasure-metadata_test.go:123:27-123:41: `.Itoa(partNum)`
$DIR/cmd/erasure-metadata_test.go:124:3-124:115: `fi.AddObjectPart(partNum, "etag."+partNumString, int64(partNum+humanize.MiByte), ActualSize, UTCNow(), nil, nil)`
$DIR/cmd/erasure-metadata_test.go:124:5-124:115: `.AddObjectPart(partNum, "etag."+partNumString, int64(partNum+humanize.MiByte), ActualSize, UTCNow(), nil, nil)`
$DIR/cmd/erasure-metadata_test.go:147:27-147:85: `.ObjectToPartOffset(context.Background(), testCase.offset)`
$DIR/cmd/erasure-metadata_test.go:147:54-147:67: `.Background()`
$DIR/cmd/erasure-metadata_test.go:163:3-163:60: `fi.AddObjectPart(1, "etag", 100, 100, UTCNow(), nil, nil)`
$DIR/cmd/erasure-metadata_test.go:163:5-163:60: `.AddObjectPart(1, "etag", 100, 100, UTCNow(), nil, nil)`
$DIR/cmd/erasure-metadata_test.go:164:3-164:31: `fi.ModTime = time.Unix(t, 0)`
$DIR/cmd/erasure-metadata_test.go:164:20-164:31: `.Unix(t, 0)`
$DIR/cmd/erasure-metadata_test.go:165:3-165:23: `fi.DataDir = dataDir`
$DIR/cmd/erasure-metadata_test.go:168:4-168:15: `fis[i] = fi`
$DIR/cmd/erasure-metadata_test.go:169:4-169:32: `fis[i].Erasure.Index = i + 1`
$DIR/cmd/erasure-metadata_test.go:171:5-171:46: `fis[i].SuccessorModTime = succModTimes[i]`
$DIR/cmd/erasure-metadata_test.go:172:5-172:47: `fis[i].IsLatest = succModTimes[i].IsZero()`
$DIR/cmd/erasure-metadata_test.go:172:38-172:47: `.IsZero()`
$DIR/cmd/erasure-metadata_test.go:174:4-174:12: `quorum--`
$DIR/cmd/erasure-metadata_test.go:182:27-182:77: `.Date(2023, time.August, 25, 0, 0, 0, 0, time.UTC)`
$DIR/cmd/erasure-metadata_test.go:189:3-189:46: `succModTimesInQuorum[i] = commonSuccModTime`
$DIR/cmd/erasure-metadata_test.go:193:3-193:46: `succModTimesNoQuorum[i] = commonSuccModTime`
$DIR/cmd/erasure-metadata_test.go:206:24-206:44: `.Unix(1603863445, 0)`
$DIR/cmd/erasure-metadata_test.go:212:24-212:44: `.Unix(1603863445, 0)`
$DIR/cmd/erasure-metadata_test.go:218:24-218:44: `.Unix(1603863445, 0)`
$DIR/cmd/erasure-metadata_test.go:224:29-224:49: `.Unix(1603863445, 0)`
$DIR/cmd/erasure-metadata_test.go:232:29-232:49: `.Unix(1603863445, 0)`
$DIR/cmd/erasure-metadata_test.go:242:3-255:5: `t.Run("", func(t *testing.T) {
			fi, err := findFileInfoInQuorum(context.Background(), test.fis, test.modTime, "", test.expectedQuorum)
			if err != test.expectedErr {
				t.Errorf("Expected %s, got %s", test.expectedErr, err)
			}
			if test.succmodTimes != nil {
				if !test.expectedSuccModTime.Equal(fi.SuccessorModTime) {
					t.Errorf("Expected successor mod time to be %v but got %v", test.expectedSuccModTime, fi.SuccessorModTime)
				}
				if test.expectedIsLatest != fi.IsLatest {
					t.Errorf("Expected IsLatest to be %v but got %v", test.expectedIsLatest, fi.IsLatest)
				}
			}
		})`
$DIR/cmd/erasure-metadata_test.go:242:4-255:5: `.Run("", func(t *testing.T) {
			fi, err := findFileInfoInQuorum(context.Background(), test.fis, test.modTime, "", test.expectedQuorum)
			if err != test.expectedErr {
				t.Errorf("Expected %s, got %s", test.expectedErr, err)
			}
			if test.succmodTimes != nil {
				if !test.expectedSuccModTime.Equal(fi.SuccessorModTime) {
					t.Errorf("Expected successor mod time to be %v but got %v", test.expectedSuccModTime, fi.SuccessorModTime)
				}
				if test.expectedIsLatest != fi.IsLatest {
					t.Errorf("Expected IsLatest to be %v but got %v", test.expectedIsLatest, fi.IsLatest)
				}
			}
		})`
$DIR/cmd/erasure-metadata_test.go:243:43-243:56: `.Background()`
$DIR/cmd/erasure-metadata_test.go:248:13-248:60: `.expectedSuccModTime.Equal(fi.SuccessorModTime)`
$DIR/cmd/erasure-metadata_test.go:290:4-290:39: `ofi.TransitionTier = inputs[1].tier`
$DIR/cmd/erasure-metadata_test.go:293:4-293:53: `ofi.TransitionedObjName = inputs[1].remoteObjName`
$DIR/cmd/erasure-metadata_test.go:296:4-296:55: `ofi.TransitionVersionID = inputs[1].remoteVersionID`
$DIR/cmd/erasure-metadata_test.go:298:15-298:41: `.TransitionInfoEquals(ofi)`
$DIR/cmd/erasure-metadata_test.go:313:7-313:33: `.TransitionInfoEquals(ofi)`
$DIR/cmd/erasure-metadata_test.go:320:2-320:29: `fi.SetSkipTierFreeVersion()`
$DIR/cmd/erasure-metadata_test.go:320:4-320:29: `.SetSkipTierFreeVersion()`
$DIR/cmd/erasure-metadata_test.go:321:13-321:35: `.SkipTierFreeVersion()`
$DIR/cmd/erasure-object_test.go:39:24-39:57: `.WithCancel(context.Background())`
$DIR/cmd/erasure-object_test.go:39:43-39:56: `.Background()`
$DIR/cmd/erasure-object_test.go:47:2-47:46: `objLayer, disks, err = prepareErasure16(ctx)`
$DIR/cmd/erasure-object_test.go:53:16-53:47: `.Shutdown(context.Background())`
$DIR/cmd/erasure-object_test.go:53:33-53:46: `.Background()`
$DIR/cmd/erasure-object_test.go:56:2-56:64: `err = objLayer.MakeBucket(ctx, "bucket1", MakeBucketOptions{})`
$DIR/cmd/erasure-object_test.go:56:16-56:64: `.MakeBucket(ctx, "bucket1", MakeBucketOptions{})`
$DIR/cmd/erasure-object_test.go:61:22-61:76: `.NewMultipartUpload(ctx, "bucket1", "mpartObj1", opts)`
$DIR/cmd/erasure-object_test.go:65:22-65:61: `.Repeat([]byte("a"), 5*humanize.MiByte)`
$DIR/cmd/erasure-object_test.go:67:2-67:170: `_, err = objLayer.PutObjectPart(ctx, "bucket1", "mpartObj1", res.UploadID, 1, mustGetPutObjReader(t, bytes.NewReader(fiveMBBytes), 5*humanize.MiByte, md5Hex, ""), opts)`
$DIR/cmd/erasure-object_test.go:67:19-67:170: `.PutObjectPart(ctx, "bucket1", "mpartObj1", res.UploadID, 1, mustGetPutObjReader(t, bytes.NewReader(fiveMBBytes), 5*humanize.MiByte, md5Hex, ""), opts)`
$DIR/cmd/erasure-object_test.go:67:108-67:131: `.NewReader(fiveMBBytes)`
$DIR/cmd/erasure-object_test.go:72:2-72:170: `_, err = objLayer.PutObjectPart(ctx, "bucket1", "mpartObj1", res.UploadID, 1, mustGetPutObjReader(t, bytes.NewReader(fiveMBBytes), 5*humanize.MiByte, md5Hex, ""), opts)`
$DIR/cmd/erasure-object_test.go:72:19-72:170: `.PutObjectPart(ctx, "bucket1", "mpartObj1", res.UploadID, 1, mustGetPutObjReader(t, bytes.NewReader(fiveMBBytes), 5*humanize.MiByte, md5Hex, ""), opts)`
$DIR/cmd/erasure-object_test.go:72:108-72:131: `.NewReader(fiveMBBytes)`
$DIR/cmd/erasure-object_test.go:94:24-94:57: `.WithCancel(context.Background())`
$DIR/cmd/erasure-object_test.go:94:43-94:56: `.Background()`
$DIR/cmd/erasure-object_test.go:102:10-102:41: `.Shutdown(context.Background())`
$DIR/cmd/erasure-object_test.go:102:27-102:40: `.Background()`
$DIR/cmd/erasure-object_test.go:104:2-104:57: `err = xl.MakeBucket(ctx, "bucket", MakeBucketOptions{})`
$DIR/cmd/erasure-object_test.go:104:10-104:57: `.MakeBucket(ctx, "bucket", MakeBucketOptions{})`
$DIR/cmd/erasure-object_test.go:110:2-110:151: `_, err = xl.PutObject(ctx, "bucket", "dir/obj", mustGetPutObjReader(t, bytes.NewReader([]byte("abcd")), int64(len("abcd")), "", ""), ObjectOptions{})`
$DIR/cmd/erasure-object_test.go:110:13-110:151: `.PutObject(ctx, "bucket", "dir/obj", mustGetPutObjReader(t, bytes.NewReader([]byte("abcd")), int64(len("abcd")), "", ""), ObjectOptions{})`
$DIR/cmd/erasure-object_test.go:110:78-110:104: `.NewReader([]byte("abcd"))`
$DIR/cmd/erasure-object_test.go:116:3-128:5: `t.Run("", func(t *testing.T) {
			_, err := xl.GetObjectInfo(ctx, "bucket", "dir/obj", ObjectOptions{})
			if err != nil {
				t.Fatal("dir/obj not found before last test")
			}
			_, actualErr := xl.DeleteObject(ctx, test.bucket, test.object, ObjectOptions{})
			if test.expectedErr != nil && actualErr != test.expectedErr {
				t.Errorf("Expected to fail with %s, but failed with %s", test.expectedErr, actualErr)
			}
			if test.expectedErr == nil && actualErr != nil {
				t.Errorf("Expected to pass, but failed with %s", actualErr)
			}
		})`
$DIR/cmd/erasure-object_test.go:116:4-128:5: `.Run("", func(t *testing.T) {
			_, err := xl.GetObjectInfo(ctx, "bucket", "dir/obj", ObjectOptions{})
			if err != nil {
				t.Fatal("dir/obj not found before last test")
			}
			_, actualErr := xl.DeleteObject(ctx, test.bucket, test.object, ObjectOptions{})
			if test.expectedErr != nil && actualErr != test.expectedErr {
				t.Errorf("Expected to fail with %s, but failed with %s", test.expectedErr, actualErr)
			}
			if test.expectedErr == nil && actualErr != nil {
				t.Errorf("Expected to pass, but failed with %s", actualErr)
			}
		})`
$DIR/cmd/erasure-object_test.go:117:16-117:73: `.GetObjectInfo(ctx, "bucket", "dir/obj", ObjectOptions{})`
$DIR/cmd/erasure-object_test.go:121:22-121:83: `.DeleteObject(ctx, test.bucket, test.object, ObjectOptions{})`
$DIR/cmd/erasure-object_test.go:135:24-135:57: `.WithCancel(context.Background())`
$DIR/cmd/erasure-object_test.go:135:43-135:56: `.Background()`
$DIR/cmd/erasure-object_test.go:144:11-144:26: `.RemoveAll(dir)`
$DIR/cmd/erasure-object_test.go:147:2-150:3: `type testCaseType struct {
		bucket string
		object string
	}`
$DIR/cmd/erasure-object_test.go:158:2-160:4: `err = obj.MakeBucket(ctx, bucketName, MakeBucketOptions{
		VersioningEnabled: true,
	})`
$DIR/cmd/erasure-object_test.go:158:11-160:4: `.MakeBucket(ctx, bucketName, MakeBucketOptions{
		VersioningEnabled: true,
	})`
$DIR/cmd/erasure-object_test.go:167:22-170:6: `.PutObject(ctx, testCase.bucket, testCase.object,
			mustGetPutObjReader(t, bytes.NewReader([]byte("abcd")), int64(len("abcd")), "", ""), ObjectOptions{
				Versioned: true,
			})`
$DIR/cmd/erasure-object_test.go:168:32-168:58: `.NewReader([]byte("abcd"))`
$DIR/cmd/erasure-object_test.go:174:3-179:4: `names[i] = ObjectToDelete{
			ObjectV: ObjectV{
				ObjectName: objInfo.Name,
				VersionID:  objInfo.VersionID,
			},
		}`
$DIR/cmd/erasure-object_test.go:182:2-187:4: `names = append(names, ObjectToDelete{
		ObjectV: ObjectV{
			ObjectName: "dir/obj1",
			VersionID:  mustGetUUID(), // add a non-existent UUID.
		},
	})`
$DIR/cmd/erasure-object_test.go:189:19-191:4: `.DeleteObjects(ctx, bucketName, names, ObjectOptions{
		Versioned: true,
	})`
$DIR/cmd/erasure-object_test.go:199:20-201:5: `.GetObjectInfo(ctx, test.bucket, test.object, ObjectOptions{
			VersionID: names[i].ObjectV.VersionID,
		})`
$DIR/cmd/erasure-object_test.go:209:16-209:81: `.ReadFile(pathJoin(fsDirs[0], bucketName, "dir/obj1", "xl.meta"))`
$DIR/cmd/erasure-object_test.go:215:24-215:57: `.WithCancel(context.Background())`
$DIR/cmd/erasure-object_test.go:215:43-215:56: `.Background()`
$DIR/cmd/erasure-object_test.go:223:2-223:21: `setObjectLayer(obj)`
$DIR/cmd/erasure-object_test.go:224:2-224:31: `initConfigSubsystem(ctx, obj)`
$DIR/cmd/erasure-object_test.go:228:11-228:26: `.RemoveAll(dir)`
$DIR/cmd/erasure-object_test.go:231:2-234:3: `type testCaseType struct {
		bucket string
		object string
	}`
$DIR/cmd/erasure-object_test.go:244:14-244:63: `.MakeBucket(ctx, bucketName, MakeBucketOptions{})`
$DIR/cmd/erasure-object_test.go:249:3-250:105: `_, err = obj.PutObject(ctx, testCase.bucket, testCase.object,
			mustGetPutObjReader(t, bytes.NewReader([]byte("abcd")), int64(len("abcd")), "", ""), ObjectOptions{})`
$DIR/cmd/erasure-object_test.go:249:15-250:105: `.PutObject(ctx, testCase.bucket, testCase.object,
			mustGetPutObjReader(t, bytes.NewReader([]byte("abcd")), int64(len("abcd")), "", ""), ObjectOptions{})`
$DIR/cmd/erasure-object_test.go:250:32-250:58: `.NewReader([]byte("abcd"))`
$DIR/cmd/erasure-object_test.go:259:4-263:5: `names[i] = ObjectToDelete{
				ObjectV: ObjectV{
					ObjectName: testCases[i].object,
				},
			}`
$DIR/cmd/erasure-object_test.go:269:19-269:80: `.DeleteObjects(ctx, bucketName, objectNames, ObjectOptions{})`
$DIR/cmd/erasure-object_test.go:278:20-278:82: `.GetObjectInfo(ctx, test.bucket, test.object, ObjectOptions{})`
$DIR/cmd/erasure-object_test.go:288:24-288:57: `.WithCancel(context.Background())`
$DIR/cmd/erasure-object_test.go:288:43-288:56: `.Background()`
$DIR/cmd/erasure-object_test.go:297:11-297:42: `.Shutdown(context.Background())`
$DIR/cmd/erasure-object_test.go:297:28-297:41: `.Background()`
$DIR/cmd/erasure-object_test.go:304:2-304:58: `err = obj.MakeBucket(ctx, "bucket", MakeBucketOptions{})`
$DIR/cmd/erasure-object_test.go:304:11-304:58: `.MakeBucket(ctx, "bucket", MakeBucketOptions{})`
$DIR/cmd/erasure-object_test.go:313:2-313:136: `_, err = obj.PutObject(ctx, bucket, object, mustGetPutObjReader(t, bytes.NewReader([]byte("abcd")), int64(len("abcd")), "", ""), opts)`
$DIR/cmd/erasure-object_test.go:313:14-313:136: `.PutObject(ctx, bucket, object, mustGetPutObjReader(t, bytes.NewReader([]byte("abcd")), int64(len("abcd")), "", ""), opts)`
$DIR/cmd/erasure-object_test.go:313:74-313:100: `.NewReader([]byte("abcd"))`
$DIR/cmd/erasure-object_test.go:318:20-318:31: `.getDisks()`
$DIR/cmd/erasure-object_test.go:319:2-319:40: `z.serverPools[0].erasureDisksMu.Lock()`
$DIR/cmd/erasure-object_test.go:319:18-319:40: `.erasureDisksMu.Lock()`
$DIR/cmd/erasure-object_test.go:322:4-322:73: `erasureDisks[i] = newNaughtyDisk(erasureDisks[i], nil, errFaultyDisk)`
$DIR/cmd/erasure-object_test.go:327:2-327:42: `z.serverPools[0].erasureDisksMu.Unlock()`
$DIR/cmd/erasure-object_test.go:327:18-327:42: `.erasureDisksMu.Unlock()`
$DIR/cmd/erasure-object_test.go:328:2-328:65: `_, err = obj.DeleteObject(ctx, bucket, object, ObjectOptions{})`
$DIR/cmd/erasure-object_test.go:328:14-328:65: `.DeleteObject(ctx, bucket, object, ObjectOptions{})`
$DIR/cmd/erasure-object_test.go:329:12-329:43: `.Is(err, errErasureWriteQuorum)`
$DIR/cmd/erasure-object_test.go:334:2-334:136: `_, err = obj.PutObject(ctx, bucket, object, mustGetPutObjReader(t, bytes.NewReader([]byte("abcd")), int64(len("abcd")), "", ""), opts)`
$DIR/cmd/erasure-object_test.go:334:14-334:136: `.PutObject(ctx, bucket, object, mustGetPutObjReader(t, bytes.NewReader([]byte("abcd")), int64(len("abcd")), "", ""), opts)`
$DIR/cmd/erasure-object_test.go:334:74-334:100: `.NewReader([]byte("abcd"))`
$DIR/cmd/erasure-object_test.go:340:2-340:30: `erasureDisks = xl.getDisks()`
$DIR/cmd/erasure-object_test.go:340:19-340:30: `.getDisks()`
$DIR/cmd/erasure-object_test.go:341:2-341:40: `z.serverPools[0].erasureDisksMu.Lock()`
$DIR/cmd/erasure-object_test.go:341:18-341:40: `.erasureDisksMu.Lock()`
$DIR/cmd/erasure-object_test.go:343:3-343:24: `erasureDisks[7] = nil`
$DIR/cmd/erasure-object_test.go:344:3-344:24: `erasureDisks[8] = nil`
$DIR/cmd/erasure-object_test.go:348:2-348:42: `z.serverPools[0].erasureDisksMu.Unlock()`
$DIR/cmd/erasure-object_test.go:348:18-348:42: `.erasureDisksMu.Unlock()`
$DIR/cmd/erasure-object_test.go:349:2-349:65: `_, err = obj.DeleteObject(ctx, bucket, object, ObjectOptions{})`
$DIR/cmd/erasure-object_test.go:349:14-349:65: `.DeleteObject(ctx, bucket, object, ObjectOptions{})`
$DIR/cmd/erasure-object_test.go:351:12-351:43: `.Is(err, errErasureWriteQuorum)`
$DIR/cmd/erasure-object_test.go:357:24-357:57: `.WithCancel(context.Background())`
$DIR/cmd/erasure-object_test.go:357:43-357:56: `.Background()`
$DIR/cmd/erasure-object_test.go:366:11-366:42: `.Shutdown(context.Background())`
$DIR/cmd/erasure-object_test.go:366:28-366:41: `.Background()`
$DIR/cmd/erasure-object_test.go:373:2-373:58: `err = obj.MakeBucket(ctx, "bucket", MakeBucketOptions{})`
$DIR/cmd/erasure-object_test.go:373:11-373:58: `.MakeBucket(ctx, "bucket", MakeBucketOptions{})`
$DIR/cmd/erasure-object_test.go:382:2-382:136: `_, err = obj.PutObject(ctx, bucket, object, mustGetPutObjReader(t, bytes.NewReader([]byte("abcd")), int64(len("abcd")), "", ""), opts)`
$DIR/cmd/erasure-object_test.go:382:14-382:136: `.PutObject(ctx, bucket, object, mustGetPutObjReader(t, bytes.NewReader([]byte("abcd")), int64(len("abcd")), "", ""), opts)`
$DIR/cmd/erasure-object_test.go:382:74-382:100: `.NewReader([]byte("abcd"))`
$DIR/cmd/erasure-object_test.go:387:2-387:65: `_, err = obj.DeleteObject(ctx, bucket, object, ObjectOptions{})`
$DIR/cmd/erasure-object_test.go:387:14-387:65: `.DeleteObject(ctx, bucket, object, ObjectOptions{})`
$DIR/cmd/erasure-object_test.go:393:2-393:136: `_, err = obj.PutObject(ctx, bucket, object, mustGetPutObjReader(t, bytes.NewReader([]byte("abcd")), int64(len("abcd")), "", ""), opts)`
$DIR/cmd/erasure-object_test.go:393:14-393:136: `.PutObject(ctx, bucket, object, mustGetPutObjReader(t, bytes.NewReader([]byte("abcd")), int64(len("abcd")), "", ""), opts)`
$DIR/cmd/erasure-object_test.go:393:74-393:100: `.NewReader([]byte("abcd"))`
$DIR/cmd/erasure-object_test.go:399:20-399:31: `.getDisks()`
$DIR/cmd/erasure-object_test.go:400:2-400:40: `z.serverPools[0].erasureDisksMu.Lock()`
$DIR/cmd/erasure-object_test.go:400:18-400:40: `.erasureDisksMu.Lock()`
$DIR/cmd/erasure-object_test.go:403:4-403:73: `erasureDisks[i] = newNaughtyDisk(erasureDisks[i], nil, errFaultyDisk)`
$DIR/cmd/erasure-object_test.go:408:2-408:42: `z.serverPools[0].erasureDisksMu.Unlock()`
$DIR/cmd/erasure-object_test.go:408:18-408:42: `.erasureDisksMu.Unlock()`
$DIR/cmd/erasure-object_test.go:409:2-409:65: `_, err = obj.DeleteObject(ctx, bucket, object, ObjectOptions{})`
$DIR/cmd/erasure-object_test.go:409:14-409:65: `.DeleteObject(ctx, bucket, object, ObjectOptions{})`
$DIR/cmd/erasure-object_test.go:411:12-411:43: `.Is(err, errErasureWriteQuorum)`
$DIR/cmd/erasure-object_test.go:417:24-417:57: `.WithCancel(context.Background())`
$DIR/cmd/erasure-object_test.go:417:43-417:56: `.Background()`
$DIR/cmd/erasure-object_test.go:426:11-426:42: `.Shutdown(context.Background())`
$DIR/cmd/erasure-object_test.go:426:28-426:41: `.Background()`
$DIR/cmd/erasure-object_test.go:433:2-433:58: `err = obj.MakeBucket(ctx, "bucket", MakeBucketOptions{})`
$DIR/cmd/erasure-object_test.go:433:11-433:58: `.MakeBucket(ctx, "bucket", MakeBucketOptions{})`
$DIR/cmd/erasure-object_test.go:442:2-442:136: `_, err = obj.PutObject(ctx, bucket, object, mustGetPutObjReader(t, bytes.NewReader([]byte("abcd")), int64(len("abcd")), "", ""), opts)`
$DIR/cmd/erasure-object_test.go:442:14-442:136: `.PutObject(ctx, bucket, object, mustGetPutObjReader(t, bytes.NewReader([]byte("abcd")), int64(len("abcd")), "", ""), opts)`
$DIR/cmd/erasure-object_test.go:442:74-442:100: `.NewReader([]byte("abcd"))`
$DIR/cmd/erasure-object_test.go:448:20-448:31: `.getDisks()`
$DIR/cmd/erasure-object_test.go:449:2-449:40: `z.serverPools[0].erasureDisksMu.Lock()`
$DIR/cmd/erasure-object_test.go:449:18-449:40: `.erasureDisksMu.Lock()`
$DIR/cmd/erasure-object_test.go:452:4-452:73: `erasureDisks[i] = newNaughtyDisk(erasureDisks[i], nil, errFaultyDisk)`
$DIR/cmd/erasure-object_test.go:457:2-457:42: `z.serverPools[0].erasureDisksMu.Unlock()`
$DIR/cmd/erasure-object_test.go:457:18-457:42: `.erasureDisksMu.Unlock()`
$DIR/cmd/erasure-object_test.go:458:2-458:65: `_, err = obj.DeleteObject(ctx, bucket, object, ObjectOptions{})`
$DIR/cmd/erasure-object_test.go:458:14-458:65: `.DeleteObject(ctx, bucket, object, ObjectOptions{})`
$DIR/cmd/erasure-object_test.go:464:2-464:136: `_, err = obj.PutObject(ctx, bucket, object, mustGetPutObjReader(t, bytes.NewReader([]byte("abcd")), int64(len("abcd")), "", ""), opts)`
$DIR/cmd/erasure-object_test.go:464:14-464:136: `.PutObject(ctx, bucket, object, mustGetPutObjReader(t, bytes.NewReader([]byte("abcd")), int64(len("abcd")), "", ""), opts)`
$DIR/cmd/erasure-object_test.go:464:74-464:100: `.NewReader([]byte("abcd"))`
$DIR/cmd/erasure-object_test.go:470:2-470:30: `erasureDisks = xl.getDisks()`
$DIR/cmd/erasure-object_test.go:470:19-470:30: `.getDisks()`
$DIR/cmd/erasure-object_test.go:471:2-471:40: `z.serverPools[0].erasureDisksMu.Lock()`
$DIR/cmd/erasure-object_test.go:471:18-471:40: `.erasureDisksMu.Lock()`
$DIR/cmd/erasure-object_test.go:473:3-473:24: `erasureDisks[7] = nil`
$DIR/cmd/erasure-object_test.go:474:3-474:24: `erasureDisks[8] = nil`
$DIR/cmd/erasure-object_test.go:475:3-475:24: `erasureDisks[9] = nil`
$DIR/cmd/erasure-object_test.go:479:2-479:42: `z.serverPools[0].erasureDisksMu.Unlock()`
$DIR/cmd/erasure-object_test.go:479:18-479:42: `.erasureDisksMu.Unlock()`
$DIR/cmd/erasure-object_test.go:480:2-480:65: `_, err = obj.DeleteObject(ctx, bucket, object, ObjectOptions{})`
$DIR/cmd/erasure-object_test.go:480:14-480:65: `.DeleteObject(ctx, bucket, object, ObjectOptions{})`
$DIR/cmd/erasure-object_test.go:488:24-488:57: `.WithCancel(context.Background())`
$DIR/cmd/erasure-object_test.go:488:43-488:56: `.Background()`
$DIR/cmd/erasure-object_test.go:497:11-497:42: `.Shutdown(context.Background())`
$DIR/cmd/erasure-object_test.go:497:28-497:41: `.Background()`
$DIR/cmd/erasure-object_test.go:504:2-504:58: `err = obj.MakeBucket(ctx, "bucket", MakeBucketOptions{})`
$DIR/cmd/erasure-object_test.go:504:11-504:58: `.MakeBucket(ctx, "bucket", MakeBucketOptions{})`
$DIR/cmd/erasure-object_test.go:513:16-513:44: `.ReadFull(crand.Reader, buf)`
$DIR/cmd/erasure-object_test.go:518:2-518:122: `_, err = obj.PutObject(ctx, bucket, object, mustGetPutObjReader(t, bytes.NewReader(buf), int64(len(buf)), "", ""), opts)`
$DIR/cmd/erasure-object_test.go:518:14-518:122: `.PutObject(ctx, bucket, object, mustGetPutObjReader(t, bytes.NewReader(buf), int64(len(buf)), "", ""), opts)`
$DIR/cmd/erasure-object_test.go:518:74-518:89: `.NewReader(buf)`
$DIR/cmd/erasure-object_test.go:523:25-523:36: `.getDisks()`
$DIR/cmd/erasure-object_test.go:524:19-524:56: `.ListDir(ctx, "", bucket, object, -1)`
$DIR/cmd/erasure-object_test.go:527:5-530:7: `disk.Delete(ctx, bucket, pathJoin(object, file), DeleteOptions{
					Recursive: true,
					Immediate: false,
				})`
$DIR/cmd/erasure-object_test.go:527:9-530:7: `.Delete(ctx, bucket, pathJoin(object, file), DeleteOptions{
					Recursive: true,
					Immediate: false,
				})`
$DIR/cmd/erasure-object_test.go:535:15-535:67: `.GetObjectNInfo(ctx, bucket, object, nil, nil, opts)`
$DIR/cmd/erasure-object_test.go:542:3-542:35: `_, err = io.Copy(io.Discard, gr)`
$DIR/cmd/erasure-object_test.go:542:14-542:35: `.Copy(io.Discard, gr)`
$DIR/cmd/erasure-object_test.go:555:2-555:122: `_, err = obj.PutObject(ctx, bucket, object, mustGetPutObjReader(t, bytes.NewReader(buf), int64(len(buf)), "", ""), opts)`
$DIR/cmd/erasure-object_test.go:555:14-555:122: `.PutObject(ctx, bucket, object, mustGetPutObjReader(t, bytes.NewReader(buf), int64(len(buf)), "", ""), opts)`
$DIR/cmd/erasure-object_test.go:555:74-555:89: `.NewReader(buf)`
$DIR/cmd/erasure-object_test.go:563:4-563:23: `diskErrors[i] = nil`
$DIR/cmd/erasure-object_test.go:565:21-565:32: `.getDisks()`
$DIR/cmd/erasure-object_test.go:569:5-569:79: `erasureDisks[i] = newNaughtyDisk(diskType.disk, diskErrors, errFaultyDisk)`
$DIR/cmd/erasure-object_test.go:571:5-571:81: `erasureDisks[i] = newNaughtyDisk(erasureDisks[i], diskErrors, errFaultyDisk)`
$DIR/cmd/erasure-object_test.go:574:3-574:41: `z.serverPools[0].erasureDisksMu.Lock()`
$DIR/cmd/erasure-object_test.go:574:19-574:41: `.erasureDisksMu.Lock()`
$DIR/cmd/erasure-object_test.go:578:3-578:43: `z.serverPools[0].erasureDisksMu.Unlock()`
$DIR/cmd/erasure-object_test.go:578:19-578:43: `.erasureDisksMu.Unlock()`
$DIR/cmd/erasure-object_test.go:580:16-580:68: `.GetObjectNInfo(ctx, bucket, object, nil, nil, opts)`
$DIR/cmd/erasure-object_test.go:587:4-587:36: `_, err = io.Copy(io.Discard, gr)`
$DIR/cmd/erasure-object_test.go:587:15-587:36: `.Copy(io.Discard, gr)`
$DIR/cmd/erasure-object_test.go:597:24-597:57: `.WithCancel(context.Background())`
$DIR/cmd/erasure-object_test.go:597:43-597:56: `.Background()`
$DIR/cmd/erasure-object_test.go:606:11-606:42: `.Shutdown(context.Background())`
$DIR/cmd/erasure-object_test.go:606:28-606:41: `.Background()`
$DIR/cmd/erasure-object_test.go:613:2-613:58: `err = obj.MakeBucket(ctx, "bucket", MakeBucketOptions{})`
$DIR/cmd/erasure-object_test.go:613:11-613:58: `.MakeBucket(ctx, "bucket", MakeBucketOptions{})`
$DIR/cmd/erasure-object_test.go:623:2-623:136: `_, err = obj.PutObject(ctx, bucket, object, mustGetPutObjReader(t, bytes.NewReader([]byte("abcd")), int64(len("abcd")), "", ""), opts)`
$DIR/cmd/erasure-object_test.go:623:14-623:136: `.PutObject(ctx, bucket, object, mustGetPutObjReader(t, bytes.NewReader([]byte("abcd")), int64(len("abcd")), "", ""), opts)`
$DIR/cmd/erasure-object_test.go:623:74-623:100: `.NewReader([]byte("abcd"))`
$DIR/cmd/erasure-object_test.go:627:25-627:36: `.getDisks()`
$DIR/cmd/erasure-object_test.go:628:19-628:56: `.ListDir(ctx, "", bucket, object, -1)`
$DIR/cmd/erasure-object_test.go:631:5-634:7: `disk.Delete(ctx, bucket, pathJoin(object, file), DeleteOptions{
					Recursive: true,
					Immediate: false,
				})`
$DIR/cmd/erasure-object_test.go:631:9-634:7: `.Delete(ctx, bucket, pathJoin(object, file), DeleteOptions{
					Recursive: true,
					Immediate: false,
				})`
$DIR/cmd/erasure-object_test.go:639:2-639:54: `_, err = xl.GetObjectInfo(ctx, bucket, object, opts)`
$DIR/cmd/erasure-object_test.go:639:13-639:54: `.GetObjectInfo(ctx, bucket, object, opts)`
$DIR/cmd/erasure-object_test.go:650:2-650:136: `_, err = obj.PutObject(ctx, bucket, object, mustGetPutObjReader(t, bytes.NewReader([]byte("abcd")), int64(len("abcd")), "", ""), opts)`
$DIR/cmd/erasure-object_test.go:650:14-650:136: `.PutObject(ctx, bucket, object, mustGetPutObjReader(t, bytes.NewReader([]byte("abcd")), int64(len("abcd")), "", ""), opts)`
$DIR/cmd/erasure-object_test.go:650:74-650:100: `.NewReader([]byte("abcd"))`
$DIR/cmd/erasure-object_test.go:655:20-655:31: `.getDisks()`
$DIR/cmd/erasure-object_test.go:657:3-657:24: `erasureDisks[i] = nil`
$DIR/cmd/erasure-object_test.go:660:2-660:40: `z.serverPools[0].erasureDisksMu.Lock()`
$DIR/cmd/erasure-object_test.go:660:18-660:40: `.erasureDisksMu.Lock()`
$DIR/cmd/erasure-object_test.go:664:2-664:42: `z.serverPools[0].erasureDisksMu.Unlock()`
$DIR/cmd/erasure-object_test.go:664:18-664:42: `.erasureDisksMu.Unlock()`
$DIR/cmd/erasure-object_test.go:667:2-667:54: `_, err = xl.GetObjectInfo(ctx, bucket, object, opts)`
$DIR/cmd/erasure-object_test.go:667:13-667:54: `.GetObjectInfo(ctx, bucket, object, opts)`
$DIR/cmd/erasure-object_test.go:674:24-674:57: `.WithCancel(context.Background())`
$DIR/cmd/erasure-object_test.go:674:43-674:56: `.Background()`
$DIR/cmd/erasure-object_test.go:684:11-684:42: `.Shutdown(context.Background())`
$DIR/cmd/erasure-object_test.go:684:28-684:41: `.Background()`
$DIR/cmd/erasure-object_test.go:691:2-691:58: `err = obj.MakeBucket(ctx, "bucket", MakeBucketOptions{})`
$DIR/cmd/erasure-object_test.go:691:11-691:58: `.MakeBucket(ctx, "bucket", MakeBucketOptions{})`
$DIR/cmd/erasure-object_test.go:700:2-700:173: `_, err = obj.PutObject(ctx, bucket, object, mustGetPutObjReader(t, bytes.NewReader(bytes.Repeat([]byte{'a'}, smallFileThreshold*16)), smallFileThreshold*16, "", ""), opts)`
$DIR/cmd/erasure-object_test.go:700:14-700:173: `.PutObject(ctx, bucket, object, mustGetPutObjReader(t, bytes.NewReader(bytes.Repeat([]byte{'a'}, smallFileThreshold*16)), smallFileThreshold*16, "", ""), opts)`
$DIR/cmd/erasure-object_test.go:700:74-700:134: `.NewReader(bytes.Repeat([]byte{'a'}, smallFileThreshold*16))`
$DIR/cmd/erasure-object_test.go:700:90-700:133: `.Repeat([]byte{'a'}, smallFileThreshold*16)`
$DIR/cmd/erasure-object_test.go:712:4-712:23: `diskErrors[i] = nil`
$DIR/cmd/erasure-object_test.go:714:21-714:32: `.getDisks()`
$DIR/cmd/erasure-object_test.go:718:5-718:79: `erasureDisks[i] = newNaughtyDisk(diskType.disk, diskErrors, errFaultyDisk)`
$DIR/cmd/erasure-object_test.go:720:5-720:81: `erasureDisks[i] = newNaughtyDisk(erasureDisks[i], diskErrors, errFaultyDisk)`
$DIR/cmd/erasure-object_test.go:723:3-723:41: `z.serverPools[0].erasureDisksMu.Lock()`
$DIR/cmd/erasure-object_test.go:723:19-723:41: `.erasureDisksMu.Lock()`
$DIR/cmd/erasure-object_test.go:727:3-727:43: `z.serverPools[0].erasureDisksMu.Unlock()`
$DIR/cmd/erasure-object_test.go:727:19-727:43: `.erasureDisksMu.Unlock()`
$DIR/cmd/erasure-object_test.go:729:3-729:178: `_, err = obj.PutObject(ctx, bucket, object, mustGetPutObjReader(t, bytes.NewReader(bytes.Repeat([]byte{byte(f)}, smallFileThreshold*16)), smallFileThreshold*16, "", ""), opts)`
$DIR/cmd/erasure-object_test.go:729:15-729:178: `.PutObject(ctx, bucket, object, mustGetPutObjReader(t, bytes.NewReader(bytes.Repeat([]byte{byte(f)}, smallFileThreshold*16)), smallFileThreshold*16, "", ""), opts)`
$DIR/cmd/erasure-object_test.go:729:75-729:139: `.NewReader(bytes.Repeat([]byte{byte(f)}, smallFileThreshold*16))`
$DIR/cmd/erasure-object_test.go:729:91-729:138: `.Repeat([]byte{byte(f)}, smallFileThreshold*16)`
$DIR/cmd/erasure-object_test.go:730:13-730:44: `.Is(err, errErasureWriteQuorum)`
$DIR/cmd/erasure-object_test.go:737:24-737:57: `.WithCancel(context.Background())`
$DIR/cmd/erasure-object_test.go:737:43-737:56: `.Background()`
$DIR/cmd/erasure-object_test.go:747:11-747:42: `.Shutdown(context.Background())`
$DIR/cmd/erasure-object_test.go:747:28-747:41: `.Background()`
$DIR/cmd/erasure-object_test.go:754:2-754:58: `err = obj.MakeBucket(ctx, "bucket", MakeBucketOptions{})`
$DIR/cmd/erasure-object_test.go:754:11-754:58: `.MakeBucket(ctx, "bucket", MakeBucketOptions{})`
$DIR/cmd/erasure-object_test.go:763:2-763:171: `_, err = obj.PutObject(ctx, bucket, object, mustGetPutObjReader(t, bytes.NewReader(bytes.Repeat([]byte{'a'}, smallFileThreshold/2)), smallFileThreshold/2, "", ""), opts)`
$DIR/cmd/erasure-object_test.go:763:14-763:171: `.PutObject(ctx, bucket, object, mustGetPutObjReader(t, bytes.NewReader(bytes.Repeat([]byte{'a'}, smallFileThreshold/2)), smallFileThreshold/2, "", ""), opts)`
$DIR/cmd/erasure-object_test.go:763:74-763:133: `.NewReader(bytes.Repeat([]byte{'a'}, smallFileThreshold/2))`
$DIR/cmd/erasure-object_test.go:763:90-763:132: `.Repeat([]byte{'a'}, smallFileThreshold/2)`
$DIR/cmd/erasure-object_test.go:773:3-797:5: `t.Run("exec-"+strconv.Itoa(f), func(t *testing.T) {
			diskErrors := make(map[int]error)
			for i := 0; i <= f; i++ {
				diskErrors[i] = nil
			}
			erasureDisks := xl.getDisks()
			for i := range erasureDisks[:9] {
				switch diskType := erasureDisks[i].(type) {
				case *naughtyDisk:
					erasureDisks[i] = newNaughtyDisk(diskType.disk, diskErrors, errFaultyDisk)
				default:
					erasureDisks[i] = newNaughtyDisk(erasureDisks[i], diskErrors, errFaultyDisk)
				}
			}
			z.serverPools[0].erasureDisksMu.Lock()
			xl.getDisks = func() []StorageAPI {
				return erasureDisks
			}
			z.serverPools[0].erasureDisksMu.Unlock()
			// Upload new content to same object "object"
			_, err = obj.PutObject(ctx, bucket, object, mustGetPutObjReader(t, bytes.NewReader(bytes.Repeat([]byte{byte(f)}, smallFileThreshold/2)), smallFileThreshold/2, "", ""), opts)
			if !errors.Is(err, errErasureWriteQuorum) {
				t.Errorf("Expected putObject to fail with %v, but failed with %v", toObjectErr(errErasureWriteQuorum, bucket, object), err)
			}
		})`
$DIR/cmd/erasure-object_test.go:773:4-797:5: `.Run("exec-"+strconv.Itoa(f), func(t *testing.T) {
			diskErrors := make(map[int]error)
			for i := 0; i <= f; i++ {
				diskErrors[i] = nil
			}
			erasureDisks := xl.getDisks()
			for i := range erasureDisks[:9] {
				switch diskType := erasureDisks[i].(type) {
				case *naughtyDisk:
					erasureDisks[i] = newNaughtyDisk(diskType.disk, diskErrors, errFaultyDisk)
				default:
					erasureDisks[i] = newNaughtyDisk(erasureDisks[i], diskErrors, errFaultyDisk)
				}
			}
			z.serverPools[0].erasureDisksMu.Lock()
			xl.getDisks = func() []StorageAPI {
				return erasureDisks
			}
			z.serverPools[0].erasureDisksMu.Unlock()
			// Upload new content to same object "object"
			_, err = obj.PutObject(ctx, bucket, object, mustGetPutObjReader(t, bytes.NewReader(bytes.Repeat([]byte{byte(f)}, smallFileThreshold/2)), smallFileThreshold/2, "", ""), opts)
			if !errors.Is(err, errErasureWriteQuorum) {
				t.Errorf("Expected putObject to fail with %v, but failed with %v", toObjectErr(errErasureWriteQuorum, bucket, object), err)
			}
		})`
$DIR/cmd/erasure-object_test.go:773:24-773:32: `.Itoa(f)`
$DIR/cmd/erasure-object_test.go:776:5-776:24: `diskErrors[i] = nil`
$DIR/cmd/erasure-object_test.go:778:22-778:33: `.getDisks()`
$DIR/cmd/erasure-object_test.go:782:6-782:80: `erasureDisks[i] = newNaughtyDisk(diskType.disk, diskErrors, errFaultyDisk)`
$DIR/cmd/erasure-object_test.go:784:6-784:82: `erasureDisks[i] = newNaughtyDisk(erasureDisks[i], diskErrors, errFaultyDisk)`
$DIR/cmd/erasure-object_test.go:787:4-787:42: `z.serverPools[0].erasureDisksMu.Lock()`
$DIR/cmd/erasure-object_test.go:787:20-787:42: `.erasureDisksMu.Lock()`
$DIR/cmd/erasure-object_test.go:791:4-791:44: `z.serverPools[0].erasureDisksMu.Unlock()`
$DIR/cmd/erasure-object_test.go:791:20-791:44: `.erasureDisksMu.Unlock()`
$DIR/cmd/erasure-object_test.go:793:4-793:177: `_, err = obj.PutObject(ctx, bucket, object, mustGetPutObjReader(t, bytes.NewReader(bytes.Repeat([]byte{byte(f)}, smallFileThreshold/2)), smallFileThreshold/2, "", ""), opts)`
$DIR/cmd/erasure-object_test.go:793:16-793:177: `.PutObject(ctx, bucket, object, mustGetPutObjReader(t, bytes.NewReader(bytes.Repeat([]byte{byte(f)}, smallFileThreshold/2)), smallFileThreshold/2, "", ""), opts)`
$DIR/cmd/erasure-object_test.go:793:76-793:139: `.NewReader(bytes.Repeat([]byte{byte(f)}, smallFileThreshold/2))`
$DIR/cmd/erasure-object_test.go:793:92-793:138: `.Repeat([]byte{byte(f)}, smallFileThreshold/2)`
$DIR/cmd/erasure-object_test.go:794:14-794:45: `.Is(err, errErasureWriteQuorum)`
$DIR/cmd/erasure-object_test.go:804:24-804:57: `.WithCancel(context.Background())`
$DIR/cmd/erasure-object_test.go:804:43-804:56: `.Background()`
$DIR/cmd/erasure-object_test.go:807:2-807:25: `const numberOfDisks = 4`
$DIR/cmd/erasure-object_test.go:816:11-816:42: `.Shutdown(context.Background())`
$DIR/cmd/erasure-object_test.go:816:28-816:41: `.Background()`
$DIR/cmd/erasure-object_test.go:823:2-823:56: `err = obj.MakeBucket(ctx, bucket, MakeBucketOptions{})`
$DIR/cmd/erasure-object_test.go:823:11-823:56: `.MakeBucket(ctx, bucket, MakeBucketOptions{})`
$DIR/cmd/erasure-object_test.go:830:2-830:145: `_, err = obj.PutObject(ctx, bucket, object, mustGetPutObjReader(t, bytes.NewReader(smallData), int64(len(smallData)), "", ""), ObjectOptions{})`
$DIR/cmd/erasure-object_test.go:830:14-830:145: `.PutObject(ctx, bucket, object, mustGetPutObjReader(t, bytes.NewReader(smallData), int64(len(smallData)), "", ""), ObjectOptions{})`
$DIR/cmd/erasure-object_test.go:830:74-830:95: `.NewReader(smallData)`
$DIR/cmd/erasure-object_test.go:834:16-834:79: `.GetObjectNInfo(ctx, bucket, object, nil, nil, ObjectOptions{})`
$DIR/cmd/erasure-object_test.go:838:17-838:37: `.NewBuffer([]byte{})`
$DIR/cmd/erasure-object_test.go:839:2-839:30: `_, err = io.Copy(output, gr)`
$DIR/cmd/erasure-object_test.go:839:13-839:30: `.Copy(output, gr)`
$DIR/cmd/erasure-object_test.go:844:11-844:44: `.Equal(output.Bytes(), smallData)`
$DIR/cmd/erasure-object_test.go:844:24-844:32: `.Bytes()`
$DIR/cmd/erasure-object_test.go:851:2-851:16: `output.Reset()`
$DIR/cmd/erasure-object_test.go:851:8-851:16: `.Reset()`
$DIR/cmd/erasure-object_test.go:852:18-852:74: `.Repeat([]byte{'b'}, smallFileThreshold*numberOfDisks/2)`
$DIR/cmd/erasure-object_test.go:854:2-854:141: `_, err = obj.PutObject(ctx, bucket, object, mustGetPutObjReader(t, bytes.NewReader(bigData), int64(len(bigData)), "", ""), ObjectOptions{})`
$DIR/cmd/erasure-object_test.go:854:14-854:141: `.PutObject(ctx, bucket, object, mustGetPutObjReader(t, bytes.NewReader(bigData), int64(len(bigData)), "", ""), ObjectOptions{})`
$DIR/cmd/erasure-object_test.go:854:74-854:93: `.NewReader(bigData)`
$DIR/cmd/erasure-object_test.go:858:2-858:78: `gr, err = obj.GetObjectNInfo(ctx, bucket, object, nil, nil, ObjectOptions{})`
$DIR/cmd/erasure-object_test.go:858:15-858:78: `.GetObjectNInfo(ctx, bucket, object, nil, nil, ObjectOptions{})`
$DIR/cmd/erasure-object_test.go:862:2-862:30: `_, err = io.Copy(output, gr)`
$DIR/cmd/erasure-object_test.go:862:13-862:30: `.Copy(output, gr)`
$DIR/cmd/erasure-object_test.go:867:11-867:42: `.Equal(output.Bytes(), bigData)`
$DIR/cmd/erasure-object_test.go:867:24-867:32: `.Bytes()`
$DIR/cmd/erasure-object_test.go:1066:24-1066:57: `.WithCancel(context.Background())`
$DIR/cmd/erasure-object_test.go:1066:43-1066:56: `.Background()`
$DIR/cmd/erasure-object_test.go:1071:2-1071:20: `const numDisks = 4`
$DIR/cmd/erasure-object_test.go:1072:11-1072:21: `.TempDir()`
$DIR/cmd/erasure-object_test.go:1076:3-1076:73: `fsDirs = append(fsDirs, filepath.Join(path, fmt.Sprintf("disk%d", i)))`
$DIR/cmd/erasure-object_test.go:1076:35-1076:72: `.Join(path, fmt.Sprintf("disk%d", i))`
$DIR/cmd/erasure-object_test.go:1076:50-1076:71: `.Sprintf("disk%d", i)`
$DIR/cmd/erasure-object_test.go:1081:3-1081:22: `removeRoots(fsDirs)`
$DIR/cmd/erasure-object_test.go:1086:16-1086:47: `.Shutdown(context.Background())`
$DIR/cmd/erasure-object_test.go:1086:33-1086:46: `.Background()`
$DIR/cmd/erasure-object_test.go:1090:2-1090:67: `err = objLayer.MakeBucket(ctx, "testbucket", MakeBucketOptions{})`
$DIR/cmd/erasure-object_test.go:1090:16-1090:67: `.MakeBucket(ctx, "testbucket", MakeBucketOptions{})`
$DIR/cmd/erasure-object_test.go:1096:2-1096:67: `err = unzipArchive("testdata/xl-meta-inline-notinline.zip", path)`
$DIR/cmd/erasure-object_test.go:1102:21-1102:90: `.GetObjectNInfo(ctx, "testbucket", "file", nil, nil, ObjectOptions{})`
$DIR/cmd/erasure-object_test.go:1107:10-1107:16: `.New()`
$DIR/cmd/erasure-object_test.go:1108:2-1108:25: `_, err = io.Copy(h, gr)`
$DIR/cmd/erasure-object_test.go:1108:13-1108:25: `.Copy(h, gr)`
$DIR/cmd/erasure-object_test.go:1114:2-1114:57: `const expectedHash = "fffb6377948ebea75ad2b8058e849ef5"`
$DIR/cmd/erasure-object_test.go:1115:18-1115:44: `.Sprintf("%x", h.Sum(nil))`
$DIR/cmd/erasure-object_test.go:1115:34-1115:43: `.Sum(nil)`
$DIR/cmd/erasure-object_test.go:1127:24-1127:57: `.WithCancel(context.Background())`
$DIR/cmd/erasure-object_test.go:1127:43-1127:56: `.Background()`
$DIR/cmd/erasure-object_test.go:1137:11-1137:42: `.Shutdown(context.Background())`
$DIR/cmd/erasure-object_test.go:1137:28-1137:41: `.Background()`
$DIR/cmd/erasure-object_test.go:1144:24-1144:35: `.getDisks()`
$DIR/cmd/erasure-object_test.go:1153:38-1153:80: `.Repeat([]byte{'a'}, smallFileThreshold*2)`
$DIR/cmd/erasure-object_test.go:1155:38-1155:80: `.Repeat([]byte{'a'}, smallFileThreshold*2)`
$DIR/cmd/erasure-object_test.go:1160:3-1160:101: `err = z.MakeBucket(ctx, testCase.bucket, MakeBucketOptions{VersioningEnabled: testCase.versioned})`
$DIR/cmd/erasure-object_test.go:1160:10-1160:101: `.MakeBucket(ctx, testCase.bucket, MakeBucketOptions{VersioningEnabled: testCase.versioned})`
$DIR/cmd/erasure-object_test.go:1166:23-1166:66: `.Repeat([]byte{'b'}, len(testCase.content))`
$DIR/cmd/erasure-object_test.go:1167:3-1167:29: `sets.erasureDisksMu.Lock()`
$DIR/cmd/erasure-object_test.go:1167:7-1167:29: `.erasureDisksMu.Lock()`
$DIR/cmd/erasure-object_test.go:1169:3-1169:31: `sets.erasureDisksMu.Unlock()`
$DIR/cmd/erasure-object_test.go:1169:7-1169:31: `.erasureDisksMu.Unlock()`
$DIR/cmd/erasure-object_test.go:1170:3-1171:49: `_, err = z.PutObject(ctx, testCase.bucket, testCase.object, mustGetPutObjReader(t, bytes.NewReader(initialData), int64(len(initialData)), "", ""),
			ObjectOptions{Versioned: testCase.versioned})`
$DIR/cmd/erasure-object_test.go:1170:13-1171:49: `.PutObject(ctx, testCase.bucket, testCase.object, mustGetPutObjReader(t, bytes.NewReader(initialData), int64(len(initialData)), "", ""),
			ObjectOptions{Versioned: testCase.versioned})`
$DIR/cmd/erasure-object_test.go:1170:91-1170:114: `.NewReader(initialData)`
$DIR/cmd/erasure-object_test.go:1177:3-1177:29: `sets.erasureDisksMu.Lock()`
$DIR/cmd/erasure-object_test.go:1177:7-1177:29: `.erasureDisksMu.Lock()`
$DIR/cmd/erasure-object_test.go:1180:4-1180:33: `copy(disks, origErasureDisks)`
$DIR/cmd/erasure-object_test.go:1181:4-1181:18: `disks[0] = nil`
$DIR/cmd/erasure-object_test.go:1182:4-1182:18: `disks[1] = nil`
$DIR/cmd/erasure-object_test.go:1185:3-1185:31: `sets.erasureDisksMu.Unlock()`
$DIR/cmd/erasure-object_test.go:1185:7-1185:31: `.erasureDisksMu.Unlock()`
$DIR/cmd/erasure-object_test.go:1186:16-1187:49: `.PutObject(ctx, testCase.bucket, testCase.object, mustGetPutObjReader(t, bytes.NewReader(testCase.content), int64(len(testCase.content)), "", ""),
			ObjectOptions{Versioned: testCase.versioned})`
$DIR/cmd/erasure-object_test.go:1186:94-1186:122: `.NewReader(testCase.content)`
$DIR/cmd/erasure-object_test.go:1193:3-1193:29: `sets.erasureDisksMu.Lock()`
$DIR/cmd/erasure-object_test.go:1193:7-1193:29: `.erasureDisksMu.Lock()`
$DIR/cmd/erasure-object_test.go:1195:3-1195:31: `sets.erasureDisksMu.Unlock()`
$DIR/cmd/erasure-object_test.go:1195:7-1195:31: `.erasureDisksMu.Unlock()`
$DIR/cmd/erasure-object_test.go:1196:15-1196:120: `.GetObjectNInfo(ctx, testCase.bucket, testCase.object, nil, nil, ObjectOptions{VersionID: got.VersionID})`
$DIR/cmd/erasure-object_test.go:1201:11-1201:17: `.New()`
$DIR/cmd/erasure-object_test.go:1202:3-1202:28: `h.Write(testCase.content)`
$DIR/cmd/erasure-object_test.go:1202:4-1202:28: `.Write(testCase.content)`
$DIR/cmd/erasure-object_test.go:1203:20-1203:29: `.Sum(nil)`
$DIR/cmd/erasure-object_test.go:1205:3-1205:12: `h.Reset()`
$DIR/cmd/erasure-object_test.go:1205:4-1205:12: `.Reset()`
$DIR/cmd/erasure-object_test.go:1206:3-1206:26: `_, err = io.Copy(h, gr)`
$DIR/cmd/erasure-object_test.go:1206:14-1206:26: `.Copy(h, gr)`
$DIR/cmd/erasure-object_test.go:1211:17-1211:26: `.Sum(nil)`
$DIR/cmd/erasure-object_test.go:1213:12-1213:43: `.Equal(foundHash, expectedHash)`
$DIR/cmd/erasure-server-pool-decom_gen_test.go:14:15-14:31: `.MarshalMsg(nil)`
$DIR/cmd/erasure-server-pool-decom_gen_test.go:18:16-18:34: `.UnmarshalMsg(bts)`
$DIR/cmd/erasure-server-pool-decom_gen_test.go:26:2-26:28: `left, err = msgp.Skip(bts)`
$DIR/cmd/erasure-server-pool-decom_gen_test.go:73:2-73:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/erasure-server-pool-decom_gen_test.go:73:6-73:23: `.Encode(&buf, &v)`
$DIR/cmd/erasure-server-pool-decom_gen_test.go:75:8-75:18: `.Msgsize()`
$DIR/cmd/erasure-server-pool-decom_gen_test.go:76:8-76:14: `.Len()`
$DIR/cmd/erasure-server-pool-decom_gen_test.go:81:13-81:31: `.Decode(&buf, &vn)`
$DIR/cmd/erasure-server-pool-decom_gen_test.go:86:2-86:13: `buf.Reset()`
$DIR/cmd/erasure-server-pool-decom_gen_test.go:86:5-86:13: `.Reset()`
$DIR/cmd/erasure-server-pool-decom_gen_test.go:87:2-87:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/erasure-server-pool-decom_gen_test.go:87:6-87:23: `.Encode(&buf, &v)`
$DIR/cmd/erasure-server-pool-decom_gen_test.go:88:2-88:35: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/erasure-server-pool-decom_gen_test.go:127:15-127:31: `.MarshalMsg(nil)`
$DIR/cmd/erasure-server-pool-decom_gen_test.go:131:16-131:34: `.UnmarshalMsg(bts)`
$DIR/cmd/erasure-server-pool-decom_gen_test.go:139:2-139:28: `left, err = msgp.Skip(bts)`
$DIR/cmd/erasure-server-pool-decom_gen_test.go:186:2-186:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/erasure-server-pool-decom_gen_test.go:186:6-186:23: `.Encode(&buf, &v)`
$DIR/cmd/erasure-server-pool-decom_gen_test.go:188:8-188:18: `.Msgsize()`
$DIR/cmd/erasure-server-pool-decom_gen_test.go:189:8-189:14: `.Len()`
$DIR/cmd/erasure-server-pool-decom_gen_test.go:194:13-194:31: `.Decode(&buf, &vn)`
$DIR/cmd/erasure-server-pool-decom_gen_test.go:199:2-199:13: `buf.Reset()`
$DIR/cmd/erasure-server-pool-decom_gen_test.go:199:5-199:13: `.Reset()`
$DIR/cmd/erasure-server-pool-decom_gen_test.go:200:2-200:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/erasure-server-pool-decom_gen_test.go:200:6-200:23: `.Encode(&buf, &v)`
$DIR/cmd/erasure-server-pool-decom_gen_test.go:201:2-201:35: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/erasure-server-pool-decom_gen_test.go:240:15-240:31: `.MarshalMsg(nil)`
$DIR/cmd/erasure-server-pool-decom_gen_test.go:244:16-244:34: `.UnmarshalMsg(bts)`
$DIR/cmd/erasure-server-pool-decom_gen_test.go:252:2-252:28: `left, err = msgp.Skip(bts)`
$DIR/cmd/erasure-server-pool-decom_gen_test.go:299:2-299:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/erasure-server-pool-decom_gen_test.go:299:6-299:23: `.Encode(&buf, &v)`
$DIR/cmd/erasure-server-pool-decom_gen_test.go:301:8-301:18: `.Msgsize()`
$DIR/cmd/erasure-server-pool-decom_gen_test.go:302:8-302:14: `.Len()`
$DIR/cmd/erasure-server-pool-decom_gen_test.go:307:13-307:31: `.Decode(&buf, &vn)`
$DIR/cmd/erasure-server-pool-decom_gen_test.go:312:2-312:13: `buf.Reset()`
$DIR/cmd/erasure-server-pool-decom_gen_test.go:312:5-312:13: `.Reset()`
$DIR/cmd/erasure-server-pool-decom_gen_test.go:313:2-313:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/erasure-server-pool-decom_gen_test.go:313:6-313:23: `.Encode(&buf, &v)`
$DIR/cmd/erasure-server-pool-decom_gen_test.go:314:2-314:35: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/erasure-server-pool-decom_gen_test.go:353:15-353:31: `.MarshalMsg(nil)`
$DIR/cmd/erasure-server-pool-decom_gen_test.go:357:16-357:34: `.UnmarshalMsg(bts)`
$DIR/cmd/erasure-server-pool-decom_gen_test.go:365:2-365:28: `left, err = msgp.Skip(bts)`
$DIR/cmd/erasure-server-pool-decom_gen_test.go:412:2-412:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/erasure-server-pool-decom_gen_test.go:412:6-412:23: `.Encode(&buf, &v)`
$DIR/cmd/erasure-server-pool-decom_gen_test.go:414:8-414:18: `.Msgsize()`
$DIR/cmd/erasure-server-pool-decom_gen_test.go:415:8-415:14: `.Len()`
$DIR/cmd/erasure-server-pool-decom_gen_test.go:420:13-420:31: `.Decode(&buf, &vn)`
$DIR/cmd/erasure-server-pool-decom_gen_test.go:425:2-425:13: `buf.Reset()`
$DIR/cmd/erasure-server-pool-decom_gen_test.go:425:5-425:13: `.Reset()`
$DIR/cmd/erasure-server-pool-decom_gen_test.go:426:2-426:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/erasure-server-pool-decom_gen_test.go:426:6-426:23: `.Encode(&buf, &v)`
$DIR/cmd/erasure-server-pool-decom_gen_test.go:427:2-427:35: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/erasure-server-pool-decom_gen_test.go:466:15-466:31: `.MarshalMsg(nil)`
$DIR/cmd/erasure-server-pool-decom_gen_test.go:470:16-470:34: `.UnmarshalMsg(bts)`
$DIR/cmd/erasure-server-pool-decom_gen_test.go:478:2-478:28: `left, err = msgp.Skip(bts)`
$DIR/cmd/erasure-server-pool-decom_gen_test.go:525:2-525:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/erasure-server-pool-decom_gen_test.go:525:6-525:23: `.Encode(&buf, &v)`
$DIR/cmd/erasure-server-pool-decom_gen_test.go:527:8-527:18: `.Msgsize()`
$DIR/cmd/erasure-server-pool-decom_gen_test.go:528:8-528:14: `.Len()`
$DIR/cmd/erasure-server-pool-decom_gen_test.go:533:13-533:31: `.Decode(&buf, &vn)`
$DIR/cmd/erasure-server-pool-decom_gen_test.go:538:2-538:13: `buf.Reset()`
$DIR/cmd/erasure-server-pool-decom_gen_test.go:538:5-538:13: `.Reset()`
$DIR/cmd/erasure-server-pool-decom_gen_test.go:539:2-539:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/erasure-server-pool-decom_gen_test.go:539:6-539:23: `.Encode(&buf, &v)`
$DIR/cmd/erasure-server-pool-decom_gen_test.go:540:2-540:35: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/erasure-server-pool-decom_test.go:67:2-67:34: `nmeta1.Version = poolMetaVersion`
$DIR/cmd/erasure-server-pool-decom_test.go:68:2-68:52: `nmeta1.Pools = append(nmeta1.Pools, meta.Pools...)`
$DIR/cmd/erasure-server-pool-decom_test.go:71:4-78:5: `nmeta1.Pools[i] = PoolStatus{
				CmdLine:    pool.CmdLine,
				ID:         i,
				LastUpdate: UTCNow(),
				Decommission: &PoolDecommissionInfo{
					Complete: true,
				},
			}`
$DIR/cmd/erasure-server-pool-decom_test.go:83:2-83:34: `nmeta2.Version = poolMetaVersion`
$DIR/cmd/erasure-server-pool-decom_test.go:84:2-84:52: `nmeta2.Pools = append(nmeta2.Pools, meta.Pools...)`
$DIR/cmd/erasure-server-pool-decom_test.go:87:4-94:5: `nmeta2.Pools[i] = PoolStatus{
				CmdLine:    pool.CmdLine,
				ID:         i,
				LastUpdate: UTCNow(),
				Decommission: &PoolDecommissionInfo{
					Complete: false,
				},
			}`
$DIR/cmd/erasure-server-pool-decom_test.go:180:3-194:5: `t.Run(testCase.name, func(t *testing.T) {
			update, err := testCase.meta.validate(testCase.pools)
			if testCase.expectedErr {
				t.Log(err)
			}
			if err != nil && !testCase.expectedErr {
				t.Errorf("Expected success, but found %s", err)
			}
			if err == nil && testCase.expectedErr {
				t.Error("Expected error, but got `nil`")
			}
			if update != testCase.expectedUpdate {
				t.Errorf("Expected %t, got %t", testCase.expectedUpdate, update)
			}
		})`
$DIR/cmd/erasure-server-pool-decom_test.go:180:4-194:5: `.Run(testCase.name, func(t *testing.T) {
			update, err := testCase.meta.validate(testCase.pools)
			if testCase.expectedErr {
				t.Log(err)
			}
			if err != nil && !testCase.expectedErr {
				t.Errorf("Expected success, but found %s", err)
			}
			if err == nil && testCase.expectedErr {
				t.Error("Expected error, but got `nil`")
			}
			if update != testCase.expectedUpdate {
				t.Errorf("Expected %t, got %t", testCase.expectedUpdate, update)
			}
		})`
$DIR/cmd/erasure-server-pool-decom_test.go:181:27-181:57: `.meta.validate(testCase.pools)`
$DIR/cmd/erasure-server-pool-rebalance_gen_test.go:14:15-14:31: `.MarshalMsg(nil)`
$DIR/cmd/erasure-server-pool-rebalance_gen_test.go:18:16-18:34: `.UnmarshalMsg(bts)`
$DIR/cmd/erasure-server-pool-rebalance_gen_test.go:26:2-26:28: `left, err = msgp.Skip(bts)`
$DIR/cmd/erasure-server-pool-rebalance_gen_test.go:73:2-73:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/erasure-server-pool-rebalance_gen_test.go:73:6-73:23: `.Encode(&buf, &v)`
$DIR/cmd/erasure-server-pool-rebalance_gen_test.go:75:8-75:18: `.Msgsize()`
$DIR/cmd/erasure-server-pool-rebalance_gen_test.go:76:8-76:14: `.Len()`
$DIR/cmd/erasure-server-pool-rebalance_gen_test.go:81:13-81:31: `.Decode(&buf, &vn)`
$DIR/cmd/erasure-server-pool-rebalance_gen_test.go:86:2-86:13: `buf.Reset()`
$DIR/cmd/erasure-server-pool-rebalance_gen_test.go:86:5-86:13: `.Reset()`
$DIR/cmd/erasure-server-pool-rebalance_gen_test.go:87:2-87:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/erasure-server-pool-rebalance_gen_test.go:87:6-87:23: `.Encode(&buf, &v)`
$DIR/cmd/erasure-server-pool-rebalance_gen_test.go:88:2-88:35: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/erasure-server-pool-rebalance_gen_test.go:127:15-127:31: `.MarshalMsg(nil)`
$DIR/cmd/erasure-server-pool-rebalance_gen_test.go:131:16-131:34: `.UnmarshalMsg(bts)`
$DIR/cmd/erasure-server-pool-rebalance_gen_test.go:139:2-139:28: `left, err = msgp.Skip(bts)`
$DIR/cmd/erasure-server-pool-rebalance_gen_test.go:186:2-186:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/erasure-server-pool-rebalance_gen_test.go:186:6-186:23: `.Encode(&buf, &v)`
$DIR/cmd/erasure-server-pool-rebalance_gen_test.go:188:8-188:18: `.Msgsize()`
$DIR/cmd/erasure-server-pool-rebalance_gen_test.go:189:8-189:14: `.Len()`
$DIR/cmd/erasure-server-pool-rebalance_gen_test.go:194:13-194:31: `.Decode(&buf, &vn)`
$DIR/cmd/erasure-server-pool-rebalance_gen_test.go:199:2-199:13: `buf.Reset()`
$DIR/cmd/erasure-server-pool-rebalance_gen_test.go:199:5-199:13: `.Reset()`
$DIR/cmd/erasure-server-pool-rebalance_gen_test.go:200:2-200:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/erasure-server-pool-rebalance_gen_test.go:200:6-200:23: `.Encode(&buf, &v)`
$DIR/cmd/erasure-server-pool-rebalance_gen_test.go:201:2-201:35: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/erasure-server-pool-rebalance_gen_test.go:240:15-240:31: `.MarshalMsg(nil)`
$DIR/cmd/erasure-server-pool-rebalance_gen_test.go:244:16-244:34: `.UnmarshalMsg(bts)`
$DIR/cmd/erasure-server-pool-rebalance_gen_test.go:252:2-252:28: `left, err = msgp.Skip(bts)`
$DIR/cmd/erasure-server-pool-rebalance_gen_test.go:299:2-299:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/erasure-server-pool-rebalance_gen_test.go:299:6-299:23: `.Encode(&buf, &v)`
$DIR/cmd/erasure-server-pool-rebalance_gen_test.go:301:8-301:18: `.Msgsize()`
$DIR/cmd/erasure-server-pool-rebalance_gen_test.go:302:8-302:14: `.Len()`
$DIR/cmd/erasure-server-pool-rebalance_gen_test.go:307:13-307:31: `.Decode(&buf, &vn)`
$DIR/cmd/erasure-server-pool-rebalance_gen_test.go:312:2-312:13: `buf.Reset()`
$DIR/cmd/erasure-server-pool-rebalance_gen_test.go:312:5-312:13: `.Reset()`
$DIR/cmd/erasure-server-pool-rebalance_gen_test.go:313:2-313:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/erasure-server-pool-rebalance_gen_test.go:313:6-313:23: `.Encode(&buf, &v)`
$DIR/cmd/erasure-server-pool-rebalance_gen_test.go:314:2-314:35: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/erasure-server-pool-rebalance_gen_test.go:353:15-353:31: `.MarshalMsg(nil)`
$DIR/cmd/erasure-server-pool-rebalance_gen_test.go:357:16-357:34: `.UnmarshalMsg(bts)`
$DIR/cmd/erasure-server-pool-rebalance_gen_test.go:365:2-365:28: `left, err = msgp.Skip(bts)`
$DIR/cmd/erasure-server-pool-rebalance_gen_test.go:412:2-412:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/erasure-server-pool-rebalance_gen_test.go:412:6-412:23: `.Encode(&buf, &v)`
$DIR/cmd/erasure-server-pool-rebalance_gen_test.go:414:8-414:18: `.Msgsize()`
$DIR/cmd/erasure-server-pool-rebalance_gen_test.go:415:8-415:14: `.Len()`
$DIR/cmd/erasure-server-pool-rebalance_gen_test.go:420:13-420:31: `.Decode(&buf, &vn)`
$DIR/cmd/erasure-server-pool-rebalance_gen_test.go:425:2-425:13: `buf.Reset()`
$DIR/cmd/erasure-server-pool-rebalance_gen_test.go:425:5-425:13: `.Reset()`
$DIR/cmd/erasure-server-pool-rebalance_gen_test.go:426:2-426:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/erasure-server-pool-rebalance_gen_test.go:426:6-426:23: `.Encode(&buf, &v)`
$DIR/cmd/erasure-server-pool-rebalance_gen_test.go:427:2-427:35: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/erasure-server-pool-rebalance_gen_test.go:466:15-466:31: `.MarshalMsg(nil)`
$DIR/cmd/erasure-server-pool-rebalance_gen_test.go:470:16-470:34: `.UnmarshalMsg(bts)`
$DIR/cmd/erasure-server-pool-rebalance_gen_test.go:478:2-478:28: `left, err = msgp.Skip(bts)`
$DIR/cmd/erasure-server-pool-rebalance_gen_test.go:525:2-525:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/erasure-server-pool-rebalance_gen_test.go:525:6-525:23: `.Encode(&buf, &v)`
$DIR/cmd/erasure-server-pool-rebalance_gen_test.go:527:8-527:18: `.Msgsize()`
$DIR/cmd/erasure-server-pool-rebalance_gen_test.go:528:8-528:14: `.Len()`
$DIR/cmd/erasure-server-pool-rebalance_gen_test.go:533:13-533:31: `.Decode(&buf, &vn)`
$DIR/cmd/erasure-server-pool-rebalance_gen_test.go:538:2-538:13: `buf.Reset()`
$DIR/cmd/erasure-server-pool-rebalance_gen_test.go:538:5-538:13: `.Reset()`
$DIR/cmd/erasure-server-pool-rebalance_gen_test.go:539:2-539:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/erasure-server-pool-rebalance_gen_test.go:539:6-539:23: `.Encode(&buf, &v)`
$DIR/cmd/erasure-server-pool-rebalance_gen_test.go:540:2-540:35: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/erasure-sets_test.go:162:24-162:57: `.WithCancel(context.Background())`
$DIR/cmd/erasure-sets_test.go:162:43-162:56: `.Background()`
$DIR/cmd/erasure-sets_test.go:171:19-171:65: `.Join(globalTestTmpDir, "minio-"+nextSuffix())`
$DIR/cmd/erasure-sets_test.go:172:3-172:44: `erasureDisks = append(erasureDisks, disk)`
$DIR/cmd/erasure-sets_test.go:173:11-173:27: `.RemoveAll(disk)`
$DIR/cmd/erasure-sets_test.go:182:2-182:59: `_, _, err = waitForFormatErasure(true, nil, 1, 1, 16, "")`
$DIR/cmd/erasure-sets_test.go:210:3-210:30: `objs[i] = &erasureObjects{}`
$DIR/cmd/erasure-sets_test.go:234:17-234:51: `.getHashedSet(testCase.objectName)`
$DIR/cmd/erasure_test.go:48:17-48:45: `.ReadFull(rand.Reader, data)`
$DIR/cmd/erasure_test.go:53:3-53:21: `copy(buffer, data)`
$DIR/cmd/erasure_test.go:55:37-55:50: `.Background()`
$DIR/cmd/erasure_test.go:59:26-59:67: `.EncodeData(context.Background(), buffer)`
$DIR/cmd/erasure_test.go:59:45-59:58: `.Background()`
$DIR/cmd/erasure_test.go:65:4-65:20: `encoded[j] = nil`
$DIR/cmd/erasure_test.go:68:4-68:20: `encoded[j] = nil`
$DIR/cmd/erasure_test.go:72:4-72:74: `err = erasure.DecodeDataAndParityBlocks(context.Background(), encoded)`
$DIR/cmd/erasure_test.go:72:17-72:74: `.DecodeDataAndParityBlocks(context.Background(), encoded)`
$DIR/cmd/erasure_test.go:72:51-72:64: `.Background()`
$DIR/cmd/erasure_test.go:74:4-74:43: `err = erasure.DecodeDataBlocks(encoded)`
$DIR/cmd/erasure_test.go:74:17-74:43: `.DecodeDataBlocks(encoded)`
$DIR/cmd/erasure_test.go:101:39-101:52: `.Background()`
$DIR/cmd/erasure_test.go:104:13-104:46: `.Equal(decodedData.Bytes(), data)`
$DIR/cmd/erasure_test.go:104:31-104:39: `.Bytes()`
$DIR/cmd/format-erasure_test.go:37:11-37:33: `.RemoveAll(erasureDir)`
$DIR/cmd/format-erasure_test.go:49:2-49:76: `format.Erasure.DistributionAlgo = formatErasureVersionV2DistributionAlgoV1`
$DIR/cmd/format-erasure_test.go:53:22-53:30: `.Clone()`
$DIR/cmd/format-erasure_test.go:54:3-54:53: `newFormat.Erasure.This = format.Erasure.Sets[0][j]`
$DIR/cmd/format-erasure_test.go:55:3-55:25: `formats[j] = newFormat`
$DIR/cmd/format-erasure_test.go:58:2-58:18: `formats[1] = nil`
$DIR/cmd/format-erasure_test.go:60:2-60:30: `formats[2].Erasure.This = ""`
$DIR/cmd/format-erasure_test.go:80:2-80:76: `format.Erasure.DistributionAlgo = formatErasureVersionV2DistributionAlgoV1`
$DIR/cmd/format-erasure_test.go:84:22-84:30: `.Clone()`
$DIR/cmd/format-erasure_test.go:85:3-85:53: `newFormat.Erasure.This = format.Erasure.Sets[0][j]`
$DIR/cmd/format-erasure_test.go:86:3-86:25: `formats[j] = newFormat`
$DIR/cmd/format-erasure_test.go:91:2-91:18: `formats[0] = nil`
$DIR/cmd/format-erasure_test.go:97:2-97:30: `formats[2].Erasure.This = ""`
$DIR/cmd/format-erasure_test.go:106:15-106:25: `.TempDir()`
$DIR/cmd/format-erasure_test.go:109:2-109:33: `m.Format = formatBackendErasure`
$DIR/cmd/format-erasure_test.go:110:2-110:33: `m.Version = formatMetaVersionV1`
$DIR/cmd/format-erasure_test.go:111:2-111:44: `m.Erasure.Version = formatErasureVersionV1`
$DIR/cmd/format-erasure_test.go:112:2-112:32: `m.Erasure.Disk = mustGetUUID()`
$DIR/cmd/format-erasure_test.go:113:2-113:88: `m.Erasure.JBOD = []string{m.Erasure.Disk, mustGetUUID(), mustGetUUID(), mustGetUUID()}`
$DIR/cmd/format-erasure_test.go:115:16-115:27: `.Marshal(m)`
$DIR/cmd/format-erasure_test.go:120:13-120:79: `.MkdirAll(pathJoin(rootPath, minioMetaBucket), os.FileMode(0o755))`
$DIR/cmd/format-erasure_test.go:120:62-120:78: `.FileMode(0o755)`
$DIR/cmd/format-erasure_test.go:124:13-124:101: `.WriteFile(pathJoin(rootPath, minioMetaBucket, formatConfigFile), b, os.FileMode(0o644))`
$DIR/cmd/format-erasure_test.go:124:84-124:100: `.FileMode(0o644)`
$DIR/cmd/format-erasure_test.go:142:2-142:77: `b, err = os.ReadFile(pathJoin(rootPath, minioMetaBucket, formatConfigFile))`
$DIR/cmd/format-erasure_test.go:142:13-142:77: `.ReadFile(pathJoin(rootPath, minioMetaBucket, formatConfigFile))`
$DIR/cmd/format-erasure_test.go:147:15-147:38: `.Unmarshal(b, formatV3)`
$DIR/cmd/format-erasure_test.go:156:13-156:65: `.DeepEqual(formatV3.Erasure.Sets[0], m.Erasure.JBOD)`
$DIR/cmd/format-erasure_test.go:160:2-160:24: `m = &formatErasureV1{}`
$DIR/cmd/format-erasure_test.go:161:2-161:22: `m.Format = "unknown"`
$DIR/cmd/format-erasure_test.go:162:2-162:33: `m.Version = formatMetaVersionV1`
$DIR/cmd/format-erasure_test.go:163:2-163:44: `m.Erasure.Version = formatErasureVersionV1`
$DIR/cmd/format-erasure_test.go:164:2-164:32: `m.Erasure.Disk = mustGetUUID()`
$DIR/cmd/format-erasure_test.go:165:2-165:88: `m.Erasure.JBOD = []string{m.Erasure.Disk, mustGetUUID(), mustGetUUID(), mustGetUUID()}`
$DIR/cmd/format-erasure_test.go:167:2-167:26: `b, err = json.Marshal(m)`
$DIR/cmd/format-erasure_test.go:167:15-167:26: `.Marshal(m)`
$DIR/cmd/format-erasure_test.go:172:13-172:101: `.WriteFile(pathJoin(rootPath, minioMetaBucket, formatConfigFile), b, os.FileMode(0o644))`
$DIR/cmd/format-erasure_test.go:172:84-172:100: `.FileMode(0o644)`
$DIR/cmd/format-erasure_test.go:180:2-180:24: `m = &formatErasureV1{}`
$DIR/cmd/format-erasure_test.go:181:2-181:33: `m.Format = formatBackendErasure`
$DIR/cmd/format-erasure_test.go:182:2-182:33: `m.Version = formatMetaVersionV1`
$DIR/cmd/format-erasure_test.go:183:2-183:26: `m.Erasure.Version = "30"`
$DIR/cmd/format-erasure_test.go:184:2-184:32: `m.Erasure.Disk = mustGetUUID()`
$DIR/cmd/format-erasure_test.go:185:2-185:88: `m.Erasure.JBOD = []string{m.Erasure.Disk, mustGetUUID(), mustGetUUID(), mustGetUUID()}`
$DIR/cmd/format-erasure_test.go:187:2-187:26: `b, err = json.Marshal(m)`
$DIR/cmd/format-erasure_test.go:187:15-187:26: `.Marshal(m)`
$DIR/cmd/format-erasure_test.go:192:13-192:101: `.WriteFile(pathJoin(rootPath, minioMetaBucket, formatConfigFile), b, os.FileMode(0o644))`
$DIR/cmd/format-erasure_test.go:192:84-192:100: `.FileMode(0o644)`
$DIR/cmd/format-erasure_test.go:277:2-277:76: `format.Erasure.DistributionAlgo = formatErasureVersionV2DistributionAlgoV1`
$DIR/cmd/format-erasure_test.go:282:23-282:31: `.Clone()`
$DIR/cmd/format-erasure_test.go:283:4-283:54: `newFormat.Erasure.This = format.Erasure.Sets[i][j]`
$DIR/cmd/format-erasure_test.go:284:4-284:42: `formats[i*setDriveCount+j] = newFormat`
$DIR/cmd/format-erasure_test.go:304:2-304:18: `formats[0] = nil`
$DIR/cmd/format-erasure_test.go:305:2-305:55: `quorumFormat, err = getFormatErasureInQuorum(formats)`
$DIR/cmd/format-erasure_test.go:311:2-311:30: `badFormat.Erasure.Sets = nil`
$DIR/cmd/format-erasure_test.go:317:2-317:47: `badFormatUUID.Erasure.Sets[0][0] = "bad-uuid"`
$DIR/cmd/format-erasure_test.go:323:2-323:40: `badFormatSetSize.Erasure.Sets[0] = nil`
$DIR/cmd/format-erasure_test.go:330:4-330:20: `formats[i] = nil`
$DIR/cmd/format-erasure_test.go:440:2-440:76: `format.Erasure.DistributionAlgo = formatErasureVersionV2DistributionAlgoV1`
$DIR/cmd/format-erasure_test.go:445:23-445:31: `.Clone()`
$DIR/cmd/format-erasure_test.go:446:4-446:54: `newFormat.Erasure.This = format.Erasure.Sets[i][j]`
$DIR/cmd/format-erasure_test.go:447:4-447:42: `formats[i*setDriveCount+j] = newFormat`
$DIR/cmd/format-erasure_test.go:467:2-467:18: `formats[0] = nil`
$DIR/cmd/format-erasure_test.go:475:2-475:44: `formats[1].Erasure.Sets[0][0] = "bad-uuid"`
$DIR/cmd/format-erasure_test.go:484:2-484:26: `formats[2].ID = "bad-id"`
$DIR/cmd/format-erasure_test.go:485:74-485:102: `.Is(err, errCorruptedFormat)`
$DIR/cmd/format-erasure_test.go:496:2-496:76: `format.Erasure.DistributionAlgo = formatErasureVersionV2DistributionAlgoV1`
$DIR/cmd/format-erasure_test.go:502:23-502:31: `.Clone()`
$DIR/cmd/format-erasure_test.go:503:4-503:54: `newFormat.Erasure.This = format.Erasure.Sets[i][j]`
$DIR/cmd/format-erasure_test.go:504:4-504:42: `formats[i*setDriveCount+j] = newFormat`
$DIR/cmd/format-erasure_test.go:514:2-514:31: `errs[15] = errUnformattedDisk`
$DIR/cmd/generic-handlers_test.go:38:15-38:57: `.Parse("http://localhost:9000/minio/lock")`
$DIR/cmd/generic-handlers_test.go:51:2-54:3: `r = &http.Request{
		Proto:  "HTTP/1.1",
		Method: http.MethodGet,
	}`
$DIR/cmd/generic-handlers_test.go:58:2-62:3: `r = &http.Request{
		Proto:  "HTTP/1.1",
		Method: http.MethodGet,
		URL:    &url.URL{Path: grid.RoutePath},
	}`
$DIR/cmd/generic-handlers_test.go:130:3-137:5: `t.Run("", func(t *testing.T) {
			contains := containsReservedMetadata(test.header)
			if contains && !test.shouldFail {
				t.Errorf("contains reserved header but should not fail")
			} else if !contains && test.shouldFail {
				t.Errorf("does not contain reserved header but failed")
			}
		})`
$DIR/cmd/generic-handlers_test.go:130:4-137:5: `.Run("", func(t *testing.T) {
			contains := containsReservedMetadata(test.header)
			if contains && !test.shouldFail {
				t.Errorf("contains reserved header but should not fail")
			} else if !contains && test.shouldFail {
				t.Errorf("does not contain reserved header but failed")
			}
		})`
$DIR/cmd/generic-handlers_test.go:154:27-154:46: `globalIsTLS = isSSL`
$DIR/cmd/generic-handlers_test.go:157:3-157:31: `w.WriteHeader(http.StatusOK)`
$DIR/cmd/generic-handlers_test.go:157:4-157:31: `.WriteHeader(http.StatusOK)`
$DIR/cmd/generic-handlers_test.go:160:3-160:27: `globalIsTLS = test.IsTLS`
$DIR/cmd/generic-handlers_test.go:162:16-162:30: `.NewRecorder()`
$DIR/cmd/generic-handlers_test.go:164:3-164:25: `r.Header = test.Header`
$DIR/cmd/generic-handlers_test.go:165:3-165:19: `r.URL = test.URL`
$DIR/cmd/generic-handlers_test.go:168:3-168:20: `h.ServeHTTP(w, r)`
$DIR/cmd/generic-handlers_test.go:168:4-168:20: `.ServeHTTP(w, r)`
$DIR/cmd/handler-utils_test.go:36:24-36:57: `.WithCancel(context.Background())`
$DIR/cmd/handler-utils_test.go:36:43-36:56: `.Background()`
$DIR/cmd/handler-utils_test.go:43:10-43:27: `.RemoveAll(fsDir)`
$DIR/cmd/handler-utils_test.go:50:20-50:61: `.NopCloser(bytes.NewReader([]byte("<>")))`
$DIR/cmd/handler-utils_test.go:50:36-50:60: `.NewReader([]byte("<>"))`
$DIR/cmd/handler-utils_test.go:56:20-56:66: `.NopCloser(bytes.NewReader([]byte("garbage")))`
$DIR/cmd/handler-utils_test.go:56:36-56:65: `.NewReader([]byte("garbage"))`
$DIR/cmd/handler-utils_test.go:63:3-63:41: `createBucketConfig.Location = location`
$DIR/cmd/handler-utils_test.go:64:36-64:64: `.Marshal(createBucketConfig)`
$DIR/cmd/handler-utils_test.go:65:36-65:71: `.NewReader(createBucketConfigBytes)`
$DIR/cmd/handler-utils_test.go:66:3-66:52: `req.Body = io.NopCloser(createBucketConfigBuffer)`
$DIR/cmd/handler-utils_test.go:66:16-66:52: `.NopCloser(createBucketConfigBuffer)`
$DIR/cmd/handler-utils_test.go:67:3-67:60: `req.ContentLength = int64(createBucketConfigBuffer.Len())`
$DIR/cmd/handler-utils_test.go:67:53-67:59: `.Len()`
$DIR/cmd/handler-utils_test.go:90:3-90:68: `config.SetRegion(globalServerConfig, testCase.serverConfigRegion)`
$DIR/cmd/handler-utils_test.go:90:9-90:68: `.SetRegion(globalServerConfig, testCase.serverConfigRegion)`
$DIR/cmd/handler-utils_test.go:166:41-166:54: `.Background()`
$DIR/cmd/handler-utils_test.go:166:65-166:93: `.MIMEHeader(testCase.header)`
$DIR/cmd/handler-utils_test.go:173:28-173:67: `.DeepEqual(metadata, testCase.metadata)`
$DIR/cmd/httprange_test.go:45:18-45:48: `.GetOffsetLength(resourceSize)`
$DIR/cmd/httprange_test.go:94:3-94:40: `rs, err1 = parseRequestRangeSpec(irs)`
$DIR/cmd/httprange_test.go:96:4-96:49: `o, l, err2 = rs.GetOffsetLength(resourceSize)`
$DIR/cmd/httprange_test.go:96:19-96:49: `.GetOffsetLength(resourceSize)`
$DIR/cmd/httprange_test.go:137:15-137:26: `.ToHeader()`
$DIR/cmd/jwt_test.go:41:24-41:57: `.WithCancel(context.Background())`
$DIR/cmd/jwt_test.go:41:43-41:56: `.Background()`
$DIR/cmd/jwt_test.go:48:10-48:27: `.RemoveAll(fsDir)`
$DIR/cmd/last-minute_gen_test.go:14:15-14:31: `.MarshalMsg(nil)`
$DIR/cmd/last-minute_gen_test.go:18:16-18:34: `.UnmarshalMsg(bts)`
$DIR/cmd/last-minute_gen_test.go:26:2-26:28: `left, err = msgp.Skip(bts)`
$DIR/cmd/last-minute_gen_test.go:73:2-73:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/last-minute_gen_test.go:73:6-73:23: `.Encode(&buf, &v)`
$DIR/cmd/last-minute_gen_test.go:75:8-75:18: `.Msgsize()`
$DIR/cmd/last-minute_gen_test.go:76:8-76:14: `.Len()`
$DIR/cmd/last-minute_gen_test.go:81:13-81:31: `.Decode(&buf, &vn)`
$DIR/cmd/last-minute_gen_test.go:86:2-86:13: `buf.Reset()`
$DIR/cmd/last-minute_gen_test.go:86:5-86:13: `.Reset()`
$DIR/cmd/last-minute_gen_test.go:87:2-87:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/last-minute_gen_test.go:87:6-87:23: `.Encode(&buf, &v)`
$DIR/cmd/last-minute_gen_test.go:88:2-88:35: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/last-minute_gen_test.go:127:15-127:31: `.MarshalMsg(nil)`
$DIR/cmd/last-minute_gen_test.go:131:16-131:34: `.UnmarshalMsg(bts)`
$DIR/cmd/last-minute_gen_test.go:139:2-139:28: `left, err = msgp.Skip(bts)`
$DIR/cmd/last-minute_gen_test.go:186:2-186:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/last-minute_gen_test.go:186:6-186:23: `.Encode(&buf, &v)`
$DIR/cmd/last-minute_gen_test.go:188:8-188:18: `.Msgsize()`
$DIR/cmd/last-minute_gen_test.go:189:8-189:14: `.Len()`
$DIR/cmd/last-minute_gen_test.go:194:13-194:31: `.Decode(&buf, &vn)`
$DIR/cmd/last-minute_gen_test.go:199:2-199:13: `buf.Reset()`
$DIR/cmd/last-minute_gen_test.go:199:5-199:13: `.Reset()`
$DIR/cmd/last-minute_gen_test.go:200:2-200:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/last-minute_gen_test.go:200:6-200:23: `.Encode(&buf, &v)`
$DIR/cmd/last-minute_gen_test.go:201:2-201:35: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/last-minute_gen_test.go:240:15-240:31: `.MarshalMsg(nil)`
$DIR/cmd/last-minute_gen_test.go:244:16-244:34: `.UnmarshalMsg(bts)`
$DIR/cmd/last-minute_gen_test.go:252:2-252:28: `left, err = msgp.Skip(bts)`
$DIR/cmd/last-minute_gen_test.go:299:2-299:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/last-minute_gen_test.go:299:6-299:23: `.Encode(&buf, &v)`
$DIR/cmd/last-minute_gen_test.go:301:8-301:18: `.Msgsize()`
$DIR/cmd/last-minute_gen_test.go:302:8-302:14: `.Len()`
$DIR/cmd/last-minute_gen_test.go:307:13-307:31: `.Decode(&buf, &vn)`
$DIR/cmd/last-minute_gen_test.go:312:2-312:13: `buf.Reset()`
$DIR/cmd/last-minute_gen_test.go:312:5-312:13: `.Reset()`
$DIR/cmd/last-minute_gen_test.go:313:2-313:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/last-minute_gen_test.go:313:6-313:23: `.Encode(&buf, &v)`
$DIR/cmd/last-minute_gen_test.go:314:2-314:35: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/local-locker_gen_test.go:14:15-14:31: `.MarshalMsg(nil)`
$DIR/cmd/local-locker_gen_test.go:18:16-18:34: `.UnmarshalMsg(bts)`
$DIR/cmd/local-locker_gen_test.go:26:2-26:28: `left, err = msgp.Skip(bts)`
$DIR/cmd/local-locker_gen_test.go:73:2-73:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/local-locker_gen_test.go:73:6-73:23: `.Encode(&buf, &v)`
$DIR/cmd/local-locker_gen_test.go:75:8-75:18: `.Msgsize()`
$DIR/cmd/local-locker_gen_test.go:76:8-76:14: `.Len()`
$DIR/cmd/local-locker_gen_test.go:81:13-81:31: `.Decode(&buf, &vn)`
$DIR/cmd/local-locker_gen_test.go:86:2-86:13: `buf.Reset()`
$DIR/cmd/local-locker_gen_test.go:86:5-86:13: `.Reset()`
$DIR/cmd/local-locker_gen_test.go:87:2-87:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/local-locker_gen_test.go:87:6-87:23: `.Encode(&buf, &v)`
$DIR/cmd/local-locker_gen_test.go:88:2-88:35: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/local-locker_gen_test.go:127:15-127:31: `.MarshalMsg(nil)`
$DIR/cmd/local-locker_gen_test.go:131:16-131:34: `.UnmarshalMsg(bts)`
$DIR/cmd/local-locker_gen_test.go:139:2-139:28: `left, err = msgp.Skip(bts)`
$DIR/cmd/local-locker_gen_test.go:186:2-186:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/local-locker_gen_test.go:186:6-186:23: `.Encode(&buf, &v)`
$DIR/cmd/local-locker_gen_test.go:188:8-188:18: `.Msgsize()`
$DIR/cmd/local-locker_gen_test.go:189:8-189:14: `.Len()`
$DIR/cmd/local-locker_gen_test.go:194:13-194:31: `.Decode(&buf, &vn)`
$DIR/cmd/local-locker_gen_test.go:199:2-199:13: `buf.Reset()`
$DIR/cmd/local-locker_gen_test.go:199:5-199:13: `.Reset()`
$DIR/cmd/local-locker_gen_test.go:200:2-200:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/local-locker_gen_test.go:200:6-200:23: `.Encode(&buf, &v)`
$DIR/cmd/local-locker_gen_test.go:201:2-201:35: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/local-locker_gen_test.go:240:15-240:31: `.MarshalMsg(nil)`
$DIR/cmd/local-locker_gen_test.go:244:16-244:34: `.UnmarshalMsg(bts)`
$DIR/cmd/local-locker_gen_test.go:252:2-252:28: `left, err = msgp.Skip(bts)`
$DIR/cmd/local-locker_gen_test.go:299:2-299:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/local-locker_gen_test.go:299:6-299:23: `.Encode(&buf, &v)`
$DIR/cmd/local-locker_gen_test.go:301:8-301:18: `.Msgsize()`
$DIR/cmd/local-locker_gen_test.go:302:8-302:14: `.Len()`
$DIR/cmd/local-locker_gen_test.go:307:13-307:31: `.Decode(&buf, &vn)`
$DIR/cmd/local-locker_gen_test.go:312:2-312:13: `buf.Reset()`
$DIR/cmd/local-locker_gen_test.go:312:5-312:13: `.Reset()`
$DIR/cmd/local-locker_gen_test.go:313:2-313:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/local-locker_gen_test.go:313:6-313:23: `.Encode(&buf, &v)`
$DIR/cmd/local-locker_gen_test.go:314:2-314:35: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/local-locker_test.go:36:16-36:29: `.Background()`
$DIR/cmd/local-locker_test.go:41:16-41:23: `.Name()`
$DIR/cmd/local-locker_test.go:45:15-45:30: `.Lock(ctx, arg)`
$DIR/cmd/local-locker_test.go:52:3-52:35: `wResources[i] = arg.Resources[0]`
$DIR/cmd/local-locker_test.go:59:16-59:23: `.Name()`
$DIR/cmd/local-locker_test.go:63:15-63:31: `.RLock(ctx, arg)`
$DIR/cmd/local-locker_test.go:71:3-71:30: `ok, err = l.RLock(ctx, arg)`
$DIR/cmd/local-locker_test.go:71:14-71:30: `.RLock(ctx, arg)`
$DIR/cmd/local-locker_test.go:79:3-79:35: `rResources[i] = arg.Resources[0]`
$DIR/cmd/local-locker_test.go:88:2-88:29: `l.expireOldLocks(time.Hour)`
$DIR/cmd/local-locker_test.go:88:3-88:29: `.expireOldLocks(time.Hour)`
$DIR/cmd/local-locker_test.go:97:2-97:32: `l.expireOldLocks(-time.Minute)`
$DIR/cmd/local-locker_test.go:97:3-97:32: `.expireOldLocks(-time.Minute)`
$DIR/cmd/local-locker_test.go:107:2-107:16: `const n = 1000`
$DIR/cmd/local-locker_test.go:108:2-108:13: `const m = 5`
$DIR/cmd/local-locker_test.go:114:16-114:29: `.Background()`
$DIR/cmd/local-locker_test.go:118:4-118:28: `names[j] = mustGetUUID()`
$DIR/cmd/local-locker_test.go:124:16-124:23: `.Name()`
$DIR/cmd/local-locker_test.go:128:15-128:30: `.Lock(ctx, arg)`
$DIR/cmd/local-locker_test.go:135:3-135:24: `wResources[i] = names`
$DIR/cmd/local-locker_test.go:136:3-136:17: `wUIDs[i] = uid`
$DIR/cmd/local-locker_test.go:145:16-145:23: `.Name()`
$DIR/cmd/local-locker_test.go:149:15-149:31: `.RLock(ctx, arg)`
$DIR/cmd/local-locker_test.go:156:3-156:29: `rUIDs = append(rUIDs, uid)`
$DIR/cmd/local-locker_test.go:159:3-159:22: `uid = mustGetUUID()`
$DIR/cmd/local-locker_test.go:160:3-160:16: `arg.UID = uid`
$DIR/cmd/local-locker_test.go:161:3-161:30: `ok, err = l.RLock(ctx, arg)`
$DIR/cmd/local-locker_test.go:161:14-161:30: `.RLock(ctx, arg)`
$DIR/cmd/local-locker_test.go:168:3-168:23: `rResources[i] = name`
$DIR/cmd/local-locker_test.go:169:3-169:29: `rUIDs = append(rUIDs, uid)`
$DIR/cmd/local-locker_test.go:184:16-184:23: `.Name()`
$DIR/cmd/local-locker_test.go:188:15-188:33: `.RUnlock(ctx, arg)`
$DIR/cmd/local-locker_test.go:215:15-215:33: `.RUnlock(ctx, arg)`
$DIR/cmd/local-locker_test.go:243:15-243:32: `.Unlock(ctx, arg)`
$DIR/cmd/local-locker_test.go:263:13-263:36: `.New(rand.NewSource(0))`
$DIR/cmd/local-locker_test.go:263:22-263:35: `.NewSource(0)`
$DIR/cmd/local-locker_test.go:266:13-266:21: `.Short()`
$DIR/cmd/local-locker_test.go:269:3-344:5: `t.Run(fmt.Sprintf("%d-locks", locks), func(t *testing.T) {
			// Number of readers per lock...
			for _, readers := range []int{1, 10, 100} {
				if locks > 1000 && readers > 1 {
					continue
				}
				if testing.Short() && readers > 10 {
					continue
				}
				t.Run(fmt.Sprintf("%d-read", readers), func(t *testing.T) {
					l := newLocker()
					for i := 0; i < locks; i++ {
						var tmp [16]byte
						rng.Read(tmp[:])
						res := []string{hex.EncodeToString(tmp[:])}

						for i := 0; i < readers; i++ {
							rng.Read(tmp[:])
							ok, err := l.RLock(context.Background(), dsync.LockArgs{
								UID:       uuid.NewString(),
								Resources: res,
								Source:    hex.EncodeToString(tmp[:8]),
								Owner:     hex.EncodeToString(tmp[8:]),
								Quorum:    0,
							})
							if !ok || err != nil {
								t.Fatal("failed:", err, ok)
							}
						}
					}
					start := time.Now()
					l.expireOldLocks(time.Hour)
					t.Logf("Scan Took: %v. Left: %d/%d", time.Since(start).Round(time.Millisecond), len(l.lockUID), len(l.lockMap))
					if len(l.lockMap) != locks {
						t.Fatalf("objects deleted, want %d != got %d", locks, len(l.lockMap))
					}
					if len(l.lockUID) != locks*readers {
						t.Fatalf("objects deleted, want %d != got %d", locks*readers, len(l.lockUID))
					}

					// Expire 50%
					expired := time.Now().Add(-time.Hour * 2)
					for _, v := range l.lockMap {
						for i := range v {
							if rng.Intn(2) == 0 {
								v[i].TimeLastRefresh = expired
							}
						}
					}
					start = time.Now()
					l.expireOldLocks(time.Hour)
					t.Logf("Expire 50%% took: %v. Left: %d/%d", time.Since(start).Round(time.Millisecond), len(l.lockUID), len(l.lockMap))

					if len(l.lockUID) == locks*readers {
						t.Fatalf("objects uids all remain, unlikely")
					}
					if len(l.lockMap) == 0 {
						t.Fatalf("objects all deleted, 0 remains")
					}
					if len(l.lockUID) == 0 {
						t.Fatalf("objects uids all deleted, 0 remains")
					}

					start = time.Now()
					l.expireOldLocks(-time.Minute)
					t.Logf("Expire rest took: %v. Left: %d/%d", time.Since(start).Round(time.Millisecond), len(l.lockUID), len(l.lockMap))

					if len(l.lockMap) != 0 {
						t.Fatalf("objects not deleted, want %d != got %d", 0, len(l.lockMap))
					}
					if len(l.lockUID) != 0 {
						t.Fatalf("objects not deleted, want %d != got %d", 0, len(l.lockUID))
					}
				})
			}
		})`
$DIR/cmd/local-locker_test.go:269:4-344:5: `.Run(fmt.Sprintf("%d-locks", locks), func(t *testing.T) {
			// Number of readers per lock...
			for _, readers := range []int{1, 10, 100} {
				if locks > 1000 && readers > 1 {
					continue
				}
				if testing.Short() && readers > 10 {
					continue
				}
				t.Run(fmt.Sprintf("%d-read", readers), func(t *testing.T) {
					l := newLocker()
					for i := 0; i < locks; i++ {
						var tmp [16]byte
						rng.Read(tmp[:])
						res := []string{hex.EncodeToString(tmp[:])}

						for i := 0; i < readers; i++ {
							rng.Read(tmp[:])
							ok, err := l.RLock(context.Background(), dsync.LockArgs{
								UID:       uuid.NewString(),
								Resources: res,
								Source:    hex.EncodeToString(tmp[:8]),
								Owner:     hex.EncodeToString(tmp[8:]),
								Quorum:    0,
							})
							if !ok || err != nil {
								t.Fatal("failed:", err, ok)
							}
						}
					}
					start := time.Now()
					l.expireOldLocks(time.Hour)
					t.Logf("Scan Took: %v. Left: %d/%d", time.Since(start).Round(time.Millisecond), len(l.lockUID), len(l.lockMap))
					if len(l.lockMap) != locks {
						t.Fatalf("objects deleted, want %d != got %d", locks, len(l.lockMap))
					}
					if len(l.lockUID) != locks*readers {
						t.Fatalf("objects deleted, want %d != got %d", locks*readers, len(l.lockUID))
					}

					// Expire 50%
					expired := time.Now().Add(-time.Hour * 2)
					for _, v := range l.lockMap {
						for i := range v {
							if rng.Intn(2) == 0 {
								v[i].TimeLastRefresh = expired
							}
						}
					}
					start = time.Now()
					l.expireOldLocks(time.Hour)
					t.Logf("Expire 50%% took: %v. Left: %d/%d", time.Since(start).Round(time.Millisecond), len(l.lockUID), len(l.lockMap))

					if len(l.lockUID) == locks*readers {
						t.Fatalf("objects uids all remain, unlikely")
					}
					if len(l.lockMap) == 0 {
						t.Fatalf("objects all deleted, 0 remains")
					}
					if len(l.lockUID) == 0 {
						t.Fatalf("objects uids all deleted, 0 remains")
					}

					start = time.Now()
					l.expireOldLocks(-time.Minute)
					t.Logf("Expire rest took: %v. Left: %d/%d", time.Since(start).Round(time.Millisecond), len(l.lockUID), len(l.lockMap))

					if len(l.lockMap) != 0 {
						t.Fatalf("objects not deleted, want %d != got %d", 0, len(l.lockMap))
					}
					if len(l.lockUID) != 0 {
						t.Fatalf("objects not deleted, want %d != got %d", 0, len(l.lockUID))
					}
				})
			}
		})`
$DIR/cmd/local-locker_test.go:269:12-269:39: `.Sprintf("%d-locks", locks)`
$DIR/cmd/local-locker_test.go:275:15-275:23: `.Short()`
$DIR/cmd/local-locker_test.go:278:5-342:7: `t.Run(fmt.Sprintf("%d-read", readers), func(t *testing.T) {
					l := newLocker()
					for i := 0; i < locks; i++ {
						var tmp [16]byte
						rng.Read(tmp[:])
						res := []string{hex.EncodeToString(tmp[:])}

						for i := 0; i < readers; i++ {
							rng.Read(tmp[:])
							ok, err := l.RLock(context.Background(), dsync.LockArgs{
								UID:       uuid.NewString(),
								Resources: res,
								Source:    hex.EncodeToString(tmp[:8]),
								Owner:     hex.EncodeToString(tmp[8:]),
								Quorum:    0,
							})
							if !ok || err != nil {
								t.Fatal("failed:", err, ok)
							}
						}
					}
					start := time.Now()
					l.expireOldLocks(time.Hour)
					t.Logf("Scan Took: %v. Left: %d/%d", time.Since(start).Round(time.Millisecond), len(l.lockUID), len(l.lockMap))
					if len(l.lockMap) != locks {
						t.Fatalf("objects deleted, want %d != got %d", locks, len(l.lockMap))
					}
					if len(l.lockUID) != locks*readers {
						t.Fatalf("objects deleted, want %d != got %d", locks*readers, len(l.lockUID))
					}

					// Expire 50%
					expired := time.Now().Add(-time.Hour * 2)
					for _, v := range l.lockMap {
						for i := range v {
							if rng.Intn(2) == 0 {
								v[i].TimeLastRefresh = expired
							}
						}
					}
					start = time.Now()
					l.expireOldLocks(time.Hour)
					t.Logf("Expire 50%% took: %v. Left: %d/%d", time.Since(start).Round(time.Millisecond), len(l.lockUID), len(l.lockMap))

					if len(l.lockUID) == locks*readers {
						t.Fatalf("objects uids all remain, unlikely")
					}
					if len(l.lockMap) == 0 {
						t.Fatalf("objects all deleted, 0 remains")
					}
					if len(l.lockUID) == 0 {
						t.Fatalf("objects uids all deleted, 0 remains")
					}

					start = time.Now()
					l.expireOldLocks(-time.Minute)
					t.Logf("Expire rest took: %v. Left: %d/%d", time.Since(start).Round(time.Millisecond), len(l.lockUID), len(l.lockMap))

					if len(l.lockMap) != 0 {
						t.Fatalf("objects not deleted, want %d != got %d", 0, len(l.lockMap))
					}
					if len(l.lockUID) != 0 {
						t.Fatalf("objects not deleted, want %d != got %d", 0, len(l.lockUID))
					}
				})`
$DIR/cmd/local-locker_test.go:278:6-342:7: `.Run(fmt.Sprintf("%d-read", readers), func(t *testing.T) {
					l := newLocker()
					for i := 0; i < locks; i++ {
						var tmp [16]byte
						rng.Read(tmp[:])
						res := []string{hex.EncodeToString(tmp[:])}

						for i := 0; i < readers; i++ {
							rng.Read(tmp[:])
							ok, err := l.RLock(context.Background(), dsync.LockArgs{
								UID:       uuid.NewString(),
								Resources: res,
								Source:    hex.EncodeToString(tmp[:8]),
								Owner:     hex.EncodeToString(tmp[8:]),
								Quorum:    0,
							})
							if !ok || err != nil {
								t.Fatal("failed:", err, ok)
							}
						}
					}
					start := time.Now()
					l.expireOldLocks(time.Hour)
					t.Logf("Scan Took: %v. Left: %d/%d", time.Since(start).Round(time.Millisecond), len(l.lockUID), len(l.lockMap))
					if len(l.lockMap) != locks {
						t.Fatalf("objects deleted, want %d != got %d", locks, len(l.lockMap))
					}
					if len(l.lockUID) != locks*readers {
						t.Fatalf("objects deleted, want %d != got %d", locks*readers, len(l.lockUID))
					}

					// Expire 50%
					expired := time.Now().Add(-time.Hour * 2)
					for _, v := range l.lockMap {
						for i := range v {
							if rng.Intn(2) == 0 {
								v[i].TimeLastRefresh = expired
							}
						}
					}
					start = time.Now()
					l.expireOldLocks(time.Hour)
					t.Logf("Expire 50%% took: %v. Left: %d/%d", time.Since(start).Round(time.Millisecond), len(l.lockUID), len(l.lockMap))

					if len(l.lockUID) == locks*readers {
						t.Fatalf("objects uids all remain, unlikely")
					}
					if len(l.lockMap) == 0 {
						t.Fatalf("objects all deleted, 0 remains")
					}
					if len(l.lockUID) == 0 {
						t.Fatalf("objects uids all deleted, 0 remains")
					}

					start = time.Now()
					l.expireOldLocks(-time.Minute)
					t.Logf("Expire rest took: %v. Left: %d/%d", time.Since(start).Round(time.Millisecond), len(l.lockUID), len(l.lockMap))

					if len(l.lockMap) != 0 {
						t.Fatalf("objects not deleted, want %d != got %d", 0, len(l.lockMap))
					}
					if len(l.lockUID) != 0 {
						t.Fatalf("objects not deleted, want %d != got %d", 0, len(l.lockUID))
					}
				})`
$DIR/cmd/local-locker_test.go:278:14-278:42: `.Sprintf("%d-read", readers)`
$DIR/cmd/local-locker_test.go:282:7-282:23: `rng.Read(tmp[:])`
$DIR/cmd/local-locker_test.go:282:10-282:23: `.Read(tmp[:])`
$DIR/cmd/local-locker_test.go:283:26-283:49: `.EncodeToString(tmp[:])`
$DIR/cmd/local-locker_test.go:286:8-286:24: `rng.Read(tmp[:])`
$DIR/cmd/local-locker_test.go:286:11-286:24: `.Read(tmp[:])`
$DIR/cmd/local-locker_test.go:287:20-293:10: `.RLock(context.Background(), dsync.LockArgs{
								UID:       uuid.NewString(),
								Resources: res,
								Source:    hex.EncodeToString(tmp[:8]),
								Owner:     hex.EncodeToString(tmp[8:]),
								Quorum:    0,
							})`
$DIR/cmd/local-locker_test.go:287:34-287:47: `.Background()`
$DIR/cmd/local-locker_test.go:288:24-288:36: `.NewString()`
$DIR/cmd/local-locker_test.go:290:23-290:47: `.EncodeToString(tmp[:8])`
$DIR/cmd/local-locker_test.go:291:23-291:47: `.EncodeToString(tmp[8:])`
$DIR/cmd/local-locker_test.go:299:19-299:25: `.Now()`
$DIR/cmd/local-locker_test.go:300:6-300:33: `l.expireOldLocks(time.Hour)`
$DIR/cmd/local-locker_test.go:300:7-300:33: `.expireOldLocks(time.Hour)`
$DIR/cmd/local-locker_test.go:310:21-310:27: `.Now()`
$DIR/cmd/local-locker_test.go:310:27-310:47: `.Add(-time.Hour * 2)`
$DIR/cmd/local-locker_test.go:313:14-313:22: `.Intn(2)`
$DIR/cmd/local-locker_test.go:314:9-314:39: `v[i].TimeLastRefresh = expired`
$DIR/cmd/local-locker_test.go:318:6-318:24: `start = time.Now()`
$DIR/cmd/local-locker_test.go:318:18-318:24: `.Now()`
$DIR/cmd/local-locker_test.go:319:6-319:33: `l.expireOldLocks(time.Hour)`
$DIR/cmd/local-locker_test.go:319:7-319:33: `.expireOldLocks(time.Hour)`
$DIR/cmd/local-locker_test.go:332:6-332:24: `start = time.Now()`
$DIR/cmd/local-locker_test.go:332:18-332:24: `.Now()`
$DIR/cmd/local-locker_test.go:333:6-333:36: `l.expireOldLocks(-time.Minute)`
$DIR/cmd/local-locker_test.go:333:7-333:36: `.expireOldLocks(-time.Minute)`
$DIR/cmd/local-locker_test.go:349:13-349:36: `.New(rand.NewSource(0))`
$DIR/cmd/local-locker_test.go:349:22-349:35: `.NewSource(0)`
$DIR/cmd/local-locker_test.go:352:13-352:21: `.Short()`
$DIR/cmd/local-locker_test.go:355:3-437:5: `t.Run(fmt.Sprintf("%d-locks", locks), func(t *testing.T) {
			// Number of readers per lock...
			for _, readers := range []int{1, 10, 100} {
				if locks > 1000 && readers > 1 {
					continue
				}
				if testing.Short() && readers > 10 {
					continue
				}
				t.Run(fmt.Sprintf("%d-read", readers), func(t *testing.T) {
					l := newLocker()
					for i := 0; i < locks; i++ {
						var tmp [16]byte
						rng.Read(tmp[:])
						res := []string{hex.EncodeToString(tmp[:])}

						for i := 0; i < readers; i++ {
							rng.Read(tmp[:])
							ok, err := l.RLock(context.Background(), dsync.LockArgs{
								UID:       uuid.NewString(),
								Resources: res,
								Source:    hex.EncodeToString(tmp[:8]),
								Owner:     hex.EncodeToString(tmp[8:]),
								Quorum:    0,
							})
							if !ok || err != nil {
								t.Fatal("failed:", err, ok)
							}
						}
					}

					// Expire 50%
					toUnLock := make([]dsync.LockArgs, 0, locks*readers)
					for k, v := range l.lockMap {
						for _, lock := range v {
							if rng.Intn(2) == 0 {
								toUnLock = append(toUnLock, dsync.LockArgs{Resources: []string{k}, UID: lock.UID})
							}
						}
					}
					start := time.Now()
					for _, lock := range toUnLock {
						ok, err := l.ForceUnlock(context.Background(), lock)
						if err != nil || !ok {
							t.Fatal(err)
						}
					}
					t.Logf("Expire 50%% took: %v. Left: %d/%d", time.Since(start).Round(time.Millisecond), len(l.lockUID), len(l.lockMap))

					if len(l.lockUID) == locks*readers {
						t.Fatalf("objects uids all remain, unlikely")
					}
					if len(l.lockMap) == 0 && locks > 10 {
						t.Fatalf("objects all deleted, 0 remains")
					}
					if len(l.lockUID) != locks*readers-len(toUnLock) {
						t.Fatalf("want %d objects uids all deleted, %d remains", len(l.lockUID), locks*readers-len(toUnLock))
					}

					toUnLock = toUnLock[:0]
					for k, v := range l.lockMap {
						for _, lock := range v {
							toUnLock = append(toUnLock, dsync.LockArgs{Resources: []string{k}, UID: lock.UID, Owner: lock.Owner})
						}
					}
					start = time.Now()
					for _, lock := range toUnLock {
						ok, err := l.RUnlock(context.TODO(), lock)
						if err != nil || !ok {
							t.Fatal(err)
						}
					}
					t.Logf("Expire rest took: %v. Left: %d/%d", time.Since(start).Round(time.Millisecond), len(l.lockUID), len(l.lockMap))

					if len(l.lockMap) != 0 {
						t.Fatalf("objects not deleted, want %d != got %d", 0, len(l.lockMap))
					}
					if len(l.lockUID) != 0 {
						t.Fatalf("objects not deleted, want %d != got %d", 0, len(l.lockUID))
					}
				})
			}
		})`
$DIR/cmd/local-locker_test.go:355:4-437:5: `.Run(fmt.Sprintf("%d-locks", locks), func(t *testing.T) {
			// Number of readers per lock...
			for _, readers := range []int{1, 10, 100} {
				if locks > 1000 && readers > 1 {
					continue
				}
				if testing.Short() && readers > 10 {
					continue
				}
				t.Run(fmt.Sprintf("%d-read", readers), func(t *testing.T) {
					l := newLocker()
					for i := 0; i < locks; i++ {
						var tmp [16]byte
						rng.Read(tmp[:])
						res := []string{hex.EncodeToString(tmp[:])}

						for i := 0; i < readers; i++ {
							rng.Read(tmp[:])
							ok, err := l.RLock(context.Background(), dsync.LockArgs{
								UID:       uuid.NewString(),
								Resources: res,
								Source:    hex.EncodeToString(tmp[:8]),
								Owner:     hex.EncodeToString(tmp[8:]),
								Quorum:    0,
							})
							if !ok || err != nil {
								t.Fatal("failed:", err, ok)
							}
						}
					}

					// Expire 50%
					toUnLock := make([]dsync.LockArgs, 0, locks*readers)
					for k, v := range l.lockMap {
						for _, lock := range v {
							if rng.Intn(2) == 0 {
								toUnLock = append(toUnLock, dsync.LockArgs{Resources: []string{k}, UID: lock.UID})
							}
						}
					}
					start := time.Now()
					for _, lock := range toUnLock {
						ok, err := l.ForceUnlock(context.Background(), lock)
						if err != nil || !ok {
							t.Fatal(err)
						}
					}
					t.Logf("Expire 50%% took: %v. Left: %d/%d", time.Since(start).Round(time.Millisecond), len(l.lockUID), len(l.lockMap))

					if len(l.lockUID) == locks*readers {
						t.Fatalf("objects uids all remain, unlikely")
					}
					if len(l.lockMap) == 0 && locks > 10 {
						t.Fatalf("objects all deleted, 0 remains")
					}
					if len(l.lockUID) != locks*readers-len(toUnLock) {
						t.Fatalf("want %d objects uids all deleted, %d remains", len(l.lockUID), locks*readers-len(toUnLock))
					}

					toUnLock = toUnLock[:0]
					for k, v := range l.lockMap {
						for _, lock := range v {
							toUnLock = append(toUnLock, dsync.LockArgs{Resources: []string{k}, UID: lock.UID, Owner: lock.Owner})
						}
					}
					start = time.Now()
					for _, lock := range toUnLock {
						ok, err := l.RUnlock(context.TODO(), lock)
						if err != nil || !ok {
							t.Fatal(err)
						}
					}
					t.Logf("Expire rest took: %v. Left: %d/%d", time.Since(start).Round(time.Millisecond), len(l.lockUID), len(l.lockMap))

					if len(l.lockMap) != 0 {
						t.Fatalf("objects not deleted, want %d != got %d", 0, len(l.lockMap))
					}
					if len(l.lockUID) != 0 {
						t.Fatalf("objects not deleted, want %d != got %d", 0, len(l.lockUID))
					}
				})
			}
		})`
$DIR/cmd/local-locker_test.go:355:12-355:39: `.Sprintf("%d-locks", locks)`
$DIR/cmd/local-locker_test.go:361:15-361:23: `.Short()`
$DIR/cmd/local-locker_test.go:364:5-435:7: `t.Run(fmt.Sprintf("%d-read", readers), func(t *testing.T) {
					l := newLocker()
					for i := 0; i < locks; i++ {
						var tmp [16]byte
						rng.Read(tmp[:])
						res := []string{hex.EncodeToString(tmp[:])}

						for i := 0; i < readers; i++ {
							rng.Read(tmp[:])
							ok, err := l.RLock(context.Background(), dsync.LockArgs{
								UID:       uuid.NewString(),
								Resources: res,
								Source:    hex.EncodeToString(tmp[:8]),
								Owner:     hex.EncodeToString(tmp[8:]),
								Quorum:    0,
							})
							if !ok || err != nil {
								t.Fatal("failed:", err, ok)
							}
						}
					}

					// Expire 50%
					toUnLock := make([]dsync.LockArgs, 0, locks*readers)
					for k, v := range l.lockMap {
						for _, lock := range v {
							if rng.Intn(2) == 0 {
								toUnLock = append(toUnLock, dsync.LockArgs{Resources: []string{k}, UID: lock.UID})
							}
						}
					}
					start := time.Now()
					for _, lock := range toUnLock {
						ok, err := l.ForceUnlock(context.Background(), lock)
						if err != nil || !ok {
							t.Fatal(err)
						}
					}
					t.Logf("Expire 50%% took: %v. Left: %d/%d", time.Since(start).Round(time.Millisecond), len(l.lockUID), len(l.lockMap))

					if len(l.lockUID) == locks*readers {
						t.Fatalf("objects uids all remain, unlikely")
					}
					if len(l.lockMap) == 0 && locks > 10 {
						t.Fatalf("objects all deleted, 0 remains")
					}
					if len(l.lockUID) != locks*readers-len(toUnLock) {
						t.Fatalf("want %d objects uids all deleted, %d remains", len(l.lockUID), locks*readers-len(toUnLock))
					}

					toUnLock = toUnLock[:0]
					for k, v := range l.lockMap {
						for _, lock := range v {
							toUnLock = append(toUnLock, dsync.LockArgs{Resources: []string{k}, UID: lock.UID, Owner: lock.Owner})
						}
					}
					start = time.Now()
					for _, lock := range toUnLock {
						ok, err := l.RUnlock(context.TODO(), lock)
						if err != nil || !ok {
							t.Fatal(err)
						}
					}
					t.Logf("Expire rest took: %v. Left: %d/%d", time.Since(start).Round(time.Millisecond), len(l.lockUID), len(l.lockMap))

					if len(l.lockMap) != 0 {
						t.Fatalf("objects not deleted, want %d != got %d", 0, len(l.lockMap))
					}
					if len(l.lockUID) != 0 {
						t.Fatalf("objects not deleted, want %d != got %d", 0, len(l.lockUID))
					}
				})`
$DIR/cmd/local-locker_test.go:364:6-435:7: `.Run(fmt.Sprintf("%d-read", readers), func(t *testing.T) {
					l := newLocker()
					for i := 0; i < locks; i++ {
						var tmp [16]byte
						rng.Read(tmp[:])
						res := []string{hex.EncodeToString(tmp[:])}

						for i := 0; i < readers; i++ {
							rng.Read(tmp[:])
							ok, err := l.RLock(context.Background(), dsync.LockArgs{
								UID:       uuid.NewString(),
								Resources: res,
								Source:    hex.EncodeToString(tmp[:8]),
								Owner:     hex.EncodeToString(tmp[8:]),
								Quorum:    0,
							})
							if !ok || err != nil {
								t.Fatal("failed:", err, ok)
							}
						}
					}

					// Expire 50%
					toUnLock := make([]dsync.LockArgs, 0, locks*readers)
					for k, v := range l.lockMap {
						for _, lock := range v {
							if rng.Intn(2) == 0 {
								toUnLock = append(toUnLock, dsync.LockArgs{Resources: []string{k}, UID: lock.UID})
							}
						}
					}
					start := time.Now()
					for _, lock := range toUnLock {
						ok, err := l.ForceUnlock(context.Background(), lock)
						if err != nil || !ok {
							t.Fatal(err)
						}
					}
					t.Logf("Expire 50%% took: %v. Left: %d/%d", time.Since(start).Round(time.Millisecond), len(l.lockUID), len(l.lockMap))

					if len(l.lockUID) == locks*readers {
						t.Fatalf("objects uids all remain, unlikely")
					}
					if len(l.lockMap) == 0 && locks > 10 {
						t.Fatalf("objects all deleted, 0 remains")
					}
					if len(l.lockUID) != locks*readers-len(toUnLock) {
						t.Fatalf("want %d objects uids all deleted, %d remains", len(l.lockUID), locks*readers-len(toUnLock))
					}

					toUnLock = toUnLock[:0]
					for k, v := range l.lockMap {
						for _, lock := range v {
							toUnLock = append(toUnLock, dsync.LockArgs{Resources: []string{k}, UID: lock.UID, Owner: lock.Owner})
						}
					}
					start = time.Now()
					for _, lock := range toUnLock {
						ok, err := l.RUnlock(context.TODO(), lock)
						if err != nil || !ok {
							t.Fatal(err)
						}
					}
					t.Logf("Expire rest took: %v. Left: %d/%d", time.Since(start).Round(time.Millisecond), len(l.lockUID), len(l.lockMap))

					if len(l.lockMap) != 0 {
						t.Fatalf("objects not deleted, want %d != got %d", 0, len(l.lockMap))
					}
					if len(l.lockUID) != 0 {
						t.Fatalf("objects not deleted, want %d != got %d", 0, len(l.lockUID))
					}
				})`
$DIR/cmd/local-locker_test.go:364:14-364:42: `.Sprintf("%d-read", readers)`
$DIR/cmd/local-locker_test.go:368:7-368:23: `rng.Read(tmp[:])`
$DIR/cmd/local-locker_test.go:368:10-368:23: `.Read(tmp[:])`
$DIR/cmd/local-locker_test.go:369:26-369:49: `.EncodeToString(tmp[:])`
$DIR/cmd/local-locker_test.go:372:8-372:24: `rng.Read(tmp[:])`
$DIR/cmd/local-locker_test.go:372:11-372:24: `.Read(tmp[:])`
$DIR/cmd/local-locker_test.go:373:20-379:10: `.RLock(context.Background(), dsync.LockArgs{
								UID:       uuid.NewString(),
								Resources: res,
								Source:    hex.EncodeToString(tmp[:8]),
								Owner:     hex.EncodeToString(tmp[8:]),
								Quorum:    0,
							})`
$DIR/cmd/local-locker_test.go:373:34-373:47: `.Background()`
$DIR/cmd/local-locker_test.go:374:24-374:36: `.NewString()`
$DIR/cmd/local-locker_test.go:376:23-376:47: `.EncodeToString(tmp[:8])`
$DIR/cmd/local-locker_test.go:377:23-377:47: `.EncodeToString(tmp[8:])`
$DIR/cmd/local-locker_test.go:390:14-390:22: `.Intn(2)`
$DIR/cmd/local-locker_test.go:391:9-391:91: `toUnLock = append(toUnLock, dsync.LockArgs{Resources: []string{k}, UID: lock.UID})`
$DIR/cmd/local-locker_test.go:395:19-395:25: `.Now()`
$DIR/cmd/local-locker_test.go:397:19-397:59: `.ForceUnlock(context.Background(), lock)`
$DIR/cmd/local-locker_test.go:397:39-397:52: `.Background()`
$DIR/cmd/local-locker_test.go:414:6-414:29: `toUnLock = toUnLock[:0]`
$DIR/cmd/local-locker_test.go:417:8-417:109: `toUnLock = append(toUnLock, dsync.LockArgs{Resources: []string{k}, UID: lock.UID, Owner: lock.Owner})`
$DIR/cmd/local-locker_test.go:420:6-420:24: `start = time.Now()`
$DIR/cmd/local-locker_test.go:420:18-420:24: `.Now()`
$DIR/cmd/local-locker_test.go:422:19-422:49: `.RUnlock(context.TODO(), lock)`
$DIR/cmd/local-locker_test.go:422:35-422:42: `.TODO()`
$DIR/cmd/lock-rest-client_test.go:38:2-38:30: `endpointLocal.IsLocal = true`
$DIR/cmd/lock-rest-client_test.go:40:24-40:57: `.WithCancel(context.Background())`
$DIR/cmd/lock-rest-client_test.go:40:43-40:56: `.Background()`
$DIR/cmd/lock-rest-client_test.go:42:2-42:93: `err = initGlobalGrid(ctx, []PoolEndpoints{{Endpoints: Endpoints{endpoint, endpointLocal}}})`
$DIR/cmd/lock-rest-client_test.go:48:13-48:24: `.IsOnline()`
$DIR/cmd/lock-rest-client_test.go:53:2-53:65: `_, err = lkClient.RLock(context.Background(), dsync.LockArgs{})`
$DIR/cmd/lock-rest-client_test.go:53:19-53:65: `.RLock(context.Background(), dsync.LockArgs{})`
$DIR/cmd/lock-rest-client_test.go:53:33-53:46: `.Background()`
$DIR/cmd/lock-rest-client_test.go:58:2-58:64: `_, err = lkClient.Lock(context.Background(), dsync.LockArgs{})`
$DIR/cmd/lock-rest-client_test.go:58:19-58:64: `.Lock(context.Background(), dsync.LockArgs{})`
$DIR/cmd/lock-rest-client_test.go:58:32-58:45: `.Background()`
$DIR/cmd/lock-rest-client_test.go:63:2-63:67: `_, err = lkClient.RUnlock(context.Background(), dsync.LockArgs{})`
$DIR/cmd/lock-rest-client_test.go:63:19-63:67: `.RUnlock(context.Background(), dsync.LockArgs{})`
$DIR/cmd/lock-rest-client_test.go:63:35-63:48: `.Background()`
$DIR/cmd/lock-rest-client_test.go:68:2-68:66: `_, err = lkClient.Unlock(context.Background(), dsync.LockArgs{})`
$DIR/cmd/lock-rest-client_test.go:68:19-68:66: `.Unlock(context.Background(), dsync.LockArgs{})`
$DIR/cmd/lock-rest-client_test.go:68:34-68:47: `.Background()`
$DIR/cmd/lock-rest-server-common_test.go:56:24-56:57: `.WithCancel(context.Background())`
$DIR/cmd/lock-rest-server-common_test.go:56:43-56:56: `.Background()`
$DIR/cmd/lock-rest-server-common_test.go:60:10-60:30: `.RemoveAll(testPath)`
$DIR/cmd/lock-rest-server-common_test.go:77:2-80:3: `locker.ll.lockMap["name"] = []lockRequesterInfo{
		lockRequesterInfo1,
		lockRequesterInfo2,
	}`
$DIR/cmd/lock-rest-server-common_test.go:85:11-88:10: `.ll.removeEntry("name", dsync.LockArgs{
		Owner: "owner",
		UID:   "unknown-uid",
	}, &lri)`
$DIR/cmd/lock-rest-server-common_test.go:92:12-95:10: `.ll.removeEntry("name", dsync.LockArgs{
		Owner: "owner",
		UID:   "0123-4567",
	}, &lri)`
$DIR/cmd/lock-rest-server-common_test.go:100:14-100:45: `.DeepEqual(expectedLri, gotLri)`
$DIR/cmd/lock-rest-server-common_test.go:105:12-108:10: `.ll.removeEntry("name", dsync.LockArgs{
		Owner: "owner",
		UID:   "89ab-cdef",
	}, &lri)`
$DIR/cmd/lock-rest-server-common_test.go:113:14-113:45: `.DeepEqual(expectedLri, gotLri)`
$DIR/cmd/metacache-entries_test.go:32:14-32:24: `.entries()`
$DIR/cmd/metacache-entries_test.go:33:7-33:18: `.isSorted()`
$DIR/cmd/metacache-entries_test.go:38:2-38:39: `o[0], o[len(o)-1] = o[len(o)-1], o[0]`
$DIR/cmd/metacache-entries_test.go:39:6-39:17: `.isSorted()`
$DIR/cmd/metacache-entries_test.go:43:13-43:20: `.sort()`
$DIR/cmd/metacache-entries_test.go:44:7-44:18: `.isSorted()`
$DIR/cmd/metacache-entries_test.go:47:12-47:22: `.entries()`
$DIR/cmd/metacache-entries_test.go:47:22-47:33: `.isSorted()`
$DIR/cmd/metacache-entries_test.go:62:2-62:55: `entries.forwardTo("src/compress/zlib/reader_test.go")`
$DIR/cmd/metacache-entries_test.go:62:9-62:55: `.forwardTo("src/compress/zlib/reader_test.go")`
$DIR/cmd/metacache-entries_test.go:63:16-63:26: `.entries()`
$DIR/cmd/metacache-entries_test.go:63:26-63:34: `.names()`
$DIR/cmd/metacache-entries_test.go:64:13-64:34: `.DeepEqual(got, want)`
$DIR/cmd/metacache-entries_test.go:69:2-69:15: `entries = org`
$DIR/cmd/metacache-entries_test.go:70:2-70:49: `entries.forwardTo("src/compress/zlib/reader_t")`
$DIR/cmd/metacache-entries_test.go:70:9-70:49: `.forwardTo("src/compress/zlib/reader_t")`
$DIR/cmd/metacache-entries_test.go:71:2-71:33: `got = entries.entries().names()`
$DIR/cmd/metacache-entries_test.go:71:15-71:25: `.entries()`
$DIR/cmd/metacache-entries_test.go:71:25-71:33: `.names()`
$DIR/cmd/metacache-entries_test.go:72:13-72:34: `.DeepEqual(got, want)`
$DIR/cmd/metacache-entries_test.go:79:13-79:28: `.shallowClone()`
$DIR/cmd/metacache-entries_test.go:79:33-79:48: `.shallowClone()`
$DIR/cmd/metacache-entries_test.go:80:9-80:19: `.entries()`
$DIR/cmd/metacache-entries_test.go:83:3-83:44: `be[i].metadata = []byte("something-else")`
$DIR/cmd/metacache-entries_test.go:86:2-86:16: `a.merge(b, -1)`
$DIR/cmd/metacache-entries_test.go:86:3-86:16: `.merge(b, -1)`
$DIR/cmd/metacache-entries_test.go:89:2-89:20: `sort.Strings(want)`
$DIR/cmd/metacache-entries_test.go:89:6-89:20: `.Strings(want)`
$DIR/cmd/metacache-entries_test.go:90:10-90:20: `.entries()`
$DIR/cmd/metacache-entries_test.go:90:20-90:28: `.names()`
$DIR/cmd/metacache-entries_test.go:104:2-104:26: `data.filterObjectsOnly()`
$DIR/cmd/metacache-entries_test.go:104:6-104:26: `.filterObjectsOnly()`
$DIR/cmd/metacache-entries_test.go:105:13-105:23: `.entries()`
$DIR/cmd/metacache-entries_test.go:105:23-105:31: `.names()`
$DIR/cmd/metacache-entries_test.go:107:13-107:34: `.DeepEqual(want, got)`
$DIR/cmd/metacache-entries_test.go:114:2-114:27: `data.filterPrefixesOnly()`
$DIR/cmd/metacache-entries_test.go:114:6-114:27: `.filterPrefixesOnly()`
$DIR/cmd/metacache-entries_test.go:115:13-115:23: `.entries()`
$DIR/cmd/metacache-entries_test.go:115:23-115:31: `.names()`
$DIR/cmd/metacache-entries_test.go:117:13-117:34: `.DeepEqual(want, got)`
$DIR/cmd/metacache-entries_test.go:124:2-124:68: `data.filterRecursiveEntries("src/compress/bzip2/", slashSeparator)`
$DIR/cmd/metacache-entries_test.go:124:6-124:68: `.filterRecursiveEntries("src/compress/bzip2/", slashSeparator)`
$DIR/cmd/metacache-entries_test.go:125:13-125:23: `.entries()`
$DIR/cmd/metacache-entries_test.go:125:23-125:31: `.names()`
$DIR/cmd/metacache-entries_test.go:127:13-127:34: `.DeepEqual(want, got)`
$DIR/cmd/metacache-entries_test.go:134:2-134:49: `data.filterRecursiveEntries("", slashSeparator)`
$DIR/cmd/metacache-entries_test.go:134:6-134:49: `.filterRecursiveEntries("", slashSeparator)`
$DIR/cmd/metacache-entries_test.go:135:13-135:23: `.entries()`
$DIR/cmd/metacache-entries_test.go:135:23-135:31: `.names()`
$DIR/cmd/metacache-entries_test.go:137:13-137:34: `.DeepEqual(want, got)`
$DIR/cmd/metacache-entries_test.go:145:2-145:43: `data.filterRecursiveEntries("", "bzip2/")`
$DIR/cmd/metacache-entries_test.go:145:6-145:43: `.filterRecursiveEntries("", "bzip2/")`
$DIR/cmd/metacache-entries_test.go:146:13-146:23: `.entries()`
$DIR/cmd/metacache-entries_test.go:146:23-146:31: `.names()`
$DIR/cmd/metacache-entries_test.go:148:13-148:34: `.DeepEqual(want, got)`
$DIR/cmd/metacache-entries_test.go:155:2-155:42: `data.filterPrefix("src/compress/bzip2/")`
$DIR/cmd/metacache-entries_test.go:155:6-155:42: `.filterPrefix("src/compress/bzip2/")`
$DIR/cmd/metacache-entries_test.go:156:13-156:23: `.entries()`
$DIR/cmd/metacache-entries_test.go:156:23-156:31: `.names()`
$DIR/cmd/metacache-entries_test.go:158:13-158:34: `.DeepEqual(want, got)`
$DIR/cmd/metacache-entries_test.go:215:3-222:5: `t.Run(tt.testName, func(t *testing.T) {
			e := metaCacheEntry{
				name: tt.entry,
			}
			if got := e.isInDir(tt.dir, tt.sep); got != tt.want {
				t.Errorf("isInDir() = %v, want %v", got, tt.want)
			}
		})`
$DIR/cmd/metacache-entries_test.go:215:4-222:5: `.Run(tt.testName, func(t *testing.T) {
			e := metaCacheEntry{
				name: tt.entry,
			}
			if got := e.isInDir(tt.dir, tt.sep); got != tt.want {
				t.Errorf("isInDir() = %v, want %v", got, tt.want)
			}
		})`
$DIR/cmd/metacache-entries_test.go:219:15-219:39: `.isInDir(tt.dir, tt.sep)`
$DIR/cmd/metacache-entries_test.go:227:23-227:57: `.Parse("2006/01/02", "2015/02/25")`
$DIR/cmd/metacache-entries_test.go:236:25-236:47: `.Add(30 * time.Minute)`
$DIR/cmd/metacache-entries_test.go:236:47-236:58: `.UnixNano()`
$DIR/cmd/metacache-entries_test.go:248:25-248:47: `.Add(15 * time.Minute)`
$DIR/cmd/metacache-entries_test.go:248:47-248:58: `.UnixNano()`
$DIR/cmd/metacache-entries_test.go:260:25-260:47: `.Add(60 * time.Minute)`
$DIR/cmd/metacache-entries_test.go:260:47-260:58: `.UnixNano()`
$DIR/cmd/metacache-entries_test.go:267:25-267:47: `.Add(30 * time.Minute)`
$DIR/cmd/metacache-entries_test.go:267:47-267:58: `.UnixNano()`
$DIR/cmd/metacache-entries_test.go:279:25-279:47: `.Add(60 * time.Minute)`
$DIR/cmd/metacache-entries_test.go:279:47-279:58: `.UnixNano()`
$DIR/cmd/metacache-entries_test.go:294:25-294:47: `.Add(60 * time.Minute)`
$DIR/cmd/metacache-entries_test.go:294:47-294:58: `.UnixNano()`
$DIR/cmd/metacache-entries_test.go:306:25-306:47: `.Add(90 * time.Minute)`
$DIR/cmd/metacache-entries_test.go:306:47-306:58: `.UnixNano()`
$DIR/cmd/metacache-entries_test.go:317:25-317:47: `.Add(90 * time.Minute)`
$DIR/cmd/metacache-entries_test.go:317:47-317:58: `.UnixNano()`
$DIR/cmd/metacache-entries_test.go:324:25-324:47: `.Add(60 * time.Minute)`
$DIR/cmd/metacache-entries_test.go:324:47-324:58: `.UnixNano()`
$DIR/cmd/metacache-entries_test.go:331:25-331:47: `.Add(60 * time.Minute)`
$DIR/cmd/metacache-entries_test.go:331:47-331:58: `.UnixNano()`
$DIR/cmd/metacache-entries_test.go:339:25-339:47: `.Add(30 * time.Minute)`
$DIR/cmd/metacache-entries_test.go:339:47-339:58: `.UnixNano()`
$DIR/cmd/metacache-entries_test.go:351:25-351:47: `.Add(90 * time.Minute)`
$DIR/cmd/metacache-entries_test.go:351:47-351:58: `.UnixNano()`
$DIR/cmd/metacache-entries_test.go:363:25-363:47: `.Add(90 * time.Minute)`
$DIR/cmd/metacache-entries_test.go:363:47-363:58: `.UnixNano()`
$DIR/cmd/metacache-entries_test.go:370:25-370:47: `.Add(15 * time.Minute)`
$DIR/cmd/metacache-entries_test.go:370:47-370:58: `.UnixNano()`
$DIR/cmd/metacache-entries_test.go:380:3-380:21: `xl.sortByModTime()`
$DIR/cmd/metacache-entries_test.go:380:5-380:21: `.sortByModTime()`
$DIR/cmd/metacache-entries_test.go:385:3-385:41: `entry.metadata, err = xl.AppendTo(nil)`
$DIR/cmd/metacache-entries_test.go:385:27-385:41: `.AppendTo(nil)`
$DIR/cmd/metacache-entries_test.go:389:3-389:29: `inputSerialized[i] = entry`
$DIR/cmd/metacache-entries_test.go:634:14-634:37: `.New(rand.NewSource(0))`
$DIR/cmd/metacache-entries_test.go:634:23-634:36: `.NewSource(0)`
$DIR/cmd/metacache-entries_test.go:637:4-656:6: `t.Run(fmt.Sprintf("test-%d-%s-run-%d", testID, tt.name, i), func(t *testing.T) {
				if i > 0 {
					rng.Shuffle(len(tt.m), func(i, j int) {
						tt.m[i], tt.m[j] = tt.m[j], tt.m[i]
					})
				}
				gotSelected, gotOk := tt.m.resolve(&tt.r)
				if gotOk != tt.wantOk {
					t.Errorf("resolve() gotOk = %v, want %v", gotOk, tt.wantOk)
				}
				if gotSelected != nil {
					gotSelected.cached = nil
					gotSelected.reusable = false
				}
				if !reflect.DeepEqual(gotSelected, tt.wantSelected) {
					wantM, _ := tt.wantSelected.xlmeta()
					gotM, _ := gotSelected.xlmeta()
					t.Errorf("resolve() gotSelected = \n%#v, want \n%#v", *gotM, *wantM)
				}
			})`
$DIR/cmd/metacache-entries_test.go:637:5-656:6: `.Run(fmt.Sprintf("test-%d-%s-run-%d", testID, tt.name, i), func(t *testing.T) {
				if i > 0 {
					rng.Shuffle(len(tt.m), func(i, j int) {
						tt.m[i], tt.m[j] = tt.m[j], tt.m[i]
					})
				}
				gotSelected, gotOk := tt.m.resolve(&tt.r)
				if gotOk != tt.wantOk {
					t.Errorf("resolve() gotOk = %v, want %v", gotOk, tt.wantOk)
				}
				if gotSelected != nil {
					gotSelected.cached = nil
					gotSelected.reusable = false
				}
				if !reflect.DeepEqual(gotSelected, tt.wantSelected) {
					wantM, _ := tt.wantSelected.xlmeta()
					gotM, _ := gotSelected.xlmeta()
					t.Errorf("resolve() gotSelected = \n%#v, want \n%#v", *gotM, *wantM)
				}
			})`
$DIR/cmd/metacache-entries_test.go:637:13-637:62: `.Sprintf("test-%d-%s-run-%d", testID, tt.name, i)`
$DIR/cmd/metacache-entries_test.go:639:6-641:8: `rng.Shuffle(len(tt.m), func(i, j int) {
						tt.m[i], tt.m[j] = tt.m[j], tt.m[i]
					})`
$DIR/cmd/metacache-entries_test.go:639:9-641:8: `.Shuffle(len(tt.m), func(i, j int) {
						tt.m[i], tt.m[j] = tt.m[j], tt.m[i]
					})`
$DIR/cmd/metacache-entries_test.go:640:7-640:42: `tt.m[i], tt.m[j] = tt.m[j], tt.m[i]`
$DIR/cmd/metacache-entries_test.go:643:29-643:46: `.m.resolve(&tt.r)`
$DIR/cmd/metacache-entries_test.go:648:6-648:30: `gotSelected.cached = nil`
$DIR/cmd/metacache-entries_test.go:649:6-649:34: `gotSelected.reusable = false`
$DIR/cmd/metacache-entries_test.go:651:16-651:56: `.DeepEqual(gotSelected, tt.wantSelected)`
$DIR/cmd/metacache-entries_test.go:652:20-652:42: `.wantSelected.xlmeta()`
$DIR/cmd/metacache-entries_test.go:653:28-653:37: `.xlmeta()`
$DIR/cmd/metacache-set_gen_test.go:14:15-14:31: `.MarshalMsg(nil)`
$DIR/cmd/metacache-set_gen_test.go:18:16-18:34: `.UnmarshalMsg(bts)`
$DIR/cmd/metacache-set_gen_test.go:26:2-26:28: `left, err = msgp.Skip(bts)`
$DIR/cmd/metacache-set_gen_test.go:73:2-73:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/metacache-set_gen_test.go:73:6-73:23: `.Encode(&buf, &v)`
$DIR/cmd/metacache-set_gen_test.go:75:8-75:18: `.Msgsize()`
$DIR/cmd/metacache-set_gen_test.go:76:8-76:14: `.Len()`
$DIR/cmd/metacache-set_gen_test.go:81:13-81:31: `.Decode(&buf, &vn)`
$DIR/cmd/metacache-set_gen_test.go:86:2-86:13: `buf.Reset()`
$DIR/cmd/metacache-set_gen_test.go:86:5-86:13: `.Reset()`
$DIR/cmd/metacache-set_gen_test.go:87:2-87:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/metacache-set_gen_test.go:87:6-87:23: `.Encode(&buf, &v)`
$DIR/cmd/metacache-set_gen_test.go:88:2-88:35: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/metacache-stream_test.go:54:17-54:31: `.readNames(-1)`
$DIR/cmd/metacache-stream_test.go:59:13-59:36: `.DeepEqual(names, want)`
$DIR/cmd/metacache-stream_test.go:67:19-67:53: `.readN(-1, false, true, false, "")`
$DIR/cmd/metacache-stream_test.go:72:31-72:41: `.entries()`
$DIR/cmd/metacache-stream_test.go:77:12-77:18: `.len()`
$DIR/cmd/metacache-stream_test.go:81:2-81:17: `want = want[:0]`
$DIR/cmd/metacache-stream_test.go:82:2-82:51: `entries, err = r.readN(0, false, true, false, "")`
$DIR/cmd/metacache-stream_test.go:82:18-82:51: `.readN(0, false, true, false, "")`
$DIR/cmd/metacache-stream_test.go:86:12-86:18: `.len()`
$DIR/cmd/metacache-stream_test.go:91:2-91:28: `r = loadMetacacheSample(t)`
$DIR/cmd/metacache-stream_test.go:93:2-93:51: `entries, err = r.readN(0, false, true, false, "")`
$DIR/cmd/metacache-stream_test.go:93:18-93:51: `.readN(0, false, true, false, "")`
$DIR/cmd/metacache-stream_test.go:97:12-97:18: `.len()`
$DIR/cmd/metacache-stream_test.go:101:2-101:51: `entries, err = r.readN(5, false, true, false, "")`
$DIR/cmd/metacache-stream_test.go:101:18-101:51: `.readN(5, false, true, false, "")`
$DIR/cmd/metacache-stream_test.go:105:2-105:37: `want = loadMetacacheSampleNames[:5]`
$DIR/cmd/metacache-stream_test.go:106:12-106:18: `.len()`
$DIR/cmd/metacache-stream_test.go:110:31-110:41: `.entries()`
$DIR/cmd/metacache-stream_test.go:120:19-120:53: `.readN(-1, false, true, false, "")`
$DIR/cmd/metacache-stream_test.go:126:31-126:41: `.entries()`
$DIR/cmd/metacache-stream_test.go:130:12-130:20: `.isDir()`
$DIR/cmd/metacache-stream_test.go:131:4-131:39: `noDirs = append(noDirs, entry.name)`
$DIR/cmd/metacache-stream_test.go:134:12-134:18: `.len()`
$DIR/cmd/metacache-stream_test.go:138:2-138:15: `want = noDirs`
$DIR/cmd/metacache-stream_test.go:139:2-139:28: `r = loadMetacacheSample(t)`
$DIR/cmd/metacache-stream_test.go:141:2-141:53: `entries, err = r.readN(-1, false, false, false, "")`
$DIR/cmd/metacache-stream_test.go:141:18-141:53: `.readN(-1, false, false, false, "")`
$DIR/cmd/metacache-stream_test.go:145:31-145:41: `.entries()`
$DIR/cmd/metacache-stream_test.go:150:12-150:18: `.len()`
$DIR/cmd/metacache-stream_test.go:154:2-154:17: `want = want[:0]`
$DIR/cmd/metacache-stream_test.go:155:2-155:52: `entries, err = r.readN(0, false, false, false, "")`
$DIR/cmd/metacache-stream_test.go:155:18-155:52: `.readN(0, false, false, false, "")`
$DIR/cmd/metacache-stream_test.go:159:12-159:18: `.len()`
$DIR/cmd/metacache-stream_test.go:164:2-164:28: `r = loadMetacacheSample(t)`
$DIR/cmd/metacache-stream_test.go:166:2-166:52: `entries, err = r.readN(0, false, false, false, "")`
$DIR/cmd/metacache-stream_test.go:166:18-166:52: `.readN(0, false, false, false, "")`
$DIR/cmd/metacache-stream_test.go:170:12-170:18: `.len()`
$DIR/cmd/metacache-stream_test.go:174:2-174:52: `entries, err = r.readN(5, false, false, false, "")`
$DIR/cmd/metacache-stream_test.go:174:18-174:52: `.readN(5, false, false, false, "")`
$DIR/cmd/metacache-stream_test.go:178:2-178:19: `want = noDirs[:5]`
$DIR/cmd/metacache-stream_test.go:179:12-179:18: `.len()`
$DIR/cmd/metacache-stream_test.go:183:31-183:41: `.entries()`
$DIR/cmd/metacache-stream_test.go:193:19-193:72: `.readN(-1, false, true, false, "src/compress/bzip2/")`
$DIR/cmd/metacache-stream_test.go:198:31-198:41: `.entries()`
$DIR/cmd/metacache-stream_test.go:203:12-203:18: `.len()`
$DIR/cmd/metacache-stream_test.go:207:2-207:28: `r = loadMetacacheSample(t)`
$DIR/cmd/metacache-stream_test.go:209:2-209:64: `entries, err = r.readN(-1, false, true, false, "src/nonexist")`
$DIR/cmd/metacache-stream_test.go:209:18-209:64: `.readN(-1, false, true, false, "src/nonexist")`
$DIR/cmd/metacache-stream_test.go:213:2-213:37: `want = loadMetacacheSampleNames[:0]`
$DIR/cmd/metacache-stream_test.go:214:12-214:18: `.len()`
$DIR/cmd/metacache-stream_test.go:217:31-217:41: `.entries()`
$DIR/cmd/metacache-stream_test.go:223:2-223:28: `r = loadMetacacheSample(t)`
$DIR/cmd/metacache-stream_test.go:225:2-225:57: `entries, err = r.readN(-1, false, true, false, "src/a")`
$DIR/cmd/metacache-stream_test.go:225:18-225:57: `.readN(-1, false, true, false, "src/a")`
$DIR/cmd/metacache-stream_test.go:229:2-229:37: `want = loadMetacacheSampleNames[:0]`
$DIR/cmd/metacache-stream_test.go:230:12-230:18: `.len()`
$DIR/cmd/metacache-stream_test.go:233:31-233:41: `.entries()`
$DIR/cmd/metacache-stream_test.go:239:2-239:28: `r = loadMetacacheSample(t)`
$DIR/cmd/metacache-stream_test.go:241:2-241:71: `entries, err = r.readN(-1, false, true, false, "src/compress/zlib/e")`
$DIR/cmd/metacache-stream_test.go:241:18-241:71: `.readN(-1, false, true, false, "src/compress/zlib/e")`
$DIR/cmd/metacache-stream_test.go:245:2-245:54: `want = []string{"src/compress/zlib/example_test.go"}`
$DIR/cmd/metacache-stream_test.go:246:12-246:18: `.len()`
$DIR/cmd/metacache-stream_test.go:249:31-249:41: `.entries()`
$DIR/cmd/metacache-stream_test.go:260:10-267:4: `.readFn(func(entry metaCacheEntry) bool {
		want := loadMetacacheSampleNames[i]
		if entry.name != want {
			t.Errorf("entry %d, want %q, got %q", i, want, entry.name)
		}
		i++
		return true
	})`
$DIR/cmd/metacache-stream_test.go:265:3-265:6: `i++`
$DIR/cmd/metacache-stream_test.go:279:2-279:11: `wg.Add(1)`
$DIR/cmd/metacache-stream_test.go:279:4-279:11: `.Add(1)`
$DIR/cmd/metacache-stream_test.go:281:3-281:50: `readErr = r.readAll(context.Background(), objs)`
$DIR/cmd/metacache-stream_test.go:281:14-281:50: `.readAll(context.Background(), objs)`
$DIR/cmd/metacache-stream_test.go:281:30-281:43: `.Background()`
$DIR/cmd/metacache-stream_test.go:282:3-282:12: `wg.Done()`
$DIR/cmd/metacache-stream_test.go:282:5-282:12: `.Done()`
$DIR/cmd/metacache-stream_test.go:290:3-290:6: `i++`
$DIR/cmd/metacache-stream_test.go:292:2-292:11: `wg.Wait()`
$DIR/cmd/metacache-stream_test.go:292:4-292:11: `.Wait()`
$DIR/cmd/metacache-stream_test.go:301:10-301:56: `.forwardTo("src/compress/zlib/reader_test.go")`
$DIR/cmd/metacache-stream_test.go:305:17-305:31: `.readNames(-1)`
$DIR/cmd/metacache-stream_test.go:310:13-310:36: `.DeepEqual(names, want)`
$DIR/cmd/metacache-stream_test.go:315:2-315:28: `r = loadMetacacheSample(t)`
$DIR/cmd/metacache-stream_test.go:316:2-316:49: `err = r.forwardTo("src/compress/zlib/reader_t")`
$DIR/cmd/metacache-stream_test.go:316:9-316:49: `.forwardTo("src/compress/zlib/reader_t")`
$DIR/cmd/metacache-stream_test.go:320:2-320:30: `names, err = r.readNames(-1)`
$DIR/cmd/metacache-stream_test.go:320:16-320:30: `.readNames(-1)`
$DIR/cmd/metacache-stream_test.go:324:13-324:36: `.DeepEqual(names, want)`
$DIR/cmd/metacache-stream_test.go:333:19-333:26: `.next()`
$DIR/cmd/metacache-stream_test.go:347:16-347:23: `.peek()`
$DIR/cmd/metacache-stream_test.go:357:19-357:26: `.next()`
$DIR/cmd/metacache-stream_test.go:372:10-378:4: `.readFn(func(object metaCacheEntry) bool {
		err := w.write(object)
		if err != nil {
			t.Fatal(err)
		}
		return true
	})`
$DIR/cmd/metacache-stream_test.go:373:11-373:25: `.write(object)`
$DIR/cmd/metacache-stream_test.go:383:2-383:17: `err = w.Close()`
$DIR/cmd/metacache-stream_test.go:388:2-388:30: `r = newMetacacheReader(&buf)`
$DIR/cmd/metacache-stream_test.go:390:17-390:31: `.readNames(-1)`
$DIR/cmd/metacache-stream_test.go:395:13-395:36: `.DeepEqual(names, want)`
$DIR/cmd/metacache-stream_test.go:403:17-403:30: `.readNames(5)`
$DIR/cmd/metacache-stream_test.go:408:13-408:36: `.DeepEqual(names, want)`
$DIR/cmd/metacache-stream_test.go:411:2-411:17: `err = r.skip(5)`
$DIR/cmd/metacache-stream_test.go:411:9-411:17: `.skip(5)`
$DIR/cmd/metacache-stream_test.go:415:2-415:29: `names, err = r.readNames(5)`
$DIR/cmd/metacache-stream_test.go:415:16-415:29: `.readNames(5)`
$DIR/cmd/metacache-stream_test.go:419:2-419:40: `want = loadMetacacheSampleNames[10:15]`
$DIR/cmd/metacache-stream_test.go:420:13-420:36: `.DeepEqual(names, want)`
$DIR/cmd/metacache-stream_test.go:424:2-424:45: `err = r.skip(len(loadMetacacheSampleNames))`
$DIR/cmd/metacache-stream_test.go:424:9-424:45: `.skip(len(loadMetacacheSampleNames))`
$DIR/cmd/metacache-walk_gen_test.go:14:15-14:31: `.MarshalMsg(nil)`
$DIR/cmd/metacache-walk_gen_test.go:18:16-18:34: `.UnmarshalMsg(bts)`
$DIR/cmd/metacache-walk_gen_test.go:26:2-26:28: `left, err = msgp.Skip(bts)`
$DIR/cmd/metacache-walk_gen_test.go:73:2-73:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/metacache-walk_gen_test.go:73:6-73:23: `.Encode(&buf, &v)`
$DIR/cmd/metacache-walk_gen_test.go:75:8-75:18: `.Msgsize()`
$DIR/cmd/metacache-walk_gen_test.go:76:8-76:14: `.Len()`
$DIR/cmd/metacache-walk_gen_test.go:81:13-81:31: `.Decode(&buf, &vn)`
$DIR/cmd/metacache-walk_gen_test.go:86:2-86:13: `buf.Reset()`
$DIR/cmd/metacache-walk_gen_test.go:86:5-86:13: `.Reset()`
$DIR/cmd/metacache-walk_gen_test.go:87:2-87:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/metacache-walk_gen_test.go:87:6-87:23: `.Encode(&buf, &v)`
$DIR/cmd/metacache-walk_gen_test.go:88:2-88:35: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/metacache_gen_test.go:14:15-14:31: `.MarshalMsg(nil)`
$DIR/cmd/metacache_gen_test.go:18:16-18:34: `.UnmarshalMsg(bts)`
$DIR/cmd/metacache_gen_test.go:26:2-26:28: `left, err = msgp.Skip(bts)`
$DIR/cmd/metacache_gen_test.go:73:2-73:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/metacache_gen_test.go:73:6-73:23: `.Encode(&buf, &v)`
$DIR/cmd/metacache_gen_test.go:75:8-75:18: `.Msgsize()`
$DIR/cmd/metacache_gen_test.go:76:8-76:14: `.Len()`
$DIR/cmd/metacache_gen_test.go:81:13-81:31: `.Decode(&buf, &vn)`
$DIR/cmd/metacache_gen_test.go:86:2-86:13: `buf.Reset()`
$DIR/cmd/metacache_gen_test.go:86:5-86:13: `.Reset()`
$DIR/cmd/metacache_gen_test.go:87:2-87:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/metacache_gen_test.go:87:6-87:23: `.Encode(&buf, &v)`
$DIR/cmd/metacache_gen_test.go:88:2-88:35: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/metacache_test.go:199:3-203:5: `t.Run(tt.name, func(t *testing.T) {
			if got := baseDirFromPrefix(tt.prefix); got != tt.want {
				t.Errorf("baseDirFromPrefix() = %v, want %v", got, tt.want)
			}
		})`
$DIR/cmd/metacache_test.go:199:4-203:5: `.Run(tt.name, func(t *testing.T) {
			if got := baseDirFromPrefix(tt.prefix); got != tt.want {
				t.Errorf("baseDirFromPrefix() = %v, want %v", got, tt.want)
			}
		})`
$DIR/cmd/metacache_test.go:211:3-223:5: `t.Run(tt.id, func(t *testing.T) {
			var want bool
			if i >= len(wantResults) {
				t.Logf("no expected result for test #%d", i)
			} else {
				want = wantResults[i]
			}

			got := tt.finished()
			if got != want {
				t.Errorf("#%d: want %v, got %v", i, want, got)
			}
		})`
$DIR/cmd/metacache_test.go:211:4-223:5: `.Run(tt.id, func(t *testing.T) {
			var want bool
			if i >= len(wantResults) {
				t.Logf("no expected result for test #%d", i)
			} else {
				want = wantResults[i]
			}

			got := tt.finished()
			if got != want {
				t.Errorf("#%d: want %v, got %v", i, want, got)
			}
		})`
$DIR/cmd/metacache_test.go:216:5-216:26: `want = wantResults[i]`
$DIR/cmd/metacache_test.go:219:13-219:24: `.finished()`
$DIR/cmd/metacache_test.go:232:3-244:5: `t.Run(tt.id, func(t *testing.T) {
			var want bool
			if i >= len(wantResults) {
				t.Logf("no expected result for test #%d", i)
			} else {
				want = wantResults[i]
			}

			got := tt.worthKeeping()
			if got != want {
				t.Errorf("#%d: want %v, got %v", i, want, got)
			}
		})`
$DIR/cmd/metacache_test.go:232:4-244:5: `.Run(tt.id, func(t *testing.T) {
			var want bool
			if i >= len(wantResults) {
				t.Logf("no expected result for test #%d", i)
			} else {
				want = wantResults[i]
			}

			got := tt.worthKeeping()
			if got != want {
				t.Errorf("#%d: want %v, got %v", i, want, got)
			}
		})`
$DIR/cmd/metacache_test.go:237:5-237:26: `want = wantResults[i]`
$DIR/cmd/metacache_test.go:240:13-240:28: `.worthKeeping()`
$DIR/cmd/metrics-v2_gen_test.go:13:15-13:31: `.MarshalMsg(nil)`
$DIR/cmd/metrics-v2_gen_test.go:17:16-17:34: `.UnmarshalMsg(bts)`
$DIR/cmd/metrics-v2_gen_test.go:25:2-25:28: `left, err = msgp.Skip(bts)`
$DIR/cmd/metrics-v2_gen_test.go:71:15-71:31: `.MarshalMsg(nil)`
$DIR/cmd/metrics-v2_gen_test.go:75:16-75:34: `.UnmarshalMsg(bts)`
$DIR/cmd/metrics-v2_gen_test.go:83:2-83:28: `left, err = msgp.Skip(bts)`
$DIR/cmd/metrics-v2_gen_test.go:129:15-129:31: `.MarshalMsg(nil)`
$DIR/cmd/metrics-v2_gen_test.go:133:16-133:34: `.UnmarshalMsg(bts)`
$DIR/cmd/metrics-v2_gen_test.go:141:2-141:28: `left, err = msgp.Skip(bts)`
$DIR/cmd/metrics-v2_gen_test.go:187:15-187:31: `.MarshalMsg(nil)`
$DIR/cmd/metrics-v2_gen_test.go:191:16-191:34: `.UnmarshalMsg(bts)`
$DIR/cmd/metrics-v2_gen_test.go:199:2-199:28: `left, err = msgp.Skip(bts)`
$DIR/cmd/metrics-v2_test.go:30:24-37:3: `.NewHistogramVec(
		prometheus.HistogramOpts{
			Name:    "s3_ttfb_seconds",
			Help:    "Time taken by requests served by current MinIO server instance",
			Buckets: histBuckets,
		},
		[]string{"api"},
	)`
$DIR/cmd/metrics-v2_test.go:71:16-71:48: `.NewTicker(1 * time.Millisecond)`
$DIR/cmd/metrics-v2_test.go:72:14-72:21: `.Stop()`
$DIR/cmd/metrics-v2_test.go:79:4-79:71: `ttfbHist.With(prometheus.Labels{"api": obs.label}).Observe(obs.val)`
$DIR/cmd/metrics-v2_test.go:79:12-79:54: `.With(prometheus.Labels{"api": obs.label})`
$DIR/cmd/metrics-v2_test.go:79:54-79:71: `.Observe(obs.val)`
$DIR/cmd/namespace-lock_test.go:47:16-47:29: `.Background()`
$DIR/cmd/namespace-lock_test.go:53:11-53:78: `.lock(ctx, "volume", "path", "source", "opsID", false, time.Second)`
$DIR/cmd/namespace-lock_test.go:61:4-61:82: `nsLk.lock(ctx, "volume", "path", "source", "opsID", false, 1*time.Millisecond)`
$DIR/cmd/namespace-lock_test.go:61:8-61:82: `.lock(ctx, "volume", "path", "source", "opsID", false, 1*time.Millisecond)`
$DIR/cmd/namespace-lock_test.go:63:3-63:35: `time.Sleep(1 * time.Millisecond)`
$DIR/cmd/namespace-lock_test.go:63:7-63:35: `.Sleep(1 * time.Millisecond)`
$DIR/cmd/namespace-lock_test.go:66:3-66:39: `nsLk.unlock("volume", "path", false)`
$DIR/cmd/namespace-lock_test.go:66:7-66:39: `.unlock("volume", "path", false)`
$DIR/cmd/namespace-lock_test.go:70:3-70:27: `nsLk.lockMapMutex.Lock()`
$DIR/cmd/namespace-lock_test.go:70:7-70:27: `.lockMapMutex.Lock()`
$DIR/cmd/namespace-lock_test.go:75:4-75:74: `lk3ch <- nsLk.lock(ctx, "volume", "path", "source", "opsID", false, 0)`
$DIR/cmd/namespace-lock_test.go:75:17-75:74: `.lock(ctx, "volume", "path", "source", "opsID", false, 0)`
$DIR/cmd/namespace-lock_test.go:81:4-81:74: `lk4ch <- nsLk.lock(ctx, "volume", "path", "source", "opsID", false, 0)`
$DIR/cmd/namespace-lock_test.go:81:17-81:74: `.lock(ctx, "volume", "path", "source", "opsID", false, 0)`
$DIR/cmd/namespace-lock_test.go:83:3-83:20: `runtime.Gosched()`
$DIR/cmd/namespace-lock_test.go:83:10-83:20: `.Gosched()`
$DIR/cmd/namespace-lock_test.go:86:3-86:29: `nsLk.lockMapMutex.Unlock()`
$DIR/cmd/namespace-lock_test.go:86:7-86:29: `.lockMapMutex.Unlock()`
$DIR/cmd/namespace-lock_test.go:95:3-95:10: `<-lk2ch`
$DIR/cmd/net_test.go:106:14-106:58: `.DeepEqual(testCase.sortedIPList, gotIPList)`
$DIR/cmd/net_test.go:116:7-116:36: `.CreateStringSet("127.0.0.1")`
$DIR/cmd/net_test.go:121:48-121:84: `.expectedIPList.Intersection(ipList)`
$DIR/cmd/net_test.go:121:84-121:94: `.IsEmpty()`
$DIR/cmd/net_test.go:133:20-133:49: `.CreateStringSet("127.0.0.1")`
$DIR/cmd/net_test.go:134:22-134:55: `.CreateStringSet("93.184.216.34")`
$DIR/cmd/net_test.go:150:48-150:84: `.expectedIPList.Intersection(ipList)`
$DIR/cmd/net_test.go:150:84-150:94: `.IsEmpty()`
$DIR/cmd/net_test.go:160:3-160:48: `globalMinioHost, globalMinioPort = host, port`
$DIR/cmd/net_test.go:172:3-172:66: `globalMinioHost, globalMinioPort = testCase.host, testCase.port`
$DIR/cmd/net_test.go:174:24-174:57: `.CreateStringSet(apiEndpoints...)`
$DIR/cmd/net_test.go:175:21-175:55: `.Contains(testCase.expectedResult)`
$DIR/cmd/net_test.go:198:3-210:5: `t.Run("", func(t *testing.T) {
			err := CheckLocalServerAddr(testCase.serverAddr)
			switch {
			case testCase.expectedErr == nil:
				if err != nil {
					t.Errorf("error: expected = <nil>, got = %v", err)
				}
			case err == nil:
				t.Errorf("error: expected = %v, got = <nil>", testCase.expectedErr)
			case testCase.expectedErr.Error() != err.Error():
				t.Errorf("error: expected = %v, got = %v", testCase.expectedErr, err)
			}
		})`
$DIR/cmd/net_test.go:198:4-210:5: `.Run("", func(t *testing.T) {
			err := CheckLocalServerAddr(testCase.serverAddr)
			switch {
			case testCase.expectedErr == nil:
				if err != nil {
					t.Errorf("error: expected = <nil>, got = %v", err)
				}
			case err == nil:
				t.Errorf("error: expected = %v, got = <nil>", testCase.expectedErr)
			case testCase.expectedErr.Error() != err.Error():
				t.Errorf("error: expected = %v, got = %v", testCase.expectedErr, err)
			}
		})`
$DIR/cmd/net_test.go:221:22-221:61: `.New("unable to process empty address")`
$DIR/cmd/net_test.go:259:25-259:64: `.New("unable to process empty address")`
$DIR/cmd/net_test.go:270:3-288:5: `t.Run("", func(t *testing.T) {
			sameAddr, err := sameLocalAddrs(testCase.addr1, testCase.addr2)
			if testCase.expectedErr != nil && err == nil {
				t.Errorf("should fail but succeeded")
			}
			if testCase.expectedErr == nil && err != nil {
				t.Errorf("should succeed but failed with %v", err)
			}
			if err == nil {
				if sameAddr != testCase.sameAddr {
					t.Errorf("expected: %v, found: %v", testCase.sameAddr, sameAddr)
				}
			} else {
				if err.Error() != testCase.expectedErr.Error() {
					t.Errorf("failed with different error, expected: '%v', found:'%v'.",
						testCase.expectedErr, err)
				}
			}
		})`
$DIR/cmd/net_test.go:270:4-288:5: `.Run("", func(t *testing.T) {
			sameAddr, err := sameLocalAddrs(testCase.addr1, testCase.addr2)
			if testCase.expectedErr != nil && err == nil {
				t.Errorf("should fail but succeeded")
			}
			if testCase.expectedErr == nil && err != nil {
				t.Errorf("should succeed but failed with %v", err)
			}
			if err == nil {
				if sameAddr != testCase.sameAddr {
					t.Errorf("expected: %v, found: %v", testCase.sameAddr, sameAddr)
				}
			} else {
				if err.Error() != testCase.expectedErr.Error() {
					t.Errorf("failed with different error, expected: '%v', found:'%v'.",
						testCase.expectedErr, err)
				}
			}
		})`
$DIR/cmd/object-api-utils_test.go:331:62-331:86: `.DeepEqual(got, tt.want)`
$DIR/cmd/object-api-utils_test.go:362:49-362:73: `.DeepEqual(got, tt.want)`
$DIR/cmd/object-api-utils_test.go:397:65-397:89: `.DeepEqual(got, tt.want)`
$DIR/cmd/object-api-utils_test.go:474:3-488:5: `t.Run(strconv.Itoa(i), func(t *testing.T) {
			got := test.objInfo.IsCompressed()
			if got != test.result {
				t.Errorf("IsCompressed: Expected %v but received %v",
					test.result, got)
			}
			got, gErr := test.objInfo.IsCompressedOK()
			if got != test.result {
				t.Errorf("IsCompressedOK: Expected %v but received %v",
					test.result, got)
			}
			if gErr != nil != test.err {
				t.Errorf("IsCompressedOK: want error: %t, got error: %v", test.err, gErr)
			}
		})`
$DIR/cmd/object-api-utils_test.go:474:4-488:5: `.Run(strconv.Itoa(i), func(t *testing.T) {
			got := test.objInfo.IsCompressed()
			if got != test.result {
				t.Errorf("IsCompressed: Expected %v but received %v",
					test.result, got)
			}
			got, gErr := test.objInfo.IsCompressedOK()
			if got != test.result {
				t.Errorf("IsCompressedOK: Expected %v but received %v",
					test.result, got)
			}
			if gErr != nil != test.err {
				t.Errorf("IsCompressedOK: want error: %t, got error: %v", test.err, gErr)
			}
		})`
$DIR/cmd/object-api-utils_test.go:474:16-474:24: `.Itoa(i)`
$DIR/cmd/object-api-utils_test.go:475:15-475:38: `.objInfo.IsCompressed()`
$DIR/cmd/object-api-utils_test.go:480:21-480:46: `.objInfo.IsCompressedOK()`
$DIR/cmd/object-api-utils_test.go:615:17-615:41: `.objInfo.GetActualSize()`
$DIR/cmd/object-api-utils_test.go:709:30-709:70: `.Repeat([]byte("hello, world"), 1000000)`
$DIR/cmd/object-api-utils_test.go:713:3-773:5: `t.Run(tt.name, func(t *testing.T) {
			buf := make([]byte, 100) // make small buffer to ensure multiple reads are required for large case

			r, idxCB := newS2CompressReader(bytes.NewReader(tt.data), int64(len(tt.data)), false)
			defer r.Close()

			var rdrBuf bytes.Buffer
			_, err := io.CopyBuffer(&rdrBuf, r, buf)
			if err != nil {
				t.Fatal(err)
			}
			r.Close()
			idx := idxCB()
			if !tt.wantIdx && len(idx) > 0 {
				t.Errorf("index returned above threshold")
			}
			if tt.wantIdx {
				if idx == nil {
					t.Errorf("no index returned")
				}
				var index s2.Index
				_, err = index.Load(s2.RestoreIndexHeaders(idx))
				if err != nil {
					t.Errorf("error loading index: %v", err)
				}
				t.Log("size:", len(idx))
				t.Log(string(index.JSON()))
				if index.TotalUncompressed != int64(len(tt.data)) {
					t.Errorf("Expected size %d, got %d", len(tt.data), index.TotalUncompressed)
				}
			}
			var stdBuf bytes.Buffer
			w := s2.NewWriter(&stdBuf)
			_, err = io.CopyBuffer(w, bytes.NewReader(tt.data), buf)
			if err != nil {
				t.Fatal(err)
			}
			err = w.Close()
			if err != nil {
				t.Fatal(err)
			}

			var (
				got  = rdrBuf.Bytes()
				want = stdBuf.Bytes()
			)
			if !bytes.Equal(got, want) {
				t.Errorf("encoded data does not match\n\t%q\n\t%q", got, want)
			}

			var decBuf bytes.Buffer
			decRdr := s2.NewReader(&rdrBuf)
			_, err = io.Copy(&decBuf, decRdr)
			if err != nil {
				t.Fatal(err)
			}

			if !bytes.Equal(tt.data, decBuf.Bytes()) {
				t.Errorf("roundtrip failed\n\t%q\n\t%q", tt.data, decBuf.Bytes())
			}
		})`
$DIR/cmd/object-api-utils_test.go:713:4-773:5: `.Run(tt.name, func(t *testing.T) {
			buf := make([]byte, 100) // make small buffer to ensure multiple reads are required for large case

			r, idxCB := newS2CompressReader(bytes.NewReader(tt.data), int64(len(tt.data)), false)
			defer r.Close()

			var rdrBuf bytes.Buffer
			_, err := io.CopyBuffer(&rdrBuf, r, buf)
			if err != nil {
				t.Fatal(err)
			}
			r.Close()
			idx := idxCB()
			if !tt.wantIdx && len(idx) > 0 {
				t.Errorf("index returned above threshold")
			}
			if tt.wantIdx {
				if idx == nil {
					t.Errorf("no index returned")
				}
				var index s2.Index
				_, err = index.Load(s2.RestoreIndexHeaders(idx))
				if err != nil {
					t.Errorf("error loading index: %v", err)
				}
				t.Log("size:", len(idx))
				t.Log(string(index.JSON()))
				if index.TotalUncompressed != int64(len(tt.data)) {
					t.Errorf("Expected size %d, got %d", len(tt.data), index.TotalUncompressed)
				}
			}
			var stdBuf bytes.Buffer
			w := s2.NewWriter(&stdBuf)
			_, err = io.CopyBuffer(w, bytes.NewReader(tt.data), buf)
			if err != nil {
				t.Fatal(err)
			}
			err = w.Close()
			if err != nil {
				t.Fatal(err)
			}

			var (
				got  = rdrBuf.Bytes()
				want = stdBuf.Bytes()
			)
			if !bytes.Equal(got, want) {
				t.Errorf("encoded data does not match\n\t%q\n\t%q", got, want)
			}

			var decBuf bytes.Buffer
			decRdr := s2.NewReader(&rdrBuf)
			_, err = io.Copy(&decBuf, decRdr)
			if err != nil {
				t.Fatal(err)
			}

			if !bytes.Equal(tt.data, decBuf.Bytes()) {
				t.Errorf("roundtrip failed\n\t%q\n\t%q", tt.data, decBuf.Bytes())
			}
		})`
$DIR/cmd/object-api-utils_test.go:716:41-716:60: `.NewReader(tt.data)`
$DIR/cmd/object-api-utils_test.go:720:16-720:44: `.CopyBuffer(&rdrBuf, r, buf)`
$DIR/cmd/object-api-utils_test.go:734:5-734:53: `_, err = index.Load(s2.RestoreIndexHeaders(idx))`
$DIR/cmd/object-api-utils_test.go:734:19-734:53: `.Load(s2.RestoreIndexHeaders(idx))`
$DIR/cmd/object-api-utils_test.go:734:27-734:52: `.RestoreIndexHeaders(idx)`
$DIR/cmd/object-api-utils_test.go:745:11-745:30: `.NewWriter(&stdBuf)`
$DIR/cmd/object-api-utils_test.go:746:4-746:60: `_, err = io.CopyBuffer(w, bytes.NewReader(tt.data), buf)`
$DIR/cmd/object-api-utils_test.go:746:15-746:60: `.CopyBuffer(w, bytes.NewReader(tt.data), buf)`
$DIR/cmd/object-api-utils_test.go:746:35-746:54: `.NewReader(tt.data)`
$DIR/cmd/object-api-utils_test.go:750:4-750:19: `err = w.Close()`
$DIR/cmd/object-api-utils_test.go:756:18-756:26: `.Bytes()`
$DIR/cmd/object-api-utils_test.go:757:18-757:26: `.Bytes()`
$DIR/cmd/object-api-utils_test.go:759:13-759:30: `.Equal(got, want)`
$DIR/cmd/object-api-utils_test.go:764:16-764:35: `.NewReader(&rdrBuf)`
$DIR/cmd/object-api-utils_test.go:765:4-765:37: `_, err = io.Copy(&decBuf, decRdr)`
$DIR/cmd/object-api-utils_test.go:765:15-765:37: `.Copy(&decBuf, decRdr)`
$DIR/cmd/object-api-utils_test.go:770:13-770:44: `.Equal(tt.data, decBuf.Bytes())`
$DIR/cmd/object-api-utils_test.go:770:35-770:43: `.Bytes()`
$DIR/cmd/object-api-utils_test.go:778:2-780:3: `type pathTest struct {
		path, result string
	}`
$DIR/cmd/object-handlers_test.go:206:2-206:34: `globalPolicySys = NewPolicySys()`
$DIR/cmd/object-handlers_test.go:207:17-207:38: `globalPolicySys = nil`
$DIR/cmd/object-handlers_test.go:328:2-328:34: `globalPolicySys = NewPolicySys()`
$DIR/cmd/object-handlers_test.go:329:17-329:38: `globalPolicySys = nil`
$DIR/cmd/object-handlers_test.go:640:2-640:34: `globalPolicySys = NewPolicySys()`
$DIR/cmd/object-handlers_test.go:641:17-641:38: `globalPolicySys = nil`
$DIR/cmd/object-handlers_test.go:836:2-836:34: `globalPolicySys = NewPolicySys()`
$DIR/cmd/object-handlers_test.go:837:17-837:38: `globalPolicySys = nil`
$DIR/cmd/os-readdir_test.go:37:14-37:42: `.Join(os.TempDir(), "issue")`
$DIR/cmd/os-readdir_test.go:37:22-37:32: `.TempDir()`
$DIR/cmd/os-readdir_test.go:38:14-38:49: `.WriteFile(file, []byte(""), 0o644)`
$DIR/cmd/os-readdir_test.go:41:10-41:26: `.RemoveAll(file)`
$DIR/cmd/os-readdir_test.go:44:27-44:47: `.Join(file, "mydir")`
$DIR/cmd/os-readdir_test.go:50:18-50:49: `.Join(os.TempDir(), "perm-dir")`
$DIR/cmd/os-readdir_test.go:50:26-50:36: `.TempDir()`
$DIR/cmd/os-readdir_test.go:51:15-51:53: `.MkdirAll(permDir, os.FileMode(0o200))`
$DIR/cmd/os-readdir_test.go:51:36-51:52: `.FileMode(0o200)`
$DIR/cmd/os-readdir_test.go:54:11-54:30: `.RemoveAll(permDir)`
$DIR/cmd/os-readdir_test.go:189:2-189:64: `testResults = append(testResults, setupTestReadDirEmpty(t)...)`
$DIR/cmd/os-readdir_test.go:191:2-191:64: `testResults = append(testResults, setupTestReadDirFiles(t)...)`
$DIR/cmd/os-readdir_test.go:193:2-193:66: `testResults = append(testResults, setupTestReadDirGeneric(t)...)`
$DIR/cmd/os-readdir_test.go:195:2-195:66: `testResults = append(testResults, setupTestReadDirSymlink(t)...)`
$DIR/cmd/os-readdir_test.go:206:4-206:25: `sort.Strings(entries)`
$DIR/cmd/os-readdir_test.go:206:8-206:25: `.Strings(entries)`
$DIR/cmd/os-readdir_test.go:234:11-234:21: `.TempDir()`
$DIR/cmd/os-readdir_test.go:237:13-237:88: `.WriteFile(filepath.Join(dir, fmt.Sprintf("%d", c)), []byte{}, os.ModePerm)`
$DIR/cmd/os-readdir_test.go:237:32-237:64: `.Join(dir, fmt.Sprintf("%d", c))`
$DIR/cmd/os-readdir_test.go:237:46-237:63: `.Sprintf("%d", c)`
$DIR/cmd/os-readdir_test.go:239:5-239:22: `os.RemoveAll(dir)`
$DIR/cmd/os-readdir_test.go:239:7-239:22: `.RemoveAll(dir)`
$DIR/cmd/os-readdir_test.go:245:4-245:21: `os.RemoveAll(dir)`
$DIR/cmd/os-readdir_test.go:245:6-245:21: `.RemoveAll(dir)`
$DIR/cmd/os-readdir_test.go:249:4-249:21: `os.RemoveAll(dir)`
$DIR/cmd/os-readdir_test.go:249:6-249:21: `.RemoveAll(dir)`
$DIR/cmd/os-readdir_test.go:253:3-253:20: `os.RemoveAll(dir)`
$DIR/cmd/os-readdir_test.go:253:5-253:20: `.RemoveAll(dir)`
$DIR/cmd/policy_test.go:34:10-40:5: `.NewBPStatement("",
				policy.Allow,
				policy.NewPrincipal("*"),
				policy.NewActionSet(policy.GetBucketLocationAction),
				policy.NewResourceSet(policy.NewResource("mybucket")),
				condition.NewFunctions(),
			)`
$DIR/cmd/policy_test.go:36:11-36:29: `.NewPrincipal("*")`
$DIR/cmd/policy_test.go:37:11-37:56: `.NewActionSet(policy.GetBucketLocationAction)`
$DIR/cmd/policy_test.go:38:11-38:58: `.NewResourceSet(policy.NewResource("mybucket"))`
$DIR/cmd/policy_test.go:38:33-38:57: `.NewResource("mybucket")`
$DIR/cmd/policy_test.go:39:14-39:29: `.NewFunctions()`
$DIR/cmd/policy_test.go:41:10-47:5: `.NewBPStatement("",
				policy.Allow,
				policy.NewPrincipal("*"),
				policy.NewActionSet(policy.PutObjectAction),
				policy.NewResourceSet(policy.NewResource("mybucket/myobject*")),
				condition.NewFunctions(),
			)`
$DIR/cmd/policy_test.go:43:11-43:29: `.NewPrincipal("*")`
$DIR/cmd/policy_test.go:44:11-44:48: `.NewActionSet(policy.PutObjectAction)`
$DIR/cmd/policy_test.go:45:11-45:68: `.NewResourceSet(policy.NewResource("mybucket/myobject*"))`
$DIR/cmd/policy_test.go:45:33-45:67: `.NewResource("mybucket/myobject*")`
$DIR/cmd/policy_test.go:46:14-46:29: `.NewFunctions()`
$DIR/cmd/policy_test.go:138:14-138:39: `.IsAllowed(testCase.args)`
$DIR/cmd/policy_test.go:167:10-173:5: `.NewBPStatement("",
				policy.Allow,
				policy.NewPrincipal("*"),
				policy.NewActionSet(policy.GetBucketLocationAction, policy.ListBucketAction),
				policy.NewResourceSet(policy.NewResource("mybucket")),
				condition.NewFunctions(),
			)`
$DIR/cmd/policy_test.go:169:11-169:29: `.NewPrincipal("*")`
$DIR/cmd/policy_test.go:170:11-170:81: `.NewActionSet(policy.GetBucketLocationAction, policy.ListBucketAction)`
$DIR/cmd/policy_test.go:171:11-171:58: `.NewResourceSet(policy.NewResource("mybucket"))`
$DIR/cmd/policy_test.go:171:33-171:57: `.NewResource("mybucket")`
$DIR/cmd/policy_test.go:172:14-172:29: `.NewFunctions()`
$DIR/cmd/policy_test.go:174:10-180:5: `.NewBPStatement("",
				policy.Allow,
				policy.NewPrincipal("*"),
				policy.NewActionSet(policy.GetObjectAction),
				policy.NewResourceSet(policy.NewResource("mybucket/myobject*")),
				condition.NewFunctions(),
			)`
$DIR/cmd/policy_test.go:176:11-176:29: `.NewPrincipal("*")`
$DIR/cmd/policy_test.go:177:11-177:48: `.NewActionSet(policy.GetObjectAction)`
$DIR/cmd/policy_test.go:178:11-178:68: `.NewResourceSet(policy.NewResource("mybucket/myobject*"))`
$DIR/cmd/policy_test.go:178:33-178:67: `.NewResource("mybucket/myobject*")`
$DIR/cmd/policy_test.go:179:14-179:29: `.NewFunctions()`
$DIR/cmd/policy_test.go:202:10-208:5: `.NewBPStatement("",
				policy.Allow,
				policy.NewPrincipal("*"),
				policy.NewActionSet(policy.PutObjectAction),
				policy.NewResourceSet(policy.NewResource("mybucket/myobject*")),
				condition.NewFunctions(),
			)`
$DIR/cmd/policy_test.go:204:11-204:29: `.NewPrincipal("*")`
$DIR/cmd/policy_test.go:205:11-205:48: `.NewActionSet(policy.PutObjectAction)`
$DIR/cmd/policy_test.go:206:11-206:68: `.NewResourceSet(policy.NewResource("mybucket/myobject*"))`
$DIR/cmd/policy_test.go:206:33-206:67: `.NewResource("mybucket/myobject*")`
$DIR/cmd/policy_test.go:207:14-207:29: `.NewFunctions()`
$DIR/cmd/policy_test.go:231:15-231:58: `.DeepEqual(result, testCase.expectedResult)`
$DIR/cmd/policy_test.go:247:10-253:5: `.NewBPStatement("",
				policy.Allow,
				policy.NewPrincipal("*"),
				policy.NewActionSet(policy.GetBucketLocationAction, policy.ListBucketAction),
				policy.NewResourceSet(policy.NewResource("mybucket")),
				condition.NewFunctions(),
			)`
$DIR/cmd/policy_test.go:249:11-249:29: `.NewPrincipal("*")`
$DIR/cmd/policy_test.go:250:11-250:81: `.NewActionSet(policy.GetBucketLocationAction, policy.ListBucketAction)`
$DIR/cmd/policy_test.go:251:11-251:58: `.NewResourceSet(policy.NewResource("mybucket"))`
$DIR/cmd/policy_test.go:251:33-251:57: `.NewResource("mybucket")`
$DIR/cmd/policy_test.go:252:14-252:29: `.NewFunctions()`
$DIR/cmd/policy_test.go:254:10-260:5: `.NewBPStatement("",
				policy.Allow,
				policy.NewPrincipal("*"),
				policy.NewActionSet(policy.GetObjectAction),
				policy.NewResourceSet(policy.NewResource("mybucket/myobject*")),
				condition.NewFunctions(),
			)`
$DIR/cmd/policy_test.go:256:11-256:29: `.NewPrincipal("*")`
$DIR/cmd/policy_test.go:257:11-257:48: `.NewActionSet(policy.GetObjectAction)`
$DIR/cmd/policy_test.go:258:11-258:68: `.NewResourceSet(policy.NewResource("mybucket/myobject*"))`
$DIR/cmd/policy_test.go:258:33-258:67: `.NewResource("mybucket/myobject*")`
$DIR/cmd/policy_test.go:259:14-259:29: `.NewFunctions()`
$DIR/cmd/policy_test.go:298:15-298:58: `.DeepEqual(result, testCase.expectedResult)`
$DIR/cmd/postpolicyform_test.go:69:3-77:5: `t.Run("", func(t *testing.T) {
			_, err := parsePostPolicyForm(strings.NewReader(testCase.policy))
			if testCase.success && err != nil {
				t.Errorf("Expected success but failed with %s", err)
			}
			if !testCase.success && err == nil {
				t.Errorf("Expected failed but succeeded")
			}
		})`
$DIR/cmd/postpolicyform_test.go:69:4-77:5: `.Run("", func(t *testing.T) {
			_, err := parsePostPolicyForm(strings.NewReader(testCase.policy))
			if testCase.success && err != nil {
				t.Errorf("Expected success but failed with %s", err)
			}
			if !testCase.success && err == nil {
				t.Errorf("Expected failed but succeeded")
			}
		})`
$DIR/cmd/postpolicyform_test.go:70:41-70:68: `.NewReader(testCase.policy)`
$DIR/cmd/postpolicyform_test.go:83:13-83:29: `.NewPostPolicy()`
$DIR/cmd/postpolicyform_test.go:84:2-84:28: `pp.SetBucket("testbucket")`
$DIR/cmd/postpolicyform_test.go:84:4-84:28: `.SetBucket("testbucket")`
$DIR/cmd/postpolicyform_test.go:85:2-85:33: `pp.SetContentType("image/jpeg")`
$DIR/cmd/postpolicyform_test.go:85:4-85:33: `.SetContentType("image/jpeg")`
$DIR/cmd/postpolicyform_test.go:86:2-86:46: `pp.SetUserMetadata("uuid", "14365123651274")`
$DIR/cmd/postpolicyform_test.go:86:4-86:46: `.SetUserMetadata("uuid", "14365123651274")`
$DIR/cmd/postpolicyform_test.go:87:2-87:44: `pp.SetKeyStartsWith("user/user1/filename")`
$DIR/cmd/postpolicyform_test.go:87:4-87:44: `.SetKeyStartsWith("user/user1/filename")`
$DIR/cmd/postpolicyform_test.go:88:2-88:45: `pp.SetContentLengthRange(1048579, 10485760)`
$DIR/cmd/postpolicyform_test.go:88:4-88:45: `.SetContentLengthRange(1048579, 10485760)`
$DIR/cmd/postpolicyform_test.go:89:2-89:34: `pp.SetSuccessStatusAction("201")`
$DIR/cmd/postpolicyform_test.go:89:4-89:34: `.SetSuccessStatusAction("201")`
$DIR/cmd/postpolicyform_test.go:91:2-103:3: `type testCase struct {
		Bucket              string
		Key                 string
		XAmzDate            string
		XAmzAlgorithm       string
		XAmzCredential      string
		XAmzMetaUUID        string
		ContentType         string
		SuccessActionStatus string
		Policy              string
		Expired             bool
		expectedErr         error
	}`
$DIR/cmd/postpolicyform_test.go:128:3-128:38: `formValues.Set("Bucket", tt.Bucket)`
$DIR/cmd/postpolicyform_test.go:128:13-128:38: `.Set("Bucket", tt.Bucket)`
$DIR/cmd/postpolicyform_test.go:129:3-129:32: `formValues.Set("Key", tt.Key)`
$DIR/cmd/postpolicyform_test.go:129:13-129:32: `.Set("Key", tt.Key)`
$DIR/cmd/postpolicyform_test.go:130:3-130:49: `formValues.Set("Content-Type", tt.ContentType)`
$DIR/cmd/postpolicyform_test.go:130:13-130:49: `.Set("Content-Type", tt.ContentType)`
$DIR/cmd/postpolicyform_test.go:131:3-131:44: `formValues.Set("X-Amz-Date", tt.XAmzDate)`
$DIR/cmd/postpolicyform_test.go:131:13-131:44: `.Set("X-Amz-Date", tt.XAmzDate)`
$DIR/cmd/postpolicyform_test.go:132:3-132:53: `formValues.Set("X-Amz-Meta-Uuid", tt.XAmzMetaUUID)`
$DIR/cmd/postpolicyform_test.go:132:13-132:53: `.Set("X-Amz-Meta-Uuid", tt.XAmzMetaUUID)`
$DIR/cmd/postpolicyform_test.go:133:3-133:54: `formValues.Set("X-Amz-Algorithm", tt.XAmzAlgorithm)`
$DIR/cmd/postpolicyform_test.go:133:13-133:54: `.Set("X-Amz-Algorithm", tt.XAmzAlgorithm)`
$DIR/cmd/postpolicyform_test.go:134:3-134:56: `formValues.Set("X-Amz-Credential", tt.XAmzCredential)`
$DIR/cmd/postpolicyform_test.go:134:13-134:56: `.Set("X-Amz-Credential", tt.XAmzCredential)`
$DIR/cmd/postpolicyform_test.go:137:4-137:46: `pp.SetExpires(UTCNow().AddDate(0, 0, -10))`
$DIR/cmd/postpolicyform_test.go:137:6-137:46: `.SetExpires(UTCNow().AddDate(0, 0, -10))`
$DIR/cmd/postpolicyform_test.go:137:26-137:45: `.AddDate(0, 0, -10)`
$DIR/cmd/postpolicyform_test.go:140:4-140:45: `pp.SetExpires(UTCNow().AddDate(0, 0, 10))`
$DIR/cmd/postpolicyform_test.go:140:6-140:45: `.SetExpires(UTCNow().AddDate(0, 0, 10))`
$DIR/cmd/postpolicyform_test.go:140:26-140:44: `.AddDate(0, 0, 10)`
$DIR/cmd/postpolicyform_test.go:143:3-143:83: `formValues.Set("Policy", base64.StdEncoding.EncodeToString([]byte(pp.String())))`
$DIR/cmd/postpolicyform_test.go:143:13-143:83: `.Set("Policy", base64.StdEncoding.EncodeToString([]byte(pp.String())))`
$DIR/cmd/postpolicyform_test.go:143:34-143:82: `.StdEncoding.EncodeToString([]byte(pp.String()))`
$DIR/cmd/postpolicyform_test.go:143:71-143:80: `.String()`
$DIR/cmd/postpolicyform_test.go:144:3-144:66: `formValues.Set("Success_action_status", tt.SuccessActionStatus)`
$DIR/cmd/postpolicyform_test.go:144:13-144:66: `.Set("Success_action_status", tt.SuccessActionStatus)`
$DIR/cmd/postpolicyform_test.go:145:29-145:110: `.StdEncoding.DecodeString(base64.StdEncoding.EncodeToString([]byte(pp.String())))`
$DIR/cmd/postpolicyform_test.go:145:61-145:109: `.StdEncoding.EncodeToString([]byte(pp.String()))`
$DIR/cmd/postpolicyform_test.go:145:98-145:107: `.String()`
$DIR/cmd/postpolicyform_test.go:150:51-150:74: `.NewReader(policyBytes)`
$DIR/cmd/postpolicyform_test.go:155:3-155:52: `err = checkPostPolicy(formValues, postPolicyForm)`
$DIR/cmd/server-main_test.go:56:3-73:5: `t.Run(testcase.config, func(t *testing.T) {
			sctx := &serverCtxt{}
			err := mergeServerCtxtFromConfigFile(testcase.config, sctx)
			if testcase.expectedErr && err == nil {
				t.Error("expected failure, got success")
			}
			if !testcase.expectedErr && err != nil {
				t.Error("expected success, got failure", err)
			}
			if err == nil {
				if len(sctx.Layout.pools) != 2 {
					t.Error("expected parsed pools to be 2, not", len(sctx.Layout.pools))
				}
				if sctx.Layout.pools[0].cmdline != testcase.hash {
					t.Error("expected hash", testcase.hash, "got", sctx.Layout.pools[0].cmdline)
				}
			}
		})`
$DIR/cmd/server-main_test.go:56:4-73:5: `.Run(testcase.config, func(t *testing.T) {
			sctx := &serverCtxt{}
			err := mergeServerCtxtFromConfigFile(testcase.config, sctx)
			if testcase.expectedErr && err == nil {
				t.Error("expected failure, got success")
			}
			if !testcase.expectedErr && err != nil {
				t.Error("expected success, got failure", err)
			}
			if err == nil {
				if len(sctx.Layout.pools) != 2 {
					t.Error("expected parsed pools to be 2, not", len(sctx.Layout.pools))
				}
				if sctx.Layout.pools[0].cmdline != testcase.hash {
					t.Error("expected hash", testcase.hash, "got", sctx.Layout.pools[0].cmdline)
				}
			}
		})`
$DIR/cmd/server-main_test.go:79:24-79:57: `.WithCancel(context.Background())`
$DIR/cmd/server-main_test.go:79:43-79:56: `.Background()`
$DIR/cmd/server-main_test.go:102:2-102:13: `nDisks = 16`
$DIR/cmd/server-main_test.go:103:2-103:37: `disks, err = getRandomDisks(nDisks)`
$DIR/cmd/server-main_test.go:109:2-109:67: `obj, err = newObjectLayer(ctx, mustGetPoolEndpoints(0, disks...))`
$DIR/cmd/server-main_test.go:114:2-114:35: `_, ok = obj.(*erasureServerPools)`
$DIR/cmd/server-startup-msg_test.go:33:2-42:3: `infoStorage.Disks = []madmin.Disk{
		{Endpoint: "http://127.0.0.1:9000/data/1/", State: madmin.DriveStateOk},
		{Endpoint: "http://127.0.0.1:9000/data/2/", State: madmin.DriveStateOk},
		{Endpoint: "http://127.0.0.1:9000/data/3/", State: madmin.DriveStateOk},
		{Endpoint: "http://127.0.0.1:9000/data/4/", State: madmin.DriveStateOk},
		{Endpoint: "http://127.0.0.1:9001/data/1/", State: madmin.DriveStateOk},
		{Endpoint: "http://127.0.0.1:9001/data/2/", State: madmin.DriveStateOk},
		{Endpoint: "http://127.0.0.1:9001/data/3/", State: madmin.DriveStateOk},
		{Endpoint: "http://127.0.0.1:9001/data/4/", State: madmin.DriveStateOffline},
	}`
$DIR/cmd/server-startup-msg_test.go:43:2-43:43: `infoStorage.Backend.Type = madmin.Erasure`
$DIR/cmd/server-startup-msg_test.go:45:52-45:89: `.Contains(msg, "7 Online, 1 Offline")`
$DIR/cmd/server-startup-msg_test.go:56:13-56:62: `.DeepEqual(expectedAPIEndpoints, newAPIEndpoints)`
$DIR/cmd/server-startup-msg_test.go:60:2-60:46: `apiEndpoints = []string{"http://%%%%%:9000"}`
$DIR/cmd/server-startup-msg_test.go:61:2-61:56: `newAPIEndpoints = stripStandardPorts(apiEndpoints, "")`
$DIR/cmd/server-startup-msg_test.go:62:13-62:54: `.DeepEqual(apiEndpoints, newAPIEndpoints)`
$DIR/cmd/server-startup-msg_test.go:66:2-66:73: `apiEndpoints = []string{"http://127.0.0.1:443", "https://127.0.0.1:80"}`
$DIR/cmd/server-startup-msg_test.go:67:2-67:56: `newAPIEndpoints = stripStandardPorts(apiEndpoints, "")`
$DIR/cmd/server-startup-msg_test.go:68:13-68:54: `.DeepEqual(apiEndpoints, newAPIEndpoints)`
$DIR/cmd/server-startup-msg_test.go:75:24-75:57: `.WithCancel(context.Background())`
$DIR/cmd/server-startup-msg_test.go:75:43-75:56: `.Background()`
$DIR/cmd/server-startup-msg_test.go:82:10-82:27: `.RemoveAll(fsDir)`
$DIR/cmd/server-startup-msg_test.go:93:24-93:57: `.WithCancel(context.Background())`
$DIR/cmd/server-startup-msg_test.go:93:43-93:56: `.Background()`
$DIR/cmd/server-startup-msg_test.go:100:10-100:27: `.RemoveAll(fsDir)`
$DIR/cmd/server-startup-msg_test.go:111:24-111:57: `.WithCancel(context.Background())`
$DIR/cmd/server-startup-msg_test.go:111:43-111:56: `.Background()`
$DIR/cmd/server-startup-msg_test.go:118:10-118:27: `.RemoveAll(fsDir)`
$DIR/cmd/server_test.go:140:2-140:40: `globalServerCtxt.StrictS3Compat = true`
$DIR/cmd/server_test.go:142:3-144:5: `t.Run(fmt.Sprintf("Test: %d, ServerType: %s", i+1, testCase.serverType), func(t *testing.T) {
			runAllTests(testCase, &check{t, testCase.serverType})
		})`
$DIR/cmd/server_test.go:142:4-144:5: `.Run(fmt.Sprintf("Test: %d, ServerType: %s", i+1, testCase.serverType), func(t *testing.T) {
			runAllTests(testCase, &check{t, testCase.serverType})
		})`
$DIR/cmd/server_test.go:142:12-142:74: `.Sprintf("Test: %d, ServerType: %s", i+1, testCase.serverType)`
$DIR/cmd/server_test.go:143:4-143:57: `runAllTests(testCase, &check{t, testCase.serverType})`
$DIR/cmd/signature-v2_test.go:33:2-33:40: `copy(sortedResourceList, resourceList)`
$DIR/cmd/signature-v2_test.go:34:2-34:34: `sort.Strings(sortedResourceList)`
$DIR/cmd/signature-v2_test.go:34:6-34:34: `.Strings(sortedResourceList)`
$DIR/cmd/signature-v2_test.go:45:24-45:57: `.WithCancel(context.Background())`
$DIR/cmd/signature-v2_test.go:45:43-45:56: `.Background()`
$DIR/cmd/signature-v2_test.go:52:10-52:27: `.RemoveAll(fsDir)`
$DIR/cmd/signature-v2_test.go:101:26-101:55: `.Sprintf("%d", now.Unix()+60)`
$DIR/cmd/signature-v2_test.go:101:44-101:51: `.Unix()`
$DIR/cmd/signature-v2_test.go:110:26-110:55: `.Sprintf("%d", now.Unix()+60)`
$DIR/cmd/signature-v2_test.go:110:44-110:51: `.Unix()`
$DIR/cmd/signature-v2_test.go:135:4-135:25: `query.Set(key, value)`
$DIR/cmd/signature-v2_test.go:135:9-135:25: `.Set(key, value)`
$DIR/cmd/signature-v2_test.go:138:19-138:86: `.NewRequest(http.MethodGet, "http://host/a/b?"+query.Encode(), nil)`
$DIR/cmd/signature-v2_test.go:138:71-138:80: `.Encode()`
$DIR/cmd/signature-v2_test.go:144:4-144:41: `req.RequestURI = req.URL.RequestURI()`
$DIR/cmd/signature-v2_test.go:144:24-144:41: `.URL.RequestURI()`
$DIR/cmd/signature-v2_test.go:151:4-151:61: `err = preSignV2(req, accessKey, secretKey, now.Unix()+60)`
$DIR/cmd/signature-v2_test.go:151:50-151:57: `.Unix()`
$DIR/cmd/signature-v2_test.go:156:4-156:41: `req.RequestURI = req.URL.RequestURI()`
$DIR/cmd/signature-v2_test.go:156:24-156:41: `.URL.RequestURI()`
$DIR/cmd/signature-v2_test.go:168:24-168:57: `.WithCancel(context.Background())`
$DIR/cmd/signature-v2_test.go:168:43-168:56: `.Background()`
$DIR/cmd/signature-v2_test.go:175:10-175:27: `.RemoveAll(fsDir)`
$DIR/cmd/signature-v2_test.go:208:22-208:66: `.Sprintf("%s %s", signV2Algorithm, accessID)`
$DIR/cmd/signature-v2_test.go:214:22-214:91: `.Sprintf("%s %s:%s", signV2Algorithm, "InvalidAccessID", "signature")`
$DIR/cmd/signature-v2_test.go:220:22-220:82: `.Sprintf("%s %s:%s", signV2Algorithm, accessID, "signature")`
$DIR/cmd/signature-v2_test.go:226:3-237:5: `t.Run(fmt.Sprintf("Case %d AuthStr \"%s\".", i+1, testCase.authString), func(t *testing.T) {
			req := &http.Request{
				Header: make(http.Header),
				URL:    &url.URL{},
			}
			req.Header.Set("Authorization", testCase.authString)
			_, actualErrCode := validateV2AuthHeader(req)

			if testCase.expectedError != actualErrCode {
				t.Errorf("Expected the error code to be %v, got %v.", testCase.expectedError, actualErrCode)
			}
		})`
$DIR/cmd/signature-v2_test.go:226:4-237:5: `.Run(fmt.Sprintf("Case %d AuthStr \"%s\".", i+1, testCase.authString), func(t *testing.T) {
			req := &http.Request{
				Header: make(http.Header),
				URL:    &url.URL{},
			}
			req.Header.Set("Authorization", testCase.authString)
			_, actualErrCode := validateV2AuthHeader(req)

			if testCase.expectedError != actualErrCode {
				t.Errorf("Expected the error code to be %v, got %v.", testCase.expectedError, actualErrCode)
			}
		})`
$DIR/cmd/signature-v2_test.go:226:12-226:73: `.Sprintf("Case %d AuthStr \"%s\".", i+1, testCase.authString)`
$DIR/cmd/signature-v2_test.go:231:4-231:56: `req.Header.Set("Authorization", testCase.authString)`
$DIR/cmd/signature-v2_test.go:231:7-231:56: `.Header.Set("Authorization", testCase.authString)`
$DIR/cmd/signature-v2_test.go:242:24-242:57: `.WithCancel(context.Background())`
$DIR/cmd/signature-v2_test.go:242:43-242:56: `.Background()`
$DIR/cmd/signature-v2_test.go:249:10-249:27: `.RemoveAll(fsDir)`
$DIR/cmd/signature-v2_test.go:268:3-268:51: `formValues.Set("Awsaccesskeyid", test.accessKey)`
$DIR/cmd/signature-v2_test.go:268:13-268:51: `.Set("Awsaccesskeyid", test.accessKey)`
$DIR/cmd/signature-v2_test.go:269:3-269:46: `formValues.Set("Signature", test.signature)`
$DIR/cmd/signature-v2_test.go:269:13-269:46: `.Set("Signature", test.signature)`
$DIR/cmd/signature-v2_test.go:270:3-270:40: `formValues.Set("Policy", test.policy)`
$DIR/cmd/signature-v2_test.go:270:13-270:40: `.Set("Policy", test.policy)`
$DIR/cmd/signature-v4-parser_test.go:91:27-91:44: `.Format(yyyymmdd)`
$DIR/cmd/signature-v4-parser_test.go:124:13-124:30: `.Format(yyyymmdd)`
$DIR/cmd/signature-v4-parser_test.go:137:13-137:22: `.String()`
$DIR/cmd/signature-v4-parser_test.go:150:13-150:30: `.Format(yyyymmdd)`
$DIR/cmd/signature-v4-parser_test.go:162:13-162:30: `.Format(yyyymmdd)`
$DIR/cmd/signature-v4-parser_test.go:175:13-175:30: `.Format(yyyymmdd)`
$DIR/cmd/signature-v4-parser_test.go:248:4-248:84: `validateCredentialfields(t, i+1, testCase.expectedCredentials, actualCredential)`
$DIR/cmd/signature-v4-parser_test.go:342:14-342:56: `.Join(testCase.expectedSignedHeaders, ",")`
$DIR/cmd/signature-v4-parser_test.go:342:67-342:98: `.Join(actualSignedHeaders, ",")`
$DIR/cmd/signature-v4-parser_test.go:352:27-352:44: `.Format(yyyymmdd)`
$DIR/cmd/signature-v4-parser_test.go:394:12-405:12: `.Join([]string{
					// generating a valid credential field.
					generateCredentialStr(
						"Z7IXGOO6BZ0REAN1Q26I",
						sampleTimeStr,
						"us-west-1",
						"s3",
						"aws4_request"),
					// Incorrect SignedHeader field.
					"SignIncorrectHeader=",
					"b",
				}, ",")`
$DIR/cmd/signature-v4-parser_test.go:416:12-429:12: `.Join([]string{
					// generating a valid credential.
					generateCredentialStr(
						"Z7IXGOO6BZ0REAN1Q26I",
						sampleTimeStr,
						"us-west-1",
						"s3",
						"aws4_request"),
					// valid SignedHeader.
					"SignedHeaders=host;x-amz-content-sha256;x-amz-date",
					// invalid Signature field.
					// a valid signature is of form "Signature="
					"Sign=",
				}, ",")`
$DIR/cmd/signature-v4-parser_test.go:437:12-450:12: `.Join([]string{
					// generating a valid credential.
					generateCredentialStr(
						"Z7IXGOO6BZ0REAN1Q26I",
						sampleTimeStr,
						"us-west-1",
						"s3",
						"aws4_request"),
					// valid SignedHeader.
					"SignedHeaders=host;x-amz-content-sha256;x-amz-date",
					// valid Signature field.
					// a valid signature is of form "Signature="
					"Signature=abcd",
				}, ",")`
$DIR/cmd/signature-v4-parser_test.go:467:12-480:12: `.Join([]string{
					// generating a valid credential.
					generateCredentialStr(
						"access key",
						sampleTimeStr,
						"us-west-1",
						"s3",
						"aws4_request"),
					// valid SignedHeader.
					"SignedHeaders=host;x-amz-content-sha256;x-amz-date",
					// valid Signature field.
					// a valid signature is of form "Signature="
					"Signature=abcd",
				}, ",")`
$DIR/cmd/signature-v4-parser_test.go:505:4-505:103: `validateCredentialfields(t, i+1, testCase.expectedAuthField.Credential, parsedAuthField.Credential)`
$DIR/cmd/signature-v4-parser_test.go:513:14-513:66: `.Join(testCase.expectedAuthField.SignedHeaders, ",")`
$DIR/cmd/signature-v4-parser_test.go:513:77-513:118: `.Join(parsedAuthField.SignedHeaders, ",")`
$DIR/cmd/signature-v4-parser_test.go:619:4-619:82: `inputQuery.Set(testCase.inputQueryKeyVals[j], testCase.inputQueryKeyVals[j+1])`
$DIR/cmd/signature-v4-parser_test.go:619:14-619:82: `.Set(testCase.inputQueryKeyVals[j], testCase.inputQueryKeyVals[j+1])`
$DIR/cmd/signature-v4-parser_test.go:638:27-638:44: `.Format(yyyymmdd)`
$DIR/cmd/signature-v4-parser_test.go:731:27-731:49: `.Format(iso8601Format)`
$DIR/cmd/signature-v4-parser_test.go:753:28-753:34: `.UTC()`
$DIR/cmd/signature-v4-parser_test.go:753:34-753:56: `.Format(iso8601Format)`
$DIR/cmd/signature-v4-parser_test.go:775:28-775:34: `.UTC()`
$DIR/cmd/signature-v4-parser_test.go:775:34-775:56: `.Format(iso8601Format)`
$DIR/cmd/signature-v4-parser_test.go:798:28-798:34: `.UTC()`
$DIR/cmd/signature-v4-parser_test.go:798:34-798:56: `.Format(iso8601Format)`
$DIR/cmd/signature-v4-parser_test.go:841:28-841:34: `.UTC()`
$DIR/cmd/signature-v4-parser_test.go:841:34-841:56: `.Format(iso8601Format)`
$DIR/cmd/signature-v4-parser_test.go:856:4-856:82: `inputQuery.Set(testCase.inputQueryKeyVals[j], testCase.inputQueryKeyVals[j+1])`
$DIR/cmd/signature-v4-parser_test.go:856:14-856:82: `.Set(testCase.inputQueryKeyVals[j], testCase.inputQueryKeyVals[j+1])`
$DIR/cmd/signature-v4-parser_test.go:865:4-865:105: `validateCredentialfields(t, i+1, testCase.expectedPreSignValues.Credential, parsedPreSign.Credential)`
$DIR/cmd/signature-v4-parser_test.go:867:14-867:70: `.Join(testCase.expectedPreSignValues.SignedHeaders, ",")`
$DIR/cmd/signature-v4-parser_test.go:867:81-867:120: `.Join(parsedPreSign.SignedHeaders, ",")`
$DIR/cmd/signature-v4-parser_test.go:879:15-879:48: `.expectedPreSignValues.Date.UTC()`
$DIR/cmd/signature-v4-parser_test.go:879:48-879:70: `.Format(iso8601Format)`
$DIR/cmd/signature-v4-parser_test.go:879:87-879:98: `.Date.UTC()`
$DIR/cmd/signature-v4-parser_test.go:879:98-879:120: `.Format(iso8601Format)`
$DIR/cmd/signature-v4-utils_test.go:33:24-33:57: `.WithCancel(context.Background())`
$DIR/cmd/signature-v4-utils_test.go:33:43-33:56: `.Background()`
$DIR/cmd/signature-v4-utils_test.go:40:10-40:27: `.RemoveAll(fsDir)`
$DIR/cmd/signature-v4-utils_test.go:45:2-45:24: `initAllSubsystems(ctx)`
$DIR/cmd/signature-v4-utils_test.go:46:2-46:36: `initConfigSubsystem(ctx, objLayer)`
$DIR/cmd/signature-v4-utils_test.go:48:2-48:67: `globalIAMSys.Init(ctx, objLayer, globalEtcdClient, 2*time.Second)`
$DIR/cmd/signature-v4-utils_test.go:48:14-48:67: `.Init(ctx, objLayer, globalEtcdClient, 2*time.Second)`
$DIR/cmd/signature-v4-utils_test.go:68:2-68:52: `_, _, s3Err = checkKeyValid(req, "does-not-exist")`
$DIR/cmd/signature-v4-utils_test.go:73:21-73:65: `.CreateCredentials("myuser1", "mypassword1")`
$DIR/cmd/signature-v4-utils_test.go:78:2-81:4: `globalIAMSys.CreateUser(ctx, ucreds.AccessKey, madmin.AddOrUpdateUserReq{
		SecretKey: ucreds.SecretKey,
		Status:    madmin.AccountEnabled,
	})`
$DIR/cmd/signature-v4-utils_test.go:78:14-81:4: `.CreateUser(ctx, ucreds.AccessKey, madmin.AddOrUpdateUserReq{
		SecretKey: ucreds.SecretKey,
		Status:    madmin.AccountEnabled,
	})`
$DIR/cmd/signature-v4-utils_test.go:83:2-83:56: `_, owner, s3Err = checkKeyValid(req, ucreds.AccessKey)`
$DIR/cmd/signature-v4-utils_test.go:142:24-142:78: `.NewRequest(http.MethodGet, "http://example.com", nil)`
$DIR/cmd/signature-v4-utils_test.go:147:17-147:29: `.URL.Query()`
$DIR/cmd/signature-v4-utils_test.go:148:4-148:59: `q.Add(testCase.inputQueryKey, testCase.inputQueryValue)`
$DIR/cmd/signature-v4-utils_test.go:148:5-148:59: `.Add(testCase.inputQueryKey, testCase.inputQueryValue)`
$DIR/cmd/signature-v4-utils_test.go:150:5-150:62: `q.Add(testCase.inputHeaderKey, testCase.inputHeaderValue)`
$DIR/cmd/signature-v4-utils_test.go:150:6-150:62: `.Add(testCase.inputHeaderKey, testCase.inputHeaderValue)`
$DIR/cmd/signature-v4-utils_test.go:152:4-152:38: `inputReq.URL.RawQuery = q.Encode()`
$DIR/cmd/signature-v4-utils_test.go:152:29-152:38: `.Encode()`
$DIR/cmd/signature-v4-utils_test.go:154:4-154:75: `inputReq.Header.Set(testCase.inputHeaderKey, testCase.inputHeaderValue)`
$DIR/cmd/signature-v4-utils_test.go:154:12-154:75: `.Header.Set(testCase.inputHeaderKey, testCase.inputHeaderValue)`
$DIR/cmd/signature-v4-utils_test.go:156:3-156:23: `inputReq.ParseForm()`
$DIR/cmd/signature-v4-utils_test.go:156:11-156:23: `.ParseForm()`
$DIR/cmd/signature-v4-utils_test.go:195:2-195:49: `signedHeaders = append(signedHeaders, "expect")`
$DIR/cmd/signature-v4-utils_test.go:199:26-199:48: `.Format(iso8601Format)`
$DIR/cmd/signature-v4-utils_test.go:203:16-203:75: `.NewRequest(http.MethodGet, "http://play.min.io:9000", nil)`
$DIR/cmd/signature-v4-utils_test.go:207:2-207:57: `r.TransferEncoding = []string{expectedTransferEncoding}`
$DIR/cmd/signature-v4-utils_test.go:211:2-211:64: `inputHeader.Set("x-amz-content-sha256", expectedContentSha256)`
$DIR/cmd/signature-v4-utils_test.go:211:13-211:64: `.Set("x-amz-content-sha256", expectedContentSha256)`
$DIR/cmd/signature-v4-utils_test.go:212:2-212:45: `inputHeader.Set("x-amz-date", expectedTime)`
$DIR/cmd/signature-v4-utils_test.go:212:13-212:45: `.Set("x-amz-date", expectedTime)`
$DIR/cmd/signature-v4-utils_test.go:219:17-219:29: `.URL.Query()`
$DIR/cmd/signature-v4-utils_test.go:221:2-221:71: `signedHeaders = append(signedHeaders, "x-amz-server-side-encryption")`
$DIR/cmd/signature-v4-utils_test.go:223:2-223:53: `_, errCode = extractSignedHeaders(signedHeaders, r)`
$DIR/cmd/signature-v4-utils_test.go:228:2-228:72: `inputQuery.Add("x-amz-server-side-encryption", xhttp.AmzEncryptionAES)`
$DIR/cmd/signature-v4-utils_test.go:228:12-228:72: `.Add("x-amz-server-side-encryption", xhttp.AmzEncryptionAES)`
$DIR/cmd/signature-v4-utils_test.go:229:2-229:38: `r.URL.RawQuery = inputQuery.Encode()`
$DIR/cmd/signature-v4-utils_test.go:229:29-229:38: `.Encode()`
$DIR/cmd/signature-v4-utils_test.go:230:2-230:15: `r.ParseForm()`
$DIR/cmd/signature-v4-utils_test.go:230:3-230:15: `.ParseForm()`
$DIR/cmd/signature-v4-utils_test.go:231:2-231:53: `_, errCode = extractSignedHeaders(signedHeaders, r)`
$DIR/cmd/signature-v4-utils_test.go:237:50-237:78: `.Get("x-amz-content-sha256")`
$DIR/cmd/signature-v4-utils_test.go:239:41-239:53: `.Get("host")`
$DIR/cmd/signature-v4-utils_test.go:241:41-241:59: `.Get("x-amz-date")`
$DIR/cmd/signature-v4-utils_test.go:243:43-243:57: `.Get("expect")`
$DIR/cmd/signature-v4-utils_test.go:245:53-245:78: `.Get("transfer-encoding")`
$DIR/cmd/signature-v4-utils_test.go:267:2-267:59: `signedHeaders = append(signedHeaders, "X-Amz-Credential")`
$DIR/cmd/signature-v4-utils_test.go:269:2-269:53: `_, errCode = extractSignedHeaders(signedHeaders, r)`
$DIR/cmd/signature-v4-utils_test.go:275:2-275:36: `signedHeaders = signedHeaders[2:5]`
$DIR/cmd/signature-v4-utils_test.go:277:2-277:53: `_, errCode = extractSignedHeaders(signedHeaders, r)`
$DIR/cmd/signature-v4-utils_test.go:328:17-328:82: `.NewRequest(http.MethodGet, "http://localhost/?"+testCase.q, nil)`
$DIR/cmd/signature-v4-utils_test.go:333:4-333:52: `r.Header.Set("x-amz-content-sha256", testCase.h)`
$DIR/cmd/signature-v4-utils_test.go:333:5-333:52: `.Header.Set("x-amz-content-sha256", testCase.h)`
$DIR/cmd/signature-v4-utils_test.go:335:3-335:16: `r.ParseForm()`
$DIR/cmd/signature-v4-utils_test.go:335:4-335:16: `.ParseForm()`
$DIR/cmd/signature-v4-utils_test.go:353:16-353:75: `.NewRequest(http.MethodPut, "http://play.min.io:9000", nil)`
$DIR/cmd/signature-v4-utils_test.go:360:2-360:54: `inputHeader.Set("X-Amz-Meta-Test", expectedMetaTest)`
$DIR/cmd/signature-v4-utils_test.go:360:13-360:54: `.Set("X-Amz-Meta-Test", expectedMetaTest)`
$DIR/cmd/signature-v4-utils_test.go:361:2-361:64: `inputHeader.Set("X-Amz-Meta-Extension", expectedMetaExtension)`
$DIR/cmd/signature-v4-utils_test.go:361:13-361:64: `.Set("X-Amz-Meta-Extension", expectedMetaExtension)`
$DIR/cmd/signature-v4-utils_test.go:362:2-362:54: `inputHeader.Set("X-Amz-Meta-Name", expectedMetaName)`
$DIR/cmd/signature-v4-utils_test.go:362:13-362:54: `.Set("X-Amz-Meta-Name", expectedMetaName)`
$DIR/cmd/signature-v4-utils_test.go:370:2-370:45: `inputHeader.Set("X-Amz-Meta-Clone", "fail")`
$DIR/cmd/signature-v4-utils_test.go:370:13-370:45: `.Set("X-Amz-Meta-Clone", "fail")`
$DIR/cmd/signature-v4-utils_test.go:372:2-372:49: `errCode = checkMetaHeaders(signedHeadersMap, r)`
$DIR/cmd/signature-v4-utils_test.go:378:2-378:37: `inputHeader.Del("X-Amz-Meta-Clone")`
$DIR/cmd/signature-v4-utils_test.go:378:13-378:37: `.Del("X-Amz-Meta-Clone")`
$DIR/cmd/signature-v4-utils_test.go:380:2-380:49: `errCode = checkMetaHeaders(signedHeadersMap, r)`
$DIR/cmd/signature-v4-utils_test.go:386:2-386:145: `r, err = http.NewRequest(http.MethodPut, "http://play.min.io:9000?x-amz-meta-test=test&x-amz-meta-extension=png&x-amz-meta-name=imagepng", nil)`
$DIR/cmd/signature-v4-utils_test.go:386:15-386:145: `.NewRequest(http.MethodPut, "http://play.min.io:9000?x-amz-meta-test=test&x-amz-meta-extension=png&x-amz-meta-name=imagepng", nil)`
$DIR/cmd/signature-v4-utils_test.go:391:2-391:15: `r.ParseForm()`
$DIR/cmd/signature-v4-utils_test.go:391:3-391:15: `.ParseForm()`
$DIR/cmd/signature-v4-utils_test.go:393:2-393:49: `errCode = checkMetaHeaders(signedHeadersMap, r)`
$DIR/cmd/signature-v4_test.go:56:37-56:137: `.Sprintf(credentialTemplate, "EXAMPLEINVALIDEXAMPL", now.Format(yyyymmdd), globalMinioDefaultRegion)`
$DIR/cmd/signature-v4_test.go:56:93-56:110: `.Format(yyyymmdd)`
$DIR/cmd/signature-v4_test.go:63:37-63:124: `.Sprintf(credentialTemplate, accessKey, now.Format(yyyymmdd), globalMinioDefaultRegion)`
$DIR/cmd/signature-v4_test.go:63:80-63:97: `.Format(yyyymmdd)`
$DIR/cmd/signature-v4_test.go:64:37-64:59: `.Format(iso8601Format)`
$DIR/cmd/signature-v4_test.go:74:9-74:96: `.Sprintf(credentialTemplate, accessKey, now.Format(yyyymmdd), globalMinioDefaultRegion)`
$DIR/cmd/signature-v4_test.go:74:52-74:69: `.Format(yyyymmdd)`
$DIR/cmd/signature-v4_test.go:76:31-76:53: `.Format(iso8601Format)`
$DIR/cmd/signature-v4_test.go:97:24-97:57: `.WithCancel(context.Background())`
$DIR/cmd/signature-v4_test.go:97:43-97:56: `.Background()`
$DIR/cmd/signature-v4_test.go:104:10-104:27: `.RemoveAll(fsDir)`
$DIR/cmd/signature-v4_test.go:131:31-131:53: `.Format(iso8601Format)`
$DIR/cmd/signature-v4_test.go:135:31-135:118: `.Sprintf(credentialTemplate, "Z7IXGOO6BZ0REAN1Q26I", now.Format(yyyymmdd), "us-west-1")`
$DIR/cmd/signature-v4_test.go:135:87-135:104: `.Format(yyyymmdd)`
$DIR/cmd/signature-v4_test.go:144:32-144:54: `.Format(iso8601Format)`
$DIR/cmd/signature-v4_test.go:148:32-148:108: `.Sprintf(credentialTemplate, accessKeyID, now.Format(yyyymmdd), "us-west-1")`
$DIR/cmd/signature-v4_test.go:148:77-148:94: `.Format(yyyymmdd)`
$DIR/cmd/signature-v4_test.go:158:32-158:54: `.Format(iso8601Format)`
$DIR/cmd/signature-v4_test.go:162:32-162:103: `.Sprintf(credentialTemplate, accessKeyID, now.Format(yyyymmdd), region)`
$DIR/cmd/signature-v4_test.go:162:77-162:94: `.Format(yyyymmdd)`
$DIR/cmd/signature-v4_test.go:172:32-172:50: `.AddDate(0, 0, -2)`
$DIR/cmd/signature-v4_test.go:172:50-172:72: `.Format(iso8601Format)`
$DIR/cmd/signature-v4_test.go:176:32-176:103: `.Sprintf(credentialTemplate, accessKeyID, now.Format(yyyymmdd), region)`
$DIR/cmd/signature-v4_test.go:176:77-176:94: `.Format(yyyymmdd)`
$DIR/cmd/signature-v4_test.go:180:32-180:50: `.AddDate(0, 0, -2)`
$DIR/cmd/signature-v4_test.go:180:50-180:72: `.Format(iso8601Format)`
$DIR/cmd/signature-v4_test.go:190:32-190:54: `.Format(iso8601Format)`
$DIR/cmd/signature-v4_test.go:194:32-194:103: `.Sprintf(credentialTemplate, accessKeyID, now.Format(yyyymmdd), region)`
$DIR/cmd/signature-v4_test.go:194:77-194:94: `.Format(yyyymmdd)`
$DIR/cmd/signature-v4_test.go:198:32-198:54: `.Format(iso8601Format)`
$DIR/cmd/signature-v4_test.go:208:32-208:51: `.Add(1 * time.Hour)`
$DIR/cmd/signature-v4_test.go:208:51-208:73: `.Format(iso8601Format)`
$DIR/cmd/signature-v4_test.go:212:32-212:103: `.Sprintf(credentialTemplate, accessKeyID, now.Format(yyyymmdd), region)`
$DIR/cmd/signature-v4_test.go:212:77-212:94: `.Format(yyyymmdd)`
$DIR/cmd/signature-v4_test.go:216:32-216:54: `.Format(iso8601Format)`
$DIR/cmd/signature-v4_test.go:227:32-227:54: `.Format(iso8601Format)`
$DIR/cmd/signature-v4_test.go:231:32-231:103: `.Sprintf(credentialTemplate, accessKeyID, now.Format(yyyymmdd), region)`
$DIR/cmd/signature-v4_test.go:231:77-231:94: `.Format(yyyymmdd)`
$DIR/cmd/signature-v4_test.go:235:32-235:54: `.Format(iso8601Format)`
$DIR/cmd/signature-v4_test.go:246:33-246:55: `.Format(iso8601Format)`
$DIR/cmd/signature-v4_test.go:250:33-250:104: `.Sprintf(credentialTemplate, accessKeyID, now.Format(yyyymmdd), region)`
$DIR/cmd/signature-v4_test.go:250:78-250:95: `.Format(yyyymmdd)`
$DIR/cmd/signature-v4_test.go:255:32-255:54: `.Format(iso8601Format)`
$DIR/cmd/signature-v4_test.go:265:33-265:55: `.Format(iso8601Format)`
$DIR/cmd/signature-v4_test.go:269:33-269:104: `.Sprintf(credentialTemplate, accessKeyID, now.Format(yyyymmdd), region)`
$DIR/cmd/signature-v4_test.go:269:78-269:95: `.Format(yyyymmdd)`
$DIR/cmd/signature-v4_test.go:274:22-274:44: `.Format(iso8601Format)`
$DIR/cmd/signature-v4_test.go:286:4-286:25: `query.Set(key, value)`
$DIR/cmd/signature-v4_test.go:286:9-286:25: `.Set(key, value)`
$DIR/cmd/signature-v4_test.go:290:17-290:84: `.NewRequest(http.MethodGet, "http://host/a/b?"+query.Encode(), nil)`
$DIR/cmd/signature-v4_test.go:290:69-290:78: `.Encode()`
$DIR/cmd/signature-v4_test.go:297:4-297:30: `req.Header.Set(key, value)`
$DIR/cmd/signature-v4_test.go:297:7-297:30: `.Header.Set(key, value)`
$DIR/cmd/signature-v4_test.go:301:3-301:18: `req.ParseForm()`
$DIR/cmd/signature-v4_test.go:301:6-301:18: `.ParseForm()`
$DIR/cmd/site-replication-metrics_gen_test.go:14:15-14:31: `.MarshalMsg(nil)`
$DIR/cmd/site-replication-metrics_gen_test.go:18:16-18:34: `.UnmarshalMsg(bts)`
$DIR/cmd/site-replication-metrics_gen_test.go:26:2-26:28: `left, err = msgp.Skip(bts)`
$DIR/cmd/site-replication-metrics_gen_test.go:73:2-73:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/site-replication-metrics_gen_test.go:73:6-73:23: `.Encode(&buf, &v)`
$DIR/cmd/site-replication-metrics_gen_test.go:75:8-75:18: `.Msgsize()`
$DIR/cmd/site-replication-metrics_gen_test.go:76:8-76:14: `.Len()`
$DIR/cmd/site-replication-metrics_gen_test.go:81:13-81:31: `.Decode(&buf, &vn)`
$DIR/cmd/site-replication-metrics_gen_test.go:86:2-86:13: `buf.Reset()`
$DIR/cmd/site-replication-metrics_gen_test.go:86:5-86:13: `.Reset()`
$DIR/cmd/site-replication-metrics_gen_test.go:87:2-87:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/site-replication-metrics_gen_test.go:87:6-87:23: `.Encode(&buf, &v)`
$DIR/cmd/site-replication-metrics_gen_test.go:88:2-88:35: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/site-replication-metrics_gen_test.go:127:15-127:31: `.MarshalMsg(nil)`
$DIR/cmd/site-replication-metrics_gen_test.go:131:16-131:34: `.UnmarshalMsg(bts)`
$DIR/cmd/site-replication-metrics_gen_test.go:139:2-139:28: `left, err = msgp.Skip(bts)`
$DIR/cmd/site-replication-metrics_gen_test.go:186:2-186:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/site-replication-metrics_gen_test.go:186:6-186:23: `.Encode(&buf, &v)`
$DIR/cmd/site-replication-metrics_gen_test.go:188:8-188:18: `.Msgsize()`
$DIR/cmd/site-replication-metrics_gen_test.go:189:8-189:14: `.Len()`
$DIR/cmd/site-replication-metrics_gen_test.go:194:13-194:31: `.Decode(&buf, &vn)`
$DIR/cmd/site-replication-metrics_gen_test.go:199:2-199:13: `buf.Reset()`
$DIR/cmd/site-replication-metrics_gen_test.go:199:5-199:13: `.Reset()`
$DIR/cmd/site-replication-metrics_gen_test.go:200:2-200:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/site-replication-metrics_gen_test.go:200:6-200:23: `.Encode(&buf, &v)`
$DIR/cmd/site-replication-metrics_gen_test.go:201:2-201:35: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/site-replication-metrics_gen_test.go:240:15-240:31: `.MarshalMsg(nil)`
$DIR/cmd/site-replication-metrics_gen_test.go:244:16-244:34: `.UnmarshalMsg(bts)`
$DIR/cmd/site-replication-metrics_gen_test.go:252:2-252:28: `left, err = msgp.Skip(bts)`
$DIR/cmd/site-replication-metrics_gen_test.go:299:2-299:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/site-replication-metrics_gen_test.go:299:6-299:23: `.Encode(&buf, &v)`
$DIR/cmd/site-replication-metrics_gen_test.go:301:8-301:18: `.Msgsize()`
$DIR/cmd/site-replication-metrics_gen_test.go:302:8-302:14: `.Len()`
$DIR/cmd/site-replication-metrics_gen_test.go:307:13-307:31: `.Decode(&buf, &vn)`
$DIR/cmd/site-replication-metrics_gen_test.go:312:2-312:13: `buf.Reset()`
$DIR/cmd/site-replication-metrics_gen_test.go:312:5-312:13: `.Reset()`
$DIR/cmd/site-replication-metrics_gen_test.go:313:2-313:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/site-replication-metrics_gen_test.go:313:6-313:23: `.Encode(&buf, &v)`
$DIR/cmd/site-replication-metrics_gen_test.go:314:2-314:35: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/site-replication-metrics_gen_test.go:353:15-353:31: `.MarshalMsg(nil)`
$DIR/cmd/site-replication-metrics_gen_test.go:357:16-357:34: `.UnmarshalMsg(bts)`
$DIR/cmd/site-replication-metrics_gen_test.go:365:2-365:28: `left, err = msgp.Skip(bts)`
$DIR/cmd/site-replication-metrics_gen_test.go:412:2-412:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/site-replication-metrics_gen_test.go:412:6-412:23: `.Encode(&buf, &v)`
$DIR/cmd/site-replication-metrics_gen_test.go:414:8-414:18: `.Msgsize()`
$DIR/cmd/site-replication-metrics_gen_test.go:415:8-415:14: `.Len()`
$DIR/cmd/site-replication-metrics_gen_test.go:420:13-420:31: `.Decode(&buf, &vn)`
$DIR/cmd/site-replication-metrics_gen_test.go:425:2-425:13: `buf.Reset()`
$DIR/cmd/site-replication-metrics_gen_test.go:425:5-425:13: `.Reset()`
$DIR/cmd/site-replication-metrics_gen_test.go:426:2-426:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/site-replication-metrics_gen_test.go:426:6-426:23: `.Encode(&buf, &v)`
$DIR/cmd/site-replication-metrics_gen_test.go:427:2-427:35: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/site-replication-metrics_gen_test.go:466:15-466:31: `.MarshalMsg(nil)`
$DIR/cmd/site-replication-metrics_gen_test.go:470:16-470:34: `.UnmarshalMsg(bts)`
$DIR/cmd/site-replication-metrics_gen_test.go:478:2-478:28: `left, err = msgp.Skip(bts)`
$DIR/cmd/site-replication-metrics_gen_test.go:525:2-525:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/site-replication-metrics_gen_test.go:525:6-525:23: `.Encode(&buf, &v)`
$DIR/cmd/site-replication-metrics_gen_test.go:527:8-527:18: `.Msgsize()`
$DIR/cmd/site-replication-metrics_gen_test.go:528:8-528:14: `.Len()`
$DIR/cmd/site-replication-metrics_gen_test.go:533:13-533:31: `.Decode(&buf, &vn)`
$DIR/cmd/site-replication-metrics_gen_test.go:538:2-538:13: `buf.Reset()`
$DIR/cmd/site-replication-metrics_gen_test.go:538:5-538:13: `.Reset()`
$DIR/cmd/site-replication-metrics_gen_test.go:539:2-539:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/site-replication-metrics_gen_test.go:539:6-539:23: `.Encode(&buf, &v)`
$DIR/cmd/site-replication-metrics_gen_test.go:540:2-540:35: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/site-replication-metrics_gen_test.go:579:15-579:31: `.MarshalMsg(nil)`
$DIR/cmd/site-replication-metrics_gen_test.go:583:16-583:34: `.UnmarshalMsg(bts)`
$DIR/cmd/site-replication-metrics_gen_test.go:591:2-591:28: `left, err = msgp.Skip(bts)`
$DIR/cmd/site-replication-metrics_gen_test.go:638:2-638:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/site-replication-metrics_gen_test.go:638:6-638:23: `.Encode(&buf, &v)`
$DIR/cmd/site-replication-metrics_gen_test.go:640:8-640:18: `.Msgsize()`
$DIR/cmd/site-replication-metrics_gen_test.go:641:8-641:14: `.Len()`
$DIR/cmd/site-replication-metrics_gen_test.go:646:13-646:31: `.Decode(&buf, &vn)`
$DIR/cmd/site-replication-metrics_gen_test.go:651:2-651:13: `buf.Reset()`
$DIR/cmd/site-replication-metrics_gen_test.go:651:5-651:13: `.Reset()`
$DIR/cmd/site-replication-metrics_gen_test.go:652:2-652:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/site-replication-metrics_gen_test.go:652:6-652:23: `.Encode(&buf, &v)`
$DIR/cmd/site-replication-metrics_gen_test.go:653:2-653:35: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/site-replication-utils_gen_test.go:14:15-14:31: `.MarshalMsg(nil)`
$DIR/cmd/site-replication-utils_gen_test.go:18:16-18:34: `.UnmarshalMsg(bts)`
$DIR/cmd/site-replication-utils_gen_test.go:26:2-26:28: `left, err = msgp.Skip(bts)`
$DIR/cmd/site-replication-utils_gen_test.go:73:2-73:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/site-replication-utils_gen_test.go:73:6-73:23: `.Encode(&buf, &v)`
$DIR/cmd/site-replication-utils_gen_test.go:75:8-75:18: `.Msgsize()`
$DIR/cmd/site-replication-utils_gen_test.go:76:8-76:14: `.Len()`
$DIR/cmd/site-replication-utils_gen_test.go:81:13-81:31: `.Decode(&buf, &vn)`
$DIR/cmd/site-replication-utils_gen_test.go:86:2-86:13: `buf.Reset()`
$DIR/cmd/site-replication-utils_gen_test.go:86:5-86:13: `.Reset()`
$DIR/cmd/site-replication-utils_gen_test.go:87:2-87:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/site-replication-utils_gen_test.go:87:6-87:23: `.Encode(&buf, &v)`
$DIR/cmd/site-replication-utils_gen_test.go:88:2-88:35: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/site-replication_test.go:42:7-42:47: `.CreateStringSet("dep1", "dep2", "dep3")`
$DIR/cmd/site-replication_test.go:43:7-43:31: `.CreateStringSet("dep1")`
$DIR/cmd/site-replication_test.go:49:7-49:47: `.CreateStringSet("dep1", "dep2", "dep3")`
$DIR/cmd/site-replication_test.go:50:7-50:55: `.CreateStringSet("dep1", "dep2", "dep3", "dep4")`
$DIR/cmd/site-replication_test.go:56:7-56:25: `.CreateStringSet()`
$DIR/cmd/site-replication_test.go:57:7-57:55: `.CreateStringSet("dep1", "dep2", "dep3", "dep4")`
$DIR/cmd/storage-datatypes_gen_test.go:14:15-14:31: `.MarshalMsg(nil)`
$DIR/cmd/storage-datatypes_gen_test.go:18:16-18:34: `.UnmarshalMsg(bts)`
$DIR/cmd/storage-datatypes_gen_test.go:26:2-26:28: `left, err = msgp.Skip(bts)`
$DIR/cmd/storage-datatypes_gen_test.go:73:2-73:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go:73:6-73:23: `.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go:75:8-75:18: `.Msgsize()`
$DIR/cmd/storage-datatypes_gen_test.go:76:8-76:14: `.Len()`
$DIR/cmd/storage-datatypes_gen_test.go:81:13-81:31: `.Decode(&buf, &vn)`
$DIR/cmd/storage-datatypes_gen_test.go:86:2-86:13: `buf.Reset()`
$DIR/cmd/storage-datatypes_gen_test.go:86:5-86:13: `.Reset()`
$DIR/cmd/storage-datatypes_gen_test.go:87:2-87:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go:87:6-87:23: `.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go:88:2-88:35: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/storage-datatypes_gen_test.go:127:15-127:31: `.MarshalMsg(nil)`
$DIR/cmd/storage-datatypes_gen_test.go:131:16-131:34: `.UnmarshalMsg(bts)`
$DIR/cmd/storage-datatypes_gen_test.go:139:2-139:28: `left, err = msgp.Skip(bts)`
$DIR/cmd/storage-datatypes_gen_test.go:186:2-186:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go:186:6-186:23: `.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go:188:8-188:18: `.Msgsize()`
$DIR/cmd/storage-datatypes_gen_test.go:189:8-189:14: `.Len()`
$DIR/cmd/storage-datatypes_gen_test.go:194:13-194:31: `.Decode(&buf, &vn)`
$DIR/cmd/storage-datatypes_gen_test.go:199:2-199:13: `buf.Reset()`
$DIR/cmd/storage-datatypes_gen_test.go:199:5-199:13: `.Reset()`
$DIR/cmd/storage-datatypes_gen_test.go:200:2-200:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go:200:6-200:23: `.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go:201:2-201:35: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/storage-datatypes_gen_test.go:240:15-240:31: `.MarshalMsg(nil)`
$DIR/cmd/storage-datatypes_gen_test.go:244:16-244:34: `.UnmarshalMsg(bts)`
$DIR/cmd/storage-datatypes_gen_test.go:252:2-252:28: `left, err = msgp.Skip(bts)`
$DIR/cmd/storage-datatypes_gen_test.go:299:2-299:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go:299:6-299:23: `.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go:301:8-301:18: `.Msgsize()`
$DIR/cmd/storage-datatypes_gen_test.go:302:8-302:14: `.Len()`
$DIR/cmd/storage-datatypes_gen_test.go:307:13-307:31: `.Decode(&buf, &vn)`
$DIR/cmd/storage-datatypes_gen_test.go:312:2-312:13: `buf.Reset()`
$DIR/cmd/storage-datatypes_gen_test.go:312:5-312:13: `.Reset()`
$DIR/cmd/storage-datatypes_gen_test.go:313:2-313:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go:313:6-313:23: `.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go:314:2-314:35: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/storage-datatypes_gen_test.go:353:15-353:31: `.MarshalMsg(nil)`
$DIR/cmd/storage-datatypes_gen_test.go:357:16-357:34: `.UnmarshalMsg(bts)`
$DIR/cmd/storage-datatypes_gen_test.go:365:2-365:28: `left, err = msgp.Skip(bts)`
$DIR/cmd/storage-datatypes_gen_test.go:412:2-412:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go:412:6-412:23: `.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go:414:8-414:18: `.Msgsize()`
$DIR/cmd/storage-datatypes_gen_test.go:415:8-415:14: `.Len()`
$DIR/cmd/storage-datatypes_gen_test.go:420:13-420:31: `.Decode(&buf, &vn)`
$DIR/cmd/storage-datatypes_gen_test.go:425:2-425:13: `buf.Reset()`
$DIR/cmd/storage-datatypes_gen_test.go:425:5-425:13: `.Reset()`
$DIR/cmd/storage-datatypes_gen_test.go:426:2-426:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go:426:6-426:23: `.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go:427:2-427:35: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/storage-datatypes_gen_test.go:466:15-466:31: `.MarshalMsg(nil)`
$DIR/cmd/storage-datatypes_gen_test.go:470:16-470:34: `.UnmarshalMsg(bts)`
$DIR/cmd/storage-datatypes_gen_test.go:478:2-478:28: `left, err = msgp.Skip(bts)`
$DIR/cmd/storage-datatypes_gen_test.go:525:2-525:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go:525:6-525:23: `.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go:527:8-527:18: `.Msgsize()`
$DIR/cmd/storage-datatypes_gen_test.go:528:8-528:14: `.Len()`
$DIR/cmd/storage-datatypes_gen_test.go:533:13-533:31: `.Decode(&buf, &vn)`
$DIR/cmd/storage-datatypes_gen_test.go:538:2-538:13: `buf.Reset()`
$DIR/cmd/storage-datatypes_gen_test.go:538:5-538:13: `.Reset()`
$DIR/cmd/storage-datatypes_gen_test.go:539:2-539:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go:539:6-539:23: `.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go:540:2-540:35: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/storage-datatypes_gen_test.go:579:15-579:31: `.MarshalMsg(nil)`
$DIR/cmd/storage-datatypes_gen_test.go:583:16-583:34: `.UnmarshalMsg(bts)`
$DIR/cmd/storage-datatypes_gen_test.go:591:2-591:28: `left, err = msgp.Skip(bts)`
$DIR/cmd/storage-datatypes_gen_test.go:638:2-638:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go:638:6-638:23: `.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go:640:8-640:18: `.Msgsize()`
$DIR/cmd/storage-datatypes_gen_test.go:641:8-641:14: `.Len()`
$DIR/cmd/storage-datatypes_gen_test.go:646:13-646:31: `.Decode(&buf, &vn)`
$DIR/cmd/storage-datatypes_gen_test.go:651:2-651:13: `buf.Reset()`
$DIR/cmd/storage-datatypes_gen_test.go:651:5-651:13: `.Reset()`
$DIR/cmd/storage-datatypes_gen_test.go:652:2-652:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go:652:6-652:23: `.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go:653:2-653:35: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/storage-datatypes_gen_test.go:692:15-692:31: `.MarshalMsg(nil)`
$DIR/cmd/storage-datatypes_gen_test.go:696:16-696:34: `.UnmarshalMsg(bts)`
$DIR/cmd/storage-datatypes_gen_test.go:704:2-704:28: `left, err = msgp.Skip(bts)`
$DIR/cmd/storage-datatypes_gen_test.go:751:2-751:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go:751:6-751:23: `.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go:753:8-753:18: `.Msgsize()`
$DIR/cmd/storage-datatypes_gen_test.go:754:8-754:14: `.Len()`
$DIR/cmd/storage-datatypes_gen_test.go:759:13-759:31: `.Decode(&buf, &vn)`
$DIR/cmd/storage-datatypes_gen_test.go:764:2-764:13: `buf.Reset()`
$DIR/cmd/storage-datatypes_gen_test.go:764:5-764:13: `.Reset()`
$DIR/cmd/storage-datatypes_gen_test.go:765:2-765:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go:765:6-765:23: `.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go:766:2-766:35: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/storage-datatypes_gen_test.go:805:15-805:31: `.MarshalMsg(nil)`
$DIR/cmd/storage-datatypes_gen_test.go:809:16-809:34: `.UnmarshalMsg(bts)`
$DIR/cmd/storage-datatypes_gen_test.go:817:2-817:28: `left, err = msgp.Skip(bts)`
$DIR/cmd/storage-datatypes_gen_test.go:864:2-864:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go:864:6-864:23: `.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go:866:8-866:18: `.Msgsize()`
$DIR/cmd/storage-datatypes_gen_test.go:867:8-867:14: `.Len()`
$DIR/cmd/storage-datatypes_gen_test.go:872:13-872:31: `.Decode(&buf, &vn)`
$DIR/cmd/storage-datatypes_gen_test.go:877:2-877:13: `buf.Reset()`
$DIR/cmd/storage-datatypes_gen_test.go:877:5-877:13: `.Reset()`
$DIR/cmd/storage-datatypes_gen_test.go:878:2-878:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go:878:6-878:23: `.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go:879:2-879:35: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/storage-datatypes_gen_test.go:918:15-918:31: `.MarshalMsg(nil)`
$DIR/cmd/storage-datatypes_gen_test.go:922:16-922:34: `.UnmarshalMsg(bts)`
$DIR/cmd/storage-datatypes_gen_test.go:930:2-930:28: `left, err = msgp.Skip(bts)`
$DIR/cmd/storage-datatypes_gen_test.go:977:2-977:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go:977:6-977:23: `.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go:979:8-979:18: `.Msgsize()`
$DIR/cmd/storage-datatypes_gen_test.go:980:8-980:14: `.Len()`
$DIR/cmd/storage-datatypes_gen_test.go:985:13-985:31: `.Decode(&buf, &vn)`
$DIR/cmd/storage-datatypes_gen_test.go:990:2-990:13: `buf.Reset()`
$DIR/cmd/storage-datatypes_gen_test.go:990:5-990:13: `.Reset()`
$DIR/cmd/storage-datatypes_gen_test.go:991:2-991:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go:991:6-991:23: `.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go:992:2-992:35: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/storage-datatypes_gen_test.go:1031:15-1031:31: `.MarshalMsg(nil)`
$DIR/cmd/storage-datatypes_gen_test.go:1035:16-1035:34: `.UnmarshalMsg(bts)`
$DIR/cmd/storage-datatypes_gen_test.go:1043:2-1043:28: `left, err = msgp.Skip(bts)`
$DIR/cmd/storage-datatypes_gen_test.go:1090:2-1090:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go:1090:6-1090:23: `.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go:1092:8-1092:18: `.Msgsize()`
$DIR/cmd/storage-datatypes_gen_test.go:1093:8-1093:14: `.Len()`
$DIR/cmd/storage-datatypes_gen_test.go:1098:13-1098:31: `.Decode(&buf, &vn)`
$DIR/cmd/storage-datatypes_gen_test.go:1103:2-1103:13: `buf.Reset()`
$DIR/cmd/storage-datatypes_gen_test.go:1103:5-1103:13: `.Reset()`
$DIR/cmd/storage-datatypes_gen_test.go:1104:2-1104:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go:1104:6-1104:23: `.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go:1105:2-1105:35: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/storage-datatypes_gen_test.go:1144:15-1144:31: `.MarshalMsg(nil)`
$DIR/cmd/storage-datatypes_gen_test.go:1148:16-1148:34: `.UnmarshalMsg(bts)`
$DIR/cmd/storage-datatypes_gen_test.go:1156:2-1156:28: `left, err = msgp.Skip(bts)`
$DIR/cmd/storage-datatypes_gen_test.go:1203:2-1203:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go:1203:6-1203:23: `.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go:1205:8-1205:18: `.Msgsize()`
$DIR/cmd/storage-datatypes_gen_test.go:1206:8-1206:14: `.Len()`
$DIR/cmd/storage-datatypes_gen_test.go:1211:13-1211:31: `.Decode(&buf, &vn)`
$DIR/cmd/storage-datatypes_gen_test.go:1216:2-1216:13: `buf.Reset()`
$DIR/cmd/storage-datatypes_gen_test.go:1216:5-1216:13: `.Reset()`
$DIR/cmd/storage-datatypes_gen_test.go:1217:2-1217:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go:1217:6-1217:23: `.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go:1218:2-1218:35: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/storage-datatypes_gen_test.go:1257:15-1257:31: `.MarshalMsg(nil)`
$DIR/cmd/storage-datatypes_gen_test.go:1261:16-1261:34: `.UnmarshalMsg(bts)`
$DIR/cmd/storage-datatypes_gen_test.go:1269:2-1269:28: `left, err = msgp.Skip(bts)`
$DIR/cmd/storage-datatypes_gen_test.go:1316:2-1316:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go:1316:6-1316:23: `.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go:1318:8-1318:18: `.Msgsize()`
$DIR/cmd/storage-datatypes_gen_test.go:1319:8-1319:14: `.Len()`
$DIR/cmd/storage-datatypes_gen_test.go:1324:13-1324:31: `.Decode(&buf, &vn)`
$DIR/cmd/storage-datatypes_gen_test.go:1329:2-1329:13: `buf.Reset()`
$DIR/cmd/storage-datatypes_gen_test.go:1329:5-1329:13: `.Reset()`
$DIR/cmd/storage-datatypes_gen_test.go:1330:2-1330:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go:1330:6-1330:23: `.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go:1331:2-1331:35: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/storage-datatypes_gen_test.go:1370:15-1370:31: `.MarshalMsg(nil)`
$DIR/cmd/storage-datatypes_gen_test.go:1374:16-1374:34: `.UnmarshalMsg(bts)`
$DIR/cmd/storage-datatypes_gen_test.go:1382:2-1382:28: `left, err = msgp.Skip(bts)`
$DIR/cmd/storage-datatypes_gen_test.go:1429:2-1429:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go:1429:6-1429:23: `.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go:1431:8-1431:18: `.Msgsize()`
$DIR/cmd/storage-datatypes_gen_test.go:1432:8-1432:14: `.Len()`
$DIR/cmd/storage-datatypes_gen_test.go:1437:13-1437:31: `.Decode(&buf, &vn)`
$DIR/cmd/storage-datatypes_gen_test.go:1442:2-1442:13: `buf.Reset()`
$DIR/cmd/storage-datatypes_gen_test.go:1442:5-1442:13: `.Reset()`
$DIR/cmd/storage-datatypes_gen_test.go:1443:2-1443:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go:1443:6-1443:23: `.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go:1444:2-1444:35: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/storage-datatypes_gen_test.go:1483:15-1483:31: `.MarshalMsg(nil)`
$DIR/cmd/storage-datatypes_gen_test.go:1487:16-1487:34: `.UnmarshalMsg(bts)`
$DIR/cmd/storage-datatypes_gen_test.go:1495:2-1495:28: `left, err = msgp.Skip(bts)`
$DIR/cmd/storage-datatypes_gen_test.go:1542:2-1542:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go:1542:6-1542:23: `.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go:1544:8-1544:18: `.Msgsize()`
$DIR/cmd/storage-datatypes_gen_test.go:1545:8-1545:14: `.Len()`
$DIR/cmd/storage-datatypes_gen_test.go:1550:13-1550:31: `.Decode(&buf, &vn)`
$DIR/cmd/storage-datatypes_gen_test.go:1555:2-1555:13: `buf.Reset()`
$DIR/cmd/storage-datatypes_gen_test.go:1555:5-1555:13: `.Reset()`
$DIR/cmd/storage-datatypes_gen_test.go:1556:2-1556:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go:1556:6-1556:23: `.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go:1557:2-1557:35: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/storage-datatypes_gen_test.go:1596:15-1596:31: `.MarshalMsg(nil)`
$DIR/cmd/storage-datatypes_gen_test.go:1600:16-1600:34: `.UnmarshalMsg(bts)`
$DIR/cmd/storage-datatypes_gen_test.go:1608:2-1608:28: `left, err = msgp.Skip(bts)`
$DIR/cmd/storage-datatypes_gen_test.go:1655:2-1655:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go:1655:6-1655:23: `.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go:1657:8-1657:18: `.Msgsize()`
$DIR/cmd/storage-datatypes_gen_test.go:1658:8-1658:14: `.Len()`
$DIR/cmd/storage-datatypes_gen_test.go:1663:13-1663:31: `.Decode(&buf, &vn)`
$DIR/cmd/storage-datatypes_gen_test.go:1668:2-1668:13: `buf.Reset()`
$DIR/cmd/storage-datatypes_gen_test.go:1668:5-1668:13: `.Reset()`
$DIR/cmd/storage-datatypes_gen_test.go:1669:2-1669:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go:1669:6-1669:23: `.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go:1670:2-1670:35: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/storage-datatypes_gen_test.go:1709:15-1709:31: `.MarshalMsg(nil)`
$DIR/cmd/storage-datatypes_gen_test.go:1713:16-1713:34: `.UnmarshalMsg(bts)`
$DIR/cmd/storage-datatypes_gen_test.go:1721:2-1721:28: `left, err = msgp.Skip(bts)`
$DIR/cmd/storage-datatypes_gen_test.go:1768:2-1768:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go:1768:6-1768:23: `.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go:1770:8-1770:18: `.Msgsize()`
$DIR/cmd/storage-datatypes_gen_test.go:1771:8-1771:14: `.Len()`
$DIR/cmd/storage-datatypes_gen_test.go:1776:13-1776:31: `.Decode(&buf, &vn)`
$DIR/cmd/storage-datatypes_gen_test.go:1781:2-1781:13: `buf.Reset()`
$DIR/cmd/storage-datatypes_gen_test.go:1781:5-1781:13: `.Reset()`
$DIR/cmd/storage-datatypes_gen_test.go:1782:2-1782:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go:1782:6-1782:23: `.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go:1783:2-1783:35: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/storage-datatypes_gen_test.go:1822:15-1822:31: `.MarshalMsg(nil)`
$DIR/cmd/storage-datatypes_gen_test.go:1826:16-1826:34: `.UnmarshalMsg(bts)`
$DIR/cmd/storage-datatypes_gen_test.go:1834:2-1834:28: `left, err = msgp.Skip(bts)`
$DIR/cmd/storage-datatypes_gen_test.go:1881:2-1881:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go:1881:6-1881:23: `.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go:1883:8-1883:18: `.Msgsize()`
$DIR/cmd/storage-datatypes_gen_test.go:1884:8-1884:14: `.Len()`
$DIR/cmd/storage-datatypes_gen_test.go:1889:13-1889:31: `.Decode(&buf, &vn)`
$DIR/cmd/storage-datatypes_gen_test.go:1894:2-1894:13: `buf.Reset()`
$DIR/cmd/storage-datatypes_gen_test.go:1894:5-1894:13: `.Reset()`
$DIR/cmd/storage-datatypes_gen_test.go:1895:2-1895:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go:1895:6-1895:23: `.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go:1896:2-1896:35: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/storage-datatypes_gen_test.go:1935:15-1935:31: `.MarshalMsg(nil)`
$DIR/cmd/storage-datatypes_gen_test.go:1939:16-1939:34: `.UnmarshalMsg(bts)`
$DIR/cmd/storage-datatypes_gen_test.go:1947:2-1947:28: `left, err = msgp.Skip(bts)`
$DIR/cmd/storage-datatypes_gen_test.go:1994:2-1994:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go:1994:6-1994:23: `.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go:1996:8-1996:18: `.Msgsize()`
$DIR/cmd/storage-datatypes_gen_test.go:1997:8-1997:14: `.Len()`
$DIR/cmd/storage-datatypes_gen_test.go:2002:13-2002:31: `.Decode(&buf, &vn)`
$DIR/cmd/storage-datatypes_gen_test.go:2007:2-2007:13: `buf.Reset()`
$DIR/cmd/storage-datatypes_gen_test.go:2007:5-2007:13: `.Reset()`
$DIR/cmd/storage-datatypes_gen_test.go:2008:2-2008:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go:2008:6-2008:23: `.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go:2009:2-2009:35: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/storage-datatypes_gen_test.go:2048:15-2048:31: `.MarshalMsg(nil)`
$DIR/cmd/storage-datatypes_gen_test.go:2052:16-2052:34: `.UnmarshalMsg(bts)`
$DIR/cmd/storage-datatypes_gen_test.go:2060:2-2060:28: `left, err = msgp.Skip(bts)`
$DIR/cmd/storage-datatypes_gen_test.go:2107:2-2107:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go:2107:6-2107:23: `.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go:2109:8-2109:18: `.Msgsize()`
$DIR/cmd/storage-datatypes_gen_test.go:2110:8-2110:14: `.Len()`
$DIR/cmd/storage-datatypes_gen_test.go:2115:13-2115:31: `.Decode(&buf, &vn)`
$DIR/cmd/storage-datatypes_gen_test.go:2120:2-2120:13: `buf.Reset()`
$DIR/cmd/storage-datatypes_gen_test.go:2120:5-2120:13: `.Reset()`
$DIR/cmd/storage-datatypes_gen_test.go:2121:2-2121:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go:2121:6-2121:23: `.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go:2122:2-2122:35: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/storage-datatypes_gen_test.go:2161:15-2161:31: `.MarshalMsg(nil)`
$DIR/cmd/storage-datatypes_gen_test.go:2165:16-2165:34: `.UnmarshalMsg(bts)`
$DIR/cmd/storage-datatypes_gen_test.go:2173:2-2173:28: `left, err = msgp.Skip(bts)`
$DIR/cmd/storage-datatypes_gen_test.go:2220:2-2220:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go:2220:6-2220:23: `.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go:2222:8-2222:18: `.Msgsize()`
$DIR/cmd/storage-datatypes_gen_test.go:2223:8-2223:14: `.Len()`
$DIR/cmd/storage-datatypes_gen_test.go:2228:13-2228:31: `.Decode(&buf, &vn)`
$DIR/cmd/storage-datatypes_gen_test.go:2233:2-2233:13: `buf.Reset()`
$DIR/cmd/storage-datatypes_gen_test.go:2233:5-2233:13: `.Reset()`
$DIR/cmd/storage-datatypes_gen_test.go:2234:2-2234:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go:2234:6-2234:23: `.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go:2235:2-2235:35: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/storage-datatypes_gen_test.go:2274:15-2274:31: `.MarshalMsg(nil)`
$DIR/cmd/storage-datatypes_gen_test.go:2278:16-2278:34: `.UnmarshalMsg(bts)`
$DIR/cmd/storage-datatypes_gen_test.go:2286:2-2286:28: `left, err = msgp.Skip(bts)`
$DIR/cmd/storage-datatypes_gen_test.go:2333:2-2333:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go:2333:6-2333:23: `.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go:2335:8-2335:18: `.Msgsize()`
$DIR/cmd/storage-datatypes_gen_test.go:2336:8-2336:14: `.Len()`
$DIR/cmd/storage-datatypes_gen_test.go:2341:13-2341:31: `.Decode(&buf, &vn)`
$DIR/cmd/storage-datatypes_gen_test.go:2346:2-2346:13: `buf.Reset()`
$DIR/cmd/storage-datatypes_gen_test.go:2346:5-2346:13: `.Reset()`
$DIR/cmd/storage-datatypes_gen_test.go:2347:2-2347:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go:2347:6-2347:23: `.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go:2348:2-2348:35: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/storage-datatypes_gen_test.go:2387:15-2387:31: `.MarshalMsg(nil)`
$DIR/cmd/storage-datatypes_gen_test.go:2391:16-2391:34: `.UnmarshalMsg(bts)`
$DIR/cmd/storage-datatypes_gen_test.go:2399:2-2399:28: `left, err = msgp.Skip(bts)`
$DIR/cmd/storage-datatypes_gen_test.go:2446:2-2446:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go:2446:6-2446:23: `.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go:2448:8-2448:18: `.Msgsize()`
$DIR/cmd/storage-datatypes_gen_test.go:2449:8-2449:14: `.Len()`
$DIR/cmd/storage-datatypes_gen_test.go:2454:13-2454:31: `.Decode(&buf, &vn)`
$DIR/cmd/storage-datatypes_gen_test.go:2459:2-2459:13: `buf.Reset()`
$DIR/cmd/storage-datatypes_gen_test.go:2459:5-2459:13: `.Reset()`
$DIR/cmd/storage-datatypes_gen_test.go:2460:2-2460:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go:2460:6-2460:23: `.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go:2461:2-2461:35: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/storage-datatypes_gen_test.go:2500:15-2500:31: `.MarshalMsg(nil)`
$DIR/cmd/storage-datatypes_gen_test.go:2504:16-2504:34: `.UnmarshalMsg(bts)`
$DIR/cmd/storage-datatypes_gen_test.go:2512:2-2512:28: `left, err = msgp.Skip(bts)`
$DIR/cmd/storage-datatypes_gen_test.go:2559:2-2559:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go:2559:6-2559:23: `.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go:2561:8-2561:18: `.Msgsize()`
$DIR/cmd/storage-datatypes_gen_test.go:2562:8-2562:14: `.Len()`
$DIR/cmd/storage-datatypes_gen_test.go:2567:13-2567:31: `.Decode(&buf, &vn)`
$DIR/cmd/storage-datatypes_gen_test.go:2572:2-2572:13: `buf.Reset()`
$DIR/cmd/storage-datatypes_gen_test.go:2572:5-2572:13: `.Reset()`
$DIR/cmd/storage-datatypes_gen_test.go:2573:2-2573:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go:2573:6-2573:23: `.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go:2574:2-2574:35: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/storage-datatypes_gen_test.go:2613:15-2613:31: `.MarshalMsg(nil)`
$DIR/cmd/storage-datatypes_gen_test.go:2617:16-2617:34: `.UnmarshalMsg(bts)`
$DIR/cmd/storage-datatypes_gen_test.go:2625:2-2625:28: `left, err = msgp.Skip(bts)`
$DIR/cmd/storage-datatypes_gen_test.go:2672:2-2672:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go:2672:6-2672:23: `.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go:2674:8-2674:18: `.Msgsize()`
$DIR/cmd/storage-datatypes_gen_test.go:2675:8-2675:14: `.Len()`
$DIR/cmd/storage-datatypes_gen_test.go:2680:13-2680:31: `.Decode(&buf, &vn)`
$DIR/cmd/storage-datatypes_gen_test.go:2685:2-2685:13: `buf.Reset()`
$DIR/cmd/storage-datatypes_gen_test.go:2685:5-2685:13: `.Reset()`
$DIR/cmd/storage-datatypes_gen_test.go:2686:2-2686:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go:2686:6-2686:23: `.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go:2687:2-2687:35: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/storage-datatypes_gen_test.go:2726:15-2726:31: `.MarshalMsg(nil)`
$DIR/cmd/storage-datatypes_gen_test.go:2730:16-2730:34: `.UnmarshalMsg(bts)`
$DIR/cmd/storage-datatypes_gen_test.go:2738:2-2738:28: `left, err = msgp.Skip(bts)`
$DIR/cmd/storage-datatypes_gen_test.go:2785:2-2785:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go:2785:6-2785:23: `.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go:2787:8-2787:18: `.Msgsize()`
$DIR/cmd/storage-datatypes_gen_test.go:2788:8-2788:14: `.Len()`
$DIR/cmd/storage-datatypes_gen_test.go:2793:13-2793:31: `.Decode(&buf, &vn)`
$DIR/cmd/storage-datatypes_gen_test.go:2798:2-2798:13: `buf.Reset()`
$DIR/cmd/storage-datatypes_gen_test.go:2798:5-2798:13: `.Reset()`
$DIR/cmd/storage-datatypes_gen_test.go:2799:2-2799:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go:2799:6-2799:23: `.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go:2800:2-2800:35: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/storage-datatypes_gen_test.go:2839:15-2839:31: `.MarshalMsg(nil)`
$DIR/cmd/storage-datatypes_gen_test.go:2843:16-2843:34: `.UnmarshalMsg(bts)`
$DIR/cmd/storage-datatypes_gen_test.go:2851:2-2851:28: `left, err = msgp.Skip(bts)`
$DIR/cmd/storage-datatypes_gen_test.go:2898:2-2898:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go:2898:6-2898:23: `.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go:2900:8-2900:18: `.Msgsize()`
$DIR/cmd/storage-datatypes_gen_test.go:2901:8-2901:14: `.Len()`
$DIR/cmd/storage-datatypes_gen_test.go:2906:13-2906:31: `.Decode(&buf, &vn)`
$DIR/cmd/storage-datatypes_gen_test.go:2911:2-2911:13: `buf.Reset()`
$DIR/cmd/storage-datatypes_gen_test.go:2911:5-2911:13: `.Reset()`
$DIR/cmd/storage-datatypes_gen_test.go:2912:2-2912:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go:2912:6-2912:23: `.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go:2913:2-2913:35: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/storage-rest-common_gen_test.go:14:15-14:31: `.MarshalMsg(nil)`
$DIR/cmd/storage-rest-common_gen_test.go:18:16-18:34: `.UnmarshalMsg(bts)`
$DIR/cmd/storage-rest-common_gen_test.go:26:2-26:28: `left, err = msgp.Skip(bts)`
$DIR/cmd/storage-rest-common_gen_test.go:73:2-73:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/storage-rest-common_gen_test.go:73:6-73:23: `.Encode(&buf, &v)`
$DIR/cmd/storage-rest-common_gen_test.go:75:8-75:18: `.Msgsize()`
$DIR/cmd/storage-rest-common_gen_test.go:76:8-76:14: `.Len()`
$DIR/cmd/storage-rest-common_gen_test.go:81:13-81:31: `.Decode(&buf, &vn)`
$DIR/cmd/storage-rest-common_gen_test.go:86:2-86:13: `buf.Reset()`
$DIR/cmd/storage-rest-common_gen_test.go:86:5-86:13: `.Reset()`
$DIR/cmd/storage-rest-common_gen_test.go:87:2-87:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/storage-rest-common_gen_test.go:87:6-87:23: `.Encode(&buf, &v)`
$DIR/cmd/storage-rest-common_gen_test.go:88:2-88:35: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/storage-rest-common_gen_test.go:127:15-127:31: `.MarshalMsg(nil)`
$DIR/cmd/storage-rest-common_gen_test.go:131:16-131:34: `.UnmarshalMsg(bts)`
$DIR/cmd/storage-rest-common_gen_test.go:139:2-139:28: `left, err = msgp.Skip(bts)`
$DIR/cmd/storage-rest-common_gen_test.go:186:2-186:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/storage-rest-common_gen_test.go:186:6-186:23: `.Encode(&buf, &v)`
$DIR/cmd/storage-rest-common_gen_test.go:188:8-188:18: `.Msgsize()`
$DIR/cmd/storage-rest-common_gen_test.go:189:8-189:14: `.Len()`
$DIR/cmd/storage-rest-common_gen_test.go:194:13-194:31: `.Decode(&buf, &vn)`
$DIR/cmd/storage-rest-common_gen_test.go:199:2-199:13: `buf.Reset()`
$DIR/cmd/storage-rest-common_gen_test.go:199:5-199:13: `.Reset()`
$DIR/cmd/storage-rest-common_gen_test.go:200:2-200:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/storage-rest-common_gen_test.go:200:6-200:23: `.Encode(&buf, &v)`
$DIR/cmd/storage-rest-common_gen_test.go:201:2-201:35: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/streaming-signature-v4_test.go:31:2-36:3: `type testCase struct {
		reader         *bufio.Reader
		expectedErr    error
		chunkSize      []byte
		chunkSignature []byte
	}`
$DIR/cmd/streaming-signature-v4_test.go:40:8-40:82: `.NewReader([]byte("1000;chunk-signature=111123333333333333334444211\r\n"))`
$DIR/cmd/streaming-signature-v4_test.go:42:8-42:35: `.NewReader([]byte("1000;"))`
$DIR/cmd/streaming-signature-v4_test.go:44:8-44:52: `.NewReader([]byte(fmt.Sprintf("%4097d", 1)))`
$DIR/cmd/streaming-signature-v4_test.go:44:29-44:50: `.Sprintf("%4097d", 1)`
$DIR/cmd/streaming-signature-v4_test.go:46:8-46:82: `.NewReader([]byte("1000;chunk-signature=111123333333333333334444211\r\n"))`
$DIR/cmd/streaming-signature-v4_test.go:51:9-51:39: `.NewReaderSize(readers[0], 16)`
$DIR/cmd/streaming-signature-v4_test.go:58:9-58:31: `.NewReader(readers[1])`
$DIR/cmd/streaming-signature-v4_test.go:65:9-65:31: `.NewReader(readers[2])`
$DIR/cmd/streaming-signature-v4_test.go:72:9-72:31: `.NewReader(readers[3])`
$DIR/cmd/streaming-signature-v4_test.go:84:12-84:43: `.Equal(chunkSize, tt.chunkSize)`
$DIR/cmd/streaming-signature-v4_test.go:87:12-87:53: `.Equal(chunkSignature, tt.chunkSignature)`
$DIR/cmd/streaming-signature-v4_test.go:95:2-99:3: `type testCase struct {
		buf       []byte
		chunkSize []byte
		chunkSign []byte
	}`
$DIR/cmd/streaming-signature-v4_test.go:131:12-131:46: `.Equal(hexChunkSize, tt.chunkSize)`
$DIR/cmd/streaming-signature-v4_test.go:134:12-134:51: `.Equal(hexChunkSignature, tt.chunkSign)`
$DIR/cmd/streaming-signature-v4_test.go:142:2-145:3: `type testCase struct {
		reader      io.Reader
		expectedErr error
	}`
$DIR/cmd/streaming-signature-v4_test.go:148:9-148:35: `.NewReader([]byte("\r\n"))`
$DIR/cmd/streaming-signature-v4_test.go:150:9-150:33: `.NewReader([]byte("he"))`
$DIR/cmd/streaming-signature-v4_test.go:152:9-152:37: `.NewReader([]byte("he\r\n"))`
$DIR/cmd/streaming-signature-v4_test.go:154:9-154:32: `.NewReader([]byte("h"))`
$DIR/cmd/streaming-signature-v4_test.go:166:2-170:3: `type testCase struct {
		in      string
		want    uint64
		wantErr string
	}`
$DIR/cmd/streaming-signature-v4_test.go:183:3-183:69: `tests = append(tests, testCase{in: fmt.Sprintf("%x", i), want: i})`
$DIR/cmd/streaming-signature-v4_test.go:183:41-183:58: `.Sprintf("%x", i)`
$DIR/cmd/streaming-signature-v4_test.go:188:29-188:63: `.Contains(err.Error(), tt.wantErr)`
$DIR/cmd/sts-handlers_test.go:61:3-64:4: `testCases = append(testCases,
			newTestSuiteIAM(bt, false),
			newTestSuiteIAM(bt, true),
		)`
$DIR/cmd/sts-handlers_test.go:69:4-69:36: `etcdStr = " (with etcd backend)"`
$DIR/cmd/sts-handlers_test.go:71:3-76:4: `t.Run(
			fmt.Sprintf("Test: %d, ServerType: %s%s", i+1, testCase.serverType, etcdStr),
			func(t *testing.T) {
				runAllIAMSTSTests(testCase, &check{t, testCase.serverType})
			},
		)`
$DIR/cmd/sts-handlers_test.go:71:4-76:4: `.Run(
			fmt.Sprintf("Test: %d, ServerType: %s%s", i+1, testCase.serverType, etcdStr),
			func(t *testing.T) {
				runAllIAMSTSTests(testCase, &check{t, testCase.serverType})
			},
		)`
$DIR/cmd/sts-handlers_test.go:72:7-72:80: `.Sprintf("Test: %d, ServerType: %s%s", i+1, testCase.serverType, etcdStr)`
$DIR/cmd/sts-handlers_test.go:74:5-74:64: `runAllIAMSTSTests(testCase, &check{t, testCase.serverType})`
$DIR/cmd/sts-handlers_test.go:672:3-692:4: `t.Run(
			fmt.Sprintf("Test: %d, ServerType: %s", i+1, testCase.ServerTypeDescription),
			func(t *testing.T) {
				c := &check{t, testCase.serverType}
				suite := testCase

				ldapServer := os.Getenv(EnvTestLDAPServer)
				if ldapServer == "" {
					c.Skip("Skipping LDAP test as no LDAP server is provided.")
				}

				suite.SetUpSuite(c)
				suite.SetUpLDAP(c, ldapServer)
				suite.TestLDAPSTS(c)
				suite.TestLDAPUnicodeVariations(c)
				suite.TestLDAPSTSServiceAccounts(c)
				suite.TestLDAPSTSServiceAccountsWithUsername(c)
				suite.TestLDAPSTSServiceAccountsWithGroups(c)
				suite.TearDownSuite(c)
			},
		)`
$DIR/cmd/sts-handlers_test.go:672:4-692:4: `.Run(
			fmt.Sprintf("Test: %d, ServerType: %s", i+1, testCase.ServerTypeDescription),
			func(t *testing.T) {
				c := &check{t, testCase.serverType}
				suite := testCase

				ldapServer := os.Getenv(EnvTestLDAPServer)
				if ldapServer == "" {
					c.Skip("Skipping LDAP test as no LDAP server is provided.")
				}

				suite.SetUpSuite(c)
				suite.SetUpLDAP(c, ldapServer)
				suite.TestLDAPSTS(c)
				suite.TestLDAPUnicodeVariations(c)
				suite.TestLDAPSTSServiceAccounts(c)
				suite.TestLDAPSTSServiceAccountsWithUsername(c)
				suite.TestLDAPSTSServiceAccountsWithGroups(c)
				suite.TearDownSuite(c)
			},
		)`
$DIR/cmd/sts-handlers_test.go:673:7-673:80: `.Sprintf("Test: %d, ServerType: %s", i+1, testCase.ServerTypeDescription)`
$DIR/cmd/sts-handlers_test.go:678:21-678:47: `.Getenv(EnvTestLDAPServer)`
$DIR/cmd/sts-handlers_test.go:683:5-683:24: `suite.SetUpSuite(c)`
$DIR/cmd/sts-handlers_test.go:683:10-683:24: `.SetUpSuite(c)`
$DIR/cmd/sts-handlers_test.go:684:5-684:35: `suite.SetUpLDAP(c, ldapServer)`
$DIR/cmd/sts-handlers_test.go:684:10-684:35: `.SetUpLDAP(c, ldapServer)`
$DIR/cmd/sts-handlers_test.go:685:5-685:25: `suite.TestLDAPSTS(c)`
$DIR/cmd/sts-handlers_test.go:685:10-685:25: `.TestLDAPSTS(c)`
$DIR/cmd/sts-handlers_test.go:686:5-686:39: `suite.TestLDAPUnicodeVariations(c)`
$DIR/cmd/sts-handlers_test.go:686:10-686:39: `.TestLDAPUnicodeVariations(c)`
$DIR/cmd/sts-handlers_test.go:687:5-687:40: `suite.TestLDAPSTSServiceAccounts(c)`
$DIR/cmd/sts-handlers_test.go:687:10-687:40: `.TestLDAPSTSServiceAccounts(c)`
$DIR/cmd/sts-handlers_test.go:688:5-688:52: `suite.TestLDAPSTSServiceAccountsWithUsername(c)`
$DIR/cmd/sts-handlers_test.go:688:10-688:52: `.TestLDAPSTSServiceAccountsWithUsername(c)`
$DIR/cmd/sts-handlers_test.go:689:5-689:50: `suite.TestLDAPSTSServiceAccountsWithGroups(c)`
$DIR/cmd/sts-handlers_test.go:689:10-689:50: `.TestLDAPSTSServiceAccountsWithGroups(c)`
$DIR/cmd/sts-handlers_test.go:690:5-690:27: `suite.TearDownSuite(c)`
$DIR/cmd/sts-handlers_test.go:690:10-690:27: `.TearDownSuite(c)`
$DIR/cmd/sts-handlers_test.go:1687:3-1706:4: `t.Run(
			fmt.Sprintf("Test: %d, ServerType: %s", i+1, testCase.ServerTypeDescription),
			func(t *testing.T) {
				c := &check{t, testCase.serverType}
				suite := testCase

				openIDServer := os.Getenv(EnvTestOpenIDServer)
				if openIDServer == "" {
					c.Skip("Skipping OpenID test as no OpenID server is provided.")
				}

				suite.SetUpSuite(c)
				suite.SetUpOpenID(c, openIDServer, "")
				suite.TestOpenIDSTS(c)
				suite.TestOpenIDSTSDurationSeconds(c)
				suite.TestOpenIDServiceAcc(c)
				suite.TestOpenIDSTSAddUser(c)
				suite.TearDownSuite(c)
			},
		)`
$DIR/cmd/sts-handlers_test.go:1687:4-1706:4: `.Run(
			fmt.Sprintf("Test: %d, ServerType: %s", i+1, testCase.ServerTypeDescription),
			func(t *testing.T) {
				c := &check{t, testCase.serverType}
				suite := testCase

				openIDServer := os.Getenv(EnvTestOpenIDServer)
				if openIDServer == "" {
					c.Skip("Skipping OpenID test as no OpenID server is provided.")
				}

				suite.SetUpSuite(c)
				suite.SetUpOpenID(c, openIDServer, "")
				suite.TestOpenIDSTS(c)
				suite.TestOpenIDSTSDurationSeconds(c)
				suite.TestOpenIDServiceAcc(c)
				suite.TestOpenIDSTSAddUser(c)
				suite.TearDownSuite(c)
			},
		)`
$DIR/cmd/sts-handlers_test.go:1688:7-1688:80: `.Sprintf("Test: %d, ServerType: %s", i+1, testCase.ServerTypeDescription)`
$DIR/cmd/sts-handlers_test.go:1693:23-1693:51: `.Getenv(EnvTestOpenIDServer)`
$DIR/cmd/sts-handlers_test.go:1698:5-1698:24: `suite.SetUpSuite(c)`
$DIR/cmd/sts-handlers_test.go:1698:10-1698:24: `.SetUpSuite(c)`
$DIR/cmd/sts-handlers_test.go:1699:5-1699:43: `suite.SetUpOpenID(c, openIDServer, "")`
$DIR/cmd/sts-handlers_test.go:1699:10-1699:43: `.SetUpOpenID(c, openIDServer, "")`
$DIR/cmd/sts-handlers_test.go:1700:5-1700:27: `suite.TestOpenIDSTS(c)`
$DIR/cmd/sts-handlers_test.go:1700:10-1700:27: `.TestOpenIDSTS(c)`
$DIR/cmd/sts-handlers_test.go:1701:5-1701:42: `suite.TestOpenIDSTSDurationSeconds(c)`
$DIR/cmd/sts-handlers_test.go:1701:10-1701:42: `.TestOpenIDSTSDurationSeconds(c)`
$DIR/cmd/sts-handlers_test.go:1702:5-1702:34: `suite.TestOpenIDServiceAcc(c)`
$DIR/cmd/sts-handlers_test.go:1702:10-1702:34: `.TestOpenIDServiceAcc(c)`
$DIR/cmd/sts-handlers_test.go:1703:5-1703:34: `suite.TestOpenIDSTSAddUser(c)`
$DIR/cmd/sts-handlers_test.go:1703:10-1703:34: `.TestOpenIDSTSAddUser(c)`
$DIR/cmd/sts-handlers_test.go:1704:5-1704:27: `suite.TearDownSuite(c)`
$DIR/cmd/sts-handlers_test.go:1704:10-1704:27: `.TearDownSuite(c)`
$DIR/cmd/sts-handlers_test.go:1712:3-1729:4: `t.Run(
			fmt.Sprintf("Test: %d, ServerType: %s", i+1, testCase.ServerTypeDescription),
			func(t *testing.T) {
				c := &check{t, testCase.serverType}
				suite := testCase

				openIDServer := os.Getenv(EnvTestOpenIDServer)
				if openIDServer == "" {
					c.Skip("Skipping OpenID test as no OpenID server is provided.")
				}

				suite.SetUpSuite(c)
				suite.SetUpOpenID(c, openIDServer, "readwrite")
				suite.TestOpenIDSTSWithRolePolicy(c, testRoleARNs[0], testRoleMap[testRoleARNs[0]])
				suite.TestOpenIDServiceAccWithRolePolicy(c)
				suite.TearDownSuite(c)
			},
		)`
$DIR/cmd/sts-handlers_test.go:1712:4-1729:4: `.Run(
			fmt.Sprintf("Test: %d, ServerType: %s", i+1, testCase.ServerTypeDescription),
			func(t *testing.T) {
				c := &check{t, testCase.serverType}
				suite := testCase

				openIDServer := os.Getenv(EnvTestOpenIDServer)
				if openIDServer == "" {
					c.Skip("Skipping OpenID test as no OpenID server is provided.")
				}

				suite.SetUpSuite(c)
				suite.SetUpOpenID(c, openIDServer, "readwrite")
				suite.TestOpenIDSTSWithRolePolicy(c, testRoleARNs[0], testRoleMap[testRoleARNs[0]])
				suite.TestOpenIDServiceAccWithRolePolicy(c)
				suite.TearDownSuite(c)
			},
		)`
$DIR/cmd/sts-handlers_test.go:1713:7-1713:80: `.Sprintf("Test: %d, ServerType: %s", i+1, testCase.ServerTypeDescription)`
$DIR/cmd/sts-handlers_test.go:1718:23-1718:51: `.Getenv(EnvTestOpenIDServer)`
$DIR/cmd/sts-handlers_test.go:1723:5-1723:24: `suite.SetUpSuite(c)`
$DIR/cmd/sts-handlers_test.go:1723:10-1723:24: `.SetUpSuite(c)`
$DIR/cmd/sts-handlers_test.go:1724:5-1724:52: `suite.SetUpOpenID(c, openIDServer, "readwrite")`
$DIR/cmd/sts-handlers_test.go:1724:10-1724:52: `.SetUpOpenID(c, openIDServer, "readwrite")`
$DIR/cmd/sts-handlers_test.go:1725:5-1725:88: `suite.TestOpenIDSTSWithRolePolicy(c, testRoleARNs[0], testRoleMap[testRoleARNs[0]])`
$DIR/cmd/sts-handlers_test.go:1725:10-1725:88: `.TestOpenIDSTSWithRolePolicy(c, testRoleARNs[0], testRoleMap[testRoleARNs[0]])`
$DIR/cmd/sts-handlers_test.go:1726:5-1726:48: `suite.TestOpenIDServiceAccWithRolePolicy(c)`
$DIR/cmd/sts-handlers_test.go:1726:10-1726:48: `.TestOpenIDServiceAccWithRolePolicy(c)`
$DIR/cmd/sts-handlers_test.go:1727:5-1727:27: `suite.TearDownSuite(c)`
$DIR/cmd/sts-handlers_test.go:1727:10-1727:27: `.TearDownSuite(c)`
$DIR/cmd/sts-handlers_test.go:1735:3-1751:4: `t.Run(
			fmt.Sprintf("Test: %d, ServerType: %s", i+1, testCase.ServerTypeDescription),
			func(t *testing.T) {
				c := &check{t, testCase.serverType}
				suite := testCase

				openIDServer := os.Getenv(EnvTestOpenIDServer)
				if openIDServer == "" {
					c.Skip("Skipping OpenID test as no OpenID server is provided.")
				}

				suite.SetUpSuite(c)
				suite.SetUpOpenID(c, openIDServer, "projecta,projectb,projectaorb")
				suite.TestOpenIDSTSWithRolePolicyWithPolVar(c, testRoleARNs[0], testRoleMap[testRoleARNs[0]])
				suite.TearDownSuite(c)
			},
		)`
$DIR/cmd/sts-handlers_test.go:1735:4-1751:4: `.Run(
			fmt.Sprintf("Test: %d, ServerType: %s", i+1, testCase.ServerTypeDescription),
			func(t *testing.T) {
				c := &check{t, testCase.serverType}
				suite := testCase

				openIDServer := os.Getenv(EnvTestOpenIDServer)
				if openIDServer == "" {
					c.Skip("Skipping OpenID test as no OpenID server is provided.")
				}

				suite.SetUpSuite(c)
				suite.SetUpOpenID(c, openIDServer, "projecta,projectb,projectaorb")
				suite.TestOpenIDSTSWithRolePolicyWithPolVar(c, testRoleARNs[0], testRoleMap[testRoleARNs[0]])
				suite.TearDownSuite(c)
			},
		)`
$DIR/cmd/sts-handlers_test.go:1736:7-1736:80: `.Sprintf("Test: %d, ServerType: %s", i+1, testCase.ServerTypeDescription)`
$DIR/cmd/sts-handlers_test.go:1741:23-1741:51: `.Getenv(EnvTestOpenIDServer)`
$DIR/cmd/sts-handlers_test.go:1746:5-1746:24: `suite.SetUpSuite(c)`
$DIR/cmd/sts-handlers_test.go:1746:10-1746:24: `.SetUpSuite(c)`
$DIR/cmd/sts-handlers_test.go:1747:5-1747:72: `suite.SetUpOpenID(c, openIDServer, "projecta,projectb,projectaorb")`
$DIR/cmd/sts-handlers_test.go:1747:10-1747:72: `.SetUpOpenID(c, openIDServer, "projecta,projectb,projectaorb")`
$DIR/cmd/sts-handlers_test.go:1748:5-1748:98: `suite.TestOpenIDSTSWithRolePolicyWithPolVar(c, testRoleARNs[0], testRoleMap[testRoleARNs[0]])`
$DIR/cmd/sts-handlers_test.go:1748:10-1748:98: `.TestOpenIDSTSWithRolePolicyWithPolVar(c, testRoleARNs[0], testRoleMap[testRoleARNs[0]])`
$DIR/cmd/sts-handlers_test.go:1749:5-1749:27: `suite.TearDownSuite(c)`
$DIR/cmd/sts-handlers_test.go:1749:10-1749:27: `.TearDownSuite(c)`
$DIR/cmd/sts-handlers_test.go:2081:20-2081:48: `.Getenv(EnvTestOpenIDServer)`
$DIR/cmd/sts-handlers_test.go:2082:21-2082:50: `.Getenv(EnvTestOpenIDServer2)`
$DIR/cmd/sts-handlers_test.go:2094:3-2108:4: `t.Run(
			fmt.Sprintf("Test: %d, ServerType: %s", i+1, testCase.ServerTypeDescription),
			func(t *testing.T) {
				c := &check{t, testCase.serverType}
				suite := testCase

				suite.SetUpSuite(c)
				defer suite.TearDownSuite(c)

				err := suite.SetUpOpenIDs(c, testApps, rolePolicies)
				if err != nil {
					c.Fatalf("config with 1 claim based and 1 role based provider should pass but got: %v", err)
				}
			},
		)`
$DIR/cmd/sts-handlers_test.go:2094:4-2108:4: `.Run(
			fmt.Sprintf("Test: %d, ServerType: %s", i+1, testCase.ServerTypeDescription),
			func(t *testing.T) {
				c := &check{t, testCase.serverType}
				suite := testCase

				suite.SetUpSuite(c)
				defer suite.TearDownSuite(c)

				err := suite.SetUpOpenIDs(c, testApps, rolePolicies)
				if err != nil {
					c.Fatalf("config with 1 claim based and 1 role based provider should pass but got: %v", err)
				}
			},
		)`
$DIR/cmd/sts-handlers_test.go:2095:7-2095:80: `.Sprintf("Test: %d, ServerType: %s", i+1, testCase.ServerTypeDescription)`
$DIR/cmd/sts-handlers_test.go:2100:5-2100:24: `suite.SetUpSuite(c)`
$DIR/cmd/sts-handlers_test.go:2100:10-2100:24: `.SetUpSuite(c)`
$DIR/cmd/sts-handlers_test.go:2101:16-2101:33: `.TearDownSuite(c)`
$DIR/cmd/sts-handlers_test.go:2103:17-2103:57: `.SetUpOpenIDs(c, testApps, rolePolicies)`
$DIR/cmd/sts-handlers_test.go:2113:20-2113:48: `.Getenv(EnvTestOpenIDServer)`
$DIR/cmd/sts-handlers_test.go:2114:21-2114:50: `.Getenv(EnvTestOpenIDServer2)`
$DIR/cmd/sts-handlers_test.go:2126:3-2140:4: `t.Run(
			fmt.Sprintf("Test: %d, ServerType: %s", i+1, testCase.ServerTypeDescription),
			func(t *testing.T) {
				c := &check{t, testCase.serverType}
				suite := testCase

				suite.SetUpSuite(c)
				defer suite.TearDownSuite(c)

				err := suite.SetUpOpenIDs(c, testApps, rolePolicies)
				if err == nil {
					c.Fatalf("config with 2 claim based provider should fail")
				}
			},
		)`
$DIR/cmd/sts-handlers_test.go:2126:4-2140:4: `.Run(
			fmt.Sprintf("Test: %d, ServerType: %s", i+1, testCase.ServerTypeDescription),
			func(t *testing.T) {
				c := &check{t, testCase.serverType}
				suite := testCase

				suite.SetUpSuite(c)
				defer suite.TearDownSuite(c)

				err := suite.SetUpOpenIDs(c, testApps, rolePolicies)
				if err == nil {
					c.Fatalf("config with 2 claim based provider should fail")
				}
			},
		)`
$DIR/cmd/sts-handlers_test.go:2127:7-2127:80: `.Sprintf("Test: %d, ServerType: %s", i+1, testCase.ServerTypeDescription)`
$DIR/cmd/sts-handlers_test.go:2132:5-2132:24: `suite.SetUpSuite(c)`
$DIR/cmd/sts-handlers_test.go:2132:10-2132:24: `.SetUpSuite(c)`
$DIR/cmd/sts-handlers_test.go:2133:16-2133:33: `.TearDownSuite(c)`
$DIR/cmd/sts-handlers_test.go:2135:17-2135:57: `.SetUpOpenIDs(c, testApps, rolePolicies)`
$DIR/cmd/sts-handlers_test.go:2145:20-2145:48: `.Getenv(EnvTestOpenIDServer)`
$DIR/cmd/sts-handlers_test.go:2146:21-2146:50: `.Getenv(EnvTestOpenIDServer2)`
$DIR/cmd/sts-handlers_test.go:2158:3-2174:4: `t.Run(
			fmt.Sprintf("Test: %d, ServerType: %s", i+1, testCase.ServerTypeDescription),
			func(t *testing.T) {
				c := &check{t, testCase.serverType}
				suite := testCase

				suite.SetUpSuite(c)
				err := suite.SetUpOpenIDs(c, testApps, rolePolicies)
				if err != nil {
					c.Fatalf("Error setting up openid providers for tests: %v", err)
				}
				suite.TestOpenIDSTSWithRolePolicy(c, testRoleARNs[0], testRoleMap[testRoleARNs[0]])
				suite.TestOpenIDSTSWithRolePolicy(c, testRoleARNs[1], testRoleMap[testRoleARNs[1]])
				suite.TestOpenIDServiceAccWithRolePolicy(c)
				suite.TearDownSuite(c)
			},
		)`
$DIR/cmd/sts-handlers_test.go:2158:4-2174:4: `.Run(
			fmt.Sprintf("Test: %d, ServerType: %s", i+1, testCase.ServerTypeDescription),
			func(t *testing.T) {
				c := &check{t, testCase.serverType}
				suite := testCase

				suite.SetUpSuite(c)
				err := suite.SetUpOpenIDs(c, testApps, rolePolicies)
				if err != nil {
					c.Fatalf("Error setting up openid providers for tests: %v", err)
				}
				suite.TestOpenIDSTSWithRolePolicy(c, testRoleARNs[0], testRoleMap[testRoleARNs[0]])
				suite.TestOpenIDSTSWithRolePolicy(c, testRoleARNs[1], testRoleMap[testRoleARNs[1]])
				suite.TestOpenIDServiceAccWithRolePolicy(c)
				suite.TearDownSuite(c)
			},
		)`
$DIR/cmd/sts-handlers_test.go:2159:7-2159:80: `.Sprintf("Test: %d, ServerType: %s", i+1, testCase.ServerTypeDescription)`
$DIR/cmd/sts-handlers_test.go:2164:5-2164:24: `suite.SetUpSuite(c)`
$DIR/cmd/sts-handlers_test.go:2164:10-2164:24: `.SetUpSuite(c)`
$DIR/cmd/sts-handlers_test.go:2165:17-2165:57: `.SetUpOpenIDs(c, testApps, rolePolicies)`
$DIR/cmd/sts-handlers_test.go:2169:5-2169:88: `suite.TestOpenIDSTSWithRolePolicy(c, testRoleARNs[0], testRoleMap[testRoleARNs[0]])`
$DIR/cmd/sts-handlers_test.go:2169:10-2169:88: `.TestOpenIDSTSWithRolePolicy(c, testRoleARNs[0], testRoleMap[testRoleARNs[0]])`
$DIR/cmd/sts-handlers_test.go:2170:5-2170:88: `suite.TestOpenIDSTSWithRolePolicy(c, testRoleARNs[1], testRoleMap[testRoleARNs[1]])`
$DIR/cmd/sts-handlers_test.go:2170:10-2170:88: `.TestOpenIDSTSWithRolePolicy(c, testRoleARNs[1], testRoleMap[testRoleARNs[1]])`
$DIR/cmd/sts-handlers_test.go:2171:5-2171:48: `suite.TestOpenIDServiceAccWithRolePolicy(c)`
$DIR/cmd/sts-handlers_test.go:2171:10-2171:48: `.TestOpenIDServiceAccWithRolePolicy(c)`
$DIR/cmd/sts-handlers_test.go:2172:5-2172:27: `suite.TearDownSuite(c)`
$DIR/cmd/sts-handlers_test.go:2172:10-2172:27: `.TearDownSuite(c)`
$DIR/cmd/sts-handlers_test.go:2180:20-2180:48: `.Getenv(EnvTestOpenIDServer)`
$DIR/cmd/sts-handlers_test.go:2181:21-2181:50: `.Getenv(EnvTestOpenIDServer2)`
$DIR/cmd/sts-handlers_test.go:2193:3-2213:4: `t.Run(
			fmt.Sprintf("Test: %d, ServerType: %s", i+1, testCase.ServerTypeDescription),
			func(t *testing.T) {
				c := &check{t, testCase.serverType}
				suite := testCase

				suite.SetUpSuite(c)
				defer suite.TearDownSuite(c)

				err := suite.SetUpOpenIDs(c, testApps, rolePolicies)
				if err != nil {
					c.Fatalf("Error setting up openid providers for tests: %v", err)
				}

				suite.SetUpAccMgmtPlugin(c)

				suite.TestOpenIDSTSWithRolePolicyUnderAMP(c, testRoleARNs[0], testRoleMap[testRoleARNs[0]])
				suite.TestOpenIDSTSWithRolePolicyUnderAMP(c, testRoleARNs[1], testRoleMap[testRoleARNs[1]])
				suite.TestOpenIDServiceAccWithRolePolicyUnderAMP(c)
			},
		)`
$DIR/cmd/sts-handlers_test.go:2193:4-2213:4: `.Run(
			fmt.Sprintf("Test: %d, ServerType: %s", i+1, testCase.ServerTypeDescription),
			func(t *testing.T) {
				c := &check{t, testCase.serverType}
				suite := testCase

				suite.SetUpSuite(c)
				defer suite.TearDownSuite(c)

				err := suite.SetUpOpenIDs(c, testApps, rolePolicies)
				if err != nil {
					c.Fatalf("Error setting up openid providers for tests: %v", err)
				}

				suite.SetUpAccMgmtPlugin(c)

				suite.TestOpenIDSTSWithRolePolicyUnderAMP(c, testRoleARNs[0], testRoleMap[testRoleARNs[0]])
				suite.TestOpenIDSTSWithRolePolicyUnderAMP(c, testRoleARNs[1], testRoleMap[testRoleARNs[1]])
				suite.TestOpenIDServiceAccWithRolePolicyUnderAMP(c)
			},
		)`
$DIR/cmd/sts-handlers_test.go:2194:7-2194:80: `.Sprintf("Test: %d, ServerType: %s", i+1, testCase.ServerTypeDescription)`
$DIR/cmd/sts-handlers_test.go:2199:5-2199:24: `suite.SetUpSuite(c)`
$DIR/cmd/sts-handlers_test.go:2199:10-2199:24: `.SetUpSuite(c)`
$DIR/cmd/sts-handlers_test.go:2200:16-2200:33: `.TearDownSuite(c)`
$DIR/cmd/sts-handlers_test.go:2202:17-2202:57: `.SetUpOpenIDs(c, testApps, rolePolicies)`
$DIR/cmd/sts-handlers_test.go:2207:5-2207:32: `suite.SetUpAccMgmtPlugin(c)`
$DIR/cmd/sts-handlers_test.go:2207:10-2207:32: `.SetUpAccMgmtPlugin(c)`
$DIR/cmd/sts-handlers_test.go:2209:5-2209:96: `suite.TestOpenIDSTSWithRolePolicyUnderAMP(c, testRoleARNs[0], testRoleMap[testRoleARNs[0]])`
$DIR/cmd/sts-handlers_test.go:2209:10-2209:96: `.TestOpenIDSTSWithRolePolicyUnderAMP(c, testRoleARNs[0], testRoleMap[testRoleARNs[0]])`
$DIR/cmd/sts-handlers_test.go:2210:5-2210:96: `suite.TestOpenIDSTSWithRolePolicyUnderAMP(c, testRoleARNs[1], testRoleMap[testRoleARNs[1]])`
$DIR/cmd/sts-handlers_test.go:2210:10-2210:96: `.TestOpenIDSTSWithRolePolicyUnderAMP(c, testRoleARNs[1], testRoleMap[testRoleARNs[1]])`
$DIR/cmd/sts-handlers_test.go:2211:5-2211:56: `suite.TestOpenIDServiceAccWithRolePolicyUnderAMP(c)`
$DIR/cmd/sts-handlers_test.go:2211:10-2211:56: `.TestOpenIDServiceAccWithRolePolicyUnderAMP(c)`
$DIR/cmd/test-utils_test.go:74:2-74:14: `flag.Parse()`
$DIR/cmd/test-utils_test.go:74:6-74:14: `.Parse()`
$DIR/cmd/test-utils_test.go:77:2-77:24: `globalIsTesting = true`
$DIR/cmd/test-utils_test.go:79:2-79:32: `globalIsCICD = globalIsTesting`
$DIR/cmd/test-utils_test.go:81:2-84:3: `globalActiveCred = auth.Credentials{
		AccessKey: auth.DefaultAccessKey,
		SecretKey: auth.DefaultSecretKey,
	}`
$DIR/cmd/test-utils_test.go:94:3-94:19: `os.Unsetenv(env)`
$DIR/cmd/test-utils_test.go:94:5-94:19: `.Unsetenv(env)`
$DIR/cmd/test-utils_test.go:98:2-98:29: `globalIsDistErasure = false`
$DIR/cmd/test-utils_test.go:101:2-101:27: `color.Output = io.Discard`
$DIR/cmd/test-utils_test.go:103:2-103:31: `logger.DisableErrorLog = true`
$DIR/cmd/test-utils_test.go:109:2-109:19: `setMaxResources()`
$DIR/cmd/test-utils_test.go:112:2-112:59: `globalConsoleSys = NewConsoleLogger(context.Background())`
$DIR/cmd/test-utils_test.go:112:45-112:58: `.Background()`
$DIR/cmd/test-utils_test.go:114:2-114:59: `globalInternodeTransport = NewInternodeHTTPTransport(0)()`
$DIR/cmd/test-utils_test.go:116:2-116:12: `initHelp()`
$DIR/cmd/test-utils_test.go:118:2-118:20: `resetTestGlobals()`
$DIR/cmd/test-utils_test.go:120:2-120:21: `globalIsCICD = true`
$DIR/cmd/test-utils_test.go:122:11-122:17: `.Run()`
$DIR/cmd/test-utils_test.go:2235:16-2235:29: `.Background()`
$DIR/cmd/tier-last-day-stats_gen_test.go:14:15-14:31: `.MarshalMsg(nil)`
$DIR/cmd/tier-last-day-stats_gen_test.go:18:16-18:34: `.UnmarshalMsg(bts)`
$DIR/cmd/tier-last-day-stats_gen_test.go:26:2-26:28: `left, err = msgp.Skip(bts)`
$DIR/cmd/tier-last-day-stats_gen_test.go:73:2-73:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/tier-last-day-stats_gen_test.go:73:6-73:23: `.Encode(&buf, &v)`
$DIR/cmd/tier-last-day-stats_gen_test.go:75:8-75:18: `.Msgsize()`
$DIR/cmd/tier-last-day-stats_gen_test.go:76:8-76:14: `.Len()`
$DIR/cmd/tier-last-day-stats_gen_test.go:81:13-81:31: `.Decode(&buf, &vn)`
$DIR/cmd/tier-last-day-stats_gen_test.go:86:2-86:13: `buf.Reset()`
$DIR/cmd/tier-last-day-stats_gen_test.go:86:5-86:13: `.Reset()`
$DIR/cmd/tier-last-day-stats_gen_test.go:87:2-87:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/tier-last-day-stats_gen_test.go:87:6-87:23: `.Encode(&buf, &v)`
$DIR/cmd/tier-last-day-stats_gen_test.go:88:2-88:35: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/tier-last-day-stats_gen_test.go:127:15-127:31: `.MarshalMsg(nil)`
$DIR/cmd/tier-last-day-stats_gen_test.go:131:16-131:34: `.UnmarshalMsg(bts)`
$DIR/cmd/tier-last-day-stats_gen_test.go:139:2-139:28: `left, err = msgp.Skip(bts)`
$DIR/cmd/tier-last-day-stats_gen_test.go:186:2-186:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/tier-last-day-stats_gen_test.go:186:6-186:23: `.Encode(&buf, &v)`
$DIR/cmd/tier-last-day-stats_gen_test.go:188:8-188:18: `.Msgsize()`
$DIR/cmd/tier-last-day-stats_gen_test.go:189:8-189:14: `.Len()`
$DIR/cmd/tier-last-day-stats_gen_test.go:194:13-194:31: `.Decode(&buf, &vn)`
$DIR/cmd/tier-last-day-stats_gen_test.go:199:2-199:13: `buf.Reset()`
$DIR/cmd/tier-last-day-stats_gen_test.go:199:5-199:13: `.Reset()`
$DIR/cmd/tier-last-day-stats_gen_test.go:200:2-200:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/tier-last-day-stats_gen_test.go:200:6-200:23: `.Encode(&buf, &v)`
$DIR/cmd/tier-last-day-stats_gen_test.go:201:2-201:35: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/tier_gen_test.go:14:15-14:31: `.MarshalMsg(nil)`
$DIR/cmd/tier_gen_test.go:18:16-18:34: `.UnmarshalMsg(bts)`
$DIR/cmd/tier_gen_test.go:26:2-26:28: `left, err = msgp.Skip(bts)`
$DIR/cmd/tier_gen_test.go:73:2-73:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/tier_gen_test.go:73:6-73:23: `.Encode(&buf, &v)`
$DIR/cmd/tier_gen_test.go:75:8-75:18: `.Msgsize()`
$DIR/cmd/tier_gen_test.go:76:8-76:14: `.Len()`
$DIR/cmd/tier_gen_test.go:81:13-81:31: `.Decode(&buf, &vn)`
$DIR/cmd/tier_gen_test.go:86:2-86:13: `buf.Reset()`
$DIR/cmd/tier_gen_test.go:86:5-86:13: `.Reset()`
$DIR/cmd/tier_gen_test.go:87:2-87:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/tier_gen_test.go:87:6-87:23: `.Encode(&buf, &v)`
$DIR/cmd/tier_gen_test.go:88:2-88:35: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/tier_test.go:27:2-27:55: `globalTierMetrics.Observe(tier, 200*time.Millisecond)`
$DIR/cmd/tier_test.go:27:19-27:55: `.Observe(tier, 200*time.Millisecond)`
$DIR/cmd/tier_test.go:31:3-31:37: `globalTierMetrics.logSuccess(tier)`
$DIR/cmd/tier_test.go:31:20-31:37: `.logSuccess(tier)`
$DIR/cmd/tier_test.go:34:3-34:37: `globalTierMetrics.logFailure(tier)`
$DIR/cmd/tier_test.go:34:20-34:37: `.logFailure(tier)`
$DIR/cmd/tier_test.go:36:30-36:39: `.Report()`
$DIR/cmd/tier_test.go:41:4-41:24: `succ += metric.Value`
$DIR/cmd/tier_test.go:43:4-43:24: `fail += metric.Value`
$DIR/cmd/update-notifier_test.go:74:15-74:85: `.Sprintf("%s %s", plainMsg, color.YellowBold(testCase.expectedSubStr))`
$DIR/cmd/update-notifier_test.go:74:48-74:84: `.YellowBold(testCase.expectedSubStr)`
$DIR/cmd/update-notifier_test.go:75:15-75:69: `.Sprintf("Update: %s", color.CyanBold(testCase.dlURL))`
$DIR/cmd/update-notifier_test.go:75:43-75:68: `.CyanBold(testCase.dlURL)`
$DIR/cmd/update-notifier_test.go:87:16-87:40: `.Contains(output, line1)`
$DIR/cmd/update-notifier_test.go:89:16-89:40: `.Contains(output, line2)`
$DIR/cmd/update_test.go:52:19-52:36: `.LoadLocation("")`
$DIR/cmd/update_test.go:59:8-59:62: `.Date(2017, time.September, 29, 19, 16, 56, 0, utcLoc)`
$DIR/cmd/update_test.go:63:8-63:56: `.Date(2017, time.August, 5, 0, 0, 53, 0, utcLoc)`
$DIR/cmd/update_test.go:67:8-67:14: `.Now()`
$DIR/cmd/update_test.go:67:14-67:20: `.UTC()`
$DIR/cmd/update_test.go:71:8-71:14: `.Now()`
$DIR/cmd/update_test.go:71:14-71:20: `.UTC()`
$DIR/cmd/update_test.go:75:8-75:56: `.Date(2017, time.August, 5, 0, 0, 53, 0, utcLoc)`
$DIR/cmd/update_test.go:79:8-79:56: `.Date(2017, time.August, 5, 0, 0, 53, 0, utcLoc)`
$DIR/cmd/update_test.go:94:28-94:46: `.Equal(testCase.t)`
$DIR/cmd/update_test.go:102:2-102:22: `globalIsCICD = false`
$DIR/cmd/update_test.go:104:3-104:21: `globalIsCICD = sci`
$DIR/cmd/update_test.go:125:2-125:52: `t.Setenv("KUBERNETES_SERVICE_HOST", "10.11.148.5")`
$DIR/cmd/update_test.go:125:3-125:52: `.Setenv("KUBERNETES_SERVICE_HOST", "10.11.148.5")`
$DIR/cmd/update_test.go:126:2-126:38: `durl = getDownloadURL(minioVersion1)`
$DIR/cmd/update_test.go:131:2-131:48: `t.Setenv("MESOS_CONTAINER_NAME", "mesos-1111")`
$DIR/cmd/update_test.go:131:3-131:48: `.Setenv("MESOS_CONTAINER_NAME", "mesos-1111")`
$DIR/cmd/update_test.go:132:2-132:38: `durl = getDownloadURL(minioVersion1)`
$DIR/cmd/update_test.go:150:20-150:160: `.Sprintf("MinIO (%s; %s; %s; source DEVELOPMENT.GOGET DEVELOPMENT.GOGET DEVELOPMENT.GOGET", runtime.GOOS, runtime.GOARCH, globalMinioModeFS)`
$DIR/cmd/update_test.go:156:20-156:203: `.Sprintf("MinIO (%s; %s; %s; %s; source DEVELOPMENT.GOGET DEVELOPMENT.GOGET DEVELOPMENT.GOGET universe-%s", runtime.GOOS, runtime.GOARCH, globalMinioModeErasure, "dcos", "mesos-1111")`
$DIR/cmd/update_test.go:162:20-162:183: `.Sprintf("MinIO (%s; %s; %s; %s; source DEVELOPMENT.GOGET DEVELOPMENT.GOGET DEVELOPMENT.GOGET", runtime.GOOS, runtime.GOARCH, globalMinioModeErasure, "kubernetes")`
$DIR/cmd/update_test.go:168:3-168:23: `globalIsCICD = false`
$DIR/cmd/update_test.go:171:4-171:49: `t.Setenv(testCase.envName, testCase.envValue)`
$DIR/cmd/update_test.go:171:5-171:49: `.Setenv(testCase.envName, testCase.envValue)`
$DIR/cmd/update_test.go:173:5-173:70: `t.Setenv("MARATHON_APP_LABEL_DCOS_PACKAGE_VERSION", "mesos-1111")`
$DIR/cmd/update_test.go:173:6-173:70: `.Setenv("MARATHON_APP_LABEL_DCOS_PACKAGE_VERSION", "mesos-1111")`
$DIR/cmd/update_test.go:180:4-180:81: `expectedStr = strings.ReplaceAll(expectedStr, "; source", "; docker; source")`
$DIR/cmd/update_test.go:180:25-180:81: `.ReplaceAll(expectedStr, "; source", "; docker; source")`
$DIR/cmd/update_test.go:182:14-182:41: `.Contains(str, expectedStr)`
$DIR/cmd/update_test.go:185:3-185:21: `globalIsCICD = sci`
$DIR/cmd/update_test.go:186:3-186:57: `os.Unsetenv("MARATHON_APP_LABEL_DCOS_PACKAGE_VERSION")`
$DIR/cmd/update_test.go:186:5-186:57: `.Unsetenv("MARATHON_APP_LABEL_DCOS_PACKAGE_VERSION")`
$DIR/cmd/update_test.go:187:3-187:32: `os.Unsetenv(testCase.envName)`
$DIR/cmd/update_test.go:187:5-187:32: `.Unsetenv(testCase.envName)`
$DIR/cmd/update_test.go:194:2-194:22: `globalIsCICD = false`
$DIR/cmd/update_test.go:196:3-196:21: `globalIsCICD = sci`
$DIR/cmd/update_test.go:199:2-199:48: `t.Setenv("MESOS_CONTAINER_NAME", "mesos-1111")`
$DIR/cmd/update_test.go:199:3-199:48: `.Setenv("MESOS_CONTAINER_NAME", "mesos-1111")`
$DIR/cmd/update_test.go:204:2-204:37: `os.Unsetenv("MESOS_CONTAINER_NAME")`
$DIR/cmd/update_test.go:204:4-204:37: `.Unsetenv("MESOS_CONTAINER_NAME")`
$DIR/cmd/update_test.go:205:2-205:17: `dcos = IsDCOS()`
$DIR/cmd/update_test.go:214:2-214:22: `globalIsCICD = false`
$DIR/cmd/update_test.go:216:3-216:21: `globalIsCICD = sci`
$DIR/cmd/update_test.go:219:2-219:52: `t.Setenv("KUBERNETES_SERVICE_HOST", "10.11.148.5")`
$DIR/cmd/update_test.go:219:3-219:52: `.Setenv("KUBERNETES_SERVICE_HOST", "10.11.148.5")`
$DIR/cmd/update_test.go:224:2-224:40: `os.Unsetenv("KUBERNETES_SERVICE_HOST")`
$DIR/cmd/update_test.go:224:4-224:40: `.Unsetenv("KUBERNETES_SERVICE_HOST")`
$DIR/cmd/update_test.go:226:2-226:29: `kubernetes = IsKubernetes()`
$DIR/cmd/update_test.go:235:21-235:54: `.CreateTemp("", "helm-testfile-")`
$DIR/cmd/update_test.go:239:22-239:43: `.WriteString(content)`
$DIR/cmd/update_test.go:245:17-245:24: `.Name()`
$DIR/cmd/update_test.go:254:10-254:27: `.Remove(filename)`
$DIR/cmd/update_test.go:275:25-275:102: `.NewServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {}))`
$DIR/cmd/update_test.go:275:40-275:101: `.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {})`
$DIR/cmd/update_test.go:277:25-279:5: `.NewServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		fmt.Fprintln(w, "fbe246edbd382902db9a4035df7dce8cb441357d minio.RELEASE.2016-10-07T01-16-39Z")
	}))`
$DIR/cmd/update_test.go:277:40-279:4: `.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		fmt.Fprintln(w, "fbe246edbd382902db9a4035df7dce8cb441357d minio.RELEASE.2016-10-07T01-16-39Z")
	})`
$DIR/cmd/update_test.go:278:3-278:97: `fmt.Fprintln(w, "fbe246edbd382902db9a4035df7dce8cb441357d minio.RELEASE.2016-10-07T01-16-39Z")`
$DIR/cmd/update_test.go:278:6-278:97: `.Fprintln(w, "fbe246edbd382902db9a4035df7dce8cb441357d minio.RELEASE.2016-10-07T01-16-39Z")`
$DIR/cmd/update_test.go:281:25-283:5: `.NewServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		http.Error(w, "", http.StatusNotFound)
	}))`
$DIR/cmd/update_test.go:281:40-283:4: `.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		http.Error(w, "", http.StatusNotFound)
	})`
$DIR/cmd/update_test.go:297:16-297:51: `.Parse(testCase.releaseChecksumURL)`
$DIR/cmd/update_test.go:354:10-354:36: `.EncodeToString(sha256Sum)`
$DIR/cmd/update_test.go:357:16-357:45: `.expectedResult.Equal(result)`
$DIR/cmd/utils_test.go:167:3-175:5: `t.Run("", func(t *testing.T) {
			bucketName, objectName := path2BucketObject(testCase.path)
			if bucketName != testCase.bucket {
				t.Errorf("failed expected bucket name \"%s\", got \"%s\"", testCase.bucket, bucketName)
			}
			if objectName != testCase.object {
				t.Errorf("failed expected bucket name \"%s\", got \"%s\"", testCase.object, objectName)
			}
		})`
$DIR/cmd/utils_test.go:167:4-175:5: `.Run("", func(t *testing.T) {
			bucketName, objectName := path2BucketObject(testCase.path)
			if bucketName != testCase.bucket {
				t.Errorf("failed expected bucket name \"%s\", got \"%s\"", testCase.bucket, bucketName)
			}
			if objectName != testCase.object {
				t.Errorf("failed expected bucket name \"%s\", got \"%s\"", testCase.object, objectName)
			}
		})`
$DIR/cmd/utils_test.go:226:18-226:365: `.NewRequest(http.MethodGet, "http://localhost:9000?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=USWUXHGYZQYFYFFIT3RE%2F20170529%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20170529T190139Z&X-Amz-Expires=600&X-Amz-Signature=19b58080999df54b446fc97304eb8dda60d3df1812ae97f3e8783351bfd9781d&X-Amz-SignedHeaders=host&prefix=Hello%2AWorld%2A", nil)`
$DIR/cmd/utils_test.go:230:2-230:312: `req.RequestURI = "/?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=USWUXHGYZQYFYFFIT3RE%2F20170529%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20170529T190139Z&X-Amz-Expires=600&X-Amz-Signature=19b58080999df54b446fc97304eb8dda60d3df1812ae97f3e8783351bfd9781d&X-Amz-SignedHeaders=host&prefix=Hello%2AWorld%2A"`
$DIR/cmd/utils_test.go:231:2-231:43: `req.Header.Set("content-md5", "====test")`
$DIR/cmd/utils_test.go:231:5-231:43: `.Header.Set("content-md5", "====test")`
$DIR/cmd/utils_test.go:233:2-237:3: `type jsonResult struct {
		Method     string      `json:"method"`
		RequestURI string      `json:"reqURI"`
		Header     http.Header `json:"header"`
	}`
$DIR/cmd/utils_test.go:239:15-239:79: `.Unmarshal([]byte(strings.ReplaceAll(jsonReq, "%%", "%")), &res)`
$DIR/cmd/utils_test.go:239:40-239:71: `.ReplaceAll(jsonReq, "%%", "%")`
$DIR/cmd/utils_test.go:250:2-250:45: `expectedQuery.Set("prefix", "Hello*World*")`
$DIR/cmd/utils_test.go:250:15-250:45: `.Set("prefix", "Hello*World*")`
$DIR/cmd/utils_test.go:251:2-251:58: `expectedQuery.Set("X-Amz-Algorithm", "AWS4-HMAC-SHA256")`
$DIR/cmd/utils_test.go:251:15-251:58: `.Set("X-Amz-Algorithm", "AWS4-HMAC-SHA256")`
$DIR/cmd/utils_test.go:252:2-252:98: `expectedQuery.Set("X-Amz-Credential", "USWUXHGYZQYFYFFIT3RE/20170529/us-east-1/s3/aws4_request")`
$DIR/cmd/utils_test.go:252:15-252:98: `.Set("X-Amz-Credential", "USWUXHGYZQYFYFFIT3RE/20170529/us-east-1/s3/aws4_request")`
$DIR/cmd/utils_test.go:253:2-253:53: `expectedQuery.Set("X-Amz-Date", "20170529T190139Z")`
$DIR/cmd/utils_test.go:253:15-253:53: `.Set("X-Amz-Date", "20170529T190139Z")`
$DIR/cmd/utils_test.go:254:2-254:43: `expectedQuery.Set("X-Amz-Expires", "600")`
$DIR/cmd/utils_test.go:254:15-254:43: `.Set("X-Amz-Expires", "600")`
$DIR/cmd/utils_test.go:255:2-255:50: `expectedQuery.Set("X-Amz-SignedHeaders", "host")`
$DIR/cmd/utils_test.go:255:15-255:50: `.Set("X-Amz-SignedHeaders", "host")`
$DIR/cmd/utils_test.go:256:2-256:106: `expectedQuery.Set("X-Amz-Signature", "19b58080999df54b446fc97304eb8dda60d3df1812ae97f3e8783351bfd9781d")`
$DIR/cmd/utils_test.go:256:15-256:106: `.Set("X-Amz-Signature", "19b58080999df54b446fc97304eb8dda60d3df1812ae97f3e8783351bfd9781d")`
$DIR/cmd/utils_test.go:257:44-257:53: `.Encode()`
$DIR/cmd/utils_test.go:258:13-258:59: `.DeepEqual(res.RequestURI, expectedRequestURI)`
$DIR/cmd/utils_test.go:264:2-264:47: `expectedHeader.Set("content-md5", "====test")`
$DIR/cmd/utils_test.go:264:16-264:47: `.Set("content-md5", "====test")`
$DIR/cmd/utils_test.go:265:2-265:46: `expectedHeader.Set("host", "localhost:9000")`
$DIR/cmd/utils_test.go:265:16-265:46: `.Set("host", "localhost:9000")`
$DIR/cmd/utils_test.go:266:13-266:51: `.DeepEqual(res.Header, expectedHeader)`
$DIR/cmd/utils_test.go:392:2-392:28: `globalIsDistErasure = true`
$DIR/cmd/utils_test.go:393:2-393:43: `testMinioMode(globalMinioModeDistErasure)`
$DIR/cmd/utils_test.go:395:2-395:29: `globalIsDistErasure = false`
$DIR/cmd/utils_test.go:396:2-396:24: `globalIsErasure = true`
$DIR/cmd/utils_test.go:397:2-397:39: `testMinioMode(globalMinioModeErasure)`
$DIR/cmd/utils_test.go:399:2-399:53: `globalIsDistErasure, globalIsErasure = false, false`
$DIR/cmd/version_test.go:26:2-26:34: `Version = "2017-05-07T06:37:49Z"`
$DIR/cmd/version_test.go:27:16-27:45: `.Parse(time.RFC3339, Version)`
$DIR/cmd/xl-storage-errors_test.go:33:2-33:47: `pathErr = &os.PathError{Err: syscall.ENOTDIR}`
$DIR/cmd/xl-storage-errors_test.go:34:2-34:30: `ok = isSysErrNotDir(pathErr)`
$DIR/cmd/xl-storage-errors_test.go:39:3-39:50: `pathErr = &os.PathError{Err: syscall.ENOTEMPTY}`
$DIR/cmd/xl-storage-errors_test.go:40:3-40:33: `ok = isSysErrNotEmpty(pathErr)`
$DIR/cmd/xl-storage-errors_test.go:45:3-45:52: `pathErr = &os.PathError{Err: syscall.Errno(0x91)}`
$DIR/cmd/xl-storage-errors_test.go:45:39-45:51: `.Errno(0x91)`
$DIR/cmd/xl-storage-errors_test.go:46:3-46:33: `ok = isSysErrNotEmpty(pathErr)`
$DIR/cmd/xl-storage-errors_test.go:52:3-52:52: `pathErr = &os.PathError{Err: syscall.Errno(0x03)}`
$DIR/cmd/xl-storage-errors_test.go:52:39-52:51: `.Errno(0x03)`
$DIR/cmd/xl-storage-errors_test.go:53:3-53:37: `ok = isSysErrPathNotFound(pathErr)`
$DIR/cmd/xl-storage-format-utils_test.go:66:3-110:5: `t.Run(tt.name, func(t *testing.T) {
			const n = 100
			want := hashDeterministicString(tt.arg)
			m := tt.arg
			for i := 0; i < n; i++ {
				if got := hashDeterministicString(m); got != want {
					t.Errorf("hashDeterministicString() = %v, want %v", got, want)
				}
			}
			// Check casual collisions
			if m == nil {
				m = make(map[string]string)
			}
			m["12312312"] = ""
			if got := hashDeterministicString(m); got == want {
				t.Errorf("hashDeterministicString() = %v, does not want %v", got, want)
			}
			want = hashDeterministicString(m)
			delete(m, "12312312")
			m["another"] = ""

			if got := hashDeterministicString(m); got == want {
				t.Errorf("hashDeterministicString() = %v, does not want %v", got, want)
			}

			want = hashDeterministicString(m)
			m["another"] = "hashDeterministicString"
			if got := hashDeterministicString(m); got == want {
				t.Errorf("hashDeterministicString() = %v, does not want %v", got, want)
			}

			want = hashDeterministicString(m)
			m["another"] = "hashDeterministicStringhashDeterministicStringhashDeterministicStringhashDeterministicStringhashDeterministicStringhashDeterministicStringhashDeterministicString"
			if got := hashDeterministicString(m); got == want {
				t.Errorf("hashDeterministicString() = %v, does not want %v", got, want)
			}

			// Flip key/value
			want = hashDeterministicString(m)
			delete(m, "another")
			m["hashDeterministicStringhashDeterministicStringhashDeterministicStringhashDeterministicStringhashDeterministicStringhashDeterministicStringhashDeterministicString"] = "another"
			if got := hashDeterministicString(m); got == want {
				t.Errorf("hashDeterministicString() = %v, does not want %v", got, want)
			}
		})`
$DIR/cmd/xl-storage-format-utils_test.go:66:4-110:5: `.Run(tt.name, func(t *testing.T) {
			const n = 100
			want := hashDeterministicString(tt.arg)
			m := tt.arg
			for i := 0; i < n; i++ {
				if got := hashDeterministicString(m); got != want {
					t.Errorf("hashDeterministicString() = %v, want %v", got, want)
				}
			}
			// Check casual collisions
			if m == nil {
				m = make(map[string]string)
			}
			m["12312312"] = ""
			if got := hashDeterministicString(m); got == want {
				t.Errorf("hashDeterministicString() = %v, does not want %v", got, want)
			}
			want = hashDeterministicString(m)
			delete(m, "12312312")
			m["another"] = ""

			if got := hashDeterministicString(m); got == want {
				t.Errorf("hashDeterministicString() = %v, does not want %v", got, want)
			}

			want = hashDeterministicString(m)
			m["another"] = "hashDeterministicString"
			if got := hashDeterministicString(m); got == want {
				t.Errorf("hashDeterministicString() = %v, does not want %v", got, want)
			}

			want = hashDeterministicString(m)
			m["another"] = "hashDeterministicStringhashDeterministicStringhashDeterministicStringhashDeterministicStringhashDeterministicStringhashDeterministicStringhashDeterministicString"
			if got := hashDeterministicString(m); got == want {
				t.Errorf("hashDeterministicString() = %v, does not want %v", got, want)
			}

			// Flip key/value
			want = hashDeterministicString(m)
			delete(m, "another")
			m["hashDeterministicStringhashDeterministicStringhashDeterministicStringhashDeterministicStringhashDeterministicStringhashDeterministicStringhashDeterministicString"] = "another"
			if got := hashDeterministicString(m); got == want {
				t.Errorf("hashDeterministicString() = %v, does not want %v", got, want)
			}
		})`
$DIR/cmd/xl-storage-format-utils_test.go:67:4-67:17: `const n = 100`
$DIR/cmd/xl-storage-format-utils_test.go:77:5-77:32: `m = make(map[string]string)`
$DIR/cmd/xl-storage-format-utils_test.go:79:4-79:22: `m["12312312"] = ""`
$DIR/cmd/xl-storage-format-utils_test.go:83:4-83:37: `want = hashDeterministicString(m)`
$DIR/cmd/xl-storage-format-utils_test.go:84:4-84:25: `delete(m, "12312312")`
$DIR/cmd/xl-storage-format-utils_test.go:85:4-85:21: `m["another"] = ""`
$DIR/cmd/xl-storage-format-utils_test.go:91:4-91:37: `want = hashDeterministicString(m)`
$DIR/cmd/xl-storage-format-utils_test.go:92:4-92:44: `m["another"] = "hashDeterministicString"`
$DIR/cmd/xl-storage-format-utils_test.go:97:4-97:37: `want = hashDeterministicString(m)`
$DIR/cmd/xl-storage-format-utils_test.go:98:4-98:182: `m["another"] = "hashDeterministicStringhashDeterministicStringhashDeterministicStringhashDeterministicStringhashDeterministicStringhashDeterministicStringhashDeterministicString"`
$DIR/cmd/xl-storage-format-utils_test.go:104:4-104:37: `want = hashDeterministicString(m)`
$DIR/cmd/xl-storage-format-utils_test.go:105:4-105:24: `delete(m, "another")`
$DIR/cmd/xl-storage-format-utils_test.go:106:4-106:182: `m["hashDeterministicStringhashDeterministicStringhashDeterministicStringhashDeterministicStringhashDeterministicStringhashDeterministicStringhashDeterministicString"] = "another"`
$DIR/cmd/xl-storage-format-utils_test.go:124:25-124:31: `.Now()`
$DIR/cmd/xl-storage-format-utils_test.go:124:31-124:37: `.UTC()`
$DIR/cmd/xl-storage-format-utils_test.go:130:29-130:38: `.String()`
$DIR/cmd/xl-storage-format-utils_test.go:151:3-151:31: `fi.VersionID = mustGetUUID()`
$DIR/cmd/xl-storage-format-utils_test.go:152:3-152:29: `fi.DataDir = mustGetUUID()`
$DIR/cmd/xl-storage-format-utils_test.go:153:3-153:66: `fi.ModTime = basefi.ModTime.Add(time.Duration(i) * time.Second)`
$DIR/cmd/xl-storage-format-utils_test.go:153:22-153:66: `.ModTime.Add(time.Duration(i) * time.Second)`
$DIR/cmd/xl-storage-format-utils_test.go:153:39-153:51: `.Duration(i)`
$DIR/cmd/xl-storage-format-utils_test.go:154:15-154:30: `.AddVersion(fi)`
$DIR/cmd/xl-storage-format-utils_test.go:161:4-161:59: `transfi.TransitionStatus = lifecycle.TransitionComplete`
$DIR/cmd/xl-storage-format-utils_test.go:162:4-162:41: `transfi.TransitionTier = "MINIO-TIER"`
$DIR/cmd/xl-storage-format-utils_test.go:163:4-163:47: `transfi.TransitionedObjName = mustGetUUID()`
$DIR/cmd/xl-storage-format-utils_test.go:164:4-164:29: `xl.DeleteVersion(transfi)`
$DIR/cmd/xl-storage-format-utils_test.go:164:6-164:29: `.DeleteVersion(transfi)`
$DIR/cmd/xl-storage-format-utils_test.go:166:4-166:42: `fi.SetTierFreeVersionID(mustGetUUID())`
$DIR/cmd/xl-storage-format-utils_test.go:166:6-166:42: `.SetTierFreeVersionID(mustGetUUID())`
$DIR/cmd/xl-storage-format-utils_test.go:168:4-168:24: `xl.DeleteVersion(fi)`
$DIR/cmd/xl-storage-format-utils_test.go:168:6-168:24: `.DeleteVersion(fi)`
$DIR/cmd/xl-storage-format-utils_test.go:169:4-169:67: `freeVersionIDs = append(freeVersionIDs, fi.TierFreeVersionID())`
$DIR/cmd/xl-storage-format-utils_test.go:169:46-169:66: `.TierFreeVersionID()`
$DIR/cmd/xl-storage-format-utils_test.go:171:4-171:35: `versions = append(versions, fi)`
$DIR/cmd/xl-storage-format-utils_test.go:174:16-174:30: `.AppendTo(nil)`
$DIR/cmd/xl-storage-format-utils_test.go:183:2-191:4: `sort.Slice(versions, func(i, j int) bool {
		if versions[i].IsLatest {
			return true
		}
		if versions[j].IsLatest {
			return false
		}
		return versions[i].ModTime.After(versions[j].ModTime)
	})`
$DIR/cmd/xl-storage-format-utils_test.go:183:6-191:4: `.Slice(versions, func(i, j int) bool {
		if versions[i].IsLatest {
			return true
		}
		if versions[j].IsLatest {
			return false
		}
		return versions[i].ModTime.After(versions[j].ModTime)
	})`
$DIR/cmd/xl-storage-format-utils_test.go:190:21-190:56: `.ModTime.After(versions[j].ModTime)`
$DIR/cmd/xl-storage-format-v1_gen_test.go:14:15-14:31: `.MarshalMsg(nil)`
$DIR/cmd/xl-storage-format-v1_gen_test.go:18:16-18:34: `.UnmarshalMsg(bts)`
$DIR/cmd/xl-storage-format-v1_gen_test.go:26:2-26:28: `left, err = msgp.Skip(bts)`
$DIR/cmd/xl-storage-format-v1_gen_test.go:73:2-73:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/xl-storage-format-v1_gen_test.go:73:6-73:23: `.Encode(&buf, &v)`
$DIR/cmd/xl-storage-format-v1_gen_test.go:75:8-75:18: `.Msgsize()`
$DIR/cmd/xl-storage-format-v1_gen_test.go:76:8-76:14: `.Len()`
$DIR/cmd/xl-storage-format-v1_gen_test.go:81:13-81:31: `.Decode(&buf, &vn)`
$DIR/cmd/xl-storage-format-v1_gen_test.go:86:2-86:13: `buf.Reset()`
$DIR/cmd/xl-storage-format-v1_gen_test.go:86:5-86:13: `.Reset()`
$DIR/cmd/xl-storage-format-v1_gen_test.go:87:2-87:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/xl-storage-format-v1_gen_test.go:87:6-87:23: `.Encode(&buf, &v)`
$DIR/cmd/xl-storage-format-v1_gen_test.go:88:2-88:35: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/xl-storage-format-v1_gen_test.go:127:15-127:31: `.MarshalMsg(nil)`
$DIR/cmd/xl-storage-format-v1_gen_test.go:131:16-131:34: `.UnmarshalMsg(bts)`
$DIR/cmd/xl-storage-format-v1_gen_test.go:139:2-139:28: `left, err = msgp.Skip(bts)`
$DIR/cmd/xl-storage-format-v1_gen_test.go:186:2-186:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/xl-storage-format-v1_gen_test.go:186:6-186:23: `.Encode(&buf, &v)`
$DIR/cmd/xl-storage-format-v1_gen_test.go:188:8-188:18: `.Msgsize()`
$DIR/cmd/xl-storage-format-v1_gen_test.go:189:8-189:14: `.Len()`
$DIR/cmd/xl-storage-format-v1_gen_test.go:194:13-194:31: `.Decode(&buf, &vn)`
$DIR/cmd/xl-storage-format-v1_gen_test.go:199:2-199:13: `buf.Reset()`
$DIR/cmd/xl-storage-format-v1_gen_test.go:199:5-199:13: `.Reset()`
$DIR/cmd/xl-storage-format-v1_gen_test.go:200:2-200:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/xl-storage-format-v1_gen_test.go:200:6-200:23: `.Encode(&buf, &v)`
$DIR/cmd/xl-storage-format-v1_gen_test.go:201:2-201:35: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/xl-storage-format-v1_gen_test.go:240:15-240:31: `.MarshalMsg(nil)`
$DIR/cmd/xl-storage-format-v1_gen_test.go:244:16-244:34: `.UnmarshalMsg(bts)`
$DIR/cmd/xl-storage-format-v1_gen_test.go:252:2-252:28: `left, err = msgp.Skip(bts)`
$DIR/cmd/xl-storage-format-v1_gen_test.go:299:2-299:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/xl-storage-format-v1_gen_test.go:299:6-299:23: `.Encode(&buf, &v)`
$DIR/cmd/xl-storage-format-v1_gen_test.go:301:8-301:18: `.Msgsize()`
$DIR/cmd/xl-storage-format-v1_gen_test.go:302:8-302:14: `.Len()`
$DIR/cmd/xl-storage-format-v1_gen_test.go:307:13-307:31: `.Decode(&buf, &vn)`
$DIR/cmd/xl-storage-format-v1_gen_test.go:312:2-312:13: `buf.Reset()`
$DIR/cmd/xl-storage-format-v1_gen_test.go:312:5-312:13: `.Reset()`
$DIR/cmd/xl-storage-format-v1_gen_test.go:313:2-313:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/xl-storage-format-v1_gen_test.go:313:6-313:23: `.Encode(&buf, &v)`
$DIR/cmd/xl-storage-format-v1_gen_test.go:314:2-314:35: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/xl-storage-format-v1_gen_test.go:353:15-353:31: `.MarshalMsg(nil)`
$DIR/cmd/xl-storage-format-v1_gen_test.go:357:16-357:34: `.UnmarshalMsg(bts)`
$DIR/cmd/xl-storage-format-v1_gen_test.go:365:2-365:28: `left, err = msgp.Skip(bts)`
$DIR/cmd/xl-storage-format-v1_gen_test.go:412:2-412:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/xl-storage-format-v1_gen_test.go:412:6-412:23: `.Encode(&buf, &v)`
$DIR/cmd/xl-storage-format-v1_gen_test.go:414:8-414:18: `.Msgsize()`
$DIR/cmd/xl-storage-format-v1_gen_test.go:415:8-415:14: `.Len()`
$DIR/cmd/xl-storage-format-v1_gen_test.go:420:13-420:31: `.Decode(&buf, &vn)`
$DIR/cmd/xl-storage-format-v1_gen_test.go:425:2-425:13: `buf.Reset()`
$DIR/cmd/xl-storage-format-v1_gen_test.go:425:5-425:13: `.Reset()`
$DIR/cmd/xl-storage-format-v1_gen_test.go:426:2-426:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/xl-storage-format-v1_gen_test.go:426:6-426:23: `.Encode(&buf, &v)`
$DIR/cmd/xl-storage-format-v1_gen_test.go:427:2-427:35: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/xl-storage-format-v1_gen_test.go:466:15-466:31: `.MarshalMsg(nil)`
$DIR/cmd/xl-storage-format-v1_gen_test.go:470:16-470:34: `.UnmarshalMsg(bts)`
$DIR/cmd/xl-storage-format-v1_gen_test.go:478:2-478:28: `left, err = msgp.Skip(bts)`
$DIR/cmd/xl-storage-format-v1_gen_test.go:525:2-525:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/xl-storage-format-v1_gen_test.go:525:6-525:23: `.Encode(&buf, &v)`
$DIR/cmd/xl-storage-format-v1_gen_test.go:527:8-527:18: `.Msgsize()`
$DIR/cmd/xl-storage-format-v1_gen_test.go:528:8-528:14: `.Len()`
$DIR/cmd/xl-storage-format-v1_gen_test.go:533:13-533:31: `.Decode(&buf, &vn)`
$DIR/cmd/xl-storage-format-v1_gen_test.go:538:2-538:13: `buf.Reset()`
$DIR/cmd/xl-storage-format-v1_gen_test.go:538:5-538:13: `.Reset()`
$DIR/cmd/xl-storage-format-v1_gen_test.go:539:2-539:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/xl-storage-format-v1_gen_test.go:539:6-539:23: `.Encode(&buf, &v)`
$DIR/cmd/xl-storage-format-v1_gen_test.go:540:2-540:35: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/xl-storage-format-v1_gen_test.go:579:15-579:31: `.MarshalMsg(nil)`
$DIR/cmd/xl-storage-format-v1_gen_test.go:583:16-583:34: `.UnmarshalMsg(bts)`
$DIR/cmd/xl-storage-format-v1_gen_test.go:591:2-591:28: `left, err = msgp.Skip(bts)`
$DIR/cmd/xl-storage-format-v1_gen_test.go:638:2-638:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/xl-storage-format-v1_gen_test.go:638:6-638:23: `.Encode(&buf, &v)`
$DIR/cmd/xl-storage-format-v1_gen_test.go:640:8-640:18: `.Msgsize()`
$DIR/cmd/xl-storage-format-v1_gen_test.go:641:8-641:14: `.Len()`
$DIR/cmd/xl-storage-format-v1_gen_test.go:646:13-646:31: `.Decode(&buf, &vn)`
$DIR/cmd/xl-storage-format-v1_gen_test.go:651:2-651:13: `buf.Reset()`
$DIR/cmd/xl-storage-format-v1_gen_test.go:651:5-651:13: `.Reset()`
$DIR/cmd/xl-storage-format-v1_gen_test.go:652:2-652:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/xl-storage-format-v1_gen_test.go:652:6-652:23: `.Encode(&buf, &v)`
$DIR/cmd/xl-storage-format-v1_gen_test.go:653:2-653:35: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/xl-storage-format-v2_gen_test.go:14:15-14:31: `.MarshalMsg(nil)`
$DIR/cmd/xl-storage-format-v2_gen_test.go:18:16-18:34: `.UnmarshalMsg(bts)`
$DIR/cmd/xl-storage-format-v2_gen_test.go:26:2-26:28: `left, err = msgp.Skip(bts)`
$DIR/cmd/xl-storage-format-v2_gen_test.go:73:2-73:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/xl-storage-format-v2_gen_test.go:73:6-73:23: `.Encode(&buf, &v)`
$DIR/cmd/xl-storage-format-v2_gen_test.go:75:8-75:18: `.Msgsize()`
$DIR/cmd/xl-storage-format-v2_gen_test.go:76:8-76:14: `.Len()`
$DIR/cmd/xl-storage-format-v2_gen_test.go:81:13-81:31: `.Decode(&buf, &vn)`
$DIR/cmd/xl-storage-format-v2_gen_test.go:86:2-86:13: `buf.Reset()`
$DIR/cmd/xl-storage-format-v2_gen_test.go:86:5-86:13: `.Reset()`
$DIR/cmd/xl-storage-format-v2_gen_test.go:87:2-87:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/xl-storage-format-v2_gen_test.go:87:6-87:23: `.Encode(&buf, &v)`
$DIR/cmd/xl-storage-format-v2_gen_test.go:88:2-88:35: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/xl-storage-format-v2_gen_test.go:127:15-127:31: `.MarshalMsg(nil)`
$DIR/cmd/xl-storage-format-v2_gen_test.go:131:16-131:34: `.UnmarshalMsg(bts)`
$DIR/cmd/xl-storage-format-v2_gen_test.go:139:2-139:28: `left, err = msgp.Skip(bts)`
$DIR/cmd/xl-storage-format-v2_gen_test.go:186:2-186:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/xl-storage-format-v2_gen_test.go:186:6-186:23: `.Encode(&buf, &v)`
$DIR/cmd/xl-storage-format-v2_gen_test.go:188:8-188:18: `.Msgsize()`
$DIR/cmd/xl-storage-format-v2_gen_test.go:189:8-189:14: `.Len()`
$DIR/cmd/xl-storage-format-v2_gen_test.go:194:13-194:31: `.Decode(&buf, &vn)`
$DIR/cmd/xl-storage-format-v2_gen_test.go:199:2-199:13: `buf.Reset()`
$DIR/cmd/xl-storage-format-v2_gen_test.go:199:5-199:13: `.Reset()`
$DIR/cmd/xl-storage-format-v2_gen_test.go:200:2-200:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/xl-storage-format-v2_gen_test.go:200:6-200:23: `.Encode(&buf, &v)`
$DIR/cmd/xl-storage-format-v2_gen_test.go:201:2-201:35: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/xl-storage-format-v2_gen_test.go:240:15-240:31: `.MarshalMsg(nil)`
$DIR/cmd/xl-storage-format-v2_gen_test.go:244:16-244:34: `.UnmarshalMsg(bts)`
$DIR/cmd/xl-storage-format-v2_gen_test.go:252:2-252:28: `left, err = msgp.Skip(bts)`
$DIR/cmd/xl-storage-format-v2_gen_test.go:299:2-299:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/xl-storage-format-v2_gen_test.go:299:6-299:23: `.Encode(&buf, &v)`
$DIR/cmd/xl-storage-format-v2_gen_test.go:301:8-301:18: `.Msgsize()`
$DIR/cmd/xl-storage-format-v2_gen_test.go:302:8-302:14: `.Len()`
$DIR/cmd/xl-storage-format-v2_gen_test.go:307:13-307:31: `.Decode(&buf, &vn)`
$DIR/cmd/xl-storage-format-v2_gen_test.go:312:2-312:13: `buf.Reset()`
$DIR/cmd/xl-storage-format-v2_gen_test.go:312:5-312:13: `.Reset()`
$DIR/cmd/xl-storage-format-v2_gen_test.go:313:2-313:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/xl-storage-format-v2_gen_test.go:313:6-313:23: `.Encode(&buf, &v)`
$DIR/cmd/xl-storage-format-v2_gen_test.go:314:2-314:35: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/xl-storage-format-v2_gen_test.go:353:15-353:31: `.MarshalMsg(nil)`
$DIR/cmd/xl-storage-format-v2_gen_test.go:357:16-357:34: `.UnmarshalMsg(bts)`
$DIR/cmd/xl-storage-format-v2_gen_test.go:365:2-365:28: `left, err = msgp.Skip(bts)`
$DIR/cmd/xl-storage-format-v2_gen_test.go:412:2-412:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/xl-storage-format-v2_gen_test.go:412:6-412:23: `.Encode(&buf, &v)`
$DIR/cmd/xl-storage-format-v2_gen_test.go:414:8-414:18: `.Msgsize()`
$DIR/cmd/xl-storage-format-v2_gen_test.go:415:8-415:14: `.Len()`
$DIR/cmd/xl-storage-format-v2_gen_test.go:420:13-420:31: `.Decode(&buf, &vn)`
$DIR/cmd/xl-storage-format-v2_gen_test.go:425:2-425:13: `buf.Reset()`
$DIR/cmd/xl-storage-format-v2_gen_test.go:425:5-425:13: `.Reset()`
$DIR/cmd/xl-storage-format-v2_gen_test.go:426:2-426:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/xl-storage-format-v2_gen_test.go:426:6-426:23: `.Encode(&buf, &v)`
$DIR/cmd/xl-storage-format-v2_gen_test.go:427:2-427:35: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/xl-storage-format-v2_gen_test.go:466:15-466:31: `.MarshalMsg(nil)`
$DIR/cmd/xl-storage-format-v2_gen_test.go:470:16-470:34: `.UnmarshalMsg(bts)`
$DIR/cmd/xl-storage-format-v2_gen_test.go:478:2-478:28: `left, err = msgp.Skip(bts)`
$DIR/cmd/xl-storage-format-v2_gen_test.go:525:2-525:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/xl-storage-format-v2_gen_test.go:525:6-525:23: `.Encode(&buf, &v)`
$DIR/cmd/xl-storage-format-v2_gen_test.go:527:8-527:18: `.Msgsize()`
$DIR/cmd/xl-storage-format-v2_gen_test.go:528:8-528:14: `.Len()`
$DIR/cmd/xl-storage-format-v2_gen_test.go:533:13-533:31: `.Decode(&buf, &vn)`
$DIR/cmd/xl-storage-format-v2_gen_test.go:538:2-538:13: `buf.Reset()`
$DIR/cmd/xl-storage-format-v2_gen_test.go:538:5-538:13: `.Reset()`
$DIR/cmd/xl-storage-format-v2_gen_test.go:539:2-539:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/xl-storage-format-v2_gen_test.go:539:6-539:23: `.Encode(&buf, &v)`
$DIR/cmd/xl-storage-format-v2_gen_test.go:540:2-540:35: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/xl-storage-format-v2_test.go:44:14-44:50: `.Open("testdata/xl.meta-corrupt.gz")`
$DIR/cmd/xl-storage-format-v2_test.go:50:17-50:47: `.NewReader(bufio.NewReader(f))`
$DIR/cmd/xl-storage-format-v2_test.go:50:33-50:46: `.NewReader(f)`
$DIR/cmd/xl-storage-format-v2_test.go:55:16-55:28: `.ReadAll(gz)`
$DIR/cmd/xl-storage-format-v2_test.go:60:2-60:66: `_, err = readXLMetaNoData(bytes.NewReader(buf), int64(len(buf)))`
$DIR/cmd/xl-storage-format-v2_test.go:60:33-60:48: `.NewReader(buf)`
$DIR/cmd/xl-storage-format-v2_test.go:68:3-68:13: `t.Helper()`
$DIR/cmd/xl-storage-format-v2_test.go:68:4-68:13: `.Helper()`
$DIR/cmd/xl-storage-format-v2_test.go:86:25-86:31: `.Now()`
$DIR/cmd/xl-storage-format-v2_test.go:92:29-92:38: `.String()`
$DIR/cmd/xl-storage-format-v2_test.go:110:2-110:30: `failOnErr(xl.AddVersion(fi))`
$DIR/cmd/xl-storage-format-v2_test.go:110:14-110:29: `.AddVersion(fi)`
$DIR/cmd/xl-storage-format-v2_test.go:112:2-112:30: `fi.VersionID = mustGetUUID()`
$DIR/cmd/xl-storage-format-v2_test.go:113:2-113:28: `fi.DataDir = mustGetUUID()`
$DIR/cmd/xl-storage-format-v2_test.go:114:2-114:17: `fi.Data = data2`
$DIR/cmd/xl-storage-format-v2_test.go:115:2-115:30: `failOnErr(xl.AddVersion(fi))`
$DIR/cmd/xl-storage-format-v2_test.go:115:14-115:29: `.AddVersion(fi)`
$DIR/cmd/xl-storage-format-v2_test.go:117:23-117:37: `.AppendTo(nil)`
$DIR/cmd/xl-storage-format-v2_test.go:118:2-118:16: `failOnErr(err)`
$DIR/cmd/xl-storage-format-v2_test.go:121:2-121:33: `failOnErr(xl2.Load(serialized))`
$DIR/cmd/xl-storage-format-v2_test.go:121:15-121:32: `.Load(serialized)`
$DIR/cmd/xl-storage-format-v2_test.go:124:18-124:30: `.data.list()`
$DIR/cmd/xl-storage-format-v2_test.go:125:2-125:16: `failOnErr(err)`
$DIR/cmd/xl-storage-format-v2_test.go:130:11-130:78: `.Equal(xl2.data.find("756100c6-b393-4981-928a-d49bbc164741"), data)`
$DIR/cmd/xl-storage-format-v2_test.go:130:21-130:71: `.data.find("756100c6-b393-4981-928a-d49bbc164741")`
$DIR/cmd/xl-storage-format-v2_test.go:133:11-133:53: `.Equal(xl2.data.find(fi.VersionID), data2)`
$DIR/cmd/xl-storage-format-v2_test.go:133:21-133:45: `.data.find(fi.VersionID)`
$DIR/cmd/xl-storage-format-v2_test.go:138:2-138:31: `xl2.data.remove(fi.VersionID)`
$DIR/cmd/xl-storage-format-v2_test.go:138:5-138:31: `.data.remove(fi.VersionID)`
$DIR/cmd/xl-storage-format-v2_test.go:139:2-139:32: `failOnErr(xl2.data.validate())`
$DIR/cmd/xl-storage-format-v2_test.go:139:15-139:31: `.data.validate()`
$DIR/cmd/xl-storage-format-v2_test.go:140:8-140:32: `.data.find(fi.VersionID)`
$DIR/cmd/xl-storage-format-v2_test.go:143:8-143:23: `.data.entries()`
$DIR/cmd/xl-storage-format-v2_test.go:147:2-147:41: `xl2.data.replace(fi.VersionID, fi.Data)`
$DIR/cmd/xl-storage-format-v2_test.go:147:5-147:41: `.data.replace(fi.VersionID, fi.Data)`
$DIR/cmd/xl-storage-format-v2_test.go:148:2-148:32: `failOnErr(xl2.data.validate())`
$DIR/cmd/xl-storage-format-v2_test.go:148:15-148:31: `.data.validate()`
$DIR/cmd/xl-storage-format-v2_test.go:149:8-149:23: `.data.entries()`
$DIR/cmd/xl-storage-format-v2_test.go:154:2-154:65: `xl2.data.replace("756100c6-b393-4981-928a-d49bbc164741", data2)`
$DIR/cmd/xl-storage-format-v2_test.go:154:5-154:65: `.data.replace("756100c6-b393-4981-928a-d49bbc164741", data2)`
$DIR/cmd/xl-storage-format-v2_test.go:155:2-155:32: `failOnErr(xl2.data.validate())`
$DIR/cmd/xl-storage-format-v2_test.go:155:15-155:31: `.data.validate()`
$DIR/cmd/xl-storage-format-v2_test.go:156:8-156:23: `.data.entries()`
$DIR/cmd/xl-storage-format-v2_test.go:159:11-159:79: `.Equal(xl2.data.find("756100c6-b393-4981-928a-d49bbc164741"), data2)`
$DIR/cmd/xl-storage-format-v2_test.go:159:21-159:71: `.data.find("756100c6-b393-4981-928a-d49bbc164741")`
$DIR/cmd/xl-storage-format-v2_test.go:163:9-163:72: `.data.rename("756100c6-b393-4981-928a-d49bbc164741", "new-key")`
$DIR/cmd/xl-storage-format-v2_test.go:166:2-166:32: `failOnErr(xl2.data.validate())`
$DIR/cmd/xl-storage-format-v2_test.go:166:15-166:31: `.data.validate()`
$DIR/cmd/xl-storage-format-v2_test.go:167:11-167:50: `.Equal(xl2.data.find("new-key"), data2)`
$DIR/cmd/xl-storage-format-v2_test.go:167:21-167:42: `.data.find("new-key")`
$DIR/cmd/xl-storage-format-v2_test.go:170:8-170:23: `.data.entries()`
$DIR/cmd/xl-storage-format-v2_test.go:173:11-173:53: `.Equal(xl2.data.find(fi.VersionID), data2)`
$DIR/cmd/xl-storage-format-v2_test.go:173:21-173:45: `.data.find(fi.VersionID)`
$DIR/cmd/xl-storage-format-v2_test.go:178:2-178:18: `xl2 = xlMetaV2{}`
$DIR/cmd/xl-storage-format-v2_test.go:180:2-180:30: `failOnErr(xl2.Load(trimmed))`
$DIR/cmd/xl-storage-format-v2_test.go:180:15-180:29: `.Load(trimmed)`
$DIR/cmd/xl-storage-format-v2_test.go:185:2-185:32: `trimmed[len(trimmed)-10] += 10`
$DIR/cmd/xl-storage-format-v2_test.go:186:15-186:29: `.Load(trimmed)`
$DIR/cmd/xl-storage-format-v2_test.go:193:13-193:19: `.New()`
$DIR/cmd/xl-storage-format-v2_test.go:194:17-194:23: `.New()`
$DIR/cmd/xl-storage-format-v2_test.go:196:2-196:99: `transitioned[ReservedMetadataPrefixLower+TransitionStatus] = []byte(lifecycle.TransitionComplete)`
$DIR/cmd/xl-storage-format-v2_test.go:199:2-199:63: `toBeRestored[xhttp.AmzRestore] = ongoingRestoreObj().String()`
$DIR/cmd/xl-storage-format-v2_test.go:199:54-199:63: `.String()`
$DIR/cmd/xl-storage-format-v2_test.go:202:2-202:92: `restored[xhttp.AmzRestore] = completedRestoreObj(time.Now().UTC().Add(time.Hour)).String()`
$DIR/cmd/xl-storage-format-v2_test.go:202:55-202:61: `.Now()`
$DIR/cmd/xl-storage-format-v2_test.go:202:61-202:67: `.UTC()`
$DIR/cmd/xl-storage-format-v2_test.go:202:67-202:82: `.Add(time.Hour)`
$DIR/cmd/xl-storage-format-v2_test.go:202:83-202:92: `.String()`
$DIR/cmd/xl-storage-format-v2_test.go:205:2-205:100: `restoredExpired[xhttp.AmzRestore] = completedRestoreObj(time.Now().UTC().Add(-time.Hour)).String()`
$DIR/cmd/xl-storage-format-v2_test.go:205:62-205:68: `.Now()`
$DIR/cmd/xl-storage-format-v2_test.go:205:68-205:74: `.UTC()`
$DIR/cmd/xl-storage-format-v2_test.go:205:74-205:90: `.Add(-time.Hour)`
$DIR/cmd/xl-storage-format-v2_test.go:205:91-205:100: `.String()`
$DIR/cmd/xl-storage-format-v2_test.go:255:15-255:36: `.xlmeta.UsesDataDir()`
$DIR/cmd/xl-storage-format-v2_test.go:263:3-263:13: `t.Helper()`
$DIR/cmd/xl-storage-format-v2_test.go:263:4-263:13: `.Helper()`
$DIR/cmd/xl-storage-format-v2_test.go:282:25-282:31: `.Now()`
$DIR/cmd/xl-storage-format-v2_test.go:288:29-288:38: `.String()`
$DIR/cmd/xl-storage-format-v2_test.go:340:41-340:50: `.String()`
$DIR/cmd/xl-storage-format-v2_test.go:348:46-348:52: `.Now()`
$DIR/cmd/xl-storage-format-v2_test.go:348:52-348:72: `.Add(10 * time.Hour)`
$DIR/cmd/xl-storage-format-v2_test.go:348:73-348:82: `.String()`
$DIR/cmd/xl-storage-format-v2_test.go:367:3-367:30: `fi.VersionID = tc.versionID`
$DIR/cmd/xl-storage-format-v2_test.go:368:3-368:26: `fi.DataDir = tc.dataDir`
$DIR/cmd/xl-storage-format-v2_test.go:369:3-369:20: `fi.Data = tc.data`
$DIR/cmd/xl-storage-format-v2_test.go:371:4-371:16: `fi.Size = 42`
$DIR/cmd/xl-storage-format-v2_test.go:374:4-376:5: `fi.Metadata = map[string]string{
				xhttp.AmzRestore: tc.restoreObjStatus,
			}`
$DIR/cmd/xl-storage-format-v2_test.go:378:3-378:44: `fi.TransitionStatus = tc.transitionStatus`
$DIR/cmd/xl-storage-format-v2_test.go:379:3-379:62: `fi.ModTime = fi.ModTime.Add(time.Duration(i) * time.Second)`
$DIR/cmd/xl-storage-format-v2_test.go:379:18-379:62: `.ModTime.Add(time.Duration(i) * time.Second)`
$DIR/cmd/xl-storage-format-v2_test.go:379:35-379:47: `.Duration(i)`
$DIR/cmd/xl-storage-format-v2_test.go:380:3-380:36: `failOnErr(i+1, xl.AddVersion(fi))`
$DIR/cmd/xl-storage-format-v2_test.go:380:20-380:35: `.AddVersion(fi)`
$DIR/cmd/xl-storage-format-v2_test.go:381:3-381:40: `fi.ExpireRestored = tc.expireRestored`
$DIR/cmd/xl-storage-format-v2_test.go:382:3-382:36: `fileInfos = append(fileInfos, fi)`
$DIR/cmd/xl-storage-format-v2_test.go:386:24-386:66: `.findVersion(uuid.MustParse(tc.versionID))`
$DIR/cmd/xl-storage-format-v2_test.go:386:41-386:65: `.MustParse(tc.versionID)`
$DIR/cmd/xl-storage-format-v2_test.go:387:3-387:22: `failOnErr(i+1, err)`
$DIR/cmd/xl-storage-format-v2_test.go:388:15-388:84: `.SharedDataDirCount(version.getVersionID(), version.ObjectV2.DataDir)`
$DIR/cmd/xl-storage-format-v2_test.go:388:42-388:57: `.getVersionID()`
$DIR/cmd/xl-storage-format-v2_test.go:398:21-398:49: `.DeleteVersion(fileInfos[i])`
$DIR/cmd/xl-storage-format-v2_test.go:399:3-399:26: `failOnErr(count+1, err)`
$DIR/cmd/xl-storage-format-v2_test.go:403:3-403:10: `count++`
$DIR/cmd/xl-storage-format-v2_test.go:504:17-504:55: `.ReadFile("testdata/xl.meta-v1.2.zst")`
$DIR/cmd/xl-storage-format-v2_test.go:508:16-508:31: `.NewReader(nil)`
$DIR/cmd/xl-storage-format-v2_test.go:509:2-509:38: `data, err = dec.DecodeAll(data, nil)`
$DIR/cmd/xl-storage-format-v2_test.go:509:17-509:38: `.DecodeAll(data, nil)`
$DIR/cmd/xl-storage-format-v2_test.go:517:3-517:21: `xl.sortByModTime()`
$DIR/cmd/xl-storage-format-v2_test.go:517:5-517:21: `.sortByModTime()`
$DIR/cmd/xl-storage-format-v2_test.go:518:11-520:5: `.SliceIsSorted(xl.versions, func(i, j int) bool {
			return xl.versions[i].header.ModTime > xl.versions[j].header.ModTime
		})`
$DIR/cmd/xl-storage-format-v2_test.go:525:18-525:28: `.getIdx(i)`
$DIR/cmd/xl-storage-format-v2_test.go:530:17-530:26: `.header()`
$DIR/cmd/xl-storage-format-v2_test.go:536:2-543:4: `t.Run("load-legacy", func(t *testing.T) {
		var xl xlMetaV2
		err = xl.Load(data)
		if err != nil {
			t.Fatal(err)
		}
		test(t, &xl)
	})`
$DIR/cmd/xl-storage-format-v2_test.go:536:3-543:4: `.Run("load-legacy", func(t *testing.T) {
		var xl xlMetaV2
		err = xl.Load(data)
		if err != nil {
			t.Fatal(err)
		}
		test(t, &xl)
	})`
$DIR/cmd/xl-storage-format-v2_test.go:538:3-538:22: `err = xl.Load(data)`
$DIR/cmd/xl-storage-format-v2_test.go:538:11-538:22: `.Load(data)`
$DIR/cmd/xl-storage-format-v2_test.go:542:3-542:15: `test(t, &xl)`
$DIR/cmd/xl-storage-format-v2_test.go:544:2-560:4: `t.Run("roundtrip", func(t *testing.T) {
		var xl xlMetaV2
		err = xl.Load(data)
		if err != nil {
			t.Fatal(err)
		}
		data, err = xl.AppendTo(nil)
		if err != nil {
			t.Fatal(err)
		}
		xl = xlMetaV2{}
		err = xl.Load(data)
		if err != nil {
			t.Fatal(err)
		}
		test(t, &xl)
	})`
$DIR/cmd/xl-storage-format-v2_test.go:544:3-560:4: `.Run("roundtrip", func(t *testing.T) {
		var xl xlMetaV2
		err = xl.Load(data)
		if err != nil {
			t.Fatal(err)
		}
		data, err = xl.AppendTo(nil)
		if err != nil {
			t.Fatal(err)
		}
		xl = xlMetaV2{}
		err = xl.Load(data)
		if err != nil {
			t.Fatal(err)
		}
		test(t, &xl)
	})`
$DIR/cmd/xl-storage-format-v2_test.go:546:3-546:22: `err = xl.Load(data)`
$DIR/cmd/xl-storage-format-v2_test.go:546:11-546:22: `.Load(data)`
$DIR/cmd/xl-storage-format-v2_test.go:550:3-550:31: `data, err = xl.AppendTo(nil)`
$DIR/cmd/xl-storage-format-v2_test.go:550:17-550:31: `.AppendTo(nil)`
$DIR/cmd/xl-storage-format-v2_test.go:554:3-554:18: `xl = xlMetaV2{}`
$DIR/cmd/xl-storage-format-v2_test.go:555:3-555:22: `err = xl.Load(data)`
$DIR/cmd/xl-storage-format-v2_test.go:555:11-555:22: `.Load(data)`
$DIR/cmd/xl-storage-format-v2_test.go:559:3-559:15: `test(t, &xl)`
$DIR/cmd/xl-storage-format-v2_test.go:563:3-563:22: `err = xl.Load(data)`
$DIR/cmd/xl-storage-format-v2_test.go:563:11-563:22: `.Load(data)`
$DIR/cmd/xl-storage-format-v2_test.go:570:20-570:26: `.New()`
$DIR/cmd/xl-storage-format-v2_test.go:571:20-571:26: `.Now()`
$DIR/cmd/xl-storage-format-v2_test.go:571:26-571:37: `.UnixNano()`
$DIR/cmd/xl-storage-format-v2_test.go:576:3-576:16: `xl.data = nil`
$DIR/cmd/xl-storage-format-v2_test.go:577:3-577:32: `xl.versions = xl.versions[:2]`
$DIR/cmd/xl-storage-format-v2_test.go:578:3-578:24: `xl.addVersion(ventry)`
$DIR/cmd/xl-storage-format-v2_test.go:578:5-578:24: `.addVersion(ventry)`
$DIR/cmd/xl-storage-format-v2_test.go:580:3-580:31: `data, err = xl.AppendTo(nil)`
$DIR/cmd/xl-storage-format-v2_test.go:580:17-580:31: `.AppendTo(nil)`
$DIR/cmd/xl-storage-format-v2_test.go:594:11-594:22: `.Load(data)`
$DIR/cmd/xl-storage-format-v2_test.go:606:14-606:24: `.getIdx(0)`
$DIR/cmd/xl-storage-format-v2_test.go:615:2-615:84: `got = string(v.DeleteMarker.MetaSys[ReservedMetadataPrefixLower+ReplicaTimestamp])`
$DIR/cmd/xl-storage-format-v2_test.go:622:18-622:59: `.ReadFile("testdata/xl-meta-consist.zip")`
$DIR/cmd/xl-storage-format-v2_test.go:627:16-627:69: `.NewReader(bytes.NewReader(dataZ), int64(len(dataZ)))`
$DIR/cmd/xl-storage-format-v2_test.go:627:32-627:49: `.NewReader(dataZ)`
$DIR/cmd/xl-storage-format-v2_test.go:635:18-635:25: `.Open()`
$DIR/cmd/xl-storage-format-v2_test.go:640:17-640:29: `.ReadAll(in)`
$DIR/cmd/xl-storage-format-v2_test.go:645:3-645:30: `err = xl.LoadOrConvert(buf)`
$DIR/cmd/xl-storage-format-v2_test.go:645:11-645:30: `.LoadOrConvert(buf)`
$DIR/cmd/xl-storage-format-v2_test.go:649:3-649:35: `vers = append(vers, xl.versions)`
$DIR/cmd/xl-storage-format-v2_test.go:653:16-653:36: `.Marshal(ver.header)`
$DIR/cmd/xl-storage-format-v2_test.go:656:4-656:36: `_, _ = x.unmarshalV(0, ver.meta)`
$DIR/cmd/xl-storage-format-v2_test.go:656:12-656:36: `.unmarshalV(0, ver.meta)`
$DIR/cmd/xl-storage-format-v2_test.go:657:4-657:26: `b, _ = json.Marshal(x)`
$DIR/cmd/xl-storage-format-v2_test.go:657:15-657:26: `.Marshal(x)`
$DIR/cmd/xl-storage-format-v2_test.go:663:3-674:5: `t.Run(fmt.Sprintf("non-strict-q%d", i), func(t *testing.T) {
			merged := mergeXLV2Versions(i, false, 0, vers...)
			if len(merged) == 0 {
				t.Error("Did not get any results")
				return
			}
			for _, ver := range merged {
				if ver.header.Type == invalidVersionType {
					t.Errorf("Invalid result returned: %v", ver.header)
				}
			}
		})`
$DIR/cmd/xl-storage-format-v2_test.go:663:4-674:5: `.Run(fmt.Sprintf("non-strict-q%d", i), func(t *testing.T) {
			merged := mergeXLV2Versions(i, false, 0, vers...)
			if len(merged) == 0 {
				t.Error("Did not get any results")
				return
			}
			for _, ver := range merged {
				if ver.header.Type == invalidVersionType {
					t.Errorf("Invalid result returned: %v", ver.header)
				}
			}
		})`
$DIR/cmd/xl-storage-format-v2_test.go:663:12-663:41: `.Sprintf("non-strict-q%d", i)`
$DIR/cmd/xl-storage-format-v2_test.go:675:3-686:5: `t.Run(fmt.Sprintf("strict-q%d", i), func(t *testing.T) {
			merged := mergeXLV2Versions(i, true, 0, vers...)
			if len(merged) == 0 {
				t.Error("Did not get any results")
				return
			}
			for _, ver := range merged {
				if ver.header.Type == invalidVersionType {
					t.Errorf("Invalid result returned: %v", ver.header)
				}
			}
		})`
$DIR/cmd/xl-storage-format-v2_test.go:675:4-686:5: `.Run(fmt.Sprintf("strict-q%d", i), func(t *testing.T) {
			merged := mergeXLV2Versions(i, true, 0, vers...)
			if len(merged) == 0 {
				t.Error("Did not get any results")
				return
			}
			for _, ver := range merged {
				if ver.header.Type == invalidVersionType {
					t.Errorf("Invalid result returned: %v", ver.header)
				}
			}
		})`
$DIR/cmd/xl-storage-format-v2_test.go:675:12-675:37: `.Sprintf("strict-q%d", i)`
$DIR/cmd/xl-storage-format-v2_test.go:687:3-708:5: `t.Run(fmt.Sprintf("signature-q%d", i), func(t *testing.T) {
			// Mutate signature, non strict
			vMod := make([][]xlMetaV2ShallowVersion, 0, len(vers))
			for i, ver := range vers {
				newVers := make([]xlMetaV2ShallowVersion, 0, len(ver))
				for _, v := range ver {
					v.header.Signature = [4]byte{byte(i + 10), 0, 0, 0}
					newVers = append(newVers, v)
				}
				vMod = append(vMod, newVers)
			}
			merged := mergeXLV2Versions(i, false, 0, vMod...)
			if len(merged) == 0 {
				t.Error("Did not get any results")
				return
			}
			for _, ver := range merged {
				if ver.header.Type == invalidVersionType {
					t.Errorf("Invalid result returned: %v", ver.header)
				}
			}
		})`
$DIR/cmd/xl-storage-format-v2_test.go:687:4-708:5: `.Run(fmt.Sprintf("signature-q%d", i), func(t *testing.T) {
			// Mutate signature, non strict
			vMod := make([][]xlMetaV2ShallowVersion, 0, len(vers))
			for i, ver := range vers {
				newVers := make([]xlMetaV2ShallowVersion, 0, len(ver))
				for _, v := range ver {
					v.header.Signature = [4]byte{byte(i + 10), 0, 0, 0}
					newVers = append(newVers, v)
				}
				vMod = append(vMod, newVers)
			}
			merged := mergeXLV2Versions(i, false, 0, vMod...)
			if len(merged) == 0 {
				t.Error("Did not get any results")
				return
			}
			for _, ver := range merged {
				if ver.header.Type == invalidVersionType {
					t.Errorf("Invalid result returned: %v", ver.header)
				}
			}
		})`
$DIR/cmd/xl-storage-format-v2_test.go:687:12-687:40: `.Sprintf("signature-q%d", i)`
$DIR/cmd/xl-storage-format-v2_test.go:693:6-693:57: `v.header.Signature = [4]byte{byte(i + 10), 0, 0, 0}`
$DIR/cmd/xl-storage-format-v2_test.go:694:6-694:34: `newVers = append(newVers, v)`
$DIR/cmd/xl-storage-format-v2_test.go:696:5-696:33: `vMod = append(vMod, newVers)`
$DIR/cmd/xl-storage-format-v2_test.go:709:3-734:5: `t.Run(fmt.Sprintf("modtime-q%d", i), func(t *testing.T) {
			// Mutate modtime, but rest is consistent.
			vMod := make([][]xlMetaV2ShallowVersion, 0, len(vers))
			for i, ver := range vers {
				newVers := make([]xlMetaV2ShallowVersion, 0, len(ver))
				for _, v := range ver {
					v.header.ModTime += int64(i)
					newVers = append(newVers, v)
				}
				vMod = append(vMod, newVers)
			}
			merged := mergeXLV2Versions(i, false, 0, vMod...)
			if len(merged) == 0 && i < 2 {
				t.Error("Did not get any results")
				return
			}
			if len(merged) > 0 && i >= 2 {
				t.Error("Got unexpected results")
				return
			}
			for _, ver := range merged {
				if ver.header.Type == invalidVersionType {
					t.Errorf("Invalid result returned: %v", ver.header)
				}
			}
		})`
$DIR/cmd/xl-storage-format-v2_test.go:709:4-734:5: `.Run(fmt.Sprintf("modtime-q%d", i), func(t *testing.T) {
			// Mutate modtime, but rest is consistent.
			vMod := make([][]xlMetaV2ShallowVersion, 0, len(vers))
			for i, ver := range vers {
				newVers := make([]xlMetaV2ShallowVersion, 0, len(ver))
				for _, v := range ver {
					v.header.ModTime += int64(i)
					newVers = append(newVers, v)
				}
				vMod = append(vMod, newVers)
			}
			merged := mergeXLV2Versions(i, false, 0, vMod...)
			if len(merged) == 0 && i < 2 {
				t.Error("Did not get any results")
				return
			}
			if len(merged) > 0 && i >= 2 {
				t.Error("Got unexpected results")
				return
			}
			for _, ver := range merged {
				if ver.header.Type == invalidVersionType {
					t.Errorf("Invalid result returned: %v", ver.header)
				}
			}
		})`
$DIR/cmd/xl-storage-format-v2_test.go:709:12-709:38: `.Sprintf("modtime-q%d", i)`
$DIR/cmd/xl-storage-format-v2_test.go:715:6-715:34: `v.header.ModTime += int64(i)`
$DIR/cmd/xl-storage-format-v2_test.go:716:6-716:34: `newVers = append(newVers, v)`
$DIR/cmd/xl-storage-format-v2_test.go:718:5-718:33: `vMod = append(vMod, newVers)`
$DIR/cmd/xl-storage-format-v2_test.go:735:3-756:5: `t.Run(fmt.Sprintf("flags-q%d", i), func(t *testing.T) {
			// Mutate signature, non strict
			vMod := make([][]xlMetaV2ShallowVersion, 0, len(vers))
			for i, ver := range vers {
				newVers := make([]xlMetaV2ShallowVersion, 0, len(ver))
				for _, v := range ver {
					v.header.Flags += xlFlags(i)
					newVers = append(newVers, v)
				}
				vMod = append(vMod, newVers)
			}
			merged := mergeXLV2Versions(i, false, 0, vMod...)
			if len(merged) == 0 {
				t.Error("Did not get any results")
				return
			}
			for _, ver := range merged {
				if ver.header.Type == invalidVersionType {
					t.Errorf("Invalid result returned: %v", ver.header)
				}
			}
		})`
$DIR/cmd/xl-storage-format-v2_test.go:735:4-756:5: `.Run(fmt.Sprintf("flags-q%d", i), func(t *testing.T) {
			// Mutate signature, non strict
			vMod := make([][]xlMetaV2ShallowVersion, 0, len(vers))
			for i, ver := range vers {
				newVers := make([]xlMetaV2ShallowVersion, 0, len(ver))
				for _, v := range ver {
					v.header.Flags += xlFlags(i)
					newVers = append(newVers, v)
				}
				vMod = append(vMod, newVers)
			}
			merged := mergeXLV2Versions(i, false, 0, vMod...)
			if len(merged) == 0 {
				t.Error("Did not get any results")
				return
			}
			for _, ver := range merged {
				if ver.header.Type == invalidVersionType {
					t.Errorf("Invalid result returned: %v", ver.header)
				}
			}
		})`
$DIR/cmd/xl-storage-format-v2_test.go:735:12-735:36: `.Sprintf("flags-q%d", i)`
$DIR/cmd/xl-storage-format-v2_test.go:741:6-741:34: `v.header.Flags += xlFlags(i)`
$DIR/cmd/xl-storage-format-v2_test.go:742:6-742:34: `newVers = append(newVers, v)`
$DIR/cmd/xl-storage-format-v2_test.go:744:5-744:33: `vMod = append(vMod, newVers)`
$DIR/cmd/xl-storage-format-v2_test.go:757:3-782:5: `t.Run(fmt.Sprintf("versionid-q%d", i), func(t *testing.T) {
			// Mutate signature, non strict
			vMod := make([][]xlMetaV2ShallowVersion, 0, len(vers))
			for i, ver := range vers {
				newVers := make([]xlMetaV2ShallowVersion, 0, len(ver))
				for _, v := range ver {
					v.header.VersionID[0] += byte(i)
					newVers = append(newVers, v)
				}
				vMod = append(vMod, newVers)
			}
			merged := mergeXLV2Versions(i, false, 0, vMod...)
			if len(merged) == 0 && i < 2 {
				t.Error("Did not get any results")
				return
			}
			if len(merged) > 0 && i >= 2 {
				t.Error("Got unexpected results")
				return
			}
			for _, ver := range merged {
				if ver.header.Type == invalidVersionType {
					t.Errorf("Invalid result returned: %v", ver.header)
				}
			}
		})`
$DIR/cmd/xl-storage-format-v2_test.go:757:4-782:5: `.Run(fmt.Sprintf("versionid-q%d", i), func(t *testing.T) {
			// Mutate signature, non strict
			vMod := make([][]xlMetaV2ShallowVersion, 0, len(vers))
			for i, ver := range vers {
				newVers := make([]xlMetaV2ShallowVersion, 0, len(ver))
				for _, v := range ver {
					v.header.VersionID[0] += byte(i)
					newVers = append(newVers, v)
				}
				vMod = append(vMod, newVers)
			}
			merged := mergeXLV2Versions(i, false, 0, vMod...)
			if len(merged) == 0 && i < 2 {
				t.Error("Did not get any results")
				return
			}
			if len(merged) > 0 && i >= 2 {
				t.Error("Got unexpected results")
				return
			}
			for _, ver := range merged {
				if ver.header.Type == invalidVersionType {
					t.Errorf("Invalid result returned: %v", ver.header)
				}
			}
		})`
$DIR/cmd/xl-storage-format-v2_test.go:757:12-757:40: `.Sprintf("versionid-q%d", i)`
$DIR/cmd/xl-storage-format-v2_test.go:763:6-763:38: `v.header.VersionID[0] += byte(i)`
$DIR/cmd/xl-storage-format-v2_test.go:764:6-764:34: `newVers = append(newVers, v)`
$DIR/cmd/xl-storage-format-v2_test.go:766:5-766:33: `vMod = append(vMod, newVers)`
$DIR/cmd/xl-storage-format-v2_test.go:783:3-808:5: `t.Run(fmt.Sprintf("strict-signature-q%d", i), func(t *testing.T) {
			// Mutate signature, non strict
			vMod := make([][]xlMetaV2ShallowVersion, 0, len(vers))
			for i, ver := range vers {
				newVers := make([]xlMetaV2ShallowVersion, 0, len(ver))
				for _, v := range ver {
					v.header.Signature = [4]byte{byte(i + 10), 0, 0, 0}
					newVers = append(newVers, v)
				}
				vMod = append(vMod, newVers)
			}
			merged := mergeXLV2Versions(i, true, 0, vMod...)
			if len(merged) == 0 && i < 2 {
				t.Error("Did not get any results")
				return
			}
			if len(merged) > 0 && i >= 2 {
				t.Error("Got unexpected results")
				return
			}
			for _, ver := range merged {
				if ver.header.Type == invalidVersionType {
					t.Errorf("Invalid result returned: %v", ver.header)
				}
			}
		})`
$DIR/cmd/xl-storage-format-v2_test.go:783:4-808:5: `.Run(fmt.Sprintf("strict-signature-q%d", i), func(t *testing.T) {
			// Mutate signature, non strict
			vMod := make([][]xlMetaV2ShallowVersion, 0, len(vers))
			for i, ver := range vers {
				newVers := make([]xlMetaV2ShallowVersion, 0, len(ver))
				for _, v := range ver {
					v.header.Signature = [4]byte{byte(i + 10), 0, 0, 0}
					newVers = append(newVers, v)
				}
				vMod = append(vMod, newVers)
			}
			merged := mergeXLV2Versions(i, true, 0, vMod...)
			if len(merged) == 0 && i < 2 {
				t.Error("Did not get any results")
				return
			}
			if len(merged) > 0 && i >= 2 {
				t.Error("Got unexpected results")
				return
			}
			for _, ver := range merged {
				if ver.header.Type == invalidVersionType {
					t.Errorf("Invalid result returned: %v", ver.header)
				}
			}
		})`
$DIR/cmd/xl-storage-format-v2_test.go:783:12-783:47: `.Sprintf("strict-signature-q%d", i)`
$DIR/cmd/xl-storage-format-v2_test.go:789:6-789:57: `v.header.Signature = [4]byte{byte(i + 10), 0, 0, 0}`
$DIR/cmd/xl-storage-format-v2_test.go:790:6-790:34: `newVers = append(newVers, v)`
$DIR/cmd/xl-storage-format-v2_test.go:792:5-792:33: `vMod = append(vMod, newVers)`
$DIR/cmd/xl-storage-format-v2_test.go:809:3-834:5: `t.Run(fmt.Sprintf("strict-modtime-q%d", i), func(t *testing.T) {
			// Mutate signature, non strict
			vMod := make([][]xlMetaV2ShallowVersion, 0, len(vers))
			for i, ver := range vers {
				newVers := make([]xlMetaV2ShallowVersion, 0, len(ver))
				for _, v := range ver {
					v.header.ModTime += int64(i + 10)
					newVers = append(newVers, v)
				}
				vMod = append(vMod, newVers)
			}
			merged := mergeXLV2Versions(i, true, 0, vMod...)
			if len(merged) == 0 && i < 2 {
				t.Error("Did not get any results")
				return
			}
			if len(merged) > 0 && i >= 2 {
				t.Error("Got unexpected results", len(merged), merged[0].header)
				return
			}
			for _, ver := range merged {
				if ver.header.Type == invalidVersionType {
					t.Errorf("Invalid result returned: %v", ver.header)
				}
			}
		})`
$DIR/cmd/xl-storage-format-v2_test.go:809:4-834:5: `.Run(fmt.Sprintf("strict-modtime-q%d", i), func(t *testing.T) {
			// Mutate signature, non strict
			vMod := make([][]xlMetaV2ShallowVersion, 0, len(vers))
			for i, ver := range vers {
				newVers := make([]xlMetaV2ShallowVersion, 0, len(ver))
				for _, v := range ver {
					v.header.ModTime += int64(i + 10)
					newVers = append(newVers, v)
				}
				vMod = append(vMod, newVers)
			}
			merged := mergeXLV2Versions(i, true, 0, vMod...)
			if len(merged) == 0 && i < 2 {
				t.Error("Did not get any results")
				return
			}
			if len(merged) > 0 && i >= 2 {
				t.Error("Got unexpected results", len(merged), merged[0].header)
				return
			}
			for _, ver := range merged {
				if ver.header.Type == invalidVersionType {
					t.Errorf("Invalid result returned: %v", ver.header)
				}
			}
		})`
$DIR/cmd/xl-storage-format-v2_test.go:809:12-809:45: `.Sprintf("strict-modtime-q%d", i)`
$DIR/cmd/xl-storage-format-v2_test.go:815:6-815:39: `v.header.ModTime += int64(i + 10)`
$DIR/cmd/xl-storage-format-v2_test.go:816:6-816:34: `newVers = append(newVers, v)`
$DIR/cmd/xl-storage-format-v2_test.go:818:5-818:33: `vMod = append(vMod, newVers)`
$DIR/cmd/xl-storage-format-v2_test.go:835:3-860:5: `t.Run(fmt.Sprintf("strict-flags-q%d", i), func(t *testing.T) {
			// Mutate signature, non strict
			vMod := make([][]xlMetaV2ShallowVersion, 0, len(vers))
			for i, ver := range vers {
				newVers := make([]xlMetaV2ShallowVersion, 0, len(ver))
				for _, v := range ver {
					v.header.Flags += xlFlags(i + 10)
					newVers = append(newVers, v)
				}
				vMod = append(vMod, newVers)
			}
			merged := mergeXLV2Versions(i, true, 0, vMod...)
			if len(merged) == 0 && i < 2 {
				t.Error("Did not get any results")
				return
			}
			if len(merged) > 0 && i >= 2 {
				t.Error("Got unexpected results", len(merged))
				return
			}
			for _, ver := range merged {
				if ver.header.Type == invalidVersionType {
					t.Errorf("Invalid result returned: %v", ver.header)
				}
			}
		})`
$DIR/cmd/xl-storage-format-v2_test.go:835:4-860:5: `.Run(fmt.Sprintf("strict-flags-q%d", i), func(t *testing.T) {
			// Mutate signature, non strict
			vMod := make([][]xlMetaV2ShallowVersion, 0, len(vers))
			for i, ver := range vers {
				newVers := make([]xlMetaV2ShallowVersion, 0, len(ver))
				for _, v := range ver {
					v.header.Flags += xlFlags(i + 10)
					newVers = append(newVers, v)
				}
				vMod = append(vMod, newVers)
			}
			merged := mergeXLV2Versions(i, true, 0, vMod...)
			if len(merged) == 0 && i < 2 {
				t.Error("Did not get any results")
				return
			}
			if len(merged) > 0 && i >= 2 {
				t.Error("Got unexpected results", len(merged))
				return
			}
			for _, ver := range merged {
				if ver.header.Type == invalidVersionType {
					t.Errorf("Invalid result returned: %v", ver.header)
				}
			}
		})`
$DIR/cmd/xl-storage-format-v2_test.go:835:12-835:43: `.Sprintf("strict-flags-q%d", i)`
$DIR/cmd/xl-storage-format-v2_test.go:841:6-841:39: `v.header.Flags += xlFlags(i + 10)`
$DIR/cmd/xl-storage-format-v2_test.go:842:6-842:34: `newVers = append(newVers, v)`
$DIR/cmd/xl-storage-format-v2_test.go:844:5-844:33: `vMod = append(vMod, newVers)`
$DIR/cmd/xl-storage-format-v2_test.go:861:3-886:5: `t.Run(fmt.Sprintf("strict-type-q%d", i), func(t *testing.T) {
			// Mutate signature, non strict
			vMod := make([][]xlMetaV2ShallowVersion, 0, len(vers))
			for i, ver := range vers {
				newVers := make([]xlMetaV2ShallowVersion, 0, len(ver))
				for _, v := range ver {
					v.header.Type += VersionType(i + 10)
					newVers = append(newVers, v)
				}
				vMod = append(vMod, newVers)
			}
			merged := mergeXLV2Versions(i, true, 0, vMod...)
			if len(merged) == 0 && i < 2 {
				t.Error("Did not get any results")
				return
			}
			if len(merged) > 0 && i >= 2 {
				t.Error("Got unexpected results", len(merged))
				return
			}
			for _, ver := range merged {
				if ver.header.Type == invalidVersionType {
					t.Errorf("Invalid result returned: %v", ver.header)
				}
			}
		})`
$DIR/cmd/xl-storage-format-v2_test.go:861:4-886:5: `.Run(fmt.Sprintf("strict-type-q%d", i), func(t *testing.T) {
			// Mutate signature, non strict
			vMod := make([][]xlMetaV2ShallowVersion, 0, len(vers))
			for i, ver := range vers {
				newVers := make([]xlMetaV2ShallowVersion, 0, len(ver))
				for _, v := range ver {
					v.header.Type += VersionType(i + 10)
					newVers = append(newVers, v)
				}
				vMod = append(vMod, newVers)
			}
			merged := mergeXLV2Versions(i, true, 0, vMod...)
			if len(merged) == 0 && i < 2 {
				t.Error("Did not get any results")
				return
			}
			if len(merged) > 0 && i >= 2 {
				t.Error("Got unexpected results", len(merged))
				return
			}
			for _, ver := range merged {
				if ver.header.Type == invalidVersionType {
					t.Errorf("Invalid result returned: %v", ver.header)
				}
			}
		})`
$DIR/cmd/xl-storage-format-v2_test.go:861:12-861:42: `.Sprintf("strict-type-q%d", i)`
$DIR/cmd/xl-storage-format-v2_test.go:867:6-867:42: `v.header.Type += VersionType(i + 10)`
$DIR/cmd/xl-storage-format-v2_test.go:868:6-868:34: `newVers = append(newVers, v)`
$DIR/cmd/xl-storage-format-v2_test.go:870:5-870:33: `vMod = append(vMod, newVers)`
$DIR/cmd/xl-storage-format-v2_test.go:898:2-898:138: `vDelMarker.meta, _ = base64.StdEncoding.DecodeString("gqRUeXBlAqZEZWxPYmqDoklExBCvwGEaY+BAO4B4vyG5ERorpU1UaW1l0xbgJlsWE9IHp01ldGFTeXOA")`
$DIR/cmd/xl-storage-format-v2_test.go:898:29-898:138: `.StdEncoding.DecodeString("gqRUeXBlAqZEZWxPYmqDoklExBCvwGEaY+BAO4B4vyG5ERorpU1UaW1l0xbgJlsWE9IHp01ldGFTeXOA")`
$DIR/cmd/xl-storage-format-v2_test.go:907:2-907:508: `vObj.meta, _ = base64.StdEncoding.DecodeString("gqRUeXBlAaVWMk9iat4AEaJJRMQQEkaOteYCSrWB3nqppSIKTqRERGlyxBAO8fXSJ5RI+YEtsp8KneVVpkVjQWxnbwGjRWNNDKNFY04Ep0VjQlNpemXSABAAAKdFY0luZGV4BaZFY0Rpc3TcABAFBgcICQoLDA0ODxABAgMEqENTdW1BbGdvAahQYXJ0TnVtc5EBqVBhcnRFVGFnc8CpUGFydFNpemVzkdEBL6pQYXJ0QVNpemVzkdEBL6RTaXpl0QEvpU1UaW1l0xbgJhIa6ABvp01ldGFTeXOBvHgtbWluaW8taW50ZXJuYWwtaW5saW5lLWRhdGHEBHRydWWnTWV0YVVzcoKsY29udGVudC10eXBluGFwcGxpY2F0aW9uL29jdGV0LXN0cmVhbaRldGFn2SBlYTIxMDE2MmVlYjRhZGMzMWZmOTg0Y2I3NDRkNmFmNg==")`
$DIR/cmd/xl-storage-format-v2_test.go:907:23-907:508: `.StdEncoding.DecodeString("gqRUeXBlAaVWMk9iat4AEaJJRMQQEkaOteYCSrWB3nqppSIKTqRERGlyxBAO8fXSJ5RI+YEtsp8KneVVpkVjQWxnbwGjRWNNDKNFY04Ep0VjQlNpemXSABAAAKdFY0luZGV4BaZFY0Rpc3TcABAFBgcICQoLDA0ODxABAgMEqENTdW1BbGdvAahQYXJ0TnVtc5EBqVBhcnRFVGFnc8CpUGFydFNpemVzkdEBL6pQYXJ0QVNpemVzkdEBL6RTaXpl0QEvpU1UaW1l0xbgJhIa6ABvp01ldGFTeXOBvHgtbWluaW8taW50ZXJuYWwtaW5saW5lLWRhdGHEBHRydWWnTWV0YVVzcoKsY29udGVudC10eXBluGFwcGxpY2F0aW9uL29jdGV0LXN0cmVhbaRldGFn2SBlYTIxMDE2MmVlYjRhZGMzMWZmOTg0Y2I3NDRkNmFmNg==")`
$DIR/cmd/xl-storage-format-v2_test.go:997:3-1011:5: `t.Run(test.name, func(t *testing.T) {
			// Run multiple times, shuffling the input order.
			for i := int64(0); i < 50; i++ {
				t.Run(fmt.Sprint(i), func(t *testing.T) {
					rng := rand.New(rand.NewSource(i))
					rng.Shuffle(len(test.input), func(i, j int) {
						test.input[i], test.input[j] = test.input[j], test.input[i]
					})
					got := mergeXLV2Versions(test.quorum, true, 0, test.input...)
					if !reflect.DeepEqual(test.want, got) {
						t.Errorf("want %v != got %v", test.want, got)
					}
				})
			}
		})`
$DIR/cmd/xl-storage-format-v2_test.go:997:4-1011:5: `.Run(test.name, func(t *testing.T) {
			// Run multiple times, shuffling the input order.
			for i := int64(0); i < 50; i++ {
				t.Run(fmt.Sprint(i), func(t *testing.T) {
					rng := rand.New(rand.NewSource(i))
					rng.Shuffle(len(test.input), func(i, j int) {
						test.input[i], test.input[j] = test.input[j], test.input[i]
					})
					got := mergeXLV2Versions(test.quorum, true, 0, test.input...)
					if !reflect.DeepEqual(test.want, got) {
						t.Errorf("want %v != got %v", test.want, got)
					}
				})
			}
		})`
$DIR/cmd/xl-storage-format-v2_test.go:1000:5-1009:7: `t.Run(fmt.Sprint(i), func(t *testing.T) {
					rng := rand.New(rand.NewSource(i))
					rng.Shuffle(len(test.input), func(i, j int) {
						test.input[i], test.input[j] = test.input[j], test.input[i]
					})
					got := mergeXLV2Versions(test.quorum, true, 0, test.input...)
					if !reflect.DeepEqual(test.want, got) {
						t.Errorf("want %v != got %v", test.want, got)
					}
				})`
$DIR/cmd/xl-storage-format-v2_test.go:1000:6-1009:7: `.Run(fmt.Sprint(i), func(t *testing.T) {
					rng := rand.New(rand.NewSource(i))
					rng.Shuffle(len(test.input), func(i, j int) {
						test.input[i], test.input[j] = test.input[j], test.input[i]
					})
					got := mergeXLV2Versions(test.quorum, true, 0, test.input...)
					if !reflect.DeepEqual(test.want, got) {
						t.Errorf("want %v != got %v", test.want, got)
					}
				})`
$DIR/cmd/xl-storage-format-v2_test.go:1000:14-1000:24: `.Sprint(i)`
$DIR/cmd/xl-storage-format-v2_test.go:1001:17-1001:40: `.New(rand.NewSource(i))`
$DIR/cmd/xl-storage-format-v2_test.go:1001:26-1001:39: `.NewSource(i)`
$DIR/cmd/xl-storage-format-v2_test.go:1002:6-1004:8: `rng.Shuffle(len(test.input), func(i, j int) {
						test.input[i], test.input[j] = test.input[j], test.input[i]
					})`
$DIR/cmd/xl-storage-format-v2_test.go:1002:9-1004:8: `.Shuffle(len(test.input), func(i, j int) {
						test.input[i], test.input[j] = test.input[j], test.input[i]
					})`
$DIR/cmd/xl-storage-format-v2_test.go:1003:7-1003:66: `test.input[i], test.input[j] = test.input[j], test.input[i]`
$DIR/cmd/xl-storage-format-v2_test.go:1006:17-1006:43: `.DeepEqual(test.want, got)`
$DIR/cmd/xl-storage-format-v2_test.go:1016:18-1016:57: `.ReadFile("testdata/xl-meta-merge.zip")`
$DIR/cmd/xl-storage-format-v2_test.go:1021:16-1021:69: `.NewReader(bytes.NewReader(dataZ), int64(len(dataZ)))`
$DIR/cmd/xl-storage-format-v2_test.go:1021:32-1021:49: `.NewReader(dataZ)`
$DIR/cmd/xl-storage-format-v2_test.go:1030:18-1030:25: `.Open()`
$DIR/cmd/xl-storage-format-v2_test.go:1035:17-1035:29: `.ReadAll(in)`
$DIR/cmd/xl-storage-format-v2_test.go:1039:3-1039:30: `buf = xlMetaV2TrimData(buf)`
$DIR/cmd/xl-storage-format-v2_test.go:1041:3-1044:5: `vers = append(vers, metaCacheEntry{
			name:     "a",
			metadata: buf,
		})`
$DIR/cmd/xl-storage-format-v2_test.go:1049:14-1049:44: `.New(rand.NewSource(int64(i)))`
$DIR/cmd/xl-storage-format-v2_test.go:1049:23-1049:43: `.NewSource(int64(i))`
$DIR/cmd/xl-storage-format-v2_test.go:1050:3-1052:5: `rng.Shuffle(len(vers), func(i, j int) {
			vers[i], vers[j] = vers[j], vers[i]
		})`
$DIR/cmd/xl-storage-format-v2_test.go:1050:6-1052:5: `.Shuffle(len(vers), func(i, j int) {
			vers[i], vers[j] = vers[j], vers[i]
		})`
$DIR/cmd/xl-storage-format-v2_test.go:1051:4-1051:39: `vers[i], vers[j] = vers[j], vers[i]`
$DIR/cmd/xl-storage-format-v2_test.go:1055:4-1055:18: `v.cached = nil`
$DIR/cmd/xl-storage-format-v2_test.go:1057:4-1057:11: `ch <- v`
$DIR/cmd/xl-storage-format-v2_test.go:1058:4-1058:13: `close(ch)`
$DIR/cmd/xl-storage-format-v2_test.go:1059:4-1059:33: `entries = append(entries, ch)`
$DIR/cmd/xl-storage-format-v2_test.go:1062:36-1062:49: `.Background()`
$DIR/cmd/xl-storage-format-v2_test.go:1071:17-1071:26: `.xlmeta()`
$DIR/cmd/xl-storage-format-v2_test.go:1078:11-1080:5: `.SliceIsSorted(xl.versions, func(i, j int) bool {
			return xl.versions[i].header.sortsBefore(xl.versions[j].header)
		})`
$DIR/cmd/xl-storage-format-v2_test.go:1079:25-1079:67: `.header.sortsBefore(xl.versions[j].header)`
$DIR/cmd/xl-storage-format-v2_test.go:1089:3-1089:13: `t.Helper()`
$DIR/cmd/xl-storage-format-v2_test.go:1089:4-1089:13: `.Helper()`
$DIR/cmd/xl-storage-format-v2_test.go:1101:18-1101:24: `.Now()`
$DIR/cmd/xl-storage-format-v2_test.go:1105:29-1105:38: `.String()`
$DIR/cmd/xl-storage-format-v2_test.go:1120:2-1120:17: `fi.SetHealing()`
$DIR/cmd/xl-storage-format-v2_test.go:1120:4-1120:17: `.SetHealing()`
$DIR/cmd/xl-storage-format-v2_test.go:1121:2-1121:30: `failOnErr(xl.AddVersion(fi))`
$DIR/cmd/xl-storage-format-v2_test.go:1121:14-1121:29: `.AddVersion(fi)`
$DIR/cmd/xl-storage-format-v2_test.go:1124:2-1124:72: `fi, err = xl.ToFileInfo(fi.Volume, fi.Name, fi.VersionID, false, true)`
$DIR/cmd/xl-storage-format-v2_test.go:1124:14-1124:72: `.ToFileInfo(fi.Volume, fi.Name, fi.VersionID, false, true)`
$DIR/cmd/xl-storage-format-v2_test.go:1129:7-1129:17: `.Healing()`
$DIR/cmd/xl-storage-format_test.go:238:16-238:56: `.Unmarshal(xlMetaJSON, &unMarshalXLMeta)`
$DIR/cmd/xl-storage-format_test.go:244:16-244:55: `.Unmarshal(xlMetaJSON, &jsoniterXLMeta)`
$DIR/cmd/xl-storage-format_test.go:256:16-256:56: `.Unmarshal(xlMetaJSON, &unMarshalXLMeta)`
$DIR/cmd/xl-storage-format_test.go:262:16-262:55: `.Unmarshal(xlMetaJSON, &jsoniterXLMeta)`
$DIR/cmd/xl-storage-free-version_test.go:47:3-47:13: `t.Helper()`
$DIR/cmd/xl-storage-free-version_test.go:47:4-47:13: `.Helper()`
$DIR/cmd/xl-storage-free-version_test.go:57:3-57:13: `t.Helper()`
$DIR/cmd/xl-storage-free-version_test.go:57:4-57:13: `.Helper()`
$DIR/cmd/xl-storage-free-version_test.go:59:3-59:12: `counter++`
$DIR/cmd/xl-storage-free-version_test.go:70:25-70:31: `.Now()`
$DIR/cmd/xl-storage-free-version_test.go:76:29-76:38: `.String()`
$DIR/cmd/xl-storage-free-version_test.go:93:2-93:29: `fatalErr(xl.AddVersion(fi))`
$DIR/cmd/xl-storage-free-version_test.go:93:13-93:28: `.AddVersion(fi)`
$DIR/cmd/xl-storage-free-version_test.go:94:2-94:10: `report()`
$DIR/cmd/xl-storage-free-version_test.go:98:2-98:23: `tierfi.VersionID = ""`
$DIR/cmd/xl-storage-free-version_test.go:99:2-99:33: `fatalErr(xl.AddVersion(tierfi))`
$DIR/cmd/xl-storage-free-version_test.go:99:13-99:32: `.AddVersion(tierfi)`
$DIR/cmd/xl-storage-free-version_test.go:100:2-100:10: `report()`
$DIR/cmd/xl-storage-free-version_test.go:101:2-101:56: `tierfi.TransitionStatus = lifecycle.TransitionComplete`
$DIR/cmd/xl-storage-free-version_test.go:102:2-102:44: `tierfi.TransitionedObjName = mustGetUUID()`
$DIR/cmd/xl-storage-free-version_test.go:103:2-103:39: `tierfi.TransitionTier = "MINIOTIER-1"`
$DIR/cmd/xl-storage-free-version_test.go:105:2-105:35: `_, err = xl.DeleteVersion(tierfi)`
$DIR/cmd/xl-storage-free-version_test.go:105:13-105:35: `.DeleteVersion(tierfi)`
$DIR/cmd/xl-storage-free-version_test.go:106:2-106:15: `fatalErr(err)`
$DIR/cmd/xl-storage-free-version_test.go:107:2-107:10: `report()`
$DIR/cmd/xl-storage-free-version_test.go:115:2-115:42: `newtierfi.SetTierFreeVersionID(fvIDs[0])`
$DIR/cmd/xl-storage-free-version_test.go:115:11-115:42: `.SetTierFreeVersionID(fvIDs[0])`
$DIR/cmd/xl-storage-free-version_test.go:116:2-116:40: `fatalErr(xl.AddFreeVersion(newtierfi))`
$DIR/cmd/xl-storage-free-version_test.go:116:13-116:39: `.AddFreeVersion(newtierfi)`
$DIR/cmd/xl-storage-free-version_test.go:117:2-117:10: `report()`
$DIR/cmd/xl-storage-free-version_test.go:118:2-118:36: `fatalErr(xl.AddVersion(newtierfi))`
$DIR/cmd/xl-storage-free-version_test.go:118:13-118:35: `.AddVersion(newtierfi)`
$DIR/cmd/xl-storage-free-version_test.go:119:2-119:10: `report()`
$DIR/cmd/xl-storage-free-version_test.go:122:2-122:31: `newtierfi.TransitionTier = ""`
$DIR/cmd/xl-storage-free-version_test.go:123:2-123:36: `newtierfi.TransitionedObjName = ""`
$DIR/cmd/xl-storage-free-version_test.go:124:2-124:33: `newtierfi.TransitionStatus = ""`
$DIR/cmd/xl-storage-free-version_test.go:125:2-125:42: `newtierfi.SetTierFreeVersionID(fvIDs[1])`
$DIR/cmd/xl-storage-free-version_test.go:125:11-125:42: `.SetTierFreeVersionID(fvIDs[1])`
$DIR/cmd/xl-storage-free-version_test.go:126:2-126:10: `report()`
$DIR/cmd/xl-storage-free-version_test.go:127:2-127:38: `_, err = xl.DeleteVersion(newtierfi)`
$DIR/cmd/xl-storage-free-version_test.go:127:13-127:38: `.DeleteVersion(newtierfi)`
$DIR/cmd/xl-storage-free-version_test.go:128:2-128:10: `report()`
$DIR/cmd/xl-storage-free-version_test.go:129:2-129:15: `fatalErr(err)`
$DIR/cmd/xl-storage-free-version_test.go:137:25-137:76: `.listFreeVersions(newtierfi.Volume, newtierfi.Name)`
$DIR/cmd/xl-storage-free-version_test.go:181:16-181:71: `.ToFileInfo(ft.vol, ft.name, "", ft.inclFreeVers, true)`
$DIR/cmd/xl-storage-free-version_test.go:182:27-182:51: `.Is(err, ft.expectedErr)`
$DIR/cmd/xl-storage-free-version_test.go:185:15-185:33: `.TierFreeVersion()`
$DIR/cmd/xl-storage-free-version_test.go:189:4-189:27: `_, err = ft.afterFn(fi)`
$DIR/cmd/xl-storage-free-version_test.go:189:15-189:27: `.afterFn(fi)`
$DIR/cmd/xl-storage-free-version_test.go:199:3-199:26: `freefi.VersionID = fvID`
$DIR/cmd/xl-storage-free-version_test.go:200:3-200:36: `_, err = xl.DeleteVersion(freefi)`
$DIR/cmd/xl-storage-free-version_test.go:200:14-200:36: `.DeleteVersion(freefi)`
$DIR/cmd/xl-storage-free-version_test.go:201:3-201:16: `fatalErr(err)`
$DIR/cmd/xl-storage-free-version_test.go:203:2-203:10: `report()`
$DIR/cmd/xl-storage-free-version_test.go:206:2-206:75: `freeVersions, err = xl.listFreeVersions(newtierfi.Volume, newtierfi.Name)`
$DIR/cmd/xl-storage-free-version_test.go:206:24-206:75: `.listFreeVersions(newtierfi.Volume, newtierfi.Name)`
$DIR/cmd/xl-storage-free-version_test.go:213:2-213:10: `report()`
$DIR/cmd/xl-storage-free-version_test.go:217:2-217:68: `newfi.SetTierFreeVersionID("00000000-0000-0000-0000-0000000000f3")`
$DIR/cmd/xl-storage-free-version_test.go:217:7-217:68: `.SetTierFreeVersionID("00000000-0000-0000-0000-0000000000f3")`
$DIR/cmd/xl-storage-free-version_test.go:218:2-218:36: `fatalErr(xl.AddFreeVersion(newfi))`
$DIR/cmd/xl-storage-free-version_test.go:218:13-218:35: `.AddFreeVersion(newfi)`
$DIR/cmd/xl-storage-free-version_test.go:219:2-219:10: `report()`
$DIR/cmd/xl-storage-free-version_test.go:222:2-222:75: `freeVersions, err = xl.listFreeVersions(newtierfi.Volume, newtierfi.Name)`
$DIR/cmd/xl-storage-free-version_test.go:222:24-222:75: `.listFreeVersions(newtierfi.Volume, newtierfi.Name)`
$DIR/cmd/xl-storage-free-version_test.go:241:25-241:31: `.Now()`
$DIR/cmd/xl-storage-free-version_test.go:247:29-247:38: `.String()`
$DIR/cmd/xl-storage-free-version_test.go:265:2-265:46: `fi.SetTierFreeVersionID(uuid.New().String())`
$DIR/cmd/xl-storage-free-version_test.go:265:4-265:46: `.SetTierFreeVersionID(uuid.New().String())`
$DIR/cmd/xl-storage-free-version_test.go:265:30-265:36: `.New()`
$DIR/cmd/xl-storage-free-version_test.go:265:36-265:45: `.String()`
$DIR/cmd/xl-storage-free-version_test.go:268:2-268:37: `j.MetaSys = make(map[string][]byte)`
$DIR/cmd/xl-storage-free-version_test.go:269:2-269:44: `j.MetaSys[metaTierName] = []byte("WARM-1")`
$DIR/cmd/xl-storage-free-version_test.go:270:2-270:66: `j.MetaSys[metaTierStatus] = []byte(lifecycle.TransitionComplete)`
$DIR/cmd/xl-storage-free-version_test.go:271:2-271:46: `j.MetaSys[metaTierObjName] = []byte("obj-1")`
$DIR/cmd/xl-storage-free-version_test.go:272:15-272:35: `.InitFreeVersion(fi)`
$DIR/cmd/xl-storage-free-version_test.go:277:2-277:29: `fi.SetSkipTierFreeVersion()`
$DIR/cmd/xl-storage-free-version_test.go:277:4-277:29: `.SetSkipTierFreeVersion()`
$DIR/cmd/xl-storage-free-version_test.go:278:15-278:35: `.InitFreeVersion(fi)`
$DIR/cmd/xl-storage_test.go:55:3-59:5: `t.Run("", func(t *testing.T) {
			if gotErr != testCase.expectedErr {
				t.Errorf("Expected %s, got %s", testCase.expectedErr, gotErr)
			}
		})`
$DIR/cmd/xl-storage_test.go:55:4-59:5: `.Run("", func(t *testing.T) {
			if gotErr != testCase.expectedErr {
				t.Errorf("Expected %s, got %s", testCase.expectedErr, gotErr)
			}
		})`
$DIR/cmd/xl-storage_test.go:170:11-170:21: `.TempDir()`
$DIR/cmd/xl-storage_test.go:189:10-189:20: `.TempDir()`
$DIR/cmd/xl-storage_test.go:192:19-192:55: `.Join(tmp, "non-existent-directory")`
$DIR/cmd/xl-storage_test.go:198:19-198:37: `.Join(tmp, "file")`
$DIR/cmd/xl-storage_test.go:199:11-199:51: `.WriteFile(dir2, []byte("hello"), 0o777)`
$DIR/cmd/xl-storage_test.go:209:19-209:38: `.Join(tmp, "empty")`
$DIR/cmd/xl-storage_test.go:210:2-210:29: `err = os.Mkdir(dir3, 0o777)`
$DIR/cmd/xl-storage_test.go:210:10-210:29: `.Mkdir(dir3, 0o777)`
$DIR/cmd/xl-storage_test.go:221:2-221:1273: `const legacyJSON = `{"version":"1.0.1","format":"xl","stat":{"size":2016,"modTime":"2021-10-11T23:40:34.914361617Z"},"erasure":{"algorithm":"klauspost/reedsolomon/vandermonde","data":2,"parity":2,"blockSize":10485760,"index":2,"distribution":[2,3,4,1],"checksum":[{"name":"part.1","algorithm":"highwayhash256S"}]},"minio":{"release":"RELEASE.2019-12-30T05-45-39Z"},"meta":{"X-Minio-Internal-Server-Side-Encryption-Iv":"kInsJB/0yxyz/40ZI+lmQYJfZacDYqZsGh2wEiv+N50=","X-Minio-Internal-Server-Side-Encryption-S3-Kms-Key-Id":"my-minio-key","X-Minio-Internal-Server-Side-Encryption-S3-Kms-Sealed-Key":"eyJhZWFkIjoiQUVTLTI1Ni1HQ00tSE1BQy1TSEEtMjU2IiwiaWQiOiJjMzEwNDVjODFmMTA2MWU5NTI4ODcxZmNhMmRkYzA3YyIsIml2IjoiOWQ5cUxGMFhSaFBXbEVqT2JDMmo0QT09Iiwibm9uY2UiOiJYaERsemlCU1cwSENuK2RDIiwiYnl0ZXMiOiJUM0lmY1haQ1dtMWpLeWxBWmFUUnczbDVoYldLWW95dm5iNTZVaWJEbE5LOFZVU2tuQmx3NytIMG8yZnRzZ1UrIn0=","X-Minio-Internal-Server-Side-Encryption-S3-Sealed-Key":"IAAfANqt801MT+wwzQRkfFhTrndmhfNiN0alKwDS4AQ1dznNADRQgoq6I4pPVfRsbDp5rQawlripQZvPWUSNJA==","X-Minio-Internal-Server-Side-Encryption-Seal-Algorithm":"DAREv2-HMAC-SHA256","content-type":"application/octet-stream","etag":"20000f00cf5e68d3d6b60e44fcd8b9e8-1"},"parts":[{"number":1,"name":"part.1","etag":"","size":2016,"actualSize":1984}]}``
$DIR/cmd/xl-storage_test.go:230:20-230:67: `.MakeVol(context.Background(), "exists-legacy")`
$DIR/cmd/xl-storage_test.go:230:36-230:49: `.Background()`
$DIR/cmd/xl-storage_test.go:234:20-234:109: `.AppendFile(context.Background(), "exists-legacy", "as-file/xl.json", []byte(legacyJSON))`
$DIR/cmd/xl-storage_test.go:234:39-234:52: `.Background()`
$DIR/cmd/xl-storage_test.go:238:22-238:107: `.ReadVersion(context.Background(), "", "exists-legacy", "as-file", "", ReadOptions{})`
$DIR/cmd/xl-storage_test.go:238:42-238:55: `.Background()`
$DIR/cmd/xl-storage_test.go:256:17-256:46: `.ReadFile("testdata/xl.meta")`
$DIR/cmd/xl-storage_test.go:260:20-260:60: `.MakeVol(context.Background(), "exists")`
$DIR/cmd/xl-storage_test.go:260:36-260:49: `.Background()`
$DIR/cmd/xl-storage_test.go:263:20-263:103: `.AppendFile(context.Background(), "exists", "as-directory/as-file/xl.meta", xlMeta)`
$DIR/cmd/xl-storage_test.go:263:39-263:52: `.Background()`
$DIR/cmd/xl-storage_test.go:266:20-266:90: `.AppendFile(context.Background(), "exists", "as-file/xl.meta", xlMeta)`
$DIR/cmd/xl-storage_test.go:266:39-266:52: `.Background()`
$DIR/cmd/xl-storage_test.go:269:20-269:97: `.AppendFile(context.Background(), "exists", "as-file-parent/xl.meta", xlMeta)`
$DIR/cmd/xl-storage_test.go:269:39-269:52: `.Background()`
$DIR/cmd/xl-storage_test.go:272:20-272:80: `.MakeVol(context.Background(), "exists/as-file/"+fi.DataDir)`
$DIR/cmd/xl-storage_test.go:272:36-272:49: `.Background()`
$DIR/cmd/xl-storage_test.go:328:3-328:110: `_, err = xlStorage.ReadVersion(context.Background(), "", testCase.volume, testCase.path, "", ReadOptions{})`
$DIR/cmd/xl-storage_test.go:328:21-328:110: `.ReadVersion(context.Background(), "", testCase.volume, testCase.path, "", ReadOptions{})`
$DIR/cmd/xl-storage_test.go:328:41-328:54: `.Background()`
$DIR/cmd/xl-storage_test.go:344:20-344:60: `.MakeVol(context.Background(), "exists")`
$DIR/cmd/xl-storage_test.go:344:36-344:49: `.Background()`
$DIR/cmd/xl-storage_test.go:347:20-347:111: `.AppendFile(context.Background(), "exists", "as-directory/as-file", []byte("Hello, World"))`
$DIR/cmd/xl-storage_test.go:347:39-347:52: `.Background()`
$DIR/cmd/xl-storage_test.go:350:20-350:98: `.AppendFile(context.Background(), "exists", "as-file", []byte("Hello, World"))`
$DIR/cmd/xl-storage_test.go:350:39-350:52: `.Background()`
$DIR/cmd/xl-storage_test.go:353:20-353:105: `.AppendFile(context.Background(), "exists", "as-file-parent", []byte("Hello, World"))`
$DIR/cmd/xl-storage_test.go:353:39-353:52: `.Background()`
$DIR/cmd/xl-storage_test.go:410:3-410:90: `dataRead, err = xlStorage.ReadAll(context.Background(), testCase.volume, testCase.path)`
$DIR/cmd/xl-storage_test.go:410:28-410:90: `.ReadAll(context.Background(), testCase.volume, testCase.path)`
$DIR/cmd/xl-storage_test.go:410:44-410:57: `.Background()`
$DIR/cmd/xl-storage_test.go:416:13-416:53: `.Equal(dataRead, []byte("Hello, World"))`
$DIR/cmd/xl-storage_test.go:429:12-429:32: `.Create(tmpFileName)`
$DIR/cmd/xl-storage_test.go:431:10-431:30: `.Remove(tmpFileName)`
$DIR/cmd/xl-storage_test.go:478:14-478:84: `.WriteFile(slashpath.Join(path, "vol-as-file"), []byte{}, os.ModePerm)`
$DIR/cmd/xl-storage_test.go:478:34-478:60: `.Join(path, "vol-as-file")`
$DIR/cmd/xl-storage_test.go:482:14-482:65: `.Mkdir(slashpath.Join(path, "existing-vol"), 0o777)`
$DIR/cmd/xl-storage_test.go:482:30-482:57: `.Join(path, "existing-vol")`
$DIR/cmd/xl-storage_test.go:516:22-516:70: `.MakeVol(context.Background(), testCase.volName)`
$DIR/cmd/xl-storage_test.go:516:38-516:51: `.Background()`
$DIR/cmd/xl-storage_test.go:524:14-524:42: `.Chmod(permDeniedDir, 0o400)`
$DIR/cmd/xl-storage_test.go:529:3-529:44: `_, err = newLocalXLStorage(permDeniedDir)`
$DIR/cmd/xl-storage_test.go:534:14-534:42: `.Chmod(permDeniedDir, 0o755)`
$DIR/cmd/xl-storage_test.go:544:14-544:42: `.Chmod(permDeniedDir, 0o400)`
$DIR/cmd/xl-storage_test.go:548:25-548:67: `.MakeVol(context.Background(), "test-vol")`
$DIR/cmd/xl-storage_test.go:548:41-548:54: `.Background()`
$DIR/cmd/xl-storage_test.go:563:20-563:65: `.MakeVol(context.Background(), "success-vol")`
$DIR/cmd/xl-storage_test.go:563:36-563:49: `.Background()`
$DIR/cmd/xl-storage_test.go:568:18-568:45: `.Join(path, "nonempty-vol")`
$DIR/cmd/xl-storage_test.go:569:13-569:31: `.Mkdir(vol, 0o777)`
$DIR/cmd/xl-storage_test.go:572:13-572:80: `.WriteFile(slashpath.Join(vol, "test-file"), []byte{}, os.ModePerm)`
$DIR/cmd/xl-storage_test.go:572:33-572:56: `.Join(vol, "test-file")`
$DIR/cmd/xl-storage_test.go:607:21-607:78: `.DeleteVol(context.Background(), testCase.volName, false)`
$DIR/cmd/xl-storage_test.go:607:39-607:52: `.Background()`
$DIR/cmd/xl-storage_test.go:614:21-614:31: `.TempDir()`
$DIR/cmd/xl-storage_test.go:615:14-615:70: `.Mkdir(slashpath.Join(permDeniedDir, "mybucket"), 0o400)`
$DIR/cmd/xl-storage_test.go:615:30-615:62: `.Join(permDeniedDir, "mybucket")`
$DIR/cmd/xl-storage_test.go:618:3-620:5: `t.Cleanup(func() {
			os.Chmod(slashpath.Join(permDeniedDir, "mybucket"), 0o775)
		})`
$DIR/cmd/xl-storage_test.go:618:4-620:5: `.Cleanup(func() {
			os.Chmod(slashpath.Join(permDeniedDir, "mybucket"), 0o775)
		})`
$DIR/cmd/xl-storage_test.go:619:4-619:62: `os.Chmod(slashpath.Join(permDeniedDir, "mybucket"), 0o775)`
$DIR/cmd/xl-storage_test.go:619:6-619:62: `.Chmod(slashpath.Join(permDeniedDir, "mybucket"), 0o775)`
$DIR/cmd/xl-storage_test.go:619:22-619:54: `.Join(permDeniedDir, "mybucket")`
$DIR/cmd/xl-storage_test.go:622:14-622:42: `.Chmod(permDeniedDir, 0o400)`
$DIR/cmd/xl-storage_test.go:625:3-627:5: `t.Cleanup(func() {
			os.Chmod(permDeniedDir, 0o775)
		})`
$DIR/cmd/xl-storage_test.go:625:4-627:5: `.Cleanup(func() {
			os.Chmod(permDeniedDir, 0o775)
		})`
$DIR/cmd/xl-storage_test.go:626:4-626:34: `os.Chmod(permDeniedDir, 0o775)`
$DIR/cmd/xl-storage_test.go:626:6-626:34: `.Chmod(permDeniedDir, 0o775)`
$DIR/cmd/xl-storage_test.go:630:3-630:44: `_, err = newLocalXLStorage(permDeniedDir)`
$DIR/cmd/xl-storage_test.go:635:14-635:42: `.Chmod(permDeniedDir, 0o755)`
$DIR/cmd/xl-storage_test.go:645:14-645:42: `.Chmod(permDeniedDir, 0o400)`
$DIR/cmd/xl-storage_test.go:649:24-649:75: `.DeleteVol(context.Background(), "mybucket", false)`
$DIR/cmd/xl-storage_test.go:649:42-649:55: `.Background()`
$DIR/cmd/xl-storage_test.go:659:2-659:24: `os.RemoveAll(diskPath)`
$DIR/cmd/xl-storage_test.go:659:4-659:24: `.RemoveAll(diskPath)`
$DIR/cmd/xl-storage_test.go:663:2-663:81: `err = xlStorageDeletedStorage.DeleteVol(context.Background(), "Del-Vol", false)`
$DIR/cmd/xl-storage_test.go:663:31-663:81: `.DeleteVol(context.Background(), "Del-Vol", false)`
$DIR/cmd/xl-storage_test.go:663:49-663:62: `.Background()`
$DIR/cmd/xl-storage_test.go:678:20-678:65: `.MakeVol(context.Background(), "success-vol")`
$DIR/cmd/xl-storage_test.go:678:36-678:49: `.Background()`
$DIR/cmd/xl-storage_test.go:705:3-705:75: `volInfo, err = xlStorage.StatVol(context.Background(), testCase.volName)`
$DIR/cmd/xl-storage_test.go:705:27-705:75: `.StatVol(context.Background(), testCase.volName)`
$DIR/cmd/xl-storage_test.go:705:43-705:56: `.Background()`
$DIR/cmd/xl-storage_test.go:723:2-723:24: `os.RemoveAll(diskPath)`
$DIR/cmd/xl-storage_test.go:723:4-723:24: `.RemoveAll(diskPath)`
$DIR/cmd/xl-storage_test.go:727:2-727:76: `_, err = xlStorageDeletedStorage.StatVol(context.Background(), "Stat vol")`
$DIR/cmd/xl-storage_test.go:727:34-727:76: `.StatVol(context.Background(), "Stat vol")`
$DIR/cmd/xl-storage_test.go:727:50-727:63: `.Background()`
$DIR/cmd/xl-storage_test.go:743:30-743:61: `.ListVols(context.Background())`
$DIR/cmd/xl-storage_test.go:743:47-743:60: `.Background()`
$DIR/cmd/xl-storage_test.go:750:20-750:65: `.MakeVol(context.Background(), "success-vol")`
$DIR/cmd/xl-storage_test.go:750:36-750:49: `.Background()`
$DIR/cmd/xl-storage_test.go:754:2-754:58: `volInfos, err = xlStorage.ListVols(context.Background())`
$DIR/cmd/xl-storage_test.go:754:27-754:58: `.ListVols(context.Background())`
$DIR/cmd/xl-storage_test.go:754:44-754:57: `.Background()`
$DIR/cmd/xl-storage_test.go:764:4-764:19: `volFound = true`
$DIR/cmd/xl-storage_test.go:773:2-773:20: `os.RemoveAll(path)`
$DIR/cmd/xl-storage_test.go:773:4-773:20: `.RemoveAll(path)`
$DIR/cmd/xl-storage_test.go:775:23-775:54: `.ListVols(context.Background())`
$DIR/cmd/xl-storage_test.go:775:40-775:53: `.Background()`
$DIR/cmd/xl-storage_test.go:794:2-794:24: `os.RemoveAll(diskPath)`
$DIR/cmd/xl-storage_test.go:794:4-794:24: `.RemoveAll(diskPath)`
$DIR/cmd/xl-storage_test.go:796:20-796:65: `.MakeVol(context.Background(), "success-vol")`
$DIR/cmd/xl-storage_test.go:796:36-796:49: `.Background()`
$DIR/cmd/xl-storage_test.go:799:20-799:120: `.AppendFile(context.Background(), "success-vol", "abc/def/ghi/success-file", []byte("Hello, world"))`
$DIR/cmd/xl-storage_test.go:799:39-799:52: `.Background()`
$DIR/cmd/xl-storage_test.go:802:20-802:120: `.AppendFile(context.Background(), "success-vol", "abc/xyz/ghi/success-file", []byte("Hello, world"))`
$DIR/cmd/xl-storage_test.go:802:39-802:52: `.Background()`
$DIR/cmd/xl-storage_test.go:861:3-861:100: `dirList, err = xlStorage.ListDir(context.Background(), "", testCase.srcVol, testCase.srcPath, -1)`
$DIR/cmd/xl-storage_test.go:861:27-861:100: `.ListDir(context.Background(), "", testCase.srcVol, testCase.srcPath, -1)`
$DIR/cmd/xl-storage_test.go:861:43-861:56: `.Background()`
$DIR/cmd/xl-storage_test.go:867:16-867:63: `.Contains(strings.Join(dirList, ","), expected)`
$DIR/cmd/xl-storage_test.go:867:33-867:52: `.Join(dirList, ",")`
$DIR/cmd/xl-storage_test.go:879:3-879:44: `_, err = newLocalXLStorage(permDeniedDir)`
$DIR/cmd/xl-storage_test.go:884:14-884:42: `.Chmod(permDeniedDir, 0o755)`
$DIR/cmd/xl-storage_test.go:893:24-896:5: `.Delete(context.Background(), "mybucket", "myobject", DeleteOptions{
			Recursive: false,
			Immediate: false,
		})`
$DIR/cmd/xl-storage_test.go:893:39-893:52: `.Background()`
$DIR/cmd/xl-storage_test.go:903:2-906:4: `err = xlStorageDeletedStorage.Delete(context.Background(), "del-vol", "my-file", DeleteOptions{
		Recursive: false,
		Immediate: false,
	})`
$DIR/cmd/xl-storage_test.go:903:31-906:4: `.Delete(context.Background(), "del-vol", "my-file", DeleteOptions{
		Recursive: false,
		Immediate: false,
	})`
$DIR/cmd/xl-storage_test.go:903:46-903:59: `.Background()`
$DIR/cmd/xl-storage_test.go:925:20-925:65: `.MakeVol(context.Background(), "success-vol")`
$DIR/cmd/xl-storage_test.go:925:36-925:49: `.Background()`
$DIR/cmd/xl-storage_test.go:928:20-928:108: `.AppendFile(context.Background(), "success-vol", "success-file", []byte("Hello, world"))`
$DIR/cmd/xl-storage_test.go:928:39-928:52: `.Background()`
$DIR/cmd/xl-storage_test.go:932:20-932:68: `.MakeVol(context.Background(), "no-permissions")`
$DIR/cmd/xl-storage_test.go:932:36-932:49: `.Background()`
$DIR/cmd/xl-storage_test.go:935:20-935:107: `.AppendFile(context.Background(), "no-permissions", "dir/file", []byte("Hello, world"))`
$DIR/cmd/xl-storage_test.go:935:39-935:52: `.Background()`
$DIR/cmd/xl-storage_test.go:939:13-939:60: `.Chmod(pathJoin(path, "no-permissions"), 0o555)`
$DIR/cmd/xl-storage_test.go:942:2-944:4: `t.Cleanup(func() {
		os.Chmod(pathJoin(path, "no-permissions"), 0o775)
	})`
$DIR/cmd/xl-storage_test.go:942:3-944:4: `.Cleanup(func() {
		os.Chmod(pathJoin(path, "no-permissions"), 0o775)
	})`
$DIR/cmd/xl-storage_test.go:943:3-943:52: `os.Chmod(pathJoin(path, "no-permissions"), 0o775)`
$DIR/cmd/xl-storage_test.go:943:5-943:52: `.Chmod(pathJoin(path, "no-permissions"), 0o775)`
$DIR/cmd/xl-storage_test.go:989:21-992:5: `.Delete(context.Background(), testCase.srcVol, testCase.srcPath, DeleteOptions{
			Recursive: false,
			Immediate: false,
		})`
$DIR/cmd/xl-storage_test.go:989:36-989:49: `.Background()`
$DIR/cmd/xl-storage_test.go:1002:3-1002:44: `_, err = newLocalXLStorage(permDeniedDir)`
$DIR/cmd/xl-storage_test.go:1007:14-1007:42: `.Chmod(permDeniedDir, 0o755)`
$DIR/cmd/xl-storage_test.go:1016:24-1019:5: `.Delete(context.Background(), "mybucket", "myobject", DeleteOptions{
			Recursive: false,
			Immediate: false,
		})`
$DIR/cmd/xl-storage_test.go:1016:39-1016:52: `.Background()`
$DIR/cmd/xl-storage_test.go:1030:2-1030:30: `err = os.RemoveAll(diskPath)`
$DIR/cmd/xl-storage_test.go:1030:10-1030:30: `.RemoveAll(diskPath)`
$DIR/cmd/xl-storage_test.go:1037:2-1040:4: `err = xlStorageDeletedStorage.Delete(context.Background(), "del-vol", "my-file", DeleteOptions{
		Recursive: false,
		Immediate: false,
	})`
$DIR/cmd/xl-storage_test.go:1037:31-1040:4: `.Delete(context.Background(), "del-vol", "my-file", DeleteOptions{
		Recursive: false,
		Immediate: false,
	})`
$DIR/cmd/xl-storage_test.go:1037:46-1037:59: `.Background()`
$DIR/cmd/xl-storage_test.go:1056:20-1056:58: `.MakeVol(context.Background(), volume)`
$DIR/cmd/xl-storage_test.go:1056:36-1056:49: `.Background()`
$DIR/cmd/xl-storage_test.go:1061:13-1061:80: `.Mkdir(slashpath.Join(path, "success-vol", "object-as-dir"), 0o777)`
$DIR/cmd/xl-storage_test.go:1061:29-1061:72: `.Join(path, "success-vol", "object-as-dir")`
$DIR/cmd/xl-storage_test.go:1143:3-1143:104: `err = xlStorage.AppendFile(context.Background(), volume, appendFile.fileName, []byte("hello, world"))`
$DIR/cmd/xl-storage_test.go:1143:18-1143:104: `.AppendFile(context.Background(), volume, appendFile.fileName, []byte("hello, world"))`
$DIR/cmd/xl-storage_test.go:1143:37-1143:50: `.Background()`
$DIR/cmd/xl-storage_test.go:1152:24-1152:87: `.ReadFile(context.Background(), volume, "myobject", -1, buf, v)`
$DIR/cmd/xl-storage_test.go:1152:41-1152:54: `.Background()`
$DIR/cmd/xl-storage_test.go:1163:4-1163:114: `n, err = xlStorage.ReadFile(context.Background(), testCase.volume, testCase.fileName, testCase.offset, buf, v)`
$DIR/cmd/xl-storage_test.go:1163:22-1163:114: `.ReadFile(context.Background(), testCase.volume, testCase.fileName, testCase.offset, buf, v)`
$DIR/cmd/xl-storage_test.go:1163:39-1163:52: `.Background()`
$DIR/cmd/xl-storage_test.go:1173:9-1173:37: `resultErrno = uintptr(errno)`
$DIR/cmd/xl-storage_test.go:1178:9-1178:37: `expectErrno = uintptr(errno)`
$DIR/cmd/xl-storage_test.go:1191:15-1191:52: `.Equal(testCase.expectedBuf, buf[:n])`
$DIR/cmd/xl-storage_test.go:1208:14-1208:47: `.Equal(testCase.expectedBuf, buf)`
$DIR/cmd/xl-storage_test.go:1223:3-1223:44: `_, err = newLocalXLStorage(permDeniedDir)`
$DIR/cmd/xl-storage_test.go:1228:14-1228:42: `.Chmod(permDeniedDir, 0o755)`
$DIR/cmd/xl-storage_test.go:1239:35-1239:101: `.ReadFile(context.Background(), "mybucket", "myobject", 0, buf, v)`
$DIR/cmd/xl-storage_test.go:1239:52-1239:65: `.Background()`
$DIR/cmd/xl-storage_test.go:1280:20-1280:58: `.MakeVol(context.Background(), volume)`
$DIR/cmd/xl-storage_test.go:1280:36-1280:49: `.Background()`
$DIR/cmd/xl-storage_test.go:1284:16-1284:44: `.ReadFull(rand.Reader, data)`
$DIR/cmd/xl-storage_test.go:1287:20-1287:75: `.AppendFile(context.Background(), volume, object, data)`
$DIR/cmd/xl-storage_test.go:1287:39-1287:52: `.Background()`
$DIR/cmd/xl-storage_test.go:1292:12-1292:28: `.algorithm.New()`
$DIR/cmd/xl-storage_test.go:1293:3-1293:16: `h.Write(data)`
$DIR/cmd/xl-storage_test.go:1293:4-1293:16: `.Write(data)`
$DIR/cmd/xl-storage_test.go:1295:4-1295:22: `h.Write([]byte{0})`
$DIR/cmd/xl-storage_test.go:1295:5-1295:22: `.Write([]byte{0})`
$DIR/cmd/xl-storage_test.go:1299:22-1299:147: `.ReadFile(context.Background(), volume, test.file, int64(test.offset), buffer, NewBitrotVerifier(test.algorithm, h.Sum(nil)))`
$DIR/cmd/xl-storage_test.go:1299:39-1299:52: `.Background()`
$DIR/cmd/xl-storage_test.go:1299:136-1299:145: `.Sum(nil)`
$DIR/cmd/xl-storage_test.go:1306:28-1306:85: `.Equal(data[test.offset:test.offset+test.length], buffer)`
$DIR/cmd/xl-storage_test.go:1322:20-1322:58: `.MakeVol(context.Background(), volume)`
$DIR/cmd/xl-storage_test.go:1322:36-1322:49: `.Background()`
$DIR/cmd/xl-storage_test.go:1327:13-1327:542: `.WriteFile(pathJoin(xlStorage.String(), minioMetaBucket, formatConfigFile), []byte(`{"version":"1","format":"xl","id":"592a41c2-b7cc-4130-b883-c4b5cb15965b","xl":{"version":"3","this":"randomid","sets":[["e07285a6-8c73-4962-89c6-047fb939f803","33b8d431-482d-4376-b63c-626d229f0a29","cff6513a-4439-4dc1-bcaa-56c9e880c352","randomid","9c9f21d5-1f15-4737-bce6-835faa0d9626","0a59b346-1424-4fc2-9fa2-a2e80541d0c1","7924a3dc-b69a-4971-9a2e-014966d6aebb","4d2b8dd9-4e48-444b-bdca-c89194b26042"]],"distributionAlgo":"CRCMOD"}}`), 0o644)`
$DIR/cmd/xl-storage_test.go:1327:42-1327:51: `.String()`
$DIR/cmd/xl-storage_test.go:1331:2-1331:55: `err = xlStorage.MakeVol(context.Background(), volume)`
$DIR/cmd/xl-storage_test.go:1331:17-1331:55: `.MakeVol(context.Background(), volume)`
$DIR/cmd/xl-storage_test.go:1331:33-1331:46: `.Background()`
$DIR/cmd/xl-storage_test.go:1346:20-1346:65: `.MakeVol(context.Background(), "success-vol")`
$DIR/cmd/xl-storage_test.go:1346:36-1346:49: `.Background()`
$DIR/cmd/xl-storage_test.go:1351:13-1351:80: `.Mkdir(slashpath.Join(path, "success-vol", "object-as-dir"), 0o777)`
$DIR/cmd/xl-storage_test.go:1351:29-1351:72: `.Join(path, "success-vol", "object-as-dir")`
$DIR/cmd/xl-storage_test.go:1376:21-1376:112: `.AppendFile(context.Background(), "success-vol", testCase.fileName, []byte("hello, world"))`
$DIR/cmd/xl-storage_test.go:1376:40-1376:53: `.Background()`
$DIR/cmd/xl-storage_test.go:1387:3-1387:44: `_, err = newLocalXLStorage(permDeniedDir)`
$DIR/cmd/xl-storage_test.go:1392:14-1392:42: `.Chmod(permDeniedDir, 0o755)`
$DIR/cmd/xl-storage_test.go:1396:3-1396:63: `xlStoragePermStorage, err = newLocalXLStorage(permDeniedDir)`
$DIR/cmd/xl-storage_test.go:1401:32-1401:113: `.AppendFile(context.Background(), "mybucket", "myobject", []byte("hello, world"))`
$DIR/cmd/xl-storage_test.go:1401:51-1401:64: `.Background()`
$DIR/cmd/xl-storage_test.go:1408:2-1408:87: `err = xlStorage.AppendFile(context.Background(), "bn", "yes", []byte("hello, world"))`
$DIR/cmd/xl-storage_test.go:1408:17-1408:87: `.AppendFile(context.Background(), "bn", "yes", []byte("hello, world"))`
$DIR/cmd/xl-storage_test.go:1408:36-1408:49: `.Background()`
$DIR/cmd/xl-storage_test.go:1423:21-1423:62: `.MakeVol(context.Background(), "src-vol")`
$DIR/cmd/xl-storage_test.go:1423:37-1423:50: `.Background()`
$DIR/cmd/xl-storage_test.go:1427:21-1427:63: `.MakeVol(context.Background(), "dest-vol")`
$DIR/cmd/xl-storage_test.go:1427:37-1427:50: `.Background()`
$DIR/cmd/xl-storage_test.go:1431:21-1431:98: `.AppendFile(context.Background(), "src-vol", "file1", []byte("Hello, world"))`
$DIR/cmd/xl-storage_test.go:1431:40-1431:53: `.Background()`
$DIR/cmd/xl-storage_test.go:1435:21-1435:98: `.AppendFile(context.Background(), "src-vol", "file2", []byte("Hello, world"))`
$DIR/cmd/xl-storage_test.go:1435:40-1435:53: `.Background()`
$DIR/cmd/xl-storage_test.go:1438:21-1438:98: `.AppendFile(context.Background(), "src-vol", "file3", []byte("Hello, world"))`
$DIR/cmd/xl-storage_test.go:1438:40-1438:53: `.Background()`
$DIR/cmd/xl-storage_test.go:1441:21-1441:98: `.AppendFile(context.Background(), "src-vol", "file4", []byte("Hello, world"))`
$DIR/cmd/xl-storage_test.go:1441:40-1441:53: `.Background()`
$DIR/cmd/xl-storage_test.go:1445:21-1445:98: `.AppendFile(context.Background(), "src-vol", "file5", []byte("Hello, world"))`
$DIR/cmd/xl-storage_test.go:1445:40-1445:53: `.Background()`
$DIR/cmd/xl-storage_test.go:1448:21-1448:106: `.AppendFile(context.Background(), "src-vol", "path/to/file1", []byte("Hello, world"))`
$DIR/cmd/xl-storage_test.go:1448:40-1448:53: `.Background()`
$DIR/cmd/xl-storage_test.go:1625:22-1625:127: `.RenameFile(context.Background(), testCase.srcVol, testCase.srcPath, testCase.destVol, testCase.destPath)`
$DIR/cmd/xl-storage_test.go:1625:41-1625:54: `.Background()`
$DIR/cmd/xl-storage_test.go:1638:16-1638:29: `.Background()`
$DIR/cmd/xl-storage_test.go:1642:14-1642:35: `.MakeVol(ctx, volume)`
$DIR/cmd/xl-storage_test.go:1647:3-1647:36: `versions[i] = uuid.New().String()`
$DIR/cmd/xl-storage_test.go:1647:21-1647:27: `.New()`
$DIR/cmd/xl-storage_test.go:1647:27-1647:36: `.String()`
$DIR/cmd/xl-storage_test.go:1660:15-1660:58: `.WriteMetadata(ctx, "", volume, object, fi)`
$DIR/cmd/xl-storage_test.go:1666:3-1666:13: `t.Helper()`
$DIR/cmd/xl-storage_test.go:1666:4-1666:13: `.Helper()`
$DIR/cmd/xl-storage_test.go:1669:17-1669:82: `.ReadVersion(ctx, "", volume, object, versions[i], ReadOptions{})`
$DIR/cmd/xl-storage_test.go:1683:2-1683:18: `checkVerExist(t)`
$DIR/cmd/xl-storage_test.go:1684:2-1684:133: `err = xl.DeleteVersion(ctx, volume, object, FileInfo{Name: object, Volume: volume, VersionID: versions[0]}, false, DeleteOptions{})`
$DIR/cmd/xl-storage_test.go:1684:10-1684:133: `.DeleteVersion(ctx, volume, object, FileInfo{Name: object, Volume: volume, VersionID: versions[0]}, false, DeleteOptions{})`
$DIR/cmd/xl-storage_test.go:1688:2-1688:19: `deleted[0] = true`
$DIR/cmd/xl-storage_test.go:1689:2-1689:18: `checkVerExist(t)`
$DIR/cmd/xl-storage_test.go:1694:3-1694:108: `fis[0].Versions = append(fis[0].Versions, FileInfo{Name: object, Volume: volume, VersionID: versions[i]})`
$DIR/cmd/xl-storage_test.go:1695:3-1695:20: `deleted[i] = true`
$DIR/cmd/xl-storage_test.go:1697:12-1697:62: `.DeleteVersions(ctx, volume, fis, DeleteOptions{})`
$DIR/cmd/xl-storage_test.go:1701:2-1701:18: `checkVerExist(t)`
$DIR/cmd/xl-storage_test.go:1704:2-1704:23: `fis[0].Versions = nil`
$DIR/cmd/xl-storage_test.go:1706:3-1706:108: `fis[0].Versions = append(fis[0].Versions, FileInfo{Name: object, Volume: volume, VersionID: versions[i]})`
$DIR/cmd/xl-storage_test.go:1707:3-1707:20: `deleted[i] = true`
$DIR/cmd/xl-storage_test.go:1709:2-1709:61: `errs = xl.DeleteVersions(ctx, volume, fis, DeleteOptions{})`
$DIR/cmd/xl-storage_test.go:1709:11-1709:61: `.DeleteVersions(ctx, volume, fis, DeleteOptions{})`
$DIR/cmd/xl-storage_test.go:1713:2-1713:18: `checkVerExist(t)`
$DIR/cmd/xl-storage_test.go:1716:15-1716:71: `.ReadVersion(ctx, "", volume, object, "", ReadOptions{})`
$DIR/cmd/xl-storage_test.go:1731:21-1731:66: `.MakeVol(context.Background(), "success-vol")`
$DIR/cmd/xl-storage_test.go:1731:37-1731:50: `.Background()`
$DIR/cmd/xl-storage_test.go:1735:21-1735:140: `.AppendFile(context.Background(), "success-vol", pathJoin("success-file", xlStorageFormatFile), []byte("Hello, world"))`
$DIR/cmd/xl-storage_test.go:1735:40-1735:53: `.Background()`
$DIR/cmd/xl-storage_test.go:1739:21-1739:148: `.AppendFile(context.Background(), "success-vol", pathJoin("path/to/success-file", xlStorageFormatFile), []byte("Hello, world"))`
$DIR/cmd/xl-storage_test.go:1739:40-1739:53: `.Background()`
$DIR/cmd/xl-storage_test.go:1743:21-1743:95: `.MakeVol(context.Background(), "success-vol/path/to/"+xlStorageFormatFile)`
$DIR/cmd/xl-storage_test.go:1743:37-1743:50: `.Background()`
$DIR/cmd/xl-storage_test.go:1804:22-1804:123: `.StatInfoFile(context.Background(), testCase.srcVol, testCase.srcPath+"/"+xlStorageFormatFile, false)`
$DIR/cmd/xl-storage_test.go:1804:43-1804:56: `.Background()`
$DIR/cmd/xl-storage_test.go:1827:19-1827:58: `.MakeVol(context.Background(), volName)`
$DIR/cmd/xl-storage_test.go:1827:35-1827:48: `.Background()`
$DIR/cmd/xl-storage_test.go:1834:19-1834:30: `.Read(data)`
$DIR/cmd/xl-storage_test.go:1838:11-1838:17: `.New()`
$DIR/cmd/xl-storage_test.go:1839:2-1839:15: `h.Write(data)`
$DIR/cmd/xl-storage_test.go:1839:3-1839:15: `.Write(data)`
$DIR/cmd/xl-storage_test.go:1840:16-1840:25: `.Sum(nil)`
$DIR/cmd/xl-storage_test.go:1841:19-1841:75: `.WriteAll(context.Background(), volName, fileName, data)`
$DIR/cmd/xl-storage_test.go:1841:36-1841:49: `.Background()`
$DIR/cmd/xl-storage_test.go:1844:19-1844:123: `.storage.bitrotVerify(context.Background(), pathJoin(path, volName, fileName), size, algo, hashBytes, 0)`
$DIR/cmd/xl-storage_test.go:1844:48-1844:61: `.Background()`
$DIR/cmd/xl-storage_test.go:1849:19-1849:84: `.AppendFile(context.Background(), volName, fileName, []byte("a"))`
$DIR/cmd/xl-storage_test.go:1849:38-1849:51: `.Background()`
$DIR/cmd/xl-storage_test.go:1854:19-1854:123: `.storage.bitrotVerify(context.Background(), pathJoin(path, volName, fileName), size, algo, hashBytes, 0)`
$DIR/cmd/xl-storage_test.go:1854:48-1854:61: `.Background()`
$DIR/cmd/xl-storage_test.go:1859:19-1859:125: `.storage.bitrotVerify(context.Background(), pathJoin(path, volName, fileName), size+1, algo, hashBytes, 0)`
$DIR/cmd/xl-storage_test.go:1859:48-1859:61: `.Background()`
$DIR/cmd/xl-storage_test.go:1863:19-1866:4: `.Delete(context.Background(), volName, fileName, DeleteOptions{
		Recursive: false,
		Immediate: false,
	})`
$DIR/cmd/xl-storage_test.go:1863:34-1863:47: `.Background()`
$DIR/cmd/xl-storage_test.go:1871:2-1871:24: `algo = HighwayHash256S`
$DIR/cmd/xl-storage_test.go:1875:17-1875:33: `.NewReader(data)`
$DIR/cmd/xl-storage_test.go:1880:19-1880:31: `.Read(shard)`
$DIR/cmd/xl-storage_test.go:1881:3-1881:21: `w.Write(shard[:n])`
$DIR/cmd/xl-storage_test.go:1881:4-1881:21: `.Write(shard[:n])`
$DIR/cmd/xl-storage_test.go:1891:19-1891:125: `.storage.bitrotVerify(context.Background(), pathJoin(path, volName, fileName), size, algo, nil, shardSize)`
$DIR/cmd/xl-storage_test.go:1891:48-1891:61: `.Background()`
$DIR/cmd/xl-storage_test.go:1896:30-1896:39: `.String()`
$DIR/cmd/xl-storage_test.go:1897:14-1897:63: `.OpenFile(filePath, os.O_WRONLY|os.O_SYNC, 0o644)`
$DIR/cmd/xl-storage_test.go:1902:16-1902:54: `.WriteString(strings.Repeat("a", 256))`
$DIR/cmd/xl-storage_test.go:1902:36-1902:53: `.Repeat("a", 256)`
$DIR/cmd/xl-storage_test.go:1906:19-1906:125: `.storage.bitrotVerify(context.Background(), pathJoin(path, volName, fileName), size, algo, nil, shardSize)`
$DIR/cmd/xl-storage_test.go:1906:48-1906:61: `.Background()`
$DIR/cmd/xl-storage_test.go:1909:19-1909:127: `.storage.bitrotVerify(context.Background(), pathJoin(path, volName, fileName), size+1, algo, nil, shardSize)`
$DIR/cmd/xl-storage_test.go:1909:48-1909:61: `.Background()`
$DIR/cmd/xl-storage_test.go:1917:13-1917:23: `.TempDir()`
$DIR/cmd/xl-storage_test.go:1924:2-1924:44: `disk.MakeVol(context.Background(), volume)`
$DIR/cmd/xl-storage_test.go:1924:6-1924:44: `.MakeVol(context.Background(), volume)`
$DIR/cmd/xl-storage_test.go:1924:22-1924:35: `.Background()`
$DIR/cmd/xl-storage_test.go:1925:19-1925:88: `.readMetadata(context.Background(), pathJoin(tmpDir, volume, object))`
$DIR/cmd/xl-storage_test.go:1925:40-1925:53: `.Background()`
$DIR/cmd/xl-storage_unix_test.go:41:14-41:24: `.TempDir()`
$DIR/cmd/xl-storage_unix_test.go:58:15-58:63: `.MakeVol(context.Background(), testCase.volName)`
$DIR/cmd/xl-storage_unix_test.go:58:31-58:44: `.Background()`
$DIR/cmd/xl-storage_unix_test.go:63:15-63:58: `.Stat(path.Join(tmpPath, testCase.volName))`
$DIR/cmd/xl-storage_unix_test.go:63:25-63:57: `.Join(tmpPath, testCase.volName)`
$DIR/cmd/xl-storage_unix_test.go:69:35-69:42: `.Mode()`
$DIR/cmd/xl-storage_unix_test.go:69:42-69:49: `.Perm()`
$DIR/cmd/xl-storage_unix_test.go:79:14-79:24: `.TempDir()`
$DIR/cmd/xl-storage_unix_test.go:96:15-96:63: `.MakeVol(context.Background(), testCase.volName)`
$DIR/cmd/xl-storage_unix_test.go:96:31-96:44: `.Background()`
$DIR/cmd/xl-storage_unix_test.go:102:15-102:139: `.AppendFile(context.Background(), testCase.volName, pathJoin("hello-world.txt", xlStorageFormatFile), []byte("Hello World"))`
$DIR/cmd/xl-storage_unix_test.go:102:34-102:47: `.Background()`
$DIR/cmd/xl-storage_unix_test.go:107:19-107:119: `.StatInfoFile(context.Background(), testCase.volName, "hello-world.txt/"+xlStorageFormatFile, false)`
$DIR/cmd/xl-storage_unix_test.go:107:40-107:53: `.Background()`
$DIR/cmd/xl-storage_windows_test.go:38:16-38:42: `.Repeat([]byte("界"), 85)),`
$DIR/cmd/xl-storage_windows_test.go:40:16-40:43: `.Repeat([]byte("界"), 280)),`
$DIR/cmd/xl-storage_windows_test.go:43:10-43:20: `.TempDir()`
$DIR/cmd/xl-storage_windows_test.go:52:2-52:50: `err = fs.MakeVol(context.Background(), "voldir")`
$DIR/cmd/xl-storage_windows_test.go:52:10-52:50: `.MakeVol(context.Background(), "voldir")`
$DIR/cmd/xl-storage_windows_test.go:52:26-52:39: `.Background()`
$DIR/cmd/xl-storage_windows_test.go:58:3-69:5: `t.Run(fmt.Sprint(i), func(t *testing.T) {
			err = fs.AppendFile(context.Background(), "voldir", test.objName, []byte("hello"))
			if err != nil && test.pass {
				t.Error(err)
			} else if err == nil && !test.pass {
				t.Error(err)
			}
			fs.Delete(context.Background(), "voldir", test.objName, DeleteOptions{
				Recursive: false,
				Immediate: false,
			})
		})`
$DIR/cmd/xl-storage_windows_test.go:58:4-69:5: `.Run(fmt.Sprint(i), func(t *testing.T) {
			err = fs.AppendFile(context.Background(), "voldir", test.objName, []byte("hello"))
			if err != nil && test.pass {
				t.Error(err)
			} else if err == nil && !test.pass {
				t.Error(err)
			}
			fs.Delete(context.Background(), "voldir", test.objName, DeleteOptions{
				Recursive: false,
				Immediate: false,
			})
		})`
$DIR/cmd/xl-storage_windows_test.go:58:12-58:22: `.Sprint(i)`
$DIR/cmd/xl-storage_windows_test.go:59:4-59:86: `err = fs.AppendFile(context.Background(), "voldir", test.objName, []byte("hello"))`
$DIR/cmd/xl-storage_windows_test.go:59:12-59:86: `.AppendFile(context.Background(), "voldir", test.objName, []byte("hello"))`
$DIR/cmd/xl-storage_windows_test.go:59:31-59:44: `.Background()`
$DIR/cmd/xl-storage_windows_test.go:65:4-68:6: `fs.Delete(context.Background(), "voldir", test.objName, DeleteOptions{
				Recursive: false,
				Immediate: false,
			})`
$DIR/cmd/xl-storage_windows_test.go:65:6-68:6: `.Delete(context.Background(), "voldir", test.objName, DeleteOptions{
				Recursive: false,
				Immediate: false,
			})`
$DIR/cmd/xl-storage_windows_test.go:65:21-65:34: `.Background()`
$DIR/cmd/xl-storage_windows_test.go:76:10-76:20: `.TempDir()`
$DIR/cmd/xl-storage_windows_test.go:84:2-84:50: `err = fs.MakeVol(context.Background(), "voldir")`
$DIR/cmd/xl-storage_windows_test.go:84:10-84:50: `.MakeVol(context.Background(), "voldir")`
$DIR/cmd/xl-storage_windows_test.go:84:26-84:39: `.Background()`
$DIR/cmd/xl-storage_windows_test.go:89:2-89:79: `err = fs.AppendFile(context.Background(), "voldir", "/file", []byte("hello"))`
$DIR/cmd/xl-storage_windows_test.go:89:10-89:79: `.AppendFile(context.Background(), "voldir", "/file", []byte("hello"))`
$DIR/cmd/xl-storage_windows_test.go:89:29-89:42: `.Background()`
$DIR/cmd/xl-storage_windows_test.go:96:2-96:84: `err = fs.AppendFile(context.Background(), "voldir", "/file/obj1", []byte("hello"))`
$DIR/cmd/xl-storage_windows_test.go:96:10-96:84: `.AppendFile(context.Background(), "voldir", "/file/obj1", []byte("hello"))`
$DIR/cmd/xl-storage_windows_test.go:96:29-96:42: `.Background()`
$DIR/internal/amztime/iso8601_time_test.go:31:24-31:85: `.Date(2009, time.November, 13, 4, 51, 1, 940303531, time.UTC)`
$DIR/internal/amztime/iso8601_time_test.go:35:24-35:85: `.Date(2009, time.November, 13, 4, 51, 1, 901303531, time.UTC)`
$DIR/internal/amztime/iso8601_time_test.go:39:24-39:85: `.Date(2009, time.November, 13, 4, 51, 1, 900303531, time.UTC)`
$DIR/internal/amztime/iso8601_time_test.go:43:24-43:85: `.Date(2009, time.November, 13, 4, 51, 1, 941303531, time.UTC)`
$DIR/internal/amztime/iso8601_time_test.go:50:3-56:5: `t.Run(testCase.expectedOutput, func(t *testing.T) {
			gotOutput := ISO8601Format(testCase.date)
			t.Log("Go", testCase.date.Format(iso8601TimeFormat))
			if gotOutput != testCase.expectedOutput {
				t.Errorf("Expected %s, got %s", testCase.expectedOutput, gotOutput)
			}
		})`
$DIR/internal/amztime/iso8601_time_test.go:50:4-56:5: `.Run(testCase.expectedOutput, func(t *testing.T) {
			gotOutput := ISO8601Format(testCase.date)
			t.Log("Go", testCase.date.Format(iso8601TimeFormat))
			if gotOutput != testCase.expectedOutput {
				t.Errorf("Expected %s, got %s", testCase.expectedOutput, gotOutput)
			}
		})`
$DIR/internal/amztime/parse_test.go:28:2-32:3: `type testCase struct {
		expectedErr  error
		expectedTime time.Time
		timeStr      string
	}`
$DIR/internal/amztime/parse_test.go:41:8-41:61: `.Date(2009, time.November, 10, 23, 0, 0, 0, time.UTC)`
$DIR/internal/amztime/parse_test.go:48:3-56:5: `t.Run(testCase.timeStr, func(t *testing.T) {
			gott, goterr := Parse(testCase.timeStr)
			if !errors.Is(goterr, testCase.expectedErr) {
				t.Errorf("expected %v, got %v", testCase.expectedErr, goterr)
			}
			if !gott.Equal(testCase.expectedTime) {
				t.Errorf("expected %v, got %v", testCase.expectedTime, gott)
			}
		})`
$DIR/internal/amztime/parse_test.go:48:4-56:5: `.Run(testCase.timeStr, func(t *testing.T) {
			gott, goterr := Parse(testCase.timeStr)
			if !errors.Is(goterr, testCase.expectedErr) {
				t.Errorf("expected %v, got %v", testCase.expectedErr, goterr)
			}
			if !gott.Equal(testCase.expectedTime) {
				t.Errorf("expected %v, got %v", testCase.expectedTime, gott)
			}
		})`
$DIR/internal/amztime/parse_test.go:50:14-50:47: `.Is(goterr, testCase.expectedErr)`
$DIR/internal/amztime/parse_test.go:53:12-53:41: `.Equal(testCase.expectedTime)`
$DIR/internal/arn/arn_test.go:60:3-60:24: `fmt.Println(arn, err)`
$DIR/internal/arn/arn_test.go:60:6-60:24: `.Println(arn, err)`
$DIR/internal/arn/arn_test.go:71:9-71:18: `.String()`
$DIR/internal/auth/credentials_test.go:39:8-39:29: `.Number("1574812326")`
$DIR/internal/auth/credentials_test.go:41:8-41:20: `.Duration(3)`
$DIR/internal/auth/credentials_test.go:46:3-54:5: `t.Run("", func(t *testing.T) {
			_, err := ExpToInt64(testCase.exp)
			if err != nil && !testCase.expectedFailure {
				t.Errorf("Expected success but got failure %s", err)
			}
			if err == nil && testCase.expectedFailure {
				t.Error("Expected failure but got success")
			}
		})`
$DIR/internal/auth/credentials_test.go:46:4-54:5: `.Run("", func(t *testing.T) {
			_, err := ExpToInt64(testCase.exp)
			if err != nil && !testCase.expectedFailure {
				t.Errorf("Expected success but got failure %s", err)
			}
			if err == nil && testCase.expectedFailure {
				t.Error("Expected failure but got success")
			}
		})`
$DIR/internal/auth/credentials_test.go:99:10-99:20: `.IsValid()`
$DIR/internal/auth/credentials_test.go:141:12-141:22: `.IsValid()`
$DIR/internal/auth/credentials_test.go:177:21-177:48: `.cred.Equal(testCase.ccred)`
$DIR/internal/bpool/bpool_test.go:31:12-31:20: `.Width()`
$DIR/internal/bpool/bpool_test.go:36:12-36:23: `.WidthCap()`
$DIR/internal/bpool/bpool_test.go:41:14-41:20: `.Get()`
$DIR/internal/bpool/bpool_test.go:49:2-49:16: `bufPool.Put(b)`
$DIR/internal/bpool/bpool_test.go:49:9-49:16: `.Put(b)`
$DIR/internal/bpool/bpool_test.go:53:3-53:39: `bufPool.Put(make([]byte, bufPool.w))`
$DIR/internal/bpool/bpool_test.go:53:10-53:39: `.Put(make([]byte, bufPool.w))`
$DIR/internal/bpool/bpool_test.go:56:2-56:19: `b = bufPool.Get()`
$DIR/internal/bpool/bpool_test.go:56:13-56:19: `.Get()`
$DIR/internal/bpool/bpool_test.go:64:2-64:16: `bufPool.Put(b)`
$DIR/internal/bpool/bpool_test.go:64:9-64:16: `.Put(b)`
$DIR/internal/bpool/bpool_test.go:67:2-67:18: `close(bufPool.c)`
$DIR/internal/bpool/bpool_test.go:76:17-76:25: `.Width()`
$DIR/internal/bpool/bpool_test.go:81:17-81:28: `.WidthCap()`
$DIR/internal/bpool/bpool_test.go:84:2-84:24: `b = bufPoolNoCap.Get()`
$DIR/internal/bpool/bpool_test.go:84:18-84:24: `.Get()`
$DIR/internal/bucket/bandwidth/monitor_gen_test.go:14:15-14:31: `.MarshalMsg(nil)`
$DIR/internal/bucket/bandwidth/monitor_gen_test.go:18:16-18:34: `.UnmarshalMsg(bts)`
$DIR/internal/bucket/bandwidth/monitor_gen_test.go:26:2-26:28: `left, err = msgp.Skip(bts)`
$DIR/internal/bucket/bandwidth/monitor_gen_test.go:73:2-73:23: `msgp.Encode(&buf, &v)`
$DIR/internal/bucket/bandwidth/monitor_gen_test.go:73:6-73:23: `.Encode(&buf, &v)`
$DIR/internal/bucket/bandwidth/monitor_gen_test.go:75:8-75:18: `.Msgsize()`
$DIR/internal/bucket/bandwidth/monitor_gen_test.go:76:8-76:14: `.Len()`
$DIR/internal/bucket/bandwidth/monitor_gen_test.go:81:13-81:31: `.Decode(&buf, &vn)`
$DIR/internal/bucket/bandwidth/monitor_gen_test.go:86:2-86:13: `buf.Reset()`
$DIR/internal/bucket/bandwidth/monitor_gen_test.go:86:5-86:13: `.Reset()`
$DIR/internal/bucket/bandwidth/monitor_gen_test.go:87:2-87:23: `msgp.Encode(&buf, &v)`
$DIR/internal/bucket/bandwidth/monitor_gen_test.go:87:6-87:23: `.Encode(&buf, &v)`
$DIR/internal/bucket/bandwidth/monitor_gen_test.go:88:2-88:35: `err = msgp.NewReader(&buf).Skip()`
$DIR/internal/bucket/bandwidth/monitor_gen_test.go:127:15-127:31: `.MarshalMsg(nil)`
$DIR/internal/bucket/bandwidth/monitor_gen_test.go:131:16-131:34: `.UnmarshalMsg(bts)`
$DIR/internal/bucket/bandwidth/monitor_gen_test.go:139:2-139:28: `left, err = msgp.Skip(bts)`
$DIR/internal/bucket/bandwidth/monitor_gen_test.go:186:2-186:23: `msgp.Encode(&buf, &v)`
$DIR/internal/bucket/bandwidth/monitor_gen_test.go:186:6-186:23: `.Encode(&buf, &v)`
$DIR/internal/bucket/bandwidth/monitor_gen_test.go:188:8-188:18: `.Msgsize()`
$DIR/internal/bucket/bandwidth/monitor_gen_test.go:189:8-189:14: `.Len()`
$DIR/internal/bucket/bandwidth/monitor_gen_test.go:194:13-194:31: `.Decode(&buf, &vn)`
$DIR/internal/bucket/bandwidth/monitor_gen_test.go:199:2-199:13: `buf.Reset()`
$DIR/internal/bucket/bandwidth/monitor_gen_test.go:199:5-199:13: `.Reset()`
$DIR/internal/bucket/bandwidth/monitor_gen_test.go:200:2-200:23: `msgp.Encode(&buf, &v)`
$DIR/internal/bucket/bandwidth/monitor_gen_test.go:200:6-200:23: `.Encode(&buf, &v)`
$DIR/internal/bucket/bandwidth/monitor_gen_test.go:201:2-201:35: `err = msgp.NewReader(&buf).Skip()`
$DIR/internal/bucket/bandwidth/monitor_test.go:31:2-36:3: `type fields struct {
		activeBuckets map[BucketOptions]*bucketMeasurement
		endTime       time.Time
		update2       uint64
		endTime2      time.Time
	}`
$DIR/internal/bucket/bandwidth/monitor_test.go:37:15-37:21: `.Now()`
$DIR/internal/bucket/bandwidth/monitor_test.go:39:2-39:22: `m0.incrementBytes(0)`
$DIR/internal/bucket/bandwidth/monitor_test.go:39:4-39:22: `.incrementBytes(0)`
$DIR/internal/bucket/bandwidth/monitor_test.go:41:2-41:32: `m1MiBPS.incrementBytes(oneMiB)`
$DIR/internal/bucket/bandwidth/monitor_test.go:41:9-41:32: `.incrementBytes(oneMiB)`
$DIR/internal/bucket/bandwidth/monitor_test.go:44:2-44:148: `test1Want[BucketOptions{Name: "bucket", ReplicationARN: "arn"}] = Details{LimitInBytesPerSecond: 1024 * 1024, CurrentBandwidthInBytesPerSecond: 0}`
$DIR/internal/bucket/bandwidth/monitor_test.go:46:2-49:3: `test1Want2[BucketOptions{Name: "bucket", ReplicationARN: "arn"}] = Details{
		LimitInBytesPerSecond:            1024 * 1024,
		CurrentBandwidthInBytesPerSecond: (1024 * 1024) / start.Add(2*time.Second).Sub(start.Add(1*time.Second)).Seconds(),
	}`
$DIR/internal/bucket/bandwidth/monitor_test.go:48:58-48:77: `.Add(2*time.Second)`
$DIR/internal/bucket/bandwidth/monitor_test.go:48:77-48:107: `.Sub(start.Add(1*time.Second))`
$DIR/internal/bucket/bandwidth/monitor_test.go:48:87-48:106: `.Add(1*time.Second)`
$DIR/internal/bucket/bandwidth/monitor_test.go:48:107-48:117: `.Seconds()`
$DIR/internal/bucket/bandwidth/monitor_test.go:52:2-52:162: `test2Want[BucketOptions{Name: "bucket", ReplicationARN: "arn"}] = Details{LimitInBytesPerSecond: 1024 * 1024, CurrentBandwidthInBytesPerSecond: float64(oneMiB)}`
$DIR/internal/bucket/bandwidth/monitor_test.go:54:2-57:3: `test2Want2[BucketOptions{Name: "bucket", ReplicationARN: "arn"}] = Details{
		LimitInBytesPerSecond:            1024 * 1024,
		CurrentBandwidthInBytesPerSecond: exponentialMovingAverage(betaBucket, float64(oneMiB), 2*float64(oneMiB)),
	}`
$DIR/internal/bucket/bandwidth/monitor_test.go:60:2-60:79: `test1ActiveBuckets[BucketOptions{Name: "bucket", ReplicationARN: "arn"}] = m0`
$DIR/internal/bucket/bandwidth/monitor_test.go:62:2-62:85: `test1ActiveBuckets2[BucketOptions{Name: "bucket", ReplicationARN: "arn"}] = m1MiBPS`
$DIR/internal/bucket/bandwidth/monitor_test.go:74:25-74:46: `.Add(1 * time.Second)`
$DIR/internal/bucket/bandwidth/monitor_test.go:76:25-76:46: `.Add(2 * time.Second)`
$DIR/internal/bucket/bandwidth/monitor_test.go:89:25-89:46: `.Add(1 * time.Second)`
$DIR/internal/bucket/bandwidth/monitor_test.go:91:25-91:46: `.Add(2 * time.Second)`
$DIR/internal/bucket/bandwidth/monitor_test.go:103:3-126:5: `t.Run(tt.name, func(t *testing.T) {
			t.Parallel()
			thr := bucketThrottle{
				NodeBandwidthPerSec: 1024 * 1024,
			}
			th := make(map[BucketOptions]*bucketThrottle)
			th[BucketOptions{Name: "bucket", ReplicationARN: "arn"}] = &thr
			m := &Monitor{
				bucketsMeasurement: tt.fields.activeBuckets,
				bucketsThrottle:    th,
				NodeCount:          1,
			}
			m.bucketsMeasurement[BucketOptions{Name: "bucket", ReplicationARN: "arn"}].updateExponentialMovingAverage(tt.fields.endTime)
			got := m.GetReport(SelectBuckets())
			if !reflect.DeepEqual(got, tt.want) {
				t.Errorf("GetReport() = %v, want %v", got, tt.want)
			}
			m.bucketsMeasurement[BucketOptions{Name: "bucket", ReplicationARN: "arn"}].incrementBytes(tt.fields.update2)
			m.bucketsMeasurement[BucketOptions{Name: "bucket", ReplicationARN: "arn"}].updateExponentialMovingAverage(tt.fields.endTime2)
			got = m.GetReport(SelectBuckets())
			if !reflect.DeepEqual(got.BucketStats, tt.want2.BucketStats) {
				t.Errorf("GetReport() = %v, want %v", got.BucketStats, tt.want2.BucketStats)
			}
		})`
$DIR/internal/bucket/bandwidth/monitor_test.go:103:4-126:5: `.Run(tt.name, func(t *testing.T) {
			t.Parallel()
			thr := bucketThrottle{
				NodeBandwidthPerSec: 1024 * 1024,
			}
			th := make(map[BucketOptions]*bucketThrottle)
			th[BucketOptions{Name: "bucket", ReplicationARN: "arn"}] = &thr
			m := &Monitor{
				bucketsMeasurement: tt.fields.activeBuckets,
				bucketsThrottle:    th,
				NodeCount:          1,
			}
			m.bucketsMeasurement[BucketOptions{Name: "bucket", ReplicationARN: "arn"}].updateExponentialMovingAverage(tt.fields.endTime)
			got := m.GetReport(SelectBuckets())
			if !reflect.DeepEqual(got, tt.want) {
				t.Errorf("GetReport() = %v, want %v", got, tt.want)
			}
			m.bucketsMeasurement[BucketOptions{Name: "bucket", ReplicationARN: "arn"}].incrementBytes(tt.fields.update2)
			m.bucketsMeasurement[BucketOptions{Name: "bucket", ReplicationARN: "arn"}].updateExponentialMovingAverage(tt.fields.endTime2)
			got = m.GetReport(SelectBuckets())
			if !reflect.DeepEqual(got.BucketStats, tt.want2.BucketStats) {
				t.Errorf("GetReport() = %v, want %v", got.BucketStats, tt.want2.BucketStats)
			}
		})`
$DIR/internal/bucket/bandwidth/monitor_test.go:109:4-109:67: `th[BucketOptions{Name: "bucket", ReplicationARN: "arn"}] = &thr`
$DIR/internal/bucket/bandwidth/monitor_test.go:115:4-115:128: `m.bucketsMeasurement[BucketOptions{Name: "bucket", ReplicationARN: "arn"}].updateExponentialMovingAverage(tt.fields.endTime)`
$DIR/internal/bucket/bandwidth/monitor_test.go:115:78-115:128: `.updateExponentialMovingAverage(tt.fields.endTime)`
$DIR/internal/bucket/bandwidth/monitor_test.go:116:12-116:39: `.GetReport(SelectBuckets())`
$DIR/internal/bucket/bandwidth/monitor_test.go:117:15-117:39: `.DeepEqual(got, tt.want)`
$DIR/internal/bucket/bandwidth/monitor_test.go:120:4-120:112: `m.bucketsMeasurement[BucketOptions{Name: "bucket", ReplicationARN: "arn"}].incrementBytes(tt.fields.update2)`
$DIR/internal/bucket/bandwidth/monitor_test.go:120:78-120:112: `.incrementBytes(tt.fields.update2)`
$DIR/internal/bucket/bandwidth/monitor_test.go:121:4-121:129: `m.bucketsMeasurement[BucketOptions{Name: "bucket", ReplicationARN: "arn"}].updateExponentialMovingAverage(tt.fields.endTime2)`
$DIR/internal/bucket/bandwidth/monitor_test.go:121:78-121:129: `.updateExponentialMovingAverage(tt.fields.endTime2)`
$DIR/internal/bucket/bandwidth/monitor_test.go:122:4-122:38: `got = m.GetReport(SelectBuckets())`
$DIR/internal/bucket/bandwidth/monitor_test.go:122:11-122:38: `.GetReport(SelectBuckets())`
$DIR/internal/bucket/bandwidth/monitor_test.go:123:15-123:64: `.DeepEqual(got.BucketStats, tt.want2.BucketStats)`
$DIR/internal/bucket/encryption/bucket-sse-config_test.go:96:23-96:88: `.New("only one server-side encryption rule is allowed at a time")`
$DIR/internal/bucket/encryption/bucket-sse-config_test.go:102:23-102:71: `.New("MasterKeyID is allowed with aws:kms only")`
$DIR/internal/bucket/encryption/bucket-sse-config_test.go:108:23-108:66: `.New("MasterKeyID is missing with aws:kms")`
$DIR/internal/bucket/encryption/bucket-sse-config_test.go:114:23-114:52: `.New("Unknown SSE algorithm")`
$DIR/internal/bucket/encryption/bucket-sse-config_test.go:127:23-127:74: `.New("MasterKeyID contains unsupported characters")`
$DIR/internal/bucket/encryption/bucket-sse-config_test.go:133:42-133:73: `.NewReader([]byte(tc.inputXML))`
$DIR/internal/bucket/encryption/bucket-sse-config_test.go:145:40-145:48: `.KeyID()`
$DIR/internal/bucket/encryption/bucket-sse-config_test.go:149:29-149:56: `.Marshal(tc.expectedConfig)`
$DIR/internal/bucket/encryption/bucket-sse-config_test.go:149:78-149:118: `.Equal(expectedXML, []byte(tc.inputXML))`
$DIR/internal/bucket/lifecycle/expiration_test.go:53:3-59:5: `t.Run(fmt.Sprintf("Test %d", i+1), func(t *testing.T) {
			var expiration Expiration
			err := xml.Unmarshal([]byte(tc.inputXML), &expiration)
			if err != tc.expectedErr {
				t.Fatalf("%d: Expected %v but got %v", i+1, tc.expectedErr, err)
			}
		})`
$DIR/internal/bucket/lifecycle/expiration_test.go:53:4-59:5: `.Run(fmt.Sprintf("Test %d", i+1), func(t *testing.T) {
			var expiration Expiration
			err := xml.Unmarshal([]byte(tc.inputXML), &expiration)
			if err != tc.expectedErr {
				t.Fatalf("%d: Expected %v but got %v", i+1, tc.expectedErr, err)
			}
		})`
$DIR/internal/bucket/lifecycle/expiration_test.go:53:12-53:36: `.Sprintf("Test %d", i+1)`
$DIR/internal/bucket/lifecycle/expiration_test.go:55:14-55:58: `.Unmarshal([]byte(tc.inputXML), &expiration)`
$DIR/internal/bucket/lifecycle/expiration_test.go:113:3-124:5: `t.Run(fmt.Sprintf("Test %d", i+1), func(t *testing.T) {
			var expiration Expiration
			err := xml.Unmarshal([]byte(tc.inputXML), &expiration)
			if err != nil {
				t.Fatalf("%d: %v", i+1, err)
			}

			err = expiration.Validate()
			if err != tc.expectedErr {
				t.Fatalf("%d: got: %v, expected: %v", i+1, err, tc.expectedErr)
			}
		})`
$DIR/internal/bucket/lifecycle/expiration_test.go:113:4-124:5: `.Run(fmt.Sprintf("Test %d", i+1), func(t *testing.T) {
			var expiration Expiration
			err := xml.Unmarshal([]byte(tc.inputXML), &expiration)
			if err != nil {
				t.Fatalf("%d: %v", i+1, err)
			}

			err = expiration.Validate()
			if err != tc.expectedErr {
				t.Fatalf("%d: got: %v, expected: %v", i+1, err, tc.expectedErr)
			}
		})`
$DIR/internal/bucket/lifecycle/expiration_test.go:113:12-113:36: `.Sprintf("Test %d", i+1)`
$DIR/internal/bucket/lifecycle/expiration_test.go:115:14-115:58: `.Unmarshal([]byte(tc.inputXML), &expiration)`
$DIR/internal/bucket/lifecycle/expiration_test.go:120:4-120:31: `err = expiration.Validate()`
$DIR/internal/bucket/lifecycle/expiration_test.go:120:20-120:31: `.Validate()`
$DIR/internal/bucket/lifecycle/filter_test.go:116:3-126:5: `t.Run(fmt.Sprintf("Test %d", i+1), func(t *testing.T) {
			var filter Filter
			err := xml.Unmarshal([]byte(tc.inputXML), &filter)
			if err != nil {
				t.Fatalf("%d: Expected no error but got %v", i+1, err)
			}
			err = filter.Validate()
			if err != tc.expectedErr {
				t.Fatalf("%d: Expected %v but got %v", i+1, tc.expectedErr, err)
			}
		})`
$DIR/internal/bucket/lifecycle/filter_test.go:116:4-126:5: `.Run(fmt.Sprintf("Test %d", i+1), func(t *testing.T) {
			var filter Filter
			err := xml.Unmarshal([]byte(tc.inputXML), &filter)
			if err != nil {
				t.Fatalf("%d: Expected no error but got %v", i+1, err)
			}
			err = filter.Validate()
			if err != tc.expectedErr {
				t.Fatalf("%d: Expected %v but got %v", i+1, tc.expectedErr, err)
			}
		})`
$DIR/internal/bucket/lifecycle/filter_test.go:116:12-116:36: `.Sprintf("Test %d", i+1)`
$DIR/internal/bucket/lifecycle/filter_test.go:118:14-118:54: `.Unmarshal([]byte(tc.inputXML), &filter)`
$DIR/internal/bucket/lifecycle/filter_test.go:122:4-122:27: `err = filter.Validate()`
$DIR/internal/bucket/lifecycle/filter_test.go:122:16-122:27: `.Validate()`
$DIR/internal/bucket/lifecycle/filter_test.go:141:15-141:27: `.Marshal(f1)`
$DIR/internal/bucket/lifecycle/filter_test.go:146:2-146:29: `err = xml.Unmarshal(b, &f2)`
$DIR/internal/bucket/lifecycle/filter_test.go:146:11-146:29: `.Unmarshal(b, &f2)`
$DIR/internal/bucket/lifecycle/filter_test.go:157:2-165:3: `f1 = Filter{
		set: true,
		And: And{
			ObjectSizeGreaterThan: 100 * humanize.MiByte,
			ObjectSizeLessThan:    1 * humanize.GiByte,
			Prefix:                Prefix{},
		},
		andSet: true,
	}`
$DIR/internal/bucket/lifecycle/filter_test.go:166:2-166:26: `b, err = xml.Marshal(f1)`
$DIR/internal/bucket/lifecycle/filter_test.go:166:14-166:26: `.Marshal(f1)`
$DIR/internal/bucket/lifecycle/filter_test.go:170:2-170:15: `f2 = Filter{}`
$DIR/internal/bucket/lifecycle/filter_test.go:171:2-171:29: `err = xml.Unmarshal(b, &f2)`
$DIR/internal/bucket/lifecycle/filter_test.go:171:11-171:29: `.Unmarshal(b, &f2)`
$DIR/internal/bucket/lifecycle/filter_test.go:237:3-241:5: `t.Run(fmt.Sprintf("Test %d", i+1), func(t *testing.T) {
			if got := test.filter.BySize(test.objSize); got != test.want {
				t.Fatalf("Expected %v but got %v", test.want, got)
			}
		})`
$DIR/internal/bucket/lifecycle/filter_test.go:237:4-241:5: `.Run(fmt.Sprintf("Test %d", i+1), func(t *testing.T) {
			if got := test.filter.BySize(test.objSize); got != test.want {
				t.Fatalf("Expected %v but got %v", test.want, got)
			}
		})`
$DIR/internal/bucket/lifecycle/filter_test.go:237:12-237:36: `.Sprintf("Test %d", i+1)`
$DIR/internal/bucket/lifecycle/filter_test.go:238:18-238:46: `.filter.BySize(test.objSize)`
$DIR/internal/bucket/lifecycle/filter_test.go:337:3-341:5: `t.Run(fmt.Sprintf("Test %d", i+1), func(t *testing.T) {
			if got := test.filter.TestTags(test.userTags); got != test.want {
				t.Errorf("Expected %v but got %v", test.want, got)
			}
		})`
$DIR/internal/bucket/lifecycle/filter_test.go:337:4-341:5: `.Run(fmt.Sprintf("Test %d", i+1), func(t *testing.T) {
			if got := test.filter.TestTags(test.userTags); got != test.want {
				t.Errorf("Expected %v but got %v", test.want, got)
			}
		})`
$DIR/internal/bucket/lifecycle/filter_test.go:337:12-337:36: `.Sprintf("Test %d", i+1)`
$DIR/internal/bucket/lifecycle/filter_test.go:338:18-338:49: `.filter.TestTags(test.userTags)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:125:3-139:5: `t.Run(fmt.Sprintf("Test %d", i+1), func(t *testing.T) {
			lc, err := ParseLifecycleConfig(bytes.NewReader([]byte(tc.inputConfig)))
			if err != tc.expectedParsingErr {
				t.Fatalf("%d: Expected %v during parsing but got %v", i+1, tc.expectedParsingErr, err)
			}
			if tc.expectedParsingErr != nil {
				// We already expect a parsing error,
				// no need to continue this test.
				return
			}
			err = lc.Validate()
			if err != tc.expectedValidationErr {
				t.Fatalf("%d: Expected %v during validation but got %v", i+1, tc.expectedValidationErr, err)
			}
		})`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:125:4-139:5: `.Run(fmt.Sprintf("Test %d", i+1), func(t *testing.T) {
			lc, err := ParseLifecycleConfig(bytes.NewReader([]byte(tc.inputConfig)))
			if err != tc.expectedParsingErr {
				t.Fatalf("%d: Expected %v during parsing but got %v", i+1, tc.expectedParsingErr, err)
			}
			if tc.expectedParsingErr != nil {
				// We already expect a parsing error,
				// no need to continue this test.
				return
			}
			err = lc.Validate()
			if err != tc.expectedValidationErr {
				t.Fatalf("%d: Expected %v during validation but got %v", i+1, tc.expectedValidationErr, err)
			}
		})`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:125:12-125:36: `.Sprintf("Test %d", i+1)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:126:41-126:75: `.NewReader([]byte(tc.inputConfig))`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:135:4-135:23: `err = lc.Validate()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:135:12-135:23: `.Validate()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:147:35-147:84: `.Date(2019, time.April, 20, 0, 0, 0, 0, time.UTC)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:168:15-168:44: `.MarshalIndent(&lc, "", "\t")`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:173:2-173:30: `err = xml.Unmarshal(b, &lc1)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:173:11-173:30: `.Unmarshal(b, &lc1)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:180:24-180:38: `.Marshal(rule)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:184:3-184:42: `ruleSet[string(ruleBytes)] = struct{}{}`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:187:24-187:38: `.Marshal(rule)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:204:8-204:60: `.Date(2020, time.March, 15, 10, 10, 10, 0, time.UTC)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:206:8-206:57: `.Date(2020, time.March, 20, 0, 0, 0, 0, time.UTC)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:209:8-209:57: `.Date(2020, time.March, 15, 0, 0, 0, 0, time.UTC)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:211:8-211:57: `.Date(2020, time.March, 17, 0, 0, 0, 0, time.UTC)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:216:3-221:5: `t.Run(fmt.Sprintf("Test %d", i+1), func(t *testing.T) {
			got := ExpectedExpiryTime(tc.modTime, int(tc.days))
			if !got.Equal(tc.expected) {
				t.Fatalf("Expected %v to be equal to %v", got, tc.expected)
			}
		})`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:216:4-221:5: `.Run(fmt.Sprintf("Test %d", i+1), func(t *testing.T) {
			got := ExpectedExpiryTime(tc.modTime, int(tc.days))
			if !got.Equal(tc.expected) {
				t.Fatalf("Expected %v to be equal to %v", got, tc.expected)
			}
		})`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:216:12-216:36: `.Sprintf("Test %d", i+1)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:218:11-218:30: `.Equal(tc.expected)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:246:24-246:30: `.Now()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:246:30-246:36: `.UTC()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:246:36-246:62: `.Add(-10 * 24 * time.Hour)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:259:24-259:30: `.Now()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:259:30-259:36: `.UTC()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:259:36-259:62: `.Add(-10 * 24 * time.Hour)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:266:24-266:30: `.Now()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:266:30-266:36: `.UTC()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:266:36-266:62: `.Add(-10 * 24 * time.Hour)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:273:24-273:30: `.Now()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:273:30-273:36: `.UTC()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:273:36-273:62: `.Add(-10 * 24 * time.Hour)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:280:24-280:30: `.Now()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:280:30-280:36: `.UTC()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:280:36-280:61: `.Add(-6 * 24 * time.Hour)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:285:142-285:148: `.Now()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:285:148-285:154: `.UTC()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:285:154-285:177: `.Truncate(24*time.Hour)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:285:177-285:195: `.Add(24*time.Hour)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:285:195-285:216: `.Format(time.RFC3339)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:287:24-287:30: `.Now()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:287:30-287:36: `.UTC()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:287:36-287:57: `.Add(-24 * time.Hour)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:292:142-292:148: `.Now()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:292:148-292:154: `.UTC()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:292:154-292:177: `.Truncate(24*time.Hour)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:292:177-292:196: `.Add(-24*time.Hour)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:292:196-292:217: `.Format(time.RFC3339)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:294:24-294:30: `.Now()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:294:30-294:36: `.UTC()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:294:36-294:57: `.Add(-24 * time.Hour)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:299:200-299:206: `.Now()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:299:206-299:212: `.UTC()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:299:212-299:235: `.Truncate(24*time.Hour)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:299:235-299:254: `.Add(-24*time.Hour)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:299:254-299:275: `.Format(time.RFC3339)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:302:24-302:30: `.Now()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:302:30-302:36: `.UTC()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:302:36-302:57: `.Add(-24 * time.Hour)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:307:247-307:253: `.Now()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:307:253-307:276: `.Truncate(24*time.Hour)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:307:276-307:282: `.UTC()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:307:282-307:301: `.Add(-24*time.Hour)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:307:301-307:322: `.Format(time.RFC3339)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:307:504-307:510: `.Now()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:307:510-307:533: `.Truncate(24*time.Hour)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:307:533-307:539: `.UTC()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:307:539-307:558: `.Add(-24*time.Hour)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:307:558-307:579: `.Format(time.RFC3339)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:310:24-310:30: `.Now()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:310:30-310:36: `.UTC()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:310:36-310:57: `.Add(-24 * time.Hour)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:315:247-315:253: `.Now()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:315:253-315:276: `.Truncate(24*time.Hour)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:315:276-315:282: `.UTC()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:315:282-315:301: `.Add(-24*time.Hour)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:315:301-315:322: `.Format(time.RFC3339)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:318:24-318:30: `.Now()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:318:30-318:36: `.UTC()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:318:36-318:57: `.Add(-24 * time.Hour)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:323:231-323:237: `.Now()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:323:237-323:260: `.Truncate(24*time.Hour)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:323:260-323:266: `.UTC()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:323:266-323:285: `.Add(-24*time.Hour)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:323:285-323:306: `.Format(time.RFC3339)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:326:24-326:30: `.Now()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:326:30-326:36: `.UTC()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:326:36-326:57: `.Add(-24 * time.Hour)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:331:232-331:238: `.Now()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:331:238-331:261: `.Truncate(24*time.Hour)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:331:261-331:267: `.UTC()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:331:267-331:286: `.Add(-24*time.Hour)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:331:286-331:307: `.Format(time.RFC3339)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:334:24-334:30: `.Now()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:334:30-334:36: `.UTC()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:334:36-334:57: `.Add(-24 * time.Hour)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:340:199-340:205: `.Now()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:340:205-340:211: `.UTC()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:340:211-340:234: `.Truncate(24*time.Hour)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:340:234-340:253: `.Add(-24*time.Hour)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:340:253-340:274: `.Format(time.RFC3339)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:343:24-343:30: `.Now()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:343:30-343:36: `.UTC()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:343:36-343:57: `.Add(-24 * time.Hour)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:348:200-348:206: `.Now()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:348:206-348:229: `.Truncate(24*time.Hour)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:348:229-348:235: `.UTC()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:348:235-348:254: `.Add(-24*time.Hour)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:348:254-348:275: `.Format(time.RFC3339)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:351:24-351:30: `.Now()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:351:30-351:36: `.UTC()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:351:36-351:57: `.Add(-24 * time.Hour)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:356:176-356:182: `.Now()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:356:182-356:205: `.Truncate(24*time.Hour)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:356:205-356:211: `.UTC()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:356:211-356:230: `.Add(-24*time.Hour)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:356:230-356:251: `.Format(time.RFC3339)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:359:24-359:30: `.Now()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:359:30-359:36: `.UTC()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:359:36-359:57: `.Add(-24 * time.Hour)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:367:24-367:30: `.Now()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:367:30-367:36: `.UTC()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:367:36-367:57: `.Add(-48 * time.Hour)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:372:101-372:107: `.Now()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:372:107-372:130: `.Truncate(24*time.Hour)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:372:130-372:136: `.UTC()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:372:136-372:154: `.Add(24*time.Hour)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:372:154-372:175: `.Format(time.RFC3339)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:372:303-372:309: `.Now()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:372:309-372:332: `.Truncate(24*time.Hour)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:372:332-372:338: `.UTC()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:372:338-372:357: `.Add(-24*time.Hour)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:372:357-372:378: `.Format(time.RFC3339)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:374:24-374:30: `.Now()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:374:30-374:36: `.UTC()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:374:36-374:57: `.Add(-24 * time.Hour)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:379:148-379:154: `.Now()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:379:154-379:177: `.Truncate(24*time.Hour)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:379:177-379:183: `.UTC()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:379:183-379:202: `.Add(-24*time.Hour)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:379:202-379:223: `.Format(time.RFC3339)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:381:24-381:30: `.Now()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:381:30-381:36: `.UTC()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:381:36-381:57: `.Add(-24 * time.Hour)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:388:28-388:34: `.Now()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:388:34-388:40: `.UTC()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:388:40-388:60: `.Add(-1 * time.Hour)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:396:28-396:34: `.Now()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:396:34-396:40: `.UTC()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:396:40-396:66: `.Add(-10 * 24 * time.Hour)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:405:28-405:34: `.Now()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:405:34-405:40: `.UTC()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:405:40-405:61: `.Add(-12 * time.Hour)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:413:28-413:34: `.Now()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:413:34-413:40: `.UTC()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:413:40-413:66: `.Add(-10 * 24 * time.Hour)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:421:24-421:30: `.Now()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:421:30-421:56: `.Add(-1 * time.Nanosecond)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:421:56-421:62: `.UTC()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:428:32-428:38: `.Now()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:428:38-428:64: `.Add(-1 * time.Nanosecond)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:428:64-428:70: `.UTC()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:431:32-431:38: `.Now()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:431:38-431:64: `.Add(-1 * time.Nanosecond)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:431:64-431:70: `.UTC()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:432:32-432:38: `.New()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:432:38-432:47: `.String()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:438:24-438:36: `.NewString()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:439:24-439:30: `.Now()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:439:30-439:36: `.UTC()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:439:36-439:62: `.Add(-10 * 24 * time.Hour)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:446:32-446:44: `.NewString()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:447:32-447:38: `.Now()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:447:38-447:44: `.UTC()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:447:44-447:70: `.Add(-10 * 24 * time.Hour)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:448:32-448:38: `.Now()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:448:38-448:44: `.UTC()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:448:44-448:70: `.Add(-10 * 24 * time.Hour)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:476:24-476:30: `.Now()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:476:30-476:36: `.UTC()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:476:36-476:62: `.Add(-31 * 24 * time.Hour)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:504:24-504:30: `.Now()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:504:30-504:36: `.UTC()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:504:36-504:63: `.Add(-366 * 24 * time.Hour)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:539:24-539:30: `.Now()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:539:30-539:36: `.UTC()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:539:36-539:62: `.Add(-15 * 24 * time.Hour)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:558:24-558:30: `.Now()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:558:30-558:36: `.UTC()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:558:36-558:62: `.Add(-90 * 24 * time.Hour)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:578:32-578:38: `.Now()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:578:38-578:44: `.UTC()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:578:44-578:70: `.Add(-90 * 24 * time.Hour)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:579:32-579:38: `.Now()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:579:38-579:44: `.UTC()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:579:44-579:70: `.Add(-90 * 24 * time.Hour)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:586:3-603:5: `t.Run("", func(t *testing.T) {
			lc, err := ParseLifecycleConfig(bytes.NewReader([]byte(tc.inputConfig)))
			if err != nil {
				t.Fatalf("Got unexpected error: %v", err)
			}
			if res := lc.Eval(ObjectOpts{
				Name:             tc.objectName,
				UserTags:         tc.objectTags,
				ModTime:          tc.objectModTime,
				DeleteMarker:     tc.isExpiredDelMarker,
				NumVersions:      1,
				IsLatest:         !tc.isNoncurrent,
				SuccessorModTime: tc.objectSuccessorModTime,
				VersionID:        tc.versionID,
			}); res.Action != tc.expectedAction {
				t.Fatalf("Expected action: `%v`, got: `%v`", tc.expectedAction, res.Action)
			}
		})`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:586:4-603:5: `.Run("", func(t *testing.T) {
			lc, err := ParseLifecycleConfig(bytes.NewReader([]byte(tc.inputConfig)))
			if err != nil {
				t.Fatalf("Got unexpected error: %v", err)
			}
			if res := lc.Eval(ObjectOpts{
				Name:             tc.objectName,
				UserTags:         tc.objectTags,
				ModTime:          tc.objectModTime,
				DeleteMarker:     tc.isExpiredDelMarker,
				NumVersions:      1,
				IsLatest:         !tc.isNoncurrent,
				SuccessorModTime: tc.objectSuccessorModTime,
				VersionID:        tc.versionID,
			}); res.Action != tc.expectedAction {
				t.Fatalf("Expected action: `%v`, got: `%v`", tc.expectedAction, res.Action)
			}
		})`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:587:41-587:75: `.NewReader([]byte(tc.inputConfig))`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:591:16-600:6: `.Eval(ObjectOpts{
				Name:             tc.objectName,
				UserTags:         tc.objectTags,
				ModTime:          tc.objectModTime,
				DeleteMarker:     tc.isExpiredDelMarker,
				NumVersions:      1,
				IsLatest:         !tc.isNoncurrent,
				SuccessorModTime: tc.objectSuccessorModTime,
				VersionID:        tc.versionID,
			})`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:667:3-679:5: `t.Run(fmt.Sprintf("Test_%d", i+1), func(t *testing.T) {
			lc, err := ParseLifecycleConfig(bytes.NewReader([]byte(tc.inputConfig)))
			if err != nil {
				t.Fatalf("Got unexpected error: %v", err)
			}
			// To ensure input lifecycle configurations are valid
			if err := lc.Validate(); err != nil {
				t.Fatalf("Invalid test case: %d %v", i+1, err)
			}
			if got := lc.HasActiveRules(tc.prefix); got != tc.want {
				t.Fatalf("Expected result: `%v`, got: `%v`", tc.want, got)
			}
		})`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:667:4-679:5: `.Run(fmt.Sprintf("Test_%d", i+1), func(t *testing.T) {
			lc, err := ParseLifecycleConfig(bytes.NewReader([]byte(tc.inputConfig)))
			if err != nil {
				t.Fatalf("Got unexpected error: %v", err)
			}
			// To ensure input lifecycle configurations are valid
			if err := lc.Validate(); err != nil {
				t.Fatalf("Invalid test case: %d %v", i+1, err)
			}
			if got := lc.HasActiveRules(tc.prefix); got != tc.want {
				t.Fatalf("Expected result: `%v`, got: `%v`", tc.want, got)
			}
		})`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:667:12-667:36: `.Sprintf("Test_%d", i+1)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:668:41-668:75: `.NewReader([]byte(tc.inputConfig))`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:673:16-673:27: `.Validate()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:676:16-676:42: `.HasActiveRules(tc.prefix)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:742:16-742:30: `.NewRecorder()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:743:3-743:37: `lc.SetPredictionHeaders(w, tc.obj)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:743:5-743:37: `.SetPredictionHeaders(w, tc.obj)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:744:22-744:31: `.Header()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:744:68-744:116: `.Contains(expHdrs[0], lc.Rules[tc.expRuleID].ID)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:747:24-747:33: `.Header()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:748:15-748:67: `.Contains(transHdrs[0], lc.Rules[tc.transRuleID].ID)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:753:50-753:77: `.Transition.NextDue(tc.obj)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:753:87-753:147: `.Contains(transHdrs[0], expectedDue.Format(http.TimeFormat))`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:753:122-753:146: `.Format(http.TimeFormat)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:757:50-757:94: `.NoncurrentVersionTransition.NextDue(tc.obj)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:757:104-757:164: `.Contains(transHdrs[0], expectedDue.Format(http.TimeFormat))`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:757:139-757:163: `.Format(http.TimeFormat)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:787:13-787:19: `.Now()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:787:19-787:25: `.UTC()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:801:2-801:35: `now = now.Add(7 * 24 * time.Hour)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:801:11-801:35: `.Add(7 * 24 * time.Hour)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:803:11-803:27: `.eval(obj1, now)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:811:2-811:26: `evt = lc.eval(obj2, now)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:811:10-811:26: `.eval(obj2, now)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:855:13-855:19: `.Now()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:855:19-855:25: `.UTC()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:877:2-877:35: `now = now.Add(7 * 24 * time.Hour)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:877:11-877:35: `.Add(7 * 24 * time.Hour)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:880:11-880:27: `.eval(obj1, now)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:886:2-886:26: `evt = lc.eval(obj2, now)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:886:10-886:26: `.eval(obj2, now)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:895:2-895:26: `evt = lc.eval(obj3, now)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:895:10-895:26: `.eval(obj3, now)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:909:3-916:5: `rules = append(rules, Rule{
			ID:     strconv.Itoa(i),
			Status: "Enabled",
			NoncurrentVersionExpiration: NoncurrentVersionExpiration{
				NewerNoncurrentVersions: i,
				NoncurrentDays:          ExpirationDays(i),
			},
		})`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:910:19-910:27: `.Itoa(i)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:921:16-921:75: `.NoncurrentVersionsExpirationLimit(ObjectOpts{Name: "obj"})`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:956:13-956:51: `.NewDecoder(strings.NewReader(tc.xml))`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:956:32-956:50: `.NewReader(tc.xml)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:957:16-957:29: `.Decode(&got)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:967:12-983:57: `.NewReader([]byte(`<LifecycleConfiguration>
								  <Rule>
	                              <ID>rule-1</ID>
		                          <Filter>
		                             <Prefix>prefix</Prefix>
		                          </Filter>
		                          <Status>Enabled</Status>
		                          <Expiration><Days>3</Days></Expiration>
		                          </Rule>
		                          <Rule>
		                          <Filter>
		                             <Prefix>another-prefix</Prefix>
		                          </Filter>
		                          <Status>Enabled</Status>
		                          <Expiration><Days>3</Days></Expiration>
		                          </Rule>
		                          </LifecycleConfiguration>`))`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:1023:22-1023:28: `.Now()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:1023:28-1023:34: `.UTC()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:1023:34-1023:60: `.Add(-10 * 24 * time.Hour)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:1034:22-1034:28: `.Now()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:1034:28-1034:34: `.UTC()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:1034:34-1034:60: `.Add(-10 * 24 * time.Hour)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:1044:3-1057:5: `t.Run(fmt.Sprintf("test-%d", i+1), func(t *testing.T) {
			if got := tc.lc.FilterRules(tc.opts); len(got) != tc.want {
				t.Fatalf("Expected %d rules to match but got %d", tc.want, len(got))
			}
			w := httptest.NewRecorder()
			tc.lc.SetPredictionHeaders(w, tc.opts)
			expHdr, ok := w.Header()[xhttp.AmzExpiration]
			switch {
			case ok && tc.want == 0:
				t.Fatalf("Expected no rule to match but found x-amz-expiration header set: %v", expHdr)
			case !ok && tc.want > 0:
				t.Fatal("Expected x-amz-expiration header to be set but not found")
			}
		})`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:1044:4-1057:5: `.Run(fmt.Sprintf("test-%d", i+1), func(t *testing.T) {
			if got := tc.lc.FilterRules(tc.opts); len(got) != tc.want {
				t.Fatalf("Expected %d rules to match but got %d", tc.want, len(got))
			}
			w := httptest.NewRecorder()
			tc.lc.SetPredictionHeaders(w, tc.opts)
			expHdr, ok := w.Header()[xhttp.AmzExpiration]
			switch {
			case ok && tc.want == 0:
				t.Fatalf("Expected no rule to match but found x-amz-expiration header set: %v", expHdr)
			case !ok && tc.want > 0:
				t.Fatal("Expected x-amz-expiration header to be set but not found")
			}
		})`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:1044:12-1044:36: `.Sprintf("test-%d", i+1)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:1045:16-1045:40: `.lc.FilterRules(tc.opts)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:1048:17-1048:31: `.NewRecorder()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:1049:4-1049:42: `tc.lc.SetPredictionHeaders(w, tc.opts)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:1049:6-1049:42: `.lc.SetPredictionHeaders(w, tc.opts)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:1050:19-1050:28: `.Header()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:1258:3-1269:5: `t.Run(fmt.Sprintf("test-%d", i+1), func(t *testing.T) {
			if err := tc.lc.Validate(); err != nil {
				t.Fatalf("Lifecycle validation failed - %v", err)
			}
			rules := tc.lc.FilterRules(tc.opts)
			if tc.hasRules && len(rules) == 0 {
				t.Fatalf("%d: Expected at least one rule to match but none matched", i+1)
			}
			if !tc.hasRules && len(rules) > 0 {
				t.Fatalf("%d: Expected no rules to match but got matches %v", i+1, rules)
			}
		})`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:1258:4-1269:5: `.Run(fmt.Sprintf("test-%d", i+1), func(t *testing.T) {
			if err := tc.lc.Validate(); err != nil {
				t.Fatalf("Lifecycle validation failed - %v", err)
			}
			rules := tc.lc.FilterRules(tc.opts)
			if tc.hasRules && len(rules) == 0 {
				t.Fatalf("%d: Expected at least one rule to match but none matched", i+1)
			}
			if !tc.hasRules && len(rules) > 0 {
				t.Fatalf("%d: Expected no rules to match but got matches %v", i+1, rules)
			}
		})`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:1258:12-1258:36: `.Sprintf("test-%d", i+1)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:1259:16-1259:30: `.lc.Validate()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:1262:15-1262:39: `.lc.FilterRules(tc.opts)`
$DIR/internal/bucket/lifecycle/noncurrentversion_test.go:78:15-78:28: `.n.Validate()`
$DIR/internal/bucket/lifecycle/rule_test.go:111:3-121:5: `t.Run(fmt.Sprintf("Test %d", i+1), func(t *testing.T) {
			var rule Rule
			err := xml.Unmarshal([]byte(tc.inputXML), &rule)
			if err != nil {
				t.Fatal(err)
			}

			if err := rule.Validate(); err != tc.expectedErr {
				t.Fatalf("%d: Expected %v but got %v", i+1, tc.expectedErr, err)
			}
		})`
$DIR/internal/bucket/lifecycle/rule_test.go:111:4-121:5: `.Run(fmt.Sprintf("Test %d", i+1), func(t *testing.T) {
			var rule Rule
			err := xml.Unmarshal([]byte(tc.inputXML), &rule)
			if err != nil {
				t.Fatal(err)
			}

			if err := rule.Validate(); err != tc.expectedErr {
				t.Fatalf("%d: Expected %v but got %v", i+1, tc.expectedErr, err)
			}
		})`
$DIR/internal/bucket/lifecycle/rule_test.go:111:12-111:36: `.Sprintf("Test %d", i+1)`
$DIR/internal/bucket/lifecycle/rule_test.go:113:14-113:52: `.Unmarshal([]byte(tc.inputXML), &rule)`
$DIR/internal/bucket/lifecycle/rule_test.go:118:18-118:29: `.Validate()`
$DIR/internal/bucket/lifecycle/transition_test.go:55:13-55:46: `.Unmarshal([]byte(tc.input), &tr)`
$DIR/internal/bucket/lifecycle/transition_test.go:59:14-59:25: `.Validate()`
$DIR/internal/bucket/lifecycle/transition_test.go:85:13-85:47: `.Unmarshal([]byte(tc.input), &ntr)`
$DIR/internal/bucket/lifecycle/transition_test.go:89:15-89:26: `.Validate()`
$DIR/internal/bucket/object/lock/lock_test.go:135:16-135:51: `.MarshalIndent(&tt.value, "", "\t")`
$DIR/internal/bucket/object/lock/lock_test.go:140:3-140:30: `err = xml.Unmarshal(d, &dr)`
$DIR/internal/bucket/object/lock/lock_test.go:140:12-140:30: `.Unmarshal(d, &dr)`
$DIR/internal/bucket/object/lock/lock_test.go:178:3-190:5: `t.Run("", func(t *testing.T) {
			_, err := ParseObjectLockConfig(strings.NewReader(tt.value))
			//nolint:gocritic
			if tt.expectedErr == nil {
				if err != nil {
					t.Fatalf("error: expected = <nil>, got = %v", err)
				}
			} else if err == nil {
				t.Fatalf("error: expected = %v, got = <nil>", tt.expectedErr)
			} else if tt.expectedErr.Error() != err.Error() {
				t.Fatalf("error: expected = %v, got = %v", tt.expectedErr, err)
			}
		})`
$DIR/internal/bucket/object/lock/lock_test.go:178:4-190:5: `.Run("", func(t *testing.T) {
			_, err := ParseObjectLockConfig(strings.NewReader(tt.value))
			//nolint:gocritic
			if tt.expectedErr == nil {
				if err != nil {
					t.Fatalf("error: expected = <nil>, got = %v", err)
				}
			} else if err == nil {
				t.Fatalf("error: expected = %v, got = <nil>", tt.expectedErr)
			} else if tt.expectedErr.Error() != err.Error() {
				t.Fatalf("error: expected = %v, got = %v", tt.expectedErr, err)
			}
		})`
$DIR/internal/bucket/object/lock/lock_test.go:179:43-179:63: `.NewReader(tt.value)`
$DIR/internal/bucket/object/lock/lock_test.go:223:3-235:5: `t.Run("", func(t *testing.T) {
			_, err := ParseObjectRetention(strings.NewReader(tt.value))
			//nolint:gocritic
			if tt.expectedErr == nil {
				if err != nil {
					t.Fatalf("error: expected = <nil>, got = %v", err)
				}
			} else if err == nil {
				t.Fatalf("error: expected = %v, got = <nil>", tt.expectedErr)
			} else if tt.expectedErr.Error() != err.Error() {
				t.Fatalf("error: expected = %v, got = %v", tt.expectedErr, err)
			}
		})`
$DIR/internal/bucket/object/lock/lock_test.go:223:4-235:5: `.Run("", func(t *testing.T) {
			_, err := ParseObjectRetention(strings.NewReader(tt.value))
			//nolint:gocritic
			if tt.expectedErr == nil {
				if err != nil {
					t.Fatalf("error: expected = <nil>, got = %v", err)
				}
			} else if err == nil {
				t.Fatalf("error: expected = %v, got = <nil>", tt.expectedErr)
			} else if tt.expectedErr.Error() != err.Error() {
				t.Fatalf("error: expected = %v, got = %v", tt.expectedErr, err)
			}
		})`
$DIR/internal/bucket/object/lock/lock_test.go:224:42-224:62: `.NewReader(tt.value)`
$DIR/internal/bucket/object/lock/lock_test.go:428:65-428:105: `.Date(2020, 2, 1, 12, 0, 0, 0, time.UTC)`
$DIR/internal/bucket/object/lock/lock_test.go:503:23-503:81: `.New("expected element type <Status> but have <MyStatus>")`
$DIR/internal/bucket/object/lock/lock_test.go:509:23-509:114: `.New("expected element type <LegalHold>/<ObjectLockLegalHold> but have <UnknownLegalHold>")`
$DIR/internal/bucket/object/lock/lock_test.go:519:41-519:61: `.NewReader(tt.value)`
$DIR/internal/bucket/object/lock/lock_test.go:609:14-609:40: `.DeepEqual(o, tt.metadata)`
$DIR/internal/bucket/replication/replication_test.go:150:3-167:5: `t.Run(fmt.Sprintf("Test %d", i+1), func(t *testing.T) {
			cfg, err := ParseConfig(bytes.NewReader([]byte(tc.inputConfig)))
			if err != nil && tc.expectedParsingErr != nil && err.Error() != tc.expectedParsingErr.Error() {
				t.Fatalf("%d: Expected '%v' during parsing but got '%v'", i+1, tc.expectedParsingErr, err)
			}
			if err == nil && tc.expectedParsingErr != nil {
				t.Fatalf("%d: Expected '%v' during parsing but got '%v'", i+1, tc.expectedParsingErr, err)
			}
			if tc.expectedParsingErr != nil {
				// We already expect a parsing error,
				// no need to continue this test.
				return
			}
			err = cfg.Validate(tc.destBucket, tc.sameTarget)
			if err != tc.expectedValidationErr {
				t.Fatalf("%d: Expected %v during parsing but got %v", i+1, tc.expectedValidationErr, err)
			}
		})`
$DIR/internal/bucket/replication/replication_test.go:150:4-167:5: `.Run(fmt.Sprintf("Test %d", i+1), func(t *testing.T) {
			cfg, err := ParseConfig(bytes.NewReader([]byte(tc.inputConfig)))
			if err != nil && tc.expectedParsingErr != nil && err.Error() != tc.expectedParsingErr.Error() {
				t.Fatalf("%d: Expected '%v' during parsing but got '%v'", i+1, tc.expectedParsingErr, err)
			}
			if err == nil && tc.expectedParsingErr != nil {
				t.Fatalf("%d: Expected '%v' during parsing but got '%v'", i+1, tc.expectedParsingErr, err)
			}
			if tc.expectedParsingErr != nil {
				// We already expect a parsing error,
				// no need to continue this test.
				return
			}
			err = cfg.Validate(tc.destBucket, tc.sameTarget)
			if err != tc.expectedValidationErr {
				t.Fatalf("%d: Expected %v during parsing but got %v", i+1, tc.expectedValidationErr, err)
			}
		})`
$DIR/internal/bucket/replication/replication_test.go:150:12-150:36: `.Sprintf("Test %d", i+1)`
$DIR/internal/bucket/replication/replication_test.go:151:33-151:67: `.NewReader([]byte(tc.inputConfig))`
$DIR/internal/bucket/replication/replication_test.go:163:4-163:52: `err = cfg.Validate(tc.destBucket, tc.sameTarget)`
$DIR/internal/bucket/replication/replication_test.go:163:13-163:52: `.Validate(tc.destBucket, tc.sameTarget)`
$DIR/internal/bucket/replication/replication_test.go:300:3-305:5: `t.Run(testCase.opts.Name, func(t *testing.T) {
			result := testCase.c.Replicate(testCase.opts)
			if result != testCase.expectedResult {
				t.Errorf("expected: %v, got: %v", testCase.expectedResult, result)
			}
		})`
$DIR/internal/bucket/replication/replication_test.go:300:4-305:5: `.Run(testCase.opts.Name, func(t *testing.T) {
			result := testCase.c.Replicate(testCase.opts)
			if result != testCase.expectedResult {
				t.Errorf("expected: %v, got: %v", testCase.expectedResult, result)
			}
		})`
$DIR/internal/bucket/replication/replication_test.go:301:22-301:49: `.c.Replicate(testCase.opts)`
$DIR/internal/bucket/replication/replication_test.go:356:3-367:5: `t.Run(fmt.Sprintf("Test_%d", i+1), func(t *testing.T) {
			cfg, err := ParseConfig(bytes.NewReader([]byte(tc.inputConfig)))
			if err != nil {
				t.Fatalf("Got unexpected error: %v", err)
			}
			if got := cfg.HasActiveRules(tc.prefix, false); got != tc.expectedNonRec {
				t.Fatalf("Expected result with recursive set to false: `%v`, got: `%v`", tc.expectedNonRec, got)
			}
			if got := cfg.HasActiveRules(tc.prefix, true); got != tc.expectedRec {
				t.Fatalf("Expected result with recursive set to true: `%v`, got: `%v`", tc.expectedRec, got)
			}
		})`
$DIR/internal/bucket/replication/replication_test.go:356:4-367:5: `.Run(fmt.Sprintf("Test_%d", i+1), func(t *testing.T) {
			cfg, err := ParseConfig(bytes.NewReader([]byte(tc.inputConfig)))
			if err != nil {
				t.Fatalf("Got unexpected error: %v", err)
			}
			if got := cfg.HasActiveRules(tc.prefix, false); got != tc.expectedNonRec {
				t.Fatalf("Expected result with recursive set to false: `%v`, got: `%v`", tc.expectedNonRec, got)
			}
			if got := cfg.HasActiveRules(tc.prefix, true); got != tc.expectedRec {
				t.Fatalf("Expected result with recursive set to true: `%v`, got: `%v`", tc.expectedRec, got)
			}
		})`
$DIR/internal/bucket/replication/replication_test.go:356:12-356:36: `.Sprintf("Test_%d", i+1)`
$DIR/internal/bucket/replication/replication_test.go:357:33-357:67: `.NewReader([]byte(tc.inputConfig))`
$DIR/internal/bucket/replication/replication_test.go:361:17-361:50: `.HasActiveRules(tc.prefix, false)`
$DIR/internal/bucket/replication/replication_test.go:364:17-364:49: `.HasActiveRules(tc.prefix, true)`
$DIR/internal/bucket/replication/replication_test.go:407:32-407:66: `.NewReader([]byte(tc.inputConfig))`
$DIR/internal/bucket/replication/replication_test.go:411:13-411:64: `.FilterActionableRules(ObjectOpts{Name: tc.prefix})`
$DIR/internal/bucket/replication/rule_test.go:61:3-69:5: `t.Run(fmt.Sprintf("Test_%d", i+1), func(t *testing.T) {
			cfg, err := ParseConfig(bytes.NewReader([]byte(tc.inputConfig)))
			if err != nil {
				t.Fatalf("Got unexpected error: %v", err)
			}
			if got := cfg.Rules[0].MetadataReplicate(tc.opts); got != tc.expectedResult {
				t.Fatalf("Expected result with recursive set to false: `%v`, got: `%v`", tc.expectedResult, got)
			}
		})`
$DIR/internal/bucket/replication/rule_test.go:61:4-69:5: `.Run(fmt.Sprintf("Test_%d", i+1), func(t *testing.T) {
			cfg, err := ParseConfig(bytes.NewReader([]byte(tc.inputConfig)))
			if err != nil {
				t.Fatalf("Got unexpected error: %v", err)
			}
			if got := cfg.Rules[0].MetadataReplicate(tc.opts); got != tc.expectedResult {
				t.Fatalf("Expected result with recursive set to false: `%v`, got: `%v`", tc.expectedResult, got)
			}
		})`
$DIR/internal/bucket/replication/rule_test.go:61:12-61:36: `.Sprintf("Test_%d", i+1)`
$DIR/internal/bucket/replication/rule_test.go:62:33-62:67: `.NewReader([]byte(tc.inputConfig))`
$DIR/internal/bucket/replication/rule_test.go:66:26-66:53: `.MetadataReplicate(tc.opts)`
$DIR/internal/bucket/versioning/versioning_test.go:120:3-120:52: `v, err = ParseConfig(strings.NewReader(tc.input))`
$DIR/internal/bucket/versioning/versioning_test.go:120:31-120:51: `.NewReader(tc.input)`
$DIR/internal/bucket/versioning/versioning_test.go:129:15-129:26: `.Validate()`
$DIR/internal/bucket/versioning/versioning_test.go:141:7-141:22: `mismatch = true`
$DIR/internal/bucket/versioning/versioning_test.go:162:17-162:28: `.Marshal(v)`
$DIR/internal/bucket/versioning/versioning_test.go:168:12-168:46: `.Contains(str, "ExcludedPrefixes")`
$DIR/internal/bucket/versioning/versioning_test.go:175:6-175:16: `.Enabled()`
$DIR/internal/bucket/versioning/versioning_test.go:178:6-178:18: `.Suspended()`
$DIR/internal/bucket/versioning/versioning_test.go:190:7-190:29: `.PrefixEnabled(prefix)`
$DIR/internal/bucket/versioning/versioning_test.go:190:35-190:59: `.PrefixSuspended(prefix)`
$DIR/internal/bucket/versioning/versioning_test.go:196:35-196:57: `.PrefixEnabled(prefix)`
$DIR/internal/bucket/versioning/versioning_test.go:196:62-196:86: `.PrefixSuspended(prefix)`
$DIR/internal/bucket/versioning/versioning_test.go:201:2-201:26: `v.ExcludeFolders = false`
$DIR/internal/bucket/versioning/versioning_test.go:203:8-203:30: `.PrefixEnabled(prefix)`
$DIR/internal/bucket/versioning/versioning_test.go:203:35-203:59: `.PrefixSuspended(prefix)`
$DIR/internal/bucket/versioning/versioning_test.go:215:13-215:24: `.Validate()`
$DIR/internal/bucket/versioning/versioning_test.go:233:7-233:36: `.PrefixSuspended(test.prefix)`
$DIR/internal/cachevalue/cache_test.go:28:2-32:3: `cache.InitOnce(2*time.Second, Opts{},
		func() (time.Time, error) {
			return time.Now(), nil
		},
	)`
$DIR/internal/cachevalue/cache_test.go:28:7-32:3: `.InitOnce(2*time.Second, Opts{},
		func() (time.Time, error) {
			return time.Now(), nil
		},
	)`
$DIR/internal/cachevalue/cache_test.go:30:15-30:21: `.Now()`
$DIR/internal/cachevalue/cache_test.go:34:16-34:22: `.Get()`
$DIR/internal/cachevalue/cache_test.go:36:16-36:22: `.Get()`
$DIR/internal/cachevalue/cache_test.go:38:8-38:18: `.Equal(t2)`
$DIR/internal/cachevalue/cache_test.go:42:2-42:29: `time.Sleep(3 * time.Second)`
$DIR/internal/cachevalue/cache_test.go:42:6-42:29: `.Sleep(3 * time.Second)`
$DIR/internal/cachevalue/cache_test.go:43:16-43:22: `.Get()`
$DIR/internal/cachevalue/cache_test.go:45:7-45:17: `.Equal(t3)`
$DIR/internal/config/bool-flag_test.go:38:18-38:32: `.flag.String()`
$DIR/internal/config/bool-flag_test.go:59:22-59:41: `.flag.MarshalJSON()`
$DIR/internal/config/bool-flag_test.go:87:17-87:46: `.UnmarshalJSON(testCase.data)`
$DIR/internal/config/cache/remote_gen_test.go:14:15-14:31: `.MarshalMsg(nil)`
$DIR/internal/config/cache/remote_gen_test.go:18:16-18:34: `.UnmarshalMsg(bts)`
$DIR/internal/config/cache/remote_gen_test.go:26:2-26:28: `left, err = msgp.Skip(bts)`
$DIR/internal/config/cache/remote_gen_test.go:73:2-73:23: `msgp.Encode(&buf, &v)`
$DIR/internal/config/cache/remote_gen_test.go:73:6-73:23: `.Encode(&buf, &v)`
$DIR/internal/config/cache/remote_gen_test.go:75:8-75:18: `.Msgsize()`
$DIR/internal/config/cache/remote_gen_test.go:76:8-76:14: `.Len()`
$DIR/internal/config/cache/remote_gen_test.go:81:13-81:31: `.Decode(&buf, &vn)`
$DIR/internal/config/cache/remote_gen_test.go:86:2-86:13: `buf.Reset()`
$DIR/internal/config/cache/remote_gen_test.go:86:5-86:13: `.Reset()`
$DIR/internal/config/cache/remote_gen_test.go:87:2-87:23: `msgp.Encode(&buf, &v)`
$DIR/internal/config/cache/remote_gen_test.go:87:6-87:23: `.Encode(&buf, &v)`
$DIR/internal/config/cache/remote_gen_test.go:88:2-88:35: `err = msgp.NewReader(&buf).Skip()`
$DIR/internal/config/cache/remote_gen_test.go:127:15-127:31: `.MarshalMsg(nil)`
$DIR/internal/config/cache/remote_gen_test.go:131:16-131:34: `.UnmarshalMsg(bts)`
$DIR/internal/config/cache/remote_gen_test.go:139:2-139:28: `left, err = msgp.Skip(bts)`
$DIR/internal/config/cache/remote_gen_test.go:186:2-186:23: `msgp.Encode(&buf, &v)`
$DIR/internal/config/cache/remote_gen_test.go:186:6-186:23: `.Encode(&buf, &v)`
$DIR/internal/config/cache/remote_gen_test.go:188:8-188:18: `.Msgsize()`
$DIR/internal/config/cache/remote_gen_test.go:189:8-189:14: `.Len()`
$DIR/internal/config/cache/remote_gen_test.go:194:13-194:31: `.Decode(&buf, &vn)`
$DIR/internal/config/cache/remote_gen_test.go:199:2-199:13: `buf.Reset()`
$DIR/internal/config/cache/remote_gen_test.go:199:5-199:13: `.Reset()`
$DIR/internal/config/cache/remote_gen_test.go:200:2-200:23: `msgp.Encode(&buf, &v)`
$DIR/internal/config/cache/remote_gen_test.go:200:6-200:23: `.Encode(&buf, &v)`
$DIR/internal/config/cache/remote_gen_test.go:201:2-201:35: `err = msgp.NewReader(&buf).Skip()`
$DIR/internal/config/certs_test.go:49:10-49:28: `.Remove(tempFile1)`
$DIR/internal/config/certs_test.go:71:10-71:28: `.Remove(tempFile2)`
$DIR/internal/config/certs_test.go:93:10-93:28: `.Remove(tempFile3)`
$DIR/internal/config/certs_test.go:115:10-115:28: `.Remove(tempFile4)`
$DIR/internal/config/certs_test.go:153:10-153:28: `.Remove(tempFile5)`
$DIR/internal/config/certs_test.go:183:2-185:4: `t.Cleanup(func() {
		os.Unsetenv(EnvCertPassword)
	})`
$DIR/internal/config/certs_test.go:183:3-185:4: `.Cleanup(func() {
		os.Unsetenv(EnvCertPassword)
	})`
$DIR/internal/config/certs_test.go:184:3-184:31: `os.Unsetenv(EnvCertPassword)`
$DIR/internal/config/certs_test.go:184:5-184:31: `.Unsetenv(EnvCertPassword)`
$DIR/internal/config/certs_test.go:193:4-193:25: `os.Remove(privateKey)`
$DIR/internal/config/certs_test.go:193:6-193:25: `.Remove(privateKey)`
$DIR/internal/config/certs_test.go:198:4-198:48: `t.Setenv(EnvCertPassword, testCase.password)`
$DIR/internal/config/certs_test.go:198:5-198:48: `.Setenv(EnvCertPassword, testCase.password)`
$DIR/internal/config/certs_test.go:200:3-200:52: `_, err = LoadX509KeyPair(certificate, privateKey)`
$DIR/internal/config/certs_test.go:207:3-207:24: `os.Remove(privateKey)`
$DIR/internal/config/certs_test.go:207:5-207:24: `.Remove(privateKey)`
$DIR/internal/config/certs_test.go:208:3-208:25: `os.Remove(certificate)`
$DIR/internal/config/certs_test.go:208:5-208:25: `.Remove(certificate)`
$DIR/internal/config/compress/compress_test.go:45:3-56:5: `t.Run(testCase.str, func(t *testing.T) {
			gotPatterns, err := parseCompressIncludes(testCase.str)
			if !testCase.success && err == nil {
				t.Error("expected failure but success instead")
			}
			if testCase.success && err != nil {
				t.Errorf("expected success but failed instead %s", err)
			}
			if testCase.success && !reflect.DeepEqual(testCase.expectedPatterns, gotPatterns) {
				t.Errorf("expected patterns %s but got %s", testCase.expectedPatterns, gotPatterns)
			}
		})`
$DIR/internal/config/compress/compress_test.go:45:4-56:5: `.Run(testCase.str, func(t *testing.T) {
			gotPatterns, err := parseCompressIncludes(testCase.str)
			if !testCase.success && err == nil {
				t.Error("expected failure but success instead")
			}
			if testCase.success && err != nil {
				t.Errorf("expected success but failed instead %s", err)
			}
			if testCase.success && !reflect.DeepEqual(testCase.expectedPatterns, gotPatterns) {
				t.Errorf("expected patterns %s but got %s", testCase.expectedPatterns, gotPatterns)
			}
		})`
$DIR/internal/config/compress/compress_test.go:53:35-53:85: `.DeepEqual(testCase.expectedPatterns, gotPatterns)`
$DIR/internal/config/config_test.go:92:3-105:5: `t.Run("", func(t *testing.T) {
			gotFields := kvFields(test.input, test.keys)
			if len(gotFields) != len(test.expectedFields) {
				t.Errorf("Expected keys %d, found %d", len(test.expectedFields), len(gotFields))
			}
			found := true
			for _, field := range gotFields {
				_, ok := test.expectedFields[field]
				found = found && ok
			}
			if !found {
				t.Errorf("Expected %s, got %s", test.expectedFields, gotFields)
			}
		})`
$DIR/internal/config/config_test.go:92:4-105:5: `.Run("", func(t *testing.T) {
			gotFields := kvFields(test.input, test.keys)
			if len(gotFields) != len(test.expectedFields) {
				t.Errorf("Expected keys %d, found %d", len(test.expectedFields), len(gotFields))
			}
			found := true
			for _, field := range gotFields {
				_, ok := test.expectedFields[field]
				found = found && ok
			}
			if !found {
				t.Errorf("Expected %s, got %s", test.expectedFields, gotFields)
			}
		})`
$DIR/internal/config/config_test.go:100:5-100:24: `found = found && ok`
$DIR/internal/config/config_test.go:124:3-129:5: `t.Run(test.name, func(t *testing.T) {
			ok := validRegionRegex.MatchString(test.name)
			if test.success != ok {
				t.Errorf("Expected %t, got %t", test.success, ok)
			}
		})`
$DIR/internal/config/config_test.go:124:4-129:5: `.Run(test.name, func(t *testing.T) {
			ok := validRegionRegex.MatchString(test.name)
			if test.success != ok {
				t.Errorf("Expected %t, got %t", test.success, ok)
			}
		})`
$DIR/internal/config/config_test.go:125:26-125:49: `.MatchString(test.name)`
$DIR/internal/config/crypto_test.go:52:17-52:98: `.DecodeString("ddedadb867afa3f73bd33c25499a723ed7f9f51172ee7b1b679e08dc795debcc")`
$DIR/internal/config/crypto_test.go:56:17-56:36: `.New("my-key", key)`
$DIR/internal/config/crypto_test.go:62:40-62:61: `.NewReader(test.Data)`
$DIR/internal/config/crypto_test.go:66:18-66:38: `.ReadAll(ciphertext)`
$DIR/internal/config/crypto_test.go:71:39-71:55: `.NewReader(data)`
$DIR/internal/config/crypto_test.go:75:3-75:36: `data, err = io.ReadAll(plaintext)`
$DIR/internal/config/crypto_test.go:75:17-75:36: `.ReadAll(plaintext)`
$DIR/internal/config/crypto_test.go:80:12-80:35: `.Equal(data, test.Data)`
$DIR/internal/config/etcd/etcd_test.go:53:3-69:5: `t.Run(testCase.s, func(t *testing.T) {
			endpoints, secure, err := parseEndpoints(testCase.s)
			if err != nil && testCase.success {
				t.Errorf("expected to succeed but failed with %s", err)
			}
			if !testCase.success && err == nil {
				t.Error("expected failure but succeeded instead")
			}
			if testCase.success {
				if !reflect.DeepEqual(endpoints, testCase.endpoints) {
					t.Errorf("expected %s, got %s", testCase.endpoints, endpoints)
				}
				if secure != testCase.secure {
					t.Errorf("expected %t, got %t", testCase.secure, secure)
				}
			}
		})`
$DIR/internal/config/etcd/etcd_test.go:53:4-69:5: `.Run(testCase.s, func(t *testing.T) {
			endpoints, secure, err := parseEndpoints(testCase.s)
			if err != nil && testCase.success {
				t.Errorf("expected to succeed but failed with %s", err)
			}
			if !testCase.success && err == nil {
				t.Error("expected failure but succeeded instead")
			}
			if testCase.success {
				if !reflect.DeepEqual(endpoints, testCase.endpoints) {
					t.Errorf("expected %s, got %s", testCase.endpoints, endpoints)
				}
				if secure != testCase.secure {
					t.Errorf("expected %t, got %t", testCase.secure, secure)
				}
			}
		})`
$DIR/internal/config/etcd/etcd_test.go:62:16-62:57: `.DeepEqual(endpoints, testCase.endpoints)`
$DIR/internal/config/identity/openid/jwks_test.go:31:2-31:4780: `const jsonkey = `{"keys":[{"kty":"RSA","use":"sig","kid":"SsZsBNhZcF3Q9S4trpQBTByNRRI","x5t":"SsZsBNhZcF3Q9S4trpQBTByNRRI","n":"uHPewhg4WC3eLVPkEFlj7RDtaKYWXCI5G-LPVzsMKOuIu7qQQbeytIA6P6HT9_iIRt8zNQvuw4P9vbNjgUCpI6vfZGsjk3XuCVoB_bAIhvuBcQh9ePH2yEwS5reR-NrG1PsqzobnZZuigKCoDmuOb_UDx1DiVyNCbMBlEG7UzTQwLf5NP6HaRHx027URJeZvPAWY7zjHlSOuKoS_d1yUveaBFIgZqPWLCg44ck4gvik45HsNVWT9zYfT74dvUSSrMSR-SHFT7Hy1XjbVXpHJHNNAXpPoGoWXTuc0BxMsB4cqjfJqoftFGOG4x32vEzakArLPxAKwGvkvu0jToAyvSQ","e":"AQAB","x5c":"MIIDBTCCAe2gAwIBAgIQWHw7h/Ysh6hPcXpnrJ0N8DANBgkqhkiG9w0BAQsFADAtMSswKQYDVQQDEyJhY2NvdW50cy5hY2Nlc3Njb250cm9sLndpbmRvd3MubmV0MB4XDTIwMDQyNzAwMDAwMFoXDTI1MDQyNzAwMDAwMFowLTErMCkGA1UEAxMiYWNjb3VudHMuYWNjZXNzY29udHJvbC53aW5kb3dzLm5ldDCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBALhz3sIYOFgt3i1T5BBZY+0Q7WimFlwiORviz1c7DCjriLu6kEG3srSAOj+h0/f4iEbfMzUL7sOD/b2zY4FAqSOr32RrI5N17glaAf2wCIb7gXEIfXjx9shMEua3kfjaxtT7Ks6G52WbooCgqA5rjm/1A8dQ4lcjQmzAZRBu1M00MC3+TT+h2kR8dNu1ESXmbzwFmO84x5UjriqEv3dclL3mgRSIGaj1iwoOOHJOIL4pOOR7DVVk/c2H0++Hb1EkqzEkfkhxU+x8tV421V6RyRzTQF6T6BqFl07nNAcTLAeHKo3yaqH7RRjhuMd9rxM2pAKyz8QCsBr5L7tI06AMr0kCAwEAAaMhMB8wHQYDVR0OBBYEFOI7M+DDFMlP7Ac3aomPnWo1QL1SMA0GCSqGSIb3DQEBCwUAA4IBAQBv+8rBiDY8sZDBoUDYwFQM74QjqCmgNQfv5B0Vjwg20HinERjQeH24uAWzyhWN9++FmeY4zcRXDY5UNmB0nJz7UGlprA9s7voQ0Lkyiud0DO072RPBg38LmmrqoBsLb3MB9MZ2CGBaHftUHfpdTvrgmXSP0IJn7mCUq27g+hFk7n/MLbN1k8JswEODIgdMRvGqN+mnrPKkviWmcVAZccsWfcmS1pKwXqICTKzd6WmVdz+cL7ZSd9I2X0pY4oRwauoE2bS95vrXljCYgLArI3XB2QcnglDDBRYu3Z3aIJb26PTIyhkVKT7xaXhXl4OgrbmQon9/O61G2dzpjzzBPqNP","issuer":"https://login.microsoftonline.com/906aefe9-76a7-4f65-b82d-5ec20775d5aa/v2.0"},{"kty":"RSA","use":"sig","kid":"huN95IvPfehq34GzBDZ1GXGirnM","x5t":"huN95IvPfehq34GzBDZ1GXGirnM","n":"6lldKm5Rc_vMKa1RM_TtUv3tmtj52wLRrJqu13yGM3_h0dwru2ZP53y65wDfz6_tLCjoYuRCuVsjoW37-0zXUORJvZ0L90CAX-58lW7NcE4bAzA1pXv7oR9kQw0X8dp0atU4HnHeaTU8LZxcjJO79_H9cxgwa-clKfGxllcos8TsuurM8xi2dx5VqwzqNMB2s62l3MTN7AzctHUiQCiX2iJArGjAhs-mxS1wmyMIyOSipdodhjQWRAcseW-aFVyRTFVi8okl2cT1HJjPXdx0b1WqYSOzeRdrrLUcA0oR2Tzp7xzOYJZSGNnNLQqa9f6h6h52XbX0iAgxKgEDlRpbJw","e":"AQAB","x5c":["MIIDBTCCAe2gAwIBAgIQPCxFbySVSLZOggeWRzBWOjANBgkqhkiG9w0BAQsFADAtMSswKQYDVQQDEyJhY2NvdW50cy5hY2Nlc3Njb250cm9sLndpbmRvd3MubmV0MB4XDTIwMDYwNzAwMDAwMFoXDTI1MDYwNzAwMDAwMFowLTErMCkGA1UEAxMiYWNjb3VudHMuYWNjZXNzY29udHJvbC53aW5kb3dzLm5ldDCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAOpZXSpuUXP7zCmtUTP07VL97ZrY+dsC0ayartd8hjN/4dHcK7tmT+d8uucA38+v7Swo6GLkQrlbI6Ft+/tM11DkSb2dC/dAgF/ufJVuzXBOGwMwNaV7+6EfZEMNF/HadGrVOB5x3mk1PC2cXIyTu/fx/XMYMGvnJSnxsZZXKLPE7LrqzPMYtnceVasM6jTAdrOtpdzEzewM3LR1IkAol9oiQKxowIbPpsUtcJsjCMjkoqXaHYY0FkQHLHlvmhVckUxVYvKJJdnE9RyYz13cdG9VqmEjs3kXa6y1HANKEdk86e8czmCWUhjZzS0KmvX+oeoedl219IgIMSoBA5UaWycCAwEAAaMhMB8wHQYDVR0OBBYEFFXP0ODFhjf3RS6oRijM5Tb+yB8CMA0GCSqGSIb3DQEBCwUAA4IBAQB9GtVikLTbJWIu5x9YCUTTKzNhi44XXogP/v8VylRSUHI5YTMdnWwvDIt/Y1sjNonmSy9PrioEjcIiI1U8nicveafMwIq5VLn+gEY2lg6KDJAzgAvA88CXqwfHHvtmYBovN7goolp8TY/kddMTf6TpNzN3lCTM2MK4Ye5xLLVGdp4bqWCOJ/qjwDxpTRSydYIkLUDwqNjv+sYfOElJpYAB4rTL/aw3ChJ1iaA4MtXEt6OjbUtbOa21lShfLzvNRbYK3+ukbrhmRl9lemJEeUls51vPuIe+jg+Ssp43aw7PQjxt4/MpfNMS2BfZ5F8GVSVG7qNb352cLLeJg5rc398Z"],"issuer":"https://login.microsoftonline.com/906aefe9-76a7-4f65-b82d-5ec20775d5aa/v2.0"},{"kty":"RSA","use":"sig","kid":"M6pX7RHoraLsprfJeRCjSxuURhc","x5t":"M6pX7RHoraLsprfJeRCjSxuURhc","n":"xHScZMPo8FifoDcrgncWQ7mGJtiKhrsho0-uFPXg-OdnRKYudTD7-Bq1MDjcqWRf3IfDVjFJixQS61M7wm9wALDj--lLuJJ9jDUAWTA3xWvQLbiBM-gqU0sj4mc2lWm6nPfqlyYeWtQcSC0sYkLlayNgX4noKDaXivhVOp7bwGXq77MRzeL4-9qrRYKjuzHfZL7kNBCsqO185P0NI2Jtmw-EsqYsrCaHsfNRGRrTvUHUq3hWa859kK_5uNd7TeY2ZEwKVD8ezCmSfR59ZzyxTtuPpkCSHS9OtUvS3mqTYit73qcvprjl3R8hpjXLb8oftfpWr3hFRdpxrwuoQEO4QQ","e":"AQAB","x5c":["MIIC8TCCAdmgAwIBAgIQfEWlTVc1uINEc9RBi6qHMjANBgkqhkiG9w0BAQsFADAjMSEwHwYDVQQDExhsb2dpbi5taWNyb3NvZnRvbmxpbmUudXMwHhcNMTgxMDE0MDAwMDAwWhcNMjAxMDE0MDAwMDAwWjAjMSEwHwYDVQQDExhsb2dpbi5taWNyb3NvZnRvbmxpbmUudXMwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDEdJxkw+jwWJ+gNyuCdxZDuYYm2IqGuyGjT64U9eD452dEpi51MPv4GrUwONypZF/ch8NWMUmLFBLrUzvCb3AAsOP76Uu4kn2MNQBZMDfFa9AtuIEz6CpTSyPiZzaVabqc9+qXJh5a1BxILSxiQuVrI2BfiegoNpeK+FU6ntvAZervsxHN4vj72qtFgqO7Md9kvuQ0EKyo7Xzk/Q0jYm2bD4SypiysJoex81EZGtO9QdSreFZrzn2Qr/m413tN5jZkTApUPx7MKZJ9Hn1nPLFO24+mQJIdL061S9LeapNiK3vepy+muOXdHyGmNctvyh+1+laveEVF2nGvC6hAQ7hBAgMBAAGjITAfMB0GA1UdDgQWBBQ5TKadw06O0cvXrQbXW0Nb3M3h/DANBgkqhkiG9w0BAQsFAAOCAQEAI48JaFtwOFcYS/3pfS5+7cINrafXAKTL+/+he4q+RMx4TCu/L1dl9zS5W1BeJNO2GUznfI+b5KndrxdlB6qJIDf6TRHh6EqfA18oJP5NOiKhU4pgkF2UMUw4kjxaZ5fQrSoD9omjfHAFNjradnHA7GOAoF4iotvXDWDBWx9K4XNZHWvD11Td66zTg5IaEQDIZ+f8WS6nn/98nAVMDtR9zW7Te5h9kGJGfe6WiHVaGRPpBvqC4iypGHjbRwANwofZvmp5wP08hY1CsnKY5tfP+E2k/iAQgKKa6QoxXToYvP7rsSkglak8N5g/+FJGnq4wP6cOzgZpjdPMwaVt5432GA=="],"issuer":"https://login.microsoftonline.com/906aefe9-76a7-4f65-b82d-5ec20775d5aa/v2.0"}]}``
$DIR/internal/config/identity/openid/jwks_test.go:34:16-34:48: `.Unmarshal([]byte(jsonkey), &jk)`
$DIR/internal/config/identity/openid/jwks_test.go:42:16-42:34: `.DecodePublicKey()`
$DIR/internal/config/identity/openid/jwks_test.go:46:3-46:31: `kids = append(kids, jks.Kid)`
$DIR/internal/config/identity/openid/jwks_test.go:55:2-70:8: `const jsonkey = `{"keys":
       [
         {"kty":"EC",
          "crv":"P-256",
          "x":"MKBCTNIcKUSDii11ySs3526iDZ8AiTo7Tu6KPAqv7D4",
          "y":"4Etl6SRW2YiLUrN5vfvVHuhp7x8PxltmWWlbbM4IFyM",
          "use":"enc",
          "kid":"1"},

         {"kty":"RSA",
          "n": "0vx7agoebGcQSuuPiLJXZptN9nndrQmbXEps2aiAFbWhM78LhWx4cbbfAAtVT86zwu1RK7aPFFxuhDR1L6tSoc_BJECPebWKRXjBZCiFV4n3oknjhMstn64tZ_2W-5JsGY4Hc5n9yBXArwl93lqt7_RN5w6Cf0h4QyQ5v-65YGjQR0_FDW2QvzqY368QQMicAtaSqzs8KJZgnYb9c7d0zgdAZHzu6qMQvRL5hajrn1n91CbOpbISD08qNLyrdkt-bFTWhAI4vMQFh6WeZu0fM4lFd2NcRwr3XPksINHaQ-G_xBniIqbw0Ls1jF44-csFCur-kEgU8awapJzKnqDKgw",
          "e":"AQAB",
          "alg":"RS256",
          "kid":"2011-04-29"}
       ]
     }``
$DIR/internal/config/identity/openid/jwks_test.go:73:16-73:48: `.Unmarshal([]byte(jsonkey), &jk)`
$DIR/internal/config/identity/openid/jwks_test.go:82:3-82:40: `keys[ii], err = jks.DecodePublicKey()`
$DIR/internal/config/identity/openid/jwks_test.go:82:22-82:40: `.DecodePublicKey()`
$DIR/internal/config/identity/openid/jwks_test.go:93:34-93:41: `.P256()`
$DIR/internal/config/identity/openid/jwks_test.go:95:18-99:4: `.Equal(key0.X.Bytes(), []byte{
		0x30, 0xa0, 0x42, 0x4c, 0xd2,
		0x1c, 0x29, 0x44, 0x83, 0x8a, 0x2d, 0x75, 0xc9, 0x2b, 0x37, 0xe7, 0x6e, 0xa2,
		0xd, 0x9f, 0x0, 0x89, 0x3a, 0x3b, 0x4e, 0xee, 0x8a, 0x3c, 0xa, 0xaf, 0xec, 0x3e,
	})`
$DIR/internal/config/identity/openid/jwks_test.go:95:29-95:39: `.X.Bytes()`
$DIR/internal/config/identity/openid/jwks_test.go:101:18-106:4: `.Equal(key0.Y.Bytes(), []byte{
		0xe0, 0x4b, 0x65, 0xe9, 0x24,
		0x56, 0xd9, 0x88, 0x8b, 0x52, 0xb3, 0x79, 0xbd, 0xfb, 0xd5, 0x1e, 0xe8,
		0x69, 0xef, 0x1f, 0xf, 0xc6, 0x5b, 0x66, 0x59, 0x69, 0x5b, 0x6c, 0xce,
		0x8, 0x17, 0x23,
	})`
$DIR/internal/config/identity/openid/jwks_test.go:101:29-101:39: `.Y.Bytes()`
$DIR/internal/config/identity/openid/jwks_test.go:110:18-131:4: `.Equal(key1.N.Bytes(), []byte{
		0xd2, 0xfc, 0x7b, 0x6a, 0xa, 0x1e,
		0x6c, 0x67, 0x10, 0x4a, 0xeb, 0x8f, 0x88, 0xb2, 0x57, 0x66, 0x9b, 0x4d, 0xf6,
		0x79, 0xdd, 0xad, 0x9, 0x9b, 0x5c, 0x4a, 0x6c, 0xd9, 0xa8, 0x80, 0x15, 0xb5,
		0xa1, 0x33, 0xbf, 0xb, 0x85, 0x6c, 0x78, 0x71, 0xb6, 0xdf, 0x0, 0xb, 0x55,
		0x4f, 0xce, 0xb3, 0xc2, 0xed, 0x51, 0x2b, 0xb6, 0x8f, 0x14, 0x5c, 0x6e, 0x84,
		0x34, 0x75, 0x2f, 0xab, 0x52, 0xa1, 0xcf, 0xc1, 0x24, 0x40, 0x8f, 0x79, 0xb5,
		0x8a, 0x45, 0x78, 0xc1, 0x64, 0x28, 0x85, 0x57, 0x89, 0xf7, 0xa2, 0x49, 0xe3,
		0x84, 0xcb, 0x2d, 0x9f, 0xae, 0x2d, 0x67, 0xfd, 0x96, 0xfb, 0x92, 0x6c, 0x19,
		0x8e, 0x7, 0x73, 0x99, 0xfd, 0xc8, 0x15, 0xc0, 0xaf, 0x9, 0x7d, 0xde, 0x5a,
		0xad, 0xef, 0xf4, 0x4d, 0xe7, 0xe, 0x82, 0x7f, 0x48, 0x78, 0x43, 0x24, 0x39,
		0xbf, 0xee, 0xb9, 0x60, 0x68, 0xd0, 0x47, 0x4f, 0xc5, 0xd, 0x6d, 0x90, 0xbf,
		0x3a, 0x98, 0xdf, 0xaf, 0x10, 0x40, 0xc8, 0x9c, 0x2, 0xd6, 0x92, 0xab, 0x3b,
		0x3c, 0x28, 0x96, 0x60, 0x9d, 0x86, 0xfd, 0x73, 0xb7, 0x74, 0xce, 0x7, 0x40,
		0x64, 0x7c, 0xee, 0xea, 0xa3, 0x10, 0xbd, 0x12, 0xf9, 0x85, 0xa8, 0xeb, 0x9f,
		0x59, 0xfd, 0xd4, 0x26, 0xce, 0xa5, 0xb2, 0x12, 0xf, 0x4f, 0x2a, 0x34, 0xbc,
		0xab, 0x76, 0x4b, 0x7e, 0x6c, 0x54, 0xd6, 0x84, 0x2, 0x38, 0xbc, 0xc4, 0x5, 0x87,
		0xa5, 0x9e, 0x66, 0xed, 0x1f, 0x33, 0x89, 0x45, 0x77, 0x63, 0x5c, 0x47, 0xa,
		0xf7, 0x5c, 0xf9, 0x2c, 0x20, 0xd1, 0xda, 0x43, 0xe1, 0xbf, 0xc4, 0x19, 0xe2,
		0x22, 0xa6, 0xf0, 0xd0, 0xbb, 0x35, 0x8c, 0x5e, 0x38, 0xf9, 0xcb, 0x5, 0xa, 0xea,
		0xfe, 0x90, 0x48, 0x14, 0xf1, 0xac, 0x1a, 0xa4, 0x9c, 0xca, 0x9e, 0xa0, 0xca, 0x83,
	})`
$DIR/internal/config/identity/openid/jwks_test.go:110:29-110:39: `.N.Bytes()`
$DIR/internal/config/identity/openid/jwt_test.go:56:8-56:29: `.Number("1574812326")`
$DIR/internal/config/identity/openid/jwt_test.go:58:8-58:20: `.Duration(3)`
$DIR/internal/config/identity/openid/jwt_test.go:63:3-73:5: `t.Run("", func(t *testing.T) {
			claims := map[string]interface{}{}
			claims["exp"] = testCase.exp
			err := updateClaimsExpiry(testCase.dsecs, claims)
			if err != nil && !testCase.expectedFailure {
				t.Errorf("Expected success, got failure %s", err)
			}
			if err == nil && testCase.expectedFailure {
				t.Error("Expected failure, got success")
			}
		})`
$DIR/internal/config/identity/openid/jwt_test.go:63:4-73:5: `.Run("", func(t *testing.T) {
			claims := map[string]interface{}{}
			claims["exp"] = testCase.exp
			err := updateClaimsExpiry(testCase.dsecs, claims)
			if err != nil && !testCase.expectedFailure {
				t.Errorf("Expected success, got failure %s", err)
			}
			if err == nil && testCase.expectedFailure {
				t.Error("Expected failure, got success")
			}
		})`
$DIR/internal/config/identity/openid/jwt_test.go:65:4-65:32: `claims["exp"] = testCase.exp`
$DIR/internal/config/identity/openid/jwt_test.go:105:16-105:41: `.SigningMethodHS256.Alg()`
$DIR/internal/config/identity/openid/jwt_test.go:110:19-110:87: `.SignedString([]byte("WNGvKVyyNmXq0TraSvjaDN9CtpFgx35IXtGEffMCPR0"))`
$DIR/internal/config/identity/openid/jwt_test.go:114:2-114:20: `fmt.Println(token)`
$DIR/internal/config/identity/openid/jwt_test.go:114:5-114:20: `.Println(token)`
$DIR/internal/config/identity/openid/jwt_test.go:116:17-116:42: `.ParseHTTPURL(server.URL)`
$DIR/internal/config/identity/openid/jwt_test.go:125:2-125:108: `pubKeys.add("76b95ae5-33ef-4283-97b7-d2a85dc2d8f4", []byte("WNGvKVyyNmXq0TraSvjaDN9CtpFgx35IXtGEffMCPR0"))`
$DIR/internal/config/identity/openid/jwt_test.go:125:9-125:108: `.add("76b95ae5-33ef-4283-97b7-d2a85dc2d8f4", []byte("WNGvKVyyNmXq0TraSvjaDN9CtpFgx35IXtGEffMCPR0"))`
$DIR/internal/config/identity/openid/jwt_test.go:135:2-135:24: `provider.JWKS.URL = u1`
$DIR/internal/config/identity/openid/jwt_test.go:151:14-151:82: `.Validate(context.Background(), DummyRoleARN, token, "", "", claims)`
$DIR/internal/config/identity/openid/jwt_test.go:151:31-151:44: `.Background()`
$DIR/internal/config/identity/openid/jwt_test.go:157:2-165:8: `const jsonkey = `{"keys":
       [
         {"kty":"RSA",
          "n": "0vx7agoebGcQSuuPiLJXZptN9nndrQmbXEps2aiAFbWhM78LhWx4cbbfAAtVT86zwu1RK7aPFFxuhDR1L6tSoc_BJECPebWKRXjBZCiFV4n3oknjhMstn64tZ_2W-5JsGY4Hc5n9yBXArwl93lqt7_RN5w6Cf0h4QyQ5v-65YGjQR0_FDW2QvzqY368QQMicAtaSqzs8KJZgnYb9c7d0zgdAZHzu6qMQvRL5hajrn1n91CbOpbISD08qNLyrdkt-bFTWhAI4vMQFh6WeZu0fM4lFd2NcRwr3XPksINHaQ-G_xBniIqbw0Ls1jF44-csFCur-kEgU8awapJzKnqDKgw",
          "e":"AQAB",
          "alg":"RS256",
          "kid":"2011-04-29"}
       ]
     }``
$DIR/internal/config/identity/openid/jwt_test.go:171:16-171:62: `.parseAndAdd(bytes.NewBuffer([]byte(jsonkey)))`
$DIR/internal/config/identity/openid/jwt_test.go:171:34-171:61: `.NewBuffer([]byte(jsonkey))`
$DIR/internal/config/identity/openid/jwt_test.go:179:17-179:55: `.ParseHTTPURL("http://127.0.0.1:8443")`
$DIR/internal/config/identity/openid/jwt_test.go:185:2-185:24: `provider.JWKS.URL = u1`
$DIR/internal/config/identity/openid/jwt_test.go:197:15-197:61: `.Parse("http://127.0.0.1:8443/?Token=invalid")`
$DIR/internal/config/identity/openid/jwt_test.go:203:14-203:99: `.Validate(context.Background(), DummyRoleARN, u.Query().Get("Token"), "", "", claims)`
$DIR/internal/config/identity/openid/jwt_test.go:203:31-203:44: `.Background()`
$DIR/internal/config/identity/openid/jwt_test.go:203:61-203:69: `.Query()`
$DIR/internal/config/identity/openid/jwt_test.go:203:69-203:82: `.Get("Token")`
$DIR/internal/config/identity/openid/jwt_test.go:216:18-216:31: `.Duration(60)`
$DIR/internal/config/identity/openid/jwt_test.go:232:18-232:32: `.Duration(901)`
$DIR/internal/config/identity/openid/jwt_test.go:237:16-237:39: `.Parse(testCase.reqURL)`
$DIR/internal/config/identity/openid/jwt_test.go:241:35-241:43: `.Query()`
$DIR/internal/config/identity/openid/jwt_test.go:241:43-241:66: `.Get("DurationSeconds")`
$DIR/internal/config/identity/openid/jwt_test.go:253:22-253:223: `.StdEncoding.DecodeString("NTNv7j0TuYARvmNMmWXo6fKvM4o6nv/aUi9ryX38ZH+L1bkrnD1ObOQ8JAUmHCBq7Iy7otZcyAagBLHVKvvYaIpmMuxmARQ97jUVG16Jkpkp1wXOPsrF9zwew6TpczyHkHgX5EuLg2MeBuiT/qJACs1J0apruOOJCg/gOtkjB4c=")`
$DIR/internal/config/identity/openid/jwt_test.go:255:19-255:34: `.NewMapClaims()`
$DIR/internal/config/identity/openid/jwt_test.go:256:2-256:50: `claimsMap.SetExpiry(time.Now().Add(time.Minute))`
$DIR/internal/config/identity/openid/jwt_test.go:256:11-256:50: `.SetExpiry(time.Now().Add(time.Minute))`
$DIR/internal/config/identity/openid/jwt_test.go:256:26-256:32: `.Now()`
$DIR/internal/config/identity/openid/jwt_test.go:256:32-256:49: `.Add(time.Minute)`
$DIR/internal/config/identity/openid/jwt_test.go:257:2-257:39: `claimsMap.SetAccessKey("test-access")`
$DIR/internal/config/identity/openid/jwt_test.go:257:11-257:39: `.SetAccessKey("test-access")`
$DIR/internal/config/identity/openid/jwt_test.go:262:16-262:67: `.NewWithClaims(jwtgo.SigningMethodHS256, claimsMap)`
$DIR/internal/config/identity/openid/jwt_test.go:263:27-263:49: `.SignedString(signKey)`
$DIR/internal/config/identity/openid/jwt_test.go:269:12-271:4: `.ParseWithClaims(tokenString, claimsMap, func(*jwtm.MapClaims) ([]byte, error) {
		return signKey, nil
	})`
$DIR/internal/config/identity/openid/jwt_test.go:284:2-284:33: `testKvs.Set(Vendor, "keycloak")`
$DIR/internal/config/identity/openid/jwt_test.go:284:9-284:33: `.Set(Vendor, "keycloak")`
$DIR/internal/config/identity/openid/jwt_test.go:285:2-285:41: `testKvs.Set(KeyCloakRealm, "TestRealm")`
$DIR/internal/config/identity/openid/jwt_test.go:285:9-285:41: `.Set(KeyCloakRealm, "TestRealm")`
$DIR/internal/config/identity/openid/jwt_test.go:286:2-286:66: `testKvs.Set(KeyCloakAdminURL, "http://keycloak.test/auth/admin")`
$DIR/internal/config/identity/openid/jwt_test.go:286:9-286:66: `.Set(KeyCloakAdminURL, "http://keycloak.test/auth/admin")`
$DIR/internal/config/identity/openid/jwt_test.go:288:17-288:28: `.Get(param)`
$DIR/internal/config/identity/openid/jwt_test.go:295:22-295:72: `.initializeProvider(cfgGet, http.DefaultTransport)`
$DIR/internal/config/lambda/event/arn_test.go:35:21-35:34: `.arn.String()`
$DIR/internal/config/lambda/event/targetid_test.go:36:21-36:34: `.tid.String()`
$DIR/internal/config/lambda/event/targetid_test.go:56:18-56:45: `.tid.ToARN(testCase.region)`
$DIR/internal/config/lambda/event/targetid_test.go:76:24-76:42: `.tid.MarshalJSON()`
$DIR/internal/config/lambda/event/targetid_test.go:84:15-84:54: `.DeepEqual(data, testCase.expectedData)`
$DIR/internal/config/lambda/event/targetid_test.go:105:18-105:47: `.UnmarshalJSON(testCase.data)`
$DIR/internal/config/lambda/event/targetidset_test.go:36:21-36:33: `.set.Clone()`
$DIR/internal/config/lambda/event/targetidset_test.go:38:14-38:46: `.DeepEqual(result, testCase.set)`
$DIR/internal/config/lambda/event/targetidset_test.go:42:3-42:37: `result.add(testCase.targetIDToAdd)`
$DIR/internal/config/lambda/event/targetidset_test.go:42:9-42:37: `.add(testCase.targetIDToAdd)`
$DIR/internal/config/lambda/event/targetidset_test.go:43:13-43:45: `.DeepEqual(result, testCase.set)`
$DIR/internal/config/lambda/event/targetidset_test.go:63:21-63:50: `.set.Union(testCase.setToAdd)`
$DIR/internal/config/lambda/event/targetidset_test.go:65:14-65:57: `.DeepEqual(testCase.expectedResult, result)`
$DIR/internal/config/lambda/event/targetidset_test.go:85:21-85:58: `.set.Difference(testCase.setToRemove)`
$DIR/internal/config/lambda/event/targetidset_test.go:87:14-87:57: `.DeepEqual(testCase.expectedResult, result)`
$DIR/internal/config/lambda/event/targetidset_test.go:106:14-106:57: `.DeepEqual(testCase.expectedResult, result)`
$DIR/internal/config/storageclass/storage-class_test.go:51:10-51:63: `.New("Unsupported scheme AB. Supported scheme is EC")`
$DIR/internal/config/storageclass/storage-class_test.go:58:10-58:45: `.New("Too many sections in EC:4:5")`
$DIR/internal/config/storageclass/storage-class_test.go:65:10-65:59: `.New(`strconv.Atoi: parsing "A": invalid syntax`)`
$DIR/internal/config/storageclass/storage-class_test.go:72:10-72:40: `.New("Too few sections in AB")`
$DIR/internal/config/storageclass/storage-class_test.go:85:41-85:69: `.DeepEqual(gotSc, tt.wantSc)`
$DIR/internal/config/storageclass/storage-class_test.go:150:4-150:23: `scfg.RRS.Parity = 7`
$DIR/internal/config/storageclass/storage-class_test.go:154:4-154:28: `scfg.Standard.Parity = 6`
$DIR/internal/config/storageclass/storage-class_test.go:158:4-158:28: `scfg.Standard.Parity = 7`
$DIR/internal/config/storageclass/storage-class_test.go:160:17-160:39: `.GetParityForSC(tt.sc)`
$DIR/internal/crypto/header_test.go:36:3-36:46: `got = got && S3KMS.IsRequested(test.Header)`
$DIR/internal/crypto/header_test.go:36:21-36:46: `.IsRequested(test.Header)`
$DIR/internal/crypto/header_test.go:47:3-47:43: `got = got && S3.IsRequested(test.Header)`
$DIR/internal/crypto/header_test.go:47:18-47:43: `.IsRequested(test.Header)`
$DIR/internal/crypto/header_test.go:58:3-58:45: `got = got && SSEC.IsRequested(test.Header)`
$DIR/internal/crypto/header_test.go:58:20-58:45: `.IsRequested(test.Header)`
$DIR/internal/crypto/header_test.go:93:18-93:43: `.IsRequested(test.Header)`
$DIR/internal/crypto/header_test.go:139:21-139:44: `.ParseHTTP(test.Header)`
$DIR/internal/crypto/header_test.go:162:15-162:40: `.IsRequested(test.Header)`
$DIR/internal/crypto/header_test.go:180:15-180:38: `.ParseHTTP(test.Header)`
$DIR/internal/crypto/header_test.go:222:17-222:42: `.IsRequested(test.Header)`
$DIR/internal/crypto/header_test.go:264:20-264:45: `.IsRequested(test.Header)`
$DIR/internal/crypto/header_test.go:335:19-335:42: `.ParseHTTP(test.Header)`
$DIR/internal/crypto/header_test.go:414:22-414:45: `.ParseHTTP(test.Header)`
$DIR/internal/crypto/header_test.go:501:4-501:19: `sort.Strings(v)`
$DIR/internal/crypto/header_test.go:501:8-501:19: `.Strings(v)`
$DIR/internal/crypto/header_test.go:502:4-502:19: `sort.Strings(u)`
$DIR/internal/crypto/header_test.go:502:8-502:19: `.Strings(u)`
$DIR/internal/crypto/header_test.go:526:4-526:20: `metadata[k] = ""`
$DIR/internal/crypto/header_test.go:529:3-529:38: `RemoveSensitiveHeaders(test.Header)`
$DIR/internal/crypto/header_test.go:533:3-533:35: `RemoveSensitiveEntries(metadata)`
$DIR/internal/crypto/key_test.go:52:23-52:49: `logger.DisableErrorLog = l`
$DIR/internal/crypto/key_test.go:53:2-53:31: `logger.DisableErrorLog = true`
$DIR/internal/crypto/key_test.go:57:3-63:6: `func() {
			defer recoverTest(i, test.ShouldPass, t)
			key := GenerateKey(test.ExtKey[:], test.Random)
			if [32]byte(key) == [32]byte{} {
				t.Errorf("Test %d: generated key is zero key", i) // check that we generate random and unique key
			}
		}()`
$DIR/internal/crypto/key_test.go:78:23-78:49: `logger.DisableErrorLog = l`
$DIR/internal/crypto/key_test.go:79:2-79:31: `logger.DisableErrorLog = true`
$DIR/internal/crypto/key_test.go:83:3-89:6: `func() {
			defer recoverTest(i, test.ShouldPass, t)
			iv := GenerateIV(test.Random)
			if iv == [32]byte{} {
				t.Errorf("Test %d: generated IV is zero IV", i) // check that we generate random and unique IV
			}
		}()`
$DIR/internal/crypto/key_test.go:132:19-132:108: `.Seal(test.SealExtKey[:], test.SealIV, test.SealDomain, test.SealBucket, test.SealObject)`
$DIR/internal/crypto/key_test.go:133:16-133:113: `.Unseal(test.UnsealExtKey[:], sealedKey, test.UnsealDomain, test.UnsealBucket, test.UnsealObject)`
$DIR/internal/crypto/key_test.go:143:18-143:68: `.Seal(extKey[:], iv, "SSE-S3", "bucket", "object")`
$DIR/internal/crypto/key_test.go:144:2-144:45: `sealedKey.Algorithm = InsecureSealAlgorithm`
$DIR/internal/crypto/key_test.go:145:15-145:74: `.Unseal(extKey[:], sealedKey, "SSE-S3", "bucket", "object")`
$DIR/internal/crypto/key_test.go:162:30-162:57: `.DecodeString(test.PartKey)`
$DIR/internal/crypto/key_test.go:166:17-166:44: `.DerivePartKey(test.PartID)`
$DIR/internal/crypto/key_test.go:167:12-167:47: `.Equal(partKey[:], expectedPartKey)`
$DIR/internal/crypto/key_test.go:183:3-183:19: `key[i] = byte(i)`
$DIR/internal/crypto/key_test.go:186:18-186:37: `.DecodeString(etag)`
$DIR/internal/crypto/key_test.go:190:20-190:34: `.SealETag(tag)`
$DIR/internal/crypto/key_test.go:191:27-191:50: `.UnsealETag(sealedETag)`
$DIR/internal/crypto/key_test.go:195:12-195:37: `.Equal(unsealedETag, tag)`
$DIR/internal/crypto/metadata_test.go:88:23-88:50: `.IsEncrypted(test.Metadata)`
$DIR/internal/crypto/metadata_test.go:111:25-111:52: `.IsEncrypted(test.Metadata)`
$DIR/internal/crypto/metadata_test.go:193:39-193:68: `.ParseMetadata(test.Metadata)`
$DIR/internal/crypto/metadata_test.go:205:12-205:41: `.Equal(dataKey, test.DataKey)`
$DIR/internal/crypto/metadata_test.go:214:12-214:59: `.Equal(sealedKey.Key[:], test.SealedKey.Key[:])`
$DIR/internal/crypto/metadata_test.go:217:12-217:57: `.Equal(sealedKey.IV[:], test.SealedKey.IV[:])`
$DIR/internal/crypto/metadata_test.go:280:25-280:54: `.ParseMetadata(test.Metadata)`
$DIR/internal/crypto/metadata_test.go:295:12-295:59: `.Equal(sealedKey.Key[:], test.SealedKey.Key[:])`
$DIR/internal/crypto/metadata_test.go:298:12-298:57: `.Equal(sealedKey.IV[:], test.SealedKey.IV[:])`
$DIR/internal/crypto/metadata_test.go:316:23-316:49: `logger.DisableErrorLog = l`
$DIR/internal/crypto/metadata_test.go:317:2-317:31: `logger.DisableErrorLog = true`
$DIR/internal/crypto/metadata_test.go:319:17-319:85: `.CreateMetadata(nil, test.KeyID, test.SealedDataKey, test.SealedKey)`
$DIR/internal/crypto/metadata_test.go:320:38-320:62: `.ParseMetadata(metadata)`
$DIR/internal/crypto/metadata_test.go:328:12-328:46: `.Equal(kmsKey, test.SealedDataKey)`
$DIR/internal/crypto/metadata_test.go:334:12-334:57: `.Equal(sealedKey.IV[:], test.SealedKey.IV[:])`
$DIR/internal/crypto/metadata_test.go:337:12-337:59: `.Equal(sealedKey.Key[:], test.SealedKey.Key[:])`
$DIR/internal/crypto/metadata_test.go:347:8-347:87: `.CreateMetadata(nil, "", []byte{}, SealedKey{Algorithm: InsecureSealAlgorithm})`
$DIR/internal/crypto/metadata_test.go:361:23-361:49: `logger.DisableErrorLog = l`
$DIR/internal/crypto/metadata_test.go:362:2-362:31: `logger.DisableErrorLog = true`
$DIR/internal/crypto/metadata_test.go:364:19-364:55: `.CreateMetadata(nil, test.SealedKey)`
$DIR/internal/crypto/metadata_test.go:365:25-365:49: `.ParseMetadata(metadata)`
$DIR/internal/crypto/metadata_test.go:373:12-373:57: `.Equal(sealedKey.IV[:], test.SealedKey.IV[:])`
$DIR/internal/crypto/metadata_test.go:376:12-376:59: `.Equal(sealedKey.Key[:], test.SealedKey.Key[:])`
$DIR/internal/crypto/metadata_test.go:386:10-386:75: `.CreateMetadata(nil, SealedKey{Algorithm: InsecureSealAlgorithm})`
$DIR/internal/crypto/metadata_test.go:401:19-401:43: `.DecodeString(test.ETag)`
$DIR/internal/crypto/metadata_test.go:454:3-454:39: `RemoveInternalEntries(test.Metadata)`
$DIR/internal/crypto/sse_test.go:26:2-26:25: `const Domain = "SSE-S3"`
$DIR/internal/crypto/sse_test.go:27:17-27:26: `.String()`
$DIR/internal/crypto/sse_test.go:33:2-33:24: `const Domain = "SSE-C"`
$DIR/internal/crypto/sse_test.go:34:19-34:28: `.String()`
$DIR/internal/crypto/sse_test.go:108:20-108:91: `.UnsealObjectKey(test.Headers, test.Metadata, test.Bucket, test.Object)`
$DIR/internal/crypto/sse_test.go:183:23-183:94: `.UnsealObjectKey(test.Headers, test.Metadata, test.Bucket, test.Object)`
$DIR/internal/deadlineconn/deadlineconn_test.go:31:15-31:44: `.Listen("tcp", "localhost:0")`
$DIR/internal/deadlineconn/deadlineconn_test.go:36:17-36:24: `.Addr()`
$DIR/internal/deadlineconn/deadlineconn_test.go:36:24-36:33: `.String()`
$DIR/internal/deadlineconn/deadlineconn_test.go:44:2-44:11: `wg.Add(1)`
$DIR/internal/deadlineconn/deadlineconn_test.go:44:4-44:11: `.Add(1)`
$DIR/internal/deadlineconn/deadlineconn_test.go:46:11-46:18: `.Done()`
$DIR/internal/deadlineconn/deadlineconn_test.go:48:31-48:43: `.AcceptTCP()`
$DIR/internal/deadlineconn/deadlineconn_test.go:54:3-54:45: `deadlineconn.WithReadDeadline(time.Second)`
$DIR/internal/deadlineconn/deadlineconn_test.go:54:15-54:45: `.WithReadDeadline(time.Second)`
$DIR/internal/deadlineconn/deadlineconn_test.go:55:3-55:46: `deadlineconn.WithWriteDeadline(time.Second)`
$DIR/internal/deadlineconn/deadlineconn_test.go:55:15-55:46: `.WithWriteDeadline(time.Second)`
$DIR/internal/deadlineconn/deadlineconn_test.go:60:3-60:33: `_, terr = deadlineconn.Read(b)`
$DIR/internal/deadlineconn/deadlineconn_test.go:60:25-60:33: `.Read(b)`
$DIR/internal/deadlineconn/deadlineconn_test.go:72:3-72:30: `time.Sleep(3 * time.Second)`
$DIR/internal/deadlineconn/deadlineconn_test.go:72:7-72:30: `.Sleep(3 * time.Second)`
$DIR/internal/deadlineconn/deadlineconn_test.go:74:3-74:33: `_, terr = deadlineconn.Read(b)`
$DIR/internal/deadlineconn/deadlineconn_test.go:74:25-74:33: `.Read(b)`
$DIR/internal/deadlineconn/deadlineconn_test.go:79:3-79:23: `received = string(b)`
$DIR/internal/deadlineconn/deadlineconn_test.go:86:3-86:64: `_, terr = io.WriteString(deadlineconn, "messages received\n")`
$DIR/internal/deadlineconn/deadlineconn_test.go:86:15-86:64: `.WriteString(deadlineconn, "messages received\n")`
$DIR/internal/deadlineconn/deadlineconn_test.go:93:15-93:39: `.Dial("tcp", serverAddr)`
$DIR/internal/deadlineconn/deadlineconn_test.go:99:2-99:45: `_, err = io.WriteString(c, "message one\n")`
$DIR/internal/deadlineconn/deadlineconn_test.go:99:13-99:45: `.WriteString(c, "message one\n")`
$DIR/internal/deadlineconn/deadlineconn_test.go:103:2-103:45: `_, err = io.WriteString(c, "message two\n")`
$DIR/internal/deadlineconn/deadlineconn_test.go:103:13-103:45: `.WriteString(c, "message two\n")`
$DIR/internal/deadlineconn/deadlineconn_test.go:108:24-108:37: `.NewReader(c)`
$DIR/internal/deadlineconn/deadlineconn_test.go:108:37-108:54: `.ReadString('\n')`
$DIR/internal/disk/disk_test.go:30:17-30:44: `.GetInfo(t.TempDir(), true)`
$DIR/internal/disk/disk_test.go:30:27-30:37: `.TempDir()`
$DIR/internal/disk/stat_test.go:109:3-128:5: `t.Run("", func(t *testing.T) {
			tmpfile, err := os.CreateTemp("", "testfile")
			if err != nil {
				t.Error(err)
			}
			tmpfile.WriteString(testCase.stat)
			tmpfile.Sync()
			tmpfile.Close()

			iostats, err := readDriveStats(tmpfile.Name())
			if err != nil && !testCase.expectErr {
				t.Fatalf("unexpected err; %v", err)
			}
			if testCase.expectErr && err == nil {
				t.Fatal("expected to fail but err is nil")
			}
			if !reflect.DeepEqual(iostats, testCase.expectedIOStats) {
				t.Fatalf("expected iostats: %v but got %v", testCase.expectedIOStats, iostats)
			}
		})`
$DIR/internal/disk/stat_test.go:109:4-128:5: `.Run("", func(t *testing.T) {
			tmpfile, err := os.CreateTemp("", "testfile")
			if err != nil {
				t.Error(err)
			}
			tmpfile.WriteString(testCase.stat)
			tmpfile.Sync()
			tmpfile.Close()

			iostats, err := readDriveStats(tmpfile.Name())
			if err != nil && !testCase.expectErr {
				t.Fatalf("unexpected err; %v", err)
			}
			if testCase.expectErr && err == nil {
				t.Fatal("expected to fail but err is nil")
			}
			if !reflect.DeepEqual(iostats, testCase.expectedIOStats) {
				t.Fatalf("expected iostats: %v but got %v", testCase.expectedIOStats, iostats)
			}
		})`
$DIR/internal/disk/stat_test.go:110:22-110:49: `.CreateTemp("", "testfile")`
$DIR/internal/disk/stat_test.go:114:4-114:38: `tmpfile.WriteString(testCase.stat)`
$DIR/internal/disk/stat_test.go:114:11-114:38: `.WriteString(testCase.stat)`
$DIR/internal/disk/stat_test.go:115:4-115:18: `tmpfile.Sync()`
$DIR/internal/disk/stat_test.go:115:11-115:18: `.Sync()`
$DIR/internal/disk/stat_test.go:118:42-118:49: `.Name()`
$DIR/internal/disk/stat_test.go:125:15-125:60: `.DeepEqual(iostats, testCase.expectedIOStats)`
$DIR/internal/dsync/drwmutex_test.go:178:15-178:50: `.GOMAXPROCS(runtime.GOMAXPROCS(-1))`
$DIR/internal/dsync/drwmutex_test.go:178:34-178:49: `.GOMAXPROCS(-1)`
$DIR/internal/dsync/drwmutex_test.go:179:2-179:29: `doTestParallelReaders(1, 4)`
$DIR/internal/dsync/drwmutex_test.go:180:2-180:29: `doTestParallelReaders(3, 4)`
$DIR/internal/dsync/drwmutex_test.go:246:15-246:50: `.GOMAXPROCS(runtime.GOMAXPROCS(-1))`
$DIR/internal/dsync/drwmutex_test.go:246:34-246:49: `.GOMAXPROCS(-1)`
$DIR/internal/dsync/drwmutex_test.go:248:12-248:20: `.Short()`
$DIR/internal/dsync/drwmutex_test.go:249:3-249:8: `n = 5`
$DIR/internal/dsync/drwmutex_test.go:251:2-251:27: `hammerRWMutex(t, 1, 1, n)`
$DIR/internal/dsync/drwmutex_test.go:252:2-252:27: `hammerRWMutex(t, 1, 3, n)`
$DIR/internal/dsync/drwmutex_test.go:253:2-253:28: `hammerRWMutex(t, 1, 10, n)`
$DIR/internal/dsync/drwmutex_test.go:254:2-254:27: `hammerRWMutex(t, 4, 1, n)`
$DIR/internal/dsync/drwmutex_test.go:255:2-255:27: `hammerRWMutex(t, 4, 3, n)`
$DIR/internal/dsync/drwmutex_test.go:256:2-256:28: `hammerRWMutex(t, 4, 10, n)`
$DIR/internal/dsync/drwmutex_test.go:257:2-257:28: `hammerRWMutex(t, 10, 1, n)`
$DIR/internal/dsync/drwmutex_test.go:258:2-258:28: `hammerRWMutex(t, 10, 3, n)`
$DIR/internal/dsync/drwmutex_test.go:259:2-259:29: `hammerRWMutex(t, 10, 10, n)`
$DIR/internal/dsync/drwmutex_test.go:271:19-271:32: `.Background()`
$DIR/internal/dsync/drwmutex_test.go:281:3-281:35: `mu.RUnlock(context.Background())`
$DIR/internal/dsync/drwmutex_test.go:281:5-281:35: `.RUnlock(context.Background())`
$DIR/internal/dsync/drwmutex_test.go:281:21-281:34: `.Background()`
$DIR/internal/dsync/drwmutex_test.go:283:2-283:22: `mu.RLock(id, source)`
$DIR/internal/dsync/drwmutex_test.go:283:4-283:22: `.RLock(id, source)`
$DIR/internal/dsync/drwmutex_test.go:284:19-284:32: `.Background()`
$DIR/internal/dsync/drwmutex_test.go:295:20-295:33: `.Background()`
$DIR/internal/dsync/drwmutex_test.go:305:3-305:34: `mu.Unlock(context.Background())`
$DIR/internal/dsync/drwmutex_test.go:305:5-305:34: `.Unlock(context.Background())`
$DIR/internal/dsync/drwmutex_test.go:305:20-305:33: `.Background()`
$DIR/internal/dsync/drwmutex_test.go:307:2-307:21: `mu.Lock(id, source)`
$DIR/internal/dsync/drwmutex_test.go:307:4-307:21: `.Lock(id, source)`
$DIR/internal/dsync/drwmutex_test.go:308:20-308:33: `.Background()`
$DIR/internal/dsync/dsync_test.go:41:2-41:20: `startLockServers()`
$DIR/internal/dsync/dsync_test.go:46:3-46:49: `clnts = append(clnts, newClient(nodes[i].URL))`
$DIR/internal/dsync/dsync_test.go:50:64-50:70: `.New()`
$DIR/internal/dsync/dsync_test.go:50:70-50:79: `.String()`
$DIR/internal/dsync/dsync_test.go:59:11-59:17: `.Run()`
$DIR/internal/dsync/dsync_test.go:60:2-60:19: `stopLockServers()`
$DIR/internal/dsync/dsync_test.go:67:2-67:21: `dm.Lock(id, source)`
$DIR/internal/dsync/dsync_test.go:67:4-67:21: `.Lock(id, source)`
$DIR/internal/dsync/dsync_test.go:70:2-70:44: `time.Sleep(testDrwMutexRefreshCallTimeout)`
$DIR/internal/dsync/dsync_test.go:70:6-70:44: `.Sleep(testDrwMutexRefreshCallTimeout)`
$DIR/internal/dsync/dsync_test.go:72:19-72:32: `.Background()`
$DIR/internal/dsync/dsync_test.go:78:2-78:21: `dm.Lock(id, source)`
$DIR/internal/dsync/dsync_test.go:78:4-78:21: `.Lock(id, source)`
$DIR/internal/dsync/dsync_test.go:79:2-79:70: `time.Sleep(time.Duration(10+(rand.Float32()*50)) * time.Millisecond)`
$DIR/internal/dsync/dsync_test.go:79:6-79:70: `.Sleep(time.Duration(10+(rand.Float32()*50)) * time.Millisecond)`
$DIR/internal/dsync/dsync_test.go:79:17-79:50: `.Duration(10+(rand.Float32()*50))`
$DIR/internal/dsync/dsync_test.go:79:35-79:45: `.Float32()`
$DIR/internal/dsync/dsync_test.go:80:2-80:33: `dm.Unlock(context.Background())`
$DIR/internal/dsync/dsync_test.go:80:4-80:33: `.Unlock(context.Background())`
$DIR/internal/dsync/dsync_test.go:80:19-80:32: `.Background()`
$DIR/internal/dsync/dsync_test.go:82:2-82:21: `dm.Lock(id, source)`
$DIR/internal/dsync/dsync_test.go:82:4-82:21: `.Lock(id, source)`
$DIR/internal/dsync/dsync_test.go:83:2-83:70: `time.Sleep(time.Duration(10+(rand.Float32()*50)) * time.Millisecond)`
$DIR/internal/dsync/dsync_test.go:83:6-83:70: `.Sleep(time.Duration(10+(rand.Float32()*50)) * time.Millisecond)`
$DIR/internal/dsync/dsync_test.go:83:17-83:50: `.Duration(10+(rand.Float32()*50))`
$DIR/internal/dsync/dsync_test.go:83:35-83:45: `.Float32()`
$DIR/internal/dsync/dsync_test.go:84:2-84:33: `dm.Unlock(context.Background())`
$DIR/internal/dsync/dsync_test.go:84:4-84:33: `.Unlock(context.Background())`
$DIR/internal/dsync/dsync_test.go:84:19-84:32: `.Background()`
$DIR/internal/dsync/dsync_test.go:86:2-86:21: `dm.Lock(id, source)`
$DIR/internal/dsync/dsync_test.go:86:4-86:21: `.Lock(id, source)`
$DIR/internal/dsync/dsync_test.go:87:2-87:70: `time.Sleep(time.Duration(10+(rand.Float32()*50)) * time.Millisecond)`
$DIR/internal/dsync/dsync_test.go:87:6-87:70: `.Sleep(time.Duration(10+(rand.Float32()*50)) * time.Millisecond)`
$DIR/internal/dsync/dsync_test.go:87:17-87:50: `.Duration(10+(rand.Float32()*50))`
$DIR/internal/dsync/dsync_test.go:87:35-87:45: `.Float32()`
$DIR/internal/dsync/dsync_test.go:88:2-88:33: `dm.Unlock(context.Background())`
$DIR/internal/dsync/dsync_test.go:88:4-88:33: `.Unlock(context.Background())`
$DIR/internal/dsync/dsync_test.go:88:19-88:32: `.Background()`
$DIR/internal/dsync/dsync_test.go:90:2-90:21: `dm.Lock(id, source)`
$DIR/internal/dsync/dsync_test.go:90:4-90:21: `.Lock(id, source)`
$DIR/internal/dsync/dsync_test.go:91:2-91:70: `time.Sleep(time.Duration(10+(rand.Float32()*50)) * time.Millisecond)`
$DIR/internal/dsync/dsync_test.go:91:6-91:70: `.Sleep(time.Duration(10+(rand.Float32()*50)) * time.Millisecond)`
$DIR/internal/dsync/dsync_test.go:91:17-91:50: `.Duration(10+(rand.Float32()*50))`
$DIR/internal/dsync/dsync_test.go:91:35-91:45: `.Float32()`
$DIR/internal/dsync/dsync_test.go:92:2-92:33: `dm.Unlock(context.Background())`
$DIR/internal/dsync/dsync_test.go:92:4-92:33: `.Unlock(context.Background())`
$DIR/internal/dsync/dsync_test.go:92:19-92:32: `.Background()`
$DIR/internal/dsync/dsync_test.go:94:2-94:21: `dm.Lock(id, source)`
$DIR/internal/dsync/dsync_test.go:94:4-94:21: `.Lock(id, source)`
$DIR/internal/dsync/dsync_test.go:95:2-95:70: `time.Sleep(time.Duration(10+(rand.Float32()*50)) * time.Millisecond)`
$DIR/internal/dsync/dsync_test.go:95:6-95:70: `.Sleep(time.Duration(10+(rand.Float32()*50)) * time.Millisecond)`
$DIR/internal/dsync/dsync_test.go:95:17-95:50: `.Duration(10+(rand.Float32()*50))`
$DIR/internal/dsync/dsync_test.go:95:35-95:45: `.Float32()`
$DIR/internal/dsync/dsync_test.go:96:19-96:32: `.Background()`
$DIR/internal/dsync/dsync_test.go:104:2-104:24: `dm1st.Lock(id, source)`
$DIR/internal/dsync/dsync_test.go:104:7-104:24: `.Lock(id, source)`
$DIR/internal/dsync/dsync_test.go:108:3-108:45: `time.Sleep(5 * testDrwMutexAcquireTimeout)`
$DIR/internal/dsync/dsync_test.go:108:7-108:45: `.Sleep(5 * testDrwMutexAcquireTimeout)`
$DIR/internal/dsync/dsync_test.go:111:3-111:37: `dm1st.Unlock(context.Background())`
$DIR/internal/dsync/dsync_test.go:111:8-111:37: `.Unlock(context.Background())`
$DIR/internal/dsync/dsync_test.go:111:23-111:36: `.Background()`
$DIR/internal/dsync/dsync_test.go:114:2-114:24: `dm2nd.Lock(id, source)`
$DIR/internal/dsync/dsync_test.go:114:7-114:24: `.Lock(id, source)`
$DIR/internal/dsync/dsync_test.go:117:2-117:48: `time.Sleep(testDrwMutexRefreshCallTimeout * 2)`
$DIR/internal/dsync/dsync_test.go:117:6-117:48: `.Sleep(testDrwMutexRefreshCallTimeout * 2)`
$DIR/internal/dsync/dsync_test.go:119:22-119:35: `.Background()`
$DIR/internal/dsync/dsync_test.go:128:2-128:24: `dm1st.Lock(id, source)`
$DIR/internal/dsync/dsync_test.go:128:7-128:24: `.Lock(id, source)`
$DIR/internal/dsync/dsync_test.go:129:17-129:23: `.Now()`
$DIR/internal/dsync/dsync_test.go:134:3-134:45: `time.Sleep(2 * testDrwMutexAcquireTimeout)`
$DIR/internal/dsync/dsync_test.go:134:7-134:45: `.Sleep(2 * testDrwMutexAcquireTimeout)`
$DIR/internal/dsync/dsync_test.go:137:3-137:37: `dm1st.Unlock(context.Background())`
$DIR/internal/dsync/dsync_test.go:137:8-137:37: `.Unlock(context.Background())`
$DIR/internal/dsync/dsync_test.go:137:23-137:36: `.Background()`
$DIR/internal/dsync/dsync_test.go:139:2-139:42: `expect += 2 * testDrwMutexAcquireTimeout`
$DIR/internal/dsync/dsync_test.go:142:2-142:11: `wg.Add(2)`
$DIR/internal/dsync/dsync_test.go:142:4-142:11: `.Add(2)`
$DIR/internal/dsync/dsync_test.go:145:11-145:18: `.Done()`
$DIR/internal/dsync/dsync_test.go:147:3-147:25: `dm2nd.Lock(id, source)`
$DIR/internal/dsync/dsync_test.go:147:8-147:25: `.Lock(id, source)`
$DIR/internal/dsync/dsync_test.go:151:4-151:46: `time.Sleep(2 * testDrwMutexAcquireTimeout)`
$DIR/internal/dsync/dsync_test.go:151:8-151:46: `.Sleep(2 * testDrwMutexAcquireTimeout)`
$DIR/internal/dsync/dsync_test.go:154:4-154:38: `dm2nd.Unlock(context.Background())`
$DIR/internal/dsync/dsync_test.go:154:9-154:38: `.Unlock(context.Background())`
$DIR/internal/dsync/dsync_test.go:154:24-154:37: `.Background()`
$DIR/internal/dsync/dsync_test.go:157:3-157:25: `dm3rd.Lock(id, source)`
$DIR/internal/dsync/dsync_test.go:157:8-157:25: `.Lock(id, source)`
$DIR/internal/dsync/dsync_test.go:160:3-160:45: `time.Sleep(testDrwMutexRefreshCallTimeout)`
$DIR/internal/dsync/dsync_test.go:160:7-160:45: `.Sleep(testDrwMutexRefreshCallTimeout)`
$DIR/internal/dsync/dsync_test.go:162:3-162:37: `dm3rd.Unlock(context.Background())`
$DIR/internal/dsync/dsync_test.go:162:8-162:37: `.Unlock(context.Background())`
$DIR/internal/dsync/dsync_test.go:162:23-162:36: `.Background()`
$DIR/internal/dsync/dsync_test.go:164:2-164:73: `expect += 2*testDrwMutexAcquireTimeout + testDrwMutexRefreshCallTimeout`
$DIR/internal/dsync/dsync_test.go:167:11-167:18: `.Done()`
$DIR/internal/dsync/dsync_test.go:169:3-169:25: `dm3rd.Lock(id, source)`
$DIR/internal/dsync/dsync_test.go:169:8-169:25: `.Lock(id, source)`
$DIR/internal/dsync/dsync_test.go:173:4-173:46: `time.Sleep(2 * testDrwMutexAcquireTimeout)`
$DIR/internal/dsync/dsync_test.go:173:8-173:46: `.Sleep(2 * testDrwMutexAcquireTimeout)`
$DIR/internal/dsync/dsync_test.go:176:4-176:38: `dm3rd.Unlock(context.Background())`
$DIR/internal/dsync/dsync_test.go:176:9-176:38: `.Unlock(context.Background())`
$DIR/internal/dsync/dsync_test.go:176:24-176:37: `.Background()`
$DIR/internal/dsync/dsync_test.go:179:3-179:25: `dm2nd.Lock(id, source)`
$DIR/internal/dsync/dsync_test.go:179:8-179:25: `.Lock(id, source)`
$DIR/internal/dsync/dsync_test.go:182:3-182:45: `time.Sleep(testDrwMutexRefreshCallTimeout)`
$DIR/internal/dsync/dsync_test.go:182:7-182:45: `.Sleep(testDrwMutexRefreshCallTimeout)`
$DIR/internal/dsync/dsync_test.go:184:3-184:37: `dm2nd.Unlock(context.Background())`
$DIR/internal/dsync/dsync_test.go:184:8-184:37: `.Unlock(context.Background())`
$DIR/internal/dsync/dsync_test.go:184:23-184:36: `.Background()`
$DIR/internal/dsync/dsync_test.go:186:2-186:73: `expect += 2*testDrwMutexAcquireTimeout + testDrwMutexRefreshCallTimeout`
$DIR/internal/dsync/dsync_test.go:188:2-188:11: `wg.Wait()`
$DIR/internal/dsync/dsync_test.go:188:4-188:11: `.Wait()`
$DIR/internal/dsync/dsync_test.go:190:17-190:32: `.Since(started)`
$DIR/internal/dsync/dsync_test.go:202:2-202:22: `dm1.Lock(id, source)`
$DIR/internal/dsync/dsync_test.go:202:5-202:22: `.Lock(id, source)`
$DIR/internal/dsync/dsync_test.go:203:2-203:22: `dm2.Lock(id, source)`
$DIR/internal/dsync/dsync_test.go:203:5-203:22: `.Lock(id, source)`
$DIR/internal/dsync/dsync_test.go:204:2-204:34: `dm1.Unlock(context.Background())`
$DIR/internal/dsync/dsync_test.go:204:5-204:34: `.Unlock(context.Background())`
$DIR/internal/dsync/dsync_test.go:204:20-204:33: `.Background()`
$DIR/internal/dsync/dsync_test.go:205:20-205:33: `.Background()`
$DIR/internal/dsync/dsync_test.go:210:12-210:20: `.Short()`
$DIR/internal/dsync/dsync_test.go:215:2-215:50: `dm.refreshInterval = testDrwMutexRefreshInterval`
$DIR/internal/dsync/dsync_test.go:217:24-217:57: `.WithCancel(context.Background())`
$DIR/internal/dsync/dsync_test.go:217:43-217:56: `.Background()`
$DIR/internal/dsync/dsync_test.go:219:8-219:76: `.GetLock(ctx, cancel, id, source, Options{Timeout: 5 * time.Minute})`
$DIR/internal/dsync/dsync_test.go:224:15-224:57: `.NewTimer(testDrwMutexRefreshInterval * 2)`
$DIR/internal/dsync/dsync_test.go:227:12-227:19: `.Done()`
$DIR/internal/dsync/dsync_test.go:233:19-233:32: `.Background()`
$DIR/internal/dsync/dsync_test.go:238:12-238:20: `.Short()`
$DIR/internal/dsync/dsync_test.go:244:3-244:40: `lockServers[i].setRefreshReply(false)`
$DIR/internal/dsync/dsync_test.go:244:17-244:40: `.setRefreshReply(false)`
$DIR/internal/dsync/dsync_test.go:245:23-245:45: `.setRefreshReply(true)`
$DIR/internal/dsync/dsync_test.go:249:2-249:45: `dm.refreshInterval = 500 * time.Millisecond`
$DIR/internal/dsync/dsync_test.go:251:2-251:11: `wg.Add(1)`
$DIR/internal/dsync/dsync_test.go:251:4-251:11: `.Add(1)`
$DIR/internal/dsync/dsync_test.go:253:20-253:53: `.WithCancel(context.Background())`
$DIR/internal/dsync/dsync_test.go:253:39-253:52: `.Background()`
$DIR/internal/dsync/dsync_test.go:255:3-255:7: `cl()`
$DIR/internal/dsync/dsync_test.go:256:3-256:12: `wg.Done()`
$DIR/internal/dsync/dsync_test.go:256:5-256:12: `.Done()`
$DIR/internal/dsync/dsync_test.go:259:8-259:76: `.GetLock(ctx, cancel, id, source, Options{Timeout: 5 * time.Minute})`
$DIR/internal/dsync/dsync_test.go:264:2-264:11: `wg.Wait()`
$DIR/internal/dsync/dsync_test.go:264:4-264:11: `.Wait()`
$DIR/internal/dsync/dsync_test.go:265:8-265:14: `.Err()`
$DIR/internal/dsync/dsync_test.go:270:19-270:32: `.Background()`
$DIR/internal/dsync/dsync_test.go:275:12-275:20: `.Short()`
$DIR/internal/dsync/dsync_test.go:280:2-280:52: `dm.refreshInterval = testDrwMutexUnlockCallTimeout`
$DIR/internal/dsync/dsync_test.go:281:8-281:90: `.GetLock(context.Background(), nil, id, source, Options{Timeout: 5 * time.Minute})`
$DIR/internal/dsync/dsync_test.go:281:24-281:37: `.Background()`
$DIR/internal/dsync/dsync_test.go:287:3-287:69: `lockServers[i].setResponseDelay(5 * testDrwMutexUnlockCallTimeout)`
$DIR/internal/dsync/dsync_test.go:287:17-287:69: `.setResponseDelay(5 * testDrwMutexUnlockCallTimeout)`
$DIR/internal/dsync/dsync_test.go:288:23-288:43: `.setResponseDelay(0)`
$DIR/internal/dsync/dsync_test.go:293:25-293:81: `.WithTimeout(context.Background(), 500*time.Millisecond)`
$DIR/internal/dsync/dsync_test.go:293:45-293:58: `.Background()`
$DIR/internal/dsync/dsync_test.go:295:3-295:17: `dm.Unlock(ctx)`
$DIR/internal/dsync/dsync_test.go:295:5-295:17: `.Unlock(ctx)`
$DIR/internal/dsync/dsync_test.go:296:3-296:31: `unlockReturned <- struct{}{}`
$DIR/internal/dsync/dsync_test.go:299:15-299:59: `.NewTimer(2 * testDrwMutexUnlockCallTimeout)`
$DIR/internal/dsync/dsync_test.go:300:13-300:20: `.Stop()`
$DIR/internal/dsync/dsync_test.go:321:12-321:20: `.Short()`
$DIR/internal/dsync/dsync_test.go:322:3-322:12: `loops = 5`
$DIR/internal/dsync/dsync_test.go:327:3-327:30: `go HammerMutex(m, loops, c)`
$DIR/internal/dsync/dsync_test.go:330:3-330:6: `<-c`
$DIR/internal/dsync/lock-args_gen_test.go:14:15-14:31: `.MarshalMsg(nil)`
$DIR/internal/dsync/lock-args_gen_test.go:18:16-18:34: `.UnmarshalMsg(bts)`
$DIR/internal/dsync/lock-args_gen_test.go:26:2-26:28: `left, err = msgp.Skip(bts)`
$DIR/internal/dsync/lock-args_gen_test.go:73:2-73:23: `msgp.Encode(&buf, &v)`
$DIR/internal/dsync/lock-args_gen_test.go:73:6-73:23: `.Encode(&buf, &v)`
$DIR/internal/dsync/lock-args_gen_test.go:75:8-75:18: `.Msgsize()`
$DIR/internal/dsync/lock-args_gen_test.go:76:8-76:14: `.Len()`
$DIR/internal/dsync/lock-args_gen_test.go:81:13-81:31: `.Decode(&buf, &vn)`
$DIR/internal/dsync/lock-args_gen_test.go:86:2-86:13: `buf.Reset()`
$DIR/internal/dsync/lock-args_gen_test.go:86:5-86:13: `.Reset()`
$DIR/internal/dsync/lock-args_gen_test.go:87:2-87:23: `msgp.Encode(&buf, &v)`
$DIR/internal/dsync/lock-args_gen_test.go:87:6-87:23: `.Encode(&buf, &v)`
$DIR/internal/dsync/lock-args_gen_test.go:88:2-88:35: `err = msgp.NewReader(&buf).Skip()`
$DIR/internal/dsync/lock-args_gen_test.go:127:15-127:31: `.MarshalMsg(nil)`
$DIR/internal/dsync/lock-args_gen_test.go:131:16-131:34: `.UnmarshalMsg(bts)`
$DIR/internal/dsync/lock-args_gen_test.go:139:2-139:28: `left, err = msgp.Skip(bts)`
$DIR/internal/dsync/lock-args_gen_test.go:186:2-186:23: `msgp.Encode(&buf, &v)`
$DIR/internal/dsync/lock-args_gen_test.go:186:6-186:23: `.Encode(&buf, &v)`
$DIR/internal/dsync/lock-args_gen_test.go:188:8-188:18: `.Msgsize()`
$DIR/internal/dsync/lock-args_gen_test.go:189:8-189:14: `.Len()`
$DIR/internal/dsync/lock-args_gen_test.go:194:13-194:31: `.Decode(&buf, &vn)`
$DIR/internal/dsync/lock-args_gen_test.go:199:2-199:13: `buf.Reset()`
$DIR/internal/dsync/lock-args_gen_test.go:199:5-199:13: `.Reset()`
$DIR/internal/dsync/lock-args_gen_test.go:200:2-200:23: `msgp.Encode(&buf, &v)`
$DIR/internal/dsync/lock-args_gen_test.go:200:6-200:23: `.Encode(&buf, &v)`
$DIR/internal/dsync/lock-args_gen_test.go:201:2-201:35: `err = msgp.NewReader(&buf).Skip()`
$DIR/internal/etag/etag_test.go:89:12-89:26: `.ETag.String()`
$DIR/internal/etag/etag_test.go:141:30-141:43: `.Background()`
$DIR/internal/etag/etag_test.go:141:52-141:76: `.NewReader(test.Content)`
$DIR/internal/etag/etag_test.go:142:18-142:43: `.Copy(io.Discard, reader)`
$DIR/internal/etag/etag_test.go:145:20-145:27: `.ETag()`
$DIR/internal/etag/etag_test.go:210:24-210:38: `.IsEncrypted()`
$DIR/internal/etag/etag_test.go:233:14-233:23: `.Format()`
$DIR/internal/etag/etag_test.go:233:23-233:32: `.String()`
$DIR/internal/event/arn_test.go:37:21-37:34: `.arn.String()`
$DIR/internal/event/arn_test.go:57:19-57:41: `.Marshal(testCase.arn)`
$DIR/internal/event/arn_test.go:65:15-65:54: `.DeepEqual(data, testCase.expectedData)`
$DIR/internal/event/arn_test.go:86:13-86:44: `.Unmarshal(testCase.data, &arn)`
$DIR/internal/event/config_test.go:69:13-69:46: `.Unmarshal(testCase.data, result)`
$DIR/internal/event/config_test.go:77:15-77:58: `.DeepEqual(result, testCase.expectedResult)`
$DIR/internal/event/config_test.go:99:13-99:46: `.Unmarshal(testCase.data, result)`
$DIR/internal/event/config_test.go:107:15-107:58: `.DeepEqual(result, testCase.expectedResult)`
$DIR/internal/event/config_test.go:126:21-126:46: `.filterRuleList.Pattern()`
$DIR/internal/event/config_test.go:194:13-194:48: `.Unmarshal(testCase.data, &Queue{})`
$DIR/internal/event/config_test.go:214:15-214:39: `.Unmarshal(data, queue1)`
$DIR/internal/event/config_test.go:215:3-215:13: `panic(err)`
$DIR/internal/event/config_test.go:218:2-235:24: `data = []byte(`
<QueueConfiguration>
   <Id>1</Id>
    <Filter>
        <S3Key>
            <FilterRule>
                <Name>prefix</Name>
                <Value>images/</Value>
            </FilterRule>
            <FilterRule>
                <Name>suffix</Name>
                <Value>jpg</Value>
            </FilterRule>
        </S3Key>
   </Filter>
   <Queue>arn:minio:sqs:us-east-1:1:webhook</Queue>
   <Event>s3:ObjectCreated:Put</Event>
</QueueConfiguration>`)`
$DIR/internal/event/config_test.go:237:15-237:39: `.Unmarshal(data, queue2)`
$DIR/internal/event/config_test.go:238:3-238:13: `panic(err)`
$DIR/internal/event/config_test.go:241:2-249:24: `data = []byte(`
<QueueConfiguration>
   <Id>1</Id>
   <Filter></Filter>
   <Queue>arn:minio:sqs:eu-west-2:1:webhook</Queue>
   <Event>s3:ObjectAccessed:*</Event>
   <Event>s3:ObjectCreated:*</Event>
   <Event>s3:ObjectRemoved:*</Event>
</QueueConfiguration>`)`
$DIR/internal/event/config_test.go:251:15-251:39: `.Unmarshal(data, queue3)`
$DIR/internal/event/config_test.go:252:3-252:13: `panic(err)`
$DIR/internal/event/config_test.go:255:38-255:51: `.Background()`
$DIR/internal/event/config_test.go:257:38-257:51: `.Background()`
$DIR/internal/event/config_test.go:258:23-258:83: `.Add(&ExampleTarget{TargetID{"1", "webhook"}, false, false})`
$DIR/internal/event/config_test.go:259:3-259:13: `panic(err)`
$DIR/internal/event/config_test.go:275:18-275:71: `.queue.Validate(testCase.region, testCase.targetList)`
$DIR/internal/event/config_test.go:295:15-295:39: `.Unmarshal(data, queue1)`
$DIR/internal/event/config_test.go:296:3-296:13: `panic(err)`
$DIR/internal/event/config_test.go:299:2-316:24: `data = []byte(`
<QueueConfiguration>
   <Id>1</Id>
    <Filter>
        <S3Key>
            <FilterRule>
                <Name>prefix</Name>
                <Value>images/</Value>
            </FilterRule>
            <FilterRule>
                <Name>suffix</Name>
                <Value>jpg</Value>
            </FilterRule>
        </S3Key>
   </Filter>
   <Queue>arn:minio:sqs::1:webhook</Queue>
   <Event>s3:ObjectCreated:Put</Event>
</QueueConfiguration>`)`
$DIR/internal/event/config_test.go:318:15-318:39: `.Unmarshal(data, queue2)`
$DIR/internal/event/config_test.go:319:3-319:13: `panic(err)`
$DIR/internal/event/config_test.go:334:3-334:44: `testCase.queue.SetRegion(testCase.region)`
$DIR/internal/event/config_test.go:334:11-334:44: `.queue.SetRegion(testCase.region)`
$DIR/internal/event/config_test.go:337:14-337:57: `.DeepEqual(result, testCase.expectedResult)`
$DIR/internal/event/config_test.go:354:15-354:43: `.Unmarshal(data, queueCase1)`
$DIR/internal/event/config_test.go:355:3-355:13: `panic(err)`
$DIR/internal/event/config_test.go:358:2-375:24: `data = []byte(`
<QueueConfiguration>
   <Id>1</Id>
    <Filter>
        <S3Key>
            <FilterRule>
                <Name>prefix</Name>
                <Value>images/</Value>
            </FilterRule>
            <FilterRule>
                <Name>suffix</Name>
                <Value>jpg</Value>
            </FilterRule>
        </S3Key>
   </Filter>
   <Queue>arn:minio:sqs:us-east-1:1:webhook</Queue>
   <Event>s3:ObjectCreated:Put</Event>
</QueueConfiguration>`)`
$DIR/internal/event/config_test.go:377:15-377:43: `.Unmarshal(data, queueCase2)`
$DIR/internal/event/config_test.go:378:3-378:13: `panic(err)`
$DIR/internal/event/config_test.go:393:21-393:40: `.queue.ToRulesMap()`
$DIR/internal/event/config_test.go:395:14-395:57: `.DeepEqual(result, testCase.expectedResult)`
$DIR/internal/event/config_test.go:512:13-512:49: `.Unmarshal(testCase.data, &Config{})`
$DIR/internal/event/config_test.go:535:15-535:40: `.Unmarshal(data, config1)`
$DIR/internal/event/config_test.go:536:3-536:13: `panic(err)`
$DIR/internal/event/config_test.go:539:2-559:3: `data = []byte(`
<NotificationConfiguration  xmlns="http://s3.amazonaws.com/doc/2006-03-01/">
   <QueueConfiguration>
      <Id>1</Id>
       <Filter>
           <S3Key>
               <FilterRule>
                   <Name>prefix</Name>
                   <Value>images/</Value>
               </FilterRule>
               <FilterRule>
                   <Name>suffix</Name>
                   <Value>jpg</Value>
               </FilterRule>
           </S3Key>
      </Filter>
      <Queue>arn:minio:sqs:us-east-1:1:webhook</Queue>
      <Event>s3:ObjectCreated:Put</Event>
   </QueueConfiguration>
</NotificationConfiguration>
`)`
$DIR/internal/event/config_test.go:561:15-561:40: `.Unmarshal(data, config2)`
$DIR/internal/event/config_test.go:562:3-562:13: `panic(err)`
$DIR/internal/event/config_test.go:565:2-593:3: `data = []byte(`
<NotificationConfiguration  xmlns="http://s3.amazonaws.com/doc/2006-03-01/">
   <QueueConfiguration>
      <Id>1</Id>
      <Filter></Filter>
      <Queue>arn:minio:sqs:us-east-1:1:webhook</Queue>
      <Event>s3:ObjectAccessed:*</Event>
      <Event>s3:ObjectCreated:*</Event>
      <Event>s3:ObjectRemoved:*</Event>
   </QueueConfiguration>
   <QueueConfiguration>
      <Id>2</Id>
       <Filter>
           <S3Key>
               <FilterRule>
                   <Name>prefix</Name>
                   <Value>images/</Value>
               </FilterRule>
               <FilterRule>
                   <Name>suffix</Name>
                   <Value>jpg</Value>
               </FilterRule>
           </S3Key>
      </Filter>
      <Queue>arn:minio:sqs:us-east-1:1:webhook</Queue>
      <Event>s3:ObjectCreated:Put</Event>
   </QueueConfiguration>
</NotificationConfiguration>
`)`
$DIR/internal/event/config_test.go:595:15-595:40: `.Unmarshal(data, config3)`
$DIR/internal/event/config_test.go:596:3-596:13: `panic(err)`
$DIR/internal/event/config_test.go:599:38-599:51: `.Background()`
$DIR/internal/event/config_test.go:601:38-601:51: `.Background()`
$DIR/internal/event/config_test.go:602:23-602:83: `.Add(&ExampleTarget{TargetID{"1", "webhook"}, false, false})`
$DIR/internal/event/config_test.go:603:3-603:13: `panic(err)`
$DIR/internal/event/config_test.go:619:18-619:72: `.config.Validate(testCase.region, testCase.targetList)`
$DIR/internal/event/config_test.go:642:15-642:40: `.Unmarshal(data, config1)`
$DIR/internal/event/config_test.go:643:3-643:13: `panic(err)`
$DIR/internal/event/config_test.go:646:2-666:3: `data = []byte(`
<NotificationConfiguration  xmlns="http://s3.amazonaws.com/doc/2006-03-01/">
   <QueueConfiguration>
      <Id>1</Id>
       <Filter>
           <S3Key>
               <FilterRule>
                   <Name>prefix</Name>
                   <Value>images/</Value>
               </FilterRule>
               <FilterRule>
                   <Name>suffix</Name>
                   <Value>jpg</Value>
               </FilterRule>
           </S3Key>
      </Filter>
      <Queue>arn:minio:sqs::1:webhook</Queue>
      <Event>s3:ObjectCreated:Put</Event>
   </QueueConfiguration>
</NotificationConfiguration>
`)`
$DIR/internal/event/config_test.go:668:15-668:40: `.Unmarshal(data, config2)`
$DIR/internal/event/config_test.go:669:3-669:13: `panic(err)`
$DIR/internal/event/config_test.go:672:2-700:3: `data = []byte(`
<NotificationConfiguration  xmlns="http://s3.amazonaws.com/doc/2006-03-01/">
   <QueueConfiguration>
      <Id>1</Id>
      <Filter></Filter>
      <Queue>arn:minio:sqs:us-east-1:1:webhook</Queue>
      <Event>s3:ObjectAccessed:*</Event>
      <Event>s3:ObjectCreated:*</Event>
      <Event>s3:ObjectRemoved:*</Event>
   </QueueConfiguration>
   <QueueConfiguration>
      <Id>2</Id>
       <Filter>
           <S3Key>
               <FilterRule>
                   <Name>prefix</Name>
                   <Value>images/</Value>
               </FilterRule>
               <FilterRule>
                   <Name>suffix</Name>
                   <Value>jpg</Value>
               </FilterRule>
           </S3Key>
      </Filter>
      <Queue>arn:minio:sqs:us-east-1:2:amqp</Queue>
      <Event>s3:ObjectCreated:Put</Event>
   </QueueConfiguration>
</NotificationConfiguration>
`)`
$DIR/internal/event/config_test.go:702:15-702:40: `.Unmarshal(data, config3)`
$DIR/internal/event/config_test.go:703:3-703:13: `panic(err)`
$DIR/internal/event/config_test.go:720:3-720:45: `testCase.config.SetRegion(testCase.region)`
$DIR/internal/event/config_test.go:720:11-720:45: `.config.SetRegion(testCase.region)`
$DIR/internal/event/config_test.go:723:4-723:38: `result = append(result, queue.ARN)`
$DIR/internal/event/config_test.go:726:14-726:57: `.DeepEqual(result, testCase.expectedResult)`
$DIR/internal/event/config_test.go:746:15-746:40: `.Unmarshal(data, config1)`
$DIR/internal/event/config_test.go:747:3-747:13: `panic(err)`
$DIR/internal/event/config_test.go:750:2-770:3: `data = []byte(`
<NotificationConfiguration  xmlns="http://s3.amazonaws.com/doc/2006-03-01/">
   <QueueConfiguration>
      <Id>1</Id>
       <Filter>
           <S3Key>
               <FilterRule>
                   <Name>prefix</Name>
                   <Value>images/</Value>
               </FilterRule>
               <FilterRule>
                   <Name>suffix</Name>
                   <Value>jpg</Value>
               </FilterRule>
           </S3Key>
      </Filter>
      <Queue>arn:minio:sqs::1:webhook</Queue>
      <Event>s3:ObjectCreated:Put</Event>
   </QueueConfiguration>
</NotificationConfiguration>
`)`
$DIR/internal/event/config_test.go:772:15-772:40: `.Unmarshal(data, config2)`
$DIR/internal/event/config_test.go:773:3-773:13: `panic(err)`
$DIR/internal/event/config_test.go:776:2-804:3: `data = []byte(`
<NotificationConfiguration  xmlns="http://s3.amazonaws.com/doc/2006-03-01/">
   <QueueConfiguration>
      <Id>1</Id>
      <Filter></Filter>
      <Queue>arn:minio:sqs:us-east-1:1:webhook</Queue>
      <Event>s3:ObjectAccessed:*</Event>
      <Event>s3:ObjectCreated:*</Event>
      <Event>s3:ObjectRemoved:*</Event>
   </QueueConfiguration>
   <QueueConfiguration>
      <Id>2</Id>
       <Filter>
           <S3Key>
               <FilterRule>
                   <Name>prefix</Name>
                   <Value>images/</Value>
               </FilterRule>
               <FilterRule>
                   <Name>suffix</Name>
                   <Value>jpg</Value>
               </FilterRule>
           </S3Key>
      </Filter>
      <Queue>arn:minio:sqs:us-east-1:2:amqp</Queue>
      <Event>s3:ObjectCreated:Put</Event>
   </QueueConfiguration>
</NotificationConfiguration>
`)`
$DIR/internal/event/config_test.go:806:15-806:40: `.Unmarshal(data, config3)`
$DIR/internal/event/config_test.go:807:3-807:13: `panic(err)`
$DIR/internal/event/config_test.go:815:2-815:83: `rulesMapCase3.add([]Name{ObjectCreatedPut}, "images/*jpg", TargetID{"2", "amqp"})`
$DIR/internal/event/config_test.go:815:15-815:83: `.add([]Name{ObjectCreatedPut}, "images/*jpg", TargetID{"2", "amqp"})`
$DIR/internal/event/config_test.go:827:21-827:41: `.config.ToRulesMap()`
$DIR/internal/event/config_test.go:829:14-829:57: `.DeepEqual(result, testCase.expectedResult)`
$DIR/internal/event/config_test.go:836:20-847:3: `.NewReader(`
<NotificationConfiguration  xmlns="http://s3.amazonaws.com/doc/2006-03-01/">
   <QueueConfiguration>
      <Id>1</Id>
      <Filter></Filter>
      <Queue>arn:minio:sqs:us-east-1:1:webhook</Queue>
      <Event>s3:ObjectAccessed:*</Event>
      <Event>s3:ObjectCreated:*</Event>
      <Event>s3:ObjectRemoved:*</Event>
   </QueueConfiguration>
</NotificationConfiguration>
`)`
$DIR/internal/event/config_test.go:849:20-869:3: `.NewReader(`
<NotificationConfiguration  xmlns="http://s3.amazonaws.com/doc/2006-03-01/">
   <QueueConfiguration>
      <Id>1</Id>
       <Filter>
           <S3Key>
               <FilterRule>
                   <Name>prefix</Name>
                   <Value>images/</Value>
               </FilterRule>
               <FilterRule>
                   <Name>suffix</Name>
                   <Value>jpg</Value>
               </FilterRule>
           </S3Key>
      </Filter>
      <Queue>arn:minio:sqs:us-east-1:1:webhook</Queue>
      <Event>s3:ObjectCreated:Put</Event>
   </QueueConfiguration>
</NotificationConfiguration>
`)`
$DIR/internal/event/config_test.go:871:20-899:3: `.NewReader(`
<NotificationConfiguration  xmlns="http://s3.amazonaws.com/doc/2006-03-01/">
   <QueueConfiguration>
      <Id>1</Id>
      <Filter></Filter>
      <Queue>arn:minio:sqs:us-east-1:1:webhook</Queue>
      <Event>s3:ObjectAccessed:*</Event>
      <Event>s3:ObjectCreated:*</Event>
      <Event>s3:ObjectRemoved:*</Event>
   </QueueConfiguration>
   <QueueConfiguration>
      <Id>2</Id>
       <Filter>
           <S3Key>
               <FilterRule>
                   <Name>prefix</Name>
                   <Value>images/</Value>
               </FilterRule>
               <FilterRule>
                   <Name>suffix</Name>
                   <Value>jpg</Value>
               </FilterRule>
           </S3Key>
      </Filter>
      <Queue>arn:minio:sqs:us-east-1:1:webhook</Queue>
      <Event>s3:ObjectCreated:Put</Event>
   </QueueConfiguration>
</NotificationConfiguration>
`)`
$DIR/internal/event/config_test.go:901:20-929:3: `.NewReader(`
<NotificationConfiguration  xmlns="http://s3.amazonaws.com/doc/2006-03-01/">
   <QueueConfiguration>
      <Id>1</Id>
      <Filter></Filter>
      <Queue>arn:minio:sqs:us-east-1:1:webhook</Queue>
      <Event>s3:ObjectAccessed:*</Event>
      <Event>s3:ObjectCreated:*</Event>
      <Event>s3:ObjectRemoved:*</Event>
   </QueueConfiguration>
   <CloudFunctionConfiguration>
      <Id>1</Id>
      <Filter>
             <S3Key>
                 <FilterRule>
                     <Name>suffix</Name>
                     <Value>.jpg</Value>
                 </FilterRule>
             </S3Key>
      </Filter>
      <Cloudcode>arn:aws:lambda:us-west-2:444455556666:cloud-function-A</Cloudcode>
      <Event>s3:ObjectCreated:Put</Event>
   </CloudFunctionConfiguration>
   <TopicConfiguration>
      <Topic>arn:aws:sns:us-west-2:444455556666:sns-notification-one</Topic>
      <Event>s3:ObjectCreated:*</Event>
  </TopicConfiguration>
</NotificationConfiguration>
`)`
$DIR/internal/event/config_test.go:931:38-931:51: `.Background()`
$DIR/internal/event/config_test.go:933:38-933:51: `.Background()`
$DIR/internal/event/config_test.go:934:23-934:83: `.Add(&ExampleTarget{TargetID{"1", "webhook"}, false, false})`
$DIR/internal/event/config_test.go:935:3-935:13: `panic(err)`
$DIR/internal/event/config_test.go:952:24-952:42: `.reader.Seek(0, 0)`
$DIR/internal/event/config_test.go:953:4-953:14: `panic(err)`
$DIR/internal/event/name_test.go:44:21-44:35: `.name.Expand()`
$DIR/internal/event/name_test.go:46:14-46:57: `.DeepEqual(result, testCase.expectedResult)`
$DIR/internal/event/name_test.go:81:21-81:35: `.name.String()`
$DIR/internal/event/name_test.go:104:19-104:42: `.Marshal(testCase.name)`
$DIR/internal/event/name_test.go:112:15-112:54: `.DeepEqual(data, testCase.expectedData)`
$DIR/internal/event/name_test.go:135:13-135:45: `.Unmarshal(testCase.data, &name)`
$DIR/internal/event/name_test.go:143:15-143:54: `.DeepEqual(name, testCase.expectedName)`
$DIR/internal/event/name_test.go:165:20-165:43: `.Marshal(testCase.name)`
$DIR/internal/event/name_test.go:173:15-173:54: `.DeepEqual(data, testCase.expectedData)`
$DIR/internal/event/name_test.go:196:14-196:46: `.Unmarshal(testCase.data, &name)`
$DIR/internal/event/name_test.go:204:15-204:54: `.DeepEqual(name, testCase.expectedName)`
$DIR/internal/event/name_test.go:234:15-234:54: `.DeepEqual(name, testCase.expectedName)`
$DIR/internal/event/rules_test.go:58:2-58:67: `rulesCase2.Add(NewPattern("2010*", ""), TargetID{"1", "webhook"})`
$DIR/internal/event/rules_test.go:58:12-58:67: `.Add(NewPattern("2010*", ""), TargetID{"1", "webhook"})`
$DIR/internal/event/rules_test.go:61:2-61:67: `rulesCase3.Add(NewPattern("2010*", ""), TargetID{"1", "webhook"})`
$DIR/internal/event/rules_test.go:61:12-61:67: `.Add(NewPattern("2010*", ""), TargetID{"1", "webhook"})`
$DIR/internal/event/rules_test.go:64:2-64:67: `rulesCase4.Add(NewPattern("", "*.jpg"), TargetID{"1", "webhook"})`
$DIR/internal/event/rules_test.go:64:12-64:67: `.Add(NewPattern("", "*.jpg"), TargetID{"1", "webhook"})`
$DIR/internal/event/rules_test.go:69:2-69:67: `rulesCase6.Add(NewPattern("", "*.jpg"), TargetID{"1", "webhook"})`
$DIR/internal/event/rules_test.go:69:12-69:67: `.Add(NewPattern("", "*.jpg"), TargetID{"1", "webhook"})`
$DIR/internal/event/rules_test.go:72:2-72:67: `rulesCase7.Add(NewPattern("", "*.jpg"), TargetID{"1", "webhook"})`
$DIR/internal/event/rules_test.go:72:12-72:67: `.Add(NewPattern("", "*.jpg"), TargetID{"1", "webhook"})`
$DIR/internal/event/rules_test.go:75:2-75:67: `rulesCase8.Add(NewPattern("2010*", ""), TargetID{"1", "webhook"})`
$DIR/internal/event/rules_test.go:75:12-75:67: `.Add(NewPattern("2010*", ""), TargetID{"1", "webhook"})`
$DIR/internal/event/rules_test.go:94:3-94:58: `testCase.rules.Add(testCase.pattern, testCase.targetID)`
$DIR/internal/event/rules_test.go:94:11-94:58: `.rules.Add(testCase.pattern, testCase.targetID)`
$DIR/internal/event/rules_test.go:107:2-107:64: `rulesCase2.Add(NewPattern("*", "*"), TargetID{"1", "webhook"})`
$DIR/internal/event/rules_test.go:107:12-107:64: `.Add(NewPattern("*", "*"), TargetID{"1", "webhook"})`
$DIR/internal/event/rules_test.go:110:2-110:67: `rulesCase3.Add(NewPattern("2010*", ""), TargetID{"1", "webhook"})`
$DIR/internal/event/rules_test.go:110:12-110:67: `.Add(NewPattern("2010*", ""), TargetID{"1", "webhook"})`
$DIR/internal/event/rules_test.go:111:2-111:64: `rulesCase3.Add(NewPattern("", "*.png"), TargetID{"2", "amqp"})`
$DIR/internal/event/rules_test.go:111:12-111:64: `.Add(NewPattern("", "*.png"), TargetID{"2", "amqp"})`
$DIR/internal/event/rules_test.go:114:2-114:67: `rulesCase4.Add(NewPattern("2010*", ""), TargetID{"1", "webhook"})`
$DIR/internal/event/rules_test.go:114:12-114:67: `.Add(NewPattern("2010*", ""), TargetID{"1", "webhook"})`
$DIR/internal/event/rules_test.go:128:21-128:54: `.rules.Match(testCase.objectName)`
$DIR/internal/event/rules_test.go:130:14-130:57: `.DeepEqual(testCase.expectedResult, result)`
$DIR/internal/event/rules_test.go:140:2-140:67: `rulesCase2.Add(NewPattern("2010*", ""), TargetID{"1", "webhook"})`
$DIR/internal/event/rules_test.go:140:12-140:67: `.Add(NewPattern("2010*", ""), TargetID{"1", "webhook"})`
$DIR/internal/event/rules_test.go:143:2-143:67: `rulesCase3.Add(NewPattern("", "*.jpg"), TargetID{"1", "webhook"})`
$DIR/internal/event/rules_test.go:143:12-143:67: `.Add(NewPattern("", "*.jpg"), TargetID{"1", "webhook"})`
$DIR/internal/event/rules_test.go:156:21-156:35: `.rules.Clone()`
$DIR/internal/event/rules_test.go:158:14-158:48: `.DeepEqual(result, testCase.rules)`
$DIR/internal/event/rules_test.go:162:3-162:65: `result.Add(NewPattern(testCase.prefix, ""), testCase.targetID)`
$DIR/internal/event/rules_test.go:162:9-162:65: `.Add(NewPattern(testCase.prefix, ""), testCase.targetID)`
$DIR/internal/event/rules_test.go:163:13-163:47: `.DeepEqual(result, testCase.rules)`
$DIR/internal/event/rules_test.go:176:2-176:64: `rules2Case2.Add(NewPattern("*", ""), TargetID{"1", "webhook"})`
$DIR/internal/event/rules_test.go:176:13-176:64: `.Add(NewPattern("*", ""), TargetID{"1", "webhook"})`
$DIR/internal/event/rules_test.go:178:2-178:72: `expectedResultCase2.Add(NewPattern("*", ""), TargetID{"1", "webhook"})`
$DIR/internal/event/rules_test.go:178:21-178:72: `.Add(NewPattern("*", ""), TargetID{"1", "webhook"})`
$DIR/internal/event/rules_test.go:181:2-181:63: `rulesCase3.Add(NewPattern("", "*"), TargetID{"1", "webhook"})`
$DIR/internal/event/rules_test.go:181:12-181:63: `.Add(NewPattern("", "*"), TargetID{"1", "webhook"})`
$DIR/internal/event/rules_test.go:184:2-184:72: `expectedResultCase3.Add(NewPattern("", "*"), TargetID{"1", "webhook"})`
$DIR/internal/event/rules_test.go:184:21-184:72: `.Add(NewPattern("", "*"), TargetID{"1", "webhook"})`
$DIR/internal/event/rules_test.go:187:2-187:67: `rulesCase4.Add(NewPattern("2010*", ""), TargetID{"1", "webhook"})`
$DIR/internal/event/rules_test.go:187:12-187:67: `.Add(NewPattern("2010*", ""), TargetID{"1", "webhook"})`
$DIR/internal/event/rules_test.go:189:2-189:68: `rules2Case4.Add(NewPattern("2010*", ""), TargetID{"1", "webhook"})`
$DIR/internal/event/rules_test.go:189:13-189:68: `.Add(NewPattern("2010*", ""), TargetID{"1", "webhook"})`
$DIR/internal/event/rules_test.go:191:2-191:76: `expectedResultCase4.Add(NewPattern("2010*", ""), TargetID{"1", "webhook"})`
$DIR/internal/event/rules_test.go:191:21-191:76: `.Add(NewPattern("2010*", ""), TargetID{"1", "webhook"})`
$DIR/internal/event/rules_test.go:194:2-194:67: `rulesCase5.Add(NewPattern("2010*", ""), TargetID{"1", "webhook"})`
$DIR/internal/event/rules_test.go:194:12-194:67: `.Add(NewPattern("2010*", ""), TargetID{"1", "webhook"})`
$DIR/internal/event/rules_test.go:195:2-195:64: `rulesCase5.Add(NewPattern("", "*.png"), TargetID{"2", "amqp"})`
$DIR/internal/event/rules_test.go:195:12-195:64: `.Add(NewPattern("", "*.png"), TargetID{"2", "amqp"})`
$DIR/internal/event/rules_test.go:197:2-197:64: `rules2Case5.Add(NewPattern("*", ""), TargetID{"1", "webhook"})`
$DIR/internal/event/rules_test.go:197:13-197:64: `.Add(NewPattern("*", ""), TargetID{"1", "webhook"})`
$DIR/internal/event/rules_test.go:199:2-199:76: `expectedResultCase5.Add(NewPattern("2010*", ""), TargetID{"1", "webhook"})`
$DIR/internal/event/rules_test.go:199:21-199:76: `.Add(NewPattern("2010*", ""), TargetID{"1", "webhook"})`
$DIR/internal/event/rules_test.go:200:2-200:73: `expectedResultCase5.Add(NewPattern("", "*.png"), TargetID{"2", "amqp"})`
$DIR/internal/event/rules_test.go:200:21-200:73: `.Add(NewPattern("", "*.png"), TargetID{"2", "amqp"})`
$DIR/internal/event/rules_test.go:201:2-201:72: `expectedResultCase5.Add(NewPattern("*", ""), TargetID{"1", "webhook"})`
$DIR/internal/event/rules_test.go:201:21-201:72: `.Add(NewPattern("*", ""), TargetID{"1", "webhook"})`
$DIR/internal/event/rules_test.go:216:21-216:50: `.rules.Union(testCase.rules2)`
$DIR/internal/event/rules_test.go:218:14-218:57: `.DeepEqual(testCase.expectedResult, result)`
$DIR/internal/event/rules_test.go:231:2-231:65: `rules2Case2.Add(NewPattern("*", "*"), TargetID{"1", "webhook"})`
$DIR/internal/event/rules_test.go:231:13-231:65: `.Add(NewPattern("*", "*"), TargetID{"1", "webhook"})`
$DIR/internal/event/rules_test.go:235:2-235:64: `rulesCase3.Add(NewPattern("*", "*"), TargetID{"1", "webhook"})`
$DIR/internal/event/rules_test.go:235:12-235:64: `.Add(NewPattern("*", "*"), TargetID{"1", "webhook"})`
$DIR/internal/event/rules_test.go:238:2-238:73: `expectedResultCase3.Add(NewPattern("*", "*"), TargetID{"1", "webhook"})`
$DIR/internal/event/rules_test.go:238:21-238:73: `.Add(NewPattern("*", "*"), TargetID{"1", "webhook"})`
$DIR/internal/event/rules_test.go:241:2-241:64: `rulesCase4.Add(NewPattern("*", "*"), TargetID{"1", "webhook"})`
$DIR/internal/event/rules_test.go:241:12-241:64: `.Add(NewPattern("*", "*"), TargetID{"1", "webhook"})`
$DIR/internal/event/rules_test.go:243:2-243:68: `rules2Case4.Add(NewPattern("2010*", ""), TargetID{"1", "webhook"})`
$DIR/internal/event/rules_test.go:243:13-243:68: `.Add(NewPattern("2010*", ""), TargetID{"1", "webhook"})`
$DIR/internal/event/rules_test.go:244:2-244:65: `rules2Case4.Add(NewPattern("", "*.png"), TargetID{"2", "amqp"})`
$DIR/internal/event/rules_test.go:244:13-244:65: `.Add(NewPattern("", "*.png"), TargetID{"2", "amqp"})`
$DIR/internal/event/rules_test.go:246:2-246:73: `expectedResultCase4.Add(NewPattern("*", "*"), TargetID{"1", "webhook"})`
$DIR/internal/event/rules_test.go:246:21-246:73: `.Add(NewPattern("*", "*"), TargetID{"1", "webhook"})`
$DIR/internal/event/rules_test.go:249:2-249:63: `rulesCase5.Add(NewPattern("*", ""), TargetID{"1", "webhook"})`
$DIR/internal/event/rules_test.go:249:12-249:63: `.Add(NewPattern("*", ""), TargetID{"1", "webhook"})`
$DIR/internal/event/rules_test.go:250:2-250:60: `rulesCase5.Add(NewPattern("", "*"), TargetID{"2", "amqp"})`
$DIR/internal/event/rules_test.go:250:12-250:60: `.Add(NewPattern("", "*"), TargetID{"2", "amqp"})`
$DIR/internal/event/rules_test.go:252:2-252:68: `rules2Case5.Add(NewPattern("2010*", ""), TargetID{"1", "webhook"})`
$DIR/internal/event/rules_test.go:252:13-252:68: `.Add(NewPattern("2010*", ""), TargetID{"1", "webhook"})`
$DIR/internal/event/rules_test.go:253:2-253:61: `rules2Case5.Add(NewPattern("", "*"), TargetID{"2", "amqp"})`
$DIR/internal/event/rules_test.go:253:13-253:61: `.Add(NewPattern("", "*"), TargetID{"2", "amqp"})`
$DIR/internal/event/rules_test.go:255:2-255:72: `expectedResultCase5.Add(NewPattern("*", ""), TargetID{"1", "webhook"})`
$DIR/internal/event/rules_test.go:255:21-255:72: `.Add(NewPattern("*", ""), TargetID{"1", "webhook"})`
$DIR/internal/event/rules_test.go:270:21-270:55: `.rules.Difference(testCase.rules2)`
$DIR/internal/event/rules_test.go:272:14-272:57: `.DeepEqual(testCase.expectedResult, result)`
$DIR/internal/event/rulesmap_test.go:45:21-45:38: `.rulesMap.Clone()`
$DIR/internal/event/rulesmap_test.go:47:14-47:51: `.DeepEqual(result, testCase.rulesMap)`
$DIR/internal/event/rulesmap_test.go:51:3-51:37: `result.Add(testCase.rulesMapToAdd)`
$DIR/internal/event/rulesmap_test.go:51:9-51:37: `.Add(testCase.rulesMapToAdd)`
$DIR/internal/event/rulesmap_test.go:52:13-52:50: `.DeepEqual(result, testCase.rulesMap)`
$DIR/internal/event/rulesmap_test.go:70:2-70:82: `expectedResultCase3.add([]Name{ObjectCreatedAll}, "*", TargetID{"1", "webhook"})`
$DIR/internal/event/rulesmap_test.go:70:21-70:82: `.add([]Name{ObjectCreatedAll}, "*", TargetID{"1", "webhook"})`
$DIR/internal/event/rulesmap_test.go:83:3-83:48: `testCase.rulesMap.Add(testCase.rulesMapToAdd)`
$DIR/internal/event/rulesmap_test.go:83:11-83:48: `.rulesMap.Add(testCase.rulesMapToAdd)`
$DIR/internal/event/rulesmap_test.go:85:14-85:68: `.DeepEqual(testCase.rulesMap, testCase.expectedResult)`
$DIR/internal/event/rulesmap_test.go:101:2-101:76: `rulesMapCase3.add([]Name{ObjectCreatedAll}, "*", TargetID{"1", "webhook"})`
$DIR/internal/event/rulesmap_test.go:101:15-101:76: `.add([]Name{ObjectCreatedAll}, "*", TargetID{"1", "webhook"})`
$DIR/internal/event/rulesmap_test.go:116:3-116:51: `testCase.rulesMap.Remove(testCase.rulesMapToAdd)`
$DIR/internal/event/rulesmap_test.go:116:11-116:51: `.rulesMap.Remove(testCase.rulesMapToAdd)`
$DIR/internal/event/rulesmap_test.go:118:14-118:68: `.DeepEqual(testCase.rulesMap, testCase.expectedResult)`
$DIR/internal/event/rulesmap_test.go:132:2-132:73: `rulesMapCase4.add([]Name{ObjectCreatedAll}, "*", TargetID{"2", "amqp"})`
$DIR/internal/event/rulesmap_test.go:132:15-132:73: `.add([]Name{ObjectCreatedAll}, "*", TargetID{"2", "amqp"})`
$DIR/internal/event/rulesmap_test.go:147:21-147:77: `.rulesMap.Match(testCase.eventName, testCase.objectName)`
$DIR/internal/event/rulesmap_test.go:149:14-149:57: `.DeepEqual(result, testCase.expectedResult)`
$DIR/internal/event/rulesmap_test.go:157:2-158:33: `rulesMapCase1.add([]Name{ObjectAccessedGet, ObjectAccessedHead, ObjectAccessedGetRetention, ObjectAccessedGetLegalHold, ObjectAccessedAttributes},
		"*", TargetID{"1", "webhook"})`
$DIR/internal/event/rulesmap_test.go:157:15-158:33: `.add([]Name{ObjectAccessedGet, ObjectAccessedHead, ObjectAccessedGetRetention, ObjectAccessedGetLegalHold, ObjectAccessedAttributes},
		"*", TargetID{"1", "webhook"})`
$DIR/internal/event/rulesmap_test.go:161:2-164:35: `rulesMapCase2.add([]Name{
		ObjectAccessedGet, ObjectAccessedHead, ObjectAccessedAttributes,
		ObjectCreatedPut, ObjectAccessedGetRetention, ObjectAccessedGetLegalHold,
	}, "*", TargetID{"1", "webhook"})`
$DIR/internal/event/rulesmap_test.go:161:15-164:35: `.add([]Name{
		ObjectAccessedGet, ObjectAccessedHead, ObjectAccessedAttributes,
		ObjectCreatedPut, ObjectAccessedGetRetention, ObjectAccessedGetLegalHold,
	}, "*", TargetID{"1", "webhook"})`
$DIR/internal/event/rulesmap_test.go:167:2-167:87: `rulesMapCase3.add([]Name{ObjectRemovedDelete}, "2010*.jpg", TargetID{"1", "webhook"})`
$DIR/internal/event/rulesmap_test.go:167:15-167:87: `.add([]Name{ObjectRemovedDelete}, "2010*.jpg", TargetID{"1", "webhook"})`
$DIR/internal/event/rulesmap_test.go:183:14-183:57: `.DeepEqual(result, testCase.expectedResult)`
$DIR/internal/event/target/mysql_test.go:29:25-29:35: `.Drivers()`
$DIR/internal/event/target/mysql_test.go:31:4-31:16: `found = true`
$DIR/internal/event/target/nats_contrib_test.go:28:2-28:19: `opts.Port = 14222`
$DIR/internal/event/target/nats_contrib_test.go:29:17-29:34: `.RunServer(&opts)`
$DIR/internal/event/target/nats_contrib_test.go:30:9-30:20: `.Shutdown()`
$DIR/internal/event/target/nats_contrib_test.go:36:20-36:36: `.Port(opts.Port)`
$DIR/internal/event/target/nats_contrib_test.go:41:26-41:40: `.connectNats()`
$DIR/internal/event/target/nats_contrib_test.go:50:2-50:19: `opts.Port = 14223`
$DIR/internal/event/target/nats_contrib_test.go:51:2-51:29: `opts.Username = "testminio"`
$DIR/internal/event/target/nats_contrib_test.go:52:2-52:29: `opts.Password = "miniotest"`
$DIR/internal/event/target/nats_contrib_test.go:53:17-53:34: `.RunServer(&opts)`
$DIR/internal/event/target/nats_contrib_test.go:54:9-54:20: `.Shutdown()`
$DIR/internal/event/target/nats_contrib_test.go:60:20-60:36: `.Port(opts.Port)`
$DIR/internal/event/target/nats_contrib_test.go:68:26-68:40: `.connectNats()`
$DIR/internal/event/target/nats_contrib_test.go:77:2-77:19: `opts.Port = 14223`
$DIR/internal/event/target/nats_contrib_test.go:78:2-78:31: `opts.Authorization = "s3cr3t"`
$DIR/internal/event/target/nats_contrib_test.go:79:17-79:34: `.RunServer(&opts)`
$DIR/internal/event/target/nats_contrib_test.go:80:9-80:20: `.Shutdown()`
$DIR/internal/event/target/nats_contrib_test.go:86:20-86:36: `.Port(opts.Port)`
$DIR/internal/event/target/nats_contrib_test.go:93:26-93:40: `.connectNats()`
$DIR/internal/event/target/nats_tls_contrib_test.go:29:23-29:98: `.RunServerWithConfig(filepath.Join("testdata", "contrib", "nats_tls.conf"))`
$DIR/internal/event/target/nats_tls_contrib_test.go:29:52-29:97: `.Join("testdata", "contrib", "nats_tls.conf")`
$DIR/internal/event/target/nats_tls_contrib_test.go:30:9-30:20: `.Shutdown()`
$DIR/internal/event/target/nats_tls_contrib_test.go:36:20-36:36: `.Port(opts.Port)`
$DIR/internal/event/target/nats_tls_contrib_test.go:41:22-41:79: `.Join("testdata", "contrib", "certs", "root_ca_cert.pem")`
$DIR/internal/event/target/nats_tls_contrib_test.go:44:26-44:40: `.connectNats()`
$DIR/internal/event/target/nats_tls_contrib_test.go:52:23-52:110: `.RunServerWithConfig(filepath.Join("testdata", "contrib", "nats_tls_client_cert.conf"))`
$DIR/internal/event/target/nats_tls_contrib_test.go:52:52-52:109: `.Join("testdata", "contrib", "nats_tls_client_cert.conf")`
$DIR/internal/event/target/nats_tls_contrib_test.go:53:9-53:20: `.Shutdown()`
$DIR/internal/event/target/nats_tls_contrib_test.go:59:20-59:36: `.Port(opts.Port)`
$DIR/internal/event/target/nats_tls_contrib_test.go:64:22-64:79: `.Join("testdata", "contrib", "certs", "root_ca_cert.pem")`
$DIR/internal/event/target/nats_tls_contrib_test.go:65:22-65:83: `.Join("testdata", "contrib", "certs", "nats_client_cert.pem")`
$DIR/internal/event/target/nats_tls_contrib_test.go:66:22-66:82: `.Join("testdata", "contrib", "certs", "nats_client_key.pem")`
$DIR/internal/event/target/nats_tls_contrib_test.go:69:26-69:40: `.connectNats()`
$DIR/internal/event/target/nsq_test.go:27:2-35:3: `type fields struct {
		Enable      bool
		NSQDAddress xnet.Host
		Topic       string
		TLS         struct {
			Enable     bool
			SkipVerify bool
		}
	}`
$DIR/internal/event/target/nsq_test.go:87:3-96:5: `t.Run(tt.name, func(t *testing.T) {
			n := NSQArgs{
				Enable:      tt.fields.Enable,
				NSQDAddress: tt.fields.NSQDAddress,
				Topic:       tt.fields.Topic,
			}
			if err := n.Validate(); (err != nil) != tt.wantErr {
				t.Errorf("NSQArgs.Validate() error = %v, wantErr %v", err, tt.wantErr)
			}
		})`
$DIR/internal/event/target/nsq_test.go:87:4-96:5: `.Run(tt.name, func(t *testing.T) {
			n := NSQArgs{
				Enable:      tt.fields.Enable,
				NSQDAddress: tt.fields.NSQDAddress,
				Topic:       tt.fields.Topic,
			}
			if err := n.Validate(); (err != nil) != tt.wantErr {
				t.Errorf("NSQArgs.Validate() error = %v, wantErr %v", err, tt.wantErr)
			}
		})`
$DIR/internal/event/target/nsq_test.go:93:15-93:26: `.Validate()`
$DIR/internal/event/target/postgresql_test.go:29:25-29:35: `.Drivers()`
$DIR/internal/event/target/postgresql_test.go:31:4-31:16: `found = true`
$DIR/internal/event/targetid_test.go:36:21-36:34: `.tid.String()`
$DIR/internal/event/targetid_test.go:56:18-56:45: `.tid.ToARN(testCase.region)`
$DIR/internal/event/targetid_test.go:76:24-76:42: `.tid.MarshalJSON()`
$DIR/internal/event/targetid_test.go:84:15-84:54: `.DeepEqual(data, testCase.expectedData)`
$DIR/internal/event/targetid_test.go:105:18-105:47: `.UnmarshalJSON(testCase.data)`
$DIR/internal/event/targetidset_test.go:36:21-36:33: `.set.Clone()`
$DIR/internal/event/targetidset_test.go:38:14-38:46: `.DeepEqual(result, testCase.set)`
$DIR/internal/event/targetidset_test.go:42:3-42:37: `result.add(testCase.targetIDToAdd)`
$DIR/internal/event/targetidset_test.go:42:9-42:37: `.add(testCase.targetIDToAdd)`
$DIR/internal/event/targetidset_test.go:43:13-43:45: `.DeepEqual(result, testCase.set)`
$DIR/internal/event/targetidset_test.go:63:21-63:50: `.set.Union(testCase.setToAdd)`
$DIR/internal/event/targetidset_test.go:65:14-65:57: `.DeepEqual(testCase.expectedResult, result)`
$DIR/internal/event/targetidset_test.go:85:21-85:58: `.set.Difference(testCase.setToRemove)`
$DIR/internal/event/targetidset_test.go:87:14-87:57: `.DeepEqual(testCase.expectedResult, result)`
$DIR/internal/event/targetidset_test.go:106:14-106:57: `.DeepEqual(testCase.expectedResult, result)`
$DIR/internal/event/targetlist_test.go:89:42-89:55: `.Background()`
$DIR/internal/event/targetlist_test.go:91:42-91:55: `.Background()`
$DIR/internal/event/targetlist_test.go:92:27-92:88: `.Add(&ExampleTarget{TargetID{"2", "testcase"}, false, false})`
$DIR/internal/event/targetlist_test.go:93:3-93:13: `panic(err)`
$DIR/internal/event/targetlist_test.go:96:42-96:55: `.Background()`
$DIR/internal/event/targetlist_test.go:97:27-97:88: `.Add(&ExampleTarget{TargetID{"3", "testcase"}, false, false})`
$DIR/internal/event/targetlist_test.go:98:3-98:13: `panic(err)`
$DIR/internal/event/targetlist_test.go:113:18-113:50: `.targetList.Add(testCase.target)`
$DIR/internal/event/targetlist_test.go:121:22-121:40: `.targetList.List()`
$DIR/internal/event/targetlist_test.go:130:16-130:48: `.DeepEqual(targetID1, targetID2)`
$DIR/internal/event/targetlist_test.go:131:7-131:19: `found = true`
$DIR/internal/event/targetlist_test.go:144:42-144:55: `.Background()`
$DIR/internal/event/targetlist_test.go:146:42-146:55: `.Background()`
$DIR/internal/event/targetlist_test.go:147:27-147:88: `.Add(&ExampleTarget{TargetID{"2", "testcase"}, false, false})`
$DIR/internal/event/targetlist_test.go:148:3-148:13: `panic(err)`
$DIR/internal/event/targetlist_test.go:151:42-151:55: `.Background()`
$DIR/internal/event/targetlist_test.go:152:27-152:88: `.Add(&ExampleTarget{TargetID{"3", "testcase"}, false, false})`
$DIR/internal/event/targetlist_test.go:153:3-153:13: `panic(err)`
$DIR/internal/event/targetlist_test.go:167:21-167:58: `.targetList.Exists(testCase.targetID)`
$DIR/internal/event/targetlist_test.go:176:42-176:55: `.Background()`
$DIR/internal/event/targetlist_test.go:178:42-178:55: `.Background()`
$DIR/internal/event/targetlist_test.go:179:27-179:88: `.Add(&ExampleTarget{TargetID{"2", "testcase"}, false, false})`
$DIR/internal/event/targetlist_test.go:180:3-180:13: `panic(err)`
$DIR/internal/event/targetlist_test.go:183:42-183:55: `.Background()`
$DIR/internal/event/targetlist_test.go:184:27-184:88: `.Add(&ExampleTarget{TargetID{"3", "testcase"}, false, false})`
$DIR/internal/event/targetlist_test.go:185:3-185:13: `panic(err)`
$DIR/internal/event/targetlist_test.go:187:27-187:87: `.Add(&ExampleTarget{TargetID{"1", "webhook"}, false, false})`
$DIR/internal/event/targetlist_test.go:188:3-188:13: `panic(err)`
$DIR/internal/event/targetlist_test.go:201:21-201:39: `.targetList.List()`
$DIR/internal/event/targetlist_test.go:210:15-210:47: `.DeepEqual(targetID1, targetID2)`
$DIR/internal/event/targetlist_test.go:211:6-211:18: `found = true`
$DIR/internal/event/targetlist_test.go:223:36-223:49: `.Background()`
$DIR/internal/grid/connection_test.go:32:18-32:32: `.T.SetLogTB(t)`
$DIR/internal/grid/connection_test.go:39:3-39:13: `t.Helper()`
$DIR/internal/grid/connection_test.go:39:4-39:13: `.Helper()`
$DIR/internal/grid/connection_test.go:45:14-48:5: `.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
			t.Logf("Got a %s request for: %v", r.Method, r.URL)
			handler.ServeHTTP(w, r)
		})`
$DIR/internal/grid/connection_test.go:47:4-47:27: `handler.ServeHTTP(w, r)`
$DIR/internal/grid/connection_test.go:47:11-47:27: `.ServeHTTP(w, r)`
$DIR/internal/grid/connection_test.go:54:34-54:47: `.Background()`
$DIR/internal/grid/connection_test.go:62:2-62:15: `errFatal(err)`
$DIR/internal/grid/connection_test.go:65:2-68:5: `errFatal(local.RegisterSingleHandler(handlerTest, func(payload []byte) ([]byte, *RemoteErr) {
		t.Log("1: server payload: ", len(payload), "bytes.")
		return append([]byte{}, payload...), nil
	}))`
$DIR/internal/grid/connection_test.go:65:16-68:4: `.RegisterSingleHandler(handlerTest, func(payload []byte) ([]byte, *RemoteErr) {
		t.Log("1: server payload: ", len(payload), "bytes.")
		return append([]byte{}, payload...), nil
	})`
$DIR/internal/grid/connection_test.go:70:2-74:5: `errFatal(local.RegisterSingleHandler(handlerTest2, func(payload []byte) ([]byte, *RemoteErr) {
		t.Log("2: server payload: ", len(payload), "bytes.")
		err := RemoteErr(payload)
		return nil, &err
	}))`
$DIR/internal/grid/connection_test.go:70:16-74:4: `.RegisterSingleHandler(handlerTest2, func(payload []byte) ([]byte, *RemoteErr) {
		t.Log("2: server payload: ", len(payload), "bytes.")
		err := RemoteErr(payload)
		return nil, &err
	})`
$DIR/internal/grid/connection_test.go:76:35-76:48: `.Background()`
$DIR/internal/grid/connection_test.go:84:2-84:15: `errFatal(err)`
$DIR/internal/grid/connection_test.go:86:62-86:72: `.Handler()`
$DIR/internal/grid/connection_test.go:87:64-87:74: `.Handler()`
$DIR/internal/grid/connection_test.go:88:2-88:18: `close(connReady)`
$DIR/internal/grid/connection_test.go:91:3-91:32: `local.debugMsg(debugShutdown)`
$DIR/internal/grid/connection_test.go:91:8-91:32: `.debugMsg(debugShutdown)`
$DIR/internal/grid/connection_test.go:92:3-92:33: `remote.debugMsg(debugShutdown)`
$DIR/internal/grid/connection_test.go:92:9-92:33: `.debugMsg(debugShutdown)`
$DIR/internal/grid/connection_test.go:95:3-95:36: `remote.debugMsg(debugWaitForExit)`
$DIR/internal/grid/connection_test.go:95:9-95:36: `.debugMsg(debugWaitForExit)`
$DIR/internal/grid/connection_test.go:96:3-96:35: `local.debugMsg(debugWaitForExit)`
$DIR/internal/grid/connection_test.go:96:8-96:35: `.debugMsg(debugWaitForExit)`
$DIR/internal/grid/connection_test.go:104:3-104:24: `gotCall <- struct{}{}`
$DIR/internal/grid/connection_test.go:105:3-105:14: `<-cleanReqs`
$DIR/internal/grid/connection_test.go:111:4-111:25: `gotCall <- struct{}{}`
$DIR/internal/grid/connection_test.go:113:14-113:21: `.Done()`
$DIR/internal/grid/connection_test.go:114:5-114:26: `gotCall <- struct{}{}`
$DIR/internal/grid/connection_test.go:116:5-116:34: `panic("should not be called")`
$DIR/internal/grid/connection_test.go:123:2-123:57: `errFatal(remote.RegisterSingleHandler(handlerTest, h1))`
$DIR/internal/grid/connection_test.go:123:17-123:56: `.RegisterSingleHandler(handlerTest, h1)`
$DIR/internal/grid/connection_test.go:124:2-124:61: `errFatal(remote.RegisterStreamingHandler(handlerTest2, h2))`
$DIR/internal/grid/connection_test.go:124:17-124:60: `.RegisterStreamingHandler(handlerTest2, h2)`
$DIR/internal/grid/connection_test.go:125:2-125:56: `errFatal(local.RegisterSingleHandler(handlerTest, h1))`
$DIR/internal/grid/connection_test.go:125:16-125:55: `.RegisterSingleHandler(handlerTest, h1)`
$DIR/internal/grid/connection_test.go:126:2-126:60: `errFatal(local.RegisterStreamingHandler(handlerTest2, h2))`
$DIR/internal/grid/connection_test.go:126:16-126:59: `.RegisterStreamingHandler(handlerTest2, h2)`
$DIR/internal/grid/connection_test.go:129:21-129:44: `.Connection(remoteHost)`
$DIR/internal/grid/connection_test.go:130:2-130:59: `errFatal(remoteConn.WaitForConnect(context.Background()))`
$DIR/internal/grid/connection_test.go:130:21-130:58: `.WaitForConnect(context.Background())`
$DIR/internal/grid/connection_test.go:130:44-130:57: `.Background()`
$DIR/internal/grid/connection_test.go:131:2-131:41: `const testPayload = "Hello Grid World!"`
$DIR/internal/grid/connection_test.go:135:16-135:22: `.Now()`
$DIR/internal/grid/connection_test.go:137:26-137:90: `.Request(context.Background(), handlerTest, []byte(testPayload))`
$DIR/internal/grid/connection_test.go:137:42-137:55: `.Background()`
$DIR/internal/grid/connection_test.go:139:3-139:24: `gotResp <- struct{}{}`
$DIR/internal/grid/connection_test.go:141:2-141:11: `<-gotCall`
$DIR/internal/grid/connection_test.go:142:2-142:35: `remote.debugMsg(debugKillInbound)`
$DIR/internal/grid/connection_test.go:142:8-142:35: `.debugMsg(debugKillInbound)`
$DIR/internal/grid/connection_test.go:143:2-143:34: `local.debugMsg(debugKillInbound)`
$DIR/internal/grid/connection_test.go:143:7-143:34: `.debugMsg(debugKillInbound)`
$DIR/internal/grid/connection_test.go:144:2-144:11: `<-gotResp`
$DIR/internal/grid/connection_test.go:147:2-147:59: `errFatal(remoteConn.WaitForConnect(context.Background()))`
$DIR/internal/grid/connection_test.go:147:21-147:58: `.WaitForConnect(context.Background())`
$DIR/internal/grid/connection_test.go:147:44-147:57: `.Background()`
$DIR/internal/grid/connection_test.go:149:27-149:94: `.NewStream(context.Background(), handlerTest2, []byte(testPayload))`
$DIR/internal/grid/connection_test.go:149:45-149:58: `.Background()`
$DIR/internal/grid/connection_test.go:150:2-150:15: `errFatal(err)`
$DIR/internal/grid/connection_test.go:155:3-155:24: `gotResp <- struct{}{}`
$DIR/internal/grid/connection_test.go:158:2-158:11: `<-gotCall`
$DIR/internal/grid/connection_test.go:159:2-159:36: `remote.debugMsg(debugKillOutbound)`
$DIR/internal/grid/connection_test.go:159:8-159:36: `.debugMsg(debugKillOutbound)`
$DIR/internal/grid/connection_test.go:160:2-160:35: `local.debugMsg(debugKillOutbound)`
$DIR/internal/grid/connection_test.go:160:7-160:35: `.debugMsg(debugKillOutbound)`
$DIR/internal/grid/connection_test.go:161:2-161:59: `errFatal(remoteConn.WaitForConnect(context.Background()))`
$DIR/internal/grid/connection_test.go:161:21-161:58: `.WaitForConnect(context.Background())`
$DIR/internal/grid/connection_test.go:161:44-161:57: `.Background()`
$DIR/internal/grid/connection_test.go:163:2-163:11: `<-gotResp`
$DIR/internal/grid/connection_test.go:182:4-182:22: `c.Local = hosts[x]`
$DIR/internal/grid/connection_test.go:183:4-183:23: `c.Remote = hosts[y]`
$DIR/internal/grid/connection_test.go:184:4-184:29: `cReverse.Local = hosts[y]`
$DIR/internal/grid/connection_test.go:185:4-185:30: `cReverse.Remote = hosts[x]`
$DIR/internal/grid/connection_test.go:186:8-186:24: `.shouldConnect()`
$DIR/internal/grid/connection_test.go:186:36-186:52: `.shouldConnect()`
$DIR/internal/grid/connection_test.go:189:8-189:24: `.shouldConnect()`
$DIR/internal/grid/connection_test.go:190:5-190:13: `should++`
$DIR/internal/grid/grid_test.go:36:18-36:32: `.T.SetLogTB(t)`
$DIR/internal/grid/grid_test.go:38:3-38:13: `t.Helper()`
$DIR/internal/grid/grid_test.go:38:4-38:13: `.Helper()`
$DIR/internal/grid/grid_test.go:44:2-44:15: `errFatal(err)`
$DIR/internal/grid/grid_test.go:49:2-52:5: `errFatal(local.RegisterSingleHandler(handlerTest, func(payload []byte) ([]byte, *RemoteErr) {
		t.Log("1: server payload: ", len(payload), "bytes.")
		return append([]byte{}, payload...), nil
	}))`
$DIR/internal/grid/grid_test.go:49:16-52:4: `.RegisterSingleHandler(handlerTest, func(payload []byte) ([]byte, *RemoteErr) {
		t.Log("1: server payload: ", len(payload), "bytes.")
		return append([]byte{}, payload...), nil
	})`
$DIR/internal/grid/grid_test.go:54:2-58:5: `errFatal(local.RegisterSingleHandler(handlerTest2, func(payload []byte) ([]byte, *RemoteErr) {
		t.Log("2: server payload: ", len(payload), "bytes.")
		err := RemoteErr(payload)
		return nil, &err
	}))`
$DIR/internal/grid/grid_test.go:54:16-58:4: `.RegisterSingleHandler(handlerTest2, func(payload []byte) ([]byte, *RemoteErr) {
		t.Log("2: server payload: ", len(payload), "bytes.")
		err := RemoteErr(payload)
		return nil, &err
	})`
$DIR/internal/grid/grid_test.go:63:2-66:5: `errFatal(remote.RegisterSingleHandler(handlerTest, func(payload []byte) ([]byte, *RemoteErr) {
		t.Log("1: server payload: ", len(payload), "bytes.")
		return append([]byte{}, payload...), nil
	}))`
$DIR/internal/grid/grid_test.go:63:17-66:4: `.RegisterSingleHandler(handlerTest, func(payload []byte) ([]byte, *RemoteErr) {
		t.Log("1: server payload: ", len(payload), "bytes.")
		return append([]byte{}, payload...), nil
	})`
$DIR/internal/grid/grid_test.go:68:2-72:5: `errFatal(remote.RegisterSingleHandler(handlerTest2, func(payload []byte) ([]byte, *RemoteErr) {
		t.Log("2: server payload: ", len(payload), "bytes.")
		err := RemoteErr(payload)
		return nil, &err
	}))`
$DIR/internal/grid/grid_test.go:68:17-72:4: `.RegisterSingleHandler(handlerTest2, func(payload []byte) ([]byte, *RemoteErr) {
		t.Log("2: server payload: ", len(payload), "bytes.")
		err := RemoteErr(payload)
		return nil, &err
	})`
$DIR/internal/grid/grid_test.go:75:21-75:44: `.Connection(remoteHost)`
$DIR/internal/grid/grid_test.go:76:2-76:49: `remoteConn.WaitForConnect(context.Background())`
$DIR/internal/grid/grid_test.go:76:12-76:49: `.WaitForConnect(context.Background())`
$DIR/internal/grid/grid_test.go:76:35-76:48: `.Background()`
$DIR/internal/grid/grid_test.go:77:18-77:34: `.T.SetErrorTB(t)`
$DIR/internal/grid/grid_test.go:79:2-89:4: `t.Run("localToRemote", func(t *testing.T) {
		const testPayload = "Hello Grid World!"

		start := time.Now()
		resp, err := remoteConn.Request(context.Background(), handlerTest, []byte(testPayload))
		errFatal(err)
		if string(resp) != testPayload {
			t.Errorf("want %q, got %q", testPayload, string(resp))
		}
		t.Log("Roundtrip:", time.Since(start))
	})`
$DIR/internal/grid/grid_test.go:79:3-89:4: `.Run("localToRemote", func(t *testing.T) {
		const testPayload = "Hello Grid World!"

		start := time.Now()
		resp, err := remoteConn.Request(context.Background(), handlerTest, []byte(testPayload))
		errFatal(err)
		if string(resp) != testPayload {
			t.Errorf("want %q, got %q", testPayload, string(resp))
		}
		t.Log("Roundtrip:", time.Since(start))
	})`
$DIR/internal/grid/grid_test.go:80:3-80:42: `const testPayload = "Hello Grid World!"`
$DIR/internal/grid/grid_test.go:82:16-82:22: `.Now()`
$DIR/internal/grid/grid_test.go:83:26-83:90: `.Request(context.Background(), handlerTest, []byte(testPayload))`
$DIR/internal/grid/grid_test.go:83:42-83:55: `.Background()`
$DIR/internal/grid/grid_test.go:84:3-84:16: `errFatal(err)`
$DIR/internal/grid/grid_test.go:91:2-103:4: `t.Run("localToRemoteErr", func(t *testing.T) {
		const testPayload = "Hello Grid World!"
		start := time.Now()
		resp, err := remoteConn.Request(context.Background(), handlerTest2, []byte(testPayload))
		t.Log("Roundtrip:", time.Since(start))
		if len(resp) != 0 {
			t.Errorf("want nil, got %q", string(resp))
		}
		if err != RemoteErr(testPayload) {
			t.Errorf("want error %v(%T), got %v(%T)", RemoteErr(testPayload), RemoteErr(testPayload), err, err)
		}
		t.Log("Roundtrip:", time.Since(start))
	})`
$DIR/internal/grid/grid_test.go:91:3-103:4: `.Run("localToRemoteErr", func(t *testing.T) {
		const testPayload = "Hello Grid World!"
		start := time.Now()
		resp, err := remoteConn.Request(context.Background(), handlerTest2, []byte(testPayload))
		t.Log("Roundtrip:", time.Since(start))
		if len(resp) != 0 {
			t.Errorf("want nil, got %q", string(resp))
		}
		if err != RemoteErr(testPayload) {
			t.Errorf("want error %v(%T), got %v(%T)", RemoteErr(testPayload), RemoteErr(testPayload), err, err)
		}
		t.Log("Roundtrip:", time.Since(start))
	})`
$DIR/internal/grid/grid_test.go:92:3-92:42: `const testPayload = "Hello Grid World!"`
$DIR/internal/grid/grid_test.go:93:16-93:22: `.Now()`
$DIR/internal/grid/grid_test.go:94:26-94:91: `.Request(context.Background(), handlerTest2, []byte(testPayload))`
$DIR/internal/grid/grid_test.go:94:42-94:55: `.Background()`
$DIR/internal/grid/grid_test.go:105:2-115:4: `t.Run("localToRemoteHuge", func(t *testing.T) {
		testPayload := bytes.Repeat([]byte("?"), 1<<20)

		start := time.Now()
		resp, err := remoteConn.Request(context.Background(), handlerTest, testPayload)
		errFatal(err)
		if string(resp) != string(testPayload) {
			t.Errorf("want %q, got %q", testPayload, string(resp))
		}
		t.Log("Roundtrip:", time.Since(start))
	})`
$DIR/internal/grid/grid_test.go:105:3-115:4: `.Run("localToRemoteHuge", func(t *testing.T) {
		testPayload := bytes.Repeat([]byte("?"), 1<<20)

		start := time.Now()
		resp, err := remoteConn.Request(context.Background(), handlerTest, testPayload)
		errFatal(err)
		if string(resp) != string(testPayload) {
			t.Errorf("want %q, got %q", testPayload, string(resp))
		}
		t.Log("Roundtrip:", time.Since(start))
	})`
$DIR/internal/grid/grid_test.go:106:23-106:50: `.Repeat([]byte("?"), 1<<20)`
$DIR/internal/grid/grid_test.go:108:16-108:22: `.Now()`
$DIR/internal/grid/grid_test.go:109:26-109:82: `.Request(context.Background(), handlerTest, testPayload)`
$DIR/internal/grid/grid_test.go:109:42-109:55: `.Background()`
$DIR/internal/grid/grid_test.go:110:3-110:16: `errFatal(err)`
$DIR/internal/grid/grid_test.go:118:23-118:50: `.Repeat([]byte("!"), 1<<10)`
$DIR/internal/grid/grid_test.go:120:16-120:22: `.Now()`
$DIR/internal/grid/grid_test.go:121:26-121:83: `.Request(context.Background(), handlerTest2, testPayload)`
$DIR/internal/grid/grid_test.go:121:42-121:55: `.Background()`
$DIR/internal/grid/grid_test.go:133:18-133:32: `.T.SetLogTB(t)`
$DIR/internal/grid/grid_test.go:135:3-135:13: `t.Helper()`
$DIR/internal/grid/grid_test.go:135:4-135:13: `.Helper()`
$DIR/internal/grid/grid_test.go:141:2-141:18: `errFatal(t, err)`
$DIR/internal/grid/grid_test.go:146:2-149:5: `errFatal(t, local.RegisterSingleHandler(handlerTest, func(payload []byte) ([]byte, *RemoteErr) {
		t.Log("1: server payload: ", len(payload), "bytes.")
		return append([]byte{}, payload...), nil
	}))`
$DIR/internal/grid/grid_test.go:146:19-149:4: `.RegisterSingleHandler(handlerTest, func(payload []byte) ([]byte, *RemoteErr) {
		t.Log("1: server payload: ", len(payload), "bytes.")
		return append([]byte{}, payload...), nil
	})`
$DIR/internal/grid/grid_test.go:151:2-155:5: `errFatal(t, local.RegisterSingleHandler(handlerTest2, func(payload []byte) ([]byte, *RemoteErr) {
		t.Log("2: server payload: ", len(payload), "bytes.")
		err := RemoteErr(payload)
		return nil, &err
	}))`
$DIR/internal/grid/grid_test.go:151:19-155:4: `.RegisterSingleHandler(handlerTest2, func(payload []byte) ([]byte, *RemoteErr) {
		t.Log("2: server payload: ", len(payload), "bytes.")
		err := RemoteErr(payload)
		return nil, &err
	})`
$DIR/internal/grid/grid_test.go:160:21-160:44: `.Connection(remoteHost)`
$DIR/internal/grid/grid_test.go:161:2-161:49: `remoteConn.WaitForConnect(context.Background())`
$DIR/internal/grid/grid_test.go:161:12-161:49: `.WaitForConnect(context.Background())`
$DIR/internal/grid/grid_test.go:161:35-161:48: `.Background()`
$DIR/internal/grid/grid_test.go:162:18-162:34: `.T.SetErrorTB(t)`
$DIR/internal/grid/grid_test.go:165:3-165:42: `const testPayload = "Hello Grid World!"`
$DIR/internal/grid/grid_test.go:167:23-167:87: `.Request(context.Background(), handlerTest, []byte(testPayload))`
$DIR/internal/grid/grid_test.go:167:39-167:52: `.Background()`
$DIR/internal/grid/grid_test.go:173:3-173:88: `_, err = remoteConn.NewStream(context.Background(), handlerTest, []byte(testPayload))`
$DIR/internal/grid/grid_test.go:173:22-173:88: `.NewStream(context.Background(), handlerTest, []byte(testPayload))`
$DIR/internal/grid/grid_test.go:173:40-173:53: `.Background()`
$DIR/internal/grid/grid_test.go:174:13-174:40: `.Is(err, ErrUnknownHandler)`
$DIR/internal/grid/grid_test.go:181:18-181:32: `.T.SetLogTB(t)`
$DIR/internal/grid/grid_test.go:183:3-183:13: `t.Helper()`
$DIR/internal/grid/grid_test.go:183:4-183:13: `.Helper()`
$DIR/internal/grid/grid_test.go:189:2-189:15: `errFatal(err)`
$DIR/internal/grid/grid_test.go:202:3-202:26: `resp = h1.NewResponse()`
$DIR/internal/grid/grid_test.go:202:12-202:26: `.NewResponse()`
$DIR/internal/grid/grid_test.go:203:3-207:4: `*resp = testResponse{
			OrgNum:    req.Num,
			OrgString: req.String,
			Embedded:  *req,
		}`
$DIR/internal/grid/grid_test.go:216:2-216:40: `errFatal(h1.Register(local, handler1))`
$DIR/internal/grid/grid_test.go:216:13-216:39: `.Register(local, handler1)`
$DIR/internal/grid/grid_test.go:217:2-217:40: `errFatal(h2.Register(local, handler2))`
$DIR/internal/grid/grid_test.go:217:13-217:39: `.Register(local, handler2)`
$DIR/internal/grid/grid_test.go:219:2-219:41: `errFatal(h1.Register(remote, handler1))`
$DIR/internal/grid/grid_test.go:219:13-219:40: `.Register(remote, handler1)`
$DIR/internal/grid/grid_test.go:220:2-220:41: `errFatal(h2.Register(remote, handler2))`
$DIR/internal/grid/grid_test.go:220:13-220:40: `.Register(remote, handler2)`
$DIR/internal/grid/grid_test.go:223:21-223:44: `.Connection(remoteHost)`
$DIR/internal/grid/grid_test.go:224:2-224:41: `const testPayload = "Hello Grid World!"`
$DIR/internal/grid/grid_test.go:226:15-226:21: `.Now()`
$DIR/internal/grid/grid_test.go:228:17-228:62: `.Call(context.Background(), remoteConn, &req)`
$DIR/internal/grid/grid_test.go:228:30-228:43: `.Background()`
$DIR/internal/grid/grid_test.go:229:2-229:15: `errFatal(err)`
$DIR/internal/grid/grid_test.go:234:2-234:22: `h1.PutResponse(resp)`
$DIR/internal/grid/grid_test.go:234:4-234:22: `.PutResponse(resp)`
$DIR/internal/grid/grid_test.go:236:2-236:20: `start = time.Now()`
$DIR/internal/grid/grid_test.go:236:14-236:20: `.Now()`
$DIR/internal/grid/grid_test.go:237:2-237:98: `resp, err = h2.Call(context.Background(), remoteConn, &testRequest{Num: 1, String: testPayload})`
$DIR/internal/grid/grid_test.go:237:16-237:98: `.Call(context.Background(), remoteConn, &testRequest{Num: 1, String: testPayload})`
$DIR/internal/grid/grid_test.go:237:29-237:42: `.Background()`
$DIR/internal/grid/grid_test.go:245:2-245:22: `h2.PutResponse(resp)`
$DIR/internal/grid/grid_test.go:245:4-245:22: `.PutResponse(resp)`
$DIR/internal/grid/grid_test.go:246:26-246:39: `.Since(start)`
$DIR/internal/grid/grid_test.go:250:18-250:32: `.T.SetLogTB(t)`
$DIR/internal/grid/grid_test.go:252:3-252:13: `t.Helper()`
$DIR/internal/grid/grid_test.go:252:4-252:13: `.Helper()`
$DIR/internal/grid/grid_test.go:258:2-258:15: `errFatal(err)`
$DIR/internal/grid/grid_test.go:267:3-267:26: `resp = h1.NewResponse()`
$DIR/internal/grid/grid_test.go:267:12-267:26: `.NewResponse()`
$DIR/internal/grid/grid_test.go:269:4-269:18: `(*resp)[k] = v`
$DIR/internal/grid/grid_test.go:276:12-276:22: `.Recycle()`
$DIR/internal/grid/grid_test.go:277:21-277:32: `.Get("err")`
$DIR/internal/grid/grid_test.go:280:2-280:40: `errFatal(h1.Register(local, handler1))`
$DIR/internal/grid/grid_test.go:280:13-280:39: `.Register(local, handler1)`
$DIR/internal/grid/grid_test.go:281:2-281:40: `errFatal(h2.Register(local, handler2))`
$DIR/internal/grid/grid_test.go:281:13-281:39: `.Register(local, handler2)`
$DIR/internal/grid/grid_test.go:283:2-283:41: `errFatal(h1.Register(remote, handler1))`
$DIR/internal/grid/grid_test.go:283:13-283:40: `.Register(remote, handler1)`
$DIR/internal/grid/grid_test.go:284:2-284:41: `errFatal(h2.Register(remote, handler2))`
$DIR/internal/grid/grid_test.go:284:13-284:40: `.Register(remote, handler2)`
$DIR/internal/grid/grid_test.go:287:21-287:44: `.Connection(remoteHost)`
$DIR/internal/grid/grid_test.go:288:2-288:41: `const testPayload = "Hello Grid World!"`
$DIR/internal/grid/grid_test.go:290:15-290:21: `.Now()`
$DIR/internal/grid/grid_test.go:292:17-292:61: `.Call(context.Background(), remoteConn, req)`
$DIR/internal/grid/grid_test.go:292:30-292:43: `.Background()`
$DIR/internal/grid/grid_test.go:293:2-293:15: `errFatal(err)`
$DIR/internal/grid/grid_test.go:294:9-294:21: `.Get("test")`
$DIR/internal/grid/grid_test.go:298:2-298:22: `h1.PutResponse(resp)`
$DIR/internal/grid/grid_test.go:298:4-298:22: `.PutResponse(resp)`
$DIR/internal/grid/grid_test.go:300:2-300:20: `start = time.Now()`
$DIR/internal/grid/grid_test.go:300:14-300:20: `.Now()`
$DIR/internal/grid/grid_test.go:301:2-301:106: `resp, err = h2.Call(context.Background(), remoteConn, NewMSSWith(map[string]string{"err": testPayload}))`
$DIR/internal/grid/grid_test.go:301:16-301:106: `.Call(context.Background(), remoteConn, NewMSSWith(map[string]string{"err": testPayload}))`
$DIR/internal/grid/grid_test.go:301:29-301:42: `.Background()`
$DIR/internal/grid/grid_test.go:314:18-314:34: `.T.SetErrorTB(t)`
$DIR/internal/grid/grid_test.go:316:3-316:13: `t.Helper()`
$DIR/internal/grid/grid_test.go:316:4-316:13: `.Helper()`
$DIR/internal/grid/grid_test.go:322:2-322:15: `errFatal(err)`
$DIR/internal/grid/grid_test.go:323:2-323:25: `t.Cleanup(grid.Cleanup)`
$DIR/internal/grid/grid_test.go:323:3-323:25: `.Cleanup(grid.Cleanup)`
$DIR/internal/grid/grid_test.go:330:28-330:51: `.Connection(remoteHost)`
$DIR/internal/grid/grid_test.go:331:27-331:49: `.Connection(localHost)`
$DIR/internal/grid/grid_test.go:333:2-338:4: `t.Run("testStreamRoundtrip", func(t *testing.T) {
		defer timeout(5 * time.Second)()
		testStreamRoundtrip(t, local, remote)
		assertNoActive(t, connRemoteLocal)
		assertNoActive(t, connLocalToRemote)
	})`
$DIR/internal/grid/grid_test.go:333:3-338:4: `.Run("testStreamRoundtrip", func(t *testing.T) {
		defer timeout(5 * time.Second)()
		testStreamRoundtrip(t, local, remote)
		assertNoActive(t, connRemoteLocal)
		assertNoActive(t, connLocalToRemote)
	})`
$DIR/internal/grid/grid_test.go:335:3-335:40: `testStreamRoundtrip(t, local, remote)`
$DIR/internal/grid/grid_test.go:336:3-336:37: `assertNoActive(t, connRemoteLocal)`
$DIR/internal/grid/grid_test.go:337:3-337:39: `assertNoActive(t, connLocalToRemote)`
$DIR/internal/grid/grid_test.go:339:2-344:4: `t.Run("testStreamCancel", func(t *testing.T) {
		defer timeout(5 * time.Second)()
		testStreamCancel(t, local, remote)
		assertNoActive(t, connRemoteLocal)
		assertNoActive(t, connLocalToRemote)
	})`
$DIR/internal/grid/grid_test.go:339:3-344:4: `.Run("testStreamCancel", func(t *testing.T) {
		defer timeout(5 * time.Second)()
		testStreamCancel(t, local, remote)
		assertNoActive(t, connRemoteLocal)
		assertNoActive(t, connLocalToRemote)
	})`
$DIR/internal/grid/grid_test.go:341:3-341:37: `testStreamCancel(t, local, remote)`
$DIR/internal/grid/grid_test.go:342:3-342:37: `assertNoActive(t, connRemoteLocal)`
$DIR/internal/grid/grid_test.go:343:3-343:39: `assertNoActive(t, connLocalToRemote)`
$DIR/internal/grid/grid_test.go:345:2-350:4: `t.Run("testStreamDeadline", func(t *testing.T) {
		defer timeout(5 * time.Second)()
		testStreamDeadline(t, local, remote)
		assertNoActive(t, connRemoteLocal)
		assertNoActive(t, connLocalToRemote)
	})`
$DIR/internal/grid/grid_test.go:345:3-350:4: `.Run("testStreamDeadline", func(t *testing.T) {
		defer timeout(5 * time.Second)()
		testStreamDeadline(t, local, remote)
		assertNoActive(t, connRemoteLocal)
		assertNoActive(t, connLocalToRemote)
	})`
$DIR/internal/grid/grid_test.go:347:3-347:39: `testStreamDeadline(t, local, remote)`
$DIR/internal/grid/grid_test.go:348:3-348:37: `assertNoActive(t, connRemoteLocal)`
$DIR/internal/grid/grid_test.go:349:3-349:39: `assertNoActive(t, connLocalToRemote)`
$DIR/internal/grid/grid_test.go:351:2-356:4: `t.Run("testServerOutCongestion", func(t *testing.T) {
		defer timeout(1 * time.Minute)()
		testServerOutCongestion(t, local, remote)
		assertNoActive(t, connRemoteLocal)
		assertNoActive(t, connLocalToRemote)
	})`
$DIR/internal/grid/grid_test.go:351:3-356:4: `.Run("testServerOutCongestion", func(t *testing.T) {
		defer timeout(1 * time.Minute)()
		testServerOutCongestion(t, local, remote)
		assertNoActive(t, connRemoteLocal)
		assertNoActive(t, connLocalToRemote)
	})`
$DIR/internal/grid/grid_test.go:353:3-353:44: `testServerOutCongestion(t, local, remote)`
$DIR/internal/grid/grid_test.go:354:3-354:37: `assertNoActive(t, connRemoteLocal)`
$DIR/internal/grid/grid_test.go:355:3-355:39: `assertNoActive(t, connLocalToRemote)`
$DIR/internal/grid/grid_test.go:357:2-362:4: `t.Run("testServerInCongestion", func(t *testing.T) {
		defer timeout(1 * time.Minute)()
		testServerInCongestion(t, local, remote)
		assertNoActive(t, connRemoteLocal)
		assertNoActive(t, connLocalToRemote)
	})`
$DIR/internal/grid/grid_test.go:357:3-362:4: `.Run("testServerInCongestion", func(t *testing.T) {
		defer timeout(1 * time.Minute)()
		testServerInCongestion(t, local, remote)
		assertNoActive(t, connRemoteLocal)
		assertNoActive(t, connLocalToRemote)
	})`
$DIR/internal/grid/grid_test.go:359:3-359:43: `testServerInCongestion(t, local, remote)`
$DIR/internal/grid/grid_test.go:360:3-360:37: `assertNoActive(t, connRemoteLocal)`
$DIR/internal/grid/grid_test.go:361:3-361:39: `assertNoActive(t, connLocalToRemote)`
$DIR/internal/grid/grid_test.go:363:2-368:4: `t.Run("testGenericsStreamRoundtrip", func(t *testing.T) {
		defer timeout(1 * time.Minute)()
		testGenericsStreamRoundtrip(t, local, remote)
		assertNoActive(t, connRemoteLocal)
		assertNoActive(t, connLocalToRemote)
	})`
$DIR/internal/grid/grid_test.go:363:3-368:4: `.Run("testGenericsStreamRoundtrip", func(t *testing.T) {
		defer timeout(1 * time.Minute)()
		testGenericsStreamRoundtrip(t, local, remote)
		assertNoActive(t, connRemoteLocal)
		assertNoActive(t, connLocalToRemote)
	})`
$DIR/internal/grid/grid_test.go:365:3-365:48: `testGenericsStreamRoundtrip(t, local, remote)`
$DIR/internal/grid/grid_test.go:366:3-366:37: `assertNoActive(t, connRemoteLocal)`
$DIR/internal/grid/grid_test.go:367:3-367:39: `assertNoActive(t, connLocalToRemote)`
$DIR/internal/grid/grid_test.go:369:2-374:4: `t.Run("testGenericsStreamRoundtripSubroute", func(t *testing.T) {
		defer timeout(1 * time.Minute)()
		testGenericsStreamRoundtripSubroute(t, local, remote)
		assertNoActive(t, connRemoteLocal)
		assertNoActive(t, connLocalToRemote)
	})`
$DIR/internal/grid/grid_test.go:369:3-374:4: `.Run("testGenericsStreamRoundtripSubroute", func(t *testing.T) {
		defer timeout(1 * time.Minute)()
		testGenericsStreamRoundtripSubroute(t, local, remote)
		assertNoActive(t, connRemoteLocal)
		assertNoActive(t, connLocalToRemote)
	})`
$DIR/internal/grid/grid_test.go:371:3-371:56: `testGenericsStreamRoundtripSubroute(t, local, remote)`
$DIR/internal/grid/grid_test.go:372:3-372:37: `assertNoActive(t, connRemoteLocal)`
$DIR/internal/grid/grid_test.go:373:3-373:39: `assertNoActive(t, connLocalToRemote)`
$DIR/internal/grid/grid_test.go:377:3-377:52: `testServerStreamResponseBlocked(t, local, remote)`
$DIR/internal/grid/grid_test.go:378:3-378:37: `assertNoActive(t, connRemoteLocal)`
$DIR/internal/grid/grid_test.go:379:3-379:39: `assertNoActive(t, connLocalToRemote)`
$DIR/internal/grid/msg_gen_test.go:14:15-14:31: `.MarshalMsg(nil)`
$DIR/internal/grid/msg_gen_test.go:18:16-18:34: `.UnmarshalMsg(bts)`
$DIR/internal/grid/msg_gen_test.go:26:2-26:28: `left, err = msgp.Skip(bts)`
$DIR/internal/grid/msg_gen_test.go:73:2-73:23: `msgp.Encode(&buf, &v)`
$DIR/internal/grid/msg_gen_test.go:73:6-73:23: `.Encode(&buf, &v)`
$DIR/internal/grid/msg_gen_test.go:75:8-75:18: `.Msgsize()`
$DIR/internal/grid/msg_gen_test.go:76:8-76:14: `.Len()`
$DIR/internal/grid/msg_gen_test.go:81:13-81:31: `.Decode(&buf, &vn)`
$DIR/internal/grid/msg_gen_test.go:86:2-86:13: `buf.Reset()`
$DIR/internal/grid/msg_gen_test.go:86:5-86:13: `.Reset()`
$DIR/internal/grid/msg_gen_test.go:87:2-87:23: `msgp.Encode(&buf, &v)`
$DIR/internal/grid/msg_gen_test.go:87:6-87:23: `.Encode(&buf, &v)`
$DIR/internal/grid/msg_gen_test.go:88:2-88:35: `err = msgp.NewReader(&buf).Skip()`
$DIR/internal/grid/msg_gen_test.go:127:15-127:31: `.MarshalMsg(nil)`
$DIR/internal/grid/msg_gen_test.go:131:16-131:34: `.UnmarshalMsg(bts)`
$DIR/internal/grid/msg_gen_test.go:139:2-139:28: `left, err = msgp.Skip(bts)`
$DIR/internal/grid/msg_gen_test.go:186:2-186:23: `msgp.Encode(&buf, &v)`
$DIR/internal/grid/msg_gen_test.go:186:6-186:23: `.Encode(&buf, &v)`
$DIR/internal/grid/msg_gen_test.go:188:8-188:18: `.Msgsize()`
$DIR/internal/grid/msg_gen_test.go:189:8-189:14: `.Len()`
$DIR/internal/grid/msg_gen_test.go:194:13-194:31: `.Decode(&buf, &vn)`
$DIR/internal/grid/msg_gen_test.go:199:2-199:13: `buf.Reset()`
$DIR/internal/grid/msg_gen_test.go:199:5-199:13: `.Reset()`
$DIR/internal/grid/msg_gen_test.go:200:2-200:23: `msgp.Encode(&buf, &v)`
$DIR/internal/grid/msg_gen_test.go:200:6-200:23: `.Encode(&buf, &v)`
$DIR/internal/grid/msg_gen_test.go:201:2-201:35: `err = msgp.NewReader(&buf).Skip()`
$DIR/internal/grid/msg_gen_test.go:240:15-240:31: `.MarshalMsg(nil)`
$DIR/internal/grid/msg_gen_test.go:244:16-244:34: `.UnmarshalMsg(bts)`
$DIR/internal/grid/msg_gen_test.go:252:2-252:28: `left, err = msgp.Skip(bts)`
$DIR/internal/grid/msg_gen_test.go:299:2-299:23: `msgp.Encode(&buf, &v)`
$DIR/internal/grid/msg_gen_test.go:299:6-299:23: `.Encode(&buf, &v)`
$DIR/internal/grid/msg_gen_test.go:301:8-301:18: `.Msgsize()`
$DIR/internal/grid/msg_gen_test.go:302:8-302:14: `.Len()`
$DIR/internal/grid/msg_gen_test.go:307:13-307:31: `.Decode(&buf, &vn)`
$DIR/internal/grid/msg_gen_test.go:312:2-312:13: `buf.Reset()`
$DIR/internal/grid/msg_gen_test.go:312:5-312:13: `.Reset()`
$DIR/internal/grid/msg_gen_test.go:313:2-313:23: `msgp.Encode(&buf, &v)`
$DIR/internal/grid/msg_gen_test.go:313:6-313:23: `.Encode(&buf, &v)`
$DIR/internal/grid/msg_gen_test.go:314:2-314:35: `err = msgp.NewReader(&buf).Skip()`
$DIR/internal/grid/msg_gen_test.go:353:15-353:31: `.MarshalMsg(nil)`
$DIR/internal/grid/msg_gen_test.go:357:16-357:34: `.UnmarshalMsg(bts)`
$DIR/internal/grid/msg_gen_test.go:365:2-365:28: `left, err = msgp.Skip(bts)`
$DIR/internal/grid/msg_gen_test.go:412:2-412:23: `msgp.Encode(&buf, &v)`
$DIR/internal/grid/msg_gen_test.go:412:6-412:23: `.Encode(&buf, &v)`
$DIR/internal/grid/msg_gen_test.go:414:8-414:18: `.Msgsize()`
$DIR/internal/grid/msg_gen_test.go:415:8-415:14: `.Len()`
$DIR/internal/grid/msg_gen_test.go:420:13-420:31: `.Decode(&buf, &vn)`
$DIR/internal/grid/msg_gen_test.go:425:2-425:13: `buf.Reset()`
$DIR/internal/grid/msg_gen_test.go:425:5-425:13: `.Reset()`
$DIR/internal/grid/msg_gen_test.go:426:2-426:23: `msgp.Encode(&buf, &v)`
$DIR/internal/grid/msg_gen_test.go:426:6-426:23: `.Encode(&buf, &v)`
$DIR/internal/grid/msg_gen_test.go:427:2-427:35: `err = msgp.NewReader(&buf).Skip()`
$DIR/internal/grid/msg_gen_test.go:466:15-466:31: `.MarshalMsg(nil)`
$DIR/internal/grid/msg_gen_test.go:470:16-470:34: `.UnmarshalMsg(bts)`
$DIR/internal/grid/msg_gen_test.go:478:2-478:28: `left, err = msgp.Skip(bts)`
$DIR/internal/grid/msg_gen_test.go:525:2-525:23: `msgp.Encode(&buf, &v)`
$DIR/internal/grid/msg_gen_test.go:525:6-525:23: `.Encode(&buf, &v)`
$DIR/internal/grid/msg_gen_test.go:527:8-527:18: `.Msgsize()`
$DIR/internal/grid/msg_gen_test.go:528:8-528:14: `.Len()`
$DIR/internal/grid/msg_gen_test.go:533:13-533:31: `.Decode(&buf, &vn)`
$DIR/internal/grid/msg_gen_test.go:538:2-538:13: `buf.Reset()`
$DIR/internal/grid/msg_gen_test.go:538:5-538:13: `.Reset()`
$DIR/internal/grid/msg_gen_test.go:539:2-539:23: `msgp.Encode(&buf, &v)`
$DIR/internal/grid/msg_gen_test.go:539:6-539:23: `.Encode(&buf, &v)`
$DIR/internal/grid/msg_gen_test.go:540:2-540:35: `err = msgp.NewReader(&buf).Skip()`
$DIR/internal/grid/types_test.go:29:15-29:31: `.MarshalMsg(nil)`
$DIR/internal/grid/types_test.go:34:17-34:35: `.UnmarshalMsg(bts)`
$DIR/internal/grid/types_test.go:42:2-42:28: `left, err = msgp.Skip(bts)`
$DIR/internal/grid/types_test.go:49:13-49:30: `.DeepEqual(v, v2)`
$DIR/internal/grid/types_test.go:56:15-56:31: `.MarshalMsg(nil)`
$DIR/internal/grid/types_test.go:61:17-61:35: `.UnmarshalMsg(bts)`
$DIR/internal/grid/types_test.go:69:2-69:28: `left, err = msgp.Skip(bts)`
$DIR/internal/grid/types_test.go:76:13-76:30: `.DeepEqual(v, v2)`
$DIR/internal/grid/types_test.go:118:15-118:31: `.MarshalMsg(nil)`
$DIR/internal/grid/types_test.go:123:17-123:35: `.UnmarshalMsg(bts)`
$DIR/internal/grid/types_test.go:131:2-131:28: `left, err = msgp.Skip(bts)`
$DIR/internal/grid/types_test.go:138:13-138:30: `.DeepEqual(v, v2)`
$DIR/internal/grid/types_test.go:145:15-145:31: `.MarshalMsg(nil)`
$DIR/internal/grid/types_test.go:150:17-150:35: `.UnmarshalMsg(bts)`
$DIR/internal/grid/types_test.go:158:2-158:28: `left, err = msgp.Skip(bts)`
$DIR/internal/grid/types_test.go:165:13-165:30: `.DeepEqual(v, v2)`
$DIR/internal/hash/reader_test.go:34:29-34:42: `.Background()`
$DIR/internal/hash/reader_test.go:34:49-34:75: `.NewReader([]byte("abcd"))`
$DIR/internal/hash/reader_test.go:38:2-38:33: `_, err = io.Copy(io.Discard, r)`
$DIR/internal/hash/reader_test.go:38:13-38:33: `.Copy(io.Discard, r)`
$DIR/internal/hash/reader_test.go:42:13-42:26: `.MD5Current()`
$DIR/internal/hash/reader_test.go:43:8-43:31: `.EncodeToString(md5sum)`
$DIR/internal/hash/reader_test.go:46:6-46:24: `.SHA256HexString()`
$DIR/internal/hash/reader_test.go:49:11-49:46: `.StdEncoding.EncodeToString(md5sum)`
$DIR/internal/hash/reader_test.go:52:6-52:13: `.Size()`
$DIR/internal/hash/reader_test.go:55:6-55:19: `.ActualSize()`
$DIR/internal/hash/reader_test.go:58:25-58:74: `.DecodeString("e2fc714c4727ee9395f324cd2e7f331f")`
$DIR/internal/hash/reader_test.go:62:11-62:46: `.Equal(r.MD5Current(), expectedMD5)`
$DIR/internal/hash/reader_test.go:62:19-62:32: `.MD5Current()`
$DIR/internal/hash/reader_test.go:65:28-65:109: `.DecodeString("88d4266fd4e6338d13b845fcf289579d209c897823b9217da3e161936f031589")`
$DIR/internal/hash/reader_test.go:69:11-69:45: `.Equal(r.SHA256(), expectedSHA256)`
$DIR/internal/hash/reader_test.go:69:19-69:28: `.SHA256()`
$DIR/internal/hash/reader_test.go:86:21-86:47: `.NewReader([]byte("abcd"))`
$DIR/internal/hash/reader_test.go:92:21-92:47: `.NewReader([]byte("abcd"))`
$DIR/internal/hash/reader_test.go:103:21-103:47: `.NewReader([]byte("abcd"))`
$DIR/internal/hash/reader_test.go:114:35-114:61: `.NewReader([]byte("abcd"))`
$DIR/internal/hash/reader_test.go:120:35-120:61: `.NewReader([]byte("abcd"))`
$DIR/internal/hash/reader_test.go:131:35-131:61: `.NewReader([]byte("abcd"))`
$DIR/internal/hash/reader_test.go:138:35-138:86: `.NewReader([]byte("abcd-more-stuff-to-be ignored"))`
$DIR/internal/hash/reader_test.go:146:35-146:86: `.NewReader([]byte("abcd-more-stuff-to-be ignored"))`
$DIR/internal/hash/reader_test.go:154:35-154:61: `.NewReader([]byte("abcd"))`
$DIR/internal/hash/reader_test.go:165:21-165:64: `.NewReader([]byte("abcd-morethan-4-bytes"))`
$DIR/internal/hash/reader_test.go:173:35-173:61: `.NewReader([]byte("abcd"))`
$DIR/internal/hash/reader_test.go:180:21-180:64: `.NewReader([]byte("abcd-morethan-4-bytes"))`
$DIR/internal/hash/reader_test.go:189:35-189:71: `.NewReader([]byte("abcd-morestuff"))`
$DIR/internal/hash/reader_test.go:197:3-212:5: `t.Run(fmt.Sprintf("case-%d", i+1), func(t *testing.T) {
			r, err := NewReader(context.Background(), testCase.src, testCase.size, testCase.md5hex, testCase.sha256hex, testCase.actualSize)
			if err != nil {
				t.Fatalf("Test %q: Initializing reader failed %s", testCase.desc, err)
			}
			_, err = io.Copy(io.Discard, r)
			if err != nil {
				if testCase.err == nil {
					t.Errorf("Test %q; got unexpected error: %v", testCase.desc, err)
					return
				}
				if err.Error() != testCase.err.Error() {
					t.Errorf("Test %q: Expected error %s, got error %s", testCase.desc, testCase.err, err)
				}
			}
		})`
$DIR/internal/hash/reader_test.go:197:4-212:5: `.Run(fmt.Sprintf("case-%d", i+1), func(t *testing.T) {
			r, err := NewReader(context.Background(), testCase.src, testCase.size, testCase.md5hex, testCase.sha256hex, testCase.actualSize)
			if err != nil {
				t.Fatalf("Test %q: Initializing reader failed %s", testCase.desc, err)
			}
			_, err = io.Copy(io.Discard, r)
			if err != nil {
				if testCase.err == nil {
					t.Errorf("Test %q; got unexpected error: %v", testCase.desc, err)
					return
				}
				if err.Error() != testCase.err.Error() {
					t.Errorf("Test %q: Expected error %s, got error %s", testCase.desc, testCase.err, err)
				}
			}
		})`
$DIR/internal/hash/reader_test.go:197:12-197:36: `.Sprintf("case-%d", i+1)`
$DIR/internal/hash/reader_test.go:198:31-198:44: `.Background()`
$DIR/internal/hash/reader_test.go:202:4-202:35: `_, err = io.Copy(io.Discard, r)`
$DIR/internal/hash/reader_test.go:202:15-202:35: `.Copy(io.Discard, r)`
$DIR/internal/hash/reader_test.go:236:21-236:47: `.NewReader([]byte("abcd"))`
$DIR/internal/hash/reader_test.go:244:21-244:47: `.NewReader([]byte("abcd"))`
$DIR/internal/hash/reader_test.go:252:35-252:61: `.NewReader([]byte("abcd"))`
$DIR/internal/hash/reader_test.go:259:35-259:61: `.NewReader([]byte("abcd"))`
$DIR/internal/hash/reader_test.go:267:35-267:61: `.NewReader([]byte("abcd"))`
$DIR/internal/hash/reader_test.go:275:35-275:61: `.NewReader([]byte("abcd"))`
$DIR/internal/hash/reader_test.go:283:35-283:61: `.NewReader([]byte("abcd"))`
$DIR/internal/hash/reader_test.go:291:21-291:47: `.NewReader([]byte("abcd"))`
$DIR/internal/hash/reader_test.go:298:35-298:71: `.NewReader([]byte("abcd-morestuff"))`
$DIR/internal/hash/reader_test.go:306:3-314:5: `t.Run(fmt.Sprintf("case-%d", i+1), func(t *testing.T) {
			_, err := NewReader(context.Background(), testCase.src, testCase.size, testCase.md5hex, testCase.sha256hex, testCase.actualSize)
			if err != nil && testCase.success {
				t.Errorf("Test %q: Expected success, but got error %s instead", testCase.desc, err)
			}
			if err == nil && !testCase.success {
				t.Errorf("Test %q: Expected error, but got success", testCase.desc)
			}
		})`
$DIR/internal/hash/reader_test.go:306:4-314:5: `.Run(fmt.Sprintf("case-%d", i+1), func(t *testing.T) {
			_, err := NewReader(context.Background(), testCase.src, testCase.size, testCase.md5hex, testCase.sha256hex, testCase.actualSize)
			if err != nil && testCase.success {
				t.Errorf("Test %q: Expected success, but got error %s instead", testCase.desc, err)
			}
			if err == nil && !testCase.success {
				t.Errorf("Test %q: Expected error, but got success", testCase.desc)
			}
		})`
$DIR/internal/hash/reader_test.go:306:12-306:36: `.Sprintf("case-%d", i+1)`
$DIR/internal/hash/reader_test.go:307:31-307:44: `.Background()`
$DIR/internal/http/check_port_test.go:34:15-34:44: `.Listen("tcp", "localhost:0")`
$DIR/internal/http/check_port_test.go:40:11-40:18: `.Addr()`
$DIR/internal/http/check_port_test.go:52:54-52:74: `.Itoa(testCase.port)`
$DIR/internal/http/listener_test.go:141:41-141:53: `.Duration(0)`
$DIR/internal/http/listener_test.go:141:59-141:71: `.Duration(0)`
$DIR/internal/http/listener_test.go:141:77-141:89: `.Duration(0)`
$DIR/internal/http/listener_test.go:142:39-142:51: `.Duration(0)`
$DIR/internal/http/listener_test.go:142:57-142:69: `.Duration(0)`
$DIR/internal/http/listener_test.go:142:75-142:87: `.Duration(0)`
$DIR/internal/http/listener_test.go:143:34-143:46: `.Duration(0)`
$DIR/internal/http/listener_test.go:143:52-143:64: `.Duration(0)`
$DIR/internal/http/listener_test.go:143:70-143:82: `.Duration(0)`
$DIR/internal/http/listener_test.go:144:40-144:52: `.Duration(0)`
$DIR/internal/http/listener_test.go:144:58-144:70: `.Duration(0)`
$DIR/internal/http/listener_test.go:144:76-144:88: `.Duration(0)`
$DIR/internal/http/listener_test.go:145:37-145:49: `.Duration(0)`
$DIR/internal/http/listener_test.go:145:55-145:67: `.Duration(0)`
$DIR/internal/http/listener_test.go:145:73-145:85: `.Duration(0)`
$DIR/internal/http/listener_test.go:146:60-146:72: `.Duration(0)`
$DIR/internal/http/listener_test.go:146:78-146:90: `.Duration(0)`
$DIR/internal/http/listener_test.go:146:96-146:108: `.Duration(0)`
$DIR/internal/http/listener_test.go:147:59-147:71: `.Duration(0)`
$DIR/internal/http/listener_test.go:147:77-147:89: `.Duration(0)`
$DIR/internal/http/listener_test.go:147:95-147:107: `.Duration(0)`
$DIR/internal/http/listener_test.go:148:51-148:63: `.Duration(0)`
$DIR/internal/http/listener_test.go:148:69-148:81: `.Duration(0)`
$DIR/internal/http/listener_test.go:148:87-148:99: `.Duration(0)`
$DIR/internal/http/listener_test.go:149:33-149:45: `.Duration(0)`
$DIR/internal/http/listener_test.go:149:51-149:63: `.Duration(0)`
$DIR/internal/http/listener_test.go:149:69-149:81: `.Duration(0)`
$DIR/internal/http/listener_test.go:150:33-150:45: `.Duration(0)`
$DIR/internal/http/listener_test.go:150:51-150:63: `.Duration(0)`
$DIR/internal/http/listener_test.go:150:69-150:81: `.Duration(0)`
$DIR/internal/http/listener_test.go:151:51-151:63: `.Duration(0)`
$DIR/internal/http/listener_test.go:151:69-151:81: `.Duration(0)`
$DIR/internal/http/listener_test.go:151:87-151:99: `.Duration(0)`
$DIR/internal/http/listener_test.go:152:47-152:59: `.Duration(0)`
$DIR/internal/http/listener_test.go:152:65-152:77: `.Duration(0)`
$DIR/internal/http/listener_test.go:152:83-152:95: `.Duration(0)`
$DIR/internal/http/listener_test.go:156:50-156:63: `.Background()`
$DIR/internal/http/listener_test.go:195:44-195:57: `.Background()`
$DIR/internal/http/listener_test.go:201:15-201:90: `.Contains(err.Error(), "The requested address is not valid in its context")`
$DIR/internal/http/listener_test.go:205:15-205:69: `.Contains(err.Error(), "bind: address already in use")`
$DIR/internal/http/listener_test.go:212:38-212:46: `.Addrs()`
$DIR/internal/http/listener_test.go:213:20-213:53: `.Dial("tcp", serverAddr.String())`
$DIR/internal/http/listener_test.go:213:43-213:52: `.String()`
$DIR/internal/http/listener_test.go:232:3-232:47: `casePorts = append(casePorts, getNextPort())`
$DIR/internal/http/listener_test.go:249:44-249:57: `.Background()`
$DIR/internal/http/listener_test.go:255:15-255:90: `.Contains(err.Error(), "The requested address is not valid in its context")`
$DIR/internal/http/listener_test.go:259:15-259:69: `.Contains(err.Error(), "bind: address already in use")`
$DIR/internal/http/listener_test.go:266:19-266:26: `.Addr()`
$DIR/internal/http/listener_test.go:267:10-267:19: `.String()`
$DIR/internal/http/listener_test.go:283:3-283:47: `casePorts = append(casePorts, getNextPort())`
$DIR/internal/http/listener_test.go:290:46-290:91: `.CreateStringSet("127.0.0.1:" + casePorts[0])`
$DIR/internal/http/listener_test.go:291:53-291:105: `.CreateStringSet(nonLoopBackIP + ":" + casePorts[1])`
$DIR/internal/http/listener_test.go:292:82-292:157: `.CreateStringSet("127.0.0.1:"+casePorts[2], nonLoopBackIP+":"+casePorts[2])`
$DIR/internal/http/listener_test.go:293:46-293:91: `.CreateStringSet("127.0.0.1:" + casePorts[3])`
$DIR/internal/http/listener_test.go:294:53-294:105: `.CreateStringSet(nonLoopBackIP + ":" + casePorts[4])`
$DIR/internal/http/listener_test.go:295:82-295:157: `.CreateStringSet("127.0.0.1:"+casePorts[5], nonLoopBackIP+":"+casePorts[5])`
$DIR/internal/http/listener_test.go:300:44-300:57: `.Background()`
$DIR/internal/http/listener_test.go:306:15-306:90: `.Contains(err.Error(), "The requested address is not valid in its context")`
$DIR/internal/http/listener_test.go:310:15-310:69: `.Contains(err.Error(), "bind: address already in use")`
$DIR/internal/http/listener_test.go:317:20-317:28: `.Addrs()`
$DIR/internal/http/listener_test.go:318:17-318:32: `.NewStringSet()`
$DIR/internal/http/listener_test.go:320:4-320:30: `addrSet.Add(addr.String())`
$DIR/internal/http/listener_test.go:320:11-320:30: `.Add(addr.String())`
$DIR/internal/http/listener_test.go:320:20-320:29: `.String()`
$DIR/internal/http/listener_test.go:323:14-323:45: `.Equals(testCase.expectedAddrs)`
$DIR/internal/http/server_test.go:32:17-34:4: `.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		fmt.Fprintf(w, "Hello, world")
	})`
$DIR/internal/http/server_test.go:33:3-33:33: `fmt.Fprintf(w, "Hello, world")`
$DIR/internal/http/server_test.go:33:6-33:33: `.Fprintf(w, "Hello, world")`
$DIR/internal/http/server_test.go:50:38-51:32: `.
			UseHandler(testCase.handler)`
$DIR/internal/http/server_test.go:51:32-52:46: `.
			UseShutdownTimeout(DefaultShutdownTimeout)`
$DIR/internal/http/server_test.go:54:4-57:6: `server = server.UseTLSConfig(&tls.Config{
				PreferServerCipherSuites: true,
				GetCertificate:           testCase.certFn,
			})`
$DIR/internal/http/server_test.go:54:19-57:6: `.UseTLSConfig(&tls.Config{
				PreferServerCipherSuites: true,
				GetCertificate:           testCase.certFn,
			})`
$DIR/internal/http/server_test.go:61:21-61:61: `.DeepEqual(server.Addrs, testCase.addrs)`
$DIR/internal/ioutil/ioutil_test.go:46:13-46:32: `.Write([]byte("1"))`
$DIR/internal/ioutil/ioutil_test.go:50:2-50:31: `_, err = w.Write([]byte("1"))`
$DIR/internal/ioutil/ioutil_test.go:50:12-50:31: `.Write([]byte("1"))`
$DIR/internal/ioutil/ioutil_test.go:55:2-55:92: `w = NewDeadlineWriter(&sleepWriter{timeout: 100 * time.Millisecond}, 600*time.Millisecond)`
$DIR/internal/ioutil/ioutil_test.go:56:13-56:35: `.Write([]byte("abcd"))`
$DIR/internal/ioutil/ioutil_test.go:68:11-68:24: `.HasWritten()`
$DIR/internal/ioutil/ioutil_test.go:71:2-71:19: `writer.Write(nil)`
$DIR/internal/ioutil/ioutil_test.go:71:8-71:19: `.Write(nil)`
$DIR/internal/ioutil/ioutil_test.go:72:12-72:25: `.HasWritten()`
$DIR/internal/ioutil/ioutil_test.go:76:2-76:35: `writer = WriteOnClose(io.Discard)`
$DIR/internal/ioutil/ioutil_test.go:78:12-78:25: `.HasWritten()`
$DIR/internal/ioutil/ioutil_test.go:85:14-85:33: `.CreateTemp("", "")`
$DIR/internal/ioutil/ioutil_test.go:89:12-89:19: `.Name()`
$DIR/internal/ioutil/ioutil_test.go:90:10-90:24: `.Remove(name1)`
$DIR/internal/ioutil/ioutil_test.go:91:2-91:29: `f.WriteString("aaaaaaaaaa")`
$DIR/internal/ioutil/ioutil_test.go:91:3-91:29: `.WriteString("aaaaaaaaaa")`
$DIR/internal/ioutil/ioutil_test.go:94:2-94:32: `f, err = os.CreateTemp("", "")`
$DIR/internal/ioutil/ioutil_test.go:94:13-94:32: `.CreateTemp("", "")`
$DIR/internal/ioutil/ioutil_test.go:98:12-98:19: `.Name()`
$DIR/internal/ioutil/ioutil_test.go:99:10-99:24: `.Remove(name2)`
$DIR/internal/ioutil/ioutil_test.go:100:2-100:29: `f.WriteString("bbbbbbbbbb")`
$DIR/internal/ioutil/ioutil_test.go:100:3-100:29: `.WriteString("bbbbbbbbbb")`
$DIR/internal/ioutil/ioutil_test.go:107:14-107:30: `.ReadFile(name1)`
$DIR/internal/ioutil/ioutil_test.go:124:9-124:31: `.NewBuffer([]byte(""))`
$DIR/internal/ioutil/ioutil_test.go:125:9-125:31: `.NewBuffer([]byte(""))`
$DIR/internal/ioutil/ioutil_test.go:126:9-126:34: `.NewBuffer([]byte("abc"))`
$DIR/internal/ioutil/ioutil_test.go:127:9-127:34: `.NewBuffer([]byte("abc"))`
$DIR/internal/ioutil/ioutil_test.go:128:9-128:34: `.NewBuffer([]byte("abc"))`
$DIR/internal/ioutil/ioutil_test.go:129:9-129:34: `.NewBuffer([]byte("abc"))`
$DIR/internal/ioutil/ioutil_test.go:130:9-130:34: `.NewBuffer([]byte("abc"))`
$DIR/internal/ioutil/ioutil_test.go:134:15-134:26: `.ReadAll(r)`
$DIR/internal/ioutil/ioutil_test.go:145:14-145:33: `.CreateTemp("", "")`
$DIR/internal/ioutil/ioutil_test.go:149:14-149:21: `.Name()`
$DIR/internal/ioutil/ioutil_test.go:151:10-151:27: `.Remove(f.Name())`
$DIR/internal/ioutil/ioutil_test.go:151:19-151:26: `.Name()`
$DIR/internal/ioutil/ioutil_test.go:152:16-152:30: `.Stat(tmpFile)`
$DIR/internal/ioutil/ioutil_test.go:156:16-156:30: `.Stat(tmpFile)`
$DIR/internal/ioutil/ioutil_test.go:163:13-163:54: `.WriteFile(tmpFile, []byte("aaa"), 0o644)`
$DIR/internal/ioutil/ioutil_test.go:166:2-166:29: `fi2, err = os.Stat(tmpFile)`
$DIR/internal/ioutil/ioutil_test.go:166:15-166:29: `.Stat(tmpFile)`
$DIR/internal/ioutil/ioutil_test.go:176:14-176:33: `.CreateTemp("", "")`
$DIR/internal/ioutil/ioutil_test.go:181:10-181:27: `.Remove(f.Name())`
$DIR/internal/ioutil/ioutil_test.go:181:19-181:26: `.Name()`
$DIR/internal/ioutil/ioutil_test.go:183:14-183:39: `.NewReader("hello world")`
$DIR/internal/ioutil/ioutil_test.go:185:26-185:32: `.Get()`
$DIR/internal/ioutil/ioutil_test.go:186:24-186:34: `.Put(bufp)`
$DIR/internal/ioutil/ioutil_test.go:188:35-188:53: `.LimitReader(r, 5)`
$DIR/internal/ioutil/ioutil_test.go:188:63-188:70: `.Size()`
$DIR/internal/ioutil/ioutil_test.go:189:12-189:41: `.Is(err, io.ErrUnexpectedEOF)`
$DIR/internal/ioutil/ioutil_test.go:196:2-196:25: `f.Seek(0, io.SeekStart)`
$DIR/internal/ioutil/ioutil_test.go:196:3-196:25: `.Seek(0, io.SeekStart)`
$DIR/internal/ioutil/ioutil_test.go:197:2-197:25: `r.Seek(0, io.SeekStart)`
$DIR/internal/ioutil/ioutil_test.go:197:3-197:25: `.Seek(0, io.SeekStart)`
$DIR/internal/ioutil/ioutil_test.go:199:2-199:54: `written, err = CopyAligned(f, r, *bufp, r.Size(), f)`
$DIR/internal/ioutil/ioutil_test.go:199:43-199:50: `.Size()`
$DIR/internal/ioutil/ioutil_test.go:200:12-200:25: `.Is(err, nil)`
$DIR/internal/ioutil/ioutil_test.go:203:17-203:24: `.Size()`
$DIR/internal/jwt/parser_test.go:180:3-212:5: `t.Run(data.name, func(t *testing.T) {
			// Parse the token
			var err error

			// Figure out correct claims type
			switch claims := data.claims.(type) {
			case *MapClaims:
				if data.tokenString == "" {
					data.tokenString = mapClaimsToken(claims)
				}
				err = ParseWithClaims(data.tokenString, &MapClaims{}, data.keyfunc)
			case *StandardClaims:
				if data.tokenString == "" {
					data.tokenString = standardClaimsToken(claims)
				}
				err = ParseWithStandardClaims(data.tokenString, &StandardClaims{}, []byte("HelloSecret"))
			}

			if data.valid && err != nil {
				t.Errorf("Error while verifying token: %T:%v", err, err)
			}

			if !data.valid && err == nil {
				t.Errorf("Invalid token passed validation")
			}

			if data.errors != 0 {
				_, ok := err.(*jwt.ValidationError)
				if !ok {
					t.Errorf("Expected *jwt.ValidationError, but got %#v instead", err)
				}
			}
		})`
$DIR/internal/jwt/parser_test.go:180:4-212:5: `.Run(data.name, func(t *testing.T) {
			// Parse the token
			var err error

			// Figure out correct claims type
			switch claims := data.claims.(type) {
			case *MapClaims:
				if data.tokenString == "" {
					data.tokenString = mapClaimsToken(claims)
				}
				err = ParseWithClaims(data.tokenString, &MapClaims{}, data.keyfunc)
			case *StandardClaims:
				if data.tokenString == "" {
					data.tokenString = standardClaimsToken(claims)
				}
				err = ParseWithStandardClaims(data.tokenString, &StandardClaims{}, []byte("HelloSecret"))
			}

			if data.valid && err != nil {
				t.Errorf("Error while verifying token: %T:%v", err, err)
			}

			if !data.valid && err == nil {
				t.Errorf("Invalid token passed validation")
			}

			if data.errors != 0 {
				_, ok := err.(*jwt.ValidationError)
				if !ok {
					t.Errorf("Expected *jwt.ValidationError, but got %#v instead", err)
				}
			}
		})`
$DIR/internal/jwt/parser_test.go:188:6-188:47: `data.tokenString = mapClaimsToken(claims)`
$DIR/internal/jwt/parser_test.go:190:5-190:72: `err = ParseWithClaims(data.tokenString, &MapClaims{}, data.keyfunc)`
$DIR/internal/jwt/parser_test.go:193:6-193:52: `data.tokenString = standardClaimsToken(claims)`
$DIR/internal/jwt/parser_test.go:195:5-195:94: `err = ParseWithStandardClaims(data.tokenString, &StandardClaims{}, []byte("HelloSecret"))`
$DIR/internal/kms/dek_test.go:48:20-48:38: `.Key.MarshalText()`
$DIR/internal/kms/dek_test.go:54:15-54:35: `.UnmarshalText(text)`
$DIR/internal/kms/dek_test.go:60:12-60:55: `.Equal(key.Ciphertext, test.Key.Ciphertext)`
$DIR/internal/kms/single-key_test.go:33:17-33:72: `.GenerateKey(context.Background(), "my-key", Context{})`
$DIR/internal/kms/single-key_test.go:33:37-33:50: `.Background()`
$DIR/internal/kms/single-key_test.go:37:23-37:72: `.DecryptKey(key.KeyID, key.Ciphertext, Context{})`
$DIR/internal/kms/single-key_test.go:41:11-41:43: `.Equal(key.Plaintext, plaintext)`
$DIR/internal/kms/single-key_test.go:53:25-53:66: `.StdEncoding.DecodeString(test.Plaintext)`
$DIR/internal/kms/single-key_test.go:57:28-57:70: `.StdEncoding.DecodeString(test.Ciphertext)`
$DIR/internal/kms/single-key_test.go:61:24-61:73: `.DecryptKey(test.KeyID, ciphertext, test.Context)`
$DIR/internal/kms/single-key_test.go:65:12-65:38: `.Equal(plaintext, dataKey)`
$DIR/internal/lock/lock_test.go:28:14-28:37: `.CreateTemp("", "lock")`
$DIR/internal/lock/lock_test.go:34:3-34:28: `err = os.Remove(f.Name())`
$DIR/internal/lock/lock_test.go:34:11-34:28: `.Remove(f.Name())`
$DIR/internal/lock/lock_test.go:34:20-34:27: `.Name()`
$DIR/internal/lock/lock_test.go:40:2-40:55: `_, err = LockedOpenFile(f.Name(), os.O_APPEND, 0o600)`
$DIR/internal/lock/lock_test.go:40:27-40:34: `.Name()`
$DIR/internal/lock/lock_test.go:48:8-48:18: `.TempDir()`
$DIR/internal/lock/lock_test.go:58:14-58:37: `.CreateTemp("", "lock")`
$DIR/internal/lock/lock_test.go:64:3-64:28: `err = os.Remove(f.Name())`
$DIR/internal/lock/lock_test.go:64:11-64:28: `.Remove(f.Name())`
$DIR/internal/lock/lock_test.go:64:20-64:27: `.Name()`
$DIR/internal/lock/lock_test.go:70:31-70:38: `.Name()`
$DIR/internal/lock/lock_test.go:74:17-74:28: `.IsClosed()`
$DIR/internal/lock/lock_test.go:80:2-80:18: `rlk.IncLockRef()`
$DIR/internal/lock/lock_test.go:80:5-80:18: `.IncLockRef()`
$DIR/internal/lock/lock_test.go:82:2-82:27: `isClosed = rlk.IsClosed()`
$DIR/internal/lock/lock_test.go:82:16-82:27: `.IsClosed()`
$DIR/internal/lock/lock_test.go:92:2-92:27: `isClosed = rlk.IsClosed()`
$DIR/internal/lock/lock_test.go:92:16-92:27: `.IsClosed()`
$DIR/internal/lock/lock_test.go:103:2-103:27: `isClosed = rlk.IsClosed()`
$DIR/internal/lock/lock_test.go:103:16-103:27: `.IsClosed()`
$DIR/internal/lock/lock_test.go:113:2-113:30: `_, err = newRLockedFile(nil)`
$DIR/internal/lock/lock_test.go:121:14-121:37: `.CreateTemp("", "lock")`
$DIR/internal/lock/lock_test.go:127:3-127:28: `err = os.Remove(f.Name())`
$DIR/internal/lock/lock_test.go:127:11-127:28: `.Remove(f.Name())`
$DIR/internal/lock/lock_test.go:127:20-127:27: `.Name()`
$DIR/internal/lock/lock_test.go:134:28-134:35: `.Name()`
$DIR/internal/lock/lock_test.go:145:31-145:38: `.Name()`
$DIR/internal/lock/lock_test.go:153:32-153:39: `.Name()`
$DIR/internal/lock/lock_test.go:158:3-158:23: `locked <- struct{}{}`
$DIR/internal/lock/lock_test.go:168:13-168:43: `.After(100 * time.Millisecond)`
$DIR/internal/lock/lock_test.go:179:13-179:36: `.After(1 * time.Second)`
$DIR/internal/lock/lock_windows_test.go:35:27-35:44: `.Repeat("o", 248)`
$DIR/internal/lock/lock_windows_test.go:54:16-54:54: `.ReplaceAll(test.in, "long", veryLong)`
$DIR/internal/lock/lock_windows_test.go:55:18-55:58: `.ReplaceAll(test.want, "long", veryLong)`
$DIR/internal/lock/lock_windows_test.go:57:4-57:51: `got = strings.ReplaceAll(got, veryLong, "long")`
$DIR/internal/lock/lock_windows_test.go:57:17-57:51: `.ReplaceAll(got, veryLong, "long")`
$DIR/internal/lsync/lrwmutex_test.go:173:15-173:50: `.GOMAXPROCS(runtime.GOMAXPROCS(-1))`
$DIR/internal/lsync/lrwmutex_test.go:173:34-173:49: `.GOMAXPROCS(-1)`
$DIR/internal/lsync/lrwmutex_test.go:174:2-174:29: `doTestParallelReaders(1, 4)`
$DIR/internal/lsync/lrwmutex_test.go:175:2-175:29: `doTestParallelReaders(3, 4)`
$DIR/internal/lsync/lrwmutex_test.go:237:15-237:50: `.GOMAXPROCS(runtime.GOMAXPROCS(-1))`
$DIR/internal/lsync/lrwmutex_test.go:237:34-237:49: `.GOMAXPROCS(-1)`
$DIR/internal/lsync/lrwmutex_test.go:239:12-239:20: `.Short()`
$DIR/internal/lsync/lrwmutex_test.go:240:3-240:8: `n = 5`
$DIR/internal/lsync/lrwmutex_test.go:242:2-242:24: `HammerRWMutex(1, 1, n)`
$DIR/internal/lsync/lrwmutex_test.go:243:2-243:24: `HammerRWMutex(1, 3, n)`
$DIR/internal/lsync/lrwmutex_test.go:244:2-244:25: `HammerRWMutex(1, 10, n)`
$DIR/internal/lsync/lrwmutex_test.go:245:2-245:24: `HammerRWMutex(4, 1, n)`
$DIR/internal/lsync/lrwmutex_test.go:246:2-246:24: `HammerRWMutex(4, 3, n)`
$DIR/internal/lsync/lrwmutex_test.go:247:2-247:25: `HammerRWMutex(4, 10, n)`
$DIR/internal/lsync/lrwmutex_test.go:248:2-248:25: `HammerRWMutex(10, 1, n)`
$DIR/internal/lsync/lrwmutex_test.go:249:2-249:25: `HammerRWMutex(10, 3, n)`
$DIR/internal/lsync/lrwmutex_test.go:250:2-250:26: `HammerRWMutex(10, 10, n)`
$DIR/internal/lsync/lrwmutex_test.go:260:2-260:20: `rl = wl.DRLocker()`
$DIR/internal/lsync/lrwmutex_test.go:260:9-260:20: `.DRLocker()`
$DIR/internal/lsync/lrwmutex_test.go:264:4-264:13: `rl.Lock()`
$DIR/internal/lsync/lrwmutex_test.go:264:6-264:13: `.Lock()`
$DIR/internal/lsync/lrwmutex_test.go:265:4-265:13: `rl.Lock()`
$DIR/internal/lsync/lrwmutex_test.go:265:6-265:13: `.Lock()`
$DIR/internal/lsync/lrwmutex_test.go:266:4-266:19: `rlocked <- true`
$DIR/internal/lsync/lrwmutex_test.go:267:4-267:13: `wl.Lock()`
$DIR/internal/lsync/lrwmutex_test.go:267:6-267:13: `.Lock()`
$DIR/internal/lsync/lrwmutex_test.go:268:4-268:19: `wlocked <- true`
$DIR/internal/lsync/lrwmutex_test.go:272:3-272:12: `<-rlocked`
$DIR/internal/lsync/lrwmutex_test.go:273:3-273:14: `rl.Unlock()`
$DIR/internal/lsync/lrwmutex_test.go:273:5-273:14: `.Unlock()`
$DIR/internal/lsync/lrwmutex_test.go:279:3-279:14: `rl.Unlock()`
$DIR/internal/lsync/lrwmutex_test.go:279:5-279:14: `.Unlock()`
$DIR/internal/lsync/lrwmutex_test.go:280:3-280:12: `<-wlocked`
$DIR/internal/lsync/lrwmutex_test.go:286:3-286:14: `wl.Unlock()`
$DIR/internal/lsync/lrwmutex_test.go:286:5-286:14: `.Unlock()`
$DIR/internal/lsync/lrwmutex_test.go:309:2-309:12: `mu.RLock()`
$DIR/internal/lsync/lrwmutex_test.go:309:4-309:12: `.RLock()`
$DIR/internal/lsync/lrwmutex_test.go:332:2-332:11: `mu.Lock()`
$DIR/internal/lsync/lrwmutex_test.go:332:4-332:11: `.Lock()`
$DIR/internal/mountinfo/mountinfo_linux_test.go:40:10-40:20: `.TempDir()`
$DIR/internal/mountinfo/mountinfo_linux_test.go:41:24-41:44: `.Join(dir, "mounts")`
$DIR/internal/mountinfo/mountinfo_linux_test.go:42:13-42:63: `.WriteFile(mountsPath, []byte(successCase), 0o666)`
$DIR/internal/mountinfo/mountinfo_linux_test.go:55:13-55:168: `.Sprintf("Cross-device mounts detected on path (/path/to/1) at following locations %s. Export path should not have any sub-mounts, refusing to start.", mp)`
$DIR/internal/mountinfo/mountinfo_linux_test.go:66:24-66:95: `.Sprintf("Invalid argument, path (%s) is expected to be absolute", ".")`
$DIR/internal/mountinfo/mountinfo_linux_test.go:89:10-89:20: `.TempDir()`
$DIR/internal/mountinfo/mountinfo_linux_test.go:90:24-90:44: `.Join(dir, "mounts")`
$DIR/internal/mountinfo/mountinfo_linux_test.go:91:13-91:63: `.WriteFile(mountsPath, []byte(successCase), 0o666)`
$DIR/internal/mountinfo/mountinfo_linux_test.go:100:18-100:49: `.checkCrossMounts("/path/to/1")`
$DIR/internal/mountinfo/mountinfo_linux_test.go:107:13-107:168: `.Sprintf("Cross-device mounts detected on path (/path/to/1) at following locations %s. Export path should not have any sub-mounts, refusing to start.", mp)`
$DIR/internal/mountinfo/mountinfo_linux_test.go:114:18-114:40: `.checkCrossMounts(".")`
$DIR/internal/mountinfo/mountinfo_linux_test.go:117:24-117:95: `.Sprintf("Invalid argument, path (%s) is expected to be absolute", ".")`
$DIR/internal/mountinfo/mountinfo_linux_test.go:124:18-124:49: `.checkCrossMounts("/path/to/x")`
$DIR/internal/mountinfo/mountinfo_linux_test.go:137:10-137:20: `.TempDir()`
$DIR/internal/mountinfo/mountinfo_linux_test.go:139:24-139:44: `.Join(dir, "mounts")`
$DIR/internal/mountinfo/mountinfo_linux_test.go:140:13-140:63: `.WriteFile(mountsPath, []byte(successCase), 0o666)`
$DIR/internal/mountinfo/mountinfo_linux_test.go:146:3-146:43: `mounts, err = readProcMounts(mountsPath)`
$DIR/internal/mountinfo/mountinfo_linux_test.go:157:3-157:79: `mp = mountInfo{"/dev/1", "/path/to/1", "type1", []string{"flags"}, "1", "1"}`
$DIR/internal/mountinfo/mountinfo_linux_test.go:161:3-161:91: `mp = mountInfo{"/dev/2", "/path/to/2", "type2", []string{"flags", "1", "2=3"}, "2", "2"}`
$DIR/internal/mountinfo/mountinfo_linux_test.go:168:38-168:64: `.Join(dir, "non-existent")`
$DIR/internal/mountinfo/mountinfo_linux_test.go:168:84-168:100: `.IsNotExist(err)`
$DIR/internal/mountinfo/mountinfo_linux_test.go:182:40-182:63: `.NewReader(successCase)`
$DIR/internal/mountinfo/mountinfo_linux_test.go:193:3-193:79: `mp = mountInfo{"/dev/1", "/path/to/1", "type1", []string{"flags"}, "1", "1"}`
$DIR/internal/mountinfo/mountinfo_linux_test.go:197:3-197:91: `mp = mountInfo{"/dev/2", "/path/to/2", "type2", []string{"flags", "1", "2=3"}, "2", "2"}`
$DIR/internal/mountinfo/mountinfo_linux_test.go:209:37-209:51: `.NewReader(ec)`
$DIR/internal/pubsub/pubsub_test.go:32:14-32:51: `.Subscribe(MaskAll, ch1, doneCh, nil)`
$DIR/internal/pubsub/pubsub_test.go:35:14-35:51: `.Subscribe(MaskAll, ch2, doneCh, nil)`
$DIR/internal/pubsub/pubsub_test.go:38:2-38:11: `ps.Lock()`
$DIR/internal/pubsub/pubsub_test.go:38:4-38:11: `.Lock()`
$DIR/internal/pubsub/pubsub_test.go:39:10-39:19: `.Unlock()`
$DIR/internal/pubsub/pubsub_test.go:41:28-41:52: `.NumSubscribers(MaskAll)`
$DIR/internal/pubsub/pubsub_test.go:41:63-41:77: `.Subscribers()`
$DIR/internal/pubsub/pubsub_test.go:52:14-52:51: `.Subscribe(Mask(1), ch1, doneCh, nil)`
$DIR/internal/pubsub/pubsub_test.go:55:14-55:51: `.Subscribe(Mask(2), ch2, doneCh, nil)`
$DIR/internal/pubsub/pubsub_test.go:58:2-58:11: `ps.Lock()`
$DIR/internal/pubsub/pubsub_test.go:58:4-58:11: `.Lock()`
$DIR/internal/pubsub/pubsub_test.go:59:10-59:19: `.Unlock()`
$DIR/internal/pubsub/pubsub_test.go:64:30-64:54: `.NumSubscribers(Mask(1))`
$DIR/internal/pubsub/pubsub_test.go:67:30-67:54: `.NumSubscribers(Mask(2))`
$DIR/internal/pubsub/pubsub_test.go:70:30-70:56: `.NumSubscribers(Mask(1|2))`
$DIR/internal/pubsub/pubsub_test.go:73:30-73:54: `.NumSubscribers(MaskAll)`
$DIR/internal/pubsub/pubsub_test.go:76:30-76:54: `.NumSubscribers(Mask(4))`
$DIR/internal/pubsub/pubsub_test.go:88:14-88:51: `.Subscribe(MaskAll, ch1, doneCh, nil)`
$DIR/internal/pubsub/pubsub_test.go:91:14-91:51: `.Subscribe(MaskAll, ch2, doneCh, nil)`
$DIR/internal/pubsub/pubsub_test.go:94:14-94:51: `.Subscribe(MaskAll, ch3, doneCh, nil)`
$DIR/internal/pubsub/pubsub_test.go:105:14-105:52: `.Subscribe(MaskAll, ch1, doneCh1, nil)`
$DIR/internal/pubsub/pubsub_test.go:108:14-108:52: `.Subscribe(MaskAll, ch2, doneCh2, nil)`
$DIR/internal/pubsub/pubsub_test.go:112:2-112:16: `close(doneCh1)`
$DIR/internal/pubsub/pubsub_test.go:114:2-114:36: `time.Sleep(100 * time.Millisecond)`
$DIR/internal/pubsub/pubsub_test.go:114:6-114:36: `.Sleep(100 * time.Millisecond)`
$DIR/internal/pubsub/pubsub_test.go:115:2-115:11: `ps.Lock()`
$DIR/internal/pubsub/pubsub_test.go:115:4-115:11: `.Lock()`
$DIR/internal/pubsub/pubsub_test.go:119:2-119:13: `ps.Unlock()`
$DIR/internal/pubsub/pubsub_test.go:119:4-119:13: `.Unlock()`
$DIR/internal/pubsub/pubsub_test.go:134:14-134:90: `.Subscribe(MaskAll, ch1, doneCh1, func(entry Maskable) bool { return true })`
$DIR/internal/pubsub/pubsub_test.go:138:2-138:17: `ps.Publish(val)`
$DIR/internal/pubsub/pubsub_test.go:138:4-138:17: `.Publish(val)`
$DIR/internal/pubsub/pubsub_test.go:151:14-151:89: `.Subscribe(MaskAll, ch1, doneCh, func(entry Maskable) bool { return true })`
$DIR/internal/pubsub/pubsub_test.go:154:14-154:89: `.Subscribe(MaskAll, ch2, doneCh, func(entry Maskable) bool { return true })`
$DIR/internal/pubsub/pubsub_test.go:158:2-158:17: `ps.Publish(val)`
$DIR/internal/pubsub/pubsub_test.go:158:4-158:17: `.Publish(val)`
$DIR/internal/pubsub/pubsub_test.go:175:14-175:89: `.Subscribe(Mask(1), ch1, doneCh, func(entry Maskable) bool { return true })`
$DIR/internal/pubsub/pubsub_test.go:179:14-179:91: `.Subscribe(Mask(1|2), ch2, doneCh, func(entry Maskable) bool { return true })`
$DIR/internal/pubsub/pubsub_test.go:183:14-183:89: `.Subscribe(Mask(2), ch3, doneCh, func(entry Maskable) bool { return true })`
$DIR/internal/pubsub/pubsub_test.go:187:2-187:17: `ps.Publish(val)`
$DIR/internal/pubsub/pubsub_test.go:187:4-187:17: `.Publish(val)`
$DIR/internal/rest/client_test.go:47:16-47:33: `.New("something")`
$DIR/internal/rest/client_test.go:52:3-68:5: `t.Run(tt.name, func(t *testing.T) {
			// Wrap error
			n := &NetworkError{
				Err: tt.err,
			}
			//nolint:gocritic
			if tt.target == nil {
				var netErrInterface net.Error
				if errors.As(n, &netErrInterface) != tt.want {
					t.Errorf("errors.As(n, &tt.target) != tt.want, n: %#v, target: %#v, want:%v, got: %v", n, tt.target, tt.want, !tt.want)
				}
			} else {
				if errors.As(n, &tt.target) != tt.want {
					t.Errorf("errors.As(n, &tt.target) != tt.want, n: %#v, target: %#v, want:%v, got: %v", n, tt.target, tt.want, !tt.want)
				}
			}
		})`
$DIR/internal/rest/client_test.go:52:4-68:5: `.Run(tt.name, func(t *testing.T) {
			// Wrap error
			n := &NetworkError{
				Err: tt.err,
			}
			//nolint:gocritic
			if tt.target == nil {
				var netErrInterface net.Error
				if errors.As(n, &netErrInterface) != tt.want {
					t.Errorf("errors.As(n, &tt.target) != tt.want, n: %#v, target: %#v, want:%v, got: %v", n, tt.target, tt.want, !tt.want)
				}
			} else {
				if errors.As(n, &tt.target) != tt.want {
					t.Errorf("errors.As(n, &tt.target) != tt.want, n: %#v, target: %#v, want:%v, got: %v", n, tt.target, tt.want, !tt.want)
				}
			}
		})`
$DIR/internal/rest/client_test.go:60:14-60:38: `.As(n, &netErrInterface)`
$DIR/internal/rest/client_test.go:64:14-64:32: `.As(n, &tt.target)`
$DIR/internal/s3select/csv/reader_contrib_test.go:49:23-49:63: `.NopCloser(strings.NewReader(c.content))`
$DIR/internal/s3select/csv/reader_contrib_test.go:49:41-49:62: `.NewReader(c.content)`
$DIR/internal/s3select/csv/reader_contrib_test.go:61:4-61:32: `record, err = r.Read(record)`
$DIR/internal/s3select/csv/reader_contrib_test.go:61:19-61:32: `.Read(record)`
$DIR/internal/s3select/csv/reader_contrib_test.go:71:4-71:34: `record.WriteCSV(&result, opts)`
$DIR/internal/s3select/csv/reader_contrib_test.go:71:10-71:34: `.WriteCSV(&result, opts)`
$DIR/internal/s3select/csv/reader_contrib_test.go:72:4-72:37: `result.Truncate(result.Len() - 1)`
$DIR/internal/s3select/csv/reader_contrib_test.go:72:10-72:37: `.Truncate(result.Len() - 1)`
$DIR/internal/s3select/csv/reader_contrib_test.go:72:26-72:32: `.Len()`
$DIR/internal/s3select/csv/reader_contrib_test.go:73:4-73:41: `result.WriteString(c.recordDelimiter)`
$DIR/internal/s3select/csv/reader_contrib_test.go:73:10-73:41: `.WriteString(c.recordDelimiter)`
$DIR/internal/s3select/csv/reader_contrib_test.go:80:12-80:21: `.String()`
$DIR/internal/s3select/csv/reader_contrib_test.go:221:3-276:5: `t.Run(c.file, func(t *testing.T) {
			var err error
			var record sql.Record
			var result bytes.Buffer
			input := openTestFile(t, c.file)
			// Get above block size.
			input = append(input, input...)
			args := ReaderArgs{
				FileHeaderInfo:             use,
				RecordDelimiter:            c.recordDelimiter,
				FieldDelimiter:             c.fieldDelimiter,
				QuoteCharacter:             defaultQuoteCharacter,
				QuoteEscapeCharacter:       defaultQuoteEscapeCharacter,
				CommentCharacter:           defaultCommentCharacter,
				AllowQuotedRecordDelimiter: false,
				unmarshaled:                true,
			}
			if !c.header {
				args.FileHeaderInfo = none
			}
			r, _ := NewReader(io.NopCloser(bytes.NewReader(input)), &args)
			fields := 0
			for {
				record, err = r.Read(record)
				if err != nil {
					break
				}
				if fields < 10 {
					opts := sql.WriteCSVOpts{
						FieldDelimiter: ',',
						Quote:          '"',
						QuoteEscape:    '"',
						AlwaysQuote:    false,
					}
					// Write with fixed delimiters, newlines.
					err := record.WriteCSV(&result, opts)
					if err != nil {
						t.Error(err)
					}
				}
				fields++
			}
			r.Close()
			if err != io.EOF {
				t.Fatalf("Case %d failed with %s", i, err)
			}
			if !reflect.DeepEqual(r.columnNames, c.wantColumns) {
				t.Errorf("Case %d failed: expected %#v, got result %#v", i, c.wantColumns, r.columnNames)
			}
			if result.String() != c.wantTenFields {
				t.Errorf("Case %d failed: expected %v, got result %v", i, c.wantTenFields, result.String())
			}
			if fields != c.totalFields {
				t.Errorf("Case %d failed: expected %v results %v", i, c.totalFields, fields)
			}
		})`
$DIR/internal/s3select/csv/reader_contrib_test.go:221:4-276:5: `.Run(c.file, func(t *testing.T) {
			var err error
			var record sql.Record
			var result bytes.Buffer
			input := openTestFile(t, c.file)
			// Get above block size.
			input = append(input, input...)
			args := ReaderArgs{
				FileHeaderInfo:             use,
				RecordDelimiter:            c.recordDelimiter,
				FieldDelimiter:             c.fieldDelimiter,
				QuoteCharacter:             defaultQuoteCharacter,
				QuoteEscapeCharacter:       defaultQuoteEscapeCharacter,
				CommentCharacter:           defaultCommentCharacter,
				AllowQuotedRecordDelimiter: false,
				unmarshaled:                true,
			}
			if !c.header {
				args.FileHeaderInfo = none
			}
			r, _ := NewReader(io.NopCloser(bytes.NewReader(input)), &args)
			fields := 0
			for {
				record, err = r.Read(record)
				if err != nil {
					break
				}
				if fields < 10 {
					opts := sql.WriteCSVOpts{
						FieldDelimiter: ',',
						Quote:          '"',
						QuoteEscape:    '"',
						AlwaysQuote:    false,
					}
					// Write with fixed delimiters, newlines.
					err := record.WriteCSV(&result, opts)
					if err != nil {
						t.Error(err)
					}
				}
				fields++
			}
			r.Close()
			if err != io.EOF {
				t.Fatalf("Case %d failed with %s", i, err)
			}
			if !reflect.DeepEqual(r.columnNames, c.wantColumns) {
				t.Errorf("Case %d failed: expected %#v, got result %#v", i, c.wantColumns, r.columnNames)
			}
			if result.String() != c.wantTenFields {
				t.Errorf("Case %d failed: expected %v, got result %v", i, c.wantTenFields, result.String())
			}
			if fields != c.totalFields {
				t.Errorf("Case %d failed: expected %v results %v", i, c.totalFields, fields)
			}
		})`
$DIR/internal/s3select/csv/reader_contrib_test.go:227:4-227:35: `input = append(input, input...)`
$DIR/internal/s3select/csv/reader_contrib_test.go:239:5-239:31: `args.FileHeaderInfo = none`
$DIR/internal/s3select/csv/reader_contrib_test.go:241:24-241:58: `.NopCloser(bytes.NewReader(input))`
$DIR/internal/s3select/csv/reader_contrib_test.go:241:40-241:57: `.NewReader(input)`
$DIR/internal/s3select/csv/reader_contrib_test.go:244:5-244:33: `record, err = r.Read(record)`
$DIR/internal/s3select/csv/reader_contrib_test.go:244:20-244:33: `.Read(record)`
$DIR/internal/s3select/csv/reader_contrib_test.go:256:19-256:43: `.WriteCSV(&result, opts)`
$DIR/internal/s3select/csv/reader_contrib_test.go:261:5-261:13: `fields++`
$DIR/internal/s3select/csv/reader_contrib_test.go:267:15-267:55: `.DeepEqual(r.columnNames, c.wantColumns)`
$DIR/internal/s3select/csv/reader_contrib_test.go:270:13-270:22: `.String()`
$DIR/internal/s3select/csv/reader_contrib_test.go:289:21-289:51: `.New("unable to read file :(")`
$DIR/internal/s3select/csv/reader_contrib_test.go:436:3-489:5: `t.Run(c.file, func(t *testing.T) {
			var err error
			var record sql.Record
			var result bytes.Buffer
			input := openTestFile(t, c.file)
			args := ReaderArgs{
				FileHeaderInfo:             use,
				RecordDelimiter:            c.recordDelimiter,
				FieldDelimiter:             c.fieldDelimiter,
				QuoteCharacter:             defaultQuoteCharacter,
				QuoteEscapeCharacter:       defaultQuoteEscapeCharacter,
				CommentCharacter:           defaultCommentCharacter,
				AllowQuotedRecordDelimiter: false,
				unmarshaled:                true,
			}
			if !c.header {
				args.FileHeaderInfo = none
			}
			inr := io.Reader(bytes.NewReader(input))
			if c.sendErr != nil {
				inr = io.MultiReader(inr, errReader{c.sendErr})
			}
			r, _ := NewReader(io.NopCloser(inr), &args)
			fields := 0
			for {
				record, err = r.Read(record)
				if err != nil {
					break
				}

				opts := sql.WriteCSVOpts{
					FieldDelimiter: ',',
					Quote:          '"',
					QuoteEscape:    '"',
					AlwaysQuote:    false,
				}
				// Write with fixed delimiters, newlines.
				err := record.WriteCSV(&result, opts)
				if err != nil {
					t.Error(err)
				}
				fields++
			}
			r.Close()
			if err != c.wantErr {
				t.Fatalf("Case %d failed with %s", i, err)
			}
			if !reflect.DeepEqual(r.columnNames, c.wantColumns) {
				t.Errorf("Case %d failed: expected \n%#v, got result \n%#v", i, c.wantColumns, r.columnNames)
			}
			if result.String() != c.wantFields {
				t.Errorf("Case %d failed: expected \n%v\nGot result \n%v", i, c.wantFields, result.String())
			}
		})`
$DIR/internal/s3select/csv/reader_contrib_test.go:436:4-489:5: `.Run(c.file, func(t *testing.T) {
			var err error
			var record sql.Record
			var result bytes.Buffer
			input := openTestFile(t, c.file)
			args := ReaderArgs{
				FileHeaderInfo:             use,
				RecordDelimiter:            c.recordDelimiter,
				FieldDelimiter:             c.fieldDelimiter,
				QuoteCharacter:             defaultQuoteCharacter,
				QuoteEscapeCharacter:       defaultQuoteEscapeCharacter,
				CommentCharacter:           defaultCommentCharacter,
				AllowQuotedRecordDelimiter: false,
				unmarshaled:                true,
			}
			if !c.header {
				args.FileHeaderInfo = none
			}
			inr := io.Reader(bytes.NewReader(input))
			if c.sendErr != nil {
				inr = io.MultiReader(inr, errReader{c.sendErr})
			}
			r, _ := NewReader(io.NopCloser(inr), &args)
			fields := 0
			for {
				record, err = r.Read(record)
				if err != nil {
					break
				}

				opts := sql.WriteCSVOpts{
					FieldDelimiter: ',',
					Quote:          '"',
					QuoteEscape:    '"',
					AlwaysQuote:    false,
				}
				// Write with fixed delimiters, newlines.
				err := record.WriteCSV(&result, opts)
				if err != nil {
					t.Error(err)
				}
				fields++
			}
			r.Close()
			if err != c.wantErr {
				t.Fatalf("Case %d failed with %s", i, err)
			}
			if !reflect.DeepEqual(r.columnNames, c.wantColumns) {
				t.Errorf("Case %d failed: expected \n%#v, got result \n%#v", i, c.wantColumns, r.columnNames)
			}
			if result.String() != c.wantFields {
				t.Errorf("Case %d failed: expected \n%v\nGot result \n%v", i, c.wantFields, result.String())
			}
		})`
$DIR/internal/s3select/csv/reader_contrib_test.go:452:5-452:31: `args.FileHeaderInfo = none`
$DIR/internal/s3select/csv/reader_contrib_test.go:454:13-454:44: `.Reader(bytes.NewReader(input))`
$DIR/internal/s3select/csv/reader_contrib_test.go:454:26-454:43: `.NewReader(input)`
$DIR/internal/s3select/csv/reader_contrib_test.go:456:5-456:52: `inr = io.MultiReader(inr, errReader{c.sendErr})`
$DIR/internal/s3select/csv/reader_contrib_test.go:456:13-456:52: `.MultiReader(inr, errReader{c.sendErr})`
$DIR/internal/s3select/csv/reader_contrib_test.go:458:24-458:39: `.NopCloser(inr)`
$DIR/internal/s3select/csv/reader_contrib_test.go:461:5-461:33: `record, err = r.Read(record)`
$DIR/internal/s3select/csv/reader_contrib_test.go:461:20-461:33: `.Read(record)`
$DIR/internal/s3select/csv/reader_contrib_test.go:473:18-473:42: `.WriteCSV(&result, opts)`
$DIR/internal/s3select/csv/reader_contrib_test.go:477:5-477:13: `fields++`
$DIR/internal/s3select/csv/reader_contrib_test.go:483:15-483:55: `.DeepEqual(r.columnNames, c.wantColumns)`
$DIR/internal/s3select/csv/reader_contrib_test.go:486:13-486:22: `.String()`
$DIR/internal/s3select/json/preader_test.go:31:18-31:38: `.ReadDir("testdata")`
$DIR/internal/s3select/json/preader_test.go:36:3-53:5: `t.Run(file.Name(), func(t *testing.T) {
			f, err := os.Open(filepath.Join("testdata", file.Name()))
			if err != nil {
				t.Fatal(err)
			}
			r := NewPReader(f, &ReaderArgs{})
			var record sql.Record
			for {
				record, err = r.Read(record)
				if err != nil {
					break
				}
			}
			r.Close()
			if err != io.EOF {
				t.Fatalf("Reading failed with %s, %s", err, file.Name())
			}
		})`
$DIR/internal/s3select/json/preader_test.go:36:4-53:5: `.Run(file.Name(), func(t *testing.T) {
			f, err := os.Open(filepath.Join("testdata", file.Name()))
			if err != nil {
				t.Fatal(err)
			}
			r := NewPReader(f, &ReaderArgs{})
			var record sql.Record
			for {
				record, err = r.Read(record)
				if err != nil {
					break
				}
			}
			r.Close()
			if err != io.EOF {
				t.Fatalf("Reading failed with %s, %s", err, file.Name())
			}
		})`
$DIR/internal/s3select/json/preader_test.go:36:13-36:20: `.Name()`
$DIR/internal/s3select/json/preader_test.go:37:16-37:61: `.Open(filepath.Join("testdata", file.Name()))`
$DIR/internal/s3select/json/preader_test.go:37:30-37:60: `.Join("testdata", file.Name())`
$DIR/internal/s3select/json/preader_test.go:37:52-37:59: `.Name()`
$DIR/internal/s3select/json/preader_test.go:44:5-44:33: `record, err = r.Read(record)`
$DIR/internal/s3select/json/preader_test.go:44:20-44:33: `.Read(record)`
$DIR/internal/s3select/json/preader_test.go:55:3-72:5: `t.Run(file.Name()+"-close", func(t *testing.T) {
			f, err := os.Open(filepath.Join("testdata", file.Name()))
			if err != nil {
				t.Fatal(err)
			}
			r := NewPReader(f, &ReaderArgs{})
			r.Close()
			var record sql.Record
			for {
				record, err = r.Read(record)
				if err != nil {
					break
				}
			}
			if err != io.EOF {
				t.Fatalf("Reading failed with %s, %s", err, file.Name())
			}
		})`
$DIR/internal/s3select/json/preader_test.go:55:4-72:5: `.Run(file.Name()+"-close", func(t *testing.T) {
			f, err := os.Open(filepath.Join("testdata", file.Name()))
			if err != nil {
				t.Fatal(err)
			}
			r := NewPReader(f, &ReaderArgs{})
			r.Close()
			var record sql.Record
			for {
				record, err = r.Read(record)
				if err != nil {
					break
				}
			}
			if err != io.EOF {
				t.Fatalf("Reading failed with %s, %s", err, file.Name())
			}
		})`
$DIR/internal/s3select/json/preader_test.go:55:13-55:20: `.Name()`
$DIR/internal/s3select/json/preader_test.go:56:16-56:61: `.Open(filepath.Join("testdata", file.Name()))`
$DIR/internal/s3select/json/preader_test.go:56:30-56:60: `.Join("testdata", file.Name())`
$DIR/internal/s3select/json/preader_test.go:56:52-56:59: `.Name()`
$DIR/internal/s3select/json/preader_test.go:64:5-64:33: `record, err = r.Read(record)`
$DIR/internal/s3select/json/preader_test.go:64:20-64:33: `.Read(record)`
$DIR/internal/s3select/json/reader_test.go:31:18-31:38: `.ReadDir("testdata")`
$DIR/internal/s3select/json/reader_test.go:36:3-53:5: `t.Run(file.Name(), func(t *testing.T) {
			f, err := os.Open(filepath.Join("testdata", file.Name()))
			if err != nil {
				t.Fatal(err)
			}
			r := NewReader(f, &ReaderArgs{})
			var record sql.Record
			for {
				record, err = r.Read(record)
				if err != nil {
					break
				}
			}
			r.Close()
			if err != io.EOF {
				t.Fatalf("Reading failed with %s, %s", err, file.Name())
			}
		})`
$DIR/internal/s3select/json/reader_test.go:36:4-53:5: `.Run(file.Name(), func(t *testing.T) {
			f, err := os.Open(filepath.Join("testdata", file.Name()))
			if err != nil {
				t.Fatal(err)
			}
			r := NewReader(f, &ReaderArgs{})
			var record sql.Record
			for {
				record, err = r.Read(record)
				if err != nil {
					break
				}
			}
			r.Close()
			if err != io.EOF {
				t.Fatalf("Reading failed with %s, %s", err, file.Name())
			}
		})`
$DIR/internal/s3select/json/reader_test.go:36:13-36:20: `.Name()`
$DIR/internal/s3select/json/reader_test.go:37:16-37:61: `.Open(filepath.Join("testdata", file.Name()))`
$DIR/internal/s3select/json/reader_test.go:37:30-37:60: `.Join("testdata", file.Name())`
$DIR/internal/s3select/json/reader_test.go:37:52-37:59: `.Name()`
$DIR/internal/s3select/json/reader_test.go:44:5-44:33: `record, err = r.Read(record)`
$DIR/internal/s3select/json/reader_test.go:44:20-44:33: `.Read(record)`
$DIR/internal/s3select/json/reader_test.go:55:3-72:5: `t.Run(file.Name()+"-close", func(t *testing.T) {
			f, err := os.Open(filepath.Join("testdata", file.Name()))
			if err != nil {
				t.Fatal(err)
			}
			r := NewReader(f, &ReaderArgs{})
			r.Close()
			var record sql.Record
			for {
				record, err = r.Read(record)
				if err != nil {
					break
				}
			}
			if err != io.EOF {
				t.Fatalf("Reading failed with %s, %s", err, file.Name())
			}
		})`
$DIR/internal/s3select/json/reader_test.go:55:4-72:5: `.Run(file.Name()+"-close", func(t *testing.T) {
			f, err := os.Open(filepath.Join("testdata", file.Name()))
			if err != nil {
				t.Fatal(err)
			}
			r := NewReader(f, &ReaderArgs{})
			r.Close()
			var record sql.Record
			for {
				record, err = r.Read(record)
				if err != nil {
					break
				}
			}
			if err != io.EOF {
				t.Fatalf("Reading failed with %s, %s", err, file.Name())
			}
		})`
$DIR/internal/s3select/json/reader_test.go:55:13-55:20: `.Name()`
$DIR/internal/s3select/json/reader_test.go:56:16-56:61: `.Open(filepath.Join("testdata", file.Name()))`
$DIR/internal/s3select/json/reader_test.go:56:30-56:60: `.Join("testdata", file.Name())`
$DIR/internal/s3select/json/reader_test.go:56:52-56:59: `.Name()`
$DIR/internal/s3select/json/reader_test.go:64:5-64:33: `record, err = r.Read(record)`
$DIR/internal/s3select/json/reader_test.go:64:20-64:33: `.Read(record)`
$DIR/internal/s3select/select_test.go:619:3-670:5: `t.Run(testCase.name, func(t *testing.T) {
			// Hack cpuid to the CPU doesn't appear to support AVX2.
			// Restore whatever happens.
			if cpuid.CPU.Supports(cpuid.AVX2) {
				cpuid.CPU.Disable(cpuid.AVX2)
				defer cpuid.CPU.Enable(cpuid.AVX2)
			}
			if simdjson.SupportedCPU() {
				t.Fatal("setup error: expected cpu to be unsupported")
			}
			testReq := testCase.requestXML
			if len(testReq) == 0 {
				var escaped bytes.Buffer
				xml.EscapeText(&escaped, []byte(testCase.query))
				testReq = []byte(fmt.Sprintf(defRequest, escaped.String()))
			}
			s3Select, err := NewS3Select(bytes.NewReader(testReq))
			if err != nil {
				t.Fatal(err)
			}

			in := input
			if len(testCase.withJSON) > 0 {
				in = testCase.withJSON
			}
			if err = s3Select.Open(newStringRSC(in)); err != nil {
				t.Fatal(err)
			}

			w := &testResponseWriter{}
			s3Select.Evaluate(w)
			s3Select.Close()
			resp := http.Response{
				StatusCode:    http.StatusOK,
				Body:          io.NopCloser(bytes.NewReader(w.response)),
				ContentLength: int64(len(w.response)),
			}
			res, err := minio.NewSelectResults(&resp, "testbucket")
			if err != nil {
				t.Error(err)
				return
			}
			got, err := io.ReadAll(res)
			if err != nil {
				t.Error(err)
				return
			}
			gotS := strings.TrimSpace(string(got))
			if !reflect.DeepEqual(gotS, testCase.wantResult) {
				t.Errorf("received response does not match with expected reply. Query: %s\ngot: %s\nwant:%s", testCase.query, gotS, testCase.wantResult)
			}
		})`
$DIR/internal/s3select/select_test.go:619:4-670:5: `.Run(testCase.name, func(t *testing.T) {
			// Hack cpuid to the CPU doesn't appear to support AVX2.
			// Restore whatever happens.
			if cpuid.CPU.Supports(cpuid.AVX2) {
				cpuid.CPU.Disable(cpuid.AVX2)
				defer cpuid.CPU.Enable(cpuid.AVX2)
			}
			if simdjson.SupportedCPU() {
				t.Fatal("setup error: expected cpu to be unsupported")
			}
			testReq := testCase.requestXML
			if len(testReq) == 0 {
				var escaped bytes.Buffer
				xml.EscapeText(&escaped, []byte(testCase.query))
				testReq = []byte(fmt.Sprintf(defRequest, escaped.String()))
			}
			s3Select, err := NewS3Select(bytes.NewReader(testReq))
			if err != nil {
				t.Fatal(err)
			}

			in := input
			if len(testCase.withJSON) > 0 {
				in = testCase.withJSON
			}
			if err = s3Select.Open(newStringRSC(in)); err != nil {
				t.Fatal(err)
			}

			w := &testResponseWriter{}
			s3Select.Evaluate(w)
			s3Select.Close()
			resp := http.Response{
				StatusCode:    http.StatusOK,
				Body:          io.NopCloser(bytes.NewReader(w.response)),
				ContentLength: int64(len(w.response)),
			}
			res, err := minio.NewSelectResults(&resp, "testbucket")
			if err != nil {
				t.Error(err)
				return
			}
			got, err := io.ReadAll(res)
			if err != nil {
				t.Error(err)
				return
			}
			gotS := strings.TrimSpace(string(got))
			if !reflect.DeepEqual(gotS, testCase.wantResult) {
				t.Errorf("received response does not match with expected reply. Query: %s\ngot: %s\nwant:%s", testCase.query, gotS, testCase.wantResult)
			}
		})`
$DIR/internal/s3select/select_test.go:622:12-622:37: `.CPU.Supports(cpuid.AVX2)`
$DIR/internal/s3select/select_test.go:623:5-623:34: `cpuid.CPU.Disable(cpuid.AVX2)`
$DIR/internal/s3select/select_test.go:623:10-623:34: `.CPU.Disable(cpuid.AVX2)`
$DIR/internal/s3select/select_test.go:624:16-624:39: `.CPU.Enable(cpuid.AVX2)`
$DIR/internal/s3select/select_test.go:626:15-626:30: `.SupportedCPU()`
$DIR/internal/s3select/select_test.go:632:5-632:53: `xml.EscapeText(&escaped, []byte(testCase.query))`
$DIR/internal/s3select/select_test.go:632:8-632:53: `.EscapeText(&escaped, []byte(testCase.query))`
$DIR/internal/s3select/select_test.go:633:5-633:64: `testReq = []byte(fmt.Sprintf(defRequest, escaped.String()))`
$DIR/internal/s3select/select_test.go:633:25-633:63: `.Sprintf(defRequest, escaped.String())`
$DIR/internal/s3select/select_test.go:633:53-633:62: `.String()`
$DIR/internal/s3select/select_test.go:635:38-635:57: `.NewReader(testReq)`
$DIR/internal/s3select/select_test.go:642:5-642:27: `in = testCase.withJSON`
$DIR/internal/s3select/select_test.go:644:21-644:44: `.Open(newStringRSC(in))`
$DIR/internal/s3select/select_test.go:649:4-649:24: `s3Select.Evaluate(w)`
$DIR/internal/s3select/select_test.go:649:12-649:24: `.Evaluate(w)`
$DIR/internal/s3select/select_test.go:653:22-653:61: `.NopCloser(bytes.NewReader(w.response))`
$DIR/internal/s3select/select_test.go:653:38-653:60: `.NewReader(w.response)`
$DIR/internal/s3select/select_test.go:656:21-656:59: `.NewSelectResults(&resp, "testbucket")`
$DIR/internal/s3select/select_test.go:661:18-661:31: `.ReadAll(res)`
$DIR/internal/s3select/select_test.go:666:19-666:42: `.TrimSpace(string(got))`
$DIR/internal/s3select/select_test.go:667:15-667:52: `.DeepEqual(gotS, testCase.wantResult)`
$DIR/internal/s3select/select_test.go:671:3-716:5: `t.Run("simd-"+testCase.name, func(t *testing.T) {
			if !simdjson.SupportedCPU() {
				t.Skip("No CPU support")
			}
			testReq := testCase.requestXML
			if len(testReq) == 0 {
				var escaped bytes.Buffer
				xml.EscapeText(&escaped, []byte(testCase.query))
				testReq = []byte(fmt.Sprintf(defRequest, escaped.String()))
			}
			s3Select, err := NewS3Select(bytes.NewReader(testReq))
			if err != nil {
				t.Fatal(err)
			}

			in := input
			if len(testCase.withJSON) > 0 {
				in = testCase.withJSON
			}
			if err = s3Select.Open(newStringRSC(in)); err != nil {
				t.Fatal(err)
			}

			w := &testResponseWriter{}
			s3Select.Evaluate(w)
			s3Select.Close()
			resp := http.Response{
				StatusCode:    http.StatusOK,
				Body:          io.NopCloser(bytes.NewReader(w.response)),
				ContentLength: int64(len(w.response)),
			}
			res, err := minio.NewSelectResults(&resp, "testbucket")
			if err != nil {
				t.Error(err)
				return
			}
			got, err := io.ReadAll(res)
			if err != nil {
				t.Error(err)
				return
			}
			gotS := strings.TrimSpace(string(got))
			if !reflect.DeepEqual(gotS, testCase.wantResult) {
				t.Errorf("received response does not match with expected reply. Query: %s\ngot: %s\nwant:%s", testCase.query, gotS, testCase.wantResult)
			}
		})`
$DIR/internal/s3select/select_test.go:671:4-716:5: `.Run("simd-"+testCase.name, func(t *testing.T) {
			if !simdjson.SupportedCPU() {
				t.Skip("No CPU support")
			}
			testReq := testCase.requestXML
			if len(testReq) == 0 {
				var escaped bytes.Buffer
				xml.EscapeText(&escaped, []byte(testCase.query))
				testReq = []byte(fmt.Sprintf(defRequest, escaped.String()))
			}
			s3Select, err := NewS3Select(bytes.NewReader(testReq))
			if err != nil {
				t.Fatal(err)
			}

			in := input
			if len(testCase.withJSON) > 0 {
				in = testCase.withJSON
			}
			if err = s3Select.Open(newStringRSC(in)); err != nil {
				t.Fatal(err)
			}

			w := &testResponseWriter{}
			s3Select.Evaluate(w)
			s3Select.Close()
			resp := http.Response{
				StatusCode:    http.StatusOK,
				Body:          io.NopCloser(bytes.NewReader(w.response)),
				ContentLength: int64(len(w.response)),
			}
			res, err := minio.NewSelectResults(&resp, "testbucket")
			if err != nil {
				t.Error(err)
				return
			}
			got, err := io.ReadAll(res)
			if err != nil {
				t.Error(err)
				return
			}
			gotS := strings.TrimSpace(string(got))
			if !reflect.DeepEqual(gotS, testCase.wantResult) {
				t.Errorf("received response does not match with expected reply. Query: %s\ngot: %s\nwant:%s", testCase.query, gotS, testCase.wantResult)
			}
		})`
$DIR/internal/s3select/select_test.go:672:16-672:31: `.SupportedCPU()`
$DIR/internal/s3select/select_test.go:678:5-678:53: `xml.EscapeText(&escaped, []byte(testCase.query))`
$DIR/internal/s3select/select_test.go:678:8-678:53: `.EscapeText(&escaped, []byte(testCase.query))`
$DIR/internal/s3select/select_test.go:679:5-679:64: `testReq = []byte(fmt.Sprintf(defRequest, escaped.String()))`
$DIR/internal/s3select/select_test.go:679:25-679:63: `.Sprintf(defRequest, escaped.String())`
$DIR/internal/s3select/select_test.go:679:53-679:62: `.String()`
$DIR/internal/s3select/select_test.go:681:38-681:57: `.NewReader(testReq)`
$DIR/internal/s3select/select_test.go:688:5-688:27: `in = testCase.withJSON`
$DIR/internal/s3select/select_test.go:690:21-690:44: `.Open(newStringRSC(in))`
$DIR/internal/s3select/select_test.go:695:4-695:24: `s3Select.Evaluate(w)`
$DIR/internal/s3select/select_test.go:695:12-695:24: `.Evaluate(w)`
$DIR/internal/s3select/select_test.go:699:22-699:61: `.NopCloser(bytes.NewReader(w.response))`
$DIR/internal/s3select/select_test.go:699:38-699:60: `.NewReader(w.response)`
$DIR/internal/s3select/select_test.go:702:21-702:59: `.NewSelectResults(&resp, "testbucket")`
$DIR/internal/s3select/select_test.go:707:18-707:31: `.ReadAll(res)`
$DIR/internal/s3select/select_test.go:712:19-712:42: `.TrimSpace(string(got))`
$DIR/internal/s3select/select_test.go:713:15-713:52: `.DeepEqual(gotS, testCase.wantResult)`
$DIR/internal/s3select/select_test.go:761:3-797:5: `t.Run(testCase.name, func(t *testing.T) {
			testReq := testCase.requestXML
			if len(testReq) == 0 {
				testReq = []byte(fmt.Sprintf(defRequest, testCase.query))
			}
			s3Select, err := NewS3Select(bytes.NewReader(testReq))
			if err != nil {
				t.Fatal(err)
			}

			if err = s3Select.Open(newStringRSC(input)); err != nil {
				t.Fatal(err)
			}

			w := &testResponseWriter{}
			s3Select.Evaluate(w)
			s3Select.Close()
			resp := http.Response{
				StatusCode:    http.StatusOK,
				Body:          io.NopCloser(bytes.NewReader(w.response)),
				ContentLength: int64(len(w.response)),
			}
			res, err := minio.NewSelectResults(&resp, "testbucket")
			if err != nil {
				t.Error(err)
				return
			}
			got, err := io.ReadAll(res)
			if err != nil {
				t.Error(err)
				return
			}
			gotS := strings.TrimSpace(string(got))
			if !reflect.DeepEqual(gotS, testCase.wantResult) {
				t.Errorf("received response does not match with expected reply. Query: %s\ngot: %s\nwant:%s", testCase.query, gotS, testCase.wantResult)
			}
		})`
$DIR/internal/s3select/select_test.go:761:4-797:5: `.Run(testCase.name, func(t *testing.T) {
			testReq := testCase.requestXML
			if len(testReq) == 0 {
				testReq = []byte(fmt.Sprintf(defRequest, testCase.query))
			}
			s3Select, err := NewS3Select(bytes.NewReader(testReq))
			if err != nil {
				t.Fatal(err)
			}

			if err = s3Select.Open(newStringRSC(input)); err != nil {
				t.Fatal(err)
			}

			w := &testResponseWriter{}
			s3Select.Evaluate(w)
			s3Select.Close()
			resp := http.Response{
				StatusCode:    http.StatusOK,
				Body:          io.NopCloser(bytes.NewReader(w.response)),
				ContentLength: int64(len(w.response)),
			}
			res, err := minio.NewSelectResults(&resp, "testbucket")
			if err != nil {
				t.Error(err)
				return
			}
			got, err := io.ReadAll(res)
			if err != nil {
				t.Error(err)
				return
			}
			gotS := strings.TrimSpace(string(got))
			if !reflect.DeepEqual(gotS, testCase.wantResult) {
				t.Errorf("received response does not match with expected reply. Query: %s\ngot: %s\nwant:%s", testCase.query, gotS, testCase.wantResult)
			}
		})`
$DIR/internal/s3select/select_test.go:764:5-764:62: `testReq = []byte(fmt.Sprintf(defRequest, testCase.query))`
$DIR/internal/s3select/select_test.go:764:25-764:61: `.Sprintf(defRequest, testCase.query)`
$DIR/internal/s3select/select_test.go:766:38-766:57: `.NewReader(testReq)`
$DIR/internal/s3select/select_test.go:771:21-771:47: `.Open(newStringRSC(input))`
$DIR/internal/s3select/select_test.go:776:4-776:24: `s3Select.Evaluate(w)`
$DIR/internal/s3select/select_test.go:776:12-776:24: `.Evaluate(w)`
$DIR/internal/s3select/select_test.go:780:22-780:61: `.NopCloser(bytes.NewReader(w.response))`
$DIR/internal/s3select/select_test.go:780:38-780:60: `.NewReader(w.response)`
$DIR/internal/s3select/select_test.go:783:21-783:59: `.NewSelectResults(&resp, "testbucket")`
$DIR/internal/s3select/select_test.go:788:18-788:31: `.ReadAll(res)`
$DIR/internal/s3select/select_test.go:793:19-793:42: `.TrimSpace(string(got))`
$DIR/internal/s3select/select_test.go:794:15-794:52: `.DeepEqual(gotS, testCase.wantResult)`
$DIR/internal/s3select/select_test.go:944:3-980:5: `t.Run(testCase.name, func(t *testing.T) {
			testReq := testCase.requestXML
			if len(testReq) == 0 {
				testReq = []byte(fmt.Sprintf(defRequest, testCase.query))
			}
			s3Select, err := NewS3Select(bytes.NewReader(testReq))
			if err != nil {
				t.Fatal(err)
			}

			if err = s3Select.Open(newBytesRSC(testCase.input)); err != nil {
				t.Fatal(err)
			}

			w := &testResponseWriter{}
			s3Select.Evaluate(w)
			s3Select.Close()
			resp := http.Response{
				StatusCode:    http.StatusOK,
				Body:          io.NopCloser(bytes.NewReader(w.response)),
				ContentLength: int64(len(w.response)),
			}
			res, err := minio.NewSelectResults(&resp, "testbucket")
			if err != nil {
				t.Error(err)
				return
			}
			got, err := io.ReadAll(res)
			if err != nil {
				t.Error(err)
				return
			}
			gotS := strings.TrimSpace(string(got))
			if !reflect.DeepEqual(gotS, testCase.wantResult) {
				t.Errorf("received response does not match with expected reply. Query: %s\ngot: %s\nwant:%s", testCase.query, gotS, testCase.wantResult)
			}
		})`
$DIR/internal/s3select/select_test.go:944:4-980:5: `.Run(testCase.name, func(t *testing.T) {
			testReq := testCase.requestXML
			if len(testReq) == 0 {
				testReq = []byte(fmt.Sprintf(defRequest, testCase.query))
			}
			s3Select, err := NewS3Select(bytes.NewReader(testReq))
			if err != nil {
				t.Fatal(err)
			}

			if err = s3Select.Open(newBytesRSC(testCase.input)); err != nil {
				t.Fatal(err)
			}

			w := &testResponseWriter{}
			s3Select.Evaluate(w)
			s3Select.Close()
			resp := http.Response{
				StatusCode:    http.StatusOK,
				Body:          io.NopCloser(bytes.NewReader(w.response)),
				ContentLength: int64(len(w.response)),
			}
			res, err := minio.NewSelectResults(&resp, "testbucket")
			if err != nil {
				t.Error(err)
				return
			}
			got, err := io.ReadAll(res)
			if err != nil {
				t.Error(err)
				return
			}
			gotS := strings.TrimSpace(string(got))
			if !reflect.DeepEqual(gotS, testCase.wantResult) {
				t.Errorf("received response does not match with expected reply. Query: %s\ngot: %s\nwant:%s", testCase.query, gotS, testCase.wantResult)
			}
		})`
$DIR/internal/s3select/select_test.go:947:5-947:62: `testReq = []byte(fmt.Sprintf(defRequest, testCase.query))`
$DIR/internal/s3select/select_test.go:947:25-947:61: `.Sprintf(defRequest, testCase.query)`
$DIR/internal/s3select/select_test.go:949:38-949:57: `.NewReader(testReq)`
$DIR/internal/s3select/select_test.go:954:21-954:55: `.Open(newBytesRSC(testCase.input))`
$DIR/internal/s3select/select_test.go:959:4-959:24: `s3Select.Evaluate(w)`
$DIR/internal/s3select/select_test.go:959:12-959:24: `.Evaluate(w)`
$DIR/internal/s3select/select_test.go:963:22-963:61: `.NopCloser(bytes.NewReader(w.response))`
$DIR/internal/s3select/select_test.go:963:38-963:60: `.NewReader(w.response)`
$DIR/internal/s3select/select_test.go:966:21-966:59: `.NewSelectResults(&resp, "testbucket")`
$DIR/internal/s3select/select_test.go:971:18-971:31: `.ReadAll(res)`
$DIR/internal/s3select/select_test.go:976:19-976:42: `.TrimSpace(string(got))`
$DIR/internal/s3select/select_test.go:977:15-977:52: `.DeepEqual(gotS, testCase.wantResult)`
$DIR/internal/s3select/select_test.go:1088:3-1124:5: `t.Run(testCase.name, func(t *testing.T) {
			testReq := testCase.requestXML
			if len(testReq) == 0 {
				testReq = []byte(fmt.Sprintf(defRequest, testCase.query))
			}
			s3Select, err := NewS3Select(bytes.NewReader(testReq))
			if err != nil {
				t.Fatal(err)
			}

			if err = s3Select.Open(newStringRSC(input)); err != nil {
				t.Fatal(err)
			}

			w := &testResponseWriter{}
			s3Select.Evaluate(w)
			s3Select.Close()
			resp := http.Response{
				StatusCode:    http.StatusOK,
				Body:          io.NopCloser(bytes.NewReader(w.response)),
				ContentLength: int64(len(w.response)),
			}
			res, err := minio.NewSelectResults(&resp, "testbucket")
			if err != nil {
				t.Error(err)
				return
			}
			got, err := io.ReadAll(res)
			if err != nil {
				t.Error(err)
				return
			}
			gotS := strings.TrimSpace(string(got))
			if gotS != testCase.wantResult {
				t.Errorf("received response does not match with expected reply.\nQuery: %s\n=====\ngot: %s\n=====\nwant: %s\n=====\n", testCase.query, gotS, testCase.wantResult)
			}
		})`
$DIR/internal/s3select/select_test.go:1088:4-1124:5: `.Run(testCase.name, func(t *testing.T) {
			testReq := testCase.requestXML
			if len(testReq) == 0 {
				testReq = []byte(fmt.Sprintf(defRequest, testCase.query))
			}
			s3Select, err := NewS3Select(bytes.NewReader(testReq))
			if err != nil {
				t.Fatal(err)
			}

			if err = s3Select.Open(newStringRSC(input)); err != nil {
				t.Fatal(err)
			}

			w := &testResponseWriter{}
			s3Select.Evaluate(w)
			s3Select.Close()
			resp := http.Response{
				StatusCode:    http.StatusOK,
				Body:          io.NopCloser(bytes.NewReader(w.response)),
				ContentLength: int64(len(w.response)),
			}
			res, err := minio.NewSelectResults(&resp, "testbucket")
			if err != nil {
				t.Error(err)
				return
			}
			got, err := io.ReadAll(res)
			if err != nil {
				t.Error(err)
				return
			}
			gotS := strings.TrimSpace(string(got))
			if gotS != testCase.wantResult {
				t.Errorf("received response does not match with expected reply.\nQuery: %s\n=====\ngot: %s\n=====\nwant: %s\n=====\n", testCase.query, gotS, testCase.wantResult)
			}
		})`
$DIR/internal/s3select/select_test.go:1091:5-1091:62: `testReq = []byte(fmt.Sprintf(defRequest, testCase.query))`
$DIR/internal/s3select/select_test.go:1091:25-1091:61: `.Sprintf(defRequest, testCase.query)`
$DIR/internal/s3select/select_test.go:1093:38-1093:57: `.NewReader(testReq)`
$DIR/internal/s3select/select_test.go:1098:21-1098:47: `.Open(newStringRSC(input))`
$DIR/internal/s3select/select_test.go:1103:4-1103:24: `s3Select.Evaluate(w)`
$DIR/internal/s3select/select_test.go:1103:12-1103:24: `.Evaluate(w)`
$DIR/internal/s3select/select_test.go:1107:22-1107:61: `.NopCloser(bytes.NewReader(w.response))`
$DIR/internal/s3select/select_test.go:1107:38-1107:60: `.NewReader(w.response)`
$DIR/internal/s3select/select_test.go:1110:21-1110:59: `.NewSelectResults(&resp, "testbucket")`
$DIR/internal/s3select/select_test.go:1115:18-1115:31: `.ReadAll(res)`
$DIR/internal/s3select/select_test.go:1120:19-1120:42: `.TrimSpace(string(got))`
$DIR/internal/s3select/select_test.go:1236:3-1269:5: `t.Run(fmt.Sprint(i), func(t *testing.T) {
			s3Select, err := NewS3Select(bytes.NewReader(testCase.requestXML))
			if err != nil {
				t.Fatal(err)
			}

			if err = s3Select.Open(newBytesRSC(csvData)); err != nil {
				t.Fatal(err)
			}

			w := &testResponseWriter{}
			s3Select.Evaluate(w)
			s3Select.Close()

			if !reflect.DeepEqual(w.response, testCase.expectedResult) {
				resp := http.Response{
					StatusCode:    http.StatusOK,
					Body:          io.NopCloser(bytes.NewReader(w.response)),
					ContentLength: int64(len(w.response)),
				}
				res, err := minio.NewSelectResults(&resp, "testbucket")
				if err != nil {
					t.Error(err)
					return
				}
				got, err := io.ReadAll(res)
				if err != nil {
					t.Error(err)
					return
				}

				t.Errorf("received response does not match with expected reply\ngot: %#v\nwant:%#v\ndecoded:%s", w.response, testCase.expectedResult, string(got))
			}
		})`
$DIR/internal/s3select/select_test.go:1236:4-1269:5: `.Run(fmt.Sprint(i), func(t *testing.T) {
			s3Select, err := NewS3Select(bytes.NewReader(testCase.requestXML))
			if err != nil {
				t.Fatal(err)
			}

			if err = s3Select.Open(newBytesRSC(csvData)); err != nil {
				t.Fatal(err)
			}

			w := &testResponseWriter{}
			s3Select.Evaluate(w)
			s3Select.Close()

			if !reflect.DeepEqual(w.response, testCase.expectedResult) {
				resp := http.Response{
					StatusCode:    http.StatusOK,
					Body:          io.NopCloser(bytes.NewReader(w.response)),
					ContentLength: int64(len(w.response)),
				}
				res, err := minio.NewSelectResults(&resp, "testbucket")
				if err != nil {
					t.Error(err)
					return
				}
				got, err := io.ReadAll(res)
				if err != nil {
					t.Error(err)
					return
				}

				t.Errorf("received response does not match with expected reply\ngot: %#v\nwant:%#v\ndecoded:%s", w.response, testCase.expectedResult, string(got))
			}
		})`
$DIR/internal/s3select/select_test.go:1236:12-1236:22: `.Sprint(i)`
$DIR/internal/s3select/select_test.go:1237:38-1237:69: `.NewReader(testCase.requestXML)`
$DIR/internal/s3select/select_test.go:1242:21-1242:48: `.Open(newBytesRSC(csvData))`
$DIR/internal/s3select/select_test.go:1247:4-1247:24: `s3Select.Evaluate(w)`
$DIR/internal/s3select/select_test.go:1247:12-1247:24: `.Evaluate(w)`
$DIR/internal/s3select/select_test.go:1250:15-1250:62: `.DeepEqual(w.response, testCase.expectedResult)`
$DIR/internal/s3select/select_test.go:1253:23-1253:62: `.NopCloser(bytes.NewReader(w.response))`
$DIR/internal/s3select/select_test.go:1253:39-1253:61: `.NewReader(w.response)`
$DIR/internal/s3select/select_test.go:1256:22-1256:60: `.NewSelectResults(&resp, "testbucket")`
$DIR/internal/s3select/select_test.go:1261:19-1261:32: `.ReadAll(res)`
$DIR/internal/s3select/select_test.go:1356:3-1389:5: `t.Run(fmt.Sprint(i), func(t *testing.T) {
			s3Select, err := NewS3Select(bytes.NewReader(testCase.requestXML))
			if err != nil {
				t.Fatal(err)
			}

			if err = s3Select.Open(newBytesRSC(jsonData)); err != nil {
				t.Fatal(err)
			}

			w := &testResponseWriter{}
			s3Select.Evaluate(w)
			s3Select.Close()

			if !reflect.DeepEqual(w.response, testCase.expectedResult) {
				resp := http.Response{
					StatusCode:    http.StatusOK,
					Body:          io.NopCloser(bytes.NewReader(w.response)),
					ContentLength: int64(len(w.response)),
				}
				res, err := minio.NewSelectResults(&resp, "testbucket")
				if err != nil {
					t.Error(err)
					return
				}
				got, err := io.ReadAll(res)
				if err != nil {
					t.Error(err)
					return
				}

				t.Errorf("received response does not match with expected reply\ngot: %#v\nwant:%#v\ndecoded:%s", w.response, testCase.expectedResult, string(got))
			}
		})`
$DIR/internal/s3select/select_test.go:1356:4-1389:5: `.Run(fmt.Sprint(i), func(t *testing.T) {
			s3Select, err := NewS3Select(bytes.NewReader(testCase.requestXML))
			if err != nil {
				t.Fatal(err)
			}

			if err = s3Select.Open(newBytesRSC(jsonData)); err != nil {
				t.Fatal(err)
			}

			w := &testResponseWriter{}
			s3Select.Evaluate(w)
			s3Select.Close()

			if !reflect.DeepEqual(w.response, testCase.expectedResult) {
				resp := http.Response{
					StatusCode:    http.StatusOK,
					Body:          io.NopCloser(bytes.NewReader(w.response)),
					ContentLength: int64(len(w.response)),
				}
				res, err := minio.NewSelectResults(&resp, "testbucket")
				if err != nil {
					t.Error(err)
					return
				}
				got, err := io.ReadAll(res)
				if err != nil {
					t.Error(err)
					return
				}

				t.Errorf("received response does not match with expected reply\ngot: %#v\nwant:%#v\ndecoded:%s", w.response, testCase.expectedResult, string(got))
			}
		})`
$DIR/internal/s3select/select_test.go:1356:12-1356:22: `.Sprint(i)`
$DIR/internal/s3select/select_test.go:1357:38-1357:69: `.NewReader(testCase.requestXML)`
$DIR/internal/s3select/select_test.go:1362:21-1362:49: `.Open(newBytesRSC(jsonData))`
$DIR/internal/s3select/select_test.go:1367:4-1367:24: `s3Select.Evaluate(w)`
$DIR/internal/s3select/select_test.go:1367:12-1367:24: `.Evaluate(w)`
$DIR/internal/s3select/select_test.go:1370:15-1370:62: `.DeepEqual(w.response, testCase.expectedResult)`
$DIR/internal/s3select/select_test.go:1373:23-1373:62: `.NopCloser(bytes.NewReader(w.response))`
$DIR/internal/s3select/select_test.go:1373:39-1373:61: `.NewReader(w.response)`
$DIR/internal/s3select/select_test.go:1376:22-1376:60: `.NewSelectResults(&resp, "testbucket")`
$DIR/internal/s3select/select_test.go:1381:19-1381:32: `.ReadAll(res)`
$DIR/internal/s3select/select_test.go:1653:3-1697:5: `t.Run(testCase.name, func(t *testing.T) {
			testReq := testCase.requestXML
			s3Select, err := NewS3Select(bytes.NewReader(testReq))
			if err != nil {
				if !testCase.wantErr {
					t.Fatal(err)
				}
				t.Logf("got expected error: %v", err)
				return
			}

			if err = s3Select.Open(newBytesRSC(testCase.input)); err != nil {
				if !testCase.wantErr {
					t.Fatal(err)
				}
				t.Logf("got expected error: %v", err)
				return
			} else if testCase.wantErr {
				t.Error("did not get expected error")
				return
			}

			w := &testResponseWriter{}
			s3Select.Evaluate(w)
			s3Select.Close()
			resp := http.Response{
				StatusCode:    http.StatusOK,
				Body:          io.NopCloser(bytes.NewReader(w.response)),
				ContentLength: int64(len(w.response)),
			}
			res, err := minio.NewSelectResults(&resp, "testbucket")
			if err != nil {
				t.Error(err)
				return
			}
			got, err := io.ReadAll(res)
			if err != nil {
				t.Error(err)
				return
			}
			gotS := strings.TrimSpace(string(got))
			if !reflect.DeepEqual(gotS, testCase.wantResult) {
				t.Errorf("received response does not match with expected reply. Query: %s\ngot: %s\nwant:%s", testCase.query, gotS, testCase.wantResult)
			}
		})`
$DIR/internal/s3select/select_test.go:1653:4-1697:5: `.Run(testCase.name, func(t *testing.T) {
			testReq := testCase.requestXML
			s3Select, err := NewS3Select(bytes.NewReader(testReq))
			if err != nil {
				if !testCase.wantErr {
					t.Fatal(err)
				}
				t.Logf("got expected error: %v", err)
				return
			}

			if err = s3Select.Open(newBytesRSC(testCase.input)); err != nil {
				if !testCase.wantErr {
					t.Fatal(err)
				}
				t.Logf("got expected error: %v", err)
				return
			} else if testCase.wantErr {
				t.Error("did not get expected error")
				return
			}

			w := &testResponseWriter{}
			s3Select.Evaluate(w)
			s3Select.Close()
			resp := http.Response{
				StatusCode:    http.StatusOK,
				Body:          io.NopCloser(bytes.NewReader(w.response)),
				ContentLength: int64(len(w.response)),
			}
			res, err := minio.NewSelectResults(&resp, "testbucket")
			if err != nil {
				t.Error(err)
				return
			}
			got, err := io.ReadAll(res)
			if err != nil {
				t.Error(err)
				return
			}
			gotS := strings.TrimSpace(string(got))
			if !reflect.DeepEqual(gotS, testCase.wantResult) {
				t.Errorf("received response does not match with expected reply. Query: %s\ngot: %s\nwant:%s", testCase.query, gotS, testCase.wantResult)
			}
		})`
$DIR/internal/s3select/select_test.go:1655:38-1655:57: `.NewReader(testReq)`
$DIR/internal/s3select/select_test.go:1664:21-1664:55: `.Open(newBytesRSC(testCase.input))`
$DIR/internal/s3select/select_test.go:1676:4-1676:24: `s3Select.Evaluate(w)`
$DIR/internal/s3select/select_test.go:1676:12-1676:24: `.Evaluate(w)`
$DIR/internal/s3select/select_test.go:1680:22-1680:61: `.NopCloser(bytes.NewReader(w.response))`
$DIR/internal/s3select/select_test.go:1680:38-1680:60: `.NewReader(w.response)`
$DIR/internal/s3select/select_test.go:1683:21-1683:59: `.NewSelectResults(&resp, "testbucket")`
$DIR/internal/s3select/select_test.go:1688:18-1688:31: `.ReadAll(res)`
$DIR/internal/s3select/select_test.go:1693:19-1693:42: `.TrimSpace(string(got))`
$DIR/internal/s3select/select_test.go:1694:15-1694:52: `.DeepEqual(gotS, testCase.wantResult)`
$DIR/internal/s3select/select_test.go:1704:3-1704:25: `parquetSupport = saved`
$DIR/internal/s3select/select_test.go:1706:2-1706:23: `parquetSupport = true`
$DIR/internal/s3select/select_test.go:1761:3-1802:5: `t.Run(fmt.Sprint(i), func(t *testing.T) {
			testdataFile := "testdata/testdata.parquet"
			file, err := os.Open(testdataFile)
			if err != nil {
				t.Fatal(err)
			}

			s3Select, err := NewS3Select(bytes.NewReader(testCase.requestXML))
			if err != nil {
				t.Fatal(err)
			}

			if err = s3Select.Open(file); err != nil {
				t.Fatal(err)
			}

			fmt.Printf("R: \nE: %s\n" /* string(w.response), */, string(testCase.expectedResult))

			w := &testResponseWriter{}
			s3Select.Evaluate(w)
			s3Select.Close()

			if !reflect.DeepEqual(w.response, testCase.expectedResult) {
				resp := http.Response{
					StatusCode:    http.StatusOK,
					Body:          io.NopCloser(bytes.NewReader(w.response)),
					ContentLength: int64(len(w.response)),
				}
				res, err := minio.NewSelectResults(&resp, "testbucket")
				if err != nil {
					t.Error(err)
					return
				}
				got, err := io.ReadAll(res)
				if err != nil {
					t.Error(err)
					return
				}

				t.Errorf("received response does not match with expected reply\ngot: %#v\nwant:%#v\ndecoded:%s", w.response, testCase.expectedResult, string(got))
			}
		})`
$DIR/internal/s3select/select_test.go:1761:4-1802:5: `.Run(fmt.Sprint(i), func(t *testing.T) {
			testdataFile := "testdata/testdata.parquet"
			file, err := os.Open(testdataFile)
			if err != nil {
				t.Fatal(err)
			}

			s3Select, err := NewS3Select(bytes.NewReader(testCase.requestXML))
			if err != nil {
				t.Fatal(err)
			}

			if err = s3Select.Open(file); err != nil {
				t.Fatal(err)
			}

			fmt.Printf("R: \nE: %s\n" /* string(w.response), */, string(testCase.expectedResult))

			w := &testResponseWriter{}
			s3Select.Evaluate(w)
			s3Select.Close()

			if !reflect.DeepEqual(w.response, testCase.expectedResult) {
				resp := http.Response{
					StatusCode:    http.StatusOK,
					Body:          io.NopCloser(bytes.NewReader(w.response)),
					ContentLength: int64(len(w.response)),
				}
				res, err := minio.NewSelectResults(&resp, "testbucket")
				if err != nil {
					t.Error(err)
					return
				}
				got, err := io.ReadAll(res)
				if err != nil {
					t.Error(err)
					return
				}

				t.Errorf("received response does not match with expected reply\ngot: %#v\nwant:%#v\ndecoded:%s", w.response, testCase.expectedResult, string(got))
			}
		})`
$DIR/internal/s3select/select_test.go:1761:12-1761:22: `.Sprint(i)`
$DIR/internal/s3select/select_test.go:1763:19-1763:38: `.Open(testdataFile)`
$DIR/internal/s3select/select_test.go:1768:38-1768:69: `.NewReader(testCase.requestXML)`
$DIR/internal/s3select/select_test.go:1773:21-1773:32: `.Open(file)`
$DIR/internal/s3select/select_test.go:1777:4-1777:89: `fmt.Printf("R: \nE: %s\n" /* string(w.response), */, string(testCase.expectedResult))`
$DIR/internal/s3select/select_test.go:1777:7-1777:89: `.Printf("R: \nE: %s\n" /* string(w.response), */, string(testCase.expectedResult))`
$DIR/internal/s3select/select_test.go:1780:4-1780:24: `s3Select.Evaluate(w)`
$DIR/internal/s3select/select_test.go:1780:12-1780:24: `.Evaluate(w)`
$DIR/internal/s3select/select_test.go:1783:15-1783:62: `.DeepEqual(w.response, testCase.expectedResult)`
$DIR/internal/s3select/select_test.go:1786:23-1786:62: `.NopCloser(bytes.NewReader(w.response))`
$DIR/internal/s3select/select_test.go:1786:39-1786:61: `.NewReader(w.response)`
$DIR/internal/s3select/select_test.go:1789:22-1789:60: `.NewSelectResults(&resp, "testbucket")`
$DIR/internal/s3select/select_test.go:1794:19-1794:32: `.ReadAll(res)`
$DIR/internal/s3select/select_test.go:1809:3-1809:25: `parquetSupport = saved`
$DIR/internal/s3select/select_test.go:1811:2-1811:23: `parquetSupport = true`
$DIR/internal/s3select/select_test.go:1870:3-1908:5: `t.Run(fmt.Sprint(i), func(t *testing.T) {
			testdataFile := "testdata/lineitem_shipdate.parquet"
			file, err := os.Open(testdataFile)
			if err != nil {
				t.Fatal(err)
			}

			s3Select, err := NewS3Select(bytes.NewReader(testCase.requestXML))
			if err != nil {
				t.Fatal(err)
			}

			if err = s3Select.Open(file); err != nil {
				t.Fatal(err)
			}

			w := &testResponseWriter{}
			s3Select.Evaluate(w)
			s3Select.Close()
			resp := http.Response{
				StatusCode:    http.StatusOK,
				Body:          io.NopCloser(bytes.NewReader(w.response)),
				ContentLength: int64(len(w.response)),
			}
			res, err := minio.NewSelectResults(&resp, "testbucket")
			if err != nil {
				t.Error(err)
				return
			}
			got, err := io.ReadAll(res)
			if err != nil {
				t.Error(err)
				return
			}
			gotS := strings.TrimSpace(string(got))
			if !reflect.DeepEqual(gotS, testCase.wantResult) {
				t.Errorf("received response does not match with expected reply. Query: %s\ngot: %s\nwant:%s", testCase.requestXML, gotS, testCase.wantResult)
			}
		})`
$DIR/internal/s3select/select_test.go:1870:4-1908:5: `.Run(fmt.Sprint(i), func(t *testing.T) {
			testdataFile := "testdata/lineitem_shipdate.parquet"
			file, err := os.Open(testdataFile)
			if err != nil {
				t.Fatal(err)
			}

			s3Select, err := NewS3Select(bytes.NewReader(testCase.requestXML))
			if err != nil {
				t.Fatal(err)
			}

			if err = s3Select.Open(file); err != nil {
				t.Fatal(err)
			}

			w := &testResponseWriter{}
			s3Select.Evaluate(w)
			s3Select.Close()
			resp := http.Response{
				StatusCode:    http.StatusOK,
				Body:          io.NopCloser(bytes.NewReader(w.response)),
				ContentLength: int64(len(w.response)),
			}
			res, err := minio.NewSelectResults(&resp, "testbucket")
			if err != nil {
				t.Error(err)
				return
			}
			got, err := io.ReadAll(res)
			if err != nil {
				t.Error(err)
				return
			}
			gotS := strings.TrimSpace(string(got))
			if !reflect.DeepEqual(gotS, testCase.wantResult) {
				t.Errorf("received response does not match with expected reply. Query: %s\ngot: %s\nwant:%s", testCase.requestXML, gotS, testCase.wantResult)
			}
		})`
$DIR/internal/s3select/select_test.go:1870:12-1870:22: `.Sprint(i)`
$DIR/internal/s3select/select_test.go:1872:19-1872:38: `.Open(testdataFile)`
$DIR/internal/s3select/select_test.go:1877:38-1877:69: `.NewReader(testCase.requestXML)`
$DIR/internal/s3select/select_test.go:1882:21-1882:32: `.Open(file)`
$DIR/internal/s3select/select_test.go:1887:4-1887:24: `s3Select.Evaluate(w)`
$DIR/internal/s3select/select_test.go:1887:12-1887:24: `.Evaluate(w)`
$DIR/internal/s3select/select_test.go:1891:22-1891:61: `.NopCloser(bytes.NewReader(w.response))`
$DIR/internal/s3select/select_test.go:1891:38-1891:60: `.NewReader(w.response)`
$DIR/internal/s3select/select_test.go:1894:21-1894:59: `.NewSelectResults(&resp, "testbucket")`
$DIR/internal/s3select/select_test.go:1899:18-1899:31: `.ReadAll(res)`
$DIR/internal/s3select/select_test.go:1904:19-1904:42: `.TrimSpace(string(got))`
$DIR/internal/s3select/select_test.go:1905:15-1905:52: `.DeepEqual(gotS, testCase.wantResult)`
$DIR/internal/s3select/select_test.go:1915:3-1915:25: `parquetSupport = saved`
$DIR/internal/s3select/select_test.go:1917:2-1917:23: `parquetSupport = true`
$DIR/internal/s3select/select_test.go:1974:3-2012:5: `t.Run(fmt.Sprint(i), func(t *testing.T) {
			testdataFile := "testdata/lineitem_shipdate.parquet"
			file, err := os.Open(testdataFile)
			if err != nil {
				t.Fatal(err)
			}

			s3Select, err := NewS3Select(bytes.NewReader(testCase.requestXML))
			if err != nil {
				t.Fatal(err)
			}

			if err = s3Select.Open(file); err != nil {
				t.Fatal(err)
			}

			w := &testResponseWriter{}
			s3Select.Evaluate(w)
			s3Select.Close()
			resp := http.Response{
				StatusCode:    http.StatusOK,
				Body:          io.NopCloser(bytes.NewReader(w.response)),
				ContentLength: int64(len(w.response)),
			}
			res, err := minio.NewSelectResults(&resp, "testbucket")
			if err != nil {
				t.Error(err)
				return
			}
			got, err := io.ReadAll(res)
			if err != nil {
				t.Error(err)
				return
			}
			gotS := strings.TrimSpace(string(got))
			if !reflect.DeepEqual(gotS, testCase.wantResult) {
				t.Errorf("received response does not match with expected reply. Query: %s\ngot: %s\nwant:%s", testCase.requestXML, gotS, testCase.wantResult)
			}
		})`
$DIR/internal/s3select/select_test.go:1974:4-2012:5: `.Run(fmt.Sprint(i), func(t *testing.T) {
			testdataFile := "testdata/lineitem_shipdate.parquet"
			file, err := os.Open(testdataFile)
			if err != nil {
				t.Fatal(err)
			}

			s3Select, err := NewS3Select(bytes.NewReader(testCase.requestXML))
			if err != nil {
				t.Fatal(err)
			}

			if err = s3Select.Open(file); err != nil {
				t.Fatal(err)
			}

			w := &testResponseWriter{}
			s3Select.Evaluate(w)
			s3Select.Close()
			resp := http.Response{
				StatusCode:    http.StatusOK,
				Body:          io.NopCloser(bytes.NewReader(w.response)),
				ContentLength: int64(len(w.response)),
			}
			res, err := minio.NewSelectResults(&resp, "testbucket")
			if err != nil {
				t.Error(err)
				return
			}
			got, err := io.ReadAll(res)
			if err != nil {
				t.Error(err)
				return
			}
			gotS := strings.TrimSpace(string(got))
			if !reflect.DeepEqual(gotS, testCase.wantResult) {
				t.Errorf("received response does not match with expected reply. Query: %s\ngot: %s\nwant:%s", testCase.requestXML, gotS, testCase.wantResult)
			}
		})`
$DIR/internal/s3select/select_test.go:1974:12-1974:22: `.Sprint(i)`
$DIR/internal/s3select/select_test.go:1976:19-1976:38: `.Open(testdataFile)`
$DIR/internal/s3select/select_test.go:1981:38-1981:69: `.NewReader(testCase.requestXML)`
$DIR/internal/s3select/select_test.go:1986:21-1986:32: `.Open(file)`
$DIR/internal/s3select/select_test.go:1991:4-1991:24: `s3Select.Evaluate(w)`
$DIR/internal/s3select/select_test.go:1991:12-1991:24: `.Evaluate(w)`
$DIR/internal/s3select/select_test.go:1995:22-1995:61: `.NopCloser(bytes.NewReader(w.response))`
$DIR/internal/s3select/select_test.go:1995:38-1995:60: `.NewReader(w.response)`
$DIR/internal/s3select/select_test.go:1998:21-1998:59: `.NewSelectResults(&resp, "testbucket")`
$DIR/internal/s3select/select_test.go:2003:18-2003:31: `.ReadAll(res)`
$DIR/internal/s3select/select_test.go:2008:19-2008:42: `.TrimSpace(string(got))`
$DIR/internal/s3select/select_test.go:2009:15-2009:52: `.DeepEqual(gotS, testCase.wantResult)`
$DIR/internal/s3select/simdj/reader_amd64_test.go:65:14-65:29: `.SupportedCPU()`
$DIR/internal/s3select/simdj/reader_amd64_test.go:70:3-174:5: `t.Run(tt.name, func(t *testing.T) {
			ref := loadCompressed(t, tt.name)

			var err error
			dst := make(chan simdjson.Object, 100)
			dec := NewElementReader(dst, &err, &json.ReaderArgs{ContentType: "json"})
			pj, err := simdjson.ParseND(ref, nil)
			if err != nil {
				t.Fatal(err)
			}
			i := pj.Iter()
			cpy := i
			b, err := cpy.MarshalJSON()
			if err != nil {
				t.Fatal(err)
			}
			if false {
				t.Log(string(b))
			}
			// _ = os.WriteFile(filepath.Join("testdata", tt.name+".json"), b, os.ModePerm)

		parser:
			for {
				var next simdjson.Iter
				typ, err := i.AdvanceIter(&next)
				if err != nil {
					t.Fatal(err)
				}
				switch typ {
				case simdjson.TypeNone:
					close(dst)
					break parser
				case simdjson.TypeRoot:
					typ, obj, err := next.Root(nil)
					if err != nil {
						t.Fatal(err)
					}
					if typ != simdjson.TypeObject {
						if typ == simdjson.TypeNone {
							close(dst)
							break parser
						}
						t.Fatal("Unexpected type:", typ.String())
					}

					o, err := obj.Object(nil)
					if err != nil {
						t.Fatal(err)
					}
					dst <- *o
				default:
					t.Fatal("unexpected type:", typ.String())
				}
			}
			refDec := json.NewReader(io.NopCloser(bytes.NewBuffer(ref)), &json.ReaderArgs{ContentType: "json"})

			for {
				rec, err := dec.Read(nil)
				if err == io.EOF {
					break
				}
				if err != nil {
					t.Error(err)
				}
				want, err := refDec.Read(nil)
				if err != nil {
					t.Error(err)
				}
				var gotB, wantB bytes.Buffer
				opts := sql.WriteCSVOpts{
					FieldDelimiter: ',',
					Quote:          '"',
					QuoteEscape:    '"',
					AlwaysQuote:    false,
				}
				err = rec.WriteCSV(&gotB, opts)
				if err != nil {
					t.Error(err)
				}
				err = want.WriteCSV(&wantB, opts)
				if err != nil {
					t.Error(err)
				}

				if !bytes.Equal(gotB.Bytes(), wantB.Bytes()) {
					t.Errorf("CSV output mismatch.\nwant: %s(%x)\ngot:  %s(%x)", wantB.String(), wantB.Bytes(), gotB.String(), gotB.Bytes())
				}
				gotB.Reset()
				wantB.Reset()

				err = rec.WriteJSON(&gotB)
				if err != nil {
					t.Error(err)
				}
				err = want.WriteJSON(&wantB)
				if err != nil {
					t.Error(err)
				}
				// truncate newline from 'want'
				wantB.Truncate(wantB.Len() - 1)
				if !bytes.Equal(gotB.Bytes(), wantB.Bytes()) {
					t.Errorf("JSON output mismatch.\nwant: %s\ngot:  %s", wantB.String(), gotB.String())
				}
			}
		})`
$DIR/internal/s3select/simdj/reader_amd64_test.go:70:4-174:5: `.Run(tt.name, func(t *testing.T) {
			ref := loadCompressed(t, tt.name)

			var err error
			dst := make(chan simdjson.Object, 100)
			dec := NewElementReader(dst, &err, &json.ReaderArgs{ContentType: "json"})
			pj, err := simdjson.ParseND(ref, nil)
			if err != nil {
				t.Fatal(err)
			}
			i := pj.Iter()
			cpy := i
			b, err := cpy.MarshalJSON()
			if err != nil {
				t.Fatal(err)
			}
			if false {
				t.Log(string(b))
			}
			// _ = os.WriteFile(filepath.Join("testdata", tt.name+".json"), b, os.ModePerm)

		parser:
			for {
				var next simdjson.Iter
				typ, err := i.AdvanceIter(&next)
				if err != nil {
					t.Fatal(err)
				}
				switch typ {
				case simdjson.TypeNone:
					close(dst)
					break parser
				case simdjson.TypeRoot:
					typ, obj, err := next.Root(nil)
					if err != nil {
						t.Fatal(err)
					}
					if typ != simdjson.TypeObject {
						if typ == simdjson.TypeNone {
							close(dst)
							break parser
						}
						t.Fatal("Unexpected type:", typ.String())
					}

					o, err := obj.Object(nil)
					if err != nil {
						t.Fatal(err)
					}
					dst <- *o
				default:
					t.Fatal("unexpected type:", typ.String())
				}
			}
			refDec := json.NewReader(io.NopCloser(bytes.NewBuffer(ref)), &json.ReaderArgs{ContentType: "json"})

			for {
				rec, err := dec.Read(nil)
				if err == io.EOF {
					break
				}
				if err != nil {
					t.Error(err)
				}
				want, err := refDec.Read(nil)
				if err != nil {
					t.Error(err)
				}
				var gotB, wantB bytes.Buffer
				opts := sql.WriteCSVOpts{
					FieldDelimiter: ',',
					Quote:          '"',
					QuoteEscape:    '"',
					AlwaysQuote:    false,
				}
				err = rec.WriteCSV(&gotB, opts)
				if err != nil {
					t.Error(err)
				}
				err = want.WriteCSV(&wantB, opts)
				if err != nil {
					t.Error(err)
				}

				if !bytes.Equal(gotB.Bytes(), wantB.Bytes()) {
					t.Errorf("CSV output mismatch.\nwant: %s(%x)\ngot:  %s(%x)", wantB.String(), wantB.Bytes(), gotB.String(), gotB.Bytes())
				}
				gotB.Reset()
				wantB.Reset()

				err = rec.WriteJSON(&gotB)
				if err != nil {
					t.Error(err)
				}
				err = want.WriteJSON(&wantB)
				if err != nil {
					t.Error(err)
				}
				// truncate newline from 'want'
				wantB.Truncate(wantB.Len() - 1)
				if !bytes.Equal(gotB.Bytes(), wantB.Bytes()) {
					t.Errorf("JSON output mismatch.\nwant: %s\ngot:  %s", wantB.String(), gotB.String())
				}
			}
		})`
$DIR/internal/s3select/simdj/reader_amd64_test.go:76:23-76:41: `.ParseND(ref, nil)`
$DIR/internal/s3select/simdj/reader_amd64_test.go:80:11-80:18: `.Iter()`
$DIR/internal/s3select/simdj/reader_amd64_test.go:82:17-82:31: `.MarshalJSON()`
$DIR/internal/s3select/simdj/reader_amd64_test.go:94:18-94:37: `.AdvanceIter(&next)`
$DIR/internal/s3select/simdj/reader_amd64_test.go:100:6-100:16: `close(dst)`
$DIR/internal/s3select/simdj/reader_amd64_test.go:103:27-103:37: `.Root(nil)`
$DIR/internal/s3select/simdj/reader_amd64_test.go:109:8-109:18: `close(dst)`
$DIR/internal/s3select/simdj/reader_amd64_test.go:115:19-115:31: `.Object(nil)`
$DIR/internal/s3select/simdj/reader_amd64_test.go:119:6-119:15: `dst <- *o`
$DIR/internal/s3select/simdj/reader_amd64_test.go:124:18-124:103: `.NewReader(io.NopCloser(bytes.NewBuffer(ref)), &json.ReaderArgs{ContentType: "json"})`
$DIR/internal/s3select/simdj/reader_amd64_test.go:124:31-124:63: `.NopCloser(bytes.NewBuffer(ref))`
$DIR/internal/s3select/simdj/reader_amd64_test.go:124:47-124:62: `.NewBuffer(ref)`
$DIR/internal/s3select/simdj/reader_amd64_test.go:127:20-127:30: `.Read(nil)`
$DIR/internal/s3select/simdj/reader_amd64_test.go:134:24-134:34: `.Read(nil)`
$DIR/internal/s3select/simdj/reader_amd64_test.go:145:5-145:36: `err = rec.WriteCSV(&gotB, opts)`
$DIR/internal/s3select/simdj/reader_amd64_test.go:145:14-145:36: `.WriteCSV(&gotB, opts)`
$DIR/internal/s3select/simdj/reader_amd64_test.go:149:5-149:38: `err = want.WriteCSV(&wantB, opts)`
$DIR/internal/s3select/simdj/reader_amd64_test.go:149:15-149:38: `.WriteCSV(&wantB, opts)`
$DIR/internal/s3select/simdj/reader_amd64_test.go:154:14-154:49: `.Equal(gotB.Bytes(), wantB.Bytes())`
$DIR/internal/s3select/simdj/reader_amd64_test.go:154:25-154:33: `.Bytes()`
$DIR/internal/s3select/simdj/reader_amd64_test.go:154:40-154:48: `.Bytes()`
$DIR/internal/s3select/simdj/reader_amd64_test.go:157:5-157:17: `gotB.Reset()`
$DIR/internal/s3select/simdj/reader_amd64_test.go:157:9-157:17: `.Reset()`
$DIR/internal/s3select/simdj/reader_amd64_test.go:158:5-158:18: `wantB.Reset()`
$DIR/internal/s3select/simdj/reader_amd64_test.go:158:10-158:18: `.Reset()`
$DIR/internal/s3select/simdj/reader_amd64_test.go:160:5-160:31: `err = rec.WriteJSON(&gotB)`
$DIR/internal/s3select/simdj/reader_amd64_test.go:160:14-160:31: `.WriteJSON(&gotB)`
$DIR/internal/s3select/simdj/reader_amd64_test.go:164:5-164:33: `err = want.WriteJSON(&wantB)`
$DIR/internal/s3select/simdj/reader_amd64_test.go:164:15-164:33: `.WriteJSON(&wantB)`
$DIR/internal/s3select/simdj/reader_amd64_test.go:169:5-169:36: `wantB.Truncate(wantB.Len() - 1)`
$DIR/internal/s3select/simdj/reader_amd64_test.go:169:10-169:36: `.Truncate(wantB.Len() - 1)`
$DIR/internal/s3select/simdj/reader_amd64_test.go:169:25-169:31: `.Len()`
$DIR/internal/s3select/simdj/reader_amd64_test.go:170:14-170:49: `.Equal(gotB.Bytes(), wantB.Bytes())`
$DIR/internal/s3select/simdj/reader_amd64_test.go:170:25-170:33: `.Bytes()`
$DIR/internal/s3select/simdj/reader_amd64_test.go:170:40-170:48: `.Bytes()`
$DIR/internal/s3select/sql/jsonpath_test.go:46:14-46:60: `.Open(filepath.Join("jsondata", "books.json"))`
$DIR/internal/s3select/sql/jsonpath_test.go:46:28-46:59: `.Join("jsondata", "books.json")`
$DIR/internal/s3select/sql/jsonpath_test.go:51:14-51:25: `.ReadAll(f)`
$DIR/internal/s3select/sql/jsonpath_test.go:56:17-60:3: `.MustBuild(
		&JSONPath{},
		participle.Lexer(sqlLexer),
		participle.CaseInsensitive("Keyword"),
	)`
$DIR/internal/s3select/sql/jsonpath_test.go:58:13-58:29: `.Lexer(sqlLexer)`
$DIR/internal/s3select/sql/jsonpath_test.go:59:13-59:40: `.CaseInsensitive("Keyword")`
$DIR/internal/s3select/sql/jsonpath_test.go:72:3-97:5: `t.Run(tc.str, func(t *testing.T) {
			jp := JSONPath{}
			err := p.ParseString(tc.str, &jp)
			// fmt.Println(jp)
			if err != nil {
				t.Fatalf("parse failed!: %d %v %s", i, err, tc)
			}

			// Read only the first json object from the file
			recs, err := getJSONStructs(b)
			if err != nil || len(recs) != 3 {
				t.Fatalf("%v or length was not 3", err)
			}

			for j, rec := range recs {
				// fmt.Println(rec)
				r, _, err := jsonpathEval(jp.PathExpr, rec)
				if err != nil {
					t.Errorf("Error: %d %d %v", i, j, err)
				}
				if !reflect.DeepEqual(r, tc.res[j]) {
					fmt.Printf("%#v (%v) != %v (%v)\n", r, reflect.TypeOf(r), tc.res[j], reflect.TypeOf(tc.res[j]))
					t.Errorf("case: %d %d failed", i, j)
				}
			}
		})`
$DIR/internal/s3select/sql/jsonpath_test.go:72:4-97:5: `.Run(tc.str, func(t *testing.T) {
			jp := JSONPath{}
			err := p.ParseString(tc.str, &jp)
			// fmt.Println(jp)
			if err != nil {
				t.Fatalf("parse failed!: %d %v %s", i, err, tc)
			}

			// Read only the first json object from the file
			recs, err := getJSONStructs(b)
			if err != nil || len(recs) != 3 {
				t.Fatalf("%v or length was not 3", err)
			}

			for j, rec := range recs {
				// fmt.Println(rec)
				r, _, err := jsonpathEval(jp.PathExpr, rec)
				if err != nil {
					t.Errorf("Error: %d %d %v", i, j, err)
				}
				if !reflect.DeepEqual(r, tc.res[j]) {
					fmt.Printf("%#v (%v) != %v (%v)\n", r, reflect.TypeOf(r), tc.res[j], reflect.TypeOf(tc.res[j]))
					t.Errorf("case: %d %d failed", i, j)
				}
			}
		})`
$DIR/internal/s3select/sql/jsonpath_test.go:74:12-74:37: `.ParseString(tc.str, &jp)`
$DIR/internal/s3select/sql/jsonpath_test.go:92:16-92:40: `.DeepEqual(r, tc.res[j])`
$DIR/internal/s3select/sql/jsonpath_test.go:93:6-93:101: `fmt.Printf("%#v (%v) != %v (%v)\n", r, reflect.TypeOf(r), tc.res[j], reflect.TypeOf(tc.res[j]))`
$DIR/internal/s3select/sql/jsonpath_test.go:93:9-93:101: `.Printf("%#v (%v) != %v (%v)\n", r, reflect.TypeOf(r), tc.res[j], reflect.TypeOf(tc.res[j]))`
$DIR/internal/s3select/sql/jsonpath_test.go:93:52-93:62: `.TypeOf(r)`
$DIR/internal/s3select/sql/jsonpath_test.go:93:82-93:100: `.TypeOf(tc.res[j])`
$DIR/internal/s3select/sql/parser_test.go:29:17-34:3: `.MustBuild(
		&JSONPathElement{},
		participle.Lexer(sqlLexer),
		participle.CaseInsensitive("Keyword"),
		participle.CaseInsensitive("Timeword"),
	)`
$DIR/internal/s3select/sql/parser_test.go:31:13-31:29: `.Lexer(sqlLexer)`
$DIR/internal/s3select/sql/parser_test.go:32:13-32:40: `.CaseInsensitive("Keyword")`
$DIR/internal/s3select/sql/parser_test.go:33:13-33:41: `.CaseInsensitive("Timeword")`
$DIR/internal/s3select/sql/parser_test.go:51:11-51:31: `.ParseString(tc, &j)`
$DIR/internal/s3select/sql/parser_test.go:60:17-65:3: `.MustBuild(
		&JSONPath{},
		participle.Lexer(sqlLexer),
		participle.CaseInsensitive("Keyword"),
		participle.CaseInsensitive("Timeword"),
	)`
$DIR/internal/s3select/sql/parser_test.go:62:13-62:29: `.Lexer(sqlLexer)`
$DIR/internal/s3select/sql/parser_test.go:63:13-63:40: `.CaseInsensitive("Keyword")`
$DIR/internal/s3select/sql/parser_test.go:64:13-64:41: `.CaseInsensitive("Timeword")`
$DIR/internal/s3select/sql/parser_test.go:81:11-81:31: `.ParseString(tc, &j)`
$DIR/internal/s3select/sql/parser_test.go:90:17-94:3: `.MustBuild(
		&Identifier{},
		participle.Lexer(sqlLexer),
		participle.CaseInsensitive("Keyword"),
	)`
$DIR/internal/s3select/sql/parser_test.go:92:13-92:29: `.Lexer(sqlLexer)`
$DIR/internal/s3select/sql/parser_test.go:93:13-93:40: `.CaseInsensitive("Keyword")`
$DIR/internal/s3select/sql/parser_test.go:106:11-106:32: `.ParseString(tc, &id)`
$DIR/internal/s3select/sql/parser_test.go:123:11-123:32: `.ParseString(tc, &id)`
$DIR/internal/s3select/sql/parser_test.go:133:17-137:3: `.MustBuild(
		&ObjectKey{},
		participle.Lexer(sqlLexer),
		participle.CaseInsensitive("Keyword"),
	)`
$DIR/internal/s3select/sql/parser_test.go:135:13-135:29: `.Lexer(sqlLexer)`
$DIR/internal/s3select/sql/parser_test.go:136:13-136:40: `.CaseInsensitive("Keyword")`
$DIR/internal/s3select/sql/parser_test.go:146:11-146:31: `.ParseString(tc, &k)`
$DIR/internal/s3select/sql/parser_test.go:163:11-163:31: `.ParseString(tc, &k)`
$DIR/internal/s3select/sql/parser_test.go:173:17-178:3: `.MustBuild(
		&FuncExpr{},
		participle.Lexer(sqlLexer),
		participle.CaseInsensitive("Keyword"),
		participle.CaseInsensitive("Timeword"),
	)`
$DIR/internal/s3select/sql/parser_test.go:175:13-175:29: `.Lexer(sqlLexer)`
$DIR/internal/s3select/sql/parser_test.go:176:13-176:40: `.CaseInsensitive("Keyword")`
$DIR/internal/s3select/sql/parser_test.go:177:13-177:41: `.CaseInsensitive("Timeword")`
$DIR/internal/s3select/sql/parser_test.go:211:11-211:33: `.ParseString(tc, &fex)`
$DIR/internal/s3select/sql/parser_test.go:221:12-221:53: `.NewBuffer([]byte("S3Object.words.*.id"))`
$DIR/internal/s3select/sql/parser_test.go:223:22-223:29: `.Lex(s)`
$DIR/internal/s3select/sql/parser_test.go:227:22-227:38: `.ConsumeAll(lex)`
$DIR/internal/s3select/sql/parser_test.go:240:17-244:3: `.MustBuild(
		&Select{},
		participle.Lexer(sqlLexer),
		participle.CaseInsensitive("Keyword"),
	)`
$DIR/internal/s3select/sql/parser_test.go:242:13-242:29: `.Lexer(sqlLexer)`
$DIR/internal/s3select/sql/parser_test.go:243:13-243:40: `.CaseInsensitive("Keyword")`
$DIR/internal/s3select/sql/parser_test.go:256:11-256:31: `.ParseString(tc, &s)`
$DIR/internal/s3select/sql/parser_test.go:266:17-270:3: `.MustBuild(
		&Select{},
		participle.Lexer(sqlLexer),
		participle.CaseInsensitive("Keyword"),
	)`
$DIR/internal/s3select/sql/parser_test.go:268:13-268:29: `.Lexer(sqlLexer)`
$DIR/internal/s3select/sql/parser_test.go:269:13-269:40: `.CaseInsensitive("Keyword")`
$DIR/internal/s3select/sql/parser_test.go:284:11-284:31: `.ParseString(tc, &s)`
$DIR/internal/s3select/sql/parser_test.go:292:17-296:3: `.MustBuild(
		&Select{},
		participle.Lexer(sqlLexer),
		participle.CaseInsensitive("Keyword"),
	)`
$DIR/internal/s3select/sql/parser_test.go:294:13-294:29: `.Lexer(sqlLexer)`
$DIR/internal/s3select/sql/parser_test.go:295:13-295:40: `.CaseInsensitive("Keyword")`
$DIR/internal/s3select/sql/parser_test.go:306:11-306:31: `.ParseString(tc, &s)`
$DIR/internal/s3select/sql/parser_test.go:314:17-318:3: `.MustBuild(
		&Select{},
		participle.Lexer(sqlLexer),
		participle.CaseInsensitive("Keyword"),
	)`
$DIR/internal/s3select/sql/parser_test.go:316:13-316:29: `.Lexer(sqlLexer)`
$DIR/internal/s3select/sql/parser_test.go:317:13-317:40: `.CaseInsensitive("Keyword")`
$DIR/internal/s3select/sql/parser_test.go:337:11-337:31: `.ParseString(tc, &s)`
$DIR/internal/s3select/sql/parser_test.go:347:17-351:3: `.MustBuild(
		&Select{},
		participle.Lexer(sqlLexer),
		participle.CaseInsensitive("Keyword"),
	)`
$DIR/internal/s3select/sql/parser_test.go:349:13-349:29: `.Lexer(sqlLexer)`
$DIR/internal/s3select/sql/parser_test.go:350:13-350:40: `.CaseInsensitive("Keyword")`
$DIR/internal/s3select/sql/parser_test.go:360:11-360:31: `.ParseString(tc, &s)`
$DIR/internal/s3select/sql/parser_test.go:370:12-370:70: `.NewBuffer([]byte("year from select month hour distinct"))`
$DIR/internal/s3select/sql/parser_test.go:371:22-371:29: `.Lex(s)`
$DIR/internal/s3select/sql/parser_test.go:375:22-375:38: `.ConsumeAll(lex)`
$DIR/internal/s3select/sql/timestampfuncs_test.go:26:17-26:63: `.FixedZone("", int((8 * time.Hour).Seconds()))`
$DIR/internal/s3select/sql/timestampfuncs_test.go:26:51-26:61: `.Seconds()`
$DIR/internal/s3select/sql/timestampfuncs_test.go:27:24-27:71: `.FixedZone("", -int((8 * time.Hour).Seconds()))`
$DIR/internal/s3select/sql/timestampfuncs_test.go:27:59-27:69: `.Seconds()`
$DIR/internal/s3select/sql/timestampfuncs_test.go:32:17-32:56: `.Date(2010, 1, 1, 0, 0, 0, 0, time.UTC)`
$DIR/internal/s3select/sql/timestampfuncs_test.go:33:20-33:59: `.Date(2010, 2, 1, 0, 0, 0, 0, time.UTC)`
$DIR/internal/s3select/sql/timestampfuncs_test.go:34:23-34:62: `.Date(2010, 2, 3, 0, 0, 0, 0, time.UTC)`
$DIR/internal/s3select/sql/timestampfuncs_test.go:35:29-35:69: `.Date(2010, 2, 3, 4, 11, 0, 0, time.UTC)`
$DIR/internal/s3select/sql/timestampfuncs_test.go:36:32-36:73: `.Date(2010, 2, 3, 4, 11, 30, 0, time.UTC)`
$DIR/internal/s3select/sql/timestampfuncs_test.go:37:35-37:84: `.Date(2010, 2, 3, 4, 11, 30, 230000000, time.UTC)`
$DIR/internal/s3select/sql/timestampfuncs_test.go:38:34-38:73: `.Date(2010, 2, 3, 4, 11, 0, 0, beijing)`
$DIR/internal/s3select/sql/timestampfuncs_test.go:39:37-39:77: `.Date(2010, 2, 3, 4, 11, 30, 0, beijing)`
$DIR/internal/s3select/sql/timestampfuncs_test.go:40:40-40:88: `.Date(2010, 2, 3, 4, 11, 30, 230000000, beijing)`
$DIR/internal/s3select/sql/timestampfuncs_test.go:41:37-41:84: `.Date(2010, 2, 3, 4, 11, 30, 0, fakeLosAngeles)`
$DIR/internal/s3select/sql/timestampfuncs_test.go:42:40-42:95: `.Date(2010, 2, 3, 4, 11, 30, 230000000, fakeLosAngeles)`
$DIR/internal/s3select/sql/timestampfuncs_test.go:50:11-50:23: `.Equal(tc.t)`
$DIR/internal/s3select/sql/value_test.go:81:2-83:3: `type fields struct {
		a, b Value
	}`
$DIR/internal/s3select/sql/value_test.go:84:2-88:3: `type test struct {
		name   string
		fields fields
		wantOk bool
	}`
$DIR/internal/s3select/sql/value_test.go:94:4-100:6: `tests = append(tests, test{
				name: fmt.Sprint(a.GetTypeString(), "==", b.GetTypeString()),
				fields: fields{
					a: *a, b: *b,
				},
				wantOk: i == j,
			})`
$DIR/internal/s3select/sql/value_test.go:95:14-95:65: `.Sprint(a.GetTypeString(), "==", b.GetTypeString())`
$DIR/internal/s3select/sql/value_test.go:95:23-95:39: `.GetTypeString()`
$DIR/internal/s3select/sql/value_test.go:95:48-95:64: `.GetTypeString()`
$DIR/internal/s3select/sql/value_test.go:105:3-109:5: `t.Run(tt.name, func(t *testing.T) {
			if gotOk := tt.fields.a.SameTypeAs(tt.fields.b); gotOk != tt.wantOk {
				t.Errorf("SameTypeAs() = %v, want %v", gotOk, tt.wantOk)
			}
		})`
$DIR/internal/s3select/sql/value_test.go:105:4-109:5: `.Run(tt.name, func(t *testing.T) {
			if gotOk := tt.fields.a.SameTypeAs(tt.fields.b); gotOk != tt.wantOk {
				t.Errorf("SameTypeAs() = %v, want %v", gotOk, tt.wantOk)
			}
		})`
$DIR/internal/s3select/sql/value_test.go:106:18-106:51: `.fields.a.SameTypeAs(tt.fields.b)`
$DIR/internal/s3select/sql/value_test.go:114:2-116:3: `type fields struct {
		a, b Value
	}`
$DIR/internal/s3select/sql/value_test.go:117:2-121:3: `type test struct {
		name   string
		fields fields
		wantOk bool
	}`
$DIR/internal/s3select/sql/value_test.go:127:4-133:6: `tests = append(tests, test{
				name: fmt.Sprint(a.GetTypeString(), "==", b.GetTypeString()),
				fields: fields{
					a: *a, b: *b,
				},
				wantOk: i == j,
			})`
$DIR/internal/s3select/sql/value_test.go:128:14-128:65: `.Sprint(a.GetTypeString(), "==", b.GetTypeString())`
$DIR/internal/s3select/sql/value_test.go:128:23-128:39: `.GetTypeString()`
$DIR/internal/s3select/sql/value_test.go:128:48-128:64: `.GetTypeString()`
$DIR/internal/s3select/sql/value_test.go:140:4-147:6: `tests = append(tests, test{
				name: fmt.Sprint(a.GetTypeString(), "!=", b.GetTypeString()),
				fields: fields{
					a: *a, b: *b,
				},
				// Only Null == Null
				wantOk: a.IsNull() && b.IsNull() && i == 0 && j == 0,
			})`
$DIR/internal/s3select/sql/value_test.go:141:14-141:65: `.Sprint(a.GetTypeString(), "!=", b.GetTypeString())`
$DIR/internal/s3select/sql/value_test.go:141:23-141:39: `.GetTypeString()`
$DIR/internal/s3select/sql/value_test.go:141:48-141:64: `.GetTypeString()`
$DIR/internal/s3select/sql/value_test.go:146:14-146:23: `.IsNull()`
$DIR/internal/s3select/sql/value_test.go:146:28-146:37: `.IsNull()`
$DIR/internal/s3select/sql/value_test.go:151:3-155:5: `t.Run(tt.name, func(t *testing.T) {
			if gotOk := tt.fields.a.Equals(tt.fields.b); gotOk != tt.wantOk {
				t.Errorf("Equals() = %v, want %v", gotOk, tt.wantOk)
			}
		})`
$DIR/internal/s3select/sql/value_test.go:151:4-155:5: `.Run(tt.name, func(t *testing.T) {
			if gotOk := tt.fields.a.Equals(tt.fields.b); gotOk != tt.wantOk {
				t.Errorf("Equals() = %v, want %v", gotOk, tt.wantOk)
			}
		})`
$DIR/internal/s3select/sql/value_test.go:152:18-152:47: `.fields.a.Equals(tt.fields.b)`
$DIR/internal/s3select/sql/value_test.go:160:2-164:3: `type test struct {
		name    string
		want    string
		wantAlt string
	}`
$DIR/internal/s3select/sql/value_test.go:168:31-168:40: `.String()`
$DIR/internal/s3select/sql/value_test.go:173:31-173:40: `.String()`
$DIR/internal/s3select/sql/value_test.go:178:31-178:40: `.String()`
$DIR/internal/s3select/sql/value_test.go:183:31-183:40: `.String()`
$DIR/internal/s3select/sql/value_test.go:188:31-188:40: `.String()`
$DIR/internal/s3select/sql/value_test.go:193:31-193:40: `.String()`
$DIR/internal/s3select/sql/value_test.go:198:31-198:40: `.String()`
$DIR/internal/s3select/sql/value_test.go:205:3-214:5: `t.Run(tt.name, func(t *testing.T) {
			v := valueBuilders[i]()
			vAlt := altValueBuilders[i]()
			if got := v.CSVString(); got != tt.want {
				t.Errorf("CSVString() = %v, want %v", got, tt.want)
			}
			if got := vAlt.CSVString(); got != tt.wantAlt {
				t.Errorf("CSVString() = %v, want %v", got, tt.wantAlt)
			}
		})`
$DIR/internal/s3select/sql/value_test.go:205:4-214:5: `.Run(tt.name, func(t *testing.T) {
			v := valueBuilders[i]()
			vAlt := altValueBuilders[i]()
			if got := v.CSVString(); got != tt.want {
				t.Errorf("CSVString() = %v, want %v", got, tt.want)
			}
			if got := vAlt.CSVString(); got != tt.wantAlt {
				t.Errorf("CSVString() = %v, want %v", got, tt.wantAlt)
			}
		})`
$DIR/internal/s3select/sql/value_test.go:208:15-208:27: `.CSVString()`
$DIR/internal/s3select/sql/value_test.go:211:18-211:30: `.CSVString()`
$DIR/internal/s3select/sql/value_test.go:219:2-221:3: `type fields struct {
		value interface{}
	}`
$DIR/internal/s3select/sql/value_test.go:271:26-271:55: `.FormatInt(math.MaxInt64, 10)`
$DIR/internal/s3select/sql/value_test.go:279:26-279:55: `.FormatInt(math.MinInt64, 10)`
$DIR/internal/s3select/sql/value_test.go:353:3-364:5: `t.Run(tt.name, func(t *testing.T) {
			v := &Value{
				value: tt.fields.value,
			}
			got, got1 := v.bytesToInt()
			if got != tt.want {
				t.Errorf("bytesToInt() got = %v, want %v", got, tt.want)
			}
			if got1 != tt.wantOK {
				t.Errorf("bytesToInt() got1 = %v, want %v", got1, tt.wantOK)
			}
		})`
$DIR/internal/s3select/sql/value_test.go:353:4-364:5: `.Run(tt.name, func(t *testing.T) {
			v := &Value{
				value: tt.fields.value,
			}
			got, got1 := v.bytesToInt()
			if got != tt.want {
				t.Errorf("bytesToInt() got = %v, want %v", got, tt.want)
			}
			if got1 != tt.wantOK {
				t.Errorf("bytesToInt() got1 = %v, want %v", got1, tt.wantOK)
			}
		})`
$DIR/internal/s3select/sql/value_test.go:357:18-357:31: `.bytesToInt()`
$DIR/internal/s3select/sql/value_test.go:369:2-371:3: `type fields struct {
		value interface{}
	}`
$DIR/internal/s3select/sql/value_test.go:422:26-422:55: `.FormatInt(math.MaxInt64, 10)`
$DIR/internal/s3select/sql/value_test.go:430:26-430:55: `.FormatInt(math.MinInt64, 10)`
$DIR/internal/s3select/sql/value_test.go:456:26-456:68: `.FormatFloat(math.MaxFloat64, 'g', -1, 64)`
$DIR/internal/s3select/sql/value_test.go:464:26-464:69: `.FormatFloat(-math.MaxFloat64, 'g', -1, 64)`
$DIR/internal/s3select/sql/value_test.go:475:16-475:23: `.Inf(1)`
$DIR/internal/s3select/sql/value_test.go:484:16-484:24: `.Inf(-1)`
$DIR/internal/s3select/sql/value_test.go:490:26-490:80: `.FormatFloat(math.SmallestNonzeroFloat64, 'g', -1, 64)`
$DIR/internal/s3select/sql/value_test.go:498:26-498:81: `.FormatFloat(-math.SmallestNonzeroFloat64, 'g', -1, 64)`
$DIR/internal/s3select/sql/value_test.go:554:3-566:5: `t.Run(tt.name, func(t *testing.T) {
			v := Value{
				value: tt.fields.value,
			}
			got, got1 := v.bytesToFloat()
			diff := math.Abs(got - tt.want)
			if diff > floatCmpTolerance {
				t.Errorf("bytesToFloat() got = %v, want %v", got, tt.want)
			}
			if got1 != tt.wantOK {
				t.Errorf("bytesToFloat() got1 = %v, want %v", got1, tt.wantOK)
			}
		})`
$DIR/internal/s3select/sql/value_test.go:554:4-566:5: `.Run(tt.name, func(t *testing.T) {
			v := Value{
				value: tt.fields.value,
			}
			got, got1 := v.bytesToFloat()
			diff := math.Abs(got - tt.want)
			if diff > floatCmpTolerance {
				t.Errorf("bytesToFloat() got = %v, want %v", got, tt.want)
			}
			if got1 != tt.wantOK {
				t.Errorf("bytesToFloat() got1 = %v, want %v", got1, tt.wantOK)
			}
		})`
$DIR/internal/s3select/sql/value_test.go:558:18-558:33: `.bytesToFloat()`
$DIR/internal/s3select/sql/value_test.go:559:16-559:35: `.Abs(got - tt.want)`
$DIR/internal/s3select/sql/value_test.go:571:2-573:3: `type fields struct {
		value interface{}
	}`
$DIR/internal/s3select/sql/value_test.go:670:3-681:5: `t.Run(tt.name, func(t *testing.T) {
			v := Value{
				value: tt.fields.value,
			}
			gotVal, gotOk := v.bytesToBool()
			if gotVal != tt.wantVal {
				t.Errorf("bytesToBool() gotVal = %v, want %v", gotVal, tt.wantVal)
			}
			if gotOk != tt.wantOk {
				t.Errorf("bytesToBool() gotOk = %v, want %v", gotOk, tt.wantOk)
			}
		})`
$DIR/internal/s3select/sql/value_test.go:670:4-681:5: `.Run(tt.name, func(t *testing.T) {
			v := Value{
				value: tt.fields.value,
			}
			gotVal, gotOk := v.bytesToBool()
			if gotVal != tt.wantVal {
				t.Errorf("bytesToBool() gotVal = %v, want %v", gotVal, tt.wantVal)
			}
			if gotOk != tt.wantOk {
				t.Errorf("bytesToBool() gotOk = %v, want %v", gotOk, tt.wantOk)
			}
		})`
$DIR/internal/s3select/sql/value_test.go:674:22-674:36: `.bytesToBool()`
$DIR/internal/store/batch_test.go:30:18-30:28: `.Add(i, i)`
$DIR/internal/store/batch_test.go:33:20-33:32: `.GetByKey(i)`
$DIR/internal/store/batch_test.go:37:14-37:28: `.Add(101, 101)`
$DIR/internal/store/batch_test.go:38:26-38:48: `.Is(err, ErrBatchFull)`
$DIR/internal/store/batch_test.go:41:11-41:20: `.IsFull()`
$DIR/internal/store/batch_test.go:44:19-44:25: `.Len()`
$DIR/internal/store/batch_test.go:48:27-48:36: `.GetAll()`
$DIR/internal/store/batch_test.go:58:2-58:24: `batchLen = batch.Len()`
$DIR/internal/store/batch_test.go:58:18-58:24: `.Len()`
$DIR/internal/store/batch_test.go:64:18-64:30: `.Add(99, 99)`
$DIR/internal/store/batch_test.go:68:19-68:32: `.GetByKey(99)`
$DIR/internal/store/batch_test.go:71:2-71:35: `keys, items, err = batch.GetAll()`
$DIR/internal/store/batch_test.go:71:26-71:35: `.GetAll()`
$DIR/internal/store/batch_test.go:83:18-83:28: `.Add(i, i)`
$DIR/internal/store/batch_test.go:86:20-86:32: `.GetByKey(i)`
$DIR/internal/store/batch_test.go:98:3-98:12: `wg.Add(1)`
$DIR/internal/store/batch_test.go:98:5-98:12: `.Add(1)`
$DIR/internal/store/batch_test.go:100:12-100:19: `.Done()`
$DIR/internal/store/batch_test.go:101:19-101:35: `.Add(item, item)`
$DIR/internal/store/batch_test.go:105:21-105:36: `.GetByKey(item)`
$DIR/internal/store/batch_test.go:110:2-110:11: `wg.Wait()`
$DIR/internal/store/batch_test.go:110:4-110:11: `.Wait()`
$DIR/internal/store/batch_test.go:112:27-112:36: `.GetAll()`
$DIR/internal/store/batch_test.go:122:19-122:25: `.Len()`
$DIR/internal/store/queuestore_test.go:69:18-69:32: `.Put(testItem)`
$DIR/internal/store/queuestore_test.go:74:21-74:28: `.List()`
$DIR/internal/store/queuestore_test.go:96:18-96:32: `.Put(testItem)`
$DIR/internal/store/queuestore_test.go:100:24-100:31: `.List()`
$DIR/internal/store/queuestore_test.go:107:23-107:65: `.Get(strings.TrimSuffix(key, testItemExt))`
$DIR/internal/store/queuestore_test.go:107:35-107:64: `.TrimSuffix(key, testItemExt)`
$DIR/internal/store/queuestore_test.go:111:15-111:41: `.DeepEqual(testItem, item)`
$DIR/internal/store/queuestore_test.go:133:18-133:32: `.Put(testItem)`
$DIR/internal/store/queuestore_test.go:137:24-137:31: `.List()`
$DIR/internal/store/queuestore_test.go:144:16-144:58: `.Del(strings.TrimSuffix(key, testItemExt))`
$DIR/internal/store/queuestore_test.go:144:28-144:57: `.TrimSuffix(key, testItemExt)`
$DIR/internal/store/queuestore_test.go:153:21-153:28: `.List()`
$DIR/internal/store/queuestore_test.go:175:18-175:32: `.Put(testItem)`
$DIR/internal/store/queuestore_test.go:180:17-180:31: `.Put(testItem)`
$DIR/internal/store/queuestore_test.go:197:18-197:32: `.Put(testItem)`
$DIR/internal/store/queuestore_test.go:202:21-202:28: `.List()`
$DIR/internal/store/queuestore_test.go:212:2-212:44: `store, err = setUpQueueStore(queueDir, 10)`
$DIR/internal/store/queuestore_test.go:216:2-216:27: `names, err = store.List()`
$DIR/internal/store/queuestore_test.go:216:20-216:27: `.List()`
$DIR/internal/store/queuestore_test.go:224:24-224:30: `.Len()`
$DIR/internal/store/queuestore_test.go:230:15-230:24: `.Del(key)`
$DIR/internal/store/queuestore_test.go:236:19-236:26: `.List()`
