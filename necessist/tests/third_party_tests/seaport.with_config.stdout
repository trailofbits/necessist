$DIR/test/advanced.spec.ts:159:7-159:74: `await set1155ApprovalForAll(seller, offererContract.address, true);`
$DIR/test/advanced.spec.ts:162:38-162:46: `.mul(10)`
$DIR/test/advanced.spec.ts:162:54-162:62: `.mul(10)`
$DIR/test/advanced.spec.ts:167:17-167:27: `.mul(1000)`
$DIR/test/advanced.spec.ts:168:17-168:27: `.mul(1000)`
$DIR/test/advanced.spec.ts:173:7-173:59: `offer[0].identifier = offer[0].identifierOrCriteria;`
$DIR/test/advanced.spec.ts:174:7-174:44: `offer[0].amount = offer[0].endAmount;`
$DIR/test/advanced.spec.ts:176:7-176:75: `consideration[0].identifier = consideration[0].identifierOrCriteria;`
$DIR/test/advanced.spec.ts:177:7-177:60: `consideration[0].amount = consideration[0].endAmount;`
$DIR/test/advanced.spec.ts:179:7-181:47: `await offererContract
        .connect(seller)
        .activate(offer[0], consideration[0]);`
$DIR/test/advanced.spec.ts:179:28-180:25: `
        .connect(seller)`
$DIR/test/advanced.spec.ts:180:25-181:46: `
        .activate(offer[0], consideration[0])`
$DIR/test/advanced.spec.ts:192:34-194:10: `.getContractOffererNonce(
          offererContract.address
        )`
$DIR/test/advanced.spec.ts:197:24-197:46: `.address.toLowerCase()`
$DIR/test/advanced.spec.ts:198:29-198:43: `.toHexString()`
$DIR/test/advanced.spec.ts:198:43-198:52: `.slice(2)`
$DIR/test/advanced.spec.ts:198:52-198:70: `.padStart(24, "0")`
$DIR/test/advanced.spec.ts:200:52-200:78: `.getOrderStatus(orderHash)`
$DIR/test/advanced.spec.ts:206:7-206:58: `order.parameters.offerer = offererContract.address;`
$DIR/test/advanced.spec.ts:207:7-207:27: `order.numerator = 1;`
$DIR/test/advanced.spec.ts:208:7-208:29: `order.denominator = 1;`
$DIR/test/advanced.spec.ts:209:7-209:30: `order.signature = "0x";`
$DIR/test/advanced.spec.ts:212:39-213:26: `
          .connect(buyer)`
$DIR/test/advanced.spec.ts:213:26-222:12: `
          .fulfillAdvancedOrder(
            order,
            [],
            toKey(0),
            ethers.constants.AddressZero,
            {
              value,
            }
          )`
$DIR/test/advanced.spec.ts:223:41-223:48: `.wait()`
$DIR/test/advanced.spec.ts:257:7-257:74: `await set1155ApprovalForAll(seller, offererContract.address, true);`
$DIR/test/advanced.spec.ts:260:38-260:46: `.mul(10)`
$DIR/test/advanced.spec.ts:260:54-260:62: `.mul(10)`
$DIR/test/advanced.spec.ts:265:17-265:27: `.mul(1000)`
$DIR/test/advanced.spec.ts:266:17-266:27: `.mul(1000)`
$DIR/test/advanced.spec.ts:271:7-271:59: `offer[0].identifier = offer[0].identifierOrCriteria;`
$DIR/test/advanced.spec.ts:272:7-272:44: `offer[0].amount = offer[0].endAmount;`
$DIR/test/advanced.spec.ts:274:7-274:75: `consideration[0].identifier = consideration[0].identifierOrCriteria;`
$DIR/test/advanced.spec.ts:275:7-275:60: `consideration[0].amount = consideration[0].endAmount;`
$DIR/test/advanced.spec.ts:277:7-279:47: `await offererContract
        .connect(seller)
        .activate(offer[0], consideration[0]);`
$DIR/test/advanced.spec.ts:277:28-278:25: `
        .connect(seller)`
$DIR/test/advanced.spec.ts:278:25-279:46: `
        .activate(offer[0], consideration[0])`
$DIR/test/advanced.spec.ts:290:34-292:10: `.getContractOffererNonce(
          offererContract.address
        )`
$DIR/test/advanced.spec.ts:295:24-295:46: `.address.toLowerCase()`
$DIR/test/advanced.spec.ts:296:29-296:43: `.toHexString()`
$DIR/test/advanced.spec.ts:296:43-296:52: `.slice(2)`
$DIR/test/advanced.spec.ts:296:52-296:70: `.padStart(24, "0")`
$DIR/test/advanced.spec.ts:298:52-298:78: `.getOrderStatus(orderHash)`
$DIR/test/advanced.spec.ts:304:7-304:58: `order.parameters.offerer = offererContract.address;`
$DIR/test/advanced.spec.ts:305:7-305:27: `order.numerator = 1;`
$DIR/test/advanced.spec.ts:306:7-306:29: `order.denominator = 1;`
$DIR/test/advanced.spec.ts:307:7-307:30: `order.signature = "0x";`
$DIR/test/advanced.spec.ts:309:37-309:66: `.parse(JSON.stringify(order))`
$DIR/test/advanced.spec.ts:309:48-309:65: `.stringify(order)`
$DIR/test/advanced.spec.ts:310:7-310:47: `orderWithoutOffer.parameters.offer = [];`
$DIR/test/advanced.spec.ts:313:39-314:26: `
          .connect(buyer)`
$DIR/test/advanced.spec.ts:314:26-323:12: `
          .fulfillAdvancedOrder(
            orderWithoutOffer,
            [],
            toKey(0),
            ethers.constants.AddressZero,
            {
              value,
            }
          )`
$DIR/test/advanced.spec.ts:324:41-324:48: `.wait()`
$DIR/test/advanced.spec.ts:358:7-358:74: `await set1155ApprovalForAll(seller, offererContract.address, true);`
$DIR/test/advanced.spec.ts:361:38-361:46: `.mul(10)`
$DIR/test/advanced.spec.ts:361:54-361:62: `.mul(10)`
$DIR/test/advanced.spec.ts:366:17-366:27: `.mul(1000)`
$DIR/test/advanced.spec.ts:367:17-367:27: `.mul(1000)`
$DIR/test/advanced.spec.ts:372:7-372:59: `offer[0].identifier = offer[0].identifierOrCriteria;`
$DIR/test/advanced.spec.ts:373:7-373:44: `offer[0].amount = offer[0].endAmount;`
$DIR/test/advanced.spec.ts:375:7-375:75: `consideration[0].identifier = consideration[0].identifierOrCriteria;`
$DIR/test/advanced.spec.ts:376:7-376:60: `consideration[0].amount = consideration[0].endAmount;`
$DIR/test/advanced.spec.ts:378:7-380:47: `await offererContract
        .connect(seller)
        .activate(offer[0], consideration[0]);`
$DIR/test/advanced.spec.ts:378:28-379:25: `
        .connect(seller)`
$DIR/test/advanced.spec.ts:379:25-380:46: `
        .activate(offer[0], consideration[0])`
$DIR/test/advanced.spec.ts:391:34-393:10: `.getContractOffererNonce(
          offererContract.address
        )`
$DIR/test/advanced.spec.ts:396:24-396:46: `.address.toLowerCase()`
$DIR/test/advanced.spec.ts:397:29-397:43: `.toHexString()`
$DIR/test/advanced.spec.ts:397:43-397:52: `.slice(2)`
$DIR/test/advanced.spec.ts:397:52-397:70: `.padStart(24, "0")`
$DIR/test/advanced.spec.ts:399:52-399:78: `.getOrderStatus(orderHash)`
$DIR/test/advanced.spec.ts:405:7-405:58: `order.parameters.offerer = offererContract.address;`
$DIR/test/advanced.spec.ts:406:7-406:27: `order.numerator = 1;`
$DIR/test/advanced.spec.ts:407:7-407:29: `order.denominator = 1;`
$DIR/test/advanced.spec.ts:408:7-408:30: `order.signature = "0x";`
$DIR/test/advanced.spec.ts:410:47-410:76: `.parse(JSON.stringify(order))`
$DIR/test/advanced.spec.ts:410:58-410:75: `.stringify(order)`
$DIR/test/advanced.spec.ts:411:7-412:54: `orderWithSmallerOfferAmount.parameters.offer[0].startAmount =
        order.parameters.offer[0].startAmount.sub(1);`
$DIR/test/advanced.spec.ts:412:34-412:53: `.startAmount.sub(1)`
$DIR/test/advanced.spec.ts:413:7-414:52: `orderWithSmallerOfferAmount.parameters.offer[0].endAmount =
        order.parameters.offer[0].endAmount.sub(1);`
$DIR/test/advanced.spec.ts:414:34-414:51: `.endAmount.sub(1)`
$DIR/test/advanced.spec.ts:417:39-418:26: `
          .connect(buyer)`
$DIR/test/advanced.spec.ts:418:26-427:12: `
          .fulfillAdvancedOrder(
            orderWithSmallerOfferAmount,
            [],
            toKey(0),
            ethers.constants.AddressZero,
            {
              value,
            }
          )`
$DIR/test/advanced.spec.ts:428:41-428:48: `.wait()`
$DIR/test/advanced.spec.ts:462:7-462:74: `await set1155ApprovalForAll(seller, offererContract.address, true);`
$DIR/test/advanced.spec.ts:465:38-465:46: `.mul(10)`
$DIR/test/advanced.spec.ts:465:54-465:62: `.mul(10)`
$DIR/test/advanced.spec.ts:470:17-470:27: `.mul(1000)`
$DIR/test/advanced.spec.ts:471:17-471:27: `.mul(1000)`
$DIR/test/advanced.spec.ts:476:7-476:59: `offer[0].identifier = offer[0].identifierOrCriteria;`
$DIR/test/advanced.spec.ts:477:7-477:44: `offer[0].amount = offer[0].endAmount;`
$DIR/test/advanced.spec.ts:479:7-479:75: `consideration[0].identifier = consideration[0].identifierOrCriteria;`
$DIR/test/advanced.spec.ts:480:7-480:60: `consideration[0].amount = consideration[0].endAmount;`
$DIR/test/advanced.spec.ts:482:7-484:47: `await offererContract
        .connect(seller)
        .activate(offer[0], consideration[0]);`
$DIR/test/advanced.spec.ts:482:28-483:25: `
        .connect(seller)`
$DIR/test/advanced.spec.ts:483:25-484:46: `
        .activate(offer[0], consideration[0])`
$DIR/test/advanced.spec.ts:495:34-497:10: `.getContractOffererNonce(
          offererContract.address
        )`
$DIR/test/advanced.spec.ts:500:24-500:46: `.address.toLowerCase()`
$DIR/test/advanced.spec.ts:501:29-501:43: `.toHexString()`
$DIR/test/advanced.spec.ts:501:43-501:52: `.slice(2)`
$DIR/test/advanced.spec.ts:501:52-501:70: `.padStart(24, "0")`
$DIR/test/advanced.spec.ts:503:52-503:78: `.getOrderStatus(orderHash)`
$DIR/test/advanced.spec.ts:509:7-509:58: `order.parameters.offerer = offererContract.address;`
$DIR/test/advanced.spec.ts:510:7-510:27: `order.numerator = 1;`
$DIR/test/advanced.spec.ts:511:7-511:29: `order.denominator = 1;`
$DIR/test/advanced.spec.ts:512:7-512:30: `order.signature = "0x";`
$DIR/test/advanced.spec.ts:514:42-514:71: `.parse(JSON.stringify(order))`
$DIR/test/advanced.spec.ts:514:53-514:70: `.stringify(order)`
$DIR/test/advanced.spec.ts:515:7-515:63: `orderWithCriteriaOffer.parameters.offer[0].itemType = 5;`
$DIR/test/advanced.spec.ts:516:7-516:75: `orderWithCriteriaOffer.parameters.offer[0].identifierOrCriteria = 0;`
$DIR/test/advanced.spec.ts:519:39-520:26: `
          .connect(buyer)`
$DIR/test/advanced.spec.ts:520:26-529:12: `
          .fulfillAdvancedOrder(
            orderWithCriteriaOffer,
            [],
            toKey(0),
            ethers.constants.AddressZero,
            {
              value,
            }
          )`
$DIR/test/advanced.spec.ts:530:41-530:48: `.wait()`
$DIR/test/advanced.spec.ts:566:7-566:74: `await set1155ApprovalForAll(seller, offererContract.address, true);`
$DIR/test/advanced.spec.ts:574:17-574:27: `.mul(1000)`
$DIR/test/advanced.spec.ts:575:17-575:27: `.mul(1000)`
$DIR/test/advanced.spec.ts:581:7-581:29: `offer[0].itemType = 5;`
$DIR/test/advanced.spec.ts:582:7-582:59: `offer[0].identifier = offer[0].identifierOrCriteria;`
$DIR/test/advanced.spec.ts:583:7-583:44: `offer[0].amount = offer[0].endAmount;`
$DIR/test/advanced.spec.ts:585:7-585:75: `consideration[0].identifier = consideration[0].identifierOrCriteria;`
$DIR/test/advanced.spec.ts:586:7-586:60: `consideration[0].amount = consideration[0].endAmount;`
$DIR/test/advanced.spec.ts:588:7-590:66: `await offererContract
        .connect(seller)
        .activateWithCriteria(offer[0], consideration[0], nftId);`
$DIR/test/advanced.spec.ts:588:28-589:25: `
        .connect(seller)`
$DIR/test/advanced.spec.ts:589:25-590:65: `
        .activateWithCriteria(offer[0], consideration[0], nftId)`
$DIR/test/advanced.spec.ts:605:34-607:10: `.getContractOffererNonce(
          offererContract.address
        )`
$DIR/test/advanced.spec.ts:610:24-610:46: `.address.toLowerCase()`
$DIR/test/advanced.spec.ts:611:29-611:43: `.toHexString()`
$DIR/test/advanced.spec.ts:611:43-611:52: `.slice(2)`
$DIR/test/advanced.spec.ts:611:52-611:70: `.padStart(24, "0")`
$DIR/test/advanced.spec.ts:613:52-613:78: `.getOrderStatus(orderHash)`
$DIR/test/advanced.spec.ts:620:7-620:58: `order.parameters.offerer = offererContract.address;`
$DIR/test/advanced.spec.ts:621:7-621:27: `order.numerator = 1;`
$DIR/test/advanced.spec.ts:622:7-622:29: `order.denominator = 1;`
$DIR/test/advanced.spec.ts:623:7-623:30: `order.signature = "0x";`
$DIR/test/advanced.spec.ts:625:7-625:52: `order.parameters.offer[0].identifier = nftId;`
$DIR/test/advanced.spec.ts:626:42-626:71: `.parse(JSON.stringify(order))`
$DIR/test/advanced.spec.ts:626:53-626:70: `.stringify(order)`
$DIR/test/advanced.spec.ts:629:39-630:26: `
          .connect(buyer)`
$DIR/test/advanced.spec.ts:630:26-639:12: `
          .fulfillAdvancedOrder(
            orderWithCriteriaOffer,
            criteriaResolvers,
            toKey(0),
            ethers.constants.AddressZero,
            {
              value,
            }
          )`
$DIR/test/advanced.spec.ts:640:41-640:48: `.wait()`
$DIR/test/advanced.spec.ts:641:55-643:10: `.getOrderStatus(
          orderHash
        )`
$DIR/test/advanced.spec.ts:682:7-682:74: `await set1155ApprovalForAll(seller, offererContract.address, true);`
$DIR/test/advanced.spec.ts:685:38-685:46: `.mul(10)`
$DIR/test/advanced.spec.ts:685:54-685:62: `.mul(10)`
$DIR/test/advanced.spec.ts:690:17-690:27: `.mul(1000)`
$DIR/test/advanced.spec.ts:691:17-691:27: `.mul(1000)`
$DIR/test/advanced.spec.ts:696:7-696:59: `offer[0].identifier = offer[0].identifierOrCriteria;`
$DIR/test/advanced.spec.ts:697:7-697:44: `offer[0].amount = offer[0].endAmount;`
$DIR/test/advanced.spec.ts:699:7-699:75: `consideration[0].identifier = consideration[0].identifierOrCriteria;`
$DIR/test/advanced.spec.ts:700:7-700:60: `consideration[0].amount = consideration[0].endAmount;`
$DIR/test/advanced.spec.ts:702:7-704:47: `await offererContract
        .connect(seller)
        .activate(offer[0], consideration[0]);`
$DIR/test/advanced.spec.ts:702:28-703:25: `
        .connect(seller)`
$DIR/test/advanced.spec.ts:703:25-704:46: `
        .activate(offer[0], consideration[0])`
$DIR/test/advanced.spec.ts:715:34-717:10: `.getContractOffererNonce(
          offererContract.address
        )`
$DIR/test/advanced.spec.ts:720:24-720:46: `.address.toLowerCase()`
$DIR/test/advanced.spec.ts:721:29-721:43: `.toHexString()`
$DIR/test/advanced.spec.ts:721:43-721:52: `.slice(2)`
$DIR/test/advanced.spec.ts:721:52-721:70: `.padStart(24, "0")`
$DIR/test/advanced.spec.ts:723:52-723:78: `.getOrderStatus(orderHash)`
$DIR/test/advanced.spec.ts:729:7-729:58: `order.parameters.offerer = offererContract.address;`
$DIR/test/advanced.spec.ts:730:7-730:27: `order.numerator = 1;`
$DIR/test/advanced.spec.ts:731:7-731:29: `order.denominator = 1;`
$DIR/test/advanced.spec.ts:732:7-732:30: `order.signature = "0x";`
$DIR/test/advanced.spec.ts:734:41-734:70: `.parse(JSON.stringify(order))`
$DIR/test/advanced.spec.ts:734:52-734:69: `.stringify(order)`
$DIR/test/advanced.spec.ts:735:7-736:54: `orderWithSmallerOffer.parameters.offer[0].startAmount =
        order.parameters.offer[0].startAmount.div(2);`
$DIR/test/advanced.spec.ts:736:34-736:53: `.startAmount.div(2)`
$DIR/test/advanced.spec.ts:737:7-738:52: `orderWithSmallerOffer.parameters.offer[0].endAmount =
        order.parameters.offer[0].endAmount.div(2);`
$DIR/test/advanced.spec.ts:738:34-738:51: `.endAmount.div(2)`
$DIR/test/advanced.spec.ts:740:7-741:54: `order.parameters.offer[0].startAmount =
        order.parameters.offer[0].startAmount.div(2);`
$DIR/test/advanced.spec.ts:741:34-741:53: `.startAmount.div(2)`
$DIR/test/advanced.spec.ts:742:7-743:52: `order.parameters.offer[0].endAmount =
        order.parameters.offer[0].endAmount.div(2);`
$DIR/test/advanced.spec.ts:743:34-743:51: `.endAmount.div(2)`
$DIR/test/advanced.spec.ts:744:12-744:61: `.parameters.offer.push(order.parameters.offer[0])`
$DIR/test/advanced.spec.ts:746:7-746:63: `await offererContract.connect(seller).extendAvailable();`
$DIR/test/advanced.spec.ts:746:28-746:44: `.connect(seller)`
$DIR/test/advanced.spec.ts:746:44-746:62: `.extendAvailable()`
$DIR/test/advanced.spec.ts:749:37-750:24: `
        .connect(buyer)`
$DIR/test/advanced.spec.ts:750:24-759:10: `
        .fulfillAdvancedOrder(
          orderWithSmallerOffer,
          [],
          toKey(0),
          ethers.constants.AddressZero,
          {
            value,
          }
        )`
$DIR/test/advanced.spec.ts:760:39-760:46: `.wait()`
$DIR/test/advanced.spec.ts:791:7-791:74: `await set1155ApprovalForAll(seller, offererContract.address, true);`
$DIR/test/advanced.spec.ts:794:38-794:46: `.mul(10)`
$DIR/test/advanced.spec.ts:794:54-794:62: `.mul(10)`
$DIR/test/advanced.spec.ts:799:17-799:27: `.mul(1000)`
$DIR/test/advanced.spec.ts:800:17-800:27: `.mul(1000)`
$DIR/test/advanced.spec.ts:805:7-805:59: `offer[0].identifier = offer[0].identifierOrCriteria;`
$DIR/test/advanced.spec.ts:806:7-806:44: `offer[0].amount = offer[0].endAmount;`
$DIR/test/advanced.spec.ts:808:7-808:75: `consideration[0].identifier = consideration[0].identifierOrCriteria;`
$DIR/test/advanced.spec.ts:809:7-809:60: `consideration[0].amount = consideration[0].endAmount;`
$DIR/test/advanced.spec.ts:811:7-813:47: `await offererContract
        .connect(seller)
        .activate(offer[0], consideration[0]);`
$DIR/test/advanced.spec.ts:811:28-812:25: `
        .connect(seller)`
$DIR/test/advanced.spec.ts:812:25-813:46: `
        .activate(offer[0], consideration[0])`
$DIR/test/advanced.spec.ts:824:34-826:10: `.getContractOffererNonce(
          offererContract.address
        )`
$DIR/test/advanced.spec.ts:829:24-829:46: `.address.toLowerCase()`
$DIR/test/advanced.spec.ts:830:29-830:43: `.toHexString()`
$DIR/test/advanced.spec.ts:830:43-830:52: `.slice(2)`
$DIR/test/advanced.spec.ts:830:52-830:70: `.padStart(24, "0")`
$DIR/test/advanced.spec.ts:832:52-832:78: `.getOrderStatus(orderHash)`
$DIR/test/advanced.spec.ts:838:7-838:58: `order.parameters.offerer = offererContract.address;`
$DIR/test/advanced.spec.ts:839:7-839:27: `order.numerator = 1;`
$DIR/test/advanced.spec.ts:840:7-840:29: `order.denominator = 1;`
$DIR/test/advanced.spec.ts:841:7-841:30: `order.signature = "0x";`
$DIR/test/advanced.spec.ts:843:47-843:76: `.parse(JSON.stringify(order))`
$DIR/test/advanced.spec.ts:843:58-843:75: `.stringify(order)`
$DIR/test/advanced.spec.ts:844:34-850:8: `.parameters.consideration.push(
        JSON.parse(
          JSON.stringify(
            orderWithExtraConsideration.parameters.consideration[0]
          )
        )
      )`
$DIR/test/advanced.spec.ts:845:13-849:10: `.parse(
          JSON.stringify(
            orderWithExtraConsideration.parameters.consideration[0]
          )
        )`
$DIR/test/advanced.spec.ts:846:15-848:12: `.stringify(
            orderWithExtraConsideration.parameters.consideration[0]
          )`
$DIR/test/advanced.spec.ts:851:7-851:76: `orderWithExtraConsideration.parameters.consideration[1].itemType = 1;`
$DIR/test/advanced.spec.ts:852:7-853:30: `orderWithExtraConsideration.parameters.consideration[1].token =
        "0x".padEnd(42, "1");`
$DIR/test/advanced.spec.ts:853:13-853:29: `.padEnd(42, "1")`
$DIR/test/advanced.spec.ts:854:7-854:80: `orderWithExtraConsideration.parameters.totalOriginalConsiderationItems++;`
$DIR/test/advanced.spec.ts:857:39-858:26: `
          .connect(buyer)`
$DIR/test/advanced.spec.ts:858:26-867:12: `
          .fulfillAdvancedOrder(
            orderWithExtraConsideration,
            [],
            toKey(0),
            ethers.constants.AddressZero,
            {
              value,
            }
          )`
$DIR/test/advanced.spec.ts:868:41-868:48: `.wait()`
$DIR/test/advanced.spec.ts:902:7-902:74: `await set1155ApprovalForAll(seller, offererContract.address, true);`
$DIR/test/advanced.spec.ts:905:38-905:46: `.mul(10)`
$DIR/test/advanced.spec.ts:905:54-905:62: `.mul(10)`
$DIR/test/advanced.spec.ts:910:17-910:27: `.mul(1000)`
$DIR/test/advanced.spec.ts:911:17-911:27: `.mul(1000)`
$DIR/test/advanced.spec.ts:916:7-916:59: `offer[0].identifier = offer[0].identifierOrCriteria;`
$DIR/test/advanced.spec.ts:917:7-917:44: `offer[0].amount = offer[0].endAmount;`
$DIR/test/advanced.spec.ts:919:7-919:75: `consideration[0].identifier = consideration[0].identifierOrCriteria;`
$DIR/test/advanced.spec.ts:920:7-920:60: `consideration[0].amount = consideration[0].endAmount;`
$DIR/test/advanced.spec.ts:922:7-924:47: `await offererContract
        .connect(seller)
        .activate(offer[0], consideration[0]);`
$DIR/test/advanced.spec.ts:922:28-923:25: `
        .connect(seller)`
$DIR/test/advanced.spec.ts:923:25-924:46: `
        .activate(offer[0], consideration[0])`
$DIR/test/advanced.spec.ts:935:34-937:10: `.getContractOffererNonce(
          offererContract.address
        )`
$DIR/test/advanced.spec.ts:940:24-940:46: `.address.toLowerCase()`
$DIR/test/advanced.spec.ts:941:29-941:43: `.toHexString()`
$DIR/test/advanced.spec.ts:941:43-941:52: `.slice(2)`
$DIR/test/advanced.spec.ts:941:52-941:70: `.padStart(24, "0")`
$DIR/test/advanced.spec.ts:943:52-943:78: `.getOrderStatus(orderHash)`
$DIR/test/advanced.spec.ts:949:7-949:58: `order.parameters.offerer = offererContract.address;`
$DIR/test/advanced.spec.ts:950:7-950:27: `order.numerator = 1;`
$DIR/test/advanced.spec.ts:951:7-951:29: `order.denominator = 1;`
$DIR/test/advanced.spec.ts:952:7-952:30: `order.signature = "0x";`
$DIR/test/advanced.spec.ts:954:51-954:80: `.parse(JSON.stringify(order))`
$DIR/test/advanced.spec.ts:954:62-954:79: `.stringify(order)`
$DIR/test/advanced.spec.ts:955:7-956:62: `orderWithIncreasedConsideration.parameters.consideration[0].startAmount =
        order.parameters.consideration[0].startAmount.add(1);`
$DIR/test/advanced.spec.ts:956:42-956:61: `.startAmount.add(1)`
$DIR/test/advanced.spec.ts:957:7-958:60: `orderWithIncreasedConsideration.parameters.consideration[0].endAmount =
        order.parameters.consideration[0].endAmount.add(1);`
$DIR/test/advanced.spec.ts:958:42-958:59: `.endAmount.add(1)`
$DIR/test/advanced.spec.ts:961:39-962:26: `
          .connect(buyer)`
$DIR/test/advanced.spec.ts:962:26-971:12: `
          .fulfillAdvancedOrder(
            orderWithIncreasedConsideration,
            [],
            toKey(0),
            ethers.constants.AddressZero,
            {
              value,
            }
          )`
$DIR/test/advanced.spec.ts:972:41-972:48: `.wait()`
$DIR/test/advanced.spec.ts:1006:7-1006:74: `await set1155ApprovalForAll(seller, offererContract.address, true);`
$DIR/test/advanced.spec.ts:1009:38-1009:46: `.mul(10)`
$DIR/test/advanced.spec.ts:1009:54-1009:62: `.mul(10)`
$DIR/test/advanced.spec.ts:1019:22-1019:30: `.mul(10)`
$DIR/test/advanced.spec.ts:1020:22-1020:30: `.mul(10)`
$DIR/test/advanced.spec.ts:1026:7-1026:59: `offer[0].identifier = offer[0].identifierOrCriteria;`
$DIR/test/advanced.spec.ts:1027:7-1027:44: `offer[0].amount = offer[0].endAmount;`
$DIR/test/advanced.spec.ts:1029:7-1029:75: `consideration[0].identifier = consideration[0].identifierOrCriteria;`
$DIR/test/advanced.spec.ts:1030:7-1030:60: `consideration[0].amount = consideration[0].endAmount;`
$DIR/test/advanced.spec.ts:1032:7-1034:47: `await offererContract
        .connect(seller)
        .activate(offer[0], consideration[0]);`
$DIR/test/advanced.spec.ts:1032:28-1033:25: `
        .connect(seller)`
$DIR/test/advanced.spec.ts:1033:25-1034:46: `
        .activate(offer[0], consideration[0])`
$DIR/test/advanced.spec.ts:1045:34-1047:10: `.getContractOffererNonce(
          offererContract.address
        )`
$DIR/test/advanced.spec.ts:1050:24-1050:46: `.address.toLowerCase()`
$DIR/test/advanced.spec.ts:1051:29-1051:43: `.toHexString()`
$DIR/test/advanced.spec.ts:1051:43-1051:52: `.slice(2)`
$DIR/test/advanced.spec.ts:1051:52-1051:70: `.padStart(24, "0")`
$DIR/test/advanced.spec.ts:1053:52-1053:78: `.getOrderStatus(orderHash)`
$DIR/test/advanced.spec.ts:1059:7-1059:58: `order.parameters.offerer = offererContract.address;`
$DIR/test/advanced.spec.ts:1060:7-1060:27: `order.numerator = 1;`
$DIR/test/advanced.spec.ts:1061:7-1061:29: `order.denominator = 1;`
$DIR/test/advanced.spec.ts:1062:7-1062:30: `order.signature = "0x";`
$DIR/test/advanced.spec.ts:1064:50-1064:79: `.parse(JSON.stringify(order))`
$DIR/test/advanced.spec.ts:1064:61-1064:78: `.stringify(order)`
$DIR/test/advanced.spec.ts:1065:7-1065:79: `orderWithCriteriaConsideration.parameters.consideration[0].itemType = 5;`
$DIR/test/advanced.spec.ts:1066:7-1066:91: `orderWithCriteriaConsideration.parameters.consideration[0].identifierOrCriteria = 0;`
$DIR/test/advanced.spec.ts:1069:39-1070:26: `
          .connect(buyer)`
$DIR/test/advanced.spec.ts:1070:26-1079:12: `
          .fulfillAdvancedOrder(
            orderWithCriteriaConsideration,
            [],
            toKey(0),
            ethers.constants.AddressZero,
            {
              value,
            }
          )`
$DIR/test/advanced.spec.ts:1080:41-1080:48: `.wait()`
$DIR/test/advanced.spec.ts:1107:7-1107:55: `await faucet(offererContract.address, provider);`
$DIR/test/advanced.spec.ts:1125:7-1125:59: `offer[0].identifier = offer[0].identifierOrCriteria;`
$DIR/test/advanced.spec.ts:1126:7-1126:44: `offer[0].amount = offer[0].endAmount;`
$DIR/test/advanced.spec.ts:1128:7-1128:75: `consideration[0].identifier = consideration[0].identifierOrCriteria;`
$DIR/test/advanced.spec.ts:1129:7-1129:60: `consideration[0].amount = consideration[0].endAmount;`
$DIR/test/advanced.spec.ts:1131:7-1133:47: `await offererContract
        .connect(seller)
        .activate(offer[0], consideration[0]);`
$DIR/test/advanced.spec.ts:1131:28-1132:25: `
        .connect(seller)`
$DIR/test/advanced.spec.ts:1132:25-1133:46: `
        .activate(offer[0], consideration[0])`
$DIR/test/advanced.spec.ts:1144:34-1146:10: `.getContractOffererNonce(
          offererContract.address
        )`
$DIR/test/advanced.spec.ts:1149:24-1149:46: `.address.toLowerCase()`
$DIR/test/advanced.spec.ts:1150:29-1150:43: `.toHexString()`
$DIR/test/advanced.spec.ts:1150:43-1150:52: `.slice(2)`
$DIR/test/advanced.spec.ts:1150:52-1150:70: `.padStart(24, "0")`
$DIR/test/advanced.spec.ts:1152:52-1152:78: `.getOrderStatus(orderHash)`
$DIR/test/advanced.spec.ts:1158:7-1158:58: `order.parameters.offerer = offererContract.address;`
$DIR/test/advanced.spec.ts:1159:7-1159:27: `order.numerator = 1;`
$DIR/test/advanced.spec.ts:1160:7-1160:29: `order.denominator = 1;`
$DIR/test/advanced.spec.ts:1161:7-1161:30: `order.signature = "0x";`
$DIR/test/advanced.spec.ts:1164:39-1165:26: `
          .connect(buyer)`
$DIR/test/advanced.spec.ts:1165:26-1171:12: `
          .fulfillAdvancedOrder(
            order,
            [],
            toKey(0),
            ethers.constants.AddressZero
          )`
$DIR/test/advanced.spec.ts:1172:41-1172:48: `.wait()`
$DIR/test/advanced.spec.ts:1206:7-1206:74: `await set1155ApprovalForAll(seller, offererContract.address, true);`
$DIR/test/advanced.spec.ts:1209:38-1209:46: `.mul(10)`
$DIR/test/advanced.spec.ts:1209:54-1209:62: `.mul(10)`
$DIR/test/advanced.spec.ts:1214:17-1214:27: `.mul(1000)`
$DIR/test/advanced.spec.ts:1215:17-1215:27: `.mul(1000)`
$DIR/test/advanced.spec.ts:1220:7-1220:59: `offer[0].identifier = offer[0].identifierOrCriteria;`
$DIR/test/advanced.spec.ts:1221:7-1221:44: `offer[0].amount = offer[0].endAmount;`
$DIR/test/advanced.spec.ts:1222:7-1222:56: `offer[0].startAmount = offer[0].endAmount.add(1);`
$DIR/test/advanced.spec.ts:1222:38-1222:55: `.endAmount.add(1)`
$DIR/test/advanced.spec.ts:1224:7-1224:75: `consideration[0].identifier = consideration[0].identifierOrCriteria;`
$DIR/test/advanced.spec.ts:1225:7-1225:60: `consideration[0].amount = consideration[0].endAmount;`
$DIR/test/advanced.spec.ts:1227:7-1229:47: `await offererContract
        .connect(seller)
        .activate(offer[0], consideration[0]);`
$DIR/test/advanced.spec.ts:1227:28-1228:25: `
        .connect(seller)`
$DIR/test/advanced.spec.ts:1228:25-1229:46: `
        .activate(offer[0], consideration[0])`
$DIR/test/advanced.spec.ts:1240:34-1242:10: `.getContractOffererNonce(
          offererContract.address
        )`
$DIR/test/advanced.spec.ts:1245:24-1245:46: `.address.toLowerCase()`
$DIR/test/advanced.spec.ts:1246:29-1246:43: `.toHexString()`
$DIR/test/advanced.spec.ts:1246:43-1246:52: `.slice(2)`
$DIR/test/advanced.spec.ts:1246:52-1246:70: `.padStart(24, "0")`
$DIR/test/advanced.spec.ts:1248:52-1248:78: `.getOrderStatus(orderHash)`
$DIR/test/advanced.spec.ts:1254:7-1254:58: `order.parameters.offerer = offererContract.address;`
$DIR/test/advanced.spec.ts:1255:7-1255:27: `order.numerator = 1;`
$DIR/test/advanced.spec.ts:1256:7-1256:29: `order.denominator = 1;`
$DIR/test/advanced.spec.ts:1257:7-1257:30: `order.signature = "0x";`
$DIR/test/advanced.spec.ts:1260:28-1261:26: `
          .connect(buyer)`
$DIR/test/advanced.spec.ts:1261:26-1264:13: `
          .fulfillAdvancedOrder(order, [], toKey(0), buyer.address, {
            value,
          })`
$DIR/test/advanced.spec.ts:1287:7-1287:74: `await set1155ApprovalForAll(seller, offererContract.address, true);`
$DIR/test/advanced.spec.ts:1290:38-1290:46: `.mul(10)`
$DIR/test/advanced.spec.ts:1290:54-1290:62: `.mul(10)`
$DIR/test/advanced.spec.ts:1295:17-1295:27: `.mul(1000)`
$DIR/test/advanced.spec.ts:1296:17-1296:27: `.mul(1000)`
$DIR/test/advanced.spec.ts:1301:7-1301:59: `offer[0].identifier = offer[0].identifierOrCriteria;`
$DIR/test/advanced.spec.ts:1302:7-1302:44: `offer[0].amount = offer[0].endAmount;`
$DIR/test/advanced.spec.ts:1304:7-1304:51: `offer[0].endAmount = offer[0].amount.add(1);`
$DIR/test/advanced.spec.ts:1304:36-1304:50: `.amount.add(1)`
$DIR/test/advanced.spec.ts:1306:7-1306:49: `offer[0].startAmount = offer[0].endAmount;`
$DIR/test/advanced.spec.ts:1308:7-1308:75: `consideration[0].identifier = consideration[0].identifierOrCriteria;`
$DIR/test/advanced.spec.ts:1309:7-1309:60: `consideration[0].amount = consideration[0].endAmount;`
$DIR/test/advanced.spec.ts:1311:7-1313:47: `await offererContract
        .connect(seller)
        .activate(offer[0], consideration[0]);`
$DIR/test/advanced.spec.ts:1311:28-1312:25: `
        .connect(seller)`
$DIR/test/advanced.spec.ts:1312:25-1313:46: `
        .activate(offer[0], consideration[0])`
$DIR/test/advanced.spec.ts:1324:34-1326:10: `.getContractOffererNonce(
          offererContract.address
        )`
$DIR/test/advanced.spec.ts:1329:24-1329:46: `.address.toLowerCase()`
$DIR/test/advanced.spec.ts:1330:29-1330:43: `.toHexString()`
$DIR/test/advanced.spec.ts:1330:43-1330:52: `.slice(2)`
$DIR/test/advanced.spec.ts:1330:52-1330:70: `.padStart(24, "0")`
$DIR/test/advanced.spec.ts:1332:52-1332:78: `.getOrderStatus(orderHash)`
$DIR/test/advanced.spec.ts:1338:7-1338:58: `order.parameters.offerer = offererContract.address;`
$DIR/test/advanced.spec.ts:1339:7-1339:27: `order.numerator = 1;`
$DIR/test/advanced.spec.ts:1340:7-1340:29: `order.denominator = 1;`
$DIR/test/advanced.spec.ts:1341:7-1341:30: `order.signature = "0x";`
$DIR/test/advanced.spec.ts:1344:28-1345:26: `
          .connect(buyer)`
$DIR/test/advanced.spec.ts:1345:26-1348:13: `
          .fulfillAdvancedOrder(order, [], toKey(0), buyer.address, {
            value,
          })`
$DIR/test/advanced.spec.ts:1371:7-1371:74: `await set1155ApprovalForAll(seller, offererContract.address, true);`
$DIR/test/advanced.spec.ts:1374:38-1374:46: `.mul(10)`
$DIR/test/advanced.spec.ts:1374:54-1374:62: `.mul(10)`
$DIR/test/advanced.spec.ts:1379:17-1379:27: `.mul(1000)`
$DIR/test/advanced.spec.ts:1380:17-1380:27: `.mul(1000)`
$DIR/test/advanced.spec.ts:1385:7-1385:59: `offer[0].identifier = offer[0].identifierOrCriteria;`
$DIR/test/advanced.spec.ts:1386:7-1386:44: `offer[0].amount = offer[0].endAmount;`
$DIR/test/advanced.spec.ts:1388:7-1388:75: `consideration[0].identifier = consideration[0].identifierOrCriteria;`
$DIR/test/advanced.spec.ts:1389:7-1389:60: `consideration[0].amount = consideration[0].endAmount;`
$DIR/test/advanced.spec.ts:1391:7-1393:47: `await offererContract
        .connect(seller)
        .activate(offer[0], consideration[0]);`
$DIR/test/advanced.spec.ts:1391:28-1392:25: `
        .connect(seller)`
$DIR/test/advanced.spec.ts:1392:25-1393:46: `
        .activate(offer[0], consideration[0])`
$DIR/test/advanced.spec.ts:1404:34-1406:10: `.getContractOffererNonce(
          offererContract.address
        )`
$DIR/test/advanced.spec.ts:1409:24-1409:46: `.address.toLowerCase()`
$DIR/test/advanced.spec.ts:1410:29-1410:43: `.toHexString()`
$DIR/test/advanced.spec.ts:1410:43-1410:52: `.slice(2)`
$DIR/test/advanced.spec.ts:1410:52-1410:70: `.padStart(24, "0")`
$DIR/test/advanced.spec.ts:1412:52-1412:78: `.getOrderStatus(orderHash)`
$DIR/test/advanced.spec.ts:1418:7-1418:58: `order.parameters.offerer = offererContract.address;`
$DIR/test/advanced.spec.ts:1419:7-1419:27: `order.numerator = 1;`
$DIR/test/advanced.spec.ts:1420:7-1420:29: `order.denominator = 1;`
$DIR/test/advanced.spec.ts:1421:7-1421:30: `order.signature = "0x";`
$DIR/test/advanced.spec.ts:1423:7-1423:46: `order.parameters.offer[0].itemType = 1;`
$DIR/test/advanced.spec.ts:1426:28-1427:26: `
          .connect(buyer)`
$DIR/test/advanced.spec.ts:1427:26-1430:13: `
          .fulfillAdvancedOrder(order, [], toKey(0), buyer.address, {
            value,
          })`
$DIR/test/advanced.spec.ts:1453:7-1453:74: `await set1155ApprovalForAll(seller, offererContract.address, true);`
$DIR/test/advanced.spec.ts:1456:38-1456:46: `.mul(10)`
$DIR/test/advanced.spec.ts:1456:54-1456:62: `.mul(10)`
$DIR/test/advanced.spec.ts:1461:17-1461:27: `.mul(1000)`
$DIR/test/advanced.spec.ts:1462:17-1462:27: `.mul(1000)`
$DIR/test/advanced.spec.ts:1467:7-1467:59: `offer[0].identifier = offer[0].identifierOrCriteria;`
$DIR/test/advanced.spec.ts:1468:7-1468:44: `offer[0].amount = offer[0].endAmount;`
$DIR/test/advanced.spec.ts:1470:7-1470:75: `consideration[0].identifier = consideration[0].identifierOrCriteria;`
$DIR/test/advanced.spec.ts:1471:7-1471:60: `consideration[0].amount = consideration[0].endAmount;`
$DIR/test/advanced.spec.ts:1473:7-1475:47: `await offererContract
        .connect(seller)
        .activate(offer[0], consideration[0]);`
$DIR/test/advanced.spec.ts:1473:28-1474:25: `
        .connect(seller)`
$DIR/test/advanced.spec.ts:1474:25-1475:46: `
        .activate(offer[0], consideration[0])`
$DIR/test/advanced.spec.ts:1486:34-1488:10: `.getContractOffererNonce(
          offererContract.address
        )`
$DIR/test/advanced.spec.ts:1491:24-1491:46: `.address.toLowerCase()`
$DIR/test/advanced.spec.ts:1492:29-1492:43: `.toHexString()`
$DIR/test/advanced.spec.ts:1492:43-1492:52: `.slice(2)`
$DIR/test/advanced.spec.ts:1492:52-1492:70: `.padStart(24, "0")`
$DIR/test/advanced.spec.ts:1494:52-1494:78: `.getOrderStatus(orderHash)`
$DIR/test/advanced.spec.ts:1500:7-1500:58: `order.parameters.offerer = offererContract.address;`
$DIR/test/advanced.spec.ts:1501:7-1501:27: `order.numerator = 1;`
$DIR/test/advanced.spec.ts:1502:7-1502:29: `order.denominator = 1;`
$DIR/test/advanced.spec.ts:1503:7-1503:30: `order.signature = "0x";`
$DIR/test/advanced.spec.ts:1505:7-1505:64: `order.parameters.offer[0].token = testERC1155Two.address;`
$DIR/test/advanced.spec.ts:1508:28-1509:26: `
          .connect(buyer)`
$DIR/test/advanced.spec.ts:1509:26-1512:13: `
          .fulfillAdvancedOrder(order, [], toKey(0), buyer.address, {
            value,
          })`
$DIR/test/advanced.spec.ts:1535:7-1535:74: `await set1155ApprovalForAll(seller, offererContract.address, true);`
$DIR/test/advanced.spec.ts:1538:38-1538:46: `.mul(10)`
$DIR/test/advanced.spec.ts:1538:54-1538:62: `.mul(10)`
$DIR/test/advanced.spec.ts:1543:17-1543:27: `.mul(1000)`
$DIR/test/advanced.spec.ts:1544:17-1544:27: `.mul(1000)`
$DIR/test/advanced.spec.ts:1549:7-1549:59: `offer[0].identifier = offer[0].identifierOrCriteria;`
$DIR/test/advanced.spec.ts:1550:7-1550:44: `offer[0].amount = offer[0].endAmount;`
$DIR/test/advanced.spec.ts:1552:7-1552:75: `consideration[0].identifier = consideration[0].identifierOrCriteria;`
$DIR/test/advanced.spec.ts:1553:7-1553:60: `consideration[0].amount = consideration[0].endAmount;`
$DIR/test/advanced.spec.ts:1555:7-1557:47: `await offererContract
        .connect(seller)
        .activate(offer[0], consideration[0]);`
$DIR/test/advanced.spec.ts:1555:28-1556:25: `
        .connect(seller)`
$DIR/test/advanced.spec.ts:1556:25-1557:46: `
        .activate(offer[0], consideration[0])`
$DIR/test/advanced.spec.ts:1568:34-1570:10: `.getContractOffererNonce(
          offererContract.address
        )`
$DIR/test/advanced.spec.ts:1573:24-1573:46: `.address.toLowerCase()`
$DIR/test/advanced.spec.ts:1574:29-1574:43: `.toHexString()`
$DIR/test/advanced.spec.ts:1574:43-1574:52: `.slice(2)`
$DIR/test/advanced.spec.ts:1574:52-1574:70: `.padStart(24, "0")`
$DIR/test/advanced.spec.ts:1576:52-1576:78: `.getOrderStatus(orderHash)`
$DIR/test/advanced.spec.ts:1582:7-1582:58: `order.parameters.offerer = offererContract.address;`
$DIR/test/advanced.spec.ts:1583:7-1583:27: `order.numerator = 1;`
$DIR/test/advanced.spec.ts:1584:7-1584:29: `order.denominator = 1;`
$DIR/test/advanced.spec.ts:1585:7-1585:30: `order.signature = "0x";`
$DIR/test/advanced.spec.ts:1587:7-1588:36: `order.parameters.offer[0].identifierOrCriteria =
        offer[0].identifier.add(1);`
$DIR/test/advanced.spec.ts:1588:17-1588:35: `.identifier.add(1)`
$DIR/test/advanced.spec.ts:1591:28-1592:26: `
          .connect(buyer)`
$DIR/test/advanced.spec.ts:1592:26-1595:13: `
          .fulfillAdvancedOrder(order, [], toKey(0), buyer.address, {
            value,
          })`
$DIR/test/advanced.spec.ts:1618:7-1618:74: `await set1155ApprovalForAll(seller, offererContract.address, true);`
$DIR/test/advanced.spec.ts:1621:38-1621:46: `.mul(10)`
$DIR/test/advanced.spec.ts:1621:54-1621:62: `.mul(10)`
$DIR/test/advanced.spec.ts:1626:17-1626:27: `.mul(1000)`
$DIR/test/advanced.spec.ts:1627:17-1627:27: `.mul(1000)`
$DIR/test/advanced.spec.ts:1632:7-1632:59: `offer[0].identifier = offer[0].identifierOrCriteria;`
$DIR/test/advanced.spec.ts:1633:7-1633:44: `offer[0].amount = offer[0].endAmount;`
$DIR/test/advanced.spec.ts:1635:7-1635:75: `consideration[0].identifier = consideration[0].identifierOrCriteria;`
$DIR/test/advanced.spec.ts:1636:7-1636:60: `consideration[0].amount = consideration[0].endAmount;`
$DIR/test/advanced.spec.ts:1637:7-1637:72: `consideration[0].startAmount = consideration[0].endAmount.add(1);`
$DIR/test/advanced.spec.ts:1637:54-1637:71: `.endAmount.add(1)`
$DIR/test/advanced.spec.ts:1639:7-1641:47: `await offererContract
        .connect(seller)
        .activate(offer[0], consideration[0]);`
$DIR/test/advanced.spec.ts:1639:28-1640:25: `
        .connect(seller)`
$DIR/test/advanced.spec.ts:1640:25-1641:46: `
        .activate(offer[0], consideration[0])`
$DIR/test/advanced.spec.ts:1652:34-1654:10: `.getContractOffererNonce(
          offererContract.address
        )`
$DIR/test/advanced.spec.ts:1657:24-1657:46: `.address.toLowerCase()`
$DIR/test/advanced.spec.ts:1658:29-1658:43: `.toHexString()`
$DIR/test/advanced.spec.ts:1658:43-1658:52: `.slice(2)`
$DIR/test/advanced.spec.ts:1658:52-1658:70: `.padStart(24, "0")`
$DIR/test/advanced.spec.ts:1660:52-1660:78: `.getOrderStatus(orderHash)`
$DIR/test/advanced.spec.ts:1666:7-1666:58: `order.parameters.offerer = offererContract.address;`
$DIR/test/advanced.spec.ts:1667:7-1667:27: `order.numerator = 1;`
$DIR/test/advanced.spec.ts:1668:7-1668:29: `order.denominator = 1;`
$DIR/test/advanced.spec.ts:1669:7-1669:30: `order.signature = "0x";`
$DIR/test/advanced.spec.ts:1672:28-1673:26: `
          .connect(buyer)`
$DIR/test/advanced.spec.ts:1673:26-1676:13: `
          .fulfillAdvancedOrder(order, [], toKey(0), buyer.address, {
            value,
          })`
$DIR/test/advanced.spec.ts:1699:7-1699:74: `await set1155ApprovalForAll(seller, offererContract.address, true);`
$DIR/test/advanced.spec.ts:1702:38-1702:46: `.mul(10)`
$DIR/test/advanced.spec.ts:1702:54-1702:62: `.mul(10)`
$DIR/test/advanced.spec.ts:1707:17-1707:27: `.mul(1000)`
$DIR/test/advanced.spec.ts:1708:17-1708:27: `.mul(1000)`
$DIR/test/advanced.spec.ts:1713:7-1713:59: `offer[0].identifier = offer[0].identifierOrCriteria;`
$DIR/test/advanced.spec.ts:1714:7-1714:44: `offer[0].amount = offer[0].endAmount;`
$DIR/test/advanced.spec.ts:1716:7-1716:75: `consideration[0].identifier = consideration[0].identifierOrCriteria;`
$DIR/test/advanced.spec.ts:1717:7-1717:60: `consideration[0].amount = consideration[0].endAmount;`
$DIR/test/advanced.spec.ts:1719:7-1721:47: `await offererContract
        .connect(seller)
        .activate(offer[0], consideration[0]);`
$DIR/test/advanced.spec.ts:1719:28-1720:25: `
        .connect(seller)`
$DIR/test/advanced.spec.ts:1720:25-1721:46: `
        .activate(offer[0], consideration[0])`
$DIR/test/advanced.spec.ts:1732:34-1734:10: `.getContractOffererNonce(
          offererContract.address
        )`
$DIR/test/advanced.spec.ts:1737:24-1737:46: `.address.toLowerCase()`
$DIR/test/advanced.spec.ts:1738:29-1738:43: `.toHexString()`
$DIR/test/advanced.spec.ts:1738:43-1738:52: `.slice(2)`
$DIR/test/advanced.spec.ts:1738:52-1738:70: `.padStart(24, "0")`
$DIR/test/advanced.spec.ts:1740:52-1740:78: `.getOrderStatus(orderHash)`
$DIR/test/advanced.spec.ts:1746:7-1746:58: `order.parameters.offerer = offererContract.address;`
$DIR/test/advanced.spec.ts:1747:7-1747:27: `order.numerator = 1;`
$DIR/test/advanced.spec.ts:1748:7-1748:29: `order.denominator = 1;`
$DIR/test/advanced.spec.ts:1749:7-1749:30: `order.signature = "0x";`
$DIR/test/advanced.spec.ts:1751:7-1751:54: `order.parameters.consideration[0].itemType = 1;`
$DIR/test/advanced.spec.ts:1754:28-1755:26: `
          .connect(buyer)`
$DIR/test/advanced.spec.ts:1755:26-1758:13: `
          .fulfillAdvancedOrder(order, [], toKey(0), buyer.address, {
            value,
          })`
$DIR/test/advanced.spec.ts:1781:7-1781:74: `await set1155ApprovalForAll(seller, offererContract.address, true);`
$DIR/test/advanced.spec.ts:1784:38-1784:46: `.mul(10)`
$DIR/test/advanced.spec.ts:1784:54-1784:62: `.mul(10)`
$DIR/test/advanced.spec.ts:1789:17-1789:27: `.mul(1000)`
$DIR/test/advanced.spec.ts:1790:17-1790:27: `.mul(1000)`
$DIR/test/advanced.spec.ts:1795:7-1795:59: `offer[0].identifier = offer[0].identifierOrCriteria;`
$DIR/test/advanced.spec.ts:1796:7-1796:44: `offer[0].amount = offer[0].endAmount;`
$DIR/test/advanced.spec.ts:1798:7-1798:75: `consideration[0].identifier = consideration[0].identifierOrCriteria;`
$DIR/test/advanced.spec.ts:1799:7-1799:60: `consideration[0].amount = consideration[0].endAmount;`
$DIR/test/advanced.spec.ts:1801:7-1803:47: `await offererContract
        .connect(seller)
        .activate(offer[0], consideration[0]);`
$DIR/test/advanced.spec.ts:1801:28-1802:25: `
        .connect(seller)`
$DIR/test/advanced.spec.ts:1802:25-1803:46: `
        .activate(offer[0], consideration[0])`
$DIR/test/advanced.spec.ts:1814:34-1816:10: `.getContractOffererNonce(
          offererContract.address
        )`
$DIR/test/advanced.spec.ts:1819:24-1819:46: `.address.toLowerCase()`
$DIR/test/advanced.spec.ts:1820:29-1820:43: `.toHexString()`
$DIR/test/advanced.spec.ts:1820:43-1820:52: `.slice(2)`
$DIR/test/advanced.spec.ts:1820:52-1820:70: `.padStart(24, "0")`
$DIR/test/advanced.spec.ts:1822:52-1822:78: `.getOrderStatus(orderHash)`
$DIR/test/advanced.spec.ts:1828:7-1828:58: `order.parameters.offerer = offererContract.address;`
$DIR/test/advanced.spec.ts:1829:7-1829:27: `order.numerator = 1;`
$DIR/test/advanced.spec.ts:1830:7-1830:29: `order.denominator = 1;`
$DIR/test/advanced.spec.ts:1831:7-1831:30: `order.signature = "0x";`
$DIR/test/advanced.spec.ts:1833:7-1833:72: `order.parameters.consideration[0].token = testERC1155Two.address;`
$DIR/test/advanced.spec.ts:1836:28-1837:26: `
          .connect(buyer)`
$DIR/test/advanced.spec.ts:1837:26-1840:13: `
          .fulfillAdvancedOrder(order, [], toKey(0), buyer.address, {
            value,
          })`
$DIR/test/advanced.spec.ts:1863:7-1863:74: `await set1155ApprovalForAll(seller, offererContract.address, true);`
$DIR/test/advanced.spec.ts:1866:38-1866:46: `.mul(10)`
$DIR/test/advanced.spec.ts:1866:54-1866:62: `.mul(10)`
$DIR/test/advanced.spec.ts:1871:17-1871:27: `.mul(1000)`
$DIR/test/advanced.spec.ts:1872:17-1872:27: `.mul(1000)`
$DIR/test/advanced.spec.ts:1877:7-1877:59: `offer[0].identifier = offer[0].identifierOrCriteria;`
$DIR/test/advanced.spec.ts:1878:7-1878:44: `offer[0].amount = offer[0].endAmount;`
$DIR/test/advanced.spec.ts:1880:7-1880:75: `consideration[0].identifier = consideration[0].identifierOrCriteria;`
$DIR/test/advanced.spec.ts:1881:7-1881:60: `consideration[0].amount = consideration[0].endAmount;`
$DIR/test/advanced.spec.ts:1883:7-1885:47: `await offererContract
        .connect(seller)
        .activate(offer[0], consideration[0]);`
$DIR/test/advanced.spec.ts:1883:28-1884:25: `
        .connect(seller)`
$DIR/test/advanced.spec.ts:1884:25-1885:46: `
        .activate(offer[0], consideration[0])`
$DIR/test/advanced.spec.ts:1896:34-1898:10: `.getContractOffererNonce(
          offererContract.address
        )`
$DIR/test/advanced.spec.ts:1901:24-1901:46: `.address.toLowerCase()`
$DIR/test/advanced.spec.ts:1902:29-1902:43: `.toHexString()`
$DIR/test/advanced.spec.ts:1902:43-1902:52: `.slice(2)`
$DIR/test/advanced.spec.ts:1902:52-1902:70: `.padStart(24, "0")`
$DIR/test/advanced.spec.ts:1904:52-1904:78: `.getOrderStatus(orderHash)`
$DIR/test/advanced.spec.ts:1910:7-1910:58: `order.parameters.offerer = offererContract.address;`
$DIR/test/advanced.spec.ts:1911:7-1911:27: `order.numerator = 1;`
$DIR/test/advanced.spec.ts:1912:7-1912:29: `order.denominator = 1;`
$DIR/test/advanced.spec.ts:1913:7-1913:30: `order.signature = "0x";`
$DIR/test/advanced.spec.ts:1915:7-1916:44: `order.parameters.consideration[0].identifierOrCriteria =
        consideration[0].identifier.add(1);`
$DIR/test/advanced.spec.ts:1916:25-1916:43: `.identifier.add(1)`
$DIR/test/advanced.spec.ts:1919:28-1920:26: `
          .connect(buyer)`
$DIR/test/advanced.spec.ts:1920:26-1923:13: `
          .fulfillAdvancedOrder(order, [], toKey(0), buyer.address, {
            value,
          })`
$DIR/test/advanced.spec.ts:1946:7-1946:74: `await set1155ApprovalForAll(seller, offererContract.address, true);`
$DIR/test/advanced.spec.ts:1949:38-1949:46: `.mul(10)`
$DIR/test/advanced.spec.ts:1949:54-1949:62: `.mul(10)`
$DIR/test/advanced.spec.ts:1954:17-1954:27: `.mul(1000)`
$DIR/test/advanced.spec.ts:1955:17-1955:27: `.mul(1000)`
$DIR/test/advanced.spec.ts:1960:7-1960:59: `offer[0].identifier = offer[0].identifierOrCriteria;`
$DIR/test/advanced.spec.ts:1961:7-1961:44: `offer[0].amount = offer[0].endAmount;`
$DIR/test/advanced.spec.ts:1963:7-1963:75: `consideration[0].identifier = consideration[0].identifierOrCriteria;`
$DIR/test/advanced.spec.ts:1964:7-1964:60: `consideration[0].amount = consideration[0].endAmount;`
$DIR/test/advanced.spec.ts:1966:7-1968:47: `await offererContract
        .connect(seller)
        .activate(offer[0], consideration[0]);`
$DIR/test/advanced.spec.ts:1966:28-1967:25: `
        .connect(seller)`
$DIR/test/advanced.spec.ts:1967:25-1968:46: `
        .activate(offer[0], consideration[0])`
$DIR/test/advanced.spec.ts:1979:34-1981:10: `.getContractOffererNonce(
          offererContract.address
        )`
$DIR/test/advanced.spec.ts:1984:24-1984:46: `.address.toLowerCase()`
$DIR/test/advanced.spec.ts:1985:29-1985:43: `.toHexString()`
$DIR/test/advanced.spec.ts:1985:43-1985:52: `.slice(2)`
$DIR/test/advanced.spec.ts:1985:52-1985:70: `.padStart(24, "0")`
$DIR/test/advanced.spec.ts:1987:52-1987:78: `.getOrderStatus(orderHash)`
$DIR/test/advanced.spec.ts:1993:7-1993:58: `order.parameters.offerer = offererContract.address;`
$DIR/test/advanced.spec.ts:1994:7-1994:27: `order.numerator = 1;`
$DIR/test/advanced.spec.ts:1995:7-1995:29: `order.denominator = 1;`
$DIR/test/advanced.spec.ts:1996:7-1996:30: `order.signature = "0x";`
$DIR/test/advanced.spec.ts:1998:7-1998:67: `order.parameters.consideration[0].recipient = owner.address;`
$DIR/test/advanced.spec.ts:2001:28-2002:26: `
          .connect(buyer)`
$DIR/test/advanced.spec.ts:2002:26-2005:13: `
          .fulfillAdvancedOrder(order, [], toKey(0), buyer.address, {
            value,
          })`
$DIR/test/advanced.spec.ts:2028:7-2028:74: `await set1155ApprovalForAll(seller, offererContract.address, true);`
$DIR/test/advanced.spec.ts:2031:38-2031:46: `.mul(10)`
$DIR/test/advanced.spec.ts:2031:54-2031:62: `.mul(10)`
$DIR/test/advanced.spec.ts:2036:17-2036:27: `.mul(1000)`
$DIR/test/advanced.spec.ts:2037:17-2037:27: `.mul(1000)`
$DIR/test/advanced.spec.ts:2042:7-2042:59: `offer[0].identifier = offer[0].identifierOrCriteria;`
$DIR/test/advanced.spec.ts:2043:7-2043:44: `offer[0].amount = offer[0].endAmount;`
$DIR/test/advanced.spec.ts:2045:7-2045:75: `consideration[0].identifier = consideration[0].identifierOrCriteria;`
$DIR/test/advanced.spec.ts:2046:7-2046:60: `consideration[0].amount = consideration[0].endAmount;`
$DIR/test/advanced.spec.ts:2048:7-2050:47: `await offererContract
        .connect(seller)
        .activate(offer[0], consideration[0]);`
$DIR/test/advanced.spec.ts:2048:28-2049:25: `
        .connect(seller)`
$DIR/test/advanced.spec.ts:2049:25-2050:46: `
        .activate(offer[0], consideration[0])`
$DIR/test/advanced.spec.ts:2061:34-2063:10: `.getContractOffererNonce(
          offererContract.address
        )`
$DIR/test/advanced.spec.ts:2066:24-2066:46: `.address.toLowerCase()`
$DIR/test/advanced.spec.ts:2067:29-2067:43: `.toHexString()`
$DIR/test/advanced.spec.ts:2067:43-2067:52: `.slice(2)`
$DIR/test/advanced.spec.ts:2067:52-2067:70: `.padStart(24, "0")`
$DIR/test/advanced.spec.ts:2069:52-2069:78: `.getOrderStatus(orderHash)`
$DIR/test/advanced.spec.ts:2075:7-2075:58: `order.parameters.offerer = offererContract.address;`
$DIR/test/advanced.spec.ts:2076:7-2076:27: `order.numerator = 1;`
$DIR/test/advanced.spec.ts:2077:7-2077:29: `order.denominator = 1;`
$DIR/test/advanced.spec.ts:2078:7-2078:30: `order.signature = "0x";`
$DIR/test/advanced.spec.ts:2080:44-2080:73: `.parse(JSON.stringify(order))`
$DIR/test/advanced.spec.ts:2080:55-2080:72: `.stringify(order)`
$DIR/test/advanced.spec.ts:2081:7-2081:62: `orderWithNoConsideration.parameters.consideration = [];`
$DIR/test/advanced.spec.ts:2082:7-2082:79: `orderWithNoConsideration.parameters.totalOriginalConsiderationItems = 0;`
$DIR/test/advanced.spec.ts:2085:28-2086:26: `
          .connect(buyer)`
$DIR/test/advanced.spec.ts:2086:26-2095:12: `
          .fulfillAdvancedOrder(
            orderWithNoConsideration,
            [],
            toKey(0),
            ethers.constants.AddressZero,
            {
              value,
            }
          )`
$DIR/test/advanced.spec.ts:2118:7-2118:74: `await set1155ApprovalForAll(seller, offererContract.address, true);`
$DIR/test/advanced.spec.ts:2121:38-2121:46: `.mul(10)`
$DIR/test/advanced.spec.ts:2121:54-2121:62: `.mul(10)`
$DIR/test/advanced.spec.ts:2126:17-2126:27: `.mul(1000)`
$DIR/test/advanced.spec.ts:2127:17-2127:27: `.mul(1000)`
$DIR/test/advanced.spec.ts:2132:7-2132:59: `offer[0].identifier = offer[0].identifierOrCriteria;`
$DIR/test/advanced.spec.ts:2133:7-2133:44: `offer[0].amount = offer[0].endAmount;`
$DIR/test/advanced.spec.ts:2135:7-2135:75: `consideration[0].identifier = consideration[0].identifierOrCriteria;`
$DIR/test/advanced.spec.ts:2136:7-2136:60: `consideration[0].amount = consideration[0].endAmount;`
$DIR/test/advanced.spec.ts:2138:7-2140:47: `await offererContract
        .connect(seller)
        .activate(offer[0], consideration[0]);`
$DIR/test/advanced.spec.ts:2138:28-2139:25: `
        .connect(seller)`
$DIR/test/advanced.spec.ts:2139:25-2140:46: `
        .activate(offer[0], consideration[0])`
$DIR/test/advanced.spec.ts:2151:34-2153:10: `.getContractOffererNonce(
          offererContract.address
        )`
$DIR/test/advanced.spec.ts:2156:24-2156:46: `.address.toLowerCase()`
$DIR/test/advanced.spec.ts:2157:29-2157:43: `.toHexString()`
$DIR/test/advanced.spec.ts:2157:43-2157:52: `.slice(2)`
$DIR/test/advanced.spec.ts:2157:52-2157:70: `.padStart(24, "0")`
$DIR/test/advanced.spec.ts:2159:52-2159:78: `.getOrderStatus(orderHash)`
$DIR/test/advanced.spec.ts:2165:7-2165:58: `order.parameters.offerer = offererContract.address;`
$DIR/test/advanced.spec.ts:2166:7-2166:27: `order.numerator = 1;`
$DIR/test/advanced.spec.ts:2167:7-2167:29: `order.denominator = 1;`
$DIR/test/advanced.spec.ts:2168:7-2168:30: `order.signature = "0x";`
$DIR/test/advanced.spec.ts:2170:52-2172:8: `.parse(
        JSON.stringify(order)
      )`
$DIR/test/advanced.spec.ts:2171:13-2171:30: `.stringify(order)`
$DIR/test/advanced.spec.ts:2173:7-2173:62: `orderWithoutOfferOrConsideration.parameters.offer = [];`
$DIR/test/advanced.spec.ts:2174:7-2174:70: `orderWithoutOfferOrConsideration.parameters.consideration = [];`
$DIR/test/advanced.spec.ts:2175:7-2175:87: `orderWithoutOfferOrConsideration.parameters.totalOriginalConsiderationItems = 0;`
$DIR/test/advanced.spec.ts:2178:28-2179:26: `
          .connect(buyer)`
$DIR/test/advanced.spec.ts:2179:26-2188:12: `
          .fulfillAdvancedOrder(
            orderWithoutOfferOrConsideration,
            [],
            toKey(0),
            ethers.constants.AddressZero,
            {
              value,
            }
          )`
$DIR/test/advanced.spec.ts:2207:7-2207:76: `await testERC1155Two.mint(seller.address, secondNftId, secondAmount);`
$DIR/test/advanced.spec.ts:2207:27-2207:75: `.mint(seller.address, secondNftId, secondAmount)`
$DIR/test/advanced.spec.ts:2210:23-2211:27: `
          .connect(seller)`
$DIR/test/advanced.spec.ts:2211:27-2212:64: `
          .setApprovalForAll(marketplaceContract.address, true)`
$DIR/test/advanced.spec.ts:2224:7-2224:74: `await set1155ApprovalForAll(seller, offererContract.address, true);`
$DIR/test/advanced.spec.ts:2227:38-2227:46: `.mul(10)`
$DIR/test/advanced.spec.ts:2227:54-2227:62: `.mul(10)`
$DIR/test/advanced.spec.ts:2232:17-2232:27: `.mul(1000)`
$DIR/test/advanced.spec.ts:2233:17-2233:27: `.mul(1000)`
$DIR/test/advanced.spec.ts:2238:7-2238:59: `offer[0].identifier = offer[0].identifierOrCriteria;`
$DIR/test/advanced.spec.ts:2239:7-2239:44: `offer[0].amount = offer[0].endAmount;`
$DIR/test/advanced.spec.ts:2241:7-2241:75: `consideration[0].identifier = consideration[0].identifierOrCriteria;`
$DIR/test/advanced.spec.ts:2242:7-2242:60: `consideration[0].amount = consideration[0].endAmount;`
$DIR/test/advanced.spec.ts:2244:7-2246:47: `await offererContract
        .connect(seller)
        .activate(offer[0], consideration[0]);`
$DIR/test/advanced.spec.ts:2244:28-2245:25: `
        .connect(seller)`
$DIR/test/advanced.spec.ts:2245:25-2246:46: `
        .activate(offer[0], consideration[0])`
$DIR/test/advanced.spec.ts:2257:34-2259:10: `.getContractOffererNonce(
          offererContract.address
        )`
$DIR/test/advanced.spec.ts:2262:24-2262:46: `.address.toLowerCase()`
$DIR/test/advanced.spec.ts:2263:29-2263:43: `.toHexString()`
$DIR/test/advanced.spec.ts:2263:43-2263:52: `.slice(2)`
$DIR/test/advanced.spec.ts:2263:52-2263:70: `.padStart(24, "0")`
$DIR/test/advanced.spec.ts:2265:52-2265:78: `.getOrderStatus(orderHash)`
$DIR/test/advanced.spec.ts:2271:7-2271:58: `order.parameters.offerer = offererContract.address;`
$DIR/test/advanced.spec.ts:2272:7-2272:27: `order.numerator = 1;`
$DIR/test/advanced.spec.ts:2273:7-2273:29: `order.denominator = 1;`
$DIR/test/advanced.spec.ts:2274:7-2274:30: `order.signature = "0x";`
$DIR/test/advanced.spec.ts:2276:39-2276:68: `.parse(JSON.stringify(order))`
$DIR/test/advanced.spec.ts:2276:50-2276:67: `.stringify(order)`
$DIR/test/advanced.spec.ts:2277:26-2279:8: `.parameters.offer.push(
        JSON.parse(JSON.stringify(orderWithExtraOffer.parameters.offer[0]))
      )`
$DIR/test/advanced.spec.ts:2278:13-2278:76: `.parse(JSON.stringify(orderWithExtraOffer.parameters.offer[0]))`
$DIR/test/advanced.spec.ts:2278:24-2278:75: `.stringify(orderWithExtraOffer.parameters.offer[0])`
$DIR/test/advanced.spec.ts:2280:7-2280:78: `orderWithExtraOffer.parameters.offer[1].token = testERC1155Two.address;`
$DIR/test/advanced.spec.ts:2281:7-2282:21: `orderWithExtraOffer.parameters.offer[1].identifierOrCriteria =
        secondNftId;`
$DIR/test/advanced.spec.ts:2283:7-2283:69: `orderWithExtraOffer.parameters.offer[1].amount = secondAmount;`
$DIR/test/advanced.spec.ts:2286:28-2287:26: `
          .connect(buyer)`
$DIR/test/advanced.spec.ts:2287:26-2296:12: `
          .fulfillAdvancedOrder(
            orderWithExtraOffer,
            [],
            toKey(0),
            buyer.address,
            {
              value,
            }
          )`
$DIR/test/advanced.spec.ts:2319:7-2319:74: `await set1155ApprovalForAll(seller, offererContract.address, true);`
$DIR/test/advanced.spec.ts:2322:38-2322:46: `.mul(10)`
$DIR/test/advanced.spec.ts:2322:54-2322:62: `.mul(10)`
$DIR/test/advanced.spec.ts:2327:17-2327:27: `.mul(1000)`
$DIR/test/advanced.spec.ts:2328:17-2328:27: `.mul(1000)`
$DIR/test/advanced.spec.ts:2333:7-2333:59: `offer[0].identifier = offer[0].identifierOrCriteria;`
$DIR/test/advanced.spec.ts:2334:7-2334:44: `offer[0].amount = offer[0].endAmount;`
$DIR/test/advanced.spec.ts:2336:7-2336:75: `consideration[0].identifier = consideration[0].identifierOrCriteria;`
$DIR/test/advanced.spec.ts:2337:7-2337:60: `consideration[0].amount = consideration[0].endAmount;`
$DIR/test/advanced.spec.ts:2339:7-2341:47: `await offererContract
        .connect(seller)
        .activate(offer[0], consideration[0]);`
$DIR/test/advanced.spec.ts:2339:28-2340:25: `
        .connect(seller)`
$DIR/test/advanced.spec.ts:2340:25-2341:46: `
        .activate(offer[0], consideration[0])`
$DIR/test/advanced.spec.ts:2352:34-2354:10: `.getContractOffererNonce(
          offererContract.address
        )`
$DIR/test/advanced.spec.ts:2357:24-2357:46: `.address.toLowerCase()`
$DIR/test/advanced.spec.ts:2358:29-2358:43: `.toHexString()`
$DIR/test/advanced.spec.ts:2358:43-2358:52: `.slice(2)`
$DIR/test/advanced.spec.ts:2358:52-2358:70: `.padStart(24, "0")`
$DIR/test/advanced.spec.ts:2360:52-2360:78: `.getOrderStatus(orderHash)`
$DIR/test/advanced.spec.ts:2366:7-2366:58: `order.parameters.offerer = offererContract.address;`
$DIR/test/advanced.spec.ts:2367:7-2367:27: `order.numerator = 1;`
$DIR/test/advanced.spec.ts:2368:7-2368:29: `order.denominator = 1;`
$DIR/test/advanced.spec.ts:2369:7-2369:30: `order.signature = "0x";`
$DIR/test/advanced.spec.ts:2371:7-2371:62: `await offererContract.connect(seller).extendRequired();`
$DIR/test/advanced.spec.ts:2371:28-2371:44: `.connect(seller)`
$DIR/test/advanced.spec.ts:2371:44-2371:61: `.extendRequired()`
$DIR/test/advanced.spec.ts:2374:28-2375:26: `
          .connect(buyer)`
$DIR/test/advanced.spec.ts:2375:26-2378:13: `
          .fulfillAdvancedOrder(order, [], toKey(0), buyer.address, {
            value,
          })`
$DIR/test/advanced.spec.ts:2397:7-2397:76: `await testERC1155Two.mint(seller.address, secondNftId, secondAmount);`
$DIR/test/advanced.spec.ts:2397:27-2397:75: `.mint(seller.address, secondNftId, secondAmount)`
$DIR/test/advanced.spec.ts:2400:23-2401:27: `
          .connect(seller)`
$DIR/test/advanced.spec.ts:2401:27-2402:64: `
          .setApprovalForAll(marketplaceContract.address, true)`
$DIR/test/advanced.spec.ts:2414:7-2414:74: `await set1155ApprovalForAll(seller, offererContract.address, true);`
$DIR/test/advanced.spec.ts:2417:38-2417:46: `.mul(10)`
$DIR/test/advanced.spec.ts:2417:54-2417:62: `.mul(10)`
$DIR/test/advanced.spec.ts:2422:17-2422:27: `.mul(1000)`
$DIR/test/advanced.spec.ts:2423:17-2423:27: `.mul(1000)`
$DIR/test/advanced.spec.ts:2428:7-2428:59: `offer[0].identifier = offer[0].identifierOrCriteria;`
$DIR/test/advanced.spec.ts:2429:7-2429:44: `offer[0].amount = offer[0].endAmount;`
$DIR/test/advanced.spec.ts:2431:7-2431:75: `consideration[0].identifier = consideration[0].identifierOrCriteria;`
$DIR/test/advanced.spec.ts:2432:7-2432:60: `consideration[0].amount = consideration[0].endAmount;`
$DIR/test/advanced.spec.ts:2434:7-2436:47: `await offererContract
        .connect(seller)
        .activate(offer[0], consideration[0]);`
$DIR/test/advanced.spec.ts:2434:28-2435:25: `
        .connect(seller)`
$DIR/test/advanced.spec.ts:2435:25-2436:46: `
        .activate(offer[0], consideration[0])`
$DIR/test/advanced.spec.ts:2447:34-2449:10: `.getContractOffererNonce(
          offererContract.address
        )`
$DIR/test/advanced.spec.ts:2452:24-2452:46: `.address.toLowerCase()`
$DIR/test/advanced.spec.ts:2453:29-2453:43: `.toHexString()`
$DIR/test/advanced.spec.ts:2453:43-2453:52: `.slice(2)`
$DIR/test/advanced.spec.ts:2453:52-2453:70: `.padStart(24, "0")`
$DIR/test/advanced.spec.ts:2455:52-2455:78: `.getOrderStatus(orderHash)`
$DIR/test/advanced.spec.ts:2461:7-2461:58: `order.parameters.offerer = offererContract.address;`
$DIR/test/advanced.spec.ts:2462:7-2462:27: `order.numerator = 1;`
$DIR/test/advanced.spec.ts:2463:7-2463:29: `order.denominator = 1;`
$DIR/test/advanced.spec.ts:2464:7-2464:30: `order.signature = "0x";`
$DIR/test/advanced.spec.ts:2466:7-2467:54: `order.parameters.offer[0].startAmount =
        order.parameters.offer[0].startAmount.add(1);`
$DIR/test/advanced.spec.ts:2467:34-2467:53: `.startAmount.add(1)`
$DIR/test/advanced.spec.ts:2468:7-2469:54: `order.parameters.offer[0].endAmount =
        order.parameters.offer[0].startAmount.add(1);`
$DIR/test/advanced.spec.ts:2469:34-2469:53: `.startAmount.add(1)`
$DIR/test/advanced.spec.ts:2472:28-2473:26: `
          .connect(buyer)`
$DIR/test/advanced.spec.ts:2473:26-2476:13: `
          .fulfillAdvancedOrder(order, [], toKey(0), buyer.address, {
            value,
          })`
$DIR/test/advanced.spec.ts:2499:7-2499:74: `await set1155ApprovalForAll(seller, offererContract.address, true);`
$DIR/test/advanced.spec.ts:2502:38-2502:46: `.mul(10)`
$DIR/test/advanced.spec.ts:2502:54-2502:62: `.mul(10)`
$DIR/test/advanced.spec.ts:2507:17-2507:27: `.mul(1000)`
$DIR/test/advanced.spec.ts:2508:17-2508:27: `.mul(1000)`
$DIR/test/advanced.spec.ts:2513:7-2513:59: `offer[0].identifier = offer[0].identifierOrCriteria;`
$DIR/test/advanced.spec.ts:2514:7-2514:44: `offer[0].amount = offer[0].endAmount;`
$DIR/test/advanced.spec.ts:2516:7-2516:75: `consideration[0].identifier = consideration[0].identifierOrCriteria;`
$DIR/test/advanced.spec.ts:2517:7-2517:60: `consideration[0].amount = consideration[0].endAmount;`
$DIR/test/advanced.spec.ts:2519:7-2521:47: `await offererContract
        .connect(seller)
        .activate(offer[0], consideration[0]);`
$DIR/test/advanced.spec.ts:2519:28-2520:25: `
        .connect(seller)`
$DIR/test/advanced.spec.ts:2520:25-2521:46: `
        .activate(offer[0], consideration[0])`
$DIR/test/advanced.spec.ts:2523:7-2523:74: `consideration[0].startAmount = consideration[0].startAmount.sub(1);`
$DIR/test/advanced.spec.ts:2523:54-2523:73: `.startAmount.sub(1)`
$DIR/test/advanced.spec.ts:2524:7-2524:70: `consideration[0].endAmount = consideration[0].endAmount.sub(1);`
$DIR/test/advanced.spec.ts:2524:52-2524:69: `.endAmount.sub(1)`
$DIR/test/advanced.spec.ts:2535:34-2537:10: `.getContractOffererNonce(
          offererContract.address
        )`
$DIR/test/advanced.spec.ts:2540:24-2540:46: `.address.toLowerCase()`
$DIR/test/advanced.spec.ts:2541:29-2541:43: `.toHexString()`
$DIR/test/advanced.spec.ts:2541:43-2541:52: `.slice(2)`
$DIR/test/advanced.spec.ts:2541:52-2541:70: `.padStart(24, "0")`
$DIR/test/advanced.spec.ts:2543:52-2543:78: `.getOrderStatus(orderHash)`
$DIR/test/advanced.spec.ts:2549:7-2549:58: `order.parameters.offerer = offererContract.address;`
$DIR/test/advanced.spec.ts:2550:7-2550:27: `order.numerator = 1;`
$DIR/test/advanced.spec.ts:2551:7-2551:29: `order.denominator = 1;`
$DIR/test/advanced.spec.ts:2552:7-2552:30: `order.signature = "0x";`
$DIR/test/advanced.spec.ts:2555:28-2556:26: `
          .connect(buyer)`
$DIR/test/advanced.spec.ts:2556:26-2559:13: `
          .fulfillAdvancedOrder(order, [], toKey(0), buyer.address, {
            value,
          })`
$DIR/test/advanced.spec.ts:2582:7-2582:74: `await set1155ApprovalForAll(seller, offererContract.address, true);`
$DIR/test/advanced.spec.ts:2585:38-2585:46: `.mul(10)`
$DIR/test/advanced.spec.ts:2585:54-2585:62: `.mul(10)`
$DIR/test/advanced.spec.ts:2590:17-2590:27: `.mul(1000)`
$DIR/test/advanced.spec.ts:2591:17-2591:27: `.mul(1000)`
$DIR/test/advanced.spec.ts:2596:7-2596:59: `offer[0].identifier = offer[0].identifierOrCriteria;`
$DIR/test/advanced.spec.ts:2597:7-2597:44: `offer[0].amount = offer[0].endAmount;`
$DIR/test/advanced.spec.ts:2599:7-2599:75: `consideration[0].identifier = consideration[0].identifierOrCriteria;`
$DIR/test/advanced.spec.ts:2600:7-2600:60: `consideration[0].amount = consideration[0].endAmount;`
$DIR/test/advanced.spec.ts:2602:7-2604:47: `await offererContract
        .connect(seller)
        .activate(offer[0], consideration[0]);`
$DIR/test/advanced.spec.ts:2602:28-2603:25: `
        .connect(seller)`
$DIR/test/advanced.spec.ts:2603:25-2604:46: `
        .activate(offer[0], consideration[0])`
$DIR/test/advanced.spec.ts:2615:34-2617:10: `.getContractOffererNonce(
          offererContract.address
        )`
$DIR/test/advanced.spec.ts:2620:24-2620:46: `.address.toLowerCase()`
$DIR/test/advanced.spec.ts:2621:29-2621:43: `.toHexString()`
$DIR/test/advanced.spec.ts:2621:43-2621:52: `.slice(2)`
$DIR/test/advanced.spec.ts:2621:52-2621:70: `.padStart(24, "0")`
$DIR/test/advanced.spec.ts:2623:52-2623:78: `.getOrderStatus(orderHash)`
$DIR/test/advanced.spec.ts:2629:7-2629:58: `order.parameters.offerer = offererContract.address;`
$DIR/test/advanced.spec.ts:2630:7-2630:27: `order.numerator = 1;`
$DIR/test/advanced.spec.ts:2631:7-2631:29: `order.denominator = 2;`
$DIR/test/advanced.spec.ts:2632:7-2632:30: `order.signature = "0x";`
$DIR/test/advanced.spec.ts:2635:28-2636:26: `
          .connect(buyer)`
$DIR/test/advanced.spec.ts:2636:26-2639:13: `
          .fulfillAdvancedOrder(order, [], toKey(0), buyer.address, {
            value,
          })`
$DIR/test/advanced.spec.ts:2657:7-2657:74: `await set1155ApprovalForAll(seller, offererContract.address, true);`
$DIR/test/advanced.spec.ts:2660:38-2660:46: `.mul(10)`
$DIR/test/advanced.spec.ts:2660:54-2660:62: `.mul(10)`
$DIR/test/advanced.spec.ts:2665:17-2665:27: `.mul(1000)`
$DIR/test/advanced.spec.ts:2666:17-2666:27: `.mul(1000)`
$DIR/test/advanced.spec.ts:2671:7-2671:59: `offer[0].identifier = offer[0].identifierOrCriteria;`
$DIR/test/advanced.spec.ts:2672:7-2672:44: `offer[0].amount = offer[0].endAmount;`
$DIR/test/advanced.spec.ts:2674:7-2674:75: `consideration[0].identifier = consideration[0].identifierOrCriteria;`
$DIR/test/advanced.spec.ts:2675:7-2675:60: `consideration[0].amount = consideration[0].endAmount;`
$DIR/test/advanced.spec.ts:2677:7-2679:47: `await offererContract
        .connect(seller)
        .activate(offer[0], consideration[0]);`
$DIR/test/advanced.spec.ts:2677:28-2678:25: `
        .connect(seller)`
$DIR/test/advanced.spec.ts:2678:25-2679:46: `
        .activate(offer[0], consideration[0])`
$DIR/test/advanced.spec.ts:2690:34-2692:10: `.getContractOffererNonce(
          offererContract.address
        )`
$DIR/test/advanced.spec.ts:2695:24-2695:46: `.address.toLowerCase()`
$DIR/test/advanced.spec.ts:2696:29-2696:43: `.toHexString()`
$DIR/test/advanced.spec.ts:2696:43-2696:52: `.slice(2)`
$DIR/test/advanced.spec.ts:2696:52-2696:70: `.padStart(24, "0")`
$DIR/test/advanced.spec.ts:2698:52-2698:78: `.getOrderStatus(orderHash)`
$DIR/test/advanced.spec.ts:2704:7-2704:58: `order.parameters.offerer = offererContract.address;`
$DIR/test/advanced.spec.ts:2705:7-2705:27: `order.numerator = 2;`
$DIR/test/advanced.spec.ts:2706:7-2706:29: `order.denominator = 2;`
$DIR/test/advanced.spec.ts:2707:7-2707:30: `order.signature = "0x";`
$DIR/test/advanced.spec.ts:2710:28-2711:26: `
          .connect(buyer)`
$DIR/test/advanced.spec.ts:2711:26-2714:13: `
          .fulfillAdvancedOrder(order, [], toKey(0), buyer.address, {
            value,
          })`
$DIR/test/advanced.spec.ts:2725:7-2725:81: `await set1155ApprovalForAll(seller, invalidContractOfferer.address, true);`
$DIR/test/advanced.spec.ts:2728:38-2728:46: `.mul(10)`
$DIR/test/advanced.spec.ts:2728:54-2728:62: `.mul(10)`
$DIR/test/advanced.spec.ts:2733:17-2733:27: `.mul(1000)`
$DIR/test/advanced.spec.ts:2734:17-2734:27: `.mul(1000)`
$DIR/test/advanced.spec.ts:2739:7-2739:59: `offer[0].identifier = offer[0].identifierOrCriteria;`
$DIR/test/advanced.spec.ts:2740:7-2740:44: `offer[0].amount = offer[0].endAmount;`
$DIR/test/advanced.spec.ts:2742:7-2742:75: `consideration[0].identifier = consideration[0].identifierOrCriteria;`
$DIR/test/advanced.spec.ts:2743:7-2743:60: `consideration[0].amount = consideration[0].endAmount;`
$DIR/test/advanced.spec.ts:2745:7-2747:47: `await invalidContractOfferer
        .connect(seller)
        .activate(offer[0], consideration[0]);`
$DIR/test/advanced.spec.ts:2745:35-2746:25: `
        .connect(seller)`
$DIR/test/advanced.spec.ts:2746:25-2747:46: `
        .activate(offer[0], consideration[0])`
$DIR/test/advanced.spec.ts:2749:7-2749:74: `consideration[0].startAmount = consideration[0].startAmount.sub(1);`
$DIR/test/advanced.spec.ts:2749:54-2749:73: `.startAmount.sub(1)`
$DIR/test/advanced.spec.ts:2750:7-2750:70: `consideration[0].endAmount = consideration[0].endAmount.sub(1);`
$DIR/test/advanced.spec.ts:2750:52-2750:69: `.endAmount.sub(1)`
$DIR/test/advanced.spec.ts:2761:34-2763:10: `.getContractOffererNonce(
          invalidContractOfferer.address
        )`
$DIR/test/advanced.spec.ts:2766:31-2766:53: `.address.toLowerCase()`
$DIR/test/advanced.spec.ts:2767:29-2767:43: `.toHexString()`
$DIR/test/advanced.spec.ts:2767:43-2767:52: `.slice(2)`
$DIR/test/advanced.spec.ts:2767:52-2767:70: `.padStart(24, "0")`
$DIR/test/advanced.spec.ts:2769:52-2769:78: `.getOrderStatus(orderHash)`
$DIR/test/advanced.spec.ts:2775:7-2775:65: `order.parameters.offerer = invalidContractOfferer.address;`
$DIR/test/advanced.spec.ts:2776:7-2776:27: `order.numerator = 1;`
$DIR/test/advanced.spec.ts:2777:7-2777:29: `order.denominator = 1;`
$DIR/test/advanced.spec.ts:2778:7-2778:30: `order.signature = "0x";`
$DIR/test/advanced.spec.ts:2781:28-2782:26: `
          .connect(buyer)`
$DIR/test/advanced.spec.ts:2782:26-2785:13: `
          .fulfillAdvancedOrder(order, [], toKey(0), buyer.address, {
            value,
          })`
$DIR/test/advanced.spec.ts:2809:7-2809:74: `await set1155ApprovalForAll(seller, offererContract.address, true);`
$DIR/test/advanced.spec.ts:2812:38-2812:46: `.mul(10)`
$DIR/test/advanced.spec.ts:2812:54-2812:62: `.mul(10)`
$DIR/test/advanced.spec.ts:2817:17-2817:27: `.mul(1000)`
$DIR/test/advanced.spec.ts:2818:17-2818:27: `.mul(1000)`
$DIR/test/advanced.spec.ts:2823:7-2823:59: `offer[0].identifier = offer[0].identifierOrCriteria;`
$DIR/test/advanced.spec.ts:2824:7-2824:44: `offer[0].amount = offer[0].endAmount;`
$DIR/test/advanced.spec.ts:2826:7-2826:75: `consideration[0].identifier = consideration[0].identifierOrCriteria;`
$DIR/test/advanced.spec.ts:2827:7-2827:60: `consideration[0].amount = consideration[0].endAmount;`
$DIR/test/advanced.spec.ts:2829:7-2831:47: `await offererContract
        .connect(seller)
        .activate(offer[0], consideration[0]);`
$DIR/test/advanced.spec.ts:2829:28-2830:25: `
        .connect(seller)`
$DIR/test/advanced.spec.ts:2830:25-2831:46: `
        .activate(offer[0], consideration[0])`
$DIR/test/advanced.spec.ts:2833:7-2833:74: `consideration[0].startAmount = consideration[0].startAmount.sub(1);`
$DIR/test/advanced.spec.ts:2833:54-2833:73: `.startAmount.sub(1)`
$DIR/test/advanced.spec.ts:2834:7-2834:70: `consideration[0].endAmount = consideration[0].endAmount.sub(1);`
$DIR/test/advanced.spec.ts:2834:52-2834:69: `.endAmount.sub(1)`
$DIR/test/advanced.spec.ts:2847:34-2849:10: `.getContractOffererNonce(
          offererContract.address
        )`
$DIR/test/advanced.spec.ts:2852:24-2852:46: `.address.toLowerCase()`
$DIR/test/advanced.spec.ts:2853:29-2853:43: `.toHexString()`
$DIR/test/advanced.spec.ts:2853:43-2853:52: `.slice(2)`
$DIR/test/advanced.spec.ts:2853:52-2853:70: `.padStart(24, "0")`
$DIR/test/advanced.spec.ts:2855:52-2855:78: `.getOrderStatus(orderHash)`
$DIR/test/advanced.spec.ts:2861:7-2861:58: `order.parameters.offerer = offererContract.address;`
$DIR/test/advanced.spec.ts:2862:7-2862:27: `order.numerator = 1;`
$DIR/test/advanced.spec.ts:2863:7-2863:29: `order.denominator = 1;`
$DIR/test/advanced.spec.ts:2864:7-2864:30: `order.signature = "0x";`
$DIR/test/advanced.spec.ts:2878:28-2879:26: `
          .connect(buyer)`
$DIR/test/advanced.spec.ts:2879:26-2889:12: `
          .fulfillAvailableOrders(
            orders,
            offerComponents,
            considerationComponents,
            toKey(0),
            100,
            {
              value,
            }
          )`
$DIR/test/advanced.spec.ts:2900:7-2904:9: `await set1155ApprovalForAll(
        seller,
        invalidContractOffererRatifyOrder.address,
        true
      );`
$DIR/test/advanced.spec.ts:2907:38-2907:46: `.mul(10)`
$DIR/test/advanced.spec.ts:2907:54-2907:62: `.mul(10)`
$DIR/test/advanced.spec.ts:2912:17-2912:27: `.mul(1000)`
$DIR/test/advanced.spec.ts:2913:17-2913:27: `.mul(1000)`
$DIR/test/advanced.spec.ts:2918:7-2918:59: `offer[0].identifier = offer[0].identifierOrCriteria;`
$DIR/test/advanced.spec.ts:2919:7-2919:44: `offer[0].amount = offer[0].endAmount;`
$DIR/test/advanced.spec.ts:2921:7-2921:75: `consideration[0].identifier = consideration[0].identifierOrCriteria;`
$DIR/test/advanced.spec.ts:2922:7-2922:60: `consideration[0].amount = consideration[0].endAmount;`
$DIR/test/advanced.spec.ts:2924:7-2926:47: `await invalidContractOffererRatifyOrder
        .connect(seller)
        .activate(offer[0], consideration[0]);`
$DIR/test/advanced.spec.ts:2924:46-2925:25: `
        .connect(seller)`
$DIR/test/advanced.spec.ts:2925:25-2926:46: `
        .activate(offer[0], consideration[0])`
$DIR/test/advanced.spec.ts:2937:34-2939:10: `.getContractOffererNonce(
          invalidContractOffererRatifyOrder.address
        )`
$DIR/test/advanced.spec.ts:2942:42-2942:64: `.address.toLowerCase()`
$DIR/test/advanced.spec.ts:2943:29-2943:43: `.toHexString()`
$DIR/test/advanced.spec.ts:2943:43-2943:52: `.slice(2)`
$DIR/test/advanced.spec.ts:2943:52-2943:70: `.padStart(24, "0")`
$DIR/test/advanced.spec.ts:2945:52-2945:78: `.getOrderStatus(orderHash)`
$DIR/test/advanced.spec.ts:2951:7-2951:76: `order.parameters.offerer = invalidContractOffererRatifyOrder.address;`
$DIR/test/advanced.spec.ts:2952:7-2952:27: `order.numerator = 1;`
$DIR/test/advanced.spec.ts:2953:7-2953:29: `order.denominator = 1;`
$DIR/test/advanced.spec.ts:2956:28-2957:26: `
          .connect(buyer)`
$DIR/test/advanced.spec.ts:2957:26-2966:12: `
          .fulfillAdvancedOrder(
            order,
            [],
            toKey(0),
            ethers.constants.AddressZero,
            {
              value,
            }
          )`
$DIR/test/advanced.spec.ts:2989:7-2989:74: `await set1155ApprovalForAll(seller, offererContract.address, true);`
$DIR/test/advanced.spec.ts:2992:38-2992:46: `.mul(10)`
$DIR/test/advanced.spec.ts:2992:54-2992:62: `.mul(10)`
$DIR/test/advanced.spec.ts:2997:17-2997:27: `.mul(1000)`
$DIR/test/advanced.spec.ts:2998:17-2998:27: `.mul(1000)`
$DIR/test/advanced.spec.ts:3003:7-3003:59: `offer[0].identifier = offer[0].identifierOrCriteria;`
$DIR/test/advanced.spec.ts:3004:7-3004:44: `offer[0].amount = offer[0].endAmount;`
$DIR/test/advanced.spec.ts:3006:7-3006:75: `consideration[0].identifier = consideration[0].identifierOrCriteria;`
$DIR/test/advanced.spec.ts:3007:7-3007:60: `consideration[0].amount = consideration[0].endAmount;`
$DIR/test/advanced.spec.ts:3009:7-3011:47: `await offererContract
        .connect(seller)
        .activate(offer[0], consideration[0]);`
$DIR/test/advanced.spec.ts:3009:28-3010:25: `
        .connect(seller)`
$DIR/test/advanced.spec.ts:3010:25-3011:46: `
        .activate(offer[0], consideration[0])`
$DIR/test/advanced.spec.ts:3022:34-3024:10: `.getContractOffererNonce(
          offererContract.address
        )`
$DIR/test/advanced.spec.ts:3027:24-3027:46: `.address.toLowerCase()`
$DIR/test/advanced.spec.ts:3028:29-3028:43: `.toHexString()`
$DIR/test/advanced.spec.ts:3028:43-3028:52: `.slice(2)`
$DIR/test/advanced.spec.ts:3028:52-3028:70: `.padStart(24, "0")`
$DIR/test/advanced.spec.ts:3030:52-3030:78: `.getOrderStatus(orderHash)`
$DIR/test/advanced.spec.ts:3036:7-3036:58: `order.parameters.offerer = offererContract.address;`
$DIR/test/advanced.spec.ts:3037:7-3037:27: `order.numerator = 1;`
$DIR/test/advanced.spec.ts:3038:7-3038:29: `order.denominator = 1;`
$DIR/test/advanced.spec.ts:3039:7-3039:30: `order.signature = "0x";`
$DIR/test/advanced.spec.ts:3041:52-3043:8: `.parse(
        JSON.stringify(order)
      )`
$DIR/test/advanced.spec.ts:3042:13-3042:30: `.stringify(order)`
$DIR/test/advanced.spec.ts:3044:7-3045:44: `orderWithMismatchedTotalOriginal.parameters
        .totalOriginalConsiderationItems++;`
$DIR/test/advanced.spec.ts:3048:28-3049:26: `
          .connect(buyer)`
$DIR/test/advanced.spec.ts:3049:26-3058:12: `
          .fulfillAdvancedOrder(
            orderWithMismatchedTotalOriginal,
            [],
            toKey(0),
            ethers.constants.AddressZero,
            {
              value,
            }
          )`
$DIR/test/advanced.spec.ts:3077:7-3077:76: `await mintAndApprove1155(seller, marketplaceContract.address, 10000);`
$DIR/test/advanced.spec.ts:3079:7-3079:76: `await mintAndApprove1155(seller, marketplaceContract.address, 10000);`
$DIR/test/advanced.spec.ts:3088:7-3088:77: `await set1155ApprovalForAll(seller, offererContractOne.address, true);`
$DIR/test/advanced.spec.ts:3096:7-3096:77: `await set1155ApprovalForAll(seller, offererContractTwo.address, true);`
$DIR/test/advanced.spec.ts:3104:7-3104:79: `await set1155ApprovalForAll(seller, offererContractThree.address, true);`
$DIR/test/advanced.spec.ts:3112:7-3112:78: `await set1155ApprovalForAll(seller, offererContractFour.address, true);`
$DIR/test/advanced.spec.ts:3115:44-3115:52: `.mul(10)`
$DIR/test/advanced.spec.ts:3115:63-3115:71: `.mul(10)`
$DIR/test/advanced.spec.ts:3120:20-3120:30: `.mul(1000)`
$DIR/test/advanced.spec.ts:3121:20-3121:30: `.mul(1000)`
$DIR/test/advanced.spec.ts:3126:7-3126:65: `offerOne[0].identifier = offerOne[0].identifierOrCriteria;`
$DIR/test/advanced.spec.ts:3127:7-3127:50: `offerOne[0].amount = offerOne[0].endAmount;`
$DIR/test/advanced.spec.ts:3129:7-3129:81: `considerationOne[0].identifier = considerationOne[0].identifierOrCriteria;`
$DIR/test/advanced.spec.ts:3130:7-3130:66: `considerationOne[0].amount = considerationOne[0].endAmount;`
$DIR/test/advanced.spec.ts:3132:7-3134:53: `await offererContractOne
        .connect(seller)
        .activate(offerOne[0], considerationOne[0]);`
$DIR/test/advanced.spec.ts:3132:31-3133:25: `
        .connect(seller)`
$DIR/test/advanced.spec.ts:3133:25-3134:52: `
        .activate(offerOne[0], considerationOne[0])`
$DIR/test/advanced.spec.ts:3145:34-3147:10: `.getContractOffererNonce(
          offererContractOne.address
        )`
$DIR/test/advanced.spec.ts:3150:27-3150:49: `.address.toLowerCase()`
$DIR/test/advanced.spec.ts:3151:32-3151:46: `.toHexString()`
$DIR/test/advanced.spec.ts:3151:46-3151:55: `.slice(2)`
$DIR/test/advanced.spec.ts:3151:55-3151:73: `.padStart(24, "0")`
$DIR/test/advanced.spec.ts:3153:7-3153:64: `orderOne.parameters.offerer = offererContractOne.address;`
$DIR/test/advanced.spec.ts:3154:7-3154:30: `orderOne.numerator = 1;`
$DIR/test/advanced.spec.ts:3155:7-3155:32: `orderOne.denominator = 1;`
$DIR/test/advanced.spec.ts:3156:7-3156:33: `orderOne.signature = "0x";`
$DIR/test/advanced.spec.ts:3159:7-3162:9: `orderOne.extraData = ethers.utils.defaultAbiCoder.encode(
        ["bytes32[]"],
        [[orderHashOne, ethers.constants.HashZero]]
      );`
$DIR/test/advanced.spec.ts:3159:34-3162:8: `.utils.defaultAbiCoder.encode(
        ["bytes32[]"],
        [[orderHashOne, ethers.constants.HashZero]]
      )`
$DIR/test/advanced.spec.ts:3168:44-3168:52: `.mul(10)`
$DIR/test/advanced.spec.ts:3168:63-3168:71: `.mul(10)`
$DIR/test/advanced.spec.ts:3173:20-3173:30: `.mul(1000)`
$DIR/test/advanced.spec.ts:3174:20-3174:30: `.mul(1000)`
$DIR/test/advanced.spec.ts:3179:7-3179:65: `offerTwo[0].identifier = offerTwo[0].identifierOrCriteria;`
$DIR/test/advanced.spec.ts:3180:7-3180:50: `offerTwo[0].amount = offerTwo[0].endAmount;`
$DIR/test/advanced.spec.ts:3182:7-3182:81: `considerationTwo[0].identifier = considerationTwo[0].identifierOrCriteria;`
$DIR/test/advanced.spec.ts:3183:7-3183:66: `considerationTwo[0].amount = considerationTwo[0].endAmount;`
$DIR/test/advanced.spec.ts:3185:7-3187:53: `await offererContractTwo
        .connect(seller)
        .activate(offerTwo[0], considerationTwo[0]);`
$DIR/test/advanced.spec.ts:3185:31-3186:25: `
        .connect(seller)`
$DIR/test/advanced.spec.ts:3186:25-3187:52: `
        .activate(offerTwo[0], considerationTwo[0])`
$DIR/test/advanced.spec.ts:3197:7-3197:64: `orderTwo.parameters.offerer = offererContractTwo.address;`
$DIR/test/advanced.spec.ts:3198:7-3198:30: `orderTwo.numerator = 1;`
$DIR/test/advanced.spec.ts:3199:7-3199:32: `orderTwo.denominator = 1;`
$DIR/test/advanced.spec.ts:3200:7-3200:33: `orderTwo.signature = "0x";`
$DIR/test/advanced.spec.ts:3201:7-3201:37: `orderTwo.extraData = "0x1234";`
$DIR/test/advanced.spec.ts:3213:39-3214:26: `
          .connect(buyer)`
$DIR/test/advanced.spec.ts:3214:26-3226:12: `
          .fulfillAvailableAdvancedOrders(
            [orderOne, orderTwo],
            [],
            offerComponents,
            considerationComponents,
            toKey(0),
            ethers.constants.AddressZero,
            100,
            {
              value: value.add(valueTwo).mul(2),
            }
          )`
$DIR/test/advanced.spec.ts:3224:27-3224:41: `.add(valueTwo)`
$DIR/test/advanced.spec.ts:3224:41-3224:48: `.mul(2)`
$DIR/test/advanced.spec.ts:3227:41-3227:48: `.wait()`
$DIR/test/advanced.spec.ts:3266:7-3266:77: `await set1155ApprovalForAll(seller, offererContractOne.address, true);`
$DIR/test/advanced.spec.ts:3274:7-3274:77: `await set1155ApprovalForAll(seller, offererContractTwo.address, true);`
$DIR/test/advanced.spec.ts:3282:7-3282:79: `await set1155ApprovalForAll(seller, offererContractThree.address, true);`
$DIR/test/advanced.spec.ts:3290:7-3290:78: `await set1155ApprovalForAll(seller, offererContractFour.address, true);`
$DIR/test/advanced.spec.ts:3293:44-3293:52: `.mul(10)`
$DIR/test/advanced.spec.ts:3293:63-3293:71: `.mul(10)`
$DIR/test/advanced.spec.ts:3298:20-3298:30: `.mul(1000)`
$DIR/test/advanced.spec.ts:3299:20-3299:30: `.mul(1000)`
$DIR/test/advanced.spec.ts:3304:7-3304:65: `offerOne[0].identifier = offerOne[0].identifierOrCriteria;`
$DIR/test/advanced.spec.ts:3305:7-3305:50: `offerOne[0].amount = offerOne[0].endAmount;`
$DIR/test/advanced.spec.ts:3307:7-3307:81: `considerationOne[0].identifier = considerationOne[0].identifierOrCriteria;`
$DIR/test/advanced.spec.ts:3308:7-3308:66: `considerationOne[0].amount = considerationOne[0].endAmount;`
$DIR/test/advanced.spec.ts:3310:7-3312:53: `await offererContractOne
        .connect(seller)
        .activate(offerOne[0], considerationOne[0]);`
$DIR/test/advanced.spec.ts:3310:31-3311:25: `
        .connect(seller)`
$DIR/test/advanced.spec.ts:3311:25-3312:52: `
        .activate(offerOne[0], considerationOne[0])`
$DIR/test/advanced.spec.ts:3323:34-3325:10: `.getContractOffererNonce(
          offererContractOne.address
        )`
$DIR/test/advanced.spec.ts:3328:27-3328:49: `.address.toLowerCase()`
$DIR/test/advanced.spec.ts:3329:32-3329:46: `.toHexString()`
$DIR/test/advanced.spec.ts:3329:46-3329:55: `.slice(2)`
$DIR/test/advanced.spec.ts:3329:55-3329:73: `.padStart(24, "0")`
$DIR/test/advanced.spec.ts:3331:7-3331:64: `orderOne.parameters.offerer = offererContractOne.address;`
$DIR/test/advanced.spec.ts:3332:7-3332:30: `orderOne.numerator = 1;`
$DIR/test/advanced.spec.ts:3333:7-3333:32: `orderOne.denominator = 1;`
$DIR/test/advanced.spec.ts:3334:7-3334:33: `orderOne.signature = "0x";`
$DIR/test/advanced.spec.ts:3337:7-3347:9: `orderOne.extraData = ethers.utils.defaultAbiCoder.encode(
        ["bytes32[]"],
        [
          [
            orderHashOne,
            ethers.constants.HashZero,
            ethers.constants.HashZero,
            ethers.constants.HashZero,
          ],
        ]
      );`
$DIR/test/advanced.spec.ts:3337:34-3347:8: `.utils.defaultAbiCoder.encode(
        ["bytes32[]"],
        [
          [
            orderHashOne,
            ethers.constants.HashZero,
            ethers.constants.HashZero,
            ethers.constants.HashZero,
          ],
        ]
      )`
$DIR/test/advanced.spec.ts:3353:44-3353:52: `.mul(10)`
$DIR/test/advanced.spec.ts:3353:63-3353:71: `.mul(10)`
$DIR/test/advanced.spec.ts:3358:20-3358:30: `.mul(1000)`
$DIR/test/advanced.spec.ts:3359:20-3359:30: `.mul(1000)`
$DIR/test/advanced.spec.ts:3364:7-3364:65: `offerTwo[0].identifier = offerTwo[0].identifierOrCriteria;`
$DIR/test/advanced.spec.ts:3365:7-3365:50: `offerTwo[0].amount = offerTwo[0].endAmount;`
$DIR/test/advanced.spec.ts:3367:7-3367:81: `considerationTwo[0].identifier = considerationTwo[0].identifierOrCriteria;`
$DIR/test/advanced.spec.ts:3368:7-3368:66: `considerationTwo[0].amount = considerationTwo[0].endAmount;`
$DIR/test/advanced.spec.ts:3370:7-3372:53: `await offererContractTwo
        .connect(seller)
        .activate(offerTwo[0], considerationTwo[0]);`
$DIR/test/advanced.spec.ts:3370:31-3371:25: `
        .connect(seller)`
$DIR/test/advanced.spec.ts:3371:25-3372:52: `
        .activate(offerTwo[0], considerationTwo[0])`
$DIR/test/advanced.spec.ts:3382:7-3382:64: `orderTwo.parameters.offerer = offererContractTwo.address;`
$DIR/test/advanced.spec.ts:3383:7-3383:30: `orderTwo.numerator = 1;`
$DIR/test/advanced.spec.ts:3384:7-3384:32: `orderTwo.denominator = 1;`
$DIR/test/advanced.spec.ts:3385:7-3385:33: `orderTwo.signature = "0x";`
$DIR/test/advanced.spec.ts:3386:7-3386:37: `orderTwo.extraData = "0x1234";`
$DIR/test/advanced.spec.ts:3392:22-3392:30: `.mul(10)`
$DIR/test/advanced.spec.ts:3393:22-3393:30: `.mul(10)`
$DIR/test/advanced.spec.ts:3397:20-3397:28: `.mul(10)`
$DIR/test/advanced.spec.ts:3398:22-3398:30: `.mul(10)`
$DIR/test/advanced.spec.ts:3404:22-3404:32: `.mul(1000)`
$DIR/test/advanced.spec.ts:3405:22-3405:32: `.mul(1000)`
$DIR/test/advanced.spec.ts:3410:7-3410:69: `offerThree[0].identifier = offerThree[0].identifierOrCriteria;`
$DIR/test/advanced.spec.ts:3411:7-3411:54: `offerThree[0].amount = offerThree[0].endAmount;`
$DIR/test/advanced.spec.ts:3413:7-3413:69: `offerThree[1].identifier = offerThree[1].identifierOrCriteria;`
$DIR/test/advanced.spec.ts:3414:7-3414:54: `offerThree[1].amount = offerThree[1].endAmount;`
$DIR/test/advanced.spec.ts:3416:7-3417:52: `considerationThree[0].identifier =
        considerationThree[0].identifierOrCriteria;`
$DIR/test/advanced.spec.ts:3418:7-3418:70: `considerationThree[0].amount = considerationThree[0].endAmount;`
$DIR/test/advanced.spec.ts:3420:7-3422:57: `await offererContractThree
        .connect(seller)
        .activate(offerThree[0], considerationThree[0]);`
$DIR/test/advanced.spec.ts:3420:33-3421:25: `
        .connect(seller)`
$DIR/test/advanced.spec.ts:3421:25-3422:56: `
        .activate(offerThree[0], considerationThree[0])`
$DIR/test/advanced.spec.ts:3432:7-3432:68: `orderThree.parameters.offerer = offererContractThree.address;`
$DIR/test/advanced.spec.ts:3433:7-3433:32: `orderThree.numerator = 1;`
$DIR/test/advanced.spec.ts:3434:7-3434:34: `orderThree.denominator = 1;`
$DIR/test/advanced.spec.ts:3435:7-3435:35: `orderThree.signature = "0x";`
$DIR/test/advanced.spec.ts:3438:34-3440:10: `.getContractOffererNonce(
          offererContractThree.address
        )`
$DIR/test/advanced.spec.ts:3443:29-3443:51: `.address.toLowerCase()`
$DIR/test/advanced.spec.ts:3444:34-3444:48: `.toHexString()`
$DIR/test/advanced.spec.ts:3444:48-3444:57: `.slice(2)`
$DIR/test/advanced.spec.ts:3444:57-3444:75: `.padStart(24, "0")`
$DIR/test/advanced.spec.ts:3450:21-3450:29: `.mul(10)`
$DIR/test/advanced.spec.ts:3451:21-3451:29: `.mul(10)`
$DIR/test/advanced.spec.ts:3457:21-3457:31: `.mul(1000)`
$DIR/test/advanced.spec.ts:3458:21-3458:31: `.mul(1000)`
$DIR/test/advanced.spec.ts:3463:7-3463:67: `offerFour[0].identifier = offerFour[0].identifierOrCriteria;`
$DIR/test/advanced.spec.ts:3464:7-3464:52: `offerFour[0].amount = offerFour[0].endAmount;`
$DIR/test/advanced.spec.ts:3466:7-3467:51: `considerationFour[0].identifier =
        considerationFour[0].identifierOrCriteria;`
$DIR/test/advanced.spec.ts:3468:7-3468:68: `considerationFour[0].amount = considerationFour[0].endAmount;`
$DIR/test/advanced.spec.ts:3470:7-3472:55: `await offererContractFour
        .connect(seller)
        .activate(offerFour[0], considerationFour[0]);`
$DIR/test/advanced.spec.ts:3470:32-3471:25: `
        .connect(seller)`
$DIR/test/advanced.spec.ts:3471:25-3472:54: `
        .activate(offerFour[0], considerationFour[0])`
$DIR/test/advanced.spec.ts:3482:7-3482:66: `orderFour.parameters.offerer = offererContractFour.address;`
$DIR/test/advanced.spec.ts:3483:7-3483:31: `orderFour.numerator = 1;`
$DIR/test/advanced.spec.ts:3484:7-3484:33: `orderFour.denominator = 1;`
$DIR/test/advanced.spec.ts:3485:7-3485:34: `orderFour.signature = "0x";`
$DIR/test/advanced.spec.ts:3486:7-3487:66: `orderFour.parameters.consideration[0].startAmount =
        orderFour.parameters.consideration[0].startAmount.sub(1);`
$DIR/test/advanced.spec.ts:3487:46-3487:65: `.startAmount.sub(1)`
$DIR/test/advanced.spec.ts:3488:7-3489:64: `orderFour.parameters.consideration[0].endAmount =
        orderFour.parameters.consideration[0].endAmount.sub(1);`
$DIR/test/advanced.spec.ts:3489:46-3489:63: `.endAmount.sub(1)`
$DIR/test/advanced.spec.ts:3505:28-3506:26: `
          .connect(buyer)`
$DIR/test/advanced.spec.ts:3506:26-3518:12: `
          .fulfillAvailableAdvancedOrders(
            [orderOne, orderTwo, orderThree, orderFour],
            [],
            offerComponents,
            considerationComponents,
            toKey(0),
            ethers.constants.AddressZero,
            100,
            {
              value: value.add(valueTwo).add(valueThree).add(valueFour).mul(2),
            }
          )`
$DIR/test/advanced.spec.ts:3516:27-3516:41: `.add(valueTwo)`
$DIR/test/advanced.spec.ts:3516:41-3516:57: `.add(valueThree)`
$DIR/test/advanced.spec.ts:3516:57-3516:72: `.add(valueFour)`
$DIR/test/advanced.spec.ts:3516:72-3516:79: `.mul(2)`
$DIR/test/advanced.spec.ts:3537:51-3537:59: `.mul(10)`
$DIR/test/advanced.spec.ts:3537:67-3537:75: `.mul(10)`
$DIR/test/advanced.spec.ts:3540:26-3540:36: `.mul(1000)`
$DIR/test/advanced.spec.ts:3540:44-3540:54: `.mul(1000)`
$DIR/test/advanced.spec.ts:3541:26-3541:34: `.mul(10)`
$DIR/test/advanced.spec.ts:3541:42-3541:50: `.mul(10)`
$DIR/test/advanced.spec.ts:3542:26-3542:34: `.mul(20)`
$DIR/test/advanced.spec.ts:3542:42-3542:50: `.mul(20)`
$DIR/test/advanced.spec.ts:3553:50-3553:76: `.getOrderStatus(orderHash)`
$DIR/test/advanced.spec.ts:3559:7-3559:27: `order.numerator = 2;`
$DIR/test/advanced.spec.ts:3560:7-3560:30: `order.denominator = 10;`
$DIR/test/advanced.spec.ts:3563:39-3564:26: `
          .connect(buyer)`
$DIR/test/advanced.spec.ts:3564:26-3573:12: `
          .fulfillAdvancedOrder(
            order,
            [],
            toKey(0),
            ethers.constants.AddressZero,
            {
              value,
            }
          )`
$DIR/test/advanced.spec.ts:3574:41-3574:48: `.wait()`
$DIR/test/advanced.spec.ts:3593:7-3593:73: `orderStatus = await marketplaceContract.getOrderStatus(orderHash);`
$DIR/test/advanced.spec.ts:3593:46-3593:72: `.getOrderStatus(orderHash)`
$DIR/test/advanced.spec.ts:3599:7-3599:27: `order.numerator = 1;`
$DIR/test/advanced.spec.ts:3600:7-3600:29: `order.denominator = 2;`
$DIR/test/advanced.spec.ts:3603:39-3604:26: `
          .connect(buyer)`
$DIR/test/advanced.spec.ts:3604:26-3613:12: `
          .fulfillAdvancedOrder(
            order,
            [],
            toKey(0),
            ethers.constants.AddressZero,
            {
              value,
            }
          )`
$DIR/test/advanced.spec.ts:3614:41-3614:48: `.wait()`
$DIR/test/advanced.spec.ts:3633:7-3633:73: `orderStatus = await marketplaceContract.getOrderStatus(orderHash);`
$DIR/test/advanced.spec.ts:3633:46-3633:72: `.getOrderStatus(orderHash)`
$DIR/test/advanced.spec.ts:3640:7-3640:27: `order.numerator = 1;`
$DIR/test/advanced.spec.ts:3641:7-3641:29: `order.denominator = 2;`
$DIR/test/advanced.spec.ts:3644:43-3644:64: `.entries(ordersClone)`
$DIR/test/advanced.spec.ts:3645:9-3645:71: `clonedOrder.parameters.startTime = order.parameters.startTime;`
$DIR/test/advanced.spec.ts:3646:9-3646:67: `clonedOrder.parameters.endTime = order.parameters.endTime;`
$DIR/test/advanced.spec.ts:3648:44-3650:10: `.entries(
          clonedOrder.parameters.offer
        )`
$DIR/test/advanced.spec.ts:3651:11-3651:74: `offerItem.startAmount = order.parameters.offer[+j].startAmount;`
$DIR/test/advanced.spec.ts:3652:11-3652:70: `offerItem.endAmount = order.parameters.offer[+j].endAmount;`
$DIR/test/advanced.spec.ts:3655:52-3657:10: `.entries(
          clonedOrder.parameters.consideration
        )`
$DIR/test/advanced.spec.ts:3658:11-3659:60: `considerationItem.startAmount =
            order.parameters.consideration[+j].startAmount;`
$DIR/test/advanced.spec.ts:3660:11-3661:58: `considerationItem.endAmount =
            order.parameters.consideration[+j].endAmount;`
$DIR/test/advanced.spec.ts:3665:7-3665:36: `ordersClone[0].numerator = 3;`
$DIR/test/advanced.spec.ts:3666:7-3666:39: `ordersClone[0].denominator = 10;`
$DIR/test/advanced.spec.ts:3669:39-3670:26: `
          .connect(buyer)`
$DIR/test/advanced.spec.ts:3670:26-3679:12: `
          .fulfillAdvancedOrder(
            order,
            [],
            toKey(0),
            ethers.constants.AddressZero,
            {
              value,
            }
          )`
$DIR/test/advanced.spec.ts:3680:41-3680:48: `.wait()`
$DIR/test/advanced.spec.ts:3698:7-3698:73: `orderStatus = await marketplaceContract.getOrderStatus(orderHash);`
$DIR/test/advanced.spec.ts:3698:46-3698:72: `.getOrderStatus(orderHash)`
$DIR/test/advanced.spec.ts:3711:51-3711:59: `.mul(10)`
$DIR/test/advanced.spec.ts:3711:67-3711:75: `.mul(10)`
$DIR/test/advanced.spec.ts:3714:26-3714:36: `.mul(1000)`
$DIR/test/advanced.spec.ts:3714:44-3714:54: `.mul(1000)`
$DIR/test/advanced.spec.ts:3715:26-3715:34: `.mul(10)`
$DIR/test/advanced.spec.ts:3715:42-3715:50: `.mul(10)`
$DIR/test/advanced.spec.ts:3716:26-3716:34: `.mul(20)`
$DIR/test/advanced.spec.ts:3716:42-3716:50: `.mul(20)`
$DIR/test/advanced.spec.ts:3727:50-3727:76: `.getOrderStatus(orderHash)`
$DIR/test/advanced.spec.ts:3733:7-3733:27: `order.numerator = 2;`
$DIR/test/advanced.spec.ts:3734:7-3734:30: `order.denominator = 10;`
$DIR/test/advanced.spec.ts:3737:39-3738:26: `
          .connect(buyer)`
$DIR/test/advanced.spec.ts:3738:26-3747:12: `
          .fulfillAdvancedOrder(
            order,
            [],
            toKey(0),
            ethers.constants.AddressZero,
            {
              value,
            }
          )`
$DIR/test/advanced.spec.ts:3748:41-3748:48: `.wait()`
$DIR/test/advanced.spec.ts:3767:7-3767:73: `orderStatus = await marketplaceContract.getOrderStatus(orderHash);`
$DIR/test/advanced.spec.ts:3767:46-3767:72: `.getOrderStatus(orderHash)`
$DIR/test/advanced.spec.ts:3773:7-3773:27: `order.numerator = 1;`
$DIR/test/advanced.spec.ts:3774:7-3774:30: `order.denominator = 10;`
$DIR/test/advanced.spec.ts:3777:39-3778:26: `
          .connect(buyer)`
$DIR/test/advanced.spec.ts:3778:26-3787:12: `
          .fulfillAdvancedOrder(
            order,
            [],
            toKey(0),
            ethers.constants.AddressZero,
            {
              value,
            }
          )`
$DIR/test/advanced.spec.ts:3788:41-3788:48: `.wait()`
$DIR/test/advanced.spec.ts:3807:7-3807:73: `orderStatus = await marketplaceContract.getOrderStatus(orderHash);`
$DIR/test/advanced.spec.ts:3807:46-3807:72: `.getOrderStatus(orderHash)`
$DIR/test/advanced.spec.ts:3814:7-3814:27: `order.numerator = 1;`
$DIR/test/advanced.spec.ts:3815:7-3815:29: `order.denominator = 1;`
$DIR/test/advanced.spec.ts:3818:43-3818:64: `.entries(ordersClone)`
$DIR/test/advanced.spec.ts:3819:9-3819:71: `clonedOrder.parameters.startTime = order.parameters.startTime;`
$DIR/test/advanced.spec.ts:3820:9-3820:67: `clonedOrder.parameters.endTime = order.parameters.endTime;`
$DIR/test/advanced.spec.ts:3822:44-3824:10: `.entries(
          clonedOrder.parameters.offer
        )`
$DIR/test/advanced.spec.ts:3825:11-3825:74: `offerItem.startAmount = order.parameters.offer[+j].startAmount;`
$DIR/test/advanced.spec.ts:3826:11-3826:70: `offerItem.endAmount = order.parameters.offer[+j].endAmount;`
$DIR/test/advanced.spec.ts:3829:52-3831:10: `.entries(
          clonedOrder.parameters.consideration
        )`
$DIR/test/advanced.spec.ts:3832:11-3833:60: `considerationItem.startAmount =
            order.parameters.consideration[+j].startAmount;`
$DIR/test/advanced.spec.ts:3834:11-3835:58: `considerationItem.endAmount =
            order.parameters.consideration[+j].endAmount;`
$DIR/test/advanced.spec.ts:3839:7-3839:36: `ordersClone[0].numerator = 7;`
$DIR/test/advanced.spec.ts:3840:7-3840:39: `ordersClone[0].denominator = 10;`
$DIR/test/advanced.spec.ts:3843:39-3844:26: `
          .connect(buyer)`
$DIR/test/advanced.spec.ts:3844:26-3853:12: `
          .fulfillAdvancedOrder(
            order,
            [],
            toKey(0),
            ethers.constants.AddressZero,
            {
              value,
            }
          )`
$DIR/test/advanced.spec.ts:3854:41-3854:48: `.wait()`
$DIR/test/advanced.spec.ts:3872:7-3872:73: `orderStatus = await marketplaceContract.getOrderStatus(orderHash);`
$DIR/test/advanced.spec.ts:3872:46-3872:72: `.getOrderStatus(orderHash)`
$DIR/test/advanced.spec.ts:3886:51-3886:59: `.mul(10)`
$DIR/test/advanced.spec.ts:3886:67-3886:75: `.mul(10)`
$DIR/test/advanced.spec.ts:3889:26-3889:36: `.mul(1000)`
$DIR/test/advanced.spec.ts:3889:44-3889:54: `.mul(1000)`
$DIR/test/advanced.spec.ts:3890:26-3890:34: `.mul(10)`
$DIR/test/advanced.spec.ts:3890:42-3890:50: `.mul(10)`
$DIR/test/advanced.spec.ts:3891:26-3891:34: `.mul(20)`
$DIR/test/advanced.spec.ts:3891:42-3891:50: `.mul(20)`
$DIR/test/advanced.spec.ts:3902:50-3902:76: `.getOrderStatus(orderHash)`
$DIR/test/advanced.spec.ts:3908:7-3908:27: `order.numerator = 2;`
$DIR/test/advanced.spec.ts:3909:7-3909:30: `order.denominator = 10;`
$DIR/test/advanced.spec.ts:3912:7-3912:72: `mirrorObject = await createMirrorBuyNowOrder(buyer, zone, order);`
$DIR/test/advanced.spec.ts:3927:37-3927:52: `.connect(owner)`
$DIR/test/advanced.spec.ts:3927:52-3935:8: `.matchAdvancedOrders(
        [order, mirrorObject.mirrorOrder],
        [], // no criteria resolvers
        fulfillments,
        ethers.constants.AddressZero,
        {
          value,
        }
      )`
$DIR/test/advanced.spec.ts:3936:39-3936:46: `.wait()`
$DIR/test/advanced.spec.ts:3955:7-3955:73: `orderStatus = await marketplaceContract.getOrderStatus(orderHash);`
$DIR/test/advanced.spec.ts:3955:46-3955:72: `.getOrderStatus(orderHash)`
$DIR/test/advanced.spec.ts:3961:7-3961:27: `order.numerator = 1;`
$DIR/test/advanced.spec.ts:3962:7-3962:30: `order.denominator = 10;`
$DIR/test/advanced.spec.ts:3964:7-3964:72: `mirrorObject = await createMirrorBuyNowOrder(buyer, zone, order);`
$DIR/test/advanced.spec.ts:3966:7-3973:9: `executions = await simulateAdvancedMatchOrders(
        marketplaceContract,
        [order, mirrorObject.mirrorOrder],
        [], // no criteria resolvers
        fulfillments,
        owner,
        value
      );`
$DIR/test/advanced.spec.ts:3975:38-3975:53: `.connect(owner)`
$DIR/test/advanced.spec.ts:3975:53-3983:8: `.matchAdvancedOrders(
        [order, mirrorObject.mirrorOrder],
        [], // no criteria resolvers
        fulfillments,
        ethers.constants.AddressZero,
        {
          value,
        }
      )`
$DIR/test/advanced.spec.ts:3984:41-3984:48: `.wait()`
$DIR/test/advanced.spec.ts:4003:7-4003:73: `orderStatus = await marketplaceContract.getOrderStatus(orderHash);`
$DIR/test/advanced.spec.ts:4003:46-4003:72: `.getOrderStatus(orderHash)`
$DIR/test/advanced.spec.ts:4010:7-4010:27: `order.numerator = 7;`
$DIR/test/advanced.spec.ts:4011:7-4011:30: `order.denominator = 10;`
$DIR/test/advanced.spec.ts:4013:7-4013:72: `mirrorObject = await createMirrorBuyNowOrder(buyer, zone, order);`
$DIR/test/advanced.spec.ts:4015:7-4022:9: `executions = await simulateAdvancedMatchOrders(
        marketplaceContract,
        [order, mirrorObject.mirrorOrder],
        [], // no criteria resolvers
        fulfillments,
        owner,
        value
      );`
$DIR/test/advanced.spec.ts:4024:44-4024:59: `.connect(owner)`
$DIR/test/advanced.spec.ts:4024:59-4032:8: `.matchAdvancedOrders(
        [order, mirrorObject.mirrorOrder],
        [], // no criteria resolvers
        fulfillments,
        ethers.constants.AddressZero,
        {
          value,
        }
      )`
$DIR/test/advanced.spec.ts:4033:33-4033:40: `.wait()`
$DIR/test/advanced.spec.ts:4051:7-4051:73: `orderStatus = await marketplaceContract.getOrderStatus(orderHash);`
$DIR/test/advanced.spec.ts:4051:46-4051:72: `.getOrderStatus(orderHash)`
$DIR/test/advanced.spec.ts:4059:29-4059:38: `.pow(100)`
$DIR/test/advanced.spec.ts:4060:29-4060:38: `.pow(101)`
$DIR/test/advanced.spec.ts:4061:29-4061:37: `.pow(20)`
$DIR/test/advanced.spec.ts:4062:29-4062:37: `.pow(22)`
$DIR/test/advanced.spec.ts:4064:7-4064:74: `await mintAndApproveERC20(buyer, marketplaceContract.address, amt);`
$DIR/test/advanced.spec.ts:4090:50-4090:76: `.getOrderStatus(orderHash)`
$DIR/test/advanced.spec.ts:4097:7-4097:39: `order.numerator = numer1 as any;`
$DIR/test/advanced.spec.ts:4098:7-4098:41: `order.denominator = denom1 as any;`
$DIR/test/advanced.spec.ts:4101:39-4102:26: `
          .connect(buyer)`
$DIR/test/advanced.spec.ts:4102:26-4105:13: `
          .fulfillAdvancedOrder(order, [], toKey(0), buyer.address, {
            value,
          })`
$DIR/test/advanced.spec.ts:4106:41-4106:48: `.wait()`
$DIR/test/advanced.spec.ts:4125:7-4125:73: `orderStatus = await marketplaceContract.getOrderStatus(orderHash);`
$DIR/test/advanced.spec.ts:4125:46-4125:72: `.getOrderStatus(orderHash)`
$DIR/test/advanced.spec.ts:4131:7-4131:33: `order.numerator = +numer2;`
$DIR/test/advanced.spec.ts:4132:7-4132:35: `order.denominator = +denom2;`
$DIR/test/advanced.spec.ts:4134:7-4138:12: `await marketplaceContract
        .connect(buyer)
        .fulfillAdvancedOrder(order, [], toKey(0), buyer.address, {
          value,
        });`
$DIR/test/advanced.spec.ts:4134:32-4135:24: `
        .connect(buyer)`
$DIR/test/advanced.spec.ts:4135:24-4138:11: `
        .fulfillAdvancedOrder(order, [], toKey(0), buyer.address, {
          value,
        })`
$DIR/test/advanced.spec.ts:4140:7-4140:73: `orderStatus = await marketplaceContract.getOrderStatus(orderHash);`
$DIR/test/advanced.spec.ts:4140:46-4140:72: `.getOrderStatus(orderHash)`
$DIR/test/advanced.spec.ts:4148:29-4148:36: `.pow(7)`
$DIR/test/advanced.spec.ts:4148:36-4148:43: `.sub(1)`
$DIR/test/advanced.spec.ts:4149:29-4149:37: `.pow(61)`
$DIR/test/advanced.spec.ts:4149:37-4149:44: `.sub(1)`
$DIR/test/advanced.spec.ts:4150:29-4150:38: `.pow(107)`
$DIR/test/advanced.spec.ts:4150:38-4150:45: `.sub(1)`
$DIR/test/advanced.spec.ts:4151:25-4151:37: `.mul(prime2)`
$DIR/test/advanced.spec.ts:4151:37-4151:49: `.mul(prime3)`
$DIR/test/advanced.spec.ts:4152:7-4152:74: `await mintAndApproveERC20(buyer, marketplaceContract.address, amt);`
$DIR/test/advanced.spec.ts:4178:50-4178:76: `.getOrderStatus(orderHash)`
$DIR/test/advanced.spec.ts:4185:7-4185:27: `order.numerator = 1;`
$DIR/test/advanced.spec.ts:4186:7-4186:41: `order.denominator = prime2 as any;`
$DIR/test/advanced.spec.ts:4189:39-4190:26: `
          .connect(buyer)`
$DIR/test/advanced.spec.ts:4190:26-4193:13: `
          .fulfillAdvancedOrder(order, [], toKey(0), buyer.address, {
            value,
          })`
$DIR/test/advanced.spec.ts:4194:41-4194:48: `.wait()`
$DIR/test/advanced.spec.ts:4213:7-4213:73: `orderStatus = await marketplaceContract.getOrderStatus(orderHash);`
$DIR/test/advanced.spec.ts:4213:46-4213:72: `.getOrderStatus(orderHash)`
$DIR/test/advanced.spec.ts:4219:7-4219:39: `order.numerator = prime1 as any;`
$DIR/test/advanced.spec.ts:4220:7-4220:41: `order.denominator = prime3 as any;`
$DIR/test/advanced.spec.ts:4223:28-4224:26: `
          .connect(buyer)`
$DIR/test/advanced.spec.ts:4224:26-4227:13: `
          .fulfillAdvancedOrder(order, [], toKey(0), buyer.address, {
            value,
          })`
$DIR/test/advanced.spec.ts:4240:7-4240:77: `await set721ApprovalForAll(seller, marketplaceContract.address, true);`
$DIR/test/advanced.spec.ts:4266:39-4267:26: `
          .connect(buyer)`
$DIR/test/advanced.spec.ts:4267:26-4276:12: `
          .fulfillAdvancedOrder(
            order,
            criteriaResolvers,
            toKey(0),
            ethers.constants.AddressZero,
            {
              value,
            }
          )`
$DIR/test/advanced.spec.ts:4277:41-4277:48: `.wait()`
$DIR/test/advanced.spec.ts:4301:7-4301:78: `await set1155ApprovalForAll(seller, marketplaceContract.address, true);`
$DIR/test/advanced.spec.ts:4327:39-4328:26: `
          .connect(buyer)`
$DIR/test/advanced.spec.ts:4328:26-4337:12: `
          .fulfillAdvancedOrder(
            order,
            criteriaResolvers,
            toKey(0),
            ethers.constants.AddressZero,
            {
              value,
            }
          )`
$DIR/test/advanced.spec.ts:4338:41-4338:48: `.wait()`
$DIR/test/advanced.spec.ts:4363:7-4363:52: `await testERC721.mint(seller.address, nftId);`
$DIR/test/advanced.spec.ts:4363:23-4363:51: `.mint(seller.address, nftId)`
$DIR/test/advanced.spec.ts:4364:7-4364:58: `await testERC721.mint(seller.address, secondNFTId);`
$DIR/test/advanced.spec.ts:4364:23-4364:57: `.mint(seller.address, secondNFTId)`
$DIR/test/advanced.spec.ts:4365:7-4365:57: `await testERC721.mint(seller.address, thirdNFTId);`
$DIR/test/advanced.spec.ts:4365:23-4365:56: `.mint(seller.address, thirdNFTId)`
$DIR/test/advanced.spec.ts:4368:7-4368:77: `await set721ApprovalForAll(seller, marketplaceContract.address, true);`
$DIR/test/advanced.spec.ts:4392:39-4393:26: `
          .connect(buyer)`
$DIR/test/advanced.spec.ts:4393:26-4402:12: `
          .fulfillAdvancedOrder(
            order,
            criteriaResolvers,
            toKey(0),
            ethers.constants.AddressZero,
            {
              value,
            }
          )`
$DIR/test/advanced.spec.ts:4403:41-4403:48: `.wait()`
$DIR/test/advanced.spec.ts:4428:7-4428:52: `await testERC721.mint(seller.address, nftId);`
$DIR/test/advanced.spec.ts:4428:23-4428:51: `.mint(seller.address, nftId)`
$DIR/test/advanced.spec.ts:4429:7-4429:58: `await testERC721.mint(seller.address, secondNFTId);`
$DIR/test/advanced.spec.ts:4429:23-4429:57: `.mint(seller.address, secondNFTId)`
$DIR/test/advanced.spec.ts:4430:7-4430:57: `await testERC721.mint(seller.address, thirdNFTId);`
$DIR/test/advanced.spec.ts:4430:23-4430:56: `.mint(seller.address, thirdNFTId)`
$DIR/test/advanced.spec.ts:4435:7-4435:77: `await set721ApprovalForAll(seller, marketplaceContract.address, true);`
$DIR/test/advanced.spec.ts:4473:8-4475:8: `.map(([offerArr, considerationArr]) =>
        toFulfillment(offerArr, considerationArr)
      )`
$DIR/test/advanced.spec.ts:4488:37-4489:24: `
        .connect(owner)`
$DIR/test/advanced.spec.ts:4489:24-4498:10: `
        .matchAdvancedOrders(
          [order, mirrorOrder],
          criteriaResolvers,
          fulfillments,
          ethers.constants.AddressZero,
          {
            value,
          }
        )`
$DIR/test/advanced.spec.ts:4499:39-4499:46: `.wait()`
$DIR/test/advanced.spec.ts:4525:7-4525:78: `await set1155ApprovalForAll(seller, marketplaceContract.address, true);`
$DIR/test/advanced.spec.ts:4563:8-4565:8: `.map(([offerArr, considerationArr]) =>
        toFulfillment(offerArr, considerationArr)
      )`
$DIR/test/advanced.spec.ts:4578:37-4579:24: `
        .connect(owner)`
$DIR/test/advanced.spec.ts:4579:24-4588:10: `
        .matchAdvancedOrders(
          [order, mirrorOrder],
          criteriaResolvers,
          fulfillments,
          ethers.constants.AddressZero,
          {
            value,
          }
        )`
$DIR/test/advanced.spec.ts:4589:39-4589:46: `.wait()`
$DIR/test/advanced.spec.ts:4616:7-4616:52: `await testERC721.mint(seller.address, nftId);`
$DIR/test/advanced.spec.ts:4616:23-4616:51: `.mint(seller.address, nftId)`
$DIR/test/advanced.spec.ts:4617:7-4617:58: `await testERC721.mint(seller.address, secondNFTId);`
$DIR/test/advanced.spec.ts:4617:23-4617:57: `.mint(seller.address, secondNFTId)`
$DIR/test/advanced.spec.ts:4618:7-4618:57: `await testERC721.mint(seller.address, thirdNFTId);`
$DIR/test/advanced.spec.ts:4618:23-4618:56: `.mint(seller.address, thirdNFTId)`
$DIR/test/advanced.spec.ts:4621:7-4621:77: `await set721ApprovalForAll(seller, marketplaceContract.address, true);`
$DIR/test/advanced.spec.ts:4657:8-4659:8: `.map(([offerArr, considerationArr]) =>
        toFulfillment(offerArr, considerationArr)
      )`
$DIR/test/advanced.spec.ts:4672:37-4673:24: `
        .connect(owner)`
$DIR/test/advanced.spec.ts:4673:24-4682:10: `
        .matchAdvancedOrders(
          [order, mirrorOrder],
          criteriaResolvers,
          fulfillments,
          ethers.constants.AddressZero,
          {
            value,
          }
        )`
$DIR/test/advanced.spec.ts:4683:39-4683:46: `.wait()`
$DIR/test/advanced.spec.ts:4710:7-4710:51: `await testERC721.mint(buyer.address, nftId);`
$DIR/test/advanced.spec.ts:4710:23-4710:50: `.mint(buyer.address, nftId)`
$DIR/test/advanced.spec.ts:4711:7-4711:57: `await testERC721.mint(buyer.address, secondNFTId);`
$DIR/test/advanced.spec.ts:4711:23-4711:56: `.mint(buyer.address, secondNFTId)`
$DIR/test/advanced.spec.ts:4712:7-4712:56: `await testERC721.mint(buyer.address, thirdNFTId);`
$DIR/test/advanced.spec.ts:4712:23-4712:55: `.mint(buyer.address, thirdNFTId)`
$DIR/test/advanced.spec.ts:4717:7-4717:76: `await set721ApprovalForAll(buyer, marketplaceContract.address, true);`
$DIR/test/advanced.spec.ts:4721:7-4725:9: `await mintAndApproveERC20(
        seller,
        marketplaceContract.address,
        tokenAmount
      );`
$DIR/test/advanced.spec.ts:4747:14-4747:22: `.mul(-1)`
$DIR/test/advanced.spec.ts:4750:41-4751:28: `
            .connect(buyer)`
$DIR/test/advanced.spec.ts:4751:28-4760:14: `
            .fulfillAdvancedOrder(
              order,
              criteriaResolvers,
              toKey(0),
              ethers.constants.AddressZero,
              {
                value,
              }
            )`
$DIR/test/advanced.spec.ts:4761:43-4761:50: `.wait()`
$DIR/test/advanced.spec.ts:4786:7-4786:77: `await set1155ApprovalForAll(buyer, marketplaceContract.address, true);`
$DIR/test/advanced.spec.ts:4790:7-4794:9: `await mintAndApproveERC20(
        seller,
        marketplaceContract.address,
        tokenAmount
      );`
$DIR/test/advanced.spec.ts:4816:14-4816:22: `.mul(-1)`
$DIR/test/advanced.spec.ts:4819:41-4820:28: `
            .connect(buyer)`
$DIR/test/advanced.spec.ts:4820:28-4829:14: `
            .fulfillAdvancedOrder(
              order,
              criteriaResolvers,
              toKey(0),
              ethers.constants.AddressZero,
              {
                value,
              }
            )`
$DIR/test/advanced.spec.ts:4830:43-4830:50: `.wait()`
$DIR/test/advanced.spec.ts:4854:7-4858:9: `await mintAndApproveERC20(
        seller,
        marketplaceContract.address,
        tokenAmount
      );`
$DIR/test/advanced.spec.ts:4883:14-4883:22: `.mul(-1)`
$DIR/test/advanced.spec.ts:4886:41-4887:28: `
            .connect(buyer)`
$DIR/test/advanced.spec.ts:4887:28-4896:14: `
            .fulfillAdvancedOrder(
              order,
              criteriaResolvers,
              toKey(0),
              ethers.constants.AddressZero,
              {
                value,
              }
            )`
$DIR/test/advanced.spec.ts:4897:43-4897:50: `.wait()`
$DIR/test/advanced.spec.ts:4923:7-4923:76: `await set721ApprovalForAll(buyer, marketplaceContract.address, true);`
$DIR/test/advanced.spec.ts:4926:7-4930:9: `await mintAndApproveERC20(
        seller,
        marketplaceContract.address,
        tokenAmount
      );`
$DIR/test/advanced.spec.ts:4933:7-4937:9: `await mintAndApproveERC20(
        buyer,
        marketplaceContract.address,
        tokenAmount
      );`
$DIR/test/advanced.spec.ts:4943:34-4943:43: `.sub(100)`
$DIR/test/advanced.spec.ts:4943:56-4943:65: `.sub(100)`
$DIR/test/advanced.spec.ts:4994:37-4995:24: `
        .connect(owner)`
$DIR/test/advanced.spec.ts:4995:24-5004:10: `
        .matchAdvancedOrders(
          [order, mirrorOrder],
          criteriaResolvers,
          fulfillments,
          ethers.constants.AddressZero,
          {
            value,
          }
        )`
$DIR/test/advanced.spec.ts:5005:39-5005:46: `.wait()`
$DIR/test/advanced.spec.ts:5032:7-5032:77: `await set1155ApprovalForAll(buyer, marketplaceContract.address, true);`
$DIR/test/advanced.spec.ts:5035:7-5039:9: `await mintAndApproveERC20(
        seller,
        marketplaceContract.address,
        tokenAmount
      );`
$DIR/test/advanced.spec.ts:5042:7-5046:9: `await mintAndApproveERC20(
        buyer,
        marketplaceContract.address,
        tokenAmount
      );`
$DIR/test/advanced.spec.ts:5052:34-5052:43: `.sub(100)`
$DIR/test/advanced.spec.ts:5052:56-5052:65: `.sub(100)`
$DIR/test/advanced.spec.ts:5103:37-5104:24: `
        .connect(owner)`
$DIR/test/advanced.spec.ts:5104:24-5113:10: `
        .matchAdvancedOrders(
          [order, mirrorOrder],
          criteriaResolvers,
          fulfillments,
          ethers.constants.AddressZero,
          {
            value,
          }
        )`
$DIR/test/advanced.spec.ts:5114:39-5114:46: `.wait()`
$DIR/test/advanced.spec.ts:5141:7-5141:78: `await set1155ApprovalForAll(seller, marketplaceContract.address, true);`
$DIR/test/advanced.spec.ts:5167:28-5168:26: `
          .connect(buyer)`
$DIR/test/advanced.spec.ts:5168:26-5177:12: `
          .fulfillAdvancedOrder(
            order,
            criteriaResolvers,
            toKey(0),
            ethers.constants.AddressZero,
            {
              value,
            }
          )`
$DIR/test/advanced.spec.ts:5190:51-5190:59: `.mul(10)`
$DIR/test/advanced.spec.ts:5190:67-5190:75: `.mul(10)`
$DIR/test/advanced.spec.ts:5193:26-5193:36: `.mul(1000)`
$DIR/test/advanced.spec.ts:5193:44-5193:54: `.mul(1000)`
$DIR/test/advanced.spec.ts:5194:26-5194:34: `.mul(10)`
$DIR/test/advanced.spec.ts:5194:42-5194:50: `.mul(10)`
$DIR/test/advanced.spec.ts:5195:26-5195:34: `.mul(20)`
$DIR/test/advanced.spec.ts:5195:42-5195:50: `.mul(20)`
$DIR/test/advanced.spec.ts:5213:52-5213:78: `.getOrderStatus(orderHash)`
$DIR/test/advanced.spec.ts:5219:7-5219:27: `order.numerator = 2;`
$DIR/test/advanced.spec.ts:5220:7-5220:30: `order.denominator = 10;`
$DIR/test/advanced.spec.ts:5223:39-5224:26: `
          .connect(buyer)`
$DIR/test/advanced.spec.ts:5224:26-5233:12: `
          .fulfillAdvancedOrder(
            order,
            [],
            toKey(0),
            ethers.constants.AddressZero,
            {
              value,
            }
          )`
$DIR/test/advanced.spec.ts:5234:41-5234:48: `.wait()`
$DIR/test/advanced.spec.ts:5265:51-5265:59: `.mul(10)`
$DIR/test/advanced.spec.ts:5265:67-5265:75: `.mul(10)`
$DIR/test/advanced.spec.ts:5268:26-5268:36: `.mul(1000)`
$DIR/test/advanced.spec.ts:5268:44-5268:54: `.mul(1000)`
$DIR/test/advanced.spec.ts:5269:26-5269:34: `.mul(10)`
$DIR/test/advanced.spec.ts:5269:42-5269:50: `.mul(10)`
$DIR/test/advanced.spec.ts:5270:26-5270:34: `.mul(20)`
$DIR/test/advanced.spec.ts:5270:42-5270:50: `.mul(20)`
$DIR/test/advanced.spec.ts:5290:52-5290:78: `.getOrderStatus(orderHash)`
$DIR/test/advanced.spec.ts:5296:7-5296:27: `order.numerator = 2;`
$DIR/test/advanced.spec.ts:5297:7-5297:30: `order.denominator = 10;`
$DIR/test/advanced.spec.ts:5300:39-5301:26: `
          .connect(buyer)`
$DIR/test/advanced.spec.ts:5301:26-5310:12: `
          .fulfillAdvancedOrder(
            order,
            [],
            toKey(0),
            ethers.constants.AddressZero,
            {
              value,
            }
          )`
$DIR/test/advanced.spec.ts:5311:41-5311:48: `.wait()`
$DIR/test/advanced.spec.ts:5338:51-5338:59: `.mul(10)`
$DIR/test/advanced.spec.ts:5338:67-5338:75: `.mul(10)`
$DIR/test/advanced.spec.ts:5341:26-5341:36: `.mul(1000)`
$DIR/test/advanced.spec.ts:5341:44-5341:54: `.mul(1000)`
$DIR/test/advanced.spec.ts:5342:26-5342:34: `.mul(10)`
$DIR/test/advanced.spec.ts:5342:42-5342:50: `.mul(10)`
$DIR/test/advanced.spec.ts:5343:26-5343:34: `.mul(20)`
$DIR/test/advanced.spec.ts:5343:42-5343:50: `.mul(20)`
$DIR/test/advanced.spec.ts:5361:52-5361:78: `.getOrderStatus(orderHash)`
$DIR/test/advanced.spec.ts:5367:7-5367:27: `order.numerator = 2;`
$DIR/test/advanced.spec.ts:5368:7-5368:30: `order.denominator = 10;`
$DIR/test/advanced.spec.ts:5371:39-5372:26: `
          .connect(buyer)`
$DIR/test/advanced.spec.ts:5372:26-5381:12: `
          .fulfillAdvancedOrder(
            order,
            [],
            toKey(0),
            ethers.constants.AddressZero,
            {
              value,
            }
          )`
$DIR/test/advanced.spec.ts:5382:41-5382:48: `.wait()`
$DIR/test/advanced.spec.ts:5408:36-5408:43: `.mul(2)`
$DIR/test/advanced.spec.ts:5409:7-5409:72: `await testERC1155.mint(seller.address, nftId, endAmount.mul(10));`
$DIR/test/advanced.spec.ts:5409:24-5409:71: `.mint(seller.address, nftId, endAmount.mul(10))`
$DIR/test/advanced.spec.ts:5409:62-5409:70: `.mul(10)`
$DIR/test/advanced.spec.ts:5413:7-5413:78: `await set1155ApprovalForAll(seller, marketplaceContract.address, true);`
$DIR/test/advanced.spec.ts:5431:50-5431:76: `.getOrderStatus(orderHash)`
$DIR/test/advanced.spec.ts:5438:39-5439:26: `
          .connect(buyer)`
$DIR/test/advanced.spec.ts:5439:26-5448:12: `
          .fulfillAdvancedOrder(
            order,
            [],
            toKey(0),
            ethers.constants.AddressZero,
            {
              value,
            }
          )`
$DIR/test/advanced.spec.ts:5449:41-5449:48: `.wait()`
$DIR/test/advanced.spec.ts:5468:7-5468:73: `orderStatus = await marketplaceContract.getOrderStatus(orderHash);`
$DIR/test/advanced.spec.ts:5468:46-5468:72: `.getOrderStatus(orderHash)`
$DIR/test/advanced.spec.ts:5477:7-5481:9: `await mintAndApproveERC20(
        seller,
        marketplaceContract.address,
        tokenAmount
      );`
$DIR/test/advanced.spec.ts:5486:36-5486:43: `.mul(2)`
$DIR/test/advanced.spec.ts:5487:7-5487:71: `await testERC1155.mint(buyer.address, nftId, endAmount.mul(10));`
$DIR/test/advanced.spec.ts:5487:24-5487:70: `.mint(buyer.address, nftId, endAmount.mul(10))`
$DIR/test/advanced.spec.ts:5487:61-5487:69: `.mul(10)`
$DIR/test/advanced.spec.ts:5490:7-5490:77: `await set1155ApprovalForAll(buyer, marketplaceContract.address, true);`
$DIR/test/advanced.spec.ts:5494:18-5495:26: `
          .connect(buyer)`
$DIR/test/advanced.spec.ts:5495:26-5496:61: `
          .approve(marketplaceContract.address, tokenAmount)`
$DIR/test/advanced.spec.ts:5523:50-5523:76: `.getOrderStatus(orderHash)`
$DIR/test/advanced.spec.ts:5530:39-5531:26: `
          .connect(buyer)`
$DIR/test/advanced.spec.ts:5531:26-5540:12: `
          .fulfillAdvancedOrder(
            order,
            [],
            toKey(0),
            ethers.constants.AddressZero,
            {
              value,
            }
          )`
$DIR/test/advanced.spec.ts:5541:41-5541:48: `.wait()`
$DIR/test/advanced.spec.ts:5560:7-5560:73: `orderStatus = await marketplaceContract.getOrderStatus(orderHash);`
$DIR/test/advanced.spec.ts:5560:46-5560:72: `.getOrderStatus(orderHash)`
$DIR/test/advanced.spec.ts:5570:36-5570:43: `.mul(2)`
$DIR/test/advanced.spec.ts:5571:7-5571:72: `await testERC1155.mint(seller.address, nftId, endAmount.mul(10));`
$DIR/test/advanced.spec.ts:5571:24-5571:71: `.mint(seller.address, nftId, endAmount.mul(10))`
$DIR/test/advanced.spec.ts:5571:62-5571:70: `.mul(10)`
$DIR/test/advanced.spec.ts:5575:7-5575:78: `await set1155ApprovalForAll(seller, marketplaceContract.address, true);`
$DIR/test/advanced.spec.ts:5593:50-5593:76: `.getOrderStatus(orderHash)`
$DIR/test/advanced.spec.ts:5617:37-5618:24: `
        .connect(owner)`
$DIR/test/advanced.spec.ts:5618:24-5621:11: `
        .matchOrders([order, mirrorOrder], fulfillments, {
          value,
        })`
$DIR/test/advanced.spec.ts:5622:39-5622:46: `.wait()`
$DIR/test/advanced.spec.ts:5641:7-5641:73: `orderStatus = await marketplaceContract.getOrderStatus(orderHash);`
$DIR/test/advanced.spec.ts:5641:46-5641:72: `.getOrderStatus(orderHash)`
$DIR/test/advanced.spec.ts:5747:8-5749:8: `.map(([offerArr, considerationArr]) =>
        toFulfillment(offerArr, considerationArr)
      )`
$DIR/test/advanced.spec.ts:5762:37-5763:24: `
        .connect(owner)`
$DIR/test/advanced.spec.ts:5763:24-5772:10: `
        .matchAdvancedOrders(
          [orderOne, orderTwo, orderThree],
          [],
          fulfillments,
          ethers.constants.AddressZero,
          {
            value: 0,
          }
        )`
$DIR/test/advanced.spec.ts:5773:39-5773:46: `.wait()`
$DIR/test/advanced.spec.ts:5877:8-5879:8: `.map(([offerArr, considerationArr]) =>
        toFulfillment(offerArr, considerationArr)
      )`
$DIR/test/advanced.spec.ts:5892:37-5893:24: `
        .connect(owner)`
$DIR/test/advanced.spec.ts:5893:24-5902:10: `
        .matchAdvancedOrders(
          [orderOne, orderTwo, orderThree],
          [],
          fulfillments,
          ethers.constants.AddressZero,
          {
            value: 0,
          }
        )`
$DIR/test/advanced.spec.ts:5903:39-5903:46: `.wait()`
$DIR/test/advanced.spec.ts:6006:8-6008:8: `.map(([offerArr, considerationArr]) =>
        toFulfillment(offerArr, considerationArr)
      )`
$DIR/test/advanced.spec.ts:6011:28-6012:26: `
          .connect(owner)`
$DIR/test/advanced.spec.ts:6012:26-6021:12: `
          .matchAdvancedOrders(
            [orderOne, orderTwo, orderThree],
            [],
            fulfillments,
            ethers.constants.AddressZero,
            {
              value: 0,
            }
          )`
$DIR/test/advanced.spec.ts:6036:7-6036:78: `await set1155ApprovalForAll(seller, marketplaceContract.address, true);`
$DIR/test/advanced.spec.ts:6040:7-6044:9: `await mintAndApproveERC20(
        buyer,
        marketplaceContract.address,
        tokenAmount.mul(2)
      );`
$DIR/test/advanced.spec.ts:6043:20-6043:27: `.mul(2)`
$DIR/test/advanced.spec.ts:6075:34-6075:41: `.mul(2)`
$DIR/test/advanced.spec.ts:6075:54-6075:61: `.mul(2)`
$DIR/test/advanced.spec.ts:6081:17-6081:24: `.mul(2)`
$DIR/test/advanced.spec.ts:6082:17-6082:24: `.mul(2)`
$DIR/test/advanced.spec.ts:6107:8-6109:8: `.map(([offerArr, considerationArr]) =>
        toFulfillment(offerArr, considerationArr)
      )`
$DIR/test/advanced.spec.ts:6122:37-6123:24: `
        .connect(buyer)`
$DIR/test/advanced.spec.ts:6123:24-6132:10: `
        .matchAdvancedOrders(
          [orderOne, orderTwo, orderThree],
          [],
          fulfillments,
          ethers.constants.AddressZero,
          {
            value: 0,
          }
        )`
$DIR/test/advanced.spec.ts:6133:39-6133:46: `.wait()`
$DIR/test/advanced.spec.ts:6167:30-6167:72: `.interface.getEventTopic("TransferSingle")`
$DIR/test/advanced.spec.ts:6169:21-6169:31: `.slice(66)`
$DIR/test/advanced.spec.ts:6181:7-6181:78: `await set1155ApprovalForAll(seller, marketplaceContract.address, true);`
$DIR/test/advanced.spec.ts:6185:7-6189:9: `await mintAndApproveERC20(
        buyer,
        marketplaceContract.address,
        tokenAmount.mul(2)
      );`
$DIR/test/advanced.spec.ts:6188:20-6188:27: `.mul(2)`
$DIR/test/advanced.spec.ts:6192:38-6192:45: `.mul(2)`
$DIR/test/advanced.spec.ts:6192:53-6192:60: `.mul(2)`
$DIR/test/advanced.spec.ts:6196:34-6196:41: `.mul(2)`
$DIR/test/advanced.spec.ts:6196:54-6196:61: `.mul(2)`
$DIR/test/advanced.spec.ts:6246:8-6248:8: `.map(([offerArr, considerationArr]) =>
        toFulfillment(offerArr, considerationArr)
      )`
$DIR/test/advanced.spec.ts:6261:37-6262:24: `
        .connect(buyer)`
$DIR/test/advanced.spec.ts:6262:24-6271:10: `
        .matchAdvancedOrders(
          [orderOne, orderTwo, orderThree],
          [],
          fulfillments,
          ethers.constants.AddressZero,
          {
            value: 0,
          }
        )`
$DIR/test/advanced.spec.ts:6272:39-6272:46: `.wait()`
$DIR/test/advanced.spec.ts:6308:7-6308:78: `await set1155ApprovalForAll(seller, marketplaceContract.address, true);`
$DIR/test/advanced.spec.ts:6312:7-6316:9: `await mintAndApproveERC20(
        buyer,
        marketplaceContract.address,
        tokenAmount.mul(2)
      );`
$DIR/test/advanced.spec.ts:6315:20-6315:27: `.mul(2)`
$DIR/test/advanced.spec.ts:6319:38-6319:45: `.mul(2)`
$DIR/test/advanced.spec.ts:6319:53-6319:60: `.mul(2)`
$DIR/test/advanced.spec.ts:6323:34-6323:41: `.mul(2)`
$DIR/test/advanced.spec.ts:6323:54-6323:61: `.mul(2)`
$DIR/test/advanced.spec.ts:6391:8-6393:8: `.map(([offerArr, considerationArr]) =>
        toFulfillment(offerArr, considerationArr)
      )`
$DIR/test/advanced.spec.ts:6406:37-6407:24: `
        .connect(buyer)`
$DIR/test/advanced.spec.ts:6407:24-6416:10: `
        .matchAdvancedOrders(
          [orderOne, orderTwo, orderThree],
          [],
          fulfillments,
          ethers.constants.AddressZero,
          {
            value: 0,
          }
        )`
$DIR/test/advanced.spec.ts:6417:39-6417:46: `.wait()`
$DIR/test/advanced.spec.ts:6489:8-6491:8: `.map(([offerArr, considerationArr]) =>
        toFulfillment(offerArr, considerationArr)
      )`
$DIR/test/advanced.spec.ts:6503:37-6504:24: `
        .connect(owner)`
$DIR/test/advanced.spec.ts:6504:24-6507:11: `
        .matchOrders([order, mirrorOrder], fulfillments, {
          value,
        })`
$DIR/test/advanced.spec.ts:6508:39-6508:46: `.wait()`
$DIR/test/advanced.spec.ts:6574:8-6576:8: `.map(([offerArr, considerationArr]) =>
        toFulfillment(offerArr, considerationArr)
      )`
$DIR/test/advanced.spec.ts:6588:37-6589:24: `
        .connect(owner)`
$DIR/test/advanced.spec.ts:6589:24-6592:11: `
        .matchOrders([order, mirrorOrder], fulfillments, {
          value,
        })`
$DIR/test/advanced.spec.ts:6593:39-6593:46: `.wait()`
$DIR/test/advanced.spec.ts:6668:8-6670:8: `.map(([offerArr, considerationArr]) =>
        toFulfillment(offerArr, considerationArr)
      )`
$DIR/test/advanced.spec.ts:6682:37-6683:24: `
        .connect(owner)`
$DIR/test/advanced.spec.ts:6683:24-6686:11: `
        .matchOrders([order, mirrorOrder], fulfillments, {
          value,
        })`
$DIR/test/advanced.spec.ts:6687:39-6687:46: `.wait()`
$DIR/test/advanced.spec.ts:6763:8-6765:8: `.map(([offerArr, considerationArr]) =>
        toFulfillment(offerArr, considerationArr)
      )`
$DIR/test/advanced.spec.ts:6777:37-6778:24: `
        .connect(owner)`
$DIR/test/advanced.spec.ts:6778:24-6781:11: `
        .matchOrders([order, mirrorOrder], fulfillments, {
          value,
        })`
$DIR/test/advanced.spec.ts:6782:39-6782:46: `.wait()`
$DIR/test/advanced.spec.ts:6851:8-6853:8: `.map(([offerArr, considerationArr]) =>
        toFulfillment(offerArr, considerationArr)
      )`
$DIR/test/advanced.spec.ts:6865:37-6866:24: `
        .connect(owner)`
$DIR/test/advanced.spec.ts:6866:24-6869:11: `
        .matchOrders([order, mirrorOrder], fulfillments, {
          value,
        })`
$DIR/test/advanced.spec.ts:6870:39-6870:46: `.wait()`
$DIR/test/advanced.spec.ts:6934:8-6936:8: `.map(([offerArr, considerationArr]) =>
        toFulfillment(offerArr, considerationArr)
      )`
$DIR/test/advanced.spec.ts:6948:37-6949:24: `
        .connect(owner)`
$DIR/test/advanced.spec.ts:6949:24-6952:11: `
        .matchOrders([order, mirrorOrder], fulfillments, {
          value,
        })`
$DIR/test/advanced.spec.ts:6953:39-6953:46: `.wait()`
$DIR/test/advanced.spec.ts:7010:37-7011:24: `
        .connect(owner)`
$DIR/test/advanced.spec.ts:7011:24-7014:11: `
        .matchOrders([order, mirrorOrder], fulfillments, {
          value,
        })`
$DIR/test/advanced.spec.ts:7015:39-7015:46: `.wait()`
$DIR/test/advanced.spec.ts:7069:8-7071:8: `.map(([offerArr, considerationArr]) =>
        toFulfillment(offerArr, considerationArr)
      )`
$DIR/test/advanced.spec.ts:7083:37-7084:24: `
        .connect(owner)`
$DIR/test/advanced.spec.ts:7084:24-7087:11: `
        .matchOrders([order, mirrorOrder], fulfillments, {
          value,
        })`
$DIR/test/advanced.spec.ts:7088:39-7088:46: `.wait()`
$DIR/test/advanced.spec.ts:7115:7-7115:76: `await testERC1155Two.mint(seller.address, secondNftId, secondAmount);`
$DIR/test/advanced.spec.ts:7115:27-7115:75: `.mint(seller.address, secondNftId, secondAmount)`
$DIR/test/advanced.spec.ts:7119:7-7119:78: `await set1155ApprovalForAll(seller, marketplaceContract.address, true);`
$DIR/test/advanced.spec.ts:7122:23-7123:27: `
          .connect(seller)`
$DIR/test/advanced.spec.ts:7123:27-7124:64: `
          .setApprovalForAll(marketplaceContract.address, true)`
$DIR/test/advanced.spec.ts:7161:8-7163:8: `.map(([offerArr, considerationArr]) =>
        toFulfillment(offerArr, considerationArr)
      )`
$DIR/test/advanced.spec.ts:7175:7-7179:12: `await marketplaceContract
        .connect(owner)
        .matchOrders([order, mirrorOrder], fulfillments, {
          value,
        });`
$DIR/test/advanced.spec.ts:7175:32-7176:24: `
        .connect(owner)`
$DIR/test/advanced.spec.ts:7176:24-7179:11: `
        .matchOrders([order, mirrorOrder], fulfillments, {
          value,
        })`
$DIR/test/advanced.spec.ts:7191:7-7191:76: `await testERC1155Two.mint(seller.address, secondNftId, secondAmount);`
$DIR/test/advanced.spec.ts:7191:27-7191:75: `.mint(seller.address, secondNftId, secondAmount)`
$DIR/test/advanced.spec.ts:7199:23-7200:27: `
          .connect(seller)`
$DIR/test/advanced.spec.ts:7200:27-7201:64: `
          .setApprovalForAll(marketplaceContract.address, true)`
$DIR/test/advanced.spec.ts:7240:8-7242:8: `.map(([offerArr, considerationArr]) =>
        toFulfillment(offerArr, considerationArr)
      )`
$DIR/test/advanced.spec.ts:7254:7-7258:12: `await marketplaceContract
        .connect(owner)
        .matchOrders([order, mirrorOrder], fulfillments, {
          value,
        });`
$DIR/test/advanced.spec.ts:7254:32-7255:24: `
        .connect(owner)`
$DIR/test/advanced.spec.ts:7255:24-7258:11: `
        .matchOrders([order, mirrorOrder], fulfillments, {
          value,
        })`
$DIR/test/advanced.spec.ts:7270:7-7270:76: `await testERC1155Two.mint(seller.address, secondNftId, secondAmount);`
$DIR/test/advanced.spec.ts:7270:27-7270:75: `.mint(seller.address, secondNftId, secondAmount)`
$DIR/test/advanced.spec.ts:7278:7-7278:76: `await testERC1155Two.mint(seller.address, fourthNftId, fourthAmount);`
$DIR/test/advanced.spec.ts:7278:27-7278:75: `.mint(seller.address, fourthNftId, fourthAmount)`
$DIR/test/advanced.spec.ts:7283:23-7284:27: `
          .connect(seller)`
$DIR/test/advanced.spec.ts:7284:27-7285:64: `
          .setApprovalForAll(marketplaceContract.address, true)`
$DIR/test/advanced.spec.ts:7331:8-7333:8: `.map(([offerArr, considerationArr]) =>
        toFulfillment(offerArr, considerationArr)
      )`
$DIR/test/advanced.spec.ts:7345:7-7349:12: `await marketplaceContract
        .connect(owner)
        .matchOrders([order, mirrorOrder], fulfillments, {
          value,
        });`
$DIR/test/advanced.spec.ts:7345:32-7346:24: `
        .connect(owner)`
$DIR/test/advanced.spec.ts:7346:24-7349:11: `
        .matchOrders([order, mirrorOrder], fulfillments, {
          value,
        })`
$DIR/test/advanced.spec.ts:7380:69-7382:8: `.map(
        toFulfillmentComponents
      )`
$DIR/test/advanced.spec.ts:7385:39-7386:26: `
          .connect(buyer)`
$DIR/test/advanced.spec.ts:7386:26-7396:12: `
          .fulfillAvailableOrders(
            [order],
            offerComponents,
            considerationComponents,
            toKey(0),
            100,
            {
              value,
            }
          )`
$DIR/test/advanced.spec.ts:7397:41-7397:48: `.wait()`
$DIR/test/advanced.spec.ts:7441:39-7442:26: `
          .connect(buyer)`
$DIR/test/advanced.spec.ts:7442:26-7454:12: `
          .fulfillAvailableAdvancedOrders(
            [order],
            [],
            offerComponents,
            considerationComponents,
            toKey(0),
            ethers.constants.AddressZero,
            100,
            {
              value,
            }
          )`
$DIR/test/advanced.spec.ts:7455:41-7455:48: `.wait()`
$DIR/test/advanced.spec.ts:7496:39-7497:26: `
          .connect(buyer)`
$DIR/test/advanced.spec.ts:7497:26-7509:12: `
          .fulfillAvailableAdvancedOrders(
            [order],
            [],
            offerComponents,
            considerationComponents,
            toKey(0),
            owner.address,
            100,
            {
              value,
            }
          )`
$DIR/test/advanced.spec.ts:7510:41-7510:48: `.wait()`
$DIR/test/advanced.spec.ts:7533:51-7533:58: `.div(2)`
$DIR/test/advanced.spec.ts:7533:66-7533:73: `.div(2)`
$DIR/test/advanced.spec.ts:7581:8-7581:37: `.map(toFulfillmentComponents)`
$DIR/test/advanced.spec.ts:7588:41-7589:28: `
            .connect(buyer)`
$DIR/test/advanced.spec.ts:7589:28-7599:14: `
            .fulfillAvailableOrders(
              [orderOne, orderTwo],
              offerComponents,
              considerationComponents,
              toKey(0),
              100,
              {
                value: value.mul(2),
              }
            )`
$DIR/test/advanced.spec.ts:7597:29-7597:36: `.mul(2)`
$DIR/test/advanced.spec.ts:7600:43-7600:50: `.wait()`
$DIR/test/advanced.spec.ts:7636:51-7636:58: `.div(2)`
$DIR/test/advanced.spec.ts:7636:66-7636:73: `.div(2)`
$DIR/test/advanced.spec.ts:7665:7-7668:9: `orderOne.extraData = ethers.utils.defaultAbiCoder.encode(
        ["bytes32[]"],
        [[orderHashOne, orderHashTwo]]
      );`
$DIR/test/advanced.spec.ts:7665:34-7668:8: `.utils.defaultAbiCoder.encode(
        ["bytes32[]"],
        [[orderHashOne, orderHashTwo]]
      )`
$DIR/test/advanced.spec.ts:7692:8-7692:37: `.map(toFulfillmentComponents)`
$DIR/test/advanced.spec.ts:7699:41-7700:28: `
            .connect(buyer)`
$DIR/test/advanced.spec.ts:7700:28-7712:14: `
            .fulfillAvailableAdvancedOrders(
              [orderOne, orderTwo],
              [],
              offerComponents,
              considerationComponents,
              toKey(0),
              ethers.constants.AddressZero,
              100,
              {
                value: value.mul(2),
              }
            )`
$DIR/test/advanced.spec.ts:7710:29-7710:36: `.mul(2)`
$DIR/test/advanced.spec.ts:7713:43-7713:50: `.wait()`
$DIR/test/advanced.spec.ts:7749:51-7749:58: `.div(2)`
$DIR/test/advanced.spec.ts:7749:66-7749:73: `.div(2)`
$DIR/test/advanced.spec.ts:7799:8-7799:37: `.map(toFulfillmentComponents)`
$DIR/test/advanced.spec.ts:7806:41-7807:28: `
            .connect(buyer)`
$DIR/test/advanced.spec.ts:7807:28-7817:14: `
            .fulfillAvailableOrders(
              [orderOne, orderTwo],
              offerComponents,
              considerationComponents,
              toKey(0),
              100,
              {
                value: value.mul(2),
              }
            )`
$DIR/test/advanced.spec.ts:7815:29-7815:36: `.mul(2)`
$DIR/test/advanced.spec.ts:7818:43-7818:50: `.wait()`
$DIR/test/advanced.spec.ts:7854:51-7854:58: `.div(2)`
$DIR/test/advanced.spec.ts:7854:66-7854:73: `.div(2)`
$DIR/test/advanced.spec.ts:7904:8-7904:37: `.map(toFulfillmentComponents)`
$DIR/test/advanced.spec.ts:7911:41-7912:28: `
            .connect(buyer)`
$DIR/test/advanced.spec.ts:7912:28-7922:14: `
            .fulfillAvailableOrders(
              [orderOne, orderTwo],
              offerComponents,
              considerationComponents,
              toKey(0),
              100,
              {
                value: value.mul(2),
              }
            )`
$DIR/test/advanced.spec.ts:7920:29-7920:36: `.mul(2)`
$DIR/test/advanced.spec.ts:7923:43-7923:50: `.wait()`
$DIR/test/advanced.spec.ts:7959:51-7959:58: `.div(2)`
$DIR/test/advanced.spec.ts:7959:66-7959:73: `.div(2)`
$DIR/test/advanced.spec.ts:8007:8-8007:37: `.map(toFulfillmentComponents)`
$DIR/test/advanced.spec.ts:8014:41-8015:28: `
            .connect(buyer)`
$DIR/test/advanced.spec.ts:8015:28-8027:14: `
            .fulfillAvailableAdvancedOrders(
              [orderOne, orderTwo],
              [],
              offerComponents,
              considerationComponents,
              toKey(0),
              ethers.constants.AddressZero,
              100,
              {
                value: value.mul(2),
              }
            )`
$DIR/test/advanced.spec.ts:8025:29-8025:36: `.mul(2)`
$DIR/test/advanced.spec.ts:8028:43-8028:50: `.wait()`
$DIR/test/advanced.spec.ts:8064:51-8064:58: `.div(2)`
$DIR/test/advanced.spec.ts:8064:66-8064:73: `.div(2)`
$DIR/test/advanced.spec.ts:8116:59-8117:28: `
            .connect(buyer)`
$DIR/test/advanced.spec.ts:8117:28-8127:14: `
            .callStatic.fulfillAvailableOrders(
              [orderOne, orderTwo],
              offerComponents,
              considerationComponents,
              toKey(0),
              1,
              {
                value: value.mul(2),
              }
            )`
$DIR/test/advanced.spec.ts:8125:29-8125:36: `.mul(2)`
$DIR/test/advanced.spec.ts:8128:41-8129:28: `
            .connect(buyer)`
$DIR/test/advanced.spec.ts:8129:28-8139:14: `
            .fulfillAvailableOrders(
              [orderOne, orderTwo],
              offerComponents,
              considerationComponents,
              toKey(0),
              1,
              {
                value: value.mul(2),
              }
            )`
$DIR/test/advanced.spec.ts:8137:29-8137:36: `.mul(2)`
$DIR/test/advanced.spec.ts:8140:43-8140:50: `.wait()`
$DIR/test/advanced.spec.ts:8169:51-8169:58: `.div(2)`
$DIR/test/advanced.spec.ts:8169:66-8169:73: `.div(2)`
$DIR/test/advanced.spec.ts:8223:41-8224:28: `
            .connect(buyer)`
$DIR/test/advanced.spec.ts:8224:28-8236:14: `
            .fulfillAvailableAdvancedOrders(
              [orderOne, orderTwo],
              [],
              offerComponents,
              considerationComponents,
              toKey(0),
              ethers.constants.AddressZero,
              1,
              {
                value: value.mul(2),
              }
            )`
$DIR/test/advanced.spec.ts:8234:29-8234:36: `.mul(2)`
$DIR/test/advanced.spec.ts:8237:43-8237:50: `.wait()`
$DIR/test/advanced.spec.ts:8269:51-8269:58: `.div(2)`
$DIR/test/advanced.spec.ts:8269:66-8269:73: `.div(2)`
$DIR/test/advanced.spec.ts:8315:28-8315:44: `.connect(seller)`
$DIR/test/advanced.spec.ts:8315:44-8315:70: `.cancel([orderComponents])`
$DIR/test/advanced.spec.ts:8331:39-8332:26: `
          .connect(buyer)`
$DIR/test/advanced.spec.ts:8332:26-8335:13: `
          .fulfillOrder(orderFour, toKey(0), {
            value,
          })`
$DIR/test/advanced.spec.ts:8336:41-8336:48: `.wait()`
$DIR/test/advanced.spec.ts:8378:39-8379:26: `
          .connect(buyer)`
$DIR/test/advanced.spec.ts:8379:26-8389:12: `
          .fulfillAvailableOrders(
            [orderOne, orderTwo, orderThree, orderFour],
            offerComponents,
            considerationComponents,
            toKey(0),
            100,
            {
              value: value.mul(4),
            }
          )`
$DIR/test/advanced.spec.ts:8387:27-8387:34: `.mul(4)`
$DIR/test/advanced.spec.ts:8390:41-8390:48: `.wait()`
$DIR/test/advanced.spec.ts:8412:51-8412:58: `.div(2)`
$DIR/test/advanced.spec.ts:8412:66-8412:73: `.div(2)`
$DIR/test/advanced.spec.ts:8458:28-8458:44: `.connect(seller)`
$DIR/test/advanced.spec.ts:8458:44-8458:70: `.cancel([orderComponents])`
$DIR/test/advanced.spec.ts:8474:39-8475:26: `
          .connect(buyer)`
$DIR/test/advanced.spec.ts:8475:26-8478:13: `
          .fulfillOrder(orderFour, toKey(0), {
            value,
          })`
$DIR/test/advanced.spec.ts:8479:41-8479:48: `.wait()`
$DIR/test/advanced.spec.ts:8521:39-8522:26: `
          .connect(buyer)`
$DIR/test/advanced.spec.ts:8522:26-8534:12: `
          .fulfillAvailableAdvancedOrders(
            [orderOne, orderTwo, orderThree, orderFour],
            [],
            offerComponents,
            considerationComponents,
            toKey(0),
            ethers.constants.AddressZero,
            100,
            {
              value: value.mul(4),
            }
          )`
$DIR/test/advanced.spec.ts:8532:27-8532:34: `.mul(4)`
$DIR/test/advanced.spec.ts:8535:41-8535:48: `.wait()`
$DIR/test/advanced.spec.ts:8564:7-8564:60: `await testERC721.mint(seller.address, criteriaNftId);`
$DIR/test/advanced.spec.ts:8564:23-8564:59: `.mint(seller.address, criteriaNftId)`
$DIR/test/advanced.spec.ts:8565:7-8565:66: `await testERC721.mint(seller.address, secondCriteriaNFTId);`
$DIR/test/advanced.spec.ts:8565:23-8565:65: `.mint(seller.address, secondCriteriaNFTId)`
$DIR/test/advanced.spec.ts:8566:7-8566:65: `await testERC721.mint(seller.address, thirdCriteriaNFTId);`
$DIR/test/advanced.spec.ts:8566:23-8566:64: `.mint(seller.address, thirdCriteriaNFTId)`
$DIR/test/advanced.spec.ts:8571:7-8571:77: `await set721ApprovalForAll(seller, marketplaceContract.address, true);`
$DIR/test/advanced.spec.ts:8632:39-8633:26: `
          .connect(buyer)`
$DIR/test/advanced.spec.ts:8633:26-8645:12: `
          .fulfillAvailableAdvancedOrders(
            [orderOne, orderTwo],
            criteriaResolvers,
            offerComponents,
            considerationComponents,
            toKey(0),
            ethers.constants.AddressZero,
            100,
            {
              value: value.mul(2),
            }
          )`
$DIR/test/advanced.spec.ts:8643:27-8643:34: `.mul(2)`
$DIR/test/advanced.spec.ts:8646:41-8646:48: `.wait()`
$DIR/test/advanced.spec.ts:8669:7-8669:78: `await set1155ApprovalForAll(seller, marketplaceContract.address, true);`
$DIR/test/advanced.spec.ts:8687:48-8687:74: `.getCounter(buyer.address)`
$DIR/test/advanced.spec.ts:8696:19-8696:38: `.sub(unspentAmount)`
$DIR/test/advanced.spec.ts:8697:19-8697:38: `.sub(unspentAmount)`
$DIR/test/advanced.spec.ts:8704:23-8704:39: `.padEnd(66, "0")`
$DIR/test/advanced.spec.ts:8737:37-8738:24: `
        .connect(owner)`
$DIR/test/advanced.spec.ts:8738:24-8741:11: `
        .matchOrders([order, mirrorOrder], fulfillments, {
          value,
        })`
$DIR/test/advanced.spec.ts:8742:39-8742:46: `.wait()`
$DIR/test/advanced.spec.ts:8745:31-8745:63: `.balanceOf(owner.address, nftId)`
$DIR/test/advanced.spec.ts:8760:7-8760:78: `await set1155ApprovalForAll(seller, marketplaceContract.address, true);`
$DIR/test/advanced.spec.ts:8778:48-8778:74: `.getCounter(buyer.address)`
$DIR/test/advanced.spec.ts:8787:19-8787:38: `.sub(unspentAmount)`
$DIR/test/advanced.spec.ts:8788:19-8788:38: `.sub(unspentAmount)`
$DIR/test/advanced.spec.ts:8795:23-8795:39: `.padEnd(66, "0")`
$DIR/test/advanced.spec.ts:8828:37-8829:24: `
        .connect(owner)`
$DIR/test/advanced.spec.ts:8829:24-8838:10: `
        .matchAdvancedOrders(
          [order, mirrorOrder],
          [],
          fulfillments,
          seller.address,
          {
            value,
          }
        )`
$DIR/test/advanced.spec.ts:8839:39-8839:46: `.wait()`
$DIR/test/advanced.spec.ts:8842:31-8842:64: `.balanceOf(seller.address, nftId)`
$DIR/test/basic.spec.ts:159:41-160:28: `
            .connect(buyer)`
$DIR/test/basic.spec.ts:160:28-163:15: `
            .fulfillOrder(order, toKey(0), {
              value,
            })`
$DIR/test/basic.spec.ts:164:43-164:50: `.wait()`
$DIR/test/basic.spec.ts:200:41-201:28: `
            .connect(buyer)`
$DIR/test/basic.spec.ts:201:28-204:15: `
            .fulfillOrder(order, toKey(0), {
              value,
            })`
$DIR/test/basic.spec.ts:205:43-205:50: `.wait()`
$DIR/test/basic.spec.ts:240:14-242:10: `.parameters.consideration.push(
          getItemETH(parseEther("1"), parseEther("1"), owner.address)
        )`
$DIR/test/basic.spec.ts:245:41-246:28: `
            .connect(buyer)`
$DIR/test/basic.spec.ts:246:28-249:15: `
            .fulfillOrder(order, toKey(0), {
              value: value.add(parseEther("1")),
            })`
$DIR/test/basic.spec.ts:248:27-248:48: `.add(parseEther("1"))`
$DIR/test/basic.spec.ts:250:43-250:50: `.wait()`
$DIR/test/basic.spec.ts:285:41-286:28: `
            .connect(buyer)`
$DIR/test/basic.spec.ts:286:28-289:15: `
            .fulfillOrder(order, toKey(0), {
              value,
            })`
$DIR/test/basic.spec.ts:290:43-290:50: `.wait()`
$DIR/test/basic.spec.ts:325:9-325:36: `order.extraData = "0x1234";`
$DIR/test/basic.spec.ts:328:41-329:28: `
            .connect(buyer)`
$DIR/test/basic.spec.ts:329:28-338:14: `
            .fulfillAdvancedOrder(
              order,
              [],
              toKey(0),
              ethers.constants.AddressZero,
              {
                value,
              }
            )`
$DIR/test/basic.spec.ts:339:43-339:50: `.wait()`
$DIR/test/basic.spec.ts:372:9-372:36: `order.extraData = "0x1234";`
$DIR/test/basic.spec.ts:375:41-376:28: `
            .connect(buyer)`
$DIR/test/basic.spec.ts:376:28-379:15: `
            .fulfillAdvancedOrder(order, [], toKey(0), owner.address, {
              value,
            })`
$DIR/test/basic.spec.ts:380:43-380:50: `.wait()`
$DIR/test/basic.spec.ts:420:41-421:28: `
            .connect(buyer)`
$DIR/test/basic.spec.ts:421:28-424:15: `
            .fulfillBasicOrder(basicOrderParameters, {
              value,
            })`
$DIR/test/basic.spec.ts:425:43-425:50: `.wait()`
$DIR/test/basic.spec.ts:468:41-469:28: `
            .connect(buyer)`
$DIR/test/basic.spec.ts:469:28-472:15: `
            .fulfillBasicOrder(basicOrderParameters, {
              value,
            })`
$DIR/test/basic.spec.ts:473:43-473:50: `.wait()`
$DIR/test/basic.spec.ts:516:41-517:28: `
            .connect(buyer)`
$DIR/test/basic.spec.ts:517:28-520:15: `
            .fulfillBasicOrder_efficient_6GL6yc(basicOrderParameters, {
              value,
            })`
$DIR/test/basic.spec.ts:521:43-521:50: `.wait()`
$DIR/test/basic.spec.ts:559:45-559:60: `.connect(owner)`
$DIR/test/basic.spec.ts:559:60-559:78: `.validate([order])`
$DIR/test/basic.spec.ts:561:33-561:40: `.wait()`
$DIR/test/basic.spec.ts:634:41-635:28: `
            .connect(buyer)`
$DIR/test/basic.spec.ts:635:28-638:15: `
            .fulfillBasicOrder(basicOrderParameters, {
              value,
            })`
$DIR/test/basic.spec.ts:639:43-639:50: `.wait()`
$DIR/test/basic.spec.ts:677:45-677:60: `.connect(owner)`
$DIR/test/basic.spec.ts:677:60-677:78: `.validate([order])`
$DIR/test/basic.spec.ts:679:33-679:40: `.wait()`
$DIR/test/basic.spec.ts:752:41-753:28: `
            .connect(buyer)`
$DIR/test/basic.spec.ts:753:28-756:15: `
            .fulfillBasicOrder_efficient_6GL6yc(basicOrderParameters, {
              value,
            })`
$DIR/test/basic.spec.ts:757:43-757:50: `.wait()`
$DIR/test/basic.spec.ts:795:41-796:28: `
            .connect(buyer)`
$DIR/test/basic.spec.ts:796:28-799:15: `
            .fulfillOrder(order, toKey(0), {
              value,
            })`
$DIR/test/basic.spec.ts:800:43-800:50: `.wait()`
$DIR/test/basic.spec.ts:841:45-841:60: `.connect(owner)`
$DIR/test/basic.spec.ts:841:60-841:78: `.validate([order])`
$DIR/test/basic.spec.ts:843:33-843:40: `.wait()`
$DIR/test/basic.spec.ts:911:41-912:28: `
            .connect(buyer)`
$DIR/test/basic.spec.ts:912:28-915:15: `
            .fulfillOrder(order, toKey(0), {
              value,
            })`
$DIR/test/basic.spec.ts:916:43-916:50: `.wait()`
$DIR/test/basic.spec.ts:955:41-956:28: `
            .connect(buyer)`
$DIR/test/basic.spec.ts:956:28-965:14: `
            .fulfillAdvancedOrder(
              order,
              [],
              toKey(0),
              ethers.constants.AddressZero,
              {
                value,
              }
            )`
$DIR/test/basic.spec.ts:966:43-966:50: `.wait()`
$DIR/test/basic.spec.ts:1004:45-1004:60: `.connect(owner)`
$DIR/test/basic.spec.ts:1004:60-1004:78: `.validate([order])`
$DIR/test/basic.spec.ts:1006:33-1006:40: `.wait()`
$DIR/test/basic.spec.ts:1074:41-1075:28: `
            .connect(buyer)`
$DIR/test/basic.spec.ts:1075:28-1084:14: `
            .fulfillAdvancedOrder(
              order,
              [],
              toKey(0),
              ethers.constants.AddressZero,
              {
                value,
              }
            )`
$DIR/test/basic.spec.ts:1085:43-1085:50: `.wait()`
$DIR/test/basic.spec.ts:1139:14-1145:10: `.parameters.consideration.push(
          getItemETH(
            parseEther("2"),
            parseEther("2"),
            "0x0000000000000000000000000000000000000001"
          )
        )`
$DIR/test/basic.spec.ts:1147:14-1153:10: `.parameters.consideration.push(
          getItemETH(
            parseEther("3"),
            parseEther("3"),
            "0x0000000000000000000000000000000000000002"
          )
        )`
$DIR/test/basic.spec.ts:1155:14-1161:10: `.parameters.consideration.push(
          getItemETH(
            parseEther("4"),
            parseEther("4"),
            "0x0000000000000000000000000000000000000003"
          )
        )`
$DIR/test/basic.spec.ts:1164:41-1165:28: `
            .connect(buyer)`
$DIR/test/basic.spec.ts:1165:28-1168:15: `
            .fulfillBasicOrder(basicOrderParameters, {
              value: value.add(parseEther("9")),
            })`
$DIR/test/basic.spec.ts:1167:27-1167:48: `.add(parseEther("9"))`
$DIR/test/basic.spec.ts:1169:43-1169:50: `.wait()`
$DIR/test/basic.spec.ts:1211:41-1212:28: `
            .connect(buyer)`
$DIR/test/basic.spec.ts:1212:28-1215:15: `
            .fulfillBasicOrder(basicOrderParameters, {
              value,
            })`
$DIR/test/basic.spec.ts:1216:43-1216:50: `.wait()`
$DIR/test/basic.spec.ts:1256:41-1257:28: `
            .connect(buyer)`
$DIR/test/basic.spec.ts:1257:28-1260:15: `
            .fulfillBasicOrder(basicOrderParameters, {
              value,
            })`
$DIR/test/basic.spec.ts:1261:43-1261:50: `.wait()`
$DIR/test/basic.spec.ts:1276:9-1276:54: `await testERC721.mint(seller.address, nftId);`
$DIR/test/basic.spec.ts:1276:25-1276:53: `.mint(seller.address, nftId)`
$DIR/test/basic.spec.ts:1280:21-1281:29: `
            .connect(seller)`
$DIR/test/basic.spec.ts:1281:29-1282:66: `
            .setApprovalForAll(marketplaceContract.address, true)`
$DIR/test/basic.spec.ts:1294:32-1294:55: `.utils.parseEther("10")`
$DIR/test/basic.spec.ts:1295:30-1295:53: `.utils.parseEther("10")`
$DIR/test/basic.spec.ts:1302:32-1302:54: `.utils.parseEther("1")`
$DIR/test/basic.spec.ts:1303:30-1303:52: `.utils.parseEther("1")`
$DIR/test/basic.spec.ts:1310:32-1310:54: `.utils.parseEther("1")`
$DIR/test/basic.spec.ts:1311:30-1311:52: `.utils.parseEther("1")`
$DIR/test/basic.spec.ts:1330:41-1331:28: `
            .connect(buyer)`
$DIR/test/basic.spec.ts:1331:28-1332:64: `
            .fulfillBasicOrder(basicOrderParameters, { value })`
$DIR/test/basic.spec.ts:1333:43-1333:50: `.wait()`
$DIR/test/basic.spec.ts:1365:45-1365:60: `.connect(owner)`
$DIR/test/basic.spec.ts:1365:60-1365:78: `.validate([order])`
$DIR/test/basic.spec.ts:1367:33-1367:40: `.wait()`
$DIR/test/basic.spec.ts:1440:41-1441:28: `
            .connect(buyer)`
$DIR/test/basic.spec.ts:1441:28-1444:15: `
            .fulfillBasicOrder(basicOrderParameters, {
              value,
            })`
$DIR/test/basic.spec.ts:1445:43-1445:50: `.wait()`
$DIR/test/basic.spec.ts:1481:9-1481:70: `order.signature = convertSignatureToEIP2098(order.signature);`
$DIR/test/basic.spec.ts:1490:41-1491:28: `
            .connect(buyer)`
$DIR/test/basic.spec.ts:1491:28-1494:15: `
            .fulfillBasicOrder(basicOrderParameters, {
              value,
            })`
$DIR/test/basic.spec.ts:1495:43-1495:50: `.wait()`
$DIR/test/basic.spec.ts:1535:41-1536:28: `
            .connect(buyer)`
$DIR/test/basic.spec.ts:1536:28-1539:15: `
            .fulfillBasicOrder(basicOrderParameters, {
              value: value.add(1),
            })`
$DIR/test/basic.spec.ts:1538:27-1538:34: `.add(1)`
$DIR/test/basic.spec.ts:1540:43-1540:50: `.wait()`
$DIR/test/basic.spec.ts:1591:39-1592:26: `
          .connect(owner)`
$DIR/test/basic.spec.ts:1592:26-1595:13: `
          .matchOrders([order, mirrorOrder], fulfillments, {
            value,
          })`
$DIR/test/basic.spec.ts:1596:41-1596:48: `.wait()`
$DIR/test/basic.spec.ts:1658:39-1659:26: `
          .connect(owner)`
$DIR/test/basic.spec.ts:1659:26-1662:13: `
          .matchOrders([order, mirrorOrder], fulfillments, {
            value,
          })`
$DIR/test/basic.spec.ts:1663:41-1663:48: `.wait()`
$DIR/test/basic.spec.ts:1723:39-1724:26: `
          .connect(owner)`
$DIR/test/basic.spec.ts:1724:26-1727:13: `
          .matchOrders([order, mirrorOrder], fulfillments, {
            value: value.add(101),
          })`
$DIR/test/basic.spec.ts:1726:25-1726:34: `.add(101)`
$DIR/test/basic.spec.ts:1728:41-1728:48: `.wait()`
$DIR/test/basic.spec.ts:1756:9-1760:11: `await mintAndApproveERC20(
          buyer,
          marketplaceContract.address,
          tokenAmount
        );`
$DIR/test/basic.spec.ts:1766:24-1766:33: `.sub(100)`
$DIR/test/basic.spec.ts:1767:24-1767:33: `.sub(100)`
$DIR/test/basic.spec.ts:1783:41-1784:28: `
            .connect(buyer)`
$DIR/test/basic.spec.ts:1784:28-1785:43: `
            .fulfillOrder(order, toKey(0))`
$DIR/test/basic.spec.ts:1786:43-1786:50: `.wait()`
$DIR/test/basic.spec.ts:1803:9-1807:11: `await mintAndApproveERC20(
          buyer,
          marketplaceContract.address,
          tokenAmount
        );`
$DIR/test/basic.spec.ts:1813:24-1813:33: `.sub(100)`
$DIR/test/basic.spec.ts:1814:24-1814:33: `.sub(100)`
$DIR/test/basic.spec.ts:1835:41-1836:28: `
            .connect(buyer)`
$DIR/test/basic.spec.ts:1836:28-1837:43: `
            .fulfillOrder(order, toKey(0))`
$DIR/test/basic.spec.ts:1838:43-1838:50: `.wait()`
$DIR/test/basic.spec.ts:1859:9-1863:11: `await mintAndApproveERC20(
          buyer,
          marketplaceContract.address,
          tokenAmount
        );`
$DIR/test/basic.spec.ts:1869:24-1869:33: `.sub(100)`
$DIR/test/basic.spec.ts:1870:24-1870:33: `.sub(100)`
$DIR/test/basic.spec.ts:1891:41-1892:28: `
            .connect(buyer)`
$DIR/test/basic.spec.ts:1892:28-1893:53: `
            .fulfillBasicOrder(basicOrderParameters)`
$DIR/test/basic.spec.ts:1894:43-1894:50: `.wait()`
$DIR/test/basic.spec.ts:1911:9-1915:11: `await mintAndApproveERC20(
          buyer,
          marketplaceContract.address,
          tokenAmount
        );`
$DIR/test/basic.spec.ts:1921:24-1921:33: `.sub(100)`
$DIR/test/basic.spec.ts:1922:24-1922:33: `.sub(100)`
$DIR/test/basic.spec.ts:1948:41-1949:28: `
            .connect(buyer)`
$DIR/test/basic.spec.ts:1949:28-1950:53: `
            .fulfillBasicOrder(basicOrderParameters)`
$DIR/test/basic.spec.ts:1951:43-1951:50: `.wait()`
$DIR/test/basic.spec.ts:1969:25-1970:29: `
            .connect(seller)`
$DIR/test/basic.spec.ts:1970:29-1971:73: `
            .approveNFT(testERC721.address, marketplaceContract.address)`
$DIR/test/basic.spec.ts:1978:9-1982:11: `await mintAndApproveERC20(
          buyer,
          marketplaceContract.address,
          tokenAmount
        );`
$DIR/test/basic.spec.ts:1988:24-1988:33: `.sub(100)`
$DIR/test/basic.spec.ts:1989:24-1989:33: `.sub(100)`
$DIR/test/basic.spec.ts:2013:41-2014:28: `
            .connect(buyer)`
$DIR/test/basic.spec.ts:2014:28-2015:53: `
            .fulfillBasicOrder(basicOrderParameters)`
$DIR/test/basic.spec.ts:2016:43-2016:50: `.wait()`
$DIR/test/basic.spec.ts:2040:25-2041:29: `
            .connect(seller)`
$DIR/test/basic.spec.ts:2041:29-2042:73: `
            .approveNFT(testERC721.address, marketplaceContract.address)`
$DIR/test/basic.spec.ts:2049:9-2053:11: `await mintAndApproveERC20(
          buyer,
          marketplaceContract.address,
          tokenAmount
        );`
$DIR/test/basic.spec.ts:2059:24-2059:33: `.sub(100)`
$DIR/test/basic.spec.ts:2060:24-2060:33: `.sub(100)`
$DIR/test/basic.spec.ts:2078:31-2078:48: `.padEnd(130, "f")`
$DIR/test/basic.spec.ts:2089:41-2090:28: `
            .connect(buyer)`
$DIR/test/basic.spec.ts:2090:28-2091:53: `
            .fulfillBasicOrder(basicOrderParameters)`
$DIR/test/basic.spec.ts:2092:43-2092:50: `.wait()`
$DIR/test/basic.spec.ts:2116:25-2117:29: `
            .connect(seller)`
$DIR/test/basic.spec.ts:2117:29-2118:73: `
            .approveNFT(testERC721.address, marketplaceContract.address)`
$DIR/test/basic.spec.ts:2125:9-2129:11: `await mintAndApproveERC20(
          buyer,
          marketplaceContract.address,
          tokenAmount
        );`
$DIR/test/basic.spec.ts:2135:24-2135:33: `.sub(100)`
$DIR/test/basic.spec.ts:2136:24-2136:33: `.sub(100)`
$DIR/test/basic.spec.ts:2155:62-2155:76: `.information()`
$DIR/test/basic.spec.ts:2157:35-2157:44: `.slice(2)`
$DIR/test/basic.spec.ts:2157:56-2157:65: `.slice(2)`
$DIR/test/basic.spec.ts:2160:9-2160:59: `await sellerContract.registerDigest(digest, true);`
$DIR/test/basic.spec.ts:2160:29-2160:58: `.registerDigest(digest, true)`
$DIR/test/basic.spec.ts:2162:31-2162:48: `.padEnd(132, "f")`
$DIR/test/basic.spec.ts:2173:41-2174:28: `
            .connect(buyer)`
$DIR/test/basic.spec.ts:2174:28-2175:53: `
            .fulfillBasicOrder(basicOrderParameters)`
$DIR/test/basic.spec.ts:2176:43-2176:50: `.wait()`
$DIR/test/basic.spec.ts:2188:9-2188:60: `await sellerContract.registerDigest(digest, false);`
$DIR/test/basic.spec.ts:2188:29-2188:59: `.registerDigest(digest, false)`
$DIR/test/basic.spec.ts:2196:25-2197:29: `
            .connect(seller)`
$DIR/test/basic.spec.ts:2197:29-2198:73: `
            .approveNFT(testERC721.address, marketplaceContract.address)`
$DIR/test/basic.spec.ts:2205:9-2209:11: `await mintAndApproveERC20(
          buyer,
          marketplaceContract.address,
          tokenAmount
        );`
$DIR/test/basic.spec.ts:2215:24-2215:33: `.sub(100)`
$DIR/test/basic.spec.ts:2216:24-2216:33: `.sub(100)`
$DIR/test/basic.spec.ts:2246:32-2247:30: `
              .connect(buyer)`
$DIR/test/basic.spec.ts:2247:30-2248:55: `
              .fulfillBasicOrder(basicOrderParameters)`
$DIR/test/basic.spec.ts:2255:32-2256:30: `
              .connect(buyer)`
$DIR/test/basic.spec.ts:2256:30-2257:55: `
              .fulfillBasicOrder(basicOrderParameters)`
$DIR/test/basic.spec.ts:2262:62-2262:76: `.information()`
$DIR/test/basic.spec.ts:2264:35-2264:44: `.slice(2)`
$DIR/test/basic.spec.ts:2264:56-2264:65: `.slice(2)`
$DIR/test/basic.spec.ts:2268:9-2268:75: `await sellerContract.connect(seller).registerDigest(digest, true);`
$DIR/test/basic.spec.ts:2268:29-2268:45: `.connect(seller)`
$DIR/test/basic.spec.ts:2268:45-2268:74: `.registerDigest(digest, true)`
$DIR/test/basic.spec.ts:2272:41-2273:28: `
            .connect(buyer)`
$DIR/test/basic.spec.ts:2273:28-2274:53: `
            .fulfillBasicOrder(basicOrderParameters)`
$DIR/test/basic.spec.ts:2275:43-2275:50: `.wait()`
$DIR/test/basic.spec.ts:2295:9-2299:11: `await mintAndApproveERC20(
          buyer,
          marketplaceContract.address,
          tokenAmount
        );`
$DIR/test/basic.spec.ts:2305:24-2305:33: `.sub(100)`
$DIR/test/basic.spec.ts:2306:24-2306:33: `.sub(100)`
$DIR/test/basic.spec.ts:2339:39-2340:26: `
          .connect(owner)`
$DIR/test/basic.spec.ts:2340:26-2341:59: `
          .matchOrders([order, mirrorOrder], fulfillments)`
$DIR/test/basic.spec.ts:2342:41-2342:48: `.wait()`
$DIR/test/basic.spec.ts:2367:9-2371:11: `await mintAndApproveERC20(
          buyer,
          marketplaceContract.address,
          tokenAmount
        );`
$DIR/test/basic.spec.ts:2377:24-2377:33: `.sub(100)`
$DIR/test/basic.spec.ts:2378:24-2378:33: `.sub(100)`
$DIR/test/basic.spec.ts:2416:39-2417:26: `
          .connect(owner)`
$DIR/test/basic.spec.ts:2417:26-2418:59: `
          .matchOrders([order, mirrorOrder], fulfillments)`
$DIR/test/basic.spec.ts:2419:41-2419:48: `.wait()`
$DIR/test/basic.spec.ts:2447:9-2447:78: `await set721ApprovalForAll(buyer, marketplaceContract.address, true);`
$DIR/test/basic.spec.ts:2451:9-2455:11: `await mintAndApproveERC20(
          seller,
          marketplaceContract.address,
          tokenAmount
        );`
$DIR/test/basic.spec.ts:2459:20-2460:28: `
            .connect(buyer)`
$DIR/test/basic.spec.ts:2460:28-2461:63: `
            .approve(marketplaceContract.address, tokenAmount)`
$DIR/test/basic.spec.ts:2467:36-2467:45: `.sub(100)`
$DIR/test/basic.spec.ts:2467:58-2467:67: `.sub(100)`
$DIR/test/basic.spec.ts:2485:41-2486:28: `
            .connect(buyer)`
$DIR/test/basic.spec.ts:2486:28-2487:43: `
            .fulfillOrder(order, toKey(0))`
$DIR/test/basic.spec.ts:2488:43-2488:50: `.wait()`
$DIR/test/basic.spec.ts:2506:9-2506:78: `await set721ApprovalForAll(buyer, marketplaceContract.address, true);`
$DIR/test/basic.spec.ts:2510:9-2514:11: `await mintAndApproveERC20(
          seller,
          marketplaceContract.address,
          tokenAmount
        );`
$DIR/test/basic.spec.ts:2518:20-2519:28: `
            .connect(buyer)`
$DIR/test/basic.spec.ts:2519:28-2520:63: `
            .approve(marketplaceContract.address, tokenAmount)`
$DIR/test/basic.spec.ts:2526:36-2526:45: `.sub(100)`
$DIR/test/basic.spec.ts:2526:58-2526:67: `.sub(100)`
$DIR/test/basic.spec.ts:2543:9-2543:36: `order.extraData = "0x1234";`
$DIR/test/basic.spec.ts:2546:41-2547:28: `
            .connect(buyer)`
$DIR/test/basic.spec.ts:2547:28-2553:14: `
            .fulfillAdvancedOrder(
              order,
              [],
              toKey(0),
              ethers.constants.AddressZero
            )`
$DIR/test/basic.spec.ts:2554:43-2554:50: `.wait()`
$DIR/test/basic.spec.ts:2572:9-2572:78: `await set721ApprovalForAll(buyer, marketplaceContract.address, true);`
$DIR/test/basic.spec.ts:2576:9-2576:76: `await mintAndApproveERC20(seller, conduitOne.address, tokenAmount);`
$DIR/test/basic.spec.ts:2580:20-2581:28: `
            .connect(buyer)`
$DIR/test/basic.spec.ts:2581:28-2582:63: `
            .approve(marketplaceContract.address, tokenAmount)`
$DIR/test/basic.spec.ts:2588:36-2588:45: `.sub(100)`
$DIR/test/basic.spec.ts:2588:58-2588:67: `.sub(100)`
$DIR/test/basic.spec.ts:2611:41-2612:28: `
            .connect(buyer)`
$DIR/test/basic.spec.ts:2612:28-2613:43: `
            .fulfillOrder(order, toKey(0))`
$DIR/test/basic.spec.ts:2614:43-2614:50: `.wait()`
$DIR/test/basic.spec.ts:2632:9-2632:69: `await set721ApprovalForAll(buyer, conduitOne.address, true);`
$DIR/test/basic.spec.ts:2636:9-2640:11: `await mintAndApproveERC20(
          seller,
          marketplaceContract.address,
          tokenAmount
        );`
$DIR/test/basic.spec.ts:2644:20-2644:35: `.connect(buyer)`
$DIR/test/basic.spec.ts:2644:35-2644:76: `.approve(conduitOne.address, tokenAmount)`
$DIR/test/basic.spec.ts:2650:36-2650:45: `.sub(100)`
$DIR/test/basic.spec.ts:2650:58-2650:67: `.sub(100)`
$DIR/test/basic.spec.ts:2668:41-2669:28: `
            .connect(buyer)`
$DIR/test/basic.spec.ts:2669:28-2670:48: `
            .fulfillOrder(order, conduitKeyOne)`
$DIR/test/basic.spec.ts:2671:43-2671:50: `.wait()`
$DIR/test/basic.spec.ts:2689:9-2689:78: `await set721ApprovalForAll(buyer, marketplaceContract.address, true);`
$DIR/test/basic.spec.ts:2693:9-2697:11: `await mintAndApproveERC20(
          seller,
          marketplaceContract.address,
          tokenAmount
        );`
$DIR/test/basic.spec.ts:2723:41-2724:28: `
            .connect(buyer)`
$DIR/test/basic.spec.ts:2724:28-2725:53: `
            .fulfillBasicOrder(basicOrderParameters)`
$DIR/test/basic.spec.ts:2726:43-2726:50: `.wait()`
$DIR/test/basic.spec.ts:2748:9-2748:78: `await set721ApprovalForAll(buyer, marketplaceContract.address, true);`
$DIR/test/basic.spec.ts:2752:9-2756:11: `await mintAndApproveERC20(
          seller,
          marketplaceContract.address,
          tokenAmount
        );`
$DIR/test/basic.spec.ts:2778:41-2779:28: `
            .connect(buyer)`
$DIR/test/basic.spec.ts:2779:28-2780:53: `
            .fulfillBasicOrder(basicOrderParameters)`
$DIR/test/basic.spec.ts:2781:43-2781:50: `.wait()`
$DIR/test/basic.spec.ts:2803:9-2803:78: `await set721ApprovalForAll(buyer, marketplaceContract.address, true);`
$DIR/test/basic.spec.ts:2807:9-2811:11: `await mintAndApproveERC20(
          seller,
          marketplaceContract.address,
          tokenAmount
        );`
$DIR/test/basic.spec.ts:2827:14-2829:10: `.parameters.consideration.push(
          getTestItem20(50, 50, zone.address)
        )`
$DIR/test/basic.spec.ts:2836:9-2836:74: `basicOrderParameters.totalOriginalAdditionalRecipients = toBN(0);`
$DIR/test/basic.spec.ts:2839:41-2840:28: `
            .connect(buyer)`
$DIR/test/basic.spec.ts:2840:28-2841:53: `
            .fulfillBasicOrder(basicOrderParameters)`
$DIR/test/basic.spec.ts:2842:43-2842:50: `.wait()`
$DIR/test/basic.spec.ts:2864:9-2864:78: `await set721ApprovalForAll(buyer, marketplaceContract.address, true);`
$DIR/test/basic.spec.ts:2868:9-2872:11: `await mintAndApproveERC20(
          seller,
          marketplaceContract.address,
          tokenAmount
        );`
$DIR/test/basic.spec.ts:2898:41-2899:28: `
            .connect(buyer)`
$DIR/test/basic.spec.ts:2899:28-2900:53: `
            .fulfillBasicOrder(basicOrderParameters)`
$DIR/test/basic.spec.ts:2901:43-2901:50: `.wait()`
$DIR/test/basic.spec.ts:2923:9-2923:78: `await set721ApprovalForAll(buyer, marketplaceContract.address, true);`
$DIR/test/basic.spec.ts:2927:9-2927:76: `await mintAndApproveERC20(seller, conduitOne.address, tokenAmount);`
$DIR/test/basic.spec.ts:2939:24-2939:72: `.push(getTestItem20(i, i, toAddress(i + 10000)))`
$DIR/test/basic.spec.ts:2961:41-2962:28: `
            .connect(buyer)`
$DIR/test/basic.spec.ts:2962:28-2963:53: `
            .fulfillBasicOrder(basicOrderParameters)`
$DIR/test/basic.spec.ts:2964:43-2964:50: `.wait()`
$DIR/test/basic.spec.ts:2986:9-2986:69: `await set721ApprovalForAll(buyer, conduitOne.address, true);`
$DIR/test/basic.spec.ts:2990:9-2994:11: `await mintAndApproveERC20(
          seller,
          marketplaceContract.address,
          tokenAmount
        );`
$DIR/test/basic.spec.ts:3021:41-3022:28: `
            .connect(buyer)`
$DIR/test/basic.spec.ts:3022:28-3023:53: `
            .fulfillBasicOrder(basicOrderParameters)`
$DIR/test/basic.spec.ts:3024:43-3024:50: `.wait()`
$DIR/test/basic.spec.ts:3047:9-3047:78: `await set721ApprovalForAll(buyer, marketplaceContract.address, true);`
$DIR/test/basic.spec.ts:3051:9-3055:11: `await mintAndApproveERC20(
          seller,
          marketplaceContract.address,
          tokenAmount
        );`
$DIR/test/basic.spec.ts:3060:36-3060:45: `.sub(100)`
$DIR/test/basic.spec.ts:3060:58-3060:67: `.sub(100)`
$DIR/test/basic.spec.ts:3092:39-3093:26: `
          .connect(owner)`
$DIR/test/basic.spec.ts:3093:26-3094:59: `
          .matchOrders([order, mirrorOrder], fulfillments)`
$DIR/test/basic.spec.ts:3095:41-3095:48: `.wait()`
$DIR/test/basic.spec.ts:3120:9-3120:78: `await set721ApprovalForAll(buyer, marketplaceContract.address, true);`
$DIR/test/basic.spec.ts:3124:9-3128:11: `await mintAndApproveERC20(
          seller,
          marketplaceContract.address,
          tokenAmount
        );`
$DIR/test/basic.spec.ts:3133:36-3133:45: `.sub(100)`
$DIR/test/basic.spec.ts:3133:58-3133:67: `.sub(100)`
$DIR/test/basic.spec.ts:3150:9-3150:36: `order.extraData = "0x1234";`
$DIR/test/basic.spec.ts:3168:39-3169:26: `
          .connect(owner)`
$DIR/test/basic.spec.ts:3169:26-3175:12: `
          .matchAdvancedOrders(
            [order, mirrorOrder],
            [],
            fulfillments,
            ethers.constants.AddressZero
          )`
$DIR/test/basic.spec.ts:3176:41-3176:48: `.wait()`
$DIR/test/basic.spec.ts:3201:9-3201:69: `await set721ApprovalForAll(buyer, conduitOne.address, true);`
$DIR/test/basic.spec.ts:3205:9-3209:11: `await mintAndApproveERC20(
          seller,
          marketplaceContract.address,
          tokenAmount
        );`
$DIR/test/basic.spec.ts:3214:36-3214:45: `.sub(100)`
$DIR/test/basic.spec.ts:3214:58-3214:67: `.sub(100)`
$DIR/test/basic.spec.ts:3252:39-3253:26: `
          .connect(owner)`
$DIR/test/basic.spec.ts:3253:26-3254:59: `
          .matchOrders([order, mirrorOrder], fulfillments)`
$DIR/test/basic.spec.ts:3255:41-3255:48: `.wait()`
$DIR/test/basic.spec.ts:3304:41-3305:28: `
            .connect(buyer)`
$DIR/test/basic.spec.ts:3305:28-3308:15: `
            .fulfillOrder(order, toKey(0), {
              value,
            })`
$DIR/test/basic.spec.ts:3309:43-3309:50: `.wait()`
$DIR/test/basic.spec.ts:3351:41-3352:28: `
            .connect(buyer)`
$DIR/test/basic.spec.ts:3352:28-3355:15: `
            .fulfillOrder(order, toKey(0), {
              value,
            })`
$DIR/test/basic.spec.ts:3356:43-3356:50: `.wait()`
$DIR/test/basic.spec.ts:3398:41-3399:28: `
            .connect(buyer)`
$DIR/test/basic.spec.ts:3399:28-3402:15: `
            .fulfillBasicOrder(basicOrderParameters, {
              value,
            })`
$DIR/test/basic.spec.ts:3403:43-3403:50: `.wait()`
$DIR/test/basic.spec.ts:3449:41-3450:28: `
            .connect(buyer)`
$DIR/test/basic.spec.ts:3450:28-3453:15: `
            .fulfillBasicOrder(basicOrderParameters, {
              value,
            })`
$DIR/test/basic.spec.ts:3454:43-3454:50: `.wait()`
$DIR/test/basic.spec.ts:3507:39-3508:26: `
          .connect(owner)`
$DIR/test/basic.spec.ts:3508:26-3511:13: `
          .matchOrders([order, mirrorOrder], fulfillments, {
            value,
          })`
$DIR/test/basic.spec.ts:3512:41-3512:48: `.wait()`
$DIR/test/basic.spec.ts:3578:39-3579:26: `
          .connect(owner)`
$DIR/test/basic.spec.ts:3579:26-3582:13: `
          .matchOrders([order, mirrorOrder], fulfillments, {
            value,
          })`
$DIR/test/basic.spec.ts:3583:41-3583:48: `.wait()`
$DIR/test/basic.spec.ts:3612:9-3616:11: `await mintAndApproveERC20(
          buyer,
          marketplaceContract.address,
          tokenAmount
        );`
$DIR/test/basic.spec.ts:3622:24-3622:33: `.sub(100)`
$DIR/test/basic.spec.ts:3623:24-3623:33: `.sub(100)`
$DIR/test/basic.spec.ts:3639:41-3640:28: `
            .connect(buyer)`
$DIR/test/basic.spec.ts:3640:28-3641:43: `
            .fulfillOrder(order, toKey(0))`
$DIR/test/basic.spec.ts:3642:43-3642:50: `.wait()`
$DIR/test/basic.spec.ts:3664:9-3668:11: `await mintAndApproveERC20(
          buyer,
          marketplaceContract.address,
          tokenAmount
        );`
$DIR/test/basic.spec.ts:3674:24-3674:33: `.sub(100)`
$DIR/test/basic.spec.ts:3675:24-3675:33: `.sub(100)`
$DIR/test/basic.spec.ts:3696:41-3697:28: `
            .connect(buyer)`
$DIR/test/basic.spec.ts:3697:28-3698:43: `
            .fulfillOrder(order, toKey(0))`
$DIR/test/basic.spec.ts:3699:43-3699:50: `.wait()`
$DIR/test/basic.spec.ts:3721:9-3725:11: `await mintAndApproveERC20(
          buyer,
          marketplaceContract.address,
          tokenAmount
        );`
$DIR/test/basic.spec.ts:3731:24-3731:33: `.sub(100)`
$DIR/test/basic.spec.ts:3732:24-3732:33: `.sub(100)`
$DIR/test/basic.spec.ts:3753:41-3754:28: `
            .connect(buyer)`
$DIR/test/basic.spec.ts:3754:28-3755:53: `
            .fulfillBasicOrder(basicOrderParameters)`
$DIR/test/basic.spec.ts:3756:43-3756:50: `.wait()`
$DIR/test/basic.spec.ts:3782:9-3786:11: `await mintAndApproveERC20(
          buyer,
          marketplaceContract.address,
          tokenAmount
        );`
$DIR/test/basic.spec.ts:3792:24-3792:33: `.sub(100)`
$DIR/test/basic.spec.ts:3793:24-3793:33: `.sub(100)`
$DIR/test/basic.spec.ts:3816:41-3817:28: `
            .connect(buyer)`
$DIR/test/basic.spec.ts:3817:28-3818:53: `
            .fulfillBasicOrder(basicOrderParameters)`
$DIR/test/basic.spec.ts:3819:43-3819:50: `.wait()`
$DIR/test/basic.spec.ts:3840:9-3844:11: `await mintAndApproveERC20(
          buyer,
          marketplaceContract.address,
          tokenAmount
        );`
$DIR/test/basic.spec.ts:3850:24-3850:33: `.sub(100)`
$DIR/test/basic.spec.ts:3851:24-3851:33: `.sub(100)`
$DIR/test/basic.spec.ts:3884:39-3885:26: `
          .connect(owner)`
$DIR/test/basic.spec.ts:3885:26-3886:59: `
          .matchOrders([order, mirrorOrder], fulfillments)`
$DIR/test/basic.spec.ts:3887:41-3887:48: `.wait()`
$DIR/test/basic.spec.ts:3916:9-3920:11: `await mintAndApproveERC20(
          buyer,
          marketplaceContract.address,
          tokenAmount
        );`
$DIR/test/basic.spec.ts:3926:24-3926:33: `.sub(100)`
$DIR/test/basic.spec.ts:3927:24-3927:33: `.sub(100)`
$DIR/test/basic.spec.ts:3965:39-3966:26: `
          .connect(owner)`
$DIR/test/basic.spec.ts:3966:26-3967:59: `
          .matchOrders([order, mirrorOrder], fulfillments)`
$DIR/test/basic.spec.ts:3968:41-3968:48: `.wait()`
$DIR/test/basic.spec.ts:4000:9-4004:11: `await mintAndApproveERC20(
          seller,
          marketplaceContract.address,
          tokenAmount
        );`
$DIR/test/basic.spec.ts:4008:20-4009:28: `
            .connect(buyer)`
$DIR/test/basic.spec.ts:4009:28-4010:63: `
            .approve(marketplaceContract.address, tokenAmount)`
$DIR/test/basic.spec.ts:4016:36-4016:45: `.sub(100)`
$DIR/test/basic.spec.ts:4016:58-4016:67: `.sub(100)`
$DIR/test/basic.spec.ts:4034:41-4035:28: `
            .connect(buyer)`
$DIR/test/basic.spec.ts:4035:28-4036:43: `
            .fulfillOrder(order, toKey(0))`
$DIR/test/basic.spec.ts:4037:43-4037:50: `.wait()`
$DIR/test/basic.spec.ts:4059:9-4063:11: `await mintAndApproveERC20(
          seller,
          marketplaceContract.address,
          tokenAmount
        );`
$DIR/test/basic.spec.ts:4067:20-4067:35: `.connect(buyer)`
$DIR/test/basic.spec.ts:4067:35-4067:76: `.approve(conduitOne.address, tokenAmount)`
$DIR/test/basic.spec.ts:4073:36-4073:45: `.sub(100)`
$DIR/test/basic.spec.ts:4073:58-4073:67: `.sub(100)`
$DIR/test/basic.spec.ts:4091:41-4092:28: `
            .connect(buyer)`
$DIR/test/basic.spec.ts:4092:28-4093:48: `
            .fulfillOrder(order, conduitKeyOne)`
$DIR/test/basic.spec.ts:4094:43-4094:50: `.wait()`
$DIR/test/basic.spec.ts:4116:9-4120:11: `await mintAndApproveERC20(
          seller,
          marketplaceContract.address,
          tokenAmount
        );`
$DIR/test/basic.spec.ts:4146:41-4147:28: `
            .connect(buyer)`
$DIR/test/basic.spec.ts:4147:28-4148:53: `
            .fulfillBasicOrder(basicOrderParameters)`
$DIR/test/basic.spec.ts:4149:43-4149:50: `.wait()`
$DIR/test/basic.spec.ts:4175:9-4179:11: `await mintAndApproveERC20(
          seller,
          marketplaceContract.address,
          tokenAmount
        );`
$DIR/test/basic.spec.ts:4206:41-4207:28: `
            .connect(buyer)`
$DIR/test/basic.spec.ts:4207:28-4208:53: `
            .fulfillBasicOrder(basicOrderParameters)`
$DIR/test/basic.spec.ts:4215:43-4215:50: `.wait()`
$DIR/test/basic.spec.ts:4242:9-4246:11: `await mintAndApproveERC20(
          seller,
          marketplaceContract.address,
          tokenAmount
        );`
$DIR/test/basic.spec.ts:4251:36-4251:45: `.sub(100)`
$DIR/test/basic.spec.ts:4251:58-4251:67: `.sub(100)`
$DIR/test/basic.spec.ts:4283:39-4284:26: `
          .connect(owner)`
$DIR/test/basic.spec.ts:4284:26-4285:59: `
          .matchOrders([order, mirrorOrder], fulfillments)`
$DIR/test/basic.spec.ts:4286:41-4286:48: `.wait()`
$DIR/test/basic.spec.ts:4315:9-4319:11: `await mintAndApproveERC20(
          seller,
          marketplaceContract.address,
          tokenAmount
        );`
$DIR/test/basic.spec.ts:4324:36-4324:45: `.sub(100)`
$DIR/test/basic.spec.ts:4324:58-4324:67: `.sub(100)`
$DIR/test/basic.spec.ts:4362:39-4363:26: `
          .connect(owner)`
$DIR/test/basic.spec.ts:4363:26-4364:59: `
          .matchOrders([order, mirrorOrder], fulfillments)`
$DIR/test/basic.spec.ts:4365:41-4365:48: `.wait()`
$DIR/test/conduit.spec.ts:129:5-131:65: `await conduitController
      .connect(owner)
      .updateChannel(tempConduit.address, seller.address, true);`
$DIR/test/conduit.spec.ts:129:28-130:22: `
      .connect(owner)`
$DIR/test/conduit.spec.ts:130:22-131:64: `
      .updateChannel(tempConduit.address, seller.address, true)`
$DIR/test/conduit.spec.ts:140:5-140:66: `await testERC1155.mint(seller.address, nftId, amount.mul(2));`
$DIR/test/conduit.spec.ts:140:22-140:65: `.mint(seller.address, nftId, amount.mul(2))`
$DIR/test/conduit.spec.ts:140:57-140:64: `.mul(2)`
$DIR/test/conduit.spec.ts:141:5-141:78: `await testERC1155.mint(seller.address, secondNftId, secondAmount.mul(2));`
$DIR/test/conduit.spec.ts:141:22-141:77: `.mint(seller.address, secondNftId, secondAmount.mul(2))`
$DIR/test/conduit.spec.ts:141:69-141:76: `.mul(2)`
$DIR/test/conduit.spec.ts:142:5-142:68: `await set1155ApprovalForAll(seller, tempConduit.address, true);`
$DIR/test/conduit.spec.ts:144:5-162:7: `await tempConduit.connect(seller).executeWithBatch1155(
      [],
      [
        {
          token: testERC1155.address,
          from: seller.address,
          to: buyer.address,
          ids: [nftId, secondNftId],
          amounts: [amount, secondAmount],
        },
        {
          token: testERC1155.address,
          from: seller.address,
          to: buyer.address,
          ids: [secondNftId, nftId],
          amounts: [secondAmount, amount],
        },
      ]
    );`
$DIR/test/conduit.spec.ts:144:22-144:38: `.connect(seller)`
$DIR/test/conduit.spec.ts:144:38-162:6: `.executeWithBatch1155(
      [],
      [
        {
          token: testERC1155.address,
          from: seller.address,
          to: buyer.address,
          ids: [nftId, secondNftId],
          amounts: [amount, secondAmount],
        },
        {
          token: testERC1155.address,
          from: seller.address,
          to: buyer.address,
          ids: [secondNftId, nftId],
          amounts: [secondAmount, amount],
        },
      ]
    )`
$DIR/test/conduit.spec.ts:166:5-168:65: `await conduitController
      .connect(owner)
      .updateChannel(tempConduit.address, seller.address, true);`
$DIR/test/conduit.spec.ts:166:28-167:22: `
      .connect(owner)`
$DIR/test/conduit.spec.ts:167:22-168:64: `
      .updateChannel(tempConduit.address, seller.address, true)`
$DIR/test/conduit.spec.ts:177:5-177:66: `await testERC1155.mint(seller.address, nftId, amount.mul(2));`
$DIR/test/conduit.spec.ts:177:22-177:65: `.mint(seller.address, nftId, amount.mul(2))`
$DIR/test/conduit.spec.ts:177:57-177:64: `.mul(2)`
$DIR/test/conduit.spec.ts:178:5-178:78: `await testERC1155.mint(seller.address, secondNftId, secondAmount.mul(2));`
$DIR/test/conduit.spec.ts:178:22-178:77: `.mint(seller.address, secondNftId, secondAmount.mul(2))`
$DIR/test/conduit.spec.ts:178:69-178:76: `.mul(2)`
$DIR/test/conduit.spec.ts:179:5-179:68: `await set1155ApprovalForAll(seller, tempConduit.address, true);`
$DIR/test/conduit.spec.ts:181:5-196:8: `await tempConduit.connect(seller).executeBatch1155([
      {
        token: testERC1155.address,
        from: seller.address,
        to: buyer.address,
        ids: [nftId, secondNftId],
        amounts: [amount, secondAmount],
      },
      {
        token: testERC1155.address,
        from: seller.address,
        to: buyer.address,
        ids: [secondNftId, nftId],
        amounts: [secondAmount, amount],
      },
    ]);`
$DIR/test/conduit.spec.ts:181:22-181:38: `.connect(seller)`
$DIR/test/conduit.spec.ts:181:38-196:7: `.executeBatch1155([
      {
        token: testERC1155.address,
        from: seller.address,
        to: buyer.address,
        ids: [nftId, secondNftId],
        amounts: [amount, secondAmount],
      },
      {
        token: testERC1155.address,
        from: seller.address,
        to: buyer.address,
        ids: [secondNftId, nftId],
        amounts: [secondAmount, amount],
      },
    ])`
$DIR/test/conduit.spec.ts:201:5-203:65: `await conduitController
      .connect(owner)
      .updateChannel(tempConduit.address, seller.address, true);`
$DIR/test/conduit.spec.ts:201:28-202:22: `
      .connect(owner)`
$DIR/test/conduit.spec.ts:202:22-203:64: `
      .updateChannel(tempConduit.address, seller.address, true)`
$DIR/test/conduit.spec.ts:207:5-207:50: `await testERC721.mint(seller.address, nftId);`
$DIR/test/conduit.spec.ts:207:21-207:49: `.mint(seller.address, nftId)`
$DIR/test/conduit.spec.ts:210:5-210:56: `await testERC721.mint(seller.address, secondNftId);`
$DIR/test/conduit.spec.ts:210:21-210:55: `.mint(seller.address, secondNftId)`
$DIR/test/conduit.spec.ts:213:28-213:43: `.ownerOf(nftId)`
$DIR/test/conduit.spec.ts:214:28-214:49: `.ownerOf(secondNftId)`
$DIR/test/conduit.spec.ts:217:17-217:33: `.connect(seller)`
$DIR/test/conduit.spec.ts:217:33-217:78: `.setApprovalForAll(tempConduit.address, true)`
$DIR/test/conduit.spec.ts:222:5-239:8: `await tempConduit.connect(seller).execute([
      {
        itemType: 2, // ERC721
        token: testERC721.address,
        from: seller.address,
        to: buyer.address,
        identifier: nftId,
        amount: ethers.BigNumber.from(1),
      },
      {
        itemType: 2, // ERC721
        token: testERC721.address,
        from: seller.address,
        to: buyer.address,
        identifier: secondNftId,
        amount: ethers.BigNumber.from(1),
      },
    ]);`
$DIR/test/conduit.spec.ts:222:22-222:38: `.connect(seller)`
$DIR/test/conduit.spec.ts:222:38-239:7: `.execute([
      {
        itemType: 2, // ERC721
        token: testERC721.address,
        from: seller.address,
        to: buyer.address,
        identifier: nftId,
        amount: ethers.BigNumber.from(1),
      },
      {
        itemType: 2, // ERC721
        token: testERC721.address,
        from: seller.address,
        to: buyer.address,
        identifier: secondNftId,
        amount: ethers.BigNumber.from(1),
      },
    ])`
$DIR/test/conduit.spec.ts:229:23-229:41: `.BigNumber.from(1)`
$DIR/test/conduit.spec.ts:237:23-237:41: `.BigNumber.from(1)`
$DIR/test/conduit.spec.ts:242:28-242:43: `.ownerOf(nftId)`
$DIR/test/conduit.spec.ts:243:28-243:49: `.ownerOf(secondNftId)`
$DIR/test/conduit.spec.ts:248:5-250:65: `await conduitController
      .connect(owner)
      .updateChannel(tempConduit.address, seller.address, true);`
$DIR/test/conduit.spec.ts:248:28-249:22: `
      .connect(owner)`
$DIR/test/conduit.spec.ts:249:22-250:64: `
      .updateChannel(tempConduit.address, seller.address, true)`
$DIR/test/conduit.spec.ts:254:5-254:50: `await testERC721.mint(seller.address, nftId);`
$DIR/test/conduit.spec.ts:254:21-254:49: `.mint(seller.address, nftId)`
$DIR/test/conduit.spec.ts:257:28-257:43: `.ownerOf(nftId)`
$DIR/test/conduit.spec.ts:261:17-261:33: `.connect(seller)`
$DIR/test/conduit.spec.ts:261:33-261:78: `.setApprovalForAll(tempConduit.address, true)`
$DIR/test/conduit.spec.ts:267:5-267:55: `await testERC20.mint(seller.address, tokenAmount);`
$DIR/test/conduit.spec.ts:267:20-267:54: `.mint(seller.address, tokenAmount)`
$DIR/test/conduit.spec.ts:270:27-270:53: `.balanceOf(seller.address)`
$DIR/test/conduit.spec.ts:274:16-274:32: `.connect(seller)`
$DIR/test/conduit.spec.ts:274:32-274:74: `.approve(tempConduit.address, tokenAmount)`
$DIR/test/conduit.spec.ts:280:5-297:8: `await tempConduit.connect(seller).execute([
      {
        itemType: 2, // ERC721
        token: testERC721.address,
        from: seller.address,
        to: buyer.address,
        identifier: nftId,
        amount: ethers.BigNumber.from(1),
      },
      {
        itemType: 1, // ERC20
        token: testERC20.address,
        from: seller.address,
        to: buyer.address,
        identifier: 0,
        amount: tokenAmount.sub(100),
      },
    ]);`
$DIR/test/conduit.spec.ts:280:22-280:38: `.connect(seller)`
$DIR/test/conduit.spec.ts:280:38-297:7: `.execute([
      {
        itemType: 2, // ERC721
        token: testERC721.address,
        from: seller.address,
        to: buyer.address,
        identifier: nftId,
        amount: ethers.BigNumber.from(1),
      },
      {
        itemType: 1, // ERC20
        token: testERC20.address,
        from: seller.address,
        to: buyer.address,
        identifier: 0,
        amount: tokenAmount.sub(100),
      },
    ])`
$DIR/test/conduit.spec.ts:287:23-287:41: `.BigNumber.from(1)`
$DIR/test/conduit.spec.ts:295:28-295:37: `.sub(100)`
$DIR/test/conduit.spec.ts:300:28-300:43: `.ownerOf(nftId)`
$DIR/test/conduit.spec.ts:302:27-302:53: `.balanceOf(seller.address)`
$DIR/test/conduit.spec.ts:303:27-303:52: `.balanceOf(buyer.address)`
$DIR/test/conduit.spec.ts:310:5-312:65: `await conduitController
      .connect(owner)
      .updateChannel(tempConduit.address, seller.address, true);`
$DIR/test/conduit.spec.ts:310:28-311:22: `
      .connect(owner)`
$DIR/test/conduit.spec.ts:311:22-312:64: `
      .updateChannel(tempConduit.address, seller.address, true)`
$DIR/test/conduit.spec.ts:316:5-316:50: `await testERC721.mint(seller.address, nftId);`
$DIR/test/conduit.spec.ts:316:21-316:49: `.mint(seller.address, nftId)`
$DIR/test/conduit.spec.ts:319:28-319:43: `.ownerOf(nftId)`
$DIR/test/conduit.spec.ts:323:17-323:33: `.connect(seller)`
$DIR/test/conduit.spec.ts:323:33-323:78: `.setApprovalForAll(tempConduit.address, true)`
$DIR/test/conduit.spec.ts:329:31-329:38: `.add(1)`
$DIR/test/conduit.spec.ts:330:5-330:65: `await testERC1155.mint(seller.address, secondNftId, amount);`
$DIR/test/conduit.spec.ts:330:22-330:64: `.mint(seller.address, secondNftId, amount)`
$DIR/test/conduit.spec.ts:333:18-333:34: `.connect(seller)`
$DIR/test/conduit.spec.ts:333:34-333:79: `.setApprovalForAll(tempConduit.address, true)`
$DIR/test/conduit.spec.ts:339:29-339:68: `.balanceOf(seller.address, secondNftId)`
$DIR/test/conduit.spec.ts:344:5-361:8: `await tempConduit.connect(seller).execute([
      {
        itemType: 2, // ERC721
        token: testERC721.address,
        from: seller.address,
        to: buyer.address,
        identifier: nftId,
        amount: ethers.BigNumber.from(1),
      },
      {
        itemType: 3, // ERC1155
        token: testERC1155.address,
        from: seller.address,
        to: buyer.address,
        identifier: secondNftId,
        amount: amount.sub(10),
      },
    ]);`
$DIR/test/conduit.spec.ts:344:22-344:38: `.connect(seller)`
$DIR/test/conduit.spec.ts:344:38-361:7: `.execute([
      {
        itemType: 2, // ERC721
        token: testERC721.address,
        from: seller.address,
        to: buyer.address,
        identifier: nftId,
        amount: ethers.BigNumber.from(1),
      },
      {
        itemType: 3, // ERC1155
        token: testERC1155.address,
        from: seller.address,
        to: buyer.address,
        identifier: secondNftId,
        amount: amount.sub(10),
      },
    ])`
$DIR/test/conduit.spec.ts:351:23-351:41: `.BigNumber.from(1)`
$DIR/test/conduit.spec.ts:359:23-359:31: `.sub(10)`
$DIR/test/conduit.spec.ts:364:28-364:43: `.ownerOf(nftId)`
$DIR/test/conduit.spec.ts:366:29-366:68: `.balanceOf(seller.address, secondNftId)`
$DIR/test/conduit.spec.ts:369:29-369:67: `.balanceOf(buyer.address, secondNftId)`
$DIR/test/conduit.spec.ts:376:5-378:65: `await conduitController
      .connect(owner)
      .updateChannel(tempConduit.address, seller.address, true);`
$DIR/test/conduit.spec.ts:376:28-377:22: `
      .connect(owner)`
$DIR/test/conduit.spec.ts:377:22-378:64: `
      .updateChannel(tempConduit.address, seller.address, true)`
$DIR/test/conduit.spec.ts:381:39-381:48: `.div(100)`
$DIR/test/conduit.spec.ts:382:5-382:55: `await testERC20.mint(seller.address, tokenAmount);`
$DIR/test/conduit.spec.ts:382:20-382:54: `.mint(seller.address, tokenAmount)`
$DIR/test/conduit.spec.ts:385:27-385:53: `.balanceOf(seller.address)`
$DIR/test/conduit.spec.ts:389:16-389:32: `.connect(seller)`
$DIR/test/conduit.spec.ts:389:32-389:74: `.approve(tempConduit.address, tokenAmount)`
$DIR/test/conduit.spec.ts:395:38-395:45: `.add(1)`
$DIR/test/conduit.spec.ts:396:5-396:66: `await testERC1155.mint(seller.address, nftId, erc1155amount);`
$DIR/test/conduit.spec.ts:396:22-396:65: `.mint(seller.address, nftId, erc1155amount)`
$DIR/test/conduit.spec.ts:399:18-399:34: `.connect(seller)`
$DIR/test/conduit.spec.ts:399:34-399:79: `.setApprovalForAll(tempConduit.address, true)`
$DIR/test/conduit.spec.ts:405:29-405:62: `.balanceOf(seller.address, nftId)`
$DIR/test/conduit.spec.ts:410:5-427:8: `await tempConduit.connect(seller).execute([
      {
        itemType: 1, // ERC20
        token: testERC20.address,
        from: seller.address,
        to: buyer.address,
        identifier: 0,
        amount: tokenAmount.sub(100),
      },
      {
        itemType: 3, // ERC1155
        token: testERC1155.address,
        from: seller.address,
        to: buyer.address,
        identifier: nftId,
        amount: erc1155amount.sub(10),
      },
    ]);`
$DIR/test/conduit.spec.ts:410:22-410:38: `.connect(seller)`
$DIR/test/conduit.spec.ts:410:38-427:7: `.execute([
      {
        itemType: 1, // ERC20
        token: testERC20.address,
        from: seller.address,
        to: buyer.address,
        identifier: 0,
        amount: tokenAmount.sub(100),
      },
      {
        itemType: 3, // ERC1155
        token: testERC1155.address,
        from: seller.address,
        to: buyer.address,
        identifier: nftId,
        amount: erc1155amount.sub(10),
      },
    ])`
$DIR/test/conduit.spec.ts:417:28-417:37: `.sub(100)`
$DIR/test/conduit.spec.ts:425:30-425:38: `.sub(10)`
$DIR/test/conduit.spec.ts:430:27-430:53: `.balanceOf(seller.address)`
$DIR/test/conduit.spec.ts:431:27-431:52: `.balanceOf(buyer.address)`
$DIR/test/conduit.spec.ts:434:29-434:62: `.balanceOf(seller.address, nftId)`
$DIR/test/conduit.spec.ts:435:29-435:61: `.balanceOf(buyer.address, nftId)`
$DIR/test/conduit.spec.ts:442:5-444:65: `await conduitController
      .connect(owner)
      .updateChannel(tempConduit.address, seller.address, true);`
$DIR/test/conduit.spec.ts:442:28-443:22: `
      .connect(owner)`
$DIR/test/conduit.spec.ts:443:22-444:64: `
      .updateChannel(tempConduit.address, seller.address, true)`
$DIR/test/conduit.spec.ts:477:5-479:66: `await tempConduit
      .connect(seller)
      .execute([erc20Transfer, erc721Transfer, erc1155Transfer]);`
$DIR/test/conduit.spec.ts:477:22-478:23: `
      .connect(seller)`
$DIR/test/conduit.spec.ts:478:23-479:65: `
      .execute([erc20Transfer, erc721Transfer, erc1155Transfer])`
$DIR/test/conduit.spec.ts:482:28-482:63: `.ownerOf(erc721Transfer.identifier)`
$DIR/test/conduit.spec.ts:486:27-486:53: `.balanceOf(seller.address)`
$DIR/test/conduit.spec.ts:487:27-487:52: `.balanceOf(buyer.address)`
$DIR/test/conduit.spec.ts:491:24-491:78: `.balanceOf(seller.address, erc1155Transfer.identifier)`
$DIR/test/conduit.spec.ts:494:24-494:77: `.balanceOf(buyer.address, erc1155Transfer.identifier)`
$DIR/test/conduit.spec.ts:500:5-502:65: `await conduitController
      .connect(owner)
      .updateChannel(tempConduit.address, seller.address, true);`
$DIR/test/conduit.spec.ts:500:28-501:22: `
      .connect(owner)`
$DIR/test/conduit.spec.ts:501:22-502:64: `
      .updateChannel(tempConduit.address, seller.address, true)`
$DIR/test/conduit.spec.ts:506:27-506:64: `.max(1, randomInt(itemsToCreate - 2))`
$DIR/test/conduit.spec.ts:507:28-507:77: `.max(1, randomInt(itemsToCreate - numERC20s - 1))`
$DIR/test/conduit.spec.ts:508:29-508:76: `.max(1, itemsToCreate - numERC20s - numERC721s)`
$DIR/test/conduit.spec.ts:532:7-532:45: `erc20Contracts[i] = tempERC20Contract;`
$DIR/test/conduit.spec.ts:533:7-533:41: `erc20Transfers[i] = erc20Transfer;`
$DIR/test/conduit.spec.ts:549:7-549:47: `erc721Contracts[i] = tempERC721Contract;`
$DIR/test/conduit.spec.ts:550:7-550:43: `erc721Transfers[i] = erc721Transfer;`
$DIR/test/conduit.spec.ts:566:7-566:49: `erc1155Contracts[i] = tempERC1155Contract;`
$DIR/test/conduit.spec.ts:567:7-567:45: `erc1155Transfers[i] = erc1155Transfer;`
$DIR/test/conduit.spec.ts:581:5-581:58: `await tempConduit.connect(seller).execute(transfers);`
$DIR/test/conduit.spec.ts:581:22-581:38: `.connect(seller)`
$DIR/test/conduit.spec.ts:581:38-581:57: `.execute(transfers)`
$DIR/test/conduit.spec.ts:597:54-597:70: `.balanceOf(from)`
$DIR/test/conduit.spec.ts:600:54-600:68: `.balanceOf(to)`
$DIR/test/conduit.spec.ts:606:55-606:75: `.ownerOf(identifier)`
$DIR/test/conduit.spec.ts:612:29-612:57: `.balanceOf(from, identifier)`
$DIR/test/conduit.spec.ts:613:29-613:55: `.balanceOf(to, identifier)`
$DIR/test/conduit.spec.ts:620:5-622:64: `await conduitController
      .connect(owner)
      .updateChannel(tempConduit.address, owner.address, true);`
$DIR/test/conduit.spec.ts:620:28-621:22: `
      .connect(owner)`
$DIR/test/conduit.spec.ts:621:22-622:63: `
      .updateChannel(tempConduit.address, owner.address, true)`
$DIR/test/conduit.spec.ts:631:5-631:67: `await set1155ApprovalForAll(owner, tempConduit.address, true);`
$DIR/test/conduit.spec.ts:634:18-634:33: `.connect(owner)`
$DIR/test/conduit.spec.ts:634:33-645:8: `.executeWithBatch1155(
        [],
        [
          {
            token: ethers.constants.AddressZero,
            from: owner.address,
            to: buyer.address,
            ids: [nftId, secondNftId],
            amounts: [amount, secondAmount],
          },
        ]
      )`
$DIR/test/conduit.spec.ts:650:5-652:64: `await conduitController
      .connect(owner)
      .updateChannel(tempConduit.address, owner.address, true);`
$DIR/test/conduit.spec.ts:650:28-651:22: `
      .connect(owner)`
$DIR/test/conduit.spec.ts:651:22-652:63: `
      .updateChannel(tempConduit.address, owner.address, true)`
$DIR/test/conduit.spec.ts:661:5-661:67: `await set1155ApprovalForAll(owner, tempConduit.address, true);`
$DIR/test/conduit.spec.ts:664:18-664:33: `.connect(owner)`
$DIR/test/conduit.spec.ts:664:33-672:9: `.executeBatch1155([
        {
          token: ethers.constants.AddressZero,
          from: owner.address,
          to: buyer.address,
          ids: [nftId, secondNftId],
          amounts: [amount, secondAmount],
        },
      ])`
$DIR/test/conduit.spec.ts:678:5-680:65: `await conduitController
      .connect(owner)
      .updateChannel(tempConduit.address, seller.address, true);`
$DIR/test/conduit.spec.ts:678:28-679:22: `
      .connect(owner)`
$DIR/test/conduit.spec.ts:679:22-680:64: `
      .updateChannel(tempConduit.address, seller.address, true)`
$DIR/test/conduit.spec.ts:683:18-683:34: `.connect(seller)`
$DIR/test/conduit.spec.ts:683:34-694:8: `.executeWithBatch1155(
        [],
        [
          {
            token: testERC1155.address,
            from: seller.address,
            to: buyer.address,
            ids: [1],
            amounts: [1],
          },
        ]
      )`
$DIR/test/conduit.spec.ts:701:7-703:67: `await conduitController
        .connect(owner)
        .updateChannel(tempConduit.address, seller.address, true);`
$DIR/test/conduit.spec.ts:701:30-702:24: `
        .connect(owner)`
$DIR/test/conduit.spec.ts:702:24-703:66: `
        .updateChannel(tempConduit.address, seller.address, true)`
$DIR/test/conduit.spec.ts:716:7-716:68: `await testERC1155.mint(seller.address, nftId, amount.mul(2));`
$DIR/test/conduit.spec.ts:716:24-716:67: `.mint(seller.address, nftId, amount.mul(2))`
$DIR/test/conduit.spec.ts:716:59-716:66: `.mul(2)`
$DIR/test/conduit.spec.ts:717:7-717:80: `await testERC1155.mint(seller.address, secondNftId, secondAmount.mul(2));`
$DIR/test/conduit.spec.ts:717:24-717:79: `.mint(seller.address, secondNftId, secondAmount.mul(2))`
$DIR/test/conduit.spec.ts:717:71-717:78: `.mul(2)`
$DIR/test/conduit.spec.ts:718:7-718:78: `await testERC1155.mint(seller.address, thirdNftId, thirdAmount.mul(2));`
$DIR/test/conduit.spec.ts:718:24-718:77: `.mint(seller.address, thirdNftId, thirdAmount.mul(2))`
$DIR/test/conduit.spec.ts:718:69-718:76: `.mul(2)`
$DIR/test/conduit.spec.ts:719:7-719:70: `await set1155ApprovalForAll(seller, tempConduit.address, true);`
$DIR/test/conduit.spec.ts:721:7-739:9: `await tempConduit.connect(seller).executeWithBatch1155(
        [],
        [
          {
            token: testERC1155.address,
            from: seller.address,
            to: receiver.address,
            ids: [nftId, secondNftId, thirdNftId],
            amounts: [amount, secondAmount, thirdAmount],
          },
          {
            token: testERC1155.address,
            from: seller.address,
            to: receiver.address,
            ids: [secondNftId, nftId],
            amounts: [secondAmount, amount],
          },
        ]
      );`
$DIR/test/conduit.spec.ts:721:24-721:40: `.connect(seller)`
$DIR/test/conduit.spec.ts:721:40-739:8: `.executeWithBatch1155(
        [],
        [
          {
            token: testERC1155.address,
            from: seller.address,
            to: receiver.address,
            ids: [nftId, secondNftId, thirdNftId],
            amounts: [amount, secondAmount, thirdAmount],
          },
          {
            token: testERC1155.address,
            from: seller.address,
            to: receiver.address,
            ids: [secondNftId, nftId],
            amounts: [secondAmount, amount],
          },
        ]
      )`
$DIR/test/conduit.spec.ts:745:7-747:67: `await conduitController
        .connect(owner)
        .updateChannel(tempConduit.address, seller.address, true);`
$DIR/test/conduit.spec.ts:745:30-746:24: `
        .connect(owner)`
$DIR/test/conduit.spec.ts:746:24-747:66: `
        .updateChannel(tempConduit.address, seller.address, true)`
$DIR/test/conduit.spec.ts:750:20-750:36: `.connect(seller)`
$DIR/test/conduit.spec.ts:750:36-761:10: `.executeWithBatch1155(
          [],
          [
            {
              token: receiver.address,
              from: seller.address,
              to: receiver.address,
              ids: [1],
              amounts: [1],
            },
          ]
        )`
$DIR/test/conduit.spec.ts:774:68-776:6: `.getConduit(
      tempConduitKey
    )`
$DIR/test/conduit.spec.ts:778:5-780:53: `await conduitController
      .connect(owner)
      .createConduit(tempConduitKey, owner.address);`
$DIR/test/conduit.spec.ts:778:28-779:22: `
      .connect(owner)`
$DIR/test/conduit.spec.ts:779:22-780:52: `
      .createConduit(tempConduitKey, owner.address)`
$DIR/test/conduit.spec.ts:782:46-782:73: `.attach(tempConduitAddress)`
$DIR/test/conduit.spec.ts:784:5-786:64: `await conduitController
      .connect(owner)
      .updateChannel(tempConduit.address, owner.address, true);`
$DIR/test/conduit.spec.ts:784:28-785:22: `
      .connect(owner)`
$DIR/test/conduit.spec.ts:785:22-786:63: `
      .updateChannel(tempConduit.address, owner.address, true)`
$DIR/test/conduit.spec.ts:811:5-811:67: `await set1155ApprovalForAll(owner, tempConduit.address, true);`
$DIR/test/conduit.spec.ts:813:5-846:7: `await tempConduit.connect(owner).executeWithBatch1155(
      [],
      [
        {
          token: testERC1155.address,
          from: owner.address,
          to: buyer.address,
          ids: [
            nftId,
            secondNftId,
            thirdNftId,
            nftId4,
            nftId5,
            nftId6,
            nftId7,
            nftId8,
            nftId9,
            nftId10,
          ],
          amounts: [
            amount,
            secondAmount,
            thirdAmount,
            amount4,
            amount5,
            amount6,
            amount7,
            amount8,
            amount9,
            amount10,
          ],
        },
      ]
    );`
$DIR/test/conduit.spec.ts:813:22-813:37: `.connect(owner)`
$DIR/test/conduit.spec.ts:813:37-846:6: `.executeWithBatch1155(
      [],
      [
        {
          token: testERC1155.address,
          from: owner.address,
          to: buyer.address,
          ids: [
            nftId,
            secondNftId,
            thirdNftId,
            nftId4,
            nftId5,
            nftId6,
            nftId7,
            nftId8,
            nftId9,
            nftId10,
          ],
          amounts: [
            amount,
            secondAmount,
            thirdAmount,
            amount4,
            amount5,
            amount6,
            amount7,
            amount8,
            amount9,
            amount10,
          ],
        },
      ]
    )`
$DIR/test/conduit.spec.ts:852:68-854:6: `.getConduit(
      tempConduitKey
    )`
$DIR/test/conduit.spec.ts:856:5-858:53: `await conduitController
      .connect(owner)
      .createConduit(tempConduitKey, owner.address);`
$DIR/test/conduit.spec.ts:856:28-857:22: `
      .connect(owner)`
$DIR/test/conduit.spec.ts:857:22-858:52: `
      .createConduit(tempConduitKey, owner.address)`
$DIR/test/conduit.spec.ts:860:46-860:73: `.attach(tempConduitAddress)`
$DIR/test/conduit.spec.ts:862:5-864:64: `await conduitController
      .connect(owner)
      .updateChannel(tempConduit.address, owner.address, true);`
$DIR/test/conduit.spec.ts:862:28-863:22: `
      .connect(owner)`
$DIR/test/conduit.spec.ts:863:22-864:63: `
      .updateChannel(tempConduit.address, owner.address, true)`
$DIR/test/conduit.spec.ts:901:38-901:45: `.add(1)`
$DIR/test/conduit.spec.ts:902:5-902:75: `await mintAndApproveERC20(owner, tempConduit.address, amount9.mul(2));`
$DIR/test/conduit.spec.ts:902:66-902:73: `.mul(2)`
$DIR/test/conduit.spec.ts:906:5-906:67: `await set1155ApprovalForAll(owner, tempConduit.address, true);`
$DIR/test/conduit.spec.ts:909:21-909:36: `.connect(owner)`
$DIR/test/conduit.spec.ts:909:36-909:81: `.setApprovalForAll(tempConduit.address, true)`
$DIR/test/conduit.spec.ts:914:5-914:66: `await set721ApprovalForAll(owner, tempConduit.address, true);`
$DIR/test/conduit.spec.ts:918:5-953:7: `await tempConduit.connect(owner).executeWithBatch1155(
      [
        {
          itemType: 1,
          token: testERC20.address,
          from: owner.address,
          to: newAddress,
          identifier: toBN(0),
          amount: amount9,
        },
        {
          itemType: 2,
          token: testERC721.address,
          from: owner.address,
          to: newAddress,
          identifier: nftId10,
          amount: toBN(1),
        },
      ],
      [
        {
          token: testERC1155.address,
          from: owner.address,
          to: newAddress,
          ids: [nftId, secondNftId, thirdNftId, nftId4],
          amounts: [amount, secondAmount, thirdAmount, amount4],
        },
        {
          token: testERC1155Two.address,
          from: owner.address,
          to: newAddress,
          ids: [nftId5, nftId6, nftId7, nftId8],
          amounts: [amount5, amount6, amount7, amount8],
        },
      ]
    );`
$DIR/test/conduit.spec.ts:918:22-918:37: `.connect(owner)`
$DIR/test/conduit.spec.ts:918:37-953:6: `.executeWithBatch1155(
      [
        {
          itemType: 1,
          token: testERC20.address,
          from: owner.address,
          to: newAddress,
          identifier: toBN(0),
          amount: amount9,
        },
        {
          itemType: 2,
          token: testERC721.address,
          from: owner.address,
          to: newAddress,
          identifier: nftId10,
          amount: toBN(1),
        },
      ],
      [
        {
          token: testERC1155.address,
          from: owner.address,
          to: newAddress,
          ids: [nftId, secondNftId, thirdNftId, nftId4],
          amounts: [amount, secondAmount, thirdAmount, amount4],
        },
        {
          token: testERC1155Two.address,
          from: owner.address,
          to: newAddress,
          ids: [nftId5, nftId6, nftId7, nftId8],
          amounts: [amount5, amount6, amount7, amount8],
        },
      ]
    )`
$DIR/test/conduit.spec.ts:955:29-955:58: `.balanceOf(newAddress, nftId)`
$DIR/test/conduit.spec.ts:956:29-956:64: `.balanceOf(newAddress, secondNftId)`
$DIR/test/conduit.spec.ts:959:29-959:63: `.balanceOf(newAddress, thirdNftId)`
$DIR/test/conduit.spec.ts:962:29-962:59: `.balanceOf(newAddress, nftId4)`
$DIR/test/conduit.spec.ts:964:32-964:62: `.balanceOf(newAddress, nftId5)`
$DIR/test/conduit.spec.ts:967:32-967:62: `.balanceOf(newAddress, nftId6)`
$DIR/test/conduit.spec.ts:970:32-970:62: `.balanceOf(newAddress, nftId7)`
$DIR/test/conduit.spec.ts:973:32-973:62: `.balanceOf(newAddress, nftId8)`
$DIR/test/conduit.spec.ts:977:27-977:49: `.balanceOf(newAddress)`
$DIR/test/conduit.spec.ts:978:28-978:45: `.ownerOf(nftId10)`
$DIR/test/conduit.spec.ts:988:5-988:74: `await testERC1155Two.mint(seller.address, secondNftId, secondAmount);`
$DIR/test/conduit.spec.ts:988:25-988:73: `.mint(seller.address, secondNftId, secondAmount)`
$DIR/test/conduit.spec.ts:996:5-996:74: `await testERC1155Two.mint(seller.address, fourthNftId, fourthAmount);`
$DIR/test/conduit.spec.ts:996:25-996:73: `.mint(seller.address, fourthNftId, fourthAmount)`
$DIR/test/conduit.spec.ts:999:5-999:76: `await set1155ApprovalForAll(seller, marketplaceContract.address, true);`
$DIR/test/conduit.spec.ts:1002:21-1003:25: `
        .connect(seller)`
$DIR/test/conduit.spec.ts:1003:25-1004:62: `
        .setApprovalForAll(marketplaceContract.address, true)`
$DIR/test/conduit.spec.ts:1050:6-1052:6: `.map(([offerArr, considerationArr]) =>
      toFulfillment(offerArr, considerationArr)
    )`
$DIR/test/conduit.spec.ts:1064:5-1068:10: `await marketplaceContract
      .connect(owner)
      .matchOrders([order, mirrorOrder], fulfillments, {
        value,
      });`
$DIR/test/conduit.spec.ts:1064:30-1065:22: `
      .connect(owner)`
$DIR/test/conduit.spec.ts:1065:22-1068:9: `
      .matchOrders([order, mirrorOrder], fulfillments, {
        value,
      })`
$DIR/test/conduit.spec.ts:1073:17-1074:24: `
        .connect(owner)`
$DIR/test/conduit.spec.ts:1074:24-1075:59: `
        .updateChannel(ethers.constants.AddressZero, true)`
$DIR/test/conduit.spec.ts:1082:12-1082:29: `.address.slice(2)`
$DIR/test/conduit.spec.ts:1082:29-1082:47: `.padStart(64, "0")`
$DIR/test/conduit.spec.ts:1082:47-1082:61: `.toLowerCase()`
$DIR/test/conduit.spec.ts:1084:32-1084:47: `.connect(owner)`
$DIR/test/conduit.spec.ts:1084:47-1084:79: `.populateTransaction.execute([])`
$DIR/test/conduit.spec.ts:1085:38-1085:47: `.call(tx)`
$DIR/test/conduit.spec.ts:1088:28-1088:43: `.connect(owner)`
$DIR/test/conduit.spec.ts:1088:43-1088:55: `.execute([])`
$DIR/test/conduit.spec.ts:1093:17-1093:32: `.connect(owner)`
$DIR/test/conduit.spec.ts:1093:32-1093:61: `.executeWithBatch1155([], [])`
$DIR/test/conduit.spec.ts:1099:17-1099:32: `.connect(owner)`
$DIR/test/conduit.spec.ts:1099:32-1099:53: `.executeBatch1155([])`
$DIR/test/conduit.spec.ts:1104:44-1104:72: `.ownerOf(conduitOne.address)`
$DIR/test/conduit.spec.ts:1108:24-1108:39: `.connect(owner)`
$DIR/test/conduit.spec.ts:1108:39-1108:62: `.ownerOf(buyer.address)`
$DIR/test/conduit.spec.ts:1113:40-1113:67: `.getKey(conduitOne.address)`
$DIR/test/conduit.spec.ts:1114:15-1114:29: `.toLowerCase()`
$DIR/test/conduit.spec.ts:1117:24-1117:39: `.connect(owner)`
$DIR/test/conduit.spec.ts:1117:39-1117:61: `.getKey(buyer.address)`
$DIR/test/conduit.spec.ts:1122:41-1125:6: `.getChannelStatus(
      conduitOne.address,
      marketplaceContract.address
    )`
$DIR/test/conduit.spec.ts:1128:5-1131:7: `isOpen = await conduitController.getChannelStatus(
      conduitOne.address,
      seller.address
    );`
$DIR/test/conduit.spec.ts:1128:37-1131:6: `.getChannelStatus(
      conduitOne.address,
      seller.address
    )`
$DIR/test/conduit.spec.ts:1135:24-1136:24: `
        .connect(owner)`
$DIR/test/conduit.spec.ts:1136:24-1137:57: `
        .getChannelStatus(buyer.address, seller.address)`
$DIR/test/conduit.spec.ts:1142:50-1144:6: `.getTotalChannels(
      conduitOne.address
    )`
$DIR/test/conduit.spec.ts:1148:24-1148:39: `.connect(owner)`
$DIR/test/conduit.spec.ts:1148:39-1148:71: `.getTotalChannels(buyer.address)`
$DIR/test/conduit.spec.ts:1151:49-1154:6: `.getChannel(
      conduitOne.address,
      0
    )`
$DIR/test/conduit.spec.ts:1158:24-1159:24: `
        .connect(owner)`
$DIR/test/conduit.spec.ts:1159:24-1160:55: `
        .getChannel(buyer.address, +totalChannels - 1)`
$DIR/test/conduit.spec.ts:1164:24-1164:39: `.connect(owner)`
$DIR/test/conduit.spec.ts:1164:39-1164:73: `.getChannel(conduitOne.address, 1)`
$DIR/test/conduit.spec.ts:1168:24-1168:39: `.connect(owner)`
$DIR/test/conduit.spec.ts:1168:39-1168:73: `.getChannel(conduitOne.address, 2)`
$DIR/test/conduit.spec.ts:1171:45-1171:77: `.getChannels(conduitOne.address)`
$DIR/test/conduit.spec.ts:1176:24-1176:39: `.connect(owner)`
$DIR/test/conduit.spec.ts:1176:39-1176:66: `.getChannels(buyer.address)`
$DIR/test/conduit.spec.ts:1182:48-1184:6: `.getTotalChannels(
      conduitOne.address
    )`
$DIR/test/conduit.spec.ts:1187:41-1190:6: `.getChannelStatus(
      conduitOne.address,
      marketplaceContract.address
    )`
$DIR/test/conduit.spec.ts:1195:24-1196:24: `
        .connect(owner)`
$DIR/test/conduit.spec.ts:1196:24-1197:78: `
        .updateChannel(conduitOne.address, marketplaceContract.address, true)`
$DIR/test/conduit.spec.ts:1200:5-1203:7: `isOpen = await conduitController.getChannelStatus(
      conduitOne.address,
      marketplaceContract.address
    );`
$DIR/test/conduit.spec.ts:1200:37-1203:6: `.getChannelStatus(
      conduitOne.address,
      marketplaceContract.address
    )`
$DIR/test/conduit.spec.ts:1207:5-1209:7: `totalChannels = await conduitController.getTotalChannels(
      conduitOne.address
    );`
$DIR/test/conduit.spec.ts:1207:44-1209:6: `.getTotalChannels(
      conduitOne.address
    )`
$DIR/test/conduit.spec.ts:1212:5-1214:64: `await conduitController
      .connect(owner)
      .updateChannel(conduitOne.address, seller.address, true);`
$DIR/test/conduit.spec.ts:1212:28-1213:22: `
      .connect(owner)`
$DIR/test/conduit.spec.ts:1213:22-1214:63: `
      .updateChannel(conduitOne.address, seller.address, true)`
$DIR/test/conduit.spec.ts:1216:5-1219:7: `isOpen = await conduitController.getChannelStatus(
      conduitOne.address,
      seller.address
    );`
$DIR/test/conduit.spec.ts:1216:37-1219:6: `.getChannelStatus(
      conduitOne.address,
      seller.address
    )`
$DIR/test/conduit.spec.ts:1223:5-1225:7: `totalChannels = await conduitController.getTotalChannels(
      conduitOne.address
    );`
$DIR/test/conduit.spec.ts:1223:44-1225:6: `.getTotalChannels(
      conduitOne.address
    )`
$DIR/test/conduit.spec.ts:1228:5-1230:78: `await conduitController
      .connect(owner)
      .updateChannel(conduitOne.address, marketplaceContract.address, false);`
$DIR/test/conduit.spec.ts:1228:28-1229:22: `
      .connect(owner)`
$DIR/test/conduit.spec.ts:1229:22-1230:77: `
      .updateChannel(conduitOne.address, marketplaceContract.address, false)`
$DIR/test/conduit.spec.ts:1232:5-1235:7: `isOpen = await conduitController.getChannelStatus(
      conduitOne.address,
      marketplaceContract.address
    );`
$DIR/test/conduit.spec.ts:1232:37-1235:6: `.getChannelStatus(
      conduitOne.address,
      marketplaceContract.address
    )`
$DIR/test/conduit.spec.ts:1240:5-1240:55: `await faucet(conduitController.address, provider);`
$DIR/test/conduit.spec.ts:1242:5-1245:8: `await network.provider.request({
      method: "hardhat_impersonateAccount",
      params: [conduitController.address],
    });`
$DIR/test/conduit.spec.ts:1242:18-1245:7: `.provider.request({
      method: "hardhat_impersonateAccount",
      params: [conduitController.address],
    })`
$DIR/test/conduit.spec.ts:1247:49-1249:6: `.getSigner(
      conduitController.address
    )`
$DIR/test/conduit.spec.ts:1251:5-1253:57: `await conduitOne
      .connect(conduitControllerSigner)
      .updateChannel(marketplaceContract.address, true);`
$DIR/test/conduit.spec.ts:1251:21-1252:40: `
      .connect(conduitControllerSigner)`
$DIR/test/conduit.spec.ts:1252:40-1253:56: `
      .updateChannel(marketplaceContract.address, true)`
$DIR/test/conduit.spec.ts:1255:5-1258:8: `await network.provider.request({
      method: "hardhat_stopImpersonatingAccount",
      params: [conduitController.address],
    });`
$DIR/test/conduit.spec.ts:1255:18-1258:7: `.provider.request({
      method: "hardhat_stopImpersonatingAccount",
      params: [conduitController.address],
    })`
$DIR/test/conduit.spec.ts:1260:5-1262:78: `await conduitController
      .connect(owner)
      .updateChannel(conduitOne.address, marketplaceContract.address, false);`
$DIR/test/conduit.spec.ts:1260:28-1261:22: `
      .connect(owner)`
$DIR/test/conduit.spec.ts:1261:22-1262:77: `
      .updateChannel(conduitOne.address, marketplaceContract.address, false)`
$DIR/test/conduit.spec.ts:1264:5-1267:7: `isOpen = await conduitController.getChannelStatus(
      conduitOne.address,
      marketplaceContract.address
    );`
$DIR/test/conduit.spec.ts:1264:37-1267:6: `.getChannelStatus(
      conduitOne.address,
      marketplaceContract.address
    )`
$DIR/test/conduit.spec.ts:1271:5-1273:7: `totalChannels = await conduitController.getTotalChannels(
      conduitOne.address
    );`
$DIR/test/conduit.spec.ts:1271:44-1273:6: `.getTotalChannels(
      conduitOne.address
    )`
$DIR/test/conduit.spec.ts:1276:5-1278:65: `await conduitController
      .connect(owner)
      .updateChannel(conduitOne.address, seller.address, false);`
$DIR/test/conduit.spec.ts:1276:28-1277:22: `
      .connect(owner)`
$DIR/test/conduit.spec.ts:1277:22-1278:64: `
      .updateChannel(conduitOne.address, seller.address, false)`
$DIR/test/conduit.spec.ts:1280:5-1283:7: `isOpen = await conduitController.getChannelStatus(
      conduitOne.address,
      seller.address
    );`
$DIR/test/conduit.spec.ts:1280:37-1283:6: `.getChannelStatus(
      conduitOne.address,
      seller.address
    )`
$DIR/test/conduit.spec.ts:1287:5-1289:7: `totalChannels = await conduitController.getTotalChannels(
      conduitOne.address
    );`
$DIR/test/conduit.spec.ts:1287:44-1289:6: `.getTotalChannels(
      conduitOne.address
    )`
$DIR/test/conduit.spec.ts:1292:5-1294:77: `await conduitController
      .connect(owner)
      .updateChannel(conduitOne.address, marketplaceContract.address, true);`
$DIR/test/conduit.spec.ts:1292:28-1293:22: `
      .connect(owner)`
$DIR/test/conduit.spec.ts:1293:22-1294:76: `
      .updateChannel(conduitOne.address, marketplaceContract.address, true)`
$DIR/test/conduit.spec.ts:1296:5-1299:7: `isOpen = await conduitController.getChannelStatus(
      conduitOne.address,
      marketplaceContract.address
    );`
$DIR/test/conduit.spec.ts:1296:37-1299:6: `.getChannelStatus(
      conduitOne.address,
      marketplaceContract.address
    )`
$DIR/test/conduit.spec.ts:1303:5-1305:7: `totalChannels = await conduitController.getTotalChannels(
      conduitOne.address
    );`
$DIR/test/conduit.spec.ts:1303:44-1305:6: `.getTotalChannels(
      conduitOne.address
    )`
$DIR/test/conduit.spec.ts:1310:5-1312:64: `await conduitController
      .connect(owner)
      .updateChannel(conduitOne.address, seller.address, true);`
$DIR/test/conduit.spec.ts:1310:28-1311:22: `
      .connect(owner)`
$DIR/test/conduit.spec.ts:1311:22-1312:63: `
      .updateChannel(conduitOne.address, seller.address, true)`
$DIR/test/conduit.spec.ts:1314:43-1317:6: `.getChannelStatus(
      conduitOne.address,
      seller.address
    )`
$DIR/test/conduit.spec.ts:1321:17-1321:33: `.connect(seller)`
$DIR/test/conduit.spec.ts:1321:33-1333:8: `.executeWithBatch1155(
        [
          {
            itemType: 0, // NATIVE (invalid)
            token: ethers.constants.AddressZero,
            from: conduitOne.address,
            to: seller.address,
            identifier: 0,
            amount: 0,
          },
        ],
        []
      )`
$DIR/test/conduit.spec.ts:1339:24-1340:24: `
        .connect(owner)`
$DIR/test/conduit.spec.ts:1340:24-1341:65: `
        .createConduit(ethers.constants.HashZero, owner.address)`
$DIR/test/conduit.spec.ts:1347:24-1348:24: `
        .connect(owner)`
$DIR/test/conduit.spec.ts:1348:24-1349:53: `
        .createConduit(conduitKeyOne, owner.address)`
$DIR/test/conduit.spec.ts:1357:24-1358:24: `
        .connect(buyer)`
$DIR/test/conduit.spec.ts:1358:24-1359:64: `
        .updateChannel(conduitOne.address, buyer.address, true)`
$DIR/test/conduit.spec.ts:1366:51-1368:6: `.getPotentialOwner(
      conduitOne.address
    )`
$DIR/test/conduit.spec.ts:1372:24-1372:39: `.connect(owner)`
$DIR/test/conduit.spec.ts:1372:39-1372:72: `.getPotentialOwner(buyer.address)`
$DIR/test/conduit.spec.ts:1378:24-1379:24: `
        .connect(buyer)`
$DIR/test/conduit.spec.ts:1379:24-1380:62: `
        .transferOwnership(conduitOne.address, buyer.address)`
$DIR/test/conduit.spec.ts:1384:24-1385:24: `
        .connect(owner)`
$DIR/test/conduit.spec.ts:1385:24-1386:77: `
        .transferOwnership(conduitOne.address, ethers.constants.AddressZero)`
$DIR/test/conduit.spec.ts:1393:24-1394:24: `
        .connect(owner)`
$DIR/test/conduit.spec.ts:1394:24-1395:58: `
        .transferOwnership(seller.address, buyer.address)`
$DIR/test/conduit.spec.ts:1398:49-1400:6: `.getPotentialOwner(
      conduitOne.address
    )`
$DIR/test/conduit.spec.ts:1403:5-1406:7: `await conduitController.transferOwnership(
      conduitOne.address,
      buyer.address
    );`
$DIR/test/conduit.spec.ts:1403:28-1406:6: `.transferOwnership(
      conduitOne.address,
      buyer.address
    )`
$DIR/test/conduit.spec.ts:1408:5-1410:7: `potentialOwner = await conduitController.getPotentialOwner(
      conduitOne.address
    );`
$DIR/test/conduit.spec.ts:1408:45-1410:6: `.getPotentialOwner(
      conduitOne.address
    )`
$DIR/test/conduit.spec.ts:1414:24-1415:24: `
        .connect(owner)`
$DIR/test/conduit.spec.ts:1415:24-1416:62: `
        .transferOwnership(conduitOne.address, buyer.address)`
$DIR/test/conduit.spec.ts:1423:24-1424:24: `
        .connect(buyer)`
$DIR/test/conduit.spec.ts:1424:24-1425:53: `
        .cancelOwnershipTransfer(conduitOne.address)`
$DIR/test/conduit.spec.ts:1429:24-1429:39: `.connect(owner)`
$DIR/test/conduit.spec.ts:1429:39-1429:79: `.cancelOwnershipTransfer(seller.address)`
$DIR/test/conduit.spec.ts:1432:5-1432:73: `await conduitController.cancelOwnershipTransfer(conduitOne.address);`
$DIR/test/conduit.spec.ts:1432:28-1432:72: `.cancelOwnershipTransfer(conduitOne.address)`
$DIR/test/conduit.spec.ts:1434:5-1436:7: `potentialOwner = await conduitController.getPotentialOwner(
      conduitOne.address
    );`
$DIR/test/conduit.spec.ts:1434:45-1436:6: `.getPotentialOwner(
      conduitOne.address
    )`
$DIR/test/conduit.spec.ts:1440:24-1441:24: `
        .connect(owner)`
$DIR/test/conduit.spec.ts:1441:24-1442:53: `
        .cancelOwnershipTransfer(conduitOne.address)`
$DIR/test/conduit.spec.ts:1448:5-1451:7: `await conduitController.transferOwnership(
      conduitOne.address,
      buyer.address
    );`
$DIR/test/conduit.spec.ts:1448:28-1451:6: `.transferOwnership(
      conduitOne.address,
      buyer.address
    )`
$DIR/test/conduit.spec.ts:1453:5-1455:7: `potentialOwner = await conduitController.getPotentialOwner(
      conduitOne.address
    );`
$DIR/test/conduit.spec.ts:1453:45-1455:6: `.getPotentialOwner(
      conduitOne.address
    )`
$DIR/test/conduit.spec.ts:1459:24-1459:39: `.connect(buyer)`
$DIR/test/conduit.spec.ts:1459:39-1459:71: `.acceptOwnership(seller.address)`
$DIR/test/conduit.spec.ts:1463:24-1463:40: `.connect(seller)`
$DIR/test/conduit.spec.ts:1463:40-1463:76: `.acceptOwnership(conduitOne.address)`
$DIR/test/conduit.spec.ts:1469:5-1469:80: `await conduitController.connect(buyer).acceptOwnership(conduitOne.address);`
$DIR/test/conduit.spec.ts:1469:28-1469:43: `.connect(buyer)`
$DIR/test/conduit.spec.ts:1469:43-1469:79: `.acceptOwnership(conduitOne.address)`
$DIR/test/conduit.spec.ts:1471:5-1473:7: `potentialOwner = await conduitController.getPotentialOwner(
      conduitOne.address
    );`
$DIR/test/conduit.spec.ts:1471:45-1473:6: `.getPotentialOwner(
      conduitOne.address
    )`
$DIR/test/conduit.spec.ts:1476:44-1476:72: `.ownerOf(conduitOne.address)`
$DIR/test/counter.spec.ts:104:54-104:80: `.getOrderStatus(orderHash)`
$DIR/test/counter.spec.ts:110:7-110:30: `order.signature = "0x";`
$DIR/test/counter.spec.ts:116:43-117:26: `
          .connect(buyer)`
$DIR/test/counter.spec.ts:117:26-120:13: `
          .populateTransaction.fulfillOrder(order, toKey(0), {
            value,
          })`
$DIR/test/counter.spec.ts:121:40-121:49: `.call(tx)`
$DIR/test/counter.spec.ts:125:30-125:45: `.connect(buyer)`
$DIR/test/counter.spec.ts:125:45-127:13: `.fulfillOrder(order, toKey(0), {
            value,
          })`
$DIR/test/counter.spec.ts:131:41-131:56: `.connect(owner)`
$DIR/test/counter.spec.ts:131:56-131:74: `.validate([order])`
$DIR/test/counter.spec.ts:134:9-138:14: `tx = await marketplaceContract
          .connect(owner)
          .populateTransaction.fulfillOrder(order, toKey(0), {
            value,
          });`
$DIR/test/counter.spec.ts:134:39-135:26: `
          .connect(owner)`
$DIR/test/counter.spec.ts:135:26-138:13: `
          .populateTransaction.fulfillOrder(order, toKey(0), {
            value,
          })`
$DIR/test/counter.spec.ts:139:9-139:46: `returnData = await provider.call(tx);`
$DIR/test/counter.spec.ts:139:36-139:45: `.call(tx)`
$DIR/test/counter.spec.ts:143:30-143:45: `.connect(buyer)`
$DIR/test/counter.spec.ts:143:45-145:13: `.fulfillOrder(order, toKey(0), {
            value,
          })`
$DIR/test/counter.spec.ts:149:41-149:56: `.connect(owner)`
$DIR/test/counter.spec.ts:149:56-149:74: `.validate([order])`
$DIR/test/counter.spec.ts:154:7-154:35: `order.signature = signature;`
$DIR/test/counter.spec.ts:156:43-156:58: `.connect(owner)`
$DIR/test/counter.spec.ts:156:58-156:76: `.validate([order])`
$DIR/test/counter.spec.ts:158:31-158:38: `.wait()`
$DIR/test/counter.spec.ts:223:50-223:76: `.getOrderStatus(orderHash)`
$DIR/test/counter.spec.ts:227:7-227:73: `await marketplaceContract.connect(owner).validate([order, order]);`
$DIR/test/counter.spec.ts:227:32-227:47: `.connect(owner)`
$DIR/test/counter.spec.ts:227:47-227:72: `.validate([order, order])`
$DIR/test/counter.spec.ts:230:7-230:30: `order.signature = "0x";`
$DIR/test/counter.spec.ts:232:39-233:26: `
          .connect(buyer)`
$DIR/test/counter.spec.ts:233:26-236:13: `
          .fulfillOrder(order, toKey(0), {
            value,
          })`
$DIR/test/counter.spec.ts:237:41-237:48: `.wait()`
$DIR/test/counter.spec.ts:250:52-250:78: `.getOrderStatus(orderHash)`
$DIR/test/counter.spec.ts:257:28-257:43: `.connect(owner)`
$DIR/test/counter.spec.ts:257:43-257:61: `.validate([order])`
$DIR/test/counter.spec.ts:286:7-286:30: `order.signature = "0x";`
$DIR/test/counter.spec.ts:288:54-288:80: `.getOrderStatus(orderHash)`
$DIR/test/counter.spec.ts:298:43-299:26: `
          .connect(buyer)`
$DIR/test/counter.spec.ts:299:26-302:13: `
          .populateTransaction.fulfillOrder(order, toKey(0), {
            value,
          })`
$DIR/test/counter.spec.ts:303:40-303:49: `.call(tx)`
$DIR/test/counter.spec.ts:307:30-307:45: `.connect(buyer)`
$DIR/test/counter.spec.ts:307:45-309:13: `.fulfillOrder(order, toKey(0), {
            value,
          })`
$DIR/test/counter.spec.ts:313:9-315:50: `tx = await marketplaceContract
          .connect(owner)
          .populateTransaction.validate([order]);`
$DIR/test/counter.spec.ts:313:39-314:26: `
          .connect(owner)`
$DIR/test/counter.spec.ts:314:26-315:49: `
          .populateTransaction.validate([order])`
$DIR/test/counter.spec.ts:316:9-316:46: `returnData = await provider.call(tx);`
$DIR/test/counter.spec.ts:316:36-316:45: `.call(tx)`
$DIR/test/counter.spec.ts:319:41-319:56: `.connect(owner)`
$DIR/test/counter.spec.ts:319:56-319:74: `.validate([order])`
$DIR/test/counter.spec.ts:324:30-324:45: `.connect(buyer)`
$DIR/test/counter.spec.ts:324:45-326:13: `.fulfillOrder(order, toKey(0), {
            value,
          })`
$DIR/test/counter.spec.ts:330:41-330:56: `.connect(owner)`
$DIR/test/counter.spec.ts:330:56-330:74: `.validate([order])`
$DIR/test/counter.spec.ts:335:43-335:59: `.connect(seller)`
$DIR/test/counter.spec.ts:335:59-335:77: `.validate([order])`
$DIR/test/counter.spec.ts:337:31-337:38: `.wait()`
$DIR/test/counter.spec.ts:402:50-402:76: `.getOrderStatus(orderHash)`
$DIR/test/counter.spec.ts:406:7-406:30: `order.signature = "0x";`
$DIR/test/counter.spec.ts:408:39-409:26: `
          .connect(buyer)`
$DIR/test/counter.spec.ts:409:26-412:13: `
          .fulfillOrder(order, toKey(0), {
            value,
          })`
$DIR/test/counter.spec.ts:413:41-413:48: `.wait()`
$DIR/test/counter.spec.ts:426:52-426:78: `.getOrderStatus(orderHash)`
$DIR/test/counter.spec.ts:453:7-453:30: `order.signature = "0x";`
$DIR/test/counter.spec.ts:455:54-455:80: `.getOrderStatus(orderHash)`
$DIR/test/counter.spec.ts:465:43-466:26: `
          .connect(buyer)`
$DIR/test/counter.spec.ts:466:26-469:13: `
          .populateTransaction.fulfillOrder(order, toKey(0), {
            value,
          })`
$DIR/test/counter.spec.ts:470:40-470:49: `.call(tx)`
$DIR/test/counter.spec.ts:474:30-474:45: `.connect(buyer)`
$DIR/test/counter.spec.ts:474:45-476:13: `.fulfillOrder(order, toKey(0), {
            value,
          })`
$DIR/test/counter.spec.ts:479:9-481:50: `tx = await marketplaceContract
          .connect(owner)
          .populateTransaction.validate([order]);`
$DIR/test/counter.spec.ts:479:39-480:26: `
          .connect(owner)`
$DIR/test/counter.spec.ts:480:26-481:49: `
          .populateTransaction.validate([order])`
$DIR/test/counter.spec.ts:482:9-482:46: `returnData = await provider.call(tx);`
$DIR/test/counter.spec.ts:482:36-482:45: `.call(tx)`
$DIR/test/counter.spec.ts:486:41-486:56: `.connect(owner)`
$DIR/test/counter.spec.ts:486:56-486:74: `.validate([order])`
$DIR/test/counter.spec.ts:491:30-491:45: `.connect(buyer)`
$DIR/test/counter.spec.ts:491:45-493:13: `.fulfillOrder(order, toKey(0), {
            value,
          })`
$DIR/test/counter.spec.ts:497:41-497:56: `.connect(owner)`
$DIR/test/counter.spec.ts:497:56-497:74: `.validate([order])`
$DIR/test/counter.spec.ts:503:28-503:44: `.connect(seller)`
$DIR/test/counter.spec.ts:503:44-503:70: `.cancel([orderComponents])`
$DIR/test/counter.spec.ts:509:39-509:55: `.connect(seller)`
$DIR/test/counter.spec.ts:509:55-509:73: `.validate([order])`
$DIR/test/counter.spec.ts:514:7-514:35: `order.signature = signature;`
$DIR/test/counter.spec.ts:515:39-515:54: `.connect(owner)`
$DIR/test/counter.spec.ts:515:54-515:72: `.validate([order])`
$DIR/test/counter.spec.ts:519:50-519:76: `.getOrderStatus(orderHash)`
$DIR/test/counter.spec.ts:546:54-546:80: `.getOrderStatus(orderHash)`
$DIR/test/counter.spec.ts:564:7-564:73: `await set721ApprovalForAll(seller, offererContract.address, true);`
$DIR/test/counter.spec.ts:576:7-577:52: `contractOrderOffer[0].identifier =
        contractOrderOffer[0].identifierOrCriteria;`
$DIR/test/counter.spec.ts:578:7-578:70: `contractOrderOffer[0].amount = contractOrderOffer[0].endAmount;`
$DIR/test/counter.spec.ts:580:7-581:60: `contractOrderConsideration[0].identifier =
        contractOrderConsideration[0].identifierOrCriteria;`
$DIR/test/counter.spec.ts:582:7-583:49: `contractOrderConsideration[0].amount =
        contractOrderConsideration[0].endAmount;`
$DIR/test/counter.spec.ts:585:7-587:65: `await offererContract
        .connect(seller)
        .activate(contractOrderOffer[0], contractOrderOffer[0]);`
$DIR/test/counter.spec.ts:585:28-586:25: `
        .connect(seller)`
$DIR/test/counter.spec.ts:586:25-587:64: `
        .activate(contractOrderOffer[0], contractOrderOffer[0])`
$DIR/test/counter.spec.ts:598:34-600:10: `.getContractOffererNonce(
          offererContract.address
        )`
$DIR/test/counter.spec.ts:603:24-603:46: `.address.toLowerCase()`
$DIR/test/counter.spec.ts:604:29-604:43: `.toHexString()`
$DIR/test/counter.spec.ts:604:43-604:52: `.slice(2)`
$DIR/test/counter.spec.ts:604:52-604:70: `.padStart(24, "0")`
$DIR/test/counter.spec.ts:606:52-608:8: `.getOrderStatus(
        contractOrderHash
      )`
$DIR/test/counter.spec.ts:615:43-616:25: `
        .connect(seller)`
$DIR/test/counter.spec.ts:616:25-617:42: `
        .validate([order, contractOrder])`
$DIR/test/counter.spec.ts:619:31-619:38: `.wait()`
$DIR/test/counter.spec.ts:650:7-650:60: `order.parameters.totalOriginalConsiderationItems = 2;`
$DIR/test/counter.spec.ts:655:28-655:44: `.connect(seller)`
$DIR/test/counter.spec.ts:655:44-655:62: `.validate([order])`
$DIR/test/counter.spec.ts:689:28-689:43: `.connect(owner)`
$DIR/test/counter.spec.ts:689:43-689:69: `.cancel([orderComponents])`
$DIR/test/counter.spec.ts:692:54-692:80: `.getOrderStatus(orderHash)`
$DIR/test/counter.spec.ts:699:28-699:44: `.connect(seller)`
$DIR/test/counter.spec.ts:699:44-699:70: `.cancel([orderComponents])`
$DIR/test/counter.spec.ts:706:28-706:43: `.connect(buyer)`
$DIR/test/counter.spec.ts:706:43-708:11: `.fulfillOrder(order, toKey(0), {
          value,
        })`
$DIR/test/counter.spec.ts:713:50-713:76: `.getOrderStatus(orderHash)`
$DIR/test/counter.spec.ts:741:28-741:43: `.connect(owner)`
$DIR/test/counter.spec.ts:741:43-741:69: `.cancel([orderComponents])`
$DIR/test/counter.spec.ts:744:54-744:80: `.getOrderStatus(orderHash)`
$DIR/test/counter.spec.ts:750:43-750:58: `.connect(owner)`
$DIR/test/counter.spec.ts:750:58-750:76: `.validate([order])`
$DIR/test/counter.spec.ts:752:31-752:38: `.wait()`
$DIR/test/counter.spec.ts:817:50-817:76: `.getOrderStatus(orderHash)`
$DIR/test/counter.spec.ts:824:28-824:44: `.connect(seller)`
$DIR/test/counter.spec.ts:824:44-824:70: `.cancel([orderComponents])`
$DIR/test/counter.spec.ts:831:28-831:43: `.connect(buyer)`
$DIR/test/counter.spec.ts:831:43-833:11: `.fulfillOrder(order, toKey(0), {
          value,
        })`
$DIR/test/counter.spec.ts:838:52-838:78: `.getOrderStatus(orderHash)`
$DIR/test/counter.spec.ts:868:28-868:43: `.connect(owner)`
$DIR/test/counter.spec.ts:868:43-868:69: `.cancel([orderComponents])`
$DIR/test/counter.spec.ts:871:54-871:80: `.getOrderStatus(orderHash)`
$DIR/test/counter.spec.ts:877:39-877:53: `.connect(zone)`
$DIR/test/counter.spec.ts:877:53-877:79: `.cancel([orderComponents])`
$DIR/test/counter.spec.ts:883:28-883:43: `.connect(buyer)`
$DIR/test/counter.spec.ts:883:43-885:11: `.fulfillOrder(order, toKey(0), {
          value,
        })`
$DIR/test/counter.spec.ts:890:50-890:76: `.getOrderStatus(orderHash)`
$DIR/test/counter.spec.ts:918:54-918:80: `.getOrderStatus(orderHash)`
$DIR/test/counter.spec.ts:924:43-924:58: `.connect(owner)`
$DIR/test/counter.spec.ts:924:58-924:76: `.validate([order])`
$DIR/test/counter.spec.ts:926:31-926:38: `.wait()`
$DIR/test/counter.spec.ts:993:28-993:43: `.connect(owner)`
$DIR/test/counter.spec.ts:993:43-993:69: `.cancel([orderComponents])`
$DIR/test/counter.spec.ts:996:50-996:76: `.getOrderStatus(orderHash)`
$DIR/test/counter.spec.ts:1002:39-1002:53: `.connect(zone)`
$DIR/test/counter.spec.ts:1002:53-1002:79: `.cancel([orderComponents])`
$DIR/test/counter.spec.ts:1008:28-1008:43: `.connect(buyer)`
$DIR/test/counter.spec.ts:1008:43-1010:11: `.fulfillOrder(order, toKey(0), {
          value,
        })`
$DIR/test/counter.spec.ts:1015:52-1015:78: `.getOrderStatus(orderHash)`
$DIR/test/counter.spec.ts:1035:7-1041:9: `await createOrder(
        seller,
        zone,
        offer,
        consideration,
        0 // FULL_OPEN
      );`
$DIR/test/counter.spec.ts:1056:7-1056:73: `await set721ApprovalForAll(seller, offererContract.address, true);`
$DIR/test/counter.spec.ts:1068:7-1069:52: `contractOrderOffer[0].identifier =
        contractOrderOffer[0].identifierOrCriteria;`
$DIR/test/counter.spec.ts:1070:7-1070:70: `contractOrderOffer[0].amount = contractOrderOffer[0].endAmount;`
$DIR/test/counter.spec.ts:1072:7-1073:60: `contractOrderConsideration[0].identifier =
        contractOrderConsideration[0].identifierOrCriteria;`
$DIR/test/counter.spec.ts:1074:7-1075:49: `contractOrderConsideration[0].amount =
        contractOrderConsideration[0].endAmount;`
$DIR/test/counter.spec.ts:1077:7-1079:65: `await offererContract
        .connect(seller)
        .activate(contractOrderOffer[0], contractOrderOffer[0]);`
$DIR/test/counter.spec.ts:1077:28-1078:25: `
        .connect(seller)`
$DIR/test/counter.spec.ts:1078:25-1079:64: `
        .activate(contractOrderOffer[0], contractOrderOffer[0])`
$DIR/test/counter.spec.ts:1090:34-1092:10: `.getContractOffererNonce(
          offererContract.address
        )`
$DIR/test/counter.spec.ts:1095:24-1095:46: `.address.toLowerCase()`
$DIR/test/counter.spec.ts:1096:29-1096:43: `.toHexString()`
$DIR/test/counter.spec.ts:1096:43-1096:52: `.slice(2)`
$DIR/test/counter.spec.ts:1096:52-1096:70: `.padStart(24, "0")`
$DIR/test/counter.spec.ts:1098:52-1100:8: `.getOrderStatus(
        contractOrderHash
      )`
$DIR/test/counter.spec.ts:1107:28-1107:44: `.connect(seller)`
$DIR/test/counter.spec.ts:1107:44-1107:78: `.cancel([contractOrderComponents])`
$DIR/test/counter.spec.ts:1110:60-1112:8: `.getOrderStatus(
        contractOrderHash
      )`
$DIR/test/counter.spec.ts:1143:48-1143:75: `.getCounter(seller.address)`
$DIR/test/counter.spec.ts:1147:46-1147:65: `.getBlock("latest")`
$DIR/test/counter.spec.ts:1148:54-1148:63: `.shr(128)`
$DIR/test/counter.spec.ts:1151:39-1151:55: `.connect(seller)`
$DIR/test/counter.spec.ts:1151:55-1151:74: `.incrementCounter()`
$DIR/test/counter.spec.ts:1155:51-1155:78: `.getCounter(seller.address)`
$DIR/test/counter.spec.ts:1162:45-1163:26: `
          .connect(buyer)`
$DIR/test/counter.spec.ts:1163:26-1166:13: `
          .populateTransaction.fulfillOrder(order, toKey(0), {
            value,
          })`
$DIR/test/counter.spec.ts:1167:42-1167:51: `.call(tx)`
$DIR/test/counter.spec.ts:1171:30-1171:45: `.connect(buyer)`
$DIR/test/counter.spec.ts:1171:45-1173:13: `.fulfillOrder(order, toKey(0), {
            value,
          })`
$DIR/test/counter.spec.ts:1178:30-1178:45: `.connect(buyer)`
$DIR/test/counter.spec.ts:1178:45-1180:13: `.fulfillOrder(order, toKey(0), {
            value,
          })`
$DIR/test/counter.spec.ts:1192:7-1192:37: `order = newOrderDetails.order;`
$DIR/test/counter.spec.ts:1193:7-1193:45: `orderHash = newOrderDetails.orderHash;`
$DIR/test/counter.spec.ts:1194:7-1194:37: `value = newOrderDetails.value;`
$DIR/test/counter.spec.ts:1195:7-1195:57: `orderComponents = newOrderDetails.orderComponents;`
$DIR/test/counter.spec.ts:1201:39-1202:26: `
          .connect(buyer)`
$DIR/test/counter.spec.ts:1202:26-1205:13: `
          .fulfillOrder(order, toKey(0), {
            value,
          })`
$DIR/test/counter.spec.ts:1206:41-1206:48: `.wait()`
$DIR/test/counter.spec.ts:1242:48-1242:75: `.getCounter(seller.address)`
$DIR/test/counter.spec.ts:1246:43-1246:58: `.connect(owner)`
$DIR/test/counter.spec.ts:1246:58-1246:76: `.validate([order])`
$DIR/test/counter.spec.ts:1248:31-1248:38: `.wait()`
$DIR/test/counter.spec.ts:1313:46-1313:65: `.getBlock("latest")`
$DIR/test/counter.spec.ts:1314:54-1314:63: `.shr(128)`
$DIR/test/counter.spec.ts:1317:39-1317:55: `.connect(seller)`
$DIR/test/counter.spec.ts:1317:55-1317:74: `.incrementCounter()`
$DIR/test/counter.spec.ts:1321:51-1321:78: `.getCounter(seller.address)`
$DIR/test/counter.spec.ts:1328:45-1329:26: `
          .connect(buyer)`
$DIR/test/counter.spec.ts:1329:26-1332:13: `
          .populateTransaction.fulfillOrder(order, toKey(0), {
            value,
          })`
$DIR/test/counter.spec.ts:1333:42-1333:51: `.call(tx)`
$DIR/test/counter.spec.ts:1337:30-1337:45: `.connect(buyer)`
$DIR/test/counter.spec.ts:1337:45-1339:13: `.fulfillOrder(order, toKey(0), {
            value,
          })`
$DIR/test/counter.spec.ts:1344:30-1344:45: `.connect(buyer)`
$DIR/test/counter.spec.ts:1344:45-1346:13: `.fulfillOrder(order, toKey(0), {
            value,
          })`
$DIR/test/counter.spec.ts:1358:7-1358:37: `order = newOrderDetails.order;`
$DIR/test/counter.spec.ts:1359:7-1359:45: `orderHash = newOrderDetails.orderHash;`
$DIR/test/counter.spec.ts:1360:7-1360:37: `value = newOrderDetails.value;`
$DIR/test/counter.spec.ts:1361:7-1361:57: `orderComponents = newOrderDetails.orderComponents;`
$DIR/test/counter.spec.ts:1367:39-1368:26: `
          .connect(buyer)`
$DIR/test/counter.spec.ts:1368:26-1371:13: `
          .fulfillOrder(order, toKey(0), {
            value,
          })`
$DIR/test/counter.spec.ts:1372:41-1372:48: `.wait()`
$DIR/test/counter.spec.ts:1408:48-1408:75: `.getCounter(seller.address)`
$DIR/test/counter.spec.ts:1412:43-1412:58: `.connect(owner)`
$DIR/test/counter.spec.ts:1412:58-1412:76: `.validate([order])`
$DIR/test/counter.spec.ts:1414:31-1414:38: `.wait()`
$DIR/test/counter.spec.ts:1479:46-1479:65: `.getBlock("latest")`
$DIR/test/counter.spec.ts:1480:54-1480:63: `.shr(128)`
$DIR/test/counter.spec.ts:1483:39-1483:55: `.connect(seller)`
$DIR/test/counter.spec.ts:1483:55-1483:74: `.incrementCounter()`
$DIR/test/counter.spec.ts:1487:51-1487:78: `.getCounter(seller.address)`
$DIR/test/counter.spec.ts:1494:45-1495:26: `
          .connect(buyer)`
$DIR/test/counter.spec.ts:1495:26-1498:13: `
          .populateTransaction.fulfillOrder(order, toKey(0), {
            value,
          })`
$DIR/test/counter.spec.ts:1499:42-1499:51: `.call(tx)`
$DIR/test/counter.spec.ts:1503:30-1503:45: `.connect(buyer)`
$DIR/test/counter.spec.ts:1503:45-1505:13: `.fulfillOrder(order, toKey(0), {
            value,
          })`
$DIR/test/counter.spec.ts:1510:30-1510:45: `.connect(buyer)`
$DIR/test/counter.spec.ts:1510:45-1512:13: `.fulfillOrder(order, toKey(0), {
            value,
          })`
$DIR/test/counter.spec.ts:1524:7-1524:37: `order = newOrderDetails.order;`
$DIR/test/counter.spec.ts:1525:7-1525:45: `orderHash = newOrderDetails.orderHash;`
$DIR/test/counter.spec.ts:1526:7-1526:37: `value = newOrderDetails.value;`
$DIR/test/counter.spec.ts:1527:7-1527:57: `orderComponents = newOrderDetails.orderComponents;`
$DIR/test/counter.spec.ts:1533:39-1534:26: `
          .connect(buyer)`
$DIR/test/counter.spec.ts:1534:26-1537:13: `
          .fulfillOrder(order, toKey(0), {
            value,
          })`
$DIR/test/counter.spec.ts:1538:41-1538:48: `.wait()`
$DIR/test/findings/AdditionalRecipientsOffByOne.spec.ts:90:5-90:27: `order = results.order;`
$DIR/test/findings/AdditionalRecipientsOffByOne.spec.ts:91:5-91:35: `orderHash = results.orderHash;`
$DIR/test/findings/AdditionalRecipientsOffByOne.spec.ts:94:48-94:74: `.getOrderStatus(orderHash)`
$DIR/test/findings/AdditionalRecipientsOffByOne.spec.ts:100:41-100:54: `.connect(bob)`
$DIR/test/findings/AdditionalRecipientsOffByOne.spec.ts:100:54-100:72: `.validate([order])`
$DIR/test/findings/AdditionalRecipientsOffByOne.spec.ts:102:29-102:36: `.wait()`
$DIR/test/findings/AdditionalRecipientsOffByOne.spec.ts:168:5-168:71: `orderStatus = await marketplaceContract.getOrderStatus(orderHash);`
$DIR/test/findings/AdditionalRecipientsOffByOne.spec.ts:168:44-168:70: `.getOrderStatus(orderHash)`
$DIR/test/findings/AdditionalRecipientsOffByOne.spec.ts:201:14-204:13: `.sendTransaction({
            to: marketplaceContract.address,
            data: maliciousCallData,
          })`
$DIR/test/findings/AdditionalRecipientsOffByOne.spec.ts:209:32-209:43: `.ownerOf(1)`
$DIR/test/findings/AdditionalRecipientsOffByOne.spec.ts:210:31-210:54: `.balanceOf(bob.address)`
$DIR/test/findings/AdditionalRecipientsOffByOne.spec.ts:214:31-214:56: `.balanceOf(alice.address)`
$DIR/test/findings/AdditionalRecipientsOffByOne.spec.ts:218:31-218:56: `.balanceOf(carol.address)`
$DIR/test/findings/AdditionalRecipientsOffByOne.spec.ts:223:14-227:13: `.sendTransaction({
            to: marketplaceContract.address,
            data: maliciousCallData,
            gasLimit: 29_999_999,
          })`
$DIR/test/findings/CriteriaResolverUnhashedLeaves.spec.ts:95:5-95:27: `order = results.order;`
$DIR/test/findings/CriteriaResolverUnhashedLeaves.spec.ts:100:7-100:50: `await testERC721.mint(carol.address, root);`
$DIR/test/findings/CriteriaResolverUnhashedLeaves.spec.ts:100:23-100:49: `.mint(carol.address, root)`
$DIR/test/findings/CriteriaResolverUnhashedLeaves.spec.ts:101:22-101:56: `.filter((id) => id.eq(toBN(root)))`
$DIR/test/findings/CriteriaResolverUnhashedLeaves.spec.ts:101:40-101:55: `.eq(toBN(root))`
$DIR/test/findings/CriteriaResolverUnhashedLeaves.spec.ts:107:9-114:13: `await marketplaceContract
          .connect(carol)
          .fulfillAdvancedOrder(
            order,
            [criteriaResolver],
            toKey(0),
            carol.address
          );`
$DIR/test/findings/CriteriaResolverUnhashedLeaves.spec.ts:107:34-108:26: `
          .connect(carol)`
$DIR/test/findings/CriteriaResolverUnhashedLeaves.spec.ts:108:26-114:12: `
          .fulfillAdvancedOrder(
            order,
            [criteriaResolver],
            toKey(0),
            carol.address
          )`
$DIR/test/findings/CriteriaResolverUnhashedLeaves.spec.ts:118:31-118:56: `.balanceOf(alice.address)`
$DIR/test/findings/CriteriaResolverUnhashedLeaves.spec.ts:119:31-119:56: `.balanceOf(carol.address)`
$DIR/test/findings/CriteriaResolverUnhashedLeaves.spec.ts:123:32-123:46: `.ownerOf(root)`
$DIR/test/findings/CriteriaResolverUnhashedLeaves.spec.ts:129:30-130:28: `
            .connect(carol)`
$DIR/test/findings/CriteriaResolverUnhashedLeaves.spec.ts:130:28-136:14: `
            .fulfillAdvancedOrder(
              order,
              [criteriaResolver],
              toKey(0),
              carol.address
            )`
$DIR/test/findings/FulfillmentOverflowWithMissingItems.spec.ts:87:5-87:27: `order = results.order;`
$DIR/test/findings/FulfillmentOverflowWithMissingItems.spec.ts:96:18-96:38: `.MaxUint256.sub(998)`
$DIR/test/findings/FulfillmentOverflowWithMissingItems.spec.ts:97:18-97:38: `.MaxUint256.sub(998)`
$DIR/test/findings/FulfillmentOverflowWithMissingItems.spec.ts:108:5-108:36: `maliciousOrder = results.order;`
$DIR/test/findings/FulfillmentOverflowWithMissingItems.spec.ts:126:9-133:13: `await marketplaceContract
          .connect(bob)
          .matchAdvancedOrders(
            [order, maliciousOrder],
            [],
            fulfillments,
            constants.AddressZero
          );`
$DIR/test/findings/FulfillmentOverflowWithMissingItems.spec.ts:126:34-127:24: `
          .connect(bob)`
$DIR/test/findings/FulfillmentOverflowWithMissingItems.spec.ts:127:24-133:12: `
          .matchAdvancedOrders(
            [order, maliciousOrder],
            [],
            fulfillments,
            constants.AddressZero
          )`
$DIR/test/findings/FulfillmentOverflowWithMissingItems.spec.ts:137:32-137:43: `.ownerOf(1)`
$DIR/test/findings/FulfillmentOverflowWithMissingItems.spec.ts:138:31-138:54: `.balanceOf(bob.address)`
$DIR/test/findings/FulfillmentOverflowWithMissingItems.spec.ts:142:31-142:56: `.balanceOf(alice.address)`
$DIR/test/findings/FulfillmentOverflowWithMissingItems.spec.ts:147:30-148:26: `
            .connect(bob)`
$DIR/test/findings/FulfillmentOverflowWithMissingItems.spec.ts:148:26-154:14: `
            .matchAdvancedOrders(
              [order, maliciousOrder],
              [],
              fulfillments,
              constants.AddressZero
            )`
$DIR/test/findings/PartialFillFractionOverflow.spec.ts:70:29-70:57: `.balanceOf(alice.address, 1)`
$DIR/test/findings/PartialFillFractionOverflow.spec.ts:93:5-93:27: `order = results.order;`
$DIR/test/findings/PartialFillFractionOverflow.spec.ts:94:5-94:35: `orderHash = results.orderHash;`
$DIR/test/findings/PartialFillFractionOverflow.spec.ts:97:48-97:74: `.getOrderStatus(orderHash)`
$DIR/test/findings/PartialFillFractionOverflow.spec.ts:103:41-103:54: `.connect(bob)`
$DIR/test/findings/PartialFillFractionOverflow.spec.ts:103:54-103:72: `.validate([order])`
$DIR/test/findings/PartialFillFractionOverflow.spec.ts:105:29-105:36: `.wait()`
$DIR/test/findings/PartialFillFractionOverflow.spec.ts:171:5-171:71: `orderStatus = await marketplaceContract.getOrderStatus(orderHash);`
$DIR/test/findings/PartialFillFractionOverflow.spec.ts:171:44-171:70: `.getOrderStatus(orderHash)`
$DIR/test/findings/PartialFillFractionOverflow.spec.ts:179:7-179:27: `order.numerator = 1;`
$DIR/test/findings/PartialFillFractionOverflow.spec.ts:180:7-180:29: `order.denominator = 2;`
$DIR/test/findings/PartialFillFractionOverflow.spec.ts:181:7-183:65: `await marketplaceContract
        .connect(bob)
        .fulfillAdvancedOrder(order, [], toKey(0), bob.address);`
$DIR/test/findings/PartialFillFractionOverflow.spec.ts:181:32-182:22: `
        .connect(bob)`
$DIR/test/findings/PartialFillFractionOverflow.spec.ts:182:22-183:64: `
        .fulfillAdvancedOrder(order, [], toKey(0), bob.address)`
$DIR/test/findings/PartialFillFractionOverflow.spec.ts:184:31-184:57: `.balanceOf(bob.address, 1)`
$DIR/test/findings/PartialFillFractionOverflow.spec.ts:188:29-188:54: `.balanceOf(alice.address)`
$DIR/test/findings/PartialFillFractionOverflow.spec.ts:194:7-194:42: `order.numerator = toBN(2).pow(118);`
$DIR/test/findings/PartialFillFractionOverflow.spec.ts:194:32-194:41: `.pow(118)`
$DIR/test/findings/PartialFillFractionOverflow.spec.ts:195:7-195:44: `order.denominator = toBN(2).pow(119);`
$DIR/test/findings/PartialFillFractionOverflow.spec.ts:195:34-195:43: `.pow(119)`
$DIR/test/findings/PartialFillFractionOverflow.spec.ts:196:7-198:67: `await marketplaceContract
        .connect(carol)
        .fulfillAdvancedOrder(order, [], toKey(0), carol.address);`
$DIR/test/findings/PartialFillFractionOverflow.spec.ts:196:32-197:24: `
        .connect(carol)`
$DIR/test/findings/PartialFillFractionOverflow.spec.ts:197:24-198:66: `
        .fulfillAdvancedOrder(order, [], toKey(0), carol.address)`
$DIR/test/findings/PartialFillFractionOverflow.spec.ts:202:31-202:59: `.balanceOf(carol.address, 1)`
$DIR/test/findings/PartialFillFractionOverflow.spec.ts:203:31-203:59: `.balanceOf(alice.address, 1)`
$DIR/test/findings/PartialFillFractionOverflow.spec.ts:207:29-207:54: `.balanceOf(carol.address)`
$DIR/test/findings/PartialFillFractionOverflow.spec.ts:208:29-208:54: `.balanceOf(alice.address)`
$DIR/test/findings/PartialFillFractionOverflow.spec.ts:213:54-213:80: `.getOrderStatus(orderHash)`
$DIR/test/findings/PartialFillFractionOverflow.spec.ts:221:11-221:44: `order.numerator = toBN(2).pow(1);`
$DIR/test/findings/PartialFillFractionOverflow.spec.ts:221:36-221:43: `.pow(1)`
$DIR/test/findings/PartialFillFractionOverflow.spec.ts:222:11-222:46: `order.denominator = toBN(2).pow(2);`
$DIR/test/findings/PartialFillFractionOverflow.spec.ts:222:38-222:45: `.pow(2)`
$DIR/test/findings/PartialFillFractionOverflow.spec.ts:223:11-225:71: `await marketplaceContract
            .connect(carol)
            .fulfillAdvancedOrder(order, [], toKey(0), carol.address);`
$DIR/test/findings/PartialFillFractionOverflow.spec.ts:223:36-224:28: `
            .connect(carol)`
$DIR/test/findings/PartialFillFractionOverflow.spec.ts:224:28-225:70: `
            .fulfillAdvancedOrder(order, [], toKey(0), carol.address)`
$DIR/test/findings/PartialFillFractionOverflow.spec.ts:226:11-226:46: `order.numerator = toBN(2).pow(118);`
$DIR/test/findings/PartialFillFractionOverflow.spec.ts:226:36-226:45: `.pow(118)`
$DIR/test/findings/PartialFillFractionOverflow.spec.ts:227:11-227:48: `order.denominator = toBN(2).pow(119);`
$DIR/test/findings/PartialFillFractionOverflow.spec.ts:227:38-227:47: `.pow(119)`
$DIR/test/findings/PartialFillFractionOverflow.spec.ts:228:11-230:71: `await marketplaceContract
            .connect(carol)
            .fulfillAdvancedOrder(order, [], toKey(0), carol.address);`
$DIR/test/findings/PartialFillFractionOverflow.spec.ts:228:36-229:28: `
            .connect(carol)`
$DIR/test/findings/PartialFillFractionOverflow.spec.ts:229:28-230:70: `
            .fulfillAdvancedOrder(order, [], toKey(0), carol.address)`
$DIR/test/findings/PartialFillFractionOverflow.spec.ts:235:33-235:61: `.balanceOf(carol.address, 1)`
$DIR/test/findings/PartialFillFractionOverflow.spec.ts:236:33-236:61: `.balanceOf(alice.address, 1)`
$DIR/test/findings/PartialFillFractionOverflow.spec.ts:240:31-240:56: `.balanceOf(carol.address)`
$DIR/test/findings/PartialFillFractionOverflow.spec.ts:241:31-241:56: `.balanceOf(alice.address)`
$DIR/test/findings/PartialFillFractionOverflow.spec.ts:245:54-245:80: `.getOrderStatus(orderHash)`
$DIR/test/getter.spec.ts:38:43-38:50: `.name()`
$DIR/test/getter.spec.ts:41:55-41:62: `.name()`
$DIR/test/getter.spec.ts:51:34-51:48: `.information()`
$DIR/test/getter.spec.ts:60:39-60:52: `.getNetwork()`
$DIR/test/getter.spec.ts:61:35-61:48: `.toString(16)`
$DIR/test/getter.spec.ts:61:48-61:66: `.padStart(64, "0")`
$DIR/test/getter.spec.ts:62:47-63:16: `.address
      .slice(2)`
$DIR/test/getter.spec.ts:63:16-64:25: `
      .padStart(64, "0")`
$DIR/test/revert.spec.ts:156:51-156:59: `.mul(10)`
$DIR/test/revert.spec.ts:156:67-156:75: `.mul(10)`
$DIR/test/revert.spec.ts:159:26-159:36: `.mul(1000)`
$DIR/test/revert.spec.ts:159:44-159:54: `.mul(1000)`
$DIR/test/revert.spec.ts:160:26-160:34: `.mul(10)`
$DIR/test/revert.spec.ts:160:42-160:50: `.mul(10)`
$DIR/test/revert.spec.ts:161:26-161:34: `.mul(20)`
$DIR/test/revert.spec.ts:161:42-161:50: `.mul(20)`
$DIR/test/revert.spec.ts:172:50-172:76: `.getOrderStatus(orderHash)`
$DIR/test/revert.spec.ts:178:7-178:27: `order.numerator = 0;`
$DIR/test/revert.spec.ts:179:7-179:30: `order.denominator = 10;`
$DIR/test/revert.spec.ts:182:28-183:26: `
          .connect(buyer)`
$DIR/test/revert.spec.ts:183:26-192:12: `
          .fulfillAdvancedOrder(
            order,
            [],
            toKey(0),
            ethers.constants.AddressZero,
            {
              value,
            }
          )`
$DIR/test/revert.spec.ts:195:7-195:73: `orderStatus = await marketplaceContract.getOrderStatus(orderHash);`
$DIR/test/revert.spec.ts:195:46-195:72: `.getOrderStatus(orderHash)`
$DIR/test/revert.spec.ts:201:7-201:27: `order.numerator = 1;`
$DIR/test/revert.spec.ts:202:7-202:29: `order.denominator = 0;`
$DIR/test/revert.spec.ts:205:28-206:26: `
          .connect(buyer)`
$DIR/test/revert.spec.ts:206:26-215:12: `
          .fulfillAdvancedOrder(
            order,
            [],
            toKey(0),
            ethers.constants.AddressZero,
            {
              value,
            }
          )`
$DIR/test/revert.spec.ts:218:7-218:73: `orderStatus = await marketplaceContract.getOrderStatus(orderHash);`
$DIR/test/revert.spec.ts:218:46-218:72: `.getOrderStatus(orderHash)`
$DIR/test/revert.spec.ts:224:7-224:27: `order.numerator = 2;`
$DIR/test/revert.spec.ts:225:7-225:29: `order.denominator = 1;`
$DIR/test/revert.spec.ts:228:28-229:26: `
          .connect(buyer)`
$DIR/test/revert.spec.ts:229:26-238:12: `
          .fulfillAdvancedOrder(
            order,
            [],
            toKey(0),
            ethers.constants.AddressZero,
            {
              value,
            }
          )`
$DIR/test/revert.spec.ts:241:7-241:73: `orderStatus = await marketplaceContract.getOrderStatus(orderHash);`
$DIR/test/revert.spec.ts:241:46-241:72: `.getOrderStatus(orderHash)`
$DIR/test/revert.spec.ts:247:7-247:27: `order.numerator = 1;`
$DIR/test/revert.spec.ts:248:7-248:29: `order.denominator = 2;`
$DIR/test/revert.spec.ts:251:39-252:26: `
          .connect(buyer)`
$DIR/test/revert.spec.ts:252:26-261:12: `
          .fulfillAdvancedOrder(
            order,
            [],
            toKey(0),
            ethers.constants.AddressZero,
            {
              value,
            }
          )`
$DIR/test/revert.spec.ts:262:41-262:48: `.wait()`
$DIR/test/revert.spec.ts:281:7-281:73: `orderStatus = await marketplaceContract.getOrderStatus(orderHash);`
$DIR/test/revert.spec.ts:281:46-281:72: `.getOrderStatus(orderHash)`
$DIR/test/revert.spec.ts:295:51-295:59: `.mul(10)`
$DIR/test/revert.spec.ts:295:67-295:75: `.mul(10)`
$DIR/test/revert.spec.ts:298:26-298:36: `.mul(1000)`
$DIR/test/revert.spec.ts:298:44-298:54: `.mul(1000)`
$DIR/test/revert.spec.ts:299:26-299:34: `.mul(10)`
$DIR/test/revert.spec.ts:299:42-299:50: `.mul(10)`
$DIR/test/revert.spec.ts:300:26-300:34: `.mul(20)`
$DIR/test/revert.spec.ts:300:42-300:50: `.mul(20)`
$DIR/test/revert.spec.ts:311:50-311:76: `.getOrderStatus(orderHash)`
$DIR/test/revert.spec.ts:317:7-317:27: `order.numerator = 1;`
$DIR/test/revert.spec.ts:318:7-318:32: `order.denominator = 8191;`
$DIR/test/revert.spec.ts:321:28-322:26: `
          .connect(buyer)`
$DIR/test/revert.spec.ts:322:26-331:12: `
          .fulfillAdvancedOrder(
            order,
            [],
            toKey(0),
            ethers.constants.AddressZero,
            {
              value,
            }
          )`
$DIR/test/revert.spec.ts:334:7-334:73: `orderStatus = await marketplaceContract.getOrderStatus(orderHash);`
$DIR/test/revert.spec.ts:334:46-334:72: `.getOrderStatus(orderHash)`
$DIR/test/revert.spec.ts:340:7-340:27: `order.numerator = 1;`
$DIR/test/revert.spec.ts:341:7-341:29: `order.denominator = 2;`
$DIR/test/revert.spec.ts:344:39-345:26: `
          .connect(buyer)`
$DIR/test/revert.spec.ts:345:26-354:12: `
          .fulfillAdvancedOrder(
            order,
            [],
            toKey(0),
            ethers.constants.AddressZero,
            {
              value,
            }
          )`
$DIR/test/revert.spec.ts:355:41-355:48: `.wait()`
$DIR/test/revert.spec.ts:374:7-374:73: `orderStatus = await marketplaceContract.getOrderStatus(orderHash);`
$DIR/test/revert.spec.ts:374:46-374:72: `.getOrderStatus(orderHash)`
$DIR/test/revert.spec.ts:388:51-388:59: `.mul(10)`
$DIR/test/revert.spec.ts:388:67-388:75: `.mul(10)`
$DIR/test/revert.spec.ts:391:26-391:36: `.mul(1000)`
$DIR/test/revert.spec.ts:391:44-391:54: `.mul(1000)`
$DIR/test/revert.spec.ts:392:26-392:34: `.mul(10)`
$DIR/test/revert.spec.ts:392:42-392:50: `.mul(10)`
$DIR/test/revert.spec.ts:393:26-393:34: `.mul(20)`
$DIR/test/revert.spec.ts:393:42-393:50: `.mul(20)`
$DIR/test/revert.spec.ts:404:50-404:76: `.getOrderStatus(orderHash)`
$DIR/test/revert.spec.ts:410:7-410:27: `order.numerator = 1;`
$DIR/test/revert.spec.ts:411:7-411:29: `order.denominator = 2;`
$DIR/test/revert.spec.ts:414:28-415:26: `
          .connect(buyer)`
$DIR/test/revert.spec.ts:415:26-424:12: `
          .fulfillAdvancedOrder(
            order,
            [],
            toKey(0),
            ethers.constants.AddressZero,
            {
              value,
            }
          )`
$DIR/test/revert.spec.ts:430:7-430:73: `orderStatus = await marketplaceContract.getOrderStatus(orderHash);`
$DIR/test/revert.spec.ts:430:46-430:72: `.getOrderStatus(orderHash)`
$DIR/test/revert.spec.ts:436:7-436:27: `order.numerator = 1;`
$DIR/test/revert.spec.ts:437:7-437:29: `order.denominator = 1;`
$DIR/test/revert.spec.ts:440:39-441:26: `
          .connect(buyer)`
$DIR/test/revert.spec.ts:441:26-450:12: `
          .fulfillAdvancedOrder(
            order,
            [],
            toKey(0),
            ethers.constants.AddressZero,
            {
              value,
            }
          )`
$DIR/test/revert.spec.ts:451:41-451:48: `.wait()`
$DIR/test/revert.spec.ts:470:7-470:73: `orderStatus = await marketplaceContract.getOrderStatus(orderHash);`
$DIR/test/revert.spec.ts:470:46-470:72: `.getOrderStatus(orderHash)`
$DIR/test/revert.spec.ts:484:51-484:59: `.mul(10)`
$DIR/test/revert.spec.ts:484:67-484:75: `.mul(10)`
$DIR/test/revert.spec.ts:487:26-487:36: `.mul(1000)`
$DIR/test/revert.spec.ts:487:44-487:54: `.mul(1000)`
$DIR/test/revert.spec.ts:488:26-488:34: `.mul(10)`
$DIR/test/revert.spec.ts:488:42-488:50: `.mul(10)`
$DIR/test/revert.spec.ts:489:26-489:34: `.mul(20)`
$DIR/test/revert.spec.ts:489:42-489:50: `.mul(20)`
$DIR/test/revert.spec.ts:500:50-500:76: `.getOrderStatus(orderHash)`
$DIR/test/revert.spec.ts:506:7-506:27: `order.numerator = 1;`
$DIR/test/revert.spec.ts:507:7-507:29: `order.denominator = 2;`
$DIR/test/revert.spec.ts:510:39-511:26: `
          .connect(buyer)`
$DIR/test/revert.spec.ts:511:26-520:12: `
          .fulfillAdvancedOrder(
            order,
            [],
            toKey(0),
            ethers.constants.AddressZero,
            {
              value,
            }
          )`
$DIR/test/revert.spec.ts:521:41-521:48: `.wait()`
$DIR/test/revert.spec.ts:540:7-540:73: `orderStatus = await marketplaceContract.getOrderStatus(orderHash);`
$DIR/test/revert.spec.ts:540:46-540:72: `.getOrderStatus(orderHash)`
$DIR/test/revert.spec.ts:552:28-553:26: `
          .connect(buyer)`
$DIR/test/revert.spec.ts:553:26-556:13: `
          .fulfillBasicOrder(basicOrderParameters, {
            value,
          })`
$DIR/test/revert.spec.ts:572:51-572:59: `.mul(10)`
$DIR/test/revert.spec.ts:572:67-572:75: `.mul(10)`
$DIR/test/revert.spec.ts:575:26-575:36: `.mul(1000)`
$DIR/test/revert.spec.ts:575:44-575:54: `.mul(1000)`
$DIR/test/revert.spec.ts:576:26-576:34: `.mul(10)`
$DIR/test/revert.spec.ts:576:42-576:50: `.mul(10)`
$DIR/test/revert.spec.ts:577:26-577:34: `.mul(20)`
$DIR/test/revert.spec.ts:577:42-577:50: `.mul(20)`
$DIR/test/revert.spec.ts:588:50-588:76: `.getOrderStatus(orderHash)`
$DIR/test/revert.spec.ts:594:7-594:27: `order.numerator = 1;`
$DIR/test/revert.spec.ts:595:7-595:29: `order.denominator = 1;`
$DIR/test/revert.spec.ts:598:39-599:26: `
          .connect(buyer)`
$DIR/test/revert.spec.ts:599:26-608:12: `
          .fulfillAdvancedOrder(
            order,
            [],
            toKey(0),
            ethers.constants.AddressZero,
            {
              value,
            }
          )`
$DIR/test/revert.spec.ts:609:41-609:48: `.wait()`
$DIR/test/revert.spec.ts:628:7-628:73: `orderStatus = await marketplaceContract.getOrderStatus(orderHash);`
$DIR/test/revert.spec.ts:628:46-628:72: `.getOrderStatus(orderHash)`
$DIR/test/revert.spec.ts:635:28-636:26: `
          .connect(buyer)`
$DIR/test/revert.spec.ts:636:26-645:12: `
          .fulfillAdvancedOrder(
            order,
            [],
            toKey(0),
            ethers.constants.AddressZero,
            {
              value,
            }
          )`
$DIR/test/revert.spec.ts:668:7-668:60: `consideration[0].identifierOrCriteria = minRandom(1);`
$DIR/test/revert.spec.ts:684:28-685:26: `
          .connect(buyer)`
$DIR/test/revert.spec.ts:685:26-688:13: `
          .fulfillBasicOrder(basicOrderParameters, {
            value,
          })`
$DIR/test/revert.spec.ts:694:52-694:78: `.getOrderStatus(orderHash)`
$DIR/test/revert.spec.ts:702:7-702:76: `await mintAndApproveERC20(seller, marketplaceContract.address, 1000);`
$DIR/test/revert.spec.ts:709:7-709:52: `offer[0].identifierOrCriteria = minRandom(1);`
$DIR/test/revert.spec.ts:731:28-732:26: `
          .connect(buyer)`
$DIR/test/revert.spec.ts:732:26-733:51: `
          .fulfillBasicOrder(basicOrderParameters)`
$DIR/test/revert.spec.ts:739:52-739:78: `.getOrderStatus(orderHash)`
$DIR/test/revert.spec.ts:753:51-753:59: `.mul(10)`
$DIR/test/revert.spec.ts:753:67-753:75: `.mul(10)`
$DIR/test/revert.spec.ts:756:26-756:36: `.mul(1000)`
$DIR/test/revert.spec.ts:756:44-756:54: `.mul(1000)`
$DIR/test/revert.spec.ts:757:26-757:34: `.mul(10)`
$DIR/test/revert.spec.ts:757:42-757:50: `.mul(10)`
$DIR/test/revert.spec.ts:758:26-758:34: `.mul(20)`
$DIR/test/revert.spec.ts:758:42-758:50: `.mul(20)`
$DIR/test/revert.spec.ts:761:7-761:54: `consideration[0].identifierOrCriteria = amount;`
$DIR/test/revert.spec.ts:777:28-778:26: `
          .connect(buyer)`
$DIR/test/revert.spec.ts:778:26-781:13: `
          .fulfillBasicOrder(basicOrderParameters, {
            value,
          })`
$DIR/test/revert.spec.ts:787:52-787:78: `.getOrderStatus(orderHash)`
$DIR/test/revert.spec.ts:801:51-801:59: `.mul(10)`
$DIR/test/revert.spec.ts:801:67-801:75: `.mul(10)`
$DIR/test/revert.spec.ts:804:29-804:39: `.mul(1000)`
$DIR/test/revert.spec.ts:804:47-804:57: `.mul(1000)`
$DIR/test/revert.spec.ts:805:29-805:37: `.mul(10)`
$DIR/test/revert.spec.ts:805:45-805:53: `.mul(10)`
$DIR/test/revert.spec.ts:806:29-806:37: `.mul(20)`
$DIR/test/revert.spec.ts:806:45-806:53: `.mul(20)`
$DIR/test/revert.spec.ts:809:7-809:54: `consideration[0].identifierOrCriteria = amount;`
$DIR/test/revert.spec.ts:825:28-826:26: `
          .connect(buyer)`
$DIR/test/revert.spec.ts:826:26-829:13: `
          .fulfillBasicOrder(basicOrderParameters, {
            value,
          })`
$DIR/test/revert.spec.ts:835:52-835:78: `.getOrderStatus(orderHash)`
$DIR/test/revert.spec.ts:849:51-849:59: `.mul(10)`
$DIR/test/revert.spec.ts:849:67-849:75: `.mul(10)`
$DIR/test/revert.spec.ts:852:26-852:36: `.mul(1000)`
$DIR/test/revert.spec.ts:852:44-852:54: `.mul(1000)`
$DIR/test/revert.spec.ts:853:26-853:34: `.mul(10)`
$DIR/test/revert.spec.ts:853:42-853:50: `.mul(10)`
$DIR/test/revert.spec.ts:854:26-854:34: `.mul(20)`
$DIR/test/revert.spec.ts:854:42-854:50: `.mul(20)`
$DIR/test/revert.spec.ts:857:7-857:47: `consideration[0].token = seller.address;`
$DIR/test/revert.spec.ts:867:52-867:78: `.getOrderStatus(orderHash)`
$DIR/test/revert.spec.ts:874:28-875:26: `
          .connect(buyer)`
$DIR/test/revert.spec.ts:875:26-884:12: `
          .fulfillAdvancedOrder(
            order,
            [],
            toKey(0),
            ethers.constants.AddressZero,
            {
              value,
            }
          )`
$DIR/test/revert.spec.ts:898:51-898:59: `.mul(10)`
$DIR/test/revert.spec.ts:898:67-898:75: `.mul(10)`
$DIR/test/revert.spec.ts:901:26-901:36: `.mul(1000)`
$DIR/test/revert.spec.ts:901:44-901:54: `.mul(1000)`
$DIR/test/revert.spec.ts:902:26-902:34: `.mul(10)`
$DIR/test/revert.spec.ts:902:42-902:50: `.mul(10)`
$DIR/test/revert.spec.ts:903:26-903:34: `.mul(20)`
$DIR/test/revert.spec.ts:903:42-903:50: `.mul(20)`
$DIR/test/revert.spec.ts:906:7-906:54: `consideration[0].identifierOrCriteria = amount;`
$DIR/test/revert.spec.ts:916:52-916:78: `.getOrderStatus(orderHash)`
$DIR/test/revert.spec.ts:923:28-924:26: `
          .connect(buyer)`
$DIR/test/revert.spec.ts:924:26-933:12: `
          .fulfillAdvancedOrder(
            order,
            [],
            toKey(0),
            ethers.constants.AddressZero,
            {
              value,
            }
          )`
$DIR/test/revert.spec.ts:947:51-947:59: `.mul(10)`
$DIR/test/revert.spec.ts:947:67-947:75: `.mul(10)`
$DIR/test/revert.spec.ts:950:29-950:39: `.mul(1000)`
$DIR/test/revert.spec.ts:950:47-950:57: `.mul(1000)`
$DIR/test/revert.spec.ts:951:29-951:37: `.mul(10)`
$DIR/test/revert.spec.ts:951:45-951:53: `.mul(10)`
$DIR/test/revert.spec.ts:952:29-952:37: `.mul(20)`
$DIR/test/revert.spec.ts:952:45-952:53: `.mul(20)`
$DIR/test/revert.spec.ts:955:7-955:54: `consideration[0].identifierOrCriteria = amount;`
$DIR/test/revert.spec.ts:965:52-965:78: `.getOrderStatus(orderHash)`
$DIR/test/revert.spec.ts:972:28-973:26: `
          .connect(buyer)`
$DIR/test/revert.spec.ts:973:26-982:12: `
          .fulfillAdvancedOrder(
            order,
            [],
            toKey(0),
            ethers.constants.AddressZero,
            {
              value,
            }
          )`
$DIR/test/revert.spec.ts:996:51-996:59: `.mul(10)`
$DIR/test/revert.spec.ts:996:67-996:75: `.mul(10)`
$DIR/test/revert.spec.ts:999:26-999:36: `.mul(1000)`
$DIR/test/revert.spec.ts:999:44-999:54: `.mul(1000)`
$DIR/test/revert.spec.ts:1000:26-1000:34: `.mul(10)`
$DIR/test/revert.spec.ts:1000:42-1000:50: `.mul(10)`
$DIR/test/revert.spec.ts:1001:26-1001:34: `.mul(20)`
$DIR/test/revert.spec.ts:1001:42-1001:50: `.mul(20)`
$DIR/test/revert.spec.ts:1015:12-1015:43: `.parameters.consideration.pop()`
$DIR/test/revert.spec.ts:1017:52-1017:78: `.getOrderStatus(orderHash)`
$DIR/test/revert.spec.ts:1024:28-1025:26: `
          .connect(buyer)`
$DIR/test/revert.spec.ts:1025:26-1034:12: `
          .fulfillAdvancedOrder(
            order,
            [],
            toKey(0),
            ethers.constants.AddressZero,
            {
              value,
            }
          )`
$DIR/test/revert.spec.ts:1083:30-1084:28: `
            .connect(owner)`
$DIR/test/revert.spec.ts:1084:28-1087:15: `
            .matchOrders([order, mirrorOrder], fulfillments, {
              value,
            })`
$DIR/test/revert.spec.ts:1096:30-1097:28: `
            .connect(owner)`
$DIR/test/revert.spec.ts:1097:28-1100:15: `
            .matchOrders([order, mirrorOrder], fulfillments, {
              value,
            })`
$DIR/test/revert.spec.ts:1104:37-1105:23: `
        .connect(zone)`
$DIR/test/revert.spec.ts:1105:23-1108:11: `
        .matchOrders([order, mirrorOrder], fulfillments, {
          value,
        })`
$DIR/test/revert.spec.ts:1109:39-1109:46: `.wait()`
$DIR/test/revert.spec.ts:1155:7-1155:61: `order.signature = order.signature.slice(0, -2) + "01";`
$DIR/test/revert.spec.ts:1155:30-1155:53: `.signature.slice(0, -2)`
$DIR/test/revert.spec.ts:1163:62-1163:80: `.padStart(64, "0")`
$DIR/test/revert.spec.ts:1165:41-1166:24: `
        .connect(buyer)`
$DIR/test/revert.spec.ts:1166:24-1169:11: `
        .populateTransaction.fulfillBasicOrder(basicOrderParameters, {
          value,
        })`
$DIR/test/revert.spec.ts:1170:40-1170:49: `.call(tx)`
$DIR/test/revert.spec.ts:1174:28-1175:26: `
          .connect(buyer)`
$DIR/test/revert.spec.ts:1175:26-1178:13: `
          .fulfillBasicOrder(basicOrderParameters, {
            value,
          })`
$DIR/test/revert.spec.ts:1182:7-1182:69: `basicOrderParameters.signature = "0x".padEnd(130, "f") + "1c";`
$DIR/test/revert.spec.ts:1182:44-1182:61: `.padEnd(130, "f")`
$DIR/test/revert.spec.ts:1184:7-1184:73: `expectedRevertReason = getCustomRevertSelector("InvalidSigner()");`
$DIR/test/revert.spec.ts:1186:7-1190:12: `tx = await marketplaceContract
        .connect(buyer)
        .populateTransaction.fulfillBasicOrder(basicOrderParameters, {
          value,
        });`
$DIR/test/revert.spec.ts:1186:37-1187:24: `
        .connect(buyer)`
$DIR/test/revert.spec.ts:1187:24-1190:11: `
        .populateTransaction.fulfillBasicOrder(basicOrderParameters, {
          value,
        })`
$DIR/test/revert.spec.ts:1191:22-1191:31: `.call(tx)`
$DIR/test/revert.spec.ts:1197:28-1198:26: `
          .connect(buyer)`
$DIR/test/revert.spec.ts:1198:26-1201:13: `
          .fulfillBasicOrder(basicOrderParameters, {
            value,
          })`
$DIR/test/revert.spec.ts:1204:7-1204:58: `basicOrderParameters.signature = originalSignature;`
$DIR/test/revert.spec.ts:1207:39-1208:26: `
          .connect(buyer)`
$DIR/test/revert.spec.ts:1208:26-1211:13: `
          .fulfillBasicOrder(basicOrderParameters, {
            value,
          })`
$DIR/test/revert.spec.ts:1212:41-1212:48: `.wait()`
$DIR/test/revert.spec.ts:1230:23-1231:27: `
          .connect(seller)`
$DIR/test/revert.spec.ts:1231:27-1232:71: `
          .approveNFT(testERC721.address, marketplaceContract.address)`
$DIR/test/revert.spec.ts:1239:7-1239:56: `await testERC20.mint(buyer.address, tokenAmount);`
$DIR/test/revert.spec.ts:1239:22-1239:55: `.mint(buyer.address, tokenAmount)`
$DIR/test/revert.spec.ts:1243:18-1244:26: `
          .connect(buyer)`
$DIR/test/revert.spec.ts:1244:26-1245:61: `
          .approve(marketplaceContract.address, tokenAmount)`
$DIR/test/revert.spec.ts:1254:22-1254:31: `.sub(100)`
$DIR/test/revert.spec.ts:1255:22-1255:31: `.sub(100)`
$DIR/test/revert.spec.ts:1279:28-1280:26: `
          .connect(buyer)`
$DIR/test/revert.spec.ts:1280:26-1281:51: `
          .fulfillBasicOrder(basicOrderParameters)`
$DIR/test/revert.spec.ts:1285:7-1285:68: `await sellerContract.connect(owner).revertWithMessage(false);`
$DIR/test/revert.spec.ts:1285:27-1285:42: `.connect(owner)`
$DIR/test/revert.spec.ts:1285:42-1285:67: `.revertWithMessage(false)`
$DIR/test/revert.spec.ts:1292:23-1293:27: `
          .connect(seller)`
$DIR/test/revert.spec.ts:1293:27-1294:71: `
          .approveNFT(testERC721.address, marketplaceContract.address)`
$DIR/test/revert.spec.ts:1301:7-1301:56: `await testERC20.mint(buyer.address, tokenAmount);`
$DIR/test/revert.spec.ts:1301:22-1301:55: `.mint(buyer.address, tokenAmount)`
$DIR/test/revert.spec.ts:1305:18-1306:26: `
          .connect(buyer)`
$DIR/test/revert.spec.ts:1306:26-1307:61: `
          .approve(marketplaceContract.address, tokenAmount)`
$DIR/test/revert.spec.ts:1316:22-1316:31: `.sub(100)`
$DIR/test/revert.spec.ts:1317:22-1317:31: `.sub(100)`
$DIR/test/revert.spec.ts:1342:30-1343:28: `
            .connect(buyer)`
$DIR/test/revert.spec.ts:1343:28-1344:53: `
            .fulfillBasicOrder(basicOrderParameters)`
$DIR/test/revert.spec.ts:1351:30-1352:28: `
            .connect(buyer)`
$DIR/test/revert.spec.ts:1352:28-1353:53: `
            .fulfillBasicOrder(basicOrderParameters)`
$DIR/test/revert.spec.ts:1358:7-1358:59: `await sellerContract.connect(owner).setValid(false);`
$DIR/test/revert.spec.ts:1358:27-1358:42: `.connect(owner)`
$DIR/test/revert.spec.ts:1358:42-1358:58: `.setValid(false)`
$DIR/test/revert.spec.ts:1365:23-1366:27: `
          .connect(seller)`
$DIR/test/revert.spec.ts:1366:27-1367:71: `
          .approveNFT(testERC721.address, marketplaceContract.address)`
$DIR/test/revert.spec.ts:1374:7-1374:56: `await testERC20.mint(buyer.address, tokenAmount);`
$DIR/test/revert.spec.ts:1374:22-1374:55: `.mint(buyer.address, tokenAmount)`
$DIR/test/revert.spec.ts:1378:18-1379:26: `
          .connect(buyer)`
$DIR/test/revert.spec.ts:1379:26-1380:61: `
          .approve(marketplaceContract.address, tokenAmount)`
$DIR/test/revert.spec.ts:1389:22-1389:31: `.sub(100)`
$DIR/test/revert.spec.ts:1390:22-1390:31: `.sub(100)`
$DIR/test/revert.spec.ts:1418:45-1419:26: `
          .connect(buyer)`
$DIR/test/revert.spec.ts:1419:26-1420:71: `
          .populateTransaction.fulfillBasicOrder(basicOrderParameters)`
$DIR/test/revert.spec.ts:1421:42-1421:51: `.call(tx)`
$DIR/test/revert.spec.ts:1425:30-1426:28: `
            .connect(buyer)`
$DIR/test/revert.spec.ts:1426:28-1427:53: `
            .fulfillBasicOrder(basicOrderParameters)`
$DIR/test/revert.spec.ts:1431:30-1432:28: `
            .connect(buyer)`
$DIR/test/revert.spec.ts:1432:28-1433:53: `
            .fulfillBasicOrder(basicOrderParameters)`
$DIR/test/revert.spec.ts:1437:7-1437:58: `await sellerContract.connect(owner).setValid(true);`
$DIR/test/revert.spec.ts:1437:27-1437:42: `.connect(owner)`
$DIR/test/revert.spec.ts:1437:42-1437:57: `.setValid(true)`
$DIR/test/revert.spec.ts:1463:13-1463:29: `.padEnd(65, "0")`
$DIR/test/revert.spec.ts:1468:30-1468:45: `.connect(buyer)`
$DIR/test/revert.spec.ts:1468:45-1470:13: `.fulfillOrder(order, toKey(0), {
            value,
          })`
$DIR/test/revert.spec.ts:1479:30-1479:45: `.connect(buyer)`
$DIR/test/revert.spec.ts:1479:45-1481:13: `.fulfillOrder(order, toKey(0), {
            value,
          })`
$DIR/test/revert.spec.ts:1485:7-1485:40: `order.extraData = "0x0102030405";`
$DIR/test/revert.spec.ts:1489:30-1490:28: `
            .connect(buyer)`
$DIR/test/revert.spec.ts:1490:28-1499:14: `
            .fulfillAdvancedOrder(
              order,
              [],
              toKey(0),
              ethers.constants.AddressZero,
              {
                value,
              }
            )`
$DIR/test/revert.spec.ts:1508:30-1509:28: `
            .connect(buyer)`
$DIR/test/revert.spec.ts:1509:28-1518:14: `
            .fulfillAdvancedOrder(
              order,
              [],
              toKey(0),
              ethers.constants.AddressZero,
              {
                value,
              }
            )`
$DIR/test/revert.spec.ts:1546:13-1546:29: `.padEnd(65, "0")`
$DIR/test/revert.spec.ts:1556:30-1557:28: `
            .connect(buyer)`
$DIR/test/revert.spec.ts:1557:28-1560:15: `
            .fulfillBasicOrder(basicOrderParameters, {
              value,
            })`
$DIR/test/revert.spec.ts:1569:30-1570:28: `
            .connect(buyer)`
$DIR/test/revert.spec.ts:1570:28-1573:15: `
            .fulfillBasicOrder(basicOrderParameters, {
              value,
            })`
$DIR/test/revert.spec.ts:1579:30-1579:45: `.connect(buyer)`
$DIR/test/revert.spec.ts:1579:45-1581:13: `.fulfillOrder(order, toKey(0), {
            value,
          })`
$DIR/test/revert.spec.ts:1590:30-1590:45: `.connect(buyer)`
$DIR/test/revert.spec.ts:1590:45-1592:13: `.fulfillOrder(order, toKey(0), {
            value,
          })`
$DIR/test/revert.spec.ts:1596:7-1596:32: `order.extraData = "0x01";`
$DIR/test/revert.spec.ts:1600:30-1601:28: `
            .connect(buyer)`
$DIR/test/revert.spec.ts:1601:28-1610:14: `
            .fulfillAdvancedOrder(
              order,
              [],
              toKey(0),
              ethers.constants.AddressZero,
              {
                value,
              }
            )`
$DIR/test/revert.spec.ts:1619:30-1620:28: `
            .connect(buyer)`
$DIR/test/revert.spec.ts:1620:28-1629:14: `
            .fulfillAdvancedOrder(
              order,
              [],
              toKey(0),
              ethers.constants.AddressZero,
              {
                value,
              }
            )`
$DIR/test/revert.spec.ts:1670:28-1671:26: `
          .connect(owner)`
$DIR/test/revert.spec.ts:1671:26-1672:70: `
          .matchOrders([order, mirrorOrder], fulfillments, { value })`
$DIR/test/revert.spec.ts:1678:7-1688:9: `fulfillments = [
        {
          offerComponents: [],
          considerationComponents: [
            {
              orderIndex: 0,
              itemIndex: 0,
            },
          ],
        },
      ];`
$DIR/test/revert.spec.ts:1691:28-1692:26: `
          .connect(owner)`
$DIR/test/revert.spec.ts:1692:26-1693:70: `
          .matchOrders([order, mirrorOrder], fulfillments, { value })`
$DIR/test/revert.spec.ts:1699:7-1709:9: `fulfillments = [
        {
          offerComponents: [
            {
              orderIndex: 0,
              itemIndex: 0,
            },
          ],
          considerationComponents: [],
        },
      ];`
$DIR/test/revert.spec.ts:1712:28-1713:26: `
          .connect(owner)`
$DIR/test/revert.spec.ts:1713:26-1716:13: `
          .matchOrders([order, mirrorOrder], fulfillments, {
            value,
          })`
$DIR/test/revert.spec.ts:1722:7-1722:53: `fulfillments = defaultBuyNowMirrorFulfillment;`
$DIR/test/revert.spec.ts:1734:37-1735:24: `
        .connect(owner)`
$DIR/test/revert.spec.ts:1735:24-1738:11: `
        .matchOrders([order, mirrorOrder], fulfillments, {
          value,
        })`
$DIR/test/revert.spec.ts:1739:39-1739:46: `.wait()`
$DIR/test/revert.spec.ts:1791:28-1792:26: `
          .connect(owner)`
$DIR/test/revert.spec.ts:1792:26-1795:13: `
          .matchOrders([order, mirrorOrder], fulfillments, {
            value,
          })`
$DIR/test/revert.spec.ts:1803:7-1803:53: `fulfillments = defaultBuyNowMirrorFulfillment;`
$DIR/test/revert.spec.ts:1815:37-1816:24: `
        .connect(owner)`
$DIR/test/revert.spec.ts:1816:24-1819:11: `
        .matchOrders([order, mirrorOrder], fulfillments, {
          value,
        })`
$DIR/test/revert.spec.ts:1820:39-1820:46: `.wait()`
$DIR/test/revert.spec.ts:1864:28-1865:26: `
          .connect(owner)`
$DIR/test/revert.spec.ts:1865:26-1866:59: `
          .matchOrders([order, mirrorOrder], fulfillments)`
$DIR/test/revert.spec.ts:1898:28-1899:26: `
          .connect(owner)`
$DIR/test/revert.spec.ts:1899:26-1900:59: `
          .matchOrders([order, mirrorOrder], fulfillments)`
$DIR/test/revert.spec.ts:1913:7-1913:77: `await set721ApprovalForAll(seller, marketplaceContract.address, true);`
$DIR/test/revert.spec.ts:1959:8-1961:8: `.map(([offerArr, considerationArr]) =>
        toFulfillment(offerArr, considerationArr)
      )`
$DIR/test/revert.spec.ts:1964:28-1965:26: `
          .connect(owner)`
$DIR/test/revert.spec.ts:1965:26-1968:13: `
          .matchOrders([order, mirrorOrder], fulfillments, {
            value,
          })`
$DIR/test/revert.spec.ts:1981:7-1981:77: `await set721ApprovalForAll(seller, marketplaceContract.address, true);`
$DIR/test/revert.spec.ts:2027:8-2029:8: `.map(([offerArr, considerationArr]) =>
        toFulfillment(offerArr, considerationArr)
      )`
$DIR/test/revert.spec.ts:2032:28-2033:26: `
          .connect(owner)`
$DIR/test/revert.spec.ts:2033:26-2036:13: `
          .matchOrders([order, mirrorOrder], fulfillments, {
            value,
          })`
$DIR/test/revert.spec.ts:2049:7-2049:77: `await set721ApprovalForAll(seller, marketplaceContract.address, true);`
$DIR/test/revert.spec.ts:2082:27-2082:50: `.map((o) => ({ ...o }))`
$DIR/test/revert.spec.ts:2084:7-2084:52: `offer2[0].identifierOrCriteria = secondNFTId;`
$DIR/test/revert.spec.ts:2107:8-2109:8: `.map(([offerArr, considerationArr]) =>
        toFulfillment(offerArr, considerationArr)
      )`
$DIR/test/revert.spec.ts:2112:28-2113:26: `
          .connect(owner)`
$DIR/test/revert.spec.ts:2113:26-2116:13: `
          .matchOrders([order, mirrorOrder, order2], fulfillments, {
            value,
          })`
$DIR/test/revert.spec.ts:2129:7-2129:77: `await set721ApprovalForAll(seller, marketplaceContract.address, true);`
$DIR/test/revert.spec.ts:2162:27-2162:50: `.map((o) => ({ ...o }))`
$DIR/test/revert.spec.ts:2164:7-2164:52: `offer2[0].identifierOrCriteria = secondNFTId;`
$DIR/test/revert.spec.ts:2192:8-2194:8: `.map(([offerArr, considerationArr]) =>
        toFulfillment(offerArr, considerationArr)
      )`
$DIR/test/revert.spec.ts:2197:28-2198:26: `
          .connect(owner)`
$DIR/test/revert.spec.ts:2198:26-2201:13: `
          .matchOrders([order, mirrorOrder, order2], fulfillments, {
            value,
          })`
$DIR/test/revert.spec.ts:2214:7-2214:77: `await set721ApprovalForAll(seller, marketplaceContract.address, true);`
$DIR/test/revert.spec.ts:2247:27-2247:50: `.map((o) => ({ ...o }))`
$DIR/test/revert.spec.ts:2249:7-2249:52: `offer2[0].identifierOrCriteria = secondNFTId;`
$DIR/test/revert.spec.ts:2251:7-2251:30: `offer2[0].itemType = 1;`
$DIR/test/revert.spec.ts:2274:8-2276:8: `.map(([offerArr, considerationArr]) =>
        toFulfillment(offerArr, considerationArr)
      )`
$DIR/test/revert.spec.ts:2279:28-2280:26: `
          .connect(owner)`
$DIR/test/revert.spec.ts:2280:26-2283:13: `
          .matchOrders([order, mirrorOrder, order2], fulfillments, {
            value,
          })`
$DIR/test/revert.spec.ts:2296:7-2296:77: `await set721ApprovalForAll(seller, marketplaceContract.address, true);`
$DIR/test/revert.spec.ts:2329:27-2329:50: `.map((o) => ({ ...o }))`
$DIR/test/revert.spec.ts:2331:7-2331:52: `offer2[0].identifierOrCriteria = secondNFTId;`
$DIR/test/revert.spec.ts:2333:7-2333:45: `offer2[0].token = testERC1155.address;`
$DIR/test/revert.spec.ts:2356:8-2358:8: `.map(([offerArr, considerationArr]) =>
        toFulfillment(offerArr, considerationArr)
      )`
$DIR/test/revert.spec.ts:2361:28-2362:26: `
          .connect(owner)`
$DIR/test/revert.spec.ts:2362:26-2365:13: `
          .matchOrders([order, mirrorOrder, order2], fulfillments, {
            value,
          })`
$DIR/test/revert.spec.ts:2376:7-2376:77: `await set721ApprovalForAll(seller, marketplaceContract.address, true);`
$DIR/test/revert.spec.ts:2401:43-2401:66: `.map((o) => ({ ...o }))`
$DIR/test/revert.spec.ts:2403:7-2403:51: `consideration2[0].recipient = owner.address;`
$DIR/test/revert.spec.ts:2424:8-2426:8: `.map(([offerArr, considerationArr]) =>
        toFulfillment(offerArr, considerationArr)
      )`
$DIR/test/revert.spec.ts:2429:28-2430:26: `
          .connect(owner)`
$DIR/test/revert.spec.ts:2430:26-2433:13: `
          .matchOrders([order, mirrorOrder, order2], fulfillments, {
            value,
          })`
$DIR/test/revert.spec.ts:2444:7-2444:77: `await set721ApprovalForAll(seller, marketplaceContract.address, true);`
$DIR/test/revert.spec.ts:2469:43-2469:66: `.map((o) => ({ ...o }))`
$DIR/test/revert.spec.ts:2471:7-2471:38: `consideration2[0].itemType = 1;`
$DIR/test/revert.spec.ts:2492:8-2494:8: `.map(([offerArr, considerationArr]) =>
        toFulfillment(offerArr, considerationArr)
      )`
$DIR/test/revert.spec.ts:2497:28-2498:26: `
          .connect(owner)`
$DIR/test/revert.spec.ts:2498:26-2501:13: `
          .matchOrders([order, mirrorOrder, order2], fulfillments, {
            value,
          })`
$DIR/test/revert.spec.ts:2512:7-2512:77: `await set721ApprovalForAll(seller, marketplaceContract.address, true);`
$DIR/test/revert.spec.ts:2537:43-2537:66: `.map((o) => ({ ...o }))`
$DIR/test/revert.spec.ts:2539:7-2539:53: `consideration2[0].token = testERC1155.address;`
$DIR/test/revert.spec.ts:2560:8-2562:8: `.map(([offerArr, considerationArr]) =>
        toFulfillment(offerArr, considerationArr)
      )`
$DIR/test/revert.spec.ts:2565:28-2566:26: `
          .connect(owner)`
$DIR/test/revert.spec.ts:2566:26-2569:13: `
          .matchOrders([order, mirrorOrder, order2], fulfillments, {
            value,
          })`
$DIR/test/revert.spec.ts:2580:7-2580:77: `await set721ApprovalForAll(seller, marketplaceContract.address, true);`
$DIR/test/revert.spec.ts:2605:43-2605:66: `.map((o) => ({ ...o }))`
$DIR/test/revert.spec.ts:2607:7-2607:54: `consideration2[0].identifierOrCriteria = nftId;`
$DIR/test/revert.spec.ts:2628:8-2630:8: `.map(([offerArr, considerationArr]) =>
        toFulfillment(offerArr, considerationArr)
      )`
$DIR/test/revert.spec.ts:2633:28-2634:26: `
          .connect(owner)`
$DIR/test/revert.spec.ts:2634:26-2637:13: `
          .matchOrders([order, mirrorOrder, order2], fulfillments, {
            value,
          })`
$DIR/test/revert.spec.ts:2650:7-2650:77: `await set721ApprovalForAll(seller, marketplaceContract.address, true);`
$DIR/test/revert.spec.ts:2696:8-2698:8: `.map(([offerArr, considerationArr]) =>
        toFulfillment(offerArr, considerationArr)
      )`
$DIR/test/revert.spec.ts:2701:28-2702:26: `
          .connect(owner)`
$DIR/test/revert.spec.ts:2702:26-2705:13: `
          .matchOrders([order, mirrorOrder], fulfillments, {
            value,
          })`
$DIR/test/revert.spec.ts:2747:8-2749:8: `.map(([offerArr, considerationArr]) =>
        toFulfillment(offerArr, considerationArr)
      )`
$DIR/test/revert.spec.ts:2752:28-2753:26: `
          .connect(owner)`
$DIR/test/revert.spec.ts:2753:26-2756:13: `
          .matchOrders([order, mirrorOrder], fulfillments, {
            value,
          })`
$DIR/test/revert.spec.ts:2771:38-2771:45: `.div(2)`
$DIR/test/revert.spec.ts:2771:53-2771:60: `.div(2)`
$DIR/test/revert.spec.ts:2772:38-2772:45: `.div(2)`
$DIR/test/revert.spec.ts:2772:53-2772:60: `.div(2)`
$DIR/test/revert.spec.ts:2802:28-2803:26: `
          .connect(buyer)`
$DIR/test/revert.spec.ts:2803:26-2813:12: `
          .fulfillAvailableOrders(
            [order],
            offerComponents,
            considerationComponents,
            toKey(0),
            100,
            {
              value,
            }
          )`
$DIR/test/revert.spec.ts:2848:8-2850:8: `.map(([offerArr, considerationArr]) =>
        toFulfillment(offerArr, considerationArr)
      )`
$DIR/test/revert.spec.ts:2853:28-2854:26: `
          .connect(owner)`
$DIR/test/revert.spec.ts:2854:26-2857:13: `
          .matchOrders([order, mirrorOrder], fulfillments, {
            value,
          })`
$DIR/test/revert.spec.ts:2896:28-2897:26: `
          .connect(buyer)`
$DIR/test/revert.spec.ts:2897:26-2909:12: `
          .fulfillAvailableAdvancedOrders(
            [order],
            [],
            offerComponents,
            considerationComponents,
            toKey(0),
            ethers.constants.AddressZero,
            100,
            {
              value,
            }
          )`
$DIR/test/revert.spec.ts:2923:7-2923:78: `await set1155ApprovalForAll(seller, marketplaceContract.address, true);`
$DIR/test/revert.spec.ts:2957:28-2958:26: `
          .connect(buyer)`
$DIR/test/revert.spec.ts:2958:26-2970:12: `
          .fulfillAvailableAdvancedOrders(
            [order],
            [],
            offerComponents,
            considerationComponents,
            toKey(0),
            ethers.constants.AddressZero,
            100,
            {
              value,
            }
          )`
$DIR/test/revert.spec.ts:2982:7-2982:78: `await set1155ApprovalForAll(seller, marketplaceContract.address, true);`
$DIR/test/revert.spec.ts:3016:28-3017:26: `
          .connect(buyer)`
$DIR/test/revert.spec.ts:3017:26-3029:12: `
          .fulfillAvailableAdvancedOrders(
            [order],
            [],
            offerComponents,
            considerationComponents,
            toKey(0),
            ethers.constants.AddressZero,
            100,
            {
              value,
            }
          )`
$DIR/test/revert.spec.ts:3071:28-3072:26: `
          .connect(buyer)`
$DIR/test/revert.spec.ts:3072:26-3084:12: `
          .fulfillAvailableAdvancedOrders(
            [order],
            [],
            offerComponents,
            considerationComponents,
            toKey(0),
            ethers.constants.AddressZero,
            100,
            {
              value,
            }
          )`
$DIR/test/revert.spec.ts:3123:28-3124:26: `
          .connect(buyer)`
$DIR/test/revert.spec.ts:3124:26-3136:12: `
          .fulfillAvailableAdvancedOrders(
            [order],
            [],
            offerComponents,
            considerationComponents,
            toKey(0),
            ethers.constants.AddressZero,
            100,
            {
              value,
            }
          )`
$DIR/test/revert.spec.ts:3180:28-3181:26: `
          .connect(buyer)`
$DIR/test/revert.spec.ts:3181:26-3193:12: `
          .fulfillAvailableAdvancedOrders(
            [order],
            [],
            offerComponents,
            considerationComponents,
            toKey(0),
            ethers.constants.AddressZero,
            100,
            {
              value,
            }
          )`
$DIR/test/revert.spec.ts:3206:51-3206:58: `.div(2)`
$DIR/test/revert.spec.ts:3206:66-3206:73: `.div(2)`
$DIR/test/revert.spec.ts:3240:28-3240:44: `.connect(seller)`
$DIR/test/revert.spec.ts:3240:44-3240:70: `.cancel([orderComponents])`
$DIR/test/revert.spec.ts:3257:39-3258:26: `
          .connect(buyer)`
$DIR/test/revert.spec.ts:3258:26-3261:13: `
          .fulfillOrder(orderThree, toKey(0), {
            value,
          })`
$DIR/test/revert.spec.ts:3262:41-3262:48: `.wait()`
$DIR/test/revert.spec.ts:3300:28-3301:26: `
          .connect(buyer)`
$DIR/test/revert.spec.ts:3301:26-3313:12: `
          .fulfillAvailableAdvancedOrders(
            [orderOne, orderTwo, orderThree],
            [],
            offerComponents,
            considerationComponents,
            toKey(0),
            ethers.constants.AddressZero,
            100,
            {
              value: value.mul(3),
            }
          )`
$DIR/test/revert.spec.ts:3311:27-3311:34: `.mul(3)`
$DIR/test/revert.spec.ts:3325:7-3325:52: `await testERC721.mint(seller.address, nftId);`
$DIR/test/revert.spec.ts:3325:23-3325:51: `.mint(seller.address, nftId)`
$DIR/test/revert.spec.ts:3326:7-3326:58: `await testERC721.mint(seller.address, secondNFTId);`
$DIR/test/revert.spec.ts:3326:23-3326:57: `.mint(seller.address, secondNFTId)`
$DIR/test/revert.spec.ts:3327:7-3327:57: `await testERC721.mint(seller.address, thirdNFTId);`
$DIR/test/revert.spec.ts:3327:23-3327:56: `.mint(seller.address, thirdNFTId)`
$DIR/test/revert.spec.ts:3332:7-3332:77: `await set721ApprovalForAll(seller, marketplaceContract.address, true);`
$DIR/test/revert.spec.ts:3358:28-3359:26: `
          .connect(buyer)`
$DIR/test/revert.spec.ts:3359:26-3368:12: `
          .fulfillAdvancedOrder(
            order,
            criteriaResolvers,
            toKey(0),
            ethers.constants.AddressZero,
            {
              value,
            }
          )`
$DIR/test/revert.spec.ts:3376:7-3378:9: `criteriaResolvers = [
        buildResolver(0, 0, 5, nftId, proofs[nftId.toString()]),
      ];`
$DIR/test/revert.spec.ts:3381:28-3382:26: `
          .connect(buyer)`
$DIR/test/revert.spec.ts:3382:26-3391:12: `
          .fulfillAdvancedOrder(
            order,
            criteriaResolvers,
            toKey(0),
            ethers.constants.AddressZero,
            {
              value,
            }
          )`
$DIR/test/revert.spec.ts:3397:7-3399:9: `criteriaResolvers = [
        buildResolver(0, 1, 5, nftId, proofs[nftId.toString()]),
      ];`
$DIR/test/revert.spec.ts:3402:28-3403:26: `
          .connect(buyer)`
$DIR/test/revert.spec.ts:3403:26-3412:12: `
          .fulfillAdvancedOrder(
            order,
            criteriaResolvers,
            toKey(0),
            ethers.constants.AddressZero,
            {
              value,
            }
          )`
$DIR/test/revert.spec.ts:3418:7-3420:9: `criteriaResolvers = [
        buildResolver(0, 0, 0, nftId, proofs[nftId.toString()]),
      ];`
$DIR/test/revert.spec.ts:3423:39-3424:26: `
          .connect(buyer)`
$DIR/test/revert.spec.ts:3424:26-3433:12: `
          .fulfillAdvancedOrder(
            order,
            criteriaResolvers,
            toKey(0),
            ethers.constants.AddressZero,
            {
              value,
            }
          )`
$DIR/test/revert.spec.ts:3434:41-3434:48: `.wait()`
$DIR/test/revert.spec.ts:3459:9-3459:79: `await set721ApprovalForAll(seller, marketplaceContract.address, true);`
$DIR/test/revert.spec.ts:3494:30-3495:28: `
            .connect(owner)`
$DIR/test/revert.spec.ts:3495:28-3504:14: `
            .matchAdvancedOrders(
              [order, mirrorOrder],
              criteriaResolvers,
              fulfillments,
              ethers.constants.AddressZero,
              {
                value,
              }
            )`
$DIR/test/revert.spec.ts:3512:9-3514:11: `criteriaResolvers = [
          buildResolver(0, 0, 5, nftId, proofs[nftId.toString()]),
        ];`
$DIR/test/revert.spec.ts:3517:30-3518:28: `
            .connect(owner)`
$DIR/test/revert.spec.ts:3518:28-3527:14: `
            .matchAdvancedOrders(
              [order, mirrorOrder],
              criteriaResolvers,
              fulfillments,
              ethers.constants.AddressZero,
              {
                value,
              }
            )`
$DIR/test/revert.spec.ts:3533:9-3535:11: `criteriaResolvers = [
          buildResolver(0, 1, 5, nftId, proofs[nftId.toString()]),
        ];`
$DIR/test/revert.spec.ts:3538:30-3539:28: `
            .connect(owner)`
$DIR/test/revert.spec.ts:3539:28-3548:14: `
            .matchAdvancedOrders(
              [order, mirrorOrder],
              criteriaResolvers,
              fulfillments,
              ethers.constants.AddressZero,
              {
                value,
              }
            )`
$DIR/test/revert.spec.ts:3560:7-3560:52: `await testERC721.mint(seller.address, nftId);`
$DIR/test/revert.spec.ts:3560:23-3560:51: `.mint(seller.address, nftId)`
$DIR/test/revert.spec.ts:3561:7-3561:57: `await testERC721.mint(buyer.address, secondNFTId);`
$DIR/test/revert.spec.ts:3561:23-3561:56: `.mint(buyer.address, secondNFTId)`
$DIR/test/revert.spec.ts:3566:7-3566:77: `await set721ApprovalForAll(seller, marketplaceContract.address, true);`
$DIR/test/revert.spec.ts:3569:7-3569:76: `await set721ApprovalForAll(buyer, marketplaceContract.address, true);`
$DIR/test/revert.spec.ts:3593:7-3595:9: `criteriaResolvers = [
        buildResolver(0, 0, 0, nftId, proofs[nftId.toString()]),
      ];`
$DIR/test/revert.spec.ts:3598:28-3599:26: `
          .connect(buyer)`
$DIR/test/revert.spec.ts:3599:26-3608:12: `
          .fulfillAdvancedOrder(
            order,
            criteriaResolvers,
            toKey(0),
            ethers.constants.AddressZero,
            {
              value,
            }
          )`
$DIR/test/revert.spec.ts:3616:7-3618:9: `criteriaResolvers = [
        buildResolver(0, 1, 0, secondNFTId, proofs[secondNFTId.toString()]),
      ];`
$DIR/test/revert.spec.ts:3621:28-3622:26: `
          .connect(buyer)`
$DIR/test/revert.spec.ts:3622:26-3631:12: `
          .fulfillAdvancedOrder(
            order,
            criteriaResolvers,
            toKey(0),
            ethers.constants.AddressZero,
            {
              value,
            }
          )`
$DIR/test/revert.spec.ts:3639:7-3642:9: `criteriaResolvers = [
        buildResolver(0, 0, 0, nftId, proofs[nftId.toString()]),
        buildResolver(0, 1, 0, secondNFTId, proofs[secondNFTId.toString()]),
      ];`
$DIR/test/revert.spec.ts:3645:39-3646:26: `
          .connect(buyer)`
$DIR/test/revert.spec.ts:3646:26-3655:12: `
          .fulfillAdvancedOrder(
            order,
            criteriaResolvers,
            toKey(0),
            ethers.constants.AddressZero,
            {
              value,
            }
          )`
$DIR/test/revert.spec.ts:3656:41-3656:48: `.wait()`
$DIR/test/revert.spec.ts:3681:9-3681:54: `await testERC721.mint(seller.address, nftId);`
$DIR/test/revert.spec.ts:3681:25-3681:53: `.mint(seller.address, nftId)`
$DIR/test/revert.spec.ts:3682:9-3682:60: `await testERC721.mint(seller.address, secondNFTId);`
$DIR/test/revert.spec.ts:3682:25-3682:59: `.mint(seller.address, secondNFTId)`
$DIR/test/revert.spec.ts:3687:9-3687:79: `await set721ApprovalForAll(seller, marketplaceContract.address, true);`
$DIR/test/revert.spec.ts:3711:9-3713:11: `criteriaResolvers = [
          buildResolver(0, 0, 0, nftId, proofs[nftId.toString()]),
        ];`
$DIR/test/revert.spec.ts:3725:30-3726:28: `
            .connect(owner)`
$DIR/test/revert.spec.ts:3726:28-3735:14: `
            .matchAdvancedOrders(
              [order, mirrorOrder],
              criteriaResolvers,
              fulfillments,
              ethers.constants.AddressZero,
              {
                value,
              }
            )`
$DIR/test/revert.spec.ts:3743:9-3745:11: `criteriaResolvers = [
          buildResolver(0, 1, 0, secondNFTId, proofs[secondNFTId.toString()]),
        ];`
$DIR/test/revert.spec.ts:3748:30-3749:28: `
            .connect(owner)`
$DIR/test/revert.spec.ts:3749:28-3758:14: `
            .matchAdvancedOrders(
              [order, mirrorOrder],
              criteriaResolvers,
              fulfillments,
              ethers.constants.AddressZero,
              {
                value,
              }
            )`
$DIR/test/revert.spec.ts:3766:9-3769:11: `criteriaResolvers = [
          buildResolver(0, 0, 0, nftId, proofs[nftId.toString()]),
          buildResolver(0, 1, 0, secondNFTId, proofs[secondNFTId.toString()]),
        ];`
$DIR/test/revert.spec.ts:3778:7-3778:52: `await testERC721.mint(seller.address, nftId);`
$DIR/test/revert.spec.ts:3778:23-3778:51: `.mint(seller.address, nftId)`
$DIR/test/revert.spec.ts:3779:7-3779:58: `await testERC721.mint(seller.address, secondNFTId);`
$DIR/test/revert.spec.ts:3779:23-3779:57: `.mint(seller.address, secondNFTId)`
$DIR/test/revert.spec.ts:3780:7-3780:57: `await testERC721.mint(seller.address, thirdNFTId);`
$DIR/test/revert.spec.ts:3780:23-3780:56: `.mint(seller.address, thirdNFTId)`
$DIR/test/revert.spec.ts:3785:7-3785:77: `await set721ApprovalForAll(seller, marketplaceContract.address, true);`
$DIR/test/revert.spec.ts:3813:28-3814:26: `
          .connect(buyer)`
$DIR/test/revert.spec.ts:3814:26-3823:12: `
          .fulfillAdvancedOrder(
            order,
            criteriaResolvers,
            toKey(0),
            ethers.constants.AddressZero,
            {
              value,
            }
          )`
$DIR/test/revert.spec.ts:3835:9-3835:79: `await set721ApprovalForAll(seller, marketplaceContract.address, true);`
$DIR/test/revert.spec.ts:3872:30-3873:28: `
            .connect(owner)`
$DIR/test/revert.spec.ts:3873:28-3882:14: `
            .matchAdvancedOrders(
              [order, mirrorOrder],
              criteriaResolvers,
              fulfillments,
              ethers.constants.AddressZero,
              {
                value,
              }
            )`
$DIR/test/revert.spec.ts:3894:7-3894:76: `await testERC20Two.mint(seller.address, ethers.constants.MaxUint256);`
$DIR/test/revert.spec.ts:3894:25-3894:75: `.mint(seller.address, ethers.constants.MaxUint256)`
$DIR/test/revert.spec.ts:3896:7-3898:76: `await testERC20Two
        .connect(seller)
        .approve(marketplaceContract.address, ethers.constants.MaxUint256);`
$DIR/test/revert.spec.ts:3896:25-3897:25: `
        .connect(seller)`
$DIR/test/revert.spec.ts:3897:25-3898:75: `
        .approve(marketplaceContract.address, ethers.constants.MaxUint256)`
$DIR/test/revert.spec.ts:3955:28-3956:26: `
          .connect(owner)`
$DIR/test/revert.spec.ts:3956:26-3962:12: `
          .matchAdvancedOrders(
            [order, order2],
            [],
            fulfillments,
            ethers.constants.AddressZero
          )`
$DIR/test/revert.spec.ts:3971:7-3971:76: `await testERC20Two.mint(seller.address, ethers.constants.MaxUint256);`
$DIR/test/revert.spec.ts:3971:25-3971:75: `.mint(seller.address, ethers.constants.MaxUint256)`
$DIR/test/revert.spec.ts:3973:7-3975:76: `await testERC20Two
        .connect(seller)
        .approve(marketplaceContract.address, ethers.constants.MaxUint256);`
$DIR/test/revert.spec.ts:3973:25-3974:25: `
        .connect(seller)`
$DIR/test/revert.spec.ts:3974:25-3975:75: `
        .approve(marketplaceContract.address, ethers.constants.MaxUint256)`
$DIR/test/revert.spec.ts:4034:28-4035:26: `
          .connect(owner)`
$DIR/test/revert.spec.ts:4035:26-4041:12: `
          .matchAdvancedOrders(
            [order, order2],
            [],
            fulfillments,
            ethers.constants.AddressZero
          )`
$DIR/test/revert.spec.ts:4046:28-4047:26: `
          .connect(owner)`
$DIR/test/revert.spec.ts:4047:26-4053:12: `
          .matchAdvancedOrders(
            [order, order2],
            [],
            [toFulfillment([[3, 0]], [[0, 0]])],
            ethers.constants.AddressZero
          )`
$DIR/test/revert.spec.ts:4065:7-4065:76: `await testERC20Two.mint(seller.address, ethers.constants.MaxUint256);`
$DIR/test/revert.spec.ts:4065:25-4065:75: `.mint(seller.address, ethers.constants.MaxUint256)`
$DIR/test/revert.spec.ts:4067:7-4069:76: `await testERC20Two
        .connect(seller)
        .approve(marketplaceContract.address, ethers.constants.MaxUint256);`
$DIR/test/revert.spec.ts:4067:25-4068:25: `
        .connect(seller)`
$DIR/test/revert.spec.ts:4068:25-4069:75: `
        .approve(marketplaceContract.address, ethers.constants.MaxUint256)`
$DIR/test/revert.spec.ts:4126:28-4127:26: `
          .connect(owner)`
$DIR/test/revert.spec.ts:4127:26-4133:12: `
          .matchAdvancedOrders(
            [order, order2],
            [],
            fulfillments,
            ethers.constants.AddressZero
          )`
$DIR/test/revert.spec.ts:4145:7-4145:75: `await testERC20Two.mint(buyer.address, ethers.constants.MaxUint256);`
$DIR/test/revert.spec.ts:4145:25-4145:74: `.mint(buyer.address, ethers.constants.MaxUint256)`
$DIR/test/revert.spec.ts:4147:7-4149:76: `await testERC20Two
        .connect(buyer)
        .approve(marketplaceContract.address, ethers.constants.MaxUint256);`
$DIR/test/revert.spec.ts:4147:25-4148:24: `
        .connect(buyer)`
$DIR/test/revert.spec.ts:4148:24-4149:75: `
        .approve(marketplaceContract.address, ethers.constants.MaxUint256)`
$DIR/test/revert.spec.ts:4208:28-4213:10: `.matchAdvancedOrders(
          [order, order2],
          [],
          fulfillments,
          ethers.constants.AddressZero
        )`
$DIR/test/revert.spec.ts:4223:7-4223:52: `await testERC721.mint(seller.address, nftId);`
$DIR/test/revert.spec.ts:4223:23-4223:51: `.mint(seller.address, nftId)`
$DIR/test/revert.spec.ts:4224:7-4224:58: `await testERC721.mint(seller.address, secondNFTId);`
$DIR/test/revert.spec.ts:4224:23-4224:57: `.mint(seller.address, secondNFTId)`
$DIR/test/revert.spec.ts:4225:7-4225:57: `await testERC721.mint(seller.address, thirdNFTId);`
$DIR/test/revert.spec.ts:4225:23-4225:56: `.mint(seller.address, thirdNFTId)`
$DIR/test/revert.spec.ts:4230:7-4230:77: `await set721ApprovalForAll(seller, marketplaceContract.address, true);`
$DIR/test/revert.spec.ts:4256:28-4257:26: `
          .connect(buyer)`
$DIR/test/revert.spec.ts:4257:26-4266:12: `
          .fulfillAdvancedOrder(
            order,
            criteriaResolvers,
            toKey(0),
            ethers.constants.AddressZero,
            {
              value,
            }
          )`
$DIR/test/revert.spec.ts:4269:7-4269:47: `criteriaResolvers[0].criteriaProof = [];`
$DIR/test/revert.spec.ts:4272:39-4273:26: `
          .connect(buyer)`
$DIR/test/revert.spec.ts:4273:26-4282:12: `
          .fulfillAdvancedOrder(
            order,
            criteriaResolvers,
            toKey(0),
            ethers.constants.AddressZero,
            {
              value,
            }
          )`
$DIR/test/revert.spec.ts:4283:41-4283:48: `.wait()`
$DIR/test/revert.spec.ts:4309:7-4309:52: `await testERC721.mint(seller.address, nftId);`
$DIR/test/revert.spec.ts:4309:23-4309:51: `.mint(seller.address, nftId)`
$DIR/test/revert.spec.ts:4310:7-4310:58: `await testERC721.mint(seller.address, secondNFTId);`
$DIR/test/revert.spec.ts:4310:23-4310:57: `.mint(seller.address, secondNFTId)`
$DIR/test/revert.spec.ts:4311:7-4311:57: `await testERC721.mint(seller.address, thirdNFTId);`
$DIR/test/revert.spec.ts:4311:23-4311:56: `.mint(seller.address, thirdNFTId)`
$DIR/test/revert.spec.ts:4316:7-4316:77: `await set721ApprovalForAll(seller, marketplaceContract.address, true);`
$DIR/test/revert.spec.ts:4370:8-4370:37: `.map(toFulfillmentComponents)`
$DIR/test/revert.spec.ts:4373:28-4374:26: `
          .connect(buyer)`
$DIR/test/revert.spec.ts:4374:26-4386:12: `
          .fulfillAvailableAdvancedOrders(
            [orderOne, orderTwo],
            criteriaResolvers,
            offerComponents,
            considerationComponents,
            toKey(0),
            ethers.constants.AddressZero,
            100,
            {
              value: value.mul(2),
            }
          )`
$DIR/test/revert.spec.ts:4384:27-4384:34: `.mul(2)`
$DIR/test/revert.spec.ts:4396:7-4396:52: `await testERC721.mint(seller.address, nftId);`
$DIR/test/revert.spec.ts:4396:23-4396:51: `.mint(seller.address, nftId)`
$DIR/test/revert.spec.ts:4397:7-4397:58: `await testERC721.mint(seller.address, secondNFTId);`
$DIR/test/revert.spec.ts:4397:23-4397:57: `.mint(seller.address, secondNFTId)`
$DIR/test/revert.spec.ts:4398:7-4398:57: `await testERC721.mint(seller.address, thirdNFTId);`
$DIR/test/revert.spec.ts:4398:23-4398:56: `.mint(seller.address, thirdNFTId)`
$DIR/test/revert.spec.ts:4403:7-4403:77: `await set721ApprovalForAll(seller, marketplaceContract.address, true);`
$DIR/test/revert.spec.ts:4428:7-4428:80: `criteriaResolvers[0].identifier = criteriaResolvers[0].identifier.add(1);`
$DIR/test/revert.spec.ts:4428:61-4428:79: `.identifier.add(1)`
$DIR/test/revert.spec.ts:4431:28-4432:26: `
          .connect(buyer)`
$DIR/test/revert.spec.ts:4432:26-4441:12: `
          .fulfillAdvancedOrder(
            order,
            criteriaResolvers,
            toKey(0),
            ethers.constants.AddressZero,
            {
              value,
            }
          )`
$DIR/test/revert.spec.ts:4444:7-4444:80: `criteriaResolvers[0].identifier = criteriaResolvers[0].identifier.sub(1);`
$DIR/test/revert.spec.ts:4444:61-4444:79: `.identifier.sub(1)`
$DIR/test/revert.spec.ts:4447:39-4448:26: `
          .connect(buyer)`
$DIR/test/revert.spec.ts:4448:26-4457:12: `
          .fulfillAdvancedOrder(
            order,
            criteriaResolvers,
            toKey(0),
            ethers.constants.AddressZero,
            {
              value,
            }
          )`
$DIR/test/revert.spec.ts:4458:41-4458:48: `.wait()`
$DIR/test/revert.spec.ts:4503:28-4503:43: `.connect(buyer)`
$DIR/test/revert.spec.ts:4503:43-4505:11: `.fulfillOrder(order, toKey(0), {
          value,
        })`
$DIR/test/revert.spec.ts:4544:28-4545:26: `
          .connect(buyer)`
$DIR/test/revert.spec.ts:4545:26-4548:13: `
          .fulfillBasicOrder(basicOrderParameters, {
            value,
          })`
$DIR/test/revert.spec.ts:4583:28-4583:43: `.connect(buyer)`
$DIR/test/revert.spec.ts:4583:43-4585:11: `.fulfillOrder(order, toKey(0), {
          value,
        })`
$DIR/test/revert.spec.ts:4622:28-4622:43: `.connect(buyer)`
$DIR/test/revert.spec.ts:4622:43-4624:11: `.fulfillOrder(order, toKey(0), {
          value,
        })`
$DIR/test/revert.spec.ts:4655:28-4655:43: `.connect(buyer)`
$DIR/test/revert.spec.ts:4655:43-4657:11: `.fulfillOrder(order, toKey(0), {
          value,
        })`
$DIR/test/revert.spec.ts:4693:28-4694:26: `
          .connect(buyer)`
$DIR/test/revert.spec.ts:4694:26-4697:13: `
          .fulfillBasicOrder(basicOrderParameters, {
            value,
          })`
$DIR/test/revert.spec.ts:4733:28-4734:26: `
          .connect(buyer)`
$DIR/test/revert.spec.ts:4734:26-4737:13: `
          .fulfillBasicOrder(basicOrderParameters, {
            value,
          })`
$DIR/test/revert.spec.ts:4770:28-4771:26: `
          .connect(owner)`
$DIR/test/revert.spec.ts:4771:26-4774:13: `
          .matchOrders([order, mirrorOrder], defaultBuyNowMirrorFulfillment, {
            value,
          })`
$DIR/test/revert.spec.ts:4807:28-4808:26: `
          .connect(owner)`
$DIR/test/revert.spec.ts:4808:26-4811:13: `
          .matchOrders([order, mirrorOrder], defaultBuyNowMirrorFulfillment, {
            value,
          })`
$DIR/test/revert.spec.ts:4848:28-4849:26: `
          .connect(buyer)`
$DIR/test/revert.spec.ts:4849:26-4852:13: `
          .fulfillBasicOrder(basicOrderParameters, {
            value: toBN(0),
          })`
$DIR/test/revert.spec.ts:4856:39-4857:26: `
          .connect(buyer)`
$DIR/test/revert.spec.ts:4857:26-4860:13: `
          .fulfillBasicOrder(basicOrderParameters, {
            value,
          })`
$DIR/test/revert.spec.ts:4861:41-4861:48: `.wait()`
$DIR/test/revert.spec.ts:4902:28-4903:26: `
          .connect(buyer)`
$DIR/test/revert.spec.ts:4903:26-4906:13: `
          .fulfillBasicOrder(basicOrderParameters, {
            value: toBN(1),
          })`
$DIR/test/revert.spec.ts:4913:28-4914:26: `
          .connect(buyer)`
$DIR/test/revert.spec.ts:4914:26-4917:13: `
          .fulfillBasicOrder(basicOrderParameters, {
            value: value.sub(1),
          })`
$DIR/test/revert.spec.ts:4916:25-4916:32: `.sub(1)`
$DIR/test/revert.spec.ts:4924:39-4925:26: `
          .connect(buyer)`
$DIR/test/revert.spec.ts:4925:26-4928:13: `
          .fulfillBasicOrder(basicOrderParameters, {
            value,
          })`
$DIR/test/revert.spec.ts:4929:41-4929:48: `.wait()`
$DIR/test/revert.spec.ts:4974:28-4975:26: `
          .connect(buyer)`
$DIR/test/revert.spec.ts:4975:26-4978:13: `
          .matchOrders([order, mirrorOrder], fulfillments, {
            value: toBN(1),
          })`
$DIR/test/revert.spec.ts:4985:28-4986:26: `
          .connect(buyer)`
$DIR/test/revert.spec.ts:4986:26-4989:13: `
          .matchOrders([order, mirrorOrder], fulfillments, {
            value: parseEther("9.999999"),
          })`
$DIR/test/revert.spec.ts:4995:7-4999:12: `await marketplaceContract
        .connect(buyer)
        .matchOrders([order, mirrorOrder], fulfillments, {
          value: parseEther("13"),
        });`
$DIR/test/revert.spec.ts:4995:32-4996:24: `
        .connect(buyer)`
$DIR/test/revert.spec.ts:4996:24-4999:11: `
        .matchOrders([order, mirrorOrder], fulfillments, {
          value: parseEther("13"),
        })`
$DIR/test/revert.spec.ts:5009:51-5009:59: `.mul(10)`
$DIR/test/revert.spec.ts:5009:67-5009:75: `.mul(10)`
$DIR/test/revert.spec.ts:5012:26-5012:36: `.mul(1000)`
$DIR/test/revert.spec.ts:5012:44-5012:54: `.mul(1000)`
$DIR/test/revert.spec.ts:5013:26-5013:34: `.mul(10)`
$DIR/test/revert.spec.ts:5013:42-5013:50: `.mul(10)`
$DIR/test/revert.spec.ts:5014:26-5014:34: `.mul(20)`
$DIR/test/revert.spec.ts:5014:42-5014:50: `.mul(20)`
$DIR/test/revert.spec.ts:5025:50-5025:76: `.getOrderStatus(orderHash)`
$DIR/test/revert.spec.ts:5032:28-5033:26: `
          .connect(buyer)`
$DIR/test/revert.spec.ts:5033:26-5042:12: `
          .fulfillAdvancedOrder(
            order,
            [],
            toKey(0),
            ethers.constants.AddressZero,
            {
              value: toBN(1),
            }
          )`
$DIR/test/revert.spec.ts:5048:7-5048:73: `orderStatus = await marketplaceContract.getOrderStatus(orderHash);`
$DIR/test/revert.spec.ts:5048:46-5048:72: `.getOrderStatus(orderHash)`
$DIR/test/revert.spec.ts:5055:28-5056:26: `
          .connect(buyer)`
$DIR/test/revert.spec.ts:5056:26-5065:12: `
          .fulfillAdvancedOrder(
            order,
            [],
            toKey(0),
            ethers.constants.AddressZero,
            {
              value: value.sub(1),
            }
          )`
$DIR/test/revert.spec.ts:5063:27-5063:34: `.sub(1)`
$DIR/test/revert.spec.ts:5071:7-5071:73: `orderStatus = await marketplaceContract.getOrderStatus(orderHash);`
$DIR/test/revert.spec.ts:5071:46-5071:72: `.getOrderStatus(orderHash)`
$DIR/test/revert.spec.ts:5079:39-5080:26: `
          .connect(buyer)`
$DIR/test/revert.spec.ts:5080:26-5089:12: `
          .fulfillAdvancedOrder(
            order,
            [],
            toKey(0),
            ethers.constants.AddressZero,
            {
              value: value.add(1),
            }
          )`
$DIR/test/revert.spec.ts:5087:27-5087:34: `.add(1)`
$DIR/test/revert.spec.ts:5090:41-5090:48: `.wait()`
$DIR/test/revert.spec.ts:5109:7-5109:73: `orderStatus = await marketplaceContract.getOrderStatus(orderHash);`
$DIR/test/revert.spec.ts:5109:46-5109:72: `.getOrderStatus(orderHash)`
$DIR/test/revert.spec.ts:5157:28-5158:26: `
          .connect(owner)`
$DIR/test/revert.spec.ts:5158:26-5161:13: `
          .matchOrders([order, mirrorOrder], fulfillments, {
            value: toBN(1),
          })`
$DIR/test/revert.spec.ts:5168:28-5169:26: `
          .connect(owner)`
$DIR/test/revert.spec.ts:5169:26-5172:13: `
          .matchOrders([order, mirrorOrder], fulfillments, {
            value: value.sub(1),
          })`
$DIR/test/revert.spec.ts:5171:25-5171:32: `.sub(1)`
$DIR/test/revert.spec.ts:5178:37-5179:24: `
        .connect(owner)`
$DIR/test/revert.spec.ts:5179:24-5182:11: `
        .matchOrders([order, mirrorOrder], fulfillments, {
          value,
        })`
$DIR/test/revert.spec.ts:5183:39-5183:46: `.wait()`
$DIR/test/revert.spec.ts:5232:28-5233:26: `
          .connect(buyer)`
$DIR/test/revert.spec.ts:5233:26-5236:13: `
          .fulfillBasicOrder(basicOrderParameters, {
            value: 1,
          })`
$DIR/test/revert.spec.ts:5330:7-5330:56: `await testERC20.mint(buyer.address, tokenAmount);`
$DIR/test/revert.spec.ts:5330:22-5330:55: `.mint(buyer.address, tokenAmount)`
$DIR/test/revert.spec.ts:5333:7-5333:77: `await set721ApprovalForAll(seller, marketplaceContract.address, true);`
$DIR/test/revert.spec.ts:5338:18-5339:26: `
          .connect(buyer)`
$DIR/test/revert.spec.ts:5339:26-5340:61: `
          .approve(marketplaceContract.address, tokenAmount)`
$DIR/test/revert.spec.ts:5367:28-5368:26: `
          .connect(buyer)`
$DIR/test/revert.spec.ts:5368:26-5371:13: `
          .fulfillBasicOrder(basicOrderParameters, {
            value: parseEther("12"),
          })`
$DIR/test/revert.spec.ts:5389:7-5389:56: `await testERC20.mint(buyer.address, tokenAmount);`
$DIR/test/revert.spec.ts:5389:22-5389:55: `.mint(buyer.address, tokenAmount)`
$DIR/test/revert.spec.ts:5391:51-5391:59: `.mul(10)`
$DIR/test/revert.spec.ts:5391:67-5391:75: `.mul(10)`
$DIR/test/revert.spec.ts:5394:29-5394:39: `.mul(1000)`
$DIR/test/revert.spec.ts:5394:47-5394:57: `.mul(1000)`
$DIR/test/revert.spec.ts:5395:29-5395:37: `.mul(10)`
$DIR/test/revert.spec.ts:5395:45-5395:53: `.mul(10)`
$DIR/test/revert.spec.ts:5396:29-5396:37: `.mul(20)`
$DIR/test/revert.spec.ts:5396:45-5396:53: `.mul(20)`
$DIR/test/revert.spec.ts:5408:28-5409:26: `
          .connect(buyer)`
$DIR/test/revert.spec.ts:5409:26-5418:12: `
          .fulfillAdvancedOrder(
            order,
            [],
            toKey(0),
            ethers.constants.AddressZero,
            {
              value,
            }
          )`
$DIR/test/revert.spec.ts:5421:50-5421:76: `.getOrderStatus(orderHash)`
$DIR/test/revert.spec.ts:5429:18-5430:26: `
          .connect(buyer)`
$DIR/test/revert.spec.ts:5430:26-5431:61: `
          .approve(marketplaceContract.address, tokenAmount)`
$DIR/test/revert.spec.ts:5437:39-5438:26: `
          .connect(buyer)`
$DIR/test/revert.spec.ts:5438:26-5447:12: `
          .fulfillAdvancedOrder(
            order,
            [],
            toKey(0),
            ethers.constants.AddressZero,
            {
              value,
            }
          )`
$DIR/test/revert.spec.ts:5448:41-5448:48: `.wait()`
$DIR/test/revert.spec.ts:5467:7-5467:73: `orderStatus = await marketplaceContract.getOrderStatus(orderHash);`
$DIR/test/revert.spec.ts:5467:46-5467:72: `.getOrderStatus(orderHash)`
$DIR/test/revert.spec.ts:5476:51-5476:59: `.mul(10)`
$DIR/test/revert.spec.ts:5476:67-5476:75: `.mul(10)`
$DIR/test/revert.spec.ts:5491:28-5492:26: `
          .connect(buyer)`
$DIR/test/revert.spec.ts:5492:26-5501:12: `
          .fulfillAdvancedOrder(
            order,
            [],
            toKey(0),
            ethers.constants.AddressZero,
            {
              value,
            }
          )`
$DIR/test/revert.spec.ts:5508:51-5508:59: `.mul(10)`
$DIR/test/revert.spec.ts:5508:67-5508:75: `.mul(10)`
$DIR/test/revert.spec.ts:5528:28-5529:26: `
          .connect(buyer)`
$DIR/test/revert.spec.ts:5529:26-5538:12: `
          .fulfillAdvancedOrder(
            order,
            [],
            toKey(0),
            ethers.constants.AddressZero,
            {
              value,
            }
          )`
$DIR/test/revert.spec.ts:5546:23-5546:71: `.getContractFactory("ExcessReturnDataRecipient")`
$DIR/test/revert.spec.ts:5547:10-5547:19: `.deploy()`
$DIR/test/revert.spec.ts:5552:11-5552:61: `await testERC20.mint(seller.address, tokenAmount);`
$DIR/test/revert.spec.ts:5552:26-5552:60: `.mint(seller.address, tokenAmount)`
$DIR/test/revert.spec.ts:5556:22-5556:38: `.connect(seller)`
$DIR/test/revert.spec.ts:5556:38-5556:79: `.approve(conduitOne.address, tokenAmount)`
$DIR/test/revert.spec.ts:5564:11-5564:75: `await testERC1155.mint(buyer.address, nftId, amount.mul(10000));`
$DIR/test/revert.spec.ts:5564:28-5564:74: `.mint(buyer.address, nftId, amount.mul(10000))`
$DIR/test/revert.spec.ts:5564:62-5564:73: `.mul(10000)`
$DIR/test/revert.spec.ts:5568:24-5569:30: `
              .connect(buyer)`
$DIR/test/revert.spec.ts:5569:30-5570:59: `
              .setApprovalForAll(conduitOne.address, true)`
$DIR/test/revert.spec.ts:5580:21-5580:29: `.mul(10)`
$DIR/test/revert.spec.ts:5581:21-5581:29: `.mul(10)`
$DIR/test/revert.spec.ts:5607:50-5608:26: `
          .connect(buyer)`
$DIR/test/revert.spec.ts:5608:26-5617:12: `
          .estimateGas.fulfillAdvancedOrder(
            initialOrder,
            [],
            conduitKeyOne,
            ethers.constants.AddressZero,
            {
              value,
            }
          )`
$DIR/test/revert.spec.ts:5621:9-5621:46: `await recipient.setRevertDataSize(1);`
$DIR/test/revert.spec.ts:5621:24-5621:45: `.setRevertDataSize(1)`
$DIR/test/revert.spec.ts:5623:30-5624:28: `
            .connect(buyer)`
$DIR/test/revert.spec.ts:5624:28-5634:14: `
            .fulfillAdvancedOrder(
              order,
              [],
              conduitKeyOne,
              ethers.constants.AddressZero,
              {
                value,
                gasLimit: baseGas.add(74000),
              }
            )`
$DIR/test/revert.spec.ts:5632:34-5632:45: `.add(74000)`
$DIR/test/revert.spec.ts:5652:7-5652:56: `await testERC20.mint(buyer.address, tokenAmount);`
$DIR/test/revert.spec.ts:5652:22-5652:55: `.mint(buyer.address, tokenAmount)`
$DIR/test/revert.spec.ts:5657:18-5658:26: `
          .connect(buyer)`
$DIR/test/revert.spec.ts:5658:26-5659:61: `
          .approve(marketplaceContract.address, tokenAmount)`
$DIR/test/revert.spec.ts:5667:29-5667:39: `.mul(1000)`
$DIR/test/revert.spec.ts:5667:47-5667:57: `.mul(1000)`
$DIR/test/revert.spec.ts:5668:29-5668:37: `.mul(10)`
$DIR/test/revert.spec.ts:5668:45-5668:53: `.mul(10)`
$DIR/test/revert.spec.ts:5669:29-5669:37: `.mul(20)`
$DIR/test/revert.spec.ts:5669:45-5669:53: `.mul(20)`
$DIR/test/revert.spec.ts:5681:28-5682:26: `
          .connect(buyer)`
$DIR/test/revert.spec.ts:5682:26-5691:12: `
          .fulfillAdvancedOrder(
            order,
            [],
            toKey(0),
            ethers.constants.AddressZero,
            {
              value,
            }
          )`
$DIR/test/revert.spec.ts:5703:7-5703:49: `await testERC20.mint(buyer.address, 1000);`
$DIR/test/revert.spec.ts:5703:22-5703:48: `.mint(buyer.address, 1000)`
$DIR/test/revert.spec.ts:5708:18-5708:33: `.connect(buyer)`
$DIR/test/revert.spec.ts:5708:33-5708:76: `.approve(marketplaceContract.address, 1000)`
$DIR/test/revert.spec.ts:5716:29-5716:38: `.mul(100)`
$DIR/test/revert.spec.ts:5716:46-5716:55: `.mul(100)`
$DIR/test/revert.spec.ts:5717:29-5717:37: `.mul(10)`
$DIR/test/revert.spec.ts:5717:45-5717:53: `.mul(10)`
$DIR/test/revert.spec.ts:5718:29-5718:37: `.mul(20)`
$DIR/test/revert.spec.ts:5718:45-5718:53: `.mul(20)`
$DIR/test/revert.spec.ts:5757:8-5757:37: `.map(toFulfillmentComponents)`
$DIR/test/revert.spec.ts:5760:28-5761:26: `
          .connect(buyer)`
$DIR/test/revert.spec.ts:5761:26-5768:12: `
          .fulfillAvailableOrders(
            [orderOne, orderTwo],
            offerComponents,
            considerationComponents,
            toKey(0),
            100
          )`
$DIR/test/revert.spec.ts:5781:7-5781:56: `await testERC20.mint(buyer.address, tokenAmount);`
$DIR/test/revert.spec.ts:5781:22-5781:55: `.mint(buyer.address, tokenAmount)`
$DIR/test/revert.spec.ts:5786:18-5787:26: `
          .connect(buyer)`
$DIR/test/revert.spec.ts:5787:26-5788:61: `
          .approve(marketplaceContract.address, tokenAmount)`
$DIR/test/revert.spec.ts:5793:51-5793:59: `.mul(10)`
$DIR/test/revert.spec.ts:5793:67-5793:75: `.mul(10)`
$DIR/test/revert.spec.ts:5796:29-5796:39: `.mul(1000)`
$DIR/test/revert.spec.ts:5796:47-5796:57: `.mul(1000)`
$DIR/test/revert.spec.ts:5797:29-5797:37: `.mul(10)`
$DIR/test/revert.spec.ts:5797:45-5797:53: `.mul(10)`
$DIR/test/revert.spec.ts:5798:29-5798:37: `.mul(20)`
$DIR/test/revert.spec.ts:5798:45-5798:53: `.mul(20)`
$DIR/test/revert.spec.ts:5810:7-5810:43: `await testERC20.blockTransfer(true);`
$DIR/test/revert.spec.ts:5810:22-5810:42: `.blockTransfer(true)`
$DIR/test/revert.spec.ts:5812:29-5812:39: `.blocked()`
$DIR/test/revert.spec.ts:5815:28-5816:26: `
          .connect(buyer)`
$DIR/test/revert.spec.ts:5816:26-5825:12: `
          .fulfillAdvancedOrder(
            order,
            [],
            toKey(0),
            ethers.constants.AddressZero,
            {
              value,
            }
          )`
$DIR/test/revert.spec.ts:5828:50-5828:76: `.getOrderStatus(orderHash)`
$DIR/test/revert.spec.ts:5834:7-5834:44: `await testERC20.blockTransfer(false);`
$DIR/test/revert.spec.ts:5834:22-5834:43: `.blockTransfer(false)`
$DIR/test/revert.spec.ts:5836:29-5836:39: `.blocked()`
$DIR/test/revert.spec.ts:5839:39-5840:26: `
          .connect(buyer)`
$DIR/test/revert.spec.ts:5840:26-5849:12: `
          .fulfillAdvancedOrder(
            order,
            [],
            toKey(0),
            ethers.constants.AddressZero,
            {
              value,
            }
          )`
$DIR/test/revert.spec.ts:5850:41-5850:48: `.wait()`
$DIR/test/revert.spec.ts:5869:7-5869:73: `orderStatus = await marketplaceContract.getOrderStatus(orderHash);`
$DIR/test/revert.spec.ts:5869:46-5869:72: `.getOrderStatus(orderHash)`
$DIR/test/revert.spec.ts:5885:7-5885:56: `await testERC20.mint(buyer.address, tokenAmount);`
$DIR/test/revert.spec.ts:5885:22-5885:55: `.mint(buyer.address, tokenAmount)`
$DIR/test/revert.spec.ts:5890:18-5891:26: `
          .connect(buyer)`
$DIR/test/revert.spec.ts:5891:26-5892:61: `
          .approve(marketplaceContract.address, tokenAmount)`
$DIR/test/revert.spec.ts:5897:51-5897:59: `.mul(10)`
$DIR/test/revert.spec.ts:5897:67-5897:75: `.mul(10)`
$DIR/test/revert.spec.ts:5900:29-5900:39: `.mul(1000)`
$DIR/test/revert.spec.ts:5900:47-5900:57: `.mul(1000)`
$DIR/test/revert.spec.ts:5901:29-5901:37: `.mul(10)`
$DIR/test/revert.spec.ts:5901:45-5901:53: `.mul(10)`
$DIR/test/revert.spec.ts:5902:29-5902:37: `.mul(20)`
$DIR/test/revert.spec.ts:5902:45-5902:53: `.mul(20)`
$DIR/test/revert.spec.ts:5913:7-5913:45: `await testERC20.setNoReturnData(true);`
$DIR/test/revert.spec.ts:5913:22-5913:44: `.setNoReturnData(true)`
$DIR/test/revert.spec.ts:5915:29-5915:44: `.noReturnData()`
$DIR/test/revert.spec.ts:5918:39-5919:26: `
          .connect(buyer)`
$DIR/test/revert.spec.ts:5919:26-5928:12: `
          .fulfillAdvancedOrder(
            order,
            [],
            toKey(0),
            ethers.constants.AddressZero,
            {
              value,
            }
          )`
$DIR/test/revert.spec.ts:5929:41-5929:48: `.wait()`
$DIR/test/revert.spec.ts:5948:52-5948:78: `.getOrderStatus(orderHash)`
$DIR/test/revert.spec.ts:5954:7-5954:46: `await testERC20.setNoReturnData(false);`
$DIR/test/revert.spec.ts:5954:22-5954:45: `.setNoReturnData(false)`
$DIR/test/revert.spec.ts:5956:29-5956:44: `.noReturnData()`
$DIR/test/revert.spec.ts:5964:7-5964:69: `await set1155ApprovalForAll(seller, conduitOne.address, true);`
$DIR/test/revert.spec.ts:5968:7-5968:56: `await testERC20.mint(buyer.address, tokenAmount);`
$DIR/test/revert.spec.ts:5968:22-5968:55: `.mint(buyer.address, tokenAmount)`
$DIR/test/revert.spec.ts:5973:18-5973:33: `.connect(buyer)`
$DIR/test/revert.spec.ts:5973:33-5973:74: `.approve(conduitOne.address, tokenAmount)`
$DIR/test/revert.spec.ts:5980:18-5980:34: `.connect(seller)`
$DIR/test/revert.spec.ts:5980:34-5980:75: `.approve(conduitOne.address, tokenAmount)`
$DIR/test/revert.spec.ts:5985:51-5985:59: `.mul(10)`
$DIR/test/revert.spec.ts:5985:67-5985:75: `.mul(10)`
$DIR/test/revert.spec.ts:5988:29-5988:39: `.mul(1000)`
$DIR/test/revert.spec.ts:5988:47-5988:57: `.mul(1000)`
$DIR/test/revert.spec.ts:5989:29-5989:37: `.mul(10)`
$DIR/test/revert.spec.ts:5989:45-5989:53: `.mul(10)`
$DIR/test/revert.spec.ts:5990:29-5990:37: `.mul(20)`
$DIR/test/revert.spec.ts:5990:45-5990:53: `.mul(20)`
$DIR/test/revert.spec.ts:6007:7-6007:43: `await testERC20.blockTransfer(true);`
$DIR/test/revert.spec.ts:6007:22-6007:42: `.blockTransfer(true)`
$DIR/test/revert.spec.ts:6010:47-6013:10: `.interface.encodeFunctionData(
          "fulfillAdvancedOrder",
          [order, [], conduitKeyOne, ethers.constants.AddressZero]
        )`
$DIR/test/revert.spec.ts:6015:35-6021:11: `.populateTransaction({
          from: buyer.address,
          to: marketplaceContract.address,
          value,
          data,
          gasLimit: 30_000_000,
        })`
$DIR/test/revert.spec.ts:6023:44-6023:57: `.call(fullTx)`
$DIR/test/revert.spec.ts:6025:49-6028:10: `.interface.encodeErrorResult(
          "BadReturnValueFromERC20OnTransfer",
          [testERC20.address, buyer.address, seller.address, amount.mul(1000)]
        )`
$DIR/test/revert.spec.ts:6027:68-6027:78: `.mul(1000)`
$DIR/test/revert.spec.ts:6035:47-6036:28: `
            .connect(buyer)`
$DIR/test/revert.spec.ts:6036:28-6045:14: `
            .fulfillAdvancedOrder(
              order,
              [],
              conduitKeyOne,
              ethers.constants.AddressZero,
              {
                value,
              }
            )`
$DIR/test/revert.spec.ts:6047:35-6047:42: `.wait()`
$DIR/test/revert.spec.ts:6048:11-6048:42: `success = receipt.status === 1;`
$DIR/test/revert.spec.ts:6054:30-6055:28: `
            .connect(buyer)`
$DIR/test/revert.spec.ts:6055:28-6064:14: `
            .fulfillAdvancedOrder(
              order,
              [],
              conduitKeyOne,
              ethers.constants.AddressZero,
              {
                value,
              }
            )`
$DIR/test/revert.spec.ts:6068:50-6068:76: `.getOrderStatus(orderHash)`
$DIR/test/revert.spec.ts:6072:25-6072:48: `.totalFilled.toString()`
$DIR/test/revert.spec.ts:6073:25-6073:46: `.totalSize.toString()`
$DIR/test/revert.spec.ts:6075:7-6075:44: `await testERC20.blockTransfer(false);`
$DIR/test/revert.spec.ts:6075:22-6075:43: `.blockTransfer(false)`
$DIR/test/revert.spec.ts:6078:39-6079:26: `
          .connect(buyer)`
$DIR/test/revert.spec.ts:6079:26-6088:12: `
          .fulfillAdvancedOrder(
            order,
            [],
            conduitKeyOne,
            ethers.constants.AddressZero,
            {
              value,
            }
          )`
$DIR/test/revert.spec.ts:6089:41-6089:48: `.wait()`
$DIR/test/revert.spec.ts:6108:7-6108:73: `orderStatus = await marketplaceContract.getOrderStatus(orderHash);`
$DIR/test/revert.spec.ts:6108:46-6108:72: `.getOrderStatus(orderHash)`
$DIR/test/revert.spec.ts:6112:25-6112:48: `.totalFilled.toString()`
$DIR/test/revert.spec.ts:6113:25-6113:46: `.totalSize.toString()`
$DIR/test/revert.spec.ts:6121:7-6121:69: `await set1155ApprovalForAll(seller, conduitOne.address, true);`
$DIR/test/revert.spec.ts:6125:7-6125:56: `await testERC20.mint(buyer.address, tokenAmount);`
$DIR/test/revert.spec.ts:6125:22-6125:55: `.mint(buyer.address, tokenAmount)`
$DIR/test/revert.spec.ts:6129:18-6129:33: `.connect(buyer)`
$DIR/test/revert.spec.ts:6129:33-6129:74: `.approve(conduitOne.address, tokenAmount)`
$DIR/test/revert.spec.ts:6136:18-6136:34: `.connect(seller)`
$DIR/test/revert.spec.ts:6136:34-6136:75: `.approve(conduitOne.address, tokenAmount)`
$DIR/test/revert.spec.ts:6141:51-6141:59: `.mul(10)`
$DIR/test/revert.spec.ts:6141:67-6141:75: `.mul(10)`
$DIR/test/revert.spec.ts:6144:29-6144:39: `.mul(1000)`
$DIR/test/revert.spec.ts:6144:47-6144:57: `.mul(1000)`
$DIR/test/revert.spec.ts:6145:29-6145:37: `.mul(10)`
$DIR/test/revert.spec.ts:6145:45-6145:53: `.mul(10)`
$DIR/test/revert.spec.ts:6146:29-6146:37: `.mul(20)`
$DIR/test/revert.spec.ts:6146:45-6146:53: `.mul(20)`
$DIR/test/revert.spec.ts:6162:28-6162:60: `.constants.HashZero.slice(0, -1)`
$DIR/test/revert.spec.ts:6165:28-6166:26: `
          .connect(buyer)`
$DIR/test/revert.spec.ts:6166:26-6175:12: `
          .fulfillAdvancedOrder(
            order,
            [],
            badKey,
            ethers.constants.AddressZero,
            {
              value,
            }
          )`
$DIR/test/revert.spec.ts:6178:50-6178:76: `.getOrderStatus(orderHash)`
$DIR/test/revert.spec.ts:6182:25-6182:48: `.totalFilled.toString()`
$DIR/test/revert.spec.ts:6183:25-6183:46: `.totalSize.toString()`
$DIR/test/revert.spec.ts:6186:39-6187:26: `
          .connect(buyer)`
$DIR/test/revert.spec.ts:6187:26-6196:12: `
          .fulfillAdvancedOrder(
            order,
            [],
            conduitKeyOne,
            ethers.constants.AddressZero,
            {
              value,
            }
          )`
$DIR/test/revert.spec.ts:6197:41-6197:48: `.wait()`
$DIR/test/revert.spec.ts:6215:7-6215:73: `orderStatus = await marketplaceContract.getOrderStatus(orderHash);`
$DIR/test/revert.spec.ts:6215:46-6215:72: `.getOrderStatus(orderHash)`
$DIR/test/revert.spec.ts:6219:25-6219:48: `.totalFilled.toString()`
$DIR/test/revert.spec.ts:6220:25-6220:46: `.totalSize.toString()`
$DIR/test/revert.spec.ts:6259:8-6261:8: `.map(([offerArr, considerationArr]) =>
        toFulfillment(offerArr, considerationArr)
      )`
$DIR/test/revert.spec.ts:6264:28-6265:26: `
          .connect(owner)`
$DIR/test/revert.spec.ts:6265:26-6268:13: `
          .matchOrders([order, mirrorOrder], fulfillments, {
            value,
          })`
$DIR/test/revert.spec.ts:6311:8-6313:8: `.map(([offerArr, considerationArr]) =>
        toFulfillment(offerArr, considerationArr)
      )`
$DIR/test/revert.spec.ts:6316:28-6317:26: `
          .connect(owner)`
$DIR/test/revert.spec.ts:6317:26-6320:13: `
          .matchOrders([order, mirrorOrder], fulfillments, {
            value,
          })`
$DIR/test/revert.spec.ts:6323:52-6323:78: `.getOrderStatus(orderHash)`
$DIR/test/revert.spec.ts:6331:7-6331:78: `await set1155ApprovalForAll(seller, marketplaceContract.address, true);`
$DIR/test/revert.spec.ts:6343:37-6344:24: `
        .connect(owner)`
$DIR/test/revert.spec.ts:6344:24-6347:11: `
        .matchOrders([order, mirrorOrder], fulfillments, {
          value,
        })`
$DIR/test/revert.spec.ts:6348:39-6348:46: `.wait()`
$DIR/test/revert.spec.ts:6395:28-6396:26: `
          .connect(buyer)`
$DIR/test/revert.spec.ts:6396:26-6405:12: `
          .fulfillAdvancedOrder(
            order,
            [],
            toKey(0),
            ethers.constants.AddressZero,
            {
              value,
            }
          )`
$DIR/test/revert.spec.ts:6425:28-6426:26: `
          .connect(buyer)`
$DIR/test/revert.spec.ts:6426:26-6433:12: `
          .fulfillAdvancedOrder(
            order,
            [],
            toKey(0),
            ethers.constants.AddressZero,
            { value }
          )`
$DIR/test/revert.spec.ts:6458:28-6459:26: `
          .connect(buyer)`
$DIR/test/revert.spec.ts:6459:26-6468:12: `
          .fulfillAdvancedOrder(
            order,
            [],
            toKey(0),
            ethers.constants.AddressZero,
            {
              value,
            }
          )`
$DIR/test/revert.spec.ts:6498:28-6499:26: `
          .connect(buyer)`
$DIR/test/revert.spec.ts:6499:26-6508:12: `
          .fulfillAdvancedOrder(
            order,
            [],
            toKey(0),
            ethers.constants.AddressZero,
            {
              value,
            }
          )`
$DIR/test/revert.spec.ts:6540:28-6541:26: `
          .connect(buyer)`
$DIR/test/revert.spec.ts:6541:26-6550:12: `
          .fulfillAdvancedOrder(
            order,
            [],
            toKey(0),
            ethers.constants.AddressZero,
            {
              value,
            }
          )`
$DIR/test/revert.spec.ts:6591:28-6592:26: `
          .connect(buyer)`
$DIR/test/revert.spec.ts:6592:26-6601:12: `
          .fulfillAdvancedOrder(
            order,
            [],
            conduitKeyOne,
            ethers.constants.AddressZero,
            {
              value,
            }
          )`
$DIR/test/revert.spec.ts:6636:30-6637:28: `
            .connect(buyer)`
$DIR/test/revert.spec.ts:6637:28-6646:14: `
            .fulfillAdvancedOrder(
              order,
              [],
              toKey(0),
              ethers.constants.AddressZero,
              {
                value,
              }
            )`
$DIR/test/revert.spec.ts:6661:30-6662:28: `
            .connect(buyer)`
$DIR/test/revert.spec.ts:6662:28-6671:14: `
            .fulfillAdvancedOrder(
              order,
              [],
              toKey(0),
              ethers.constants.AddressZero,
              {
                value,
              }
            )`
$DIR/test/revert.spec.ts:6721:8-6723:8: `.map(([offerArr, considerationArr]) =>
        toFulfillment(offerArr, considerationArr)
      )`
$DIR/test/revert.spec.ts:6726:28-6727:26: `
          .connect(owner)`
$DIR/test/revert.spec.ts:6727:26-6730:13: `
          .matchOrders([order, mirrorOrder], fulfillments, {
            value,
          })`
$DIR/test/revert.spec.ts:6733:52-6733:78: `.getOrderStatus(orderHash)`
$DIR/test/revert.spec.ts:6785:8-6787:8: `.map(([offerArr, considerationArr]) =>
        toFulfillment(offerArr, considerationArr)
      )`
$DIR/test/revert.spec.ts:6790:28-6791:26: `
          .connect(owner)`
$DIR/test/revert.spec.ts:6791:26-6794:13: `
          .matchOrders([order, mirrorOrder], fulfillments, {
            value,
          })`
$DIR/test/revert.spec.ts:6797:52-6797:78: `.getOrderStatus(orderHash)`
$DIR/test/revert.spec.ts:6832:28-6833:26: `
          .connect(buyer)`
$DIR/test/revert.spec.ts:6833:26-6836:13: `
          .fulfillBasicOrder(basicOrderParameters, {
            value,
          })`
$DIR/test/revert.spec.ts:6884:28-6885:26: `
          .connect(buyer)`
$DIR/test/revert.spec.ts:6885:26-6888:13: `
          .fulfillBasicOrder(basicOrderParameters, {
            value,
          })`
$DIR/test/revert.spec.ts:6932:7-6932:37: `calldata = calldata as string;`
$DIR/test/revert.spec.ts:6933:32-6933:45: `.slice(0, 73)`
$DIR/test/revert.spec.ts:6933:60-6933:70: `.slice(74)`
$DIR/test/revert.spec.ts:6933:71-6933:80: `.join("")`
$DIR/test/revert.spec.ts:6937:14-6942:11: `.sendTransaction({
          to: marketplaceContract.address,
          data: badData,
          value,
          gasLimit: 100_000,
        })`
$DIR/test/revert.spec.ts:6950:7-6950:37: `calldata = calldata as string;`
$DIR/test/revert.spec.ts:6951:32-6951:47: `.slice(0, 1161)`
$DIR/test/revert.spec.ts:6951:62-6951:74: `.slice(1162)`
$DIR/test/revert.spec.ts:6951:75-6953:8: `.join(
        ""
      )`
$DIR/test/revert.spec.ts:6956:14-6961:11: `.sendTransaction({
          to: marketplaceContract.address,
          data: badData,
          value,
          gasLimit: 100_000,
        })`
$DIR/test/revert.spec.ts:6969:7-6969:37: `calldata = calldata as string;`
$DIR/test/revert.spec.ts:6970:32-6970:47: `.slice(0, 1161)`
$DIR/test/revert.spec.ts:6970:62-6970:74: `.slice(1162)`
$DIR/test/revert.spec.ts:6970:75-6972:8: `.join(
        ""
      )`
$DIR/test/revert.spec.ts:6975:14-6980:11: `.sendTransaction({
          to: marketplaceContract.address,
          data: badData,
          value,
          gasLimit: 100_000,
        })`
$DIR/test/revert.spec.ts:7012:43-7015:8: `.interface.encodeFunctionData(
        "fulfillOrder",
        [order, toKey(0)]
      )`
$DIR/test/revert.spec.ts:7016:33-7020:8: `.prepare(
        marketplaceContract.address,
        0,
        callData
      )`
$DIR/test/revert.spec.ts:7021:7-7021:23: `await tx.wait();`
$DIR/test/revert.spec.ts:7021:15-7021:22: `.wait()`
$DIR/test/revert.spec.ts:7025:30-7025:45: `.connect(buyer)`
$DIR/test/revert.spec.ts:7025:45-7027:13: `.fulfillOrder(order, toKey(0), {
            value,
          })`
$DIR/test/revert.spec.ts:7036:30-7036:45: `.connect(buyer)`
$DIR/test/revert.spec.ts:7036:45-7038:13: `.fulfillOrder(order, toKey(0), {
            value,
          })`
$DIR/test/revert.spec.ts:7075:43-7078:8: `.interface.encodeFunctionData(
        "fulfillBasicOrder",
        [basicOrderParameters]
      )`
$DIR/test/revert.spec.ts:7079:33-7083:8: `.prepare(
        marketplaceContract.address,
        value,
        callData
      )`
$DIR/test/revert.spec.ts:7084:7-7084:23: `await tx.wait();`
$DIR/test/revert.spec.ts:7084:15-7084:22: `.wait()`
$DIR/test/revert.spec.ts:7088:30-7089:28: `
            .connect(buyer)`
$DIR/test/revert.spec.ts:7089:28-7090:64: `
            .fulfillBasicOrder(basicOrderParameters, { value })`
$DIR/test/revert.spec.ts:7099:30-7100:28: `
            .connect(buyer)`
$DIR/test/revert.spec.ts:7100:28-7101:64: `
            .fulfillBasicOrder(basicOrderParameters, { value })`
$DIR/test/revert.spec.ts:7138:43-7141:8: `.interface.encodeFunctionData(
        "fulfillBasicOrder_efficient_6GL6yc",
        [basicOrderParameters]
      )`
$DIR/test/revert.spec.ts:7142:33-7146:8: `.prepare(
        marketplaceContract.address,
        value,
        callData
      )`
$DIR/test/revert.spec.ts:7147:7-7147:23: `await tx.wait();`
$DIR/test/revert.spec.ts:7147:15-7147:22: `.wait()`
$DIR/test/revert.spec.ts:7151:30-7152:28: `
            .connect(buyer)`
$DIR/test/revert.spec.ts:7152:28-7153:81: `
            .fulfillBasicOrder_efficient_6GL6yc(basicOrderParameters, { value })`
$DIR/test/revert.spec.ts:7162:30-7163:28: `
            .connect(buyer)`
$DIR/test/revert.spec.ts:7163:28-7164:81: `
            .fulfillBasicOrder_efficient_6GL6yc(basicOrderParameters, { value })`
$DIR/test/revert.spec.ts:7180:51-7180:59: `.mul(10)`
$DIR/test/revert.spec.ts:7180:67-7180:75: `.mul(10)`
$DIR/test/revert.spec.ts:7183:26-7183:36: `.mul(1000)`
$DIR/test/revert.spec.ts:7183:44-7183:54: `.mul(1000)`
$DIR/test/revert.spec.ts:7184:26-7184:34: `.mul(10)`
$DIR/test/revert.spec.ts:7184:42-7184:50: `.mul(10)`
$DIR/test/revert.spec.ts:7195:52-7195:78: `.getOrderStatus(orderHash)`
$DIR/test/revert.spec.ts:7201:7-7201:27: `order.numerator = 2;`
$DIR/test/revert.spec.ts:7202:7-7202:30: `order.denominator = 10;`
$DIR/test/revert.spec.ts:7204:43-7207:8: `.interface.encodeFunctionData(
        "fulfillAdvancedOrder",
        [order, [], toKey(0), ethers.constants.AddressZero]
      )`
$DIR/test/revert.spec.ts:7208:33-7212:8: `.prepare(
        marketplaceContract.address,
        value,
        callData
      )`
$DIR/test/revert.spec.ts:7213:7-7213:23: `await tx.wait();`
$DIR/test/revert.spec.ts:7213:15-7213:22: `.wait()`
$DIR/test/revert.spec.ts:7217:30-7218:28: `
            .connect(buyer)`
$DIR/test/revert.spec.ts:7218:28-7225:14: `
            .fulfillAdvancedOrder(
              order,
              [],
              toKey(0),
              ethers.constants.AddressZero,
              { value }
            )`
$DIR/test/revert.spec.ts:7234:30-7235:28: `
            .connect(buyer)`
$DIR/test/revert.spec.ts:7235:28-7242:14: `
            .fulfillAdvancedOrder(
              order,
              [],
              toKey(0),
              ethers.constants.AddressZero,
              { value }
            )`
$DIR/test/revert.spec.ts:7281:8-7281:37: `.map(toFulfillmentComponents)`
$DIR/test/revert.spec.ts:7283:43-7286:8: `.interface.encodeFunctionData(
        "fulfillAvailableOrders",
        [[order], offerComponents, considerationComponents, toKey(0), 100]
      )`
$DIR/test/revert.spec.ts:7287:33-7291:8: `.prepare(
        marketplaceContract.address,
        value,
        callData
      )`
$DIR/test/revert.spec.ts:7292:7-7292:23: `await tx.wait();`
$DIR/test/revert.spec.ts:7292:15-7292:22: `.wait()`
$DIR/test/revert.spec.ts:7296:30-7297:28: `
            .connect(buyer)`
$DIR/test/revert.spec.ts:7297:28-7305:14: `
            .fulfillAvailableOrders(
              [order],
              offerComponents,
              considerationComponents,
              toKey(0),
              100,
              { value }
            )`
$DIR/test/revert.spec.ts:7314:30-7315:28: `
            .connect(buyer)`
$DIR/test/revert.spec.ts:7315:28-7323:14: `
            .fulfillAvailableOrders(
              [order],
              offerComponents,
              considerationComponents,
              toKey(0),
              100,
              { value }
            )`
$DIR/test/revert.spec.ts:7363:43-7374:8: `.interface.encodeFunctionData(
        "fulfillAvailableAdvancedOrders",
        [
          [order],
          [],
          offerComponents,
          considerationComponents,
          toKey(0),
          ethers.constants.AddressZero,
          100,
        ]
      )`
$DIR/test/revert.spec.ts:7375:33-7379:8: `.prepare(
        marketplaceContract.address,
        value,
        callData
      )`
$DIR/test/revert.spec.ts:7380:7-7380:23: `await tx.wait();`
$DIR/test/revert.spec.ts:7380:15-7380:22: `.wait()`
$DIR/test/revert.spec.ts:7384:30-7385:28: `
            .connect(buyer)`
$DIR/test/revert.spec.ts:7385:28-7395:14: `
            .fulfillAvailableAdvancedOrders(
              [order],
              [],
              offerComponents,
              considerationComponents,
              toKey(0),
              ethers.constants.AddressZero,
              100,
              { value }
            )`
$DIR/test/revert.spec.ts:7404:30-7405:28: `
            .connect(buyer)`
$DIR/test/revert.spec.ts:7405:28-7415:14: `
            .fulfillAvailableAdvancedOrders(
              [order],
              [],
              offerComponents,
              considerationComponents,
              toKey(0),
              ethers.constants.AddressZero,
              100,
              { value }
            )`
$DIR/test/revert.spec.ts:7446:52-7446:78: `.getOrderStatus(orderHash)`
$DIR/test/revert.spec.ts:7456:43-7459:8: `.interface.encodeFunctionData(
        "matchOrders",
        [[order, mirrorOrder], fulfillments]
      )`
$DIR/test/revert.spec.ts:7460:33-7464:8: `.prepare(
        marketplaceContract.address,
        value,
        callData
      )`
$DIR/test/revert.spec.ts:7465:7-7465:23: `await tx.wait();`
$DIR/test/revert.spec.ts:7465:15-7465:22: `.wait()`
$DIR/test/revert.spec.ts:7469:30-7470:28: `
            .connect(buyer)`
$DIR/test/revert.spec.ts:7470:28-7473:15: `
            .matchOrders([order, mirrorOrder], fulfillments, {
              value,
            })`
$DIR/test/revert.spec.ts:7482:30-7483:28: `
            .connect(buyer)`
$DIR/test/revert.spec.ts:7483:28-7486:15: `
            .matchOrders([order, mirrorOrder], fulfillments, {
              value,
            })`
$DIR/test/revert.spec.ts:7502:51-7502:59: `.mul(10)`
$DIR/test/revert.spec.ts:7502:67-7502:75: `.mul(10)`
$DIR/test/revert.spec.ts:7505:26-7505:36: `.mul(1000)`
$DIR/test/revert.spec.ts:7505:44-7505:54: `.mul(1000)`
$DIR/test/revert.spec.ts:7506:26-7506:34: `.mul(10)`
$DIR/test/revert.spec.ts:7506:42-7506:50: `.mul(10)`
$DIR/test/revert.spec.ts:7507:26-7507:34: `.mul(20)`
$DIR/test/revert.spec.ts:7507:42-7507:50: `.mul(20)`
$DIR/test/revert.spec.ts:7518:52-7518:78: `.getOrderStatus(orderHash)`
$DIR/test/revert.spec.ts:7524:7-7524:27: `order.numerator = 2;`
$DIR/test/revert.spec.ts:7525:7-7525:30: `order.denominator = 10;`
$DIR/test/revert.spec.ts:7531:43-7539:8: `.interface.encodeFunctionData(
        "matchAdvancedOrders",
        [
          [order, mirrorObject.mirrorOrder],
          [],
          fulfillments,
          ethers.constants.AddressZero,
        ]
      )`
$DIR/test/revert.spec.ts:7540:33-7544:8: `.prepare(
        marketplaceContract.address,
        value,
        callData
      )`
$DIR/test/revert.spec.ts:7545:7-7545:23: `await tx.wait();`
$DIR/test/revert.spec.ts:7545:15-7545:22: `.wait()`
$DIR/test/revert.spec.ts:7549:30-7550:28: `
            .connect(buyer)`
$DIR/test/revert.spec.ts:7550:28-7559:14: `
            .matchAdvancedOrders(
              [order, mirrorObject.mirrorOrder],
              [],
              fulfillments,
              ethers.constants.AddressZero,
              {
                value,
              }
            )`
$DIR/test/revert.spec.ts:7568:30-7569:28: `
            .connect(buyer)`
$DIR/test/revert.spec.ts:7569:28-7578:14: `
            .matchAdvancedOrders(
              [order, mirrorObject.mirrorOrder],
              [],
              fulfillments,
              ethers.constants.AddressZero,
              {
                value,
              }
            )`
$DIR/test/revert.spec.ts:7610:52-7610:78: `.getOrderStatus(orderHash)`
$DIR/test/revert.spec.ts:7616:43-7619:8: `.interface.encodeFunctionData(
        "cancel",
        [[orderComponents]]
      )`
$DIR/test/revert.spec.ts:7621:33-7625:8: `.prepare(
        marketplaceContract.address,
        0,
        callData
      )`
$DIR/test/revert.spec.ts:7626:7-7626:23: `await tx.wait();`
$DIR/test/revert.spec.ts:7626:15-7626:22: `.wait()`
$DIR/test/revert.spec.ts:7630:30-7631:29: `
            .connect(seller)`
$DIR/test/revert.spec.ts:7631:29-7632:54: `
            .fulfillOrder(order, toKey(0), { value })`
$DIR/test/revert.spec.ts:7641:30-7642:29: `
            .connect(seller)`
$DIR/test/revert.spec.ts:7642:29-7643:54: `
            .fulfillOrder(order, toKey(0), { value })`
$DIR/test/revert.spec.ts:7675:52-7675:78: `.getOrderStatus(orderHash)`
$DIR/test/revert.spec.ts:7681:43-7684:8: `.interface.encodeFunctionData(
        "validate",
        [[order]]
      )`
$DIR/test/revert.spec.ts:7686:33-7690:8: `.prepare(
        marketplaceContract.address,
        0,
        callData
      )`
$DIR/test/revert.spec.ts:7691:7-7691:23: `await tx.wait();`
$DIR/test/revert.spec.ts:7691:15-7691:22: `.wait()`
$DIR/test/revert.spec.ts:7695:30-7696:29: `
            .connect(seller)`
$DIR/test/revert.spec.ts:7696:29-7697:54: `
            .fulfillOrder(order, toKey(0), { value })`
$DIR/test/revert.spec.ts:7706:30-7707:29: `
            .connect(seller)`
$DIR/test/revert.spec.ts:7707:29-7708:54: `
            .fulfillOrder(order, toKey(0), { value })`
$DIR/test/revert.spec.ts:7740:52-7740:78: `.getOrderStatus(orderHash)`
$DIR/test/revert.spec.ts:7747:28-7747:77: `.interface.encodeFunctionData("incrementCounter")`
$DIR/test/revert.spec.ts:7749:33-7753:8: `.prepare(
        marketplaceContract.address,
        0,
        callData
      )`
$DIR/test/revert.spec.ts:7754:7-7754:23: `await tx.wait();`
$DIR/test/revert.spec.ts:7754:15-7754:22: `.wait()`
$DIR/test/revert.spec.ts:7758:30-7759:29: `
            .connect(seller)`
$DIR/test/revert.spec.ts:7759:29-7760:54: `
            .fulfillOrder(order, toKey(0), { value })`
$DIR/test/revert.spec.ts:7769:30-7770:29: `
            .connect(seller)`
$DIR/test/revert.spec.ts:7770:29-7771:54: `
            .fulfillOrder(order, toKey(0), { value })`
$DIR/test/revert.spec.ts:7807:28-7808:26: `
          .connect(buyer)`
$DIR/test/revert.spec.ts:7808:26-7809:52: `
          .fulfillOrder(order, toKey(0), { value })`
$DIR/test/revert.spec.ts:7826:28-7827:26: `
          .connect(buyer)`
$DIR/test/revert.spec.ts:7827:26-7830:13: `
          .fulfillAdvancedOrder(order, [], toKey(0), buyer.address, {
            value: ethAmount,
          })`
$DIR/test/revert.spec.ts:7847:28-7848:26: `
          .connect(buyer)`
$DIR/test/revert.spec.ts:7848:26-7856:12: `
          .fulfillAvailableOrders(
            [order],
            [[{ orderIndex: 0, itemIndex: 0 }]],
            [[{ orderIndex: 0, itemIndex: 0 }]],
            toKey(0),
            100,
            { value: ethAmount }
          )`
$DIR/test/revert.spec.ts:7873:28-7874:26: `
          .connect(buyer)`
$DIR/test/revert.spec.ts:7874:26-7884:12: `
          .fulfillAvailableAdvancedOrders(
            [order],
            [],
            [[{ orderIndex: 0, itemIndex: 0 }]],
            [[{ orderIndex: 0, itemIndex: 0 }]],
            toKey(0),
            buyer.address,
            100,
            { value: ethAmount }
          )`
$DIR/test/revert.spec.ts:7892:7-7896:9: `await mintAndApproveERC20(
        buyer,
        marketplaceContract.address,
        tokenAmount
      );`
$DIR/test/revert.spec.ts:7911:7-7915:12: `await marketplaceContract
        .connect(owner)
        .matchOrders([order, mirrorOrder], fulfillments, {
          value: ethAmount,
        });`
$DIR/test/revert.spec.ts:7911:32-7912:24: `
        .connect(owner)`
$DIR/test/revert.spec.ts:7912:24-7915:11: `
        .matchOrders([order, mirrorOrder], fulfillments, {
          value: ethAmount,
        })`
$DIR/test/revert.spec.ts:7919:7-7923:9: `await mintAndApproveERC20(
        buyer,
        marketplaceContract.address,
        tokenAmount
      );`
$DIR/test/revert.spec.ts:7938:7-7948:11: `await marketplaceContract
        .connect(owner)
        .matchAdvancedOrders(
          [order, mirrorOrder],
          [],
          fulfillments,
          ethers.constants.AddressZero,
          {
            value: ethAmount,
          }
        );`
$DIR/test/revert.spec.ts:7938:32-7939:24: `
        .connect(owner)`
$DIR/test/revert.spec.ts:7939:24-7948:10: `
        .matchAdvancedOrders(
          [order, mirrorOrder],
          [],
          fulfillments,
          ethers.constants.AddressZero,
          {
            value: ethAmount,
          }
        )`
$DIR/test/revert.spec.ts:7976:7-7976:67: `await set721ApprovalForAll(seller, offererContract.address);`
$DIR/test/revert.spec.ts:7984:7-7984:59: `offer[0].identifier = offer[0].identifierOrCriteria;`
$DIR/test/revert.spec.ts:7985:7-7985:44: `offer[0].amount = offer[0].endAmount;`
$DIR/test/revert.spec.ts:7987:7-7987:75: `consideration[0].identifier = consideration[0].identifierOrCriteria;`
$DIR/test/revert.spec.ts:7988:7-7988:60: `consideration[0].amount = consideration[0].endAmount;`
$DIR/test/revert.spec.ts:7998:7-7998:58: `order.parameters.offerer = offererContract.address;`
$DIR/test/revert.spec.ts:7999:7-7999:27: `order.numerator = 1;`
$DIR/test/revert.spec.ts:8000:7-8000:29: `order.denominator = 1;`
$DIR/test/revert.spec.ts:8001:7-8001:30: `order.signature = "0x";`
$DIR/test/revert.spec.ts:8004:34-8006:10: `.getContractOffererNonce(
          offererContract.address
        )`
$DIR/test/revert.spec.ts:8009:24-8009:46: `.address.toLowerCase()`
$DIR/test/revert.spec.ts:8010:29-8010:43: `.toHexString()`
$DIR/test/revert.spec.ts:8010:43-8010:52: `.slice(2)`
$DIR/test/revert.spec.ts:8010:52-8010:70: `.padStart(24, "0")`
$DIR/test/revert.spec.ts:8013:28-8014:26: `
          .connect(buyer)`
$DIR/test/revert.spec.ts:8014:26-8021:12: `
          .fulfillAdvancedOrder(
            order,
            [],
            toKey(0),
            ethers.constants.AddressZero,
            { value }
          )`
$DIR/test/revert.spec.ts:8042:7-8042:59: `offer[0].identifier = offer[0].identifierOrCriteria;`
$DIR/test/revert.spec.ts:8043:7-8043:44: `offer[0].amount = offer[0].endAmount;`
$DIR/test/revert.spec.ts:8045:7-8045:75: `consideration[0].identifier = consideration[0].identifierOrCriteria;`
$DIR/test/revert.spec.ts:8046:7-8046:60: `consideration[0].amount = consideration[0].endAmount;`
$DIR/test/revert.spec.ts:8057:34-8059:10: `.getContractOffererNonce(
          offererContract.address
        )`
$DIR/test/revert.spec.ts:8062:24-8062:46: `.address.toLowerCase()`
$DIR/test/revert.spec.ts:8063:29-8063:43: `.toHexString()`
$DIR/test/revert.spec.ts:8063:43-8063:52: `.slice(2)`
$DIR/test/revert.spec.ts:8063:52-8063:70: `.padStart(24, "0")`
$DIR/test/revert.spec.ts:8065:52-8065:78: `.getOrderStatus(orderHash)`
$DIR/test/revert.spec.ts:8071:7-8071:58: `order.parameters.offerer = offererContract.address;`
$DIR/test/revert.spec.ts:8072:7-8072:27: `order.numerator = 1;`
$DIR/test/revert.spec.ts:8073:7-8073:29: `order.denominator = 1;`
$DIR/test/revert.spec.ts:8074:7-8074:30: `order.signature = "0x";`
$DIR/test/revert.spec.ts:8077:39-8078:26: `
          .connect(buyer)`
$DIR/test/revert.spec.ts:8078:26-8087:12: `
          .fulfillAdvancedOrder(
            order,
            [],
            toKey(0),
            ethers.constants.AddressZero,
            {
              value,
            }
          )`
$DIR/test/revert.spec.ts:8088:41-8088:48: `.wait()`
$DIR/test/revert.spec.ts:8120:7-8120:59: `offer[0].identifier = offer[0].identifierOrCriteria;`
$DIR/test/revert.spec.ts:8121:7-8121:44: `offer[0].amount = offer[0].endAmount;`
$DIR/test/revert.spec.ts:8123:7-8123:75: `consideration[0].identifier = consideration[0].identifierOrCriteria;`
$DIR/test/revert.spec.ts:8124:7-8124:60: `consideration[0].amount = consideration[0].endAmount;`
$DIR/test/revert.spec.ts:8135:34-8137:10: `.getContractOffererNonce(
          offererContract.address
        )`
$DIR/test/revert.spec.ts:8140:24-8140:46: `.address.toLowerCase()`
$DIR/test/revert.spec.ts:8141:29-8141:43: `.toHexString()`
$DIR/test/revert.spec.ts:8141:43-8141:52: `.slice(2)`
$DIR/test/revert.spec.ts:8141:52-8141:70: `.padStart(24, "0")`
$DIR/test/revert.spec.ts:8143:52-8143:78: `.getOrderStatus(orderHash)`
$DIR/test/revert.spec.ts:8149:7-8149:58: `order.parameters.offerer = offererContract.address;`
$DIR/test/revert.spec.ts:8150:7-8150:27: `order.numerator = 1;`
$DIR/test/revert.spec.ts:8151:7-8151:29: `order.denominator = 1;`
$DIR/test/revert.spec.ts:8152:7-8152:30: `order.signature = "0x";`
$DIR/test/revert.spec.ts:8155:28-8156:26: `
          .connect(buyer)`
$DIR/test/revert.spec.ts:8156:26-8163:12: `
          .fulfillAdvancedOrder(
            order,
            [],
            toKey(0),
            ethers.constants.AddressZero,
            { value }
          )`
$DIR/test/revert.spec.ts:8184:7-8184:59: `offer[0].identifier = offer[0].identifierOrCriteria;`
$DIR/test/revert.spec.ts:8185:7-8185:44: `offer[0].amount = offer[0].endAmount;`
$DIR/test/revert.spec.ts:8187:7-8187:75: `consideration[0].identifier = consideration[0].identifierOrCriteria;`
$DIR/test/revert.spec.ts:8188:7-8188:60: `consideration[0].amount = consideration[0].endAmount;`
$DIR/test/revert.spec.ts:8199:34-8201:10: `.getContractOffererNonce(
          offererContract.address
        )`
$DIR/test/revert.spec.ts:8204:24-8204:46: `.address.toLowerCase()`
$DIR/test/revert.spec.ts:8205:29-8205:43: `.toHexString()`
$DIR/test/revert.spec.ts:8205:43-8205:52: `.slice(2)`
$DIR/test/revert.spec.ts:8205:52-8205:70: `.padStart(24, "0")`
$DIR/test/revert.spec.ts:8207:52-8207:78: `.getOrderStatus(orderHash)`
$DIR/test/revert.spec.ts:8213:7-8213:58: `order.parameters.offerer = offererContract.address;`
$DIR/test/revert.spec.ts:8214:7-8214:27: `order.numerator = 1;`
$DIR/test/revert.spec.ts:8215:7-8215:29: `order.denominator = 1;`
$DIR/test/revert.spec.ts:8216:7-8216:30: `order.signature = "0x";`
$DIR/test/revert.spec.ts:8219:28-8220:26: `
          .connect(buyer)`
$DIR/test/revert.spec.ts:8220:26-8227:12: `
          .fulfillAdvancedOrder(
            order,
            [],
            toKey(0),
            ethers.constants.AddressZero,
            { value }
          )`
$DIR/test/revert.spec.ts:8248:7-8248:59: `offer[0].identifier = offer[0].identifierOrCriteria;`
$DIR/test/revert.spec.ts:8249:7-8249:44: `offer[0].amount = offer[0].endAmount;`
$DIR/test/revert.spec.ts:8251:7-8251:75: `consideration[0].identifier = consideration[0].identifierOrCriteria;`
$DIR/test/revert.spec.ts:8252:7-8252:60: `consideration[0].amount = consideration[0].endAmount;`
$DIR/test/revert.spec.ts:8263:34-8265:10: `.getContractOffererNonce(
          offererContract.address
        )`
$DIR/test/revert.spec.ts:8268:24-8268:46: `.address.toLowerCase()`
$DIR/test/revert.spec.ts:8269:29-8269:43: `.toHexString()`
$DIR/test/revert.spec.ts:8269:43-8269:52: `.slice(2)`
$DIR/test/revert.spec.ts:8269:52-8269:70: `.padStart(24, "0")`
$DIR/test/revert.spec.ts:8271:52-8271:78: `.getOrderStatus(orderHash)`
$DIR/test/revert.spec.ts:8277:7-8277:58: `order.parameters.offerer = offererContract.address;`
$DIR/test/revert.spec.ts:8278:7-8278:27: `order.numerator = 1;`
$DIR/test/revert.spec.ts:8279:7-8279:29: `order.denominator = 1;`
$DIR/test/revert.spec.ts:8280:7-8280:30: `order.signature = "0x";`
$DIR/test/revert.spec.ts:8283:28-8284:26: `
          .connect(buyer)`
$DIR/test/revert.spec.ts:8284:26-8291:12: `
          .fulfillAdvancedOrder(
            order,
            [],
            toKey(0),
            ethers.constants.AddressZero,
            { value }
          )`
$DIR/test/revert.spec.ts:8320:7-8320:59: `offer[0].identifier = offer[0].identifierOrCriteria;`
$DIR/test/revert.spec.ts:8321:7-8321:44: `offer[0].amount = offer[0].endAmount;`
$DIR/test/revert.spec.ts:8323:7-8323:75: `consideration[0].identifier = consideration[0].identifierOrCriteria;`
$DIR/test/revert.spec.ts:8324:7-8324:60: `consideration[0].amount = consideration[0].endAmount;`
$DIR/test/revert.spec.ts:8343:34-8345:10: `.getContractOffererNonce(
          offererContract.address
        )`
$DIR/test/revert.spec.ts:8348:24-8348:46: `.address.toLowerCase()`
$DIR/test/revert.spec.ts:8349:29-8349:43: `.toHexString()`
$DIR/test/revert.spec.ts:8349:43-8349:52: `.slice(2)`
$DIR/test/revert.spec.ts:8349:52-8349:70: `.padStart(24, "0")`
$DIR/test/revert.spec.ts:8351:52-8351:78: `.getOrderStatus(orderHash)`
$DIR/test/revert.spec.ts:8357:53-8357:80: `.getOrderStatus(orderHash2)`
$DIR/test/revert.spec.ts:8363:7-8363:58: `order.parameters.offerer = offererContract.address;`
$DIR/test/revert.spec.ts:8364:7-8364:27: `order.numerator = 1;`
$DIR/test/revert.spec.ts:8365:7-8365:29: `order.denominator = 1;`
$DIR/test/revert.spec.ts:8366:7-8366:30: `order.signature = "0x";`
$DIR/test/revert.spec.ts:8378:28-8379:26: `
          .connect(buyer)`
$DIR/test/revert.spec.ts:8379:26-8391:12: `
          .fulfillAvailableAdvancedOrders(
            [order, order2],
            [],
            offerComponents,
            considerationComponents,
            toKey(0),
            ethers.constants.AddressZero,
            2,
            {
              value: value.mul(2),
            }
          )`
$DIR/test/revert.spec.ts:8389:27-8389:34: `.mul(2)`
$DIR/test/revert.spec.ts:8411:7-8415:9: `await mintAndApproveERC20(
        buyer,
        marketplaceContract.address,
        tokenAmount
      );`
$DIR/test/revert.spec.ts:8421:22-8421:31: `.sub(100)`
$DIR/test/revert.spec.ts:8422:22-8422:31: `.sub(100)`
$DIR/test/revert.spec.ts:8446:44-8446:63: `.entries(obj ?? {})`
$DIR/test/revert.spec.ts:8449:15-8449:68: `obj[key] = typeof value === "bigint" ? BigInt(1) : 1;`
$DIR/test/revert.spec.ts:8451:15-8451:33: `recurse(obj[key]);`
$DIR/test/revert.spec.ts:8456:9-8460:11: `recurse(
          hreProvider._wrapped._wrapped._wrapped?._node?._vm ??
            // When running coverage, there was an additional layer of wrapping
            hreProvider._wrapped._wrapped._wrapped._wrapped._node._vm
        );`
$DIR/test/revert.spec.ts:8462:7-8462:23: `changeChainId();`
$DIR/test/revert.spec.ts:8466:43-8467:24: `
        .connect(buyer)`
$DIR/test/revert.spec.ts:8467:24-8468:69: `
        .populateTransaction.fulfillBasicOrder(basicOrderParameters)`
$DIR/test/revert.spec.ts:8469:7-8469:22: `tx.chainId = 1;`
$DIR/test/revert.spec.ts:8470:40-8470:49: `.call(tx)`
$DIR/test/router.spec.ts:99:26-99:55: `.getAllowedSeaportContracts()`
$DIR/test/router.spec.ts:150:15-150:30: `.connect(buyer)`
$DIR/test/router.spec.ts:150:30-155:10: `.fulfillAvailableAdvancedOrders(
          { ...params, seaportContracts: [testERC721.address] },
          {
            value,
          }
        )`
$DIR/test/router.spec.ts:161:7-163:10: `await router.connect(buyer).fulfillAvailableAdvancedOrders(params, {
        value,
      });`
$DIR/test/router.spec.ts:161:19-161:34: `.connect(buyer)`
$DIR/test/router.spec.ts:161:34-163:9: `.fulfillAvailableAdvancedOrders(params, {
        value,
      })`
$DIR/test/router.spec.ts:166:30-166:45: `.ownerOf(nftId)`
$DIR/test/router.spec.ts:245:7-247:10: `await router.connect(buyer).fulfillAvailableAdvancedOrders(params, {
        value: value.mul(2),
      });`
$DIR/test/router.spec.ts:245:19-245:34: `.connect(buyer)`
$DIR/test/router.spec.ts:245:34-247:9: `.fulfillAvailableAdvancedOrders(params, {
        value: value.mul(2),
      })`
$DIR/test/router.spec.ts:246:21-246:28: `.mul(2)`
$DIR/test/router.spec.ts:250:30-250:45: `.ownerOf(nftId)`
$DIR/test/router.spec.ts:251:30-251:46: `.ownerOf(nftId2)`
$DIR/test/router.spec.ts:330:7-332:10: `await router.connect(buyer).fulfillAvailableAdvancedOrders(params, {
        value: value.mul(2),
      });`
$DIR/test/router.spec.ts:330:19-330:34: `.connect(buyer)`
$DIR/test/router.spec.ts:330:34-332:9: `.fulfillAvailableAdvancedOrders(params, {
        value: value.mul(2),
      })`
$DIR/test/router.spec.ts:331:21-331:28: `.mul(2)`
$DIR/test/router.spec.ts:335:30-335:45: `.ownerOf(nftId)`
$DIR/test/router.spec.ts:336:30-336:46: `.ownerOf(nftId2)`
$DIR/test/router.spec.ts:349:7-349:68: `await set721ApprovalForAll(seller, conduitOne.address, true);`
$DIR/test/router.spec.ts:417:7-419:10: `await router.connect(buyer).fulfillAvailableAdvancedOrders(params, {
        value: value.mul(2),
      });`
$DIR/test/router.spec.ts:417:19-417:34: `.connect(buyer)`
$DIR/test/router.spec.ts:417:34-419:9: `.fulfillAvailableAdvancedOrders(params, {
        value: value.mul(2),
      })`
$DIR/test/router.spec.ts:418:21-418:28: `.mul(2)`
$DIR/test/router.spec.ts:422:30-422:45: `.ownerOf(nftId)`
$DIR/test/router.spec.ts:423:30-423:46: `.ownerOf(nftId2)`
$DIR/test/router.spec.ts:501:51-501:77: `.getBalance(buyer.address)`
$DIR/test/router.spec.ts:504:7-513:9: `await router.connect(buyer).fulfillAvailableAdvancedOrders(
        {
          ...params,
          seaportContracts: params.seaportContracts.slice(0, 1),
          advancedOrderParams: params.advancedOrderParams.slice(0, 1),
        },
        {
          value,
        }
      );`
$DIR/test/router.spec.ts:504:19-504:34: `.connect(buyer)`
$DIR/test/router.spec.ts:504:34-513:8: `.fulfillAvailableAdvancedOrders(
        {
          ...params,
          seaportContracts: params.seaportContracts.slice(0, 1),
          advancedOrderParams: params.advancedOrderParams.slice(0, 1),
        },
        {
          value,
        }
      )`
$DIR/test/router.spec.ts:507:35-507:64: `.seaportContracts.slice(0, 1)`
$DIR/test/router.spec.ts:508:38-508:70: `.advancedOrderParams.slice(0, 1)`
$DIR/test/router.spec.ts:516:7-518:10: `await router.connect(buyer).fulfillAvailableAdvancedOrders(params, {
        value: value.mul(2),
      });`
$DIR/test/router.spec.ts:516:19-516:34: `.connect(buyer)`
$DIR/test/router.spec.ts:516:34-518:9: `.fulfillAvailableAdvancedOrders(params, {
        value: value.mul(2),
      })`
$DIR/test/router.spec.ts:517:21-517:28: `.mul(2)`
$DIR/test/router.spec.ts:521:30-521:45: `.ownerOf(nftId)`
$DIR/test/router.spec.ts:522:30-522:46: `.ownerOf(nftId2)`
$DIR/test/router.spec.ts:525:50-525:76: `.getBalance(buyer.address)`
$DIR/test/router.spec.ts:575:33-575:68: `.prepare(testERC721.address, 0, [])`
$DIR/test/router.spec.ts:576:7-576:23: `await tx.wait();`
$DIR/test/router.spec.ts:576:15-576:22: `.wait()`
$DIR/test/router.spec.ts:579:30-582:8: `.interface.encodeFunctionData(
        "fulfillAvailableAdvancedOrders",
        [params]
      )`
$DIR/test/router.spec.ts:583:29-583:77: `.execute(router.address, value.mul(2), callData)`
$DIR/test/router.spec.ts:583:59-583:66: `.mul(2)`
$DIR/test/router.spec.ts:632:30-635:8: `.interface.encodeFunctionData(
        "fulfillAvailableAdvancedOrders",
        [params]
      )`
$DIR/test/router.spec.ts:636:33-636:70: `.prepare(router.address, 0, callData)`
$DIR/test/router.spec.ts:637:7-637:23: `await tx.wait();`
$DIR/test/router.spec.ts:637:15-637:22: `.wait()`
$DIR/test/router.spec.ts:640:29-640:77: `.execute(router.address, value.mul(2), callData)`
$DIR/test/router.spec.ts:640:59-640:66: `.mul(2)`
$DIR/test/router.spec.ts:650:43-656:9: `.signTransaction({
        to: router.address,
        value: 1,
        nonce: await owner.getTransactionCount(),
        gasPrice: await provider.getGasPrice(),
        gasLimit: 50_000,
      })`
$DIR/test/router.spec.ts:653:27-653:49: `.getTransactionCount()`
$DIR/test/router.spec.ts:654:33-654:47: `.getGasPrice()`
$DIR/test/router.spec.ts:657:28-657:62: `.sendTransaction(txTriggerReceive)`
$DIR/test/router.spec.ts:662:7-665:10: `await network.provider.request({
        method: "hardhat_impersonateAccount",
        params: [marketplaceContract.address],
      });`
$DIR/test/router.spec.ts:662:20-665:9: `.provider.request({
        method: "hardhat_impersonateAccount",
        params: [marketplaceContract.address],
      })`
$DIR/test/router.spec.ts:667:41-667:80: `.getSigner(marketplaceContract.address)`
$DIR/test/router.spec.ts:668:7-668:59: `await faucet(marketplaceContract.address, provider);`
$DIR/test/router.spec.ts:670:7-670:77: `await seaportSigner.sendTransaction({ to: router.address, value: 1 });`
$DIR/test/router.spec.ts:670:26-670:76: `.sendTransaction({ to: router.address, value: 1 })`
$DIR/test/router.spec.ts:671:29-671:56: `.getBalance(router.address)`
$DIR/test/router.spec.ts:673:7-676:10: `await network.provider.request({
        method: "hardhat_stopImpersonatingAccount",
        params: [marketplaceContract.address],
      });`
$DIR/test/router.spec.ts:673:20-676:9: `.provider.request({
        method: "hardhat_stopImpersonatingAccount",
        params: [marketplaceContract.address],
      })`
$DIR/test/transferhelper.spec.ts:157:29-157:66: `.max(1, randomInt(itemsToCreate - 2))`
$DIR/test/transferhelper.spec.ts:158:30-158:79: `.max(1, randomInt(itemsToCreate - numERC20s - 1))`
$DIR/test/transferhelper.spec.ts:159:31-159:78: `.max(1, itemsToCreate - numERC20s - numERC721s)`
$DIR/test/transferhelper.spec.ts:183:9-183:47: `erc20Contracts[i] = tempERC20Contract;`
$DIR/test/transferhelper.spec.ts:184:9-184:43: `erc20Transfers[i] = erc20Transfer;`
$DIR/test/transferhelper.spec.ts:200:9-200:49: `erc721Contracts[i] = tempERC721Contract;`
$DIR/test/transferhelper.spec.ts:201:9-201:45: `erc721Transfers[i] = erc721Transfer;`
$DIR/test/transferhelper.spec.ts:219:9-219:51: `erc1155Contracts[i] = tempERC1155Contract;`
$DIR/test/transferhelper.spec.ts:220:9-220:47: `erc1155Transfers[i] = erc1155Transfer;`
$DIR/test/transferhelper.spec.ts:236:7-240:9: `transfersWithRecipients[0] = createTransferWithRecipient(
        transfers,
        recipient.address,
        true
      );`
$DIR/test/transferhelper.spec.ts:243:7-245:64: `await tempTransferHelper
        .connect(sender)
        .bulkTransfer(transfersWithRecipients, tempConduitKey);`
$DIR/test/transferhelper.spec.ts:243:31-244:25: `
        .connect(sender)`
$DIR/test/transferhelper.spec.ts:244:25-245:63: `
        .bulkTransfer(transfersWithRecipients, tempConduitKey)`
$DIR/test/transferhelper.spec.ts:258:56-260:16: `.balanceOf(
                sender.address
              )`
$DIR/test/transferhelper.spec.ts:263:56-265:16: `.balanceOf(
                recipient.address
              )`
$DIR/test/transferhelper.spec.ts:271:57-271:77: `.ownerOf(identifier)`
$DIR/test/transferhelper.spec.ts:277:31-277:69: `.balanceOf(sender.address, identifier)`
$DIR/test/transferhelper.spec.ts:281:26-281:67: `.balanceOf(recipient.address, identifier)`
$DIR/test/transferhelper.spec.ts:291:29-291:66: `.max(1, randomInt(itemsToCreate - 2))`
$DIR/test/transferhelper.spec.ts:292:30-292:79: `.max(1, randomInt(itemsToCreate - numERC20s - 1))`
$DIR/test/transferhelper.spec.ts:293:31-293:78: `.max(1, itemsToCreate - numERC20s - numERC721s)`
$DIR/test/transferhelper.spec.ts:317:9-317:47: `erc20Contracts[i] = tempERC20Contract;`
$DIR/test/transferhelper.spec.ts:318:9-318:43: `erc20Transfers[i] = erc20Transfer;`
$DIR/test/transferhelper.spec.ts:334:9-334:49: `erc721Contracts[i] = tempERC721Contract;`
$DIR/test/transferhelper.spec.ts:335:9-335:45: `erc721Transfers[i] = erc721Transfer;`
$DIR/test/transferhelper.spec.ts:353:9-353:51: `erc1155Contracts[i] = tempERC1155Contract;`
$DIR/test/transferhelper.spec.ts:354:9-354:47: `erc1155Transfers[i] = erc1155Transfer;`
$DIR/test/transferhelper.spec.ts:365:7-369:9: `transfersWithRecipients[0] = createTransferWithRecipient(
        transfers,
        recipient.address,
        true
      );`
$DIR/test/transferhelper.spec.ts:373:27-374:27: `
          .connect(sender)`
$DIR/test/transferhelper.spec.ts:374:27-378:12: `
          .bulkTransfer(
            transfersWithRecipients,
            ethers.utils.formatBytes32String("")
          )`
$DIR/test/transferhelper.spec.ts:377:19-377:49: `.utils.formatBytes32String("")`
$DIR/test/transferhelper.spec.ts:386:50-388:8: `.getContractFactory(
        "ERC721ReceiverMock"
      )`
$DIR/test/transferhelper.spec.ts:389:59-392:8: `.deploy(
        Buffer.from("150b7a02", "hex"),
        0
      )`
$DIR/test/transferhelper.spec.ts:390:15-390:39: `.from("150b7a02", "hex")`
$DIR/test/transferhelper.spec.ts:410:9-410:49: `erc721Contracts[i] = tempERC721Contract;`
$DIR/test/transferhelper.spec.ts:411:9-411:45: `erc721Transfers[i] = erc721Transfer;`
$DIR/test/transferhelper.spec.ts:416:7-420:9: `transfersWithRecipients[0] = createTransferWithRecipient(
        erc721Transfers,
        erc721Recipient.address,
        true
      );`
$DIR/test/transferhelper.spec.ts:424:27-425:27: `
          .connect(sender)`
$DIR/test/transferhelper.spec.ts:425:27-429:12: `
          .bulkTransfer(
            transfersWithRecipients,
            ethers.utils.formatBytes32String("")
          )`
$DIR/test/transferhelper.spec.ts:428:19-428:49: `.utils.formatBytes32String("")`
$DIR/test/transferhelper.spec.ts:458:27-459:27: `
          .connect(sender)`
$DIR/test/transferhelper.spec.ts:459:27-460:54: `
          .bulkTransfer(ethTransfers, tempConduitKey)`
$DIR/test/transferhelper.spec.ts:486:27-487:27: `
          .connect(sender)`
$DIR/test/transferhelper.spec.ts:487:27-488:56: `
          .bulkTransfer(erc20Transfers, tempConduitKey)`
$DIR/test/transferhelper.spec.ts:520:27-521:27: `
          .connect(sender)`
$DIR/test/transferhelper.spec.ts:521:27-522:57: `
          .bulkTransfer(erc721Transfers, tempConduitKey)`
$DIR/test/transferhelper.spec.ts:556:27-557:27: `
          .connect(sender)`
$DIR/test/transferhelper.spec.ts:557:27-558:57: `
          .bulkTransfer(erc721Transfers, tempConduitKey)`
$DIR/test/transferhelper.spec.ts:568:51-570:8: `.getContractFactory(
        "InvalidERC721Recipient"
      )`
$DIR/test/transferhelper.spec.ts:571:61-571:70: `.deploy()`
$DIR/test/transferhelper.spec.ts:596:27-597:27: `
          .connect(sender)`
$DIR/test/transferhelper.spec.ts:597:27-598:57: `
          .bulkTransfer(erc721Transfers, tempConduitKey)`
$DIR/test/transferhelper.spec.ts:646:27-647:27: `
          .connect(sender)`
$DIR/test/transferhelper.spec.ts:647:27-648:78: `
          .bulkTransfer(transfers, ethers.utils.formatBytes32String("0xabc"))`
$DIR/test/transferhelper.spec.ts:648:42-648:77: `.utils.formatBytes32String("0xabc")`
$DIR/test/transferhelper.spec.ts:659:53-661:8: `.getContractFactory(
        "ERC721ReceiverMock"
      )`
$DIR/test/transferhelper.spec.ts:662:65-665:8: `.deploy(
        Buffer.from("abcd0000", "hex"),
        1
      )`
$DIR/test/transferhelper.spec.ts:663:15-663:39: `.from("abcd0000", "hex")`
$DIR/test/transferhelper.spec.ts:700:27-701:27: `
          .connect(sender)`
$DIR/test/transferhelper.spec.ts:701:27-702:51: `
          .bulkTransfer(transfers, tempConduitKey)`
$DIR/test/transferhelper.spec.ts:723:53-725:8: `.getContractFactory(
        "ERC721ReceiverMock"
      )`
$DIR/test/transferhelper.spec.ts:726:65-729:8: `.deploy(
        Buffer.from("abcd0000", "hex"),
        1
      )`
$DIR/test/transferhelper.spec.ts:727:15-727:39: `.from("abcd0000", "hex")`
$DIR/test/transferhelper.spec.ts:764:27-765:27: `
          .connect(sender)`
$DIR/test/transferhelper.spec.ts:765:27-766:51: `
          .bulkTransfer(transfers, tempConduitKey)`
$DIR/test/transferhelper.spec.ts:820:27-821:27: `
          .connect(sender)`
$DIR/test/transferhelper.spec.ts:821:27-822:51: `
          .bulkTransfer(transfers, tempConduitKey)`
$DIR/test/transferhelper.spec.ts:867:27-868:27: `
          .connect(sender)`
$DIR/test/transferhelper.spec.ts:868:27-869:51: `
          .bulkTransfer(transfers, tempConduitKey)`
$DIR/test/transferhelper.spec.ts:886:7-886:77: `await tempERC1155Contract.connect(owner).mint(sender.address, 0, 100);`
$DIR/test/transferhelper.spec.ts:886:32-886:47: `.connect(owner)`
$DIR/test/transferhelper.spec.ts:886:47-886:76: `.mint(sender.address, 0, 100)`
$DIR/test/transferhelper.spec.ts:888:56-890:8: `.getContractFactory(
        "ConduitControllerMock"
      )`
$DIR/test/transferhelper.spec.ts:891:71-893:8: `.deploy(
        1 // ConduitMockRevertNoReason
      )`
$DIR/test/transferhelper.spec.ts:895:53-897:8: `.getContractFactory(
        "TransferHelper"
      )`
$DIR/test/transferhelper.spec.ts:898:65-900:8: `.deploy(
        mockConduitController.address
      )`
$DIR/test/transferhelper.spec.ts:901:59-901:68: `.slice(2)`
$DIR/test/transferhelper.spec.ts:904:7-906:55: `await mockConduitController
        .connect(owner)
        .createConduit(mockConduitKey, owner.address);`
$DIR/test/transferhelper.spec.ts:904:34-905:24: `
        .connect(owner)`
$DIR/test/transferhelper.spec.ts:905:24-906:54: `
        .createConduit(mockConduitKey, owner.address)`
$DIR/test/transferhelper.spec.ts:909:36-909:63: `.getConduit(mockConduitKey)`
$DIR/test/transferhelper.spec.ts:912:7-914:54: `await tempERC1155Contract
        .connect(sender)
        .setApprovalForAll(mockConduitAddress, true);`
$DIR/test/transferhelper.spec.ts:912:32-913:25: `
        .connect(sender)`
$DIR/test/transferhelper.spec.ts:913:25-914:53: `
        .setApprovalForAll(mockConduitAddress, true)`
$DIR/test/transferhelper.spec.ts:950:27-951:27: `
          .connect(sender)`
$DIR/test/transferhelper.spec.ts:951:27-952:51: `
          .bulkTransfer(transfers, mockConduitKey)`
$DIR/test/transferhelper.spec.ts:963:49-965:8: `.getContractFactory(
        "TestERC20Panic"
      )`
$DIR/test/transferhelper.spec.ts:966:57-966:66: `.deploy()`
$DIR/test/transferhelper.spec.ts:993:29-994:29: `
            .connect(sender)`
$DIR/test/transferhelper.spec.ts:994:29-995:53: `
            .bulkTransfer(transfers, tempConduitKey)`
$DIR/test/transferhelper.spec.ts:1008:29-1009:29: `
            .connect(sender)`
$DIR/test/transferhelper.spec.ts:1009:29-1010:53: `
            .bulkTransfer(transfers, tempConduitKey)`
$DIR/test/transferhelper.spec.ts:1019:7-1019:72: `await tempERC20Contract.connect(owner).mint(sender.address, 100);`
$DIR/test/transferhelper.spec.ts:1019:30-1019:45: `.connect(owner)`
$DIR/test/transferhelper.spec.ts:1019:45-1019:71: `.mint(sender.address, 100)`
$DIR/test/transferhelper.spec.ts:1021:56-1023:8: `.getContractFactory(
        "ConduitControllerMock"
      )`
$DIR/test/transferhelper.spec.ts:1024:71-1026:8: `.deploy(
        2 // ConduitMockInvalidMagic
      )`
$DIR/test/transferhelper.spec.ts:1028:53-1030:8: `.getContractFactory(
        "TransferHelper"
      )`
$DIR/test/transferhelper.spec.ts:1031:65-1033:8: `.deploy(
        mockConduitController.address
      )`
$DIR/test/transferhelper.spec.ts:1034:59-1034:68: `.slice(2)`
$DIR/test/transferhelper.spec.ts:1037:7-1039:55: `await mockConduitController
        .connect(owner)
        .createConduit(mockConduitKey, owner.address);`
$DIR/test/transferhelper.spec.ts:1037:34-1038:24: `
        .connect(owner)`
$DIR/test/transferhelper.spec.ts:1038:24-1039:54: `
        .createConduit(mockConduitKey, owner.address)`
$DIR/test/transferhelper.spec.ts:1042:36-1042:63: `.getConduit(mockConduitKey)`
$DIR/test/transferhelper.spec.ts:1045:7-1045:80: `await tempERC20Contract.connect(sender).approve(mockConduitAddress, 100);`
$DIR/test/transferhelper.spec.ts:1045:30-1045:46: `.connect(sender)`
$DIR/test/transferhelper.spec.ts:1045:46-1045:79: `.approve(mockConduitAddress, 100)`
$DIR/test/transferhelper.spec.ts:1069:27-1070:27: `
          .connect(sender)`
$DIR/test/transferhelper.spec.ts:1070:27-1071:51: `
          .bulkTransfer(transfers, mockConduitKey)`
$DIR/test/transferhelper.spec.ts:1081:7-1081:72: `await tempERC20Contract.connect(owner).mint(sender.address, 100);`
$DIR/test/transferhelper.spec.ts:1081:30-1081:45: `.connect(owner)`
$DIR/test/transferhelper.spec.ts:1081:45-1081:71: `.mint(sender.address, 100)`
$DIR/test/transferhelper.spec.ts:1083:56-1085:8: `.getContractFactory(
        "ConduitControllerMock"
      )`
$DIR/test/transferhelper.spec.ts:1086:71-1088:8: `.deploy(
        3 // ConduitMockRevertBytes
      )`
$DIR/test/transferhelper.spec.ts:1090:53-1092:8: `.getContractFactory(
        "TransferHelper"
      )`
$DIR/test/transferhelper.spec.ts:1093:65-1095:8: `.deploy(
        mockConduitController.address
      )`
$DIR/test/transferhelper.spec.ts:1096:59-1096:68: `.slice(2)`
$DIR/test/transferhelper.spec.ts:1099:7-1101:55: `await mockConduitController
        .connect(owner)
        .createConduit(mockConduitKey, owner.address);`
$DIR/test/transferhelper.spec.ts:1099:34-1100:24: `
        .connect(owner)`
$DIR/test/transferhelper.spec.ts:1100:24-1101:54: `
        .createConduit(mockConduitKey, owner.address)`
$DIR/test/transferhelper.spec.ts:1104:36-1104:63: `.getConduit(mockConduitKey)`
$DIR/test/transferhelper.spec.ts:1106:7-1106:80: `await tempERC20Contract.connect(sender).approve(mockConduitAddress, 100);`
$DIR/test/transferhelper.spec.ts:1106:30-1106:46: `.connect(sender)`
$DIR/test/transferhelper.spec.ts:1106:46-1106:79: `.approve(mockConduitAddress, 100)`
$DIR/test/transferhelper.spec.ts:1129:41-1129:67: `.utils.id("CustomError()")`
$DIR/test/transferhelper.spec.ts:1129:67-1129:80: `.slice(0, 10)`
$DIR/test/transferhelper.spec.ts:1132:27-1133:27: `
          .connect(sender)`
$DIR/test/transferhelper.spec.ts:1133:27-1134:51: `
          .bulkTransfer(transfers, mockConduitKey)`
$DIR/test/transferhelper.spec.ts:1187:27-1188:27: `
          .connect(sender)`
$DIR/test/transferhelper.spec.ts:1188:27-1189:51: `
          .bulkTransfer(transfers, tempConduitKey)`
$DIR/test/transferhelper.spec.ts:1202:29-1202:66: `.max(1, randomInt(itemsToCreate - 2))`
$DIR/test/transferhelper.spec.ts:1203:30-1203:79: `.max(1, randomInt(itemsToCreate - numERC20s - 1))`
$DIR/test/transferhelper.spec.ts:1204:31-1204:78: `.max(1, itemsToCreate - numERC20s - numERC721s)`
$DIR/test/transferhelper.spec.ts:1242:11-1242:49: `erc20Contracts[i] = tempERC20Contract;`
$DIR/test/transferhelper.spec.ts:1243:11-1243:45: `erc20Transfers[i] = erc20Transfer;`
$DIR/test/transferhelper.spec.ts:1259:11-1259:51: `erc721Contracts[i] = tempERC721Contract;`
$DIR/test/transferhelper.spec.ts:1260:11-1260:47: `erc721Transfers[i] = erc721Transfer;`
$DIR/test/transferhelper.spec.ts:1279:11-1279:53: `erc1155Contracts[i] = tempERC1155Contract;`
$DIR/test/transferhelper.spec.ts:1280:11-1280:49: `erc1155Transfers[i] = erc1155Transfer;`
$DIR/test/transferhelper.spec.ts:1289:21-1293:10: `.push(
          ...erc20Contracts,
          ...erc721Contracts,
          ...erc1155Contracts
        )`
$DIR/test/transferhelper.spec.ts:1295:9-1299:11: `transfersWithRecipients[j] = createTransferWithRecipient(
          transfers,
          transferRecipient,
          true
        );`
$DIR/test/transferhelper.spec.ts:1303:7-1305:64: `await tempTransferHelper
        .connect(sender)
        .bulkTransfer(transfersWithRecipients, tempConduitKey);`
$DIR/test/transferhelper.spec.ts:1303:31-1304:25: `
        .connect(sender)`
$DIR/test/transferhelper.spec.ts:1304:25-1305:63: `
        .bulkTransfer(transfersWithRecipients, tempConduitKey)`
$DIR/test/transferhelper.spec.ts:1321:58-1323:18: `.balanceOf(
                  sender.address
                )`
$DIR/test/transferhelper.spec.ts:1326:58-1328:18: `.balanceOf(
                  transfersWithRecipients[i].recipient
                )`
$DIR/test/transferhelper.spec.ts:1334:59-1334:79: `.ownerOf(identifier)`
$DIR/test/transferhelper.spec.ts:1341:28-1341:66: `.balanceOf(sender.address, identifier)`
$DIR/test/transferhelper.spec.ts:1344:28-1347:18: `.balanceOf(
                  transfersWithRecipients[i].recipient,
                  identifier
                )`
$DIR/test/transferhelper.spec.ts:1351:11-1351:36: `contractsStartingIndex++;`
$DIR/test/transferhelper.spec.ts:1361:29-1361:66: `.max(1, randomInt(itemsToCreate - 2))`
$DIR/test/transferhelper.spec.ts:1362:30-1362:79: `.max(1, randomInt(itemsToCreate - numERC20s - 1))`
$DIR/test/transferhelper.spec.ts:1363:31-1363:78: `.max(1, itemsToCreate - numERC20s - numERC721s)`
$DIR/test/transferhelper.spec.ts:1401:11-1401:49: `erc20Contracts[i] = tempERC20Contract;`
$DIR/test/transferhelper.spec.ts:1402:11-1402:45: `erc20Transfers[i] = erc20Transfer;`
$DIR/test/transferhelper.spec.ts:1418:11-1418:51: `erc721Contracts[i] = tempERC721Contract;`
$DIR/test/transferhelper.spec.ts:1419:11-1419:47: `erc721Transfers[i] = erc721Transfer;`
$DIR/test/transferhelper.spec.ts:1438:11-1438:53: `erc1155Contracts[i] = tempERC1155Contract;`
$DIR/test/transferhelper.spec.ts:1439:11-1439:49: `erc1155Transfers[i] = erc1155Transfer;`
$DIR/test/transferhelper.spec.ts:1448:21-1452:10: `.push(
          ...erc20Contracts,
          ...erc721Contracts,
          ...erc1155Contracts
        )`
$DIR/test/transferhelper.spec.ts:1454:9-1458:11: `transfersWithRecipientsNoConduit[j] = createTransferWithRecipient(
          transfers,
          transferRecipient,
          true
        );`
$DIR/test/transferhelper.spec.ts:1463:27-1464:27: `
          .connect(sender)`
$DIR/test/transferhelper.spec.ts:1464:27-1468:12: `
          .bulkTransfer(
            transfersWithRecipientsNoConduit,
            ethers.utils.formatBytes32String("")
          )`
$DIR/test/transferhelper.spec.ts:1467:19-1467:49: `.utils.formatBytes32String("")`
$DIR/test/transferhelper.spec.ts:1476:50-1478:8: `.getContractFactory(
        "ERC721ReceiverMock"
      )`
$DIR/test/transferhelper.spec.ts:1479:62-1482:8: `.deploy(
        Buffer.from("150b7a02", "hex"),
        0
      )`
$DIR/test/transferhelper.spec.ts:1480:15-1480:39: `.from("150b7a02", "hex")`
$DIR/test/transferhelper.spec.ts:1484:62-1487:8: `.deploy(
        Buffer.from("150b7a02", "hex"),
        0
      )`
$DIR/test/transferhelper.spec.ts:1485:15-1485:39: `.from("150b7a02", "hex")`
$DIR/test/transferhelper.spec.ts:1489:64-1492:8: `.deploy(
        Buffer.from("150b7a02", "hex"),
        0
      )`
$DIR/test/transferhelper.spec.ts:1490:15-1490:39: `.from("150b7a02", "hex")`
$DIR/test/transferhelper.spec.ts:1494:63-1497:8: `.deploy(
        Buffer.from("150b7a02", "hex"),
        0
      )`
$DIR/test/transferhelper.spec.ts:1495:15-1495:39: `.from("150b7a02", "hex")`
$DIR/test/transferhelper.spec.ts:1499:63-1502:8: `.deploy(
        Buffer.from("150b7a02", "hex"),
        0
      )`
$DIR/test/transferhelper.spec.ts:1500:15-1500:39: `.from("150b7a02", "hex")`
$DIR/test/transferhelper.spec.ts:1535:11-1535:51: `erc721Contracts[j] = tempERC721Contract;`
$DIR/test/transferhelper.spec.ts:1536:11-1536:43: `erc721Items[j] = erc721Transfer;`
$DIR/test/transferhelper.spec.ts:1538:9-1542:11: `transfersWithRecipients[i] = createTransferWithRecipient(
          erc721Items,
          erc721Recipients[i].address,
          true
        );`
$DIR/test/transferhelper.spec.ts:1544:21-1544:46: `.push(...erc721Contracts)`
$DIR/test/transferhelper.spec.ts:1549:27-1550:27: `
          .connect(sender)`
$DIR/test/transferhelper.spec.ts:1550:27-1554:12: `
          .bulkTransfer(
            transfersWithRecipients,
            ethers.utils.formatBytes32String("")
          )`
$DIR/test/transferhelper.spec.ts:1553:19-1553:49: `.utils.formatBytes32String("")`
$DIR/test/transferhelper.spec.ts:1588:27-1589:27: `
          .connect(sender)`
$DIR/test/transferhelper.spec.ts:1589:27-1590:64: `
          .bulkTransfer(ethTransferHelperItems, tempConduitKey)`
$DIR/test/transferhelper.spec.ts:1623:27-1624:27: `
          .connect(sender)`
$DIR/test/transferhelper.spec.ts:1624:27-1625:66: `
          .bulkTransfer(erc20TransferHelperItems, tempConduitKey)`
$DIR/test/transferhelper.spec.ts:1664:27-1665:27: `
          .connect(sender)`
$DIR/test/transferhelper.spec.ts:1665:27-1666:67: `
          .bulkTransfer(erc721TransferHelperItems, tempConduitKey)`
$DIR/test/transferhelper.spec.ts:1679:53-1681:8: `.getContractFactory(
        "ERC721ReceiverMock"
      )`
$DIR/test/transferhelper.spec.ts:1682:61-1685:8: `.deploy(
        "0x150b7a02", // Magic value
        0
      )`
$DIR/test/transferhelper.spec.ts:1705:7-1707:66: `await tempTransferHelper
        .connect(sender)
        .bulkTransfer(erc721TransferHelperItems, tempConduitKey);`
$DIR/test/transferhelper.spec.ts:1705:31-1706:25: `
        .connect(sender)`
$DIR/test/transferhelper.spec.ts:1706:25-1707:65: `
        .bulkTransfer(erc721TransferHelperItems, tempConduitKey)`
$DIR/test/transferhelper.spec.ts:1743:27-1744:27: `
          .connect(sender)`
$DIR/test/transferhelper.spec.ts:1744:27-1745:67: `
          .bulkTransfer(erc721TransferHelperItems, tempConduitKey)`
$DIR/test/transferhelper.spec.ts:1755:51-1757:8: `.getContractFactory(
        "InvalidERC721Recipient"
      )`
$DIR/test/transferhelper.spec.ts:1758:61-1758:70: `.deploy()`
$DIR/test/transferhelper.spec.ts:1759:64-1759:73: `.deploy()`
$DIR/test/transferhelper.spec.ts:1791:27-1792:27: `
          .connect(sender)`
$DIR/test/transferhelper.spec.ts:1792:27-1793:67: `
          .bulkTransfer(erc721TransferHelperItems, tempConduitKey)`
$DIR/test/transferhelper.spec.ts:1860:27-1861:27: `
          .connect(sender)`
$DIR/test/transferhelper.spec.ts:1861:27-1865:12: `
          .bulkTransfer(
            transferHelperItems,
            ethers.utils.formatBytes32String("0xabc")
          )`
$DIR/test/transferhelper.spec.ts:1864:19-1864:54: `.utils.formatBytes32String("0xabc")`
$DIR/test/transferhelper.spec.ts:1876:53-1878:8: `.getContractFactory(
        "ERC721ReceiverMock"
      )`
$DIR/test/transferhelper.spec.ts:1879:68-1882:8: `.deploy(
        Buffer.from("abcd0000", "hex"),
        1
      )`
$DIR/test/transferhelper.spec.ts:1880:15-1880:39: `.from("abcd0000", "hex")`
$DIR/test/transferhelper.spec.ts:1883:68-1886:8: `.deploy(
        Buffer.from("abcd6969", "hex"),
        1
      )`
$DIR/test/transferhelper.spec.ts:1884:15-1884:39: `.from("abcd6969", "hex")`
$DIR/test/transferhelper.spec.ts:1887:70-1890:8: `.deploy(
        Buffer.from("42069abc", "hex"),
        1
      )`
$DIR/test/transferhelper.spec.ts:1888:15-1888:39: `.from("42069abc", "hex")`
$DIR/test/transferhelper.spec.ts:1891:69-1894:8: `.deploy(
        Buffer.from("abc42069", "hex"),
        1
      )`
$DIR/test/transferhelper.spec.ts:1892:15-1892:39: `.from("abc42069", "hex")`
$DIR/test/transferhelper.spec.ts:1948:27-1949:27: `
          .connect(sender)`
$DIR/test/transferhelper.spec.ts:1949:27-1950:61: `
          .bulkTransfer(transferHelperItems, tempConduitKey)`
$DIR/test/transferhelper.spec.ts:2022:27-2023:27: `
          .connect(sender)`
$DIR/test/transferhelper.spec.ts:2023:27-2024:61: `
          .bulkTransfer(transferHelperItems, tempConduitKey)`
$DIR/test/transferhelper.spec.ts:2087:27-2088:27: `
          .connect(sender)`
$DIR/test/transferhelper.spec.ts:2088:27-2089:61: `
          .bulkTransfer(transferHelperItems, tempConduitKey)`
$DIR/test/transferhelper.spec.ts:2106:7-2106:77: `await tempERC1155Contract.connect(owner).mint(sender.address, 0, 100);`
$DIR/test/transferhelper.spec.ts:2106:32-2106:47: `.connect(owner)`
$DIR/test/transferhelper.spec.ts:2106:47-2106:76: `.mint(sender.address, 0, 100)`
$DIR/test/transferhelper.spec.ts:2108:56-2110:8: `.getContractFactory(
        "ConduitControllerMock"
      )`
$DIR/test/transferhelper.spec.ts:2111:71-2113:8: `.deploy(
        1 // ConduitMockRevertNoReason
      )`
$DIR/test/transferhelper.spec.ts:2115:53-2117:8: `.getContractFactory(
        "TransferHelper"
      )`
$DIR/test/transferhelper.spec.ts:2118:65-2120:8: `.deploy(
        mockConduitController.address
      )`
$DIR/test/transferhelper.spec.ts:2121:59-2121:68: `.slice(2)`
$DIR/test/transferhelper.spec.ts:2124:7-2126:55: `await mockConduitController
        .connect(owner)
        .createConduit(mockConduitKey, owner.address);`
$DIR/test/transferhelper.spec.ts:2124:34-2125:24: `
        .connect(owner)`
$DIR/test/transferhelper.spec.ts:2125:24-2126:54: `
        .createConduit(mockConduitKey, owner.address)`
$DIR/test/transferhelper.spec.ts:2129:36-2129:63: `.getConduit(mockConduitKey)`
$DIR/test/transferhelper.spec.ts:2132:7-2134:54: `await tempERC1155Contract
        .connect(sender)
        .setApprovalForAll(mockConduitAddress, true);`
$DIR/test/transferhelper.spec.ts:2132:32-2133:25: `
        .connect(sender)`
$DIR/test/transferhelper.spec.ts:2133:25-2134:53: `
        .setApprovalForAll(mockConduitAddress, true)`
$DIR/test/transferhelper.spec.ts:2200:27-2201:27: `
          .connect(sender)`
$DIR/test/transferhelper.spec.ts:2201:27-2202:51: `
          .bulkTransfer(transfers, mockConduitKey)`
$DIR/test/transferhelper.spec.ts:2213:49-2215:8: `.getContractFactory(
        "TestERC20Panic"
      )`
$DIR/test/transferhelper.spec.ts:2216:57-2216:66: `.deploy()`
$DIR/test/transferhelper.spec.ts:2262:29-2263:29: `
            .connect(sender)`
$DIR/test/transferhelper.spec.ts:2263:29-2264:53: `
            .bulkTransfer(transfers, tempConduitKey)`
$DIR/test/transferhelper.spec.ts:2277:29-2278:29: `
            .connect(sender)`
$DIR/test/transferhelper.spec.ts:2278:29-2279:53: `
            .bulkTransfer(transfers, tempConduitKey)`
$DIR/test/transferhelper.spec.ts:2288:7-2288:72: `await tempERC20Contract.connect(owner).mint(sender.address, 100);`
$DIR/test/transferhelper.spec.ts:2288:30-2288:45: `.connect(owner)`
$DIR/test/transferhelper.spec.ts:2288:45-2288:71: `.mint(sender.address, 100)`
$DIR/test/transferhelper.spec.ts:2290:56-2292:8: `.getContractFactory(
        "ConduitControllerMock"
      )`
$DIR/test/transferhelper.spec.ts:2293:71-2295:8: `.deploy(
        2 // ConduitMockInvalidMagic
      )`
$DIR/test/transferhelper.spec.ts:2297:53-2299:8: `.getContractFactory(
        "TransferHelper"
      )`
$DIR/test/transferhelper.spec.ts:2300:65-2302:8: `.deploy(
        mockConduitController.address
      )`
$DIR/test/transferhelper.spec.ts:2303:59-2303:68: `.slice(2)`
$DIR/test/transferhelper.spec.ts:2306:7-2308:55: `await mockConduitController
        .connect(owner)
        .createConduit(mockConduitKey, owner.address);`
$DIR/test/transferhelper.spec.ts:2306:34-2307:24: `
        .connect(owner)`
$DIR/test/transferhelper.spec.ts:2307:24-2308:54: `
        .createConduit(mockConduitKey, owner.address)`
$DIR/test/transferhelper.spec.ts:2311:36-2311:63: `.getConduit(mockConduitKey)`
$DIR/test/transferhelper.spec.ts:2314:7-2314:80: `await tempERC20Contract.connect(sender).approve(mockConduitAddress, 100);`
$DIR/test/transferhelper.spec.ts:2314:30-2314:46: `.connect(sender)`
$DIR/test/transferhelper.spec.ts:2314:46-2314:79: `.approve(mockConduitAddress, 100)`
$DIR/test/transferhelper.spec.ts:2356:27-2357:27: `
          .connect(sender)`
$DIR/test/transferhelper.spec.ts:2357:27-2358:51: `
          .bulkTransfer(transfers, mockConduitKey)`
$DIR/test/transferhelper.spec.ts:2368:7-2368:72: `await tempERC20Contract.connect(owner).mint(sender.address, 100);`
$DIR/test/transferhelper.spec.ts:2368:30-2368:45: `.connect(owner)`
$DIR/test/transferhelper.spec.ts:2368:45-2368:71: `.mint(sender.address, 100)`
$DIR/test/transferhelper.spec.ts:2370:56-2372:8: `.getContractFactory(
        "ConduitControllerMock"
      )`
$DIR/test/transferhelper.spec.ts:2373:71-2375:8: `.deploy(
        3 // ConduitMockRevertBytes
      )`
$DIR/test/transferhelper.spec.ts:2377:53-2379:8: `.getContractFactory(
        "TransferHelper"
      )`
$DIR/test/transferhelper.spec.ts:2380:65-2382:8: `.deploy(
        mockConduitController.address
      )`
$DIR/test/transferhelper.spec.ts:2383:59-2383:68: `.slice(2)`
$DIR/test/transferhelper.spec.ts:2386:7-2388:55: `await mockConduitController
        .connect(owner)
        .createConduit(mockConduitKey, owner.address);`
$DIR/test/transferhelper.spec.ts:2386:34-2387:24: `
        .connect(owner)`
$DIR/test/transferhelper.spec.ts:2387:24-2388:54: `
        .createConduit(mockConduitKey, owner.address)`
$DIR/test/transferhelper.spec.ts:2391:36-2391:63: `.getConduit(mockConduitKey)`
$DIR/test/transferhelper.spec.ts:2393:7-2393:80: `await tempERC20Contract.connect(sender).approve(mockConduitAddress, 100);`
$DIR/test/transferhelper.spec.ts:2393:30-2393:46: `.connect(sender)`
$DIR/test/transferhelper.spec.ts:2393:46-2393:79: `.approve(mockConduitAddress, 100)`
$DIR/test/transferhelper.spec.ts:2452:41-2452:67: `.utils.id("CustomError()")`
$DIR/test/transferhelper.spec.ts:2452:67-2452:80: `.slice(0, 10)`
$DIR/test/transferhelper.spec.ts:2455:27-2456:27: `
          .connect(sender)`
$DIR/test/transferhelper.spec.ts:2456:27-2457:51: `
          .bulkTransfer(transfers, mockConduitKey)`
$DIR/test/transferhelper.spec.ts:2539:27-2540:27: `
          .connect(sender)`
$DIR/test/transferhelper.spec.ts:2540:27-2541:51: `
          .bulkTransfer(transfers, tempConduitKey)`
$DIR/test/typehashdirectory.spec.ts:18:32-18:58: `.provider.getCode(address)`
$DIR/test/zone.spec.ts:108:42-111:6: `.getContractFactory(
      "PausableZoneController",
      owner
    )`
$DIR/test/zone.spec.ts:112:44-112:66: `.deploy(owner.address)`
$DIR/test/zone.spec.ts:136:43-137:24: `
        .connect(buyer)`
$DIR/test/zone.spec.ts:137:24-140:11: `
        .fulfillOrder(order, toKey(0), {
          value,
        })`
$DIR/test/zone.spec.ts:142:31-142:38: `.wait()`
$DIR/test/zone.spec.ts:156:48-159:6: `.getContractFactory(
      "PausableZoneController",
      owner
    )`
$DIR/test/zone.spec.ts:160:54-160:76: `.deploy(owner.address)`
$DIR/test/zone.spec.ts:191:43-192:24: `
        .connect(buyer)`
$DIR/test/zone.spec.ts:192:24-201:10: `
        .fulfillAdvancedOrder(
          order,
          criteriaResolvers,
          toKey(0),
          ethers.constants.AddressZero,
          {
            value,
          }
        )`
$DIR/test/zone.spec.ts:203:31-203:38: `.wait()`
$DIR/test/zone.spec.ts:223:48-226:6: `.getContractFactory(
      "PausableZoneController",
      owner
    )`
$DIR/test/zone.spec.ts:227:54-227:76: `.deploy(owner.address)`
$DIR/test/zone.spec.ts:251:43-252:24: `
        .connect(buyer)`
$DIR/test/zone.spec.ts:252:24-261:10: `
        .fulfillAdvancedOrder(
          order,
          [],
          toKey(0),
          ethers.constants.AddressZero,
          {
            value,
          }
        )`
$DIR/test/zone.spec.ts:263:31-263:38: `.wait()`
$DIR/test/zone.spec.ts:278:55-281:6: `.getContractFactory(
      "PausableZoneController",
      owner
    )`
$DIR/test/zone.spec.ts:282:71-284:6: `.deploy(
      owner.address
    )`
$DIR/test/zone.spec.ts:377:6-379:6: `.map(([offerArr, considerationArr]) =>
      toFulfillment(offerArr, considerationArr)
    )`
$DIR/test/zone.spec.ts:382:29-383:24: `
        .connect(buyer)`
$DIR/test/zone.spec.ts:383:24-390:10: `
        .callStatic.executeMatchOrders(
          zoneAddr,
          marketplaceContract.address,
          [orderOne, orderTwo, orderThree],
          fulfillments,
          { value: 0 }
        )`
$DIR/test/zone.spec.ts:395:52-396:22: `
      .connect(owner)`
$DIR/test/zone.spec.ts:396:22-403:8: `
      .callStatic.executeMatchOrders(
        zoneAddr,
        marketplaceContract.address,
        [orderOne, orderTwo, orderThree],
        fulfillments,
        { value: 0 }
      )`
$DIR/test/zone.spec.ts:407:44-408:22: `
      .connect(owner)`
$DIR/test/zone.spec.ts:408:22-414:8: `
      .executeMatchOrders(
        zoneAddr,
        marketplaceContract.address,
        [orderOne, orderTwo, orderThree],
        fulfillments
      )`
$DIR/test/zone.spec.ts:424:25-428:6: `.forEach((orderFulfilledEvent, i) =>
      expect(orderFulfilledEvent.data.orderHash).to.be.equal(
        actualOrderHashes[i]
      )
    )`
$DIR/test/zone.spec.ts:432:55-435:6: `.getContractFactory(
      "PausableZoneController",
      owner
    )`
$DIR/test/zone.spec.ts:436:71-438:6: `.deploy(
      owner.address
    )`
$DIR/test/zone.spec.ts:531:6-533:6: `.map(([offerArr, considerationArr]) =>
      toFulfillment(offerArr, considerationArr)
    )`
$DIR/test/zone.spec.ts:536:29-537:24: `
        .connect(buyer)`
$DIR/test/zone.spec.ts:537:24-545:10: `
        .executeMatchAdvancedOrders(
          zoneAddr,
          marketplaceContract.address,
          [orderOne, orderTwo, orderThree],
          [],
          fulfillments,
          { value: 0 }
        )`
$DIR/test/zone.spec.ts:550:52-551:22: `
      .connect(owner)`
$DIR/test/zone.spec.ts:551:22-559:8: `
      .callStatic.executeMatchAdvancedOrders(
        zoneAddr,
        marketplaceContract.address,
        [orderOne, orderTwo, orderThree],
        [],
        fulfillments,
        { value: 0 }
      )`
$DIR/test/zone.spec.ts:563:44-564:22: `
      .connect(owner)`
$DIR/test/zone.spec.ts:564:22-571:8: `
      .executeMatchAdvancedOrders(
        zoneAddr,
        marketplaceContract.address,
        [orderOne, orderTwo, orderThree],
        [],
        fulfillments
      )`
$DIR/test/zone.spec.ts:581:25-585:6: `.forEach((orderFulfilledEvent, i) =>
      expect(orderFulfilledEvent.data.orderHash).to.be.equal(
        actualOrderHashes[i]
      )
    )`
$DIR/test/zone.spec.ts:589:55-592:6: `.getContractFactory(
      "PausableZoneController",
      owner
    )`
$DIR/test/zone.spec.ts:594:71-596:6: `.deploy(
      owner.address
    )`
$DIR/test/zone.spec.ts:601:29-601:45: `.connect(seller)`
$DIR/test/zone.spec.ts:601:45-601:62: `.createZone(salt)`
$DIR/test/zone.spec.ts:605:5-605:46: `await createZone(pausableZoneController);`
$DIR/test/zone.spec.ts:609:55-612:6: `.getContractFactory(
      "PausableZoneController",
      owner
    )`
$DIR/test/zone.spec.ts:613:71-615:6: `.deploy(
      owner.address
    )`
$DIR/test/zone.spec.ts:620:38-620:80: `.getContractFactory("PausableZone", owner)`
$DIR/test/zone.spec.ts:623:36-623:53: `.attach(zoneAddr)`
$DIR/test/zone.spec.ts:626:40-626:55: `.connect(buyer)`
$DIR/test/zone.spec.ts:626:55-626:71: `.pause(zoneAddr)`
$DIR/test/zone.spec.ts:630:22-630:37: `.connect(buyer)`
$DIR/test/zone.spec.ts:630:37-630:53: `.pause(zoneAddr)`
$DIR/test/zone.spec.ts:633:29-633:44: `.connect(buyer)`
$DIR/test/zone.spec.ts:633:44-633:73: `.assignPauser(seller.address)`
$DIR/test/zone.spec.ts:637:29-637:44: `.connect(owner)`
$DIR/test/zone.spec.ts:637:44-637:71: `.assignPauser(toAddress(0))`
$DIR/test/zone.spec.ts:644:5-644:77: `await pausableZoneController.connect(owner).assignPauser(buyer.address);`
$DIR/test/zone.spec.ts:644:33-644:48: `.connect(owner)`
$DIR/test/zone.spec.ts:644:48-644:76: `.assignPauser(buyer.address)`
$DIR/test/zone.spec.ts:647:40-647:49: `.pauser()`
$DIR/test/zone.spec.ts:650:44-650:59: `.connect(buyer)`
$DIR/test/zone.spec.ts:650:59-650:75: `.pause(zoneAddr)`
$DIR/test/zone.spec.ts:660:55-663:6: `.getContractFactory(
      "PausableZoneController",
      owner
    )`
$DIR/test/zone.spec.ts:664:71-666:6: `.deploy(
      owner.address
    )`
$DIR/test/zone.spec.ts:671:5-671:51: `await pausableZoneController.createZone(salt);`
$DIR/test/zone.spec.ts:671:33-671:50: `.createZone(salt)`
$DIR/test/zone.spec.ts:675:29-675:46: `.createZone(salt)`
$DIR/test/zone.spec.ts:683:55-686:6: `.getContractFactory(
      "PausableZoneController",
      owner
    )`
$DIR/test/zone.spec.ts:687:71-689:6: `.deploy(
      owner.address
    )`
$DIR/test/zone.spec.ts:714:27-714:43: `.pause(zoneAddr)`
$DIR/test/zone.spec.ts:718:28-718:43: `.connect(buyer)`
$DIR/test/zone.spec.ts:718:43-720:11: `.fulfillOrder(order, toKey(0), {
          value,
        })`
$DIR/test/zone.spec.ts:729:28-729:43: `.connect(buyer)`
$DIR/test/zone.spec.ts:729:43-731:11: `.fulfillOrder(order, toKey(0), {
          value,
        })`
$DIR/test/zone.spec.ts:737:55-740:6: `.getContractFactory(
      "PausableZoneController",
      owner
    )`
$DIR/test/zone.spec.ts:741:71-743:6: `.deploy(
      owner.address
    )`
$DIR/test/zone.spec.ts:748:40-748:55: `.connect(buyer)`
$DIR/test/zone.spec.ts:748:55-748:71: `.pause(zoneAddr)`
$DIR/test/zone.spec.ts:753:55-756:6: `.getContractFactory(
      "PausableZoneController",
      owner
    )`
$DIR/test/zone.spec.ts:757:71-759:6: `.deploy(
      owner.address
    )`
$DIR/test/zone.spec.ts:782:29-783:24: `
        .connect(buyer)`
$DIR/test/zone.spec.ts:783:24-784:80: `
        .cancelOrders(zoneAddr, marketplaceContract.address, [orderComponents])`
$DIR/test/zone.spec.ts:787:5-791:7: `await pausableZoneController.cancelOrders(
      zoneAddr,
      marketplaceContract.address,
      [orderComponents]
    );`
$DIR/test/zone.spec.ts:787:33-791:6: `.cancelOrders(
      zoneAddr,
      marketplaceContract.address,
      [orderComponents]
    )`
$DIR/test/zone.spec.ts:795:55-798:6: `.getContractFactory(
      "PausableZoneController",
      owner
    )`
$DIR/test/zone.spec.ts:799:71-801:6: `.deploy(
      owner.address
    )`
$DIR/test/zone.spec.ts:807:38-807:80: `.getContractFactory("PausableZone", owner)`
$DIR/test/zone.spec.ts:810:36-810:53: `.attach(zoneAddr)`
$DIR/test/zone.spec.ts:831:11-832:25: `
        .connect(seller)`
$DIR/test/zone.spec.ts:832:25-833:70: `
        .cancelOrders(marketplaceContract.address, [orderComponents])`
$DIR/test/zone.spec.ts:837:5-839:49: `await pausableZoneController
      .connect(owner)
      .assignOperator(zoneAddr, seller.address);`
$DIR/test/zone.spec.ts:837:33-838:22: `
      .connect(owner)`
$DIR/test/zone.spec.ts:838:22-839:48: `
      .assignOperator(zoneAddr, seller.address)`
$DIR/test/zone.spec.ts:842:5-844:69: `await zone
      .connect(seller)
      .cancelOrders(marketplaceContract.address, [orderComponents]);`
$DIR/test/zone.spec.ts:842:15-843:23: `
      .connect(seller)`
$DIR/test/zone.spec.ts:843:23-844:68: `
      .cancelOrders(marketplaceContract.address, [orderComponents])`
$DIR/test/zone.spec.ts:848:29-849:24: `
        .connect(owner)`
$DIR/test/zone.spec.ts:849:24-850:48: `
        .assignOperator(zoneAddr, toAddress(0))`
$DIR/test/zone.spec.ts:858:55-861:6: `.getContractFactory(
      "PausableZoneController",
      owner
    )`
$DIR/test/zone.spec.ts:862:71-864:6: `.deploy(
      owner.address
    )`
$DIR/test/zone.spec.ts:870:38-870:80: `.getContractFactory("PausableZone", owner)`
$DIR/test/zone.spec.ts:873:36-873:53: `.attach(zoneAddr)`
$DIR/test/zone.spec.ts:877:29-878:25: `
        .connect(seller)`
$DIR/test/zone.spec.ts:878:25-879:50: `
        .assignOperator(zoneAddr, seller.address)`
$DIR/test/zone.spec.ts:883:22-883:38: `.connect(seller)`
$DIR/test/zone.spec.ts:883:38-883:69: `.assignOperator(seller.address)`
$DIR/test/zone.spec.ts:888:55-891:6: `.getContractFactory(
      "PausableZoneController",
      owner
    )`
$DIR/test/zone.spec.ts:892:71-894:6: `.deploy(
      owner.address
    )`
$DIR/test/zone.spec.ts:896:5-896:46: `await createZone(pausableZoneController);`
$DIR/test/zone.spec.ts:915:37-915:52: `.connect(buyer)`
$DIR/test/zone.spec.ts:915:52-915:78: `.cancel([orderComponents])`
$DIR/test/zone.spec.ts:920:55-923:6: `.getContractFactory(
      "PausableZoneController",
      owner
    )`
$DIR/test/zone.spec.ts:924:71-926:6: `.deploy(
      owner.address
    )`
$DIR/test/zone.spec.ts:949:29-950:24: `
        .connect(buyer)`
$DIR/test/zone.spec.ts:950:24-951:80: `
        .cancelOrders(zoneAddr, marketplaceContract.address, [orderComponents])`
$DIR/test/zone.spec.ts:956:55-959:6: `.getContractFactory(
      "PausableZoneController",
      owner
    )`
$DIR/test/zone.spec.ts:960:71-962:6: `.deploy(
      owner.address
    )`
$DIR/test/zone.spec.ts:964:5-964:46: `await createZone(pausableZoneController);`
$DIR/test/zone.spec.ts:967:29-967:44: `.connect(buyer)`
$DIR/test/zone.spec.ts:967:44-967:77: `.transferOwnership(buyer.address)`
$DIR/test/zone.spec.ts:971:29-971:44: `.connect(owner)`
$DIR/test/zone.spec.ts:971:44-971:76: `.transferOwnership(toAddress(0))`
$DIR/test/zone.spec.ts:978:29-978:45: `.connect(seller)`
$DIR/test/zone.spec.ts:978:45-978:71: `.cancelOwnershipTransfer()`
$DIR/test/zone.spec.ts:982:29-982:44: `.connect(buyer)`
$DIR/test/zone.spec.ts:982:44-982:62: `.acceptOwnership()`
$DIR/test/zone.spec.ts:989:5-991:41: `await pausableZoneController
      .connect(owner)
      .transferOwnership(buyer.address);`
$DIR/test/zone.spec.ts:989:33-990:22: `
      .connect(owner)`
$DIR/test/zone.spec.ts:990:22-991:40: `
      .transferOwnership(buyer.address)`
$DIR/test/zone.spec.ts:994:40-994:57: `.potentialOwner()`
$DIR/test/zone.spec.ts:998:5-998:75: `await pausableZoneController.connect(owner).cancelOwnershipTransfer();`
$DIR/test/zone.spec.ts:998:33-998:48: `.connect(owner)`
$DIR/test/zone.spec.ts:998:48-998:74: `.cancelOwnershipTransfer()`
$DIR/test/zone.spec.ts:999:5-1001:41: `await pausableZoneController
      .connect(owner)
      .transferOwnership(buyer.address);`
$DIR/test/zone.spec.ts:999:33-1000:22: `
      .connect(owner)`
$DIR/test/zone.spec.ts:1000:22-1001:40: `
      .transferOwnership(buyer.address)`
$DIR/test/zone.spec.ts:1002:5-1002:67: `await pausableZoneController.connect(buyer).acceptOwnership();`
$DIR/test/zone.spec.ts:1002:33-1002:48: `.connect(buyer)`
$DIR/test/zone.spec.ts:1002:48-1002:66: `.acceptOwnership()`
$DIR/test/zone.spec.ts:1004:40-1004:48: `.owner()`
$DIR/test/zone.spec.ts:1075:19-1078:8: `.getContractFactory(
        "TestTransferValidationZoneOfferer",
        owner
      )`
$DIR/test/zone.spec.ts:1080:64-1082:6: `.deploy(
      ethers.constants.AddressZero
    )`
$DIR/test/zone.spec.ts:1098:43-1099:24: `
        .connect(buyer)`
$DIR/test/zone.spec.ts:1099:24-1102:11: `
        .fulfillOrder(order, toKey(0), {
          value,
        })`
$DIR/test/zone.spec.ts:1104:31-1104:38: `.wait()`
$DIR/test/zone.spec.ts:1135:19-1138:8: `.getContractFactory(
        "TestTransferValidationZoneOfferer",
        owner
      )`
$DIR/test/zone.spec.ts:1140:64-1142:6: `.deploy(
      ethers.constants.AddressZero
    )`
$DIR/test/zone.spec.ts:1154:43-1155:24: `
        .connect(buyer)`
$DIR/test/zone.spec.ts:1155:24-1164:10: `
        .fulfillAdvancedOrder(
          order,
          criteriaResolvers,
          toKey(0),
          ethers.constants.AddressZero,
          {
            value,
          }
        )`
$DIR/test/zone.spec.ts:1166:31-1166:38: `.wait()`
$DIR/test/zone.spec.ts:1197:19-1200:8: `.getContractFactory(
        "TestTransferValidationZoneOfferer",
        owner
      )`
$DIR/test/zone.spec.ts:1202:64-1204:6: `.deploy(
      ethers.constants.AddressZero
    )`
$DIR/test/zone.spec.ts:1215:43-1216:24: `
        .connect(buyer)`
$DIR/test/zone.spec.ts:1216:24-1225:10: `
        .fulfillAdvancedOrder(
          order,
          [],
          toKey(0),
          ethers.constants.AddressZero,
          {
            value,
          }
        )`
$DIR/test/zone.spec.ts:1227:31-1227:38: `.wait()`
$DIR/test/zone.spec.ts:1250:49-1250:56: `.div(2)`
$DIR/test/zone.spec.ts:1250:64-1250:71: `.div(2)`
$DIR/test/zone.spec.ts:1261:19-1264:8: `.getContractFactory(
        "TestTransferValidationZoneOfferer",
        owner
      )`
$DIR/test/zone.spec.ts:1267:49-1269:8: `.deploy(
        ethers.constants.AddressZero
      )`
$DIR/test/zone.spec.ts:1302:5-1305:7: `orderOne.extraData = ethers.utils.defaultAbiCoder.encode(
      ["bytes32[]"],
      [[orderHashOne, orderHashTwo]]
    );`
$DIR/test/zone.spec.ts:1302:32-1305:6: `.utils.defaultAbiCoder.encode(
      ["bytes32[]"],
      [[orderHashOne, orderHashTwo]]
    )`
$DIR/test/zone.spec.ts:1329:6-1329:35: `.map(toFulfillmentComponents)`
$DIR/test/zone.spec.ts:1334:28-1335:26: `
          .connect(buyer)`
$DIR/test/zone.spec.ts:1335:26-1347:12: `
          .fulfillAvailableAdvancedOrders(
            [orderOne, orderTwo],
            [],
            offerComponents,
            considerationComponents,
            toKey(0),
            ethers.constants.AddressZero,
            100,
            {
              value: value.mul(2),
            }
          )`
$DIR/test/zone.spec.ts:1345:27-1345:34: `.mul(2)`
$DIR/test/zone.spec.ts:1356:41-1357:28: `
            .connect(buyer)`
$DIR/test/zone.spec.ts:1357:28-1369:14: `
            .fulfillAvailableAdvancedOrders(
              [orderOne, orderTwo],
              [],
              offerComponents,
              considerationComponents,
              toKey(0),
              ethers.constants.AddressZero,
              100,
              {
                value: value.mul(2),
              }
            )`
$DIR/test/zone.spec.ts:1367:29-1367:36: `.mul(2)`
$DIR/test/zone.spec.ts:1370:43-1370:50: `.wait()`
