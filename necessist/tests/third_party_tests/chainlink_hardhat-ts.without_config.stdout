$DIR/contracts/test/cross-version/KeeperCompatible.test.ts:19:9-23:11: `publicAbi(contract, [
          'checkUpkeep',
          'performUpkeep',
          'verifyCannotExecute',
        ])`
$DIR/contracts/test/cross-version/KeeperCompatible.test.ts:27:9-29:33: `await contract
          .connect(ethers.constants.AddressZero)
          .verifyCannotExecute()`
$DIR/contracts/test/cross-version/KeeperCompatible.test.ts:27:23-28:49: `
          .connect(ethers.constants.AddressZero)`
$DIR/contracts/test/cross-version/KeeperCompatible.test.ts:28:49-29:33: `
          .verifyCannotExecute()`
$DIR/contracts/test/cross-version/KeeperCompatible.test.ts:30:30-30:52: `.verifyCannotExecute()`
$DIR/contracts/test/v0.6/AggregatorFacade.test.ts:74:5-86:7: `publicAbi(facade, [
      'aggregator',
      'decimals',
      'description',
      'getAnswer',
      'getRoundData',
      'getTimestamp',
      'latestAnswer',
      'latestRound',
      'latestRoundData',
      'latestTimestamp',
      'version',
    ])`
$DIR/contracts/test/v0.6/AggregatorFacade.test.ts:91:7-91:54: `bigNumEquals(decimals, await facade.decimals())`
$DIR/contracts/test/v0.6/AggregatorFacade.test.ts:91:42-91:53: `.decimals()`
$DIR/contracts/test/v0.6/AggregatorFacade.test.ts:95:45-95:59: `.description()`
$DIR/contracts/test/v0.6/AggregatorFacade.test.ts:99:7-99:46: `bigNumEquals(2, await facade.version())`
$DIR/contracts/test/v0.6/AggregatorFacade.test.ts:99:35-99:45: `.version()`
$DIR/contracts/test/v0.6/AggregatorFacade.test.ts:105:7-105:58: `bigNumEquals(response, await facade.latestAnswer())`
$DIR/contracts/test/v0.6/AggregatorFacade.test.ts:105:42-105:57: `.latestAnswer()`
$DIR/contracts/test/v0.6/AggregatorFacade.test.ts:106:39-106:53: `.latestRound()`
$DIR/contracts/test/v0.6/AggregatorFacade.test.ts:107:7-107:66: `bigNumEquals(response, await facade.getAnswer(latestRound))`
$DIR/contracts/test/v0.6/AggregatorFacade.test.ts:107:42-107:65: `.getAnswer(latestRound)`
$DIR/contracts/test/v0.6/AggregatorFacade.test.ts:113:38-113:56: `.latestTimestamp()`
$DIR/contracts/test/v0.6/AggregatorFacade.test.ts:115:7-115:59: `bigNumEquals(height, await facade.latestTimestamp())`
$DIR/contracts/test/v0.6/AggregatorFacade.test.ts:115:40-115:58: `.latestTimestamp()`
$DIR/contracts/test/v0.6/AggregatorFacade.test.ts:116:39-116:53: `.latestRound()`
$DIR/contracts/test/v0.6/AggregatorFacade.test.ts:117:7-120:8: `bigNumEquals(
        await aggregator.latestTimestamp(),
        await facade.getTimestamp(latestRound),
      )`
$DIR/contracts/test/v0.6/AggregatorFacade.test.ts:118:25-118:43: `.latestTimestamp()`
$DIR/contracts/test/v0.6/AggregatorFacade.test.ts:119:21-119:47: `.getTimestamp(latestRound)`
$DIR/contracts/test/v0.6/AggregatorFacade.test.ts:126:39-126:53: `.latestRound()`
$DIR/contracts/test/v0.6/AggregatorFacade.test.ts:126:54-126:61: `.sub(1)`
$DIR/contracts/test/v0.6/AggregatorFacade.test.ts:127:33-127:58: `.getRoundData(previousId)`
$DIR/contracts/test/v0.6/AggregatorFacade.test.ts:128:7-128:46: `bigNumEquals(previousId, round.roundId)`
$DIR/contracts/test/v0.6/AggregatorFacade.test.ts:129:7-129:51: `bigNumEquals(previousResponse, round.answer)`
$DIR/contracts/test/v0.6/AggregatorFacade.test.ts:130:7-130:75: `bigNumEquals(await facade.getTimestamp(previousId), round.startedAt)`
$DIR/contracts/test/v0.6/AggregatorFacade.test.ts:130:32-130:57: `.getTimestamp(previousId)`
$DIR/contracts/test/v0.6/AggregatorFacade.test.ts:131:7-131:75: `bigNumEquals(await facade.getTimestamp(previousId), round.updatedAt)`
$DIR/contracts/test/v0.6/AggregatorFacade.test.ts:131:32-131:57: `.getTimestamp(previousId)`
$DIR/contracts/test/v0.6/AggregatorFacade.test.ts:132:7-132:54: `bigNumEquals(previousId, round.answeredInRound)`
$DIR/contracts/test/v0.6/AggregatorFacade.test.ts:137:7-137:71: `await evmRevert(facade.getRoundData(roundId), 'No data present')`
$DIR/contracts/test/v0.6/AggregatorFacade.test.ts:137:29-137:51: `.getRoundData(roundId)`
$DIR/contracts/test/v0.6/AggregatorFacade.test.ts:143:36-143:50: `.latestRound()`
$DIR/contracts/test/v0.6/AggregatorFacade.test.ts:144:33-144:51: `.latestRoundData()`
$DIR/contracts/test/v0.6/AggregatorFacade.test.ts:145:7-145:44: `bigNumEquals(latestId, round.roundId)`
$DIR/contracts/test/v0.6/AggregatorFacade.test.ts:146:7-146:43: `bigNumEquals(response, round.answer)`
$DIR/contracts/test/v0.6/AggregatorFacade.test.ts:147:7-147:73: `bigNumEquals(await facade.getTimestamp(latestId), round.startedAt)`
$DIR/contracts/test/v0.6/AggregatorFacade.test.ts:147:32-147:55: `.getTimestamp(latestId)`
$DIR/contracts/test/v0.6/AggregatorFacade.test.ts:148:7-148:73: `bigNumEquals(await facade.getTimestamp(latestId), round.updatedAt)`
$DIR/contracts/test/v0.6/AggregatorFacade.test.ts:148:32-148:55: `.getTimestamp(latestId)`
$DIR/contracts/test/v0.6/AggregatorFacade.test.ts:149:7-149:52: `bigNumEquals(latestId, round.answeredInRound)`
$DIR/contracts/test/v0.6/AggregatorFacade.test.ts:163:9-163:69: `await evmRevert(facade.latestRoundData(), 'No data present')`
$DIR/contracts/test/v0.6/AggregatorFacade.test.ts:163:31-163:49: `.latestRoundData()`
$DIR/contracts/test/v0.6/BasicConsumer.test.ts:56:29-58:6: `.provider.getTransactionReceipt(
      cc.deployTransaction.hash ?? '',
    )`
$DIR/contracts/test/v0.6/BasicConsumer.test.ts:65:24-65:64: `.requestEthereumPrice(currency, payment)`
$DIR/contracts/test/v0.6/BasicConsumer.test.ts:74:28-74:68: `.requestEthereumPrice(currency, payment)`
$DIR/contracts/test/v0.6/BasicConsumer.test.ts:75:33-75:40: `.wait()`
$DIR/contracts/test/v0.6/BasicConsumer.test.ts:78:34-78:48: `.toLowerCase()`
$DIR/contracts/test/v0.6/BasicConsumer.test.ts:78:52-78:74: `.address.toLowerCase()`
$DIR/contracts/test/v0.6/BasicConsumer.test.ts:87:9-87:50: `bigNumEquals(toWei('1'), request.payment)`
$DIR/contracts/test/v0.6/BasicConsumer.test.ts:88:24-88:46: `.address.toLowerCase()`
$DIR/contracts/test/v0.6/BasicConsumer.test.ts:88:55-88:79: `.requester.toLowerCase()`
$DIR/contracts/test/v0.6/BasicConsumer.test.ts:90:40-90:70: `.decodeFirstSync(request.data)`
$DIR/contracts/test/v0.6/BasicConsumer.test.ts:94:28-94:68: `.requestEthereumPrice(currency, payment)`
$DIR/contracts/test/v0.6/BasicConsumer.test.ts:95:33-95:40: `.wait()`
$DIR/contracts/test/v0.6/BasicConsumer.test.ts:115:7-117:73: `await oc
        .connect(roles.oracleNode)
        .fulfillOracleRequest(...convertFufillParams(request, response))`
$DIR/contracts/test/v0.6/BasicConsumer.test.ts:115:15-116:35: `
        .connect(roles.oracleNode)`
$DIR/contracts/test/v0.6/BasicConsumer.test.ts:116:35-117:73: `
        .fulfillOracleRequest(...convertFufillParams(request, response))`
$DIR/contracts/test/v0.6/BasicConsumer.test.ts:119:36-119:51: `.currentPrice()`
$DIR/contracts/test/v0.6/BasicConsumer.test.ts:124:26-125:35: `
        .connect(roles.oracleNode)`
$DIR/contracts/test/v0.6/BasicConsumer.test.ts:125:35-126:73: `
        .fulfillOracleRequest(...convertFufillParams(request, response))`
$DIR/contracts/test/v0.6/BasicConsumer.test.ts:127:31-127:38: `.wait()`
$DIR/contracts/test/v0.6/BasicConsumer.test.ts:157:9-157:43: `d('otherRequest %s', otherRequest)`
$DIR/contracts/test/v0.6/BasicConsumer.test.ts:158:9-160:80: `await oc
          .connect(roles.oracleNode)
          .fulfillOracleRequest(...convertFufillParams(otherRequest, response))`
$DIR/contracts/test/v0.6/BasicConsumer.test.ts:158:17-159:37: `
          .connect(roles.oracleNode)`
$DIR/contracts/test/v0.6/BasicConsumer.test.ts:159:37-160:80: `
          .fulfillOracleRequest(...convertFufillParams(otherRequest, response))`
$DIR/contracts/test/v0.6/BasicConsumer.test.ts:162:34-162:49: `.currentPrice()`
$DIR/contracts/test/v0.6/BasicConsumer.test.ts:164:28-164:63: `.utils.parseBytes32String(received)`
$DIR/contracts/test/v0.6/BasicConsumer.test.ts:170:9-172:10: `await evmRevert(
          cc.connect(roles.oracleNode).fulfill(request.requestId, response),
        )`
$DIR/contracts/test/v0.6/BasicConsumer.test.ts:171:13-171:39: `.connect(roles.oracleNode)`
$DIR/contracts/test/v0.6/BasicConsumer.test.ts:171:39-171:76: `.fulfill(request.requestId, response)`
$DIR/contracts/test/v0.6/BasicConsumer.test.ts:174:34-174:49: `.currentPrice()`
$DIR/contracts/test/v0.6/BasicConsumer.test.ts:175:28-175:63: `.utils.parseBytes32String(received)`
$DIR/contracts/test/v0.6/BasicConsumer.test.ts:195:13-196:37: `
            .connect(roles.consumer)`
$DIR/contracts/test/v0.6/BasicConsumer.test.ts:196:37-203:14: `
            .cancelRequest(
              oc.address,
              request.requestId,
              request.payment,
              request.callbackFunc,
              request.expiration,
            )`
$DIR/contracts/test/v0.6/BasicConsumer.test.ts:209:9-209:52: `await increaseTime5Minutes(ethers.provider)`
$DIR/contracts/test/v0.6/BasicConsumer.test.ts:211:9-219:12: `await cc
          .connect(roles.consumer)
          .cancelRequest(
            oc.address,
            request.requestId,
            request.payment,
            request.callbackFunc,
            request.expiration,
          )`
$DIR/contracts/test/v0.6/BasicConsumer.test.ts:211:17-212:35: `
          .connect(roles.consumer)`
$DIR/contracts/test/v0.6/BasicConsumer.test.ts:212:35-219:12: `
          .cancelRequest(
            oc.address,
            request.requestId,
            request.payment,
            request.callbackFunc,
            request.expiration,
          )`
$DIR/contracts/test/v0.6/BasicConsumer.test.ts:234:7-234:54: `await cc.connect(roles.consumer).withdrawLink()`
$DIR/contracts/test/v0.6/BasicConsumer.test.ts:234:15-234:39: `.connect(roles.consumer)`
$DIR/contracts/test/v0.6/BasicConsumer.test.ts:234:39-234:54: `.withdrawLink()`
$DIR/contracts/test/v0.6/BasicConsumer.test.ts:235:35-235:57: `.balanceOf(cc.address)`
$DIR/contracts/test/v0.6/BasicConsumer.test.ts:236:40-238:8: `.from(
        await link.balanceOf(await roles.consumer.getAddress()),
      )`
$DIR/contracts/test/v0.6/BasicConsumer.test.ts:237:19-237:64: `.balanceOf(await roles.consumer.getAddress())`
$DIR/contracts/test/v0.6/BasicConsumer.test.ts:237:41-237:63: `.consumer.getAddress()`
$DIR/contracts/test/v0.6/BasicConsumer.test.ts:239:7-239:33: `bigNumEquals(ccBalance, 0)`
$DIR/contracts/test/v0.6/BasicConsumer.test.ts:240:7-240:51: `bigNumEquals(consumerBalance, depositAmount)`
$DIR/contracts/test/v0.6/BlockhashStore.test.ts:201:33-201:56: `.getBlockhash(99999999)`
$DIR/contracts/test/v0.6/BlockhashStore.test.ts:208:17-208:58: `.utils.keccak256(blocks[i + 1].rlpHeader)`
$DIR/contracts/test/v0.6/BlockhashStore.test.ts:209:41-209:73: `.getBlockhash(blocks[i + 1].num)`
$DIR/contracts/test/v0.6/BlockhashStore.test.ts:211:9-213:69: `await blockhashStoreTestHelper
          .connect(personas.Default)
          .storeVerifyHeader(blocks[i].num, blocks[i + 1].rlpHeader)`
$DIR/contracts/test/v0.6/BlockhashStore.test.ts:211:39-212:37: `
          .connect(personas.Default)`
$DIR/contracts/test/v0.6/BlockhashStore.test.ts:212:37-213:69: `
          .storeVerifyHeader(blocks[i].num, blocks[i + 1].rlpHeader)`
$DIR/contracts/test/v0.6/BlockhashStore.test.ts:215:41-215:69: `.getBlockhash(blocks[i].num)`
$DIR/contracts/test/v0.6/BlockhashStore.test.ts:224:33-225:37: `
          .connect(personas.Default)`
$DIR/contracts/test/v0.6/BlockhashStore.test.ts:225:37-226:75: `
          .storeVerifyHeader(unknownBlock.num - 1, unknownBlock.rlpHeader)`
$DIR/contracts/test/v0.6/BlockhashStore.test.ts:231:33-231:43: `.slice(-1)`
$DIR/contracts/test/v0.6/BlockhashStore.test.ts:233:7-233:31: `modifiedHeader[137] += 1`
$DIR/contracts/test/v0.6/BlockhashStore.test.ts:235:33-236:37: `
          .connect(personas.Default)`
$DIR/contracts/test/v0.6/BlockhashStore.test.ts:236:37-237:64: `
          .storeVerifyHeader(lastBlock.num - 1, modifiedHeader)`
$DIR/contracts/test/v0.6/BlockhashStore.test.ts:242:7-242:49: `await ethers.provider.send('evm_mine', [])`
$DIR/contracts/test/v0.6/BlockhashStore.test.ts:242:19-242:49: `.provider.send('evm_mine', [])`
$DIR/contracts/test/v0.6/BlockhashStore.test.ts:244:30-244:56: `.provider.getBlockNumber()`
$DIR/contracts/test/v0.6/BlockhashStore.test.ts:245:7-245:72: `await blockhashStoreTestHelper.connect(personas.Default).store(n)`
$DIR/contracts/test/v0.6/BlockhashStore.test.ts:245:37-245:63: `.connect(personas.Default)`
$DIR/contracts/test/v0.6/BlockhashStore.test.ts:245:63-245:72: `.store(n)`
$DIR/contracts/test/v0.6/BlockhashStore.test.ts:248:39-248:55: `.getBlockhash(n)`
$DIR/contracts/test/v0.6/BlockhashStore.test.ts:249:22-249:43: `.provider.getBlock(n)`
$DIR/contracts/test/v0.6/BlockhashStore.test.ts:255:33-255:59: `.connect(personas.Default)`
$DIR/contracts/test/v0.6/BlockhashStore.test.ts:255:59-255:78: `.store(99999999999)`
$DIR/contracts/test/v0.6/BlockhashStore.test.ts:261:9-261:51: `await ethers.provider.send('evm_mine', [])`
$DIR/contracts/test/v0.6/BlockhashStore.test.ts:261:21-261:51: `.provider.send('evm_mine', [])`
$DIR/contracts/test/v0.6/BlockhashStore.test.ts:265:33-266:37: `
          .connect(personas.Default)`
$DIR/contracts/test/v0.6/BlockhashStore.test.ts:266:37-267:65: `
          .store((await ethers.provider.getBlockNumber()) - 256)`
$DIR/contracts/test/v0.6/BlockhashStore.test.ts:267:31-267:57: `.provider.getBlockNumber()`
$DIR/contracts/test/v0.6/BlockhashStore.test.ts:273:9-273:51: `await ethers.provider.send('evm_mine', [])`
$DIR/contracts/test/v0.6/BlockhashStore.test.ts:273:21-273:51: `.provider.send('evm_mine', [])`
$DIR/contracts/test/v0.6/BlockhashStore.test.ts:276:7-276:79: `await blockhashStoreTestHelper.connect(personas.Default).storeEarliest()`
$DIR/contracts/test/v0.6/BlockhashStore.test.ts:276:37-276:63: `.connect(personas.Default)`
$DIR/contracts/test/v0.6/BlockhashStore.test.ts:276:63-276:79: `.storeEarliest()`
$DIR/contracts/test/v0.6/BlockhashStore.test.ts:278:30-278:56: `.provider.getBlockNumber()`
$DIR/contracts/test/v0.6/BlockhashStore.test.ts:280:39-280:55: `.getBlockhash(n)`
$DIR/contracts/test/v0.6/BlockhashStore.test.ts:281:22-281:43: `.provider.getBlock(n)`
$DIR/contracts/test/v0.6/Chainlink.test.ts:31:5-39:7: `publicAbi(ccl, [
      'add',
      'addBytes',
      'addInt',
      'addStringArray',
      'addUint',
      'closeEvent',
      'setBuffer',
    ])`
$DIR/contracts/test/v0.6/Chainlink.test.ts:52:27-52:40: `.closeEvent()`
$DIR/contracts/test/v0.6/Chainlink.test.ts:61:7-61:42: `await ccl.setBuffer('0xA161616162')`
$DIR/contracts/test/v0.6/Chainlink.test.ts:61:16-61:42: `.setBuffer('0xA161616162')`
$DIR/contracts/test/v0.6/Chainlink.test.ts:62:27-62:40: `.closeEvent()`
$DIR/contracts/test/v0.6/Chainlink.test.ts:71:7-71:39: `await ccl.add('first', 'word!!')`
$DIR/contracts/test/v0.6/Chainlink.test.ts:71:16-71:39: `.add('first', 'word!!')`
$DIR/contracts/test/v0.6/Chainlink.test.ts:72:27-72:40: `.closeEvent()`
$DIR/contracts/test/v0.6/Chainlink.test.ts:79:7-79:36: `await ccl.add('first', 'uno')`
$DIR/contracts/test/v0.6/Chainlink.test.ts:79:16-79:36: `.add('first', 'uno')`
$DIR/contracts/test/v0.6/Chainlink.test.ts:80:7-80:37: `await ccl.add('second', 'dos')`
$DIR/contracts/test/v0.6/Chainlink.test.ts:80:16-80:37: `.add('second', 'dos')`
$DIR/contracts/test/v0.6/Chainlink.test.ts:81:27-81:40: `.closeEvent()`
$DIR/contracts/test/v0.6/Chainlink.test.ts:94:7-94:52: `await ccl.addBytes('first', '0xaabbccddeeff')`
$DIR/contracts/test/v0.6/Chainlink.test.ts:94:16-94:52: `.addBytes('first', '0xaabbccddeeff')`
$DIR/contracts/test/v0.6/Chainlink.test.ts:95:27-95:40: `.closeEvent()`
$DIR/contracts/test/v0.6/Chainlink.test.ts:103:7-103:46: `await ccl.addBytes('first', '0x756E6F')`
$DIR/contracts/test/v0.6/Chainlink.test.ts:103:16-103:46: `.addBytes('first', '0x756E6F')`
$DIR/contracts/test/v0.6/Chainlink.test.ts:104:7-104:47: `await ccl.addBytes('second', '0x646F73')`
$DIR/contracts/test/v0.6/Chainlink.test.ts:104:16-104:47: `.addBytes('second', '0x646F73')`
$DIR/contracts/test/v0.6/Chainlink.test.ts:105:27-105:40: `.closeEvent()`
$DIR/contracts/test/v0.6/Chainlink.test.ts:118:7-118:69: `await ccl.addBytes('first', ethers.utils.toUtf8Bytes('apple'))`
$DIR/contracts/test/v0.6/Chainlink.test.ts:118:16-118:69: `.addBytes('first', ethers.utils.toUtf8Bytes('apple'))`
$DIR/contracts/test/v0.6/Chainlink.test.ts:118:41-118:68: `.utils.toUtf8Bytes('apple')`
$DIR/contracts/test/v0.6/Chainlink.test.ts:119:27-119:40: `.closeEvent()`
$DIR/contracts/test/v0.6/Chainlink.test.ts:122:30-122:57: `.utils.toUtf8Bytes('apple')`
$DIR/contracts/test/v0.6/Chainlink.test.ts:129:7-129:35: `await ccl.addInt('first', 1)`
$DIR/contracts/test/v0.6/Chainlink.test.ts:129:16-129:35: `.addInt('first', 1)`
$DIR/contracts/test/v0.6/Chainlink.test.ts:130:27-130:40: `.closeEvent()`
$DIR/contracts/test/v0.6/Chainlink.test.ts:137:7-137:35: `await ccl.addInt('first', 1)`
$DIR/contracts/test/v0.6/Chainlink.test.ts:137:16-137:35: `.addInt('first', 1)`
$DIR/contracts/test/v0.6/Chainlink.test.ts:138:7-138:36: `await ccl.addInt('second', 2)`
$DIR/contracts/test/v0.6/Chainlink.test.ts:138:16-138:36: `.addInt('second', 2)`
$DIR/contracts/test/v0.6/Chainlink.test.ts:139:27-139:40: `.closeEvent()`
$DIR/contracts/test/v0.6/Chainlink.test.ts:152:7-152:36: `await ccl.addUint('first', 1)`
$DIR/contracts/test/v0.6/Chainlink.test.ts:152:16-152:36: `.addUint('first', 1)`
$DIR/contracts/test/v0.6/Chainlink.test.ts:153:27-153:40: `.closeEvent()`
$DIR/contracts/test/v0.6/Chainlink.test.ts:160:7-160:36: `await ccl.addUint('first', 1)`
$DIR/contracts/test/v0.6/Chainlink.test.ts:160:16-160:36: `.addUint('first', 1)`
$DIR/contracts/test/v0.6/Chainlink.test.ts:161:7-161:37: `await ccl.addUint('second', 2)`
$DIR/contracts/test/v0.6/Chainlink.test.ts:161:16-161:37: `.addUint('second', 2)`
$DIR/contracts/test/v0.6/Chainlink.test.ts:162:27-162:40: `.closeEvent()`
$DIR/contracts/test/v0.6/Chainlink.test.ts:175:7-179:9: `await ccl.addStringArray('word', [
        ethers.utils.formatBytes32String('seinfeld'),
        ethers.utils.formatBytes32String('"4"'),
        ethers.utils.formatBytes32String('LIFE'),
      ])`
$DIR/contracts/test/v0.6/Chainlink.test.ts:175:16-179:9: `.addStringArray('word', [
        ethers.utils.formatBytes32String('seinfeld'),
        ethers.utils.formatBytes32String('"4"'),
        ethers.utils.formatBytes32String('LIFE'),
      ])`
$DIR/contracts/test/v0.6/Chainlink.test.ts:176:15-176:53: `.utils.formatBytes32String('seinfeld')`
$DIR/contracts/test/v0.6/Chainlink.test.ts:177:15-177:48: `.utils.formatBytes32String('"4"')`
$DIR/contracts/test/v0.6/Chainlink.test.ts:178:15-178:49: `.utils.formatBytes32String('LIFE')`
$DIR/contracts/test/v0.6/Chainlink.test.ts:180:27-180:40: `.closeEvent()`
$DIR/contracts/test/v0.6/ChainlinkClient.test.ts:70:26-74:8: `.publicNewRequest(
        specId,
        gs.address,
        ethers.utils.toUtf8Bytes('requestedBytes32(bytes32,bytes32)'),
      )`
$DIR/contracts/test/v0.6/ChainlinkClient.test.ts:73:15-73:70: `.utils.toUtf8Bytes('requestedBytes32(bytes32,bytes32)')`
$DIR/contracts/test/v0.6/ChainlinkClient.test.ts:75:31-75:38: `.wait()`
$DIR/contracts/test/v0.6/ChainlinkClient.test.ts:92:26-97:8: `.publicRequest(
        specId,
        cc.address,
        ethers.utils.toUtf8Bytes('fulfillRequest(bytes32,bytes32)'),
        0,
      )`
$DIR/contracts/test/v0.6/ChainlinkClient.test.ts:95:15-95:68: `.utils.toUtf8Bytes('fulfillRequest(bytes32,bytes32)')`
$DIR/contracts/test/v0.6/ChainlinkClient.test.ts:99:40-99:47: `.wait()`
$DIR/contracts/test/v0.6/ChainlinkClient.test.ts:110:26-116:8: `.publicRequestRunTo(
        newoc.address,
        specId,
        cc.address,
        ethers.utils.toUtf8Bytes('fulfillRequest(bytes32,bytes32)'),
        0,
      )`
$DIR/contracts/test/v0.6/ChainlinkClient.test.ts:114:15-114:68: `.utils.toUtf8Bytes('fulfillRequest(bytes32,bytes32)')`
$DIR/contracts/test/v0.6/ChainlinkClient.test.ts:117:34-117:41: `.wait()`
$DIR/contracts/test/v0.6/ChainlinkClient.test.ts:124:26-130:8: `.publicRequestRunTo(
        newoc.address,
        specId,
        cc.address,
        ethers.utils.toUtf8Bytes('fulfillRequest(bytes32,bytes32)'),
        0,
      )`
$DIR/contracts/test/v0.6/ChainlinkClient.test.ts:128:15-128:68: `.utils.toUtf8Bytes('fulfillRequest(bytes32,bytes32)')`
$DIR/contracts/test/v0.6/ChainlinkClient.test.ts:131:32-131:39: `.wait()`
$DIR/contracts/test/v0.6/ChainlinkClient.test.ts:132:34-132:62: `.interface.parseLog(logs[3])`
$DIR/contracts/test/v0.6/ChainlinkClient.test.ts:139:7-145:8: `await cc.publicRequestRunTo(
        newoc.address,
        specId,
        cc.address,
        ethers.utils.toUtf8Bytes('fulfillRequest(bytes32,bytes32)'),
        0,
      )`
$DIR/contracts/test/v0.6/ChainlinkClient.test.ts:139:15-145:8: `.publicRequestRunTo(
        newoc.address,
        specId,
        cc.address,
        ethers.utils.toUtf8Bytes('fulfillRequest(bytes32,bytes32)'),
        0,
      )`
$DIR/contracts/test/v0.6/ChainlinkClient.test.ts:143:15-143:68: `.utils.toUtf8Bytes('fulfillRequest(bytes32,bytes32)')`
$DIR/contracts/test/v0.6/ChainlinkClient.test.ts:147:43-147:65: `.publicOracleAddress()`
$DIR/contracts/test/v0.6/ChainlinkClient.test.ts:176:27-181:8: `.publicCancelRequest(
        requestId,
        0,
        ethers.utils.hexZeroPad('0x', 4),
        0,
      )`
$DIR/contracts/test/v0.6/ChainlinkClient.test.ts:179:15-179:41: `.utils.hexZeroPad('0x', 4)`
$DIR/contracts/test/v0.6/ChainlinkClient.test.ts:182:34-182:41: `.wait()`
$DIR/contracts/test/v0.6/ChainlinkClient.test.ts:190:7-197:8: `await evmRevert(
        ecc.publicCancelRequest(
          ethers.utils.formatBytes32String('bogusId'),
          0,
          ethers.utils.hexZeroPad('0x', 4),
          0,
        ),
      )`
$DIR/contracts/test/v0.6/ChainlinkClient.test.ts:191:12-196:10: `.publicCancelRequest(
          ethers.utils.formatBytes32String('bogusId'),
          0,
          ethers.utils.hexZeroPad('0x', 4),
          0,
        )`
$DIR/contracts/test/v0.6/ChainlinkClient.test.ts:192:17-192:54: `.utils.formatBytes32String('bogusId')`
$DIR/contracts/test/v0.6/ChainlinkClient.test.ts:194:17-194:43: `.utils.hexZeroPad('0x', 4)`
$DIR/contracts/test/v0.6/ChainlinkClient.test.ts:217:26-222:8: `.fulfillOracleRequest(
        ...convertFufillParams(
          request,
          ethers.utils.formatBytes32String('hi mom!'),
        ),
      )`
$DIR/contracts/test/v0.6/ChainlinkClient.test.ts:220:17-220:54: `.utils.formatBytes32String('hi mom!')`
$DIR/contracts/test/v0.6/ChainlinkClient.test.ts:223:32-223:39: `.wait()`
$DIR/contracts/test/v0.6/ChainlinkClient.test.ts:225:31-225:59: `.interface.parseLog(logs[0])`
$DIR/contracts/test/v0.6/ChainlinkClient.test.ts:233:7-238:8: `await oc.fulfillOracleRequest(
        ...convertFufillParams(
          request,
          ethers.utils.formatBytes32String('hi mom!'),
        ),
      )`
$DIR/contracts/test/v0.6/ChainlinkClient.test.ts:233:15-238:8: `.fulfillOracleRequest(
        ...convertFufillParams(
          request,
          ethers.utils.formatBytes32String('hi mom!'),
        ),
      )`
$DIR/contracts/test/v0.6/ChainlinkClient.test.ts:236:17-236:54: `.utils.formatBytes32String('hi mom!')`
$DIR/contracts/test/v0.6/ChainlinkClient.test.ts:240:7-248:8: `await evmRevert(
        oc.fulfillOracleRequest(
          ...convertFufillParams(
            request,
            ethers.utils.formatBytes32String('hi mom!'),
          ),
        ),
        'Must have a valid requestId',
      )`
$DIR/contracts/test/v0.6/ChainlinkClient.test.ts:241:11-246:10: `.fulfillOracleRequest(
          ...convertFufillParams(
            request,
            ethers.utils.formatBytes32String('hi mom!'),
          ),
        )`
$DIR/contracts/test/v0.6/ChainlinkClient.test.ts:244:19-244:56: `.utils.formatBytes32String('hi mom!')`
$DIR/contracts/test/v0.6/ChainlinkClient.test.ts:252:7-262:8: `await evmRevert(
        oc
          .connect(roles.stranger)
          .fulfillOracleRequest(
            ...convertFufillParams(
              request,
              ethers.utils.formatBytes32String('hi mom!'),
            ),
          ),
        'Not an authorized node to fulfill requests',
      )`
$DIR/contracts/test/v0.6/ChainlinkClient.test.ts:253:11-254:35: `
          .connect(roles.stranger)`
$DIR/contracts/test/v0.6/ChainlinkClient.test.ts:254:35-260:12: `
          .fulfillOracleRequest(
            ...convertFufillParams(
              request,
              ethers.utils.formatBytes32String('hi mom!'),
            ),
          )`
$DIR/contracts/test/v0.6/ChainlinkClient.test.ts:258:21-258:58: `.utils.formatBytes32String('hi mom!')`
$DIR/contracts/test/v0.6/ChainlinkClient.test.ts:284:26-289:8: `.fulfillOracleRequest(
        ...convertFufillParams(
          request,
          ethers.utils.formatBytes32String('hi mom!'),
        ),
      )`
$DIR/contracts/test/v0.6/ChainlinkClient.test.ts:287:17-287:54: `.utils.formatBytes32String('hi mom!')`
$DIR/contracts/test/v0.6/ChainlinkClient.test.ts:291:32-291:39: `.wait()`
$DIR/contracts/test/v0.6/ChainlinkClient.test.ts:292:31-292:59: `.interface.parseLog(logs[0])`
$DIR/contracts/test/v0.6/ChainlinkClient.test.ts:300:7-305:8: `await oc.fulfillOracleRequest(
        ...convertFufillParams(
          request,
          ethers.utils.formatBytes32String('hi mom!'),
        ),
      )`
$DIR/contracts/test/v0.6/ChainlinkClient.test.ts:300:15-305:8: `.fulfillOracleRequest(
        ...convertFufillParams(
          request,
          ethers.utils.formatBytes32String('hi mom!'),
        ),
      )`
$DIR/contracts/test/v0.6/ChainlinkClient.test.ts:303:17-303:54: `.utils.formatBytes32String('hi mom!')`
$DIR/contracts/test/v0.6/ChainlinkClient.test.ts:307:7-315:8: `await evmRevert(
        oc.fulfillOracleRequest(
          ...convertFufillParams(
            request,
            ethers.utils.formatBytes32String('hi mom!'),
          ),
        ),
        'Must have a valid requestId',
      )`
$DIR/contracts/test/v0.6/ChainlinkClient.test.ts:308:11-313:10: `.fulfillOracleRequest(
          ...convertFufillParams(
            request,
            ethers.utils.formatBytes32String('hi mom!'),
          ),
        )`
$DIR/contracts/test/v0.6/ChainlinkClient.test.ts:311:19-311:56: `.utils.formatBytes32String('hi mom!')`
$DIR/contracts/test/v0.6/ChainlinkClient.test.ts:319:7-329:8: `await evmRevert(
        oc
          .connect(roles.stranger)
          .fulfillOracleRequest(
            ...convertFufillParams(
              request,
              ethers.utils.formatBytes32String('hi mom!'),
            ),
          ),
        'Not an authorized node to fulfill requests',
      )`
$DIR/contracts/test/v0.6/ChainlinkClient.test.ts:320:11-321:35: `
          .connect(roles.stranger)`
$DIR/contracts/test/v0.6/ChainlinkClient.test.ts:321:35-327:12: `
          .fulfillOracleRequest(
            ...convertFufillParams(
              request,
              ethers.utils.formatBytes32String('hi mom!'),
            ),
          )`
$DIR/contracts/test/v0.6/ChainlinkClient.test.ts:325:21-325:58: `.utils.formatBytes32String('hi mom!')`
$DIR/contracts/test/v0.6/ChainlinkClient.test.ts:335:28-335:51: `.publicChainlinkToken()`
$DIR/contracts/test/v0.6/ChainlinkClient.test.ts:362:7-367:8: `await oc.fulfillOracleRequest(
        ...convertFufillParams(
          request,
          ethers.utils.formatBytes32String('hi mom!'),
        ),
      )`
$DIR/contracts/test/v0.6/ChainlinkClient.test.ts:362:15-367:8: `.fulfillOracleRequest(
        ...convertFufillParams(
          request,
          ethers.utils.formatBytes32String('hi mom!'),
        ),
      )`
$DIR/contracts/test/v0.6/ChainlinkClient.test.ts:365:17-365:54: `.utils.formatBytes32String('hi mom!')`
$DIR/contracts/test/v0.6/ChainlinkClient.test.ts:371:7-373:8: `await evmRevert(
        cc.publicAddExternalRequest(newoc.address, request.requestId),
      )`
$DIR/contracts/test/v0.6/ChainlinkClient.test.ts:372:11-372:70: `.publicAddExternalRequest(newoc.address, request.requestId)`
$DIR/contracts/test/v0.6/CheckedMath.test.ts:36:28-36:38: `.add(a, b)`
$DIR/contracts/test/v0.6/CheckedMath.test.ts:37:28-37:38: `.add(b, a)`
$DIR/contracts/test/v0.6/CheckedMath.test.ts:39:7-39:41: `bigNumEquals(c1.result, c2.result)`
$DIR/contracts/test/v0.6/CheckedMath.test.ts:45:28-45:54: `.add(int256Max, int256Min)`
$DIR/contracts/test/v0.6/CheckedMath.test.ts:46:28-46:54: `.add(int256Min, int256Max)`
$DIR/contracts/test/v0.6/CheckedMath.test.ts:48:7-48:41: `bigNumEquals(c1.result, c2.result)`
$DIR/contracts/test/v0.6/CheckedMath.test.ts:54:28-54:46: `.add(int256Max, 1)`
$DIR/contracts/test/v0.6/CheckedMath.test.ts:55:28-55:46: `.add(1, int256Max)`
$DIR/contracts/test/v0.6/CheckedMath.test.ts:57:7-57:33: `bigNumEquals(0, c1.result)`
$DIR/contracts/test/v0.6/CheckedMath.test.ts:58:7-58:33: `bigNumEquals(0, c2.result)`
$DIR/contracts/test/v0.6/CheckedMath.test.ts:64:28-64:47: `.add(int256Min, -1)`
$DIR/contracts/test/v0.6/CheckedMath.test.ts:65:28-65:47: `.add(-1, int256Min)`
$DIR/contracts/test/v0.6/CheckedMath.test.ts:67:7-67:33: `bigNumEquals(0, c1.result)`
$DIR/contracts/test/v0.6/CheckedMath.test.ts:68:7-68:33: `bigNumEquals(0, c2.result)`
$DIR/contracts/test/v0.6/CheckedMath.test.ts:79:27-79:37: `.sub(a, b)`
$DIR/contracts/test/v0.6/CheckedMath.test.ts:80:25-80:32: `.sub(b)`
$DIR/contracts/test/v0.6/CheckedMath.test.ts:82:7-82:39: `bigNumEquals(expected, c.result)`
$DIR/contracts/test/v0.6/CheckedMath.test.ts:87:27-87:37: `.sub(b, a)`
$DIR/contracts/test/v0.6/CheckedMath.test.ts:88:25-88:32: `.sub(a)`
$DIR/contracts/test/v0.6/CheckedMath.test.ts:90:7-90:39: `bigNumEquals(expected, c.result)`
$DIR/contracts/test/v0.6/CheckedMath.test.ts:95:27-95:46: `.sub(int256Max, -1)`
$DIR/contracts/test/v0.6/CheckedMath.test.ts:97:7-97:32: `bigNumEquals(0, c.result)`
$DIR/contracts/test/v0.6/CheckedMath.test.ts:102:27-102:45: `.sub(int256Min, 1)`
$DIR/contracts/test/v0.6/CheckedMath.test.ts:104:7-104:32: `bigNumEquals(0, c.result)`
$DIR/contracts/test/v0.6/CheckedMath.test.ts:114:28-114:38: `.mul(a, b)`
$DIR/contracts/test/v0.6/CheckedMath.test.ts:115:28-115:38: `.mul(b, a)`
$DIR/contracts/test/v0.6/CheckedMath.test.ts:117:7-117:41: `bigNumEquals(c1.result, c2.result)`
$DIR/contracts/test/v0.6/CheckedMath.test.ts:123:27-123:37: `.mul(a, 0)`
$DIR/contracts/test/v0.6/CheckedMath.test.ts:125:7-125:32: `bigNumEquals(0, c.result)`
$DIR/contracts/test/v0.6/CheckedMath.test.ts:130:27-130:45: `.mul(int256Max, 2)`
$DIR/contracts/test/v0.6/CheckedMath.test.ts:132:7-132:32: `bigNumEquals(0, c.result)`
$DIR/contracts/test/v0.6/CheckedMath.test.ts:137:27-137:46: `.mul(int256Min, -1)`
$DIR/contracts/test/v0.6/CheckedMath.test.ts:139:7-139:32: `bigNumEquals(0, c.result)`
$DIR/contracts/test/v0.6/CheckedMath.test.ts:149:27-149:37: `.div(a, b)`
$DIR/contracts/test/v0.6/CheckedMath.test.ts:151:7-151:39: `bigNumEquals(a.div(b), c.result)`
$DIR/contracts/test/v0.6/CheckedMath.test.ts:151:21-151:28: `.div(b)`
$DIR/contracts/test/v0.6/CheckedMath.test.ts:156:27-156:37: `.div(0, a)`
$DIR/contracts/test/v0.6/CheckedMath.test.ts:158:7-158:32: `bigNumEquals(0, c.result)`
$DIR/contracts/test/v0.6/CheckedMath.test.ts:163:27-163:43: `.div(7000, 5678)`
$DIR/contracts/test/v0.6/CheckedMath.test.ts:165:7-165:32: `bigNumEquals(1, c.result)`
$DIR/contracts/test/v0.6/CheckedMath.test.ts:170:27-170:37: `.div(a, 0)`
$DIR/contracts/test/v0.6/CheckedMath.test.ts:172:7-172:32: `bigNumEquals(0, c.result)`
$DIR/contracts/test/v0.6/CheckedMath.test.ts:177:27-177:46: `.div(int256Min, -1)`
$DIR/contracts/test/v0.6/CheckedMath.test.ts:179:7-179:32: `bigNumEquals(0, c.result)`
$DIR/contracts/test/v0.6/DeviationFlaggingValidator.test.ts:49:5-61:7: `publicAbi(validator, [
      'THRESHOLD_MULTIPLIER',
      'flaggingThreshold',
      'flags',
      'isValid',
      'setFlagsAddress',
      'setFlaggingThreshold',
      'validate',
      // Owned methods:
      'acceptOwnership',
      'owner',
      'transferOwnership',
    ])`
$DIR/contracts/test/v0.6/DeviationFlaggingValidator.test.ts:66:50-66:58: `.flags()`
$DIR/contracts/test/v0.6/DeviationFlaggingValidator.test.ts:67:7-67:75: `bigNumEquals(flaggingThreshold, await validator.flaggingThreshold())`
$DIR/contracts/test/v0.6/DeviationFlaggingValidator.test.ts:67:54-67:74: `.flaggingThreshold()`
$DIR/contracts/test/v0.6/DeviationFlaggingValidator.test.ts:77:20-78:37: `
            .connect(personas.Nelly)`
$DIR/contracts/test/v0.6/DeviationFlaggingValidator.test.ts:78:37-84:14: `
            .validate(
              previousRoundId,
              previousValue,
              currentRoundId,
              currentValue,
            )`
$DIR/contracts/test/v0.6/DeviationFlaggingValidator.test.ts:91:35-92:35: `
          .connect(personas.Nelly)`
$DIR/contracts/test/v0.6/DeviationFlaggingValidator.test.ts:92:35-98:12: `
          .validate(
            previousRoundId,
            previousValue,
            currentRoundId,
            currentValue,
          )`
$DIR/contracts/test/v0.6/DeviationFlaggingValidator.test.ts:99:33-99:40: `.wait()`
$DIR/contracts/test/v0.6/DeviationFlaggingValidator.test.ts:102:33-102:52: `.gasUsed.toNumber()`
$DIR/contracts/test/v0.6/DeviationFlaggingValidator.test.ts:112:20-113:37: `
            .connect(personas.Nelly)`
$DIR/contracts/test/v0.6/DeviationFlaggingValidator.test.ts:113:37-119:14: `
            .validate(
              previousRoundId,
              previousValue,
              currentRoundId,
              currentValue,
            )`
$DIR/contracts/test/v0.6/DeviationFlaggingValidator.test.ts:124:35-125:35: `
          .connect(personas.Nelly)`
$DIR/contracts/test/v0.6/DeviationFlaggingValidator.test.ts:125:35-131:12: `
          .validate(
            previousRoundId,
            previousValue,
            currentRoundId,
            currentValue,
          )`
$DIR/contracts/test/v0.6/DeviationFlaggingValidator.test.ts:132:33-132:40: `.wait()`
$DIR/contracts/test/v0.6/DeviationFlaggingValidator.test.ts:135:33-135:52: `.gasUsed.toNumber()`
$DIR/contracts/test/v0.6/DeviationFlaggingValidator.test.ts:144:35-145:35: `
          .connect(personas.Nelly)`
$DIR/contracts/test/v0.6/DeviationFlaggingValidator.test.ts:145:35-151:12: `
          .validate(
            previousRoundId,
            previousValue,
            currentRoundId,
            currentValue,
          )`
$DIR/contracts/test/v0.6/DeviationFlaggingValidator.test.ts:152:33-152:40: `.wait()`
$DIR/contracts/test/v0.6/DeviationFlaggingValidator.test.ts:165:26-165:69: `.isValid(0, previousValue, 1, currentValue)`
$DIR/contracts/test/v0.6/DeviationFlaggingValidator.test.ts:174:26-174:69: `.isValid(0, previousValue, 1, currentValue)`
$DIR/contracts/test/v0.6/DeviationFlaggingValidator.test.ts:184:26-184:69: `.isValid(0, previousValue, 1, currentValue)`
$DIR/contracts/test/v0.6/DeviationFlaggingValidator.test.ts:194:26-194:69: `.isValid(0, previousValue, 1, currentValue)`
$DIR/contracts/test/v0.6/DeviationFlaggingValidator.test.ts:205:26-205:69: `.isValid(0, previousValue, 1, currentValue)`
$DIR/contracts/test/v0.6/DeviationFlaggingValidator.test.ts:216:26-216:69: `.isValid(0, previousValue, 1, currentValue)`
$DIR/contracts/test/v0.6/DeviationFlaggingValidator.test.ts:227:26-227:69: `.isValid(0, previousValue, 1, currentValue)`
$DIR/contracts/test/v0.6/DeviationFlaggingValidator.test.ts:237:54-237:74: `.flaggingThreshold()`
$DIR/contracts/test/v0.6/DeviationFlaggingValidator.test.ts:239:7-239:81: `await validator.connect(personas.Carol).setFlaggingThreshold(newThreshold)`
$DIR/contracts/test/v0.6/DeviationFlaggingValidator.test.ts:239:22-239:46: `.connect(personas.Carol)`
$DIR/contracts/test/v0.6/DeviationFlaggingValidator.test.ts:239:46-239:81: `.setFlaggingThreshold(newThreshold)`
$DIR/contracts/test/v0.6/DeviationFlaggingValidator.test.ts:241:49-241:69: `.flaggingThreshold()`
$DIR/contracts/test/v0.6/DeviationFlaggingValidator.test.ts:246:18-246:42: `.connect(personas.Carol)`
$DIR/contracts/test/v0.6/DeviationFlaggingValidator.test.ts:246:42-246:77: `.setFlaggingThreshold(newThreshold)`
$DIR/contracts/test/v0.6/DeviationFlaggingValidator.test.ts:252:18-252:42: `.connect(personas.Carol)`
$DIR/contracts/test/v0.6/DeviationFlaggingValidator.test.ts:252:42-252:77: `.setFlaggingThreshold(newThreshold)`
$DIR/contracts/test/v0.6/DeviationFlaggingValidator.test.ts:259:20-259:43: `.connect(personas.Neil)`
$DIR/contracts/test/v0.6/DeviationFlaggingValidator.test.ts:259:43-259:78: `.setFlaggingThreshold(newThreshold)`
$DIR/contracts/test/v0.6/DeviationFlaggingValidator.test.ts:269:50-269:58: `.flags()`
$DIR/contracts/test/v0.6/DeviationFlaggingValidator.test.ts:271:7-271:79: `await validator.connect(personas.Carol).setFlagsAddress(newFlagsAddress)`
$DIR/contracts/test/v0.6/DeviationFlaggingValidator.test.ts:271:22-271:46: `.connect(personas.Carol)`
$DIR/contracts/test/v0.6/DeviationFlaggingValidator.test.ts:271:46-271:79: `.setFlagsAddress(newFlagsAddress)`
$DIR/contracts/test/v0.6/DeviationFlaggingValidator.test.ts:273:52-273:60: `.flags()`
$DIR/contracts/test/v0.6/DeviationFlaggingValidator.test.ts:278:18-278:42: `.connect(personas.Carol)`
$DIR/contracts/test/v0.6/DeviationFlaggingValidator.test.ts:278:42-278:75: `.setFlagsAddress(newFlagsAddress)`
$DIR/contracts/test/v0.6/DeviationFlaggingValidator.test.ts:284:18-284:42: `.connect(personas.Carol)`
$DIR/contracts/test/v0.6/DeviationFlaggingValidator.test.ts:284:42-284:75: `.setFlagsAddress(newFlagsAddress)`
$DIR/contracts/test/v0.6/DeviationFlaggingValidator.test.ts:291:20-291:43: `.connect(personas.Neil)`
$DIR/contracts/test/v0.6/DeviationFlaggingValidator.test.ts:291:43-291:76: `.setFlagsAddress(newFlagsAddress)`
$DIR/contracts/test/v0.6/Flags.test.ts:42:5-61:7: `publicAbi(flags, [
      'getFlag',
      'getFlags',
      'lowerFlags',
      'raiseFlag',
      'raiseFlags',
      'raisingAccessController',
      'setRaisingAccessController',
      // Ownable methods:
      'acceptOwnership',
      'owner',
      'transferOwnership',
      // AccessControl methods:
      'addAccess',
      'disableAccessCheck',
      'enableAccessCheck',
      'removeAccess',
      'checkEnabled',
      'hasAccess',
    ])`
$DIR/contracts/test/v0.6/Flags.test.ts:67:40-67:66: `.getFlag(consumer.address)`
$DIR/contracts/test/v0.6/Flags.test.ts:69:9-69:72: `await flags.connect(personas.Nelly).raiseFlag(consumer.address)`
$DIR/contracts/test/v0.6/Flags.test.ts:69:20-69:44: `.connect(personas.Nelly)`
$DIR/contracts/test/v0.6/Flags.test.ts:69:44-69:72: `.raiseFlag(consumer.address)`
$DIR/contracts/test/v0.6/Flags.test.ts:71:39-71:65: `.getFlag(consumer.address)`
$DIR/contracts/test/v0.6/Flags.test.ts:75:27-75:51: `.connect(personas.Nelly)`
$DIR/contracts/test/v0.6/Flags.test.ts:75:51-75:79: `.raiseFlag(consumer.address)`
$DIR/contracts/test/v0.6/Flags.test.ts:86:33-87:37: `
            .connect(personas.Nelly)`
$DIR/contracts/test/v0.6/Flags.test.ts:87:37-88:41: `
            .raiseFlag(consumer.address)`
$DIR/contracts/test/v0.6/Flags.test.ts:89:35-89:42: `.wait()`
$DIR/contracts/test/v0.6/Flags.test.ts:103:9-104:68: `await flags.connect(personas.Neil).raiseFlag(consumer.address),
          assert.equal(true, await flags.getFlag(consumer.address))`
$DIR/contracts/test/v0.6/Flags.test.ts:103:20-103:43: `.connect(personas.Neil)`
$DIR/contracts/test/v0.6/Flags.test.ts:103:43-103:71: `.raiseFlag(consumer.address)`
$DIR/contracts/test/v0.6/Flags.test.ts:104:17-104:68: `.equal(true, await flags.getFlag(consumer.address))`
$DIR/contracts/test/v0.6/Flags.test.ts:104:41-104:67: `.getFlag(consumer.address)`
$DIR/contracts/test/v0.6/Flags.test.ts:111:16-111:39: `.connect(personas.Neil)`
$DIR/contracts/test/v0.6/Flags.test.ts:111:39-111:67: `.raiseFlag(consumer.address)`
$DIR/contracts/test/v0.6/Flags.test.ts:132:9-132:72: `await flags.connect(personas.Nelly).raiseFlag(consumer.address)`
$DIR/contracts/test/v0.6/Flags.test.ts:132:20-132:44: `.connect(personas.Nelly)`
$DIR/contracts/test/v0.6/Flags.test.ts:132:44-132:72: `.raiseFlag(consumer.address)`
$DIR/contracts/test/v0.6/Flags.test.ts:133:39-133:65: `.getFlag(consumer.address)`
$DIR/contracts/test/v0.6/Flags.test.ts:137:27-137:50: `.connect(personas.Neil)`
$DIR/contracts/test/v0.6/Flags.test.ts:137:50-137:78: `.raiseFlag(consumer.address)`
$DIR/contracts/test/v0.6/Flags.test.ts:146:40-146:66: `.getFlag(consumer.address)`
$DIR/contracts/test/v0.6/Flags.test.ts:148:9-148:75: `await flags.connect(personas.Nelly).raiseFlags([consumer.address])`
$DIR/contracts/test/v0.6/Flags.test.ts:148:20-148:44: `.connect(personas.Nelly)`
$DIR/contracts/test/v0.6/Flags.test.ts:148:44-148:75: `.raiseFlags([consumer.address])`
$DIR/contracts/test/v0.6/Flags.test.ts:150:39-150:65: `.getFlag(consumer.address)`
$DIR/contracts/test/v0.6/Flags.test.ts:155:16-155:40: `.connect(personas.Nelly)`
$DIR/contracts/test/v0.6/Flags.test.ts:155:40-155:71: `.raiseFlags([consumer.address])`
$DIR/contracts/test/v0.6/Flags.test.ts:167:33-168:37: `
            .connect(personas.Nelly)`
$DIR/contracts/test/v0.6/Flags.test.ts:168:37-169:44: `
            .raiseFlags([consumer.address])`
$DIR/contracts/test/v0.6/Flags.test.ts:170:35-170:42: `.wait()`
$DIR/contracts/test/v0.6/Flags.test.ts:184:9-185:68: `await flags.connect(personas.Neil).raiseFlags([consumer.address]),
          assert.equal(true, await flags.getFlag(consumer.address))`
$DIR/contracts/test/v0.6/Flags.test.ts:184:20-184:43: `.connect(personas.Neil)`
$DIR/contracts/test/v0.6/Flags.test.ts:184:43-184:74: `.raiseFlags([consumer.address])`
$DIR/contracts/test/v0.6/Flags.test.ts:185:17-185:68: `.equal(true, await flags.getFlag(consumer.address))`
$DIR/contracts/test/v0.6/Flags.test.ts:185:41-185:67: `.getFlag(consumer.address)`
$DIR/contracts/test/v0.6/Flags.test.ts:192:16-192:39: `.connect(personas.Neil)`
$DIR/contracts/test/v0.6/Flags.test.ts:192:39-192:70: `.raiseFlags([consumer.address])`
$DIR/contracts/test/v0.6/Flags.test.ts:214:9-214:75: `await flags.connect(personas.Nelly).raiseFlags([consumer.address])`
$DIR/contracts/test/v0.6/Flags.test.ts:214:20-214:44: `.connect(personas.Nelly)`
$DIR/contracts/test/v0.6/Flags.test.ts:214:44-214:75: `.raiseFlags([consumer.address])`
$DIR/contracts/test/v0.6/Flags.test.ts:215:39-215:65: `.getFlag(consumer.address)`
$DIR/contracts/test/v0.6/Flags.test.ts:220:16-220:39: `.connect(personas.Neil)`
$DIR/contracts/test/v0.6/Flags.test.ts:220:39-220:70: `.raiseFlags([consumer.address])`
$DIR/contracts/test/v0.6/Flags.test.ts:233:39-233:65: `.getFlag(consumer.address)`
$DIR/contracts/test/v0.6/Flags.test.ts:235:9-235:75: `await flags.connect(personas.Nelly).lowerFlags([consumer.address])`
$DIR/contracts/test/v0.6/Flags.test.ts:235:20-235:44: `.connect(personas.Nelly)`
$DIR/contracts/test/v0.6/Flags.test.ts:235:44-235:75: `.lowerFlags([consumer.address])`
$DIR/contracts/test/v0.6/Flags.test.ts:237:40-237:66: `.getFlag(consumer.address)`
$DIR/contracts/test/v0.6/Flags.test.ts:242:16-242:40: `.connect(personas.Nelly)`
$DIR/contracts/test/v0.6/Flags.test.ts:242:40-242:71: `.lowerFlags([consumer.address])`
$DIR/contracts/test/v0.6/Flags.test.ts:254:33-255:37: `
            .connect(personas.Nelly)`
$DIR/contracts/test/v0.6/Flags.test.ts:255:37-256:44: `
            .lowerFlags([consumer.address])`
$DIR/contracts/test/v0.6/Flags.test.ts:257:35-257:42: `.wait()`
$DIR/contracts/test/v0.6/Flags.test.ts:266:16-266:39: `.connect(personas.Neil)`
$DIR/contracts/test/v0.6/Flags.test.ts:266:39-266:70: `.lowerFlags([consumer.address])`
$DIR/contracts/test/v0.6/Flags.test.ts:279:30-279:56: `.getFlag(consumer.address)`
$DIR/contracts/test/v0.6/Flags.test.ts:290:11-290:51: `await consumer.getFlag(consumer.address)`
$DIR/contracts/test/v0.6/Flags.test.ts:290:25-290:51: `.getFlag(consumer.address)`
$DIR/contracts/test/v0.6/Flags.test.ts:301:9-301:49: `await consumer.getFlag(consumer.address)`
$DIR/contracts/test/v0.6/Flags.test.ts:301:23-301:49: `.getFlag(consumer.address)`
$DIR/contracts/test/v0.6/Flags.test.ts:310:11-310:51: `await consumer.getFlag(consumer.address)`
$DIR/contracts/test/v0.6/Flags.test.ts:310:25-310:51: `.getFlag(consumer.address)`
$DIR/contracts/test/v0.6/Flags.test.ts:328:7-328:62: `await flags.connect(personas.Nelly).enableAccessCheck()`
$DIR/contracts/test/v0.6/Flags.test.ts:328:18-328:42: `.connect(personas.Nelly)`
$DIR/contracts/test/v0.6/Flags.test.ts:328:42-328:62: `.enableAccessCheck()`
$DIR/contracts/test/v0.6/Flags.test.ts:330:28-330:54: `.getFlag(consumer.address)`
$DIR/contracts/test/v0.6/Flags.test.ts:334:7-334:70: `await flags.connect(personas.Nelly).addAccess(consumer.address)`
$DIR/contracts/test/v0.6/Flags.test.ts:334:18-334:42: `.connect(personas.Nelly)`
$DIR/contracts/test/v0.6/Flags.test.ts:334:42-334:70: `.addAccess(consumer.address)`
$DIR/contracts/test/v0.6/Flags.test.ts:336:7-336:47: `await consumer.getFlag(consumer.address)`
$DIR/contracts/test/v0.6/Flags.test.ts:336:21-336:47: `.getFlag(consumer.address)`
$DIR/contracts/test/v0.6/Flags.test.ts:340:38-345:9: `.getFlags([
        await personas.Nelly.getAddress(),
        await personas.Neil.getAddress(),
        await personas.Ned.getAddress(),
        await personas.Norbert.getAddress(),
      ])`
$DIR/contracts/test/v0.6/Flags.test.ts:341:23-341:42: `.Nelly.getAddress()`
$DIR/contracts/test/v0.6/Flags.test.ts:342:23-342:41: `.Neil.getAddress()`
$DIR/contracts/test/v0.6/Flags.test.ts:343:23-343:40: `.Ned.getAddress()`
$DIR/contracts/test/v0.6/Flags.test.ts:344:23-344:44: `.Norbert.getAddress()`
$DIR/contracts/test/v0.6/Flags.test.ts:360:41-360:59: `.Neil.getAddress()`
$DIR/contracts/test/v0.6/Flags.test.ts:361:7-361:70: `await controller.connect(personas.Nelly).addAccess(neilAddress)`
$DIR/contracts/test/v0.6/Flags.test.ts:361:23-361:47: `.connect(personas.Nelly)`
$DIR/contracts/test/v0.6/Flags.test.ts:361:47-361:70: `.addAccess(neilAddress)`
$DIR/contracts/test/v0.6/Flags.test.ts:362:7-362:72: `await flags.connect(personas.Neil).raiseFlags([consumer.address])`
$DIR/contracts/test/v0.6/Flags.test.ts:362:18-362:41: `.connect(personas.Neil)`
$DIR/contracts/test/v0.6/Flags.test.ts:362:41-362:72: `.raiseFlags([consumer.address])`
$DIR/contracts/test/v0.6/Flags.test.ts:364:7-366:57: `await flags
        .connect(personas.Nelly)
        .setRaisingAccessController(controller2.address)`
$DIR/contracts/test/v0.6/Flags.test.ts:364:18-365:33: `
        .connect(personas.Nelly)`
$DIR/contracts/test/v0.6/Flags.test.ts:365:33-366:57: `
        .setRaisingAccessController(controller2.address)`
$DIR/contracts/test/v0.6/Flags.test.ts:369:14-369:37: `.connect(personas.Neil)`
$DIR/contracts/test/v0.6/Flags.test.ts:369:37-369:68: `.raiseFlags([consumer.address])`
$DIR/contracts/test/v0.6/Flags.test.ts:375:14-376:35: `
          .connect(personas.Nelly)`
$DIR/contracts/test/v0.6/Flags.test.ts:376:35-377:59: `
          .setRaisingAccessController(controller2.address)`
$DIR/contracts/test/v0.6/Flags.test.ts:384:7-386:57: `await flags
        .connect(personas.Nelly)
        .setRaisingAccessController(controller2.address)`
$DIR/contracts/test/v0.6/Flags.test.ts:384:18-385:33: `
        .connect(personas.Nelly)`
$DIR/contracts/test/v0.6/Flags.test.ts:385:33-386:57: `
        .setRaisingAccessController(controller2.address)`
$DIR/contracts/test/v0.6/Flags.test.ts:389:14-390:35: `
          .connect(personas.Nelly)`
$DIR/contracts/test/v0.6/Flags.test.ts:390:35-391:59: `
          .setRaisingAccessController(controller2.address)`
$DIR/contracts/test/v0.6/Flags.test.ts:398:16-399:36: `
            .connect(personas.Neil)`
$DIR/contracts/test/v0.6/Flags.test.ts:399:36-400:61: `
            .setRaisingAccessController(controller2.address)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:229:5-272:7: `publicAbi(aggregator, [
      'acceptAdmin',
      'allocatedFunds',
      'availableFunds',
      'changeOracles',
      'decimals',
      'description',
      'getAdmin',
      'getAnswer',
      'getOracles',
      'getRoundData',
      'getTimestamp',
      'latestAnswer',
      'latestRound',
      'latestRoundData',
      'latestTimestamp',
      'linkToken',
      'maxSubmissionCount',
      'maxSubmissionValue',
      'minSubmissionCount',
      'minSubmissionValue',
      'onTokenTransfer',
      'oracleCount',
      'oracleRoundState',
      'paymentAmount',
      'requestNewRound',
      'restartDelay',
      'setRequesterPermissions',
      'setValidator',
      'submit',
      'timeout',
      'transferAdmin',
      'updateAvailableFunds',
      'updateFutureRounds',
      'withdrawFunds',
      'withdrawPayment',
      'withdrawablePayment',
      'validator',
      'version',
      // Owned methods:
      'acceptOwnership',
      'owner',
      'transferOwnership',
    ])`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:277:7-280:8: `bigNumEquals(
        BigNumber.from(paymentAmount),
        await aggregator.paymentAmount(),
      )`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:278:18-278:38: `.from(paymentAmount)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:279:25-279:41: `.paymentAmount()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:284:7-284:72: `bigNumEquals(BigNumber.from(timeout), await aggregator.timeout())`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:284:29-284:43: `.from(timeout)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:284:61-284:71: `.timeout()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:288:7-288:74: `bigNumEquals(BigNumber.from(decimals), await aggregator.decimals())`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:288:29-288:44: `.from(decimals)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:288:62-288:73: `.decimals()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:293:15-293:54: `.utils.formatBytes32String(description)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:294:25-294:39: `.description()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:299:7-299:50: `bigNumEquals(3, await aggregator.version())`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:299:39-299:49: `.version()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:303:50-303:62: `.validator()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:317:7-317:57: `bigNumEquals(0, await aggregator.allocatedFunds())`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:317:39-317:56: `.allocatedFunds()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:319:34-320:32: `
        .connect(personas.Neil)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:320:32-321:35: `
        .submit(nextRound, answer)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:322:31-322:38: `.wait()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:324:7-324:69: `bigNumEquals(paymentAmount, await aggregator.allocatedFunds())`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:324:51-324:68: `.allocatedFunds()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:325:40-325:59: `.sub(paymentAmount)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:326:7-326:73: `bigNumEquals(expectedAvailable, await aggregator.availableFunds())`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:326:55-326:72: `.availableFunds()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:327:31-329:8: `.from(
        receipt.logs?.[2].topics[1] ?? BigNumber.from(-1),
      )`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:328:49-328:58: `.from(-1)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:330:7-330:46: `bigNumEquals(expectedAvailable, logged)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:334:30-334:54: `.connect(personas.Nelly)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:334:54-334:80: `.submit(nextRound, answer)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:341:9-346:10: `bigNumEquals(
          0,
          await aggregator
            .connect(personas.Neil)
            .withdrawablePayment(await personas.Neil.getAddress()),
        )`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:343:27-344:36: `
            .connect(personas.Neil)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:344:36-345:67: `
            .withdrawablePayment(await personas.Neil.getAddress())`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:345:48-345:66: `.Neil.getAddress()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:348:9-348:74: `await aggregator.connect(personas.Neil).submit(nextRound, answer)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:348:25-348:48: `.connect(personas.Neil)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:348:48-348:74: `.submit(nextRound, answer)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:350:9-355:10: `bigNumEquals(
          paymentAmount,
          await aggregator
            .connect(personas.Neil)
            .withdrawablePayment(await personas.Neil.getAddress()),
        )`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:352:27-353:36: `
            .connect(personas.Neil)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:353:36-354:67: `
            .withdrawablePayment(await personas.Neil.getAddress())`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:354:48-354:66: `.Neil.getAddress()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:356:9-361:10: `bigNumEquals(
          0,
          await aggregator
            .connect(personas.Ned)
            .withdrawablePayment(await personas.Ned.getAddress()),
        )`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:358:27-359:35: `
            .connect(personas.Ned)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:359:35-360:66: `
            .withdrawablePayment(await personas.Ned.getAddress())`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:360:48-360:65: `.Ned.getAddress()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:362:9-367:10: `bigNumEquals(
          0,
          await aggregator
            .connect(personas.Nelly)
            .withdrawablePayment(await personas.Nelly.getAddress()),
        )`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:364:27-365:37: `
            .connect(personas.Nelly)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:365:37-366:68: `
            .withdrawablePayment(await personas.Nelly.getAddress())`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:366:48-366:67: `.Nelly.getAddress()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:371:9-371:77: `bigNumEquals(ethers.constants.Zero, await aggregator.latestAnswer())`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:371:61-371:76: `.latestAnswer()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:374:9-374:73: `await aggregator.connect(personas.Ned).submit(nextRound, answer)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:374:25-374:47: `.connect(personas.Ned)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:374:47-374:73: `.submit(nextRound, answer)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:375:9-375:75: `await aggregator.connect(personas.Nelly).submit(nextRound, answer)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:375:25-375:49: `.connect(personas.Nelly)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:375:49-375:75: `.submit(nextRound, answer)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:377:9-377:77: `bigNumEquals(ethers.constants.Zero, await aggregator.latestAnswer())`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:377:61-377:76: `.latestAnswer()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:388:9-391:10: `await evmRevert(
          aggregator.connect(personas.Neil).submit(nextRound + 1, answer),
          'previous round not supersedable',
        )`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:389:21-389:44: `.connect(personas.Neil)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:389:44-389:74: `.submit(nextRound + 1, answer)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:402:9-402:57: `bigNumEquals(0, await aggregator.latestAnswer())`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:402:41-402:56: `.latestAnswer()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:404:9-404:69: `await aggregator.connect(personas.Ned).submit(nextRound, 99)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:404:25-404:47: `.connect(personas.Ned)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:404:47-404:69: `.submit(nextRound, 99)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:405:9-405:58: `bigNumEquals(99, await aggregator.latestAnswer())`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:405:42-405:57: `.latestAnswer()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:407:9-407:72: `await aggregator.connect(personas.Nelly).submit(nextRound, 101)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:407:25-407:49: `.connect(personas.Nelly)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:407:49-407:72: `.submit(nextRound, 101)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:409:9-409:59: `bigNumEquals(100, await aggregator.latestAnswer())`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:409:43-409:58: `.latestAnswer()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:413:51-413:69: `.latestTimestamp()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:416:9-416:75: `await aggregator.connect(personas.Nelly).submit(nextRound, answer)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:416:25-416:49: `.connect(personas.Nelly)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:416:49-416:75: `.submit(nextRound, answer)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:418:50-418:68: `.latestTimestamp()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:426:36-427:35: `
          .connect(personas.Nelly)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:427:35-428:37: `
          .submit(nextRound, answer)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:429:33-429:40: `.wait()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:431:36-433:10: `.from(
          receipt.logs?.[0].topics[1] ?? ethers.constants.Zero,
        )`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:439:9-439:73: `evmRevert(aggregator.getRoundData(nextRound), 'No data present')`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:439:29-439:53: `.getRoundData(nextRound)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:441:9-441:75: `await aggregator.connect(personas.Nelly).submit(nextRound, answer)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:441:25-441:49: `.connect(personas.Nelly)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:441:49-441:75: `.submit(nextRound, answer)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:443:39-443:63: `.getRoundData(nextRound)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:444:38-444:65: `.answeredInRound.toNumber()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:448:9-448:67: `evmRevert(aggregator.latestRoundData(), 'No data present')`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:448:29-448:47: `.latestRoundData()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:450:9-450:44: `increaseTimeBy(15, ethers.provider)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:451:9-451:75: `await aggregator.connect(personas.Nelly).submit(nextRound, answer)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:451:25-451:49: `.connect(personas.Nelly)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:451:49-451:75: `.submit(nextRound, answer)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:453:44-453:68: `.getRoundData(nextRound)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:454:9-454:52: `bigNumEquals(nextRound, roundAfter.roundId)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:455:9-455:48: `bigNumEquals(answer, roundAfter.answer)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:456:34-456:53: `.startedAt.isZero()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:457:9-460:10: `bigNumEquals(
          await aggregator.getTimestamp(nextRound),
          roundAfter.updatedAt,
        )`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:458:27-458:51: `.getTimestamp(nextRound)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:461:9-461:60: `bigNumEquals(nextRound, roundAfter.answeredInRound)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:464:21-464:42: `.startedAt.toNumber()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:465:21-465:42: `.updatedAt.toNumber()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:468:50-468:68: `.latestRoundData()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:469:9-469:67: `bigNumEquals(roundAfter.roundId, roundAfterLatest.roundId)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:470:9-470:65: `bigNumEquals(roundAfter.answer, roundAfterLatest.answer)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:471:9-471:71: `bigNumEquals(roundAfter.startedAt, roundAfterLatest.startedAt)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:472:9-472:71: `bigNumEquals(roundAfter.updatedAt, roundAfterLatest.updatedAt)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:473:9-476:10: `bigNumEquals(
          roundAfter.answeredInRound,
          roundAfterLatest.answeredInRound,
        )`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:482:9-482:74: `await aggregator.connect(personas.Neil).submit(nextRound, answer)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:482:25-482:48: `.connect(personas.Neil)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:482:48-482:74: `.submit(nextRound, answer)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:484:9-487:10: `await evmRevert(
          aggregator.connect(personas.Neil).submit(nextRound, answer),
          'cannot report on previous rounds',
        )`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:485:21-485:44: `.connect(personas.Neil)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:485:44-485:70: `.submit(nextRound, answer)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:498:9-501:10: `await evmRevert(
          aggregator.connect(personas.Ned).submit(nextRound, answer),
          'round not accepting submissions',
        )`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:499:21-499:43: `.connect(personas.Ned)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:499:43-499:69: `.submit(nextRound, answer)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:507:47-510:10: `.oracleRoundState(
          await personas.Nelly.getAddress(),
          0,
        )`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:508:25-508:44: `.Nelly.getAddress()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:511:9-511:48: `bigNumEquals(1, startingState._roundId)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:513:9-513:48: `await advanceRound(aggregator, oracles)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:515:46-518:10: `.oracleRoundState(
          await personas.Nelly.getAddress(),
          0,
        )`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:516:25-516:44: `.Nelly.getAddress()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:519:9-519:47: `bigNumEquals(2, updatedState._roundId)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:523:9-523:73: `evmRevert(aggregator.getRoundData(nextRound), 'No data present')`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:523:29-523:53: `.getRoundData(nextRound)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:525:36-526:31: `
          .connect(oracles[0])`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:526:31-527:37: `
          .submit(nextRound, answer)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:528:9-528:71: `await aggregator.connect(oracles[1]).submit(nextRound, answer)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:528:25-528:45: `.connect(oracles[1])`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:528:45-528:71: `.submit(nextRound, answer)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:529:9-529:71: `await aggregator.connect(oracles[2]).submit(nextRound, answer)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:529:25-529:45: `.connect(oracles[2])`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:529:45-529:71: `.submit(nextRound, answer)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:530:33-530:40: `.wait()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:531:35-531:78: `.provider.getBlock(receipt.blockHash ?? '')`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:533:39-533:63: `.getRoundData(nextRound)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:534:9-534:71: `bigNumEquals(BigNumber.from(block.timestamp), round.startedAt)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:534:31-534:53: `.from(block.timestamp)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:538:36-539:34: `
          .connect(personas.Neil)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:539:34-540:37: `
          .submit(nextRound, answer)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:541:33-541:40: `.wait()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:544:38-544:54: `.from(topics[1])`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:547:9-547:56: `bigNumEquals(nextRound, roundNumber.toNumber())`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:548:9-548:66: `bigNumEquals(startedBy, await personas.Neil.getAddress())`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:548:47-548:65: `.Neil.getAddress()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:554:9-557:10: `await evmRevert(
          aggregator.connect(personas.Neil).submit(nextRound + 1, answer),
          'invalid round to report',
        )`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:555:21-555:44: `.connect(personas.Neil)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:555:44-555:74: `.submit(nextRound + 1, answer)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:563:9-566:10: `await evmRevert(
          aggregator.connect(personas.Carol).submit(nextRound, answer),
          'not enabled oracle',
        )`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:564:21-564:45: `.connect(personas.Carol)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:564:45-564:71: `.submit(nextRound, answer)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:585:9-588:10: `await evmRevert(
          aggregator.connect(personas.Neil).submit(nextRound, answer),
          'SafeMath: subtraction overflow',
        )`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:586:21-586:44: `.connect(personas.Neil)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:586:44-586:70: `.submit(nextRound, answer)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:607:9-607:77: `await aggregator.connect(personas.Ned).submit(nextRound - 1, answer)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:607:25-607:47: `.connect(personas.Ned)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:607:47-607:77: `.submit(nextRound - 1, answer)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:619:11-622:12: `await evmRevert(
            aggregator.connect(personas.Ned).submit(nextRound - 1, answer),
            'invalid round to report',
          )`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:620:23-620:45: `.connect(personas.Ned)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:620:45-620:75: `.submit(nextRound - 1, answer)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:634:11-637:12: `await evmRevert(
            aggregator.connect(personas.Ned).submit(nextRound - 1, answer),
            'round not accepting submissions',
          )`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:635:23-635:45: `.connect(personas.Ned)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:635:45-635:75: `.submit(nextRound - 1, answer)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:646:9-649:10: `await link.transfer(
          aggregator.address,
          newAmount.mul(oracles.length).mul(reserveRounds),
        )`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:646:19-649:10: `.transfer(
          aggregator.address,
          newAmount.mul(oracles.length).mul(reserveRounds),
        )`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:648:20-648:40: `.mul(oracles.length)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:648:40-648:59: `.mul(reserveRounds)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:650:9-650:48: `await aggregator.updateAvailableFunds()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:650:25-650:48: `.updateAvailableFunds()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:652:9-657:10: `bigNumEquals(
          0,
          await aggregator
            .connect(personas.Neil)
            .withdrawablePayment(await personas.Neil.getAddress()),
        )`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:654:27-655:36: `
            .connect(personas.Neil)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:655:36-656:67: `
            .withdrawablePayment(await personas.Neil.getAddress())`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:656:48-656:66: `.Neil.getAddress()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:658:9-663:10: `bigNumEquals(
          0,
          await aggregator
            .connect(personas.Nelly)
            .withdrawablePayment(await personas.Nelly.getAddress()),
        )`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:660:27-661:37: `
            .connect(personas.Nelly)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:661:37-662:68: `
            .withdrawablePayment(await personas.Nelly.getAddress())`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:662:48-662:67: `.Nelly.getAddress()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:665:9-665:74: `await aggregator.connect(personas.Neil).submit(nextRound, answer)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:665:25-665:48: `.connect(personas.Neil)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:665:48-665:74: `.submit(nextRound, answer)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:667:9-667:69: `await updateFutureRounds(aggregator, { payment: newAmount })`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:669:9-669:75: `await aggregator.connect(personas.Nelly).submit(nextRound, answer)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:669:25-669:49: `.connect(personas.Nelly)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:669:49-669:75: `.submit(nextRound, answer)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:671:9-676:10: `bigNumEquals(
          paymentAmount,
          await aggregator
            .connect(personas.Neil)
            .withdrawablePayment(await personas.Neil.getAddress()),
        )`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:673:27-674:36: `
            .connect(personas.Neil)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:674:36-675:67: `
            .withdrawablePayment(await personas.Neil.getAddress())`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:675:48-675:66: `.Neil.getAddress()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:677:9-682:10: `bigNumEquals(
          paymentAmount,
          await aggregator
            .connect(personas.Nelly)
            .withdrawablePayment(await personas.Nelly.getAddress()),
        )`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:679:27-680:37: `
            .connect(personas.Nelly)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:680:37-681:68: `
            .withdrawablePayment(await personas.Nelly.getAddress())`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:681:48-681:67: `.Nelly.getAddress()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:700:9-700:74: `await aggregator.connect(personas.Neil).submit(nextRound, answer)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:700:25-700:48: `.connect(personas.Neil)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:700:48-700:74: `.submit(nextRound, answer)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:704:9-704:74: `await aggregator.connect(personas.Neil).submit(nextRound, answer)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:704:25-704:48: `.connect(personas.Neil)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:704:48-704:74: `.submit(nextRound, answer)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:706:9-706:20: `nextRound++`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:708:9-711:10: `await evmRevert(
          aggregator.connect(personas.Neil).submit(nextRound, answer),
          'previous round not supersedable',
        )`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:709:21-709:44: `.connect(personas.Neil)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:709:44-709:70: `.submit(nextRound, answer)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:740:11-740:76: `await aggregator.connect(personas.Neil).submit(nextRound, answer)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:740:27-740:50: `.connect(personas.Neil)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:740:50-740:76: `.submit(nextRound, answer)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:746:11-749:12: `await evmRevert(
            aggregator.connect(personas.Ned).submit(nextRound, answer),
            'round not accepting submissions',
          )`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:747:23-747:45: `.connect(personas.Ned)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:747:45-747:71: `.submit(nextRound, answer)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:751:11-754:12: `await evmRevert(
            aggregator.connect(personas.Nelly).submit(nextRound, answer),
            'round not accepting submissions',
          )`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:752:23-752:47: `.connect(personas.Nelly)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:752:47-752:73: `.submit(nextRound, answer)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:780:9-780:75: `await aggregator.connect(personas.Nelly).submit(nextRound, answer)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:780:25-780:49: `.connect(personas.Nelly)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:780:49-780:75: `.submit(nextRound, answer)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:785:39-785:67: `.getTimestamp(previousRound)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:786:35-786:60: `.getAnswer(previousRound)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:790:36-791:35: `
          .connect(personas.Nelly)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:791:35-792:37: `
          .submit(nextRound, answer)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:793:33-793:40: `.wait()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:795:35-795:78: `.provider.getBlock(receipt.blockHash ?? '')`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:797:9-797:63: `updated = await aggregator.getTimestamp(previousRound)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:797:35-797:63: `.getTimestamp(previousRound)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:798:9-798:56: `ans = await aggregator.getAnswer(previousRound)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:798:31-798:56: `.getAnswer(previousRound)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:799:9-799:63: `bigNumEquals(BigNumber.from(block.timestamp), updated)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:799:31-799:53: `.from(block.timestamp)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:802:39-802:67: `.getRoundData(previousRound)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:803:9-803:51: `bigNumEquals(previousRound, round.roundId)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:804:9-804:40: `bigNumEquals(ans, round.answer)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:805:9-805:47: `bigNumEquals(updated, round.updatedAt)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:806:9-806:63: `bigNumEquals(previousRound - 1, round.answeredInRound)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:811:9-811:77: `evmRevert(aggregator.getRoundData(previousRound), 'No data present')`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:811:29-811:57: `.getRoundData(previousRound)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:813:9-813:75: `await aggregator.connect(personas.Nelly).submit(nextRound, answer)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:813:25-813:49: `.connect(personas.Nelly)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:813:49-813:75: `.submit(nextRound, answer)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:815:39-815:67: `.getRoundData(previousRound)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:817:9-817:63: `bigNumEquals(previousRound - 1, round.answeredInRound)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:822:9-824:10: `await evmRevert(
          aggregator.connect(personas.Ned).submit(nextRound, answer),
        )`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:823:21-823:43: `.connect(personas.Ned)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:823:43-823:69: `.submit(nextRound, answer)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:828:9-830:11: `await updateFutureRounds(aggregator, {
          timeout: timeout + 100000,
        })`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:832:9-832:75: `await aggregator.connect(personas.Nelly).submit(nextRound, answer)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:832:25-832:49: `.connect(personas.Nelly)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:832:49-832:75: `.submit(nextRound, answer)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:838:9-843:10: `await evmRevert(
          aggregator
            .connect(personas.Neil)
            .submit(nextRound, minSubmissionValue.sub(1)),
          'value below minSubmissionValue',
        )`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:839:21-840:36: `
            .connect(personas.Neil)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:840:36-841:58: `
            .submit(nextRound, minSubmissionValue.sub(1))`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:841:50-841:57: `.sub(1)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:847:9-849:49: `await aggregator
          .connect(personas.Neil)
          .submit(nextRound, minSubmissionValue)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:847:25-848:34: `
          .connect(personas.Neil)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:848:34-849:49: `
          .submit(nextRound, minSubmissionValue)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:853:9-855:49: `await aggregator
          .connect(personas.Neil)
          .submit(nextRound, maxSubmissionValue)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:853:25-854:34: `
          .connect(personas.Neil)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:854:34-855:49: `
          .submit(nextRound, maxSubmissionValue)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:859:9-864:10: `await evmRevert(
          aggregator
            .connect(personas.Neil)
            .submit(nextRound, maxSubmissionValue.add(1)),
          'value above maxSubmissionValue',
        )`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:860:21-861:36: `
            .connect(personas.Neil)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:861:36-862:58: `
            .submit(nextRound, maxSubmissionValue.add(1))`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:862:50-862:57: `.add(1)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:879:21-879:45: `.connect(personas.Nelly)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:879:45-879:71: `.submit(nextRound, answer)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:899:9-899:57: `bigNumEquals(0, await aggregator.latestAnswer())`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:899:41-899:56: `.latestAnswer()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:901:9-903:59: `await aggregator
          .connect(personas.Nelly)
          .submit(nextRound, answer, { gasLimit: 500000 })`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:901:25-902:35: `
          .connect(personas.Nelly)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:902:35-903:59: `
          .submit(nextRound, answer, { gasLimit: 500000 })`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:905:9-905:62: `bigNumEquals(answer, await aggregator.latestAnswer())`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:905:46-905:61: `.latestAnswer()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:923:40-923:53: `.getAnswer(i)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:924:9-924:61: `bigNumEquals(BigNumber.from(answers[i - 1]), answer)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:924:31-924:52: `.from(answers[i - 1])`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:929:37-929:45: `.from(2)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:929:45-929:53: `.pow(32)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:929:53-929:60: `.add(1)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:930:38-930:62: `.getAnswer(overflowedId)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:931:7-931:30: `bigNumEquals(0, answer)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:948:50-948:66: `.getTimestamp(i)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:950:9-950:41: `lastTimestamp = currentTimestamp`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:955:37-955:45: `.from(2)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:955:45-955:53: `.pow(32)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:955:53-955:60: `.add(1)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:956:38-956:65: `.getTimestamp(overflowedId)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:957:7-957:30: `bigNumEquals(0, answer)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:964:43-964:57: `.oracleCount()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:965:9-965:79: `await addOracles(aggregator, [personas.Neil], minAns, maxAns, rrDelay)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:966:46-966:60: `.oracleCount()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:968:9-968:50: `bigNumEquals(currentCount, pastCount + 1)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:972:9-972:79: `await addOracles(aggregator, [personas.Neil], minAns, maxAns, rrDelay)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:974:26-974:44: `.Neil.getAddress()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:975:27-975:40: `.getOracles()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:980:9-986:10: `await addOracles(
          aggregator,
          [personas.Neil, personas.Ned, personas.Nelly],
          1,
          3,
          2,
        )`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:987:9-987:63: `bigNumEquals(1, await aggregator.minSubmissionCount())`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:987:41-987:62: `.minSubmissionCount()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:988:9-988:63: `bigNumEquals(3, await aggregator.maxSubmissionCount())`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:988:41-988:62: `.maxSubmissionCount()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:989:9-989:57: `bigNumEquals(2, await aggregator.restartDelay())`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:989:41-989:56: `.restartDelay()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:993:36-994:35: `
          .connect(personas.Carol)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:994:35-1002:12: `
          .changeOracles(
            [],
            [await personas.Ned.getAddress()],
            [await personas.Neil.getAddress()],
            1,
            1,
            0,
          )`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:997:28-997:45: `.Ned.getAddress()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:998:28-998:46: `.Neil.getAddress()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1021:11-1024:12: `await evmRevert(
            addOracles(aggregator, [personas.Neil], minAns, maxAns, rrDelay),
            'oracle already enabled',
          )`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1030:11-1042:12: `await evmRevert(
            aggregator
              .connect(personas.Neil)
              .changeOracles(
                [],
                [await personas.Neil.getAddress()],
                [await personas.Neil.getAddress()],
                minAns,
                maxAns,
                rrDelay,
              ),
            'Only callable by owner',
          )`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1031:23-1032:38: `
              .connect(personas.Neil)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1032:38-1040:16: `
              .changeOracles(
                [],
                [await personas.Neil.getAddress()],
                [await personas.Neil.getAddress()],
                minAns,
                maxAns,
                rrDelay,
              )`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1035:32-1035:50: `.Neil.getAddress()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1036:32-1036:50: `.Neil.getAddress()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1069:11-1072:12: `await evmRevert(
            aggregator.connect(personas.Nelly).submit(nextRound, answer),
            'not yet enabled oracle',
          )`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1070:23-1070:47: `.connect(personas.Nelly)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1070:47-1070:73: `.submit(nextRound, answer)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1077:11-1077:75: `await aggregator.connect(personas.Ned).submit(nextRound, answer)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1077:27-1077:49: `.connect(personas.Ned)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1077:49-1077:75: `.submit(nextRound, answer)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1080:11-1080:81: `await aggregator.connect(personas.Nelly).submit(nextRound + 1, answer)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1080:27-1080:51: `.connect(personas.Nelly)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1080:51-1080:81: `.submit(nextRound + 1, answer)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1086:11-1086:52: `oracles = [personas.Neil, personas.Nelly]`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1087:11-1093:12: `await addOracles(
            aggregator,
            oracles,
            oracles.length,
            oracles.length,
            rrDelay,
          )`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1095:11-1095:76: `await aggregator.connect(personas.Neil).submit(nextRound, answer)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1095:27-1095:50: `.connect(personas.Neil)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1095:50-1095:76: `.submit(nextRound, answer)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1096:11-1096:77: `await aggregator.connect(personas.Nelly).submit(nextRound, answer)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1096:27-1096:51: `.connect(personas.Nelly)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1096:51-1096:77: `.submit(nextRound, answer)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1097:11-1097:22: `nextRound++`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1099:11-1108:14: `await aggregator
            .connect(personas.Carol)
            .changeOracles(
              [await personas.Nelly.getAddress()],
              [],
              [],
              1,
              1,
              rrDelay,
            )`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1099:27-1100:37: `
            .connect(personas.Carol)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1100:37-1108:14: `
            .changeOracles(
              [await personas.Nelly.getAddress()],
              [],
              [],
              1,
              1,
              rrDelay,
            )`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1102:30-1102:49: `.Nelly.getAddress()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1110:11-1110:76: `await aggregator.connect(personas.Neil).submit(nextRound, answer)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1110:27-1110:50: `.connect(personas.Neil)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1110:50-1110:76: `.submit(nextRound, answer)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1111:11-1111:22: `nextRound++`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1113:11-1113:72: `await addOracles(aggregator, [personas.Nelly], 1, 1, rrDelay)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1115:11-1115:77: `await aggregator.connect(personas.Nelly).submit(nextRound, answer)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1115:27-1115:51: `.connect(personas.Nelly)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1115:51-1115:77: `.submit(nextRound, answer)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1121:11-1127:12: `await addOracles(
            aggregator,
            oracles,
            oracles.length,
            oracles.length,
            rrDelay,
          )`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1129:11-1129:76: `await aggregator.connect(personas.Neil).submit(nextRound, answer)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1129:27-1129:50: `.connect(personas.Neil)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1129:50-1129:76: `.submit(nextRound, answer)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1130:11-1130:77: `await aggregator.connect(personas.Nelly).submit(nextRound, answer)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1130:27-1130:51: `.connect(personas.Nelly)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1130:51-1130:77: `.submit(nextRound, answer)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1131:11-1131:22: `nextRound++`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1133:11-1142:14: `await aggregator
            .connect(personas.Carol)
            .changeOracles(
              [await personas.Nelly.getAddress()],
              [],
              [],
              1,
              1,
              rrDelay,
            )`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1133:27-1134:37: `
            .connect(personas.Carol)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1134:37-1142:14: `
            .changeOracles(
              [await personas.Nelly.getAddress()],
              [],
              [],
              1,
              1,
              rrDelay,
            )`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1136:30-1136:49: `.Nelly.getAddress()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1144:11-1144:76: `await aggregator.connect(personas.Neil).submit(nextRound, answer)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1144:27-1144:50: `.connect(personas.Neil)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1144:50-1144:76: `.submit(nextRound, answer)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1145:11-1145:22: `nextRound++`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1147:11-1147:72: `await addOracles(aggregator, [personas.Nelly], 1, 1, rrDelay)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1149:11-1149:77: `await aggregator.connect(personas.Nelly).submit(nextRound, answer)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1149:27-1149:51: `.connect(personas.Nelly)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1149:51-1149:77: `.submit(nextRound, answer)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1155:11-1161:12: `await addOracles(
            aggregator,
            oracles,
            oracles.length,
            oracles.length,
            rrDelay,
          )`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1163:11-1163:76: `await aggregator.connect(personas.Neil).submit(nextRound, answer)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1163:27-1163:50: `.connect(personas.Neil)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1163:50-1163:76: `.submit(nextRound, answer)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1165:11-1174:14: `await aggregator
            .connect(personas.Carol)
            .changeOracles(
              [await personas.Nelly.getAddress()],
              [],
              [],
              1,
              1,
              rrDelay,
            )`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1165:27-1166:37: `
            .connect(personas.Carol)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1166:37-1174:14: `
            .changeOracles(
              [await personas.Nelly.getAddress()],
              [],
              [],
              1,
              1,
              rrDelay,
            )`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1168:30-1168:49: `.Nelly.getAddress()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1176:11-1188:12: `await evmRevert(
            aggregator
              .connect(personas.Carol)
              .changeOracles(
                [],
                [await personas.Nelly.getAddress()],
                [await personas.Carol.getAddress()],
                1,
                1,
                rrDelay,
              ),
            'owner cannot overwrite admin',
          )`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1177:23-1178:39: `
              .connect(personas.Carol)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1178:39-1186:16: `
              .changeOracles(
                [],
                [await personas.Nelly.getAddress()],
                [await personas.Carol.getAddress()],
                1,
                1,
                rrDelay,
              )`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1181:32-1181:51: `.Nelly.getAddress()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1182:32-1182:51: `.Carol.getAddress()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1237:13-1239:44: `tx = await aggregator
              .connect(oracles[i])
              .submit(nextRound, inputs[i])`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1237:34-1238:35: `
              .connect(oracles[i])`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1238:35-1239:44: `
              .submit(nextRound, inputs[i])`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1243:37-1243:44: `.wait()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1244:35-1244:54: `.gasUsed.toNumber()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1267:11-1279:12: `await evmRevert(
            aggregator
              .connect(personas.Carol)
              .changeOracles(
                [],
                [await personas.Neil.getAddress()],
                [await personas.Neil.getAddress()],
                limit + 1,
                limit + 1,
                rrDelay,
              ),
            'max oracles allowed',
          )`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1268:23-1269:39: `
              .connect(personas.Carol)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1269:39-1277:16: `
              .changeOracles(
                [],
                [await personas.Neil.getAddress()],
                [await personas.Neil.getAddress()],
                limit + 1,
                limit + 1,
                rrDelay,
              )`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1272:32-1272:50: `.Neil.getAddress()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1273:32-1273:50: `.Neil.getAddress()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1284:9-1287:10: `await evmRevert(
          addOracles(aggregator, [personas.Neil], 0, 0, 0),
          'min must be greater than 0',
        )`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1304:43-1304:57: `.oracleCount()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1305:9-1314:12: `await aggregator
          .connect(personas.Carol)
          .changeOracles(
            [await personas.Neil.getAddress()],
            [],
            [],
            minAns,
            maxAns,
            rrDelay,
          )`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1305:25-1306:35: `
          .connect(personas.Carol)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1306:35-1314:12: `
          .changeOracles(
            [await personas.Neil.getAddress()],
            [],
            [],
            minAns,
            maxAns,
            rrDelay,
          )`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1308:28-1308:46: `.Neil.getAddress()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1315:46-1315:60: `.oracleCount()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1321:9-1323:78: `await aggregator
          .connect(personas.Carol)
          .changeOracles([await personas.Neil.getAddress()], [], [], 1, 1, 0)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1321:25-1322:35: `
          .connect(personas.Carol)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1322:35-1323:78: `
          .changeOracles([await personas.Neil.getAddress()], [], [], 1, 1, 0)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1323:41-1323:59: `.Neil.getAddress()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1325:9-1325:63: `bigNumEquals(1, await aggregator.minSubmissionCount())`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1325:41-1325:62: `.minSubmissionCount()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1326:9-1326:63: `bigNumEquals(1, await aggregator.maxSubmissionCount())`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1326:41-1326:62: `.maxSubmissionCount()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1327:9-1327:77: `bigNumEquals(ethers.constants.Zero, await aggregator.restartDelay())`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1327:61-1327:76: `.restartDelay()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1332:21-1333:37: `
            .connect(personas.Carol)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1333:37-1341:14: `
            .changeOracles(
              [await personas.Neil.getAddress()],
              [],
              [],
              minAns,
              maxAns,
              rrDelay,
            )`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1335:30-1335:48: `.Neil.getAddress()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1348:9-1357:12: `await aggregator
          .connect(personas.Carol)
          .changeOracles(
            [await personas.Neil.getAddress()],
            [],
            [],
            minAns,
            maxAns,
            rrDelay,
          )`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1348:25-1349:35: `
          .connect(personas.Carol)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1349:35-1357:12: `
          .changeOracles(
            [await personas.Neil.getAddress()],
            [],
            [],
            minAns,
            maxAns,
            rrDelay,
          )`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1351:28-1351:46: `.Neil.getAddress()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1359:26-1359:45: `.Nelly.getAddress()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1360:27-1360:40: `.getOracles()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1379:11-1391:12: `await evmRevert(
            aggregator
              .connect(personas.Carol)
              .changeOracles(
                [await personas.Neil.getAddress()],
                [],
                [],
                minAns,
                maxAns,
                rrDelay,
              ),
            'oracle not enabled',
          )`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1380:23-1381:39: `
              .connect(personas.Carol)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1381:39-1389:16: `
              .changeOracles(
                [await personas.Neil.getAddress()],
                [],
                [],
                minAns,
                maxAns,
                rrDelay,
              )`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1383:32-1383:50: `.Neil.getAddress()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1397:11-1406:14: `await aggregator
            .connect(personas.Carol)
            .changeOracles(
              [await personas.Neil.getAddress()],
              [],
              [],
              minAns,
              maxAns,
              rrDelay,
            )`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1397:27-1398:37: `
            .connect(personas.Carol)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1398:37-1406:14: `
            .changeOracles(
              [await personas.Neil.getAddress()],
              [],
              [],
              minAns,
              maxAns,
              rrDelay,
            )`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1400:30-1400:48: `.Neil.getAddress()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1408:11-1410:81: `await aggregator
            .connect(personas.Carol)
            .changeOracles([await personas.Nelly.getAddress()], [], [], 0, 0, 0)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1408:27-1409:37: `
            .connect(personas.Carol)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1409:37-1410:81: `
            .changeOracles([await personas.Nelly.getAddress()], [], [], 0, 0, 0)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1410:43-1410:62: `.Nelly.getAddress()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1416:11-1428:12: `await evmRevert(
            aggregator
              .connect(personas.Ned)
              .changeOracles(
                [await personas.Neil.getAddress()],
                [],
                [],
                0,
                0,
                rrDelay,
              ),
            'Only callable by owner',
          )`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1417:23-1418:37: `
              .connect(personas.Ned)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1418:37-1426:16: `
              .changeOracles(
                [await personas.Neil.getAddress()],
                [],
                [],
                0,
                0,
                rrDelay,
              )`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1420:32-1420:50: `.Neil.getAddress()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1448:11-1448:59: `await advanceRound(aggregator, [personas.Nelly])`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1450:11-1450:58: `await advanceRound(aggregator, [personas.Neil])`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1453:11-1456:12: `await evmRevert(
            aggregator.connect(personas.Nelly).submit(nextRound, answer),
            'no longer allowed oracle',
          )`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1454:23-1454:47: `.connect(personas.Nelly)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1454:47-1454:73: `.submit(nextRound, answer)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1477:11-1477:59: `await advanceRound(aggregator, [personas.Nelly])`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1479:11-1479:59: `await advanceRound(aggregator, [personas.Nelly])`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1482:11-1485:12: `await evmRevert(
            aggregator.connect(personas.Nelly).submit(nextRound, answer),
            'no longer allowed oracle',
          )`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1483:23-1483:47: `.connect(personas.Nelly)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1483:47-1483:73: `.submit(nextRound, answer)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1490:9-1502:10: `await evmRevert(
          aggregator
            .connect(personas.Carol)
            .changeOracles(
              [await personas.Nelly.getAddress()],
              [],
              [],
              0,
              0,
              0,
            ),
          'min must be greater than 0',
        )`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1491:21-1492:37: `
            .connect(personas.Carol)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1492:37-1500:14: `
            .changeOracles(
              [await personas.Nelly.getAddress()],
              [],
              [],
              0,
              0,
              0,
            )`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1494:30-1494:49: `.Nelly.getAddress()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1514:27-1514:40: `.getOracles()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1515:25-1515:42: `.Ned.getAddress()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1518:27-1518:40: `.getOracles()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1519:25-1519:44: `.Nelly.getAddress()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1522:9-1531:12: `await aggregator
          .connect(personas.Carol)
          .changeOracles(
            [await personas.Ned.getAddress()],
            [await personas.Nelly.getAddress()],
            [await personas.Nelly.getAddress()],
            1,
            1,
            rrDelay,
          )`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1522:25-1523:35: `
          .connect(personas.Carol)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1523:35-1531:12: `
          .changeOracles(
            [await personas.Ned.getAddress()],
            [await personas.Nelly.getAddress()],
            [await personas.Nelly.getAddress()],
            1,
            1,
            rrDelay,
          )`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1525:28-1525:45: `.Ned.getAddress()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1526:28-1526:47: `.Nelly.getAddress()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1527:28-1527:47: `.Nelly.getAddress()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1534:27-1534:40: `.getOracles()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1535:25-1535:42: `.Ned.getAddress()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1538:27-1538:40: `.getOracles()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1539:25-1539:44: `.Nelly.getAddress()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1545:27-1545:40: `.getOracles()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1546:25-1546:42: `.Ned.getAddress()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1549:9-1558:12: `await aggregator
          .connect(personas.Carol)
          .changeOracles(
            [await personas.Ned.getAddress()],
            [await personas.Ned.getAddress()],
            [await personas.Ned.getAddress()],
            1,
            1,
            rrDelay,
          )`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1549:25-1550:35: `
          .connect(personas.Carol)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1550:35-1558:12: `
          .changeOracles(
            [await personas.Ned.getAddress()],
            [await personas.Ned.getAddress()],
            [await personas.Ned.getAddress()],
            1,
            1,
            rrDelay,
          )`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1552:28-1552:45: `.Ned.getAddress()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1553:28-1553:45: `.Ned.getAddress()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1554:28-1554:45: `.Ned.getAddress()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1561:27-1561:40: `.getOracles()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1562:25-1562:42: `.Ned.getAddress()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1580:9-1580:78: `await addOracles(aggregator, [personas.Ned], minAns, maxAns, rrDelay)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1583:26-1583:44: `.Neil.getAddress()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1583:60-1583:77: `.Ned.getAddress()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1584:27-1584:40: `.getOracles()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1587:9-1587:80: `await addOracles(aggregator, [personas.Nelly], minAns, maxAns, rrDelay)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1590:27-1590:45: `.Neil.getAddress()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1591:27-1591:44: `.Ned.getAddress()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1592:27-1592:46: `.Nelly.getAddress()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1594:27-1594:40: `.getOracles()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1620:9-1629:12: `await aggregator
          .connect(personas.Carol)
          .changeOracles(
            [await personas.Neil.getAddress()],
            [],
            [],
            minAns,
            maxAns,
            rrDelay,
          )`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1620:25-1621:35: `
          .connect(personas.Carol)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1621:35-1629:12: `
          .changeOracles(
            [await personas.Neil.getAddress()],
            [],
            [],
            minAns,
            maxAns,
            rrDelay,
          )`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1623:28-1623:46: `.Neil.getAddress()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1631:26-1631:45: `.Nelly.getAddress()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1631:61-1631:78: `.Ned.getAddress()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1632:27-1632:40: `.getOracles()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1637:9-1646:12: `await aggregator
          .connect(personas.Carol)
          .changeOracles(
            [await personas.Ned.getAddress()],
            [],
            [],
            minAns,
            maxAns,
            rrDelay,
          )`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1637:25-1638:35: `
          .connect(personas.Carol)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1638:35-1646:12: `
          .changeOracles(
            [await personas.Ned.getAddress()],
            [],
            [],
            minAns,
            maxAns,
            rrDelay,
          )`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1640:28-1640:45: `.Ned.getAddress()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1648:26-1648:44: `.Neil.getAddress()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1648:60-1648:79: `.Nelly.getAddress()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1649:27-1649:40: `.getOracles()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1654:9-1663:12: `await aggregator
          .connect(personas.Carol)
          .changeOracles(
            [await personas.Nelly.getAddress()],
            [],
            [],
            minAns,
            maxAns,
            rrDelay,
          )`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1654:25-1655:35: `
          .connect(personas.Carol)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1655:35-1663:12: `
          .changeOracles(
            [await personas.Nelly.getAddress()],
            [],
            [],
            minAns,
            maxAns,
            rrDelay,
          )`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1657:28-1657:47: `.Nelly.getAddress()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1665:26-1665:44: `.Neil.getAddress()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1665:60-1665:77: `.Ned.getAddress()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1666:27-1666:40: `.getOracles()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1674:7-1676:67: `await aggregator
        .connect(personas.Carol)
        .withdrawFunds(await personas.Carol.getAddress(), deposit)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1674:23-1675:33: `
        .connect(personas.Carol)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1675:33-1676:67: `
        .withdrawFunds(await personas.Carol.getAddress(), deposit)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1676:38-1676:57: `.Carol.getAddress()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1678:7-1678:57: `bigNumEquals(0, await aggregator.availableFunds())`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1678:39-1678:56: `.availableFunds()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1679:7-1682:8: `bigNumEquals(
        deposit,
        await link.balanceOf(await personas.Carol.getAddress()),
      )`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1681:19-1681:64: `.balanceOf(await personas.Carol.getAddress())`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1681:44-1681:63: `.Carol.getAddress()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1686:7-1688:67: `await aggregator
        .connect(personas.Carol)
        .withdrawFunds(await personas.Carol.getAddress(), deposit)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1686:23-1687:33: `
        .connect(personas.Carol)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1687:33-1688:67: `
        .withdrawFunds(await personas.Carol.getAddress(), deposit)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1688:38-1688:57: `.Carol.getAddress()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1690:7-1695:8: `await evmRevert(
        aggregator
          .connect(personas.Carol)
          .withdrawFunds(await personas.Carol.getAddress(), deposit),
        'insufficient reserve funds',
      )`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1691:19-1692:35: `
          .connect(personas.Carol)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1692:35-1693:69: `
          .withdrawFunds(await personas.Carol.getAddress(), deposit)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1693:40-1693:59: `.Carol.getAddress()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1706:9-1711:10: `await evmRevert(
          aggregator
            .connect(personas.Carol)
            .withdrawFunds(await personas.Carol.getAddress(), deposit),
          'insufficient reserve funds',
        )`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1707:21-1708:37: `
            .connect(personas.Carol)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1708:37-1709:71: `
            .withdrawFunds(await personas.Carol.getAddress(), deposit)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1709:42-1709:61: `.Carol.getAddress()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1713:9-1716:10: `bigNumEquals(
          deposit.sub(paymentAmount),
          await aggregator.availableFunds(),
        )`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1714:18-1714:37: `.sub(paymentAmount)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1715:27-1715:44: `.availableFunds()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1729:44-1730:31: `
          .mul(oracles.length)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1730:31-1731:30: `
          .mul(reserveRounds)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1732:32-1732:51: `.sub(oracleReserve)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1735:9-1740:10: `await evmRevert(
          aggregator
            .connect(personas.Carol)
            .withdrawFunds(await personas.Carol.getAddress(), allowed.add(1)),
          'insufficient reserve funds',
        )`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1736:21-1737:37: `
            .connect(personas.Carol)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1737:37-1738:78: `
            .withdrawFunds(await personas.Carol.getAddress(), allowed.add(1))`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1738:42-1738:61: `.Carol.getAddress()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1738:70-1738:77: `.add(1)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1743:9-1745:69: `await aggregator
          .connect(personas.Carol)
          .withdrawFunds(await personas.Carol.getAddress(), allowed)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1743:25-1744:35: `
          .connect(personas.Carol)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1744:35-1745:69: `
          .withdrawFunds(await personas.Carol.getAddress(), allowed)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1745:40-1745:59: `.Carol.getAddress()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1751:9-1756:10: `await evmRevert(
          aggregator
            .connect(personas.Eddy)
            .withdrawFunds(await personas.Carol.getAddress(), deposit),
          'Only callable by owner',
        )`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1752:21-1753:36: `
            .connect(personas.Eddy)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1753:36-1754:71: `
            .withdrawFunds(await personas.Carol.getAddress(), deposit)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1754:42-1754:61: `.Carol.getAddress()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1758:9-1758:65: `bigNumEquals(deposit, await aggregator.availableFunds())`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1758:47-1758:64: `.availableFunds()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1788:7-1793:9: `await updateFutureRounds(aggregator, {
        payment: newPaymentAmount,
        minAnswers: newMin,
        maxAnswers: newMax,
        restartDelay: newDelay,
      })`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1795:7-1795:71: `bigNumEquals(newPaymentAmount, await aggregator.paymentAmount())`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1795:54-1795:70: `.paymentAmount()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1796:7-1799:8: `bigNumEquals(
        BigNumber.from(newMin),
        await aggregator.minSubmissionCount(),
      )`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1797:18-1797:31: `.from(newMin)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1798:25-1798:46: `.minSubmissionCount()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1800:7-1803:8: `bigNumEquals(
        BigNumber.from(newMax),
        await aggregator.maxSubmissionCount(),
      )`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1801:18-1801:31: `.from(newMax)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1802:25-1802:46: `.maxSubmissionCount()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1804:7-1804:78: `bigNumEquals(BigNumber.from(newDelay), await aggregator.restartDelay())`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1804:29-1804:44: `.from(newDelay)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1804:62-1804:77: `.restartDelay()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1823:9-1828:10: `await evmRevert(
          updateFutureRounds(aggregator, {
            maxAnswers: 4,
          }),
          'max cannot exceed total',
        )`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1834:9-1840:10: `await evmRevert(
          updateFutureRounds(aggregator, {
            minAnswers: 3,
            maxAnswers: 2,
          }),
          'max must equal/exceed min',
        )`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1846:9-1851:10: `await evmRevert(
          updateFutureRounds(aggregator, {
            restartDelay: 3,
          }),
          'delay cannot exceed total',
        )`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1859:29-1859:65: `.div(oracles.length * reserveRounds)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1864:24-1864:31: `.add(1)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1865:11-1878:10: `.then(
          () => {
            // onFulfillment callback
            fail('expected to revert but did not')
          },
          (error: any) => {
            // onRejected callback
            const message =
              error instanceof Object && 'message' in error
                ? error.message
                : JSON.stringify(error)
            assert.isTrue(message.includes('insufficient funds'))
          },
        )`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1868:13-1868:51: `fail('expected to revert but did not')`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1875:23-1875:40: `.stringify(error)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1876:34-1876:65: `.includes('insufficient funds')`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1880:9-1882:11: `await updateFutureRounds(aggregator, {
          payment: most,
        })`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1888:9-1891:10: `await evmRevert(
          aggregator.updateFutureRounds(paymentAmount, 0, 0, rrDelay, timeout),
          'min must be greater than 0',
        )`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1889:21-1889:79: `.updateFutureRounds(paymentAmount, 0, 0, rrDelay, timeout)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1897:9-1900:10: `await evmRevert(
          updateFutureRounds(aggregator.connect(personas.Ned)),
          'Only callable by owner',
        )`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1898:40-1898:62: `.connect(personas.Ned)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1907:47-1907:64: `.availableFunds()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1909:7-1909:46: `await aggregator.updateAvailableFunds()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1909:23-1909:46: `.updateAvailableFunds()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1911:7-1911:71: `bigNumEquals(originalBalance, await aggregator.availableFunds())`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1911:53-1911:70: `.availableFunds()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1913:7-1913:55: `await link.transfer(aggregator.address, deposit)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1913:17-1913:55: `.transfer(aggregator.address, deposit)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1914:7-1914:46: `await aggregator.updateAvailableFunds()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1914:23-1914:46: `.updateAvailableFunds()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1916:42-1916:59: `.availableFunds()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1917:7-1917:61: `bigNumEquals(originalBalance.add(deposit), newBalance)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1917:35-1917:48: `.add(deposit)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1921:47-1921:64: `.availableFunds()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1923:7-1923:77: `await addOracles(aggregator, [personas.Neil], minAns, maxAns, rrDelay)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1924:7-1924:72: `await aggregator.connect(personas.Neil).submit(nextRound, answer)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1924:23-1924:46: `.connect(personas.Neil)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1924:46-1924:72: `.submit(nextRound, answer)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1925:7-1925:55: `await link.transfer(aggregator.address, deposit)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1925:17-1925:55: `.transfer(aggregator.address, deposit)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1926:7-1926:46: `await aggregator.updateAvailableFunds()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1926:23-1926:46: `.updateAvailableFunds()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1928:39-1928:52: `.add(deposit)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1928:52-1928:71: `.sub(paymentAmount)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1929:42-1929:59: `.availableFunds()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1930:7-1930:41: `bigNumEquals(expected, newBalance)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1934:7-1934:55: `await link.transfer(aggregator.address, deposit)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1934:17-1934:55: `.transfer(aggregator.address, deposit)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1936:34-1936:57: `.updateAvailableFunds()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1937:31-1937:38: `.wait()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1939:40-1939:80: `.from(receipt.logs?.[0].topics[1] ?? -1)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1940:7-1940:71: `bigNumEquals(await aggregator.availableFunds(), reportedBalance)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1940:36-1940:53: `.availableFunds()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1945:36-1945:59: `.updateAvailableFunds()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1946:33-1946:40: `.wait()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1960:41-1960:71: `.balanceOf(aggregator.address)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1961:7-1961:78: `bigNumEquals(0, await link.balanceOf(await personas.Neil.getAddress()))`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1961:33-1961:77: `.balanceOf(await personas.Neil.getAddress())`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1961:58-1961:76: `.Neil.getAddress()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1963:7-1969:10: `await aggregator
        .connect(personas.Neil)
        .withdrawPayment(
          await personas.Neil.getAddress(),
          await personas.Neil.getAddress(),
          paymentAmount,
        )`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1963:23-1964:32: `
        .connect(personas.Neil)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1964:32-1969:10: `
        .withdrawPayment(
          await personas.Neil.getAddress(),
          await personas.Neil.getAddress(),
          paymentAmount,
        )`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1966:25-1966:43: `.Neil.getAddress()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1967:25-1967:43: `.Neil.getAddress()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1971:7-1974:8: `bigNumEquals(
        originalBalance.sub(paymentAmount),
        await link.balanceOf(aggregator.address),
      )`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1972:24-1972:43: `.sub(paymentAmount)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1973:19-1973:49: `.balanceOf(aggregator.address)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1975:7-1978:8: `bigNumEquals(
        paymentAmount,
        await link.balanceOf(await personas.Neil.getAddress()),
      )`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1977:19-1977:63: `.balanceOf(await personas.Neil.getAddress())`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1977:44-1977:62: `.Neil.getAddress()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1982:50-1982:67: `.allocatedFunds()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1984:7-1990:10: `await aggregator
        .connect(personas.Neil)
        .withdrawPayment(
          await personas.Neil.getAddress(),
          await personas.Neil.getAddress(),
          paymentAmount,
        )`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1984:23-1985:32: `
        .connect(personas.Neil)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1985:32-1990:10: `
        .withdrawPayment(
          await personas.Neil.getAddress(),
          await personas.Neil.getAddress(),
          paymentAmount,
        )`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1987:25-1987:43: `.Neil.getAddress()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1988:25-1988:43: `.Neil.getAddress()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1992:7-1995:8: `bigNumEquals(
        originalAllocation.sub(paymentAmount),
        await aggregator.allocatedFunds(),
      )`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1993:27-1993:46: `.sub(paymentAmount)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:1994:25-1994:42: `.allocatedFunds()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:2000:9-2009:10: `await evmRevert(
          aggregator
            .connect(personas.Neil)
            .withdrawPayment(
              await personas.Neil.getAddress(),
              await personas.Neil.getAddress(),
              paymentAmount.add(BigNumber.from(1)),
            ),
          'insufficient withdrawable funds',
        )`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:2001:21-2002:36: `
            .connect(personas.Neil)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:2002:36-2007:14: `
            .withdrawPayment(
              await personas.Neil.getAddress(),
              await personas.Neil.getAddress(),
              paymentAmount.add(BigNumber.from(1)),
            )`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:2004:29-2004:47: `.Neil.getAddress()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:2005:29-2005:47: `.Neil.getAddress()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:2006:28-2006:51: `.add(BigNumber.from(1))`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:2006:42-2006:50: `.from(1)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:2015:9-2024:10: `await evmRevert(
          aggregator
            .connect(personas.Nelly)
            .withdrawPayment(
              await personas.Neil.getAddress(),
              await personas.Nelly.getAddress(),
              BigNumber.from(1),
            ),
          'only callable by admin',
        )`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:2016:21-2017:37: `
            .connect(personas.Nelly)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:2017:37-2022:14: `
            .withdrawPayment(
              await personas.Neil.getAddress(),
              await personas.Nelly.getAddress(),
              BigNumber.from(1),
            )`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:2019:29-2019:47: `.Neil.getAddress()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:2020:29-2020:48: `.Nelly.getAddress()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:2021:24-2021:32: `.from(1)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:2046:21-2047:36: `
            .connect(personas.Neil)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:2047:36-2051:14: `
            .transferAdmin(
              await personas.Ned.getAddress(),
              await personas.Nelly.getAddress(),
            )`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:2049:29-2049:46: `.Ned.getAddress()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:2050:29-2050:48: `.Nelly.getAddress()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:2060:25-2060:43: `.Neil.getAddress()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:2061:27-2061:69: `.getAdmin(await personas.Ned.getAddress())`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:2061:51-2061:68: `.Ned.getAddress()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:2068:9-2076:10: `await evmRevert(
          aggregator
            .connect(personas.Carol)
            .transferAdmin(
              await personas.Ned.getAddress(),
              await personas.Nelly.getAddress(),
            ),
          'only callable by admin',
        )`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:2069:21-2070:37: `
            .connect(personas.Carol)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:2070:37-2074:14: `
            .transferAdmin(
              await personas.Ned.getAddress(),
              await personas.Nelly.getAddress(),
            )`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:2072:29-2072:46: `.Ned.getAddress()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:2073:29-2073:48: `.Nelly.getAddress()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:2082:9-2090:10: `await evmRevert(
          aggregator
            .connect(personas.Ned)
            .transferAdmin(
              await personas.Ned.getAddress(),
              await personas.Nelly.getAddress(),
            ),
          'only callable by admin',
        )`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:2083:21-2084:35: `
            .connect(personas.Ned)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:2084:35-2088:14: `
            .transferAdmin(
              await personas.Ned.getAddress(),
              await personas.Nelly.getAddress(),
            )`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:2086:29-2086:46: `.Ned.getAddress()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:2087:29-2087:48: `.Nelly.getAddress()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:2119:21-2120:37: `
            .connect(personas.Nelly)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:2120:37-2121:58: `
            .acceptAdmin(await personas.Ned.getAddress())`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:2121:40-2121:57: `.Ned.getAddress()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:2129:25-2129:44: `.Nelly.getAddress()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:2130:27-2130:69: `.getAdmin(await personas.Ned.getAddress())`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:2130:51-2130:68: `.Ned.getAddress()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:2137:9-2142:10: `await evmRevert(
          aggregator
            .connect(personas.Ned)
            .acceptAdmin(await personas.Ned.getAddress()),
          'only callable by pending admin',
        )`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:2138:21-2139:35: `
            .connect(personas.Ned)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:2139:35-2140:58: `
            .acceptAdmin(await personas.Ned.getAddress())`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:2140:40-2140:57: `.Ned.getAddress()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:2143:9-2148:10: `await evmRevert(
          aggregator
            .connect(personas.Neil)
            .acceptAdmin(await personas.Ned.getAddress()),
          'only callable by pending admin',
        )`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:2144:21-2145:36: `
            .connect(personas.Neil)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:2145:36-2146:58: `
            .acceptAdmin(await personas.Ned.getAddress())`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:2146:40-2146:57: `.Ned.getAddress()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:2155:47-2155:64: `.availableFunds()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:2157:7-2157:46: `await aggregator.updateAvailableFunds()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:2157:23-2157:46: `.updateAvailableFunds()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:2159:7-2159:71: `bigNumEquals(originalBalance, await aggregator.availableFunds())`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:2159:53-2159:70: `.availableFunds()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:2161:7-2161:68: `await link.transferAndCall(aggregator.address, deposit, '0x')`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:2161:17-2161:68: `.transferAndCall(aggregator.address, deposit, '0x')`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:2163:42-2163:59: `.availableFunds()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:2164:7-2164:61: `bigNumEquals(originalBalance.add(deposit), newBalance)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:2164:35-2164:48: `.add(deposit)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:2168:7-2171:8: `await evmRevert(
        // error message is not bubbled up by link token
        link.transferAndCall(aggregator.address, deposit, '0x12345678'),
      )`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:2170:13-2170:72: `.transferAndCall(aggregator.address, deposit, '0x12345678')`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:2190:30-2190:48: `.requestNewRound()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:2194:7-2194:76: `testHelper = await testHelperFactory.connect(personas.Carol).deploy()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:2194:43-2194:67: `.connect(personas.Carol)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:2194:67-2194:76: `.deploy()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:2195:7-2195:76: `await aggregator.setRequesterPermissions(testHelper.address, true, 0)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:2195:23-2195:76: `.setRequesterPermissions(testHelper.address, true, 0)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:2196:37-2196:56: `.requestedRoundId()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:2199:7-2199:59: `await testHelper.requestNewRound(aggregator.address)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:2199:23-2199:59: `.requestNewRound(aggregator.address)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:2202:7-2202:52: `roundId = await testHelper.requestedRoundId()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:2202:33-2202:52: `.requestedRoundId()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:2212:9-2215:10: `await evmRevert(
          aggregator.requestNewRound(),
          'prev round must be supersedable',
        )`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:2213:21-2213:39: `.requestNewRound()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:2225:34-2225:52: `.requestNewRound()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:2243:9-2243:66: `await aggregator.connect(personas.Eddy).requestNewRound()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:2243:25-2243:48: `.connect(personas.Eddy)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:2243:48-2243:66: `.requestNewRound()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:2245:9-2245:74: `await aggregator.connect(personas.Neil).submit(nextRound, answer)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:2245:25-2245:48: `.connect(personas.Neil)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:2245:48-2245:74: `.submit(nextRound, answer)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:2246:9-2246:34: `nextRound = nextRound + 1`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:2249:9-2252:10: `await evmRevert(
          aggregator.connect(personas.Eddy).requestNewRound(),
          'must delay requests',
        )`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:2250:21-2250:44: `.connect(personas.Eddy)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:2250:44-2250:62: `.requestNewRound()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:2254:9-2254:67: `await aggregator.connect(personas.Carol).requestNewRound()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:2254:25-2254:49: `.connect(personas.Carol)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:2254:49-2254:67: `.requestNewRound()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:2257:9-2257:74: `await aggregator.connect(personas.Neil).submit(nextRound, answer)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:2257:25-2257:48: `.connect(personas.Neil)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:2257:48-2257:74: `.submit(nextRound, answer)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:2258:9-2258:34: `nextRound = nextRound + 1`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:2261:9-2261:66: `await aggregator.connect(personas.Eddy).requestNewRound()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:2261:25-2261:48: `.connect(personas.Eddy)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:2261:48-2261:66: `.requestNewRound()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:2267:9-2269:78: `await aggregator
          .connect(personas.Carol)
          .changeOracles([await personas.Neil.getAddress()], [], [], 0, 0, 0)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:2267:25-2268:35: `
          .connect(personas.Carol)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:2268:35-2269:78: `
          .changeOracles([await personas.Neil.getAddress()], [], [], 0, 0, 0)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:2269:41-2269:59: `.Neil.getAddress()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:2273:11-2273:45: `await aggregator.requestNewRound()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:2273:27-2273:45: `.requestNewRound()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:2274:11-2274:36: `nextRound = nextRound + 1`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:2275:11-2275:61: `await increaseTimeBy(timeout + 1, ethers.provider)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:2276:11-2276:43: `await mineBlock(ethers.provider)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:2279:9-2279:63: `await addOracles(aggregator, [personas.Neil], 1, 1, 0)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:2280:9-2280:74: `await aggregator.connect(personas.Neil).submit(nextRound, answer)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:2280:25-2280:48: `.connect(personas.Neil)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:2280:48-2280:74: `.submit(nextRound, answer)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:2295:9-2299:10: `await aggregator.setRequesterPermissions(
          await personas.Neil.getAddress(),
          true,
          0,
        )`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:2295:25-2299:10: `.setRequesterPermissions(
          await personas.Neil.getAddress(),
          true,
          0,
        )`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:2296:25-2296:43: `.Neil.getAddress()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:2301:9-2301:66: `await aggregator.connect(personas.Neil).requestNewRound()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:2301:25-2301:48: `.connect(personas.Neil)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:2301:48-2301:66: `.requestNewRound()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:2306:21-2310:12: `.setRequesterPermissions(
            await personas.Neil.getAddress(),
            true,
            0,
          )`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:2307:27-2307:45: `.Neil.getAddress()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:2326:38-2330:12: `.setRequesterPermissions(
            await personas.Neil.getAddress(),
            true,
            0,
          )`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:2327:27-2327:45: `.Neil.getAddress()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:2331:35-2331:42: `.wait()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:2346:11-2350:12: `await aggregator.setRequesterPermissions(
            await personas.Neil.getAddress(),
            false,
            0,
          )`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:2346:27-2350:12: `.setRequesterPermissions(
            await personas.Neil.getAddress(),
            false,
            0,
          )`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:2347:27-2347:45: `.Neil.getAddress()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:2352:11-2355:12: `await evmRevert(
            aggregator.connect(personas.Neil).requestNewRound(),
            'not authorized requester',
          )`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:2353:23-2353:46: `.connect(personas.Neil)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:2353:46-2353:64: `.requestNewRound()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:2360:23-2364:14: `.setRequesterPermissions(
              await personas.Neil.getAddress(),
              false,
              0,
            )`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:2361:29-2361:47: `.Neil.getAddress()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:2371:38-2375:12: `.setRequesterPermissions(
            await personas.Ned.getAddress(),
            false,
            0,
          )`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:2372:27-2372:44: `.Ned.getAddress()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:2376:35-2376:42: `.wait()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:2384:9-2389:10: `await evmRevert(
          aggregator
            .connect(personas.Neil)
            .setRequesterPermissions(await personas.Neil.getAddress(), true, 0),
          'Only callable by owner',
        )`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:2385:21-2386:36: `
            .connect(personas.Neil)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:2386:36-2387:80: `
            .setRequesterPermissions(await personas.Neil.getAddress(), true, 0)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:2387:52-2387:70: `.Neil.getAddress()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:2391:9-2394:10: `await evmRevert(
          aggregator.connect(personas.Neil).requestNewRound(),
          'not authorized requester',
        )`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:2392:21-2392:44: `.connect(personas.Neil)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:2392:44-2392:62: `.requestNewRound()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:2436:39-2439:10: `.oracleRoundState(
          await personas.Nelly.getAddress(),
          0,
        )`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:2437:25-2437:44: `.Nelly.getAddress()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:2441:9-2450:11: `await checkOracleRoundState(state, {
          eligibleToSubmit: true,
          roundId: 2,
          latestSubmission: previousSubmission,
          startedAt: ShouldNotBeSet,
          timeout: 0,
          availableFunds: baseFunds,
          oracleCount: oracles.length,
          paymentAmount,
        })`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:2454:9-2454:78: `testHelper = await testHelperFactory.connect(personas.Carol).deploy()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:2454:45-2454:69: `.connect(personas.Carol)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:2454:69-2454:78: `.deploy()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:2455:9-2461:10: `await evmRevert(
          testHelper.readOracleRoundState(
            aggregator.address,
            await personas.Neil.getAddress(),
          ),
          'off-chain reading only',
        )`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:2456:21-2459:12: `.readOracleRoundState(
            aggregator.address,
            await personas.Neil.getAddress(),
          )`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:2458:27-2458:45: `.Neil.getAddress()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:2479:43-2482:14: `.oracleRoundState(
              await personas.Nelly.getAddress(),
              0,
            )`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:2480:29-2480:48: `.Nelly.getAddress()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:2484:13-2493:15: `await checkOracleRoundState(state, {
              eligibleToSubmit: true,
              roundId: 2,
              latestSubmission: previousSubmission,
              startedAt: ShouldBeSet,
              timeout,
              availableFunds: baseFunds.sub(paymentAmount),
              oracleCount: oracles.length,
              paymentAmount,
            })`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:2490:40-2490:59: `.sub(paymentAmount)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:2503:43-2506:14: `.oracleRoundState(
              await personas.Nelly.getAddress(),
              0,
            )`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:2504:29-2504:48: `.Nelly.getAddress()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:2508:13-2517:15: `await checkOracleRoundState(state, {
              eligibleToSubmit: false,
              roundId: 2,
              latestSubmission: answer,
              startedAt: ShouldBeSet,
              timeout,
              availableFunds: baseFunds.sub(paymentAmount),
              oracleCount: oracles.length,
              paymentAmount,
            })`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:2514:40-2514:59: `.sub(paymentAmount)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:2527:45-2530:16: `.oracleRoundState(
                await personas.Nelly.getAddress(),
                0,
              )`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:2528:31-2528:50: `.Nelly.getAddress()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:2532:15-2541:17: `await checkOracleRoundState(state, {
                eligibleToSubmit: true,
                roundId: 3,
                latestSubmission: answer,
                startedAt: ShouldNotBeSet,
                timeout: 0,
                availableFunds: baseFunds.sub(paymentAmount),
                oracleCount: oracles.length,
                paymentAmount,
              })`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:2538:42-2538:61: `.sub(paymentAmount)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:2556:43-2559:14: `.oracleRoundState(
              await personas.Nelly.getAddress(),
              0,
            )`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:2557:29-2557:48: `.Nelly.getAddress()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:2561:13-2570:15: `await checkOracleRoundState(state, {
              eligibleToSubmit: true,
              roundId: 2,
              latestSubmission: previousSubmission,
              startedAt: ShouldBeSet,
              timeout,
              availableFunds: baseFunds.sub(paymentAmount.mul(3)),
              oracleCount: oracles.length,
              paymentAmount,
            })`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:2567:40-2567:66: `.sub(paymentAmount.mul(3))`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:2567:58-2567:65: `.mul(3)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:2584:43-2587:14: `.oracleRoundState(
              await personas.Nelly.getAddress(),
              0,
            )`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:2585:29-2585:48: `.Nelly.getAddress()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:2589:13-2598:15: `await checkOracleRoundState(state, {
              eligibleToSubmit: true,
              roundId: 3,
              latestSubmission: answer,
              startedAt: ShouldNotBeSet,
              timeout: 0,
              availableFunds: baseFunds.sub(paymentAmount.mul(3)),
              oracleCount: oracles.length,
              paymentAmount,
            })`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:2595:40-2595:66: `.sub(paymentAmount.mul(3))`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:2595:58-2595:65: `.mul(3)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:2608:45-2611:16: `.oracleRoundState(
                await personas.Nelly.getAddress(),
                0,
              )`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:2609:31-2609:50: `.Nelly.getAddress()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:2613:15-2622:17: `await checkOracleRoundState(state, {
                eligibleToSubmit: true,
                roundId: 3,
                latestSubmission: answer,
                startedAt: ShouldNotBeSet,
                timeout: 0,
                availableFunds: baseFunds.sub(paymentAmount.mul(3)),
                oracleCount: oracles.length,
                paymentAmount,
              })`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:2619:42-2619:68: `.sub(paymentAmount.mul(3))`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:2619:60-2619:67: `.mul(3)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:2644:43-2647:14: `.oracleRoundState(
              await personas.Nelly.getAddress(),
              0,
            )`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:2645:29-2645:48: `.Nelly.getAddress()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:2649:13-2658:15: `await checkOracleRoundState(state, {
              eligibleToSubmit: true,
              roundId: 3,
              latestSubmission: previousSubmission,
              startedAt: ShouldNotBeSet,
              timeout: 0,
              availableFunds: baseFunds.sub(paymentAmount.mul(4)),
              oracleCount: oracles.length,
              paymentAmount,
            })`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:2655:40-2655:66: `.sub(paymentAmount.mul(4))`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:2655:58-2655:65: `.mul(4)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:2679:43-2682:14: `.oracleRoundState(
              await personas.Nelly.getAddress(),
              0,
            )`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:2680:29-2680:48: `.Nelly.getAddress()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:2684:13-2693:15: `await checkOracleRoundState(state, {
              eligibleToSubmit: true,
              roundId: 3,
              latestSubmission: answer,
              startedAt: ShouldNotBeSet,
              timeout: 0,
              availableFunds: baseFunds.sub(paymentAmount.mul(4)),
              oracleCount: oracles.length,
              paymentAmount,
            })`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:2690:40-2690:66: `.sub(paymentAmount.mul(4))`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:2690:58-2690:65: `.mul(4)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:2713:43-2716:14: `.oracleRoundState(
              await personas.Nelly.getAddress(),
              0,
            )`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:2714:29-2714:48: `.Nelly.getAddress()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:2718:13-2727:15: `await checkOracleRoundState(state, {
              eligibleToSubmit: true,
              roundId: 2,
              latestSubmission: previousSubmission,
              startedAt: ShouldBeSet,
              timeout,
              availableFunds: baseFunds.sub(paymentAmount.mul(2)),
              oracleCount: oracles.length,
              paymentAmount,
            })`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:2724:40-2724:66: `.sub(paymentAmount.mul(2))`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:2724:58-2724:65: `.mul(2)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:2737:43-2740:14: `.oracleRoundState(
              await personas.Nelly.getAddress(),
              0,
            )`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:2738:29-2738:48: `.Nelly.getAddress()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:2742:13-2751:15: `await checkOracleRoundState(state, {
              eligibleToSubmit: false,
              roundId: 2,
              latestSubmission: answer,
              startedAt: ShouldBeSet,
              timeout,
              availableFunds: baseFunds.sub(paymentAmount.mul(2)),
              oracleCount: oracles.length,
              paymentAmount,
            })`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:2748:40-2748:66: `.sub(paymentAmount.mul(2))`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:2748:58-2748:65: `.mul(2)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:2761:45-2764:16: `.oracleRoundState(
                await personas.Nelly.getAddress(),
                0,
              )`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:2762:31-2762:50: `.Nelly.getAddress()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:2766:15-2775:17: `await checkOracleRoundState(state, {
                eligibleToSubmit: false,
                roundId: 3,
                latestSubmission: answer,
                startedAt: ShouldNotBeSet,
                timeout: 0,
                availableFunds: baseFunds.sub(paymentAmount.mul(2)),
                oracleCount: oracles.length,
                paymentAmount,
              })`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:2772:42-2772:68: `.sub(paymentAmount.mul(2))`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:2772:60-2772:67: `.mul(2)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:2790:43-2793:14: `.oracleRoundState(
              await personas.Nelly.getAddress(),
              0,
            )`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:2791:29-2791:48: `.Nelly.getAddress()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:2795:13-2804:15: `await checkOracleRoundState(state, {
              eligibleToSubmit: true,
              roundId: 2,
              latestSubmission: previousSubmission,
              startedAt: ShouldBeSet,
              timeout,
              availableFunds: baseFunds.sub(paymentAmount.mul(3)),
              oracleCount: oracles.length,
              paymentAmount,
            })`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:2801:40-2801:66: `.sub(paymentAmount.mul(3))`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:2801:58-2801:65: `.mul(3)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:2818:43-2821:14: `.oracleRoundState(
              await personas.Nelly.getAddress(),
              0,
            )`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:2819:29-2819:48: `.Nelly.getAddress()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:2823:13-2832:15: `await checkOracleRoundState(state, {
              eligibleToSubmit: false,
              roundId: 3,
              latestSubmission: answer,
              startedAt: ShouldNotBeSet,
              timeout: 0,
              availableFunds: baseFunds.sub(paymentAmount.mul(3)),
              oracleCount: oracles.length,
              paymentAmount,
            })`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:2829:40-2829:66: `.sub(paymentAmount.mul(3))`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:2829:58-2829:65: `.mul(3)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:2842:45-2845:16: `.oracleRoundState(
                await personas.Nelly.getAddress(),
                0,
              )`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:2843:31-2843:50: `.Nelly.getAddress()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:2847:15-2856:17: `await checkOracleRoundState(state, {
                eligibleToSubmit: false, // restart delay enforced
                roundId: 3,
                latestSubmission: answer,
                startedAt: ShouldNotBeSet,
                timeout: 0,
                availableFunds: baseFunds.sub(paymentAmount.mul(3)),
                oracleCount: oracles.length,
                paymentAmount,
              })`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:2853:42-2853:68: `.sub(paymentAmount.mul(3))`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:2853:60-2853:67: `.mul(3)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:2878:43-2881:14: `.oracleRoundState(
              await personas.Nelly.getAddress(),
              0,
            )`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:2879:29-2879:48: `.Nelly.getAddress()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:2883:13-2892:15: `await checkOracleRoundState(state, {
              eligibleToSubmit: false,
              roundId: 3,
              latestSubmission: previousSubmission,
              startedAt: ShouldNotBeSet,
              timeout: 0, // details have been deleted
              availableFunds: baseFunds.sub(paymentAmount.mul(4)),
              oracleCount: oracles.length,
              paymentAmount,
            })`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:2889:40-2889:66: `.sub(paymentAmount.mul(4))`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:2889:58-2889:65: `.mul(4)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:2913:43-2916:14: `.oracleRoundState(
              await personas.Nelly.getAddress(),
              0,
            )`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:2914:29-2914:48: `.Nelly.getAddress()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:2918:13-2927:15: `await checkOracleRoundState(state, {
              eligibleToSubmit: false,
              roundId: 3,
              latestSubmission: answer,
              startedAt: ShouldNotBeSet,
              timeout: 0,
              availableFunds: baseFunds.sub(paymentAmount.mul(4)),
              oracleCount: oracles.length,
              paymentAmount,
            })`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:2924:40-2924:66: `.sub(paymentAmount.mul(4))`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:2924:58-2924:65: `.mul(4)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:2960:39-2963:10: `.oracleRoundState(
          await personas.Nelly.getAddress(),
          1,
        )`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:2961:25-2961:44: `.Nelly.getAddress()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:2965:9-2974:11: `await checkOracleRoundState(state, {
          eligibleToSubmit: false,
          roundId: 1,
          latestSubmission: answers[3],
          startedAt: ShouldBeSet,
          timeout: 0,
          availableFunds: currentFunds,
          oracleCount: oracles.length,
          paymentAmount: 0,
        })`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:2978:39-2981:10: `.oracleRoundState(
          await personas.Nelly.getAddress(),
          2,
        )`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:2979:25-2979:44: `.Nelly.getAddress()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:2983:9-2992:11: `await checkOracleRoundState(state, {
          eligibleToSubmit: false,
          roundId: 2,
          latestSubmission: answers[3],
          startedAt: ShouldBeSet,
          timeout,
          availableFunds: currentFunds,
          oracleCount: oracles.length,
          paymentAmount,
        })`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:2998:43-3001:14: `.oracleRoundState(
              await personas.Nelly.getAddress(),
              4,
            )`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:2999:29-2999:48: `.Nelly.getAddress()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:3003:13-3012:15: `await checkOracleRoundState(state, {
              eligibleToSubmit: true,
              roundId: 4,
              latestSubmission: answers[3],
              startedAt: ShouldBeSet,
              timeout,
              availableFunds: currentFunds,
              oracleCount: oracles.length,
              paymentAmount,
            })`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:3016:43-3019:14: `.oracleRoundState(
              await personas.Nelly.getAddress(),
              5,
            )`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:3017:29-3017:48: `.Nelly.getAddress()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:3021:13-3030:15: `await checkOracleRoundState(state, {
              eligibleToSubmit: false,
              roundId: 5,
              latestSubmission: answers[3],
              startedAt: ShouldNotBeSet,
              timeout: 0,
              availableFunds: currentFunds,
              oracleCount: oracles.length,
              paymentAmount,
            })`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:3040:43-3043:14: `.oracleRoundState(
              await personas.Nelly.getAddress(),
              4,
            )`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:3041:29-3041:48: `.Nelly.getAddress()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:3045:13-3054:15: `await checkOracleRoundState(state, {
              eligibleToSubmit: false,
              roundId: 4,
              latestSubmission: answers[4],
              startedAt: ShouldBeSet,
              timeout,
              availableFunds: currentFunds.sub(paymentAmount),
              oracleCount: oracles.length,
              paymentAmount,
            })`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:3051:43-3051:62: `.sub(paymentAmount)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:3058:43-3061:14: `.oracleRoundState(
              await personas.Nelly.getAddress(),
              5,
            )`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:3059:29-3059:48: `.Nelly.getAddress()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:3063:13-3072:15: `await checkOracleRoundState(state, {
              eligibleToSubmit: true,
              roundId: 5,
              latestSubmission: answers[4],
              startedAt: ShouldNotBeSet,
              timeout: 0,
              availableFunds: currentFunds.sub(paymentAmount),
              oracleCount: oracles.length,
              paymentAmount,
            })`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:3069:43-3069:62: `.sub(paymentAmount)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:3078:39-3081:10: `.oracleRoundState(
          await personas.Nelly.getAddress(),
          6,
        )`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:3079:25-3079:44: `.Nelly.getAddress()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:3083:9-3092:11: `await checkOracleRoundState(state, {
          eligibleToSubmit: false,
          roundId: 6,
          latestSubmission: answers[3],
          startedAt: ShouldNotBeSet,
          timeout: 0,
          availableFunds: currentFunds,
          oracleCount: oracles.length,
          paymentAmount,
        })`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:3108:37-3108:65: `.getRoundData(latestRoundId)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:3109:7-3109:49: `bigNumEquals(latestRoundId, round.roundId)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:3110:7-3110:41: `bigNumEquals(answer, round.answer)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:3111:36-3111:46: `.valueOf()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:3112:27-3112:48: `.updatedAt.toNumber()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:3113:7-3113:53: `bigNumEquals(round.updatedAt, round.startedAt)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:3114:7-3114:57: `bigNumEquals(latestRoundId, round.answeredInRound)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:3118:7-3121:8: `await evmRevert(
        aggregator.getRoundData(latestRoundId.add(1)),
        'No data present',
      )`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:3119:19-3119:54: `.getRoundData(latestRoundId.add(1))`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:3119:46-3119:53: `.add(1)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:3125:37-3125:45: `.from(2)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:3125:45-3125:53: `.pow(32)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:3125:53-3125:60: `.add(1)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:3127:7-3127:80: `await evmRevert(aggregator.getRoundData(overflowedId), 'No data present')`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:3127:33-3127:60: `.getRoundData(overflowedId)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:3144:39-3144:57: `.latestRoundData()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:3145:47-3145:61: `.latestRound()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:3147:9-3147:51: `bigNumEquals(latestRoundId, round.roundId)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:3148:9-3148:43: `bigNumEquals(answer, round.answer)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:3149:38-3149:48: `.valueOf()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:3150:29-3150:50: `.updatedAt.toNumber()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:3151:9-3151:55: `bigNumEquals(round.updatedAt, round.startedAt)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:3152:9-3152:59: `bigNumEquals(latestRoundId, round.answeredInRound)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:3157:7-3157:71: `await evmRevert(aggregator.latestRoundData(), 'No data present')`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:3157:33-3157:51: `.latestRoundData()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:3174:9-3174:62: `bigNumEquals(answer, await aggregator.latestAnswer())`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:3174:46-3174:61: `.latestAnswer()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:3179:7-3179:55: `bigNumEquals(0, await aggregator.latestAnswer())`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:3179:39-3179:54: `.latestAnswer()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:3191:19-3191:43: `.connect(personas.Carol)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:3191:43-3191:75: `.setValidator(validator.address)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:3195:55-3195:67: `.validator()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:3198:19-3198:43: `.connect(personas.Carol)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:3198:43-3198:75: `.setValidator(validator.address)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:3200:55-3200:67: `.validator()`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:3205:9-3208:10: `await evmRevert(
          aggregator.connect(personas.Neil).setValidator(validator.address),
          'Only callable by owner',
        )`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:3206:21-3206:44: `.connect(personas.Neil)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:3206:44-3206:76: `.setValidator(validator.address)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:3235:7-3235:70: `await aggregator.connect(personas.Nelly).submit(nextRound, 100)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:3235:23-3235:47: `.connect(personas.Nelly)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:3235:47-3235:70: `.submit(nextRound, 100)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:3236:7-3236:18: `nextRound++`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:3238:30-3238:54: `.connect(personas.Nelly)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:3238:54-3238:77: `.submit(nextRound, 102)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:3244:7-3244:70: `await aggregator.connect(personas.Nelly).submit(nextRound, 100)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:3244:23-3244:47: `.connect(personas.Nelly)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:3244:47-3244:70: `.submit(nextRound, 100)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:3245:7-3245:18: `nextRound++`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:3248:19-3248:43: `.connect(personas.Nelly)`
$DIR/contracts/test/v0.6/FluxAggregator.test.ts:3248:43-3248:66: `.submit(nextRound, 101)`
$DIR/contracts/test/v0.6/Owned.test.ts:33:5-33:72: `publicAbi(owned, ['acceptOwnership', 'owner', 'transferOwnership'])`
$DIR/contracts/test/v0.6/Owned.test.ts:38:47-41:9: `.all([
        owner.getAddress(),
        owned.owner(),
      ])`
$DIR/contracts/test/v0.6/Owned.test.ts:39:14-39:27: `.getAddress()`
$DIR/contracts/test/v0.6/Owned.test.ts:40:14-40:22: `.owner()`
$DIR/contracts/test/v0.6/Owned.test.ts:51:16-51:31: `.connect(owner)`
$DIR/contracts/test/v0.6/Owned.test.ts:51:31-51:78: `.transferOwnership(await newOwner.getAddress())`
$DIR/contracts/test/v0.6/Owned.test.ts:51:64-51:77: `.getAddress()`
$DIR/contracts/test/v0.6/Owned.test.ts:62:14-62:32: `.connect(nonOwner)`
$DIR/contracts/test/v0.6/Owned.test.ts:62:32-62:79: `.transferOwnership(await newOwner.getAddress())`
$DIR/contracts/test/v0.6/Owned.test.ts:62:65-62:78: `.getAddress()`
$DIR/contracts/test/v0.6/Owned.test.ts:75:27-75:45: `.connect(newOwner)`
$DIR/contracts/test/v0.6/Owned.test.ts:75:45-75:63: `.acceptOwnership()`
$DIR/contracts/test/v0.6/Owned.test.ts:81:27-81:45: `.connect(nonOwner)`
$DIR/contracts/test/v0.6/Owned.test.ts:81:45-81:63: `.acceptOwnership()`
$DIR/contracts/test/v0.6/SignedSafeMath.test.ts:39:9-39:45: `response = await adder.testAdd(1, 2)`
$DIR/contracts/test/v0.6/SignedSafeMath.test.ts:39:31-39:45: `.testAdd(1, 2)`
$DIR/contracts/test/v0.6/SignedSafeMath.test.ts:40:9-40:34: `bigNumEquals(3, response)`
$DIR/contracts/test/v0.6/SignedSafeMath.test.ts:44:9-44:54: `response = await adder.testAdd(INT256_MAX, 0)`
$DIR/contracts/test/v0.6/SignedSafeMath.test.ts:44:31-44:54: `.testAdd(INT256_MAX, 0)`
$DIR/contracts/test/v0.6/SignedSafeMath.test.ts:45:9-45:43: `bigNumEquals(INT256_MAX, response)`
$DIR/contracts/test/v0.6/SignedSafeMath.test.ts:50:29-50:52: `.testAdd(INT256_MAX, 1)`
$DIR/contracts/test/v0.6/SignedSafeMath.test.ts:59:9-59:47: `response = await adder.testAdd(-1, -2)`
$DIR/contracts/test/v0.6/SignedSafeMath.test.ts:59:31-59:47: `.testAdd(-1, -2)`
$DIR/contracts/test/v0.6/SignedSafeMath.test.ts:60:9-60:35: `bigNumEquals(-3, response)`
$DIR/contracts/test/v0.6/SignedSafeMath.test.ts:64:9-64:54: `response = await adder.testAdd(INT256_MIN, 0)`
$DIR/contracts/test/v0.6/SignedSafeMath.test.ts:64:31-64:54: `.testAdd(INT256_MIN, 0)`
$DIR/contracts/test/v0.6/SignedSafeMath.test.ts:65:9-65:43: `bigNumEquals(INT256_MIN, response)`
$DIR/contracts/test/v0.6/SignedSafeMath.test.ts:70:29-70:53: `.testAdd(INT256_MIN, -1)`
$DIR/contracts/test/v0.6/SignedSafeMath.test.ts:79:9-79:46: `response = await adder.testAdd(1, -2)`
$DIR/contracts/test/v0.6/SignedSafeMath.test.ts:79:31-79:46: `.testAdd(1, -2)`
$DIR/contracts/test/v0.6/SignedSafeMath.test.ts:80:9-80:35: `bigNumEquals(-1, response)`
$DIR/contracts/test/v0.6/SignedSafeMath.test.ts:86:9-86:46: `response = await adder.testAdd(-1, 2)`
$DIR/contracts/test/v0.6/SignedSafeMath.test.ts:86:31-86:46: `.testAdd(-1, 2)`
$DIR/contracts/test/v0.6/SignedSafeMath.test.ts:87:9-87:34: `bigNumEquals(1, response)`
$DIR/contracts/test/v0.6/SignedSafeMath.test.ts:95:9-95:45: `response = await adder.testAvg(2, 4)`
$DIR/contracts/test/v0.6/SignedSafeMath.test.ts:95:31-95:45: `.testAvg(2, 4)`
$DIR/contracts/test/v0.6/SignedSafeMath.test.ts:96:9-96:34: `bigNumEquals(3, response)`
$DIR/contracts/test/v0.6/SignedSafeMath.test.ts:100:9-100:45: `response = await adder.testAvg(0, 4)`
$DIR/contracts/test/v0.6/SignedSafeMath.test.ts:100:31-100:45: `.testAvg(0, 4)`
$DIR/contracts/test/v0.6/SignedSafeMath.test.ts:101:9-101:34: `bigNumEquals(2, response)`
$DIR/contracts/test/v0.6/SignedSafeMath.test.ts:102:9-102:45: `response = await adder.testAvg(4, 0)`
$DIR/contracts/test/v0.6/SignedSafeMath.test.ts:102:31-102:45: `.testAvg(4, 0)`
$DIR/contracts/test/v0.6/SignedSafeMath.test.ts:103:9-103:34: `bigNumEquals(2, response)`
$DIR/contracts/test/v0.6/SignedSafeMath.test.ts:107:9-107:63: `response = await adder.testAvg(INT256_MAX, INT256_MAX)`
$DIR/contracts/test/v0.6/SignedSafeMath.test.ts:107:31-107:63: `.testAvg(INT256_MAX, INT256_MAX)`
$DIR/contracts/test/v0.6/SignedSafeMath.test.ts:108:9-108:43: `bigNumEquals(INT256_MAX, response)`
$DIR/contracts/test/v0.6/SignedSafeMath.test.ts:112:9-112:45: `response = await adder.testAvg(1, 2)`
$DIR/contracts/test/v0.6/SignedSafeMath.test.ts:112:31-112:45: `.testAvg(1, 2)`
$DIR/contracts/test/v0.6/SignedSafeMath.test.ts:113:9-113:34: `bigNumEquals(1, response)`
$DIR/contracts/test/v0.6/SignedSafeMath.test.ts:119:9-119:47: `response = await adder.testAvg(-2, -4)`
$DIR/contracts/test/v0.6/SignedSafeMath.test.ts:119:31-119:47: `.testAvg(-2, -4)`
$DIR/contracts/test/v0.6/SignedSafeMath.test.ts:120:9-120:35: `bigNumEquals(-3, response)`
$DIR/contracts/test/v0.6/SignedSafeMath.test.ts:124:9-124:46: `response = await adder.testAvg(0, -4)`
$DIR/contracts/test/v0.6/SignedSafeMath.test.ts:124:31-124:46: `.testAvg(0, -4)`
$DIR/contracts/test/v0.6/SignedSafeMath.test.ts:125:9-125:35: `bigNumEquals(-2, response)`
$DIR/contracts/test/v0.6/SignedSafeMath.test.ts:126:9-126:46: `response = await adder.testAvg(-4, 0)`
$DIR/contracts/test/v0.6/SignedSafeMath.test.ts:126:31-126:46: `.testAvg(-4, 0)`
$DIR/contracts/test/v0.6/SignedSafeMath.test.ts:127:9-127:35: `bigNumEquals(-2, response)`
$DIR/contracts/test/v0.6/SignedSafeMath.test.ts:131:9-131:63: `response = await adder.testAvg(INT256_MIN, INT256_MIN)`
$DIR/contracts/test/v0.6/SignedSafeMath.test.ts:131:31-131:63: `.testAvg(INT256_MIN, INT256_MIN)`
$DIR/contracts/test/v0.6/SignedSafeMath.test.ts:132:9-132:43: `bigNumEquals(INT256_MIN, response)`
$DIR/contracts/test/v0.6/SignedSafeMath.test.ts:136:9-136:47: `response = await adder.testAvg(-1, -2)`
$DIR/contracts/test/v0.6/SignedSafeMath.test.ts:136:31-136:47: `.testAvg(-1, -2)`
$DIR/contracts/test/v0.6/SignedSafeMath.test.ts:137:9-137:35: `bigNumEquals(-1, response)`
$DIR/contracts/test/v0.6/SignedSafeMath.test.ts:143:9-143:46: `response = await adder.testAvg(2, -4)`
$DIR/contracts/test/v0.6/SignedSafeMath.test.ts:143:31-143:46: `.testAvg(2, -4)`
$DIR/contracts/test/v0.6/SignedSafeMath.test.ts:144:9-144:35: `bigNumEquals(-1, response)`
$DIR/contracts/test/v0.6/SignedSafeMath.test.ts:145:9-145:46: `response = await adder.testAvg(4, -2)`
$DIR/contracts/test/v0.6/SignedSafeMath.test.ts:145:31-145:46: `.testAvg(4, -2)`
$DIR/contracts/test/v0.6/SignedSafeMath.test.ts:146:9-146:34: `bigNumEquals(1, response)`
$DIR/contracts/test/v0.6/SignedSafeMath.test.ts:150:9-150:55: `response = await adder.testAvg(INT256_MAX, -2)`
$DIR/contracts/test/v0.6/SignedSafeMath.test.ts:150:31-150:55: `.testAvg(INT256_MAX, -2)`
$DIR/contracts/test/v0.6/SignedSafeMath.test.ts:151:9-151:57: `bigNumEquals(INT256_MAX.sub(2).div(2), response)`
$DIR/contracts/test/v0.6/SignedSafeMath.test.ts:151:32-151:39: `.sub(2)`
$DIR/contracts/test/v0.6/SignedSafeMath.test.ts:151:39-151:46: `.div(2)`
$DIR/contracts/test/v0.6/SignedSafeMath.test.ts:152:9-152:63: `response = await adder.testAvg(INT256_MAX, INT256_MIN)`
$DIR/contracts/test/v0.6/SignedSafeMath.test.ts:152:31-152:63: `.testAvg(INT256_MAX, INT256_MIN)`
$DIR/contracts/test/v0.6/SignedSafeMath.test.ts:153:9-153:34: `bigNumEquals(0, response)`
$DIR/contracts/test/v0.6/SignedSafeMath.test.ts:157:9-157:46: `response = await adder.testAvg(1, -4)`
$DIR/contracts/test/v0.6/SignedSafeMath.test.ts:157:31-157:46: `.testAvg(1, -4)`
$DIR/contracts/test/v0.6/SignedSafeMath.test.ts:158:9-158:35: `bigNumEquals(-1, response)`
$DIR/contracts/test/v0.6/SignedSafeMath.test.ts:159:9-159:46: `response = await adder.testAvg(4, -1)`
$DIR/contracts/test/v0.6/SignedSafeMath.test.ts:159:31-159:46: `.testAvg(4, -1)`
$DIR/contracts/test/v0.6/SignedSafeMath.test.ts:160:9-160:34: `bigNumEquals(1, response)`
$DIR/contracts/test/v0.6/SignedSafeMath.test.ts:166:9-166:46: `response = await adder.testAvg(-2, 4)`
$DIR/contracts/test/v0.6/SignedSafeMath.test.ts:166:31-166:46: `.testAvg(-2, 4)`
$DIR/contracts/test/v0.6/SignedSafeMath.test.ts:167:9-167:34: `bigNumEquals(1, response)`
$DIR/contracts/test/v0.6/SignedSafeMath.test.ts:168:9-168:46: `response = await adder.testAvg(-4, 2)`
$DIR/contracts/test/v0.6/SignedSafeMath.test.ts:168:31-168:46: `.testAvg(-4, 2)`
$DIR/contracts/test/v0.6/SignedSafeMath.test.ts:169:9-169:35: `bigNumEquals(-1, response)`
$DIR/contracts/test/v0.6/SignedSafeMath.test.ts:173:9-173:54: `response = await adder.testAvg(INT256_MIN, 2)`
$DIR/contracts/test/v0.6/SignedSafeMath.test.ts:173:31-173:54: `.testAvg(INT256_MIN, 2)`
$DIR/contracts/test/v0.6/SignedSafeMath.test.ts:174:9-174:57: `bigNumEquals(INT256_MIN.add(2).div(2), response)`
$DIR/contracts/test/v0.6/SignedSafeMath.test.ts:174:32-174:39: `.add(2)`
$DIR/contracts/test/v0.6/SignedSafeMath.test.ts:174:39-174:46: `.div(2)`
$DIR/contracts/test/v0.6/SignedSafeMath.test.ts:175:9-175:63: `response = await adder.testAvg(INT256_MIN, INT256_MAX)`
$DIR/contracts/test/v0.6/SignedSafeMath.test.ts:175:31-175:63: `.testAvg(INT256_MIN, INT256_MAX)`
$DIR/contracts/test/v0.6/SignedSafeMath.test.ts:176:9-176:34: `bigNumEquals(0, response)`
$DIR/contracts/test/v0.6/SignedSafeMath.test.ts:180:9-180:46: `response = await adder.testAvg(-1, 4)`
$DIR/contracts/test/v0.6/SignedSafeMath.test.ts:180:31-180:46: `.testAvg(-1, 4)`
$DIR/contracts/test/v0.6/SignedSafeMath.test.ts:181:9-181:34: `bigNumEquals(1, response)`
$DIR/contracts/test/v0.6/SignedSafeMath.test.ts:182:9-182:46: `response = await adder.testAvg(-4, 1)`
$DIR/contracts/test/v0.6/SignedSafeMath.test.ts:182:31-182:46: `.testAvg(-4, 1)`
$DIR/contracts/test/v0.6/SignedSafeMath.test.ts:183:9-183:35: `bigNumEquals(-1, response)`
$DIR/contracts/test/v0.6/SimpleReadAccessController.test.ts:26:5-37:7: `publicAbi(controller, [
      'hasAccess',
      'addAccess',
      'disableAccessCheck',
      'enableAccessCheck',
      'removeAccess',
      'checkEnabled',
      // Owned
      'acceptOwnership',
      'owner',
      'transferOwnership',
    ])`
$DIR/contracts/test/v0.6/SimpleReadAccessController.test.ts:42:30-42:45: `.checkEnabled()`
$DIR/contracts/test/v0.6/SimpleReadAccessController.test.ts:49:25-50:34: `
          .connect(personas.Eddy)`
$DIR/contracts/test/v0.6/SimpleReadAccessController.test.ts:50:34-51:63: `
          .hasAccess(await personas.Eddy.getAddress(), '0x00')`
$DIR/contracts/test/v0.6/SimpleReadAccessController.test.ts:51:36-51:54: `.Eddy.getAddress()`
$DIR/contracts/test/v0.6/SimpleReadAccessController.test.ts:57:25-58:35: `
          .connect(personas.Carol)`
$DIR/contracts/test/v0.6/SimpleReadAccessController.test.ts:58:35-59:63: `
          .hasAccess(await personas.Eddy.getAddress(), '0x00')`
$DIR/contracts/test/v0.6/SimpleReadAccessController.test.ts:59:36-59:54: `.Eddy.getAddress()`
$DIR/contracts/test/v0.6/SimpleReadAccessController.test.ts:62:25-63:34: `
          .connect(personas.Eddy)`
$DIR/contracts/test/v0.6/SimpleReadAccessController.test.ts:63:34-64:64: `
          .hasAccess(await personas.Carol.getAddress(), '0x00')`
$DIR/contracts/test/v0.6/SimpleReadAccessController.test.ts:64:36-64:55: `.Carol.getAddress()`
$DIR/contracts/test/v0.6/SimpleReadAccessController.test.ts:73:21-74:36: `
            .connect(personas.Eddy)`
$DIR/contracts/test/v0.6/SimpleReadAccessController.test.ts:74:36-75:57: `
            .addAccess(await personas.Eddy.getAddress())`
$DIR/contracts/test/v0.6/SimpleReadAccessController.test.ts:75:38-75:56: `.Eddy.getAddress()`
$DIR/contracts/test/v0.6/SimpleReadAccessController.test.ts:91:27-91:79: `.hasAccess(await personas.Eddy.getAddress(), '0x00')`
$DIR/contracts/test/v0.6/SimpleReadAccessController.test.ts:91:52-91:70: `.Eddy.getAddress()`
$DIR/contracts/test/v0.6/SimpleReadAccessController.test.ts:103:39-105:12: `.addAccess(
            await personas.Eddy.getAddress(),
          )`
$DIR/contracts/test/v0.6/SimpleReadAccessController.test.ts:104:27-104:45: `.Eddy.getAddress()`
$DIR/contracts/test/v0.6/SimpleReadAccessController.test.ts:106:36-106:43: `.wait()`
$DIR/contracts/test/v0.6/SimpleReadAccessController.test.ts:124:21-125:36: `
            .connect(personas.Eddy)`
$DIR/contracts/test/v0.6/SimpleReadAccessController.test.ts:125:36-126:60: `
            .removeAccess(await personas.Eddy.getAddress())`
$DIR/contracts/test/v0.6/SimpleReadAccessController.test.ts:126:41-126:59: `.Eddy.getAddress()`
$DIR/contracts/test/v0.6/SimpleReadAccessController.test.ts:139:27-139:79: `.hasAccess(await personas.Eddy.getAddress(), '0x00')`
$DIR/contracts/test/v0.6/SimpleReadAccessController.test.ts:139:52-139:70: `.Eddy.getAddress()`
$DIR/contracts/test/v0.6/SimpleReadAccessController.test.ts:151:39-153:12: `.removeAccess(
            await personas.Eddy.getAddress(),
          )`
$DIR/contracts/test/v0.6/SimpleReadAccessController.test.ts:152:27-152:45: `.Eddy.getAddress()`
$DIR/contracts/test/v0.6/SimpleReadAccessController.test.ts:154:36-154:43: `.wait()`
$DIR/contracts/test/v0.6/SimpleReadAccessController.test.ts:165:21-165:44: `.connect(personas.Eddy)`
$DIR/contracts/test/v0.6/SimpleReadAccessController.test.ts:165:44-165:65: `.disableAccessCheck()`
$DIR/contracts/test/v0.6/SimpleReadAccessController.test.ts:167:39-167:54: `.checkEnabled()`
$DIR/contracts/test/v0.6/SimpleReadAccessController.test.ts:179:40-179:55: `.checkEnabled()`
$DIR/contracts/test/v0.6/SimpleReadAccessController.test.ts:184:27-184:79: `.hasAccess(await personas.Eddy.getAddress(), '0x00')`
$DIR/contracts/test/v0.6/SimpleReadAccessController.test.ts:184:52-184:70: `.Eddy.getAddress()`
$DIR/contracts/test/v0.6/SimpleReadAccessController.test.ts:190:27-190:78: `.hasAccess(await personas.Ned.getAddress(), '0x00')`
$DIR/contracts/test/v0.6/SimpleReadAccessController.test.ts:190:52-190:69: `.Ned.getAddress()`
$DIR/contracts/test/v0.6/SimpleReadAccessController.test.ts:200:39-200:60: `.disableAccessCheck()`
$DIR/contracts/test/v0.6/SimpleReadAccessController.test.ts:201:36-201:43: `.wait()`
$DIR/contracts/test/v0.6/SimpleReadAccessController.test.ts:212:21-212:44: `.connect(personas.Eddy)`
$DIR/contracts/test/v0.6/SimpleReadAccessController.test.ts:212:44-212:64: `.enableAccessCheck()`
$DIR/contracts/test/v0.6/SimpleReadAccessController.test.ts:227:27-227:79: `.hasAccess(await personas.Eddy.getAddress(), '0x00')`
$DIR/contracts/test/v0.6/SimpleReadAccessController.test.ts:227:52-227:70: `.Eddy.getAddress()`
$DIR/contracts/test/v0.6/SimpleReadAccessController.test.ts:233:27-233:78: `.hasAccess(await personas.Ned.getAddress(), '0x00')`
$DIR/contracts/test/v0.6/SimpleReadAccessController.test.ts:233:52-233:69: `.Ned.getAddress()`
$DIR/contracts/test/v0.6/SimpleReadAccessController.test.ts:243:39-243:59: `.enableAccessCheck()`
$DIR/contracts/test/v0.6/SimpleReadAccessController.test.ts:244:36-244:43: `.wait()`
$DIR/contracts/test/v0.6/SimpleWriteAccessController.test.ts:26:5-37:7: `publicAbi(controller, [
      'hasAccess',
      'addAccess',
      'disableAccessCheck',
      'enableAccessCheck',
      'removeAccess',
      'checkEnabled',
      // Owned
      'acceptOwnership',
      'owner',
      'transferOwnership',
    ])`
$DIR/contracts/test/v0.6/SimpleWriteAccessController.test.ts:42:30-42:45: `.checkEnabled()`
$DIR/contracts/test/v0.6/SimpleWriteAccessController.test.ts:49:25-50:34: `
          .connect(personas.Eddy)`
$DIR/contracts/test/v0.6/SimpleWriteAccessController.test.ts:50:34-51:63: `
          .hasAccess(await personas.Eddy.getAddress(), '0x00')`
$DIR/contracts/test/v0.6/SimpleWriteAccessController.test.ts:51:36-51:54: `.Eddy.getAddress()`
$DIR/contracts/test/v0.6/SimpleWriteAccessController.test.ts:57:25-58:35: `
          .connect(personas.Carol)`
$DIR/contracts/test/v0.6/SimpleWriteAccessController.test.ts:58:35-59:63: `
          .hasAccess(await personas.Eddy.getAddress(), '0x00')`
$DIR/contracts/test/v0.6/SimpleWriteAccessController.test.ts:59:36-59:54: `.Eddy.getAddress()`
$DIR/contracts/test/v0.6/SimpleWriteAccessController.test.ts:62:25-63:34: `
          .connect(personas.Eddy)`
$DIR/contracts/test/v0.6/SimpleWriteAccessController.test.ts:63:34-64:64: `
          .hasAccess(await personas.Carol.getAddress(), '0x00')`
$DIR/contracts/test/v0.6/SimpleWriteAccessController.test.ts:64:36-64:55: `.Carol.getAddress()`
$DIR/contracts/test/v0.6/SimpleWriteAccessController.test.ts:73:21-74:36: `
            .connect(personas.Eddy)`
$DIR/contracts/test/v0.6/SimpleWriteAccessController.test.ts:74:36-75:57: `
            .addAccess(await personas.Eddy.getAddress())`
$DIR/contracts/test/v0.6/SimpleWriteAccessController.test.ts:75:38-75:56: `.Eddy.getAddress()`
$DIR/contracts/test/v0.6/SimpleWriteAccessController.test.ts:91:27-91:79: `.hasAccess(await personas.Eddy.getAddress(), '0x00')`
$DIR/contracts/test/v0.6/SimpleWriteAccessController.test.ts:91:52-91:70: `.Eddy.getAddress()`
$DIR/contracts/test/v0.6/SimpleWriteAccessController.test.ts:114:21-115:36: `
            .connect(personas.Eddy)`
$DIR/contracts/test/v0.6/SimpleWriteAccessController.test.ts:115:36-116:60: `
            .removeAccess(await personas.Eddy.getAddress())`
$DIR/contracts/test/v0.6/SimpleWriteAccessController.test.ts:116:41-116:59: `.Eddy.getAddress()`
$DIR/contracts/test/v0.6/SimpleWriteAccessController.test.ts:129:27-129:79: `.hasAccess(await personas.Eddy.getAddress(), '0x00')`
$DIR/contracts/test/v0.6/SimpleWriteAccessController.test.ts:129:52-129:70: `.Eddy.getAddress()`
$DIR/contracts/test/v0.6/SimpleWriteAccessController.test.ts:145:21-145:44: `.connect(personas.Eddy)`
$DIR/contracts/test/v0.6/SimpleWriteAccessController.test.ts:145:44-145:65: `.disableAccessCheck()`
$DIR/contracts/test/v0.6/SimpleWriteAccessController.test.ts:147:39-147:54: `.checkEnabled()`
$DIR/contracts/test/v0.6/SimpleWriteAccessController.test.ts:159:40-159:55: `.checkEnabled()`
$DIR/contracts/test/v0.6/SimpleWriteAccessController.test.ts:164:27-164:79: `.hasAccess(await personas.Eddy.getAddress(), '0x00')`
$DIR/contracts/test/v0.6/SimpleWriteAccessController.test.ts:164:52-164:70: `.Eddy.getAddress()`
$DIR/contracts/test/v0.6/SimpleWriteAccessController.test.ts:170:27-170:78: `.hasAccess(await personas.Ned.getAddress(), '0x00')`
$DIR/contracts/test/v0.6/SimpleWriteAccessController.test.ts:170:52-170:69: `.Ned.getAddress()`
$DIR/contracts/test/v0.6/SimpleWriteAccessController.test.ts:184:21-184:44: `.connect(personas.Eddy)`
$DIR/contracts/test/v0.6/SimpleWriteAccessController.test.ts:184:44-184:64: `.enableAccessCheck()`
$DIR/contracts/test/v0.6/SimpleWriteAccessController.test.ts:199:27-199:79: `.hasAccess(await personas.Eddy.getAddress(), '0x00')`
$DIR/contracts/test/v0.6/SimpleWriteAccessController.test.ts:199:52-199:70: `.Eddy.getAddress()`
$DIR/contracts/test/v0.6/SimpleWriteAccessController.test.ts:205:27-205:78: `.hasAccess(await personas.Ned.getAddress(), '0x00')`
$DIR/contracts/test/v0.6/SimpleWriteAccessController.test.ts:205:52-205:69: `.Ned.getAddress()`
$DIR/contracts/test/v0.6/VRFD20.test.ts:67:5-82:7: `publicAbi(vrfD20, [
      // Owned
      'acceptOwnership',
      'owner',
      'transferOwnership',
      //VRFConsumerBase
      'rawFulfillRandomness',
      // VRFD20
      'rollDice',
      'house',
      'withdrawLINK',
      'keyHash',
      'fee',
      'setKeyHash',
      'setFee',
    ])`
$DIR/contracts/test/v0.6/VRFD20.test.ts:89:17-90:37: `
            .connect(roles.stranger)`
$DIR/contracts/test/v0.6/VRFD20.test.ts:90:37-91:70: `
            .withdrawLINK(await roles.stranger.getAddress(), deposit)`
$DIR/contracts/test/v0.6/VRFD20.test.ts:91:38-91:60: `.stranger.getAddress()`
$DIR/contracts/test/v0.6/VRFD20.test.ts:96:39-96:46: `.mul(2)`
$DIR/contracts/test/v0.6/VRFD20.test.ts:98:17-99:43: `
            .connect(roles.defaultAccount)`
$DIR/contracts/test/v0.6/VRFD20.test.ts:99:43-103:14: `
            .withdrawLINK(
              await roles.defaultAccount.getAddress(),
              withdrawAmount,
            )`
$DIR/contracts/test/v0.6/VRFD20.test.ts:101:26-101:54: `.defaultAccount.getAddress()`
$DIR/contracts/test/v0.6/VRFD20.test.ts:110:42-112:10: `.balanceOf(
          await roles.defaultAccount.getAddress(),
        )`
$DIR/contracts/test/v0.6/VRFD20.test.ts:111:22-111:50: `.defaultAccount.getAddress()`
$DIR/contracts/test/v0.6/VRFD20.test.ts:113:41-113:62: `.from(startingAmount)`
$DIR/contracts/test/v0.6/VRFD20.test.ts:113:62-113:75: `.add(deposit)`
$DIR/contracts/test/v0.6/VRFD20.test.ts:114:9-116:74: `await vrfD20
          .connect(roles.defaultAccount)
          .withdrawLINK(await roles.defaultAccount.getAddress(), deposit)`
$DIR/contracts/test/v0.6/VRFD20.test.ts:114:21-115:41: `
          .connect(roles.defaultAccount)`
$DIR/contracts/test/v0.6/VRFD20.test.ts:115:41-116:74: `
          .withdrawLINK(await roles.defaultAccount.getAddress(), deposit)`
$DIR/contracts/test/v0.6/VRFD20.test.ts:116:36-116:64: `.defaultAccount.getAddress()`
$DIR/contracts/test/v0.6/VRFD20.test.ts:117:40-119:10: `.balanceOf(
          await roles.defaultAccount.getAddress(),
        )`
$DIR/contracts/test/v0.6/VRFD20.test.ts:118:22-118:50: `.defaultAccount.getAddress()`
$DIR/contracts/test/v0.6/VRFD20.test.ts:131:17-131:41: `.connect(roles.stranger)`
$DIR/contracts/test/v0.6/VRFD20.test.ts:131:41-131:61: `.setKeyHash(newHash)`
$DIR/contracts/test/v0.6/VRFD20.test.ts:138:9-138:41: `await vrfD20.setKeyHash(newHash)`
$DIR/contracts/test/v0.6/VRFD20.test.ts:138:21-138:41: `.setKeyHash(newHash)`
$DIR/contracts/test/v0.6/VRFD20.test.ts:139:40-139:50: `.keyHash()`
$DIR/contracts/test/v0.6/VRFD20.test.ts:151:17-151:41: `.connect(roles.stranger)`
$DIR/contracts/test/v0.6/VRFD20.test.ts:151:41-151:56: `.setFee(newFee)`
$DIR/contracts/test/v0.6/VRFD20.test.ts:158:9-158:36: `await vrfD20.setFee(newFee)`
$DIR/contracts/test/v0.6/VRFD20.test.ts:158:21-158:36: `.setFee(newFee)`
$DIR/contracts/test/v0.6/VRFD20.test.ts:159:39-159:45: `.fee()`
$DIR/contracts/test/v0.6/VRFD20.test.ts:169:17-169:58: `.house(await personas.Nancy.getAddress())`
$DIR/contracts/test/v0.6/VRFD20.test.ts:169:38-169:57: `.Nancy.getAddress()`
$DIR/contracts/test/v0.6/VRFD20.test.ts:174:9-174:65: `await vrfD20.rollDice(await personas.Nancy.getAddress())`
$DIR/contracts/test/v0.6/VRFD20.test.ts:174:21-174:65: `.rollDice(await personas.Nancy.getAddress())`
$DIR/contracts/test/v0.6/VRFD20.test.ts:174:45-174:64: `.Nancy.getAddress()`
$DIR/contracts/test/v0.6/VRFD20.test.ts:176:17-176:58: `.house(await personas.Nancy.getAddress())`
$DIR/contracts/test/v0.6/VRFD20.test.ts:176:38-176:57: `.Nancy.getAddress()`
$DIR/contracts/test/v0.6/VRFD20.test.ts:185:32-185:76: `.rollDice(await personas.Nancy.getAddress())`
$DIR/contracts/test/v0.6/VRFD20.test.ts:185:56-185:75: `.Nancy.getAddress()`
$DIR/contracts/test/v0.6/VRFD20.test.ts:188:9-192:10: `await vrfCoordinator.callBackWithRandomness(
          eventRequestId,
          randomness,
          vrfD20.address,
        )`
$DIR/contracts/test/v0.6/VRFD20.test.ts:188:29-192:10: `.callBackWithRandomness(
          eventRequestId,
          randomness,
          vrfD20.address,
        )`
$DIR/contracts/test/v0.6/VRFD20.test.ts:193:38-193:79: `.house(await personas.Nancy.getAddress())`
$DIR/contracts/test/v0.6/VRFD20.test.ts:193:59-193:78: `.Nancy.getAddress()`
$DIR/contracts/test/v0.6/VRFD20.test.ts:217:44-218:41: `
          .connect(roles.defaultAccount)`
$DIR/contracts/test/v0.6/VRFD20.test.ts:218:41-219:70: `
          .deploy(vrfCoordinator.address, link.address, keyHash, fee)`
$DIR/contracts/test/v0.6/VRFD20.test.ts:221:18-221:62: `.rollDice(await personas.Nancy.getAddress())`
$DIR/contracts/test/v0.6/VRFD20.test.ts:221:42-221:61: `.Nancy.getAddress()`
$DIR/contracts/test/v0.6/VRFD20.test.ts:227:17-228:37: `
            .connect(roles.stranger)`
$DIR/contracts/test/v0.6/VRFD20.test.ts:228:37-229:57: `
            .rollDice(await personas.Nancy.getAddress())`
$DIR/contracts/test/v0.6/VRFD20.test.ts:229:37-229:56: `.Nancy.getAddress()`
$DIR/contracts/test/v0.6/VRFD20.test.ts:234:9-234:65: `await vrfD20.rollDice(await personas.Nancy.getAddress())`
$DIR/contracts/test/v0.6/VRFD20.test.ts:234:21-234:65: `.rollDice(await personas.Nancy.getAddress())`
$DIR/contracts/test/v0.6/VRFD20.test.ts:234:45-234:64: `.Nancy.getAddress()`
$DIR/contracts/test/v0.6/VRFD20.test.ts:236:17-236:61: `.rollDice(await personas.Nancy.getAddress())`
$DIR/contracts/test/v0.6/VRFD20.test.ts:236:41-236:60: `.Nancy.getAddress()`
$DIR/contracts/test/v0.6/VRFD20.test.ts:270:38-270:79: `.house(await personas.Nancy.getAddress())`
$DIR/contracts/test/v0.6/VRFD20.test.ts:270:59-270:78: `.Nancy.getAddress()`
$DIR/contracts/test/v0.6/VRFD20.test.ts:276:9-276:68: `tx = await vrfD20.rollDice(await personas.Ned.getAddress())`
$DIR/contracts/test/v0.6/VRFD20.test.ts:276:26-276:68: `.rollDice(await personas.Ned.getAddress())`
$DIR/contracts/test/v0.6/VRFD20.test.ts:276:50-276:67: `.Ned.getAddress()`
$DIR/contracts/test/v0.6/VRFD20.test.ts:278:9-278:42: `eventRequestId = log?.topics?.[1]`
$DIR/contracts/test/v0.6/VRFD20.test.ts:279:9-283:10: `tx = await vrfCoordinator.callBackWithRandomness(
          eventRequestId,
          secondRandomness,
          vrfD20.address,
        )`
$DIR/contracts/test/v0.6/VRFD20.test.ts:279:34-283:10: `.callBackWithRandomness(
          eventRequestId,
          secondRandomness,
          vrfD20.address,
        )`
$DIR/contracts/test/v0.6/VRFD20.test.ts:289:64-290:41: `
          .connect(roles.defaultAccount)`
$DIR/contracts/test/v0.6/VRFD20.test.ts:290:41-291:32: `
          .deploy(link.address)`
$DIR/contracts/test/v0.6/VRFD20.test.ts:293:41-297:10: `.callBackWithRandomness(
          eventRequestId,
          randomness,
          vrfD20.address,
        )`
$DIR/contracts/test/v0.7/AggregatorProxy.test.ts:99:5-122:7: `publicAbi(proxy, [
      'aggregator',
      'confirmAggregator',
      'decimals',
      'description',
      'getAnswer',
      'getRoundData',
      'getTimestamp',
      'latestAnswer',
      'latestRound',
      'latestRoundData',
      'latestTimestamp',
      'phaseAggregators',
      'phaseId',
      'proposeAggregator',
      'proposedAggregator',
      'proposedGetRoundData',
      'proposedLatestRoundData',
      'version',
      // Ownable methods:
      'acceptOwnership',
      'owner',
      'transferOwnership',
    ])`
$DIR/contracts/test/v0.7/AggregatorProxy.test.ts:127:7-127:45: `bigNumEquals(1, await proxy.phaseId())`
$DIR/contracts/test/v0.7/AggregatorProxy.test.ts:127:34-127:44: `.phaseId()`
$DIR/contracts/test/v0.7/AggregatorProxy.test.ts:128:51-128:71: `.phaseAggregators(1)`
$DIR/contracts/test/v0.7/AggregatorProxy.test.ts:134:7-134:64: `bigNumEquals(phaseBase.add(1), await proxy.latestRound())`
$DIR/contracts/test/v0.7/AggregatorProxy.test.ts:134:29-134:36: `.add(1)`
$DIR/contracts/test/v0.7/AggregatorProxy.test.ts:134:49-134:63: `.latestRound()`
$DIR/contracts/test/v0.7/AggregatorProxy.test.ts:140:7-140:57: `bigNumEquals(response, await proxy.latestAnswer())`
$DIR/contracts/test/v0.7/AggregatorProxy.test.ts:140:41-140:56: `.latestAnswer()`
$DIR/contracts/test/v0.7/AggregatorProxy.test.ts:141:38-141:52: `.latestRound()`
$DIR/contracts/test/v0.7/AggregatorProxy.test.ts:142:7-142:65: `bigNumEquals(response, await proxy.getAnswer(latestRound))`
$DIR/contracts/test/v0.7/AggregatorProxy.test.ts:142:41-142:64: `.getAnswer(latestRound)`
$DIR/contracts/test/v0.7/AggregatorProxy.test.ts:158:9-158:60: `bigNumEquals(response2, await proxy.latestAnswer())`
$DIR/contracts/test/v0.7/AggregatorProxy.test.ts:158:44-158:59: `.latestAnswer()`
$DIR/contracts/test/v0.7/AggregatorProxy.test.ts:159:40-159:54: `.latestRound()`
$DIR/contracts/test/v0.7/AggregatorProxy.test.ts:160:9-160:68: `bigNumEquals(response2, await proxy.getAnswer(latestRound))`
$DIR/contracts/test/v0.7/AggregatorProxy.test.ts:160:44-160:67: `.getAnswer(latestRound)`
$DIR/contracts/test/v0.7/AggregatorProxy.test.ts:171:35-171:50: `.latestAnswer()`
$DIR/contracts/test/v0.7/AggregatorProxy.test.ts:172:9-172:32: `bigNumEquals(0, actual)`
$DIR/contracts/test/v0.7/AggregatorProxy.test.ts:185:34-185:61: `.mul(await proxy.phaseId())`
$DIR/contracts/test/v0.7/AggregatorProxy.test.ts:185:50-185:60: `.phaseId()`
$DIR/contracts/test/v0.7/AggregatorProxy.test.ts:185:61-185:68: `.add(1)`
$DIR/contracts/test/v0.7/AggregatorProxy.test.ts:186:35-186:54: `.getAnswer(proxyId)`
$DIR/contracts/test/v0.7/AggregatorProxy.test.ts:187:9-187:32: `bigNumEquals(0, actual)`
$DIR/contracts/test/v0.7/AggregatorProxy.test.ts:193:9-193:74: `reverter = await reverterFactory.connect(defaultAccount).deploy()`
$DIR/contracts/test/v0.7/AggregatorProxy.test.ts:193:41-193:65: `.connect(defaultAccount)`
$DIR/contracts/test/v0.7/AggregatorProxy.test.ts:193:65-193:74: `.deploy()`
$DIR/contracts/test/v0.7/AggregatorProxy.test.ts:194:9-194:56: `await proxy.proposeAggregator(reverter.address)`
$DIR/contracts/test/v0.7/AggregatorProxy.test.ts:194:20-194:56: `.proposeAggregator(reverter.address)`
$DIR/contracts/test/v0.7/AggregatorProxy.test.ts:195:9-195:56: `await proxy.confirmAggregator(reverter.address)`
$DIR/contracts/test/v0.7/AggregatorProxy.test.ts:195:20-195:56: `.confirmAggregator(reverter.address)`
$DIR/contracts/test/v0.7/AggregatorProxy.test.ts:196:51-196:64: `.aggregator()`
$DIR/contracts/test/v0.7/AggregatorProxy.test.ts:198:34-198:61: `.mul(await proxy.phaseId())`
$DIR/contracts/test/v0.7/AggregatorProxy.test.ts:198:50-198:60: `.phaseId()`
$DIR/contracts/test/v0.7/AggregatorProxy.test.ts:200:9-200:76: `await evmRevert(proxy.getAnswer(proxyId), 'Raised by Reverter.sol')`
$DIR/contracts/test/v0.7/AggregatorProxy.test.ts:200:30-200:49: `.getAnswer(proxyId)`
$DIR/contracts/test/v0.7/AggregatorProxy.test.ts:223:41-223:69: `.getAnswer(preUpdateRoundId)`
$DIR/contracts/test/v0.7/AggregatorProxy.test.ts:224:9-224:52: `bigNumEquals(preUpdateAnswer, actualAnswer)`
$DIR/contracts/test/v0.7/AggregatorProxy.test.ts:230:35-230:65: `.getAnswer(phaseBase.mul(777))`
$DIR/contracts/test/v0.7/AggregatorProxy.test.ts:230:55-230:64: `.mul(777)`
$DIR/contracts/test/v0.7/AggregatorProxy.test.ts:231:9-231:32: `bigNumEquals(0, actual)`
$DIR/contracts/test/v0.7/AggregatorProxy.test.ts:241:35-241:65: `.getTimestamp(overflowRoundId)`
$DIR/contracts/test/v0.7/AggregatorProxy.test.ts:242:9-242:32: `bigNumEquals(0, actual)`
$DIR/contracts/test/v0.7/AggregatorProxy.test.ts:255:34-255:61: `.mul(await proxy.phaseId())`
$DIR/contracts/test/v0.7/AggregatorProxy.test.ts:255:50-255:60: `.phaseId()`
$DIR/contracts/test/v0.7/AggregatorProxy.test.ts:255:61-255:68: `.add(1)`
$DIR/contracts/test/v0.7/AggregatorProxy.test.ts:256:35-256:57: `.getTimestamp(proxyId)`
$DIR/contracts/test/v0.7/AggregatorProxy.test.ts:257:9-257:32: `bigNumEquals(0, actual)`
$DIR/contracts/test/v0.7/AggregatorProxy.test.ts:263:35-263:68: `.getTimestamp(phaseBase.mul(777))`
$DIR/contracts/test/v0.7/AggregatorProxy.test.ts:263:58-263:67: `.mul(777)`
$DIR/contracts/test/v0.7/AggregatorProxy.test.ts:264:9-264:32: `bigNumEquals(0, actual)`
$DIR/contracts/test/v0.7/AggregatorProxy.test.ts:275:35-275:65: `.getTimestamp(overflowRoundId)`
$DIR/contracts/test/v0.7/AggregatorProxy.test.ts:276:9-276:32: `bigNumEquals(0, actual)`
$DIR/contracts/test/v0.7/AggregatorProxy.test.ts:288:7-291:8: `bigNumEquals(
        await aggregator.latestTimestamp(),
        await proxy.latestTimestamp(),
      )`
$DIR/contracts/test/v0.7/AggregatorProxy.test.ts:289:25-289:43: `.latestTimestamp()`
$DIR/contracts/test/v0.7/AggregatorProxy.test.ts:290:20-290:38: `.latestTimestamp()`
$DIR/contracts/test/v0.7/AggregatorProxy.test.ts:292:38-292:52: `.latestRound()`
$DIR/contracts/test/v0.7/AggregatorProxy.test.ts:293:7-296:8: `bigNumEquals(
        await aggregator.latestTimestamp(),
        await proxy.getTimestamp(latestRound),
      )`
$DIR/contracts/test/v0.7/AggregatorProxy.test.ts:294:25-294:43: `.latestTimestamp()`
$DIR/contracts/test/v0.7/AggregatorProxy.test.ts:295:20-295:46: `.getTimestamp(latestRound)`
$DIR/contracts/test/v0.7/AggregatorProxy.test.ts:321:9-324:10: `bigNumEquals(
          await aggregator2.latestTimestamp(),
          await proxy.latestTimestamp(),
        )`
$DIR/contracts/test/v0.7/AggregatorProxy.test.ts:322:28-322:46: `.latestTimestamp()`
$DIR/contracts/test/v0.7/AggregatorProxy.test.ts:323:22-323:40: `.latestTimestamp()`
$DIR/contracts/test/v0.7/AggregatorProxy.test.ts:325:40-325:54: `.latestRound()`
$DIR/contracts/test/v0.7/AggregatorProxy.test.ts:326:9-329:10: `bigNumEquals(
          await aggregator2.latestTimestamp(),
          await proxy.getTimestamp(latestRound),
        )`
$DIR/contracts/test/v0.7/AggregatorProxy.test.ts:327:28-327:46: `.latestTimestamp()`
$DIR/contracts/test/v0.7/AggregatorProxy.test.ts:328:22-328:48: `.getTimestamp(latestRound)`
$DIR/contracts/test/v0.7/AggregatorProxy.test.ts:345:55-345:69: `.latestRound()`
$DIR/contracts/test/v0.7/AggregatorProxy.test.ts:346:9-346:59: `await evmRevert(proxy.getRoundData(latestRoundId))`
$DIR/contracts/test/v0.7/AggregatorProxy.test.ts:346:30-346:58: `.getRoundData(latestRoundId)`
$DIR/contracts/test/v0.7/AggregatorProxy.test.ts:359:41-359:55: `.latestRound()`
$DIR/contracts/test/v0.7/AggregatorProxy.test.ts:360:36-360:63: `.mul(await proxy.phaseId())`
$DIR/contracts/test/v0.7/AggregatorProxy.test.ts:360:52-360:62: `.phaseId()`
$DIR/contracts/test/v0.7/AggregatorProxy.test.ts:361:34-361:45: `.add(aggId)`
$DIR/contracts/test/v0.7/AggregatorProxy.test.ts:363:36-363:58: `.getRoundData(proxyId)`
$DIR/contracts/test/v0.7/AggregatorProxy.test.ts:364:11-364:42: `bigNumEquals(proxyId, round.id)`
$DIR/contracts/test/v0.7/AggregatorProxy.test.ts:365:11-365:47: `bigNumEquals(response, round.answer)`
$DIR/contracts/test/v0.7/AggregatorProxy.test.ts:366:40-366:50: `.valueOf()`
$DIR/contracts/test/v0.7/AggregatorProxy.test.ts:367:31-367:52: `.updatedAt.toNumber()`
$DIR/contracts/test/v0.7/AggregatorProxy.test.ts:368:11-368:57: `bigNumEquals(round.updatedAt, round.startedAt)`
$DIR/contracts/test/v0.7/AggregatorProxy.test.ts:369:11-369:55: `bigNumEquals(proxyId, round.answeredInRound)`
$DIR/contracts/test/v0.7/AggregatorProxy.test.ts:385:32-385:39: `.sub(2)`
$DIR/contracts/test/v0.7/AggregatorProxy.test.ts:386:9-388:53: `await aggregator2
          .connect(personas.Carol)
          .updateRoundData(aggId, response2, 77, 42)`
$DIR/contracts/test/v0.7/AggregatorProxy.test.ts:386:26-387:35: `
          .connect(personas.Carol)`
$DIR/contracts/test/v0.7/AggregatorProxy.test.ts:387:35-388:53: `
          .updateRoundData(aggId, response2, 77, 42)`
$DIR/contracts/test/v0.7/AggregatorProxy.test.ts:390:34-390:61: `.mul(await proxy.phaseId())`
$DIR/contracts/test/v0.7/AggregatorProxy.test.ts:390:50-390:60: `.phaseId()`
$DIR/contracts/test/v0.7/AggregatorProxy.test.ts:391:32-391:43: `.add(aggId)`
$DIR/contracts/test/v0.7/AggregatorProxy.test.ts:393:34-393:56: `.getRoundData(proxyId)`
$DIR/contracts/test/v0.7/AggregatorProxy.test.ts:394:9-394:40: `bigNumEquals(proxyId, round.id)`
$DIR/contracts/test/v0.7/AggregatorProxy.test.ts:395:9-395:46: `bigNumEquals(response2, round.answer)`
$DIR/contracts/test/v0.7/AggregatorProxy.test.ts:396:9-396:42: `bigNumEquals(42, round.startedAt)`
$DIR/contracts/test/v0.7/AggregatorProxy.test.ts:397:9-397:42: `bigNumEquals(77, round.updatedAt)`
$DIR/contracts/test/v0.7/AggregatorProxy.test.ts:398:9-398:53: `bigNumEquals(proxyId, round.answeredInRound)`
$DIR/contracts/test/v0.7/AggregatorProxy.test.ts:403:35-403:62: `.mul(await proxy.phaseId())`
$DIR/contracts/test/v0.7/AggregatorProxy.test.ts:403:51-403:61: `.phaseId()`
$DIR/contracts/test/v0.7/AggregatorProxy.test.ts:404:7-406:37: `aggregator2 = await aggregatorFactory
        .connect(defaultAccount)
        .deploy(decimals, response2)`
$DIR/contracts/test/v0.7/AggregatorProxy.test.ts:404:44-405:33: `
        .connect(defaultAccount)`
$DIR/contracts/test/v0.7/AggregatorProxy.test.ts:405:33-406:37: `
        .deploy(decimals, response2)`
$DIR/contracts/test/v0.7/AggregatorProxy.test.ts:408:7-408:57: `await proxy.proposeAggregator(aggregator2.address)`
$DIR/contracts/test/v0.7/AggregatorProxy.test.ts:408:18-408:57: `.proposeAggregator(aggregator2.address)`
$DIR/contracts/test/v0.7/AggregatorProxy.test.ts:409:7-409:57: `await proxy.confirmAggregator(aggregator2.address)`
$DIR/contracts/test/v0.7/AggregatorProxy.test.ts:409:18-409:57: `.confirmAggregator(aggregator2.address)`
$DIR/contracts/test/v0.7/AggregatorProxy.test.ts:411:37-411:51: `.latestRound()`
$DIR/contracts/test/v0.7/AggregatorProxy.test.ts:412:33-412:44: `.add(aggId)`
$DIR/contracts/test/v0.7/AggregatorProxy.test.ts:414:32-414:54: `.getRoundData(proxyId)`
$DIR/contracts/test/v0.7/AggregatorProxy.test.ts:415:7-415:38: `bigNumEquals(proxyId, round.id)`
$DIR/contracts/test/v0.7/AggregatorProxy.test.ts:416:7-416:43: `bigNumEquals(response, round.answer)`
$DIR/contracts/test/v0.7/AggregatorProxy.test.ts:418:36-418:46: `.valueOf()`
$DIR/contracts/test/v0.7/AggregatorProxy.test.ts:419:27-419:48: `.startedAt.toNumber()`
$DIR/contracts/test/v0.7/AggregatorProxy.test.ts:420:7-420:53: `bigNumEquals(round.startedAt, round.updatedAt)`
$DIR/contracts/test/v0.7/AggregatorProxy.test.ts:421:7-421:51: `bigNumEquals(proxyId, round.answeredInRound)`
$DIR/contracts/test/v0.7/AggregatorProxy.test.ts:436:9-436:49: `await evmRevert(proxy.latestRoundData())`
$DIR/contracts/test/v0.7/AggregatorProxy.test.ts:436:30-436:48: `.latestRoundData()`
$DIR/contracts/test/v0.7/AggregatorProxy.test.ts:453:49-453:63: `.latestRound()`
$DIR/contracts/test/v0.7/AggregatorProxy.test.ts:454:36-454:63: `.mul(await proxy.phaseId())`
$DIR/contracts/test/v0.7/AggregatorProxy.test.ts:454:52-454:62: `.phaseId()`
$DIR/contracts/test/v0.7/AggregatorProxy.test.ts:455:34-455:45: `.add(aggId)`
$DIR/contracts/test/v0.7/AggregatorProxy.test.ts:457:36-457:54: `.latestRoundData()`
$DIR/contracts/test/v0.7/AggregatorProxy.test.ts:458:11-458:42: `bigNumEquals(proxyId, round.id)`
$DIR/contracts/test/v0.7/AggregatorProxy.test.ts:459:11-459:48: `bigNumEquals(response2, round.answer)`
$DIR/contracts/test/v0.7/AggregatorProxy.test.ts:460:40-460:50: `.valueOf()`
$DIR/contracts/test/v0.7/AggregatorProxy.test.ts:461:31-461:52: `.updatedAt.toNumber()`
$DIR/contracts/test/v0.7/AggregatorProxy.test.ts:462:11-462:57: `bigNumEquals(round.updatedAt, round.startedAt)`
$DIR/contracts/test/v0.7/AggregatorProxy.test.ts:463:11-463:55: `bigNumEquals(proxyId, round.answeredInRound)`
$DIR/contracts/test/v0.7/AggregatorProxy.test.ts:467:11-467:51: `bigNumEquals(17, await proxy.decimals())`
$DIR/contracts/test/v0.7/AggregatorProxy.test.ts:467:39-467:50: `.decimals()`
$DIR/contracts/test/v0.7/AggregatorProxy.test.ts:471:66-471:80: `.description()`
$DIR/contracts/test/v0.7/AggregatorProxy.test.ts:475:11-475:49: `bigNumEquals(2, await proxy.version())`
$DIR/contracts/test/v0.7/AggregatorProxy.test.ts:475:38-475:48: `.version()`
$DIR/contracts/test/v0.7/AggregatorProxy.test.ts:491:32-491:39: `.sub(2)`
$DIR/contracts/test/v0.7/AggregatorProxy.test.ts:492:9-494:53: `await aggregator2
          .connect(personas.Carol)
          .updateRoundData(aggId, response2, 77, 42)`
$DIR/contracts/test/v0.7/AggregatorProxy.test.ts:492:26-493:35: `
          .connect(personas.Carol)`
$DIR/contracts/test/v0.7/AggregatorProxy.test.ts:493:35-494:53: `
          .updateRoundData(aggId, response2, 77, 42)`
$DIR/contracts/test/v0.7/AggregatorProxy.test.ts:496:34-496:61: `.mul(await proxy.phaseId())`
$DIR/contracts/test/v0.7/AggregatorProxy.test.ts:496:50-496:60: `.phaseId()`
$DIR/contracts/test/v0.7/AggregatorProxy.test.ts:497:32-497:43: `.add(aggId)`
$DIR/contracts/test/v0.7/AggregatorProxy.test.ts:499:34-499:52: `.latestRoundData()`
$DIR/contracts/test/v0.7/AggregatorProxy.test.ts:500:9-500:40: `bigNumEquals(proxyId, round.id)`
$DIR/contracts/test/v0.7/AggregatorProxy.test.ts:501:9-501:46: `bigNumEquals(response2, round.answer)`
$DIR/contracts/test/v0.7/AggregatorProxy.test.ts:502:9-502:42: `bigNumEquals(42, round.startedAt)`
$DIR/contracts/test/v0.7/AggregatorProxy.test.ts:503:9-503:42: `bigNumEquals(77, round.updatedAt)`
$DIR/contracts/test/v0.7/AggregatorProxy.test.ts:504:9-504:53: `bigNumEquals(proxyId, round.answeredInRound)`
$DIR/contracts/test/v0.7/AggregatorProxy.test.ts:508:9-508:49: `bigNumEquals(18, await proxy.decimals())`
$DIR/contracts/test/v0.7/AggregatorProxy.test.ts:508:37-508:48: `.decimals()`
$DIR/contracts/test/v0.7/AggregatorProxy.test.ts:514:22-514:36: `.description()`
$DIR/contracts/test/v0.7/AggregatorProxy.test.ts:519:9-519:47: `bigNumEquals(0, await proxy.version())`
$DIR/contracts/test/v0.7/AggregatorProxy.test.ts:519:36-519:46: `.version()`
$DIR/contracts/test/v0.7/AggregatorProxy.test.ts:538:9-540:50: `await proxy
          .connect(personas.Carol)
          .proposeAggregator(aggregator2.address)`
$DIR/contracts/test/v0.7/AggregatorProxy.test.ts:538:20-539:35: `
          .connect(personas.Carol)`
$DIR/contracts/test/v0.7/AggregatorProxy.test.ts:539:35-540:50: `
          .proposeAggregator(aggregator2.address)`
$DIR/contracts/test/v0.7/AggregatorProxy.test.ts:542:54-542:75: `.proposedAggregator()`
$DIR/contracts/test/v0.7/AggregatorProxy.test.ts:546:31-547:35: `
          .connect(personas.Carol)`
$DIR/contracts/test/v0.7/AggregatorProxy.test.ts:547:35-548:50: `
          .proposeAggregator(aggregator2.address)`
$DIR/contracts/test/v0.7/AggregatorProxy.test.ts:549:33-549:40: `.wait()`
$DIR/contracts/test/v0.7/AggregatorProxy.test.ts:561:9-564:10: `await evmRevert(
          proxy.connect(personas.Neil).proposeAggregator(aggregator2.address),
          'Only callable by owner',
        )`
$DIR/contracts/test/v0.7/AggregatorProxy.test.ts:562:16-562:39: `.connect(personas.Neil)`
$DIR/contracts/test/v0.7/AggregatorProxy.test.ts:562:39-562:78: `.proposeAggregator(aggregator2.address)`
$DIR/contracts/test/v0.7/AggregatorProxy.test.ts:566:53-566:66: `.aggregator()`
$DIR/contracts/test/v0.7/AggregatorProxy.test.ts:591:9-593:50: `await proxy
          .connect(personas.Carol)
          .confirmAggregator(aggregator2.address)`
$DIR/contracts/test/v0.7/AggregatorProxy.test.ts:591:20-592:35: `
          .connect(personas.Carol)`
$DIR/contracts/test/v0.7/AggregatorProxy.test.ts:592:35-593:50: `
          .confirmAggregator(aggregator2.address)`
$DIR/contracts/test/v0.7/AggregatorProxy.test.ts:595:54-595:67: `.aggregator()`
$DIR/contracts/test/v0.7/AggregatorProxy.test.ts:599:9-599:47: `bigNumEquals(1, await proxy.phaseId())`
$DIR/contracts/test/v0.7/AggregatorProxy.test.ts:599:36-599:46: `.phaseId()`
$DIR/contracts/test/v0.7/AggregatorProxy.test.ts:601:9-603:50: `await proxy
          .connect(personas.Carol)
          .confirmAggregator(aggregator2.address)`
$DIR/contracts/test/v0.7/AggregatorProxy.test.ts:601:20-602:35: `
          .connect(personas.Carol)`
$DIR/contracts/test/v0.7/AggregatorProxy.test.ts:602:35-603:50: `
          .confirmAggregator(aggregator2.address)`
$DIR/contracts/test/v0.7/AggregatorProxy.test.ts:605:9-605:47: `bigNumEquals(2, await proxy.phaseId())`
$DIR/contracts/test/v0.7/AggregatorProxy.test.ts:605:36-605:46: `.phaseId()`
$DIR/contracts/test/v0.7/AggregatorProxy.test.ts:609:9-609:66: `bigNumEquals(phaseBase.add(1), await proxy.latestRound())`
$DIR/contracts/test/v0.7/AggregatorProxy.test.ts:609:31-609:38: `.add(1)`
$DIR/contracts/test/v0.7/AggregatorProxy.test.ts:609:51-609:65: `.latestRound()`
$DIR/contracts/test/v0.7/AggregatorProxy.test.ts:611:9-613:50: `await proxy
          .connect(personas.Carol)
          .confirmAggregator(aggregator2.address)`
$DIR/contracts/test/v0.7/AggregatorProxy.test.ts:611:20-612:35: `
          .connect(personas.Carol)`
$DIR/contracts/test/v0.7/AggregatorProxy.test.ts:612:35-613:50: `
          .confirmAggregator(aggregator2.address)`
$DIR/contracts/test/v0.7/AggregatorProxy.test.ts:615:9-615:73: `bigNumEquals(phaseBase.mul(2).add(1), await proxy.latestRound())`
$DIR/contracts/test/v0.7/AggregatorProxy.test.ts:615:31-615:38: `.mul(2)`
$DIR/contracts/test/v0.7/AggregatorProxy.test.ts:615:38-615:45: `.add(1)`
$DIR/contracts/test/v0.7/AggregatorProxy.test.ts:615:58-615:72: `.latestRound()`
$DIR/contracts/test/v0.7/AggregatorProxy.test.ts:621:22-621:42: `.phaseAggregators(2)`
$DIR/contracts/test/v0.7/AggregatorProxy.test.ts:624:9-626:50: `await proxy
          .connect(personas.Carol)
          .confirmAggregator(aggregator2.address)`
$DIR/contracts/test/v0.7/AggregatorProxy.test.ts:624:20-625:35: `
          .connect(personas.Carol)`
$DIR/contracts/test/v0.7/AggregatorProxy.test.ts:625:35-626:50: `
          .confirmAggregator(aggregator2.address)`
$DIR/contracts/test/v0.7/AggregatorProxy.test.ts:628:54-628:74: `.phaseAggregators(2)`
$DIR/contracts/test/v0.7/AggregatorProxy.test.ts:632:31-633:35: `
          .connect(personas.Carol)`
$DIR/contracts/test/v0.7/AggregatorProxy.test.ts:633:35-634:50: `
          .confirmAggregator(aggregator2.address)`
$DIR/contracts/test/v0.7/AggregatorProxy.test.ts:635:33-635:40: `.wait()`
$DIR/contracts/test/v0.7/AggregatorProxy.test.ts:653:9-656:10: `await evmRevert(
          proxy.connect(personas.Neil).confirmAggregator(aggregator2.address),
          'Only callable by owner',
        )`
$DIR/contracts/test/v0.7/AggregatorProxy.test.ts:654:16-654:39: `.connect(personas.Neil)`
$DIR/contracts/test/v0.7/AggregatorProxy.test.ts:654:39-654:78: `.confirmAggregator(aggregator2.address)`
$DIR/contracts/test/v0.7/AggregatorProxy.test.ts:658:53-658:66: `.aggregator()`
$DIR/contracts/test/v0.7/AggregatorProxy.test.ts:679:42-679:56: `.latestRound()`
$DIR/contracts/test/v0.7/AggregatorProxy.test.ts:680:34-680:64: `.proposedGetRoundData(roundId)`
$DIR/contracts/test/v0.7/AggregatorProxy.test.ts:681:9-681:40: `bigNumEquals(roundId, round.id)`
$DIR/contracts/test/v0.7/AggregatorProxy.test.ts:682:9-682:46: `bigNumEquals(response2, round.answer)`
$DIR/contracts/test/v0.7/AggregatorProxy.test.ts:694:44-694:58: `.latestRound()`
$DIR/contracts/test/v0.7/AggregatorProxy.test.ts:695:11-698:12: `await evmRevert(
            proxy.proposedGetRoundData(roundId),
            'No proposed aggregator present',
          )`
$DIR/contracts/test/v0.7/AggregatorProxy.test.ts:696:18-696:48: `.proposedGetRoundData(roundId)`
$DIR/contracts/test/v0.7/AggregatorProxy.test.ts:720:42-720:56: `.latestRound()`
$DIR/contracts/test/v0.7/AggregatorProxy.test.ts:721:34-721:60: `.proposedLatestRoundData()`
$DIR/contracts/test/v0.7/AggregatorProxy.test.ts:722:9-722:40: `bigNumEquals(roundId, round.id)`
$DIR/contracts/test/v0.7/AggregatorProxy.test.ts:723:9-723:46: `bigNumEquals(response2, round.answer)`
$DIR/contracts/test/v0.7/AggregatorProxy.test.ts:735:11-738:12: `await evmRevert(
            proxy.proposedLatestRoundData(),
            'No proposed aggregator present',
          )`
$DIR/contracts/test/v0.7/AggregatorProxy.test.ts:736:18-736:44: `.proposedLatestRoundData()`
$DIR/contracts/test/v0.7/AuthorizedForwarder.test.ts:55:5-68:7: `publicAbi(forwarder, [
      'forward',
      'getAuthorizedSenders',
      'getChainlinkToken',
      'isAuthorizedSender',
      'ownerForward',
      'setAuthorizedSenders',
      'transferOwnershipWithMessage',
      'typeAndVersion',
      // ConfirmedOwner
      'transferOwnership',
      'acceptOwnership',
      'owner',
    ])`
$DIR/contracts/test/v0.7/AuthorizedForwarder.test.ts:74:24-74:41: `.typeAndVersion()`
$DIR/contracts/test/v0.7/AuthorizedForwarder.test.ts:82:35-82:55: `.getChainlinkToken()`
$DIR/contracts/test/v0.7/AuthorizedForwarder.test.ts:86:7-93:8: `await evmRevert(
        forwarderFactory.connect(roles.defaultAccount).deploy(
          zeroAddress, // Link Address
          await roles.defaultAccount.getAddress(),
          zeroAddress,
          '0x',
        ),
      )`
$DIR/contracts/test/v0.7/AuthorizedForwarder.test.ts:87:25-87:55: `.connect(roles.defaultAccount)`
$DIR/contracts/test/v0.7/AuthorizedForwarder.test.ts:87:55-92:10: `.deploy(
          zeroAddress, // Link Address
          await roles.defaultAccount.getAddress(),
          zeroAddress,
          '0x',
        )`
$DIR/contracts/test/v0.7/AuthorizedForwarder.test.ts:89:22-89:50: `.defaultAccount.getAddress()`
$DIR/contracts/test/v0.7/AuthorizedForwarder.test.ts:97:38-97:61: `.getAuthorizedSenders()`
$DIR/contracts/test/v0.7/AuthorizedForwarder.test.ts:120:52-120:75: `.getAuthorizedSenders()`
$DIR/contracts/test/v0.7/AuthorizedForwarder.test.ts:131:40-134:12: `.utils.defaultAbiCoder.encode(
            ['address[]', 'address'],
            [newSenders, await roles.defaultAccount.getAddress()],
          )`
$DIR/contracts/test/v0.7/AuthorizedForwarder.test.ts:133:37-133:65: `.defaultAccount.getAddress()`
$DIR/contracts/test/v0.7/AuthorizedForwarder.test.ts:139:45-140:43: `
            .connect(roles.defaultAccount)`
$DIR/contracts/test/v0.7/AuthorizedForwarder.test.ts:140:43-141:36: `
            .getAuthorizedSenders()`
$DIR/contracts/test/v0.7/AuthorizedForwarder.test.ts:143:24-143:48: `.oracleNode.getAddress()`
$DIR/contracts/test/v0.7/AuthorizedForwarder.test.ts:160:11-165:12: `await evmRevert(
            forwarder
              .connect(roles.defaultAccount)
              .setAuthorizedSenders(newSenders),
            'Must have at least 1 authorized sender',
          )`
$DIR/contracts/test/v0.7/AuthorizedForwarder.test.ts:161:22-162:45: `
              .connect(roles.defaultAccount)`
$DIR/contracts/test/v0.7/AuthorizedForwarder.test.ts:162:45-163:48: `
              .setAuthorizedSenders(newSenders)`
$DIR/contracts/test/v0.7/AuthorizedForwarder.test.ts:172:9-177:10: `await evmRevert(
          forwarder
            .connect(roles.stranger)
            .setAuthorizedSenders([await roles.stranger.getAddress()]),
          'Cannot set authorized senders',
        )`
$DIR/contracts/test/v0.7/AuthorizedForwarder.test.ts:173:20-174:37: `
            .connect(roles.stranger)`
$DIR/contracts/test/v0.7/AuthorizedForwarder.test.ts:174:37-175:71: `
            .setAuthorizedSenders([await roles.stranger.getAddress()])`
$DIR/contracts/test/v0.7/AuthorizedForwarder.test.ts:175:47-175:69: `.stranger.getAddress()`
$DIR/contracts/test/v0.7/AuthorizedForwarder.test.ts:198:9-200:10: `await evmRevert(
          forwarder.connect(roles.stranger).forward(mock.address, payload),
        )`
$DIR/contracts/test/v0.7/AuthorizedForwarder.test.ts:199:20-199:44: `.connect(roles.stranger)`
$DIR/contracts/test/v0.7/AuthorizedForwarder.test.ts:199:44-199:75: `.forward(mock.address, payload)`
$DIR/contracts/test/v0.7/AuthorizedForwarder.test.ts:233:13-238:14: `await evmRevert(
              forwarder
                .connect(roles.defaultAccount)
                .forward(brokenMock.address, brokenMsgPayload),
              "reverted with reason string 'Failure message'",
            )`
$DIR/contracts/test/v0.7/AuthorizedForwarder.test.ts:234:24-235:47: `
                .connect(roles.defaultAccount)`
$DIR/contracts/test/v0.7/AuthorizedForwarder.test.ts:235:47-236:63: `
                .forward(brokenMock.address, brokenMsgPayload)`
$DIR/contracts/test/v0.7/AuthorizedForwarder.test.ts:244:13-249:14: `await evmRevert(
              forwarder
                .connect(roles.defaultAccount)
                .forward(brokenMock.address, brokenPayload),
              'Forwarded call reverted without reason',
            )`
$DIR/contracts/test/v0.7/AuthorizedForwarder.test.ts:245:24-246:47: `
                .connect(roles.defaultAccount)`
$DIR/contracts/test/v0.7/AuthorizedForwarder.test.ts:246:47-247:60: `
                .forward(brokenMock.address, brokenPayload)`
$DIR/contracts/test/v0.7/AuthorizedForwarder.test.ts:256:11-261:12: `await evmRevert(
            forwarder
              .connect(roles.defaultAccount)
              .forward(zeroAddress, payload),
            'Must forward to a contract',
          )`
$DIR/contracts/test/v0.7/AuthorizedForwarder.test.ts:257:22-258:45: `
              .connect(roles.defaultAccount)`
$DIR/contracts/test/v0.7/AuthorizedForwarder.test.ts:258:45-259:45: `
              .forward(zeroAddress, payload)`
$DIR/contracts/test/v0.7/AuthorizedForwarder.test.ts:267:43-267:72: `.interface.getSighash('name')`
$DIR/contracts/test/v0.7/AuthorizedForwarder.test.ts:268:11-272:12: `await evmRevert(
            forwarder
              .connect(roles.defaultAccount)
              .forward(link.address, sighash),
          )`
$DIR/contracts/test/v0.7/AuthorizedForwarder.test.ts:269:22-270:45: `
              .connect(roles.defaultAccount)`
$DIR/contracts/test/v0.7/AuthorizedForwarder.test.ts:270:45-271:46: `
              .forward(link.address, sighash)`
$DIR/contracts/test/v0.7/AuthorizedForwarder.test.ts:278:37-279:43: `
            .connect(roles.defaultAccount)`
$DIR/contracts/test/v0.7/AuthorizedForwarder.test.ts:279:43-280:44: `
            .forward(mock.address, payload)`
$DIR/contracts/test/v0.7/AuthorizedForwarder.test.ts:281:11-281:26: `await tx.wait()`
$DIR/contracts/test/v0.7/AuthorizedForwarder.test.ts:281:19-281:26: `.wait()`
$DIR/contracts/test/v0.7/AuthorizedForwarder.test.ts:282:34-282:45: `.getBytes()`
$DIR/contracts/test/v0.7/AuthorizedForwarder.test.ts:286:37-287:43: `
            .connect(roles.defaultAccount)`
$DIR/contracts/test/v0.7/AuthorizedForwarder.test.ts:287:43-288:44: `
            .forward(mock.address, payload)`
$DIR/contracts/test/v0.7/AuthorizedForwarder.test.ts:302:9-310:10: `await evmRevert(
          forwarder
            .connect(roles.stranger)
            .transferOwnershipWithMessage(
              await roles.stranger.getAddress(),
              message,
            ),
          'Only callable by owner',
        )`
$DIR/contracts/test/v0.7/AuthorizedForwarder.test.ts:303:20-304:37: `
            .connect(roles.stranger)`
$DIR/contracts/test/v0.7/AuthorizedForwarder.test.ts:304:37-308:14: `
            .transferOwnershipWithMessage(
              await roles.stranger.getAddress(),
              message,
            )`
$DIR/contracts/test/v0.7/AuthorizedForwarder.test.ts:306:26-306:48: `.stranger.getAddress()`
$DIR/contracts/test/v0.7/AuthorizedForwarder.test.ts:316:35-317:41: `
          .connect(roles.defaultAccount)`
$DIR/contracts/test/v0.7/AuthorizedForwarder.test.ts:317:41-321:12: `
          .transferOwnershipWithMessage(
            await roles.stranger.getAddress(),
            message,
          )`
$DIR/contracts/test/v0.7/AuthorizedForwarder.test.ts:319:24-319:46: `.stranger.getAddress()`
$DIR/contracts/test/v0.7/AuthorizedForwarder.test.ts:322:33-322:40: `.wait()`
$DIR/contracts/test/v0.7/AuthorizedForwarder.test.ts:328:22-328:50: `.defaultAccount.getAddress()`
$DIR/contracts/test/v0.7/AuthorizedForwarder.test.ts:332:22-332:44: `.stranger.getAddress()`
$DIR/contracts/test/v0.7/AuthorizedForwarder.test.ts:337:35-338:41: `
          .connect(roles.defaultAccount)`
$DIR/contracts/test/v0.7/AuthorizedForwarder.test.ts:338:41-342:12: `
          .transferOwnershipWithMessage(
            await roles.stranger.getAddress(),
            message,
          )`
$DIR/contracts/test/v0.7/AuthorizedForwarder.test.ts:340:24-340:46: `.stranger.getAddress()`
$DIR/contracts/test/v0.7/AuthorizedForwarder.test.ts:343:33-343:40: `.wait()`
$DIR/contracts/test/v0.7/AuthorizedForwarder.test.ts:352:22-352:50: `.defaultAccount.getAddress()`
$DIR/contracts/test/v0.7/AuthorizedForwarder.test.ts:356:22-356:44: `.stranger.getAddress()`
$DIR/contracts/test/v0.7/AuthorizedForwarder.test.ts:379:9-381:10: `await evmRevert(
          forwarder.connect(roles.stranger).ownerForward(mock.address, payload),
        )`
$DIR/contracts/test/v0.7/AuthorizedForwarder.test.ts:380:20-380:44: `.connect(roles.stranger)`
$DIR/contracts/test/v0.7/AuthorizedForwarder.test.ts:380:44-380:80: `.ownerForward(mock.address, payload)`
$DIR/contracts/test/v0.7/AuthorizedForwarder.test.ts:388:43-388:72: `.interface.getSighash('name')`
$DIR/contracts/test/v0.7/AuthorizedForwarder.test.ts:390:11-392:49: `await forwarder
            .connect(roles.defaultAccount)
            .ownerForward(link.address, sighash)`
$DIR/contracts/test/v0.7/AuthorizedForwarder.test.ts:390:26-391:43: `
            .connect(roles.defaultAccount)`
$DIR/contracts/test/v0.7/AuthorizedForwarder.test.ts:391:43-392:49: `
            .ownerForward(link.address, sighash)`
$DIR/contracts/test/v0.7/AuthorizedForwarder.test.ts:398:37-399:43: `
            .connect(roles.defaultAccount)`
$DIR/contracts/test/v0.7/AuthorizedForwarder.test.ts:399:43-400:49: `
            .ownerForward(mock.address, payload)`
$DIR/contracts/test/v0.7/AuthorizedForwarder.test.ts:401:11-401:26: `await tx.wait()`
$DIR/contracts/test/v0.7/AuthorizedForwarder.test.ts:401:19-401:26: `.wait()`
$DIR/contracts/test/v0.7/AuthorizedForwarder.test.ts:402:34-402:45: `.getBytes()`
$DIR/contracts/test/v0.7/AuthorizedForwarder.test.ts:406:11-411:12: `await evmRevert(
            forwarder
              .connect(roles.defaultAccount)
              .ownerForward(zeroAddress, payload),
            'Must forward to a contract',
          )`
$DIR/contracts/test/v0.7/AuthorizedForwarder.test.ts:407:22-408:45: `
              .connect(roles.defaultAccount)`
$DIR/contracts/test/v0.7/AuthorizedForwarder.test.ts:408:45-409:50: `
              .ownerForward(zeroAddress, payload)`
$DIR/contracts/test/v0.7/AuthorizedForwarder.test.ts:415:37-416:43: `
            .connect(roles.defaultAccount)`
$DIR/contracts/test/v0.7/AuthorizedForwarder.test.ts:416:43-417:49: `
            .ownerForward(mock.address, payload)`
$DIR/contracts/test/v0.7/Chainlink.test.ts:31:5-39:7: `publicAbi(ccl, [
      'add',
      'addBytes',
      'addInt',
      'addStringArray',
      'addUint',
      'closeEvent',
      'setBuffer',
    ])`
$DIR/contracts/test/v0.7/Chainlink.test.ts:52:27-52:40: `.closeEvent()`
$DIR/contracts/test/v0.7/Chainlink.test.ts:61:7-61:42: `await ccl.setBuffer('0xA161616162')`
$DIR/contracts/test/v0.7/Chainlink.test.ts:61:16-61:42: `.setBuffer('0xA161616162')`
$DIR/contracts/test/v0.7/Chainlink.test.ts:62:27-62:40: `.closeEvent()`
$DIR/contracts/test/v0.7/Chainlink.test.ts:71:7-71:39: `await ccl.add('first', 'word!!')`
$DIR/contracts/test/v0.7/Chainlink.test.ts:71:16-71:39: `.add('first', 'word!!')`
$DIR/contracts/test/v0.7/Chainlink.test.ts:72:27-72:40: `.closeEvent()`
$DIR/contracts/test/v0.7/Chainlink.test.ts:79:7-79:36: `await ccl.add('first', 'uno')`
$DIR/contracts/test/v0.7/Chainlink.test.ts:79:16-79:36: `.add('first', 'uno')`
$DIR/contracts/test/v0.7/Chainlink.test.ts:80:7-80:37: `await ccl.add('second', 'dos')`
$DIR/contracts/test/v0.7/Chainlink.test.ts:80:16-80:37: `.add('second', 'dos')`
$DIR/contracts/test/v0.7/Chainlink.test.ts:81:27-81:40: `.closeEvent()`
$DIR/contracts/test/v0.7/Chainlink.test.ts:94:7-94:52: `await ccl.addBytes('first', '0xaabbccddeeff')`
$DIR/contracts/test/v0.7/Chainlink.test.ts:94:16-94:52: `.addBytes('first', '0xaabbccddeeff')`
$DIR/contracts/test/v0.7/Chainlink.test.ts:95:27-95:40: `.closeEvent()`
$DIR/contracts/test/v0.7/Chainlink.test.ts:103:7-103:46: `await ccl.addBytes('first', '0x756E6F')`
$DIR/contracts/test/v0.7/Chainlink.test.ts:103:16-103:46: `.addBytes('first', '0x756E6F')`
$DIR/contracts/test/v0.7/Chainlink.test.ts:104:7-104:47: `await ccl.addBytes('second', '0x646F73')`
$DIR/contracts/test/v0.7/Chainlink.test.ts:104:16-104:47: `.addBytes('second', '0x646F73')`
$DIR/contracts/test/v0.7/Chainlink.test.ts:105:27-105:40: `.closeEvent()`
$DIR/contracts/test/v0.7/Chainlink.test.ts:118:7-118:69: `await ccl.addBytes('first', ethers.utils.toUtf8Bytes('apple'))`
$DIR/contracts/test/v0.7/Chainlink.test.ts:118:16-118:69: `.addBytes('first', ethers.utils.toUtf8Bytes('apple'))`
$DIR/contracts/test/v0.7/Chainlink.test.ts:118:41-118:68: `.utils.toUtf8Bytes('apple')`
$DIR/contracts/test/v0.7/Chainlink.test.ts:119:27-119:40: `.closeEvent()`
$DIR/contracts/test/v0.7/Chainlink.test.ts:122:30-122:57: `.utils.toUtf8Bytes('apple')`
$DIR/contracts/test/v0.7/Chainlink.test.ts:129:7-129:35: `await ccl.addInt('first', 1)`
$DIR/contracts/test/v0.7/Chainlink.test.ts:129:16-129:35: `.addInt('first', 1)`
$DIR/contracts/test/v0.7/Chainlink.test.ts:130:27-130:40: `.closeEvent()`
$DIR/contracts/test/v0.7/Chainlink.test.ts:137:7-137:35: `await ccl.addInt('first', 1)`
$DIR/contracts/test/v0.7/Chainlink.test.ts:137:16-137:35: `.addInt('first', 1)`
$DIR/contracts/test/v0.7/Chainlink.test.ts:138:7-138:36: `await ccl.addInt('second', 2)`
$DIR/contracts/test/v0.7/Chainlink.test.ts:138:16-138:36: `.addInt('second', 2)`
$DIR/contracts/test/v0.7/Chainlink.test.ts:139:27-139:40: `.closeEvent()`
$DIR/contracts/test/v0.7/Chainlink.test.ts:152:7-152:36: `await ccl.addUint('first', 1)`
$DIR/contracts/test/v0.7/Chainlink.test.ts:152:16-152:36: `.addUint('first', 1)`
$DIR/contracts/test/v0.7/Chainlink.test.ts:153:27-153:40: `.closeEvent()`
$DIR/contracts/test/v0.7/Chainlink.test.ts:160:7-160:36: `await ccl.addUint('first', 1)`
$DIR/contracts/test/v0.7/Chainlink.test.ts:160:16-160:36: `.addUint('first', 1)`
$DIR/contracts/test/v0.7/Chainlink.test.ts:161:7-161:37: `await ccl.addUint('second', 2)`
$DIR/contracts/test/v0.7/Chainlink.test.ts:161:16-161:37: `.addUint('second', 2)`
$DIR/contracts/test/v0.7/Chainlink.test.ts:162:27-162:40: `.closeEvent()`
$DIR/contracts/test/v0.7/Chainlink.test.ts:175:7-179:9: `await ccl.addStringArray('word', [
        ethers.utils.formatBytes32String('seinfeld'),
        ethers.utils.formatBytes32String('"4"'),
        ethers.utils.formatBytes32String('LIFE'),
      ])`
$DIR/contracts/test/v0.7/Chainlink.test.ts:175:16-179:9: `.addStringArray('word', [
        ethers.utils.formatBytes32String('seinfeld'),
        ethers.utils.formatBytes32String('"4"'),
        ethers.utils.formatBytes32String('LIFE'),
      ])`
$DIR/contracts/test/v0.7/Chainlink.test.ts:176:15-176:53: `.utils.formatBytes32String('seinfeld')`
$DIR/contracts/test/v0.7/Chainlink.test.ts:177:15-177:48: `.utils.formatBytes32String('"4"')`
$DIR/contracts/test/v0.7/Chainlink.test.ts:178:15-178:49: `.utils.formatBytes32String('LIFE')`
$DIR/contracts/test/v0.7/Chainlink.test.ts:180:27-180:40: `.closeEvent()`
$DIR/contracts/test/v0.7/ChainlinkClient.test.ts:72:26-76:8: `.publicNewRequest(
        specId,
        gs.address,
        ethers.utils.toUtf8Bytes('requestedBytes32(bytes32,bytes32)'),
      )`
$DIR/contracts/test/v0.7/ChainlinkClient.test.ts:75:15-75:70: `.utils.toUtf8Bytes('requestedBytes32(bytes32,bytes32)')`
$DIR/contracts/test/v0.7/ChainlinkClient.test.ts:77:31-77:38: `.wait()`
$DIR/contracts/test/v0.7/ChainlinkClient.test.ts:94:26-99:8: `.publicRequest(
        specId,
        cc.address,
        ethers.utils.toUtf8Bytes('fulfillRequest(bytes32,bytes32)'),
        0,
      )`
$DIR/contracts/test/v0.7/ChainlinkClient.test.ts:97:15-97:68: `.utils.toUtf8Bytes('fulfillRequest(bytes32,bytes32)')`
$DIR/contracts/test/v0.7/ChainlinkClient.test.ts:101:40-101:47: `.wait()`
$DIR/contracts/test/v0.7/ChainlinkClient.test.ts:112:26-118:8: `.publicRequestRunTo(
        newoc.address,
        specId,
        cc.address,
        ethers.utils.toUtf8Bytes('fulfillRequest(bytes32,bytes32)'),
        0,
      )`
$DIR/contracts/test/v0.7/ChainlinkClient.test.ts:116:15-116:68: `.utils.toUtf8Bytes('fulfillRequest(bytes32,bytes32)')`
$DIR/contracts/test/v0.7/ChainlinkClient.test.ts:119:34-119:41: `.wait()`
$DIR/contracts/test/v0.7/ChainlinkClient.test.ts:126:26-132:8: `.publicRequestRunTo(
        newoc.address,
        specId,
        cc.address,
        ethers.utils.toUtf8Bytes('fulfillRequest(bytes32,bytes32)'),
        0,
      )`
$DIR/contracts/test/v0.7/ChainlinkClient.test.ts:130:15-130:68: `.utils.toUtf8Bytes('fulfillRequest(bytes32,bytes32)')`
$DIR/contracts/test/v0.7/ChainlinkClient.test.ts:133:32-133:39: `.wait()`
$DIR/contracts/test/v0.7/ChainlinkClient.test.ts:134:34-134:62: `.interface.parseLog(logs[3])`
$DIR/contracts/test/v0.7/ChainlinkClient.test.ts:141:7-147:8: `await cc.publicRequestRunTo(
        newoc.address,
        specId,
        cc.address,
        ethers.utils.toUtf8Bytes('fulfillRequest(bytes32,bytes32)'),
        0,
      )`
$DIR/contracts/test/v0.7/ChainlinkClient.test.ts:141:15-147:8: `.publicRequestRunTo(
        newoc.address,
        specId,
        cc.address,
        ethers.utils.toUtf8Bytes('fulfillRequest(bytes32,bytes32)'),
        0,
      )`
$DIR/contracts/test/v0.7/ChainlinkClient.test.ts:145:15-145:68: `.utils.toUtf8Bytes('fulfillRequest(bytes32,bytes32)')`
$DIR/contracts/test/v0.7/ChainlinkClient.test.ts:149:43-149:65: `.publicOracleAddress()`
$DIR/contracts/test/v0.7/ChainlinkClient.test.ts:156:26-160:8: `.publicRequestOracleData(
        specId,
        ethers.utils.toUtf8Bytes('fulfillRequest(bytes32,bytes32)'),
        0,
      )`
$DIR/contracts/test/v0.7/ChainlinkClient.test.ts:158:15-158:68: `.utils.toUtf8Bytes('fulfillRequest(bytes32,bytes32)')`
$DIR/contracts/test/v0.7/ChainlinkClient.test.ts:162:40-162:47: `.wait()`
$DIR/contracts/test/v0.7/ChainlinkClient.test.ts:173:26-179:8: `.publicRequestOracleDataFrom(
        newoc.address,
        specId,
        cc.address,
        ethers.utils.toUtf8Bytes('fulfillRequest(bytes32,bytes32)'),
        0,
      )`
$DIR/contracts/test/v0.7/ChainlinkClient.test.ts:177:15-177:68: `.utils.toUtf8Bytes('fulfillRequest(bytes32,bytes32)')`
$DIR/contracts/test/v0.7/ChainlinkClient.test.ts:180:34-180:41: `.wait()`
$DIR/contracts/test/v0.7/ChainlinkClient.test.ts:187:26-193:8: `.publicRequestOracleDataFrom(
        newoc.address,
        specId,
        cc.address,
        ethers.utils.toUtf8Bytes('fulfillRequest(bytes32,bytes32)'),
        0,
      )`
$DIR/contracts/test/v0.7/ChainlinkClient.test.ts:191:15-191:68: `.utils.toUtf8Bytes('fulfillRequest(bytes32,bytes32)')`
$DIR/contracts/test/v0.7/ChainlinkClient.test.ts:194:32-194:39: `.wait()`
$DIR/contracts/test/v0.7/ChainlinkClient.test.ts:195:34-195:62: `.interface.parseLog(logs[3])`
$DIR/contracts/test/v0.7/ChainlinkClient.test.ts:202:7-208:8: `await cc.publicRequestOracleDataFrom(
        newoc.address,
        specId,
        cc.address,
        ethers.utils.toUtf8Bytes('fulfillRequest(bytes32,bytes32)'),
        0,
      )`
$DIR/contracts/test/v0.7/ChainlinkClient.test.ts:202:15-208:8: `.publicRequestOracleDataFrom(
        newoc.address,
        specId,
        cc.address,
        ethers.utils.toUtf8Bytes('fulfillRequest(bytes32,bytes32)'),
        0,
      )`
$DIR/contracts/test/v0.7/ChainlinkClient.test.ts:206:15-206:68: `.utils.toUtf8Bytes('fulfillRequest(bytes32,bytes32)')`
$DIR/contracts/test/v0.7/ChainlinkClient.test.ts:210:43-210:65: `.publicOracleAddress()`
$DIR/contracts/test/v0.7/ChainlinkClient.test.ts:239:27-244:8: `.publicCancelRequest(
        requestId,
        0,
        ethers.utils.hexZeroPad('0x', 4),
        0,
      )`
$DIR/contracts/test/v0.7/ChainlinkClient.test.ts:242:15-242:41: `.utils.hexZeroPad('0x', 4)`
$DIR/contracts/test/v0.7/ChainlinkClient.test.ts:245:34-245:41: `.wait()`
$DIR/contracts/test/v0.7/ChainlinkClient.test.ts:253:7-260:8: `await evmRevert(
        ecc.publicCancelRequest(
          ethers.utils.formatBytes32String('bogusId'),
          0,
          ethers.utils.hexZeroPad('0x', 4),
          0,
        ),
      )`
$DIR/contracts/test/v0.7/ChainlinkClient.test.ts:254:12-259:10: `.publicCancelRequest(
          ethers.utils.formatBytes32String('bogusId'),
          0,
          ethers.utils.hexZeroPad('0x', 4),
          0,
        )`
$DIR/contracts/test/v0.7/ChainlinkClient.test.ts:255:17-255:54: `.utils.formatBytes32String('bogusId')`
$DIR/contracts/test/v0.7/ChainlinkClient.test.ts:257:17-257:43: `.utils.hexZeroPad('0x', 4)`
$DIR/contracts/test/v0.7/ChainlinkClient.test.ts:281:26-282:39: `
        .connect(roles.defaultAccount)`
$DIR/contracts/test/v0.7/ChainlinkClient.test.ts:282:39-288:10: `
        .fulfillOracleRequest(
          ...convertFufillParams(
            request,
            ethers.utils.formatBytes32String('hi mom!'),
          ),
        )`
$DIR/contracts/test/v0.7/ChainlinkClient.test.ts:286:19-286:56: `.utils.formatBytes32String('hi mom!')`
$DIR/contracts/test/v0.7/ChainlinkClient.test.ts:289:32-289:39: `.wait()`
$DIR/contracts/test/v0.7/ChainlinkClient.test.ts:291:31-291:59: `.interface.parseLog(logs[1])`
$DIR/contracts/test/v0.7/ChainlinkClient.test.ts:299:7-306:10: `await oc
        .connect(roles.defaultAccount)
        .fulfillOracleRequest(
          ...convertFufillParams(
            request,
            ethers.utils.formatBytes32String('hi mom!'),
          ),
        )`
$DIR/contracts/test/v0.7/ChainlinkClient.test.ts:299:15-300:39: `
        .connect(roles.defaultAccount)`
$DIR/contracts/test/v0.7/ChainlinkClient.test.ts:300:39-306:10: `
        .fulfillOracleRequest(
          ...convertFufillParams(
            request,
            ethers.utils.formatBytes32String('hi mom!'),
          ),
        )`
$DIR/contracts/test/v0.7/ChainlinkClient.test.ts:304:19-304:56: `.utils.formatBytes32String('hi mom!')`
$DIR/contracts/test/v0.7/ChainlinkClient.test.ts:308:7-318:8: `await evmRevert(
        oc
          .connect(roles.defaultAccount)
          .fulfillOracleRequest(
            ...convertFufillParams(
              request,
              ethers.utils.formatBytes32String('hi mom!'),
            ),
          ),
        'Must have a valid requestId',
      )`
$DIR/contracts/test/v0.7/ChainlinkClient.test.ts:309:11-310:41: `
          .connect(roles.defaultAccount)`
$DIR/contracts/test/v0.7/ChainlinkClient.test.ts:310:41-316:12: `
          .fulfillOracleRequest(
            ...convertFufillParams(
              request,
              ethers.utils.formatBytes32String('hi mom!'),
            ),
          )`
$DIR/contracts/test/v0.7/ChainlinkClient.test.ts:314:21-314:58: `.utils.formatBytes32String('hi mom!')`
$DIR/contracts/test/v0.7/ChainlinkClient.test.ts:322:7-332:8: `await evmRevert(
        oc
          .connect(roles.stranger)
          .fulfillOracleRequest(
            ...convertFufillParams(
              request,
              ethers.utils.formatBytes32String('hi mom!'),
            ),
          ),
        'Not authorized sender',
      )`
$DIR/contracts/test/v0.7/ChainlinkClient.test.ts:323:11-324:35: `
          .connect(roles.stranger)`
$DIR/contracts/test/v0.7/ChainlinkClient.test.ts:324:35-330:12: `
          .fulfillOracleRequest(
            ...convertFufillParams(
              request,
              ethers.utils.formatBytes32String('hi mom!'),
            ),
          )`
$DIR/contracts/test/v0.7/ChainlinkClient.test.ts:328:21-328:58: `.utils.formatBytes32String('hi mom!')`
$DIR/contracts/test/v0.7/ChainlinkClient.test.ts:355:26-356:39: `
        .connect(roles.defaultAccount)`
$DIR/contracts/test/v0.7/ChainlinkClient.test.ts:356:39-362:10: `
        .fulfillOracleRequest(
          ...convertFufillParams(
            request,
            ethers.utils.formatBytes32String('hi mom!'),
          ),
        )`
$DIR/contracts/test/v0.7/ChainlinkClient.test.ts:360:19-360:56: `.utils.formatBytes32String('hi mom!')`
$DIR/contracts/test/v0.7/ChainlinkClient.test.ts:364:32-364:39: `.wait()`
$DIR/contracts/test/v0.7/ChainlinkClient.test.ts:365:31-365:59: `.interface.parseLog(logs[1])`
$DIR/contracts/test/v0.7/ChainlinkClient.test.ts:373:7-380:10: `await oc
        .connect(roles.defaultAccount)
        .fulfillOracleRequest(
          ...convertFufillParams(
            request,
            ethers.utils.formatBytes32String('hi mom!'),
          ),
        )`
$DIR/contracts/test/v0.7/ChainlinkClient.test.ts:373:15-374:39: `
        .connect(roles.defaultAccount)`
$DIR/contracts/test/v0.7/ChainlinkClient.test.ts:374:39-380:10: `
        .fulfillOracleRequest(
          ...convertFufillParams(
            request,
            ethers.utils.formatBytes32String('hi mom!'),
          ),
        )`
$DIR/contracts/test/v0.7/ChainlinkClient.test.ts:378:19-378:56: `.utils.formatBytes32String('hi mom!')`
$DIR/contracts/test/v0.7/ChainlinkClient.test.ts:382:7-392:8: `await evmRevert(
        oc
          .connect(roles.defaultAccount)
          .fulfillOracleRequest(
            ...convertFufillParams(
              request,
              ethers.utils.formatBytes32String('hi mom!'),
            ),
          ),
        'Must have a valid requestId',
      )`
$DIR/contracts/test/v0.7/ChainlinkClient.test.ts:383:11-384:41: `
          .connect(roles.defaultAccount)`
$DIR/contracts/test/v0.7/ChainlinkClient.test.ts:384:41-390:12: `
          .fulfillOracleRequest(
            ...convertFufillParams(
              request,
              ethers.utils.formatBytes32String('hi mom!'),
            ),
          )`
$DIR/contracts/test/v0.7/ChainlinkClient.test.ts:388:21-388:58: `.utils.formatBytes32String('hi mom!')`
$DIR/contracts/test/v0.7/ChainlinkClient.test.ts:396:7-406:8: `await evmRevert(
        oc
          .connect(roles.stranger)
          .fulfillOracleRequest(
            ...convertFufillParams(
              request,
              ethers.utils.formatBytes32String('hi mom!'),
            ),
          ),
        'Not authorized sender',
      )`
$DIR/contracts/test/v0.7/ChainlinkClient.test.ts:397:11-398:35: `
          .connect(roles.stranger)`
$DIR/contracts/test/v0.7/ChainlinkClient.test.ts:398:35-404:12: `
          .fulfillOracleRequest(
            ...convertFufillParams(
              request,
              ethers.utils.formatBytes32String('hi mom!'),
            ),
          )`
$DIR/contracts/test/v0.7/ChainlinkClient.test.ts:402:21-402:58: `.utils.formatBytes32String('hi mom!')`
$DIR/contracts/test/v0.7/ChainlinkClient.test.ts:412:28-412:51: `.publicChainlinkToken()`
$DIR/contracts/test/v0.7/ChainlinkClient.test.ts:439:7-439:79: `await oc.setAuthorizedSenders([await roles.defaultAccount.getAddress()])`
$DIR/contracts/test/v0.7/ChainlinkClient.test.ts:439:15-439:79: `.setAuthorizedSenders([await roles.defaultAccount.getAddress()])`
$DIR/contracts/test/v0.7/ChainlinkClient.test.ts:439:49-439:77: `.defaultAccount.getAddress()`
$DIR/contracts/test/v0.7/ChainlinkClient.test.ts:440:7-445:8: `await oc.fulfillOracleRequest(
        ...convertFufillParams(
          request,
          ethers.utils.formatBytes32String('hi mom!'),
        ),
      )`
$DIR/contracts/test/v0.7/ChainlinkClient.test.ts:440:15-445:8: `.fulfillOracleRequest(
        ...convertFufillParams(
          request,
          ethers.utils.formatBytes32String('hi mom!'),
        ),
      )`
$DIR/contracts/test/v0.7/ChainlinkClient.test.ts:443:17-443:54: `.utils.formatBytes32String('hi mom!')`
$DIR/contracts/test/v0.7/ChainlinkClient.test.ts:449:7-451:8: `await evmRevert(
        cc.publicAddExternalRequest(newoc.address, request.requestId),
      )`
$DIR/contracts/test/v0.7/ChainlinkClient.test.ts:450:11-450:70: `.publicAddExternalRequest(newoc.address, request.requestId)`
$DIR/contracts/test/v0.7/CompoundPriceFlaggingValidator.test.ts:93:5-109:7: `publicAbi(validator, [
      'update',
      'check',
      'setFeedDetails',
      'setFlagsAddress',
      'setCompoundOpenOracleAddress',
      'getFeedDetails',
      'flags',
      'compoundOpenOracle',
      // Upkeep methods:
      'checkUpkeep',
      'performUpkeep',
      // Owned methods:
      'acceptOwnership',
      'owner',
      'transferOwnership',
    ])`
$DIR/contracts/test/v0.7/CompoundPriceFlaggingValidator.test.ts:114:35-114:43: `.owner()`
$DIR/contracts/test/v0.7/CompoundPriceFlaggingValidator.test.ts:114:59-114:78: `.Carol.getAddress()`
$DIR/contracts/test/v0.7/CompoundPriceFlaggingValidator.test.ts:118:35-118:43: `.flags()`
$DIR/contracts/test/v0.7/CompoundPriceFlaggingValidator.test.ts:119:35-119:56: `.compoundOpenOracle()`
$DIR/contracts/test/v0.7/CompoundPriceFlaggingValidator.test.ts:138:24-138:45: `.compoundOpenOracle()`
$DIR/contracts/test/v0.7/CompoundPriceFlaggingValidator.test.ts:151:9-156:10: `await evmRevert(
          validator
            .connect(personas.Neil)
            .setCompoundOpenOracleAddress(newCompoundOracle.address),
          'Only callable by owner',
        )`
$DIR/contracts/test/v0.7/CompoundPriceFlaggingValidator.test.ts:152:20-153:36: `
            .connect(personas.Neil)`
$DIR/contracts/test/v0.7/CompoundPriceFlaggingValidator.test.ts:153:36-154:69: `
            .setCompoundOpenOracleAddress(newCompoundOracle.address)`
$DIR/contracts/test/v0.7/CompoundPriceFlaggingValidator.test.ts:175:35-175:43: `.flags()`
$DIR/contracts/test/v0.7/CompoundPriceFlaggingValidator.test.ts:186:9-191:10: `await evmRevert(
          validator
            .connect(personas.Neil)
            .setFlagsAddress(newFlagsContract.address),
          'Only callable by owner',
        )`
$DIR/contracts/test/v0.7/CompoundPriceFlaggingValidator.test.ts:187:20-188:36: `
            .connect(personas.Neil)`
$DIR/contracts/test/v0.7/CompoundPriceFlaggingValidator.test.ts:188:36-189:55: `
            .setFlagsAddress(newFlagsContract.address)`
$DIR/contracts/test/v0.7/CompoundPriceFlaggingValidator.test.ts:219:39-220:33: `
        .connect(personas.Carol)`
$DIR/contracts/test/v0.7/CompoundPriceFlaggingValidator.test.ts:220:33-221:48: `
        .getFeedDetails(mockAggregator.address)`
$DIR/contracts/test/v0.7/CompoundPriceFlaggingValidator.test.ts:231:7-233:41: `await compoundOracle
        .connect(personas.Carol)
        .setPrice(newSymbol, 1500000, 2)`
$DIR/contracts/test/v0.7/CompoundPriceFlaggingValidator.test.ts:231:27-232:33: `
        .connect(personas.Carol)`
$DIR/contracts/test/v0.7/CompoundPriceFlaggingValidator.test.ts:232:33-233:41: `
        .setPrice(newSymbol, 1500000, 2)`
$DIR/contracts/test/v0.7/CompoundPriceFlaggingValidator.test.ts:235:7-242:10: `tx = await validator
        .connect(personas.Carol)
        .setFeedDetails(
          mockAggregator.address,
          newSymbol,
          decimals,
          deviationNumerator,
        )`
$DIR/contracts/test/v0.7/CompoundPriceFlaggingValidator.test.ts:235:27-236:33: `
        .connect(personas.Carol)`
$DIR/contracts/test/v0.7/CompoundPriceFlaggingValidator.test.ts:236:33-242:10: `
        .setFeedDetails(
          mockAggregator.address,
          newSymbol,
          decimals,
          deviationNumerator,
        )`
$DIR/contracts/test/v0.7/CompoundPriceFlaggingValidator.test.ts:250:39-251:33: `
        .connect(personas.Carol)`
$DIR/contracts/test/v0.7/CompoundPriceFlaggingValidator.test.ts:251:33-252:48: `
        .getFeedDetails(mockAggregator.address)`
$DIR/contracts/test/v0.7/CompoundPriceFlaggingValidator.test.ts:263:7-268:8: `await evmRevert(
        validator
          .connect(personas.Carol)
          .setFeedDetails(mockAggregator.address, symbol, decimals, 0),
        'Invalid threshold numerator',
      )`
$DIR/contracts/test/v0.7/CompoundPriceFlaggingValidator.test.ts:264:18-265:35: `
          .connect(personas.Carol)`
$DIR/contracts/test/v0.7/CompoundPriceFlaggingValidator.test.ts:265:35-266:71: `
          .setFeedDetails(mockAggregator.address, symbol, decimals, 0)`
$DIR/contracts/test/v0.7/CompoundPriceFlaggingValidator.test.ts:272:7-282:8: `await evmRevert(
        validator
          .connect(personas.Carol)
          .setFeedDetails(
            mockAggregator.address,
            symbol,
            decimals,
            1_200_000_000,
          ),
        'Invalid threshold numerator',
      )`
$DIR/contracts/test/v0.7/CompoundPriceFlaggingValidator.test.ts:273:18-274:35: `
          .connect(personas.Carol)`
$DIR/contracts/test/v0.7/CompoundPriceFlaggingValidator.test.ts:274:35-280:12: `
          .setFeedDetails(
            mockAggregator.address,
            symbol,
            decimals,
            1_200_000_000,
          )`
$DIR/contracts/test/v0.7/CompoundPriceFlaggingValidator.test.ts:286:7-296:8: `await evmRevert(
        validator
          .connect(personas.Carol)
          .setFeedDetails(
            mockAggregator.address,
            'TEST',
            decimals,
            deviationNumerator,
          ),
        'Invalid Compound price',
      )`
$DIR/contracts/test/v0.7/CompoundPriceFlaggingValidator.test.ts:287:18-288:35: `
          .connect(personas.Carol)`
$DIR/contracts/test/v0.7/CompoundPriceFlaggingValidator.test.ts:288:35-294:12: `
          .setFeedDetails(
            mockAggregator.address,
            'TEST',
            decimals,
            deviationNumerator,
          )`
$DIR/contracts/test/v0.7/CompoundPriceFlaggingValidator.test.ts:301:9-311:10: `await evmRevert(
          validator
            .connect(personas.Neil)
            .setFeedDetails(
              mockAggregator.address,
              symbol,
              decimals,
              deviationNumerator,
            ),
          'Only callable by owner',
        )`
$DIR/contracts/test/v0.7/CompoundPriceFlaggingValidator.test.ts:302:20-303:36: `
            .connect(personas.Neil)`
$DIR/contracts/test/v0.7/CompoundPriceFlaggingValidator.test.ts:303:36-309:14: `
            .setFeedDetails(
              mockAggregator.address,
              symbol,
              decimals,
              deviationNumerator,
            )`
$DIR/contracts/test/v0.7/CompoundPriceFlaggingValidator.test.ts:321:43-321:62: `.check(aggregators)`
$DIR/contracts/test/v0.7/CompoundPriceFlaggingValidator.test.ts:339:43-339:62: `.check(aggregators)`
$DIR/contracts/test/v0.7/CompoundPriceFlaggingValidator.test.ts:351:37-351:61: `.connect(personas.Carol)`
$DIR/contracts/test/v0.7/CompoundPriceFlaggingValidator.test.ts:351:61-351:81: `.update(aggregators)`
$DIR/contracts/test/v0.7/CompoundPriceFlaggingValidator.test.ts:370:37-370:61: `.connect(personas.Carol)`
$DIR/contracts/test/v0.7/CompoundPriceFlaggingValidator.test.ts:370:61-370:81: `.update(aggregators)`
$DIR/contracts/test/v0.7/CompoundPriceFlaggingValidator.test.ts:383:44-386:12: `.utils.defaultAbiCoder.encode(
            ['address[]'],
            [aggregators],
          )`
$DIR/contracts/test/v0.7/CompoundPriceFlaggingValidator.test.ts:387:43-388:37: `
            .connect(personas.Carol)`
$DIR/contracts/test/v0.7/CompoundPriceFlaggingValidator.test.ts:388:37-389:45: `
            .checkUpkeep(encodedAggregators)`
$DIR/contracts/test/v0.7/CompoundPriceFlaggingValidator.test.ts:391:41-394:12: `.utils.defaultAbiCoder.decode(
            ['address[]'],
            response?.[1],
          )`
$DIR/contracts/test/v0.7/CompoundPriceFlaggingValidator.test.ts:411:44-414:12: `.utils.defaultAbiCoder.encode(
            ['address[]'],
            [aggregators],
          )`
$DIR/contracts/test/v0.7/CompoundPriceFlaggingValidator.test.ts:415:43-416:37: `
            .connect(personas.Carol)`
$DIR/contracts/test/v0.7/CompoundPriceFlaggingValidator.test.ts:416:37-417:45: `
            .checkUpkeep(encodedAggregators)`
$DIR/contracts/test/v0.7/CompoundPriceFlaggingValidator.test.ts:418:41-421:12: `.utils.defaultAbiCoder.decode(
            ['address[]'],
            response?.[1],
          )`
$DIR/contracts/test/v0.7/CompoundPriceFlaggingValidator.test.ts:433:44-436:12: `.utils.defaultAbiCoder.encode(
            ['address[]'],
            [aggregators],
          )`
$DIR/contracts/test/v0.7/CompoundPriceFlaggingValidator.test.ts:437:37-438:37: `
            .connect(personas.Carol)`
$DIR/contracts/test/v0.7/CompoundPriceFlaggingValidator.test.ts:438:37-439:47: `
            .performUpkeep(encodedAggregators)`
$DIR/contracts/test/v0.7/CompoundPriceFlaggingValidator.test.ts:458:44-461:12: `.utils.defaultAbiCoder.encode(
            ['address[]'],
            [aggregators],
          )`
$DIR/contracts/test/v0.7/CompoundPriceFlaggingValidator.test.ts:462:37-463:37: `
            .connect(personas.Carol)`
$DIR/contracts/test/v0.7/CompoundPriceFlaggingValidator.test.ts:463:37-464:47: `
            .performUpkeep(encodedAggregators)`
$DIR/contracts/test/v0.7/ConfirmedOwner.test.ts:43:5-49:7: `publicAbi(confirmedOwner, [
      'acceptOwnership',
      'owner',
      'transferOwnership',
      // test helper public methods
      'modifierOnlyOwner',
    ])`
$DIR/contracts/test/v0.7/ConfirmedOwner.test.ts:54:47-57:9: `.all([
        owner.getAddress(),
        confirmedOwner.owner(),
      ])`
$DIR/contracts/test/v0.7/ConfirmedOwner.test.ts:55:14-55:27: `.getAddress()`
$DIR/contracts/test/v0.7/ConfirmedOwner.test.ts:56:23-56:31: `.owner()`
$DIR/contracts/test/v0.7/ConfirmedOwner.test.ts:63:7-68:8: `await evmRevert(
        confirmedOwnerFactory
          .connect(owner)
          .deploy(ethers.constants.AddressZero),
        'Cannot set owner to zero',
      )`
$DIR/contracts/test/v0.7/ConfirmedOwner.test.ts:64:30-65:26: `
          .connect(owner)`
$DIR/contracts/test/v0.7/ConfirmedOwner.test.ts:65:26-66:48: `
          .deploy(ethers.constants.AddressZero)`
$DIR/contracts/test/v0.7/ConfirmedOwner.test.ts:75:40-75:55: `.connect(owner)`
$DIR/contracts/test/v0.7/ConfirmedOwner.test.ts:75:55-75:75: `.modifierOnlyOwner()`
$DIR/contracts/test/v0.7/ConfirmedOwner.test.ts:82:39-82:57: `.connect(nonOwner)`
$DIR/contracts/test/v0.7/ConfirmedOwner.test.ts:82:57-82:77: `.modifierOnlyOwner()`
$DIR/contracts/test/v0.7/ConfirmedOwner.test.ts:89:40-90:26: `
          .connect(owner)`
$DIR/contracts/test/v0.7/ConfirmedOwner.test.ts:90:26-91:58: `
          .transferOwnership(await newOwner.getAddress())`
$DIR/contracts/test/v0.7/ConfirmedOwner.test.ts:91:44-91:57: `.getAddress()`
$DIR/contracts/test/v0.7/ConfirmedOwner.test.ts:98:9-103:10: `await evmRevert(
          confirmedOwner
            .connect(owner)
            .transferOwnership(await owner.getAddress()),
          'Cannot transfer to self',
        )`
$DIR/contracts/test/v0.7/ConfirmedOwner.test.ts:99:25-100:28: `
            .connect(owner)`
$DIR/contracts/test/v0.7/ConfirmedOwner.test.ts:100:28-101:57: `
            .transferOwnership(await owner.getAddress())`
$DIR/contracts/test/v0.7/ConfirmedOwner.test.ts:101:43-101:56: `.getAddress()`
$DIR/contracts/test/v0.7/ConfirmedOwner.test.ts:111:23-112:29: `
          .connect(nonOwner)`
$DIR/contracts/test/v0.7/ConfirmedOwner.test.ts:112:29-113:58: `
          .transferOwnership(await newOwner.getAddress())`
$DIR/contracts/test/v0.7/ConfirmedOwner.test.ts:113:44-113:57: `.getAddress()`
$DIR/contracts/test/v0.7/ConfirmedOwner.test.ts:126:40-126:58: `.connect(newOwner)`
$DIR/contracts/test/v0.7/ConfirmedOwner.test.ts:126:58-126:76: `.acceptOwnership()`
$DIR/contracts/test/v0.7/ConfirmedOwner.test.ts:133:39-133:57: `.connect(nonOwner)`
$DIR/contracts/test/v0.7/ConfirmedOwner.test.ts:133:57-133:75: `.acceptOwnership()`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:175:7-178:8: `await evmRevert(
        registry.connect(keeper1).setKeepers([], []),
        'Only callable by owner',
      )`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:176:17-176:34: `.connect(keeper1)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:176:34-176:53: `.setKeepers([], [])`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:182:7-190:8: `await evmRevert(
        registry
          .connect(owner)
          .setKeepers(
            [await keeper1.getAddress(), await keeper1.getAddress()],
            [await payee1.getAddress(), await payee1.getAddress()],
          ),
        'cannot add keeper twice',
      )`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:183:17-184:26: `
          .connect(owner)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:184:26-188:12: `
          .setKeepers(
            [await keeper1.getAddress(), await keeper1.getAddress()],
            [await payee1.getAddress(), await payee1.getAddress()],
          )`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:186:27-186:40: `.getAddress()`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:186:55-186:68: `.getAddress()`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:187:26-187:39: `.getAddress()`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:187:53-187:66: `.getAddress()`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:194:7-202:8: `await evmRevert(
        registry
          .connect(owner)
          .setKeepers(
            [await keeper1.getAddress(), await keeper2.getAddress()],
            [await payee1.getAddress()],
          ),
        'address lists not the same length',
      )`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:195:17-196:26: `
          .connect(owner)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:196:26-200:12: `
          .setKeepers(
            [await keeper1.getAddress(), await keeper2.getAddress()],
            [await payee1.getAddress()],
          )`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:198:27-198:40: `.getAddress()`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:198:55-198:68: `.getAddress()`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:199:26-199:39: `.getAddress()`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:203:7-211:8: `await evmRevert(
        registry
          .connect(owner)
          .setKeepers(
            [await keeper1.getAddress()],
            [await payee1.getAddress(), await payee2.getAddress()],
          ),
        'address lists not the same length',
      )`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:204:17-205:26: `
          .connect(owner)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:205:26-209:12: `
          .setKeepers(
            [await keeper1.getAddress()],
            [await payee1.getAddress(), await payee2.getAddress()],
          )`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:207:27-207:40: `.getAddress()`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:208:26-208:39: `.getAddress()`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:208:53-208:66: `.getAddress()`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:215:7-226:8: `await evmRevert(
        registry
          .connect(owner)
          .setKeepers(
            [await keeper1.getAddress(), await keeper2.getAddress()],
            [
              await payee1.getAddress(),
              '0x0000000000000000000000000000000000000000',
            ],
          ),
        'cannot set payee to the zero address',
      )`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:216:17-217:26: `
          .connect(owner)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:217:26-224:12: `
          .setKeepers(
            [await keeper1.getAddress(), await keeper2.getAddress()],
            [
              await payee1.getAddress(),
              '0x0000000000000000000000000000000000000000',
            ],
          )`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:219:27-219:40: `.getAddress()`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:219:55-219:68: `.getAddress()`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:221:27-221:40: `.getAddress()`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:231:22-231:35: `.getAddress()`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:232:22-232:35: `.getAddress()`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:234:38-234:51: `.getAddress()`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:234:65-234:78: `.getAddress()`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:235:7-235:70: `await registry.connect(owner).setKeepers(oldKeepers, oldPayees)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:235:21-235:36: `.connect(owner)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:235:36-235:70: `.setKeepers(oldKeepers, oldPayees)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:236:50-236:66: `.getKeeperList()`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:240:22-240:35: `.getAddress()`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:241:22-241:35: `.getAddress()`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:243:38-243:51: `.getAddress()`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:243:65-243:78: `.getAddress()`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:244:32-244:47: `.connect(owner)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:244:47-244:81: `.setKeepers(newKeepers, newPayees)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:245:50-245:66: `.getKeeperList()`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:253:7-253:64: `await registry.connect(owner).setKeepers(keepers, payees)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:253:21-253:36: `.connect(owner)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:253:36-253:64: `.setKeepers(keepers, payees)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:254:7-259:10: `await registry
        .connect(owner)
        .setKeepers(
          [await keeper1.getAddress(), await keeper3.getAddress()],
          [await payee1.getAddress(), await payee3.getAddress()],
        )`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:254:21-255:24: `
        .connect(owner)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:255:24-259:10: `
        .setKeepers(
          [await keeper1.getAddress(), await keeper3.getAddress()],
          [await payee1.getAddress(), await payee3.getAddress()],
        )`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:257:25-257:38: `.getAddress()`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:257:53-257:66: `.getAddress()`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:258:24-258:37: `.getAddress()`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:258:51-258:64: `.getAddress()`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:260:35-260:77: `.getKeeperInfo(await keeper1.getAddress())`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:260:63-260:76: `.getAddress()`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:262:37-262:79: `.getKeeperInfo(await keeper2.getAddress())`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:262:65-262:78: `.getAddress()`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:268:22-268:35: `.getAddress()`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:269:22-269:35: `.getAddress()`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:271:38-271:51: `.getAddress()`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:271:65-271:78: `.getAddress()`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:272:7-272:70: `await registry.connect(owner).setKeepers(oldKeepers, oldPayees)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:272:21-272:36: `.connect(owner)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:272:36-272:70: `.setKeepers(oldKeepers, oldPayees)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:273:50-273:66: `.getKeeperList()`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:276:22-276:35: `.getAddress()`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:277:22-277:35: `.getAddress()`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:279:54-279:67: `.getAddress()`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:280:32-280:47: `.connect(owner)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:280:47-280:81: `.setKeepers(newKeepers, newPayees)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:281:50-281:66: `.getKeeperList()`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:283:37-283:79: `.getKeeperInfo(await keeper2.getAddress())`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:283:65-283:78: `.getAddress()`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:284:32-284:45: `.getAddress()`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:293:7-293:64: `await registry.connect(owner).setKeepers(keepers, payees)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:293:21-293:36: `.connect(owner)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:293:36-293:64: `.setKeepers(keepers, payees)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:294:7-303:8: `await evmRevert(
        registry
          .connect(owner)
          .setKeepers(keepers, [
            await payee1.getAddress(),
            await payee2.getAddress(),
            await owner.getAddress(),
          ]),
        'cannot change payee',
      )`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:295:17-296:26: `
          .connect(owner)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:296:26-301:13: `
          .setKeepers(keepers, [
            await payee1.getAddress(),
            await payee2.getAddress(),
            await owner.getAddress(),
          ])`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:298:25-298:38: `.getAddress()`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:299:25-299:38: `.getAddress()`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:300:24-300:37: `.getAddress()`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:309:7-319:8: `await evmRevert(
        registry
          .connect(owner)
          .registerUpkeep(
            zeroAddress,
            executeGas,
            await admin.getAddress(),
            emptyBytes,
          ),
        'target is not a contract',
      )`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:310:17-311:26: `
          .connect(owner)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:311:26-317:12: `
          .registerUpkeep(
            zeroAddress,
            executeGas,
            await admin.getAddress(),
            emptyBytes,
          )`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:315:24-315:37: `.getAddress()`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:323:7-333:8: `await evmRevert(
        registry
          .connect(keeper1)
          .registerUpkeep(
            mock.address,
            executeGas,
            await admin.getAddress(),
            emptyBytes,
          ),
        'Only callable by owner or registrar',
      )`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:324:17-325:28: `
          .connect(keeper1)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:325:28-331:12: `
          .registerUpkeep(
            mock.address,
            executeGas,
            await admin.getAddress(),
            emptyBytes,
          )`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:329:24-329:37: `.getAddress()`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:337:7-347:8: `await evmRevert(
        registry
          .connect(owner)
          .registerUpkeep(
            mock.address,
            2299,
            await admin.getAddress(),
            emptyBytes,
          ),
        'min gas is 2300',
      )`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:338:17-339:26: `
          .connect(owner)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:339:26-345:12: `
          .registerUpkeep(
            mock.address,
            2299,
            await admin.getAddress(),
            emptyBytes,
          )`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:343:24-343:37: `.getAddress()`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:351:7-361:8: `await evmRevert(
        registry
          .connect(owner)
          .registerUpkeep(
            mock.address,
            5000001,
            await admin.getAddress(),
            emptyBytes,
          ),
        'max gas is 5000000',
      )`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:352:17-353:26: `
          .connect(owner)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:353:26-359:12: `
          .registerUpkeep(
            mock.address,
            5000001,
            await admin.getAddress(),
            emptyBytes,
          )`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:357:24-357:37: `.getAddress()`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:365:32-366:24: `
        .connect(owner)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:366:24-372:10: `
        .registerUpkeep(
          mock.address,
          executeGas,
          await admin.getAddress(),
          emptyBytes,
        )`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:370:22-370:35: `.getAddress()`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:373:7-373:33: `id = await getUpkeepID(tx)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:377:42-377:56: `.getUpkeep(id)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:379:35-379:54: `.balance.toNumber()`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:381:26-381:71: `.maxValidBlocknumber.eq('0xffffffffffffffff')`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:393:7-396:8: `await evmRevert(
        registry.connect(keeper1).addFunds(id.add(1), amount),
        'upkeep must be active',
      )`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:394:17-394:34: `.connect(keeper1)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:394:34-394:62: `.addFunds(id.add(1), amount)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:394:46-394:53: `.add(1)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:400:7-400:59: `await registry.connect(keeper1).addFunds(id, amount)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:400:21-400:38: `.connect(keeper1)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:400:38-400:59: `.addFunds(id, amount)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:401:42-401:56: `.getUpkeep(id)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:402:27-402:52: `.eq(registration.balance)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:406:32-406:49: `.connect(keeper1)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:406:49-406:70: `.addFunds(id, amount)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:413:7-413:53: `await registry.connect(admin).cancelUpkeep(id)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:413:21-413:36: `.connect(admin)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:413:36-413:53: `.cancelUpkeep(id)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:414:7-417:8: `await evmRevert(
        registry.connect(keeper1).addFunds(id, amount),
        'upkeep must be active',
      )`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:415:17-415:34: `.connect(keeper1)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:415:34-415:55: `.addFunds(id, amount)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:423:7-423:37: `await mock.setCanPerform(true)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:423:17-423:37: `.setCanPerform(true)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:424:7-424:35: `await mock.setCanCheck(true)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:424:17-424:35: `.setCanCheck(true)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:425:7-430:8: `await evmRevert(
        registry
          .connect(zeroAddress)
          .callStatic.checkUpkeep(id, await keeper1.getAddress()),
        'insufficient funds',
      )`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:426:17-427:32: `
          .connect(zeroAddress)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:427:32-428:66: `
          .callStatic.checkUpkeep(id, await keeper1.getAddress())`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:428:52-428:65: `.getAddress()`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:440:9-440:39: `await mock.setCanPerform(true)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:440:19-440:39: `.setCanPerform(true)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:441:9-441:37: `await mock.setCanCheck(true)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:441:19-441:37: `.setCanCheck(true)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:442:9-445:10: `await evmRevert(
          registry.checkUpkeep(id, await keeper1.getAddress()),
          'only for simulated backend',
        )`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:443:19-443:63: `.checkUpkeep(id, await keeper1.getAddress())`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:443:49-443:62: `.getAddress()`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:449:9-449:39: `await mock.setCanPerform(true)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:449:19-449:39: `.setCanPerform(true)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:450:9-450:37: `await mock.setCanCheck(true)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:450:19-450:37: `.setCanCheck(true)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:451:9-454:10: `await evmRevert(
          registry.checkUpkeep(id, await owner.getAddress()),
          'only for simulated backend',
        )`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:452:19-452:61: `.checkUpkeep(id, await owner.getAddress())`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:452:47-452:60: `.getAddress()`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:463:11-468:12: `await evmRevert(
            registry
              .connect(zeroAddress)
              .callStatic.checkUpkeep(id, await keeper1.getAddress()),
            'upkeep not needed',
          )`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:464:21-465:36: `
              .connect(zeroAddress)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:465:36-466:70: `
              .callStatic.checkUpkeep(id, await keeper1.getAddress())`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:466:56-466:69: `.getAddress()`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:491:11-496:12: `await evmRevert(
            registry
              .connect(zeroAddress)
              .callStatic.checkUpkeep(id, await keeper1.getAddress()),
            'call to check target failed',
          )`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:492:21-493:36: `
              .connect(zeroAddress)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:493:36-494:70: `
              .callStatic.checkUpkeep(id, await keeper1.getAddress())`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:494:56-494:69: `.getAddress()`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:512:13-517:14: `await evmRevert(
              registry
                .connect(zeroAddress)
                .callStatic.checkUpkeep(id, await keeper1.getAddress()),
              'Pausable: paused',
            )`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:513:23-514:38: `
                .connect(zeroAddress)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:514:38-515:72: `
                .callStatic.checkUpkeep(id, await keeper1.getAddress())`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:515:58-515:71: `.getAddress()`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:519:13-519:52: `await registry.connect(owner).unpause()`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:519:27-519:42: `.connect(owner)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:519:42-519:52: `.unpause()`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:521:13-523:70: `await registry
              .connect(zeroAddress)
              .callStatic.checkUpkeep(id, await keeper1.getAddress())`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:521:27-522:36: `
              .connect(zeroAddress)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:522:36-523:70: `
              .callStatic.checkUpkeep(id, await keeper1.getAddress())`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:523:56-523:69: `.getAddress()`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:528:45-528:54: `.from(10)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:529:11-540:14: `await registry
            .connect(owner)
            .setConfig(
              paymentPremiumPPB,
              flatFeeMicroLink,
              blockCountPerTurn,
              maxCheckGas,
              stalenessSeconds,
              newGasMultiplier,
              fallbackGasPrice,
              fallbackLinkPrice,
            )`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:529:25-530:28: `
            .connect(owner)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:530:28-540:14: `
            .setConfig(
              paymentPremiumPPB,
              flatFeeMicroLink,
              blockCountPerTurn,
              maxCheckGas,
              stalenessSeconds,
              newGasMultiplier,
              fallbackGasPrice,
              fallbackLinkPrice,
            )`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:541:42-542:34: `
            .connect(zeroAddress)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:542:34-543:68: `
            .callStatic.checkUpkeep(id, await keeper1.getAddress())`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:543:54-543:67: `.getAddress()`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:544:33-544:57: `.gasLimit.eq(executeGas)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:545:33-545:53: `.linkEth.eq(linkEth)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:547:21-547:69: `.adjustedGasWei.eq(gasWei.mul(newGasMultiplier))`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:547:46-547:68: `.mul(newGasMultiplier)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:550:21-552:14: `.maxLinkPayment.eq(
              linkForGas(executeGas.toNumber()).mul(newGasMultiplier),
            )`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:551:48-551:70: `.mul(newGasMultiplier)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:557:11-557:52: `await mock.setCheckGasToBurn(maxCheckGas)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:557:21-557:52: `.setCheckGasToBurn(maxCheckGas)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:558:11-558:53: `await mock.setPerformGasToBurn(executeGas)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:558:21-558:53: `.setPerformGasToBurn(executeGas)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:559:34-560:29: `
            .add(executeGas)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:560:29-561:39: `
            .add(PERFORM_GAS_OVERHEAD)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:561:39-562:37: `
            .add(CHECK_GAS_OVERHEAD)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:563:11-567:15: `await registry
            .connect(zeroAddress)
            .callStatic.checkUpkeep(id, await keeper1.getAddress(), {
              gasLimit: gas,
            })`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:563:25-564:34: `
            .connect(zeroAddress)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:564:34-567:15: `
            .callStatic.checkUpkeep(id, await keeper1.getAddress(), {
              gasLimit: gas,
            })`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:565:54-565:67: `.getAddress()`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:589:7-592:8: `await evmRevert(
        registry.connect(keeper2).performUpkeep(id, '0x'),
        'insufficient funds',
      )`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:590:17-590:34: `.connect(keeper2)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:590:34-590:58: `.performUpkeep(id, '0x')`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:602:40-603:32: `
          .connect(zeroAddress)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:603:32-604:40: `
          .callStatic.checkUpkeep('0x')`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:607:9-607:64: `await registry.connect(keeper3).performUpkeep(id, '0x')`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:607:23-607:40: `.connect(keeper3)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:607:40-607:64: `.performUpkeep(id, '0x')`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:611:40-612:32: `
          .connect(zeroAddress)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:612:32-613:40: `
          .callStatic.checkUpkeep('0x')`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:617:25-617:42: `.connect(keeper1)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:617:42-617:77: `.callStatic.performUpkeep(id, '0x')`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:622:9-622:39: `await mock.setCanPerform(true)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:622:19-622:39: `.setCanPerform(true)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:624:40-625:28: `
          .connect(keeper1)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:625:28-626:46: `
          .callStatic.performUpkeep(id, '0x')`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:631:9-631:39: `await mock.setCanPerform(true)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:631:19-631:39: `.setCanPerform(true)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:633:9-637:10: `await evmRevert(
          registry
            .connect(keeper1)
            .performUpkeep(id, '0x', { gasLimit: BigNumber.from('120000') }),
        )`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:634:19-635:30: `
            .connect(keeper1)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:635:30-636:77: `
            .performUpkeep(id, '0x', { gasLimit: BigNumber.from('120000') })`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:636:59-636:74: `.from('120000')`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:641:9-641:39: `await mock.setCanPerform(true)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:641:19-641:39: `.setCanPerform(true)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:644:34-645:28: `
          .connect(keeper1)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:645:28-646:66: `
          .performUpkeep(id, performData, { gasLimit: extraGas })`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:647:33-647:40: `.wait()`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:654:60-654:73: `.getAddress()`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:660:44-662:10: `.getKeeperInfo(
          await keeper1.getAddress(),
        )`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:661:24-661:37: `.getAddress()`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:663:50-663:64: `.getUpkeep(id)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:664:49-666:10: `.balanceOf(
          await keeper1.getAddress(),
        )`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:665:24-665:37: `.getAddress()`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:667:51-667:79: `.balanceOf(registry.address)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:670:9-670:64: `await registry.connect(keeper1).performUpkeep(id, '0x')`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:670:23-670:40: `.connect(keeper1)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:670:40-670:64: `.performUpkeep(id, '0x')`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:672:43-674:10: `.getKeeperInfo(
          await keeper1.getAddress(),
        )`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:673:24-673:37: `.getAddress()`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:675:49-675:63: `.getUpkeep(id)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:676:48-678:10: `.balanceOf(
          await keeper1.getAddress(),
        )`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:677:24-677:37: `.getAddress()`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:679:50-679:78: `.balanceOf(registry.address)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:681:34-681:67: `.balance.gt(keeperBefore.balance)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:682:41-682:79: `.balance.gt(registrationAfter.balance)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:683:38-683:59: `.eq(keeperLinkBefore)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:684:41-684:63: `.eq(registryLinkAfter)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:689:25-689:67: `.getKeeperInfo(await keeper1.getAddress())`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:689:53-689:66: `.getAddress()`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:691:34-691:51: `.connect(keeper1)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:691:51-691:75: `.performUpkeep(id, '0x')`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:692:33-692:40: `.wait()`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:693:38-693:80: `.getKeeperInfo(await keeper1.getAddress())`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:693:66-693:79: `.getAddress()`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:697:43-697:62: `.gasUsed.toNumber()`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:698:33-698:45: `.sub(before)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:699:26-699:38: `.gt(totalTx)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:700:30-700:45: `.gt(difference)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:701:39-701:54: `.lt(difference)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:702:39-702:54: `.gt(difference)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:706:37-706:46: `.from(10)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:707:35-707:54: `.from('1000000000')`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:708:9-719:12: `await registry
          .connect(owner)
          .setConfig(
            paymentPremiumPPB,
            flatFeeMicroLink,
            blockCountPerTurn,
            maxCheckGas,
            stalenessSeconds,
            multiplier,
            fallbackGasPrice,
            fallbackLinkPrice,
          )`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:708:23-709:26: `
          .connect(owner)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:709:26-719:12: `
          .setConfig(
            paymentPremiumPPB,
            flatFeeMicroLink,
            blockCountPerTurn,
            maxCheckGas,
            stalenessSeconds,
            multiplier,
            fallbackGasPrice,
            fallbackLinkPrice,
          )`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:722:25-722:67: `.getKeeperInfo(await keeper1.getAddress())`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:722:53-722:66: `.getAddress()`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:724:34-725:28: `
          .connect(keeper1)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:725:28-726:49: `
          .performUpkeep(id, '0x', { gasPrice })`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:727:33-727:40: `.wait()`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:728:38-728:80: `.getKeeperInfo(await keeper1.getAddress())`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:728:66-728:79: `.getAddress()`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:731:43-731:59: `.mul(multiplier)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:732:52-732:68: `.mul(multiplier)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:733:33-733:45: `.sub(before)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:734:26-734:38: `.gt(totalTx)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:735:30-735:45: `.gt(difference)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:736:39-736:55: `.mul(multiplier)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:736:55-736:70: `.lt(difference)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:737:39-737:55: `.mul(multiplier)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:737:55-737:70: `.gt(difference)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:741:37-741:46: `.from(10)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:742:35-742:45: `.from(200)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:743:46-743:54: `.from(2)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:744:9-755:12: `await registry
          .connect(owner)
          .setConfig(
            paymentPremiumPPB,
            flatFeeMicroLink,
            blockCountPerTurn,
            maxCheckGas,
            stalenessSeconds,
            multiplier,
            fallbackGasPrice,
            fallbackLinkPrice,
          )`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:744:23-745:26: `
          .connect(owner)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:745:26-755:12: `
          .setConfig(
            paymentPremiumPPB,
            flatFeeMicroLink,
            blockCountPerTurn,
            maxCheckGas,
            stalenessSeconds,
            multiplier,
            fallbackGasPrice,
            fallbackLinkPrice,
          )`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:758:25-758:67: `.getKeeperInfo(await keeper1.getAddress())`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:758:53-758:66: `.getAddress()`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:760:34-761:28: `
          .connect(keeper1)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:761:28-762:49: `
          .performUpkeep(id, '0x', { gasPrice })`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:763:33-763:40: `.wait()`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:764:38-764:80: `.getKeeperInfo(await keeper1.getAddress())`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:764:66-764:79: `.getAddress()`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:767:54-767:79: `.mul(effectiveMultiplier)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:768:52-768:77: `.mul(effectiveMultiplier)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:769:33-769:45: `.sub(before)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:770:26-770:38: `.gt(totalTx)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:771:30-771:45: `.gt(difference)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:772:39-772:64: `.mul(effectiveMultiplier)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:772:64-772:79: `.lt(difference)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:773:39-773:64: `.mul(effectiveMultiplier)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:773:64-773:79: `.gt(difference)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:777:34-778:26: `
          .connect(owner)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:778:26-784:12: `
          .registerUpkeep(
            mock.address,
            executeGas,
            await admin.getAddress(),
            emptyBytes,
          )`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:782:24-782:37: `.getAddress()`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:786:9-786:79: `await linkToken.connect(owner).approve(registry.address, toWei('100'))`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:786:24-786:39: `.connect(owner)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:786:39-786:79: `.approve(registry.address, toWei('100'))`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:787:9-787:65: `await registry.connect(owner).addFunds(id, toWei('100'))`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:787:23-787:38: `.connect(owner)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:787:38-787:65: `.addFunds(id, toWei('100'))`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:789:25-789:67: `.getKeeperInfo(await keeper1.getAddress())`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:789:53-789:66: `.getAddress()`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:793:9-793:64: `await registry.connect(keeper1).performUpkeep(id, '0x')`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:793:23-793:40: `.connect(keeper1)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:793:40-793:64: `.performUpkeep(id, '0x')`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:796:25-796:67: `.getKeeperInfo(await keeper1.getAddress())`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:796:53-796:66: `.getAddress()`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:798:41-798:65: `.gt(keeperBalanceBefore)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:802:9-805:10: `await evmRevert(
          registry.connect(nonkeeper).performUpkeep(id, '0x'),
          'only active keepers',
        )`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:803:19-803:38: `.connect(nonkeeper)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:803:38-803:62: `.performUpkeep(id, '0x')`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:809:9-809:39: `await mock.setCanPerform(true)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:809:19-809:39: `.setCanPerform(true)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:811:9-811:55: `await registry.connect(owner).cancelUpkeep(id)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:811:23-811:38: `.connect(owner)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:811:38-811:55: `.cancelUpkeep(id)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:813:9-816:10: `await evmRevert(
          registry.connect(keeper1).performUpkeep(id, '0x'),
          'invalid upkeep id',
        )`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:814:19-814:36: `.connect(keeper1)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:814:36-814:60: `.performUpkeep(id, '0x')`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:825:9-827:66: `await gasPriceFeed
          .connect(owner)
          .updateRoundData(roundId, answer, updatedAt, startedAt)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:825:27-826:26: `
          .connect(owner)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:826:26-827:66: `
          .updateRoundData(roundId, answer, updatedAt, startedAt)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:829:35-829:59: `.lt(amountWithStaleFeed)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:835:31-835:56: `.floor(Date.now() / 1000)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:835:42-835:48: `.now()`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:837:9-839:64: `await gasPriceFeed
          .connect(owner)
          .updateRoundData(roundId, -100, updatedAt, startedAt)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:837:27-838:26: `
          .connect(owner)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:838:26-839:64: `
          .updateRoundData(roundId, -100, updatedAt, startedAt)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:841:9-843:61: `await gasPriceFeed
          .connect(owner)
          .updateRoundData(roundId, 0, updatedAt, startedAt)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:841:27-842:26: `
          .connect(owner)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:842:26-843:61: `
          .updateRoundData(roundId, 0, updatedAt, startedAt)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:845:35-845:62: `.lt(amountWithNegativeFeed)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:846:35-846:58: `.lt(amountWithZeroFeed)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:855:9-857:66: `await linkEthFeed
          .connect(owner)
          .updateRoundData(roundId, answer, updatedAt, startedAt)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:855:26-856:26: `
          .connect(owner)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:856:26-857:66: `
          .updateRoundData(roundId, answer, updatedAt, startedAt)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:859:35-859:59: `.lt(amountWithStaleFeed)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:865:31-865:56: `.floor(Date.now() / 1000)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:865:42-865:48: `.now()`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:867:9-869:64: `await linkEthFeed
          .connect(owner)
          .updateRoundData(roundId, -100, updatedAt, startedAt)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:867:26-868:26: `
          .connect(owner)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:868:26-869:64: `
          .updateRoundData(roundId, -100, updatedAt, startedAt)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:871:9-873:61: `await linkEthFeed
          .connect(owner)
          .updateRoundData(roundId, 0, updatedAt, startedAt)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:871:26-872:26: `
          .connect(owner)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:872:26-873:61: `
          .updateRoundData(roundId, 0, updatedAt, startedAt)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:875:35-875:62: `.lt(amountWithNegativeFeed)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:876:35-876:58: `.lt(amountWithZeroFeed)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:880:9-880:64: `await registry.connect(keeper1).performUpkeep(id, '0x')`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:880:23-880:40: `.connect(keeper1)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:880:40-880:64: `.performUpkeep(id, '0x')`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:881:9-884:10: `await evmRevert(
          registry.connect(keeper1).performUpkeep(id, '0x'),
          'keepers must take turns',
        )`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:882:19-882:36: `.connect(keeper1)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:882:36-882:60: `.performUpkeep(id, '0x')`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:885:9-885:64: `await registry.connect(keeper2).performUpkeep(id, '0x')`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:885:23-885:40: `.connect(keeper2)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:885:40-885:64: `.performUpkeep(id, '0x')`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:886:9-889:10: `await evmRevert(
          registry.connect(keeper2).performUpkeep(id, '0x'),
          'keepers must take turns',
        )`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:887:19-887:36: `.connect(keeper2)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:887:36-887:60: `.performUpkeep(id, '0x')`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:890:9-890:64: `await registry.connect(keeper1).performUpkeep(id, '0x')`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:890:23-890:40: `.connect(keeper1)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:890:40-890:64: `.performUpkeep(id, '0x')`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:894:9-894:51: `await mock.setPerformGasToBurn(executeGas)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:894:19-894:51: `.setPerformGasToBurn(executeGas)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:895:9-895:39: `await mock.setCanPerform(true)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:895:19-895:39: `.setCanPerform(true)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:896:31-896:57: `.add(PERFORM_GAS_OVERHEAD)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:898:34-899:28: `
          .connect(keeper1)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:899:28-900:61: `
          .performUpkeep(id, performData, { gasLimit: gas })`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:901:33-901:40: `.wait()`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:908:60-908:73: `.getAddress()`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:922:7-927:8: `await evmRevert(
        registry
          .connect(owner)
          .withdrawFunds(id.add(1).toNumber(), await payee1.getAddress()),
        'only callable by admin',
      )`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:923:17-924:26: `
          .connect(owner)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:924:26-925:74: `
          .withdrawFunds(id.add(1).toNumber(), await payee1.getAddress())`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:925:28-925:35: `.add(1)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:925:60-925:73: `.getAddress()`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:931:7-934:8: `await evmRevert(
        registry.connect(admin).withdrawFunds(id, await payee1.getAddress()),
        'upkeep must be canceled',
      )`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:932:17-932:32: `.connect(admin)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:932:32-932:77: `.withdrawFunds(id, await payee1.getAddress())`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:932:63-932:76: `.getAddress()`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:938:7-941:8: `await evmRevert(
        registry.connect(admin).withdrawFunds(id, zeroAddress),
        'cannot send to zero address',
      )`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:939:17-939:32: `.connect(admin)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:939:32-939:63: `.withdrawFunds(id, zeroAddress)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:950:45-952:10: `.balanceOf(
          await payee1.getAddress(),
        )`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:951:23-951:36: `.getAddress()`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:953:47-953:75: `.balanceOf(registry.address)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:955:42-955:56: `.getUpkeep(id)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:956:33-956:58: `.eq(registration.balance)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:958:9-960:56: `await registry
          .connect(admin)
          .withdrawFunds(id, await payee1.getAddress())`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:958:23-959:26: `
          .connect(admin)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:959:26-960:56: `
          .withdrawFunds(id, await payee1.getAddress())`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:960:42-960:55: `.getAddress()`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:962:44-962:81: `.balanceOf(await payee1.getAddress())`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:962:67-962:80: `.getAddress()`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:963:46-963:74: `.balanceOf(registry.address)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:965:35-965:51: `.add(toWei('1'))`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:965:51-965:67: `.eq(payee1After)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:966:37-966:53: `.sub(toWei('1'))`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:966:53-966:71: `.eq(registryAfter)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:968:9-968:52: `registration = await registry.getUpkeep(id)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:968:38-968:52: `.getUpkeep(id)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:969:37-969:56: `.balance.toNumber()`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:976:7-979:8: `await evmRevert(
        registry.connect(owner).cancelUpkeep(id.add(1).toNumber()),
        'too late to cancel upkeep',
      )`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:977:17-977:32: `.connect(owner)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:977:32-977:67: `.cancelUpkeep(id.add(1).toNumber())`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:977:48-977:55: `.add(1)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:983:7-986:8: `await evmRevert(
        registry.connect(keeper1).cancelUpkeep(id),
        'only owner or admin',
      )`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:984:17-984:34: `.connect(keeper1)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:984:34-984:51: `.cancelUpkeep(id)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:991:34-991:49: `.connect(owner)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:991:49-991:66: `.cancelUpkeep(id)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:992:33-992:40: `.wait()`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:993:44-993:58: `.getUpkeep(id)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:995:23-995:54: `.maxValidBlocknumber.toNumber()`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1001:34-1001:49: `.connect(owner)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1001:49-1001:66: `.cancelUpkeep(id)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1002:33-1002:40: `.wait()`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1009:38-1009:73: `.callStatic.getCanceledUpkeepList()`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1012:9-1012:55: `await registry.connect(owner).cancelUpkeep(id)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1012:23-1012:38: `.connect(owner)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1012:38-1012:55: `.cancelUpkeep(id)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1014:9-1014:69: `canceled = await registry.callStatic.getCanceledUpkeepList()`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1014:34-1014:69: `.callStatic.getCanceledUpkeepList()`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1019:9-1019:55: `await registry.connect(owner).cancelUpkeep(id)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1019:23-1019:38: `.connect(owner)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1019:38-1019:55: `.cancelUpkeep(id)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1021:9-1024:10: `await evmRevert(
          registry.connect(keeper2).performUpkeep(id, '0x'),
          'invalid upkeep id',
        )`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1022:19-1022:36: `.connect(keeper2)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1022:36-1022:60: `.performUpkeep(id, '0x')`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1028:9-1028:55: `await registry.connect(owner).cancelUpkeep(id)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1028:23-1028:38: `.connect(owner)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1028:38-1028:55: `.cancelUpkeep(id)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1029:9-1032:10: `await evmRevert(
          registry.connect(owner).cancelUpkeep(id),
          'too late to cancel upkeep',
        )`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1030:19-1030:34: `.connect(owner)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1030:34-1030:51: `.cancelUpkeep(id)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1045:11-1045:57: `await registry.connect(owner).cancelUpkeep(id)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1045:25-1045:40: `.connect(owner)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1045:40-1045:57: `.cancelUpkeep(id)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1047:46-1047:60: `.getUpkeep(id)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1049:38-1049:56: `.lt(oldExpiration)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1058:34-1058:49: `.connect(admin)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1058:49-1058:66: `.cancelUpkeep(id)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1059:33-1059:40: `.wait()`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1060:44-1060:58: `.getUpkeep(id)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1062:23-1062:54: `.maxValidBlocknumber.toNumber()`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1068:34-1068:49: `.connect(admin)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1068:49-1068:66: `.cancelUpkeep(id)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1069:33-1069:40: `.wait()`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1076:38-1076:73: `.callStatic.getCanceledUpkeepList()`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1079:9-1079:55: `await registry.connect(admin).cancelUpkeep(id)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1079:23-1079:38: `.connect(admin)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1079:38-1079:55: `.cancelUpkeep(id)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1081:9-1081:69: `canceled = await registry.callStatic.getCanceledUpkeepList()`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1081:34-1081:69: `.callStatic.getCanceledUpkeepList()`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1086:9-1086:79: `await linkToken.connect(owner).approve(registry.address, toWei('100'))`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1086:24-1086:39: `.connect(owner)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1086:39-1086:79: `.approve(registry.address, toWei('100'))`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1087:9-1087:65: `await registry.connect(owner).addFunds(id, toWei('100'))`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1087:23-1087:38: `.connect(owner)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1087:38-1087:65: `.addFunds(id, toWei('100'))`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1088:9-1088:55: `await registry.connect(admin).cancelUpkeep(id)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1088:23-1088:38: `.connect(admin)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1088:38-1088:55: `.cancelUpkeep(id)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1089:9-1089:64: `await registry.connect(keeper2).performUpkeep(id, '0x')`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1089:23-1089:40: `.connect(keeper2)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1089:40-1089:64: `.performUpkeep(id, '0x')`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1092:11-1092:53: `await ethers.provider.send('evm_mine', [])`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1092:23-1092:53: `.provider.send('evm_mine', [])`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1095:9-1098:10: `await evmRevert(
          registry.connect(keeper2).performUpkeep(id, '0x'),
          'invalid upkeep id',
        )`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1096:19-1096:36: `.connect(keeper2)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1096:36-1096:60: `.performUpkeep(id, '0x')`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1102:9-1102:55: `await registry.connect(admin).cancelUpkeep(id)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1102:23-1102:38: `.connect(admin)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1102:38-1102:55: `.cancelUpkeep(id)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1104:9-1107:10: `await evmRevert(
          registry.connect(admin).cancelUpkeep(id),
          'too late to cancel upkeep',
        )`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1105:19-1105:34: `.connect(admin)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1105:34-1105:51: `.cancelUpkeep(id)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1111:9-1111:55: `await registry.connect(admin).cancelUpkeep(id)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1111:23-1111:38: `.connect(admin)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1111:38-1111:55: `.cancelUpkeep(id)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1113:9-1113:55: `await registry.connect(owner).cancelUpkeep(id)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1113:23-1113:38: `.connect(owner)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1113:38-1113:55: `.cancelUpkeep(id)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1115:40-1115:75: `.callStatic.getCanceledUpkeepList()`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1120:9-1120:55: `await registry.connect(admin).cancelUpkeep(id)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1120:23-1120:38: `.connect(admin)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1120:38-1120:55: `.cancelUpkeep(id)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1123:11-1123:53: `await ethers.provider.send('evm_mine', [])`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1123:23-1123:53: `.provider.send('evm_mine', [])`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1126:9-1129:10: `await evmRevert(
          registry.connect(owner).cancelUpkeep(id),
          'too late to cancel upkeep',
        )`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1127:19-1127:34: `.connect(owner)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1127:34-1127:51: `.cancelUpkeep(id)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1142:7-1150:8: `await evmRevert(
        registry
          .connect(payee2)
          .withdrawPayment(
            await keeper1.getAddress(),
            await nonkeeper.getAddress(),
          ),
        'only callable by payee',
      )`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1143:17-1144:27: `
          .connect(payee2)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1144:27-1148:12: `
          .withdrawPayment(
            await keeper1.getAddress(),
            await nonkeeper.getAddress(),
          )`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1146:26-1146:39: `.getAddress()`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1147:28-1147:41: `.getAddress()`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1154:7-1159:8: `await evmRevert(
        registry
          .connect(payee2)
          .withdrawPayment(await keeper1.getAddress(), zeroAddress),
        'cannot send to zero address',
      )`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1155:17-1156:27: `
          .connect(payee2)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1156:27-1157:68: `
          .withdrawPayment(await keeper1.getAddress(), zeroAddress)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1157:41-1157:54: `.getAddress()`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1163:33-1163:46: `.getAddress()`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1165:23-1165:65: `.getKeeperInfo(await keeper1.getAddress())`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1165:51-1165:64: `.getAddress()`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1167:49-1167:63: `.getUpkeep(id)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1168:43-1168:57: `.balanceOf(to)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1169:49-1169:77: `.balanceOf(registry.address)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1172:7-1174:57: `await registry
        .connect(payee1)
        .withdrawPayment(await keeper1.getAddress(), to)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1172:21-1173:25: `
        .connect(payee1)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1173:25-1174:57: `
        .withdrawPayment(await keeper1.getAddress(), to)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1174:39-1174:52: `.getAddress()`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1177:23-1177:65: `.getKeeperInfo(await keeper1.getAddress())`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1177:51-1177:64: `.getAddress()`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1179:48-1179:62: `.getUpkeep(id)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1180:42-1180:56: `.balanceOf(to)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1181:48-1181:76: `.balanceOf(registry.address)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1183:32-1183:54: `.eq(BigNumber.from(0))`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1183:45-1183:53: `.from(0)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1184:39-1184:61: `.eq(registrationAfter)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1185:33-1185:51: `.add(keeperBefore)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1185:51-1185:67: `.eq(toLinkAfter)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1186:39-1186:57: `.sub(keeperBefore)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1186:57-1186:79: `.eq(registryLinkAfter)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1190:38-1190:80: `.getKeeperInfo(await keeper1.getAddress())`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1190:66-1190:79: `.getAddress()`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1192:32-1193:25: `
        .connect(payee1)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1193:25-1197:10: `
        .withdrawPayment(
          await keeper1.getAddress(),
          await nonkeeper.getAddress(),
        )`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1195:24-1195:37: `.getAddress()`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1196:26-1196:39: `.getAddress()`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1211:7-1219:8: `await evmRevert(
        registry
          .connect(payee2)
          .transferPayeeship(
            await keeper1.getAddress(),
            await payee2.getAddress(),
          ),
        'only callable by payee',
      )`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1212:17-1213:27: `
          .connect(payee2)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1213:27-1217:12: `
          .transferPayeeship(
            await keeper1.getAddress(),
            await payee2.getAddress(),
          )`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1215:26-1215:39: `.getAddress()`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1216:25-1216:38: `.getAddress()`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1223:7-1231:8: `await evmRevert(
        registry
          .connect(payee1)
          .transferPayeeship(
            await keeper1.getAddress(),
            await payee1.getAddress(),
          ),
        'cannot transfer to self',
      )`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1224:17-1225:27: `
          .connect(payee1)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1225:27-1229:12: `
          .transferPayeeship(
            await keeper1.getAddress(),
            await payee1.getAddress(),
          )`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1227:26-1227:39: `.getAddress()`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1228:25-1228:38: `.getAddress()`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1235:7-1240:10: `await registry
        .connect(payee1)
        .transferPayeeship(
          await keeper1.getAddress(),
          await payee2.getAddress(),
        )`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1235:21-1236:25: `
        .connect(payee1)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1236:25-1240:10: `
        .transferPayeeship(
          await keeper1.getAddress(),
          await payee2.getAddress(),
        )`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1238:24-1238:37: `.getAddress()`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1239:23-1239:36: `.getAddress()`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1242:34-1242:76: `.getKeeperInfo(await keeper1.getAddress())`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1242:62-1242:75: `.getAddress()`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1243:32-1243:45: `.getAddress()`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1247:32-1248:25: `
        .connect(payee1)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1248:25-1252:10: `
        .transferPayeeship(
          await keeper1.getAddress(),
          await payee2.getAddress(),
        )`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1250:24-1250:37: `.getAddress()`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1251:23-1251:36: `.getAddress()`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1263:7-1268:10: `await registry
        .connect(payee1)
        .transferPayeeship(
          await keeper1.getAddress(),
          await payee2.getAddress(),
        )`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1263:21-1264:25: `
        .connect(payee1)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1264:25-1268:10: `
        .transferPayeeship(
          await keeper1.getAddress(),
          await payee2.getAddress(),
        )`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1266:24-1266:37: `.getAddress()`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1267:23-1267:36: `.getAddress()`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1270:32-1271:25: `
        .connect(payee1)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1271:25-1275:10: `
        .transferPayeeship(
          await keeper1.getAddress(),
          await payee2.getAddress(),
        )`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1273:24-1273:37: `.getAddress()`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1274:23-1274:36: `.getAddress()`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1276:31-1276:38: `.wait()`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1292:7-1295:8: `await evmRevert(
        registry.connect(payee1).acceptPayeeship(await keeper1.getAddress()),
        'only callable by proposed payee',
      )`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1293:17-1293:33: `.connect(payee1)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1293:33-1293:77: `.acceptPayeeship(await keeper1.getAddress())`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1293:63-1293:76: `.getAddress()`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1299:32-1300:25: `
        .connect(payee2)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1300:25-1301:53: `
        .acceptPayeeship(await keeper1.getAddress())`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1301:39-1301:52: `.getAddress()`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1312:7-1312:81: `await registry.connect(payee2).acceptPayeeship(await keeper1.getAddress())`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1312:21-1312:37: `.connect(payee2)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1312:37-1312:81: `.acceptPayeeship(await keeper1.getAddress())`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1312:67-1312:80: `.getAddress()`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1314:34-1314:76: `.getKeeperInfo(await keeper1.getAddress())`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1314:62-1314:75: `.getAddress()`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1315:32-1315:45: `.getAddress()`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1330:7-1344:8: `await evmRevert(
        registry
          .connect(payee1)
          .setConfig(
            payment,
            flatFee,
            checks,
            maxGas,
            staleness,
            gasCeilingMultiplier,
            fbGasEth,
            fbLinkEth,
          ),
        'Only callable by owner',
      )`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1331:17-1332:27: `
          .connect(payee1)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1332:27-1342:12: `
          .setConfig(
            payment,
            flatFee,
            checks,
            maxGas,
            staleness,
            gasCeilingMultiplier,
            fbGasEth,
            fbLinkEth,
          )`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1348:33-1348:45: `.getConfig()`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1349:40-1349:53: `.getFlatFee()`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1350:38-1350:64: `.eq(old.paymentPremiumPPB)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1351:37-1351:52: `.eq(oldFlatFee)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1352:38-1352:64: `.eq(old.blockCountPerTurn)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1353:37-1353:62: `.eq(old.stalenessSeconds)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1354:41-1354:70: `.eq(old.gasCeilingMultiplier)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1356:7-1367:10: `await registry
        .connect(owner)
        .setConfig(
          payment,
          flatFee,
          checks,
          maxGas,
          staleness,
          ceiling,
          fbGasEth,
          fbLinkEth,
        )`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1356:21-1357:24: `
        .connect(owner)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1357:24-1367:10: `
        .setConfig(
          payment,
          flatFee,
          checks,
          maxGas,
          staleness,
          ceiling,
          fbGasEth,
          fbLinkEth,
        )`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1369:37-1369:49: `.getConfig()`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1370:40-1370:53: `.getFlatFee()`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1377:27-1377:55: `.fallbackGasPrice.toNumber()`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1378:27-1378:56: `.fallbackLinkPrice.toNumber()`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1382:32-1383:24: `
        .connect(owner)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1383:24-1393:10: `
        .setConfig(
          payment,
          flatFee,
          checks,
          maxGas,
          staleness,
          ceiling,
          fbGasEth,
          fbLinkEth,
        )`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1412:26-1415:8: `.utils.defaultAbiCoder.encode(
        ['uint256'],
        [id.toNumber().toString()],
      )`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1417:7-1422:8: `await evmRevert(
        registry
          .connect(keeper1)
          .onTokenTransfer(await keeper1.getAddress(), amount, data),
        'only callable through LINK',
      )`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1418:17-1419:28: `
          .connect(keeper1)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1419:28-1420:69: `
          .onTokenTransfer(await keeper1.getAddress(), amount, data)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1420:41-1420:54: `.getAddress()`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1426:30-1429:8: `.utils.defaultAbiCoder.encode(
        ['uint256', 'uint256'],
        ['33', '34'],
      )`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1432:7-1436:8: `await evmRevert(
        linkToken
          .connect(owner)
          .transferAndCall(registry.address, amount, longData),
      )`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1433:18-1434:26: `
          .connect(owner)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1434:26-1435:63: `
          .transferAndCall(registry.address, amount, longData)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1437:7-1441:8: `await evmRevert(
        linkToken
          .connect(owner)
          .transferAndCall(registry.address, amount, shortData),
      )`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1438:18-1439:26: `
          .connect(owner)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1439:26-1440:64: `
          .transferAndCall(registry.address, amount, shortData)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1445:7-1445:53: `await registry.connect(admin).cancelUpkeep(id)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1445:21-1445:36: `.connect(admin)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1445:36-1445:53: `.cancelUpkeep(id)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1446:7-1449:8: `await evmRevert(
        registry.connect(keeper1).addFunds(id, amount),
        'upkeep must be active',
      )`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1447:17-1447:34: `.connect(keeper1)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1447:34-1447:55: `.addFunds(id, amount)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1453:26-1456:8: `.utils.defaultAbiCoder.encode(
        ['uint256'],
        [id.toNumber().toString()],
      )`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1458:37-1458:51: `.getUpkeep(id)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1459:7-1461:57: `await linkToken
        .connect(owner)
        .transferAndCall(registry.address, amount, data)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1459:22-1460:24: `
        .connect(owner)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1460:24-1461:57: `
        .transferAndCall(registry.address, amount, data)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1462:36-1462:50: `.getUpkeep(id)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1464:27-1464:39: `.add(amount)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1464:39-1464:49: `.eq(after)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1542:7-1545:8: `await evmRevert(
        registry.connect(keeper1).recoverFunds(),
        'Only callable by owner',
      )`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1543:17-1543:34: `.connect(keeper1)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1543:34-1543:49: `.recoverFunds()`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1549:44-1549:72: `.balanceOf(registry.address)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1551:7-1551:50: `await linkToken.balanceOf(registry.address)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1551:22-1551:50: `.balanceOf(registry.address)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1553:7-1553:51: `await registry.connect(owner).recoverFunds()`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1553:21-1553:36: `.connect(owner)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1553:36-1553:51: `.recoverFunds()`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1554:43-1554:71: `.balanceOf(registry.address)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1555:34-1555:61: `.eq(balanceAfter.add(sent))`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1555:50-1555:60: `.add(sent)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1561:7-1564:8: `await evmRevert(
        registry.connect(keeper1).pause(),
        'Only callable by owner',
      )`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1562:17-1562:34: `.connect(keeper1)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1562:34-1562:42: `.pause()`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1568:36-1568:45: `.paused()`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1570:7-1570:44: `await registry.connect(owner).pause()`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1570:21-1570:36: `.connect(owner)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1570:36-1570:44: `.pause()`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1572:35-1572:44: `.paused()`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1582:7-1585:8: `await evmRevert(
        registry.connect(keeper1).unpause(),
        'Only callable by owner',
      )`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1583:17-1583:34: `.connect(keeper1)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1583:34-1583:44: `.unpause()`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1589:35-1589:44: `.paused()`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1591:7-1591:46: `await registry.connect(owner).unpause()`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1591:21-1591:36: `.connect(owner)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1591:36-1591:46: `.unpause()`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1593:36-1593:45: `.paused()`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1608:13-1619:16: `await registry
              .connect(owner)
              .setConfig(
                premium,
                flatFee,
                blockCountPerTurn,
                maxCheckGas,
                stalenessSeconds,
                gasCeilingMultiplier,
                fallbackGasPrice,
                fallbackLinkPrice,
              )`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1608:27-1609:30: `
              .connect(owner)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1609:30-1619:16: `
              .setConfig(
                premium,
                flatFee,
                blockCountPerTurn,
                maxCheckGas,
                stalenessSeconds,
                gasCeilingMultiplier,
                fallbackGasPrice,
                fallbackLinkPrice,
              )`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1620:41-1620:66: `.getMaxPaymentForGas(gas)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1635:7-1646:10: `await registry
        .connect(owner)
        .setConfig(
          paymentPremiumPPB,
          flatFee,
          blockCountPerTurn,
          maxCheckGas,
          stalenessSeconds,
          multiplier,
          fallbackGasPrice,
          fallbackLinkPrice,
        )`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1635:21-1636:24: `
        .connect(owner)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1636:24-1646:10: `
        .setConfig(
          paymentPremiumPPB,
          flatFee,
          blockCountPerTurn,
          maxCheckGas,
          stalenessSeconds,
          multiplier,
          fallbackGasPrice,
          fallbackLinkPrice,
        )`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1647:7-1647:77: `await linkToken.connect(owner).approve(registry.address, toWei('100'))`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1647:22-1647:37: `.connect(owner)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1647:37-1647:77: `.approve(registry.address, toWei('100'))`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1649:33-1650:24: `
        .connect(owner)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1650:24-1656:10: `
        .registerUpkeep(
          mock.address,
          executeGas,
          await admin.getAddress(),
          emptyBytes,
        )`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1654:22-1654:35: `.getAddress()`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1658:33-1659:24: `
        .connect(owner)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1659:24-1665:10: `
        .registerUpkeep(
          mock.address,
          executeGas,
          await admin.getAddress(),
          emptyBytes,
        )`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1663:22-1663:35: `.getAddress()`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1667:7-1667:35: `await mock.setCanCheck(true)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1667:17-1667:35: `.setCanCheck(true)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1668:7-1668:37: `await mock.setCanPerform(true)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1668:17-1668:37: `.setCanPerform(true)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1670:42-1670:74: `.getMaxPaymentForGas(executeGas)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1670:75-1672:8: `.sub(
        1,
      )`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1673:41-1673:73: `.getMaxPaymentForGas(executeGas)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1674:7-1674:69: `await registry.connect(owner).addFunds(upkeepID1, minBalance1)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1674:21-1674:36: `.connect(owner)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1674:36-1674:69: `.addFunds(upkeepID1, minBalance1)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1675:7-1675:69: `await registry.connect(owner).addFunds(upkeepID2, minBalance2)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1675:21-1675:36: `.connect(owner)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1675:36-1675:69: `.addFunds(upkeepID2, minBalance2)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1677:7-1683:8: `await evmRevert(
        registry
          .connect(zeroAddress)
          .callStatic.checkUpkeep(upkeepID1, await keeper1.getAddress(), {
            gasPrice: callGasPrice,
          }),
      )`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1678:17-1679:32: `
          .connect(zeroAddress)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1679:32-1682:13: `
          .callStatic.checkUpkeep(upkeepID1, await keeper1.getAddress(), {
            gasPrice: callGasPrice,
          })`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1680:59-1680:72: `.getAddress()`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1684:7-1688:11: `await registry
        .connect(zeroAddress)
        .callStatic.checkUpkeep(upkeepID2, await keeper1.getAddress(), {
          gasPrice: callGasPrice,
        })`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1684:21-1685:30: `
        .connect(zeroAddress)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1685:30-1688:11: `
        .callStatic.checkUpkeep(upkeepID2, await keeper1.getAddress(), {
          gasPrice: callGasPrice,
        })`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1686:57-1686:70: `.getAddress()`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1690:7-1695:8: `await evmRevert(
        registry
          .connect(keeper1)
          .performUpkeep(upkeepID1, performData, { gasLimit: extraGas }),
        'insufficient funds',
      )`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1691:17-1692:28: `
          .connect(keeper1)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1692:28-1693:73: `
          .performUpkeep(upkeepID1, performData, { gasLimit: extraGas })`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1696:7-1698:71: `await registry
        .connect(keeper1)
        .performUpkeep(upkeepID2, performData, { gasLimit: extraGas })`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1696:21-1697:26: `
        .connect(keeper1)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1697:26-1698:71: `
        .performUpkeep(upkeepID2, performData, { gasLimit: extraGas })`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1704:31-1704:41: `.from('1')`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1705:7-1705:79: `await linkToken.connect(keeper1).approve(registry.address, toWei('100'))`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1705:22-1705:39: `.connect(keeper1)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1705:39-1705:79: `.approve(registry.address, toWei('100'))`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1706:7-1706:35: `await mock.setCanCheck(true)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1706:17-1706:35: `.setCanCheck(true)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1707:7-1707:37: `await mock.setCanPerform(true)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1707:17-1707:37: `.setCanPerform(true)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1708:40-1708:67: `.getMinBalanceForUpkeep(id)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1709:32-1709:44: `.sub(oneWei)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1710:7-1710:59: `await registry.connect(keeper1).addFunds(id, tooLow)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1710:21-1710:38: `.connect(keeper1)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1710:38-1710:59: `.addFunds(id, tooLow)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1711:7-1716:8: `await evmRevert(
        registry
          .connect(zeroAddress)
          .callStatic.checkUpkeep(id, await keeper1.getAddress()),
        'insufficient funds',
      )`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1712:17-1713:32: `
          .connect(zeroAddress)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1713:32-1714:66: `
          .callStatic.checkUpkeep(id, await keeper1.getAddress())`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1714:52-1714:65: `.getAddress()`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1717:7-1717:59: `await registry.connect(keeper1).addFunds(id, oneWei)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1717:21-1717:38: `.connect(keeper1)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1717:38-1717:59: `.addFunds(id, oneWei)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1718:7-1720:64: `await registry
        .connect(zeroAddress)
        .callStatic.checkUpkeep(id, await keeper1.getAddress())`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1718:21-1719:30: `
        .connect(zeroAddress)`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1719:30-1720:64: `
        .callStatic.checkUpkeep(id, await keeper1.getAddress())`
$DIR/contracts/test/v0.7/KeeperRegistry1_1.test.ts:1720:50-1720:63: `.getAddress()`
$DIR/contracts/test/v0.7/Operator.test.ts:114:5-141:7: `publicAbi(operator, [
      'acceptAuthorizedReceivers',
      'acceptOwnableContracts',
      'cancelOracleRequest',
      'cancelOracleRequestByRequester',
      'distributeFunds',
      'fulfillOracleRequest',
      'fulfillOracleRequest2',
      'getAuthorizedSenders',
      'getChainlinkToken',
      'getExpiryTime',
      'isAuthorizedSender',
      'onTokenTransfer',
      'operatorRequest',
      'oracleRequest',
      'ownerForward',
      'ownerTransferAndCall',
      'setAuthorizedSenders',
      'setAuthorizedSendersOn',
      'transferOwnableContracts',
      'typeAndVersion',
      'withdraw',
      'withdrawable',
      // Ownable methods:
      'acceptOwnership',
      'owner',
      'transferOwnership',
    ])`
$DIR/contracts/test/v0.7/Operator.test.ts:146:34-146:51: `.typeAndVersion()`
$DIR/contracts/test/v0.7/Operator.test.ts:162:9-167:10: `await evmRevert(
          operator
            .connect(owner)
            .transferOwnableContracts([forwarder1.address], operator.address),
          'Cannot transfer to self',
        )`
$DIR/contracts/test/v0.7/Operator.test.ts:163:19-164:28: `
            .connect(owner)`
$DIR/contracts/test/v0.7/Operator.test.ts:164:28-165:78: `
            .transferOwnableContracts([forwarder1.address], operator.address)`
$DIR/contracts/test/v0.7/Operator.test.ts:171:34-172:26: `
          .connect(owner)`
$DIR/contracts/test/v0.7/Operator.test.ts:172:26-176:12: `
          .transferOwnableContracts(
            [forwarder1.address, forwarder2.address],
            await roles.oracleNode1.getAddress(),
          )`
$DIR/contracts/test/v0.7/Operator.test.ts:175:24-175:49: `.oracleNode1.getAddress()`
$DIR/contracts/test/v0.7/Operator.test.ts:177:33-177:40: `.wait()`
$DIR/contracts/test/v0.7/Operator.test.ts:183:50-183:75: `.oracleNode1.getAddress()`
$DIR/contracts/test/v0.7/Operator.test.ts:188:50-188:75: `.oracleNode1.getAddress()`
$DIR/contracts/test/v0.7/Operator.test.ts:194:9-202:10: `await evmRevert(
          operator
            .connect(roles.stranger)
            .transferOwnableContracts(
              [forwarder1.address],
              await roles.oracleNode2.getAddress(),
            ),
          'Only callable by owner',
        )`
$DIR/contracts/test/v0.7/Operator.test.ts:195:19-196:37: `
            .connect(roles.stranger)`
$DIR/contracts/test/v0.7/Operator.test.ts:196:37-200:14: `
            .transferOwnableContracts(
              [forwarder1.address],
              await roles.oracleNode2.getAddress(),
            )`
$DIR/contracts/test/v0.7/Operator.test.ts:199:26-199:51: `.oracleNode2.getAddress()`
$DIR/contracts/test/v0.7/Operator.test.ts:235:38-235:46: `.owner()`
$DIR/contracts/test/v0.7/Operator.test.ts:259:9-261:72: `await operator
          .connect(roles.defaultAccount)
          .setAuthorizedSenders([await roles.oracleNode1.getAddress()])`
$DIR/contracts/test/v0.7/Operator.test.ts:259:23-260:41: `
          .connect(roles.defaultAccount)`
$DIR/contracts/test/v0.7/Operator.test.ts:260:41-261:72: `
          .setAuthorizedSenders([await roles.oracleNode1.getAddress()])`
$DIR/contracts/test/v0.7/Operator.test.ts:261:45-261:70: `.oracleNode1.getAddress()`
$DIR/contracts/test/v0.7/Operator.test.ts:263:9-263:77: `await operator.connect(roles.oracleNode1).acceptOwnableContracts([])`
$DIR/contracts/test/v0.7/Operator.test.ts:263:23-263:50: `.connect(roles.oracleNode1)`
$DIR/contracts/test/v0.7/Operator.test.ts:263:50-263:77: `.acceptOwnableContracts([])`
$DIR/contracts/test/v0.7/Operator.test.ts:269:9-274:10: `await evmRevert(
          operator
            .connect(roles.stranger)
            .acceptOwnableContracts([await roles.oracleNode2.getAddress()]),
          'Cannot set authorized senders',
        )`
$DIR/contracts/test/v0.7/Operator.test.ts:270:19-271:37: `
            .connect(roles.stranger)`
$DIR/contracts/test/v0.7/Operator.test.ts:271:37-272:76: `
            .acceptOwnableContracts([await roles.oracleNode2.getAddress()])`
$DIR/contracts/test/v0.7/Operator.test.ts:272:49-272:74: `.oracleNode2.getAddress()`
$DIR/contracts/test/v0.7/Operator.test.ts:282:9-285:10: `await evmRevert(
          operator.connect(roles.defaultAccount).distributeFunds([], []),
          'Invalid array length(s)',
        )`
$DIR/contracts/test/v0.7/Operator.test.ts:283:19-283:49: `.connect(roles.defaultAccount)`
$DIR/contracts/test/v0.7/Operator.test.ts:283:49-283:73: `.distributeFunds([], [])`
$DIR/contracts/test/v0.7/Operator.test.ts:292:22-292:47: `.oracleNode2.getAddress()`
$DIR/contracts/test/v0.7/Operator.test.ts:293:22-293:47: `.oracleNode3.getAddress()`
$DIR/contracts/test/v0.7/Operator.test.ts:296:9-301:10: `await evmRevert(
          operator
            .connect(roles.defaultAccount)
            .distributeFunds(receivers, amounts),
          'Invalid array length(s)',
        )`
$DIR/contracts/test/v0.7/Operator.test.ts:297:19-298:43: `
            .connect(roles.defaultAccount)`
$DIR/contracts/test/v0.7/Operator.test.ts:298:43-299:49: `
            .distributeFunds(receivers, amounts)`
$DIR/contracts/test/v0.7/Operator.test.ts:309:9-320:10: `await evmRevert(
          operator
            .connect(roles.defaultAccount)
            .distributeFunds(
              [await roles.oracleNode2.getAddress()],
              [amountToSend],
              {
                value: ethSent,
              },
            ),
          'SafeMath: subtraction overflow',
        )`
$DIR/contracts/test/v0.7/Operator.test.ts:310:19-311:43: `
            .connect(roles.defaultAccount)`
$DIR/contracts/test/v0.7/Operator.test.ts:311:43-318:14: `
            .distributeFunds(
              [await roles.oracleNode2.getAddress()],
              [amountToSend],
              {
                value: ethSent,
              },
            )`
$DIR/contracts/test/v0.7/Operator.test.ts:313:27-313:52: `.oracleNode2.getAddress()`
$DIR/contracts/test/v0.7/Operator.test.ts:328:9-339:10: `await evmRevert(
          operator
            .connect(roles.defaultAccount)
            .distributeFunds(
              [await roles.oracleNode2.getAddress()],
              [amountToSend],
              {
                value: ethSent,
              },
            ),
          'Too much ETH sent',
        )`
$DIR/contracts/test/v0.7/Operator.test.ts:329:19-330:43: `
            .connect(roles.defaultAccount)`
$DIR/contracts/test/v0.7/Operator.test.ts:330:43-337:14: `
            .distributeFunds(
              [await roles.oracleNode2.getAddress()],
              [amountToSend],
              {
                value: ethSent,
              },
            )`
$DIR/contracts/test/v0.7/Operator.test.ts:332:27-332:52: `.oracleNode2.getAddress()`
$DIR/contracts/test/v0.7/Operator.test.ts:345:47-345:72: `.oracleNode2.getBalance()`
$DIR/contracts/test/v0.7/Operator.test.ts:346:47-346:72: `.oracleNode3.getBalance()`
$DIR/contracts/test/v0.7/Operator.test.ts:348:22-348:47: `.oracleNode2.getAddress()`
$DIR/contracts/test/v0.7/Operator.test.ts:349:22-349:47: `.oracleNode3.getAddress()`
$DIR/contracts/test/v0.7/Operator.test.ts:356:9-358:71: `await operator
          .connect(roles.defaultAccount)
          .distributeFunds(receivers, amounts, { value: totalAmount })`
$DIR/contracts/test/v0.7/Operator.test.ts:356:23-357:41: `
          .connect(roles.defaultAccount)`
$DIR/contracts/test/v0.7/Operator.test.ts:357:41-358:71: `
          .distributeFunds(receivers, amounts, { value: totalAmount })`
$DIR/contracts/test/v0.7/Operator.test.ts:360:46-360:71: `.oracleNode2.getBalance()`
$DIR/contracts/test/v0.7/Operator.test.ts:361:46-361:71: `.oracleNode3.getBalance()`
$DIR/contracts/test/v0.7/Operator.test.ts:364:28-364:52: `.sub(node2BalanceBefore)`
$DIR/contracts/test/v0.7/Operator.test.ts:369:28-369:52: `.sub(node3BalanceBefore)`
$DIR/contracts/test/v0.7/Operator.test.ts:394:51-394:74: `.getAuthorizedSenders()`
$DIR/contracts/test/v0.7/Operator.test.ts:404:41-407:12: `.utils.defaultAbiCoder.encode(
            ['address[]', 'address'],
            [newSenders, await roles.defaultAccount.getAddress()],
          )`
$DIR/contracts/test/v0.7/Operator.test.ts:406:37-406:65: `.defaultAccount.getAddress()`
$DIR/contracts/test/v0.7/Operator.test.ts:415:55-416:43: `
            .connect(roles.defaultAccount)`
$DIR/contracts/test/v0.7/Operator.test.ts:416:43-417:69: `
            .isAuthorizedSender(await roles.oracleNode.getAddress())`
$DIR/contracts/test/v0.7/Operator.test.ts:417:44-417:68: `.oracleNode.getAddress()`
$DIR/contracts/test/v0.7/Operator.test.ts:434:11-439:12: `await evmRevert(
            operator
              .connect(roles.defaultAccount)
              .setAuthorizedSenders(newSenders),
            'Must have at least 1 authorized sender',
          )`
$DIR/contracts/test/v0.7/Operator.test.ts:435:21-436:45: `
              .connect(roles.defaultAccount)`
$DIR/contracts/test/v0.7/Operator.test.ts:436:45-437:48: `
              .setAuthorizedSenders(newSenders)`
$DIR/contracts/test/v0.7/Operator.test.ts:453:9-455:69: `await operator
          .connect(roles.defaultAccount)
          .setAuthorizedSenders([await roles.stranger.getAddress()])`
$DIR/contracts/test/v0.7/Operator.test.ts:453:23-454:41: `
          .connect(roles.defaultAccount)`
$DIR/contracts/test/v0.7/Operator.test.ts:454:41-455:69: `
          .setAuthorizedSenders([await roles.stranger.getAddress()])`
$DIR/contracts/test/v0.7/Operator.test.ts:455:45-455:67: `.stranger.getAddress()`
$DIR/contracts/test/v0.7/Operator.test.ts:461:9-466:10: `await evmRevert(
          operator
            .connect(roles.stranger)
            .setAuthorizedSenders([await roles.stranger.getAddress()]),
          'Cannot set authorized senders',
        )`
$DIR/contracts/test/v0.7/Operator.test.ts:462:19-463:37: `
            .connect(roles.stranger)`
$DIR/contracts/test/v0.7/Operator.test.ts:463:37-464:71: `
            .setAuthorizedSenders([await roles.stranger.getAddress()])`
$DIR/contracts/test/v0.7/Operator.test.ts:464:47-464:69: `.stranger.getAddress()`
$DIR/contracts/test/v0.7/Operator.test.ts:493:9-498:10: `await evmRevert(
          operator
            .connect(roles.stranger)
            .setAuthorizedSendersOn(newSenders, [forwarder1.address]),
          'Cannot set authorized senders',
        )`
$DIR/contracts/test/v0.7/Operator.test.ts:494:19-495:37: `
            .connect(roles.stranger)`
$DIR/contracts/test/v0.7/Operator.test.ts:495:37-496:70: `
            .setAuthorizedSendersOn(newSenders, [forwarder1.address])`
$DIR/contracts/test/v0.7/Operator.test.ts:504:9-509:12: `await operator
          .connect(roles.defaultAccount)
          .setAuthorizedSendersOn(
            [forwarder1.address, forwarder2.address],
            newSenders,
          )`
$DIR/contracts/test/v0.7/Operator.test.ts:504:23-505:41: `
          .connect(roles.defaultAccount)`
$DIR/contracts/test/v0.7/Operator.test.ts:505:41-509:12: `
          .setAuthorizedSendersOn(
            [forwarder1.address, forwarder2.address],
            newSenders,
          )`
$DIR/contracts/test/v0.7/Operator.test.ts:515:9-520:12: `await operator
          .connect(roles.oracleNode1)
          .setAuthorizedSendersOn(
            [forwarder1.address, forwarder2.address],
            newSenders,
          )`
$DIR/contracts/test/v0.7/Operator.test.ts:515:23-516:38: `
          .connect(roles.oracleNode1)`
$DIR/contracts/test/v0.7/Operator.test.ts:516:38-520:12: `
          .setAuthorizedSendersOn(
            [forwarder1.address, forwarder2.address],
            newSenders,
          )`
$DIR/contracts/test/v0.7/Operator.test.ts:524:9-529:12: `await operator
          .connect(roles.oracleNode1)
          .setAuthorizedSendersOn(
            [forwarder1.address, forwarder2.address],
            newSenders,
          )`
$DIR/contracts/test/v0.7/Operator.test.ts:524:23-525:38: `
          .connect(roles.oracleNode1)`
$DIR/contracts/test/v0.7/Operator.test.ts:525:38-529:12: `
          .setAuthorizedSendersOn(
            [forwarder1.address, forwarder2.address],
            newSenders,
          )`
$DIR/contracts/test/v0.7/Operator.test.ts:534:34-535:38: `
          .connect(roles.oracleNode1)`
$DIR/contracts/test/v0.7/Operator.test.ts:535:38-536:55: `
          .setAuthorizedSendersOn(targets, newSenders)`
$DIR/contracts/test/v0.7/Operator.test.ts:538:33-538:40: `.wait()`
$DIR/contracts/test/v0.7/Operator.test.ts:539:35-542:10: `.utils.defaultAbiCoder.encode(
          ['address[]', 'address[]', 'address'],
          [targets, newSenders, await roles.oracleNode1.getAddress()],
        )`
$DIR/contracts/test/v0.7/Operator.test.ts:541:44-541:69: `.oracleNode1.getAddress()`
$DIR/contracts/test/v0.7/Operator.test.ts:551:34-552:38: `
          .connect(roles.oracleNode1)`
$DIR/contracts/test/v0.7/Operator.test.ts:552:38-556:12: `
          .setAuthorizedSendersOn(
            [forwarder1.address, forwarder2.address],
            newSenders,
          )`
$DIR/contracts/test/v0.7/Operator.test.ts:558:33-558:40: `.wait()`
$DIR/contracts/test/v0.7/Operator.test.ts:560:38-563:10: `.utils.defaultAbiCoder.encode(
          ['address[]', 'address'],
          [newSenders, operator.address],
        )`
$DIR/contracts/test/v0.7/Operator.test.ts:616:38-616:46: `.owner()`
$DIR/contracts/test/v0.7/Operator.test.ts:641:38-644:10: `.utils.defaultAbiCoder.encode(
          ['address[]', 'address'],
          [newSenders, operator2.address],
        )`
$DIR/contracts/test/v0.7/Operator.test.ts:657:9-665:10: `await evmRevert(
          operator
            .connect(roles.stranger)
            .acceptAuthorizedReceivers(
              [forwarder1.address, forwarder2.address],
              newSenders,
            ),
          'Cannot set authorized senders',
        )`
$DIR/contracts/test/v0.7/Operator.test.ts:658:19-659:37: `
            .connect(roles.stranger)`
$DIR/contracts/test/v0.7/Operator.test.ts:659:37-663:14: `
            .acceptAuthorizedReceivers(
              [forwarder1.address, forwarder2.address],
              newSenders,
            )`
$DIR/contracts/test/v0.7/Operator.test.ts:681:9-687:10: `await evmRevert(
          operator.onTokenTransfer(
            await roles.defaultAccount.getAddress(),
            0,
            callData,
          ),
        )`
$DIR/contracts/test/v0.7/Operator.test.ts:682:19-686:12: `.onTokenTransfer(
            await roles.defaultAccount.getAddress(),
            0,
            callData,
          )`
$DIR/contracts/test/v0.7/Operator.test.ts:683:24-683:52: `.defaultAccount.getAddress()`
$DIR/contracts/test/v0.7/Operator.test.ts:701:30-703:11: `.transferAndCall(operator.address, 0, callData, {
          value: 0,
        })`
$DIR/contracts/test/v0.7/Operator.test.ts:704:33-704:40: `.wait()`
$DIR/contracts/test/v0.7/Operator.test.ts:711:11-715:12: `await evmRevert(
            link.transferAndCall(operator.address, 0, '0x', {
              value: 0,
            }),
          )`
$DIR/contracts/test/v0.7/Operator.test.ts:712:17-714:15: `.transferAndCall(operator.address, 0, '0x', {
              value: 0,
            })`
$DIR/contracts/test/v0.7/Operator.test.ts:733:51-733:79: `.balanceOf(operator.address)`
$DIR/contracts/test/v0.7/Operator.test.ts:734:47-734:71: `.balanceOf(mock.address)`
$DIR/contracts/test/v0.7/Operator.test.ts:736:9-736:50: `await evmRevert(mock.maliciousWithdraw())`
$DIR/contracts/test/v0.7/Operator.test.ts:736:29-736:49: `.maliciousWithdraw()`
$DIR/contracts/test/v0.7/Operator.test.ts:738:46-738:74: `.balanceOf(operator.address)`
$DIR/contracts/test/v0.7/Operator.test.ts:739:42-739:66: `.balanceOf(mock.address)`
$DIR/contracts/test/v0.7/Operator.test.ts:741:9-741:66: `bigNumEquals(operatorOriginalBalance, operatorNewBalance)`
$DIR/contracts/test/v0.7/Operator.test.ts:742:9-742:58: `bigNumEquals(mockNewBalance, mockOriginalBalance)`
$DIR/contracts/test/v0.7/Operator.test.ts:747:32-747:60: `.maliciousTargetConsumer(to)`
$DIR/contracts/test/v0.7/Operator.test.ts:748:35-748:42: `.wait()`
$DIR/contracts/test/v0.7/Operator.test.ts:756:11-758:60: `requester = await basicConsumerFactory
            .connect(roles.defaultAccount)
            .deploy(link.address, operator.address, specId)`
$DIR/contracts/test/v0.7/Operator.test.ts:756:49-757:43: `
            .connect(roles.defaultAccount)`
$DIR/contracts/test/v0.7/Operator.test.ts:757:43-758:60: `
            .deploy(link.address, operator.address, specId)`
$DIR/contracts/test/v0.7/Operator.test.ts:759:11-759:64: `await link.transfer(requester.address, paymentAmount)`
$DIR/contracts/test/v0.7/Operator.test.ts:759:21-759:64: `.transfer(requester.address, paymentAmount)`
$DIR/contracts/test/v0.7/Operator.test.ts:760:11-760:64: `await mock.maliciousTargetConsumer(requester.address)`
$DIR/contracts/test/v0.7/Operator.test.ts:760:21-760:64: `.maliciousTargetConsumer(requester.address)`
$DIR/contracts/test/v0.7/Operator.test.ts:761:11-761:69: `await requester.requestEthereumPrice('USD', paymentAmount)`
$DIR/contracts/test/v0.7/Operator.test.ts:761:26-761:69: `.requestEthereumPrice('USD', paymentAmount)`
$DIR/contracts/test/v0.7/Operator.test.ts:776:24-776:64: `.interface.getSighash('onTokenTransfer')`
$DIR/contracts/test/v0.7/Operator.test.ts:783:69-783:78: `.slice(2)`
$DIR/contracts/test/v0.7/Operator.test.ts:785:7-789:8: `await evmRevert(
        link.transferAndCall(operator.address, 0, maliciousPayload, {
          value: 0,
        }),
      )`
$DIR/contracts/test/v0.7/Operator.test.ts:786:13-788:11: `.transferAndCall(operator.address, 0, maliciousPayload, {
          value: 0,
        })`
$DIR/contracts/test/v0.7/Operator.test.ts:820:33-820:61: `.defaultAccount.getAddress()`
$DIR/contracts/test/v0.7/Operator.test.ts:821:9-821:40: `bigNumEquals(paid, req.payment)`
$DIR/contracts/test/v0.7/Operator.test.ts:839:9-839:77: `await evmRevert(link.transferAndCall(operator.address, paid, args2))`
$DIR/contracts/test/v0.7/Operator.test.ts:839:29-839:76: `.transferAndCall(operator.address, paid, args2)`
$DIR/contracts/test/v0.7/Operator.test.ts:845:28-845:66: `.interface.getSighash('oracleRequest')`
$DIR/contracts/test/v0.7/Operator.test.ts:849:11-851:12: `await evmRevert(
            link.transferAndCall(operator.address, paid, maliciousData),
          )`
$DIR/contracts/test/v0.7/Operator.test.ts:850:17-850:72: `.transferAndCall(operator.address, paid, maliciousData)`
$DIR/contracts/test/v0.7/Operator.test.ts:858:28-858:66: `.interface.getSighash('oracleRequest')`
$DIR/contracts/test/v0.7/Operator.test.ts:862:11-864:12: `await evmRevert(
            link.transferAndCall(operator.address, paid, maliciousData),
          )`
$DIR/contracts/test/v0.7/Operator.test.ts:863:17-863:72: `.transferAndCall(operator.address, paid, maliciousData)`
$DIR/contracts/test/v0.7/Operator.test.ts:880:9-880:76: `await evmRevert(link.transferAndCall(operator.address, paid, args))`
$DIR/contracts/test/v0.7/Operator.test.ts:880:29-880:75: `.transferAndCall(operator.address, paid, args)`
$DIR/contracts/test/v0.7/Operator.test.ts:886:9-899:10: `await evmRevert(
          operator
            .connect(roles.oracleNode)
            .oracleRequest(
              '0x0000000000000000000000000000000000000000',
              0,
              specId,
              to,
              fHash,
              1,
              1,
              '0x',
            ),
        )`
$DIR/contracts/test/v0.7/Operator.test.ts:887:19-888:39: `
            .connect(roles.oracleNode)`
$DIR/contracts/test/v0.7/Operator.test.ts:888:39-898:14: `
            .oracleRequest(
              '0x0000000000000000000000000000000000000000',
              0,
              specId,
              to,
              fHash,
              1,
              1,
              '0x',
            )`
$DIR/contracts/test/v0.7/Operator.test.ts:930:33-930:61: `.defaultAccount.getAddress()`
$DIR/contracts/test/v0.7/Operator.test.ts:931:9-931:40: `bigNumEquals(paid, req.payment)`
$DIR/contracts/test/v0.7/Operator.test.ts:948:9-948:77: `await evmRevert(link.transferAndCall(operator.address, paid, args2))`
$DIR/contracts/test/v0.7/Operator.test.ts:948:29-948:76: `.transferAndCall(operator.address, paid, args2)`
$DIR/contracts/test/v0.7/Operator.test.ts:954:28-954:66: `.interface.getSighash('oracleRequest')`
$DIR/contracts/test/v0.7/Operator.test.ts:958:11-960:12: `await evmRevert(
            link.transferAndCall(operator.address, paid, maliciousData),
          )`
$DIR/contracts/test/v0.7/Operator.test.ts:959:17-959:72: `.transferAndCall(operator.address, paid, maliciousData)`
$DIR/contracts/test/v0.7/Operator.test.ts:967:28-967:66: `.interface.getSighash('oracleRequest')`
$DIR/contracts/test/v0.7/Operator.test.ts:971:11-973:12: `await evmRevert(
            link.transferAndCall(operator.address, paid, maliciousData),
          )`
$DIR/contracts/test/v0.7/Operator.test.ts:972:17-972:72: `.transferAndCall(operator.address, paid, maliciousData)`
$DIR/contracts/test/v0.7/Operator.test.ts:988:9-988:76: `await evmRevert(link.transferAndCall(operator.address, paid, args))`
$DIR/contracts/test/v0.7/Operator.test.ts:988:29-988:75: `.transferAndCall(operator.address, paid, args)`
$DIR/contracts/test/v0.7/Operator.test.ts:994:9-1007:10: `await evmRevert(
          operator
            .connect(roles.oracleNode)
            .oracleRequest(
              '0x0000000000000000000000000000000000000000',
              0,
              specId,
              to,
              fHash,
              1,
              1,
              '0x',
            ),
        )`
$DIR/contracts/test/v0.7/Operator.test.ts:995:19-996:39: `
            .connect(roles.oracleNode)`
$DIR/contracts/test/v0.7/Operator.test.ts:996:39-1006:14: `
            .oracleRequest(
              '0x0000000000000000000000000000000000000000',
              0,
              specId,
              to,
              fHash,
              1,
              1,
              '0x',
            )`
$DIR/contracts/test/v0.7/Operator.test.ts:1036:34-1037:37: `
          .connect(roles.oracleNode)`
$DIR/contracts/test/v0.7/Operator.test.ts:1037:37-1038:50: `
          .fulfillOracleRequest(...fulfillParams)`
$DIR/contracts/test/v0.7/Operator.test.ts:1039:33-1039:40: `.wait()`
$DIR/contracts/test/v0.7/Operator.test.ts:1074:11-1078:12: `await evmRevert(
            operator
              .connect(roles.stranger)
              .fulfillOracleRequest(...convertFufillParams(request, response)),
          )`
$DIR/contracts/test/v0.7/Operator.test.ts:1075:21-1076:39: `
              .connect(roles.stranger)`
$DIR/contracts/test/v0.7/Operator.test.ts:1076:39-1077:79: `
              .fulfillOracleRequest(...convertFufillParams(request, response))`
$DIR/contracts/test/v0.7/Operator.test.ts:1100:11-1104:12: `await evmRevert(
            operator
              .connect(roles.stranger)
              .fulfillOracleRequest(...convertFufillParams(request, response)),
          )`
$DIR/contracts/test/v0.7/Operator.test.ts:1101:21-1102:39: `
              .connect(roles.stranger)`
$DIR/contracts/test/v0.7/Operator.test.ts:1102:39-1103:79: `
              .fulfillOracleRequest(...convertFufillParams(request, response))`
$DIR/contracts/test/v0.7/Operator.test.ts:1110:11-1110:79: `request.requestId = ethers.utils.formatBytes32String('DOESNOTEXIST')`
$DIR/contracts/test/v0.7/Operator.test.ts:1110:37-1110:79: `.utils.formatBytes32String('DOESNOTEXIST')`
$DIR/contracts/test/v0.7/Operator.test.ts:1111:11-1115:12: `await evmRevert(
            operator
              .connect(roles.oracleNode)
              .fulfillOracleRequest(...convertFufillParams(request, response)),
          )`
$DIR/contracts/test/v0.7/Operator.test.ts:1112:21-1113:41: `
              .connect(roles.oracleNode)`
$DIR/contracts/test/v0.7/Operator.test.ts:1113:41-1114:79: `
              .fulfillOracleRequest(...convertFufillParams(request, response))`
$DIR/contracts/test/v0.7/Operator.test.ts:1119:11-1121:77: `await operator
            .connect(roles.oracleNode)
            .fulfillOracleRequest(...convertFufillParams(request, response))`
$DIR/contracts/test/v0.7/Operator.test.ts:1119:25-1120:39: `
            .connect(roles.oracleNode)`
$DIR/contracts/test/v0.7/Operator.test.ts:1120:39-1121:77: `
            .fulfillOracleRequest(...convertFufillParams(request, response))`
$DIR/contracts/test/v0.7/Operator.test.ts:1123:51-1123:66: `.currentPrice()`
$DIR/contracts/test/v0.7/Operator.test.ts:1124:40-1124:79: `.utils.parseBytes32String(currentValue)`
$DIR/contracts/test/v0.7/Operator.test.ts:1129:36-1130:39: `
            .connect(roles.oracleNode)`
$DIR/contracts/test/v0.7/Operator.test.ts:1130:39-1131:52: `
            .fulfillOracleRequest(...fulfillParams)`
$DIR/contracts/test/v0.7/Operator.test.ts:1132:35-1132:42: `.wait()`
$DIR/contracts/test/v0.7/Operator.test.ts:1142:11-1144:77: `await operator
            .connect(roles.oracleNode)
            .fulfillOracleRequest(...convertFufillParams(request, response))`
$DIR/contracts/test/v0.7/Operator.test.ts:1142:25-1143:39: `
            .connect(roles.oracleNode)`
$DIR/contracts/test/v0.7/Operator.test.ts:1143:39-1144:77: `
            .fulfillOracleRequest(...convertFufillParams(request, response))`
$DIR/contracts/test/v0.7/Operator.test.ts:1146:11-1150:12: `await evmRevert(
            operator
              .connect(roles.oracleNode)
              .fulfillOracleRequest(...convertFufillParams(request, response2)),
          )`
$DIR/contracts/test/v0.7/Operator.test.ts:1147:21-1148:41: `
              .connect(roles.oracleNode)`
$DIR/contracts/test/v0.7/Operator.test.ts:1148:41-1149:80: `
              .fulfillOracleRequest(...convertFufillParams(request, response2))`
$DIR/contracts/test/v0.7/Operator.test.ts:1152:51-1152:66: `.currentPrice()`
$DIR/contracts/test/v0.7/Operator.test.ts:1153:40-1153:79: `.utils.parseBytes32String(currentValue)`
$DIR/contracts/test/v0.7/Operator.test.ts:1167:11-1173:12: `await evmRevert(
            operator.connect(roles.oracleNode).fulfillOracleRequest(
              ...convertFufillParams(request, response, {
                gasLimit: 70000,
              }),
            ),
          )`
$DIR/contracts/test/v0.7/Operator.test.ts:1168:21-1168:47: `.connect(roles.oracleNode)`
$DIR/contracts/test/v0.7/Operator.test.ts:1168:47-1172:14: `.fulfillOracleRequest(
              ...convertFufillParams(request, response, {
                gasLimit: 70000,
              }),
            )`
$DIR/contracts/test/v0.7/Operator.test.ts:1175:11-1175:57: `bigNumEquals(0, await operator.withdrawable())`
$DIR/contracts/test/v0.7/Operator.test.ts:1175:41-1175:56: `.withdrawable()`
$DIR/contracts/test/v0.7/Operator.test.ts:1200:9-1205:10: `await evmRevert(
          maliciousRequester.maliciousRequestCancel(
            specId,
            ethers.utils.toUtf8Bytes('doesNothing(bytes32,bytes32)'),
          ),
        )`
$DIR/contracts/test/v0.7/Operator.test.ts:1201:29-1204:12: `.maliciousRequestCancel(
            specId,
            ethers.utils.toUtf8Bytes('doesNothing(bytes32,bytes32)'),
          )`
$DIR/contracts/test/v0.7/Operator.test.ts:1203:19-1203:69: `.utils.toUtf8Bytes('doesNothing(bytes32,bytes32)')`
$DIR/contracts/test/v0.7/Operator.test.ts:1209:9-1215:10: `await evmRevert(
          maliciousRequester.request(
            specId,
            link.address,
            ethers.utils.toUtf8Bytes('transfer(address,uint256)'),
          ),
        )`
$DIR/contracts/test/v0.7/Operator.test.ts:1210:29-1214:12: `.request(
            specId,
            link.address,
            ethers.utils.toUtf8Bytes('transfer(address,uint256)'),
          )`
$DIR/contracts/test/v0.7/Operator.test.ts:1213:19-1213:66: `.utils.toUtf8Bytes('transfer(address,uint256)')`
$DIR/contracts/test/v0.7/Operator.test.ts:1220:46-1220:69: `.maliciousPrice(specId)`
$DIR/contracts/test/v0.7/Operator.test.ts:1221:35-1221:42: `.wait()`
$DIR/contracts/test/v0.7/Operator.test.ts:1224:28-1224:44: `.eq(req.payment)`
$DIR/contracts/test/v0.7/Operator.test.ts:1250:11-1252:77: `await operator
            .connect(roles.oracleNode)
            .fulfillOracleRequest(...convertFufillParams(request, response))`
$DIR/contracts/test/v0.7/Operator.test.ts:1250:25-1251:39: `
            .connect(roles.oracleNode)`
$DIR/contracts/test/v0.7/Operator.test.ts:1251:39-1252:77: `
            .fulfillOracleRequest(...convertFufillParams(request, response))`
$DIR/contracts/test/v0.7/Operator.test.ts:1254:37-1256:12: `.balanceOf(
            await roles.oracleNode.getAddress(),
          )`
$DIR/contracts/test/v0.7/Operator.test.ts:1255:24-1255:48: `.oracleNode.getAddress()`
$DIR/contracts/test/v0.7/Operator.test.ts:1257:11-1257:35: `bigNumEquals(balance, 0)`
$DIR/contracts/test/v0.7/Operator.test.ts:1259:11-1261:74: `await operator
            .connect(roles.defaultAccount)
            .withdraw(await roles.oracleNode.getAddress(), paymentAmount)`
$DIR/contracts/test/v0.7/Operator.test.ts:1259:25-1260:43: `
            .connect(roles.defaultAccount)`
$DIR/contracts/test/v0.7/Operator.test.ts:1260:43-1261:74: `
            .withdraw(await roles.oracleNode.getAddress(), paymentAmount)`
$DIR/contracts/test/v0.7/Operator.test.ts:1261:34-1261:58: `.oracleNode.getAddress()`
$DIR/contracts/test/v0.7/Operator.test.ts:1263:40-1265:12: `.balanceOf(
            await roles.oracleNode.getAddress(),
          )`
$DIR/contracts/test/v0.7/Operator.test.ts:1264:24-1264:48: `.oracleNode.getAddress()`
$DIR/contracts/test/v0.7/Operator.test.ts:1266:11-1266:50: `bigNumEquals(paymentAmount, newBalance)`
$DIR/contracts/test/v0.7/Operator.test.ts:1272:11-1274:77: `await operator
            .connect(roles.oracleNode)
            .fulfillOracleRequest(...convertFufillParams(request, response))`
$DIR/contracts/test/v0.7/Operator.test.ts:1272:25-1273:39: `
            .connect(roles.oracleNode)`
$DIR/contracts/test/v0.7/Operator.test.ts:1273:39-1274:77: `
            .fulfillOracleRequest(...convertFufillParams(request, response))`
$DIR/contracts/test/v0.7/Operator.test.ts:1276:11-1280:12: `await evmRevert(
            operator
              .connect(roles.oracleNode)
              .fulfillOracleRequest(...convertFufillParams(request, response2)),
          )`
$DIR/contracts/test/v0.7/Operator.test.ts:1277:21-1278:41: `
              .connect(roles.oracleNode)`
$DIR/contracts/test/v0.7/Operator.test.ts:1278:41-1279:80: `
              .fulfillOracleRequest(...convertFufillParams(request, response2))`
$DIR/contracts/test/v0.7/Operator.test.ts:1296:11-1298:77: `await operator
            .connect(roles.oracleNode)
            .fulfillOracleRequest(...convertFufillParams(request, response))`
$DIR/contracts/test/v0.7/Operator.test.ts:1296:25-1297:39: `
            .connect(roles.oracleNode)`
$DIR/contracts/test/v0.7/Operator.test.ts:1297:39-1298:77: `
            .fulfillOracleRequest(...convertFufillParams(request, response))`
$DIR/contracts/test/v0.7/Operator.test.ts:1300:37-1302:12: `.balanceOf(
            await roles.oracleNode.getAddress(),
          )`
$DIR/contracts/test/v0.7/Operator.test.ts:1301:24-1301:48: `.oracleNode.getAddress()`
$DIR/contracts/test/v0.7/Operator.test.ts:1303:11-1303:35: `bigNumEquals(balance, 0)`
$DIR/contracts/test/v0.7/Operator.test.ts:1305:11-1307:74: `await operator
            .connect(roles.defaultAccount)
            .withdraw(await roles.oracleNode.getAddress(), paymentAmount)`
$DIR/contracts/test/v0.7/Operator.test.ts:1305:25-1306:43: `
            .connect(roles.defaultAccount)`
$DIR/contracts/test/v0.7/Operator.test.ts:1306:43-1307:74: `
            .withdraw(await roles.oracleNode.getAddress(), paymentAmount)`
$DIR/contracts/test/v0.7/Operator.test.ts:1307:34-1307:58: `.oracleNode.getAddress()`
$DIR/contracts/test/v0.7/Operator.test.ts:1308:40-1310:12: `.balanceOf(
            await roles.oracleNode.getAddress(),
          )`
$DIR/contracts/test/v0.7/Operator.test.ts:1309:24-1309:48: `.oracleNode.getAddress()`
$DIR/contracts/test/v0.7/Operator.test.ts:1311:11-1311:50: `bigNumEquals(paymentAmount, newBalance)`
$DIR/contracts/test/v0.7/Operator.test.ts:1328:11-1330:77: `await operator
            .connect(roles.oracleNode)
            .fulfillOracleRequest(...convertFufillParams(request, response))`
$DIR/contracts/test/v0.7/Operator.test.ts:1328:25-1329:39: `
            .connect(roles.oracleNode)`
$DIR/contracts/test/v0.7/Operator.test.ts:1329:39-1330:77: `
            .fulfillOracleRequest(...convertFufillParams(request, response))`
$DIR/contracts/test/v0.7/Operator.test.ts:1332:41-1332:78: `.balanceOf(maliciousConsumer.address)`
$DIR/contracts/test/v0.7/Operator.test.ts:1333:11-1333:39: `bigNumEquals(mockBalance, 0)`
$DIR/contracts/test/v0.7/Operator.test.ts:1335:37-1337:12: `.balanceOf(
            await roles.oracleNode.getAddress(),
          )`
$DIR/contracts/test/v0.7/Operator.test.ts:1336:24-1336:48: `.oracleNode.getAddress()`
$DIR/contracts/test/v0.7/Operator.test.ts:1338:11-1338:35: `bigNumEquals(balance, 0)`
$DIR/contracts/test/v0.7/Operator.test.ts:1340:11-1342:74: `await operator
            .connect(roles.defaultAccount)
            .withdraw(await roles.oracleNode.getAddress(), paymentAmount)`
$DIR/contracts/test/v0.7/Operator.test.ts:1340:25-1341:43: `
            .connect(roles.defaultAccount)`
$DIR/contracts/test/v0.7/Operator.test.ts:1341:43-1342:74: `
            .withdraw(await roles.oracleNode.getAddress(), paymentAmount)`
$DIR/contracts/test/v0.7/Operator.test.ts:1342:34-1342:58: `.oracleNode.getAddress()`
$DIR/contracts/test/v0.7/Operator.test.ts:1343:40-1345:12: `.balanceOf(
            await roles.oracleNode.getAddress(),
          )`
$DIR/contracts/test/v0.7/Operator.test.ts:1344:24-1344:48: `.oracleNode.getAddress()`
$DIR/contracts/test/v0.7/Operator.test.ts:1346:11-1346:50: `bigNumEquals(paymentAmount, newBalance)`
$DIR/contracts/test/v0.7/Operator.test.ts:1352:11-1354:77: `await operator
            .connect(roles.oracleNode)
            .fulfillOracleRequest(...convertFufillParams(request, response))`
$DIR/contracts/test/v0.7/Operator.test.ts:1352:25-1353:39: `
            .connect(roles.oracleNode)`
$DIR/contracts/test/v0.7/Operator.test.ts:1353:39-1354:77: `
            .fulfillOracleRequest(...convertFufillParams(request, response))`
$DIR/contracts/test/v0.7/Operator.test.ts:1356:11-1360:12: `await evmRevert(
            operator
              .connect(roles.oracleNode)
              .fulfillOracleRequest(...convertFufillParams(request, response2)),
          )`
$DIR/contracts/test/v0.7/Operator.test.ts:1357:21-1358:41: `
              .connect(roles.oracleNode)`
$DIR/contracts/test/v0.7/Operator.test.ts:1358:41-1359:80: `
              .fulfillOracleRequest(...convertFufillParams(request, response2))`
$DIR/contracts/test/v0.7/Operator.test.ts:1366:45-1369:12: `.requestData(
            specId,
            ethers.utils.toUtf8Bytes('stealEthCall(bytes32,bytes32)'),
          )`
$DIR/contracts/test/v0.7/Operator.test.ts:1368:19-1368:70: `.utils.toUtf8Bytes('stealEthCall(bytes32,bytes32)')`
$DIR/contracts/test/v0.7/Operator.test.ts:1370:35-1370:42: `.wait()`
$DIR/contracts/test/v0.7/Operator.test.ts:1371:11-1371:56: `request = decodeRunRequest(receipt.logs?.[3])`
$DIR/contracts/test/v0.7/Operator.test.ts:1373:11-1375:77: `await operator
            .connect(roles.oracleNode)
            .fulfillOracleRequest(...convertFufillParams(request, response))`
$DIR/contracts/test/v0.7/Operator.test.ts:1373:25-1374:39: `
            .connect(roles.oracleNode)`
$DIR/contracts/test/v0.7/Operator.test.ts:1374:39-1375:77: `
            .fulfillOracleRequest(...convertFufillParams(request, response))`
$DIR/contracts/test/v0.7/Operator.test.ts:1377:11-1380:12: `bigNumEquals(
            0,
            await ethers.provider.getBalance(maliciousConsumer.address),
          )`
$DIR/contracts/test/v0.7/Operator.test.ts:1379:25-1379:72: `.provider.getBalance(maliciousConsumer.address)`
$DIR/contracts/test/v0.7/Operator.test.ts:1384:45-1387:12: `.requestData(
            specId,
            ethers.utils.toUtf8Bytes('stealEthSend(bytes32,bytes32)'),
          )`
$DIR/contracts/test/v0.7/Operator.test.ts:1386:19-1386:70: `.utils.toUtf8Bytes('stealEthSend(bytes32,bytes32)')`
$DIR/contracts/test/v0.7/Operator.test.ts:1388:35-1388:42: `.wait()`
$DIR/contracts/test/v0.7/Operator.test.ts:1389:11-1389:56: `request = decodeRunRequest(receipt.logs?.[3])`
$DIR/contracts/test/v0.7/Operator.test.ts:1391:11-1393:77: `await operator
            .connect(roles.oracleNode)
            .fulfillOracleRequest(...convertFufillParams(request, response))`
$DIR/contracts/test/v0.7/Operator.test.ts:1391:25-1392:39: `
            .connect(roles.oracleNode)`
$DIR/contracts/test/v0.7/Operator.test.ts:1392:39-1393:77: `
            .fulfillOracleRequest(...convertFufillParams(request, response))`
$DIR/contracts/test/v0.7/Operator.test.ts:1394:11-1397:12: `bigNumEquals(
            0,
            await ethers.provider.getBalance(maliciousConsumer.address),
          )`
$DIR/contracts/test/v0.7/Operator.test.ts:1396:25-1396:72: `.provider.getBalance(maliciousConsumer.address)`
$DIR/contracts/test/v0.7/Operator.test.ts:1401:45-1404:12: `.requestData(
            specId,
            ethers.utils.toUtf8Bytes('stealEthTransfer(bytes32,bytes32)'),
          )`
$DIR/contracts/test/v0.7/Operator.test.ts:1403:19-1403:74: `.utils.toUtf8Bytes('stealEthTransfer(bytes32,bytes32)')`
$DIR/contracts/test/v0.7/Operator.test.ts:1405:35-1405:42: `.wait()`
$DIR/contracts/test/v0.7/Operator.test.ts:1406:11-1406:56: `request = decodeRunRequest(receipt.logs?.[3])`
$DIR/contracts/test/v0.7/Operator.test.ts:1408:11-1410:77: `await operator
            .connect(roles.oracleNode)
            .fulfillOracleRequest(...convertFufillParams(request, response))`
$DIR/contracts/test/v0.7/Operator.test.ts:1408:25-1409:39: `
            .connect(roles.oracleNode)`
$DIR/contracts/test/v0.7/Operator.test.ts:1409:39-1410:77: `
            .fulfillOracleRequest(...convertFufillParams(request, response))`
$DIR/contracts/test/v0.7/Operator.test.ts:1411:11-1414:12: `bigNumEquals(
            0,
            await ethers.provider.getBalance(maliciousConsumer.address),
          )`
$DIR/contracts/test/v0.7/Operator.test.ts:1413:25-1413:72: `.provider.getBalance(maliciousConsumer.address)`
$DIR/contracts/test/v0.7/Operator.test.ts:1426:45-1429:12: `.requestData(
            specId,
            ethers.utils.toUtf8Bytes('whatever(bytes32,bytes32)'),
          )`
$DIR/contracts/test/v0.7/Operator.test.ts:1428:19-1428:66: `.utils.toUtf8Bytes('whatever(bytes32,bytes32)')`
$DIR/contracts/test/v0.7/Operator.test.ts:1430:35-1430:42: `.wait()`
$DIR/contracts/test/v0.7/Operator.test.ts:1434:11-1434:49: `responseParams[2] = forwarder1.address`
$DIR/contracts/test/v0.7/Operator.test.ts:1437:11-1439:58: `await operator
            .connect(roles.defaultAccount)
            .acceptOwnableContracts([forwarder1.address])`
$DIR/contracts/test/v0.7/Operator.test.ts:1437:25-1438:43: `
            .connect(roles.defaultAccount)`
$DIR/contracts/test/v0.7/Operator.test.ts:1438:43-1439:58: `
            .acceptOwnableContracts([forwarder1.address])`
$DIR/contracts/test/v0.7/Operator.test.ts:1442:11-1447:12: `await evmRevert(
            operator
              .connect(roles.oracleNode)
              .fulfillOracleRequest(...responseParams),
            'Cannot call owned contract',
          )`
$DIR/contracts/test/v0.7/Operator.test.ts:1443:21-1444:41: `
              .connect(roles.oracleNode)`
$DIR/contracts/test/v0.7/Operator.test.ts:1444:41-1445:55: `
              .fulfillOracleRequest(...responseParams)`
$DIR/contracts/test/v0.7/Operator.test.ts:1449:11-1451:74: `await operator
            .connect(roles.defaultAccount)
            .transferOwnableContracts([forwarder1.address], link.address)`
$DIR/contracts/test/v0.7/Operator.test.ts:1449:25-1450:43: `
            .connect(roles.defaultAccount)`
$DIR/contracts/test/v0.7/Operator.test.ts:1450:43-1451:74: `
            .transferOwnableContracts([forwarder1.address], link.address)`
$DIR/contracts/test/v0.7/Operator.test.ts:1453:11-1458:12: `await evmRevert(
            operator
              .connect(roles.oracleNode)
              .fulfillOracleRequest(...responseParams),
            'Params do not match request ID',
          )`
$DIR/contracts/test/v0.7/Operator.test.ts:1454:21-1455:41: `
              .connect(roles.oracleNode)`
$DIR/contracts/test/v0.7/Operator.test.ts:1455:41-1456:55: `
              .fulfillOracleRequest(...responseParams)`
$DIR/contracts/test/v0.7/Operator.test.ts:1496:36-1497:39: `
            .connect(roles.oracleNode)`
$DIR/contracts/test/v0.7/Operator.test.ts:1497:39-1498:53: `
            .fulfillOracleRequest2(...fulfillParams)`
$DIR/contracts/test/v0.7/Operator.test.ts:1499:35-1499:42: `.wait()`
$DIR/contracts/test/v0.7/Operator.test.ts:1534:13-1544:14: `await evmRevert(
              operator
                .connect(roles.stranger)
                .fulfillOracleRequest2(
                  ...convertFulfill2Params(
                    request,
                    responseTypes,
                    responseValues,
                  ),
                ),
            )`
$DIR/contracts/test/v0.7/Operator.test.ts:1535:23-1536:41: `
                .connect(roles.stranger)`
$DIR/contracts/test/v0.7/Operator.test.ts:1536:41-1543:18: `
                .fulfillOracleRequest2(
                  ...convertFulfill2Params(
                    request,
                    responseTypes,
                    responseValues,
                  ),
                )`
$DIR/contracts/test/v0.7/Operator.test.ts:1550:13-1550:81: `request.requestId = ethers.utils.formatBytes32String('DOESNOTEXIST')`
$DIR/contracts/test/v0.7/Operator.test.ts:1550:39-1550:81: `.utils.formatBytes32String('DOESNOTEXIST')`
$DIR/contracts/test/v0.7/Operator.test.ts:1551:13-1561:14: `await evmRevert(
              operator
                .connect(roles.oracleNode)
                .fulfillOracleRequest2(
                  ...convertFulfill2Params(
                    request,
                    responseTypes,
                    responseValues,
                  ),
                ),
            )`
$DIR/contracts/test/v0.7/Operator.test.ts:1552:23-1553:43: `
                .connect(roles.oracleNode)`
$DIR/contracts/test/v0.7/Operator.test.ts:1553:43-1560:18: `
                .fulfillOracleRequest2(
                  ...convertFulfill2Params(
                    request,
                    responseTypes,
                    responseValues,
                  ),
                )`
$DIR/contracts/test/v0.7/Operator.test.ts:1565:13-1573:16: `await operator
              .connect(roles.oracleNode)
              .fulfillOracleRequest2(
                ...convertFulfill2Params(
                  request,
                  responseTypes,
                  responseValues,
                ),
              )`
$DIR/contracts/test/v0.7/Operator.test.ts:1565:27-1566:41: `
              .connect(roles.oracleNode)`
$DIR/contracts/test/v0.7/Operator.test.ts:1566:41-1573:16: `
              .fulfillOracleRequest2(
                ...convertFulfill2Params(
                  request,
                  responseTypes,
                  responseValues,
                ),
              )`
$DIR/contracts/test/v0.7/Operator.test.ts:1575:53-1575:68: `.currentPrice()`
$DIR/contracts/test/v0.7/Operator.test.ts:1578:21-1578:60: `.utils.parseBytes32String(currentValue)`
$DIR/contracts/test/v0.7/Operator.test.ts:1588:38-1589:41: `
              .connect(roles.oracleNode)`
$DIR/contracts/test/v0.7/Operator.test.ts:1589:41-1590:55: `
              .fulfillOracleRequest2(...fulfillParams)`
$DIR/contracts/test/v0.7/Operator.test.ts:1591:37-1591:44: `.wait()`
$DIR/contracts/test/v0.7/Operator.test.ts:1601:13-1609:16: `await operator
              .connect(roles.oracleNode)
              .fulfillOracleRequest2(
                ...convertFulfill2Params(
                  request,
                  responseTypes,
                  responseValues,
                ),
              )`
$DIR/contracts/test/v0.7/Operator.test.ts:1601:27-1602:41: `
              .connect(roles.oracleNode)`
$DIR/contracts/test/v0.7/Operator.test.ts:1602:41-1609:16: `
              .fulfillOracleRequest2(
                ...convertFulfill2Params(
                  request,
                  responseTypes,
                  responseValues,
                ),
              )`
$DIR/contracts/test/v0.7/Operator.test.ts:1611:13-1621:14: `await evmRevert(
              operator
                .connect(roles.oracleNode)
                .fulfillOracleRequest2(
                  ...convertFulfill2Params(
                    request,
                    responseTypes,
                    response2Values,
                  ),
                ),
            )`
$DIR/contracts/test/v0.7/Operator.test.ts:1612:23-1613:43: `
                .connect(roles.oracleNode)`
$DIR/contracts/test/v0.7/Operator.test.ts:1613:43-1620:18: `
                .fulfillOracleRequest2(
                  ...convertFulfill2Params(
                    request,
                    responseTypes,
                    response2Values,
                  ),
                )`
$DIR/contracts/test/v0.7/Operator.test.ts:1623:53-1623:68: `.currentPrice()`
$DIR/contracts/test/v0.7/Operator.test.ts:1626:21-1626:60: `.utils.parseBytes32String(currentValue)`
$DIR/contracts/test/v0.7/Operator.test.ts:1641:13-1652:14: `await evmRevert(
              operator.connect(roles.oracleNode).fulfillOracleRequest2(
                ...convertFulfill2Params(
                  request,
                  responseTypes,
                  responseValues,
                  {
                    gasLimit: 70000,
                  },
                ),
              ),
            )`
$DIR/contracts/test/v0.7/Operator.test.ts:1642:23-1642:49: `.connect(roles.oracleNode)`
$DIR/contracts/test/v0.7/Operator.test.ts:1642:49-1651:16: `.fulfillOracleRequest2(
                ...convertFulfill2Params(
                  request,
                  responseTypes,
                  responseValues,
                  {
                    gasLimit: 70000,
                  },
                ),
              )`
$DIR/contracts/test/v0.7/Operator.test.ts:1654:13-1654:59: `bigNumEquals(0, await operator.withdrawable())`
$DIR/contracts/test/v0.7/Operator.test.ts:1654:43-1654:58: `.withdrawable()`
$DIR/contracts/test/v0.7/Operator.test.ts:1701:48-1701:67: `.requestId.slice(2)`
$DIR/contracts/test/v0.7/Operator.test.ts:1704:47-1704:66: `.requestId.slice(2)`
$DIR/contracts/test/v0.7/Operator.test.ts:1711:20-1711:39: `.requestId.slice(2)`
$DIR/contracts/test/v0.7/Operator.test.ts:1712:20-1712:37: `.payment.slice(2)`
$DIR/contracts/test/v0.7/Operator.test.ts:1712:37-1712:55: `.padStart(64, '0')`
$DIR/contracts/test/v0.7/Operator.test.ts:1713:20-1713:42: `.callbackAddr.slice(2)`
$DIR/contracts/test/v0.7/Operator.test.ts:1713:42-1713:60: `.padStart(64, '0')`
$DIR/contracts/test/v0.7/Operator.test.ts:1714:20-1714:42: `.callbackFunc.slice(2)`
$DIR/contracts/test/v0.7/Operator.test.ts:1714:42-1714:58: `.padEnd(64, '0')`
$DIR/contracts/test/v0.7/Operator.test.ts:1715:20-1715:40: `.expiration.slice(2)`
$DIR/contracts/test/v0.7/Operator.test.ts:1715:40-1715:58: `.padStart(64, '0')`
$DIR/contracts/test/v0.7/Operator.test.ts:1724:11-1729:12: `await evmRevert(
            operator.connect(roles.oracleNode).signer.sendTransaction({
              to: operator.address,
              data,
            }),
          )`
$DIR/contracts/test/v0.7/Operator.test.ts:1725:21-1725:47: `.connect(roles.oracleNode)`
$DIR/contracts/test/v0.7/Operator.test.ts:1725:47-1728:15: `.signer.sendTransaction({
              to: operator.address,
              data,
            })`
$DIR/contracts/test/v0.7/Operator.test.ts:1743:11-1748:12: `await evmRevert(
            maliciousRequester.maliciousRequestCancel(
              specId,
              ethers.utils.toUtf8Bytes('doesNothing(bytes32,bytes32)'),
            ),
          )`
$DIR/contracts/test/v0.7/Operator.test.ts:1744:31-1747:14: `.maliciousRequestCancel(
              specId,
              ethers.utils.toUtf8Bytes('doesNothing(bytes32,bytes32)'),
            )`
$DIR/contracts/test/v0.7/Operator.test.ts:1746:21-1746:71: `.utils.toUtf8Bytes('doesNothing(bytes32,bytes32)')`
$DIR/contracts/test/v0.7/Operator.test.ts:1752:11-1758:12: `await evmRevert(
            maliciousRequester.request(
              specId,
              link.address,
              ethers.utils.toUtf8Bytes('transfer(address,uint256)'),
            ),
          )`
$DIR/contracts/test/v0.7/Operator.test.ts:1753:31-1757:14: `.request(
              specId,
              link.address,
              ethers.utils.toUtf8Bytes('transfer(address,uint256)'),
            )`
$DIR/contracts/test/v0.7/Operator.test.ts:1756:21-1756:68: `.utils.toUtf8Bytes('transfer(address,uint256)')`
$DIR/contracts/test/v0.7/Operator.test.ts:1763:48-1763:71: `.maliciousPrice(specId)`
$DIR/contracts/test/v0.7/Operator.test.ts:1764:37-1764:44: `.wait()`
$DIR/contracts/test/v0.7/Operator.test.ts:1767:30-1767:46: `.eq(req.payment)`
$DIR/contracts/test/v0.7/Operator.test.ts:1793:13-1801:16: `await operator
              .connect(roles.oracleNode)
              .fulfillOracleRequest2(
                ...convertFulfill2Params(
                  request,
                  responseTypes,
                  responseValues,
                ),
              )`
$DIR/contracts/test/v0.7/Operator.test.ts:1793:27-1794:41: `
              .connect(roles.oracleNode)`
$DIR/contracts/test/v0.7/Operator.test.ts:1794:41-1801:16: `
              .fulfillOracleRequest2(
                ...convertFulfill2Params(
                  request,
                  responseTypes,
                  responseValues,
                ),
              )`
$DIR/contracts/test/v0.7/Operator.test.ts:1803:39-1805:14: `.balanceOf(
              await roles.oracleNode.getAddress(),
            )`
$DIR/contracts/test/v0.7/Operator.test.ts:1804:26-1804:50: `.oracleNode.getAddress()`
$DIR/contracts/test/v0.7/Operator.test.ts:1806:13-1806:37: `bigNumEquals(balance, 0)`
$DIR/contracts/test/v0.7/Operator.test.ts:1808:13-1810:76: `await operator
              .connect(roles.defaultAccount)
              .withdraw(await roles.oracleNode.getAddress(), paymentAmount)`
$DIR/contracts/test/v0.7/Operator.test.ts:1808:27-1809:45: `
              .connect(roles.defaultAccount)`
$DIR/contracts/test/v0.7/Operator.test.ts:1809:45-1810:76: `
              .withdraw(await roles.oracleNode.getAddress(), paymentAmount)`
$DIR/contracts/test/v0.7/Operator.test.ts:1810:36-1810:60: `.oracleNode.getAddress()`
$DIR/contracts/test/v0.7/Operator.test.ts:1812:42-1814:14: `.balanceOf(
              await roles.oracleNode.getAddress(),
            )`
$DIR/contracts/test/v0.7/Operator.test.ts:1813:26-1813:50: `.oracleNode.getAddress()`
$DIR/contracts/test/v0.7/Operator.test.ts:1815:13-1815:52: `bigNumEquals(paymentAmount, newBalance)`
$DIR/contracts/test/v0.7/Operator.test.ts:1821:13-1829:16: `await operator
              .connect(roles.oracleNode)
              .fulfillOracleRequest2(
                ...convertFulfill2Params(
                  request,
                  responseTypes,
                  responseValues,
                ),
              )`
$DIR/contracts/test/v0.7/Operator.test.ts:1821:27-1822:41: `
              .connect(roles.oracleNode)`
$DIR/contracts/test/v0.7/Operator.test.ts:1822:41-1829:16: `
              .fulfillOracleRequest2(
                ...convertFulfill2Params(
                  request,
                  responseTypes,
                  responseValues,
                ),
              )`
$DIR/contracts/test/v0.7/Operator.test.ts:1831:13-1841:14: `await evmRevert(
              operator
                .connect(roles.oracleNode)
                .fulfillOracleRequest2(
                  ...convertFulfill2Params(
                    request,
                    responseTypes,
                    response2Values,
                  ),
                ),
            )`
$DIR/contracts/test/v0.7/Operator.test.ts:1832:23-1833:43: `
                .connect(roles.oracleNode)`
$DIR/contracts/test/v0.7/Operator.test.ts:1833:43-1840:18: `
                .fulfillOracleRequest2(
                  ...convertFulfill2Params(
                    request,
                    responseTypes,
                    response2Values,
                  ),
                )`
$DIR/contracts/test/v0.7/Operator.test.ts:1857:13-1865:16: `await operator
              .connect(roles.oracleNode)
              .fulfillOracleRequest2(
                ...convertFulfill2Params(
                  request,
                  responseTypes,
                  responseValues,
                ),
              )`
$DIR/contracts/test/v0.7/Operator.test.ts:1857:27-1858:41: `
              .connect(roles.oracleNode)`
$DIR/contracts/test/v0.7/Operator.test.ts:1858:41-1865:16: `
              .fulfillOracleRequest2(
                ...convertFulfill2Params(
                  request,
                  responseTypes,
                  responseValues,
                ),
              )`
$DIR/contracts/test/v0.7/Operator.test.ts:1867:39-1869:14: `.balanceOf(
              await roles.oracleNode.getAddress(),
            )`
$DIR/contracts/test/v0.7/Operator.test.ts:1868:26-1868:50: `.oracleNode.getAddress()`
$DIR/contracts/test/v0.7/Operator.test.ts:1870:13-1870:37: `bigNumEquals(balance, 0)`
$DIR/contracts/test/v0.7/Operator.test.ts:1872:13-1874:76: `await operator
              .connect(roles.defaultAccount)
              .withdraw(await roles.oracleNode.getAddress(), paymentAmount)`
$DIR/contracts/test/v0.7/Operator.test.ts:1872:27-1873:45: `
              .connect(roles.defaultAccount)`
$DIR/contracts/test/v0.7/Operator.test.ts:1873:45-1874:76: `
              .withdraw(await roles.oracleNode.getAddress(), paymentAmount)`
$DIR/contracts/test/v0.7/Operator.test.ts:1874:36-1874:60: `.oracleNode.getAddress()`
$DIR/contracts/test/v0.7/Operator.test.ts:1875:42-1877:14: `.balanceOf(
              await roles.oracleNode.getAddress(),
            )`
$DIR/contracts/test/v0.7/Operator.test.ts:1876:26-1876:50: `.oracleNode.getAddress()`
$DIR/contracts/test/v0.7/Operator.test.ts:1878:13-1878:52: `bigNumEquals(paymentAmount, newBalance)`
$DIR/contracts/test/v0.7/Operator.test.ts:1897:13-1905:16: `await operator
              .connect(roles.oracleNode)
              .fulfillOracleRequest2(
                ...convertFulfill2Params(
                  request,
                  responseTypes,
                  responseValues,
                ),
              )`
$DIR/contracts/test/v0.7/Operator.test.ts:1897:27-1898:41: `
              .connect(roles.oracleNode)`
$DIR/contracts/test/v0.7/Operator.test.ts:1898:41-1905:16: `
              .fulfillOracleRequest2(
                ...convertFulfill2Params(
                  request,
                  responseTypes,
                  responseValues,
                ),
              )`
$DIR/contracts/test/v0.7/Operator.test.ts:1907:43-1907:80: `.balanceOf(maliciousConsumer.address)`
$DIR/contracts/test/v0.7/Operator.test.ts:1908:13-1908:41: `bigNumEquals(mockBalance, 0)`
$DIR/contracts/test/v0.7/Operator.test.ts:1910:39-1912:14: `.balanceOf(
              await roles.oracleNode.getAddress(),
            )`
$DIR/contracts/test/v0.7/Operator.test.ts:1911:26-1911:50: `.oracleNode.getAddress()`
$DIR/contracts/test/v0.7/Operator.test.ts:1913:13-1913:37: `bigNumEquals(balance, 0)`
$DIR/contracts/test/v0.7/Operator.test.ts:1915:13-1917:76: `await operator
              .connect(roles.defaultAccount)
              .withdraw(await roles.oracleNode.getAddress(), paymentAmount)`
$DIR/contracts/test/v0.7/Operator.test.ts:1915:27-1916:45: `
              .connect(roles.defaultAccount)`
$DIR/contracts/test/v0.7/Operator.test.ts:1916:45-1917:76: `
              .withdraw(await roles.oracleNode.getAddress(), paymentAmount)`
$DIR/contracts/test/v0.7/Operator.test.ts:1917:36-1917:60: `.oracleNode.getAddress()`
$DIR/contracts/test/v0.7/Operator.test.ts:1918:42-1920:14: `.balanceOf(
              await roles.oracleNode.getAddress(),
            )`
$DIR/contracts/test/v0.7/Operator.test.ts:1919:26-1919:50: `.oracleNode.getAddress()`
$DIR/contracts/test/v0.7/Operator.test.ts:1921:13-1921:52: `bigNumEquals(paymentAmount, newBalance)`
$DIR/contracts/test/v0.7/Operator.test.ts:1928:13-1936:16: `await operator
              .connect(roles.oracleNode)
              .fulfillOracleRequest2(
                ...convertFulfill2Params(
                  request,
                  responseTypes,
                  responseValues,
                ),
              )`
$DIR/contracts/test/v0.7/Operator.test.ts:1928:27-1929:41: `
              .connect(roles.oracleNode)`
$DIR/contracts/test/v0.7/Operator.test.ts:1929:41-1936:16: `
              .fulfillOracleRequest2(
                ...convertFulfill2Params(
                  request,
                  responseTypes,
                  responseValues,
                ),
              )`
$DIR/contracts/test/v0.7/Operator.test.ts:1938:13-1948:14: `await evmRevert(
              operator
                .connect(roles.oracleNode)
                .fulfillOracleRequest2(
                  ...convertFulfill2Params(
                    request,
                    responseTypes,
                    response2Values,
                  ),
                ),
            )`
$DIR/contracts/test/v0.7/Operator.test.ts:1939:23-1940:43: `
                .connect(roles.oracleNode)`
$DIR/contracts/test/v0.7/Operator.test.ts:1940:43-1947:18: `
                .fulfillOracleRequest2(
                  ...convertFulfill2Params(
                    request,
                    responseTypes,
                    response2Values,
                  ),
                )`
$DIR/contracts/test/v0.7/Operator.test.ts:1954:47-1957:14: `.requestData(
              specId,
              ethers.utils.toUtf8Bytes('stealEthCall(bytes32,bytes32)'),
            )`
$DIR/contracts/test/v0.7/Operator.test.ts:1956:21-1956:72: `.utils.toUtf8Bytes('stealEthCall(bytes32,bytes32)')`
$DIR/contracts/test/v0.7/Operator.test.ts:1958:37-1958:44: `.wait()`
$DIR/contracts/test/v0.7/Operator.test.ts:1959:13-1959:58: `request = decodeRunRequest(receipt.logs?.[3])`
$DIR/contracts/test/v0.7/Operator.test.ts:1961:13-1969:16: `await operator
              .connect(roles.oracleNode)
              .fulfillOracleRequest2(
                ...convertFulfill2Params(
                  request,
                  responseTypes,
                  responseValues,
                ),
              )`
$DIR/contracts/test/v0.7/Operator.test.ts:1961:27-1962:41: `
              .connect(roles.oracleNode)`
$DIR/contracts/test/v0.7/Operator.test.ts:1962:41-1969:16: `
              .fulfillOracleRequest2(
                ...convertFulfill2Params(
                  request,
                  responseTypes,
                  responseValues,
                ),
              )`
$DIR/contracts/test/v0.7/Operator.test.ts:1971:13-1974:14: `bigNumEquals(
              0,
              await ethers.provider.getBalance(maliciousConsumer.address),
            )`
$DIR/contracts/test/v0.7/Operator.test.ts:1973:27-1973:74: `.provider.getBalance(maliciousConsumer.address)`
$DIR/contracts/test/v0.7/Operator.test.ts:1978:47-1981:14: `.requestData(
              specId,
              ethers.utils.toUtf8Bytes('stealEthSend(bytes32,bytes32)'),
            )`
$DIR/contracts/test/v0.7/Operator.test.ts:1980:21-1980:72: `.utils.toUtf8Bytes('stealEthSend(bytes32,bytes32)')`
$DIR/contracts/test/v0.7/Operator.test.ts:1982:37-1982:44: `.wait()`
$DIR/contracts/test/v0.7/Operator.test.ts:1983:13-1983:58: `request = decodeRunRequest(receipt.logs?.[3])`
$DIR/contracts/test/v0.7/Operator.test.ts:1985:13-1993:16: `await operator
              .connect(roles.oracleNode)
              .fulfillOracleRequest2(
                ...convertFulfill2Params(
                  request,
                  responseTypes,
                  responseValues,
                ),
              )`
$DIR/contracts/test/v0.7/Operator.test.ts:1985:27-1986:41: `
              .connect(roles.oracleNode)`
$DIR/contracts/test/v0.7/Operator.test.ts:1986:41-1993:16: `
              .fulfillOracleRequest2(
                ...convertFulfill2Params(
                  request,
                  responseTypes,
                  responseValues,
                ),
              )`
$DIR/contracts/test/v0.7/Operator.test.ts:1994:13-1997:14: `bigNumEquals(
              0,
              await ethers.provider.getBalance(maliciousConsumer.address),
            )`
$DIR/contracts/test/v0.7/Operator.test.ts:1996:27-1996:74: `.provider.getBalance(maliciousConsumer.address)`
$DIR/contracts/test/v0.7/Operator.test.ts:2001:47-2004:14: `.requestData(
              specId,
              ethers.utils.toUtf8Bytes('stealEthTransfer(bytes32,bytes32)'),
            )`
$DIR/contracts/test/v0.7/Operator.test.ts:2003:21-2003:76: `.utils.toUtf8Bytes('stealEthTransfer(bytes32,bytes32)')`
$DIR/contracts/test/v0.7/Operator.test.ts:2005:37-2005:44: `.wait()`
$DIR/contracts/test/v0.7/Operator.test.ts:2006:13-2006:58: `request = decodeRunRequest(receipt.logs?.[3])`
$DIR/contracts/test/v0.7/Operator.test.ts:2008:13-2016:16: `await operator
              .connect(roles.oracleNode)
              .fulfillOracleRequest2(
                ...convertFulfill2Params(
                  request,
                  responseTypes,
                  responseValues,
                ),
              )`
$DIR/contracts/test/v0.7/Operator.test.ts:2008:27-2009:41: `
              .connect(roles.oracleNode)`
$DIR/contracts/test/v0.7/Operator.test.ts:2009:41-2016:16: `
              .fulfillOracleRequest2(
                ...convertFulfill2Params(
                  request,
                  responseTypes,
                  responseValues,
                ),
              )`
$DIR/contracts/test/v0.7/Operator.test.ts:2017:13-2020:14: `bigNumEquals(
              0,
              await ethers.provider.getBalance(maliciousConsumer.address),
            )`
$DIR/contracts/test/v0.7/Operator.test.ts:2019:27-2019:74: `.provider.getBalance(maliciousConsumer.address)`
$DIR/contracts/test/v0.7/Operator.test.ts:2032:47-2035:14: `.requestData(
              specId,
              ethers.utils.toUtf8Bytes('whatever(bytes32,bytes32)'),
            )`
$DIR/contracts/test/v0.7/Operator.test.ts:2034:21-2034:68: `.utils.toUtf8Bytes('whatever(bytes32,bytes32)')`
$DIR/contracts/test/v0.7/Operator.test.ts:2036:37-2036:44: `.wait()`
$DIR/contracts/test/v0.7/Operator.test.ts:2040:13-2040:51: `responseParams[2] = forwarder1.address`
$DIR/contracts/test/v0.7/Operator.test.ts:2043:13-2045:60: `await operator
              .connect(roles.defaultAccount)
              .acceptOwnableContracts([forwarder1.address])`
$DIR/contracts/test/v0.7/Operator.test.ts:2043:27-2044:45: `
              .connect(roles.defaultAccount)`
$DIR/contracts/test/v0.7/Operator.test.ts:2044:45-2045:60: `
              .acceptOwnableContracts([forwarder1.address])`
$DIR/contracts/test/v0.7/Operator.test.ts:2048:13-2053:14: `await evmRevert(
              operator
                .connect(roles.oracleNode)
                .fulfillOracleRequest2(...responseParams),
              'Cannot call owned contract',
            )`
$DIR/contracts/test/v0.7/Operator.test.ts:2049:23-2050:43: `
                .connect(roles.oracleNode)`
$DIR/contracts/test/v0.7/Operator.test.ts:2050:43-2051:58: `
                .fulfillOracleRequest2(...responseParams)`
$DIR/contracts/test/v0.7/Operator.test.ts:2055:13-2057:76: `await operator
              .connect(roles.defaultAccount)
              .transferOwnableContracts([forwarder1.address], link.address)`
$DIR/contracts/test/v0.7/Operator.test.ts:2055:27-2056:45: `
              .connect(roles.defaultAccount)`
$DIR/contracts/test/v0.7/Operator.test.ts:2056:45-2057:76: `
              .transferOwnableContracts([forwarder1.address], link.address)`
$DIR/contracts/test/v0.7/Operator.test.ts:2059:13-2064:14: `await evmRevert(
              operator
                .connect(roles.oracleNode)
                .fulfillOracleRequest(...responseParams),
              'Params do not match request ID',
            )`
$DIR/contracts/test/v0.7/Operator.test.ts:2060:23-2061:43: `
                .connect(roles.oracleNode)`
$DIR/contracts/test/v0.7/Operator.test.ts:2061:43-2062:57: `
                .fulfillOracleRequest(...responseParams)`
$DIR/contracts/test/v0.7/Operator.test.ts:2103:38-2104:41: `
              .connect(roles.oracleNode)`
$DIR/contracts/test/v0.7/Operator.test.ts:2104:41-2105:55: `
              .fulfillOracleRequest2(...fulfillParams)`
$DIR/contracts/test/v0.7/Operator.test.ts:2106:37-2106:44: `.wait()`
$DIR/contracts/test/v0.7/Operator.test.ts:2131:46-2131:74: `.publicGetNextRequestCount()`
$DIR/contracts/test/v0.7/Operator.test.ts:2132:43-2132:74: `.requestEthereumPrice('USD', 0)`
$DIR/contracts/test/v0.7/Operator.test.ts:2133:37-2133:44: `.wait()`
$DIR/contracts/test/v0.7/Operator.test.ts:2134:13-2134:58: `request = decodeRunRequest(receipt.logs?.[3])`
$DIR/contracts/test/v0.7/Operator.test.ts:2135:34-2138:14: `.utils.solidityPack(
              ['address', 'uint256'],
              [multiConsumer.address, nonce],
            )`
$DIR/contracts/test/v0.7/Operator.test.ts:2139:36-2139:60: `.utils.keccak256(packed)`
$DIR/contracts/test/v0.7/Operator.test.ts:2154:15-2164:16: `await evmRevert(
                operator
                  .connect(roles.stranger)
                  .fulfillOracleRequest2(
                    ...convertFulfill2Params(
                      request,
                      responseTypes,
                      responseValues,
                    ),
                  ),
              )`
$DIR/contracts/test/v0.7/Operator.test.ts:2155:25-2156:43: `
                  .connect(roles.stranger)`
$DIR/contracts/test/v0.7/Operator.test.ts:2156:43-2163:20: `
                  .fulfillOracleRequest2(
                    ...convertFulfill2Params(
                      request,
                      responseTypes,
                      responseValues,
                    ),
                  )`
$DIR/contracts/test/v0.7/Operator.test.ts:2170:15-2171:65: `request.requestId =
                ethers.utils.formatBytes32String('DOESNOTEXIST')`
$DIR/contracts/test/v0.7/Operator.test.ts:2171:23-2171:65: `.utils.formatBytes32String('DOESNOTEXIST')`
$DIR/contracts/test/v0.7/Operator.test.ts:2172:15-2182:16: `await evmRevert(
                operator
                  .connect(roles.oracleNode)
                  .fulfillOracleRequest2(
                    ...convertFulfill2Params(
                      request,
                      responseTypes,
                      responseValues,
                    ),
                  ),
              )`
$DIR/contracts/test/v0.7/Operator.test.ts:2173:25-2174:45: `
                  .connect(roles.oracleNode)`
$DIR/contracts/test/v0.7/Operator.test.ts:2174:45-2181:20: `
                  .fulfillOracleRequest2(
                    ...convertFulfill2Params(
                      request,
                      responseTypes,
                      responseValues,
                    ),
                  )`
$DIR/contracts/test/v0.7/Operator.test.ts:2186:15-2194:18: `await operator
                .connect(roles.oracleNode)
                .fulfillOracleRequest2(
                  ...convertFulfill2Params(
                    request,
                    responseTypes,
                    responseValues,
                  ),
                )`
$DIR/contracts/test/v0.7/Operator.test.ts:2186:29-2187:43: `
                .connect(roles.oracleNode)`
$DIR/contracts/test/v0.7/Operator.test.ts:2187:43-2194:18: `
                .fulfillOracleRequest2(
                  ...convertFulfill2Params(
                    request,
                    responseTypes,
                    responseValues,
                  ),
                )`
$DIR/contracts/test/v0.7/Operator.test.ts:2196:55-2196:70: `.currentPrice()`
$DIR/contracts/test/v0.7/Operator.test.ts:2197:44-2197:77: `.utils.toUtf8String(currentValue)`
$DIR/contracts/test/v0.7/Operator.test.ts:2206:40-2207:43: `
                .connect(roles.oracleNode)`
$DIR/contracts/test/v0.7/Operator.test.ts:2207:43-2208:57: `
                .fulfillOracleRequest2(...fulfillParams)`
$DIR/contracts/test/v0.7/Operator.test.ts:2209:39-2209:46: `.wait()`
$DIR/contracts/test/v0.7/Operator.test.ts:2220:15-2228:18: `await operator
                .connect(roles.oracleNode)
                .fulfillOracleRequest2(
                  ...convertFulfill2Params(
                    request,
                    responseTypes,
                    responseValues,
                  ),
                )`
$DIR/contracts/test/v0.7/Operator.test.ts:2220:29-2221:43: `
                .connect(roles.oracleNode)`
$DIR/contracts/test/v0.7/Operator.test.ts:2221:43-2228:18: `
                .fulfillOracleRequest2(
                  ...convertFulfill2Params(
                    request,
                    responseTypes,
                    responseValues,
                  ),
                )`
$DIR/contracts/test/v0.7/Operator.test.ts:2230:15-2240:16: `await evmRevert(
                operator
                  .connect(roles.oracleNode)
                  .fulfillOracleRequest2(
                    ...convertFulfill2Params(
                      request,
                      responseTypes,
                      response2Values,
                    ),
                  ),
              )`
$DIR/contracts/test/v0.7/Operator.test.ts:2231:25-2232:45: `
                  .connect(roles.oracleNode)`
$DIR/contracts/test/v0.7/Operator.test.ts:2232:45-2239:20: `
                  .fulfillOracleRequest2(
                    ...convertFulfill2Params(
                      request,
                      responseTypes,
                      response2Values,
                    ),
                  )`
$DIR/contracts/test/v0.7/Operator.test.ts:2242:55-2242:70: `.currentPrice()`
$DIR/contracts/test/v0.7/Operator.test.ts:2243:44-2243:77: `.utils.toUtf8String(currentValue)`
$DIR/contracts/test/v0.7/Operator.test.ts:2257:15-2268:16: `await evmRevert(
                operator.connect(roles.oracleNode).fulfillOracleRequest2(
                  ...convertFulfill2Params(
                    request,
                    responseTypes,
                    responseValues,
                    {
                      gasLimit: 70000,
                    },
                  ),
                ),
              )`
$DIR/contracts/test/v0.7/Operator.test.ts:2258:25-2258:51: `.connect(roles.oracleNode)`
$DIR/contracts/test/v0.7/Operator.test.ts:2258:51-2267:18: `.fulfillOracleRequest2(
                  ...convertFulfill2Params(
                    request,
                    responseTypes,
                    responseValues,
                    {
                      gasLimit: 70000,
                    },
                  ),
                )`
$DIR/contracts/test/v0.7/Operator.test.ts:2270:15-2270:61: `bigNumEquals(0, await operator.withdrawable())`
$DIR/contracts/test/v0.7/Operator.test.ts:2270:45-2270:60: `.withdrawable()`
$DIR/contracts/test/v0.7/Operator.test.ts:2300:13-2305:14: `await evmRevert(
              maliciousRequester.maliciousRequestCancel(
                specId,
                ethers.utils.toUtf8Bytes('doesNothing(bytes32,bytes32)'),
              ),
            )`
$DIR/contracts/test/v0.7/Operator.test.ts:2301:33-2304:16: `.maliciousRequestCancel(
                specId,
                ethers.utils.toUtf8Bytes('doesNothing(bytes32,bytes32)'),
              )`
$DIR/contracts/test/v0.7/Operator.test.ts:2303:23-2303:73: `.utils.toUtf8Bytes('doesNothing(bytes32,bytes32)')`
$DIR/contracts/test/v0.7/Operator.test.ts:2309:13-2315:14: `await evmRevert(
              maliciousRequester.request(
                specId,
                link.address,
                ethers.utils.toUtf8Bytes('transfer(address,uint256)'),
              ),
            )`
$DIR/contracts/test/v0.7/Operator.test.ts:2310:33-2314:16: `.request(
                specId,
                link.address,
                ethers.utils.toUtf8Bytes('transfer(address,uint256)'),
              )`
$DIR/contracts/test/v0.7/Operator.test.ts:2313:23-2313:70: `.utils.toUtf8Bytes('transfer(address,uint256)')`
$DIR/contracts/test/v0.7/Operator.test.ts:2320:50-2320:73: `.maliciousPrice(specId)`
$DIR/contracts/test/v0.7/Operator.test.ts:2321:39-2321:46: `.wait()`
$DIR/contracts/test/v0.7/Operator.test.ts:2324:32-2324:48: `.eq(req.payment)`
$DIR/contracts/test/v0.7/Operator.test.ts:2350:15-2358:18: `await operator
                .connect(roles.oracleNode)
                .fulfillOracleRequest2(
                  ...convertFulfill2Params(
                    request,
                    responseTypes,
                    responseValues,
                  ),
                )`
$DIR/contracts/test/v0.7/Operator.test.ts:2350:29-2351:43: `
                .connect(roles.oracleNode)`
$DIR/contracts/test/v0.7/Operator.test.ts:2351:43-2358:18: `
                .fulfillOracleRequest2(
                  ...convertFulfill2Params(
                    request,
                    responseTypes,
                    responseValues,
                  ),
                )`
$DIR/contracts/test/v0.7/Operator.test.ts:2360:41-2362:16: `.balanceOf(
                await roles.oracleNode.getAddress(),
              )`
$DIR/contracts/test/v0.7/Operator.test.ts:2361:28-2361:52: `.oracleNode.getAddress()`
$DIR/contracts/test/v0.7/Operator.test.ts:2363:15-2363:39: `bigNumEquals(balance, 0)`
$DIR/contracts/test/v0.7/Operator.test.ts:2365:15-2367:78: `await operator
                .connect(roles.defaultAccount)
                .withdraw(await roles.oracleNode.getAddress(), paymentAmount)`
$DIR/contracts/test/v0.7/Operator.test.ts:2365:29-2366:47: `
                .connect(roles.defaultAccount)`
$DIR/contracts/test/v0.7/Operator.test.ts:2366:47-2367:78: `
                .withdraw(await roles.oracleNode.getAddress(), paymentAmount)`
$DIR/contracts/test/v0.7/Operator.test.ts:2367:38-2367:62: `.oracleNode.getAddress()`
$DIR/contracts/test/v0.7/Operator.test.ts:2369:44-2371:16: `.balanceOf(
                await roles.oracleNode.getAddress(),
              )`
$DIR/contracts/test/v0.7/Operator.test.ts:2370:28-2370:52: `.oracleNode.getAddress()`
$DIR/contracts/test/v0.7/Operator.test.ts:2372:15-2372:54: `bigNumEquals(paymentAmount, newBalance)`
$DIR/contracts/test/v0.7/Operator.test.ts:2378:15-2386:18: `await operator
                .connect(roles.oracleNode)
                .fulfillOracleRequest2(
                  ...convertFulfill2Params(
                    request,
                    responseTypes,
                    responseValues,
                  ),
                )`
$DIR/contracts/test/v0.7/Operator.test.ts:2378:29-2379:43: `
                .connect(roles.oracleNode)`
$DIR/contracts/test/v0.7/Operator.test.ts:2379:43-2386:18: `
                .fulfillOracleRequest2(
                  ...convertFulfill2Params(
                    request,
                    responseTypes,
                    responseValues,
                  ),
                )`
$DIR/contracts/test/v0.7/Operator.test.ts:2388:15-2398:16: `await evmRevert(
                operator
                  .connect(roles.oracleNode)
                  .fulfillOracleRequest2(
                    ...convertFulfill2Params(
                      request,
                      responseTypes,
                      response2Values,
                    ),
                  ),
              )`
$DIR/contracts/test/v0.7/Operator.test.ts:2389:25-2390:45: `
                  .connect(roles.oracleNode)`
$DIR/contracts/test/v0.7/Operator.test.ts:2390:45-2397:20: `
                  .fulfillOracleRequest2(
                    ...convertFulfill2Params(
                      request,
                      responseTypes,
                      response2Values,
                    ),
                  )`
$DIR/contracts/test/v0.7/Operator.test.ts:2414:15-2422:18: `await operator
                .connect(roles.oracleNode)
                .fulfillOracleRequest2(
                  ...convertFulfill2Params(
                    request,
                    responseTypes,
                    responseValues,
                  ),
                )`
$DIR/contracts/test/v0.7/Operator.test.ts:2414:29-2415:43: `
                .connect(roles.oracleNode)`
$DIR/contracts/test/v0.7/Operator.test.ts:2415:43-2422:18: `
                .fulfillOracleRequest2(
                  ...convertFulfill2Params(
                    request,
                    responseTypes,
                    responseValues,
                  ),
                )`
$DIR/contracts/test/v0.7/Operator.test.ts:2424:41-2426:16: `.balanceOf(
                await roles.oracleNode.getAddress(),
              )`
$DIR/contracts/test/v0.7/Operator.test.ts:2425:28-2425:52: `.oracleNode.getAddress()`
$DIR/contracts/test/v0.7/Operator.test.ts:2427:15-2427:39: `bigNumEquals(balance, 0)`
$DIR/contracts/test/v0.7/Operator.test.ts:2429:15-2431:78: `await operator
                .connect(roles.defaultAccount)
                .withdraw(await roles.oracleNode.getAddress(), paymentAmount)`
$DIR/contracts/test/v0.7/Operator.test.ts:2429:29-2430:47: `
                .connect(roles.defaultAccount)`
$DIR/contracts/test/v0.7/Operator.test.ts:2430:47-2431:78: `
                .withdraw(await roles.oracleNode.getAddress(), paymentAmount)`
$DIR/contracts/test/v0.7/Operator.test.ts:2431:38-2431:62: `.oracleNode.getAddress()`
$DIR/contracts/test/v0.7/Operator.test.ts:2432:44-2434:16: `.balanceOf(
                await roles.oracleNode.getAddress(),
              )`
$DIR/contracts/test/v0.7/Operator.test.ts:2433:28-2433:52: `.oracleNode.getAddress()`
$DIR/contracts/test/v0.7/Operator.test.ts:2435:15-2435:54: `bigNumEquals(paymentAmount, newBalance)`
$DIR/contracts/test/v0.7/Operator.test.ts:2454:15-2462:18: `await operator
                .connect(roles.oracleNode)
                .fulfillOracleRequest2(
                  ...convertFulfill2Params(
                    request,
                    responseTypes,
                    responseValues,
                  ),
                )`
$DIR/contracts/test/v0.7/Operator.test.ts:2454:29-2455:43: `
                .connect(roles.oracleNode)`
$DIR/contracts/test/v0.7/Operator.test.ts:2455:43-2462:18: `
                .fulfillOracleRequest2(
                  ...convertFulfill2Params(
                    request,
                    responseTypes,
                    responseValues,
                  ),
                )`
$DIR/contracts/test/v0.7/Operator.test.ts:2464:45-2466:16: `.balanceOf(
                maliciousConsumer.address,
              )`
$DIR/contracts/test/v0.7/Operator.test.ts:2467:15-2467:43: `bigNumEquals(mockBalance, 0)`
$DIR/contracts/test/v0.7/Operator.test.ts:2469:41-2471:16: `.balanceOf(
                await roles.oracleNode.getAddress(),
              )`
$DIR/contracts/test/v0.7/Operator.test.ts:2470:28-2470:52: `.oracleNode.getAddress()`
$DIR/contracts/test/v0.7/Operator.test.ts:2472:15-2472:39: `bigNumEquals(balance, 0)`
$DIR/contracts/test/v0.7/Operator.test.ts:2474:15-2476:78: `await operator
                .connect(roles.defaultAccount)
                .withdraw(await roles.oracleNode.getAddress(), paymentAmount)`
$DIR/contracts/test/v0.7/Operator.test.ts:2474:29-2475:47: `
                .connect(roles.defaultAccount)`
$DIR/contracts/test/v0.7/Operator.test.ts:2475:47-2476:78: `
                .withdraw(await roles.oracleNode.getAddress(), paymentAmount)`
$DIR/contracts/test/v0.7/Operator.test.ts:2476:38-2476:62: `.oracleNode.getAddress()`
$DIR/contracts/test/v0.7/Operator.test.ts:2477:44-2479:16: `.balanceOf(
                await roles.oracleNode.getAddress(),
              )`
$DIR/contracts/test/v0.7/Operator.test.ts:2478:28-2478:52: `.oracleNode.getAddress()`
$DIR/contracts/test/v0.7/Operator.test.ts:2480:15-2480:54: `bigNumEquals(paymentAmount, newBalance)`
$DIR/contracts/test/v0.7/Operator.test.ts:2486:15-2494:18: `await operator
                .connect(roles.oracleNode)
                .fulfillOracleRequest2(
                  ...convertFulfill2Params(
                    request,
                    responseTypes,
                    responseValues,
                  ),
                )`
$DIR/contracts/test/v0.7/Operator.test.ts:2486:29-2487:43: `
                .connect(roles.oracleNode)`
$DIR/contracts/test/v0.7/Operator.test.ts:2487:43-2494:18: `
                .fulfillOracleRequest2(
                  ...convertFulfill2Params(
                    request,
                    responseTypes,
                    responseValues,
                  ),
                )`
$DIR/contracts/test/v0.7/Operator.test.ts:2496:15-2506:16: `await evmRevert(
                operator
                  .connect(roles.oracleNode)
                  .fulfillOracleRequest2(
                    ...convertFulfill2Params(
                      request,
                      responseTypes,
                      response2Values,
                    ),
                  ),
              )`
$DIR/contracts/test/v0.7/Operator.test.ts:2497:25-2498:45: `
                  .connect(roles.oracleNode)`
$DIR/contracts/test/v0.7/Operator.test.ts:2498:45-2505:20: `
                  .fulfillOracleRequest2(
                    ...convertFulfill2Params(
                      request,
                      responseTypes,
                      response2Values,
                    ),
                  )`
$DIR/contracts/test/v0.7/Operator.test.ts:2512:49-2515:16: `.requestData(
                specId,
                ethers.utils.toUtf8Bytes('stealEthCall(bytes32,bytes32)'),
              )`
$DIR/contracts/test/v0.7/Operator.test.ts:2514:23-2514:74: `.utils.toUtf8Bytes('stealEthCall(bytes32,bytes32)')`
$DIR/contracts/test/v0.7/Operator.test.ts:2516:39-2516:46: `.wait()`
$DIR/contracts/test/v0.7/Operator.test.ts:2517:15-2517:60: `request = decodeRunRequest(receipt.logs?.[3])`
$DIR/contracts/test/v0.7/Operator.test.ts:2519:15-2527:18: `await operator
                .connect(roles.oracleNode)
                .fulfillOracleRequest2(
                  ...convertFulfill2Params(
                    request,
                    responseTypes,
                    responseValues,
                  ),
                )`
$DIR/contracts/test/v0.7/Operator.test.ts:2519:29-2520:43: `
                .connect(roles.oracleNode)`
$DIR/contracts/test/v0.7/Operator.test.ts:2520:43-2527:18: `
                .fulfillOracleRequest2(
                  ...convertFulfill2Params(
                    request,
                    responseTypes,
                    responseValues,
                  ),
                )`
$DIR/contracts/test/v0.7/Operator.test.ts:2529:15-2532:16: `bigNumEquals(
                0,
                await ethers.provider.getBalance(maliciousConsumer.address),
              )`
$DIR/contracts/test/v0.7/Operator.test.ts:2531:29-2531:76: `.provider.getBalance(maliciousConsumer.address)`
$DIR/contracts/test/v0.7/Operator.test.ts:2536:49-2539:16: `.requestData(
                specId,
                ethers.utils.toUtf8Bytes('stealEthSend(bytes32,bytes32)'),
              )`
$DIR/contracts/test/v0.7/Operator.test.ts:2538:23-2538:74: `.utils.toUtf8Bytes('stealEthSend(bytes32,bytes32)')`
$DIR/contracts/test/v0.7/Operator.test.ts:2540:39-2540:46: `.wait()`
$DIR/contracts/test/v0.7/Operator.test.ts:2541:15-2541:60: `request = decodeRunRequest(receipt.logs?.[3])`
$DIR/contracts/test/v0.7/Operator.test.ts:2543:15-2551:18: `await operator
                .connect(roles.oracleNode)
                .fulfillOracleRequest2(
                  ...convertFulfill2Params(
                    request,
                    responseTypes,
                    responseValues,
                  ),
                )`
$DIR/contracts/test/v0.7/Operator.test.ts:2543:29-2544:43: `
                .connect(roles.oracleNode)`
$DIR/contracts/test/v0.7/Operator.test.ts:2544:43-2551:18: `
                .fulfillOracleRequest2(
                  ...convertFulfill2Params(
                    request,
                    responseTypes,
                    responseValues,
                  ),
                )`
$DIR/contracts/test/v0.7/Operator.test.ts:2552:15-2555:16: `bigNumEquals(
                0,
                await ethers.provider.getBalance(maliciousConsumer.address),
              )`
$DIR/contracts/test/v0.7/Operator.test.ts:2554:29-2554:76: `.provider.getBalance(maliciousConsumer.address)`
$DIR/contracts/test/v0.7/Operator.test.ts:2559:49-2562:16: `.requestData(
                specId,
                ethers.utils.toUtf8Bytes('stealEthTransfer(bytes32,bytes32)'),
              )`
$DIR/contracts/test/v0.7/Operator.test.ts:2561:23-2561:78: `.utils.toUtf8Bytes('stealEthTransfer(bytes32,bytes32)')`
$DIR/contracts/test/v0.7/Operator.test.ts:2563:39-2563:46: `.wait()`
$DIR/contracts/test/v0.7/Operator.test.ts:2564:15-2564:60: `request = decodeRunRequest(receipt.logs?.[3])`
$DIR/contracts/test/v0.7/Operator.test.ts:2566:15-2574:18: `await operator
                .connect(roles.oracleNode)
                .fulfillOracleRequest2(
                  ...convertFulfill2Params(
                    request,
                    responseTypes,
                    responseValues,
                  ),
                )`
$DIR/contracts/test/v0.7/Operator.test.ts:2566:29-2567:43: `
                .connect(roles.oracleNode)`
$DIR/contracts/test/v0.7/Operator.test.ts:2567:43-2574:18: `
                .fulfillOracleRequest2(
                  ...convertFulfill2Params(
                    request,
                    responseTypes,
                    responseValues,
                  ),
                )`
$DIR/contracts/test/v0.7/Operator.test.ts:2575:15-2578:16: `bigNumEquals(
                0,
                await ethers.provider.getBalance(maliciousConsumer.address),
              )`
$DIR/contracts/test/v0.7/Operator.test.ts:2577:29-2577:76: `.provider.getBalance(maliciousConsumer.address)`
$DIR/contracts/test/v0.7/Operator.test.ts:2620:38-2621:41: `
              .connect(roles.oracleNode)`
$DIR/contracts/test/v0.7/Operator.test.ts:2621:41-2622:55: `
              .fulfillOracleRequest2(...fulfillParams)`
$DIR/contracts/test/v0.7/Operator.test.ts:2623:37-2623:44: `.wait()`
$DIR/contracts/test/v0.7/Operator.test.ts:2658:15-2668:16: `await evmRevert(
                operator
                  .connect(roles.stranger)
                  .fulfillOracleRequest2(
                    ...convertFulfill2Params(
                      request,
                      responseTypes,
                      responseValues,
                    ),
                  ),
              )`
$DIR/contracts/test/v0.7/Operator.test.ts:2659:25-2660:43: `
                  .connect(roles.stranger)`
$DIR/contracts/test/v0.7/Operator.test.ts:2660:43-2667:20: `
                  .fulfillOracleRequest2(
                    ...convertFulfill2Params(
                      request,
                      responseTypes,
                      responseValues,
                    ),
                  )`
$DIR/contracts/test/v0.7/Operator.test.ts:2674:15-2675:65: `request.requestId =
                ethers.utils.formatBytes32String('DOESNOTEXIST')`
$DIR/contracts/test/v0.7/Operator.test.ts:2675:23-2675:65: `.utils.formatBytes32String('DOESNOTEXIST')`
$DIR/contracts/test/v0.7/Operator.test.ts:2676:15-2686:16: `await evmRevert(
                operator
                  .connect(roles.oracleNode)
                  .fulfillOracleRequest2(
                    ...convertFulfill2Params(
                      request,
                      responseTypes,
                      responseValues,
                    ),
                  ),
              )`
$DIR/contracts/test/v0.7/Operator.test.ts:2677:25-2678:45: `
                  .connect(roles.oracleNode)`
$DIR/contracts/test/v0.7/Operator.test.ts:2678:45-2685:20: `
                  .fulfillOracleRequest2(
                    ...convertFulfill2Params(
                      request,
                      responseTypes,
                      responseValues,
                    ),
                  )`
$DIR/contracts/test/v0.7/Operator.test.ts:2690:15-2698:18: `await operator
                .connect(roles.oracleNode)
                .fulfillOracleRequest2(
                  ...convertFulfill2Params(
                    request,
                    responseTypes,
                    responseValues,
                  ),
                )`
$DIR/contracts/test/v0.7/Operator.test.ts:2690:29-2691:43: `
                .connect(roles.oracleNode)`
$DIR/contracts/test/v0.7/Operator.test.ts:2691:43-2698:18: `
                .fulfillOracleRequest2(
                  ...convertFulfill2Params(
                    request,
                    responseTypes,
                    responseValues,
                  ),
                )`
$DIR/contracts/test/v0.7/Operator.test.ts:2700:53-2700:59: `.usd()`
$DIR/contracts/test/v0.7/Operator.test.ts:2701:54-2701:60: `.eur()`
$DIR/contracts/test/v0.7/Operator.test.ts:2702:53-2702:59: `.jpy()`
$DIR/contracts/test/v0.7/Operator.test.ts:2705:23-2705:60: `.utils.parseBytes32String(firstValue)`
$DIR/contracts/test/v0.7/Operator.test.ts:2709:23-2709:61: `.utils.parseBytes32String(secondValue)`
$DIR/contracts/test/v0.7/Operator.test.ts:2713:23-2713:60: `.utils.parseBytes32String(thirdValue)`
$DIR/contracts/test/v0.7/Operator.test.ts:2723:40-2724:43: `
                .connect(roles.oracleNode)`
$DIR/contracts/test/v0.7/Operator.test.ts:2724:43-2725:57: `
                .fulfillOracleRequest2(...fulfillParams)`
$DIR/contracts/test/v0.7/Operator.test.ts:2726:39-2726:46: `.wait()`
$DIR/contracts/test/v0.7/Operator.test.ts:2741:15-2749:18: `await operator
                .connect(roles.oracleNode)
                .fulfillOracleRequest2(
                  ...convertFulfill2Params(
                    request,
                    responseTypes,
                    responseValues,
                  ),
                )`
$DIR/contracts/test/v0.7/Operator.test.ts:2741:29-2742:43: `
                .connect(roles.oracleNode)`
$DIR/contracts/test/v0.7/Operator.test.ts:2742:43-2749:18: `
                .fulfillOracleRequest2(
                  ...convertFulfill2Params(
                    request,
                    responseTypes,
                    responseValues,
                  ),
                )`
$DIR/contracts/test/v0.7/Operator.test.ts:2751:15-2761:16: `await evmRevert(
                operator
                  .connect(roles.oracleNode)
                  .fulfillOracleRequest2(
                    ...convertFulfill2Params(
                      request,
                      responseTypes,
                      repeatedResponseValues,
                    ),
                  ),
              )`
$DIR/contracts/test/v0.7/Operator.test.ts:2752:25-2753:45: `
                  .connect(roles.oracleNode)`
$DIR/contracts/test/v0.7/Operator.test.ts:2753:45-2760:20: `
                  .fulfillOracleRequest2(
                    ...convertFulfill2Params(
                      request,
                      responseTypes,
                      repeatedResponseValues,
                    ),
                  )`
$DIR/contracts/test/v0.7/Operator.test.ts:2763:53-2763:59: `.usd()`
$DIR/contracts/test/v0.7/Operator.test.ts:2764:54-2764:60: `.eur()`
$DIR/contracts/test/v0.7/Operator.test.ts:2765:53-2765:59: `.jpy()`
$DIR/contracts/test/v0.7/Operator.test.ts:2768:23-2768:60: `.utils.parseBytes32String(firstValue)`
$DIR/contracts/test/v0.7/Operator.test.ts:2772:23-2772:61: `.utils.parseBytes32String(secondValue)`
$DIR/contracts/test/v0.7/Operator.test.ts:2776:23-2776:60: `.utils.parseBytes32String(thirdValue)`
$DIR/contracts/test/v0.7/Operator.test.ts:2791:15-2802:16: `await evmRevert(
                operator.connect(roles.oracleNode).fulfillOracleRequest2(
                  ...convertFulfill2Params(
                    request,
                    responseTypes,
                    responseValues,
                    {
                      gasLimit: 70000,
                    },
                  ),
                ),
              )`
$DIR/contracts/test/v0.7/Operator.test.ts:2792:25-2792:51: `.connect(roles.oracleNode)`
$DIR/contracts/test/v0.7/Operator.test.ts:2792:51-2801:18: `.fulfillOracleRequest2(
                  ...convertFulfill2Params(
                    request,
                    responseTypes,
                    responseValues,
                    {
                      gasLimit: 70000,
                    },
                  ),
                )`
$DIR/contracts/test/v0.7/Operator.test.ts:2804:15-2804:61: `bigNumEquals(0, await operator.withdrawable())`
$DIR/contracts/test/v0.7/Operator.test.ts:2804:45-2804:60: `.withdrawable()`
$DIR/contracts/test/v0.7/Operator.test.ts:2834:13-2839:14: `await evmRevert(
              maliciousRequester.maliciousRequestCancel(
                specId,
                ethers.utils.toUtf8Bytes('doesNothing(bytes32,bytes32)'),
              ),
            )`
$DIR/contracts/test/v0.7/Operator.test.ts:2835:33-2838:16: `.maliciousRequestCancel(
                specId,
                ethers.utils.toUtf8Bytes('doesNothing(bytes32,bytes32)'),
              )`
$DIR/contracts/test/v0.7/Operator.test.ts:2837:23-2837:73: `.utils.toUtf8Bytes('doesNothing(bytes32,bytes32)')`
$DIR/contracts/test/v0.7/Operator.test.ts:2843:13-2849:14: `await evmRevert(
              maliciousRequester.request(
                specId,
                link.address,
                ethers.utils.toUtf8Bytes('transfer(address,uint256)'),
              ),
            )`
$DIR/contracts/test/v0.7/Operator.test.ts:2844:33-2848:16: `.request(
                specId,
                link.address,
                ethers.utils.toUtf8Bytes('transfer(address,uint256)'),
              )`
$DIR/contracts/test/v0.7/Operator.test.ts:2847:23-2847:70: `.utils.toUtf8Bytes('transfer(address,uint256)')`
$DIR/contracts/test/v0.7/Operator.test.ts:2854:50-2854:73: `.maliciousPrice(specId)`
$DIR/contracts/test/v0.7/Operator.test.ts:2855:39-2855:46: `.wait()`
$DIR/contracts/test/v0.7/Operator.test.ts:2858:32-2858:48: `.eq(req.payment)`
$DIR/contracts/test/v0.7/Operator.test.ts:2884:15-2892:18: `await operator
                .connect(roles.oracleNode)
                .fulfillOracleRequest2(
                  ...convertFulfill2Params(
                    request,
                    responseTypes,
                    responseValues,
                  ),
                )`
$DIR/contracts/test/v0.7/Operator.test.ts:2884:29-2885:43: `
                .connect(roles.oracleNode)`
$DIR/contracts/test/v0.7/Operator.test.ts:2885:43-2892:18: `
                .fulfillOracleRequest2(
                  ...convertFulfill2Params(
                    request,
                    responseTypes,
                    responseValues,
                  ),
                )`
$DIR/contracts/test/v0.7/Operator.test.ts:2894:41-2896:16: `.balanceOf(
                await roles.oracleNode.getAddress(),
              )`
$DIR/contracts/test/v0.7/Operator.test.ts:2895:28-2895:52: `.oracleNode.getAddress()`
$DIR/contracts/test/v0.7/Operator.test.ts:2897:15-2897:39: `bigNumEquals(balance, 0)`
$DIR/contracts/test/v0.7/Operator.test.ts:2899:15-2901:78: `await operator
                .connect(roles.defaultAccount)
                .withdraw(await roles.oracleNode.getAddress(), paymentAmount)`
$DIR/contracts/test/v0.7/Operator.test.ts:2899:29-2900:47: `
                .connect(roles.defaultAccount)`
$DIR/contracts/test/v0.7/Operator.test.ts:2900:47-2901:78: `
                .withdraw(await roles.oracleNode.getAddress(), paymentAmount)`
$DIR/contracts/test/v0.7/Operator.test.ts:2901:38-2901:62: `.oracleNode.getAddress()`
$DIR/contracts/test/v0.7/Operator.test.ts:2903:44-2905:16: `.balanceOf(
                await roles.oracleNode.getAddress(),
              )`
$DIR/contracts/test/v0.7/Operator.test.ts:2904:28-2904:52: `.oracleNode.getAddress()`
$DIR/contracts/test/v0.7/Operator.test.ts:2906:15-2906:54: `bigNumEquals(paymentAmount, newBalance)`
$DIR/contracts/test/v0.7/Operator.test.ts:2916:15-2924:18: `await operator
                .connect(roles.oracleNode)
                .fulfillOracleRequest2(
                  ...convertFulfill2Params(
                    request,
                    responseTypes,
                    responseValues,
                  ),
                )`
$DIR/contracts/test/v0.7/Operator.test.ts:2916:29-2917:43: `
                .connect(roles.oracleNode)`
$DIR/contracts/test/v0.7/Operator.test.ts:2917:43-2924:18: `
                .fulfillOracleRequest2(
                  ...convertFulfill2Params(
                    request,
                    responseTypes,
                    responseValues,
                  ),
                )`
$DIR/contracts/test/v0.7/Operator.test.ts:2926:15-2936:16: `await evmRevert(
                operator
                  .connect(roles.oracleNode)
                  .fulfillOracleRequest2(
                    ...convertFulfill2Params(
                      request,
                      responseTypes,
                      repeatedResponseValues,
                    ),
                  ),
              )`
$DIR/contracts/test/v0.7/Operator.test.ts:2927:25-2928:45: `
                  .connect(roles.oracleNode)`
$DIR/contracts/test/v0.7/Operator.test.ts:2928:45-2935:20: `
                  .fulfillOracleRequest2(
                    ...convertFulfill2Params(
                      request,
                      responseTypes,
                      repeatedResponseValues,
                    ),
                  )`
$DIR/contracts/test/v0.7/Operator.test.ts:2952:15-2960:18: `await operator
                .connect(roles.oracleNode)
                .fulfillOracleRequest2(
                  ...convertFulfill2Params(
                    request,
                    responseTypes,
                    responseValues,
                  ),
                )`
$DIR/contracts/test/v0.7/Operator.test.ts:2952:29-2953:43: `
                .connect(roles.oracleNode)`
$DIR/contracts/test/v0.7/Operator.test.ts:2953:43-2960:18: `
                .fulfillOracleRequest2(
                  ...convertFulfill2Params(
                    request,
                    responseTypes,
                    responseValues,
                  ),
                )`
$DIR/contracts/test/v0.7/Operator.test.ts:2962:41-2964:16: `.balanceOf(
                await roles.oracleNode.getAddress(),
              )`
$DIR/contracts/test/v0.7/Operator.test.ts:2963:28-2963:52: `.oracleNode.getAddress()`
$DIR/contracts/test/v0.7/Operator.test.ts:2965:15-2965:39: `bigNumEquals(balance, 0)`
$DIR/contracts/test/v0.7/Operator.test.ts:2967:15-2969:78: `await operator
                .connect(roles.defaultAccount)
                .withdraw(await roles.oracleNode.getAddress(), paymentAmount)`
$DIR/contracts/test/v0.7/Operator.test.ts:2967:29-2968:47: `
                .connect(roles.defaultAccount)`
$DIR/contracts/test/v0.7/Operator.test.ts:2968:47-2969:78: `
                .withdraw(await roles.oracleNode.getAddress(), paymentAmount)`
$DIR/contracts/test/v0.7/Operator.test.ts:2969:38-2969:62: `.oracleNode.getAddress()`
$DIR/contracts/test/v0.7/Operator.test.ts:2970:44-2972:16: `.balanceOf(
                await roles.oracleNode.getAddress(),
              )`
$DIR/contracts/test/v0.7/Operator.test.ts:2971:28-2971:52: `.oracleNode.getAddress()`
$DIR/contracts/test/v0.7/Operator.test.ts:2973:15-2973:54: `bigNumEquals(paymentAmount, newBalance)`
$DIR/contracts/test/v0.7/Operator.test.ts:2992:15-3000:18: `await operator
                .connect(roles.oracleNode)
                .fulfillOracleRequest2(
                  ...convertFulfill2Params(
                    request,
                    responseTypes,
                    responseValues,
                  ),
                )`
$DIR/contracts/test/v0.7/Operator.test.ts:2992:29-2993:43: `
                .connect(roles.oracleNode)`
$DIR/contracts/test/v0.7/Operator.test.ts:2993:43-3000:18: `
                .fulfillOracleRequest2(
                  ...convertFulfill2Params(
                    request,
                    responseTypes,
                    responseValues,
                  ),
                )`
$DIR/contracts/test/v0.7/Operator.test.ts:3002:45-3004:16: `.balanceOf(
                maliciousConsumer.address,
              )`
$DIR/contracts/test/v0.7/Operator.test.ts:3005:15-3005:43: `bigNumEquals(mockBalance, 0)`
$DIR/contracts/test/v0.7/Operator.test.ts:3007:41-3009:16: `.balanceOf(
                await roles.oracleNode.getAddress(),
              )`
$DIR/contracts/test/v0.7/Operator.test.ts:3008:28-3008:52: `.oracleNode.getAddress()`
$DIR/contracts/test/v0.7/Operator.test.ts:3010:15-3010:39: `bigNumEquals(balance, 0)`
$DIR/contracts/test/v0.7/Operator.test.ts:3012:15-3014:78: `await operator
                .connect(roles.defaultAccount)
                .withdraw(await roles.oracleNode.getAddress(), paymentAmount)`
$DIR/contracts/test/v0.7/Operator.test.ts:3012:29-3013:47: `
                .connect(roles.defaultAccount)`
$DIR/contracts/test/v0.7/Operator.test.ts:3013:47-3014:78: `
                .withdraw(await roles.oracleNode.getAddress(), paymentAmount)`
$DIR/contracts/test/v0.7/Operator.test.ts:3014:38-3014:62: `.oracleNode.getAddress()`
$DIR/contracts/test/v0.7/Operator.test.ts:3015:44-3017:16: `.balanceOf(
                await roles.oracleNode.getAddress(),
              )`
$DIR/contracts/test/v0.7/Operator.test.ts:3016:28-3016:52: `.oracleNode.getAddress()`
$DIR/contracts/test/v0.7/Operator.test.ts:3018:15-3018:54: `bigNumEquals(paymentAmount, newBalance)`
$DIR/contracts/test/v0.7/Operator.test.ts:3028:15-3036:18: `await operator
                .connect(roles.oracleNode)
                .fulfillOracleRequest2(
                  ...convertFulfill2Params(
                    request,
                    responseTypes,
                    responseValues,
                  ),
                )`
$DIR/contracts/test/v0.7/Operator.test.ts:3028:29-3029:43: `
                .connect(roles.oracleNode)`
$DIR/contracts/test/v0.7/Operator.test.ts:3029:43-3036:18: `
                .fulfillOracleRequest2(
                  ...convertFulfill2Params(
                    request,
                    responseTypes,
                    responseValues,
                  ),
                )`
$DIR/contracts/test/v0.7/Operator.test.ts:3038:15-3048:16: `await evmRevert(
                operator
                  .connect(roles.oracleNode)
                  .fulfillOracleRequest2(
                    ...convertFulfill2Params(
                      request,
                      responseTypes,
                      repeatedResponseValues,
                    ),
                  ),
              )`
$DIR/contracts/test/v0.7/Operator.test.ts:3039:25-3040:45: `
                  .connect(roles.oracleNode)`
$DIR/contracts/test/v0.7/Operator.test.ts:3040:45-3047:20: `
                  .fulfillOracleRequest2(
                    ...convertFulfill2Params(
                      request,
                      responseTypes,
                      repeatedResponseValues,
                    ),
                  )`
$DIR/contracts/test/v0.7/Operator.test.ts:3054:49-3057:16: `.requestData(
                specId,
                ethers.utils.toUtf8Bytes('stealEthCall(bytes32,bytes32)'),
              )`
$DIR/contracts/test/v0.7/Operator.test.ts:3056:23-3056:74: `.utils.toUtf8Bytes('stealEthCall(bytes32,bytes32)')`
$DIR/contracts/test/v0.7/Operator.test.ts:3058:39-3058:46: `.wait()`
$DIR/contracts/test/v0.7/Operator.test.ts:3059:15-3059:60: `request = decodeRunRequest(receipt.logs?.[3])`
$DIR/contracts/test/v0.7/Operator.test.ts:3061:15-3069:18: `await operator
                .connect(roles.oracleNode)
                .fulfillOracleRequest2(
                  ...convertFulfill2Params(
                    request,
                    responseTypes,
                    responseValues,
                  ),
                )`
$DIR/contracts/test/v0.7/Operator.test.ts:3061:29-3062:43: `
                .connect(roles.oracleNode)`
$DIR/contracts/test/v0.7/Operator.test.ts:3062:43-3069:18: `
                .fulfillOracleRequest2(
                  ...convertFulfill2Params(
                    request,
                    responseTypes,
                    responseValues,
                  ),
                )`
$DIR/contracts/test/v0.7/Operator.test.ts:3071:15-3074:16: `bigNumEquals(
                0,
                await ethers.provider.getBalance(maliciousConsumer.address),
              )`
$DIR/contracts/test/v0.7/Operator.test.ts:3073:29-3073:76: `.provider.getBalance(maliciousConsumer.address)`
$DIR/contracts/test/v0.7/Operator.test.ts:3078:49-3081:16: `.requestData(
                specId,
                ethers.utils.toUtf8Bytes('stealEthSend(bytes32,bytes32)'),
              )`
$DIR/contracts/test/v0.7/Operator.test.ts:3080:23-3080:74: `.utils.toUtf8Bytes('stealEthSend(bytes32,bytes32)')`
$DIR/contracts/test/v0.7/Operator.test.ts:3082:39-3082:46: `.wait()`
$DIR/contracts/test/v0.7/Operator.test.ts:3083:15-3083:60: `request = decodeRunRequest(receipt.logs?.[3])`
$DIR/contracts/test/v0.7/Operator.test.ts:3085:15-3093:18: `await operator
                .connect(roles.oracleNode)
                .fulfillOracleRequest2(
                  ...convertFulfill2Params(
                    request,
                    responseTypes,
                    responseValues,
                  ),
                )`
$DIR/contracts/test/v0.7/Operator.test.ts:3085:29-3086:43: `
                .connect(roles.oracleNode)`
$DIR/contracts/test/v0.7/Operator.test.ts:3086:43-3093:18: `
                .fulfillOracleRequest2(
                  ...convertFulfill2Params(
                    request,
                    responseTypes,
                    responseValues,
                  ),
                )`
$DIR/contracts/test/v0.7/Operator.test.ts:3094:15-3097:16: `bigNumEquals(
                0,
                await ethers.provider.getBalance(maliciousConsumer.address),
              )`
$DIR/contracts/test/v0.7/Operator.test.ts:3096:29-3096:76: `.provider.getBalance(maliciousConsumer.address)`
$DIR/contracts/test/v0.7/Operator.test.ts:3101:49-3104:16: `.requestData(
                specId,
                ethers.utils.toUtf8Bytes('stealEthTransfer(bytes32,bytes32)'),
              )`
$DIR/contracts/test/v0.7/Operator.test.ts:3103:23-3103:78: `.utils.toUtf8Bytes('stealEthTransfer(bytes32,bytes32)')`
$DIR/contracts/test/v0.7/Operator.test.ts:3105:39-3105:46: `.wait()`
$DIR/contracts/test/v0.7/Operator.test.ts:3106:15-3106:60: `request = decodeRunRequest(receipt.logs?.[3])`
$DIR/contracts/test/v0.7/Operator.test.ts:3108:15-3116:18: `await operator
                .connect(roles.oracleNode)
                .fulfillOracleRequest2(
                  ...convertFulfill2Params(
                    request,
                    responseTypes,
                    responseValues,
                  ),
                )`
$DIR/contracts/test/v0.7/Operator.test.ts:3108:29-3109:43: `
                .connect(roles.oracleNode)`
$DIR/contracts/test/v0.7/Operator.test.ts:3109:43-3116:18: `
                .fulfillOracleRequest2(
                  ...convertFulfill2Params(
                    request,
                    responseTypes,
                    responseValues,
                  ),
                )`
$DIR/contracts/test/v0.7/Operator.test.ts:3117:15-3120:16: `bigNumEquals(
                0,
                await ethers.provider.getBalance(maliciousConsumer.address),
              )`
$DIR/contracts/test/v0.7/Operator.test.ts:3119:29-3119:76: `.provider.getBalance(maliciousConsumer.address)`
$DIR/contracts/test/v0.7/Operator.test.ts:3133:55-3134:41: `
          .connect(roles.defaultAccount)`
$DIR/contracts/test/v0.7/Operator.test.ts:3134:41-3135:58: `
          .deploy(link.address, operator.address, specId)`
$DIR/contracts/test/v0.7/Operator.test.ts:3137:9-3137:66: `await link.transfer(basicConsumer.address, paymentAmount)`
$DIR/contracts/test/v0.7/Operator.test.ts:3137:19-3137:66: `.transfer(basicConsumer.address, paymentAmount)`
$DIR/contracts/test/v0.7/Operator.test.ts:3138:39-3141:10: `.requestEthereumPrice(
          'USD',
          paymentAmount,
        )`
$DIR/contracts/test/v0.7/Operator.test.ts:3142:33-3142:40: `.wait()`
$DIR/contracts/test/v0.7/Operator.test.ts:3150:9-3150:32: `fulfillParams[5] = '0x'`
$DIR/contracts/test/v0.7/Operator.test.ts:3151:9-3156:10: `await evmRevert(
          operator
            .connect(roles.oracleNode)
            .fulfillOracleRequest2(...fulfillParams),
          'Response must be > 32 bytes',
        )`
$DIR/contracts/test/v0.7/Operator.test.ts:3152:19-3153:39: `
            .connect(roles.oracleNode)`
$DIR/contracts/test/v0.7/Operator.test.ts:3153:39-3154:53: `
            .fulfillOracleRequest2(...fulfillParams)`
$DIR/contracts/test/v0.7/Operator.test.ts:3164:33-3164:80: `.balanceOf(await roles.oracleNode.getAddress())`
$DIR/contracts/test/v0.7/Operator.test.ts:3164:55-3164:79: `.oracleNode.getAddress()`
$DIR/contracts/test/v0.7/Operator.test.ts:3166:9-3170:10: `await evmRevert(
          operator
            .connect(roles.defaultAccount)
            .withdraw(await roles.oracleNode.getAddress(), toWei('1')),
        )`
$DIR/contracts/test/v0.7/Operator.test.ts:3167:19-3168:43: `
            .connect(roles.defaultAccount)`
$DIR/contracts/test/v0.7/Operator.test.ts:3168:43-3169:71: `
            .withdraw(await roles.oracleNode.getAddress(), toWei('1'))`
$DIR/contracts/test/v0.7/Operator.test.ts:3169:34-3169:58: `.oracleNode.getAddress()`
$DIR/contracts/test/v0.7/Operator.test.ts:3171:9-3171:76: `balance = await link.balanceOf(await roles.oracleNode.getAddress())`
$DIR/contracts/test/v0.7/Operator.test.ts:3171:29-3171:76: `.balanceOf(await roles.oracleNode.getAddress())`
$DIR/contracts/test/v0.7/Operator.test.ts:3171:51-3171:75: `.oracleNode.getAddress()`
$DIR/contracts/test/v0.7/Operator.test.ts:3182:51-3182:79: `.balanceOf(operator.address)`
$DIR/contracts/test/v0.7/Operator.test.ts:3183:50-3185:12: `.balanceOf(
            await roles.defaultAccount.getAddress(),
          )`
$DIR/contracts/test/v0.7/Operator.test.ts:3184:24-3184:52: `.defaultAccount.getAddress()`
$DIR/contracts/test/v0.7/Operator.test.ts:3187:11-3189:69: `await operator
            .connect(roles.defaultAccount)
            .withdraw(await roles.defaultAccount.getAddress(), paid)`
$DIR/contracts/test/v0.7/Operator.test.ts:3187:25-3188:43: `
            .connect(roles.defaultAccount)`
$DIR/contracts/test/v0.7/Operator.test.ts:3188:43-3189:69: `
            .withdraw(await roles.defaultAccount.getAddress(), paid)`
$DIR/contracts/test/v0.7/Operator.test.ts:3189:34-3189:62: `.defaultAccount.getAddress()`
$DIR/contracts/test/v0.7/Operator.test.ts:3191:50-3191:78: `.balanceOf(operator.address)`
$DIR/contracts/test/v0.7/Operator.test.ts:3192:49-3194:12: `.balanceOf(
            await roles.defaultAccount.getAddress(),
          )`
$DIR/contracts/test/v0.7/Operator.test.ts:3193:24-3193:52: `.defaultAccount.getAddress()`
$DIR/contracts/test/v0.7/Operator.test.ts:3197:32-3197:58: `.sub(accountBalanceBefore)`
$DIR/contracts/test/v0.7/Operator.test.ts:3199:34-3199:60: `.sub(operatorBalanceAfter)`
$DIR/contracts/test/v0.7/Operator.test.ts:3201:11-3201:49: `bigNumEquals(operatorDifference, paid)`
$DIR/contracts/test/v0.7/Operator.test.ts:3202:11-3202:48: `bigNumEquals(accountDifference, paid)`
$DIR/contracts/test/v0.7/Operator.test.ts:3228:11-3232:12: `await evmRevert(
            operator
              .connect(roles.defaultAccount)
              .withdraw(await roles.oracleNode.getAddress(), payment),
          )`
$DIR/contracts/test/v0.7/Operator.test.ts:3229:21-3230:45: `
              .connect(roles.defaultAccount)`
$DIR/contracts/test/v0.7/Operator.test.ts:3230:45-3231:70: `
              .withdraw(await roles.oracleNode.getAddress(), payment)`
$DIR/contracts/test/v0.7/Operator.test.ts:3231:36-3231:60: `.oracleNode.getAddress()`
$DIR/contracts/test/v0.7/Operator.test.ts:3233:37-3235:12: `.balanceOf(
            await roles.oracleNode.getAddress(),
          )`
$DIR/contracts/test/v0.7/Operator.test.ts:3234:24-3234:48: `.oracleNode.getAddress()`
$DIR/contracts/test/v0.7/Operator.test.ts:3246:53-3246:81: `.balanceOf(operator.address)`
$DIR/contracts/test/v0.7/Operator.test.ts:3247:52-3249:14: `.balanceOf(
              await roles.defaultAccount.getAddress(),
            )`
$DIR/contracts/test/v0.7/Operator.test.ts:3248:26-3248:54: `.defaultAccount.getAddress()`
$DIR/contracts/test/v0.7/Operator.test.ts:3251:13-3253:71: `await operator
              .connect(roles.defaultAccount)
              .withdraw(await roles.defaultAccount.getAddress(), paid)`
$DIR/contracts/test/v0.7/Operator.test.ts:3251:27-3252:45: `
              .connect(roles.defaultAccount)`
$DIR/contracts/test/v0.7/Operator.test.ts:3252:45-3253:71: `
              .withdraw(await roles.defaultAccount.getAddress(), paid)`
$DIR/contracts/test/v0.7/Operator.test.ts:3253:36-3253:64: `.defaultAccount.getAddress()`
$DIR/contracts/test/v0.7/Operator.test.ts:3255:52-3255:80: `.balanceOf(operator.address)`
$DIR/contracts/test/v0.7/Operator.test.ts:3256:51-3258:14: `.balanceOf(
              await roles.defaultAccount.getAddress(),
            )`
$DIR/contracts/test/v0.7/Operator.test.ts:3257:26-3257:54: `.defaultAccount.getAddress()`
$DIR/contracts/test/v0.7/Operator.test.ts:3261:34-3261:60: `.sub(accountBalanceBefore)`
$DIR/contracts/test/v0.7/Operator.test.ts:3263:36-3263:62: `.sub(operatorBalanceAfter)`
$DIR/contracts/test/v0.7/Operator.test.ts:3265:13-3265:51: `bigNumEquals(operatorDifference, paid)`
$DIR/contracts/test/v0.7/Operator.test.ts:3266:13-3266:50: `bigNumEquals(accountDifference, paid)`
$DIR/contracts/test/v0.7/Operator.test.ts:3281:51-3281:79: `.balanceOf(operator.address)`
$DIR/contracts/test/v0.7/Operator.test.ts:3282:53-3284:12: `.balanceOf(
            await roles.stranger.getAddress(),
          )`
$DIR/contracts/test/v0.7/Operator.test.ts:3283:24-3283:46: `.stranger.getAddress()`
$DIR/contracts/test/v0.7/Operator.test.ts:3288:11-3292:12: `await evmRevert(
            operator
              .connect(roles.defaultAccount)
              .withdraw(await roles.stranger.getAddress(), withdrawalAmount),
          )`
$DIR/contracts/test/v0.7/Operator.test.ts:3289:21-3290:45: `
              .connect(roles.defaultAccount)`
$DIR/contracts/test/v0.7/Operator.test.ts:3290:45-3291:77: `
              .withdraw(await roles.stranger.getAddress(), withdrawalAmount)`
$DIR/contracts/test/v0.7/Operator.test.ts:3291:36-3291:58: `.stranger.getAddress()`
$DIR/contracts/test/v0.7/Operator.test.ts:3294:46-3294:74: `.balanceOf(operator.address)`
$DIR/contracts/test/v0.7/Operator.test.ts:3295:48-3297:12: `.balanceOf(
            await roles.stranger.getAddress(),
          )`
$DIR/contracts/test/v0.7/Operator.test.ts:3296:24-3296:46: `.stranger.getAddress()`
$DIR/contracts/test/v0.7/Operator.test.ts:3312:11-3314:72: `await operator
            .connect(roles.defaultAccount)
            .withdraw(await roles.stranger.getAddress(), partialAmount)`
$DIR/contracts/test/v0.7/Operator.test.ts:3312:25-3313:43: `
            .connect(roles.defaultAccount)`
$DIR/contracts/test/v0.7/Operator.test.ts:3313:43-3314:72: `
            .withdraw(await roles.stranger.getAddress(), partialAmount)`
$DIR/contracts/test/v0.7/Operator.test.ts:3314:34-3314:56: `.stranger.getAddress()`
$DIR/contracts/test/v0.7/Operator.test.ts:3315:45-3317:12: `.balanceOf(
            await roles.stranger.getAddress(),
          )`
$DIR/contracts/test/v0.7/Operator.test.ts:3316:24-3316:46: `.stranger.getAddress()`
$DIR/contracts/test/v0.7/Operator.test.ts:3318:43-3318:71: `.balanceOf(operator.address)`
$DIR/contracts/test/v0.7/Operator.test.ts:3324:11-3326:66: `await operator
            .connect(roles.defaultAccount)
            .withdraw(await roles.stranger.getAddress(), payment)`
$DIR/contracts/test/v0.7/Operator.test.ts:3324:25-3325:43: `
            .connect(roles.defaultAccount)`
$DIR/contracts/test/v0.7/Operator.test.ts:3325:43-3326:66: `
            .withdraw(await roles.stranger.getAddress(), payment)`
$DIR/contracts/test/v0.7/Operator.test.ts:3326:34-3326:56: `.stranger.getAddress()`
$DIR/contracts/test/v0.7/Operator.test.ts:3327:37-3329:12: `.balanceOf(
            await roles.stranger.getAddress(),
          )`
$DIR/contracts/test/v0.7/Operator.test.ts:3328:24-3328:46: `.stranger.getAddress()`
$DIR/contracts/test/v0.7/Operator.test.ts:3334:11-3338:12: `await evmRevert(
            operator
              .connect(roles.stranger)
              .withdraw(await roles.stranger.getAddress(), payment),
          )`
$DIR/contracts/test/v0.7/Operator.test.ts:3335:21-3336:39: `
              .connect(roles.stranger)`
$DIR/contracts/test/v0.7/Operator.test.ts:3336:39-3337:68: `
              .withdraw(await roles.stranger.getAddress(), payment)`
$DIR/contracts/test/v0.7/Operator.test.ts:3337:36-3337:58: `.stranger.getAddress()`
$DIR/contracts/test/v0.7/Operator.test.ts:3339:37-3341:12: `.balanceOf(
            await roles.stranger.getAddress(),
          )`
$DIR/contracts/test/v0.7/Operator.test.ts:3340:24-3340:46: `.stranger.getAddress()`
$DIR/contracts/test/v0.7/Operator.test.ts:3342:31-3342:58: `.constants.Zero.eq(balance)`
$DIR/contracts/test/v0.7/Operator.test.ts:3352:53-3352:81: `.balanceOf(operator.address)`
$DIR/contracts/test/v0.7/Operator.test.ts:3353:52-3355:14: `.balanceOf(
              await roles.defaultAccount.getAddress(),
            )`
$DIR/contracts/test/v0.7/Operator.test.ts:3354:26-3354:54: `.defaultAccount.getAddress()`
$DIR/contracts/test/v0.7/Operator.test.ts:3357:13-3359:71: `await operator
              .connect(roles.defaultAccount)
              .withdraw(await roles.defaultAccount.getAddress(), paid)`
$DIR/contracts/test/v0.7/Operator.test.ts:3357:27-3358:45: `
              .connect(roles.defaultAccount)`
$DIR/contracts/test/v0.7/Operator.test.ts:3358:45-3359:71: `
              .withdraw(await roles.defaultAccount.getAddress(), paid)`
$DIR/contracts/test/v0.7/Operator.test.ts:3359:36-3359:64: `.defaultAccount.getAddress()`
$DIR/contracts/test/v0.7/Operator.test.ts:3361:52-3361:80: `.balanceOf(operator.address)`
$DIR/contracts/test/v0.7/Operator.test.ts:3362:51-3364:14: `.balanceOf(
              await roles.defaultAccount.getAddress(),
            )`
$DIR/contracts/test/v0.7/Operator.test.ts:3363:26-3363:54: `.defaultAccount.getAddress()`
$DIR/contracts/test/v0.7/Operator.test.ts:3367:34-3367:60: `.sub(accountBalanceBefore)`
$DIR/contracts/test/v0.7/Operator.test.ts:3369:36-3369:62: `.sub(operatorBalanceAfter)`
$DIR/contracts/test/v0.7/Operator.test.ts:3371:13-3371:51: `bigNumEquals(operatorDifference, paid)`
$DIR/contracts/test/v0.7/Operator.test.ts:3372:13-3372:50: `bigNumEquals(accountDifference, paid)`
$DIR/contracts/test/v0.7/Operator.test.ts:3402:44-3402:59: `.withdrawable()`
$DIR/contracts/test/v0.7/Operator.test.ts:3403:7-3403:52: `bigNumEquals(withdrawAmount, request.payment)`
$DIR/contracts/test/v0.7/Operator.test.ts:3413:46-3413:61: `.withdrawable()`
$DIR/contracts/test/v0.7/Operator.test.ts:3415:38-3415:48: `.add(paid)`
$DIR/contracts/test/v0.7/Operator.test.ts:3416:9-3416:53: `bigNumEquals(withdrawAmount, expectedAmount)`
$DIR/contracts/test/v0.7/Operator.test.ts:3444:9-3444:63: `await link.transfer(operator.address, startingBalance)`
$DIR/contracts/test/v0.7/Operator.test.ts:3444:19-3444:63: `.transfer(operator.address, startingBalance)`
$DIR/contracts/test/v0.7/Operator.test.ts:3445:9-3450:10: `await evmRevert(
          operator
            .connect(roles.stranger)
            .ownerTransferAndCall(to, payment, args),
          'Only callable by owner',
        )`
$DIR/contracts/test/v0.7/Operator.test.ts:3446:19-3447:37: `
            .connect(roles.stranger)`
$DIR/contracts/test/v0.7/Operator.test.ts:3447:37-3448:53: `
            .ownerTransferAndCall(to, payment, args)`
$DIR/contracts/test/v0.7/Operator.test.ts:3462:11-3467:12: `await evmRevert(
            operator
              .connect(roles.defaultAccount)
              .ownerTransferAndCall(to, tooMuch, args),
            'Amount requested is greater than withdrawable balance',
          )`
$DIR/contracts/test/v0.7/Operator.test.ts:3463:21-3464:45: `
              .connect(roles.defaultAccount)`
$DIR/contracts/test/v0.7/Operator.test.ts:3464:45-3465:55: `
              .ownerTransferAndCall(to, tooMuch, args)`
$DIR/contracts/test/v0.7/Operator.test.ts:3493:33-3496:13: `.interface.parseLog({
            data: transferLog.data,
            topics: transferLog.topics,
          })`
$DIR/contracts/test/v0.7/Operator.test.ts:3501:11-3504:12: `bigNumEquals(
            requesterBalanceBefore.sub(requesterBalanceAfter),
            payment,
          )`
$DIR/contracts/test/v0.7/Operator.test.ts:3502:35-3502:62: `.sub(requesterBalanceAfter)`
$DIR/contracts/test/v0.7/Operator.test.ts:3505:11-3505:81: `bigNumEquals(receiverBalanceAfter.sub(receiverBalanceBefore), payment)`
$DIR/contracts/test/v0.7/Operator.test.ts:3505:44-3505:71: `.sub(receiverBalanceBefore)`
$DIR/contracts/test/v0.7/Operator.test.ts:3517:28-3517:62: `.utils.formatBytes32String('1337')`
$DIR/contracts/test/v0.7/Operator.test.ts:3520:32-3520:73: `.interface.getSighash('requestedBytes32')`
$DIR/contracts/test/v0.7/Operator.test.ts:3524:23-3524:32: `.from('')`
$DIR/contracts/test/v0.7/Operator.test.ts:3530:9-3530:52: `await increaseTime5Minutes(ethers.provider)`
$DIR/contracts/test/v0.7/Operator.test.ts:3532:9-3538:10: `await evmRevert(
          operator
            .connect(roles.stranger)
            .cancelOracleRequestByRequester(
              ...convertCancelByRequesterParams(fakeRequest, nonce),
            ),
        )`
$DIR/contracts/test/v0.7/Operator.test.ts:3533:19-3534:37: `
            .connect(roles.stranger)`
$DIR/contracts/test/v0.7/Operator.test.ts:3534:37-3537:14: `
            .cancelOracleRequestByRequester(
              ...convertCancelByRequesterParams(fakeRequest, nonce),
            )`
$DIR/contracts/test/v0.7/Operator.test.ts:3582:11-3588:12: `await evmRevert(
            operator
              .connect(roles.consumer)
              .cancelOracleRequestByRequester(
                ...convertCancelByRequesterParams(request, nonce),
              ),
          )`
$DIR/contracts/test/v0.7/Operator.test.ts:3583:21-3584:39: `
              .connect(roles.consumer)`
$DIR/contracts/test/v0.7/Operator.test.ts:3584:39-3587:16: `
              .cancelOracleRequestByRequester(
                ...convertCancelByRequesterParams(request, nonce),
              )`
$DIR/contracts/test/v0.7/Operator.test.ts:3594:11-3594:54: `await increaseTime5Minutes(ethers.provider)`
$DIR/contracts/test/v0.7/Operator.test.ts:3595:11-3599:14: `await operator
            .connect(roles.consumer)
            .cancelOracleRequestByRequester(
              ...convertCancelByRequesterParams(request, nonce),
            )`
$DIR/contracts/test/v0.7/Operator.test.ts:3595:25-3596:37: `
            .connect(roles.consumer)`
$DIR/contracts/test/v0.7/Operator.test.ts:3596:37-3599:14: `
            .cancelOracleRequestByRequester(
              ...convertCancelByRequesterParams(request, nonce),
            )`
$DIR/contracts/test/v0.7/Operator.test.ts:3600:37-3602:12: `.balanceOf(
            await roles.consumer.getAddress(),
          )`
$DIR/contracts/test/v0.7/Operator.test.ts:3601:24-3601:46: `.consumer.getAddress()`
$DIR/contracts/test/v0.7/Operator.test.ts:3608:11-3608:54: `await increaseTime5Minutes(ethers.provider)`
$DIR/contracts/test/v0.7/Operator.test.ts:3609:36-3610:37: `
            .connect(roles.consumer)`
$DIR/contracts/test/v0.7/Operator.test.ts:3610:37-3613:14: `
            .cancelOracleRequestByRequester(
              ...convertCancelByRequesterParams(request, nonce),
            )`
$DIR/contracts/test/v0.7/Operator.test.ts:3614:35-3614:42: `.wait()`
$DIR/contracts/test/v0.7/Operator.test.ts:3621:11-3621:54: `await increaseTime5Minutes(ethers.provider)`
$DIR/contracts/test/v0.7/Operator.test.ts:3622:11-3626:14: `await operator
            .connect(roles.consumer)
            .cancelOracleRequestByRequester(
              ...convertCancelByRequesterParams(request, nonce),
            )`
$DIR/contracts/test/v0.7/Operator.test.ts:3622:25-3623:37: `
            .connect(roles.consumer)`
$DIR/contracts/test/v0.7/Operator.test.ts:3623:37-3626:14: `
            .cancelOracleRequestByRequester(
              ...convertCancelByRequesterParams(request, nonce),
            )`
$DIR/contracts/test/v0.7/Operator.test.ts:3628:11-3632:12: `await evmRevert(
            operator
              .connect(roles.consumer)
              .cancelOracleRequestByRequester(...convertCancelParams(request)),
          )`
$DIR/contracts/test/v0.7/Operator.test.ts:3629:21-3630:39: `
              .connect(roles.consumer)`
$DIR/contracts/test/v0.7/Operator.test.ts:3630:39-3631:79: `
              .cancelOracleRequestByRequester(...convertCancelParams(request))`
$DIR/contracts/test/v0.7/Operator.test.ts:3642:28-3642:62: `.utils.formatBytes32String('1337')`
$DIR/contracts/test/v0.7/Operator.test.ts:3645:32-3645:73: `.interface.getSighash('requestedBytes32')`
$DIR/contracts/test/v0.7/Operator.test.ts:3649:23-3649:32: `.from('')`
$DIR/contracts/test/v0.7/Operator.test.ts:3655:9-3655:52: `await increaseTime5Minutes(ethers.provider)`
$DIR/contracts/test/v0.7/Operator.test.ts:3657:9-3661:10: `await evmRevert(
          operator
            .connect(roles.stranger)
            .cancelOracleRequest(...convertCancelParams(fakeRequest)),
        )`
$DIR/contracts/test/v0.7/Operator.test.ts:3658:19-3659:37: `
            .connect(roles.stranger)`
$DIR/contracts/test/v0.7/Operator.test.ts:3659:37-3660:70: `
            .cancelOracleRequest(...convertCancelParams(fakeRequest))`
$DIR/contracts/test/v0.7/Operator.test.ts:3692:41-3692:69: `.balanceOf(operator.address)`
$DIR/contracts/test/v0.7/Operator.test.ts:3693:9-3693:53: `bigNumEquals(request.payment, oracleBalance)`
$DIR/contracts/test/v0.7/Operator.test.ts:3695:42-3697:10: `.balanceOf(
          await roles.consumer.getAddress(),
        )`
$DIR/contracts/test/v0.7/Operator.test.ts:3696:22-3696:44: `.consumer.getAddress()`
$DIR/contracts/test/v0.7/Operator.test.ts:3706:11-3710:12: `await evmRevert(
            operator
              .connect(roles.consumer)
              .cancelOracleRequest(...convertCancelParams(request)),
          )`
$DIR/contracts/test/v0.7/Operator.test.ts:3707:21-3708:39: `
              .connect(roles.consumer)`
$DIR/contracts/test/v0.7/Operator.test.ts:3708:39-3709:68: `
              .cancelOracleRequest(...convertCancelParams(request))`
$DIR/contracts/test/v0.7/Operator.test.ts:3716:11-3716:54: `await increaseTime5Minutes(ethers.provider)`
$DIR/contracts/test/v0.7/Operator.test.ts:3717:11-3719:66: `await operator
            .connect(roles.consumer)
            .cancelOracleRequest(...convertCancelParams(request))`
$DIR/contracts/test/v0.7/Operator.test.ts:3717:25-3718:37: `
            .connect(roles.consumer)`
$DIR/contracts/test/v0.7/Operator.test.ts:3718:37-3719:66: `
            .cancelOracleRequest(...convertCancelParams(request))`
$DIR/contracts/test/v0.7/Operator.test.ts:3720:37-3722:12: `.balanceOf(
            await roles.consumer.getAddress(),
          )`
$DIR/contracts/test/v0.7/Operator.test.ts:3721:24-3721:46: `.consumer.getAddress()`
$DIR/contracts/test/v0.7/Operator.test.ts:3728:11-3728:54: `await increaseTime5Minutes(ethers.provider)`
$DIR/contracts/test/v0.7/Operator.test.ts:3729:36-3730:37: `
            .connect(roles.consumer)`
$DIR/contracts/test/v0.7/Operator.test.ts:3730:37-3731:66: `
            .cancelOracleRequest(...convertCancelParams(request))`
$DIR/contracts/test/v0.7/Operator.test.ts:3732:35-3732:42: `.wait()`
$DIR/contracts/test/v0.7/Operator.test.ts:3739:11-3739:54: `await increaseTime5Minutes(ethers.provider)`
$DIR/contracts/test/v0.7/Operator.test.ts:3740:11-3742:66: `await operator
            .connect(roles.consumer)
            .cancelOracleRequest(...convertCancelParams(request))`
$DIR/contracts/test/v0.7/Operator.test.ts:3740:25-3741:37: `
            .connect(roles.consumer)`
$DIR/contracts/test/v0.7/Operator.test.ts:3741:37-3742:66: `
            .cancelOracleRequest(...convertCancelParams(request))`
$DIR/contracts/test/v0.7/Operator.test.ts:3744:11-3748:12: `await evmRevert(
            operator
              .connect(roles.consumer)
              .cancelOracleRequest(...convertCancelParams(request)),
          )`
$DIR/contracts/test/v0.7/Operator.test.ts:3745:21-3746:39: `
              .connect(roles.consumer)`
$DIR/contracts/test/v0.7/Operator.test.ts:3746:39-3747:68: `
              .cancelOracleRequest(...convertCancelParams(request))`
$DIR/contracts/test/v0.7/Operator.test.ts:3770:9-3772:10: `await evmRevert(
          operator.connect(roles.stranger).ownerForward(mock.address, payload),
        )`
$DIR/contracts/test/v0.7/Operator.test.ts:3771:19-3771:43: `.connect(roles.stranger)`
$DIR/contracts/test/v0.7/Operator.test.ts:3771:43-3771:79: `.ownerForward(mock.address, payload)`
$DIR/contracts/test/v0.7/Operator.test.ts:3779:43-3779:72: `.interface.getSighash('name')`
$DIR/contracts/test/v0.7/Operator.test.ts:3780:11-3785:12: `await evmRevert(
            operator
              .connect(roles.defaultAccount)
              .ownerForward(link.address, sighash),
            'Cannot call to LINK',
          )`
$DIR/contracts/test/v0.7/Operator.test.ts:3781:21-3782:45: `
              .connect(roles.defaultAccount)`
$DIR/contracts/test/v0.7/Operator.test.ts:3782:45-3783:51: `
              .ownerForward(link.address, sighash)`
$DIR/contracts/test/v0.7/Operator.test.ts:3791:36-3792:43: `
            .connect(roles.defaultAccount)`
$DIR/contracts/test/v0.7/Operator.test.ts:3792:43-3793:49: `
            .ownerForward(mock.address, payload)`
$DIR/contracts/test/v0.7/Operator.test.ts:3794:11-3794:26: `await tx.wait()`
$DIR/contracts/test/v0.7/Operator.test.ts:3794:19-3794:26: `.wait()`
$DIR/contracts/test/v0.7/Operator.test.ts:3795:34-3795:45: `.getBytes()`
$DIR/contracts/test/v0.7/Operator.test.ts:3799:11-3804:12: `await evmRevert(
            operator
              .connect(roles.defaultAccount)
              .ownerForward(zeroAddress, payload),
            'Must forward to a contract',
          )`
$DIR/contracts/test/v0.7/Operator.test.ts:3800:21-3801:45: `
              .connect(roles.defaultAccount)`
$DIR/contracts/test/v0.7/Operator.test.ts:3801:45-3802:50: `
              .ownerForward(zeroAddress, payload)`
$DIR/contracts/test/v0.7/Operator.test.ts:3808:36-3809:43: `
            .connect(roles.defaultAccount)`
$DIR/contracts/test/v0.7/Operator.test.ts:3809:43-3810:49: `
            .ownerForward(mock.address, payload)`
$DIR/contracts/test/v0.7/Operator.test.ts:3811:35-3811:42: `.wait()`
$DIR/contracts/test/v0.7/Operator.test.ts:3813:31-3817:12: `.interface.decodeEventLog(
            mock.interface.getEvent('SetBytes'),
            log.data,
            log.topics,
          )`
$DIR/contracts/test/v0.7/Operator.test.ts:3814:17-3814:48: `.interface.getEvent('SetBytes')`
$DIR/contracts/test/v0.7/Operator.test.ts:3818:30-3818:61: `.utils.getAddress(logData.from)`
$DIR/contracts/test/v0.7/OperatorFactory.test.ts:53:5-61:7: `publicAbi(operatorGenerator, [
      'created',
      'deployNewOperator',
      'deployNewOperatorAndForwarder',
      'deployNewForwarder',
      'deployNewForwarderAndTransferOwnership',
      'getChainlinkToken',
      'typeAndVersion',
    ])`
$DIR/contracts/test/v0.7/OperatorFactory.test.ts:67:32-67:49: `.typeAndVersion()`
$DIR/contracts/test/v0.7/OperatorFactory.test.ts:87:20-87:44: `.oracleNode.getAddress()`
$DIR/contracts/test/v0.7/OperatorFactory.test.ts:91:20-91:44: `.oracleNode.getAddress()`
$DIR/contracts/test/v0.7/OperatorFactory.test.ts:97:7-99:33: `operator = await operatorFactory
        .connect(roles.defaultAccount)
        .attach(emittedOperator)`
$DIR/contracts/test/v0.7/OperatorFactory.test.ts:97:39-98:39: `
        .connect(roles.defaultAccount)`
$DIR/contracts/test/v0.7/OperatorFactory.test.ts:98:39-99:33: `
        .attach(emittedOperator)`
$DIR/contracts/test/v0.7/OperatorFactory.test.ts:100:41-100:49: `.owner()`
$DIR/contracts/test/v0.7/OperatorFactory.test.ts:101:44-101:68: `.oracleNode.getAddress()`
$DIR/contracts/test/v0.7/OperatorFactory.test.ts:105:44-105:69: `.created(emittedOperator)`
$DIR/contracts/test/v0.7/OperatorFactory.test.ts:122:20-122:44: `.oracleNode.getAddress()`
$DIR/contracts/test/v0.7/OperatorFactory.test.ts:129:20-129:44: `.oracleNode.getAddress()`
$DIR/contracts/test/v0.7/OperatorFactory.test.ts:133:20-133:44: `.oracleNode.getAddress()`
$DIR/contracts/test/v0.7/OperatorFactory.test.ts:139:20-139:44: `.oracleNode.getAddress()`
$DIR/contracts/test/v0.7/OperatorFactory.test.ts:175:20-175:44: `.oracleNode.getAddress()`
$DIR/contracts/test/v0.7/OperatorFactory.test.ts:180:7-182:49: `operator = await operatorFactory
        .connect(roles.defaultAccount)
        .attach(receipt?.events?.[0]?.args?.[0])`
$DIR/contracts/test/v0.7/OperatorFactory.test.ts:180:39-181:39: `
        .connect(roles.defaultAccount)`
$DIR/contracts/test/v0.7/OperatorFactory.test.ts:181:39-182:49: `
        .attach(receipt?.events?.[0]?.args?.[0])`
$DIR/contracts/test/v0.7/OperatorFactory.test.ts:183:31-183:55: `.oracleNode.getAddress()`
$DIR/contracts/test/v0.7/OperatorFactory.test.ts:183:71-183:79: `.owner()`
$DIR/contracts/test/v0.7/OperatorFactory.test.ts:187:7-189:34: `forwarder = await forwarderFactory
        .connect(roles.defaultAccount)
        .attach(emittedForwarder)`
$DIR/contracts/test/v0.7/OperatorFactory.test.ts:187:41-188:39: `
        .connect(roles.defaultAccount)`
$DIR/contracts/test/v0.7/OperatorFactory.test.ts:188:39-189:34: `
        .attach(emittedForwarder)`
$DIR/contracts/test/v0.7/OperatorFactory.test.ts:190:62-190:70: `.owner()`
$DIR/contracts/test/v0.7/OperatorFactory.test.ts:194:44-194:69: `.created(emittedOperator)`
$DIR/contracts/test/v0.7/OperatorFactory.test.ts:195:44-195:70: `.created(emittedForwarder)`
$DIR/contracts/test/v0.7/OperatorFactory.test.ts:212:20-212:44: `.oracleNode.getAddress()`
$DIR/contracts/test/v0.7/OperatorFactory.test.ts:216:20-216:44: `.oracleNode.getAddress()`
$DIR/contracts/test/v0.7/OperatorFactory.test.ts:222:7-224:34: `forwarder = await forwarderFactory
        .connect(roles.defaultAccount)
        .attach(emittedForwarder)`
$DIR/contracts/test/v0.7/OperatorFactory.test.ts:222:41-223:39: `
        .connect(roles.defaultAccount)`
$DIR/contracts/test/v0.7/OperatorFactory.test.ts:223:39-224:34: `
        .attach(emittedForwarder)`
$DIR/contracts/test/v0.7/OperatorFactory.test.ts:225:42-225:50: `.owner()`
$DIR/contracts/test/v0.7/OperatorFactory.test.ts:226:44-226:68: `.oracleNode.getAddress()`
$DIR/contracts/test/v0.7/OperatorFactory.test.ts:230:44-230:70: `.created(emittedForwarder)`
$DIR/contracts/test/v0.7/OperatorFactory.test.ts:252:20-252:44: `.oracleNode.getAddress()`
$DIR/contracts/test/v0.7/OperatorFactory.test.ts:256:20-256:44: `.oracleNode.getAddress()`
$DIR/contracts/test/v0.7/OperatorFactory.test.ts:262:7-264:34: `forwarder = await forwarderFactory
        .connect(roles.defaultAccount)
        .attach(emittedForwarder)`
$DIR/contracts/test/v0.7/OperatorFactory.test.ts:262:41-263:39: `
        .connect(roles.defaultAccount)`
$DIR/contracts/test/v0.7/OperatorFactory.test.ts:263:39-264:34: `
        .attach(emittedForwarder)`
$DIR/contracts/test/v0.7/OperatorFactory.test.ts:265:42-265:50: `.owner()`
$DIR/contracts/test/v0.7/OperatorFactory.test.ts:266:44-266:68: `.oracleNode.getAddress()`
$DIR/contracts/test/v0.7/OperatorFactory.test.ts:271:45-271:69: `.oracleNode.getAddress()`
$DIR/contracts/test/v0.7/OperatorFactory.test.ts:273:49-273:71: `.stranger.getAddress()`
$DIR/contracts/test/v0.7/OperatorFactory.test.ts:278:45-278:69: `.oracleNode.getAddress()`
$DIR/contracts/test/v0.7/OperatorFactory.test.ts:280:49-280:71: `.stranger.getAddress()`
$DIR/contracts/test/v0.7/OperatorFactory.test.ts:282:36-285:8: `.utils.defaultAbiCoder.encode(
        ['bytes'],
        [message],
      )`
$DIR/contracts/test/v0.7/OperatorFactory.test.ts:290:44-290:70: `.created(emittedForwarder)`
$DIR/contracts/test/v0.7/StalenessFlaggingValidator.test.ts:60:5-74:7: `publicAbi(validator, [
      'update',
      'check',
      'setThresholds',
      'setFlagsAddress',
      'threshold',
      'flags',
      // Upkeep methods:
      'checkUpkeep',
      'performUpkeep',
      // Owned methods:
      'acceptOwnership',
      'owner',
      'transferOwnership',
    ])`
$DIR/contracts/test/v0.7/StalenessFlaggingValidator.test.ts:79:35-79:43: `.flags()`
$DIR/contracts/test/v0.7/StalenessFlaggingValidator.test.ts:83:35-83:43: `.owner()`
$DIR/contracts/test/v0.7/StalenessFlaggingValidator.test.ts:83:59-83:78: `.Carol.getAddress()`
$DIR/contracts/test/v0.7/StalenessFlaggingValidator.test.ts:91:50-91:58: `.flags()`
$DIR/contracts/test/v0.7/StalenessFlaggingValidator.test.ts:93:7-93:79: `await validator.connect(personas.Carol).setFlagsAddress(newFlagsAddress)`
$DIR/contracts/test/v0.7/StalenessFlaggingValidator.test.ts:93:22-93:46: `.connect(personas.Carol)`
$DIR/contracts/test/v0.7/StalenessFlaggingValidator.test.ts:93:46-93:79: `.setFlagsAddress(newFlagsAddress)`
$DIR/contracts/test/v0.7/StalenessFlaggingValidator.test.ts:95:52-95:60: `.flags()`
$DIR/contracts/test/v0.7/StalenessFlaggingValidator.test.ts:99:33-100:33: `
        .connect(personas.Carol)`
$DIR/contracts/test/v0.7/StalenessFlaggingValidator.test.ts:100:33-101:42: `
        .setFlagsAddress(newFlagsAddress)`
$DIR/contracts/test/v0.7/StalenessFlaggingValidator.test.ts:106:43-107:33: `
        .connect(personas.Carol)`
$DIR/contracts/test/v0.7/StalenessFlaggingValidator.test.ts:107:33-108:42: `
        .setFlagsAddress(newFlagsAddress)`
$DIR/contracts/test/v0.7/StalenessFlaggingValidator.test.ts:115:9-118:10: `await evmRevert(
          validator.connect(personas.Neil).setFlagsAddress(newFlagsAddress),
          'Only callable by owner',
        )`
$DIR/contracts/test/v0.7/StalenessFlaggingValidator.test.ts:116:20-116:43: `.connect(personas.Neil)`
$DIR/contracts/test/v0.7/StalenessFlaggingValidator.test.ts:116:43-116:76: `.setFlagsAddress(newFlagsAddress)`
$DIR/contracts/test/v0.7/StalenessFlaggingValidator.test.ts:147:9-152:10: `await evmRevert(
          validator
            .connect(personas.Neil)
            .setThresholds(aggregators, thresholds),
          'Only callable by owner',
        )`
$DIR/contracts/test/v0.7/StalenessFlaggingValidator.test.ts:148:20-149:36: `
            .connect(personas.Neil)`
$DIR/contracts/test/v0.7/StalenessFlaggingValidator.test.ts:149:36-150:52: `
            .setThresholds(aggregators, thresholds)`
$DIR/contracts/test/v0.7/StalenessFlaggingValidator.test.ts:156:9-161:10: `await evmRevert(
          validator
            .connect(personas.Carol)
            .setThresholds(aggregators, thresholds),
          'Different sized arrays',
        )`
$DIR/contracts/test/v0.7/StalenessFlaggingValidator.test.ts:157:20-158:37: `
            .connect(personas.Carol)`
$DIR/contracts/test/v0.7/StalenessFlaggingValidator.test.ts:158:37-159:52: `
            .setThresholds(aggregators, thresholds)`
$DIR/contracts/test/v0.7/StalenessFlaggingValidator.test.ts:181:40-181:64: `.threshold(agg1.address)`
$DIR/contracts/test/v0.7/StalenessFlaggingValidator.test.ts:182:41-182:65: `.threshold(agg2.address)`
$DIR/contracts/test/v0.7/StalenessFlaggingValidator.test.ts:199:11-201:52: `tx = await validator
            .connect(personas.Carol)
            .setThresholds(aggregators, thresholds)`
$DIR/contracts/test/v0.7/StalenessFlaggingValidator.test.ts:199:31-200:37: `
            .connect(personas.Carol)`
$DIR/contracts/test/v0.7/StalenessFlaggingValidator.test.ts:200:37-201:52: `
            .setThresholds(aggregators, thresholds)`
$DIR/contracts/test/v0.7/StalenessFlaggingValidator.test.ts:204:11-206:76: `tx = await validator
            .connect(personas.Carol)
            .setThresholds(aggregators, [flaggingThreshold1, newThreshold])`
$DIR/contracts/test/v0.7/StalenessFlaggingValidator.test.ts:204:31-205:37: `
            .connect(personas.Carol)`
$DIR/contracts/test/v0.7/StalenessFlaggingValidator.test.ts:205:37-206:76: `
            .setThresholds(aggregators, [flaggingThreshold1, newThreshold])`
$DIR/contracts/test/v0.7/StalenessFlaggingValidator.test.ts:239:41-239:60: `.check(aggregators)`
$DIR/contracts/test/v0.7/StalenessFlaggingValidator.test.ts:246:45-247:35: `
          .connect(personas.Carol)`
$DIR/contracts/test/v0.7/StalenessFlaggingValidator.test.ts:247:35-248:43: `
          .deploy(decimals, initialAnswer)`
$DIR/contracts/test/v0.7/StalenessFlaggingValidator.test.ts:249:41-249:63: `.check([agg3.address])`
$DIR/contracts/test/v0.7/StalenessFlaggingValidator.test.ts:256:44-256:62: `.latestTimestamp()`
$DIR/contracts/test/v0.7/StalenessFlaggingValidator.test.ts:257:48-259:10: `.sub(
          BigNumber.from(flaggingThreshold1 + 1),
        )`
$DIR/contracts/test/v0.7/StalenessFlaggingValidator.test.ts:258:20-258:49: `.from(flaggingThreshold1 + 1)`
$DIR/contracts/test/v0.7/StalenessFlaggingValidator.test.ts:260:9-265:10: `await agg1.updateRoundData(
          99,
          initialAnswer,
          staleTimestamp,
          staleTimestamp,
        )`
$DIR/contracts/test/v0.7/StalenessFlaggingValidator.test.ts:260:19-265:10: `.updateRoundData(
          99,
          initialAnswer,
          staleTimestamp,
          staleTimestamp,
        )`
$DIR/contracts/test/v0.7/StalenessFlaggingValidator.test.ts:266:41-266:60: `.check(aggregators)`
$DIR/contracts/test/v0.7/StalenessFlaggingValidator.test.ts:275:42-275:60: `.latestTimestamp()`
$DIR/contracts/test/v0.7/StalenessFlaggingValidator.test.ts:276:46-278:10: `.sub(
          BigNumber.from(flaggingThreshold1 + 1),
        )`
$DIR/contracts/test/v0.7/StalenessFlaggingValidator.test.ts:277:20-277:49: `.from(flaggingThreshold1 + 1)`
$DIR/contracts/test/v0.7/StalenessFlaggingValidator.test.ts:279:9-284:10: `await agg1.updateRoundData(
          99,
          initialAnswer,
          staleTimestamp,
          staleTimestamp,
        )`
$DIR/contracts/test/v0.7/StalenessFlaggingValidator.test.ts:279:19-284:10: `.updateRoundData(
          99,
          initialAnswer,
          staleTimestamp,
          staleTimestamp,
        )`
$DIR/contracts/test/v0.7/StalenessFlaggingValidator.test.ts:286:9-286:56: `currentTimestamp = await agg2.latestTimestamp()`
$DIR/contracts/test/v0.7/StalenessFlaggingValidator.test.ts:286:38-286:56: `.latestTimestamp()`
$DIR/contracts/test/v0.7/StalenessFlaggingValidator.test.ts:287:9-289:10: `staleTimestamp = currentTimestamp.sub(
          BigNumber.from(flaggingThreshold2 + 1),
        )`
$DIR/contracts/test/v0.7/StalenessFlaggingValidator.test.ts:287:42-289:10: `.sub(
          BigNumber.from(flaggingThreshold2 + 1),
        )`
$DIR/contracts/test/v0.7/StalenessFlaggingValidator.test.ts:288:20-288:49: `.from(flaggingThreshold2 + 1)`
$DIR/contracts/test/v0.7/StalenessFlaggingValidator.test.ts:290:9-295:10: `await agg2.updateRoundData(
          99,
          initialAnswer,
          staleTimestamp,
          staleTimestamp,
        )`
$DIR/contracts/test/v0.7/StalenessFlaggingValidator.test.ts:290:19-295:10: `.updateRoundData(
          99,
          initialAnswer,
          staleTimestamp,
          staleTimestamp,
        )`
$DIR/contracts/test/v0.7/StalenessFlaggingValidator.test.ts:297:41-297:60: `.check(aggregators)`
$DIR/contracts/test/v0.7/StalenessFlaggingValidator.test.ts:327:35-327:55: `.update(aggregators)`
$DIR/contracts/test/v0.7/StalenessFlaggingValidator.test.ts:335:45-336:35: `
          .connect(personas.Carol)`
$DIR/contracts/test/v0.7/StalenessFlaggingValidator.test.ts:336:35-337:43: `
          .deploy(decimals, initialAnswer)`
$DIR/contracts/test/v0.7/StalenessFlaggingValidator.test.ts:338:35-338:58: `.update([agg3.address])`
$DIR/contracts/test/v0.7/StalenessFlaggingValidator.test.ts:346:44-346:62: `.latestTimestamp()`
$DIR/contracts/test/v0.7/StalenessFlaggingValidator.test.ts:347:48-349:10: `.sub(
          BigNumber.from(flaggingThreshold1 + 1),
        )`
$DIR/contracts/test/v0.7/StalenessFlaggingValidator.test.ts:348:20-348:49: `.from(flaggingThreshold1 + 1)`
$DIR/contracts/test/v0.7/StalenessFlaggingValidator.test.ts:350:9-355:10: `await agg1.updateRoundData(
          99,
          initialAnswer,
          staleTimestamp,
          staleTimestamp,
        )`
$DIR/contracts/test/v0.7/StalenessFlaggingValidator.test.ts:350:19-355:10: `.updateRoundData(
          99,
          initialAnswer,
          staleTimestamp,
          staleTimestamp,
        )`
$DIR/contracts/test/v0.7/StalenessFlaggingValidator.test.ts:357:35-357:55: `.update(aggregators)`
$DIR/contracts/test/v0.7/StalenessFlaggingValidator.test.ts:366:42-366:60: `.latestTimestamp()`
$DIR/contracts/test/v0.7/StalenessFlaggingValidator.test.ts:367:46-369:10: `.sub(
          BigNumber.from(flaggingThreshold1 + 1),
        )`
$DIR/contracts/test/v0.7/StalenessFlaggingValidator.test.ts:368:20-368:49: `.from(flaggingThreshold1 + 1)`
$DIR/contracts/test/v0.7/StalenessFlaggingValidator.test.ts:370:9-375:10: `await agg1.updateRoundData(
          99,
          initialAnswer,
          staleTimestamp,
          staleTimestamp,
        )`
$DIR/contracts/test/v0.7/StalenessFlaggingValidator.test.ts:370:19-375:10: `.updateRoundData(
          99,
          initialAnswer,
          staleTimestamp,
          staleTimestamp,
        )`
$DIR/contracts/test/v0.7/StalenessFlaggingValidator.test.ts:377:9-377:56: `currentTimestamp = await agg2.latestTimestamp()`
$DIR/contracts/test/v0.7/StalenessFlaggingValidator.test.ts:377:38-377:56: `.latestTimestamp()`
$DIR/contracts/test/v0.7/StalenessFlaggingValidator.test.ts:378:9-380:10: `staleTimestamp = currentTimestamp.sub(
          BigNumber.from(flaggingThreshold2 + 1),
        )`
$DIR/contracts/test/v0.7/StalenessFlaggingValidator.test.ts:378:42-380:10: `.sub(
          BigNumber.from(flaggingThreshold2 + 1),
        )`
$DIR/contracts/test/v0.7/StalenessFlaggingValidator.test.ts:379:20-379:49: `.from(flaggingThreshold2 + 1)`
$DIR/contracts/test/v0.7/StalenessFlaggingValidator.test.ts:381:9-386:10: `await agg2.updateRoundData(
          99,
          initialAnswer,
          staleTimestamp,
          staleTimestamp,
        )`
$DIR/contracts/test/v0.7/StalenessFlaggingValidator.test.ts:381:19-386:10: `.updateRoundData(
          99,
          initialAnswer,
          staleTimestamp,
          staleTimestamp,
        )`
$DIR/contracts/test/v0.7/StalenessFlaggingValidator.test.ts:388:35-388:55: `.update(aggregators)`
$DIR/contracts/test/v0.7/StalenessFlaggingValidator.test.ts:418:33-421:10: `.utils.defaultAbiCoder.encode(
          ['address[]'],
          [aggregators],
        )`
$DIR/contracts/test/v0.7/StalenessFlaggingValidator.test.ts:422:41-422:64: `.checkUpkeep(bytesData)`
$DIR/contracts/test/v0.7/StalenessFlaggingValidator.test.ts:425:39-428:10: `.utils.defaultAbiCoder.decode(
          ['address[]'],
          response?.[1],
        )`
$DIR/contracts/test/v0.7/StalenessFlaggingValidator.test.ts:435:45-436:35: `
          .connect(personas.Carol)`
$DIR/contracts/test/v0.7/StalenessFlaggingValidator.test.ts:436:35-437:43: `
          .deploy(decimals, initialAnswer)`
$DIR/contracts/test/v0.7/StalenessFlaggingValidator.test.ts:438:33-441:10: `.utils.defaultAbiCoder.encode(
          ['address[]'],
          [[agg3.address]],
        )`
$DIR/contracts/test/v0.7/StalenessFlaggingValidator.test.ts:442:41-442:64: `.checkUpkeep(bytesData)`
$DIR/contracts/test/v0.7/StalenessFlaggingValidator.test.ts:445:39-448:10: `.utils.defaultAbiCoder.decode(
          ['address[]'],
          response?.[1],
        )`
$DIR/contracts/test/v0.7/StalenessFlaggingValidator.test.ts:455:44-455:62: `.latestTimestamp()`
$DIR/contracts/test/v0.7/StalenessFlaggingValidator.test.ts:456:48-458:10: `.sub(
          BigNumber.from(flaggingThreshold1 + 1),
        )`
$DIR/contracts/test/v0.7/StalenessFlaggingValidator.test.ts:457:20-457:49: `.from(flaggingThreshold1 + 1)`
$DIR/contracts/test/v0.7/StalenessFlaggingValidator.test.ts:459:9-464:10: `await agg1.updateRoundData(
          99,
          initialAnswer,
          staleTimestamp,
          staleTimestamp,
        )`
$DIR/contracts/test/v0.7/StalenessFlaggingValidator.test.ts:459:19-464:10: `.updateRoundData(
          99,
          initialAnswer,
          staleTimestamp,
          staleTimestamp,
        )`
$DIR/contracts/test/v0.7/StalenessFlaggingValidator.test.ts:466:33-469:10: `.utils.defaultAbiCoder.encode(
          ['address[]'],
          [aggregators],
        )`
$DIR/contracts/test/v0.7/StalenessFlaggingValidator.test.ts:470:41-470:64: `.checkUpkeep(bytesData)`
$DIR/contracts/test/v0.7/StalenessFlaggingValidator.test.ts:473:39-476:10: `.utils.defaultAbiCoder.decode(
          ['address[]'],
          response?.[1],
        )`
$DIR/contracts/test/v0.7/StalenessFlaggingValidator.test.ts:485:42-485:60: `.latestTimestamp()`
$DIR/contracts/test/v0.7/StalenessFlaggingValidator.test.ts:486:46-488:10: `.sub(
          BigNumber.from(flaggingThreshold1 + 1),
        )`
$DIR/contracts/test/v0.7/StalenessFlaggingValidator.test.ts:487:20-487:49: `.from(flaggingThreshold1 + 1)`
$DIR/contracts/test/v0.7/StalenessFlaggingValidator.test.ts:489:9-494:10: `await agg1.updateRoundData(
          99,
          initialAnswer,
          staleTimestamp,
          staleTimestamp,
        )`
$DIR/contracts/test/v0.7/StalenessFlaggingValidator.test.ts:489:19-494:10: `.updateRoundData(
          99,
          initialAnswer,
          staleTimestamp,
          staleTimestamp,
        )`
$DIR/contracts/test/v0.7/StalenessFlaggingValidator.test.ts:496:9-496:56: `currentTimestamp = await agg2.latestTimestamp()`
$DIR/contracts/test/v0.7/StalenessFlaggingValidator.test.ts:496:38-496:56: `.latestTimestamp()`
$DIR/contracts/test/v0.7/StalenessFlaggingValidator.test.ts:497:9-499:10: `staleTimestamp = currentTimestamp.sub(
          BigNumber.from(flaggingThreshold2 + 1),
        )`
$DIR/contracts/test/v0.7/StalenessFlaggingValidator.test.ts:497:42-499:10: `.sub(
          BigNumber.from(flaggingThreshold2 + 1),
        )`
$DIR/contracts/test/v0.7/StalenessFlaggingValidator.test.ts:498:20-498:49: `.from(flaggingThreshold2 + 1)`
$DIR/contracts/test/v0.7/StalenessFlaggingValidator.test.ts:500:9-505:10: `await agg2.updateRoundData(
          99,
          initialAnswer,
          staleTimestamp,
          staleTimestamp,
        )`
$DIR/contracts/test/v0.7/StalenessFlaggingValidator.test.ts:500:19-505:10: `.updateRoundData(
          99,
          initialAnswer,
          staleTimestamp,
          staleTimestamp,
        )`
$DIR/contracts/test/v0.7/StalenessFlaggingValidator.test.ts:507:33-510:10: `.utils.defaultAbiCoder.encode(
          ['address[]'],
          [aggregators],
        )`
$DIR/contracts/test/v0.7/StalenessFlaggingValidator.test.ts:511:41-511:64: `.checkUpkeep(bytesData)`
$DIR/contracts/test/v0.7/StalenessFlaggingValidator.test.ts:514:39-517:10: `.utils.defaultAbiCoder.decode(
          ['address[]'],
          response?.[1],
        )`
$DIR/contracts/test/v0.7/StalenessFlaggingValidator.test.ts:547:33-550:10: `.utils.defaultAbiCoder.encode(
          ['address[]'],
          [aggregators],
        )`
$DIR/contracts/test/v0.7/StalenessFlaggingValidator.test.ts:551:35-551:60: `.performUpkeep(bytesData)`
$DIR/contracts/test/v0.7/StalenessFlaggingValidator.test.ts:559:45-560:35: `
          .connect(personas.Carol)`
$DIR/contracts/test/v0.7/StalenessFlaggingValidator.test.ts:560:35-561:43: `
          .deploy(decimals, initialAnswer)`
$DIR/contracts/test/v0.7/StalenessFlaggingValidator.test.ts:562:33-565:10: `.utils.defaultAbiCoder.encode(
          ['address[]'],
          [[agg3.address]],
        )`
$DIR/contracts/test/v0.7/StalenessFlaggingValidator.test.ts:566:35-566:60: `.performUpkeep(bytesData)`
$DIR/contracts/test/v0.7/StalenessFlaggingValidator.test.ts:574:44-574:62: `.latestTimestamp()`
$DIR/contracts/test/v0.7/StalenessFlaggingValidator.test.ts:575:48-577:10: `.sub(
          BigNumber.from(flaggingThreshold1 + 1),
        )`
$DIR/contracts/test/v0.7/StalenessFlaggingValidator.test.ts:576:20-576:49: `.from(flaggingThreshold1 + 1)`
$DIR/contracts/test/v0.7/StalenessFlaggingValidator.test.ts:578:9-583:10: `await agg1.updateRoundData(
          99,
          initialAnswer,
          staleTimestamp,
          staleTimestamp,
        )`
$DIR/contracts/test/v0.7/StalenessFlaggingValidator.test.ts:578:19-583:10: `.updateRoundData(
          99,
          initialAnswer,
          staleTimestamp,
          staleTimestamp,
        )`
$DIR/contracts/test/v0.7/StalenessFlaggingValidator.test.ts:585:33-588:10: `.utils.defaultAbiCoder.encode(
          ['address[]'],
          [aggregators],
        )`
$DIR/contracts/test/v0.7/StalenessFlaggingValidator.test.ts:589:35-589:60: `.performUpkeep(bytesData)`
$DIR/contracts/test/v0.7/StalenessFlaggingValidator.test.ts:598:42-598:60: `.latestTimestamp()`
$DIR/contracts/test/v0.7/StalenessFlaggingValidator.test.ts:599:46-601:10: `.sub(
          BigNumber.from(flaggingThreshold1 + 1),
        )`
$DIR/contracts/test/v0.7/StalenessFlaggingValidator.test.ts:600:20-600:49: `.from(flaggingThreshold1 + 1)`
$DIR/contracts/test/v0.7/StalenessFlaggingValidator.test.ts:602:9-607:10: `await agg1.updateRoundData(
          99,
          initialAnswer,
          staleTimestamp,
          staleTimestamp,
        )`
$DIR/contracts/test/v0.7/StalenessFlaggingValidator.test.ts:602:19-607:10: `.updateRoundData(
          99,
          initialAnswer,
          staleTimestamp,
          staleTimestamp,
        )`
$DIR/contracts/test/v0.7/StalenessFlaggingValidator.test.ts:609:9-609:56: `currentTimestamp = await agg2.latestTimestamp()`
$DIR/contracts/test/v0.7/StalenessFlaggingValidator.test.ts:609:38-609:56: `.latestTimestamp()`
$DIR/contracts/test/v0.7/StalenessFlaggingValidator.test.ts:610:9-612:10: `staleTimestamp = currentTimestamp.sub(
          BigNumber.from(flaggingThreshold2 + 1),
        )`
$DIR/contracts/test/v0.7/StalenessFlaggingValidator.test.ts:610:42-612:10: `.sub(
          BigNumber.from(flaggingThreshold2 + 1),
        )`
$DIR/contracts/test/v0.7/StalenessFlaggingValidator.test.ts:611:20-611:49: `.from(flaggingThreshold2 + 1)`
$DIR/contracts/test/v0.7/StalenessFlaggingValidator.test.ts:613:9-618:10: `await agg2.updateRoundData(
          99,
          initialAnswer,
          staleTimestamp,
          staleTimestamp,
        )`
$DIR/contracts/test/v0.7/StalenessFlaggingValidator.test.ts:613:19-618:10: `.updateRoundData(
          99,
          initialAnswer,
          staleTimestamp,
          staleTimestamp,
        )`
$DIR/contracts/test/v0.7/StalenessFlaggingValidator.test.ts:620:33-623:10: `.utils.defaultAbiCoder.encode(
          ['address[]'],
          [aggregators],
        )`
$DIR/contracts/test/v0.7/StalenessFlaggingValidator.test.ts:624:35-624:60: `.performUpkeep(bytesData)`
$DIR/contracts/test/v0.7/UpkeepRegistrationRequests.test.ts:127:45-127:62: `.typeAndVersion()`
$DIR/contracts/test/v0.7/UpkeepRegistrationRequests.test.ts:134:7-148:8: `await evmRevert(
        registrar
          .connect(someAddress)
          .register(
            upkeepName,
            emptyBytes,
            mock.address,
            executeGas,
            await admin.getAddress(),
            emptyBytes,
            amount,
            source,
          ),
        'Must use LINK token',
      )`
$DIR/contracts/test/v0.7/UpkeepRegistrationRequests.test.ts:135:18-136:32: `
          .connect(someAddress)`
$DIR/contracts/test/v0.7/UpkeepRegistrationRequests.test.ts:136:32-146:12: `
          .register(
            upkeepName,
            emptyBytes,
            mock.address,
            executeGas,
            await admin.getAddress(),
            emptyBytes,
            amount,
            source,
          )`
$DIR/contracts/test/v0.7/UpkeepRegistrationRequests.test.ts:142:24-142:37: `.getAddress()`
$DIR/contracts/test/v0.7/UpkeepRegistrationRequests.test.ts:152:7-160:10: `await registrar
        .connect(registrarOwner)
        .setRegistrationConfig(
          true,
          window_small,
          threshold_big,
          registry.address,
          minLINKJuels,
        )`
$DIR/contracts/test/v0.7/UpkeepRegistrationRequests.test.ts:152:22-153:33: `
        .connect(registrarOwner)`
$DIR/contracts/test/v0.7/UpkeepRegistrationRequests.test.ts:153:33-160:10: `
        .setRegistrationConfig(
          true,
          window_small,
          threshold_big,
          registry.address,
          minLINKJuels,
        )`
$DIR/contracts/test/v0.7/UpkeepRegistrationRequests.test.ts:162:40-174:8: `.interface.encodeFunctionData(
        'register',
        [
          upkeepName,
          emptyBytes,
          mock.address,
          executeGas,
          await admin.getAddress(),
          emptyBytes,
          amount1,
          source,
        ],
      )`
$DIR/contracts/test/v0.7/UpkeepRegistrationRequests.test.ts:169:22-169:35: `.getAddress()`
$DIR/contracts/test/v0.7/UpkeepRegistrationRequests.test.ts:176:7-179:8: `await evmRevert(
        linkToken.transferAndCall(registrar.address, amount, abiEncodedBytes),
        'Amount mismatch',
      )`
$DIR/contracts/test/v0.7/UpkeepRegistrationRequests.test.ts:177:18-177:78: `.transferAndCall(registrar.address, amount, abiEncodedBytes)`
$DIR/contracts/test/v0.7/UpkeepRegistrationRequests.test.ts:183:40-195:8: `.interface.encodeFunctionData(
        'register',
        [
          upkeepName,
          emptyBytes,
          mock.address,
          executeGas,
          '0x0000000000000000000000000000000000000000',
          emptyBytes,
          amount,
          source,
        ],
      )`
$DIR/contracts/test/v0.7/UpkeepRegistrationRequests.test.ts:197:7-200:8: `await evmRevert(
        linkToken.transferAndCall(registrar.address, amount, abiEncodedBytes),
        'Unable to create request',
      )`
$DIR/contracts/test/v0.7/UpkeepRegistrationRequests.test.ts:198:18-198:78: `.transferAndCall(registrar.address, amount, abiEncodedBytes)`
$DIR/contracts/test/v0.7/UpkeepRegistrationRequests.test.ts:205:41-205:58: `.getUpkeepCount()`
$DIR/contracts/test/v0.7/UpkeepRegistrationRequests.test.ts:208:7-216:10: `await registrar
        .connect(registrarOwner)
        .setRegistrationConfig(
          true,
          window_small,
          threshold_big,
          registry.address,
          minLINKJuels,
        )`
$DIR/contracts/test/v0.7/UpkeepRegistrationRequests.test.ts:208:22-209:33: `
        .connect(registrarOwner)`
$DIR/contracts/test/v0.7/UpkeepRegistrationRequests.test.ts:209:33-216:10: `
        .setRegistrationConfig(
          true,
          window_small,
          threshold_big,
          registry.address,
          minLINKJuels,
        )`
$DIR/contracts/test/v0.7/UpkeepRegistrationRequests.test.ts:219:40-231:8: `.interface.encodeFunctionData(
        'register',
        [
          upkeepName,
          emptyBytes,
          mock.address,
          executeGas,
          await admin.getAddress(),
          emptyBytes,
          amount,
          source,
        ],
      )`
$DIR/contracts/test/v0.7/UpkeepRegistrationRequests.test.ts:226:22-226:35: `.getAddress()`
$DIR/contracts/test/v0.7/UpkeepRegistrationRequests.test.ts:232:33-236:8: `.transferAndCall(
        registrar.address,
        amount,
        abiEncodedBytes,
      )`
$DIR/contracts/test/v0.7/UpkeepRegistrationRequests.test.ts:239:39-239:62: `.getUpkeep(upkeepCount)`
$DIR/contracts/test/v0.7/UpkeepRegistrationRequests.test.ts:241:48-241:61: `.getAddress()`
$DIR/contracts/test/v0.7/UpkeepRegistrationRequests.test.ts:243:29-243:48: `.balance.toString()`
$DIR/contracts/test/v0.7/UpkeepRegistrationRequests.test.ts:252:41-252:58: `.getUpkeepCount()`
$DIR/contracts/test/v0.7/UpkeepRegistrationRequests.test.ts:255:7-263:10: `await registrar
        .connect(registrarOwner)
        .setRegistrationConfig(
          false,
          window_small,
          threshold_big,
          registry.address,
          minLINKJuels,
        )`
$DIR/contracts/test/v0.7/UpkeepRegistrationRequests.test.ts:255:22-256:33: `
        .connect(registrarOwner)`
$DIR/contracts/test/v0.7/UpkeepRegistrationRequests.test.ts:256:33-263:10: `
        .setRegistrationConfig(
          false,
          window_small,
          threshold_big,
          registry.address,
          minLINKJuels,
        )`
$DIR/contracts/test/v0.7/UpkeepRegistrationRequests.test.ts:266:40-278:8: `.interface.encodeFunctionData(
        'register',
        [
          upkeepName,
          emptyBytes,
          mock.address,
          executeGas,
          await admin.getAddress(),
          emptyBytes,
          amount,
          source,
        ],
      )`
$DIR/contracts/test/v0.7/UpkeepRegistrationRequests.test.ts:273:22-273:35: `.getAddress()`
$DIR/contracts/test/v0.7/UpkeepRegistrationRequests.test.ts:279:33-283:8: `.transferAndCall(
        registrar.address,
        amount,
        abiEncodedBytes,
      )`
$DIR/contracts/test/v0.7/UpkeepRegistrationRequests.test.ts:284:31-284:38: `.wait()`
$DIR/contracts/test/v0.7/UpkeepRegistrationRequests.test.ts:287:40-287:57: `.getUpkeepCount()`
$DIR/contracts/test/v0.7/UpkeepRegistrationRequests.test.ts:296:45-296:69: `.getPendingRequest(hash)`
$DIR/contracts/test/v0.7/UpkeepRegistrationRequests.test.ts:297:31-297:44: `.getAddress()`
$DIR/contracts/test/v0.7/UpkeepRegistrationRequests.test.ts:298:23-298:45: `.eq(pendingRequest[1])`
$DIR/contracts/test/v0.7/UpkeepRegistrationRequests.test.ts:303:41-303:58: `.getUpkeepCount()`
$DIR/contracts/test/v0.7/UpkeepRegistrationRequests.test.ts:306:7-314:10: `await registrar
        .connect(registrarOwner)
        .setRegistrationConfig(
          true,
          window_big,
          threshold_small,
          registry.address,
          minLINKJuels,
        )`
$DIR/contracts/test/v0.7/UpkeepRegistrationRequests.test.ts:306:22-307:33: `
        .connect(registrarOwner)`
$DIR/contracts/test/v0.7/UpkeepRegistrationRequests.test.ts:307:33-314:10: `
        .setRegistrationConfig(
          true,
          window_big,
          threshold_small,
          registry.address,
          minLINKJuels,
        )`
$DIR/contracts/test/v0.7/UpkeepRegistrationRequests.test.ts:316:38-325:9: `.interface.encodeFunctionData('register', [
        upkeepName,
        emptyBytes,
        mock.address,
        executeGas,
        await admin.getAddress(),
        emptyBytes,
        amount,
        source,
      ])`
$DIR/contracts/test/v0.7/UpkeepRegistrationRequests.test.ts:321:20-321:33: `.getAddress()`
$DIR/contracts/test/v0.7/UpkeepRegistrationRequests.test.ts:328:7-332:8: `await linkToken.transferAndCall(
        registrar.address,
        amount,
        abiEncodedBytes,
      )`
$DIR/contracts/test/v0.7/UpkeepRegistrationRequests.test.ts:328:22-332:8: `.transferAndCall(
        registrar.address,
        amount,
        abiEncodedBytes,
      )`
$DIR/contracts/test/v0.7/UpkeepRegistrationRequests.test.ts:333:47-333:64: `.getUpkeepCount()`
$DIR/contracts/test/v0.7/UpkeepRegistrationRequests.test.ts:339:9-348:11: `abiEncodedBytes = registrar.interface.encodeFunctionData('register', [
          upkeepName,
          emptyBytes,
          mock.address,
          executeGas.toNumber() + step, // make unique hash
          await admin.getAddress(),
          emptyBytes,
          amount,
          source,
        ])`
$DIR/contracts/test/v0.7/UpkeepRegistrationRequests.test.ts:339:36-348:11: `.interface.encodeFunctionData('register', [
          upkeepName,
          emptyBytes,
          mock.address,
          executeGas.toNumber() + step, // make unique hash
          await admin.getAddress(),
          emptyBytes,
          amount,
          source,
        ])`
$DIR/contracts/test/v0.7/UpkeepRegistrationRequests.test.ts:344:22-344:35: `.getAddress()`
$DIR/contracts/test/v0.7/UpkeepRegistrationRequests.test.ts:350:9-354:10: `await linkToken.transferAndCall(
          registrar.address,
          amount,
          abiEncodedBytes,
        )`
$DIR/contracts/test/v0.7/UpkeepRegistrationRequests.test.ts:350:24-354:10: `.transferAndCall(
          registrar.address,
          amount,
          abiEncodedBytes,
        )`
$DIR/contracts/test/v0.7/UpkeepRegistrationRequests.test.ts:356:40-356:57: `.getUpkeepCount()`
$DIR/contracts/test/v0.7/UpkeepRegistrationRequests.test.ts:406:27-407:27: `
        .connect(stranger)`
$DIR/contracts/test/v0.7/UpkeepRegistrationRequests.test.ts:407:27-415:10: `
        .approve(
          upkeepName,
          mock.address,
          executeGas,
          await admin.getAddress(),
          emptyBytes,
          hash,
        )`
$DIR/contracts/test/v0.7/UpkeepRegistrationRequests.test.ts:412:22-412:35: `.getAddress()`
$DIR/contracts/test/v0.7/UpkeepRegistrationRequests.test.ts:416:7-416:52: `await evmRevert(tx, 'Only callable by owner')`
$DIR/contracts/test/v0.7/UpkeepRegistrationRequests.test.ts:420:27-421:33: `
        .connect(registrarOwner)`
$DIR/contracts/test/v0.7/UpkeepRegistrationRequests.test.ts:421:33-429:10: `
        .approve(
          upkeepName,
          mock.address,
          executeGas,
          await admin.getAddress(),
          emptyBytes,
          '0x000000000000000000000000322813fd9a801c5507c9de605d63cea4f2ce6c44',
        )`
$DIR/contracts/test/v0.7/UpkeepRegistrationRequests.test.ts:426:22-426:35: `.getAddress()`
$DIR/contracts/test/v0.7/UpkeepRegistrationRequests.test.ts:430:7-430:53: `await evmRevert(tx, errorMsgs.requestNotFound)`
$DIR/contracts/test/v0.7/UpkeepRegistrationRequests.test.ts:434:25-435:33: `
        .connect(registrarOwner)`
$DIR/contracts/test/v0.7/UpkeepRegistrationRequests.test.ts:435:33-443:10: `
        .approve(
          upkeepName,
          ethers.Wallet.createRandom().address,
          executeGas,
          await admin.getAddress(),
          emptyBytes,
          hash,
        )`
$DIR/contracts/test/v0.7/UpkeepRegistrationRequests.test.ts:438:17-438:39: `.Wallet.createRandom()`
$DIR/contracts/test/v0.7/UpkeepRegistrationRequests.test.ts:440:22-440:35: `.getAddress()`
$DIR/contracts/test/v0.7/UpkeepRegistrationRequests.test.ts:444:7-444:49: `await evmRevert(tx, errorMsgs.hashPayload)`
$DIR/contracts/test/v0.7/UpkeepRegistrationRequests.test.ts:445:7-454:10: `tx = registrar
        .connect(registrarOwner)
        .approve(
          upkeepName,
          mock.address,
          10000,
          await admin.getAddress(),
          emptyBytes,
          hash,
        )`
$DIR/contracts/test/v0.7/UpkeepRegistrationRequests.test.ts:445:21-446:33: `
        .connect(registrarOwner)`
$DIR/contracts/test/v0.7/UpkeepRegistrationRequests.test.ts:446:33-454:10: `
        .approve(
          upkeepName,
          mock.address,
          10000,
          await admin.getAddress(),
          emptyBytes,
          hash,
        )`
$DIR/contracts/test/v0.7/UpkeepRegistrationRequests.test.ts:451:22-451:35: `.getAddress()`
$DIR/contracts/test/v0.7/UpkeepRegistrationRequests.test.ts:455:7-455:49: `await evmRevert(tx, errorMsgs.hashPayload)`
$DIR/contracts/test/v0.7/UpkeepRegistrationRequests.test.ts:456:7-465:10: `tx = registrar
        .connect(registrarOwner)
        .approve(
          upkeepName,
          mock.address,
          executeGas,
          ethers.Wallet.createRandom().address,
          emptyBytes,
          hash,
        )`
$DIR/contracts/test/v0.7/UpkeepRegistrationRequests.test.ts:456:21-457:33: `
        .connect(registrarOwner)`
$DIR/contracts/test/v0.7/UpkeepRegistrationRequests.test.ts:457:33-465:10: `
        .approve(
          upkeepName,
          mock.address,
          executeGas,
          ethers.Wallet.createRandom().address,
          emptyBytes,
          hash,
        )`
$DIR/contracts/test/v0.7/UpkeepRegistrationRequests.test.ts:462:17-462:39: `.Wallet.createRandom()`
$DIR/contracts/test/v0.7/UpkeepRegistrationRequests.test.ts:466:7-466:49: `await evmRevert(tx, errorMsgs.hashPayload)`
$DIR/contracts/test/v0.7/UpkeepRegistrationRequests.test.ts:467:7-476:10: `tx = registrar
        .connect(registrarOwner)
        .approve(
          upkeepName,
          mock.address,
          executeGas,
          await admin.getAddress(),
          '0x1234',
          hash,
        )`
$DIR/contracts/test/v0.7/UpkeepRegistrationRequests.test.ts:467:21-468:33: `
        .connect(registrarOwner)`
$DIR/contracts/test/v0.7/UpkeepRegistrationRequests.test.ts:468:33-476:10: `
        .approve(
          upkeepName,
          mock.address,
          executeGas,
          await admin.getAddress(),
          '0x1234',
          hash,
        )`
$DIR/contracts/test/v0.7/UpkeepRegistrationRequests.test.ts:473:22-473:35: `.getAddress()`
$DIR/contracts/test/v0.7/UpkeepRegistrationRequests.test.ts:477:7-477:49: `await evmRevert(tx, errorMsgs.hashPayload)`
$DIR/contracts/test/v0.7/UpkeepRegistrationRequests.test.ts:481:33-482:33: `
        .connect(registrarOwner)`
$DIR/contracts/test/v0.7/UpkeepRegistrationRequests.test.ts:482:33-490:10: `
        .approve(
          upkeepName,
          mock.address,
          executeGas,
          await admin.getAddress(),
          emptyBytes,
          hash,
        )`
$DIR/contracts/test/v0.7/UpkeepRegistrationRequests.test.ts:487:22-487:35: `.getAddress()`
$DIR/contracts/test/v0.7/UpkeepRegistrationRequests.test.ts:495:7-504:10: `await registrar
        .connect(registrarOwner)
        .approve(
          upkeepName,
          mock.address,
          executeGas,
          await admin.getAddress(),
          emptyBytes,
          hash,
        )`
$DIR/contracts/test/v0.7/UpkeepRegistrationRequests.test.ts:495:22-496:33: `
        .connect(registrarOwner)`
$DIR/contracts/test/v0.7/UpkeepRegistrationRequests.test.ts:496:33-504:10: `
        .approve(
          upkeepName,
          mock.address,
          executeGas,
          await admin.getAddress(),
          emptyBytes,
          hash,
        )`
$DIR/contracts/test/v0.7/UpkeepRegistrationRequests.test.ts:501:22-501:35: `.getAddress()`
$DIR/contracts/test/v0.7/UpkeepRegistrationRequests.test.ts:505:27-506:33: `
        .connect(registrarOwner)`
$DIR/contracts/test/v0.7/UpkeepRegistrationRequests.test.ts:506:33-514:10: `
        .approve(
          upkeepName,
          mock.address,
          executeGas,
          await admin.getAddress(),
          emptyBytes,
          hash,
        )`
$DIR/contracts/test/v0.7/UpkeepRegistrationRequests.test.ts:511:22-511:35: `.getAddress()`
$DIR/contracts/test/v0.7/UpkeepRegistrationRequests.test.ts:515:7-515:53: `await evmRevert(tx, errorMsgs.requestNotFound)`
$DIR/contracts/test/v0.7/UpkeepRegistrationRequests.test.ts:563:27-563:45: `.connect(stranger)`
$DIR/contracts/test/v0.7/UpkeepRegistrationRequests.test.ts:563:45-563:58: `.cancel(hash)`
$DIR/contracts/test/v0.7/UpkeepRegistrationRequests.test.ts:564:7-564:47: `await evmRevert(tx, errorMsgs.onlyAdmin)`
$DIR/contracts/test/v0.7/UpkeepRegistrationRequests.test.ts:568:27-569:33: `
        .connect(registrarOwner)`
$DIR/contracts/test/v0.7/UpkeepRegistrationRequests.test.ts:569:33-572:10: `
        .cancel(
          '0x000000000000000000000000322813fd9a801c5507c9de605d63cea4f2ce6c44',
        )`
$DIR/contracts/test/v0.7/UpkeepRegistrationRequests.test.ts:573:7-573:47: `await evmRevert(tx, 'request not found')`
$DIR/contracts/test/v0.7/UpkeepRegistrationRequests.test.ts:577:37-577:73: `.balanceOf(await admin.getAddress())`
$DIR/contracts/test/v0.7/UpkeepRegistrationRequests.test.ts:577:59-577:72: `.getAddress()`
$DIR/contracts/test/v0.7/UpkeepRegistrationRequests.test.ts:578:33-578:48: `.connect(admin)`
$DIR/contracts/test/v0.7/UpkeepRegistrationRequests.test.ts:578:48-578:61: `.cancel(hash)`
$DIR/contracts/test/v0.7/UpkeepRegistrationRequests.test.ts:579:36-579:72: `.balanceOf(await admin.getAddress())`
$DIR/contracts/test/v0.7/UpkeepRegistrationRequests.test.ts:579:58-579:71: `.getAddress()`
$DIR/contracts/test/v0.7/UpkeepRegistrationRequests.test.ts:580:26-580:38: `.sub(before)`
$DIR/contracts/test/v0.7/UpkeepRegistrationRequests.test.ts:580:38-580:72: `.eq(amount.mul(BigNumber.from(2)))`
$DIR/contracts/test/v0.7/UpkeepRegistrationRequests.test.ts:580:48-580:71: `.mul(BigNumber.from(2))`
$DIR/contracts/test/v0.7/UpkeepRegistrationRequests.test.ts:580:62-580:70: `.from(2)`
$DIR/contracts/test/v0.7/UpkeepRegistrationRequests.test.ts:585:7-585:59: `await registrar.connect(registrarOwner).cancel(hash)`
$DIR/contracts/test/v0.7/UpkeepRegistrationRequests.test.ts:585:22-585:46: `.connect(registrarOwner)`
$DIR/contracts/test/v0.7/UpkeepRegistrationRequests.test.ts:585:46-585:59: `.cancel(hash)`
$DIR/contracts/test/v0.7/UpkeepRegistrationRequests.test.ts:586:25-586:49: `.connect(registrarOwner)`
$DIR/contracts/test/v0.7/UpkeepRegistrationRequests.test.ts:586:49-586:62: `.cancel(hash)`
$DIR/contracts/test/v0.7/UpkeepRegistrationRequests.test.ts:587:7-587:53: `await evmRevert(tx, errorMsgs.requestNotFound)`
$DIR/contracts/test/v0.7/UpkeepRegistrationRequests.test.ts:588:7-597:10: `tx = registrar
        .connect(registrarOwner)
        .approve(
          upkeepName,
          mock.address,
          executeGas,
          await admin.getAddress(),
          emptyBytes,
          hash,
        )`
$DIR/contracts/test/v0.7/UpkeepRegistrationRequests.test.ts:588:21-589:33: `
        .connect(registrarOwner)`
$DIR/contracts/test/v0.7/UpkeepRegistrationRequests.test.ts:589:33-597:10: `
        .approve(
          upkeepName,
          mock.address,
          executeGas,
          await admin.getAddress(),
          emptyBytes,
          hash,
        )`
$DIR/contracts/test/v0.7/UpkeepRegistrationRequests.test.ts:594:22-594:35: `.getAddress()`
$DIR/contracts/test/v0.7/UpkeepRegistrationRequests.test.ts:598:7-598:53: `await evmRevert(tx, errorMsgs.requestNotFound)`
$DIR/contracts/test/v0.7/VRFD20.test.ts:67:5-82:7: `publicAbi(vrfD20, [
      // Owned
      'acceptOwnership',
      'owner',
      'transferOwnership',
      //VRFConsumerBase
      'rawFulfillRandomness',
      // VRFD20
      'rollDice',
      'house',
      'withdrawLINK',
      'keyHash',
      'fee',
      'setKeyHash',
      'setFee',
    ])`
$DIR/contracts/test/v0.7/VRFD20.test.ts:89:17-90:37: `
            .connect(roles.stranger)`
$DIR/contracts/test/v0.7/VRFD20.test.ts:90:37-91:70: `
            .withdrawLINK(await roles.stranger.getAddress(), deposit)`
$DIR/contracts/test/v0.7/VRFD20.test.ts:91:38-91:60: `.stranger.getAddress()`
$DIR/contracts/test/v0.7/VRFD20.test.ts:96:39-96:46: `.mul(2)`
$DIR/contracts/test/v0.7/VRFD20.test.ts:98:17-99:43: `
            .connect(roles.defaultAccount)`
$DIR/contracts/test/v0.7/VRFD20.test.ts:99:43-103:14: `
            .withdrawLINK(
              await roles.defaultAccount.getAddress(),
              withdrawAmount,
            )`
$DIR/contracts/test/v0.7/VRFD20.test.ts:101:26-101:54: `.defaultAccount.getAddress()`
$DIR/contracts/test/v0.7/VRFD20.test.ts:110:42-112:10: `.balanceOf(
          await roles.defaultAccount.getAddress(),
        )`
$DIR/contracts/test/v0.7/VRFD20.test.ts:111:22-111:50: `.defaultAccount.getAddress()`
$DIR/contracts/test/v0.7/VRFD20.test.ts:113:41-113:62: `.from(startingAmount)`
$DIR/contracts/test/v0.7/VRFD20.test.ts:113:62-113:75: `.add(deposit)`
$DIR/contracts/test/v0.7/VRFD20.test.ts:114:9-116:74: `await vrfD20
          .connect(roles.defaultAccount)
          .withdrawLINK(await roles.defaultAccount.getAddress(), deposit)`
$DIR/contracts/test/v0.7/VRFD20.test.ts:114:21-115:41: `
          .connect(roles.defaultAccount)`
$DIR/contracts/test/v0.7/VRFD20.test.ts:115:41-116:74: `
          .withdrawLINK(await roles.defaultAccount.getAddress(), deposit)`
$DIR/contracts/test/v0.7/VRFD20.test.ts:116:36-116:64: `.defaultAccount.getAddress()`
$DIR/contracts/test/v0.7/VRFD20.test.ts:117:40-119:10: `.balanceOf(
          await roles.defaultAccount.getAddress(),
        )`
$DIR/contracts/test/v0.7/VRFD20.test.ts:118:22-118:50: `.defaultAccount.getAddress()`
$DIR/contracts/test/v0.7/VRFD20.test.ts:131:17-131:41: `.connect(roles.stranger)`
$DIR/contracts/test/v0.7/VRFD20.test.ts:131:41-131:61: `.setKeyHash(newHash)`
$DIR/contracts/test/v0.7/VRFD20.test.ts:138:9-138:41: `await vrfD20.setKeyHash(newHash)`
$DIR/contracts/test/v0.7/VRFD20.test.ts:138:21-138:41: `.setKeyHash(newHash)`
$DIR/contracts/test/v0.7/VRFD20.test.ts:139:40-139:50: `.keyHash()`
$DIR/contracts/test/v0.7/VRFD20.test.ts:151:17-151:41: `.connect(roles.stranger)`
$DIR/contracts/test/v0.7/VRFD20.test.ts:151:41-151:56: `.setFee(newFee)`
$DIR/contracts/test/v0.7/VRFD20.test.ts:158:9-158:36: `await vrfD20.setFee(newFee)`
$DIR/contracts/test/v0.7/VRFD20.test.ts:158:21-158:36: `.setFee(newFee)`
$DIR/contracts/test/v0.7/VRFD20.test.ts:159:39-159:45: `.fee()`
$DIR/contracts/test/v0.7/VRFD20.test.ts:169:17-169:58: `.house(await personas.Nancy.getAddress())`
$DIR/contracts/test/v0.7/VRFD20.test.ts:169:38-169:57: `.Nancy.getAddress()`
$DIR/contracts/test/v0.7/VRFD20.test.ts:174:9-174:65: `await vrfD20.rollDice(await personas.Nancy.getAddress())`
$DIR/contracts/test/v0.7/VRFD20.test.ts:174:21-174:65: `.rollDice(await personas.Nancy.getAddress())`
$DIR/contracts/test/v0.7/VRFD20.test.ts:174:45-174:64: `.Nancy.getAddress()`
$DIR/contracts/test/v0.7/VRFD20.test.ts:176:17-176:58: `.house(await personas.Nancy.getAddress())`
$DIR/contracts/test/v0.7/VRFD20.test.ts:176:38-176:57: `.Nancy.getAddress()`
$DIR/contracts/test/v0.7/VRFD20.test.ts:185:32-185:76: `.rollDice(await personas.Nancy.getAddress())`
$DIR/contracts/test/v0.7/VRFD20.test.ts:185:56-185:75: `.Nancy.getAddress()`
$DIR/contracts/test/v0.7/VRFD20.test.ts:188:9-192:10: `await vrfCoordinator.callBackWithRandomness(
          eventRequestId,
          randomness,
          vrfD20.address,
        )`
$DIR/contracts/test/v0.7/VRFD20.test.ts:188:29-192:10: `.callBackWithRandomness(
          eventRequestId,
          randomness,
          vrfD20.address,
        )`
$DIR/contracts/test/v0.7/VRFD20.test.ts:193:38-193:79: `.house(await personas.Nancy.getAddress())`
$DIR/contracts/test/v0.7/VRFD20.test.ts:193:59-193:78: `.Nancy.getAddress()`
$DIR/contracts/test/v0.7/VRFD20.test.ts:217:44-218:41: `
          .connect(roles.defaultAccount)`
$DIR/contracts/test/v0.7/VRFD20.test.ts:218:41-219:70: `
          .deploy(vrfCoordinator.address, link.address, keyHash, fee)`
$DIR/contracts/test/v0.7/VRFD20.test.ts:221:18-221:62: `.rollDice(await personas.Nancy.getAddress())`
$DIR/contracts/test/v0.7/VRFD20.test.ts:221:42-221:61: `.Nancy.getAddress()`
$DIR/contracts/test/v0.7/VRFD20.test.ts:227:17-228:37: `
            .connect(roles.stranger)`
$DIR/contracts/test/v0.7/VRFD20.test.ts:228:37-229:57: `
            .rollDice(await personas.Nancy.getAddress())`
$DIR/contracts/test/v0.7/VRFD20.test.ts:229:37-229:56: `.Nancy.getAddress()`
$DIR/contracts/test/v0.7/VRFD20.test.ts:234:9-234:65: `await vrfD20.rollDice(await personas.Nancy.getAddress())`
$DIR/contracts/test/v0.7/VRFD20.test.ts:234:21-234:65: `.rollDice(await personas.Nancy.getAddress())`
$DIR/contracts/test/v0.7/VRFD20.test.ts:234:45-234:64: `.Nancy.getAddress()`
$DIR/contracts/test/v0.7/VRFD20.test.ts:236:17-236:61: `.rollDice(await personas.Nancy.getAddress())`
$DIR/contracts/test/v0.7/VRFD20.test.ts:236:41-236:60: `.Nancy.getAddress()`
$DIR/contracts/test/v0.7/VRFD20.test.ts:270:38-270:79: `.house(await personas.Nancy.getAddress())`
$DIR/contracts/test/v0.7/VRFD20.test.ts:270:59-270:78: `.Nancy.getAddress()`
$DIR/contracts/test/v0.7/VRFD20.test.ts:276:9-276:68: `tx = await vrfD20.rollDice(await personas.Ned.getAddress())`
$DIR/contracts/test/v0.7/VRFD20.test.ts:276:26-276:68: `.rollDice(await personas.Ned.getAddress())`
$DIR/contracts/test/v0.7/VRFD20.test.ts:276:50-276:67: `.Ned.getAddress()`
$DIR/contracts/test/v0.7/VRFD20.test.ts:278:9-278:42: `eventRequestId = log?.topics?.[1]`
$DIR/contracts/test/v0.7/VRFD20.test.ts:279:9-283:10: `tx = await vrfCoordinator.callBackWithRandomness(
          eventRequestId,
          secondRandomness,
          vrfD20.address,
        )`
$DIR/contracts/test/v0.7/VRFD20.test.ts:279:34-283:10: `.callBackWithRandomness(
          eventRequestId,
          secondRandomness,
          vrfD20.address,
        )`
$DIR/contracts/test/v0.7/VRFD20.test.ts:289:64-290:41: `
          .connect(roles.defaultAccount)`
$DIR/contracts/test/v0.7/VRFD20.test.ts:290:41-291:32: `
          .deploy(link.address)`
$DIR/contracts/test/v0.7/VRFD20.test.ts:293:41-297:10: `.callBackWithRandomness(
          eventRequestId,
          randomness,
          vrfD20.address,
        )`
$DIR/contracts/test/v0.7/gasUsage.test.ts:109:32-110:35: `
        .connect(roles.oracleNode)`
$DIR/contracts/test/v0.7/gasUsage.test.ts:110:35-111:74: `
        .fulfillOracleRequest(...convertFufillParams(request1, response))`
$DIR/contracts/test/v0.7/gasUsage.test.ts:112:34-113:35: `
        .connect(roles.oracleNode)`
$DIR/contracts/test/v0.7/gasUsage.test.ts:113:35-114:74: `
        .fulfillOracleRequest(...convertFufillParams(request2, response))`
$DIR/contracts/test/v0.7/gasUsage.test.ts:115:33-115:40: `.wait()`
$DIR/contracts/test/v0.7/gasUsage.test.ts:116:33-116:40: `.wait()`
$DIR/contracts/test/v0.7/gasUsage.test.ts:118:7-118:48: `gasDiffLessThan(3900, receipt1, receipt2)`
$DIR/contracts/test/v0.7/gasUsage.test.ts:161:34-162:35: `
        .connect(roles.oracleNode)`
$DIR/contracts/test/v0.7/gasUsage.test.ts:162:35-163:74: `
        .fulfillOracleRequest(...convertFufillParams(request1, response))`
$DIR/contracts/test/v0.7/gasUsage.test.ts:167:34-168:35: `
        .connect(roles.oracleNode)`
$DIR/contracts/test/v0.7/gasUsage.test.ts:168:35-171:10: `
        .fulfillOracleRequest2(
          ...convertFulfill2Params(request2, responseTypes, responseValues),
        )`
$DIR/contracts/test/v0.7/gasUsage.test.ts:173:33-173:40: `.wait()`
$DIR/contracts/test/v0.7/gasUsage.test.ts:174:33-174:40: `.wait()`
$DIR/contracts/test/v0.7/gasUsage.test.ts:175:7-175:48: `gasDiffLessThan(1240, receipt1, receipt2)`
$DIR/contracts/test/v0.8/Chainlink.test.ts:31:5-39:7: `publicAbi(ccl, [
      'add',
      'addBytes',
      'addInt',
      'addStringArray',
      'addUint',
      'closeEvent',
      'setBuffer',
    ])`
$DIR/contracts/test/v0.8/Chainlink.test.ts:52:27-52:40: `.closeEvent()`
$DIR/contracts/test/v0.8/Chainlink.test.ts:61:7-61:42: `await ccl.setBuffer('0xA161616162')`
$DIR/contracts/test/v0.8/Chainlink.test.ts:61:16-61:42: `.setBuffer('0xA161616162')`
$DIR/contracts/test/v0.8/Chainlink.test.ts:62:27-62:40: `.closeEvent()`
$DIR/contracts/test/v0.8/Chainlink.test.ts:71:7-71:39: `await ccl.add('first', 'word!!')`
$DIR/contracts/test/v0.8/Chainlink.test.ts:71:16-71:39: `.add('first', 'word!!')`
$DIR/contracts/test/v0.8/Chainlink.test.ts:72:27-72:40: `.closeEvent()`
$DIR/contracts/test/v0.8/Chainlink.test.ts:79:7-79:36: `await ccl.add('first', 'uno')`
$DIR/contracts/test/v0.8/Chainlink.test.ts:79:16-79:36: `.add('first', 'uno')`
$DIR/contracts/test/v0.8/Chainlink.test.ts:80:7-80:37: `await ccl.add('second', 'dos')`
$DIR/contracts/test/v0.8/Chainlink.test.ts:80:16-80:37: `.add('second', 'dos')`
$DIR/contracts/test/v0.8/Chainlink.test.ts:81:27-81:40: `.closeEvent()`
$DIR/contracts/test/v0.8/Chainlink.test.ts:94:7-94:52: `await ccl.addBytes('first', '0xaabbccddeeff')`
$DIR/contracts/test/v0.8/Chainlink.test.ts:94:16-94:52: `.addBytes('first', '0xaabbccddeeff')`
$DIR/contracts/test/v0.8/Chainlink.test.ts:95:27-95:40: `.closeEvent()`
$DIR/contracts/test/v0.8/Chainlink.test.ts:103:7-103:46: `await ccl.addBytes('first', '0x756E6F')`
$DIR/contracts/test/v0.8/Chainlink.test.ts:103:16-103:46: `.addBytes('first', '0x756E6F')`
$DIR/contracts/test/v0.8/Chainlink.test.ts:104:7-104:47: `await ccl.addBytes('second', '0x646F73')`
$DIR/contracts/test/v0.8/Chainlink.test.ts:104:16-104:47: `.addBytes('second', '0x646F73')`
$DIR/contracts/test/v0.8/Chainlink.test.ts:105:27-105:40: `.closeEvent()`
$DIR/contracts/test/v0.8/Chainlink.test.ts:118:7-118:69: `await ccl.addBytes('first', ethers.utils.toUtf8Bytes('apple'))`
$DIR/contracts/test/v0.8/Chainlink.test.ts:118:16-118:69: `.addBytes('first', ethers.utils.toUtf8Bytes('apple'))`
$DIR/contracts/test/v0.8/Chainlink.test.ts:118:41-118:68: `.utils.toUtf8Bytes('apple')`
$DIR/contracts/test/v0.8/Chainlink.test.ts:119:27-119:40: `.closeEvent()`
$DIR/contracts/test/v0.8/Chainlink.test.ts:122:30-122:57: `.utils.toUtf8Bytes('apple')`
$DIR/contracts/test/v0.8/Chainlink.test.ts:129:7-129:35: `await ccl.addInt('first', 1)`
$DIR/contracts/test/v0.8/Chainlink.test.ts:129:16-129:35: `.addInt('first', 1)`
$DIR/contracts/test/v0.8/Chainlink.test.ts:130:27-130:40: `.closeEvent()`
$DIR/contracts/test/v0.8/Chainlink.test.ts:137:7-137:35: `await ccl.addInt('first', 1)`
$DIR/contracts/test/v0.8/Chainlink.test.ts:137:16-137:35: `.addInt('first', 1)`
$DIR/contracts/test/v0.8/Chainlink.test.ts:138:7-138:36: `await ccl.addInt('second', 2)`
$DIR/contracts/test/v0.8/Chainlink.test.ts:138:16-138:36: `.addInt('second', 2)`
$DIR/contracts/test/v0.8/Chainlink.test.ts:139:27-139:40: `.closeEvent()`
$DIR/contracts/test/v0.8/Chainlink.test.ts:152:7-152:36: `await ccl.addUint('first', 1)`
$DIR/contracts/test/v0.8/Chainlink.test.ts:152:16-152:36: `.addUint('first', 1)`
$DIR/contracts/test/v0.8/Chainlink.test.ts:153:27-153:40: `.closeEvent()`
$DIR/contracts/test/v0.8/Chainlink.test.ts:160:7-160:36: `await ccl.addUint('first', 1)`
$DIR/contracts/test/v0.8/Chainlink.test.ts:160:16-160:36: `.addUint('first', 1)`
$DIR/contracts/test/v0.8/Chainlink.test.ts:161:7-161:37: `await ccl.addUint('second', 2)`
$DIR/contracts/test/v0.8/Chainlink.test.ts:161:16-161:37: `.addUint('second', 2)`
$DIR/contracts/test/v0.8/Chainlink.test.ts:162:27-162:40: `.closeEvent()`
$DIR/contracts/test/v0.8/Chainlink.test.ts:175:7-175:68: `await ccl.addStringArray('word', ['seinfeld', '"4"', 'LIFE'])`
$DIR/contracts/test/v0.8/Chainlink.test.ts:175:16-175:68: `.addStringArray('word', ['seinfeld', '"4"', 'LIFE'])`
$DIR/contracts/test/v0.8/Chainlink.test.ts:176:27-176:40: `.closeEvent()`
$DIR/contracts/test/v0.8/ChainlinkClient.test.ts:72:26-76:8: `.publicNewRequest(
        specId,
        gs.address,
        ethers.utils.toUtf8Bytes('requestedBytes32(bytes32,bytes32)'),
      )`
$DIR/contracts/test/v0.8/ChainlinkClient.test.ts:75:15-75:70: `.utils.toUtf8Bytes('requestedBytes32(bytes32,bytes32)')`
$DIR/contracts/test/v0.8/ChainlinkClient.test.ts:77:31-77:38: `.wait()`
$DIR/contracts/test/v0.8/ChainlinkClient.test.ts:94:26-99:8: `.publicRequest(
        specId,
        cc.address,
        ethers.utils.toUtf8Bytes('fulfillRequest(bytes32,bytes32)'),
        0,
      )`
$DIR/contracts/test/v0.8/ChainlinkClient.test.ts:97:15-97:68: `.utils.toUtf8Bytes('fulfillRequest(bytes32,bytes32)')`
$DIR/contracts/test/v0.8/ChainlinkClient.test.ts:101:40-101:47: `.wait()`
$DIR/contracts/test/v0.8/ChainlinkClient.test.ts:112:26-118:8: `.publicRequestRunTo(
        newoc.address,
        specId,
        cc.address,
        ethers.utils.toUtf8Bytes('fulfillRequest(bytes32,bytes32)'),
        0,
      )`
$DIR/contracts/test/v0.8/ChainlinkClient.test.ts:116:15-116:68: `.utils.toUtf8Bytes('fulfillRequest(bytes32,bytes32)')`
$DIR/contracts/test/v0.8/ChainlinkClient.test.ts:119:34-119:41: `.wait()`
$DIR/contracts/test/v0.8/ChainlinkClient.test.ts:126:26-132:8: `.publicRequestRunTo(
        newoc.address,
        specId,
        cc.address,
        ethers.utils.toUtf8Bytes('fulfillRequest(bytes32,bytes32)'),
        0,
      )`
$DIR/contracts/test/v0.8/ChainlinkClient.test.ts:130:15-130:68: `.utils.toUtf8Bytes('fulfillRequest(bytes32,bytes32)')`
$DIR/contracts/test/v0.8/ChainlinkClient.test.ts:133:32-133:39: `.wait()`
$DIR/contracts/test/v0.8/ChainlinkClient.test.ts:134:34-134:62: `.interface.parseLog(logs[3])`
$DIR/contracts/test/v0.8/ChainlinkClient.test.ts:141:7-147:8: `await cc.publicRequestRunTo(
        newoc.address,
        specId,
        cc.address,
        ethers.utils.toUtf8Bytes('fulfillRequest(bytes32,bytes32)'),
        0,
      )`
$DIR/contracts/test/v0.8/ChainlinkClient.test.ts:141:15-147:8: `.publicRequestRunTo(
        newoc.address,
        specId,
        cc.address,
        ethers.utils.toUtf8Bytes('fulfillRequest(bytes32,bytes32)'),
        0,
      )`
$DIR/contracts/test/v0.8/ChainlinkClient.test.ts:145:15-145:68: `.utils.toUtf8Bytes('fulfillRequest(bytes32,bytes32)')`
$DIR/contracts/test/v0.8/ChainlinkClient.test.ts:149:43-149:65: `.publicOracleAddress()`
$DIR/contracts/test/v0.8/ChainlinkClient.test.ts:156:26-160:8: `.publicRequestOracleData(
        specId,
        ethers.utils.toUtf8Bytes('fulfillRequest(bytes32,bytes32)'),
        0,
      )`
$DIR/contracts/test/v0.8/ChainlinkClient.test.ts:158:15-158:68: `.utils.toUtf8Bytes('fulfillRequest(bytes32,bytes32)')`
$DIR/contracts/test/v0.8/ChainlinkClient.test.ts:162:40-162:47: `.wait()`
$DIR/contracts/test/v0.8/ChainlinkClient.test.ts:173:26-178:8: `.publicRequestOracleDataFrom(
        newoc.address,
        specId,
        ethers.utils.toUtf8Bytes('fulfillRequest(bytes32,bytes32)'),
        0,
      )`
$DIR/contracts/test/v0.8/ChainlinkClient.test.ts:176:15-176:68: `.utils.toUtf8Bytes('fulfillRequest(bytes32,bytes32)')`
$DIR/contracts/test/v0.8/ChainlinkClient.test.ts:179:34-179:41: `.wait()`
$DIR/contracts/test/v0.8/ChainlinkClient.test.ts:186:26-191:8: `.publicRequestOracleDataFrom(
        newoc.address,
        specId,
        ethers.utils.toUtf8Bytes('fulfillRequest(bytes32,bytes32)'),
        0,
      )`
$DIR/contracts/test/v0.8/ChainlinkClient.test.ts:189:15-189:68: `.utils.toUtf8Bytes('fulfillRequest(bytes32,bytes32)')`
$DIR/contracts/test/v0.8/ChainlinkClient.test.ts:192:32-192:39: `.wait()`
$DIR/contracts/test/v0.8/ChainlinkClient.test.ts:193:34-193:62: `.interface.parseLog(logs[3])`
$DIR/contracts/test/v0.8/ChainlinkClient.test.ts:200:7-205:8: `await cc.publicRequestOracleDataFrom(
        newoc.address,
        specId,
        ethers.utils.toUtf8Bytes('fulfillRequest(bytes32,bytes32)'),
        0,
      )`
$DIR/contracts/test/v0.8/ChainlinkClient.test.ts:200:15-205:8: `.publicRequestOracleDataFrom(
        newoc.address,
        specId,
        ethers.utils.toUtf8Bytes('fulfillRequest(bytes32,bytes32)'),
        0,
      )`
$DIR/contracts/test/v0.8/ChainlinkClient.test.ts:203:15-203:68: `.utils.toUtf8Bytes('fulfillRequest(bytes32,bytes32)')`
$DIR/contracts/test/v0.8/ChainlinkClient.test.ts:207:43-207:65: `.publicOracleAddress()`
$DIR/contracts/test/v0.8/ChainlinkClient.test.ts:236:27-241:8: `.publicCancelRequest(
        requestId,
        0,
        ethers.utils.hexZeroPad('0x', 4),
        0,
      )`
$DIR/contracts/test/v0.8/ChainlinkClient.test.ts:239:15-239:41: `.utils.hexZeroPad('0x', 4)`
$DIR/contracts/test/v0.8/ChainlinkClient.test.ts:242:34-242:41: `.wait()`
$DIR/contracts/test/v0.8/ChainlinkClient.test.ts:250:7-257:8: `await evmRevert(
        ecc.publicCancelRequest(
          ethers.utils.formatBytes32String('bogusId'),
          0,
          ethers.utils.hexZeroPad('0x', 4),
          0,
        ),
      )`
$DIR/contracts/test/v0.8/ChainlinkClient.test.ts:251:12-256:10: `.publicCancelRequest(
          ethers.utils.formatBytes32String('bogusId'),
          0,
          ethers.utils.hexZeroPad('0x', 4),
          0,
        )`
$DIR/contracts/test/v0.8/ChainlinkClient.test.ts:252:17-252:54: `.utils.formatBytes32String('bogusId')`
$DIR/contracts/test/v0.8/ChainlinkClient.test.ts:254:17-254:43: `.utils.hexZeroPad('0x', 4)`
$DIR/contracts/test/v0.8/ChainlinkClient.test.ts:278:26-279:39: `
        .connect(roles.defaultAccount)`
$DIR/contracts/test/v0.8/ChainlinkClient.test.ts:279:39-285:10: `
        .fulfillOracleRequest(
          ...convertFufillParams(
            request,
            ethers.utils.formatBytes32String('hi mom!'),
          ),
        )`
$DIR/contracts/test/v0.8/ChainlinkClient.test.ts:283:19-283:56: `.utils.formatBytes32String('hi mom!')`
$DIR/contracts/test/v0.8/ChainlinkClient.test.ts:286:32-286:39: `.wait()`
$DIR/contracts/test/v0.8/ChainlinkClient.test.ts:288:31-288:59: `.interface.parseLog(logs[1])`
$DIR/contracts/test/v0.8/ChainlinkClient.test.ts:296:7-303:10: `await oc
        .connect(roles.defaultAccount)
        .fulfillOracleRequest(
          ...convertFufillParams(
            request,
            ethers.utils.formatBytes32String('hi mom!'),
          ),
        )`
$DIR/contracts/test/v0.8/ChainlinkClient.test.ts:296:15-297:39: `
        .connect(roles.defaultAccount)`
$DIR/contracts/test/v0.8/ChainlinkClient.test.ts:297:39-303:10: `
        .fulfillOracleRequest(
          ...convertFufillParams(
            request,
            ethers.utils.formatBytes32String('hi mom!'),
          ),
        )`
$DIR/contracts/test/v0.8/ChainlinkClient.test.ts:301:19-301:56: `.utils.formatBytes32String('hi mom!')`
$DIR/contracts/test/v0.8/ChainlinkClient.test.ts:305:7-315:8: `await evmRevert(
        oc
          .connect(roles.defaultAccount)
          .fulfillOracleRequest(
            ...convertFufillParams(
              request,
              ethers.utils.formatBytes32String('hi mom!'),
            ),
          ),
        'Must have a valid requestId',
      )`
$DIR/contracts/test/v0.8/ChainlinkClient.test.ts:306:11-307:41: `
          .connect(roles.defaultAccount)`
$DIR/contracts/test/v0.8/ChainlinkClient.test.ts:307:41-313:12: `
          .fulfillOracleRequest(
            ...convertFufillParams(
              request,
              ethers.utils.formatBytes32String('hi mom!'),
            ),
          )`
$DIR/contracts/test/v0.8/ChainlinkClient.test.ts:311:21-311:58: `.utils.formatBytes32String('hi mom!')`
$DIR/contracts/test/v0.8/ChainlinkClient.test.ts:319:7-329:8: `await evmRevert(
        oc
          .connect(roles.stranger)
          .fulfillOracleRequest(
            ...convertFufillParams(
              request,
              ethers.utils.formatBytes32String('hi mom!'),
            ),
          ),
        'Not authorized sender',
      )`
$DIR/contracts/test/v0.8/ChainlinkClient.test.ts:320:11-321:35: `
          .connect(roles.stranger)`
$DIR/contracts/test/v0.8/ChainlinkClient.test.ts:321:35-327:12: `
          .fulfillOracleRequest(
            ...convertFufillParams(
              request,
              ethers.utils.formatBytes32String('hi mom!'),
            ),
          )`
$DIR/contracts/test/v0.8/ChainlinkClient.test.ts:325:21-325:58: `.utils.formatBytes32String('hi mom!')`
$DIR/contracts/test/v0.8/ChainlinkClient.test.ts:352:7-352:79: `await oc.setAuthorizedSenders([await roles.defaultAccount.getAddress()])`
$DIR/contracts/test/v0.8/ChainlinkClient.test.ts:352:15-352:79: `.setAuthorizedSenders([await roles.defaultAccount.getAddress()])`
$DIR/contracts/test/v0.8/ChainlinkClient.test.ts:352:49-352:77: `.defaultAccount.getAddress()`
$DIR/contracts/test/v0.8/ChainlinkClient.test.ts:353:26-354:39: `
        .connect(roles.defaultAccount)`
$DIR/contracts/test/v0.8/ChainlinkClient.test.ts:354:39-360:10: `
        .fulfillOracleRequest(
          ...convertFufillParams(
            request,
            ethers.utils.formatBytes32String('hi mom!'),
          ),
        )`
$DIR/contracts/test/v0.8/ChainlinkClient.test.ts:358:19-358:56: `.utils.formatBytes32String('hi mom!')`
$DIR/contracts/test/v0.8/ChainlinkClient.test.ts:362:32-362:39: `.wait()`
$DIR/contracts/test/v0.8/ChainlinkClient.test.ts:363:31-363:59: `.interface.parseLog(logs[1])`
$DIR/contracts/test/v0.8/ChainlinkClient.test.ts:371:7-378:10: `await oc
        .connect(roles.defaultAccount)
        .fulfillOracleRequest(
          ...convertFufillParams(
            request,
            ethers.utils.formatBytes32String('hi mom!'),
          ),
        )`
$DIR/contracts/test/v0.8/ChainlinkClient.test.ts:371:15-372:39: `
        .connect(roles.defaultAccount)`
$DIR/contracts/test/v0.8/ChainlinkClient.test.ts:372:39-378:10: `
        .fulfillOracleRequest(
          ...convertFufillParams(
            request,
            ethers.utils.formatBytes32String('hi mom!'),
          ),
        )`
$DIR/contracts/test/v0.8/ChainlinkClient.test.ts:376:19-376:56: `.utils.formatBytes32String('hi mom!')`
$DIR/contracts/test/v0.8/ChainlinkClient.test.ts:380:7-390:8: `await evmRevert(
        oc
          .connect(roles.defaultAccount)
          .fulfillOracleRequest(
            ...convertFufillParams(
              request,
              ethers.utils.formatBytes32String('hi mom!'),
            ),
          ),
        'Must have a valid requestId',
      )`
$DIR/contracts/test/v0.8/ChainlinkClient.test.ts:381:11-382:41: `
          .connect(roles.defaultAccount)`
$DIR/contracts/test/v0.8/ChainlinkClient.test.ts:382:41-388:12: `
          .fulfillOracleRequest(
            ...convertFufillParams(
              request,
              ethers.utils.formatBytes32String('hi mom!'),
            ),
          )`
$DIR/contracts/test/v0.8/ChainlinkClient.test.ts:386:21-386:58: `.utils.formatBytes32String('hi mom!')`
$DIR/contracts/test/v0.8/ChainlinkClient.test.ts:394:7-404:8: `await evmRevert(
        oc
          .connect(roles.stranger)
          .fulfillOracleRequest(
            ...convertFufillParams(
              request,
              ethers.utils.formatBytes32String('hi mom!'),
            ),
          ),
        'Not authorized sender',
      )`
$DIR/contracts/test/v0.8/ChainlinkClient.test.ts:395:11-396:35: `
          .connect(roles.stranger)`
$DIR/contracts/test/v0.8/ChainlinkClient.test.ts:396:35-402:12: `
          .fulfillOracleRequest(
            ...convertFufillParams(
              request,
              ethers.utils.formatBytes32String('hi mom!'),
            ),
          )`
$DIR/contracts/test/v0.8/ChainlinkClient.test.ts:400:21-400:58: `.utils.formatBytes32String('hi mom!')`
$DIR/contracts/test/v0.8/ChainlinkClient.test.ts:410:28-410:51: `.publicChainlinkToken()`
$DIR/contracts/test/v0.8/ChainlinkClient.test.ts:437:7-437:79: `await oc.setAuthorizedSenders([await roles.defaultAccount.getAddress()])`
$DIR/contracts/test/v0.8/ChainlinkClient.test.ts:437:15-437:79: `.setAuthorizedSenders([await roles.defaultAccount.getAddress()])`
$DIR/contracts/test/v0.8/ChainlinkClient.test.ts:437:49-437:77: `.defaultAccount.getAddress()`
$DIR/contracts/test/v0.8/ChainlinkClient.test.ts:438:7-443:8: `await oc.fulfillOracleRequest(
        ...convertFufillParams(
          request,
          ethers.utils.formatBytes32String('hi mom!'),
        ),
      )`
$DIR/contracts/test/v0.8/ChainlinkClient.test.ts:438:15-443:8: `.fulfillOracleRequest(
        ...convertFufillParams(
          request,
          ethers.utils.formatBytes32String('hi mom!'),
        ),
      )`
$DIR/contracts/test/v0.8/ChainlinkClient.test.ts:441:17-441:54: `.utils.formatBytes32String('hi mom!')`
$DIR/contracts/test/v0.8/ChainlinkClient.test.ts:447:7-449:8: `await evmRevert(
        cc.publicAddExternalRequest(newoc.address, request.requestId),
      )`
$DIR/contracts/test/v0.8/ChainlinkClient.test.ts:448:11-448:70: `.publicAddExternalRequest(newoc.address, request.requestId)`
$DIR/contracts/test/v0.8/Cron.test.ts:51:35-55:13: `.map(async (input) => {
            const spec = await cron.encodeCronString(input)
            const output = await cron.encodedSpecToString(spec)
            assert.equal(output, input)
          })`
$DIR/contracts/test/v0.8/Cron.test.ts:52:36-52:60: `.encodeCronString(input)`
$DIR/contracts/test/v0.8/Cron.test.ts:53:38-53:64: `.encodedSpecToString(spec)`
$DIR/contracts/test/v0.8/Cron.test.ts:56:11-56:35: `await Promise.all(tests)`
$DIR/contracts/test/v0.8/Cron.test.ts:56:24-56:35: `.all(tests)`
$DIR/contracts/test/v0.8/Cron.test.ts:63:19-63:43: `.encodeCronString(input)`
$DIR/contracts/test/v0.8/Cron.test.ts:72:11-72:40: `await setTimestamp(timeStamp)`
$DIR/contracts/test/v0.8/Cron.test.ts:73:35-73:51: `.unix(timeStamp)`
$DIR/contracts/test/v0.8/Cron.test.ts:77:30-77:46: `.add(30, 'days')`
$DIR/contracts/test/v0.8/Cron.test.ts:77:46-77:53: `.unix()`
$DIR/contracts/test/v0.8/Cron.test.ts:78:30-78:49: `.subtract(1, 'day')`
$DIR/contracts/test/v0.8/Cron.test.ts:78:49-78:56: `.unix()`
$DIR/contracts/test/v0.8/Cron.test.ts:82:30-82:47: `.add(12, 'hours')`
$DIR/contracts/test/v0.8/Cron.test.ts:82:47-82:54: `.unix()`
$DIR/contracts/test/v0.8/Cron.test.ts:83:30-83:52: `.subtract(12, 'hours')`
$DIR/contracts/test/v0.8/Cron.test.ts:83:52-83:59: `.unix()`
$DIR/contracts/test/v0.8/Cron.test.ts:87:30-87:46: `.add(2, 'hours')`
$DIR/contracts/test/v0.8/Cron.test.ts:87:46-87:65: `.add(10, 'minutes')`
$DIR/contracts/test/v0.8/Cron.test.ts:87:65-87:72: `.unix()`
$DIR/contracts/test/v0.8/Cron.test.ts:88:30-89:39: `
                .subtract(17, 'hours')`
$DIR/contracts/test/v0.8/Cron.test.ts:89:39-90:41: `
                .subtract(50, 'minutes')`
$DIR/contracts/test/v0.8/Cron.test.ts:90:41-91:24: `
                .unix()`
$DIR/contracts/test/v0.8/Cron.test.ts:95:30-95:47: `.add(2, 'months')`
$DIR/contracts/test/v0.8/Cron.test.ts:95:47-95:54: `.unix()`
$DIR/contracts/test/v0.8/Cron.test.ts:96:30-96:52: `.subtract(1, 'months')`
$DIR/contracts/test/v0.8/Cron.test.ts:96:52-96:59: `.unix()`
$DIR/contracts/test/v0.8/Cron.test.ts:107:25-107:54: `.calculateNextTick(test.cron)`
$DIR/contracts/test/v0.8/Cron.test.ts:110:25-110:54: `.calculateLastTick(test.cron)`
$DIR/contracts/test/v0.8/Flags.test.ts:42:5-61:7: `publicAbi(flags, [
      'getFlag',
      'getFlags',
      'lowerFlags',
      'raiseFlag',
      'raiseFlags',
      'raisingAccessController',
      'setRaisingAccessController',
      // Ownable methods:
      'acceptOwnership',
      'owner',
      'transferOwnership',
      // AccessControl methods:
      'addAccess',
      'disableAccessCheck',
      'enableAccessCheck',
      'removeAccess',
      'checkEnabled',
      'hasAccess',
    ])`
$DIR/contracts/test/v0.8/Flags.test.ts:67:40-67:66: `.getFlag(consumer.address)`
$DIR/contracts/test/v0.8/Flags.test.ts:69:9-69:72: `await flags.connect(personas.Nelly).raiseFlag(consumer.address)`
$DIR/contracts/test/v0.8/Flags.test.ts:69:20-69:44: `.connect(personas.Nelly)`
$DIR/contracts/test/v0.8/Flags.test.ts:69:44-69:72: `.raiseFlag(consumer.address)`
$DIR/contracts/test/v0.8/Flags.test.ts:71:39-71:65: `.getFlag(consumer.address)`
$DIR/contracts/test/v0.8/Flags.test.ts:75:27-75:51: `.connect(personas.Nelly)`
$DIR/contracts/test/v0.8/Flags.test.ts:75:51-75:79: `.raiseFlag(consumer.address)`
$DIR/contracts/test/v0.8/Flags.test.ts:86:33-87:37: `
            .connect(personas.Nelly)`
$DIR/contracts/test/v0.8/Flags.test.ts:87:37-88:41: `
            .raiseFlag(consumer.address)`
$DIR/contracts/test/v0.8/Flags.test.ts:89:35-89:42: `.wait()`
$DIR/contracts/test/v0.8/Flags.test.ts:103:9-104:68: `await flags.connect(personas.Neil).raiseFlag(consumer.address),
          assert.equal(true, await flags.getFlag(consumer.address))`
$DIR/contracts/test/v0.8/Flags.test.ts:103:20-103:43: `.connect(personas.Neil)`
$DIR/contracts/test/v0.8/Flags.test.ts:103:43-103:71: `.raiseFlag(consumer.address)`
$DIR/contracts/test/v0.8/Flags.test.ts:104:17-104:68: `.equal(true, await flags.getFlag(consumer.address))`
$DIR/contracts/test/v0.8/Flags.test.ts:104:41-104:67: `.getFlag(consumer.address)`
$DIR/contracts/test/v0.8/Flags.test.ts:111:16-111:39: `.connect(personas.Neil)`
$DIR/contracts/test/v0.8/Flags.test.ts:111:39-111:67: `.raiseFlag(consumer.address)`
$DIR/contracts/test/v0.8/Flags.test.ts:132:9-132:72: `await flags.connect(personas.Nelly).raiseFlag(consumer.address)`
$DIR/contracts/test/v0.8/Flags.test.ts:132:20-132:44: `.connect(personas.Nelly)`
$DIR/contracts/test/v0.8/Flags.test.ts:132:44-132:72: `.raiseFlag(consumer.address)`
$DIR/contracts/test/v0.8/Flags.test.ts:133:39-133:65: `.getFlag(consumer.address)`
$DIR/contracts/test/v0.8/Flags.test.ts:137:27-137:50: `.connect(personas.Neil)`
$DIR/contracts/test/v0.8/Flags.test.ts:137:50-137:78: `.raiseFlag(consumer.address)`
$DIR/contracts/test/v0.8/Flags.test.ts:146:40-146:66: `.getFlag(consumer.address)`
$DIR/contracts/test/v0.8/Flags.test.ts:148:9-148:75: `await flags.connect(personas.Nelly).raiseFlags([consumer.address])`
$DIR/contracts/test/v0.8/Flags.test.ts:148:20-148:44: `.connect(personas.Nelly)`
$DIR/contracts/test/v0.8/Flags.test.ts:148:44-148:75: `.raiseFlags([consumer.address])`
$DIR/contracts/test/v0.8/Flags.test.ts:150:39-150:65: `.getFlag(consumer.address)`
$DIR/contracts/test/v0.8/Flags.test.ts:155:16-155:40: `.connect(personas.Nelly)`
$DIR/contracts/test/v0.8/Flags.test.ts:155:40-155:71: `.raiseFlags([consumer.address])`
$DIR/contracts/test/v0.8/Flags.test.ts:167:33-168:37: `
            .connect(personas.Nelly)`
$DIR/contracts/test/v0.8/Flags.test.ts:168:37-169:44: `
            .raiseFlags([consumer.address])`
$DIR/contracts/test/v0.8/Flags.test.ts:170:35-170:42: `.wait()`
$DIR/contracts/test/v0.8/Flags.test.ts:184:9-185:68: `await flags.connect(personas.Neil).raiseFlags([consumer.address]),
          assert.equal(true, await flags.getFlag(consumer.address))`
$DIR/contracts/test/v0.8/Flags.test.ts:184:20-184:43: `.connect(personas.Neil)`
$DIR/contracts/test/v0.8/Flags.test.ts:184:43-184:74: `.raiseFlags([consumer.address])`
$DIR/contracts/test/v0.8/Flags.test.ts:185:17-185:68: `.equal(true, await flags.getFlag(consumer.address))`
$DIR/contracts/test/v0.8/Flags.test.ts:185:41-185:67: `.getFlag(consumer.address)`
$DIR/contracts/test/v0.8/Flags.test.ts:192:16-192:39: `.connect(personas.Neil)`
$DIR/contracts/test/v0.8/Flags.test.ts:192:39-192:70: `.raiseFlags([consumer.address])`
$DIR/contracts/test/v0.8/Flags.test.ts:214:9-214:75: `await flags.connect(personas.Nelly).raiseFlags([consumer.address])`
$DIR/contracts/test/v0.8/Flags.test.ts:214:20-214:44: `.connect(personas.Nelly)`
$DIR/contracts/test/v0.8/Flags.test.ts:214:44-214:75: `.raiseFlags([consumer.address])`
$DIR/contracts/test/v0.8/Flags.test.ts:215:39-215:65: `.getFlag(consumer.address)`
$DIR/contracts/test/v0.8/Flags.test.ts:220:16-220:39: `.connect(personas.Neil)`
$DIR/contracts/test/v0.8/Flags.test.ts:220:39-220:70: `.raiseFlags([consumer.address])`
$DIR/contracts/test/v0.8/Flags.test.ts:233:39-233:65: `.getFlag(consumer.address)`
$DIR/contracts/test/v0.8/Flags.test.ts:235:9-235:75: `await flags.connect(personas.Nelly).lowerFlags([consumer.address])`
$DIR/contracts/test/v0.8/Flags.test.ts:235:20-235:44: `.connect(personas.Nelly)`
$DIR/contracts/test/v0.8/Flags.test.ts:235:44-235:75: `.lowerFlags([consumer.address])`
$DIR/contracts/test/v0.8/Flags.test.ts:237:40-237:66: `.getFlag(consumer.address)`
$DIR/contracts/test/v0.8/Flags.test.ts:242:16-242:40: `.connect(personas.Nelly)`
$DIR/contracts/test/v0.8/Flags.test.ts:242:40-242:71: `.lowerFlags([consumer.address])`
$DIR/contracts/test/v0.8/Flags.test.ts:254:33-255:37: `
            .connect(personas.Nelly)`
$DIR/contracts/test/v0.8/Flags.test.ts:255:37-256:44: `
            .lowerFlags([consumer.address])`
$DIR/contracts/test/v0.8/Flags.test.ts:257:35-257:42: `.wait()`
$DIR/contracts/test/v0.8/Flags.test.ts:266:16-266:39: `.connect(personas.Neil)`
$DIR/contracts/test/v0.8/Flags.test.ts:266:39-266:70: `.lowerFlags([consumer.address])`
$DIR/contracts/test/v0.8/Flags.test.ts:279:30-279:56: `.getFlag(consumer.address)`
$DIR/contracts/test/v0.8/Flags.test.ts:290:11-290:51: `await consumer.getFlag(consumer.address)`
$DIR/contracts/test/v0.8/Flags.test.ts:290:25-290:51: `.getFlag(consumer.address)`
$DIR/contracts/test/v0.8/Flags.test.ts:301:9-301:49: `await consumer.getFlag(consumer.address)`
$DIR/contracts/test/v0.8/Flags.test.ts:301:23-301:49: `.getFlag(consumer.address)`
$DIR/contracts/test/v0.8/Flags.test.ts:310:11-310:51: `await consumer.getFlag(consumer.address)`
$DIR/contracts/test/v0.8/Flags.test.ts:310:25-310:51: `.getFlag(consumer.address)`
$DIR/contracts/test/v0.8/Flags.test.ts:328:7-328:62: `await flags.connect(personas.Nelly).enableAccessCheck()`
$DIR/contracts/test/v0.8/Flags.test.ts:328:18-328:42: `.connect(personas.Nelly)`
$DIR/contracts/test/v0.8/Flags.test.ts:328:42-328:62: `.enableAccessCheck()`
$DIR/contracts/test/v0.8/Flags.test.ts:330:28-330:54: `.getFlag(consumer.address)`
$DIR/contracts/test/v0.8/Flags.test.ts:334:7-334:70: `await flags.connect(personas.Nelly).addAccess(consumer.address)`
$DIR/contracts/test/v0.8/Flags.test.ts:334:18-334:42: `.connect(personas.Nelly)`
$DIR/contracts/test/v0.8/Flags.test.ts:334:42-334:70: `.addAccess(consumer.address)`
$DIR/contracts/test/v0.8/Flags.test.ts:336:7-336:47: `await consumer.getFlag(consumer.address)`
$DIR/contracts/test/v0.8/Flags.test.ts:336:21-336:47: `.getFlag(consumer.address)`
$DIR/contracts/test/v0.8/Flags.test.ts:340:38-345:9: `.getFlags([
        await personas.Nelly.getAddress(),
        await personas.Neil.getAddress(),
        await personas.Ned.getAddress(),
        await personas.Norbert.getAddress(),
      ])`
$DIR/contracts/test/v0.8/Flags.test.ts:341:23-341:42: `.Nelly.getAddress()`
$DIR/contracts/test/v0.8/Flags.test.ts:342:23-342:41: `.Neil.getAddress()`
$DIR/contracts/test/v0.8/Flags.test.ts:343:23-343:40: `.Ned.getAddress()`
$DIR/contracts/test/v0.8/Flags.test.ts:344:23-344:44: `.Norbert.getAddress()`
$DIR/contracts/test/v0.8/Flags.test.ts:360:41-360:59: `.Neil.getAddress()`
$DIR/contracts/test/v0.8/Flags.test.ts:361:7-361:70: `await controller.connect(personas.Nelly).addAccess(neilAddress)`
$DIR/contracts/test/v0.8/Flags.test.ts:361:23-361:47: `.connect(personas.Nelly)`
$DIR/contracts/test/v0.8/Flags.test.ts:361:47-361:70: `.addAccess(neilAddress)`
$DIR/contracts/test/v0.8/Flags.test.ts:362:7-362:72: `await flags.connect(personas.Neil).raiseFlags([consumer.address])`
$DIR/contracts/test/v0.8/Flags.test.ts:362:18-362:41: `.connect(personas.Neil)`
$DIR/contracts/test/v0.8/Flags.test.ts:362:41-362:72: `.raiseFlags([consumer.address])`
$DIR/contracts/test/v0.8/Flags.test.ts:364:7-366:57: `await flags
        .connect(personas.Nelly)
        .setRaisingAccessController(controller2.address)`
$DIR/contracts/test/v0.8/Flags.test.ts:364:18-365:33: `
        .connect(personas.Nelly)`
$DIR/contracts/test/v0.8/Flags.test.ts:365:33-366:57: `
        .setRaisingAccessController(controller2.address)`
$DIR/contracts/test/v0.8/Flags.test.ts:369:14-369:37: `.connect(personas.Neil)`
$DIR/contracts/test/v0.8/Flags.test.ts:369:37-369:68: `.raiseFlags([consumer.address])`
$DIR/contracts/test/v0.8/Flags.test.ts:375:14-376:35: `
          .connect(personas.Nelly)`
$DIR/contracts/test/v0.8/Flags.test.ts:376:35-377:59: `
          .setRaisingAccessController(controller2.address)`
$DIR/contracts/test/v0.8/Flags.test.ts:384:7-386:57: `await flags
        .connect(personas.Nelly)
        .setRaisingAccessController(controller2.address)`
$DIR/contracts/test/v0.8/Flags.test.ts:384:18-385:33: `
        .connect(personas.Nelly)`
$DIR/contracts/test/v0.8/Flags.test.ts:385:33-386:57: `
        .setRaisingAccessController(controller2.address)`
$DIR/contracts/test/v0.8/Flags.test.ts:389:14-390:35: `
          .connect(personas.Nelly)`
$DIR/contracts/test/v0.8/Flags.test.ts:390:35-391:59: `
          .setRaisingAccessController(controller2.address)`
$DIR/contracts/test/v0.8/Flags.test.ts:398:16-399:36: `
            .connect(personas.Neil)`
$DIR/contracts/test/v0.8/Flags.test.ts:399:36-400:61: `
            .setRaisingAccessController(controller2.address)`
$DIR/contracts/test/v0.8/KeeperRegistrar.test.ts:152:45-152:62: `.typeAndVersion()`
$DIR/contracts/test/v0.8/KeeperRegistrar.test.ts:159:7-174:8: `await evmRevert(
        registrar
          .connect(someAddress)
          .register(
            upkeepName,
            emptyBytes,
            mock.address,
            executeGas,
            await admin.getAddress(),
            emptyBytes,
            amount,
            source,
            await requestSender.getAddress(),
          ),
        'OnlyLink()',
      )`
$DIR/contracts/test/v0.8/KeeperRegistrar.test.ts:160:18-161:32: `
          .connect(someAddress)`
$DIR/contracts/test/v0.8/KeeperRegistrar.test.ts:161:32-172:12: `
          .register(
            upkeepName,
            emptyBytes,
            mock.address,
            executeGas,
            await admin.getAddress(),
            emptyBytes,
            amount,
            source,
            await requestSender.getAddress(),
          )`
$DIR/contracts/test/v0.8/KeeperRegistrar.test.ts:167:24-167:37: `.getAddress()`
$DIR/contracts/test/v0.8/KeeperRegistrar.test.ts:171:32-171:45: `.getAddress()`
$DIR/contracts/test/v0.8/KeeperRegistrar.test.ts:178:7-185:10: `await registrar
        .connect(registrarOwner)
        .setRegistrationConfig(
          autoApproveType_ENABLED_ALL,
          maxAllowedAutoApprove,
          registry.address,
          minUpkeepSpend,
        )`
$DIR/contracts/test/v0.8/KeeperRegistrar.test.ts:178:22-179:33: `
        .connect(registrarOwner)`
$DIR/contracts/test/v0.8/KeeperRegistrar.test.ts:179:33-185:10: `
        .setRegistrationConfig(
          autoApproveType_ENABLED_ALL,
          maxAllowedAutoApprove,
          registry.address,
          minUpkeepSpend,
        )`
$DIR/contracts/test/v0.8/KeeperRegistrar.test.ts:187:40-200:8: `.interface.encodeFunctionData(
        'register',
        [
          upkeepName,
          emptyBytes,
          mock.address,
          executeGas,
          await admin.getAddress(),
          emptyBytes,
          amount1,
          source,
          await requestSender.getAddress(),
        ],
      )`
$DIR/contracts/test/v0.8/KeeperRegistrar.test.ts:194:22-194:35: `.getAddress()`
$DIR/contracts/test/v0.8/KeeperRegistrar.test.ts:198:30-198:43: `.getAddress()`
$DIR/contracts/test/v0.8/KeeperRegistrar.test.ts:202:7-207:8: `await evmRevert(
        linkToken
          .connect(requestSender)
          .transferAndCall(registrar.address, amount, abiEncodedBytes),
        'AmountMismatch()',
      )`
$DIR/contracts/test/v0.8/KeeperRegistrar.test.ts:203:18-204:34: `
          .connect(requestSender)`
$DIR/contracts/test/v0.8/KeeperRegistrar.test.ts:204:34-205:71: `
          .transferAndCall(registrar.address, amount, abiEncodedBytes)`
$DIR/contracts/test/v0.8/KeeperRegistrar.test.ts:211:40-224:8: `.interface.encodeFunctionData(
        'register',
        [
          upkeepName,
          emptyBytes,
          mock.address,
          executeGas,
          await admin.getAddress(),
          emptyBytes,
          amount,
          source,
          await admin.getAddress(), // Should have been requestSender.getAddress()
        ],
      )`
$DIR/contracts/test/v0.8/KeeperRegistrar.test.ts:218:22-218:35: `.getAddress()`
$DIR/contracts/test/v0.8/KeeperRegistrar.test.ts:222:22-222:35: `.getAddress()`
$DIR/contracts/test/v0.8/KeeperRegistrar.test.ts:225:7-230:8: `await evmRevert(
        linkToken
          .connect(requestSender)
          .transferAndCall(registrar.address, amount, abiEncodedBytes),
        'SenderMismatch()',
      )`
$DIR/contracts/test/v0.8/KeeperRegistrar.test.ts:226:18-227:34: `
          .connect(requestSender)`
$DIR/contracts/test/v0.8/KeeperRegistrar.test.ts:227:34-228:71: `
          .transferAndCall(registrar.address, amount, abiEncodedBytes)`
$DIR/contracts/test/v0.8/KeeperRegistrar.test.ts:234:40-247:8: `.interface.encodeFunctionData(
        'register',
        [
          upkeepName,
          emptyBytes,
          mock.address,
          executeGas,
          '0x0000000000000000000000000000000000000000',
          emptyBytes,
          amount,
          source,
          await requestSender.getAddress(),
        ],
      )`
$DIR/contracts/test/v0.8/KeeperRegistrar.test.ts:245:30-245:43: `.getAddress()`
$DIR/contracts/test/v0.8/KeeperRegistrar.test.ts:249:7-254:8: `await evmRevert(
        linkToken
          .connect(requestSender)
          .transferAndCall(registrar.address, amount, abiEncodedBytes),
        'RegistrationRequestFailed()',
      )`
$DIR/contracts/test/v0.8/KeeperRegistrar.test.ts:250:18-251:34: `
          .connect(requestSender)`
$DIR/contracts/test/v0.8/KeeperRegistrar.test.ts:251:34-252:71: `
          .transferAndCall(registrar.address, amount, abiEncodedBytes)`
$DIR/contracts/test/v0.8/KeeperRegistrar.test.ts:259:7-266:10: `await registrar
        .connect(registrarOwner)
        .setRegistrationConfig(
          autoApproveType_ENABLED_ALL,
          maxAllowedAutoApprove,
          registry.address,
          minUpkeepSpend,
        )`
$DIR/contracts/test/v0.8/KeeperRegistrar.test.ts:259:22-260:33: `
        .connect(registrarOwner)`
$DIR/contracts/test/v0.8/KeeperRegistrar.test.ts:260:33-266:10: `
        .setRegistrationConfig(
          autoApproveType_ENABLED_ALL,
          maxAllowedAutoApprove,
          registry.address,
          minUpkeepSpend,
        )`
$DIR/contracts/test/v0.8/KeeperRegistrar.test.ts:269:40-282:8: `.interface.encodeFunctionData(
        'register',
        [
          upkeepName,
          emptyBytes,
          mock.address,
          executeGas,
          await admin.getAddress(),
          emptyBytes,
          amount,
          source,
          await requestSender.getAddress(),
        ],
      )`
$DIR/contracts/test/v0.8/KeeperRegistrar.test.ts:276:22-276:35: `.getAddress()`
$DIR/contracts/test/v0.8/KeeperRegistrar.test.ts:280:30-280:43: `.getAddress()`
$DIR/contracts/test/v0.8/KeeperRegistrar.test.ts:283:33-284:32: `
        .connect(requestSender)`
$DIR/contracts/test/v0.8/KeeperRegistrar.test.ts:284:32-285:69: `
        .transferAndCall(registrar.address, amount, abiEncodedBytes)`
$DIR/contracts/test/v0.8/KeeperRegistrar.test.ts:287:34-287:59: `.getActiveUpkeepIDs(0, 1)`
$DIR/contracts/test/v0.8/KeeperRegistrar.test.ts:290:39-290:53: `.getUpkeep(id)`
$DIR/contracts/test/v0.8/KeeperRegistrar.test.ts:292:48-292:61: `.getAddress()`
$DIR/contracts/test/v0.8/KeeperRegistrar.test.ts:294:29-294:48: `.balance.toString()`
$DIR/contracts/test/v0.8/KeeperRegistrar.test.ts:303:42-303:53: `.getState()`
$DIR/contracts/test/v0.8/KeeperRegistrar.test.ts:306:7-313:10: `await registrar
        .connect(registrarOwner)
        .setRegistrationConfig(
          autoApproveType_DISABLED,
          maxAllowedAutoApprove,
          registry.address,
          minUpkeepSpend,
        )`
$DIR/contracts/test/v0.8/KeeperRegistrar.test.ts:306:22-307:33: `
        .connect(registrarOwner)`
$DIR/contracts/test/v0.8/KeeperRegistrar.test.ts:307:33-313:10: `
        .setRegistrationConfig(
          autoApproveType_DISABLED,
          maxAllowedAutoApprove,
          registry.address,
          minUpkeepSpend,
        )`
$DIR/contracts/test/v0.8/KeeperRegistrar.test.ts:316:40-329:8: `.interface.encodeFunctionData(
        'register',
        [
          upkeepName,
          emptyBytes,
          mock.address,
          executeGas,
          await admin.getAddress(),
          emptyBytes,
          amount,
          source,
          await requestSender.getAddress(),
        ],
      )`
$DIR/contracts/test/v0.8/KeeperRegistrar.test.ts:323:22-323:35: `.getAddress()`
$DIR/contracts/test/v0.8/KeeperRegistrar.test.ts:327:30-327:43: `.getAddress()`
$DIR/contracts/test/v0.8/KeeperRegistrar.test.ts:330:33-331:32: `
        .connect(requestSender)`
$DIR/contracts/test/v0.8/KeeperRegistrar.test.ts:331:32-332:69: `
        .transferAndCall(registrar.address, amount, abiEncodedBytes)`
$DIR/contracts/test/v0.8/KeeperRegistrar.test.ts:333:31-333:38: `.wait()`
$DIR/contracts/test/v0.8/KeeperRegistrar.test.ts:336:41-336:52: `.getState()`
$DIR/contracts/test/v0.8/KeeperRegistrar.test.ts:345:45-345:69: `.getPendingRequest(hash)`
$DIR/contracts/test/v0.8/KeeperRegistrar.test.ts:346:31-346:44: `.getAddress()`
$DIR/contracts/test/v0.8/KeeperRegistrar.test.ts:347:23-347:45: `.eq(pendingRequest[1])`
$DIR/contracts/test/v0.8/KeeperRegistrar.test.ts:351:35-351:46: `.getState()`
$DIR/contracts/test/v0.8/KeeperRegistrar.test.ts:351:47-351:75: `.state.numUpkeeps.toNumber()`
$DIR/contracts/test/v0.8/KeeperRegistrar.test.ts:354:7-359:8: `await registrar.connect(registrarOwner).setRegistrationConfig(
        autoApproveType_ENABLED_ALL,
        1, // maxAllowedAutoApprove
        registry.address,
        minUpkeepSpend,
      )`
$DIR/contracts/test/v0.8/KeeperRegistrar.test.ts:354:22-354:46: `.connect(registrarOwner)`
$DIR/contracts/test/v0.8/KeeperRegistrar.test.ts:354:46-359:8: `.setRegistrationConfig(
        autoApproveType_ENABLED_ALL,
        1, // maxAllowedAutoApprove
        registry.address,
        minUpkeepSpend,
      )`
$DIR/contracts/test/v0.8/KeeperRegistrar.test.ts:362:38-372:9: `.interface.encodeFunctionData('register', [
        upkeepName,
        emptyBytes,
        mock.address,
        executeGas,
        await admin.getAddress(),
        emptyBytes,
        amount,
        source,
        await requestSender.getAddress(),
      ])`
$DIR/contracts/test/v0.8/KeeperRegistrar.test.ts:367:20-367:33: `.getAddress()`
$DIR/contracts/test/v0.8/KeeperRegistrar.test.ts:371:28-371:41: `.getAddress()`
$DIR/contracts/test/v0.8/KeeperRegistrar.test.ts:373:7-375:69: `await linkToken
        .connect(requestSender)
        .transferAndCall(registrar.address, amount, abiEncodedBytes)`
$DIR/contracts/test/v0.8/KeeperRegistrar.test.ts:373:22-374:32: `
        .connect(requestSender)`
$DIR/contracts/test/v0.8/KeeperRegistrar.test.ts:374:32-375:69: `
        .transferAndCall(registrar.address, amount, abiEncodedBytes)`
$DIR/contracts/test/v0.8/KeeperRegistrar.test.ts:376:35-376:46: `.getState()`
$DIR/contracts/test/v0.8/KeeperRegistrar.test.ts:376:47-376:75: `.state.numUpkeeps.toNumber()`
$DIR/contracts/test/v0.8/KeeperRegistrar.test.ts:379:7-389:9: `abiEncodedBytes = registrar.interface.encodeFunctionData('register', [
        upkeepName,
        emptyBytes,
        mock.address,
        executeGas.toNumber() + 1, // make unique hash
        await admin.getAddress(),
        emptyBytes,
        amount,
        source,
        await requestSender.getAddress(),
      ])`
$DIR/contracts/test/v0.8/KeeperRegistrar.test.ts:379:34-389:9: `.interface.encodeFunctionData('register', [
        upkeepName,
        emptyBytes,
        mock.address,
        executeGas.toNumber() + 1, // make unique hash
        await admin.getAddress(),
        emptyBytes,
        amount,
        source,
        await requestSender.getAddress(),
      ])`
$DIR/contracts/test/v0.8/KeeperRegistrar.test.ts:384:20-384:33: `.getAddress()`
$DIR/contracts/test/v0.8/KeeperRegistrar.test.ts:388:28-388:41: `.getAddress()`
$DIR/contracts/test/v0.8/KeeperRegistrar.test.ts:390:7-392:69: `await linkToken
        .connect(requestSender)
        .transferAndCall(registrar.address, amount, abiEncodedBytes)`
$DIR/contracts/test/v0.8/KeeperRegistrar.test.ts:390:22-391:32: `
        .connect(requestSender)`
$DIR/contracts/test/v0.8/KeeperRegistrar.test.ts:391:32-392:69: `
        .transferAndCall(registrar.address, amount, abiEncodedBytes)`
$DIR/contracts/test/v0.8/KeeperRegistrar.test.ts:393:35-393:46: `.getState()`
$DIR/contracts/test/v0.8/KeeperRegistrar.test.ts:393:47-393:75: `.state.numUpkeeps.toNumber()`
$DIR/contracts/test/v0.8/KeeperRegistrar.test.ts:396:7-401:8: `await registrar.connect(registrarOwner).setRegistrationConfig(
        autoApproveType_ENABLED_ALL,
        2, // maxAllowedAutoApprove
        registry.address,
        minUpkeepSpend,
      )`
$DIR/contracts/test/v0.8/KeeperRegistrar.test.ts:396:22-396:46: `.connect(registrarOwner)`
$DIR/contracts/test/v0.8/KeeperRegistrar.test.ts:396:46-401:8: `.setRegistrationConfig(
        autoApproveType_ENABLED_ALL,
        2, // maxAllowedAutoApprove
        registry.address,
        minUpkeepSpend,
      )`
$DIR/contracts/test/v0.8/KeeperRegistrar.test.ts:402:7-412:9: `abiEncodedBytes = registrar.interface.encodeFunctionData('register', [
        upkeepName,
        emptyBytes,
        mock.address,
        executeGas.toNumber() + 2, // make unique hash
        await admin.getAddress(),
        emptyBytes,
        amount,
        source,
        await requestSender.getAddress(),
      ])`
$DIR/contracts/test/v0.8/KeeperRegistrar.test.ts:402:34-412:9: `.interface.encodeFunctionData('register', [
        upkeepName,
        emptyBytes,
        mock.address,
        executeGas.toNumber() + 2, // make unique hash
        await admin.getAddress(),
        emptyBytes,
        amount,
        source,
        await requestSender.getAddress(),
      ])`
$DIR/contracts/test/v0.8/KeeperRegistrar.test.ts:407:20-407:33: `.getAddress()`
$DIR/contracts/test/v0.8/KeeperRegistrar.test.ts:411:28-411:41: `.getAddress()`
$DIR/contracts/test/v0.8/KeeperRegistrar.test.ts:413:7-415:69: `await linkToken
        .connect(requestSender)
        .transferAndCall(registrar.address, amount, abiEncodedBytes)`
$DIR/contracts/test/v0.8/KeeperRegistrar.test.ts:413:22-414:32: `
        .connect(requestSender)`
$DIR/contracts/test/v0.8/KeeperRegistrar.test.ts:414:32-415:69: `
        .transferAndCall(registrar.address, amount, abiEncodedBytes)`
$DIR/contracts/test/v0.8/KeeperRegistrar.test.ts:416:35-416:46: `.getState()`
$DIR/contracts/test/v0.8/KeeperRegistrar.test.ts:416:47-416:75: `.state.numUpkeeps.toNumber()`
$DIR/contracts/test/v0.8/KeeperRegistrar.test.ts:419:7-429:9: `abiEncodedBytes = registrar.interface.encodeFunctionData('register', [
        upkeepName,
        emptyBytes,
        mock.address,
        executeGas.toNumber() + 3, // make unique hash
        await admin.getAddress(),
        emptyBytes,
        amount,
        source,
        await requestSender.getAddress(),
      ])`
$DIR/contracts/test/v0.8/KeeperRegistrar.test.ts:419:34-429:9: `.interface.encodeFunctionData('register', [
        upkeepName,
        emptyBytes,
        mock.address,
        executeGas.toNumber() + 3, // make unique hash
        await admin.getAddress(),
        emptyBytes,
        amount,
        source,
        await requestSender.getAddress(),
      ])`
$DIR/contracts/test/v0.8/KeeperRegistrar.test.ts:424:20-424:33: `.getAddress()`
$DIR/contracts/test/v0.8/KeeperRegistrar.test.ts:428:28-428:41: `.getAddress()`
$DIR/contracts/test/v0.8/KeeperRegistrar.test.ts:430:7-432:69: `await linkToken
        .connect(requestSender)
        .transferAndCall(registrar.address, amount, abiEncodedBytes)`
$DIR/contracts/test/v0.8/KeeperRegistrar.test.ts:430:22-431:32: `
        .connect(requestSender)`
$DIR/contracts/test/v0.8/KeeperRegistrar.test.ts:431:32-432:69: `
        .transferAndCall(registrar.address, amount, abiEncodedBytes)`
$DIR/contracts/test/v0.8/KeeperRegistrar.test.ts:433:35-433:46: `.getState()`
$DIR/contracts/test/v0.8/KeeperRegistrar.test.ts:433:47-433:75: `.state.numUpkeeps.toNumber()`
$DIR/contracts/test/v0.8/KeeperRegistrar.test.ts:437:48-437:61: `.getAddress()`
$DIR/contracts/test/v0.8/KeeperRegistrar.test.ts:440:7-447:10: `await registrar
        .connect(registrarOwner)
        .setRegistrationConfig(
          autoApproveType_ENABLED_SENDER_ALLOWLIST,
          maxAllowedAutoApprove,
          registry.address,
          minUpkeepSpend,
        )`
$DIR/contracts/test/v0.8/KeeperRegistrar.test.ts:440:22-441:33: `
        .connect(registrarOwner)`
$DIR/contracts/test/v0.8/KeeperRegistrar.test.ts:441:33-447:10: `
        .setRegistrationConfig(
          autoApproveType_ENABLED_SENDER_ALLOWLIST,
          maxAllowedAutoApprove,
          registry.address,
          minUpkeepSpend,
        )`
$DIR/contracts/test/v0.8/KeeperRegistrar.test.ts:450:7-452:58: `await registrar
        .connect(registrarOwner)
        .setAutoApproveAllowedSender(senderAddress, true)`
$DIR/contracts/test/v0.8/KeeperRegistrar.test.ts:450:22-451:33: `
        .connect(registrarOwner)`
$DIR/contracts/test/v0.8/KeeperRegistrar.test.ts:451:33-452:58: `
        .setAutoApproveAllowedSender(senderAddress, true)`
$DIR/contracts/test/v0.8/KeeperRegistrar.test.ts:455:40-468:8: `.interface.encodeFunctionData(
        'register',
        [
          upkeepName,
          emptyBytes,
          mock.address,
          executeGas,
          await admin.getAddress(),
          emptyBytes,
          amount,
          source,
          await requestSender.getAddress(),
        ],
      )`
$DIR/contracts/test/v0.8/KeeperRegistrar.test.ts:462:22-462:35: `.getAddress()`
$DIR/contracts/test/v0.8/KeeperRegistrar.test.ts:466:30-466:43: `.getAddress()`
$DIR/contracts/test/v0.8/KeeperRegistrar.test.ts:469:33-470:32: `
        .connect(requestSender)`
$DIR/contracts/test/v0.8/KeeperRegistrar.test.ts:470:32-471:69: `
        .transferAndCall(registrar.address, amount, abiEncodedBytes)`
$DIR/contracts/test/v0.8/KeeperRegistrar.test.ts:473:34-473:59: `.getActiveUpkeepIDs(0, 1)`
$DIR/contracts/test/v0.8/KeeperRegistrar.test.ts:476:39-476:53: `.getUpkeep(id)`
$DIR/contracts/test/v0.8/KeeperRegistrar.test.ts:478:48-478:61: `.getAddress()`
$DIR/contracts/test/v0.8/KeeperRegistrar.test.ts:480:29-480:48: `.balance.toString()`
$DIR/contracts/test/v0.8/KeeperRegistrar.test.ts:488:42-488:53: `.getState()`
$DIR/contracts/test/v0.8/KeeperRegistrar.test.ts:489:48-489:61: `.getAddress()`
$DIR/contracts/test/v0.8/KeeperRegistrar.test.ts:492:7-499:10: `await registrar
        .connect(registrarOwner)
        .setRegistrationConfig(
          autoApproveType_ENABLED_SENDER_ALLOWLIST,
          maxAllowedAutoApprove,
          registry.address,
          minUpkeepSpend,
        )`
$DIR/contracts/test/v0.8/KeeperRegistrar.test.ts:492:22-493:33: `
        .connect(registrarOwner)`
$DIR/contracts/test/v0.8/KeeperRegistrar.test.ts:493:33-499:10: `
        .setRegistrationConfig(
          autoApproveType_ENABLED_SENDER_ALLOWLIST,
          maxAllowedAutoApprove,
          registry.address,
          minUpkeepSpend,
        )`
$DIR/contracts/test/v0.8/KeeperRegistrar.test.ts:502:7-504:59: `await registrar
        .connect(registrarOwner)
        .setAutoApproveAllowedSender(senderAddress, false)`
$DIR/contracts/test/v0.8/KeeperRegistrar.test.ts:502:22-503:33: `
        .connect(registrarOwner)`
$DIR/contracts/test/v0.8/KeeperRegistrar.test.ts:503:33-504:59: `
        .setAutoApproveAllowedSender(senderAddress, false)`
$DIR/contracts/test/v0.8/KeeperRegistrar.test.ts:507:40-520:8: `.interface.encodeFunctionData(
        'register',
        [
          upkeepName,
          emptyBytes,
          mock.address,
          executeGas,
          await admin.getAddress(),
          emptyBytes,
          amount,
          source,
          await requestSender.getAddress(),
        ],
      )`
$DIR/contracts/test/v0.8/KeeperRegistrar.test.ts:514:22-514:35: `.getAddress()`
$DIR/contracts/test/v0.8/KeeperRegistrar.test.ts:518:30-518:43: `.getAddress()`
$DIR/contracts/test/v0.8/KeeperRegistrar.test.ts:521:33-522:32: `
        .connect(requestSender)`
$DIR/contracts/test/v0.8/KeeperRegistrar.test.ts:522:32-523:69: `
        .transferAndCall(registrar.address, amount, abiEncodedBytes)`
$DIR/contracts/test/v0.8/KeeperRegistrar.test.ts:524:31-524:38: `.wait()`
$DIR/contracts/test/v0.8/KeeperRegistrar.test.ts:527:41-527:52: `.getState()`
$DIR/contracts/test/v0.8/KeeperRegistrar.test.ts:536:45-536:69: `.getPendingRequest(hash)`
$DIR/contracts/test/v0.8/KeeperRegistrar.test.ts:537:31-537:44: `.getAddress()`
$DIR/contracts/test/v0.8/KeeperRegistrar.test.ts:538:23-538:45: `.eq(pendingRequest[1])`
$DIR/contracts/test/v0.8/KeeperRegistrar.test.ts:544:27-545:27: `
        .connect(stranger)`
$DIR/contracts/test/v0.8/KeeperRegistrar.test.ts:545:27-546:70: `
        .setAutoApproveAllowedSender(await admin.getAddress(), false)`
$DIR/contracts/test/v0.8/KeeperRegistrar.test.ts:546:49-546:62: `.getAddress()`
$DIR/contracts/test/v0.8/KeeperRegistrar.test.ts:547:7-547:52: `await evmRevert(tx, 'Only callable by owner')`
$DIR/contracts/test/v0.8/KeeperRegistrar.test.ts:551:43-551:56: `.getAddress()`
$DIR/contracts/test/v0.8/KeeperRegistrar.test.ts:552:31-553:33: `
        .connect(registrarOwner)`
$DIR/contracts/test/v0.8/KeeperRegistrar.test.ts:553:33-554:58: `
        .setAutoApproveAllowedSender(senderAddress, true)`
$DIR/contracts/test/v0.8/KeeperRegistrar.test.ts:559:48-560:24: `
        .connect(owner)`
$DIR/contracts/test/v0.8/KeeperRegistrar.test.ts:560:24-561:52: `
        .getAutoApproveAllowedSender(senderAddress)`
$DIR/contracts/test/v0.8/KeeperRegistrar.test.ts:564:7-566:59: `tx = await registrar
        .connect(registrarOwner)
        .setAutoApproveAllowedSender(senderAddress, false)`
$DIR/contracts/test/v0.8/KeeperRegistrar.test.ts:564:27-565:33: `
        .connect(registrarOwner)`
$DIR/contracts/test/v0.8/KeeperRegistrar.test.ts:565:33-566:59: `
        .setAutoApproveAllowedSender(senderAddress, false)`
$DIR/contracts/test/v0.8/KeeperRegistrar.test.ts:571:7-573:52: `senderAllowedStatus = await registrar
        .connect(owner)
        .getAutoApproveAllowedSender(senderAddress)`
$DIR/contracts/test/v0.8/KeeperRegistrar.test.ts:571:44-572:24: `
        .connect(owner)`
$DIR/contracts/test/v0.8/KeeperRegistrar.test.ts:572:24-573:52: `
        .getAutoApproveAllowedSender(senderAddress)`
$DIR/contracts/test/v0.8/KeeperRegistrar.test.ts:615:27-616:27: `
        .connect(stranger)`
$DIR/contracts/test/v0.8/KeeperRegistrar.test.ts:616:27-624:10: `
        .approve(
          upkeepName,
          mock.address,
          executeGas,
          await admin.getAddress(),
          emptyBytes,
          hash,
        )`
$DIR/contracts/test/v0.8/KeeperRegistrar.test.ts:621:22-621:35: `.getAddress()`
$DIR/contracts/test/v0.8/KeeperRegistrar.test.ts:625:7-625:52: `await evmRevert(tx, 'Only callable by owner')`
$DIR/contracts/test/v0.8/KeeperRegistrar.test.ts:629:27-630:33: `
        .connect(registrarOwner)`
$DIR/contracts/test/v0.8/KeeperRegistrar.test.ts:630:33-638:10: `
        .approve(
          upkeepName,
          mock.address,
          executeGas,
          await admin.getAddress(),
          emptyBytes,
          '0x000000000000000000000000322813fd9a801c5507c9de605d63cea4f2ce6c44',
        )`
$DIR/contracts/test/v0.8/KeeperRegistrar.test.ts:635:22-635:35: `.getAddress()`
$DIR/contracts/test/v0.8/KeeperRegistrar.test.ts:639:7-639:53: `await evmRevert(tx, errorMsgs.requestNotFound)`
$DIR/contracts/test/v0.8/KeeperRegistrar.test.ts:643:25-644:33: `
        .connect(registrarOwner)`
$DIR/contracts/test/v0.8/KeeperRegistrar.test.ts:644:33-652:10: `
        .approve(
          upkeepName,
          ethers.Wallet.createRandom().address,
          executeGas,
          await admin.getAddress(),
          emptyBytes,
          hash,
        )`
$DIR/contracts/test/v0.8/KeeperRegistrar.test.ts:647:17-647:39: `.Wallet.createRandom()`
$DIR/contracts/test/v0.8/KeeperRegistrar.test.ts:649:22-649:35: `.getAddress()`
$DIR/contracts/test/v0.8/KeeperRegistrar.test.ts:653:7-653:49: `await evmRevert(tx, errorMsgs.hashPayload)`
$DIR/contracts/test/v0.8/KeeperRegistrar.test.ts:654:7-663:10: `tx = registrar
        .connect(registrarOwner)
        .approve(
          upkeepName,
          mock.address,
          10000,
          await admin.getAddress(),
          emptyBytes,
          hash,
        )`
$DIR/contracts/test/v0.8/KeeperRegistrar.test.ts:654:21-655:33: `
        .connect(registrarOwner)`
$DIR/contracts/test/v0.8/KeeperRegistrar.test.ts:655:33-663:10: `
        .approve(
          upkeepName,
          mock.address,
          10000,
          await admin.getAddress(),
          emptyBytes,
          hash,
        )`
$DIR/contracts/test/v0.8/KeeperRegistrar.test.ts:660:22-660:35: `.getAddress()`
$DIR/contracts/test/v0.8/KeeperRegistrar.test.ts:664:7-664:49: `await evmRevert(tx, errorMsgs.hashPayload)`
$DIR/contracts/test/v0.8/KeeperRegistrar.test.ts:665:7-674:10: `tx = registrar
        .connect(registrarOwner)
        .approve(
          upkeepName,
          mock.address,
          executeGas,
          ethers.Wallet.createRandom().address,
          emptyBytes,
          hash,
        )`
$DIR/contracts/test/v0.8/KeeperRegistrar.test.ts:665:21-666:33: `
        .connect(registrarOwner)`
$DIR/contracts/test/v0.8/KeeperRegistrar.test.ts:666:33-674:10: `
        .approve(
          upkeepName,
          mock.address,
          executeGas,
          ethers.Wallet.createRandom().address,
          emptyBytes,
          hash,
        )`
$DIR/contracts/test/v0.8/KeeperRegistrar.test.ts:671:17-671:39: `.Wallet.createRandom()`
$DIR/contracts/test/v0.8/KeeperRegistrar.test.ts:675:7-675:49: `await evmRevert(tx, errorMsgs.hashPayload)`
$DIR/contracts/test/v0.8/KeeperRegistrar.test.ts:676:7-685:10: `tx = registrar
        .connect(registrarOwner)
        .approve(
          upkeepName,
          mock.address,
          executeGas,
          await admin.getAddress(),
          '0x1234',
          hash,
        )`
$DIR/contracts/test/v0.8/KeeperRegistrar.test.ts:676:21-677:33: `
        .connect(registrarOwner)`
$DIR/contracts/test/v0.8/KeeperRegistrar.test.ts:677:33-685:10: `
        .approve(
          upkeepName,
          mock.address,
          executeGas,
          await admin.getAddress(),
          '0x1234',
          hash,
        )`
$DIR/contracts/test/v0.8/KeeperRegistrar.test.ts:682:22-682:35: `.getAddress()`
$DIR/contracts/test/v0.8/KeeperRegistrar.test.ts:686:7-686:49: `await evmRevert(tx, errorMsgs.hashPayload)`
$DIR/contracts/test/v0.8/KeeperRegistrar.test.ts:690:33-691:33: `
        .connect(registrarOwner)`
$DIR/contracts/test/v0.8/KeeperRegistrar.test.ts:691:33-699:10: `
        .approve(
          upkeepName,
          mock.address,
          executeGas,
          await admin.getAddress(),
          emptyBytes,
          hash,
        )`
$DIR/contracts/test/v0.8/KeeperRegistrar.test.ts:696:22-696:35: `.getAddress()`
$DIR/contracts/test/v0.8/KeeperRegistrar.test.ts:704:7-713:10: `await registrar
        .connect(registrarOwner)
        .approve(
          upkeepName,
          mock.address,
          executeGas,
          await admin.getAddress(),
          emptyBytes,
          hash,
        )`
$DIR/contracts/test/v0.8/KeeperRegistrar.test.ts:704:22-705:33: `
        .connect(registrarOwner)`
$DIR/contracts/test/v0.8/KeeperRegistrar.test.ts:705:33-713:10: `
        .approve(
          upkeepName,
          mock.address,
          executeGas,
          await admin.getAddress(),
          emptyBytes,
          hash,
        )`
$DIR/contracts/test/v0.8/KeeperRegistrar.test.ts:710:22-710:35: `.getAddress()`
$DIR/contracts/test/v0.8/KeeperRegistrar.test.ts:714:27-715:33: `
        .connect(registrarOwner)`
$DIR/contracts/test/v0.8/KeeperRegistrar.test.ts:715:33-723:10: `
        .approve(
          upkeepName,
          mock.address,
          executeGas,
          await admin.getAddress(),
          emptyBytes,
          hash,
        )`
$DIR/contracts/test/v0.8/KeeperRegistrar.test.ts:720:22-720:35: `.getAddress()`
$DIR/contracts/test/v0.8/KeeperRegistrar.test.ts:724:7-724:53: `await evmRevert(tx, errorMsgs.requestNotFound)`
$DIR/contracts/test/v0.8/KeeperRegistrar.test.ts:768:27-768:45: `.connect(stranger)`
$DIR/contracts/test/v0.8/KeeperRegistrar.test.ts:768:45-768:58: `.cancel(hash)`
$DIR/contracts/test/v0.8/KeeperRegistrar.test.ts:769:7-769:47: `await evmRevert(tx, errorMsgs.onlyAdmin)`
$DIR/contracts/test/v0.8/KeeperRegistrar.test.ts:773:27-774:33: `
        .connect(registrarOwner)`
$DIR/contracts/test/v0.8/KeeperRegistrar.test.ts:774:33-777:10: `
        .cancel(
          '0x000000000000000000000000322813fd9a801c5507c9de605d63cea4f2ce6c44',
        )`
$DIR/contracts/test/v0.8/KeeperRegistrar.test.ts:778:7-778:53: `await evmRevert(tx, errorMsgs.requestNotFound)`
$DIR/contracts/test/v0.8/KeeperRegistrar.test.ts:782:37-782:73: `.balanceOf(await admin.getAddress())`
$DIR/contracts/test/v0.8/KeeperRegistrar.test.ts:782:59-782:72: `.getAddress()`
$DIR/contracts/test/v0.8/KeeperRegistrar.test.ts:783:33-783:48: `.connect(admin)`
$DIR/contracts/test/v0.8/KeeperRegistrar.test.ts:783:48-783:61: `.cancel(hash)`
$DIR/contracts/test/v0.8/KeeperRegistrar.test.ts:784:36-784:72: `.balanceOf(await admin.getAddress())`
$DIR/contracts/test/v0.8/KeeperRegistrar.test.ts:784:58-784:71: `.getAddress()`
$DIR/contracts/test/v0.8/KeeperRegistrar.test.ts:785:26-785:38: `.sub(before)`
$DIR/contracts/test/v0.8/KeeperRegistrar.test.ts:785:38-785:72: `.eq(amount.mul(BigNumber.from(2)))`
$DIR/contracts/test/v0.8/KeeperRegistrar.test.ts:785:48-785:71: `.mul(BigNumber.from(2))`
$DIR/contracts/test/v0.8/KeeperRegistrar.test.ts:785:62-785:70: `.from(2)`
$DIR/contracts/test/v0.8/KeeperRegistrar.test.ts:790:7-790:59: `await registrar.connect(registrarOwner).cancel(hash)`
$DIR/contracts/test/v0.8/KeeperRegistrar.test.ts:790:22-790:46: `.connect(registrarOwner)`
$DIR/contracts/test/v0.8/KeeperRegistrar.test.ts:790:46-790:59: `.cancel(hash)`
$DIR/contracts/test/v0.8/KeeperRegistrar.test.ts:791:25-791:49: `.connect(registrarOwner)`
$DIR/contracts/test/v0.8/KeeperRegistrar.test.ts:791:49-791:62: `.cancel(hash)`
$DIR/contracts/test/v0.8/KeeperRegistrar.test.ts:792:7-792:53: `await evmRevert(tx, errorMsgs.requestNotFound)`
$DIR/contracts/test/v0.8/KeeperRegistrar.test.ts:793:7-802:10: `tx = registrar
        .connect(registrarOwner)
        .approve(
          upkeepName,
          mock.address,
          executeGas,
          await admin.getAddress(),
          emptyBytes,
          hash,
        )`
$DIR/contracts/test/v0.8/KeeperRegistrar.test.ts:793:21-794:33: `
        .connect(registrarOwner)`
$DIR/contracts/test/v0.8/KeeperRegistrar.test.ts:794:33-802:10: `
        .approve(
          upkeepName,
          mock.address,
          executeGas,
          await admin.getAddress(),
          emptyBytes,
          hash,
        )`
$DIR/contracts/test/v0.8/KeeperRegistrar.test.ts:799:22-799:35: `.getAddress()`
$DIR/contracts/test/v0.8/KeeperRegistrar.test.ts:803:7-803:53: `await evmRevert(tx, errorMsgs.requestNotFound)`
$DIR/contracts/test/v0.8/PermissionedForwardProxy.test.ts:35:5-44:7: `publicAbi(controller, [
      'forward',
      'setPermission',
      'removePermission',
      'getPermission',
      // Owned
      'acceptOwnership',
      'owner',
      'transferOwnership',
    ])`
$DIR/contracts/test/v0.8/PermissionedForwardProxy.test.ts:51:21-52:36: `
            .connect(personas.Eddy)`
$DIR/contracts/test/v0.8/PermissionedForwardProxy.test.ts:52:36-56:14: `
            .setPermission(
              await personas.Carol.getAddress(),
              await personas.Eddy.getAddress(),
            )`
$DIR/contracts/test/v0.8/PermissionedForwardProxy.test.ts:54:29-54:48: `.Carol.getAddress()`
$DIR/contracts/test/v0.8/PermissionedForwardProxy.test.ts:55:29-55:47: `.Eddy.getAddress()`
$DIR/contracts/test/v0.8/PermissionedForwardProxy.test.ts:63:36-64:35: `
          .connect(personas.Carol)`
$DIR/contracts/test/v0.8/PermissionedForwardProxy.test.ts:64:35-68:12: `
          .setPermission(
            await personas.Carol.getAddress(),
            await personas.Eddy.getAddress(),
          )`
$DIR/contracts/test/v0.8/PermissionedForwardProxy.test.ts:66:27-66:46: `.Carol.getAddress()`
$DIR/contracts/test/v0.8/PermissionedForwardProxy.test.ts:67:27-67:45: `.Eddy.getAddress()`
$DIR/contracts/test/v0.8/PermissionedForwardProxy.test.ts:69:33-69:40: `.wait()`
$DIR/contracts/test/v0.8/PermissionedForwardProxy.test.ts:74:61-74:80: `.Carol.getAddress()`
$DIR/contracts/test/v0.8/PermissionedForwardProxy.test.ts:75:61-75:79: `.Eddy.getAddress()`
$DIR/contracts/test/v0.8/PermissionedForwardProxy.test.ts:78:27-78:76: `.getPermission(await personas.Carol.getAddress())`
$DIR/contracts/test/v0.8/PermissionedForwardProxy.test.ts:78:56-78:75: `.Carol.getAddress()`
$DIR/contracts/test/v0.8/PermissionedForwardProxy.test.ts:98:21-99:36: `
            .connect(personas.Eddy)`
$DIR/contracts/test/v0.8/PermissionedForwardProxy.test.ts:99:36-100:65: `
            .removePermission(await personas.Carol.getAddress())`
$DIR/contracts/test/v0.8/PermissionedForwardProxy.test.ts:100:45-100:64: `.Carol.getAddress()`
$DIR/contracts/test/v0.8/PermissionedForwardProxy.test.ts:107:36-108:35: `
          .connect(personas.Carol)`
$DIR/contracts/test/v0.8/PermissionedForwardProxy.test.ts:108:35-109:63: `
          .removePermission(await personas.Carol.getAddress())`
$DIR/contracts/test/v0.8/PermissionedForwardProxy.test.ts:109:43-109:62: `.Carol.getAddress()`
$DIR/contracts/test/v0.8/PermissionedForwardProxy.test.ts:111:33-111:40: `.wait()`
$DIR/contracts/test/v0.8/PermissionedForwardProxy.test.ts:116:61-116:80: `.Carol.getAddress()`
$DIR/contracts/test/v0.8/PermissionedForwardProxy.test.ts:119:27-119:76: `.getPermission(await personas.Carol.getAddress())`
$DIR/contracts/test/v0.8/PermissionedForwardProxy.test.ts:119:56-119:75: `.Carol.getAddress()`
$DIR/contracts/test/v0.8/PermissionedForwardProxy.test.ts:129:21-130:37: `
            .connect(personas.Carol)`
$DIR/contracts/test/v0.8/PermissionedForwardProxy.test.ts:130:37-131:61: `
            .forward(await personas.Eddy.getAddress(), '0x')`
$DIR/contracts/test/v0.8/PermissionedForwardProxy.test.ts:131:36-131:54: `.Eddy.getAddress()`
$DIR/contracts/test/v0.8/PermissionedForwardProxy.test.ts:145:9-150:12: `await controller
          .connect(personas.Carol)
          .forward(
            counter.address,
            counter.interface.encodeFunctionData('increment'),
          )`
$DIR/contracts/test/v0.8/PermissionedForwardProxy.test.ts:145:25-146:35: `
          .connect(personas.Carol)`
$DIR/contracts/test/v0.8/PermissionedForwardProxy.test.ts:146:35-150:12: `
          .forward(
            counter.address,
            counter.interface.encodeFunctionData('increment'),
          )`
$DIR/contracts/test/v0.8/PermissionedForwardProxy.test.ts:149:20-149:62: `.interface.encodeFunctionData('increment')`
$DIR/contracts/test/v0.8/PermissionedForwardProxy.test.ts:152:29-152:37: `.count()`
$DIR/contracts/test/v0.8/PermissionedForwardProxy.test.ts:157:21-158:37: `
            .connect(personas.Carol)`
$DIR/contracts/test/v0.8/PermissionedForwardProxy.test.ts:158:37-162:14: `
            .forward(
              counter.address,
              counter.interface.encodeFunctionData('alwaysRevertWithString'),
            )`
$DIR/contracts/test/v0.8/PermissionedForwardProxy.test.ts:161:22-161:77: `.interface.encodeFunctionData('alwaysRevertWithString')`
$DIR/contracts/test/v0.8/PermissionedForwardProxy.test.ts:166:21-167:37: `
            .connect(personas.Carol)`
$DIR/contracts/test/v0.8/PermissionedForwardProxy.test.ts:167:37-171:14: `
            .forward(
              counter.address,
              counter.interface.encodeFunctionData('alwaysRevert'),
            )`
$DIR/contracts/test/v0.8/PermissionedForwardProxy.test.ts:170:22-170:67: `.interface.encodeFunctionData('alwaysRevert')`
$DIR/contracts/test/v0.8/SimpleReadAccessController.test.ts:26:5-37:7: `publicAbi(controller, [
      'hasAccess',
      'addAccess',
      'disableAccessCheck',
      'enableAccessCheck',
      'removeAccess',
      'checkEnabled',
      // Owned
      'acceptOwnership',
      'owner',
      'transferOwnership',
    ])`
$DIR/contracts/test/v0.8/SimpleReadAccessController.test.ts:42:30-42:45: `.checkEnabled()`
$DIR/contracts/test/v0.8/SimpleReadAccessController.test.ts:49:25-50:34: `
          .connect(personas.Eddy)`
$DIR/contracts/test/v0.8/SimpleReadAccessController.test.ts:50:34-51:63: `
          .hasAccess(await personas.Eddy.getAddress(), '0x00')`
$DIR/contracts/test/v0.8/SimpleReadAccessController.test.ts:51:36-51:54: `.Eddy.getAddress()`
$DIR/contracts/test/v0.8/SimpleReadAccessController.test.ts:57:25-58:35: `
          .connect(personas.Carol)`
$DIR/contracts/test/v0.8/SimpleReadAccessController.test.ts:58:35-59:63: `
          .hasAccess(await personas.Eddy.getAddress(), '0x00')`
$DIR/contracts/test/v0.8/SimpleReadAccessController.test.ts:59:36-59:54: `.Eddy.getAddress()`
$DIR/contracts/test/v0.8/SimpleReadAccessController.test.ts:62:25-63:34: `
          .connect(personas.Eddy)`
$DIR/contracts/test/v0.8/SimpleReadAccessController.test.ts:63:34-64:64: `
          .hasAccess(await personas.Carol.getAddress(), '0x00')`
$DIR/contracts/test/v0.8/SimpleReadAccessController.test.ts:64:36-64:55: `.Carol.getAddress()`
$DIR/contracts/test/v0.8/SimpleReadAccessController.test.ts:73:21-74:36: `
            .connect(personas.Eddy)`
$DIR/contracts/test/v0.8/SimpleReadAccessController.test.ts:74:36-75:57: `
            .addAccess(await personas.Eddy.getAddress())`
$DIR/contracts/test/v0.8/SimpleReadAccessController.test.ts:75:38-75:56: `.Eddy.getAddress()`
$DIR/contracts/test/v0.8/SimpleReadAccessController.test.ts:91:27-91:79: `.hasAccess(await personas.Eddy.getAddress(), '0x00')`
$DIR/contracts/test/v0.8/SimpleReadAccessController.test.ts:91:52-91:70: `.Eddy.getAddress()`
$DIR/contracts/test/v0.8/SimpleReadAccessController.test.ts:103:39-105:12: `.addAccess(
            await personas.Eddy.getAddress(),
          )`
$DIR/contracts/test/v0.8/SimpleReadAccessController.test.ts:104:27-104:45: `.Eddy.getAddress()`
$DIR/contracts/test/v0.8/SimpleReadAccessController.test.ts:106:36-106:43: `.wait()`
$DIR/contracts/test/v0.8/SimpleReadAccessController.test.ts:124:21-125:36: `
            .connect(personas.Eddy)`
$DIR/contracts/test/v0.8/SimpleReadAccessController.test.ts:125:36-126:60: `
            .removeAccess(await personas.Eddy.getAddress())`
$DIR/contracts/test/v0.8/SimpleReadAccessController.test.ts:126:41-126:59: `.Eddy.getAddress()`
$DIR/contracts/test/v0.8/SimpleReadAccessController.test.ts:139:27-139:79: `.hasAccess(await personas.Eddy.getAddress(), '0x00')`
$DIR/contracts/test/v0.8/SimpleReadAccessController.test.ts:139:52-139:70: `.Eddy.getAddress()`
$DIR/contracts/test/v0.8/SimpleReadAccessController.test.ts:151:39-153:12: `.removeAccess(
            await personas.Eddy.getAddress(),
          )`
$DIR/contracts/test/v0.8/SimpleReadAccessController.test.ts:152:27-152:45: `.Eddy.getAddress()`
$DIR/contracts/test/v0.8/SimpleReadAccessController.test.ts:154:36-154:43: `.wait()`
$DIR/contracts/test/v0.8/SimpleReadAccessController.test.ts:165:21-165:44: `.connect(personas.Eddy)`
$DIR/contracts/test/v0.8/SimpleReadAccessController.test.ts:165:44-165:65: `.disableAccessCheck()`
$DIR/contracts/test/v0.8/SimpleReadAccessController.test.ts:167:39-167:54: `.checkEnabled()`
$DIR/contracts/test/v0.8/SimpleReadAccessController.test.ts:179:40-179:55: `.checkEnabled()`
$DIR/contracts/test/v0.8/SimpleReadAccessController.test.ts:184:27-184:79: `.hasAccess(await personas.Eddy.getAddress(), '0x00')`
$DIR/contracts/test/v0.8/SimpleReadAccessController.test.ts:184:52-184:70: `.Eddy.getAddress()`
$DIR/contracts/test/v0.8/SimpleReadAccessController.test.ts:190:27-190:78: `.hasAccess(await personas.Ned.getAddress(), '0x00')`
$DIR/contracts/test/v0.8/SimpleReadAccessController.test.ts:190:52-190:69: `.Ned.getAddress()`
$DIR/contracts/test/v0.8/SimpleReadAccessController.test.ts:200:39-200:60: `.disableAccessCheck()`
$DIR/contracts/test/v0.8/SimpleReadAccessController.test.ts:201:36-201:43: `.wait()`
$DIR/contracts/test/v0.8/SimpleReadAccessController.test.ts:212:21-212:44: `.connect(personas.Eddy)`
$DIR/contracts/test/v0.8/SimpleReadAccessController.test.ts:212:44-212:64: `.enableAccessCheck()`
$DIR/contracts/test/v0.8/SimpleReadAccessController.test.ts:227:27-227:79: `.hasAccess(await personas.Eddy.getAddress(), '0x00')`
$DIR/contracts/test/v0.8/SimpleReadAccessController.test.ts:227:52-227:70: `.Eddy.getAddress()`
$DIR/contracts/test/v0.8/SimpleReadAccessController.test.ts:233:27-233:78: `.hasAccess(await personas.Ned.getAddress(), '0x00')`
$DIR/contracts/test/v0.8/SimpleReadAccessController.test.ts:233:52-233:69: `.Ned.getAddress()`
$DIR/contracts/test/v0.8/SimpleReadAccessController.test.ts:243:39-243:59: `.enableAccessCheck()`
$DIR/contracts/test/v0.8/SimpleReadAccessController.test.ts:244:36-244:43: `.wait()`
$DIR/contracts/test/v0.8/SimpleWriteAccessController.test.ts:26:5-37:7: `publicAbi(controller, [
      'hasAccess',
      'addAccess',
      'disableAccessCheck',
      'enableAccessCheck',
      'removeAccess',
      'checkEnabled',
      // Owned
      'acceptOwnership',
      'owner',
      'transferOwnership',
    ])`
$DIR/contracts/test/v0.8/SimpleWriteAccessController.test.ts:42:30-42:45: `.checkEnabled()`
$DIR/contracts/test/v0.8/SimpleWriteAccessController.test.ts:49:25-50:34: `
          .connect(personas.Eddy)`
$DIR/contracts/test/v0.8/SimpleWriteAccessController.test.ts:50:34-51:63: `
          .hasAccess(await personas.Eddy.getAddress(), '0x00')`
$DIR/contracts/test/v0.8/SimpleWriteAccessController.test.ts:51:36-51:54: `.Eddy.getAddress()`
$DIR/contracts/test/v0.8/SimpleWriteAccessController.test.ts:57:25-58:35: `
          .connect(personas.Carol)`
$DIR/contracts/test/v0.8/SimpleWriteAccessController.test.ts:58:35-59:63: `
          .hasAccess(await personas.Eddy.getAddress(), '0x00')`
$DIR/contracts/test/v0.8/SimpleWriteAccessController.test.ts:59:36-59:54: `.Eddy.getAddress()`
$DIR/contracts/test/v0.8/SimpleWriteAccessController.test.ts:62:25-63:34: `
          .connect(personas.Eddy)`
$DIR/contracts/test/v0.8/SimpleWriteAccessController.test.ts:63:34-64:64: `
          .hasAccess(await personas.Carol.getAddress(), '0x00')`
$DIR/contracts/test/v0.8/SimpleWriteAccessController.test.ts:64:36-64:55: `.Carol.getAddress()`
$DIR/contracts/test/v0.8/SimpleWriteAccessController.test.ts:73:21-74:36: `
            .connect(personas.Eddy)`
$DIR/contracts/test/v0.8/SimpleWriteAccessController.test.ts:74:36-75:57: `
            .addAccess(await personas.Eddy.getAddress())`
$DIR/contracts/test/v0.8/SimpleWriteAccessController.test.ts:75:38-75:56: `.Eddy.getAddress()`
$DIR/contracts/test/v0.8/SimpleWriteAccessController.test.ts:91:27-91:79: `.hasAccess(await personas.Eddy.getAddress(), '0x00')`
$DIR/contracts/test/v0.8/SimpleWriteAccessController.test.ts:91:52-91:70: `.Eddy.getAddress()`
$DIR/contracts/test/v0.8/SimpleWriteAccessController.test.ts:114:21-115:36: `
            .connect(personas.Eddy)`
$DIR/contracts/test/v0.8/SimpleWriteAccessController.test.ts:115:36-116:60: `
            .removeAccess(await personas.Eddy.getAddress())`
$DIR/contracts/test/v0.8/SimpleWriteAccessController.test.ts:116:41-116:59: `.Eddy.getAddress()`
$DIR/contracts/test/v0.8/SimpleWriteAccessController.test.ts:129:27-129:79: `.hasAccess(await personas.Eddy.getAddress(), '0x00')`
$DIR/contracts/test/v0.8/SimpleWriteAccessController.test.ts:129:52-129:70: `.Eddy.getAddress()`
$DIR/contracts/test/v0.8/SimpleWriteAccessController.test.ts:145:21-145:44: `.connect(personas.Eddy)`
$DIR/contracts/test/v0.8/SimpleWriteAccessController.test.ts:145:44-145:65: `.disableAccessCheck()`
$DIR/contracts/test/v0.8/SimpleWriteAccessController.test.ts:147:39-147:54: `.checkEnabled()`
$DIR/contracts/test/v0.8/SimpleWriteAccessController.test.ts:159:40-159:55: `.checkEnabled()`
$DIR/contracts/test/v0.8/SimpleWriteAccessController.test.ts:164:27-164:79: `.hasAccess(await personas.Eddy.getAddress(), '0x00')`
$DIR/contracts/test/v0.8/SimpleWriteAccessController.test.ts:164:52-164:70: `.Eddy.getAddress()`
$DIR/contracts/test/v0.8/SimpleWriteAccessController.test.ts:170:27-170:78: `.hasAccess(await personas.Ned.getAddress(), '0x00')`
$DIR/contracts/test/v0.8/SimpleWriteAccessController.test.ts:170:52-170:69: `.Ned.getAddress()`
$DIR/contracts/test/v0.8/SimpleWriteAccessController.test.ts:184:21-184:44: `.connect(personas.Eddy)`
$DIR/contracts/test/v0.8/SimpleWriteAccessController.test.ts:184:44-184:64: `.enableAccessCheck()`
$DIR/contracts/test/v0.8/SimpleWriteAccessController.test.ts:199:27-199:79: `.hasAccess(await personas.Eddy.getAddress(), '0x00')`
$DIR/contracts/test/v0.8/SimpleWriteAccessController.test.ts:199:52-199:70: `.Eddy.getAddress()`
$DIR/contracts/test/v0.8/SimpleWriteAccessController.test.ts:205:27-205:78: `.hasAccess(await personas.Ned.getAddress(), '0x00')`
$DIR/contracts/test/v0.8/SimpleWriteAccessController.test.ts:205:52-205:69: `.Ned.getAddress()`
$DIR/contracts/test/v0.8/VRFD20.test.ts:67:5-82:7: `publicAbi(vrfD20, [
      // Owned
      'acceptOwnership',
      'owner',
      'transferOwnership',
      //VRFConsumerBase
      'rawFulfillRandomness',
      // VRFD20
      'rollDice',
      'house',
      'withdrawLINK',
      'keyHash',
      'fee',
      'setKeyHash',
      'setFee',
    ])`
$DIR/contracts/test/v0.8/VRFD20.test.ts:89:17-90:37: `
            .connect(roles.stranger)`
$DIR/contracts/test/v0.8/VRFD20.test.ts:90:37-91:70: `
            .withdrawLINK(await roles.stranger.getAddress(), deposit)`
$DIR/contracts/test/v0.8/VRFD20.test.ts:91:38-91:60: `.stranger.getAddress()`
$DIR/contracts/test/v0.8/VRFD20.test.ts:96:39-96:46: `.mul(2)`
$DIR/contracts/test/v0.8/VRFD20.test.ts:98:17-99:43: `
            .connect(roles.defaultAccount)`
$DIR/contracts/test/v0.8/VRFD20.test.ts:99:43-103:14: `
            .withdrawLINK(
              await roles.defaultAccount.getAddress(),
              withdrawAmount,
            )`
$DIR/contracts/test/v0.8/VRFD20.test.ts:101:26-101:54: `.defaultAccount.getAddress()`
$DIR/contracts/test/v0.8/VRFD20.test.ts:110:42-112:10: `.balanceOf(
          await roles.defaultAccount.getAddress(),
        )`
$DIR/contracts/test/v0.8/VRFD20.test.ts:111:22-111:50: `.defaultAccount.getAddress()`
$DIR/contracts/test/v0.8/VRFD20.test.ts:113:41-113:62: `.from(startingAmount)`
$DIR/contracts/test/v0.8/VRFD20.test.ts:113:62-113:75: `.add(deposit)`
$DIR/contracts/test/v0.8/VRFD20.test.ts:114:9-116:74: `await vrfD20
          .connect(roles.defaultAccount)
          .withdrawLINK(await roles.defaultAccount.getAddress(), deposit)`
$DIR/contracts/test/v0.8/VRFD20.test.ts:114:21-115:41: `
          .connect(roles.defaultAccount)`
$DIR/contracts/test/v0.8/VRFD20.test.ts:115:41-116:74: `
          .withdrawLINK(await roles.defaultAccount.getAddress(), deposit)`
$DIR/contracts/test/v0.8/VRFD20.test.ts:116:36-116:64: `.defaultAccount.getAddress()`
$DIR/contracts/test/v0.8/VRFD20.test.ts:117:40-119:10: `.balanceOf(
          await roles.defaultAccount.getAddress(),
        )`
$DIR/contracts/test/v0.8/VRFD20.test.ts:118:22-118:50: `.defaultAccount.getAddress()`
$DIR/contracts/test/v0.8/VRFD20.test.ts:131:17-131:41: `.connect(roles.stranger)`
$DIR/contracts/test/v0.8/VRFD20.test.ts:131:41-131:61: `.setKeyHash(newHash)`
$DIR/contracts/test/v0.8/VRFD20.test.ts:138:9-138:41: `await vrfD20.setKeyHash(newHash)`
$DIR/contracts/test/v0.8/VRFD20.test.ts:138:21-138:41: `.setKeyHash(newHash)`
$DIR/contracts/test/v0.8/VRFD20.test.ts:139:40-139:50: `.keyHash()`
$DIR/contracts/test/v0.8/VRFD20.test.ts:151:17-151:41: `.connect(roles.stranger)`
$DIR/contracts/test/v0.8/VRFD20.test.ts:151:41-151:56: `.setFee(newFee)`
$DIR/contracts/test/v0.8/VRFD20.test.ts:158:9-158:36: `await vrfD20.setFee(newFee)`
$DIR/contracts/test/v0.8/VRFD20.test.ts:158:21-158:36: `.setFee(newFee)`
$DIR/contracts/test/v0.8/VRFD20.test.ts:159:39-159:45: `.fee()`
$DIR/contracts/test/v0.8/VRFD20.test.ts:169:17-169:58: `.house(await personas.Nancy.getAddress())`
$DIR/contracts/test/v0.8/VRFD20.test.ts:169:38-169:57: `.Nancy.getAddress()`
$DIR/contracts/test/v0.8/VRFD20.test.ts:174:9-174:65: `await vrfD20.rollDice(await personas.Nancy.getAddress())`
$DIR/contracts/test/v0.8/VRFD20.test.ts:174:21-174:65: `.rollDice(await personas.Nancy.getAddress())`
$DIR/contracts/test/v0.8/VRFD20.test.ts:174:45-174:64: `.Nancy.getAddress()`
$DIR/contracts/test/v0.8/VRFD20.test.ts:176:17-176:58: `.house(await personas.Nancy.getAddress())`
$DIR/contracts/test/v0.8/VRFD20.test.ts:176:38-176:57: `.Nancy.getAddress()`
$DIR/contracts/test/v0.8/VRFD20.test.ts:185:32-185:76: `.rollDice(await personas.Nancy.getAddress())`
$DIR/contracts/test/v0.8/VRFD20.test.ts:185:56-185:75: `.Nancy.getAddress()`
$DIR/contracts/test/v0.8/VRFD20.test.ts:188:9-192:10: `await vrfCoordinator.callBackWithRandomness(
          eventRequestId,
          randomness,
          vrfD20.address,
        )`
$DIR/contracts/test/v0.8/VRFD20.test.ts:188:29-192:10: `.callBackWithRandomness(
          eventRequestId,
          randomness,
          vrfD20.address,
        )`
$DIR/contracts/test/v0.8/VRFD20.test.ts:193:38-193:79: `.house(await personas.Nancy.getAddress())`
$DIR/contracts/test/v0.8/VRFD20.test.ts:193:59-193:78: `.Nancy.getAddress()`
$DIR/contracts/test/v0.8/VRFD20.test.ts:217:44-218:41: `
          .connect(roles.defaultAccount)`
$DIR/contracts/test/v0.8/VRFD20.test.ts:218:41-219:70: `
          .deploy(vrfCoordinator.address, link.address, keyHash, fee)`
$DIR/contracts/test/v0.8/VRFD20.test.ts:221:18-221:62: `.rollDice(await personas.Nancy.getAddress())`
$DIR/contracts/test/v0.8/VRFD20.test.ts:221:42-221:61: `.Nancy.getAddress()`
$DIR/contracts/test/v0.8/VRFD20.test.ts:227:17-228:37: `
            .connect(roles.stranger)`
$DIR/contracts/test/v0.8/VRFD20.test.ts:228:37-229:57: `
            .rollDice(await personas.Nancy.getAddress())`
$DIR/contracts/test/v0.8/VRFD20.test.ts:229:37-229:56: `.Nancy.getAddress()`
$DIR/contracts/test/v0.8/VRFD20.test.ts:234:9-234:65: `await vrfD20.rollDice(await personas.Nancy.getAddress())`
$DIR/contracts/test/v0.8/VRFD20.test.ts:234:21-234:65: `.rollDice(await personas.Nancy.getAddress())`
$DIR/contracts/test/v0.8/VRFD20.test.ts:234:45-234:64: `.Nancy.getAddress()`
$DIR/contracts/test/v0.8/VRFD20.test.ts:236:17-236:61: `.rollDice(await personas.Nancy.getAddress())`
$DIR/contracts/test/v0.8/VRFD20.test.ts:236:41-236:60: `.Nancy.getAddress()`
$DIR/contracts/test/v0.8/VRFD20.test.ts:270:38-270:79: `.house(await personas.Nancy.getAddress())`
$DIR/contracts/test/v0.8/VRFD20.test.ts:270:59-270:78: `.Nancy.getAddress()`
$DIR/contracts/test/v0.8/VRFD20.test.ts:276:9-276:68: `tx = await vrfD20.rollDice(await personas.Ned.getAddress())`
$DIR/contracts/test/v0.8/VRFD20.test.ts:276:26-276:68: `.rollDice(await personas.Ned.getAddress())`
$DIR/contracts/test/v0.8/VRFD20.test.ts:276:50-276:67: `.Ned.getAddress()`
$DIR/contracts/test/v0.8/VRFD20.test.ts:278:9-278:42: `eventRequestId = log?.topics?.[1]`
$DIR/contracts/test/v0.8/VRFD20.test.ts:279:9-283:10: `tx = await vrfCoordinator.callBackWithRandomness(
          eventRequestId,
          secondRandomness,
          vrfD20.address,
        )`
$DIR/contracts/test/v0.8/VRFD20.test.ts:279:34-283:10: `.callBackWithRandomness(
          eventRequestId,
          secondRandomness,
          vrfD20.address,
        )`
$DIR/contracts/test/v0.8/VRFD20.test.ts:289:64-290:41: `
          .connect(roles.defaultAccount)`
$DIR/contracts/test/v0.8/VRFD20.test.ts:290:41-291:32: `
          .deploy(link.address)`
$DIR/contracts/test/v0.8/VRFD20.test.ts:293:41-297:10: `.callBackWithRandomness(
          eventRequestId,
          randomness,
          vrfD20.address,
        )`
$DIR/contracts/test/v0.8/VRFSubscriptionBalanceMonitor.test.ts:122:7-122:45: `await lt.transfer(bm.address, oneLINK)`
$DIR/contracts/test/v0.8/VRFSubscriptionBalanceMonitor.test.ts:122:15-122:45: `.transfer(bm.address, oneLINK)`
$DIR/contracts/test/v0.8/VRFSubscriptionBalanceMonitor.test.ts:123:7-123:63: `await lt.connect(stranger).transfer(bm.address, oneLINK)`
$DIR/contracts/test/v0.8/VRFSubscriptionBalanceMonitor.test.ts:123:15-123:33: `.connect(stranger)`
$DIR/contracts/test/v0.8/VRFSubscriptionBalanceMonitor.test.ts:123:33-123:63: `.transfer(bm.address, oneLINK)`
$DIR/contracts/test/v0.8/VRFSubscriptionBalanceMonitor.test.ts:134:37-134:62: `.balanceOf(owner.address)`
$DIR/contracts/test/v0.8/VRFSubscriptionBalanceMonitor.test.ts:135:26-135:41: `.connect(owner)`
$DIR/contracts/test/v0.8/VRFSubscriptionBalanceMonitor.test.ts:135:41-135:74: `.withdraw(oneLINK, owner.address)`
$DIR/contracts/test/v0.8/VRFSubscriptionBalanceMonitor.test.ts:136:7-136:22: `await tx.wait()`
$DIR/contracts/test/v0.8/VRFSubscriptionBalanceMonitor.test.ts:136:15-136:22: `.wait()`
$DIR/contracts/test/v0.8/VRFSubscriptionBalanceMonitor.test.ts:137:36-137:61: `.balanceOf(owner.address)`
$DIR/contracts/test/v0.8/VRFSubscriptionBalanceMonitor.test.ts:139:21-139:39: `.gt(beforeBalance)`
$DIR/contracts/test/v0.8/VRFSubscriptionBalanceMonitor.test.ts:145:26-145:41: `.connect(owner)`
$DIR/contracts/test/v0.8/VRFSubscriptionBalanceMonitor.test.ts:145:41-145:74: `.withdraw(oneLINK, owner.address)`
$DIR/contracts/test/v0.8/VRFSubscriptionBalanceMonitor.test.ts:152:37-152:65: `.balanceOf(stranger.address)`
$DIR/contracts/test/v0.8/VRFSubscriptionBalanceMonitor.test.ts:153:26-153:41: `.connect(owner)`
$DIR/contracts/test/v0.8/VRFSubscriptionBalanceMonitor.test.ts:153:41-153:77: `.withdraw(oneLINK, stranger.address)`
$DIR/contracts/test/v0.8/VRFSubscriptionBalanceMonitor.test.ts:154:7-154:22: `await tx.wait()`
$DIR/contracts/test/v0.8/VRFSubscriptionBalanceMonitor.test.ts:154:15-154:22: `.wait()`
$DIR/contracts/test/v0.8/VRFSubscriptionBalanceMonitor.test.ts:155:36-155:64: `.balanceOf(stranger.address)`
$DIR/contracts/test/v0.8/VRFSubscriptionBalanceMonitor.test.ts:157:22-157:35: `.add(oneLINK)`
$DIR/contracts/test/v0.8/VRFSubscriptionBalanceMonitor.test.ts:157:35-157:52: `.eq(afterBalance)`
$DIR/contracts/test/v0.8/VRFSubscriptionBalanceMonitor.test.ts:163:20-163:38: `.connect(stranger)`
$DIR/contracts/test/v0.8/VRFSubscriptionBalanceMonitor.test.ts:163:38-163:71: `.withdraw(oneLINK, owner.address)`
$DIR/contracts/test/v0.8/VRFSubscriptionBalanceMonitor.test.ts:170:31-170:46: `.connect(owner)`
$DIR/contracts/test/v0.8/VRFSubscriptionBalanceMonitor.test.ts:170:46-170:54: `.pause()`
$DIR/contracts/test/v0.8/VRFSubscriptionBalanceMonitor.test.ts:171:7-171:27: `await pauseTx.wait()`
$DIR/contracts/test/v0.8/VRFSubscriptionBalanceMonitor.test.ts:171:20-171:27: `.wait()`
$DIR/contracts/test/v0.8/VRFSubscriptionBalanceMonitor.test.ts:172:33-172:48: `.connect(owner)`
$DIR/contracts/test/v0.8/VRFSubscriptionBalanceMonitor.test.ts:172:48-172:58: `.unpause()`
$DIR/contracts/test/v0.8/VRFSubscriptionBalanceMonitor.test.ts:173:7-173:29: `await unpauseTx.wait()`
$DIR/contracts/test/v0.8/VRFSubscriptionBalanceMonitor.test.ts:173:22-173:29: `.wait()`
$DIR/contracts/test/v0.8/VRFSubscriptionBalanceMonitor.test.ts:177:33-177:51: `.connect(stranger)`
$DIR/contracts/test/v0.8/VRFSubscriptionBalanceMonitor.test.ts:177:51-177:59: `.pause()`
$DIR/contracts/test/v0.8/VRFSubscriptionBalanceMonitor.test.ts:179:36-179:51: `.connect(owner)`
$DIR/contracts/test/v0.8/VRFSubscriptionBalanceMonitor.test.ts:179:51-179:59: `.pause()`
$DIR/contracts/test/v0.8/VRFSubscriptionBalanceMonitor.test.ts:180:7-180:32: `await pauseTxOwner.wait()`
$DIR/contracts/test/v0.8/VRFSubscriptionBalanceMonitor.test.ts:180:25-180:32: `.wait()`
$DIR/contracts/test/v0.8/VRFSubscriptionBalanceMonitor.test.ts:181:35-181:53: `.connect(stranger)`
$DIR/contracts/test/v0.8/VRFSubscriptionBalanceMonitor.test.ts:181:53-181:63: `.unpause()`
$DIR/contracts/test/v0.8/VRFSubscriptionBalanceMonitor.test.ts:189:31-189:57: `.getSubscriptionInfo(sub1)`
$DIR/contracts/test/v0.8/VRFSubscriptionBalanceMonitor.test.ts:191:27-192:24: `
        .connect(owner)`
$DIR/contracts/test/v0.8/VRFSubscriptionBalanceMonitor.test.ts:192:24-193:52: `
        .setWatchList([sub1], [oneLINK], [twoLINK])`
$DIR/contracts/test/v0.8/VRFSubscriptionBalanceMonitor.test.ts:194:7-194:25: `await setTx.wait()`
$DIR/contracts/test/v0.8/VRFSubscriptionBalanceMonitor.test.ts:194:18-194:25: `.wait()`
$DIR/contracts/test/v0.8/VRFSubscriptionBalanceMonitor.test.ts:195:31-195:46: `.getWatchList()`
$DIR/contracts/test/v0.8/VRFSubscriptionBalanceMonitor.test.ts:197:31-197:54: `.getSubscriptionInfo(1)`
$DIR/contracts/test/v0.8/VRFSubscriptionBalanceMonitor.test.ts:202:7-208:10: `setTx = await bm
        .connect(owner)
        .setWatchList(
          [1, 2, 3],
          [oneLINK, twoLINK, threeLINK],
          [twoLINK, threeLINK, fiveLINK],
        )`
$DIR/contracts/test/v0.8/VRFSubscriptionBalanceMonitor.test.ts:202:23-203:24: `
        .connect(owner)`
$DIR/contracts/test/v0.8/VRFSubscriptionBalanceMonitor.test.ts:203:24-208:10: `
        .setWatchList(
          [1, 2, 3],
          [oneLINK, twoLINK, threeLINK],
          [twoLINK, threeLINK, fiveLINK],
        )`
$DIR/contracts/test/v0.8/VRFSubscriptionBalanceMonitor.test.ts:209:7-209:25: `await setTx.wait()`
$DIR/contracts/test/v0.8/VRFSubscriptionBalanceMonitor.test.ts:209:18-209:25: `.wait()`
$DIR/contracts/test/v0.8/VRFSubscriptionBalanceMonitor.test.ts:210:7-210:42: `watchList = await bm.getWatchList()`
$DIR/contracts/test/v0.8/VRFSubscriptionBalanceMonitor.test.ts:210:27-210:42: `.getWatchList()`
$DIR/contracts/test/v0.8/VRFSubscriptionBalanceMonitor.test.ts:212:30-212:56: `.getSubscriptionInfo(sub1)`
$DIR/contracts/test/v0.8/VRFSubscriptionBalanceMonitor.test.ts:213:30-213:56: `.getSubscriptionInfo(sub2)`
$DIR/contracts/test/v0.8/VRFSubscriptionBalanceMonitor.test.ts:214:30-214:56: `.getSubscriptionInfo(sub3)`
$DIR/contracts/test/v0.8/VRFSubscriptionBalanceMonitor.test.ts:225:7-227:79: `setTx = await bm
        .connect(owner)
        .setWatchList([sub3, sub1], [threeLINK, oneLINK], [fiveLINK, twoLINK])`
$DIR/contracts/test/v0.8/VRFSubscriptionBalanceMonitor.test.ts:225:23-226:24: `
        .connect(owner)`
$DIR/contracts/test/v0.8/VRFSubscriptionBalanceMonitor.test.ts:226:24-227:79: `
        .setWatchList([sub3, sub1], [threeLINK, oneLINK], [fiveLINK, twoLINK])`
$DIR/contracts/test/v0.8/VRFSubscriptionBalanceMonitor.test.ts:228:7-228:25: `await setTx.wait()`
$DIR/contracts/test/v0.8/VRFSubscriptionBalanceMonitor.test.ts:228:18-228:25: `.wait()`
$DIR/contracts/test/v0.8/VRFSubscriptionBalanceMonitor.test.ts:229:7-229:42: `watchList = await bm.getWatchList()`
$DIR/contracts/test/v0.8/VRFSubscriptionBalanceMonitor.test.ts:229:27-229:42: `.getWatchList()`
$DIR/contracts/test/v0.8/VRFSubscriptionBalanceMonitor.test.ts:231:7-231:52: `subInfo1 = await bm.getSubscriptionInfo(sub1)`
$DIR/contracts/test/v0.8/VRFSubscriptionBalanceMonitor.test.ts:231:26-231:52: `.getSubscriptionInfo(sub1)`
$DIR/contracts/test/v0.8/VRFSubscriptionBalanceMonitor.test.ts:232:7-232:52: `subInfo2 = await bm.getSubscriptionInfo(sub2)`
$DIR/contracts/test/v0.8/VRFSubscriptionBalanceMonitor.test.ts:232:26-232:52: `.getSubscriptionInfo(sub2)`
$DIR/contracts/test/v0.8/VRFSubscriptionBalanceMonitor.test.ts:233:7-233:52: `subInfo3 = await bm.getSubscriptionInfo(sub3)`
$DIR/contracts/test/v0.8/VRFSubscriptionBalanceMonitor.test.ts:233:26-233:52: `.getSubscriptionInfo(sub3)`
$DIR/contracts/test/v0.8/VRFSubscriptionBalanceMonitor.test.ts:241:23-242:24: `
        .connect(owner)`
$DIR/contracts/test/v0.8/VRFSubscriptionBalanceMonitor.test.ts:242:24-247:10: `
        .setWatchList(
          [sub1, sub2, sub1],
          [oneLINK, twoLINK, threeLINK],
          [twoLINK, threeLINK, fiveLINK],
        )`
$DIR/contracts/test/v0.8/VRFSubscriptionBalanceMonitor.test.ts:252:23-253:24: `
        .connect(owner)`
$DIR/contracts/test/v0.8/VRFSubscriptionBalanceMonitor.test.ts:253:24-258:10: `
        .setWatchList(
          [sub1, sub2, sub1],
          [oneLINK, twoLINK, threeLINK],
          [zeroLINK, twoLINK, threeLINK],
        )`
$DIR/contracts/test/v0.8/VRFSubscriptionBalanceMonitor.test.ts:263:31-264:27: `
        .connect(stranger)`
$DIR/contracts/test/v0.8/VRFSubscriptionBalanceMonitor.test.ts:264:27-265:52: `
        .setWatchList([sub1], [oneLINK], [twoLINK])`
$DIR/contracts/test/v0.8/VRFSubscriptionBalanceMonitor.test.ts:270:18-270:33: `.connect(owner)`
$DIR/contracts/test/v0.8/VRFSubscriptionBalanceMonitor.test.ts:270:33-270:69: `.setWatchList([sub1], [], [twoLINK])`
$DIR/contracts/test/v0.8/VRFSubscriptionBalanceMonitor.test.ts:272:7-272:65: `tx = bm.connect(owner).setWatchList([sub1], [oneLINK], [])`
$DIR/contracts/test/v0.8/VRFSubscriptionBalanceMonitor.test.ts:272:14-272:29: `.connect(owner)`
$DIR/contracts/test/v0.8/VRFSubscriptionBalanceMonitor.test.ts:272:29-272:65: `.setWatchList([sub1], [oneLINK], [])`
$DIR/contracts/test/v0.8/VRFSubscriptionBalanceMonitor.test.ts:274:7-274:68: `tx = bm.connect(owner).setWatchList([], [oneLINK], [twoLINK])`
$DIR/contracts/test/v0.8/VRFSubscriptionBalanceMonitor.test.ts:274:14-274:29: `.connect(owner)`
$DIR/contracts/test/v0.8/VRFSubscriptionBalanceMonitor.test.ts:274:29-274:68: `.setWatchList([], [oneLINK], [twoLINK])`
$DIR/contracts/test/v0.8/VRFSubscriptionBalanceMonitor.test.ts:279:18-280:24: `
        .connect(owner)`
$DIR/contracts/test/v0.8/VRFSubscriptionBalanceMonitor.test.ts:280:24-281:73: `
        .setWatchList([sub1, 0], [oneLINK, oneLINK], [twoLINK, twoLINK])`
$DIR/contracts/test/v0.8/VRFSubscriptionBalanceMonitor.test.ts:286:20-287:24: `
        .connect(owner)`
$DIR/contracts/test/v0.8/VRFSubscriptionBalanceMonitor.test.ts:287:24-288:77: `
        .setWatchList([sub1, sub2], [oneLINK, oneLINK], [twoLINK, zeroLINK])`
$DIR/contracts/test/v0.8/VRFSubscriptionBalanceMonitor.test.ts:297:31-297:57: `.s_keeperRegistryAddress()`
$DIR/contracts/test/v0.8/VRFSubscriptionBalanceMonitor.test.ts:302:29-302:44: `.connect(owner)`
$DIR/contracts/test/v0.8/VRFSubscriptionBalanceMonitor.test.ts:302:44-302:81: `.setKeeperRegistryAddress(newAddress)`
$DIR/contracts/test/v0.8/VRFSubscriptionBalanceMonitor.test.ts:303:7-303:25: `await setTx.wait()`
$DIR/contracts/test/v0.8/VRFSubscriptionBalanceMonitor.test.ts:303:18-303:25: `.wait()`
$DIR/contracts/test/v0.8/VRFSubscriptionBalanceMonitor.test.ts:304:31-304:57: `.s_keeperRegistryAddress()`
$DIR/contracts/test/v0.8/VRFSubscriptionBalanceMonitor.test.ts:309:23-309:41: `.connect(stranger)`
$DIR/contracts/test/v0.8/VRFSubscriptionBalanceMonitor.test.ts:309:41-309:78: `.setKeeperRegistryAddress(newAddress)`
$DIR/contracts/test/v0.8/VRFSubscriptionBalanceMonitor.test.ts:314:29-314:44: `.connect(owner)`
$DIR/contracts/test/v0.8/VRFSubscriptionBalanceMonitor.test.ts:314:44-314:81: `.setKeeperRegistryAddress(newAddress)`
$DIR/contracts/test/v0.8/VRFSubscriptionBalanceMonitor.test.ts:325:37-325:62: `.s_minWaitPeriodSeconds()`
$DIR/contracts/test/v0.8/VRFSubscriptionBalanceMonitor.test.ts:330:29-331:24: `
        .connect(owner)`
$DIR/contracts/test/v0.8/VRFSubscriptionBalanceMonitor.test.ts:331:24-332:48: `
        .setMinWaitPeriodSeconds(newWaitPeriod)`
$DIR/contracts/test/v0.8/VRFSubscriptionBalanceMonitor.test.ts:333:7-333:25: `await setTx.wait()`
$DIR/contracts/test/v0.8/VRFSubscriptionBalanceMonitor.test.ts:333:18-333:25: `.wait()`
$DIR/contracts/test/v0.8/VRFSubscriptionBalanceMonitor.test.ts:334:37-334:62: `.s_minWaitPeriodSeconds()`
$DIR/contracts/test/v0.8/VRFSubscriptionBalanceMonitor.test.ts:339:23-339:41: `.connect(stranger)`
$DIR/contracts/test/v0.8/VRFSubscriptionBalanceMonitor.test.ts:339:41-339:80: `.setMinWaitPeriodSeconds(newWaitPeriod)`
$DIR/contracts/test/v0.8/VRFSubscriptionBalanceMonitor.test.ts:344:29-345:24: `
        .connect(owner)`
$DIR/contracts/test/v0.8/VRFSubscriptionBalanceMonitor.test.ts:345:24-346:48: `
        .setMinWaitPeriodSeconds(newWaitPeriod)`
$DIR/contracts/test/v0.8/VRFSubscriptionBalanceMonitor.test.ts:370:30-370:45: `.connect(owner)`
$DIR/contracts/test/v0.8/VRFSubscriptionBalanceMonitor.test.ts:370:45-373:8: `.transfer(
        bm.address,
        sixLINK, // needs 6 total
      )`
$DIR/contracts/test/v0.8/VRFSubscriptionBalanceMonitor.test.ts:374:7-374:26: `await fundTx.wait()`
$DIR/contracts/test/v0.8/VRFSubscriptionBalanceMonitor.test.ts:374:19-374:26: `.wait()`
$DIR/contracts/test/v0.8/VRFSubscriptionBalanceMonitor.test.ts:375:41-375:59: `.checkUpkeep('0x')`
$DIR/contracts/test/v0.8/VRFSubscriptionBalanceMonitor.test.ts:377:26-377:78: `.utils.defaultAbiCoder.decode(['uint64[]'], payload)`
$DIR/contracts/test/v0.8/VRFSubscriptionBalanceMonitor.test.ts:380:7-380:52: `subs = await bm.getUnderfundedSubscriptions()`
$DIR/contracts/test/v0.8/VRFSubscriptionBalanceMonitor.test.ts:380:22-380:52: `.getUnderfundedSubscriptions()`
$DIR/contracts/test/v0.8/VRFSubscriptionBalanceMonitor.test.ts:385:30-385:45: `.connect(owner)`
$DIR/contracts/test/v0.8/VRFSubscriptionBalanceMonitor.test.ts:385:45-388:8: `.transfer(
        bm.address,
        fiveLINK, // needs 6 total
      )`
$DIR/contracts/test/v0.8/VRFSubscriptionBalanceMonitor.test.ts:389:7-389:26: `await fundTx.wait()`
$DIR/contracts/test/v0.8/VRFSubscriptionBalanceMonitor.test.ts:389:19-389:26: `.wait()`
$DIR/contracts/test/v0.8/VRFSubscriptionBalanceMonitor.test.ts:390:41-390:59: `.checkUpkeep('0x')`
$DIR/contracts/test/v0.8/VRFSubscriptionBalanceMonitor.test.ts:392:28-392:80: `.utils.defaultAbiCoder.decode(['uint64[]'], payload)`
$DIR/contracts/test/v0.8/VRFSubscriptionBalanceMonitor.test.ts:397:35-397:65: `.setMinWaitPeriodSeconds(3600)`
$DIR/contracts/test/v0.8/VRFSubscriptionBalanceMonitor.test.ts:398:30-398:45: `.connect(owner)`
$DIR/contracts/test/v0.8/VRFSubscriptionBalanceMonitor.test.ts:398:45-398:75: `.transfer(bm.address, sixLINK)`
$DIR/contracts/test/v0.8/VRFSubscriptionBalanceMonitor.test.ts:399:7-399:61: `await Promise.all([setWaitPdTx.wait(), fundTx.wait()])`
$DIR/contracts/test/v0.8/VRFSubscriptionBalanceMonitor.test.ts:399:20-399:61: `.all([setWaitPdTx.wait(), fundTx.wait()])`
$DIR/contracts/test/v0.8/VRFSubscriptionBalanceMonitor.test.ts:399:37-399:44: `.wait()`
$DIR/contracts/test/v0.8/VRFSubscriptionBalanceMonitor.test.ts:399:52-399:59: `.wait()`
$DIR/contracts/test/v0.8/VRFSubscriptionBalanceMonitor.test.ts:400:33-400:61: `.provider.getBlock('latest')`
$DIR/contracts/test/v0.8/VRFSubscriptionBalanceMonitor.test.ts:401:34-404:8: `.setLastTopUpXXXTestOnly(
        sub2,
        block.timestamp - 100,
      )`
$DIR/contracts/test/v0.8/VRFSubscriptionBalanceMonitor.test.ts:405:7-405:30: `await setTopUpTx.wait()`
$DIR/contracts/test/v0.8/VRFSubscriptionBalanceMonitor.test.ts:405:23-405:30: `.wait()`
$DIR/contracts/test/v0.8/VRFSubscriptionBalanceMonitor.test.ts:406:41-406:59: `.checkUpkeep('0x')`
$DIR/contracts/test/v0.8/VRFSubscriptionBalanceMonitor.test.ts:408:28-408:80: `.utils.defaultAbiCoder.decode(['uint64[]'], payload)`
$DIR/contracts/test/v0.8/VRFSubscriptionBalanceMonitor.test.ts:413:26-413:41: `.connect(owner)`
$DIR/contracts/test/v0.8/VRFSubscriptionBalanceMonitor.test.ts:413:41-413:49: `.pause()`
$DIR/contracts/test/v0.8/VRFSubscriptionBalanceMonitor.test.ts:414:7-414:22: `await tx.wait()`
$DIR/contracts/test/v0.8/VRFSubscriptionBalanceMonitor.test.ts:414:15-414:22: `.wait()`
$DIR/contracts/test/v0.8/VRFSubscriptionBalanceMonitor.test.ts:415:25-415:43: `.checkUpkeep('0x')`
$DIR/contracts/test/v0.8/VRFSubscriptionBalanceMonitor.test.ts:449:31-449:46: `.connect(owner)`
$DIR/contracts/test/v0.8/VRFSubscriptionBalanceMonitor.test.ts:449:46-449:54: `.pause()`
$DIR/contracts/test/v0.8/VRFSubscriptionBalanceMonitor.test.ts:450:7-450:27: `await pauseTx.wait()`
$DIR/contracts/test/v0.8/VRFSubscriptionBalanceMonitor.test.ts:450:20-450:27: `.wait()`
$DIR/contracts/test/v0.8/VRFSubscriptionBalanceMonitor.test.ts:451:27-451:51: `.connect(keeperRegistry)`
$DIR/contracts/test/v0.8/VRFSubscriptionBalanceMonitor.test.ts:451:51-451:79: `.performUpkeep(validPayload)`
$DIR/contracts/test/v0.8/VRFSubscriptionBalanceMonitor.test.ts:457:32-457:47: `.connect(owner)`
$DIR/contracts/test/v0.8/VRFSubscriptionBalanceMonitor.test.ts:457:47-460:10: `.transfer(
          bm.address,
          fiveLINK, // only enough LINK to fund 2 subscriptions
        )`
$DIR/contracts/test/v0.8/VRFSubscriptionBalanceMonitor.test.ts:461:9-461:28: `await fundTx.wait()`
$DIR/contracts/test/v0.8/VRFSubscriptionBalanceMonitor.test.ts:461:21-461:28: `.wait()`
$DIR/contracts/test/v0.8/VRFSubscriptionBalanceMonitor.test.ts:462:16-462:65: `.log((await lt.balanceOf(bm.address)).toString())`
$DIR/contracts/test/v0.8/VRFSubscriptionBalanceMonitor.test.ts:462:30-462:52: `.balanceOf(bm.address)`
$DIR/contracts/test/v0.8/VRFSubscriptionBalanceMonitor.test.ts:463:9-470:10: `await assertWatchlistBalances(
          zeroLINK,
          zeroLINK,
          zeroLINK,
          zeroLINK,
          oneHundredLINK,
          oneHundredLINK,
        )`
$DIR/contracts/test/v0.8/VRFSubscriptionBalanceMonitor.test.ts:471:35-472:35: `
          .connect(keeperRegistry)`
$DIR/contracts/test/v0.8/VRFSubscriptionBalanceMonitor.test.ts:472:35-473:64: `
          .performUpkeep(validPayload, { gasLimit: 2_500_000 })`
$DIR/contracts/test/v0.8/VRFSubscriptionBalanceMonitor.test.ts:475:9-482:10: `await assertWatchlistBalances(
          twoLINK,
          twoLINK,
          zeroLINK,
          zeroLINK,
          oneHundredLINK,
          oneHundredLINK,
        )`
$DIR/contracts/test/v0.8/VRFSubscriptionBalanceMonitor.test.ts:495:9-502:10: `await assertWatchlistBalances(
          zeroLINK,
          zeroLINK,
          zeroLINK,
          zeroLINK,
          oneHundredLINK,
          oneHundredLINK,
        )`
$DIR/contracts/test/v0.8/VRFSubscriptionBalanceMonitor.test.ts:503:35-504:35: `
          .connect(keeperRegistry)`
$DIR/contracts/test/v0.8/VRFSubscriptionBalanceMonitor.test.ts:504:35-505:64: `
          .performUpkeep(validPayload, { gasLimit: 2_500_000 })`
$DIR/contracts/test/v0.8/VRFSubscriptionBalanceMonitor.test.ts:506:9-506:31: `await performTx.wait()`
$DIR/contracts/test/v0.8/VRFSubscriptionBalanceMonitor.test.ts:506:24-506:31: `.wait()`
$DIR/contracts/test/v0.8/VRFSubscriptionBalanceMonitor.test.ts:507:9-514:10: `await assertWatchlistBalances(
          twoLINK,
          twoLINK,
          twoLINK,
          zeroLINK,
          oneHundredLINK,
          oneHundredLINK,
        )`
$DIR/contracts/test/v0.8/VRFSubscriptionBalanceMonitor.test.ts:518:9-525:10: `await assertWatchlistBalances(
          zeroLINK,
          zeroLINK,
          zeroLINK,
          zeroLINK,
          oneHundredLINK,
          oneHundredLINK,
        )`
$DIR/contracts/test/v0.8/VRFSubscriptionBalanceMonitor.test.ts:526:35-527:35: `
          .connect(keeperRegistry)`
$DIR/contracts/test/v0.8/VRFSubscriptionBalanceMonitor.test.ts:527:35-528:66: `
          .performUpkeep(invalidPayload, { gasLimit: 2_500_000 })`
$DIR/contracts/test/v0.8/VRFSubscriptionBalanceMonitor.test.ts:529:9-529:31: `await performTx.wait()`
$DIR/contracts/test/v0.8/VRFSubscriptionBalanceMonitor.test.ts:529:24-529:31: `.wait()`
$DIR/contracts/test/v0.8/VRFSubscriptionBalanceMonitor.test.ts:530:9-537:10: `await assertWatchlistBalances(
          twoLINK,
          twoLINK,
          zeroLINK,
          zeroLINK,
          oneHundredLINK,
          oneHundredLINK,
        )`
$DIR/contracts/test/v0.8/VRFSubscriptionBalanceMonitor.test.ts:541:37-541:67: `.setMinWaitPeriodSeconds(3600)`
$DIR/contracts/test/v0.8/VRFSubscriptionBalanceMonitor.test.ts:542:9-542:33: `await setWaitPdTx.wait()`
$DIR/contracts/test/v0.8/VRFSubscriptionBalanceMonitor.test.ts:542:26-542:33: `.wait()`
$DIR/contracts/test/v0.8/VRFSubscriptionBalanceMonitor.test.ts:543:35-543:63: `.provider.getBlock('latest')`
$DIR/contracts/test/v0.8/VRFSubscriptionBalanceMonitor.test.ts:544:36-547:10: `.setLastTopUpXXXTestOnly(
          sub2,
          block.timestamp - 100,
        )`
$DIR/contracts/test/v0.8/VRFSubscriptionBalanceMonitor.test.ts:548:9-548:32: `await setTopUpTx.wait()`
$DIR/contracts/test/v0.8/VRFSubscriptionBalanceMonitor.test.ts:548:25-548:32: `.wait()`
$DIR/contracts/test/v0.8/VRFSubscriptionBalanceMonitor.test.ts:549:9-556:10: `await assertWatchlistBalances(
          zeroLINK,
          zeroLINK,
          zeroLINK,
          zeroLINK,
          oneHundredLINK,
          oneHundredLINK,
        )`
$DIR/contracts/test/v0.8/VRFSubscriptionBalanceMonitor.test.ts:557:35-558:35: `
          .connect(keeperRegistry)`
$DIR/contracts/test/v0.8/VRFSubscriptionBalanceMonitor.test.ts:558:35-559:64: `
          .performUpkeep(validPayload, { gasLimit: 2_500_000 })`
$DIR/contracts/test/v0.8/VRFSubscriptionBalanceMonitor.test.ts:560:9-560:31: `await performTx.wait()`
$DIR/contracts/test/v0.8/VRFSubscriptionBalanceMonitor.test.ts:560:24-560:31: `.wait()`
$DIR/contracts/test/v0.8/VRFSubscriptionBalanceMonitor.test.ts:561:9-568:10: `await assertWatchlistBalances(
          twoLINK,
          zeroLINK,
          twoLINK,
          zeroLINK,
          oneHundredLINK,
          oneHundredLINK,
        )`
$DIR/contracts/test/v0.8/VRFSubscriptionBalanceMonitor.test.ts:572:27-572:42: `.connect(owner)`
$DIR/contracts/test/v0.8/VRFSubscriptionBalanceMonitor.test.ts:572:42-572:70: `.performUpkeep(validPayload)`
$DIR/contracts/test/v0.8/VRFSubscriptionBalanceMonitor.test.ts:574:9-574:69: `performTx = bm.connect(stranger).performUpkeep(validPayload)`
$DIR/contracts/test/v0.8/VRFSubscriptionBalanceMonitor.test.ts:574:23-574:41: `.connect(stranger)`
$DIR/contracts/test/v0.8/VRFSubscriptionBalanceMonitor.test.ts:574:41-574:69: `.performUpkeep(validPayload)`
$DIR/contracts/test/v0.8/VRFSubscriptionBalanceMonitor.test.ts:579:9-586:10: `await assertWatchlistBalances(
          zeroLINK,
          zeroLINK,
          zeroLINK,
          zeroLINK,
          oneHundredLINK,
          oneHundredLINK,
        )`
$DIR/contracts/test/v0.8/VRFSubscriptionBalanceMonitor.test.ts:587:35-588:35: `
          .connect(keeperRegistry)`
$DIR/contracts/test/v0.8/VRFSubscriptionBalanceMonitor.test.ts:588:35-589:62: `
          .performUpkeep(validPayload, { gasLimit: 130_000 })`
$DIR/contracts/test/v0.8/VRFSubscriptionBalanceMonitor.test.ts:590:9-590:31: `await performTx.wait()`
$DIR/contracts/test/v0.8/VRFSubscriptionBalanceMonitor.test.ts:590:24-590:31: `.wait()`
$DIR/contracts/test/v0.8/VRFSubscriptionBalanceMonitor.test.ts:591:44-591:66: `.getSubscription(sub1)`
$DIR/contracts/test/v0.8/VRFSubscriptionBalanceMonitor.test.ts:592:44-592:66: `.getSubscription(sub2)`
$DIR/contracts/test/v0.8/VRFSubscriptionBalanceMonitor.test.ts:593:44-593:66: `.getSubscription(sub3)`
$DIR/contracts/test/v0.8/VRFSubscriptionBalanceMonitor.test.ts:594:56-594:81: `.map((n) => n.toString())`
$DIR/contracts/test/v0.8/VRFSubscriptionBalanceMonitor.test.ts:608:11-608:43: `await bm.connect(user).topUp([])`
$DIR/contracts/test/v0.8/VRFSubscriptionBalanceMonitor.test.ts:608:19-608:33: `.connect(user)`
$DIR/contracts/test/v0.8/VRFSubscriptionBalanceMonitor.test.ts:608:33-608:43: `.topUp([])`
$DIR/contracts/test/v0.8/VRFSubscriptionBalanceMonitor.test.ts:614:9-614:40: `await bm.connect(owner).pause()`
$DIR/contracts/test/v0.8/VRFSubscriptionBalanceMonitor.test.ts:614:17-614:32: `.connect(owner)`
$DIR/contracts/test/v0.8/VRFSubscriptionBalanceMonitor.test.ts:614:32-614:40: `.pause()`
$DIR/contracts/test/v0.8/VRFSubscriptionBalanceMonitor.test.ts:618:24-618:38: `.connect(user)`
$DIR/contracts/test/v0.8/VRFSubscriptionBalanceMonitor.test.ts:618:38-618:48: `.topUp([])`
$DIR/contracts/test/v0.8/ValidatorProxy.test.ts:38:5-52:7: `publicAbi(validatorProxy, [
      // ConfirmedOwner functions
      'acceptOwnership',
      'owner',
      'transferOwnership',
      // ValidatorProxy functions
      'validate',
      'proposeNewAggregator',
      'upgradeAggregator',
      'getAggregators',
      'proposeNewValidator',
      'upgradeValidator',
      'getValidators',
      'typeAndVersion',
    ])`
$DIR/contracts/test/v0.8/ValidatorProxy.test.ts:57:44-57:61: `.getAggregators()`
$DIR/contracts/test/v0.8/ValidatorProxy.test.ts:64:44-64:60: `.getValidators()`
$DIR/contracts/test/v0.8/ValidatorProxy.test.ts:71:44-71:52: `.owner()`
$DIR/contracts/test/v0.8/ValidatorProxy.test.ts:88:25-89:31: `
            .connect(stranger)`
$DIR/contracts/test/v0.8/ValidatorProxy.test.ts:89:31-90:56: `
            .proposeNewAggregator(newAggregatorAddress)`
$DIR/contracts/test/v0.8/ValidatorProxy.test.ts:95:9-95:72: `await validatorProxy.proposeNewAggregator(newAggregatorAddress)`
$DIR/contracts/test/v0.8/ValidatorProxy.test.ts:95:29-95:72: `.proposeNewAggregator(newAggregatorAddress)`
$DIR/contracts/test/v0.8/ValidatorProxy.test.ts:97:25-97:68: `.proposeNewAggregator(newAggregatorAddress)`
$DIR/contracts/test/v0.8/ValidatorProxy.test.ts:103:25-103:65: `.proposeNewAggregator(aggregatorAddress)`
$DIR/contracts/test/v0.8/ValidatorProxy.test.ts:110:36-110:79: `.proposeNewAggregator(newAggregatorAddress)`
$DIR/contracts/test/v0.8/ValidatorProxy.test.ts:116:9-116:72: `await validatorProxy.proposeNewAggregator(newAggregatorAddress)`
$DIR/contracts/test/v0.8/ValidatorProxy.test.ts:116:29-116:72: `.proposeNewAggregator(newAggregatorAddress)`
$DIR/contracts/test/v0.8/ValidatorProxy.test.ts:117:46-117:63: `.getAggregators()`
$DIR/contracts/test/v0.8/ValidatorProxy.test.ts:124:9-124:72: `await validatorProxy.proposeNewAggregator(newAggregatorAddress)`
$DIR/contracts/test/v0.8/ValidatorProxy.test.ts:124:29-124:72: `.proposeNewAggregator(newAggregatorAddress)`
$DIR/contracts/test/v0.8/ValidatorProxy.test.ts:125:9-125:73: `await validatorProxy.proposeNewAggregator(constants.AddressZero)`
$DIR/contracts/test/v0.8/ValidatorProxy.test.ts:125:29-125:73: `.proposeNewAggregator(constants.AddressZero)`
$DIR/contracts/test/v0.8/ValidatorProxy.test.ts:126:46-126:63: `.getAggregators()`
$DIR/contracts/test/v0.8/ValidatorProxy.test.ts:139:25-139:43: `.connect(stranger)`
$DIR/contracts/test/v0.8/ValidatorProxy.test.ts:139:43-139:63: `.upgradeAggregator()`
$DIR/contracts/test/v0.8/ValidatorProxy.test.ts:144:36-144:56: `.upgradeAggregator()`
$DIR/contracts/test/v0.8/ValidatorProxy.test.ts:160:36-160:56: `.upgradeAggregator()`
$DIR/contracts/test/v0.8/ValidatorProxy.test.ts:166:9-166:49: `await validatorProxy.upgradeAggregator()`
$DIR/contracts/test/v0.8/ValidatorProxy.test.ts:166:29-166:49: `.upgradeAggregator()`
$DIR/contracts/test/v0.8/ValidatorProxy.test.ts:167:46-167:63: `.getAggregators()`
$DIR/contracts/test/v0.8/ValidatorProxy.test.ts:188:25-189:31: `
            .connect(stranger)`
$DIR/contracts/test/v0.8/ValidatorProxy.test.ts:189:31-190:55: `
            .proposeNewAggregator(newValidatorAddress)`
$DIR/contracts/test/v0.8/ValidatorProxy.test.ts:195:9-195:70: `await validatorProxy.proposeNewValidator(newValidatorAddress)`
$DIR/contracts/test/v0.8/ValidatorProxy.test.ts:195:29-195:70: `.proposeNewValidator(newValidatorAddress)`
$DIR/contracts/test/v0.8/ValidatorProxy.test.ts:197:25-197:66: `.proposeNewValidator(newValidatorAddress)`
$DIR/contracts/test/v0.8/ValidatorProxy.test.ts:203:25-203:63: `.proposeNewValidator(validatorAddress)`
$DIR/contracts/test/v0.8/ValidatorProxy.test.ts:210:36-210:77: `.proposeNewValidator(newValidatorAddress)`
$DIR/contracts/test/v0.8/ValidatorProxy.test.ts:216:9-216:70: `await validatorProxy.proposeNewValidator(newValidatorAddress)`
$DIR/contracts/test/v0.8/ValidatorProxy.test.ts:216:29-216:70: `.proposeNewValidator(newValidatorAddress)`
$DIR/contracts/test/v0.8/ValidatorProxy.test.ts:217:46-217:62: `.getValidators()`
$DIR/contracts/test/v0.8/ValidatorProxy.test.ts:224:9-224:70: `await validatorProxy.proposeNewValidator(newValidatorAddress)`
$DIR/contracts/test/v0.8/ValidatorProxy.test.ts:224:29-224:70: `.proposeNewValidator(newValidatorAddress)`
$DIR/contracts/test/v0.8/ValidatorProxy.test.ts:225:9-225:72: `await validatorProxy.proposeNewValidator(constants.AddressZero)`
$DIR/contracts/test/v0.8/ValidatorProxy.test.ts:225:29-225:72: `.proposeNewValidator(constants.AddressZero)`
$DIR/contracts/test/v0.8/ValidatorProxy.test.ts:226:46-226:62: `.getValidators()`
$DIR/contracts/test/v0.8/ValidatorProxy.test.ts:239:25-239:43: `.connect(stranger)`
$DIR/contracts/test/v0.8/ValidatorProxy.test.ts:239:43-239:62: `.upgradeValidator()`
$DIR/contracts/test/v0.8/ValidatorProxy.test.ts:244:36-244:55: `.upgradeValidator()`
$DIR/contracts/test/v0.8/ValidatorProxy.test.ts:260:36-260:55: `.upgradeValidator()`
$DIR/contracts/test/v0.8/ValidatorProxy.test.ts:266:9-266:48: `await validatorProxy.upgradeValidator()`
$DIR/contracts/test/v0.8/ValidatorProxy.test.ts:266:29-266:48: `.upgradeValidator()`
$DIR/contracts/test/v0.8/ValidatorProxy.test.ts:267:46-267:62: `.getValidators()`
$DIR/contracts/test/v0.8/ValidatorProxy.test.ts:280:25-280:43: `.connect(stranger)`
$DIR/contracts/test/v0.8/ValidatorProxy.test.ts:280:43-280:68: `.validate(99, 88, 77, 66)`
$DIR/contracts/test/v0.8/ValidatorProxy.test.ts:285:33-288:10: `.getContractFactory(
          'src/v0.8/ValidatorProxy.sol:ValidatorProxy',
          owner,
        )`
$DIR/contracts/test/v0.8/ValidatorProxy.test.ts:289:9-292:10: `validatorProxy = await vpf.deploy(
          aggregatorAddress,
          constants.AddressZero,
        )`
$DIR/contracts/test/v0.8/ValidatorProxy.test.ts:289:35-292:10: `.deploy(
          aggregatorAddress,
          constants.AddressZero,
        )`
$DIR/contracts/test/v0.8/ValidatorProxy.test.ts:293:9-293:40: `await validatorProxy.deployed()`
$DIR/contracts/test/v0.8/ValidatorProxy.test.ts:293:29-293:40: `.deployed()`
$DIR/contracts/test/v0.8/ValidatorProxy.test.ts:295:25-295:45: `.connect(aggregator)`
$DIR/contracts/test/v0.8/ValidatorProxy.test.ts:295:45-295:70: `.validate(99, 88, 77, 66)`
$DIR/contracts/test/v0.8/ValidatorProxy.test.ts:324:29-324:49: `.connect(aggregator)`
$DIR/contracts/test/v0.8/ValidatorProxy.test.ts:324:49-324:78: `.validate(200, 300, 400, 500)`
$DIR/contracts/test/v0.8/ValidatorProxy.test.ts:331:46-332:35: `
              .connect(aggregator)`
$DIR/contracts/test/v0.8/ValidatorProxy.test.ts:332:35-333:44: `
              .validate(200, 300, 400, 500)`
$DIR/contracts/test/v0.8/ValidatorProxy.test.ts:334:39-334:46: `.wait()`
$DIR/contracts/test/v0.8/ValidatorProxy.test.ts:335:33-335:52: `.gasUsed.toString()`
$DIR/contracts/test/v0.8/ValidatorProxy.test.ts:354:29-355:37: `
                .connect(aggregator)`
$DIR/contracts/test/v0.8/ValidatorProxy.test.ts:355:37-356:50: `
                .validate(2000, 3000, 4000, 5000)`
$DIR/contracts/test/v0.8/ValidatorProxy.test.ts:364:29-365:37: `
                .connect(aggregator)`
$DIR/contracts/test/v0.8/ValidatorProxy.test.ts:365:37-366:50: `
                .validate(2000, 3000, 4000, 5000)`
$DIR/contracts/test/v0.8/ValidatorProxy.test.ts:373:46-374:35: `
              .connect(aggregator)`
$DIR/contracts/test/v0.8/ValidatorProxy.test.ts:374:35-375:48: `
              .validate(2000, 3000, 4000, 5000)`
$DIR/contracts/test/v0.8/ValidatorProxy.test.ts:376:39-376:46: `.wait()`
$DIR/contracts/test/v0.8/ValidatorProxy.test.ts:377:33-377:52: `.gasUsed.toString()`
$DIR/contracts/test/v0.8/ValidatorProxy.test.ts:395:27-395:50: `.connect(newAggregator)`
$DIR/contracts/test/v0.8/ValidatorProxy.test.ts:395:50-395:79: `.validate(555, 666, 777, 888)`
$DIR/contracts/test/v0.8/automation/CanaryUpkeep1_2.test.ts:92:7-92:57: `await canaryUpkeep.connect(owner).setInterval(400)`
$DIR/contracts/test/v0.8/automation/CanaryUpkeep1_2.test.ts:92:25-92:40: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/CanaryUpkeep1_2.test.ts:92:40-92:57: `.setInterval(400)`
$DIR/contracts/test/v0.8/automation/CanaryUpkeep1_2.test.ts:93:45-93:59: `.getInterval()`
$DIR/contracts/test/v0.8/automation/CanaryUpkeep1_2.test.ts:102:7-105:8: `await evmRevert(
        canaryUpkeep.connect(ned).setInterval(400),
        'Only callable by owner',
      )`
$DIR/contracts/test/v0.8/automation/CanaryUpkeep1_2.test.ts:103:21-103:34: `.connect(ned)`
$DIR/contracts/test/v0.8/automation/CanaryUpkeep1_2.test.ts:103:34-103:51: `.setInterval(400)`
$DIR/contracts/test/v0.8/automation/CanaryUpkeep1_2.test.ts:111:7-111:67: `await fastForward(moment.duration(6, 'minutes').asSeconds())`
$DIR/contracts/test/v0.8/automation/CanaryUpkeep1_2.test.ts:111:31-111:54: `.duration(6, 'minutes')`
$DIR/contracts/test/v0.8/automation/CanaryUpkeep1_2.test.ts:111:54-111:66: `.asSeconds()`
$DIR/contracts/test/v0.8/automation/CanaryUpkeep1_2.test.ts:112:7-112:72: `await keeperRegistry.setKeepers(keeperAddresses, keeperAddresses)`
$DIR/contracts/test/v0.8/automation/CanaryUpkeep1_2.test.ts:112:27-112:72: `.setKeepers(keeperAddresses, keeperAddresses)`
$DIR/contracts/test/v0.8/automation/CanaryUpkeep1_2.test.ts:113:47-113:65: `.checkUpkeep('0x')`
$DIR/contracts/test/v0.8/automation/CanaryUpkeep1_2.test.ts:118:7-118:67: `await fastForward(moment.duration(2, 'minutes').asSeconds())`
$DIR/contracts/test/v0.8/automation/CanaryUpkeep1_2.test.ts:118:31-118:54: `.duration(2, 'minutes')`
$DIR/contracts/test/v0.8/automation/CanaryUpkeep1_2.test.ts:118:54-118:66: `.asSeconds()`
$DIR/contracts/test/v0.8/automation/CanaryUpkeep1_2.test.ts:119:7-119:72: `await keeperRegistry.setKeepers(keeperAddresses, keeperAddresses)`
$DIR/contracts/test/v0.8/automation/CanaryUpkeep1_2.test.ts:119:27-119:72: `.setKeepers(keeperAddresses, keeperAddresses)`
$DIR/contracts/test/v0.8/automation/CanaryUpkeep1_2.test.ts:120:47-120:65: `.checkUpkeep('0x')`
$DIR/contracts/test/v0.8/automation/CanaryUpkeep1_2.test.ts:125:7-125:67: `await fastForward(moment.duration(6, 'minutes').asSeconds())`
$DIR/contracts/test/v0.8/automation/CanaryUpkeep1_2.test.ts:125:31-125:54: `.duration(6, 'minutes')`
$DIR/contracts/test/v0.8/automation/CanaryUpkeep1_2.test.ts:125:54-125:66: `.asSeconds()`
$DIR/contracts/test/v0.8/automation/CanaryUpkeep1_2.test.ts:126:47-126:65: `.checkUpkeep('0x')`
$DIR/contracts/test/v0.8/automation/CanaryUpkeep1_2.test.ts:133:7-133:72: `await keeperRegistry.setKeepers(keeperAddresses, keeperAddresses)`
$DIR/contracts/test/v0.8/automation/CanaryUpkeep1_2.test.ts:133:27-133:72: `.setKeepers(keeperAddresses, keeperAddresses)`
$DIR/contracts/test/v0.8/automation/CanaryUpkeep1_2.test.ts:135:46-135:61: `.connect(nelly)`
$DIR/contracts/test/v0.8/automation/CanaryUpkeep1_2.test.ts:135:61-135:76: `.getTimestamp()`
$DIR/contracts/test/v0.8/automation/CanaryUpkeep1_2.test.ts:136:48-136:63: `.connect(nelly)`
$DIR/contracts/test/v0.8/automation/CanaryUpkeep1_2.test.ts:136:63-136:80: `.getKeeperIndex()`
$DIR/contracts/test/v0.8/automation/CanaryUpkeep1_2.test.ts:137:7-137:67: `await fastForward(moment.duration(6, 'minutes').asSeconds())`
$DIR/contracts/test/v0.8/automation/CanaryUpkeep1_2.test.ts:137:31-137:54: `.duration(6, 'minutes')`
$DIR/contracts/test/v0.8/automation/CanaryUpkeep1_2.test.ts:137:54-137:66: `.asSeconds()`
$DIR/contracts/test/v0.8/automation/CanaryUpkeep1_2.test.ts:138:7-138:60: `await canaryUpkeep.connect(nelly).performUpkeep('0x')`
$DIR/contracts/test/v0.8/automation/CanaryUpkeep1_2.test.ts:138:25-138:40: `.connect(nelly)`
$DIR/contracts/test/v0.8/automation/CanaryUpkeep1_2.test.ts:138:40-138:60: `.performUpkeep('0x')`
$DIR/contracts/test/v0.8/automation/CanaryUpkeep1_2.test.ts:139:48-139:63: `.connect(nelly)`
$DIR/contracts/test/v0.8/automation/CanaryUpkeep1_2.test.ts:139:63-139:80: `.getKeeperIndex()`
$DIR/contracts/test/v0.8/automation/CanaryUpkeep1_2.test.ts:146:46-146:61: `.connect(nelly)`
$DIR/contracts/test/v0.8/automation/CanaryUpkeep1_2.test.ts:146:61-146:76: `.getTimestamp()`
$DIR/contracts/test/v0.8/automation/CanaryUpkeep1_2.test.ts:147:42-147:57: `.connect(nelly)`
$DIR/contracts/test/v0.8/automation/CanaryUpkeep1_2.test.ts:147:57-147:71: `.getInterval()`
$DIR/contracts/test/v0.8/automation/CanaryUpkeep1_2.test.ts:156:7-156:72: `await keeperRegistry.setKeepers(keeperAddresses, keeperAddresses)`
$DIR/contracts/test/v0.8/automation/CanaryUpkeep1_2.test.ts:156:27-156:72: `.setKeepers(keeperAddresses, keeperAddresses)`
$DIR/contracts/test/v0.8/automation/CanaryUpkeep1_2.test.ts:158:7-158:67: `await fastForward(moment.duration(6, 'minutes').asSeconds())`
$DIR/contracts/test/v0.8/automation/CanaryUpkeep1_2.test.ts:158:31-158:54: `.duration(6, 'minutes')`
$DIR/contracts/test/v0.8/automation/CanaryUpkeep1_2.test.ts:158:54-158:66: `.asSeconds()`
$DIR/contracts/test/v0.8/automation/CanaryUpkeep1_2.test.ts:159:7-159:60: `await canaryUpkeep.connect(nelly).performUpkeep('0x')`
$DIR/contracts/test/v0.8/automation/CanaryUpkeep1_2.test.ts:159:25-159:40: `.connect(nelly)`
$DIR/contracts/test/v0.8/automation/CanaryUpkeep1_2.test.ts:159:40-159:60: `.performUpkeep('0x')`
$DIR/contracts/test/v0.8/automation/CanaryUpkeep1_2.test.ts:161:7-161:67: `await fastForward(moment.duration(6, 'minutes').asSeconds())`
$DIR/contracts/test/v0.8/automation/CanaryUpkeep1_2.test.ts:161:31-161:54: `.duration(6, 'minutes')`
$DIR/contracts/test/v0.8/automation/CanaryUpkeep1_2.test.ts:161:54-161:66: `.asSeconds()`
$DIR/contracts/test/v0.8/automation/CanaryUpkeep1_2.test.ts:162:7-162:60: `await canaryUpkeep.connect(nancy).performUpkeep('0x')`
$DIR/contracts/test/v0.8/automation/CanaryUpkeep1_2.test.ts:162:25-162:40: `.connect(nancy)`
$DIR/contracts/test/v0.8/automation/CanaryUpkeep1_2.test.ts:162:40-162:60: `.performUpkeep('0x')`
$DIR/contracts/test/v0.8/automation/CanaryUpkeep1_2.test.ts:164:7-164:67: `await fastForward(moment.duration(6, 'minutes').asSeconds())`
$DIR/contracts/test/v0.8/automation/CanaryUpkeep1_2.test.ts:164:31-164:54: `.duration(6, 'minutes')`
$DIR/contracts/test/v0.8/automation/CanaryUpkeep1_2.test.ts:164:54-164:66: `.asSeconds()`
$DIR/contracts/test/v0.8/automation/CanaryUpkeep1_2.test.ts:165:7-165:58: `await canaryUpkeep.connect(ned).performUpkeep('0x')`
$DIR/contracts/test/v0.8/automation/CanaryUpkeep1_2.test.ts:165:25-165:38: `.connect(ned)`
$DIR/contracts/test/v0.8/automation/CanaryUpkeep1_2.test.ts:165:38-165:58: `.performUpkeep('0x')`
$DIR/contracts/test/v0.8/automation/CanaryUpkeep1_2.test.ts:167:45-167:58: `.connect(ned)`
$DIR/contracts/test/v0.8/automation/CanaryUpkeep1_2.test.ts:167:58-167:75: `.getKeeperIndex()`
$DIR/contracts/test/v0.8/automation/CanaryUpkeep1_2.test.ts:176:7-176:72: `await keeperRegistry.setKeepers(keeperAddresses, keeperAddresses)`
$DIR/contracts/test/v0.8/automation/CanaryUpkeep1_2.test.ts:176:27-176:72: `.setKeepers(keeperAddresses, keeperAddresses)`
$DIR/contracts/test/v0.8/automation/CanaryUpkeep1_2.test.ts:178:7-178:67: `await fastForward(moment.duration(6, 'minutes').asSeconds())`
$DIR/contracts/test/v0.8/automation/CanaryUpkeep1_2.test.ts:178:31-178:54: `.duration(6, 'minutes')`
$DIR/contracts/test/v0.8/automation/CanaryUpkeep1_2.test.ts:178:54-178:66: `.asSeconds()`
$DIR/contracts/test/v0.8/automation/CanaryUpkeep1_2.test.ts:179:7-179:60: `await canaryUpkeep.connect(nelly).performUpkeep('0x')`
$DIR/contracts/test/v0.8/automation/CanaryUpkeep1_2.test.ts:179:25-179:40: `.connect(nelly)`
$DIR/contracts/test/v0.8/automation/CanaryUpkeep1_2.test.ts:179:40-179:60: `.performUpkeep('0x')`
$DIR/contracts/test/v0.8/automation/CanaryUpkeep1_2.test.ts:181:7-181:67: `await fastForward(moment.duration(6, 'minutes').asSeconds())`
$DIR/contracts/test/v0.8/automation/CanaryUpkeep1_2.test.ts:181:31-181:54: `.duration(6, 'minutes')`
$DIR/contracts/test/v0.8/automation/CanaryUpkeep1_2.test.ts:181:54-181:66: `.asSeconds()`
$DIR/contracts/test/v0.8/automation/CanaryUpkeep1_2.test.ts:182:7-182:60: `await canaryUpkeep.connect(nancy).performUpkeep('0x')`
$DIR/contracts/test/v0.8/automation/CanaryUpkeep1_2.test.ts:182:25-182:40: `.connect(nancy)`
$DIR/contracts/test/v0.8/automation/CanaryUpkeep1_2.test.ts:182:40-182:60: `.performUpkeep('0x')`
$DIR/contracts/test/v0.8/automation/CanaryUpkeep1_2.test.ts:185:20-185:33: `.getAddress()`
$DIR/contracts/test/v0.8/automation/CanaryUpkeep1_2.test.ts:186:20-186:33: `.getAddress()`
$DIR/contracts/test/v0.8/automation/CanaryUpkeep1_2.test.ts:188:7-188:70: `await keeperRegistry.setKeepers(shortAddresses, shortAddresses)`
$DIR/contracts/test/v0.8/automation/CanaryUpkeep1_2.test.ts:188:27-188:70: `.setKeepers(shortAddresses, shortAddresses)`
$DIR/contracts/test/v0.8/automation/CanaryUpkeep1_2.test.ts:190:7-190:67: `await fastForward(moment.duration(6, 'minutes').asSeconds())`
$DIR/contracts/test/v0.8/automation/CanaryUpkeep1_2.test.ts:190:31-190:54: `.duration(6, 'minutes')`
$DIR/contracts/test/v0.8/automation/CanaryUpkeep1_2.test.ts:190:54-190:66: `.asSeconds()`
$DIR/contracts/test/v0.8/automation/CanaryUpkeep1_2.test.ts:191:7-191:60: `await canaryUpkeep.connect(nelly).performUpkeep('0x')`
$DIR/contracts/test/v0.8/automation/CanaryUpkeep1_2.test.ts:191:25-191:40: `.connect(nelly)`
$DIR/contracts/test/v0.8/automation/CanaryUpkeep1_2.test.ts:191:40-191:60: `.performUpkeep('0x')`
$DIR/contracts/test/v0.8/automation/CanaryUpkeep1_2.test.ts:192:45-192:62: `.getKeeperIndex()`
$DIR/contracts/test/v0.8/automation/CanaryUpkeep1_2.test.ts:201:7-204:8: `await evmRevert(
        canaryUpkeep.connect(nelly).performUpkeep('0x'),
        `NoKeeperNodes`,
      )`
$DIR/contracts/test/v0.8/automation/CanaryUpkeep1_2.test.ts:202:21-202:36: `.connect(nelly)`
$DIR/contracts/test/v0.8/automation/CanaryUpkeep1_2.test.ts:202:36-202:56: `.performUpkeep('0x')`
$DIR/contracts/test/v0.8/automation/CanaryUpkeep1_2.test.ts:208:7-208:72: `await keeperRegistry.setKeepers(keeperAddresses, keeperAddresses)`
$DIR/contracts/test/v0.8/automation/CanaryUpkeep1_2.test.ts:208:27-208:72: `.setKeepers(keeperAddresses, keeperAddresses)`
$DIR/contracts/test/v0.8/automation/CanaryUpkeep1_2.test.ts:209:7-209:67: `await fastForward(moment.duration(3, 'minutes').asSeconds())`
$DIR/contracts/test/v0.8/automation/CanaryUpkeep1_2.test.ts:209:31-209:54: `.duration(3, 'minutes')`
$DIR/contracts/test/v0.8/automation/CanaryUpkeep1_2.test.ts:209:54-209:66: `.asSeconds()`
$DIR/contracts/test/v0.8/automation/CanaryUpkeep1_2.test.ts:210:7-213:8: `await evmRevert(
        canaryUpkeep.connect(nelly).performUpkeep('0x'),
        `InsufficientInterval`,
      )`
$DIR/contracts/test/v0.8/automation/CanaryUpkeep1_2.test.ts:211:21-211:36: `.connect(nelly)`
$DIR/contracts/test/v0.8/automation/CanaryUpkeep1_2.test.ts:211:36-211:56: `.performUpkeep('0x')`
$DIR/contracts/test/v0.8/automation/CanaryUpkeep1_2.test.ts:217:7-217:72: `await keeperRegistry.setKeepers(keeperAddresses, keeperAddresses)`
$DIR/contracts/test/v0.8/automation/CanaryUpkeep1_2.test.ts:217:27-217:72: `.setKeepers(keeperAddresses, keeperAddresses)`
$DIR/contracts/test/v0.8/automation/CanaryUpkeep1_2.test.ts:218:7-218:67: `await fastForward(moment.duration(6, 'minutes').asSeconds())`
$DIR/contracts/test/v0.8/automation/CanaryUpkeep1_2.test.ts:218:31-218:54: `.duration(6, 'minutes')`
$DIR/contracts/test/v0.8/automation/CanaryUpkeep1_2.test.ts:218:54-218:66: `.asSeconds()`
$DIR/contracts/test/v0.8/automation/CanaryUpkeep1_2.test.ts:219:7-222:8: `await evmRevert(
        canaryUpkeep.connect(nancy).performUpkeep('0x'),
        'transaction origin is not the anticipated keeper.',
      )`
$DIR/contracts/test/v0.8/automation/CanaryUpkeep1_2.test.ts:220:21-220:36: `.connect(nancy)`
$DIR/contracts/test/v0.8/automation/CanaryUpkeep1_2.test.ts:220:36-220:56: `.performUpkeep('0x')`
$DIR/contracts/test/v0.8/automation/CronUpkeep.test.ts:122:6-142:7: `.publicAbi(cron as unknown as Contract, [
      's_maxJobs',
      'performUpkeep',
      'createCronJobFromEncodedSpec',
      'updateCronJob',
      'deleteCronJob',
      'checkUpkeep',
      'getActiveCronJobIDs',
      'getCronJob',
      // Ownable methods:
      'acceptOwnership',
      'owner',
      'transferOwnership',
      // Pausable methods
      'paused',
      'pause',
      'unpause',
      // Cron helper methods
      'createCronJobFromString',
      'txCheckUpkeep',
    ])`
$DIR/contracts/test/v0.8/automation/CronUpkeep.test.ts:147:24-147:32: `.owner()`
$DIR/contracts/test/v0.8/automation/CronUpkeep.test.ts:148:24-148:36: `.s_maxJobs()`
$DIR/contracts/test/v0.8/automation/CronUpkeep.test.ts:152:48-156:8: `.encodeCronJob(
        cronReceiver1.address,
        handler1Sig,
        basicCronString,
      )`
$DIR/contracts/test/v0.8/automation/CronUpkeep.test.ts:157:7-164:23: `cron = (
        await cronFactory.deploy(
          owner.address,
          cronDelegate.address,
          5,
          payload,
        )
      ).connect(owner)`
$DIR/contracts/test/v0.8/automation/CronUpkeep.test.ts:158:26-163:10: `.deploy(
          owner.address,
          cronDelegate.address,
          5,
          payload,
        )`
$DIR/contracts/test/v0.8/automation/CronUpkeep.test.ts:164:8-164:23: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/CronUpkeep.test.ts:165:29-165:43: `.getCronJob(1)`
$DIR/contracts/test/v0.8/automation/CronUpkeep.test.ts:203:41-204:32: `
          .connect(AddressZero)`
$DIR/contracts/test/v0.8/automation/CronUpkeep.test.ts:204:32-205:40: `
          .callStatic.checkUpkeep('0x')`
$DIR/contracts/test/v0.8/automation/CronUpkeep.test.ts:210:9-210:72: `await h.fastForward(moment.duration(11, 'minutes').asSeconds())`
$DIR/contracts/test/v0.8/automation/CronUpkeep.test.ts:210:16-210:72: `.fastForward(moment.duration(11, 'minutes').asSeconds())`
$DIR/contracts/test/v0.8/automation/CronUpkeep.test.ts:210:35-210:59: `.duration(11, 'minutes')`
$DIR/contracts/test/v0.8/automation/CronUpkeep.test.ts:210:59-210:71: `.asSeconds()`
$DIR/contracts/test/v0.8/automation/CronUpkeep.test.ts:211:50-212:32: `
          .connect(AddressZero)`
$DIR/contracts/test/v0.8/automation/CronUpkeep.test.ts:212:32-213:40: `
          .callStatic.checkUpkeep('0x')`
$DIR/contracts/test/v0.8/automation/CronUpkeep.test.ts:221:11-221:70: `await h.fastForward(moment.duration(1, 'year').asSeconds())`
$DIR/contracts/test/v0.8/automation/CronUpkeep.test.ts:221:18-221:70: `.fastForward(moment.duration(1, 'year').asSeconds())`
$DIR/contracts/test/v0.8/automation/CronUpkeep.test.ts:221:37-221:57: `.duration(1, 'year')`
$DIR/contracts/test/v0.8/automation/CronUpkeep.test.ts:221:57-221:69: `.asSeconds()`
$DIR/contracts/test/v0.8/automation/CronUpkeep.test.ts:222:40-223:34: `
            .connect(AddressZero)`
$DIR/contracts/test/v0.8/automation/CronUpkeep.test.ts:223:34-224:42: `
            .callStatic.checkUpkeep('0x')`
$DIR/contracts/test/v0.8/automation/CronUpkeep.test.ts:226:11-227:12: `await h.mineBlock(ethers.provider)
          ;`
$DIR/contracts/test/v0.8/automation/CronUpkeep.test.ts:226:18-226:45: `.mineBlock(ethers.provider)`
$DIR/contracts/test/v0.8/automation/CronUpkeep.test.ts:227:12-229:42: `[_, payload] = await cron
            .connect(AddressZero)
            .callStatic.checkUpkeep('0x')`
$DIR/contracts/test/v0.8/automation/CronUpkeep.test.ts:227:37-228:34: `
            .connect(AddressZero)`
$DIR/contracts/test/v0.8/automation/CronUpkeep.test.ts:228:34-229:42: `
            .callStatic.checkUpkeep('0x')`
$DIR/contracts/test/v0.8/automation/CronUpkeep.test.ts:231:11-232:12: `await h.mineBlock(ethers.provider)
          ;`
$DIR/contracts/test/v0.8/automation/CronUpkeep.test.ts:231:18-231:45: `.mineBlock(ethers.provider)`
$DIR/contracts/test/v0.8/automation/CronUpkeep.test.ts:232:12-234:42: `[_, payload] = await cron
            .connect(AddressZero)
            .callStatic.checkUpkeep('0x')`
$DIR/contracts/test/v0.8/automation/CronUpkeep.test.ts:232:37-233:34: `
            .connect(AddressZero)`
$DIR/contracts/test/v0.8/automation/CronUpkeep.test.ts:233:34-234:42: `
            .callStatic.checkUpkeep('0x')`
$DIR/contracts/test/v0.8/automation/CronUpkeep.test.ts:236:11-237:12: `await h.mineBlock(ethers.provider)
          ;`
$DIR/contracts/test/v0.8/automation/CronUpkeep.test.ts:236:18-236:45: `.mineBlock(ethers.provider)`
$DIR/contracts/test/v0.8/automation/CronUpkeep.test.ts:237:12-239:42: `[_, payload] = await cron
            .connect(AddressZero)
            .callStatic.checkUpkeep('0x')`
$DIR/contracts/test/v0.8/automation/CronUpkeep.test.ts:237:37-238:34: `
            .connect(AddressZero)`
$DIR/contracts/test/v0.8/automation/CronUpkeep.test.ts:238:34-239:42: `
            .callStatic.checkUpkeep('0x')`
$DIR/contracts/test/v0.8/automation/CronUpkeep.test.ts:242:33-242:58: `.map((n) => n.toNumber())`
$DIR/contracts/test/v0.8/automation/CronUpkeep.test.ts:242:58-242:65: `.sort()`
$DIR/contracts/test/v0.8/automation/CronUpkeep.test.ts:251:9-251:72: `await h.fastForward(moment.duration(11, 'minutes').asSeconds())`
$DIR/contracts/test/v0.8/automation/CronUpkeep.test.ts:251:16-251:72: `.fastForward(moment.duration(11, 'minutes').asSeconds())`
$DIR/contracts/test/v0.8/automation/CronUpkeep.test.ts:251:35-251:59: `.duration(11, 'minutes')`
$DIR/contracts/test/v0.8/automation/CronUpkeep.test.ts:251:59-251:71: `.asSeconds()`
$DIR/contracts/test/v0.8/automation/CronUpkeep.test.ts:252:50-253:32: `
          .connect(AddressZero)`
$DIR/contracts/test/v0.8/automation/CronUpkeep.test.ts:253:32-254:40: `
          .callStatic.checkUpkeep('0x')`
$DIR/contracts/test/v0.8/automation/CronUpkeep.test.ts:256:26-256:49: `.performUpkeep(payload)`
$DIR/contracts/test/v0.8/automation/CronUpkeep.test.ts:263:9-263:72: `await h.fastForward(moment.duration(11, 'minutes').asSeconds())`
$DIR/contracts/test/v0.8/automation/CronUpkeep.test.ts:263:16-263:72: `.fastForward(moment.duration(11, 'minutes').asSeconds())`
$DIR/contracts/test/v0.8/automation/CronUpkeep.test.ts:263:35-263:59: `.duration(11, 'minutes')`
$DIR/contracts/test/v0.8/automation/CronUpkeep.test.ts:263:59-263:71: `.asSeconds()`
$DIR/contracts/test/v0.8/automation/CronUpkeep.test.ts:264:50-265:32: `
          .connect(AddressZero)`
$DIR/contracts/test/v0.8/automation/CronUpkeep.test.ts:265:32-266:40: `
          .callStatic.checkUpkeep('0x')`
$DIR/contracts/test/v0.8/automation/CronUpkeep.test.ts:268:26-268:49: `.performUpkeep(payload)`
$DIR/contracts/test/v0.8/automation/CronUpkeep.test.ts:275:9-275:36: `await cron.deleteCronJob(2)`
$DIR/contracts/test/v0.8/automation/CronUpkeep.test.ts:275:19-275:36: `.deleteCronJob(2)`
$DIR/contracts/test/v0.8/automation/CronUpkeep.test.ts:276:9-276:72: `await h.fastForward(moment.duration(21, 'minutes').asSeconds())`
$DIR/contracts/test/v0.8/automation/CronUpkeep.test.ts:276:16-276:72: `.fastForward(moment.duration(21, 'minutes').asSeconds())`
$DIR/contracts/test/v0.8/automation/CronUpkeep.test.ts:276:35-276:59: `.duration(21, 'minutes')`
$DIR/contracts/test/v0.8/automation/CronUpkeep.test.ts:276:59-276:71: `.asSeconds()`
$DIR/contracts/test/v0.8/automation/CronUpkeep.test.ts:279:17-279:33: `.unix(timeStamp)`
$DIR/contracts/test/v0.8/automation/CronUpkeep.test.ts:279:33-279:52: `.add(20, 'minutes')`
$DIR/contracts/test/v0.8/automation/CronUpkeep.test.ts:279:52-279:59: `.unix()`
$DIR/contracts/test/v0.8/automation/CronUpkeep.test.ts:283:26-283:49: `.performUpkeep(payload)`
$DIR/contracts/test/v0.8/automation/CronUpkeep.test.ts:289:9-289:72: `await h.fastForward(moment.duration(11, 'minutes').asSeconds())`
$DIR/contracts/test/v0.8/automation/CronUpkeep.test.ts:289:16-289:72: `.fastForward(moment.duration(11, 'minutes').asSeconds())`
$DIR/contracts/test/v0.8/automation/CronUpkeep.test.ts:289:35-289:59: `.duration(11, 'minutes')`
$DIR/contracts/test/v0.8/automation/CronUpkeep.test.ts:289:59-289:71: `.asSeconds()`
$DIR/contracts/test/v0.8/automation/CronUpkeep.test.ts:290:50-291:32: `
          .connect(AddressZero)`
$DIR/contracts/test/v0.8/automation/CronUpkeep.test.ts:291:32-292:40: `
          .callStatic.checkUpkeep('0x')`
$DIR/contracts/test/v0.8/automation/CronUpkeep.test.ts:294:9-294:60: `await cron.connect(stranger).performUpkeep(payload)`
$DIR/contracts/test/v0.8/automation/CronUpkeep.test.ts:294:19-294:37: `.connect(stranger)`
$DIR/contracts/test/v0.8/automation/CronUpkeep.test.ts:294:37-294:60: `.performUpkeep(payload)`
$DIR/contracts/test/v0.8/automation/CronUpkeep.test.ts:298:9-298:72: `await h.fastForward(moment.duration(10, 'minutes').asSeconds())`
$DIR/contracts/test/v0.8/automation/CronUpkeep.test.ts:298:16-298:72: `.fastForward(moment.duration(10, 'minutes').asSeconds())`
$DIR/contracts/test/v0.8/automation/CronUpkeep.test.ts:298:35-298:59: `.duration(10, 'minutes')`
$DIR/contracts/test/v0.8/automation/CronUpkeep.test.ts:298:59-298:71: `.asSeconds()`
$DIR/contracts/test/v0.8/automation/CronUpkeep.test.ts:299:50-300:32: `
          .connect(AddressZero)`
$DIR/contracts/test/v0.8/automation/CronUpkeep.test.ts:300:32-301:40: `
          .callStatic.checkUpkeep('0x')`
$DIR/contracts/test/v0.8/automation/CronUpkeep.test.ts:305:17-305:33: `.unix(timeStamp)`
$DIR/contracts/test/v0.8/automation/CronUpkeep.test.ts:305:33-305:52: `.add(10, 'minutes')`
$DIR/contracts/test/v0.8/automation/CronUpkeep.test.ts:305:52-305:71: `.add(59, 'seconds')`
$DIR/contracts/test/v0.8/automation/CronUpkeep.test.ts:305:71-305:78: `.unix()`
$DIR/contracts/test/v0.8/automation/CronUpkeep.test.ts:309:9-309:42: `await cron.performUpkeep(payload)`
$DIR/contracts/test/v0.8/automation/CronUpkeep.test.ts:309:19-309:42: `.performUpkeep(payload)`
$DIR/contracts/test/v0.8/automation/CronUpkeep.test.ts:310:26-310:49: `.performUpkeep(payload)`
$DIR/contracts/test/v0.8/automation/CronUpkeep.test.ts:311:26-311:58: `.performUpkeep(maliciousPayload)`
$DIR/contracts/test/v0.8/automation/CronUpkeep.test.ts:312:9-312:70: `await h.fastForward(moment.duration(1, 'minute').asSeconds())`
$DIR/contracts/test/v0.8/automation/CronUpkeep.test.ts:312:16-312:70: `.fastForward(moment.duration(1, 'minute').asSeconds())`
$DIR/contracts/test/v0.8/automation/CronUpkeep.test.ts:312:35-312:57: `.duration(1, 'minute')`
$DIR/contracts/test/v0.8/automation/CronUpkeep.test.ts:312:57-312:69: `.asSeconds()`
$DIR/contracts/test/v0.8/automation/CronUpkeep.test.ts:313:26-313:49: `.performUpkeep(payload)`
$DIR/contracts/test/v0.8/automation/CronUpkeep.test.ts:314:26-314:58: `.performUpkeep(maliciousPayload)`
$DIR/contracts/test/v0.8/automation/CronUpkeep.test.ts:315:9-315:71: `await h.fastForward(moment.duration(10, 'minute').asSeconds())`
$DIR/contracts/test/v0.8/automation/CronUpkeep.test.ts:315:16-315:71: `.fastForward(moment.duration(10, 'minute').asSeconds())`
$DIR/contracts/test/v0.8/automation/CronUpkeep.test.ts:315:35-315:58: `.duration(10, 'minute')`
$DIR/contracts/test/v0.8/automation/CronUpkeep.test.ts:315:58-315:70: `.asSeconds()`
$DIR/contracts/test/v0.8/automation/CronUpkeep.test.ts:316:26-316:49: `.performUpkeep(payload)`
$DIR/contracts/test/v0.8/automation/CronUpkeep.test.ts:317:26-317:58: `.performUpkeep(maliciousPayload)`
$DIR/contracts/test/v0.8/automation/CronUpkeep.test.ts:326:53-328:8: `.encodeCronString(
        cronString1,
      )`
$DIR/contracts/test/v0.8/automation/CronUpkeep.test.ts:329:53-331:8: `.encodeCronString(
        cronString2,
      )`
$DIR/contracts/test/v0.8/automation/CronUpkeep.test.ts:333:29-333:60: `.calculateNextTick(cronString1)`
$DIR/contracts/test/v0.8/automation/CronUpkeep.test.ts:336:29-336:60: `.calculateNextTick(cronString2)`
$DIR/contracts/test/v0.8/automation/CronUpkeep.test.ts:338:7-342:8: `await cron.createCronJobFromEncodedSpec(
        cronReceiver1.address,
        handler1Sig,
        encodedSpec1,
      )`
$DIR/contracts/test/v0.8/automation/CronUpkeep.test.ts:338:17-342:8: `.createCronJobFromEncodedSpec(
        cronReceiver1.address,
        handler1Sig,
        encodedSpec1,
      )`
$DIR/contracts/test/v0.8/automation/CronUpkeep.test.ts:343:7-343:35: `await assertJobIDsEqual([1])`
$DIR/contracts/test/v0.8/automation/CronUpkeep.test.ts:344:7-348:8: `await cron.createCronJobFromEncodedSpec(
        cronReceiver1.address,
        handler2Sig,
        encodedSpec1,
      )`
$DIR/contracts/test/v0.8/automation/CronUpkeep.test.ts:344:17-348:8: `.createCronJobFromEncodedSpec(
        cronReceiver1.address,
        handler2Sig,
        encodedSpec1,
      )`
$DIR/contracts/test/v0.8/automation/CronUpkeep.test.ts:349:7-349:38: `await assertJobIDsEqual([1, 2])`
$DIR/contracts/test/v0.8/automation/CronUpkeep.test.ts:350:7-354:8: `await cron.createCronJobFromEncodedSpec(
        cronReceiver2.address,
        handler1Sig,
        encodedSpec2,
      )`
$DIR/contracts/test/v0.8/automation/CronUpkeep.test.ts:350:17-354:8: `.createCronJobFromEncodedSpec(
        cronReceiver2.address,
        handler1Sig,
        encodedSpec2,
      )`
$DIR/contracts/test/v0.8/automation/CronUpkeep.test.ts:355:7-355:41: `await assertJobIDsEqual([1, 2, 3])`
$DIR/contracts/test/v0.8/automation/CronUpkeep.test.ts:356:7-360:8: `await cron.createCronJobFromEncodedSpec(
        cronReceiver2.address,
        handler2Sig,
        encodedSpec2,
      )`
$DIR/contracts/test/v0.8/automation/CronUpkeep.test.ts:356:17-360:8: `.createCronJobFromEncodedSpec(
        cronReceiver2.address,
        handler2Sig,
        encodedSpec2,
      )`
$DIR/contracts/test/v0.8/automation/CronUpkeep.test.ts:361:7-361:44: `await assertJobIDsEqual([1, 2, 3, 4])`
$DIR/contracts/test/v0.8/automation/CronUpkeep.test.ts:362:31-362:45: `.getCronJob(1)`
$DIR/contracts/test/v0.8/automation/CronUpkeep.test.ts:363:31-363:45: `.getCronJob(2)`
$DIR/contracts/test/v0.8/automation/CronUpkeep.test.ts:364:31-364:45: `.getCronJob(3)`
$DIR/contracts/test/v0.8/automation/CronUpkeep.test.ts:365:31-365:45: `.getCronJob(4)`
$DIR/contracts/test/v0.8/automation/CronUpkeep.test.ts:369:25-369:45: `.nextTick.toNumber()`
$DIR/contracts/test/v0.8/automation/CronUpkeep.test.ts:373:25-373:45: `.nextTick.toNumber()`
$DIR/contracts/test/v0.8/automation/CronUpkeep.test.ts:377:25-377:45: `.nextTick.toNumber()`
$DIR/contracts/test/v0.8/automation/CronUpkeep.test.ts:381:25-381:45: `.nextTick.toNumber()`
$DIR/contracts/test/v0.8/automation/CronUpkeep.test.ts:390:13-391:29: `
          .connect(stranger)`
$DIR/contracts/test/v0.8/automation/CronUpkeep.test.ts:391:29-396:12: `
          .createCronJobFromEncodedSpec(
            cronReceiver1.address,
            handler1Sig,
            basicSpec,
          )`
$DIR/contracts/test/v0.8/automation/CronUpkeep.test.ts:402:9-402:32: `await createBasicCron()`
$DIR/contracts/test/v0.8/automation/CronUpkeep.test.ts:417:29-417:43: `.getCronJob(1)`
$DIR/contracts/test/v0.8/automation/CronUpkeep.test.ts:421:7-426:8: `await cron.updateCronJob(
        1,
        cronReceiver2.address,
        handler2Sig,
        newEncodedSpec,
      )`
$DIR/contracts/test/v0.8/automation/CronUpkeep.test.ts:421:17-426:8: `.updateCronJob(
        1,
        cronReceiver2.address,
        handler2Sig,
        newEncodedSpec,
      )`
$DIR/contracts/test/v0.8/automation/CronUpkeep.test.ts:427:7-427:39: `cron1 = await cron.getCronJob(1)`
$DIR/contracts/test/v0.8/automation/CronUpkeep.test.ts:427:25-427:39: `.getCronJob(1)`
$DIR/contracts/test/v0.8/automation/CronUpkeep.test.ts:435:19-440:10: `.updateCronJob(
          1,
          cronReceiver2.address,
          handler2Sig,
          newEncodedSpec,
        )`
$DIR/contracts/test/v0.8/automation/CronUpkeep.test.ts:446:13-447:29: `
          .connect(stranger)`
$DIR/contracts/test/v0.8/automation/CronUpkeep.test.ts:447:29-448:80: `
          .updateCronJob(1, cronReceiver2.address, handler2Sig, newEncodedSpec)`
$DIR/contracts/test/v0.8/automation/CronUpkeep.test.ts:454:13-459:10: `.updateCronJob(
          2,
          cronReceiver2.address,
          handler2Sig,
          newEncodedSpec,
        )`
$DIR/contracts/test/v0.8/automation/CronUpkeep.test.ts:466:7-466:30: `await createBasicCron()`
$DIR/contracts/test/v0.8/automation/CronUpkeep.test.ts:467:7-467:30: `await createBasicCron()`
$DIR/contracts/test/v0.8/automation/CronUpkeep.test.ts:468:7-468:30: `await createBasicCron()`
$DIR/contracts/test/v0.8/automation/CronUpkeep.test.ts:469:7-469:30: `await createBasicCron()`
$DIR/contracts/test/v0.8/automation/CronUpkeep.test.ts:470:7-470:44: `await assertJobIDsEqual([1, 2, 3, 4])`
$DIR/contracts/test/v0.8/automation/CronUpkeep.test.ts:471:7-471:34: `await cron.deleteCronJob(2)`
$DIR/contracts/test/v0.8/automation/CronUpkeep.test.ts:471:17-471:34: `.deleteCronJob(2)`
$DIR/contracts/test/v0.8/automation/CronUpkeep.test.ts:472:24-472:38: `.getCronJob(2)`
$DIR/contracts/test/v0.8/automation/CronUpkeep.test.ts:473:24-473:41: `.deleteCronJob(2)`
$DIR/contracts/test/v0.8/automation/CronUpkeep.test.ts:474:7-474:41: `await assertJobIDsEqual([1, 3, 4])`
$DIR/contracts/test/v0.8/automation/CronUpkeep.test.ts:475:7-475:34: `await cron.deleteCronJob(1)`
$DIR/contracts/test/v0.8/automation/CronUpkeep.test.ts:475:17-475:34: `.deleteCronJob(1)`
$DIR/contracts/test/v0.8/automation/CronUpkeep.test.ts:476:7-476:38: `await assertJobIDsEqual([3, 4])`
$DIR/contracts/test/v0.8/automation/CronUpkeep.test.ts:477:7-477:34: `await cron.deleteCronJob(4)`
$DIR/contracts/test/v0.8/automation/CronUpkeep.test.ts:477:17-477:34: `.deleteCronJob(4)`
$DIR/contracts/test/v0.8/automation/CronUpkeep.test.ts:478:7-478:35: `await assertJobIDsEqual([3])`
$DIR/contracts/test/v0.8/automation/CronUpkeep.test.ts:479:7-479:34: `await cron.deleteCronJob(3)`
$DIR/contracts/test/v0.8/automation/CronUpkeep.test.ts:479:17-479:34: `.deleteCronJob(3)`
$DIR/contracts/test/v0.8/automation/CronUpkeep.test.ts:480:7-480:34: `await assertJobIDsEqual([])`
$DIR/contracts/test/v0.8/automation/CronUpkeep.test.ts:484:7-484:30: `await createBasicCron()`
$DIR/contracts/test/v0.8/automation/CronUpkeep.test.ts:485:24-485:41: `.deleteCronJob(1)`
$DIR/contracts/test/v0.8/automation/CronUpkeep.test.ts:489:7-489:30: `await createBasicCron()`
$DIR/contracts/test/v0.8/automation/CronUpkeep.test.ts:490:7-490:30: `await createBasicCron()`
$DIR/contracts/test/v0.8/automation/CronUpkeep.test.ts:491:24-491:41: `.deleteCronJob(0)`
$DIR/contracts/test/v0.8/automation/CronUpkeep.test.ts:492:24-492:41: `.deleteCronJob(3)`
$DIR/contracts/test/v0.8/automation/CronUpkeep.test.ts:498:24-498:42: `.connect(stranger)`
$DIR/contracts/test/v0.8/automation/CronUpkeep.test.ts:498:42-498:50: `.pause()`
$DIR/contracts/test/v0.8/automation/CronUpkeep.test.ts:499:24-499:42: `.connect(stranger)`
$DIR/contracts/test/v0.8/automation/CronUpkeep.test.ts:499:42-499:52: `.unpause()`
$DIR/contracts/test/v0.8/automation/CronUpkeep.test.ts:503:24-503:33: `.paused()`
$DIR/contracts/test/v0.8/automation/CronUpkeep.test.ts:504:7-504:25: `await cron.pause()`
$DIR/contracts/test/v0.8/automation/CronUpkeep.test.ts:504:17-504:25: `.pause()`
$DIR/contracts/test/v0.8/automation/CronUpkeep.test.ts:505:24-505:33: `.paused()`
$DIR/contracts/test/v0.8/automation/CronUpkeep.test.ts:506:7-506:27: `await cron.unpause()`
$DIR/contracts/test/v0.8/automation/CronUpkeep.test.ts:506:17-506:27: `.unpause()`
$DIR/contracts/test/v0.8/automation/CronUpkeep.test.ts:507:24-507:33: `.paused()`
$DIR/contracts/test/v0.8/automation/CronUpkeep.test.ts:549:9-553:10: `await cron.createCronJobFromString(
          cronReceiver1.address,
          handler1Sig,
          cronString,
        )`
$DIR/contracts/test/v0.8/automation/CronUpkeep.test.ts:549:19-553:10: `.createCronJobFromString(
          cronReceiver1.address,
          handler1Sig,
          cronString,
        )`
$DIR/contracts/test/v0.8/automation/CronUpkeep.test.ts:554:9-554:71: `await h.fastForward(moment.duration(100, 'years').asSeconds())`
$DIR/contracts/test/v0.8/automation/CronUpkeep.test.ts:554:16-554:71: `.fastForward(moment.duration(100, 'years').asSeconds())`
$DIR/contracts/test/v0.8/automation/CronUpkeep.test.ts:554:35-554:58: `.duration(100, 'years')`
$DIR/contracts/test/v0.8/automation/CronUpkeep.test.ts:554:58-554:70: `.asSeconds()`
$DIR/contracts/test/v0.8/automation/CronUpkeep.test.ts:555:47-556:32: `
          .connect(AddressZero)`
$DIR/contracts/test/v0.8/automation/CronUpkeep.test.ts:556:32-557:40: `
          .callStatic.checkUpkeep('0x')`
$DIR/contracts/test/v0.8/automation/CronUpkeep.test.ts:559:9-559:39: `await cron.txCheckUpkeep('0x')`
$DIR/contracts/test/v0.8/automation/CronUpkeep.test.ts:559:19-559:39: `.txCheckUpkeep('0x')`
$DIR/contracts/test/v0.8/automation/CronUpkeep.test.ts:560:9-560:39: `await cron.performUpkeep(data)`
$DIR/contracts/test/v0.8/automation/CronUpkeep.test.ts:560:19-560:39: `.performUpkeep(data)`
$DIR/contracts/test/v0.8/automation/CronUpkeep.test.ts:561:9-561:41: `await cron.deleteCronJob(cronID)`
$DIR/contracts/test/v0.8/automation/CronUpkeep.test.ts:561:19-561:41: `.deleteCronJob(cronID)`
$DIR/contracts/test/v0.8/automation/CronUpkeepFactory.test.ts:46:6-58:7: `.publicAbi(factory as unknown as Contract, [
      's_maxJobs',
      'newCronUpkeep',
      'newCronUpkeepWithJob',
      'setMaxJobs',
      'cronDelegateAddress',
      'encodeCronString',
      'encodeCronJob',
      // Ownable methods:
      'acceptOwnership',
      'owner',
      'transferOwnership',
    ])`
$DIR/contracts/test/v0.8/automation/CronUpkeepFactory.test.ts:64:22-64:44: `.cronDelegateAddress()`
$DIR/contracts/test/v0.8/automation/CronUpkeepFactory.test.ts:72:27-72:42: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/CronUpkeepFactory.test.ts:72:42-72:58: `.newCronUpkeep()`
$DIR/contracts/test/v0.8/automation/CronUpkeepFactory.test.ts:78:37-78:52: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/CronUpkeepFactory.test.ts:78:52-78:68: `.newCronUpkeep()`
$DIR/contracts/test/v0.8/automation/CronUpkeepFactory.test.ts:79:40-79:47: `.wait()`
$DIR/contracts/test/v0.8/automation/CronUpkeepFactory.test.ts:84:45-86:9: `.getContractFactory('CronUpkeep', {
        libraries: { Cron: cronExternalLib.address },
      })`
$DIR/contracts/test/v0.8/automation/CronUpkeepFactory.test.ts:88:32-88:54: `.attach(upkeepAddress)`
$DIR/contracts/test/v0.8/automation/CronUpkeepFactory.test.ts:88:54-88:62: `.owner()`
$DIR/contracts/test/v0.8/automation/CronUpkeepFactory.test.ts:96:27-96:39: `.s_maxJobs()`
$DIR/contracts/test/v0.8/automation/CronUpkeepFactory.test.ts:97:7-97:34: `await factory.setMaxJobs(6)`
$DIR/contracts/test/v0.8/automation/CronUpkeepFactory.test.ts:97:20-97:34: `.setMaxJobs(6)`
$DIR/contracts/test/v0.8/automation/CronUpkeepFactory.test.ts:98:27-98:39: `.s_maxJobs()`
$DIR/contracts/test/v0.8/automation/CronUpkeepFactory.test.ts:102:27-102:45: `.connect(stranger)`
$DIR/contracts/test/v0.8/automation/CronUpkeepFactory.test.ts:102:45-102:59: `.setMaxJobs(6)`
$DIR/contracts/test/v0.8/automation/ERC20BalanceMonitor.test.ts:99:7-99:45: `await lt.transfer(bm.address, oneLINK)`
$DIR/contracts/test/v0.8/automation/ERC20BalanceMonitor.test.ts:99:15-99:45: `.transfer(bm.address, oneLINK)`
$DIR/contracts/test/v0.8/automation/ERC20BalanceMonitor.test.ts:100:7-100:63: `await lt.connect(stranger).transfer(bm.address, oneLINK)`
$DIR/contracts/test/v0.8/automation/ERC20BalanceMonitor.test.ts:100:15-100:33: `.connect(stranger)`
$DIR/contracts/test/v0.8/automation/ERC20BalanceMonitor.test.ts:100:33-100:63: `.transfer(bm.address, oneLINK)`
$DIR/contracts/test/v0.8/automation/ERC20BalanceMonitor.test.ts:111:37-111:62: `.balanceOf(owner.address)`
$DIR/contracts/test/v0.8/automation/ERC20BalanceMonitor.test.ts:112:26-112:41: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/ERC20BalanceMonitor.test.ts:112:41-112:74: `.withdraw(oneLINK, owner.address)`
$DIR/contracts/test/v0.8/automation/ERC20BalanceMonitor.test.ts:113:7-113:22: `await tx.wait()`
$DIR/contracts/test/v0.8/automation/ERC20BalanceMonitor.test.ts:113:15-113:22: `.wait()`
$DIR/contracts/test/v0.8/automation/ERC20BalanceMonitor.test.ts:114:36-114:61: `.balanceOf(owner.address)`
$DIR/contracts/test/v0.8/automation/ERC20BalanceMonitor.test.ts:116:21-116:39: `.gt(beforeBalance)`
$DIR/contracts/test/v0.8/automation/ERC20BalanceMonitor.test.ts:122:26-122:41: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/ERC20BalanceMonitor.test.ts:122:41-122:74: `.withdraw(oneLINK, owner.address)`
$DIR/contracts/test/v0.8/automation/ERC20BalanceMonitor.test.ts:129:37-129:65: `.balanceOf(stranger.address)`
$DIR/contracts/test/v0.8/automation/ERC20BalanceMonitor.test.ts:130:26-130:41: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/ERC20BalanceMonitor.test.ts:130:41-130:77: `.withdraw(oneLINK, stranger.address)`
$DIR/contracts/test/v0.8/automation/ERC20BalanceMonitor.test.ts:131:7-131:22: `await tx.wait()`
$DIR/contracts/test/v0.8/automation/ERC20BalanceMonitor.test.ts:131:15-131:22: `.wait()`
$DIR/contracts/test/v0.8/automation/ERC20BalanceMonitor.test.ts:132:36-132:64: `.balanceOf(stranger.address)`
$DIR/contracts/test/v0.8/automation/ERC20BalanceMonitor.test.ts:134:22-134:35: `.add(oneLINK)`
$DIR/contracts/test/v0.8/automation/ERC20BalanceMonitor.test.ts:134:35-134:52: `.eq(afterBalance)`
$DIR/contracts/test/v0.8/automation/ERC20BalanceMonitor.test.ts:140:20-140:38: `.connect(stranger)`
$DIR/contracts/test/v0.8/automation/ERC20BalanceMonitor.test.ts:140:38-140:71: `.withdraw(oneLINK, owner.address)`
$DIR/contracts/test/v0.8/automation/ERC20BalanceMonitor.test.ts:147:31-147:46: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/ERC20BalanceMonitor.test.ts:147:46-147:54: `.pause()`
$DIR/contracts/test/v0.8/automation/ERC20BalanceMonitor.test.ts:148:7-148:27: `await pauseTx.wait()`
$DIR/contracts/test/v0.8/automation/ERC20BalanceMonitor.test.ts:148:20-148:27: `.wait()`
$DIR/contracts/test/v0.8/automation/ERC20BalanceMonitor.test.ts:149:33-149:48: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/ERC20BalanceMonitor.test.ts:149:48-149:58: `.unpause()`
$DIR/contracts/test/v0.8/automation/ERC20BalanceMonitor.test.ts:150:7-150:29: `await unpauseTx.wait()`
$DIR/contracts/test/v0.8/automation/ERC20BalanceMonitor.test.ts:150:22-150:29: `.wait()`
$DIR/contracts/test/v0.8/automation/ERC20BalanceMonitor.test.ts:154:33-154:51: `.connect(stranger)`
$DIR/contracts/test/v0.8/automation/ERC20BalanceMonitor.test.ts:154:51-154:59: `.pause()`
$DIR/contracts/test/v0.8/automation/ERC20BalanceMonitor.test.ts:156:36-156:51: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/ERC20BalanceMonitor.test.ts:156:51-156:59: `.pause()`
$DIR/contracts/test/v0.8/automation/ERC20BalanceMonitor.test.ts:157:7-157:32: `await pauseTxOwner.wait()`
$DIR/contracts/test/v0.8/automation/ERC20BalanceMonitor.test.ts:157:25-157:32: `.wait()`
$DIR/contracts/test/v0.8/automation/ERC20BalanceMonitor.test.ts:158:35-158:53: `.connect(stranger)`
$DIR/contracts/test/v0.8/automation/ERC20BalanceMonitor.test.ts:158:53-158:63: `.unpause()`
$DIR/contracts/test/v0.8/automation/ERC20BalanceMonitor.test.ts:166:31-166:61: `.getAccountInfo(watchAddress1)`
$DIR/contracts/test/v0.8/automation/ERC20BalanceMonitor.test.ts:168:27-169:24: `
        .connect(owner)`
$DIR/contracts/test/v0.8/automation/ERC20BalanceMonitor.test.ts:169:24-170:61: `
        .setWatchList([watchAddress1], [oneLINK], [twoLINK])`
$DIR/contracts/test/v0.8/automation/ERC20BalanceMonitor.test.ts:171:7-171:25: `await setTx.wait()`
$DIR/contracts/test/v0.8/automation/ERC20BalanceMonitor.test.ts:171:18-171:25: `.wait()`
$DIR/contracts/test/v0.8/automation/ERC20BalanceMonitor.test.ts:172:31-172:46: `.getWatchList()`
$DIR/contracts/test/v0.8/automation/ERC20BalanceMonitor.test.ts:174:35-174:65: `.getAccountInfo(watchAddress1)`
$DIR/contracts/test/v0.8/automation/ERC20BalanceMonitor.test.ts:179:7-185:10: `setTx = await bm
        .connect(owner)
        .setWatchList(
          [watchAddress1, watchAddress2, watchAddress3],
          [oneLINK, twoLINK, threeLINK],
          [twoLINK, threeLINK, fiveLINK],
        )`
$DIR/contracts/test/v0.8/automation/ERC20BalanceMonitor.test.ts:179:23-180:24: `
        .connect(owner)`
$DIR/contracts/test/v0.8/automation/ERC20BalanceMonitor.test.ts:180:24-185:10: `
        .setWatchList(
          [watchAddress1, watchAddress2, watchAddress3],
          [oneLINK, twoLINK, threeLINK],
          [twoLINK, threeLINK, fiveLINK],
        )`
$DIR/contracts/test/v0.8/automation/ERC20BalanceMonitor.test.ts:186:7-186:25: `await setTx.wait()`
$DIR/contracts/test/v0.8/automation/ERC20BalanceMonitor.test.ts:186:18-186:25: `.wait()`
$DIR/contracts/test/v0.8/automation/ERC20BalanceMonitor.test.ts:187:7-187:42: `watchList = await bm.getWatchList()`
$DIR/contracts/test/v0.8/automation/ERC20BalanceMonitor.test.ts:187:27-187:42: `.getWatchList()`
$DIR/contracts/test/v0.8/automation/ERC20BalanceMonitor.test.ts:189:34-189:64: `.getAccountInfo(watchAddress1)`
$DIR/contracts/test/v0.8/automation/ERC20BalanceMonitor.test.ts:190:34-190:64: `.getAccountInfo(watchAddress2)`
$DIR/contracts/test/v0.8/automation/ERC20BalanceMonitor.test.ts:191:34-191:64: `.getAccountInfo(watchAddress3)`
$DIR/contracts/test/v0.8/automation/ERC20BalanceMonitor.test.ts:202:7-208:10: `setTx = await bm
        .connect(owner)
        .setWatchList(
          [watchAddress3, watchAddress1],
          [threeLINK, oneLINK],
          [fiveLINK, twoLINK],
        )`
$DIR/contracts/test/v0.8/automation/ERC20BalanceMonitor.test.ts:202:23-203:24: `
        .connect(owner)`
$DIR/contracts/test/v0.8/automation/ERC20BalanceMonitor.test.ts:203:24-208:10: `
        .setWatchList(
          [watchAddress3, watchAddress1],
          [threeLINK, oneLINK],
          [fiveLINK, twoLINK],
        )`
$DIR/contracts/test/v0.8/automation/ERC20BalanceMonitor.test.ts:209:7-209:25: `await setTx.wait()`
$DIR/contracts/test/v0.8/automation/ERC20BalanceMonitor.test.ts:209:18-209:25: `.wait()`
$DIR/contracts/test/v0.8/automation/ERC20BalanceMonitor.test.ts:210:7-210:42: `watchList = await bm.getWatchList()`
$DIR/contracts/test/v0.8/automation/ERC20BalanceMonitor.test.ts:210:27-210:42: `.getWatchList()`
$DIR/contracts/test/v0.8/automation/ERC20BalanceMonitor.test.ts:212:7-212:60: `accountInfo1 = await bm.getAccountInfo(watchAddress1)`
$DIR/contracts/test/v0.8/automation/ERC20BalanceMonitor.test.ts:212:30-212:60: `.getAccountInfo(watchAddress1)`
$DIR/contracts/test/v0.8/automation/ERC20BalanceMonitor.test.ts:213:7-213:60: `accountInfo2 = await bm.getAccountInfo(watchAddress2)`
$DIR/contracts/test/v0.8/automation/ERC20BalanceMonitor.test.ts:213:30-213:60: `.getAccountInfo(watchAddress2)`
$DIR/contracts/test/v0.8/automation/ERC20BalanceMonitor.test.ts:214:7-214:60: `accountInfo3 = await bm.getAccountInfo(watchAddress3)`
$DIR/contracts/test/v0.8/automation/ERC20BalanceMonitor.test.ts:214:30-214:60: `.getAccountInfo(watchAddress3)`
$DIR/contracts/test/v0.8/automation/ERC20BalanceMonitor.test.ts:222:23-223:24: `
        .connect(owner)`
$DIR/contracts/test/v0.8/automation/ERC20BalanceMonitor.test.ts:223:24-228:10: `
        .setWatchList(
          [watchAddress1, watchAddress2, watchAddress1],
          [oneLINK, twoLINK, threeLINK],
          [twoLINK, threeLINK, fiveLINK],
        )`
$DIR/contracts/test/v0.8/automation/ERC20BalanceMonitor.test.ts:233:23-234:24: `
        .connect(owner)`
$DIR/contracts/test/v0.8/automation/ERC20BalanceMonitor.test.ts:234:24-239:10: `
        .setWatchList(
          [watchAddress1, watchAddress2, watchAddress1],
          [oneLINK, twoLINK, threeLINK],
          [zeroLINK, twoLINK, threeLINK],
        )`
$DIR/contracts/test/v0.8/automation/ERC20BalanceMonitor.test.ts:245:12-245:36: `.from(Array(301).keys())`
$DIR/contracts/test/v0.8/automation/ERC20BalanceMonitor.test.ts:245:28-245:35: `.keys()`
$DIR/contracts/test/v0.8/automation/ERC20BalanceMonitor.test.ts:245:36-249:9: `.forEach(() => {
        watchlist[0].push(owner.address)
        watchlist[1].push(oneLINK)
        watchlist[2].push(twoLINK)
      })`
$DIR/contracts/test/v0.8/automation/ERC20BalanceMonitor.test.ts:246:21-246:41: `.push(owner.address)`
$DIR/contracts/test/v0.8/automation/ERC20BalanceMonitor.test.ts:247:21-247:35: `.push(oneLINK)`
$DIR/contracts/test/v0.8/automation/ERC20BalanceMonitor.test.ts:248:21-248:35: `.push(twoLINK)`
$DIR/contracts/test/v0.8/automation/ERC20BalanceMonitor.test.ts:250:20-251:24: `
        .connect(owner)`
$DIR/contracts/test/v0.8/automation/ERC20BalanceMonitor.test.ts:251:24-252:64: `
        .setWatchList(watchlist[0], watchlist[1], watchlist[2])`
$DIR/contracts/test/v0.8/automation/ERC20BalanceMonitor.test.ts:257:31-258:27: `
        .connect(stranger)`
$DIR/contracts/test/v0.8/automation/ERC20BalanceMonitor.test.ts:258:27-259:61: `
        .setWatchList([watchAddress1], [oneLINK], [twoLINK])`
$DIR/contracts/test/v0.8/automation/ERC20BalanceMonitor.test.ts:264:18-264:33: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/ERC20BalanceMonitor.test.ts:264:33-264:78: `.setWatchList([watchAddress1], [], [twoLINK])`
$DIR/contracts/test/v0.8/automation/ERC20BalanceMonitor.test.ts:266:7-266:74: `tx = bm.connect(owner).setWatchList([watchAddress1], [oneLINK], [])`
$DIR/contracts/test/v0.8/automation/ERC20BalanceMonitor.test.ts:266:14-266:29: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/ERC20BalanceMonitor.test.ts:266:29-266:74: `.setWatchList([watchAddress1], [oneLINK], [])`
$DIR/contracts/test/v0.8/automation/ERC20BalanceMonitor.test.ts:268:7-268:68: `tx = bm.connect(owner).setWatchList([], [oneLINK], [twoLINK])`
$DIR/contracts/test/v0.8/automation/ERC20BalanceMonitor.test.ts:268:14-268:29: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/ERC20BalanceMonitor.test.ts:268:29-268:68: `.setWatchList([], [oneLINK], [twoLINK])`
$DIR/contracts/test/v0.8/automation/ERC20BalanceMonitor.test.ts:273:18-274:24: `
        .connect(owner)`
$DIR/contracts/test/v0.8/automation/ERC20BalanceMonitor.test.ts:274:24-279:10: `
        .setWatchList(
          [watchAddress1, ethers.constants.AddressZero],
          [oneLINK, oneLINK],
          [twoLINK, twoLINK],
        )`
$DIR/contracts/test/v0.8/automation/ERC20BalanceMonitor.test.ts:284:20-285:24: `
        .connect(owner)`
$DIR/contracts/test/v0.8/automation/ERC20BalanceMonitor.test.ts:285:24-290:10: `
        .setWatchList(
          [watchAddress1, watchAddress2],
          [oneLINK, oneLINK],
          [twoLINK, zeroLINK],
        )`
$DIR/contracts/test/v0.8/automation/ERC20BalanceMonitor.test.ts:299:31-299:58: `.getKeeperRegistryAddress()`
$DIR/contracts/test/v0.8/automation/ERC20BalanceMonitor.test.ts:304:29-304:44: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/ERC20BalanceMonitor.test.ts:304:44-304:81: `.setKeeperRegistryAddress(newAddress)`
$DIR/contracts/test/v0.8/automation/ERC20BalanceMonitor.test.ts:305:7-305:25: `await setTx.wait()`
$DIR/contracts/test/v0.8/automation/ERC20BalanceMonitor.test.ts:305:18-305:25: `.wait()`
$DIR/contracts/test/v0.8/automation/ERC20BalanceMonitor.test.ts:306:31-306:58: `.getKeeperRegistryAddress()`
$DIR/contracts/test/v0.8/automation/ERC20BalanceMonitor.test.ts:311:23-311:41: `.connect(stranger)`
$DIR/contracts/test/v0.8/automation/ERC20BalanceMonitor.test.ts:311:41-311:78: `.setKeeperRegistryAddress(newAddress)`
$DIR/contracts/test/v0.8/automation/ERC20BalanceMonitor.test.ts:316:29-316:44: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/ERC20BalanceMonitor.test.ts:316:44-316:81: `.setKeeperRegistryAddress(newAddress)`
$DIR/contracts/test/v0.8/automation/ERC20BalanceMonitor.test.ts:327:37-327:63: `.getMinWaitPeriodSeconds()`
$DIR/contracts/test/v0.8/automation/ERC20BalanceMonitor.test.ts:332:29-333:24: `
        .connect(owner)`
$DIR/contracts/test/v0.8/automation/ERC20BalanceMonitor.test.ts:333:24-334:48: `
        .setMinWaitPeriodSeconds(newWaitPeriod)`
$DIR/contracts/test/v0.8/automation/ERC20BalanceMonitor.test.ts:335:7-335:25: `await setTx.wait()`
$DIR/contracts/test/v0.8/automation/ERC20BalanceMonitor.test.ts:335:18-335:25: `.wait()`
$DIR/contracts/test/v0.8/automation/ERC20BalanceMonitor.test.ts:336:37-336:63: `.getMinWaitPeriodSeconds()`
$DIR/contracts/test/v0.8/automation/ERC20BalanceMonitor.test.ts:341:23-341:41: `.connect(stranger)`
$DIR/contracts/test/v0.8/automation/ERC20BalanceMonitor.test.ts:341:41-341:80: `.setMinWaitPeriodSeconds(newWaitPeriod)`
$DIR/contracts/test/v0.8/automation/ERC20BalanceMonitor.test.ts:346:29-347:24: `
        .connect(owner)`
$DIR/contracts/test/v0.8/automation/ERC20BalanceMonitor.test.ts:347:24-348:48: `
        .setMinWaitPeriodSeconds(newWaitPeriod)`
$DIR/contracts/test/v0.8/automation/ERC20BalanceMonitor.test.ts:372:30-372:45: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/ERC20BalanceMonitor.test.ts:372:45-375:8: `.transfer(
        bm.address,
        sixLINK, // needs 6 total
      )`
$DIR/contracts/test/v0.8/automation/ERC20BalanceMonitor.test.ts:376:7-376:26: `await fundTx.wait()`
$DIR/contracts/test/v0.8/automation/ERC20BalanceMonitor.test.ts:376:19-376:26: `.wait()`
$DIR/contracts/test/v0.8/automation/ERC20BalanceMonitor.test.ts:377:41-377:59: `.checkUpkeep('0x')`
$DIR/contracts/test/v0.8/automation/ERC20BalanceMonitor.test.ts:379:31-382:8: `.utils.defaultAbiCoder.decode(
        ['address[]'],
        payload,
      )`
$DIR/contracts/test/v0.8/automation/ERC20BalanceMonitor.test.ts:385:7-385:53: `addresses = await bm.getUnderfundedAddresses()`
$DIR/contracts/test/v0.8/automation/ERC20BalanceMonitor.test.ts:385:27-385:53: `.getUnderfundedAddresses()`
$DIR/contracts/test/v0.8/automation/ERC20BalanceMonitor.test.ts:390:30-390:45: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/ERC20BalanceMonitor.test.ts:390:45-393:8: `.transfer(
        bm.address,
        fiveLINK, // needs 6 total
      )`
$DIR/contracts/test/v0.8/automation/ERC20BalanceMonitor.test.ts:394:7-394:26: `await fundTx.wait()`
$DIR/contracts/test/v0.8/automation/ERC20BalanceMonitor.test.ts:394:19-394:26: `.wait()`
$DIR/contracts/test/v0.8/automation/ERC20BalanceMonitor.test.ts:395:41-395:59: `.checkUpkeep('0x')`
$DIR/contracts/test/v0.8/automation/ERC20BalanceMonitor.test.ts:397:33-400:8: `.utils.defaultAbiCoder.decode(
        ['address[]'],
        payload,
      )`
$DIR/contracts/test/v0.8/automation/ERC20BalanceMonitor.test.ts:405:35-405:65: `.setMinWaitPeriodSeconds(3600)`
$DIR/contracts/test/v0.8/automation/ERC20BalanceMonitor.test.ts:406:30-406:45: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/ERC20BalanceMonitor.test.ts:406:45-406:75: `.transfer(bm.address, sixLINK)`
$DIR/contracts/test/v0.8/automation/ERC20BalanceMonitor.test.ts:407:7-407:61: `await Promise.all([setWaitPdTx.wait(), fundTx.wait()])`
$DIR/contracts/test/v0.8/automation/ERC20BalanceMonitor.test.ts:407:20-407:61: `.all([setWaitPdTx.wait(), fundTx.wait()])`
$DIR/contracts/test/v0.8/automation/ERC20BalanceMonitor.test.ts:407:37-407:44: `.wait()`
$DIR/contracts/test/v0.8/automation/ERC20BalanceMonitor.test.ts:407:52-407:59: `.wait()`
$DIR/contracts/test/v0.8/automation/ERC20BalanceMonitor.test.ts:408:33-408:61: `.provider.getBlock('latest')`
$DIR/contracts/test/v0.8/automation/ERC20BalanceMonitor.test.ts:409:34-412:8: `.setLastTopUpXXXTestOnly(
        watchAddress2,
        block.timestamp - 100,
      )`
$DIR/contracts/test/v0.8/automation/ERC20BalanceMonitor.test.ts:413:7-413:30: `await setTopUpTx.wait()`
$DIR/contracts/test/v0.8/automation/ERC20BalanceMonitor.test.ts:413:23-413:30: `.wait()`
$DIR/contracts/test/v0.8/automation/ERC20BalanceMonitor.test.ts:414:41-414:59: `.checkUpkeep('0x')`
$DIR/contracts/test/v0.8/automation/ERC20BalanceMonitor.test.ts:416:33-419:8: `.utils.defaultAbiCoder.decode(
        ['address[]'],
        payload,
      )`
$DIR/contracts/test/v0.8/automation/ERC20BalanceMonitor.test.ts:424:26-424:41: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/ERC20BalanceMonitor.test.ts:424:41-424:49: `.pause()`
$DIR/contracts/test/v0.8/automation/ERC20BalanceMonitor.test.ts:425:7-425:22: `await tx.wait()`
$DIR/contracts/test/v0.8/automation/ERC20BalanceMonitor.test.ts:425:15-425:22: `.wait()`
$DIR/contracts/test/v0.8/automation/ERC20BalanceMonitor.test.ts:426:25-426:43: `.checkUpkeep('0x')`
$DIR/contracts/test/v0.8/automation/ERC20BalanceMonitor.test.ts:460:31-460:46: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/ERC20BalanceMonitor.test.ts:460:46-460:54: `.pause()`
$DIR/contracts/test/v0.8/automation/ERC20BalanceMonitor.test.ts:461:7-461:27: `await pauseTx.wait()`
$DIR/contracts/test/v0.8/automation/ERC20BalanceMonitor.test.ts:461:20-461:27: `.wait()`
$DIR/contracts/test/v0.8/automation/ERC20BalanceMonitor.test.ts:462:27-462:51: `.connect(keeperRegistry)`
$DIR/contracts/test/v0.8/automation/ERC20BalanceMonitor.test.ts:462:51-462:79: `.performUpkeep(validPayload)`
$DIR/contracts/test/v0.8/automation/ERC20BalanceMonitor.test.ts:468:32-468:47: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/ERC20BalanceMonitor.test.ts:468:47-471:10: `.transfer(
          bm.address,
          fiveLINK, // only enough LINK to fund 2 addresses
        )`
$DIR/contracts/test/v0.8/automation/ERC20BalanceMonitor.test.ts:472:9-472:28: `await fundTx.wait()`
$DIR/contracts/test/v0.8/automation/ERC20BalanceMonitor.test.ts:472:21-472:28: `.wait()`
$DIR/contracts/test/v0.8/automation/ERC20BalanceMonitor.test.ts:473:9-480:10: `await assertWatchlistBalances(
          zeroLINK,
          zeroLINK,
          zeroLINK,
          zeroLINK,
          oneHundredLINK,
          oneHundredLINK,
        )`
$DIR/contracts/test/v0.8/automation/ERC20BalanceMonitor.test.ts:481:35-482:35: `
          .connect(keeperRegistry)`
$DIR/contracts/test/v0.8/automation/ERC20BalanceMonitor.test.ts:482:35-483:39: `
          .performUpkeep(validPayload)`
$DIR/contracts/test/v0.8/automation/ERC20BalanceMonitor.test.ts:484:9-491:10: `await assertWatchlistBalances(
          twoLINK,
          twoLINK,
          zeroLINK,
          zeroLINK,
          oneHundredLINK,
          oneHundredLINK,
        )`
$DIR/contracts/test/v0.8/automation/ERC20BalanceMonitor.test.ts:508:9-515:10: `await assertWatchlistBalances(
          zeroLINK,
          zeroLINK,
          zeroLINK,
          zeroLINK,
          oneHundredLINK,
          oneHundredLINK,
        )`
$DIR/contracts/test/v0.8/automation/ERC20BalanceMonitor.test.ts:516:35-517:35: `
          .connect(keeperRegistry)`
$DIR/contracts/test/v0.8/automation/ERC20BalanceMonitor.test.ts:517:35-518:64: `
          .performUpkeep(validPayload, { gasLimit: 2_500_000 })`
$DIR/contracts/test/v0.8/automation/ERC20BalanceMonitor.test.ts:519:9-519:31: `await performTx.wait()`
$DIR/contracts/test/v0.8/automation/ERC20BalanceMonitor.test.ts:519:24-519:31: `.wait()`
$DIR/contracts/test/v0.8/automation/ERC20BalanceMonitor.test.ts:520:9-527:10: `await assertWatchlistBalances(
          twoLINK,
          twoLINK,
          twoLINK,
          zeroLINK,
          oneHundredLINK,
          oneHundredLINK,
        )`
$DIR/contracts/test/v0.8/automation/ERC20BalanceMonitor.test.ts:531:9-538:10: `await assertWatchlistBalances(
          zeroLINK,
          zeroLINK,
          zeroLINK,
          zeroLINK,
          oneHundredLINK,
          oneHundredLINK,
        )`
$DIR/contracts/test/v0.8/automation/ERC20BalanceMonitor.test.ts:539:35-540:35: `
          .connect(keeperRegistry)`
$DIR/contracts/test/v0.8/automation/ERC20BalanceMonitor.test.ts:540:35-541:66: `
          .performUpkeep(invalidPayload, { gasLimit: 2_500_000 })`
$DIR/contracts/test/v0.8/automation/ERC20BalanceMonitor.test.ts:542:9-542:31: `await performTx.wait()`
$DIR/contracts/test/v0.8/automation/ERC20BalanceMonitor.test.ts:542:24-542:31: `.wait()`
$DIR/contracts/test/v0.8/automation/ERC20BalanceMonitor.test.ts:543:9-550:10: `await assertWatchlistBalances(
          twoLINK,
          twoLINK,
          zeroLINK,
          zeroLINK,
          oneHundredLINK,
          oneHundredLINK,
        )`
$DIR/contracts/test/v0.8/automation/ERC20BalanceMonitor.test.ts:554:37-554:67: `.setMinWaitPeriodSeconds(3600)`
$DIR/contracts/test/v0.8/automation/ERC20BalanceMonitor.test.ts:555:9-555:33: `await setWaitPdTx.wait()`
$DIR/contracts/test/v0.8/automation/ERC20BalanceMonitor.test.ts:555:26-555:33: `.wait()`
$DIR/contracts/test/v0.8/automation/ERC20BalanceMonitor.test.ts:556:35-556:63: `.provider.getBlock('latest')`
$DIR/contracts/test/v0.8/automation/ERC20BalanceMonitor.test.ts:557:36-560:10: `.setLastTopUpXXXTestOnly(
          watchAddress2,
          block.timestamp - 100,
        )`
$DIR/contracts/test/v0.8/automation/ERC20BalanceMonitor.test.ts:561:9-561:32: `await setTopUpTx.wait()`
$DIR/contracts/test/v0.8/automation/ERC20BalanceMonitor.test.ts:561:25-561:32: `.wait()`
$DIR/contracts/test/v0.8/automation/ERC20BalanceMonitor.test.ts:562:9-569:10: `await assertWatchlistBalances(
          zeroLINK,
          zeroLINK,
          zeroLINK,
          zeroLINK,
          oneHundredLINK,
          oneHundredLINK,
        )`
$DIR/contracts/test/v0.8/automation/ERC20BalanceMonitor.test.ts:570:35-571:35: `
          .connect(keeperRegistry)`
$DIR/contracts/test/v0.8/automation/ERC20BalanceMonitor.test.ts:571:35-572:64: `
          .performUpkeep(validPayload, { gasLimit: 2_500_000 })`
$DIR/contracts/test/v0.8/automation/ERC20BalanceMonitor.test.ts:573:9-573:31: `await performTx.wait()`
$DIR/contracts/test/v0.8/automation/ERC20BalanceMonitor.test.ts:573:24-573:31: `.wait()`
$DIR/contracts/test/v0.8/automation/ERC20BalanceMonitor.test.ts:574:9-581:10: `await assertWatchlistBalances(
          twoLINK,
          zeroLINK,
          twoLINK,
          zeroLINK,
          oneHundredLINK,
          oneHundredLINK,
        )`
$DIR/contracts/test/v0.8/automation/ERC20BalanceMonitor.test.ts:585:27-585:42: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/ERC20BalanceMonitor.test.ts:585:42-585:70: `.performUpkeep(validPayload)`
$DIR/contracts/test/v0.8/automation/ERC20BalanceMonitor.test.ts:587:9-587:69: `performTx = bm.connect(stranger).performUpkeep(validPayload)`
$DIR/contracts/test/v0.8/automation/ERC20BalanceMonitor.test.ts:587:23-587:41: `.connect(stranger)`
$DIR/contracts/test/v0.8/automation/ERC20BalanceMonitor.test.ts:587:41-587:69: `.performUpkeep(validPayload)`
$DIR/contracts/test/v0.8/automation/ERC20BalanceMonitor.test.ts:592:9-599:10: `await assertWatchlistBalances(
          zeroLINK,
          zeroLINK,
          zeroLINK,
          zeroLINK,
          oneHundredLINK,
          oneHundredLINK,
        )`
$DIR/contracts/test/v0.8/automation/ERC20BalanceMonitor.test.ts:600:35-601:35: `
          .connect(keeperRegistry)`
$DIR/contracts/test/v0.8/automation/ERC20BalanceMonitor.test.ts:601:35-602:62: `
          .performUpkeep(validPayload, { gasLimit: 130_000 })`
$DIR/contracts/test/v0.8/automation/ERC20BalanceMonitor.test.ts:603:9-603:31: `await performTx.wait()`
$DIR/contracts/test/v0.8/automation/ERC20BalanceMonitor.test.ts:603:24-603:31: `.wait()`
$DIR/contracts/test/v0.8/automation/ERC20BalanceMonitor.test.ts:604:34-604:59: `.balanceOf(watchAddress1)`
$DIR/contracts/test/v0.8/automation/ERC20BalanceMonitor.test.ts:605:34-605:59: `.balanceOf(watchAddress2)`
$DIR/contracts/test/v0.8/automation/ERC20BalanceMonitor.test.ts:606:34-606:59: `.balanceOf(watchAddress3)`
$DIR/contracts/test/v0.8/automation/ERC20BalanceMonitor.test.ts:607:56-607:81: `.map((n) => n.toString())`
$DIR/contracts/test/v0.8/automation/ERC20BalanceMonitor.test.ts:618:31-621:10: `.utils.defaultAbiCoder.encode(
          ['address[]'],
          [addresses],
        )`
$DIR/contracts/test/v0.8/automation/ERC20BalanceMonitor.test.ts:622:31-623:26: `
          .connect(owner)`
$DIR/contracts/test/v0.8/automation/ERC20BalanceMonitor.test.ts:623:26-628:12: `
          .setWatchList(
            addresses,
            new Array(2).fill(oneLINK),
            new Array(2).fill(twoLINK),
          )`
$DIR/contracts/test/v0.8/automation/ERC20BalanceMonitor.test.ts:626:25-626:39: `.fill(oneLINK)`
$DIR/contracts/test/v0.8/automation/ERC20BalanceMonitor.test.ts:627:25-627:39: `.fill(twoLINK)`
$DIR/contracts/test/v0.8/automation/ERC20BalanceMonitor.test.ts:629:9-629:27: `await setTx.wait()`
$DIR/contracts/test/v0.8/automation/ERC20BalanceMonitor.test.ts:629:20-629:27: `.wait()`
$DIR/contracts/test/v0.8/automation/ERC20BalanceMonitor.test.ts:631:41-631:75: `.balanceOf(receiveEmitter.address)`
$DIR/contracts/test/v0.8/automation/ERC20BalanceMonitor.test.ts:632:42-634:10: `.balanceOf(
          receiveFallbackEmitter.address,
        )`
$DIR/contracts/test/v0.8/automation/ERC20BalanceMonitor.test.ts:635:35-636:35: `
          .connect(keeperRegistry)`
$DIR/contracts/test/v0.8/automation/ERC20BalanceMonitor.test.ts:636:35-637:59: `
          .performUpkeep(payload, { gasLimit: 2_500_000 })`
$DIR/contracts/test/v0.8/automation/ERC20BalanceMonitor.test.ts:638:9-642:10: `await h.assertLinkTokenBalance(
          lt,
          receiveEmitter.address,
          reBalanceBefore.add(twoLINK),
        )`
$DIR/contracts/test/v0.8/automation/ERC20BalanceMonitor.test.ts:638:16-642:10: `.assertLinkTokenBalance(
          lt,
          receiveEmitter.address,
          reBalanceBefore.add(twoLINK),
        )`
$DIR/contracts/test/v0.8/automation/ERC20BalanceMonitor.test.ts:641:26-641:39: `.add(twoLINK)`
$DIR/contracts/test/v0.8/automation/ERC20BalanceMonitor.test.ts:643:9-647:10: `await h.assertLinkTokenBalance(
          lt,
          receiveFallbackEmitter.address,
          rfeBalanceBefore.add(twoLINK),
        )`
$DIR/contracts/test/v0.8/automation/ERC20BalanceMonitor.test.ts:643:16-647:10: `.assertLinkTokenBalance(
          lt,
          receiveFallbackEmitter.address,
          rfeBalanceBefore.add(twoLINK),
        )`
$DIR/contracts/test/v0.8/automation/ERC20BalanceMonitor.test.ts:646:27-646:40: `.add(twoLINK)`
$DIR/contracts/test/v0.8/automation/ERC20BalanceMonitor.test.ts:665:11-665:43: `await bm.connect(user).topUp([])`
$DIR/contracts/test/v0.8/automation/ERC20BalanceMonitor.test.ts:665:19-665:33: `.connect(user)`
$DIR/contracts/test/v0.8/automation/ERC20BalanceMonitor.test.ts:665:33-665:43: `.topUp([])`
$DIR/contracts/test/v0.8/automation/ERC20BalanceMonitor.test.ts:671:9-671:40: `await bm.connect(owner).pause()`
$DIR/contracts/test/v0.8/automation/ERC20BalanceMonitor.test.ts:671:17-671:32: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/ERC20BalanceMonitor.test.ts:671:32-671:40: `.pause()`
$DIR/contracts/test/v0.8/automation/ERC20BalanceMonitor.test.ts:675:24-675:38: `.connect(user)`
$DIR/contracts/test/v0.8/automation/ERC20BalanceMonitor.test.ts:675:38-675:48: `.topUp([])`
$DIR/contracts/test/v0.8/automation/EthBalanceMonitor.test.ts:94:7-97:9: `await owner.sendTransaction({
        to: bm.address,
        value: oneEth,
      })`
$DIR/contracts/test/v0.8/automation/EthBalanceMonitor.test.ts:94:18-97:9: `.sendTransaction({
        to: bm.address,
        value: oneEth,
      })`
$DIR/contracts/test/v0.8/automation/EthBalanceMonitor.test.ts:98:7-101:9: `await stranger.sendTransaction({
        to: bm.address,
        value: oneEth,
      })`
$DIR/contracts/test/v0.8/automation/EthBalanceMonitor.test.ts:98:21-101:9: `.sendTransaction({
        to: bm.address,
        value: oneEth,
      })`
$DIR/contracts/test/v0.8/automation/EthBalanceMonitor.test.ts:105:7-108:9: `await owner.sendTransaction({
        to: bm.address,
        value: oneEth,
      })`
$DIR/contracts/test/v0.8/automation/EthBalanceMonitor.test.ts:105:18-108:9: `.sendTransaction({
        to: bm.address,
        value: oneEth,
      })`
$DIR/contracts/test/v0.8/automation/EthBalanceMonitor.test.ts:109:26-112:9: `.sendTransaction({
        to: bm.address,
        value: oneEth,
      })`
$DIR/contracts/test/v0.8/automation/EthBalanceMonitor.test.ts:129:40-129:53: `.getBalance()`
$DIR/contracts/test/v0.8/automation/EthBalanceMonitor.test.ts:130:26-130:41: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/EthBalanceMonitor.test.ts:130:41-130:73: `.withdraw(oneEth, owner.address)`
$DIR/contracts/test/v0.8/automation/EthBalanceMonitor.test.ts:131:7-131:22: `await tx.wait()`
$DIR/contracts/test/v0.8/automation/EthBalanceMonitor.test.ts:131:15-131:22: `.wait()`
$DIR/contracts/test/v0.8/automation/EthBalanceMonitor.test.ts:132:39-132:52: `.getBalance()`
$DIR/contracts/test/v0.8/automation/EthBalanceMonitor.test.ts:134:21-134:39: `.gt(beforeBalance)`
$DIR/contracts/test/v0.8/automation/EthBalanceMonitor.test.ts:140:26-140:41: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/EthBalanceMonitor.test.ts:140:41-140:73: `.withdraw(oneEth, owner.address)`
$DIR/contracts/test/v0.8/automation/EthBalanceMonitor.test.ts:147:43-147:56: `.getBalance()`
$DIR/contracts/test/v0.8/automation/EthBalanceMonitor.test.ts:148:26-148:41: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/EthBalanceMonitor.test.ts:148:41-148:76: `.withdraw(oneEth, stranger.address)`
$DIR/contracts/test/v0.8/automation/EthBalanceMonitor.test.ts:149:7-149:22: `await tx.wait()`
$DIR/contracts/test/v0.8/automation/EthBalanceMonitor.test.ts:149:15-149:22: `.wait()`
$DIR/contracts/test/v0.8/automation/EthBalanceMonitor.test.ts:150:42-150:55: `.getBalance()`
$DIR/contracts/test/v0.8/automation/EthBalanceMonitor.test.ts:152:22-152:34: `.add(oneEth)`
$DIR/contracts/test/v0.8/automation/EthBalanceMonitor.test.ts:152:34-152:51: `.eq(afterBalance)`
$DIR/contracts/test/v0.8/automation/EthBalanceMonitor.test.ts:158:20-158:38: `.connect(stranger)`
$DIR/contracts/test/v0.8/automation/EthBalanceMonitor.test.ts:158:38-158:70: `.withdraw(oneEth, owner.address)`
$DIR/contracts/test/v0.8/automation/EthBalanceMonitor.test.ts:165:31-165:46: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/EthBalanceMonitor.test.ts:165:46-165:54: `.pause()`
$DIR/contracts/test/v0.8/automation/EthBalanceMonitor.test.ts:166:7-166:27: `await pauseTx.wait()`
$DIR/contracts/test/v0.8/automation/EthBalanceMonitor.test.ts:166:20-166:27: `.wait()`
$DIR/contracts/test/v0.8/automation/EthBalanceMonitor.test.ts:167:33-167:48: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/EthBalanceMonitor.test.ts:167:48-167:58: `.unpause()`
$DIR/contracts/test/v0.8/automation/EthBalanceMonitor.test.ts:168:7-168:29: `await unpauseTx.wait()`
$DIR/contracts/test/v0.8/automation/EthBalanceMonitor.test.ts:168:22-168:29: `.wait()`
$DIR/contracts/test/v0.8/automation/EthBalanceMonitor.test.ts:172:33-172:51: `.connect(stranger)`
$DIR/contracts/test/v0.8/automation/EthBalanceMonitor.test.ts:172:51-172:59: `.pause()`
$DIR/contracts/test/v0.8/automation/EthBalanceMonitor.test.ts:174:36-174:51: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/EthBalanceMonitor.test.ts:174:51-174:59: `.pause()`
$DIR/contracts/test/v0.8/automation/EthBalanceMonitor.test.ts:175:7-175:32: `await pauseTxOwner.wait()`
$DIR/contracts/test/v0.8/automation/EthBalanceMonitor.test.ts:175:25-175:32: `.wait()`
$DIR/contracts/test/v0.8/automation/EthBalanceMonitor.test.ts:176:35-176:53: `.connect(stranger)`
$DIR/contracts/test/v0.8/automation/EthBalanceMonitor.test.ts:176:53-176:63: `.unpause()`
$DIR/contracts/test/v0.8/automation/EthBalanceMonitor.test.ts:184:31-184:61: `.getAccountInfo(watchAddress1)`
$DIR/contracts/test/v0.8/automation/EthBalanceMonitor.test.ts:186:27-187:24: `
        .connect(owner)`
$DIR/contracts/test/v0.8/automation/EthBalanceMonitor.test.ts:187:24-188:59: `
        .setWatchList([watchAddress1], [oneEth], [twoEth])`
$DIR/contracts/test/v0.8/automation/EthBalanceMonitor.test.ts:189:7-189:25: `await setTx.wait()`
$DIR/contracts/test/v0.8/automation/EthBalanceMonitor.test.ts:189:18-189:25: `.wait()`
$DIR/contracts/test/v0.8/automation/EthBalanceMonitor.test.ts:190:31-190:46: `.getWatchList()`
$DIR/contracts/test/v0.8/automation/EthBalanceMonitor.test.ts:192:35-192:65: `.getAccountInfo(watchAddress1)`
$DIR/contracts/test/v0.8/automation/EthBalanceMonitor.test.ts:197:7-203:10: `setTx = await bm
        .connect(owner)
        .setWatchList(
          [watchAddress1, watchAddress2, watchAddress3],
          [oneEth, twoEth, threeEth],
          [oneEth, twoEth, threeEth],
        )`
$DIR/contracts/test/v0.8/automation/EthBalanceMonitor.test.ts:197:23-198:24: `
        .connect(owner)`
$DIR/contracts/test/v0.8/automation/EthBalanceMonitor.test.ts:198:24-203:10: `
        .setWatchList(
          [watchAddress1, watchAddress2, watchAddress3],
          [oneEth, twoEth, threeEth],
          [oneEth, twoEth, threeEth],
        )`
$DIR/contracts/test/v0.8/automation/EthBalanceMonitor.test.ts:204:7-204:25: `await setTx.wait()`
$DIR/contracts/test/v0.8/automation/EthBalanceMonitor.test.ts:204:18-204:25: `.wait()`
$DIR/contracts/test/v0.8/automation/EthBalanceMonitor.test.ts:205:7-205:42: `watchList = await bm.getWatchList()`
$DIR/contracts/test/v0.8/automation/EthBalanceMonitor.test.ts:205:27-205:42: `.getWatchList()`
$DIR/contracts/test/v0.8/automation/EthBalanceMonitor.test.ts:207:34-207:64: `.getAccountInfo(watchAddress1)`
$DIR/contracts/test/v0.8/automation/EthBalanceMonitor.test.ts:208:34-208:64: `.getAccountInfo(watchAddress2)`
$DIR/contracts/test/v0.8/automation/EthBalanceMonitor.test.ts:209:34-209:64: `.getAccountInfo(watchAddress3)`
$DIR/contracts/test/v0.8/automation/EthBalanceMonitor.test.ts:220:7-226:10: `setTx = await bm
        .connect(owner)
        .setWatchList(
          [watchAddress3, watchAddress1],
          [threeEth, oneEth],
          [threeEth, oneEth],
        )`
$DIR/contracts/test/v0.8/automation/EthBalanceMonitor.test.ts:220:23-221:24: `
        .connect(owner)`
$DIR/contracts/test/v0.8/automation/EthBalanceMonitor.test.ts:221:24-226:10: `
        .setWatchList(
          [watchAddress3, watchAddress1],
          [threeEth, oneEth],
          [threeEth, oneEth],
        )`
$DIR/contracts/test/v0.8/automation/EthBalanceMonitor.test.ts:227:7-227:25: `await setTx.wait()`
$DIR/contracts/test/v0.8/automation/EthBalanceMonitor.test.ts:227:18-227:25: `.wait()`
$DIR/contracts/test/v0.8/automation/EthBalanceMonitor.test.ts:228:7-228:42: `watchList = await bm.getWatchList()`
$DIR/contracts/test/v0.8/automation/EthBalanceMonitor.test.ts:228:27-228:42: `.getWatchList()`
$DIR/contracts/test/v0.8/automation/EthBalanceMonitor.test.ts:230:7-230:60: `accountInfo1 = await bm.getAccountInfo(watchAddress1)`
$DIR/contracts/test/v0.8/automation/EthBalanceMonitor.test.ts:230:30-230:60: `.getAccountInfo(watchAddress1)`
$DIR/contracts/test/v0.8/automation/EthBalanceMonitor.test.ts:231:7-231:60: `accountInfo2 = await bm.getAccountInfo(watchAddress2)`
$DIR/contracts/test/v0.8/automation/EthBalanceMonitor.test.ts:231:30-231:60: `.getAccountInfo(watchAddress2)`
$DIR/contracts/test/v0.8/automation/EthBalanceMonitor.test.ts:232:7-232:60: `accountInfo3 = await bm.getAccountInfo(watchAddress3)`
$DIR/contracts/test/v0.8/automation/EthBalanceMonitor.test.ts:232:30-232:60: `.getAccountInfo(watchAddress3)`
$DIR/contracts/test/v0.8/automation/EthBalanceMonitor.test.ts:240:23-241:24: `
        .connect(owner)`
$DIR/contracts/test/v0.8/automation/EthBalanceMonitor.test.ts:241:24-246:10: `
        .setWatchList(
          [watchAddress1, watchAddress2, watchAddress1],
          [oneEth, twoEth, threeEth],
          [oneEth, twoEth, threeEth],
        )`
$DIR/contracts/test/v0.8/automation/EthBalanceMonitor.test.ts:251:31-252:27: `
        .connect(stranger)`
$DIR/contracts/test/v0.8/automation/EthBalanceMonitor.test.ts:252:27-253:59: `
        .setWatchList([watchAddress1], [oneEth], [twoEth])`
$DIR/contracts/test/v0.8/automation/EthBalanceMonitor.test.ts:258:18-258:33: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/EthBalanceMonitor.test.ts:258:33-258:77: `.setWatchList([watchAddress1], [], [twoEth])`
$DIR/contracts/test/v0.8/automation/EthBalanceMonitor.test.ts:260:7-260:73: `tx = bm.connect(owner).setWatchList([watchAddress1], [oneEth], [])`
$DIR/contracts/test/v0.8/automation/EthBalanceMonitor.test.ts:260:14-260:29: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/EthBalanceMonitor.test.ts:260:29-260:73: `.setWatchList([watchAddress1], [oneEth], [])`
$DIR/contracts/test/v0.8/automation/EthBalanceMonitor.test.ts:262:7-262:66: `tx = bm.connect(owner).setWatchList([], [oneEth], [twoEth])`
$DIR/contracts/test/v0.8/automation/EthBalanceMonitor.test.ts:262:14-262:29: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/EthBalanceMonitor.test.ts:262:29-262:66: `.setWatchList([], [oneEth], [twoEth])`
$DIR/contracts/test/v0.8/automation/EthBalanceMonitor.test.ts:267:18-268:24: `
        .connect(owner)`
$DIR/contracts/test/v0.8/automation/EthBalanceMonitor.test.ts:268:24-273:10: `
        .setWatchList(
          [watchAddress1, ethers.constants.AddressZero],
          [oneEth, oneEth],
          [twoEth, twoEth],
        )`
$DIR/contracts/test/v0.8/automation/EthBalanceMonitor.test.ts:278:20-279:24: `
        .connect(owner)`
$DIR/contracts/test/v0.8/automation/EthBalanceMonitor.test.ts:279:24-284:10: `
        .setWatchList(
          [watchAddress1, watchAddress2],
          [oneEth, oneEth],
          [twoEth, zeroEth],
        )`
$DIR/contracts/test/v0.8/automation/EthBalanceMonitor.test.ts:293:31-293:58: `.getKeeperRegistryAddress()`
$DIR/contracts/test/v0.8/automation/EthBalanceMonitor.test.ts:298:29-298:44: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/EthBalanceMonitor.test.ts:298:44-298:81: `.setKeeperRegistryAddress(newAddress)`
$DIR/contracts/test/v0.8/automation/EthBalanceMonitor.test.ts:299:7-299:25: `await setTx.wait()`
$DIR/contracts/test/v0.8/automation/EthBalanceMonitor.test.ts:299:18-299:25: `.wait()`
$DIR/contracts/test/v0.8/automation/EthBalanceMonitor.test.ts:300:31-300:58: `.getKeeperRegistryAddress()`
$DIR/contracts/test/v0.8/automation/EthBalanceMonitor.test.ts:305:23-305:41: `.connect(stranger)`
$DIR/contracts/test/v0.8/automation/EthBalanceMonitor.test.ts:305:41-305:78: `.setKeeperRegistryAddress(newAddress)`
$DIR/contracts/test/v0.8/automation/EthBalanceMonitor.test.ts:310:29-310:44: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/EthBalanceMonitor.test.ts:310:44-310:81: `.setKeeperRegistryAddress(newAddress)`
$DIR/contracts/test/v0.8/automation/EthBalanceMonitor.test.ts:321:37-321:63: `.getMinWaitPeriodSeconds()`
$DIR/contracts/test/v0.8/automation/EthBalanceMonitor.test.ts:326:29-327:24: `
        .connect(owner)`
$DIR/contracts/test/v0.8/automation/EthBalanceMonitor.test.ts:327:24-328:48: `
        .setMinWaitPeriodSeconds(newWaitPeriod)`
$DIR/contracts/test/v0.8/automation/EthBalanceMonitor.test.ts:329:7-329:25: `await setTx.wait()`
$DIR/contracts/test/v0.8/automation/EthBalanceMonitor.test.ts:329:18-329:25: `.wait()`
$DIR/contracts/test/v0.8/automation/EthBalanceMonitor.test.ts:330:37-330:63: `.getMinWaitPeriodSeconds()`
$DIR/contracts/test/v0.8/automation/EthBalanceMonitor.test.ts:335:23-335:41: `.connect(stranger)`
$DIR/contracts/test/v0.8/automation/EthBalanceMonitor.test.ts:335:41-335:80: `.setMinWaitPeriodSeconds(newWaitPeriod)`
$DIR/contracts/test/v0.8/automation/EthBalanceMonitor.test.ts:340:29-341:24: `
        .connect(owner)`
$DIR/contracts/test/v0.8/automation/EthBalanceMonitor.test.ts:341:24-342:48: `
        .setMinWaitPeriodSeconds(newWaitPeriod)`
$DIR/contracts/test/v0.8/automation/EthBalanceMonitor.test.ts:366:33-369:9: `.sendTransaction({
        to: bm.address,
        value: sixEth, // needs 6 total
      })`
$DIR/contracts/test/v0.8/automation/EthBalanceMonitor.test.ts:370:7-370:26: `await fundTx.wait()`
$DIR/contracts/test/v0.8/automation/EthBalanceMonitor.test.ts:370:19-370:26: `.wait()`
$DIR/contracts/test/v0.8/automation/EthBalanceMonitor.test.ts:371:41-371:59: `.checkUpkeep('0x')`
$DIR/contracts/test/v0.8/automation/EthBalanceMonitor.test.ts:373:31-376:8: `.utils.defaultAbiCoder.decode(
        ['address[]'],
        payload,
      )`
$DIR/contracts/test/v0.8/automation/EthBalanceMonitor.test.ts:379:7-379:53: `addresses = await bm.getUnderfundedAddresses()`
$DIR/contracts/test/v0.8/automation/EthBalanceMonitor.test.ts:379:27-379:53: `.getUnderfundedAddresses()`
$DIR/contracts/test/v0.8/automation/EthBalanceMonitor.test.ts:384:33-387:9: `.sendTransaction({
        to: bm.address,
        value: fiveEth, // needs 6 total
      })`
$DIR/contracts/test/v0.8/automation/EthBalanceMonitor.test.ts:388:7-388:26: `await fundTx.wait()`
$DIR/contracts/test/v0.8/automation/EthBalanceMonitor.test.ts:388:19-388:26: `.wait()`
$DIR/contracts/test/v0.8/automation/EthBalanceMonitor.test.ts:389:41-389:59: `.checkUpkeep('0x')`
$DIR/contracts/test/v0.8/automation/EthBalanceMonitor.test.ts:391:33-394:8: `.utils.defaultAbiCoder.decode(
        ['address[]'],
        payload,
      )`
$DIR/contracts/test/v0.8/automation/EthBalanceMonitor.test.ts:399:35-399:65: `.setMinWaitPeriodSeconds(3600)`
$DIR/contracts/test/v0.8/automation/EthBalanceMonitor.test.ts:400:33-403:9: `.sendTransaction({
        to: bm.address,
        value: sixEth,
      })`
$DIR/contracts/test/v0.8/automation/EthBalanceMonitor.test.ts:404:7-404:61: `await Promise.all([setWaitPdTx.wait(), fundTx.wait()])`
$DIR/contracts/test/v0.8/automation/EthBalanceMonitor.test.ts:404:20-404:61: `.all([setWaitPdTx.wait(), fundTx.wait()])`
$DIR/contracts/test/v0.8/automation/EthBalanceMonitor.test.ts:404:37-404:44: `.wait()`
$DIR/contracts/test/v0.8/automation/EthBalanceMonitor.test.ts:404:52-404:59: `.wait()`
$DIR/contracts/test/v0.8/automation/EthBalanceMonitor.test.ts:405:33-405:61: `.provider.getBlock('latest')`
$DIR/contracts/test/v0.8/automation/EthBalanceMonitor.test.ts:406:34-409:8: `.setLastTopUpXXXTestOnly(
        watchAddress2,
        block.timestamp - 100,
      )`
$DIR/contracts/test/v0.8/automation/EthBalanceMonitor.test.ts:410:7-410:30: `await setTopUpTx.wait()`
$DIR/contracts/test/v0.8/automation/EthBalanceMonitor.test.ts:410:23-410:30: `.wait()`
$DIR/contracts/test/v0.8/automation/EthBalanceMonitor.test.ts:411:41-411:59: `.checkUpkeep('0x')`
$DIR/contracts/test/v0.8/automation/EthBalanceMonitor.test.ts:413:33-416:8: `.utils.defaultAbiCoder.decode(
        ['address[]'],
        payload,
      )`
$DIR/contracts/test/v0.8/automation/EthBalanceMonitor.test.ts:421:26-421:41: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/EthBalanceMonitor.test.ts:421:41-421:49: `.pause()`
$DIR/contracts/test/v0.8/automation/EthBalanceMonitor.test.ts:422:7-422:22: `await tx.wait()`
$DIR/contracts/test/v0.8/automation/EthBalanceMonitor.test.ts:422:15-422:22: `.wait()`
$DIR/contracts/test/v0.8/automation/EthBalanceMonitor.test.ts:423:25-423:43: `.checkUpkeep('0x')`
$DIR/contracts/test/v0.8/automation/EthBalanceMonitor.test.ts:457:31-457:46: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/EthBalanceMonitor.test.ts:457:46-457:54: `.pause()`
$DIR/contracts/test/v0.8/automation/EthBalanceMonitor.test.ts:458:7-458:27: `await pauseTx.wait()`
$DIR/contracts/test/v0.8/automation/EthBalanceMonitor.test.ts:458:20-458:27: `.wait()`
$DIR/contracts/test/v0.8/automation/EthBalanceMonitor.test.ts:459:27-459:51: `.connect(keeperRegistry)`
$DIR/contracts/test/v0.8/automation/EthBalanceMonitor.test.ts:459:51-459:79: `.performUpkeep(validPayload)`
$DIR/contracts/test/v0.8/automation/EthBalanceMonitor.test.ts:465:35-468:11: `.sendTransaction({
          to: bm.address,
          value: fiveEth, // only enough eth to fund 2 addresses
        })`
$DIR/contracts/test/v0.8/automation/EthBalanceMonitor.test.ts:469:9-469:28: `await fundTx.wait()`
$DIR/contracts/test/v0.8/automation/EthBalanceMonitor.test.ts:469:21-469:28: `.wait()`
$DIR/contracts/test/v0.8/automation/EthBalanceMonitor.test.ts:470:9-470:66: `await assertWatchlistBalances(0, 0, 0, 0, 10_000, 10_000)`
$DIR/contracts/test/v0.8/automation/EthBalanceMonitor.test.ts:471:35-472:35: `
          .connect(keeperRegistry)`
$DIR/contracts/test/v0.8/automation/EthBalanceMonitor.test.ts:472:35-473:39: `
          .performUpkeep(validPayload)`
$DIR/contracts/test/v0.8/automation/EthBalanceMonitor.test.ts:474:9-474:66: `await assertWatchlistBalances(2, 2, 0, 0, 10_000, 10_000)`
$DIR/contracts/test/v0.8/automation/EthBalanceMonitor.test.ts:494:9-494:66: `await assertWatchlistBalances(0, 0, 0, 0, 10_000, 10_000)`
$DIR/contracts/test/v0.8/automation/EthBalanceMonitor.test.ts:495:35-496:35: `
          .connect(keeperRegistry)`
$DIR/contracts/test/v0.8/automation/EthBalanceMonitor.test.ts:496:35-497:64: `
          .performUpkeep(validPayload, { gasLimit: 2_500_000 })`
$DIR/contracts/test/v0.8/automation/EthBalanceMonitor.test.ts:498:9-498:31: `await performTx.wait()`
$DIR/contracts/test/v0.8/automation/EthBalanceMonitor.test.ts:498:24-498:31: `.wait()`
$DIR/contracts/test/v0.8/automation/EthBalanceMonitor.test.ts:499:9-499:66: `await assertWatchlistBalances(2, 2, 2, 0, 10_000, 10_000)`
$DIR/contracts/test/v0.8/automation/EthBalanceMonitor.test.ts:503:9-503:66: `await assertWatchlistBalances(0, 0, 0, 0, 10_000, 10_000)`
$DIR/contracts/test/v0.8/automation/EthBalanceMonitor.test.ts:504:35-505:35: `
          .connect(keeperRegistry)`
$DIR/contracts/test/v0.8/automation/EthBalanceMonitor.test.ts:505:35-506:66: `
          .performUpkeep(invalidPayload, { gasLimit: 2_500_000 })`
$DIR/contracts/test/v0.8/automation/EthBalanceMonitor.test.ts:507:9-507:31: `await performTx.wait()`
$DIR/contracts/test/v0.8/automation/EthBalanceMonitor.test.ts:507:24-507:31: `.wait()`
$DIR/contracts/test/v0.8/automation/EthBalanceMonitor.test.ts:508:9-508:66: `await assertWatchlistBalances(2, 2, 0, 0, 10_000, 10_000)`
$DIR/contracts/test/v0.8/automation/EthBalanceMonitor.test.ts:512:9-512:66: `await assertWatchlistBalances(0, 0, 0, 0, 10_000, 10_000)`
$DIR/contracts/test/v0.8/automation/EthBalanceMonitor.test.ts:518:31-519:26: `
          .connect(owner)`
$DIR/contracts/test/v0.8/automation/EthBalanceMonitor.test.ts:519:26-524:12: `
          .setWatchList(
            addresses,
            new Array(3).fill(oneEth),
            new Array(3).fill(twoEth),
          )`
$DIR/contracts/test/v0.8/automation/EthBalanceMonitor.test.ts:522:25-522:38: `.fill(oneEth)`
$DIR/contracts/test/v0.8/automation/EthBalanceMonitor.test.ts:523:25-523:38: `.fill(twoEth)`
$DIR/contracts/test/v0.8/automation/EthBalanceMonitor.test.ts:525:9-525:27: `await setTx.wait()`
$DIR/contracts/test/v0.8/automation/EthBalanceMonitor.test.ts:525:20-525:27: `.wait()`
$DIR/contracts/test/v0.8/automation/EthBalanceMonitor.test.ts:526:31-529:10: `.utils.defaultAbiCoder.encode(
          ['address[]'],
          [addresses],
        )`
$DIR/contracts/test/v0.8/automation/EthBalanceMonitor.test.ts:530:35-531:35: `
          .connect(keeperRegistry)`
$DIR/contracts/test/v0.8/automation/EthBalanceMonitor.test.ts:531:35-532:59: `
          .performUpkeep(payload, { gasLimit: 2_500_000 })`
$DIR/contracts/test/v0.8/automation/EthBalanceMonitor.test.ts:533:9-533:31: `await performTx.wait()`
$DIR/contracts/test/v0.8/automation/EthBalanceMonitor.test.ts:533:24-533:31: `.wait()`
$DIR/contracts/test/v0.8/automation/EthBalanceMonitor.test.ts:534:9-534:66: `await assertWatchlistBalances(2, 2, 0, 0, 10_000, 10_000)`
$DIR/contracts/test/v0.8/automation/EthBalanceMonitor.test.ts:535:9-535:58: `await h.assertBalance(receiveReverter.address, 0)`
$DIR/contracts/test/v0.8/automation/EthBalanceMonitor.test.ts:535:16-535:58: `.assertBalance(receiveReverter.address, 0)`
$DIR/contracts/test/v0.8/automation/EthBalanceMonitor.test.ts:548:37-548:67: `.setMinWaitPeriodSeconds(3600)`
$DIR/contracts/test/v0.8/automation/EthBalanceMonitor.test.ts:549:9-549:33: `await setWaitPdTx.wait()`
$DIR/contracts/test/v0.8/automation/EthBalanceMonitor.test.ts:549:26-549:33: `.wait()`
$DIR/contracts/test/v0.8/automation/EthBalanceMonitor.test.ts:550:35-550:63: `.provider.getBlock('latest')`
$DIR/contracts/test/v0.8/automation/EthBalanceMonitor.test.ts:551:36-554:10: `.setLastTopUpXXXTestOnly(
          watchAddress2,
          block.timestamp - 100,
        )`
$DIR/contracts/test/v0.8/automation/EthBalanceMonitor.test.ts:555:9-555:32: `await setTopUpTx.wait()`
$DIR/contracts/test/v0.8/automation/EthBalanceMonitor.test.ts:555:25-555:32: `.wait()`
$DIR/contracts/test/v0.8/automation/EthBalanceMonitor.test.ts:556:9-556:66: `await assertWatchlistBalances(0, 0, 0, 0, 10_000, 10_000)`
$DIR/contracts/test/v0.8/automation/EthBalanceMonitor.test.ts:557:35-558:35: `
          .connect(keeperRegistry)`
$DIR/contracts/test/v0.8/automation/EthBalanceMonitor.test.ts:558:35-559:64: `
          .performUpkeep(validPayload, { gasLimit: 2_500_000 })`
$DIR/contracts/test/v0.8/automation/EthBalanceMonitor.test.ts:560:9-560:31: `await performTx.wait()`
$DIR/contracts/test/v0.8/automation/EthBalanceMonitor.test.ts:560:24-560:31: `.wait()`
$DIR/contracts/test/v0.8/automation/EthBalanceMonitor.test.ts:561:9-561:66: `await assertWatchlistBalances(2, 0, 2, 0, 10_000, 10_000)`
$DIR/contracts/test/v0.8/automation/EthBalanceMonitor.test.ts:565:27-565:42: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/EthBalanceMonitor.test.ts:565:42-565:70: `.performUpkeep(validPayload)`
$DIR/contracts/test/v0.8/automation/EthBalanceMonitor.test.ts:567:9-567:69: `performTx = bm.connect(stranger).performUpkeep(validPayload)`
$DIR/contracts/test/v0.8/automation/EthBalanceMonitor.test.ts:567:23-567:41: `.connect(stranger)`
$DIR/contracts/test/v0.8/automation/EthBalanceMonitor.test.ts:567:41-567:69: `.performUpkeep(validPayload)`
$DIR/contracts/test/v0.8/automation/EthBalanceMonitor.test.ts:572:9-572:66: `await assertWatchlistBalances(0, 0, 0, 0, 10_000, 10_000)`
$DIR/contracts/test/v0.8/automation/EthBalanceMonitor.test.ts:573:35-574:35: `
          .connect(keeperRegistry)`
$DIR/contracts/test/v0.8/automation/EthBalanceMonitor.test.ts:574:35-575:62: `
          .performUpkeep(validPayload, { gasLimit: 130_000 })`
$DIR/contracts/test/v0.8/automation/EthBalanceMonitor.test.ts:576:9-576:31: `await performTx.wait()`
$DIR/contracts/test/v0.8/automation/EthBalanceMonitor.test.ts:576:24-576:31: `.wait()`
$DIR/contracts/test/v0.8/automation/EthBalanceMonitor.test.ts:577:38-577:73: `.provider.getBalance(watchAddress1)`
$DIR/contracts/test/v0.8/automation/EthBalanceMonitor.test.ts:578:38-578:73: `.provider.getBalance(watchAddress2)`
$DIR/contracts/test/v0.8/automation/EthBalanceMonitor.test.ts:579:38-579:73: `.provider.getBalance(watchAddress3)`
$DIR/contracts/test/v0.8/automation/EthBalanceMonitor.test.ts:580:56-580:81: `.map((n) => n.toString())`
$DIR/contracts/test/v0.8/automation/EthBalanceMonitor.test.ts:591:31-594:10: `.utils.defaultAbiCoder.encode(
          ['address[]'],
          [addresses],
        )`
$DIR/contracts/test/v0.8/automation/EthBalanceMonitor.test.ts:595:31-596:26: `
          .connect(owner)`
$DIR/contracts/test/v0.8/automation/EthBalanceMonitor.test.ts:596:26-601:12: `
          .setWatchList(
            addresses,
            new Array(2).fill(oneEth),
            new Array(2).fill(twoEth),
          )`
$DIR/contracts/test/v0.8/automation/EthBalanceMonitor.test.ts:599:25-599:38: `.fill(oneEth)`
$DIR/contracts/test/v0.8/automation/EthBalanceMonitor.test.ts:600:25-600:38: `.fill(twoEth)`
$DIR/contracts/test/v0.8/automation/EthBalanceMonitor.test.ts:602:9-602:27: `await setTx.wait()`
$DIR/contracts/test/v0.8/automation/EthBalanceMonitor.test.ts:602:20-602:27: `.wait()`
$DIR/contracts/test/v0.8/automation/EthBalanceMonitor.test.ts:604:45-606:10: `.provider.getBalance(
          receiveEmitter.address,
        )`
$DIR/contracts/test/v0.8/automation/EthBalanceMonitor.test.ts:607:46-609:10: `.provider.getBalance(
          receiveFallbackEmitter.address,
        )`
$DIR/contracts/test/v0.8/automation/EthBalanceMonitor.test.ts:611:35-612:35: `
          .connect(keeperRegistry)`
$DIR/contracts/test/v0.8/automation/EthBalanceMonitor.test.ts:612:35-613:59: `
          .performUpkeep(payload, { gasLimit: 2_500_000 })`
$DIR/contracts/test/v0.8/automation/EthBalanceMonitor.test.ts:614:9-617:10: `await h.assertBalance(
          receiveEmitter.address,
          reBalanceBefore.add(twoEth),
        )`
$DIR/contracts/test/v0.8/automation/EthBalanceMonitor.test.ts:614:16-617:10: `.assertBalance(
          receiveEmitter.address,
          reBalanceBefore.add(twoEth),
        )`
$DIR/contracts/test/v0.8/automation/EthBalanceMonitor.test.ts:616:26-616:38: `.add(twoEth)`
$DIR/contracts/test/v0.8/automation/EthBalanceMonitor.test.ts:618:9-621:10: `await h.assertBalance(
          receiveFallbackEmitter.address,
          rfeBalanceBefore.add(twoEth),
        )`
$DIR/contracts/test/v0.8/automation/EthBalanceMonitor.test.ts:618:16-621:10: `.assertBalance(
          receiveFallbackEmitter.address,
          rfeBalanceBefore.add(twoEth),
        )`
$DIR/contracts/test/v0.8/automation/EthBalanceMonitor.test.ts:620:27-620:39: `.add(twoEth)`
$DIR/contracts/test/v0.8/automation/EthBalanceMonitor.test.ts:639:11-639:43: `await bm.connect(user).topUp([])`
$DIR/contracts/test/v0.8/automation/EthBalanceMonitor.test.ts:639:19-639:33: `.connect(user)`
$DIR/contracts/test/v0.8/automation/EthBalanceMonitor.test.ts:639:33-639:43: `.topUp([])`
$DIR/contracts/test/v0.8/automation/EthBalanceMonitor.test.ts:645:9-645:40: `await bm.connect(owner).pause()`
$DIR/contracts/test/v0.8/automation/EthBalanceMonitor.test.ts:645:17-645:32: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/EthBalanceMonitor.test.ts:645:32-645:40: `.pause()`
$DIR/contracts/test/v0.8/automation/EthBalanceMonitor.test.ts:649:24-649:38: `.connect(user)`
$DIR/contracts/test/v0.8/automation/EthBalanceMonitor.test.ts:649:38-649:48: `.topUp([])`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:177:45-177:62: `.typeAndVersion()`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:184:7-199:8: `await evmRevert(
        registrar
          .connect(someAddress)
          .register(
            upkeepName,
            emptyBytes,
            mock.address,
            executeGas,
            await admin.getAddress(),
            emptyBytes,
            offchainConfig,
            amount,
            await requestSender.getAddress(),
          ),
        'OnlyLink()',
      )`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:185:18-186:32: `
          .connect(someAddress)`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:186:32-197:12: `
          .register(
            upkeepName,
            emptyBytes,
            mock.address,
            executeGas,
            await admin.getAddress(),
            emptyBytes,
            offchainConfig,
            amount,
            await requestSender.getAddress(),
          )`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:192:24-192:37: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:196:32-196:45: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:203:7-210:10: `await registrar
        .connect(registrarOwner)
        .setRegistrationConfig(
          autoApproveType_ENABLED_ALL,
          maxAllowedAutoApprove,
          registry.address,
          minUpkeepSpend,
        )`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:203:22-204:33: `
        .connect(registrarOwner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:204:33-210:10: `
        .setRegistrationConfig(
          autoApproveType_ENABLED_ALL,
          maxAllowedAutoApprove,
          registry.address,
          minUpkeepSpend,
        )`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:212:40-225:8: `.interface.encodeFunctionData(
        'register',
        [
          upkeepName,
          emptyBytes,
          mock.address,
          executeGas,
          await admin.getAddress(),
          emptyBytes,
          offchainConfig,
          amount1,
          await requestSender.getAddress(),
        ],
      )`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:219:22-219:35: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:223:30-223:43: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:227:7-232:8: `await evmRevert(
        linkToken
          .connect(requestSender)
          .transferAndCall(registrar.address, amount, abiEncodedBytes),
        'AmountMismatch()',
      )`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:228:18-229:34: `
          .connect(requestSender)`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:229:34-230:71: `
          .transferAndCall(registrar.address, amount, abiEncodedBytes)`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:236:40-249:8: `.interface.encodeFunctionData(
        'register',
        [
          upkeepName,
          emptyBytes,
          mock.address,
          executeGas,
          await admin.getAddress(),
          emptyBytes,
          offchainConfig,
          amount,
          await admin.getAddress(), // Should have been requestSender.getAddress()
        ],
      )`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:243:22-243:35: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:247:22-247:35: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:250:7-255:8: `await evmRevert(
        linkToken
          .connect(requestSender)
          .transferAndCall(registrar.address, amount, abiEncodedBytes),
        'SenderMismatch()',
      )`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:251:18-252:34: `
          .connect(requestSender)`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:252:34-253:71: `
          .transferAndCall(registrar.address, amount, abiEncodedBytes)`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:259:40-272:8: `.interface.encodeFunctionData(
        'register',
        [
          upkeepName,
          emptyBytes,
          mock.address,
          executeGas,
          '0x0000000000000000000000000000000000000000',
          emptyBytes,
          offchainConfig,
          amount,
          await requestSender.getAddress(),
        ],
      )`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:270:30-270:43: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:274:7-279:8: `await evmRevert(
        linkToken
          .connect(requestSender)
          .transferAndCall(registrar.address, amount, abiEncodedBytes),
        'RegistrationRequestFailed()',
      )`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:275:18-276:34: `
          .connect(requestSender)`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:276:34-277:71: `
          .transferAndCall(registrar.address, amount, abiEncodedBytes)`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:284:7-291:10: `await registrar
        .connect(registrarOwner)
        .setRegistrationConfig(
          autoApproveType_ENABLED_ALL,
          maxAllowedAutoApprove,
          registry.address,
          minUpkeepSpend,
        )`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:284:22-285:33: `
        .connect(registrarOwner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:285:33-291:10: `
        .setRegistrationConfig(
          autoApproveType_ENABLED_ALL,
          maxAllowedAutoApprove,
          registry.address,
          minUpkeepSpend,
        )`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:294:40-307:8: `.interface.encodeFunctionData(
        'register',
        [
          upkeepName,
          emptyBytes,
          mock.address,
          executeGas,
          await admin.getAddress(),
          emptyBytes,
          offchainConfig,
          amount,
          await requestSender.getAddress(),
        ],
      )`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:301:22-301:35: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:305:30-305:43: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:308:33-309:32: `
        .connect(requestSender)`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:309:32-310:69: `
        .transferAndCall(registrar.address, amount, abiEncodedBytes)`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:312:34-312:59: `.getActiveUpkeepIDs(0, 1)`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:315:39-315:53: `.getUpkeep(id)`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:317:48-317:61: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:319:29-319:48: `.balance.toString()`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:329:42-329:53: `.getState()`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:332:7-339:10: `await registrar
        .connect(registrarOwner)
        .setRegistrationConfig(
          autoApproveType_DISABLED,
          maxAllowedAutoApprove,
          registry.address,
          minUpkeepSpend,
        )`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:332:22-333:33: `
        .connect(registrarOwner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:333:33-339:10: `
        .setRegistrationConfig(
          autoApproveType_DISABLED,
          maxAllowedAutoApprove,
          registry.address,
          minUpkeepSpend,
        )`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:342:40-355:8: `.interface.encodeFunctionData(
        'register',
        [
          upkeepName,
          emptyBytes,
          mock.address,
          executeGas,
          await admin.getAddress(),
          emptyBytes,
          offchainConfig,
          amount,
          await requestSender.getAddress(),
        ],
      )`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:349:22-349:35: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:353:30-353:43: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:356:33-357:32: `
        .connect(requestSender)`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:357:32-358:69: `
        .transferAndCall(registrar.address, amount, abiEncodedBytes)`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:359:31-359:38: `.wait()`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:362:41-362:52: `.getState()`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:371:45-371:69: `.getPendingRequest(hash)`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:372:31-372:44: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:373:23-373:45: `.eq(pendingRequest[1])`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:377:35-377:46: `.getState()`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:377:47-377:75: `.state.numUpkeeps.toNumber()`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:380:7-385:8: `await registrar.connect(registrarOwner).setRegistrationConfig(
        autoApproveType_ENABLED_ALL,
        1, // maxAllowedAutoApprove
        registry.address,
        minUpkeepSpend,
      )`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:380:22-380:46: `.connect(registrarOwner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:380:46-385:8: `.setRegistrationConfig(
        autoApproveType_ENABLED_ALL,
        1, // maxAllowedAutoApprove
        registry.address,
        minUpkeepSpend,
      )`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:388:38-398:9: `.interface.encodeFunctionData('register', [
        upkeepName,
        emptyBytes,
        mock.address,
        executeGas,
        await admin.getAddress(),
        emptyBytes,
        offchainConfig,
        amount,
        await requestSender.getAddress(),
      ])`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:393:20-393:33: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:397:28-397:41: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:399:7-401:69: `await linkToken
        .connect(requestSender)
        .transferAndCall(registrar.address, amount, abiEncodedBytes)`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:399:22-400:32: `
        .connect(requestSender)`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:400:32-401:69: `
        .transferAndCall(registrar.address, amount, abiEncodedBytes)`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:402:35-402:46: `.getState()`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:402:47-402:75: `.state.numUpkeeps.toNumber()`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:405:7-415:9: `abiEncodedBytes = registrar.interface.encodeFunctionData('register', [
        upkeepName,
        emptyBytes,
        mock.address,
        executeGas.toNumber() + 1, // make unique hash
        await admin.getAddress(),
        emptyBytes,
        offchainConfig,
        amount,
        await requestSender.getAddress(),
      ])`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:405:34-415:9: `.interface.encodeFunctionData('register', [
        upkeepName,
        emptyBytes,
        mock.address,
        executeGas.toNumber() + 1, // make unique hash
        await admin.getAddress(),
        emptyBytes,
        offchainConfig,
        amount,
        await requestSender.getAddress(),
      ])`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:410:20-410:33: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:414:28-414:41: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:416:7-418:69: `await linkToken
        .connect(requestSender)
        .transferAndCall(registrar.address, amount, abiEncodedBytes)`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:416:22-417:32: `
        .connect(requestSender)`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:417:32-418:69: `
        .transferAndCall(registrar.address, amount, abiEncodedBytes)`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:419:35-419:46: `.getState()`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:419:47-419:75: `.state.numUpkeeps.toNumber()`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:422:7-427:8: `await registrar.connect(registrarOwner).setRegistrationConfig(
        autoApproveType_ENABLED_ALL,
        2, // maxAllowedAutoApprove
        registry.address,
        minUpkeepSpend,
      )`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:422:22-422:46: `.connect(registrarOwner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:422:46-427:8: `.setRegistrationConfig(
        autoApproveType_ENABLED_ALL,
        2, // maxAllowedAutoApprove
        registry.address,
        minUpkeepSpend,
      )`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:428:7-438:9: `abiEncodedBytes = registrar.interface.encodeFunctionData('register', [
        upkeepName,
        emptyBytes,
        mock.address,
        executeGas.toNumber() + 2, // make unique hash
        await admin.getAddress(),
        emptyBytes,
        offchainConfig,
        amount,
        await requestSender.getAddress(),
      ])`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:428:34-438:9: `.interface.encodeFunctionData('register', [
        upkeepName,
        emptyBytes,
        mock.address,
        executeGas.toNumber() + 2, // make unique hash
        await admin.getAddress(),
        emptyBytes,
        offchainConfig,
        amount,
        await requestSender.getAddress(),
      ])`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:433:20-433:33: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:437:28-437:41: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:439:7-441:69: `await linkToken
        .connect(requestSender)
        .transferAndCall(registrar.address, amount, abiEncodedBytes)`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:439:22-440:32: `
        .connect(requestSender)`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:440:32-441:69: `
        .transferAndCall(registrar.address, amount, abiEncodedBytes)`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:442:35-442:46: `.getState()`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:442:47-442:75: `.state.numUpkeeps.toNumber()`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:445:7-455:9: `abiEncodedBytes = registrar.interface.encodeFunctionData('register', [
        upkeepName,
        emptyBytes,
        mock.address,
        executeGas.toNumber() + 3, // make unique hash
        await admin.getAddress(),
        emptyBytes,
        offchainConfig,
        amount,
        await requestSender.getAddress(),
      ])`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:445:34-455:9: `.interface.encodeFunctionData('register', [
        upkeepName,
        emptyBytes,
        mock.address,
        executeGas.toNumber() + 3, // make unique hash
        await admin.getAddress(),
        emptyBytes,
        offchainConfig,
        amount,
        await requestSender.getAddress(),
      ])`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:450:20-450:33: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:454:28-454:41: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:456:7-458:69: `await linkToken
        .connect(requestSender)
        .transferAndCall(registrar.address, amount, abiEncodedBytes)`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:456:22-457:32: `
        .connect(requestSender)`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:457:32-458:69: `
        .transferAndCall(registrar.address, amount, abiEncodedBytes)`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:459:35-459:46: `.getState()`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:459:47-459:75: `.state.numUpkeeps.toNumber()`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:463:48-463:61: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:466:7-473:10: `await registrar
        .connect(registrarOwner)
        .setRegistrationConfig(
          autoApproveType_ENABLED_SENDER_ALLOWLIST,
          maxAllowedAutoApprove,
          registry.address,
          minUpkeepSpend,
        )`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:466:22-467:33: `
        .connect(registrarOwner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:467:33-473:10: `
        .setRegistrationConfig(
          autoApproveType_ENABLED_SENDER_ALLOWLIST,
          maxAllowedAutoApprove,
          registry.address,
          minUpkeepSpend,
        )`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:476:7-478:58: `await registrar
        .connect(registrarOwner)
        .setAutoApproveAllowedSender(senderAddress, true)`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:476:22-477:33: `
        .connect(registrarOwner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:477:33-478:58: `
        .setAutoApproveAllowedSender(senderAddress, true)`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:481:40-494:8: `.interface.encodeFunctionData(
        'register',
        [
          upkeepName,
          emptyBytes,
          mock.address,
          executeGas,
          await admin.getAddress(),
          emptyBytes,
          offchainConfig,
          amount,
          await requestSender.getAddress(),
        ],
      )`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:488:22-488:35: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:492:30-492:43: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:495:33-496:32: `
        .connect(requestSender)`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:496:32-497:69: `
        .transferAndCall(registrar.address, amount, abiEncodedBytes)`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:499:34-499:59: `.getActiveUpkeepIDs(0, 1)`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:502:39-502:53: `.getUpkeep(id)`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:504:48-504:61: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:506:29-506:48: `.balance.toString()`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:514:42-514:53: `.getState()`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:515:48-515:61: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:518:7-525:10: `await registrar
        .connect(registrarOwner)
        .setRegistrationConfig(
          autoApproveType_ENABLED_SENDER_ALLOWLIST,
          maxAllowedAutoApprove,
          registry.address,
          minUpkeepSpend,
        )`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:518:22-519:33: `
        .connect(registrarOwner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:519:33-525:10: `
        .setRegistrationConfig(
          autoApproveType_ENABLED_SENDER_ALLOWLIST,
          maxAllowedAutoApprove,
          registry.address,
          minUpkeepSpend,
        )`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:528:7-530:59: `await registrar
        .connect(registrarOwner)
        .setAutoApproveAllowedSender(senderAddress, false)`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:528:22-529:33: `
        .connect(registrarOwner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:529:33-530:59: `
        .setAutoApproveAllowedSender(senderAddress, false)`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:533:40-546:8: `.interface.encodeFunctionData(
        'register',
        [
          upkeepName,
          emptyBytes,
          mock.address,
          executeGas,
          await admin.getAddress(),
          emptyBytes,
          offchainConfig,
          amount,
          await requestSender.getAddress(),
        ],
      )`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:540:22-540:35: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:544:30-544:43: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:547:33-548:32: `
        .connect(requestSender)`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:548:32-549:69: `
        .transferAndCall(registrar.address, amount, abiEncodedBytes)`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:550:31-550:38: `.wait()`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:553:41-553:52: `.getState()`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:562:45-562:69: `.getPendingRequest(hash)`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:563:31-563:44: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:564:23-564:45: `.eq(pendingRequest[1])`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:570:7-582:8: `await evmRevert(
        registrar.connect(someAddress).registerUpkeep({
          name: upkeepName,
          upkeepContract: mock.address,
          gasLimit: executeGas,
          adminAddress: await admin.getAddress(),
          checkData: emptyBytes,
          offchainConfig: emptyBytes,
          amount,
          encryptedEmail: emptyBytes,
        }),
        '',
      )`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:571:18-571:39: `.connect(someAddress)`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:571:39-580:11: `.registerUpkeep({
          name: upkeepName,
          upkeepContract: mock.address,
          gasLimit: executeGas,
          adminAddress: await admin.getAddress(),
          checkData: emptyBytes,
          offchainConfig: emptyBytes,
          amount,
          encryptedEmail: emptyBytes,
        })`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:575:36-575:49: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:586:7-593:10: `await registrar
        .connect(registrarOwner)
        .setRegistrationConfig(
          autoApproveType_ENABLED_ALL,
          maxAllowedAutoApprove,
          registry.address,
          minUpkeepSpend,
        )`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:586:22-587:33: `
        .connect(registrarOwner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:587:33-593:10: `
        .setRegistrationConfig(
          autoApproveType_ENABLED_ALL,
          maxAllowedAutoApprove,
          registry.address,
          minUpkeepSpend,
        )`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:596:28-596:55: `.from('100000000000000000')`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:598:7-610:8: `await evmRevert(
        registrar.connect(someAddress).registerUpkeep({
          name: upkeepName,
          upkeepContract: mock.address,
          gasLimit: executeGas,
          adminAddress: await admin.getAddress(),
          checkData: emptyBytes,
          offchainConfig: emptyBytes,
          amount: amt,
          encryptedEmail: emptyBytes,
        }),
        'InsufficientPayment()',
      )`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:599:18-599:39: `.connect(someAddress)`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:599:39-608:11: `.registerUpkeep({
          name: upkeepName,
          upkeepContract: mock.address,
          gasLimit: executeGas,
          adminAddress: await admin.getAddress(),
          checkData: emptyBytes,
          offchainConfig: emptyBytes,
          amount: amt,
          encryptedEmail: emptyBytes,
        })`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:603:36-603:49: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:615:7-622:10: `await registrar
        .connect(registrarOwner)
        .setRegistrationConfig(
          autoApproveType_ENABLED_ALL,
          maxAllowedAutoApprove,
          registry.address,
          minUpkeepSpend,
        )`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:615:22-616:33: `
        .connect(registrarOwner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:616:33-622:10: `
        .setRegistrationConfig(
          autoApproveType_ENABLED_ALL,
          maxAllowedAutoApprove,
          registry.address,
          minUpkeepSpend,
        )`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:624:7-624:80: `await linkToken.connect(requestSender).approve(registrar.address, amount)`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:624:22-624:45: `.connect(requestSender)`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:624:45-624:80: `.approve(registrar.address, amount)`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:626:33-626:56: `.connect(requestSender)`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:626:56-635:9: `.registerUpkeep({
        name: upkeepName,
        upkeepContract: mock.address,
        gasLimit: executeGas,
        adminAddress: await admin.getAddress(),
        checkData: emptyBytes,
        offchainConfig,
        amount,
        encryptedEmail: emptyBytes,
      })`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:630:34-630:47: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:636:35-636:46: `.getState()`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:636:47-636:75: `.state.numUpkeeps.toNumber()`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:639:34-639:59: `.getActiveUpkeepIDs(0, 1)`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:640:39-640:53: `.getUpkeep(id)`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:642:48-642:61: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:644:29-644:48: `.balance.toString()`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:655:27-656:27: `
        .connect(stranger)`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:656:27-657:70: `
        .setAutoApproveAllowedSender(await admin.getAddress(), false)`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:657:49-657:62: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:658:7-658:52: `await evmRevert(tx, 'Only callable by owner')`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:662:43-662:56: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:663:31-664:33: `
        .connect(registrarOwner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:664:33-665:58: `
        .setAutoApproveAllowedSender(senderAddress, true)`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:670:48-671:24: `
        .connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:671:24-672:52: `
        .getAutoApproveAllowedSender(senderAddress)`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:675:7-677:59: `tx = await registrar
        .connect(registrarOwner)
        .setAutoApproveAllowedSender(senderAddress, false)`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:675:27-676:33: `
        .connect(registrarOwner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:676:33-677:59: `
        .setAutoApproveAllowedSender(senderAddress, false)`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:682:7-684:52: `senderAllowedStatus = await registrar
        .connect(owner)
        .getAutoApproveAllowedSender(senderAddress)`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:682:44-683:24: `
        .connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:683:24-684:52: `
        .getAutoApproveAllowedSender(senderAddress)`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:726:27-727:27: `
        .connect(stranger)`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:727:27-736:10: `
        .approve(
          upkeepName,
          mock.address,
          executeGas,
          await admin.getAddress(),
          emptyBytes,
          emptyBytes,
          hash,
        )`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:732:22-732:35: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:737:7-737:52: `await evmRevert(tx, 'Only callable by owner')`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:741:27-742:33: `
        .connect(registrarOwner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:742:33-751:10: `
        .approve(
          upkeepName,
          mock.address,
          executeGas,
          await admin.getAddress(),
          emptyBytes,
          emptyBytes,
          '0x000000000000000000000000322813fd9a801c5507c9de605d63cea4f2ce6c44',
        )`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:747:22-747:35: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:752:7-752:53: `await evmRevert(tx, errorMsgs.requestNotFound)`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:756:25-757:33: `
        .connect(registrarOwner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:757:33-766:10: `
        .approve(
          upkeepName,
          ethers.Wallet.createRandom().address,
          executeGas,
          await admin.getAddress(),
          emptyBytes,
          emptyBytes,
          hash,
        )`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:760:17-760:39: `.Wallet.createRandom()`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:762:22-762:35: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:767:7-767:49: `await evmRevert(tx, errorMsgs.hashPayload)`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:768:7-778:10: `tx = registrar
        .connect(registrarOwner)
        .approve(
          upkeepName,
          mock.address,
          10000,
          await admin.getAddress(),
          emptyBytes,
          emptyBytes,
          hash,
        )`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:768:21-769:33: `
        .connect(registrarOwner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:769:33-778:10: `
        .approve(
          upkeepName,
          mock.address,
          10000,
          await admin.getAddress(),
          emptyBytes,
          emptyBytes,
          hash,
        )`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:774:22-774:35: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:779:7-779:49: `await evmRevert(tx, errorMsgs.hashPayload)`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:780:7-790:10: `tx = registrar
        .connect(registrarOwner)
        .approve(
          upkeepName,
          mock.address,
          executeGas,
          ethers.Wallet.createRandom().address,
          emptyBytes,
          emptyBytes,
          hash,
        )`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:780:21-781:33: `
        .connect(registrarOwner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:781:33-790:10: `
        .approve(
          upkeepName,
          mock.address,
          executeGas,
          ethers.Wallet.createRandom().address,
          emptyBytes,
          emptyBytes,
          hash,
        )`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:786:17-786:39: `.Wallet.createRandom()`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:791:7-791:49: `await evmRevert(tx, errorMsgs.hashPayload)`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:792:7-802:10: `tx = registrar
        .connect(registrarOwner)
        .approve(
          upkeepName,
          mock.address,
          executeGas,
          await admin.getAddress(),
          '0x1234',
          emptyBytes,
          hash,
        )`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:792:21-793:33: `
        .connect(registrarOwner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:793:33-802:10: `
        .approve(
          upkeepName,
          mock.address,
          executeGas,
          await admin.getAddress(),
          '0x1234',
          emptyBytes,
          hash,
        )`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:798:22-798:35: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:803:7-803:49: `await evmRevert(tx, errorMsgs.hashPayload)`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:807:33-808:33: `
        .connect(registrarOwner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:808:33-817:10: `
        .approve(
          upkeepName,
          mock.address,
          executeGas,
          await admin.getAddress(),
          emptyBytes,
          offchainConfig,
          hash,
        )`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:813:22-813:35: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:822:7-832:10: `await registrar
        .connect(registrarOwner)
        .approve(
          upkeepName,
          mock.address,
          executeGas,
          await admin.getAddress(),
          emptyBytes,
          offchainConfig,
          hash,
        )`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:822:22-823:33: `
        .connect(registrarOwner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:823:33-832:10: `
        .approve(
          upkeepName,
          mock.address,
          executeGas,
          await admin.getAddress(),
          emptyBytes,
          offchainConfig,
          hash,
        )`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:828:22-828:35: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:833:27-834:33: `
        .connect(registrarOwner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:834:33-843:10: `
        .approve(
          upkeepName,
          mock.address,
          executeGas,
          await admin.getAddress(),
          emptyBytes,
          offchainConfig,
          hash,
        )`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:839:22-839:35: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:844:7-844:53: `await evmRevert(tx, errorMsgs.requestNotFound)`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:888:27-888:45: `.connect(stranger)`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:888:45-888:58: `.cancel(hash)`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:889:7-889:47: `await evmRevert(tx, errorMsgs.onlyAdmin)`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:893:27-894:33: `
        .connect(registrarOwner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:894:33-897:10: `
        .cancel(
          '0x000000000000000000000000322813fd9a801c5507c9de605d63cea4f2ce6c44',
        )`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:898:7-898:53: `await evmRevert(tx, errorMsgs.requestNotFound)`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:902:37-902:73: `.balanceOf(await admin.getAddress())`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:902:59-902:72: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:903:33-903:57: `.connect(registrarOwner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:903:57-903:70: `.cancel(hash)`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:904:36-904:72: `.balanceOf(await admin.getAddress())`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:904:58-904:71: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:905:26-905:38: `.sub(before)`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:905:38-905:72: `.eq(amount.mul(BigNumber.from(2)))`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:905:48-905:71: `.mul(BigNumber.from(2))`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:905:62-905:70: `.from(2)`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:910:37-910:73: `.balanceOf(await admin.getAddress())`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:910:59-910:72: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:911:33-911:48: `.connect(admin)`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:911:48-911:61: `.cancel(hash)`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:912:36-912:72: `.balanceOf(await admin.getAddress())`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:912:58-912:71: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:913:26-913:38: `.sub(before)`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:913:38-913:72: `.eq(amount.mul(BigNumber.from(2)))`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:913:48-913:71: `.mul(BigNumber.from(2))`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:913:62-913:70: `.from(2)`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:918:7-918:59: `await registrar.connect(registrarOwner).cancel(hash)`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:918:22-918:46: `.connect(registrarOwner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:918:46-918:59: `.cancel(hash)`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:919:25-919:49: `.connect(registrarOwner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:919:49-919:62: `.cancel(hash)`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:920:7-920:53: `await evmRevert(tx, errorMsgs.requestNotFound)`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:921:7-931:10: `tx = registrar
        .connect(registrarOwner)
        .approve(
          upkeepName,
          mock.address,
          executeGas,
          await admin.getAddress(),
          emptyBytes,
          emptyBytes,
          hash,
        )`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:921:21-922:33: `
        .connect(registrarOwner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:922:33-931:10: `
        .approve(
          upkeepName,
          mock.address,
          executeGas,
          await admin.getAddress(),
          emptyBytes,
          emptyBytes,
          hash,
        )`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:927:22-927:35: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistrar2_0.test.ts:932:7-932:53: `await evmRevert(tx, errorMsgs.requestNotFound)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:206:44-206:61: `.typeAndVersion()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:214:7-217:8: `await evmRevert(
        registry.connect(keeper1).setKeepers([], []),
        'Only callable by owner',
      )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:215:17-215:34: `.connect(keeper1)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:215:34-215:53: `.setKeepers([], [])`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:221:7-229:8: `await evmRevert(
        registry
          .connect(owner)
          .setKeepers(
            [await keeper1.getAddress(), await keeper1.getAddress()],
            [await payee1.getAddress(), await payee1.getAddress()],
          ),
        'DuplicateEntry()',
      )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:222:17-223:26: `
          .connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:223:26-227:12: `
          .setKeepers(
            [await keeper1.getAddress(), await keeper1.getAddress()],
            [await payee1.getAddress(), await payee1.getAddress()],
          )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:225:27-225:40: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:225:55-225:68: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:226:26-226:39: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:226:53-226:66: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:233:7-241:8: `await evmRevert(
        registry
          .connect(owner)
          .setKeepers(
            [await keeper1.getAddress(), await keeper2.getAddress()],
            [await payee1.getAddress()],
          ),
        'ParameterLengthError()',
      )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:234:17-235:26: `
          .connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:235:26-239:12: `
          .setKeepers(
            [await keeper1.getAddress(), await keeper2.getAddress()],
            [await payee1.getAddress()],
          )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:237:27-237:40: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:237:55-237:68: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:238:26-238:39: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:242:7-250:8: `await evmRevert(
        registry
          .connect(owner)
          .setKeepers(
            [await keeper1.getAddress()],
            [await payee1.getAddress(), await payee2.getAddress()],
          ),
        'ParameterLengthError()',
      )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:243:17-244:26: `
          .connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:244:26-248:12: `
          .setKeepers(
            [await keeper1.getAddress()],
            [await payee1.getAddress(), await payee2.getAddress()],
          )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:246:27-246:40: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:247:26-247:39: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:247:53-247:66: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:254:7-265:8: `await evmRevert(
        registry
          .connect(owner)
          .setKeepers(
            [await keeper1.getAddress(), await keeper2.getAddress()],
            [
              await payee1.getAddress(),
              '0x0000000000000000000000000000000000000000',
            ],
          ),
        'InvalidPayee()',
      )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:255:17-256:26: `
          .connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:256:26-263:12: `
          .setKeepers(
            [await keeper1.getAddress(), await keeper2.getAddress()],
            [
              await payee1.getAddress(),
              '0x0000000000000000000000000000000000000000',
            ],
          )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:258:27-258:40: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:258:55-258:68: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:260:27-260:40: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:270:22-270:35: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:271:22-271:35: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:273:38-273:51: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:273:65-273:78: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:274:7-274:70: `await registry.connect(owner).setKeepers(oldKeepers, oldPayees)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:274:21-274:36: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:274:36-274:70: `.setKeepers(oldKeepers, oldPayees)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:275:51-275:62: `.getState()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:279:22-279:35: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:280:22-280:35: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:282:38-282:51: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:282:65-282:78: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:283:32-283:47: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:283:47-283:81: `.setKeepers(newKeepers, newPayees)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:284:51-284:62: `.getState()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:292:7-292:64: `await registry.connect(owner).setKeepers(keepers, payees)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:292:21-292:36: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:292:36-292:64: `.setKeepers(keepers, payees)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:293:7-298:10: `await registry
        .connect(owner)
        .setKeepers(
          [await keeper1.getAddress(), await keeper3.getAddress()],
          [await payee1.getAddress(), await payee3.getAddress()],
        )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:293:21-294:24: `
        .connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:294:24-298:10: `
        .setKeepers(
          [await keeper1.getAddress(), await keeper3.getAddress()],
          [await payee1.getAddress(), await payee3.getAddress()],
        )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:296:25-296:38: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:296:53-296:66: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:297:24-297:37: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:297:51-297:64: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:299:35-299:77: `.getKeeperInfo(await keeper1.getAddress())`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:299:63-299:76: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:301:37-301:79: `.getKeeperInfo(await keeper2.getAddress())`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:301:65-301:78: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:307:22-307:35: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:308:22-308:35: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:310:38-310:51: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:310:65-310:78: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:311:7-311:70: `await registry.connect(owner).setKeepers(oldKeepers, oldPayees)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:311:21-311:36: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:311:36-311:70: `.setKeepers(oldKeepers, oldPayees)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:312:51-312:62: `.getState()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:315:22-315:35: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:316:22-316:35: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:318:54-318:67: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:319:32-319:47: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:319:47-319:81: `.setKeepers(newKeepers, newPayees)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:320:51-320:62: `.getState()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:322:37-322:79: `.getKeeperInfo(await keeper2.getAddress())`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:322:65-322:78: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:323:32-323:45: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:332:7-332:64: `await registry.connect(owner).setKeepers(keepers, payees)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:332:21-332:36: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:332:36-332:64: `.setKeepers(keepers, payees)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:333:7-342:8: `await evmRevert(
        registry
          .connect(owner)
          .setKeepers(keepers, [
            await payee1.getAddress(),
            await payee2.getAddress(),
            await owner.getAddress(),
          ]),
        'InvalidPayee()',
      )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:334:17-335:26: `
          .connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:335:26-340:13: `
          .setKeepers(keepers, [
            await payee1.getAddress(),
            await payee2.getAddress(),
            await owner.getAddress(),
          ])`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:337:25-337:38: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:338:25-338:38: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:339:24-339:37: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:352:9-362:10: `await evmRevert(
          registry
            .connect(owner)
            .registerUpkeep(
              zeroAddress,
              executeGas,
              await admin.getAddress(),
              emptyBytes,
            ),
          'Pausable: paused',
        )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:353:19-354:28: `
            .connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:354:28-360:14: `
            .registerUpkeep(
              zeroAddress,
              executeGas,
              await admin.getAddress(),
              emptyBytes,
            )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:358:26-358:39: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:367:7-377:8: `await evmRevert(
        registry
          .connect(owner)
          .registerUpkeep(
            zeroAddress,
            executeGas,
            await admin.getAddress(),
            emptyBytes,
          ),
        'NotAContract()',
      )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:368:17-369:26: `
          .connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:369:26-375:12: `
          .registerUpkeep(
            zeroAddress,
            executeGas,
            await admin.getAddress(),
            emptyBytes,
          )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:373:24-373:37: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:381:7-391:8: `await evmRevert(
        registry
          .connect(keeper1)
          .registerUpkeep(
            mock.address,
            executeGas,
            await admin.getAddress(),
            emptyBytes,
          ),
        'OnlyCallableByOwnerOrRegistrar()',
      )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:382:17-383:28: `
          .connect(keeper1)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:383:28-389:12: `
          .registerUpkeep(
            mock.address,
            executeGas,
            await admin.getAddress(),
            emptyBytes,
          )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:387:24-387:37: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:395:7-405:8: `await evmRevert(
        registry
          .connect(owner)
          .registerUpkeep(
            mock.address,
            2299,
            await admin.getAddress(),
            emptyBytes,
          ),
        'GasLimitOutsideRange()',
      )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:396:17-397:26: `
          .connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:397:26-403:12: `
          .registerUpkeep(
            mock.address,
            2299,
            await admin.getAddress(),
            emptyBytes,
          )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:401:24-401:37: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:409:7-419:8: `await evmRevert(
        registry
          .connect(owner)
          .registerUpkeep(
            mock.address,
            5000001,
            await admin.getAddress(),
            emptyBytes,
          ),
        'GasLimitOutsideRange()',
      )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:410:17-411:26: `
          .connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:411:26-417:12: `
          .registerUpkeep(
            mock.address,
            5000001,
            await admin.getAddress(),
            emptyBytes,
          )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:415:24-415:37: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:423:32-424:24: `
        .connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:424:24-430:10: `
        .registerUpkeep(
          mock.address,
          executeGas,
          await admin.getAddress(),
          emptyBytes,
        )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:428:22-428:35: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:431:7-431:33: `id = await getUpkeepID(tx)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:435:42-435:56: `.getUpkeep(id)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:437:35-437:54: `.balance.toNumber()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:439:26-439:71: `.maxValidBlocknumber.eq('0xffffffffffffffff')`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:451:7-454:8: `await evmRevert(
        registry.connect(keeper1).addFunds(id.add(1), amount),
        'UpkeepNotActive()',
      )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:452:17-452:34: `.connect(keeper1)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:452:34-452:62: `.addFunds(id.add(1), amount)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:452:46-452:53: `.add(1)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:458:7-458:59: `await registry.connect(keeper1).addFunds(id, amount)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:458:21-458:38: `.connect(keeper1)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:458:38-458:59: `.addFunds(id, amount)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:459:42-459:56: `.getUpkeep(id)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:460:27-460:52: `.eq(registration.balance)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:464:32-464:49: `.connect(keeper1)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:464:49-464:70: `.addFunds(id, amount)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:471:7-471:53: `await registry.connect(admin).cancelUpkeep(id)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:471:21-471:36: `.connect(admin)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:471:36-471:53: `.cancelUpkeep(id)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:472:7-475:8: `await evmRevert(
        registry.connect(keeper1).addFunds(id, amount),
        'UpkeepNotActive()',
      )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:473:17-473:34: `.connect(keeper1)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:473:34-473:55: `.addFunds(id, amount)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:483:7-486:8: `await evmRevert(
        registry.connect(keeper1).setUpkeepGasLimit(id.add(1), newGasLimit),
        'UpkeepNotActive()',
      )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:484:17-484:34: `.connect(keeper1)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:484:34-484:76: `.setUpkeepGasLimit(id.add(1), newGasLimit)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:484:55-484:62: `.add(1)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:490:7-490:53: `await registry.connect(admin).cancelUpkeep(id)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:490:21-490:36: `.connect(admin)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:490:36-490:53: `.cancelUpkeep(id)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:491:7-494:8: `await evmRevert(
        registry.connect(keeper1).setUpkeepGasLimit(id, newGasLimit),
        'UpkeepNotActive()',
      )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:492:17-492:34: `.connect(keeper1)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:492:34-492:69: `.setUpkeepGasLimit(id, newGasLimit)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:498:7-501:8: `await evmRevert(
        registry.connect(owner).setUpkeepGasLimit(id, newGasLimit),
        'OnlyCallableByAdmin()',
      )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:499:17-499:32: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:499:32-499:67: `.setUpkeepGasLimit(id, newGasLimit)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:505:7-508:8: `await evmRevert(
        registry.connect(admin).setUpkeepGasLimit(id, BigNumber.from('100')),
        'GasLimitOutsideRange()',
      )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:506:17-506:32: `.connect(admin)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:506:32-506:77: `.setUpkeepGasLimit(id, BigNumber.from('100'))`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:506:64-506:76: `.from('100')`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:509:7-514:8: `await evmRevert(
        registry
          .connect(admin)
          .setUpkeepGasLimit(id, BigNumber.from('6000000')),
        'GasLimitOutsideRange()',
      )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:510:17-511:26: `
          .connect(admin)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:511:26-512:60: `
          .setUpkeepGasLimit(id, BigNumber.from('6000000'))`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:512:43-512:59: `.from('6000000')`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:518:46-518:60: `.getUpkeep(id)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:520:7-520:71: `await registry.connect(admin).setUpkeepGasLimit(id, newGasLimit)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:520:21-520:36: `.connect(admin)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:520:36-520:71: `.setUpkeepGasLimit(id, newGasLimit)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:521:46-521:60: `.getUpkeep(id)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:526:32-527:24: `
        .connect(admin)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:527:24-528:44: `
        .setUpkeepGasLimit(id, newGasLimit)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:537:7-537:37: `await mock.setCanPerform(true)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:537:17-537:37: `.setCanPerform(true)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:538:7-538:35: `await mock.setCanCheck(true)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:538:17-538:35: `.setCanCheck(true)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:539:7-544:8: `await evmRevert(
        registry
          .connect(zeroAddress)
          .callStatic.checkUpkeep(id, await keeper1.getAddress()),
        'InsufficientFunds()',
      )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:540:17-541:32: `
          .connect(zeroAddress)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:541:32-542:66: `
          .callStatic.checkUpkeep(id, await keeper1.getAddress())`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:542:52-542:65: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:554:9-554:39: `await mock.setCanPerform(true)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:554:19-554:39: `.setCanPerform(true)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:555:9-555:37: `await mock.setCanCheck(true)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:555:19-555:37: `.setCanCheck(true)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:556:9-559:10: `await evmRevert(
          registry.checkUpkeep(id, await keeper1.getAddress()),
          'OnlySimulatedBackend()',
        )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:557:19-557:63: `.checkUpkeep(id, await keeper1.getAddress())`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:557:49-557:62: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:563:9-563:39: `await mock.setCanPerform(true)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:563:19-563:39: `.setCanPerform(true)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:564:9-564:37: `await mock.setCanCheck(true)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:564:19-564:37: `.setCanCheck(true)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:565:9-568:10: `await evmRevert(
          registry.checkUpkeep(id, await owner.getAddress()),
          'OnlySimulatedBackend()',
        )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:566:19-566:61: `.checkUpkeep(id, await owner.getAddress())`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:566:47-566:60: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:577:11-582:12: `await evmRevert(
            registry
              .connect(zeroAddress)
              .callStatic.checkUpkeep(id, await keeper1.getAddress()),
            'UpkeepNotNeeded()',
          )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:578:21-579:36: `
              .connect(zeroAddress)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:579:36-580:70: `
              .callStatic.checkUpkeep(id, await keeper1.getAddress())`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:580:56-580:69: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:605:11-610:12: `await evmRevert(
            registry
              .connect(zeroAddress)
              .callStatic.checkUpkeep(id, await keeper1.getAddress()),
            'TargetCheckReverted',
          )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:606:21-607:36: `
              .connect(zeroAddress)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:607:36-608:70: `
              .callStatic.checkUpkeep(id, await keeper1.getAddress())`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:608:56-608:69: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:621:45-621:54: `.from(10)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:622:11-635:13: `await registry.connect(owner).setConfig({
            paymentPremiumPPB,
            flatFeeMicroLink,
            blockCountPerTurn,
            checkGasLimit,
            stalenessSeconds,
            gasCeilingMultiplier: newGasMultiplier,
            minUpkeepSpend,
            maxPerformGas,
            fallbackGasPrice,
            fallbackLinkPrice,
            transcoder: transcoder.address,
            registrar: ethers.constants.AddressZero,
          })`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:622:25-622:40: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:622:40-635:13: `.setConfig({
            paymentPremiumPPB,
            flatFeeMicroLink,
            blockCountPerTurn,
            checkGasLimit,
            stalenessSeconds,
            gasCeilingMultiplier: newGasMultiplier,
            minUpkeepSpend,
            maxPerformGas,
            fallbackGasPrice,
            fallbackLinkPrice,
            transcoder: transcoder.address,
            registrar: ethers.constants.AddressZero,
          })`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:636:42-637:34: `
            .connect(zeroAddress)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:637:34-638:68: `
            .callStatic.checkUpkeep(id, await keeper1.getAddress())`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:638:54-638:67: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:639:33-639:57: `.gasLimit.eq(executeGas)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:640:33-640:53: `.linkEth.eq(linkEth)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:642:21-642:69: `.adjustedGasWei.eq(gasWei.mul(newGasMultiplier))`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:642:46-642:68: `.mul(newGasMultiplier)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:645:21-647:14: `.maxLinkPayment.eq(
              linkForGas(executeGas.toNumber()).mul(newGasMultiplier),
            )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:646:48-646:70: `.mul(newGasMultiplier)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:652:11-652:54: `await mock.setCheckGasToBurn(checkGasLimit)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:652:21-652:54: `.setCheckGasToBurn(checkGasLimit)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:653:11-653:53: `await mock.setPerformGasToBurn(executeGas)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:653:21-653:53: `.setPerformGasToBurn(executeGas)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:654:36-655:29: `
            .add(executeGas)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:655:29-656:39: `
            .add(PERFORM_GAS_OVERHEAD)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:656:39-657:37: `
            .add(CHECK_GAS_OVERHEAD)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:658:11-662:15: `await registry
            .connect(zeroAddress)
            .callStatic.checkUpkeep(id, await keeper1.getAddress(), {
              gasLimit: gas,
            })`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:658:25-659:34: `
            .connect(zeroAddress)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:659:34-662:15: `
            .callStatic.checkUpkeep(id, await keeper1.getAddress(), {
              gasLimit: gas,
            })`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:660:54-660:67: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:685:7-688:8: `await evmRevert(
        registry.connect(keeper2).performUpkeep(id, '0x'),
        'InsufficientFunds()',
      )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:686:17-686:34: `.connect(keeper2)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:686:34-686:58: `.performUpkeep(id, '0x')`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:697:9-700:10: `await evmRevert(
          registry.connect(keeper2).performUpkeep(id, '0x'),
          'Pausable: paused',
        )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:698:19-698:36: `.connect(keeper2)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:698:36-698:60: `.performUpkeep(id, '0x')`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:711:40-712:32: `
          .connect(zeroAddress)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:712:32-713:40: `
          .callStatic.checkUpkeep('0x')`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:716:9-716:64: `await registry.connect(keeper3).performUpkeep(id, '0x')`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:716:23-716:40: `.connect(keeper3)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:716:40-716:64: `.performUpkeep(id, '0x')`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:720:40-721:32: `
          .connect(zeroAddress)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:721:32-722:40: `
          .callStatic.checkUpkeep('0x')`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:726:25-726:42: `.connect(keeper1)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:726:42-726:77: `.callStatic.performUpkeep(id, '0x')`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:731:9-731:39: `await mock.setCanPerform(true)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:731:19-731:39: `.setCanPerform(true)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:733:40-734:28: `
          .connect(keeper1)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:734:28-735:46: `
          .callStatic.performUpkeep(id, '0x')`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:740:9-740:39: `await mock.setCanPerform(true)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:740:19-740:39: `.setCanPerform(true)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:742:9-746:10: `await evmRevert(
          registry
            .connect(keeper1)
            .performUpkeep(id, '0x', { gasLimit: BigNumber.from('120000') }),
        )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:743:19-744:30: `
            .connect(keeper1)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:744:30-745:77: `
            .performUpkeep(id, '0x', { gasLimit: BigNumber.from('120000') })`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:745:59-745:74: `.from('120000')`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:750:9-750:39: `await mock.setCanPerform(true)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:750:19-750:39: `.setCanPerform(true)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:753:34-754:28: `
          .connect(keeper1)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:754:28-755:66: `
          .performUpkeep(id, performData, { gasLimit: extraGas })`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:756:33-756:40: `.wait()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:763:60-763:73: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:769:44-771:10: `.getKeeperInfo(
          await keeper1.getAddress(),
        )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:770:24-770:37: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:772:50-772:64: `.getUpkeep(id)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:773:49-775:10: `.balanceOf(
          await keeper1.getAddress(),
        )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:774:24-774:37: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:776:51-776:79: `.balanceOf(registry.address)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:779:9-779:64: `await registry.connect(keeper1).performUpkeep(id, '0x')`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:779:23-779:40: `.connect(keeper1)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:779:40-779:64: `.performUpkeep(id, '0x')`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:781:43-783:10: `.getKeeperInfo(
          await keeper1.getAddress(),
        )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:782:24-782:37: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:784:49-784:63: `.getUpkeep(id)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:785:48-787:10: `.balanceOf(
          await keeper1.getAddress(),
        )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:786:24-786:37: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:788:50-788:78: `.balanceOf(registry.address)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:790:34-790:67: `.balance.gt(keeperBefore.balance)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:791:41-791:79: `.balance.gt(registrationAfter.balance)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:792:38-792:59: `.eq(keeperLinkBefore)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:793:41-793:63: `.eq(registryLinkAfter)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:797:50-797:64: `.getUpkeep(id)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:802:9-802:64: `await registry.connect(keeper1).performUpkeep(id, '0x')`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:802:23-802:40: `.connect(keeper1)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:802:40-802:64: `.performUpkeep(id, '0x')`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:804:49-804:63: `.getUpkeep(id)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:808:35-808:53: `.lt(balanceBefore)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:809:39-809:61: `.gt(amountSpentBefore)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:811:27-812:36: `
            .sub(amountSpentBefore)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:812:36-813:49: `
            .eq(balanceBefore.sub(balanceAfter))`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:813:30-813:48: `.sub(balanceAfter)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:819:25-819:67: `.getKeeperInfo(await keeper1.getAddress())`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:819:53-819:66: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:821:34-821:51: `.connect(keeper1)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:821:51-821:75: `.performUpkeep(id, '0x')`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:822:33-822:40: `.wait()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:823:38-823:80: `.getKeeperInfo(await keeper1.getAddress())`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:823:66-823:79: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:827:43-827:62: `.gasUsed.toNumber()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:828:33-828:45: `.sub(before)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:829:26-829:38: `.gt(totalTx)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:830:30-830:45: `.gt(difference)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:831:39-831:54: `.lt(difference)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:832:39-832:54: `.gt(difference)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:836:37-836:46: `.from(10)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:837:35-837:54: `.from('1000000000')`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:838:9-851:11: `await registry.connect(owner).setConfig({
          paymentPremiumPPB,
          flatFeeMicroLink,
          blockCountPerTurn,
          checkGasLimit,
          stalenessSeconds,
          gasCeilingMultiplier: multiplier,
          minUpkeepSpend,
          maxPerformGas,
          fallbackGasPrice,
          fallbackLinkPrice,
          transcoder: transcoder.address,
          registrar: ethers.constants.AddressZero,
        })`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:838:23-838:38: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:838:38-851:11: `.setConfig({
          paymentPremiumPPB,
          flatFeeMicroLink,
          blockCountPerTurn,
          checkGasLimit,
          stalenessSeconds,
          gasCeilingMultiplier: multiplier,
          minUpkeepSpend,
          maxPerformGas,
          fallbackGasPrice,
          fallbackLinkPrice,
          transcoder: transcoder.address,
          registrar: ethers.constants.AddressZero,
        })`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:854:25-854:67: `.getKeeperInfo(await keeper1.getAddress())`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:854:53-854:66: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:856:34-857:28: `
          .connect(keeper1)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:857:28-858:49: `
          .performUpkeep(id, '0x', { gasPrice })`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:859:33-859:40: `.wait()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:860:38-860:80: `.getKeeperInfo(await keeper1.getAddress())`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:860:66-860:79: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:863:43-863:59: `.mul(multiplier)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:864:52-864:68: `.mul(multiplier)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:865:33-865:45: `.sub(before)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:866:26-866:38: `.gt(totalTx)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:867:30-867:45: `.gt(difference)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:868:39-868:55: `.mul(multiplier)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:868:55-868:70: `.lt(difference)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:869:39-869:55: `.mul(multiplier)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:869:55-869:70: `.gt(difference)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:873:37-873:46: `.from(10)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:874:35-874:45: `.from(200)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:875:46-875:54: `.from(2)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:876:9-889:11: `await registry.connect(owner).setConfig({
          paymentPremiumPPB,
          flatFeeMicroLink,
          blockCountPerTurn,
          checkGasLimit,
          stalenessSeconds,
          gasCeilingMultiplier: multiplier,
          minUpkeepSpend,
          maxPerformGas,
          fallbackGasPrice,
          fallbackLinkPrice,
          transcoder: transcoder.address,
          registrar: ethers.constants.AddressZero,
        })`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:876:23-876:38: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:876:38-889:11: `.setConfig({
          paymentPremiumPPB,
          flatFeeMicroLink,
          blockCountPerTurn,
          checkGasLimit,
          stalenessSeconds,
          gasCeilingMultiplier: multiplier,
          minUpkeepSpend,
          maxPerformGas,
          fallbackGasPrice,
          fallbackLinkPrice,
          transcoder: transcoder.address,
          registrar: ethers.constants.AddressZero,
        })`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:892:25-892:67: `.getKeeperInfo(await keeper1.getAddress())`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:892:53-892:66: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:894:34-895:28: `
          .connect(keeper1)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:895:28-896:49: `
          .performUpkeep(id, '0x', { gasPrice })`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:897:33-897:40: `.wait()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:898:38-898:80: `.getKeeperInfo(await keeper1.getAddress())`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:898:66-898:79: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:901:54-901:79: `.mul(effectiveMultiplier)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:902:52-902:77: `.mul(effectiveMultiplier)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:903:33-903:45: `.sub(before)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:904:26-904:38: `.gt(totalTx)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:905:30-905:45: `.gt(difference)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:906:39-906:64: `.mul(effectiveMultiplier)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:906:64-906:79: `.lt(difference)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:907:39-907:64: `.mul(effectiveMultiplier)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:907:64-907:79: `.gt(difference)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:911:34-912:26: `
          .connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:912:26-918:12: `
          .registerUpkeep(
            mock.address,
            executeGas,
            await admin.getAddress(),
            emptyBytes,
          )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:916:24-916:37: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:920:9-920:79: `await linkToken.connect(owner).approve(registry.address, toWei('100'))`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:920:24-920:39: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:920:39-920:79: `.approve(registry.address, toWei('100'))`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:921:9-921:65: `await registry.connect(owner).addFunds(id, toWei('100'))`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:921:23-921:38: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:921:38-921:65: `.addFunds(id, toWei('100'))`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:923:25-923:67: `.getKeeperInfo(await keeper1.getAddress())`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:923:53-923:66: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:927:9-927:64: `await registry.connect(keeper1).performUpkeep(id, '0x')`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:927:23-927:40: `.connect(keeper1)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:927:40-927:64: `.performUpkeep(id, '0x')`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:930:25-930:67: `.getKeeperInfo(await keeper1.getAddress())`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:930:53-930:66: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:932:41-932:65: `.gt(keeperBalanceBefore)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:936:9-939:10: `await evmRevert(
          registry.connect(nonkeeper).performUpkeep(id, '0x'),
          'OnlyActiveKeepers()',
        )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:937:19-937:38: `.connect(nonkeeper)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:937:38-937:62: `.performUpkeep(id, '0x')`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:943:9-943:39: `await mock.setCanPerform(true)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:943:19-943:39: `.setCanPerform(true)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:945:9-945:55: `await registry.connect(owner).cancelUpkeep(id)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:945:23-945:38: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:945:38-945:55: `.cancelUpkeep(id)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:947:9-950:10: `await evmRevert(
          registry.connect(keeper1).performUpkeep(id, '0x'),
          'UpkeepNotActive()',
        )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:948:19-948:36: `.connect(keeper1)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:948:36-948:60: `.performUpkeep(id, '0x')`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:959:9-961:66: `await gasPriceFeed
          .connect(owner)
          .updateRoundData(roundId, answer, updatedAt, startedAt)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:959:27-960:26: `
          .connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:960:26-961:66: `
          .updateRoundData(roundId, answer, updatedAt, startedAt)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:963:35-963:59: `.lt(amountWithStaleFeed)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:969:45-969:71: `.provider.getBlockNumber()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:970:42-970:77: `.provider.getBlock(currentBlockNum)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:973:9-975:64: `await gasPriceFeed
          .connect(owner)
          .updateRoundData(roundId, -100, updatedAt, startedAt)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:973:27-974:26: `
          .connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:974:26-975:64: `
          .updateRoundData(roundId, -100, updatedAt, startedAt)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:977:9-979:61: `await gasPriceFeed
          .connect(owner)
          .updateRoundData(roundId, 0, updatedAt, startedAt)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:977:27-978:26: `
          .connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:978:26-979:61: `
          .updateRoundData(roundId, 0, updatedAt, startedAt)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:981:35-981:62: `.lt(amountWithNegativeFeed)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:982:35-982:58: `.lt(amountWithZeroFeed)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:991:9-993:66: `await linkEthFeed
          .connect(owner)
          .updateRoundData(roundId, answer, updatedAt, startedAt)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:991:26-992:26: `
          .connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:992:26-993:66: `
          .updateRoundData(roundId, answer, updatedAt, startedAt)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:995:35-995:59: `.lt(amountWithStaleFeed)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1001:45-1001:71: `.provider.getBlockNumber()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1002:42-1002:77: `.provider.getBlock(currentBlockNum)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1005:9-1007:64: `await linkEthFeed
          .connect(owner)
          .updateRoundData(roundId, -100, updatedAt, startedAt)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1005:26-1006:26: `
          .connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1006:26-1007:64: `
          .updateRoundData(roundId, -100, updatedAt, startedAt)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1009:9-1011:61: `await linkEthFeed
          .connect(owner)
          .updateRoundData(roundId, 0, updatedAt, startedAt)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1009:26-1010:26: `
          .connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1010:26-1011:61: `
          .updateRoundData(roundId, 0, updatedAt, startedAt)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1013:35-1013:62: `.lt(amountWithNegativeFeed)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1014:35-1014:58: `.lt(amountWithZeroFeed)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1018:9-1018:64: `await registry.connect(keeper1).performUpkeep(id, '0x')`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1018:23-1018:40: `.connect(keeper1)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1018:40-1018:64: `.performUpkeep(id, '0x')`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1019:9-1022:10: `await evmRevert(
          registry.connect(keeper1).performUpkeep(id, '0x'),
          'KeepersMustTakeTurns()',
        )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1020:19-1020:36: `.connect(keeper1)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1020:36-1020:60: `.performUpkeep(id, '0x')`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1023:9-1023:64: `await registry.connect(keeper2).performUpkeep(id, '0x')`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1023:23-1023:40: `.connect(keeper2)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1023:40-1023:64: `.performUpkeep(id, '0x')`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1024:9-1027:10: `await evmRevert(
          registry.connect(keeper2).performUpkeep(id, '0x'),
          'KeepersMustTakeTurns()',
        )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1025:19-1025:36: `.connect(keeper2)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1025:36-1025:60: `.performUpkeep(id, '0x')`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1028:9-1028:64: `await registry.connect(keeper1).performUpkeep(id, '0x')`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1028:23-1028:40: `.connect(keeper1)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1028:40-1028:64: `.performUpkeep(id, '0x')`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1032:9-1032:51: `await mock.setPerformGasToBurn(executeGas)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1032:19-1032:51: `.setPerformGasToBurn(executeGas)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1033:9-1033:39: `await mock.setCanPerform(true)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1033:19-1033:39: `.setCanPerform(true)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1034:31-1034:57: `.add(PERFORM_GAS_OVERHEAD)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1036:34-1037:28: `
          .connect(keeper1)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1037:28-1038:61: `
          .performUpkeep(id, performData, { gasLimit: gas })`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1039:33-1039:40: `.wait()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1046:60-1046:73: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1052:63-1053:26: `
          .connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1053:26-1054:55: `
          .deploy(linkToken.address, registry.address)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1055:34-1056:26: `
          .connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1056:26-1062:12: `
          .registerUpkeep(
            autoFunderUpkeep.address,
            executeGas,
            autoFunderUpkeep.address,
            emptyBytes,
          )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1064:9-1064:53: `await autoFunderUpkeep.setUpkeepId(upkeepID)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1064:31-1064:53: `.setUpkeepId(upkeepID)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1066:9-1066:80: `await linkToken.connect(owner).approve(registry.address, toWei('1000'))`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1066:24-1066:39: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1066:39-1066:80: `.approve(registry.address, toWei('1000'))`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1067:9-1069:61: `await linkToken
          .connect(owner)
          .transfer(autoFunderUpkeep.address, toWei('1000'))`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1067:24-1068:26: `
          .connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1068:26-1069:61: `
          .transfer(autoFunderUpkeep.address, toWei('1000'))`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1070:40-1070:72: `.getMaxPaymentForGas(executeGas)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1074:9-1074:73: `await registry.connect(owner).addFunds(upkeepID, initialBalance)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1074:23-1074:38: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1074:38-1074:73: `.addFunds(upkeepID, initialBalance)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1075:9-1075:50: `await autoFunderUpkeep.setAutoFundLink(0)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1075:31-1075:50: `.setAutoFundLink(0)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1076:9-1076:51: `await autoFunderUpkeep.setIsEligible(true)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1076:31-1076:51: `.setIsEligible(true)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1077:9-1077:70: `await registry.connect(keeper1).performUpkeep(upkeepID, '0x')`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1077:23-1077:40: `.connect(keeper1)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1077:40-1077:70: `.performUpkeep(upkeepID, '0x')`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1079:48-1079:68: `.getUpkeep(upkeepID)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1080:40-1080:59: `.lt(initialBalance)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1081:40-1081:76: `.gte(initialBalance.sub(maxPayment))`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1081:59-1081:75: `.sub(maxPayment)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1084:9-1084:43: `initialBalance = postUpkeepBalance`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1086:9-1086:64: `await autoFunderUpkeep.setAutoFundLink(autoTopupAmount)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1086:31-1086:64: `.setAutoFundLink(autoTopupAmount)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1087:9-1087:51: `await autoFunderUpkeep.setIsEligible(true)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1087:31-1087:51: `.setIsEligible(true)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1088:9-1088:70: `await registry.connect(keeper2).performUpkeep(upkeepID, '0x')`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1088:23-1088:40: `.connect(keeper2)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1088:40-1088:70: `.performUpkeep(upkeepID, '0x')`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1090:9-1090:73: `postUpkeepBalance = (await registry.getUpkeep(upkeepID)).balance`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1090:44-1090:64: `.getUpkeep(upkeepID)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1093:28-1095:12: `.gte(
            initialBalance.add(autoTopupAmount).sub(maxPayment),
          )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1094:27-1094:48: `.add(autoTopupAmount)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1094:48-1094:64: `.sub(maxPayment)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1100:63-1101:26: `
          .connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1101:26-1102:55: `
          .deploy(linkToken.address, registry.address)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1103:34-1104:26: `
          .connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1104:26-1110:12: `
          .registerUpkeep(
            autoFunderUpkeep.address,
            executeGas,
            autoFunderUpkeep.address,
            emptyBytes,
          )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1112:9-1112:53: `await autoFunderUpkeep.setUpkeepId(upkeepID)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1112:31-1112:53: `.setUpkeepId(upkeepID)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1114:9-1114:80: `await linkToken.connect(owner).approve(registry.address, toWei('1000'))`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1114:24-1114:39: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1114:39-1114:80: `.approve(registry.address, toWei('1000'))`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1115:9-1115:71: `await registry.connect(owner).addFunds(upkeepID, toWei('100'))`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1115:23-1115:38: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1115:38-1115:71: `.addFunds(upkeepID, toWei('100'))`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1116:9-1116:51: `await autoFunderUpkeep.setIsEligible(true)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1116:31-1116:51: `.setIsEligible(true)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1117:9-1117:53: `await autoFunderUpkeep.setShouldCancel(true)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1117:31-1117:53: `.setShouldCancel(true)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1119:42-1119:62: `.getUpkeep(upkeepID)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1123:9-1123:70: `await registry.connect(keeper1).performUpkeep(upkeepID, '0x')`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1123:23-1123:40: `.connect(keeper1)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1123:40-1123:70: `.performUpkeep(upkeepID, '0x')`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1126:9-1126:58: `registration = await registry.getUpkeep(upkeepID)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1126:38-1126:58: `.getUpkeep(upkeepID)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1128:36-1128:54: `.lt(oldExpiration)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1141:7-1146:8: `await evmRevert(
        registry
          .connect(owner)
          .withdrawFunds(id.add(1), await payee1.getAddress()),
        'OnlyCallableByAdmin()',
      )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1142:17-1143:26: `
          .connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1143:26-1144:63: `
          .withdrawFunds(id.add(1), await payee1.getAddress())`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1144:28-1144:35: `.add(1)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1144:49-1144:62: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1150:7-1153:8: `await evmRevert(
        registry.connect(admin).withdrawFunds(id, await payee1.getAddress()),
        'UpkeepNotCanceled()',
      )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1151:17-1151:32: `.connect(admin)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1151:32-1151:77: `.withdrawFunds(id, await payee1.getAddress())`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1151:63-1151:76: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1157:7-1160:8: `await evmRevert(
        registry.connect(admin).withdrawFunds(id, zeroAddress),
        'InvalidRecipient()',
      )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1158:17-1158:32: `.connect(admin)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1158:32-1158:63: `.withdrawFunds(id, zeroAddress)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1169:45-1171:10: `.balanceOf(
          await payee1.getAddress(),
        )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1170:23-1170:36: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1172:47-1172:75: `.balanceOf(registry.address)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1174:42-1174:56: `.getUpkeep(id)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1177:9-1179:56: `await registry
          .connect(admin)
          .withdrawFunds(id, await payee1.getAddress())`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1177:23-1178:26: `
          .connect(admin)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1178:26-1179:56: `
          .withdrawFunds(id, await payee1.getAddress())`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1179:42-1179:55: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1181:44-1181:81: `.balanceOf(await payee1.getAddress())`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1181:67-1181:80: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1182:46-1182:74: `.balanceOf(registry.address)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1184:35-1184:56: `.add(previousBalance)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1184:56-1184:72: `.eq(payee1After)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1185:37-1185:58: `.sub(previousBalance)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1185:58-1185:76: `.eq(registryAfter)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1187:9-1187:52: `registration = await registry.getUpkeep(id)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1187:38-1187:52: `.getUpkeep(id)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1188:37-1188:56: `.balance.toNumber()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1193:9-1206:11: `await registry.connect(owner).setConfig({
          paymentPremiumPPB,
          flatFeeMicroLink,
          blockCountPerTurn,
          checkGasLimit,
          stalenessSeconds,
          gasCeilingMultiplier,
          minUpkeepSpend,
          maxPerformGas,
          fallbackGasPrice,
          fallbackLinkPrice,
          transcoder: transcoder.address,
          registrar: ethers.constants.AddressZero,
        })`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1193:23-1193:38: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1193:38-1206:11: `.setConfig({
          paymentPremiumPPB,
          flatFeeMicroLink,
          blockCountPerTurn,
          checkGasLimit,
          stalenessSeconds,
          gasCeilingMultiplier,
          minUpkeepSpend,
          maxPerformGas,
          fallbackGasPrice,
          fallbackLinkPrice,
          transcoder: transcoder.address,
          registrar: ethers.constants.AddressZero,
        })`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1208:45-1210:10: `.balanceOf(
          await payee1.getAddress(),
        )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1209:23-1209:36: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1211:43-1211:57: `.getUpkeep(id)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1212:42-1212:53: `.getState()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1215:39-1215:57: `.sub(upkeepBefore)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1216:45-1216:62: `.sub(amountSpent)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1218:9-1220:56: `await registry
          .connect(admin)
          .withdrawFunds(id, await payee1.getAddress())`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1218:23-1219:26: `
          .connect(admin)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1219:26-1220:56: `
          .withdrawFunds(id, await payee1.getAddress())`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1220:42-1220:55: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1222:44-1222:81: `.balanceOf(await payee1.getAddress())`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1222:67-1222:80: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1223:42-1223:56: `.getUpkeep(id)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1224:41-1224:52: `.getState()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1230:23-1230:62: `.add(upkeepBefore.sub(cancellationFee))`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1230:40-1230:61: `.sub(cancellationFee)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1230:62-1230:78: `.eq(payee1After)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1232:33-1232:53: `.eq(cancellationFee)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1238:9-1251:11: `await registry.connect(owner).setConfig({
          paymentPremiumPPB,
          flatFeeMicroLink,
          blockCountPerTurn,
          checkGasLimit,
          stalenessSeconds,
          gasCeilingMultiplier,
          minUpkeepSpend,
          maxPerformGas,
          fallbackGasPrice,
          fallbackLinkPrice,
          transcoder: transcoder.address,
          registrar: ethers.constants.AddressZero,
        })`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1238:23-1238:38: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1238:38-1251:11: `.setConfig({
          paymentPremiumPPB,
          flatFeeMicroLink,
          blockCountPerTurn,
          checkGasLimit,
          stalenessSeconds,
          gasCeilingMultiplier,
          minUpkeepSpend,
          maxPerformGas,
          fallbackGasPrice,
          fallbackLinkPrice,
          transcoder: transcoder.address,
          registrar: ethers.constants.AddressZero,
        })`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1252:45-1254:10: `.balanceOf(
          await payee1.getAddress(),
        )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1253:23-1253:36: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1255:43-1255:57: `.getUpkeep(id)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1256:42-1256:53: `.getState()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1259:9-1261:56: `await registry
          .connect(admin)
          .withdrawFunds(id, await payee1.getAddress())`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1259:23-1260:26: `
          .connect(admin)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1260:26-1261:56: `
          .withdrawFunds(id, await payee1.getAddress())`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1261:42-1261:55: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1262:44-1262:81: `.balanceOf(await payee1.getAddress())`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1262:67-1262:80: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1263:41-1263:52: `.getState()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1264:42-1264:56: `.getUpkeep(id)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1268:34-1268:51: `.eq(payee1Before)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1269:33-1269:50: `.eq(upkeepBefore)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1274:39-1274:49: `.from(420)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1275:9-1288:11: `await registry.connect(owner).setConfig({
          paymentPremiumPPB,
          flatFeeMicroLink,
          blockCountPerTurn,
          checkGasLimit,
          stalenessSeconds,
          gasCeilingMultiplier,
          minUpkeepSpend,
          maxPerformGas,
          fallbackGasPrice,
          fallbackLinkPrice,
          transcoder: transcoder.address,
          registrar: ethers.constants.AddressZero,
        })`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1275:23-1275:38: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1275:38-1288:11: `.setConfig({
          paymentPremiumPPB,
          flatFeeMicroLink,
          blockCountPerTurn,
          checkGasLimit,
          stalenessSeconds,
          gasCeilingMultiplier,
          minUpkeepSpend,
          maxPerformGas,
          fallbackGasPrice,
          fallbackLinkPrice,
          transcoder: transcoder.address,
          registrar: ethers.constants.AddressZero,
        })`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1289:45-1291:10: `.balanceOf(
          await payee1.getAddress(),
        )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1290:23-1290:36: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1292:43-1292:57: `.getUpkeep(id)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1293:42-1293:53: `.getState()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1296:9-1298:56: `await registry
          .connect(admin)
          .withdrawFunds(id, await payee1.getAddress())`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1296:23-1297:26: `
          .connect(admin)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1297:26-1298:56: `
          .withdrawFunds(id, await payee1.getAddress())`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1298:42-1298:55: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1299:44-1299:81: `.balanceOf(await payee1.getAddress())`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1299:67-1299:80: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1300:41-1300:52: `.getState()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1301:42-1301:56: `.getUpkeep(id)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1307:35-1307:53: `.add(upkeepBefore)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1307:53-1307:69: `.eq(payee1After)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1314:7-1317:8: `await evmRevert(
        registry.connect(keeper1).withdrawOwnerFunds(),
        'Only callable by owner',
      )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1315:17-1315:34: `.connect(keeper1)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1315:34-1315:55: `.withdrawOwnerFunds()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1321:7-1321:79: `await linkToken.connect(keeper1).approve(registry.address, toWei('100'))`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1321:22-1321:39: `.connect(keeper1)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1321:39-1321:79: `.approve(registry.address, toWei('100'))`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1322:7-1322:65: `await registry.connect(keeper1).addFunds(id, toWei('100'))`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1322:21-1322:38: `.connect(keeper1)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1322:38-1322:65: `.addFunds(id, toWei('100'))`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1325:7-1338:9: `await registry.connect(owner).setConfig({
        paymentPremiumPPB,
        flatFeeMicroLink,
        blockCountPerTurn,
        checkGasLimit,
        stalenessSeconds,
        gasCeilingMultiplier,
        minUpkeepSpend,
        maxPerformGas,
        fallbackGasPrice,
        fallbackLinkPrice,
        transcoder: transcoder.address,
        registrar: ethers.constants.AddressZero,
      })`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1325:21-1325:36: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1325:36-1338:9: `.setConfig({
        paymentPremiumPPB,
        flatFeeMicroLink,
        blockCountPerTurn,
        checkGasLimit,
        stalenessSeconds,
        gasCeilingMultiplier,
        minUpkeepSpend,
        maxPerformGas,
        fallbackGasPrice,
        fallbackLinkPrice,
        transcoder: transcoder.address,
        registrar: ethers.constants.AddressZero,
      })`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1339:42-1339:56: `.getUpkeep(id)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1340:42-1340:78: `.balanceOf(await owner.getAddress())`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1340:64-1340:77: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1342:7-1342:53: `await registry.connect(owner).cancelUpkeep(id)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1342:21-1342:36: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1342:36-1342:53: `.cancelUpkeep(id)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1343:7-1343:81: `await registry.connect(admin).withdrawFunds(id, await payee1.getAddress())`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1343:21-1343:36: `.connect(admin)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1343:36-1343:81: `.withdrawFunds(id, await payee1.getAddress())`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1343:67-1343:80: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1345:49-1345:60: `.getState()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1347:41-1347:59: `.eq(upkeepBalance)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1350:7-1350:57: `await registry.connect(owner).withdrawOwnerFunds()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1350:21-1350:36: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1350:36-1350:57: `.withdrawOwnerFunds()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1352:7-1352:80: `ownerRegistryBalance = (await registry.getState()).state.ownerLinkBalance`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1352:45-1352:56: `.getState()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1353:41-1353:77: `.balanceOf(await owner.getAddress())`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1353:63-1353:76: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1356:41-1356:65: `.eq(BigNumber.from('0'))`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1356:54-1356:64: `.from('0')`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1359:32-1359:51: `.add(upkeepBalance)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1359:51-1359:66: `.eq(ownerAfter)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1365:7-1368:8: `await evmRevert(
        registry.connect(owner).cancelUpkeep(id.add(1)),
        'CannotCancel()',
      )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1366:17-1366:32: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1366:32-1366:56: `.cancelUpkeep(id.add(1))`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1366:48-1366:55: `.add(1)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1372:7-1375:8: `await evmRevert(
        registry.connect(keeper1).cancelUpkeep(id),
        'OnlyCallableByOwnerOrAdmin()',
      )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1373:17-1373:34: `.connect(keeper1)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1373:34-1373:51: `.cancelUpkeep(id)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1380:34-1380:49: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1380:49-1380:66: `.cancelUpkeep(id)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1381:33-1381:40: `.wait()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1382:44-1382:58: `.getUpkeep(id)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1384:23-1384:54: `.maxValidBlocknumber.toNumber()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1390:34-1390:49: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1390:49-1390:66: `.cancelUpkeep(id)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1391:33-1391:40: `.wait()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1398:9-1398:55: `await registry.connect(owner).cancelUpkeep(id)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1398:23-1398:38: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1398:38-1398:55: `.cancelUpkeep(id)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1400:9-1403:10: `await evmRevert(
          registry.connect(keeper2).performUpkeep(id, '0x'),
          'UpkeepNotActive()',
        )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1401:19-1401:36: `.connect(keeper2)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1401:36-1401:60: `.performUpkeep(id, '0x')`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1407:9-1407:55: `await registry.connect(owner).cancelUpkeep(id)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1407:23-1407:38: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1407:38-1407:55: `.cancelUpkeep(id)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1408:9-1411:10: `await evmRevert(
          registry.connect(owner).cancelUpkeep(id),
          'CannotCancel()',
        )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1409:19-1409:34: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1409:34-1409:51: `.cancelUpkeep(id)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1424:11-1424:57: `await registry.connect(owner).cancelUpkeep(id)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1424:25-1424:40: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1424:40-1424:57: `.cancelUpkeep(id)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1426:46-1426:60: `.getUpkeep(id)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1428:38-1428:56: `.lt(oldExpiration)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1437:34-1437:49: `.connect(admin)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1437:49-1437:66: `.cancelUpkeep(id)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1438:33-1438:40: `.wait()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1439:44-1439:58: `.getUpkeep(id)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1441:23-1441:54: `.maxValidBlocknumber.toNumber()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1447:34-1447:49: `.connect(admin)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1447:49-1447:66: `.cancelUpkeep(id)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1448:33-1448:40: `.wait()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1465:9-1465:79: `await linkToken.connect(owner).approve(registry.address, toWei('100'))`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1465:24-1465:39: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1465:39-1465:79: `.approve(registry.address, toWei('100'))`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1466:9-1466:65: `await registry.connect(owner).addFunds(id, toWei('100'))`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1466:23-1466:38: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1466:38-1466:65: `.addFunds(id, toWei('100'))`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1467:9-1467:55: `await registry.connect(admin).cancelUpkeep(id)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1467:23-1467:38: `.connect(admin)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1467:38-1467:55: `.cancelUpkeep(id)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1468:9-1468:64: `await registry.connect(keeper2).performUpkeep(id, '0x')`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1468:23-1468:40: `.connect(keeper2)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1468:40-1468:64: `.performUpkeep(id, '0x')`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1471:11-1471:53: `await ethers.provider.send('evm_mine', [])`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1471:23-1471:53: `.provider.send('evm_mine', [])`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1474:9-1477:10: `await evmRevert(
          registry.connect(keeper2).performUpkeep(id, '0x'),
          'UpkeepNotActive()',
        )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1475:19-1475:36: `.connect(keeper2)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1475:36-1475:60: `.performUpkeep(id, '0x')`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1481:9-1481:55: `await registry.connect(admin).cancelUpkeep(id)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1481:23-1481:38: `.connect(admin)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1481:38-1481:55: `.cancelUpkeep(id)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1483:9-1486:10: `await evmRevert(
          registry.connect(admin).cancelUpkeep(id),
          'CannotCancel()',
        )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1484:19-1484:34: `.connect(admin)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1484:34-1484:51: `.cancelUpkeep(id)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1499:9-1499:55: `await registry.connect(admin).cancelUpkeep(id)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1499:23-1499:38: `.connect(admin)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1499:38-1499:55: `.cancelUpkeep(id)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1502:11-1502:53: `await ethers.provider.send('evm_mine', [])`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1502:23-1502:53: `.provider.send('evm_mine', [])`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1505:9-1508:10: `await evmRevert(
          registry.connect(owner).cancelUpkeep(id),
          'CannotCancel()',
        )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1506:19-1506:34: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1506:34-1506:51: `.cancelUpkeep(id)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1521:7-1529:8: `await evmRevert(
        registry
          .connect(payee2)
          .withdrawPayment(
            await keeper1.getAddress(),
            await nonkeeper.getAddress(),
          ),
        'OnlyCallableByPayee()',
      )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1522:17-1523:27: `
          .connect(payee2)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1523:27-1527:12: `
          .withdrawPayment(
            await keeper1.getAddress(),
            await nonkeeper.getAddress(),
          )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1525:26-1525:39: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1526:28-1526:41: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1533:7-1538:8: `await evmRevert(
        registry
          .connect(payee2)
          .withdrawPayment(await keeper1.getAddress(), zeroAddress),
        'InvalidRecipient()',
      )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1534:17-1535:27: `
          .connect(payee2)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1535:27-1536:68: `
          .withdrawPayment(await keeper1.getAddress(), zeroAddress)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1536:41-1536:54: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1542:33-1542:46: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1544:23-1544:65: `.getKeeperInfo(await keeper1.getAddress())`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1544:51-1544:64: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1546:49-1546:63: `.getUpkeep(id)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1547:43-1547:57: `.balanceOf(to)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1548:49-1548:77: `.balanceOf(registry.address)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1551:7-1553:57: `await registry
        .connect(payee1)
        .withdrawPayment(await keeper1.getAddress(), to)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1551:21-1552:25: `
        .connect(payee1)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1552:25-1553:57: `
        .withdrawPayment(await keeper1.getAddress(), to)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1553:39-1553:52: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1556:23-1556:65: `.getKeeperInfo(await keeper1.getAddress())`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1556:51-1556:64: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1558:48-1558:62: `.getUpkeep(id)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1559:42-1559:56: `.balanceOf(to)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1560:48-1560:76: `.balanceOf(registry.address)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1562:32-1562:54: `.eq(BigNumber.from(0))`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1562:45-1562:53: `.from(0)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1563:39-1563:61: `.eq(registrationAfter)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1564:33-1564:51: `.add(keeperBefore)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1564:51-1564:67: `.eq(toLinkAfter)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1565:39-1565:57: `.sub(keeperBefore)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1565:57-1565:79: `.eq(registryLinkAfter)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1569:38-1569:80: `.getKeeperInfo(await keeper1.getAddress())`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1569:66-1569:79: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1571:32-1572:25: `
        .connect(payee1)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1572:25-1576:10: `
        .withdrawPayment(
          await keeper1.getAddress(),
          await nonkeeper.getAddress(),
        )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1574:24-1574:37: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1575:26-1575:39: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1590:7-1598:8: `await evmRevert(
        registry
          .connect(payee2)
          .transferPayeeship(
            await keeper1.getAddress(),
            await payee2.getAddress(),
          ),
        'OnlyCallableByPayee()',
      )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1591:17-1592:27: `
          .connect(payee2)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1592:27-1596:12: `
          .transferPayeeship(
            await keeper1.getAddress(),
            await payee2.getAddress(),
          )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1594:26-1594:39: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1595:25-1595:38: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1602:7-1610:8: `await evmRevert(
        registry
          .connect(payee1)
          .transferPayeeship(
            await keeper1.getAddress(),
            await payee1.getAddress(),
          ),
        'ValueNotChanged()',
      )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1603:17-1604:27: `
          .connect(payee1)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1604:27-1608:12: `
          .transferPayeeship(
            await keeper1.getAddress(),
            await payee1.getAddress(),
          )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1606:26-1606:39: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1607:25-1607:38: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1614:7-1619:10: `await registry
        .connect(payee1)
        .transferPayeeship(
          await keeper1.getAddress(),
          await payee2.getAddress(),
        )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1614:21-1615:25: `
        .connect(payee1)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1615:25-1619:10: `
        .transferPayeeship(
          await keeper1.getAddress(),
          await payee2.getAddress(),
        )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1617:24-1617:37: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1618:23-1618:36: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1621:34-1621:76: `.getKeeperInfo(await keeper1.getAddress())`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1621:62-1621:75: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1622:32-1622:45: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1626:32-1627:25: `
        .connect(payee1)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1627:25-1631:10: `
        .transferPayeeship(
          await keeper1.getAddress(),
          await payee2.getAddress(),
        )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1629:24-1629:37: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1630:23-1630:36: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1642:7-1647:10: `await registry
        .connect(payee1)
        .transferPayeeship(
          await keeper1.getAddress(),
          await payee2.getAddress(),
        )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1642:21-1643:25: `
        .connect(payee1)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1643:25-1647:10: `
        .transferPayeeship(
          await keeper1.getAddress(),
          await payee2.getAddress(),
        )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1645:24-1645:37: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1646:23-1646:36: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1649:32-1650:25: `
        .connect(payee1)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1650:25-1654:10: `
        .transferPayeeship(
          await keeper1.getAddress(),
          await payee2.getAddress(),
        )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1652:24-1652:37: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1653:23-1653:36: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1655:31-1655:38: `.wait()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1671:7-1674:8: `await evmRevert(
        registry.connect(payee1).acceptPayeeship(await keeper1.getAddress()),
        'OnlyCallableByProposedPayee()',
      )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1672:17-1672:33: `.connect(payee1)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1672:33-1672:77: `.acceptPayeeship(await keeper1.getAddress())`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1672:63-1672:76: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1678:32-1679:25: `
        .connect(payee2)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1679:25-1680:53: `
        .acceptPayeeship(await keeper1.getAddress())`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1680:39-1680:52: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1691:7-1691:81: `await registry.connect(payee2).acceptPayeeship(await keeper1.getAddress())`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1691:21-1691:37: `.connect(payee2)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1691:37-1691:81: `.acceptPayeeship(await keeper1.getAddress())`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1691:67-1691:80: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1693:34-1693:76: `.getKeeperInfo(await keeper1.getAddress())`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1693:62-1693:75: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1694:32-1694:45: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1709:7-1725:8: `await evmRevert(
        registry.connect(payee1).setConfig({
          paymentPremiumPPB: payment,
          flatFeeMicroLink: flatFee,
          blockCountPerTurn: checks,
          checkGasLimit: maxGas,
          stalenessSeconds: staleness,
          gasCeilingMultiplier,
          minUpkeepSpend,
          maxPerformGas,
          fallbackGasPrice: fbGasEth,
          fallbackLinkPrice: fbLinkEth,
          transcoder: transcoder.address,
          registrar: ethers.constants.AddressZero,
        }),
        'Only callable by owner',
      )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1710:17-1710:33: `.connect(payee1)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1710:33-1723:11: `.setConfig({
          paymentPremiumPPB: payment,
          flatFeeMicroLink: flatFee,
          blockCountPerTurn: checks,
          checkGasLimit: maxGas,
          stalenessSeconds: staleness,
          gasCeilingMultiplier,
          minUpkeepSpend,
          maxPerformGas,
          fallbackGasPrice: fbGasEth,
          fallbackLinkPrice: fbLinkEth,
          transcoder: transcoder.address,
          registrar: ethers.constants.AddressZero,
        })`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1729:34-1729:45: `.getState()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1730:38-1730:64: `.eq(old.paymentPremiumPPB)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1731:37-1731:62: `.eq(old.flatFeeMicroLink)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1732:38-1732:64: `.eq(old.blockCountPerTurn)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1733:37-1733:62: `.eq(old.stalenessSeconds)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1734:41-1734:70: `.eq(old.gasCeilingMultiplier)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1736:7-1749:9: `await registry.connect(owner).setConfig({
        paymentPremiumPPB: payment,
        flatFeeMicroLink: flatFee,
        blockCountPerTurn: checks,
        checkGasLimit: maxGas,
        stalenessSeconds: staleness,
        gasCeilingMultiplier: ceiling,
        minUpkeepSpend,
        maxPerformGas,
        fallbackGasPrice: fbGasEth,
        fallbackLinkPrice: fbLinkEth,
        transcoder: transcoder.address,
        registrar: ethers.constants.AddressZero,
      })`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1736:21-1736:36: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1736:36-1749:9: `.setConfig({
        paymentPremiumPPB: payment,
        flatFeeMicroLink: flatFee,
        blockCountPerTurn: checks,
        checkGasLimit: maxGas,
        stalenessSeconds: staleness,
        gasCeilingMultiplier: ceiling,
        minUpkeepSpend,
        maxPerformGas,
        fallbackGasPrice: fbGasEth,
        fallbackLinkPrice: fbLinkEth,
        transcoder: transcoder.address,
        registrar: ethers.constants.AddressZero,
      })`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1751:38-1751:49: `.getState()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1758:27-1758:55: `.fallbackGasPrice.toNumber()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1759:27-1759:56: `.fallbackLinkPrice.toNumber()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1763:32-1763:47: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1763:47-1776:9: `.setConfig({
        paymentPremiumPPB: payment,
        flatFeeMicroLink: flatFee,
        blockCountPerTurn: checks,
        checkGasLimit: maxGas,
        stalenessSeconds: staleness,
        gasCeilingMultiplier: ceiling,
        minUpkeepSpend,
        maxPerformGas,
        fallbackGasPrice: fbGasEth,
        fallbackLinkPrice: fbLinkEth,
        transcoder: transcoder.address,
        registrar: ethers.constants.AddressZero,
      })`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1798:26-1798:74: `.utils.defaultAbiCoder.encode(['uint256'], [id])`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1800:7-1805:8: `await evmRevert(
        registry
          .connect(keeper1)
          .onTokenTransfer(await keeper1.getAddress(), amount, data),
        'OnlyCallableByLINKToken()',
      )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1801:17-1802:28: `
          .connect(keeper1)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1802:28-1803:69: `
          .onTokenTransfer(await keeper1.getAddress(), amount, data)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1803:41-1803:54: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1809:30-1812:8: `.utils.defaultAbiCoder.encode(
        ['uint256', 'uint256'],
        ['33', '34'],
      )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1815:7-1819:8: `await evmRevert(
        linkToken
          .connect(owner)
          .transferAndCall(registry.address, amount, longData),
      )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1816:18-1817:26: `
          .connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1817:26-1818:63: `
          .transferAndCall(registry.address, amount, longData)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1820:7-1824:8: `await evmRevert(
        linkToken
          .connect(owner)
          .transferAndCall(registry.address, amount, shortData),
      )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1821:18-1822:26: `
          .connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1822:26-1823:64: `
          .transferAndCall(registry.address, amount, shortData)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1828:7-1828:53: `await registry.connect(admin).cancelUpkeep(id)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1828:21-1828:36: `.connect(admin)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1828:36-1828:53: `.cancelUpkeep(id)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1829:7-1832:8: `await evmRevert(
        registry.connect(keeper1).addFunds(id, amount),
        'UpkeepNotActive()',
      )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1830:17-1830:34: `.connect(keeper1)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1830:34-1830:55: `.addFunds(id, amount)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1836:26-1836:74: `.utils.defaultAbiCoder.encode(['uint256'], [id])`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1838:37-1838:51: `.getUpkeep(id)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1839:7-1841:57: `await linkToken
        .connect(owner)
        .transferAndCall(registry.address, amount, data)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1839:22-1840:24: `
        .connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1840:24-1841:57: `
        .transferAndCall(registry.address, amount, data)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1842:36-1842:50: `.getUpkeep(id)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1844:27-1844:39: `.add(amount)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1844:39-1844:49: `.eq(after)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1919:7-1922:8: `await evmRevert(
        registry.connect(keeper1).recoverFunds(),
        'Only callable by owner',
      )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1920:17-1920:34: `.connect(keeper1)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1920:34-1920:49: `.recoverFunds()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1926:44-1926:72: `.balanceOf(registry.address)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1928:7-1928:50: `await linkToken.balanceOf(registry.address)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1928:22-1928:50: `.balanceOf(registry.address)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1930:7-1930:51: `await registry.connect(owner).recoverFunds()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1930:21-1930:36: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1930:36-1930:51: `.recoverFunds()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1931:43-1931:71: `.balanceOf(registry.address)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1932:34-1932:61: `.eq(balanceAfter.add(sent))`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1932:50-1932:60: `.add(sent)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1938:7-1941:8: `await evmRevert(
        registry.connect(keeper1).pause(),
        'Only callable by owner',
      )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1939:17-1939:34: `.connect(keeper1)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1939:34-1939:42: `.pause()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1945:36-1945:45: `.paused()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1947:7-1947:44: `await registry.connect(owner).pause()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1947:21-1947:36: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1947:36-1947:44: `.pause()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1949:35-1949:44: `.paused()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1959:7-1962:8: `await evmRevert(
        registry.connect(keeper1).unpause(),
        'Only callable by owner',
      )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1960:17-1960:34: `.connect(keeper1)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1960:34-1960:44: `.unpause()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1966:35-1966:44: `.paused()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1968:7-1968:46: `await registry.connect(owner).unpause()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1968:21-1968:36: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1968:36-1968:46: `.unpause()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1970:36-1970:45: `.paused()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1985:13-1998:15: `await registry.connect(owner).setConfig({
              paymentPremiumPPB: premium,
              flatFeeMicroLink: flatFee,
              blockCountPerTurn,
              checkGasLimit,
              stalenessSeconds,
              gasCeilingMultiplier,
              minUpkeepSpend,
              maxPerformGas,
              fallbackGasPrice,
              fallbackLinkPrice,
              transcoder: transcoder.address,
              registrar: ethers.constants.AddressZero,
            })`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1985:27-1985:42: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1985:42-1998:15: `.setConfig({
              paymentPremiumPPB: premium,
              flatFeeMicroLink: flatFee,
              blockCountPerTurn,
              checkGasLimit,
              stalenessSeconds,
              gasCeilingMultiplier,
              minUpkeepSpend,
              maxPerformGas,
              fallbackGasPrice,
              fallbackLinkPrice,
              transcoder: transcoder.address,
              registrar: ethers.constants.AddressZero,
            })`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:1999:41-1999:66: `.getMaxPaymentForGas(gas)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:2010:38-2010:79: `.getPeerRegistryMigrationPermission(peer)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:2012:7-2012:65: `await registry.setPeerRegistryMigrationPermission(peer, 1)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:2012:21-2012:65: `.setPeerRegistryMigrationPermission(peer, 1)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:2013:7-2013:75: `permission = await registry.getPeerRegistryMigrationPermission(peer)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:2013:34-2013:75: `.getPeerRegistryMigrationPermission(peer)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:2015:7-2015:65: `await registry.setPeerRegistryMigrationPermission(peer, 2)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:2015:21-2015:65: `.setPeerRegistryMigrationPermission(peer, 2)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:2016:7-2016:75: `permission = await registry.getPeerRegistryMigrationPermission(peer)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:2016:34-2016:75: `.getPeerRegistryMigrationPermission(peer)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:2018:7-2018:65: `await registry.setPeerRegistryMigrationPermission(peer, 0)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:2018:21-2018:65: `.setPeerRegistryMigrationPermission(peer, 0)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:2019:7-2019:75: `permission = await registry.getPeerRegistryMigrationPermission(peer)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:2019:34-2019:75: `.getPeerRegistryMigrationPermission(peer)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:2024:17-2024:32: `.connect(admin)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:2024:32-2024:77: `.setPeerRegistryMigrationPermission(peer, 10)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:2029:17-2029:32: `.connect(admin)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:2029:32-2029:76: `.setPeerRegistryMigrationPermission(peer, 1)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:2044:31-2044:45: `.getUpkeep(id)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:2045:31-2045:45: `.getUpkeep(id)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:2046:31-2046:42: `.getState()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:2048:9-2048:78: `await registry.connect(admin).migrateUpkeeps([id], registry2.address)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:2048:23-2048:38: `.connect(admin)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:2048:38-2048:78: `.migrateUpkeeps([id], registry2.address)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:2049:31-2049:42: `.getState()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:2050:32-2050:43: `.getState()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:2051:31-2051:45: `.getUpkeep(id)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:2052:31-2052:45: `.getUpkeep(id)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:2053:32-2053:46: `.getUpkeep(id)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:2054:32-2054:43: `.getState()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:2057:32-2057:46: `.getUpkeep(id)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:2060:31-2060:45: `.getUpkeep(id)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:2061:31-2061:45: `.getUpkeep(id)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:2062:31-2062:42: `.getState()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:2063:28-2064:26: `
          .connect(admin)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:2064:26-2065:51: `
          .migrateUpkeeps([id], registry2.address)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:2075:19-2075:34: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:2075:34-2075:74: `.migrateUpkeeps([id], registry2.address)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:2077:9-2077:78: `await registry.connect(admin).migrateUpkeeps([id], registry2.address)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:2077:23-2077:38: `.connect(admin)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:2077:38-2077:78: `.migrateUpkeeps([id], registry2.address)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:2084:9-2084:80: `await registry.setPeerRegistryMigrationPermission(registry2.address, 0)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:2084:23-2084:80: `.setPeerRegistryMigrationPermission(registry2.address, 0)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:2085:9-2085:80: `await registry2.setPeerRegistryMigrationPermission(registry.address, 0)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:2085:24-2085:80: `.setPeerRegistryMigrationPermission(registry.address, 0)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:2086:30-2086:70: `.migrateUpkeeps([id], registry2.address)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:2089:9-2089:80: `await registry.setPeerRegistryMigrationPermission(registry2.address, 1)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:2089:23-2089:80: `.setPeerRegistryMigrationPermission(registry2.address, 1)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:2090:9-2090:80: `await registry2.setPeerRegistryMigrationPermission(registry.address, 0)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:2090:24-2090:80: `.setPeerRegistryMigrationPermission(registry.address, 0)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:2091:30-2091:70: `.migrateUpkeeps([id], registry2.address)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:2094:9-2094:80: `await registry.setPeerRegistryMigrationPermission(registry2.address, 0)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:2094:23-2094:80: `.setPeerRegistryMigrationPermission(registry2.address, 0)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:2095:9-2095:80: `await registry2.setPeerRegistryMigrationPermission(registry.address, 2)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:2095:24-2095:80: `.setPeerRegistryMigrationPermission(registry.address, 2)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:2096:30-2096:70: `.migrateUpkeeps([id], registry2.address)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:2099:9-2099:80: `await registry.setPeerRegistryMigrationPermission(registry2.address, 2)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:2099:23-2099:80: `.setPeerRegistryMigrationPermission(registry2.address, 2)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:2100:9-2100:80: `await registry2.setPeerRegistryMigrationPermission(registry.address, 1)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:2100:24-2100:80: `.setPeerRegistryMigrationPermission(registry.address, 1)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:2101:30-2101:70: `.migrateUpkeeps([id], registry2.address)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:2114:7-2127:9: `await registry.connect(owner).setConfig({
        paymentPremiumPPB,
        flatFeeMicroLink: flatFee,
        blockCountPerTurn,
        checkGasLimit,
        stalenessSeconds,
        gasCeilingMultiplier: multiplier,
        minUpkeepSpend,
        maxPerformGas,
        fallbackGasPrice,
        fallbackLinkPrice,
        transcoder: transcoder.address,
        registrar: ethers.constants.AddressZero,
      })`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:2114:21-2114:36: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:2114:36-2127:9: `.setConfig({
        paymentPremiumPPB,
        flatFeeMicroLink: flatFee,
        blockCountPerTurn,
        checkGasLimit,
        stalenessSeconds,
        gasCeilingMultiplier: multiplier,
        minUpkeepSpend,
        maxPerformGas,
        fallbackGasPrice,
        fallbackLinkPrice,
        transcoder: transcoder.address,
        registrar: ethers.constants.AddressZero,
      })`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:2128:7-2128:77: `await linkToken.connect(owner).approve(registry.address, toWei('100'))`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:2128:22-2128:37: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:2128:37-2128:77: `.approve(registry.address, toWei('100'))`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:2130:33-2131:24: `
        .connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:2131:24-2137:10: `
        .registerUpkeep(
          mock.address,
          executeGas,
          await admin.getAddress(),
          emptyBytes,
        )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:2135:22-2135:35: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:2139:33-2140:24: `
        .connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:2140:24-2146:10: `
        .registerUpkeep(
          mock.address,
          executeGas,
          await admin.getAddress(),
          emptyBytes,
        )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:2144:22-2144:35: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:2148:7-2148:35: `await mock.setCanCheck(true)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:2148:17-2148:35: `.setCanCheck(true)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:2149:7-2149:37: `await mock.setCanPerform(true)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:2149:17-2149:37: `.setCanPerform(true)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:2151:42-2151:74: `.getMaxPaymentForGas(executeGas)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:2151:75-2153:8: `.sub(
        1,
      )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:2154:41-2154:73: `.getMaxPaymentForGas(executeGas)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:2155:7-2155:69: `await registry.connect(owner).addFunds(upkeepID1, minBalance1)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:2155:21-2155:36: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:2155:36-2155:69: `.addFunds(upkeepID1, minBalance1)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:2156:7-2156:69: `await registry.connect(owner).addFunds(upkeepID2, minBalance2)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:2156:21-2156:36: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:2156:36-2156:69: `.addFunds(upkeepID2, minBalance2)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:2158:7-2164:8: `await evmRevert(
        registry
          .connect(zeroAddress)
          .callStatic.checkUpkeep(upkeepID1, await keeper1.getAddress(), {
            gasPrice: callGasPrice,
          }),
      )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:2159:17-2160:32: `
          .connect(zeroAddress)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:2160:32-2163:13: `
          .callStatic.checkUpkeep(upkeepID1, await keeper1.getAddress(), {
            gasPrice: callGasPrice,
          })`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:2161:59-2161:72: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:2165:7-2169:11: `await registry
        .connect(zeroAddress)
        .callStatic.checkUpkeep(upkeepID2, await keeper1.getAddress(), {
          gasPrice: callGasPrice,
        })`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:2165:21-2166:30: `
        .connect(zeroAddress)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:2166:30-2169:11: `
        .callStatic.checkUpkeep(upkeepID2, await keeper1.getAddress(), {
          gasPrice: callGasPrice,
        })`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:2167:57-2167:70: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:2171:7-2176:8: `await evmRevert(
        registry
          .connect(keeper1)
          .performUpkeep(upkeepID1, performData, { gasLimit: extraGas }),
        'InsufficientFunds()',
      )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:2172:17-2173:28: `
          .connect(keeper1)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:2173:28-2174:73: `
          .performUpkeep(upkeepID1, performData, { gasLimit: extraGas })`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:2177:7-2179:71: `await registry
        .connect(keeper1)
        .performUpkeep(upkeepID2, performData, { gasLimit: extraGas })`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:2177:21-2178:26: `
        .connect(keeper1)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:2178:26-2179:71: `
        .performUpkeep(upkeepID2, performData, { gasLimit: extraGas })`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:2185:31-2185:41: `.from('1')`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:2186:7-2186:79: `await linkToken.connect(keeper1).approve(registry.address, toWei('100'))`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:2186:22-2186:39: `.connect(keeper1)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:2186:39-2186:79: `.approve(registry.address, toWei('100'))`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:2187:7-2187:35: `await mock.setCanCheck(true)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:2187:17-2187:35: `.setCanCheck(true)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:2188:7-2188:37: `await mock.setCanPerform(true)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:2188:17-2188:37: `.setCanPerform(true)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:2189:40-2189:67: `.getMinBalanceForUpkeep(id)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:2190:32-2190:44: `.sub(oneWei)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:2191:7-2191:59: `await registry.connect(keeper1).addFunds(id, tooLow)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:2191:21-2191:38: `.connect(keeper1)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:2191:38-2191:59: `.addFunds(id, tooLow)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:2192:7-2197:8: `await evmRevert(
        registry
          .connect(zeroAddress)
          .callStatic.checkUpkeep(id, await keeper1.getAddress()),
        'InsufficientFunds()',
      )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:2193:17-2194:32: `
          .connect(zeroAddress)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:2194:32-2195:66: `
          .callStatic.checkUpkeep(id, await keeper1.getAddress())`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:2195:52-2195:65: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:2198:7-2198:59: `await registry.connect(keeper1).addFunds(id, oneWei)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:2198:21-2198:38: `.connect(keeper1)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:2198:38-2198:59: `.addFunds(id, oneWei)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:2199:7-2201:64: `await registry
        .connect(zeroAddress)
        .callStatic.checkUpkeep(id, await keeper1.getAddress())`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:2199:21-2200:30: `
        .connect(zeroAddress)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:2200:30-2201:64: `
        .callStatic.checkUpkeep(id, await keeper1.getAddress())`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_2.test.ts:2201:50-2201:63: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:317:44-317:61: `.typeAndVersion()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:325:7-328:8: `await evmRevert(
        registry.connect(keeper1).setKeepers([], []),
        'Only callable by owner',
      )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:326:17-326:34: `.connect(keeper1)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:326:34-326:53: `.setKeepers([], [])`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:332:7-340:8: `await evmRevert(
        registry
          .connect(owner)
          .setKeepers(
            [await keeper1.getAddress(), await keeper1.getAddress()],
            [await payee1.getAddress(), await payee1.getAddress()],
          ),
        'DuplicateEntry()',
      )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:333:17-334:26: `
          .connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:334:26-338:12: `
          .setKeepers(
            [await keeper1.getAddress(), await keeper1.getAddress()],
            [await payee1.getAddress(), await payee1.getAddress()],
          )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:336:27-336:40: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:336:55-336:68: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:337:26-337:39: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:337:53-337:66: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:344:7-352:8: `await evmRevert(
        registry
          .connect(owner)
          .setKeepers(
            [await keeper1.getAddress(), await keeper2.getAddress()],
            [await payee1.getAddress()],
          ),
        'ParameterLengthError()',
      )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:345:17-346:26: `
          .connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:346:26-350:12: `
          .setKeepers(
            [await keeper1.getAddress(), await keeper2.getAddress()],
            [await payee1.getAddress()],
          )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:348:27-348:40: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:348:55-348:68: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:349:26-349:39: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:353:7-361:8: `await evmRevert(
        registry
          .connect(owner)
          .setKeepers(
            [await keeper1.getAddress()],
            [await payee1.getAddress(), await payee2.getAddress()],
          ),
        'ParameterLengthError()',
      )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:354:17-355:26: `
          .connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:355:26-359:12: `
          .setKeepers(
            [await keeper1.getAddress()],
            [await payee1.getAddress(), await payee2.getAddress()],
          )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:357:27-357:40: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:358:26-358:39: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:358:53-358:66: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:365:7-376:8: `await evmRevert(
        registry
          .connect(owner)
          .setKeepers(
            [await keeper1.getAddress(), await keeper2.getAddress()],
            [
              await payee1.getAddress(),
              '0x0000000000000000000000000000000000000000',
            ],
          ),
        'InvalidPayee()',
      )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:366:17-367:26: `
          .connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:367:26-374:12: `
          .setKeepers(
            [await keeper1.getAddress(), await keeper2.getAddress()],
            [
              await payee1.getAddress(),
              '0x0000000000000000000000000000000000000000',
            ],
          )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:369:27-369:40: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:369:55-369:68: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:371:27-371:40: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:381:22-381:35: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:382:22-382:35: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:384:38-384:51: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:384:65-384:78: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:385:7-385:70: `await registry.connect(owner).setKeepers(oldKeepers, oldPayees)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:385:21-385:36: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:385:36-385:70: `.setKeepers(oldKeepers, oldPayees)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:386:51-386:62: `.getState()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:390:22-390:35: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:391:22-391:35: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:393:38-393:51: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:393:65-393:78: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:394:32-394:47: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:394:47-394:81: `.setKeepers(newKeepers, newPayees)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:395:51-395:62: `.getState()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:403:7-403:64: `await registry.connect(owner).setKeepers(keepers, payees)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:403:21-403:36: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:403:36-403:64: `.setKeepers(keepers, payees)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:404:7-409:10: `await registry
        .connect(owner)
        .setKeepers(
          [await keeper1.getAddress(), await keeper3.getAddress()],
          [await payee1.getAddress(), await payee3.getAddress()],
        )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:404:21-405:24: `
        .connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:405:24-409:10: `
        .setKeepers(
          [await keeper1.getAddress(), await keeper3.getAddress()],
          [await payee1.getAddress(), await payee3.getAddress()],
        )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:407:25-407:38: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:407:53-407:66: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:408:24-408:37: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:408:51-408:64: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:410:35-410:77: `.getKeeperInfo(await keeper1.getAddress())`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:410:63-410:76: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:412:37-412:79: `.getKeeperInfo(await keeper2.getAddress())`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:412:65-412:78: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:418:22-418:35: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:419:22-419:35: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:421:38-421:51: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:421:65-421:78: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:422:7-422:70: `await registry.connect(owner).setKeepers(oldKeepers, oldPayees)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:422:21-422:36: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:422:36-422:70: `.setKeepers(oldKeepers, oldPayees)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:423:51-423:62: `.getState()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:426:22-426:35: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:427:22-427:35: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:429:54-429:67: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:430:32-430:47: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:430:47-430:81: `.setKeepers(newKeepers, newPayees)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:431:51-431:62: `.getState()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:433:37-433:79: `.getKeeperInfo(await keeper2.getAddress())`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:433:65-433:78: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:434:32-434:45: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:443:7-443:64: `await registry.connect(owner).setKeepers(keepers, payees)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:443:21-443:36: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:443:36-443:64: `.setKeepers(keepers, payees)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:444:7-453:8: `await evmRevert(
        registry
          .connect(owner)
          .setKeepers(keepers, [
            await payee1.getAddress(),
            await payee2.getAddress(),
            await owner.getAddress(),
          ]),
        'InvalidPayee()',
      )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:445:17-446:26: `
          .connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:446:26-451:13: `
          .setKeepers(keepers, [
            await payee1.getAddress(),
            await payee2.getAddress(),
            await owner.getAddress(),
          ])`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:448:25-448:38: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:449:25-449:38: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:450:24-450:37: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:459:7-459:53: `await registry.connect(admin).cancelUpkeep(id)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:459:21-459:36: `.connect(admin)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:459:36-459:53: `.cancelUpkeep(id)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:461:7-464:8: `await evmRevert(
        registry.connect(admin).pauseUpkeep(id),
        'UpkeepCancelled()',
      )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:462:17-462:32: `.connect(admin)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:462:32-462:48: `.pauseUpkeep(id)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:468:7-468:52: `await registry.connect(admin).pauseUpkeep(id)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:468:21-468:36: `.connect(admin)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:468:36-468:52: `.pauseUpkeep(id)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:470:7-473:8: `await evmRevert(
        registry.connect(admin).pauseUpkeep(id),
        'OnlyUnpausedUpkeep()',
      )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:471:17-471:32: `.connect(admin)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:471:32-471:48: `.pauseUpkeep(id)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:477:7-480:8: `await evmRevert(
        registry.connect(keeper1).pauseUpkeep(id),
        'OnlyCallableByAdmin()',
      )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:478:17-478:34: `.connect(keeper1)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:478:34-478:50: `.pauseUpkeep(id)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:484:32-484:47: `.connect(admin)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:484:47-484:63: `.pauseUpkeep(id)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:487:42-487:56: `.getUpkeep(id)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:494:7-494:53: `await registry.connect(owner).cancelUpkeep(id)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:494:21-494:36: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:494:36-494:53: `.cancelUpkeep(id)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:496:7-499:8: `await evmRevert(
        registry.connect(admin).unpauseUpkeep(id),
        'UpkeepCancelled()',
      )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:497:17-497:32: `.connect(admin)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:497:32-497:50: `.unpauseUpkeep(id)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:503:7-506:8: `await evmRevert(
        registry.connect(admin).unpauseUpkeep(id),
        'OnlyPausedUpkeep()',
      )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:504:17-504:32: `.connect(admin)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:504:32-504:50: `.unpauseUpkeep(id)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:510:7-510:52: `await registry.connect(admin).pauseUpkeep(id)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:510:21-510:36: `.connect(admin)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:510:36-510:52: `.pauseUpkeep(id)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:512:42-512:56: `.getUpkeep(id)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:516:7-519:8: `await evmRevert(
        registry.connect(keeper1).unpauseUpkeep(id),
        'OnlyCallableByAdmin()',
      )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:517:17-517:34: `.connect(keeper1)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:517:34-517:52: `.unpauseUpkeep(id)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:523:7-523:52: `await registry.connect(admin).pauseUpkeep(id)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:523:21-523:36: `.connect(admin)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:523:36-523:52: `.pauseUpkeep(id)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:525:32-525:47: `.connect(admin)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:525:47-525:65: `.unpauseUpkeep(id)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:529:42-529:56: `.getUpkeep(id)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:532:39-532:64: `.getActiveUpkeepIDs(0, 0)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:539:7-542:8: `await evmRevert(
        registry.connect(keeper1).updateCheckData(id, randomBytes),
        'OnlyCallableByAdmin()',
      )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:540:17-540:34: `.connect(keeper1)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:540:34-540:67: `.updateCheckData(id, randomBytes)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:546:7-546:53: `await registry.connect(admin).cancelUpkeep(id)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:546:21-546:36: `.connect(admin)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:546:36-546:53: `.cancelUpkeep(id)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:548:7-551:8: `await evmRevert(
        registry.connect(admin).updateCheckData(id, randomBytes),
        'UpkeepCancelled()',
      )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:549:17-549:32: `.connect(admin)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:549:32-549:65: `.updateCheckData(id, randomBytes)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:555:7-555:52: `await registry.connect(admin).pauseUpkeep(id)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:555:21-555:36: `.connect(admin)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:555:36-555:52: `.pauseUpkeep(id)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:556:7-556:69: `await registry.connect(admin).updateCheckData(id, randomBytes)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:556:21-556:36: `.connect(admin)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:556:36-556:69: `.updateCheckData(id, randomBytes)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:558:42-558:56: `.getUpkeep(id)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:563:32-563:47: `.connect(admin)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:563:47-563:80: `.updateCheckData(id, randomBytes)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:568:42-568:56: `.getUpkeep(id)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:579:9-589:10: `await evmRevert(
          registry
            .connect(owner)
            .registerUpkeep(
              zeroAddress,
              executeGas,
              await admin.getAddress(),
              emptyBytes,
            ),
          'Pausable: paused',
        )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:580:19-581:28: `
            .connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:581:28-587:14: `
            .registerUpkeep(
              zeroAddress,
              executeGas,
              await admin.getAddress(),
              emptyBytes,
            )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:585:26-585:39: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:594:7-604:8: `await evmRevert(
        registry
          .connect(owner)
          .registerUpkeep(
            zeroAddress,
            executeGas,
            await admin.getAddress(),
            emptyBytes,
          ),
        'NotAContract()',
      )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:595:17-596:26: `
          .connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:596:26-602:12: `
          .registerUpkeep(
            zeroAddress,
            executeGas,
            await admin.getAddress(),
            emptyBytes,
          )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:600:24-600:37: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:608:7-618:8: `await evmRevert(
        registry
          .connect(keeper1)
          .registerUpkeep(
            mock.address,
            executeGas,
            await admin.getAddress(),
            emptyBytes,
          ),
        'OnlyCallableByOwnerOrRegistrar()',
      )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:609:17-610:28: `
          .connect(keeper1)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:610:28-616:12: `
          .registerUpkeep(
            mock.address,
            executeGas,
            await admin.getAddress(),
            emptyBytes,
          )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:614:24-614:37: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:622:7-632:8: `await evmRevert(
        registry
          .connect(owner)
          .registerUpkeep(
            mock.address,
            2299,
            await admin.getAddress(),
            emptyBytes,
          ),
        'GasLimitOutsideRange()',
      )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:623:17-624:26: `
          .connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:624:26-630:12: `
          .registerUpkeep(
            mock.address,
            2299,
            await admin.getAddress(),
            emptyBytes,
          )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:628:24-628:37: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:636:7-646:8: `await evmRevert(
        registry
          .connect(owner)
          .registerUpkeep(
            mock.address,
            5000001,
            await admin.getAddress(),
            emptyBytes,
          ),
        'GasLimitOutsideRange()',
      )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:637:17-638:26: `
          .connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:638:26-644:12: `
          .registerUpkeep(
            mock.address,
            5000001,
            await admin.getAddress(),
            emptyBytes,
          )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:642:24-642:37: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:650:32-651:24: `
        .connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:651:24-657:10: `
        .registerUpkeep(
          mock.address,
          executeGas,
          await admin.getAddress(),
          emptyBytes,
        )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:655:22-655:35: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:658:7-658:33: `id = await getUpkeepID(tx)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:662:42-662:56: `.getUpkeep(id)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:664:35-664:54: `.balance.toNumber()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:667:26-667:63: `.maxValidBlocknumber.eq('0xffffffff')`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:679:7-682:8: `await evmRevert(
        registry.connect(keeper1).addFunds(id.add(1), amount),
        'UpkeepCancelled()',
      )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:680:17-680:34: `.connect(keeper1)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:680:34-680:62: `.addFunds(id.add(1), amount)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:680:46-680:53: `.add(1)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:686:7-686:59: `await registry.connect(keeper1).addFunds(id, amount)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:686:21-686:38: `.connect(keeper1)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:686:38-686:59: `.addFunds(id, amount)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:687:42-687:56: `.getUpkeep(id)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:688:27-688:52: `.eq(registration.balance)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:692:32-692:49: `.connect(keeper1)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:692:49-692:70: `.addFunds(id, amount)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:699:7-699:53: `await registry.connect(admin).cancelUpkeep(id)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:699:21-699:36: `.connect(admin)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:699:36-699:53: `.cancelUpkeep(id)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:700:7-703:8: `await evmRevert(
        registry.connect(keeper1).addFunds(id, amount),
        'UpkeepCancelled()',
      )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:701:17-701:34: `.connect(keeper1)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:701:34-701:55: `.addFunds(id, amount)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:711:7-714:8: `await evmRevert(
        registry.connect(keeper1).setUpkeepGasLimit(id.add(1), newGasLimit),
        'UpkeepCancelled()',
      )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:712:17-712:34: `.connect(keeper1)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:712:34-712:76: `.setUpkeepGasLimit(id.add(1), newGasLimit)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:712:55-712:62: `.add(1)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:718:7-718:53: `await registry.connect(admin).cancelUpkeep(id)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:718:21-718:36: `.connect(admin)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:718:36-718:53: `.cancelUpkeep(id)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:719:7-722:8: `await evmRevert(
        registry.connect(keeper1).setUpkeepGasLimit(id, newGasLimit),
        'UpkeepCancelled()',
      )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:720:17-720:34: `.connect(keeper1)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:720:34-720:69: `.setUpkeepGasLimit(id, newGasLimit)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:726:7-729:8: `await evmRevert(
        registry.connect(owner).setUpkeepGasLimit(id, newGasLimit),
        'OnlyCallableByAdmin()',
      )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:727:17-727:32: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:727:32-727:67: `.setUpkeepGasLimit(id, newGasLimit)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:733:7-736:8: `await evmRevert(
        registry.connect(admin).setUpkeepGasLimit(id, BigNumber.from('100')),
        'GasLimitOutsideRange()',
      )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:734:17-734:32: `.connect(admin)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:734:32-734:77: `.setUpkeepGasLimit(id, BigNumber.from('100'))`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:734:64-734:76: `.from('100')`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:737:7-742:8: `await evmRevert(
        registry
          .connect(admin)
          .setUpkeepGasLimit(id, BigNumber.from('6000000')),
        'GasLimitOutsideRange()',
      )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:738:17-739:26: `
          .connect(admin)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:739:26-740:60: `
          .setUpkeepGasLimit(id, BigNumber.from('6000000'))`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:740:43-740:59: `.from('6000000')`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:746:46-746:60: `.getUpkeep(id)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:748:7-748:71: `await registry.connect(admin).setUpkeepGasLimit(id, newGasLimit)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:748:21-748:36: `.connect(admin)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:748:36-748:71: `.setUpkeepGasLimit(id, newGasLimit)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:749:46-749:60: `.getUpkeep(id)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:754:32-755:24: `
        .connect(admin)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:755:24-756:44: `
        .setUpkeepGasLimit(id, newGasLimit)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:765:7-765:37: `await mock.setCanPerform(true)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:765:17-765:37: `.setCanPerform(true)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:766:7-766:35: `await mock.setCanCheck(true)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:766:17-766:35: `.setCanCheck(true)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:767:7-772:8: `await evmRevert(
        registry
          .connect(zeroAddress)
          .callStatic.checkUpkeep(id, await keeper1.getAddress()),
        'InsufficientFunds()',
      )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:768:17-769:32: `
          .connect(zeroAddress)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:769:32-770:66: `
          .callStatic.checkUpkeep(id, await keeper1.getAddress())`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:770:52-770:65: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:782:9-782:39: `await mock.setCanPerform(true)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:782:19-782:39: `.setCanPerform(true)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:783:9-783:37: `await mock.setCanCheck(true)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:783:19-783:37: `.setCanCheck(true)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:784:9-787:10: `await evmRevert(
          registry.checkUpkeep(id, await keeper1.getAddress()),
          'OnlySimulatedBackend()',
        )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:785:19-785:63: `.checkUpkeep(id, await keeper1.getAddress())`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:785:49-785:62: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:791:9-791:39: `await mock.setCanPerform(true)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:791:19-791:39: `.setCanPerform(true)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:792:9-792:37: `await mock.setCanCheck(true)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:792:19-792:37: `.setCanCheck(true)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:793:9-796:10: `await evmRevert(
          registry.checkUpkeep(id, await owner.getAddress()),
          'OnlySimulatedBackend()',
        )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:794:19-794:61: `.checkUpkeep(id, await owner.getAddress())`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:794:47-794:60: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:805:11-810:12: `await evmRevert(
            registry
              .connect(zeroAddress)
              .callStatic.checkUpkeep(id, await keeper1.getAddress()),
            'UpkeepNotNeeded()',
          )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:806:21-807:36: `
              .connect(zeroAddress)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:807:36-808:70: `
              .callStatic.checkUpkeep(id, await keeper1.getAddress())`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:808:56-808:69: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:833:11-838:12: `await evmRevert(
            registry
              .connect(zeroAddress)
              .callStatic.checkUpkeep(id, await keeper1.getAddress()),
            'TargetCheckReverted',
          )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:834:21-835:36: `
              .connect(zeroAddress)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:835:36-836:70: `
              .callStatic.checkUpkeep(id, await keeper1.getAddress())`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:836:56-836:69: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:849:11-849:56: `await registry.connect(admin).pauseUpkeep(id)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:849:25-849:40: `.connect(admin)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:849:40-849:56: `.pauseUpkeep(id)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:851:11-856:12: `await evmRevert(
            registry
              .connect(zeroAddress)
              .callStatic.checkUpkeep(id, await keeper1.getAddress()),
            'OnlyUnpausedUpkeep()',
          )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:852:21-853:36: `
              .connect(zeroAddress)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:853:36-854:70: `
              .callStatic.checkUpkeep(id, await keeper1.getAddress())`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:854:56-854:69: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:860:45-860:54: `.from(10)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:861:11-874:13: `await registry.connect(owner).setConfig({
            paymentPremiumPPB,
            flatFeeMicroLink,
            blockCountPerTurn,
            checkGasLimit,
            stalenessSeconds,
            gasCeilingMultiplier: newGasMultiplier,
            minUpkeepSpend,
            maxPerformGas,
            fallbackGasPrice,
            fallbackLinkPrice,
            transcoder: transcoder.address,
            registrar: ethers.constants.AddressZero,
          })`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:861:25-861:40: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:861:40-874:13: `.setConfig({
            paymentPremiumPPB,
            flatFeeMicroLink,
            blockCountPerTurn,
            checkGasLimit,
            stalenessSeconds,
            gasCeilingMultiplier: newGasMultiplier,
            minUpkeepSpend,
            maxPerformGas,
            fallbackGasPrice,
            fallbackLinkPrice,
            transcoder: transcoder.address,
            registrar: ethers.constants.AddressZero,
          })`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:875:42-876:34: `
            .connect(zeroAddress)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:876:34-877:68: `
            .callStatic.checkUpkeep(id, await keeper1.getAddress())`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:877:54-877:67: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:878:33-878:57: `.gasLimit.eq(executeGas)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:879:33-879:53: `.linkEth.eq(linkEth)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:881:21-881:69: `.adjustedGasWei.eq(gasWei.mul(newGasMultiplier))`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:881:46-881:68: `.mul(newGasMultiplier)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:884:21-886:14: `.maxLinkPayment.eq(
              linkForGas(executeGas.toNumber()).mul(newGasMultiplier),
            )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:885:48-885:70: `.mul(newGasMultiplier)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:891:11-891:54: `await mock.setCheckGasToBurn(checkGasLimit)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:891:21-891:54: `.setCheckGasToBurn(checkGasLimit)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:892:36-892:60: `.add(CHECK_GAS_OVERHEAD)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:893:11-897:15: `await registry
            .connect(zeroAddress)
            .callStatic.checkUpkeep(id, await keeper1.getAddress(), {
              gasLimit: gas,
            })`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:893:25-894:34: `
            .connect(zeroAddress)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:894:34-897:15: `
            .callStatic.checkUpkeep(id, await keeper1.getAddress(), {
              gasLimit: gas,
            })`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:895:54-895:67: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:920:7-923:8: `await evmRevert(
        registry.connect(keeper2).performUpkeep(id, '0x'),
        'InsufficientFunds()',
      )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:921:17-921:34: `.connect(keeper2)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:921:34-921:58: `.performUpkeep(id, '0x')`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:932:9-935:10: `await evmRevert(
          registry.connect(keeper2).performUpkeep(id, '0x'),
          'Pausable: paused',
        )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:933:19-933:36: `.connect(keeper2)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:933:36-933:60: `.performUpkeep(id, '0x')`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:946:40-947:32: `
          .connect(zeroAddress)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:947:32-948:40: `
          .callStatic.checkUpkeep('0x')`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:951:9-951:64: `await registry.connect(keeper3).performUpkeep(id, '0x')`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:951:23-951:40: `.connect(keeper3)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:951:40-951:64: `.performUpkeep(id, '0x')`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:955:40-956:32: `
          .connect(zeroAddress)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:956:32-957:40: `
          .callStatic.checkUpkeep('0x')`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:961:25-961:42: `.connect(keeper1)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:961:42-961:77: `.callStatic.performUpkeep(id, '0x')`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:966:9-966:39: `await mock.setCanPerform(true)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:966:19-966:39: `.setCanPerform(true)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:968:40-969:28: `
          .connect(keeper1)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:969:28-970:46: `
          .callStatic.performUpkeep(id, '0x')`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:975:9-975:39: `await mock.setCanPerform(true)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:975:19-975:39: `.setCanPerform(true)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:977:9-981:10: `await evmRevert(
          registry
            .connect(keeper1)
            .performUpkeep(id, '0x', { gasLimit: BigNumber.from('120000') }),
        )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:978:19-979:30: `
            .connect(keeper1)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:979:30-980:77: `
            .performUpkeep(id, '0x', { gasLimit: BigNumber.from('120000') })`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:980:59-980:74: `.from('120000')`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:985:9-985:39: `await mock.setCanPerform(true)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:985:19-985:39: `.setCanPerform(true)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:988:34-989:28: `
          .connect(keeper1)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:989:28-990:66: `
          .performUpkeep(id, performData, { gasLimit: extraGas })`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:991:33-991:40: `.wait()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:998:60-998:73: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1004:44-1006:10: `.getKeeperInfo(
          await keeper1.getAddress(),
        )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1005:24-1005:37: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1007:50-1007:64: `.getUpkeep(id)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1008:49-1010:10: `.balanceOf(
          await keeper1.getAddress(),
        )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1009:24-1009:37: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1011:51-1011:79: `.balanceOf(registry.address)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1014:9-1014:64: `await registry.connect(keeper1).performUpkeep(id, '0x')`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1014:23-1014:40: `.connect(keeper1)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1014:40-1014:64: `.performUpkeep(id, '0x')`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1016:43-1018:10: `.getKeeperInfo(
          await keeper1.getAddress(),
        )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1017:24-1017:37: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1019:49-1019:63: `.getUpkeep(id)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1020:48-1022:10: `.balanceOf(
          await keeper1.getAddress(),
        )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1021:24-1021:37: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1023:50-1023:78: `.balanceOf(registry.address)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1025:34-1025:67: `.balance.gt(keeperBefore.balance)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1026:41-1026:79: `.balance.gt(registrationAfter.balance)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1027:38-1027:59: `.eq(keeperLinkBefore)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1028:41-1028:63: `.eq(registryLinkAfter)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1032:50-1032:64: `.getUpkeep(id)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1037:9-1037:64: `await registry.connect(keeper1).performUpkeep(id, '0x')`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1037:23-1037:40: `.connect(keeper1)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1037:40-1037:64: `.performUpkeep(id, '0x')`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1039:49-1039:63: `.getUpkeep(id)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1043:35-1043:53: `.lt(balanceBefore)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1044:39-1044:61: `.gt(amountSpentBefore)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1046:27-1047:36: `
            .sub(amountSpentBefore)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1047:36-1048:49: `
            .eq(balanceBefore.sub(balanceAfter))`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1048:30-1048:48: `.sub(balanceAfter)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1054:25-1054:67: `.getKeeperInfo(await keeper1.getAddress())`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1054:53-1054:66: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1056:34-1056:51: `.connect(keeper1)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1056:51-1056:75: `.performUpkeep(id, '0x')`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1057:33-1057:40: `.wait()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1058:38-1058:80: `.getKeeperInfo(await keeper1.getAddress())`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1058:66-1058:79: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1062:43-1062:62: `.gasUsed.toNumber()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1063:33-1063:45: `.sub(before)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1064:26-1064:38: `.gt(totalTx)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1065:30-1065:45: `.gt(difference)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1066:39-1066:54: `.lt(difference)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1067:39-1067:54: `.gt(difference)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1071:37-1071:46: `.from(10)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1072:35-1072:54: `.from('1000000000')`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1073:9-1086:11: `await registry.connect(owner).setConfig({
          paymentPremiumPPB,
          flatFeeMicroLink,
          blockCountPerTurn,
          checkGasLimit,
          stalenessSeconds,
          gasCeilingMultiplier: multiplier,
          minUpkeepSpend,
          maxPerformGas,
          fallbackGasPrice,
          fallbackLinkPrice,
          transcoder: transcoder.address,
          registrar: ethers.constants.AddressZero,
        })`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1073:23-1073:38: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1073:38-1086:11: `.setConfig({
          paymentPremiumPPB,
          flatFeeMicroLink,
          blockCountPerTurn,
          checkGasLimit,
          stalenessSeconds,
          gasCeilingMultiplier: multiplier,
          minUpkeepSpend,
          maxPerformGas,
          fallbackGasPrice,
          fallbackLinkPrice,
          transcoder: transcoder.address,
          registrar: ethers.constants.AddressZero,
        })`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1089:25-1089:67: `.getKeeperInfo(await keeper1.getAddress())`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1089:53-1089:66: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1091:34-1092:28: `
          .connect(keeper1)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1092:28-1093:49: `
          .performUpkeep(id, '0x', { gasPrice })`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1094:33-1094:40: `.wait()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1095:38-1095:80: `.getKeeperInfo(await keeper1.getAddress())`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1095:66-1095:79: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1098:43-1098:59: `.mul(multiplier)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1099:52-1099:68: `.mul(multiplier)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1100:33-1100:45: `.sub(before)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1101:26-1101:38: `.gt(totalTx)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1102:30-1102:45: `.gt(difference)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1103:39-1103:55: `.mul(multiplier)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1103:55-1103:70: `.lt(difference)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1104:39-1104:55: `.mul(multiplier)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1104:55-1104:70: `.gt(difference)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1108:37-1108:46: `.from(10)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1109:35-1109:45: `.from(200)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1110:46-1110:54: `.from(2)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1111:9-1124:11: `await registry.connect(owner).setConfig({
          paymentPremiumPPB,
          flatFeeMicroLink,
          blockCountPerTurn,
          checkGasLimit,
          stalenessSeconds,
          gasCeilingMultiplier: multiplier,
          minUpkeepSpend,
          maxPerformGas,
          fallbackGasPrice,
          fallbackLinkPrice,
          transcoder: transcoder.address,
          registrar: ethers.constants.AddressZero,
        })`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1111:23-1111:38: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1111:38-1124:11: `.setConfig({
          paymentPremiumPPB,
          flatFeeMicroLink,
          blockCountPerTurn,
          checkGasLimit,
          stalenessSeconds,
          gasCeilingMultiplier: multiplier,
          minUpkeepSpend,
          maxPerformGas,
          fallbackGasPrice,
          fallbackLinkPrice,
          transcoder: transcoder.address,
          registrar: ethers.constants.AddressZero,
        })`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1127:25-1127:67: `.getKeeperInfo(await keeper1.getAddress())`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1127:53-1127:66: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1129:34-1130:28: `
          .connect(keeper1)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1130:28-1131:49: `
          .performUpkeep(id, '0x', { gasPrice })`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1132:33-1132:40: `.wait()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1133:38-1133:80: `.getKeeperInfo(await keeper1.getAddress())`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1133:66-1133:79: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1136:54-1136:79: `.mul(effectiveMultiplier)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1137:52-1137:77: `.mul(effectiveMultiplier)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1138:33-1138:45: `.sub(before)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1139:26-1139:38: `.gt(totalTx)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1140:30-1140:45: `.gt(difference)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1141:39-1141:64: `.mul(effectiveMultiplier)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1141:64-1141:79: `.lt(difference)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1142:39-1142:64: `.mul(effectiveMultiplier)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1142:64-1142:79: `.gt(difference)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1146:34-1147:26: `
          .connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1147:26-1153:12: `
          .registerUpkeep(
            mock.address,
            executeGas,
            await admin.getAddress(),
            emptyBytes,
          )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1151:24-1151:37: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1155:9-1155:79: `await linkToken.connect(owner).approve(registry.address, toWei('100'))`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1155:24-1155:39: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1155:39-1155:79: `.approve(registry.address, toWei('100'))`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1156:9-1156:65: `await registry.connect(owner).addFunds(id, toWei('100'))`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1156:23-1156:38: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1156:38-1156:65: `.addFunds(id, toWei('100'))`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1158:25-1158:67: `.getKeeperInfo(await keeper1.getAddress())`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1158:53-1158:66: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1162:9-1162:64: `await registry.connect(keeper1).performUpkeep(id, '0x')`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1162:23-1162:40: `.connect(keeper1)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1162:40-1162:64: `.performUpkeep(id, '0x')`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1165:25-1165:67: `.getKeeperInfo(await keeper1.getAddress())`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1165:53-1165:66: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1167:41-1167:65: `.gt(keeperBalanceBefore)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1171:9-1174:10: `await evmRevert(
          registry.connect(nonkeeper).performUpkeep(id, '0x'),
          'OnlyActiveKeepers()',
        )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1172:19-1172:38: `.connect(nonkeeper)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1172:38-1172:62: `.performUpkeep(id, '0x')`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1178:9-1178:39: `await mock.setCanPerform(true)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1178:19-1178:39: `.setCanPerform(true)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1180:9-1180:55: `await registry.connect(owner).cancelUpkeep(id)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1180:23-1180:38: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1180:38-1180:55: `.cancelUpkeep(id)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1182:9-1185:10: `await evmRevert(
          registry.connect(keeper1).performUpkeep(id, '0x'),
          'UpkeepCancelled()',
        )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1183:19-1183:36: `.connect(keeper1)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1183:36-1183:60: `.performUpkeep(id, '0x')`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1189:9-1189:54: `await registry.connect(admin).pauseUpkeep(id)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1189:23-1189:38: `.connect(admin)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1189:38-1189:54: `.pauseUpkeep(id)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1191:9-1194:10: `await evmRevert(
          registry.connect(keeper1).performUpkeep(id, '0x'),
          'OnlyUnpausedUpkeep()',
        )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1192:19-1192:36: `.connect(keeper1)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1192:36-1192:60: `.performUpkeep(id, '0x')`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1203:9-1205:66: `await gasPriceFeed
          .connect(owner)
          .updateRoundData(roundId, answer, updatedAt, startedAt)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1203:27-1204:26: `
          .connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1204:26-1205:66: `
          .updateRoundData(roundId, answer, updatedAt, startedAt)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1207:35-1207:59: `.lt(amountWithStaleFeed)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1213:31-1213:56: `.floor(Date.now() / 1000)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1213:42-1213:48: `.now()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1215:9-1217:64: `await gasPriceFeed
          .connect(owner)
          .updateRoundData(roundId, -100, updatedAt, startedAt)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1215:27-1216:26: `
          .connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1216:26-1217:64: `
          .updateRoundData(roundId, -100, updatedAt, startedAt)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1219:9-1221:61: `await gasPriceFeed
          .connect(owner)
          .updateRoundData(roundId, 0, updatedAt, startedAt)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1219:27-1220:26: `
          .connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1220:26-1221:61: `
          .updateRoundData(roundId, 0, updatedAt, startedAt)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1223:35-1223:62: `.lt(amountWithNegativeFeed)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1224:35-1224:58: `.lt(amountWithZeroFeed)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1233:9-1235:66: `await linkEthFeed
          .connect(owner)
          .updateRoundData(roundId, answer, updatedAt, startedAt)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1233:26-1234:26: `
          .connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1234:26-1235:66: `
          .updateRoundData(roundId, answer, updatedAt, startedAt)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1237:35-1237:59: `.lt(amountWithStaleFeed)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1243:31-1243:56: `.floor(Date.now() / 1000)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1243:42-1243:48: `.now()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1245:9-1247:64: `await linkEthFeed
          .connect(owner)
          .updateRoundData(roundId, -100, updatedAt, startedAt)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1245:26-1246:26: `
          .connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1246:26-1247:64: `
          .updateRoundData(roundId, -100, updatedAt, startedAt)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1249:9-1251:61: `await linkEthFeed
          .connect(owner)
          .updateRoundData(roundId, 0, updatedAt, startedAt)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1249:26-1250:26: `
          .connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1250:26-1251:61: `
          .updateRoundData(roundId, 0, updatedAt, startedAt)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1253:35-1253:62: `.lt(amountWithNegativeFeed)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1254:35-1254:58: `.lt(amountWithZeroFeed)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1258:9-1258:64: `await registry.connect(keeper1).performUpkeep(id, '0x')`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1258:23-1258:40: `.connect(keeper1)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1258:40-1258:64: `.performUpkeep(id, '0x')`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1259:9-1262:10: `await evmRevert(
          registry.connect(keeper1).performUpkeep(id, '0x'),
          'KeepersMustTakeTurns()',
        )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1260:19-1260:36: `.connect(keeper1)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1260:36-1260:60: `.performUpkeep(id, '0x')`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1263:9-1263:64: `await registry.connect(keeper2).performUpkeep(id, '0x')`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1263:23-1263:40: `.connect(keeper2)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1263:40-1263:64: `.performUpkeep(id, '0x')`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1264:9-1267:10: `await evmRevert(
          registry.connect(keeper2).performUpkeep(id, '0x'),
          'KeepersMustTakeTurns()',
        )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1265:19-1265:36: `.connect(keeper2)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1265:36-1265:60: `.performUpkeep(id, '0x')`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1268:9-1268:64: `await registry.connect(keeper1).performUpkeep(id, '0x')`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1268:23-1268:40: `.connect(keeper1)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1268:40-1268:64: `.performUpkeep(id, '0x')`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1272:9-1272:75: `await registry.connect(admin).setUpkeepGasLimit(id, maxPerformGas)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1272:23-1272:38: `.connect(admin)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1272:38-1272:75: `.setUpkeepGasLimit(id, maxPerformGas)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1273:9-1273:54: `await mock.setPerformGasToBurn(maxPerformGas)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1273:19-1273:54: `.setPerformGasToBurn(maxPerformGas)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1274:9-1274:39: `await mock.setCanPerform(true)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1274:19-1274:39: `.setCanPerform(true)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1275:34-1275:60: `.add(PERFORM_GAS_OVERHEAD)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1277:34-1278:28: `
          .connect(keeper1)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1278:28-1279:61: `
          .performUpkeep(id, performData, { gasLimit: gas })`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1280:33-1280:40: `.wait()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1287:60-1287:73: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1293:63-1294:26: `
          .connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1294:26-1295:55: `
          .deploy(linkToken.address, registry.address)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1296:34-1297:26: `
          .connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1297:26-1303:12: `
          .registerUpkeep(
            autoFunderUpkeep.address,
            executeGas,
            autoFunderUpkeep.address,
            emptyBytes,
          )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1305:9-1305:53: `await autoFunderUpkeep.setUpkeepId(upkeepID)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1305:31-1305:53: `.setUpkeepId(upkeepID)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1307:9-1307:80: `await linkToken.connect(owner).approve(registry.address, toWei('1000'))`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1307:24-1307:39: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1307:39-1307:80: `.approve(registry.address, toWei('1000'))`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1308:9-1310:61: `await linkToken
          .connect(owner)
          .transfer(autoFunderUpkeep.address, toWei('1000'))`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1308:24-1309:26: `
          .connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1309:26-1310:61: `
          .transfer(autoFunderUpkeep.address, toWei('1000'))`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1311:40-1311:72: `.getMaxPaymentForGas(executeGas)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1315:9-1315:73: `await registry.connect(owner).addFunds(upkeepID, initialBalance)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1315:23-1315:38: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1315:38-1315:73: `.addFunds(upkeepID, initialBalance)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1316:9-1316:50: `await autoFunderUpkeep.setAutoFundLink(0)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1316:31-1316:50: `.setAutoFundLink(0)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1317:9-1317:51: `await autoFunderUpkeep.setIsEligible(true)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1317:31-1317:51: `.setIsEligible(true)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1318:9-1318:70: `await registry.connect(keeper1).performUpkeep(upkeepID, '0x')`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1318:23-1318:40: `.connect(keeper1)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1318:40-1318:70: `.performUpkeep(upkeepID, '0x')`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1320:48-1320:68: `.getUpkeep(upkeepID)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1321:40-1321:59: `.lt(initialBalance)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1322:40-1322:76: `.gte(initialBalance.sub(maxPayment))`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1322:59-1322:75: `.sub(maxPayment)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1325:9-1325:43: `initialBalance = postUpkeepBalance`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1327:9-1327:64: `await autoFunderUpkeep.setAutoFundLink(autoTopupAmount)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1327:31-1327:64: `.setAutoFundLink(autoTopupAmount)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1328:9-1328:51: `await autoFunderUpkeep.setIsEligible(true)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1328:31-1328:51: `.setIsEligible(true)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1329:9-1329:70: `await registry.connect(keeper2).performUpkeep(upkeepID, '0x')`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1329:23-1329:40: `.connect(keeper2)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1329:40-1329:70: `.performUpkeep(upkeepID, '0x')`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1331:9-1331:73: `postUpkeepBalance = (await registry.getUpkeep(upkeepID)).balance`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1331:44-1331:64: `.getUpkeep(upkeepID)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1334:28-1336:12: `.gte(
            initialBalance.add(autoTopupAmount).sub(maxPayment),
          )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1335:27-1335:48: `.add(autoTopupAmount)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1335:48-1335:64: `.sub(maxPayment)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1341:63-1342:26: `
          .connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1342:26-1343:55: `
          .deploy(linkToken.address, registry.address)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1344:34-1345:26: `
          .connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1345:26-1351:12: `
          .registerUpkeep(
            autoFunderUpkeep.address,
            executeGas,
            autoFunderUpkeep.address,
            emptyBytes,
          )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1353:9-1353:53: `await autoFunderUpkeep.setUpkeepId(upkeepID)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1353:31-1353:53: `.setUpkeepId(upkeepID)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1355:9-1355:80: `await linkToken.connect(owner).approve(registry.address, toWei('1000'))`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1355:24-1355:39: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1355:39-1355:80: `.approve(registry.address, toWei('1000'))`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1356:9-1356:71: `await registry.connect(owner).addFunds(upkeepID, toWei('100'))`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1356:23-1356:38: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1356:38-1356:71: `.addFunds(upkeepID, toWei('100'))`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1357:9-1357:51: `await autoFunderUpkeep.setIsEligible(true)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1357:31-1357:51: `.setIsEligible(true)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1358:9-1358:53: `await autoFunderUpkeep.setShouldCancel(true)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1358:31-1358:53: `.setShouldCancel(true)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1360:42-1360:62: `.getUpkeep(upkeepID)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1364:9-1364:70: `await registry.connect(keeper1).performUpkeep(upkeepID, '0x')`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1364:23-1364:40: `.connect(keeper1)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1364:40-1364:70: `.performUpkeep(upkeepID, '0x')`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1367:9-1367:58: `registration = await registry.getUpkeep(upkeepID)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1367:38-1367:58: `.getUpkeep(upkeepID)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1369:36-1369:54: `.lt(oldExpiration)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1382:7-1387:8: `await evmRevert(
        registry
          .connect(owner)
          .withdrawFunds(id.add(1), await payee1.getAddress()),
        'OnlyCallableByAdmin()',
      )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1383:17-1384:26: `
          .connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1384:26-1385:63: `
          .withdrawFunds(id.add(1), await payee1.getAddress())`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1385:28-1385:35: `.add(1)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1385:49-1385:62: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1391:7-1394:8: `await evmRevert(
        registry.connect(admin).withdrawFunds(id, await payee1.getAddress()),
        'UpkeepNotCanceled()',
      )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1392:17-1392:32: `.connect(admin)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1392:32-1392:77: `.withdrawFunds(id, await payee1.getAddress())`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1392:63-1392:76: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1398:7-1401:8: `await evmRevert(
        registry.connect(admin).withdrawFunds(id, zeroAddress),
        'InvalidRecipient()',
      )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1399:17-1399:32: `.connect(admin)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1399:32-1399:63: `.withdrawFunds(id, zeroAddress)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1410:45-1412:10: `.balanceOf(
          await payee1.getAddress(),
        )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1411:23-1411:36: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1413:47-1413:75: `.balanceOf(registry.address)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1415:42-1415:56: `.getUpkeep(id)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1418:34-1419:26: `
          .connect(admin)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1419:26-1420:56: `
          .withdrawFunds(id, await payee1.getAddress())`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1420:42-1420:55: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1425:44-1425:81: `.balanceOf(await payee1.getAddress())`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1425:67-1425:80: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1426:46-1426:74: `.balanceOf(registry.address)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1428:35-1428:56: `.add(previousBalance)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1428:56-1428:72: `.eq(payee1After)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1429:37-1429:58: `.sub(previousBalance)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1429:58-1429:76: `.eq(registryAfter)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1431:9-1431:52: `registration = await registry.getUpkeep(id)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1431:38-1431:52: `.getUpkeep(id)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1432:37-1432:56: `.balance.toNumber()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1439:7-1442:8: `await evmRevert(
        registry.connect(keeper1).withdrawOwnerFunds(),
        'Only callable by owner',
      )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1440:17-1440:34: `.connect(keeper1)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1440:34-1440:55: `.withdrawOwnerFunds()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1446:7-1446:79: `await linkToken.connect(keeper1).approve(registry.address, toWei('100'))`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1446:22-1446:39: `.connect(keeper1)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1446:39-1446:79: `.approve(registry.address, toWei('100'))`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1447:7-1447:65: `await registry.connect(keeper1).addFunds(id, toWei('100'))`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1447:21-1447:38: `.connect(keeper1)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1447:38-1447:65: `.addFunds(id, toWei('100'))`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1450:7-1463:9: `await registry.connect(owner).setConfig({
        paymentPremiumPPB,
        flatFeeMicroLink,
        blockCountPerTurn,
        checkGasLimit,
        stalenessSeconds,
        gasCeilingMultiplier,
        minUpkeepSpend,
        maxPerformGas,
        fallbackGasPrice,
        fallbackLinkPrice,
        transcoder: transcoder.address,
        registrar: ethers.constants.AddressZero,
      })`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1450:21-1450:36: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1450:36-1463:9: `.setConfig({
        paymentPremiumPPB,
        flatFeeMicroLink,
        blockCountPerTurn,
        checkGasLimit,
        stalenessSeconds,
        gasCeilingMultiplier,
        minUpkeepSpend,
        maxPerformGas,
        fallbackGasPrice,
        fallbackLinkPrice,
        transcoder: transcoder.address,
        registrar: ethers.constants.AddressZero,
      })`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1464:42-1464:56: `.getUpkeep(id)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1465:42-1465:78: `.balanceOf(await owner.getAddress())`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1465:64-1465:77: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1467:7-1467:53: `await registry.connect(owner).cancelUpkeep(id)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1467:21-1467:36: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1467:36-1467:53: `.cancelUpkeep(id)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1468:7-1468:81: `await registry.connect(admin).withdrawFunds(id, await payee1.getAddress())`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1468:21-1468:36: `.connect(admin)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1468:36-1468:81: `.withdrawFunds(id, await payee1.getAddress())`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1468:67-1468:80: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1470:49-1470:60: `.getState()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1472:41-1472:59: `.eq(upkeepBalance)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1475:7-1475:57: `await registry.connect(owner).withdrawOwnerFunds()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1475:21-1475:36: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1475:36-1475:57: `.withdrawOwnerFunds()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1477:7-1477:80: `ownerRegistryBalance = (await registry.getState()).state.ownerLinkBalance`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1477:45-1477:56: `.getState()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1478:41-1478:77: `.balanceOf(await owner.getAddress())`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1478:63-1478:76: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1481:41-1481:65: `.eq(BigNumber.from('0'))`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1481:54-1481:64: `.from('0')`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1484:32-1484:51: `.add(upkeepBalance)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1484:51-1484:66: `.eq(ownerAfter)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1490:7-1493:8: `await evmRevert(
        registry.connect(owner).cancelUpkeep(id.add(1)),
        'CannotCancel()',
      )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1491:17-1491:32: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1491:32-1491:56: `.cancelUpkeep(id.add(1))`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1491:48-1491:55: `.add(1)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1497:7-1500:8: `await evmRevert(
        registry.connect(keeper1).cancelUpkeep(id),
        'OnlyCallableByOwnerOrAdmin()',
      )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1498:17-1498:34: `.connect(keeper1)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1498:34-1498:51: `.cancelUpkeep(id)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1505:34-1505:49: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1505:49-1505:66: `.cancelUpkeep(id)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1506:33-1506:40: `.wait()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1507:44-1507:58: `.getUpkeep(id)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1509:23-1509:54: `.maxValidBlocknumber.toNumber()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1515:34-1515:49: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1515:49-1515:66: `.cancelUpkeep(id)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1516:33-1516:40: `.wait()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1523:9-1523:55: `await registry.connect(owner).cancelUpkeep(id)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1523:23-1523:38: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1523:38-1523:55: `.cancelUpkeep(id)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1525:9-1528:10: `await evmRevert(
          registry.connect(keeper2).performUpkeep(id, '0x'),
          'UpkeepCancelled()',
        )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1526:19-1526:36: `.connect(keeper2)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1526:36-1526:60: `.performUpkeep(id, '0x')`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1532:9-1532:55: `await registry.connect(owner).cancelUpkeep(id)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1532:23-1532:38: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1532:38-1532:55: `.cancelUpkeep(id)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1533:9-1536:10: `await evmRevert(
          registry.connect(owner).cancelUpkeep(id),
          'CannotCancel()',
        )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1534:19-1534:34: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1534:34-1534:51: `.cancelUpkeep(id)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1549:11-1549:57: `await registry.connect(owner).cancelUpkeep(id)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1549:25-1549:40: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1549:40-1549:57: `.cancelUpkeep(id)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1551:46-1551:60: `.getUpkeep(id)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1553:38-1553:56: `.lt(oldExpiration)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1562:9-1562:55: `await registry.connect(admin).cancelUpkeep(id)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1562:23-1562:38: `.connect(admin)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1562:38-1562:55: `.cancelUpkeep(id)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1564:9-1567:10: `await evmRevert(
          registry.connect(admin).cancelUpkeep(id),
          'CannotCancel()',
        )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1565:19-1565:34: `.connect(admin)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1565:34-1565:51: `.cancelUpkeep(id)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1571:9-1571:55: `await registry.connect(admin).cancelUpkeep(id)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1571:23-1571:38: `.connect(admin)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1571:38-1571:55: `.cancelUpkeep(id)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1574:11-1574:53: `await ethers.provider.send('evm_mine', [])`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1574:23-1574:53: `.provider.send('evm_mine', [])`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1577:9-1580:10: `await evmRevert(
          registry.connect(owner).cancelUpkeep(id),
          'CannotCancel()',
        )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1578:19-1578:34: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1578:34-1578:51: `.cancelUpkeep(id)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1584:34-1584:49: `.connect(admin)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1584:49-1584:66: `.cancelUpkeep(id)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1585:33-1585:40: `.wait()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1586:44-1586:58: `.getUpkeep(id)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1588:23-1588:54: `.maxValidBlocknumber.toNumber()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1594:34-1594:49: `.connect(admin)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1594:49-1594:66: `.cancelUpkeep(id)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1595:33-1595:40: `.wait()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1602:9-1602:79: `await linkToken.connect(owner).approve(registry.address, toWei('100'))`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1602:24-1602:39: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1602:39-1602:79: `.approve(registry.address, toWei('100'))`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1603:9-1603:65: `await registry.connect(owner).addFunds(id, toWei('100'))`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1603:23-1603:38: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1603:38-1603:65: `.addFunds(id, toWei('100'))`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1604:9-1604:55: `await registry.connect(admin).cancelUpkeep(id)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1604:23-1604:38: `.connect(admin)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1604:38-1604:55: `.cancelUpkeep(id)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1605:9-1605:64: `await registry.connect(keeper2).performUpkeep(id, '0x')`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1605:23-1605:40: `.connect(keeper2)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1605:40-1605:64: `.performUpkeep(id, '0x')`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1608:11-1608:53: `await ethers.provider.send('evm_mine', [])`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1608:23-1608:53: `.provider.send('evm_mine', [])`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1611:9-1614:10: `await evmRevert(
          registry.connect(keeper2).performUpkeep(id, '0x'),
          'UpkeepCancelled()',
        )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1612:19-1612:36: `.connect(keeper2)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1612:36-1612:60: `.performUpkeep(id, '0x')`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1626:11-1639:13: `await registry.connect(owner).setConfig({
            paymentPremiumPPB,
            flatFeeMicroLink,
            blockCountPerTurn,
            checkGasLimit,
            stalenessSeconds,
            gasCeilingMultiplier,
            minUpkeepSpend,
            maxPerformGas,
            fallbackGasPrice,
            fallbackLinkPrice,
            transcoder: transcoder.address,
            registrar: ethers.constants.AddressZero,
          })`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1626:25-1626:40: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1626:40-1639:13: `.setConfig({
            paymentPremiumPPB,
            flatFeeMicroLink,
            blockCountPerTurn,
            checkGasLimit,
            stalenessSeconds,
            gasCeilingMultiplier,
            minUpkeepSpend,
            maxPerformGas,
            fallbackGasPrice,
            fallbackLinkPrice,
            transcoder: transcoder.address,
            registrar: ethers.constants.AddressZero,
          })`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1641:47-1643:12: `.balanceOf(
            await payee1.getAddress(),
          )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1642:25-1642:38: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1644:45-1644:59: `.getUpkeep(id)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1645:44-1645:55: `.getState()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1648:41-1648:59: `.sub(upkeepBefore)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1649:47-1649:64: `.sub(amountSpent)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1651:11-1651:57: `await registry.connect(admin).cancelUpkeep(id)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1651:25-1651:40: `.connect(admin)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1651:40-1651:57: `.cancelUpkeep(id)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1653:46-1655:12: `.balanceOf(
            await payee1.getAddress(),
          )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1654:25-1654:38: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1656:44-1656:58: `.getUpkeep(id)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1657:43-1657:54: `.getState()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1660:37-1660:58: `.sub(cancellationFee)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1660:58-1660:74: `.eq(upkeepAfter)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1662:37-1662:53: `.eq(payee1After)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1664:35-1664:55: `.eq(cancellationFee)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1670:11-1683:13: `await registry.connect(owner).setConfig({
            paymentPremiumPPB,
            flatFeeMicroLink,
            blockCountPerTurn,
            checkGasLimit,
            stalenessSeconds,
            gasCeilingMultiplier,
            minUpkeepSpend,
            maxPerformGas,
            fallbackGasPrice,
            fallbackLinkPrice,
            transcoder: transcoder.address,
            registrar: ethers.constants.AddressZero,
          })`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1670:25-1670:40: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1670:40-1683:13: `.setConfig({
            paymentPremiumPPB,
            flatFeeMicroLink,
            blockCountPerTurn,
            checkGasLimit,
            stalenessSeconds,
            gasCeilingMultiplier,
            minUpkeepSpend,
            maxPerformGas,
            fallbackGasPrice,
            fallbackLinkPrice,
            transcoder: transcoder.address,
            registrar: ethers.constants.AddressZero,
          })`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1684:47-1686:12: `.balanceOf(
            await payee1.getAddress(),
          )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1685:25-1685:38: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1687:45-1687:59: `.getUpkeep(id)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1688:44-1688:55: `.getState()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1691:11-1691:57: `await registry.connect(admin).cancelUpkeep(id)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1691:25-1691:40: `.connect(admin)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1691:40-1691:57: `.cancelUpkeep(id)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1692:46-1694:12: `.balanceOf(
            await payee1.getAddress(),
          )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1693:25-1693:38: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1695:43-1695:54: `.getState()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1696:44-1696:58: `.getUpkeep(id)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1701:36-1701:53: `.eq(payee1Before)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1703:35-1703:52: `.eq(upkeepBefore)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1708:41-1708:51: `.from(420)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1709:11-1722:13: `await registry.connect(owner).setConfig({
            paymentPremiumPPB,
            flatFeeMicroLink,
            blockCountPerTurn,
            checkGasLimit,
            stalenessSeconds,
            gasCeilingMultiplier,
            minUpkeepSpend,
            maxPerformGas,
            fallbackGasPrice,
            fallbackLinkPrice,
            transcoder: transcoder.address,
            registrar: ethers.constants.AddressZero,
          })`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1709:25-1709:40: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1709:40-1722:13: `.setConfig({
            paymentPremiumPPB,
            flatFeeMicroLink,
            blockCountPerTurn,
            checkGasLimit,
            stalenessSeconds,
            gasCeilingMultiplier,
            minUpkeepSpend,
            maxPerformGas,
            fallbackGasPrice,
            fallbackLinkPrice,
            transcoder: transcoder.address,
            registrar: ethers.constants.AddressZero,
          })`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1723:47-1725:12: `.balanceOf(
            await payee1.getAddress(),
          )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1724:25-1724:38: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1726:45-1726:59: `.getUpkeep(id)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1727:44-1727:55: `.getState()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1730:11-1730:57: `await registry.connect(admin).cancelUpkeep(id)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1730:25-1730:40: `.connect(admin)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1730:40-1730:57: `.cancelUpkeep(id)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1731:46-1733:12: `.balanceOf(
            await payee1.getAddress(),
          )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1732:25-1732:38: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1734:43-1734:54: `.getState()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1735:44-1735:58: `.getUpkeep(id)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1738:37-1738:53: `.eq(upkeepAfter)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1742:37-1742:53: `.eq(payee1After)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1756:7-1764:8: `await evmRevert(
        registry
          .connect(payee2)
          .withdrawPayment(
            await keeper1.getAddress(),
            await nonkeeper.getAddress(),
          ),
        'OnlyCallableByPayee()',
      )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1757:17-1758:27: `
          .connect(payee2)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1758:27-1762:12: `
          .withdrawPayment(
            await keeper1.getAddress(),
            await nonkeeper.getAddress(),
          )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1760:26-1760:39: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1761:28-1761:41: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1768:7-1773:8: `await evmRevert(
        registry
          .connect(payee2)
          .withdrawPayment(await keeper1.getAddress(), zeroAddress),
        'InvalidRecipient()',
      )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1769:17-1770:27: `
          .connect(payee2)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1770:27-1771:68: `
          .withdrawPayment(await keeper1.getAddress(), zeroAddress)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1771:41-1771:54: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1777:33-1777:46: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1779:23-1779:65: `.getKeeperInfo(await keeper1.getAddress())`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1779:51-1779:64: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1781:49-1781:63: `.getUpkeep(id)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1782:43-1782:57: `.balanceOf(to)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1783:49-1783:77: `.balanceOf(registry.address)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1786:7-1788:57: `await registry
        .connect(payee1)
        .withdrawPayment(await keeper1.getAddress(), to)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1786:21-1787:25: `
        .connect(payee1)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1787:25-1788:57: `
        .withdrawPayment(await keeper1.getAddress(), to)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1788:39-1788:52: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1791:23-1791:65: `.getKeeperInfo(await keeper1.getAddress())`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1791:51-1791:64: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1793:48-1793:62: `.getUpkeep(id)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1794:42-1794:56: `.balanceOf(to)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1795:48-1795:76: `.balanceOf(registry.address)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1797:32-1797:54: `.eq(BigNumber.from(0))`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1797:45-1797:53: `.from(0)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1798:39-1798:61: `.eq(registrationAfter)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1799:33-1799:51: `.add(keeperBefore)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1799:51-1799:67: `.eq(toLinkAfter)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1800:39-1800:57: `.sub(keeperBefore)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1800:57-1800:79: `.eq(registryLinkAfter)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1804:38-1804:80: `.getKeeperInfo(await keeper1.getAddress())`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1804:66-1804:79: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1806:32-1807:25: `
        .connect(payee1)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1807:25-1811:10: `
        .withdrawPayment(
          await keeper1.getAddress(),
          await nonkeeper.getAddress(),
        )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1809:24-1809:37: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1810:26-1810:39: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1825:7-1833:8: `await evmRevert(
        registry
          .connect(payee2)
          .transferPayeeship(
            await keeper1.getAddress(),
            await payee2.getAddress(),
          ),
        'OnlyCallableByPayee()',
      )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1826:17-1827:27: `
          .connect(payee2)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1827:27-1831:12: `
          .transferPayeeship(
            await keeper1.getAddress(),
            await payee2.getAddress(),
          )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1829:26-1829:39: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1830:25-1830:38: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1837:7-1845:8: `await evmRevert(
        registry
          .connect(payee1)
          .transferPayeeship(
            await keeper1.getAddress(),
            await payee1.getAddress(),
          ),
        'ValueNotChanged()',
      )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1838:17-1839:27: `
          .connect(payee1)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1839:27-1843:12: `
          .transferPayeeship(
            await keeper1.getAddress(),
            await payee1.getAddress(),
          )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1841:26-1841:39: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1842:25-1842:38: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1849:7-1854:10: `await registry
        .connect(payee1)
        .transferPayeeship(
          await keeper1.getAddress(),
          await payee2.getAddress(),
        )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1849:21-1850:25: `
        .connect(payee1)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1850:25-1854:10: `
        .transferPayeeship(
          await keeper1.getAddress(),
          await payee2.getAddress(),
        )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1852:24-1852:37: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1853:23-1853:36: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1856:34-1856:76: `.getKeeperInfo(await keeper1.getAddress())`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1856:62-1856:75: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1857:32-1857:45: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1861:32-1862:25: `
        .connect(payee1)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1862:25-1866:10: `
        .transferPayeeship(
          await keeper1.getAddress(),
          await payee2.getAddress(),
        )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1864:24-1864:37: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1865:23-1865:36: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1877:7-1882:10: `await registry
        .connect(payee1)
        .transferPayeeship(
          await keeper1.getAddress(),
          await payee2.getAddress(),
        )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1877:21-1878:25: `
        .connect(payee1)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1878:25-1882:10: `
        .transferPayeeship(
          await keeper1.getAddress(),
          await payee2.getAddress(),
        )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1880:24-1880:37: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1881:23-1881:36: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1884:32-1885:25: `
        .connect(payee1)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1885:25-1889:10: `
        .transferPayeeship(
          await keeper1.getAddress(),
          await payee2.getAddress(),
        )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1887:24-1887:37: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1888:23-1888:36: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1890:31-1890:38: `.wait()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1906:7-1909:8: `await evmRevert(
        registry.connect(payee1).acceptPayeeship(await keeper1.getAddress()),
        'OnlyCallableByProposedPayee()',
      )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1907:17-1907:33: `.connect(payee1)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1907:33-1907:77: `.acceptPayeeship(await keeper1.getAddress())`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1907:63-1907:76: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1913:32-1914:25: `
        .connect(payee2)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1914:25-1915:53: `
        .acceptPayeeship(await keeper1.getAddress())`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1915:39-1915:52: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1926:7-1926:81: `await registry.connect(payee2).acceptPayeeship(await keeper1.getAddress())`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1926:21-1926:37: `.connect(payee2)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1926:37-1926:81: `.acceptPayeeship(await keeper1.getAddress())`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1926:67-1926:80: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1928:34-1928:76: `.getKeeperInfo(await keeper1.getAddress())`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1928:62-1928:75: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1929:32-1929:45: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1947:7-1952:8: `await evmRevert(
        registry
          .connect(payee1)
          .transferUpkeepAdmin(id, await payee2.getAddress()),
        'OnlyCallableByAdmin()',
      )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1948:17-1949:27: `
          .connect(payee1)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1949:27-1950:62: `
          .transferUpkeepAdmin(id, await payee2.getAddress())`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1950:48-1950:61: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1956:7-1961:8: `await evmRevert(
        registry
          .connect(admin)
          .transferUpkeepAdmin(id, await admin.getAddress()),
        'ValueNotChanged()',
      )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1957:17-1958:26: `
          .connect(admin)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1958:26-1959:61: `
          .transferUpkeepAdmin(id, await admin.getAddress())`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1959:47-1959:60: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1965:7-1965:53: `await registry.connect(admin).cancelUpkeep(id)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1965:21-1965:36: `.connect(admin)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1965:36-1965:53: `.cancelUpkeep(id)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1967:7-1972:8: `await evmRevert(
        registry
          .connect(admin)
          .transferUpkeepAdmin(id, await keeper1.getAddress()),
        'UpkeepCancelled()',
      )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1968:17-1969:26: `
          .connect(admin)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1969:26-1970:63: `
          .transferUpkeepAdmin(id, await keeper1.getAddress())`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1970:49-1970:62: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1976:7-1981:8: `await evmRevert(
        registry
          .connect(admin)
          .transferUpkeepAdmin(id, ethers.constants.AddressZero),
        'InvalidRecipient()',
      )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1977:17-1978:26: `
          .connect(admin)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1978:26-1979:65: `
          .transferUpkeepAdmin(id, ethers.constants.AddressZero)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1985:7-1987:60: `await registry
        .connect(admin)
        .transferUpkeepAdmin(id, await payee1.getAddress())`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1985:21-1986:24: `
        .connect(admin)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1986:24-1987:60: `
        .transferUpkeepAdmin(id, await payee1.getAddress())`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1987:46-1987:59: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1989:36-1989:50: `.getUpkeep(id)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1990:31-1990:44: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1994:32-1995:24: `
        .connect(admin)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1995:24-1996:60: `
        .transferUpkeepAdmin(id, await payee1.getAddress())`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:1996:46-1996:59: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2004:7-2006:60: `await registry
        .connect(admin)
        .transferUpkeepAdmin(id, await payee1.getAddress())`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2004:21-2005:24: `
        .connect(admin)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2005:24-2006:60: `
        .transferUpkeepAdmin(id, await payee1.getAddress())`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2006:46-2006:59: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2008:32-2009:24: `
        .connect(admin)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2009:24-2010:60: `
        .transferUpkeepAdmin(id, await payee1.getAddress())`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2010:46-2010:59: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2011:31-2011:38: `.wait()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2024:7-2027:8: `await evmRevert(
        registry.connect(payee2).acceptUpkeepAdmin(id),
        'OnlyCallableByProposedAdmin()',
      )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2025:17-2025:33: `.connect(payee2)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2025:33-2025:55: `.acceptUpkeepAdmin(id)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2031:7-2031:53: `await registry.connect(admin).cancelUpkeep(id)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2031:21-2031:36: `.connect(admin)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2031:36-2031:53: `.cancelUpkeep(id)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2033:7-2036:8: `await evmRevert(
        registry.connect(payee1).acceptUpkeepAdmin(id),
        'UpkeepCancelled()',
      )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2034:17-2034:33: `.connect(payee1)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2034:33-2034:55: `.acceptUpkeepAdmin(id)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2040:32-2040:48: `.connect(payee1)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2040:48-2040:70: `.acceptUpkeepAdmin(id)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2047:7-2047:59: `await registry.connect(payee1).acceptUpkeepAdmin(id)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2047:21-2047:37: `.connect(payee1)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2047:37-2047:59: `.acceptUpkeepAdmin(id)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2049:36-2049:50: `.getUpkeep(id)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2050:32-2050:45: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2065:7-2081:8: `await evmRevert(
        registry.connect(payee1).setConfig({
          paymentPremiumPPB: payment,
          flatFeeMicroLink: flatFee,
          blockCountPerTurn: checks,
          checkGasLimit: maxGas,
          stalenessSeconds: staleness,
          gasCeilingMultiplier,
          minUpkeepSpend,
          maxPerformGas,
          fallbackGasPrice: fbGasEth,
          fallbackLinkPrice: fbLinkEth,
          transcoder: transcoder.address,
          registrar: ethers.constants.AddressZero,
        }),
        'Only callable by owner',
      )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2066:17-2066:33: `.connect(payee1)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2066:33-2079:11: `.setConfig({
          paymentPremiumPPB: payment,
          flatFeeMicroLink: flatFee,
          blockCountPerTurn: checks,
          checkGasLimit: maxGas,
          stalenessSeconds: staleness,
          gasCeilingMultiplier,
          minUpkeepSpend,
          maxPerformGas,
          fallbackGasPrice: fbGasEth,
          fallbackLinkPrice: fbLinkEth,
          transcoder: transcoder.address,
          registrar: ethers.constants.AddressZero,
        })`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2085:34-2085:45: `.getState()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2086:38-2086:64: `.eq(old.paymentPremiumPPB)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2087:37-2087:62: `.eq(old.flatFeeMicroLink)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2088:38-2088:64: `.eq(old.blockCountPerTurn)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2089:37-2089:62: `.eq(old.stalenessSeconds)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2090:41-2090:70: `.eq(old.gasCeilingMultiplier)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2092:7-2105:9: `await registry.connect(owner).setConfig({
        paymentPremiumPPB: payment,
        flatFeeMicroLink: flatFee,
        blockCountPerTurn: checks,
        checkGasLimit: maxGas,
        stalenessSeconds: staleness,
        gasCeilingMultiplier: ceiling,
        minUpkeepSpend,
        maxPerformGas,
        fallbackGasPrice: fbGasEth,
        fallbackLinkPrice: fbLinkEth,
        transcoder: transcoder.address,
        registrar: ethers.constants.AddressZero,
      })`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2092:21-2092:36: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2092:36-2105:9: `.setConfig({
        paymentPremiumPPB: payment,
        flatFeeMicroLink: flatFee,
        blockCountPerTurn: checks,
        checkGasLimit: maxGas,
        stalenessSeconds: staleness,
        gasCeilingMultiplier: ceiling,
        minUpkeepSpend,
        maxPerformGas,
        fallbackGasPrice: fbGasEth,
        fallbackLinkPrice: fbLinkEth,
        transcoder: transcoder.address,
        registrar: ethers.constants.AddressZero,
      })`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2107:38-2107:49: `.getState()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2114:27-2114:55: `.fallbackGasPrice.toNumber()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2115:27-2115:56: `.fallbackLinkPrice.toNumber()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2119:32-2119:47: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2119:47-2132:9: `.setConfig({
        paymentPremiumPPB: payment,
        flatFeeMicroLink: flatFee,
        blockCountPerTurn: checks,
        checkGasLimit: maxGas,
        stalenessSeconds: staleness,
        gasCeilingMultiplier: ceiling,
        minUpkeepSpend,
        maxPerformGas,
        fallbackGasPrice: fbGasEth,
        fallbackLinkPrice: fbLinkEth,
        transcoder: transcoder.address,
        registrar: ethers.constants.AddressZero,
      })`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2154:26-2154:74: `.utils.defaultAbiCoder.encode(['uint256'], [id])`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2156:7-2161:8: `await evmRevert(
        registry
          .connect(keeper1)
          .onTokenTransfer(await keeper1.getAddress(), amount, data),
        'OnlyCallableByLINKToken()',
      )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2157:17-2158:28: `
          .connect(keeper1)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2158:28-2159:69: `
          .onTokenTransfer(await keeper1.getAddress(), amount, data)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2159:41-2159:54: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2165:30-2168:8: `.utils.defaultAbiCoder.encode(
        ['uint256', 'uint256'],
        ['33', '34'],
      )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2171:7-2175:8: `await evmRevert(
        linkToken
          .connect(owner)
          .transferAndCall(registry.address, amount, longData),
      )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2172:18-2173:26: `
          .connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2173:26-2174:63: `
          .transferAndCall(registry.address, amount, longData)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2176:7-2180:8: `await evmRevert(
        linkToken
          .connect(owner)
          .transferAndCall(registry.address, amount, shortData),
      )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2177:18-2178:26: `
          .connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2178:26-2179:64: `
          .transferAndCall(registry.address, amount, shortData)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2184:7-2184:53: `await registry.connect(admin).cancelUpkeep(id)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2184:21-2184:36: `.connect(admin)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2184:36-2184:53: `.cancelUpkeep(id)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2185:7-2188:8: `await evmRevert(
        registry.connect(keeper1).addFunds(id, amount),
        'UpkeepCancelled()',
      )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2186:17-2186:34: `.connect(keeper1)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2186:34-2186:55: `.addFunds(id, amount)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2192:26-2192:74: `.utils.defaultAbiCoder.encode(['uint256'], [id])`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2194:37-2194:51: `.getUpkeep(id)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2195:7-2197:57: `await linkToken
        .connect(owner)
        .transferAndCall(registry.address, amount, data)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2195:22-2196:24: `
        .connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2196:24-2197:57: `
        .transferAndCall(registry.address, amount, data)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2198:36-2198:50: `.getUpkeep(id)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2200:27-2200:39: `.add(amount)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2200:39-2200:49: `.eq(after)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2275:7-2278:8: `await evmRevert(
        registry.connect(keeper1).recoverFunds(),
        'Only callable by owner',
      )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2276:17-2276:34: `.connect(keeper1)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2276:34-2276:49: `.recoverFunds()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2282:44-2282:72: `.balanceOf(registry.address)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2284:7-2284:50: `await linkToken.balanceOf(registry.address)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2284:22-2284:50: `.balanceOf(registry.address)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2286:7-2286:51: `await registry.connect(owner).recoverFunds()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2286:21-2286:36: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2286:36-2286:51: `.recoverFunds()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2287:43-2287:71: `.balanceOf(registry.address)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2288:34-2288:61: `.eq(balanceAfter.add(sent))`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2288:50-2288:60: `.add(sent)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2294:7-2297:8: `await evmRevert(
        registry.connect(keeper1).pause(),
        'Only callable by owner',
      )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2295:17-2295:34: `.connect(keeper1)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2295:34-2295:42: `.pause()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2301:36-2301:45: `.paused()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2303:7-2303:44: `await registry.connect(owner).pause()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2303:21-2303:36: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2303:36-2303:44: `.pause()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2305:35-2305:44: `.paused()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2315:7-2318:8: `await evmRevert(
        registry.connect(keeper1).unpause(),
        'Only callable by owner',
      )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2316:17-2316:34: `.connect(keeper1)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2316:34-2316:44: `.unpause()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2322:35-2322:44: `.paused()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2324:7-2324:46: `await registry.connect(owner).unpause()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2324:21-2324:36: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2324:36-2324:46: `.unpause()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2326:36-2326:45: `.paused()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2335:63-2336:24: `
        .connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2336:24-2343:10: `
        .deploy(
          0,
          registryGasOverhead,
          linkToken.address,
          linkEthFeed.address,
          gasPriceFeed.address,
        )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2344:7-2344:78: `await verifyMaxPayment(registryLogicL1, gasAmounts, premiums, flatFees)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2348:64-2349:24: `
        .connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2349:24-2356:10: `
        .deploy(
          1,
          registryGasOverhead,
          linkToken.address,
          linkEthFeed.address,
          gasPriceFeed.address,
        )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2357:7-2363:8: `await verifyMaxPayment(
        registryLogicArb,
        gasAmounts,
        premiums,
        flatFees,
        l1CostWeiArb,
      )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2367:64-2368:24: `
        .connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2368:24-2375:10: `
        .deploy(
          2,
          registryGasOverhead,
          linkToken.address,
          linkEthFeed.address,
          gasPriceFeed.address,
        )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2376:7-2382:8: `await verifyMaxPayment(
        registryLogicOpt,
        gasAmounts,
        premiums,
        flatFees,
        l1CostWeiOpt,
      )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2389:38-2389:79: `.getPeerRegistryMigrationPermission(peer)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2391:7-2391:65: `await registry.setPeerRegistryMigrationPermission(peer, 1)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2391:21-2391:65: `.setPeerRegistryMigrationPermission(peer, 1)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2392:7-2392:75: `permission = await registry.getPeerRegistryMigrationPermission(peer)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2392:34-2392:75: `.getPeerRegistryMigrationPermission(peer)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2394:7-2394:65: `await registry.setPeerRegistryMigrationPermission(peer, 2)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2394:21-2394:65: `.setPeerRegistryMigrationPermission(peer, 2)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2395:7-2395:75: `permission = await registry.getPeerRegistryMigrationPermission(peer)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2395:34-2395:75: `.getPeerRegistryMigrationPermission(peer)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2397:7-2397:65: `await registry.setPeerRegistryMigrationPermission(peer, 0)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2397:21-2397:65: `.setPeerRegistryMigrationPermission(peer, 0)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2398:7-2398:75: `permission = await registry.getPeerRegistryMigrationPermission(peer)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2398:34-2398:75: `.getPeerRegistryMigrationPermission(peer)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2403:17-2403:32: `.connect(admin)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2403:32-2403:77: `.setPeerRegistryMigrationPermission(peer, 10)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2408:17-2408:32: `.connect(admin)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2408:32-2408:76: `.setPeerRegistryMigrationPermission(peer, 1)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2423:31-2423:45: `.getUpkeep(id)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2424:31-2424:45: `.getUpkeep(id)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2425:31-2425:42: `.getState()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2426:9-2428:62: `await registry
          .connect(admin)
          .transferUpkeepAdmin(id, await payee1.getAddress())`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2426:23-2427:26: `
          .connect(admin)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2427:26-2428:62: `
          .transferUpkeepAdmin(id, await payee1.getAddress())`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2428:48-2428:61: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2431:9-2431:78: `await registry.connect(admin).migrateUpkeeps([id], registry2.address)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2431:23-2431:38: `.connect(admin)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2431:38-2431:78: `.migrateUpkeeps([id], registry2.address)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2432:31-2432:42: `.getState()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2433:32-2433:43: `.getState()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2434:31-2434:45: `.getUpkeep(id)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2435:31-2435:45: `.getUpkeep(id)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2436:32-2436:46: `.getUpkeep(id)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2437:32-2437:43: `.getState()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2440:32-2440:46: `.getUpkeep(id)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2443:19-2443:35: `.connect(payee1)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2443:35-2443:57: `.acceptUpkeepAdmin(id)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2446:20-2446:36: `.connect(payee1)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2446:36-2446:58: `.acceptUpkeepAdmin(id)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2451:31-2451:45: `.getUpkeep(id)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2452:31-2452:45: `.getUpkeep(id)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2453:31-2453:42: `.getState()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2454:9-2454:54: `await registry.connect(admin).pauseUpkeep(id)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2454:23-2454:38: `.connect(admin)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2454:38-2454:54: `.pauseUpkeep(id)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2456:31-2456:45: `.getUpkeep(id)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2458:9-2458:78: `await registry.connect(admin).migrateUpkeeps([id], registry2.address)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2458:23-2458:38: `.connect(admin)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2458:38-2458:78: `.migrateUpkeeps([id], registry2.address)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2459:31-2459:42: `.getState()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2460:32-2460:43: `.getState()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2461:31-2461:45: `.getUpkeep(id)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2462:32-2462:46: `.getUpkeep(id)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2463:31-2463:45: `.getUpkeep(id)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2464:32-2464:46: `.getUpkeep(id)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2465:32-2465:43: `.getState()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2469:32-2469:46: `.getUpkeep(id)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2473:31-2473:45: `.getUpkeep(id)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2474:31-2474:45: `.getUpkeep(id)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2475:31-2475:42: `.getState()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2476:28-2477:26: `
          .connect(admin)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2477:26-2478:51: `
          .migrateUpkeeps([id], registry2.address)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2488:19-2488:34: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2488:34-2488:74: `.migrateUpkeeps([id], registry2.address)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2490:9-2490:78: `await registry.connect(admin).migrateUpkeeps([id], registry2.address)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2490:23-2490:38: `.connect(admin)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2490:38-2490:78: `.migrateUpkeeps([id], registry2.address)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2497:9-2497:80: `await registry.setPeerRegistryMigrationPermission(registry2.address, 0)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2497:23-2497:80: `.setPeerRegistryMigrationPermission(registry2.address, 0)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2498:9-2498:80: `await registry2.setPeerRegistryMigrationPermission(registry.address, 0)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2498:24-2498:80: `.setPeerRegistryMigrationPermission(registry.address, 0)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2499:30-2499:70: `.migrateUpkeeps([id], registry2.address)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2502:9-2502:80: `await registry.setPeerRegistryMigrationPermission(registry2.address, 1)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2502:23-2502:80: `.setPeerRegistryMigrationPermission(registry2.address, 1)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2503:9-2503:80: `await registry2.setPeerRegistryMigrationPermission(registry.address, 0)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2503:24-2503:80: `.setPeerRegistryMigrationPermission(registry.address, 0)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2504:30-2504:70: `.migrateUpkeeps([id], registry2.address)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2507:9-2507:80: `await registry.setPeerRegistryMigrationPermission(registry2.address, 0)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2507:23-2507:80: `.setPeerRegistryMigrationPermission(registry2.address, 0)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2508:9-2508:80: `await registry2.setPeerRegistryMigrationPermission(registry.address, 2)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2508:24-2508:80: `.setPeerRegistryMigrationPermission(registry.address, 2)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2509:30-2509:70: `.migrateUpkeeps([id], registry2.address)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2512:9-2512:80: `await registry.setPeerRegistryMigrationPermission(registry2.address, 2)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2512:23-2512:80: `.setPeerRegistryMigrationPermission(registry2.address, 2)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2513:9-2513:80: `await registry2.setPeerRegistryMigrationPermission(registry.address, 1)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2513:24-2513:80: `.setPeerRegistryMigrationPermission(registry.address, 1)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2514:30-2514:70: `.migrateUpkeeps([id], registry2.address)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2527:7-2540:9: `await registry.connect(owner).setConfig({
        paymentPremiumPPB,
        flatFeeMicroLink: flatFee,
        blockCountPerTurn,
        checkGasLimit,
        stalenessSeconds,
        gasCeilingMultiplier: multiplier,
        minUpkeepSpend,
        maxPerformGas,
        fallbackGasPrice,
        fallbackLinkPrice,
        transcoder: transcoder.address,
        registrar: ethers.constants.AddressZero,
      })`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2527:21-2527:36: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2527:36-2540:9: `.setConfig({
        paymentPremiumPPB,
        flatFeeMicroLink: flatFee,
        blockCountPerTurn,
        checkGasLimit,
        stalenessSeconds,
        gasCeilingMultiplier: multiplier,
        minUpkeepSpend,
        maxPerformGas,
        fallbackGasPrice,
        fallbackLinkPrice,
        transcoder: transcoder.address,
        registrar: ethers.constants.AddressZero,
      })`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2541:7-2541:77: `await linkToken.connect(owner).approve(registry.address, toWei('100'))`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2541:22-2541:37: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2541:37-2541:77: `.approve(registry.address, toWei('100'))`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2543:33-2544:24: `
        .connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2544:24-2550:10: `
        .registerUpkeep(
          mock.address,
          executeGas,
          await admin.getAddress(),
          emptyBytes,
        )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2548:22-2548:35: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2552:33-2553:24: `
        .connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2553:24-2559:10: `
        .registerUpkeep(
          mock.address,
          executeGas,
          await admin.getAddress(),
          emptyBytes,
        )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2557:22-2557:35: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2561:7-2561:35: `await mock.setCanCheck(true)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2561:17-2561:35: `.setCanCheck(true)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2562:7-2562:37: `await mock.setCanPerform(true)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2562:17-2562:37: `.setCanPerform(true)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2564:42-2564:74: `.getMaxPaymentForGas(executeGas)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2564:75-2566:8: `.sub(
        1,
      )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2567:41-2567:73: `.getMaxPaymentForGas(executeGas)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2568:7-2568:69: `await registry.connect(owner).addFunds(upkeepID1, minBalance1)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2568:21-2568:36: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2568:36-2568:69: `.addFunds(upkeepID1, minBalance1)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2569:7-2569:69: `await registry.connect(owner).addFunds(upkeepID2, minBalance2)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2569:21-2569:36: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2569:36-2569:69: `.addFunds(upkeepID2, minBalance2)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2571:7-2577:8: `await evmRevert(
        registry
          .connect(zeroAddress)
          .callStatic.checkUpkeep(upkeepID1, await keeper1.getAddress(), {
            gasPrice: callGasPrice,
          }),
      )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2572:17-2573:32: `
          .connect(zeroAddress)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2573:32-2576:13: `
          .callStatic.checkUpkeep(upkeepID1, await keeper1.getAddress(), {
            gasPrice: callGasPrice,
          })`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2574:59-2574:72: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2578:7-2582:11: `await registry
        .connect(zeroAddress)
        .callStatic.checkUpkeep(upkeepID2, await keeper1.getAddress(), {
          gasPrice: callGasPrice,
        })`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2578:21-2579:30: `
        .connect(zeroAddress)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2579:30-2582:11: `
        .callStatic.checkUpkeep(upkeepID2, await keeper1.getAddress(), {
          gasPrice: callGasPrice,
        })`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2580:57-2580:70: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2584:7-2589:8: `await evmRevert(
        registry
          .connect(keeper1)
          .performUpkeep(upkeepID1, performData, { gasLimit: extraGas }),
        'InsufficientFunds()',
      )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2585:17-2586:28: `
          .connect(keeper1)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2586:28-2587:73: `
          .performUpkeep(upkeepID1, performData, { gasLimit: extraGas })`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2590:7-2592:71: `await registry
        .connect(keeper1)
        .performUpkeep(upkeepID2, performData, { gasLimit: extraGas })`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2590:21-2591:26: `
        .connect(keeper1)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2591:26-2592:71: `
        .performUpkeep(upkeepID2, performData, { gasLimit: extraGas })`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2598:31-2598:41: `.from('1')`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2599:7-2599:79: `await linkToken.connect(keeper1).approve(registry.address, toWei('100'))`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2599:22-2599:39: `.connect(keeper1)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2599:39-2599:79: `.approve(registry.address, toWei('100'))`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2600:7-2600:35: `await mock.setCanCheck(true)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2600:17-2600:35: `.setCanCheck(true)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2601:7-2601:37: `await mock.setCanPerform(true)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2601:17-2601:37: `.setCanPerform(true)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2602:40-2602:67: `.getMinBalanceForUpkeep(id)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2603:32-2603:44: `.sub(oneWei)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2604:7-2604:59: `await registry.connect(keeper1).addFunds(id, tooLow)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2604:21-2604:38: `.connect(keeper1)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2604:38-2604:59: `.addFunds(id, tooLow)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2605:7-2610:8: `await evmRevert(
        registry
          .connect(zeroAddress)
          .callStatic.checkUpkeep(id, await keeper1.getAddress()),
        'InsufficientFunds()',
      )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2606:17-2607:32: `
          .connect(zeroAddress)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2607:32-2608:66: `
          .callStatic.checkUpkeep(id, await keeper1.getAddress())`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2608:52-2608:65: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2611:7-2611:59: `await registry.connect(keeper1).addFunds(id, oneWei)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2611:21-2611:38: `.connect(keeper1)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2611:38-2611:59: `.addFunds(id, oneWei)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2612:7-2614:64: `await registry
        .connect(zeroAddress)
        .callStatic.checkUpkeep(id, await keeper1.getAddress())`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2612:21-2613:30: `
        .connect(zeroAddress)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2613:30-2614:64: `
        .callStatic.checkUpkeep(id, await keeper1.getAddress())`
$DIR/contracts/test/v0.8/automation/KeeperRegistry1_3.test.ts:2614:50-2614:63: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:603:7-603:44: `await registry.connect(owner).pause()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:603:21-603:36: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:603:36-603:44: `.pause()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:604:7-607:8: `await evmRevert(
        getTransmitTx(registry, keeper1, [upkeepId.toString()], f + 1),
        'RegistryPaused()',
      )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:611:7-614:8: `await evmRevert(
        getTransmitTx(registry, payee1, [upkeepId.toString()], f + 1),
        'OnlyActiveTransmitters()',
      )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:620:39-620:67: `.provider.getBlock('latest')`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:622:16-622:31: `.push(upkeepId)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:623:24-623:79: `.push([latestBlock.number + 1, latestBlock.hash, '0x'])`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:625:24-625:79: `.push([latestBlock.number + 1, latestBlock.hash, '0x'])`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:627:28-630:8: `.utils.defaultAbiCoder.encode(
        ['uint256', 'uint256', 'uint256[]', 'tuple(uint32,bytes32,bytes)[]'],
        [0, 0, upkeepIds, performDataTuples],
      )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:632:7-635:8: `await evmRevert(
        getTransmitTxWithReport(registry, keeper1, report, f + 1),
        'InvalidReport()',
      )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:641:39-641:67: `.provider.getBlock('latest')`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:643:16-643:31: `.push(upkeepId)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:644:26-649:8: `.push(
        ethers.utils.defaultAbiCoder.encode(
          ['tuple(uint32,bytes32)'], // missing performData
          [[latestBlock.number + 1, latestBlock.hash]],
        ),
      )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:645:15-648:10: `.utils.defaultAbiCoder.encode(
          ['tuple(uint32,bytes32)'], // missing performData
          [[latestBlock.number + 1, latestBlock.hash]],
        )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:651:28-654:8: `.utils.defaultAbiCoder.encode(
        ['uint256[]', 'bytes[]'],
        [upkeepIds, wrappedPerformDatas],
      )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:656:7-656:81: `await evmRevert(getTransmitTxWithReport(registry, keeper1, report, f + 1))`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:662:28-665:8: `.utils.defaultAbiCoder.encode(
        ['uint256', 'uint256', 'uint256[]', 'bytes[]'],
        [0, 0, upkeepIds, wrappedPerformDatas],
      )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:667:7-670:8: `await evmRevert(
        getTransmitTxWithReport(registry, keeper1, report, f + 1),
        'StaleReport()',
      )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:674:7-682:8: `await evmRevert(
        getTransmitTx(
          registry,
          keeper1,
          [upkeepId.add(BigNumber.from('1')).toString()],
          f + 1,
        ),
        'StaleReport()',
      )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:678:20-678:45: `.add(BigNumber.from('1'))`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:678:34-678:44: `.from('1')`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:687:7-687:69: `await registry.connect(admin).addFunds(upkeepId, toWei('100'))`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:687:21-687:36: `.connect(admin)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:687:36-687:69: `.addFunds(upkeepId, toWei('100'))`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:688:7-696:8: `await evmRevert(
        getTransmitTx(
          registry,
          keeper1,
          [upkeepId.toString(), upkeepId.toString()],
          f + 1,
        ),
        'InvalidReport()',
      )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:700:7-703:8: `await evmRevert(
        getTransmitTx(registry, keeper1, [upkeepId.toString()], f + 1),
        'StaleReport()',
      )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:721:9-721:24: `await tx.wait()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:721:17-721:24: `.wait()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:723:55-723:75: `.getUpkeep(upkeepId)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:725:46-727:10: `.provider.getBlock(
          lastPerformBlockNumber,
        )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:734:9-746:10: `await evmRevert(
          getTransmitTx(
            registry,
            keeper1,
            [upkeepId.toString()],
            f + 1,
            {},
            '0x',
            lastPerformBlock.number - 1,
            lastPerformBlock.parentHash,
          ),
          'StaleReport()',
        )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:750:9-750:71: `await registry.connect(admin).addFunds(upkeepId, toWei('100'))`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:750:23-750:38: `.connect(admin)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:750:38-750:71: `.addFunds(upkeepId, toWei('100'))`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:751:41-751:69: `.provider.getBlock('latest')`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:753:9-766:10: `await evmRevert(
          getTransmitTx(
            registry,
            keeper1,
            [upkeepId.toString()],
            f + 1,
            {},
            '0x',
            latestBlock.number - 1,
            latestBlock.hash,
          ), // should be latestBlock.parentHash

          'StaleReport()',
        )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:774:9-774:61: `await registry.connect(admin).cancelUpkeep(upkeepId)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:774:23-774:38: `.connect(admin)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:774:38-774:61: `.cancelUpkeep(upkeepId)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:777:11-777:53: `await ethers.provider.send('evm_mine', [])`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:777:23-777:53: `.provider.send('evm_mine', [])`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:780:9-791:10: `await evmRevert(
          registry
            .connect(keeper1)
            .transmit(
              [emptyBytes32, emptyBytes32, emptyBytes32],
              latestBlockReport,
              [],
              [],
              emptyBytes32,
            ),
          'StaleReport()',
        )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:781:19-782:30: `
            .connect(keeper1)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:782:30-789:14: `
            .transmit(
              [emptyBytes32, emptyBytes32, emptyBytes32],
              latestBlockReport,
              [],
              [],
              emptyBytes32,
            )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:798:9-798:61: `await registry.connect(admin).cancelUpkeep(upkeepId)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:798:23-798:38: `.connect(admin)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:798:38-798:61: `.cancelUpkeep(upkeepId)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:801:11-801:53: `await ethers.provider.send('evm_mine', [])`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:801:23-801:53: `.provider.send('evm_mine', [])`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:805:9-809:10: `await evmRevert(
          getTransmitTxWithReport(registry, keeper1, latestBlockReport, f + 1),

          'StaleReport()',
        )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:813:13-813:34: `.setCanPerform(false)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:821:33-821:40: `.wait()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:832:13-832:45: `.setPerformGasToBurn(executeGas)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:833:9-837:10: `await evmRevert(
          getTransmitTx(registry, keeper1, [upkeepId.toString()], f + 1, {
            gasLimit: executeGas,
          }),
        )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:841:13-841:33: `.setCanPerform(true)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:851:33-851:40: `.wait()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:861:23-861:49: `.push(iface.parseLog(log))`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:861:34-861:48: `.parseLog(log)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:872:32-872:57: `.mul(BigNumber.from('1'))`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:872:46-872:56: `.from('1')`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:873:13-873:33: `.setCanPerform(true)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:874:54-874:65: `.getState()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:883:33-883:40: `.wait()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:884:53-884:64: `.getState()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:886:45-886:72: `.sub(registryPremiumBefore)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:901:22-901:32: `.from('1')`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:904:12-904:29: `.total.toString()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:912:22-912:32: `.from('1')`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:915:12-915:31: `.premium.toString()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:922:32-922:58: `.mul(BigNumber.from('10'))`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:922:46-922:57: `.from('10')`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:923:13-923:33: `.setCanPerform(true)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:932:33-932:40: `.wait()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:949:12-949:29: `.total.toString()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:955:13-955:33: `.setCanPerform(true)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:957:39-957:53: `.from(1000000)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:960:63-961:26: `
          .connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:961:26-967:12: `
          .deploy(
            1, // arbitrum
            linkToken.address,
            linkEthFeed.address,
            gasPriceFeed.address,
          )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:969:53-970:26: `
          .connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:970:26-971:41: `
          .deploy(registryLogic.address)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:972:9-981:12: `await registry
          .connect(owner)
          .setConfig(
            signerAddresses,
            keeperAddresses,
            f,
            encodeConfig(config),
            offchainVersion,
            offchainBytes,
          )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:972:23-973:26: `
          .connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:973:26-981:12: `
          .setConfig(
            signerAddresses,
            keeperAddresses,
            f,
            encodeConfig(config),
            offchainVersion,
            offchainBytes,
          )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:982:32-983:26: `
          .connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:983:26-990:12: `
          .registerUpkeep(
            mock.address,
            executeGas,
            await admin.getAddress(),
            randomBytes,
            emptyBytes,
          )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:987:24-987:37: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:991:9-991:41: `upkeepId = await getUpkeepID(tx)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:992:9-992:80: `await linkToken.connect(owner).approve(registry.address, toWei('1000'))`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:992:24-992:39: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:992:39-992:80: `.approve(registry.address, toWei('1000'))`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:993:9-993:71: `await registry.connect(owner).addFunds(upkeepId, toWei('100'))`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:993:23-993:38: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:993:38-993:71: `.addFunds(upkeepId, toWei('100'))`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:996:9-1002:10: `tx = await getTransmitTx(
          registry,
          keeper1,
          [upkeepId.toString()],
          f + 1,
          { gasPrice: gasWei.mul('5') }, // High gas price so that it gets capped
        )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1001:29-1001:38: `.mul('5')`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1003:33-1003:40: `.wait()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1020:25-1020:51: `.div(gasCeilingMultiplier)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1021:12-1021:29: `.total.toString()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1027:63-1028:26: `
          .connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1028:26-1029:55: `
          .deploy(linkToken.address, registry.address)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1030:34-1031:26: `
          .connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1031:26-1038:12: `
          .registerUpkeep(
            autoFunderUpkeep.address,
            executeGas,
            autoFunderUpkeep.address,
            randomBytes,
            emptyBytes,
          )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1039:9-1039:41: `upkeepId = await getUpkeepID(tx)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1041:9-1041:53: `await autoFunderUpkeep.setUpkeepId(upkeepId)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1041:31-1041:53: `.setUpkeepId(upkeepId)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1043:9-1045:61: `await linkToken
          .connect(owner)
          .transfer(autoFunderUpkeep.address, toWei('1000'))`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1043:24-1044:26: `
          .connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1044:26-1045:61: `
          .transfer(autoFunderUpkeep.address, toWei('1000'))`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1046:42-1046:74: `.getMaxPaymentForGas(executeGas)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1050:9-1050:73: `await registry.connect(owner).addFunds(upkeepId, initialBalance)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1050:23-1050:38: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1050:38-1050:73: `.addFunds(upkeepId, initialBalance)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1051:9-1051:50: `await autoFunderUpkeep.setAutoFundLink(0)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1051:31-1051:50: `.setAutoFundLink(0)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1052:9-1052:51: `await autoFunderUpkeep.setIsEligible(true)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1052:31-1052:51: `.setIsEligible(true)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1053:9-1053:77: `await getTransmitTx(registry, keeper1, [upkeepId.toString()], f + 1)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1055:48-1055:68: `.getUpkeep(upkeepId)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1056:40-1056:59: `.lt(initialBalance)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1057:40-1057:76: `.gte(initialBalance.sub(maxPayment))`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1057:59-1057:75: `.sub(maxPayment)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1060:9-1060:43: `initialBalance = postUpkeepBalance`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1062:9-1062:64: `await autoFunderUpkeep.setAutoFundLink(autoTopupAmount)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1062:31-1062:64: `.setAutoFundLink(autoTopupAmount)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1063:9-1063:51: `await autoFunderUpkeep.setIsEligible(true)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1063:31-1063:51: `.setIsEligible(true)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1064:9-1064:77: `await getTransmitTx(registry, keeper1, [upkeepId.toString()], f + 1)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1066:9-1066:73: `postUpkeepBalance = (await registry.getUpkeep(upkeepId)).balance`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1066:44-1066:64: `.getUpkeep(upkeepId)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1069:28-1071:12: `.gte(
            initialBalance.add(autoTopupAmount).sub(maxPayment),
          )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1070:27-1070:48: `.add(autoTopupAmount)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1070:48-1070:64: `.sub(maxPayment)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1076:63-1077:26: `
          .connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1077:26-1078:55: `
          .deploy(linkToken.address, registry.address)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1079:34-1080:26: `
          .connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1080:26-1087:12: `
          .registerUpkeep(
            autoFunderUpkeep.address,
            executeGas,
            autoFunderUpkeep.address,
            randomBytes,
            emptyBytes,
          )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1088:9-1088:41: `upkeepId = await getUpkeepID(tx)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1090:9-1090:53: `await autoFunderUpkeep.setUpkeepId(upkeepId)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1090:31-1090:53: `.setUpkeepId(upkeepId)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1091:9-1091:71: `await registry.connect(owner).addFunds(upkeepId, toWei('100'))`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1091:23-1091:38: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1091:38-1091:71: `.addFunds(upkeepId, toWei('100'))`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1093:9-1093:51: `await autoFunderUpkeep.setIsEligible(true)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1093:31-1093:51: `.setIsEligible(true)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1094:9-1094:53: `await autoFunderUpkeep.setShouldCancel(true)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1094:31-1094:53: `.setShouldCancel(true)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1096:42-1096:62: `.getUpkeep(upkeepId)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1100:9-1100:77: `await getTransmitTx(registry, keeper1, [upkeepId.toString()], f + 1)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1103:9-1103:58: `registration = await registry.getUpkeep(upkeepId)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1103:38-1103:58: `.getUpkeep(upkeepId)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1105:36-1105:54: `.lt(oldExpiration)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1115:63-1115:79: `.slice(0, f + 1)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1116:9-1127:10: `await evmRevert(
          registry
            .connect(keeper1)
            .transmit(
              [reportContext[0], reportContext[1], reportContext[2]],
              report,
              sigs.rs,
              sigs.ss,
              sigs.vs,
            ),
          'ConfigDigestMismatch()',
        )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1117:19-1118:30: `
            .connect(keeper1)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1118:30-1125:14: `
            .transmit(
              [reportContext[0], reportContext[1], reportContext[2]],
              report,
              sigs.rs,
              sigs.ss,
              sigs.vs,
            )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1131:45-1131:56: `.getState()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1139:63-1139:79: `.slice(0, f + 2)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1140:9-1151:10: `await evmRevert(
          registry
            .connect(keeper1)
            .transmit(
              [reportContext[0], reportContext[1], reportContext[2]],
              report,
              sigs.rs,
              sigs.ss,
              sigs.vs,
            ),
          'IncorrectNumberOfSignatures()',
        )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1141:19-1142:30: `
            .connect(keeper1)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1142:30-1149:14: `
            .transmit(
              [reportContext[0], reportContext[1], reportContext[2]],
              report,
              sigs.rs,
              sigs.ss,
              sigs.vs,
            )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1155:45-1155:56: `.getState()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1164:35-1164:57: `.Wallet.createRandom()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1165:35-1165:57: `.Wallet.createRandom()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1167:9-1178:10: `await evmRevert(
          registry
            .connect(keeper1)
            .transmit(
              [reportContext[0], reportContext[1], reportContext[2]],
              report,
              sigs.rs,
              sigs.ss,
              sigs.vs,
            ),
          'OnlyActiveSigners()',
        )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1168:19-1169:30: `
            .connect(keeper1)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1169:30-1176:14: `
            .transmit(
              [reportContext[0], reportContext[1], reportContext[2]],
              report,
              sigs.rs,
              sigs.ss,
              sigs.vs,
            )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1182:45-1182:56: `.getState()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1191:9-1202:10: `await evmRevert(
          registry
            .connect(keeper1)
            .transmit(
              [reportContext[0], reportContext[1], reportContext[2]],
              report,
              sigs.rs,
              sigs.ss,
              sigs.vs,
            ),
          'DuplicateSigners()',
        )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1192:19-1193:30: `
            .connect(keeper1)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1193:30-1200:14: `
            .transmit(
              [reportContext[0], reportContext[1], reportContext[2]],
              report,
              sigs.rs,
              sigs.ss,
              sigs.vs,
            )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1206:9-1213:10: `await registry.connect(owner).setConfig(
          signerAddresses,
          keeperAddresses,
          10, // maximise f to maximise overhead
          encodeConfig(config),
          offchainVersion,
          offchainBytes,
        )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1206:23-1206:38: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1206:38-1213:10: `.setConfig(
          signerAddresses,
          keeperAddresses,
          10, // maximise f to maximise overhead
          encodeConfig(config),
          offchainVersion,
          offchainBytes,
        )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1214:34-1214:49: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1214:49-1220:10: `.registerUpkeep(
          mock.address,
          maxPerformGas, // max allowed gas
          await admin.getAddress(),
          randomBytes,
          emptyBytes,
        )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1217:22-1217:35: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1221:9-1221:41: `upkeepId = await getUpkeepID(tx)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1222:9-1222:71: `await registry.connect(admin).addFunds(upkeepId, toWei('100'))`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1222:23-1222:38: `.connect(admin)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1222:38-1222:71: `.addFunds(upkeepId, toWei('100'))`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1226:11-1226:30: `performData += '11'`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1229:13-1229:33: `.setCanPerform(true)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1230:13-1230:48: `.setPerformGasToBurn(maxPerformGas)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1232:9-1239:10: `await getTransmitTx(
          registry,
          keeper1,
          [upkeepId.toString()],
          11,
          { gasLimit: maxPerformGas.add(transmitGasOverhead) },
          performData,
        )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1237:36-1237:61: `.add(transmitGasOverhead)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1245:11-1254:14: `await registry
            .connect(owner)
            .setConfig(
              signerAddresses,
              keeperAddresses,
              newF,
              encodeConfig(config),
              offchainVersion,
              offchainBytes,
            )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1245:25-1246:28: `
            .connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1246:28-1254:14: `
            .setConfig(
              signerAddresses,
              keeperAddresses,
              newF,
              encodeConfig(config),
              offchainVersion,
              offchainBytes,
            )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1255:15-1255:35: `.setCanPerform(true)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1256:42-1256:70: `.provider.getBlock('latest')`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1258:46-1260:12: `.getTransmitterInfo(
            await keeper1.getAddress(),
          )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1259:26-1259:39: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1261:52-1261:72: `.getUpkeep(upkeepId)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1262:56-1262:67: `.getState()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1264:51-1266:12: `.balanceOf(
            await keeper1.getAddress(),
          )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1265:26-1265:39: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1267:53-1267:81: `.balanceOf(registry.address)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1281:35-1281:42: `.wait()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1301:32-1301:56: `.gt(BigNumber.from('0'))`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1301:45-1301:55: `.from('0')`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1302:36-1302:60: `.gt(BigNumber.from('0'))`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1302:49-1302:59: `.from('0')`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1303:37-1303:61: `.gt(BigNumber.from('0'))`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1303:50-1303:60: `.from('0')`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1305:45-1307:12: `.getTransmitterInfo(
            await keeper1.getAddress(),
          )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1306:26-1306:39: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1308:51-1308:71: `.getUpkeep(upkeepId)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1309:50-1311:12: `.balanceOf(
            await keeper1.getAddress(),
          )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1310:26-1310:39: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1312:52-1312:80: `.balanceOf(registry.address)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1313:55-1313:66: `.getState()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1315:47-1315:74: `.sub(registryPremiumBefore)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1317:45-1318:26: `
            .sub(premium)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1318:26-1319:70: `
            .add(premium.div(BigNumber.from(keeperAddresses.length)))`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1319:25-1319:69: `.div(BigNumber.from(keeperAddresses.length))`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1319:39-1319:68: `.from(keeperAddresses.length)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1322:24-1322:51: `.balance.sub(keeperPayment)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1323:25-1323:44: `.balance.toString()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1326:31-1326:57: `.balance.sub(totalPayment)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1327:30-1327:49: `.balance.toString()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1329:40-1329:61: `.eq(keeperLinkBefore)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1330:43-1330:65: `.eq(registryLinkAfter)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1334:30-1334:60: `.amountSpent.sub(totalPayment)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1335:31-1335:54: `.amountSpent.toString()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1338:30-1339:51: `.amountSpent
              .sub(registrationBefore.amountSpent)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1339:51-1340:77: `
              .eq(registrationBefore.balance.sub(registrationAfter.balance))`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1340:37-1340:76: `.balance.sub(registrationAfter.balance)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1344:30-1344:64: `.lastPerformBlockNumber.toString()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1349:39-1349:50: `.getState()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1363:9-1363:24: `await tx.wait()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1363:17-1363:24: `.wait()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1368:11-1368:28: `longBytes += '11'`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1383:21-1383:50: `.setCanPerform(upkeepSuccess)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1384:21-1384:53: `.setPerformGasToBurn(performGas)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1385:17-1394:20: `await registry
                  .connect(owner)
                  .setConfig(
                    signerAddresses,
                    keeperAddresses,
                    newF,
                    encodeConfig(config),
                    offchainVersion,
                    offchainBytes,
                  )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1385:31-1386:34: `
                  .connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1386:34-1394:20: `
                  .setConfig(
                    signerAddresses,
                    keeperAddresses,
                    newF,
                    encodeConfig(config),
                    offchainVersion,
                    offchainBytes,
                  )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1395:17-1402:18: `tx = await getTransmitTx(
                  registry,
                  keeper1,
                  [upkeepId.toString()],
                  newF + 1,
                  {},
                  performData,
                )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1403:41-1403:48: `.wait()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1412:38-1412:62: `.gt(BigNumber.from('0'))`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1412:51-1412:61: `.from('0')`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1413:42-1413:66: `.gt(BigNumber.from('0'))`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1413:55-1413:65: `.from('0')`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1416:26-1425:20: `.log(
                    'Gas Benchmarking - sig verification ( f =',
                    newF,
                    '): calculated overhead: ',
                    gasOverhead.toString(),
                    ' actual overhead: ',
                    receipt.gasUsed.sub(gasUsed).toString(),
                    ' margin over gasUsed: ',
                    gasUsed.add(gasOverhead).sub(receipt.gasUsed).toString(),
                  )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1422:28-1422:49: `.gasUsed.sub(gasUsed)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1424:28-1424:45: `.add(gasOverhead)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1424:45-1424:66: `.sub(receipt.gasUsed)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1430:30-1443:20: `.lt(
                    registryGasOverhead
                      .add(
                        registryPerSignerGasOverhead.mul(
                          BigNumber.from(newF + 1),
                        ),
                      )
                      .add(
                        BigNumber.from(
                          registryPerPerformByteGasOverhead.toNumber() *
                            performData.length,
                        ),
                      ),
                  )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1431:40-1436:24: `
                      .add(
                        registryPerSignerGasOverhead.mul(
                          BigNumber.from(newF + 1),
                        ),
                      )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1433:53-1435:26: `.mul(
                          BigNumber.from(newF + 1),
                        )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1434:36-1434:51: `.from(newF + 1)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1436:24-1442:24: `
                      .add(
                        BigNumber.from(
                          registryPerPerformByteGasOverhead.toNumber() *
                            performData.length,
                        ),
                      )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1438:34-1441:26: `.from(
                          registryPerPerformByteGasOverhead.toNumber() *
                            performData.length,
                        )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1448:26-1448:43: `.add(gasOverhead)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1448:43-1448:63: `.gt(receipt.gasUsed)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1452:17-1459:88: `assert.isTrue(
                  gasUsed
                    .add(gasOverhead)
                    .lt(
                      receipt.gasUsed.add(BigNumber.from(gasCalculationMargin)),
                    ),
                ),
                  'Gas overhead calculated is too high, decrease account gas variables'`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1452:23-1458:18: `.isTrue(
                  gasUsed
                    .add(gasOverhead)
                    .lt(
                      receipt.gasUsed.add(BigNumber.from(gasCalculationMargin)),
                    ),
                )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1453:26-1454:38: `
                    .add(gasOverhead)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1454:38-1457:22: `
                    .lt(
                      receipt.gasUsed.add(BigNumber.from(gasCalculationMargin)),
                    )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1456:30-1456:80: `.gasUsed.add(BigNumber.from(gasCalculationMargin))`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1456:52-1456:79: `.from(gasCalculationMargin)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1519:52-1521:18: `.getTransmitterInfo(
                  await keeper1.getAddress(),
                )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1520:32-1520:45: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1522:57-1524:18: `.balanceOf(
                  await keeper1.getAddress(),
                )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1523:32-1523:45: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1525:59-1527:18: `.balanceOf(
                  registry.address,
                )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1528:62-1528:73: `.getState()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1530:64-1536:18: `.all(
                  passingUpkeepIds.map(async (id) => {
                    const reg = await registry.getUpkeep(BigNumber.from(id))
                    assert.equal(reg.lastPerformBlockNumber.toString(), '0')
                    return reg
                  }),
                )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1531:35-1535:21: `.map(async (id) => {
                    const reg = await registry.getUpkeep(BigNumber.from(id))
                    assert.equal(reg.lastPerformBlockNumber.toString(), '0')
                    return reg
                  })`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1532:47-1532:77: `.getUpkeep(BigNumber.from(id))`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1532:67-1532:76: `.from(id)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1533:37-1533:71: `.lastPerformBlockNumber.toString()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1537:70-1543:18: `.all(
                  failingUpkeepIds.map(async (id) => {
                    const reg = await registry.getUpkeep(BigNumber.from(id))
                    assert.equal(reg.lastPerformBlockNumber.toString(), '0')
                    return reg
                  }),
                )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1538:35-1542:21: `.map(async (id) => {
                    const reg = await registry.getUpkeep(BigNumber.from(id))
                    assert.equal(reg.lastPerformBlockNumber.toString(), '0')
                    return reg
                  })`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1539:47-1539:77: `.getUpkeep(BigNumber.from(id))`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1539:67-1539:76: `.from(id)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1540:37-1540:71: `.lastPerformBlockNumber.toString()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1548:35-1548:60: `.concat(failingUpkeepIds)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1552:41-1552:48: `.wait()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1561:51-1563:18: `.getTransmitterInfo(
                  await keeper1.getAddress(),
                )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1562:32-1562:45: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1564:56-1566:18: `.balanceOf(
                  await keeper1.getAddress(),
                )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1565:32-1565:45: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1567:58-1569:18: `.balanceOf(
                  registry.address,
                )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1570:63-1574:18: `.all(
                  passingUpkeepIds.map(async (id) => {
                    return await registry.getUpkeep(BigNumber.from(id))
                  }),
                )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1571:35-1573:21: `.map(async (id) => {
                    return await registry.getUpkeep(BigNumber.from(id))
                  })`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1572:42-1572:72: `.getUpkeep(BigNumber.from(id))`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1572:62-1572:71: `.from(id)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1575:69-1579:18: `.all(
                  failingUpkeepIds.map(async (id) => {
                    return await registry.getUpkeep(BigNumber.from(id))
                  }),
                )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1576:35-1578:21: `.map(async (id) => {
                    return await registry.getUpkeep(BigNumber.from(id))
                  })`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1577:42-1577:72: `.getUpkeep(BigNumber.from(id))`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1577:62-1577:71: `.from(id)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1580:61-1580:72: `.getState()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1582:53-1582:80: `.sub(registryPremiumBefore)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1584:43-1584:53: `.from('0')`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1592:40-1592:64: `.gt(BigNumber.from('0'))`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1592:53-1592:63: `.from('0')`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1593:44-1593:68: `.gt(BigNumber.from('0'))`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1593:57-1593:67: `.from('0')`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1594:45-1594:69: `.gt(BigNumber.from('0'))`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1594:58-1594:68: `.from('0')`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1598:49-1599:41: `.balance
                      .sub(totalPayment)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1601:48-1601:67: `.balance.toString()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1606:48-1607:41: `.amountSpent
                      .sub(totalPayment)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1609:49-1609:72: `.amountSpent.toString()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1616:22-1616:56: `.lastPerformBlockNumber.toString()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1620:19-1620:60: `netPayment = netPayment.add(totalPayment)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1620:42-1620:60: `.add(totalPayment)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1630:49-1630:68: `.balance.toString()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1631:48-1631:67: `.balance.toString()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1634:49-1634:72: `.amountSpent.toString()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1635:48-1635:71: `.amountSpent.toString()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1642:22-1642:56: `.lastPerformBlockNumber.toString()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1648:49-1649:32: `
                  .sub(premium)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1649:32-1650:76: `
                  .add(premium.div(BigNumber.from(keeperAddresses.length)))`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1650:31-1650:75: `.div(BigNumber.from(keeperAddresses.length))`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1650:45-1650:74: `.from(keeperAddresses.length)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1654:30-1654:57: `.balance.sub(keeperPayment)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1655:31-1655:50: `.balance.toString()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1658:46-1658:67: `.eq(keeperLinkBefore)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1659:49-1659:71: `.eq(registryLinkAfter)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1667:35-1667:60: `.concat(failingUpkeepIds)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1671:17-1671:32: `await tx.wait()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1671:25-1671:32: `.wait()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1675:17-1680:18: `tx = await getTransmitTx(
                  registry,
                  keeper1,
                  passingUpkeepIds.concat(failingUpkeepIds),
                  f + 1,
                )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1678:35-1678:60: `.concat(failingUpkeepIds)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1682:41-1682:48: `.wait()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1687:59-1689:18: `.add(
                  registryPerSignerGasOverhead.mul(BigNumber.from(f + 1)),
                )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1688:47-1688:74: `.mul(BigNumber.from(f + 1))`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1688:61-1688:73: `.from(f + 1)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1695:55-1695:65: `.from('0')`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1701:40-1701:64: `.gt(BigNumber.from('0'))`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1701:53-1701:63: `.from('0')`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1702:44-1702:68: `.gt(BigNumber.from('0'))`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1702:57-1702:67: `.from('0')`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1705:44-1705:64: `.lte(gasOverheadCap)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1709:32-1709:76: `.eq(upkeepPerformedLogs[0].args.gasOverhead)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1712:19-1714:38: `netGasUsedPlusOverhead = netGasUsedPlusOverhead
                    .add(gasUsed)
                    .add(gasOverhead)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1712:66-1713:34: `
                    .add(gasUsed)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1713:34-1714:38: `
                    .add(gasOverhead)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1718:41-1718:77: `.args.gasOverhead.eq(gasOverheadCap)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1727:24-1739:18: `.log(
                  'Gas Benchmarking - batching (passedUpkeeps: ',
                  numPassingUpkeeps,
                  'failedUpkeeps:',
                  numFailingUpkeeps,
                  '): ',
                  'overheadsGotCapped',
                  overheadsGotCapped,
                  'calculated overhead',
                  upkeepPerformedLogs[0].args.gasOverhead.toString(),
                  ' margin over gasUsed',
                  netGasUsedPlusOverhead.sub(receipt.gasUsed).toString(),
                )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1736:41-1736:69: `.args.gasOverhead.toString()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1738:41-1738:62: `.sub(receipt.gasUsed)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1746:43-1746:63: `.gt(receipt.gasUsed)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1759:40-1759:50: `.from('0')`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1761:11-1761:50: `mock = await upkeepMockFactory.deploy()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1761:41-1761:50: `.deploy()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1762:36-1763:28: `
            .connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1763:28-1770:14: `
            .registerUpkeep(
              mock.address,
              executeGas,
              await admin.getAddress(),
              randomBytes,
              emptyBytes,
            )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1767:26-1767:39: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1771:11-1771:43: `upkeepId = await getUpkeepID(tx)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1772:20-1772:46: `.push(upkeepId.toString())`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1775:11-1775:72: `await registry.connect(owner).addFunds(upkeepId, toWei('10'))`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1775:25-1775:40: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1775:40-1775:72: `.addFunds(upkeepId, toWei('10'))`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1777:15-1777:35: `.setCanPerform(true)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1778:15-1778:47: `.setPerformGasToBurn(executeGas)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1780:11-1780:60: `totalExecuteGas = totalExecuteGas.add(executeGas)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1780:44-1780:60: `.add(executeGas)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1784:9-1788:10: `await evmRevert(
          getTransmitTx(registry, keeper1, upkeepIds, f + 1, {
            gasLimit: totalExecuteGas,
          }),
        )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1790:9-1792:11: `await getTransmitTx(registry, keeper1, upkeepIds, f + 1, {
          gasLimit: totalExecuteGas.add(transmitGasOverhead),
        })`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1791:36-1791:61: `.add(transmitGasOverhead)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1799:39-1799:53: `.from(1000000)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1802:63-1803:26: `
          .connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1803:26-1809:12: `
          .deploy(
            1, // arbitrum
            linkToken.address,
            linkEthFeed.address,
            gasPriceFeed.address,
          )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1811:53-1812:26: `
          .connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1812:26-1813:41: `
          .deploy(registryLogic.address)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1814:9-1823:12: `await registry
          .connect(owner)
          .setConfig(
            signerAddresses,
            keeperAddresses,
            f,
            encodeConfig(config),
            offchainVersion,
            offchainBytes,
          )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1814:23-1815:26: `
          .connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1815:26-1823:12: `
          .setConfig(
            signerAddresses,
            keeperAddresses,
            f,
            encodeConfig(config),
            offchainVersion,
            offchainBytes,
          )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1824:9-1824:81: `await linkToken.connect(owner).approve(registry.address, toWei('10000'))`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1824:24-1824:39: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1824:39-1824:81: `.approve(registry.address, toWei('10000'))`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1826:11-1826:50: `mock = await upkeepMockFactory.deploy()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1826:41-1826:50: `.deploy()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1827:36-1828:28: `
            .connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1828:28-1835:14: `
            .registerUpkeep(
              mock.address,
              executeGas,
              await admin.getAddress(),
              randomBytes,
              emptyBytes,
            )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1832:26-1832:39: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1836:11-1836:43: `upkeepId = await getUpkeepID(tx)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1837:20-1837:46: `.push(upkeepId.toString())`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1840:11-1840:73: `await registry.connect(owner).addFunds(upkeepId, toWei('100'))`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1840:25-1840:40: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1840:40-1840:73: `.addFunds(upkeepId, toWei('100'))`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1849:29-1849:38: `.mul('5')`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1852:33-1852:40: `.wait()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1871:25-1871:51: `.div(gasCeilingMultiplier)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1872:22-1872:39: `.from(numUpkeeps)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1873:12-1873:29: `.total.toString()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1955:7-1958:8: `await evmRevert(
        registry.connect(keeper1).recoverFunds(),
        'Only callable by owner',
      )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1956:17-1956:34: `.connect(keeper1)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1956:34-1956:49: `.recoverFunds()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1962:44-1962:72: `.balanceOf(registry.address)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1963:42-1963:78: `.balanceOf(await owner.getAddress())`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1963:64-1963:77: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1965:7-1965:51: `await registry.connect(owner).recoverFunds()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1965:21-1965:36: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1965:36-1965:51: `.recoverFunds()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1967:43-1967:71: `.balanceOf(registry.address)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1968:41-1968:77: `.balanceOf(await owner.getAddress())`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1968:63-1968:76: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1970:34-1970:61: `.eq(balanceAfter.add(sent))`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1970:50-1970:60: `.add(sent)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1971:31-1971:57: `.eq(ownerBefore.add(sent))`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1971:46-1971:56: `.add(sent)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1977:7-1977:35: `await mock.setCanCheck(true)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1977:17-1977:35: `.setCanCheck(true)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1979:31-1979:39: `.from(1)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1980:40-1980:73: `.getMinBalanceForUpkeep(upkeepId)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1981:32-1981:44: `.sub(oneWei)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1983:7-1983:63: `await registry.connect(admin).addFunds(upkeepId, tooLow)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1983:21-1983:36: `.connect(admin)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1983:36-1983:63: `.addFunds(upkeepId, tooLow)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1984:45-1985:30: `
        .connect(zeroAddress)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1985:30-1986:42: `
        .callStatic.checkUpkeep(upkeepId)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1991:7-1991:63: `await registry.connect(admin).addFunds(upkeepId, oneWei)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1991:21-1991:36: `.connect(admin)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1991:36-1991:63: `.addFunds(upkeepId, oneWei)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1992:7-1994:42: `checkUpkeepResult = await registry
        .connect(zeroAddress)
        .callStatic.checkUpkeep(upkeepId)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1992:41-1993:30: `
        .connect(zeroAddress)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1993:30-1994:42: `
        .callStatic.checkUpkeep(upkeepId)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:1999:33-2000:24: `
        .connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2000:24-2007:10: `
        .registerUpkeep(
          mock.address,
          executeGas,
          await admin.getAddress(),
          randomBytes,
          emptyBytes,
        )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2004:22-2004:35: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2009:33-2010:24: `
        .connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2010:24-2017:10: `
        .registerUpkeep(
          mock.address,
          executeGas,
          await admin.getAddress(),
          randomBytes,
          emptyBytes,
        )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2014:22-2014:35: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2019:7-2019:35: `await mock.setCanCheck(true)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2019:17-2019:35: `.setCanCheck(true)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2020:7-2020:37: `await mock.setCanPerform(true)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2020:17-2020:37: `.setCanPerform(true)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2024:23-2024:57: `.getMinBalanceForUpkeep(upkeepID1)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2025:8-2025:15: `.sub(1)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2026:41-2026:75: `.getMinBalanceForUpkeep(upkeepID2)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2027:7-2027:69: `await registry.connect(owner).addFunds(upkeepID1, minBalance1)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2027:21-2027:36: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2027:36-2027:69: `.addFunds(upkeepID1, minBalance1)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2028:7-2028:69: `await registry.connect(owner).addFunds(upkeepID2, minBalance2)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2028:21-2028:36: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2028:36-2028:69: `.addFunds(upkeepID2, minBalance2)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2031:45-2032:30: `
        .connect(zeroAddress)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2032:30-2033:43: `
        .callStatic.checkUpkeep(upkeepID1)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2037:7-2039:43: `checkUpkeepResult = await registry
        .connect(zeroAddress)
        .callStatic.checkUpkeep(upkeepID2)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2037:41-2038:30: `
        .connect(zeroAddress)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2038:30-2039:43: `
        .callStatic.checkUpkeep(upkeepID2)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2045:9-2045:31: `maxPerformData += '11'`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2048:7-2059:8: `await evmRevert(
        getTransmitTx(
          registry,
          keeper1,
          [upkeepID1.toString()],
          f + 1,
          { gasPrice: gasWei.mul(gasCeilingMultiplier) },
          maxPerformData,
        ),

        'StaleReport()',
      )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2054:29-2054:55: `.mul(gasCeilingMultiplier)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2062:7-2078:10: `await getTransmitTx(
        registry,
        keeper1,
        [upkeepID1.toString()],
        f + 1,
        { gasPrice: gasWei.mul(gasCeilingMultiplier) },
        '0x',
      ),
        // upkeep 2 perform should succeed with max performData size
        await getTransmitTx(
          registry,
          keeper1,
          [upkeepID2.toString()],
          f + 1,
          { gasPrice: gasWei.mul(gasCeilingMultiplier) },
          maxPerformData,
        )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2067:27-2067:53: `.mul(gasCeilingMultiplier)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2076:29-2076:55: `.mul(gasCeilingMultiplier)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2106:7-2111:8: `await evmRevert(
        registry
          .connect(admin)
          .withdrawFunds(upkeepId.add(1), await payee1.getAddress()),
        'OnlyCallableByAdmin()',
      )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2107:17-2108:26: `
          .connect(admin)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2108:26-2109:69: `
          .withdrawFunds(upkeepId.add(1), await payee1.getAddress())`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2109:34-2109:41: `.add(1)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2109:55-2109:68: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2115:7-2120:8: `await evmRevert(
        registry
          .connect(owner)
          .withdrawFunds(upkeepId, await payee1.getAddress()),
        'OnlyCallableByAdmin()',
      )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2116:17-2117:26: `
          .connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2117:26-2118:62: `
          .withdrawFunds(upkeepId, await payee1.getAddress())`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2118:48-2118:61: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2124:7-2129:8: `await evmRevert(
        registry
          .connect(admin)
          .withdrawFunds(upkeepId, await payee1.getAddress()),
        'UpkeepNotCanceled()',
      )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2125:17-2126:26: `
          .connect(admin)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2126:26-2127:62: `
          .withdrawFunds(upkeepId, await payee1.getAddress())`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2127:48-2127:61: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2133:7-2136:8: `await evmRevert(
        registry.connect(admin).withdrawFunds(upkeepId, zeroAddress),
        'InvalidRecipient()',
      )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2134:17-2134:32: `.connect(admin)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2134:32-2134:69: `.withdrawFunds(upkeepId, zeroAddress)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2146:9-2148:62: `await registry
          .connect(admin)
          .withdrawFunds(upkeepId, await payee1.getAddress())`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2146:23-2147:26: `
          .connect(admin)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2147:26-2148:62: `
          .withdrawFunds(upkeepId, await payee1.getAddress())`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2148:48-2148:61: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2149:9-2151:63: `await registry
          .connect(admin)
          .withdrawFunds(upkeepId2, await payee1.getAddress())`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2149:23-2150:26: `
          .connect(admin)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2150:26-2151:63: `
          .withdrawFunds(upkeepId2, await payee1.getAddress())`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2151:49-2151:62: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2155:45-2157:10: `.balanceOf(
          await payee1.getAddress(),
        )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2156:23-2156:36: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2158:47-2158:75: `.balanceOf(registry.address)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2160:42-2160:62: `.getUpkeep(upkeepId)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2163:34-2164:26: `
          .connect(admin)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2164:26-2165:62: `
          .withdrawFunds(upkeepId, await payee1.getAddress())`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2165:48-2165:61: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2170:44-2170:81: `.balanceOf(await payee1.getAddress())`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2170:67-2170:80: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2171:46-2171:74: `.balanceOf(registry.address)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2173:35-2173:56: `.add(previousBalance)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2173:56-2173:72: `.eq(payee1After)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2174:37-2174:58: `.sub(previousBalance)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2174:58-2174:76: `.eq(registryAfter)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2176:9-2176:58: `registration = await registry.getUpkeep(upkeepId)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2176:38-2176:58: `.getUpkeep(upkeepId)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2177:37-2177:56: `.balance.toNumber()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2184:7-2189:8: `await evmRevert(
        registry
          .connect(await owner.getAddress())
          .callStatic.simulatePerformUpkeep(upkeepId, '0x'),
        'OnlySimulatedBackend()',
      )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2185:17-2186:45: `
          .connect(await owner.getAddress())`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2186:31-2186:44: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2186:45-2187:60: `
          .callStatic.simulatePerformUpkeep(upkeepId, '0x')`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2193:7-2193:44: `await registry.connect(owner).pause()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2193:21-2193:36: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2193:36-2193:44: `.pause()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2194:7-2199:8: `await evmRevert(
        registry
          .connect(zeroAddress)
          .callStatic.simulatePerformUpkeep(upkeepId, '0x'),
        'RegistryPaused()',
      )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2195:17-2196:32: `
          .connect(zeroAddress)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2196:32-2197:60: `
          .callStatic.simulatePerformUpkeep(upkeepId, '0x')`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2203:7-2203:38: `await mock.setCanPerform(false)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2203:17-2203:38: `.setCanPerform(false)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2205:51-2206:30: `
        .connect(zeroAddress)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2206:30-2207:58: `
        .callStatic.simulatePerformUpkeep(upkeepId, '0x')`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2210:42-2210:74: `.gasUsed.gt(BigNumber.from('0'))`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2210:63-2210:73: `.from('0')`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2214:7-2214:37: `await mock.setCanPerform(true)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2214:17-2214:37: `.setCanPerform(true)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2216:51-2217:30: `
        .connect(zeroAddress)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2217:30-2218:58: `
        .callStatic.simulatePerformUpkeep(upkeepId, '0x')`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2221:42-2221:74: `.gasUsed.gt(BigNumber.from('0'))`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2221:63-2221:73: `.from('0')`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2225:7-2225:37: `await mock.setCanPerform(true)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2225:17-2225:37: `.setCanPerform(true)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2226:7-2226:49: `await mock.setPerformGasToBurn(executeGas)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2226:17-2226:49: `.setPerformGasToBurn(executeGas)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2228:51-2229:30: `
        .connect(zeroAddress)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2229:30-2230:58: `
        .callStatic.simulatePerformUpkeep(upkeepId, '0x')`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2235:30-2237:10: `.gasUsed.gt(
          executeGas.sub(BigNumber.from('1000')),
        )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2236:21-2236:49: `.sub(BigNumber.from('1000'))`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2236:35-2236:48: `.from('1000')`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2244:7-2249:8: `await evmRevert(
        registry
          .connect(await owner.getAddress())
          .callStatic.checkUpkeep(upkeepId),
        'OnlySimulatedBackend()',
      )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2245:17-2246:45: `
          .connect(await owner.getAddress())`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2246:31-2246:44: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2246:45-2247:44: `
          .callStatic.checkUpkeep(upkeepId)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2253:7-2253:59: `await registry.connect(admin).cancelUpkeep(upkeepId)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2253:21-2253:36: `.connect(admin)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2253:36-2253:59: `.cancelUpkeep(upkeepId)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2255:47-2256:30: `
        .connect(zeroAddress)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2256:30-2257:42: `
        .callStatic.checkUpkeep(upkeepId)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2262:37-2262:56: `.gasUsed.toString()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2266:7-2266:59: `await registry.connect(owner).cancelUpkeep(upkeepId)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2266:21-2266:36: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2266:36-2266:59: `.cancelUpkeep(upkeepId)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2268:47-2269:30: `
        .connect(zeroAddress)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2269:30-2270:42: `
        .callStatic.checkUpkeep(upkeepId)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2275:37-2275:56: `.gasUsed.toString()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2279:7-2279:58: `await registry.connect(admin).pauseUpkeep(upkeepId)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2279:21-2279:36: `.connect(admin)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2279:36-2279:58: `.pauseUpkeep(upkeepId)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2281:47-2282:30: `
        .connect(zeroAddress)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2282:30-2283:42: `
        .callStatic.checkUpkeep(upkeepId)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2288:37-2288:56: `.gasUsed.toString()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2292:47-2293:30: `
        .connect(zeroAddress)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2293:30-2294:42: `
        .callStatic.checkUpkeep(upkeepId)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2299:37-2299:56: `.gasUsed.toString()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2309:9-2309:46: `await mock.setShouldRevertCheck(true)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2309:19-2309:46: `.setShouldRevertCheck(true)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2310:49-2311:32: `
          .connect(zeroAddress)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2311:32-2312:44: `
          .callStatic.checkUpkeep(upkeepId)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2317:40-2317:72: `.gasUsed.gt(BigNumber.from('0'))`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2317:61-2317:71: `.from('0')`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2321:9-2321:38: `await mock.setCanCheck(false)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2321:19-2321:38: `.setCanCheck(false)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2322:49-2323:32: `
          .connect(zeroAddress)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2323:32-2324:44: `
          .callStatic.checkUpkeep(upkeepId)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2329:40-2329:72: `.gasUsed.gt(BigNumber.from('0'))`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2329:61-2329:71: `.from('0')`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2335:11-2335:27: `longBytes += '1'`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2337:9-2337:37: `await mock.setCanCheck(true)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2337:19-2337:37: `.setCanCheck(true)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2338:9-2338:45: `await mock.setPerformData(longBytes)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2338:19-2338:45: `.setPerformData(longBytes)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2340:49-2341:32: `
          .connect(zeroAddress)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2341:32-2342:44: `
          .callStatic.checkUpkeep(upkeepId)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2347:40-2347:72: `.gasUsed.gt(BigNumber.from('0'))`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2347:61-2347:71: `.from('0')`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2351:9-2351:37: `await mock.setCanCheck(true)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2351:19-2351:37: `.setCanCheck(true)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2352:9-2352:47: `await mock.setPerformData(randomBytes)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2352:19-2352:47: `.setPerformData(randomBytes)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2354:41-2354:69: `.provider.getBlock('latest')`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2356:49-2357:32: `
          .connect(zeroAddress)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2357:32-2360:13: `
          .callStatic.checkUpkeep(upkeepId, {
            blockTag: latestBlock.number,
          })`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2362:42-2367:10: `.utils.defaultAbiCoder.decode(
          [
            'tuple(uint32 checkBlockNum, bytes32 checkBlockHash, bytes performData)',
          ],
          checkUpkeepResult.performData,
        )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2380:40-2380:72: `.gasUsed.gt(BigNumber.from('0'))`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2380:61-2380:71: `.from('0')`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2381:40-2381:62: `.fastGasWei.eq(gasWei)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2382:40-2382:63: `.linkNative.eq(linkEth)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2386:9-2386:37: `await mock.setCanCheck(true)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2386:19-2386:37: `.setCanCheck(true)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2387:9-2387:52: `await mock.setCheckGasToBurn(checkGasLimit)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2387:19-2387:52: `.setCheckGasToBurn(checkGasLimit)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2388:34-2388:56: `.add(checkGasOverhead)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2389:49-2390:32: `
          .connect(zeroAddress)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2390:32-2393:13: `
          .callStatic.checkUpkeep(upkeepId, {
            gasLimit: gas,
          })`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2404:7-2407:8: `await evmRevert(
        registry.connect(keeper1).addFunds(upkeepId.add(1), amount),
        'UpkeepCancelled()',
      )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2405:17-2405:34: `.connect(keeper1)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2405:34-2405:68: `.addFunds(upkeepId.add(1), amount)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2405:52-2405:59: `.add(1)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2411:7-2411:63: `await registry.connect(admin).addFunds(upkeepId, amount)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2411:21-2411:36: `.connect(admin)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2411:36-2411:63: `.addFunds(upkeepId, amount)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2412:42-2412:62: `.getUpkeep(upkeepId)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2413:27-2413:52: `.eq(registration.balance)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2417:7-2417:81: `await linkToken.connect(owner).transfer(await payee1.getAddress(), amount)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2417:22-2417:37: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2417:37-2417:81: `.transfer(await payee1.getAddress(), amount)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2417:59-2417:72: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2418:7-2418:72: `await linkToken.connect(payee1).approve(registry.address, amount)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2418:22-2418:38: `.connect(payee1)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2418:38-2418:72: `.approve(registry.address, amount)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2420:7-2420:64: `await registry.connect(payee1).addFunds(upkeepId, amount)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2420:21-2420:37: `.connect(payee1)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2420:37-2420:64: `.addFunds(upkeepId, amount)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2421:42-2421:62: `.getUpkeep(upkeepId)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2422:27-2422:52: `.eq(registration.balance)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2426:32-2426:47: `.connect(admin)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2426:47-2426:74: `.addFunds(upkeepId, amount)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2433:7-2433:59: `await registry.connect(admin).cancelUpkeep(upkeepId)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2433:21-2433:36: `.connect(admin)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2433:36-2433:59: `.cancelUpkeep(upkeepId)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2434:7-2437:8: `await evmRevert(
        registry.connect(keeper1).addFunds(upkeepId, amount),
        'UpkeepCancelled()',
      )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2435:17-2435:34: `.connect(keeper1)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2435:34-2435:61: `.addFunds(upkeepId, amount)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2459:7-2459:78: `await evmRevert(registry.getActiveUpkeepIDs(4, 0), 'IndexOutOfRange()')`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2459:31-2459:56: `.getActiveUpkeepIDs(4, 0)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2463:7-2463:57: `await evmRevert(registry.getActiveUpkeepIDs(0, 4))`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2463:31-2463:56: `.getActiveUpkeepIDs(0, 4)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2467:37-2467:62: `.getActiveUpkeepIDs(0, 1)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2477:7-2477:58: `upkeepIds = await registry.getActiveUpkeepIDs(1, 1)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2477:33-2477:58: `.getActiveUpkeepIDs(1, 1)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2489:39-2489:64: `.getActiveUpkeepIDs(0, 0)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2513:7-2513:77: `await verifyMaxPayment(0, multipliers, gasAmounts, premiums, flatFees)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2517:7-2524:8: `await verifyMaxPayment(
        1,
        multipliers,
        gasAmounts,
        premiums,
        flatFees,
        l1CostWeiArb,
      )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2528:7-2535:8: `await verifyMaxPayment(
        2,
        multipliers,
        gasAmounts,
        premiums,
        flatFees,
        l1CostWeiOpt,
      )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2541:28-2542:56: `
          .add(registryPerSignerGasOverhead.mul(f + 1))`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2542:44-2542:55: `.mul(f + 1)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2542:56-2543:74: `
          .add(maxPerformDataSize.mul(registryPerPerformByteGasOverhead))`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2543:34-2543:73: `.mul(registryPerPerformByteGasOverhead)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2544:29-2544:38: `.mul('2')`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2554:7-2556:64: `await gasPriceFeed
        .connect(owner)
        .updateRoundData(roundId, answer, updatedAt, startedAt)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2554:25-2555:24: `
        .connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2555:24-2556:64: `
        .updateRoundData(roundId, answer, updatedAt, startedAt)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2560:24-2560:56: `.getMaxPaymentForGas(executeGas)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2564:7-2564:20: `roundId = 100`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2565:7-2565:48: `updatedAt = Math.floor(Date.now() / 1000)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2565:23-2565:48: `.floor(Date.now() / 1000)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2565:34-2565:40: `.now()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2566:7-2566:28: `startedAt = 946684799`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2567:7-2569:62: `await gasPriceFeed
        .connect(owner)
        .updateRoundData(roundId, -100, updatedAt, startedAt)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2567:25-2568:24: `
        .connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2568:24-2569:62: `
        .updateRoundData(roundId, -100, updatedAt, startedAt)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2573:24-2573:56: `.getMaxPaymentForGas(executeGas)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2577:7-2577:20: `roundId = 101`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2578:7-2578:48: `updatedAt = Math.floor(Date.now() / 1000)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2578:23-2578:48: `.floor(Date.now() / 1000)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2578:34-2578:40: `.now()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2579:7-2579:28: `startedAt = 946684799`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2580:7-2582:59: `await gasPriceFeed
        .connect(owner)
        .updateRoundData(roundId, 0, updatedAt, startedAt)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2580:25-2581:24: `
        .connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2581:24-2582:59: `
        .updateRoundData(roundId, 0, updatedAt, startedAt)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2586:24-2586:56: `.getMaxPaymentForGas(executeGas)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2593:28-2594:56: `
          .add(registryPerSignerGasOverhead.mul(f + 1))`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2594:44-2594:55: `.mul(f + 1)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2594:56-2595:74: `
          .add(maxPerformDataSize.mul(registryPerPerformByteGasOverhead))`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2595:34-2595:73: `.mul(registryPerPerformByteGasOverhead)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2596:29-2596:38: `.mul('2')`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2606:7-2608:64: `await linkEthFeed
        .connect(owner)
        .updateRoundData(roundId, answer, updatedAt, startedAt)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2606:24-2607:24: `
        .connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2607:24-2608:64: `
        .updateRoundData(roundId, answer, updatedAt, startedAt)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2612:24-2612:56: `.getMaxPaymentForGas(executeGas)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2616:7-2616:20: `roundId = 100`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2617:7-2617:48: `updatedAt = Math.floor(Date.now() / 1000)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2617:23-2617:48: `.floor(Date.now() / 1000)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2617:34-2617:40: `.now()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2618:7-2618:28: `startedAt = 946684799`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2619:7-2621:62: `await linkEthFeed
        .connect(owner)
        .updateRoundData(roundId, -100, updatedAt, startedAt)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2619:24-2620:24: `
        .connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2620:24-2621:62: `
        .updateRoundData(roundId, -100, updatedAt, startedAt)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2625:24-2625:56: `.getMaxPaymentForGas(executeGas)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2629:7-2629:20: `roundId = 101`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2630:7-2630:48: `updatedAt = Math.floor(Date.now() / 1000)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2630:23-2630:48: `.floor(Date.now() / 1000)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2630:34-2630:40: `.now()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2631:7-2631:28: `startedAt = 946684799`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2632:7-2634:59: `await linkEthFeed
        .connect(owner)
        .updateRoundData(roundId, 0, updatedAt, startedAt)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2632:24-2633:24: `
        .connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2633:24-2634:59: `
        .updateRoundData(roundId, 0, updatedAt, startedAt)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2638:24-2638:56: `.getMaxPaymentForGas(executeGas)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2645:44-2645:61: `.typeAndVersion()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2654:26-2654:80: `.utils.defaultAbiCoder.encode(['uint256'], [upkeepId])`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2656:7-2661:8: `await evmRevert(
        registry
          .connect(keeper1)
          .onTokenTransfer(await keeper1.getAddress(), amount, data),
        'OnlyCallableByLINKToken()',
      )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2657:17-2658:28: `
          .connect(keeper1)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2658:28-2659:69: `
          .onTokenTransfer(await keeper1.getAddress(), amount, data)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2659:41-2659:54: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2665:30-2668:8: `.utils.defaultAbiCoder.encode(
        ['uint256', 'uint256'],
        ['33', '34'],
      )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2671:7-2675:8: `await evmRevert(
        linkToken
          .connect(owner)
          .transferAndCall(registry.address, amount, longData),
      )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2672:18-2673:26: `
          .connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2673:26-2674:63: `
          .transferAndCall(registry.address, amount, longData)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2676:7-2680:8: `await evmRevert(
        linkToken
          .connect(owner)
          .transferAndCall(registry.address, amount, shortData),
      )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2677:18-2678:26: `
          .connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2678:26-2679:64: `
          .transferAndCall(registry.address, amount, shortData)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2684:7-2684:59: `await registry.connect(admin).cancelUpkeep(upkeepId)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2684:21-2684:36: `.connect(admin)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2684:36-2684:59: `.cancelUpkeep(upkeepId)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2685:7-2688:8: `await evmRevert(
        registry.connect(keeper1).addFunds(upkeepId, amount),
        'UpkeepCancelled()',
      )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2686:17-2686:34: `.connect(keeper1)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2686:34-2686:61: `.addFunds(upkeepId, amount)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2692:26-2692:80: `.utils.defaultAbiCoder.encode(['uint256'], [upkeepId])`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2694:37-2694:57: `.getUpkeep(upkeepId)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2695:7-2697:57: `await linkToken
        .connect(owner)
        .transferAndCall(registry.address, amount, data)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2695:22-2696:24: `
        .connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2696:24-2697:57: `
        .transferAndCall(registry.address, amount, data)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2698:36-2698:56: `.getUpkeep(upkeepId)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2700:27-2700:39: `.add(amount)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2700:39-2700:49: `.eq(after)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2718:7-2742:8: `await evmRevert(
        registry.connect(payee1).setConfig(
          signerAddresses,
          keeperAddresses,
          f,
          encodeConfig({
            paymentPremiumPPB: payment,
            flatFeeMicroLink: flatFee,
            checkGasLimit: maxGas,
            stalenessSeconds: staleness,
            gasCeilingMultiplier: ceiling,
            minUpkeepSpend: newMinUpkeepSpend,
            maxCheckDataSize: newMaxCheckDataSize,
            maxPerformDataSize: newMaxPerformDataSize,
            maxPerformGas: newMaxPerformGas,
            fallbackGasPrice: fbGasEth,
            fallbackLinkPrice: fbLinkEth,
            transcoder: transcoder.address,
            registrar: ethers.constants.AddressZero,
          }),
          offchainVersion,
          offchainBytes,
        ),
        'Only callable by owner',
      )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2719:17-2719:33: `.connect(payee1)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2719:33-2740:10: `.setConfig(
          signerAddresses,
          keeperAddresses,
          f,
          encodeConfig({
            paymentPremiumPPB: payment,
            flatFeeMicroLink: flatFee,
            checkGasLimit: maxGas,
            stalenessSeconds: staleness,
            gasCeilingMultiplier: ceiling,
            minUpkeepSpend: newMinUpkeepSpend,
            maxCheckDataSize: newMaxCheckDataSize,
            maxPerformDataSize: newMaxPerformDataSize,
            maxPerformGas: newMaxPerformGas,
            fallbackGasPrice: fbGasEth,
            fallbackLinkPrice: fbLinkEth,
            transcoder: transcoder.address,
            registrar: ethers.constants.AddressZero,
          }),
          offchainVersion,
          offchainBytes,
        )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2746:33-2746:44: `.getState()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2749:38-2749:70: `.eq(oldConfig.paymentPremiumPPB)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2750:37-2750:68: `.eq(oldConfig.flatFeeMicroLink)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2751:37-2751:68: `.eq(oldConfig.stalenessSeconds)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2752:41-2752:76: `.eq(oldConfig.gasCeilingMultiplier)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2754:7-2775:8: `await registry.connect(owner).setConfig(
        signerAddresses,
        keeperAddresses,
        f,
        encodeConfig({
          paymentPremiumPPB: payment,
          flatFeeMicroLink: flatFee,
          checkGasLimit: maxGas,
          stalenessSeconds: staleness,
          gasCeilingMultiplier: ceiling,
          minUpkeepSpend: newMinUpkeepSpend,
          maxCheckDataSize: newMaxCheckDataSize,
          maxPerformDataSize: newMaxPerformDataSize,
          maxPerformGas: newMaxPerformGas,
          fallbackGasPrice: fbGasEth,
          fallbackLinkPrice: fbLinkEth,
          transcoder: transcoder.address,
          registrar: ethers.constants.AddressZero,
        }),
        offchainVersion,
        offchainBytes,
      )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2754:21-2754:36: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2754:36-2775:8: `.setConfig(
        signerAddresses,
        keeperAddresses,
        f,
        encodeConfig({
          paymentPremiumPPB: payment,
          flatFeeMicroLink: flatFee,
          checkGasLimit: maxGas,
          stalenessSeconds: staleness,
          gasCeilingMultiplier: ceiling,
          minUpkeepSpend: newMinUpkeepSpend,
          maxCheckDataSize: newMaxCheckDataSize,
          maxPerformDataSize: newMaxPerformDataSize,
          maxPerformGas: newMaxPerformGas,
          fallbackGasPrice: fbGasEth,
          fallbackLinkPrice: fbLinkEth,
          transcoder: transcoder.address,
          registrar: ethers.constants.AddressZero,
        }),
        offchainVersion,
        offchainBytes,
      )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2777:37-2777:48: `.getState()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2785:22-2785:48: `.minUpkeepSpend.toString()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2799:22-2799:50: `.fallbackGasPrice.toNumber()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2803:22-2803:51: `.fallbackLinkPrice.toNumber()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2817:32-2817:47: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2817:47-2838:8: `.setConfig(
        signerAddresses,
        keeperAddresses,
        f,
        encodeConfig({
          paymentPremiumPPB: payment,
          flatFeeMicroLink: flatFee,
          checkGasLimit: maxGas,
          stalenessSeconds: staleness,
          gasCeilingMultiplier: ceiling,
          minUpkeepSpend: newMinUpkeepSpend,
          maxCheckDataSize: newMaxCheckDataSize,
          maxPerformDataSize: newMaxPerformDataSize,
          maxPerformGas: newMaxPerformGas,
          fallbackGasPrice: fbGasEth,
          fallbackLinkPrice: fbLinkEth,
          transcoder: transcoder.address,
          registrar: ethers.constants.AddressZero,
        }),
        offchainVersion,
        offchainBytes,
      )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2843:7-2867:8: `await evmRevert(
        registry.connect(owner).setConfig(
          signerAddresses,
          keeperAddresses,
          f,
          encodeConfig({
            paymentPremiumPPB: payment,
            flatFeeMicroLink: flatFee,
            checkGasLimit: maxGas,
            stalenessSeconds: staleness,
            gasCeilingMultiplier: ceiling,
            minUpkeepSpend: newMinUpkeepSpend,
            maxCheckDataSize: BigNumber.from(1),
            maxPerformDataSize: newMaxPerformDataSize,
            maxPerformGas: newMaxPerformGas,
            fallbackGasPrice: fbGasEth,
            fallbackLinkPrice: fbLinkEth,
            transcoder: transcoder.address,
            registrar: ethers.constants.AddressZero,
          }),
          offchainVersion,
          offchainBytes,
        ),
        'MaxCheckDataSizeCanOnlyIncrease()',
      )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2844:17-2844:32: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2844:32-2865:10: `.setConfig(
          signerAddresses,
          keeperAddresses,
          f,
          encodeConfig({
            paymentPremiumPPB: payment,
            flatFeeMicroLink: flatFee,
            checkGasLimit: maxGas,
            stalenessSeconds: staleness,
            gasCeilingMultiplier: ceiling,
            minUpkeepSpend: newMinUpkeepSpend,
            maxCheckDataSize: BigNumber.from(1),
            maxPerformDataSize: newMaxPerformDataSize,
            maxPerformGas: newMaxPerformGas,
            fallbackGasPrice: fbGasEth,
            fallbackLinkPrice: fbLinkEth,
            transcoder: transcoder.address,
            registrar: ethers.constants.AddressZero,
          }),
          offchainVersion,
          offchainBytes,
        )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2855:40-2855:48: `.from(1)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2868:7-2892:8: `await evmRevert(
        registry.connect(owner).setConfig(
          signerAddresses,
          keeperAddresses,
          f,
          encodeConfig({
            paymentPremiumPPB: payment,
            flatFeeMicroLink: flatFee,
            checkGasLimit: maxGas,
            stalenessSeconds: staleness,
            gasCeilingMultiplier: ceiling,
            minUpkeepSpend: newMinUpkeepSpend,
            maxCheckDataSize: newMaxCheckDataSize,
            maxPerformDataSize: BigNumber.from(1),
            maxPerformGas: newMaxPerformGas,
            fallbackGasPrice: fbGasEth,
            fallbackLinkPrice: fbLinkEth,
            transcoder: transcoder.address,
            registrar: ethers.constants.AddressZero,
          }),
          offchainVersion,
          offchainBytes,
        ),
        'MaxPerformDataSizeCanOnlyIncrease()',
      )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2869:17-2869:32: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2869:32-2890:10: `.setConfig(
          signerAddresses,
          keeperAddresses,
          f,
          encodeConfig({
            paymentPremiumPPB: payment,
            flatFeeMicroLink: flatFee,
            checkGasLimit: maxGas,
            stalenessSeconds: staleness,
            gasCeilingMultiplier: ceiling,
            minUpkeepSpend: newMinUpkeepSpend,
            maxCheckDataSize: newMaxCheckDataSize,
            maxPerformDataSize: BigNumber.from(1),
            maxPerformGas: newMaxPerformGas,
            fallbackGasPrice: fbGasEth,
            fallbackLinkPrice: fbLinkEth,
            transcoder: transcoder.address,
            registrar: ethers.constants.AddressZero,
          }),
          offchainVersion,
          offchainBytes,
        )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2881:42-2881:50: `.from(1)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2893:7-2917:8: `await evmRevert(
        registry.connect(owner).setConfig(
          signerAddresses,
          keeperAddresses,
          f,
          encodeConfig({
            paymentPremiumPPB: payment,
            flatFeeMicroLink: flatFee,
            checkGasLimit: maxGas,
            stalenessSeconds: staleness,
            gasCeilingMultiplier: ceiling,
            minUpkeepSpend: newMinUpkeepSpend,
            maxCheckDataSize: newMaxCheckDataSize,
            maxPerformDataSize: newMaxPerformDataSize,
            maxPerformGas: BigNumber.from(1),
            fallbackGasPrice: fbGasEth,
            fallbackLinkPrice: fbLinkEth,
            transcoder: transcoder.address,
            registrar: ethers.constants.AddressZero,
          }),
          offchainVersion,
          offchainBytes,
        ),
        'GasLimitCanOnlyIncrease()',
      )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2894:17-2894:32: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2894:32-2915:10: `.setConfig(
          signerAddresses,
          keeperAddresses,
          f,
          encodeConfig({
            paymentPremiumPPB: payment,
            flatFeeMicroLink: flatFee,
            checkGasLimit: maxGas,
            stalenessSeconds: staleness,
            gasCeilingMultiplier: ceiling,
            minUpkeepSpend: newMinUpkeepSpend,
            maxCheckDataSize: newMaxCheckDataSize,
            maxPerformDataSize: newMaxPerformDataSize,
            maxPerformGas: BigNumber.from(1),
            fallbackGasPrice: fbGasEth,
            fallbackLinkPrice: fbLinkEth,
            transcoder: transcoder.address,
            registrar: ethers.constants.AddressZero,
          }),
          offchainVersion,
          offchainBytes,
        )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2907:37-2907:45: `.from(1)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2934:7-2946:8: `await evmRevert(
        registry
          .connect(payee1)
          .setConfig(
            newKeepers,
            newKeepers,
            f,
            encodeConfig(config),
            offchainVersion,
            offchainBytes,
          ),
        'Only callable by owner',
      )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2935:17-2936:27: `
          .connect(payee1)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2936:27-2944:12: `
          .setConfig(
            newKeepers,
            newKeepers,
            f,
            encodeConfig(config),
            offchainVersion,
            offchainBytes,
          )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2951:19-2951:41: `.push(randomAddress())`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2953:7-2965:8: `await evmRevert(
        registry
          .connect(owner)
          .setConfig(
            newKeepers,
            newKeepers,
            f,
            encodeConfig(config),
            offchainVersion,
            offchainBytes,
          ),
        'TooManyOracles()',
      )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2954:17-2955:26: `
          .connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2955:26-2963:12: `
          .setConfig(
            newKeepers,
            newKeepers,
            f,
            encodeConfig(config),
            offchainVersion,
            offchainBytes,
          )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2969:7-2981:8: `await evmRevert(
        registry
          .connect(owner)
          .setConfig(
            newKeepers,
            newKeepers,
            0,
            encodeConfig(config),
            offchainVersion,
            offchainBytes,
          ),
        'IncorrectNumberOfFaultyOracles()',
      )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2970:17-2971:26: `
          .connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2971:26-2979:12: `
          .setConfig(
            newKeepers,
            newKeepers,
            0,
            encodeConfig(config),
            offchainVersion,
            offchainBytes,
          )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2986:7-2998:8: `await evmRevert(
        registry
          .connect(owner)
          .setConfig(
            signers,
            newKeepers,
            f,
            encodeConfig(config),
            offchainVersion,
            offchainBytes,
          ),
        'IncorrectNumberOfSigners()',
      )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2987:17-2988:26: `
          .connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:2988:26-2996:12: `
          .setConfig(
            signers,
            newKeepers,
            f,
            encodeConfig(config),
            offchainVersion,
            offchainBytes,
          )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3002:17-3002:23: `.pop()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3003:7-3015:8: `await evmRevert(
        registry
          .connect(owner)
          .setConfig(
            newKeepers,
            newKeepers,
            f,
            encodeConfig(config),
            offchainVersion,
            offchainBytes,
          ),
        'IncorrectNumberOfSigners()',
      )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3004:17-3005:26: `
          .connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3005:26-3013:12: `
          .setConfig(
            newKeepers,
            newKeepers,
            f,
            encodeConfig(config),
            offchainVersion,
            offchainBytes,
          )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3020:23-3020:41: `.Eddy.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3021:23-3021:41: `.Eddy.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3022:23-3022:41: `.Eddy.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3023:23-3023:41: `.Eddy.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3025:7-3037:8: `await evmRevert(
        registry
          .connect(owner)
          .setConfig(
            newSigners,
            newKeepers,
            f,
            encodeConfig(config),
            offchainVersion,
            offchainBytes,
          ),
        'RepeatedSigner()',
      )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3026:17-3027:26: `
          .connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3027:26-3035:12: `
          .setConfig(
            newSigners,
            newKeepers,
            f,
            encodeConfig(config),
            offchainVersion,
            offchainBytes,
          )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3042:23-3042:41: `.Eddy.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3043:23-3043:41: `.Eddy.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3044:23-3044:41: `.Eddy.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3045:23-3045:41: `.Eddy.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3047:7-3059:8: `await evmRevert(
        registry
          .connect(owner)
          .setConfig(
            newKeepers,
            newTransmitters,
            f,
            encodeConfig(config),
            offchainVersion,
            offchainBytes,
          ),
        'RepeatedTransmitter()',
      )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3048:17-3049:26: `
          .connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3049:26-3057:12: `
          .setConfig(
            newKeepers,
            newTransmitters,
            f,
            encodeConfig(config),
            offchainVersion,
            offchainBytes,
          )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3064:7-3064:69: `await registry.connect(admin).addFunds(upkeepId, toWei('100'))`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3064:21-3064:36: `.connect(admin)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3064:36-3064:69: `.addFunds(upkeepId, toWei('100'))`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3071:7-3071:22: `await tx.wait()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3071:15-3071:22: `.wait()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3073:43-3073:53: `.from('2')`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3076:33-3076:44: `.getState()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3078:22-3078:59: `.totalPremium.gt(BigNumber.from('0'))`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3078:48-3078:58: `.from('0')`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3081:7-3090:10: `tx = await registry
        .connect(owner)
        .setConfig(
          newSigners,
          newKeepers,
          f,
          encodeConfig(config),
          newOffChainVersion,
          newOffChainConfig,
        )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3081:26-3082:24: `
        .connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3082:24-3090:10: `
        .setConfig(
          newSigners,
          newKeepers,
          f,
          encodeConfig(config),
          newOffChainVersion,
          newOffChainConfig,
        )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3092:37-3092:48: `.getState()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3094:22-3094:65: `.totalPremium.eq(updatedState.totalPremium)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3099:24-3099:41: `.includes(signer)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3100:33-3100:55: `.getSignerInfo(signer)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3101:33-3101:55: `.getSignerInfo(signer)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3107:31-3107:53: `.getSignerInfo(signer)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3108:31-3108:53: `.getSignerInfo(signer)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3113:24-3113:46: `.includes(transmitter)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3115:28-3115:60: `.getTransmitterInfo(transmitter)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3117:33-3117:65: `.getTransmitterInfo(transmitter)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3120:29-3120:61: `.getTransmitterInfo(transmitter)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3121:14-3121:39: `.lastCollected.toString()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3121:51-3121:75: `.totalPremium.toString()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3128:31-3128:63: `.getTransmitterInfo(transmitter)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3129:31-3129:63: `.getTransmitterInfo(transmitter)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3132:27-3132:59: `.getTransmitterInfo(transmitter)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3133:12-3133:37: `.lastCollected.toString()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3133:49-3133:73: `.totalPremium.toString()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3157:38-3157:79: `.getPeerRegistryMigrationPermission(peer)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3159:7-3159:65: `await registry.setPeerRegistryMigrationPermission(peer, 1)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3159:21-3159:65: `.setPeerRegistryMigrationPermission(peer, 1)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3160:7-3160:75: `permission = await registry.getPeerRegistryMigrationPermission(peer)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3160:34-3160:75: `.getPeerRegistryMigrationPermission(peer)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3162:7-3162:65: `await registry.setPeerRegistryMigrationPermission(peer, 2)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3162:21-3162:65: `.setPeerRegistryMigrationPermission(peer, 2)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3163:7-3163:75: `permission = await registry.getPeerRegistryMigrationPermission(peer)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3163:34-3163:75: `.getPeerRegistryMigrationPermission(peer)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3165:7-3165:65: `await registry.setPeerRegistryMigrationPermission(peer, 0)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3165:21-3165:65: `.setPeerRegistryMigrationPermission(peer, 0)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3166:7-3166:75: `permission = await registry.getPeerRegistryMigrationPermission(peer)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3166:34-3166:75: `.getPeerRegistryMigrationPermission(peer)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3171:17-3171:32: `.connect(admin)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3171:32-3171:77: `.setPeerRegistryMigrationPermission(peer, 10)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3176:17-3176:32: `.connect(admin)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3176:32-3176:76: `.setPeerRegistryMigrationPermission(peer, 1)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3183:7-3183:44: `await registry.connect(owner).pause()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3183:21-3183:36: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3183:36-3183:44: `.pause()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3184:7-3195:8: `await evmRevert(
        registry
          .connect(owner)
          .registerUpkeep(
            mock.address,
            executeGas,
            await admin.getAddress(),
            emptyBytes,
            emptyBytes,
          ),
        'RegistryPaused()',
      )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3185:17-3186:26: `
          .connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3186:26-3193:12: `
          .registerUpkeep(
            mock.address,
            executeGas,
            await admin.getAddress(),
            emptyBytes,
            emptyBytes,
          )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3190:24-3190:37: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3199:7-3210:8: `await evmRevert(
        registry
          .connect(owner)
          .registerUpkeep(
            zeroAddress,
            executeGas,
            await admin.getAddress(),
            emptyBytes,
            emptyBytes,
          ),
        'NotAContract()',
      )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3200:17-3201:26: `
          .connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3201:26-3208:12: `
          .registerUpkeep(
            zeroAddress,
            executeGas,
            await admin.getAddress(),
            emptyBytes,
            emptyBytes,
          )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3205:24-3205:37: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3214:7-3225:8: `await evmRevert(
        registry
          .connect(keeper1)
          .registerUpkeep(
            mock.address,
            executeGas,
            await admin.getAddress(),
            emptyBytes,
            emptyBytes,
          ),
        'OnlyCallableByOwnerOrRegistrar()',
      )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3215:17-3216:28: `
          .connect(keeper1)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3216:28-3223:12: `
          .registerUpkeep(
            mock.address,
            executeGas,
            await admin.getAddress(),
            emptyBytes,
            emptyBytes,
          )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3220:24-3220:37: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3229:7-3240:8: `await evmRevert(
        registry
          .connect(owner)
          .registerUpkeep(
            mock.address,
            2299,
            await admin.getAddress(),
            emptyBytes,
            emptyBytes,
          ),
        'GasLimitOutsideRange()',
      )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3230:17-3231:26: `
          .connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3231:26-3238:12: `
          .registerUpkeep(
            mock.address,
            2299,
            await admin.getAddress(),
            emptyBytes,
            emptyBytes,
          )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3235:24-3235:37: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3244:7-3255:8: `await evmRevert(
        registry
          .connect(owner)
          .registerUpkeep(
            mock.address,
            5000001,
            await admin.getAddress(),
            emptyBytes,
            emptyBytes,
          ),
        'GasLimitOutsideRange()',
      )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3245:17-3246:26: `
          .connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3246:26-3253:12: `
          .registerUpkeep(
            mock.address,
            5000001,
            await admin.getAddress(),
            emptyBytes,
            emptyBytes,
          )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3250:24-3250:37: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3261:9-3261:25: `longBytes += '1'`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3263:7-3274:8: `await evmRevert(
        registry
          .connect(owner)
          .registerUpkeep(
            mock.address,
            executeGas,
            await admin.getAddress(),
            longBytes,
            emptyBytes,
          ),
        'CheckDataExceedsLimit()',
      )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3264:17-3265:26: `
          .connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3265:26-3272:12: `
          .registerUpkeep(
            mock.address,
            executeGas,
            await admin.getAddress(),
            longBytes,
            emptyBytes,
          )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3269:24-3269:37: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3286:36-3287:28: `
            .connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3287:28-3294:14: `
            .registerUpkeep(
              mock.address,
              executeGas,
              await admin.getAddress(),
              checkData,
              offchainConfig,
            )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3291:26-3291:39: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3297:11-3297:43: `upkeepId = await getUpkeepID(tx)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3301:46-3301:66: `.getUpkeep(upkeepId)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3306:25-3306:47: `.executeGas.toString()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3308:35-3308:48: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3309:39-3309:58: `.balance.toNumber()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3310:39-3310:62: `.amountSpent.toNumber()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3315:30-3315:67: `.maxValidBlocknumber.eq('0xffffffff')`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3323:7-3326:8: `await evmRevert(
        registry.connect(keeper1).pauseUpkeep(upkeepId.add(1)),
        'OnlyCallableByAdmin()',
      )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3324:17-3324:34: `.connect(keeper1)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3324:34-3324:63: `.pauseUpkeep(upkeepId.add(1))`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3324:55-3324:62: `.add(1)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3330:7-3330:59: `await registry.connect(admin).cancelUpkeep(upkeepId)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3330:21-3330:36: `.connect(admin)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3330:36-3330:59: `.cancelUpkeep(upkeepId)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3332:7-3335:8: `await evmRevert(
        registry.connect(admin).pauseUpkeep(upkeepId),
        'UpkeepCancelled()',
      )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3333:17-3333:32: `.connect(admin)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3333:32-3333:54: `.pauseUpkeep(upkeepId)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3339:7-3339:58: `await registry.connect(admin).pauseUpkeep(upkeepId)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3339:21-3339:36: `.connect(admin)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3339:36-3339:58: `.pauseUpkeep(upkeepId)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3341:7-3344:8: `await evmRevert(
        registry.connect(admin).pauseUpkeep(upkeepId),
        'OnlyUnpausedUpkeep()',
      )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3342:17-3342:32: `.connect(admin)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3342:32-3342:54: `.pauseUpkeep(upkeepId)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3348:7-3351:8: `await evmRevert(
        registry.connect(keeper1).pauseUpkeep(upkeepId),
        'OnlyCallableByAdmin()',
      )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3349:17-3349:34: `.connect(keeper1)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3349:34-3349:56: `.pauseUpkeep(upkeepId)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3355:32-3355:47: `.connect(admin)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3355:47-3355:69: `.pauseUpkeep(upkeepId)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3358:42-3358:62: `.getUpkeep(upkeepId)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3365:7-3368:8: `await evmRevert(
        registry.connect(keeper1).unpauseUpkeep(upkeepId.add(1)),
        'OnlyCallableByAdmin()',
      )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3366:17-3366:34: `.connect(keeper1)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3366:34-3366:65: `.unpauseUpkeep(upkeepId.add(1))`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3366:57-3366:64: `.add(1)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3372:7-3372:59: `await registry.connect(owner).cancelUpkeep(upkeepId)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3372:21-3372:36: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3372:36-3372:59: `.cancelUpkeep(upkeepId)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3374:7-3377:8: `await evmRevert(
        registry.connect(admin).unpauseUpkeep(upkeepId),
        'UpkeepCancelled()',
      )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3375:17-3375:32: `.connect(admin)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3375:32-3375:56: `.unpauseUpkeep(upkeepId)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3381:37-3381:48: `.getState()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3383:7-3383:44: `await registry.connect(owner).pause()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3383:21-3383:36: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3383:36-3383:44: `.pause()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3385:36-3385:47: `.getState()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3389:7-3392:8: `await evmRevert(
        registry.connect(admin).unpauseUpkeep(upkeepId),
        'OnlyPausedUpkeep()',
      )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3390:17-3390:32: `.connect(admin)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3390:32-3390:56: `.unpauseUpkeep(upkeepId)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3396:7-3396:58: `await registry.connect(admin).pauseUpkeep(upkeepId)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3396:21-3396:36: `.connect(admin)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3396:36-3396:58: `.pauseUpkeep(upkeepId)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3398:42-3398:62: `.getUpkeep(upkeepId)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3402:7-3405:8: `await evmRevert(
        registry.connect(keeper1).unpauseUpkeep(upkeepId),
        'OnlyCallableByAdmin()',
      )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3403:17-3403:34: `.connect(keeper1)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3403:34-3403:58: `.unpauseUpkeep(upkeepId)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3409:7-3409:58: `await registry.connect(admin).pauseUpkeep(upkeepId)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3409:21-3409:36: `.connect(admin)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3409:36-3409:58: `.pauseUpkeep(upkeepId)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3411:32-3411:47: `.connect(admin)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3411:47-3411:71: `.unpauseUpkeep(upkeepId)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3415:42-3415:62: `.getUpkeep(upkeepId)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3418:39-3418:64: `.getActiveUpkeepIDs(0, 0)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3425:7-3428:8: `await evmRevert(
        registry.connect(keeper1).updateCheckData(upkeepId.add(1), randomBytes),
        'OnlyCallableByAdmin()',
      )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3426:17-3426:34: `.connect(keeper1)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3426:34-3426:80: `.updateCheckData(upkeepId.add(1), randomBytes)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3426:59-3426:66: `.add(1)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3432:7-3435:8: `await evmRevert(
        registry.connect(keeper1).updateCheckData(upkeepId, randomBytes),
        'OnlyCallableByAdmin()',
      )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3433:17-3433:34: `.connect(keeper1)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3433:34-3433:73: `.updateCheckData(upkeepId, randomBytes)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3439:7-3439:59: `await registry.connect(admin).cancelUpkeep(upkeepId)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3439:21-3439:36: `.connect(admin)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3439:36-3439:59: `.cancelUpkeep(upkeepId)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3441:7-3444:8: `await evmRevert(
        registry.connect(admin).updateCheckData(upkeepId, randomBytes),
        'UpkeepCancelled()',
      )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3442:17-3442:32: `.connect(admin)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3442:32-3442:71: `.updateCheckData(upkeepId, randomBytes)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3448:7-3448:58: `await registry.connect(admin).pauseUpkeep(upkeepId)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3448:21-3448:36: `.connect(admin)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3448:36-3448:58: `.pauseUpkeep(upkeepId)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3449:7-3449:75: `await registry.connect(admin).updateCheckData(upkeepId, randomBytes)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3449:21-3449:36: `.connect(admin)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3449:36-3449:75: `.updateCheckData(upkeepId, randomBytes)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3451:42-3451:62: `.getUpkeep(upkeepId)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3458:9-3458:25: `longBytes += '1'`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3461:7-3464:8: `await evmRevert(
        registry.connect(admin).updateCheckData(upkeepId, longBytes),
        'CheckDataExceedsLimit()',
      )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3462:17-3462:32: `.connect(admin)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3462:32-3462:69: `.updateCheckData(upkeepId, longBytes)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3468:32-3469:24: `
        .connect(admin)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3469:24-3470:48: `
        .updateCheckData(upkeepId, randomBytes)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3475:42-3475:62: `.getUpkeep(upkeepId)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3484:7-3487:8: `await evmRevert(
        registry.connect(admin).setUpkeepGasLimit(upkeepId.add(1), newGasLimit),
        'OnlyCallableByAdmin()',
      )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3485:17-3485:32: `.connect(admin)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3485:32-3485:80: `.setUpkeepGasLimit(upkeepId.add(1), newGasLimit)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3485:59-3485:66: `.add(1)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3491:7-3491:59: `await registry.connect(admin).cancelUpkeep(upkeepId)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3491:21-3491:36: `.connect(admin)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3491:36-3491:59: `.cancelUpkeep(upkeepId)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3492:7-3495:8: `await evmRevert(
        registry.connect(admin).setUpkeepGasLimit(upkeepId, newGasLimit),
        'UpkeepCancelled()',
      )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3493:17-3493:32: `.connect(admin)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3493:32-3493:73: `.setUpkeepGasLimit(upkeepId, newGasLimit)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3499:7-3502:8: `await evmRevert(
        registry.connect(owner).setUpkeepGasLimit(upkeepId, newGasLimit),
        'OnlyCallableByAdmin()',
      )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3500:17-3500:32: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3500:32-3500:73: `.setUpkeepGasLimit(upkeepId, newGasLimit)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3506:7-3511:8: `await evmRevert(
        registry
          .connect(admin)
          .setUpkeepGasLimit(upkeepId, BigNumber.from('100')),
        'GasLimitOutsideRange()',
      )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3507:17-3508:26: `
          .connect(admin)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3508:26-3509:62: `
          .setUpkeepGasLimit(upkeepId, BigNumber.from('100'))`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3509:49-3509:61: `.from('100')`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3512:7-3517:8: `await evmRevert(
        registry
          .connect(admin)
          .setUpkeepGasLimit(upkeepId, BigNumber.from('6000000')),
        'GasLimitOutsideRange()',
      )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3513:17-3514:26: `
          .connect(admin)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3514:26-3515:66: `
          .setUpkeepGasLimit(upkeepId, BigNumber.from('6000000'))`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3515:49-3515:65: `.from('6000000')`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3521:46-3521:66: `.getUpkeep(upkeepId)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3523:7-3523:77: `await registry.connect(admin).setUpkeepGasLimit(upkeepId, newGasLimit)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3523:21-3523:36: `.connect(admin)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3523:36-3523:77: `.setUpkeepGasLimit(upkeepId, newGasLimit)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3524:46-3524:66: `.getUpkeep(upkeepId)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3529:32-3530:24: `
        .connect(admin)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3530:24-3531:50: `
        .setUpkeepGasLimit(upkeepId, newGasLimit)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3542:7-3547:8: `await evmRevert(
        registry
          .connect(admin)
          .setUpkeepOffchainConfig(upkeepId.add(1), newConfig),
        'OnlyCallableByAdmin()',
      )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3543:17-3544:26: `
          .connect(admin)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3544:26-3545:63: `
          .setUpkeepOffchainConfig(upkeepId.add(1), newConfig)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3545:44-3545:51: `.add(1)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3551:7-3551:59: `await registry.connect(admin).cancelUpkeep(upkeepId)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3551:21-3551:36: `.connect(admin)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3551:36-3551:59: `.cancelUpkeep(upkeepId)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3552:7-3555:8: `await evmRevert(
        registry.connect(admin).setUpkeepOffchainConfig(upkeepId, newConfig),
        'UpkeepCancelled()',
      )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3553:17-3553:32: `.connect(admin)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3553:32-3553:77: `.setUpkeepOffchainConfig(upkeepId, newConfig)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3559:7-3562:8: `await evmRevert(
        registry.connect(owner).setUpkeepOffchainConfig(upkeepId, newConfig),
        'OnlyCallableByAdmin()',
      )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3560:17-3560:32: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3560:32-3560:77: `.setUpkeepOffchainConfig(upkeepId, newConfig)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3566:44-3566:64: `.getUpkeep(upkeepId)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3568:7-3568:81: `await registry.connect(admin).setUpkeepOffchainConfig(upkeepId, newConfig)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3568:21-3568:36: `.connect(admin)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3568:36-3568:81: `.setUpkeepOffchainConfig(upkeepId, newConfig)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3569:44-3569:64: `.getUpkeep(upkeepId)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3574:32-3575:24: `
        .connect(admin)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3575:24-3576:54: `
        .setUpkeepOffchainConfig(upkeepId, newConfig)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3585:7-3590:8: `await evmRevert(
        registry
          .connect(payee1)
          .transferUpkeepAdmin(upkeepId, await payee2.getAddress()),
        'OnlyCallableByAdmin()',
      )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3586:17-3587:27: `
          .connect(payee1)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3587:27-3588:68: `
          .transferUpkeepAdmin(upkeepId, await payee2.getAddress())`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3588:54-3588:67: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3594:7-3599:8: `await evmRevert(
        registry
          .connect(admin)
          .transferUpkeepAdmin(upkeepId, await admin.getAddress()),
        'ValueNotChanged()',
      )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3595:17-3596:26: `
          .connect(admin)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3596:26-3597:67: `
          .transferUpkeepAdmin(upkeepId, await admin.getAddress())`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3597:53-3597:66: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3603:7-3603:59: `await registry.connect(admin).cancelUpkeep(upkeepId)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3603:21-3603:36: `.connect(admin)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3603:36-3603:59: `.cancelUpkeep(upkeepId)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3605:7-3610:8: `await evmRevert(
        registry
          .connect(admin)
          .transferUpkeepAdmin(upkeepId, await keeper1.getAddress()),
        'UpkeepCancelled()',
      )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3606:17-3607:26: `
          .connect(admin)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3607:26-3608:69: `
          .transferUpkeepAdmin(upkeepId, await keeper1.getAddress())`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3608:55-3608:68: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3614:7-3619:8: `await evmRevert(
        registry
          .connect(admin)
          .transferUpkeepAdmin(upkeepId, ethers.constants.AddressZero),
        'InvalidRecipient()',
      )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3615:17-3616:26: `
          .connect(admin)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3616:26-3617:71: `
          .transferUpkeepAdmin(upkeepId, ethers.constants.AddressZero)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3623:7-3625:66: `await registry
        .connect(admin)
        .transferUpkeepAdmin(upkeepId, await payee1.getAddress())`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3623:21-3624:24: `
        .connect(admin)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3624:24-3625:66: `
        .transferUpkeepAdmin(upkeepId, await payee1.getAddress())`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3625:52-3625:65: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3627:36-3627:56: `.getUpkeep(upkeepId)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3628:31-3628:44: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3632:32-3633:24: `
        .connect(admin)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3633:24-3634:66: `
        .transferUpkeepAdmin(upkeepId, await payee1.getAddress())`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3634:52-3634:65: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3642:7-3644:66: `await registry
        .connect(admin)
        .transferUpkeepAdmin(upkeepId, await payee1.getAddress())`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3642:21-3643:24: `
        .connect(admin)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3643:24-3644:66: `
        .transferUpkeepAdmin(upkeepId, await payee1.getAddress())`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3644:52-3644:65: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3646:32-3647:24: `
        .connect(admin)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3647:24-3648:66: `
        .transferUpkeepAdmin(upkeepId, await payee1.getAddress())`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3648:52-3648:65: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3649:31-3649:38: `.wait()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3663:7-3666:8: `await evmRevert(
        registry.connect(payee2).acceptUpkeepAdmin(upkeepId),
        'OnlyCallableByProposedAdmin()',
      )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3664:17-3664:33: `.connect(payee2)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3664:33-3664:61: `.acceptUpkeepAdmin(upkeepId)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3670:7-3670:59: `await registry.connect(admin).cancelUpkeep(upkeepId)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3670:21-3670:36: `.connect(admin)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3670:36-3670:59: `.cancelUpkeep(upkeepId)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3672:7-3675:8: `await evmRevert(
        registry.connect(payee1).acceptUpkeepAdmin(upkeepId),
        'UpkeepCancelled()',
      )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3673:17-3673:33: `.connect(payee1)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3673:33-3673:61: `.acceptUpkeepAdmin(upkeepId)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3679:7-3679:65: `await registry.connect(payee1).acceptUpkeepAdmin(upkeepId)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3679:21-3679:37: `.connect(payee1)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3679:37-3679:65: `.acceptUpkeepAdmin(upkeepId)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3681:36-3681:56: `.getUpkeep(upkeepId)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3682:32-3682:45: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3686:32-3686:48: `.connect(payee1)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3686:48-3686:76: `.acceptUpkeepAdmin(upkeepId)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3695:7-3698:8: `await evmRevert(
        registry.connect(keeper1).withdrawOwnerFunds(),
        'Only callable by owner',
      )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3696:17-3696:34: `.connect(keeper1)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3696:34-3696:55: `.withdrawOwnerFunds()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3702:7-3702:69: `await registry.connect(admin).addFunds(upkeepId, toWei('100'))`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3702:21-3702:36: `.connect(admin)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3702:36-3702:69: `.addFunds(upkeepId, toWei('100'))`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3705:7-3726:8: `await registry.connect(owner).setConfig(
        signerAddresses,
        keeperAddresses,
        f,
        encodeConfig({
          paymentPremiumPPB,
          flatFeeMicroLink,
          checkGasLimit,
          stalenessSeconds,
          gasCeilingMultiplier,
          minUpkeepSpend,
          maxCheckDataSize,
          maxPerformDataSize,
          maxPerformGas,
          fallbackGasPrice,
          fallbackLinkPrice,
          transcoder: transcoder.address,
          registrar: ethers.constants.AddressZero,
        }),
        offchainVersion,
        offchainBytes,
      )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3705:21-3705:36: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3705:36-3726:8: `.setConfig(
        signerAddresses,
        keeperAddresses,
        f,
        encodeConfig({
          paymentPremiumPPB,
          flatFeeMicroLink,
          checkGasLimit,
          stalenessSeconds,
          gasCeilingMultiplier,
          minUpkeepSpend,
          maxCheckDataSize,
          maxPerformDataSize,
          maxPerformGas,
          fallbackGasPrice,
          fallbackLinkPrice,
          transcoder: transcoder.address,
          registrar: ethers.constants.AddressZero,
        }),
        offchainVersion,
        offchainBytes,
      )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3727:44-3727:64: `.getUpkeep(upkeepId)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3728:42-3728:78: `.balanceOf(await owner.getAddress())`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3728:64-3728:77: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3730:7-3730:59: `await registry.connect(owner).cancelUpkeep(upkeepId)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3730:21-3730:36: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3730:36-3730:59: `.cancelUpkeep(upkeepId)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3733:49-3733:60: `.getState()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3735:41-3735:59: `.eq(upkeepBalance)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3738:7-3738:57: `await registry.connect(owner).withdrawOwnerFunds()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3738:21-3738:36: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3738:36-3738:57: `.withdrawOwnerFunds()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3740:7-3740:80: `ownerRegistryBalance = (await registry.getState()).state.ownerLinkBalance`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3740:45-3740:56: `.getState()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3741:41-3741:77: `.balanceOf(await owner.getAddress())`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3741:63-3741:76: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3744:41-3744:65: `.eq(BigNumber.from('0'))`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3744:54-3744:64: `.from('0')`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3747:32-3747:51: `.add(upkeepBalance)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3747:51-3747:66: `.eq(ownerAfter)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3753:7-3761:8: `await evmRevert(
        registry
          .connect(payee2)
          .transferPayeeship(
            await keeper1.getAddress(),
            await payee2.getAddress(),
          ),
        'OnlyCallableByPayee()',
      )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3754:17-3755:27: `
          .connect(payee2)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3755:27-3759:12: `
          .transferPayeeship(
            await keeper1.getAddress(),
            await payee2.getAddress(),
          )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3757:26-3757:39: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3758:25-3758:38: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3765:7-3773:8: `await evmRevert(
        registry
          .connect(payee1)
          .transferPayeeship(
            await keeper1.getAddress(),
            await payee1.getAddress(),
          ),
        'ValueNotChanged()',
      )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3766:17-3767:27: `
          .connect(payee1)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3767:27-3771:12: `
          .transferPayeeship(
            await keeper1.getAddress(),
            await payee1.getAddress(),
          )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3769:26-3769:39: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3770:25-3770:38: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3777:7-3782:10: `await registry
        .connect(payee1)
        .transferPayeeship(
          await keeper1.getAddress(),
          await payee2.getAddress(),
        )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3777:21-3778:25: `
        .connect(payee1)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3778:25-3782:10: `
        .transferPayeeship(
          await keeper1.getAddress(),
          await payee2.getAddress(),
        )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3780:24-3780:37: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3781:23-3781:36: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3784:34-3784:81: `.getTransmitterInfo(await keeper1.getAddress())`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3784:67-3784:80: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3785:32-3785:45: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3789:32-3790:25: `
        .connect(payee1)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3790:25-3794:10: `
        .transferPayeeship(
          await keeper1.getAddress(),
          await payee2.getAddress(),
        )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3792:24-3792:37: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3793:23-3793:36: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3805:7-3810:10: `await registry
        .connect(payee1)
        .transferPayeeship(
          await keeper1.getAddress(),
          await payee2.getAddress(),
        )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3805:21-3806:25: `
        .connect(payee1)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3806:25-3810:10: `
        .transferPayeeship(
          await keeper1.getAddress(),
          await payee2.getAddress(),
        )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3808:24-3808:37: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3809:23-3809:36: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3812:32-3813:25: `
        .connect(payee1)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3813:25-3817:10: `
        .transferPayeeship(
          await keeper1.getAddress(),
          await payee2.getAddress(),
        )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3815:24-3815:37: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3816:23-3816:36: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3818:31-3818:38: `.wait()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3834:7-3837:8: `await evmRevert(
        registry.connect(payee1).acceptPayeeship(await keeper1.getAddress()),
        'OnlyCallableByProposedPayee()',
      )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3835:17-3835:33: `.connect(payee1)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3835:33-3835:77: `.acceptPayeeship(await keeper1.getAddress())`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3835:63-3835:76: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3841:32-3842:25: `
        .connect(payee2)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3842:25-3843:53: `
        .acceptPayeeship(await keeper1.getAddress())`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3843:39-3843:52: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3854:7-3854:81: `await registry.connect(payee2).acceptPayeeship(await keeper1.getAddress())`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3854:21-3854:37: `.connect(payee2)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3854:37-3854:81: `.acceptPayeeship(await keeper1.getAddress())`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3854:67-3854:80: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3856:34-3856:81: `.getTransmitterInfo(await keeper1.getAddress())`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3856:67-3856:80: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3857:32-3857:45: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3863:7-3866:8: `await evmRevert(
        registry.connect(keeper1).pause(),
        'Only callable by owner',
      )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3864:17-3864:34: `.connect(keeper1)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3864:34-3864:42: `.pause()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3870:37-3870:48: `.getState()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3872:7-3872:44: `await registry.connect(owner).pause()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3872:21-3872:36: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3872:36-3872:44: `.pause()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3874:36-3874:47: `.getState()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3878:7-3878:44: `await registry.connect(owner).pause()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3878:21-3878:36: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3878:36-3878:44: `.pause()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3880:7-3883:8: `await evmRevert(
        getTransmitTx(registry, keeper1, [upkeepId.toString()], f + 1),
        'RegistryPaused()',
      )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3887:7-3887:44: `await registry.connect(owner).pause()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3887:21-3887:36: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3887:36-3887:44: `.pause()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3889:7-3900:8: `await evmRevert(
        registry
          .connect(owner)
          .registerUpkeep(
            mock.address,
            executeGas,
            await admin.getAddress(),
            emptyBytes,
            emptyBytes,
          ),
        'RegistryPaused()',
      )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3890:17-3891:26: `
          .connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3891:26-3898:12: `
          .registerUpkeep(
            mock.address,
            executeGas,
            await admin.getAddress(),
            emptyBytes,
            emptyBytes,
          )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3895:24-3895:37: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3910:7-3913:8: `await evmRevert(
        registry.connect(keeper1).unpause(),
        'Only callable by owner',
      )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3911:17-3911:34: `.connect(keeper1)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3911:34-3911:44: `.unpause()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3917:36-3917:47: `.getState()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3919:7-3919:46: `await registry.connect(owner).unpause()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3919:21-3919:36: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3919:36-3919:46: `.unpause()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3921:37-3921:48: `.getState()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3973:31-3973:51: `.getUpkeep(upkeepId)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3976:31-3976:51: `.getUpkeep(upkeepId)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3979:31-3979:42: `.getState()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3981:9-3983:68: `await registry
          .connect(admin)
          .transferUpkeepAdmin(upkeepId, await payee1.getAddress())`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3981:23-3982:26: `
          .connect(admin)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3982:26-3983:68: `
          .transferUpkeepAdmin(upkeepId, await payee1.getAddress())`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3983:54-3983:67: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3986:9-3988:57: `await registry
          .connect(admin)
          .migrateUpkeeps([upkeepId], registry2.address)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3986:23-3987:26: `
          .connect(admin)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3987:26-3988:57: `
          .migrateUpkeeps([upkeepId], registry2.address)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3989:31-3989:42: `.getState()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3990:32-3990:43: `.getState()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3991:31-3991:51: `.getUpkeep(upkeepId)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3992:31-3992:51: `.getUpkeep(upkeepId)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3993:32-3993:52: `.getUpkeep(upkeepId)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3996:32-3996:43: `.getState()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:3999:32-3999:52: `.getUpkeep(upkeepId)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4004:19-4004:35: `.connect(payee1)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4004:35-4004:63: `.acceptUpkeepAdmin(upkeepId)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4007:20-4007:36: `.connect(payee1)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4007:36-4007:64: `.acceptUpkeepAdmin(upkeepId)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4012:31-4012:51: `.getUpkeep(upkeepId)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4015:31-4015:51: `.getUpkeep(upkeepId)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4018:31-4018:42: `.getState()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4019:9-4019:60: `await registry.connect(admin).pauseUpkeep(upkeepId)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4019:23-4019:38: `.connect(admin)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4019:38-4019:60: `.pauseUpkeep(upkeepId)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4021:31-4021:51: `.getUpkeep(upkeepId)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4023:9-4025:57: `await registry
          .connect(admin)
          .migrateUpkeeps([upkeepId], registry2.address)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4023:23-4024:26: `
          .connect(admin)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4024:26-4025:57: `
          .migrateUpkeeps([upkeepId], registry2.address)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4026:31-4026:42: `.getState()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4027:32-4027:43: `.getState()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4028:31-4028:51: `.getUpkeep(upkeepId)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4029:32-4029:52: `.getUpkeep(upkeepId)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4032:31-4032:51: `.getUpkeep(upkeepId)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4033:32-4033:52: `.getUpkeep(upkeepId)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4036:32-4036:43: `.getState()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4040:32-4040:52: `.getUpkeep(upkeepId)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4044:31-4044:51: `.getUpkeep(upkeepId)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4047:31-4047:51: `.getUpkeep(upkeepId)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4050:31-4050:42: `.getState()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4051:28-4052:26: `
          .connect(admin)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4052:26-4053:57: `
          .migrateUpkeeps([upkeepId], registry2.address)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4064:19-4064:34: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4064:34-4064:80: `.migrateUpkeeps([upkeepId], registry2.address)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4066:9-4068:57: `await registry
          .connect(admin)
          .migrateUpkeeps([upkeepId], registry2.address)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4066:23-4067:26: `
          .connect(admin)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4067:26-4068:57: `
          .migrateUpkeeps([upkeepId], registry2.address)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4075:9-4075:80: `await registry.setPeerRegistryMigrationPermission(registry2.address, 0)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4075:23-4075:80: `.setPeerRegistryMigrationPermission(registry2.address, 0)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4076:9-4076:80: `await registry2.setPeerRegistryMigrationPermission(registry.address, 0)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4076:24-4076:80: `.setPeerRegistryMigrationPermission(registry.address, 0)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4077:30-4077:76: `.migrateUpkeeps([upkeepId], registry2.address)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4080:9-4080:80: `await registry.setPeerRegistryMigrationPermission(registry2.address, 1)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4080:23-4080:80: `.setPeerRegistryMigrationPermission(registry2.address, 1)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4081:9-4081:80: `await registry2.setPeerRegistryMigrationPermission(registry.address, 0)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4081:24-4081:80: `.setPeerRegistryMigrationPermission(registry.address, 0)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4082:30-4082:76: `.migrateUpkeeps([upkeepId], registry2.address)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4085:9-4085:80: `await registry.setPeerRegistryMigrationPermission(registry2.address, 0)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4085:23-4085:80: `.setPeerRegistryMigrationPermission(registry2.address, 0)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4086:9-4086:80: `await registry2.setPeerRegistryMigrationPermission(registry.address, 2)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4086:24-4086:80: `.setPeerRegistryMigrationPermission(registry.address, 2)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4087:30-4087:76: `.migrateUpkeeps([upkeepId], registry2.address)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4090:9-4090:80: `await registry.setPeerRegistryMigrationPermission(registry2.address, 2)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4090:23-4090:80: `.setPeerRegistryMigrationPermission(registry2.address, 2)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4091:9-4091:80: `await registry2.setPeerRegistryMigrationPermission(registry.address, 1)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4091:24-4091:80: `.setPeerRegistryMigrationPermission(registry.address, 1)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4092:30-4092:76: `.migrateUpkeeps([upkeepId], registry2.address)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4124:7-4127:8: `await evmRevert(
        registry.connect(keeper1).setPayees([]),
        'Only callable by owner',
      )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4125:17-4125:34: `.connect(keeper1)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4125:34-4125:48: `.setPayees([])`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4132:7-4135:8: `await evmRevert(
        registry.connect(owner).setPayees([await payee1.getAddress()]),
        'ParameterLengthError()',
      )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4133:17-4133:32: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4133:32-4133:71: `.setPayees([await payee1.getAddress()])`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4133:56-4133:69: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4136:7-4147:8: `await evmRevert(
        registry
          .connect(owner)
          .setPayees([
            await payee1.getAddress(),
            await payee1.getAddress(),
            await payee1.getAddress(),
            await payee1.getAddress(),
            await payee1.getAddress(),
          ]),
        'ParameterLengthError()',
      )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4137:17-4138:26: `
          .connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4138:26-4145:13: `
          .setPayees([
            await payee1.getAddress(),
            await payee1.getAddress(),
            await payee1.getAddress(),
            await payee1.getAddress(),
            await payee1.getAddress(),
          ])`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4140:25-4140:38: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4141:25-4141:38: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4142:25-4142:38: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4143:25-4143:38: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4144:25-4144:38: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4151:7-4161:8: `await evmRevert(
        registry
          .connect(owner)
          .setPayees([
            await payee1.getAddress(),
            '0x0000000000000000000000000000000000000000',
            await payee3.getAddress(),
            await payee4.getAddress(),
          ]),
        'InvalidPayee()',
      )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4152:17-4153:26: `
          .connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4153:26-4159:13: `
          .setPayees([
            await payee1.getAddress(),
            '0x0000000000000000000000000000000000000000',
            await payee3.getAddress(),
            await payee4.getAddress(),
          ])`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4155:25-4155:38: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4157:25-4157:38: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4158:25-4158:38: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4167:38-4167:77: `.getTransmitterInfo(keeperAddresses[i])`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4172:7-4172:54: `await registry.connect(owner).setPayees(payees)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4172:21-4172:36: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4172:36-4172:54: `.setPayees(payees)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4175:38-4175:77: `.getTransmitterInfo(keeperAddresses[i])`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4183:7-4183:54: `await registry.connect(owner).setPayees(payees)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4183:21-4183:36: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4183:36-4183:54: `.setPayees(payees)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4186:21-4186:34: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4188:21-4188:34: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4189:21-4189:34: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4191:7-4191:57: `await registry.connect(owner).setPayees(newPayees)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4191:21-4191:36: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4191:36-4191:57: `.setPayees(newPayees)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4193:37-4195:8: `.getTransmitterInfo(
        await keeper2.getAddress(),
      )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4194:22-4194:35: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4196:32-4196:45: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4202:7-4202:54: `await registry.connect(owner).setPayees(payees)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4202:21-4202:36: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4202:36-4202:54: `.setPayees(payees)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4205:21-4205:34: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4206:20-4206:33: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4207:21-4207:34: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4208:21-4208:34: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4210:7-4213:8: `await evmRevert(
        registry.connect(owner).setPayees(newPayees),
        'InvalidPayee()',
      )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4211:17-4211:32: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4211:32-4211:53: `.setPayees(newPayees)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4217:32-4217:47: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4217:47-4217:65: `.setPayees(payees)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4226:7-4229:8: `await evmRevert(
        registry.connect(owner).cancelUpkeep(upkeepId.add(1)),
        'CannotCancel()',
      )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4227:17-4227:32: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4227:32-4227:62: `.cancelUpkeep(upkeepId.add(1))`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4227:54-4227:61: `.add(1)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4233:7-4236:8: `await evmRevert(
        registry.connect(keeper1).cancelUpkeep(upkeepId),
        'OnlyCallableByOwnerOrAdmin()',
      )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4234:17-4234:34: `.connect(keeper1)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4234:34-4234:57: `.cancelUpkeep(upkeepId)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4241:34-4241:49: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4241:49-4241:72: `.cancelUpkeep(upkeepId)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4242:33-4242:40: `.wait()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4243:44-4243:64: `.getUpkeep(upkeepId)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4245:23-4245:54: `.maxValidBlocknumber.toNumber()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4251:34-4251:49: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4251:49-4251:72: `.cancelUpkeep(upkeepId)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4252:33-4252:40: `.wait()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4259:9-4259:61: `await registry.connect(owner).cancelUpkeep(upkeepId)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4259:23-4259:38: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4259:38-4259:61: `.cancelUpkeep(upkeepId)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4261:9-4264:10: `await evmRevert(
          getTransmitTx(registry, keeper1, [upkeepId.toString()], f + 1),
          'StaleReport()',
        )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4268:9-4268:61: `await registry.connect(owner).cancelUpkeep(upkeepId)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4268:23-4268:38: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4268:38-4268:61: `.cancelUpkeep(upkeepId)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4269:9-4272:10: `await evmRevert(
          registry.connect(owner).cancelUpkeep(upkeepId),
          'CannotCancel()',
        )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4270:19-4270:34: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4270:34-4270:57: `.cancelUpkeep(upkeepId)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4285:11-4285:63: `await registry.connect(owner).cancelUpkeep(upkeepId)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4285:25-4285:40: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4285:40-4285:63: `.cancelUpkeep(upkeepId)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4287:46-4287:66: `.getUpkeep(upkeepId)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4289:38-4289:56: `.lt(oldExpiration)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4296:9-4296:61: `await registry.connect(admin).cancelUpkeep(upkeepId)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4296:23-4296:38: `.connect(admin)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4296:38-4296:61: `.cancelUpkeep(upkeepId)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4298:9-4301:10: `await evmRevert(
          registry.connect(admin).cancelUpkeep(upkeepId),
          'CannotCancel()',
        )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4299:19-4299:34: `.connect(admin)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4299:34-4299:57: `.cancelUpkeep(upkeepId)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4305:9-4305:61: `await registry.connect(admin).cancelUpkeep(upkeepId)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4305:23-4305:38: `.connect(admin)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4305:38-4305:61: `.cancelUpkeep(upkeepId)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4308:11-4308:53: `await ethers.provider.send('evm_mine', [])`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4308:23-4308:53: `.provider.send('evm_mine', [])`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4311:9-4314:10: `await evmRevert(
          registry.connect(owner).cancelUpkeep(upkeepId),
          'CannotCancel()',
        )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4312:19-4312:34: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4312:34-4312:57: `.cancelUpkeep(upkeepId)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4318:34-4318:49: `.connect(admin)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4318:49-4318:72: `.cancelUpkeep(upkeepId)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4319:33-4319:40: `.wait()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4320:44-4320:64: `.getUpkeep(upkeepId)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4322:23-4322:54: `.maxValidBlocknumber.toNumber()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4328:34-4328:49: `.connect(admin)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4328:49-4328:72: `.cancelUpkeep(upkeepId)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4329:33-4329:40: `.wait()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4339:9-4339:79: `await linkToken.connect(owner).approve(registry.address, toWei('100'))`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4339:24-4339:39: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4339:39-4339:79: `.approve(registry.address, toWei('100'))`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4340:9-4340:71: `await registry.connect(owner).addFunds(upkeepId, toWei('100'))`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4340:23-4340:38: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4340:38-4340:71: `.addFunds(upkeepId, toWei('100'))`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4341:9-4341:61: `await registry.connect(admin).cancelUpkeep(upkeepId)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4341:23-4341:38: `.connect(admin)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4341:38-4341:61: `.cancelUpkeep(upkeepId)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4343:9-4343:77: `await getTransmitTx(registry, keeper1, [upkeepId.toString()], f + 1)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4346:11-4346:53: `await ethers.provider.send('evm_mine', [])`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4346:23-4346:53: `.provider.send('evm_mine', [])`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4349:9-4352:10: `await evmRevert(
          getTransmitTx(registry, keeper1, [upkeepId.toString()], f + 1),
          'StaleReport()',
        )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4365:11-4386:12: `await registry.connect(owner).setConfig(
            signerAddresses,
            keeperAddresses,
            f,
            encodeConfig({
              paymentPremiumPPB,
              flatFeeMicroLink,
              checkGasLimit,
              stalenessSeconds,
              gasCeilingMultiplier,
              minUpkeepSpend,
              maxCheckDataSize,
              maxPerformDataSize,
              maxPerformGas,
              fallbackGasPrice,
              fallbackLinkPrice,
              transcoder: transcoder.address,
              registrar: ethers.constants.AddressZero,
            }),
            offchainVersion,
            offchainBytes,
          )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4365:25-4365:40: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4365:40-4386:12: `.setConfig(
            signerAddresses,
            keeperAddresses,
            f,
            encodeConfig({
              paymentPremiumPPB,
              flatFeeMicroLink,
              checkGasLimit,
              stalenessSeconds,
              gasCeilingMultiplier,
              minUpkeepSpend,
              maxCheckDataSize,
              maxPerformDataSize,
              maxPerformGas,
              fallbackGasPrice,
              fallbackLinkPrice,
              transcoder: transcoder.address,
              registrar: ethers.constants.AddressZero,
            }),
            offchainVersion,
            offchainBytes,
          )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4388:47-4390:12: `.balanceOf(
            await payee1.getAddress(),
          )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4389:25-4389:38: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4391:47-4391:67: `.getUpkeep(upkeepId)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4392:46-4392:57: `.getState()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4394:43-4394:61: `.sub(upkeepBefore)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4395:49-4395:66: `.sub(amountSpent)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4397:11-4397:63: `await registry.connect(admin).cancelUpkeep(upkeepId)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4397:25-4397:40: `.connect(admin)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4397:40-4397:63: `.cancelUpkeep(upkeepId)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4399:46-4401:12: `.balanceOf(
            await payee1.getAddress(),
          )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4400:25-4400:38: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4402:46-4402:66: `.getUpkeep(upkeepId)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4403:45-4403:56: `.getState()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4406:37-4406:58: `.sub(cancellationFee)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4406:58-4406:74: `.eq(upkeepAfter)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4408:37-4408:53: `.eq(payee1After)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4410:35-4410:52: `.sub(ownerBefore)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4410:52-4410:72: `.eq(cancellationFee)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4416:11-4437:12: `await registry.connect(owner).setConfig(
            signerAddresses,
            keeperAddresses,
            f,
            encodeConfig({
              paymentPremiumPPB,
              flatFeeMicroLink,
              checkGasLimit,
              stalenessSeconds,
              gasCeilingMultiplier,
              minUpkeepSpend,
              maxCheckDataSize,
              maxPerformDataSize,
              maxPerformGas,
              fallbackGasPrice,
              fallbackLinkPrice,
              transcoder: transcoder.address,
              registrar: ethers.constants.AddressZero,
            }),
            offchainVersion,
            offchainBytes,
          )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4416:25-4416:40: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4416:40-4437:12: `.setConfig(
            signerAddresses,
            keeperAddresses,
            f,
            encodeConfig({
              paymentPremiumPPB,
              flatFeeMicroLink,
              checkGasLimit,
              stalenessSeconds,
              gasCeilingMultiplier,
              minUpkeepSpend,
              maxCheckDataSize,
              maxPerformDataSize,
              maxPerformGas,
              fallbackGasPrice,
              fallbackLinkPrice,
              transcoder: transcoder.address,
              registrar: ethers.constants.AddressZero,
            }),
            offchainVersion,
            offchainBytes,
          )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4438:47-4440:12: `.balanceOf(
            await payee1.getAddress(),
          )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4439:25-4439:38: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4441:47-4441:67: `.getUpkeep(upkeepId)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4442:46-4442:57: `.getState()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4444:11-4444:63: `await registry.connect(admin).cancelUpkeep(upkeepId)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4444:25-4444:40: `.connect(admin)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4444:40-4444:63: `.cancelUpkeep(upkeepId)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4445:46-4447:12: `.balanceOf(
            await payee1.getAddress(),
          )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4446:25-4446:38: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4448:45-4448:56: `.getState()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4449:46-4449:66: `.getUpkeep(upkeepId)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4454:36-4454:53: `.eq(payee1Before)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4456:35-4456:52: `.sub(ownerBefore)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4456:52-4456:69: `.eq(upkeepBefore)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4461:43-4461:53: `.from(420)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4462:11-4483:12: `await registry.connect(owner).setConfig(
            signerAddresses,
            keeperAddresses,
            f,
            encodeConfig({
              paymentPremiumPPB,
              flatFeeMicroLink,
              checkGasLimit,
              stalenessSeconds,
              gasCeilingMultiplier,
              minUpkeepSpend,
              maxCheckDataSize,
              maxPerformDataSize,
              maxPerformGas,
              fallbackGasPrice,
              fallbackLinkPrice,
              transcoder: transcoder.address,
              registrar: ethers.constants.AddressZero,
            }),
            offchainVersion,
            offchainBytes,
          )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4462:25-4462:40: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4462:40-4483:12: `.setConfig(
            signerAddresses,
            keeperAddresses,
            f,
            encodeConfig({
              paymentPremiumPPB,
              flatFeeMicroLink,
              checkGasLimit,
              stalenessSeconds,
              gasCeilingMultiplier,
              minUpkeepSpend,
              maxCheckDataSize,
              maxPerformDataSize,
              maxPerformGas,
              fallbackGasPrice,
              fallbackLinkPrice,
              transcoder: transcoder.address,
              registrar: ethers.constants.AddressZero,
            }),
            offchainVersion,
            offchainBytes,
          )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4484:47-4486:12: `.balanceOf(
            await payee1.getAddress(),
          )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4485:25-4485:38: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4487:47-4487:67: `.getUpkeep(upkeepId)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4488:46-4488:57: `.getState()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4490:11-4490:63: `await registry.connect(admin).cancelUpkeep(upkeepId)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4490:25-4490:40: `.connect(admin)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4490:40-4490:63: `.cancelUpkeep(upkeepId)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4491:46-4493:12: `.balanceOf(
            await payee1.getAddress(),
          )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4492:25-4492:38: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4494:45-4494:56: `.getState()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4495:46-4495:66: `.getUpkeep(upkeepId)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4498:37-4498:53: `.eq(upkeepAfter)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4500:35-4500:51: `.eq(ownerBefore)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4502:37-4502:53: `.eq(payee1After)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4516:7-4524:8: `await evmRevert(
        registry
          .connect(payee2)
          .withdrawPayment(
            await keeper1.getAddress(),
            await nonkeeper.getAddress(),
          ),
        'OnlyCallableByPayee()',
      )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4517:17-4518:27: `
          .connect(payee2)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4518:27-4522:12: `
          .withdrawPayment(
            await keeper1.getAddress(),
            await nonkeeper.getAddress(),
          )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4520:26-4520:39: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4521:28-4521:41: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4528:7-4533:8: `await evmRevert(
        registry
          .connect(payee2)
          .withdrawPayment(await keeper1.getAddress(), zeroAddress),
        'InvalidRecipient()',
      )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4529:17-4530:27: `
          .connect(payee2)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4530:27-4531:68: `
          .withdrawPayment(await keeper1.getAddress(), zeroAddress)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4531:41-4531:54: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4537:33-4537:46: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4538:42-4540:8: `.getTransmitterInfo(
        await keeper1.getAddress(),
      )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4539:22-4539:35: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4541:49-4541:69: `.getUpkeep(upkeepId)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4542:43-4542:57: `.balanceOf(to)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4543:49-4543:77: `.balanceOf(registry.address)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4544:52-4544:63: `.getState()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4546:42-4546:53: `.getState()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4549:32-4549:57: `.lastCollected.toString()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4552:7-4554:57: `await registry
        .connect(payee1)
        .withdrawPayment(await keeper1.getAddress(), to)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4552:21-4553:25: `
        .connect(payee1)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4553:25-4554:57: `
        .withdrawPayment(await keeper1.getAddress(), to)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4554:39-4554:52: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4556:41-4558:8: `.getTransmitterInfo(
        await keeper1.getAddress(),
      )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4557:22-4557:35: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4559:48-4559:68: `.getUpkeep(upkeepId)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4560:42-4560:56: `.balanceOf(to)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4561:48-4561:76: `.balanceOf(registry.address)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4562:51-4562:62: `.getState()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4564:41-4564:52: `.getState()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4567:42-4567:67: `.eq(registryPremiumAfter)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4570:20-4570:45: `.lastCollected.toString()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4574:48-4576:8: `.mod(
        BigNumber.from(keeperAddresses.length),
      )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4575:18-4575:47: `.from(keeperAddresses.length)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4578:31-4578:48: `.sub(spareChange)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4578:48-4578:64: `.eq(ownerBefore)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4580:32-4580:62: `.balance.eq(BigNumber.from(0))`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4580:53-4580:61: `.from(0)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4581:39-4581:61: `.eq(registrationAfter)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4582:33-4582:59: `.add(keeperBefore.balance)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4582:59-4582:75: `.eq(toLinkAfter)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4584:27-4584:53: `.sub(keeperBefore.balance)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4584:53-4584:75: `.eq(registryLinkAfter)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4590:23-4590:70: `.getTransmitterInfo(await keeper1.getAddress())`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4590:56-4590:69: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4592:32-4593:25: `
        .connect(payee1)`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4593:25-4597:10: `
        .withdrawPayment(
          await keeper1.getAddress(),
          await nonkeeper.getAddress(),
        )`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4595:24-4595:37: `.getAddress()`
$DIR/contracts/test/v0.8/automation/KeeperRegistry2_0.test.ts:4596:26-4596:39: `.getAddress()`
$DIR/contracts/test/v0.8/automation/UpkeepTranscoder.test.ts:25:46-25:63: `.typeAndVersion()`
$DIR/contracts/test/v0.8/automation/UpkeepTranscoder.test.ts:34:7-37:8: `await evmRevert(
        transcoder.transcodeUpkeeps(3, 1, encodedData),
        'function was called with incorrect parameters',
      )`
$DIR/contracts/test/v0.8/automation/UpkeepTranscoder.test.ts:35:19-35:55: `.transcodeUpkeeps(3, 1, encodedData)`
$DIR/contracts/test/v0.8/automation/UpkeepTranscoder.test.ts:41:7-44:8: `await evmRevert(
        transcoder.transcodeUpkeeps(1, 2, encodedData),
        'InvalidTranscoding()',
      )`
$DIR/contracts/test/v0.8/automation/UpkeepTranscoder.test.ts:42:19-42:55: `.transcodeUpkeeps(1, 2, encodedData)`
$DIR/contracts/test/v0.8/automation/UpkeepTranscoder.test.ts:49:40-53:10: `.transcodeUpkeeps(
          formatV1,
          formatV1,
          encodedData,
        )`
$DIR/contracts/test/v0.8/automation/UpkeepTranscoder.test.ts:56:9-60:10: `response = await transcoder.transcodeUpkeeps(
          formatV2,
          formatV2,
          encodedData,
        )`
$DIR/contracts/test/v0.8/automation/UpkeepTranscoder.test.ts:56:36-60:10: `.transcodeUpkeeps(
          formatV2,
          formatV2,
          encodedData,
        )`
$DIR/contracts/test/v0.8/automation/UpkeepTranscoder.test.ts:63:9-67:10: `response = await transcoder.transcodeUpkeeps(
          formatV3,
          formatV3,
          encodedData,
        )`
$DIR/contracts/test/v0.8/automation/UpkeepTranscoder.test.ts:63:36-67:10: `.transcodeUpkeeps(
          formatV3,
          formatV3,
          encodedData,
        )`
$DIR/contracts/test/v0.8/dev/ArbitrumCrossDomainForwarder.test.ts:63:5-74:7: `publicAbi(forwarder, [
      'typeAndVersion',
      'crossDomainMessenger',
      'forward',
      'l1Owner',
      'transferL1Ownership',
      'acceptL1Ownership',
      // ConfirmedOwner methods:
      'owner',
      'transferOwnership',
      'acceptOwnership',
    ])`
$DIR/contracts/test/v0.8/dev/ArbitrumCrossDomainForwarder.test.ts:79:39-79:47: `.owner()`
$DIR/contracts/test/v0.8/dev/ArbitrumCrossDomainForwarder.test.ts:84:39-84:49: `.l1Owner()`
$DIR/contracts/test/v0.8/dev/ArbitrumCrossDomainForwarder.test.ts:89:39-89:62: `.crossDomainMessenger()`
$DIR/contracts/test/v0.8/dev/ArbitrumCrossDomainForwarder.test.ts:94:39-94:56: `.typeAndVersion()`
$DIR/contracts/test/v0.8/dev/ArbitrumCrossDomainForwarder.test.ts:102:18-102:36: `.connect(stranger)`
$DIR/contracts/test/v0.8/dev/ArbitrumCrossDomainForwarder.test.ts:102:36-102:67: `.forward(greeter.address, '0x')`
$DIR/contracts/test/v0.8/dev/ArbitrumCrossDomainForwarder.test.ts:108:45-111:8: `.interface.encodeFunctionData(
        'setGreeting',
        [newGreeting],
      )`
$DIR/contracts/test/v0.8/dev/ArbitrumCrossDomainForwarder.test.ts:112:7-114:51: `await forwarder
        .connect(crossdomainMessenger)
        .forward(greeter.address, setGreetingData)`
$DIR/contracts/test/v0.8/dev/ArbitrumCrossDomainForwarder.test.ts:112:22-113:39: `
        .connect(crossdomainMessenger)`
$DIR/contracts/test/v0.8/dev/ArbitrumCrossDomainForwarder.test.ts:113:39-114:51: `
        .forward(greeter.address, setGreetingData)`
$DIR/contracts/test/v0.8/dev/ArbitrumCrossDomainForwarder.test.ts:116:44-116:55: `.greeting()`
$DIR/contracts/test/v0.8/dev/ArbitrumCrossDomainForwarder.test.ts:121:45-124:8: `.interface.encodeFunctionData(
        'setGreeting',
        [''],
      )`
$DIR/contracts/test/v0.8/dev/ArbitrumCrossDomainForwarder.test.ts:126:18-127:41: `
          .connect(crossdomainMessenger)`
$DIR/contracts/test/v0.8/dev/ArbitrumCrossDomainForwarder.test.ts:127:41-128:53: `
          .forward(greeter.address, setGreetingData)`
$DIR/contracts/test/v0.8/dev/ArbitrumCrossDomainForwarder.test.ts:136:18-136:36: `.connect(stranger)`
$DIR/contracts/test/v0.8/dev/ArbitrumCrossDomainForwarder.test.ts:136:36-136:74: `.transferL1Ownership(stranger.address)`
$DIR/contracts/test/v0.8/dev/ArbitrumCrossDomainForwarder.test.ts:141:45-141:53: `.owner()`
$DIR/contracts/test/v0.8/dev/ArbitrumCrossDomainForwarder.test.ts:145:18-145:33: `.connect(owner)`
$DIR/contracts/test/v0.8/dev/ArbitrumCrossDomainForwarder.test.ts:145:33-145:71: `.transferL1Ownership(stranger.address)`
$DIR/contracts/test/v0.8/dev/ArbitrumCrossDomainForwarder.test.ts:150:45-150:55: `.l1Owner()`
$DIR/contracts/test/v0.8/dev/ArbitrumCrossDomainForwarder.test.ts:152:18-153:41: `
          .connect(crossdomainMessenger)`
$DIR/contracts/test/v0.8/dev/ArbitrumCrossDomainForwarder.test.ts:153:41-154:50: `
          .transferL1Ownership(newL1OwnerAddress)`
$DIR/contracts/test/v0.8/dev/ArbitrumCrossDomainForwarder.test.ts:161:45-161:55: `.l1Owner()`
$DIR/contracts/test/v0.8/dev/ArbitrumCrossDomainForwarder.test.ts:163:18-164:41: `
          .connect(crossdomainMessenger)`
$DIR/contracts/test/v0.8/dev/ArbitrumCrossDomainForwarder.test.ts:164:41-165:61: `
          .transferL1Ownership(ethers.constants.AddressZero)`
$DIR/contracts/test/v0.8/dev/ArbitrumCrossDomainForwarder.test.ts:175:18-175:48: `.connect(crossdomainMessenger)`
$DIR/contracts/test/v0.8/dev/ArbitrumCrossDomainForwarder.test.ts:175:48-175:68: `.acceptL1Ownership()`
$DIR/contracts/test/v0.8/dev/ArbitrumCrossDomainForwarder.test.ts:180:45-180:55: `.l1Owner()`
$DIR/contracts/test/v0.8/dev/ArbitrumCrossDomainForwarder.test.ts:181:7-183:48: `await forwarder
        .connect(crossdomainMessenger)
        .transferL1Ownership(newL1OwnerAddress)`
$DIR/contracts/test/v0.8/dev/ArbitrumCrossDomainForwarder.test.ts:181:22-182:39: `
        .connect(crossdomainMessenger)`
$DIR/contracts/test/v0.8/dev/ArbitrumCrossDomainForwarder.test.ts:182:39-183:48: `
        .transferL1Ownership(newL1OwnerAddress)`
$DIR/contracts/test/v0.8/dev/ArbitrumCrossDomainForwarder.test.ts:185:18-185:56: `.connect(newOwnerCrossdomainMessenger)`
$DIR/contracts/test/v0.8/dev/ArbitrumCrossDomainForwarder.test.ts:185:56-185:76: `.acceptL1Ownership()`
$DIR/contracts/test/v0.8/dev/ArbitrumCrossDomainForwarder.test.ts:190:45-190:55: `.l1Owner()`
$DIR/contracts/test/v0.8/dev/ArbitrumCrossDomainGovernor.test.ts:71:5-83:7: `publicAbi(governor, [
      'typeAndVersion',
      'crossDomainMessenger',
      'forward',
      'forwardDelegate',
      'l1Owner',
      'transferL1Ownership',
      'acceptL1Ownership',
      // ConfirmedOwner methods:
      'owner',
      'transferOwnership',
      'acceptOwnership',
    ])`
$DIR/contracts/test/v0.8/dev/ArbitrumCrossDomainGovernor.test.ts:88:38-88:46: `.owner()`
$DIR/contracts/test/v0.8/dev/ArbitrumCrossDomainGovernor.test.ts:93:38-93:48: `.l1Owner()`
$DIR/contracts/test/v0.8/dev/ArbitrumCrossDomainGovernor.test.ts:98:38-98:61: `.crossDomainMessenger()`
$DIR/contracts/test/v0.8/dev/ArbitrumCrossDomainGovernor.test.ts:103:38-103:55: `.typeAndVersion()`
$DIR/contracts/test/v0.8/dev/ArbitrumCrossDomainGovernor.test.ts:111:17-111:35: `.connect(stranger)`
$DIR/contracts/test/v0.8/dev/ArbitrumCrossDomainGovernor.test.ts:111:35-111:66: `.forward(greeter.address, '0x')`
$DIR/contracts/test/v0.8/dev/ArbitrumCrossDomainGovernor.test.ts:117:45-120:8: `.interface.encodeFunctionData(
        'setGreeting',
        [newGreeting],
      )`
$DIR/contracts/test/v0.8/dev/ArbitrumCrossDomainGovernor.test.ts:121:7-123:51: `await governor
        .connect(crossdomainMessenger)
        .forward(greeter.address, setGreetingData)`
$DIR/contracts/test/v0.8/dev/ArbitrumCrossDomainGovernor.test.ts:121:21-122:39: `
        .connect(crossdomainMessenger)`
$DIR/contracts/test/v0.8/dev/ArbitrumCrossDomainGovernor.test.ts:122:39-123:51: `
        .forward(greeter.address, setGreetingData)`
$DIR/contracts/test/v0.8/dev/ArbitrumCrossDomainGovernor.test.ts:125:44-125:55: `.greeting()`
$DIR/contracts/test/v0.8/dev/ArbitrumCrossDomainGovernor.test.ts:131:45-134:8: `.interface.encodeFunctionData(
        'setGreeting',
        [newGreeting],
      )`
$DIR/contracts/test/v0.8/dev/ArbitrumCrossDomainGovernor.test.ts:135:7-135:78: `await governor.connect(owner).forward(greeter.address, setGreetingData)`
$DIR/contracts/test/v0.8/dev/ArbitrumCrossDomainGovernor.test.ts:135:21-135:36: `.connect(owner)`
$DIR/contracts/test/v0.8/dev/ArbitrumCrossDomainGovernor.test.ts:135:36-135:78: `.forward(greeter.address, setGreetingData)`
$DIR/contracts/test/v0.8/dev/ArbitrumCrossDomainGovernor.test.ts:137:44-137:55: `.greeting()`
$DIR/contracts/test/v0.8/dev/ArbitrumCrossDomainGovernor.test.ts:142:45-145:8: `.interface.encodeFunctionData(
        'setGreeting',
        [''],
      )`
$DIR/contracts/test/v0.8/dev/ArbitrumCrossDomainGovernor.test.ts:147:17-148:41: `
          .connect(crossdomainMessenger)`
$DIR/contracts/test/v0.8/dev/ArbitrumCrossDomainGovernor.test.ts:148:41-149:53: `
          .forward(greeter.address, setGreetingData)`
$DIR/contracts/test/v0.8/dev/ArbitrumCrossDomainGovernor.test.ts:157:17-157:35: `.connect(stranger)`
$DIR/contracts/test/v0.8/dev/ArbitrumCrossDomainGovernor.test.ts:157:35-157:76: `.forwardDelegate(multisend.address, '0x')`
$DIR/contracts/test/v0.8/dev/ArbitrumCrossDomainGovernor.test.ts:165:31-167:13: `.interface.encodeFunctionData('setGreeting', [
            'foo',
          ])`
$DIR/contracts/test/v0.8/dev/ArbitrumCrossDomainGovernor.test.ts:172:31-174:13: `.interface.encodeFunctionData('setGreeting', [
            'bar',
          ])`
$DIR/contracts/test/v0.8/dev/ArbitrumCrossDomainGovernor.test.ts:179:7-181:59: `await governor
        .connect(crossdomainMessenger)
        .forwardDelegate(multisend.address, multisendData)`
$DIR/contracts/test/v0.8/dev/ArbitrumCrossDomainGovernor.test.ts:179:21-180:39: `
        .connect(crossdomainMessenger)`
$DIR/contracts/test/v0.8/dev/ArbitrumCrossDomainGovernor.test.ts:180:39-181:59: `
        .forwardDelegate(multisend.address, multisendData)`
$DIR/contracts/test/v0.8/dev/ArbitrumCrossDomainGovernor.test.ts:183:44-183:55: `.greeting()`
$DIR/contracts/test/v0.8/dev/ArbitrumCrossDomainGovernor.test.ts:191:31-193:13: `.interface.encodeFunctionData('setGreeting', [
            'foo',
          ])`
$DIR/contracts/test/v0.8/dev/ArbitrumCrossDomainGovernor.test.ts:198:31-200:13: `.interface.encodeFunctionData('setGreeting', [
            'bar',
          ])`
$DIR/contracts/test/v0.8/dev/ArbitrumCrossDomainGovernor.test.ts:205:7-207:59: `await governor
        .connect(owner)
        .forwardDelegate(multisend.address, multisendData)`
$DIR/contracts/test/v0.8/dev/ArbitrumCrossDomainGovernor.test.ts:205:21-206:24: `
        .connect(owner)`
$DIR/contracts/test/v0.8/dev/ArbitrumCrossDomainGovernor.test.ts:206:24-207:59: `
        .forwardDelegate(multisend.address, multisendData)`
$DIR/contracts/test/v0.8/dev/ArbitrumCrossDomainGovernor.test.ts:209:44-209:55: `.greeting()`
$DIR/contracts/test/v0.8/dev/ArbitrumCrossDomainGovernor.test.ts:217:31-219:13: `.interface.encodeFunctionData('setGreeting', [
            'foo',
          ])`
$DIR/contracts/test/v0.8/dev/ArbitrumCrossDomainGovernor.test.ts:224:31-226:13: `.interface.encodeFunctionData('setGreeting', [
            '', // should revert
          ])`
$DIR/contracts/test/v0.8/dev/ArbitrumCrossDomainGovernor.test.ts:232:17-233:41: `
          .connect(crossdomainMessenger)`
$DIR/contracts/test/v0.8/dev/ArbitrumCrossDomainGovernor.test.ts:233:41-234:61: `
          .forwardDelegate(multisend.address, multisendData)`
$DIR/contracts/test/v0.8/dev/ArbitrumCrossDomainGovernor.test.ts:237:37-237:48: `.greeting()`
$DIR/contracts/test/v0.8/dev/ArbitrumCrossDomainGovernor.test.ts:243:23-243:69: `.interface.encodeFunctionData('triggerRevert')`
$DIR/contracts/test/v0.8/dev/ArbitrumCrossDomainGovernor.test.ts:245:17-246:41: `
          .connect(crossdomainMessenger)`
$DIR/contracts/test/v0.8/dev/ArbitrumCrossDomainGovernor.test.ts:246:41-247:63: `
          .forwardDelegate(greeter.address, triggerRevertData)`
$DIR/contracts/test/v0.8/dev/ArbitrumCrossDomainGovernor.test.ts:255:17-255:35: `.connect(stranger)`
$DIR/contracts/test/v0.8/dev/ArbitrumCrossDomainGovernor.test.ts:255:35-255:73: `.transferL1Ownership(stranger.address)`
$DIR/contracts/test/v0.8/dev/ArbitrumCrossDomainGovernor.test.ts:260:43-260:51: `.owner()`
$DIR/contracts/test/v0.8/dev/ArbitrumCrossDomainGovernor.test.ts:264:17-264:32: `.connect(owner)`
$DIR/contracts/test/v0.8/dev/ArbitrumCrossDomainGovernor.test.ts:264:32-264:70: `.transferL1Ownership(stranger.address)`
$DIR/contracts/test/v0.8/dev/ArbitrumCrossDomainGovernor.test.ts:269:44-269:54: `.l1Owner()`
$DIR/contracts/test/v0.8/dev/ArbitrumCrossDomainGovernor.test.ts:271:17-272:41: `
          .connect(crossdomainMessenger)`
$DIR/contracts/test/v0.8/dev/ArbitrumCrossDomainGovernor.test.ts:272:41-273:50: `
          .transferL1Ownership(newL1OwnerAddress)`
$DIR/contracts/test/v0.8/dev/ArbitrumCrossDomainGovernor.test.ts:280:44-280:54: `.l1Owner()`
$DIR/contracts/test/v0.8/dev/ArbitrumCrossDomainGovernor.test.ts:282:17-283:41: `
          .connect(crossdomainMessenger)`
$DIR/contracts/test/v0.8/dev/ArbitrumCrossDomainGovernor.test.ts:283:41-284:61: `
          .transferL1Ownership(ethers.constants.AddressZero)`
$DIR/contracts/test/v0.8/dev/ArbitrumCrossDomainGovernor.test.ts:294:17-294:47: `.connect(crossdomainMessenger)`
$DIR/contracts/test/v0.8/dev/ArbitrumCrossDomainGovernor.test.ts:294:47-294:67: `.acceptL1Ownership()`
$DIR/contracts/test/v0.8/dev/ArbitrumCrossDomainGovernor.test.ts:299:44-299:54: `.l1Owner()`
$DIR/contracts/test/v0.8/dev/ArbitrumCrossDomainGovernor.test.ts:300:7-302:48: `await governor
        .connect(crossdomainMessenger)
        .transferL1Ownership(newL1OwnerAddress)`
$DIR/contracts/test/v0.8/dev/ArbitrumCrossDomainGovernor.test.ts:300:21-301:39: `
        .connect(crossdomainMessenger)`
$DIR/contracts/test/v0.8/dev/ArbitrumCrossDomainGovernor.test.ts:301:39-302:48: `
        .transferL1Ownership(newL1OwnerAddress)`
$DIR/contracts/test/v0.8/dev/ArbitrumCrossDomainGovernor.test.ts:304:17-304:55: `.connect(newOwnerCrossdomainMessenger)`
$DIR/contracts/test/v0.8/dev/ArbitrumCrossDomainGovernor.test.ts:304:55-304:75: `.acceptL1Ownership()`
$DIR/contracts/test/v0.8/dev/ArbitrumCrossDomainGovernor.test.ts:309:44-309:54: `.l1Owner()`
$DIR/contracts/test/v0.8/dev/ArbitrumSequencerUptimeFeed.test.ts:92:42-92:64: `.FLAG_L2_SEQ_OFFLINE()`
$DIR/contracts/test/v0.8/dev/ArbitrumSequencerUptimeFeed.test.ts:93:18-93:32: `.toLowerCase()`
$DIR/contracts/test/v0.8/dev/ArbitrumSequencerUptimeFeed.test.ts:171:42-171:60: `.latestTimestamp()`
$DIR/contracts/test/v0.8/dev/ArbitrumSequencerUptimeFeed.test.ts:172:8-172:20: `.add(10_000)`
$DIR/contracts/test/v0.8/dev/ArbitrumSequencerUptimeFeed.test.ts:174:49-175:30: `
        .connect(l2Messenger)`
$DIR/contracts/test/v0.8/dev/ArbitrumSequencerUptimeFeed.test.ts:175:30-176:39: `
        .updateStatus(true, timestamp)`
$DIR/contracts/test/v0.8/dev/ArbitrumSequencerUptimeFeed.test.ts:180:47-180:62: `.latestAnswer()`
$DIR/contracts/test/v0.8/dev/ArbitrumSequencerUptimeFeed.test.ts:183:39-183:49: `.sub(1000)`
$DIR/contracts/test/v0.8/dev/ArbitrumSequencerUptimeFeed.test.ts:184:7-186:45: `tx = await arbitrumSequencerUptimeFeed
        .connect(l2Messenger)
        .updateStatus(false, staleTimestamp)`
$DIR/contracts/test/v0.8/dev/ArbitrumSequencerUptimeFeed.test.ts:184:45-185:30: `
        .connect(l2Messenger)`
$DIR/contracts/test/v0.8/dev/ArbitrumSequencerUptimeFeed.test.ts:185:30-186:45: `
        .updateStatus(false, staleTimestamp)`
$DIR/contracts/test/v0.8/dev/ArbitrumSequencerUptimeFeed.test.ts:197:42-197:60: `.latestRoundData()`
$DIR/contracts/test/v0.8/dev/ArbitrumSequencerUptimeFeed.test.ts:204:49-204:59: `.add(1000)`
$DIR/contracts/test/v0.8/dev/ArbitrumSequencerUptimeFeed.test.ts:205:7-208:8: `await arbitrumSequencerUptimeFeed
        .connect(l2Messenger)
        .updateStatus(true, timestamp)
      ;`
$DIR/contracts/test/v0.8/dev/ArbitrumSequencerUptimeFeed.test.ts:205:40-206:30: `
        .connect(l2Messenger)`
$DIR/contracts/test/v0.8/dev/ArbitrumSequencerUptimeFeed.test.ts:206:30-207:39: `
        .updateStatus(true, timestamp)`
$DIR/contracts/test/v0.8/dev/ArbitrumSequencerUptimeFeed.test.ts:208:8-209:58: `[roundId, answer, startedAt, updatedAt, answeredInRound] =
        await arbitrumSequencerUptimeFeed.getRoundData(2)`
$DIR/contracts/test/v0.8/dev/ArbitrumSequencerUptimeFeed.test.ts:209:42-209:58: `.getRoundData(2)`
$DIR/contracts/test/v0.8/dev/ArbitrumSequencerUptimeFeed.test.ts:217:8-218:58: `[roundId, answer, startedAt, updatedAt, answeredInRound] =
        await arbitrumSequencerUptimeFeed.getRoundData(1)`
$DIR/contracts/test/v0.8/dev/ArbitrumSequencerUptimeFeed.test.ts:218:42-218:58: `.getRoundData(1)`
$DIR/contracts/test/v0.8/dev/ArbitrumSequencerUptimeFeed.test.ts:225:47-225:63: `.getRoundData(2)`
$DIR/contracts/test/v0.8/dev/ArbitrumSequencerUptimeFeed.test.ts:232:42-232:58: `.getRoundData(2)`
$DIR/contracts/test/v0.8/dev/ArbitrumSequencerUptimeFeed.test.ts:244:47-244:62: `.checkEnabled()`
$DIR/contracts/test/v0.8/dev/ArbitrumSequencerUptimeFeed.test.ts:246:42-249:10: `.hasAccess(
          uptimeFeedConsumer.address,
          '0x00',
        )`
$DIR/contracts/test/v0.8/dev/ArbitrumSequencerUptimeFeed.test.ts:253:38-253:53: `.latestAnswer()`
$DIR/contracts/test/v0.8/dev/ArbitrumSequencerUptimeFeed.test.ts:256:38-256:56: `.latestRoundData()`
$DIR/contracts/test/v0.8/dev/ArbitrumSequencerUptimeFeed.test.ts:263:7-263:78: `await arbitrumSequencerUptimeFeed.addAccess(uptimeFeedConsumer.address)`
$DIR/contracts/test/v0.8/dev/ArbitrumSequencerUptimeFeed.test.ts:263:40-263:78: `.addAccess(uptimeFeedConsumer.address)`
$DIR/contracts/test/v0.8/dev/ArbitrumSequencerUptimeFeed.test.ts:265:47-265:62: `.checkEnabled()`
$DIR/contracts/test/v0.8/dev/ArbitrumSequencerUptimeFeed.test.ts:267:42-270:10: `.hasAccess(
          uptimeFeedConsumer.address,
          '0x00',
        )`
$DIR/contracts/test/v0.8/dev/ArbitrumSequencerUptimeFeed.test.ts:274:38-274:53: `.latestAnswer()`
$DIR/contracts/test/v0.8/dev/ArbitrumSequencerUptimeFeed.test.ts:275:57-275:75: `.latestRoundData()`
$DIR/contracts/test/v0.8/dev/ArbitrumSequencerUptimeFeed.test.ts:284:47-284:62: `.latestAnswer()`
$DIR/contracts/test/v0.8/dev/ArbitrumSequencerUptimeFeed.test.ts:285:56-285:74: `.latestTimestamp()`
$DIR/contracts/test/v0.8/dev/ArbitrumSequencerUptimeFeed.test.ts:288:7-288:38: `timestamp = timestamp.add(1000)`
$DIR/contracts/test/v0.8/dev/ArbitrumSequencerUptimeFeed.test.ts:288:28-288:38: `.add(1000)`
$DIR/contracts/test/v0.8/dev/ArbitrumSequencerUptimeFeed.test.ts:289:60-290:30: `
        .connect(l2Messenger)`
$DIR/contracts/test/v0.8/dev/ArbitrumSequencerUptimeFeed.test.ts:290:30-291:40: `
        .updateStatus(false, timestamp)`
$DIR/contracts/test/v0.8/dev/ArbitrumSequencerUptimeFeed.test.ts:292:43-292:51: `.wait(1)`
$DIR/contracts/test/v0.8/dev/ArbitrumSequencerUptimeFeed.test.ts:294:47-294:62: `.latestAnswer()`
$DIR/contracts/test/v0.8/dev/ArbitrumSequencerUptimeFeed.test.ts:295:24-295:53: `.cumulativeGasUsed.toNumber()`
$DIR/contracts/test/v0.8/dev/ArbitrumSequencerUptimeFeed.test.ts:301:7-301:38: `timestamp = timestamp.add(1000)`
$DIR/contracts/test/v0.8/dev/ArbitrumSequencerUptimeFeed.test.ts:301:28-301:38: `.add(1000)`
$DIR/contracts/test/v0.8/dev/ArbitrumSequencerUptimeFeed.test.ts:302:58-303:30: `
        .connect(l2Messenger)`
$DIR/contracts/test/v0.8/dev/ArbitrumSequencerUptimeFeed.test.ts:303:30-304:39: `
        .updateStatus(true, timestamp)`
$DIR/contracts/test/v0.8/dev/ArbitrumSequencerUptimeFeed.test.ts:305:39-305:47: `.wait(1)`
$DIR/contracts/test/v0.8/dev/ArbitrumSequencerUptimeFeed.test.ts:307:47-307:62: `.latestAnswer()`
$DIR/contracts/test/v0.8/dev/ArbitrumSequencerUptimeFeed.test.ts:308:22-308:51: `.cumulativeGasUsed.toNumber()`
$DIR/contracts/test/v0.8/dev/ArbitrumSequencerUptimeFeed.test.ts:326:38-330:10: `.sendTransaction(
          await arbitrumSequencerUptimeFeed
            .connect(l2Messenger)
            .populateTransaction.getRoundData(1),
        )`
$DIR/contracts/test/v0.8/dev/ArbitrumSequencerUptimeFeed.test.ts:327:44-328:34: `
            .connect(l2Messenger)`
$DIR/contracts/test/v0.8/dev/ArbitrumSequencerUptimeFeed.test.ts:328:34-329:49: `
            .populateTransaction.getRoundData(1)`
$DIR/contracts/test/v0.8/dev/ArbitrumSequencerUptimeFeed.test.ts:331:29-331:37: `.wait(1)`
$DIR/contracts/test/v0.8/dev/ArbitrumSequencerUptimeFeed.test.ts:332:18-332:47: `.cumulativeGasUsed.toNumber()`
$DIR/contracts/test/v0.8/dev/ArbitrumSequencerUptimeFeed.test.ts:339:38-343:10: `.sendTransaction(
          await arbitrumSequencerUptimeFeed
            .connect(l2Messenger)
            .populateTransaction.latestRoundData(),
        )`
$DIR/contracts/test/v0.8/dev/ArbitrumSequencerUptimeFeed.test.ts:340:44-341:34: `
            .connect(l2Messenger)`
$DIR/contracts/test/v0.8/dev/ArbitrumSequencerUptimeFeed.test.ts:341:34-342:51: `
            .populateTransaction.latestRoundData()`
$DIR/contracts/test/v0.8/dev/ArbitrumSequencerUptimeFeed.test.ts:344:29-344:37: `.wait(1)`
$DIR/contracts/test/v0.8/dev/ArbitrumSequencerUptimeFeed.test.ts:345:18-345:47: `.cumulativeGasUsed.toNumber()`
$DIR/contracts/test/v0.8/dev/ArbitrumSequencerUptimeFeed.test.ts:352:38-356:10: `.sendTransaction(
          await arbitrumSequencerUptimeFeed
            .connect(l2Messenger)
            .populateTransaction.latestAnswer(),
        )`
$DIR/contracts/test/v0.8/dev/ArbitrumSequencerUptimeFeed.test.ts:353:44-354:34: `
            .connect(l2Messenger)`
$DIR/contracts/test/v0.8/dev/ArbitrumSequencerUptimeFeed.test.ts:354:34-355:48: `
            .populateTransaction.latestAnswer()`
$DIR/contracts/test/v0.8/dev/ArbitrumSequencerUptimeFeed.test.ts:357:29-357:37: `.wait(1)`
$DIR/contracts/test/v0.8/dev/ArbitrumSequencerUptimeFeed.test.ts:358:18-358:47: `.cumulativeGasUsed.toNumber()`
$DIR/contracts/test/v0.8/dev/ArbitrumSequencerUptimeFeed.test.ts:365:38-369:10: `.sendTransaction(
          await arbitrumSequencerUptimeFeed
            .connect(l2Messenger)
            .populateTransaction.latestTimestamp(),
        )`
$DIR/contracts/test/v0.8/dev/ArbitrumSequencerUptimeFeed.test.ts:366:44-367:34: `
            .connect(l2Messenger)`
$DIR/contracts/test/v0.8/dev/ArbitrumSequencerUptimeFeed.test.ts:367:34-368:51: `
            .populateTransaction.latestTimestamp()`
$DIR/contracts/test/v0.8/dev/ArbitrumSequencerUptimeFeed.test.ts:370:29-370:37: `.wait(1)`
$DIR/contracts/test/v0.8/dev/ArbitrumSequencerUptimeFeed.test.ts:371:18-371:47: `.cumulativeGasUsed.toNumber()`
$DIR/contracts/test/v0.8/dev/ArbitrumSequencerUptimeFeed.test.ts:378:38-382:10: `.sendTransaction(
          await arbitrumSequencerUptimeFeed
            .connect(l2Messenger)
            .populateTransaction.latestRound(),
        )`
$DIR/contracts/test/v0.8/dev/ArbitrumSequencerUptimeFeed.test.ts:379:44-380:34: `
            .connect(l2Messenger)`
$DIR/contracts/test/v0.8/dev/ArbitrumSequencerUptimeFeed.test.ts:380:34-381:47: `
            .populateTransaction.latestRound()`
$DIR/contracts/test/v0.8/dev/ArbitrumSequencerUptimeFeed.test.ts:383:29-383:37: `.wait(1)`
$DIR/contracts/test/v0.8/dev/ArbitrumSequencerUptimeFeed.test.ts:384:18-384:47: `.cumulativeGasUsed.toNumber()`
$DIR/contracts/test/v0.8/dev/ArbitrumSequencerUptimeFeed.test.ts:391:38-395:10: `.sendTransaction(
          await arbitrumSequencerUptimeFeed
            .connect(l2Messenger)
            .populateTransaction.getAnswer(1),
        )`
$DIR/contracts/test/v0.8/dev/ArbitrumSequencerUptimeFeed.test.ts:392:44-393:34: `
            .connect(l2Messenger)`
$DIR/contracts/test/v0.8/dev/ArbitrumSequencerUptimeFeed.test.ts:393:34-394:46: `
            .populateTransaction.getAnswer(1)`
$DIR/contracts/test/v0.8/dev/ArbitrumSequencerUptimeFeed.test.ts:396:29-396:37: `.wait(1)`
$DIR/contracts/test/v0.8/dev/ArbitrumSequencerUptimeFeed.test.ts:397:18-397:47: `.cumulativeGasUsed.toNumber()`
$DIR/contracts/test/v0.8/dev/ArbitrumSequencerUptimeFeed.test.ts:404:38-408:10: `.sendTransaction(
          await arbitrumSequencerUptimeFeed
            .connect(l2Messenger)
            .populateTransaction.getTimestamp(1),
        )`
$DIR/contracts/test/v0.8/dev/ArbitrumSequencerUptimeFeed.test.ts:405:44-406:34: `
            .connect(l2Messenger)`
$DIR/contracts/test/v0.8/dev/ArbitrumSequencerUptimeFeed.test.ts:406:34-407:49: `
            .populateTransaction.getTimestamp(1)`
$DIR/contracts/test/v0.8/dev/ArbitrumSequencerUptimeFeed.test.ts:409:29-409:37: `.wait(1)`
$DIR/contracts/test/v0.8/dev/ArbitrumSequencerUptimeFeed.test.ts:410:18-410:47: `.cumulativeGasUsed.toNumber()`
$DIR/contracts/test/v0.8/dev/ArbitrumValidator.test.ts:108:7-108:62: `await arbitrumValidator.addAccess(eoaValidator.address)`
$DIR/contracts/test/v0.8/dev/ArbitrumValidator.test.ts:108:30-108:62: `.addAccess(eoaValidator.address)`
$DIR/contracts/test/v0.8/dev/ArbitrumValidator.test.ts:110:23-110:47: `.ceil(Date.now() / 1000)`
$DIR/contracts/test/v0.8/dev/ArbitrumValidator.test.ts:110:33-110:39: `.now()`
$DIR/contracts/test/v0.8/dev/ArbitrumValidator.test.ts:111:7-111:69: `await ethers.provider.send('evm_setNextBlockTimestamp', [now])`
$DIR/contracts/test/v0.8/dev/ArbitrumValidator.test.ts:111:19-111:69: `.provider.send('evm_setNextBlockTimestamp', [now])`
$DIR/contracts/test/v0.8/dev/ArbitrumValidator.test.ts:113:47-116:10: `.interface.encodeFunctionData(
          'updateStatus',
          [true, now],
        )`
$DIR/contracts/test/v0.8/dev/ArbitrumValidator.test.ts:117:37-117:59: `.connect(eoaValidator)`
$DIR/contracts/test/v0.8/dev/ArbitrumValidator.test.ts:117:59-117:80: `.validate(0, 0, 1, 1)`
$DIR/contracts/test/v0.8/dev/AuthorizedOriginReceiver.test.ts:30:35-30:54: `.Carol.getAddress()`
$DIR/contracts/test/v0.8/dev/AuthorizedOriginReceiver.test.ts:31:35-31:54: `.Nancy.getAddress()`
$DIR/contracts/test/v0.8/dev/AuthorizedOriginReceiver.test.ts:33:28-33:65: `.addAuthorizedSenders([addr1, addr2])`
$DIR/contracts/test/v0.8/dev/AuthorizedOriginReceiver.test.ts:36:37-36:71: `.callStatic.getAuthorizedSenders()`
$DIR/contracts/test/v0.8/dev/AuthorizedOriginReceiver.test.ts:42:35-42:56: `.Default.getAddress()`
$DIR/contracts/test/v0.8/dev/AuthorizedOriginReceiver.test.ts:43:35-43:54: `.Carol.getAddress()`
$DIR/contracts/test/v0.8/dev/AuthorizedOriginReceiver.test.ts:44:35-44:54: `.Nancy.getAddress()`
$DIR/contracts/test/v0.8/dev/AuthorizedOriginReceiver.test.ts:46:28-46:65: `.addAuthorizedSenders([addr1, addr2])`
$DIR/contracts/test/v0.8/dev/AuthorizedOriginReceiver.test.ts:52:28-52:53: `.addAuthorizedSenders([])`
$DIR/contracts/test/v0.8/dev/AuthorizedOriginReceiver.test.ts:59:35-59:54: `.Carol.getAddress()`
$DIR/contracts/test/v0.8/dev/AuthorizedOriginReceiver.test.ts:60:35-60:54: `.Nancy.getAddress()`
$DIR/contracts/test/v0.8/dev/AuthorizedOriginReceiver.test.ts:61:35-61:53: `.Neil.getAddress()`
$DIR/contracts/test/v0.8/dev/AuthorizedOriginReceiver.test.ts:62:35-62:52: `.Ned.getAddress()`
$DIR/contracts/test/v0.8/dev/AuthorizedOriginReceiver.test.ts:64:28-64:65: `.addAuthorizedSenders([addr1, addr2])`
$DIR/contracts/test/v0.8/dev/AuthorizedOriginReceiver.test.ts:67:28-67:65: `.addAuthorizedSenders([addr3, addr4])`
$DIR/contracts/test/v0.8/dev/AuthorizedOriginReceiver.test.ts:70:37-70:71: `.callStatic.getAuthorizedSenders()`
$DIR/contracts/test/v0.8/dev/AuthorizedOriginReceiver.test.ts:76:35-76:54: `.Carol.getAddress()`
$DIR/contracts/test/v0.8/dev/AuthorizedOriginReceiver.test.ts:77:35-77:54: `.Nancy.getAddress()`
$DIR/contracts/test/v0.8/dev/AuthorizedOriginReceiver.test.ts:78:35-78:53: `.Neil.getAddress()`
$DIR/contracts/test/v0.8/dev/AuthorizedOriginReceiver.test.ts:80:28-80:65: `.addAuthorizedSenders([addr1, addr2])`
$DIR/contracts/test/v0.8/dev/AuthorizedOriginReceiver.test.ts:83:28-83:65: `.addAuthorizedSenders([addr2, addr3])`
$DIR/contracts/test/v0.8/dev/AuthorizedOriginReceiver.test.ts:86:37-86:71: `.callStatic.getAuthorizedSenders()`
$DIR/contracts/test/v0.8/dev/AuthorizedOriginReceiver.test.ts:92:35-92:54: `.Carol.getAddress()`
$DIR/contracts/test/v0.8/dev/AuthorizedOriginReceiver.test.ts:93:35-93:54: `.Nancy.getAddress()`
$DIR/contracts/test/v0.8/dev/AuthorizedOriginReceiver.test.ts:95:28-95:65: `.addAuthorizedSenders([addr1, addr2])`
$DIR/contracts/test/v0.8/dev/AuthorizedOriginReceiver.test.ts:98:37-98:71: `.callStatic.getAuthorizedSenders()`
$DIR/contracts/test/v0.8/dev/AuthorizedOriginReceiver.test.ts:101:28-101:68: `.removeAuthorizedSenders([addr1, addr2])`
$DIR/contracts/test/v0.8/dev/AuthorizedOriginReceiver.test.ts:104:23-104:57: `.callStatic.getAuthorizedSenders()`
$DIR/contracts/test/v0.8/dev/AuthorizedOriginReceiver.test.ts:110:35-110:54: `.Carol.getAddress()`
$DIR/contracts/test/v0.8/dev/AuthorizedOriginReceiver.test.ts:111:35-111:54: `.Nancy.getAddress()`
$DIR/contracts/test/v0.8/dev/AuthorizedOriginReceiver.test.ts:113:28-113:65: `.addAuthorizedSenders([addr1, addr2])`
$DIR/contracts/test/v0.8/dev/AuthorizedOriginReceiver.test.ts:116:37-116:71: `.callStatic.getAuthorizedSenders()`
$DIR/contracts/test/v0.8/dev/AuthorizedOriginReceiver.test.ts:122:35-122:54: `.Carol.getAddress()`
$DIR/contracts/test/v0.8/dev/AuthorizedOriginReceiver.test.ts:123:35-123:54: `.Nancy.getAddress()`
$DIR/contracts/test/v0.8/dev/AuthorizedOriginReceiver.test.ts:125:28-125:58: `.addAuthorizedSenders([addr1])`
$DIR/contracts/test/v0.8/dev/AuthorizedOriginReceiver.test.ts:127:28-127:65: `.callStatic.isAuthorizedSender(addr1)`
$DIR/contracts/test/v0.8/dev/AuthorizedOriginReceiver.test.ts:130:28-130:65: `.callStatic.isAuthorizedSender(addr2)`
$DIR/contracts/test/v0.8/dev/AuthorizedOriginReceiver.test.ts:139:17-139:50: `.verifyValidateAuthorizedSender()`
$DIR/contracts/test/v0.8/dev/AuthorizedOriginReceiver.test.ts:147:17-150:11: `.addAuthorizedSenders([
          await personas.Carol.getAddress(),
          await personas.Nancy.getAddress(),
        ])`
$DIR/contracts/test/v0.8/dev/AuthorizedOriginReceiver.test.ts:148:25-148:44: `.Carol.getAddress()`
$DIR/contracts/test/v0.8/dev/AuthorizedOriginReceiver.test.ts:149:25-149:44: `.Nancy.getAddress()`
$DIR/contracts/test/v0.8/dev/AuthorizedOriginReceiver.test.ts:154:23-155:35: `
          .connect(personas.Carol)`
$DIR/contracts/test/v0.8/dev/AuthorizedOriginReceiver.test.ts:155:35-156:55: `
          .callStatic.verifyValidateAuthorizedSender()`
$DIR/contracts/test/v0.8/dev/AuthorizedOriginReceiver.test.ts:159:23-160:35: `
          .connect(personas.Nancy)`
$DIR/contracts/test/v0.8/dev/AuthorizedOriginReceiver.test.ts:160:35-161:55: `
          .callStatic.verifyValidateAuthorizedSender()`
$DIR/contracts/test/v0.8/dev/AuthorizedOriginReceiver.test.ts:164:17-164:40: `.connect(personas.Neil)`
$DIR/contracts/test/v0.8/dev/AuthorizedOriginReceiver.test.ts:164:40-164:73: `.verifyValidateAuthorizedSender()`
$DIR/contracts/test/v0.8/dev/AuthorizedOriginReceiver.test.ts:171:28-171:61: `.changeSetAuthorizedSender(false)`
$DIR/contracts/test/v0.8/dev/AuthorizedOriginReceiver.test.ts:174:17-177:11: `.addAuthorizedSenders([
          await personas.Carol.getAddress(),
          await personas.Nancy.getAddress(),
        ])`
$DIR/contracts/test/v0.8/dev/AuthorizedOriginReceiver.test.ts:175:25-175:44: `.Carol.getAddress()`
$DIR/contracts/test/v0.8/dev/AuthorizedOriginReceiver.test.ts:176:25-176:44: `.Nancy.getAddress()`
$DIR/contracts/test/v0.8/dev/AuthorizedReceiver.test.ts:30:35-30:54: `.Carol.getAddress()`
$DIR/contracts/test/v0.8/dev/AuthorizedReceiver.test.ts:31:35-31:54: `.Nancy.getAddress()`
$DIR/contracts/test/v0.8/dev/AuthorizedReceiver.test.ts:33:28-33:65: `.setAuthorizedSenders([addr1, addr2])`
$DIR/contracts/test/v0.8/dev/AuthorizedReceiver.test.ts:36:37-36:71: `.callStatic.getAuthorizedSenders()`
$DIR/contracts/test/v0.8/dev/AuthorizedReceiver.test.ts:42:35-42:56: `.Default.getAddress()`
$DIR/contracts/test/v0.8/dev/AuthorizedReceiver.test.ts:43:35-43:54: `.Carol.getAddress()`
$DIR/contracts/test/v0.8/dev/AuthorizedReceiver.test.ts:44:35-44:54: `.Nancy.getAddress()`
$DIR/contracts/test/v0.8/dev/AuthorizedReceiver.test.ts:46:28-46:65: `.setAuthorizedSenders([addr1, addr2])`
$DIR/contracts/test/v0.8/dev/AuthorizedReceiver.test.ts:52:28-52:53: `.setAuthorizedSenders([])`
$DIR/contracts/test/v0.8/dev/AuthorizedReceiver.test.ts:59:35-59:54: `.Carol.getAddress()`
$DIR/contracts/test/v0.8/dev/AuthorizedReceiver.test.ts:60:35-60:54: `.Nancy.getAddress()`
$DIR/contracts/test/v0.8/dev/AuthorizedReceiver.test.ts:61:35-61:53: `.Neil.getAddress()`
$DIR/contracts/test/v0.8/dev/AuthorizedReceiver.test.ts:62:35-62:52: `.Ned.getAddress()`
$DIR/contracts/test/v0.8/dev/AuthorizedReceiver.test.ts:64:28-64:65: `.setAuthorizedSenders([addr1, addr2])`
$DIR/contracts/test/v0.8/dev/AuthorizedReceiver.test.ts:67:28-67:65: `.setAuthorizedSenders([addr3, addr4])`
$DIR/contracts/test/v0.8/dev/AuthorizedReceiver.test.ts:70:37-70:71: `.callStatic.getAuthorizedSenders()`
$DIR/contracts/test/v0.8/dev/AuthorizedReceiver.test.ts:76:35-76:54: `.Carol.getAddress()`
$DIR/contracts/test/v0.8/dev/AuthorizedReceiver.test.ts:77:35-77:54: `.Nancy.getAddress()`
$DIR/contracts/test/v0.8/dev/AuthorizedReceiver.test.ts:79:28-79:58: `.setAuthorizedSenders([addr1])`
$DIR/contracts/test/v0.8/dev/AuthorizedReceiver.test.ts:81:28-81:65: `.callStatic.isAuthorizedSender(addr1)`
$DIR/contracts/test/v0.8/dev/AuthorizedReceiver.test.ts:84:28-84:65: `.callStatic.isAuthorizedSender(addr2)`
$DIR/contracts/test/v0.8/dev/AuthorizedReceiver.test.ts:93:17-93:50: `.verifyValidateAuthorizedSender()`
$DIR/contracts/test/v0.8/dev/AuthorizedReceiver.test.ts:101:17-104:11: `.setAuthorizedSenders([
          await personas.Carol.getAddress(),
          await personas.Nancy.getAddress(),
        ])`
$DIR/contracts/test/v0.8/dev/AuthorizedReceiver.test.ts:102:25-102:44: `.Carol.getAddress()`
$DIR/contracts/test/v0.8/dev/AuthorizedReceiver.test.ts:103:25-103:44: `.Nancy.getAddress()`
$DIR/contracts/test/v0.8/dev/AuthorizedReceiver.test.ts:108:23-109:35: `
          .connect(personas.Carol)`
$DIR/contracts/test/v0.8/dev/AuthorizedReceiver.test.ts:109:35-110:55: `
          .callStatic.verifyValidateAuthorizedSender()`
$DIR/contracts/test/v0.8/dev/AuthorizedReceiver.test.ts:113:23-114:35: `
          .connect(personas.Nancy)`
$DIR/contracts/test/v0.8/dev/AuthorizedReceiver.test.ts:114:35-115:55: `
          .callStatic.verifyValidateAuthorizedSender()`
$DIR/contracts/test/v0.8/dev/AuthorizedReceiver.test.ts:118:17-118:40: `.connect(personas.Neil)`
$DIR/contracts/test/v0.8/dev/AuthorizedReceiver.test.ts:118:40-118:73: `.verifyValidateAuthorizedSender()`
$DIR/contracts/test/v0.8/dev/AuthorizedReceiver.test.ts:125:28-125:61: `.changeSetAuthorizedSender(false)`
$DIR/contracts/test/v0.8/dev/AuthorizedReceiver.test.ts:128:17-131:11: `.setAuthorizedSenders([
          await personas.Carol.getAddress(),
          await personas.Nancy.getAddress(),
        ])`
$DIR/contracts/test/v0.8/dev/AuthorizedReceiver.test.ts:129:25-129:44: `.Carol.getAddress()`
$DIR/contracts/test/v0.8/dev/AuthorizedReceiver.test.ts:130:25-130:44: `.Nancy.getAddress()`
$DIR/contracts/test/v0.8/dev/BatchBlockhashStore.test.ts:41:39-41:76: `.provider.send('eth_blockNumber', [])`
$DIR/contracts/test/v0.8/dev/BatchBlockhashStore.test.ts:44:7-44:73: `await batchBHS.connect(owner).store(range(numBlocks, bottomBlock))`
$DIR/contracts/test/v0.8/dev/BatchBlockhashStore.test.ts:44:21-44:36: `.connect(owner)`
$DIR/contracts/test/v0.8/dev/BatchBlockhashStore.test.ts:44:36-44:73: `.store(range(numBlocks, bottomBlock))`
$DIR/contracts/test/v0.8/dev/BatchBlockhashStore.test.ts:48:9-48:51: `await ethers.provider.send('evm_mine', [])`
$DIR/contracts/test/v0.8/dev/BatchBlockhashStore.test.ts:48:21-48:51: `.provider.send('evm_mine', [])`
$DIR/contracts/test/v0.8/dev/BatchBlockhashStore.test.ts:53:46-53:61: `.connect(owner)`
$DIR/contracts/test/v0.8/dev/BatchBlockhashStore.test.ts:53:61-53:77: `.getBlockhash(i)`
$DIR/contracts/test/v0.8/dev/BatchBlockhashStore.test.ts:54:41-54:62: `.provider.getBlock(i)`
$DIR/contracts/test/v0.8/dev/BatchBlockhashStore.test.ts:63:9-63:51: `await ethers.provider.send('evm_mine', [])`
$DIR/contracts/test/v0.8/dev/BatchBlockhashStore.test.ts:63:21-63:51: `.provider.send('evm_mine', [])`
$DIR/contracts/test/v0.8/dev/BatchBlockhashStore.test.ts:67:22-67:59: `.provider.send('eth_blockNumber', [])`
$DIR/contracts/test/v0.8/dev/BatchBlockhashStore.test.ts:70:7-70:68: `await batchBHS.connect(owner).store([1, 2, 3, gettableBlock])`
$DIR/contracts/test/v0.8/dev/BatchBlockhashStore.test.ts:70:21-70:36: `.connect(owner)`
$DIR/contracts/test/v0.8/dev/BatchBlockhashStore.test.ts:70:36-70:68: `.store([1, 2, 3, gettableBlock])`
$DIR/contracts/test/v0.8/dev/BatchBlockhashStore.test.ts:72:7-72:49: `await ethers.provider.send('evm_mine', [])`
$DIR/contracts/test/v0.8/dev/BatchBlockhashStore.test.ts:72:19-72:49: `.provider.send('evm_mine', [])`
$DIR/contracts/test/v0.8/dev/BatchBlockhashStore.test.ts:75:44-76:24: `
        .connect(owner)`
$DIR/contracts/test/v0.8/dev/BatchBlockhashStore.test.ts:76:24-77:37: `
        .getBlockhash(gettableBlock)`
$DIR/contracts/test/v0.8/dev/BatchBlockhashStore.test.ts:78:39-78:72: `.provider.getBlock(gettableBlock)`
$DIR/contracts/test/v0.8/dev/BatchBlockhashStore.test.ts:84:25-84:40: `.connect(owner)`
$DIR/contracts/test/v0.8/dev/BatchBlockhashStore.test.ts:84:40-84:56: `.getBlockhash(i)`
$DIR/contracts/test/v0.8/dev/BatchBlockhashStore.test.ts:93:39-93:76: `.provider.send('eth_blockNumber', [])`
$DIR/contracts/test/v0.8/dev/BatchBlockhashStore.test.ts:96:7-96:73: `await batchBHS.connect(owner).store(range(numBlocks, bottomBlock))`
$DIR/contracts/test/v0.8/dev/BatchBlockhashStore.test.ts:96:21-96:36: `.connect(owner)`
$DIR/contracts/test/v0.8/dev/BatchBlockhashStore.test.ts:96:36-96:73: `.store(range(numBlocks, bottomBlock))`
$DIR/contracts/test/v0.8/dev/BatchBlockhashStore.test.ts:100:9-100:51: `await ethers.provider.send('evm_mine', [])`
$DIR/contracts/test/v0.8/dev/BatchBlockhashStore.test.ts:100:21-100:51: `.provider.send('evm_mine', [])`
$DIR/contracts/test/v0.8/dev/BatchBlockhashStore.test.ts:104:47-105:24: `
        .connect(owner)`
$DIR/contracts/test/v0.8/dev/BatchBlockhashStore.test.ts:105:24-106:55: `
        .getBlockhashes(range(numBlocks, bottomBlock))`
$DIR/contracts/test/v0.8/dev/BatchBlockhashStore.test.ts:109:35-112:11: `.provider.send('eth_getBlockByNumber', [
          '0x' + i.toString(16),
          false,
        ])`
$DIR/contracts/test/v0.8/dev/BatchBlockhashStore.test.ts:110:19-110:32: `.toString(16)`
$DIR/contracts/test/v0.8/dev/BatchBlockhashStore.test.ts:113:28-113:45: `.push(block.hash)`
$DIR/contracts/test/v0.8/dev/BatchBlockhashStore.test.ts:119:39-119:76: `.provider.send('eth_blockNumber', [])`
$DIR/contracts/test/v0.8/dev/BatchBlockhashStore.test.ts:122:41-123:24: `
        .connect(owner)`
$DIR/contracts/test/v0.8/dev/BatchBlockhashStore.test.ts:123:24-124:55: `
        .getBlockhashes(range(numBlocks, bottomBlock))`
$DIR/contracts/test/v0.8/dev/BatchBlockhashStore.test.ts:137:39-137:76: `.provider.send('eth_blockNumber', [])`
$DIR/contracts/test/v0.8/dev/BatchBlockhashStore.test.ts:138:7-138:57: `await batchBHS.connect(owner).store([latestBlock])`
$DIR/contracts/test/v0.8/dev/BatchBlockhashStore.test.ts:138:21-138:36: `.connect(owner)`
$DIR/contracts/test/v0.8/dev/BatchBlockhashStore.test.ts:138:36-138:57: `.store([latestBlock])`
$DIR/contracts/test/v0.8/dev/BatchBlockhashStore.test.ts:139:7-139:49: `await ethers.provider.send('evm_mine', [])`
$DIR/contracts/test/v0.8/dev/BatchBlockhashStore.test.ts:139:19-139:49: `.provider.send('evm_mine', [])`
$DIR/contracts/test/v0.8/dev/BatchBlockhashStore.test.ts:146:8-146:18: `.reverse()`
$DIR/contracts/test/v0.8/dev/BatchBlockhashStore.test.ts:150:35-153:11: `.provider.send('eth_getBlockByNumber', [
          '0x' + (i + 1).toString(16),
          false,
        ])`
$DIR/contracts/test/v0.8/dev/BatchBlockhashStore.test.ts:151:25-151:38: `.toString(16)`
$DIR/contracts/test/v0.8/dev/BatchBlockhashStore.test.ts:156:34-173:11: `.encode([
          block.parentHash,
          block.sha3Uncles,
          ethers.utils.arrayify(block.miner),
          block.stateRoot,
          block.transactionsRoot,
          block.receiptsRoot,
          block.logsBloom,
          block.difficulty == '0x0' ? '0x' : block.difficulty,
          block.number,
          block.gasLimit,
          block.gasUsed == '0x0' ? '0x' : block.gasUsed,
          block.timestamp,
          block.extraData,
          block.mixHash,
          block.nonce,
          block.baseFeePerGas,
        ])`
$DIR/contracts/test/v0.8/dev/BatchBlockhashStore.test.ts:159:17-159:45: `.utils.arrayify(block.miner)`
$DIR/contracts/test/v0.8/dev/BatchBlockhashStore.test.ts:192:21-192:64: `.push('0x' + encodedHeader.toString('hex'))`
$DIR/contracts/test/v0.8/dev/BatchBlockhashStore.test.ts:192:47-192:63: `.toString('hex')`
$DIR/contracts/test/v0.8/dev/BatchBlockhashStore.test.ts:193:28-200:10: `.push(
          (
            await ethers.provider.send('eth_getBlockByNumber', [
              '0x' + i.toString(16),
              false,
            ])
          ).hash,
        )`
$DIR/contracts/test/v0.8/dev/BatchBlockhashStore.test.ts:195:25-198:15: `.provider.send('eth_getBlockByNumber', [
              '0x' + i.toString(16),
              false,
            ])`
$DIR/contracts/test/v0.8/dev/BatchBlockhashStore.test.ts:196:23-196:36: `.toString(16)`
$DIR/contracts/test/v0.8/dev/BatchBlockhashStore.test.ts:202:7-204:55: `await batchBHS
        .connect(owner)
        .storeVerifyHeader(blockNumbers, blockHeaders)`
$DIR/contracts/test/v0.8/dev/BatchBlockhashStore.test.ts:202:21-203:24: `
        .connect(owner)`
$DIR/contracts/test/v0.8/dev/BatchBlockhashStore.test.ts:203:24-204:55: `
        .storeVerifyHeader(blockNumbers, blockHeaders)`
$DIR/contracts/test/v0.8/dev/BatchBlockhashStore.test.ts:207:47-208:24: `
        .connect(owner)`
$DIR/contracts/test/v0.8/dev/BatchBlockhashStore.test.ts:208:24-209:38: `
        .getBlockhashes(blockNumbers)`
$DIR/contracts/test/v0.8/dev/BatchBlockhashStore.test.ts:217:41-217:78: `.provider.send('eth_blockNumber', [])`
$DIR/contracts/test/v0.8/dev/BatchBlockhashStore.test.ts:218:9-218:59: `await batchBHS.connect(owner).store([latestBlock])`
$DIR/contracts/test/v0.8/dev/BatchBlockhashStore.test.ts:218:23-218:38: `.connect(owner)`
$DIR/contracts/test/v0.8/dev/BatchBlockhashStore.test.ts:218:38-218:59: `.store([latestBlock])`
$DIR/contracts/test/v0.8/dev/BatchBlockhashStore.test.ts:220:9-220:51: `await ethers.provider.send('evm_mine', [])`
$DIR/contracts/test/v0.8/dev/BatchBlockhashStore.test.ts:220:21-220:51: `.provider.send('evm_mine', [])`
$DIR/contracts/test/v0.8/dev/BatchBlockhashStore.test.ts:227:10-227:20: `.reverse()`
$DIR/contracts/test/v0.8/dev/BatchBlockhashStore.test.ts:231:37-234:13: `.provider.send('eth_getBlockByNumber', [
            '0x' + (i + 1).toString(16),
            false,
          ])`
$DIR/contracts/test/v0.8/dev/BatchBlockhashStore.test.ts:232:27-232:40: `.toString(16)`
$DIR/contracts/test/v0.8/dev/BatchBlockhashStore.test.ts:235:36-252:13: `.encode([
            block.parentHash,
            block.sha3Uncles,
            ethers.utils.arrayify(block.miner),
            block.stateRoot,
            block.transactionsRoot,
            block.receiptsRoot,
            block.logsBloom,
            block.difficulty == '0x0' ? '0x' : block.difficulty,
            block.number,
            block.gasLimit,
            block.gasUsed == '0x0' ? '0x' : block.gasUsed,
            block.timestamp,
            block.extraData,
            block.mixHash,
            block.nonce,
            block.baseFeePerGas,
          ])`
$DIR/contracts/test/v0.8/dev/BatchBlockhashStore.test.ts:238:19-238:47: `.utils.arrayify(block.miner)`
$DIR/contracts/test/v0.8/dev/BatchBlockhashStore.test.ts:253:23-253:66: `.push('0x' + encodedHeader.toString('hex'))`
$DIR/contracts/test/v0.8/dev/BatchBlockhashStore.test.ts:253:49-253:65: `.toString('hex')`
$DIR/contracts/test/v0.8/dev/BatchBlockhashStore.test.ts:254:30-261:12: `.push(
            (
              await ethers.provider.send('eth_getBlockByNumber', [
                '0x' + i.toString(16),
                false,
              ])
            ).hash,
          )`
$DIR/contracts/test/v0.8/dev/BatchBlockhashStore.test.ts:256:27-259:17: `.provider.send('eth_getBlockByNumber', [
                '0x' + i.toString(16),
                false,
              ])`
$DIR/contracts/test/v0.8/dev/BatchBlockhashStore.test.ts:257:25-257:38: `.toString(16)`
$DIR/contracts/test/v0.8/dev/BatchBlockhashStore.test.ts:264:21-264:27: `.pop()`
$DIR/contracts/test/v0.8/dev/BatchBlockhashStore.test.ts:266:19-266:34: `.connect(owner)`
$DIR/contracts/test/v0.8/dev/BatchBlockhashStore.test.ts:266:34-266:80: `.storeVerifyHeader(blockNumbers, blockHeaders)`
$DIR/contracts/test/v0.8/dev/BatchBlockhashStore.test.ts:272:41-272:78: `.provider.send('eth_blockNumber', [])`
$DIR/contracts/test/v0.8/dev/BatchBlockhashStore.test.ts:273:9-273:59: `await batchBHS.connect(owner).store([latestBlock])`
$DIR/contracts/test/v0.8/dev/BatchBlockhashStore.test.ts:273:23-273:38: `.connect(owner)`
$DIR/contracts/test/v0.8/dev/BatchBlockhashStore.test.ts:273:38-273:59: `.store([latestBlock])`
$DIR/contracts/test/v0.8/dev/BatchBlockhashStore.test.ts:275:9-275:51: `await ethers.provider.send('evm_mine', [])`
$DIR/contracts/test/v0.8/dev/BatchBlockhashStore.test.ts:275:21-275:51: `.provider.send('evm_mine', [])`
$DIR/contracts/test/v0.8/dev/BatchBlockhashStore.test.ts:282:10-282:20: `.reverse()`
$DIR/contracts/test/v0.8/dev/BatchBlockhashStore.test.ts:286:37-289:13: `.provider.send('eth_getBlockByNumber', [
            '0x' + (i + 1).toString(16),
            false,
          ])`
$DIR/contracts/test/v0.8/dev/BatchBlockhashStore.test.ts:287:27-287:40: `.toString(16)`
$DIR/contracts/test/v0.8/dev/BatchBlockhashStore.test.ts:290:36-307:13: `.encode([
            block.parentHash,
            block.sha3Uncles,
            ethers.utils.arrayify(block.miner),
            block.stateRoot,
            block.transactionsRoot,
            block.receiptsRoot,
            block.logsBloom,
            block.difficulty == '0x0' ? '0x' : block.difficulty,
            block.number,
            block.gasLimit,
            block.gasUsed, // incorrect: in cases where it's 0x0 it should be 0x instead.
            block.timestamp,
            block.extraData,
            block.mixHash,
            block.nonce,
            block.baseFeePerGas,
          ])`
$DIR/contracts/test/v0.8/dev/BatchBlockhashStore.test.ts:293:19-293:47: `.utils.arrayify(block.miner)`
$DIR/contracts/test/v0.8/dev/BatchBlockhashStore.test.ts:308:23-308:66: `.push('0x' + encodedHeader.toString('hex'))`
$DIR/contracts/test/v0.8/dev/BatchBlockhashStore.test.ts:308:49-308:65: `.toString('hex')`
$DIR/contracts/test/v0.8/dev/BatchBlockhashStore.test.ts:309:30-316:12: `.push(
            (
              await ethers.provider.send('eth_getBlockByNumber', [
                '0x' + i.toString(16),
                false,
              ])
            ).hash,
          )`
$DIR/contracts/test/v0.8/dev/BatchBlockhashStore.test.ts:311:27-314:17: `.provider.send('eth_getBlockByNumber', [
                '0x' + i.toString(16),
                false,
              ])`
$DIR/contracts/test/v0.8/dev/BatchBlockhashStore.test.ts:312:25-312:38: `.toString(16)`
$DIR/contracts/test/v0.8/dev/BatchBlockhashStore.test.ts:319:19-319:34: `.connect(owner)`
$DIR/contracts/test/v0.8/dev/BatchBlockhashStore.test.ts:319:34-319:80: `.storeVerifyHeader(blockNumbers, blockHeaders)`
$DIR/contracts/test/v0.8/dev/CrossDomainOwnable.test.ts:32:37-32:47: `.l1Owner()`
$DIR/contracts/test/v0.8/dev/CrossDomainOwnable.test.ts:40:16-40:34: `.connect(stranger)`
$DIR/contracts/test/v0.8/dev/CrossDomainOwnable.test.ts:40:34-40:72: `.transferL1Ownership(stranger.address)`
$DIR/contracts/test/v0.8/dev/CrossDomainOwnable.test.ts:45:43-45:53: `.l1Owner()`
$DIR/contracts/test/v0.8/dev/CrossDomainOwnable.test.ts:46:27-46:65: `.transferL1Ownership(stranger.address)`
$DIR/contracts/test/v0.8/dev/CrossDomainOwnable.test.ts:52:43-52:53: `.l1Owner()`
$DIR/contracts/test/v0.8/dev/CrossDomainOwnable.test.ts:53:27-53:77: `.transferL1Ownership(ethers.constants.AddressZero)`
$DIR/contracts/test/v0.8/dev/CrossDomainOwnable.test.ts:62:16-62:34: `.connect(stranger)`
$DIR/contracts/test/v0.8/dev/CrossDomainOwnable.test.ts:62:34-62:54: `.acceptL1Ownership()`
$DIR/contracts/test/v0.8/dev/CrossDomainOwnable.test.ts:67:43-67:53: `.l1Owner()`
$DIR/contracts/test/v0.8/dev/CrossDomainOwnable.test.ts:68:7-68:58: `await ownable.transferL1Ownership(stranger.address)`
$DIR/contracts/test/v0.8/dev/CrossDomainOwnable.test.ts:68:20-68:58: `.transferL1Ownership(stranger.address)`
$DIR/contracts/test/v0.8/dev/CrossDomainOwnable.test.ts:69:27-69:45: `.connect(stranger)`
$DIR/contracts/test/v0.8/dev/CrossDomainOwnable.test.ts:69:45-69:65: `.acceptL1Ownership()`
$DIR/contracts/test/v0.8/dev/CrossDomainOwnable.test.ts:73:43-73:53: `.l1Owner()`
$DIR/contracts/test/v0.8/dev/DerivedPriceFeed.test.ts:22:36-22:52: `.deploy(8, 10e8)`
$DIR/contracts/test/v0.8/dev/DerivedPriceFeed.test.ts:23:37-23:52: `.deploy(8, 5e8)`
$DIR/contracts/test/v0.8/dev/DerivedPriceFeed.test.ts:25:43-29:6: `.deploy(
      base.address,
      quote.address,
      8,
    )`
$DIR/contracts/test/v0.8/dev/DerivedPriceFeed.test.ts:31:25-31:41: `.getRoundData(1)`
$DIR/contracts/test/v0.8/dev/DerivedPriceFeed.test.ts:35:36-35:52: `.deploy(8, 10e8)`
$DIR/contracts/test/v0.8/dev/DerivedPriceFeed.test.ts:36:37-36:52: `.deploy(8, 5e8)`
$DIR/contracts/test/v0.8/dev/DerivedPriceFeed.test.ts:38:43-42:6: `.deploy(
      base.address,
      quote.address,
      9,
    )`
$DIR/contracts/test/v0.8/dev/DerivedPriceFeed.test.ts:44:31-44:42: `.decimals()`
$DIR/contracts/test/v0.8/dev/DerivedPriceFeed.test.ts:49:38-49:54: `.deploy(8, 10e8)`
$DIR/contracts/test/v0.8/dev/DerivedPriceFeed.test.ts:50:39-50:54: `.deploy(8, 5e8)`
$DIR/contracts/test/v0.8/dev/DerivedPriceFeed.test.ts:52:45-56:8: `.deploy(
        base.address,
        quote.address,
        8,
      )`
$DIR/contracts/test/v0.8/dev/DerivedPriceFeed.test.ts:58:34-58:52: `.latestRoundData()`
$DIR/contracts/test/v0.8/dev/DerivedPriceFeed.test.ts:64:38-64:53: `.deploy(8, 3e8)`
$DIR/contracts/test/v0.8/dev/DerivedPriceFeed.test.ts:65:39-65:55: `.deploy(8, 15e8)`
$DIR/contracts/test/v0.8/dev/DerivedPriceFeed.test.ts:67:45-71:8: `.deploy(
        base.address,
        quote.address,
        8,
      )`
$DIR/contracts/test/v0.8/dev/DerivedPriceFeed.test.ts:73:34-73:52: `.latestRoundData()`
$DIR/contracts/test/v0.8/dev/DerivedPriceFeed.test.ts:79:38-79:54: `.deploy(8, 10e8)`
$DIR/contracts/test/v0.8/dev/DerivedPriceFeed.test.ts:80:39-80:54: `.deploy(8, 5e8)`
$DIR/contracts/test/v0.8/dev/DerivedPriceFeed.test.ts:82:45-86:8: `.deploy(
        base.address,
        quote.address,
        12,
      )`
$DIR/contracts/test/v0.8/dev/DerivedPriceFeed.test.ts:88:34-88:52: `.latestRoundData()`
$DIR/contracts/test/v0.8/dev/DerivedPriceFeed.test.ts:94:38-94:54: `.deploy(8, 10e8)`
$DIR/contracts/test/v0.8/dev/DerivedPriceFeed.test.ts:95:39-95:54: `.deploy(8, 5e8)`
$DIR/contracts/test/v0.8/dev/DerivedPriceFeed.test.ts:97:45-101:8: `.deploy(
        base.address,
        quote.address,
        6,
      )`
$DIR/contracts/test/v0.8/dev/DerivedPriceFeed.test.ts:103:34-103:52: `.latestRoundData()`
$DIR/contracts/test/v0.8/dev/DerivedPriceFeed.test.ts:109:38-112:8: `.deploy(
        16,
        BigNumber.from('100000000000000000'),
      )`
$DIR/contracts/test/v0.8/dev/DerivedPriceFeed.test.ts:111:18-111:45: `.from('100000000000000000')`
$DIR/contracts/test/v0.8/dev/DerivedPriceFeed.test.ts:113:39-113:54: `.deploy(8, 5e8)`
$DIR/contracts/test/v0.8/dev/DerivedPriceFeed.test.ts:115:45-119:8: `.deploy(
        base.address,
        quote.address,
        10,
      )`
$DIR/contracts/test/v0.8/dev/DerivedPriceFeed.test.ts:121:34-121:52: `.latestRoundData()`
$DIR/contracts/test/v0.8/dev/DerivedPriceFeed.test.ts:127:38-127:54: `.deploy(6, 10e6)`
$DIR/contracts/test/v0.8/dev/DerivedPriceFeed.test.ts:128:39-128:54: `.deploy(8, 5e8)`
$DIR/contracts/test/v0.8/dev/DerivedPriceFeed.test.ts:130:45-134:8: `.deploy(
        base.address,
        quote.address,
        10,
      )`
$DIR/contracts/test/v0.8/dev/DerivedPriceFeed.test.ts:136:34-136:52: `.latestRoundData()`
$DIR/contracts/test/v0.8/dev/Functions.test.ts:33:5-39:7: `publicAbi(ctr, [
      'closeEvent',
      'initializeRequestForInlineJavaScript',
      'addSecrets',
      'addTwoArgs',
      'addEmptyArgs',
    ])`
$DIR/contracts/test/v0.8/dev/Functions.test.ts:52:27-52:40: `.closeEvent()`
$DIR/contracts/test/v0.8/dev/Functions.test.ts:66:7-66:57: `await ctr.initializeRequestForInlineJavaScript(js)`
$DIR/contracts/test/v0.8/dev/Functions.test.ts:66:16-66:57: `.initializeRequestForInlineJavaScript(js)`
$DIR/contracts/test/v0.8/dev/Functions.test.ts:67:27-67:40: `.closeEvent()`
$DIR/contracts/test/v0.8/dev/Functions.test.ts:81:12-81:53: `.initializeRequestForInlineJavaScript('')`
$DIR/contracts/test/v0.8/dev/Functions.test.ts:90:7-90:57: `await ctr.initializeRequestForInlineJavaScript(js)`
$DIR/contracts/test/v0.8/dev/Functions.test.ts:90:16-90:57: `.initializeRequestForInlineJavaScript(js)`
$DIR/contracts/test/v0.8/dev/Functions.test.ts:91:7-91:36: `await ctr.addSecrets(secrets)`
$DIR/contracts/test/v0.8/dev/Functions.test.ts:91:16-91:36: `.addSecrets(secrets)`
$DIR/contracts/test/v0.8/dev/Functions.test.ts:92:27-92:40: `.closeEvent()`
$DIR/contracts/test/v0.8/dev/Functions.test.ts:108:7-108:57: `await ctr.initializeRequestForInlineJavaScript(js)`
$DIR/contracts/test/v0.8/dev/Functions.test.ts:108:16-108:57: `.initializeRequestForInlineJavaScript(js)`
$DIR/contracts/test/v0.8/dev/Functions.test.ts:109:23-109:40: `.addSecrets('0x')`
$DIR/contracts/test/v0.8/dev/Functions.test.ts:116:7-116:57: `await ctr.initializeRequestForInlineJavaScript(js)`
$DIR/contracts/test/v0.8/dev/Functions.test.ts:116:16-116:57: `.initializeRequestForInlineJavaScript(js)`
$DIR/contracts/test/v0.8/dev/Functions.test.ts:117:7-117:43: `await ctr.addTwoArgs('arg1', 'arg2')`
$DIR/contracts/test/v0.8/dev/Functions.test.ts:117:16-117:43: `.addTwoArgs('arg1', 'arg2')`
$DIR/contracts/test/v0.8/dev/Functions.test.ts:118:27-118:40: `.closeEvent()`
$DIR/contracts/test/v0.8/dev/Functions.test.ts:132:23-132:38: `.addEmptyArgs()`
$DIR/contracts/test/v0.8/dev/FunctionsBillingRegistry.test.ts:136:17-137:35: `
          .connect(roles.stranger)`
$DIR/contracts/test/v0.8/dev/FunctionsBillingRegistry.test.ts:137:35-145:12: `
          .setConfig(
            config.maxGasLimit,
            config.stalenessSeconds,
            config.gasAfterPaymentCalculation,
            config.weiPerUnitLink,
            config.gasOverhead,
            config.requestTimeoutSeconds,
          )`
$DIR/contracts/test/v0.8/dev/FunctionsBillingRegistry.test.ts:151:17-152:41: `
          .connect(roles.defaultAccount)`
$DIR/contracts/test/v0.8/dev/FunctionsBillingRegistry.test.ts:152:41-160:12: `
          .setConfig(
            config.maxGasLimit,
            config.stalenessSeconds,
            config.gasAfterPaymentCalculation,
            config.weiPerUnitLink,
            config.gasOverhead,
            config.requestTimeoutSeconds,
          )`
$DIR/contracts/test/v0.8/dev/FunctionsBillingRegistry.test.ts:165:7-174:10: `await registry
        .connect(roles.defaultAccount)
        .setConfig(
          config.maxGasLimit,
          config.stalenessSeconds,
          config.gasAfterPaymentCalculation,
          config.weiPerUnitLink,
          config.gasOverhead,
          config.requestTimeoutSeconds,
        )`
$DIR/contracts/test/v0.8/dev/FunctionsBillingRegistry.test.ts:165:21-166:39: `
        .connect(roles.defaultAccount)`
$DIR/contracts/test/v0.8/dev/FunctionsBillingRegistry.test.ts:166:39-174:10: `
        .setConfig(
          config.maxGasLimit,
          config.stalenessSeconds,
          config.gasAfterPaymentCalculation,
          config.weiPerUnitLink,
          config.gasOverhead,
          config.requestTimeoutSeconds,
        )`
$DIR/contracts/test/v0.8/dev/FunctionsBillingRegistry.test.ts:182:25-182:49: `.connect(roles.stranger)`
$DIR/contracts/test/v0.8/dev/FunctionsBillingRegistry.test.ts:182:49-182:61: `.getConfig()`
$DIR/contracts/test/v0.8/dev/FunctionsBillingRegistry.test.ts:197:17-197:41: `.connect(roles.stranger)`
$DIR/contracts/test/v0.8/dev/FunctionsBillingRegistry.test.ts:197:41-197:80: `.setAuthorizedSenders([oracle.address])`
$DIR/contracts/test/v0.8/dev/FunctionsBillingRegistry.test.ts:203:17-204:41: `
          .connect(roles.defaultAccount)`
$DIR/contracts/test/v0.8/dev/FunctionsBillingRegistry.test.ts:204:41-205:50: `
          .setAuthorizedSenders([oracle.address])`
$DIR/contracts/test/v0.8/dev/FunctionsBillingRegistry.test.ts:226:30-226:48: `.connect(subOwner)`
$DIR/contracts/test/v0.8/dev/FunctionsBillingRegistry.test.ts:226:48-226:69: `.createSubscription()`
$DIR/contracts/test/v0.8/dev/FunctionsBillingRegistry.test.ts:229:33-229:52: `.getSubscription(1)`
$DIR/contracts/test/v0.8/dev/FunctionsBillingRegistry.test.ts:230:17-230:36: `.balance.toString()`
$DIR/contracts/test/v0.8/dev/FunctionsBillingRegistry.test.ts:234:30-234:48: `.connect(subOwner)`
$DIR/contracts/test/v0.8/dev/FunctionsBillingRegistry.test.ts:234:48-234:69: `.createSubscription()`
$DIR/contracts/test/v0.8/dev/FunctionsBillingRegistry.test.ts:237:30-237:48: `.connect(subOwner)`
$DIR/contracts/test/v0.8/dev/FunctionsBillingRegistry.test.ts:237:48-237:69: `.createSubscription()`
$DIR/contracts/test/v0.8/dev/FunctionsBillingRegistry.test.ts:244:11-246:55: `await registry
            .connect(subOwner)
            .addConsumer(subId, randomAddressString())`
$DIR/contracts/test/v0.8/dev/FunctionsBillingRegistry.test.ts:244:25-245:31: `
            .connect(subOwner)`
$DIR/contracts/test/v0.8/dev/FunctionsBillingRegistry.test.ts:245:31-246:55: `
            .addConsumer(subId, randomAddressString())`
$DIR/contracts/test/v0.8/dev/FunctionsBillingRegistry.test.ts:249:19-249:37: `.connect(subOwner)`
$DIR/contracts/test/v0.8/dev/FunctionsBillingRegistry.test.ts:249:37-249:79: `.addConsumer(subId, randomAddressString())`
$DIR/contracts/test/v0.8/dev/FunctionsBillingRegistry.test.ts:261:19-262:37: `
            .connect(roles.stranger)`
$DIR/contracts/test/v0.8/dev/FunctionsBillingRegistry.test.ts:262:37-263:70: `
            .requestSubscriptionOwnerTransfer(subId, strangerAddress)`
$DIR/contracts/test/v0.8/dev/FunctionsBillingRegistry.test.ts:268:19-269:31: `
            .connect(subOwner)`
$DIR/contracts/test/v0.8/dev/FunctionsBillingRegistry.test.ts:269:31-270:70: `
            .requestSubscriptionOwnerTransfer(subId, strangerAddress)`
$DIR/contracts/test/v0.8/dev/FunctionsBillingRegistry.test.ts:276:19-277:31: `
            .connect(subOwner)`
$DIR/contracts/test/v0.8/dev/FunctionsBillingRegistry.test.ts:277:31-278:70: `
            .requestSubscriptionOwnerTransfer(subId, strangerAddress)`
$DIR/contracts/test/v0.8/dev/FunctionsBillingRegistry.test.ts:290:19-291:31: `
            .connect(subOwner)`
$DIR/contracts/test/v0.8/dev/FunctionsBillingRegistry.test.ts:291:31-292:57: `
            .acceptSubscriptionOwnerTransfer(1203123123)`
$DIR/contracts/test/v0.8/dev/FunctionsBillingRegistry.test.ts:297:19-298:31: `
            .connect(subOwner)`
$DIR/contracts/test/v0.8/dev/FunctionsBillingRegistry.test.ts:298:31-299:70: `
            .requestSubscriptionOwnerTransfer(subId, strangerAddress)`
$DIR/contracts/test/v0.8/dev/FunctionsBillingRegistry.test.ts:302:19-302:37: `.connect(subOwner)`
$DIR/contracts/test/v0.8/dev/FunctionsBillingRegistry.test.ts:302:37-302:76: `.acceptSubscriptionOwnerTransfer(subId)`
$DIR/contracts/test/v0.8/dev/FunctionsBillingRegistry.test.ts:307:19-308:31: `
            .connect(subOwner)`
$DIR/contracts/test/v0.8/dev/FunctionsBillingRegistry.test.ts:308:31-309:70: `
            .requestSubscriptionOwnerTransfer(subId, strangerAddress)`
$DIR/contracts/test/v0.8/dev/FunctionsBillingRegistry.test.ts:314:19-314:37: `.connect(stranger)`
$DIR/contracts/test/v0.8/dev/FunctionsBillingRegistry.test.ts:314:37-314:76: `.acceptSubscriptionOwnerTransfer(subId)`
$DIR/contracts/test/v0.8/dev/FunctionsBillingRegistry.test.ts:328:19-328:37: `.connect(subOwner)`
$DIR/contracts/test/v0.8/dev/FunctionsBillingRegistry.test.ts:328:37-328:78: `.addConsumer(1203123123, strangerAddress)`
$DIR/contracts/test/v0.8/dev/FunctionsBillingRegistry.test.ts:333:19-333:37: `.connect(stranger)`
$DIR/contracts/test/v0.8/dev/FunctionsBillingRegistry.test.ts:333:37-333:73: `.addConsumer(subId, strangerAddress)`
$DIR/contracts/test/v0.8/dev/FunctionsBillingRegistry.test.ts:337:9-337:77: `await registry.connect(subOwner).addConsumer(subId, strangerAddress)`
$DIR/contracts/test/v0.8/dev/FunctionsBillingRegistry.test.ts:337:23-337:41: `.connect(subOwner)`
$DIR/contracts/test/v0.8/dev/FunctionsBillingRegistry.test.ts:337:41-337:77: `.addConsumer(subId, strangerAddress)`
$DIR/contracts/test/v0.8/dev/FunctionsBillingRegistry.test.ts:338:9-338:77: `await registry.connect(subOwner).addConsumer(subId, strangerAddress)`
$DIR/contracts/test/v0.8/dev/FunctionsBillingRegistry.test.ts:338:23-338:41: `.connect(subOwner)`
$DIR/contracts/test/v0.8/dev/FunctionsBillingRegistry.test.ts:338:41-338:77: `.addConsumer(subId, strangerAddress)`
$DIR/contracts/test/v0.8/dev/FunctionsBillingRegistry.test.ts:343:11-345:55: `await registry
            .connect(subOwner)
            .addConsumer(subId, randomAddressString())`
$DIR/contracts/test/v0.8/dev/FunctionsBillingRegistry.test.ts:343:25-344:31: `
            .connect(subOwner)`
$DIR/contracts/test/v0.8/dev/FunctionsBillingRegistry.test.ts:344:31-345:55: `
            .addConsumer(subId, randomAddressString())`
$DIR/contracts/test/v0.8/dev/FunctionsBillingRegistry.test.ts:350:19-350:37: `.connect(subOwner)`
$DIR/contracts/test/v0.8/dev/FunctionsBillingRegistry.test.ts:350:37-350:73: `.addConsumer(subId, strangerAddress)`
$DIR/contracts/test/v0.8/dev/FunctionsBillingRegistry.test.ts:355:20-355:48: `.push(randomAddressString())`
$DIR/contracts/test/v0.8/dev/FunctionsBillingRegistry.test.ts:357:9-357:62: `subId = await createSubscription(subOwner, consumers)`
$DIR/contracts/test/v0.8/dev/FunctionsBillingRegistry.test.ts:359:19-359:37: `.connect(subOwner)`
$DIR/contracts/test/v0.8/dev/FunctionsBillingRegistry.test.ts:359:37-359:73: `.addConsumer(subId, strangerAddress)`
$DIR/contracts/test/v0.8/dev/FunctionsBillingRegistry.test.ts:364:19-364:37: `.connect(subOwner)`
$DIR/contracts/test/v0.8/dev/FunctionsBillingRegistry.test.ts:364:37-364:73: `.addConsumer(subId, strangerAddress)`
$DIR/contracts/test/v0.8/dev/FunctionsBillingRegistry.test.ts:378:19-379:31: `
            .connect(subOwner)`
$DIR/contracts/test/v0.8/dev/FunctionsBillingRegistry.test.ts:379:31-380:57: `
            .removeConsumer(1203123123, strangerAddress)`
$DIR/contracts/test/v0.8/dev/FunctionsBillingRegistry.test.ts:385:19-385:37: `.connect(stranger)`
$DIR/contracts/test/v0.8/dev/FunctionsBillingRegistry.test.ts:385:37-385:76: `.removeConsumer(subId, strangerAddress)`
$DIR/contracts/test/v0.8/dev/FunctionsBillingRegistry.test.ts:389:41-389:64: `.getSubscription(subId)`
$DIR/contracts/test/v0.8/dev/FunctionsBillingRegistry.test.ts:390:9-390:77: `await registry.connect(subOwner).addConsumer(subId, strangerAddress)`
$DIR/contracts/test/v0.8/dev/FunctionsBillingRegistry.test.ts:390:23-390:41: `.connect(subOwner)`
$DIR/contracts/test/v0.8/dev/FunctionsBillingRegistry.test.ts:390:41-390:77: `.addConsumer(subId, strangerAddress)`
$DIR/contracts/test/v0.8/dev/FunctionsBillingRegistry.test.ts:392:19-392:37: `.connect(subOwner)`
$DIR/contracts/test/v0.8/dev/FunctionsBillingRegistry.test.ts:392:37-392:76: `.removeConsumer(subId, strangerAddress)`
$DIR/contracts/test/v0.8/dev/FunctionsBillingRegistry.test.ts:396:40-396:63: `.getSubscription(subId)`
$DIR/contracts/test/v0.8/dev/FunctionsBillingRegistry.test.ts:402:9-402:77: `await registry.connect(subOwner).addConsumer(subId, strangerAddress)`
$DIR/contracts/test/v0.8/dev/FunctionsBillingRegistry.test.ts:402:23-402:41: `.connect(subOwner)`
$DIR/contracts/test/v0.8/dev/FunctionsBillingRegistry.test.ts:402:41-402:77: `.addConsumer(subId, strangerAddress)`
$DIR/contracts/test/v0.8/dev/FunctionsBillingRegistry.test.ts:403:9-403:80: `await registry.connect(subOwner).removeConsumer(subId, strangerAddress)`
$DIR/contracts/test/v0.8/dev/FunctionsBillingRegistry.test.ts:403:23-403:41: `.connect(subOwner)`
$DIR/contracts/test/v0.8/dev/FunctionsBillingRegistry.test.ts:403:41-403:80: `.removeConsumer(subId, strangerAddress)`
$DIR/contracts/test/v0.8/dev/FunctionsBillingRegistry.test.ts:404:9-404:80: `await registry.connect(subOwner).removeConsumer(subId, consumerAddress)`
$DIR/contracts/test/v0.8/dev/FunctionsBillingRegistry.test.ts:404:23-404:41: `.connect(subOwner)`
$DIR/contracts/test/v0.8/dev/FunctionsBillingRegistry.test.ts:404:41-404:80: `.removeConsumer(subId, consumerAddress)`
$DIR/contracts/test/v0.8/dev/FunctionsBillingRegistry.test.ts:406:40-406:63: `.getSubscription(subId)`
$DIR/contracts/test/v0.8/dev/FunctionsBillingRegistry.test.ts:436:30-436:48: `.connect(subOwner)`
$DIR/contracts/test/v0.8/dev/FunctionsBillingRegistry.test.ts:436:48-436:76: `.pendingRequestExists(subId)`
$DIR/contracts/test/v0.8/dev/FunctionsBillingRegistry.test.ts:440:9-442:74: `await client
          .connect(consumer)
          .sendSimpleRequestWithJavaScript(`return 'hello world'`, subId)`
$DIR/contracts/test/v0.8/dev/FunctionsBillingRegistry.test.ts:440:21-441:29: `
          .connect(consumer)`
$DIR/contracts/test/v0.8/dev/FunctionsBillingRegistry.test.ts:441:29-442:74: `
          .sendSimpleRequestWithJavaScript(`return 'hello world'`, subId)`
$DIR/contracts/test/v0.8/dev/FunctionsBillingRegistry.test.ts:443:30-443:48: `.connect(subOwner)`
$DIR/contracts/test/v0.8/dev/FunctionsBillingRegistry.test.ts:443:48-443:76: `.pendingRequestExists(subId)`
$DIR/contracts/test/v0.8/dev/FunctionsBillingRegistry.test.ts:455:19-456:31: `
            .connect(subOwner)`
$DIR/contracts/test/v0.8/dev/FunctionsBillingRegistry.test.ts:456:31-457:61: `
            .cancelSubscription(1203123123, subOwnerAddress)`
$DIR/contracts/test/v0.8/dev/FunctionsBillingRegistry.test.ts:462:19-462:37: `.connect(stranger)`
$DIR/contracts/test/v0.8/dev/FunctionsBillingRegistry.test.ts:462:37-462:80: `.cancelSubscription(subId, subOwnerAddress)`
$DIR/contracts/test/v0.8/dev/FunctionsBillingRegistry.test.ts:466:9-472:12: `await linkToken
          .connect(subOwner)
          .transferAndCall(
            registry.address,
            BigNumber.from('1000'),
            ethers.utils.defaultAbiCoder.encode(['uint64'], [subId]),
          )`
$DIR/contracts/test/v0.8/dev/FunctionsBillingRegistry.test.ts:466:24-467:29: `
          .connect(subOwner)`
$DIR/contracts/test/v0.8/dev/FunctionsBillingRegistry.test.ts:467:29-472:12: `
          .transferAndCall(
            registry.address,
            BigNumber.from('1000'),
            ethers.utils.defaultAbiCoder.encode(['uint64'], [subId]),
          )`
$DIR/contracts/test/v0.8/dev/FunctionsBillingRegistry.test.ts:470:22-470:35: `.from('1000')`
$DIR/contracts/test/v0.8/dev/FunctionsBillingRegistry.test.ts:471:19-471:69: `.utils.defaultAbiCoder.encode(['uint64'], [subId])`
$DIR/contracts/test/v0.8/dev/FunctionsBillingRegistry.test.ts:474:19-474:37: `.connect(subOwner)`
$DIR/contracts/test/v0.8/dev/FunctionsBillingRegistry.test.ts:474:37-474:80: `.cancelSubscription(subId, strangerAddress)`
$DIR/contracts/test/v0.8/dev/FunctionsBillingRegistry.test.ts:478:48-478:75: `.balanceOf(strangerAddress)`
$DIR/contracts/test/v0.8/dev/FunctionsBillingRegistry.test.ts:481:19-481:37: `.connect(subOwner)`
$DIR/contracts/test/v0.8/dev/FunctionsBillingRegistry.test.ts:481:37-481:60: `.getSubscription(subId)`
$DIR/contracts/test/v0.8/dev/FunctionsBillingRegistry.test.ts:485:9-491:12: `await linkToken
          .connect(subOwner)
          .transferAndCall(
            registry.address,
            BigNumber.from('1000'),
            ethers.utils.defaultAbiCoder.encode(['uint64'], [subId]),
          )`
$DIR/contracts/test/v0.8/dev/FunctionsBillingRegistry.test.ts:485:24-486:29: `
          .connect(subOwner)`
$DIR/contracts/test/v0.8/dev/FunctionsBillingRegistry.test.ts:486:29-491:12: `
          .transferAndCall(
            registry.address,
            BigNumber.from('1000'),
            ethers.utils.defaultAbiCoder.encode(['uint64'], [subId]),
          )`
$DIR/contracts/test/v0.8/dev/FunctionsBillingRegistry.test.ts:489:22-489:35: `.from('1000')`
$DIR/contracts/test/v0.8/dev/FunctionsBillingRegistry.test.ts:490:19-490:69: `.utils.defaultAbiCoder.encode(['uint64'], [subId])`
$DIR/contracts/test/v0.8/dev/FunctionsBillingRegistry.test.ts:492:9-492:77: `await registry.connect(subOwner).addConsumer(subId, strangerAddress)`
$DIR/contracts/test/v0.8/dev/FunctionsBillingRegistry.test.ts:492:23-492:41: `.connect(subOwner)`
$DIR/contracts/test/v0.8/dev/FunctionsBillingRegistry.test.ts:492:41-492:77: `.addConsumer(subId, strangerAddress)`
$DIR/contracts/test/v0.8/dev/FunctionsBillingRegistry.test.ts:493:9-495:54: `await registry
          .connect(subOwner)
          .cancelSubscription(subId, strangerAddress)`
$DIR/contracts/test/v0.8/dev/FunctionsBillingRegistry.test.ts:493:23-494:29: `
          .connect(subOwner)`
$DIR/contracts/test/v0.8/dev/FunctionsBillingRegistry.test.ts:494:29-495:54: `
          .cancelSubscription(subId, strangerAddress)`
$DIR/contracts/test/v0.8/dev/FunctionsBillingRegistry.test.ts:496:9-496:70: `subId = await createSubscription(subOwner, [consumerAddress])`
$DIR/contracts/test/v0.8/dev/FunctionsBillingRegistry.test.ts:498:9-498:77: `await registry.connect(subOwner).addConsumer(subId, strangerAddress)`
$DIR/contracts/test/v0.8/dev/FunctionsBillingRegistry.test.ts:498:23-498:41: `.connect(subOwner)`
$DIR/contracts/test/v0.8/dev/FunctionsBillingRegistry.test.ts:498:41-498:77: `.addConsumer(subId, strangerAddress)`
$DIR/contracts/test/v0.8/dev/FunctionsBillingRegistry.test.ts:501:9-508:10: `await registry.setConfig(
          config.maxGasLimit,
          config.stalenessSeconds,
          config.gasAfterPaymentCalculation,
          config.weiPerUnitLink,
          config.gasOverhead,
          config.requestTimeoutSeconds,
        )`
$DIR/contracts/test/v0.8/dev/FunctionsBillingRegistry.test.ts:501:23-508:10: `.setConfig(
          config.maxGasLimit,
          config.stalenessSeconds,
          config.gasAfterPaymentCalculation,
          config.weiPerUnitLink,
          config.gasOverhead,
          config.requestTimeoutSeconds,
        )`
$DIR/contracts/test/v0.8/dev/FunctionsBillingRegistry.test.ts:510:9-516:12: `await linkToken
          .connect(subOwner)
          .transferAndCall(
            registry.address,
            BigNumber.from('130790416713017745'),
            ethers.utils.defaultAbiCoder.encode(['uint64'], [subId]),
          )`
$DIR/contracts/test/v0.8/dev/FunctionsBillingRegistry.test.ts:510:24-511:29: `
          .connect(subOwner)`
$DIR/contracts/test/v0.8/dev/FunctionsBillingRegistry.test.ts:511:29-516:12: `
          .transferAndCall(
            registry.address,
            BigNumber.from('130790416713017745'),
            ethers.utils.defaultAbiCoder.encode(['uint64'], [subId]),
          )`
$DIR/contracts/test/v0.8/dev/FunctionsBillingRegistry.test.ts:514:22-514:49: `.from('130790416713017745')`
$DIR/contracts/test/v0.8/dev/FunctionsBillingRegistry.test.ts:515:19-515:69: `.utils.defaultAbiCoder.encode(['uint64'], [subId])`
$DIR/contracts/test/v0.8/dev/FunctionsBillingRegistry.test.ts:517:9-517:76: `await registry.connect(subOwner).addConsumer(subId, client.address)`
$DIR/contracts/test/v0.8/dev/FunctionsBillingRegistry.test.ts:517:23-517:41: `.connect(subOwner)`
$DIR/contracts/test/v0.8/dev/FunctionsBillingRegistry.test.ts:517:41-517:76: `.addConsumer(subId, client.address)`
$DIR/contracts/test/v0.8/dev/FunctionsBillingRegistry.test.ts:518:9-518:57: `await registry.connect(roles.defaultAccount).reg`
$DIR/contracts/test/v0.8/dev/FunctionsBillingRegistry.test.ts:518:23-518:53: `.connect(roles.defaultAccount)`
$DIR/contracts/test/v0.8/dev/FunctionsBillingRegistry.test.ts:519:9-519:62: `await registry.setAuthorizedSenders([oracle.address])`
$DIR/contracts/test/v0.8/dev/FunctionsBillingRegistry.test.ts:519:23-519:62: `.setAuthorizedSenders([oracle.address])`
$DIR/contracts/test/v0.8/dev/FunctionsBillingRegistry.test.ts:520:9-522:74: `await client
          .connect(consumer)
          .sendSimpleRequestWithJavaScript(`return 'hello world'`, subId)`
$DIR/contracts/test/v0.8/dev/FunctionsBillingRegistry.test.ts:520:21-521:29: `
          .connect(consumer)`
$DIR/contracts/test/v0.8/dev/FunctionsBillingRegistry.test.ts:521:29-522:74: `
          .sendSimpleRequestWithJavaScript(`return 'hello world'`, subId)`
$DIR/contracts/test/v0.8/dev/FunctionsBillingRegistry.test.ts:525:19-525:37: `.connect(subOwner)`
$DIR/contracts/test/v0.8/dev/FunctionsBillingRegistry.test.ts:525:37-525:80: `.cancelSubscription(subId, strangerAddress)`
$DIR/contracts/test/v0.8/dev/FunctionsBillingRegistry.test.ts:530:19-530:49: `.connect(roles.defaultAccount)`
$DIR/contracts/test/v0.8/dev/FunctionsBillingRegistry.test.ts:530:49-530:80: `.ownerCancelSubscription(subId)`
$DIR/contracts/test/v0.8/dev/FunctionsBillingRegistry.test.ts:552:31-552:81: `.utils.defaultAbiCoder.encode(['uint64'], [subId])`
$DIR/contracts/test/v0.8/dev/FunctionsBillingRegistry.test.ts:553:15-555:78: `await linkToken
                .connect(subOwner)
                .transferAndCall(registry.address, BigNumber.from('1000'), s)`
$DIR/contracts/test/v0.8/dev/FunctionsBillingRegistry.test.ts:553:30-554:35: `
                .connect(subOwner)`
$DIR/contracts/test/v0.8/dev/FunctionsBillingRegistry.test.ts:554:35-555:78: `
                .transferAndCall(registry.address, BigNumber.from('1000'), s)`
$DIR/contracts/test/v0.8/dev/FunctionsBillingRegistry.test.ts:555:61-555:74: `.from('1000')`
$DIR/contracts/test/v0.8/dev/FunctionsBillingRegistry.test.ts:557:22-557:35: `.from('1000')`
$DIR/contracts/test/v0.8/dev/FunctionsBillingRegistry.test.ts:561:15-563:60: `await registry
                .connect(subOwner)
                .cancelSubscription(subId, strangerAddress)`
$DIR/contracts/test/v0.8/dev/FunctionsBillingRegistry.test.ts:561:29-562:35: `
                .connect(subOwner)`
$DIR/contracts/test/v0.8/dev/FunctionsBillingRegistry.test.ts:562:35-563:60: `
                .cancelSubscription(subId, strangerAddress)`
$DIR/contracts/test/v0.8/dev/FunctionsBillingRegistry.test.ts:565:22-565:36: `.from('-1000')`
$DIR/contracts/test/v0.8/dev/FunctionsBillingRegistry.test.ts:569:49-569:67: `.getTotalBalance()`
$DIR/contracts/test/v0.8/dev/FunctionsBillingRegistry.test.ts:570:11-570:21: `await fn()`
$DIR/contracts/test/v0.8/dev/FunctionsBillingRegistry.test.ts:571:47-571:65: `.getTotalBalance()`
$DIR/contracts/test/v0.8/dev/FunctionsBillingRegistry.test.ts:573:26-573:47: `.sub(startingBalance)`
$DIR/contracts/test/v0.8/dev/FunctionsBillingRegistry.test.ts:580:19-580:37: `.connect(subOwner)`
$DIR/contracts/test/v0.8/dev/FunctionsBillingRegistry.test.ts:580:37-580:67: `.recoverFunds(strangerAddress)`
$DIR/contracts/test/v0.8/dev/FunctionsBillingRegistry.test.ts:586:25-586:35: `.from('0')`
$DIR/contracts/test/v0.8/dev/FunctionsBillingRegistry.test.ts:586:46-586:73: `.balanceOf(strangerAddress)`
$DIR/contracts/test/v0.8/dev/FunctionsBillingRegistry.test.ts:587:25-587:75: `.utils.defaultAbiCoder.encode(['uint64'], [subId])`
$DIR/contracts/test/v0.8/dev/FunctionsBillingRegistry.test.ts:588:9-590:72: `await linkToken
          .connect(subOwner)
          .transferAndCall(registry.address, BigNumber.from('1000'), s)`
$DIR/contracts/test/v0.8/dev/FunctionsBillingRegistry.test.ts:588:24-589:29: `
          .connect(subOwner)`
$DIR/contracts/test/v0.8/dev/FunctionsBillingRegistry.test.ts:589:29-590:72: `
          .transferAndCall(registry.address, BigNumber.from('1000'), s)`
$DIR/contracts/test/v0.8/dev/FunctionsBillingRegistry.test.ts:590:55-590:68: `.from('1000')`
$DIR/contracts/test/v0.8/dev/FunctionsBillingRegistry.test.ts:592:9-594:62: `await linkToken
          .connect(subOwner)
          .transfer(registry.address, BigNumber.from('1000'))`
$DIR/contracts/test/v0.8/dev/FunctionsBillingRegistry.test.ts:592:24-593:29: `
          .connect(subOwner)`
$DIR/contracts/test/v0.8/dev/FunctionsBillingRegistry.test.ts:593:29-594:62: `
          .transfer(registry.address, BigNumber.from('1000'))`
$DIR/contracts/test/v0.8/dev/FunctionsBillingRegistry.test.ts:594:48-594:61: `.from('1000')`
$DIR/contracts/test/v0.8/dev/FunctionsBillingRegistry.test.ts:597:19-597:49: `.connect(roles.defaultAccount)`
$DIR/contracts/test/v0.8/dev/FunctionsBillingRegistry.test.ts:597:49-597:79: `.recoverFunds(strangerAddress)`
$DIR/contracts/test/v0.8/dev/FunctionsBillingRegistry.test.ts:601:25-601:38: `.from('1000')`
$DIR/contracts/test/v0.8/dev/FunctionsBillingRegistry.test.ts:601:49-601:76: `.balanceOf(strangerAddress)`
$DIR/contracts/test/v0.8/dev/FunctionsBillingRegistry.test.ts:636:17-636:35: `.connect(consumer)`
$DIR/contracts/test/v0.8/dev/FunctionsBillingRegistry.test.ts:636:35-643:11: `.startBilling(stringToHex('some data'), {
          requester: consumerAddress,
          client: consumerAddress,
          subscriptionId: subId,
          gasPrice: 20_000,
          gasLimit: 20_000,
          confirmations: 50,
        })`
$DIR/contracts/test/v0.8/dev/FunctionsBillingRegistry.test.ts:649:15-650:29: `
          .connect(stranger)`
$DIR/contracts/test/v0.8/dev/FunctionsBillingRegistry.test.ts:650:29-651:61: `
          .sendRequest(subId, stringToBytes('some data'), 0)`
$DIR/contracts/test/v0.8/dev/FunctionsBillingRegistry.test.ts:656:15-657:29: `
          .connect(consumer)`
$DIR/contracts/test/v0.8/dev/FunctionsBillingRegistry.test.ts:657:29-658:74: `
          .sendSimpleRequestWithJavaScript(`return 'hello world'`, subId)`
$DIR/contracts/test/v0.8/dev/FunctionsBillingRegistry.test.ts:664:7-664:74: `await registry.connect(subOwner).addConsumer(subId, client.address)`
$DIR/contracts/test/v0.8/dev/FunctionsBillingRegistry.test.ts:664:21-664:39: `.connect(subOwner)`
$DIR/contracts/test/v0.8/dev/FunctionsBillingRegistry.test.ts:664:39-664:74: `.addConsumer(subId, client.address)`
$DIR/contracts/test/v0.8/dev/FunctionsBillingRegistry.test.ts:667:15-668:29: `
          .connect(subOwner)`
$DIR/contracts/test/v0.8/dev/FunctionsBillingRegistry.test.ts:668:29-669:74: `
          .sendSimpleRequestWithJavaScript(`return 'hello world'`, subId)`
$DIR/contracts/test/v0.8/dev/FunctionsBillingRegistry.test.ts:675:15-676:29: `
          .connect(consumer)`
$DIR/contracts/test/v0.8/dev/FunctionsBillingRegistry.test.ts:676:29-677:74: `
          .sendSimpleRequestWithJavaScript(`return 'hello world'`, subId)`
$DIR/contracts/test/v0.8/dev/FunctionsBillingRegistry.test.ts:682:13-683:27: `
        .connect(consumer)`
$DIR/contracts/test/v0.8/dev/FunctionsBillingRegistry.test.ts:683:27-686:11: `
        .sendSimpleRequestWithJavaScript(`return 'hello world'`, subId, {
          gasPrice: 1000000008,
        })`
$DIR/contracts/test/v0.8/dev/FunctionsBillingRegistry.test.ts:689:15-690:29: `
          .connect(subOwner)`
$DIR/contracts/test/v0.8/dev/FunctionsBillingRegistry.test.ts:690:29-693:13: `
          .sendSimpleRequestWithJavaScript(`return 'hello world'`, subId, {
            gasPrice: 1000000008,
          })`
$DIR/contracts/test/v0.8/dev/FunctionsBillingRegistry.test.ts:733:36-733:71: `.fill(ethers.constants.AddressZero)`
$DIR/contracts/test/v0.8/dev/FunctionsBillingRegistry.test.ts:734:7-734:35: `someSigners[0] = someAddress`
$DIR/contracts/test/v0.8/dev/FunctionsBillingRegistry.test.ts:736:17-737:29: `
          .connect(consumer)`
$DIR/contracts/test/v0.8/dev/FunctionsBillingRegistry.test.ts:737:29-747:12: `
          .fulfillAndBill(
            ethers.utils.hexZeroPad(requestId, 32),
            stringToHex('some data'),
            stringToHex('some data'),
            someAddress,
            someSigners,
            1,
            10,
            0,
          )`
$DIR/contracts/test/v0.8/dev/FunctionsBillingRegistry.test.ts:739:19-739:51: `.utils.hexZeroPad(requestId, 32)`
$DIR/contracts/test/v0.8/dev/FunctionsBillingRegistry.test.ts:753:15-753:47: `.utils.hexZeroPad(requestId, 32)`
$DIR/contracts/test/v0.8/dev/FunctionsBillingRegistry.test.ts:758:15-759:37: `
          .connect(roles.oracleNode)`
$DIR/contracts/test/v0.8/dev/FunctionsBillingRegistry.test.ts:759:37-760:53: `
          .callReport(report, { gasLimit: 500_000 })`
$DIR/contracts/test/v0.8/dev/FunctionsBillingRegistry.test.ts:765:50-767:8: `.balanceOf(
        await roles.oracleNode.getAddress(),
      )`
$DIR/contracts/test/v0.8/dev/FunctionsBillingRegistry.test.ts:766:20-766:44: `.oracleNode.getAddress()`
$DIR/contracts/test/v0.8/dev/FunctionsBillingRegistry.test.ts:768:57-768:80: `.getSubscription(subId)`
$DIR/contracts/test/v0.8/dev/FunctionsBillingRegistry.test.ts:771:15-771:47: `.utils.hexZeroPad(requestId, 32)`
$DIR/contracts/test/v0.8/dev/FunctionsBillingRegistry.test.ts:777:15-778:37: `
          .connect(roles.oracleNode)`
$DIR/contracts/test/v0.8/dev/FunctionsBillingRegistry.test.ts:778:37-779:53: `
          .callReport(report, { gasLimit: 500_000 })`
$DIR/contracts/test/v0.8/dev/FunctionsBillingRegistry.test.ts:786:7-791:10: `await registry
        .connect(roles.oracleNode)
        .oracleWithdraw(
          await roles.oracleNode.getAddress(),
          BigNumber.from('0'),
        )`
$DIR/contracts/test/v0.8/dev/FunctionsBillingRegistry.test.ts:786:21-787:35: `
        .connect(roles.oracleNode)`
$DIR/contracts/test/v0.8/dev/FunctionsBillingRegistry.test.ts:787:35-791:10: `
        .oracleWithdraw(
          await roles.oracleNode.getAddress(),
          BigNumber.from('0'),
        )`
$DIR/contracts/test/v0.8/dev/FunctionsBillingRegistry.test.ts:789:22-789:46: `.oracleNode.getAddress()`
$DIR/contracts/test/v0.8/dev/FunctionsBillingRegistry.test.ts:790:20-790:30: `.from('0')`
$DIR/contracts/test/v0.8/dev/FunctionsBillingRegistry.test.ts:793:49-795:8: `.balanceOf(
        await roles.oracleNode.getAddress(),
      )`
$DIR/contracts/test/v0.8/dev/FunctionsBillingRegistry.test.ts:794:20-794:44: `.oracleNode.getAddress()`
$DIR/contracts/test/v0.8/dev/FunctionsBillingRegistry.test.ts:796:56-796:79: `.getSubscription(subId)`
$DIR/contracts/test/v0.8/dev/FunctionsBillingRegistry.test.ts:798:39-798:68: `.gt(subscriptionBalanceAfter)`
$DIR/contracts/test/v0.8/dev/FunctionsBillingRegistry.test.ts:799:32-799:56: `.gt(oracleBalanceBefore)`
$DIR/contracts/test/v0.8/dev/FunctionsBillingRegistry.test.ts:800:39-800:69: `.sub(subscriptionBalanceAfter)`
$DIR/contracts/test/v0.8/dev/FunctionsBillingRegistry.test.ts:809:17-810:37: `
          .connect(roles.oracleNode)`
$DIR/contracts/test/v0.8/dev/FunctionsBillingRegistry.test.ts:810:37-811:72: `
          .oracleWithdraw(randomAddressString(), BigNumber.from('100'))`
$DIR/contracts/test/v0.8/dev/FunctionsBillingRegistry.test.ts:811:59-811:71: `.from('100')`
$DIR/contracts/test/v0.8/dev/FunctionsBillingRegistryUpgradeable.test.ts:172:15-172:47: `.utils.hexZeroPad(requestId, 32)`
$DIR/contracts/test/v0.8/dev/FunctionsBillingRegistryUpgradeable.test.ts:177:15-178:37: `
          .connect(roles.oracleNode)`
$DIR/contracts/test/v0.8/dev/FunctionsBillingRegistryUpgradeable.test.ts:178:37-179:53: `
          .callReport(report, { gasLimit: 500_000 })`
$DIR/contracts/test/v0.8/dev/FunctionsBillingRegistryUpgradeable.test.ts:186:21-189:10: `.getContractFactory(
          'src/v0.8/tests/FunctionsBillingRegistryMigration.sol:FunctionsBillingRegistryMigration',
          roles.consumer,
        )`
$DIR/contracts/test/v0.8/dev/FunctionsBillingRegistryUpgradeable.test.ts:190:46-193:8: `.upgradeProxy(
        registry.address,
        functionsBillingRegistryMigrationFactory.connect(roles.defaultAccount),
      )`
$DIR/contracts/test/v0.8/dev/FunctionsBillingRegistryUpgradeable.test.ts:192:49-192:79: `.connect(roles.defaultAccount)`
$DIR/contracts/test/v0.8/dev/FunctionsBillingRegistryUpgradeable.test.ts:205:49-205:81: `.getRequiredFee(...dummyRequest)`
$DIR/contracts/test/v0.8/dev/FunctionsBillingRegistryUpgradeable.test.ts:209:51-209:63: `.getConfig()`
$DIR/contracts/test/v0.8/dev/FunctionsBillingRegistryUpgradeable.test.ts:221:50-221:73: `.getSubscription(subId)`
$DIR/contracts/test/v0.8/dev/FunctionsBillingRegistryUpgradeable.test.ts:226:15-226:47: `.utils.hexZeroPad(requestId, 32)`
$DIR/contracts/test/v0.8/dev/FunctionsBillingRegistryUpgradeable.test.ts:231:15-232:37: `
          .connect(roles.oracleNode)`
$DIR/contracts/test/v0.8/dev/FunctionsBillingRegistryUpgradeable.test.ts:232:37-233:53: `
          .callReport(report, { gasLimit: 500_000 })`
$DIR/contracts/test/v0.8/dev/FunctionsClient.test.ts:124:26-124:56: `.setDONPublicKey(donPublicKey)`
$DIR/contracts/test/v0.8/dev/FunctionsClient.test.ts:125:26-125:55: `.callStatic.getDONPublicKey()`
$DIR/contracts/test/v0.8/dev/FunctionsClient.test.ts:134:15-135:41: `
          .connect(roles.defaultAccount)`
$DIR/contracts/test/v0.8/dev/FunctionsClient.test.ts:135:41-136:80: `
          .sendSimpleRequestWithJavaScript('function run() {}', subscriptionId)`
$DIR/contracts/test/v0.8/dev/FunctionsClient.test.ts:153:30-156:8: `.sendSimpleRequestWithJavaScript(
        js,
        subscriptionId,
      )`
$DIR/contracts/test/v0.8/dev/FunctionsClient.test.ts:170:30-173:8: `.sendSimpleRequestWithJavaScript(
        'function run(){return response}',
        subscriptionId,
      )`
$DIR/contracts/test/v0.8/dev/FunctionsClient.test.ts:175:34-175:41: `.wait()`
$DIR/contracts/test/v0.8/dev/FunctionsClient.test.ts:183:25-186:8: `.encode(
        ['bytes32[]', 'bytes[]', 'bytes[]'],
        [[ethers.utils.hexZeroPad(requestId, 32)], [response], [error]],
      )`
$DIR/contracts/test/v0.8/dev/FunctionsClient.test.ts:185:17-185:49: `.utils.hexZeroPad(requestId, 32)`
$DIR/contracts/test/v0.8/dev/FunctionsClient.test.ts:188:26-188:45: `.callReport(report)`
$DIR/contracts/test/v0.8/dev/FunctionsOracle.test.ts:139:26-139:54: `.callStatic.typeAndVersion()`
$DIR/contracts/test/v0.8/dev/FunctionsOracle.test.ts:145:26-145:56: `.setDONPublicKey(donPublicKey)`
$DIR/contracts/test/v0.8/dev/FunctionsOracle.test.ts:146:26-146:55: `.callStatic.getDONPublicKey()`
$DIR/contracts/test/v0.8/dev/FunctionsOracle.test.ts:153:26-153:58: `.setDONPublicKey(emptyPublicKey)`
$DIR/contracts/test/v0.8/dev/FunctionsOracle.test.ts:174:7-174:80: `await oracle.setNodePublicKey(roles.oracleNode2.getAddress(), publicKey2)`
$DIR/contracts/test/v0.8/dev/FunctionsOracle.test.ts:174:19-174:80: `.setNodePublicKey(roles.oracleNode2.getAddress(), publicKey2)`
$DIR/contracts/test/v0.8/dev/FunctionsOracle.test.ts:174:42-174:67: `.oracleNode2.getAddress()`
$DIR/contracts/test/v0.8/dev/FunctionsOracle.test.ts:175:7-175:80: `await oracle.setNodePublicKey(roles.oracleNode3.getAddress(), publicKey3)`
$DIR/contracts/test/v0.8/dev/FunctionsOracle.test.ts:175:19-175:80: `.setNodePublicKey(roles.oracleNode3.getAddress(), publicKey3)`
$DIR/contracts/test/v0.8/dev/FunctionsOracle.test.ts:175:42-175:67: `.oracleNode3.getAddress()`
$DIR/contracts/test/v0.8/dev/FunctionsOracle.test.ts:176:7-181:9: `validatePubKeys(transmitters, [
        emptyKey,
        publicKey2,
        publicKey3,
        emptyKey,
      ])`
$DIR/contracts/test/v0.8/dev/FunctionsOracle.test.ts:183:7-183:71: `await oracle.deleteNodePublicKey(roles.oracleNode1.getAddress())`
$DIR/contracts/test/v0.8/dev/FunctionsOracle.test.ts:183:19-183:71: `.deleteNodePublicKey(roles.oracleNode1.getAddress())`
$DIR/contracts/test/v0.8/dev/FunctionsOracle.test.ts:183:45-183:70: `.oracleNode1.getAddress()`
$DIR/contracts/test/v0.8/dev/FunctionsOracle.test.ts:184:7-184:71: `await oracle.deleteNodePublicKey(roles.oracleNode2.getAddress())`
$DIR/contracts/test/v0.8/dev/FunctionsOracle.test.ts:184:19-184:71: `.deleteNodePublicKey(roles.oracleNode2.getAddress())`
$DIR/contracts/test/v0.8/dev/FunctionsOracle.test.ts:184:45-184:70: `.oracleNode2.getAddress()`
$DIR/contracts/test/v0.8/dev/FunctionsOracle.test.ts:185:7-185:80: `validatePubKeys(transmitters, [emptyKey, emptyKey, publicKey3, emptyKey])`
$DIR/contracts/test/v0.8/dev/FunctionsOracle.test.ts:192:15-193:41: `
          .connect(roles.defaultAccount)`
$DIR/contracts/test/v0.8/dev/FunctionsOracle.test.ts:193:41-194:68: `
          .setNodePublicKey(roles.oracleNode2.getAddress(), pubKey)`
$DIR/contracts/test/v0.8/dev/FunctionsOracle.test.ts:194:34-194:59: `.oracleNode2.getAddress()`
$DIR/contracts/test/v0.8/dev/FunctionsOracle.test.ts:198:15-199:35: `
          .connect(roles.consumer)`
$DIR/contracts/test/v0.8/dev/FunctionsOracle.test.ts:199:35-200:68: `
          .setNodePublicKey(roles.oracleNode2.getAddress(), pubKey)`
$DIR/contracts/test/v0.8/dev/FunctionsOracle.test.ts:200:34-200:59: `.oracleNode2.getAddress()`
$DIR/contracts/test/v0.8/dev/FunctionsOracle.test.ts:204:15-205:35: `
          .connect(roles.consumer)`
$DIR/contracts/test/v0.8/dev/FunctionsOracle.test.ts:205:35-206:65: `
          .setNodePublicKey(roles.consumer.getAddress(), pubKey)`
$DIR/contracts/test/v0.8/dev/FunctionsOracle.test.ts:206:34-206:56: `.consumer.getAddress()`
$DIR/contracts/test/v0.8/dev/FunctionsOracle.test.ts:210:15-211:38: `
          .connect(roles.oracleNode2)`
$DIR/contracts/test/v0.8/dev/FunctionsOracle.test.ts:211:38-212:68: `
          .setNodePublicKey(roles.oracleNode3.getAddress(), pubKey)`
$DIR/contracts/test/v0.8/dev/FunctionsOracle.test.ts:212:34-212:59: `.oracleNode3.getAddress()`
$DIR/contracts/test/v0.8/dev/FunctionsOracle.test.ts:216:15-217:38: `
          .connect(roles.oracleNode2)`
$DIR/contracts/test/v0.8/dev/FunctionsOracle.test.ts:217:38-218:68: `
          .setNodePublicKey(roles.oracleNode2.getAddress(), pubKey)`
$DIR/contracts/test/v0.8/dev/FunctionsOracle.test.ts:218:34-218:59: `.oracleNode2.getAddress()`
$DIR/contracts/test/v0.8/dev/FunctionsOracle.test.ts:224:15-225:41: `
          .connect(roles.defaultAccount)`
$DIR/contracts/test/v0.8/dev/FunctionsOracle.test.ts:225:41-226:63: `
          .deleteNodePublicKey(roles.oracleNode2.getAddress())`
$DIR/contracts/test/v0.8/dev/FunctionsOracle.test.ts:226:37-226:62: `.oracleNode2.getAddress()`
$DIR/contracts/test/v0.8/dev/FunctionsOracle.test.ts:230:15-231:35: `
          .connect(roles.consumer)`
$DIR/contracts/test/v0.8/dev/FunctionsOracle.test.ts:231:35-232:63: `
          .deleteNodePublicKey(roles.oracleNode2.getAddress())`
$DIR/contracts/test/v0.8/dev/FunctionsOracle.test.ts:232:37-232:62: `.oracleNode2.getAddress()`
$DIR/contracts/test/v0.8/dev/FunctionsOracle.test.ts:236:15-237:35: `
          .connect(roles.consumer)`
$DIR/contracts/test/v0.8/dev/FunctionsOracle.test.ts:237:35-238:60: `
          .deleteNodePublicKey(roles.consumer.getAddress())`
$DIR/contracts/test/v0.8/dev/FunctionsOracle.test.ts:238:37-238:59: `.consumer.getAddress()`
$DIR/contracts/test/v0.8/dev/FunctionsOracle.test.ts:246:26-246:63: `.sendRequest(subscriptionId, data, 0)`
$DIR/contracts/test/v0.8/dev/FunctionsOracle.test.ts:261:15-261:52: `.sendRequest(subscriptionId, data, 0)`
$DIR/contracts/test/v0.8/dev/FunctionsOracle.test.ts:267:37-271:8: `.callStatic.sendRequest(
        subscriptionId,
        data,
        0,
      )`
$DIR/contracts/test/v0.8/dev/FunctionsOracle.test.ts:277:38-281:8: `.callStatic.sendRequest(
        subscriptionId,
        data,
        0,
      )`
$DIR/contracts/test/v0.8/dev/FunctionsOracle.test.ts:282:26-282:63: `.sendRequest(subscriptionId, data, 0)`
$DIR/contracts/test/v0.8/dev/FunctionsOracle.test.ts:292:38-296:8: `.callStatic.sendRequest(
        subscriptionId,
        data,
        0,
      )`
$DIR/contracts/test/v0.8/dev/FunctionsOracle.test.ts:324:15-324:47: `.utils.hexZeroPad(requestId, 32)`
$DIR/contracts/test/v0.8/dev/FunctionsOracle.test.ts:329:26-329:45: `.callReport(report)`
$DIR/contracts/test/v0.8/dev/FunctionsOracle.test.ts:339:15-339:47: `.utils.hexZeroPad(requestId, 32)`
$DIR/contracts/test/v0.8/dev/FunctionsOracle.test.ts:344:26-344:52: `.connect(roles.oracleNode)`
$DIR/contracts/test/v0.8/dev/FunctionsOracle.test.ts:344:52-344:71: `.callReport(report)`
$DIR/contracts/test/v0.8/dev/FunctionsOracle.test.ts:350:57-352:8: `.getSubscription(
        subscriptionId,
      )`
$DIR/contracts/test/v0.8/dev/FunctionsOracle.test.ts:354:35-355:35: `
        .connect(roles.oracleNode)`
$DIR/contracts/test/v0.8/dev/FunctionsOracle.test.ts:355:35-356:73: `
        .sendSimpleRequestWithJavaScript('function(){}', subscriptionId)`
$DIR/contracts/test/v0.8/dev/FunctionsOracle.test.ts:357:36-357:43: `.wait()`
$DIR/contracts/test/v0.8/dev/FunctionsOracle.test.ts:361:15-361:47: `.utils.hexZeroPad(requestId, 32)`
$DIR/contracts/test/v0.8/dev/FunctionsOracle.test.ts:366:26-366:52: `.connect(roles.oracleNode)`
$DIR/contracts/test/v0.8/dev/FunctionsOracle.test.ts:366:52-366:71: `.callReport(report)`
$DIR/contracts/test/v0.8/dev/FunctionsOracle.test.ts:371:56-373:8: `.getSubscription(
        subscriptionId,
      )`
$DIR/contracts/test/v0.8/dev/FunctionsOracle.test.ts:375:35-375:57: `.provider.getFeeData()`
$DIR/contracts/test/v0.8/dev/FunctionsOracle.test.ts:376:41-380:8: `.estimateJuelCost(
        'function(){}',
        subscriptionId,
        feeData.gasPrice ?? BigNumber.from(0),
      )`
$DIR/contracts/test/v0.8/dev/FunctionsOracle.test.ts:379:38-379:46: `.from(0)`
$DIR/contracts/test/v0.8/dev/FunctionsOracle.test.ts:383:34-383:64: `.sub(subscriptionBalanceAfter)`
$DIR/contracts/test/v0.8/dev/FunctionsOracle.test.ts:386:34-386:64: `.sub(subscriptionBalanceAfter)`
$DIR/contracts/test/v0.8/dev/FunctionsOracle.test.ts:394:15-394:47: `.utils.hexZeroPad(requestId, 32)`
$DIR/contracts/test/v0.8/dev/FunctionsOracle.test.ts:399:7-399:49: `await client.setRevertFulfillRequest(true)`
$DIR/contracts/test/v0.8/dev/FunctionsOracle.test.ts:399:19-399:49: `.setRevertFulfillRequest(true)`
$DIR/contracts/test/v0.8/dev/FunctionsOracle.test.ts:401:26-401:52: `.connect(roles.oracleNode)`
$DIR/contracts/test/v0.8/dev/FunctionsOracle.test.ts:401:52-401:71: `.callReport(report)`
$DIR/contracts/test/v0.8/dev/FunctionsOracle.test.ts:410:15-410:47: `.utils.hexZeroPad(requestId, 32)`
$DIR/contracts/test/v0.8/dev/FunctionsOracle.test.ts:415:7-415:47: `await client.setDoInvalidOperation(true)`
$DIR/contracts/test/v0.8/dev/FunctionsOracle.test.ts:415:19-415:47: `.setDoInvalidOperation(true)`
$DIR/contracts/test/v0.8/dev/FunctionsOracle.test.ts:417:26-417:52: `.connect(roles.oracleNode)`
$DIR/contracts/test/v0.8/dev/FunctionsOracle.test.ts:417:52-417:71: `.callReport(report)`
$DIR/contracts/test/v0.8/dev/FunctionsOracle.test.ts:426:15-426:47: `.utils.hexZeroPad(requestId, 32)`
$DIR/contracts/test/v0.8/dev/FunctionsOracle.test.ts:431:26-431:52: `.connect(roles.oracleNode)`
$DIR/contracts/test/v0.8/dev/FunctionsOracle.test.ts:431:52-431:71: `.callReport(report)`
$DIR/contracts/test/v0.8/dev/FunctionsOracle.test.ts:440:15-440:47: `.utils.hexZeroPad(requestId, 32)`
$DIR/contracts/test/v0.8/dev/FunctionsOracle.test.ts:445:26-445:52: `.connect(roles.oracleNode)`
$DIR/contracts/test/v0.8/dev/FunctionsOracle.test.ts:445:52-445:71: `.callReport(report)`
$DIR/contracts/test/v0.8/dev/FunctionsOracle.test.ts:450:26-450:52: `.connect(roles.oracleNode)`
$DIR/contracts/test/v0.8/dev/FunctionsOracle.test.ts:450:52-450:71: `.callReport(report)`
$DIR/contracts/test/v0.8/dev/FunctionsOracle.test.ts:459:25-462:8: `.encode(
        ['bytes32[]', 'bytes[]', 'bytes[]'],
        [[requestId], [], []],
      )`
$DIR/contracts/test/v0.8/dev/FunctionsOracle.test.ts:465:15-465:41: `.connect(roles.oracleNode)`
$DIR/contracts/test/v0.8/dev/FunctionsOracle.test.ts:465:41-465:60: `.callReport(report)`
$DIR/contracts/test/v0.8/dev/FunctionsOracle.test.ts:477:25-484:8: `.encode(
        ['bytes32[]', 'bytes[]', 'bytes[]'],
        [
          [requestId1, requestId2],
          [result1, result2],
          [err, err],
        ],
      )`
$DIR/contracts/test/v0.8/dev/FunctionsOracle.test.ts:487:15-488:37: `
          .connect(roles.oracleNode)`
$DIR/contracts/test/v0.8/dev/FunctionsOracle.test.ts:488:37-489:53: `
          .callReport(report, { gasLimit: 300_000 })`
$DIR/contracts/test/v0.8/dev/FunctionsOracle.test.ts:505:25-512:8: `.encode(
        ['bytes32[]', 'bytes[]', 'bytes[]'],
        [
          [requestId1, requestId2],
          [result1, result2],
          [err, err],
        ],
      )`
$DIR/contracts/test/v0.8/dev/FunctionsOracle.test.ts:514:7-514:49: `await client.setRevertFulfillRequest(true)`
$DIR/contracts/test/v0.8/dev/FunctionsOracle.test.ts:514:19-514:49: `.setRevertFulfillRequest(true)`
$DIR/contracts/test/v0.8/dev/FunctionsOracle.test.ts:516:26-516:52: `.connect(roles.oracleNode)`
$DIR/contracts/test/v0.8/dev/FunctionsOracle.test.ts:516:52-516:71: `.callReport(report)`
$DIR/contracts/test/v0.8/dev/FunctionsOracleUpgradeable.test.ts:180:25-187:8: `.encode(
        ['bytes32[]', 'bytes[]', 'bytes[]'],
        [
          [requestId1, requestId2],
          [result1, result2],
          [err, err],
        ],
      )`
$DIR/contracts/test/v0.8/dev/FunctionsOracleUpgradeable.test.ts:190:15-191:37: `
          .connect(roles.oracleNode)`
$DIR/contracts/test/v0.8/dev/FunctionsOracleUpgradeable.test.ts:191:37-192:53: `
          .callReport(report, { gasLimit: 300_000 })`
$DIR/contracts/test/v0.8/dev/FunctionsOracleUpgradeable.test.ts:202:44-205:8: `.upgradeProxy(
        oracle.address,
        functionsOracleMigrationFactory.connect(roles.defaultAccount),
      )`
$DIR/contracts/test/v0.8/dev/FunctionsOracleUpgradeable.test.ts:204:40-204:70: `.connect(roles.defaultAccount)`
$DIR/contracts/test/v0.8/dev/FunctionsOracleUpgradeable.test.ts:217:47-217:79: `.getRequiredFee(...dummyRequest)`
$DIR/contracts/test/v0.8/dev/FunctionsOracleUpgradeable.test.ts:223:15-223:47: `.utils.hexZeroPad(requestId, 32)`
$DIR/contracts/test/v0.8/dev/FunctionsOracleUpgradeable.test.ts:228:23-229:37: `
          .connect(roles.oracleNode)`
$DIR/contracts/test/v0.8/dev/FunctionsOracleUpgradeable.test.ts:229:37-230:53: `
          .callReport(report, { gasLimit: 500_000 })`
$DIR/contracts/test/v0.8/dev/HeartbeatRequester.test.ts:42:42-42:55: `.getAddress()`
$DIR/contracts/test/v0.8/dev/HeartbeatRequester.test.ts:43:41-43:54: `.getAddress()`
$DIR/contracts/test/v0.8/dev/HeartbeatRequester.test.ts:44:41-44:54: `.getAddress()`
$DIR/contracts/test/v0.8/dev/HeartbeatRequester.test.ts:45:34-46:24: `
        .connect(owner)`
$DIR/contracts/test/v0.8/dev/HeartbeatRequester.test.ts:46:24-47:55: `
        .permitHeartbeat(callerAddress, proxyAddress1)`
$DIR/contracts/test/v0.8/dev/HeartbeatRequester.test.ts:52:34-53:24: `
        .connect(owner)`
$DIR/contracts/test/v0.8/dev/HeartbeatRequester.test.ts:53:24-54:55: `
        .permitHeartbeat(callerAddress, proxyAddress2)`
$DIR/contracts/test/v0.8/dev/HeartbeatRequester.test.ts:61:42-61:55: `.getAddress()`
$DIR/contracts/test/v0.8/dev/HeartbeatRequester.test.ts:62:40-62:53: `.getAddress()`
$DIR/contracts/test/v0.8/dev/HeartbeatRequester.test.ts:64:18-64:35: `.connect(caller1)`
$DIR/contracts/test/v0.8/dev/HeartbeatRequester.test.ts:64:35-64:80: `.permitHeartbeat(callerAddress, proxyAddress)`
$DIR/contracts/test/v0.8/dev/HeartbeatRequester.test.ts:71:42-71:55: `.getAddress()`
$DIR/contracts/test/v0.8/dev/HeartbeatRequester.test.ts:72:40-72:53: `.getAddress()`
$DIR/contracts/test/v0.8/dev/HeartbeatRequester.test.ts:73:34-74:24: `
        .connect(owner)`
$DIR/contracts/test/v0.8/dev/HeartbeatRequester.test.ts:74:24-75:54: `
        .permitHeartbeat(callerAddress, proxyAddress)`
$DIR/contracts/test/v0.8/dev/HeartbeatRequester.test.ts:80:34-80:49: `.connect(owner)`
$DIR/contracts/test/v0.8/dev/HeartbeatRequester.test.ts:80:49-80:80: `.removeHeartbeat(callerAddress)`
$DIR/contracts/test/v0.8/dev/HeartbeatRequester.test.ts:88:18-88:35: `.connect(caller1)`
$DIR/contracts/test/v0.8/dev/HeartbeatRequester.test.ts:88:35-88:79: `.removeHeartbeat(await caller1.getAddress())`
$DIR/contracts/test/v0.8/dev/HeartbeatRequester.test.ts:88:65-88:78: `.getAddress()`
$DIR/contracts/test/v0.8/dev/HeartbeatRequester.test.ts:95:42-95:55: `.getAddress()`
$DIR/contracts/test/v0.8/dev/HeartbeatRequester.test.ts:96:40-96:53: `.getAddress()`
$DIR/contracts/test/v0.8/dev/HeartbeatRequester.test.ts:97:7-99:54: `await requester
        .connect(owner)
        .permitHeartbeat(callerAddress, proxyAddress)`
$DIR/contracts/test/v0.8/dev/HeartbeatRequester.test.ts:97:22-98:24: `
        .connect(owner)`
$DIR/contracts/test/v0.8/dev/HeartbeatRequester.test.ts:98:24-99:54: `
        .permitHeartbeat(callerAddress, proxyAddress)`
$DIR/contracts/test/v0.8/dev/HeartbeatRequester.test.ts:102:18-103:28: `
          .connect(caller1)`
$DIR/contracts/test/v0.8/dev/HeartbeatRequester.test.ts:103:28-104:70: `
          .getAggregatorAndRequestHeartbeat(await owner.getAddress())`
$DIR/contracts/test/v0.8/dev/HeartbeatRequester.test.ts:104:56-104:69: `.getAddress()`
$DIR/contracts/test/v0.8/dev/HeartbeatRequester.test.ts:109:7-111:8: `aggregatorFactory = await ethers.getContractFactory(
        'MockOffchainAggregator',
      )`
$DIR/contracts/test/v0.8/dev/HeartbeatRequester.test.ts:109:39-111:8: `.getContractFactory(
        'MockOffchainAggregator',
      )`
$DIR/contracts/test/v0.8/dev/HeartbeatRequester.test.ts:112:7-112:67: `aggregator = await aggregatorFactory.connect(owner).deploy()`
$DIR/contracts/test/v0.8/dev/HeartbeatRequester.test.ts:112:43-112:58: `.connect(owner)`
$DIR/contracts/test/v0.8/dev/HeartbeatRequester.test.ts:112:58-112:67: `.deploy()`
$DIR/contracts/test/v0.8/dev/HeartbeatRequester.test.ts:113:7-113:34: `await aggregator.deployed()`
$DIR/contracts/test/v0.8/dev/HeartbeatRequester.test.ts:113:23-113:34: `.deployed()`
$DIR/contracts/test/v0.8/dev/HeartbeatRequester.test.ts:115:7-117:8: `aggregatorProxyFactory = await ethers.getContractFactory(
        'MockAggregatorProxy',
      )`
$DIR/contracts/test/v0.8/dev/HeartbeatRequester.test.ts:115:44-117:8: `.getContractFactory(
        'MockAggregatorProxy',
      )`
$DIR/contracts/test/v0.8/dev/HeartbeatRequester.test.ts:118:7-120:36: `aggregatorProxy = await aggregatorProxyFactory
        .connect(owner)
        .deploy(aggregator.address)`
$DIR/contracts/test/v0.8/dev/HeartbeatRequester.test.ts:118:53-119:24: `
        .connect(owner)`
$DIR/contracts/test/v0.8/dev/HeartbeatRequester.test.ts:119:24-120:36: `
        .deploy(aggregator.address)`
$DIR/contracts/test/v0.8/dev/HeartbeatRequester.test.ts:121:7-121:39: `await aggregatorProxy.deployed()`
$DIR/contracts/test/v0.8/dev/HeartbeatRequester.test.ts:121:28-121:39: `.deployed()`
$DIR/contracts/test/v0.8/dev/HeartbeatRequester.test.ts:123:7-125:78: `await requester
        .connect(owner)
        .permitHeartbeat(await caller1.getAddress(), aggregatorProxy.address)`
$DIR/contracts/test/v0.8/dev/HeartbeatRequester.test.ts:123:22-124:24: `
        .connect(owner)`
$DIR/contracts/test/v0.8/dev/HeartbeatRequester.test.ts:124:24-125:78: `
        .permitHeartbeat(await caller1.getAddress(), aggregatorProxy.address)`
$DIR/contracts/test/v0.8/dev/HeartbeatRequester.test.ts:125:39-125:52: `.getAddress()`
$DIR/contracts/test/v0.8/dev/HeartbeatRequester.test.ts:127:34-128:26: `
        .connect(caller1)`
$DIR/contracts/test/v0.8/dev/HeartbeatRequester.test.ts:128:26-129:67: `
        .getAggregatorAndRequestHeartbeat(aggregatorProxy.address)`
$DIR/contracts/test/v0.8/dev/HeartbeatRequester.test.ts:132:37-132:47: `.roundId()`
$DIR/contracts/test/v0.8/dev/HeartbeatRequester.test.ts:134:34-135:26: `
        .connect(caller1)`
$DIR/contracts/test/v0.8/dev/HeartbeatRequester.test.ts:135:26-136:67: `
        .getAggregatorAndRequestHeartbeat(aggregatorProxy.address)`
$DIR/contracts/test/v0.8/dev/HeartbeatRequester.test.ts:139:37-139:47: `.roundId()`
$DIR/contracts/test/v0.8/dev/KeeperRegistryCheckUpkeepGasUsageWrapper.test.ts:46:7-54:10: `await registryMockContract.mock.checkUpkeep
        .withArgs(upkeepId, await nelly.getAddress())
        .returns(
          '0xabcd' /* performData */,
          BigNumber.from(1000) /* maxLinkPayment */,
          BigNumber.from(2000) /* gasLimit */,
          BigNumber.from(3000) /* adjustedGasWei */,
          BigNumber.from(4000) /* linkEth */,
        )`
$DIR/contracts/test/v0.8/dev/KeeperRegistryCheckUpkeepGasUsageWrapper.test.ts:46:33-47:54: `.mock.checkUpkeep
        .withArgs(upkeepId, await nelly.getAddress())`
$DIR/contracts/test/v0.8/dev/KeeperRegistryCheckUpkeepGasUsageWrapper.test.ts:47:40-47:53: `.getAddress()`
$DIR/contracts/test/v0.8/dev/KeeperRegistryCheckUpkeepGasUsageWrapper.test.ts:47:54-54:10: `
        .returns(
          '0xabcd' /* performData */,
          BigNumber.from(1000) /* maxLinkPayment */,
          BigNumber.from(2000) /* gasLimit */,
          BigNumber.from(3000) /* adjustedGasWei */,
          BigNumber.from(4000) /* linkEth */,
        )`
$DIR/contracts/test/v0.8/dev/KeeperRegistryCheckUpkeepGasUsageWrapper.test.ts:50:20-50:31: `.from(1000)`
$DIR/contracts/test/v0.8/dev/KeeperRegistryCheckUpkeepGasUsageWrapper.test.ts:51:20-51:31: `.from(2000)`
$DIR/contracts/test/v0.8/dev/KeeperRegistryCheckUpkeepGasUsageWrapper.test.ts:52:20-52:31: `.from(3000)`
$DIR/contracts/test/v0.8/dev/KeeperRegistryCheckUpkeepGasUsageWrapper.test.ts:53:20-53:31: `.from(4000)`
$DIR/contracts/test/v0.8/dev/KeeperRegistryCheckUpkeepGasUsageWrapper.test.ts:56:40-57:25: `
        .connect(caller)`
$DIR/contracts/test/v0.8/dev/KeeperRegistryCheckUpkeepGasUsageWrapper.test.ts:57:25-61:10: `
        .callStatic.measureCheckGas(
          BigNumber.from(upkeepId),
          await nelly.getAddress(),
        )`
$DIR/contracts/test/v0.8/dev/KeeperRegistryCheckUpkeepGasUsageWrapper.test.ts:59:20-59:35: `.from(upkeepId)`
$DIR/contracts/test/v0.8/dev/KeeperRegistryCheckUpkeepGasUsageWrapper.test.ts:60:22-60:35: `.getAddress()`
$DIR/contracts/test/v0.8/dev/KeeperRegistryCheckUpkeepGasUsageWrapper.test.ts:70:32-70:40: `.from(0)`
$DIR/contracts/test/v0.8/dev/KeeperRegistryCheckUpkeepGasUsageWrapper.test.ts:76:7-78:36: `await registryMockContract.mock.checkUpkeep
        .withArgs(upkeepId, await nelly.getAddress())
        .revertsWithReason('Error')`
$DIR/contracts/test/v0.8/dev/KeeperRegistryCheckUpkeepGasUsageWrapper.test.ts:76:33-77:54: `.mock.checkUpkeep
        .withArgs(upkeepId, await nelly.getAddress())`
$DIR/contracts/test/v0.8/dev/KeeperRegistryCheckUpkeepGasUsageWrapper.test.ts:77:40-77:53: `.getAddress()`
$DIR/contracts/test/v0.8/dev/KeeperRegistryCheckUpkeepGasUsageWrapper.test.ts:77:54-78:36: `
        .revertsWithReason('Error')`
$DIR/contracts/test/v0.8/dev/KeeperRegistryCheckUpkeepGasUsageWrapper.test.ts:80:40-81:25: `
        .connect(caller)`
$DIR/contracts/test/v0.8/dev/KeeperRegistryCheckUpkeepGasUsageWrapper.test.ts:81:25-85:10: `
        .callStatic.measureCheckGas(
          BigNumber.from(upkeepId),
          await nelly.getAddress(),
        )`
$DIR/contracts/test/v0.8/dev/KeeperRegistryCheckUpkeepGasUsageWrapper.test.ts:83:20-83:35: `.from(upkeepId)`
$DIR/contracts/test/v0.8/dev/KeeperRegistryCheckUpkeepGasUsageWrapper.test.ts:84:22-84:35: `.getAddress()`
$DIR/contracts/test/v0.8/dev/KeeperRegistryCheckUpkeepGasUsageWrapper.test.ts:94:32-94:40: `.from(0)`
$DIR/contracts/test/v0.8/dev/KeeperRegistryCheckUpkeepGasUsageWrapper.test.ts:102:40-102:56: `.connect(caller)`
$DIR/contracts/test/v0.8/dev/KeeperRegistryCheckUpkeepGasUsageWrapper.test.ts:102:56-102:76: `.getKeeperRegistry()`
$DIR/contracts/test/v0.8/dev/OptimismCrossDomainForwarder.test.ts:54:5-65:7: `publicAbi(forwarder, [
      'typeAndVersion',
      'crossDomainMessenger',
      'forward',
      'l1Owner',
      'transferL1Ownership',
      'acceptL1Ownership',
      // ConfirmedOwner methods:
      'owner',
      'transferOwnership',
      'acceptOwnership',
    ])`
$DIR/contracts/test/v0.8/dev/OptimismCrossDomainForwarder.test.ts:70:39-70:47: `.owner()`
$DIR/contracts/test/v0.8/dev/OptimismCrossDomainForwarder.test.ts:75:39-75:49: `.l1Owner()`
$DIR/contracts/test/v0.8/dev/OptimismCrossDomainForwarder.test.ts:80:39-80:62: `.crossDomainMessenger()`
$DIR/contracts/test/v0.8/dev/OptimismCrossDomainForwarder.test.ts:85:39-85:56: `.typeAndVersion()`
$DIR/contracts/test/v0.8/dev/OptimismCrossDomainForwarder.test.ts:93:18-93:36: `.connect(stranger)`
$DIR/contracts/test/v0.8/dev/OptimismCrossDomainForwarder.test.ts:93:36-93:67: `.forward(greeter.address, '0x')`
$DIR/contracts/test/v0.8/dev/OptimismCrossDomainForwarder.test.ts:99:45-102:8: `.interface.encodeFunctionData(
        'setGreeting',
        [newGreeting],
      )`
$DIR/contracts/test/v0.8/dev/OptimismCrossDomainForwarder.test.ts:103:43-106:8: `.interface.encodeFunctionData(
        'forward',
        [greeter.address, setGreetingData],
      )`
$DIR/contracts/test/v0.8/dev/OptimismCrossDomainForwarder.test.ts:107:7-109:56: `await crossDomainMessenger // Simulate cross-chain OVM message
        .connect(stranger)
        .sendMessage(forwarder.address, forwardData, 0)`
$DIR/contracts/test/v0.8/dev/OptimismCrossDomainForwarder.test.ts:107:33-108:27: ` // Simulate cross-chain OVM message
        .connect(stranger)`
$DIR/contracts/test/v0.8/dev/OptimismCrossDomainForwarder.test.ts:108:27-109:56: `
        .sendMessage(forwarder.address, forwardData, 0)`
$DIR/contracts/test/v0.8/dev/OptimismCrossDomainForwarder.test.ts:111:44-111:55: `.greeting()`
$DIR/contracts/test/v0.8/dev/OptimismCrossDomainForwarder.test.ts:116:45-119:8: `.interface.encodeFunctionData(
        'setGreeting',
        [''],
      )`
$DIR/contracts/test/v0.8/dev/OptimismCrossDomainForwarder.test.ts:120:43-123:8: `.interface.encodeFunctionData(
        'forward',
        [greeter.address, setGreetingData],
      )`
$DIR/contracts/test/v0.8/dev/OptimismCrossDomainForwarder.test.ts:125:29-126:29: ` // Simulate cross-chain OVM message
          .connect(stranger)`
$DIR/contracts/test/v0.8/dev/OptimismCrossDomainForwarder.test.ts:126:29-127:58: `
          .sendMessage(forwarder.address, forwardData, 0)`
$DIR/contracts/test/v0.8/dev/OptimismCrossDomainForwarder.test.ts:135:18-135:36: `.connect(stranger)`
$DIR/contracts/test/v0.8/dev/OptimismCrossDomainForwarder.test.ts:135:36-135:74: `.transferL1Ownership(stranger.address)`
$DIR/contracts/test/v0.8/dev/OptimismCrossDomainForwarder.test.ts:140:45-140:53: `.owner()`
$DIR/contracts/test/v0.8/dev/OptimismCrossDomainForwarder.test.ts:144:18-144:33: `.connect(owner)`
$DIR/contracts/test/v0.8/dev/OptimismCrossDomainForwarder.test.ts:144:33-144:71: `.transferL1Ownership(stranger.address)`
$DIR/contracts/test/v0.8/dev/OptimismCrossDomainForwarder.test.ts:149:45-149:55: `.l1Owner()`
$DIR/contracts/test/v0.8/dev/OptimismCrossDomainForwarder.test.ts:150:43-153:8: `.interface.encodeFunctionData(
        'transferL1Ownership',
        [newL1OwnerAddress],
      )`
$DIR/contracts/test/v0.8/dev/OptimismCrossDomainForwarder.test.ts:156:29-157:29: ` // Simulate cross-chain OVM message
          .connect(stranger)`
$DIR/contracts/test/v0.8/dev/OptimismCrossDomainForwarder.test.ts:157:29-158:58: `
          .sendMessage(forwarder.address, forwardData, 0)`
$DIR/contracts/test/v0.8/dev/OptimismCrossDomainForwarder.test.ts:165:45-165:55: `.l1Owner()`
$DIR/contracts/test/v0.8/dev/OptimismCrossDomainForwarder.test.ts:166:43-169:8: `.interface.encodeFunctionData(
        'transferL1Ownership',
        [ethers.constants.AddressZero],
      )`
$DIR/contracts/test/v0.8/dev/OptimismCrossDomainForwarder.test.ts:172:29-173:29: ` // Simulate cross-chain OVM message
          .connect(stranger)`
$DIR/contracts/test/v0.8/dev/OptimismCrossDomainForwarder.test.ts:173:29-174:58: `
          .sendMessage(forwarder.address, forwardData, 0)`
$DIR/contracts/test/v0.8/dev/OptimismCrossDomainForwarder.test.ts:183:43-186:8: `.interface.encodeFunctionData(
        'acceptL1Ownership',
        [],
      )`
$DIR/contracts/test/v0.8/dev/OptimismCrossDomainForwarder.test.ts:188:29-189:29: ` // Simulate cross-chain OVM message
          .connect(stranger)`
$DIR/contracts/test/v0.8/dev/OptimismCrossDomainForwarder.test.ts:189:29-190:58: `
          .sendMessage(forwarder.address, forwardData, 0)`
$DIR/contracts/test/v0.8/dev/OptimismCrossDomainForwarder.test.ts:195:45-195:55: `.l1Owner()`
$DIR/contracts/test/v0.8/dev/OptimismCrossDomainForwarder.test.ts:198:51-201:8: `.interface.encodeFunctionData(
        'transferL1Ownership',
        [newL1OwnerAddress],
      )`
$DIR/contracts/test/v0.8/dev/OptimismCrossDomainForwarder.test.ts:202:7-204:64: `await crossDomainMessenger // Simulate cross-chain OVM message
        .connect(stranger)
        .sendMessage(forwarder.address, forwardTransferData, 0)`
$DIR/contracts/test/v0.8/dev/OptimismCrossDomainForwarder.test.ts:202:33-203:27: ` // Simulate cross-chain OVM message
        .connect(stranger)`
$DIR/contracts/test/v0.8/dev/OptimismCrossDomainForwarder.test.ts:203:27-204:64: `
        .sendMessage(forwarder.address, forwardTransferData, 0)`
$DIR/contracts/test/v0.8/dev/OptimismCrossDomainForwarder.test.ts:206:49-209:8: `.interface.encodeFunctionData(
        'acceptL1Ownership',
        [],
      )`
$DIR/contracts/test/v0.8/dev/OptimismCrossDomainForwarder.test.ts:211:7-211:74: `await crossDomainMessenger._setMockMessageSender(newL1OwnerAddress)`
$DIR/contracts/test/v0.8/dev/OptimismCrossDomainForwarder.test.ts:211:33-211:74: `._setMockMessageSender(newL1OwnerAddress)`
$DIR/contracts/test/v0.8/dev/OptimismCrossDomainForwarder.test.ts:214:29-215:29: ` // Simulate cross-chain OVM message
          .connect(stranger)`
$DIR/contracts/test/v0.8/dev/OptimismCrossDomainForwarder.test.ts:215:29-216:64: `
          .sendMessage(forwarder.address, forwardAcceptData, 0)`
$DIR/contracts/test/v0.8/dev/OptimismCrossDomainForwarder.test.ts:221:45-221:55: `.l1Owner()`
$DIR/contracts/test/v0.8/dev/OptimismCrossDomainGovernor.test.ts:61:5-73:7: `publicAbi(governor, [
      'typeAndVersion',
      'crossDomainMessenger',
      'forward',
      'forwardDelegate',
      'l1Owner',
      'transferL1Ownership',
      'acceptL1Ownership',
      // ConfirmedOwner methods:
      'owner',
      'transferOwnership',
      'acceptOwnership',
    ])`
$DIR/contracts/test/v0.8/dev/OptimismCrossDomainGovernor.test.ts:78:38-78:46: `.owner()`
$DIR/contracts/test/v0.8/dev/OptimismCrossDomainGovernor.test.ts:83:38-83:48: `.l1Owner()`
$DIR/contracts/test/v0.8/dev/OptimismCrossDomainGovernor.test.ts:88:38-88:61: `.crossDomainMessenger()`
$DIR/contracts/test/v0.8/dev/OptimismCrossDomainGovernor.test.ts:93:38-93:55: `.typeAndVersion()`
$DIR/contracts/test/v0.8/dev/OptimismCrossDomainGovernor.test.ts:101:17-101:35: `.connect(stranger)`
$DIR/contracts/test/v0.8/dev/OptimismCrossDomainGovernor.test.ts:101:35-101:66: `.forward(greeter.address, '0x')`
$DIR/contracts/test/v0.8/dev/OptimismCrossDomainGovernor.test.ts:107:45-110:8: `.interface.encodeFunctionData(
        'setGreeting',
        [newGreeting],
      )`
$DIR/contracts/test/v0.8/dev/OptimismCrossDomainGovernor.test.ts:111:42-114:8: `.interface.encodeFunctionData(
        'forward',
        [greeter.address, setGreetingData],
      )`
$DIR/contracts/test/v0.8/dev/OptimismCrossDomainGovernor.test.ts:115:7-117:55: `await crossDomainMessenger // Simulate cross-chain OVM message
        .connect(stranger)
        .sendMessage(governor.address, forwardData, 0)`
$DIR/contracts/test/v0.8/dev/OptimismCrossDomainGovernor.test.ts:115:33-116:27: ` // Simulate cross-chain OVM message
        .connect(stranger)`
$DIR/contracts/test/v0.8/dev/OptimismCrossDomainGovernor.test.ts:116:27-117:55: `
        .sendMessage(governor.address, forwardData, 0)`
$DIR/contracts/test/v0.8/dev/OptimismCrossDomainGovernor.test.ts:119:44-119:55: `.greeting()`
$DIR/contracts/test/v0.8/dev/OptimismCrossDomainGovernor.test.ts:125:45-128:8: `.interface.encodeFunctionData(
        'setGreeting',
        [newGreeting],
      )`
$DIR/contracts/test/v0.8/dev/OptimismCrossDomainGovernor.test.ts:129:7-129:78: `await governor.connect(owner).forward(greeter.address, setGreetingData)`
$DIR/contracts/test/v0.8/dev/OptimismCrossDomainGovernor.test.ts:129:21-129:36: `.connect(owner)`
$DIR/contracts/test/v0.8/dev/OptimismCrossDomainGovernor.test.ts:129:36-129:78: `.forward(greeter.address, setGreetingData)`
$DIR/contracts/test/v0.8/dev/OptimismCrossDomainGovernor.test.ts:131:44-131:55: `.greeting()`
$DIR/contracts/test/v0.8/dev/OptimismCrossDomainGovernor.test.ts:136:45-139:8: `.interface.encodeFunctionData(
        'setGreeting',
        [''],
      )`
$DIR/contracts/test/v0.8/dev/OptimismCrossDomainGovernor.test.ts:140:42-143:8: `.interface.encodeFunctionData(
        'forward',
        [greeter.address, setGreetingData],
      )`
$DIR/contracts/test/v0.8/dev/OptimismCrossDomainGovernor.test.ts:145:29-146:29: ` // Simulate cross-chain OVM message
          .connect(stranger)`
$DIR/contracts/test/v0.8/dev/OptimismCrossDomainGovernor.test.ts:146:29-147:57: `
          .sendMessage(governor.address, forwardData, 0)`
$DIR/contracts/test/v0.8/dev/OptimismCrossDomainGovernor.test.ts:155:17-155:35: `.connect(stranger)`
$DIR/contracts/test/v0.8/dev/OptimismCrossDomainGovernor.test.ts:155:35-155:76: `.forwardDelegate(multisend.address, '0x')`
$DIR/contracts/test/v0.8/dev/OptimismCrossDomainGovernor.test.ts:163:31-165:13: `.interface.encodeFunctionData('setGreeting', [
            'foo',
          ])`
$DIR/contracts/test/v0.8/dev/OptimismCrossDomainGovernor.test.ts:170:31-172:13: `.interface.encodeFunctionData('setGreeting', [
            'bar',
          ])`
$DIR/contracts/test/v0.8/dev/OptimismCrossDomainGovernor.test.ts:177:42-180:8: `.interface.encodeFunctionData(
        'forwardDelegate',
        [multisend.address, multisendData],
      )`
$DIR/contracts/test/v0.8/dev/OptimismCrossDomainGovernor.test.ts:182:7-184:55: `await crossDomainMessenger // Simulate cross-chain OVM message
        .connect(stranger)
        .sendMessage(governor.address, forwardData, 0)`
$DIR/contracts/test/v0.8/dev/OptimismCrossDomainGovernor.test.ts:182:33-183:27: ` // Simulate cross-chain OVM message
        .connect(stranger)`
$DIR/contracts/test/v0.8/dev/OptimismCrossDomainGovernor.test.ts:183:27-184:55: `
        .sendMessage(governor.address, forwardData, 0)`
$DIR/contracts/test/v0.8/dev/OptimismCrossDomainGovernor.test.ts:186:44-186:55: `.greeting()`
$DIR/contracts/test/v0.8/dev/OptimismCrossDomainGovernor.test.ts:194:31-196:13: `.interface.encodeFunctionData('setGreeting', [
            'foo',
          ])`
$DIR/contracts/test/v0.8/dev/OptimismCrossDomainGovernor.test.ts:201:31-203:13: `.interface.encodeFunctionData('setGreeting', [
            'bar',
          ])`
$DIR/contracts/test/v0.8/dev/OptimismCrossDomainGovernor.test.ts:208:7-210:59: `await governor
        .connect(owner)
        .forwardDelegate(multisend.address, multisendData)`
$DIR/contracts/test/v0.8/dev/OptimismCrossDomainGovernor.test.ts:208:21-209:24: `
        .connect(owner)`
$DIR/contracts/test/v0.8/dev/OptimismCrossDomainGovernor.test.ts:209:24-210:59: `
        .forwardDelegate(multisend.address, multisendData)`
$DIR/contracts/test/v0.8/dev/OptimismCrossDomainGovernor.test.ts:212:44-212:55: `.greeting()`
$DIR/contracts/test/v0.8/dev/OptimismCrossDomainGovernor.test.ts:220:31-222:13: `.interface.encodeFunctionData('setGreeting', [
            'foo',
          ])`
$DIR/contracts/test/v0.8/dev/OptimismCrossDomainGovernor.test.ts:227:31-229:13: `.interface.encodeFunctionData('setGreeting', [
            '', // should revert
          ])`
$DIR/contracts/test/v0.8/dev/OptimismCrossDomainGovernor.test.ts:234:42-237:8: `.interface.encodeFunctionData(
        'forwardDelegate',
        [multisend.address, multisendData],
      )`
$DIR/contracts/test/v0.8/dev/OptimismCrossDomainGovernor.test.ts:240:29-241:29: ` // Simulate cross-chain OVM message
          .connect(stranger)`
$DIR/contracts/test/v0.8/dev/OptimismCrossDomainGovernor.test.ts:241:29-242:57: `
          .sendMessage(governor.address, forwardData, 0)`
$DIR/contracts/test/v0.8/dev/OptimismCrossDomainGovernor.test.ts:245:37-245:48: `.greeting()`
$DIR/contracts/test/v0.8/dev/OptimismCrossDomainGovernor.test.ts:251:23-251:69: `.interface.encodeFunctionData('triggerRevert')`
$DIR/contracts/test/v0.8/dev/OptimismCrossDomainGovernor.test.ts:252:42-255:8: `.interface.encodeFunctionData(
        'forwardDelegate',
        [greeter.address, triggerRevertData],
      )`
$DIR/contracts/test/v0.8/dev/OptimismCrossDomainGovernor.test.ts:258:29-259:29: ` // Simulate cross-chain OVM message
          .connect(stranger)`
$DIR/contracts/test/v0.8/dev/OptimismCrossDomainGovernor.test.ts:259:29-260:57: `
          .sendMessage(governor.address, forwardData, 0)`
$DIR/contracts/test/v0.8/dev/OptimismCrossDomainGovernor.test.ts:268:17-268:35: `.connect(stranger)`
$DIR/contracts/test/v0.8/dev/OptimismCrossDomainGovernor.test.ts:268:35-268:73: `.transferL1Ownership(stranger.address)`
$DIR/contracts/test/v0.8/dev/OptimismCrossDomainGovernor.test.ts:273:43-273:51: `.owner()`
$DIR/contracts/test/v0.8/dev/OptimismCrossDomainGovernor.test.ts:277:17-277:32: `.connect(owner)`
$DIR/contracts/test/v0.8/dev/OptimismCrossDomainGovernor.test.ts:277:32-277:70: `.transferL1Ownership(stranger.address)`
$DIR/contracts/test/v0.8/dev/OptimismCrossDomainGovernor.test.ts:282:44-282:54: `.l1Owner()`
$DIR/contracts/test/v0.8/dev/OptimismCrossDomainGovernor.test.ts:283:42-286:8: `.interface.encodeFunctionData(
        'transferL1Ownership',
        [newL1OwnerAddress],
      )`
$DIR/contracts/test/v0.8/dev/OptimismCrossDomainGovernor.test.ts:289:29-290:29: ` // Simulate cross-chain OVM message
          .connect(stranger)`
$DIR/contracts/test/v0.8/dev/OptimismCrossDomainGovernor.test.ts:290:29-291:57: `
          .sendMessage(governor.address, forwardData, 0)`
$DIR/contracts/test/v0.8/dev/OptimismCrossDomainGovernor.test.ts:298:44-298:54: `.l1Owner()`
$DIR/contracts/test/v0.8/dev/OptimismCrossDomainGovernor.test.ts:299:42-302:8: `.interface.encodeFunctionData(
        'transferL1Ownership',
        [ethers.constants.AddressZero],
      )`
$DIR/contracts/test/v0.8/dev/OptimismCrossDomainGovernor.test.ts:305:29-306:29: ` // Simulate cross-chain OVM message
          .connect(stranger)`
$DIR/contracts/test/v0.8/dev/OptimismCrossDomainGovernor.test.ts:306:29-307:57: `
          .sendMessage(governor.address, forwardData, 0)`
$DIR/contracts/test/v0.8/dev/OptimismCrossDomainGovernor.test.ts:316:42-319:8: `.interface.encodeFunctionData(
        'acceptL1Ownership',
        [],
      )`
$DIR/contracts/test/v0.8/dev/OptimismCrossDomainGovernor.test.ts:321:29-322:29: ` // Simulate cross-chain OVM message
          .connect(stranger)`
$DIR/contracts/test/v0.8/dev/OptimismCrossDomainGovernor.test.ts:322:29-323:57: `
          .sendMessage(governor.address, forwardData, 0)`
$DIR/contracts/test/v0.8/dev/OptimismCrossDomainGovernor.test.ts:328:44-328:54: `.l1Owner()`
$DIR/contracts/test/v0.8/dev/OptimismCrossDomainGovernor.test.ts:331:50-334:8: `.interface.encodeFunctionData(
        'transferL1Ownership',
        [newL1OwnerAddress],
      )`
$DIR/contracts/test/v0.8/dev/OptimismCrossDomainGovernor.test.ts:335:7-337:63: `await crossDomainMessenger // Simulate cross-chain OVM message
        .connect(stranger)
        .sendMessage(governor.address, forwardTransferData, 0)`
$DIR/contracts/test/v0.8/dev/OptimismCrossDomainGovernor.test.ts:335:33-336:27: ` // Simulate cross-chain OVM message
        .connect(stranger)`
$DIR/contracts/test/v0.8/dev/OptimismCrossDomainGovernor.test.ts:336:27-337:63: `
        .sendMessage(governor.address, forwardTransferData, 0)`
$DIR/contracts/test/v0.8/dev/OptimismCrossDomainGovernor.test.ts:339:48-342:8: `.interface.encodeFunctionData(
        'acceptL1Ownership',
        [],
      )`
$DIR/contracts/test/v0.8/dev/OptimismCrossDomainGovernor.test.ts:344:7-344:74: `await crossDomainMessenger._setMockMessageSender(newL1OwnerAddress)`
$DIR/contracts/test/v0.8/dev/OptimismCrossDomainGovernor.test.ts:344:33-344:74: `._setMockMessageSender(newL1OwnerAddress)`
$DIR/contracts/test/v0.8/dev/OptimismCrossDomainGovernor.test.ts:347:29-348:29: ` // Simulate cross-chain OVM message
          .connect(stranger)`
$DIR/contracts/test/v0.8/dev/OptimismCrossDomainGovernor.test.ts:348:29-349:63: `
          .sendMessage(governor.address, forwardAcceptData, 0)`
$DIR/contracts/test/v0.8/dev/OptimismCrossDomainGovernor.test.ts:354:44-354:54: `.l1Owner()`
$DIR/contracts/test/v0.8/dev/OptimismSequencerUptimeFeed.test.ts:70:48-70:59: `.l1Sender()`
$DIR/contracts/test/v0.8/dev/OptimismSequencerUptimeFeed.test.ts:72:59-72:77: `.latestRoundData()`
$DIR/contracts/test/v0.8/dev/OptimismSequencerUptimeFeed.test.ts:80:47-80:65: `.latestTimestamp()`
$DIR/contracts/test/v0.8/dev/OptimismSequencerUptimeFeed.test.ts:82:27-82:42: `.connect(dummy)`
$DIR/contracts/test/v0.8/dev/OptimismSequencerUptimeFeed.test.ts:82:42-82:72: `.updateStatus(true, timestamp)`
$DIR/contracts/test/v0.8/dev/OptimismSequencerUptimeFeed.test.ts:87:47-87:65: `.latestTimestamp()`
$DIR/contracts/test/v0.8/dev/OptimismSequencerUptimeFeed.test.ts:88:7-88:60: `await l2CrossDomainMessenger.setSender(dummy.address)`
$DIR/contracts/test/v0.8/dev/OptimismSequencerUptimeFeed.test.ts:88:35-88:60: `.setSender(dummy.address)`
$DIR/contracts/test/v0.8/dev/OptimismSequencerUptimeFeed.test.ts:90:27-90:42: `.connect(dummy)`
$DIR/contracts/test/v0.8/dev/OptimismSequencerUptimeFeed.test.ts:90:42-90:72: `.updateStatus(true, timestamp)`
$DIR/contracts/test/v0.8/dev/OptimismSequencerUptimeFeed.test.ts:184:50-184:68: `.latestTimestamp()`
$DIR/contracts/test/v0.8/dev/OptimismSequencerUptimeFeed.test.ts:184:69-184:81: `.add(10_000)`
$DIR/contracts/test/v0.8/dev/OptimismSequencerUptimeFeed.test.ts:186:40-187:30: `
        .connect(l2Messenger)`
$DIR/contracts/test/v0.8/dev/OptimismSequencerUptimeFeed.test.ts:187:30-188:39: `
        .updateStatus(true, timestamp)`
$DIR/contracts/test/v0.8/dev/OptimismSequencerUptimeFeed.test.ts:192:38-192:53: `.latestAnswer()`
$DIR/contracts/test/v0.8/dev/OptimismSequencerUptimeFeed.test.ts:195:39-195:49: `.sub(1000)`
$DIR/contracts/test/v0.8/dev/OptimismSequencerUptimeFeed.test.ts:196:7-198:45: `tx = await optimismUptimeFeed
        .connect(l2Messenger)
        .updateStatus(false, staleTimestamp)`
$DIR/contracts/test/v0.8/dev/OptimismSequencerUptimeFeed.test.ts:196:36-197:30: `
        .connect(l2Messenger)`
$DIR/contracts/test/v0.8/dev/OptimismSequencerUptimeFeed.test.ts:197:30-198:45: `
        .updateStatus(false, staleTimestamp)`
$DIR/contracts/test/v0.8/dev/OptimismSequencerUptimeFeed.test.ts:209:33-209:51: `.latestRoundData()`
$DIR/contracts/test/v0.8/dev/OptimismSequencerUptimeFeed.test.ts:215:49-215:59: `.add(1000)`
$DIR/contracts/test/v0.8/dev/OptimismSequencerUptimeFeed.test.ts:216:7-219:8: `await optimismUptimeFeed
        .connect(l2Messenger)
        .updateStatus(true, timestamp)
      ;`
$DIR/contracts/test/v0.8/dev/OptimismSequencerUptimeFeed.test.ts:216:31-217:30: `
        .connect(l2Messenger)`
$DIR/contracts/test/v0.8/dev/OptimismSequencerUptimeFeed.test.ts:217:30-218:39: `
        .updateStatus(true, timestamp)`
$DIR/contracts/test/v0.8/dev/OptimismSequencerUptimeFeed.test.ts:219:8-220:49: `[roundId, answer, startedAt, updatedAt, answeredInRound] =
        await optimismUptimeFeed.getRoundData(2)`
$DIR/contracts/test/v0.8/dev/OptimismSequencerUptimeFeed.test.ts:220:33-220:49: `.getRoundData(2)`
$DIR/contracts/test/v0.8/dev/OptimismSequencerUptimeFeed.test.ts:228:8-229:49: `[roundId, answer, startedAt, updatedAt, answeredInRound] =
        await optimismUptimeFeed.getRoundData(1)`
$DIR/contracts/test/v0.8/dev/OptimismSequencerUptimeFeed.test.ts:229:33-229:49: `.getRoundData(1)`
$DIR/contracts/test/v0.8/dev/OptimismSequencerUptimeFeed.test.ts:237:38-237:54: `.getRoundData(2)`
$DIR/contracts/test/v0.8/dev/OptimismSequencerUptimeFeed.test.ts:243:32-243:48: `.getRoundData(2)`
$DIR/contracts/test/v0.8/dev/OptimismSequencerUptimeFeed.test.ts:249:32-249:45: `.getAnswer(2)`
$DIR/contracts/test/v0.8/dev/OptimismSequencerUptimeFeed.test.ts:255:32-255:48: `.getTimestamp(2)`
$DIR/contracts/test/v0.8/dev/OptimismSequencerUptimeFeed.test.ts:264:38-264:53: `.checkEnabled()`
$DIR/contracts/test/v0.8/dev/OptimismSequencerUptimeFeed.test.ts:266:33-266:79: `.hasAccess(uptimeFeedConsumer.address, '0x00')`
$DIR/contracts/test/v0.8/dev/OptimismSequencerUptimeFeed.test.ts:270:38-270:53: `.latestAnswer()`
$DIR/contracts/test/v0.8/dev/OptimismSequencerUptimeFeed.test.ts:273:38-273:56: `.latestRoundData()`
$DIR/contracts/test/v0.8/dev/OptimismSequencerUptimeFeed.test.ts:280:7-280:69: `await optimismUptimeFeed.addAccess(uptimeFeedConsumer.address)`
$DIR/contracts/test/v0.8/dev/OptimismSequencerUptimeFeed.test.ts:280:31-280:69: `.addAccess(uptimeFeedConsumer.address)`
$DIR/contracts/test/v0.8/dev/OptimismSequencerUptimeFeed.test.ts:282:38-282:53: `.checkEnabled()`
$DIR/contracts/test/v0.8/dev/OptimismSequencerUptimeFeed.test.ts:284:33-284:79: `.hasAccess(uptimeFeedConsumer.address, '0x00')`
$DIR/contracts/test/v0.8/dev/OptimismSequencerUptimeFeed.test.ts:288:38-288:53: `.latestAnswer()`
$DIR/contracts/test/v0.8/dev/OptimismSequencerUptimeFeed.test.ts:289:57-289:75: `.latestRoundData()`
$DIR/contracts/test/v0.8/dev/OptimismSequencerUptimeFeed.test.ts:298:38-298:53: `.latestAnswer()`
$DIR/contracts/test/v0.8/dev/OptimismSequencerUptimeFeed.test.ts:299:47-299:65: `.latestTimestamp()`
$DIR/contracts/test/v0.8/dev/OptimismSequencerUptimeFeed.test.ts:302:7-302:38: `timestamp = timestamp.add(1000)`
$DIR/contracts/test/v0.8/dev/OptimismSequencerUptimeFeed.test.ts:302:28-302:38: `.add(1000)`
$DIR/contracts/test/v0.8/dev/OptimismSequencerUptimeFeed.test.ts:303:51-304:30: `
        .connect(l2Messenger)`
$DIR/contracts/test/v0.8/dev/OptimismSequencerUptimeFeed.test.ts:304:30-305:40: `
        .updateStatus(false, timestamp)`
$DIR/contracts/test/v0.8/dev/OptimismSequencerUptimeFeed.test.ts:306:43-306:51: `.wait(1)`
$DIR/contracts/test/v0.8/dev/OptimismSequencerUptimeFeed.test.ts:308:38-308:53: `.latestAnswer()`
$DIR/contracts/test/v0.8/dev/OptimismSequencerUptimeFeed.test.ts:309:24-309:53: `.cumulativeGasUsed.toNumber()`
$DIR/contracts/test/v0.8/dev/OptimismSequencerUptimeFeed.test.ts:315:7-315:38: `timestamp = timestamp.add(1000)`
$DIR/contracts/test/v0.8/dev/OptimismSequencerUptimeFeed.test.ts:315:28-315:38: `.add(1000)`
$DIR/contracts/test/v0.8/dev/OptimismSequencerUptimeFeed.test.ts:316:49-317:30: `
        .connect(l2Messenger)`
$DIR/contracts/test/v0.8/dev/OptimismSequencerUptimeFeed.test.ts:317:30-318:39: `
        .updateStatus(true, timestamp)`
$DIR/contracts/test/v0.8/dev/OptimismSequencerUptimeFeed.test.ts:319:39-319:47: `.wait(1)`
$DIR/contracts/test/v0.8/dev/OptimismSequencerUptimeFeed.test.ts:321:38-321:53: `.latestAnswer()`
$DIR/contracts/test/v0.8/dev/OptimismSequencerUptimeFeed.test.ts:322:22-322:51: `.cumulativeGasUsed.toNumber()`
$DIR/contracts/test/v0.8/dev/OptimismSequencerUptimeFeed.test.ts:338:38-342:10: `.sendTransaction(
          await optimismUptimeFeed
            .connect(l2Messenger)
            .populateTransaction.getRoundData(1),
        )`
$DIR/contracts/test/v0.8/dev/OptimismSequencerUptimeFeed.test.ts:339:35-340:34: `
            .connect(l2Messenger)`
$DIR/contracts/test/v0.8/dev/OptimismSequencerUptimeFeed.test.ts:340:34-341:49: `
            .populateTransaction.getRoundData(1)`
$DIR/contracts/test/v0.8/dev/OptimismSequencerUptimeFeed.test.ts:343:29-343:37: `.wait(1)`
$DIR/contracts/test/v0.8/dev/OptimismSequencerUptimeFeed.test.ts:344:18-344:47: `.cumulativeGasUsed.toNumber()`
$DIR/contracts/test/v0.8/dev/OptimismSequencerUptimeFeed.test.ts:351:38-355:10: `.sendTransaction(
          await optimismUptimeFeed
            .connect(l2Messenger)
            .populateTransaction.latestRoundData(),
        )`
$DIR/contracts/test/v0.8/dev/OptimismSequencerUptimeFeed.test.ts:352:35-353:34: `
            .connect(l2Messenger)`
$DIR/contracts/test/v0.8/dev/OptimismSequencerUptimeFeed.test.ts:353:34-354:51: `
            .populateTransaction.latestRoundData()`
$DIR/contracts/test/v0.8/dev/OptimismSequencerUptimeFeed.test.ts:356:29-356:37: `.wait(1)`
$DIR/contracts/test/v0.8/dev/OptimismSequencerUptimeFeed.test.ts:357:18-357:47: `.cumulativeGasUsed.toNumber()`
$DIR/contracts/test/v0.8/dev/OptimismSequencerUptimeFeed.test.ts:364:38-368:10: `.sendTransaction(
          await optimismUptimeFeed
            .connect(l2Messenger)
            .populateTransaction.latestAnswer(),
        )`
$DIR/contracts/test/v0.8/dev/OptimismSequencerUptimeFeed.test.ts:365:35-366:34: `
            .connect(l2Messenger)`
$DIR/contracts/test/v0.8/dev/OptimismSequencerUptimeFeed.test.ts:366:34-367:48: `
            .populateTransaction.latestAnswer()`
$DIR/contracts/test/v0.8/dev/OptimismSequencerUptimeFeed.test.ts:369:29-369:37: `.wait(1)`
$DIR/contracts/test/v0.8/dev/OptimismSequencerUptimeFeed.test.ts:370:18-370:47: `.cumulativeGasUsed.toNumber()`
$DIR/contracts/test/v0.8/dev/OptimismSequencerUptimeFeed.test.ts:377:38-381:10: `.sendTransaction(
          await optimismUptimeFeed
            .connect(l2Messenger)
            .populateTransaction.latestTimestamp(),
        )`
$DIR/contracts/test/v0.8/dev/OptimismSequencerUptimeFeed.test.ts:378:35-379:34: `
            .connect(l2Messenger)`
$DIR/contracts/test/v0.8/dev/OptimismSequencerUptimeFeed.test.ts:379:34-380:51: `
            .populateTransaction.latestTimestamp()`
$DIR/contracts/test/v0.8/dev/OptimismSequencerUptimeFeed.test.ts:382:29-382:37: `.wait(1)`
$DIR/contracts/test/v0.8/dev/OptimismSequencerUptimeFeed.test.ts:383:18-383:47: `.cumulativeGasUsed.toNumber()`
$DIR/contracts/test/v0.8/dev/OptimismSequencerUptimeFeed.test.ts:390:38-394:10: `.sendTransaction(
          await optimismUptimeFeed
            .connect(l2Messenger)
            .populateTransaction.latestRound(),
        )`
$DIR/contracts/test/v0.8/dev/OptimismSequencerUptimeFeed.test.ts:391:35-392:34: `
            .connect(l2Messenger)`
$DIR/contracts/test/v0.8/dev/OptimismSequencerUptimeFeed.test.ts:392:34-393:47: `
            .populateTransaction.latestRound()`
$DIR/contracts/test/v0.8/dev/OptimismSequencerUptimeFeed.test.ts:395:29-395:37: `.wait(1)`
$DIR/contracts/test/v0.8/dev/OptimismSequencerUptimeFeed.test.ts:396:18-396:47: `.cumulativeGasUsed.toNumber()`
$DIR/contracts/test/v0.8/dev/OptimismSequencerUptimeFeed.test.ts:403:38-407:10: `.sendTransaction(
          await optimismUptimeFeed
            .connect(l2Messenger)
            .populateTransaction.getAnswer(1),
        )`
$DIR/contracts/test/v0.8/dev/OptimismSequencerUptimeFeed.test.ts:404:35-405:34: `
            .connect(l2Messenger)`
$DIR/contracts/test/v0.8/dev/OptimismSequencerUptimeFeed.test.ts:405:34-406:46: `
            .populateTransaction.getAnswer(1)`
$DIR/contracts/test/v0.8/dev/OptimismSequencerUptimeFeed.test.ts:408:29-408:37: `.wait(1)`
$DIR/contracts/test/v0.8/dev/OptimismSequencerUptimeFeed.test.ts:409:18-409:47: `.cumulativeGasUsed.toNumber()`
$DIR/contracts/test/v0.8/dev/OptimismSequencerUptimeFeed.test.ts:416:38-420:10: `.sendTransaction(
          await optimismUptimeFeed
            .connect(l2Messenger)
            .populateTransaction.getTimestamp(1),
        )`
$DIR/contracts/test/v0.8/dev/OptimismSequencerUptimeFeed.test.ts:417:35-418:34: `
            .connect(l2Messenger)`
$DIR/contracts/test/v0.8/dev/OptimismSequencerUptimeFeed.test.ts:418:34-419:49: `
            .populateTransaction.getTimestamp(1)`
$DIR/contracts/test/v0.8/dev/OptimismSequencerUptimeFeed.test.ts:421:29-421:37: `.wait(1)`
$DIR/contracts/test/v0.8/dev/OptimismSequencerUptimeFeed.test.ts:422:18-422:47: `.cumulativeGasUsed.toNumber()`
$DIR/contracts/test/v0.8/dev/OptimismValidator.test.ts:60:36-60:52: `.from(2_000_000)`
$DIR/contracts/test/v0.8/dev/OptimismValidator.test.ts:61:41-61:66: `.setGasLimit(newGasLimit)`
$DIR/contracts/test/v0.8/dev/OptimismValidator.test.ts:62:7-62:22: `await tx.wait()`
$DIR/contracts/test/v0.8/dev/OptimismValidator.test.ts:62:15-62:22: `.wait()`
$DIR/contracts/test/v0.8/dev/OptimismValidator.test.ts:63:54-63:68: `.getGasLimit()`
$DIR/contracts/test/v0.8/dev/OptimismValidator.test.ts:71:26-71:48: `.connect(eoaValidator)`
$DIR/contracts/test/v0.8/dev/OptimismValidator.test.ts:71:48-71:69: `.validate(0, 0, 1, 1)`
$DIR/contracts/test/v0.8/dev/OptimismValidator.test.ts:76:7-76:62: `await optimismValidator.addAccess(eoaValidator.address)`
$DIR/contracts/test/v0.8/dev/OptimismValidator.test.ts:76:30-76:62: `.addAccess(eoaValidator.address)`
$DIR/contracts/test/v0.8/dev/OptimismValidator.test.ts:78:43-78:69: `.provider.getBlockNumber()`
$DIR/contracts/test/v0.8/dev/OptimismValidator.test.ts:79:40-79:75: `.provider.getBlock(currentBlockNum)`
$DIR/contracts/test/v0.8/dev/OptimismValidator.test.ts:82:7-82:81: `await ethers.provider.send('evm_setNextBlockTimestamp', [futureTimestamp])`
$DIR/contracts/test/v0.8/dev/OptimismValidator.test.ts:82:19-82:81: `.provider.send('evm_setNextBlockTimestamp', [futureTimestamp])`
$DIR/contracts/test/v0.8/dev/OptimismValidator.test.ts:84:34-87:11: `.interface.encodeFunctionData('updateStatus', [
          false,
          futureTimestamp,
        ])`
$DIR/contracts/test/v0.8/dev/OptimismValidator.test.ts:89:37-89:59: `.connect(eoaValidator)`
$DIR/contracts/test/v0.8/dev/OptimismValidator.test.ts:89:59-89:80: `.validate(0, 0, 0, 0)`
$DIR/contracts/test/v0.8/dev/OptimismValidator.test.ts:101:7-101:62: `await optimismValidator.addAccess(eoaValidator.address)`
$DIR/contracts/test/v0.8/dev/OptimismValidator.test.ts:101:30-101:62: `.addAccess(eoaValidator.address)`
$DIR/contracts/test/v0.8/dev/OptimismValidator.test.ts:103:43-103:69: `.provider.getBlockNumber()`
$DIR/contracts/test/v0.8/dev/OptimismValidator.test.ts:104:40-104:75: `.provider.getBlock(currentBlockNum)`
$DIR/contracts/test/v0.8/dev/OptimismValidator.test.ts:107:7-107:81: `await ethers.provider.send('evm_setNextBlockTimestamp', [futureTimestamp])`
$DIR/contracts/test/v0.8/dev/OptimismValidator.test.ts:107:19-107:81: `.provider.send('evm_setNextBlockTimestamp', [futureTimestamp])`
$DIR/contracts/test/v0.8/dev/OptimismValidator.test.ts:109:34-112:11: `.interface.encodeFunctionData('updateStatus', [
          true,
          futureTimestamp,
        ])`
$DIR/contracts/test/v0.8/dev/OptimismValidator.test.ts:114:37-114:59: `.connect(eoaValidator)`
$DIR/contracts/test/v0.8/dev/OptimismValidator.test.ts:114:59-114:80: `.validate(0, 0, 1, 1)`
$DIR/contracts/test/v0.8/dev/UpkeepTranscoder3_0.test.ts:366:46-366:63: `.typeAndVersion()`
$DIR/contracts/test/v0.8/dev/UpkeepTranscoder3_0.test.ts:375:7-381:8: `await evmRevert(
        transcoder.transcodeUpkeeps(
          UpkeepFormat.V3,
          UpkeepFormat.V1,
          encodedData,
        ),
      )`
$DIR/contracts/test/v0.8/dev/UpkeepTranscoder3_0.test.ts:376:19-380:10: `.transcodeUpkeeps(
          UpkeepFormat.V3,
          UpkeepFormat.V1,
          encodedData,
        )`
$DIR/contracts/test/v0.8/dev/UpkeepTranscoder3_0.test.ts:382:7-388:8: `await evmRevert(
        transcoder.transcodeUpkeeps(
          UpkeepFormat.V4,
          UpkeepFormat.V1,
          encodedData,
        ),
      )`
$DIR/contracts/test/v0.8/dev/UpkeepTranscoder3_0.test.ts:383:19-387:10: `.transcodeUpkeeps(
          UpkeepFormat.V4,
          UpkeepFormat.V1,
          encodedData,
        )`
$DIR/contracts/test/v0.8/dev/UpkeepTranscoder3_0.test.ts:398:9-417:10: `upkeepsV1 = [
          [
            balance,
            lastKeeper0,
            executeGas,
            2 ** 32,
            target0,
            amountSpent,
            await admin0.getAddress(),
          ],
          [
            balance,
            lastKeeper1,
            executeGas,
            2 ** 32,
            target1,
            amountSpent,
            await admin1.getAddress(),
          ],
        ]`
$DIR/contracts/test/v0.8/dev/UpkeepTranscoder3_0.test.ts:406:25-406:38: `.getAddress()`
$DIR/contracts/test/v0.8/dev/UpkeepTranscoder3_0.test.ts:415:25-415:38: `.getAddress()`
$DIR/contracts/test/v0.8/dev/UpkeepTranscoder3_0.test.ts:419:38-423:10: `.transcodeUpkeeps(
          UpkeepFormat.V1,
          UpkeepFormat.V1,
          encodeUpkeepV1(idx, upkeepsV1, ['0xabcd', '0xffff']),
        )`
$DIR/contracts/test/v0.8/dev/UpkeepTranscoder3_0.test.ts:431:9-452:10: `upkeepsV2 = [
          [
            balance,
            lastKeeper0,
            amountSpent,
            await admin0.getAddress(),
            executeGas,
            2 ** 32 - 1,
            target0,
            false,
          ],
          [
            balance,
            lastKeeper1,
            amountSpent,
            await admin1.getAddress(),
            executeGas,
            2 ** 32 - 1,
            target1,
            false,
          ],
        ]`
$DIR/contracts/test/v0.8/dev/UpkeepTranscoder3_0.test.ts:436:25-436:38: `.getAddress()`
$DIR/contracts/test/v0.8/dev/UpkeepTranscoder3_0.test.ts:446:25-446:38: `.getAddress()`
$DIR/contracts/test/v0.8/dev/UpkeepTranscoder3_0.test.ts:454:38-458:10: `.transcodeUpkeeps(
          UpkeepFormat.V2,
          UpkeepFormat.V2,
          encodeUpkeepV2(idx, upkeepsV2, ['0xabcd', '0xffff']),
        )`
$DIR/contracts/test/v0.8/dev/UpkeepTranscoder3_0.test.ts:479:9-481:58: `await linkToken
          .connect(owner)
          .approve(legacyRegistry.address, toWei('1000'))`
$DIR/contracts/test/v0.8/dev/UpkeepTranscoder3_0.test.ts:479:24-480:26: `
          .connect(owner)`
$DIR/contracts/test/v0.8/dev/UpkeepTranscoder3_0.test.ts:480:26-481:58: `
          .approve(legacyRegistry.address, toWei('1000'))`
$DIR/contracts/test/v0.8/dev/UpkeepTranscoder3_0.test.ts:482:9-482:72: `await legacyRegistry.connect(owner).addFunds(id, toWei('1000'))`
$DIR/contracts/test/v0.8/dev/UpkeepTranscoder3_0.test.ts:482:29-482:44: `.connect(owner)`
$DIR/contracts/test/v0.8/dev/UpkeepTranscoder3_0.test.ts:482:44-482:72: `.addFunds(id, toWei('1000'))`
$DIR/contracts/test/v0.8/dev/UpkeepTranscoder3_0.test.ts:485:9-488:10: `await legacyRegistry.setPeerRegistryMigrationPermission(
          registry20.address,
          1,
        )`
$DIR/contracts/test/v0.8/dev/UpkeepTranscoder3_0.test.ts:485:29-488:10: `.setPeerRegistryMigrationPermission(
          registry20.address,
          1,
        )`
$DIR/contracts/test/v0.8/dev/UpkeepTranscoder3_0.test.ts:489:9-492:10: `await registry20.setPeerRegistryMigrationPermission(
          legacyRegistry.address,
          2,
        )`
$DIR/contracts/test/v0.8/dev/UpkeepTranscoder3_0.test.ts:489:25-492:10: `.setPeerRegistryMigrationPermission(
          legacyRegistry.address,
          2,
        )`
$DIR/contracts/test/v0.8/dev/UpkeepTranscoder3_0.test.ts:494:37-494:51: `.getUpkeep(id)`
$DIR/contracts/test/v0.8/dev/UpkeepTranscoder3_0.test.ts:497:37-497:51: `.getUpkeep(id)`
$DIR/contracts/test/v0.8/dev/UpkeepTranscoder3_0.test.ts:500:37-500:48: `.getState()`
$DIR/contracts/test/v0.8/dev/UpkeepTranscoder3_0.test.ts:502:9-504:52: `await legacyRegistry
          .connect(admin0)
          .migrateUpkeeps([id], registry20.address)`
$DIR/contracts/test/v0.8/dev/UpkeepTranscoder3_0.test.ts:502:29-503:27: `
          .connect(admin0)`
$DIR/contracts/test/v0.8/dev/UpkeepTranscoder3_0.test.ts:503:27-504:52: `
          .migrateUpkeeps([id], registry20.address)`
$DIR/contracts/test/v0.8/dev/UpkeepTranscoder3_0.test.ts:506:37-506:48: `.getState()`
$DIR/contracts/test/v0.8/dev/UpkeepTranscoder3_0.test.ts:507:33-507:44: `.getState()`
$DIR/contracts/test/v0.8/dev/UpkeepTranscoder3_0.test.ts:508:37-508:51: `.getUpkeep(id)`
$DIR/contracts/test/v0.8/dev/UpkeepTranscoder3_0.test.ts:509:37-509:51: `.getUpkeep(id)`
$DIR/contracts/test/v0.8/dev/UpkeepTranscoder3_0.test.ts:510:33-510:47: `.getUpkeep(id)`
$DIR/contracts/test/v0.8/dev/UpkeepTranscoder3_0.test.ts:512:28-512:39: `.getState()`
$DIR/contracts/test/v0.8/dev/UpkeepTranscoder3_0.test.ts:514:31-514:61: `.balanceOf(registry20.address)`
$DIR/contracts/test/v0.8/dev/UpkeepTranscoder3_0.test.ts:517:33-517:47: `.getUpkeep(id)`
$DIR/contracts/test/v0.8/dev/UpkeepTranscoder3_0.test.ts:534:9-536:58: `await linkToken
          .connect(owner)
          .approve(legacyRegistry.address, toWei('1000'))`
$DIR/contracts/test/v0.8/dev/UpkeepTranscoder3_0.test.ts:534:24-535:26: `
          .connect(owner)`
$DIR/contracts/test/v0.8/dev/UpkeepTranscoder3_0.test.ts:535:26-536:58: `
          .approve(legacyRegistry.address, toWei('1000'))`
$DIR/contracts/test/v0.8/dev/UpkeepTranscoder3_0.test.ts:537:9-537:72: `await legacyRegistry.connect(owner).addFunds(id, toWei('1000'))`
$DIR/contracts/test/v0.8/dev/UpkeepTranscoder3_0.test.ts:537:29-537:44: `.connect(owner)`
$DIR/contracts/test/v0.8/dev/UpkeepTranscoder3_0.test.ts:537:44-537:72: `.addFunds(id, toWei('1000'))`
$DIR/contracts/test/v0.8/dev/UpkeepTranscoder3_0.test.ts:540:9-543:10: `await legacyRegistry.setPeerRegistryMigrationPermission(
          registry20.address,
          1,
        )`
$DIR/contracts/test/v0.8/dev/UpkeepTranscoder3_0.test.ts:540:29-543:10: `.setPeerRegistryMigrationPermission(
          registry20.address,
          1,
        )`
$DIR/contracts/test/v0.8/dev/UpkeepTranscoder3_0.test.ts:544:9-547:10: `await registry20.setPeerRegistryMigrationPermission(
          legacyRegistry.address,
          2,
        )`
$DIR/contracts/test/v0.8/dev/UpkeepTranscoder3_0.test.ts:544:25-547:10: `.setPeerRegistryMigrationPermission(
          legacyRegistry.address,
          2,
        )`
$DIR/contracts/test/v0.8/dev/UpkeepTranscoder3_0.test.ts:549:37-549:51: `.getUpkeep(id)`
$DIR/contracts/test/v0.8/dev/UpkeepTranscoder3_0.test.ts:552:37-552:51: `.getUpkeep(id)`
$DIR/contracts/test/v0.8/dev/UpkeepTranscoder3_0.test.ts:555:37-555:48: `.getState()`
$DIR/contracts/test/v0.8/dev/UpkeepTranscoder3_0.test.ts:557:9-559:52: `await legacyRegistry
          .connect(admin0)
          .migrateUpkeeps([id], registry20.address)`
$DIR/contracts/test/v0.8/dev/UpkeepTranscoder3_0.test.ts:557:29-558:27: `
          .connect(admin0)`
$DIR/contracts/test/v0.8/dev/UpkeepTranscoder3_0.test.ts:558:27-559:52: `
          .migrateUpkeeps([id], registry20.address)`
$DIR/contracts/test/v0.8/dev/UpkeepTranscoder3_0.test.ts:561:37-561:48: `.getState()`
$DIR/contracts/test/v0.8/dev/UpkeepTranscoder3_0.test.ts:562:33-562:44: `.getState()`
$DIR/contracts/test/v0.8/dev/UpkeepTranscoder3_0.test.ts:563:37-563:51: `.getUpkeep(id)`
$DIR/contracts/test/v0.8/dev/UpkeepTranscoder3_0.test.ts:564:37-564:51: `.getUpkeep(id)`
$DIR/contracts/test/v0.8/dev/UpkeepTranscoder3_0.test.ts:565:33-565:47: `.getUpkeep(id)`
$DIR/contracts/test/v0.8/dev/UpkeepTranscoder3_0.test.ts:567:28-567:39: `.getState()`
$DIR/contracts/test/v0.8/dev/UpkeepTranscoder3_0.test.ts:569:31-569:61: `.balanceOf(registry20.address)`
$DIR/contracts/test/v0.8/dev/UpkeepTranscoder3_0.test.ts:572:33-572:47: `.getUpkeep(id)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:105:5-147:7: `publicAbi(vrfCoordinatorV2, [
      // Public constants
      'MAX_CONSUMERS',
      'MAX_NUM_WORDS',
      'MAX_REQUEST_CONFIRMATIONS',
      // Owner
      'acceptOwnership',
      'transferOwnership',
      'owner',
      'getConfig',
      'getFeeConfig',
      'getFallbackWeiPerUnitLink',
      'getCurrentSubId',
      'setConfig',
      'getRequestConfig',
      'recoverFunds',
      'ownerCancelSubscription',
      'getFeeTier',
      'pendingRequestExists',
      'getTotalBalance',
      // Oracle
      'requestRandomWords',
      'getCommitment', // Note we use this to check if a request is already fulfilled.
      'hashOfKey',
      'fulfillRandomWords',
      'registerProvingKey',
      'deregisterProvingKey',
      'oracleWithdraw',
      // Subscription management
      'createSubscription',
      'addConsumer',
      'removeConsumer',
      'getSubscription',
      'onTokenTransfer', // Effectively the fundSubscription.
      'cancelSubscription',
      'requestSubscriptionOwnerTransfer',
      'acceptSubscriptionOwnerTransfer',
      // Misc
      'typeAndVersion',
      'BLOCKHASH_STORE',
      'LINK',
      'LINK_ETH_FEED',
    ])`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:153:25-154:29: `
          .connect(subOwner)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:154:29-162:12: `
          .setConfig(
            c.minimumRequestBlockConfirmations,
            c.maxGasLimit,
            c.stalenessSeconds,
            c.gasAfterPaymentCalculation,
            c.weiPerUnitLink,
            [0, 0, 0, 0, 0, 0, 0, 0, 0],
          )`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:165:42-165:58: `.connect(random)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:165:58-165:70: `.getConfig()`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:169:37-169:75: `.gasAfterPaymentCalculation.toString()`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:174:25-175:26: `
          .connect(owner)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:175:26-183:12: `
          .setConfig(
            201,
            c.maxGasLimit,
            c.stalenessSeconds,
            c.gasAfterPaymentCalculation,
            c.weiPerUnitLink,
            [0, 0, 0, 0, 0, 0, 0, 0, 0],
          )`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:189:25-190:26: `
          .connect(owner)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:190:26-198:12: `
          .setConfig(
            c.minimumRequestBlockConfirmations,
            c.maxGasLimit,
            c.stalenessSeconds,
            c.gasAfterPaymentCalculation,
            0,
            [0, 0, 0, 0, 0, 0, 0, 0, 0],
          )`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:201:25-202:26: `
          .connect(owner)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:202:26-210:12: `
          .setConfig(
            c.minimumRequestBlockConfirmations,
            c.maxGasLimit,
            c.stalenessSeconds,
            c.gasAfterPaymentCalculation,
            -1,
            [0, 0, 0, 0, 0, 0, 0, 0, 0],
          )`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:240:36-240:54: `.connect(subOwner)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:240:54-240:75: `.createSubscription()`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:243:39-243:58: `.getSubscription(1)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:244:15-244:34: `.balance.toString()`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:248:36-248:54: `.connect(subOwner)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:248:54-248:75: `.createSubscription()`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:251:36-251:54: `.connect(subOwner)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:251:54-251:75: `.createSubscription()`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:258:9-260:53: `await vrfCoordinatorV2
          .connect(subOwner)
          .addConsumer(subId, randomAddressString())`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:258:31-259:29: `
          .connect(subOwner)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:259:29-260:53: `
          .addConsumer(subId, randomAddressString())`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:263:25-264:29: `
          .connect(subOwner)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:264:29-265:53: `
          .addConsumer(subId, randomAddressString())`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:277:25-278:27: `
          .connect(random)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:278:27-279:66: `
          .requestSubscriptionOwnerTransfer(subId, randomAddress)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:284:25-285:29: `
          .connect(subOwner)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:285:29-286:66: `
          .requestSubscriptionOwnerTransfer(subId, randomAddress)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:292:25-293:29: `
          .connect(subOwner)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:293:29-294:66: `
          .requestSubscriptionOwnerTransfer(subId, randomAddress)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:306:25-307:29: `
          .connect(subOwner)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:307:29-308:55: `
          .acceptSubscriptionOwnerTransfer(1203123123)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:313:25-314:29: `
          .connect(subOwner)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:314:29-315:66: `
          .requestSubscriptionOwnerTransfer(subId, randomAddress)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:318:25-319:29: `
          .connect(subOwner)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:319:29-320:50: `
          .acceptSubscriptionOwnerTransfer(subId)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:325:25-326:29: `
          .connect(subOwner)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:326:29-327:66: `
          .requestSubscriptionOwnerTransfer(subId, randomAddress)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:332:25-332:41: `.connect(random)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:332:41-332:80: `.acceptSubscriptionOwnerTransfer(subId)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:346:25-347:29: `
          .connect(subOwner)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:347:29-348:50: `
          .addConsumer(1203123123, randomAddress)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:353:25-353:41: `.connect(random)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:353:41-353:75: `.addConsumer(subId, randomAddress)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:357:7-357:81: `await vrfCoordinatorV2.connect(subOwner).addConsumer(subId, randomAddress)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:357:29-357:47: `.connect(subOwner)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:357:47-357:81: `.addConsumer(subId, randomAddress)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:358:7-358:81: `await vrfCoordinatorV2.connect(subOwner).addConsumer(subId, randomAddress)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:358:29-358:47: `.connect(subOwner)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:358:47-358:81: `.addConsumer(subId, randomAddress)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:363:9-365:53: `await vrfCoordinatorV2
          .connect(subOwner)
          .addConsumer(subId, randomAddressString())`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:363:31-364:29: `
          .connect(subOwner)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:364:29-365:53: `
          .addConsumer(subId, randomAddressString())`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:370:25-370:43: `.connect(subOwner)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:370:43-370:77: `.addConsumer(subId, randomAddress)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:375:18-375:46: `.push(randomAddressString())`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:377:7-377:63: `subId = await createSubscriptionWithConsumers(consumers)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:379:25-379:43: `.connect(subOwner)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:379:43-379:77: `.addConsumer(subId, randomAddress)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:384:25-384:43: `.connect(subOwner)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:384:43-384:77: `.addConsumer(subId, randomAddress)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:398:25-399:29: `
          .connect(subOwner)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:399:29-400:53: `
          .removeConsumer(1203123123, randomAddress)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:405:25-405:41: `.connect(random)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:405:41-405:78: `.removeConsumer(subId, randomAddress)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:409:47-409:70: `.getSubscription(subId)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:410:7-410:81: `await vrfCoordinatorV2.connect(subOwner).addConsumer(subId, randomAddress)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:410:29-410:47: `.connect(subOwner)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:410:47-410:81: `.addConsumer(subId, randomAddress)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:412:25-412:43: `.connect(subOwner)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:412:43-412:80: `.removeConsumer(subId, randomAddress)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:416:46-416:69: `.getSubscription(subId)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:422:7-422:81: `await vrfCoordinatorV2.connect(subOwner).addConsumer(subId, randomAddress)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:422:29-422:47: `.connect(subOwner)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:422:47-422:81: `.addConsumer(subId, randomAddress)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:423:7-425:46: `await vrfCoordinatorV2
        .connect(subOwner)
        .removeConsumer(subId, randomAddress)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:423:29-424:27: `
        .connect(subOwner)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:424:27-425:46: `
        .removeConsumer(subId, randomAddress)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:426:7-428:60: `await vrfCoordinatorV2
        .connect(subOwner)
        .removeConsumer(subId, await consumer.getAddress())`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:426:29-427:27: `
        .connect(subOwner)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:427:27-428:60: `
        .removeConsumer(subId, await consumer.getAddress())`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:428:46-428:59: `.getAddress()`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:430:46-430:69: `.getSubscription(subId)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:442:25-443:29: `
          .connect(subOwner)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:443:29-444:59: `
          .cancelSubscription(1203123123, subOwnerAddress)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:449:25-450:27: `
          .connect(random)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:450:27-451:54: `
          .cancelSubscription(subId, subOwnerAddress)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:455:7-461:10: `await linkToken
        .connect(subOwner)
        .transferAndCall(
          vrfCoordinatorV2.address,
          BigNumber.from('1000'),
          ethers.utils.defaultAbiCoder.encode(['uint64'], [subId]),
        )`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:455:22-456:27: `
        .connect(subOwner)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:456:27-461:10: `
        .transferAndCall(
          vrfCoordinatorV2.address,
          BigNumber.from('1000'),
          ethers.utils.defaultAbiCoder.encode(['uint64'], [subId]),
        )`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:459:20-459:33: `.from('1000')`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:460:17-460:67: `.utils.defaultAbiCoder.encode(['uint64'], [subId])`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:463:25-464:29: `
          .connect(subOwner)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:464:29-465:52: `
          .cancelSubscription(subId, randomAddress)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:469:44-469:69: `.balanceOf(randomAddress)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:472:25-472:43: `.connect(subOwner)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:472:43-472:66: `.getSubscription(subId)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:476:7-482:10: `await linkToken
        .connect(subOwner)
        .transferAndCall(
          vrfCoordinatorV2.address,
          BigNumber.from('1000'),
          ethers.utils.defaultAbiCoder.encode(['uint64'], [subId]),
        )`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:476:22-477:27: `
        .connect(subOwner)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:477:27-482:10: `
        .transferAndCall(
          vrfCoordinatorV2.address,
          BigNumber.from('1000'),
          ethers.utils.defaultAbiCoder.encode(['uint64'], [subId]),
        )`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:480:20-480:33: `.from('1000')`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:481:17-481:67: `.utils.defaultAbiCoder.encode(['uint64'], [subId])`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:483:7-483:81: `await vrfCoordinatorV2.connect(subOwner).addConsumer(subId, randomAddress)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:483:29-483:47: `.connect(subOwner)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:483:47-483:81: `.addConsumer(subId, randomAddress)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:484:7-486:50: `await vrfCoordinatorV2
        .connect(subOwner)
        .cancelSubscription(subId, randomAddress)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:484:29-485:27: `
        .connect(subOwner)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:485:27-486:50: `
        .cancelSubscription(subId, randomAddress)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:487:7-487:41: `subId = await createSubscription()`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:489:7-489:81: `await vrfCoordinatorV2.connect(subOwner).addConsumer(subId, randomAddress)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:489:29-489:47: `.connect(subOwner)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:489:47-489:81: `.addConsumer(subId, randomAddress)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:492:7-498:10: `await linkToken
        .connect(subOwner)
        .transferAndCall(
          vrfCoordinatorV2.address,
          BigNumber.from('1000'),
          ethers.utils.defaultAbiCoder.encode(['uint64'], [subId]),
        )`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:492:22-493:27: `
        .connect(subOwner)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:493:27-498:10: `
        .transferAndCall(
          vrfCoordinatorV2.address,
          BigNumber.from('1000'),
          ethers.utils.defaultAbiCoder.encode(['uint64'], [subId]),
        )`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:496:20-496:33: `.from('1000')`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:497:17-497:67: `.utils.defaultAbiCoder.encode(['uint64'], [subId])`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:499:7-499:81: `await vrfCoordinatorV2.connect(subOwner).addConsumer(subId, randomAddress)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:499:29-499:47: `.connect(subOwner)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:499:47-499:81: `.addConsumer(subId, randomAddress)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:500:33-500:43: `.from('1')`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:500:54-500:64: `.from('2')`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:501:7-501:74: `await vrfCoordinatorV2.registerProvingKey(subOwnerAddress, testKey)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:501:29-501:74: `.registerProvingKey(subOwnerAddress, testKey)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:502:7-502:48: `await vrfCoordinatorV2.connect(owner).reg`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:502:29-502:44: `.connect(owner)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:503:40-503:59: `.hashOfKey(testKey)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:504:7-510:8: `await vrfCoordinatorV2.connect(consumer).requestRandomWords(
        kh, // keyhash
        subId, // subId
        1, // minReqConf
        1000000, // callbackGasLimit
        1, // numWords
      )`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:504:29-504:47: `.connect(consumer)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:504:47-510:8: `.requestRandomWords(
        kh, // keyhash
        subId, // subId
        1, // minReqConf
        1000000, // callbackGasLimit
        1, // numWords
      )`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:513:25-514:29: `
          .connect(subOwner)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:514:29-515:52: `
          .cancelSubscription(subId, randomAddress)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:520:25-520:40: `.connect(owner)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:520:40-520:71: `.ownerCancelSubscription(subId)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:540:29-540:79: `.utils.defaultAbiCoder.encode(['uint64'], [subId])`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:541:13-547:16: `await linkToken
              .connect(subOwner)
              .transferAndCall(
                vrfCoordinatorV2.address,
                BigNumber.from('1000'),
                s,
              )`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:541:28-542:33: `
              .connect(subOwner)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:542:33-547:16: `
              .transferAndCall(
                vrfCoordinatorV2.address,
                BigNumber.from('1000'),
                s,
              )`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:545:26-545:39: `.from('1000')`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:549:20-549:33: `.from('1000')`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:553:13-555:56: `await vrfCoordinatorV2
              .connect(subOwner)
              .cancelSubscription(subId, randomAddress)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:553:35-554:33: `
              .connect(subOwner)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:554:33-555:56: `
              .cancelSubscription(subId, randomAddress)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:557:20-557:34: `.from('-1000')`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:561:55-561:73: `.getTotalBalance()`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:562:9-562:19: `await fn()`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:563:53-563:71: `.getTotalBalance()`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:565:24-565:45: `.sub(startingBalance)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:572:25-572:43: `.connect(subOwner)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:572:43-572:71: `.recoverFunds(randomAddress)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:578:23-578:33: `.from('0')`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:578:44-578:69: `.balanceOf(randomAddress)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:579:23-579:73: `.utils.defaultAbiCoder.encode(['uint64'], [subId])`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:580:7-582:78: `await linkToken
        .connect(subOwner)
        .transferAndCall(vrfCoordinatorV2.address, BigNumber.from('1000'), s)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:580:22-581:27: `
        .connect(subOwner)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:581:27-582:78: `
        .transferAndCall(vrfCoordinatorV2.address, BigNumber.from('1000'), s)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:582:61-582:74: `.from('1000')`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:584:7-586:68: `await linkToken
        .connect(subOwner)
        .transfer(vrfCoordinatorV2.address, BigNumber.from('1000'))`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:584:22-585:27: `
        .connect(subOwner)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:585:27-586:68: `
        .transfer(vrfCoordinatorV2.address, BigNumber.from('1000'))`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:586:54-586:67: `.from('1000')`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:588:36-588:51: `.connect(owner)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:588:51-588:79: `.recoverFunds(randomAddress)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:591:23-591:36: `.from('1000')`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:591:47-591:72: `.balanceOf(randomAddress)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:597:38-597:56: `.connect(subOwner)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:597:56-597:77: `.createSubscription()`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:598:29-598:36: `.wait()`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:602:5-604:55: `await vrfCoordinatorV2
      .connect(subOwner)
      .addConsumer(subId, await consumer.getAddress())`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:602:27-603:25: `
      .connect(subOwner)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:603:25-604:55: `
      .addConsumer(subId, await consumer.getAddress())`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:604:41-604:54: `.getAddress()`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:608:16-609:27: `
        .connect(subOwner)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:609:27-614:10: `
        .transferAndCall(
          vrfCoordinatorV2.address,
          BigNumber.from('1000000000000000000'),
          ethers.utils.defaultAbiCoder.encode(['uint64'], [subId]),
        )`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:612:20-612:48: `.from('1000000000000000000')`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:613:17-613:67: `.utils.defaultAbiCoder.encode(['uint64'], [subId])`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:621:23-621:39: `.connect(random)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:621:39-621:73: `.addConsumer(subId, randomAddress)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:624:23-624:39: `.connect(random)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:624:39-624:76: `.removeConsumer(subId, randomAddress)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:629:23-630:25: `
        .connect(random)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:630:25-631:64: `
        .requestSubscriptionOwnerTransfer(subId, randomAddress)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:636:23-637:27: `
        .connect(subOwner)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:637:27-638:64: `
        .requestSubscriptionOwnerTransfer(subId, randomAddress)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:645:23-645:41: `.connect(subOwner)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:645:41-645:80: `.acceptSubscriptionOwnerTransfer(subId)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:650:23-650:39: `.connect(random)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:650:39-650:78: `.acceptSubscriptionOwnerTransfer(subId)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:656:21-657:23: `
      .connect(random)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:657:23-658:64: `
      .requestSubscriptionOwnerTransfer(subId, subOwnerAddress)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:659:21-659:39: `.connect(subOwner)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:659:39-659:78: `.acceptSubscriptionOwnerTransfer(subId)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:663:23-663:39: `.connect(random)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:663:39-663:80: `.cancelSubscription(subId, randomAddress)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:667:23-668:27: `
        .connect(subOwner)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:668:27-669:50: `
        .cancelSubscription(subId, randomAddress)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:673:43-673:68: `.balanceOf(randomAddress)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:687:25-687:41: `.connect(random)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:687:41-693:10: `.requestRandomWords(
          kh, // keyhash
          12301928312, // subId
          1, // minReqConf
          1000, // callbackGasLimit
          1, // numWords
        )`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:698:25-698:41: `.connect(random)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:698:41-704:10: `.requestRandomWords(
          kh, // keyhash
          subId, // subId
          1, // minReqConf
          1000, // callbackGasLimit
          1, // numWords
        )`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:711:25-711:43: `.connect(consumer)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:711:43-717:10: `.requestRandomWords(
          kh, // keyhash
          subId, // subId
          0, // minReqConf
          1000, // callbackGasLimit
          1, // numWords
        )`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:721:7-725:8: `await linkToken.connect(subOwner).transferAndCall(
        vrfCoordinatorV2.address,
        BigNumber.from('1000000000000000000'), // 1 link > 0.1 min.
        ethers.utils.defaultAbiCoder.encode(['uint64'], [subId]),
      )`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:721:22-721:40: `.connect(subOwner)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:721:40-725:8: `.transferAndCall(
        vrfCoordinatorV2.address,
        BigNumber.from('1000000000000000000'), // 1 link > 0.1 min.
        ethers.utils.defaultAbiCoder.encode(['uint64'], [subId]),
      )`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:723:18-723:46: `.from('1000000000000000000')`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:724:15-724:65: `.utils.defaultAbiCoder.encode(['uint64'], [subId])`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:727:25-727:43: `.connect(consumer)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:727:43-733:10: `.requestRandomWords(
          kh, // keyhash
          subId, // subId
          1, // minReqConf
          1000001, // callbackGasLimit
          1, // numWords
        )`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:738:7-742:8: `await linkToken.connect(subOwner).transferAndCall(
        vrfCoordinatorV2.address,
        BigNumber.from('1000000000000000000'), // 1 link > 0.1 min.
        ethers.utils.defaultAbiCoder.encode(['uint64'], [subId]),
      )`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:738:22-738:40: `.connect(subOwner)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:738:40-742:8: `.transferAndCall(
        vrfCoordinatorV2.address,
        BigNumber.from('1000000000000000000'), // 1 link > 0.1 min.
        ethers.utils.defaultAbiCoder.encode(['uint64'], [subId]),
      )`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:740:18-740:46: `.from('1000000000000000000')`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:741:15-741:65: `.utils.defaultAbiCoder.encode(['uint64'], [subId])`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:743:40-743:58: `.connect(consumer)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:743:58-749:8: `.requestRandomWords(
        kh, // keyhash
        subId, // subId
        1, // minReqConf
        1000000, // callbackGasLimit
        1, // numWords
      )`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:750:33-750:40: `.wait()`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:752:40-752:58: `.connect(consumer)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:752:58-758:8: `.requestRandomWords(
        kh, // keyhash
        subId, // subId
        1, // minReqConf
        1000000, // callbackGasLimit
        1, // numWords
      )`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:759:33-759:40: `.wait()`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:765:7-769:8: `await linkToken.connect(subOwner).transferAndCall(
        vrfCoordinatorV2.address,
        BigNumber.from('1000000000000000000'), // 1 link > 0.1 min.
        ethers.utils.defaultAbiCoder.encode(['uint64'], [subId]),
      )`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:765:22-765:40: `.connect(subOwner)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:765:40-769:8: `.transferAndCall(
        vrfCoordinatorV2.address,
        BigNumber.from('1000000000000000000'), // 1 link > 0.1 min.
        ethers.utils.defaultAbiCoder.encode(['uint64'], [subId]),
      )`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:767:18-767:46: `.from('1000000000000000000')`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:768:15-768:65: `.utils.defaultAbiCoder.encode(['uint64'], [subId])`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:770:43-770:61: `.connect(consumer)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:770:61-776:8: `.requestRandomWords(
        kh, // keyhash
        subId, // subId
        1, // minReqConf
        1000, // callbackGasLimit
        1, // numWords
      )`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:777:37-777:44: `.wait()`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:791:20-791:28: `.from(1)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:800:51-800:64: `.getAddress()`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:805:7-809:8: `await linkToken.connect(subOwner).transferAndCall(
        vrfCoordinatorV2.address,
        BigNumber.from('1000000000000000000'), // 1 link > 0.1 min.
        ethers.utils.defaultAbiCoder.encode(['uint64'], [subId]),
      )`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:805:22-805:40: `.connect(subOwner)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:805:40-809:8: `.transferAndCall(
        vrfCoordinatorV2.address,
        BigNumber.from('1000000000000000000'), // 1 link > 0.1 min.
        ethers.utils.defaultAbiCoder.encode(['uint64'], [subId]),
      )`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:807:18-807:46: `.from('1000000000000000000')`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:808:15-808:65: `.utils.defaultAbiCoder.encode(['uint64'], [subId])`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:810:7-810:81: `await vrfCoordinatorV2.connect(subOwner).addConsumer(subId, randomAddress)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:810:29-810:47: `.connect(subOwner)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:810:47-810:81: `.addConsumer(subId, randomAddress)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:811:7-813:46: `await vrfCoordinatorV2
        .connect(subOwner)
        .removeConsumer(subId, randomAddress)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:811:29-812:27: `
        .connect(subOwner)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:812:27-813:46: `
        .removeConsumer(subId, randomAddress)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:815:25-815:41: `.connect(random)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:815:41-821:10: `.requestRandomWords(
          kh, // keyhash
          subId, // subId
          1, // minReqConf
          1000, // callbackGasLimit
          1, // numWords
        )`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:827:7-831:8: `await linkToken.connect(subOwner).transferAndCall(
        vrfCoordinatorV2.address,
        BigNumber.from('1000000000000000000'), // 1 link > 0.1 min.
        ethers.utils.defaultAbiCoder.encode(['uint64'], [subId]),
      )`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:827:22-827:40: `.connect(subOwner)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:827:40-831:8: `.transferAndCall(
        vrfCoordinatorV2.address,
        BigNumber.from('1000000000000000000'), // 1 link > 0.1 min.
        ethers.utils.defaultAbiCoder.encode(['uint64'], [subId]),
      )`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:829:18-829:46: `.from('1000000000000000000')`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:830:15-830:65: `.utils.defaultAbiCoder.encode(['uint64'], [subId])`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:832:7-834:50: `await vrfCoordinatorV2
        .connect(subOwner)
        .cancelSubscription(subId, randomAddress)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:832:29-833:27: `
        .connect(subOwner)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:833:27-834:50: `
        .cancelSubscription(subId, randomAddress)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:835:7-835:56: `subId = await createSubscriptionWithConsumers([])`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:839:25-839:41: `.connect(random)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:839:41-845:10: `.requestRandomWords(
          kh, // keyhash
          subId, // subId
          1, // minReqConf
          1000, // callbackGasLimit
          1, // numWords
        )`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:855:25-856:27: `
          .connect(oracle)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:856:27-857:72: `
          .oracleWithdraw(randomAddressString(), BigNumber.from('100'))`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:857:59-857:71: `.from('100')`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:865:7-871:10: `await vrfCoordinatorV2TestHelper
        .connect(oracle)
        .calculatePaymentAmountTest(
          BigNumber.from('0'), // Gas after payment
          0, // Fee PPM
          BigNumber.from('1000000000'), // Wei per unit gas (gas price)
        )`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:865:39-866:25: `
        .connect(oracle)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:866:25-871:10: `
        .calculatePaymentAmountTest(
          BigNumber.from('0'), // Gas after payment
          0, // Fee PPM
          BigNumber.from('1000000000'), // Wei per unit gas (gas price)
        )`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:868:20-868:30: `.from('0')`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:870:20-870:39: `.from('1000000000')`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:872:61-872:80: `.getPaymentAmount()`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:880:22-880:68: `.gt(BigNumber.from('33333333330000000000000'))`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:880:35-880:67: `.from('33333333330000000000000')`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:884:22-884:69: `.lt(BigNumber.from('166666666600000000000000'))`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:884:35-884:68: `.from('166666666600000000000000')`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:894:35-894:51: `.connect(oracle)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:894:51-898:10: `.calculatePaymentAmountTest(
          BigNumber.from('0'), // Gas after payment
          0, // Fee PPM
          BigNumber.from('1000000000000000000'),
        )`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:895:20-895:30: `.from('0')`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:897:20-897:48: `.from('1000000000000000000')`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:903:51-906:8: `.getContractFactory(
        'src/v0.7/tests/MockV3Aggregator.sol:MockV3Aggregator',
        owner,
      )`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:907:61-910:8: `.getContractFactory(
        'VRFCoordinatorV2TestHelper',
        owner,
      )`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:911:60-911:73: `.deploy(0, 0)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:913:48-917:10: `.deploy(
          linkToken.address,
          blockHashStore.address,
          mockLinkEthZero.address,
        )`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:919:39-920:27: `
          .connect(oracle)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:920:27-925:12: `
          .calculatePaymentAmountTest(
            BigNumber.from('0'), // Gas after payment
            0, // Fee PPM
            BigNumber.from('1000000000000000000'),
          )`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:922:22-922:32: `.from('0')`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:924:22-924:50: `.from('1000000000000000000')`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:927:64-927:78: `.deploy(0, -1)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:929:48-933:10: `.deploy(
          linkToken.address,
          blockHashStore.address,
          mockLinkEthNegative.address,
        )`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:935:43-936:26: `
          .connect(owner)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:936:26-941:12: `
          .calculatePaymentAmountTest(
            BigNumber.from('0'), // Gas after payment
            0, // Fee PPM
            BigNumber.from('1000000000000000000'),
          )`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:938:22-938:32: `.from('0')`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:940:22-940:50: `.from('1000000000000000000')`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:948:33-948:43: `.from('1')`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:948:54-948:64: `.from('2')`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:949:40-949:59: `.hashOfKey(testKey)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:951:25-951:70: `.registerProvingKey(subOwnerAddress, testKey)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:955:47-955:66: `.getRequestConfig()`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:959:33-959:43: `.from('1')`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:959:54-959:64: `.from('2')`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:960:40-960:59: `.hashOfKey(testKey)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:961:7-961:74: `await vrfCoordinatorV2.registerProvingKey(subOwnerAddress, testKey)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:961:29-961:74: `.registerProvingKey(subOwnerAddress, testKey)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:963:25-963:70: `.registerProvingKey(subOwnerAddress, testKey)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:967:33-967:43: `.from('1')`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:967:54-967:64: `.from('2')`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:968:40-968:59: `.hashOfKey(testKey)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:969:7-969:74: `await vrfCoordinatorV2.registerProvingKey(subOwnerAddress, testKey)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:969:29-969:74: `.registerProvingKey(subOwnerAddress, testKey)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:970:36-970:66: `.deregisterProvingKey(testKey)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:973:47-973:66: `.getRequestConfig()`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:977:33-977:43: `.from('1')`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:977:54-977:64: `.from('2')`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:978:40-978:59: `.hashOfKey(testKey)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:980:25-980:55: `.deregisterProvingKey(testKey)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:984:33-984:43: `.from('1')`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:984:54-984:64: `.from('2')`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:985:7-985:74: `await vrfCoordinatorV2.registerProvingKey(subOwnerAddress, testKey)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:985:29-985:74: `.registerProvingKey(subOwnerAddress, testKey)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:986:7-986:59: `await vrfCoordinatorV2.deregisterProvingKey(testKey)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:986:29-986:59: `.deregisterProvingKey(testKey)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:987:7-987:72: `await vrfCoordinatorV2.registerProvingKey(randomAddress, testKey)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:987:29-987:72: `.registerProvingKey(randomAddress, testKey)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:998:19-998:29: `.from('1')`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:998:40-998:50: `.from('3')`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:999:19-999:29: `.from('1')`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:999:40-999:50: `.from('2')`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:1000:18-1000:28: `.from('1')`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:1001:18-1001:28: `.from('1')`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:1002:18-1002:28: `.from('1')`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:1004:19-1004:29: `.from('1')`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:1004:40-1004:50: `.from('2')`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:1005:19-1005:29: `.from('1')`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:1005:40-1005:50: `.from('2')`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:1006:18-1006:28: `.from('1')`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:1016:25-1016:41: `.connect(oracle)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:1016:41-1016:71: `.fulfillRandomWords(proof, rc)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:1023:19-1023:29: `.from('1')`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:1023:40-1023:50: `.from('2')`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:1024:19-1024:29: `.from('1')`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:1024:40-1024:50: `.from('2')`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:1025:18-1025:28: `.from('1')`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:1026:18-1026:28: `.from('1')`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:1027:18-1027:28: `.from('1')`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:1029:19-1029:29: `.from('1')`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:1029:40-1029:50: `.from('2')`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:1030:19-1030:29: `.from('1')`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:1030:40-1030:50: `.from('2')`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:1031:18-1031:28: `.from('1')`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:1041:25-1041:41: `.connect(oracle)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:1041:41-1041:71: `.fulfillRandomWords(proof, rc)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:1046:7-1050:8: `await linkToken.connect(subOwner).transferAndCall(
        vrfCoordinatorV2.address,
        BigNumber.from('1000000000000000000'), // 1 link > 0.1 min.
        ethers.utils.defaultAbiCoder.encode(['uint64'], [subId]),
      )`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:1046:22-1046:40: `.connect(subOwner)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:1046:40-1050:8: `.transferAndCall(
        vrfCoordinatorV2.address,
        BigNumber.from('1000000000000000000'), // 1 link > 0.1 min.
        ethers.utils.defaultAbiCoder.encode(['uint64'], [subId]),
      )`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:1048:18-1048:46: `.from('1000000000000000000')`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:1049:15-1049:65: `.utils.defaultAbiCoder.encode(['uint64'], [subId])`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:1051:33-1051:43: `.from('1')`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:1051:54-1051:64: `.from('2')`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:1052:40-1052:59: `.hashOfKey(testKey)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:1053:40-1053:58: `.connect(consumer)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:1053:58-1059:8: `.requestRandomWords(
        kh, // keyhash
        subId, // subId
        1, // minReqConf
        1000, // callbackGasLimit
        1, // numWords
      )`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:1060:34-1060:41: `.wait()`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:1065:19-1065:29: `.from('1')`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:1065:40-1065:50: `.from('2')`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:1066:19-1066:29: `.from('1')`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:1066:40-1066:50: `.from('2')`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:1067:18-1067:28: `.from('1')`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:1068:18-1068:28: `.from('1')`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:1071:19-1071:29: `.from('1')`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:1071:40-1071:50: `.from('2')`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:1072:19-1072:29: `.from('1')`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:1072:40-1072:50: `.from('2')`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:1073:18-1073:28: `.from('1')`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:1080:23-1080:36: `.getAddress()`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:1083:25-1083:41: `.connect(oracle)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:1083:41-1083:71: `.fulfillRandomWords(proof, rc)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:1104:37-1104:53: `.connect(random)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:1104:53-1104:67: `.getFeeTier(0)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:1105:37-1105:53: `.connect(random)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:1105:53-1105:67: `.getFeeTier(5)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:1106:37-1106:53: `.connect(random)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:1106:53-1106:68: `.getFeeTier(10)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:1109:37-1109:53: `.connect(random)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:1109:53-1109:68: `.getFeeTier(11)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:1110:37-1110:53: `.connect(random)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:1110:53-1110:68: `.getFeeTier(12)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:1111:37-1111:53: `.connect(random)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:1111:53-1111:68: `.getFeeTier(20)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:1114:37-1114:53: `.connect(random)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:1114:53-1114:68: `.getFeeTier(21)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:1115:37-1115:53: `.connect(random)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:1115:53-1115:68: `.getFeeTier(30)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:1118:37-1118:53: `.connect(random)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:1118:53-1118:68: `.getFeeTier(31)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:1119:37-1119:53: `.connect(random)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:1119:53-1119:68: `.getFeeTier(40)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:1122:37-1122:53: `.connect(random)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:1122:53-1122:68: `.getFeeTier(41)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:1123:37-1123:53: `.connect(random)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2.test.ts:1123:53-1123:72: `.getFeeTier(123102)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2Mock.test.ts:58:40-58:58: `.connect(subOwner)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2Mock.test.ts:58:58-58:79: `.createSubscription()`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2Mock.test.ts:61:43-61:62: `.getSubscription(1)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2Mock.test.ts:62:15-62:34: `.balance.toString()`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2Mock.test.ts:66:40-66:58: `.connect(subOwner)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2Mock.test.ts:66:58-66:79: `.createSubscription()`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2Mock.test.ts:69:40-69:58: `.connect(subOwner)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2Mock.test.ts:69:58-69:79: `.createSubscription()`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2Mock.test.ts:78:29-79:29: `
          .connect(subOwner)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2Mock.test.ts:79:29-80:51: `
          .addConsumer(subId, testConsumerAddress)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2Mock.test.ts:84:43-85:27: `
        .connect(subOwner)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2Mock.test.ts:85:27-86:32: `
        .getSubscription(subId)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2Mock.test.ts:91:29-92:29: `
          .connect(subOwner)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2Mock.test.ts:92:29-93:47: `
          .addConsumer(4, testConsumerAddress)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2Mock.test.ts:99:50-99:58: `.from(i)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2Mock.test.ts:99:58-100:61: `
          .add('0x1000000000000000000000000000000000000000')`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2Mock.test.ts:100:61-101:25: `
          .toHexString()`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2Mock.test.ts:103:31-104:31: `
            .connect(subOwner)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2Mock.test.ts:104:31-105:57: `
            .addConsumer(subId, testIncrementingAddress)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2Mock.test.ts:109:29-110:29: `
          .connect(subOwner)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2Mock.test.ts:110:29-111:51: `
          .addConsumer(subId, testConsumerAddress)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2Mock.test.ts:120:31-120:49: `.connect(subOwner)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2Mock.test.ts:120:49-120:74: `.addConsumer(subId, addr)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2Mock.test.ts:124:43-125:27: `
        .connect(subOwner)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2Mock.test.ts:125:27-126:32: `
        .getSubscription(subId)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2Mock.test.ts:130:29-131:29: `
          .connect(subOwner)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2Mock.test.ts:131:29-132:54: `
          .removeConsumer(subId, testConsumerAddress)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2Mock.test.ts:137:7-137:80: `sub = await vrfCoordinatorV2Mock.connect(subOwner).getSubscription(subId)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2Mock.test.ts:137:39-137:57: `.connect(subOwner)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2Mock.test.ts:137:57-137:80: `.getSubscription(subId)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2Mock.test.ts:142:29-143:29: `
          .connect(subOwner)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2Mock.test.ts:143:29-144:50: `
          .removeConsumer(4, testConsumerAddress)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2Mock.test.ts:151:29-152:29: `
          .connect(subOwner)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2Mock.test.ts:152:29-153:51: `
          .addConsumer(subId, testConsumerAddress)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2Mock.test.ts:157:29-158:29: `
          .connect(subOwner)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2Mock.test.ts:158:29-159:54: `
          .removeConsumer(subId, testConsumerAddress)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2Mock.test.ts:163:29-164:29: `
          .connect(subOwner)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2Mock.test.ts:164:29-165:54: `
          .removeConsumer(subId, testConsumerAddress)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2Mock.test.ts:173:29-173:47: `.connect(subOwner)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2Mock.test.ts:173:47-173:80: `.fundSubscription(subId, oneLink)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2Mock.test.ts:177:43-178:27: `
        .connect(subOwner)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2Mock.test.ts:178:27-179:32: `
        .getSubscription(subId)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2Mock.test.ts:184:29-184:47: `.connect(subOwner)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2Mock.test.ts:184:47-184:76: `.fundSubscription(4, oneLink)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2Mock.test.ts:192:29-192:47: `.connect(subOwner)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2Mock.test.ts:192:47-192:70: `.getSubscription(subId)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2Mock.test.ts:196:29-197:29: `
          .connect(subOwner)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2Mock.test.ts:197:29-198:60: `
          .cancelSubscription(subId, subOwner.getAddress())`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2Mock.test.ts:198:46-198:59: `.getAddress()`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2Mock.test.ts:202:29-202:47: `.connect(subOwner)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2Mock.test.ts:202:47-202:70: `.getSubscription(subId)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2Mock.test.ts:211:29-212:29: `
          .connect(subOwner)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2Mock.test.ts:212:29-213:61: `
          .requestRandomWords(keyhash, subId, 3, 500_000, 2)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2Mock.test.ts:218:7-220:57: `await vrfCoordinatorV2Mock
        .connect(subOwner)
        .addConsumer(subId, await subOwner.getAddress())`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2Mock.test.ts:218:33-219:27: `
        .connect(subOwner)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2Mock.test.ts:219:27-220:57: `
        .addConsumer(subId, await subOwner.getAddress())`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2Mock.test.ts:220:43-220:56: `.getAddress()`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2Mock.test.ts:223:29-224:29: `
          .connect(subOwner)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2Mock.test.ts:224:29-225:61: `
          .requestRandomWords(keyhash, subId, 3, 500_000, 2)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2Mock.test.ts:231:29-232:27: `
          .connect(random)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2Mock.test.ts:232:27-233:56: `
          .fulfillRandomWords(1, vrfConsumerV2.address)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2Mock.test.ts:238:7-240:51: `await vrfCoordinatorV2Mock
        .connect(subOwner)
        .addConsumer(subId, vrfConsumerV2.address)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2Mock.test.ts:238:33-239:27: `
        .connect(subOwner)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2Mock.test.ts:239:27-240:51: `
        .addConsumer(subId, vrfConsumerV2.address)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2Mock.test.ts:242:29-242:47: `.connect(subOwner)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2Mock.test.ts:242:47-242:80: `.fundSubscription(subId, oneLink)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2Mock.test.ts:248:28-249:29: `
          .connect(subOwner)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2Mock.test.ts:249:29-250:60: `
          .requestRandomness(keyhash, subId, 3, 500_000, 2)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2Mock.test.ts:255:42-256:25: `
        .connect(random)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2Mock.test.ts:256:25-257:54: `
        .fulfillRandomWords(1, vrfConsumerV2.address)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2Mock.test.ts:258:29-258:36: `.wait()`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2Mock.test.ts:264:42-265:53: `
          .sub(BigNumber.from('100119017000000000'))`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2Mock.test.ts:265:25-265:52: `.from('100119017000000000')`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2Mock.test.ts:265:53-266:45: `
          .lt(BigNumber.from('10000000000'))`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2Mock.test.ts:266:24-266:44: `.from('10000000000')`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2Mock.test.ts:270:43-271:25: `
        .connect(random)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2Mock.test.ts:271:25-272:32: `
        .getSubscription(subId)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2Mock.test.ts:279:7-281:51: `await vrfCoordinatorV2Mock
        .connect(subOwner)
        .addConsumer(subId, vrfConsumerV2.address)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2Mock.test.ts:279:33-280:27: `
        .connect(subOwner)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2Mock.test.ts:280:27-281:51: `
        .addConsumer(subId, vrfConsumerV2.address)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2Mock.test.ts:283:29-283:47: `.connect(subOwner)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2Mock.test.ts:283:47-283:80: `.fundSubscription(subId, oneLink)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2Mock.test.ts:289:28-290:29: `
          .connect(subOwner)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2Mock.test.ts:290:29-291:60: `
          .requestRandomness(keyhash, subId, 3, 500_000, 2)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2Mock.test.ts:298:29-299:27: `
          .connect(random)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2Mock.test.ts:299:27-304:12: `
          .fulfillRandomWordsWithOverride(
            1,
            vrfConsumerV2.address,
            [1, 2, 3, 4, 5],
          )`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2Mock.test.ts:308:42-309:25: `
        .connect(random)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2Mock.test.ts:309:25-310:80: `
        .fulfillRandomWordsWithOverride(1, vrfConsumerV2.address, [2533, 1768])`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2Mock.test.ts:311:29-311:36: `.wait()`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2Mock.test.ts:317:42-318:53: `
          .sub(BigNumber.from('100119017000000000'))`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2Mock.test.ts:318:25-318:52: `.from('100119017000000000')`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2Mock.test.ts:318:53-319:45: `
          .lt(BigNumber.from('10000000000'))`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2Mock.test.ts:319:24-319:44: `.from('10000000000')`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2Mock.test.ts:323:43-324:25: `
        .connect(random)`
$DIR/contracts/test/v0.8/dev/VRFCoordinatorV2Mock.test.ts:324:25-325:32: `
        .getSubscription(subId)`
$DIR/contracts/test/v0.8/dev/VRFV2Wrapper.test.ts:184:7-184:66: `bigNumEquals(BigNumber.from('3986666666666666666'), result)`
$DIR/contracts/test/v0.8/dev/VRFV2Wrapper.test.ts:184:29-184:57: `.from('3986666666666666666')`
$DIR/contracts/test/v0.8/dev/VRFV2Wrapper.test.ts:197:7-197:66: `bigNumEquals(BigNumber.from('5820000000000000000'), result)`
$DIR/contracts/test/v0.8/dev/VRFV2Wrapper.test.ts:197:29-197:57: `.from('5820000000000000000')`
$DIR/contracts/test/v0.8/dev/VRFV2Wrapper.test.ts:210:7-210:67: `bigNumEquals(BigNumber.from('11540000000000000000'), result)`
$DIR/contracts/test/v0.8/dev/VRFV2Wrapper.test.ts:210:29-210:58: `.from('11540000000000000000')`
$DIR/contracts/test/v0.8/dev/VRFV2Wrapper.test.ts:223:7-223:67: `bigNumEquals(BigNumber.from('13100000000000000000'), result)`
$DIR/contracts/test/v0.8/dev/VRFV2Wrapper.test.ts:223:29-223:58: `.from('13100000000000000000')`
$DIR/contracts/test/v0.8/dev/VRFV2Wrapper.test.ts:229:7-229:24: `await configure()`
$DIR/contracts/test/v0.8/dev/VRFV2Wrapper.test.ts:231:33-231:52: `.connect(requester)`
$DIR/contracts/test/v0.8/dev/VRFV2Wrapper.test.ts:231:52-231:64: `.getConfig()`
$DIR/contracts/test/v0.8/dev/VRFV2Wrapper.test.ts:232:7-232:64: `bigNumEquals(BigNumber.from('4000000000000000'), resp[0])`
$DIR/contracts/test/v0.8/dev/VRFV2Wrapper.test.ts:232:29-232:54: `.from('4000000000000000')`
$DIR/contracts/test/v0.8/dev/VRFV2Wrapper.test.ts:233:7-233:35: `bigNumEquals(2_700, resp[1])`
$DIR/contracts/test/v0.8/dev/VRFV2Wrapper.test.ts:234:7-234:54: `bigNumEquals(BigNumber.from('100000'), resp[2])`
$DIR/contracts/test/v0.8/dev/VRFV2Wrapper.test.ts:234:29-234:44: `.from('100000')`
$DIR/contracts/test/v0.8/dev/VRFV2Wrapper.test.ts:235:7-235:48: `bigNumEquals(wrapperGasOverhead, resp[3])`
$DIR/contracts/test/v0.8/dev/VRFV2Wrapper.test.ts:236:7-236:52: `bigNumEquals(coordinatorGasOverhead, resp[4])`
$DIR/contracts/test/v0.8/dev/VRFV2Wrapper.test.ts:237:7-237:54: `bigNumEquals(wrapperPremiumPercentage, resp[5])`
$DIR/contracts/test/v0.8/dev/VRFV2Wrapper.test.ts:239:7-239:32: `bigNumEquals(10, resp[7])`
$DIR/contracts/test/v0.8/dev/VRFV2Wrapper.test.ts:243:7-243:24: `await configure()`
$DIR/contracts/test/v0.8/dev/VRFV2Wrapper.test.ts:246:16-246:31: `.connect(owner)`
$DIR/contracts/test/v0.8/dev/VRFV2Wrapper.test.ts:246:31-252:10: `.setConfig(
          140_000, // wrapperGasOverhead
          195_000, // coordinatorGasOverhead
          9, // wrapperPremiumPercentage
          toBytes32String('keyHash2'), // keyHash
          9, // maxNumWords
        )`
$DIR/contracts/test/v0.8/dev/VRFV2Wrapper.test.ts:255:33-255:52: `.connect(requester)`
$DIR/contracts/test/v0.8/dev/VRFV2Wrapper.test.ts:255:52-255:64: `.getConfig()`
$DIR/contracts/test/v0.8/dev/VRFV2Wrapper.test.ts:256:7-256:64: `bigNumEquals(BigNumber.from('4000000000000000'), resp[0])`
$DIR/contracts/test/v0.8/dev/VRFV2Wrapper.test.ts:256:29-256:54: `.from('4000000000000000')`
$DIR/contracts/test/v0.8/dev/VRFV2Wrapper.test.ts:257:7-257:35: `bigNumEquals(2_700, resp[1])`
$DIR/contracts/test/v0.8/dev/VRFV2Wrapper.test.ts:258:7-258:54: `bigNumEquals(BigNumber.from('100000'), resp[2])`
$DIR/contracts/test/v0.8/dev/VRFV2Wrapper.test.ts:258:29-258:44: `.from('100000')`
$DIR/contracts/test/v0.8/dev/VRFV2Wrapper.test.ts:259:7-259:37: `bigNumEquals(140_000, resp[3])`
$DIR/contracts/test/v0.8/dev/VRFV2Wrapper.test.ts:260:7-260:37: `bigNumEquals(195_000, resp[4])`
$DIR/contracts/test/v0.8/dev/VRFV2Wrapper.test.ts:261:7-261:31: `bigNumEquals(9, resp[5])`
$DIR/contracts/test/v0.8/dev/VRFV2Wrapper.test.ts:263:7-263:31: `bigNumEquals(9, resp[7])`
$DIR/contracts/test/v0.8/dev/VRFV2Wrapper.test.ts:268:16-268:35: `.connect(requester)`
$DIR/contracts/test/v0.8/dev/VRFV2Wrapper.test.ts:268:35-274:10: `.setConfig(
          10_000, // wrapperGasOverhead
          10_000, // coordinatorGasOverhead
          10, // wrapperPremiumPercentage
          toBytes32String('keyHash'), // keyHash
          10, // maxNumWords
        )`
$DIR/contracts/test/v0.8/dev/VRFV2Wrapper.test.ts:280:27-280:46: `.connect(requester)`
$DIR/contracts/test/v0.8/dev/VRFV2Wrapper.test.ts:280:46-280:77: `.calculateRequestPrice(100_000)`
$DIR/contracts/test/v0.8/dev/VRFV2Wrapper.test.ts:284:7-284:24: `await configure()`
$DIR/contracts/test/v0.8/dev/VRFV2Wrapper.test.ts:294:33-295:28: `
        .connect(requester)`
$DIR/contracts/test/v0.8/dev/VRFV2Wrapper.test.ts:295:28-296:65: `
        .calculateRequestPrice(100_000, { gasPrice: fiftyGwei })`
$DIR/contracts/test/v0.8/dev/VRFV2Wrapper.test.ts:297:7-297:35: `bigNumEquals(expected, resp)`
$DIR/contracts/test/v0.8/dev/VRFV2Wrapper.test.ts:301:7-301:24: `await configure()`
$DIR/contracts/test/v0.8/dev/VRFV2Wrapper.test.ts:311:33-312:28: `
        .connect(requester)`
$DIR/contracts/test/v0.8/dev/VRFV2Wrapper.test.ts:312:28-313:70: `
        .calculateRequestPrice(100_000, { gasPrice: oneHundredGwei })`
$DIR/contracts/test/v0.8/dev/VRFV2Wrapper.test.ts:314:7-314:35: `bigNumEquals(expected, resp)`
$DIR/contracts/test/v0.8/dev/VRFV2Wrapper.test.ts:318:7-318:24: `await configure()`
$DIR/contracts/test/v0.8/dev/VRFV2Wrapper.test.ts:328:33-329:28: `
        .connect(requester)`
$DIR/contracts/test/v0.8/dev/VRFV2Wrapper.test.ts:329:28-330:70: `
        .calculateRequestPrice(200_000, { gasPrice: oneHundredGwei })`
$DIR/contracts/test/v0.8/dev/VRFV2Wrapper.test.ts:331:7-331:35: `bigNumEquals(expected, resp)`
$DIR/contracts/test/v0.8/dev/VRFV2Wrapper.test.ts:338:16-339:30: `
          .connect(requester)`
$DIR/contracts/test/v0.8/dev/VRFV2Wrapper.test.ts:339:30-340:57: `
          .estimateRequestPrice(100_000, oneHundredGwei)`
$DIR/contracts/test/v0.8/dev/VRFV2Wrapper.test.ts:344:7-344:24: `await configure()`
$DIR/contracts/test/v0.8/dev/VRFV2Wrapper.test.ts:354:33-355:28: `
        .connect(requester)`
$DIR/contracts/test/v0.8/dev/VRFV2Wrapper.test.ts:355:28-356:50: `
        .estimateRequestPrice(100_000, fiftyGwei)`
$DIR/contracts/test/v0.8/dev/VRFV2Wrapper.test.ts:357:7-357:35: `bigNumEquals(expected, resp)`
$DIR/contracts/test/v0.8/dev/VRFV2Wrapper.test.ts:361:7-361:24: `await configure()`
$DIR/contracts/test/v0.8/dev/VRFV2Wrapper.test.ts:371:33-372:28: `
        .connect(requester)`
$DIR/contracts/test/v0.8/dev/VRFV2Wrapper.test.ts:372:28-373:55: `
        .estimateRequestPrice(100_000, oneHundredGwei)`
$DIR/contracts/test/v0.8/dev/VRFV2Wrapper.test.ts:374:7-374:35: `bigNumEquals(expected, resp)`
$DIR/contracts/test/v0.8/dev/VRFV2Wrapper.test.ts:378:7-378:24: `await configure()`
$DIR/contracts/test/v0.8/dev/VRFV2Wrapper.test.ts:388:33-389:28: `
        .connect(requester)`
$DIR/contracts/test/v0.8/dev/VRFV2Wrapper.test.ts:389:28-390:55: `
        .estimateRequestPrice(200_000, oneHundredGwei)`
$DIR/contracts/test/v0.8/dev/VRFV2Wrapper.test.ts:391:7-391:35: `bigNumEquals(expected, resp)`
$DIR/contracts/test/v0.8/dev/VRFV2Wrapper.test.ts:398:17-398:40: `.connect(consumerOwner)`
$DIR/contracts/test/v0.8/dev/VRFV2Wrapper.test.ts:398:40-401:11: `.makeRequest(80_000, 3, 2, {
          gasPrice: oneHundredGwei,
          gasLimit: 1_000_000,
        })`
$DIR/contracts/test/v0.8/dev/VRFV2Wrapper.test.ts:405:7-405:18: `configure()`
$DIR/contracts/test/v0.8/dev/VRFV2Wrapper.test.ts:407:18-408:26: `
          .connect(owner)`
$DIR/contracts/test/v0.8/dev/VRFV2Wrapper.test.ts:408:26-412:13: `
          .transfer(consumerWrongLink.address, oneHundredLink, {
            gasPrice: oneHundredGwei,
            gasLimit: 1_000_000,
          })`
$DIR/contracts/test/v0.8/dev/VRFV2Wrapper.test.ts:415:26-415:49: `.connect(consumerOwner)`
$DIR/contracts/test/v0.8/dev/VRFV2Wrapper.test.ts:415:49-418:11: `.makeRequest(80_000, 3, 2, {
          gasPrice: oneHundredGwei,
          gasLimit: 1_000_000,
        })`
$DIR/contracts/test/v0.8/dev/VRFV2Wrapper.test.ts:422:7-422:24: `await configure()`
$DIR/contracts/test/v0.8/dev/VRFV2Wrapper.test.ts:423:7-423:51: `await fund(consumer.address, oneHundredLink)`
$DIR/contracts/test/v0.8/dev/VRFV2Wrapper.test.ts:424:7-424:22: `await fundSub()`
$DIR/contracts/test/v0.8/dev/VRFV2Wrapper.test.ts:427:17-427:40: `.connect(consumerOwner)`
$DIR/contracts/test/v0.8/dev/VRFV2Wrapper.test.ts:427:40-430:11: `.makeRequest(100_000, 3, 1, {
          gasPrice: oneHundredGwei,
          gasLimit: 1_000_000,
        })`
$DIR/contracts/test/v0.8/dev/VRFV2Wrapper.test.ts:436:7-436:65: `bigNumEquals(price, await link.balanceOf(wrapper.address))`
$DIR/contracts/test/v0.8/dev/VRFV2Wrapper.test.ts:436:37-436:64: `.balanceOf(wrapper.address)`
$DIR/contracts/test/v0.8/dev/VRFV2Wrapper.test.ts:438:49-438:79: `.s_requests(1 /* requestId */)`
$DIR/contracts/test/v0.8/dev/VRFV2Wrapper.test.ts:439:7-439:32: `bigNumEquals(price, paid)`
$DIR/contracts/test/v0.8/dev/VRFV2Wrapper.test.ts:444:20-445:26: `
          .connect(owner)`
$DIR/contracts/test/v0.8/dev/VRFV2Wrapper.test.ts:445:26-448:13: `
          .fulfillRandomWordsWithOverride(1, wrapper.address, [123], {
            gasLimit: 1_000_000,
          })`
$DIR/contracts/test/v0.8/dev/VRFV2Wrapper.test.ts:455:35-456:52: `
        .sub(await link.balanceOf(wrapper.address))`
$DIR/contracts/test/v0.8/dev/VRFV2Wrapper.test.ts:456:24-456:51: `.balanceOf(wrapper.address)`
$DIR/contracts/test/v0.8/dev/VRFV2Wrapper.test.ts:456:52-457:15: `
        .abs()`
$DIR/contracts/test/v0.8/dev/VRFV2Wrapper.test.ts:458:18-458:35: `.lt(pointOneLink)`
$DIR/contracts/test/v0.8/dev/VRFV2Wrapper.test.ts:461:7-461:24: `await configure()`
$DIR/contracts/test/v0.8/dev/VRFV2Wrapper.test.ts:462:7-462:59: `await fund(consumerOutOfGas.address, oneHundredLink)`
$DIR/contracts/test/v0.8/dev/VRFV2Wrapper.test.ts:463:7-463:22: `await fundSub()`
$DIR/contracts/test/v0.8/dev/VRFV2Wrapper.test.ts:466:25-466:48: `.connect(consumerOwner)`
$DIR/contracts/test/v0.8/dev/VRFV2Wrapper.test.ts:466:48-469:11: `.makeRequest(100_000, 3, 1, {
          gasPrice: oneHundredGwei,
          gasLimit: 1_000_000,
        })`
$DIR/contracts/test/v0.8/dev/VRFV2Wrapper.test.ts:475:7-475:65: `bigNumEquals(price, await link.balanceOf(wrapper.address))`
$DIR/contracts/test/v0.8/dev/VRFV2Wrapper.test.ts:475:37-475:64: `.balanceOf(wrapper.address)`
$DIR/contracts/test/v0.8/dev/VRFV2Wrapper.test.ts:479:20-480:26: `
          .connect(owner)`
$DIR/contracts/test/v0.8/dev/VRFV2Wrapper.test.ts:480:26-483:13: `
          .fulfillRandomWordsWithOverride(1, wrapper.address, [123], {
            gasLimit: 1_000_000,
          })`
$DIR/contracts/test/v0.8/dev/VRFV2Wrapper.test.ts:489:7-489:24: `await configure()`
$DIR/contracts/test/v0.8/dev/VRFV2Wrapper.test.ts:490:7-490:57: `await fund(consumerRevert.address, oneHundredLink)`
$DIR/contracts/test/v0.8/dev/VRFV2Wrapper.test.ts:491:7-491:22: `await fundSub()`
$DIR/contracts/test/v0.8/dev/VRFV2Wrapper.test.ts:494:23-494:46: `.connect(consumerOwner)`
$DIR/contracts/test/v0.8/dev/VRFV2Wrapper.test.ts:494:46-497:11: `.makeRequest(100_000, 3, 1, {
          gasPrice: oneHundredGwei,
          gasLimit: 1_000_000,
        })`
$DIR/contracts/test/v0.8/dev/VRFV2Wrapper.test.ts:503:7-503:65: `bigNumEquals(price, await link.balanceOf(wrapper.address))`
$DIR/contracts/test/v0.8/dev/VRFV2Wrapper.test.ts:503:37-503:64: `.balanceOf(wrapper.address)`
$DIR/contracts/test/v0.8/dev/VRFV2Wrapper.test.ts:507:20-508:26: `
          .connect(owner)`
$DIR/contracts/test/v0.8/dev/VRFV2Wrapper.test.ts:508:26-509:69: `
          .fulfillRandomWordsWithOverride(1, wrapper.address, [123])`
$DIR/contracts/test/v0.8/dev/VRFV2Wrapper.test.ts:515:35-516:52: `
        .sub(await link.balanceOf(wrapper.address))`
$DIR/contracts/test/v0.8/dev/VRFV2Wrapper.test.ts:516:24-516:51: `.balanceOf(wrapper.address)`
$DIR/contracts/test/v0.8/dev/VRFV2Wrapper.test.ts:516:52-517:15: `
        .abs()`
$DIR/contracts/test/v0.8/dev/VRFV2Wrapper.test.ts:519:18-519:35: `.lt(pointOneLink)`
$DIR/contracts/test/v0.8/dev/VRFV2Wrapper.test.ts:524:7-524:24: `await configure()`
$DIR/contracts/test/v0.8/dev/VRFV2Wrapper.test.ts:526:27-526:42: `.connect(owner)`
$DIR/contracts/test/v0.8/dev/VRFV2Wrapper.test.ts:526:42-526:52: `.disable()`
$DIR/contracts/test/v0.8/dev/VRFV2Wrapper.test.ts:528:16-528:39: `.connect(consumerOwner)`
$DIR/contracts/test/v0.8/dev/VRFV2Wrapper.test.ts:528:39-531:11: `.calculateRequestPrice(100_000, {
          gasPrice: oneHundredGwei,
          gasLimit: 1_000_000,
        })`
$DIR/contracts/test/v0.8/dev/VRFV2Wrapper.test.ts:534:27-534:42: `.connect(owner)`
$DIR/contracts/test/v0.8/dev/VRFV2Wrapper.test.ts:534:42-534:51: `.enable()`
$DIR/contracts/test/v0.8/dev/VRFV2Wrapper.test.ts:536:16-536:39: `.connect(consumerOwner)`
$DIR/contracts/test/v0.8/dev/VRFV2Wrapper.test.ts:536:39-539:11: `.calculateRequestPrice(100_000, {
          gasPrice: oneHundredGwei,
          gasLimit: 1_000_000,
        })`
$DIR/contracts/test/v0.8/dev/VRFV2Wrapper.test.ts:544:7-544:24: `await configure()`
$DIR/contracts/test/v0.8/dev/VRFV2Wrapper.test.ts:546:27-546:42: `.connect(owner)`
$DIR/contracts/test/v0.8/dev/VRFV2Wrapper.test.ts:546:42-546:52: `.disable()`
$DIR/contracts/test/v0.8/dev/VRFV2Wrapper.test.ts:548:16-549:34: `
          .connect(consumerOwner)`
$DIR/contracts/test/v0.8/dev/VRFV2Wrapper.test.ts:549:34-550:57: `
          .estimateRequestPrice(100_000, oneHundredGwei)`
$DIR/contracts/test/v0.8/dev/VRFV2Wrapper.test.ts:553:27-553:42: `.connect(owner)`
$DIR/contracts/test/v0.8/dev/VRFV2Wrapper.test.ts:553:42-553:51: `.enable()`
$DIR/contracts/test/v0.8/dev/VRFV2Wrapper.test.ts:555:16-556:34: `
          .connect(consumerOwner)`
$DIR/contracts/test/v0.8/dev/VRFV2Wrapper.test.ts:556:34-557:57: `
          .estimateRequestPrice(100_000, oneHundredGwei)`
$DIR/contracts/test/v0.8/dev/VRFV2Wrapper.test.ts:562:27-562:42: `.connect(owner)`
$DIR/contracts/test/v0.8/dev/VRFV2Wrapper.test.ts:562:42-562:52: `.disable()`
$DIR/contracts/test/v0.8/dev/VRFV2Wrapper.test.ts:563:7-563:24: `await configure()`
$DIR/contracts/test/v0.8/dev/VRFV2Wrapper.test.ts:567:7-567:24: `await configure()`
$DIR/contracts/test/v0.8/dev/VRFV2Wrapper.test.ts:568:7-568:51: `await fund(consumer.address, oneHundredLink)`
$DIR/contracts/test/v0.8/dev/VRFV2Wrapper.test.ts:569:7-569:22: `await fundSub()`
$DIR/contracts/test/v0.8/dev/VRFV2Wrapper.test.ts:571:27-571:42: `.connect(owner)`
$DIR/contracts/test/v0.8/dev/VRFV2Wrapper.test.ts:571:42-571:52: `.disable()`
$DIR/contracts/test/v0.8/dev/VRFV2Wrapper.test.ts:573:17-573:40: `.connect(consumerOwner)`
$DIR/contracts/test/v0.8/dev/VRFV2Wrapper.test.ts:573:40-576:11: `.makeRequest(100_000, 3, 1, {
          gasPrice: oneHundredGwei,
          gasLimit: 1_000_000,
        })`
$DIR/contracts/test/v0.8/dev/VRFV2Wrapper.test.ts:579:27-579:42: `.connect(owner)`
$DIR/contracts/test/v0.8/dev/VRFV2Wrapper.test.ts:579:42-579:51: `.enable()`
$DIR/contracts/test/v0.8/dev/VRFV2Wrapper.test.ts:581:17-581:40: `.connect(consumerOwner)`
$DIR/contracts/test/v0.8/dev/VRFV2Wrapper.test.ts:581:40-584:11: `.makeRequest(100_000, 3, 1, {
          gasPrice: oneHundredGwei,
          gasLimit: 1_000_000,
        })`
$DIR/contracts/test/v0.8/dev/VRFV2Wrapper.test.ts:589:7-589:24: `await configure()`
$DIR/contracts/test/v0.8/dev/VRFV2Wrapper.test.ts:590:7-590:51: `await fund(consumer.address, oneHundredLink)`
$DIR/contracts/test/v0.8/dev/VRFV2Wrapper.test.ts:591:7-591:22: `await fundSub()`
$DIR/contracts/test/v0.8/dev/VRFV2Wrapper.test.ts:594:17-594:40: `.connect(consumerOwner)`
$DIR/contracts/test/v0.8/dev/VRFV2Wrapper.test.ts:594:40-597:11: `.makeRequest(100_000, 3, 1, {
          gasPrice: oneHundredGwei,
          gasLimit: 1_000_000,
        })`
$DIR/contracts/test/v0.8/dev/VRFV2Wrapper.test.ts:599:27-599:42: `.connect(owner)`
$DIR/contracts/test/v0.8/dev/VRFV2Wrapper.test.ts:599:42-599:52: `.disable()`
$DIR/contracts/test/v0.8/dev/VRFV2Wrapper.test.ts:602:20-603:26: `
          .connect(owner)`
$DIR/contracts/test/v0.8/dev/VRFV2Wrapper.test.ts:603:26-606:13: `
          .fulfillRandomWordsWithOverride(1, wrapper.address, [123], {
            gasLimit: 1_000_000,
          })`
$DIR/contracts/test/v0.8/dev/VRFV2Wrapper.test.ts:615:7-615:24: `await configure()`
$DIR/contracts/test/v0.8/dev/VRFV2Wrapper.test.ts:616:7-616:50: `await fund(wrapper.address, oneHundredLink)`
$DIR/contracts/test/v0.8/dev/VRFV2Wrapper.test.ts:617:55-617:68: `.getAddress()`
$DIR/contracts/test/v0.8/dev/VRFV2Wrapper.test.ts:621:16-622:26: `
          .connect(owner)`
$DIR/contracts/test/v0.8/dev/VRFV2Wrapper.test.ts:622:26-623:61: `
          .withdraw(recipientAddress, oneHundredLink.div(2))`
$DIR/contracts/test/v0.8/dev/VRFV2Wrapper.test.ts:623:53-623:60: `.div(2)`
$DIR/contracts/test/v0.8/dev/VRFV2Wrapper.test.ts:625:7-628:8: `bigNumEquals(
        oneHundredLink.div(2),
        await link.balanceOf(recipientAddress),
      )`
$DIR/contracts/test/v0.8/dev/VRFV2Wrapper.test.ts:626:23-626:30: `.div(2)`
$DIR/contracts/test/v0.8/dev/VRFV2Wrapper.test.ts:627:19-627:47: `.balanceOf(recipientAddress)`
$DIR/contracts/test/v0.8/dev/VRFV2Wrapper.test.ts:629:7-629:81: `bigNumEquals(oneHundredLink.div(2), await link.balanceOf(wrapper.address))`
$DIR/contracts/test/v0.8/dev/VRFV2Wrapper.test.ts:629:34-629:41: `.div(2)`
$DIR/contracts/test/v0.8/dev/VRFV2Wrapper.test.ts:629:53-629:80: `.balanceOf(wrapper.address)`
$DIR/contracts/test/v0.8/dev/VRFV2Wrapper.test.ts:633:16-634:26: `
          .connect(owner)`
$DIR/contracts/test/v0.8/dev/VRFV2Wrapper.test.ts:634:26-635:61: `
          .withdraw(recipientAddress, oneHundredLink.div(2))`
$DIR/contracts/test/v0.8/dev/VRFV2Wrapper.test.ts:635:53-635:60: `.div(2)`
$DIR/contracts/test/v0.8/dev/VRFV2Wrapper.test.ts:637:7-637:75: `bigNumEquals(oneHundredLink, await link.balanceOf(recipientAddress))`
$DIR/contracts/test/v0.8/dev/VRFV2Wrapper.test.ts:637:46-637:74: `.balanceOf(recipientAddress)`
$DIR/contracts/test/v0.8/dev/VRFV2Wrapper.test.ts:638:7-638:61: `bigNumEquals(0, await link.balanceOf(wrapper.address))`
$DIR/contracts/test/v0.8/dev/VRFV2Wrapper.test.ts:638:33-638:60: `.balanceOf(wrapper.address)`
$DIR/contracts/test/v0.8/dev/VRFV2Wrapper.test.ts:642:7-642:24: `await configure()`
$DIR/contracts/test/v0.8/dev/VRFV2Wrapper.test.ts:643:7-643:50: `await fund(wrapper.address, oneHundredLink)`
$DIR/contracts/test/v0.8/dev/VRFV2Wrapper.test.ts:644:55-644:68: `.getAddress()`
$DIR/contracts/test/v0.8/dev/VRFV2Wrapper.test.ts:647:16-648:34: `
          .connect(consumerOwner)`
$DIR/contracts/test/v0.8/dev/VRFV2Wrapper.test.ts:648:34-649:61: `
          .withdraw(recipientAddress, oneHundredLink.div(2))`
$DIR/contracts/test/v0.8/dev/VRFV2Wrapper.test.ts:649:53-649:60: `.div(2)`
