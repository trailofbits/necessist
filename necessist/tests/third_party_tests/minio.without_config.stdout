$DIR/cmd/admin-handlers-users-race_test.go:46:3-46:30: `t.Skip("windows is clunky")`
$DIR/cmd/admin-handlers-users-race_test.go:46:4-46:30: `.Skip("windows is clunky")`
$DIR/cmd/admin-handlers-users-race_test.go:61:3-64:4: `testCases = append(testCases,
			newTestSuiteIAM(bt, false),
			newTestSuiteIAM(bt, true),
		)`
$DIR/cmd/admin-handlers-users-race_test.go:69:4-69:36: `etcdStr = " (with etcd backend)"`
$DIR/cmd/admin-handlers-users-race_test.go:71:3-76:4: `t.Run(
			fmt.Sprintf("Test: %d, ServerType: %s%s", i+1, testCase.serverType, etcdStr),
			func(t *testing.T) {
				runAllIAMConcurrencyTests(testCase, &check{t, testCase.serverType})
			},
		)`
$DIR/cmd/admin-handlers-users-race_test.go:71:4-76:4: `.Run(
			fmt.Sprintf("Test: %d, ServerType: %s%s", i+1, testCase.serverType, etcdStr),
			func(t *testing.T) {
				runAllIAMConcurrencyTests(testCase, &check{t, testCase.serverType})
			},
		)`
$DIR/cmd/admin-handlers-users-race_test.go:72:7-72:80: `.Sprintf("Test: %d, ServerType: %s%s", i+1, testCase.serverType, etcdStr)`
$DIR/cmd/admin-handlers-users-race_test.go:74:5-74:72: `runAllIAMConcurrencyTests(testCase, &check{t, testCase.serverType})`
$DIR/cmd/admin-handlers-users_test.go:194:3-194:50: `t.Skip("windows is clunky disable these tests")`
$DIR/cmd/admin-handlers-users_test.go:194:4-194:50: `.Skip("windows is clunky disable these tests")`
$DIR/cmd/admin-handlers-users_test.go:197:3-214:4: `t.Run(
			fmt.Sprintf("Test: %d, ServerType: %s", i+1, testCase.ServerTypeDescription),
			func(t *testing.T) {
				suite := testCase
				c := &check{t, testCase.serverType}

				suite.SetUpSuite(c)
				suite.TestUserCreate(c)
				suite.TestUserPolicyEscalationBug(c)
				suite.TestPolicyCreate(c)
				suite.TestCannedPolicies(c)
				suite.TestGroupAddRemove(c)
				suite.TestServiceAccountOpsByAdmin(c)
				suite.TestServiceAccountOpsByUser(c)
				suite.TestAddServiceAccountPerms(c)
				suite.TearDownSuite(c)
			},
		)`
$DIR/cmd/admin-handlers-users_test.go:197:4-214:4: `.Run(
			fmt.Sprintf("Test: %d, ServerType: %s", i+1, testCase.ServerTypeDescription),
			func(t *testing.T) {
				suite := testCase
				c := &check{t, testCase.serverType}

				suite.SetUpSuite(c)
				suite.TestUserCreate(c)
				suite.TestUserPolicyEscalationBug(c)
				suite.TestPolicyCreate(c)
				suite.TestCannedPolicies(c)
				suite.TestGroupAddRemove(c)
				suite.TestServiceAccountOpsByAdmin(c)
				suite.TestServiceAccountOpsByUser(c)
				suite.TestAddServiceAccountPerms(c)
				suite.TearDownSuite(c)
			},
		)`
$DIR/cmd/admin-handlers-users_test.go:198:7-198:80: `.Sprintf("Test: %d, ServerType: %s", i+1, testCase.ServerTypeDescription)`
$DIR/cmd/admin-handlers-users_test.go:203:5-203:24: `suite.SetUpSuite(c)`
$DIR/cmd/admin-handlers-users_test.go:203:10-203:24: `.SetUpSuite(c)`
$DIR/cmd/admin-handlers-users_test.go:204:5-204:28: `suite.TestUserCreate(c)`
$DIR/cmd/admin-handlers-users_test.go:204:10-204:28: `.TestUserCreate(c)`
$DIR/cmd/admin-handlers-users_test.go:205:5-205:41: `suite.TestUserPolicyEscalationBug(c)`
$DIR/cmd/admin-handlers-users_test.go:205:10-205:41: `.TestUserPolicyEscalationBug(c)`
$DIR/cmd/admin-handlers-users_test.go:206:5-206:30: `suite.TestPolicyCreate(c)`
$DIR/cmd/admin-handlers-users_test.go:206:10-206:30: `.TestPolicyCreate(c)`
$DIR/cmd/admin-handlers-users_test.go:207:5-207:32: `suite.TestCannedPolicies(c)`
$DIR/cmd/admin-handlers-users_test.go:207:10-207:32: `.TestCannedPolicies(c)`
$DIR/cmd/admin-handlers-users_test.go:208:5-208:32: `suite.TestGroupAddRemove(c)`
$DIR/cmd/admin-handlers-users_test.go:208:10-208:32: `.TestGroupAddRemove(c)`
$DIR/cmd/admin-handlers-users_test.go:209:5-209:42: `suite.TestServiceAccountOpsByAdmin(c)`
$DIR/cmd/admin-handlers-users_test.go:209:10-209:42: `.TestServiceAccountOpsByAdmin(c)`
$DIR/cmd/admin-handlers-users_test.go:210:5-210:41: `suite.TestServiceAccountOpsByUser(c)`
$DIR/cmd/admin-handlers-users_test.go:210:10-210:41: `.TestServiceAccountOpsByUser(c)`
$DIR/cmd/admin-handlers-users_test.go:211:5-211:40: `suite.TestAddServiceAccountPerms(c)`
$DIR/cmd/admin-handlers-users_test.go:211:10-211:40: `.TestAddServiceAccountPerms(c)`
$DIR/cmd/admin-handlers-users_test.go:212:5-212:27: `suite.TearDownSuite(c)`
$DIR/cmd/admin-handlers-users_test.go:212:10-212:27: `.TearDownSuite(c)`
$DIR/cmd/admin-handlers-users_test.go:1008:3-1021:4: `t.Run(
			fmt.Sprintf("Test: %d, ServerType: %s", i+1, testCase.ServerTypeDescription),
			func(t *testing.T) {
				suite := testCase
				c := &check{t, testCase.serverType}

				suite.SetUpSuite(c)
				defer suite.TearDownSuite(c)

				suite.SetUpAccMgmtPlugin(c)

				suite.TestAccMgmtPlugin(c)
			},
		)`
$DIR/cmd/admin-handlers-users_test.go:1008:4-1021:4: `.Run(
			fmt.Sprintf("Test: %d, ServerType: %s", i+1, testCase.ServerTypeDescription),
			func(t *testing.T) {
				suite := testCase
				c := &check{t, testCase.serverType}

				suite.SetUpSuite(c)
				defer suite.TearDownSuite(c)

				suite.SetUpAccMgmtPlugin(c)

				suite.TestAccMgmtPlugin(c)
			},
		)`
$DIR/cmd/admin-handlers-users_test.go:1009:7-1009:80: `.Sprintf("Test: %d, ServerType: %s", i+1, testCase.ServerTypeDescription)`
$DIR/cmd/admin-handlers-users_test.go:1014:5-1014:24: `suite.SetUpSuite(c)`
$DIR/cmd/admin-handlers-users_test.go:1014:10-1014:24: `.SetUpSuite(c)`
$DIR/cmd/admin-handlers-users_test.go:1015:16-1015:33: `.TearDownSuite(c)`
$DIR/cmd/admin-handlers-users_test.go:1017:5-1017:32: `suite.SetUpAccMgmtPlugin(c)`
$DIR/cmd/admin-handlers-users_test.go:1017:10-1017:32: `.SetUpAccMgmtPlugin(c)`
$DIR/cmd/admin-handlers-users_test.go:1019:5-1019:31: `suite.TestAccMgmtPlugin(c)`
$DIR/cmd/admin-handlers-users_test.go:1019:10-1019:31: `.TestAccMgmtPlugin(c)`
$DIR/cmd/admin-handlers_test.go:257:24-257:57: `.WithCancel(context.Background())`
$DIR/cmd/admin-handlers_test.go:257:43-257:56: `.Background()`
$DIR/cmd/admin-handlers_test.go:265:20-265:31: `.TearDown()`
$DIR/cmd/admin-handlers_test.go:268:2-268:36: `globalMinioAddr = "127.0.0.1:9000"`
$DIR/cmd/admin-handlers_test.go:272:2-272:26: `queryVal.Set("info", "")`
$DIR/cmd/admin-handlers_test.go:272:10-272:26: `.Set("info", "")`
$DIR/cmd/admin-handlers_test.go:279:17-279:31: `.NewRecorder()`
$DIR/cmd/admin-handlers_test.go:280:2-280:41: `adminTestBed.router.ServeHTTP(rec, req)`
$DIR/cmd/admin-handlers_test.go:280:14-280:41: `.router.ServeHTTP(rec, req)`
$DIR/cmd/admin-handlers_test.go:286:2-286:50: `err = json.NewDecoder(rec.Body).Decode(&results)`
$DIR/cmd/admin-handlers_test.go:286:12-286:33: `.NewDecoder(rec.Body)`
$DIR/cmd/admin-handlers_test.go:286:33-286:50: `.Decode(&results)`
$DIR/cmd/admin-handlers_test.go:332:4-332:39: `v.Add(mgmtClientToken, clientToken)`
$DIR/cmd/admin-handlers_test.go:332:5-332:39: `.Add(mgmtClientToken, clientToken)`
$DIR/cmd/admin-handlers_test.go:335:4-335:29: `v.Add(mgmtForceStart, "")`
$DIR/cmd/admin-handlers_test.go:335:5-335:29: `.Add(mgmtForceStart, "")`
$DIR/cmd/admin-handlers_test.go:338:4-338:28: `v.Add(mgmtForceStop, "")`
$DIR/cmd/admin-handlers_test.go:338:5-338:28: `.Add(mgmtForceStop, "")`
$DIR/cmd/admin-handlers_test.go:369:54-369:78: `.NewReader([]byte(body))`
$DIR/cmd/admin-handlers_test.go:372:5-372:21: `isErrCase = true`
$DIR/cmd/api-errors_test.go:70:18-70:64: `.Join(globalTestTmpDir, "minio-"+nextSuffix())`
$DIR/cmd/api-errors_test.go:71:10-71:26: `.RemoveAll(disk)`
$DIR/cmd/api-errors_test.go:73:2-73:24: `initFSObjects(disk, t)`
$DIR/cmd/api-errors_test.go:75:16-75:29: `.Background()`
$DIR/cmd/api-headers_test.go:34:3-34:11: `e = char`
$DIR/cmd/api-response_test.go:104:3-109:5: `t.Run("", func(t *testing.T) {
			gotLocation := getObjectLocation(testCase.request, testCase.domains, testCase.bucket, testCase.object)
			if testCase.expectedLocation != gotLocation {
				t.Errorf("expected %s, got %s", testCase.expectedLocation, gotLocation)
			}
		})`
$DIR/cmd/api-response_test.go:104:4-109:5: `.Run("", func(t *testing.T) {
			gotLocation := getObjectLocation(testCase.request, testCase.domains, testCase.bucket, testCase.object)
			if testCase.expectedLocation != gotLocation {
				t.Errorf("expected %s, got %s", testCase.expectedLocation, gotLocation)
			}
		})`
$DIR/cmd/api-response_test.go:120:2-120:12: `tls = true`
$DIR/cmd/api-response_test.go:121:2-121:31: `gotScheme = getURLScheme(tls)`
$DIR/cmd/api-utils_test.go:42:3-47:5: `t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			outputText := s3EncodeName(testCase.inputText, testCase.encodingType)
			if testCase.expectedOutput != outputText {
				t.Errorf("Expected `%s`, got `%s`", testCase.expectedOutput, outputText)
			}
		})`
$DIR/cmd/api-utils_test.go:42:4-47:5: `.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			outputText := s3EncodeName(testCase.inputText, testCase.encodingType)
			if testCase.expectedOutput != outputText {
				t.Errorf("Expected `%s`, got `%s`", testCase.expectedOutput, outputText)
			}
		})`
$DIR/cmd/api-utils_test.go:42:12-42:35: `.Sprintf("Test%d", i+1)`
$DIR/cmd/auth-handler_test.go:42:2-45:3: `type testCase struct {
		req   *http.Request
		authT authType
	}`
$DIR/cmd/auth-handler_test.go:46:17-46:64: `.NopCloser(io.LimitReader(&nullReader{}, 1024))`
$DIR/cmd/auth-handler_test.go:46:30-46:63: `.LimitReader(&nullReader{}, 1024)`
$DIR/cmd/auth-handler_test.go:140:2-143:3: `type testCase struct {
		authT authType
		pass  bool
	}`
$DIR/cmd/auth-handler_test.go:224:24-224:78: `.NewRequest(http.MethodGet, "http://example.com", nil)`
$DIR/cmd/auth-handler_test.go:228:16-228:28: `.URL.Query()`
$DIR/cmd/auth-handler_test.go:229:3-229:58: `q.Add(testCase.inputQueryKey, testCase.inputQueryValue)`
$DIR/cmd/auth-handler_test.go:229:4-229:58: `.Add(testCase.inputQueryKey, testCase.inputQueryValue)`
$DIR/cmd/auth-handler_test.go:230:3-230:37: `inputReq.URL.RawQuery = q.Encode()`
$DIR/cmd/auth-handler_test.go:230:28-230:37: `.Encode()`
$DIR/cmd/auth-handler_test.go:231:3-231:23: `inputReq.ParseForm()`
$DIR/cmd/auth-handler_test.go:231:11-231:23: `.ParseForm()`
$DIR/cmd/auth-handler_test.go:259:24-259:78: `.NewRequest(http.MethodGet, "http://example.com", nil)`
$DIR/cmd/auth-handler_test.go:263:16-263:28: `.URL.Query()`
$DIR/cmd/auth-handler_test.go:264:3-264:58: `q.Add(testCase.inputQueryKey, testCase.inputQueryValue)`
$DIR/cmd/auth-handler_test.go:264:4-264:58: `.Add(testCase.inputQueryKey, testCase.inputQueryValue)`
$DIR/cmd/auth-handler_test.go:265:3-265:37: `inputReq.URL.RawQuery = q.Encode()`
$DIR/cmd/auth-handler_test.go:265:28-265:37: `.Encode()`
$DIR/cmd/auth-handler_test.go:266:3-266:23: `inputReq.ParseForm()`
$DIR/cmd/auth-handler_test.go:266:11-266:23: `.ParseForm()`
$DIR/cmd/auth-handler_test.go:362:24-362:50: `.WithCancel(GlobalContext)`
$DIR/cmd/auth-handler_test.go:369:10-369:27: `.RemoveAll(fsDir)`
$DIR/cmd/auth-handler_test.go:374:2-374:24: `initAllSubsystems(ctx)`
$DIR/cmd/auth-handler_test.go:376:2-376:36: `initConfigSubsystem(ctx, objLayer)`
$DIR/cmd/auth-handler_test.go:378:2-378:67: `globalIAMSys.Init(ctx, objLayer, globalEtcdClient, 2*time.Second)`
$DIR/cmd/auth-handler_test.go:378:14-378:67: `.Init(ctx, objLayer, globalEtcdClient, 2*time.Second)`
$DIR/cmd/auth-handler_test.go:380:20-380:62: `.CreateCredentials("myuser", "mypassword")`
$DIR/cmd/auth-handler_test.go:385:2-385:26: `globalActiveCred = creds`
$DIR/cmd/auth-handler_test.go:395:83-395:110: `.NewReader([]byte("hello"))`
$DIR/cmd/auth-handler_test.go:397:83-397:110: `.NewReader([]byte("hello"))`
$DIR/cmd/auth-handler_test.go:399:81-399:108: `.NewReader([]byte("hello"))`
$DIR/cmd/auth-handler_test.go:408:19-408:46: `.ReadAll(testCase.req.Body)`
$DIR/cmd/auth-handler_test.go:416:24-416:57: `.WithCancel(context.Background())`
$DIR/cmd/auth-handler_test.go:416:43-416:56: `.Background()`
$DIR/cmd/auth-handler_test.go:423:10-423:27: `.RemoveAll(fsDir)`
$DIR/cmd/auth-handler_test.go:429:20-429:62: `.CreateCredentials("myuser", "mypassword")`
$DIR/cmd/auth-handler_test.go:434:2-434:26: `globalActiveCred = creds`
$DIR/cmd/auth-handler_test.go:453:24-453:57: `.WithCancel(context.Background())`
$DIR/cmd/auth-handler_test.go:453:43-453:56: `.Background()`
$DIR/cmd/auth-handler_test.go:460:10-460:27: `.RemoveAll(fsDir)`
$DIR/cmd/auth-handler_test.go:466:2-466:24: `initAllSubsystems(ctx)`
$DIR/cmd/auth-handler_test.go:467:2-467:36: `initConfigSubsystem(ctx, objLayer)`
$DIR/cmd/auth-handler_test.go:469:2-469:67: `globalIAMSys.Init(ctx, objLayer, globalEtcdClient, 2*time.Second)`
$DIR/cmd/auth-handler_test.go:469:14-469:67: `.Init(ctx, objLayer, globalEtcdClient, 2*time.Second)`
$DIR/cmd/auth-handler_test.go:471:20-471:61: `.CreateCredentials("admin", "mypassword")`
$DIR/cmd/auth-handler_test.go:475:2-475:26: `globalActiveCred = creds`
$DIR/cmd/background-newdisks-heal-ops_gen_test.go:14:15-14:31: `.MarshalMsg(nil)`
$DIR/cmd/background-newdisks-heal-ops_gen_test.go:18:16-18:34: `.UnmarshalMsg(bts)`
$DIR/cmd/background-newdisks-heal-ops_gen_test.go:26:2-26:28: `left, err = msgp.Skip(bts)`
$DIR/cmd/background-newdisks-heal-ops_gen_test.go:26:18-26:28: `.Skip(bts)`
$DIR/cmd/background-newdisks-heal-ops_gen_test.go:73:2-73:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/background-newdisks-heal-ops_gen_test.go:73:6-73:23: `.Encode(&buf, &v)`
$DIR/cmd/background-newdisks-heal-ops_gen_test.go:75:8-75:18: `.Msgsize()`
$DIR/cmd/background-newdisks-heal-ops_gen_test.go:76:8-76:14: `.Len()`
$DIR/cmd/background-newdisks-heal-ops_gen_test.go:81:13-81:31: `.Decode(&buf, &vn)`
$DIR/cmd/background-newdisks-heal-ops_gen_test.go:86:2-86:13: `buf.Reset()`
$DIR/cmd/background-newdisks-heal-ops_gen_test.go:86:5-86:13: `.Reset()`
$DIR/cmd/background-newdisks-heal-ops_gen_test.go:87:2-87:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/background-newdisks-heal-ops_gen_test.go:87:6-87:23: `.Encode(&buf, &v)`
$DIR/cmd/background-newdisks-heal-ops_gen_test.go:88:2-88:35: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/background-newdisks-heal-ops_gen_test.go:88:12-88:28: `.NewReader(&buf)`
$DIR/cmd/background-newdisks-heal-ops_gen_test.go:88:28-88:35: `.Skip()`
$DIR/cmd/batch-handlers_gen_test.go:14:15-14:31: `.MarshalMsg(nil)`
$DIR/cmd/batch-handlers_gen_test.go:18:16-18:34: `.UnmarshalMsg(bts)`
$DIR/cmd/batch-handlers_gen_test.go:26:2-26:28: `left, err = msgp.Skip(bts)`
$DIR/cmd/batch-handlers_gen_test.go:26:18-26:28: `.Skip(bts)`
$DIR/cmd/batch-handlers_gen_test.go:73:2-73:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/batch-handlers_gen_test.go:73:6-73:23: `.Encode(&buf, &v)`
$DIR/cmd/batch-handlers_gen_test.go:75:8-75:18: `.Msgsize()`
$DIR/cmd/batch-handlers_gen_test.go:76:8-76:14: `.Len()`
$DIR/cmd/batch-handlers_gen_test.go:81:13-81:31: `.Decode(&buf, &vn)`
$DIR/cmd/batch-handlers_gen_test.go:86:2-86:13: `buf.Reset()`
$DIR/cmd/batch-handlers_gen_test.go:86:5-86:13: `.Reset()`
$DIR/cmd/batch-handlers_gen_test.go:87:2-87:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/batch-handlers_gen_test.go:87:6-87:23: `.Encode(&buf, &v)`
$DIR/cmd/batch-handlers_gen_test.go:88:2-88:35: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/batch-handlers_gen_test.go:88:12-88:28: `.NewReader(&buf)`
$DIR/cmd/batch-handlers_gen_test.go:88:28-88:35: `.Skip()`
$DIR/cmd/batch-handlers_gen_test.go:127:15-127:31: `.MarshalMsg(nil)`
$DIR/cmd/batch-handlers_gen_test.go:131:16-131:34: `.UnmarshalMsg(bts)`
$DIR/cmd/batch-handlers_gen_test.go:139:2-139:28: `left, err = msgp.Skip(bts)`
$DIR/cmd/batch-handlers_gen_test.go:139:18-139:28: `.Skip(bts)`
$DIR/cmd/batch-handlers_gen_test.go:186:2-186:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/batch-handlers_gen_test.go:186:6-186:23: `.Encode(&buf, &v)`
$DIR/cmd/batch-handlers_gen_test.go:188:8-188:18: `.Msgsize()`
$DIR/cmd/batch-handlers_gen_test.go:189:8-189:14: `.Len()`
$DIR/cmd/batch-handlers_gen_test.go:194:13-194:31: `.Decode(&buf, &vn)`
$DIR/cmd/batch-handlers_gen_test.go:199:2-199:13: `buf.Reset()`
$DIR/cmd/batch-handlers_gen_test.go:199:5-199:13: `.Reset()`
$DIR/cmd/batch-handlers_gen_test.go:200:2-200:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/batch-handlers_gen_test.go:200:6-200:23: `.Encode(&buf, &v)`
$DIR/cmd/batch-handlers_gen_test.go:201:2-201:35: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/batch-handlers_gen_test.go:201:12-201:28: `.NewReader(&buf)`
$DIR/cmd/batch-handlers_gen_test.go:201:28-201:35: `.Skip()`
$DIR/cmd/batch-handlers_gen_test.go:240:15-240:31: `.MarshalMsg(nil)`
$DIR/cmd/batch-handlers_gen_test.go:244:16-244:34: `.UnmarshalMsg(bts)`
$DIR/cmd/batch-handlers_gen_test.go:252:2-252:28: `left, err = msgp.Skip(bts)`
$DIR/cmd/batch-handlers_gen_test.go:252:18-252:28: `.Skip(bts)`
$DIR/cmd/batch-handlers_gen_test.go:299:2-299:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/batch-handlers_gen_test.go:299:6-299:23: `.Encode(&buf, &v)`
$DIR/cmd/batch-handlers_gen_test.go:301:8-301:18: `.Msgsize()`
$DIR/cmd/batch-handlers_gen_test.go:302:8-302:14: `.Len()`
$DIR/cmd/batch-handlers_gen_test.go:307:13-307:31: `.Decode(&buf, &vn)`
$DIR/cmd/batch-handlers_gen_test.go:312:2-312:13: `buf.Reset()`
$DIR/cmd/batch-handlers_gen_test.go:312:5-312:13: `.Reset()`
$DIR/cmd/batch-handlers_gen_test.go:313:2-313:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/batch-handlers_gen_test.go:313:6-313:23: `.Encode(&buf, &v)`
$DIR/cmd/batch-handlers_gen_test.go:314:2-314:35: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/batch-handlers_gen_test.go:314:12-314:28: `.NewReader(&buf)`
$DIR/cmd/batch-handlers_gen_test.go:314:28-314:35: `.Skip()`
$DIR/cmd/batch-handlers_gen_test.go:353:15-353:31: `.MarshalMsg(nil)`
$DIR/cmd/batch-handlers_gen_test.go:357:16-357:34: `.UnmarshalMsg(bts)`
$DIR/cmd/batch-handlers_gen_test.go:365:2-365:28: `left, err = msgp.Skip(bts)`
$DIR/cmd/batch-handlers_gen_test.go:365:18-365:28: `.Skip(bts)`
$DIR/cmd/batch-handlers_gen_test.go:412:2-412:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/batch-handlers_gen_test.go:412:6-412:23: `.Encode(&buf, &v)`
$DIR/cmd/batch-handlers_gen_test.go:414:8-414:18: `.Msgsize()`
$DIR/cmd/batch-handlers_gen_test.go:415:8-415:14: `.Len()`
$DIR/cmd/batch-handlers_gen_test.go:420:13-420:31: `.Decode(&buf, &vn)`
$DIR/cmd/batch-handlers_gen_test.go:425:2-425:13: `buf.Reset()`
$DIR/cmd/batch-handlers_gen_test.go:425:5-425:13: `.Reset()`
$DIR/cmd/batch-handlers_gen_test.go:426:2-426:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/batch-handlers_gen_test.go:426:6-426:23: `.Encode(&buf, &v)`
$DIR/cmd/batch-handlers_gen_test.go:427:2-427:35: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/batch-handlers_gen_test.go:427:12-427:28: `.NewReader(&buf)`
$DIR/cmd/batch-handlers_gen_test.go:427:28-427:35: `.Skip()`
$DIR/cmd/batch-handlers_gen_test.go:466:15-466:31: `.MarshalMsg(nil)`
$DIR/cmd/batch-handlers_gen_test.go:470:16-470:34: `.UnmarshalMsg(bts)`
$DIR/cmd/batch-handlers_gen_test.go:478:2-478:28: `left, err = msgp.Skip(bts)`
$DIR/cmd/batch-handlers_gen_test.go:478:18-478:28: `.Skip(bts)`
$DIR/cmd/batch-handlers_gen_test.go:525:2-525:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/batch-handlers_gen_test.go:525:6-525:23: `.Encode(&buf, &v)`
$DIR/cmd/batch-handlers_gen_test.go:527:8-527:18: `.Msgsize()`
$DIR/cmd/batch-handlers_gen_test.go:528:8-528:14: `.Len()`
$DIR/cmd/batch-handlers_gen_test.go:533:13-533:31: `.Decode(&buf, &vn)`
$DIR/cmd/batch-handlers_gen_test.go:538:2-538:13: `buf.Reset()`
$DIR/cmd/batch-handlers_gen_test.go:538:5-538:13: `.Reset()`
$DIR/cmd/batch-handlers_gen_test.go:539:2-539:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/batch-handlers_gen_test.go:539:6-539:23: `.Encode(&buf, &v)`
$DIR/cmd/batch-handlers_gen_test.go:540:2-540:35: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/batch-handlers_gen_test.go:540:12-540:28: `.NewReader(&buf)`
$DIR/cmd/batch-handlers_gen_test.go:540:28-540:35: `.Skip()`
$DIR/cmd/batch-handlers_gen_test.go:579:15-579:31: `.MarshalMsg(nil)`
$DIR/cmd/batch-handlers_gen_test.go:583:16-583:34: `.UnmarshalMsg(bts)`
$DIR/cmd/batch-handlers_gen_test.go:591:2-591:28: `left, err = msgp.Skip(bts)`
$DIR/cmd/batch-handlers_gen_test.go:591:18-591:28: `.Skip(bts)`
$DIR/cmd/batch-handlers_gen_test.go:638:2-638:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/batch-handlers_gen_test.go:638:6-638:23: `.Encode(&buf, &v)`
$DIR/cmd/batch-handlers_gen_test.go:640:8-640:18: `.Msgsize()`
$DIR/cmd/batch-handlers_gen_test.go:641:8-641:14: `.Len()`
$DIR/cmd/batch-handlers_gen_test.go:646:13-646:31: `.Decode(&buf, &vn)`
$DIR/cmd/batch-handlers_gen_test.go:651:2-651:13: `buf.Reset()`
$DIR/cmd/batch-handlers_gen_test.go:651:5-651:13: `.Reset()`
$DIR/cmd/batch-handlers_gen_test.go:652:2-652:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/batch-handlers_gen_test.go:652:6-652:23: `.Encode(&buf, &v)`
$DIR/cmd/batch-handlers_gen_test.go:653:2-653:35: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/batch-handlers_gen_test.go:653:12-653:28: `.NewReader(&buf)`
$DIR/cmd/batch-handlers_gen_test.go:653:28-653:35: `.Skip()`
$DIR/cmd/batch-handlers_gen_test.go:692:15-692:31: `.MarshalMsg(nil)`
$DIR/cmd/batch-handlers_gen_test.go:696:16-696:34: `.UnmarshalMsg(bts)`
$DIR/cmd/batch-handlers_gen_test.go:704:2-704:28: `left, err = msgp.Skip(bts)`
$DIR/cmd/batch-handlers_gen_test.go:704:18-704:28: `.Skip(bts)`
$DIR/cmd/batch-handlers_gen_test.go:751:2-751:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/batch-handlers_gen_test.go:751:6-751:23: `.Encode(&buf, &v)`
$DIR/cmd/batch-handlers_gen_test.go:753:8-753:18: `.Msgsize()`
$DIR/cmd/batch-handlers_gen_test.go:754:8-754:14: `.Len()`
$DIR/cmd/batch-handlers_gen_test.go:759:13-759:31: `.Decode(&buf, &vn)`
$DIR/cmd/batch-handlers_gen_test.go:764:2-764:13: `buf.Reset()`
$DIR/cmd/batch-handlers_gen_test.go:764:5-764:13: `.Reset()`
$DIR/cmd/batch-handlers_gen_test.go:765:2-765:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/batch-handlers_gen_test.go:765:6-765:23: `.Encode(&buf, &v)`
$DIR/cmd/batch-handlers_gen_test.go:766:2-766:35: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/batch-handlers_gen_test.go:766:12-766:28: `.NewReader(&buf)`
$DIR/cmd/batch-handlers_gen_test.go:766:28-766:35: `.Skip()`
$DIR/cmd/batch-handlers_gen_test.go:805:15-805:31: `.MarshalMsg(nil)`
$DIR/cmd/batch-handlers_gen_test.go:809:16-809:34: `.UnmarshalMsg(bts)`
$DIR/cmd/batch-handlers_gen_test.go:817:2-817:28: `left, err = msgp.Skip(bts)`
$DIR/cmd/batch-handlers_gen_test.go:817:18-817:28: `.Skip(bts)`
$DIR/cmd/batch-handlers_gen_test.go:864:2-864:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/batch-handlers_gen_test.go:864:6-864:23: `.Encode(&buf, &v)`
$DIR/cmd/batch-handlers_gen_test.go:866:8-866:18: `.Msgsize()`
$DIR/cmd/batch-handlers_gen_test.go:867:8-867:14: `.Len()`
$DIR/cmd/batch-handlers_gen_test.go:872:13-872:31: `.Decode(&buf, &vn)`
$DIR/cmd/batch-handlers_gen_test.go:877:2-877:13: `buf.Reset()`
$DIR/cmd/batch-handlers_gen_test.go:877:5-877:13: `.Reset()`
$DIR/cmd/batch-handlers_gen_test.go:878:2-878:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/batch-handlers_gen_test.go:878:6-878:23: `.Encode(&buf, &v)`
$DIR/cmd/batch-handlers_gen_test.go:879:2-879:35: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/batch-handlers_gen_test.go:879:12-879:28: `.NewReader(&buf)`
$DIR/cmd/batch-handlers_gen_test.go:879:28-879:35: `.Skip()`
$DIR/cmd/batch-handlers_gen_test.go:918:15-918:31: `.MarshalMsg(nil)`
$DIR/cmd/batch-handlers_gen_test.go:922:16-922:34: `.UnmarshalMsg(bts)`
$DIR/cmd/batch-handlers_gen_test.go:930:2-930:28: `left, err = msgp.Skip(bts)`
$DIR/cmd/batch-handlers_gen_test.go:930:18-930:28: `.Skip(bts)`
$DIR/cmd/batch-handlers_gen_test.go:977:2-977:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/batch-handlers_gen_test.go:977:6-977:23: `.Encode(&buf, &v)`
$DIR/cmd/batch-handlers_gen_test.go:979:8-979:18: `.Msgsize()`
$DIR/cmd/batch-handlers_gen_test.go:980:8-980:14: `.Len()`
$DIR/cmd/batch-handlers_gen_test.go:985:13-985:31: `.Decode(&buf, &vn)`
$DIR/cmd/batch-handlers_gen_test.go:990:2-990:13: `buf.Reset()`
$DIR/cmd/batch-handlers_gen_test.go:990:5-990:13: `.Reset()`
$DIR/cmd/batch-handlers_gen_test.go:991:2-991:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/batch-handlers_gen_test.go:991:6-991:23: `.Encode(&buf, &v)`
$DIR/cmd/batch-handlers_gen_test.go:992:2-992:35: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/batch-handlers_gen_test.go:992:12-992:28: `.NewReader(&buf)`
$DIR/cmd/batch-handlers_gen_test.go:992:28-992:35: `.Skip()`
$DIR/cmd/batch-handlers_gen_test.go:1031:15-1031:31: `.MarshalMsg(nil)`
$DIR/cmd/batch-handlers_gen_test.go:1035:16-1035:34: `.UnmarshalMsg(bts)`
$DIR/cmd/batch-handlers_gen_test.go:1043:2-1043:28: `left, err = msgp.Skip(bts)`
$DIR/cmd/batch-handlers_gen_test.go:1043:18-1043:28: `.Skip(bts)`
$DIR/cmd/batch-handlers_gen_test.go:1090:2-1090:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/batch-handlers_gen_test.go:1090:6-1090:23: `.Encode(&buf, &v)`
$DIR/cmd/batch-handlers_gen_test.go:1092:8-1092:18: `.Msgsize()`
$DIR/cmd/batch-handlers_gen_test.go:1093:8-1093:14: `.Len()`
$DIR/cmd/batch-handlers_gen_test.go:1098:13-1098:31: `.Decode(&buf, &vn)`
$DIR/cmd/batch-handlers_gen_test.go:1103:2-1103:13: `buf.Reset()`
$DIR/cmd/batch-handlers_gen_test.go:1103:5-1103:13: `.Reset()`
$DIR/cmd/batch-handlers_gen_test.go:1104:2-1104:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/batch-handlers_gen_test.go:1104:6-1104:23: `.Encode(&buf, &v)`
$DIR/cmd/batch-handlers_gen_test.go:1105:2-1105:35: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/batch-handlers_gen_test.go:1105:12-1105:28: `.NewReader(&buf)`
$DIR/cmd/batch-handlers_gen_test.go:1105:28-1105:35: `.Skip()`
$DIR/cmd/batch-handlers_gen_test.go:1144:15-1144:31: `.MarshalMsg(nil)`
$DIR/cmd/batch-handlers_gen_test.go:1148:16-1148:34: `.UnmarshalMsg(bts)`
$DIR/cmd/batch-handlers_gen_test.go:1156:2-1156:28: `left, err = msgp.Skip(bts)`
$DIR/cmd/batch-handlers_gen_test.go:1156:18-1156:28: `.Skip(bts)`
$DIR/cmd/batch-handlers_gen_test.go:1203:2-1203:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/batch-handlers_gen_test.go:1203:6-1203:23: `.Encode(&buf, &v)`
$DIR/cmd/batch-handlers_gen_test.go:1205:8-1205:18: `.Msgsize()`
$DIR/cmd/batch-handlers_gen_test.go:1206:8-1206:14: `.Len()`
$DIR/cmd/batch-handlers_gen_test.go:1211:13-1211:31: `.Decode(&buf, &vn)`
$DIR/cmd/batch-handlers_gen_test.go:1216:2-1216:13: `buf.Reset()`
$DIR/cmd/batch-handlers_gen_test.go:1216:5-1216:13: `.Reset()`
$DIR/cmd/batch-handlers_gen_test.go:1217:2-1217:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/batch-handlers_gen_test.go:1217:6-1217:23: `.Encode(&buf, &v)`
$DIR/cmd/batch-handlers_gen_test.go:1218:2-1218:35: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/batch-handlers_gen_test.go:1218:12-1218:28: `.NewReader(&buf)`
$DIR/cmd/batch-handlers_gen_test.go:1218:28-1218:35: `.Skip()`
$DIR/cmd/bitrot_test.go:82:3-82:44: `testBitrotReaderWriterAlgo(t, bitrotAlgo)`
$DIR/cmd/bootstrap-messages_test.go:31:3-31:44: `bsTracer.Record(fmt.Sprintf("msg-%d", i))`
$DIR/cmd/bootstrap-messages_test.go:31:11-31:44: `.Record(fmt.Sprintf("msg-%d", i))`
$DIR/cmd/bootstrap-messages_test.go:31:22-31:43: `.Sprintf("msg-%d", i)`
$DIR/cmd/bootstrap-messages_test.go:34:24-34:33: `.Events()`
$DIR/cmd/bootstrap-messages_test.go:40:2-40:61: `bsTracer.lastUpdate = time.Now().UTC().Add(-25 * time.Hour)`
$DIR/cmd/bootstrap-messages_test.go:40:28-40:34: `.Now()`
$DIR/cmd/bootstrap-messages_test.go:40:34-40:40: `.UTC()`
$DIR/cmd/bootstrap-messages_test.go:40:40-40:61: `.Add(-25 * time.Hour)`
$DIR/cmd/bootstrap-messages_test.go:41:2-41:23: `bsTracer.DropEvents()`
$DIR/cmd/bootstrap-messages_test.go:41:10-41:23: `.DropEvents()`
$DIR/cmd/bootstrap-messages_test.go:42:14-42:22: `.Empty()`
$DIR/cmd/bootstrap-messages_test.go:48:3-48:44: `bsTracer.Record(fmt.Sprintf("msg-%d", i))`
$DIR/cmd/bootstrap-messages_test.go:48:11-48:44: `.Record(fmt.Sprintf("msg-%d", i))`
$DIR/cmd/bootstrap-messages_test.go:48:22-48:43: `.Sprintf("msg-%d", i)`
$DIR/cmd/bootstrap-messages_test.go:50:20-50:29: `.Events()`
$DIR/cmd/bootstrap-messages_test.go:54:36-54:45: `.Events()`
$DIR/cmd/bootstrap-messages_test.go:55:13-55:34: `.Sprintf("msg-%d", i)`
$DIR/cmd/bootstrap-messages_test.go:56:14-56:48: `.HasSuffix(traceInfo.Message, msg)`
$DIR/cmd/bucket-encryption_test.go:59:42-59:73: `.NewReader([]byte(tc.inputXML))`
$DIR/cmd/bucket-lifecycle_test.go:42:18-42:59: `.Date(2012, 12, 21, 0, 0, 0, 0, time.UTC)`
$DIR/cmd/bucket-lifecycle_test.go:82:27-82:33: `.Now()`
$DIR/cmd/bucket-lifecycle_test.go:82:33-82:39: `.UTC()`
$DIR/cmd/bucket-lifecycle_test.go:85:42-85:51: `.String()`
$DIR/cmd/bucket-lifecycle_test.go:89:44-89:75: `.expiry.Format(http.TimeFormat)`
$DIR/cmd/bucket-lifecycle_test.go:89:81-89:112: `.expiry.Format(http.TimeFormat)`
$DIR/cmd/bucket-lifecycle_test.go:108:43-108:49: `.Now()`
$DIR/cmd/bucket-lifecycle_test.go:108:49-108:65: `.Add(-time.Hour)`
$DIR/cmd/bucket-lifecycle_test.go:113:43-113:49: `.Now()`
$DIR/cmd/bucket-lifecycle_test.go:113:49-113:64: `.Add(time.Hour)`
$DIR/cmd/bucket-lifecycle_test.go:119:18-119:41: `.restoreStatus.OnDisk()`
$DIR/cmd/bucket-lifecycle_test.go:134:42-134:51: `.String()`
$DIR/cmd/bucket-lifecycle_test.go:141:47-141:53: `.Now()`
$DIR/cmd/bucket-lifecycle_test.go:141:53-141:68: `.Add(time.Hour)`
$DIR/cmd/bucket-lifecycle_test.go:141:69-141:78: `.String()`
$DIR/cmd/bucket-lifecycle_test.go:148:47-148:53: `.Now()`
$DIR/cmd/bucket-lifecycle_test.go:148:53-148:69: `.Add(-time.Hour)`
$DIR/cmd/bucket-lifecycle_test.go:148:70-148:79: `.String()`
$DIR/cmd/bucket-lifecycle_test.go:163:2-163:22: `fi.Erasure.Index = 1`
$DIR/cmd/bucket-lifecycle_test.go:164:8-164:18: `.IsValid()`
$DIR/cmd/bucket-lifecycle_test.go:175:42-175:51: `.String()`
$DIR/cmd/bucket-lifecycle_test.go:182:47-182:53: `.Now()`
$DIR/cmd/bucket-lifecycle_test.go:182:53-182:68: `.Add(time.Hour)`
$DIR/cmd/bucket-lifecycle_test.go:182:69-182:78: `.String()`
$DIR/cmd/bucket-lifecycle_test.go:189:47-189:53: `.Now()`
$DIR/cmd/bucket-lifecycle_test.go:189:53-189:69: `.Add(-time.Hour)`
$DIR/cmd/bucket-lifecycle_test.go:189:70-189:79: `.String()`
$DIR/cmd/bucket-lifecycle_test.go:201:3-201:53: `fi.TransitionStatus = lifecycle.TransitionComplete`
$DIR/cmd/bucket-lifecycle_test.go:202:3-202:24: `fi.Metadata = tc.meta`
$DIR/cmd/bucket-lifecycle_test.go:203:15-203:26: `.IsRemote()`
$DIR/cmd/bucket-lifecycle_test.go:206:11-206:51: `.ToObjectInfo("bucket", "object", false)`
$DIR/cmd/bucket-lifecycle_test.go:207:15-207:26: `.IsRemote()`
$DIR/cmd/bucket-lifecycle_test.go:212:2-212:26: `fi.TransitionStatus = ""`
$DIR/cmd/bucket-lifecycle_test.go:213:2-213:19: `fi.Metadata = nil`
$DIR/cmd/bucket-lifecycle_test.go:214:14-214:25: `.IsRemote()`
$DIR/cmd/bucket-lifecycle_test.go:220:2-220:42: `globalTierConfigMgr = NewTierConfigMgr()`
$DIR/cmd/bucket-lifecycle_test.go:237:23-237:69: `.ParseLifecycleConfig(bytes.NewReader(tc.xml))`
$DIR/cmd/bucket-lifecycle_test.go:237:50-237:68: `.NewReader(tc.xml)`
$DIR/cmd/bucket-lifecycle_test.go:242:3-242:35: `err = validateTransitionTier(lc)`
$DIR/cmd/bucket-metadata_gen_test.go:14:15-14:31: `.MarshalMsg(nil)`
$DIR/cmd/bucket-metadata_gen_test.go:18:16-18:34: `.UnmarshalMsg(bts)`
$DIR/cmd/bucket-metadata_gen_test.go:26:2-26:28: `left, err = msgp.Skip(bts)`
$DIR/cmd/bucket-metadata_gen_test.go:26:18-26:28: `.Skip(bts)`
$DIR/cmd/bucket-metadata_gen_test.go:73:2-73:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/bucket-metadata_gen_test.go:73:6-73:23: `.Encode(&buf, &v)`
$DIR/cmd/bucket-metadata_gen_test.go:75:8-75:18: `.Msgsize()`
$DIR/cmd/bucket-metadata_gen_test.go:76:8-76:14: `.Len()`
$DIR/cmd/bucket-metadata_gen_test.go:81:13-81:31: `.Decode(&buf, &vn)`
$DIR/cmd/bucket-metadata_gen_test.go:86:2-86:13: `buf.Reset()`
$DIR/cmd/bucket-metadata_gen_test.go:86:5-86:13: `.Reset()`
$DIR/cmd/bucket-metadata_gen_test.go:87:2-87:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/bucket-metadata_gen_test.go:87:6-87:23: `.Encode(&buf, &v)`
$DIR/cmd/bucket-metadata_gen_test.go:88:2-88:35: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/bucket-metadata_gen_test.go:88:12-88:28: `.NewReader(&buf)`
$DIR/cmd/bucket-metadata_gen_test.go:88:28-88:35: `.Skip()`
$DIR/cmd/bucket-replication-utils_gen_test.go:14:15-14:31: `.MarshalMsg(nil)`
$DIR/cmd/bucket-replication-utils_gen_test.go:18:16-18:34: `.UnmarshalMsg(bts)`
$DIR/cmd/bucket-replication-utils_gen_test.go:26:2-26:28: `left, err = msgp.Skip(bts)`
$DIR/cmd/bucket-replication-utils_gen_test.go:26:18-26:28: `.Skip(bts)`
$DIR/cmd/bucket-replication-utils_gen_test.go:73:2-73:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/bucket-replication-utils_gen_test.go:73:6-73:23: `.Encode(&buf, &v)`
$DIR/cmd/bucket-replication-utils_gen_test.go:75:8-75:18: `.Msgsize()`
$DIR/cmd/bucket-replication-utils_gen_test.go:76:8-76:14: `.Len()`
$DIR/cmd/bucket-replication-utils_gen_test.go:81:13-81:31: `.Decode(&buf, &vn)`
$DIR/cmd/bucket-replication-utils_gen_test.go:86:2-86:13: `buf.Reset()`
$DIR/cmd/bucket-replication-utils_gen_test.go:86:5-86:13: `.Reset()`
$DIR/cmd/bucket-replication-utils_gen_test.go:87:2-87:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/bucket-replication-utils_gen_test.go:87:6-87:23: `.Encode(&buf, &v)`
$DIR/cmd/bucket-replication-utils_gen_test.go:88:2-88:35: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/bucket-replication-utils_gen_test.go:88:12-88:28: `.NewReader(&buf)`
$DIR/cmd/bucket-replication-utils_gen_test.go:88:28-88:35: `.Skip()`
$DIR/cmd/bucket-replication-utils_gen_test.go:127:15-127:31: `.MarshalMsg(nil)`
$DIR/cmd/bucket-replication-utils_gen_test.go:131:16-131:34: `.UnmarshalMsg(bts)`
$DIR/cmd/bucket-replication-utils_gen_test.go:139:2-139:28: `left, err = msgp.Skip(bts)`
$DIR/cmd/bucket-replication-utils_gen_test.go:139:18-139:28: `.Skip(bts)`
$DIR/cmd/bucket-replication-utils_gen_test.go:186:2-186:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/bucket-replication-utils_gen_test.go:186:6-186:23: `.Encode(&buf, &v)`
$DIR/cmd/bucket-replication-utils_gen_test.go:188:8-188:18: `.Msgsize()`
$DIR/cmd/bucket-replication-utils_gen_test.go:189:8-189:14: `.Len()`
$DIR/cmd/bucket-replication-utils_gen_test.go:194:13-194:31: `.Decode(&buf, &vn)`
$DIR/cmd/bucket-replication-utils_gen_test.go:199:2-199:13: `buf.Reset()`
$DIR/cmd/bucket-replication-utils_gen_test.go:199:5-199:13: `.Reset()`
$DIR/cmd/bucket-replication-utils_gen_test.go:200:2-200:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/bucket-replication-utils_gen_test.go:200:6-200:23: `.Encode(&buf, &v)`
$DIR/cmd/bucket-replication-utils_gen_test.go:201:2-201:35: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/bucket-replication-utils_gen_test.go:201:12-201:28: `.NewReader(&buf)`
$DIR/cmd/bucket-replication-utils_gen_test.go:201:28-201:35: `.Skip()`
$DIR/cmd/bucket-replication-utils_gen_test.go:240:15-240:31: `.MarshalMsg(nil)`
$DIR/cmd/bucket-replication-utils_gen_test.go:244:16-244:34: `.UnmarshalMsg(bts)`
$DIR/cmd/bucket-replication-utils_gen_test.go:252:2-252:28: `left, err = msgp.Skip(bts)`
$DIR/cmd/bucket-replication-utils_gen_test.go:252:18-252:28: `.Skip(bts)`
$DIR/cmd/bucket-replication-utils_gen_test.go:299:2-299:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/bucket-replication-utils_gen_test.go:299:6-299:23: `.Encode(&buf, &v)`
$DIR/cmd/bucket-replication-utils_gen_test.go:301:8-301:18: `.Msgsize()`
$DIR/cmd/bucket-replication-utils_gen_test.go:302:8-302:14: `.Len()`
$DIR/cmd/bucket-replication-utils_gen_test.go:307:13-307:31: `.Decode(&buf, &vn)`
$DIR/cmd/bucket-replication-utils_gen_test.go:312:2-312:13: `buf.Reset()`
$DIR/cmd/bucket-replication-utils_gen_test.go:312:5-312:13: `.Reset()`
$DIR/cmd/bucket-replication-utils_gen_test.go:313:2-313:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/bucket-replication-utils_gen_test.go:313:6-313:23: `.Encode(&buf, &v)`
$DIR/cmd/bucket-replication-utils_gen_test.go:314:2-314:35: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/bucket-replication-utils_gen_test.go:314:12-314:28: `.NewReader(&buf)`
$DIR/cmd/bucket-replication-utils_gen_test.go:314:28-314:35: `.Skip()`
$DIR/cmd/bucket-replication-utils_gen_test.go:353:15-353:31: `.MarshalMsg(nil)`
$DIR/cmd/bucket-replication-utils_gen_test.go:357:16-357:34: `.UnmarshalMsg(bts)`
$DIR/cmd/bucket-replication-utils_gen_test.go:365:2-365:28: `left, err = msgp.Skip(bts)`
$DIR/cmd/bucket-replication-utils_gen_test.go:365:18-365:28: `.Skip(bts)`
$DIR/cmd/bucket-replication-utils_gen_test.go:412:2-412:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/bucket-replication-utils_gen_test.go:412:6-412:23: `.Encode(&buf, &v)`
$DIR/cmd/bucket-replication-utils_gen_test.go:414:8-414:18: `.Msgsize()`
$DIR/cmd/bucket-replication-utils_gen_test.go:415:8-415:14: `.Len()`
$DIR/cmd/bucket-replication-utils_gen_test.go:420:13-420:31: `.Decode(&buf, &vn)`
$DIR/cmd/bucket-replication-utils_gen_test.go:425:2-425:13: `buf.Reset()`
$DIR/cmd/bucket-replication-utils_gen_test.go:425:5-425:13: `.Reset()`
$DIR/cmd/bucket-replication-utils_gen_test.go:426:2-426:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/bucket-replication-utils_gen_test.go:426:6-426:23: `.Encode(&buf, &v)`
$DIR/cmd/bucket-replication-utils_gen_test.go:427:2-427:35: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/bucket-replication-utils_gen_test.go:427:12-427:28: `.NewReader(&buf)`
$DIR/cmd/bucket-replication-utils_gen_test.go:427:28-427:35: `.Skip()`
$DIR/cmd/bucket-replication-utils_gen_test.go:466:15-466:31: `.MarshalMsg(nil)`
$DIR/cmd/bucket-replication-utils_gen_test.go:470:16-470:34: `.UnmarshalMsg(bts)`
$DIR/cmd/bucket-replication-utils_gen_test.go:478:2-478:28: `left, err = msgp.Skip(bts)`
$DIR/cmd/bucket-replication-utils_gen_test.go:478:18-478:28: `.Skip(bts)`
$DIR/cmd/bucket-replication-utils_gen_test.go:525:2-525:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/bucket-replication-utils_gen_test.go:525:6-525:23: `.Encode(&buf, &v)`
$DIR/cmd/bucket-replication-utils_gen_test.go:527:8-527:18: `.Msgsize()`
$DIR/cmd/bucket-replication-utils_gen_test.go:528:8-528:14: `.Len()`
$DIR/cmd/bucket-replication-utils_gen_test.go:533:13-533:31: `.Decode(&buf, &vn)`
$DIR/cmd/bucket-replication-utils_gen_test.go:538:2-538:13: `buf.Reset()`
$DIR/cmd/bucket-replication-utils_gen_test.go:538:5-538:13: `.Reset()`
$DIR/cmd/bucket-replication-utils_gen_test.go:539:2-539:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/bucket-replication-utils_gen_test.go:539:6-539:23: `.Encode(&buf, &v)`
$DIR/cmd/bucket-replication-utils_gen_test.go:540:2-540:35: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/bucket-replication-utils_gen_test.go:540:12-540:28: `.NewReader(&buf)`
$DIR/cmd/bucket-replication-utils_gen_test.go:540:28-540:35: `.Skip()`
$DIR/cmd/bucket-replication-utils_gen_test.go:579:15-579:31: `.MarshalMsg(nil)`
$DIR/cmd/bucket-replication-utils_gen_test.go:583:16-583:34: `.UnmarshalMsg(bts)`
$DIR/cmd/bucket-replication-utils_gen_test.go:591:2-591:28: `left, err = msgp.Skip(bts)`
$DIR/cmd/bucket-replication-utils_gen_test.go:591:18-591:28: `.Skip(bts)`
$DIR/cmd/bucket-replication-utils_gen_test.go:638:2-638:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/bucket-replication-utils_gen_test.go:638:6-638:23: `.Encode(&buf, &v)`
$DIR/cmd/bucket-replication-utils_gen_test.go:640:8-640:18: `.Msgsize()`
$DIR/cmd/bucket-replication-utils_gen_test.go:641:8-641:14: `.Len()`
$DIR/cmd/bucket-replication-utils_gen_test.go:646:13-646:31: `.Decode(&buf, &vn)`
$DIR/cmd/bucket-replication-utils_gen_test.go:651:2-651:13: `buf.Reset()`
$DIR/cmd/bucket-replication-utils_gen_test.go:651:5-651:13: `.Reset()`
$DIR/cmd/bucket-replication-utils_gen_test.go:652:2-652:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/bucket-replication-utils_gen_test.go:652:6-652:23: `.Encode(&buf, &v)`
$DIR/cmd/bucket-replication-utils_gen_test.go:653:2-653:35: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/bucket-replication-utils_gen_test.go:653:12-653:28: `.NewReader(&buf)`
$DIR/cmd/bucket-replication-utils_gen_test.go:653:28-653:35: `.Skip()`
$DIR/cmd/bucket-replication-utils_gen_test.go:692:15-692:31: `.MarshalMsg(nil)`
$DIR/cmd/bucket-replication-utils_gen_test.go:696:16-696:34: `.UnmarshalMsg(bts)`
$DIR/cmd/bucket-replication-utils_gen_test.go:704:2-704:28: `left, err = msgp.Skip(bts)`
$DIR/cmd/bucket-replication-utils_gen_test.go:704:18-704:28: `.Skip(bts)`
$DIR/cmd/bucket-replication-utils_gen_test.go:751:2-751:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/bucket-replication-utils_gen_test.go:751:6-751:23: `.Encode(&buf, &v)`
$DIR/cmd/bucket-replication-utils_gen_test.go:753:8-753:18: `.Msgsize()`
$DIR/cmd/bucket-replication-utils_gen_test.go:754:8-754:14: `.Len()`
$DIR/cmd/bucket-replication-utils_gen_test.go:759:13-759:31: `.Decode(&buf, &vn)`
$DIR/cmd/bucket-replication-utils_gen_test.go:764:2-764:13: `buf.Reset()`
$DIR/cmd/bucket-replication-utils_gen_test.go:764:5-764:13: `.Reset()`
$DIR/cmd/bucket-replication-utils_gen_test.go:765:2-765:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/bucket-replication-utils_gen_test.go:765:6-765:23: `.Encode(&buf, &v)`
$DIR/cmd/bucket-replication-utils_gen_test.go:766:2-766:35: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/bucket-replication-utils_gen_test.go:766:12-766:28: `.NewReader(&buf)`
$DIR/cmd/bucket-replication-utils_gen_test.go:766:28-766:35: `.Skip()`
$DIR/cmd/bucket-replication-utils_gen_test.go:805:15-805:31: `.MarshalMsg(nil)`
$DIR/cmd/bucket-replication-utils_gen_test.go:809:16-809:34: `.UnmarshalMsg(bts)`
$DIR/cmd/bucket-replication-utils_gen_test.go:817:2-817:28: `left, err = msgp.Skip(bts)`
$DIR/cmd/bucket-replication-utils_gen_test.go:817:18-817:28: `.Skip(bts)`
$DIR/cmd/bucket-replication-utils_gen_test.go:864:2-864:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/bucket-replication-utils_gen_test.go:864:6-864:23: `.Encode(&buf, &v)`
$DIR/cmd/bucket-replication-utils_gen_test.go:866:8-866:18: `.Msgsize()`
$DIR/cmd/bucket-replication-utils_gen_test.go:867:8-867:14: `.Len()`
$DIR/cmd/bucket-replication-utils_gen_test.go:872:13-872:31: `.Decode(&buf, &vn)`
$DIR/cmd/bucket-replication-utils_gen_test.go:877:2-877:13: `buf.Reset()`
$DIR/cmd/bucket-replication-utils_gen_test.go:877:5-877:13: `.Reset()`
$DIR/cmd/bucket-replication-utils_gen_test.go:878:2-878:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/bucket-replication-utils_gen_test.go:878:6-878:23: `.Encode(&buf, &v)`
$DIR/cmd/bucket-replication-utils_gen_test.go:879:2-879:35: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/bucket-replication-utils_gen_test.go:879:12-879:28: `.NewReader(&buf)`
$DIR/cmd/bucket-replication-utils_gen_test.go:879:28-879:35: `.Skip()`
$DIR/cmd/bucket-replication-utils_gen_test.go:918:15-918:31: `.MarshalMsg(nil)`
$DIR/cmd/bucket-replication-utils_gen_test.go:922:16-922:34: `.UnmarshalMsg(bts)`
$DIR/cmd/bucket-replication-utils_gen_test.go:930:2-930:28: `left, err = msgp.Skip(bts)`
$DIR/cmd/bucket-replication-utils_gen_test.go:930:18-930:28: `.Skip(bts)`
$DIR/cmd/bucket-replication-utils_gen_test.go:977:2-977:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/bucket-replication-utils_gen_test.go:977:6-977:23: `.Encode(&buf, &v)`
$DIR/cmd/bucket-replication-utils_gen_test.go:979:8-979:18: `.Msgsize()`
$DIR/cmd/bucket-replication-utils_gen_test.go:980:8-980:14: `.Len()`
$DIR/cmd/bucket-replication-utils_gen_test.go:985:13-985:31: `.Decode(&buf, &vn)`
$DIR/cmd/bucket-replication-utils_gen_test.go:990:2-990:13: `buf.Reset()`
$DIR/cmd/bucket-replication-utils_gen_test.go:990:5-990:13: `.Reset()`
$DIR/cmd/bucket-replication-utils_gen_test.go:991:2-991:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/bucket-replication-utils_gen_test.go:991:6-991:23: `.Encode(&buf, &v)`
$DIR/cmd/bucket-replication-utils_gen_test.go:992:2-992:35: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/bucket-replication-utils_gen_test.go:992:12-992:28: `.NewReader(&buf)`
$DIR/cmd/bucket-replication-utils_gen_test.go:992:28-992:35: `.Skip()`
$DIR/cmd/bucket-replication-utils_gen_test.go:1031:15-1031:31: `.MarshalMsg(nil)`
$DIR/cmd/bucket-replication-utils_gen_test.go:1035:16-1035:34: `.UnmarshalMsg(bts)`
$DIR/cmd/bucket-replication-utils_gen_test.go:1043:2-1043:28: `left, err = msgp.Skip(bts)`
$DIR/cmd/bucket-replication-utils_gen_test.go:1043:18-1043:28: `.Skip(bts)`
$DIR/cmd/bucket-replication-utils_gen_test.go:1090:2-1090:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/bucket-replication-utils_gen_test.go:1090:6-1090:23: `.Encode(&buf, &v)`
$DIR/cmd/bucket-replication-utils_gen_test.go:1092:8-1092:18: `.Msgsize()`
$DIR/cmd/bucket-replication-utils_gen_test.go:1093:8-1093:14: `.Len()`
$DIR/cmd/bucket-replication-utils_gen_test.go:1098:13-1098:31: `.Decode(&buf, &vn)`
$DIR/cmd/bucket-replication-utils_gen_test.go:1103:2-1103:13: `buf.Reset()`
$DIR/cmd/bucket-replication-utils_gen_test.go:1103:5-1103:13: `.Reset()`
$DIR/cmd/bucket-replication-utils_gen_test.go:1104:2-1104:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/bucket-replication-utils_gen_test.go:1104:6-1104:23: `.Encode(&buf, &v)`
$DIR/cmd/bucket-replication-utils_gen_test.go:1105:2-1105:35: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/bucket-replication-utils_gen_test.go:1105:12-1105:28: `.NewReader(&buf)`
$DIR/cmd/bucket-replication-utils_gen_test.go:1105:28-1105:35: `.Skip()`
$DIR/cmd/bucket-replication-utils_test.go:121:26-121:42: `.CompletedSize()`
$DIR/cmd/bucket-replication-utils_test.go:124:28-124:56: `.ReplicationStatusInternal()`
$DIR/cmd/bucket-replication-utils_test.go:127:25-127:45: `.ReplicationStatus()`
$DIR/cmd/bucket-replication-utils_test.go:130:22-130:31: `.Action()`
$DIR/cmd/bucket-replication-utils_test.go:186:42-186:58: `.expDsc.String()`
$DIR/cmd/bucket-replication-utils_test.go:243:21-243:53: `.rs.CompositeReplicationStatus()`
$DIR/cmd/bucket-replication_test.go:89:16-89:29: `.Background()`
$DIR/cmd/bucket-replication_test.go:91:18-91:75: `.rcfg.Resync(ctx, test.info, &test.dsc, test.tgtStatuses)`
$DIR/cmd/bucket-replication_test.go:91:81-91:94: `.mustResync()`
$DIR/cmd/bucket-replication_test.go:286:18-286:70: `.rcfg.resync(test.info, &test.dsc, test.tgtStatuses)`
$DIR/cmd/bucket-replication_test.go:286:76-286:89: `.mustResync()`
$DIR/cmd/bucket-stats_gen_test.go:14:15-14:31: `.MarshalMsg(nil)`
$DIR/cmd/bucket-stats_gen_test.go:18:16-18:34: `.UnmarshalMsg(bts)`
$DIR/cmd/bucket-stats_gen_test.go:26:2-26:28: `left, err = msgp.Skip(bts)`
$DIR/cmd/bucket-stats_gen_test.go:26:18-26:28: `.Skip(bts)`
$DIR/cmd/bucket-stats_gen_test.go:73:2-73:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/bucket-stats_gen_test.go:73:6-73:23: `.Encode(&buf, &v)`
$DIR/cmd/bucket-stats_gen_test.go:75:8-75:18: `.Msgsize()`
$DIR/cmd/bucket-stats_gen_test.go:76:8-76:14: `.Len()`
$DIR/cmd/bucket-stats_gen_test.go:81:13-81:31: `.Decode(&buf, &vn)`
$DIR/cmd/bucket-stats_gen_test.go:86:2-86:13: `buf.Reset()`
$DIR/cmd/bucket-stats_gen_test.go:86:5-86:13: `.Reset()`
$DIR/cmd/bucket-stats_gen_test.go:87:2-87:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/bucket-stats_gen_test.go:87:6-87:23: `.Encode(&buf, &v)`
$DIR/cmd/bucket-stats_gen_test.go:88:2-88:35: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/bucket-stats_gen_test.go:88:12-88:28: `.NewReader(&buf)`
$DIR/cmd/bucket-stats_gen_test.go:88:28-88:35: `.Skip()`
$DIR/cmd/bucket-stats_gen_test.go:127:15-127:31: `.MarshalMsg(nil)`
$DIR/cmd/bucket-stats_gen_test.go:131:16-131:34: `.UnmarshalMsg(bts)`
$DIR/cmd/bucket-stats_gen_test.go:139:2-139:28: `left, err = msgp.Skip(bts)`
$DIR/cmd/bucket-stats_gen_test.go:139:18-139:28: `.Skip(bts)`
$DIR/cmd/bucket-stats_gen_test.go:186:2-186:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/bucket-stats_gen_test.go:186:6-186:23: `.Encode(&buf, &v)`
$DIR/cmd/bucket-stats_gen_test.go:188:8-188:18: `.Msgsize()`
$DIR/cmd/bucket-stats_gen_test.go:189:8-189:14: `.Len()`
$DIR/cmd/bucket-stats_gen_test.go:194:13-194:31: `.Decode(&buf, &vn)`
$DIR/cmd/bucket-stats_gen_test.go:199:2-199:13: `buf.Reset()`
$DIR/cmd/bucket-stats_gen_test.go:199:5-199:13: `.Reset()`
$DIR/cmd/bucket-stats_gen_test.go:200:2-200:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/bucket-stats_gen_test.go:200:6-200:23: `.Encode(&buf, &v)`
$DIR/cmd/bucket-stats_gen_test.go:201:2-201:35: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/bucket-stats_gen_test.go:201:12-201:28: `.NewReader(&buf)`
$DIR/cmd/bucket-stats_gen_test.go:201:28-201:35: `.Skip()`
$DIR/cmd/bucket-stats_gen_test.go:240:15-240:31: `.MarshalMsg(nil)`
$DIR/cmd/bucket-stats_gen_test.go:244:16-244:34: `.UnmarshalMsg(bts)`
$DIR/cmd/bucket-stats_gen_test.go:252:2-252:28: `left, err = msgp.Skip(bts)`
$DIR/cmd/bucket-stats_gen_test.go:252:18-252:28: `.Skip(bts)`
$DIR/cmd/bucket-stats_gen_test.go:299:2-299:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/bucket-stats_gen_test.go:299:6-299:23: `.Encode(&buf, &v)`
$DIR/cmd/bucket-stats_gen_test.go:301:8-301:18: `.Msgsize()`
$DIR/cmd/bucket-stats_gen_test.go:302:8-302:14: `.Len()`
$DIR/cmd/bucket-stats_gen_test.go:307:13-307:31: `.Decode(&buf, &vn)`
$DIR/cmd/bucket-stats_gen_test.go:312:2-312:13: `buf.Reset()`
$DIR/cmd/bucket-stats_gen_test.go:312:5-312:13: `.Reset()`
$DIR/cmd/bucket-stats_gen_test.go:313:2-313:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/bucket-stats_gen_test.go:313:6-313:23: `.Encode(&buf, &v)`
$DIR/cmd/bucket-stats_gen_test.go:314:2-314:35: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/bucket-stats_gen_test.go:314:12-314:28: `.NewReader(&buf)`
$DIR/cmd/bucket-stats_gen_test.go:314:28-314:35: `.Skip()`
$DIR/cmd/bucket-stats_gen_test.go:353:15-353:31: `.MarshalMsg(nil)`
$DIR/cmd/bucket-stats_gen_test.go:357:16-357:34: `.UnmarshalMsg(bts)`
$DIR/cmd/bucket-stats_gen_test.go:365:2-365:28: `left, err = msgp.Skip(bts)`
$DIR/cmd/bucket-stats_gen_test.go:365:18-365:28: `.Skip(bts)`
$DIR/cmd/bucket-stats_gen_test.go:412:2-412:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/bucket-stats_gen_test.go:412:6-412:23: `.Encode(&buf, &v)`
$DIR/cmd/bucket-stats_gen_test.go:414:8-414:18: `.Msgsize()`
$DIR/cmd/bucket-stats_gen_test.go:415:8-415:14: `.Len()`
$DIR/cmd/bucket-stats_gen_test.go:420:13-420:31: `.Decode(&buf, &vn)`
$DIR/cmd/bucket-stats_gen_test.go:425:2-425:13: `buf.Reset()`
$DIR/cmd/bucket-stats_gen_test.go:425:5-425:13: `.Reset()`
$DIR/cmd/bucket-stats_gen_test.go:426:2-426:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/bucket-stats_gen_test.go:426:6-426:23: `.Encode(&buf, &v)`
$DIR/cmd/bucket-stats_gen_test.go:427:2-427:35: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/bucket-stats_gen_test.go:427:12-427:28: `.NewReader(&buf)`
$DIR/cmd/bucket-stats_gen_test.go:427:28-427:35: `.Skip()`
$DIR/cmd/bucket-stats_gen_test.go:466:15-466:31: `.MarshalMsg(nil)`
$DIR/cmd/bucket-stats_gen_test.go:470:16-470:34: `.UnmarshalMsg(bts)`
$DIR/cmd/bucket-stats_gen_test.go:478:2-478:28: `left, err = msgp.Skip(bts)`
$DIR/cmd/bucket-stats_gen_test.go:478:18-478:28: `.Skip(bts)`
$DIR/cmd/bucket-stats_gen_test.go:525:2-525:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/bucket-stats_gen_test.go:525:6-525:23: `.Encode(&buf, &v)`
$DIR/cmd/bucket-stats_gen_test.go:527:8-527:18: `.Msgsize()`
$DIR/cmd/bucket-stats_gen_test.go:528:8-528:14: `.Len()`
$DIR/cmd/bucket-stats_gen_test.go:533:13-533:31: `.Decode(&buf, &vn)`
$DIR/cmd/bucket-stats_gen_test.go:538:2-538:13: `buf.Reset()`
$DIR/cmd/bucket-stats_gen_test.go:538:5-538:13: `.Reset()`
$DIR/cmd/bucket-stats_gen_test.go:539:2-539:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/bucket-stats_gen_test.go:539:6-539:23: `.Encode(&buf, &v)`
$DIR/cmd/bucket-stats_gen_test.go:540:2-540:35: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/bucket-stats_gen_test.go:540:12-540:28: `.NewReader(&buf)`
$DIR/cmd/bucket-stats_gen_test.go:540:28-540:35: `.Skip()`
$DIR/cmd/common-main_test.go:47:3-66:5: `t.Run("", func(t *testing.T) {
			tmpfile, err := os.CreateTemp("", "testfile")
			if err != nil {
				t.Error(err)
			}
			tmpfile.WriteString(testCase.content)
			tmpfile.Sync()
			tmpfile.Close()

			value, err := readFromSecret(tmpfile.Name())
			if err != nil && !testCase.expectedErr {
				t.Error(err)
			}
			if err == nil && testCase.expectedErr {
				t.Error(errors.New("expected error, found success"))
			}
			if value != testCase.expectedValue {
				t.Errorf("Expected %s, got %s", testCase.expectedValue, value)
			}
		})`
$DIR/cmd/common-main_test.go:47:4-66:5: `.Run("", func(t *testing.T) {
			tmpfile, err := os.CreateTemp("", "testfile")
			if err != nil {
				t.Error(err)
			}
			tmpfile.WriteString(testCase.content)
			tmpfile.Sync()
			tmpfile.Close()

			value, err := readFromSecret(tmpfile.Name())
			if err != nil && !testCase.expectedErr {
				t.Error(err)
			}
			if err == nil && testCase.expectedErr {
				t.Error(errors.New("expected error, found success"))
			}
			if value != testCase.expectedValue {
				t.Errorf("Expected %s, got %s", testCase.expectedValue, value)
			}
		})`
$DIR/cmd/common-main_test.go:48:22-48:49: `.CreateTemp("", "testfile")`
$DIR/cmd/common-main_test.go:52:4-52:41: `tmpfile.WriteString(testCase.content)`
$DIR/cmd/common-main_test.go:52:11-52:41: `.WriteString(testCase.content)`
$DIR/cmd/common-main_test.go:53:4-53:18: `tmpfile.Sync()`
$DIR/cmd/common-main_test.go:53:11-53:18: `.Sync()`
$DIR/cmd/common-main_test.go:56:40-56:47: `.Name()`
$DIR/cmd/common-main_test.go:159:3-183:5: `t.Run("", func(t *testing.T) {
			tmpfile, err := os.CreateTemp("", "testfile")
			if err != nil {
				t.Error(err)
			}
			tmpfile.WriteString(testCase.content)
			tmpfile.Sync()
			tmpfile.Close()

			ekvs, err := minioEnvironFromFile(tmpfile.Name())
			if err != nil && !testCase.expectedErr {
				t.Error(err)
			}
			if err == nil && testCase.expectedErr {
				t.Error(errors.New("expected error, found success"))
			}

			if len(ekvs) != len(testCase.expectedEkvs) {
				t.Errorf("expected %v keys, got %v keys", len(testCase.expectedEkvs), len(ekvs))
			}

			if !reflect.DeepEqual(ekvs, testCase.expectedEkvs) {
				t.Errorf("expected %v, got %v", testCase.expectedEkvs, ekvs)
			}
		})`
$DIR/cmd/common-main_test.go:159:4-183:5: `.Run("", func(t *testing.T) {
			tmpfile, err := os.CreateTemp("", "testfile")
			if err != nil {
				t.Error(err)
			}
			tmpfile.WriteString(testCase.content)
			tmpfile.Sync()
			tmpfile.Close()

			ekvs, err := minioEnvironFromFile(tmpfile.Name())
			if err != nil && !testCase.expectedErr {
				t.Error(err)
			}
			if err == nil && testCase.expectedErr {
				t.Error(errors.New("expected error, found success"))
			}

			if len(ekvs) != len(testCase.expectedEkvs) {
				t.Errorf("expected %v keys, got %v keys", len(testCase.expectedEkvs), len(ekvs))
			}

			if !reflect.DeepEqual(ekvs, testCase.expectedEkvs) {
				t.Errorf("expected %v, got %v", testCase.expectedEkvs, ekvs)
			}
		})`
$DIR/cmd/common-main_test.go:160:22-160:49: `.CreateTemp("", "testfile")`
$DIR/cmd/common-main_test.go:164:4-164:41: `tmpfile.WriteString(testCase.content)`
$DIR/cmd/common-main_test.go:164:11-164:41: `.WriteString(testCase.content)`
$DIR/cmd/common-main_test.go:165:4-165:18: `tmpfile.Sync()`
$DIR/cmd/common-main_test.go:165:11-165:18: `.Sync()`
$DIR/cmd/common-main_test.go:168:45-168:52: `.Name()`
$DIR/cmd/common-main_test.go:180:15-180:54: `.DeepEqual(ekvs, testCase.expectedEkvs)`
$DIR/cmd/config-current_test.go:29:24-29:57: `.WithCancel(context.Background())`
$DIR/cmd/config-current_test.go:29:43-29:56: `.Background()`
$DIR/cmd/config-current_test.go:36:10-36:27: `.RemoveAll(fsDir)`
$DIR/cmd/config-current_test.go:47:2-47:51: `config.SetRegion(globalServerConfig, "us-west-1")`
$DIR/cmd/config-current_test.go:47:8-47:51: `.SetRegion(globalServerConfig, "us-west-1")`
$DIR/cmd/config-current_test.go:48:21-51:3: `.LookupSite(
		globalServerConfig[config.SiteSubSys][config.Default],
		globalServerConfig[config.RegionSubSys][config.Default],
	)`
$DIR/cmd/config-current_test.go:59:36-59:49: `.Background()`
$DIR/cmd/config-encrypted_test.go:40:23-40:57: `.EncryptData(cred1.String(), data)`
$DIR/cmd/config-encrypted_test.go:40:41-40:50: `.String()`
$DIR/cmd/config-encrypted_test.go:45:23-45:57: `.EncryptData(cred2.String(), data)`
$DIR/cmd/config-encrypted_test.go:45:41-45:50: `.String()`
$DIR/cmd/config-encrypted_test.go:61:3-74:5: `t.Run("", func(t *testing.T) {
			ddata, err := madmin.DecryptData(test.cred.String(), bytes.NewReader(test.edata))
			if err != nil && test.success {
				t.Errorf("Expected success, saw failure %v", err)
			}
			if err == nil && !test.success {
				t.Error("Expected failure, saw success")
			}
			if test.success {
				if !bytes.Equal(ddata, data) {
					t.Errorf("Expected %s, got %s", string(data), string(ddata))
				}
			}
		})`
$DIR/cmd/config-encrypted_test.go:61:4-74:5: `.Run("", func(t *testing.T) {
			ddata, err := madmin.DecryptData(test.cred.String(), bytes.NewReader(test.edata))
			if err != nil && test.success {
				t.Errorf("Expected success, saw failure %v", err)
			}
			if err == nil && !test.success {
				t.Error("Expected failure, saw success")
			}
			if test.success {
				if !bytes.Equal(ddata, data) {
					t.Errorf("Expected %s, got %s", string(data), string(ddata))
				}
			}
		})`
$DIR/cmd/config-encrypted_test.go:62:24-62:85: `.DecryptData(test.cred.String(), bytes.NewReader(test.edata))`
$DIR/cmd/config-encrypted_test.go:62:41-62:55: `.cred.String()`
$DIR/cmd/config-encrypted_test.go:62:62-62:84: `.NewReader(test.edata)`
$DIR/cmd/config-encrypted_test.go:70:14-70:33: `.Equal(ddata, data)`
$DIR/cmd/config-migrate_test.go:29:24-29:57: `.WithCancel(context.Background())`
$DIR/cmd/config-migrate_test.go:29:43-29:56: `.Background()`
$DIR/cmd/config-migrate_test.go:36:10-36:27: `.RemoveAll(fsDir)`
$DIR/cmd/config-migrate_test.go:37:2-37:57: `err = newTestConfig(globalMinioDefaultRegion, objLayer)`
$DIR/cmd/config-migrate_test.go:41:15-41:25: `.TempDir()`
$DIR/cmd/config-migrate_test.go:42:2-42:46: `globalConfigDir = &ConfigDir{path: rootPath}`
$DIR/cmd/config-migrate_test.go:44:2-44:28: `globalObjLayerMutex.Lock()`
$DIR/cmd/config-migrate_test.go:44:21-44:28: `.Lock()`
$DIR/cmd/config-migrate_test.go:45:2-45:28: `globalObjectAPI = objLayer`
$DIR/cmd/config-migrate_test.go:46:2-46:30: `globalObjLayerMutex.Unlock()`
$DIR/cmd/config-migrate_test.go:46:21-46:30: `.Unlock()`
$DIR/cmd/config-migrate_test.go:51:14-51:63: `.WriteFile(configPath, []byte(configJSON), 0o644)`
$DIR/cmd/config-migrate_test.go:61:17-61:34: `.Stat(configPath)`
$DIR/cmd/config-migrate_test.go:74:2-74:49: `globalConfigDir = &ConfigDir{path: t.TempDir()}`
$DIR/cmd/config-migrate_test.go:74:38-74:48: `.TempDir()`
$DIR/cmd/config-migrate_test.go:158:15-158:25: `.TempDir()`
$DIR/cmd/config-migrate_test.go:159:24-159:57: `.WithCancel(context.Background())`
$DIR/cmd/config-migrate_test.go:159:43-159:56: `.Background()`
$DIR/cmd/config-migrate_test.go:162:2-162:46: `globalConfigDir = &ConfigDir{path: rootPath}`
$DIR/cmd/config-migrate_test.go:168:10-168:27: `.RemoveAll(fsDir)`
$DIR/cmd/config-migrate_test.go:173:14-173:75: `.WriteFile(configPath, []byte("{ \"version\":\"2\","), 0o644)`
$DIR/cmd/config-migrate_test.go:186:14-186:63: `.WriteFile(configPath, []byte(configJSON), 0o644)`
$DIR/cmd/config-migrate_test.go:215:15-215:25: `.TempDir()`
$DIR/cmd/config-migrate_test.go:217:2-217:46: `globalConfigDir = &ConfigDir{path: rootPath}`
$DIR/cmd/config-migrate_test.go:221:14-221:85: `.WriteFile(configPath, []byte("{ \"version\":\"2\", \"test\":"), 0o644)`
$DIR/cmd/config-migrate_test.go:308:15-308:25: `.TempDir()`
$DIR/cmd/config-migrate_test.go:310:2-310:46: `globalConfigDir = &ConfigDir{path: rootPath}`
$DIR/cmd/config-migrate_test.go:315:15-316:10: `.WriteFile(configPath, []byte(fmt.Sprintf("{ \"version\":\"%d\", \"credential\": { \"accessKey\": 1 } }", i)),
			0o644)`
$DIR/cmd/config-migrate_test.go:315:48-315:123: `.Sprintf("{ \"version\":\"%d\", \"credential\": { \"accessKey\": 1 } }", i)`
$DIR/cmd/config-migrate_test.go:327:14-327:117: `.WriteFile(configPath, []byte("{ \"version\":\"2\", \"credentials\": { \"accessKeyId\": 1 } }"), 0o644)`
$DIR/cmd/copy-part-range_test.go:43:28-43:56: `.GetOffsetLength(objectSize)`
$DIR/cmd/crossdomain-xml-handler_test.go:31:15-31:27: `.NewRouter()`
$DIR/cmd/crossdomain-xml-handler_test.go:31:27-31:43: `.SkipClean(true)`
$DIR/cmd/crossdomain-xml-handler_test.go:31:43-31:60: `.UseEncodedPath()`
$DIR/cmd/crossdomain-xml-handler_test.go:33:17-33:36: `.NewServer(handler)`
$DIR/cmd/crossdomain-xml-handler_test.go:35:19-35:55: `.Get(srv.URL + crossDomainXMLEntity)`
$DIR/cmd/data-usage-cache_gen_test.go:14:15-14:31: `.MarshalMsg(nil)`
$DIR/cmd/data-usage-cache_gen_test.go:18:16-18:34: `.UnmarshalMsg(bts)`
$DIR/cmd/data-usage-cache_gen_test.go:26:2-26:28: `left, err = msgp.Skip(bts)`
$DIR/cmd/data-usage-cache_gen_test.go:26:18-26:28: `.Skip(bts)`
$DIR/cmd/data-usage-cache_gen_test.go:73:2-73:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/data-usage-cache_gen_test.go:73:6-73:23: `.Encode(&buf, &v)`
$DIR/cmd/data-usage-cache_gen_test.go:75:8-75:18: `.Msgsize()`
$DIR/cmd/data-usage-cache_gen_test.go:76:8-76:14: `.Len()`
$DIR/cmd/data-usage-cache_gen_test.go:81:13-81:31: `.Decode(&buf, &vn)`
$DIR/cmd/data-usage-cache_gen_test.go:86:2-86:13: `buf.Reset()`
$DIR/cmd/data-usage-cache_gen_test.go:86:5-86:13: `.Reset()`
$DIR/cmd/data-usage-cache_gen_test.go:87:2-87:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/data-usage-cache_gen_test.go:87:6-87:23: `.Encode(&buf, &v)`
$DIR/cmd/data-usage-cache_gen_test.go:88:2-88:35: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/data-usage-cache_gen_test.go:88:12-88:28: `.NewReader(&buf)`
$DIR/cmd/data-usage-cache_gen_test.go:88:28-88:35: `.Skip()`
$DIR/cmd/data-usage-cache_gen_test.go:127:15-127:31: `.MarshalMsg(nil)`
$DIR/cmd/data-usage-cache_gen_test.go:131:16-131:34: `.UnmarshalMsg(bts)`
$DIR/cmd/data-usage-cache_gen_test.go:139:2-139:28: `left, err = msgp.Skip(bts)`
$DIR/cmd/data-usage-cache_gen_test.go:139:18-139:28: `.Skip(bts)`
$DIR/cmd/data-usage-cache_gen_test.go:185:15-185:31: `.MarshalMsg(nil)`
$DIR/cmd/data-usage-cache_gen_test.go:189:16-189:34: `.UnmarshalMsg(bts)`
$DIR/cmd/data-usage-cache_gen_test.go:197:2-197:28: `left, err = msgp.Skip(bts)`
$DIR/cmd/data-usage-cache_gen_test.go:197:18-197:28: `.Skip(bts)`
$DIR/cmd/data-usage-cache_gen_test.go:244:2-244:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/data-usage-cache_gen_test.go:244:6-244:23: `.Encode(&buf, &v)`
$DIR/cmd/data-usage-cache_gen_test.go:246:8-246:18: `.Msgsize()`
$DIR/cmd/data-usage-cache_gen_test.go:247:8-247:14: `.Len()`
$DIR/cmd/data-usage-cache_gen_test.go:252:13-252:31: `.Decode(&buf, &vn)`
$DIR/cmd/data-usage-cache_gen_test.go:257:2-257:13: `buf.Reset()`
$DIR/cmd/data-usage-cache_gen_test.go:257:5-257:13: `.Reset()`
$DIR/cmd/data-usage-cache_gen_test.go:258:2-258:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/data-usage-cache_gen_test.go:258:6-258:23: `.Encode(&buf, &v)`
$DIR/cmd/data-usage-cache_gen_test.go:259:2-259:35: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/data-usage-cache_gen_test.go:259:12-259:28: `.NewReader(&buf)`
$DIR/cmd/data-usage-cache_gen_test.go:259:28-259:35: `.Skip()`
$DIR/cmd/data-usage-cache_gen_test.go:298:15-298:31: `.MarshalMsg(nil)`
$DIR/cmd/data-usage-cache_gen_test.go:302:16-302:34: `.UnmarshalMsg(bts)`
$DIR/cmd/data-usage-cache_gen_test.go:310:2-310:28: `left, err = msgp.Skip(bts)`
$DIR/cmd/data-usage-cache_gen_test.go:310:18-310:28: `.Skip(bts)`
$DIR/cmd/data-usage-cache_gen_test.go:357:2-357:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/data-usage-cache_gen_test.go:357:6-357:23: `.Encode(&buf, &v)`
$DIR/cmd/data-usage-cache_gen_test.go:359:8-359:18: `.Msgsize()`
$DIR/cmd/data-usage-cache_gen_test.go:360:8-360:14: `.Len()`
$DIR/cmd/data-usage-cache_gen_test.go:365:13-365:31: `.Decode(&buf, &vn)`
$DIR/cmd/data-usage-cache_gen_test.go:370:2-370:13: `buf.Reset()`
$DIR/cmd/data-usage-cache_gen_test.go:370:5-370:13: `.Reset()`
$DIR/cmd/data-usage-cache_gen_test.go:371:2-371:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/data-usage-cache_gen_test.go:371:6-371:23: `.Encode(&buf, &v)`
$DIR/cmd/data-usage-cache_gen_test.go:372:2-372:35: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/data-usage-cache_gen_test.go:372:12-372:28: `.NewReader(&buf)`
$DIR/cmd/data-usage-cache_gen_test.go:372:28-372:35: `.Skip()`
$DIR/cmd/data-usage-cache_gen_test.go:411:15-411:31: `.MarshalMsg(nil)`
$DIR/cmd/data-usage-cache_gen_test.go:415:16-415:34: `.UnmarshalMsg(bts)`
$DIR/cmd/data-usage-cache_gen_test.go:423:2-423:28: `left, err = msgp.Skip(bts)`
$DIR/cmd/data-usage-cache_gen_test.go:423:18-423:28: `.Skip(bts)`
$DIR/cmd/data-usage-cache_gen_test.go:470:2-470:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/data-usage-cache_gen_test.go:470:6-470:23: `.Encode(&buf, &v)`
$DIR/cmd/data-usage-cache_gen_test.go:472:8-472:18: `.Msgsize()`
$DIR/cmd/data-usage-cache_gen_test.go:473:8-473:14: `.Len()`
$DIR/cmd/data-usage-cache_gen_test.go:478:13-478:31: `.Decode(&buf, &vn)`
$DIR/cmd/data-usage-cache_gen_test.go:483:2-483:13: `buf.Reset()`
$DIR/cmd/data-usage-cache_gen_test.go:483:5-483:13: `.Reset()`
$DIR/cmd/data-usage-cache_gen_test.go:484:2-484:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/data-usage-cache_gen_test.go:484:6-484:23: `.Encode(&buf, &v)`
$DIR/cmd/data-usage-cache_gen_test.go:485:2-485:35: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/data-usage-cache_gen_test.go:485:12-485:28: `.NewReader(&buf)`
$DIR/cmd/data-usage-cache_gen_test.go:485:28-485:35: `.Skip()`
$DIR/cmd/data-usage-cache_gen_test.go:524:15-524:31: `.MarshalMsg(nil)`
$DIR/cmd/data-usage-cache_gen_test.go:528:16-528:34: `.UnmarshalMsg(bts)`
$DIR/cmd/data-usage-cache_gen_test.go:536:2-536:28: `left, err = msgp.Skip(bts)`
$DIR/cmd/data-usage-cache_gen_test.go:536:18-536:28: `.Skip(bts)`
$DIR/cmd/data-usage-cache_gen_test.go:583:2-583:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/data-usage-cache_gen_test.go:583:6-583:23: `.Encode(&buf, &v)`
$DIR/cmd/data-usage-cache_gen_test.go:585:8-585:18: `.Msgsize()`
$DIR/cmd/data-usage-cache_gen_test.go:586:8-586:14: `.Len()`
$DIR/cmd/data-usage-cache_gen_test.go:591:13-591:31: `.Decode(&buf, &vn)`
$DIR/cmd/data-usage-cache_gen_test.go:596:2-596:13: `buf.Reset()`
$DIR/cmd/data-usage-cache_gen_test.go:596:5-596:13: `.Reset()`
$DIR/cmd/data-usage-cache_gen_test.go:597:2-597:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/data-usage-cache_gen_test.go:597:6-597:23: `.Encode(&buf, &v)`
$DIR/cmd/data-usage-cache_gen_test.go:598:2-598:35: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/data-usage-cache_gen_test.go:598:12-598:28: `.NewReader(&buf)`
$DIR/cmd/data-usage-cache_gen_test.go:598:28-598:35: `.Skip()`
$DIR/cmd/data-usage-cache_gen_test.go:637:15-637:31: `.MarshalMsg(nil)`
$DIR/cmd/data-usage-cache_gen_test.go:641:16-641:34: `.UnmarshalMsg(bts)`
$DIR/cmd/data-usage-cache_gen_test.go:649:2-649:28: `left, err = msgp.Skip(bts)`
$DIR/cmd/data-usage-cache_gen_test.go:649:18-649:28: `.Skip(bts)`
$DIR/cmd/data-usage-cache_gen_test.go:696:2-696:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/data-usage-cache_gen_test.go:696:6-696:23: `.Encode(&buf, &v)`
$DIR/cmd/data-usage-cache_gen_test.go:698:8-698:18: `.Msgsize()`
$DIR/cmd/data-usage-cache_gen_test.go:699:8-699:14: `.Len()`
$DIR/cmd/data-usage-cache_gen_test.go:704:13-704:31: `.Decode(&buf, &vn)`
$DIR/cmd/data-usage-cache_gen_test.go:709:2-709:13: `buf.Reset()`
$DIR/cmd/data-usage-cache_gen_test.go:709:5-709:13: `.Reset()`
$DIR/cmd/data-usage-cache_gen_test.go:710:2-710:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/data-usage-cache_gen_test.go:710:6-710:23: `.Encode(&buf, &v)`
$DIR/cmd/data-usage-cache_gen_test.go:711:2-711:35: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/data-usage-cache_gen_test.go:711:12-711:28: `.NewReader(&buf)`
$DIR/cmd/data-usage-cache_gen_test.go:711:28-711:35: `.Skip()`
$DIR/cmd/data-usage-cache_gen_test.go:750:15-750:31: `.MarshalMsg(nil)`
$DIR/cmd/data-usage-cache_gen_test.go:754:16-754:34: `.UnmarshalMsg(bts)`
$DIR/cmd/data-usage-cache_gen_test.go:762:2-762:28: `left, err = msgp.Skip(bts)`
$DIR/cmd/data-usage-cache_gen_test.go:762:18-762:28: `.Skip(bts)`
$DIR/cmd/data-usage-cache_gen_test.go:809:2-809:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/data-usage-cache_gen_test.go:809:6-809:23: `.Encode(&buf, &v)`
$DIR/cmd/data-usage-cache_gen_test.go:811:8-811:18: `.Msgsize()`
$DIR/cmd/data-usage-cache_gen_test.go:812:8-812:14: `.Len()`
$DIR/cmd/data-usage-cache_gen_test.go:817:13-817:31: `.Decode(&buf, &vn)`
$DIR/cmd/data-usage-cache_gen_test.go:822:2-822:13: `buf.Reset()`
$DIR/cmd/data-usage-cache_gen_test.go:822:5-822:13: `.Reset()`
$DIR/cmd/data-usage-cache_gen_test.go:823:2-823:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/data-usage-cache_gen_test.go:823:6-823:23: `.Encode(&buf, &v)`
$DIR/cmd/data-usage-cache_gen_test.go:824:2-824:35: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/data-usage-cache_gen_test.go:824:12-824:28: `.NewReader(&buf)`
$DIR/cmd/data-usage-cache_gen_test.go:824:28-824:35: `.Skip()`
$DIR/cmd/data-usage-cache_gen_test.go:863:15-863:31: `.MarshalMsg(nil)`
$DIR/cmd/data-usage-cache_gen_test.go:867:16-867:34: `.UnmarshalMsg(bts)`
$DIR/cmd/data-usage-cache_gen_test.go:875:2-875:28: `left, err = msgp.Skip(bts)`
$DIR/cmd/data-usage-cache_gen_test.go:875:18-875:28: `.Skip(bts)`
$DIR/cmd/data-usage-cache_gen_test.go:922:2-922:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/data-usage-cache_gen_test.go:922:6-922:23: `.Encode(&buf, &v)`
$DIR/cmd/data-usage-cache_gen_test.go:924:8-924:18: `.Msgsize()`
$DIR/cmd/data-usage-cache_gen_test.go:925:8-925:14: `.Len()`
$DIR/cmd/data-usage-cache_gen_test.go:930:13-930:31: `.Decode(&buf, &vn)`
$DIR/cmd/data-usage-cache_gen_test.go:935:2-935:13: `buf.Reset()`
$DIR/cmd/data-usage-cache_gen_test.go:935:5-935:13: `.Reset()`
$DIR/cmd/data-usage-cache_gen_test.go:936:2-936:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/data-usage-cache_gen_test.go:936:6-936:23: `.Encode(&buf, &v)`
$DIR/cmd/data-usage-cache_gen_test.go:937:2-937:35: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/data-usage-cache_gen_test.go:937:12-937:28: `.NewReader(&buf)`
$DIR/cmd/data-usage-cache_gen_test.go:937:28-937:35: `.Skip()`
$DIR/cmd/data-usage-cache_gen_test.go:976:15-976:31: `.MarshalMsg(nil)`
$DIR/cmd/data-usage-cache_gen_test.go:980:16-980:34: `.UnmarshalMsg(bts)`
$DIR/cmd/data-usage-cache_gen_test.go:988:2-988:28: `left, err = msgp.Skip(bts)`
$DIR/cmd/data-usage-cache_gen_test.go:988:18-988:28: `.Skip(bts)`
$DIR/cmd/data-usage-cache_gen_test.go:1035:2-1035:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/data-usage-cache_gen_test.go:1035:6-1035:23: `.Encode(&buf, &v)`
$DIR/cmd/data-usage-cache_gen_test.go:1037:8-1037:18: `.Msgsize()`
$DIR/cmd/data-usage-cache_gen_test.go:1038:8-1038:14: `.Len()`
$DIR/cmd/data-usage-cache_gen_test.go:1043:13-1043:31: `.Decode(&buf, &vn)`
$DIR/cmd/data-usage-cache_gen_test.go:1048:2-1048:13: `buf.Reset()`
$DIR/cmd/data-usage-cache_gen_test.go:1048:5-1048:13: `.Reset()`
$DIR/cmd/data-usage-cache_gen_test.go:1049:2-1049:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/data-usage-cache_gen_test.go:1049:6-1049:23: `.Encode(&buf, &v)`
$DIR/cmd/data-usage-cache_gen_test.go:1050:2-1050:35: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/data-usage-cache_gen_test.go:1050:12-1050:28: `.NewReader(&buf)`
$DIR/cmd/data-usage-cache_gen_test.go:1050:28-1050:35: `.Skip()`
$DIR/cmd/data-usage-cache_gen_test.go:1089:15-1089:31: `.MarshalMsg(nil)`
$DIR/cmd/data-usage-cache_gen_test.go:1093:16-1093:34: `.UnmarshalMsg(bts)`
$DIR/cmd/data-usage-cache_gen_test.go:1101:2-1101:28: `left, err = msgp.Skip(bts)`
$DIR/cmd/data-usage-cache_gen_test.go:1101:18-1101:28: `.Skip(bts)`
$DIR/cmd/data-usage-cache_gen_test.go:1148:2-1148:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/data-usage-cache_gen_test.go:1148:6-1148:23: `.Encode(&buf, &v)`
$DIR/cmd/data-usage-cache_gen_test.go:1150:8-1150:18: `.Msgsize()`
$DIR/cmd/data-usage-cache_gen_test.go:1151:8-1151:14: `.Len()`
$DIR/cmd/data-usage-cache_gen_test.go:1156:13-1156:31: `.Decode(&buf, &vn)`
$DIR/cmd/data-usage-cache_gen_test.go:1161:2-1161:13: `buf.Reset()`
$DIR/cmd/data-usage-cache_gen_test.go:1161:5-1161:13: `.Reset()`
$DIR/cmd/data-usage-cache_gen_test.go:1162:2-1162:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/data-usage-cache_gen_test.go:1162:6-1162:23: `.Encode(&buf, &v)`
$DIR/cmd/data-usage-cache_gen_test.go:1163:2-1163:35: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/data-usage-cache_gen_test.go:1163:12-1163:28: `.NewReader(&buf)`
$DIR/cmd/data-usage-cache_gen_test.go:1163:28-1163:35: `.Skip()`
$DIR/cmd/data-usage-cache_gen_test.go:1202:15-1202:31: `.MarshalMsg(nil)`
$DIR/cmd/data-usage-cache_gen_test.go:1206:16-1206:34: `.UnmarshalMsg(bts)`
$DIR/cmd/data-usage-cache_gen_test.go:1214:2-1214:28: `left, err = msgp.Skip(bts)`
$DIR/cmd/data-usage-cache_gen_test.go:1214:18-1214:28: `.Skip(bts)`
$DIR/cmd/data-usage-cache_gen_test.go:1261:2-1261:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/data-usage-cache_gen_test.go:1261:6-1261:23: `.Encode(&buf, &v)`
$DIR/cmd/data-usage-cache_gen_test.go:1263:8-1263:18: `.Msgsize()`
$DIR/cmd/data-usage-cache_gen_test.go:1264:8-1264:14: `.Len()`
$DIR/cmd/data-usage-cache_gen_test.go:1269:13-1269:31: `.Decode(&buf, &vn)`
$DIR/cmd/data-usage-cache_gen_test.go:1274:2-1274:13: `buf.Reset()`
$DIR/cmd/data-usage-cache_gen_test.go:1274:5-1274:13: `.Reset()`
$DIR/cmd/data-usage-cache_gen_test.go:1275:2-1275:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/data-usage-cache_gen_test.go:1275:6-1275:23: `.Encode(&buf, &v)`
$DIR/cmd/data-usage-cache_gen_test.go:1276:2-1276:35: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/data-usage-cache_gen_test.go:1276:12-1276:28: `.NewReader(&buf)`
$DIR/cmd/data-usage-cache_gen_test.go:1276:28-1276:35: `.Skip()`
$DIR/cmd/data-usage_test.go:37:11-37:21: `.TempDir()`
$DIR/cmd/data-usage_test.go:38:2-38:25: `const bucket = "bucket"`
$DIR/cmd/data-usage_test.go:49:2-49:46: `createUsageTestFiles(t, base, bucket, files)`
$DIR/cmd/data-usage_test.go:54:4-54:31: `s, err = os.Stat(item.Path)`
$DIR/cmd/data-usage_test.go:54:15-54:31: `.Stat(item.Path)`
$DIR/cmd/data-usage_test.go:58:4-58:30: `sizeS.totalSize = s.Size()`
$DIR/cmd/data-usage_test.go:58:23-58:30: `.Size()`
$DIR/cmd/data-usage_test.go:59:4-59:20: `sizeS.versions++`
$DIR/cmd/data-usage_test.go:65:36-65:49: `.Background()`
$DIR/cmd/data-usage_test.go:108:12-108:33: `.Join(bucket, w.path)`
$DIR/cmd/data-usage_test.go:109:3-135:5: `t.Run(p, func(t *testing.T) {
			e := got.find(p)
			if w.isNil {
				if e != nil {
					t.Error("want nil, got", e)
				}
				return
			}
			if e == nil {
				t.Fatal("got nil result")
			}
			if w.flatten {
				*e = got.flatten(*e)
			}
			if e.Size != int64(w.size) {
				t.Error("got size", e.Size, "want", w.size)
			}
			if e.Objects != uint64(w.objs) {
				t.Error("got objects", e.Objects, "want", w.objs)
			}
			if e.Versions != uint64(w.objs) {
				t.Error("got versions", e.Versions, "want", w.objs)
			}
			if e.ObjSizes != w.oSizes {
				t.Error("got histogram", e.ObjSizes, "want", w.oSizes)
			}
		})`
$DIR/cmd/data-usage_test.go:109:4-135:5: `.Run(p, func(t *testing.T) {
			e := got.find(p)
			if w.isNil {
				if e != nil {
					t.Error("want nil, got", e)
				}
				return
			}
			if e == nil {
				t.Fatal("got nil result")
			}
			if w.flatten {
				*e = got.flatten(*e)
			}
			if e.Size != int64(w.size) {
				t.Error("got size", e.Size, "want", w.size)
			}
			if e.Objects != uint64(w.objs) {
				t.Error("got objects", e.Objects, "want", w.objs)
			}
			if e.Versions != uint64(w.objs) {
				t.Error("got versions", e.Versions, "want", w.objs)
			}
			if e.ObjSizes != w.oSizes {
				t.Error("got histogram", e.ObjSizes, "want", w.oSizes)
			}
		})`
$DIR/cmd/data-usage_test.go:110:12-110:20: `.find(p)`
$DIR/cmd/data-usage_test.go:121:5-121:25: `*e = got.flatten(*e)`
$DIR/cmd/data-usage_test.go:121:13-121:25: `.flatten(*e)`
$DIR/cmd/data-usage_test.go:138:2-167:3: `files = []usageTestFile{
		{
			name: "newfolder/afile",
			size: 4,
		},
		{
			name: "newfolder/anotherone",
			size: 1,
		},
		{
			name: "newfolder/anemptyone",
			size: 0,
		},
		{
			name: "dir1/fileindir1",
			size: 20000,
		},
		{
			name: "dir1/dirc/fileindirc",
			size: 20000,
		},
		{
			name: "rootfile3",
			size: 1000,
		},
		{
			name: "dir1/dira/dirasub/fileindira2",
			size: 200,
		},
	}`
$DIR/cmd/data-usage_test.go:169:2-169:46: `createUsageTestFiles(t, base, bucket, files)`
$DIR/cmd/data-usage_test.go:170:2-170:77: `err = os.RemoveAll(filepath.Join(base, bucket, "dir1/dira/dirasub/dcfile"))`
$DIR/cmd/data-usage_test.go:170:10-170:77: `.RemoveAll(filepath.Join(base, bucket, "dir1/dira/dirasub/dcfile"))`
$DIR/cmd/data-usage_test.go:170:29-170:76: `.Join(base, bucket, "dir1/dira/dirasub/dcfile")`
$DIR/cmd/data-usage_test.go:176:3-176:79: `got, err = scanDataFolder(context.Background(), 0, 0, base, got, getSize, 0)`
$DIR/cmd/data-usage_test.go:176:36-176:49: `.Background()`
$DIR/cmd/data-usage_test.go:177:3-177:23: `got.Info.NextCycle++`
$DIR/cmd/data-usage_test.go:183:2-214:3: `want = []struct {
		path       string
		isNil      bool
		size, objs int
		flatten    bool
		oSizes     sizeHistogram
	}{
		{
			path:    "/",
			size:    363515,
			flatten: true,
			objs:    14,
			oSizes:  sizeHistogram{0: 7, 1: 7},
		},
		{
			path:    "/dir1",
			size:    342210,
			objs:    7,
			flatten: false,
			oSizes:  sizeHistogram{0: 2, 1: 5},
		},
		{
			path:   "/newfolder",
			size:   5,
			objs:   3,
			oSizes: sizeHistogram{0: 3},
		},
		{
			path:  "/nonexistying",
			isNil: true,
		},
	}`
$DIR/cmd/data-usage_test.go:217:12-217:33: `.Join(bucket, w.path)`
$DIR/cmd/data-usage_test.go:218:3-244:5: `t.Run(p, func(t *testing.T) {
			e := got.find(p)
			if w.isNil {
				if e != nil {
					t.Error("want nil, got", e)
				}
				return
			}
			if e == nil {
				t.Fatal("got nil result")
			}
			if w.flatten {
				*e = got.flatten(*e)
			}
			if e.Size != int64(w.size) {
				t.Error("got size", e.Size, "want", w.size)
			}
			if e.Objects != uint64(w.objs) {
				t.Error("got objects", e.Objects, "want", w.objs)
			}
			if e.Versions != uint64(w.objs) {
				t.Error("got versions", e.Versions, "want", w.objs)
			}
			if e.ObjSizes != w.oSizes {
				t.Error("got histogram", e.ObjSizes, "want", w.oSizes)
			}
		})`
$DIR/cmd/data-usage_test.go:218:4-244:5: `.Run(p, func(t *testing.T) {
			e := got.find(p)
			if w.isNil {
				if e != nil {
					t.Error("want nil, got", e)
				}
				return
			}
			if e == nil {
				t.Fatal("got nil result")
			}
			if w.flatten {
				*e = got.flatten(*e)
			}
			if e.Size != int64(w.size) {
				t.Error("got size", e.Size, "want", w.size)
			}
			if e.Objects != uint64(w.objs) {
				t.Error("got objects", e.Objects, "want", w.objs)
			}
			if e.Versions != uint64(w.objs) {
				t.Error("got versions", e.Versions, "want", w.objs)
			}
			if e.ObjSizes != w.oSizes {
				t.Error("got histogram", e.ObjSizes, "want", w.oSizes)
			}
		})`
$DIR/cmd/data-usage_test.go:219:12-219:20: `.find(p)`
$DIR/cmd/data-usage_test.go:230:5-230:25: `*e = got.flatten(*e)`
$DIR/cmd/data-usage_test.go:230:13-230:25: `.flatten(*e)`
$DIR/cmd/data-usage_test.go:249:11-249:21: `.TempDir()`
$DIR/cmd/data-usage_test.go:250:2-250:29: `scannerSleeper.Update(0, 0)`
$DIR/cmd/data-usage_test.go:250:16-250:29: `.Update(0, 0)`
$DIR/cmd/data-usage_test.go:261:2-261:42: `createUsageTestFiles(t, base, "", files)`
$DIR/cmd/data-usage_test.go:262:2-262:24: `const foldersBelow = 3`
$DIR/cmd/data-usage_test.go:263:2-263:55: `const filesBelowT = dataScannerCompactLeastObject / 2`
$DIR/cmd/data-usage_test.go:264:2-264:53: `const filesAboveT = dataScannerCompactAtFolders + 1`
$DIR/cmd/data-usage_test.go:265:2-265:59: `const expectSize = foldersBelow*filesBelowT + filesAboveT`
$DIR/cmd/data-usage_test.go:267:2-267:85: `generateUsageTestFiles(t, base, "bucket/dirwithalot", foldersBelow, filesBelowT, 1)`
$DIR/cmd/data-usage_test.go:268:2-268:78: `generateUsageTestFiles(t, base, "bucket/dirwithevenmore", filesAboveT, 1, 1)`
$DIR/cmd/data-usage_test.go:273:4-273:31: `s, err = os.Stat(item.Path)`
$DIR/cmd/data-usage_test.go:273:15-273:31: `.Stat(item.Path)`
$DIR/cmd/data-usage_test.go:277:4-277:30: `sizeS.totalSize = s.Size()`
$DIR/cmd/data-usage_test.go:277:23-277:30: `.Size()`
$DIR/cmd/data-usage_test.go:278:4-278:20: `sizeS.versions++`
$DIR/cmd/data-usage_test.go:283:36-283:49: `.Background()`
$DIR/cmd/data-usage_test.go:287:8-287:15: `.root()`
$DIR/cmd/data-usage_test.go:349:3-376:5: `t.Run(w.path, func(t *testing.T) {
			e := got.find(w.path)
			if w.path == "flat" {
				f := got.flatten(*got.root())
				e = &f
			}
			if w.isNil {
				if e != nil {
					t.Error("want nil, got", e)
				}
				return
			}
			if e == nil {
				t.Fatal("got nil result")
			}
			if e.Size != int64(w.size) {
				t.Error("got size", e.Size, "want", w.size)
			}
			if e.Objects != uint64(w.objs) {
				t.Error("got objects", e.Objects, "want", w.objs)
			}
			if e.Versions != uint64(w.objs) {
				t.Error("got versions", e.Versions, "want", w.objs)
			}
			if e.ObjSizes != w.oSizes {
				t.Error("got histogram", e.ObjSizes, "want", w.oSizes)
			}
		})`
$DIR/cmd/data-usage_test.go:349:4-376:5: `.Run(w.path, func(t *testing.T) {
			e := got.find(w.path)
			if w.path == "flat" {
				f := got.flatten(*got.root())
				e = &f
			}
			if w.isNil {
				if e != nil {
					t.Error("want nil, got", e)
				}
				return
			}
			if e == nil {
				t.Fatal("got nil result")
			}
			if e.Size != int64(w.size) {
				t.Error("got size", e.Size, "want", w.size)
			}
			if e.Objects != uint64(w.objs) {
				t.Error("got objects", e.Objects, "want", w.objs)
			}
			if e.Versions != uint64(w.objs) {
				t.Error("got versions", e.Versions, "want", w.objs)
			}
			if e.ObjSizes != w.oSizes {
				t.Error("got histogram", e.ObjSizes, "want", w.oSizes)
			}
		})`
$DIR/cmd/data-usage_test.go:350:12-350:25: `.find(w.path)`
$DIR/cmd/data-usage_test.go:352:13-352:34: `.flatten(*got.root())`
$DIR/cmd/data-usage_test.go:352:26-352:33: `.root()`
$DIR/cmd/data-usage_test.go:353:5-353:11: `e = &f`
$DIR/cmd/data-usage_test.go:379:2-408:3: `files = []usageTestFile{
		{
			name: "bucket/newfolder/afile",
			size: 4,
		},
		{
			name: "bucket/newfolder/anotherone",
			size: 1,
		},
		{
			name: "bucket/newfolder/anemptyone",
			size: 0,
		},
		{
			name: "bucket/dir1/fileindir1",
			size: 20000,
		},
		{
			name: "bucket/dir1/dirc/fileindirc",
			size: 20000,
		},
		{
			name: "bucket/rootfile3",
			size: 1000,
		},
		{
			name: "bucket/dir1/dira/dirasub/fileindira2",
			size: 200,
		},
	}`
$DIR/cmd/data-usage_test.go:410:2-410:42: `createUsageTestFiles(t, base, "", files)`
$DIR/cmd/data-usage_test.go:411:2-411:76: `err = os.RemoveAll(filepath.Join(base, "bucket/dir1/dira/dirasub/dcfile"))`
$DIR/cmd/data-usage_test.go:411:10-411:76: `.RemoveAll(filepath.Join(base, "bucket/dir1/dira/dirasub/dcfile"))`
$DIR/cmd/data-usage_test.go:411:29-411:75: `.Join(base, "bucket/dir1/dira/dirasub/dcfile")`
$DIR/cmd/data-usage_test.go:417:3-417:79: `got, err = scanDataFolder(context.Background(), 0, 0, base, got, getSize, 0)`
$DIR/cmd/data-usage_test.go:417:36-417:49: `.Background()`
$DIR/cmd/data-usage_test.go:418:3-418:23: `got.Info.NextCycle++`
$DIR/cmd/data-usage_test.go:424:2-463:3: `want = []struct {
		path       string
		isNil      bool
		size, objs int
		oSizes     sizeHistogram
	}{
		{
			path:   "flat",
			size:   363515 + expectSize,
			objs:   14 + expectSize,
			oSizes: sizeHistogram{0: 7 + expectSize, 1: 7},
		},
		{
			path:   "bucket/dir1",
			size:   342210,
			objs:   7,
			oSizes: sizeHistogram{0: 2, 1: 5},
		},
		{
			path:   "bucket/",
			size:   21000,
			objs:   3,
			oSizes: sizeHistogram{0: 1, 1: 2},
		},
		{
			path:   "bucket/newfolder",
			size:   5,
			objs:   3,
			oSizes: sizeHistogram{0: 3},
		},
		{
			// Compacted into bucket/dir1
			path:  "bucket/dir1/dira",
			isNil: true,
		},
		{
			path:  "bucket/nonexistying",
			isNil: true,
		},
	}`
$DIR/cmd/data-usage_test.go:466:3-494:5: `t.Run(w.path, func(t *testing.T) {
			e := got.find(w.path)
			if w.path == "flat" {
				f := got.flatten(*got.root())
				e = &f
			}
			if w.isNil {
				if e != nil {
					t.Error("want nil, got", e)
				}
				return
			}
			if e == nil {
				t.Error("got nil result")
				return
			}
			if e.Size != int64(w.size) {
				t.Error("got size", e.Size, "want", w.size)
			}
			if e.Objects != uint64(w.objs) {
				t.Error("got objects", e.Objects, "want", w.objs)
			}
			if e.Versions != uint64(w.objs) {
				t.Error("got versions", e.Versions, "want", w.objs)
			}
			if e.ObjSizes != w.oSizes {
				t.Error("got histogram", e.ObjSizes, "want", w.oSizes)
			}
		})`
$DIR/cmd/data-usage_test.go:466:4-494:5: `.Run(w.path, func(t *testing.T) {
			e := got.find(w.path)
			if w.path == "flat" {
				f := got.flatten(*got.root())
				e = &f
			}
			if w.isNil {
				if e != nil {
					t.Error("want nil, got", e)
				}
				return
			}
			if e == nil {
				t.Error("got nil result")
				return
			}
			if e.Size != int64(w.size) {
				t.Error("got size", e.Size, "want", w.size)
			}
			if e.Objects != uint64(w.objs) {
				t.Error("got objects", e.Objects, "want", w.objs)
			}
			if e.Versions != uint64(w.objs) {
				t.Error("got versions", e.Versions, "want", w.objs)
			}
			if e.ObjSizes != w.oSizes {
				t.Error("got histogram", e.ObjSizes, "want", w.oSizes)
			}
		})`
$DIR/cmd/data-usage_test.go:467:12-467:25: `.find(w.path)`
$DIR/cmd/data-usage_test.go:469:13-469:34: `.flatten(*got.root())`
$DIR/cmd/data-usage_test.go:469:26-469:33: `.root()`
$DIR/cmd/data-usage_test.go:470:5-470:11: `e = &f`
$DIR/cmd/data-usage_test.go:531:11-531:21: `.TempDir()`
$DIR/cmd/data-usage_test.go:532:2-532:26: `const bucket = "abucket"`
$DIR/cmd/data-usage_test.go:550:2-550:46: `createUsageTestFiles(t, base, bucket, files)`
$DIR/cmd/data-usage_test.go:555:4-555:31: `s, err = os.Stat(item.Path)`
$DIR/cmd/data-usage_test.go:555:15-555:31: `.Stat(item.Path)`
$DIR/cmd/data-usage_test.go:559:4-559:20: `sizeS.versions++`
$DIR/cmd/data-usage_test.go:560:4-560:30: `sizeS.totalSize = s.Size()`
$DIR/cmd/data-usage_test.go:560:23-560:30: `.Size()`
$DIR/cmd/data-usage_test.go:565:37-565:50: `.Background()`
$DIR/cmd/data-usage_test.go:569:11-569:32: `.find("abucket/dir2")`
$DIR/cmd/data-usage_test.go:570:2-580:3: `e.ReplicationStats = &replicationAllStats{
		Targets: map[string]replicationStats{
			"arn": {
				PendingSize:    1,
				ReplicatedSize: 2,
				FailedSize:     3,
				FailedCount:    5,
				PendingCount:   6,
			},
		},
	}`
$DIR/cmd/data-usage_test.go:581:2-581:38: `want.replace("abucket/dir2", "", *e)`
$DIR/cmd/data-usage_test.go:581:6-581:38: `.replace("abucket/dir2", "", *e)`
$DIR/cmd/data-usage_test.go:583:2-583:30: `err = want.serializeTo(&buf)`
$DIR/cmd/data-usage_test.go:583:12-583:30: `.serializeTo(&buf)`
$DIR/cmd/data-usage_test.go:589:2-589:29: `err = got.deserialize(&buf)`
$DIR/cmd/data-usage_test.go:589:11-589:29: `.deserialize(&buf)`
$DIR/cmd/data-usage_test.go:593:8-593:33: `.Info.LastUpdate.IsZero()`
$DIR/cmd/data-usage_test.go:597:10-597:53: `.Info.LastUpdate.Equal(got.Info.LastUpdate)`
$DIR/cmd/disk-cache-utils_test.go:28:19-28:75: `.Parse(http.TimeFormat, "Wed, 21 Oct 2015 07:28:00 GMT")`
$DIR/cmd/disk-cache-utils_test.go:41:109-41:167: `.Date(2015, time.October, 21, 0o7, 28, 0o0, 0o0, time.UTC)`
$DIR/cmd/disk-cache-utils_test.go:46:3-59:5: `t.Run("", func(t *testing.T) {
			m := make(map[string]string)
			m["cache-control"] = testCase.cacheControlHeaderVal
			if !testCase.expiryHeaderVal.Equal(timeSentinel) {
				m["expires"] = testCase.expiryHeaderVal.String()
			}
			c := cacheControlOpts(ObjectInfo{UserDefined: m, Expires: testCase.expiryHeaderVal})
			if testCase.expectedErr && (c != nil) {
				t.Errorf("expected err, got <nil>")
			}
			if !testCase.expectedErr && !reflect.DeepEqual(c, testCase.expectedCacheControl) {
				t.Errorf("expected %v, got %v", testCase.expectedCacheControl, c)
			}
		})`
$DIR/cmd/disk-cache-utils_test.go:46:4-59:5: `.Run("", func(t *testing.T) {
			m := make(map[string]string)
			m["cache-control"] = testCase.cacheControlHeaderVal
			if !testCase.expiryHeaderVal.Equal(timeSentinel) {
				m["expires"] = testCase.expiryHeaderVal.String()
			}
			c := cacheControlOpts(ObjectInfo{UserDefined: m, Expires: testCase.expiryHeaderVal})
			if testCase.expectedErr && (c != nil) {
				t.Errorf("expected err, got <nil>")
			}
			if !testCase.expectedErr && !reflect.DeepEqual(c, testCase.expectedCacheControl) {
				t.Errorf("expected %v, got %v", testCase.expectedCacheControl, c)
			}
		})`
$DIR/cmd/disk-cache-utils_test.go:48:4-48:55: `m["cache-control"] = testCase.cacheControlHeaderVal`
$DIR/cmd/disk-cache-utils_test.go:49:16-49:52: `.expiryHeaderVal.Equal(timeSentinel)`
$DIR/cmd/disk-cache-utils_test.go:50:5-50:53: `m["expires"] = testCase.expiryHeaderVal.String()`
$DIR/cmd/disk-cache-utils_test.go:50:28-50:53: `.expiryHeaderVal.String()`
$DIR/cmd/disk-cache-utils_test.go:56:40-56:84: `.DeepEqual(c, testCase.expectedCacheControl)`
$DIR/cmd/disk-cache-utils_test.go:88:37-88:43: `.Now()`
$DIR/cmd/disk-cache-utils_test.go:88:43-88:50: `.Unix()`
$DIR/cmd/disk-cache-utils_test.go:92:11-92:23: `.fileNames()`
$DIR/cmd/disk-cache-utils_test.go:95:13-95:19: `.Now()`
$DIR/cmd/disk-cache-utils_test.go:96:2-96:55: `fs.addFile("recent", now.Add(-time.Minute), 1000, 10)`
$DIR/cmd/disk-cache-utils_test.go:96:4-96:55: `.addFile("recent", now.Add(-time.Minute), 1000, 10)`
$DIR/cmd/disk-cache-utils_test.go:96:26-96:44: `.Add(-time.Minute)`
$DIR/cmd/disk-cache-utils_test.go:97:2-97:52: `fs.addFile("older", now.Add(-time.Hour), 1000, 10)`
$DIR/cmd/disk-cache-utils_test.go:97:4-97:52: `.addFile("older", now.Add(-time.Hour), 1000, 10)`
$DIR/cmd/disk-cache-utils_test.go:97:25-97:41: `.Add(-time.Hour)`
$DIR/cmd/disk-cache-utils_test.go:98:13-98:58: `.DeepEqual(fs.fileNames(), []string{"older"})`
$DIR/cmd/disk-cache-utils_test.go:98:26-98:38: `.fileNames()`
$DIR/cmd/disk-cache-utils_test.go:101:2-101:12: `fs.reset()`
$DIR/cmd/disk-cache-utils_test.go:101:4-101:12: `.reset()`
$DIR/cmd/disk-cache-utils_test.go:102:2-102:55: `fs.addFile("bigger", now.Add(-time.Minute), 2000, 10)`
$DIR/cmd/disk-cache-utils_test.go:102:4-102:55: `.addFile("bigger", now.Add(-time.Minute), 2000, 10)`
$DIR/cmd/disk-cache-utils_test.go:102:26-102:44: `.Add(-time.Minute)`
$DIR/cmd/disk-cache-utils_test.go:103:2-103:55: `fs.addFile("recent", now.Add(-time.Minute), 1000, 10)`
$DIR/cmd/disk-cache-utils_test.go:103:4-103:55: `.addFile("recent", now.Add(-time.Minute), 1000, 10)`
$DIR/cmd/disk-cache-utils_test.go:103:26-103:44: `.Add(-time.Minute)`
$DIR/cmd/disk-cache-utils_test.go:104:13-104:59: `.DeepEqual(fs.fileNames(), []string{"bigger"})`
$DIR/cmd/disk-cache-utils_test.go:104:26-104:38: `.fileNames()`
$DIR/cmd/disk-cache-utils_test.go:107:2-107:12: `fs.reset()`
$DIR/cmd/disk-cache-utils_test.go:107:4-107:12: `.reset()`
$DIR/cmd/disk-cache-utils_test.go:108:2-108:52: `fs.addFile("less", now.Add(-time.Minute), 1000, 5)`
$DIR/cmd/disk-cache-utils_test.go:108:4-108:52: `.addFile("less", now.Add(-time.Minute), 1000, 5)`
$DIR/cmd/disk-cache-utils_test.go:108:24-108:42: `.Add(-time.Minute)`
$DIR/cmd/disk-cache-utils_test.go:109:2-109:55: `fs.addFile("recent", now.Add(-time.Minute), 1000, 10)`
$DIR/cmd/disk-cache-utils_test.go:109:4-109:55: `.addFile("recent", now.Add(-time.Minute), 1000, 10)`
$DIR/cmd/disk-cache-utils_test.go:109:26-109:44: `.Add(-time.Minute)`
$DIR/cmd/disk-cache-utils_test.go:110:13-110:57: `.DeepEqual(fs.fileNames(), []string{"less"})`
$DIR/cmd/disk-cache-utils_test.go:110:26-110:38: `.fileNames()`
$DIR/cmd/disk-cache-utils_test.go:113:2-113:12: `fs.reset()`
$DIR/cmd/disk-cache-utils_test.go:113:4-113:12: `.reset()`
$DIR/cmd/disk-cache-utils_test.go:114:2-114:53: `fs.addFile("small", now.Add(-time.Minute), 200, 10)`
$DIR/cmd/disk-cache-utils_test.go:114:4-114:53: `.addFile("small", now.Add(-time.Minute), 200, 10)`
$DIR/cmd/disk-cache-utils_test.go:114:25-114:43: `.Add(-time.Minute)`
$DIR/cmd/disk-cache-utils_test.go:115:2-115:54: `fs.addFile("medium", now.Add(-time.Minute), 300, 10)`
$DIR/cmd/disk-cache-utils_test.go:115:4-115:54: `.addFile("medium", now.Add(-time.Minute), 300, 10)`
$DIR/cmd/disk-cache-utils_test.go:115:26-115:44: `.Add(-time.Minute)`
$DIR/cmd/disk-cache-utils_test.go:116:13-116:68: `.DeepEqual(fs.fileNames(), []string{"medium", "small"})`
$DIR/cmd/disk-cache-utils_test.go:116:26-116:38: `.fileNames()`
$DIR/cmd/disk-cache-utils_test.go:119:2-119:53: `fs.addFile("large", now.Add(-time.Minute), 700, 10)`
$DIR/cmd/disk-cache-utils_test.go:119:4-119:53: `.addFile("large", now.Add(-time.Minute), 700, 10)`
$DIR/cmd/disk-cache-utils_test.go:119:25-119:43: `.Add(-time.Minute)`
$DIR/cmd/disk-cache-utils_test.go:120:2-120:51: `fs.addFile("xsmol", now.Add(-time.Minute), 7, 10)`
$DIR/cmd/disk-cache-utils_test.go:120:4-120:51: `.addFile("xsmol", now.Add(-time.Minute), 7, 10)`
$DIR/cmd/disk-cache-utils_test.go:120:25-120:43: `.Add(-time.Minute)`
$DIR/cmd/disk-cache-utils_test.go:121:13-121:68: `.DeepEqual(fs.fileNames(), []string{"large", "medium"})`
$DIR/cmd/disk-cache-utils_test.go:121:26-121:38: `.fileNames()`
$DIR/cmd/disk-cache-utils_test.go:125:2-125:12: `fs.reset()`
$DIR/cmd/disk-cache-utils_test.go:125:4-125:12: `.reset()`
$DIR/cmd/disk-cache-utils_test.go:126:2-126:51: `fs.addFile("less", now.Add(-time.Minute), 500, 5)`
$DIR/cmd/disk-cache-utils_test.go:126:4-126:51: `.addFile("less", now.Add(-time.Minute), 500, 5)`
$DIR/cmd/disk-cache-utils_test.go:126:24-126:42: `.Add(-time.Minute)`
$DIR/cmd/disk-cache-utils_test.go:127:2-127:54: `fs.addFile("recent", now.Add(-time.Minute), 500, 10)`
$DIR/cmd/disk-cache-utils_test.go:127:4-127:54: `.addFile("recent", now.Add(-time.Minute), 500, 10)`
$DIR/cmd/disk-cache-utils_test.go:127:26-127:44: `.Add(-time.Minute)`
$DIR/cmd/disk-cache-utils_test.go:128:8-128:30: `.adjustSaveBytes(-500)`
$DIR/cmd/disk-cache-utils_test.go:132:13-132:57: `.DeepEqual(fs.fileNames(), []string{"less"})`
$DIR/cmd/disk-cache-utils_test.go:132:26-132:38: `.fileNames()`
$DIR/cmd/disk-cache-utils_test.go:135:7-135:29: `.adjustSaveBytes(-500)`
$DIR/cmd/disk-cache-utils_test.go:138:2-138:54: `fs, err = newFileScorer(1000, time.Now().Unix(), 10)`
$DIR/cmd/disk-cache-utils_test.go:138:36-138:42: `.Now()`
$DIR/cmd/disk-cache-utils_test.go:138:42-138:49: `.Unix()`
$DIR/cmd/disk-cache-utils_test.go:142:2-142:53: `fs.addFile("bigger", now.Add(-time.Minute), 50, 10)`
$DIR/cmd/disk-cache-utils_test.go:142:4-142:53: `.addFile("bigger", now.Add(-time.Minute), 50, 10)`
$DIR/cmd/disk-cache-utils_test.go:142:26-142:44: `.Add(-time.Minute)`
$DIR/cmd/disk-cache-utils_test.go:144:2-144:26: `fs.adjustSaveBytes(-800)`
$DIR/cmd/disk-cache-utils_test.go:144:4-144:26: `.adjustSaveBytes(-800)`
$DIR/cmd/disk-cache-utils_test.go:145:2-145:54: `fs.addFile("smaller", now.Add(-time.Minute), 40, 10)`
$DIR/cmd/disk-cache-utils_test.go:145:4-145:54: `.addFile("smaller", now.Add(-time.Minute), 40, 10)`
$DIR/cmd/disk-cache-utils_test.go:145:27-145:45: `.Add(-time.Minute)`
$DIR/cmd/disk-cache-utils_test.go:146:13-146:70: `.DeepEqual(fs.fileNames(), []string{"bigger", "smaller"})`
$DIR/cmd/disk-cache-utils_test.go:146:26-146:38: `.fileNames()`
$DIR/cmd/disk-cache_test.go:28:14-28:29: `.ToObjectInfo()`
$DIR/cmd/disk-cache_test.go:32:13-32:40: `.ModTime.Equal(time.Time{})`
$DIR/cmd/disk-cache_test.go:38:13-38:30: `.Expires.IsZero()`
$DIR/cmd/disk-cache_test.go:69:3-69:55: `cobjects.exclude = []string{testCase.excludePattern}`
$DIR/cmd/disk-cache_test.go:70:14-70:71: `.isCacheExclude(testCase.bucketName, testCase.objectName)`
$DIR/cmd/dummy-data-generator_test.go:117:13-117:24: `.ReadAll(r)`
$DIR/cmd/dummy-data-generator_test.go:126:2-126:45: `checkEq(readAll(NewDummyDataGen(0, 0)), "")`
$DIR/cmd/dummy-data-generator_test.go:128:2-128:95: `checkEq(readAll(NewDummyDataGen(10, 0)), readAll(NewDummyDataGen(10, int64(len(alphabets)))))`
$DIR/cmd/dummy-data-generator_test.go:130:2-130:109: `checkEq(readAll(NewDummyDataGen(100, 0)), readAll(NewDummyDataGen(50, 0))+readAll(NewDummyDataGen(50, 50)))`
$DIR/cmd/dummy-data-generator_test.go:133:2-133:34: `r.Seek(int64(len(alphabets)), 0)`
$DIR/cmd/dummy-data-generator_test.go:133:3-133:34: `.Seek(int64(len(alphabets)), 0)`
$DIR/cmd/dummy-data-generator_test.go:166:14-166:39: `.NewReader([]byte("abc"))`
$DIR/cmd/dummy-data-generator_test.go:167:14-167:39: `.NewReader([]byte("abc"))`
$DIR/cmd/dummy-data-generator_test.go:175:14-175:39: `.NewReader([]byte("abc"))`
$DIR/cmd/dummy-data-generator_test.go:176:14-176:40: `.NewReader([]byte("abcd"))`
$DIR/cmd/dynamic-timeouts_test.go:31:20-31:30: `.Timeout()`
$DIR/cmd/dynamic-timeouts_test.go:34:3-34:23: `timeout.LogFailure()`
$DIR/cmd/dynamic-timeouts_test.go:34:10-34:23: `.LogFailure()`
$DIR/cmd/dynamic-timeouts_test.go:37:21-37:31: `.Timeout()`
$DIR/cmd/dynamic-timeouts_test.go:47:20-47:30: `.Timeout()`
$DIR/cmd/dynamic-timeouts_test.go:50:3-50:23: `timeout.LogFailure()`
$DIR/cmd/dynamic-timeouts_test.go:50:10-50:23: `.LogFailure()`
$DIR/cmd/dynamic-timeouts_test.go:53:21-53:31: `.Timeout()`
$DIR/cmd/dynamic-timeouts_test.go:56:3-56:23: `timeout.LogFailure()`
$DIR/cmd/dynamic-timeouts_test.go:56:10-56:23: `.LogFailure()`
$DIR/cmd/dynamic-timeouts_test.go:59:26-59:36: `.Timeout()`
$DIR/cmd/dynamic-timeouts_test.go:69:20-69:30: `.Timeout()`
$DIR/cmd/dynamic-timeouts_test.go:72:3-72:39: `timeout.LogSuccess(20 * time.Second)`
$DIR/cmd/dynamic-timeouts_test.go:72:10-72:39: `.LogSuccess(20 * time.Second)`
$DIR/cmd/dynamic-timeouts_test.go:75:21-75:31: `.Timeout()`
$DIR/cmd/dynamic-timeouts_test.go:85:20-85:30: `.Timeout()`
$DIR/cmd/dynamic-timeouts_test.go:88:3-88:39: `timeout.LogSuccess(20 * time.Second)`
$DIR/cmd/dynamic-timeouts_test.go:88:10-88:39: `.LogSuccess(20 * time.Second)`
$DIR/cmd/dynamic-timeouts_test.go:91:21-91:31: `.Timeout()`
$DIR/cmd/dynamic-timeouts_test.go:94:3-94:39: `timeout.LogSuccess(20 * time.Second)`
$DIR/cmd/dynamic-timeouts_test.go:94:10-94:39: `.LogSuccess(20 * time.Second)`
$DIR/cmd/dynamic-timeouts_test.go:97:26-97:36: `.Timeout()`
$DIR/cmd/dynamic-timeouts_test.go:107:20-107:30: `.Timeout()`
$DIR/cmd/dynamic-timeouts_test.go:109:2-109:41: `const successTimeout = 20 * time.Second`
$DIR/cmd/dynamic-timeouts_test.go:112:4-112:38: `timeout.LogSuccess(successTimeout)`
$DIR/cmd/dynamic-timeouts_test.go:112:11-112:38: `.LogSuccess(successTimeout)`
$DIR/cmd/dynamic-timeouts_test.go:116:21-116:31: `.Timeout()`
$DIR/cmd/dynamic-timeouts_test.go:127:25-127:39: `.GOMAXPROCS(0)`
$DIR/cmd/dynamic-timeouts_test.go:128:3-128:12: `wg.Add(1)`
$DIR/cmd/dynamic-timeouts_test.go:128:5-128:12: `.Add(1)`
$DIR/cmd/dynamic-timeouts_test.go:129:14-129:44: `.New(rand.NewSource(int64(i)))`
$DIR/cmd/dynamic-timeouts_test.go:129:23-129:43: `.NewSource(int64(i))`
$DIR/cmd/dynamic-timeouts_test.go:131:12-131:19: `.Done()`
$DIR/cmd/dynamic-timeouts_test.go:134:6-134:77: `timeout.LogSuccess(time.Duration(float64(time.Second) * rng.Float64()))`
$DIR/cmd/dynamic-timeouts_test.go:134:13-134:77: `.LogSuccess(time.Duration(float64(time.Second) * rng.Float64()))`
$DIR/cmd/dynamic-timeouts_test.go:134:29-134:76: `.Duration(float64(time.Second) * rng.Float64())`
$DIR/cmd/dynamic-timeouts_test.go:134:65-134:75: `.Float64()`
$DIR/cmd/dynamic-timeouts_test.go:136:18-136:28: `.Timeout()`
$DIR/cmd/dynamic-timeouts_test.go:138:6-138:15: `panic(to)`
$DIR/cmd/dynamic-timeouts_test.go:147:2-147:34: `const minimum = 30 * time.Second`
$DIR/cmd/dynamic-timeouts_test.go:150:20-150:30: `.Timeout()`
$DIR/cmd/dynamic-timeouts_test.go:152:2-152:41: `const successTimeout = 20 * time.Second`
$DIR/cmd/dynamic-timeouts_test.go:155:4-155:38: `timeout.LogSuccess(successTimeout)`
$DIR/cmd/dynamic-timeouts_test.go:155:11-155:38: `.LogSuccess(successTimeout)`
$DIR/cmd/dynamic-timeouts_test.go:159:21-159:31: `.Timeout()`
$DIR/cmd/dynamic-timeouts_test.go:188:2-188:14: `rand.Seed(0)`
$DIR/cmd/dynamic-timeouts_test.go:188:6-188:14: `.Seed(0)`
$DIR/cmd/dynamic-timeouts_test.go:190:20-190:30: `.Timeout()`
$DIR/cmd/dynamic-timeouts_test.go:193:3-193:56: `testDynamicTimeoutAdjust(t, timeout, rand.ExpFloat64)`
$DIR/cmd/dynamic-timeouts_test.go:196:21-196:31: `.Timeout()`
$DIR/cmd/dynamic-timeouts_test.go:205:2-205:14: `rand.Seed(0)`
$DIR/cmd/dynamic-timeouts_test.go:205:6-205:14: `.Seed(0)`
$DIR/cmd/dynamic-timeouts_test.go:207:20-207:30: `.Timeout()`
$DIR/cmd/dynamic-timeouts_test.go:210:3-212:5: `testDynamicTimeoutAdjust(t, timeout, func() float64 {
			return 1.0 + rand.NormFloat64()
		})`
$DIR/cmd/dynamic-timeouts_test.go:211:21-211:35: `.NormFloat64()`
$DIR/cmd/dynamic-timeouts_test.go:215:21-215:31: `.Timeout()`
$DIR/cmd/encryption-v1_test.go:58:26-58:44: `globalIsTLS = flag`
$DIR/cmd/encryption-v1_test.go:59:2-59:20: `globalIsTLS = true`
$DIR/cmd/encryption-v1_test.go:61:19-61:47: `.NewReader(make([]byte, 64))`
$DIR/cmd/encryption-v1_test.go:64:4-64:24: `req.Header.Set(k, v)`
$DIR/cmd/encryption-v1_test.go:64:7-64:24: `.Header.Set(k, v)`
$DIR/cmd/encryption-v1_test.go:128:29-128:64: `.IsEncrypted(test.info.UserDefined)`
$DIR/cmd/encryption-v1_test.go:243:66-243:88: `.GetDecryptedRange(rs)`
$DIR/cmd/encryption-v1_test.go:271:15-271:40: `.EncryptedSize(uint64(s))`
$DIR/cmd/encryption-v1_test.go:280:5-280:36: `delete(m, crypto.MetaMultipart)`
$DIR/cmd/encryption-v1_test.go:311:35-311:61: `.oi.GetDecryptedRange(nil)`
$DIR/cmd/encryption-v1_test.go:322:35-322:85: `.oi.GetDecryptedRange(&HTTPRangeSpec{false, 0, 9})`
$DIR/cmd/encryption-v1_test.go:328:5-328:27: `rLen = test.decSz + 32`
$DIR/cmd/encryption-v1_test.go:338:35-338:97: `.oi.GetDecryptedRange(&HTTPRangeSpec{false, kb32, 3*kb32 - 1})`
$DIR/cmd/encryption-v1_test.go:344:5-344:52: `rLen = (pkgSz + 32) + (test.decSz - pkgSz + 32)`
$DIR/cmd/encryption-v1_test.go:353:35-353:101: `.oi.GetDecryptedRange(&HTTPRangeSpec{false, 3 * kb32, 5*kb32 - 1})`
$DIR/cmd/encryption-v1_test.go:359:5-359:54: `rLen = (pkgSz + 32) + (test.decSz - pkgSz + 32*2)`
$DIR/cmd/encryption-v1_test.go:375:5-375:20: `r[i].Number = i`
$DIR/cmd/encryption-v1_test.go:376:5-376:30: `r[i].Size = getEncSize(s)`
$DIR/cmd/encryption-v1_test.go:377:5-377:21: `sum += r[i].Size`
$DIR/cmd/encryption-v1_test.go:389:5-389:21: `a = append(a, k)`
$DIR/cmd/encryption-v1_test.go:399:5-399:13: `sum += i`
$DIR/cmd/encryption-v1_test.go:406:5-406:18: `sum += i.Size`
$DIR/cmd/encryption-v1_test.go:434:4-434:29: `skipLen = oSize - readLen`
$DIR/cmd/encryption-v1_test.go:448:5-448:21: `readStart = true`
$DIR/cmd/encryption-v1_test.go:450:5-450:41: `partOffset = skipLen - cumulativeSum`
$DIR/cmd/encryption-v1_test.go:454:5-454:36: `sn = uint32(partOffset / pkgSz)`
$DIR/cmd/encryption-v1_test.go:455:5-455:30: `skip = partOffset % pkgSz`
$DIR/cmd/encryption-v1_test.go:456:5-456:11: `ps = i`
$DIR/cmd/encryption-v1_test.go:457:5-457:48: `o = cumulativeEncSum + int64(sn)*(pkgSz+32)`
$DIR/cmd/encryption-v1_test.go:459:5-459:42: `partDarePkgOffset = partOffset - skip`
$DIR/cmd/encryption-v1_test.go:465:6-465:32: `toRead -= currentPartBytes`
$DIR/cmd/encryption-v1_test.go:466:6-466:43: `l += getEncSize(currentPartDareBytes)`
$DIR/cmd/encryption-v1_test.go:477:7-477:25: `lbPkgEndOffset = v`
$DIR/cmd/encryption-v1_test.go:482:6-482:57: `l += getEncSize(currentPartDareBytes - bytesToDrop)`
$DIR/cmd/encryption-v1_test.go:487:4-487:22: `cumulativeSum += v`
$DIR/cmd/encryption-v1_test.go:488:4-488:37: `cumulativeEncSum += getEncSize(v)`
$DIR/cmd/encryption-v1_test.go:496:35-496:61: `.oi.GetDecryptedRange(nil)`
$DIR/cmd/encryption-v1_test.go:511:35-511:111: `.oi.GetDecryptedRange(&HTTPRangeSpec{false, skipLen, skipLen + readLen - 1})`
$DIR/cmd/encryption-v1_test.go:530:35-530:92: `.oi.GetDecryptedRange(&HTTPRangeSpec{true, -readLen, -1})`
$DIR/cmd/encryption-v1_test.go:648:70-648:98: `.ServerSideEncryption.Type()`
$DIR/cmd/endpoint-ellipses_test.go:59:3-67:5: `t.Run("", func(t *testing.T) {
			_, _, err := createServerEndpoints(testCase.serverAddr, testCase.args...)
			if err != nil && testCase.success {
				t.Errorf("Expected success but failed instead %s", err)
			}
			if err == nil && !testCase.success {
				t.Errorf("Expected failure but passed instead")
			}
		})`
$DIR/cmd/endpoint-ellipses_test.go:59:4-67:5: `.Run("", func(t *testing.T) {
			_, _, err := createServerEndpoints(testCase.serverAddr, testCase.args...)
			if err != nil && testCase.success {
				t.Errorf("Expected success but failed instead %s", err)
			}
			if err == nil && !testCase.success {
				t.Errorf("Expected failure but passed instead")
			}
		})`
$DIR/cmd/endpoint-ellipses_test.go:84:3-89:5: `t.Run("", func(t *testing.T) {
			gotGCD := getDivisibleSize(testCase.totalSizes)
			if testCase.result != gotGCD {
				t.Errorf("Expected %v, got %v", testCase.result, gotGCD)
			}
		})`
$DIR/cmd/endpoint-ellipses_test.go:84:4-89:5: `.Run("", func(t *testing.T) {
			gotGCD := getDivisibleSize(testCase.totalSizes)
			if testCase.result != gotGCD {
				t.Errorf("Expected %v, got %v", testCase.result, gotGCD)
			}
		})`
$DIR/cmd/endpoint-ellipses_test.go:171:3-191:5: `t.Run("", func(t *testing.T) {
			argPatterns := make([]ellipses.ArgPattern, len(testCase.args))
			for i, arg := range testCase.args {
				patterns, err := ellipses.FindEllipsesPatterns(arg)
				if err != nil {
					t.Fatalf("Unexpected failure %s", err)
				}
				argPatterns[i] = patterns
			}

			gotIndexes, err := getSetIndexes(testCase.args, testCase.totalSizes, testCase.envOverride, argPatterns)
			if err != nil && testCase.success {
				t.Errorf("Expected success but failed instead %s", err)
			}
			if err == nil && !testCase.success {
				t.Errorf("Expected failure but passed instead")
			}
			if !reflect.DeepEqual(testCase.indexes, gotIndexes) {
				t.Errorf("Expected %v, got %v", testCase.indexes, gotIndexes)
			}
		})`
$DIR/cmd/endpoint-ellipses_test.go:171:4-191:5: `.Run("", func(t *testing.T) {
			argPatterns := make([]ellipses.ArgPattern, len(testCase.args))
			for i, arg := range testCase.args {
				patterns, err := ellipses.FindEllipsesPatterns(arg)
				if err != nil {
					t.Fatalf("Unexpected failure %s", err)
				}
				argPatterns[i] = patterns
			}

			gotIndexes, err := getSetIndexes(testCase.args, testCase.totalSizes, testCase.envOverride, argPatterns)
			if err != nil && testCase.success {
				t.Errorf("Expected success but failed instead %s", err)
			}
			if err == nil && !testCase.success {
				t.Errorf("Expected failure but passed instead")
			}
			if !reflect.DeepEqual(testCase.indexes, gotIndexes) {
				t.Errorf("Expected %v, got %v", testCase.indexes, gotIndexes)
			}
		})`
$DIR/cmd/endpoint-ellipses_test.go:174:30-174:56: `.FindEllipsesPatterns(arg)`
$DIR/cmd/endpoint-ellipses_test.go:178:5-178:30: `argPatterns[i] = patterns`
$DIR/cmd/endpoint-ellipses_test.go:188:15-188:55: `.DeepEqual(testCase.indexes, gotIndexes)`
$DIR/cmd/endpoint-ellipses_test.go:293:3-312:5: `t.Run("", func(t *testing.T) {
			argPatterns := make([]ellipses.ArgPattern, len(testCase.args))
			for i, arg := range testCase.args {
				patterns, err := ellipses.FindEllipsesPatterns(arg)
				if err != nil {
					t.Fatalf("Unexpected failure %s", err)
				}
				argPatterns[i] = patterns
			}
			gotIndexes, err := getSetIndexes(testCase.args, testCase.totalSizes, 0, argPatterns)
			if err != nil && testCase.success {
				t.Errorf("Expected success but failed instead %s", err)
			}
			if err == nil && !testCase.success {
				t.Errorf("Expected failure but passed instead")
			}
			if !reflect.DeepEqual(testCase.indexes, gotIndexes) {
				t.Errorf("Expected %v, got %v", testCase.indexes, gotIndexes)
			}
		})`
$DIR/cmd/endpoint-ellipses_test.go:293:4-312:5: `.Run("", func(t *testing.T) {
			argPatterns := make([]ellipses.ArgPattern, len(testCase.args))
			for i, arg := range testCase.args {
				patterns, err := ellipses.FindEllipsesPatterns(arg)
				if err != nil {
					t.Fatalf("Unexpected failure %s", err)
				}
				argPatterns[i] = patterns
			}
			gotIndexes, err := getSetIndexes(testCase.args, testCase.totalSizes, 0, argPatterns)
			if err != nil && testCase.success {
				t.Errorf("Expected success but failed instead %s", err)
			}
			if err == nil && !testCase.success {
				t.Errorf("Expected failure but passed instead")
			}
			if !reflect.DeepEqual(testCase.indexes, gotIndexes) {
				t.Errorf("Expected %v, got %v", testCase.indexes, gotIndexes)
			}
		})`
$DIR/cmd/endpoint-ellipses_test.go:296:30-296:56: `.FindEllipsesPatterns(arg)`
$DIR/cmd/endpoint-ellipses_test.go:300:5-300:30: `argPatterns[i] = patterns`
$DIR/cmd/endpoint-ellipses_test.go:309:15-309:55: `.DeepEqual(testCase.indexes, gotIndexes)`
$DIR/cmd/endpoint-ellipses_test.go:636:3-647:5: `t.Run("", func(t *testing.T) {
			gotEs, err := parseEndpointSet(0, testCase.arg)
			if err != nil && testCase.success {
				t.Errorf("Expected success but failed instead %s", err)
			}
			if err == nil && !testCase.success {
				t.Errorf("Expected failure but passed instead")
			}
			if !reflect.DeepEqual(testCase.es, gotEs) {
				t.Errorf("Expected %v, got %v", testCase.es, gotEs)
			}
		})`
$DIR/cmd/endpoint-ellipses_test.go:636:4-647:5: `.Run("", func(t *testing.T) {
			gotEs, err := parseEndpointSet(0, testCase.arg)
			if err != nil && testCase.success {
				t.Errorf("Expected success but failed instead %s", err)
			}
			if err == nil && !testCase.success {
				t.Errorf("Expected failure but passed instead")
			}
			if !reflect.DeepEqual(testCase.es, gotEs) {
				t.Errorf("Expected %v, got %v", testCase.es, gotEs)
			}
		})`
$DIR/cmd/endpoint-ellipses_test.go:644:15-644:45: `.DeepEqual(testCase.es, gotEs)`
$DIR/cmd/endpoint_contrib_test.go:28:3-28:40: `globalMinioPort = tempGlobalMinioPort`
$DIR/cmd/endpoint_contrib_test.go:30:2-30:26: `globalMinioPort = "9000"`
$DIR/cmd/endpoint_contrib_test.go:34:3-34:40: `globalDomainIPs = tempGlobalDomainIPs`
$DIR/cmd/endpoint_contrib_test.go:41:7-41:22: `.NewStringSet()`
$DIR/cmd/endpoint_contrib_test.go:41:27-41:42: `.NewStringSet()`
$DIR/cmd/endpoint_contrib_test.go:42:7-42:36: `.CreateStringSet("localhost")`
$DIR/cmd/endpoint_contrib_test.go:42:41-42:56: `.NewStringSet()`
$DIR/cmd/endpoint_contrib_test.go:43:7-43:48: `.CreateStringSet("localhost", "10.0.0.1")`
$DIR/cmd/endpoint_contrib_test.go:43:53-43:86: `.CreateStringSet("10.0.0.1:9000")`
$DIR/cmd/endpoint_contrib_test.go:44:7-44:53: `.CreateStringSet("localhost:9001", "10.0.0.1")`
$DIR/cmd/endpoint_contrib_test.go:44:58-44:91: `.CreateStringSet("10.0.0.1:9000")`
$DIR/cmd/endpoint_contrib_test.go:45:7-45:53: `.CreateStringSet("localhost", "10.0.0.1:9001")`
$DIR/cmd/endpoint_contrib_test.go:45:58-45:91: `.CreateStringSet("10.0.0.1:9001")`
$DIR/cmd/endpoint_contrib_test.go:46:7-46:58: `.CreateStringSet("localhost:9000", "10.0.0.1:9001")`
$DIR/cmd/endpoint_contrib_test.go:46:63-46:96: `.CreateStringSet("10.0.0.1:9001")`
$DIR/cmd/endpoint_contrib_test.go:48:7-48:47: `.CreateStringSet("10.0.0.1", "10.0.0.2")`
$DIR/cmd/endpoint_contrib_test.go:48:52-48:102: `.CreateStringSet("10.0.0.1:9000", "10.0.0.2:9000")`
$DIR/cmd/endpoint_contrib_test.go:49:7-49:52: `.CreateStringSet("10.0.0.1:9001", "10.0.0.2")`
$DIR/cmd/endpoint_contrib_test.go:49:57-49:107: `.CreateStringSet("10.0.0.1:9001", "10.0.0.2:9000")`
$DIR/cmd/endpoint_contrib_test.go:50:7-50:52: `.CreateStringSet("10.0.0.1", "10.0.0.2:9002")`
$DIR/cmd/endpoint_contrib_test.go:50:57-50:107: `.CreateStringSet("10.0.0.1:9000", "10.0.0.2:9002")`
$DIR/cmd/endpoint_contrib_test.go:51:7-51:57: `.CreateStringSet("10.0.0.1:9001", "10.0.0.2:9002")`
$DIR/cmd/endpoint_contrib_test.go:51:62-51:112: `.CreateStringSet("10.0.0.1:9001", "10.0.0.2:9002")`
$DIR/cmd/endpoint_contrib_test.go:55:3-55:24: `globalDomainIPs = nil`
$DIR/cmd/endpoint_contrib_test.go:57:3-57:38: `updateDomainIPs(testCase.endPoints)`
$DIR/cmd/endpoint_contrib_test.go:59:15-59:54: `.expectedResult.Equals(globalDomainIPs)`
$DIR/cmd/endpoint_test.go:31:14-31:48: `.Parse("https://example.org/path")`
$DIR/cmd/endpoint_test.go:32:14-32:51: `.Parse("http://192.168.253.200/path")`
$DIR/cmd/endpoint_test.go:33:29-33:41: `.Abs("/foo")`
$DIR/cmd/endpoint_test.go:59:3-92:5: `t.Run(fmt.Sprint("case-", i), func(t *testing.T) {
			endpoint, err := NewEndpoint(test.arg)
			if err == nil {
				err = endpoint.UpdateIsLocal()
			}

			switch {
			case test.expectedErr == nil:
				if err != nil {
					t.Errorf("error: expected = <nil>, got = %v", err)
				}
			case err == nil:
				t.Errorf("error: expected = %v, got = <nil>", test.expectedErr)
			case test.expectedErr.Error() != err.Error():
				t.Errorf("error: expected = %v, got = %v", test.expectedErr, err)
			}

			if err == nil {
				if (test.expectedEndpoint.URL == nil) != (endpoint.URL == nil) {
					t.Errorf("endpoint url: expected = %#v, got = %#v", test.expectedEndpoint.URL, endpoint.URL)
					return
				} else if test.expectedEndpoint.URL.String() != endpoint.URL.String() {
					t.Errorf("endpoint url: expected = %#v, got = %#v", test.expectedEndpoint.URL.String(), endpoint.URL.String())
					return
				}
				if !reflect.DeepEqual(test.expectedEndpoint, endpoint) {
					t.Errorf("endpoint: expected = %#v, got = %#v", test.expectedEndpoint, endpoint)
				}
			}

			if err == nil && test.expectedType != endpoint.Type() {
				t.Errorf("type: expected = %+v, got = %+v", test.expectedType, endpoint.Type())
			}
		})`
$DIR/cmd/endpoint_test.go:59:4-92:5: `.Run(fmt.Sprint("case-", i), func(t *testing.T) {
			endpoint, err := NewEndpoint(test.arg)
			if err == nil {
				err = endpoint.UpdateIsLocal()
			}

			switch {
			case test.expectedErr == nil:
				if err != nil {
					t.Errorf("error: expected = <nil>, got = %v", err)
				}
			case err == nil:
				t.Errorf("error: expected = %v, got = <nil>", test.expectedErr)
			case test.expectedErr.Error() != err.Error():
				t.Errorf("error: expected = %v, got = %v", test.expectedErr, err)
			}

			if err == nil {
				if (test.expectedEndpoint.URL == nil) != (endpoint.URL == nil) {
					t.Errorf("endpoint url: expected = %#v, got = %#v", test.expectedEndpoint.URL, endpoint.URL)
					return
				} else if test.expectedEndpoint.URL.String() != endpoint.URL.String() {
					t.Errorf("endpoint url: expected = %#v, got = %#v", test.expectedEndpoint.URL.String(), endpoint.URL.String())
					return
				}
				if !reflect.DeepEqual(test.expectedEndpoint, endpoint) {
					t.Errorf("endpoint: expected = %#v, got = %#v", test.expectedEndpoint, endpoint)
				}
			}

			if err == nil && test.expectedType != endpoint.Type() {
				t.Errorf("type: expected = %+v, got = %+v", test.expectedType, endpoint.Type())
			}
		})`
$DIR/cmd/endpoint_test.go:59:12-59:31: `.Sprint("case-", i)`
$DIR/cmd/endpoint_test.go:62:5-62:35: `err = endpoint.UpdateIsLocal()`
$DIR/cmd/endpoint_test.go:62:19-62:35: `.UpdateIsLocal()`
$DIR/cmd/endpoint_test.go:80:19-80:49: `.expectedEndpoint.URL.String()`
$DIR/cmd/endpoint_test.go:80:61-80:74: `.URL.String()`
$DIR/cmd/endpoint_test.go:84:16-84:59: `.DeepEqual(test.expectedEndpoint, endpoint)`
$DIR/cmd/endpoint_test.go:89:50-89:57: `.Type()`
$DIR/cmd/endpoint_test.go:135:3-135:40: `globalMinioPort = tempGlobalMinioPort`
$DIR/cmd/endpoint_test.go:137:2-137:26: `globalMinioPort = "9000"`
$DIR/cmd/endpoint_test.go:140:28-142:8: `.FuncMatch(func(ip string, matchString string) bool {
		return !net.ParseIP(ip).IsLoopback()
	}, "")`
$DIR/cmd/endpoint_test.go:141:14-141:26: `.ParseIP(ip)`
$DIR/cmd/endpoint_test.go:141:26-141:39: `.IsLoopback()`
$DIR/cmd/endpoint_test.go:146:33-146:43: `.ToSlice()`
$DIR/cmd/endpoint_test.go:149:21-149:28: `.Abs(s)`
$DIR/cmd/endpoint_test.go:159:15-159:26: `.Parse(arg)`
$DIR/cmd/endpoint_test.go:160:4-160:26: `URLs = append(URLs, u)`
$DIR/cmd/endpoint_test.go:161:4-161:67: `localFlags = append(localFlags, strings.HasPrefix(arg, prefix))`
$DIR/cmd/endpoint_test.go:161:43-161:66: `.HasPrefix(arg, prefix)`
$DIR/cmd/endpoint_test.go:179:2-184:3: `args = []string{
		"http://" + nonLoopBackIP + ":10000/d1",
		"http://" + nonLoopBackIP + ":9000/d2",
		"http://example.org:10000/d3",
		"http://example.com:10000/d4",
	}`
$DIR/cmd/endpoint_test.go:188:2-193:3: `args = []string{
		"http://" + nonLoopBackIP + ":80/d1",
		"http://example.org:9000/d2",
		"http://example.com:80/d3",
		"http://example.net:80/d4",
	}`
$DIR/cmd/endpoint_test.go:197:2-202:3: `args = []string{
		"http://" + nonLoopBackIP + ":9000/d1",
		"http://example.org:9000/d2",
		"http://example.com:9000/d3",
		"http://example.net:9000/d4",
	}`
$DIR/cmd/endpoint_test.go:209:2-214:3: `args = []string{
		case5Endpoint1,
		case5Endpoint2,
		case5Endpoint3,
		case5Endpoint4,
	}`
$DIR/cmd/endpoint_test.go:218:2-223:3: `args = []string{
		"http://localhost:9000/d1",
		"http://localhost:9001/d2",
		"http://127.0.0.1:9002/d3",
		case6Endpoint,
	}`
$DIR/cmd/endpoint_test.go:316:3-341:5: `t.Run("", func(t *testing.T) {
			endpoints, setupType, err := CreateEndpoints(testCase.serverAddr, false, testCase.args...)
			if err == nil && testCase.expectedErr != nil {
				t.Errorf("error: expected = %v, got = <nil>", testCase.expectedErr)
			}
			if err == nil {
				if setupType != testCase.expectedSetupType {
					t.Errorf("setupType: expected = %v, got = %v", testCase.expectedSetupType, setupType)
				}
				if len(endpoints) != len(testCase.expectedEndpoints) {
					t.Errorf("endpoints: expected = %d, got = %d", len(testCase.expectedEndpoints),
						len(endpoints))
				} else {
					for i, endpoint := range endpoints {
						if testCase.expectedEndpoints[i].String() != endpoint.String() {
							t.Errorf("endpoints: expected = %s, got = %s",
								testCase.expectedEndpoints[i],
								endpoint)
						}
					}
				}
			}
			if err != nil && testCase.expectedErr == nil {
				t.Errorf("error: expected = <nil>, got = %v, testCase: %v", err, testCase)
			}
		})`
$DIR/cmd/endpoint_test.go:316:4-341:5: `.Run("", func(t *testing.T) {
			endpoints, setupType, err := CreateEndpoints(testCase.serverAddr, false, testCase.args...)
			if err == nil && testCase.expectedErr != nil {
				t.Errorf("error: expected = %v, got = <nil>", testCase.expectedErr)
			}
			if err == nil {
				if setupType != testCase.expectedSetupType {
					t.Errorf("setupType: expected = %v, got = %v", testCase.expectedSetupType, setupType)
				}
				if len(endpoints) != len(testCase.expectedEndpoints) {
					t.Errorf("endpoints: expected = %d, got = %d", len(testCase.expectedEndpoints),
						len(endpoints))
				} else {
					for i, endpoint := range endpoints {
						if testCase.expectedEndpoints[i].String() != endpoint.String() {
							t.Errorf("endpoints: expected = %s, got = %s",
								testCase.expectedEndpoints[i],
								endpoint)
						}
					}
				}
			}
			if err != nil && testCase.expectedErr == nil {
				t.Errorf("error: expected = <nil>, got = %v, testCase: %v", err, testCase)
			}
		})`
$DIR/cmd/endpoint_test.go:330:39-330:48: `.String()`
$DIR/cmd/endpoint_test.go:330:60-330:69: `.String()`
$DIR/cmd/endpoint_test.go:351:3-351:40: `globalMinioPort = tempGlobalMinioPort`
$DIR/cmd/endpoint_test.go:353:2-353:26: `globalMinioPort = "9000"`
$DIR/cmd/endpoint_test.go:377:27-377:58: `.Endpoints.UpdateIsLocal(false)`
$DIR/cmd/endpoint_test.go:391:3-391:40: `globalMinioPort = tempGlobalMinioPort`
$DIR/cmd/endpoint_test.go:393:2-393:26: `globalMinioPort = "9000"`
$DIR/cmd/endpoint_test.go:410:27-410:58: `.Endpoints.UpdateIsLocal(false)`
$DIR/cmd/endpoint_test.go:414:35-414:43: `.peers()`
$DIR/cmd/endpoint_test.go:415:14-415:62: `.DeepEqual(remotePeers, testCase.expectedResult)`
$DIR/cmd/erasure-decode_test.go:92:37-92:50: `.Background()`
$DIR/cmd/erasure-decode_test.go:98:17-98:46: `.ReadFull(crand.Reader, data)`
$DIR/cmd/erasure-decode_test.go:103:11-103:33: `.algorithm.Available()`
$DIR/cmd/erasure-decode_test.go:104:4-104:43: `writeAlgorithm = DefaultBitrotAlgorithm`
$DIR/cmd/erasure-decode_test.go:109:4-109:133: `writers[i] = newBitrotWriter(disk, "testbucket", "object", erasure.ShardFileSize(test.data), writeAlgorithm, erasure.ShardSize())`
$DIR/cmd/erasure-decode_test.go:109:70-109:95: `.ShardFileSize(test.data)`
$DIR/cmd/erasure-decode_test.go:109:120-109:132: `.ShardSize()`
$DIR/cmd/erasure-decode_test.go:111:20-111:111: `.Encode(context.Background(), bytes.NewReader(data), writers, buffer, erasure.dataBlocks+1)`
$DIR/cmd/erasure-decode_test.go:111:35-111:48: `.Background()`
$DIR/cmd/erasure-decode_test.go:111:55-111:71: `.NewReader(data)`
$DIR/cmd/erasure-decode_test.go:112:3-112:30: `closeBitrotWriters(writers)`
$DIR/cmd/erasure-decode_test.go:121:5-121:19: `disks[i] = nil`
$DIR/cmd/erasure-decode_test.go:131:25-131:78: `.ShardFileOffset(test.offset, test.length, test.data)`
$DIR/cmd/erasure-decode_test.go:133:4-133:159: `bitrotReaders[index] = newBitrotReader(disk, nil, "testbucket", "object", tillOffset, writeAlgorithm, bitrotWriterSum(writers[index]), erasure.ShardSize())`
$DIR/cmd/erasure-decode_test.go:133:146-133:158: `.ShardSize()`
$DIR/cmd/erasure-decode_test.go:136:18-136:33: `.NewBuffer(nil)`
$DIR/cmd/erasure-decode_test.go:137:3-137:113: `_, err = erasure.Decode(context.Background(), writer, bitrotReaders, test.offset, test.length, test.data, nil)`
$DIR/cmd/erasure-decode_test.go:137:19-137:113: `.Decode(context.Background(), writer, bitrotReaders, test.offset, test.length, test.data, nil)`
$DIR/cmd/erasure-decode_test.go:137:34-137:47: `.Background()`
$DIR/cmd/erasure-decode_test.go:138:3-138:36: `closeBitrotReaders(bitrotReaders)`
$DIR/cmd/erasure-decode_test.go:146:24-146:32: `.Bytes()`
$DIR/cmd/erasure-decode_test.go:146:40-146:98: `.Equal(content, data[test.offset:test.offset+test.length])`
$DIR/cmd/erasure-decode_test.go:153:5-153:27: `disks[i] = OfflineDisk`
$DIR/cmd/erasure-decode_test.go:157:4-157:51: `bitrotReaders = make([]io.ReaderAt, len(disks))`
$DIR/cmd/erasure-decode_test.go:162:26-162:79: `.ShardFileOffset(test.offset, test.length, test.data)`
$DIR/cmd/erasure-decode_test.go:163:5-163:160: `bitrotReaders[index] = newBitrotReader(disk, nil, "testbucket", "object", tillOffset, writeAlgorithm, bitrotWriterSum(writers[index]), erasure.ShardSize())`
$DIR/cmd/erasure-decode_test.go:163:147-163:159: `.ShardSize()`
$DIR/cmd/erasure-decode_test.go:171:6-171:27: `r.disk = badDisk{nil}`
$DIR/cmd/erasure-decode_test.go:173:6-173:27: `r.disk = badDisk{nil}`
$DIR/cmd/erasure-decode_test.go:177:5-177:27: `bitrotReaders[0] = nil`
$DIR/cmd/erasure-decode_test.go:179:4-179:18: `writer.Reset()`
$DIR/cmd/erasure-decode_test.go:179:10-179:18: `.Reset()`
$DIR/cmd/erasure-decode_test.go:180:4-180:114: `_, err = erasure.Decode(context.Background(), writer, bitrotReaders, test.offset, test.length, test.data, nil)`
$DIR/cmd/erasure-decode_test.go:180:20-180:114: `.Decode(context.Background(), writer, bitrotReaders, test.offset, test.length, test.data, nil)`
$DIR/cmd/erasure-decode_test.go:180:35-180:48: `.Background()`
$DIR/cmd/erasure-decode_test.go:181:4-181:37: `closeBitrotReaders(bitrotReaders)`
$DIR/cmd/erasure-decode_test.go:189:25-189:33: `.Bytes()`
$DIR/cmd/erasure-decode_test.go:189:41-189:99: `.Equal(content, data[test.offset:test.offset+test.length])`
$DIR/cmd/erasure-decode_test.go:201:12-201:20: `.Short()`
$DIR/cmd/erasure-decode_test.go:202:3-202:11: `t.Skip()`
$DIR/cmd/erasure-decode_test.go:202:4-202:11: `.Skip()`
$DIR/cmd/erasure-decode_test.go:214:36-214:49: `.Background()`
$DIR/cmd/erasure-decode_test.go:221:2-221:26: `_, err = rand.Read(data)`
$DIR/cmd/erasure-decode_test.go:221:15-221:26: `.Read(data)`
$DIR/cmd/erasure-decode_test.go:231:3-231:137: `writers[i] = newBitrotWriter(disk, "testbucket", "object", erasure.ShardFileSize(length), DefaultBitrotAlgorithm, erasure.ShardSize())`
$DIR/cmd/erasure-decode_test.go:231:69-231:91: `.ShardFileSize(length)`
$DIR/cmd/erasure-decode_test.go:231:124-231:136: `.ShardSize()`
$DIR/cmd/erasure-decode_test.go:239:19-239:110: `.Encode(context.Background(), bytes.NewReader(data), writers, buffer, erasure.dataBlocks+1)`
$DIR/cmd/erasure-decode_test.go:239:34-239:47: `.Background()`
$DIR/cmd/erasure-decode_test.go:239:54-239:70: `.NewReader(data)`
$DIR/cmd/erasure-decode_test.go:240:2-240:29: `closeBitrotWriters(writers)`
$DIR/cmd/erasure-decode_test.go:249:11-249:52: `.New(rand.NewSource(UTCNow().UnixNano()))`
$DIR/cmd/erasure-decode_test.go:249:20-249:51: `.NewSource(UTCNow().UnixNano())`
$DIR/cmd/erasure-decode_test.go:249:39-249:50: `.UnixNano()`
$DIR/cmd/erasure-decode_test.go:255:14-255:29: `.Int63n(length)`
$DIR/cmd/erasure-decode_test.go:256:15-256:39: `.Int63n(length - offset)`
$DIR/cmd/erasure-decode_test.go:266:25-266:66: `.ShardFileOffset(offset, readLen, length)`
$DIR/cmd/erasure-decode_test.go:267:4-267:143: `bitrotReaders[index] = newStreamingBitrotReader(disk, nil, "testbucket", "object", tillOffset, DefaultBitrotAlgorithm, erasure.ShardSize())`
$DIR/cmd/erasure-decode_test.go:267:130-267:142: `.ShardSize()`
$DIR/cmd/erasure-decode_test.go:269:3-269:98: `_, err = erasure.Decode(context.Background(), buf, bitrotReaders, offset, readLen, length, nil)`
$DIR/cmd/erasure-decode_test.go:269:19-269:98: `.Decode(context.Background(), buf, bitrotReaders, offset, readLen, length, nil)`
$DIR/cmd/erasure-decode_test.go:269:34-269:47: `.Background()`
$DIR/cmd/erasure-decode_test.go:270:3-270:36: `closeBitrotReaders(bitrotReaders)`
$DIR/cmd/erasure-decode_test.go:274:13-274:21: `.Bytes()`
$DIR/cmd/erasure-decode_test.go:275:12-275:33: `.Equal(expected, got)`
$DIR/cmd/erasure-decode_test.go:278:3-278:14: `buf.Reset()`
$DIR/cmd/erasure-decode_test.go:278:6-278:14: `.Reset()`
$DIR/cmd/erasure-encode_test.go:91:37-91:50: `.Background()`
$DIR/cmd/erasure-encode_test.go:98:17-98:45: `.ReadFull(rand.Reader, data)`
$DIR/cmd/erasure-encode_test.go:106:4-106:154: `writers[i] = newBitrotWriter(disk, "testbucket", "object", erasure.ShardFileSize(int64(len(data[test.offset:]))), test.algorithm, erasure.ShardSize())`
$DIR/cmd/erasure-encode_test.go:106:70-106:116: `.ShardFileSize(int64(len(data[test.offset:])))`
$DIR/cmd/erasure-encode_test.go:106:141-106:153: `.ShardSize()`
$DIR/cmd/erasure-encode_test.go:108:20-108:125: `.Encode(context.Background(), bytes.NewReader(data[test.offset:]), writers, buffer, erasure.dataBlocks+1)`
$DIR/cmd/erasure-encode_test.go:108:35-108:48: `.Background()`
$DIR/cmd/erasure-encode_test.go:108:55-108:85: `.NewReader(data[test.offset:])`
$DIR/cmd/erasure-encode_test.go:109:3-109:30: `closeBitrotWriters(writers)`
$DIR/cmd/erasure-encode_test.go:118:5-118:27: `disks[i] = OfflineDisk`
$DIR/cmd/erasure-encode_test.go:130:5-130:156: `writers[i] = newBitrotWriter(disk, "testbucket", "object2", erasure.ShardFileSize(int64(len(data[test.offset:]))), test.algorithm, erasure.ShardSize())`
$DIR/cmd/erasure-encode_test.go:130:72-130:118: `.ShardFileSize(int64(len(data[test.offset:])))`
$DIR/cmd/erasure-encode_test.go:130:143-130:155: `.ShardSize()`
$DIR/cmd/erasure-encode_test.go:135:6-135:27: `w.disk = badDisk{nil}`
$DIR/cmd/erasure-encode_test.go:137:6-137:35: `w.closeWithErr(errFaultyDisk)`
$DIR/cmd/erasure-encode_test.go:137:7-137:35: `.closeWithErr(errFaultyDisk)`
$DIR/cmd/erasure-encode_test.go:141:5-141:21: `writers[0] = nil`
$DIR/cmd/erasure-encode_test.go:143:4-143:125: `n, err = erasure.Encode(context.Background(), bytes.NewReader(data[test.offset:]), writers, buffer, erasure.dataBlocks+1)`
$DIR/cmd/erasure-encode_test.go:143:20-143:125: `.Encode(context.Background(), bytes.NewReader(data[test.offset:]), writers, buffer, erasure.dataBlocks+1)`
$DIR/cmd/erasure-encode_test.go:143:35-143:48: `.Background()`
$DIR/cmd/erasure-encode_test.go:143:55-143:85: `.NewReader(data[test.offset:])`
$DIR/cmd/erasure-encode_test.go:144:4-144:31: `closeBitrotWriters(writers)`
$DIR/cmd/erasure-heal_test.go:78:37-78:50: `.Background()`
$DIR/cmd/erasure-heal_test.go:83:17-83:45: `.ReadFull(rand.Reader, data)`
$DIR/cmd/erasure-heal_test.go:89:4-89:137: `writers[i] = newBitrotWriter(disk, "testbucket", "testobject", erasure.ShardFileSize(test.size), test.algorithm, erasure.ShardSize())`
$DIR/cmd/erasure-heal_test.go:89:74-89:99: `.ShardFileSize(test.size)`
$DIR/cmd/erasure-heal_test.go:89:124-89:136: `.ShardSize()`
$DIR/cmd/erasure-heal_test.go:91:3-91:110: `_, err = erasure.Encode(context.Background(), bytes.NewReader(data), writers, buffer, erasure.dataBlocks+1)`
$DIR/cmd/erasure-heal_test.go:91:19-91:110: `.Encode(context.Background(), bytes.NewReader(data), writers, buffer, erasure.dataBlocks+1)`
$DIR/cmd/erasure-heal_test.go:91:34-91:47: `.Background()`
$DIR/cmd/erasure-heal_test.go:91:54-91:70: `.NewReader(data)`
$DIR/cmd/erasure-heal_test.go:92:3-92:30: `closeBitrotWriters(writers)`
$DIR/cmd/erasure-heal_test.go:99:28-99:53: `.ShardFileSize(test.size)`
$DIR/cmd/erasure-heal_test.go:100:4-100:152: `readers[i] = newBitrotReader(disk, nil, "testbucket", "testobject", shardFilesize, test.algorithm, bitrotWriterSum(writers[i]), erasure.ShardSize())`
$DIR/cmd/erasure-heal_test.go:100:139-100:151: `.ShardSize()`
$DIR/cmd/erasure-heal_test.go:105:3-105:26: `copy(staleDisks, disks)`
$DIR/cmd/erasure-heal_test.go:108:5-108:21: `readers[j] = nil`
$DIR/cmd/erasure-heal_test.go:110:5-110:24: `staleDisks[j] = nil`
$DIR/cmd/erasure-heal_test.go:116:5-116:26: `r.disk = badDisk{nil}`
$DIR/cmd/erasure-heal_test.go:118:5-118:26: `r.disk = badDisk{nil}`
$DIR/cmd/erasure-heal_test.go:122:4-122:32: `staleDisks[j] = badDisk{nil}`
$DIR/cmd/erasure-heal_test.go:130:4-130:66: `os.Remove(pathJoin(disk.String(), "testbucket", "testobject"))`
$DIR/cmd/erasure-heal_test.go:130:6-130:66: `.Remove(pathJoin(disk.String(), "testbucket", "testobject"))`
$DIR/cmd/erasure-heal_test.go:130:27-130:36: `.String()`
$DIR/cmd/erasure-heal_test.go:131:4-131:142: `staleWriters[i] = newBitrotWriter(disk, "testbucket", "testobject", erasure.ShardFileSize(test.size), test.algorithm, erasure.ShardSize())`
$DIR/cmd/erasure-heal_test.go:131:79-131:104: `.ShardFileSize(test.size)`
$DIR/cmd/erasure-heal_test.go:131:129-131:141: `.ShardSize()`
$DIR/cmd/erasure-heal_test.go:135:3-135:77: `err = erasure.Heal(context.Background(), staleWriters, readers, test.size)`
$DIR/cmd/erasure-heal_test.go:135:16-135:77: `.Heal(context.Background(), staleWriters, readers, test.size)`
$DIR/cmd/erasure-heal_test.go:135:29-135:42: `.Background()`
$DIR/cmd/erasure-heal_test.go:136:3-136:30: `closeBitrotReaders(readers)`
$DIR/cmd/erasure-heal_test.go:137:3-137:35: `closeBitrotWriters(staleWriters)`
$DIR/cmd/erasure-heal_test.go:151:14-151:83: `.Equal(bitrotWriterSum(staleWriters[i]), bitrotWriterSum(writers[i]))`
$DIR/cmd/erasure-healing-common_test.go:91:9-91:20: `.Unix(0, 1)`
$DIR/cmd/erasure-healing-common_test.go:91:20-91:26: `.UTC()`
$DIR/cmd/erasure-healing-common_test.go:92:9-92:20: `.Unix(0, 2)`
$DIR/cmd/erasure-healing-common_test.go:92:20-92:26: `.UTC()`
$DIR/cmd/erasure-healing-common_test.go:93:9-93:20: `.Unix(0, 3)`
$DIR/cmd/erasure-healing-common_test.go:93:20-93:26: `.UTC()`
$DIR/cmd/erasure-healing-common_test.go:94:9-94:20: `.Unix(0, 3)`
$DIR/cmd/erasure-healing-common_test.go:94:20-94:26: `.UTC()`
$DIR/cmd/erasure-healing-common_test.go:95:9-95:20: `.Unix(0, 2)`
$DIR/cmd/erasure-healing-common_test.go:95:20-95:26: `.UTC()`
$DIR/cmd/erasure-healing-common_test.go:96:9-96:20: `.Unix(0, 3)`
$DIR/cmd/erasure-healing-common_test.go:96:20-96:26: `.UTC()`
$DIR/cmd/erasure-healing-common_test.go:97:9-97:20: `.Unix(0, 1)`
$DIR/cmd/erasure-healing-common_test.go:97:20-97:26: `.UTC()`
$DIR/cmd/erasure-healing-common_test.go:99:8-99:19: `.Unix(0, 3)`
$DIR/cmd/erasure-healing-common_test.go:99:19-99:25: `.UTC()`
$DIR/cmd/erasure-healing-common_test.go:104:9-104:20: `.Unix(0, 3)`
$DIR/cmd/erasure-healing-common_test.go:104:20-104:26: `.UTC()`
$DIR/cmd/erasure-healing-common_test.go:105:9-105:20: `.Unix(0, 3)`
$DIR/cmd/erasure-healing-common_test.go:105:20-105:26: `.UTC()`
$DIR/cmd/erasure-healing-common_test.go:106:9-106:20: `.Unix(0, 3)`
$DIR/cmd/erasure-healing-common_test.go:106:20-106:26: `.UTC()`
$DIR/cmd/erasure-healing-common_test.go:107:9-107:20: `.Unix(0, 3)`
$DIR/cmd/erasure-healing-common_test.go:107:20-107:26: `.UTC()`
$DIR/cmd/erasure-healing-common_test.go:108:9-108:20: `.Unix(0, 3)`
$DIR/cmd/erasure-healing-common_test.go:108:20-108:26: `.UTC()`
$DIR/cmd/erasure-healing-common_test.go:109:9-109:20: `.Unix(0, 3)`
$DIR/cmd/erasure-healing-common_test.go:109:20-109:26: `.UTC()`
$DIR/cmd/erasure-healing-common_test.go:110:9-110:20: `.Unix(0, 3)`
$DIR/cmd/erasure-healing-common_test.go:110:20-110:26: `.UTC()`
$DIR/cmd/erasure-healing-common_test.go:112:8-112:19: `.Unix(0, 3)`
$DIR/cmd/erasure-healing-common_test.go:112:19-112:25: `.UTC()`
$DIR/cmd/erasure-healing-common_test.go:118:9-118:20: `.Unix(0, 3)`
$DIR/cmd/erasure-healing-common_test.go:118:20-118:26: `.UTC()`
$DIR/cmd/erasure-healing-common_test.go:119:9-119:20: `.Unix(0, 3)`
$DIR/cmd/erasure-healing-common_test.go:119:20-119:26: `.UTC()`
$DIR/cmd/erasure-healing-common_test.go:120:9-120:20: `.Unix(0, 2)`
$DIR/cmd/erasure-healing-common_test.go:120:20-120:26: `.UTC()`
$DIR/cmd/erasure-healing-common_test.go:121:9-121:20: `.Unix(0, 1)`
$DIR/cmd/erasure-healing-common_test.go:121:20-121:26: `.UTC()`
$DIR/cmd/erasure-healing-common_test.go:122:9-122:20: `.Unix(0, 3)`
$DIR/cmd/erasure-healing-common_test.go:122:20-122:26: `.UTC()`
$DIR/cmd/erasure-healing-common_test.go:123:9-123:20: `.Unix(0, 4)`
$DIR/cmd/erasure-healing-common_test.go:123:20-123:26: `.UTC()`
$DIR/cmd/erasure-healing-common_test.go:124:9-124:20: `.Unix(0, 3)`
$DIR/cmd/erasure-healing-common_test.go:124:20-124:26: `.UTC()`
$DIR/cmd/erasure-healing-common_test.go:129:8-129:19: `.Unix(0, 3)`
$DIR/cmd/erasure-healing-common_test.go:129:19-129:25: `.UTC()`
$DIR/cmd/erasure-healing-common_test.go:138:15-138:33: `.time.Equal(ctime)`
$DIR/cmd/erasure-healing-common_test.go:147:24-147:57: `.WithCancel(context.Background())`
$DIR/cmd/erasure-healing-common_test.go:147:43-147:56: `.Background()`
$DIR/cmd/erasure-healing-common_test.go:154:11-154:42: `.Shutdown(context.Background())`
$DIR/cmd/erasure-healing-common_test.go:154:28-154:41: `.Background()`
$DIR/cmd/erasure-healing-common_test.go:157:2-157:21: `type tamperKind int`
$DIR/cmd/erasure-healing-common_test.go:158:2-162:3: `const (
		noTamper    tamperKind = iota
		deletePart  tamperKind = iota
		corruptPart tamperKind = iota
	)`
$DIR/cmd/erasure-healing-common_test.go:163:23-163:34: `.Unix(0, 3)`
$DIR/cmd/erasure-healing-common_test.go:163:34-163:40: `.UTC()`
$DIR/cmd/erasure-healing-common_test.go:164:22-164:33: `.Unix(0, 4)`
$DIR/cmd/erasure-healing-common_test.go:164:33-164:39: `.UTC()`
$DIR/cmd/erasure-healing-common_test.go:226:2-226:58: `err = obj.MakeBucket(ctx, "bucket", MakeBucketOptions{})`
$DIR/cmd/erasure-healing-common_test.go:226:11-226:58: `.MakeBucket(ctx, "bucket", MakeBucketOptions{})`
$DIR/cmd/erasure-healing-common_test.go:232:15-232:58: `.Repeat([]byte("a"), smallFileThreshold*16)`
$DIR/cmd/erasure-healing-common_test.go:234:42-234:53: `.getDisks()`
$DIR/cmd/erasure-healing-common_test.go:237:3-314:5: `t.Run(fmt.Sprintf("case-%d", i), func(t *testing.T) {
			_, err = obj.PutObject(ctx, bucket, object, mustGetPutObjReader(t, bytes.NewReader(data), int64(len(data)), "", ""), ObjectOptions{})
			if err != nil {
				t.Fatalf("Failed to putObject %v", err)
			}

			partsMetadata, errs := readAllFileInfo(ctx, erasureDisks, bucket, object, "", false)
			fi, err := getLatestFileInfo(ctx, partsMetadata, z.serverPools[0].sets[0].defaultParityCount, errs)
			if err != nil {
				t.Fatalf("Failed to getLatestFileInfo %v", err)
			}

			for j := range partsMetadata {
				if errs[j] != nil {
					t.Fatalf("expected error to be nil: %s", errs[j])
				}
				partsMetadata[j].ModTime = test.modTimes[j]
			}

			tamperedIndex := -1
			switch test._tamperBackend {
			case deletePart:
				for index, err := range test.errs {
					if err != nil {
						continue
					}
					// Remove a part from a disk
					// which has a valid xl.meta,
					// and check if that disk
					// appears in outDatedDisks.
					tamperedIndex = index
					dErr := erasureDisks[index].Delete(context.Background(), bucket, pathJoin(object, fi.DataDir, "part.1"), DeleteOptions{
						Recursive: false,
						Force:     false,
					})
					if dErr != nil {
						t.Fatalf("Failed to delete %s - %v", filepath.Join(object, "part.1"), dErr)
					}
					break
				}
			case corruptPart:
				for index, err := range test.errs {
					if err != nil {
						continue
					}
					// Corrupt a part from a disk
					// which has a valid xl.meta,
					// and check if that disk
					// appears in outDatedDisks.
					tamperedIndex = index
					filePath := pathJoin(erasureDisks[index].String(), bucket, object, fi.DataDir, "part.1")
					f, err := os.OpenFile(filePath, os.O_WRONLY|os.O_SYNC, 0)
					if err != nil {
						t.Fatalf("Failed to open %s: %s\n", filePath, err)
					}
					f.WriteString("oops") // Will cause bitrot error
					f.Close()
					break
				}

			}

			onlineDisks, modTime := listOnlineDisks(erasureDisks, partsMetadata, test.errs)
			if !modTime.Equal(test.expectedTime) {
				t.Fatalf("Expected modTime to be equal to %v but was found to be %v",
					test.expectedTime, modTime)
			}
			availableDisks, newErrs, _ := disksWithAllParts(ctx, onlineDisks, partsMetadata,
				test.errs, fi, bucket, object, madmin.HealDeepScan)
			test.errs = newErrs

			if test._tamperBackend != noTamper {
				if tamperedIndex != -1 && availableDisks[tamperedIndex] != nil {
					t.Fatalf("Drive (%v) with part.1 missing is not a drive with available data",
						erasureDisks[tamperedIndex])
				}
			}
		})`
$DIR/cmd/erasure-healing-common_test.go:237:4-314:5: `.Run(fmt.Sprintf("case-%d", i), func(t *testing.T) {
			_, err = obj.PutObject(ctx, bucket, object, mustGetPutObjReader(t, bytes.NewReader(data), int64(len(data)), "", ""), ObjectOptions{})
			if err != nil {
				t.Fatalf("Failed to putObject %v", err)
			}

			partsMetadata, errs := readAllFileInfo(ctx, erasureDisks, bucket, object, "", false)
			fi, err := getLatestFileInfo(ctx, partsMetadata, z.serverPools[0].sets[0].defaultParityCount, errs)
			if err != nil {
				t.Fatalf("Failed to getLatestFileInfo %v", err)
			}

			for j := range partsMetadata {
				if errs[j] != nil {
					t.Fatalf("expected error to be nil: %s", errs[j])
				}
				partsMetadata[j].ModTime = test.modTimes[j]
			}

			tamperedIndex := -1
			switch test._tamperBackend {
			case deletePart:
				for index, err := range test.errs {
					if err != nil {
						continue
					}
					// Remove a part from a disk
					// which has a valid xl.meta,
					// and check if that disk
					// appears in outDatedDisks.
					tamperedIndex = index
					dErr := erasureDisks[index].Delete(context.Background(), bucket, pathJoin(object, fi.DataDir, "part.1"), DeleteOptions{
						Recursive: false,
						Force:     false,
					})
					if dErr != nil {
						t.Fatalf("Failed to delete %s - %v", filepath.Join(object, "part.1"), dErr)
					}
					break
				}
			case corruptPart:
				for index, err := range test.errs {
					if err != nil {
						continue
					}
					// Corrupt a part from a disk
					// which has a valid xl.meta,
					// and check if that disk
					// appears in outDatedDisks.
					tamperedIndex = index
					filePath := pathJoin(erasureDisks[index].String(), bucket, object, fi.DataDir, "part.1")
					f, err := os.OpenFile(filePath, os.O_WRONLY|os.O_SYNC, 0)
					if err != nil {
						t.Fatalf("Failed to open %s: %s\n", filePath, err)
					}
					f.WriteString("oops") // Will cause bitrot error
					f.Close()
					break
				}

			}

			onlineDisks, modTime := listOnlineDisks(erasureDisks, partsMetadata, test.errs)
			if !modTime.Equal(test.expectedTime) {
				t.Fatalf("Expected modTime to be equal to %v but was found to be %v",
					test.expectedTime, modTime)
			}
			availableDisks, newErrs, _ := disksWithAllParts(ctx, onlineDisks, partsMetadata,
				test.errs, fi, bucket, object, madmin.HealDeepScan)
			test.errs = newErrs

			if test._tamperBackend != noTamper {
				if tamperedIndex != -1 && availableDisks[tamperedIndex] != nil {
					t.Fatalf("Drive (%v) with part.1 missing is not a drive with available data",
						erasureDisks[tamperedIndex])
				}
			}
		})`
$DIR/cmd/erasure-healing-common_test.go:237:12-237:34: `.Sprintf("case-%d", i)`
$DIR/cmd/erasure-healing-common_test.go:238:4-238:137: `_, err = obj.PutObject(ctx, bucket, object, mustGetPutObjReader(t, bytes.NewReader(data), int64(len(data)), "", ""), ObjectOptions{})`
$DIR/cmd/erasure-healing-common_test.go:238:16-238:137: `.PutObject(ctx, bucket, object, mustGetPutObjReader(t, bytes.NewReader(data), int64(len(data)), "", ""), ObjectOptions{})`
$DIR/cmd/erasure-healing-common_test.go:238:76-238:92: `.NewReader(data)`
$DIR/cmd/erasure-healing-common_test.go:253:5-253:48: `partsMetadata[j].ModTime = test.modTimes[j]`
$DIR/cmd/erasure-healing-common_test.go:267:6-267:27: `tamperedIndex = index`
$DIR/cmd/erasure-healing-common_test.go:268:33-271:8: `.Delete(context.Background(), bucket, pathJoin(object, fi.DataDir, "part.1"), DeleteOptions{
						Recursive: false,
						Force:     false,
					})`
$DIR/cmd/erasure-healing-common_test.go:268:48-268:61: `.Background()`
$DIR/cmd/erasure-healing-common_test.go:286:6-286:27: `tamperedIndex = index`
$DIR/cmd/erasure-healing-common_test.go:287:46-287:55: `.String()`
$DIR/cmd/erasure-healing-common_test.go:288:18-288:63: `.OpenFile(filePath, os.O_WRONLY|os.O_SYNC, 0)`
$DIR/cmd/erasure-healing-common_test.go:292:6-292:27: `f.WriteString("oops")`
$DIR/cmd/erasure-healing-common_test.go:292:7-292:27: `.WriteString("oops")`
$DIR/cmd/erasure-healing-common_test.go:300:15-300:40: `.Equal(test.expectedTime)`
$DIR/cmd/erasure-healing-common_test.go:306:4-306:23: `test.errs = newErrs`
$DIR/cmd/erasure-healing-common_test.go:321:24-321:57: `.WithCancel(context.Background())`
$DIR/cmd/erasure-healing-common_test.go:321:43-321:56: `.Background()`
$DIR/cmd/erasure-healing-common_test.go:328:11-328:42: `.Shutdown(context.Background())`
$DIR/cmd/erasure-healing-common_test.go:328:28-328:41: `.Background()`
$DIR/cmd/erasure-healing-common_test.go:331:2-331:21: `type tamperKind int`
$DIR/cmd/erasure-healing-common_test.go:332:2-336:3: `const (
		noTamper    tamperKind = iota
		deletePart  tamperKind = iota
		corruptPart tamperKind = iota
	)`
$DIR/cmd/erasure-healing-common_test.go:337:22-337:33: `.Unix(1, 0)`
$DIR/cmd/erasure-healing-common_test.go:337:33-337:39: `.UTC()`
$DIR/cmd/erasure-healing-common_test.go:338:23-338:34: `.Unix(3, 0)`
$DIR/cmd/erasure-healing-common_test.go:338:34-338:40: `.UTC()`
$DIR/cmd/erasure-healing-common_test.go:339:22-339:33: `.Unix(4, 0)`
$DIR/cmd/erasure-healing-common_test.go:339:33-339:39: `.UTC()`
$DIR/cmd/erasure-healing-common_test.go:401:2-401:58: `err = obj.MakeBucket(ctx, "bucket", MakeBucketOptions{})`
$DIR/cmd/erasure-healing-common_test.go:401:11-401:58: `.MakeBucket(ctx, "bucket", MakeBucketOptions{})`
$DIR/cmd/erasure-healing-common_test.go:407:15-407:57: `.Repeat([]byte("a"), smallFileThreshold/2)`
$DIR/cmd/erasure-healing-common_test.go:409:42-409:53: `.getDisks()`
$DIR/cmd/erasure-healing-common_test.go:412:3-500:5: `t.Run(fmt.Sprintf("case-%d", i), func(t *testing.T) {
			_, err := obj.PutObject(ctx, bucket, object,
				mustGetPutObjReader(t, bytes.NewReader(data), int64(len(data)), "", ""), ObjectOptions{})
			if err != nil {
				t.Fatalf("Failed to putObject %v", err)
			}

			partsMetadata, errs := readAllFileInfo(ctx, erasureDisks, bucket, object, "", true)
			_, err = getLatestFileInfo(ctx, partsMetadata, z.serverPools[0].sets[0].defaultParityCount, errs)
			if err != nil {
				t.Fatalf("Failed to getLatestFileInfo %v", err)
			}

			for j := range partsMetadata {
				if errs[j] != nil {
					t.Fatalf("expected error to be nil: %s", errs[j])
				}
				partsMetadata[j].ModTime = test.modTimes[j]
			}

			if erasureDisks, err = writeUniqueFileInfo(ctx, erasureDisks, bucket, object, partsMetadata, diskCount(erasureDisks)); err != nil {
				t.Fatal(ctx, err)
			}

			tamperedIndex := -1
			switch test._tamperBackend {
			case deletePart:
				for index, err := range test.errs {
					if err != nil {
						continue
					}
					// Remove a part from a disk
					// which has a valid xl.meta,
					// and check if that disk
					// appears in outDatedDisks.
					tamperedIndex = index
					dErr := erasureDisks[index].Delete(context.Background(), bucket, pathJoin(object, xlStorageFormatFile), DeleteOptions{
						Recursive: false,
						Force:     false,
					})
					if dErr != nil {
						t.Fatalf("Failed to delete %s - %v", pathJoin(object, xlStorageFormatFile), dErr)
					}
					break
				}
			case corruptPart:
				for index, err := range test.errs {
					if err != nil {
						continue
					}
					// Corrupt a part from a disk
					// which has a valid xl.meta,
					// and check if that disk
					// appears in outDatedDisks.
					tamperedIndex = index
					filePath := pathJoin(erasureDisks[index].String(), bucket, object, xlStorageFormatFile)
					f, err := os.OpenFile(filePath, os.O_WRONLY|os.O_SYNC, 0)
					if err != nil {
						t.Fatalf("Failed to open %s: %s\n", filePath, err)
					}
					f.WriteString("oops") // Will cause bitrot error
					f.Close()
					break
				}

			}
			partsMetadata, errs = readAllFileInfo(ctx, erasureDisks, bucket, object, "", true)
			fi, err := getLatestFileInfo(ctx, partsMetadata, z.serverPools[0].sets[0].defaultParityCount, errs)
			if !errors.Is(err, errErasureReadQuorum) {
				t.Fatalf("Failed to getLatestFileInfo, expected %v, got %v", errErasureReadQuorum, err)
			}

			onlineDisks, modTime := listOnlineDisks(erasureDisks, partsMetadata, test.errs)
			if !modTime.Equal(test.expectedTime) {
				t.Fatalf("Expected modTime to be equal to %v but was found to be %v",
					test.expectedTime, modTime)
			}

			availableDisks, newErrs, _ := disksWithAllParts(ctx, onlineDisks, partsMetadata,
				test.errs, fi, bucket, object, madmin.HealDeepScan)
			test.errs = newErrs

			if test._tamperBackend != noTamper {
				if tamperedIndex != -1 && availableDisks[tamperedIndex] != nil {
					t.Fatalf("Drive (%v) with part.1 missing is not a drive with available data",
						erasureDisks[tamperedIndex])
				}
			}
		})`
$DIR/cmd/erasure-healing-common_test.go:412:4-500:5: `.Run(fmt.Sprintf("case-%d", i), func(t *testing.T) {
			_, err := obj.PutObject(ctx, bucket, object,
				mustGetPutObjReader(t, bytes.NewReader(data), int64(len(data)), "", ""), ObjectOptions{})
			if err != nil {
				t.Fatalf("Failed to putObject %v", err)
			}

			partsMetadata, errs := readAllFileInfo(ctx, erasureDisks, bucket, object, "", true)
			_, err = getLatestFileInfo(ctx, partsMetadata, z.serverPools[0].sets[0].defaultParityCount, errs)
			if err != nil {
				t.Fatalf("Failed to getLatestFileInfo %v", err)
			}

			for j := range partsMetadata {
				if errs[j] != nil {
					t.Fatalf("expected error to be nil: %s", errs[j])
				}
				partsMetadata[j].ModTime = test.modTimes[j]
			}

			if erasureDisks, err = writeUniqueFileInfo(ctx, erasureDisks, bucket, object, partsMetadata, diskCount(erasureDisks)); err != nil {
				t.Fatal(ctx, err)
			}

			tamperedIndex := -1
			switch test._tamperBackend {
			case deletePart:
				for index, err := range test.errs {
					if err != nil {
						continue
					}
					// Remove a part from a disk
					// which has a valid xl.meta,
					// and check if that disk
					// appears in outDatedDisks.
					tamperedIndex = index
					dErr := erasureDisks[index].Delete(context.Background(), bucket, pathJoin(object, xlStorageFormatFile), DeleteOptions{
						Recursive: false,
						Force:     false,
					})
					if dErr != nil {
						t.Fatalf("Failed to delete %s - %v", pathJoin(object, xlStorageFormatFile), dErr)
					}
					break
				}
			case corruptPart:
				for index, err := range test.errs {
					if err != nil {
						continue
					}
					// Corrupt a part from a disk
					// which has a valid xl.meta,
					// and check if that disk
					// appears in outDatedDisks.
					tamperedIndex = index
					filePath := pathJoin(erasureDisks[index].String(), bucket, object, xlStorageFormatFile)
					f, err := os.OpenFile(filePath, os.O_WRONLY|os.O_SYNC, 0)
					if err != nil {
						t.Fatalf("Failed to open %s: %s\n", filePath, err)
					}
					f.WriteString("oops") // Will cause bitrot error
					f.Close()
					break
				}

			}
			partsMetadata, errs = readAllFileInfo(ctx, erasureDisks, bucket, object, "", true)
			fi, err := getLatestFileInfo(ctx, partsMetadata, z.serverPools[0].sets[0].defaultParityCount, errs)
			if !errors.Is(err, errErasureReadQuorum) {
				t.Fatalf("Failed to getLatestFileInfo, expected %v, got %v", errErasureReadQuorum, err)
			}

			onlineDisks, modTime := listOnlineDisks(erasureDisks, partsMetadata, test.errs)
			if !modTime.Equal(test.expectedTime) {
				t.Fatalf("Expected modTime to be equal to %v but was found to be %v",
					test.expectedTime, modTime)
			}

			availableDisks, newErrs, _ := disksWithAllParts(ctx, onlineDisks, partsMetadata,
				test.errs, fi, bucket, object, madmin.HealDeepScan)
			test.errs = newErrs

			if test._tamperBackend != noTamper {
				if tamperedIndex != -1 && availableDisks[tamperedIndex] != nil {
					t.Fatalf("Drive (%v) with part.1 missing is not a drive with available data",
						erasureDisks[tamperedIndex])
				}
			}
		})`
$DIR/cmd/erasure-healing-common_test.go:412:12-412:34: `.Sprintf("case-%d", i)`
$DIR/cmd/erasure-healing-common_test.go:413:17-414:94: `.PutObject(ctx, bucket, object,
				mustGetPutObjReader(t, bytes.NewReader(data), int64(len(data)), "", ""), ObjectOptions{})`
$DIR/cmd/erasure-healing-common_test.go:414:33-414:49: `.NewReader(data)`
$DIR/cmd/erasure-healing-common_test.go:420:4-420:101: `_, err = getLatestFileInfo(ctx, partsMetadata, z.serverPools[0].sets[0].defaultParityCount, errs)`
$DIR/cmd/erasure-healing-common_test.go:429:5-429:48: `partsMetadata[j].ModTime = test.modTimes[j]`
$DIR/cmd/erasure-healing-common_test.go:447:6-447:27: `tamperedIndex = index`
$DIR/cmd/erasure-healing-common_test.go:448:33-451:8: `.Delete(context.Background(), bucket, pathJoin(object, xlStorageFormatFile), DeleteOptions{
						Recursive: false,
						Force:     false,
					})`
$DIR/cmd/erasure-healing-common_test.go:448:48-448:61: `.Background()`
$DIR/cmd/erasure-healing-common_test.go:466:6-466:27: `tamperedIndex = index`
$DIR/cmd/erasure-healing-common_test.go:467:46-467:55: `.String()`
$DIR/cmd/erasure-healing-common_test.go:468:18-468:63: `.OpenFile(filePath, os.O_WRONLY|os.O_SYNC, 0)`
$DIR/cmd/erasure-healing-common_test.go:472:6-472:27: `f.WriteString("oops")`
$DIR/cmd/erasure-healing-common_test.go:472:7-472:27: `.WriteString("oops")`
$DIR/cmd/erasure-healing-common_test.go:478:4-478:86: `partsMetadata, errs = readAllFileInfo(ctx, erasureDisks, bucket, object, "", true)`
$DIR/cmd/erasure-healing-common_test.go:480:14-480:44: `.Is(err, errErasureReadQuorum)`
$DIR/cmd/erasure-healing-common_test.go:485:15-485:40: `.Equal(test.expectedTime)`
$DIR/cmd/erasure-healing-common_test.go:492:4-492:23: `test.errs = newErrs`
$DIR/cmd/erasure-healing-common_test.go:505:24-505:57: `.WithCancel(context.Background())`
$DIR/cmd/erasure-healing-common_test.go:505:43-505:56: `.Background()`
$DIR/cmd/erasure-healing-common_test.go:511:11-511:42: `.Shutdown(context.Background())`
$DIR/cmd/erasure-healing-common_test.go:511:28-511:41: `.Background()`
$DIR/cmd/erasure-healing-common_test.go:518:15-518:58: `.Repeat([]byte("a"), 6*1024*1024*partCount)`
$DIR/cmd/erasure-healing-common_test.go:521:19-521:30: `.getDisks()`
$DIR/cmd/erasure-healing-common_test.go:522:2-522:58: `err = obj.MakeBucket(ctx, "bucket", MakeBucketOptions{})`
$DIR/cmd/erasure-healing-common_test.go:522:11-522:58: `.MakeBucket(ctx, "bucket", MakeBucketOptions{})`
$DIR/cmd/erasure-healing-common_test.go:527:2-527:135: `_, err = obj.PutObject(ctx, bucket, object, mustGetPutObjReader(t, bytes.NewReader(data), int64(len(data)), "", ""), ObjectOptions{})`
$DIR/cmd/erasure-healing-common_test.go:527:14-527:135: `.PutObject(ctx, bucket, object, mustGetPutObjReader(t, bytes.NewReader(data), int64(len(data)), "", ""), ObjectOptions{})`
$DIR/cmd/erasure-healing-common_test.go:527:74-527:90: `.NewReader(data)`
$DIR/cmd/erasure-healing-common_test.go:550:2-550:70: `erasureDisks, _ = listOnlineDisks(erasureDisks, partsMetadata, errs)`
$DIR/cmd/erasure-healing-common_test.go:571:2-571:73: `partsMetadata[0].ModTime = partsMetadata[0].ModTime.Add(-1 * time.Hour)`
$DIR/cmd/erasure-healing-common_test.go:571:45-571:73: `.ModTime.Add(-1 * time.Hour)`
$DIR/cmd/erasure-healing-common_test.go:573:2-573:41: `errs = make([]error, len(erasureDisks))`
$DIR/cmd/erasure-healing-common_test.go:574:2-575:49: `filteredDisks, _, _ = disksWithAllParts(ctx, erasureDisks, partsMetadata,
		errs, fi, bucket, object, madmin.HealDeepScan)`
$DIR/cmd/erasure-healing-common_test.go:588:2-588:40: `partsMetadata[0] = partsMetadataBackup`
$DIR/cmd/erasure-healing-common_test.go:591:2-591:40: `partsMetadataBackup = partsMetadata[1]`
$DIR/cmd/erasure-healing-common_test.go:592:2-592:41: `partsMetadata[1].DataDir = "foo-random"`
$DIR/cmd/erasure-healing-common_test.go:594:2-594:41: `errs = make([]error, len(erasureDisks))`
$DIR/cmd/erasure-healing-common_test.go:595:2-596:49: `filteredDisks, _, _ = disksWithAllParts(ctx, erasureDisks, partsMetadata,
		errs, fi, bucket, object, madmin.HealDeepScan)`
$DIR/cmd/erasure-healing-common_test.go:609:2-609:40: `partsMetadata[1] = partsMetadataBackup`
$DIR/cmd/erasure-healing-common_test.go:613:2-613:28: `diskFailures[0] = "part.1"`
$DIR/cmd/erasure-healing-common_test.go:614:2-614:28: `diskFailures[3] = "part.1"`
$DIR/cmd/erasure-healing-common_test.go:615:2-615:29: `diskFailures[15] = "part.1"`
$DIR/cmd/erasure-healing-common_test.go:619:10-619:34: `.Sprintf("part.%d", i+1)`
$DIR/cmd/erasure-healing-common_test.go:620:49-620:58: `.String()`
$DIR/cmd/erasure-healing-common_test.go:621:17-621:62: `.OpenFile(filePath, os.O_WRONLY|os.O_SYNC, 0)`
$DIR/cmd/erasure-healing-common_test.go:625:5-625:26: `f.WriteString("oops")`
$DIR/cmd/erasure-healing-common_test.go:625:6-625:26: `.WriteString("oops")`
$DIR/cmd/erasure-healing-common_test.go:631:2-631:41: `errs = make([]error, len(erasureDisks))`
$DIR/cmd/erasure-healing-common_test.go:632:2-633:49: `filteredDisks, errs, _ = disksWithAllParts(ctx, erasureDisks, partsMetadata,
		errs, fi, bucket, object, madmin.HealDeepScan)`
$DIR/cmd/erasure-healing_test.go:41:2-41:22: `fi.Erasure.Index = 1`
$DIR/cmd/erasure-healing_test.go:212:3-220:5: `t.Run(testCase.name, func(t *testing.T) {
			gotMeta, dangling := isObjectDangling(testCase.metaArr, testCase.errs, testCase.dataErrs)
			if !gotMeta.Equals(testCase.expectedMeta) {
				t.Errorf("Expected %#v, got %#v", testCase.expectedMeta, gotMeta)
			}
			if dangling != testCase.expectedDangling {
				t.Errorf("Expected dangling %t, got %t", testCase.expectedDangling, dangling)
			}
		})`
$DIR/cmd/erasure-healing_test.go:212:4-220:5: `.Run(testCase.name, func(t *testing.T) {
			gotMeta, dangling := isObjectDangling(testCase.metaArr, testCase.errs, testCase.dataErrs)
			if !gotMeta.Equals(testCase.expectedMeta) {
				t.Errorf("Expected %#v, got %#v", testCase.expectedMeta, gotMeta)
			}
			if dangling != testCase.expectedDangling {
				t.Errorf("Expected dangling %t, got %t", testCase.expectedDangling, dangling)
			}
		})`
$DIR/cmd/erasure-healing_test.go:214:15-214:45: `.Equals(testCase.expectedMeta)`
$DIR/cmd/erasure-healing_test.go:226:24-226:57: `.WithCancel(context.Background())`
$DIR/cmd/erasure-healing_test.go:226:43-226:56: `.Background()`
$DIR/cmd/erasure-healing_test.go:233:11-233:42: `.Shutdown(context.Background())`
$DIR/cmd/erasure-healing_test.go:233:28-233:41: `.Background()`
$DIR/cmd/erasure-healing_test.go:247:2-247:58: `err = obj.MakeBucket(ctx, "bucket", MakeBucketOptions{})`
$DIR/cmd/erasure-healing_test.go:247:11-247:58: `.MakeBucket(ctx, "bucket", MakeBucketOptions{})`
$DIR/cmd/erasure-healing_test.go:257:2-257:26: `_, err = rand.Read(data)`
$DIR/cmd/erasure-healing_test.go:257:15-257:26: `.Read(data)`
$DIR/cmd/erasure-healing_test.go:262:2-262:125: `_, err = obj.PutObject(ctx, bucket, object, mustGetPutObjReader(t, bytes.NewReader(data), length, "", ""), ObjectOptions{})`
$DIR/cmd/erasure-healing_test.go:262:14-262:125: `.PutObject(ctx, bucket, object, mustGetPutObjReader(t, bytes.NewReader(data), length, "", ""), ObjectOptions{})`
$DIR/cmd/erasure-healing_test.go:262:74-262:90: `.NewReader(data)`
$DIR/cmd/erasure-healing_test.go:267:12-267:23: `.getDisks()`
$DIR/cmd/erasure-healing_test.go:268:30-268:91: `.ReadVersion(context.Background(), bucket, object, "", false)`
$DIR/cmd/erasure-healing_test.go:268:50-268:63: `.Background()`
$DIR/cmd/erasure-healing_test.go:275:2-275:58: `err = removeAll(pathJoin(disk.String(), bucket, object))`
$DIR/cmd/erasure-healing_test.go:275:31-275:40: `.String()`
$DIR/cmd/erasure-healing_test.go:281:2-281:115: `err = er.checkAbandonedParts(ctx, bucket, object, madmin.HealOpts{ScanMode: madmin.HealNormalScan, Remove: true})`
$DIR/cmd/erasure-healing_test.go:281:10-281:115: `.checkAbandonedParts(ctx, bucket, object, madmin.HealOpts{ScanMode: madmin.HealNormalScan, Remove: true})`
$DIR/cmd/erasure-healing_test.go:286:2-286:99: `_, err = er.HealObject(ctx, bucket, object, "", madmin.HealOpts{ScanMode: madmin.HealNormalScan})`
$DIR/cmd/erasure-healing_test.go:286:13-286:99: `.HealObject(ctx, bucket, object, "", madmin.HealOpts{ScanMode: madmin.HealNormalScan})`
$DIR/cmd/erasure-healing_test.go:291:31-291:92: `.ReadVersion(context.Background(), bucket, object, "", false)`
$DIR/cmd/erasure-healing_test.go:291:51-291:64: `.Background()`
$DIR/cmd/erasure-healing_test.go:297:21-297:46: `.Equals(fileInfoPostHeal)`
$DIR/cmd/erasure-healing_test.go:301:2-301:69: `err = os.RemoveAll(path.Join(fsDirs[0], bucket, object, "xl.meta"))`
$DIR/cmd/erasure-healing_test.go:301:10-301:69: `.RemoveAll(path.Join(fsDirs[0], bucket, object, "xl.meta"))`
$DIR/cmd/erasure-healing_test.go:301:25-301:68: `.Join(fsDirs[0], bucket, object, "xl.meta")`
$DIR/cmd/erasure-healing_test.go:309:2-309:39: `fileInfoOutDated.ModTime = time.Now()`
$DIR/cmd/erasure-healing_test.go:309:33-309:39: `.Now()`
$DIR/cmd/erasure-healing_test.go:310:2-310:82: `err = disk.WriteMetadata(context.Background(), bucket, object, fileInfoOutDated)`
$DIR/cmd/erasure-healing_test.go:310:12-310:82: `.WriteMetadata(context.Background(), bucket, object, fileInfoOutDated)`
$DIR/cmd/erasure-healing_test.go:310:34-310:47: `.Background()`
$DIR/cmd/erasure-healing_test.go:315:2-315:97: `_, err = er.HealObject(ctx, bucket, object, "", madmin.HealOpts{ScanMode: madmin.HealDeepScan})`
$DIR/cmd/erasure-healing_test.go:315:13-315:97: `.HealObject(ctx, bucket, object, "", madmin.HealOpts{ScanMode: madmin.HealDeepScan})`
$DIR/cmd/erasure-healing_test.go:320:2-320:91: `fileInfoPostHeal, err = disk.ReadVersion(context.Background(), bucket, object, "", false)`
$DIR/cmd/erasure-healing_test.go:320:30-320:91: `.ReadVersion(context.Background(), bucket, object, "", false)`
$DIR/cmd/erasure-healing_test.go:320:50-320:63: `.Background()`
$DIR/cmd/erasure-healing_test.go:326:21-326:46: `.Equals(fileInfoPostHeal)`
$DIR/cmd/erasure-healing_test.go:330:18-330:30: `.NewRandom()`
$DIR/cmd/erasure-healing_test.go:332:14-332:57: `.Join(drive, bucket, object, uuid.String())`
$DIR/cmd/erasure-healing_test.go:332:47-332:56: `.String()`
$DIR/cmd/erasure-healing_test.go:333:3-333:38: `err = os.MkdirAll(dir, os.ModePerm)`
$DIR/cmd/erasure-healing_test.go:333:11-333:38: `.MkdirAll(dir, os.ModePerm)`
$DIR/cmd/erasure-healing_test.go:337:3-337:80: `err = os.WriteFile(pathJoin(dir, "part.1"), []byte("some data"), os.ModePerm)`
$DIR/cmd/erasure-healing_test.go:337:11-337:80: `.WriteFile(pathJoin(dir, "part.1"), []byte("some data"), os.ModePerm)`
$DIR/cmd/erasure-healing_test.go:344:2-344:115: `err = er.checkAbandonedParts(ctx, bucket, object, madmin.HealOpts{ScanMode: madmin.HealNormalScan, Remove: true})`
$DIR/cmd/erasure-healing_test.go:344:10-344:115: `.checkAbandonedParts(ctx, bucket, object, madmin.HealOpts{ScanMode: madmin.HealNormalScan, Remove: true})`
$DIR/cmd/erasure-healing_test.go:350:14-350:57: `.Join(drive, bucket, object, uuid.String())`
$DIR/cmd/erasure-healing_test.go:350:47-350:56: `.String()`
$DIR/cmd/erasure-healing_test.go:351:15-351:49: `.ReadFile(pathJoin(dir, "part.1"))`
$DIR/cmd/erasure-healing_test.go:359:2-359:50: `err = os.RemoveAll(path.Join(fsDirs[0], bucket))`
$DIR/cmd/erasure-healing_test.go:359:10-359:50: `.RemoveAll(path.Join(fsDirs[0], bucket))`
$DIR/cmd/erasure-healing_test.go:359:25-359:49: `.Join(fsDirs[0], bucket)`
$DIR/cmd/erasure-healing_test.go:364:2-367:4: `_, err = er.HealBucket(ctx, bucket, madmin.HealOpts{
		DryRun: false,
		Remove: false,
	})`
$DIR/cmd/erasure-healing_test.go:364:13-367:4: `.HealBucket(ctx, bucket, madmin.HealOpts{
		DryRun: false,
		Remove: false,
	})`
$DIR/cmd/erasure-healing_test.go:372:2-372:65: `_, err = er.getDisks()[0].StatVol(context.Background(), bucket)`
$DIR/cmd/erasure-healing_test.go:372:13-372:24: `.getDisks()`
$DIR/cmd/erasure-healing_test.go:372:27-372:65: `.StatVol(context.Background(), bucket)`
$DIR/cmd/erasure-healing_test.go:372:43-372:56: `.Background()`
$DIR/cmd/erasure-healing_test.go:380:24-380:57: `.WithCancel(context.Background())`
$DIR/cmd/erasure-healing_test.go:380:43-380:56: `.Background()`
$DIR/cmd/erasure-healing_test.go:387:11-387:42: `.Shutdown(context.Background())`
$DIR/cmd/erasure-healing_test.go:387:28-387:41: `.Background()`
$DIR/cmd/erasure-healing_test.go:401:2-401:81: `err = obj.MakeBucket(ctx, "bucket", MakeBucketOptions{VersioningEnabled: true})`
$DIR/cmd/erasure-healing_test.go:401:11-401:81: `.MakeBucket(ctx, "bucket", MakeBucketOptions{VersioningEnabled: true})`
$DIR/cmd/erasure-healing_test.go:411:2-411:26: `_, err = rand.Read(data)`
$DIR/cmd/erasure-healing_test.go:411:15-411:26: `.Read(data)`
$DIR/cmd/erasure-healing_test.go:416:17-416:128: `.PutObject(ctx, bucket, object, mustGetPutObjReader(t, bytes.NewReader(data), length, "", ""), ObjectOptions{})`
$DIR/cmd/erasure-healing_test.go:416:77-416:93: `.NewReader(data)`
$DIR/cmd/erasure-healing_test.go:421:2-421:24: `_, _ = rand.Read(data)`
$DIR/cmd/erasure-healing_test.go:421:13-421:24: `.Read(data)`
$DIR/cmd/erasure-healing_test.go:422:17-422:128: `.PutObject(ctx, bucket, object, mustGetPutObjReader(t, bytes.NewReader(data), length, "", ""), ObjectOptions{})`
$DIR/cmd/erasure-healing_test.go:422:77-422:93: `.NewReader(data)`
$DIR/cmd/erasure-healing_test.go:427:12-427:23: `.getDisks()`
$DIR/cmd/erasure-healing_test.go:428:31-428:103: `.ReadVersion(context.Background(), bucket, object, oi1.VersionID, false)`
$DIR/cmd/erasure-healing_test.go:428:51-428:64: `.Background()`
$DIR/cmd/erasure-healing_test.go:432:31-432:103: `.ReadVersion(context.Background(), bucket, object, oi2.VersionID, false)`
$DIR/cmd/erasure-healing_test.go:432:51-432:64: `.Background()`
$DIR/cmd/erasure-healing_test.go:439:2-439:58: `err = removeAll(pathJoin(disk.String(), bucket, object))`
$DIR/cmd/erasure-healing_test.go:439:31-439:40: `.String()`
$DIR/cmd/erasure-healing_test.go:445:2-445:115: `err = er.checkAbandonedParts(ctx, bucket, object, madmin.HealOpts{ScanMode: madmin.HealNormalScan, Remove: true})`
$DIR/cmd/erasure-healing_test.go:445:10-445:115: `.checkAbandonedParts(ctx, bucket, object, madmin.HealOpts{ScanMode: madmin.HealNormalScan, Remove: true})`
$DIR/cmd/erasure-healing_test.go:450:2-450:99: `_, err = er.HealObject(ctx, bucket, object, "", madmin.HealOpts{ScanMode: madmin.HealNormalScan})`
$DIR/cmd/erasure-healing_test.go:450:13-450:99: `.HealObject(ctx, bucket, object, "", madmin.HealOpts{ScanMode: madmin.HealNormalScan})`
$DIR/cmd/erasure-healing_test.go:455:32-455:104: `.ReadVersion(context.Background(), bucket, object, oi1.VersionID, false)`
$DIR/cmd/erasure-healing_test.go:455:52-455:65: `.Background()`
$DIR/cmd/erasure-healing_test.go:459:32-459:104: `.ReadVersion(context.Background(), bucket, object, oi2.VersionID, false)`
$DIR/cmd/erasure-healing_test.go:459:52-459:65: `.Background()`
$DIR/cmd/erasure-healing_test.go:465:22-465:48: `.Equals(fileInfoPostHeal1)`
$DIR/cmd/erasure-healing_test.go:468:22-468:48: `.Equals(fileInfoPostHeal2)`
$DIR/cmd/erasure-healing_test.go:472:2-472:69: `err = os.RemoveAll(path.Join(fsDirs[0], bucket, object, "xl.meta"))`
$DIR/cmd/erasure-healing_test.go:472:10-472:69: `.RemoveAll(path.Join(fsDirs[0], bucket, object, "xl.meta"))`
$DIR/cmd/erasure-healing_test.go:472:25-472:68: `.Join(fsDirs[0], bucket, object, "xl.meta")`
$DIR/cmd/erasure-healing_test.go:480:2-480:39: `fileInfoOutDated.ModTime = time.Now()`
$DIR/cmd/erasure-healing_test.go:480:33-480:39: `.Now()`
$DIR/cmd/erasure-healing_test.go:481:2-481:82: `err = disk.WriteMetadata(context.Background(), bucket, object, fileInfoOutDated)`
$DIR/cmd/erasure-healing_test.go:481:12-481:82: `.WriteMetadata(context.Background(), bucket, object, fileInfoOutDated)`
$DIR/cmd/erasure-healing_test.go:481:34-481:47: `.Background()`
$DIR/cmd/erasure-healing_test.go:486:2-486:97: `_, err = er.HealObject(ctx, bucket, object, "", madmin.HealOpts{ScanMode: madmin.HealDeepScan})`
$DIR/cmd/erasure-healing_test.go:486:13-486:97: `.HealObject(ctx, bucket, object, "", madmin.HealOpts{ScanMode: madmin.HealDeepScan})`
$DIR/cmd/erasure-healing_test.go:491:2-491:92: `fileInfoPostHeal1, err = disk.ReadVersion(context.Background(), bucket, object, "", false)`
$DIR/cmd/erasure-healing_test.go:491:31-491:92: `.ReadVersion(context.Background(), bucket, object, "", false)`
$DIR/cmd/erasure-healing_test.go:491:51-491:64: `.Background()`
$DIR/cmd/erasure-healing_test.go:497:22-497:48: `.Equals(fileInfoPostHeal1)`
$DIR/cmd/erasure-healing_test.go:501:2-501:92: `fileInfoPostHeal2, err = disk.ReadVersion(context.Background(), bucket, object, "", false)`
$DIR/cmd/erasure-healing_test.go:501:31-501:92: `.ReadVersion(context.Background(), bucket, object, "", false)`
$DIR/cmd/erasure-healing_test.go:501:51-501:64: `.Background()`
$DIR/cmd/erasure-healing_test.go:507:22-507:48: `.Equals(fileInfoPostHeal2)`
$DIR/cmd/erasure-healing_test.go:511:18-511:30: `.NewRandom()`
$DIR/cmd/erasure-healing_test.go:513:14-513:57: `.Join(drive, bucket, object, uuid.String())`
$DIR/cmd/erasure-healing_test.go:513:47-513:56: `.String()`
$DIR/cmd/erasure-healing_test.go:514:3-514:38: `err = os.MkdirAll(dir, os.ModePerm)`
$DIR/cmd/erasure-healing_test.go:514:11-514:38: `.MkdirAll(dir, os.ModePerm)`
$DIR/cmd/erasure-healing_test.go:518:3-518:80: `err = os.WriteFile(pathJoin(dir, "part.1"), []byte("some data"), os.ModePerm)`
$DIR/cmd/erasure-healing_test.go:518:11-518:80: `.WriteFile(pathJoin(dir, "part.1"), []byte("some data"), os.ModePerm)`
$DIR/cmd/erasure-healing_test.go:525:2-525:115: `err = er.checkAbandonedParts(ctx, bucket, object, madmin.HealOpts{ScanMode: madmin.HealNormalScan, Remove: true})`
$DIR/cmd/erasure-healing_test.go:525:10-525:115: `.checkAbandonedParts(ctx, bucket, object, madmin.HealOpts{ScanMode: madmin.HealNormalScan, Remove: true})`
$DIR/cmd/erasure-healing_test.go:531:14-531:57: `.Join(drive, bucket, object, uuid.String())`
$DIR/cmd/erasure-healing_test.go:531:47-531:56: `.String()`
$DIR/cmd/erasure-healing_test.go:532:15-532:49: `.ReadFile(pathJoin(dir, "part.1"))`
$DIR/cmd/erasure-healing_test.go:540:2-540:50: `err = os.RemoveAll(path.Join(fsDirs[0], bucket))`
$DIR/cmd/erasure-healing_test.go:540:10-540:50: `.RemoveAll(path.Join(fsDirs[0], bucket))`
$DIR/cmd/erasure-healing_test.go:540:25-540:49: `.Join(fsDirs[0], bucket)`
$DIR/cmd/erasure-healing_test.go:545:2-548:4: `_, err = er.HealBucket(ctx, bucket, madmin.HealOpts{
		DryRun: false,
		Remove: false,
	})`
$DIR/cmd/erasure-healing_test.go:545:13-548:4: `.HealBucket(ctx, bucket, madmin.HealOpts{
		DryRun: false,
		Remove: false,
	})`
$DIR/cmd/erasure-healing_test.go:553:2-553:65: `_, err = er.getDisks()[0].StatVol(context.Background(), bucket)`
$DIR/cmd/erasure-healing_test.go:553:13-553:24: `.getDisks()`
$DIR/cmd/erasure-healing_test.go:553:27-553:65: `.StatVol(context.Background(), bucket)`
$DIR/cmd/erasure-healing_test.go:553:43-553:56: `.Background()`
$DIR/cmd/erasure-healing_test.go:560:24-560:57: `.WithCancel(context.Background())`
$DIR/cmd/erasure-healing_test.go:560:43-560:56: `.Background()`
$DIR/cmd/erasure-healing_test.go:563:2-563:24: `resetGlobalHealState()`
$DIR/cmd/erasure-healing_test.go:582:15-582:45: `.Repeat([]byte("a"), 128*1024)`
$DIR/cmd/erasure-healing_test.go:584:2-584:61: `err = objLayer.MakeBucket(ctx, bucket, MakeBucketOptions{})`
$DIR/cmd/erasure-healing_test.go:584:16-584:61: `.MakeBucket(ctx, bucket, MakeBucketOptions{})`
$DIR/cmd/erasure-healing_test.go:589:2-589:71: `disks = objLayer.(*erasureServerPools).serverPools[0].erasureDisks[0]`
$DIR/cmd/erasure-healing_test.go:593:2-593:156: `globalBucketMetadataSys.Update(ctx, bucket, bucketVersioningConfig, []byte(`<VersioningConfiguration><Status>Enabled</Status></VersioningConfiguration>`))`
$DIR/cmd/erasure-healing_test.go:593:25-593:156: `.Update(ctx, bucket, bucketVersioningConfig, []byte(`<VersioningConfiguration><Status>Enabled</Status></VersioningConfiguration>`))`
$DIR/cmd/erasure-healing_test.go:595:2-597:4: `_, err = objLayer.PutObject(ctx, bucket, object, mustGetPutObjReader(t, bytes.NewReader(data), int64(len(data)), "", ""), ObjectOptions{
		Versioned: true,
	})`
$DIR/cmd/erasure-healing_test.go:595:19-597:4: `.PutObject(ctx, bucket, object, mustGetPutObjReader(t, bytes.NewReader(data), int64(len(data)), "", ""), ObjectOptions{
		Versioned: true,
	})`
$DIR/cmd/erasure-healing_test.go:595:79-595:95: `.NewReader(data)`
$DIR/cmd/erasure-healing_test.go:603:3-603:70: `objLayer.(*erasureServerPools).serverPools[0].erasureDisksMu.Lock()`
$DIR/cmd/erasure-healing_test.go:603:48-603:70: `.erasureDisksMu.Lock()`
$DIR/cmd/erasure-healing_test.go:604:3-604:24: `copy(disks, newDisks)`
$DIR/cmd/erasure-healing_test.go:605:3-605:72: `objLayer.(*erasureServerPools).serverPools[0].erasureDisksMu.Unlock()`
$DIR/cmd/erasure-healing_test.go:605:48-605:72: `.erasureDisksMu.Unlock()`
$DIR/cmd/erasure-healing_test.go:608:3-608:70: `objLayer.(*erasureServerPools).serverPools[0].erasureDisksMu.Lock()`
$DIR/cmd/erasure-healing_test.go:608:48-608:70: `.erasureDisksMu.Lock()`
$DIR/cmd/erasure-healing_test.go:610:3-610:72: `objLayer.(*erasureServerPools).serverPools[0].erasureDisksMu.Unlock()`
$DIR/cmd/erasure-healing_test.go:610:48-610:72: `.erasureDisksMu.Unlock()`
$DIR/cmd/erasure-healing_test.go:615:2-615:30: `setDisks(nil, nil, nil, nil)`
$DIR/cmd/erasure-healing_test.go:618:26-618:92: `.DeleteObject(ctx, bucket, object, ObjectOptions{Versioned: true})`
$DIR/cmd/erasure-healing_test.go:624:2-624:27: `setDisks(orgDisks[:4]...)`
$DIR/cmd/erasure-healing_test.go:626:34-626:95: `.ReadVersion(context.Background(), bucket, object, "", false)`
$DIR/cmd/erasure-healing_test.go:626:54-626:67: `.Background()`
$DIR/cmd/erasure-healing_test.go:635:19-639:5: `.HealObjects(ctx, bucket, "", madmin.HealOpts{Remove: true},
		func(bucket, object, vid string) error {
			_, err := objLayer.HealObject(ctx, bucket, object, vid, madmin.HealOpts{Remove: true})
			return err
		})`
$DIR/cmd/erasure-healing_test.go:637:22-637:90: `.HealObject(ctx, bucket, object, vid, madmin.HealOpts{Remove: true})`
$DIR/cmd/erasure-healing_test.go:643:35-643:96: `.ReadVersion(context.Background(), bucket, object, "", false)`
$DIR/cmd/erasure-healing_test.go:643:55-643:68: `.Background()`
$DIR/cmd/erasure-healing_test.go:653:23-656:5: `.DeleteObject(ctx, bucket, object, ObjectOptions{
			Versioned: true,
			VersionID: objInfo.VersionID,
		})`
$DIR/cmd/erasure-healing_test.go:661:2-661:30: `setDisks(nil, nil, nil, nil)`
$DIR/cmd/erasure-healing_test.go:663:36-663:52: `.NewReader(data)`
$DIR/cmd/erasure-healing_test.go:664:2-666:4: `_, err = objLayer.PutObject(ctx, bucket, object, rd, ObjectOptions{
		Versioned: true,
	})`
$DIR/cmd/erasure-healing_test.go:664:19-666:4: `.PutObject(ctx, bucket, object, rd, ObjectOptions{
		Versioned: true,
	})`
$DIR/cmd/erasure-healing_test.go:671:2-671:27: `setDisks(orgDisks[:4]...)`
$DIR/cmd/erasure-healing_test.go:673:2-673:90: `fileInfoPreHeal, err = disk.ReadVersion(context.Background(), bucket, object, "", false)`
$DIR/cmd/erasure-healing_test.go:673:29-673:90: `.ReadVersion(context.Background(), bucket, object, "", false)`
$DIR/cmd/erasure-healing_test.go:673:49-673:62: `.Background()`
$DIR/cmd/erasure-healing_test.go:682:19-686:5: `.HealObjects(ctx, bucket, "", madmin.HealOpts{Remove: true},
		func(bucket, object, vid string) error {
			_, err := objLayer.HealObject(ctx, bucket, object, vid, madmin.HealOpts{Remove: true})
			return err
		})`
$DIR/cmd/erasure-healing_test.go:684:22-684:90: `.HealObject(ctx, bucket, object, vid, madmin.HealOpts{Remove: true})`
$DIR/cmd/erasure-healing_test.go:690:2-690:19: `disk = getDisk(0)`
$DIR/cmd/erasure-healing_test.go:691:2-691:91: `fileInfoPostHeal, err = disk.ReadVersion(context.Background(), bucket, object, "", false)`
$DIR/cmd/erasure-healing_test.go:691:30-691:91: `.ReadVersion(context.Background(), bucket, object, "", false)`
$DIR/cmd/erasure-healing_test.go:691:50-691:63: `.Background()`
$DIR/cmd/erasure-healing_test.go:700:2-700:78: `rd = mustGetPutObjReader(t, bytes.NewReader(data), int64(len(data)), "", "")`
$DIR/cmd/erasure-healing_test.go:700:35-700:51: `.NewReader(data)`
$DIR/cmd/erasure-healing_test.go:701:2-703:4: `objInfo, err = objLayer.PutObject(ctx, bucket, object, rd, ObjectOptions{
		Versioned: true,
	})`
$DIR/cmd/erasure-healing_test.go:701:25-703:4: `.PutObject(ctx, bucket, object, rd, ObjectOptions{
		Versioned: true,
	})`
$DIR/cmd/erasure-healing_test.go:708:2-708:30: `setDisks(nil, nil, nil, nil)`
$DIR/cmd/erasure-healing_test.go:711:2-714:4: `_, err = objLayer.DeleteObject(ctx, bucket, object, ObjectOptions{
		Versioned: true,
		VersionID: objInfo.VersionID,
	})`
$DIR/cmd/erasure-healing_test.go:711:19-714:4: `.DeleteObject(ctx, bucket, object, ObjectOptions{
		Versioned: true,
		VersionID: objInfo.VersionID,
	})`
$DIR/cmd/erasure-healing_test.go:719:2-719:27: `setDisks(orgDisks[:4]...)`
$DIR/cmd/erasure-healing_test.go:721:2-721:19: `disk = getDisk(0)`
$DIR/cmd/erasure-healing_test.go:722:2-722:90: `fileInfoPreHeal, err = disk.ReadVersion(context.Background(), bucket, object, "", false)`
$DIR/cmd/erasure-healing_test.go:722:29-722:90: `.ReadVersion(context.Background(), bucket, object, "", false)`
$DIR/cmd/erasure-healing_test.go:722:49-722:62: `.Background()`
$DIR/cmd/erasure-healing_test.go:731:19-735:5: `.HealObjects(ctx, bucket, "", madmin.HealOpts{Remove: true},
		func(bucket, object, vid string) error {
			_, err := objLayer.HealObject(ctx, bucket, object, vid, madmin.HealOpts{Remove: true})
			return err
		})`
$DIR/cmd/erasure-healing_test.go:733:22-733:90: `.HealObject(ctx, bucket, object, vid, madmin.HealOpts{Remove: true})`
$DIR/cmd/erasure-healing_test.go:739:2-739:19: `disk = getDisk(0)`
$DIR/cmd/erasure-healing_test.go:740:2-740:91: `fileInfoPostHeal, err = disk.ReadVersion(context.Background(), bucket, object, "", false)`
$DIR/cmd/erasure-healing_test.go:740:30-740:91: `.ReadVersion(context.Background(), bucket, object, "", false)`
$DIR/cmd/erasure-healing_test.go:740:50-740:63: `.Background()`
$DIR/cmd/erasure-healing_test.go:751:24-751:57: `.WithCancel(context.Background())`
$DIR/cmd/erasure-healing_test.go:751:43-751:56: `.Background()`
$DIR/cmd/erasure-healing_test.go:754:2-754:24: `resetGlobalHealState()`
$DIR/cmd/erasure-healing_test.go:766:2-766:64: `pools = append(pools, mustGetPoolEndpoints(fsDirs[16:]...)...)`
$DIR/cmd/erasure-healing_test.go:776:15-776:48: `.Repeat([]byte("a"), 5*1024*1024)`
$DIR/cmd/erasure-healing_test.go:779:2-779:61: `err = objLayer.MakeBucket(ctx, bucket, MakeBucketOptions{})`
$DIR/cmd/erasure-healing_test.go:779:16-779:61: `.MakeBucket(ctx, bucket, MakeBucketOptions{})`
$DIR/cmd/erasure-healing_test.go:786:22-786:68: `.NewMultipartUpload(ctx, bucket, object, opts)`
$DIR/cmd/erasure-healing_test.go:793:26-793:162: `.PutObjectPart(ctx, bucket, object, res.UploadID, partID, mustGetPutObjReader(t, bytes.NewReader(data), int64(len(data)), "", ""), opts)`
$DIR/cmd/erasure-healing_test.go:793:112-793:128: `.NewReader(data)`
$DIR/cmd/erasure-healing_test.go:797:3-800:5: `uploadedParts = append(uploadedParts, CompletePart{
			PartNumber: pInfo.PartNumber,
			ETag:       pInfo.ETag,
		})`
$DIR/cmd/erasure-healing_test.go:803:2-803:110: `_, err = objLayer.CompleteMultipartUpload(ctx, bucket, object, res.UploadID, uploadedParts, ObjectOptions{})`
$DIR/cmd/erasure-healing_test.go:803:19-803:110: `.CompleteMultipartUpload(ctx, bucket, object, res.UploadID, uploadedParts, ObjectOptions{})`
$DIR/cmd/erasure-healing_test.go:823:21-823:32: `.getDisks()`
$DIR/cmd/erasure-healing_test.go:827:12-827:37: `.Is(err, errFileNotFound)`
$DIR/cmd/erasure-healing_test.go:835:4-838:6: `erasureDisks[i].Delete(context.Background(), bucket, pathJoin(object, xlStorageFormatFile), DeleteOptions{
				Recursive: false,
				Force:     false,
			})`
$DIR/cmd/erasure-healing_test.go:835:19-838:6: `.Delete(context.Background(), bucket, pathJoin(object, xlStorageFormatFile), DeleteOptions{
				Recursive: false,
				Force:     false,
			})`
$DIR/cmd/erasure-healing_test.go:835:34-835:47: `.Background()`
$DIR/cmd/erasure-healing_test.go:842:3-842:63: `_, err = objLayer.HealObject(ctx, bucket, object, "", hopts)`
$DIR/cmd/erasure-healing_test.go:842:20-842:63: `.HealObject(ctx, bucket, object, "", hopts)`
$DIR/cmd/erasure-healing_test.go:847:3-847:82: `fileInfos, errs = readAllFileInfo(ctx, erasureDisks, bucket, object, "", false)`
$DIR/cmd/erasure-healing_test.go:852:3-852:92: `fileInfos, errs = readAllFileInfo(ctx, erasureDisks, minioMetaBucket, cfgFile, "", false)`
$DIR/cmd/erasure-healing_test.go:853:3-853:76: `nfi, err = getLatestFileInfo(ctx, fileInfos, er.defaultParityCount, errs)`
$DIR/cmd/erasure-healing_test.go:854:12-854:37: `.Is(err, errFileNotFound)`
$DIR/cmd/erasure-healing_test.go:862:4-865:6: `erasureDisks[i].Delete(context.Background(), minioMetaBucket, pathJoin(cfgFile, xlStorageFormatFile), DeleteOptions{
				Recursive: false,
				Force:     false,
			})`
$DIR/cmd/erasure-healing_test.go:862:19-865:6: `.Delete(context.Background(), minioMetaBucket, pathJoin(cfgFile, xlStorageFormatFile), DeleteOptions{
				Recursive: false,
				Force:     false,
			})`
$DIR/cmd/erasure-healing_test.go:862:34-862:47: `.Background()`
$DIR/cmd/erasure-healing_test.go:869:3-869:73: `_, err = objLayer.HealObject(ctx, minioMetaBucket, cfgFile, "", hopts)`
$DIR/cmd/erasure-healing_test.go:869:20-869:73: `.HealObject(ctx, minioMetaBucket, cfgFile, "", hopts)`
$DIR/cmd/erasure-healing_test.go:874:3-874:92: `fileInfos, errs = readAllFileInfo(ctx, erasureDisks, minioMetaBucket, cfgFile, "", false)`
$DIR/cmd/erasure-healing_test.go:882:24-882:57: `.WithCancel(context.Background())`
$DIR/cmd/erasure-healing_test.go:882:43-882:56: `.Background()`
$DIR/cmd/erasure-healing_test.go:885:2-885:24: `resetGlobalHealState()`
$DIR/cmd/erasure-healing_test.go:897:2-897:64: `pools = append(pools, mustGetPoolEndpoints(fsDirs[16:]...)...)`
$DIR/cmd/erasure-healing_test.go:907:15-907:48: `.Repeat([]byte("a"), 5*1024*1024)`
$DIR/cmd/erasure-healing_test.go:910:2-910:61: `err = objLayer.MakeBucket(ctx, bucket, MakeBucketOptions{})`
$DIR/cmd/erasure-healing_test.go:910:16-910:61: `.MakeBucket(ctx, bucket, MakeBucketOptions{})`
$DIR/cmd/erasure-healing_test.go:919:17-919:63: `.NewMultipartUpload(ctx, bucket, object, opts)`
$DIR/cmd/erasure-healing_test.go:927:21-927:153: `.PutObjectPart(ctx, bucket, object, uploadID, partID, mustGetPutObjReader(t, bytes.NewReader(data), int64(len(data)), "", ""), opts)`
$DIR/cmd/erasure-healing_test.go:927:103-927:119: `.NewReader(data)`
$DIR/cmd/erasure-healing_test.go:931:3-934:5: `uploadedParts = append(uploadedParts, CompletePart{
			PartNumber: pInfo.PartNumber,
			ETag:       pInfo.ETag,
		})`
$DIR/cmd/erasure-healing_test.go:937:2-937:101: `_, err = set.CompleteMultipartUpload(ctx, bucket, object, uploadID, uploadedParts, ObjectOptions{})`
$DIR/cmd/erasure-healing_test.go:937:14-937:101: `.CompleteMultipartUpload(ctx, bucket, object, uploadID, uploadedParts, ObjectOptions{})`
$DIR/cmd/erasure-healing_test.go:944:20-944:31: `.getDisks()`
$DIR/cmd/erasure-healing_test.go:946:2-949:4: `err = firstDisk.Delete(context.Background(), bucket, pathJoin(object, xlStorageFormatFile), DeleteOptions{
		Recursive: false,
		Force:     false,
	})`
$DIR/cmd/erasure-healing_test.go:946:17-949:4: `.Delete(context.Background(), bucket, pathJoin(object, xlStorageFormatFile), DeleteOptions{
		Recursive: false,
		Force:     false,
	})`
$DIR/cmd/erasure-healing_test.go:946:32-946:45: `.Background()`
$DIR/cmd/erasure-healing_test.go:954:2-954:105: `_, err = objLayer.HealObject(ctx, bucket, object, "", madmin.HealOpts{ScanMode: madmin.HealNormalScan})`
$DIR/cmd/erasure-healing_test.go:954:19-954:105: `.HealObject(ctx, bucket, object, "", madmin.HealOpts{ScanMode: madmin.HealNormalScan})`
$DIR/cmd/erasure-healing_test.go:965:23-965:105: `.StatInfoFile(context.Background(), bucket, object+"/"+xlStorageFormatFile, false)`
$DIR/cmd/erasure-healing_test.go:965:44-965:57: `.Background()`
$DIR/cmd/erasure-healing_test.go:969:2-972:4: `err = firstDisk.Delete(context.Background(), bucket, pathJoin(object, fi.DataDir, "part.1"), DeleteOptions{
		Recursive: false,
		Force:     false,
	})`
$DIR/cmd/erasure-healing_test.go:969:17-972:4: `.Delete(context.Background(), bucket, pathJoin(object, fi.DataDir, "part.1"), DeleteOptions{
		Recursive: false,
		Force:     false,
	})`
$DIR/cmd/erasure-healing_test.go:969:32-969:45: `.Background()`
$DIR/cmd/erasure-healing_test.go:977:2-977:106: `err = firstDisk.WriteAll(context.Background(), bucket, pathJoin(object, fi.DataDir, "part.1"), []byte{})`
$DIR/cmd/erasure-healing_test.go:977:17-977:106: `.WriteAll(context.Background(), bucket, pathJoin(object, fi.DataDir, "part.1"), []byte{})`
$DIR/cmd/erasure-healing_test.go:977:34-977:47: `.Background()`
$DIR/cmd/erasure-healing_test.go:982:2-982:132: `_, err = objLayer.HealObject(ctx, bucket, object, "", madmin.HealOpts{DryRun: false, Remove: true, ScanMode: madmin.HealDeepScan})`
$DIR/cmd/erasure-healing_test.go:982:19-982:132: `.HealObject(ctx, bucket, object, "", madmin.HealOpts{DryRun: false, Remove: true, ScanMode: madmin.HealDeepScan})`
$DIR/cmd/erasure-healing_test.go:987:2-987:81: `fileInfos, errs = readAllFileInfo(ctx, erasureDisks, bucket, object, "", false)`
$DIR/cmd/erasure-healing_test.go:993:2-993:28: `fi.DiskMTime = time.Time{}`
$DIR/cmd/erasure-healing_test.go:994:2-994:29: `nfi.DiskMTime = time.Time{}`
$DIR/cmd/erasure-healing_test.go:995:13-995:32: `.DeepEqual(fi, nfi)`
$DIR/cmd/erasure-healing_test.go:999:2-1002:4: `err = firstDisk.Delete(context.Background(), bucket, pathJoin(object, fi.DataDir, "part.1"), DeleteOptions{
		Recursive: false,
		Force:     false,
	})`
$DIR/cmd/erasure-healing_test.go:999:17-1002:4: `.Delete(context.Background(), bucket, pathJoin(object, fi.DataDir, "part.1"), DeleteOptions{
		Recursive: false,
		Force:     false,
	})`
$DIR/cmd/erasure-healing_test.go:999:32-999:45: `.Background()`
$DIR/cmd/erasure-healing_test.go:1007:16-1007:51: `.Repeat([]byte("b"), int(nfi.Size))`
$DIR/cmd/erasure-healing_test.go:1008:2-1008:103: `err = firstDisk.WriteAll(context.Background(), bucket, pathJoin(object, fi.DataDir, "part.1"), bdata)`
$DIR/cmd/erasure-healing_test.go:1008:17-1008:103: `.WriteAll(context.Background(), bucket, pathJoin(object, fi.DataDir, "part.1"), bdata)`
$DIR/cmd/erasure-healing_test.go:1008:34-1008:47: `.Background()`
$DIR/cmd/erasure-healing_test.go:1013:2-1013:132: `_, err = objLayer.HealObject(ctx, bucket, object, "", madmin.HealOpts{DryRun: false, Remove: true, ScanMode: madmin.HealDeepScan})`
$DIR/cmd/erasure-healing_test.go:1013:19-1013:132: `.HealObject(ctx, bucket, object, "", madmin.HealOpts{DryRun: false, Remove: true, ScanMode: madmin.HealDeepScan})`
$DIR/cmd/erasure-healing_test.go:1018:2-1018:81: `fileInfos, errs = readAllFileInfo(ctx, erasureDisks, bucket, object, "", false)`
$DIR/cmd/erasure-healing_test.go:1019:2-1019:75: `nfi, err = getLatestFileInfo(ctx, fileInfos, er.defaultParityCount, errs)`
$DIR/cmd/erasure-healing_test.go:1024:2-1024:28: `fi.DiskMTime = time.Time{}`
$DIR/cmd/erasure-healing_test.go:1025:2-1025:29: `nfi.DiskMTime = time.Time{}`
$DIR/cmd/erasure-healing_test.go:1026:13-1026:32: `.DeepEqual(fi, nfi)`
$DIR/cmd/erasure-healing_test.go:1033:3-1036:5: `erasureDisks[i].Delete(context.Background(), bucket, pathJoin(object, xlStorageFormatFile), DeleteOptions{
			Recursive: false,
			Force:     false,
		})`
$DIR/cmd/erasure-healing_test.go:1033:18-1036:5: `.Delete(context.Background(), bucket, pathJoin(object, xlStorageFormatFile), DeleteOptions{
			Recursive: false,
			Force:     false,
		})`
$DIR/cmd/erasure-healing_test.go:1033:33-1033:46: `.Background()`
$DIR/cmd/erasure-healing_test.go:1040:2-1040:132: `_, err = objLayer.HealObject(ctx, bucket, object, "", madmin.HealOpts{DryRun: false, Remove: true, ScanMode: madmin.HealDeepScan})`
$DIR/cmd/erasure-healing_test.go:1040:19-1040:132: `.HealObject(ctx, bucket, object, "", madmin.HealOpts{DryRun: false, Remove: true, ScanMode: madmin.HealDeepScan})`
$DIR/cmd/erasure-healing_test.go:1048:2-1048:71: `_, err = objLayer.GetObjectInfo(ctx, bucket, object, ObjectOptions{})`
$DIR/cmd/erasure-healing_test.go:1048:19-1048:71: `.GetObjectInfo(ctx, bucket, object, ObjectOptions{})`
$DIR/cmd/erasure-healing_test.go:1054:3-1054:116: `_, err = erasureDisks[i].StatInfoFile(context.Background(), bucket, pathJoin(object, xlStorageFormatFile), false)`
$DIR/cmd/erasure-healing_test.go:1054:27-1054:116: `.StatInfoFile(context.Background(), bucket, pathJoin(object, xlStorageFormatFile), false)`
$DIR/cmd/erasure-healing_test.go:1054:48-1054:61: `.Background()`
$DIR/cmd/erasure-healing_test.go:1062:24-1062:57: `.WithCancel(context.Background())`
$DIR/cmd/erasure-healing_test.go:1062:43-1062:56: `.Background()`
$DIR/cmd/erasure-healing_test.go:1065:2-1065:24: `resetGlobalHealState()`
$DIR/cmd/erasure-healing_test.go:1084:15-1084:48: `.Repeat([]byte("a"), 5*1024*1024)`
$DIR/cmd/erasure-healing_test.go:1087:2-1087:61: `err = objLayer.MakeBucket(ctx, bucket, MakeBucketOptions{})`
$DIR/cmd/erasure-healing_test.go:1087:16-1087:61: `.MakeBucket(ctx, bucket, MakeBucketOptions{})`
$DIR/cmd/erasure-healing_test.go:1094:22-1094:68: `.NewMultipartUpload(ctx, bucket, object, opts)`
$DIR/cmd/erasure-healing_test.go:1101:26-1101:162: `.PutObjectPart(ctx, bucket, object, res.UploadID, partID, mustGetPutObjReader(t, bytes.NewReader(data), int64(len(data)), "", ""), opts)`
$DIR/cmd/erasure-healing_test.go:1101:112-1101:128: `.NewReader(data)`
$DIR/cmd/erasure-healing_test.go:1105:3-1108:5: `uploadedParts = append(uploadedParts, CompletePart{
			PartNumber: pInfo.PartNumber,
			ETag:       pInfo.ETag,
		})`
$DIR/cmd/erasure-healing_test.go:1111:2-1111:110: `_, err = objLayer.CompleteMultipartUpload(ctx, bucket, object, res.UploadID, uploadedParts, ObjectOptions{})`
$DIR/cmd/erasure-healing_test.go:1111:19-1111:110: `.CompleteMultipartUpload(ctx, bucket, object, res.UploadID, uploadedParts, ObjectOptions{})`
$DIR/cmd/erasure-healing_test.go:1118:20-1118:31: `.getDisks()`
$DIR/cmd/erasure-healing_test.go:1128:2-1131:4: `err = firstDisk.Delete(context.Background(), bucket, pathJoin(object, xlStorageFormatFile), DeleteOptions{
		Recursive: false,
		Force:     false,
	})`
$DIR/cmd/erasure-healing_test.go:1128:17-1131:4: `.Delete(context.Background(), bucket, pathJoin(object, xlStorageFormatFile), DeleteOptions{
		Recursive: false,
		Force:     false,
	})`
$DIR/cmd/erasure-healing_test.go:1128:32-1128:45: `.Background()`
$DIR/cmd/erasure-healing_test.go:1136:2-1136:105: `_, err = objLayer.HealObject(ctx, bucket, object, "", madmin.HealOpts{ScanMode: madmin.HealNormalScan})`
$DIR/cmd/erasure-healing_test.go:1136:19-1136:105: `.HealObject(ctx, bucket, object, "", madmin.HealOpts{ScanMode: madmin.HealNormalScan})`
$DIR/cmd/erasure-healing_test.go:1141:23-1141:105: `.StatInfoFile(context.Background(), bucket, object+"/"+xlStorageFormatFile, false)`
$DIR/cmd/erasure-healing_test.go:1141:44-1141:57: `.Background()`
$DIR/cmd/erasure-healing_test.go:1145:2-1145:81: `fileInfos, errs = readAllFileInfo(ctx, erasureDisks, bucket, object, "", false)`
$DIR/cmd/erasure-healing_test.go:1151:2-1151:28: `fi.DiskMTime = time.Time{}`
$DIR/cmd/erasure-healing_test.go:1152:2-1152:30: `nfi1.DiskMTime = time.Time{}`
$DIR/cmd/erasure-healing_test.go:1153:13-1153:33: `.DeepEqual(fi, nfi1)`
$DIR/cmd/erasure-healing_test.go:1158:2-1158:111: `err = firstDisk.WriteAll(context.Background(), bucket, pathJoin(object, xlStorageFormatFile), []byte("abcd"))`
$DIR/cmd/erasure-healing_test.go:1158:17-1158:111: `.WriteAll(context.Background(), bucket, pathJoin(object, xlStorageFormatFile), []byte("abcd"))`
$DIR/cmd/erasure-healing_test.go:1158:34-1158:47: `.Background()`
$DIR/cmd/erasure-healing_test.go:1163:2-1163:105: `_, err = objLayer.HealObject(ctx, bucket, object, "", madmin.HealOpts{ScanMode: madmin.HealNormalScan})`
$DIR/cmd/erasure-healing_test.go:1163:19-1163:105: `.HealObject(ctx, bucket, object, "", madmin.HealOpts{ScanMode: madmin.HealNormalScan})`
$DIR/cmd/erasure-healing_test.go:1168:2-1168:81: `fileInfos, errs = readAllFileInfo(ctx, erasureDisks, bucket, object, "", false)`
$DIR/cmd/erasure-healing_test.go:1174:2-1174:28: `fi.DiskMTime = time.Time{}`
$DIR/cmd/erasure-healing_test.go:1175:2-1175:30: `nfi2.DiskMTime = time.Time{}`
$DIR/cmd/erasure-healing_test.go:1176:13-1176:33: `.DeepEqual(fi, nfi2)`
$DIR/cmd/erasure-healing_test.go:1183:3-1186:5: `erasureDisks[i].Delete(context.Background(), bucket, pathJoin(object, xlStorageFormatFile), DeleteOptions{
			Recursive: false,
			Force:     false,
		})`
$DIR/cmd/erasure-healing_test.go:1183:18-1186:5: `.Delete(context.Background(), bucket, pathJoin(object, xlStorageFormatFile), DeleteOptions{
			Recursive: false,
			Force:     false,
		})`
$DIR/cmd/erasure-healing_test.go:1183:33-1183:46: `.Background()`
$DIR/cmd/erasure-healing_test.go:1190:2-1190:132: `_, err = objLayer.HealObject(ctx, bucket, object, "", madmin.HealOpts{DryRun: false, Remove: true, ScanMode: madmin.HealDeepScan})`
$DIR/cmd/erasure-healing_test.go:1190:19-1190:132: `.HealObject(ctx, bucket, object, "", madmin.HealOpts{DryRun: false, Remove: true, ScanMode: madmin.HealDeepScan})`
$DIR/cmd/erasure-healing_test.go:1198:2-1198:71: `_, err = objLayer.GetObjectInfo(ctx, bucket, object, ObjectOptions{})`
$DIR/cmd/erasure-healing_test.go:1198:19-1198:71: `.GetObjectInfo(ctx, bucket, object, ObjectOptions{})`
$DIR/cmd/erasure-healing_test.go:1205:24-1205:57: `.WithCancel(context.Background())`
$DIR/cmd/erasure-healing_test.go:1205:43-1205:56: `.Background()`
$DIR/cmd/erasure-healing_test.go:1208:2-1208:24: `resetGlobalHealState()`
$DIR/cmd/erasure-healing_test.go:1227:15-1227:48: `.Repeat([]byte("a"), 5*1024*1024)`
$DIR/cmd/erasure-healing_test.go:1230:2-1230:61: `err = objLayer.MakeBucket(ctx, bucket, MakeBucketOptions{})`
$DIR/cmd/erasure-healing_test.go:1230:16-1230:61: `.MakeBucket(ctx, bucket, MakeBucketOptions{})`
$DIR/cmd/erasure-healing_test.go:1237:22-1237:68: `.NewMultipartUpload(ctx, bucket, object, opts)`
$DIR/cmd/erasure-healing_test.go:1244:26-1244:162: `.PutObjectPart(ctx, bucket, object, res.UploadID, partID, mustGetPutObjReader(t, bytes.NewReader(data), int64(len(data)), "", ""), opts)`
$DIR/cmd/erasure-healing_test.go:1244:112-1244:128: `.NewReader(data)`
$DIR/cmd/erasure-healing_test.go:1248:3-1251:5: `uploadedParts = append(uploadedParts, CompletePart{
			PartNumber: pInfo.PartNumber,
			ETag:       pInfo.ETag,
		})`
$DIR/cmd/erasure-healing_test.go:1254:2-1254:110: `_, err = objLayer.CompleteMultipartUpload(ctx, bucket, object, res.UploadID, uploadedParts, ObjectOptions{})`
$DIR/cmd/erasure-healing_test.go:1254:19-1254:110: `.CompleteMultipartUpload(ctx, bucket, object, res.UploadID, uploadedParts, ObjectOptions{})`
$DIR/cmd/erasure-healing_test.go:1262:20-1262:31: `.getDisks()`
$DIR/cmd/erasure-healing_test.go:1272:36-1272:114: `.ReadAll(context.Background(), bucket, pathJoin(object, fi.DataDir, "part.1"))`
$DIR/cmd/erasure-healing_test.go:1272:52-1272:65: `.Background()`
$DIR/cmd/erasure-healing_test.go:1277:37-1277:115: `.ReadAll(context.Background(), bucket, pathJoin(object, fi.DataDir, "part.1"))`
$DIR/cmd/erasure-healing_test.go:1277:53-1277:66: `.Background()`
$DIR/cmd/erasure-healing_test.go:1283:2-1286:4: `err = firstDisk.Delete(context.Background(), bucket, pathJoin(object, fi.DataDir, "part.1"), DeleteOptions{
		Recursive: false,
		Force:     false,
	})`
$DIR/cmd/erasure-healing_test.go:1283:17-1286:4: `.Delete(context.Background(), bucket, pathJoin(object, fi.DataDir, "part.1"), DeleteOptions{
		Recursive: false,
		Force:     false,
	})`
$DIR/cmd/erasure-healing_test.go:1283:32-1283:45: `.Background()`
$DIR/cmd/erasure-healing_test.go:1291:2-1291:105: `_, err = objLayer.HealObject(ctx, bucket, object, "", madmin.HealOpts{ScanMode: madmin.HealNormalScan})`
$DIR/cmd/erasure-healing_test.go:1291:19-1291:105: `.HealObject(ctx, bucket, object, "", madmin.HealOpts{ScanMode: madmin.HealNormalScan})`
$DIR/cmd/erasure-healing_test.go:1296:33-1296:111: `.ReadAll(context.Background(), bucket, pathJoin(object, fi.DataDir, "part.1"))`
$DIR/cmd/erasure-healing_test.go:1296:49-1296:62: `.Background()`
$DIR/cmd/erasure-healing_test.go:1301:13-1301:56: `.DeepEqual(part1Disk1Origin, part1Replaced)`
$DIR/cmd/erasure-healing_test.go:1306:2-1306:116: `err = firstDisk.WriteAll(context.Background(), bucket, pathJoin(object, fi.DataDir, "part.1"), []byte("foobytes"))`
$DIR/cmd/erasure-healing_test.go:1306:17-1306:116: `.WriteAll(context.Background(), bucket, pathJoin(object, fi.DataDir, "part.1"), []byte("foobytes"))`
$DIR/cmd/erasure-healing_test.go:1306:34-1306:47: `.Background()`
$DIR/cmd/erasure-healing_test.go:1311:2-1311:105: `_, err = objLayer.HealObject(ctx, bucket, object, "", madmin.HealOpts{ScanMode: madmin.HealNormalScan})`
$DIR/cmd/erasure-healing_test.go:1311:19-1311:105: `.HealObject(ctx, bucket, object, "", madmin.HealOpts{ScanMode: madmin.HealNormalScan})`
$DIR/cmd/erasure-healing_test.go:1316:2-1316:110: `part1Replaced, err = firstDisk.ReadAll(context.Background(), bucket, pathJoin(object, fi.DataDir, "part.1"))`
$DIR/cmd/erasure-healing_test.go:1316:32-1316:110: `.ReadAll(context.Background(), bucket, pathJoin(object, fi.DataDir, "part.1"))`
$DIR/cmd/erasure-healing_test.go:1316:48-1316:61: `.Background()`
$DIR/cmd/erasure-healing_test.go:1321:13-1321:56: `.DeepEqual(part1Disk1Origin, part1Replaced)`
$DIR/cmd/erasure-healing_test.go:1326:2-1326:116: `err = firstDisk.WriteAll(context.Background(), bucket, pathJoin(object, fi.DataDir, "part.1"), []byte("foobytes"))`
$DIR/cmd/erasure-healing_test.go:1326:17-1326:116: `.WriteAll(context.Background(), bucket, pathJoin(object, fi.DataDir, "part.1"), []byte("foobytes"))`
$DIR/cmd/erasure-healing_test.go:1326:34-1326:47: `.Background()`
$DIR/cmd/erasure-healing_test.go:1331:2-1334:4: `err = secondDisk.Delete(context.Background(), bucket, object, DeleteOptions{
		Recursive: true,
		Force:     false,
	})`
$DIR/cmd/erasure-healing_test.go:1331:18-1334:4: `.Delete(context.Background(), bucket, object, DeleteOptions{
		Recursive: true,
		Force:     false,
	})`
$DIR/cmd/erasure-healing_test.go:1331:33-1331:46: `.Background()`
$DIR/cmd/erasure-healing_test.go:1339:2-1339:105: `_, err = objLayer.HealObject(ctx, bucket, object, "", madmin.HealOpts{ScanMode: madmin.HealNormalScan})`
$DIR/cmd/erasure-healing_test.go:1339:19-1339:105: `.HealObject(ctx, bucket, object, "", madmin.HealOpts{ScanMode: madmin.HealNormalScan})`
$DIR/cmd/erasure-healing_test.go:1344:37-1344:115: `.ReadAll(context.Background(), bucket, pathJoin(object, fi.DataDir, "part.1"))`
$DIR/cmd/erasure-healing_test.go:1344:53-1344:66: `.Background()`
$DIR/cmd/erasure-healing_test.go:1349:13-1349:60: `.DeepEqual(part1Disk1Origin, partReconstructed)`
$DIR/cmd/erasure-healing_test.go:1353:2-1353:115: `partReconstructed, err = secondDisk.ReadAll(context.Background(), bucket, pathJoin(object, fi.DataDir, "part.1"))`
$DIR/cmd/erasure-healing_test.go:1353:37-1353:115: `.ReadAll(context.Background(), bucket, pathJoin(object, fi.DataDir, "part.1"))`
$DIR/cmd/erasure-healing_test.go:1353:53-1353:66: `.Background()`
$DIR/cmd/erasure-healing_test.go:1358:13-1358:60: `.DeepEqual(part1Disk2Origin, partReconstructed)`
$DIR/cmd/erasure-healing_test.go:1365:24-1365:57: `.WithCancel(context.Background())`
$DIR/cmd/erasure-healing_test.go:1365:43-1365:56: `.Background()`
$DIR/cmd/erasure-healing_test.go:1384:15-1384:48: `.Repeat([]byte("a"), 5*1024*1024)`
$DIR/cmd/erasure-healing_test.go:1387:2-1387:56: `err = obj.MakeBucket(ctx, bucket, MakeBucketOptions{})`
$DIR/cmd/erasure-healing_test.go:1387:11-1387:56: `.MakeBucket(ctx, bucket, MakeBucketOptions{})`
$DIR/cmd/erasure-healing_test.go:1394:17-1394:63: `.NewMultipartUpload(ctx, bucket, object, opts)`
$DIR/cmd/erasure-healing_test.go:1401:21-1401:157: `.PutObjectPart(ctx, bucket, object, res.UploadID, partID, mustGetPutObjReader(t, bytes.NewReader(data), int64(len(data)), "", ""), opts)`
$DIR/cmd/erasure-healing_test.go:1401:107-1401:123: `.NewReader(data)`
$DIR/cmd/erasure-healing_test.go:1405:3-1408:5: `uploadedParts = append(uploadedParts, CompletePart{
			PartNumber: pInfo.PartNumber,
			ETag:       pInfo.ETag,
		})`
$DIR/cmd/erasure-healing_test.go:1414:17-1414:28: `.getDisks()`
$DIR/cmd/erasure-healing_test.go:1416:2-1416:105: `_, err = obj.CompleteMultipartUpload(ctx, bucket, object, res.UploadID, uploadedParts, ObjectOptions{})`
$DIR/cmd/erasure-healing_test.go:1416:14-1416:105: `.CompleteMultipartUpload(ctx, bucket, object, res.UploadID, uploadedParts, ObjectOptions{})`
$DIR/cmd/erasure-healing_test.go:1422:2-1425:4: `err = firstDisk.Delete(context.Background(), bucket, object, DeleteOptions{
		Recursive: true,
		Force:     false,
	})`
$DIR/cmd/erasure-healing_test.go:1422:17-1425:4: `.Delete(context.Background(), bucket, object, DeleteOptions{
		Recursive: true,
		Force:     false,
	})`
$DIR/cmd/erasure-healing_test.go:1422:32-1422:45: `.Background()`
$DIR/cmd/erasure-healing_test.go:1430:2-1430:100: `_, err = obj.HealObject(ctx, bucket, object, "", madmin.HealOpts{ScanMode: madmin.HealNormalScan})`
$DIR/cmd/erasure-healing_test.go:1430:14-1430:100: `.HealObject(ctx, bucket, object, "", madmin.HealOpts{ScanMode: madmin.HealNormalScan})`
$DIR/cmd/erasure-healing_test.go:1435:23-1435:105: `.StatInfoFile(context.Background(), bucket, object+"/"+xlStorageFormatFile, false)`
$DIR/cmd/erasure-healing_test.go:1435:44-1435:57: `.Background()`
$DIR/cmd/erasure-healing_test.go:1439:20-1439:31: `.getDisks()`
$DIR/cmd/erasure-healing_test.go:1440:2-1440:40: `z.serverPools[0].erasureDisksMu.Lock()`
$DIR/cmd/erasure-healing_test.go:1440:18-1440:40: `.erasureDisksMu.Lock()`
$DIR/cmd/erasure-healing_test.go:1444:4-1444:25: `erasureDisks[i] = nil`
$DIR/cmd/erasure-healing_test.go:1448:2-1448:42: `z.serverPools[0].erasureDisksMu.Unlock()`
$DIR/cmd/erasure-healing_test.go:1448:18-1448:42: `.erasureDisksMu.Unlock()`
$DIR/cmd/erasure-healing_test.go:1451:2-1453:4: `_, err = obj.HealObject(ctx, bucket, object, "", madmin.HealOpts{
		ScanMode: madmin.HealDeepScan,
	})`
$DIR/cmd/erasure-healing_test.go:1451:14-1453:4: `.HealObject(ctx, bucket, object, "", madmin.HealOpts{
		ScanMode: madmin.HealDeepScan,
	})`
$DIR/cmd/erasure-healing_test.go:1464:24-1464:57: `.WithCancel(context.Background())`
$DIR/cmd/erasure-healing_test.go:1464:43-1464:56: `.Background()`
$DIR/cmd/erasure-healing_test.go:1484:2-1484:56: `err = obj.MakeBucket(ctx, bucket, MakeBucketOptions{})`
$DIR/cmd/erasure-healing_test.go:1484:11-1484:56: `.MakeBucket(ctx, bucket, MakeBucketOptions{})`
$DIR/cmd/erasure-healing_test.go:1490:2-1491:47: `_, err = obj.PutObject(ctx, bucket, object, mustGetPutObjReader(t,
		bytes.NewReader([]byte{}), 0, "", ""), opts)`
$DIR/cmd/erasure-healing_test.go:1490:14-1491:47: `.PutObject(ctx, bucket, object, mustGetPutObjReader(t,
		bytes.NewReader([]byte{}), 0, "", ""), opts)`
$DIR/cmd/erasure-healing_test.go:1491:8-1491:28: `.NewReader([]byte{})`
$DIR/cmd/erasure-healing_test.go:1499:17-1499:28: `.getDisks()`
$DIR/cmd/erasure-healing_test.go:1500:2-1500:98: `err = firstDisk.DeleteVol(context.Background(), pathJoin(bucket, encodeDirObject(object)), true)`
$DIR/cmd/erasure-healing_test.go:1500:17-1500:98: `.DeleteVol(context.Background(), pathJoin(bucket, encodeDirObject(object)), true)`
$DIR/cmd/erasure-healing_test.go:1500:35-1500:48: `.Background()`
$DIR/cmd/erasure-healing_test.go:1506:16-1506:102: `.HealObject(ctx, bucket, object, "", madmin.HealOpts{ScanMode: madmin.HealNormalScan})`
$DIR/cmd/erasure-healing_test.go:1512:2-1512:93: `_, err = firstDisk.StatVol(context.Background(), pathJoin(bucket, encodeDirObject(object)))`
$DIR/cmd/erasure-healing_test.go:1512:20-1512:93: `.StatVol(context.Background(), pathJoin(bucket, encodeDirObject(object)))`
$DIR/cmd/erasure-healing_test.go:1512:36-1512:49: `.Background()`
$DIR/cmd/erasure-healing_test.go:1530:2-1530:101: `hr, err = obj.HealObject(ctx, bucket, object, "", madmin.HealOpts{ScanMode: madmin.HealNormalScan})`
$DIR/cmd/erasure-healing_test.go:1530:15-1530:101: `.HealObject(ctx, bucket, object, "", madmin.HealOpts{ScanMode: madmin.HealNormalScan})`
$DIR/cmd/erasure-healing_test.go:1559:3-1670:5: `t.Run(test.name, func(t *testing.T) {
			ctx, cancel := context.WithCancel(context.Background())
			defer cancel()

			nDisks := 16
			fsDirs, err := getRandomDisks(nDisks)
			if err != nil {
				t.Fatal(err)
			}

			defer removeRoots(fsDirs)

			obj, _, err := initObjectLayer(ctx, mustGetPoolEndpoints(fsDirs...))
			if err != nil {
				t.Fatal(err)
			}
			bucket := "bucket"
			object := "object"

			data := make([]byte, test.dataSize)
			_, err = rand.Read(data)
			if err != nil {
				t.Fatal(err)
			}
			var opts ObjectOptions

			err = obj.MakeBucket(ctx, bucket, MakeBucketOptions{})
			if err != nil {
				t.Fatalf("Failed to make a bucket - %v", err)
			}

			_, err = obj.PutObject(ctx, bucket, object,
				mustGetPutObjReader(t, bytes.NewReader(data), int64(len(data)), "", ""), opts)

			if err != nil {
				t.Fatal(err)
			}

			actualH := sha256.New()
			_, err = io.Copy(actualH, bytes.NewReader(data))
			if err != nil {
				return
			}
			actualSha256 := actualH.Sum(nil)

			z := obj.(*erasureServerPools)
			er := z.serverPools[0].getHashedSet(object)

			disks := er.getDisks()
			distribution := hashOrder(pathJoin(bucket, object), nDisks)
			shuffledDisks := shuffleDisks(disks, distribution)

			// remove last data shard
			err = removeAll(pathJoin(shuffledDisks[11].String(), bucket, object))
			if err != nil {
				t.Fatalf("Failed to delete a file - %v", err)
			}
			_, err = obj.HealObject(ctx, bucket, object, "", madmin.HealOpts{
				ScanMode: madmin.HealNormalScan,
			})
			if err != nil {
				t.Fatal(err)
			}

			firstGr, err := obj.GetObjectNInfo(ctx, bucket, object, nil, nil, noLock, ObjectOptions{})
			if err != nil {
				t.Fatal(err)
			}
			defer firstGr.Close()

			firstHealedH := sha256.New()
			_, err = io.Copy(firstHealedH, firstGr)
			if err != nil {
				t.Fatal(err)
			}
			firstHealedDataSha256 := firstHealedH.Sum(nil)

			if !bytes.Equal(actualSha256, firstHealedDataSha256) {
				t.Fatalf("object healed wrong, expected %x, got %x",
					actualSha256, firstHealedDataSha256)
			}

			// remove another data shard
			if err = removeAll(pathJoin(shuffledDisks[1].String(), bucket, object)); err != nil {
				t.Fatalf("Failed to delete a file - %v", err)
			}

			_, err = obj.HealObject(ctx, bucket, object, "", madmin.HealOpts{
				ScanMode: madmin.HealNormalScan,
			})
			if err != nil {
				t.Fatal(err)
			}

			secondGr, err := obj.GetObjectNInfo(ctx, bucket, object, nil, nil, noLock, ObjectOptions{})
			if err != nil {
				t.Fatal(err)
			}
			defer secondGr.Close()

			secondHealedH := sha256.New()
			_, err = io.Copy(secondHealedH, secondGr)
			if err != nil {
				t.Fatal(err)
			}
			secondHealedDataSha256 := secondHealedH.Sum(nil)

			if !bytes.Equal(actualSha256, secondHealedDataSha256) {
				t.Fatalf("object healed wrong, expected %x, got %x",
					actualSha256, secondHealedDataSha256)
			}
		})`
$DIR/cmd/erasure-healing_test.go:1559:4-1670:5: `.Run(test.name, func(t *testing.T) {
			ctx, cancel := context.WithCancel(context.Background())
			defer cancel()

			nDisks := 16
			fsDirs, err := getRandomDisks(nDisks)
			if err != nil {
				t.Fatal(err)
			}

			defer removeRoots(fsDirs)

			obj, _, err := initObjectLayer(ctx, mustGetPoolEndpoints(fsDirs...))
			if err != nil {
				t.Fatal(err)
			}
			bucket := "bucket"
			object := "object"

			data := make([]byte, test.dataSize)
			_, err = rand.Read(data)
			if err != nil {
				t.Fatal(err)
			}
			var opts ObjectOptions

			err = obj.MakeBucket(ctx, bucket, MakeBucketOptions{})
			if err != nil {
				t.Fatalf("Failed to make a bucket - %v", err)
			}

			_, err = obj.PutObject(ctx, bucket, object,
				mustGetPutObjReader(t, bytes.NewReader(data), int64(len(data)), "", ""), opts)

			if err != nil {
				t.Fatal(err)
			}

			actualH := sha256.New()
			_, err = io.Copy(actualH, bytes.NewReader(data))
			if err != nil {
				return
			}
			actualSha256 := actualH.Sum(nil)

			z := obj.(*erasureServerPools)
			er := z.serverPools[0].getHashedSet(object)

			disks := er.getDisks()
			distribution := hashOrder(pathJoin(bucket, object), nDisks)
			shuffledDisks := shuffleDisks(disks, distribution)

			// remove last data shard
			err = removeAll(pathJoin(shuffledDisks[11].String(), bucket, object))
			if err != nil {
				t.Fatalf("Failed to delete a file - %v", err)
			}
			_, err = obj.HealObject(ctx, bucket, object, "", madmin.HealOpts{
				ScanMode: madmin.HealNormalScan,
			})
			if err != nil {
				t.Fatal(err)
			}

			firstGr, err := obj.GetObjectNInfo(ctx, bucket, object, nil, nil, noLock, ObjectOptions{})
			if err != nil {
				t.Fatal(err)
			}
			defer firstGr.Close()

			firstHealedH := sha256.New()
			_, err = io.Copy(firstHealedH, firstGr)
			if err != nil {
				t.Fatal(err)
			}
			firstHealedDataSha256 := firstHealedH.Sum(nil)

			if !bytes.Equal(actualSha256, firstHealedDataSha256) {
				t.Fatalf("object healed wrong, expected %x, got %x",
					actualSha256, firstHealedDataSha256)
			}

			// remove another data shard
			if err = removeAll(pathJoin(shuffledDisks[1].String(), bucket, object)); err != nil {
				t.Fatalf("Failed to delete a file - %v", err)
			}

			_, err = obj.HealObject(ctx, bucket, object, "", madmin.HealOpts{
				ScanMode: madmin.HealNormalScan,
			})
			if err != nil {
				t.Fatal(err)
			}

			secondGr, err := obj.GetObjectNInfo(ctx, bucket, object, nil, nil, noLock, ObjectOptions{})
			if err != nil {
				t.Fatal(err)
			}
			defer secondGr.Close()

			secondHealedH := sha256.New()
			_, err = io.Copy(secondHealedH, secondGr)
			if err != nil {
				t.Fatal(err)
			}
			secondHealedDataSha256 := secondHealedH.Sum(nil)

			if !bytes.Equal(actualSha256, secondHealedDataSha256) {
				t.Fatalf("object healed wrong, expected %x, got %x",
					actualSha256, secondHealedDataSha256)
			}
		})`
$DIR/cmd/erasure-healing_test.go:1560:26-1560:59: `.WithCancel(context.Background())`
$DIR/cmd/erasure-healing_test.go:1560:45-1560:58: `.Background()`
$DIR/cmd/erasure-healing_test.go:1579:4-1579:28: `_, err = rand.Read(data)`
$DIR/cmd/erasure-healing_test.go:1579:17-1579:28: `.Read(data)`
$DIR/cmd/erasure-healing_test.go:1585:4-1585:58: `err = obj.MakeBucket(ctx, bucket, MakeBucketOptions{})`
$DIR/cmd/erasure-healing_test.go:1585:13-1585:58: `.MakeBucket(ctx, bucket, MakeBucketOptions{})`
$DIR/cmd/erasure-healing_test.go:1590:4-1591:83: `_, err = obj.PutObject(ctx, bucket, object,
				mustGetPutObjReader(t, bytes.NewReader(data), int64(len(data)), "", ""), opts)`
$DIR/cmd/erasure-healing_test.go:1590:16-1591:83: `.PutObject(ctx, bucket, object,
				mustGetPutObjReader(t, bytes.NewReader(data), int64(len(data)), "", ""), opts)`
$DIR/cmd/erasure-healing_test.go:1591:33-1591:49: `.NewReader(data)`
$DIR/cmd/erasure-healing_test.go:1597:21-1597:27: `.New()`
$DIR/cmd/erasure-healing_test.go:1598:4-1598:52: `_, err = io.Copy(actualH, bytes.NewReader(data))`
$DIR/cmd/erasure-healing_test.go:1598:15-1598:52: `.Copy(actualH, bytes.NewReader(data))`
$DIR/cmd/erasure-healing_test.go:1598:35-1598:51: `.NewReader(data)`
$DIR/cmd/erasure-healing_test.go:1602:27-1602:36: `.Sum(nil)`
$DIR/cmd/erasure-healing_test.go:1605:26-1605:47: `.getHashedSet(object)`
$DIR/cmd/erasure-healing_test.go:1607:15-1607:26: `.getDisks()`
$DIR/cmd/erasure-healing_test.go:1612:4-1612:73: `err = removeAll(pathJoin(shuffledDisks[11].String(), bucket, object))`
$DIR/cmd/erasure-healing_test.go:1612:46-1612:55: `.String()`
$DIR/cmd/erasure-healing_test.go:1616:4-1618:6: `_, err = obj.HealObject(ctx, bucket, object, "", madmin.HealOpts{
				ScanMode: madmin.HealNormalScan,
			})`
$DIR/cmd/erasure-healing_test.go:1616:16-1618:6: `.HealObject(ctx, bucket, object, "", madmin.HealOpts{
				ScanMode: madmin.HealNormalScan,
			})`
$DIR/cmd/erasure-healing_test.go:1623:23-1623:94: `.GetObjectNInfo(ctx, bucket, object, nil, nil, noLock, ObjectOptions{})`
$DIR/cmd/erasure-healing_test.go:1629:26-1629:32: `.New()`
$DIR/cmd/erasure-healing_test.go:1630:4-1630:43: `_, err = io.Copy(firstHealedH, firstGr)`
$DIR/cmd/erasure-healing_test.go:1630:15-1630:43: `.Copy(firstHealedH, firstGr)`
$DIR/cmd/erasure-healing_test.go:1634:41-1634:50: `.Sum(nil)`
$DIR/cmd/erasure-healing_test.go:1636:13-1636:56: `.Equal(actualSha256, firstHealedDataSha256)`
$DIR/cmd/erasure-healing_test.go:1642:48-1642:57: `.String()`
$DIR/cmd/erasure-healing_test.go:1646:4-1648:6: `_, err = obj.HealObject(ctx, bucket, object, "", madmin.HealOpts{
				ScanMode: madmin.HealNormalScan,
			})`
$DIR/cmd/erasure-healing_test.go:1646:16-1648:6: `.HealObject(ctx, bucket, object, "", madmin.HealOpts{
				ScanMode: madmin.HealNormalScan,
			})`
$DIR/cmd/erasure-healing_test.go:1653:24-1653:95: `.GetObjectNInfo(ctx, bucket, object, nil, nil, noLock, ObjectOptions{})`
$DIR/cmd/erasure-healing_test.go:1659:27-1659:33: `.New()`
$DIR/cmd/erasure-healing_test.go:1660:4-1660:45: `_, err = io.Copy(secondHealedH, secondGr)`
$DIR/cmd/erasure-healing_test.go:1660:15-1660:45: `.Copy(secondHealedH, secondGr)`
$DIR/cmd/erasure-healing_test.go:1664:43-1664:52: `.Sum(nil)`
$DIR/cmd/erasure-healing_test.go:1666:13-1666:57: `.Equal(actualSha256, secondHealedDataSha256)`
$DIR/cmd/erasure-metadata-utils_test.go:59:3-59:87: `canceledErrs = append(canceledErrs, fmt.Errorf("error %d: %w", i, context.Canceled))`
$DIR/cmd/erasure-metadata-utils_test.go:102:41-102:54: `.Background()`
$DIR/cmd/erasure-metadata-utils_test.go:106:45-106:58: `.Background()`
$DIR/cmd/erasure-metadata-utils_test.go:135:14-135:59: `.DeepEqual(testCase.hashedOrder, hashedOrder)`
$DIR/cmd/erasure-metadata-utils_test.go:151:24-151:57: `.WithCancel(context.Background())`
$DIR/cmd/erasure-metadata-utils_test.go:151:43-151:56: `.Background()`
$DIR/cmd/erasure-metadata-utils_test.go:161:3-161:21: `removeRoots(disks)`
$DIR/cmd/erasure-metadata-utils_test.go:199:24-199:57: `.WithCancel(context.Background())`
$DIR/cmd/erasure-metadata-utils_test.go:199:43-199:56: `.Background()`
$DIR/cmd/erasure-metadata-utils_test.go:209:3-209:21: `removeRoots(disks)`
$DIR/cmd/erasure-metadata-utils_test.go:219:3-232:5: `t.Run(fmt.Sprintf("%d", x), func(t *testing.T) {
			var first [17]int
			rng := rand.New(rand.NewSource(0))
			var tmp [16]byte
			rng.Read(tmp[:])
			prefix := hex.EncodeToString(tmp[:])
			for i := 0; i < 10000; i++ {
				rng.Read(tmp[:])

				y := hashOrder(fmt.Sprintf("%s/%x", prefix, hex.EncodeToString(tmp[:3])), x)
				first[y[0]]++
			}
			t.Log("first:", first[:x])
		})`
$DIR/cmd/erasure-metadata-utils_test.go:219:4-232:5: `.Run(fmt.Sprintf("%d", x), func(t *testing.T) {
			var first [17]int
			rng := rand.New(rand.NewSource(0))
			var tmp [16]byte
			rng.Read(tmp[:])
			prefix := hex.EncodeToString(tmp[:])
			for i := 0; i < 10000; i++ {
				rng.Read(tmp[:])

				y := hashOrder(fmt.Sprintf("%s/%x", prefix, hex.EncodeToString(tmp[:3])), x)
				first[y[0]]++
			}
			t.Log("first:", first[:x])
		})`
$DIR/cmd/erasure-metadata-utils_test.go:219:12-219:29: `.Sprintf("%d", x)`
$DIR/cmd/erasure-metadata-utils_test.go:221:15-221:38: `.New(rand.NewSource(0))`
$DIR/cmd/erasure-metadata-utils_test.go:221:24-221:37: `.NewSource(0)`
$DIR/cmd/erasure-metadata-utils_test.go:223:4-223:20: `rng.Read(tmp[:])`
$DIR/cmd/erasure-metadata-utils_test.go:223:7-223:20: `.Read(tmp[:])`
$DIR/cmd/erasure-metadata-utils_test.go:224:17-224:40: `.EncodeToString(tmp[:])`
$DIR/cmd/erasure-metadata-utils_test.go:226:5-226:21: `rng.Read(tmp[:])`
$DIR/cmd/erasure-metadata-utils_test.go:226:8-226:21: `.Read(tmp[:])`
$DIR/cmd/erasure-metadata-utils_test.go:228:23-228:77: `.Sprintf("%s/%x", prefix, hex.EncodeToString(tmp[:3]))`
$DIR/cmd/erasure-metadata-utils_test.go:228:52-228:76: `.EncodeToString(tmp[:3])`
$DIR/cmd/erasure-metadata-utils_test.go:229:5-229:18: `first[y[0]]++`
$DIR/cmd/erasure-metadata_test.go:52:2-52:22: `fi.Erasure.Index = 1`
$DIR/cmd/erasure-metadata_test.go:53:8-53:18: `.IsValid()`
$DIR/cmd/erasure-metadata_test.go:60:28-60:51: `.Itoa(testCase.partNum)`
$DIR/cmd/erasure-metadata_test.go:61:4-61:134: `fi.AddObjectPart(testCase.partNum, "etag."+partNumString, int64(testCase.partNum+humanize.MiByte), ActualSize, UTCNow(), nil, nil)`
$DIR/cmd/erasure-metadata_test.go:61:6-61:134: `.AddObjectPart(testCase.partNum, "etag."+partNumString, int64(testCase.partNum+humanize.MiByte), ActualSize, UTCNow(), nil, nil)`
$DIR/cmd/erasure-metadata_test.go:86:2-86:22: `fi.Erasure.Index = 1`
$DIR/cmd/erasure-metadata_test.go:87:8-87:18: `.IsValid()`
$DIR/cmd/erasure-metadata_test.go:93:27-93:50: `.Itoa(testCase.partNum)`
$DIR/cmd/erasure-metadata_test.go:94:3-94:133: `fi.AddObjectPart(testCase.partNum, "etag."+partNumString, int64(testCase.partNum+humanize.MiByte), ActualSize, UTCNow(), nil, nil)`
$DIR/cmd/erasure-metadata_test.go:94:5-94:133: `.AddObjectPart(testCase.partNum, "etag."+partNumString, int64(testCase.partNum+humanize.MiByte), ActualSize, UTCNow(), nil, nil)`
$DIR/cmd/erasure-metadata_test.go:98:2-101:11: `testCases = append(testCases, struct {
		partNum       int
		expectedIndex int
	}{6, -1})`
$DIR/cmd/erasure-metadata_test.go:115:2-115:22: `fi.Erasure.Index = 1`
$DIR/cmd/erasure-metadata_test.go:116:8-116:18: `.IsValid()`
$DIR/cmd/erasure-metadata_test.go:123:27-123:41: `.Itoa(partNum)`
$DIR/cmd/erasure-metadata_test.go:124:3-124:115: `fi.AddObjectPart(partNum, "etag."+partNumString, int64(partNum+humanize.MiByte), ActualSize, UTCNow(), nil, nil)`
$DIR/cmd/erasure-metadata_test.go:124:5-124:115: `.AddObjectPart(partNum, "etag."+partNumString, int64(partNum+humanize.MiByte), ActualSize, UTCNow(), nil, nil)`
$DIR/cmd/erasure-metadata_test.go:147:27-147:85: `.ObjectToPartOffset(context.Background(), testCase.offset)`
$DIR/cmd/erasure-metadata_test.go:147:54-147:67: `.Background()`
$DIR/cmd/erasure-metadata_test.go:163:3-163:60: `fi.AddObjectPart(1, "etag", 100, 100, UTCNow(), nil, nil)`
$DIR/cmd/erasure-metadata_test.go:163:5-163:60: `.AddObjectPart(1, "etag", 100, 100, UTCNow(), nil, nil)`
$DIR/cmd/erasure-metadata_test.go:164:3-164:31: `fi.ModTime = time.Unix(t, 0)`
$DIR/cmd/erasure-metadata_test.go:164:20-164:31: `.Unix(t, 0)`
$DIR/cmd/erasure-metadata_test.go:165:3-165:23: `fi.DataDir = dataDir`
$DIR/cmd/erasure-metadata_test.go:168:4-168:15: `fis[i] = fi`
$DIR/cmd/erasure-metadata_test.go:169:4-169:32: `fis[i].Erasure.Index = i + 1`
$DIR/cmd/erasure-metadata_test.go:170:4-170:12: `quorum--`
$DIR/cmd/erasure-metadata_test.go:186:24-186:44: `.Unix(1603863445, 0)`
$DIR/cmd/erasure-metadata_test.go:192:24-192:44: `.Unix(1603863445, 0)`
$DIR/cmd/erasure-metadata_test.go:198:24-198:44: `.Unix(1603863445, 0)`
$DIR/cmd/erasure-metadata_test.go:206:3-211:5: `t.Run("", func(t *testing.T) {
			_, err := findFileInfoInQuorum(context.Background(), test.fis, test.modTime, test.expectedQuorum)
			if err != test.expectedErr {
				t.Errorf("Expected %s, got %s", test.expectedErr, err)
			}
		})`
$DIR/cmd/erasure-metadata_test.go:206:4-211:5: `.Run("", func(t *testing.T) {
			_, err := findFileInfoInQuorum(context.Background(), test.fis, test.modTime, test.expectedQuorum)
			if err != test.expectedErr {
				t.Errorf("Expected %s, got %s", test.expectedErr, err)
			}
		})`
$DIR/cmd/erasure-metadata_test.go:207:42-207:55: `.Background()`
$DIR/cmd/erasure-metadata_test.go:246:4-246:39: `ofi.TransitionTier = inputs[1].tier`
$DIR/cmd/erasure-metadata_test.go:249:4-249:53: `ofi.TransitionedObjName = inputs[1].remoteObjName`
$DIR/cmd/erasure-metadata_test.go:252:4-252:55: `ofi.TransitionVersionID = inputs[1].remoteVersionID`
$DIR/cmd/erasure-metadata_test.go:254:15-254:41: `.TransitionInfoEquals(ofi)`
$DIR/cmd/erasure-metadata_test.go:269:7-269:33: `.TransitionInfoEquals(ofi)`
$DIR/cmd/erasure-object_test.go:39:24-39:57: `.WithCancel(context.Background())`
$DIR/cmd/erasure-object_test.go:39:43-39:56: `.Background()`
$DIR/cmd/erasure-object_test.go:47:2-47:46: `objLayer, disks, err = prepareErasure16(ctx)`
$DIR/cmd/erasure-object_test.go:53:16-53:47: `.Shutdown(context.Background())`
$DIR/cmd/erasure-object_test.go:53:33-53:46: `.Background()`
$DIR/cmd/erasure-object_test.go:56:2-56:64: `err = objLayer.MakeBucket(ctx, "bucket1", MakeBucketOptions{})`
$DIR/cmd/erasure-object_test.go:56:16-56:64: `.MakeBucket(ctx, "bucket1", MakeBucketOptions{})`
$DIR/cmd/erasure-object_test.go:61:22-61:76: `.NewMultipartUpload(ctx, "bucket1", "mpartObj1", opts)`
$DIR/cmd/erasure-object_test.go:65:22-65:61: `.Repeat([]byte("a"), 5*humanize.MiByte)`
$DIR/cmd/erasure-object_test.go:67:2-67:170: `_, err = objLayer.PutObjectPart(ctx, "bucket1", "mpartObj1", res.UploadID, 1, mustGetPutObjReader(t, bytes.NewReader(fiveMBBytes), 5*humanize.MiByte, md5Hex, ""), opts)`
$DIR/cmd/erasure-object_test.go:67:19-67:170: `.PutObjectPart(ctx, "bucket1", "mpartObj1", res.UploadID, 1, mustGetPutObjReader(t, bytes.NewReader(fiveMBBytes), 5*humanize.MiByte, md5Hex, ""), opts)`
$DIR/cmd/erasure-object_test.go:67:108-67:131: `.NewReader(fiveMBBytes)`
$DIR/cmd/erasure-object_test.go:72:2-72:170: `_, err = objLayer.PutObjectPart(ctx, "bucket1", "mpartObj1", res.UploadID, 1, mustGetPutObjReader(t, bytes.NewReader(fiveMBBytes), 5*humanize.MiByte, md5Hex, ""), opts)`
$DIR/cmd/erasure-object_test.go:72:19-72:170: `.PutObjectPart(ctx, "bucket1", "mpartObj1", res.UploadID, 1, mustGetPutObjReader(t, bytes.NewReader(fiveMBBytes), 5*humanize.MiByte, md5Hex, ""), opts)`
$DIR/cmd/erasure-object_test.go:72:108-72:131: `.NewReader(fiveMBBytes)`
$DIR/cmd/erasure-object_test.go:94:24-94:57: `.WithCancel(context.Background())`
$DIR/cmd/erasure-object_test.go:94:43-94:56: `.Background()`
$DIR/cmd/erasure-object_test.go:102:10-102:41: `.Shutdown(context.Background())`
$DIR/cmd/erasure-object_test.go:102:27-102:40: `.Background()`
$DIR/cmd/erasure-object_test.go:104:2-104:57: `err = xl.MakeBucket(ctx, "bucket", MakeBucketOptions{})`
$DIR/cmd/erasure-object_test.go:104:10-104:57: `.MakeBucket(ctx, "bucket", MakeBucketOptions{})`
$DIR/cmd/erasure-object_test.go:110:2-110:151: `_, err = xl.PutObject(ctx, "bucket", "dir/obj", mustGetPutObjReader(t, bytes.NewReader([]byte("abcd")), int64(len("abcd")), "", ""), ObjectOptions{})`
$DIR/cmd/erasure-object_test.go:110:13-110:151: `.PutObject(ctx, "bucket", "dir/obj", mustGetPutObjReader(t, bytes.NewReader([]byte("abcd")), int64(len("abcd")), "", ""), ObjectOptions{})`
$DIR/cmd/erasure-object_test.go:110:78-110:104: `.NewReader([]byte("abcd"))`
$DIR/cmd/erasure-object_test.go:116:3-128:5: `t.Run("", func(t *testing.T) {
			_, err := xl.GetObjectInfo(ctx, "bucket", "dir/obj", ObjectOptions{})
			if err != nil {
				t.Fatal("dir/obj not found before last test")
			}
			_, actualErr := xl.DeleteObject(ctx, test.bucket, test.object, ObjectOptions{})
			if test.expectedErr != nil && actualErr != test.expectedErr {
				t.Errorf("Expected to fail with %s, but failed with %s", test.expectedErr, actualErr)
			}
			if test.expectedErr == nil && actualErr != nil {
				t.Errorf("Expected to pass, but failed with %s", actualErr)
			}
		})`
$DIR/cmd/erasure-object_test.go:116:4-128:5: `.Run("", func(t *testing.T) {
			_, err := xl.GetObjectInfo(ctx, "bucket", "dir/obj", ObjectOptions{})
			if err != nil {
				t.Fatal("dir/obj not found before last test")
			}
			_, actualErr := xl.DeleteObject(ctx, test.bucket, test.object, ObjectOptions{})
			if test.expectedErr != nil && actualErr != test.expectedErr {
				t.Errorf("Expected to fail with %s, but failed with %s", test.expectedErr, actualErr)
			}
			if test.expectedErr == nil && actualErr != nil {
				t.Errorf("Expected to pass, but failed with %s", actualErr)
			}
		})`
$DIR/cmd/erasure-object_test.go:117:16-117:73: `.GetObjectInfo(ctx, "bucket", "dir/obj", ObjectOptions{})`
$DIR/cmd/erasure-object_test.go:121:22-121:83: `.DeleteObject(ctx, test.bucket, test.object, ObjectOptions{})`
$DIR/cmd/erasure-object_test.go:135:24-135:57: `.WithCancel(context.Background())`
$DIR/cmd/erasure-object_test.go:135:43-135:56: `.Background()`
$DIR/cmd/erasure-object_test.go:144:11-144:26: `.RemoveAll(dir)`
$DIR/cmd/erasure-object_test.go:147:2-150:3: `type testCaseType struct {
		bucket string
		object string
	}`
$DIR/cmd/erasure-object_test.go:158:2-160:4: `err = obj.MakeBucket(ctx, bucketName, MakeBucketOptions{
		VersioningEnabled: true,
	})`
$DIR/cmd/erasure-object_test.go:158:11-160:4: `.MakeBucket(ctx, bucketName, MakeBucketOptions{
		VersioningEnabled: true,
	})`
$DIR/cmd/erasure-object_test.go:167:22-170:6: `.PutObject(ctx, testCase.bucket, testCase.object,
			mustGetPutObjReader(t, bytes.NewReader([]byte("abcd")), int64(len("abcd")), "", ""), ObjectOptions{
				Versioned: true,
			})`
$DIR/cmd/erasure-object_test.go:168:32-168:58: `.NewReader([]byte("abcd"))`
$DIR/cmd/erasure-object_test.go:174:3-179:4: `names[i] = ObjectToDelete{
			ObjectV: ObjectV{
				ObjectName: objInfo.Name,
				VersionID:  objInfo.VersionID,
			},
		}`
$DIR/cmd/erasure-object_test.go:182:2-187:4: `names = append(names, ObjectToDelete{
		ObjectV: ObjectV{
			ObjectName: "dir/obj1",
			VersionID:  mustGetUUID(), // add a non-existent UUID.
		},
	})`
$DIR/cmd/erasure-object_test.go:189:19-191:4: `.DeleteObjects(ctx, bucketName, names, ObjectOptions{
		Versioned: true,
	})`
$DIR/cmd/erasure-object_test.go:199:20-201:5: `.GetObjectInfo(ctx, test.bucket, test.object, ObjectOptions{
			VersionID: names[i].ObjectV.VersionID,
		})`
$DIR/cmd/erasure-object_test.go:209:16-209:81: `.ReadFile(pathJoin(fsDirs[0], bucketName, "dir/obj1", "xl.meta"))`
$DIR/cmd/erasure-object_test.go:215:24-215:57: `.WithCancel(context.Background())`
$DIR/cmd/erasure-object_test.go:215:43-215:56: `.Background()`
$DIR/cmd/erasure-object_test.go:223:2-223:21: `setObjectLayer(obj)`
$DIR/cmd/erasure-object_test.go:224:2-224:31: `initConfigSubsystem(ctx, obj)`
$DIR/cmd/erasure-object_test.go:228:11-228:26: `.RemoveAll(dir)`
$DIR/cmd/erasure-object_test.go:231:2-234:3: `type testCaseType struct {
		bucket string
		object string
	}`
$DIR/cmd/erasure-object_test.go:244:14-244:63: `.MakeBucket(ctx, bucketName, MakeBucketOptions{})`
$DIR/cmd/erasure-object_test.go:249:3-250:105: `_, err = obj.PutObject(ctx, testCase.bucket, testCase.object,
			mustGetPutObjReader(t, bytes.NewReader([]byte("abcd")), int64(len("abcd")), "", ""), ObjectOptions{})`
$DIR/cmd/erasure-object_test.go:249:15-250:105: `.PutObject(ctx, testCase.bucket, testCase.object,
			mustGetPutObjReader(t, bytes.NewReader([]byte("abcd")), int64(len("abcd")), "", ""), ObjectOptions{})`
$DIR/cmd/erasure-object_test.go:250:32-250:58: `.NewReader([]byte("abcd"))`
$DIR/cmd/erasure-object_test.go:259:4-263:5: `names[i] = ObjectToDelete{
				ObjectV: ObjectV{
					ObjectName: testCases[i].object,
				},
			}`
$DIR/cmd/erasure-object_test.go:269:19-269:80: `.DeleteObjects(ctx, bucketName, objectNames, ObjectOptions{})`
$DIR/cmd/erasure-object_test.go:278:20-278:82: `.GetObjectInfo(ctx, test.bucket, test.object, ObjectOptions{})`
$DIR/cmd/erasure-object_test.go:288:24-288:57: `.WithCancel(context.Background())`
$DIR/cmd/erasure-object_test.go:288:43-288:56: `.Background()`
$DIR/cmd/erasure-object_test.go:297:11-297:42: `.Shutdown(context.Background())`
$DIR/cmd/erasure-object_test.go:297:28-297:41: `.Background()`
$DIR/cmd/erasure-object_test.go:304:2-304:58: `err = obj.MakeBucket(ctx, "bucket", MakeBucketOptions{})`
$DIR/cmd/erasure-object_test.go:304:11-304:58: `.MakeBucket(ctx, "bucket", MakeBucketOptions{})`
$DIR/cmd/erasure-object_test.go:313:2-313:136: `_, err = obj.PutObject(ctx, bucket, object, mustGetPutObjReader(t, bytes.NewReader([]byte("abcd")), int64(len("abcd")), "", ""), opts)`
$DIR/cmd/erasure-object_test.go:313:14-313:136: `.PutObject(ctx, bucket, object, mustGetPutObjReader(t, bytes.NewReader([]byte("abcd")), int64(len("abcd")), "", ""), opts)`
$DIR/cmd/erasure-object_test.go:313:74-313:100: `.NewReader([]byte("abcd"))`
$DIR/cmd/erasure-object_test.go:318:20-318:31: `.getDisks()`
$DIR/cmd/erasure-object_test.go:319:2-319:40: `z.serverPools[0].erasureDisksMu.Lock()`
$DIR/cmd/erasure-object_test.go:319:18-319:40: `.erasureDisksMu.Lock()`
$DIR/cmd/erasure-object_test.go:322:4-322:73: `erasureDisks[i] = newNaughtyDisk(erasureDisks[i], nil, errFaultyDisk)`
$DIR/cmd/erasure-object_test.go:327:2-327:42: `z.serverPools[0].erasureDisksMu.Unlock()`
$DIR/cmd/erasure-object_test.go:327:18-327:42: `.erasureDisksMu.Unlock()`
$DIR/cmd/erasure-object_test.go:328:2-328:65: `_, err = obj.DeleteObject(ctx, bucket, object, ObjectOptions{})`
$DIR/cmd/erasure-object_test.go:328:14-328:65: `.DeleteObject(ctx, bucket, object, ObjectOptions{})`
$DIR/cmd/erasure-object_test.go:329:12-329:43: `.Is(err, errErasureWriteQuorum)`
$DIR/cmd/erasure-object_test.go:334:2-334:136: `_, err = obj.PutObject(ctx, bucket, object, mustGetPutObjReader(t, bytes.NewReader([]byte("abcd")), int64(len("abcd")), "", ""), opts)`
$DIR/cmd/erasure-object_test.go:334:14-334:136: `.PutObject(ctx, bucket, object, mustGetPutObjReader(t, bytes.NewReader([]byte("abcd")), int64(len("abcd")), "", ""), opts)`
$DIR/cmd/erasure-object_test.go:334:74-334:100: `.NewReader([]byte("abcd"))`
$DIR/cmd/erasure-object_test.go:340:2-340:30: `erasureDisks = xl.getDisks()`
$DIR/cmd/erasure-object_test.go:340:19-340:30: `.getDisks()`
$DIR/cmd/erasure-object_test.go:341:2-341:40: `z.serverPools[0].erasureDisksMu.Lock()`
$DIR/cmd/erasure-object_test.go:341:18-341:40: `.erasureDisksMu.Lock()`
$DIR/cmd/erasure-object_test.go:343:3-343:24: `erasureDisks[7] = nil`
$DIR/cmd/erasure-object_test.go:344:3-344:24: `erasureDisks[8] = nil`
$DIR/cmd/erasure-object_test.go:348:2-348:42: `z.serverPools[0].erasureDisksMu.Unlock()`
$DIR/cmd/erasure-object_test.go:348:18-348:42: `.erasureDisksMu.Unlock()`
$DIR/cmd/erasure-object_test.go:349:2-349:65: `_, err = obj.DeleteObject(ctx, bucket, object, ObjectOptions{})`
$DIR/cmd/erasure-object_test.go:349:14-349:65: `.DeleteObject(ctx, bucket, object, ObjectOptions{})`
$DIR/cmd/erasure-object_test.go:351:12-351:43: `.Is(err, errErasureWriteQuorum)`
$DIR/cmd/erasure-object_test.go:357:24-357:57: `.WithCancel(context.Background())`
$DIR/cmd/erasure-object_test.go:357:43-357:56: `.Background()`
$DIR/cmd/erasure-object_test.go:366:11-366:42: `.Shutdown(context.Background())`
$DIR/cmd/erasure-object_test.go:366:28-366:41: `.Background()`
$DIR/cmd/erasure-object_test.go:373:2-373:58: `err = obj.MakeBucket(ctx, "bucket", MakeBucketOptions{})`
$DIR/cmd/erasure-object_test.go:373:11-373:58: `.MakeBucket(ctx, "bucket", MakeBucketOptions{})`
$DIR/cmd/erasure-object_test.go:382:2-382:136: `_, err = obj.PutObject(ctx, bucket, object, mustGetPutObjReader(t, bytes.NewReader([]byte("abcd")), int64(len("abcd")), "", ""), opts)`
$DIR/cmd/erasure-object_test.go:382:14-382:136: `.PutObject(ctx, bucket, object, mustGetPutObjReader(t, bytes.NewReader([]byte("abcd")), int64(len("abcd")), "", ""), opts)`
$DIR/cmd/erasure-object_test.go:382:74-382:100: `.NewReader([]byte("abcd"))`
$DIR/cmd/erasure-object_test.go:387:2-387:65: `_, err = obj.DeleteObject(ctx, bucket, object, ObjectOptions{})`
$DIR/cmd/erasure-object_test.go:387:14-387:65: `.DeleteObject(ctx, bucket, object, ObjectOptions{})`
$DIR/cmd/erasure-object_test.go:393:2-393:136: `_, err = obj.PutObject(ctx, bucket, object, mustGetPutObjReader(t, bytes.NewReader([]byte("abcd")), int64(len("abcd")), "", ""), opts)`
$DIR/cmd/erasure-object_test.go:393:14-393:136: `.PutObject(ctx, bucket, object, mustGetPutObjReader(t, bytes.NewReader([]byte("abcd")), int64(len("abcd")), "", ""), opts)`
$DIR/cmd/erasure-object_test.go:393:74-393:100: `.NewReader([]byte("abcd"))`
$DIR/cmd/erasure-object_test.go:399:20-399:31: `.getDisks()`
$DIR/cmd/erasure-object_test.go:400:2-400:40: `z.serverPools[0].erasureDisksMu.Lock()`
$DIR/cmd/erasure-object_test.go:400:18-400:40: `.erasureDisksMu.Lock()`
$DIR/cmd/erasure-object_test.go:403:4-403:73: `erasureDisks[i] = newNaughtyDisk(erasureDisks[i], nil, errFaultyDisk)`
$DIR/cmd/erasure-object_test.go:408:2-408:42: `z.serverPools[0].erasureDisksMu.Unlock()`
$DIR/cmd/erasure-object_test.go:408:18-408:42: `.erasureDisksMu.Unlock()`
$DIR/cmd/erasure-object_test.go:409:2-409:65: `_, err = obj.DeleteObject(ctx, bucket, object, ObjectOptions{})`
$DIR/cmd/erasure-object_test.go:409:14-409:65: `.DeleteObject(ctx, bucket, object, ObjectOptions{})`
$DIR/cmd/erasure-object_test.go:411:12-411:43: `.Is(err, errErasureWriteQuorum)`
$DIR/cmd/erasure-object_test.go:417:24-417:57: `.WithCancel(context.Background())`
$DIR/cmd/erasure-object_test.go:417:43-417:56: `.Background()`
$DIR/cmd/erasure-object_test.go:426:11-426:42: `.Shutdown(context.Background())`
$DIR/cmd/erasure-object_test.go:426:28-426:41: `.Background()`
$DIR/cmd/erasure-object_test.go:433:2-433:58: `err = obj.MakeBucket(ctx, "bucket", MakeBucketOptions{})`
$DIR/cmd/erasure-object_test.go:433:11-433:58: `.MakeBucket(ctx, "bucket", MakeBucketOptions{})`
$DIR/cmd/erasure-object_test.go:442:2-442:136: `_, err = obj.PutObject(ctx, bucket, object, mustGetPutObjReader(t, bytes.NewReader([]byte("abcd")), int64(len("abcd")), "", ""), opts)`
$DIR/cmd/erasure-object_test.go:442:14-442:136: `.PutObject(ctx, bucket, object, mustGetPutObjReader(t, bytes.NewReader([]byte("abcd")), int64(len("abcd")), "", ""), opts)`
$DIR/cmd/erasure-object_test.go:442:74-442:100: `.NewReader([]byte("abcd"))`
$DIR/cmd/erasure-object_test.go:448:20-448:31: `.getDisks()`
$DIR/cmd/erasure-object_test.go:449:2-449:40: `z.serverPools[0].erasureDisksMu.Lock()`
$DIR/cmd/erasure-object_test.go:449:18-449:40: `.erasureDisksMu.Lock()`
$DIR/cmd/erasure-object_test.go:452:4-452:73: `erasureDisks[i] = newNaughtyDisk(erasureDisks[i], nil, errFaultyDisk)`
$DIR/cmd/erasure-object_test.go:457:2-457:42: `z.serverPools[0].erasureDisksMu.Unlock()`
$DIR/cmd/erasure-object_test.go:457:18-457:42: `.erasureDisksMu.Unlock()`
$DIR/cmd/erasure-object_test.go:458:2-458:65: `_, err = obj.DeleteObject(ctx, bucket, object, ObjectOptions{})`
$DIR/cmd/erasure-object_test.go:458:14-458:65: `.DeleteObject(ctx, bucket, object, ObjectOptions{})`
$DIR/cmd/erasure-object_test.go:464:2-464:136: `_, err = obj.PutObject(ctx, bucket, object, mustGetPutObjReader(t, bytes.NewReader([]byte("abcd")), int64(len("abcd")), "", ""), opts)`
$DIR/cmd/erasure-object_test.go:464:14-464:136: `.PutObject(ctx, bucket, object, mustGetPutObjReader(t, bytes.NewReader([]byte("abcd")), int64(len("abcd")), "", ""), opts)`
$DIR/cmd/erasure-object_test.go:464:74-464:100: `.NewReader([]byte("abcd"))`
$DIR/cmd/erasure-object_test.go:470:2-470:30: `erasureDisks = xl.getDisks()`
$DIR/cmd/erasure-object_test.go:470:19-470:30: `.getDisks()`
$DIR/cmd/erasure-object_test.go:471:2-471:40: `z.serverPools[0].erasureDisksMu.Lock()`
$DIR/cmd/erasure-object_test.go:471:18-471:40: `.erasureDisksMu.Lock()`
$DIR/cmd/erasure-object_test.go:473:3-473:24: `erasureDisks[7] = nil`
$DIR/cmd/erasure-object_test.go:474:3-474:24: `erasureDisks[8] = nil`
$DIR/cmd/erasure-object_test.go:475:3-475:24: `erasureDisks[9] = nil`
$DIR/cmd/erasure-object_test.go:479:2-479:42: `z.serverPools[0].erasureDisksMu.Unlock()`
$DIR/cmd/erasure-object_test.go:479:18-479:42: `.erasureDisksMu.Unlock()`
$DIR/cmd/erasure-object_test.go:480:2-480:65: `_, err = obj.DeleteObject(ctx, bucket, object, ObjectOptions{})`
$DIR/cmd/erasure-object_test.go:480:14-480:65: `.DeleteObject(ctx, bucket, object, ObjectOptions{})`
$DIR/cmd/erasure-object_test.go:488:24-488:57: `.WithCancel(context.Background())`
$DIR/cmd/erasure-object_test.go:488:43-488:56: `.Background()`
$DIR/cmd/erasure-object_test.go:497:11-497:42: `.Shutdown(context.Background())`
$DIR/cmd/erasure-object_test.go:497:28-497:41: `.Background()`
$DIR/cmd/erasure-object_test.go:504:2-504:58: `err = obj.MakeBucket(ctx, "bucket", MakeBucketOptions{})`
$DIR/cmd/erasure-object_test.go:504:11-504:58: `.MakeBucket(ctx, "bucket", MakeBucketOptions{})`
$DIR/cmd/erasure-object_test.go:513:16-513:44: `.ReadFull(crand.Reader, buf)`
$DIR/cmd/erasure-object_test.go:518:2-518:122: `_, err = obj.PutObject(ctx, bucket, object, mustGetPutObjReader(t, bytes.NewReader(buf), int64(len(buf)), "", ""), opts)`
$DIR/cmd/erasure-object_test.go:518:14-518:122: `.PutObject(ctx, bucket, object, mustGetPutObjReader(t, bytes.NewReader(buf), int64(len(buf)), "", ""), opts)`
$DIR/cmd/erasure-object_test.go:518:74-518:89: `.NewReader(buf)`
$DIR/cmd/erasure-object_test.go:523:25-523:36: `.getDisks()`
$DIR/cmd/erasure-object_test.go:524:19-524:52: `.ListDir(ctx, bucket, object, -1)`
$DIR/cmd/erasure-object_test.go:527:5-530:7: `disk.Delete(ctx, bucket, pathJoin(object, file), DeleteOptions{
					Recursive: true,
					Force:     false,
				})`
$DIR/cmd/erasure-object_test.go:527:9-530:7: `.Delete(ctx, bucket, pathJoin(object, file), DeleteOptions{
					Recursive: true,
					Force:     false,
				})`
$DIR/cmd/erasure-object_test.go:535:15-535:77: `.GetObjectNInfo(ctx, bucket, object, nil, nil, readLock, opts)`
$DIR/cmd/erasure-object_test.go:542:3-542:35: `_, err = io.Copy(io.Discard, gr)`
$DIR/cmd/erasure-object_test.go:542:14-542:35: `.Copy(io.Discard, gr)`
$DIR/cmd/erasure-object_test.go:555:2-555:122: `_, err = obj.PutObject(ctx, bucket, object, mustGetPutObjReader(t, bytes.NewReader(buf), int64(len(buf)), "", ""), opts)`
$DIR/cmd/erasure-object_test.go:555:14-555:122: `.PutObject(ctx, bucket, object, mustGetPutObjReader(t, bytes.NewReader(buf), int64(len(buf)), "", ""), opts)`
$DIR/cmd/erasure-object_test.go:555:74-555:89: `.NewReader(buf)`
$DIR/cmd/erasure-object_test.go:563:4-563:23: `diskErrors[i] = nil`
$DIR/cmd/erasure-object_test.go:565:21-565:32: `.getDisks()`
$DIR/cmd/erasure-object_test.go:569:5-569:79: `erasureDisks[i] = newNaughtyDisk(diskType.disk, diskErrors, errFaultyDisk)`
$DIR/cmd/erasure-object_test.go:571:5-571:81: `erasureDisks[i] = newNaughtyDisk(erasureDisks[i], diskErrors, errFaultyDisk)`
$DIR/cmd/erasure-object_test.go:574:3-574:41: `z.serverPools[0].erasureDisksMu.Lock()`
$DIR/cmd/erasure-object_test.go:574:19-574:41: `.erasureDisksMu.Lock()`
$DIR/cmd/erasure-object_test.go:578:3-578:43: `z.serverPools[0].erasureDisksMu.Unlock()`
$DIR/cmd/erasure-object_test.go:578:19-578:43: `.erasureDisksMu.Unlock()`
$DIR/cmd/erasure-object_test.go:580:16-580:78: `.GetObjectNInfo(ctx, bucket, object, nil, nil, readLock, opts)`
$DIR/cmd/erasure-object_test.go:587:4-587:36: `_, err = io.Copy(io.Discard, gr)`
$DIR/cmd/erasure-object_test.go:587:15-587:36: `.Copy(io.Discard, gr)`
$DIR/cmd/erasure-object_test.go:597:24-597:57: `.WithCancel(context.Background())`
$DIR/cmd/erasure-object_test.go:597:43-597:56: `.Background()`
$DIR/cmd/erasure-object_test.go:606:11-606:42: `.Shutdown(context.Background())`
$DIR/cmd/erasure-object_test.go:606:28-606:41: `.Background()`
$DIR/cmd/erasure-object_test.go:613:2-613:58: `err = obj.MakeBucket(ctx, "bucket", MakeBucketOptions{})`
$DIR/cmd/erasure-object_test.go:613:11-613:58: `.MakeBucket(ctx, "bucket", MakeBucketOptions{})`
$DIR/cmd/erasure-object_test.go:623:2-623:136: `_, err = obj.PutObject(ctx, bucket, object, mustGetPutObjReader(t, bytes.NewReader([]byte("abcd")), int64(len("abcd")), "", ""), opts)`
$DIR/cmd/erasure-object_test.go:623:14-623:136: `.PutObject(ctx, bucket, object, mustGetPutObjReader(t, bytes.NewReader([]byte("abcd")), int64(len("abcd")), "", ""), opts)`
$DIR/cmd/erasure-object_test.go:623:74-623:100: `.NewReader([]byte("abcd"))`
$DIR/cmd/erasure-object_test.go:627:25-627:36: `.getDisks()`
$DIR/cmd/erasure-object_test.go:628:19-628:52: `.ListDir(ctx, bucket, object, -1)`
$DIR/cmd/erasure-object_test.go:631:5-634:7: `disk.Delete(ctx, bucket, pathJoin(object, file), DeleteOptions{
					Recursive: true,
					Force:     false,
				})`
$DIR/cmd/erasure-object_test.go:631:9-634:7: `.Delete(ctx, bucket, pathJoin(object, file), DeleteOptions{
					Recursive: true,
					Force:     false,
				})`
$DIR/cmd/erasure-object_test.go:639:2-639:54: `_, err = xl.GetObjectInfo(ctx, bucket, object, opts)`
$DIR/cmd/erasure-object_test.go:639:13-639:54: `.GetObjectInfo(ctx, bucket, object, opts)`
$DIR/cmd/erasure-object_test.go:650:2-650:136: `_, err = obj.PutObject(ctx, bucket, object, mustGetPutObjReader(t, bytes.NewReader([]byte("abcd")), int64(len("abcd")), "", ""), opts)`
$DIR/cmd/erasure-object_test.go:650:14-650:136: `.PutObject(ctx, bucket, object, mustGetPutObjReader(t, bytes.NewReader([]byte("abcd")), int64(len("abcd")), "", ""), opts)`
$DIR/cmd/erasure-object_test.go:650:74-650:100: `.NewReader([]byte("abcd"))`
$DIR/cmd/erasure-object_test.go:655:20-655:31: `.getDisks()`
$DIR/cmd/erasure-object_test.go:657:3-657:24: `erasureDisks[i] = nil`
$DIR/cmd/erasure-object_test.go:660:2-660:40: `z.serverPools[0].erasureDisksMu.Lock()`
$DIR/cmd/erasure-object_test.go:660:18-660:40: `.erasureDisksMu.Lock()`
$DIR/cmd/erasure-object_test.go:664:2-664:42: `z.serverPools[0].erasureDisksMu.Unlock()`
$DIR/cmd/erasure-object_test.go:664:18-664:42: `.erasureDisksMu.Unlock()`
$DIR/cmd/erasure-object_test.go:667:2-667:54: `_, err = xl.GetObjectInfo(ctx, bucket, object, opts)`
$DIR/cmd/erasure-object_test.go:667:13-667:54: `.GetObjectInfo(ctx, bucket, object, opts)`
$DIR/cmd/erasure-object_test.go:674:24-674:57: `.WithCancel(context.Background())`
$DIR/cmd/erasure-object_test.go:674:43-674:56: `.Background()`
$DIR/cmd/erasure-object_test.go:684:11-684:42: `.Shutdown(context.Background())`
$DIR/cmd/erasure-object_test.go:684:28-684:41: `.Background()`
$DIR/cmd/erasure-object_test.go:691:2-691:58: `err = obj.MakeBucket(ctx, "bucket", MakeBucketOptions{})`
$DIR/cmd/erasure-object_test.go:691:11-691:58: `.MakeBucket(ctx, "bucket", MakeBucketOptions{})`
$DIR/cmd/erasure-object_test.go:700:2-700:173: `_, err = obj.PutObject(ctx, bucket, object, mustGetPutObjReader(t, bytes.NewReader(bytes.Repeat([]byte{'a'}, smallFileThreshold*16)), smallFileThreshold*16, "", ""), opts)`
$DIR/cmd/erasure-object_test.go:700:14-700:173: `.PutObject(ctx, bucket, object, mustGetPutObjReader(t, bytes.NewReader(bytes.Repeat([]byte{'a'}, smallFileThreshold*16)), smallFileThreshold*16, "", ""), opts)`
$DIR/cmd/erasure-object_test.go:700:74-700:134: `.NewReader(bytes.Repeat([]byte{'a'}, smallFileThreshold*16))`
$DIR/cmd/erasure-object_test.go:700:90-700:133: `.Repeat([]byte{'a'}, smallFileThreshold*16)`
$DIR/cmd/erasure-object_test.go:712:4-712:23: `diskErrors[i] = nil`
$DIR/cmd/erasure-object_test.go:714:21-714:32: `.getDisks()`
$DIR/cmd/erasure-object_test.go:718:5-718:79: `erasureDisks[i] = newNaughtyDisk(diskType.disk, diskErrors, errFaultyDisk)`
$DIR/cmd/erasure-object_test.go:720:5-720:81: `erasureDisks[i] = newNaughtyDisk(erasureDisks[i], diskErrors, errFaultyDisk)`
$DIR/cmd/erasure-object_test.go:723:3-723:41: `z.serverPools[0].erasureDisksMu.Lock()`
$DIR/cmd/erasure-object_test.go:723:19-723:41: `.erasureDisksMu.Lock()`
$DIR/cmd/erasure-object_test.go:727:3-727:43: `z.serverPools[0].erasureDisksMu.Unlock()`
$DIR/cmd/erasure-object_test.go:727:19-727:43: `.erasureDisksMu.Unlock()`
$DIR/cmd/erasure-object_test.go:729:3-729:178: `_, err = obj.PutObject(ctx, bucket, object, mustGetPutObjReader(t, bytes.NewReader(bytes.Repeat([]byte{byte(f)}, smallFileThreshold*16)), smallFileThreshold*16, "", ""), opts)`
$DIR/cmd/erasure-object_test.go:729:15-729:178: `.PutObject(ctx, bucket, object, mustGetPutObjReader(t, bytes.NewReader(bytes.Repeat([]byte{byte(f)}, smallFileThreshold*16)), smallFileThreshold*16, "", ""), opts)`
$DIR/cmd/erasure-object_test.go:729:75-729:139: `.NewReader(bytes.Repeat([]byte{byte(f)}, smallFileThreshold*16))`
$DIR/cmd/erasure-object_test.go:729:91-729:138: `.Repeat([]byte{byte(f)}, smallFileThreshold*16)`
$DIR/cmd/erasure-object_test.go:730:13-730:44: `.Is(err, errErasureWriteQuorum)`
$DIR/cmd/erasure-object_test.go:737:24-737:57: `.WithCancel(context.Background())`
$DIR/cmd/erasure-object_test.go:737:43-737:56: `.Background()`
$DIR/cmd/erasure-object_test.go:747:11-747:42: `.Shutdown(context.Background())`
$DIR/cmd/erasure-object_test.go:747:28-747:41: `.Background()`
$DIR/cmd/erasure-object_test.go:754:2-754:58: `err = obj.MakeBucket(ctx, "bucket", MakeBucketOptions{})`
$DIR/cmd/erasure-object_test.go:754:11-754:58: `.MakeBucket(ctx, "bucket", MakeBucketOptions{})`
$DIR/cmd/erasure-object_test.go:763:2-763:171: `_, err = obj.PutObject(ctx, bucket, object, mustGetPutObjReader(t, bytes.NewReader(bytes.Repeat([]byte{'a'}, smallFileThreshold/2)), smallFileThreshold/2, "", ""), opts)`
$DIR/cmd/erasure-object_test.go:763:14-763:171: `.PutObject(ctx, bucket, object, mustGetPutObjReader(t, bytes.NewReader(bytes.Repeat([]byte{'a'}, smallFileThreshold/2)), smallFileThreshold/2, "", ""), opts)`
$DIR/cmd/erasure-object_test.go:763:74-763:133: `.NewReader(bytes.Repeat([]byte{'a'}, smallFileThreshold/2))`
$DIR/cmd/erasure-object_test.go:763:90-763:132: `.Repeat([]byte{'a'}, smallFileThreshold/2)`
$DIR/cmd/erasure-object_test.go:773:3-797:5: `t.Run("exec-"+strconv.Itoa(f), func(t *testing.T) {
			diskErrors := make(map[int]error)
			for i := 0; i <= f; i++ {
				diskErrors[i] = nil
			}
			erasureDisks := xl.getDisks()
			for i := range erasureDisks[:9] {
				switch diskType := erasureDisks[i].(type) {
				case *naughtyDisk:
					erasureDisks[i] = newNaughtyDisk(diskType.disk, diskErrors, errFaultyDisk)
				default:
					erasureDisks[i] = newNaughtyDisk(erasureDisks[i], diskErrors, errFaultyDisk)
				}
			}
			z.serverPools[0].erasureDisksMu.Lock()
			xl.getDisks = func() []StorageAPI {
				return erasureDisks
			}
			z.serverPools[0].erasureDisksMu.Unlock()
			// Upload new content to same object "object"
			_, err = obj.PutObject(ctx, bucket, object, mustGetPutObjReader(t, bytes.NewReader(bytes.Repeat([]byte{byte(f)}, smallFileThreshold/2)), smallFileThreshold/2, "", ""), opts)
			if !errors.Is(err, errErasureWriteQuorum) {
				t.Errorf("Expected putObject to fail with %v, but failed with %v", toObjectErr(errErasureWriteQuorum, bucket, object), err)
			}
		})`
$DIR/cmd/erasure-object_test.go:773:4-797:5: `.Run("exec-"+strconv.Itoa(f), func(t *testing.T) {
			diskErrors := make(map[int]error)
			for i := 0; i <= f; i++ {
				diskErrors[i] = nil
			}
			erasureDisks := xl.getDisks()
			for i := range erasureDisks[:9] {
				switch diskType := erasureDisks[i].(type) {
				case *naughtyDisk:
					erasureDisks[i] = newNaughtyDisk(diskType.disk, diskErrors, errFaultyDisk)
				default:
					erasureDisks[i] = newNaughtyDisk(erasureDisks[i], diskErrors, errFaultyDisk)
				}
			}
			z.serverPools[0].erasureDisksMu.Lock()
			xl.getDisks = func() []StorageAPI {
				return erasureDisks
			}
			z.serverPools[0].erasureDisksMu.Unlock()
			// Upload new content to same object "object"
			_, err = obj.PutObject(ctx, bucket, object, mustGetPutObjReader(t, bytes.NewReader(bytes.Repeat([]byte{byte(f)}, smallFileThreshold/2)), smallFileThreshold/2, "", ""), opts)
			if !errors.Is(err, errErasureWriteQuorum) {
				t.Errorf("Expected putObject to fail with %v, but failed with %v", toObjectErr(errErasureWriteQuorum, bucket, object), err)
			}
		})`
$DIR/cmd/erasure-object_test.go:773:24-773:32: `.Itoa(f)`
$DIR/cmd/erasure-object_test.go:776:5-776:24: `diskErrors[i] = nil`
$DIR/cmd/erasure-object_test.go:778:22-778:33: `.getDisks()`
$DIR/cmd/erasure-object_test.go:782:6-782:80: `erasureDisks[i] = newNaughtyDisk(diskType.disk, diskErrors, errFaultyDisk)`
$DIR/cmd/erasure-object_test.go:784:6-784:82: `erasureDisks[i] = newNaughtyDisk(erasureDisks[i], diskErrors, errFaultyDisk)`
$DIR/cmd/erasure-object_test.go:787:4-787:42: `z.serverPools[0].erasureDisksMu.Lock()`
$DIR/cmd/erasure-object_test.go:787:20-787:42: `.erasureDisksMu.Lock()`
$DIR/cmd/erasure-object_test.go:791:4-791:44: `z.serverPools[0].erasureDisksMu.Unlock()`
$DIR/cmd/erasure-object_test.go:791:20-791:44: `.erasureDisksMu.Unlock()`
$DIR/cmd/erasure-object_test.go:793:4-793:177: `_, err = obj.PutObject(ctx, bucket, object, mustGetPutObjReader(t, bytes.NewReader(bytes.Repeat([]byte{byte(f)}, smallFileThreshold/2)), smallFileThreshold/2, "", ""), opts)`
$DIR/cmd/erasure-object_test.go:793:16-793:177: `.PutObject(ctx, bucket, object, mustGetPutObjReader(t, bytes.NewReader(bytes.Repeat([]byte{byte(f)}, smallFileThreshold/2)), smallFileThreshold/2, "", ""), opts)`
$DIR/cmd/erasure-object_test.go:793:76-793:139: `.NewReader(bytes.Repeat([]byte{byte(f)}, smallFileThreshold/2))`
$DIR/cmd/erasure-object_test.go:793:92-793:138: `.Repeat([]byte{byte(f)}, smallFileThreshold/2)`
$DIR/cmd/erasure-object_test.go:794:14-794:45: `.Is(err, errErasureWriteQuorum)`
$DIR/cmd/erasure-object_test.go:804:24-804:57: `.WithCancel(context.Background())`
$DIR/cmd/erasure-object_test.go:804:43-804:56: `.Background()`
$DIR/cmd/erasure-object_test.go:807:2-807:25: `const numberOfDisks = 4`
$DIR/cmd/erasure-object_test.go:816:11-816:42: `.Shutdown(context.Background())`
$DIR/cmd/erasure-object_test.go:816:28-816:41: `.Background()`
$DIR/cmd/erasure-object_test.go:823:2-823:56: `err = obj.MakeBucket(ctx, bucket, MakeBucketOptions{})`
$DIR/cmd/erasure-object_test.go:823:11-823:56: `.MakeBucket(ctx, bucket, MakeBucketOptions{})`
$DIR/cmd/erasure-object_test.go:830:2-830:145: `_, err = obj.PutObject(ctx, bucket, object, mustGetPutObjReader(t, bytes.NewReader(smallData), int64(len(smallData)), "", ""), ObjectOptions{})`
$DIR/cmd/erasure-object_test.go:830:14-830:145: `.PutObject(ctx, bucket, object, mustGetPutObjReader(t, bytes.NewReader(smallData), int64(len(smallData)), "", ""), ObjectOptions{})`
$DIR/cmd/erasure-object_test.go:830:74-830:95: `.NewReader(smallData)`
$DIR/cmd/erasure-object_test.go:834:16-834:89: `.GetObjectNInfo(ctx, bucket, object, nil, nil, readLock, ObjectOptions{})`
$DIR/cmd/erasure-object_test.go:838:17-838:37: `.NewBuffer([]byte{})`
$DIR/cmd/erasure-object_test.go:839:2-839:30: `_, err = io.Copy(output, gr)`
$DIR/cmd/erasure-object_test.go:839:13-839:30: `.Copy(output, gr)`
$DIR/cmd/erasure-object_test.go:844:11-844:44: `.Equal(output.Bytes(), smallData)`
$DIR/cmd/erasure-object_test.go:844:24-844:32: `.Bytes()`
$DIR/cmd/erasure-object_test.go:851:2-851:16: `output.Reset()`
$DIR/cmd/erasure-object_test.go:851:8-851:16: `.Reset()`
$DIR/cmd/erasure-object_test.go:852:18-852:74: `.Repeat([]byte{'b'}, smallFileThreshold*numberOfDisks/2)`
$DIR/cmd/erasure-object_test.go:854:2-854:141: `_, err = obj.PutObject(ctx, bucket, object, mustGetPutObjReader(t, bytes.NewReader(bigData), int64(len(bigData)), "", ""), ObjectOptions{})`
$DIR/cmd/erasure-object_test.go:854:14-854:141: `.PutObject(ctx, bucket, object, mustGetPutObjReader(t, bytes.NewReader(bigData), int64(len(bigData)), "", ""), ObjectOptions{})`
$DIR/cmd/erasure-object_test.go:854:74-854:93: `.NewReader(bigData)`
$DIR/cmd/erasure-object_test.go:858:2-858:88: `gr, err = obj.GetObjectNInfo(ctx, bucket, object, nil, nil, readLock, ObjectOptions{})`
$DIR/cmd/erasure-object_test.go:858:15-858:88: `.GetObjectNInfo(ctx, bucket, object, nil, nil, readLock, ObjectOptions{})`
$DIR/cmd/erasure-object_test.go:862:2-862:30: `_, err = io.Copy(output, gr)`
$DIR/cmd/erasure-object_test.go:862:13-862:30: `.Copy(output, gr)`
$DIR/cmd/erasure-object_test.go:867:11-867:42: `.Equal(output.Bytes(), bigData)`
$DIR/cmd/erasure-object_test.go:867:24-867:32: `.Bytes()`
$DIR/cmd/erasure-object_test.go:1066:24-1066:57: `.WithCancel(context.Background())`
$DIR/cmd/erasure-object_test.go:1066:43-1066:56: `.Background()`
$DIR/cmd/erasure-object_test.go:1071:2-1071:20: `const numDisks = 4`
$DIR/cmd/erasure-object_test.go:1072:11-1072:21: `.TempDir()`
$DIR/cmd/erasure-object_test.go:1076:3-1076:73: `fsDirs = append(fsDirs, filepath.Join(path, fmt.Sprintf("disk%d", i)))`
$DIR/cmd/erasure-object_test.go:1076:35-1076:72: `.Join(path, fmt.Sprintf("disk%d", i))`
$DIR/cmd/erasure-object_test.go:1076:50-1076:71: `.Sprintf("disk%d", i)`
$DIR/cmd/erasure-object_test.go:1081:3-1081:22: `removeRoots(fsDirs)`
$DIR/cmd/erasure-object_test.go:1086:16-1086:47: `.Shutdown(context.Background())`
$DIR/cmd/erasure-object_test.go:1086:33-1086:46: `.Background()`
$DIR/cmd/erasure-object_test.go:1090:2-1090:67: `err = objLayer.MakeBucket(ctx, "testbucket", MakeBucketOptions{})`
$DIR/cmd/erasure-object_test.go:1090:16-1090:67: `.MakeBucket(ctx, "testbucket", MakeBucketOptions{})`
$DIR/cmd/erasure-object_test.go:1096:2-1096:67: `err = unzipArchive("testdata/xl-meta-inline-notinline.zip", path)`
$DIR/cmd/erasure-object_test.go:1102:21-1102:100: `.GetObjectNInfo(ctx, "testbucket", "file", nil, nil, readLock, ObjectOptions{})`
$DIR/cmd/erasure-object_test.go:1107:10-1107:16: `.New()`
$DIR/cmd/erasure-object_test.go:1108:2-1108:25: `_, err = io.Copy(h, gr)`
$DIR/cmd/erasure-object_test.go:1108:13-1108:25: `.Copy(h, gr)`
$DIR/cmd/erasure-object_test.go:1114:2-1114:57: `const expectedHash = "fffb6377948ebea75ad2b8058e849ef5"`
$DIR/cmd/erasure-object_test.go:1115:18-1115:44: `.Sprintf("%x", h.Sum(nil))`
$DIR/cmd/erasure-object_test.go:1115:34-1115:43: `.Sum(nil)`
$DIR/cmd/erasure-object_test.go:1124:3-1124:11: `t.Skip()`
$DIR/cmd/erasure-object_test.go:1124:4-1124:11: `.Skip()`
$DIR/cmd/erasure-object_test.go:1127:24-1127:57: `.WithCancel(context.Background())`
$DIR/cmd/erasure-object_test.go:1127:43-1127:56: `.Background()`
$DIR/cmd/erasure-object_test.go:1137:11-1137:42: `.Shutdown(context.Background())`
$DIR/cmd/erasure-object_test.go:1137:28-1137:41: `.Background()`
$DIR/cmd/erasure-object_test.go:1144:24-1144:35: `.getDisks()`
$DIR/cmd/erasure-object_test.go:1153:38-1153:80: `.Repeat([]byte{'a'}, smallFileThreshold*2)`
$DIR/cmd/erasure-object_test.go:1155:38-1155:80: `.Repeat([]byte{'a'}, smallFileThreshold*2)`
$DIR/cmd/erasure-object_test.go:1160:3-1160:101: `err = z.MakeBucket(ctx, testCase.bucket, MakeBucketOptions{VersioningEnabled: testCase.versioned})`
$DIR/cmd/erasure-object_test.go:1160:10-1160:101: `.MakeBucket(ctx, testCase.bucket, MakeBucketOptions{VersioningEnabled: testCase.versioned})`
$DIR/cmd/erasure-object_test.go:1166:23-1166:66: `.Repeat([]byte{'b'}, len(testCase.content))`
$DIR/cmd/erasure-object_test.go:1167:3-1167:29: `sets.erasureDisksMu.Lock()`
$DIR/cmd/erasure-object_test.go:1167:7-1167:29: `.erasureDisksMu.Lock()`
$DIR/cmd/erasure-object_test.go:1169:3-1169:31: `sets.erasureDisksMu.Unlock()`
$DIR/cmd/erasure-object_test.go:1169:7-1169:31: `.erasureDisksMu.Unlock()`
$DIR/cmd/erasure-object_test.go:1170:3-1171:49: `_, err = z.PutObject(ctx, testCase.bucket, testCase.object, mustGetPutObjReader(t, bytes.NewReader(initialData), int64(len(initialData)), "", ""),
			ObjectOptions{Versioned: testCase.versioned})`
$DIR/cmd/erasure-object_test.go:1170:13-1171:49: `.PutObject(ctx, testCase.bucket, testCase.object, mustGetPutObjReader(t, bytes.NewReader(initialData), int64(len(initialData)), "", ""),
			ObjectOptions{Versioned: testCase.versioned})`
$DIR/cmd/erasure-object_test.go:1170:91-1170:114: `.NewReader(initialData)`
$DIR/cmd/erasure-object_test.go:1177:3-1177:29: `sets.erasureDisksMu.Lock()`
$DIR/cmd/erasure-object_test.go:1177:7-1177:29: `.erasureDisksMu.Lock()`
$DIR/cmd/erasure-object_test.go:1180:4-1180:33: `copy(disks, origErasureDisks)`
$DIR/cmd/erasure-object_test.go:1181:4-1181:18: `disks[0] = nil`
$DIR/cmd/erasure-object_test.go:1182:4-1182:18: `disks[1] = nil`
$DIR/cmd/erasure-object_test.go:1185:3-1185:31: `sets.erasureDisksMu.Unlock()`
$DIR/cmd/erasure-object_test.go:1185:7-1185:31: `.erasureDisksMu.Unlock()`
$DIR/cmd/erasure-object_test.go:1186:16-1187:49: `.PutObject(ctx, testCase.bucket, testCase.object, mustGetPutObjReader(t, bytes.NewReader(testCase.content), int64(len(testCase.content)), "", ""),
			ObjectOptions{Versioned: testCase.versioned})`
$DIR/cmd/erasure-object_test.go:1186:94-1186:122: `.NewReader(testCase.content)`
$DIR/cmd/erasure-object_test.go:1193:3-1193:29: `sets.erasureDisksMu.Lock()`
$DIR/cmd/erasure-object_test.go:1193:7-1193:29: `.erasureDisksMu.Lock()`
$DIR/cmd/erasure-object_test.go:1195:3-1195:31: `sets.erasureDisksMu.Unlock()`
$DIR/cmd/erasure-object_test.go:1195:7-1195:31: `.erasureDisksMu.Unlock()`
$DIR/cmd/erasure-object_test.go:1196:15-1196:130: `.GetObjectNInfo(ctx, testCase.bucket, testCase.object, nil, nil, readLock, ObjectOptions{VersionID: got.VersionID})`
$DIR/cmd/erasure-object_test.go:1201:11-1201:17: `.New()`
$DIR/cmd/erasure-object_test.go:1202:3-1202:28: `h.Write(testCase.content)`
$DIR/cmd/erasure-object_test.go:1202:4-1202:28: `.Write(testCase.content)`
$DIR/cmd/erasure-object_test.go:1203:20-1203:29: `.Sum(nil)`
$DIR/cmd/erasure-object_test.go:1205:3-1205:12: `h.Reset()`
$DIR/cmd/erasure-object_test.go:1205:4-1205:12: `.Reset()`
$DIR/cmd/erasure-object_test.go:1206:3-1206:26: `_, err = io.Copy(h, gr)`
$DIR/cmd/erasure-object_test.go:1206:14-1206:26: `.Copy(h, gr)`
$DIR/cmd/erasure-object_test.go:1211:17-1211:26: `.Sum(nil)`
$DIR/cmd/erasure-object_test.go:1213:12-1213:43: `.Equal(foundHash, expectedHash)`
$DIR/cmd/erasure-server-pool-decom_gen_test.go:14:15-14:31: `.MarshalMsg(nil)`
$DIR/cmd/erasure-server-pool-decom_gen_test.go:18:16-18:34: `.UnmarshalMsg(bts)`
$DIR/cmd/erasure-server-pool-decom_gen_test.go:26:2-26:28: `left, err = msgp.Skip(bts)`
$DIR/cmd/erasure-server-pool-decom_gen_test.go:26:18-26:28: `.Skip(bts)`
$DIR/cmd/erasure-server-pool-decom_gen_test.go:73:2-73:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/erasure-server-pool-decom_gen_test.go:73:6-73:23: `.Encode(&buf, &v)`
$DIR/cmd/erasure-server-pool-decom_gen_test.go:75:8-75:18: `.Msgsize()`
$DIR/cmd/erasure-server-pool-decom_gen_test.go:76:8-76:14: `.Len()`
$DIR/cmd/erasure-server-pool-decom_gen_test.go:81:13-81:31: `.Decode(&buf, &vn)`
$DIR/cmd/erasure-server-pool-decom_gen_test.go:86:2-86:13: `buf.Reset()`
$DIR/cmd/erasure-server-pool-decom_gen_test.go:86:5-86:13: `.Reset()`
$DIR/cmd/erasure-server-pool-decom_gen_test.go:87:2-87:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/erasure-server-pool-decom_gen_test.go:87:6-87:23: `.Encode(&buf, &v)`
$DIR/cmd/erasure-server-pool-decom_gen_test.go:88:2-88:35: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/erasure-server-pool-decom_gen_test.go:88:12-88:28: `.NewReader(&buf)`
$DIR/cmd/erasure-server-pool-decom_gen_test.go:88:28-88:35: `.Skip()`
$DIR/cmd/erasure-server-pool-decom_gen_test.go:127:15-127:31: `.MarshalMsg(nil)`
$DIR/cmd/erasure-server-pool-decom_gen_test.go:131:16-131:34: `.UnmarshalMsg(bts)`
$DIR/cmd/erasure-server-pool-decom_gen_test.go:139:2-139:28: `left, err = msgp.Skip(bts)`
$DIR/cmd/erasure-server-pool-decom_gen_test.go:139:18-139:28: `.Skip(bts)`
$DIR/cmd/erasure-server-pool-decom_gen_test.go:186:2-186:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/erasure-server-pool-decom_gen_test.go:186:6-186:23: `.Encode(&buf, &v)`
$DIR/cmd/erasure-server-pool-decom_gen_test.go:188:8-188:18: `.Msgsize()`
$DIR/cmd/erasure-server-pool-decom_gen_test.go:189:8-189:14: `.Len()`
$DIR/cmd/erasure-server-pool-decom_gen_test.go:194:13-194:31: `.Decode(&buf, &vn)`
$DIR/cmd/erasure-server-pool-decom_gen_test.go:199:2-199:13: `buf.Reset()`
$DIR/cmd/erasure-server-pool-decom_gen_test.go:199:5-199:13: `.Reset()`
$DIR/cmd/erasure-server-pool-decom_gen_test.go:200:2-200:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/erasure-server-pool-decom_gen_test.go:200:6-200:23: `.Encode(&buf, &v)`
$DIR/cmd/erasure-server-pool-decom_gen_test.go:201:2-201:35: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/erasure-server-pool-decom_gen_test.go:201:12-201:28: `.NewReader(&buf)`
$DIR/cmd/erasure-server-pool-decom_gen_test.go:201:28-201:35: `.Skip()`
$DIR/cmd/erasure-server-pool-decom_gen_test.go:240:15-240:31: `.MarshalMsg(nil)`
$DIR/cmd/erasure-server-pool-decom_gen_test.go:244:16-244:34: `.UnmarshalMsg(bts)`
$DIR/cmd/erasure-server-pool-decom_gen_test.go:252:2-252:28: `left, err = msgp.Skip(bts)`
$DIR/cmd/erasure-server-pool-decom_gen_test.go:252:18-252:28: `.Skip(bts)`
$DIR/cmd/erasure-server-pool-decom_gen_test.go:299:2-299:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/erasure-server-pool-decom_gen_test.go:299:6-299:23: `.Encode(&buf, &v)`
$DIR/cmd/erasure-server-pool-decom_gen_test.go:301:8-301:18: `.Msgsize()`
$DIR/cmd/erasure-server-pool-decom_gen_test.go:302:8-302:14: `.Len()`
$DIR/cmd/erasure-server-pool-decom_gen_test.go:307:13-307:31: `.Decode(&buf, &vn)`
$DIR/cmd/erasure-server-pool-decom_gen_test.go:312:2-312:13: `buf.Reset()`
$DIR/cmd/erasure-server-pool-decom_gen_test.go:312:5-312:13: `.Reset()`
$DIR/cmd/erasure-server-pool-decom_gen_test.go:313:2-313:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/erasure-server-pool-decom_gen_test.go:313:6-313:23: `.Encode(&buf, &v)`
$DIR/cmd/erasure-server-pool-decom_gen_test.go:314:2-314:35: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/erasure-server-pool-decom_gen_test.go:314:12-314:28: `.NewReader(&buf)`
$DIR/cmd/erasure-server-pool-decom_gen_test.go:314:28-314:35: `.Skip()`
$DIR/cmd/erasure-server-pool-decom_gen_test.go:353:15-353:31: `.MarshalMsg(nil)`
$DIR/cmd/erasure-server-pool-decom_gen_test.go:357:16-357:34: `.UnmarshalMsg(bts)`
$DIR/cmd/erasure-server-pool-decom_gen_test.go:365:2-365:28: `left, err = msgp.Skip(bts)`
$DIR/cmd/erasure-server-pool-decom_gen_test.go:365:18-365:28: `.Skip(bts)`
$DIR/cmd/erasure-server-pool-decom_gen_test.go:412:2-412:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/erasure-server-pool-decom_gen_test.go:412:6-412:23: `.Encode(&buf, &v)`
$DIR/cmd/erasure-server-pool-decom_gen_test.go:414:8-414:18: `.Msgsize()`
$DIR/cmd/erasure-server-pool-decom_gen_test.go:415:8-415:14: `.Len()`
$DIR/cmd/erasure-server-pool-decom_gen_test.go:420:13-420:31: `.Decode(&buf, &vn)`
$DIR/cmd/erasure-server-pool-decom_gen_test.go:425:2-425:13: `buf.Reset()`
$DIR/cmd/erasure-server-pool-decom_gen_test.go:425:5-425:13: `.Reset()`
$DIR/cmd/erasure-server-pool-decom_gen_test.go:426:2-426:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/erasure-server-pool-decom_gen_test.go:426:6-426:23: `.Encode(&buf, &v)`
$DIR/cmd/erasure-server-pool-decom_gen_test.go:427:2-427:35: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/erasure-server-pool-decom_gen_test.go:427:12-427:28: `.NewReader(&buf)`
$DIR/cmd/erasure-server-pool-decom_gen_test.go:427:28-427:35: `.Skip()`
$DIR/cmd/erasure-server-pool-decom_gen_test.go:466:15-466:31: `.MarshalMsg(nil)`
$DIR/cmd/erasure-server-pool-decom_gen_test.go:470:16-470:34: `.UnmarshalMsg(bts)`
$DIR/cmd/erasure-server-pool-decom_gen_test.go:478:2-478:28: `left, err = msgp.Skip(bts)`
$DIR/cmd/erasure-server-pool-decom_gen_test.go:478:18-478:28: `.Skip(bts)`
$DIR/cmd/erasure-server-pool-decom_gen_test.go:525:2-525:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/erasure-server-pool-decom_gen_test.go:525:6-525:23: `.Encode(&buf, &v)`
$DIR/cmd/erasure-server-pool-decom_gen_test.go:527:8-527:18: `.Msgsize()`
$DIR/cmd/erasure-server-pool-decom_gen_test.go:528:8-528:14: `.Len()`
$DIR/cmd/erasure-server-pool-decom_gen_test.go:533:13-533:31: `.Decode(&buf, &vn)`
$DIR/cmd/erasure-server-pool-decom_gen_test.go:538:2-538:13: `buf.Reset()`
$DIR/cmd/erasure-server-pool-decom_gen_test.go:538:5-538:13: `.Reset()`
$DIR/cmd/erasure-server-pool-decom_gen_test.go:539:2-539:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/erasure-server-pool-decom_gen_test.go:539:6-539:23: `.Encode(&buf, &v)`
$DIR/cmd/erasure-server-pool-decom_gen_test.go:540:2-540:35: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/erasure-server-pool-decom_gen_test.go:540:12-540:28: `.NewReader(&buf)`
$DIR/cmd/erasure-server-pool-decom_gen_test.go:540:28-540:35: `.Skip()`
$DIR/cmd/erasure-server-pool-decom_test.go:67:2-67:34: `nmeta1.Version = poolMetaVersion`
$DIR/cmd/erasure-server-pool-decom_test.go:68:2-68:52: `nmeta1.Pools = append(nmeta1.Pools, meta.Pools...)`
$DIR/cmd/erasure-server-pool-decom_test.go:71:4-78:5: `nmeta1.Pools[i] = PoolStatus{
				CmdLine:    pool.CmdLine,
				ID:         i,
				LastUpdate: UTCNow(),
				Decommission: &PoolDecommissionInfo{
					Complete: true,
				},
			}`
$DIR/cmd/erasure-server-pool-decom_test.go:83:2-83:34: `nmeta2.Version = poolMetaVersion`
$DIR/cmd/erasure-server-pool-decom_test.go:84:2-84:52: `nmeta2.Pools = append(nmeta2.Pools, meta.Pools...)`
$DIR/cmd/erasure-server-pool-decom_test.go:87:4-94:5: `nmeta2.Pools[i] = PoolStatus{
				CmdLine:    pool.CmdLine,
				ID:         i,
				LastUpdate: UTCNow(),
				Decommission: &PoolDecommissionInfo{
					Complete: false,
				},
			}`
$DIR/cmd/erasure-server-pool-decom_test.go:180:3-194:5: `t.Run(testCase.name, func(t *testing.T) {
			update, err := testCase.meta.validate(testCase.pools)
			if testCase.expectedErr {
				t.Log(err)
			}
			if err != nil && !testCase.expectedErr {
				t.Errorf("Expected success, but found %s", err)
			}
			if err == nil && testCase.expectedErr {
				t.Error("Expected error, but got `nil`")
			}
			if update != testCase.expectedUpdate {
				t.Errorf("Expected %t, got %t", testCase.expectedUpdate, update)
			}
		})`
$DIR/cmd/erasure-server-pool-decom_test.go:180:4-194:5: `.Run(testCase.name, func(t *testing.T) {
			update, err := testCase.meta.validate(testCase.pools)
			if testCase.expectedErr {
				t.Log(err)
			}
			if err != nil && !testCase.expectedErr {
				t.Errorf("Expected success, but found %s", err)
			}
			if err == nil && testCase.expectedErr {
				t.Error("Expected error, but got `nil`")
			}
			if update != testCase.expectedUpdate {
				t.Errorf("Expected %t, got %t", testCase.expectedUpdate, update)
			}
		})`
$DIR/cmd/erasure-server-pool-decom_test.go:181:27-181:57: `.meta.validate(testCase.pools)`
$DIR/cmd/erasure-server-pool-rebalance_gen_test.go:14:15-14:31: `.MarshalMsg(nil)`
$DIR/cmd/erasure-server-pool-rebalance_gen_test.go:18:16-18:34: `.UnmarshalMsg(bts)`
$DIR/cmd/erasure-server-pool-rebalance_gen_test.go:26:2-26:28: `left, err = msgp.Skip(bts)`
$DIR/cmd/erasure-server-pool-rebalance_gen_test.go:26:18-26:28: `.Skip(bts)`
$DIR/cmd/erasure-server-pool-rebalance_gen_test.go:73:2-73:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/erasure-server-pool-rebalance_gen_test.go:73:6-73:23: `.Encode(&buf, &v)`
$DIR/cmd/erasure-server-pool-rebalance_gen_test.go:75:8-75:18: `.Msgsize()`
$DIR/cmd/erasure-server-pool-rebalance_gen_test.go:76:8-76:14: `.Len()`
$DIR/cmd/erasure-server-pool-rebalance_gen_test.go:81:13-81:31: `.Decode(&buf, &vn)`
$DIR/cmd/erasure-server-pool-rebalance_gen_test.go:86:2-86:13: `buf.Reset()`
$DIR/cmd/erasure-server-pool-rebalance_gen_test.go:86:5-86:13: `.Reset()`
$DIR/cmd/erasure-server-pool-rebalance_gen_test.go:87:2-87:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/erasure-server-pool-rebalance_gen_test.go:87:6-87:23: `.Encode(&buf, &v)`
$DIR/cmd/erasure-server-pool-rebalance_gen_test.go:88:2-88:35: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/erasure-server-pool-rebalance_gen_test.go:88:12-88:28: `.NewReader(&buf)`
$DIR/cmd/erasure-server-pool-rebalance_gen_test.go:88:28-88:35: `.Skip()`
$DIR/cmd/erasure-server-pool-rebalance_gen_test.go:127:15-127:31: `.MarshalMsg(nil)`
$DIR/cmd/erasure-server-pool-rebalance_gen_test.go:131:16-131:34: `.UnmarshalMsg(bts)`
$DIR/cmd/erasure-server-pool-rebalance_gen_test.go:139:2-139:28: `left, err = msgp.Skip(bts)`
$DIR/cmd/erasure-server-pool-rebalance_gen_test.go:139:18-139:28: `.Skip(bts)`
$DIR/cmd/erasure-server-pool-rebalance_gen_test.go:186:2-186:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/erasure-server-pool-rebalance_gen_test.go:186:6-186:23: `.Encode(&buf, &v)`
$DIR/cmd/erasure-server-pool-rebalance_gen_test.go:188:8-188:18: `.Msgsize()`
$DIR/cmd/erasure-server-pool-rebalance_gen_test.go:189:8-189:14: `.Len()`
$DIR/cmd/erasure-server-pool-rebalance_gen_test.go:194:13-194:31: `.Decode(&buf, &vn)`
$DIR/cmd/erasure-server-pool-rebalance_gen_test.go:199:2-199:13: `buf.Reset()`
$DIR/cmd/erasure-server-pool-rebalance_gen_test.go:199:5-199:13: `.Reset()`
$DIR/cmd/erasure-server-pool-rebalance_gen_test.go:200:2-200:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/erasure-server-pool-rebalance_gen_test.go:200:6-200:23: `.Encode(&buf, &v)`
$DIR/cmd/erasure-server-pool-rebalance_gen_test.go:201:2-201:35: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/erasure-server-pool-rebalance_gen_test.go:201:12-201:28: `.NewReader(&buf)`
$DIR/cmd/erasure-server-pool-rebalance_gen_test.go:201:28-201:35: `.Skip()`
$DIR/cmd/erasure-server-pool-rebalance_gen_test.go:240:15-240:31: `.MarshalMsg(nil)`
$DIR/cmd/erasure-server-pool-rebalance_gen_test.go:244:16-244:34: `.UnmarshalMsg(bts)`
$DIR/cmd/erasure-server-pool-rebalance_gen_test.go:252:2-252:28: `left, err = msgp.Skip(bts)`
$DIR/cmd/erasure-server-pool-rebalance_gen_test.go:252:18-252:28: `.Skip(bts)`
$DIR/cmd/erasure-server-pool-rebalance_gen_test.go:299:2-299:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/erasure-server-pool-rebalance_gen_test.go:299:6-299:23: `.Encode(&buf, &v)`
$DIR/cmd/erasure-server-pool-rebalance_gen_test.go:301:8-301:18: `.Msgsize()`
$DIR/cmd/erasure-server-pool-rebalance_gen_test.go:302:8-302:14: `.Len()`
$DIR/cmd/erasure-server-pool-rebalance_gen_test.go:307:13-307:31: `.Decode(&buf, &vn)`
$DIR/cmd/erasure-server-pool-rebalance_gen_test.go:312:2-312:13: `buf.Reset()`
$DIR/cmd/erasure-server-pool-rebalance_gen_test.go:312:5-312:13: `.Reset()`
$DIR/cmd/erasure-server-pool-rebalance_gen_test.go:313:2-313:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/erasure-server-pool-rebalance_gen_test.go:313:6-313:23: `.Encode(&buf, &v)`
$DIR/cmd/erasure-server-pool-rebalance_gen_test.go:314:2-314:35: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/erasure-server-pool-rebalance_gen_test.go:314:12-314:28: `.NewReader(&buf)`
$DIR/cmd/erasure-server-pool-rebalance_gen_test.go:314:28-314:35: `.Skip()`
$DIR/cmd/erasure-server-pool-rebalance_gen_test.go:353:15-353:31: `.MarshalMsg(nil)`
$DIR/cmd/erasure-server-pool-rebalance_gen_test.go:357:16-357:34: `.UnmarshalMsg(bts)`
$DIR/cmd/erasure-server-pool-rebalance_gen_test.go:365:2-365:28: `left, err = msgp.Skip(bts)`
$DIR/cmd/erasure-server-pool-rebalance_gen_test.go:365:18-365:28: `.Skip(bts)`
$DIR/cmd/erasure-server-pool-rebalance_gen_test.go:412:2-412:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/erasure-server-pool-rebalance_gen_test.go:412:6-412:23: `.Encode(&buf, &v)`
$DIR/cmd/erasure-server-pool-rebalance_gen_test.go:414:8-414:18: `.Msgsize()`
$DIR/cmd/erasure-server-pool-rebalance_gen_test.go:415:8-415:14: `.Len()`
$DIR/cmd/erasure-server-pool-rebalance_gen_test.go:420:13-420:31: `.Decode(&buf, &vn)`
$DIR/cmd/erasure-server-pool-rebalance_gen_test.go:425:2-425:13: `buf.Reset()`
$DIR/cmd/erasure-server-pool-rebalance_gen_test.go:425:5-425:13: `.Reset()`
$DIR/cmd/erasure-server-pool-rebalance_gen_test.go:426:2-426:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/erasure-server-pool-rebalance_gen_test.go:426:6-426:23: `.Encode(&buf, &v)`
$DIR/cmd/erasure-server-pool-rebalance_gen_test.go:427:2-427:35: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/erasure-server-pool-rebalance_gen_test.go:427:12-427:28: `.NewReader(&buf)`
$DIR/cmd/erasure-server-pool-rebalance_gen_test.go:427:28-427:35: `.Skip()`
$DIR/cmd/erasure-server-pool-rebalance_gen_test.go:466:15-466:31: `.MarshalMsg(nil)`
$DIR/cmd/erasure-server-pool-rebalance_gen_test.go:470:16-470:34: `.UnmarshalMsg(bts)`
$DIR/cmd/erasure-server-pool-rebalance_gen_test.go:478:2-478:28: `left, err = msgp.Skip(bts)`
$DIR/cmd/erasure-server-pool-rebalance_gen_test.go:478:18-478:28: `.Skip(bts)`
$DIR/cmd/erasure-server-pool-rebalance_gen_test.go:525:2-525:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/erasure-server-pool-rebalance_gen_test.go:525:6-525:23: `.Encode(&buf, &v)`
$DIR/cmd/erasure-server-pool-rebalance_gen_test.go:527:8-527:18: `.Msgsize()`
$DIR/cmd/erasure-server-pool-rebalance_gen_test.go:528:8-528:14: `.Len()`
$DIR/cmd/erasure-server-pool-rebalance_gen_test.go:533:13-533:31: `.Decode(&buf, &vn)`
$DIR/cmd/erasure-server-pool-rebalance_gen_test.go:538:2-538:13: `buf.Reset()`
$DIR/cmd/erasure-server-pool-rebalance_gen_test.go:538:5-538:13: `.Reset()`
$DIR/cmd/erasure-server-pool-rebalance_gen_test.go:539:2-539:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/erasure-server-pool-rebalance_gen_test.go:539:6-539:23: `.Encode(&buf, &v)`
$DIR/cmd/erasure-server-pool-rebalance_gen_test.go:540:2-540:35: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/erasure-server-pool-rebalance_gen_test.go:540:12-540:28: `.NewReader(&buf)`
$DIR/cmd/erasure-server-pool-rebalance_gen_test.go:540:28-540:35: `.Skip()`
$DIR/cmd/erasure-sets_test.go:162:24-162:57: `.WithCancel(context.Background())`
$DIR/cmd/erasure-sets_test.go:162:43-162:56: `.Background()`
$DIR/cmd/erasure-sets_test.go:171:19-171:65: `.Join(globalTestTmpDir, "minio-"+nextSuffix())`
$DIR/cmd/erasure-sets_test.go:172:3-172:44: `erasureDisks = append(erasureDisks, disk)`
$DIR/cmd/erasure-sets_test.go:173:11-173:27: `.RemoveAll(disk)`
$DIR/cmd/erasure-sets_test.go:182:2-182:63: `_, _, err = waitForFormatErasure(true, nil, 1, 1, 16, "", "")`
$DIR/cmd/erasure-sets_test.go:210:3-210:30: `objs[i] = &erasureObjects{}`
$DIR/cmd/erasure-sets_test.go:234:17-234:51: `.getHashedSet(testCase.objectName)`
$DIR/cmd/erasure_test.go:48:17-48:45: `.ReadFull(rand.Reader, data)`
$DIR/cmd/erasure_test.go:53:3-53:21: `copy(buffer, data)`
$DIR/cmd/erasure_test.go:55:37-55:50: `.Background()`
$DIR/cmd/erasure_test.go:59:26-59:67: `.EncodeData(context.Background(), buffer)`
$DIR/cmd/erasure_test.go:59:45-59:58: `.Background()`
$DIR/cmd/erasure_test.go:65:4-65:20: `encoded[j] = nil`
$DIR/cmd/erasure_test.go:68:4-68:20: `encoded[j] = nil`
$DIR/cmd/erasure_test.go:72:4-72:74: `err = erasure.DecodeDataAndParityBlocks(context.Background(), encoded)`
$DIR/cmd/erasure_test.go:72:17-72:74: `.DecodeDataAndParityBlocks(context.Background(), encoded)`
$DIR/cmd/erasure_test.go:72:51-72:64: `.Background()`
$DIR/cmd/erasure_test.go:74:4-74:43: `err = erasure.DecodeDataBlocks(encoded)`
$DIR/cmd/erasure_test.go:74:17-74:43: `.DecodeDataBlocks(encoded)`
$DIR/cmd/erasure_test.go:101:39-101:52: `.Background()`
$DIR/cmd/erasure_test.go:104:13-104:46: `.Equal(decodedData.Bytes(), data)`
$DIR/cmd/erasure_test.go:104:31-104:39: `.Bytes()`
$DIR/cmd/format-disk-cache_test.go:28:16-28:29: `.Background()`
$DIR/cmd/format-disk-cache_test.go:34:2-34:39: `_, err = initFormatCache(ctx, fsDirs)`
$DIR/cmd/format-disk-cache_test.go:40:14-40:64: `.OpenFile(cacheFormatPath, os.O_RDWR|os.O_SYNC, 0)`
$DIR/cmd/format-disk-cache_test.go:55:12-55:24: `.Truncate(0)`
$DIR/cmd/format-disk-cache_test.go:58:15-58:32: `.WriteString("b")`
$DIR/cmd/format-disk-cache_test.go:62:51-62:64: `.Background()`
$DIR/cmd/format-disk-cache_test.go:67:12-67:24: `.Truncate(0)`
$DIR/cmd/format-disk-cache_test.go:71:15-71:87: `.WriteString(`{"version":"2","format":"cache","cache":{"version":"1"}}`)`
$DIR/cmd/format-disk-cache_test.go:75:51-75:64: `.Background()`
$DIR/cmd/format-disk-cache_test.go:313:38-313:51: `.Background()`
$DIR/cmd/format-erasure_test.go:37:11-37:33: `.RemoveAll(erasureDir)`
$DIR/cmd/format-erasure_test.go:49:2-49:76: `format.Erasure.DistributionAlgo = formatErasureVersionV2DistributionAlgoV1`
$DIR/cmd/format-erasure_test.go:53:22-53:30: `.Clone()`
$DIR/cmd/format-erasure_test.go:54:3-54:53: `newFormat.Erasure.This = format.Erasure.Sets[0][j]`
$DIR/cmd/format-erasure_test.go:55:3-55:25: `formats[j] = newFormat`
$DIR/cmd/format-erasure_test.go:58:2-58:18: `formats[1] = nil`
$DIR/cmd/format-erasure_test.go:60:2-60:30: `formats[2].Erasure.This = ""`
$DIR/cmd/format-erasure_test.go:80:2-80:76: `format.Erasure.DistributionAlgo = formatErasureVersionV2DistributionAlgoV1`
$DIR/cmd/format-erasure_test.go:84:22-84:30: `.Clone()`
$DIR/cmd/format-erasure_test.go:85:3-85:53: `newFormat.Erasure.This = format.Erasure.Sets[0][j]`
$DIR/cmd/format-erasure_test.go:86:3-86:25: `formats[j] = newFormat`
$DIR/cmd/format-erasure_test.go:91:2-91:18: `formats[0] = nil`
$DIR/cmd/format-erasure_test.go:97:2-97:30: `formats[2].Erasure.This = ""`
$DIR/cmd/format-erasure_test.go:106:15-106:25: `.TempDir()`
$DIR/cmd/format-erasure_test.go:109:2-109:33: `m.Format = formatBackendErasure`
$DIR/cmd/format-erasure_test.go:110:2-110:33: `m.Version = formatMetaVersionV1`
$DIR/cmd/format-erasure_test.go:111:2-111:44: `m.Erasure.Version = formatErasureVersionV1`
$DIR/cmd/format-erasure_test.go:112:2-112:32: `m.Erasure.Disk = mustGetUUID()`
$DIR/cmd/format-erasure_test.go:113:2-113:88: `m.Erasure.JBOD = []string{m.Erasure.Disk, mustGetUUID(), mustGetUUID(), mustGetUUID()}`
$DIR/cmd/format-erasure_test.go:115:16-115:27: `.Marshal(m)`
$DIR/cmd/format-erasure_test.go:120:13-120:79: `.MkdirAll(pathJoin(rootPath, minioMetaBucket), os.FileMode(0o755))`
$DIR/cmd/format-erasure_test.go:120:62-120:78: `.FileMode(0o755)`
$DIR/cmd/format-erasure_test.go:124:13-124:101: `.WriteFile(pathJoin(rootPath, minioMetaBucket, formatConfigFile), b, os.FileMode(0o644))`
$DIR/cmd/format-erasure_test.go:124:84-124:100: `.FileMode(0o644)`
$DIR/cmd/format-erasure_test.go:142:2-142:77: `b, err = os.ReadFile(pathJoin(rootPath, minioMetaBucket, formatConfigFile))`
$DIR/cmd/format-erasure_test.go:142:13-142:77: `.ReadFile(pathJoin(rootPath, minioMetaBucket, formatConfigFile))`
$DIR/cmd/format-erasure_test.go:147:15-147:38: `.Unmarshal(b, formatV3)`
$DIR/cmd/format-erasure_test.go:156:13-156:65: `.DeepEqual(formatV3.Erasure.Sets[0], m.Erasure.JBOD)`
$DIR/cmd/format-erasure_test.go:160:2-160:24: `m = &formatErasureV1{}`
$DIR/cmd/format-erasure_test.go:161:2-161:22: `m.Format = "unknown"`
$DIR/cmd/format-erasure_test.go:162:2-162:33: `m.Version = formatMetaVersionV1`
$DIR/cmd/format-erasure_test.go:163:2-163:44: `m.Erasure.Version = formatErasureVersionV1`
$DIR/cmd/format-erasure_test.go:164:2-164:32: `m.Erasure.Disk = mustGetUUID()`
$DIR/cmd/format-erasure_test.go:165:2-165:88: `m.Erasure.JBOD = []string{m.Erasure.Disk, mustGetUUID(), mustGetUUID(), mustGetUUID()}`
$DIR/cmd/format-erasure_test.go:167:2-167:26: `b, err = json.Marshal(m)`
$DIR/cmd/format-erasure_test.go:167:15-167:26: `.Marshal(m)`
$DIR/cmd/format-erasure_test.go:172:13-172:101: `.WriteFile(pathJoin(rootPath, minioMetaBucket, formatConfigFile), b, os.FileMode(0o644))`
$DIR/cmd/format-erasure_test.go:172:84-172:100: `.FileMode(0o644)`
$DIR/cmd/format-erasure_test.go:180:2-180:24: `m = &formatErasureV1{}`
$DIR/cmd/format-erasure_test.go:181:2-181:33: `m.Format = formatBackendErasure`
$DIR/cmd/format-erasure_test.go:182:2-182:33: `m.Version = formatMetaVersionV1`
$DIR/cmd/format-erasure_test.go:183:2-183:26: `m.Erasure.Version = "30"`
$DIR/cmd/format-erasure_test.go:184:2-184:32: `m.Erasure.Disk = mustGetUUID()`
$DIR/cmd/format-erasure_test.go:185:2-185:88: `m.Erasure.JBOD = []string{m.Erasure.Disk, mustGetUUID(), mustGetUUID(), mustGetUUID()}`
$DIR/cmd/format-erasure_test.go:187:2-187:26: `b, err = json.Marshal(m)`
$DIR/cmd/format-erasure_test.go:187:15-187:26: `.Marshal(m)`
$DIR/cmd/format-erasure_test.go:192:13-192:101: `.WriteFile(pathJoin(rootPath, minioMetaBucket, formatConfigFile), b, os.FileMode(0o644))`
$DIR/cmd/format-erasure_test.go:192:84-192:100: `.FileMode(0o644)`
$DIR/cmd/format-erasure_test.go:277:2-277:76: `format.Erasure.DistributionAlgo = formatErasureVersionV2DistributionAlgoV1`
$DIR/cmd/format-erasure_test.go:282:23-282:31: `.Clone()`
$DIR/cmd/format-erasure_test.go:283:4-283:54: `newFormat.Erasure.This = format.Erasure.Sets[i][j]`
$DIR/cmd/format-erasure_test.go:284:4-284:42: `formats[i*setDriveCount+j] = newFormat`
$DIR/cmd/format-erasure_test.go:304:2-304:18: `formats[0] = nil`
$DIR/cmd/format-erasure_test.go:305:2-305:55: `quorumFormat, err = getFormatErasureInQuorum(formats)`
$DIR/cmd/format-erasure_test.go:311:2-311:30: `badFormat.Erasure.Sets = nil`
$DIR/cmd/format-erasure_test.go:317:2-317:47: `badFormatUUID.Erasure.Sets[0][0] = "bad-uuid"`
$DIR/cmd/format-erasure_test.go:323:2-323:40: `badFormatSetSize.Erasure.Sets[0] = nil`
$DIR/cmd/format-erasure_test.go:330:4-330:20: `formats[i] = nil`
$DIR/cmd/format-erasure_test.go:440:2-440:76: `format.Erasure.DistributionAlgo = formatErasureVersionV2DistributionAlgoV1`
$DIR/cmd/format-erasure_test.go:445:23-445:31: `.Clone()`
$DIR/cmd/format-erasure_test.go:446:4-446:54: `newFormat.Erasure.This = format.Erasure.Sets[i][j]`
$DIR/cmd/format-erasure_test.go:447:4-447:42: `formats[i*setDriveCount+j] = newFormat`
$DIR/cmd/format-erasure_test.go:467:2-467:18: `formats[0] = nil`
$DIR/cmd/format-erasure_test.go:475:2-475:44: `formats[1].Erasure.Sets[0][0] = "bad-uuid"`
$DIR/cmd/format-erasure_test.go:484:2-484:26: `formats[2].ID = "bad-id"`
$DIR/cmd/format-erasure_test.go:485:74-485:102: `.Is(err, errCorruptedFormat)`
$DIR/cmd/format-erasure_test.go:496:2-496:76: `format.Erasure.DistributionAlgo = formatErasureVersionV2DistributionAlgoV1`
$DIR/cmd/format-erasure_test.go:502:23-502:31: `.Clone()`
$DIR/cmd/format-erasure_test.go:503:4-503:54: `newFormat.Erasure.This = format.Erasure.Sets[i][j]`
$DIR/cmd/format-erasure_test.go:504:4-504:42: `formats[i*setDriveCount+j] = newFormat`
$DIR/cmd/format-erasure_test.go:514:2-514:31: `errs[15] = errUnformattedDisk`
$DIR/cmd/generic-handlers_test.go:37:15-37:57: `.Parse("http://localhost:9000/minio/lock")`
$DIR/cmd/generic-handlers_test.go:50:2-53:3: `r = &http.Request{
		Proto:  "HTTP/1.1",
		Method: http.MethodGet,
	}`
$DIR/cmd/generic-handlers_test.go:121:3-128:5: `t.Run("", func(t *testing.T) {
			contains := containsReservedMetadata(test.header)
			if contains && !test.shouldFail {
				t.Errorf("contains reserved header but should not fail")
			} else if !contains && test.shouldFail {
				t.Errorf("does not contain reserved header but failed")
			}
		})`
$DIR/cmd/generic-handlers_test.go:121:4-128:5: `.Run("", func(t *testing.T) {
			contains := containsReservedMetadata(test.header)
			if contains && !test.shouldFail {
				t.Errorf("contains reserved header but should not fail")
			} else if !contains && test.shouldFail {
				t.Errorf("does not contain reserved header but failed")
			}
		})`
$DIR/cmd/generic-handlers_test.go:145:27-145:46: `globalIsTLS = isSSL`
$DIR/cmd/generic-handlers_test.go:148:3-148:31: `w.WriteHeader(http.StatusOK)`
$DIR/cmd/generic-handlers_test.go:148:4-148:31: `.WriteHeader(http.StatusOK)`
$DIR/cmd/generic-handlers_test.go:151:3-151:27: `globalIsTLS = test.IsTLS`
$DIR/cmd/generic-handlers_test.go:153:16-153:30: `.NewRecorder()`
$DIR/cmd/generic-handlers_test.go:155:3-155:25: `r.Header = test.Header`
$DIR/cmd/generic-handlers_test.go:156:3-156:19: `r.URL = test.URL`
$DIR/cmd/generic-handlers_test.go:159:3-159:20: `h.ServeHTTP(w, r)`
$DIR/cmd/generic-handlers_test.go:159:4-159:20: `.ServeHTTP(w, r)`
$DIR/cmd/handler-utils_test.go:37:24-37:57: `.WithCancel(context.Background())`
$DIR/cmd/handler-utils_test.go:37:43-37:56: `.Background()`
$DIR/cmd/handler-utils_test.go:44:10-44:27: `.RemoveAll(fsDir)`
$DIR/cmd/handler-utils_test.go:51:20-51:61: `.NopCloser(bytes.NewReader([]byte("<>")))`
$DIR/cmd/handler-utils_test.go:51:36-51:60: `.NewReader([]byte("<>"))`
$DIR/cmd/handler-utils_test.go:57:20-57:66: `.NopCloser(bytes.NewReader([]byte("garbage")))`
$DIR/cmd/handler-utils_test.go:57:36-57:65: `.NewReader([]byte("garbage"))`
$DIR/cmd/handler-utils_test.go:64:3-64:41: `createBucketConfig.Location = location`
$DIR/cmd/handler-utils_test.go:65:36-65:64: `.Marshal(createBucketConfig)`
$DIR/cmd/handler-utils_test.go:66:36-66:71: `.NewReader(createBucketConfigBytes)`
$DIR/cmd/handler-utils_test.go:67:3-67:52: `req.Body = io.NopCloser(createBucketConfigBuffer)`
$DIR/cmd/handler-utils_test.go:67:16-67:52: `.NopCloser(createBucketConfigBuffer)`
$DIR/cmd/handler-utils_test.go:68:3-68:60: `req.ContentLength = int64(createBucketConfigBuffer.Len())`
$DIR/cmd/handler-utils_test.go:68:53-68:59: `.Len()`
$DIR/cmd/handler-utils_test.go:91:3-91:68: `config.SetRegion(globalServerConfig, testCase.serverConfigRegion)`
$DIR/cmd/handler-utils_test.go:91:9-91:68: `.SetRegion(globalServerConfig, testCase.serverConfigRegion)`
$DIR/cmd/handler-utils_test.go:120:32-120:69: `.Repeat("a", int(maxFormFieldSize)+1)`
$DIR/cmd/handler-utils_test.go:128:39-128:52: `.Background()`
$DIR/cmd/handler-utils_test.go:205:41-205:54: `.Background()`
$DIR/cmd/handler-utils_test.go:205:65-205:93: `.MIMEHeader(testCase.header)`
$DIR/cmd/handler-utils_test.go:212:28-212:67: `.DeepEqual(metadata, testCase.metadata)`
$DIR/cmd/httprange_test.go:45:18-45:48: `.GetOffsetLength(resourceSize)`
$DIR/cmd/httprange_test.go:94:3-94:40: `rs, err1 = parseRequestRangeSpec(irs)`
$DIR/cmd/httprange_test.go:96:4-96:49: `o, l, err2 = rs.GetOffsetLength(resourceSize)`
$DIR/cmd/httprange_test.go:96:19-96:49: `.GetOffsetLength(resourceSize)`
$DIR/cmd/httprange_test.go:137:15-137:26: `.ToHeader()`
$DIR/cmd/jwt_test.go:110:24-110:57: `.WithCancel(context.Background())`
$DIR/cmd/jwt_test.go:110:43-110:56: `.Background()`
$DIR/cmd/jwt_test.go:117:10-117:27: `.RemoveAll(fsDir)`
$DIR/cmd/last-minute_gen_test.go:14:15-14:31: `.MarshalMsg(nil)`
$DIR/cmd/last-minute_gen_test.go:18:16-18:34: `.UnmarshalMsg(bts)`
$DIR/cmd/last-minute_gen_test.go:26:2-26:28: `left, err = msgp.Skip(bts)`
$DIR/cmd/last-minute_gen_test.go:26:18-26:28: `.Skip(bts)`
$DIR/cmd/last-minute_gen_test.go:73:2-73:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/last-minute_gen_test.go:73:6-73:23: `.Encode(&buf, &v)`
$DIR/cmd/last-minute_gen_test.go:75:8-75:18: `.Msgsize()`
$DIR/cmd/last-minute_gen_test.go:76:8-76:14: `.Len()`
$DIR/cmd/last-minute_gen_test.go:81:13-81:31: `.Decode(&buf, &vn)`
$DIR/cmd/last-minute_gen_test.go:86:2-86:13: `buf.Reset()`
$DIR/cmd/last-minute_gen_test.go:86:5-86:13: `.Reset()`
$DIR/cmd/last-minute_gen_test.go:87:2-87:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/last-minute_gen_test.go:87:6-87:23: `.Encode(&buf, &v)`
$DIR/cmd/last-minute_gen_test.go:88:2-88:35: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/last-minute_gen_test.go:88:12-88:28: `.NewReader(&buf)`
$DIR/cmd/last-minute_gen_test.go:88:28-88:35: `.Skip()`
$DIR/cmd/last-minute_gen_test.go:127:15-127:31: `.MarshalMsg(nil)`
$DIR/cmd/last-minute_gen_test.go:131:16-131:34: `.UnmarshalMsg(bts)`
$DIR/cmd/last-minute_gen_test.go:139:2-139:28: `left, err = msgp.Skip(bts)`
$DIR/cmd/last-minute_gen_test.go:139:18-139:28: `.Skip(bts)`
$DIR/cmd/last-minute_gen_test.go:186:2-186:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/last-minute_gen_test.go:186:6-186:23: `.Encode(&buf, &v)`
$DIR/cmd/last-minute_gen_test.go:188:8-188:18: `.Msgsize()`
$DIR/cmd/last-minute_gen_test.go:189:8-189:14: `.Len()`
$DIR/cmd/last-minute_gen_test.go:194:13-194:31: `.Decode(&buf, &vn)`
$DIR/cmd/last-minute_gen_test.go:199:2-199:13: `buf.Reset()`
$DIR/cmd/last-minute_gen_test.go:199:5-199:13: `.Reset()`
$DIR/cmd/last-minute_gen_test.go:200:2-200:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/last-minute_gen_test.go:200:6-200:23: `.Encode(&buf, &v)`
$DIR/cmd/last-minute_gen_test.go:201:2-201:35: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/last-minute_gen_test.go:201:12-201:28: `.NewReader(&buf)`
$DIR/cmd/last-minute_gen_test.go:201:28-201:35: `.Skip()`
$DIR/cmd/last-minute_gen_test.go:240:15-240:31: `.MarshalMsg(nil)`
$DIR/cmd/last-minute_gen_test.go:244:16-244:34: `.UnmarshalMsg(bts)`
$DIR/cmd/last-minute_gen_test.go:252:2-252:28: `left, err = msgp.Skip(bts)`
$DIR/cmd/last-minute_gen_test.go:252:18-252:28: `.Skip(bts)`
$DIR/cmd/last-minute_gen_test.go:299:2-299:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/last-minute_gen_test.go:299:6-299:23: `.Encode(&buf, &v)`
$DIR/cmd/last-minute_gen_test.go:301:8-301:18: `.Msgsize()`
$DIR/cmd/last-minute_gen_test.go:302:8-302:14: `.Len()`
$DIR/cmd/last-minute_gen_test.go:307:13-307:31: `.Decode(&buf, &vn)`
$DIR/cmd/last-minute_gen_test.go:312:2-312:13: `buf.Reset()`
$DIR/cmd/last-minute_gen_test.go:312:5-312:13: `.Reset()`
$DIR/cmd/last-minute_gen_test.go:313:2-313:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/last-minute_gen_test.go:313:6-313:23: `.Encode(&buf, &v)`
$DIR/cmd/last-minute_gen_test.go:314:2-314:35: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/last-minute_gen_test.go:314:12-314:28: `.NewReader(&buf)`
$DIR/cmd/last-minute_gen_test.go:314:28-314:35: `.Skip()`
$DIR/cmd/local-locker_test.go:36:16-36:29: `.Background()`
$DIR/cmd/local-locker_test.go:41:16-41:23: `.Name()`
$DIR/cmd/local-locker_test.go:45:15-45:30: `.Lock(ctx, arg)`
$DIR/cmd/local-locker_test.go:52:3-52:35: `wResources[i] = arg.Resources[0]`
$DIR/cmd/local-locker_test.go:59:16-59:23: `.Name()`
$DIR/cmd/local-locker_test.go:63:15-63:31: `.RLock(ctx, arg)`
$DIR/cmd/local-locker_test.go:71:3-71:30: `ok, err = l.RLock(ctx, arg)`
$DIR/cmd/local-locker_test.go:71:14-71:30: `.RLock(ctx, arg)`
$DIR/cmd/local-locker_test.go:79:3-79:35: `rResources[i] = arg.Resources[0]`
$DIR/cmd/local-locker_test.go:88:2-88:29: `l.expireOldLocks(time.Hour)`
$DIR/cmd/local-locker_test.go:88:3-88:29: `.expireOldLocks(time.Hour)`
$DIR/cmd/local-locker_test.go:97:2-97:32: `l.expireOldLocks(-time.Minute)`
$DIR/cmd/local-locker_test.go:97:3-97:32: `.expireOldLocks(-time.Minute)`
$DIR/cmd/local-locker_test.go:107:2-107:16: `const n = 1000`
$DIR/cmd/local-locker_test.go:108:2-108:13: `const m = 5`
$DIR/cmd/local-locker_test.go:114:16-114:29: `.Background()`
$DIR/cmd/local-locker_test.go:118:4-118:28: `names[j] = mustGetUUID()`
$DIR/cmd/local-locker_test.go:124:16-124:23: `.Name()`
$DIR/cmd/local-locker_test.go:128:15-128:30: `.Lock(ctx, arg)`
$DIR/cmd/local-locker_test.go:135:3-135:24: `wResources[i] = names`
$DIR/cmd/local-locker_test.go:136:3-136:17: `wUIDs[i] = uid`
$DIR/cmd/local-locker_test.go:145:16-145:23: `.Name()`
$DIR/cmd/local-locker_test.go:149:15-149:31: `.RLock(ctx, arg)`
$DIR/cmd/local-locker_test.go:156:3-156:29: `rUIDs = append(rUIDs, uid)`
$DIR/cmd/local-locker_test.go:159:3-159:22: `uid = mustGetUUID()`
$DIR/cmd/local-locker_test.go:160:3-160:16: `arg.UID = uid`
$DIR/cmd/local-locker_test.go:161:3-161:30: `ok, err = l.RLock(ctx, arg)`
$DIR/cmd/local-locker_test.go:161:14-161:30: `.RLock(ctx, arg)`
$DIR/cmd/local-locker_test.go:168:3-168:23: `rResources[i] = name`
$DIR/cmd/local-locker_test.go:169:3-169:29: `rUIDs = append(rUIDs, uid)`
$DIR/cmd/local-locker_test.go:184:16-184:23: `.Name()`
$DIR/cmd/local-locker_test.go:188:15-188:33: `.RUnlock(ctx, arg)`
$DIR/cmd/local-locker_test.go:215:15-215:33: `.RUnlock(ctx, arg)`
$DIR/cmd/local-locker_test.go:243:15-243:32: `.Unlock(ctx, arg)`
$DIR/cmd/local-locker_test.go:263:13-263:36: `.New(rand.NewSource(0))`
$DIR/cmd/local-locker_test.go:263:22-263:35: `.NewSource(0)`
$DIR/cmd/local-locker_test.go:266:13-266:21: `.Short()`
$DIR/cmd/local-locker_test.go:269:3-344:5: `t.Run(fmt.Sprintf("%d-locks", locks), func(t *testing.T) {
			// Number of readers per lock...
			for _, readers := range []int{1, 10, 100} {
				if locks > 1000 && readers > 1 {
					continue
				}
				if testing.Short() && readers > 10 {
					continue
				}
				t.Run(fmt.Sprintf("%d-read", readers), func(t *testing.T) {
					l := newLocker()
					for i := 0; i < locks; i++ {
						var tmp [16]byte
						rng.Read(tmp[:])
						res := []string{hex.EncodeToString(tmp[:])}

						for i := 0; i < readers; i++ {
							rng.Read(tmp[:])
							ok, err := l.RLock(context.Background(), dsync.LockArgs{
								UID:       uuid.NewString(),
								Resources: res,
								Source:    hex.EncodeToString(tmp[:8]),
								Owner:     hex.EncodeToString(tmp[8:]),
								Quorum:    0,
							})
							if !ok || err != nil {
								t.Fatal("failed:", err, ok)
							}
						}
					}
					start := time.Now()
					l.expireOldLocks(time.Hour)
					t.Logf("Scan Took: %v. Left: %d/%d", time.Since(start).Round(time.Millisecond), len(l.lockUID), len(l.lockMap))
					if len(l.lockMap) != locks {
						t.Fatalf("objects deleted, want %d != got %d", locks, len(l.lockMap))
					}
					if len(l.lockUID) != locks*readers {
						t.Fatalf("objects deleted, want %d != got %d", locks*readers, len(l.lockUID))
					}

					// Expire 50%
					expired := time.Now().Add(-time.Hour * 2)
					for _, v := range l.lockMap {
						for i := range v {
							if rng.Intn(2) == 0 {
								v[i].TimeLastRefresh = expired
							}
						}
					}
					start = time.Now()
					l.expireOldLocks(time.Hour)
					t.Logf("Expire 50%% took: %v. Left: %d/%d", time.Since(start).Round(time.Millisecond), len(l.lockUID), len(l.lockMap))

					if len(l.lockUID) == locks*readers {
						t.Fatalf("objects uids all remain, unlikely")
					}
					if len(l.lockMap) == 0 {
						t.Fatalf("objects all deleted, 0 remains")
					}
					if len(l.lockUID) == 0 {
						t.Fatalf("objects uids all deleted, 0 remains")
					}

					start = time.Now()
					l.expireOldLocks(-time.Minute)
					t.Logf("Expire rest took: %v. Left: %d/%d", time.Since(start).Round(time.Millisecond), len(l.lockUID), len(l.lockMap))

					if len(l.lockMap) != 0 {
						t.Fatalf("objects not deleted, want %d != got %d", 0, len(l.lockMap))
					}
					if len(l.lockUID) != 0 {
						t.Fatalf("objects not deleted, want %d != got %d", 0, len(l.lockUID))
					}
				})
			}
		})`
$DIR/cmd/local-locker_test.go:269:4-344:5: `.Run(fmt.Sprintf("%d-locks", locks), func(t *testing.T) {
			// Number of readers per lock...
			for _, readers := range []int{1, 10, 100} {
				if locks > 1000 && readers > 1 {
					continue
				}
				if testing.Short() && readers > 10 {
					continue
				}
				t.Run(fmt.Sprintf("%d-read", readers), func(t *testing.T) {
					l := newLocker()
					for i := 0; i < locks; i++ {
						var tmp [16]byte
						rng.Read(tmp[:])
						res := []string{hex.EncodeToString(tmp[:])}

						for i := 0; i < readers; i++ {
							rng.Read(tmp[:])
							ok, err := l.RLock(context.Background(), dsync.LockArgs{
								UID:       uuid.NewString(),
								Resources: res,
								Source:    hex.EncodeToString(tmp[:8]),
								Owner:     hex.EncodeToString(tmp[8:]),
								Quorum:    0,
							})
							if !ok || err != nil {
								t.Fatal("failed:", err, ok)
							}
						}
					}
					start := time.Now()
					l.expireOldLocks(time.Hour)
					t.Logf("Scan Took: %v. Left: %d/%d", time.Since(start).Round(time.Millisecond), len(l.lockUID), len(l.lockMap))
					if len(l.lockMap) != locks {
						t.Fatalf("objects deleted, want %d != got %d", locks, len(l.lockMap))
					}
					if len(l.lockUID) != locks*readers {
						t.Fatalf("objects deleted, want %d != got %d", locks*readers, len(l.lockUID))
					}

					// Expire 50%
					expired := time.Now().Add(-time.Hour * 2)
					for _, v := range l.lockMap {
						for i := range v {
							if rng.Intn(2) == 0 {
								v[i].TimeLastRefresh = expired
							}
						}
					}
					start = time.Now()
					l.expireOldLocks(time.Hour)
					t.Logf("Expire 50%% took: %v. Left: %d/%d", time.Since(start).Round(time.Millisecond), len(l.lockUID), len(l.lockMap))

					if len(l.lockUID) == locks*readers {
						t.Fatalf("objects uids all remain, unlikely")
					}
					if len(l.lockMap) == 0 {
						t.Fatalf("objects all deleted, 0 remains")
					}
					if len(l.lockUID) == 0 {
						t.Fatalf("objects uids all deleted, 0 remains")
					}

					start = time.Now()
					l.expireOldLocks(-time.Minute)
					t.Logf("Expire rest took: %v. Left: %d/%d", time.Since(start).Round(time.Millisecond), len(l.lockUID), len(l.lockMap))

					if len(l.lockMap) != 0 {
						t.Fatalf("objects not deleted, want %d != got %d", 0, len(l.lockMap))
					}
					if len(l.lockUID) != 0 {
						t.Fatalf("objects not deleted, want %d != got %d", 0, len(l.lockUID))
					}
				})
			}
		})`
$DIR/cmd/local-locker_test.go:269:12-269:39: `.Sprintf("%d-locks", locks)`
$DIR/cmd/local-locker_test.go:275:15-275:23: `.Short()`
$DIR/cmd/local-locker_test.go:278:5-342:7: `t.Run(fmt.Sprintf("%d-read", readers), func(t *testing.T) {
					l := newLocker()
					for i := 0; i < locks; i++ {
						var tmp [16]byte
						rng.Read(tmp[:])
						res := []string{hex.EncodeToString(tmp[:])}

						for i := 0; i < readers; i++ {
							rng.Read(tmp[:])
							ok, err := l.RLock(context.Background(), dsync.LockArgs{
								UID:       uuid.NewString(),
								Resources: res,
								Source:    hex.EncodeToString(tmp[:8]),
								Owner:     hex.EncodeToString(tmp[8:]),
								Quorum:    0,
							})
							if !ok || err != nil {
								t.Fatal("failed:", err, ok)
							}
						}
					}
					start := time.Now()
					l.expireOldLocks(time.Hour)
					t.Logf("Scan Took: %v. Left: %d/%d", time.Since(start).Round(time.Millisecond), len(l.lockUID), len(l.lockMap))
					if len(l.lockMap) != locks {
						t.Fatalf("objects deleted, want %d != got %d", locks, len(l.lockMap))
					}
					if len(l.lockUID) != locks*readers {
						t.Fatalf("objects deleted, want %d != got %d", locks*readers, len(l.lockUID))
					}

					// Expire 50%
					expired := time.Now().Add(-time.Hour * 2)
					for _, v := range l.lockMap {
						for i := range v {
							if rng.Intn(2) == 0 {
								v[i].TimeLastRefresh = expired
							}
						}
					}
					start = time.Now()
					l.expireOldLocks(time.Hour)
					t.Logf("Expire 50%% took: %v. Left: %d/%d", time.Since(start).Round(time.Millisecond), len(l.lockUID), len(l.lockMap))

					if len(l.lockUID) == locks*readers {
						t.Fatalf("objects uids all remain, unlikely")
					}
					if len(l.lockMap) == 0 {
						t.Fatalf("objects all deleted, 0 remains")
					}
					if len(l.lockUID) == 0 {
						t.Fatalf("objects uids all deleted, 0 remains")
					}

					start = time.Now()
					l.expireOldLocks(-time.Minute)
					t.Logf("Expire rest took: %v. Left: %d/%d", time.Since(start).Round(time.Millisecond), len(l.lockUID), len(l.lockMap))

					if len(l.lockMap) != 0 {
						t.Fatalf("objects not deleted, want %d != got %d", 0, len(l.lockMap))
					}
					if len(l.lockUID) != 0 {
						t.Fatalf("objects not deleted, want %d != got %d", 0, len(l.lockUID))
					}
				})`
$DIR/cmd/local-locker_test.go:278:6-342:7: `.Run(fmt.Sprintf("%d-read", readers), func(t *testing.T) {
					l := newLocker()
					for i := 0; i < locks; i++ {
						var tmp [16]byte
						rng.Read(tmp[:])
						res := []string{hex.EncodeToString(tmp[:])}

						for i := 0; i < readers; i++ {
							rng.Read(tmp[:])
							ok, err := l.RLock(context.Background(), dsync.LockArgs{
								UID:       uuid.NewString(),
								Resources: res,
								Source:    hex.EncodeToString(tmp[:8]),
								Owner:     hex.EncodeToString(tmp[8:]),
								Quorum:    0,
							})
							if !ok || err != nil {
								t.Fatal("failed:", err, ok)
							}
						}
					}
					start := time.Now()
					l.expireOldLocks(time.Hour)
					t.Logf("Scan Took: %v. Left: %d/%d", time.Since(start).Round(time.Millisecond), len(l.lockUID), len(l.lockMap))
					if len(l.lockMap) != locks {
						t.Fatalf("objects deleted, want %d != got %d", locks, len(l.lockMap))
					}
					if len(l.lockUID) != locks*readers {
						t.Fatalf("objects deleted, want %d != got %d", locks*readers, len(l.lockUID))
					}

					// Expire 50%
					expired := time.Now().Add(-time.Hour * 2)
					for _, v := range l.lockMap {
						for i := range v {
							if rng.Intn(2) == 0 {
								v[i].TimeLastRefresh = expired
							}
						}
					}
					start = time.Now()
					l.expireOldLocks(time.Hour)
					t.Logf("Expire 50%% took: %v. Left: %d/%d", time.Since(start).Round(time.Millisecond), len(l.lockUID), len(l.lockMap))

					if len(l.lockUID) == locks*readers {
						t.Fatalf("objects uids all remain, unlikely")
					}
					if len(l.lockMap) == 0 {
						t.Fatalf("objects all deleted, 0 remains")
					}
					if len(l.lockUID) == 0 {
						t.Fatalf("objects uids all deleted, 0 remains")
					}

					start = time.Now()
					l.expireOldLocks(-time.Minute)
					t.Logf("Expire rest took: %v. Left: %d/%d", time.Since(start).Round(time.Millisecond), len(l.lockUID), len(l.lockMap))

					if len(l.lockMap) != 0 {
						t.Fatalf("objects not deleted, want %d != got %d", 0, len(l.lockMap))
					}
					if len(l.lockUID) != 0 {
						t.Fatalf("objects not deleted, want %d != got %d", 0, len(l.lockUID))
					}
				})`
$DIR/cmd/local-locker_test.go:278:14-278:42: `.Sprintf("%d-read", readers)`
$DIR/cmd/local-locker_test.go:282:7-282:23: `rng.Read(tmp[:])`
$DIR/cmd/local-locker_test.go:282:10-282:23: `.Read(tmp[:])`
$DIR/cmd/local-locker_test.go:283:26-283:49: `.EncodeToString(tmp[:])`
$DIR/cmd/local-locker_test.go:286:8-286:24: `rng.Read(tmp[:])`
$DIR/cmd/local-locker_test.go:286:11-286:24: `.Read(tmp[:])`
$DIR/cmd/local-locker_test.go:287:20-293:10: `.RLock(context.Background(), dsync.LockArgs{
								UID:       uuid.NewString(),
								Resources: res,
								Source:    hex.EncodeToString(tmp[:8]),
								Owner:     hex.EncodeToString(tmp[8:]),
								Quorum:    0,
							})`
$DIR/cmd/local-locker_test.go:287:34-287:47: `.Background()`
$DIR/cmd/local-locker_test.go:288:24-288:36: `.NewString()`
$DIR/cmd/local-locker_test.go:290:23-290:47: `.EncodeToString(tmp[:8])`
$DIR/cmd/local-locker_test.go:291:23-291:47: `.EncodeToString(tmp[8:])`
$DIR/cmd/local-locker_test.go:299:19-299:25: `.Now()`
$DIR/cmd/local-locker_test.go:300:6-300:33: `l.expireOldLocks(time.Hour)`
$DIR/cmd/local-locker_test.go:300:7-300:33: `.expireOldLocks(time.Hour)`
$DIR/cmd/local-locker_test.go:310:21-310:27: `.Now()`
$DIR/cmd/local-locker_test.go:310:27-310:47: `.Add(-time.Hour * 2)`
$DIR/cmd/local-locker_test.go:313:14-313:22: `.Intn(2)`
$DIR/cmd/local-locker_test.go:314:9-314:39: `v[i].TimeLastRefresh = expired`
$DIR/cmd/local-locker_test.go:318:6-318:24: `start = time.Now()`
$DIR/cmd/local-locker_test.go:318:18-318:24: `.Now()`
$DIR/cmd/local-locker_test.go:319:6-319:33: `l.expireOldLocks(time.Hour)`
$DIR/cmd/local-locker_test.go:319:7-319:33: `.expireOldLocks(time.Hour)`
$DIR/cmd/local-locker_test.go:332:6-332:24: `start = time.Now()`
$DIR/cmd/local-locker_test.go:332:18-332:24: `.Now()`
$DIR/cmd/local-locker_test.go:333:6-333:36: `l.expireOldLocks(-time.Minute)`
$DIR/cmd/local-locker_test.go:333:7-333:36: `.expireOldLocks(-time.Minute)`
$DIR/cmd/local-locker_test.go:349:13-349:36: `.New(rand.NewSource(0))`
$DIR/cmd/local-locker_test.go:349:22-349:35: `.NewSource(0)`
$DIR/cmd/local-locker_test.go:352:13-352:21: `.Short()`
$DIR/cmd/local-locker_test.go:355:3-437:5: `t.Run(fmt.Sprintf("%d-locks", locks), func(t *testing.T) {
			// Number of readers per lock...
			for _, readers := range []int{1, 10, 100} {
				if locks > 1000 && readers > 1 {
					continue
				}
				if testing.Short() && readers > 10 {
					continue
				}
				t.Run(fmt.Sprintf("%d-read", readers), func(t *testing.T) {
					l := newLocker()
					for i := 0; i < locks; i++ {
						var tmp [16]byte
						rng.Read(tmp[:])
						res := []string{hex.EncodeToString(tmp[:])}

						for i := 0; i < readers; i++ {
							rng.Read(tmp[:])
							ok, err := l.RLock(context.Background(), dsync.LockArgs{
								UID:       uuid.NewString(),
								Resources: res,
								Source:    hex.EncodeToString(tmp[:8]),
								Owner:     hex.EncodeToString(tmp[8:]),
								Quorum:    0,
							})
							if !ok || err != nil {
								t.Fatal("failed:", err, ok)
							}
						}
					}

					// Expire 50%
					toUnLock := make([]dsync.LockArgs, 0, locks*readers)
					for k, v := range l.lockMap {
						for _, lock := range v {
							if rng.Intn(2) == 0 {
								toUnLock = append(toUnLock, dsync.LockArgs{Resources: []string{k}, UID: lock.UID})
							}
						}
					}
					start := time.Now()
					for _, lock := range toUnLock {
						ok, err := l.ForceUnlock(context.Background(), lock)
						if err != nil || !ok {
							t.Fatal(err)
						}
					}
					t.Logf("Expire 50%% took: %v. Left: %d/%d", time.Since(start).Round(time.Millisecond), len(l.lockUID), len(l.lockMap))

					if len(l.lockUID) == locks*readers {
						t.Fatalf("objects uids all remain, unlikely")
					}
					if len(l.lockMap) == 0 && locks > 10 {
						t.Fatalf("objects all deleted, 0 remains")
					}
					if len(l.lockUID) != locks*readers-len(toUnLock) {
						t.Fatalf("want %d objects uids all deleted, %d remains", len(l.lockUID), locks*readers-len(toUnLock))
					}

					toUnLock = toUnLock[:0]
					for k, v := range l.lockMap {
						for _, lock := range v {
							toUnLock = append(toUnLock, dsync.LockArgs{Resources: []string{k}, UID: lock.UID, Owner: lock.Owner})
						}
					}
					start = time.Now()
					for _, lock := range toUnLock {
						ok, err := l.RUnlock(context.TODO(), lock)
						if err != nil || !ok {
							t.Fatal(err)
						}
					}
					t.Logf("Expire rest took: %v. Left: %d/%d", time.Since(start).Round(time.Millisecond), len(l.lockUID), len(l.lockMap))

					if len(l.lockMap) != 0 {
						t.Fatalf("objects not deleted, want %d != got %d", 0, len(l.lockMap))
					}
					if len(l.lockUID) != 0 {
						t.Fatalf("objects not deleted, want %d != got %d", 0, len(l.lockUID))
					}
				})
			}
		})`
$DIR/cmd/local-locker_test.go:355:4-437:5: `.Run(fmt.Sprintf("%d-locks", locks), func(t *testing.T) {
			// Number of readers per lock...
			for _, readers := range []int{1, 10, 100} {
				if locks > 1000 && readers > 1 {
					continue
				}
				if testing.Short() && readers > 10 {
					continue
				}
				t.Run(fmt.Sprintf("%d-read", readers), func(t *testing.T) {
					l := newLocker()
					for i := 0; i < locks; i++ {
						var tmp [16]byte
						rng.Read(tmp[:])
						res := []string{hex.EncodeToString(tmp[:])}

						for i := 0; i < readers; i++ {
							rng.Read(tmp[:])
							ok, err := l.RLock(context.Background(), dsync.LockArgs{
								UID:       uuid.NewString(),
								Resources: res,
								Source:    hex.EncodeToString(tmp[:8]),
								Owner:     hex.EncodeToString(tmp[8:]),
								Quorum:    0,
							})
							if !ok || err != nil {
								t.Fatal("failed:", err, ok)
							}
						}
					}

					// Expire 50%
					toUnLock := make([]dsync.LockArgs, 0, locks*readers)
					for k, v := range l.lockMap {
						for _, lock := range v {
							if rng.Intn(2) == 0 {
								toUnLock = append(toUnLock, dsync.LockArgs{Resources: []string{k}, UID: lock.UID})
							}
						}
					}
					start := time.Now()
					for _, lock := range toUnLock {
						ok, err := l.ForceUnlock(context.Background(), lock)
						if err != nil || !ok {
							t.Fatal(err)
						}
					}
					t.Logf("Expire 50%% took: %v. Left: %d/%d", time.Since(start).Round(time.Millisecond), len(l.lockUID), len(l.lockMap))

					if len(l.lockUID) == locks*readers {
						t.Fatalf("objects uids all remain, unlikely")
					}
					if len(l.lockMap) == 0 && locks > 10 {
						t.Fatalf("objects all deleted, 0 remains")
					}
					if len(l.lockUID) != locks*readers-len(toUnLock) {
						t.Fatalf("want %d objects uids all deleted, %d remains", len(l.lockUID), locks*readers-len(toUnLock))
					}

					toUnLock = toUnLock[:0]
					for k, v := range l.lockMap {
						for _, lock := range v {
							toUnLock = append(toUnLock, dsync.LockArgs{Resources: []string{k}, UID: lock.UID, Owner: lock.Owner})
						}
					}
					start = time.Now()
					for _, lock := range toUnLock {
						ok, err := l.RUnlock(context.TODO(), lock)
						if err != nil || !ok {
							t.Fatal(err)
						}
					}
					t.Logf("Expire rest took: %v. Left: %d/%d", time.Since(start).Round(time.Millisecond), len(l.lockUID), len(l.lockMap))

					if len(l.lockMap) != 0 {
						t.Fatalf("objects not deleted, want %d != got %d", 0, len(l.lockMap))
					}
					if len(l.lockUID) != 0 {
						t.Fatalf("objects not deleted, want %d != got %d", 0, len(l.lockUID))
					}
				})
			}
		})`
$DIR/cmd/local-locker_test.go:355:12-355:39: `.Sprintf("%d-locks", locks)`
$DIR/cmd/local-locker_test.go:361:15-361:23: `.Short()`
$DIR/cmd/local-locker_test.go:364:5-435:7: `t.Run(fmt.Sprintf("%d-read", readers), func(t *testing.T) {
					l := newLocker()
					for i := 0; i < locks; i++ {
						var tmp [16]byte
						rng.Read(tmp[:])
						res := []string{hex.EncodeToString(tmp[:])}

						for i := 0; i < readers; i++ {
							rng.Read(tmp[:])
							ok, err := l.RLock(context.Background(), dsync.LockArgs{
								UID:       uuid.NewString(),
								Resources: res,
								Source:    hex.EncodeToString(tmp[:8]),
								Owner:     hex.EncodeToString(tmp[8:]),
								Quorum:    0,
							})
							if !ok || err != nil {
								t.Fatal("failed:", err, ok)
							}
						}
					}

					// Expire 50%
					toUnLock := make([]dsync.LockArgs, 0, locks*readers)
					for k, v := range l.lockMap {
						for _, lock := range v {
							if rng.Intn(2) == 0 {
								toUnLock = append(toUnLock, dsync.LockArgs{Resources: []string{k}, UID: lock.UID})
							}
						}
					}
					start := time.Now()
					for _, lock := range toUnLock {
						ok, err := l.ForceUnlock(context.Background(), lock)
						if err != nil || !ok {
							t.Fatal(err)
						}
					}
					t.Logf("Expire 50%% took: %v. Left: %d/%d", time.Since(start).Round(time.Millisecond), len(l.lockUID), len(l.lockMap))

					if len(l.lockUID) == locks*readers {
						t.Fatalf("objects uids all remain, unlikely")
					}
					if len(l.lockMap) == 0 && locks > 10 {
						t.Fatalf("objects all deleted, 0 remains")
					}
					if len(l.lockUID) != locks*readers-len(toUnLock) {
						t.Fatalf("want %d objects uids all deleted, %d remains", len(l.lockUID), locks*readers-len(toUnLock))
					}

					toUnLock = toUnLock[:0]
					for k, v := range l.lockMap {
						for _, lock := range v {
							toUnLock = append(toUnLock, dsync.LockArgs{Resources: []string{k}, UID: lock.UID, Owner: lock.Owner})
						}
					}
					start = time.Now()
					for _, lock := range toUnLock {
						ok, err := l.RUnlock(context.TODO(), lock)
						if err != nil || !ok {
							t.Fatal(err)
						}
					}
					t.Logf("Expire rest took: %v. Left: %d/%d", time.Since(start).Round(time.Millisecond), len(l.lockUID), len(l.lockMap))

					if len(l.lockMap) != 0 {
						t.Fatalf("objects not deleted, want %d != got %d", 0, len(l.lockMap))
					}
					if len(l.lockUID) != 0 {
						t.Fatalf("objects not deleted, want %d != got %d", 0, len(l.lockUID))
					}
				})`
$DIR/cmd/local-locker_test.go:364:6-435:7: `.Run(fmt.Sprintf("%d-read", readers), func(t *testing.T) {
					l := newLocker()
					for i := 0; i < locks; i++ {
						var tmp [16]byte
						rng.Read(tmp[:])
						res := []string{hex.EncodeToString(tmp[:])}

						for i := 0; i < readers; i++ {
							rng.Read(tmp[:])
							ok, err := l.RLock(context.Background(), dsync.LockArgs{
								UID:       uuid.NewString(),
								Resources: res,
								Source:    hex.EncodeToString(tmp[:8]),
								Owner:     hex.EncodeToString(tmp[8:]),
								Quorum:    0,
							})
							if !ok || err != nil {
								t.Fatal("failed:", err, ok)
							}
						}
					}

					// Expire 50%
					toUnLock := make([]dsync.LockArgs, 0, locks*readers)
					for k, v := range l.lockMap {
						for _, lock := range v {
							if rng.Intn(2) == 0 {
								toUnLock = append(toUnLock, dsync.LockArgs{Resources: []string{k}, UID: lock.UID})
							}
						}
					}
					start := time.Now()
					for _, lock := range toUnLock {
						ok, err := l.ForceUnlock(context.Background(), lock)
						if err != nil || !ok {
							t.Fatal(err)
						}
					}
					t.Logf("Expire 50%% took: %v. Left: %d/%d", time.Since(start).Round(time.Millisecond), len(l.lockUID), len(l.lockMap))

					if len(l.lockUID) == locks*readers {
						t.Fatalf("objects uids all remain, unlikely")
					}
					if len(l.lockMap) == 0 && locks > 10 {
						t.Fatalf("objects all deleted, 0 remains")
					}
					if len(l.lockUID) != locks*readers-len(toUnLock) {
						t.Fatalf("want %d objects uids all deleted, %d remains", len(l.lockUID), locks*readers-len(toUnLock))
					}

					toUnLock = toUnLock[:0]
					for k, v := range l.lockMap {
						for _, lock := range v {
							toUnLock = append(toUnLock, dsync.LockArgs{Resources: []string{k}, UID: lock.UID, Owner: lock.Owner})
						}
					}
					start = time.Now()
					for _, lock := range toUnLock {
						ok, err := l.RUnlock(context.TODO(), lock)
						if err != nil || !ok {
							t.Fatal(err)
						}
					}
					t.Logf("Expire rest took: %v. Left: %d/%d", time.Since(start).Round(time.Millisecond), len(l.lockUID), len(l.lockMap))

					if len(l.lockMap) != 0 {
						t.Fatalf("objects not deleted, want %d != got %d", 0, len(l.lockMap))
					}
					if len(l.lockUID) != 0 {
						t.Fatalf("objects not deleted, want %d != got %d", 0, len(l.lockUID))
					}
				})`
$DIR/cmd/local-locker_test.go:364:14-364:42: `.Sprintf("%d-read", readers)`
$DIR/cmd/local-locker_test.go:368:7-368:23: `rng.Read(tmp[:])`
$DIR/cmd/local-locker_test.go:368:10-368:23: `.Read(tmp[:])`
$DIR/cmd/local-locker_test.go:369:26-369:49: `.EncodeToString(tmp[:])`
$DIR/cmd/local-locker_test.go:372:8-372:24: `rng.Read(tmp[:])`
$DIR/cmd/local-locker_test.go:372:11-372:24: `.Read(tmp[:])`
$DIR/cmd/local-locker_test.go:373:20-379:10: `.RLock(context.Background(), dsync.LockArgs{
								UID:       uuid.NewString(),
								Resources: res,
								Source:    hex.EncodeToString(tmp[:8]),
								Owner:     hex.EncodeToString(tmp[8:]),
								Quorum:    0,
							})`
$DIR/cmd/local-locker_test.go:373:34-373:47: `.Background()`
$DIR/cmd/local-locker_test.go:374:24-374:36: `.NewString()`
$DIR/cmd/local-locker_test.go:376:23-376:47: `.EncodeToString(tmp[:8])`
$DIR/cmd/local-locker_test.go:377:23-377:47: `.EncodeToString(tmp[8:])`
$DIR/cmd/local-locker_test.go:390:14-390:22: `.Intn(2)`
$DIR/cmd/local-locker_test.go:391:9-391:91: `toUnLock = append(toUnLock, dsync.LockArgs{Resources: []string{k}, UID: lock.UID})`
$DIR/cmd/local-locker_test.go:395:19-395:25: `.Now()`
$DIR/cmd/local-locker_test.go:397:19-397:59: `.ForceUnlock(context.Background(), lock)`
$DIR/cmd/local-locker_test.go:397:39-397:52: `.Background()`
$DIR/cmd/local-locker_test.go:414:6-414:29: `toUnLock = toUnLock[:0]`
$DIR/cmd/local-locker_test.go:417:8-417:109: `toUnLock = append(toUnLock, dsync.LockArgs{Resources: []string{k}, UID: lock.UID, Owner: lock.Owner})`
$DIR/cmd/local-locker_test.go:420:6-420:24: `start = time.Now()`
$DIR/cmd/local-locker_test.go:420:18-420:24: `.Now()`
$DIR/cmd/local-locker_test.go:422:19-422:49: `.RUnlock(context.TODO(), lock)`
$DIR/cmd/local-locker_test.go:422:35-422:42: `.TODO()`
$DIR/cmd/lock-rest-client_test.go:35:14-35:25: `.IsOnline()`
$DIR/cmd/lock-rest-client_test.go:40:2-40:65: `_, err = lkClient.RLock(context.Background(), dsync.LockArgs{})`
$DIR/cmd/lock-rest-client_test.go:40:19-40:65: `.RLock(context.Background(), dsync.LockArgs{})`
$DIR/cmd/lock-rest-client_test.go:40:33-40:46: `.Background()`
$DIR/cmd/lock-rest-client_test.go:45:2-45:64: `_, err = lkClient.Lock(context.Background(), dsync.LockArgs{})`
$DIR/cmd/lock-rest-client_test.go:45:19-45:64: `.Lock(context.Background(), dsync.LockArgs{})`
$DIR/cmd/lock-rest-client_test.go:45:32-45:45: `.Background()`
$DIR/cmd/lock-rest-client_test.go:50:2-50:67: `_, err = lkClient.RUnlock(context.Background(), dsync.LockArgs{})`
$DIR/cmd/lock-rest-client_test.go:50:19-50:67: `.RUnlock(context.Background(), dsync.LockArgs{})`
$DIR/cmd/lock-rest-client_test.go:50:35-50:48: `.Background()`
$DIR/cmd/lock-rest-client_test.go:55:2-55:66: `_, err = lkClient.Unlock(context.Background(), dsync.LockArgs{})`
$DIR/cmd/lock-rest-client_test.go:55:19-55:66: `.Unlock(context.Background(), dsync.LockArgs{})`
$DIR/cmd/lock-rest-client_test.go:55:34-55:47: `.Background()`
$DIR/cmd/lock-rest-server-common_test.go:52:24-52:57: `.WithCancel(context.Background())`
$DIR/cmd/lock-rest-server-common_test.go:52:43-52:56: `.Background()`
$DIR/cmd/lock-rest-server-common_test.go:56:10-56:30: `.RemoveAll(testPath)`
$DIR/cmd/lock-rest-server-common_test.go:73:2-76:3: `locker.ll.lockMap["name"] = []lockRequesterInfo{
		lockRequesterInfo1,
		lockRequesterInfo2,
	}`
$DIR/cmd/lock-rest-server-common_test.go:81:11-84:10: `.ll.removeEntry("name", dsync.LockArgs{
		Owner: "owner",
		UID:   "unknown-uid",
	}, &lri)`
$DIR/cmd/lock-rest-server-common_test.go:88:12-91:10: `.ll.removeEntry("name", dsync.LockArgs{
		Owner: "owner",
		UID:   "0123-4567",
	}, &lri)`
$DIR/cmd/lock-rest-server-common_test.go:96:14-96:45: `.DeepEqual(expectedLri, gotLri)`
$DIR/cmd/lock-rest-server-common_test.go:101:12-104:10: `.ll.removeEntry("name", dsync.LockArgs{
		Owner: "owner",
		UID:   "89ab-cdef",
	}, &lri)`
$DIR/cmd/lock-rest-server-common_test.go:109:14-109:45: `.DeepEqual(expectedLri, gotLri)`
$DIR/cmd/metacache-entries_test.go:32:14-32:24: `.entries()`
$DIR/cmd/metacache-entries_test.go:33:7-33:18: `.isSorted()`
$DIR/cmd/metacache-entries_test.go:38:2-38:39: `o[0], o[len(o)-1] = o[len(o)-1], o[0]`
$DIR/cmd/metacache-entries_test.go:39:6-39:17: `.isSorted()`
$DIR/cmd/metacache-entries_test.go:43:13-43:20: `.sort()`
$DIR/cmd/metacache-entries_test.go:44:7-44:18: `.isSorted()`
$DIR/cmd/metacache-entries_test.go:47:12-47:22: `.entries()`
$DIR/cmd/metacache-entries_test.go:47:22-47:33: `.isSorted()`
$DIR/cmd/metacache-entries_test.go:62:2-62:55: `entries.forwardTo("src/compress/zlib/reader_test.go")`
$DIR/cmd/metacache-entries_test.go:62:9-62:55: `.forwardTo("src/compress/zlib/reader_test.go")`
$DIR/cmd/metacache-entries_test.go:63:16-63:26: `.entries()`
$DIR/cmd/metacache-entries_test.go:63:26-63:34: `.names()`
$DIR/cmd/metacache-entries_test.go:64:13-64:34: `.DeepEqual(got, want)`
$DIR/cmd/metacache-entries_test.go:69:2-69:15: `entries = org`
$DIR/cmd/metacache-entries_test.go:70:2-70:49: `entries.forwardTo("src/compress/zlib/reader_t")`
$DIR/cmd/metacache-entries_test.go:70:9-70:49: `.forwardTo("src/compress/zlib/reader_t")`
$DIR/cmd/metacache-entries_test.go:71:2-71:33: `got = entries.entries().names()`
$DIR/cmd/metacache-entries_test.go:71:15-71:25: `.entries()`
$DIR/cmd/metacache-entries_test.go:71:25-71:33: `.names()`
$DIR/cmd/metacache-entries_test.go:72:13-72:34: `.DeepEqual(got, want)`
$DIR/cmd/metacache-entries_test.go:79:13-79:28: `.shallowClone()`
$DIR/cmd/metacache-entries_test.go:79:33-79:48: `.shallowClone()`
$DIR/cmd/metacache-entries_test.go:80:9-80:19: `.entries()`
$DIR/cmd/metacache-entries_test.go:83:3-83:44: `be[i].metadata = []byte("something-else")`
$DIR/cmd/metacache-entries_test.go:86:2-86:16: `a.merge(b, -1)`
$DIR/cmd/metacache-entries_test.go:86:3-86:16: `.merge(b, -1)`
$DIR/cmd/metacache-entries_test.go:89:2-89:20: `sort.Strings(want)`
$DIR/cmd/metacache-entries_test.go:89:6-89:20: `.Strings(want)`
$DIR/cmd/metacache-entries_test.go:90:10-90:20: `.entries()`
$DIR/cmd/metacache-entries_test.go:90:20-90:28: `.names()`
$DIR/cmd/metacache-entries_test.go:104:2-104:26: `data.filterObjectsOnly()`
$DIR/cmd/metacache-entries_test.go:104:6-104:26: `.filterObjectsOnly()`
$DIR/cmd/metacache-entries_test.go:105:13-105:23: `.entries()`
$DIR/cmd/metacache-entries_test.go:105:23-105:31: `.names()`
$DIR/cmd/metacache-entries_test.go:107:13-107:34: `.DeepEqual(want, got)`
$DIR/cmd/metacache-entries_test.go:114:2-114:27: `data.filterPrefixesOnly()`
$DIR/cmd/metacache-entries_test.go:114:6-114:27: `.filterPrefixesOnly()`
$DIR/cmd/metacache-entries_test.go:115:13-115:23: `.entries()`
$DIR/cmd/metacache-entries_test.go:115:23-115:31: `.names()`
$DIR/cmd/metacache-entries_test.go:117:13-117:34: `.DeepEqual(want, got)`
$DIR/cmd/metacache-entries_test.go:124:2-124:68: `data.filterRecursiveEntries("src/compress/bzip2/", slashSeparator)`
$DIR/cmd/metacache-entries_test.go:124:6-124:68: `.filterRecursiveEntries("src/compress/bzip2/", slashSeparator)`
$DIR/cmd/metacache-entries_test.go:125:13-125:23: `.entries()`
$DIR/cmd/metacache-entries_test.go:125:23-125:31: `.names()`
$DIR/cmd/metacache-entries_test.go:127:13-127:34: `.DeepEqual(want, got)`
$DIR/cmd/metacache-entries_test.go:134:2-134:49: `data.filterRecursiveEntries("", slashSeparator)`
$DIR/cmd/metacache-entries_test.go:134:6-134:49: `.filterRecursiveEntries("", slashSeparator)`
$DIR/cmd/metacache-entries_test.go:135:13-135:23: `.entries()`
$DIR/cmd/metacache-entries_test.go:135:23-135:31: `.names()`
$DIR/cmd/metacache-entries_test.go:137:13-137:34: `.DeepEqual(want, got)`
$DIR/cmd/metacache-entries_test.go:145:2-145:43: `data.filterRecursiveEntries("", "bzip2/")`
$DIR/cmd/metacache-entries_test.go:145:6-145:43: `.filterRecursiveEntries("", "bzip2/")`
$DIR/cmd/metacache-entries_test.go:146:13-146:23: `.entries()`
$DIR/cmd/metacache-entries_test.go:146:23-146:31: `.names()`
$DIR/cmd/metacache-entries_test.go:148:13-148:34: `.DeepEqual(want, got)`
$DIR/cmd/metacache-entries_test.go:155:2-155:42: `data.filterPrefix("src/compress/bzip2/")`
$DIR/cmd/metacache-entries_test.go:155:6-155:42: `.filterPrefix("src/compress/bzip2/")`
$DIR/cmd/metacache-entries_test.go:156:13-156:23: `.entries()`
$DIR/cmd/metacache-entries_test.go:156:23-156:31: `.names()`
$DIR/cmd/metacache-entries_test.go:158:13-158:34: `.DeepEqual(want, got)`
$DIR/cmd/metacache-entries_test.go:215:3-222:5: `t.Run(tt.testName, func(t *testing.T) {
			e := metaCacheEntry{
				name: tt.entry,
			}
			if got := e.isInDir(tt.dir, tt.sep); got != tt.want {
				t.Errorf("isInDir() = %v, want %v", got, tt.want)
			}
		})`
$DIR/cmd/metacache-entries_test.go:215:4-222:5: `.Run(tt.testName, func(t *testing.T) {
			e := metaCacheEntry{
				name: tt.entry,
			}
			if got := e.isInDir(tt.dir, tt.sep); got != tt.want {
				t.Errorf("isInDir() = %v, want %v", got, tt.want)
			}
		})`
$DIR/cmd/metacache-entries_test.go:219:15-219:39: `.isInDir(tt.dir, tt.sep)`
$DIR/cmd/metacache-entries_test.go:227:23-227:57: `.Parse("2006/01/02", "2015/02/25")`
$DIR/cmd/metacache-entries_test.go:236:25-236:47: `.Add(30 * time.Minute)`
$DIR/cmd/metacache-entries_test.go:236:47-236:58: `.UnixNano()`
$DIR/cmd/metacache-entries_test.go:248:25-248:47: `.Add(15 * time.Minute)`
$DIR/cmd/metacache-entries_test.go:248:47-248:58: `.UnixNano()`
$DIR/cmd/metacache-entries_test.go:260:25-260:47: `.Add(60 * time.Minute)`
$DIR/cmd/metacache-entries_test.go:260:47-260:58: `.UnixNano()`
$DIR/cmd/metacache-entries_test.go:267:25-267:47: `.Add(30 * time.Minute)`
$DIR/cmd/metacache-entries_test.go:267:47-267:58: `.UnixNano()`
$DIR/cmd/metacache-entries_test.go:279:25-279:47: `.Add(60 * time.Minute)`
$DIR/cmd/metacache-entries_test.go:279:47-279:58: `.UnixNano()`
$DIR/cmd/metacache-entries_test.go:294:25-294:47: `.Add(60 * time.Minute)`
$DIR/cmd/metacache-entries_test.go:294:47-294:58: `.UnixNano()`
$DIR/cmd/metacache-entries_test.go:306:25-306:47: `.Add(90 * time.Minute)`
$DIR/cmd/metacache-entries_test.go:306:47-306:58: `.UnixNano()`
$DIR/cmd/metacache-entries_test.go:317:25-317:47: `.Add(90 * time.Minute)`
$DIR/cmd/metacache-entries_test.go:317:47-317:58: `.UnixNano()`
$DIR/cmd/metacache-entries_test.go:324:25-324:47: `.Add(60 * time.Minute)`
$DIR/cmd/metacache-entries_test.go:324:47-324:58: `.UnixNano()`
$DIR/cmd/metacache-entries_test.go:331:25-331:47: `.Add(60 * time.Minute)`
$DIR/cmd/metacache-entries_test.go:331:47-331:58: `.UnixNano()`
$DIR/cmd/metacache-entries_test.go:339:25-339:47: `.Add(30 * time.Minute)`
$DIR/cmd/metacache-entries_test.go:339:47-339:58: `.UnixNano()`
$DIR/cmd/metacache-entries_test.go:351:25-351:47: `.Add(90 * time.Minute)`
$DIR/cmd/metacache-entries_test.go:351:47-351:58: `.UnixNano()`
$DIR/cmd/metacache-entries_test.go:363:25-363:47: `.Add(90 * time.Minute)`
$DIR/cmd/metacache-entries_test.go:363:47-363:58: `.UnixNano()`
$DIR/cmd/metacache-entries_test.go:370:25-370:47: `.Add(15 * time.Minute)`
$DIR/cmd/metacache-entries_test.go:370:47-370:58: `.UnixNano()`
$DIR/cmd/metacache-entries_test.go:380:3-380:21: `xl.sortByModTime()`
$DIR/cmd/metacache-entries_test.go:380:5-380:21: `.sortByModTime()`
$DIR/cmd/metacache-entries_test.go:385:3-385:41: `entry.metadata, err = xl.AppendTo(nil)`
$DIR/cmd/metacache-entries_test.go:385:27-385:41: `.AppendTo(nil)`
$DIR/cmd/metacache-entries_test.go:389:3-389:29: `inputSerialized[i] = entry`
$DIR/cmd/metacache-entries_test.go:634:14-634:37: `.New(rand.NewSource(0))`
$DIR/cmd/metacache-entries_test.go:634:23-634:36: `.NewSource(0)`
$DIR/cmd/metacache-entries_test.go:637:4-656:6: `t.Run(fmt.Sprintf("test-%d-%s-run-%d", testID, tt.name, i), func(t *testing.T) {
				if i > 0 {
					rng.Shuffle(len(tt.m), func(i, j int) {
						tt.m[i], tt.m[j] = tt.m[j], tt.m[i]
					})
				}
				gotSelected, gotOk := tt.m.resolve(&tt.r)
				if gotOk != tt.wantOk {
					t.Errorf("resolve() gotOk = %v, want %v", gotOk, tt.wantOk)
				}
				if gotSelected != nil {
					gotSelected.cached = nil
					gotSelected.reusable = false
				}
				if !reflect.DeepEqual(gotSelected, tt.wantSelected) {
					wantM, _ := tt.wantSelected.xlmeta()
					gotM, _ := gotSelected.xlmeta()
					t.Errorf("resolve() gotSelected = \n%#v, want \n%#v", *gotM, *wantM)
				}
			})`
$DIR/cmd/metacache-entries_test.go:637:5-656:6: `.Run(fmt.Sprintf("test-%d-%s-run-%d", testID, tt.name, i), func(t *testing.T) {
				if i > 0 {
					rng.Shuffle(len(tt.m), func(i, j int) {
						tt.m[i], tt.m[j] = tt.m[j], tt.m[i]
					})
				}
				gotSelected, gotOk := tt.m.resolve(&tt.r)
				if gotOk != tt.wantOk {
					t.Errorf("resolve() gotOk = %v, want %v", gotOk, tt.wantOk)
				}
				if gotSelected != nil {
					gotSelected.cached = nil
					gotSelected.reusable = false
				}
				if !reflect.DeepEqual(gotSelected, tt.wantSelected) {
					wantM, _ := tt.wantSelected.xlmeta()
					gotM, _ := gotSelected.xlmeta()
					t.Errorf("resolve() gotSelected = \n%#v, want \n%#v", *gotM, *wantM)
				}
			})`
$DIR/cmd/metacache-entries_test.go:637:13-637:62: `.Sprintf("test-%d-%s-run-%d", testID, tt.name, i)`
$DIR/cmd/metacache-entries_test.go:639:6-641:8: `rng.Shuffle(len(tt.m), func(i, j int) {
						tt.m[i], tt.m[j] = tt.m[j], tt.m[i]
					})`
$DIR/cmd/metacache-entries_test.go:639:9-641:8: `.Shuffle(len(tt.m), func(i, j int) {
						tt.m[i], tt.m[j] = tt.m[j], tt.m[i]
					})`
$DIR/cmd/metacache-entries_test.go:640:7-640:42: `tt.m[i], tt.m[j] = tt.m[j], tt.m[i]`
$DIR/cmd/metacache-entries_test.go:643:29-643:46: `.m.resolve(&tt.r)`
$DIR/cmd/metacache-entries_test.go:648:6-648:30: `gotSelected.cached = nil`
$DIR/cmd/metacache-entries_test.go:649:6-649:34: `gotSelected.reusable = false`
$DIR/cmd/metacache-entries_test.go:651:16-651:56: `.DeepEqual(gotSelected, tt.wantSelected)`
$DIR/cmd/metacache-entries_test.go:652:20-652:42: `.wantSelected.xlmeta()`
$DIR/cmd/metacache-entries_test.go:653:28-653:37: `.xlmeta()`
$DIR/cmd/metacache-stream_test.go:54:17-54:31: `.readNames(-1)`
$DIR/cmd/metacache-stream_test.go:59:13-59:36: `.DeepEqual(names, want)`
$DIR/cmd/metacache-stream_test.go:67:19-67:53: `.readN(-1, false, true, false, "")`
$DIR/cmd/metacache-stream_test.go:72:31-72:41: `.entries()`
$DIR/cmd/metacache-stream_test.go:77:12-77:18: `.len()`
$DIR/cmd/metacache-stream_test.go:81:2-81:17: `want = want[:0]`
$DIR/cmd/metacache-stream_test.go:82:2-82:51: `entries, err = r.readN(0, false, true, false, "")`
$DIR/cmd/metacache-stream_test.go:82:18-82:51: `.readN(0, false, true, false, "")`
$DIR/cmd/metacache-stream_test.go:86:12-86:18: `.len()`
$DIR/cmd/metacache-stream_test.go:91:2-91:28: `r = loadMetacacheSample(t)`
$DIR/cmd/metacache-stream_test.go:93:2-93:51: `entries, err = r.readN(0, false, true, false, "")`
$DIR/cmd/metacache-stream_test.go:93:18-93:51: `.readN(0, false, true, false, "")`
$DIR/cmd/metacache-stream_test.go:97:12-97:18: `.len()`
$DIR/cmd/metacache-stream_test.go:101:2-101:51: `entries, err = r.readN(5, false, true, false, "")`
$DIR/cmd/metacache-stream_test.go:101:18-101:51: `.readN(5, false, true, false, "")`
$DIR/cmd/metacache-stream_test.go:105:2-105:37: `want = loadMetacacheSampleNames[:5]`
$DIR/cmd/metacache-stream_test.go:106:12-106:18: `.len()`
$DIR/cmd/metacache-stream_test.go:110:31-110:41: `.entries()`
$DIR/cmd/metacache-stream_test.go:120:19-120:53: `.readN(-1, false, true, false, "")`
$DIR/cmd/metacache-stream_test.go:126:31-126:41: `.entries()`
$DIR/cmd/metacache-stream_test.go:130:12-130:20: `.isDir()`
$DIR/cmd/metacache-stream_test.go:131:4-131:39: `noDirs = append(noDirs, entry.name)`
$DIR/cmd/metacache-stream_test.go:134:12-134:18: `.len()`
$DIR/cmd/metacache-stream_test.go:138:2-138:15: `want = noDirs`
$DIR/cmd/metacache-stream_test.go:139:2-139:28: `r = loadMetacacheSample(t)`
$DIR/cmd/metacache-stream_test.go:141:2-141:53: `entries, err = r.readN(-1, false, false, false, "")`
$DIR/cmd/metacache-stream_test.go:141:18-141:53: `.readN(-1, false, false, false, "")`
$DIR/cmd/metacache-stream_test.go:145:31-145:41: `.entries()`
$DIR/cmd/metacache-stream_test.go:150:12-150:18: `.len()`
$DIR/cmd/metacache-stream_test.go:154:2-154:17: `want = want[:0]`
$DIR/cmd/metacache-stream_test.go:155:2-155:52: `entries, err = r.readN(0, false, false, false, "")`
$DIR/cmd/metacache-stream_test.go:155:18-155:52: `.readN(0, false, false, false, "")`
$DIR/cmd/metacache-stream_test.go:159:12-159:18: `.len()`
$DIR/cmd/metacache-stream_test.go:164:2-164:28: `r = loadMetacacheSample(t)`
$DIR/cmd/metacache-stream_test.go:166:2-166:52: `entries, err = r.readN(0, false, false, false, "")`
$DIR/cmd/metacache-stream_test.go:166:18-166:52: `.readN(0, false, false, false, "")`
$DIR/cmd/metacache-stream_test.go:170:12-170:18: `.len()`
$DIR/cmd/metacache-stream_test.go:174:2-174:52: `entries, err = r.readN(5, false, false, false, "")`
$DIR/cmd/metacache-stream_test.go:174:18-174:52: `.readN(5, false, false, false, "")`
$DIR/cmd/metacache-stream_test.go:178:2-178:19: `want = noDirs[:5]`
$DIR/cmd/metacache-stream_test.go:179:12-179:18: `.len()`
$DIR/cmd/metacache-stream_test.go:183:31-183:41: `.entries()`
$DIR/cmd/metacache-stream_test.go:193:19-193:72: `.readN(-1, false, true, false, "src/compress/bzip2/")`
$DIR/cmd/metacache-stream_test.go:198:31-198:41: `.entries()`
$DIR/cmd/metacache-stream_test.go:203:12-203:18: `.len()`
$DIR/cmd/metacache-stream_test.go:207:2-207:28: `r = loadMetacacheSample(t)`
$DIR/cmd/metacache-stream_test.go:209:2-209:64: `entries, err = r.readN(-1, false, true, false, "src/nonexist")`
$DIR/cmd/metacache-stream_test.go:209:18-209:64: `.readN(-1, false, true, false, "src/nonexist")`
$DIR/cmd/metacache-stream_test.go:213:2-213:37: `want = loadMetacacheSampleNames[:0]`
$DIR/cmd/metacache-stream_test.go:214:12-214:18: `.len()`
$DIR/cmd/metacache-stream_test.go:217:31-217:41: `.entries()`
$DIR/cmd/metacache-stream_test.go:223:2-223:28: `r = loadMetacacheSample(t)`
$DIR/cmd/metacache-stream_test.go:225:2-225:57: `entries, err = r.readN(-1, false, true, false, "src/a")`
$DIR/cmd/metacache-stream_test.go:225:18-225:57: `.readN(-1, false, true, false, "src/a")`
$DIR/cmd/metacache-stream_test.go:229:2-229:37: `want = loadMetacacheSampleNames[:0]`
$DIR/cmd/metacache-stream_test.go:230:12-230:18: `.len()`
$DIR/cmd/metacache-stream_test.go:233:31-233:41: `.entries()`
$DIR/cmd/metacache-stream_test.go:239:2-239:28: `r = loadMetacacheSample(t)`
$DIR/cmd/metacache-stream_test.go:241:2-241:71: `entries, err = r.readN(-1, false, true, false, "src/compress/zlib/e")`
$DIR/cmd/metacache-stream_test.go:241:18-241:71: `.readN(-1, false, true, false, "src/compress/zlib/e")`
$DIR/cmd/metacache-stream_test.go:245:2-245:54: `want = []string{"src/compress/zlib/example_test.go"}`
$DIR/cmd/metacache-stream_test.go:246:12-246:18: `.len()`
$DIR/cmd/metacache-stream_test.go:249:31-249:41: `.entries()`
$DIR/cmd/metacache-stream_test.go:260:10-267:4: `.readFn(func(entry metaCacheEntry) bool {
		want := loadMetacacheSampleNames[i]
		if entry.name != want {
			t.Errorf("entry %d, want %q, got %q", i, want, entry.name)
		}
		i++
		return true
	})`
$DIR/cmd/metacache-stream_test.go:265:3-265:6: `i++`
$DIR/cmd/metacache-stream_test.go:279:2-279:11: `wg.Add(1)`
$DIR/cmd/metacache-stream_test.go:279:4-279:11: `.Add(1)`
$DIR/cmd/metacache-stream_test.go:281:3-281:50: `readErr = r.readAll(context.Background(), objs)`
$DIR/cmd/metacache-stream_test.go:281:14-281:50: `.readAll(context.Background(), objs)`
$DIR/cmd/metacache-stream_test.go:281:30-281:43: `.Background()`
$DIR/cmd/metacache-stream_test.go:282:3-282:12: `wg.Done()`
$DIR/cmd/metacache-stream_test.go:282:5-282:12: `.Done()`
$DIR/cmd/metacache-stream_test.go:290:3-290:6: `i++`
$DIR/cmd/metacache-stream_test.go:292:2-292:11: `wg.Wait()`
$DIR/cmd/metacache-stream_test.go:292:4-292:11: `.Wait()`
$DIR/cmd/metacache-stream_test.go:301:10-301:56: `.forwardTo("src/compress/zlib/reader_test.go")`
$DIR/cmd/metacache-stream_test.go:305:17-305:31: `.readNames(-1)`
$DIR/cmd/metacache-stream_test.go:310:13-310:36: `.DeepEqual(names, want)`
$DIR/cmd/metacache-stream_test.go:315:2-315:28: `r = loadMetacacheSample(t)`
$DIR/cmd/metacache-stream_test.go:316:2-316:49: `err = r.forwardTo("src/compress/zlib/reader_t")`
$DIR/cmd/metacache-stream_test.go:316:9-316:49: `.forwardTo("src/compress/zlib/reader_t")`
$DIR/cmd/metacache-stream_test.go:320:2-320:30: `names, err = r.readNames(-1)`
$DIR/cmd/metacache-stream_test.go:320:16-320:30: `.readNames(-1)`
$DIR/cmd/metacache-stream_test.go:324:13-324:36: `.DeepEqual(names, want)`
$DIR/cmd/metacache-stream_test.go:333:19-333:26: `.next()`
$DIR/cmd/metacache-stream_test.go:347:16-347:23: `.peek()`
$DIR/cmd/metacache-stream_test.go:357:19-357:26: `.next()`
$DIR/cmd/metacache-stream_test.go:372:10-378:4: `.readFn(func(object metaCacheEntry) bool {
		err := w.write(object)
		if err != nil {
			t.Fatal(err)
		}
		return true
	})`
$DIR/cmd/metacache-stream_test.go:373:11-373:25: `.write(object)`
$DIR/cmd/metacache-stream_test.go:383:2-383:17: `err = w.Close()`
$DIR/cmd/metacache-stream_test.go:388:2-388:30: `r = newMetacacheReader(&buf)`
$DIR/cmd/metacache-stream_test.go:390:17-390:31: `.readNames(-1)`
$DIR/cmd/metacache-stream_test.go:395:13-395:36: `.DeepEqual(names, want)`
$DIR/cmd/metacache-stream_test.go:403:17-403:30: `.readNames(5)`
$DIR/cmd/metacache-stream_test.go:408:13-408:36: `.DeepEqual(names, want)`
$DIR/cmd/metacache-stream_test.go:411:2-411:17: `err = r.skip(5)`
$DIR/cmd/metacache-stream_test.go:411:9-411:17: `.skip(5)`
$DIR/cmd/metacache-stream_test.go:415:2-415:29: `names, err = r.readNames(5)`
$DIR/cmd/metacache-stream_test.go:415:16-415:29: `.readNames(5)`
$DIR/cmd/metacache-stream_test.go:419:2-419:40: `want = loadMetacacheSampleNames[10:15]`
$DIR/cmd/metacache-stream_test.go:420:13-420:36: `.DeepEqual(names, want)`
$DIR/cmd/metacache-stream_test.go:424:2-424:45: `err = r.skip(len(loadMetacacheSampleNames))`
$DIR/cmd/metacache-stream_test.go:424:9-424:45: `.skip(len(loadMetacacheSampleNames))`
$DIR/cmd/metacache_gen_test.go:14:15-14:31: `.MarshalMsg(nil)`
$DIR/cmd/metacache_gen_test.go:18:16-18:34: `.UnmarshalMsg(bts)`
$DIR/cmd/metacache_gen_test.go:26:2-26:28: `left, err = msgp.Skip(bts)`
$DIR/cmd/metacache_gen_test.go:26:18-26:28: `.Skip(bts)`
$DIR/cmd/metacache_gen_test.go:73:2-73:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/metacache_gen_test.go:73:6-73:23: `.Encode(&buf, &v)`
$DIR/cmd/metacache_gen_test.go:75:8-75:18: `.Msgsize()`
$DIR/cmd/metacache_gen_test.go:76:8-76:14: `.Len()`
$DIR/cmd/metacache_gen_test.go:81:13-81:31: `.Decode(&buf, &vn)`
$DIR/cmd/metacache_gen_test.go:86:2-86:13: `buf.Reset()`
$DIR/cmd/metacache_gen_test.go:86:5-86:13: `.Reset()`
$DIR/cmd/metacache_gen_test.go:87:2-87:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/metacache_gen_test.go:87:6-87:23: `.Encode(&buf, &v)`
$DIR/cmd/metacache_gen_test.go:88:2-88:35: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/metacache_gen_test.go:88:12-88:28: `.NewReader(&buf)`
$DIR/cmd/metacache_gen_test.go:88:28-88:35: `.Skip()`
$DIR/cmd/metacache_test.go:199:3-203:5: `t.Run(tt.name, func(t *testing.T) {
			if got := baseDirFromPrefix(tt.prefix); got != tt.want {
				t.Errorf("baseDirFromPrefix() = %v, want %v", got, tt.want)
			}
		})`
$DIR/cmd/metacache_test.go:199:4-203:5: `.Run(tt.name, func(t *testing.T) {
			if got := baseDirFromPrefix(tt.prefix); got != tt.want {
				t.Errorf("baseDirFromPrefix() = %v, want %v", got, tt.want)
			}
		})`
$DIR/cmd/metacache_test.go:211:3-223:5: `t.Run(tt.id, func(t *testing.T) {
			var want bool
			if i >= len(wantResults) {
				t.Logf("no expected result for test #%d", i)
			} else {
				want = wantResults[i]
			}

			got := tt.finished()
			if got != want {
				t.Errorf("#%d: want %v, got %v", i, want, got)
			}
		})`
$DIR/cmd/metacache_test.go:211:4-223:5: `.Run(tt.id, func(t *testing.T) {
			var want bool
			if i >= len(wantResults) {
				t.Logf("no expected result for test #%d", i)
			} else {
				want = wantResults[i]
			}

			got := tt.finished()
			if got != want {
				t.Errorf("#%d: want %v, got %v", i, want, got)
			}
		})`
$DIR/cmd/metacache_test.go:216:5-216:26: `want = wantResults[i]`
$DIR/cmd/metacache_test.go:219:13-219:24: `.finished()`
$DIR/cmd/metacache_test.go:232:3-244:5: `t.Run(tt.id, func(t *testing.T) {
			var want bool
			if i >= len(wantResults) {
				t.Logf("no expected result for test #%d", i)
			} else {
				want = wantResults[i]
			}

			got := tt.worthKeeping()
			if got != want {
				t.Errorf("#%d: want %v, got %v", i, want, got)
			}
		})`
$DIR/cmd/metacache_test.go:232:4-244:5: `.Run(tt.id, func(t *testing.T) {
			var want bool
			if i >= len(wantResults) {
				t.Logf("no expected result for test #%d", i)
			} else {
				want = wantResults[i]
			}

			got := tt.worthKeeping()
			if got != want {
				t.Errorf("#%d: want %v, got %v", i, want, got)
			}
		})`
$DIR/cmd/metacache_test.go:237:5-237:26: `want = wantResults[i]`
$DIR/cmd/metacache_test.go:240:13-240:28: `.worthKeeping()`
$DIR/cmd/namespace-lock_test.go:45:2-45:29: `t.Skip("long test skip it")`
$DIR/cmd/namespace-lock_test.go:45:3-45:29: `.Skip("long test skip it")`
$DIR/cmd/namespace-lock_test.go:47:16-47:29: `.Background()`
$DIR/cmd/namespace-lock_test.go:53:11-53:78: `.lock(ctx, "volume", "path", "source", "opsID", false, time.Second)`
$DIR/cmd/namespace-lock_test.go:61:4-61:82: `nsLk.lock(ctx, "volume", "path", "source", "opsID", false, 1*time.Millisecond)`
$DIR/cmd/namespace-lock_test.go:61:8-61:82: `.lock(ctx, "volume", "path", "source", "opsID", false, 1*time.Millisecond)`
$DIR/cmd/namespace-lock_test.go:63:3-63:35: `time.Sleep(1 * time.Millisecond)`
$DIR/cmd/namespace-lock_test.go:63:7-63:35: `.Sleep(1 * time.Millisecond)`
$DIR/cmd/namespace-lock_test.go:66:3-66:39: `nsLk.unlock("volume", "path", false)`
$DIR/cmd/namespace-lock_test.go:66:7-66:39: `.unlock("volume", "path", false)`
$DIR/cmd/namespace-lock_test.go:70:3-70:27: `nsLk.lockMapMutex.Lock()`
$DIR/cmd/namespace-lock_test.go:70:7-70:27: `.lockMapMutex.Lock()`
$DIR/cmd/namespace-lock_test.go:75:4-75:74: `lk3ch <- nsLk.lock(ctx, "volume", "path", "source", "opsID", false, 0)`
$DIR/cmd/namespace-lock_test.go:75:17-75:74: `.lock(ctx, "volume", "path", "source", "opsID", false, 0)`
$DIR/cmd/namespace-lock_test.go:81:4-81:74: `lk4ch <- nsLk.lock(ctx, "volume", "path", "source", "opsID", false, 0)`
$DIR/cmd/namespace-lock_test.go:81:17-81:74: `.lock(ctx, "volume", "path", "source", "opsID", false, 0)`
$DIR/cmd/namespace-lock_test.go:83:3-83:20: `runtime.Gosched()`
$DIR/cmd/namespace-lock_test.go:83:10-83:20: `.Gosched()`
$DIR/cmd/namespace-lock_test.go:86:3-86:29: `nsLk.lockMapMutex.Unlock()`
$DIR/cmd/namespace-lock_test.go:86:7-86:29: `.lockMapMutex.Unlock()`
$DIR/cmd/namespace-lock_test.go:95:3-95:10: `<-lk2ch`
$DIR/cmd/net_test.go:108:14-108:58: `.DeepEqual(testCase.sortedIPList, gotIPList)`
$DIR/cmd/net_test.go:118:7-118:36: `.CreateStringSet("127.0.0.1")`
$DIR/cmd/net_test.go:123:48-123:84: `.expectedIPList.Intersection(ipList)`
$DIR/cmd/net_test.go:123:84-123:94: `.IsEmpty()`
$DIR/cmd/net_test.go:135:20-135:49: `.CreateStringSet("127.0.0.1")`
$DIR/cmd/net_test.go:136:22-136:55: `.CreateStringSet("93.184.216.34")`
$DIR/cmd/net_test.go:152:48-152:84: `.expectedIPList.Intersection(ipList)`
$DIR/cmd/net_test.go:152:84-152:94: `.IsEmpty()`
$DIR/cmd/net_test.go:162:3-162:48: `globalMinioHost, globalMinioPort = host, port`
$DIR/cmd/net_test.go:174:3-174:66: `globalMinioHost, globalMinioPort = testCase.host, testCase.port`
$DIR/cmd/net_test.go:176:24-176:57: `.CreateStringSet(apiEndpoints...)`
$DIR/cmd/net_test.go:177:21-177:55: `.Contains(testCase.expectedResult)`
$DIR/cmd/net_test.go:202:22-202:64: `.Listen("tcp", net.JoinHostPort("", port))`
$DIR/cmd/net_test.go:202:40-202:63: `.JoinHostPort("", port)`
$DIR/cmd/net_test.go:255:3-267:5: `t.Run("", func(t *testing.T) {
			err := CheckLocalServerAddr(testCase.serverAddr)
			switch {
			case testCase.expectedErr == nil:
				if err != nil {
					t.Errorf("error: expected = <nil>, got = %v", err)
				}
			case err == nil:
				t.Errorf("error: expected = %v, got = <nil>", testCase.expectedErr)
			case testCase.expectedErr.Error() != err.Error():
				t.Errorf("error: expected = %v, got = %v", testCase.expectedErr, err)
			}
		})`
$DIR/cmd/net_test.go:255:4-267:5: `.Run("", func(t *testing.T) {
			err := CheckLocalServerAddr(testCase.serverAddr)
			switch {
			case testCase.expectedErr == nil:
				if err != nil {
					t.Errorf("error: expected = <nil>, got = %v", err)
				}
			case err == nil:
				t.Errorf("error: expected = %v, got = <nil>", testCase.expectedErr)
			case testCase.expectedErr.Error() != err.Error():
				t.Errorf("error: expected = %v, got = %v", testCase.expectedErr, err)
			}
		})`
$DIR/cmd/net_test.go:278:22-278:61: `.New("unable to process empty address")`
$DIR/cmd/net_test.go:316:25-316:64: `.New("unable to process empty address")`
$DIR/cmd/net_test.go:327:3-345:5: `t.Run("", func(t *testing.T) {
			sameAddr, err := sameLocalAddrs(testCase.addr1, testCase.addr2)
			if testCase.expectedErr != nil && err == nil {
				t.Errorf("should fail but succeeded")
			}
			if testCase.expectedErr == nil && err != nil {
				t.Errorf("should succeed but failed with %v", err)
			}
			if err == nil {
				if sameAddr != testCase.sameAddr {
					t.Errorf("expected: %v, found: %v", testCase.sameAddr, sameAddr)
				}
			} else {
				if err.Error() != testCase.expectedErr.Error() {
					t.Errorf("failed with different error, expected: '%v', found:'%v'.",
						testCase.expectedErr, err)
				}
			}
		})`
$DIR/cmd/net_test.go:327:4-345:5: `.Run("", func(t *testing.T) {
			sameAddr, err := sameLocalAddrs(testCase.addr1, testCase.addr2)
			if testCase.expectedErr != nil && err == nil {
				t.Errorf("should fail but succeeded")
			}
			if testCase.expectedErr == nil && err != nil {
				t.Errorf("should succeed but failed with %v", err)
			}
			if err == nil {
				if sameAddr != testCase.sameAddr {
					t.Errorf("expected: %v, found: %v", testCase.sameAddr, sameAddr)
				}
			} else {
				if err.Error() != testCase.expectedErr.Error() {
					t.Errorf("failed with different error, expected: '%v', found:'%v'.",
						testCase.expectedErr, err)
				}
			}
		})`
$DIR/cmd/object-api-multipart_test.go:37:3-37:11: `t.Skip()`
$DIR/cmd/object-api-multipart_test.go:37:4-37:11: `.Skip()`
$DIR/cmd/object-api-utils_test.go:42:3-42:11: `t.Skip()`
$DIR/cmd/object-api-utils_test.go:42:4-42:11: `.Skip()`
$DIR/cmd/object-api-utils_test.go:298:62-298:86: `.DeepEqual(got, tt.want)`
$DIR/cmd/object-api-utils_test.go:329:49-329:73: `.DeepEqual(got, tt.want)`
$DIR/cmd/object-api-utils_test.go:364:65-364:89: `.DeepEqual(got, tt.want)`
$DIR/cmd/object-api-utils_test.go:441:3-455:5: `t.Run(strconv.Itoa(i), func(t *testing.T) {
			got := test.objInfo.IsCompressed()
			if got != test.result {
				t.Errorf("IsCompressed: Expected %v but received %v",
					test.result, got)
			}
			got, gErr := test.objInfo.IsCompressedOK()
			if got != test.result {
				t.Errorf("IsCompressedOK: Expected %v but received %v",
					test.result, got)
			}
			if gErr != nil != test.err {
				t.Errorf("IsCompressedOK: want error: %t, got error: %v", test.err, gErr)
			}
		})`
$DIR/cmd/object-api-utils_test.go:441:4-455:5: `.Run(strconv.Itoa(i), func(t *testing.T) {
			got := test.objInfo.IsCompressed()
			if got != test.result {
				t.Errorf("IsCompressed: Expected %v but received %v",
					test.result, got)
			}
			got, gErr := test.objInfo.IsCompressedOK()
			if got != test.result {
				t.Errorf("IsCompressedOK: Expected %v but received %v",
					test.result, got)
			}
			if gErr != nil != test.err {
				t.Errorf("IsCompressedOK: want error: %t, got error: %v", test.err, gErr)
			}
		})`
$DIR/cmd/object-api-utils_test.go:441:16-441:24: `.Itoa(i)`
$DIR/cmd/object-api-utils_test.go:442:15-442:38: `.objInfo.IsCompressed()`
$DIR/cmd/object-api-utils_test.go:447:21-447:46: `.objInfo.IsCompressedOK()`
$DIR/cmd/object-api-utils_test.go:582:17-582:41: `.objInfo.GetActualSize()`
$DIR/cmd/object-api-utils_test.go:676:30-676:70: `.Repeat([]byte("hello, world"), 1000000)`
$DIR/cmd/object-api-utils_test.go:680:3-740:5: `t.Run(tt.name, func(t *testing.T) {
			buf := make([]byte, 100) // make small buffer to ensure multiple reads are required for large case

			r, idxCB := newS2CompressReader(bytes.NewReader(tt.data), int64(len(tt.data)), false)
			defer r.Close()

			var rdrBuf bytes.Buffer
			_, err := io.CopyBuffer(&rdrBuf, r, buf)
			if err != nil {
				t.Fatal(err)
			}
			r.Close()
			idx := idxCB()
			if !tt.wantIdx && len(idx) > 0 {
				t.Errorf("index returned above threshold")
			}
			if tt.wantIdx {
				if idx == nil {
					t.Errorf("no index returned")
				}
				var index s2.Index
				_, err = index.Load(s2.RestoreIndexHeaders(idx))
				if err != nil {
					t.Errorf("error loading index: %v", err)
				}
				t.Log("size:", len(idx))
				t.Log(string(index.JSON()))
				if index.TotalUncompressed != int64(len(tt.data)) {
					t.Errorf("Expected size %d, got %d", len(tt.data), index.TotalUncompressed)
				}
			}
			var stdBuf bytes.Buffer
			w := s2.NewWriter(&stdBuf)
			_, err = io.CopyBuffer(w, bytes.NewReader(tt.data), buf)
			if err != nil {
				t.Fatal(err)
			}
			err = w.Close()
			if err != nil {
				t.Fatal(err)
			}

			var (
				got  = rdrBuf.Bytes()
				want = stdBuf.Bytes()
			)
			if !bytes.Equal(got, want) {
				t.Errorf("encoded data does not match\n\t%q\n\t%q", got, want)
			}

			var decBuf bytes.Buffer
			decRdr := s2.NewReader(&rdrBuf)
			_, err = io.Copy(&decBuf, decRdr)
			if err != nil {
				t.Fatal(err)
			}

			if !bytes.Equal(tt.data, decBuf.Bytes()) {
				t.Errorf("roundtrip failed\n\t%q\n\t%q", tt.data, decBuf.Bytes())
			}
		})`
$DIR/cmd/object-api-utils_test.go:680:4-740:5: `.Run(tt.name, func(t *testing.T) {
			buf := make([]byte, 100) // make small buffer to ensure multiple reads are required for large case

			r, idxCB := newS2CompressReader(bytes.NewReader(tt.data), int64(len(tt.data)), false)
			defer r.Close()

			var rdrBuf bytes.Buffer
			_, err := io.CopyBuffer(&rdrBuf, r, buf)
			if err != nil {
				t.Fatal(err)
			}
			r.Close()
			idx := idxCB()
			if !tt.wantIdx && len(idx) > 0 {
				t.Errorf("index returned above threshold")
			}
			if tt.wantIdx {
				if idx == nil {
					t.Errorf("no index returned")
				}
				var index s2.Index
				_, err = index.Load(s2.RestoreIndexHeaders(idx))
				if err != nil {
					t.Errorf("error loading index: %v", err)
				}
				t.Log("size:", len(idx))
				t.Log(string(index.JSON()))
				if index.TotalUncompressed != int64(len(tt.data)) {
					t.Errorf("Expected size %d, got %d", len(tt.data), index.TotalUncompressed)
				}
			}
			var stdBuf bytes.Buffer
			w := s2.NewWriter(&stdBuf)
			_, err = io.CopyBuffer(w, bytes.NewReader(tt.data), buf)
			if err != nil {
				t.Fatal(err)
			}
			err = w.Close()
			if err != nil {
				t.Fatal(err)
			}

			var (
				got  = rdrBuf.Bytes()
				want = stdBuf.Bytes()
			)
			if !bytes.Equal(got, want) {
				t.Errorf("encoded data does not match\n\t%q\n\t%q", got, want)
			}

			var decBuf bytes.Buffer
			decRdr := s2.NewReader(&rdrBuf)
			_, err = io.Copy(&decBuf, decRdr)
			if err != nil {
				t.Fatal(err)
			}

			if !bytes.Equal(tt.data, decBuf.Bytes()) {
				t.Errorf("roundtrip failed\n\t%q\n\t%q", tt.data, decBuf.Bytes())
			}
		})`
$DIR/cmd/object-api-utils_test.go:683:41-683:60: `.NewReader(tt.data)`
$DIR/cmd/object-api-utils_test.go:687:16-687:44: `.CopyBuffer(&rdrBuf, r, buf)`
$DIR/cmd/object-api-utils_test.go:701:5-701:53: `_, err = index.Load(s2.RestoreIndexHeaders(idx))`
$DIR/cmd/object-api-utils_test.go:701:19-701:53: `.Load(s2.RestoreIndexHeaders(idx))`
$DIR/cmd/object-api-utils_test.go:701:27-701:52: `.RestoreIndexHeaders(idx)`
$DIR/cmd/object-api-utils_test.go:712:11-712:30: `.NewWriter(&stdBuf)`
$DIR/cmd/object-api-utils_test.go:713:4-713:60: `_, err = io.CopyBuffer(w, bytes.NewReader(tt.data), buf)`
$DIR/cmd/object-api-utils_test.go:713:15-713:60: `.CopyBuffer(w, bytes.NewReader(tt.data), buf)`
$DIR/cmd/object-api-utils_test.go:713:35-713:54: `.NewReader(tt.data)`
$DIR/cmd/object-api-utils_test.go:717:4-717:19: `err = w.Close()`
$DIR/cmd/object-api-utils_test.go:723:18-723:26: `.Bytes()`
$DIR/cmd/object-api-utils_test.go:724:18-724:26: `.Bytes()`
$DIR/cmd/object-api-utils_test.go:726:13-726:30: `.Equal(got, want)`
$DIR/cmd/object-api-utils_test.go:731:16-731:35: `.NewReader(&rdrBuf)`
$DIR/cmd/object-api-utils_test.go:732:4-732:37: `_, err = io.Copy(&decBuf, decRdr)`
$DIR/cmd/object-api-utils_test.go:732:15-732:37: `.Copy(&decBuf, decRdr)`
$DIR/cmd/object-api-utils_test.go:737:13-737:44: `.Equal(tt.data, decBuf.Bytes())`
$DIR/cmd/object-api-utils_test.go:737:35-737:43: `.Bytes()`
$DIR/cmd/object-handlers_test.go:206:2-206:34: `globalPolicySys = NewPolicySys()`
$DIR/cmd/object-handlers_test.go:207:17-207:38: `globalPolicySys = nil`
$DIR/cmd/object-handlers_test.go:328:2-328:34: `globalPolicySys = NewPolicySys()`
$DIR/cmd/object-handlers_test.go:329:17-329:38: `globalPolicySys = nil`
$DIR/cmd/object-handlers_test.go:640:2-640:34: `globalPolicySys = NewPolicySys()`
$DIR/cmd/object-handlers_test.go:641:17-641:38: `globalPolicySys = nil`
$DIR/cmd/object-handlers_test.go:836:2-836:34: `globalPolicySys = NewPolicySys()`
$DIR/cmd/object-handlers_test.go:837:17-837:38: `globalPolicySys = nil`
$DIR/cmd/os-readdir_test.go:37:14-37:42: `.Join(os.TempDir(), "issue")`
$DIR/cmd/os-readdir_test.go:37:22-37:32: `.TempDir()`
$DIR/cmd/os-readdir_test.go:38:14-38:49: `.WriteFile(file, []byte(""), 0o644)`
$DIR/cmd/os-readdir_test.go:41:10-41:26: `.RemoveAll(file)`
$DIR/cmd/os-readdir_test.go:44:27-44:47: `.Join(file, "mydir")`
$DIR/cmd/os-readdir_test.go:50:18-50:49: `.Join(os.TempDir(), "perm-dir")`
$DIR/cmd/os-readdir_test.go:50:26-50:36: `.TempDir()`
$DIR/cmd/os-readdir_test.go:51:15-51:53: `.MkdirAll(permDir, os.FileMode(0o200))`
$DIR/cmd/os-readdir_test.go:51:36-51:52: `.FileMode(0o200)`
$DIR/cmd/os-readdir_test.go:54:11-54:30: `.RemoveAll(permDir)`
$DIR/cmd/os-readdir_test.go:189:2-189:64: `testResults = append(testResults, setupTestReadDirEmpty(t)...)`
$DIR/cmd/os-readdir_test.go:191:2-191:64: `testResults = append(testResults, setupTestReadDirFiles(t)...)`
$DIR/cmd/os-readdir_test.go:193:2-193:66: `testResults = append(testResults, setupTestReadDirGeneric(t)...)`
$DIR/cmd/os-readdir_test.go:195:2-195:66: `testResults = append(testResults, setupTestReadDirSymlink(t)...)`
$DIR/cmd/os-readdir_test.go:206:4-206:25: `sort.Strings(entries)`
$DIR/cmd/os-readdir_test.go:206:8-206:25: `.Strings(entries)`
$DIR/cmd/os-readdir_test.go:234:11-234:21: `.TempDir()`
$DIR/cmd/os-readdir_test.go:237:13-237:88: `.WriteFile(filepath.Join(dir, fmt.Sprintf("%d", c)), []byte{}, os.ModePerm)`
$DIR/cmd/os-readdir_test.go:237:32-237:64: `.Join(dir, fmt.Sprintf("%d", c))`
$DIR/cmd/os-readdir_test.go:237:46-237:63: `.Sprintf("%d", c)`
$DIR/cmd/os-readdir_test.go:239:5-239:22: `os.RemoveAll(dir)`
$DIR/cmd/os-readdir_test.go:239:7-239:22: `.RemoveAll(dir)`
$DIR/cmd/os-readdir_test.go:245:4-245:21: `os.RemoveAll(dir)`
$DIR/cmd/os-readdir_test.go:245:6-245:21: `.RemoveAll(dir)`
$DIR/cmd/os-readdir_test.go:249:4-249:21: `os.RemoveAll(dir)`
$DIR/cmd/os-readdir_test.go:249:6-249:21: `.RemoveAll(dir)`
$DIR/cmd/os-readdir_test.go:253:3-253:20: `os.RemoveAll(dir)`
$DIR/cmd/os-readdir_test.go:253:5-253:20: `.RemoveAll(dir)`
$DIR/cmd/policy_test.go:34:10-40:5: `.NewStatement("",
				policy.Allow,
				policy.NewPrincipal("*"),
				policy.NewActionSet(policy.GetBucketLocationAction),
				policy.NewResourceSet(policy.NewResource("mybucket", "")),
				condition.NewFunctions(),
			)`
$DIR/cmd/policy_test.go:36:11-36:29: `.NewPrincipal("*")`
$DIR/cmd/policy_test.go:37:11-37:56: `.NewActionSet(policy.GetBucketLocationAction)`
$DIR/cmd/policy_test.go:38:11-38:62: `.NewResourceSet(policy.NewResource("mybucket", ""))`
$DIR/cmd/policy_test.go:38:33-38:61: `.NewResource("mybucket", "")`
$DIR/cmd/policy_test.go:39:14-39:29: `.NewFunctions()`
$DIR/cmd/policy_test.go:41:10-47:5: `.NewStatement("",
				policy.Allow,
				policy.NewPrincipal("*"),
				policy.NewActionSet(policy.PutObjectAction),
				policy.NewResourceSet(policy.NewResource("mybucket", "/myobject*")),
				condition.NewFunctions(),
			)`
$DIR/cmd/policy_test.go:43:11-43:29: `.NewPrincipal("*")`
$DIR/cmd/policy_test.go:44:11-44:48: `.NewActionSet(policy.PutObjectAction)`
$DIR/cmd/policy_test.go:45:11-45:72: `.NewResourceSet(policy.NewResource("mybucket", "/myobject*"))`
$DIR/cmd/policy_test.go:45:33-45:71: `.NewResource("mybucket", "/myobject*")`
$DIR/cmd/policy_test.go:46:14-46:29: `.NewFunctions()`
$DIR/cmd/policy_test.go:138:14-138:39: `.IsAllowed(testCase.args)`
$DIR/cmd/policy_test.go:167:10-173:5: `.NewStatement("",
				policy.Allow,
				policy.NewPrincipal("*"),
				policy.NewActionSet(policy.GetBucketLocationAction, policy.ListBucketAction),
				policy.NewResourceSet(policy.NewResource("mybucket", "")),
				condition.NewFunctions(),
			)`
$DIR/cmd/policy_test.go:169:11-169:29: `.NewPrincipal("*")`
$DIR/cmd/policy_test.go:170:11-170:81: `.NewActionSet(policy.GetBucketLocationAction, policy.ListBucketAction)`
$DIR/cmd/policy_test.go:171:11-171:62: `.NewResourceSet(policy.NewResource("mybucket", ""))`
$DIR/cmd/policy_test.go:171:33-171:61: `.NewResource("mybucket", "")`
$DIR/cmd/policy_test.go:172:14-172:29: `.NewFunctions()`
$DIR/cmd/policy_test.go:174:10-180:5: `.NewStatement("",
				policy.Allow,
				policy.NewPrincipal("*"),
				policy.NewActionSet(policy.GetObjectAction),
				policy.NewResourceSet(policy.NewResource("mybucket", "/myobject*")),
				condition.NewFunctions(),
			)`
$DIR/cmd/policy_test.go:176:11-176:29: `.NewPrincipal("*")`
$DIR/cmd/policy_test.go:177:11-177:48: `.NewActionSet(policy.GetObjectAction)`
$DIR/cmd/policy_test.go:178:11-178:72: `.NewResourceSet(policy.NewResource("mybucket", "/myobject*"))`
$DIR/cmd/policy_test.go:178:33-178:71: `.NewResource("mybucket", "/myobject*")`
$DIR/cmd/policy_test.go:179:14-179:29: `.NewFunctions()`
$DIR/cmd/policy_test.go:202:10-208:5: `.NewStatement("",
				policy.Allow,
				policy.NewPrincipal("*"),
				policy.NewActionSet(policy.PutObjectAction),
				policy.NewResourceSet(policy.NewResource("mybucket", "/myobject*")),
				condition.NewFunctions(),
			)`
$DIR/cmd/policy_test.go:204:11-204:29: `.NewPrincipal("*")`
$DIR/cmd/policy_test.go:205:11-205:48: `.NewActionSet(policy.PutObjectAction)`
$DIR/cmd/policy_test.go:206:11-206:72: `.NewResourceSet(policy.NewResource("mybucket", "/myobject*"))`
$DIR/cmd/policy_test.go:206:33-206:71: `.NewResource("mybucket", "/myobject*")`
$DIR/cmd/policy_test.go:207:14-207:29: `.NewFunctions()`
$DIR/cmd/policy_test.go:231:15-231:58: `.DeepEqual(result, testCase.expectedResult)`
$DIR/cmd/policy_test.go:247:10-253:5: `.NewStatement("",
				policy.Allow,
				policy.NewPrincipal("*"),
				policy.NewActionSet(policy.GetBucketLocationAction, policy.ListBucketAction),
				policy.NewResourceSet(policy.NewResource("mybucket", "")),
				condition.NewFunctions(),
			)`
$DIR/cmd/policy_test.go:249:11-249:29: `.NewPrincipal("*")`
$DIR/cmd/policy_test.go:250:11-250:81: `.NewActionSet(policy.GetBucketLocationAction, policy.ListBucketAction)`
$DIR/cmd/policy_test.go:251:11-251:62: `.NewResourceSet(policy.NewResource("mybucket", ""))`
$DIR/cmd/policy_test.go:251:33-251:61: `.NewResource("mybucket", "")`
$DIR/cmd/policy_test.go:252:14-252:29: `.NewFunctions()`
$DIR/cmd/policy_test.go:254:10-260:5: `.NewStatement("",
				policy.Allow,
				policy.NewPrincipal("*"),
				policy.NewActionSet(policy.GetObjectAction),
				policy.NewResourceSet(policy.NewResource("mybucket", "/myobject*")),
				condition.NewFunctions(),
			)`
$DIR/cmd/policy_test.go:256:11-256:29: `.NewPrincipal("*")`
$DIR/cmd/policy_test.go:257:11-257:48: `.NewActionSet(policy.GetObjectAction)`
$DIR/cmd/policy_test.go:258:11-258:72: `.NewResourceSet(policy.NewResource("mybucket", "/myobject*"))`
$DIR/cmd/policy_test.go:258:33-258:71: `.NewResource("mybucket", "/myobject*")`
$DIR/cmd/policy_test.go:259:14-259:29: `.NewFunctions()`
$DIR/cmd/policy_test.go:298:15-298:58: `.DeepEqual(result, testCase.expectedResult)`
$DIR/cmd/postpolicyform_test.go:69:3-77:5: `t.Run("", func(t *testing.T) {
			_, err := parsePostPolicyForm(strings.NewReader(testCase.policy))
			if testCase.success && err != nil {
				t.Errorf("Expected success but failed with %s", err)
			}
			if !testCase.success && err == nil {
				t.Errorf("Expected failed but succeeded")
			}
		})`
$DIR/cmd/postpolicyform_test.go:69:4-77:5: `.Run("", func(t *testing.T) {
			_, err := parsePostPolicyForm(strings.NewReader(testCase.policy))
			if testCase.success && err != nil {
				t.Errorf("Expected success but failed with %s", err)
			}
			if !testCase.success && err == nil {
				t.Errorf("Expected failed but succeeded")
			}
		})`
$DIR/cmd/postpolicyform_test.go:70:41-70:68: `.NewReader(testCase.policy)`
$DIR/cmd/postpolicyform_test.go:83:13-83:29: `.NewPostPolicy()`
$DIR/cmd/postpolicyform_test.go:84:2-84:28: `pp.SetBucket("testbucket")`
$DIR/cmd/postpolicyform_test.go:84:4-84:28: `.SetBucket("testbucket")`
$DIR/cmd/postpolicyform_test.go:85:2-85:33: `pp.SetContentType("image/jpeg")`
$DIR/cmd/postpolicyform_test.go:85:4-85:33: `.SetContentType("image/jpeg")`
$DIR/cmd/postpolicyform_test.go:86:2-86:46: `pp.SetUserMetadata("uuid", "14365123651274")`
$DIR/cmd/postpolicyform_test.go:86:4-86:46: `.SetUserMetadata("uuid", "14365123651274")`
$DIR/cmd/postpolicyform_test.go:87:2-87:44: `pp.SetKeyStartsWith("user/user1/filename")`
$DIR/cmd/postpolicyform_test.go:87:4-87:44: `.SetKeyStartsWith("user/user1/filename")`
$DIR/cmd/postpolicyform_test.go:88:2-88:45: `pp.SetContentLengthRange(1048579, 10485760)`
$DIR/cmd/postpolicyform_test.go:88:4-88:45: `.SetContentLengthRange(1048579, 10485760)`
$DIR/cmd/postpolicyform_test.go:89:2-89:34: `pp.SetSuccessStatusAction("201")`
$DIR/cmd/postpolicyform_test.go:89:4-89:34: `.SetSuccessStatusAction("201")`
$DIR/cmd/postpolicyform_test.go:91:2-103:3: `type testCase struct {
		Bucket              string
		Key                 string
		XAmzDate            string
		XAmzAlgorithm       string
		XAmzCredential      string
		XAmzMetaUUID        string
		ContentType         string
		SuccessActionStatus string
		Policy              string
		Expired             bool
		expectedErr         error
	}`
$DIR/cmd/postpolicyform_test.go:128:3-128:38: `formValues.Set("Bucket", tt.Bucket)`
$DIR/cmd/postpolicyform_test.go:128:13-128:38: `.Set("Bucket", tt.Bucket)`
$DIR/cmd/postpolicyform_test.go:129:3-129:32: `formValues.Set("Key", tt.Key)`
$DIR/cmd/postpolicyform_test.go:129:13-129:32: `.Set("Key", tt.Key)`
$DIR/cmd/postpolicyform_test.go:130:3-130:49: `formValues.Set("Content-Type", tt.ContentType)`
$DIR/cmd/postpolicyform_test.go:130:13-130:49: `.Set("Content-Type", tt.ContentType)`
$DIR/cmd/postpolicyform_test.go:131:3-131:44: `formValues.Set("X-Amz-Date", tt.XAmzDate)`
$DIR/cmd/postpolicyform_test.go:131:13-131:44: `.Set("X-Amz-Date", tt.XAmzDate)`
$DIR/cmd/postpolicyform_test.go:132:3-132:53: `formValues.Set("X-Amz-Meta-Uuid", tt.XAmzMetaUUID)`
$DIR/cmd/postpolicyform_test.go:132:13-132:53: `.Set("X-Amz-Meta-Uuid", tt.XAmzMetaUUID)`
$DIR/cmd/postpolicyform_test.go:133:3-133:54: `formValues.Set("X-Amz-Algorithm", tt.XAmzAlgorithm)`
$DIR/cmd/postpolicyform_test.go:133:13-133:54: `.Set("X-Amz-Algorithm", tt.XAmzAlgorithm)`
$DIR/cmd/postpolicyform_test.go:134:3-134:56: `formValues.Set("X-Amz-Credential", tt.XAmzCredential)`
$DIR/cmd/postpolicyform_test.go:134:13-134:56: `.Set("X-Amz-Credential", tt.XAmzCredential)`
$DIR/cmd/postpolicyform_test.go:137:4-137:46: `pp.SetExpires(UTCNow().AddDate(0, 0, -10))`
$DIR/cmd/postpolicyform_test.go:137:6-137:46: `.SetExpires(UTCNow().AddDate(0, 0, -10))`
$DIR/cmd/postpolicyform_test.go:137:26-137:45: `.AddDate(0, 0, -10)`
$DIR/cmd/postpolicyform_test.go:140:4-140:45: `pp.SetExpires(UTCNow().AddDate(0, 0, 10))`
$DIR/cmd/postpolicyform_test.go:140:6-140:45: `.SetExpires(UTCNow().AddDate(0, 0, 10))`
$DIR/cmd/postpolicyform_test.go:140:26-140:44: `.AddDate(0, 0, 10)`
$DIR/cmd/postpolicyform_test.go:143:3-143:83: `formValues.Set("Policy", base64.StdEncoding.EncodeToString([]byte(pp.String())))`
$DIR/cmd/postpolicyform_test.go:143:13-143:83: `.Set("Policy", base64.StdEncoding.EncodeToString([]byte(pp.String())))`
$DIR/cmd/postpolicyform_test.go:143:34-143:82: `.StdEncoding.EncodeToString([]byte(pp.String()))`
$DIR/cmd/postpolicyform_test.go:143:71-143:80: `.String()`
$DIR/cmd/postpolicyform_test.go:144:3-144:66: `formValues.Set("Success_action_status", tt.SuccessActionStatus)`
$DIR/cmd/postpolicyform_test.go:144:13-144:66: `.Set("Success_action_status", tt.SuccessActionStatus)`
$DIR/cmd/postpolicyform_test.go:145:29-145:110: `.StdEncoding.DecodeString(base64.StdEncoding.EncodeToString([]byte(pp.String())))`
$DIR/cmd/postpolicyform_test.go:145:61-145:109: `.StdEncoding.EncodeToString([]byte(pp.String()))`
$DIR/cmd/postpolicyform_test.go:145:98-145:107: `.String()`
$DIR/cmd/postpolicyform_test.go:150:51-150:74: `.NewReader(policyBytes)`
$DIR/cmd/postpolicyform_test.go:155:3-155:52: `err = checkPostPolicy(formValues, postPolicyForm)`
$DIR/cmd/server-main_test.go:28:24-28:57: `.WithCancel(context.Background())`
$DIR/cmd/server-main_test.go:28:43-28:56: `.Background()`
$DIR/cmd/server-main_test.go:51:2-51:13: `nDisks = 16`
$DIR/cmd/server-main_test.go:52:2-52:37: `disks, err = getRandomDisks(nDisks)`
$DIR/cmd/server-main_test.go:58:2-58:64: `obj, err = newObjectLayer(ctx, mustGetPoolEndpoints(disks...))`
$DIR/cmd/server-main_test.go:63:2-63:35: `_, ok = obj.(*erasureServerPools)`
$DIR/cmd/server-startup-msg_test.go:33:2-42:3: `infoStorage.Disks = []madmin.Disk{
		{Endpoint: "http://127.0.0.1:9000/data/1/", State: madmin.DriveStateOk},
		{Endpoint: "http://127.0.0.1:9000/data/2/", State: madmin.DriveStateOk},
		{Endpoint: "http://127.0.0.1:9000/data/3/", State: madmin.DriveStateOk},
		{Endpoint: "http://127.0.0.1:9000/data/4/", State: madmin.DriveStateOk},
		{Endpoint: "http://127.0.0.1:9001/data/1/", State: madmin.DriveStateOk},
		{Endpoint: "http://127.0.0.1:9001/data/2/", State: madmin.DriveStateOk},
		{Endpoint: "http://127.0.0.1:9001/data/3/", State: madmin.DriveStateOk},
		{Endpoint: "http://127.0.0.1:9001/data/4/", State: madmin.DriveStateOffline},
	}`
$DIR/cmd/server-startup-msg_test.go:43:2-43:43: `infoStorage.Backend.Type = madmin.Erasure`
$DIR/cmd/server-startup-msg_test.go:45:52-45:89: `.Contains(msg, "7 Online, 1 Offline")`
$DIR/cmd/server-startup-msg_test.go:56:13-56:62: `.DeepEqual(expectedAPIEndpoints, newAPIEndpoints)`
$DIR/cmd/server-startup-msg_test.go:60:2-60:46: `apiEndpoints = []string{"http://%%%%%:9000"}`
$DIR/cmd/server-startup-msg_test.go:61:2-61:56: `newAPIEndpoints = stripStandardPorts(apiEndpoints, "")`
$DIR/cmd/server-startup-msg_test.go:62:13-62:54: `.DeepEqual(apiEndpoints, newAPIEndpoints)`
$DIR/cmd/server-startup-msg_test.go:66:2-66:73: `apiEndpoints = []string{"http://127.0.0.1:443", "https://127.0.0.1:80"}`
$DIR/cmd/server-startup-msg_test.go:67:2-67:56: `newAPIEndpoints = stripStandardPorts(apiEndpoints, "")`
$DIR/cmd/server-startup-msg_test.go:68:13-68:54: `.DeepEqual(apiEndpoints, newAPIEndpoints)`
$DIR/cmd/server-startup-msg_test.go:75:24-75:57: `.WithCancel(context.Background())`
$DIR/cmd/server-startup-msg_test.go:75:43-75:56: `.Background()`
$DIR/cmd/server-startup-msg_test.go:82:10-82:27: `.RemoveAll(fsDir)`
$DIR/cmd/server-startup-msg_test.go:93:24-93:57: `.WithCancel(context.Background())`
$DIR/cmd/server-startup-msg_test.go:93:43-93:56: `.Background()`
$DIR/cmd/server-startup-msg_test.go:100:10-100:27: `.RemoveAll(fsDir)`
$DIR/cmd/server-startup-msg_test.go:111:24-111:57: `.WithCancel(context.Background())`
$DIR/cmd/server-startup-msg_test.go:111:43-111:56: `.Background()`
$DIR/cmd/server-startup-msg_test.go:118:10-118:27: `.RemoveAll(fsDir)`
$DIR/cmd/server_test.go:140:2-140:40: `globalCLIContext.StrictS3Compat = true`
$DIR/cmd/server_test.go:142:3-144:5: `t.Run(fmt.Sprintf("Test: %d, ServerType: %s", i+1, testCase.serverType), func(t *testing.T) {
			runAllTests(testCase, &check{t, testCase.serverType})
		})`
$DIR/cmd/server_test.go:142:4-144:5: `.Run(fmt.Sprintf("Test: %d, ServerType: %s", i+1, testCase.serverType), func(t *testing.T) {
			runAllTests(testCase, &check{t, testCase.serverType})
		})`
$DIR/cmd/server_test.go:142:12-142:74: `.Sprintf("Test: %d, ServerType: %s", i+1, testCase.serverType)`
$DIR/cmd/server_test.go:143:4-143:57: `runAllTests(testCase, &check{t, testCase.serverType})`
$DIR/cmd/signature-v2_test.go:33:2-33:40: `copy(sortedResourceList, resourceList)`
$DIR/cmd/signature-v2_test.go:34:2-34:34: `sort.Strings(sortedResourceList)`
$DIR/cmd/signature-v2_test.go:34:6-34:34: `.Strings(sortedResourceList)`
$DIR/cmd/signature-v2_test.go:45:24-45:57: `.WithCancel(context.Background())`
$DIR/cmd/signature-v2_test.go:45:43-45:56: `.Background()`
$DIR/cmd/signature-v2_test.go:52:10-52:27: `.RemoveAll(fsDir)`
$DIR/cmd/signature-v2_test.go:101:26-101:55: `.Sprintf("%d", now.Unix()+60)`
$DIR/cmd/signature-v2_test.go:101:44-101:51: `.Unix()`
$DIR/cmd/signature-v2_test.go:110:26-110:55: `.Sprintf("%d", now.Unix()+60)`
$DIR/cmd/signature-v2_test.go:110:44-110:51: `.Unix()`
$DIR/cmd/signature-v2_test.go:135:4-135:25: `query.Set(key, value)`
$DIR/cmd/signature-v2_test.go:135:9-135:25: `.Set(key, value)`
$DIR/cmd/signature-v2_test.go:138:19-138:86: `.NewRequest(http.MethodGet, "http://host/a/b?"+query.Encode(), nil)`
$DIR/cmd/signature-v2_test.go:138:71-138:80: `.Encode()`
$DIR/cmd/signature-v2_test.go:144:4-144:41: `req.RequestURI = req.URL.RequestURI()`
$DIR/cmd/signature-v2_test.go:144:24-144:41: `.URL.RequestURI()`
$DIR/cmd/signature-v2_test.go:151:4-151:61: `err = preSignV2(req, accessKey, secretKey, now.Unix()+60)`
$DIR/cmd/signature-v2_test.go:151:50-151:57: `.Unix()`
$DIR/cmd/signature-v2_test.go:156:4-156:41: `req.RequestURI = req.URL.RequestURI()`
$DIR/cmd/signature-v2_test.go:156:24-156:41: `.URL.RequestURI()`
$DIR/cmd/signature-v2_test.go:168:24-168:57: `.WithCancel(context.Background())`
$DIR/cmd/signature-v2_test.go:168:43-168:56: `.Background()`
$DIR/cmd/signature-v2_test.go:175:10-175:27: `.RemoveAll(fsDir)`
$DIR/cmd/signature-v2_test.go:208:22-208:66: `.Sprintf("%s %s", signV2Algorithm, accessID)`
$DIR/cmd/signature-v2_test.go:214:22-214:91: `.Sprintf("%s %s:%s", signV2Algorithm, "InvalidAccessID", "signature")`
$DIR/cmd/signature-v2_test.go:220:22-220:82: `.Sprintf("%s %s:%s", signV2Algorithm, accessID, "signature")`
$DIR/cmd/signature-v2_test.go:226:3-237:5: `t.Run(fmt.Sprintf("Case %d AuthStr \"%s\".", i+1, testCase.authString), func(t *testing.T) {
			req := &http.Request{
				Header: make(http.Header),
				URL:    &url.URL{},
			}
			req.Header.Set("Authorization", testCase.authString)
			_, actualErrCode := validateV2AuthHeader(req)

			if testCase.expectedError != actualErrCode {
				t.Errorf("Expected the error code to be %v, got %v.", testCase.expectedError, actualErrCode)
			}
		})`
$DIR/cmd/signature-v2_test.go:226:4-237:5: `.Run(fmt.Sprintf("Case %d AuthStr \"%s\".", i+1, testCase.authString), func(t *testing.T) {
			req := &http.Request{
				Header: make(http.Header),
				URL:    &url.URL{},
			}
			req.Header.Set("Authorization", testCase.authString)
			_, actualErrCode := validateV2AuthHeader(req)

			if testCase.expectedError != actualErrCode {
				t.Errorf("Expected the error code to be %v, got %v.", testCase.expectedError, actualErrCode)
			}
		})`
$DIR/cmd/signature-v2_test.go:226:12-226:73: `.Sprintf("Case %d AuthStr \"%s\".", i+1, testCase.authString)`
$DIR/cmd/signature-v2_test.go:231:4-231:56: `req.Header.Set("Authorization", testCase.authString)`
$DIR/cmd/signature-v2_test.go:231:7-231:56: `.Header.Set("Authorization", testCase.authString)`
$DIR/cmd/signature-v2_test.go:242:24-242:57: `.WithCancel(context.Background())`
$DIR/cmd/signature-v2_test.go:242:43-242:56: `.Background()`
$DIR/cmd/signature-v2_test.go:249:10-249:27: `.RemoveAll(fsDir)`
$DIR/cmd/signature-v2_test.go:268:3-268:51: `formValues.Set("Awsaccesskeyid", test.accessKey)`
$DIR/cmd/signature-v2_test.go:268:13-268:51: `.Set("Awsaccesskeyid", test.accessKey)`
$DIR/cmd/signature-v2_test.go:269:3-269:46: `formValues.Set("Signature", test.signature)`
$DIR/cmd/signature-v2_test.go:269:13-269:46: `.Set("Signature", test.signature)`
$DIR/cmd/signature-v2_test.go:270:3-270:40: `formValues.Set("Policy", test.policy)`
$DIR/cmd/signature-v2_test.go:270:13-270:40: `.Set("Policy", test.policy)`
$DIR/cmd/signature-v4-parser_test.go:91:27-91:44: `.Format(yyyymmdd)`
$DIR/cmd/signature-v4-parser_test.go:124:13-124:30: `.Format(yyyymmdd)`
$DIR/cmd/signature-v4-parser_test.go:137:13-137:22: `.String()`
$DIR/cmd/signature-v4-parser_test.go:150:13-150:30: `.Format(yyyymmdd)`
$DIR/cmd/signature-v4-parser_test.go:162:13-162:30: `.Format(yyyymmdd)`
$DIR/cmd/signature-v4-parser_test.go:175:13-175:30: `.Format(yyyymmdd)`
$DIR/cmd/signature-v4-parser_test.go:248:4-248:84: `validateCredentialfields(t, i+1, testCase.expectedCredentials, actualCredential)`
$DIR/cmd/signature-v4-parser_test.go:342:14-342:56: `.Join(testCase.expectedSignedHeaders, ",")`
$DIR/cmd/signature-v4-parser_test.go:342:67-342:98: `.Join(actualSignedHeaders, ",")`
$DIR/cmd/signature-v4-parser_test.go:352:27-352:44: `.Format(yyyymmdd)`
$DIR/cmd/signature-v4-parser_test.go:394:12-405:12: `.Join([]string{
					// generating a valid credential field.
					generateCredentialStr(
						"Z7IXGOO6BZ0REAN1Q26I",
						sampleTimeStr,
						"us-west-1",
						"s3",
						"aws4_request"),
					// Incorrect SignedHeader field.
					"SignIncorrectHeader=",
					"b",
				}, ",")`
$DIR/cmd/signature-v4-parser_test.go:416:12-429:12: `.Join([]string{
					// generating a valid credential.
					generateCredentialStr(
						"Z7IXGOO6BZ0REAN1Q26I",
						sampleTimeStr,
						"us-west-1",
						"s3",
						"aws4_request"),
					// valid SignedHeader.
					"SignedHeaders=host;x-amz-content-sha256;x-amz-date",
					// invalid Signature field.
					// a valid signature is of form "Signature="
					"Sign=",
				}, ",")`
$DIR/cmd/signature-v4-parser_test.go:437:12-450:12: `.Join([]string{
					// generating a valid credential.
					generateCredentialStr(
						"Z7IXGOO6BZ0REAN1Q26I",
						sampleTimeStr,
						"us-west-1",
						"s3",
						"aws4_request"),
					// valid SignedHeader.
					"SignedHeaders=host;x-amz-content-sha256;x-amz-date",
					// valid Signature field.
					// a valid signature is of form "Signature="
					"Signature=abcd",
				}, ",")`
$DIR/cmd/signature-v4-parser_test.go:467:12-480:12: `.Join([]string{
					// generating a valid credential.
					generateCredentialStr(
						"access key",
						sampleTimeStr,
						"us-west-1",
						"s3",
						"aws4_request"),
					// valid SignedHeader.
					"SignedHeaders=host;x-amz-content-sha256;x-amz-date",
					// valid Signature field.
					// a valid signature is of form "Signature="
					"Signature=abcd",
				}, ",")`
$DIR/cmd/signature-v4-parser_test.go:505:4-505:103: `validateCredentialfields(t, i+1, testCase.expectedAuthField.Credential, parsedAuthField.Credential)`
$DIR/cmd/signature-v4-parser_test.go:513:14-513:66: `.Join(testCase.expectedAuthField.SignedHeaders, ",")`
$DIR/cmd/signature-v4-parser_test.go:513:77-513:118: `.Join(parsedAuthField.SignedHeaders, ",")`
$DIR/cmd/signature-v4-parser_test.go:619:4-619:82: `inputQuery.Set(testCase.inputQueryKeyVals[j], testCase.inputQueryKeyVals[j+1])`
$DIR/cmd/signature-v4-parser_test.go:619:14-619:82: `.Set(testCase.inputQueryKeyVals[j], testCase.inputQueryKeyVals[j+1])`
$DIR/cmd/signature-v4-parser_test.go:638:27-638:44: `.Format(yyyymmdd)`
$DIR/cmd/signature-v4-parser_test.go:731:27-731:49: `.Format(iso8601Format)`
$DIR/cmd/signature-v4-parser_test.go:753:28-753:34: `.UTC()`
$DIR/cmd/signature-v4-parser_test.go:753:34-753:56: `.Format(iso8601Format)`
$DIR/cmd/signature-v4-parser_test.go:775:28-775:34: `.UTC()`
$DIR/cmd/signature-v4-parser_test.go:775:34-775:56: `.Format(iso8601Format)`
$DIR/cmd/signature-v4-parser_test.go:798:28-798:34: `.UTC()`
$DIR/cmd/signature-v4-parser_test.go:798:34-798:56: `.Format(iso8601Format)`
$DIR/cmd/signature-v4-parser_test.go:841:28-841:34: `.UTC()`
$DIR/cmd/signature-v4-parser_test.go:841:34-841:56: `.Format(iso8601Format)`
$DIR/cmd/signature-v4-parser_test.go:856:4-856:82: `inputQuery.Set(testCase.inputQueryKeyVals[j], testCase.inputQueryKeyVals[j+1])`
$DIR/cmd/signature-v4-parser_test.go:856:14-856:82: `.Set(testCase.inputQueryKeyVals[j], testCase.inputQueryKeyVals[j+1])`
$DIR/cmd/signature-v4-parser_test.go:865:4-865:105: `validateCredentialfields(t, i+1, testCase.expectedPreSignValues.Credential, parsedPreSign.Credential)`
$DIR/cmd/signature-v4-parser_test.go:867:14-867:70: `.Join(testCase.expectedPreSignValues.SignedHeaders, ",")`
$DIR/cmd/signature-v4-parser_test.go:867:81-867:120: `.Join(parsedPreSign.SignedHeaders, ",")`
$DIR/cmd/signature-v4-parser_test.go:879:15-879:48: `.expectedPreSignValues.Date.UTC()`
$DIR/cmd/signature-v4-parser_test.go:879:48-879:70: `.Format(iso8601Format)`
$DIR/cmd/signature-v4-parser_test.go:879:87-879:98: `.Date.UTC()`
$DIR/cmd/signature-v4-parser_test.go:879:98-879:120: `.Format(iso8601Format)`
$DIR/cmd/signature-v4-utils_test.go:33:24-33:57: `.WithCancel(context.Background())`
$DIR/cmd/signature-v4-utils_test.go:33:43-33:56: `.Background()`
$DIR/cmd/signature-v4-utils_test.go:40:10-40:27: `.RemoveAll(fsDir)`
$DIR/cmd/signature-v4-utils_test.go:45:2-45:24: `initAllSubsystems(ctx)`
$DIR/cmd/signature-v4-utils_test.go:46:2-46:36: `initConfigSubsystem(ctx, objLayer)`
$DIR/cmd/signature-v4-utils_test.go:48:2-48:67: `globalIAMSys.Init(ctx, objLayer, globalEtcdClient, 2*time.Second)`
$DIR/cmd/signature-v4-utils_test.go:48:14-48:67: `.Init(ctx, objLayer, globalEtcdClient, 2*time.Second)`
$DIR/cmd/signature-v4-utils_test.go:68:2-68:52: `_, _, s3Err = checkKeyValid(req, "does-not-exist")`
$DIR/cmd/signature-v4-utils_test.go:73:21-73:65: `.CreateCredentials("myuser1", "mypassword1")`
$DIR/cmd/signature-v4-utils_test.go:78:2-81:4: `globalIAMSys.CreateUser(ctx, ucreds.AccessKey, madmin.AddOrUpdateUserReq{
		SecretKey: ucreds.SecretKey,
		Status:    madmin.AccountEnabled,
	})`
$DIR/cmd/signature-v4-utils_test.go:78:14-81:4: `.CreateUser(ctx, ucreds.AccessKey, madmin.AddOrUpdateUserReq{
		SecretKey: ucreds.SecretKey,
		Status:    madmin.AccountEnabled,
	})`
$DIR/cmd/signature-v4-utils_test.go:83:2-83:56: `_, owner, s3Err = checkKeyValid(req, ucreds.AccessKey)`
$DIR/cmd/signature-v4-utils_test.go:142:24-142:78: `.NewRequest(http.MethodGet, "http://example.com", nil)`
$DIR/cmd/signature-v4-utils_test.go:147:17-147:29: `.URL.Query()`
$DIR/cmd/signature-v4-utils_test.go:148:4-148:59: `q.Add(testCase.inputQueryKey, testCase.inputQueryValue)`
$DIR/cmd/signature-v4-utils_test.go:148:5-148:59: `.Add(testCase.inputQueryKey, testCase.inputQueryValue)`
$DIR/cmd/signature-v4-utils_test.go:150:5-150:62: `q.Add(testCase.inputHeaderKey, testCase.inputHeaderValue)`
$DIR/cmd/signature-v4-utils_test.go:150:6-150:62: `.Add(testCase.inputHeaderKey, testCase.inputHeaderValue)`
$DIR/cmd/signature-v4-utils_test.go:152:4-152:38: `inputReq.URL.RawQuery = q.Encode()`
$DIR/cmd/signature-v4-utils_test.go:152:29-152:38: `.Encode()`
$DIR/cmd/signature-v4-utils_test.go:154:4-154:75: `inputReq.Header.Set(testCase.inputHeaderKey, testCase.inputHeaderValue)`
$DIR/cmd/signature-v4-utils_test.go:154:12-154:75: `.Header.Set(testCase.inputHeaderKey, testCase.inputHeaderValue)`
$DIR/cmd/signature-v4-utils_test.go:156:3-156:23: `inputReq.ParseForm()`
$DIR/cmd/signature-v4-utils_test.go:156:11-156:23: `.ParseForm()`
$DIR/cmd/signature-v4-utils_test.go:195:2-195:49: `signedHeaders = append(signedHeaders, "expect")`
$DIR/cmd/signature-v4-utils_test.go:199:26-199:48: `.Format(iso8601Format)`
$DIR/cmd/signature-v4-utils_test.go:203:16-203:75: `.NewRequest(http.MethodGet, "http://play.min.io:9000", nil)`
$DIR/cmd/signature-v4-utils_test.go:207:2-207:57: `r.TransferEncoding = []string{expectedTransferEncoding}`
$DIR/cmd/signature-v4-utils_test.go:211:2-211:64: `inputHeader.Set("x-amz-content-sha256", expectedContentSha256)`
$DIR/cmd/signature-v4-utils_test.go:211:13-211:64: `.Set("x-amz-content-sha256", expectedContentSha256)`
$DIR/cmd/signature-v4-utils_test.go:212:2-212:45: `inputHeader.Set("x-amz-date", expectedTime)`
$DIR/cmd/signature-v4-utils_test.go:212:13-212:45: `.Set("x-amz-date", expectedTime)`
$DIR/cmd/signature-v4-utils_test.go:219:17-219:29: `.URL.Query()`
$DIR/cmd/signature-v4-utils_test.go:221:2-221:71: `signedHeaders = append(signedHeaders, "x-amz-server-side-encryption")`
$DIR/cmd/signature-v4-utils_test.go:223:2-223:53: `_, errCode = extractSignedHeaders(signedHeaders, r)`
$DIR/cmd/signature-v4-utils_test.go:228:2-228:72: `inputQuery.Add("x-amz-server-side-encryption", xhttp.AmzEncryptionAES)`
$DIR/cmd/signature-v4-utils_test.go:228:12-228:72: `.Add("x-amz-server-side-encryption", xhttp.AmzEncryptionAES)`
$DIR/cmd/signature-v4-utils_test.go:229:2-229:38: `r.URL.RawQuery = inputQuery.Encode()`
$DIR/cmd/signature-v4-utils_test.go:229:29-229:38: `.Encode()`
$DIR/cmd/signature-v4-utils_test.go:230:2-230:15: `r.ParseForm()`
$DIR/cmd/signature-v4-utils_test.go:230:3-230:15: `.ParseForm()`
$DIR/cmd/signature-v4-utils_test.go:231:2-231:53: `_, errCode = extractSignedHeaders(signedHeaders, r)`
$DIR/cmd/signature-v4-utils_test.go:237:50-237:78: `.Get("x-amz-content-sha256")`
$DIR/cmd/signature-v4-utils_test.go:239:41-239:53: `.Get("host")`
$DIR/cmd/signature-v4-utils_test.go:241:41-241:59: `.Get("x-amz-date")`
$DIR/cmd/signature-v4-utils_test.go:243:43-243:57: `.Get("expect")`
$DIR/cmd/signature-v4-utils_test.go:245:53-245:78: `.Get("transfer-encoding")`
$DIR/cmd/signature-v4-utils_test.go:267:2-267:59: `signedHeaders = append(signedHeaders, "X-Amz-Credential")`
$DIR/cmd/signature-v4-utils_test.go:269:2-269:53: `_, errCode = extractSignedHeaders(signedHeaders, r)`
$DIR/cmd/signature-v4-utils_test.go:275:2-275:36: `signedHeaders = signedHeaders[2:5]`
$DIR/cmd/signature-v4-utils_test.go:277:2-277:53: `_, errCode = extractSignedHeaders(signedHeaders, r)`
$DIR/cmd/signature-v4-utils_test.go:328:17-328:82: `.NewRequest(http.MethodGet, "http://localhost/?"+testCase.q, nil)`
$DIR/cmd/signature-v4-utils_test.go:333:4-333:52: `r.Header.Set("x-amz-content-sha256", testCase.h)`
$DIR/cmd/signature-v4-utils_test.go:333:5-333:52: `.Header.Set("x-amz-content-sha256", testCase.h)`
$DIR/cmd/signature-v4-utils_test.go:335:3-335:16: `r.ParseForm()`
$DIR/cmd/signature-v4-utils_test.go:335:4-335:16: `.ParseForm()`
$DIR/cmd/signature-v4_test.go:56:37-56:137: `.Sprintf(credentialTemplate, "EXAMPLEINVALIDEXAMPL", now.Format(yyyymmdd), globalMinioDefaultRegion)`
$DIR/cmd/signature-v4_test.go:56:93-56:110: `.Format(yyyymmdd)`
$DIR/cmd/signature-v4_test.go:63:37-63:124: `.Sprintf(credentialTemplate, accessKey, now.Format(yyyymmdd), globalMinioDefaultRegion)`
$DIR/cmd/signature-v4_test.go:63:80-63:97: `.Format(yyyymmdd)`
$DIR/cmd/signature-v4_test.go:64:37-64:59: `.Format(iso8601Format)`
$DIR/cmd/signature-v4_test.go:74:9-74:96: `.Sprintf(credentialTemplate, accessKey, now.Format(yyyymmdd), globalMinioDefaultRegion)`
$DIR/cmd/signature-v4_test.go:74:52-74:69: `.Format(yyyymmdd)`
$DIR/cmd/signature-v4_test.go:76:31-76:53: `.Format(iso8601Format)`
$DIR/cmd/signature-v4_test.go:97:24-97:57: `.WithCancel(context.Background())`
$DIR/cmd/signature-v4_test.go:97:43-97:56: `.Background()`
$DIR/cmd/signature-v4_test.go:104:10-104:27: `.RemoveAll(fsDir)`
$DIR/cmd/signature-v4_test.go:131:31-131:53: `.Format(iso8601Format)`
$DIR/cmd/signature-v4_test.go:135:31-135:118: `.Sprintf(credentialTemplate, "Z7IXGOO6BZ0REAN1Q26I", now.Format(yyyymmdd), "us-west-1")`
$DIR/cmd/signature-v4_test.go:135:87-135:104: `.Format(yyyymmdd)`
$DIR/cmd/signature-v4_test.go:144:32-144:54: `.Format(iso8601Format)`
$DIR/cmd/signature-v4_test.go:148:32-148:108: `.Sprintf(credentialTemplate, accessKeyID, now.Format(yyyymmdd), "us-west-1")`
$DIR/cmd/signature-v4_test.go:148:77-148:94: `.Format(yyyymmdd)`
$DIR/cmd/signature-v4_test.go:158:32-158:54: `.Format(iso8601Format)`
$DIR/cmd/signature-v4_test.go:162:32-162:103: `.Sprintf(credentialTemplate, accessKeyID, now.Format(yyyymmdd), region)`
$DIR/cmd/signature-v4_test.go:162:77-162:94: `.Format(yyyymmdd)`
$DIR/cmd/signature-v4_test.go:172:32-172:50: `.AddDate(0, 0, -2)`
$DIR/cmd/signature-v4_test.go:172:50-172:72: `.Format(iso8601Format)`
$DIR/cmd/signature-v4_test.go:176:32-176:103: `.Sprintf(credentialTemplate, accessKeyID, now.Format(yyyymmdd), region)`
$DIR/cmd/signature-v4_test.go:176:77-176:94: `.Format(yyyymmdd)`
$DIR/cmd/signature-v4_test.go:180:32-180:50: `.AddDate(0, 0, -2)`
$DIR/cmd/signature-v4_test.go:180:50-180:72: `.Format(iso8601Format)`
$DIR/cmd/signature-v4_test.go:190:32-190:54: `.Format(iso8601Format)`
$DIR/cmd/signature-v4_test.go:194:32-194:103: `.Sprintf(credentialTemplate, accessKeyID, now.Format(yyyymmdd), region)`
$DIR/cmd/signature-v4_test.go:194:77-194:94: `.Format(yyyymmdd)`
$DIR/cmd/signature-v4_test.go:198:32-198:54: `.Format(iso8601Format)`
$DIR/cmd/signature-v4_test.go:208:32-208:51: `.Add(1 * time.Hour)`
$DIR/cmd/signature-v4_test.go:208:51-208:73: `.Format(iso8601Format)`
$DIR/cmd/signature-v4_test.go:212:32-212:103: `.Sprintf(credentialTemplate, accessKeyID, now.Format(yyyymmdd), region)`
$DIR/cmd/signature-v4_test.go:212:77-212:94: `.Format(yyyymmdd)`
$DIR/cmd/signature-v4_test.go:216:32-216:54: `.Format(iso8601Format)`
$DIR/cmd/signature-v4_test.go:227:32-227:54: `.Format(iso8601Format)`
$DIR/cmd/signature-v4_test.go:231:32-231:103: `.Sprintf(credentialTemplate, accessKeyID, now.Format(yyyymmdd), region)`
$DIR/cmd/signature-v4_test.go:231:77-231:94: `.Format(yyyymmdd)`
$DIR/cmd/signature-v4_test.go:235:32-235:54: `.Format(iso8601Format)`
$DIR/cmd/signature-v4_test.go:246:33-246:55: `.Format(iso8601Format)`
$DIR/cmd/signature-v4_test.go:250:33-250:104: `.Sprintf(credentialTemplate, accessKeyID, now.Format(yyyymmdd), region)`
$DIR/cmd/signature-v4_test.go:250:78-250:95: `.Format(yyyymmdd)`
$DIR/cmd/signature-v4_test.go:255:32-255:54: `.Format(iso8601Format)`
$DIR/cmd/signature-v4_test.go:265:33-265:55: `.Format(iso8601Format)`
$DIR/cmd/signature-v4_test.go:269:33-269:104: `.Sprintf(credentialTemplate, accessKeyID, now.Format(yyyymmdd), region)`
$DIR/cmd/signature-v4_test.go:269:78-269:95: `.Format(yyyymmdd)`
$DIR/cmd/signature-v4_test.go:274:22-274:44: `.Format(iso8601Format)`
$DIR/cmd/signature-v4_test.go:286:4-286:25: `query.Set(key, value)`
$DIR/cmd/signature-v4_test.go:286:9-286:25: `.Set(key, value)`
$DIR/cmd/signature-v4_test.go:290:17-290:84: `.NewRequest(http.MethodGet, "http://host/a/b?"+query.Encode(), nil)`
$DIR/cmd/signature-v4_test.go:290:69-290:78: `.Encode()`
$DIR/cmd/signature-v4_test.go:297:4-297:30: `req.Header.Set(key, value)`
$DIR/cmd/signature-v4_test.go:297:7-297:30: `.Header.Set(key, value)`
$DIR/cmd/signature-v4_test.go:301:3-301:18: `req.ParseForm()`
$DIR/cmd/signature-v4_test.go:301:6-301:18: `.ParseForm()`
$DIR/cmd/site-replication-utils_gen_test.go:14:15-14:31: `.MarshalMsg(nil)`
$DIR/cmd/site-replication-utils_gen_test.go:18:16-18:34: `.UnmarshalMsg(bts)`
$DIR/cmd/site-replication-utils_gen_test.go:26:2-26:28: `left, err = msgp.Skip(bts)`
$DIR/cmd/site-replication-utils_gen_test.go:26:18-26:28: `.Skip(bts)`
$DIR/cmd/site-replication-utils_gen_test.go:73:2-73:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/site-replication-utils_gen_test.go:73:6-73:23: `.Encode(&buf, &v)`
$DIR/cmd/site-replication-utils_gen_test.go:75:8-75:18: `.Msgsize()`
$DIR/cmd/site-replication-utils_gen_test.go:76:8-76:14: `.Len()`
$DIR/cmd/site-replication-utils_gen_test.go:81:13-81:31: `.Decode(&buf, &vn)`
$DIR/cmd/site-replication-utils_gen_test.go:86:2-86:13: `buf.Reset()`
$DIR/cmd/site-replication-utils_gen_test.go:86:5-86:13: `.Reset()`
$DIR/cmd/site-replication-utils_gen_test.go:87:2-87:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/site-replication-utils_gen_test.go:87:6-87:23: `.Encode(&buf, &v)`
$DIR/cmd/site-replication-utils_gen_test.go:88:2-88:35: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/site-replication-utils_gen_test.go:88:12-88:28: `.NewReader(&buf)`
$DIR/cmd/site-replication-utils_gen_test.go:88:28-88:35: `.Skip()`
$DIR/cmd/site-replication_test.go:42:7-42:47: `.CreateStringSet("dep1", "dep2", "dep3")`
$DIR/cmd/site-replication_test.go:43:7-43:31: `.CreateStringSet("dep1")`
$DIR/cmd/site-replication_test.go:49:7-49:47: `.CreateStringSet("dep1", "dep2", "dep3")`
$DIR/cmd/site-replication_test.go:50:7-50:55: `.CreateStringSet("dep1", "dep2", "dep3", "dep4")`
$DIR/cmd/site-replication_test.go:56:7-56:25: `.CreateStringSet()`
$DIR/cmd/site-replication_test.go:57:7-57:55: `.CreateStringSet("dep1", "dep2", "dep3", "dep4")`
$DIR/cmd/storage-datatypes_gen_test.go:14:15-14:31: `.MarshalMsg(nil)`
$DIR/cmd/storage-datatypes_gen_test.go:18:16-18:34: `.UnmarshalMsg(bts)`
$DIR/cmd/storage-datatypes_gen_test.go:26:2-26:28: `left, err = msgp.Skip(bts)`
$DIR/cmd/storage-datatypes_gen_test.go:26:18-26:28: `.Skip(bts)`
$DIR/cmd/storage-datatypes_gen_test.go:73:2-73:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go:73:6-73:23: `.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go:75:8-75:18: `.Msgsize()`
$DIR/cmd/storage-datatypes_gen_test.go:76:8-76:14: `.Len()`
$DIR/cmd/storage-datatypes_gen_test.go:81:13-81:31: `.Decode(&buf, &vn)`
$DIR/cmd/storage-datatypes_gen_test.go:86:2-86:13: `buf.Reset()`
$DIR/cmd/storage-datatypes_gen_test.go:86:5-86:13: `.Reset()`
$DIR/cmd/storage-datatypes_gen_test.go:87:2-87:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go:87:6-87:23: `.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go:88:2-88:35: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/storage-datatypes_gen_test.go:88:12-88:28: `.NewReader(&buf)`
$DIR/cmd/storage-datatypes_gen_test.go:88:28-88:35: `.Skip()`
$DIR/cmd/storage-datatypes_gen_test.go:127:15-127:31: `.MarshalMsg(nil)`
$DIR/cmd/storage-datatypes_gen_test.go:131:16-131:34: `.UnmarshalMsg(bts)`
$DIR/cmd/storage-datatypes_gen_test.go:139:2-139:28: `left, err = msgp.Skip(bts)`
$DIR/cmd/storage-datatypes_gen_test.go:139:18-139:28: `.Skip(bts)`
$DIR/cmd/storage-datatypes_gen_test.go:186:2-186:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go:186:6-186:23: `.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go:188:8-188:18: `.Msgsize()`
$DIR/cmd/storage-datatypes_gen_test.go:189:8-189:14: `.Len()`
$DIR/cmd/storage-datatypes_gen_test.go:194:13-194:31: `.Decode(&buf, &vn)`
$DIR/cmd/storage-datatypes_gen_test.go:199:2-199:13: `buf.Reset()`
$DIR/cmd/storage-datatypes_gen_test.go:199:5-199:13: `.Reset()`
$DIR/cmd/storage-datatypes_gen_test.go:200:2-200:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go:200:6-200:23: `.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go:201:2-201:35: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/storage-datatypes_gen_test.go:201:12-201:28: `.NewReader(&buf)`
$DIR/cmd/storage-datatypes_gen_test.go:201:28-201:35: `.Skip()`
$DIR/cmd/storage-datatypes_gen_test.go:240:15-240:31: `.MarshalMsg(nil)`
$DIR/cmd/storage-datatypes_gen_test.go:244:16-244:34: `.UnmarshalMsg(bts)`
$DIR/cmd/storage-datatypes_gen_test.go:252:2-252:28: `left, err = msgp.Skip(bts)`
$DIR/cmd/storage-datatypes_gen_test.go:252:18-252:28: `.Skip(bts)`
$DIR/cmd/storage-datatypes_gen_test.go:299:2-299:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go:299:6-299:23: `.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go:301:8-301:18: `.Msgsize()`
$DIR/cmd/storage-datatypes_gen_test.go:302:8-302:14: `.Len()`
$DIR/cmd/storage-datatypes_gen_test.go:307:13-307:31: `.Decode(&buf, &vn)`
$DIR/cmd/storage-datatypes_gen_test.go:312:2-312:13: `buf.Reset()`
$DIR/cmd/storage-datatypes_gen_test.go:312:5-312:13: `.Reset()`
$DIR/cmd/storage-datatypes_gen_test.go:313:2-313:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go:313:6-313:23: `.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go:314:2-314:35: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/storage-datatypes_gen_test.go:314:12-314:28: `.NewReader(&buf)`
$DIR/cmd/storage-datatypes_gen_test.go:314:28-314:35: `.Skip()`
$DIR/cmd/storage-datatypes_gen_test.go:353:15-353:31: `.MarshalMsg(nil)`
$DIR/cmd/storage-datatypes_gen_test.go:357:16-357:34: `.UnmarshalMsg(bts)`
$DIR/cmd/storage-datatypes_gen_test.go:365:2-365:28: `left, err = msgp.Skip(bts)`
$DIR/cmd/storage-datatypes_gen_test.go:365:18-365:28: `.Skip(bts)`
$DIR/cmd/storage-datatypes_gen_test.go:412:2-412:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go:412:6-412:23: `.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go:414:8-414:18: `.Msgsize()`
$DIR/cmd/storage-datatypes_gen_test.go:415:8-415:14: `.Len()`
$DIR/cmd/storage-datatypes_gen_test.go:420:13-420:31: `.Decode(&buf, &vn)`
$DIR/cmd/storage-datatypes_gen_test.go:425:2-425:13: `buf.Reset()`
$DIR/cmd/storage-datatypes_gen_test.go:425:5-425:13: `.Reset()`
$DIR/cmd/storage-datatypes_gen_test.go:426:2-426:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go:426:6-426:23: `.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go:427:2-427:35: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/storage-datatypes_gen_test.go:427:12-427:28: `.NewReader(&buf)`
$DIR/cmd/storage-datatypes_gen_test.go:427:28-427:35: `.Skip()`
$DIR/cmd/storage-datatypes_gen_test.go:466:15-466:31: `.MarshalMsg(nil)`
$DIR/cmd/storage-datatypes_gen_test.go:470:16-470:34: `.UnmarshalMsg(bts)`
$DIR/cmd/storage-datatypes_gen_test.go:478:2-478:28: `left, err = msgp.Skip(bts)`
$DIR/cmd/storage-datatypes_gen_test.go:478:18-478:28: `.Skip(bts)`
$DIR/cmd/storage-datatypes_gen_test.go:525:2-525:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go:525:6-525:23: `.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go:527:8-527:18: `.Msgsize()`
$DIR/cmd/storage-datatypes_gen_test.go:528:8-528:14: `.Len()`
$DIR/cmd/storage-datatypes_gen_test.go:533:13-533:31: `.Decode(&buf, &vn)`
$DIR/cmd/storage-datatypes_gen_test.go:538:2-538:13: `buf.Reset()`
$DIR/cmd/storage-datatypes_gen_test.go:538:5-538:13: `.Reset()`
$DIR/cmd/storage-datatypes_gen_test.go:539:2-539:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go:539:6-539:23: `.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go:540:2-540:35: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/storage-datatypes_gen_test.go:540:12-540:28: `.NewReader(&buf)`
$DIR/cmd/storage-datatypes_gen_test.go:540:28-540:35: `.Skip()`
$DIR/cmd/storage-datatypes_gen_test.go:579:15-579:31: `.MarshalMsg(nil)`
$DIR/cmd/storage-datatypes_gen_test.go:583:16-583:34: `.UnmarshalMsg(bts)`
$DIR/cmd/storage-datatypes_gen_test.go:591:2-591:28: `left, err = msgp.Skip(bts)`
$DIR/cmd/storage-datatypes_gen_test.go:591:18-591:28: `.Skip(bts)`
$DIR/cmd/storage-datatypes_gen_test.go:638:2-638:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go:638:6-638:23: `.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go:640:8-640:18: `.Msgsize()`
$DIR/cmd/storage-datatypes_gen_test.go:641:8-641:14: `.Len()`
$DIR/cmd/storage-datatypes_gen_test.go:646:13-646:31: `.Decode(&buf, &vn)`
$DIR/cmd/storage-datatypes_gen_test.go:651:2-651:13: `buf.Reset()`
$DIR/cmd/storage-datatypes_gen_test.go:651:5-651:13: `.Reset()`
$DIR/cmd/storage-datatypes_gen_test.go:652:2-652:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go:652:6-652:23: `.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go:653:2-653:35: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/storage-datatypes_gen_test.go:653:12-653:28: `.NewReader(&buf)`
$DIR/cmd/storage-datatypes_gen_test.go:653:28-653:35: `.Skip()`
$DIR/cmd/storage-datatypes_gen_test.go:692:15-692:31: `.MarshalMsg(nil)`
$DIR/cmd/storage-datatypes_gen_test.go:696:16-696:34: `.UnmarshalMsg(bts)`
$DIR/cmd/storage-datatypes_gen_test.go:704:2-704:28: `left, err = msgp.Skip(bts)`
$DIR/cmd/storage-datatypes_gen_test.go:704:18-704:28: `.Skip(bts)`
$DIR/cmd/storage-datatypes_gen_test.go:751:2-751:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go:751:6-751:23: `.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go:753:8-753:18: `.Msgsize()`
$DIR/cmd/storage-datatypes_gen_test.go:754:8-754:14: `.Len()`
$DIR/cmd/storage-datatypes_gen_test.go:759:13-759:31: `.Decode(&buf, &vn)`
$DIR/cmd/storage-datatypes_gen_test.go:764:2-764:13: `buf.Reset()`
$DIR/cmd/storage-datatypes_gen_test.go:764:5-764:13: `.Reset()`
$DIR/cmd/storage-datatypes_gen_test.go:765:2-765:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go:765:6-765:23: `.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go:766:2-766:35: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/storage-datatypes_gen_test.go:766:12-766:28: `.NewReader(&buf)`
$DIR/cmd/storage-datatypes_gen_test.go:766:28-766:35: `.Skip()`
$DIR/cmd/storage-datatypes_gen_test.go:805:15-805:31: `.MarshalMsg(nil)`
$DIR/cmd/storage-datatypes_gen_test.go:809:16-809:34: `.UnmarshalMsg(bts)`
$DIR/cmd/storage-datatypes_gen_test.go:817:2-817:28: `left, err = msgp.Skip(bts)`
$DIR/cmd/storage-datatypes_gen_test.go:817:18-817:28: `.Skip(bts)`
$DIR/cmd/storage-datatypes_gen_test.go:864:2-864:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go:864:6-864:23: `.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go:866:8-866:18: `.Msgsize()`
$DIR/cmd/storage-datatypes_gen_test.go:867:8-867:14: `.Len()`
$DIR/cmd/storage-datatypes_gen_test.go:872:13-872:31: `.Decode(&buf, &vn)`
$DIR/cmd/storage-datatypes_gen_test.go:877:2-877:13: `buf.Reset()`
$DIR/cmd/storage-datatypes_gen_test.go:877:5-877:13: `.Reset()`
$DIR/cmd/storage-datatypes_gen_test.go:878:2-878:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go:878:6-878:23: `.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go:879:2-879:35: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/storage-datatypes_gen_test.go:879:12-879:28: `.NewReader(&buf)`
$DIR/cmd/storage-datatypes_gen_test.go:879:28-879:35: `.Skip()`
$DIR/cmd/storage-datatypes_gen_test.go:918:15-918:31: `.MarshalMsg(nil)`
$DIR/cmd/storage-datatypes_gen_test.go:922:16-922:34: `.UnmarshalMsg(bts)`
$DIR/cmd/storage-datatypes_gen_test.go:930:2-930:28: `left, err = msgp.Skip(bts)`
$DIR/cmd/storage-datatypes_gen_test.go:930:18-930:28: `.Skip(bts)`
$DIR/cmd/storage-datatypes_gen_test.go:977:2-977:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go:977:6-977:23: `.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go:979:8-979:18: `.Msgsize()`
$DIR/cmd/storage-datatypes_gen_test.go:980:8-980:14: `.Len()`
$DIR/cmd/storage-datatypes_gen_test.go:985:13-985:31: `.Decode(&buf, &vn)`
$DIR/cmd/storage-datatypes_gen_test.go:990:2-990:13: `buf.Reset()`
$DIR/cmd/storage-datatypes_gen_test.go:990:5-990:13: `.Reset()`
$DIR/cmd/storage-datatypes_gen_test.go:991:2-991:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go:991:6-991:23: `.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go:992:2-992:35: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/storage-datatypes_gen_test.go:992:12-992:28: `.NewReader(&buf)`
$DIR/cmd/storage-datatypes_gen_test.go:992:28-992:35: `.Skip()`
$DIR/cmd/storage-datatypes_gen_test.go:1031:15-1031:31: `.MarshalMsg(nil)`
$DIR/cmd/storage-datatypes_gen_test.go:1035:16-1035:34: `.UnmarshalMsg(bts)`
$DIR/cmd/storage-datatypes_gen_test.go:1043:2-1043:28: `left, err = msgp.Skip(bts)`
$DIR/cmd/storage-datatypes_gen_test.go:1043:18-1043:28: `.Skip(bts)`
$DIR/cmd/storage-datatypes_gen_test.go:1090:2-1090:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go:1090:6-1090:23: `.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go:1092:8-1092:18: `.Msgsize()`
$DIR/cmd/storage-datatypes_gen_test.go:1093:8-1093:14: `.Len()`
$DIR/cmd/storage-datatypes_gen_test.go:1098:13-1098:31: `.Decode(&buf, &vn)`
$DIR/cmd/storage-datatypes_gen_test.go:1103:2-1103:13: `buf.Reset()`
$DIR/cmd/storage-datatypes_gen_test.go:1103:5-1103:13: `.Reset()`
$DIR/cmd/storage-datatypes_gen_test.go:1104:2-1104:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go:1104:6-1104:23: `.Encode(&buf, &v)`
$DIR/cmd/storage-datatypes_gen_test.go:1105:2-1105:35: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/storage-datatypes_gen_test.go:1105:12-1105:28: `.NewReader(&buf)`
$DIR/cmd/storage-datatypes_gen_test.go:1105:28-1105:35: `.Skip()`
$DIR/cmd/streaming-signature-v4_test.go:31:2-36:3: `type testCase struct {
		reader         *bufio.Reader
		expectedErr    error
		chunkSize      []byte
		chunkSignature []byte
	}`
$DIR/cmd/streaming-signature-v4_test.go:40:8-40:82: `.NewReader([]byte("1000;chunk-signature=111123333333333333334444211\r\n"))`
$DIR/cmd/streaming-signature-v4_test.go:42:8-42:35: `.NewReader([]byte("1000;"))`
$DIR/cmd/streaming-signature-v4_test.go:44:8-44:52: `.NewReader([]byte(fmt.Sprintf("%4097d", 1)))`
$DIR/cmd/streaming-signature-v4_test.go:44:29-44:50: `.Sprintf("%4097d", 1)`
$DIR/cmd/streaming-signature-v4_test.go:46:8-46:82: `.NewReader([]byte("1000;chunk-signature=111123333333333333334444211\r\n"))`
$DIR/cmd/streaming-signature-v4_test.go:51:9-51:39: `.NewReaderSize(readers[0], 16)`
$DIR/cmd/streaming-signature-v4_test.go:58:9-58:31: `.NewReader(readers[1])`
$DIR/cmd/streaming-signature-v4_test.go:65:9-65:31: `.NewReader(readers[2])`
$DIR/cmd/streaming-signature-v4_test.go:72:9-72:31: `.NewReader(readers[3])`
$DIR/cmd/streaming-signature-v4_test.go:84:12-84:43: `.Equal(chunkSize, tt.chunkSize)`
$DIR/cmd/streaming-signature-v4_test.go:87:12-87:53: `.Equal(chunkSignature, tt.chunkSignature)`
$DIR/cmd/streaming-signature-v4_test.go:95:2-99:3: `type testCase struct {
		buf       []byte
		chunkSize []byte
		chunkSign []byte
	}`
$DIR/cmd/streaming-signature-v4_test.go:131:12-131:46: `.Equal(hexChunkSize, tt.chunkSize)`
$DIR/cmd/streaming-signature-v4_test.go:134:12-134:51: `.Equal(hexChunkSignature, tt.chunkSign)`
$DIR/cmd/streaming-signature-v4_test.go:142:2-145:3: `type testCase struct {
		reader      io.Reader
		expectedErr error
	}`
$DIR/cmd/streaming-signature-v4_test.go:148:9-148:35: `.NewReader([]byte("\r\n"))`
$DIR/cmd/streaming-signature-v4_test.go:150:9-150:33: `.NewReader([]byte("he"))`
$DIR/cmd/streaming-signature-v4_test.go:152:9-152:37: `.NewReader([]byte("he\r\n"))`
$DIR/cmd/streaming-signature-v4_test.go:154:9-154:32: `.NewReader([]byte("h"))`
$DIR/cmd/streaming-signature-v4_test.go:166:2-170:3: `type testCase struct {
		in      string
		want    uint64
		wantErr string
	}`
$DIR/cmd/streaming-signature-v4_test.go:183:3-183:69: `tests = append(tests, testCase{in: fmt.Sprintf("%x", i), want: i})`
$DIR/cmd/streaming-signature-v4_test.go:183:41-183:58: `.Sprintf("%x", i)`
$DIR/cmd/streaming-signature-v4_test.go:188:29-188:63: `.Contains(err.Error(), tt.wantErr)`
$DIR/cmd/sts-handlers_test.go:59:3-62:4: `testCases = append(testCases,
			newTestSuiteIAM(bt, false),
			newTestSuiteIAM(bt, true),
		)`
$DIR/cmd/sts-handlers_test.go:67:4-67:36: `etcdStr = " (with etcd backend)"`
$DIR/cmd/sts-handlers_test.go:69:3-74:4: `t.Run(
			fmt.Sprintf("Test: %d, ServerType: %s%s", i+1, testCase.serverType, etcdStr),
			func(t *testing.T) {
				runAllIAMSTSTests(testCase, &check{t, testCase.serverType})
			},
		)`
$DIR/cmd/sts-handlers_test.go:69:4-74:4: `.Run(
			fmt.Sprintf("Test: %d, ServerType: %s%s", i+1, testCase.serverType, etcdStr),
			func(t *testing.T) {
				runAllIAMSTSTests(testCase, &check{t, testCase.serverType})
			},
		)`
$DIR/cmd/sts-handlers_test.go:70:7-70:80: `.Sprintf("Test: %d, ServerType: %s%s", i+1, testCase.serverType, etcdStr)`
$DIR/cmd/sts-handlers_test.go:72:5-72:64: `runAllIAMSTSTests(testCase, &check{t, testCase.serverType})`
$DIR/cmd/sts-handlers_test.go:668:3-687:4: `t.Run(
			fmt.Sprintf("Test: %d, ServerType: %s", i+1, testCase.ServerTypeDescription),
			func(t *testing.T) {
				c := &check{t, testCase.serverType}
				suite := testCase

				ldapServer := os.Getenv(EnvTestLDAPServer)
				if ldapServer == "" {
					c.Skip("Skipping LDAP test as no LDAP server is provided.")
				}

				suite.SetUpSuite(c)
				suite.SetUpLDAP(c, ldapServer)
				suite.TestLDAPSTS(c)
				suite.TestLDAPSTSServiceAccounts(c)
				suite.TestLDAPSTSServiceAccountsWithUsername(c)
				suite.TestLDAPSTSServiceAccountsWithGroups(c)
				suite.TearDownSuite(c)
			},
		)`
$DIR/cmd/sts-handlers_test.go:668:4-687:4: `.Run(
			fmt.Sprintf("Test: %d, ServerType: %s", i+1, testCase.ServerTypeDescription),
			func(t *testing.T) {
				c := &check{t, testCase.serverType}
				suite := testCase

				ldapServer := os.Getenv(EnvTestLDAPServer)
				if ldapServer == "" {
					c.Skip("Skipping LDAP test as no LDAP server is provided.")
				}

				suite.SetUpSuite(c)
				suite.SetUpLDAP(c, ldapServer)
				suite.TestLDAPSTS(c)
				suite.TestLDAPSTSServiceAccounts(c)
				suite.TestLDAPSTSServiceAccountsWithUsername(c)
				suite.TestLDAPSTSServiceAccountsWithGroups(c)
				suite.TearDownSuite(c)
			},
		)`
$DIR/cmd/sts-handlers_test.go:669:7-669:80: `.Sprintf("Test: %d, ServerType: %s", i+1, testCase.ServerTypeDescription)`
$DIR/cmd/sts-handlers_test.go:674:21-674:47: `.Getenv(EnvTestLDAPServer)`
$DIR/cmd/sts-handlers_test.go:676:6-676:65: `c.Skip("Skipping LDAP test as no LDAP server is provided.")`
$DIR/cmd/sts-handlers_test.go:676:7-676:65: `.Skip("Skipping LDAP test as no LDAP server is provided.")`
$DIR/cmd/sts-handlers_test.go:679:5-679:24: `suite.SetUpSuite(c)`
$DIR/cmd/sts-handlers_test.go:679:10-679:24: `.SetUpSuite(c)`
$DIR/cmd/sts-handlers_test.go:680:5-680:35: `suite.SetUpLDAP(c, ldapServer)`
$DIR/cmd/sts-handlers_test.go:680:10-680:35: `.SetUpLDAP(c, ldapServer)`
$DIR/cmd/sts-handlers_test.go:681:5-681:25: `suite.TestLDAPSTS(c)`
$DIR/cmd/sts-handlers_test.go:681:10-681:25: `.TestLDAPSTS(c)`
$DIR/cmd/sts-handlers_test.go:682:5-682:40: `suite.TestLDAPSTSServiceAccounts(c)`
$DIR/cmd/sts-handlers_test.go:682:10-682:40: `.TestLDAPSTSServiceAccounts(c)`
$DIR/cmd/sts-handlers_test.go:683:5-683:52: `suite.TestLDAPSTSServiceAccountsWithUsername(c)`
$DIR/cmd/sts-handlers_test.go:683:10-683:52: `.TestLDAPSTSServiceAccountsWithUsername(c)`
$DIR/cmd/sts-handlers_test.go:684:5-684:50: `suite.TestLDAPSTSServiceAccountsWithGroups(c)`
$DIR/cmd/sts-handlers_test.go:684:10-684:50: `.TestLDAPSTSServiceAccountsWithGroups(c)`
$DIR/cmd/sts-handlers_test.go:685:5-685:27: `suite.TearDownSuite(c)`
$DIR/cmd/sts-handlers_test.go:685:10-685:27: `.TearDownSuite(c)`
$DIR/cmd/sts-handlers_test.go:1451:3-1469:4: `t.Run(
			fmt.Sprintf("Test: %d, ServerType: %s", i+1, testCase.ServerTypeDescription),
			func(t *testing.T) {
				c := &check{t, testCase.serverType}
				suite := testCase

				openIDServer := os.Getenv(EnvTestOpenIDServer)
				if openIDServer == "" {
					c.Skip("Skipping OpenID test as no OpenID server is provided.")
				}

				suite.SetUpSuite(c)
				suite.SetUpOpenID(c, openIDServer, "")
				suite.TestOpenIDSTS(c)
				suite.TestOpenIDServiceAcc(c)
				suite.TestOpenIDSTSAddUser(c)
				suite.TearDownSuite(c)
			},
		)`
$DIR/cmd/sts-handlers_test.go:1451:4-1469:4: `.Run(
			fmt.Sprintf("Test: %d, ServerType: %s", i+1, testCase.ServerTypeDescription),
			func(t *testing.T) {
				c := &check{t, testCase.serverType}
				suite := testCase

				openIDServer := os.Getenv(EnvTestOpenIDServer)
				if openIDServer == "" {
					c.Skip("Skipping OpenID test as no OpenID server is provided.")
				}

				suite.SetUpSuite(c)
				suite.SetUpOpenID(c, openIDServer, "")
				suite.TestOpenIDSTS(c)
				suite.TestOpenIDServiceAcc(c)
				suite.TestOpenIDSTSAddUser(c)
				suite.TearDownSuite(c)
			},
		)`
$DIR/cmd/sts-handlers_test.go:1452:7-1452:80: `.Sprintf("Test: %d, ServerType: %s", i+1, testCase.ServerTypeDescription)`
$DIR/cmd/sts-handlers_test.go:1457:23-1457:51: `.Getenv(EnvTestOpenIDServer)`
$DIR/cmd/sts-handlers_test.go:1459:6-1459:69: `c.Skip("Skipping OpenID test as no OpenID server is provided.")`
$DIR/cmd/sts-handlers_test.go:1459:7-1459:69: `.Skip("Skipping OpenID test as no OpenID server is provided.")`
$DIR/cmd/sts-handlers_test.go:1462:5-1462:24: `suite.SetUpSuite(c)`
$DIR/cmd/sts-handlers_test.go:1462:10-1462:24: `.SetUpSuite(c)`
$DIR/cmd/sts-handlers_test.go:1463:5-1463:43: `suite.SetUpOpenID(c, openIDServer, "")`
$DIR/cmd/sts-handlers_test.go:1463:10-1463:43: `.SetUpOpenID(c, openIDServer, "")`
$DIR/cmd/sts-handlers_test.go:1464:5-1464:27: `suite.TestOpenIDSTS(c)`
$DIR/cmd/sts-handlers_test.go:1464:10-1464:27: `.TestOpenIDSTS(c)`
$DIR/cmd/sts-handlers_test.go:1465:5-1465:34: `suite.TestOpenIDServiceAcc(c)`
$DIR/cmd/sts-handlers_test.go:1465:10-1465:34: `.TestOpenIDServiceAcc(c)`
$DIR/cmd/sts-handlers_test.go:1466:5-1466:34: `suite.TestOpenIDSTSAddUser(c)`
$DIR/cmd/sts-handlers_test.go:1466:10-1466:34: `.TestOpenIDSTSAddUser(c)`
$DIR/cmd/sts-handlers_test.go:1467:5-1467:27: `suite.TearDownSuite(c)`
$DIR/cmd/sts-handlers_test.go:1467:10-1467:27: `.TearDownSuite(c)`
$DIR/cmd/sts-handlers_test.go:1475:3-1492:4: `t.Run(
			fmt.Sprintf("Test: %d, ServerType: %s", i+1, testCase.ServerTypeDescription),
			func(t *testing.T) {
				c := &check{t, testCase.serverType}
				suite := testCase

				openIDServer := os.Getenv(EnvTestOpenIDServer)
				if openIDServer == "" {
					c.Skip("Skipping OpenID test as no OpenID server is provided.")
				}

				suite.SetUpSuite(c)
				suite.SetUpOpenID(c, openIDServer, "readwrite")
				suite.TestOpenIDSTSWithRolePolicy(c, testRoleARNs[0], testRoleMap[testRoleARNs[0]])
				suite.TestOpenIDServiceAccWithRolePolicy(c)
				suite.TearDownSuite(c)
			},
		)`
$DIR/cmd/sts-handlers_test.go:1475:4-1492:4: `.Run(
			fmt.Sprintf("Test: %d, ServerType: %s", i+1, testCase.ServerTypeDescription),
			func(t *testing.T) {
				c := &check{t, testCase.serverType}
				suite := testCase

				openIDServer := os.Getenv(EnvTestOpenIDServer)
				if openIDServer == "" {
					c.Skip("Skipping OpenID test as no OpenID server is provided.")
				}

				suite.SetUpSuite(c)
				suite.SetUpOpenID(c, openIDServer, "readwrite")
				suite.TestOpenIDSTSWithRolePolicy(c, testRoleARNs[0], testRoleMap[testRoleARNs[0]])
				suite.TestOpenIDServiceAccWithRolePolicy(c)
				suite.TearDownSuite(c)
			},
		)`
$DIR/cmd/sts-handlers_test.go:1476:7-1476:80: `.Sprintf("Test: %d, ServerType: %s", i+1, testCase.ServerTypeDescription)`
$DIR/cmd/sts-handlers_test.go:1481:23-1481:51: `.Getenv(EnvTestOpenIDServer)`
$DIR/cmd/sts-handlers_test.go:1483:6-1483:69: `c.Skip("Skipping OpenID test as no OpenID server is provided.")`
$DIR/cmd/sts-handlers_test.go:1483:7-1483:69: `.Skip("Skipping OpenID test as no OpenID server is provided.")`
$DIR/cmd/sts-handlers_test.go:1486:5-1486:24: `suite.SetUpSuite(c)`
$DIR/cmd/sts-handlers_test.go:1486:10-1486:24: `.SetUpSuite(c)`
$DIR/cmd/sts-handlers_test.go:1487:5-1487:52: `suite.SetUpOpenID(c, openIDServer, "readwrite")`
$DIR/cmd/sts-handlers_test.go:1487:10-1487:52: `.SetUpOpenID(c, openIDServer, "readwrite")`
$DIR/cmd/sts-handlers_test.go:1488:5-1488:88: `suite.TestOpenIDSTSWithRolePolicy(c, testRoleARNs[0], testRoleMap[testRoleARNs[0]])`
$DIR/cmd/sts-handlers_test.go:1488:10-1488:88: `.TestOpenIDSTSWithRolePolicy(c, testRoleARNs[0], testRoleMap[testRoleARNs[0]])`
$DIR/cmd/sts-handlers_test.go:1489:5-1489:48: `suite.TestOpenIDServiceAccWithRolePolicy(c)`
$DIR/cmd/sts-handlers_test.go:1489:10-1489:48: `.TestOpenIDServiceAccWithRolePolicy(c)`
$DIR/cmd/sts-handlers_test.go:1490:5-1490:27: `suite.TearDownSuite(c)`
$DIR/cmd/sts-handlers_test.go:1490:10-1490:27: `.TearDownSuite(c)`
$DIR/cmd/sts-handlers_test.go:1498:3-1514:4: `t.Run(
			fmt.Sprintf("Test: %d, ServerType: %s", i+1, testCase.ServerTypeDescription),
			func(t *testing.T) {
				c := &check{t, testCase.serverType}
				suite := testCase

				openIDServer := os.Getenv(EnvTestOpenIDServer)
				if openIDServer == "" {
					c.Skip("Skipping OpenID test as no OpenID server is provided.")
				}

				suite.SetUpSuite(c)
				suite.SetUpOpenID(c, openIDServer, "projecta,projectb,projectaorb")
				suite.TestOpenIDSTSWithRolePolicyWithPolVar(c, testRoleARNs[0], testRoleMap[testRoleARNs[0]])
				suite.TearDownSuite(c)
			},
		)`
$DIR/cmd/sts-handlers_test.go:1498:4-1514:4: `.Run(
			fmt.Sprintf("Test: %d, ServerType: %s", i+1, testCase.ServerTypeDescription),
			func(t *testing.T) {
				c := &check{t, testCase.serverType}
				suite := testCase

				openIDServer := os.Getenv(EnvTestOpenIDServer)
				if openIDServer == "" {
					c.Skip("Skipping OpenID test as no OpenID server is provided.")
				}

				suite.SetUpSuite(c)
				suite.SetUpOpenID(c, openIDServer, "projecta,projectb,projectaorb")
				suite.TestOpenIDSTSWithRolePolicyWithPolVar(c, testRoleARNs[0], testRoleMap[testRoleARNs[0]])
				suite.TearDownSuite(c)
			},
		)`
$DIR/cmd/sts-handlers_test.go:1499:7-1499:80: `.Sprintf("Test: %d, ServerType: %s", i+1, testCase.ServerTypeDescription)`
$DIR/cmd/sts-handlers_test.go:1504:23-1504:51: `.Getenv(EnvTestOpenIDServer)`
$DIR/cmd/sts-handlers_test.go:1506:6-1506:69: `c.Skip("Skipping OpenID test as no OpenID server is provided.")`
$DIR/cmd/sts-handlers_test.go:1506:7-1506:69: `.Skip("Skipping OpenID test as no OpenID server is provided.")`
$DIR/cmd/sts-handlers_test.go:1509:5-1509:24: `suite.SetUpSuite(c)`
$DIR/cmd/sts-handlers_test.go:1509:10-1509:24: `.SetUpSuite(c)`
$DIR/cmd/sts-handlers_test.go:1510:5-1510:72: `suite.SetUpOpenID(c, openIDServer, "projecta,projectb,projectaorb")`
$DIR/cmd/sts-handlers_test.go:1510:10-1510:72: `.SetUpOpenID(c, openIDServer, "projecta,projectb,projectaorb")`
$DIR/cmd/sts-handlers_test.go:1511:5-1511:98: `suite.TestOpenIDSTSWithRolePolicyWithPolVar(c, testRoleARNs[0], testRoleMap[testRoleARNs[0]])`
$DIR/cmd/sts-handlers_test.go:1511:10-1511:98: `.TestOpenIDSTSWithRolePolicyWithPolVar(c, testRoleARNs[0], testRoleMap[testRoleARNs[0]])`
$DIR/cmd/sts-handlers_test.go:1512:5-1512:27: `suite.TearDownSuite(c)`
$DIR/cmd/sts-handlers_test.go:1512:10-1512:27: `.TearDownSuite(c)`
$DIR/cmd/sts-handlers_test.go:1852:20-1852:48: `.Getenv(EnvTestOpenIDServer)`
$DIR/cmd/sts-handlers_test.go:1853:21-1853:50: `.Getenv(EnvTestOpenIDServer2)`
$DIR/cmd/sts-handlers_test.go:1855:3-1855:76: `t.Skip("Skipping OpenID test as enough OpenID servers are not provided.")`
$DIR/cmd/sts-handlers_test.go:1855:4-1855:76: `.Skip("Skipping OpenID test as enough OpenID servers are not provided.")`
$DIR/cmd/sts-handlers_test.go:1865:3-1879:4: `t.Run(
			fmt.Sprintf("Test: %d, ServerType: %s", i+1, testCase.ServerTypeDescription),
			func(t *testing.T) {
				c := &check{t, testCase.serverType}
				suite := testCase

				suite.SetUpSuite(c)
				defer suite.TearDownSuite(c)

				err := suite.SetUpOpenIDs(c, testApps, rolePolicies)
				if err != nil {
					c.Fatalf("config with 1 claim based and 1 role based provider should pass but got: %v", err)
				}
			},
		)`
$DIR/cmd/sts-handlers_test.go:1865:4-1879:4: `.Run(
			fmt.Sprintf("Test: %d, ServerType: %s", i+1, testCase.ServerTypeDescription),
			func(t *testing.T) {
				c := &check{t, testCase.serverType}
				suite := testCase

				suite.SetUpSuite(c)
				defer suite.TearDownSuite(c)

				err := suite.SetUpOpenIDs(c, testApps, rolePolicies)
				if err != nil {
					c.Fatalf("config with 1 claim based and 1 role based provider should pass but got: %v", err)
				}
			},
		)`
$DIR/cmd/sts-handlers_test.go:1866:7-1866:80: `.Sprintf("Test: %d, ServerType: %s", i+1, testCase.ServerTypeDescription)`
$DIR/cmd/sts-handlers_test.go:1871:5-1871:24: `suite.SetUpSuite(c)`
$DIR/cmd/sts-handlers_test.go:1871:10-1871:24: `.SetUpSuite(c)`
$DIR/cmd/sts-handlers_test.go:1872:16-1872:33: `.TearDownSuite(c)`
$DIR/cmd/sts-handlers_test.go:1874:17-1874:57: `.SetUpOpenIDs(c, testApps, rolePolicies)`
$DIR/cmd/sts-handlers_test.go:1884:20-1884:48: `.Getenv(EnvTestOpenIDServer)`
$DIR/cmd/sts-handlers_test.go:1885:21-1885:50: `.Getenv(EnvTestOpenIDServer2)`
$DIR/cmd/sts-handlers_test.go:1887:3-1887:76: `t.Skip("Skipping OpenID test as enough OpenID servers are not provided.")`
$DIR/cmd/sts-handlers_test.go:1887:4-1887:76: `.Skip("Skipping OpenID test as enough OpenID servers are not provided.")`
$DIR/cmd/sts-handlers_test.go:1897:3-1911:4: `t.Run(
			fmt.Sprintf("Test: %d, ServerType: %s", i+1, testCase.ServerTypeDescription),
			func(t *testing.T) {
				c := &check{t, testCase.serverType}
				suite := testCase

				suite.SetUpSuite(c)
				defer suite.TearDownSuite(c)

				err := suite.SetUpOpenIDs(c, testApps, rolePolicies)
				if err == nil {
					c.Fatalf("config with 2 claim based provider should fail")
				}
			},
		)`
$DIR/cmd/sts-handlers_test.go:1897:4-1911:4: `.Run(
			fmt.Sprintf("Test: %d, ServerType: %s", i+1, testCase.ServerTypeDescription),
			func(t *testing.T) {
				c := &check{t, testCase.serverType}
				suite := testCase

				suite.SetUpSuite(c)
				defer suite.TearDownSuite(c)

				err := suite.SetUpOpenIDs(c, testApps, rolePolicies)
				if err == nil {
					c.Fatalf("config with 2 claim based provider should fail")
				}
			},
		)`
$DIR/cmd/sts-handlers_test.go:1898:7-1898:80: `.Sprintf("Test: %d, ServerType: %s", i+1, testCase.ServerTypeDescription)`
$DIR/cmd/sts-handlers_test.go:1903:5-1903:24: `suite.SetUpSuite(c)`
$DIR/cmd/sts-handlers_test.go:1903:10-1903:24: `.SetUpSuite(c)`
$DIR/cmd/sts-handlers_test.go:1904:16-1904:33: `.TearDownSuite(c)`
$DIR/cmd/sts-handlers_test.go:1906:17-1906:57: `.SetUpOpenIDs(c, testApps, rolePolicies)`
$DIR/cmd/sts-handlers_test.go:1916:20-1916:48: `.Getenv(EnvTestOpenIDServer)`
$DIR/cmd/sts-handlers_test.go:1917:21-1917:50: `.Getenv(EnvTestOpenIDServer2)`
$DIR/cmd/sts-handlers_test.go:1919:3-1919:76: `t.Skip("Skipping OpenID test as enough OpenID servers are not provided.")`
$DIR/cmd/sts-handlers_test.go:1919:4-1919:76: `.Skip("Skipping OpenID test as enough OpenID servers are not provided.")`
$DIR/cmd/sts-handlers_test.go:1929:3-1945:4: `t.Run(
			fmt.Sprintf("Test: %d, ServerType: %s", i+1, testCase.ServerTypeDescription),
			func(t *testing.T) {
				c := &check{t, testCase.serverType}
				suite := testCase

				suite.SetUpSuite(c)
				err := suite.SetUpOpenIDs(c, testApps, rolePolicies)
				if err != nil {
					c.Fatalf("Error setting up openid providers for tests: %v", err)
				}
				suite.TestOpenIDSTSWithRolePolicy(c, testRoleARNs[0], testRoleMap[testRoleARNs[0]])
				suite.TestOpenIDSTSWithRolePolicy(c, testRoleARNs[1], testRoleMap[testRoleARNs[1]])
				suite.TestOpenIDServiceAccWithRolePolicy(c)
				suite.TearDownSuite(c)
			},
		)`
$DIR/cmd/sts-handlers_test.go:1929:4-1945:4: `.Run(
			fmt.Sprintf("Test: %d, ServerType: %s", i+1, testCase.ServerTypeDescription),
			func(t *testing.T) {
				c := &check{t, testCase.serverType}
				suite := testCase

				suite.SetUpSuite(c)
				err := suite.SetUpOpenIDs(c, testApps, rolePolicies)
				if err != nil {
					c.Fatalf("Error setting up openid providers for tests: %v", err)
				}
				suite.TestOpenIDSTSWithRolePolicy(c, testRoleARNs[0], testRoleMap[testRoleARNs[0]])
				suite.TestOpenIDSTSWithRolePolicy(c, testRoleARNs[1], testRoleMap[testRoleARNs[1]])
				suite.TestOpenIDServiceAccWithRolePolicy(c)
				suite.TearDownSuite(c)
			},
		)`
$DIR/cmd/sts-handlers_test.go:1930:7-1930:80: `.Sprintf("Test: %d, ServerType: %s", i+1, testCase.ServerTypeDescription)`
$DIR/cmd/sts-handlers_test.go:1935:5-1935:24: `suite.SetUpSuite(c)`
$DIR/cmd/sts-handlers_test.go:1935:10-1935:24: `.SetUpSuite(c)`
$DIR/cmd/sts-handlers_test.go:1936:17-1936:57: `.SetUpOpenIDs(c, testApps, rolePolicies)`
$DIR/cmd/sts-handlers_test.go:1940:5-1940:88: `suite.TestOpenIDSTSWithRolePolicy(c, testRoleARNs[0], testRoleMap[testRoleARNs[0]])`
$DIR/cmd/sts-handlers_test.go:1940:10-1940:88: `.TestOpenIDSTSWithRolePolicy(c, testRoleARNs[0], testRoleMap[testRoleARNs[0]])`
$DIR/cmd/sts-handlers_test.go:1941:5-1941:88: `suite.TestOpenIDSTSWithRolePolicy(c, testRoleARNs[1], testRoleMap[testRoleARNs[1]])`
$DIR/cmd/sts-handlers_test.go:1941:10-1941:88: `.TestOpenIDSTSWithRolePolicy(c, testRoleARNs[1], testRoleMap[testRoleARNs[1]])`
$DIR/cmd/sts-handlers_test.go:1942:5-1942:48: `suite.TestOpenIDServiceAccWithRolePolicy(c)`
$DIR/cmd/sts-handlers_test.go:1942:10-1942:48: `.TestOpenIDServiceAccWithRolePolicy(c)`
$DIR/cmd/sts-handlers_test.go:1943:5-1943:27: `suite.TearDownSuite(c)`
$DIR/cmd/sts-handlers_test.go:1943:10-1943:27: `.TearDownSuite(c)`
$DIR/cmd/sts-handlers_test.go:1951:20-1951:48: `.Getenv(EnvTestOpenIDServer)`
$DIR/cmd/sts-handlers_test.go:1952:21-1952:50: `.Getenv(EnvTestOpenIDServer2)`
$DIR/cmd/sts-handlers_test.go:1954:3-1954:76: `t.Skip("Skipping OpenID test as enough OpenID servers are not provided.")`
$DIR/cmd/sts-handlers_test.go:1954:4-1954:76: `.Skip("Skipping OpenID test as enough OpenID servers are not provided.")`
$DIR/cmd/sts-handlers_test.go:1964:3-1984:4: `t.Run(
			fmt.Sprintf("Test: %d, ServerType: %s", i+1, testCase.ServerTypeDescription),
			func(t *testing.T) {
				c := &check{t, testCase.serverType}
				suite := testCase

				suite.SetUpSuite(c)
				defer suite.TearDownSuite(c)

				err := suite.SetUpOpenIDs(c, testApps, rolePolicies)
				if err != nil {
					c.Fatalf("Error setting up openid providers for tests: %v", err)
				}

				suite.SetUpAccMgmtPlugin(c)

				suite.TestOpenIDSTSWithRolePolicyUnderAMP(c, testRoleARNs[0], testRoleMap[testRoleARNs[0]])
				suite.TestOpenIDSTSWithRolePolicyUnderAMP(c, testRoleARNs[1], testRoleMap[testRoleARNs[1]])
				suite.TestOpenIDServiceAccWithRolePolicyUnderAMP(c)
			},
		)`
$DIR/cmd/sts-handlers_test.go:1964:4-1984:4: `.Run(
			fmt.Sprintf("Test: %d, ServerType: %s", i+1, testCase.ServerTypeDescription),
			func(t *testing.T) {
				c := &check{t, testCase.serverType}
				suite := testCase

				suite.SetUpSuite(c)
				defer suite.TearDownSuite(c)

				err := suite.SetUpOpenIDs(c, testApps, rolePolicies)
				if err != nil {
					c.Fatalf("Error setting up openid providers for tests: %v", err)
				}

				suite.SetUpAccMgmtPlugin(c)

				suite.TestOpenIDSTSWithRolePolicyUnderAMP(c, testRoleARNs[0], testRoleMap[testRoleARNs[0]])
				suite.TestOpenIDSTSWithRolePolicyUnderAMP(c, testRoleARNs[1], testRoleMap[testRoleARNs[1]])
				suite.TestOpenIDServiceAccWithRolePolicyUnderAMP(c)
			},
		)`
$DIR/cmd/sts-handlers_test.go:1965:7-1965:80: `.Sprintf("Test: %d, ServerType: %s", i+1, testCase.ServerTypeDescription)`
$DIR/cmd/sts-handlers_test.go:1970:5-1970:24: `suite.SetUpSuite(c)`
$DIR/cmd/sts-handlers_test.go:1970:10-1970:24: `.SetUpSuite(c)`
$DIR/cmd/sts-handlers_test.go:1971:16-1971:33: `.TearDownSuite(c)`
$DIR/cmd/sts-handlers_test.go:1973:17-1973:57: `.SetUpOpenIDs(c, testApps, rolePolicies)`
$DIR/cmd/sts-handlers_test.go:1978:5-1978:32: `suite.SetUpAccMgmtPlugin(c)`
$DIR/cmd/sts-handlers_test.go:1978:10-1978:32: `.SetUpAccMgmtPlugin(c)`
$DIR/cmd/sts-handlers_test.go:1980:5-1980:96: `suite.TestOpenIDSTSWithRolePolicyUnderAMP(c, testRoleARNs[0], testRoleMap[testRoleARNs[0]])`
$DIR/cmd/sts-handlers_test.go:1980:10-1980:96: `.TestOpenIDSTSWithRolePolicyUnderAMP(c, testRoleARNs[0], testRoleMap[testRoleARNs[0]])`
$DIR/cmd/sts-handlers_test.go:1981:5-1981:96: `suite.TestOpenIDSTSWithRolePolicyUnderAMP(c, testRoleARNs[1], testRoleMap[testRoleARNs[1]])`
$DIR/cmd/sts-handlers_test.go:1981:10-1981:96: `.TestOpenIDSTSWithRolePolicyUnderAMP(c, testRoleARNs[1], testRoleMap[testRoleARNs[1]])`
$DIR/cmd/sts-handlers_test.go:1982:5-1982:56: `suite.TestOpenIDServiceAccWithRolePolicyUnderAMP(c)`
$DIR/cmd/sts-handlers_test.go:1982:10-1982:56: `.TestOpenIDServiceAccWithRolePolicyUnderAMP(c)`
$DIR/cmd/test-utils_test.go:74:2-74:14: `flag.Parse()`
$DIR/cmd/test-utils_test.go:74:6-74:14: `.Parse()`
$DIR/cmd/test-utils_test.go:77:2-77:24: `globalIsTesting = true`
$DIR/cmd/test-utils_test.go:79:2-79:32: `globalIsCICD = globalIsTesting`
$DIR/cmd/test-utils_test.go:81:2-84:3: `globalActiveCred = auth.Credentials{
		AccessKey: auth.DefaultAccessKey,
		SecretKey: auth.DefaultSecretKey,
	}`
$DIR/cmd/test-utils_test.go:94:3-94:19: `os.Unsetenv(env)`
$DIR/cmd/test-utils_test.go:94:5-94:19: `.Unsetenv(env)`
$DIR/cmd/test-utils_test.go:98:2-98:29: `globalIsDistErasure = false`
$DIR/cmd/test-utils_test.go:101:2-101:27: `color.Output = io.Discard`
$DIR/cmd/test-utils_test.go:103:2-103:42: `logger.MinimumLogLevel = logger.ErrorLvl`
$DIR/cmd/test-utils_test.go:109:2-109:19: `setMaxResources()`
$DIR/cmd/test-utils_test.go:112:2-112:59: `globalConsoleSys = NewConsoleLogger(context.Background())`
$DIR/cmd/test-utils_test.go:112:45-112:58: `.Background()`
$DIR/cmd/test-utils_test.go:114:2-114:58: `globalInternodeTransport = NewInternodeHTTPTransport()()`
$DIR/cmd/test-utils_test.go:116:2-116:12: `initHelp()`
$DIR/cmd/test-utils_test.go:118:2-118:20: `resetTestGlobals()`
$DIR/cmd/test-utils_test.go:120:2-120:21: `globalIsCICD = true`
$DIR/cmd/test-utils_test.go:122:11-122:17: `.Run()`
$DIR/cmd/test-utils_test.go:2254:16-2254:29: `.Background()`
$DIR/cmd/tier-journal_gen_test.go:14:15-14:31: `.MarshalMsg(nil)`
$DIR/cmd/tier-journal_gen_test.go:18:16-18:34: `.UnmarshalMsg(bts)`
$DIR/cmd/tier-journal_gen_test.go:26:2-26:28: `left, err = msgp.Skip(bts)`
$DIR/cmd/tier-journal_gen_test.go:26:18-26:28: `.Skip(bts)`
$DIR/cmd/tier-journal_gen_test.go:73:2-73:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/tier-journal_gen_test.go:73:6-73:23: `.Encode(&buf, &v)`
$DIR/cmd/tier-journal_gen_test.go:75:8-75:18: `.Msgsize()`
$DIR/cmd/tier-journal_gen_test.go:76:8-76:14: `.Len()`
$DIR/cmd/tier-journal_gen_test.go:81:13-81:31: `.Decode(&buf, &vn)`
$DIR/cmd/tier-journal_gen_test.go:86:2-86:13: `buf.Reset()`
$DIR/cmd/tier-journal_gen_test.go:86:5-86:13: `.Reset()`
$DIR/cmd/tier-journal_gen_test.go:87:2-87:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/tier-journal_gen_test.go:87:6-87:23: `.Encode(&buf, &v)`
$DIR/cmd/tier-journal_gen_test.go:88:2-88:35: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/tier-journal_gen_test.go:88:12-88:28: `.NewReader(&buf)`
$DIR/cmd/tier-journal_gen_test.go:88:28-88:35: `.Skip()`
$DIR/cmd/tier-journal_gen_test.go:127:15-127:31: `.MarshalMsg(nil)`
$DIR/cmd/tier-journal_gen_test.go:131:16-131:34: `.UnmarshalMsg(bts)`
$DIR/cmd/tier-journal_gen_test.go:139:2-139:28: `left, err = msgp.Skip(bts)`
$DIR/cmd/tier-journal_gen_test.go:139:18-139:28: `.Skip(bts)`
$DIR/cmd/tier-journal_gen_test.go:186:2-186:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/tier-journal_gen_test.go:186:6-186:23: `.Encode(&buf, &v)`
$DIR/cmd/tier-journal_gen_test.go:188:8-188:18: `.Msgsize()`
$DIR/cmd/tier-journal_gen_test.go:189:8-189:14: `.Len()`
$DIR/cmd/tier-journal_gen_test.go:194:13-194:31: `.Decode(&buf, &vn)`
$DIR/cmd/tier-journal_gen_test.go:199:2-199:13: `buf.Reset()`
$DIR/cmd/tier-journal_gen_test.go:199:5-199:13: `.Reset()`
$DIR/cmd/tier-journal_gen_test.go:200:2-200:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/tier-journal_gen_test.go:200:6-200:23: `.Encode(&buf, &v)`
$DIR/cmd/tier-journal_gen_test.go:201:2-201:35: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/tier-journal_gen_test.go:201:12-201:28: `.NewReader(&buf)`
$DIR/cmd/tier-journal_gen_test.go:201:28-201:35: `.Skip()`
$DIR/cmd/tier-journal_test.go:43:18-43:37: `.je.MarshalMsg(nil)`
$DIR/cmd/tier-journal_test.go:47:3-47:14: `b.Write(bs)`
$DIR/cmd/tier-journal_test.go:47:4-47:14: `.Write(bs)`
$DIR/cmd/tier-journal_test.go:50:12-50:26: `.NewReader(&b)`
$DIR/cmd/tier-journal_test.go:53:12-53:26: `.DecodeMsg(mr)`
$DIR/cmd/tier-journal_test.go:83:18-83:34: `.MarshalMsg(nil)`
$DIR/cmd/tier-journal_test.go:87:3-87:14: `b.Write(bs)`
$DIR/cmd/tier-journal_test.go:87:4-87:14: `.Write(bs)`
$DIR/cmd/tier-journal_test.go:90:18-90:34: `.MarshalMsg(nil)`
$DIR/cmd/tier-journal_test.go:94:3-94:14: `b.Write(bs)`
$DIR/cmd/tier-journal_test.go:94:4-94:14: `.Write(bs)`
$DIR/cmd/tier-journal_test.go:98:12-98:26: `.NewReader(&b)`
$DIR/cmd/tier-journal_test.go:101:12-101:26: `.DecodeMsg(mr)`
$DIR/cmd/tier-journal_test.go:109:4-113:5: `expectedJe = jentry{
				ObjName:   oldStructVals[i].ObjName,
				VersionID: "",
				TierName:  oldStructVals[i].TierName,
			}`
$DIR/cmd/tier-journal_test.go:115:4-115:52: `expectedJe = newStructVals[i-len(oldStructVals)]`
$DIR/cmd/tier_gen_test.go:14:15-14:31: `.MarshalMsg(nil)`
$DIR/cmd/tier_gen_test.go:18:16-18:34: `.UnmarshalMsg(bts)`
$DIR/cmd/tier_gen_test.go:26:2-26:28: `left, err = msgp.Skip(bts)`
$DIR/cmd/tier_gen_test.go:26:18-26:28: `.Skip(bts)`
$DIR/cmd/tier_gen_test.go:73:2-73:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/tier_gen_test.go:73:6-73:23: `.Encode(&buf, &v)`
$DIR/cmd/tier_gen_test.go:75:8-75:18: `.Msgsize()`
$DIR/cmd/tier_gen_test.go:76:8-76:14: `.Len()`
$DIR/cmd/tier_gen_test.go:81:13-81:31: `.Decode(&buf, &vn)`
$DIR/cmd/tier_gen_test.go:86:2-86:13: `buf.Reset()`
$DIR/cmd/tier_gen_test.go:86:5-86:13: `.Reset()`
$DIR/cmd/tier_gen_test.go:87:2-87:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/tier_gen_test.go:87:6-87:23: `.Encode(&buf, &v)`
$DIR/cmd/tier_gen_test.go:88:2-88:35: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/tier_gen_test.go:88:12-88:28: `.NewReader(&buf)`
$DIR/cmd/tier_gen_test.go:88:28-88:35: `.Skip()`
$DIR/cmd/update-notifier_test.go:74:15-74:85: `.Sprintf("%s %s", plainMsg, color.YellowBold(testCase.expectedSubStr))`
$DIR/cmd/update-notifier_test.go:74:48-74:84: `.YellowBold(testCase.expectedSubStr)`
$DIR/cmd/update-notifier_test.go:75:15-75:69: `.Sprintf("Update: %s", color.CyanBold(testCase.dlURL))`
$DIR/cmd/update-notifier_test.go:75:43-75:68: `.CyanBold(testCase.dlURL)`
$DIR/cmd/update-notifier_test.go:87:16-87:40: `.Contains(output, line1)`
$DIR/cmd/update-notifier_test.go:89:16-89:40: `.Contains(output, line2)`
$DIR/cmd/update_test.go:52:19-52:36: `.LoadLocation("")`
$DIR/cmd/update_test.go:59:8-59:62: `.Date(2017, time.September, 29, 19, 16, 56, 0, utcLoc)`
$DIR/cmd/update_test.go:63:8-63:56: `.Date(2017, time.August, 5, 0, 0, 53, 0, utcLoc)`
$DIR/cmd/update_test.go:67:8-67:14: `.Now()`
$DIR/cmd/update_test.go:67:14-67:20: `.UTC()`
$DIR/cmd/update_test.go:71:8-71:14: `.Now()`
$DIR/cmd/update_test.go:71:14-71:20: `.UTC()`
$DIR/cmd/update_test.go:75:8-75:56: `.Date(2017, time.August, 5, 0, 0, 53, 0, utcLoc)`
$DIR/cmd/update_test.go:79:8-79:56: `.Date(2017, time.August, 5, 0, 0, 53, 0, utcLoc)`
$DIR/cmd/update_test.go:94:28-94:46: `.Equal(testCase.t)`
$DIR/cmd/update_test.go:102:2-102:22: `globalIsCICD = false`
$DIR/cmd/update_test.go:104:3-104:21: `globalIsCICD = sci`
$DIR/cmd/update_test.go:125:2-125:52: `t.Setenv("KUBERNETES_SERVICE_HOST", "10.11.148.5")`
$DIR/cmd/update_test.go:125:3-125:52: `.Setenv("KUBERNETES_SERVICE_HOST", "10.11.148.5")`
$DIR/cmd/update_test.go:126:2-126:38: `durl = getDownloadURL(minioVersion1)`
$DIR/cmd/update_test.go:131:2-131:48: `t.Setenv("MESOS_CONTAINER_NAME", "mesos-1111")`
$DIR/cmd/update_test.go:131:3-131:48: `.Setenv("MESOS_CONTAINER_NAME", "mesos-1111")`
$DIR/cmd/update_test.go:132:2-132:38: `durl = getDownloadURL(minioVersion1)`
$DIR/cmd/update_test.go:150:20-150:179: `.Sprintf("MinIO (%s; %s; %s; source) MinIO/DEVELOPMENT.GOGET MinIO/DEVELOPMENT.GOGET MinIO/DEVELOPMENT.GOGET", runtime.GOOS, runtime.GOARCH, globalMinioModeFS)`
$DIR/cmd/update_test.go:156:20-156:228: `.Sprintf("MinIO (%s; %s; %s; %s; source) MinIO/DEVELOPMENT.GOGET MinIO/DEVELOPMENT.GOGET MinIO/DEVELOPMENT.GOGET MinIO/universe-%s", runtime.GOOS, runtime.GOARCH, globalMinioModeErasure, "dcos", "mesos-1111")`
$DIR/cmd/update_test.go:162:20-162:202: `.Sprintf("MinIO (%s; %s; %s; %s; source) MinIO/DEVELOPMENT.GOGET MinIO/DEVELOPMENT.GOGET MinIO/DEVELOPMENT.GOGET", runtime.GOOS, runtime.GOARCH, globalMinioModeErasure, "kubernetes")`
$DIR/cmd/update_test.go:168:3-168:23: `globalIsCICD = false`
$DIR/cmd/update_test.go:171:4-171:49: `t.Setenv(testCase.envName, testCase.envValue)`
$DIR/cmd/update_test.go:171:5-171:49: `.Setenv(testCase.envName, testCase.envValue)`
$DIR/cmd/update_test.go:173:5-173:70: `t.Setenv("MARATHON_APP_LABEL_DCOS_PACKAGE_VERSION", "mesos-1111")`
$DIR/cmd/update_test.go:173:6-173:70: `.Setenv("MARATHON_APP_LABEL_DCOS_PACKAGE_VERSION", "mesos-1111")`
$DIR/cmd/update_test.go:180:4-180:81: `expectedStr = strings.ReplaceAll(expectedStr, "; source", "; docker; source")`
$DIR/cmd/update_test.go:180:25-180:81: `.ReplaceAll(expectedStr, "; source", "; docker; source")`
$DIR/cmd/update_test.go:182:14-182:41: `.Contains(str, expectedStr)`
$DIR/cmd/update_test.go:185:3-185:21: `globalIsCICD = sci`
$DIR/cmd/update_test.go:186:3-186:57: `os.Unsetenv("MARATHON_APP_LABEL_DCOS_PACKAGE_VERSION")`
$DIR/cmd/update_test.go:186:5-186:57: `.Unsetenv("MARATHON_APP_LABEL_DCOS_PACKAGE_VERSION")`
$DIR/cmd/update_test.go:187:3-187:32: `os.Unsetenv(testCase.envName)`
$DIR/cmd/update_test.go:187:5-187:32: `.Unsetenv(testCase.envName)`
$DIR/cmd/update_test.go:194:2-194:22: `globalIsCICD = false`
$DIR/cmd/update_test.go:196:3-196:21: `globalIsCICD = sci`
$DIR/cmd/update_test.go:199:2-199:48: `t.Setenv("MESOS_CONTAINER_NAME", "mesos-1111")`
$DIR/cmd/update_test.go:199:3-199:48: `.Setenv("MESOS_CONTAINER_NAME", "mesos-1111")`
$DIR/cmd/update_test.go:204:2-204:37: `os.Unsetenv("MESOS_CONTAINER_NAME")`
$DIR/cmd/update_test.go:204:4-204:37: `.Unsetenv("MESOS_CONTAINER_NAME")`
$DIR/cmd/update_test.go:205:2-205:17: `dcos = IsDCOS()`
$DIR/cmd/update_test.go:214:2-214:22: `globalIsCICD = false`
$DIR/cmd/update_test.go:216:3-216:21: `globalIsCICD = sci`
$DIR/cmd/update_test.go:219:2-219:52: `t.Setenv("KUBERNETES_SERVICE_HOST", "10.11.148.5")`
$DIR/cmd/update_test.go:219:3-219:52: `.Setenv("KUBERNETES_SERVICE_HOST", "10.11.148.5")`
$DIR/cmd/update_test.go:224:2-224:40: `os.Unsetenv("KUBERNETES_SERVICE_HOST")`
$DIR/cmd/update_test.go:224:4-224:40: `.Unsetenv("KUBERNETES_SERVICE_HOST")`
$DIR/cmd/update_test.go:226:2-226:29: `kubernetes = IsKubernetes()`
$DIR/cmd/update_test.go:235:21-235:54: `.CreateTemp("", "helm-testfile-")`
$DIR/cmd/update_test.go:239:22-239:43: `.WriteString(content)`
$DIR/cmd/update_test.go:245:17-245:24: `.Name()`
$DIR/cmd/update_test.go:254:10-254:27: `.Remove(filename)`
$DIR/cmd/update_test.go:275:25-275:102: `.NewServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {}))`
$DIR/cmd/update_test.go:275:40-275:101: `.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {})`
$DIR/cmd/update_test.go:277:25-279:5: `.NewServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		fmt.Fprintln(w, "fbe246edbd382902db9a4035df7dce8cb441357d minio.RELEASE.2016-10-07T01-16-39Z")
	}))`
$DIR/cmd/update_test.go:277:40-279:4: `.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		fmt.Fprintln(w, "fbe246edbd382902db9a4035df7dce8cb441357d minio.RELEASE.2016-10-07T01-16-39Z")
	})`
$DIR/cmd/update_test.go:278:3-278:97: `fmt.Fprintln(w, "fbe246edbd382902db9a4035df7dce8cb441357d minio.RELEASE.2016-10-07T01-16-39Z")`
$DIR/cmd/update_test.go:278:6-278:97: `.Fprintln(w, "fbe246edbd382902db9a4035df7dce8cb441357d minio.RELEASE.2016-10-07T01-16-39Z")`
$DIR/cmd/update_test.go:281:25-283:5: `.NewServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		http.Error(w, "", http.StatusNotFound)
	}))`
$DIR/cmd/update_test.go:281:40-283:4: `.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		http.Error(w, "", http.StatusNotFound)
	})`
$DIR/cmd/update_test.go:297:16-297:51: `.Parse(testCase.releaseChecksumURL)`
$DIR/cmd/update_test.go:354:10-354:36: `.EncodeToString(sha256Sum)`
$DIR/cmd/update_test.go:357:16-357:45: `.expectedResult.Equal(result)`
$DIR/cmd/utils_test.go:168:3-176:5: `t.Run("", func(t *testing.T) {
			bucketName, objectName := path2BucketObject(testCase.path)
			if bucketName != testCase.bucket {
				t.Errorf("failed expected bucket name \"%s\", got \"%s\"", testCase.bucket, bucketName)
			}
			if objectName != testCase.object {
				t.Errorf("failed expected bucket name \"%s\", got \"%s\"", testCase.object, objectName)
			}
		})`
$DIR/cmd/utils_test.go:168:4-176:5: `.Run("", func(t *testing.T) {
			bucketName, objectName := path2BucketObject(testCase.path)
			if bucketName != testCase.bucket {
				t.Errorf("failed expected bucket name \"%s\", got \"%s\"", testCase.bucket, bucketName)
			}
			if objectName != testCase.object {
				t.Errorf("failed expected bucket name \"%s\", got \"%s\"", testCase.object, objectName)
			}
		})`
$DIR/cmd/utils_test.go:227:18-227:365: `.NewRequest(http.MethodGet, "http://localhost:9000?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=USWUXHGYZQYFYFFIT3RE%2F20170529%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20170529T190139Z&X-Amz-Expires=600&X-Amz-Signature=19b58080999df54b446fc97304eb8dda60d3df1812ae97f3e8783351bfd9781d&X-Amz-SignedHeaders=host&prefix=Hello%2AWorld%2A", nil)`
$DIR/cmd/utils_test.go:231:2-231:312: `req.RequestURI = "/?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=USWUXHGYZQYFYFFIT3RE%2F20170529%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20170529T190139Z&X-Amz-Expires=600&X-Amz-Signature=19b58080999df54b446fc97304eb8dda60d3df1812ae97f3e8783351bfd9781d&X-Amz-SignedHeaders=host&prefix=Hello%2AWorld%2A"`
$DIR/cmd/utils_test.go:232:2-232:43: `req.Header.Set("content-md5", "====test")`
$DIR/cmd/utils_test.go:232:5-232:43: `.Header.Set("content-md5", "====test")`
$DIR/cmd/utils_test.go:234:2-238:3: `type jsonResult struct {
		Method     string      `json:"method"`
		RequestURI string      `json:"reqURI"`
		Header     http.Header `json:"header"`
	}`
$DIR/cmd/utils_test.go:240:15-240:79: `.Unmarshal([]byte(strings.ReplaceAll(jsonReq, "%%", "%")), &res)`
$DIR/cmd/utils_test.go:240:40-240:71: `.ReplaceAll(jsonReq, "%%", "%")`
$DIR/cmd/utils_test.go:251:2-251:45: `expectedQuery.Set("prefix", "Hello*World*")`
$DIR/cmd/utils_test.go:251:15-251:45: `.Set("prefix", "Hello*World*")`
$DIR/cmd/utils_test.go:252:2-252:58: `expectedQuery.Set("X-Amz-Algorithm", "AWS4-HMAC-SHA256")`
$DIR/cmd/utils_test.go:252:15-252:58: `.Set("X-Amz-Algorithm", "AWS4-HMAC-SHA256")`
$DIR/cmd/utils_test.go:253:2-253:98: `expectedQuery.Set("X-Amz-Credential", "USWUXHGYZQYFYFFIT3RE/20170529/us-east-1/s3/aws4_request")`
$DIR/cmd/utils_test.go:253:15-253:98: `.Set("X-Amz-Credential", "USWUXHGYZQYFYFFIT3RE/20170529/us-east-1/s3/aws4_request")`
$DIR/cmd/utils_test.go:254:2-254:53: `expectedQuery.Set("X-Amz-Date", "20170529T190139Z")`
$DIR/cmd/utils_test.go:254:15-254:53: `.Set("X-Amz-Date", "20170529T190139Z")`
$DIR/cmd/utils_test.go:255:2-255:43: `expectedQuery.Set("X-Amz-Expires", "600")`
$DIR/cmd/utils_test.go:255:15-255:43: `.Set("X-Amz-Expires", "600")`
$DIR/cmd/utils_test.go:256:2-256:50: `expectedQuery.Set("X-Amz-SignedHeaders", "host")`
$DIR/cmd/utils_test.go:256:15-256:50: `.Set("X-Amz-SignedHeaders", "host")`
$DIR/cmd/utils_test.go:257:2-257:106: `expectedQuery.Set("X-Amz-Signature", "19b58080999df54b446fc97304eb8dda60d3df1812ae97f3e8783351bfd9781d")`
$DIR/cmd/utils_test.go:257:15-257:106: `.Set("X-Amz-Signature", "19b58080999df54b446fc97304eb8dda60d3df1812ae97f3e8783351bfd9781d")`
$DIR/cmd/utils_test.go:258:44-258:53: `.Encode()`
$DIR/cmd/utils_test.go:259:13-259:59: `.DeepEqual(res.RequestURI, expectedRequestURI)`
$DIR/cmd/utils_test.go:265:2-265:47: `expectedHeader.Set("content-md5", "====test")`
$DIR/cmd/utils_test.go:265:16-265:47: `.Set("content-md5", "====test")`
$DIR/cmd/utils_test.go:266:2-266:46: `expectedHeader.Set("host", "localhost:9000")`
$DIR/cmd/utils_test.go:266:16-266:46: `.Set("host", "localhost:9000")`
$DIR/cmd/utils_test.go:267:13-267:51: `.DeepEqual(res.Header, expectedHeader)`
$DIR/cmd/utils_test.go:293:19-293:35: `.New("test err")`
$DIR/cmd/utils_test.go:313:18-313:33: `.New("new err")`
$DIR/cmd/utils_test.go:314:18-314:33: `.New("new err")`
$DIR/cmd/utils_test.go:427:2-427:28: `globalIsDistErasure = true`
$DIR/cmd/utils_test.go:428:2-428:43: `testMinioMode(globalMinioModeDistErasure)`
$DIR/cmd/utils_test.go:430:2-430:29: `globalIsDistErasure = false`
$DIR/cmd/utils_test.go:431:2-431:24: `globalIsErasure = true`
$DIR/cmd/utils_test.go:432:2-432:39: `testMinioMode(globalMinioModeErasure)`
$DIR/cmd/utils_test.go:434:2-434:53: `globalIsDistErasure, globalIsErasure = false, false`
$DIR/cmd/utils_test.go:441:2-446:4: `cache.Once.Do(func() {
		cache.TTL = 2 * time.Second
		cache.Update = func() (interface{}, error) {
			return time.Now(), nil
		}
	})`
$DIR/cmd/utils_test.go:441:7-446:4: `.Once.Do(func() {
		cache.TTL = 2 * time.Second
		cache.Update = func() (interface{}, error) {
			return time.Now(), nil
		}
	})`
$DIR/cmd/utils_test.go:442:3-442:30: `cache.TTL = 2 * time.Second`
$DIR/cmd/utils_test.go:444:15-444:21: `.Now()`
$DIR/cmd/utils_test.go:448:15-448:21: `.Get()`
$DIR/cmd/utils_test.go:451:15-451:21: `.Get()`
$DIR/cmd/utils_test.go:454:8-454:18: `.Equal(t2)`
$DIR/cmd/utils_test.go:458:2-458:29: `time.Sleep(3 * time.Second)`
$DIR/cmd/utils_test.go:458:6-458:29: `.Sleep(3 * time.Second)`
$DIR/cmd/utils_test.go:459:15-459:21: `.Get()`
$DIR/cmd/utils_test.go:462:7-462:17: `.Equal(t3)`
$DIR/cmd/version_test.go:26:2-26:34: `Version = "2017-05-07T06:37:49Z"`
$DIR/cmd/version_test.go:27:16-27:45: `.Parse(time.RFC3339, Version)`
$DIR/cmd/xl-storage-errors_test.go:33:2-33:47: `pathErr = &os.PathError{Err: syscall.ENOTDIR}`
$DIR/cmd/xl-storage-errors_test.go:34:2-34:30: `ok = isSysErrNotDir(pathErr)`
$DIR/cmd/xl-storage-errors_test.go:39:3-39:50: `pathErr = &os.PathError{Err: syscall.ENOTEMPTY}`
$DIR/cmd/xl-storage-errors_test.go:40:3-40:33: `ok = isSysErrNotEmpty(pathErr)`
$DIR/cmd/xl-storage-errors_test.go:45:3-45:52: `pathErr = &os.PathError{Err: syscall.Errno(0x91)}`
$DIR/cmd/xl-storage-errors_test.go:45:39-45:51: `.Errno(0x91)`
$DIR/cmd/xl-storage-errors_test.go:46:3-46:33: `ok = isSysErrNotEmpty(pathErr)`
$DIR/cmd/xl-storage-errors_test.go:52:3-52:52: `pathErr = &os.PathError{Err: syscall.Errno(0x03)}`
$DIR/cmd/xl-storage-errors_test.go:52:39-52:51: `.Errno(0x03)`
$DIR/cmd/xl-storage-errors_test.go:53:3-53:37: `ok = isSysErrPathNotFound(pathErr)`
$DIR/cmd/xl-storage-format-utils_test.go:66:3-110:5: `t.Run(tt.name, func(t *testing.T) {
			const n = 100
			want := hashDeterministicString(tt.arg)
			m := tt.arg
			for i := 0; i < n; i++ {
				if got := hashDeterministicString(m); got != want {
					t.Errorf("hashDeterministicString() = %v, want %v", got, want)
				}
			}
			// Check casual collisions
			if m == nil {
				m = make(map[string]string)
			}
			m["12312312"] = ""
			if got := hashDeterministicString(m); got == want {
				t.Errorf("hashDeterministicString() = %v, does not want %v", got, want)
			}
			want = hashDeterministicString(m)
			delete(m, "12312312")
			m["another"] = ""

			if got := hashDeterministicString(m); got == want {
				t.Errorf("hashDeterministicString() = %v, does not want %v", got, want)
			}

			want = hashDeterministicString(m)
			m["another"] = "hashDeterministicString"
			if got := hashDeterministicString(m); got == want {
				t.Errorf("hashDeterministicString() = %v, does not want %v", got, want)
			}

			want = hashDeterministicString(m)
			m["another"] = "hashDeterministicStringhashDeterministicStringhashDeterministicStringhashDeterministicStringhashDeterministicStringhashDeterministicStringhashDeterministicString"
			if got := hashDeterministicString(m); got == want {
				t.Errorf("hashDeterministicString() = %v, does not want %v", got, want)
			}

			// Flip key/value
			want = hashDeterministicString(m)
			delete(m, "another")
			m["hashDeterministicStringhashDeterministicStringhashDeterministicStringhashDeterministicStringhashDeterministicStringhashDeterministicStringhashDeterministicString"] = "another"
			if got := hashDeterministicString(m); got == want {
				t.Errorf("hashDeterministicString() = %v, does not want %v", got, want)
			}
		})`
$DIR/cmd/xl-storage-format-utils_test.go:66:4-110:5: `.Run(tt.name, func(t *testing.T) {
			const n = 100
			want := hashDeterministicString(tt.arg)
			m := tt.arg
			for i := 0; i < n; i++ {
				if got := hashDeterministicString(m); got != want {
					t.Errorf("hashDeterministicString() = %v, want %v", got, want)
				}
			}
			// Check casual collisions
			if m == nil {
				m = make(map[string]string)
			}
			m["12312312"] = ""
			if got := hashDeterministicString(m); got == want {
				t.Errorf("hashDeterministicString() = %v, does not want %v", got, want)
			}
			want = hashDeterministicString(m)
			delete(m, "12312312")
			m["another"] = ""

			if got := hashDeterministicString(m); got == want {
				t.Errorf("hashDeterministicString() = %v, does not want %v", got, want)
			}

			want = hashDeterministicString(m)
			m["another"] = "hashDeterministicString"
			if got := hashDeterministicString(m); got == want {
				t.Errorf("hashDeterministicString() = %v, does not want %v", got, want)
			}

			want = hashDeterministicString(m)
			m["another"] = "hashDeterministicStringhashDeterministicStringhashDeterministicStringhashDeterministicStringhashDeterministicStringhashDeterministicStringhashDeterministicString"
			if got := hashDeterministicString(m); got == want {
				t.Errorf("hashDeterministicString() = %v, does not want %v", got, want)
			}

			// Flip key/value
			want = hashDeterministicString(m)
			delete(m, "another")
			m["hashDeterministicStringhashDeterministicStringhashDeterministicStringhashDeterministicStringhashDeterministicStringhashDeterministicStringhashDeterministicString"] = "another"
			if got := hashDeterministicString(m); got == want {
				t.Errorf("hashDeterministicString() = %v, does not want %v", got, want)
			}
		})`
$DIR/cmd/xl-storage-format-utils_test.go:67:4-67:17: `const n = 100`
$DIR/cmd/xl-storage-format-utils_test.go:77:5-77:32: `m = make(map[string]string)`
$DIR/cmd/xl-storage-format-utils_test.go:79:4-79:22: `m["12312312"] = ""`
$DIR/cmd/xl-storage-format-utils_test.go:83:4-83:37: `want = hashDeterministicString(m)`
$DIR/cmd/xl-storage-format-utils_test.go:84:4-84:25: `delete(m, "12312312")`
$DIR/cmd/xl-storage-format-utils_test.go:85:4-85:21: `m["another"] = ""`
$DIR/cmd/xl-storage-format-utils_test.go:91:4-91:37: `want = hashDeterministicString(m)`
$DIR/cmd/xl-storage-format-utils_test.go:92:4-92:44: `m["another"] = "hashDeterministicString"`
$DIR/cmd/xl-storage-format-utils_test.go:97:4-97:37: `want = hashDeterministicString(m)`
$DIR/cmd/xl-storage-format-utils_test.go:98:4-98:182: `m["another"] = "hashDeterministicStringhashDeterministicStringhashDeterministicStringhashDeterministicStringhashDeterministicStringhashDeterministicStringhashDeterministicString"`
$DIR/cmd/xl-storage-format-utils_test.go:104:4-104:37: `want = hashDeterministicString(m)`
$DIR/cmd/xl-storage-format-utils_test.go:105:4-105:24: `delete(m, "another")`
$DIR/cmd/xl-storage-format-utils_test.go:106:4-106:182: `m["hashDeterministicStringhashDeterministicStringhashDeterministicStringhashDeterministicStringhashDeterministicStringhashDeterministicStringhashDeterministicString"] = "another"`
$DIR/cmd/xl-storage-format-utils_test.go:124:25-124:31: `.Now()`
$DIR/cmd/xl-storage-format-utils_test.go:124:31-124:37: `.UTC()`
$DIR/cmd/xl-storage-format-utils_test.go:130:29-130:38: `.String()`
$DIR/cmd/xl-storage-format-utils_test.go:151:3-151:31: `fi.VersionID = mustGetUUID()`
$DIR/cmd/xl-storage-format-utils_test.go:152:3-152:29: `fi.DataDir = mustGetUUID()`
$DIR/cmd/xl-storage-format-utils_test.go:153:3-153:66: `fi.ModTime = basefi.ModTime.Add(time.Duration(i) * time.Second)`
$DIR/cmd/xl-storage-format-utils_test.go:153:22-153:66: `.ModTime.Add(time.Duration(i) * time.Second)`
$DIR/cmd/xl-storage-format-utils_test.go:153:39-153:51: `.Duration(i)`
$DIR/cmd/xl-storage-format-utils_test.go:154:15-154:30: `.AddVersion(fi)`
$DIR/cmd/xl-storage-format-utils_test.go:161:4-161:59: `transfi.TransitionStatus = lifecycle.TransitionComplete`
$DIR/cmd/xl-storage-format-utils_test.go:162:4-162:41: `transfi.TransitionTier = "MINIO-TIER"`
$DIR/cmd/xl-storage-format-utils_test.go:163:4-163:47: `transfi.TransitionedObjName = mustGetUUID()`
$DIR/cmd/xl-storage-format-utils_test.go:164:4-164:29: `xl.DeleteVersion(transfi)`
$DIR/cmd/xl-storage-format-utils_test.go:164:6-164:29: `.DeleteVersion(transfi)`
$DIR/cmd/xl-storage-format-utils_test.go:166:4-166:42: `fi.SetTierFreeVersionID(mustGetUUID())`
$DIR/cmd/xl-storage-format-utils_test.go:166:6-166:42: `.SetTierFreeVersionID(mustGetUUID())`
$DIR/cmd/xl-storage-format-utils_test.go:168:4-168:24: `xl.DeleteVersion(fi)`
$DIR/cmd/xl-storage-format-utils_test.go:168:6-168:24: `.DeleteVersion(fi)`
$DIR/cmd/xl-storage-format-utils_test.go:169:4-169:67: `freeVersionIDs = append(freeVersionIDs, fi.TierFreeVersionID())`
$DIR/cmd/xl-storage-format-utils_test.go:169:46-169:66: `.TierFreeVersionID()`
$DIR/cmd/xl-storage-format-utils_test.go:171:4-171:35: `versions = append(versions, fi)`
$DIR/cmd/xl-storage-format-utils_test.go:174:16-174:30: `.AppendTo(nil)`
$DIR/cmd/xl-storage-format-utils_test.go:183:2-191:4: `sort.Slice(versions, func(i, j int) bool {
		if versions[i].IsLatest {
			return true
		}
		if versions[j].IsLatest {
			return false
		}
		return versions[i].ModTime.After(versions[j].ModTime)
	})`
$DIR/cmd/xl-storage-format-utils_test.go:183:6-191:4: `.Slice(versions, func(i, j int) bool {
		if versions[i].IsLatest {
			return true
		}
		if versions[j].IsLatest {
			return false
		}
		return versions[i].ModTime.After(versions[j].ModTime)
	})`
$DIR/cmd/xl-storage-format-utils_test.go:190:21-190:56: `.ModTime.After(versions[j].ModTime)`
$DIR/cmd/xl-storage-format-v1_gen_test.go:14:15-14:31: `.MarshalMsg(nil)`
$DIR/cmd/xl-storage-format-v1_gen_test.go:18:16-18:34: `.UnmarshalMsg(bts)`
$DIR/cmd/xl-storage-format-v1_gen_test.go:26:2-26:28: `left, err = msgp.Skip(bts)`
$DIR/cmd/xl-storage-format-v1_gen_test.go:26:18-26:28: `.Skip(bts)`
$DIR/cmd/xl-storage-format-v1_gen_test.go:73:2-73:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/xl-storage-format-v1_gen_test.go:73:6-73:23: `.Encode(&buf, &v)`
$DIR/cmd/xl-storage-format-v1_gen_test.go:75:8-75:18: `.Msgsize()`
$DIR/cmd/xl-storage-format-v1_gen_test.go:76:8-76:14: `.Len()`
$DIR/cmd/xl-storage-format-v1_gen_test.go:81:13-81:31: `.Decode(&buf, &vn)`
$DIR/cmd/xl-storage-format-v1_gen_test.go:86:2-86:13: `buf.Reset()`
$DIR/cmd/xl-storage-format-v1_gen_test.go:86:5-86:13: `.Reset()`
$DIR/cmd/xl-storage-format-v1_gen_test.go:87:2-87:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/xl-storage-format-v1_gen_test.go:87:6-87:23: `.Encode(&buf, &v)`
$DIR/cmd/xl-storage-format-v1_gen_test.go:88:2-88:35: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/xl-storage-format-v1_gen_test.go:88:12-88:28: `.NewReader(&buf)`
$DIR/cmd/xl-storage-format-v1_gen_test.go:88:28-88:35: `.Skip()`
$DIR/cmd/xl-storage-format-v1_gen_test.go:127:15-127:31: `.MarshalMsg(nil)`
$DIR/cmd/xl-storage-format-v1_gen_test.go:131:16-131:34: `.UnmarshalMsg(bts)`
$DIR/cmd/xl-storage-format-v1_gen_test.go:139:2-139:28: `left, err = msgp.Skip(bts)`
$DIR/cmd/xl-storage-format-v1_gen_test.go:139:18-139:28: `.Skip(bts)`
$DIR/cmd/xl-storage-format-v1_gen_test.go:186:2-186:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/xl-storage-format-v1_gen_test.go:186:6-186:23: `.Encode(&buf, &v)`
$DIR/cmd/xl-storage-format-v1_gen_test.go:188:8-188:18: `.Msgsize()`
$DIR/cmd/xl-storage-format-v1_gen_test.go:189:8-189:14: `.Len()`
$DIR/cmd/xl-storage-format-v1_gen_test.go:194:13-194:31: `.Decode(&buf, &vn)`
$DIR/cmd/xl-storage-format-v1_gen_test.go:199:2-199:13: `buf.Reset()`
$DIR/cmd/xl-storage-format-v1_gen_test.go:199:5-199:13: `.Reset()`
$DIR/cmd/xl-storage-format-v1_gen_test.go:200:2-200:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/xl-storage-format-v1_gen_test.go:200:6-200:23: `.Encode(&buf, &v)`
$DIR/cmd/xl-storage-format-v1_gen_test.go:201:2-201:35: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/xl-storage-format-v1_gen_test.go:201:12-201:28: `.NewReader(&buf)`
$DIR/cmd/xl-storage-format-v1_gen_test.go:201:28-201:35: `.Skip()`
$DIR/cmd/xl-storage-format-v1_gen_test.go:240:15-240:31: `.MarshalMsg(nil)`
$DIR/cmd/xl-storage-format-v1_gen_test.go:244:16-244:34: `.UnmarshalMsg(bts)`
$DIR/cmd/xl-storage-format-v1_gen_test.go:252:2-252:28: `left, err = msgp.Skip(bts)`
$DIR/cmd/xl-storage-format-v1_gen_test.go:252:18-252:28: `.Skip(bts)`
$DIR/cmd/xl-storage-format-v1_gen_test.go:299:2-299:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/xl-storage-format-v1_gen_test.go:299:6-299:23: `.Encode(&buf, &v)`
$DIR/cmd/xl-storage-format-v1_gen_test.go:301:8-301:18: `.Msgsize()`
$DIR/cmd/xl-storage-format-v1_gen_test.go:302:8-302:14: `.Len()`
$DIR/cmd/xl-storage-format-v1_gen_test.go:307:13-307:31: `.Decode(&buf, &vn)`
$DIR/cmd/xl-storage-format-v1_gen_test.go:312:2-312:13: `buf.Reset()`
$DIR/cmd/xl-storage-format-v1_gen_test.go:312:5-312:13: `.Reset()`
$DIR/cmd/xl-storage-format-v1_gen_test.go:313:2-313:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/xl-storage-format-v1_gen_test.go:313:6-313:23: `.Encode(&buf, &v)`
$DIR/cmd/xl-storage-format-v1_gen_test.go:314:2-314:35: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/xl-storage-format-v1_gen_test.go:314:12-314:28: `.NewReader(&buf)`
$DIR/cmd/xl-storage-format-v1_gen_test.go:314:28-314:35: `.Skip()`
$DIR/cmd/xl-storage-format-v1_gen_test.go:353:15-353:31: `.MarshalMsg(nil)`
$DIR/cmd/xl-storage-format-v1_gen_test.go:357:16-357:34: `.UnmarshalMsg(bts)`
$DIR/cmd/xl-storage-format-v1_gen_test.go:365:2-365:28: `left, err = msgp.Skip(bts)`
$DIR/cmd/xl-storage-format-v1_gen_test.go:365:18-365:28: `.Skip(bts)`
$DIR/cmd/xl-storage-format-v1_gen_test.go:412:2-412:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/xl-storage-format-v1_gen_test.go:412:6-412:23: `.Encode(&buf, &v)`
$DIR/cmd/xl-storage-format-v1_gen_test.go:414:8-414:18: `.Msgsize()`
$DIR/cmd/xl-storage-format-v1_gen_test.go:415:8-415:14: `.Len()`
$DIR/cmd/xl-storage-format-v1_gen_test.go:420:13-420:31: `.Decode(&buf, &vn)`
$DIR/cmd/xl-storage-format-v1_gen_test.go:425:2-425:13: `buf.Reset()`
$DIR/cmd/xl-storage-format-v1_gen_test.go:425:5-425:13: `.Reset()`
$DIR/cmd/xl-storage-format-v1_gen_test.go:426:2-426:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/xl-storage-format-v1_gen_test.go:426:6-426:23: `.Encode(&buf, &v)`
$DIR/cmd/xl-storage-format-v1_gen_test.go:427:2-427:35: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/xl-storage-format-v1_gen_test.go:427:12-427:28: `.NewReader(&buf)`
$DIR/cmd/xl-storage-format-v1_gen_test.go:427:28-427:35: `.Skip()`
$DIR/cmd/xl-storage-format-v1_gen_test.go:466:15-466:31: `.MarshalMsg(nil)`
$DIR/cmd/xl-storage-format-v1_gen_test.go:470:16-470:34: `.UnmarshalMsg(bts)`
$DIR/cmd/xl-storage-format-v1_gen_test.go:478:2-478:28: `left, err = msgp.Skip(bts)`
$DIR/cmd/xl-storage-format-v1_gen_test.go:478:18-478:28: `.Skip(bts)`
$DIR/cmd/xl-storage-format-v1_gen_test.go:525:2-525:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/xl-storage-format-v1_gen_test.go:525:6-525:23: `.Encode(&buf, &v)`
$DIR/cmd/xl-storage-format-v1_gen_test.go:527:8-527:18: `.Msgsize()`
$DIR/cmd/xl-storage-format-v1_gen_test.go:528:8-528:14: `.Len()`
$DIR/cmd/xl-storage-format-v1_gen_test.go:533:13-533:31: `.Decode(&buf, &vn)`
$DIR/cmd/xl-storage-format-v1_gen_test.go:538:2-538:13: `buf.Reset()`
$DIR/cmd/xl-storage-format-v1_gen_test.go:538:5-538:13: `.Reset()`
$DIR/cmd/xl-storage-format-v1_gen_test.go:539:2-539:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/xl-storage-format-v1_gen_test.go:539:6-539:23: `.Encode(&buf, &v)`
$DIR/cmd/xl-storage-format-v1_gen_test.go:540:2-540:35: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/xl-storage-format-v1_gen_test.go:540:12-540:28: `.NewReader(&buf)`
$DIR/cmd/xl-storage-format-v1_gen_test.go:540:28-540:35: `.Skip()`
$DIR/cmd/xl-storage-format-v1_gen_test.go:579:15-579:31: `.MarshalMsg(nil)`
$DIR/cmd/xl-storage-format-v1_gen_test.go:583:16-583:34: `.UnmarshalMsg(bts)`
$DIR/cmd/xl-storage-format-v1_gen_test.go:591:2-591:28: `left, err = msgp.Skip(bts)`
$DIR/cmd/xl-storage-format-v1_gen_test.go:591:18-591:28: `.Skip(bts)`
$DIR/cmd/xl-storage-format-v1_gen_test.go:638:2-638:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/xl-storage-format-v1_gen_test.go:638:6-638:23: `.Encode(&buf, &v)`
$DIR/cmd/xl-storage-format-v1_gen_test.go:640:8-640:18: `.Msgsize()`
$DIR/cmd/xl-storage-format-v1_gen_test.go:641:8-641:14: `.Len()`
$DIR/cmd/xl-storage-format-v1_gen_test.go:646:13-646:31: `.Decode(&buf, &vn)`
$DIR/cmd/xl-storage-format-v1_gen_test.go:651:2-651:13: `buf.Reset()`
$DIR/cmd/xl-storage-format-v1_gen_test.go:651:5-651:13: `.Reset()`
$DIR/cmd/xl-storage-format-v1_gen_test.go:652:2-652:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/xl-storage-format-v1_gen_test.go:652:6-652:23: `.Encode(&buf, &v)`
$DIR/cmd/xl-storage-format-v1_gen_test.go:653:2-653:35: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/xl-storage-format-v1_gen_test.go:653:12-653:28: `.NewReader(&buf)`
$DIR/cmd/xl-storage-format-v1_gen_test.go:653:28-653:35: `.Skip()`
$DIR/cmd/xl-storage-format-v2_gen_test.go:14:15-14:31: `.MarshalMsg(nil)`
$DIR/cmd/xl-storage-format-v2_gen_test.go:18:16-18:34: `.UnmarshalMsg(bts)`
$DIR/cmd/xl-storage-format-v2_gen_test.go:26:2-26:28: `left, err = msgp.Skip(bts)`
$DIR/cmd/xl-storage-format-v2_gen_test.go:26:18-26:28: `.Skip(bts)`
$DIR/cmd/xl-storage-format-v2_gen_test.go:73:2-73:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/xl-storage-format-v2_gen_test.go:73:6-73:23: `.Encode(&buf, &v)`
$DIR/cmd/xl-storage-format-v2_gen_test.go:75:8-75:18: `.Msgsize()`
$DIR/cmd/xl-storage-format-v2_gen_test.go:76:8-76:14: `.Len()`
$DIR/cmd/xl-storage-format-v2_gen_test.go:81:13-81:31: `.Decode(&buf, &vn)`
$DIR/cmd/xl-storage-format-v2_gen_test.go:86:2-86:13: `buf.Reset()`
$DIR/cmd/xl-storage-format-v2_gen_test.go:86:5-86:13: `.Reset()`
$DIR/cmd/xl-storage-format-v2_gen_test.go:87:2-87:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/xl-storage-format-v2_gen_test.go:87:6-87:23: `.Encode(&buf, &v)`
$DIR/cmd/xl-storage-format-v2_gen_test.go:88:2-88:35: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/xl-storage-format-v2_gen_test.go:88:12-88:28: `.NewReader(&buf)`
$DIR/cmd/xl-storage-format-v2_gen_test.go:88:28-88:35: `.Skip()`
$DIR/cmd/xl-storage-format-v2_gen_test.go:127:15-127:31: `.MarshalMsg(nil)`
$DIR/cmd/xl-storage-format-v2_gen_test.go:131:16-131:34: `.UnmarshalMsg(bts)`
$DIR/cmd/xl-storage-format-v2_gen_test.go:139:2-139:28: `left, err = msgp.Skip(bts)`
$DIR/cmd/xl-storage-format-v2_gen_test.go:139:18-139:28: `.Skip(bts)`
$DIR/cmd/xl-storage-format-v2_gen_test.go:186:2-186:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/xl-storage-format-v2_gen_test.go:186:6-186:23: `.Encode(&buf, &v)`
$DIR/cmd/xl-storage-format-v2_gen_test.go:188:8-188:18: `.Msgsize()`
$DIR/cmd/xl-storage-format-v2_gen_test.go:189:8-189:14: `.Len()`
$DIR/cmd/xl-storage-format-v2_gen_test.go:194:13-194:31: `.Decode(&buf, &vn)`
$DIR/cmd/xl-storage-format-v2_gen_test.go:199:2-199:13: `buf.Reset()`
$DIR/cmd/xl-storage-format-v2_gen_test.go:199:5-199:13: `.Reset()`
$DIR/cmd/xl-storage-format-v2_gen_test.go:200:2-200:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/xl-storage-format-v2_gen_test.go:200:6-200:23: `.Encode(&buf, &v)`
$DIR/cmd/xl-storage-format-v2_gen_test.go:201:2-201:35: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/xl-storage-format-v2_gen_test.go:201:12-201:28: `.NewReader(&buf)`
$DIR/cmd/xl-storage-format-v2_gen_test.go:201:28-201:35: `.Skip()`
$DIR/cmd/xl-storage-format-v2_gen_test.go:240:15-240:31: `.MarshalMsg(nil)`
$DIR/cmd/xl-storage-format-v2_gen_test.go:244:16-244:34: `.UnmarshalMsg(bts)`
$DIR/cmd/xl-storage-format-v2_gen_test.go:252:2-252:28: `left, err = msgp.Skip(bts)`
$DIR/cmd/xl-storage-format-v2_gen_test.go:252:18-252:28: `.Skip(bts)`
$DIR/cmd/xl-storage-format-v2_gen_test.go:299:2-299:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/xl-storage-format-v2_gen_test.go:299:6-299:23: `.Encode(&buf, &v)`
$DIR/cmd/xl-storage-format-v2_gen_test.go:301:8-301:18: `.Msgsize()`
$DIR/cmd/xl-storage-format-v2_gen_test.go:302:8-302:14: `.Len()`
$DIR/cmd/xl-storage-format-v2_gen_test.go:307:13-307:31: `.Decode(&buf, &vn)`
$DIR/cmd/xl-storage-format-v2_gen_test.go:312:2-312:13: `buf.Reset()`
$DIR/cmd/xl-storage-format-v2_gen_test.go:312:5-312:13: `.Reset()`
$DIR/cmd/xl-storage-format-v2_gen_test.go:313:2-313:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/xl-storage-format-v2_gen_test.go:313:6-313:23: `.Encode(&buf, &v)`
$DIR/cmd/xl-storage-format-v2_gen_test.go:314:2-314:35: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/xl-storage-format-v2_gen_test.go:314:12-314:28: `.NewReader(&buf)`
$DIR/cmd/xl-storage-format-v2_gen_test.go:314:28-314:35: `.Skip()`
$DIR/cmd/xl-storage-format-v2_gen_test.go:353:15-353:31: `.MarshalMsg(nil)`
$DIR/cmd/xl-storage-format-v2_gen_test.go:357:16-357:34: `.UnmarshalMsg(bts)`
$DIR/cmd/xl-storage-format-v2_gen_test.go:365:2-365:28: `left, err = msgp.Skip(bts)`
$DIR/cmd/xl-storage-format-v2_gen_test.go:365:18-365:28: `.Skip(bts)`
$DIR/cmd/xl-storage-format-v2_gen_test.go:412:2-412:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/xl-storage-format-v2_gen_test.go:412:6-412:23: `.Encode(&buf, &v)`
$DIR/cmd/xl-storage-format-v2_gen_test.go:414:8-414:18: `.Msgsize()`
$DIR/cmd/xl-storage-format-v2_gen_test.go:415:8-415:14: `.Len()`
$DIR/cmd/xl-storage-format-v2_gen_test.go:420:13-420:31: `.Decode(&buf, &vn)`
$DIR/cmd/xl-storage-format-v2_gen_test.go:425:2-425:13: `buf.Reset()`
$DIR/cmd/xl-storage-format-v2_gen_test.go:425:5-425:13: `.Reset()`
$DIR/cmd/xl-storage-format-v2_gen_test.go:426:2-426:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/xl-storage-format-v2_gen_test.go:426:6-426:23: `.Encode(&buf, &v)`
$DIR/cmd/xl-storage-format-v2_gen_test.go:427:2-427:35: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/xl-storage-format-v2_gen_test.go:427:12-427:28: `.NewReader(&buf)`
$DIR/cmd/xl-storage-format-v2_gen_test.go:427:28-427:35: `.Skip()`
$DIR/cmd/xl-storage-format-v2_gen_test.go:466:15-466:31: `.MarshalMsg(nil)`
$DIR/cmd/xl-storage-format-v2_gen_test.go:470:16-470:34: `.UnmarshalMsg(bts)`
$DIR/cmd/xl-storage-format-v2_gen_test.go:478:2-478:28: `left, err = msgp.Skip(bts)`
$DIR/cmd/xl-storage-format-v2_gen_test.go:478:18-478:28: `.Skip(bts)`
$DIR/cmd/xl-storage-format-v2_gen_test.go:525:2-525:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/xl-storage-format-v2_gen_test.go:525:6-525:23: `.Encode(&buf, &v)`
$DIR/cmd/xl-storage-format-v2_gen_test.go:527:8-527:18: `.Msgsize()`
$DIR/cmd/xl-storage-format-v2_gen_test.go:528:8-528:14: `.Len()`
$DIR/cmd/xl-storage-format-v2_gen_test.go:533:13-533:31: `.Decode(&buf, &vn)`
$DIR/cmd/xl-storage-format-v2_gen_test.go:538:2-538:13: `buf.Reset()`
$DIR/cmd/xl-storage-format-v2_gen_test.go:538:5-538:13: `.Reset()`
$DIR/cmd/xl-storage-format-v2_gen_test.go:539:2-539:23: `msgp.Encode(&buf, &v)`
$DIR/cmd/xl-storage-format-v2_gen_test.go:539:6-539:23: `.Encode(&buf, &v)`
$DIR/cmd/xl-storage-format-v2_gen_test.go:540:2-540:35: `err = msgp.NewReader(&buf).Skip()`
$DIR/cmd/xl-storage-format-v2_gen_test.go:540:12-540:28: `.NewReader(&buf)`
$DIR/cmd/xl-storage-format-v2_gen_test.go:540:28-540:35: `.Skip()`
$DIR/cmd/xl-storage-format-v2_test.go:43:14-43:50: `.Open("testdata/xl.meta-corrupt.gz")`
$DIR/cmd/xl-storage-format-v2_test.go:49:17-49:47: `.NewReader(bufio.NewReader(f))`
$DIR/cmd/xl-storage-format-v2_test.go:49:33-49:46: `.NewReader(f)`
$DIR/cmd/xl-storage-format-v2_test.go:54:16-54:28: `.ReadAll(gz)`
$DIR/cmd/xl-storage-format-v2_test.go:59:2-59:66: `_, err = readXLMetaNoData(bytes.NewReader(buf), int64(len(buf)))`
$DIR/cmd/xl-storage-format-v2_test.go:59:33-59:48: `.NewReader(buf)`
$DIR/cmd/xl-storage-format-v2_test.go:67:3-67:13: `t.Helper()`
$DIR/cmd/xl-storage-format-v2_test.go:67:4-67:13: `.Helper()`
$DIR/cmd/xl-storage-format-v2_test.go:85:25-85:31: `.Now()`
$DIR/cmd/xl-storage-format-v2_test.go:91:29-91:38: `.String()`
$DIR/cmd/xl-storage-format-v2_test.go:109:2-109:30: `failOnErr(xl.AddVersion(fi))`
$DIR/cmd/xl-storage-format-v2_test.go:109:14-109:29: `.AddVersion(fi)`
$DIR/cmd/xl-storage-format-v2_test.go:111:2-111:30: `fi.VersionID = mustGetUUID()`
$DIR/cmd/xl-storage-format-v2_test.go:112:2-112:28: `fi.DataDir = mustGetUUID()`
$DIR/cmd/xl-storage-format-v2_test.go:113:2-113:17: `fi.Data = data2`
$DIR/cmd/xl-storage-format-v2_test.go:114:2-114:30: `failOnErr(xl.AddVersion(fi))`
$DIR/cmd/xl-storage-format-v2_test.go:114:14-114:29: `.AddVersion(fi)`
$DIR/cmd/xl-storage-format-v2_test.go:116:23-116:37: `.AppendTo(nil)`
$DIR/cmd/xl-storage-format-v2_test.go:117:2-117:16: `failOnErr(err)`
$DIR/cmd/xl-storage-format-v2_test.go:120:2-120:33: `failOnErr(xl2.Load(serialized))`
$DIR/cmd/xl-storage-format-v2_test.go:120:15-120:32: `.Load(serialized)`
$DIR/cmd/xl-storage-format-v2_test.go:123:18-123:30: `.data.list()`
$DIR/cmd/xl-storage-format-v2_test.go:124:2-124:16: `failOnErr(err)`
$DIR/cmd/xl-storage-format-v2_test.go:129:11-129:78: `.Equal(xl2.data.find("756100c6-b393-4981-928a-d49bbc164741"), data)`
$DIR/cmd/xl-storage-format-v2_test.go:129:21-129:71: `.data.find("756100c6-b393-4981-928a-d49bbc164741")`
$DIR/cmd/xl-storage-format-v2_test.go:132:11-132:53: `.Equal(xl2.data.find(fi.VersionID), data2)`
$DIR/cmd/xl-storage-format-v2_test.go:132:21-132:45: `.data.find(fi.VersionID)`
$DIR/cmd/xl-storage-format-v2_test.go:137:2-137:31: `xl2.data.remove(fi.VersionID)`
$DIR/cmd/xl-storage-format-v2_test.go:137:5-137:31: `.data.remove(fi.VersionID)`
$DIR/cmd/xl-storage-format-v2_test.go:138:2-138:32: `failOnErr(xl2.data.validate())`
$DIR/cmd/xl-storage-format-v2_test.go:138:15-138:31: `.data.validate()`
$DIR/cmd/xl-storage-format-v2_test.go:139:8-139:32: `.data.find(fi.VersionID)`
$DIR/cmd/xl-storage-format-v2_test.go:142:8-142:23: `.data.entries()`
$DIR/cmd/xl-storage-format-v2_test.go:146:2-146:41: `xl2.data.replace(fi.VersionID, fi.Data)`
$DIR/cmd/xl-storage-format-v2_test.go:146:5-146:41: `.data.replace(fi.VersionID, fi.Data)`
$DIR/cmd/xl-storage-format-v2_test.go:147:2-147:32: `failOnErr(xl2.data.validate())`
$DIR/cmd/xl-storage-format-v2_test.go:147:15-147:31: `.data.validate()`
$DIR/cmd/xl-storage-format-v2_test.go:148:8-148:23: `.data.entries()`
$DIR/cmd/xl-storage-format-v2_test.go:153:2-153:65: `xl2.data.replace("756100c6-b393-4981-928a-d49bbc164741", data2)`
$DIR/cmd/xl-storage-format-v2_test.go:153:5-153:65: `.data.replace("756100c6-b393-4981-928a-d49bbc164741", data2)`
$DIR/cmd/xl-storage-format-v2_test.go:154:2-154:32: `failOnErr(xl2.data.validate())`
$DIR/cmd/xl-storage-format-v2_test.go:154:15-154:31: `.data.validate()`
$DIR/cmd/xl-storage-format-v2_test.go:155:8-155:23: `.data.entries()`
$DIR/cmd/xl-storage-format-v2_test.go:158:11-158:79: `.Equal(xl2.data.find("756100c6-b393-4981-928a-d49bbc164741"), data2)`
$DIR/cmd/xl-storage-format-v2_test.go:158:21-158:71: `.data.find("756100c6-b393-4981-928a-d49bbc164741")`
$DIR/cmd/xl-storage-format-v2_test.go:162:9-162:72: `.data.rename("756100c6-b393-4981-928a-d49bbc164741", "new-key")`
$DIR/cmd/xl-storage-format-v2_test.go:165:2-165:32: `failOnErr(xl2.data.validate())`
$DIR/cmd/xl-storage-format-v2_test.go:165:15-165:31: `.data.validate()`
$DIR/cmd/xl-storage-format-v2_test.go:166:11-166:50: `.Equal(xl2.data.find("new-key"), data2)`
$DIR/cmd/xl-storage-format-v2_test.go:166:21-166:42: `.data.find("new-key")`
$DIR/cmd/xl-storage-format-v2_test.go:169:8-169:23: `.data.entries()`
$DIR/cmd/xl-storage-format-v2_test.go:172:11-172:53: `.Equal(xl2.data.find(fi.VersionID), data2)`
$DIR/cmd/xl-storage-format-v2_test.go:172:21-172:45: `.data.find(fi.VersionID)`
$DIR/cmd/xl-storage-format-v2_test.go:177:2-177:18: `xl2 = xlMetaV2{}`
$DIR/cmd/xl-storage-format-v2_test.go:179:2-179:30: `failOnErr(xl2.Load(trimmed))`
$DIR/cmd/xl-storage-format-v2_test.go:179:15-179:29: `.Load(trimmed)`
$DIR/cmd/xl-storage-format-v2_test.go:184:2-184:32: `trimmed[len(trimmed)-10] += 10`
$DIR/cmd/xl-storage-format-v2_test.go:185:15-185:29: `.Load(trimmed)`
$DIR/cmd/xl-storage-format-v2_test.go:192:13-192:19: `.New()`
$DIR/cmd/xl-storage-format-v2_test.go:193:17-193:23: `.New()`
$DIR/cmd/xl-storage-format-v2_test.go:195:2-195:99: `transitioned[ReservedMetadataPrefixLower+TransitionStatus] = []byte(lifecycle.TransitionComplete)`
$DIR/cmd/xl-storage-format-v2_test.go:198:2-198:63: `toBeRestored[xhttp.AmzRestore] = ongoingRestoreObj().String()`
$DIR/cmd/xl-storage-format-v2_test.go:198:54-198:63: `.String()`
$DIR/cmd/xl-storage-format-v2_test.go:201:2-201:92: `restored[xhttp.AmzRestore] = completedRestoreObj(time.Now().UTC().Add(time.Hour)).String()`
$DIR/cmd/xl-storage-format-v2_test.go:201:55-201:61: `.Now()`
$DIR/cmd/xl-storage-format-v2_test.go:201:61-201:67: `.UTC()`
$DIR/cmd/xl-storage-format-v2_test.go:201:67-201:82: `.Add(time.Hour)`
$DIR/cmd/xl-storage-format-v2_test.go:201:83-201:92: `.String()`
$DIR/cmd/xl-storage-format-v2_test.go:204:2-204:100: `restoredExpired[xhttp.AmzRestore] = completedRestoreObj(time.Now().UTC().Add(-time.Hour)).String()`
$DIR/cmd/xl-storage-format-v2_test.go:204:62-204:68: `.Now()`
$DIR/cmd/xl-storage-format-v2_test.go:204:68-204:74: `.UTC()`
$DIR/cmd/xl-storage-format-v2_test.go:204:74-204:90: `.Add(-time.Hour)`
$DIR/cmd/xl-storage-format-v2_test.go:204:91-204:100: `.String()`
$DIR/cmd/xl-storage-format-v2_test.go:254:15-254:36: `.xlmeta.UsesDataDir()`
$DIR/cmd/xl-storage-format-v2_test.go:262:3-262:13: `t.Helper()`
$DIR/cmd/xl-storage-format-v2_test.go:262:4-262:13: `.Helper()`
$DIR/cmd/xl-storage-format-v2_test.go:281:25-281:31: `.Now()`
$DIR/cmd/xl-storage-format-v2_test.go:287:29-287:38: `.String()`
$DIR/cmd/xl-storage-format-v2_test.go:339:41-339:50: `.String()`
$DIR/cmd/xl-storage-format-v2_test.go:347:46-347:52: `.Now()`
$DIR/cmd/xl-storage-format-v2_test.go:347:52-347:72: `.Add(10 * time.Hour)`
$DIR/cmd/xl-storage-format-v2_test.go:347:73-347:82: `.String()`
$DIR/cmd/xl-storage-format-v2_test.go:366:3-366:30: `fi.VersionID = tc.versionID`
$DIR/cmd/xl-storage-format-v2_test.go:367:3-367:26: `fi.DataDir = tc.dataDir`
$DIR/cmd/xl-storage-format-v2_test.go:368:3-368:20: `fi.Data = tc.data`
$DIR/cmd/xl-storage-format-v2_test.go:370:4-370:16: `fi.Size = 42`
$DIR/cmd/xl-storage-format-v2_test.go:373:4-375:5: `fi.Metadata = map[string]string{
				xhttp.AmzRestore: tc.restoreObjStatus,
			}`
$DIR/cmd/xl-storage-format-v2_test.go:377:3-377:44: `fi.TransitionStatus = tc.transitionStatus`
$DIR/cmd/xl-storage-format-v2_test.go:378:3-378:62: `fi.ModTime = fi.ModTime.Add(time.Duration(i) * time.Second)`
$DIR/cmd/xl-storage-format-v2_test.go:378:18-378:62: `.ModTime.Add(time.Duration(i) * time.Second)`
$DIR/cmd/xl-storage-format-v2_test.go:378:35-378:47: `.Duration(i)`
$DIR/cmd/xl-storage-format-v2_test.go:379:3-379:36: `failOnErr(i+1, xl.AddVersion(fi))`
$DIR/cmd/xl-storage-format-v2_test.go:379:20-379:35: `.AddVersion(fi)`
$DIR/cmd/xl-storage-format-v2_test.go:380:3-380:40: `fi.ExpireRestored = tc.expireRestored`
$DIR/cmd/xl-storage-format-v2_test.go:381:3-381:36: `fileInfos = append(fileInfos, fi)`
$DIR/cmd/xl-storage-format-v2_test.go:385:24-385:66: `.findVersion(uuid.MustParse(tc.versionID))`
$DIR/cmd/xl-storage-format-v2_test.go:385:41-385:65: `.MustParse(tc.versionID)`
$DIR/cmd/xl-storage-format-v2_test.go:386:3-386:22: `failOnErr(i+1, err)`
$DIR/cmd/xl-storage-format-v2_test.go:387:15-387:84: `.SharedDataDirCount(version.getVersionID(), version.ObjectV2.DataDir)`
$DIR/cmd/xl-storage-format-v2_test.go:387:42-387:57: `.getVersionID()`
$DIR/cmd/xl-storage-format-v2_test.go:397:21-397:49: `.DeleteVersion(fileInfos[i])`
$DIR/cmd/xl-storage-format-v2_test.go:398:3-398:26: `failOnErr(count+1, err)`
$DIR/cmd/xl-storage-format-v2_test.go:402:3-402:10: `count++`
$DIR/cmd/xl-storage-format-v2_test.go:503:17-503:55: `.ReadFile("testdata/xl.meta-v1.2.zst")`
$DIR/cmd/xl-storage-format-v2_test.go:507:16-507:31: `.NewReader(nil)`
$DIR/cmd/xl-storage-format-v2_test.go:508:2-508:38: `data, err = dec.DecodeAll(data, nil)`
$DIR/cmd/xl-storage-format-v2_test.go:508:17-508:38: `.DecodeAll(data, nil)`
$DIR/cmd/xl-storage-format-v2_test.go:516:3-516:21: `xl.sortByModTime()`
$DIR/cmd/xl-storage-format-v2_test.go:516:5-516:21: `.sortByModTime()`
$DIR/cmd/xl-storage-format-v2_test.go:517:11-519:5: `.SliceIsSorted(xl.versions, func(i, j int) bool {
			return xl.versions[i].header.ModTime > xl.versions[j].header.ModTime
		})`
$DIR/cmd/xl-storage-format-v2_test.go:524:18-524:28: `.getIdx(i)`
$DIR/cmd/xl-storage-format-v2_test.go:529:17-529:26: `.header()`
$DIR/cmd/xl-storage-format-v2_test.go:535:2-542:4: `t.Run("load-legacy", func(t *testing.T) {
		var xl xlMetaV2
		err = xl.Load(data)
		if err != nil {
			t.Fatal(err)
		}
		test(t, &xl)
	})`
$DIR/cmd/xl-storage-format-v2_test.go:535:3-542:4: `.Run("load-legacy", func(t *testing.T) {
		var xl xlMetaV2
		err = xl.Load(data)
		if err != nil {
			t.Fatal(err)
		}
		test(t, &xl)
	})`
$DIR/cmd/xl-storage-format-v2_test.go:537:3-537:22: `err = xl.Load(data)`
$DIR/cmd/xl-storage-format-v2_test.go:537:11-537:22: `.Load(data)`
$DIR/cmd/xl-storage-format-v2_test.go:541:3-541:15: `test(t, &xl)`
$DIR/cmd/xl-storage-format-v2_test.go:543:2-559:4: `t.Run("roundtrip", func(t *testing.T) {
		var xl xlMetaV2
		err = xl.Load(data)
		if err != nil {
			t.Fatal(err)
		}
		data, err = xl.AppendTo(nil)
		if err != nil {
			t.Fatal(err)
		}
		xl = xlMetaV2{}
		err = xl.Load(data)
		if err != nil {
			t.Fatal(err)
		}
		test(t, &xl)
	})`
$DIR/cmd/xl-storage-format-v2_test.go:543:3-559:4: `.Run("roundtrip", func(t *testing.T) {
		var xl xlMetaV2
		err = xl.Load(data)
		if err != nil {
			t.Fatal(err)
		}
		data, err = xl.AppendTo(nil)
		if err != nil {
			t.Fatal(err)
		}
		xl = xlMetaV2{}
		err = xl.Load(data)
		if err != nil {
			t.Fatal(err)
		}
		test(t, &xl)
	})`
$DIR/cmd/xl-storage-format-v2_test.go:545:3-545:22: `err = xl.Load(data)`
$DIR/cmd/xl-storage-format-v2_test.go:545:11-545:22: `.Load(data)`
$DIR/cmd/xl-storage-format-v2_test.go:549:3-549:31: `data, err = xl.AppendTo(nil)`
$DIR/cmd/xl-storage-format-v2_test.go:549:17-549:31: `.AppendTo(nil)`
$DIR/cmd/xl-storage-format-v2_test.go:553:3-553:18: `xl = xlMetaV2{}`
$DIR/cmd/xl-storage-format-v2_test.go:554:3-554:22: `err = xl.Load(data)`
$DIR/cmd/xl-storage-format-v2_test.go:554:11-554:22: `.Load(data)`
$DIR/cmd/xl-storage-format-v2_test.go:558:3-558:15: `test(t, &xl)`
$DIR/cmd/xl-storage-format-v2_test.go:562:3-562:22: `err = xl.Load(data)`
$DIR/cmd/xl-storage-format-v2_test.go:562:11-562:22: `.Load(data)`
$DIR/cmd/xl-storage-format-v2_test.go:569:20-569:26: `.New()`
$DIR/cmd/xl-storage-format-v2_test.go:570:20-570:26: `.Now()`
$DIR/cmd/xl-storage-format-v2_test.go:570:26-570:37: `.UnixNano()`
$DIR/cmd/xl-storage-format-v2_test.go:575:3-575:16: `xl.data = nil`
$DIR/cmd/xl-storage-format-v2_test.go:576:3-576:32: `xl.versions = xl.versions[:2]`
$DIR/cmd/xl-storage-format-v2_test.go:577:3-577:24: `xl.addVersion(ventry)`
$DIR/cmd/xl-storage-format-v2_test.go:577:5-577:24: `.addVersion(ventry)`
$DIR/cmd/xl-storage-format-v2_test.go:579:3-579:31: `data, err = xl.AppendTo(nil)`
$DIR/cmd/xl-storage-format-v2_test.go:579:17-579:31: `.AppendTo(nil)`
$DIR/cmd/xl-storage-format-v2_test.go:593:11-593:22: `.Load(data)`
$DIR/cmd/xl-storage-format-v2_test.go:605:14-605:24: `.getIdx(0)`
$DIR/cmd/xl-storage-format-v2_test.go:614:2-614:84: `got = string(v.DeleteMarker.MetaSys[ReservedMetadataPrefixLower+ReplicaTimestamp])`
$DIR/cmd/xl-storage-format-v2_test.go:621:18-621:59: `.ReadFile("testdata/xl-meta-consist.zip")`
$DIR/cmd/xl-storage-format-v2_test.go:626:16-626:69: `.NewReader(bytes.NewReader(dataZ), int64(len(dataZ)))`
$DIR/cmd/xl-storage-format-v2_test.go:626:32-626:49: `.NewReader(dataZ)`
$DIR/cmd/xl-storage-format-v2_test.go:634:18-634:25: `.Open()`
$DIR/cmd/xl-storage-format-v2_test.go:639:17-639:29: `.ReadAll(in)`
$DIR/cmd/xl-storage-format-v2_test.go:644:3-644:30: `err = xl.LoadOrConvert(buf)`
$DIR/cmd/xl-storage-format-v2_test.go:644:11-644:30: `.LoadOrConvert(buf)`
$DIR/cmd/xl-storage-format-v2_test.go:648:3-648:35: `vers = append(vers, xl.versions)`
$DIR/cmd/xl-storage-format-v2_test.go:652:16-652:36: `.Marshal(ver.header)`
$DIR/cmd/xl-storage-format-v2_test.go:655:4-655:36: `_, _ = x.unmarshalV(0, ver.meta)`
$DIR/cmd/xl-storage-format-v2_test.go:655:12-655:36: `.unmarshalV(0, ver.meta)`
$DIR/cmd/xl-storage-format-v2_test.go:656:4-656:26: `b, _ = json.Marshal(x)`
$DIR/cmd/xl-storage-format-v2_test.go:656:15-656:26: `.Marshal(x)`
$DIR/cmd/xl-storage-format-v2_test.go:662:3-673:5: `t.Run(fmt.Sprintf("non-strict-q%d", i), func(t *testing.T) {
			merged := mergeXLV2Versions(i, false, 0, vers...)
			if len(merged) == 0 {
				t.Error("Did not get any results")
				return
			}
			for _, ver := range merged {
				if ver.header.Type == invalidVersionType {
					t.Errorf("Invalid result returned: %v", ver.header)
				}
			}
		})`
$DIR/cmd/xl-storage-format-v2_test.go:662:4-673:5: `.Run(fmt.Sprintf("non-strict-q%d", i), func(t *testing.T) {
			merged := mergeXLV2Versions(i, false, 0, vers...)
			if len(merged) == 0 {
				t.Error("Did not get any results")
				return
			}
			for _, ver := range merged {
				if ver.header.Type == invalidVersionType {
					t.Errorf("Invalid result returned: %v", ver.header)
				}
			}
		})`
$DIR/cmd/xl-storage-format-v2_test.go:662:12-662:41: `.Sprintf("non-strict-q%d", i)`
$DIR/cmd/xl-storage-format-v2_test.go:674:3-685:5: `t.Run(fmt.Sprintf("strict-q%d", i), func(t *testing.T) {
			merged := mergeXLV2Versions(i, true, 0, vers...)
			if len(merged) == 0 {
				t.Error("Did not get any results")
				return
			}
			for _, ver := range merged {
				if ver.header.Type == invalidVersionType {
					t.Errorf("Invalid result returned: %v", ver.header)
				}
			}
		})`
$DIR/cmd/xl-storage-format-v2_test.go:674:4-685:5: `.Run(fmt.Sprintf("strict-q%d", i), func(t *testing.T) {
			merged := mergeXLV2Versions(i, true, 0, vers...)
			if len(merged) == 0 {
				t.Error("Did not get any results")
				return
			}
			for _, ver := range merged {
				if ver.header.Type == invalidVersionType {
					t.Errorf("Invalid result returned: %v", ver.header)
				}
			}
		})`
$DIR/cmd/xl-storage-format-v2_test.go:674:12-674:37: `.Sprintf("strict-q%d", i)`
$DIR/cmd/xl-storage-format-v2_test.go:686:3-707:5: `t.Run(fmt.Sprintf("signature-q%d", i), func(t *testing.T) {
			// Mutate signature, non strict
			vMod := make([][]xlMetaV2ShallowVersion, 0, len(vers))
			for i, ver := range vers {
				newVers := make([]xlMetaV2ShallowVersion, 0, len(ver))
				for _, v := range ver {
					v.header.Signature = [4]byte{byte(i + 10), 0, 0, 0}
					newVers = append(newVers, v)
				}
				vMod = append(vMod, newVers)
			}
			merged := mergeXLV2Versions(i, false, 0, vMod...)
			if len(merged) == 0 {
				t.Error("Did not get any results")
				return
			}
			for _, ver := range merged {
				if ver.header.Type == invalidVersionType {
					t.Errorf("Invalid result returned: %v", ver.header)
				}
			}
		})`
$DIR/cmd/xl-storage-format-v2_test.go:686:4-707:5: `.Run(fmt.Sprintf("signature-q%d", i), func(t *testing.T) {
			// Mutate signature, non strict
			vMod := make([][]xlMetaV2ShallowVersion, 0, len(vers))
			for i, ver := range vers {
				newVers := make([]xlMetaV2ShallowVersion, 0, len(ver))
				for _, v := range ver {
					v.header.Signature = [4]byte{byte(i + 10), 0, 0, 0}
					newVers = append(newVers, v)
				}
				vMod = append(vMod, newVers)
			}
			merged := mergeXLV2Versions(i, false, 0, vMod...)
			if len(merged) == 0 {
				t.Error("Did not get any results")
				return
			}
			for _, ver := range merged {
				if ver.header.Type == invalidVersionType {
					t.Errorf("Invalid result returned: %v", ver.header)
				}
			}
		})`
$DIR/cmd/xl-storage-format-v2_test.go:686:12-686:40: `.Sprintf("signature-q%d", i)`
$DIR/cmd/xl-storage-format-v2_test.go:692:6-692:57: `v.header.Signature = [4]byte{byte(i + 10), 0, 0, 0}`
$DIR/cmd/xl-storage-format-v2_test.go:693:6-693:34: `newVers = append(newVers, v)`
$DIR/cmd/xl-storage-format-v2_test.go:695:5-695:33: `vMod = append(vMod, newVers)`
$DIR/cmd/xl-storage-format-v2_test.go:708:3-733:5: `t.Run(fmt.Sprintf("modtime-q%d", i), func(t *testing.T) {
			// Mutate modtime, but rest is consistent.
			vMod := make([][]xlMetaV2ShallowVersion, 0, len(vers))
			for i, ver := range vers {
				newVers := make([]xlMetaV2ShallowVersion, 0, len(ver))
				for _, v := range ver {
					v.header.ModTime += int64(i)
					newVers = append(newVers, v)
				}
				vMod = append(vMod, newVers)
			}
			merged := mergeXLV2Versions(i, false, 0, vMod...)
			if len(merged) == 0 && i < 2 {
				t.Error("Did not get any results")
				return
			}
			if len(merged) > 0 && i >= 2 {
				t.Error("Got unexpected results")
				return
			}
			for _, ver := range merged {
				if ver.header.Type == invalidVersionType {
					t.Errorf("Invalid result returned: %v", ver.header)
				}
			}
		})`
$DIR/cmd/xl-storage-format-v2_test.go:708:4-733:5: `.Run(fmt.Sprintf("modtime-q%d", i), func(t *testing.T) {
			// Mutate modtime, but rest is consistent.
			vMod := make([][]xlMetaV2ShallowVersion, 0, len(vers))
			for i, ver := range vers {
				newVers := make([]xlMetaV2ShallowVersion, 0, len(ver))
				for _, v := range ver {
					v.header.ModTime += int64(i)
					newVers = append(newVers, v)
				}
				vMod = append(vMod, newVers)
			}
			merged := mergeXLV2Versions(i, false, 0, vMod...)
			if len(merged) == 0 && i < 2 {
				t.Error("Did not get any results")
				return
			}
			if len(merged) > 0 && i >= 2 {
				t.Error("Got unexpected results")
				return
			}
			for _, ver := range merged {
				if ver.header.Type == invalidVersionType {
					t.Errorf("Invalid result returned: %v", ver.header)
				}
			}
		})`
$DIR/cmd/xl-storage-format-v2_test.go:708:12-708:38: `.Sprintf("modtime-q%d", i)`
$DIR/cmd/xl-storage-format-v2_test.go:714:6-714:34: `v.header.ModTime += int64(i)`
$DIR/cmd/xl-storage-format-v2_test.go:715:6-715:34: `newVers = append(newVers, v)`
$DIR/cmd/xl-storage-format-v2_test.go:717:5-717:33: `vMod = append(vMod, newVers)`
$DIR/cmd/xl-storage-format-v2_test.go:734:3-755:5: `t.Run(fmt.Sprintf("flags-q%d", i), func(t *testing.T) {
			// Mutate signature, non strict
			vMod := make([][]xlMetaV2ShallowVersion, 0, len(vers))
			for i, ver := range vers {
				newVers := make([]xlMetaV2ShallowVersion, 0, len(ver))
				for _, v := range ver {
					v.header.Flags += xlFlags(i)
					newVers = append(newVers, v)
				}
				vMod = append(vMod, newVers)
			}
			merged := mergeXLV2Versions(i, false, 0, vMod...)
			if len(merged) == 0 {
				t.Error("Did not get any results")
				return
			}
			for _, ver := range merged {
				if ver.header.Type == invalidVersionType {
					t.Errorf("Invalid result returned: %v", ver.header)
				}
			}
		})`
$DIR/cmd/xl-storage-format-v2_test.go:734:4-755:5: `.Run(fmt.Sprintf("flags-q%d", i), func(t *testing.T) {
			// Mutate signature, non strict
			vMod := make([][]xlMetaV2ShallowVersion, 0, len(vers))
			for i, ver := range vers {
				newVers := make([]xlMetaV2ShallowVersion, 0, len(ver))
				for _, v := range ver {
					v.header.Flags += xlFlags(i)
					newVers = append(newVers, v)
				}
				vMod = append(vMod, newVers)
			}
			merged := mergeXLV2Versions(i, false, 0, vMod...)
			if len(merged) == 0 {
				t.Error("Did not get any results")
				return
			}
			for _, ver := range merged {
				if ver.header.Type == invalidVersionType {
					t.Errorf("Invalid result returned: %v", ver.header)
				}
			}
		})`
$DIR/cmd/xl-storage-format-v2_test.go:734:12-734:36: `.Sprintf("flags-q%d", i)`
$DIR/cmd/xl-storage-format-v2_test.go:740:6-740:34: `v.header.Flags += xlFlags(i)`
$DIR/cmd/xl-storage-format-v2_test.go:741:6-741:34: `newVers = append(newVers, v)`
$DIR/cmd/xl-storage-format-v2_test.go:743:5-743:33: `vMod = append(vMod, newVers)`
$DIR/cmd/xl-storage-format-v2_test.go:756:3-781:5: `t.Run(fmt.Sprintf("versionid-q%d", i), func(t *testing.T) {
			// Mutate signature, non strict
			vMod := make([][]xlMetaV2ShallowVersion, 0, len(vers))
			for i, ver := range vers {
				newVers := make([]xlMetaV2ShallowVersion, 0, len(ver))
				for _, v := range ver {
					v.header.VersionID[0] += byte(i)
					newVers = append(newVers, v)
				}
				vMod = append(vMod, newVers)
			}
			merged := mergeXLV2Versions(i, false, 0, vMod...)
			if len(merged) == 0 && i < 2 {
				t.Error("Did not get any results")
				return
			}
			if len(merged) > 0 && i >= 2 {
				t.Error("Got unexpected results")
				return
			}
			for _, ver := range merged {
				if ver.header.Type == invalidVersionType {
					t.Errorf("Invalid result returned: %v", ver.header)
				}
			}
		})`
$DIR/cmd/xl-storage-format-v2_test.go:756:4-781:5: `.Run(fmt.Sprintf("versionid-q%d", i), func(t *testing.T) {
			// Mutate signature, non strict
			vMod := make([][]xlMetaV2ShallowVersion, 0, len(vers))
			for i, ver := range vers {
				newVers := make([]xlMetaV2ShallowVersion, 0, len(ver))
				for _, v := range ver {
					v.header.VersionID[0] += byte(i)
					newVers = append(newVers, v)
				}
				vMod = append(vMod, newVers)
			}
			merged := mergeXLV2Versions(i, false, 0, vMod...)
			if len(merged) == 0 && i < 2 {
				t.Error("Did not get any results")
				return
			}
			if len(merged) > 0 && i >= 2 {
				t.Error("Got unexpected results")
				return
			}
			for _, ver := range merged {
				if ver.header.Type == invalidVersionType {
					t.Errorf("Invalid result returned: %v", ver.header)
				}
			}
		})`
$DIR/cmd/xl-storage-format-v2_test.go:756:12-756:40: `.Sprintf("versionid-q%d", i)`
$DIR/cmd/xl-storage-format-v2_test.go:762:6-762:38: `v.header.VersionID[0] += byte(i)`
$DIR/cmd/xl-storage-format-v2_test.go:763:6-763:34: `newVers = append(newVers, v)`
$DIR/cmd/xl-storage-format-v2_test.go:765:5-765:33: `vMod = append(vMod, newVers)`
$DIR/cmd/xl-storage-format-v2_test.go:782:3-807:5: `t.Run(fmt.Sprintf("strict-signature-q%d", i), func(t *testing.T) {
			// Mutate signature, non strict
			vMod := make([][]xlMetaV2ShallowVersion, 0, len(vers))
			for i, ver := range vers {
				newVers := make([]xlMetaV2ShallowVersion, 0, len(ver))
				for _, v := range ver {
					v.header.Signature = [4]byte{byte(i + 10), 0, 0, 0}
					newVers = append(newVers, v)
				}
				vMod = append(vMod, newVers)
			}
			merged := mergeXLV2Versions(i, true, 0, vMod...)
			if len(merged) == 0 && i < 2 {
				t.Error("Did not get any results")
				return
			}
			if len(merged) > 0 && i >= 2 {
				t.Error("Got unexpected results")
				return
			}
			for _, ver := range merged {
				if ver.header.Type == invalidVersionType {
					t.Errorf("Invalid result returned: %v", ver.header)
				}
			}
		})`
$DIR/cmd/xl-storage-format-v2_test.go:782:4-807:5: `.Run(fmt.Sprintf("strict-signature-q%d", i), func(t *testing.T) {
			// Mutate signature, non strict
			vMod := make([][]xlMetaV2ShallowVersion, 0, len(vers))
			for i, ver := range vers {
				newVers := make([]xlMetaV2ShallowVersion, 0, len(ver))
				for _, v := range ver {
					v.header.Signature = [4]byte{byte(i + 10), 0, 0, 0}
					newVers = append(newVers, v)
				}
				vMod = append(vMod, newVers)
			}
			merged := mergeXLV2Versions(i, true, 0, vMod...)
			if len(merged) == 0 && i < 2 {
				t.Error("Did not get any results")
				return
			}
			if len(merged) > 0 && i >= 2 {
				t.Error("Got unexpected results")
				return
			}
			for _, ver := range merged {
				if ver.header.Type == invalidVersionType {
					t.Errorf("Invalid result returned: %v", ver.header)
				}
			}
		})`
$DIR/cmd/xl-storage-format-v2_test.go:782:12-782:47: `.Sprintf("strict-signature-q%d", i)`
$DIR/cmd/xl-storage-format-v2_test.go:788:6-788:57: `v.header.Signature = [4]byte{byte(i + 10), 0, 0, 0}`
$DIR/cmd/xl-storage-format-v2_test.go:789:6-789:34: `newVers = append(newVers, v)`
$DIR/cmd/xl-storage-format-v2_test.go:791:5-791:33: `vMod = append(vMod, newVers)`
$DIR/cmd/xl-storage-format-v2_test.go:808:3-833:5: `t.Run(fmt.Sprintf("strict-modtime-q%d", i), func(t *testing.T) {
			// Mutate signature, non strict
			vMod := make([][]xlMetaV2ShallowVersion, 0, len(vers))
			for i, ver := range vers {
				newVers := make([]xlMetaV2ShallowVersion, 0, len(ver))
				for _, v := range ver {
					v.header.ModTime += int64(i + 10)
					newVers = append(newVers, v)
				}
				vMod = append(vMod, newVers)
			}
			merged := mergeXLV2Versions(i, true, 0, vMod...)
			if len(merged) == 0 && i < 2 {
				t.Error("Did not get any results")
				return
			}
			if len(merged) > 0 && i >= 2 {
				t.Error("Got unexpected results", len(merged), merged[0].header)
				return
			}
			for _, ver := range merged {
				if ver.header.Type == invalidVersionType {
					t.Errorf("Invalid result returned: %v", ver.header)
				}
			}
		})`
$DIR/cmd/xl-storage-format-v2_test.go:808:4-833:5: `.Run(fmt.Sprintf("strict-modtime-q%d", i), func(t *testing.T) {
			// Mutate signature, non strict
			vMod := make([][]xlMetaV2ShallowVersion, 0, len(vers))
			for i, ver := range vers {
				newVers := make([]xlMetaV2ShallowVersion, 0, len(ver))
				for _, v := range ver {
					v.header.ModTime += int64(i + 10)
					newVers = append(newVers, v)
				}
				vMod = append(vMod, newVers)
			}
			merged := mergeXLV2Versions(i, true, 0, vMod...)
			if len(merged) == 0 && i < 2 {
				t.Error("Did not get any results")
				return
			}
			if len(merged) > 0 && i >= 2 {
				t.Error("Got unexpected results", len(merged), merged[0].header)
				return
			}
			for _, ver := range merged {
				if ver.header.Type == invalidVersionType {
					t.Errorf("Invalid result returned: %v", ver.header)
				}
			}
		})`
$DIR/cmd/xl-storage-format-v2_test.go:808:12-808:45: `.Sprintf("strict-modtime-q%d", i)`
$DIR/cmd/xl-storage-format-v2_test.go:814:6-814:39: `v.header.ModTime += int64(i + 10)`
$DIR/cmd/xl-storage-format-v2_test.go:815:6-815:34: `newVers = append(newVers, v)`
$DIR/cmd/xl-storage-format-v2_test.go:817:5-817:33: `vMod = append(vMod, newVers)`
$DIR/cmd/xl-storage-format-v2_test.go:834:3-859:5: `t.Run(fmt.Sprintf("strict-flags-q%d", i), func(t *testing.T) {
			// Mutate signature, non strict
			vMod := make([][]xlMetaV2ShallowVersion, 0, len(vers))
			for i, ver := range vers {
				newVers := make([]xlMetaV2ShallowVersion, 0, len(ver))
				for _, v := range ver {
					v.header.Flags += xlFlags(i + 10)
					newVers = append(newVers, v)
				}
				vMod = append(vMod, newVers)
			}
			merged := mergeXLV2Versions(i, true, 0, vMod...)
			if len(merged) == 0 && i < 2 {
				t.Error("Did not get any results")
				return
			}
			if len(merged) > 0 && i >= 2 {
				t.Error("Got unexpected results", len(merged))
				return
			}
			for _, ver := range merged {
				if ver.header.Type == invalidVersionType {
					t.Errorf("Invalid result returned: %v", ver.header)
				}
			}
		})`
$DIR/cmd/xl-storage-format-v2_test.go:834:4-859:5: `.Run(fmt.Sprintf("strict-flags-q%d", i), func(t *testing.T) {
			// Mutate signature, non strict
			vMod := make([][]xlMetaV2ShallowVersion, 0, len(vers))
			for i, ver := range vers {
				newVers := make([]xlMetaV2ShallowVersion, 0, len(ver))
				for _, v := range ver {
					v.header.Flags += xlFlags(i + 10)
					newVers = append(newVers, v)
				}
				vMod = append(vMod, newVers)
			}
			merged := mergeXLV2Versions(i, true, 0, vMod...)
			if len(merged) == 0 && i < 2 {
				t.Error("Did not get any results")
				return
			}
			if len(merged) > 0 && i >= 2 {
				t.Error("Got unexpected results", len(merged))
				return
			}
			for _, ver := range merged {
				if ver.header.Type == invalidVersionType {
					t.Errorf("Invalid result returned: %v", ver.header)
				}
			}
		})`
$DIR/cmd/xl-storage-format-v2_test.go:834:12-834:43: `.Sprintf("strict-flags-q%d", i)`
$DIR/cmd/xl-storage-format-v2_test.go:840:6-840:39: `v.header.Flags += xlFlags(i + 10)`
$DIR/cmd/xl-storage-format-v2_test.go:841:6-841:34: `newVers = append(newVers, v)`
$DIR/cmd/xl-storage-format-v2_test.go:843:5-843:33: `vMod = append(vMod, newVers)`
$DIR/cmd/xl-storage-format-v2_test.go:860:3-885:5: `t.Run(fmt.Sprintf("strict-type-q%d", i), func(t *testing.T) {
			// Mutate signature, non strict
			vMod := make([][]xlMetaV2ShallowVersion, 0, len(vers))
			for i, ver := range vers {
				newVers := make([]xlMetaV2ShallowVersion, 0, len(ver))
				for _, v := range ver {
					v.header.Type += VersionType(i + 10)
					newVers = append(newVers, v)
				}
				vMod = append(vMod, newVers)
			}
			merged := mergeXLV2Versions(i, true, 0, vMod...)
			if len(merged) == 0 && i < 2 {
				t.Error("Did not get any results")
				return
			}
			if len(merged) > 0 && i >= 2 {
				t.Error("Got unexpected results", len(merged))
				return
			}
			for _, ver := range merged {
				if ver.header.Type == invalidVersionType {
					t.Errorf("Invalid result returned: %v", ver.header)
				}
			}
		})`
$DIR/cmd/xl-storage-format-v2_test.go:860:4-885:5: `.Run(fmt.Sprintf("strict-type-q%d", i), func(t *testing.T) {
			// Mutate signature, non strict
			vMod := make([][]xlMetaV2ShallowVersion, 0, len(vers))
			for i, ver := range vers {
				newVers := make([]xlMetaV2ShallowVersion, 0, len(ver))
				for _, v := range ver {
					v.header.Type += VersionType(i + 10)
					newVers = append(newVers, v)
				}
				vMod = append(vMod, newVers)
			}
			merged := mergeXLV2Versions(i, true, 0, vMod...)
			if len(merged) == 0 && i < 2 {
				t.Error("Did not get any results")
				return
			}
			if len(merged) > 0 && i >= 2 {
				t.Error("Got unexpected results", len(merged))
				return
			}
			for _, ver := range merged {
				if ver.header.Type == invalidVersionType {
					t.Errorf("Invalid result returned: %v", ver.header)
				}
			}
		})`
$DIR/cmd/xl-storage-format-v2_test.go:860:12-860:42: `.Sprintf("strict-type-q%d", i)`
$DIR/cmd/xl-storage-format-v2_test.go:866:6-866:42: `v.header.Type += VersionType(i + 10)`
$DIR/cmd/xl-storage-format-v2_test.go:867:6-867:34: `newVers = append(newVers, v)`
$DIR/cmd/xl-storage-format-v2_test.go:869:5-869:33: `vMod = append(vMod, newVers)`
$DIR/cmd/xl-storage-format-v2_test.go:897:2-897:138: `vDelMarker.meta, _ = base64.StdEncoding.DecodeString("gqRUeXBlAqZEZWxPYmqDoklExBCvwGEaY+BAO4B4vyG5ERorpU1UaW1l0xbgJlsWE9IHp01ldGFTeXOA")`
$DIR/cmd/xl-storage-format-v2_test.go:897:29-897:138: `.StdEncoding.DecodeString("gqRUeXBlAqZEZWxPYmqDoklExBCvwGEaY+BAO4B4vyG5ERorpU1UaW1l0xbgJlsWE9IHp01ldGFTeXOA")`
$DIR/cmd/xl-storage-format-v2_test.go:906:2-906:508: `vObj.meta, _ = base64.StdEncoding.DecodeString("gqRUeXBlAaVWMk9iat4AEaJJRMQQEkaOteYCSrWB3nqppSIKTqRERGlyxBAO8fXSJ5RI+YEtsp8KneVVpkVjQWxnbwGjRWNNDKNFY04Ep0VjQlNpemXSABAAAKdFY0luZGV4BaZFY0Rpc3TcABAFBgcICQoLDA0ODxABAgMEqENTdW1BbGdvAahQYXJ0TnVtc5EBqVBhcnRFVGFnc8CpUGFydFNpemVzkdEBL6pQYXJ0QVNpemVzkdEBL6RTaXpl0QEvpU1UaW1l0xbgJhIa6ABvp01ldGFTeXOBvHgtbWluaW8taW50ZXJuYWwtaW5saW5lLWRhdGHEBHRydWWnTWV0YVVzcoKsY29udGVudC10eXBluGFwcGxpY2F0aW9uL29jdGV0LXN0cmVhbaRldGFn2SBlYTIxMDE2MmVlYjRhZGMzMWZmOTg0Y2I3NDRkNmFmNg==")`
$DIR/cmd/xl-storage-format-v2_test.go:906:23-906:508: `.StdEncoding.DecodeString("gqRUeXBlAaVWMk9iat4AEaJJRMQQEkaOteYCSrWB3nqppSIKTqRERGlyxBAO8fXSJ5RI+YEtsp8KneVVpkVjQWxnbwGjRWNNDKNFY04Ep0VjQlNpemXSABAAAKdFY0luZGV4BaZFY0Rpc3TcABAFBgcICQoLDA0ODxABAgMEqENTdW1BbGdvAahQYXJ0TnVtc5EBqVBhcnRFVGFnc8CpUGFydFNpemVzkdEBL6pQYXJ0QVNpemVzkdEBL6RTaXpl0QEvpU1UaW1l0xbgJhIa6ABvp01ldGFTeXOBvHgtbWluaW8taW50ZXJuYWwtaW5saW5lLWRhdGHEBHRydWWnTWV0YVVzcoKsY29udGVudC10eXBluGFwcGxpY2F0aW9uL29jdGV0LXN0cmVhbaRldGFn2SBlYTIxMDE2MmVlYjRhZGMzMWZmOTg0Y2I3NDRkNmFmNg==")`
$DIR/cmd/xl-storage-format-v2_test.go:996:3-1010:5: `t.Run(test.name, func(t *testing.T) {
			// Run multiple times, shuffling the input order.
			for i := int64(0); i < 50; i++ {
				t.Run(fmt.Sprint(i), func(t *testing.T) {
					rng := rand.New(rand.NewSource(i))
					rng.Shuffle(len(test.input), func(i, j int) {
						test.input[i], test.input[j] = test.input[j], test.input[i]
					})
					got := mergeXLV2Versions(test.quorum, true, 0, test.input...)
					if !reflect.DeepEqual(test.want, got) {
						t.Errorf("want %v != got %v", test.want, got)
					}
				})
			}
		})`
$DIR/cmd/xl-storage-format-v2_test.go:996:4-1010:5: `.Run(test.name, func(t *testing.T) {
			// Run multiple times, shuffling the input order.
			for i := int64(0); i < 50; i++ {
				t.Run(fmt.Sprint(i), func(t *testing.T) {
					rng := rand.New(rand.NewSource(i))
					rng.Shuffle(len(test.input), func(i, j int) {
						test.input[i], test.input[j] = test.input[j], test.input[i]
					})
					got := mergeXLV2Versions(test.quorum, true, 0, test.input...)
					if !reflect.DeepEqual(test.want, got) {
						t.Errorf("want %v != got %v", test.want, got)
					}
				})
			}
		})`
$DIR/cmd/xl-storage-format-v2_test.go:999:5-1008:7: `t.Run(fmt.Sprint(i), func(t *testing.T) {
					rng := rand.New(rand.NewSource(i))
					rng.Shuffle(len(test.input), func(i, j int) {
						test.input[i], test.input[j] = test.input[j], test.input[i]
					})
					got := mergeXLV2Versions(test.quorum, true, 0, test.input...)
					if !reflect.DeepEqual(test.want, got) {
						t.Errorf("want %v != got %v", test.want, got)
					}
				})`
$DIR/cmd/xl-storage-format-v2_test.go:999:6-1008:7: `.Run(fmt.Sprint(i), func(t *testing.T) {
					rng := rand.New(rand.NewSource(i))
					rng.Shuffle(len(test.input), func(i, j int) {
						test.input[i], test.input[j] = test.input[j], test.input[i]
					})
					got := mergeXLV2Versions(test.quorum, true, 0, test.input...)
					if !reflect.DeepEqual(test.want, got) {
						t.Errorf("want %v != got %v", test.want, got)
					}
				})`
$DIR/cmd/xl-storage-format-v2_test.go:999:14-999:24: `.Sprint(i)`
$DIR/cmd/xl-storage-format-v2_test.go:1000:17-1000:40: `.New(rand.NewSource(i))`
$DIR/cmd/xl-storage-format-v2_test.go:1000:26-1000:39: `.NewSource(i)`
$DIR/cmd/xl-storage-format-v2_test.go:1001:6-1003:8: `rng.Shuffle(len(test.input), func(i, j int) {
						test.input[i], test.input[j] = test.input[j], test.input[i]
					})`
$DIR/cmd/xl-storage-format-v2_test.go:1001:9-1003:8: `.Shuffle(len(test.input), func(i, j int) {
						test.input[i], test.input[j] = test.input[j], test.input[i]
					})`
$DIR/cmd/xl-storage-format-v2_test.go:1002:7-1002:66: `test.input[i], test.input[j] = test.input[j], test.input[i]`
$DIR/cmd/xl-storage-format-v2_test.go:1005:17-1005:43: `.DeepEqual(test.want, got)`
$DIR/cmd/xl-storage-format_test.go:238:16-238:56: `.Unmarshal(xlMetaJSON, &unMarshalXLMeta)`
$DIR/cmd/xl-storage-format_test.go:244:16-244:55: `.Unmarshal(xlMetaJSON, &jsoniterXLMeta)`
$DIR/cmd/xl-storage-format_test.go:256:16-256:56: `.Unmarshal(xlMetaJSON, &unMarshalXLMeta)`
$DIR/cmd/xl-storage-format_test.go:262:16-262:55: `.Unmarshal(xlMetaJSON, &jsoniterXLMeta)`
$DIR/cmd/xl-storage-free-version_test.go:46:3-46:13: `t.Helper()`
$DIR/cmd/xl-storage-free-version_test.go:46:4-46:13: `.Helper()`
$DIR/cmd/xl-storage-free-version_test.go:56:3-56:13: `t.Helper()`
$DIR/cmd/xl-storage-free-version_test.go:56:4-56:13: `.Helper()`
$DIR/cmd/xl-storage-free-version_test.go:58:3-58:12: `counter++`
$DIR/cmd/xl-storage-free-version_test.go:69:25-69:31: `.Now()`
$DIR/cmd/xl-storage-free-version_test.go:75:29-75:38: `.String()`
$DIR/cmd/xl-storage-free-version_test.go:94:2-94:29: `fatalErr(xl.AddVersion(fi))`
$DIR/cmd/xl-storage-free-version_test.go:94:13-94:28: `.AddVersion(fi)`
$DIR/cmd/xl-storage-free-version_test.go:95:2-95:10: `report()`
$DIR/cmd/xl-storage-free-version_test.go:99:2-99:23: `tierfi.VersionID = ""`
$DIR/cmd/xl-storage-free-version_test.go:100:2-100:33: `fatalErr(xl.AddVersion(tierfi))`
$DIR/cmd/xl-storage-free-version_test.go:100:13-100:32: `.AddVersion(tierfi)`
$DIR/cmd/xl-storage-free-version_test.go:101:2-101:10: `report()`
$DIR/cmd/xl-storage-free-version_test.go:102:2-102:56: `tierfi.TransitionStatus = lifecycle.TransitionComplete`
$DIR/cmd/xl-storage-free-version_test.go:103:2-103:44: `tierfi.TransitionedObjName = mustGetUUID()`
$DIR/cmd/xl-storage-free-version_test.go:104:2-104:39: `tierfi.TransitionTier = "MINIOTIER-1"`
$DIR/cmd/xl-storage-free-version_test.go:106:2-106:35: `_, err = xl.DeleteVersion(tierfi)`
$DIR/cmd/xl-storage-free-version_test.go:106:13-106:35: `.DeleteVersion(tierfi)`
$DIR/cmd/xl-storage-free-version_test.go:107:2-107:15: `fatalErr(err)`
$DIR/cmd/xl-storage-free-version_test.go:108:2-108:10: `report()`
$DIR/cmd/xl-storage-free-version_test.go:116:2-116:42: `newtierfi.SetTierFreeVersionID(fvIDs[0])`
$DIR/cmd/xl-storage-free-version_test.go:116:11-116:42: `.SetTierFreeVersionID(fvIDs[0])`
$DIR/cmd/xl-storage-free-version_test.go:117:2-117:40: `fatalErr(xl.AddFreeVersion(newtierfi))`
$DIR/cmd/xl-storage-free-version_test.go:117:13-117:39: `.AddFreeVersion(newtierfi)`
$DIR/cmd/xl-storage-free-version_test.go:118:2-118:10: `report()`
$DIR/cmd/xl-storage-free-version_test.go:119:2-119:36: `fatalErr(xl.AddVersion(newtierfi))`
$DIR/cmd/xl-storage-free-version_test.go:119:13-119:35: `.AddVersion(newtierfi)`
$DIR/cmd/xl-storage-free-version_test.go:120:2-120:10: `report()`
$DIR/cmd/xl-storage-free-version_test.go:123:2-123:31: `newtierfi.TransitionTier = ""`
$DIR/cmd/xl-storage-free-version_test.go:124:2-124:36: `newtierfi.TransitionedObjName = ""`
$DIR/cmd/xl-storage-free-version_test.go:125:2-125:33: `newtierfi.TransitionStatus = ""`
$DIR/cmd/xl-storage-free-version_test.go:126:2-126:42: `newtierfi.SetTierFreeVersionID(fvIDs[1])`
$DIR/cmd/xl-storage-free-version_test.go:126:11-126:42: `.SetTierFreeVersionID(fvIDs[1])`
$DIR/cmd/xl-storage-free-version_test.go:127:2-127:10: `report()`
$DIR/cmd/xl-storage-free-version_test.go:128:2-128:38: `_, err = xl.DeleteVersion(newtierfi)`
$DIR/cmd/xl-storage-free-version_test.go:128:13-128:38: `.DeleteVersion(newtierfi)`
$DIR/cmd/xl-storage-free-version_test.go:129:2-129:10: `report()`
$DIR/cmd/xl-storage-free-version_test.go:130:2-130:15: `fatalErr(err)`
$DIR/cmd/xl-storage-free-version_test.go:138:25-138:76: `.listFreeVersions(newtierfi.Volume, newtierfi.Name)`
$DIR/cmd/xl-storage-free-version_test.go:182:16-182:65: `.ToFileInfo(ft.vol, ft.name, "", ft.inclFreeVers)`
$DIR/cmd/xl-storage-free-version_test.go:183:27-183:51: `.Is(err, ft.expectedErr)`
$DIR/cmd/xl-storage-free-version_test.go:186:15-186:33: `.TierFreeVersion()`
$DIR/cmd/xl-storage-free-version_test.go:190:4-190:27: `_, err = ft.afterFn(fi)`
$DIR/cmd/xl-storage-free-version_test.go:190:15-190:27: `.afterFn(fi)`
$DIR/cmd/xl-storage-free-version_test.go:200:3-200:26: `freefi.VersionID = fvID`
$DIR/cmd/xl-storage-free-version_test.go:201:3-201:36: `_, err = xl.DeleteVersion(freefi)`
$DIR/cmd/xl-storage-free-version_test.go:201:14-201:36: `.DeleteVersion(freefi)`
$DIR/cmd/xl-storage-free-version_test.go:202:3-202:16: `fatalErr(err)`
$DIR/cmd/xl-storage-free-version_test.go:204:2-204:10: `report()`
$DIR/cmd/xl-storage-free-version_test.go:207:2-207:75: `freeVersions, err = xl.listFreeVersions(newtierfi.Volume, newtierfi.Name)`
$DIR/cmd/xl-storage-free-version_test.go:207:24-207:75: `.listFreeVersions(newtierfi.Volume, newtierfi.Name)`
$DIR/cmd/xl-storage-free-version_test.go:214:2-214:10: `report()`
$DIR/cmd/xl-storage-free-version_test.go:218:2-218:68: `newfi.SetTierFreeVersionID("00000000-0000-0000-0000-0000000000f3")`
$DIR/cmd/xl-storage-free-version_test.go:218:7-218:68: `.SetTierFreeVersionID("00000000-0000-0000-0000-0000000000f3")`
$DIR/cmd/xl-storage-free-version_test.go:219:2-219:36: `fatalErr(xl.AddFreeVersion(newfi))`
$DIR/cmd/xl-storage-free-version_test.go:219:13-219:35: `.AddFreeVersion(newfi)`
$DIR/cmd/xl-storage-free-version_test.go:220:2-220:10: `report()`
$DIR/cmd/xl-storage-free-version_test.go:223:2-223:75: `freeVersions, err = xl.listFreeVersions(newtierfi.Volume, newtierfi.Name)`
$DIR/cmd/xl-storage-free-version_test.go:223:24-223:75: `.listFreeVersions(newtierfi.Volume, newtierfi.Name)`
$DIR/cmd/xl-storage_test.go:39:3-39:11: `t.Skip()`
$DIR/cmd/xl-storage_test.go:39:4-39:11: `.Skip()`
$DIR/cmd/xl-storage_test.go:55:3-59:5: `t.Run("", func(t *testing.T) {
			if gotErr != testCase.expectedErr {
				t.Errorf("Expected %s, got %s", testCase.expectedErr, gotErr)
			}
		})`
$DIR/cmd/xl-storage_test.go:55:4-59:5: `.Run("", func(t *testing.T) {
			if gotErr != testCase.expectedErr {
				t.Errorf("Expected %s, got %s", testCase.expectedErr, gotErr)
			}
		})`
$DIR/cmd/xl-storage_test.go:170:11-170:21: `.TempDir()`
$DIR/cmd/xl-storage_test.go:189:10-189:20: `.TempDir()`
$DIR/cmd/xl-storage_test.go:192:19-192:55: `.Join(tmp, "non-existent-directory")`
$DIR/cmd/xl-storage_test.go:198:19-198:37: `.Join(tmp, "file")`
$DIR/cmd/xl-storage_test.go:199:11-199:51: `.WriteFile(dir2, []byte("hello"), 0o777)`
$DIR/cmd/xl-storage_test.go:209:19-209:38: `.Join(tmp, "empty")`
$DIR/cmd/xl-storage_test.go:210:2-210:29: `err = os.Mkdir(dir3, 0o777)`
$DIR/cmd/xl-storage_test.go:210:10-210:29: `.Mkdir(dir3, 0o777)`
$DIR/cmd/xl-storage_test.go:221:2-221:1273: `const legacyJSON = `{"version":"1.0.1","format":"xl","stat":{"size":2016,"modTime":"2021-10-11T23:40:34.914361617Z"},"erasure":{"algorithm":"klauspost/reedsolomon/vandermonde","data":2,"parity":2,"blockSize":10485760,"index":2,"distribution":[2,3,4,1],"checksum":[{"name":"part.1","algorithm":"highwayhash256S"}]},"minio":{"release":"RELEASE.2019-12-30T05-45-39Z"},"meta":{"X-Minio-Internal-Server-Side-Encryption-Iv":"kInsJB/0yxyz/40ZI+lmQYJfZacDYqZsGh2wEiv+N50=","X-Minio-Internal-Server-Side-Encryption-S3-Kms-Key-Id":"my-minio-key","X-Minio-Internal-Server-Side-Encryption-S3-Kms-Sealed-Key":"eyJhZWFkIjoiQUVTLTI1Ni1HQ00tSE1BQy1TSEEtMjU2IiwiaWQiOiJjMzEwNDVjODFmMTA2MWU5NTI4ODcxZmNhMmRkYzA3YyIsIml2IjoiOWQ5cUxGMFhSaFBXbEVqT2JDMmo0QT09Iiwibm9uY2UiOiJYaERsemlCU1cwSENuK2RDIiwiYnl0ZXMiOiJUM0lmY1haQ1dtMWpLeWxBWmFUUnczbDVoYldLWW95dm5iNTZVaWJEbE5LOFZVU2tuQmx3NytIMG8yZnRzZ1UrIn0=","X-Minio-Internal-Server-Side-Encryption-S3-Sealed-Key":"IAAfANqt801MT+wwzQRkfFhTrndmhfNiN0alKwDS4AQ1dznNADRQgoq6I4pPVfRsbDp5rQawlripQZvPWUSNJA==","X-Minio-Internal-Server-Side-Encryption-Seal-Algorithm":"DAREv2-HMAC-SHA256","content-type":"application/octet-stream","etag":"20000f00cf5e68d3d6b60e44fcd8b9e8-1"},"parts":[{"number":1,"name":"part.1","etag":"","size":2016,"actualSize":1984}]}``
$DIR/cmd/xl-storage_test.go:230:20-230:67: `.MakeVol(context.Background(), "exists-legacy")`
$DIR/cmd/xl-storage_test.go:230:36-230:49: `.Background()`
$DIR/cmd/xl-storage_test.go:234:20-234:109: `.AppendFile(context.Background(), "exists-legacy", "as-file/xl.json", []byte(legacyJSON))`
$DIR/cmd/xl-storage_test.go:234:39-234:52: `.Background()`
$DIR/cmd/xl-storage_test.go:238:22-238:95: `.ReadVersion(context.Background(), "exists-legacy", "as-file", "", false)`
$DIR/cmd/xl-storage_test.go:238:42-238:55: `.Background()`
$DIR/cmd/xl-storage_test.go:256:17-256:46: `.ReadFile("testdata/xl.meta")`
$DIR/cmd/xl-storage_test.go:259:20-259:60: `.MakeVol(context.Background(), "exists")`
$DIR/cmd/xl-storage_test.go:259:36-259:49: `.Background()`
$DIR/cmd/xl-storage_test.go:262:20-262:103: `.AppendFile(context.Background(), "exists", "as-directory/as-file/xl.meta", xlMeta)`
$DIR/cmd/xl-storage_test.go:262:39-262:52: `.Background()`
$DIR/cmd/xl-storage_test.go:265:20-265:90: `.AppendFile(context.Background(), "exists", "as-file/xl.meta", xlMeta)`
$DIR/cmd/xl-storage_test.go:265:39-265:52: `.Background()`
$DIR/cmd/xl-storage_test.go:268:20-268:97: `.AppendFile(context.Background(), "exists", "as-file-parent/xl.meta", xlMeta)`
$DIR/cmd/xl-storage_test.go:268:39-268:52: `.Background()`
$DIR/cmd/xl-storage_test.go:324:3-324:98: `_, err = xlStorage.ReadVersion(context.Background(), testCase.volume, testCase.path, "", false)`
$DIR/cmd/xl-storage_test.go:324:21-324:98: `.ReadVersion(context.Background(), testCase.volume, testCase.path, "", false)`
$DIR/cmd/xl-storage_test.go:324:41-324:54: `.Background()`
$DIR/cmd/xl-storage_test.go:340:20-340:60: `.MakeVol(context.Background(), "exists")`
$DIR/cmd/xl-storage_test.go:340:36-340:49: `.Background()`
$DIR/cmd/xl-storage_test.go:343:20-343:111: `.AppendFile(context.Background(), "exists", "as-directory/as-file", []byte("Hello, World"))`
$DIR/cmd/xl-storage_test.go:343:39-343:52: `.Background()`
$DIR/cmd/xl-storage_test.go:346:20-346:98: `.AppendFile(context.Background(), "exists", "as-file", []byte("Hello, World"))`
$DIR/cmd/xl-storage_test.go:346:39-346:52: `.Background()`
$DIR/cmd/xl-storage_test.go:349:20-349:105: `.AppendFile(context.Background(), "exists", "as-file-parent", []byte("Hello, World"))`
$DIR/cmd/xl-storage_test.go:349:39-349:52: `.Background()`
$DIR/cmd/xl-storage_test.go:406:3-406:90: `dataRead, err = xlStorage.ReadAll(context.Background(), testCase.volume, testCase.path)`
$DIR/cmd/xl-storage_test.go:406:28-406:90: `.ReadAll(context.Background(), testCase.volume, testCase.path)`
$DIR/cmd/xl-storage_test.go:406:44-406:57: `.Background()`
$DIR/cmd/xl-storage_test.go:412:13-412:53: `.Equal(dataRead, []byte("Hello, World"))`
$DIR/cmd/xl-storage_test.go:425:12-425:32: `.Create(tmpFileName)`
$DIR/cmd/xl-storage_test.go:427:10-427:30: `.Remove(tmpFileName)`
$DIR/cmd/xl-storage_test.go:474:14-474:84: `.WriteFile(slashpath.Join(path, "vol-as-file"), []byte{}, os.ModePerm)`
$DIR/cmd/xl-storage_test.go:474:34-474:60: `.Join(path, "vol-as-file")`
$DIR/cmd/xl-storage_test.go:478:14-478:65: `.Mkdir(slashpath.Join(path, "existing-vol"), 0o777)`
$DIR/cmd/xl-storage_test.go:478:30-478:57: `.Join(path, "existing-vol")`
$DIR/cmd/xl-storage_test.go:512:22-512:70: `.MakeVol(context.Background(), testCase.volName)`
$DIR/cmd/xl-storage_test.go:512:38-512:51: `.Background()`
$DIR/cmd/xl-storage_test.go:520:14-520:42: `.Chmod(permDeniedDir, 0o400)`
$DIR/cmd/xl-storage_test.go:525:3-525:44: `_, err = newLocalXLStorage(permDeniedDir)`
$DIR/cmd/xl-storage_test.go:530:14-530:42: `.Chmod(permDeniedDir, 0o755)`
$DIR/cmd/xl-storage_test.go:540:14-540:42: `.Chmod(permDeniedDir, 0o400)`
$DIR/cmd/xl-storage_test.go:544:25-544:67: `.MakeVol(context.Background(), "test-vol")`
$DIR/cmd/xl-storage_test.go:544:41-544:54: `.Background()`
$DIR/cmd/xl-storage_test.go:559:20-559:65: `.MakeVol(context.Background(), "success-vol")`
$DIR/cmd/xl-storage_test.go:559:36-559:49: `.Background()`
$DIR/cmd/xl-storage_test.go:564:18-564:45: `.Join(path, "nonempty-vol")`
$DIR/cmd/xl-storage_test.go:565:13-565:31: `.Mkdir(vol, 0o777)`
$DIR/cmd/xl-storage_test.go:568:13-568:80: `.WriteFile(slashpath.Join(vol, "test-file"), []byte{}, os.ModePerm)`
$DIR/cmd/xl-storage_test.go:568:33-568:56: `.Join(vol, "test-file")`
$DIR/cmd/xl-storage_test.go:603:21-603:78: `.DeleteVol(context.Background(), testCase.volName, false)`
$DIR/cmd/xl-storage_test.go:603:39-603:52: `.Background()`
$DIR/cmd/xl-storage_test.go:610:21-610:31: `.TempDir()`
$DIR/cmd/xl-storage_test.go:611:14-611:70: `.Mkdir(slashpath.Join(permDeniedDir, "mybucket"), 0o400)`
$DIR/cmd/xl-storage_test.go:611:30-611:62: `.Join(permDeniedDir, "mybucket")`
$DIR/cmd/xl-storage_test.go:614:3-616:5: `t.Cleanup(func() {
			os.Chmod(slashpath.Join(permDeniedDir, "mybucket"), 0o775)
		})`
$DIR/cmd/xl-storage_test.go:614:4-616:5: `.Cleanup(func() {
			os.Chmod(slashpath.Join(permDeniedDir, "mybucket"), 0o775)
		})`
$DIR/cmd/xl-storage_test.go:615:4-615:62: `os.Chmod(slashpath.Join(permDeniedDir, "mybucket"), 0o775)`
$DIR/cmd/xl-storage_test.go:615:6-615:62: `.Chmod(slashpath.Join(permDeniedDir, "mybucket"), 0o775)`
$DIR/cmd/xl-storage_test.go:615:22-615:54: `.Join(permDeniedDir, "mybucket")`
$DIR/cmd/xl-storage_test.go:618:14-618:42: `.Chmod(permDeniedDir, 0o400)`
$DIR/cmd/xl-storage_test.go:621:3-623:5: `t.Cleanup(func() {
			os.Chmod(permDeniedDir, 0o775)
		})`
$DIR/cmd/xl-storage_test.go:621:4-623:5: `.Cleanup(func() {
			os.Chmod(permDeniedDir, 0o775)
		})`
$DIR/cmd/xl-storage_test.go:622:4-622:34: `os.Chmod(permDeniedDir, 0o775)`
$DIR/cmd/xl-storage_test.go:622:6-622:34: `.Chmod(permDeniedDir, 0o775)`
$DIR/cmd/xl-storage_test.go:626:3-626:44: `_, err = newLocalXLStorage(permDeniedDir)`
$DIR/cmd/xl-storage_test.go:631:14-631:42: `.Chmod(permDeniedDir, 0o755)`
$DIR/cmd/xl-storage_test.go:641:14-641:42: `.Chmod(permDeniedDir, 0o400)`
$DIR/cmd/xl-storage_test.go:645:24-645:75: `.DeleteVol(context.Background(), "mybucket", false)`
$DIR/cmd/xl-storage_test.go:645:42-645:55: `.Background()`
$DIR/cmd/xl-storage_test.go:655:2-655:24: `os.RemoveAll(diskPath)`
$DIR/cmd/xl-storage_test.go:655:4-655:24: `.RemoveAll(diskPath)`
$DIR/cmd/xl-storage_test.go:659:2-659:81: `err = xlStorageDeletedStorage.DeleteVol(context.Background(), "Del-Vol", false)`
$DIR/cmd/xl-storage_test.go:659:31-659:81: `.DeleteVol(context.Background(), "Del-Vol", false)`
$DIR/cmd/xl-storage_test.go:659:49-659:62: `.Background()`
$DIR/cmd/xl-storage_test.go:674:20-674:65: `.MakeVol(context.Background(), "success-vol")`
$DIR/cmd/xl-storage_test.go:674:36-674:49: `.Background()`
$DIR/cmd/xl-storage_test.go:701:3-701:75: `volInfo, err = xlStorage.StatVol(context.Background(), testCase.volName)`
$DIR/cmd/xl-storage_test.go:701:27-701:75: `.StatVol(context.Background(), testCase.volName)`
$DIR/cmd/xl-storage_test.go:701:43-701:56: `.Background()`
$DIR/cmd/xl-storage_test.go:719:2-719:24: `os.RemoveAll(diskPath)`
$DIR/cmd/xl-storage_test.go:719:4-719:24: `.RemoveAll(diskPath)`
$DIR/cmd/xl-storage_test.go:723:2-723:76: `_, err = xlStorageDeletedStorage.StatVol(context.Background(), "Stat vol")`
$DIR/cmd/xl-storage_test.go:723:34-723:76: `.StatVol(context.Background(), "Stat vol")`
$DIR/cmd/xl-storage_test.go:723:50-723:63: `.Background()`
$DIR/cmd/xl-storage_test.go:739:30-739:61: `.ListVols(context.Background())`
$DIR/cmd/xl-storage_test.go:739:47-739:60: `.Background()`
$DIR/cmd/xl-storage_test.go:746:20-746:65: `.MakeVol(context.Background(), "success-vol")`
$DIR/cmd/xl-storage_test.go:746:36-746:49: `.Background()`
$DIR/cmd/xl-storage_test.go:750:2-750:58: `volInfos, err = xlStorage.ListVols(context.Background())`
$DIR/cmd/xl-storage_test.go:750:27-750:58: `.ListVols(context.Background())`
$DIR/cmd/xl-storage_test.go:750:44-750:57: `.Background()`
$DIR/cmd/xl-storage_test.go:760:4-760:19: `volFound = true`
$DIR/cmd/xl-storage_test.go:769:2-769:20: `os.RemoveAll(path)`
$DIR/cmd/xl-storage_test.go:769:4-769:20: `.RemoveAll(path)`
$DIR/cmd/xl-storage_test.go:771:23-771:54: `.ListVols(context.Background())`
$DIR/cmd/xl-storage_test.go:771:40-771:53: `.Background()`
$DIR/cmd/xl-storage_test.go:790:2-790:24: `os.RemoveAll(diskPath)`
$DIR/cmd/xl-storage_test.go:790:4-790:24: `.RemoveAll(diskPath)`
$DIR/cmd/xl-storage_test.go:792:20-792:65: `.MakeVol(context.Background(), "success-vol")`
$DIR/cmd/xl-storage_test.go:792:36-792:49: `.Background()`
$DIR/cmd/xl-storage_test.go:795:20-795:120: `.AppendFile(context.Background(), "success-vol", "abc/def/ghi/success-file", []byte("Hello, world"))`
$DIR/cmd/xl-storage_test.go:795:39-795:52: `.Background()`
$DIR/cmd/xl-storage_test.go:798:20-798:120: `.AppendFile(context.Background(), "success-vol", "abc/xyz/ghi/success-file", []byte("Hello, world"))`
$DIR/cmd/xl-storage_test.go:798:39-798:52: `.Background()`
$DIR/cmd/xl-storage_test.go:857:3-857:96: `dirList, err = xlStorage.ListDir(context.Background(), testCase.srcVol, testCase.srcPath, -1)`
$DIR/cmd/xl-storage_test.go:857:27-857:96: `.ListDir(context.Background(), testCase.srcVol, testCase.srcPath, -1)`
$DIR/cmd/xl-storage_test.go:857:43-857:56: `.Background()`
$DIR/cmd/xl-storage_test.go:863:16-863:63: `.Contains(strings.Join(dirList, ","), expected)`
$DIR/cmd/xl-storage_test.go:863:33-863:52: `.Join(dirList, ",")`
$DIR/cmd/xl-storage_test.go:875:3-875:44: `_, err = newLocalXLStorage(permDeniedDir)`
$DIR/cmd/xl-storage_test.go:880:14-880:42: `.Chmod(permDeniedDir, 0o755)`
$DIR/cmd/xl-storage_test.go:889:24-892:5: `.Delete(context.Background(), "mybucket", "myobject", DeleteOptions{
			Recursive: false,
			Force:     false,
		})`
$DIR/cmd/xl-storage_test.go:889:39-889:52: `.Background()`
$DIR/cmd/xl-storage_test.go:899:2-902:4: `err = xlStorageDeletedStorage.Delete(context.Background(), "del-vol", "my-file", DeleteOptions{
		Recursive: false,
		Force:     false,
	})`
$DIR/cmd/xl-storage_test.go:899:31-902:4: `.Delete(context.Background(), "del-vol", "my-file", DeleteOptions{
		Recursive: false,
		Force:     false,
	})`
$DIR/cmd/xl-storage_test.go:899:46-899:59: `.Background()`
$DIR/cmd/xl-storage_test.go:911:3-911:11: `t.Skip()`
$DIR/cmd/xl-storage_test.go:911:4-911:11: `.Skip()`
$DIR/cmd/xl-storage_test.go:921:20-921:65: `.MakeVol(context.Background(), "success-vol")`
$DIR/cmd/xl-storage_test.go:921:36-921:49: `.Background()`
$DIR/cmd/xl-storage_test.go:924:20-924:108: `.AppendFile(context.Background(), "success-vol", "success-file", []byte("Hello, world"))`
$DIR/cmd/xl-storage_test.go:924:39-924:52: `.Background()`
$DIR/cmd/xl-storage_test.go:928:20-928:68: `.MakeVol(context.Background(), "no-permissions")`
$DIR/cmd/xl-storage_test.go:928:36-928:49: `.Background()`
$DIR/cmd/xl-storage_test.go:931:20-931:107: `.AppendFile(context.Background(), "no-permissions", "dir/file", []byte("Hello, world"))`
$DIR/cmd/xl-storage_test.go:931:39-931:52: `.Background()`
$DIR/cmd/xl-storage_test.go:935:13-935:60: `.Chmod(pathJoin(path, "no-permissions"), 0o555)`
$DIR/cmd/xl-storage_test.go:938:2-940:4: `t.Cleanup(func() {
		os.Chmod(pathJoin(path, "no-permissions"), 0o775)
	})`
$DIR/cmd/xl-storage_test.go:938:3-940:4: `.Cleanup(func() {
		os.Chmod(pathJoin(path, "no-permissions"), 0o775)
	})`
$DIR/cmd/xl-storage_test.go:939:3-939:52: `os.Chmod(pathJoin(path, "no-permissions"), 0o775)`
$DIR/cmd/xl-storage_test.go:939:5-939:52: `.Chmod(pathJoin(path, "no-permissions"), 0o775)`
$DIR/cmd/xl-storage_test.go:993:21-996:5: `.Delete(context.Background(), testCase.srcVol, testCase.srcPath, DeleteOptions{
			Recursive: false,
			Force:     false,
		})`
$DIR/cmd/xl-storage_test.go:993:36-993:49: `.Background()`
$DIR/cmd/xl-storage_test.go:1006:3-1006:44: `_, err = newLocalXLStorage(permDeniedDir)`
$DIR/cmd/xl-storage_test.go:1011:14-1011:42: `.Chmod(permDeniedDir, 0o755)`
$DIR/cmd/xl-storage_test.go:1020:24-1023:5: `.Delete(context.Background(), "mybucket", "myobject", DeleteOptions{
			Recursive: false,
			Force:     false,
		})`
$DIR/cmd/xl-storage_test.go:1020:39-1020:52: `.Background()`
$DIR/cmd/xl-storage_test.go:1034:2-1034:30: `err = os.RemoveAll(diskPath)`
$DIR/cmd/xl-storage_test.go:1034:10-1034:30: `.RemoveAll(diskPath)`
$DIR/cmd/xl-storage_test.go:1041:2-1044:4: `err = xlStorageDeletedStorage.Delete(context.Background(), "del-vol", "my-file", DeleteOptions{
		Recursive: false,
		Force:     false,
	})`
$DIR/cmd/xl-storage_test.go:1041:31-1044:4: `.Delete(context.Background(), "del-vol", "my-file", DeleteOptions{
		Recursive: false,
		Force:     false,
	})`
$DIR/cmd/xl-storage_test.go:1041:46-1041:59: `.Background()`
$DIR/cmd/xl-storage_test.go:1060:20-1060:58: `.MakeVol(context.Background(), volume)`
$DIR/cmd/xl-storage_test.go:1060:36-1060:49: `.Background()`
$DIR/cmd/xl-storage_test.go:1065:13-1065:80: `.Mkdir(slashpath.Join(path, "success-vol", "object-as-dir"), 0o777)`
$DIR/cmd/xl-storage_test.go:1065:29-1065:72: `.Join(path, "success-vol", "object-as-dir")`
$DIR/cmd/xl-storage_test.go:1147:3-1147:104: `err = xlStorage.AppendFile(context.Background(), volume, appendFile.fileName, []byte("hello, world"))`
$DIR/cmd/xl-storage_test.go:1147:18-1147:104: `.AppendFile(context.Background(), volume, appendFile.fileName, []byte("hello, world"))`
$DIR/cmd/xl-storage_test.go:1147:37-1147:50: `.Background()`
$DIR/cmd/xl-storage_test.go:1156:24-1156:87: `.ReadFile(context.Background(), volume, "myobject", -1, buf, v)`
$DIR/cmd/xl-storage_test.go:1156:41-1156:54: `.Background()`
$DIR/cmd/xl-storage_test.go:1167:4-1167:114: `n, err = xlStorage.ReadFile(context.Background(), testCase.volume, testCase.fileName, testCase.offset, buf, v)`
$DIR/cmd/xl-storage_test.go:1167:22-1167:114: `.ReadFile(context.Background(), testCase.volume, testCase.fileName, testCase.offset, buf, v)`
$DIR/cmd/xl-storage_test.go:1167:39-1167:52: `.Background()`
$DIR/cmd/xl-storage_test.go:1177:9-1177:37: `resultErrno = uintptr(errno)`
$DIR/cmd/xl-storage_test.go:1182:9-1182:37: `expectErrno = uintptr(errno)`
$DIR/cmd/xl-storage_test.go:1195:15-1195:52: `.Equal(testCase.expectedBuf, buf[:n])`
$DIR/cmd/xl-storage_test.go:1212:14-1212:47: `.Equal(testCase.expectedBuf, buf)`
$DIR/cmd/xl-storage_test.go:1227:3-1227:44: `_, err = newLocalXLStorage(permDeniedDir)`
$DIR/cmd/xl-storage_test.go:1232:14-1232:42: `.Chmod(permDeniedDir, 0o755)`
$DIR/cmd/xl-storage_test.go:1243:35-1243:101: `.ReadFile(context.Background(), "mybucket", "myobject", 0, buf, v)`
$DIR/cmd/xl-storage_test.go:1243:52-1243:65: `.Background()`
$DIR/cmd/xl-storage_test.go:1284:20-1284:58: `.MakeVol(context.Background(), volume)`
$DIR/cmd/xl-storage_test.go:1284:36-1284:49: `.Background()`
$DIR/cmd/xl-storage_test.go:1288:16-1288:44: `.ReadFull(rand.Reader, data)`
$DIR/cmd/xl-storage_test.go:1291:20-1291:75: `.AppendFile(context.Background(), volume, object, data)`
$DIR/cmd/xl-storage_test.go:1291:39-1291:52: `.Background()`
$DIR/cmd/xl-storage_test.go:1296:12-1296:28: `.algorithm.New()`
$DIR/cmd/xl-storage_test.go:1297:3-1297:16: `h.Write(data)`
$DIR/cmd/xl-storage_test.go:1297:4-1297:16: `.Write(data)`
$DIR/cmd/xl-storage_test.go:1299:4-1299:22: `h.Write([]byte{0})`
$DIR/cmd/xl-storage_test.go:1299:5-1299:22: `.Write([]byte{0})`
$DIR/cmd/xl-storage_test.go:1303:22-1303:147: `.ReadFile(context.Background(), volume, test.file, int64(test.offset), buffer, NewBitrotVerifier(test.algorithm, h.Sum(nil)))`
$DIR/cmd/xl-storage_test.go:1303:39-1303:52: `.Background()`
$DIR/cmd/xl-storage_test.go:1303:136-1303:145: `.Sum(nil)`
$DIR/cmd/xl-storage_test.go:1310:28-1310:85: `.Equal(data[test.offset:test.offset+test.length], buffer)`
$DIR/cmd/xl-storage_test.go:1326:20-1326:58: `.MakeVol(context.Background(), volume)`
$DIR/cmd/xl-storage_test.go:1326:36-1326:49: `.Background()`
$DIR/cmd/xl-storage_test.go:1331:13-1331:542: `.WriteFile(pathJoin(xlStorage.String(), minioMetaBucket, formatConfigFile), []byte(`{"version":"1","format":"xl","id":"592a41c2-b7cc-4130-b883-c4b5cb15965b","xl":{"version":"3","this":"randomid","sets":[["e07285a6-8c73-4962-89c6-047fb939f803","33b8d431-482d-4376-b63c-626d229f0a29","cff6513a-4439-4dc1-bcaa-56c9e880c352","randomid","9c9f21d5-1f15-4737-bce6-835faa0d9626","0a59b346-1424-4fc2-9fa2-a2e80541d0c1","7924a3dc-b69a-4971-9a2e-014966d6aebb","4d2b8dd9-4e48-444b-bdca-c89194b26042"]],"distributionAlgo":"CRCMOD"}}`), 0o644)`
$DIR/cmd/xl-storage_test.go:1331:42-1331:51: `.String()`
$DIR/cmd/xl-storage_test.go:1335:2-1335:55: `err = xlStorage.MakeVol(context.Background(), volume)`
$DIR/cmd/xl-storage_test.go:1335:17-1335:55: `.MakeVol(context.Background(), volume)`
$DIR/cmd/xl-storage_test.go:1335:33-1335:46: `.Background()`
$DIR/cmd/xl-storage_test.go:1350:20-1350:65: `.MakeVol(context.Background(), "success-vol")`
$DIR/cmd/xl-storage_test.go:1350:36-1350:49: `.Background()`
$DIR/cmd/xl-storage_test.go:1355:13-1355:80: `.Mkdir(slashpath.Join(path, "success-vol", "object-as-dir"), 0o777)`
$DIR/cmd/xl-storage_test.go:1355:29-1355:72: `.Join(path, "success-vol", "object-as-dir")`
$DIR/cmd/xl-storage_test.go:1380:21-1380:112: `.AppendFile(context.Background(), "success-vol", testCase.fileName, []byte("hello, world"))`
$DIR/cmd/xl-storage_test.go:1380:40-1380:53: `.Background()`
$DIR/cmd/xl-storage_test.go:1391:3-1391:44: `_, err = newLocalXLStorage(permDeniedDir)`
$DIR/cmd/xl-storage_test.go:1396:14-1396:42: `.Chmod(permDeniedDir, 0o755)`
$DIR/cmd/xl-storage_test.go:1400:3-1400:63: `xlStoragePermStorage, err = newLocalXLStorage(permDeniedDir)`
$DIR/cmd/xl-storage_test.go:1405:32-1405:113: `.AppendFile(context.Background(), "mybucket", "myobject", []byte("hello, world"))`
$DIR/cmd/xl-storage_test.go:1405:51-1405:64: `.Background()`
$DIR/cmd/xl-storage_test.go:1412:2-1412:87: `err = xlStorage.AppendFile(context.Background(), "bn", "yes", []byte("hello, world"))`
$DIR/cmd/xl-storage_test.go:1412:17-1412:87: `.AppendFile(context.Background(), "bn", "yes", []byte("hello, world"))`
$DIR/cmd/xl-storage_test.go:1412:36-1412:49: `.Background()`
$DIR/cmd/xl-storage_test.go:1427:21-1427:62: `.MakeVol(context.Background(), "src-vol")`
$DIR/cmd/xl-storage_test.go:1427:37-1427:50: `.Background()`
$DIR/cmd/xl-storage_test.go:1431:21-1431:63: `.MakeVol(context.Background(), "dest-vol")`
$DIR/cmd/xl-storage_test.go:1431:37-1431:50: `.Background()`
$DIR/cmd/xl-storage_test.go:1435:21-1435:98: `.AppendFile(context.Background(), "src-vol", "file1", []byte("Hello, world"))`
$DIR/cmd/xl-storage_test.go:1435:40-1435:53: `.Background()`
$DIR/cmd/xl-storage_test.go:1439:21-1439:98: `.AppendFile(context.Background(), "src-vol", "file2", []byte("Hello, world"))`
$DIR/cmd/xl-storage_test.go:1439:40-1439:53: `.Background()`
$DIR/cmd/xl-storage_test.go:1442:21-1442:98: `.AppendFile(context.Background(), "src-vol", "file3", []byte("Hello, world"))`
$DIR/cmd/xl-storage_test.go:1442:40-1442:53: `.Background()`
$DIR/cmd/xl-storage_test.go:1445:21-1445:98: `.AppendFile(context.Background(), "src-vol", "file4", []byte("Hello, world"))`
$DIR/cmd/xl-storage_test.go:1445:40-1445:53: `.Background()`
$DIR/cmd/xl-storage_test.go:1449:21-1449:98: `.AppendFile(context.Background(), "src-vol", "file5", []byte("Hello, world"))`
$DIR/cmd/xl-storage_test.go:1449:40-1449:53: `.Background()`
$DIR/cmd/xl-storage_test.go:1452:21-1452:106: `.AppendFile(context.Background(), "src-vol", "path/to/file1", []byte("Hello, world"))`
$DIR/cmd/xl-storage_test.go:1452:40-1452:53: `.Background()`
$DIR/cmd/xl-storage_test.go:1629:22-1629:127: `.RenameFile(context.Background(), testCase.srcVol, testCase.srcPath, testCase.destVol, testCase.destPath)`
$DIR/cmd/xl-storage_test.go:1629:41-1629:54: `.Background()`
$DIR/cmd/xl-storage_test.go:1642:16-1642:29: `.Background()`
$DIR/cmd/xl-storage_test.go:1646:14-1646:35: `.MakeVol(ctx, volume)`
$DIR/cmd/xl-storage_test.go:1651:3-1651:36: `versions[i] = uuid.New().String()`
$DIR/cmd/xl-storage_test.go:1651:21-1651:27: `.New()`
$DIR/cmd/xl-storage_test.go:1651:27-1651:36: `.String()`
$DIR/cmd/xl-storage_test.go:1653:90-1653:102: `.NewString()`
$DIR/cmd/xl-storage_test.go:1664:15-1664:54: `.WriteMetadata(ctx, volume, object, fi)`
$DIR/cmd/xl-storage_test.go:1670:3-1670:13: `t.Helper()`
$DIR/cmd/xl-storage_test.go:1670:4-1670:13: `.Helper()`
$DIR/cmd/xl-storage_test.go:1673:17-1673:70: `.ReadVersion(ctx, volume, object, versions[i], false)`
$DIR/cmd/xl-storage_test.go:1687:2-1687:18: `checkVerExist(t)`
$DIR/cmd/xl-storage_test.go:1688:2-1688:116: `err = xl.DeleteVersion(ctx, volume, object, FileInfo{Name: object, Volume: volume, VersionID: versions[0]}, false)`
$DIR/cmd/xl-storage_test.go:1688:10-1688:116: `.DeleteVersion(ctx, volume, object, FileInfo{Name: object, Volume: volume, VersionID: versions[0]}, false)`
$DIR/cmd/xl-storage_test.go:1692:2-1692:19: `deleted[0] = true`
$DIR/cmd/xl-storage_test.go:1693:2-1693:18: `checkVerExist(t)`
$DIR/cmd/xl-storage_test.go:1698:3-1698:108: `fis[0].Versions = append(fis[0].Versions, FileInfo{Name: object, Volume: volume, VersionID: versions[i]})`
$DIR/cmd/xl-storage_test.go:1699:3-1699:20: `deleted[i] = true`
$DIR/cmd/xl-storage_test.go:1701:12-1701:45: `.DeleteVersions(ctx, volume, fis)`
$DIR/cmd/xl-storage_test.go:1705:2-1705:18: `checkVerExist(t)`
$DIR/cmd/xl-storage_test.go:1708:2-1708:23: `fis[0].Versions = nil`
$DIR/cmd/xl-storage_test.go:1710:3-1710:108: `fis[0].Versions = append(fis[0].Versions, FileInfo{Name: object, Volume: volume, VersionID: versions[i]})`
$DIR/cmd/xl-storage_test.go:1711:3-1711:20: `deleted[i] = true`
$DIR/cmd/xl-storage_test.go:1713:2-1713:44: `errs = xl.DeleteVersions(ctx, volume, fis)`
$DIR/cmd/xl-storage_test.go:1713:11-1713:44: `.DeleteVersions(ctx, volume, fis)`
$DIR/cmd/xl-storage_test.go:1717:2-1717:18: `checkVerExist(t)`
$DIR/cmd/xl-storage_test.go:1720:15-1720:59: `.ReadVersion(ctx, volume, object, "", false)`
$DIR/cmd/xl-storage_test.go:1735:21-1735:66: `.MakeVol(context.Background(), "success-vol")`
$DIR/cmd/xl-storage_test.go:1735:37-1735:50: `.Background()`
$DIR/cmd/xl-storage_test.go:1739:21-1739:140: `.AppendFile(context.Background(), "success-vol", pathJoin("success-file", xlStorageFormatFile), []byte("Hello, world"))`
$DIR/cmd/xl-storage_test.go:1739:40-1739:53: `.Background()`
$DIR/cmd/xl-storage_test.go:1743:21-1743:148: `.AppendFile(context.Background(), "success-vol", pathJoin("path/to/success-file", xlStorageFormatFile), []byte("Hello, world"))`
$DIR/cmd/xl-storage_test.go:1743:40-1743:53: `.Background()`
$DIR/cmd/xl-storage_test.go:1747:21-1747:95: `.MakeVol(context.Background(), "success-vol/path/to/"+xlStorageFormatFile)`
$DIR/cmd/xl-storage_test.go:1747:37-1747:50: `.Background()`
$DIR/cmd/xl-storage_test.go:1808:22-1808:123: `.StatInfoFile(context.Background(), testCase.srcVol, testCase.srcPath+"/"+xlStorageFormatFile, false)`
$DIR/cmd/xl-storage_test.go:1808:43-1808:56: `.Background()`
$DIR/cmd/xl-storage_test.go:1831:19-1831:58: `.MakeVol(context.Background(), volName)`
$DIR/cmd/xl-storage_test.go:1831:35-1831:48: `.Background()`
$DIR/cmd/xl-storage_test.go:1838:19-1838:30: `.Read(data)`
$DIR/cmd/xl-storage_test.go:1842:11-1842:17: `.New()`
$DIR/cmd/xl-storage_test.go:1843:2-1843:15: `h.Write(data)`
$DIR/cmd/xl-storage_test.go:1843:3-1843:15: `.Write(data)`
$DIR/cmd/xl-storage_test.go:1844:16-1844:25: `.Sum(nil)`
$DIR/cmd/xl-storage_test.go:1845:19-1845:75: `.WriteAll(context.Background(), volName, fileName, data)`
$DIR/cmd/xl-storage_test.go:1845:36-1845:49: `.Background()`
$DIR/cmd/xl-storage_test.go:1848:19-1848:123: `.storage.bitrotVerify(context.Background(), pathJoin(path, volName, fileName), size, algo, hashBytes, 0)`
$DIR/cmd/xl-storage_test.go:1848:48-1848:61: `.Background()`
$DIR/cmd/xl-storage_test.go:1853:19-1853:84: `.AppendFile(context.Background(), volName, fileName, []byte("a"))`
$DIR/cmd/xl-storage_test.go:1853:38-1853:51: `.Background()`
$DIR/cmd/xl-storage_test.go:1858:19-1858:123: `.storage.bitrotVerify(context.Background(), pathJoin(path, volName, fileName), size, algo, hashBytes, 0)`
$DIR/cmd/xl-storage_test.go:1858:48-1858:61: `.Background()`
$DIR/cmd/xl-storage_test.go:1863:19-1863:125: `.storage.bitrotVerify(context.Background(), pathJoin(path, volName, fileName), size+1, algo, hashBytes, 0)`
$DIR/cmd/xl-storage_test.go:1863:48-1863:61: `.Background()`
$DIR/cmd/xl-storage_test.go:1867:19-1870:4: `.Delete(context.Background(), volName, fileName, DeleteOptions{
		Recursive: false,
		Force:     false,
	})`
$DIR/cmd/xl-storage_test.go:1867:34-1867:47: `.Background()`
$DIR/cmd/xl-storage_test.go:1875:2-1875:24: `algo = HighwayHash256S`
$DIR/cmd/xl-storage_test.go:1879:17-1879:33: `.NewReader(data)`
$DIR/cmd/xl-storage_test.go:1884:19-1884:31: `.Read(shard)`
$DIR/cmd/xl-storage_test.go:1885:3-1885:21: `w.Write(shard[:n])`
$DIR/cmd/xl-storage_test.go:1885:4-1885:21: `.Write(shard[:n])`
$DIR/cmd/xl-storage_test.go:1894:2-1894:23: `w.(io.Closer).Close()`
$DIR/cmd/xl-storage_test.go:1895:19-1895:125: `.storage.bitrotVerify(context.Background(), pathJoin(path, volName, fileName), size, algo, nil, shardSize)`
$DIR/cmd/xl-storage_test.go:1895:48-1895:61: `.Background()`
$DIR/cmd/xl-storage_test.go:1900:30-1900:39: `.String()`
$DIR/cmd/xl-storage_test.go:1901:14-1901:63: `.OpenFile(filePath, os.O_WRONLY|os.O_SYNC, 0o644)`
$DIR/cmd/xl-storage_test.go:1906:16-1906:54: `.WriteString(strings.Repeat("a", 256))`
$DIR/cmd/xl-storage_test.go:1906:36-1906:53: `.Repeat("a", 256)`
$DIR/cmd/xl-storage_test.go:1910:19-1910:125: `.storage.bitrotVerify(context.Background(), pathJoin(path, volName, fileName), size, algo, nil, shardSize)`
$DIR/cmd/xl-storage_test.go:1910:48-1910:61: `.Background()`
$DIR/cmd/xl-storage_test.go:1913:19-1913:127: `.storage.bitrotVerify(context.Background(), pathJoin(path, volName, fileName), size+1, algo, nil, shardSize)`
$DIR/cmd/xl-storage_test.go:1913:48-1913:61: `.Background()`
$DIR/cmd/xl-storage_test.go:1921:13-1921:23: `.TempDir()`
$DIR/cmd/xl-storage_test.go:1928:2-1928:44: `disk.MakeVol(context.Background(), volume)`
$DIR/cmd/xl-storage_test.go:1928:6-1928:44: `.MakeVol(context.Background(), volume)`
$DIR/cmd/xl-storage_test.go:1928:22-1928:35: `.Background()`
$DIR/cmd/xl-storage_test.go:1929:19-1929:88: `.readMetadata(context.Background(), pathJoin(tmpDir, volume, object))`
$DIR/cmd/xl-storage_test.go:1929:40-1929:53: `.Background()`
$DIR/cmd/xl-storage_unix_test.go:41:14-41:24: `.TempDir()`
$DIR/cmd/xl-storage_unix_test.go:58:15-58:63: `.MakeVol(context.Background(), testCase.volName)`
$DIR/cmd/xl-storage_unix_test.go:58:31-58:44: `.Background()`
$DIR/cmd/xl-storage_unix_test.go:63:15-63:58: `.Stat(path.Join(tmpPath, testCase.volName))`
$DIR/cmd/xl-storage_unix_test.go:63:25-63:57: `.Join(tmpPath, testCase.volName)`
$DIR/cmd/xl-storage_unix_test.go:69:35-69:42: `.Mode()`
$DIR/cmd/xl-storage_unix_test.go:69:42-69:49: `.Perm()`
$DIR/cmd/xl-storage_unix_test.go:79:14-79:24: `.TempDir()`
$DIR/cmd/xl-storage_unix_test.go:96:15-96:63: `.MakeVol(context.Background(), testCase.volName)`
$DIR/cmd/xl-storage_unix_test.go:96:31-96:44: `.Background()`
$DIR/cmd/xl-storage_unix_test.go:102:15-102:139: `.AppendFile(context.Background(), testCase.volName, pathJoin("hello-world.txt", xlStorageFormatFile), []byte("Hello World"))`
$DIR/cmd/xl-storage_unix_test.go:102:34-102:47: `.Background()`
$DIR/cmd/xl-storage_unix_test.go:107:19-107:119: `.StatInfoFile(context.Background(), testCase.volName, "hello-world.txt/"+xlStorageFormatFile, false)`
$DIR/cmd/xl-storage_unix_test.go:107:40-107:53: `.Background()`
$DIR/cmd/xl-storage_windows_test.go:38:16-38:42: `.Repeat([]byte("界"), 85)),`
$DIR/cmd/xl-storage_windows_test.go:40:16-40:43: `.Repeat([]byte("界"), 280)),`
$DIR/cmd/xl-storage_windows_test.go:43:10-43:20: `.TempDir()`
$DIR/cmd/xl-storage_windows_test.go:52:2-52:50: `err = fs.MakeVol(context.Background(), "voldir")`
$DIR/cmd/xl-storage_windows_test.go:52:10-52:50: `.MakeVol(context.Background(), "voldir")`
$DIR/cmd/xl-storage_windows_test.go:52:26-52:39: `.Background()`
$DIR/cmd/xl-storage_windows_test.go:58:3-69:5: `t.Run(fmt.Sprint(i), func(t *testing.T) {
			err = fs.AppendFile(context.Background(), "voldir", test.objName, []byte("hello"))
			if err != nil && test.pass {
				t.Error(err)
			} else if err == nil && !test.pass {
				t.Error(err)
			}
			fs.Delete(context.Background(), "voldir", test.objName, DeleteOptions{
				Recursive: false,
				Force:     false,
			})
		})`
$DIR/cmd/xl-storage_windows_test.go:58:4-69:5: `.Run(fmt.Sprint(i), func(t *testing.T) {
			err = fs.AppendFile(context.Background(), "voldir", test.objName, []byte("hello"))
			if err != nil && test.pass {
				t.Error(err)
			} else if err == nil && !test.pass {
				t.Error(err)
			}
			fs.Delete(context.Background(), "voldir", test.objName, DeleteOptions{
				Recursive: false,
				Force:     false,
			})
		})`
$DIR/cmd/xl-storage_windows_test.go:58:12-58:22: `.Sprint(i)`
$DIR/cmd/xl-storage_windows_test.go:59:4-59:86: `err = fs.AppendFile(context.Background(), "voldir", test.objName, []byte("hello"))`
$DIR/cmd/xl-storage_windows_test.go:59:12-59:86: `.AppendFile(context.Background(), "voldir", test.objName, []byte("hello"))`
$DIR/cmd/xl-storage_windows_test.go:59:31-59:44: `.Background()`
$DIR/cmd/xl-storage_windows_test.go:65:4-68:6: `fs.Delete(context.Background(), "voldir", test.objName, DeleteOptions{
				Recursive: false,
				Force:     false,
			})`
$DIR/cmd/xl-storage_windows_test.go:65:6-68:6: `.Delete(context.Background(), "voldir", test.objName, DeleteOptions{
				Recursive: false,
				Force:     false,
			})`
$DIR/cmd/xl-storage_windows_test.go:65:21-65:34: `.Background()`
$DIR/cmd/xl-storage_windows_test.go:76:10-76:20: `.TempDir()`
$DIR/cmd/xl-storage_windows_test.go:84:2-84:50: `err = fs.MakeVol(context.Background(), "voldir")`
$DIR/cmd/xl-storage_windows_test.go:84:10-84:50: `.MakeVol(context.Background(), "voldir")`
$DIR/cmd/xl-storage_windows_test.go:84:26-84:39: `.Background()`
$DIR/cmd/xl-storage_windows_test.go:89:2-89:79: `err = fs.AppendFile(context.Background(), "voldir", "/file", []byte("hello"))`
$DIR/cmd/xl-storage_windows_test.go:89:10-89:79: `.AppendFile(context.Background(), "voldir", "/file", []byte("hello"))`
$DIR/cmd/xl-storage_windows_test.go:89:29-89:42: `.Background()`
$DIR/cmd/xl-storage_windows_test.go:96:2-96:84: `err = fs.AppendFile(context.Background(), "voldir", "/file/obj1", []byte("hello"))`
$DIR/cmd/xl-storage_windows_test.go:96:10-96:84: `.AppendFile(context.Background(), "voldir", "/file/obj1", []byte("hello"))`
$DIR/cmd/xl-storage_windows_test.go:96:29-96:42: `.Background()`
$DIR/internal/amztime/iso8601_time_test.go:31:24-31:85: `.Date(2009, time.November, 13, 4, 51, 1, 940303531, time.UTC)`
$DIR/internal/amztime/iso8601_time_test.go:35:24-35:85: `.Date(2009, time.November, 13, 4, 51, 1, 901303531, time.UTC)`
$DIR/internal/amztime/iso8601_time_test.go:39:24-39:85: `.Date(2009, time.November, 13, 4, 51, 1, 900303531, time.UTC)`
$DIR/internal/amztime/iso8601_time_test.go:43:24-43:85: `.Date(2009, time.November, 13, 4, 51, 1, 941303531, time.UTC)`
$DIR/internal/amztime/iso8601_time_test.go:50:3-56:5: `t.Run(testCase.expectedOutput, func(t *testing.T) {
			gotOutput := ISO8601Format(testCase.date)
			t.Log("Go", testCase.date.Format(iso8601TimeFormat))
			if gotOutput != testCase.expectedOutput {
				t.Errorf("Expected %s, got %s", testCase.expectedOutput, gotOutput)
			}
		})`
$DIR/internal/amztime/iso8601_time_test.go:50:4-56:5: `.Run(testCase.expectedOutput, func(t *testing.T) {
			gotOutput := ISO8601Format(testCase.date)
			t.Log("Go", testCase.date.Format(iso8601TimeFormat))
			if gotOutput != testCase.expectedOutput {
				t.Errorf("Expected %s, got %s", testCase.expectedOutput, gotOutput)
			}
		})`
$DIR/internal/amztime/parse_test.go:28:2-32:3: `type testCase struct {
		expectedErr  error
		expectedTime time.Time
		timeStr      string
	}`
$DIR/internal/amztime/parse_test.go:41:8-41:61: `.Date(2009, time.November, 10, 23, 0, 0, 0, time.UTC)`
$DIR/internal/amztime/parse_test.go:48:3-56:5: `t.Run(testCase.timeStr, func(t *testing.T) {
			gott, goterr := Parse(testCase.timeStr)
			if !errors.Is(goterr, testCase.expectedErr) {
				t.Errorf("expected %v, got %v", testCase.expectedErr, goterr)
			}
			if !gott.Equal(testCase.expectedTime) {
				t.Errorf("expected %v, got %v", testCase.expectedTime, gott)
			}
		})`
$DIR/internal/amztime/parse_test.go:48:4-56:5: `.Run(testCase.timeStr, func(t *testing.T) {
			gott, goterr := Parse(testCase.timeStr)
			if !errors.Is(goterr, testCase.expectedErr) {
				t.Errorf("expected %v, got %v", testCase.expectedErr, goterr)
			}
			if !gott.Equal(testCase.expectedTime) {
				t.Errorf("expected %v, got %v", testCase.expectedTime, gott)
			}
		})`
$DIR/internal/amztime/parse_test.go:50:14-50:47: `.Is(goterr, testCase.expectedErr)`
$DIR/internal/amztime/parse_test.go:53:12-53:41: `.Equal(testCase.expectedTime)`
$DIR/internal/auth/credentials_test.go:39:8-39:29: `.Number("1574812326")`
$DIR/internal/auth/credentials_test.go:41:8-41:20: `.Duration(3)`
$DIR/internal/auth/credentials_test.go:46:3-54:5: `t.Run("", func(t *testing.T) {
			_, err := ExpToInt64(testCase.exp)
			if err != nil && !testCase.expectedFailure {
				t.Errorf("Expected success but got failure %s", err)
			}
			if err == nil && testCase.expectedFailure {
				t.Error("Expected failure but got success")
			}
		})`
$DIR/internal/auth/credentials_test.go:46:4-54:5: `.Run("", func(t *testing.T) {
			_, err := ExpToInt64(testCase.exp)
			if err != nil && !testCase.expectedFailure {
				t.Errorf("Expected success but got failure %s", err)
			}
			if err == nil && testCase.expectedFailure {
				t.Error("Expected failure but got success")
			}
		})`
$DIR/internal/auth/credentials_test.go:99:10-99:20: `.IsValid()`
$DIR/internal/auth/credentials_test.go:141:12-141:22: `.IsValid()`
$DIR/internal/auth/credentials_test.go:177:21-177:48: `.cred.Equal(testCase.ccred)`
$DIR/internal/bpool/bpool_test.go:31:12-31:20: `.Width()`
$DIR/internal/bpool/bpool_test.go:36:12-36:23: `.WidthCap()`
$DIR/internal/bpool/bpool_test.go:41:14-41:20: `.Get()`
$DIR/internal/bpool/bpool_test.go:49:2-49:16: `bufPool.Put(b)`
$DIR/internal/bpool/bpool_test.go:49:9-49:16: `.Put(b)`
$DIR/internal/bpool/bpool_test.go:53:3-53:39: `bufPool.Put(make([]byte, bufPool.w))`
$DIR/internal/bpool/bpool_test.go:53:10-53:39: `.Put(make([]byte, bufPool.w))`
$DIR/internal/bpool/bpool_test.go:56:2-56:19: `b = bufPool.Get()`
$DIR/internal/bpool/bpool_test.go:56:13-56:19: `.Get()`
$DIR/internal/bpool/bpool_test.go:64:2-64:16: `bufPool.Put(b)`
$DIR/internal/bpool/bpool_test.go:64:9-64:16: `.Put(b)`
$DIR/internal/bpool/bpool_test.go:67:2-67:18: `close(bufPool.c)`
$DIR/internal/bpool/bpool_test.go:76:17-76:25: `.Width()`
$DIR/internal/bpool/bpool_test.go:81:17-81:28: `.WidthCap()`
$DIR/internal/bpool/bpool_test.go:84:2-84:24: `b = bufPoolNoCap.Get()`
$DIR/internal/bpool/bpool_test.go:84:18-84:24: `.Get()`
$DIR/internal/bucket/bandwidth/monitor_test.go:31:2-36:3: `type fields struct {
		activeBuckets map[string]map[string]*bucketMeasurement
		endTime       time.Time
		update2       uint64
		endTime2      time.Time
	}`
$DIR/internal/bucket/bandwidth/monitor_test.go:37:15-37:21: `.Now()`
$DIR/internal/bucket/bandwidth/monitor_test.go:39:2-39:22: `m0.incrementBytes(0)`
$DIR/internal/bucket/bandwidth/monitor_test.go:39:4-39:22: `.incrementBytes(0)`
$DIR/internal/bucket/bandwidth/monitor_test.go:41:2-41:32: `m1MiBPS.incrementBytes(oneMiB)`
$DIR/internal/bucket/bandwidth/monitor_test.go:41:9-41:32: `.incrementBytes(oneMiB)`
$DIR/internal/bucket/bandwidth/monitor_test.go:56:20-56:41: `.Add(1 * time.Second)`
$DIR/internal/bucket/bandwidth/monitor_test.go:58:20-58:41: `.Add(2 * time.Second)`
$DIR/internal/bucket/bandwidth/monitor_test.go:68:165-68:184: `.Add(2*time.Second)`
$DIR/internal/bucket/bandwidth/monitor_test.go:68:184-68:214: `.Sub(start.Add(1*time.Second))`
$DIR/internal/bucket/bandwidth/monitor_test.go:68:194-68:213: `.Add(1*time.Second)`
$DIR/internal/bucket/bandwidth/monitor_test.go:68:214-68:224: `.Seconds()`
$DIR/internal/bucket/bandwidth/monitor_test.go:79:20-79:41: `.Add(1 * time.Second)`
$DIR/internal/bucket/bandwidth/monitor_test.go:81:20-81:41: `.Add(2 * time.Second)`
$DIR/internal/bucket/bandwidth/monitor_test.go:96:3-119:5: `t.Run(tt.name, func(t *testing.T) {
			t.Parallel()
			thr := throttle{
				NodeBandwidthPerSec: 1024 * 1024,
			}
			th := make(map[string]map[string]*throttle)
			th["bucket"] = map[string]*throttle{"arn": &thr}
			m := &Monitor{
				activeBuckets:  tt.fields.activeBuckets,
				bucketThrottle: th,
				NodeCount:      1,
			}
			m.activeBuckets["bucket"]["arn"].updateExponentialMovingAverage(tt.fields.endTime)
			got := m.GetReport(SelectBuckets())
			if !reflect.DeepEqual(got, tt.want) {
				t.Errorf("GetReport() = %v, want %v", got, tt.want)
			}
			m.activeBuckets["bucket"]["arn"].incrementBytes(tt.fields.update2)
			m.activeBuckets["bucket"]["arn"].updateExponentialMovingAverage(tt.fields.endTime2)
			got = m.GetReport(SelectBuckets())
			if !reflect.DeepEqual(got.BucketStats, tt.want2.BucketStats) {
				t.Errorf("GetReport() = %v, want %v", got.BucketStats, tt.want2.BucketStats)
			}
		})`
$DIR/internal/bucket/bandwidth/monitor_test.go:96:4-119:5: `.Run(tt.name, func(t *testing.T) {
			t.Parallel()
			thr := throttle{
				NodeBandwidthPerSec: 1024 * 1024,
			}
			th := make(map[string]map[string]*throttle)
			th["bucket"] = map[string]*throttle{"arn": &thr}
			m := &Monitor{
				activeBuckets:  tt.fields.activeBuckets,
				bucketThrottle: th,
				NodeCount:      1,
			}
			m.activeBuckets["bucket"]["arn"].updateExponentialMovingAverage(tt.fields.endTime)
			got := m.GetReport(SelectBuckets())
			if !reflect.DeepEqual(got, tt.want) {
				t.Errorf("GetReport() = %v, want %v", got, tt.want)
			}
			m.activeBuckets["bucket"]["arn"].incrementBytes(tt.fields.update2)
			m.activeBuckets["bucket"]["arn"].updateExponentialMovingAverage(tt.fields.endTime2)
			got = m.GetReport(SelectBuckets())
			if !reflect.DeepEqual(got.BucketStats, tt.want2.BucketStats) {
				t.Errorf("GetReport() = %v, want %v", got.BucketStats, tt.want2.BucketStats)
			}
		})`
$DIR/internal/bucket/bandwidth/monitor_test.go:102:4-102:52: `th["bucket"] = map[string]*throttle{"arn": &thr}`
$DIR/internal/bucket/bandwidth/monitor_test.go:108:4-108:86: `m.activeBuckets["bucket"]["arn"].updateExponentialMovingAverage(tt.fields.endTime)`
$DIR/internal/bucket/bandwidth/monitor_test.go:108:36-108:86: `.updateExponentialMovingAverage(tt.fields.endTime)`
$DIR/internal/bucket/bandwidth/monitor_test.go:109:12-109:39: `.GetReport(SelectBuckets())`
$DIR/internal/bucket/bandwidth/monitor_test.go:110:15-110:39: `.DeepEqual(got, tt.want)`
$DIR/internal/bucket/bandwidth/monitor_test.go:113:4-113:70: `m.activeBuckets["bucket"]["arn"].incrementBytes(tt.fields.update2)`
$DIR/internal/bucket/bandwidth/monitor_test.go:113:36-113:70: `.incrementBytes(tt.fields.update2)`
$DIR/internal/bucket/bandwidth/monitor_test.go:114:4-114:87: `m.activeBuckets["bucket"]["arn"].updateExponentialMovingAverage(tt.fields.endTime2)`
$DIR/internal/bucket/bandwidth/monitor_test.go:114:36-114:87: `.updateExponentialMovingAverage(tt.fields.endTime2)`
$DIR/internal/bucket/bandwidth/monitor_test.go:115:4-115:38: `got = m.GetReport(SelectBuckets())`
$DIR/internal/bucket/bandwidth/monitor_test.go:115:11-115:38: `.GetReport(SelectBuckets())`
$DIR/internal/bucket/bandwidth/monitor_test.go:116:15-116:64: `.DeepEqual(got.BucketStats, tt.want2.BucketStats)`
$DIR/internal/bucket/encryption/bucket-sse-config_test.go:96:23-96:88: `.New("only one server-side encryption rule is allowed at a time")`
$DIR/internal/bucket/encryption/bucket-sse-config_test.go:102:23-102:71: `.New("MasterKeyID is allowed with aws:kms only")`
$DIR/internal/bucket/encryption/bucket-sse-config_test.go:108:23-108:66: `.New("MasterKeyID is missing with aws:kms")`
$DIR/internal/bucket/encryption/bucket-sse-config_test.go:114:23-114:52: `.New("Unknown SSE algorithm")`
$DIR/internal/bucket/encryption/bucket-sse-config_test.go:127:23-127:74: `.New("MasterKeyID contains unsupported characters")`
$DIR/internal/bucket/encryption/bucket-sse-config_test.go:133:42-133:73: `.NewReader([]byte(tc.inputXML))`
$DIR/internal/bucket/encryption/bucket-sse-config_test.go:145:40-145:48: `.KeyID()`
$DIR/internal/bucket/encryption/bucket-sse-config_test.go:149:29-149:56: `.Marshal(tc.expectedConfig)`
$DIR/internal/bucket/encryption/bucket-sse-config_test.go:149:78-149:118: `.Equal(expectedXML, []byte(tc.inputXML))`
$DIR/internal/bucket/lifecycle/expiration_test.go:53:3-59:5: `t.Run(fmt.Sprintf("Test %d", i+1), func(t *testing.T) {
			var expiration Expiration
			err := xml.Unmarshal([]byte(tc.inputXML), &expiration)
			if err != tc.expectedErr {
				t.Fatalf("%d: Expected %v but got %v", i+1, tc.expectedErr, err)
			}
		})`
$DIR/internal/bucket/lifecycle/expiration_test.go:53:4-59:5: `.Run(fmt.Sprintf("Test %d", i+1), func(t *testing.T) {
			var expiration Expiration
			err := xml.Unmarshal([]byte(tc.inputXML), &expiration)
			if err != tc.expectedErr {
				t.Fatalf("%d: Expected %v but got %v", i+1, tc.expectedErr, err)
			}
		})`
$DIR/internal/bucket/lifecycle/expiration_test.go:53:12-53:36: `.Sprintf("Test %d", i+1)`
$DIR/internal/bucket/lifecycle/expiration_test.go:55:14-55:58: `.Unmarshal([]byte(tc.inputXML), &expiration)`
$DIR/internal/bucket/lifecycle/expiration_test.go:99:3-110:5: `t.Run(fmt.Sprintf("Test %d", i+1), func(t *testing.T) {
			var expiration Expiration
			err := xml.Unmarshal([]byte(tc.inputXML), &expiration)
			if err != nil {
				t.Fatalf("%d: %v", i+1, err)
			}

			err = expiration.Validate()
			if err != tc.expectedErr {
				t.Fatalf("%d: got: %v, expected: %v", i+1, err, tc.expectedErr)
			}
		})`
$DIR/internal/bucket/lifecycle/expiration_test.go:99:4-110:5: `.Run(fmt.Sprintf("Test %d", i+1), func(t *testing.T) {
			var expiration Expiration
			err := xml.Unmarshal([]byte(tc.inputXML), &expiration)
			if err != nil {
				t.Fatalf("%d: %v", i+1, err)
			}

			err = expiration.Validate()
			if err != tc.expectedErr {
				t.Fatalf("%d: got: %v, expected: %v", i+1, err, tc.expectedErr)
			}
		})`
$DIR/internal/bucket/lifecycle/expiration_test.go:99:12-99:36: `.Sprintf("Test %d", i+1)`
$DIR/internal/bucket/lifecycle/expiration_test.go:101:14-101:58: `.Unmarshal([]byte(tc.inputXML), &expiration)`
$DIR/internal/bucket/lifecycle/expiration_test.go:106:4-106:31: `err = expiration.Validate()`
$DIR/internal/bucket/lifecycle/expiration_test.go:106:20-106:31: `.Validate()`
$DIR/internal/bucket/lifecycle/filter_test.go:114:3-124:5: `t.Run(fmt.Sprintf("Test %d", i+1), func(t *testing.T) {
			var filter Filter
			err := xml.Unmarshal([]byte(tc.inputXML), &filter)
			if err != nil {
				t.Fatalf("%d: Expected no error but got %v", i+1, err)
			}
			err = filter.Validate()
			if err != tc.expectedErr {
				t.Fatalf("%d: Expected %v but got %v", i+1, tc.expectedErr, err)
			}
		})`
$DIR/internal/bucket/lifecycle/filter_test.go:114:4-124:5: `.Run(fmt.Sprintf("Test %d", i+1), func(t *testing.T) {
			var filter Filter
			err := xml.Unmarshal([]byte(tc.inputXML), &filter)
			if err != nil {
				t.Fatalf("%d: Expected no error but got %v", i+1, err)
			}
			err = filter.Validate()
			if err != tc.expectedErr {
				t.Fatalf("%d: Expected %v but got %v", i+1, tc.expectedErr, err)
			}
		})`
$DIR/internal/bucket/lifecycle/filter_test.go:114:12-114:36: `.Sprintf("Test %d", i+1)`
$DIR/internal/bucket/lifecycle/filter_test.go:116:14-116:54: `.Unmarshal([]byte(tc.inputXML), &filter)`
$DIR/internal/bucket/lifecycle/filter_test.go:120:4-120:27: `err = filter.Validate()`
$DIR/internal/bucket/lifecycle/filter_test.go:120:16-120:27: `.Validate()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:124:3-138:5: `t.Run(fmt.Sprintf("Test %d", i+1), func(t *testing.T) {
			lc, err := ParseLifecycleConfig(bytes.NewReader([]byte(tc.inputConfig)))
			if err != tc.expectedParsingErr {
				t.Fatalf("%d: Expected %v during parsing but got %v", i+1, tc.expectedParsingErr, err)
			}
			if tc.expectedParsingErr != nil {
				// We already expect a parsing error,
				// no need to continue this test.
				return
			}
			err = lc.Validate()
			if err != tc.expectedValidationErr {
				t.Fatalf("%d: Expected %v during validation but got %v", i+1, tc.expectedValidationErr, err)
			}
		})`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:124:4-138:5: `.Run(fmt.Sprintf("Test %d", i+1), func(t *testing.T) {
			lc, err := ParseLifecycleConfig(bytes.NewReader([]byte(tc.inputConfig)))
			if err != tc.expectedParsingErr {
				t.Fatalf("%d: Expected %v during parsing but got %v", i+1, tc.expectedParsingErr, err)
			}
			if tc.expectedParsingErr != nil {
				// We already expect a parsing error,
				// no need to continue this test.
				return
			}
			err = lc.Validate()
			if err != tc.expectedValidationErr {
				t.Fatalf("%d: Expected %v during validation but got %v", i+1, tc.expectedValidationErr, err)
			}
		})`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:124:12-124:36: `.Sprintf("Test %d", i+1)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:125:41-125:75: `.NewReader([]byte(tc.inputConfig))`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:134:4-134:23: `err = lc.Validate()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:134:12-134:23: `.Validate()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:146:35-146:84: `.Date(2019, time.April, 20, 0, 0, 0, 0, time.UTC)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:167:15-167:44: `.MarshalIndent(&lc, "", "\t")`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:172:2-172:30: `err = xml.Unmarshal(b, &lc1)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:172:11-172:30: `.Unmarshal(b, &lc1)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:179:24-179:38: `.Marshal(rule)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:183:3-183:42: `ruleSet[string(ruleBytes)] = struct{}{}`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:186:24-186:38: `.Marshal(rule)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:203:8-203:60: `.Date(2020, time.March, 15, 10, 10, 10, 0, time.UTC)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:205:8-205:57: `.Date(2020, time.March, 20, 0, 0, 0, 0, time.UTC)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:208:8-208:57: `.Date(2020, time.March, 15, 0, 0, 0, 0, time.UTC)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:210:8-210:57: `.Date(2020, time.March, 17, 0, 0, 0, 0, time.UTC)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:215:3-220:5: `t.Run(fmt.Sprintf("Test %d", i+1), func(t *testing.T) {
			got := ExpectedExpiryTime(tc.modTime, int(tc.days))
			if !got.Equal(tc.expected) {
				t.Fatalf("Expected %v to be equal to %v", got, tc.expected)
			}
		})`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:215:4-220:5: `.Run(fmt.Sprintf("Test %d", i+1), func(t *testing.T) {
			got := ExpectedExpiryTime(tc.modTime, int(tc.days))
			if !got.Equal(tc.expected) {
				t.Fatalf("Expected %v to be equal to %v", got, tc.expected)
			}
		})`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:215:12-215:36: `.Sprintf("Test %d", i+1)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:217:11-217:30: `.Equal(tc.expected)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:245:24-245:30: `.Now()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:245:30-245:36: `.UTC()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:245:36-245:62: `.Add(-10 * 24 * time.Hour)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:258:24-258:30: `.Now()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:258:30-258:36: `.UTC()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:258:36-258:62: `.Add(-10 * 24 * time.Hour)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:265:24-265:30: `.Now()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:265:30-265:36: `.UTC()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:265:36-265:62: `.Add(-10 * 24 * time.Hour)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:272:24-272:30: `.Now()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:272:30-272:36: `.UTC()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:272:36-272:62: `.Add(-10 * 24 * time.Hour)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:279:24-279:30: `.Now()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:279:30-279:36: `.UTC()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:279:36-279:61: `.Add(-6 * 24 * time.Hour)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:284:142-284:148: `.Now()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:284:148-284:154: `.UTC()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:284:154-284:177: `.Truncate(24*time.Hour)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:284:177-284:195: `.Add(24*time.Hour)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:284:195-284:216: `.Format(time.RFC3339)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:286:24-286:30: `.Now()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:286:30-286:36: `.UTC()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:286:36-286:57: `.Add(-24 * time.Hour)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:291:142-291:148: `.Now()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:291:148-291:154: `.UTC()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:291:154-291:177: `.Truncate(24*time.Hour)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:291:177-291:196: `.Add(-24*time.Hour)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:291:196-291:217: `.Format(time.RFC3339)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:293:24-293:30: `.Now()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:293:30-293:36: `.UTC()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:293:36-293:57: `.Add(-24 * time.Hour)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:298:200-298:206: `.Now()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:298:206-298:212: `.UTC()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:298:212-298:235: `.Truncate(24*time.Hour)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:298:235-298:254: `.Add(-24*time.Hour)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:298:254-298:275: `.Format(time.RFC3339)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:301:24-301:30: `.Now()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:301:30-301:36: `.UTC()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:301:36-301:57: `.Add(-24 * time.Hour)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:306:247-306:253: `.Now()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:306:253-306:276: `.Truncate(24*time.Hour)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:306:276-306:282: `.UTC()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:306:282-306:301: `.Add(-24*time.Hour)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:306:301-306:322: `.Format(time.RFC3339)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:306:504-306:510: `.Now()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:306:510-306:533: `.Truncate(24*time.Hour)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:306:533-306:539: `.UTC()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:306:539-306:558: `.Add(-24*time.Hour)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:306:558-306:579: `.Format(time.RFC3339)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:309:24-309:30: `.Now()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:309:30-309:36: `.UTC()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:309:36-309:57: `.Add(-24 * time.Hour)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:314:247-314:253: `.Now()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:314:253-314:276: `.Truncate(24*time.Hour)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:314:276-314:282: `.UTC()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:314:282-314:301: `.Add(-24*time.Hour)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:314:301-314:322: `.Format(time.RFC3339)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:317:24-317:30: `.Now()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:317:30-317:36: `.UTC()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:317:36-317:57: `.Add(-24 * time.Hour)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:322:231-322:237: `.Now()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:322:237-322:260: `.Truncate(24*time.Hour)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:322:260-322:266: `.UTC()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:322:266-322:285: `.Add(-24*time.Hour)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:322:285-322:306: `.Format(time.RFC3339)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:325:24-325:30: `.Now()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:325:30-325:36: `.UTC()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:325:36-325:57: `.Add(-24 * time.Hour)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:330:232-330:238: `.Now()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:330:238-330:261: `.Truncate(24*time.Hour)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:330:261-330:267: `.UTC()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:330:267-330:286: `.Add(-24*time.Hour)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:330:286-330:307: `.Format(time.RFC3339)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:333:24-333:30: `.Now()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:333:30-333:36: `.UTC()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:333:36-333:57: `.Add(-24 * time.Hour)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:339:199-339:205: `.Now()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:339:205-339:211: `.UTC()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:339:211-339:234: `.Truncate(24*time.Hour)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:339:234-339:253: `.Add(-24*time.Hour)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:339:253-339:274: `.Format(time.RFC3339)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:342:24-342:30: `.Now()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:342:30-342:36: `.UTC()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:342:36-342:57: `.Add(-24 * time.Hour)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:347:200-347:206: `.Now()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:347:206-347:229: `.Truncate(24*time.Hour)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:347:229-347:235: `.UTC()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:347:235-347:254: `.Add(-24*time.Hour)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:347:254-347:275: `.Format(time.RFC3339)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:350:24-350:30: `.Now()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:350:30-350:36: `.UTC()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:350:36-350:57: `.Add(-24 * time.Hour)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:355:176-355:182: `.Now()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:355:182-355:205: `.Truncate(24*time.Hour)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:355:205-355:211: `.UTC()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:355:211-355:230: `.Add(-24*time.Hour)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:355:230-355:251: `.Format(time.RFC3339)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:358:24-358:30: `.Now()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:358:30-358:36: `.UTC()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:358:36-358:57: `.Add(-24 * time.Hour)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:366:24-366:30: `.Now()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:366:30-366:36: `.UTC()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:366:36-366:57: `.Add(-48 * time.Hour)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:371:101-371:107: `.Now()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:371:107-371:130: `.Truncate(24*time.Hour)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:371:130-371:136: `.UTC()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:371:136-371:154: `.Add(24*time.Hour)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:371:154-371:175: `.Format(time.RFC3339)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:371:303-371:309: `.Now()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:371:309-371:332: `.Truncate(24*time.Hour)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:371:332-371:338: `.UTC()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:371:338-371:357: `.Add(-24*time.Hour)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:371:357-371:378: `.Format(time.RFC3339)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:373:24-373:30: `.Now()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:373:30-373:36: `.UTC()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:373:36-373:57: `.Add(-24 * time.Hour)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:378:148-378:154: `.Now()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:378:154-378:177: `.Truncate(24*time.Hour)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:378:177-378:183: `.UTC()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:378:183-378:202: `.Add(-24*time.Hour)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:378:202-378:223: `.Format(time.RFC3339)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:380:24-380:30: `.Now()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:380:30-380:36: `.UTC()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:380:36-380:57: `.Add(-24 * time.Hour)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:387:28-387:34: `.Now()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:387:34-387:40: `.UTC()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:387:40-387:60: `.Add(-1 * time.Hour)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:395:28-395:34: `.Now()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:395:34-395:40: `.UTC()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:395:40-395:61: `.Add(-12 * time.Hour)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:403:28-403:34: `.Now()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:403:34-403:40: `.UTC()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:403:40-403:66: `.Add(-10 * 24 * time.Hour)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:411:24-411:30: `.Now()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:411:30-411:56: `.Add(-1 * time.Nanosecond)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:411:56-411:62: `.UTC()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:418:32-418:38: `.Now()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:418:38-418:64: `.Add(-1 * time.Nanosecond)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:418:64-418:70: `.UTC()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:421:32-421:38: `.Now()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:421:38-421:64: `.Add(-1 * time.Nanosecond)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:421:64-421:70: `.UTC()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:422:32-422:38: `.New()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:422:38-422:47: `.String()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:428:24-428:36: `.NewString()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:429:24-429:30: `.Now()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:429:30-429:36: `.UTC()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:429:36-429:62: `.Add(-10 * 24 * time.Hour)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:436:32-436:44: `.NewString()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:437:32-437:38: `.Now()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:437:38-437:44: `.UTC()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:437:44-437:70: `.Add(-10 * 24 * time.Hour)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:438:32-438:38: `.Now()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:438:38-438:44: `.UTC()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:438:44-438:70: `.Add(-10 * 24 * time.Hour)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:466:24-466:30: `.Now()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:466:30-466:36: `.UTC()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:466:36-466:62: `.Add(-31 * 24 * time.Hour)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:494:24-494:30: `.Now()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:494:30-494:36: `.UTC()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:494:36-494:63: `.Add(-366 * 24 * time.Hour)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:529:24-529:30: `.Now()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:529:30-529:36: `.UTC()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:529:36-529:62: `.Add(-15 * 24 * time.Hour)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:536:3-553:5: `t.Run("", func(t *testing.T) {
			lc, err := ParseLifecycleConfig(bytes.NewReader([]byte(tc.inputConfig)))
			if err != nil {
				t.Fatalf("Got unexpected error: %v", err)
			}
			if res := lc.Eval(ObjectOpts{
				Name:             tc.objectName,
				UserTags:         tc.objectTags,
				ModTime:          tc.objectModTime,
				DeleteMarker:     tc.isExpiredDelMarker,
				NumVersions:      1,
				IsLatest:         !tc.isNoncurrent,
				SuccessorModTime: tc.objectSuccessorModTime,
				VersionID:        tc.versionID,
			}); res.Action != tc.expectedAction {
				t.Fatalf("Expected action: `%v`, got: `%v`", tc.expectedAction, res.Action)
			}
		})`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:536:4-553:5: `.Run("", func(t *testing.T) {
			lc, err := ParseLifecycleConfig(bytes.NewReader([]byte(tc.inputConfig)))
			if err != nil {
				t.Fatalf("Got unexpected error: %v", err)
			}
			if res := lc.Eval(ObjectOpts{
				Name:             tc.objectName,
				UserTags:         tc.objectTags,
				ModTime:          tc.objectModTime,
				DeleteMarker:     tc.isExpiredDelMarker,
				NumVersions:      1,
				IsLatest:         !tc.isNoncurrent,
				SuccessorModTime: tc.objectSuccessorModTime,
				VersionID:        tc.versionID,
			}); res.Action != tc.expectedAction {
				t.Fatalf("Expected action: `%v`, got: `%v`", tc.expectedAction, res.Action)
			}
		})`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:537:41-537:75: `.NewReader([]byte(tc.inputConfig))`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:541:16-550:6: `.Eval(ObjectOpts{
				Name:             tc.objectName,
				UserTags:         tc.objectTags,
				ModTime:          tc.objectModTime,
				DeleteMarker:     tc.isExpiredDelMarker,
				NumVersions:      1,
				IsLatest:         !tc.isNoncurrent,
				SuccessorModTime: tc.objectSuccessorModTime,
				VersionID:        tc.versionID,
			})`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:607:3-615:5: `t.Run(fmt.Sprintf("Test_%d", i+1), func(t *testing.T) {
			lc, err := ParseLifecycleConfig(bytes.NewReader([]byte(tc.inputConfig)))
			if err != nil {
				t.Fatalf("Got unexpected error: %v", err)
			}
			if got := lc.HasActiveRules(tc.prefix); got != tc.want {
				t.Fatalf("Expected result with recursive set to false: `%v`, got: `%v`", tc.want, got)
			}
		})`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:607:4-615:5: `.Run(fmt.Sprintf("Test_%d", i+1), func(t *testing.T) {
			lc, err := ParseLifecycleConfig(bytes.NewReader([]byte(tc.inputConfig)))
			if err != nil {
				t.Fatalf("Got unexpected error: %v", err)
			}
			if got := lc.HasActiveRules(tc.prefix); got != tc.want {
				t.Fatalf("Expected result with recursive set to false: `%v`, got: `%v`", tc.want, got)
			}
		})`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:607:12-607:36: `.Sprintf("Test_%d", i+1)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:608:41-608:75: `.NewReader([]byte(tc.inputConfig))`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:612:16-612:42: `.HasActiveRules(tc.prefix)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:678:16-678:30: `.NewRecorder()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:679:3-679:37: `lc.SetPredictionHeaders(w, tc.obj)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:679:5-679:37: `.SetPredictionHeaders(w, tc.obj)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:680:22-680:31: `.Header()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:680:68-680:116: `.Contains(expHdrs[0], lc.Rules[tc.expRuleID].ID)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:683:24-683:33: `.Header()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:684:15-684:67: `.Contains(transHdrs[0], lc.Rules[tc.transRuleID].ID)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:689:50-689:77: `.Transition.NextDue(tc.obj)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:689:87-689:147: `.Contains(transHdrs[0], expectedDue.Format(http.TimeFormat))`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:689:122-689:146: `.Format(http.TimeFormat)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:693:50-693:94: `.NoncurrentVersionTransition.NextDue(tc.obj)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:693:104-693:164: `.Contains(transHdrs[0], expectedDue.Format(http.TimeFormat))`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:693:139-693:163: `.Format(http.TimeFormat)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:723:13-723:19: `.Now()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:723:19-723:25: `.UTC()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:737:2-737:35: `now = now.Add(7 * 24 * time.Hour)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:737:11-737:35: `.Add(7 * 24 * time.Hour)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:739:11-739:27: `.eval(obj1, now)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:747:2-747:26: `evt = lc.eval(obj2, now)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:747:10-747:26: `.eval(obj2, now)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:791:13-791:19: `.Now()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:791:19-791:25: `.UTC()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:813:2-813:35: `now = now.Add(7 * 24 * time.Hour)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:813:11-813:35: `.Add(7 * 24 * time.Hour)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:816:11-816:27: `.eval(obj1, now)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:822:2-822:26: `evt = lc.eval(obj2, now)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:822:10-822:26: `.eval(obj2, now)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:831:2-831:26: `evt = lc.eval(obj3, now)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:831:10-831:26: `.eval(obj3, now)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:845:3-852:5: `rules = append(rules, Rule{
			ID:     strconv.Itoa(i),
			Status: "Enabled",
			NoncurrentVersionExpiration: NoncurrentVersionExpiration{
				NewerNoncurrentVersions: i,
				NoncurrentDays:          ExpirationDays(i),
			},
		})`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:846:19-846:27: `.Itoa(i)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:857:28-857:87: `.NoncurrentVersionsExpirationLimit(ObjectOpts{Name: "obj"})`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:892:13-892:51: `.NewDecoder(strings.NewReader(tc.xml))`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:892:32-892:50: `.NewReader(tc.xml)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:893:16-893:29: `.Decode(&got)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:903:12-919:57: `.NewReader([]byte(`<LifecycleConfiguration>
								  <Rule>
	                              <ID>rule-1</ID>
		                          <Filter>
		                             <Prefix>prefix</Prefix>
		                          </Filter>
		                          <Status>Enabled</Status>
		                          <Expiration><Days>3</Days></Expiration>
		                          </Rule>
		                          <Rule>
		                          <Filter>
		                             <Prefix>another-prefix</Prefix>
		                          </Filter>
		                          <Status>Enabled</Status>
		                          <Expiration><Days>3</Days></Expiration>
		                          </Rule>
		                          </LifecycleConfiguration>`))`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:959:22-959:28: `.Now()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:959:28-959:34: `.UTC()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:959:34-959:60: `.Add(-10 * 24 * time.Hour)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:970:22-970:28: `.Now()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:970:28-970:34: `.UTC()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:970:34-970:60: `.Add(-10 * 24 * time.Hour)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:980:3-993:5: `t.Run(fmt.Sprintf("test-%d", i+1), func(t *testing.T) {
			if got := tc.lc.FilterRules(tc.opts); len(got) != tc.want {
				t.Fatalf("Expected %d rules to match but got %d", tc.want, len(got))
			}
			w := httptest.NewRecorder()
			tc.lc.SetPredictionHeaders(w, tc.opts)
			expHdr, ok := w.Header()[xhttp.AmzExpiration]
			switch {
			case ok && tc.want == 0:
				t.Fatalf("Expected no rule to match but found x-amz-expiration header set: %v", expHdr)
			case !ok && tc.want > 0:
				t.Fatal("Expected x-amz-expiration header to be set but not found")
			}
		})`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:980:4-993:5: `.Run(fmt.Sprintf("test-%d", i+1), func(t *testing.T) {
			if got := tc.lc.FilterRules(tc.opts); len(got) != tc.want {
				t.Fatalf("Expected %d rules to match but got %d", tc.want, len(got))
			}
			w := httptest.NewRecorder()
			tc.lc.SetPredictionHeaders(w, tc.opts)
			expHdr, ok := w.Header()[xhttp.AmzExpiration]
			switch {
			case ok && tc.want == 0:
				t.Fatalf("Expected no rule to match but found x-amz-expiration header set: %v", expHdr)
			case !ok && tc.want > 0:
				t.Fatal("Expected x-amz-expiration header to be set but not found")
			}
		})`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:980:12-980:36: `.Sprintf("test-%d", i+1)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:981:16-981:40: `.lc.FilterRules(tc.opts)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:984:17-984:31: `.NewRecorder()`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:985:4-985:42: `tc.lc.SetPredictionHeaders(w, tc.opts)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:985:6-985:42: `.lc.SetPredictionHeaders(w, tc.opts)`
$DIR/internal/bucket/lifecycle/lifecycle_test.go:986:19-986:28: `.Header()`
$DIR/internal/bucket/lifecycle/noncurrentversion_test.go:78:15-78:28: `.n.Validate()`
$DIR/internal/bucket/lifecycle/rule_test.go:67:3-77:5: `t.Run(fmt.Sprintf("Test %d", i+1), func(t *testing.T) {
			var rule Rule
			err := xml.Unmarshal([]byte(tc.inputXML), &rule)
			if err != nil {
				t.Fatal(err)
			}

			if err := rule.Validate(); err != tc.expectedErr {
				t.Fatalf("%d: Expected %v but got %v", i+1, tc.expectedErr, err)
			}
		})`
$DIR/internal/bucket/lifecycle/rule_test.go:67:4-77:5: `.Run(fmt.Sprintf("Test %d", i+1), func(t *testing.T) {
			var rule Rule
			err := xml.Unmarshal([]byte(tc.inputXML), &rule)
			if err != nil {
				t.Fatal(err)
			}

			if err := rule.Validate(); err != tc.expectedErr {
				t.Fatalf("%d: Expected %v but got %v", i+1, tc.expectedErr, err)
			}
		})`
$DIR/internal/bucket/lifecycle/rule_test.go:67:12-67:36: `.Sprintf("Test %d", i+1)`
$DIR/internal/bucket/lifecycle/rule_test.go:69:14-69:52: `.Unmarshal([]byte(tc.inputXML), &rule)`
$DIR/internal/bucket/lifecycle/rule_test.go:74:18-74:29: `.Validate()`
$DIR/internal/bucket/lifecycle/transition_test.go:55:13-55:46: `.Unmarshal([]byte(tc.input), &tr)`
$DIR/internal/bucket/lifecycle/transition_test.go:59:14-59:25: `.Validate()`
$DIR/internal/bucket/lifecycle/transition_test.go:85:13-85:47: `.Unmarshal([]byte(tc.input), &ntr)`
$DIR/internal/bucket/lifecycle/transition_test.go:89:15-89:26: `.Validate()`
$DIR/internal/bucket/object/lock/lock_test.go:135:16-135:51: `.MarshalIndent(&tt.value, "", "\t")`
$DIR/internal/bucket/object/lock/lock_test.go:140:3-140:30: `err = xml.Unmarshal(d, &dr)`
$DIR/internal/bucket/object/lock/lock_test.go:140:12-140:30: `.Unmarshal(d, &dr)`
$DIR/internal/bucket/object/lock/lock_test.go:178:3-190:5: `t.Run("", func(t *testing.T) {
			_, err := ParseObjectLockConfig(strings.NewReader(tt.value))
			//nolint:gocritic
			if tt.expectedErr == nil {
				if err != nil {
					t.Fatalf("error: expected = <nil>, got = %v", err)
				}
			} else if err == nil {
				t.Fatalf("error: expected = %v, got = <nil>", tt.expectedErr)
			} else if tt.expectedErr.Error() != err.Error() {
				t.Fatalf("error: expected = %v, got = %v", tt.expectedErr, err)
			}
		})`
$DIR/internal/bucket/object/lock/lock_test.go:178:4-190:5: `.Run("", func(t *testing.T) {
			_, err := ParseObjectLockConfig(strings.NewReader(tt.value))
			//nolint:gocritic
			if tt.expectedErr == nil {
				if err != nil {
					t.Fatalf("error: expected = <nil>, got = %v", err)
				}
			} else if err == nil {
				t.Fatalf("error: expected = %v, got = <nil>", tt.expectedErr)
			} else if tt.expectedErr.Error() != err.Error() {
				t.Fatalf("error: expected = %v, got = %v", tt.expectedErr, err)
			}
		})`
$DIR/internal/bucket/object/lock/lock_test.go:179:43-179:63: `.NewReader(tt.value)`
$DIR/internal/bucket/object/lock/lock_test.go:223:3-235:5: `t.Run("", func(t *testing.T) {
			_, err := ParseObjectRetention(strings.NewReader(tt.value))
			//nolint:gocritic
			if tt.expectedErr == nil {
				if err != nil {
					t.Fatalf("error: expected = <nil>, got = %v", err)
				}
			} else if err == nil {
				t.Fatalf("error: expected = %v, got = <nil>", tt.expectedErr)
			} else if tt.expectedErr.Error() != err.Error() {
				t.Fatalf("error: expected = %v, got = %v", tt.expectedErr, err)
			}
		})`
$DIR/internal/bucket/object/lock/lock_test.go:223:4-235:5: `.Run("", func(t *testing.T) {
			_, err := ParseObjectRetention(strings.NewReader(tt.value))
			//nolint:gocritic
			if tt.expectedErr == nil {
				if err != nil {
					t.Fatalf("error: expected = <nil>, got = %v", err)
				}
			} else if err == nil {
				t.Fatalf("error: expected = %v, got = <nil>", tt.expectedErr)
			} else if tt.expectedErr.Error() != err.Error() {
				t.Fatalf("error: expected = %v, got = %v", tt.expectedErr, err)
			}
		})`
$DIR/internal/bucket/object/lock/lock_test.go:224:42-224:62: `.NewReader(tt.value)`
$DIR/internal/bucket/object/lock/lock_test.go:428:65-428:105: `.Date(2020, 2, 1, 12, 0, 0, 0, time.UTC)`
$DIR/internal/bucket/object/lock/lock_test.go:503:23-503:81: `.New("expected element type <Status> but have <MyStatus>")`
$DIR/internal/bucket/object/lock/lock_test.go:509:23-509:114: `.New("expected element type <LegalHold>/<ObjectLockLegalHold> but have <UnknownLegalHold>")`
$DIR/internal/bucket/object/lock/lock_test.go:519:41-519:61: `.NewReader(tt.value)`
$DIR/internal/bucket/object/lock/lock_test.go:609:14-609:40: `.DeepEqual(o, tt.metadata)`
$DIR/internal/bucket/replication/replication_test.go:150:3-167:5: `t.Run(fmt.Sprintf("Test %d", i+1), func(t *testing.T) {
			cfg, err := ParseConfig(bytes.NewReader([]byte(tc.inputConfig)))
			if err != nil && tc.expectedParsingErr != nil && err.Error() != tc.expectedParsingErr.Error() {
				t.Fatalf("%d: Expected '%v' during parsing but got '%v'", i+1, tc.expectedParsingErr, err)
			}
			if err == nil && tc.expectedParsingErr != nil {
				t.Fatalf("%d: Expected '%v' during parsing but got '%v'", i+1, tc.expectedParsingErr, err)
			}
			if tc.expectedParsingErr != nil {
				// We already expect a parsing error,
				// no need to continue this test.
				return
			}
			err = cfg.Validate(tc.destBucket, tc.sameTarget)
			if err != tc.expectedValidationErr {
				t.Fatalf("%d: Expected %v during parsing but got %v", i+1, tc.expectedValidationErr, err)
			}
		})`
$DIR/internal/bucket/replication/replication_test.go:150:4-167:5: `.Run(fmt.Sprintf("Test %d", i+1), func(t *testing.T) {
			cfg, err := ParseConfig(bytes.NewReader([]byte(tc.inputConfig)))
			if err != nil && tc.expectedParsingErr != nil && err.Error() != tc.expectedParsingErr.Error() {
				t.Fatalf("%d: Expected '%v' during parsing but got '%v'", i+1, tc.expectedParsingErr, err)
			}
			if err == nil && tc.expectedParsingErr != nil {
				t.Fatalf("%d: Expected '%v' during parsing but got '%v'", i+1, tc.expectedParsingErr, err)
			}
			if tc.expectedParsingErr != nil {
				// We already expect a parsing error,
				// no need to continue this test.
				return
			}
			err = cfg.Validate(tc.destBucket, tc.sameTarget)
			if err != tc.expectedValidationErr {
				t.Fatalf("%d: Expected %v during parsing but got %v", i+1, tc.expectedValidationErr, err)
			}
		})`
$DIR/internal/bucket/replication/replication_test.go:150:12-150:36: `.Sprintf("Test %d", i+1)`
$DIR/internal/bucket/replication/replication_test.go:151:33-151:67: `.NewReader([]byte(tc.inputConfig))`
$DIR/internal/bucket/replication/replication_test.go:163:4-163:52: `err = cfg.Validate(tc.destBucket, tc.sameTarget)`
$DIR/internal/bucket/replication/replication_test.go:163:13-163:52: `.Validate(tc.destBucket, tc.sameTarget)`
$DIR/internal/bucket/replication/replication_test.go:300:3-305:5: `t.Run(testCase.opts.Name, func(t *testing.T) {
			result := testCase.c.Replicate(testCase.opts)
			if result != testCase.expectedResult {
				t.Errorf("expected: %v, got: %v", testCase.expectedResult, result)
			}
		})`
$DIR/internal/bucket/replication/replication_test.go:300:4-305:5: `.Run(testCase.opts.Name, func(t *testing.T) {
			result := testCase.c.Replicate(testCase.opts)
			if result != testCase.expectedResult {
				t.Errorf("expected: %v, got: %v", testCase.expectedResult, result)
			}
		})`
$DIR/internal/bucket/replication/replication_test.go:301:22-301:49: `.c.Replicate(testCase.opts)`
$DIR/internal/bucket/replication/replication_test.go:356:3-367:5: `t.Run(fmt.Sprintf("Test_%d", i+1), func(t *testing.T) {
			cfg, err := ParseConfig(bytes.NewReader([]byte(tc.inputConfig)))
			if err != nil {
				t.Fatalf("Got unexpected error: %v", err)
			}
			if got := cfg.HasActiveRules(tc.prefix, false); got != tc.expectedNonRec {
				t.Fatalf("Expected result with recursive set to false: `%v`, got: `%v`", tc.expectedNonRec, got)
			}
			if got := cfg.HasActiveRules(tc.prefix, true); got != tc.expectedRec {
				t.Fatalf("Expected result with recursive set to true: `%v`, got: `%v`", tc.expectedRec, got)
			}
		})`
$DIR/internal/bucket/replication/replication_test.go:356:4-367:5: `.Run(fmt.Sprintf("Test_%d", i+1), func(t *testing.T) {
			cfg, err := ParseConfig(bytes.NewReader([]byte(tc.inputConfig)))
			if err != nil {
				t.Fatalf("Got unexpected error: %v", err)
			}
			if got := cfg.HasActiveRules(tc.prefix, false); got != tc.expectedNonRec {
				t.Fatalf("Expected result with recursive set to false: `%v`, got: `%v`", tc.expectedNonRec, got)
			}
			if got := cfg.HasActiveRules(tc.prefix, true); got != tc.expectedRec {
				t.Fatalf("Expected result with recursive set to true: `%v`, got: `%v`", tc.expectedRec, got)
			}
		})`
$DIR/internal/bucket/replication/replication_test.go:356:12-356:36: `.Sprintf("Test_%d", i+1)`
$DIR/internal/bucket/replication/replication_test.go:357:33-357:67: `.NewReader([]byte(tc.inputConfig))`
$DIR/internal/bucket/replication/replication_test.go:361:17-361:50: `.HasActiveRules(tc.prefix, false)`
$DIR/internal/bucket/replication/replication_test.go:364:17-364:49: `.HasActiveRules(tc.prefix, true)`
$DIR/internal/bucket/replication/replication_test.go:407:32-407:66: `.NewReader([]byte(tc.inputConfig))`
$DIR/internal/bucket/replication/replication_test.go:411:13-411:64: `.FilterActionableRules(ObjectOpts{Name: tc.prefix})`
$DIR/internal/bucket/replication/rule_test.go:61:3-69:5: `t.Run(fmt.Sprintf("Test_%d", i+1), func(t *testing.T) {
			cfg, err := ParseConfig(bytes.NewReader([]byte(tc.inputConfig)))
			if err != nil {
				t.Fatalf("Got unexpected error: %v", err)
			}
			if got := cfg.Rules[0].MetadataReplicate(tc.opts); got != tc.expectedResult {
				t.Fatalf("Expected result with recursive set to false: `%v`, got: `%v`", tc.expectedResult, got)
			}
		})`
$DIR/internal/bucket/replication/rule_test.go:61:4-69:5: `.Run(fmt.Sprintf("Test_%d", i+1), func(t *testing.T) {
			cfg, err := ParseConfig(bytes.NewReader([]byte(tc.inputConfig)))
			if err != nil {
				t.Fatalf("Got unexpected error: %v", err)
			}
			if got := cfg.Rules[0].MetadataReplicate(tc.opts); got != tc.expectedResult {
				t.Fatalf("Expected result with recursive set to false: `%v`, got: `%v`", tc.expectedResult, got)
			}
		})`
$DIR/internal/bucket/replication/rule_test.go:61:12-61:36: `.Sprintf("Test_%d", i+1)`
$DIR/internal/bucket/replication/rule_test.go:62:33-62:67: `.NewReader([]byte(tc.inputConfig))`
$DIR/internal/bucket/replication/rule_test.go:66:26-66:53: `.MetadataReplicate(tc.opts)`
$DIR/internal/bucket/versioning/versioning_test.go:120:3-120:52: `v, err = ParseConfig(strings.NewReader(tc.input))`
$DIR/internal/bucket/versioning/versioning_test.go:120:31-120:51: `.NewReader(tc.input)`
$DIR/internal/bucket/versioning/versioning_test.go:129:15-129:26: `.Validate()`
$DIR/internal/bucket/versioning/versioning_test.go:141:7-141:22: `mismatch = true`
$DIR/internal/bucket/versioning/versioning_test.go:162:17-162:28: `.Marshal(v)`
$DIR/internal/bucket/versioning/versioning_test.go:168:12-168:46: `.Contains(str, "ExcludedPrefixes")`
$DIR/internal/bucket/versioning/versioning_test.go:175:6-175:16: `.Enabled()`
$DIR/internal/bucket/versioning/versioning_test.go:178:6-178:18: `.Suspended()`
$DIR/internal/bucket/versioning/versioning_test.go:190:7-190:29: `.PrefixEnabled(prefix)`
$DIR/internal/bucket/versioning/versioning_test.go:190:35-190:59: `.PrefixSuspended(prefix)`
$DIR/internal/bucket/versioning/versioning_test.go:196:35-196:57: `.PrefixEnabled(prefix)`
$DIR/internal/bucket/versioning/versioning_test.go:196:62-196:86: `.PrefixSuspended(prefix)`
$DIR/internal/bucket/versioning/versioning_test.go:201:2-201:26: `v.ExcludeFolders = false`
$DIR/internal/bucket/versioning/versioning_test.go:203:8-203:30: `.PrefixEnabled(prefix)`
$DIR/internal/bucket/versioning/versioning_test.go:203:35-203:59: `.PrefixSuspended(prefix)`
$DIR/internal/bucket/versioning/versioning_test.go:215:13-215:24: `.Validate()`
$DIR/internal/bucket/versioning/versioning_test.go:233:7-233:36: `.PrefixSuspended(test.prefix)`
$DIR/internal/config/bool-flag_test.go:38:18-38:32: `.flag.String()`
$DIR/internal/config/bool-flag_test.go:59:22-59:41: `.flag.MarshalJSON()`
$DIR/internal/config/bool-flag_test.go:87:17-87:46: `.UnmarshalJSON(testCase.data)`
$DIR/internal/config/cache/config_test.go:43:3-47:123: `testCases = append(testCases, struct {
			driveStr         string
			expectedPatterns []string
			success          bool
		}{"C:/home/drive1;C:/home/drive2;C:/home/drive3", []string{"C:/home/drive1", "C:/home/drive2", "C:/home/drive3"}, true})`
$DIR/internal/config/cache/config_test.go:48:3-52:99: `testCases = append(testCases, struct {
			driveStr         string
			expectedPatterns []string
			success          bool
		}{"C:/home/drive{1...3}", []string{"C:/home/drive1", "C:/home/drive2", "C:/home/drive3"}, true})`
$DIR/internal/config/cache/config_test.go:53:3-57:47: `testCases = append(testCases, struct {
			driveStr         string
			expectedPatterns []string
			success          bool
		}{"C:/home/drive{1..3}", []string{}, false})`
$DIR/internal/config/cache/config_test.go:59:3-63:111: `testCases = append(testCases, struct {
			driveStr         string
			expectedPatterns []string
			success          bool
		}{"/home/drive1;/home/drive2;/home/drive3", []string{"/home/drive1", "/home/drive2", "/home/drive3"}, true})`
$DIR/internal/config/cache/config_test.go:64:3-68:111: `testCases = append(testCases, struct {
			driveStr         string
			expectedPatterns []string
			success          bool
		}{"/home/drive1,/home/drive2,/home/drive3", []string{"/home/drive1", "/home/drive2", "/home/drive3"}, true})`
$DIR/internal/config/cache/config_test.go:69:3-73:91: `testCases = append(testCases, struct {
			driveStr         string
			expectedPatterns []string
			success          bool
		}{"/home/drive{1...3}", []string{"/home/drive1", "/home/drive2", "/home/drive3"}, true})`
$DIR/internal/config/cache/config_test.go:74:3-78:45: `testCases = append(testCases, struct {
			driveStr         string
			expectedPatterns []string
			success          bool
		}{"/home/drive{1..3}", []string{}, false})`
$DIR/internal/config/cache/config_test.go:89:15-89:60: `.DeepEqual(drives, testCase.expectedPatterns)`
$DIR/internal/config/cache/config_test.go:123:15-123:62: `.DeepEqual(excludes, testCase.expectedPatterns)`
$DIR/internal/config/certs_test.go:49:10-49:28: `.Remove(tempFile1)`
$DIR/internal/config/certs_test.go:71:10-71:28: `.Remove(tempFile2)`
$DIR/internal/config/certs_test.go:93:10-93:28: `.Remove(tempFile3)`
$DIR/internal/config/certs_test.go:115:10-115:28: `.Remove(tempFile4)`
$DIR/internal/config/certs_test.go:153:10-153:28: `.Remove(tempFile5)`
$DIR/internal/config/certs_test.go:183:2-185:4: `t.Cleanup(func() {
		os.Unsetenv(EnvCertPassword)
	})`
$DIR/internal/config/certs_test.go:183:3-185:4: `.Cleanup(func() {
		os.Unsetenv(EnvCertPassword)
	})`
$DIR/internal/config/certs_test.go:184:3-184:31: `os.Unsetenv(EnvCertPassword)`
$DIR/internal/config/certs_test.go:184:5-184:31: `.Unsetenv(EnvCertPassword)`
$DIR/internal/config/certs_test.go:193:4-193:25: `os.Remove(privateKey)`
$DIR/internal/config/certs_test.go:193:6-193:25: `.Remove(privateKey)`
$DIR/internal/config/certs_test.go:198:4-198:48: `t.Setenv(EnvCertPassword, testCase.password)`
$DIR/internal/config/certs_test.go:198:5-198:48: `.Setenv(EnvCertPassword, testCase.password)`
$DIR/internal/config/certs_test.go:200:3-200:52: `_, err = LoadX509KeyPair(certificate, privateKey)`
$DIR/internal/config/certs_test.go:207:3-207:24: `os.Remove(privateKey)`
$DIR/internal/config/certs_test.go:207:5-207:24: `.Remove(privateKey)`
$DIR/internal/config/certs_test.go:208:3-208:25: `os.Remove(certificate)`
$DIR/internal/config/certs_test.go:208:5-208:25: `.Remove(certificate)`
$DIR/internal/config/compress/compress_test.go:45:3-56:5: `t.Run(testCase.str, func(t *testing.T) {
			gotPatterns, err := parseCompressIncludes(testCase.str)
			if !testCase.success && err == nil {
				t.Error("expected failure but success instead")
			}
			if testCase.success && err != nil {
				t.Errorf("expected success but failed instead %s", err)
			}
			if testCase.success && !reflect.DeepEqual(testCase.expectedPatterns, gotPatterns) {
				t.Errorf("expected patterns %s but got %s", testCase.expectedPatterns, gotPatterns)
			}
		})`
$DIR/internal/config/compress/compress_test.go:45:4-56:5: `.Run(testCase.str, func(t *testing.T) {
			gotPatterns, err := parseCompressIncludes(testCase.str)
			if !testCase.success && err == nil {
				t.Error("expected failure but success instead")
			}
			if testCase.success && err != nil {
				t.Errorf("expected success but failed instead %s", err)
			}
			if testCase.success && !reflect.DeepEqual(testCase.expectedPatterns, gotPatterns) {
				t.Errorf("expected patterns %s but got %s", testCase.expectedPatterns, gotPatterns)
			}
		})`
$DIR/internal/config/compress/compress_test.go:53:35-53:85: `.DeepEqual(testCase.expectedPatterns, gotPatterns)`
$DIR/internal/config/config_test.go:92:3-105:5: `t.Run("", func(t *testing.T) {
			gotFields := kvFields(test.input, test.keys)
			if len(gotFields) != len(test.expectedFields) {
				t.Errorf("Expected keys %d, found %d", len(test.expectedFields), len(gotFields))
			}
			found := true
			for _, field := range gotFields {
				_, ok := test.expectedFields[field]
				found = found && ok
			}
			if !found {
				t.Errorf("Expected %s, got %s", test.expectedFields, gotFields)
			}
		})`
$DIR/internal/config/config_test.go:92:4-105:5: `.Run("", func(t *testing.T) {
			gotFields := kvFields(test.input, test.keys)
			if len(gotFields) != len(test.expectedFields) {
				t.Errorf("Expected keys %d, found %d", len(test.expectedFields), len(gotFields))
			}
			found := true
			for _, field := range gotFields {
				_, ok := test.expectedFields[field]
				found = found && ok
			}
			if !found {
				t.Errorf("Expected %s, got %s", test.expectedFields, gotFields)
			}
		})`
$DIR/internal/config/config_test.go:100:5-100:24: `found = found && ok`
$DIR/internal/config/config_test.go:124:3-129:5: `t.Run(test.name, func(t *testing.T) {
			ok := validRegionRegex.MatchString(test.name)
			if test.success != ok {
				t.Errorf("Expected %t, got %t", test.success, ok)
			}
		})`
$DIR/internal/config/config_test.go:124:4-129:5: `.Run(test.name, func(t *testing.T) {
			ok := validRegionRegex.MatchString(test.name)
			if test.success != ok {
				t.Errorf("Expected %t, got %t", test.success, ok)
			}
		})`
$DIR/internal/config/config_test.go:125:26-125:49: `.MatchString(test.name)`
$DIR/internal/config/crypto_test.go:52:17-52:98: `.DecodeString("ddedadb867afa3f73bd33c25499a723ed7f9f51172ee7b1b679e08dc795debcc")`
$DIR/internal/config/crypto_test.go:56:17-56:36: `.New("my-key", key)`
$DIR/internal/config/crypto_test.go:62:40-62:61: `.NewReader(test.Data)`
$DIR/internal/config/crypto_test.go:66:18-66:38: `.ReadAll(ciphertext)`
$DIR/internal/config/crypto_test.go:71:39-71:55: `.NewReader(data)`
$DIR/internal/config/crypto_test.go:75:3-75:36: `data, err = io.ReadAll(plaintext)`
$DIR/internal/config/crypto_test.go:75:17-75:36: `.ReadAll(plaintext)`
$DIR/internal/config/crypto_test.go:80:12-80:35: `.Equal(data, test.Data)`
$DIR/internal/config/etcd/etcd_test.go:53:3-69:5: `t.Run(testCase.s, func(t *testing.T) {
			endpoints, secure, err := parseEndpoints(testCase.s)
			if err != nil && testCase.success {
				t.Errorf("expected to succeed but failed with %s", err)
			}
			if !testCase.success && err == nil {
				t.Error("expected failure but succeeded instead")
			}
			if testCase.success {
				if !reflect.DeepEqual(endpoints, testCase.endpoints) {
					t.Errorf("expected %s, got %s", testCase.endpoints, endpoints)
				}
				if secure != testCase.secure {
					t.Errorf("expected %t, got %t", testCase.secure, secure)
				}
			}
		})`
$DIR/internal/config/etcd/etcd_test.go:53:4-69:5: `.Run(testCase.s, func(t *testing.T) {
			endpoints, secure, err := parseEndpoints(testCase.s)
			if err != nil && testCase.success {
				t.Errorf("expected to succeed but failed with %s", err)
			}
			if !testCase.success && err == nil {
				t.Error("expected failure but succeeded instead")
			}
			if testCase.success {
				if !reflect.DeepEqual(endpoints, testCase.endpoints) {
					t.Errorf("expected %s, got %s", testCase.endpoints, endpoints)
				}
				if secure != testCase.secure {
					t.Errorf("expected %t, got %t", testCase.secure, secure)
				}
			}
		})`
$DIR/internal/config/etcd/etcd_test.go:62:16-62:57: `.DeepEqual(endpoints, testCase.endpoints)`
$DIR/internal/config/identity/openid/jwks_test.go:31:2-31:4780: `const jsonkey = `{"keys":[{"kty":"RSA","use":"sig","kid":"SsZsBNhZcF3Q9S4trpQBTByNRRI","x5t":"SsZsBNhZcF3Q9S4trpQBTByNRRI","n":"uHPewhg4WC3eLVPkEFlj7RDtaKYWXCI5G-LPVzsMKOuIu7qQQbeytIA6P6HT9_iIRt8zNQvuw4P9vbNjgUCpI6vfZGsjk3XuCVoB_bAIhvuBcQh9ePH2yEwS5reR-NrG1PsqzobnZZuigKCoDmuOb_UDx1DiVyNCbMBlEG7UzTQwLf5NP6HaRHx027URJeZvPAWY7zjHlSOuKoS_d1yUveaBFIgZqPWLCg44ck4gvik45HsNVWT9zYfT74dvUSSrMSR-SHFT7Hy1XjbVXpHJHNNAXpPoGoWXTuc0BxMsB4cqjfJqoftFGOG4x32vEzakArLPxAKwGvkvu0jToAyvSQ","e":"AQAB","x5c":"MIIDBTCCAe2gAwIBAgIQWHw7h/Ysh6hPcXpnrJ0N8DANBgkqhkiG9w0BAQsFADAtMSswKQYDVQQDEyJhY2NvdW50cy5hY2Nlc3Njb250cm9sLndpbmRvd3MubmV0MB4XDTIwMDQyNzAwMDAwMFoXDTI1MDQyNzAwMDAwMFowLTErMCkGA1UEAxMiYWNjb3VudHMuYWNjZXNzY29udHJvbC53aW5kb3dzLm5ldDCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBALhz3sIYOFgt3i1T5BBZY+0Q7WimFlwiORviz1c7DCjriLu6kEG3srSAOj+h0/f4iEbfMzUL7sOD/b2zY4FAqSOr32RrI5N17glaAf2wCIb7gXEIfXjx9shMEua3kfjaxtT7Ks6G52WbooCgqA5rjm/1A8dQ4lcjQmzAZRBu1M00MC3+TT+h2kR8dNu1ESXmbzwFmO84x5UjriqEv3dclL3mgRSIGaj1iwoOOHJOIL4pOOR7DVVk/c2H0++Hb1EkqzEkfkhxU+x8tV421V6RyRzTQF6T6BqFl07nNAcTLAeHKo3yaqH7RRjhuMd9rxM2pAKyz8QCsBr5L7tI06AMr0kCAwEAAaMhMB8wHQYDVR0OBBYEFOI7M+DDFMlP7Ac3aomPnWo1QL1SMA0GCSqGSIb3DQEBCwUAA4IBAQBv+8rBiDY8sZDBoUDYwFQM74QjqCmgNQfv5B0Vjwg20HinERjQeH24uAWzyhWN9++FmeY4zcRXDY5UNmB0nJz7UGlprA9s7voQ0Lkyiud0DO072RPBg38LmmrqoBsLb3MB9MZ2CGBaHftUHfpdTvrgmXSP0IJn7mCUq27g+hFk7n/MLbN1k8JswEODIgdMRvGqN+mnrPKkviWmcVAZccsWfcmS1pKwXqICTKzd6WmVdz+cL7ZSd9I2X0pY4oRwauoE2bS95vrXljCYgLArI3XB2QcnglDDBRYu3Z3aIJb26PTIyhkVKT7xaXhXl4OgrbmQon9/O61G2dzpjzzBPqNP","issuer":"https://login.microsoftonline.com/906aefe9-76a7-4f65-b82d-5ec20775d5aa/v2.0"},{"kty":"RSA","use":"sig","kid":"huN95IvPfehq34GzBDZ1GXGirnM","x5t":"huN95IvPfehq34GzBDZ1GXGirnM","n":"6lldKm5Rc_vMKa1RM_TtUv3tmtj52wLRrJqu13yGM3_h0dwru2ZP53y65wDfz6_tLCjoYuRCuVsjoW37-0zXUORJvZ0L90CAX-58lW7NcE4bAzA1pXv7oR9kQw0X8dp0atU4HnHeaTU8LZxcjJO79_H9cxgwa-clKfGxllcos8TsuurM8xi2dx5VqwzqNMB2s62l3MTN7AzctHUiQCiX2iJArGjAhs-mxS1wmyMIyOSipdodhjQWRAcseW-aFVyRTFVi8okl2cT1HJjPXdx0b1WqYSOzeRdrrLUcA0oR2Tzp7xzOYJZSGNnNLQqa9f6h6h52XbX0iAgxKgEDlRpbJw","e":"AQAB","x5c":["MIIDBTCCAe2gAwIBAgIQPCxFbySVSLZOggeWRzBWOjANBgkqhkiG9w0BAQsFADAtMSswKQYDVQQDEyJhY2NvdW50cy5hY2Nlc3Njb250cm9sLndpbmRvd3MubmV0MB4XDTIwMDYwNzAwMDAwMFoXDTI1MDYwNzAwMDAwMFowLTErMCkGA1UEAxMiYWNjb3VudHMuYWNjZXNzY29udHJvbC53aW5kb3dzLm5ldDCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAOpZXSpuUXP7zCmtUTP07VL97ZrY+dsC0ayartd8hjN/4dHcK7tmT+d8uucA38+v7Swo6GLkQrlbI6Ft+/tM11DkSb2dC/dAgF/ufJVuzXBOGwMwNaV7+6EfZEMNF/HadGrVOB5x3mk1PC2cXIyTu/fx/XMYMGvnJSnxsZZXKLPE7LrqzPMYtnceVasM6jTAdrOtpdzEzewM3LR1IkAol9oiQKxowIbPpsUtcJsjCMjkoqXaHYY0FkQHLHlvmhVckUxVYvKJJdnE9RyYz13cdG9VqmEjs3kXa6y1HANKEdk86e8czmCWUhjZzS0KmvX+oeoedl219IgIMSoBA5UaWycCAwEAAaMhMB8wHQYDVR0OBBYEFFXP0ODFhjf3RS6oRijM5Tb+yB8CMA0GCSqGSIb3DQEBCwUAA4IBAQB9GtVikLTbJWIu5x9YCUTTKzNhi44XXogP/v8VylRSUHI5YTMdnWwvDIt/Y1sjNonmSy9PrioEjcIiI1U8nicveafMwIq5VLn+gEY2lg6KDJAzgAvA88CXqwfHHvtmYBovN7goolp8TY/kddMTf6TpNzN3lCTM2MK4Ye5xLLVGdp4bqWCOJ/qjwDxpTRSydYIkLUDwqNjv+sYfOElJpYAB4rTL/aw3ChJ1iaA4MtXEt6OjbUtbOa21lShfLzvNRbYK3+ukbrhmRl9lemJEeUls51vPuIe+jg+Ssp43aw7PQjxt4/MpfNMS2BfZ5F8GVSVG7qNb352cLLeJg5rc398Z"],"issuer":"https://login.microsoftonline.com/906aefe9-76a7-4f65-b82d-5ec20775d5aa/v2.0"},{"kty":"RSA","use":"sig","kid":"M6pX7RHoraLsprfJeRCjSxuURhc","x5t":"M6pX7RHoraLsprfJeRCjSxuURhc","n":"xHScZMPo8FifoDcrgncWQ7mGJtiKhrsho0-uFPXg-OdnRKYudTD7-Bq1MDjcqWRf3IfDVjFJixQS61M7wm9wALDj--lLuJJ9jDUAWTA3xWvQLbiBM-gqU0sj4mc2lWm6nPfqlyYeWtQcSC0sYkLlayNgX4noKDaXivhVOp7bwGXq77MRzeL4-9qrRYKjuzHfZL7kNBCsqO185P0NI2Jtmw-EsqYsrCaHsfNRGRrTvUHUq3hWa859kK_5uNd7TeY2ZEwKVD8ezCmSfR59ZzyxTtuPpkCSHS9OtUvS3mqTYit73qcvprjl3R8hpjXLb8oftfpWr3hFRdpxrwuoQEO4QQ","e":"AQAB","x5c":["MIIC8TCCAdmgAwIBAgIQfEWlTVc1uINEc9RBi6qHMjANBgkqhkiG9w0BAQsFADAjMSEwHwYDVQQDExhsb2dpbi5taWNyb3NvZnRvbmxpbmUudXMwHhcNMTgxMDE0MDAwMDAwWhcNMjAxMDE0MDAwMDAwWjAjMSEwHwYDVQQDExhsb2dpbi5taWNyb3NvZnRvbmxpbmUudXMwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDEdJxkw+jwWJ+gNyuCdxZDuYYm2IqGuyGjT64U9eD452dEpi51MPv4GrUwONypZF/ch8NWMUmLFBLrUzvCb3AAsOP76Uu4kn2MNQBZMDfFa9AtuIEz6CpTSyPiZzaVabqc9+qXJh5a1BxILSxiQuVrI2BfiegoNpeK+FU6ntvAZervsxHN4vj72qtFgqO7Md9kvuQ0EKyo7Xzk/Q0jYm2bD4SypiysJoex81EZGtO9QdSreFZrzn2Qr/m413tN5jZkTApUPx7MKZJ9Hn1nPLFO24+mQJIdL061S9LeapNiK3vepy+muOXdHyGmNctvyh+1+laveEVF2nGvC6hAQ7hBAgMBAAGjITAfMB0GA1UdDgQWBBQ5TKadw06O0cvXrQbXW0Nb3M3h/DANBgkqhkiG9w0BAQsFAAOCAQEAI48JaFtwOFcYS/3pfS5+7cINrafXAKTL+/+he4q+RMx4TCu/L1dl9zS5W1BeJNO2GUznfI+b5KndrxdlB6qJIDf6TRHh6EqfA18oJP5NOiKhU4pgkF2UMUw4kjxaZ5fQrSoD9omjfHAFNjradnHA7GOAoF4iotvXDWDBWx9K4XNZHWvD11Td66zTg5IaEQDIZ+f8WS6nn/98nAVMDtR9zW7Te5h9kGJGfe6WiHVaGRPpBvqC4iypGHjbRwANwofZvmp5wP08hY1CsnKY5tfP+E2k/iAQgKKa6QoxXToYvP7rsSkglak8N5g/+FJGnq4wP6cOzgZpjdPMwaVt5432GA=="],"issuer":"https://login.microsoftonline.com/906aefe9-76a7-4f65-b82d-5ec20775d5aa/v2.0"}]}``
$DIR/internal/config/identity/openid/jwks_test.go:34:16-34:48: `.Unmarshal([]byte(jsonkey), &jk)`
$DIR/internal/config/identity/openid/jwks_test.go:42:16-42:34: `.DecodePublicKey()`
$DIR/internal/config/identity/openid/jwks_test.go:46:3-46:31: `kids = append(kids, jks.Kid)`
$DIR/internal/config/identity/openid/jwks_test.go:55:2-70:8: `const jsonkey = `{"keys":
       [
         {"kty":"EC",
          "crv":"P-256",
          "x":"MKBCTNIcKUSDii11ySs3526iDZ8AiTo7Tu6KPAqv7D4",
          "y":"4Etl6SRW2YiLUrN5vfvVHuhp7x8PxltmWWlbbM4IFyM",
          "use":"enc",
          "kid":"1"},

         {"kty":"RSA",
          "n": "0vx7agoebGcQSuuPiLJXZptN9nndrQmbXEps2aiAFbWhM78LhWx4cbbfAAtVT86zwu1RK7aPFFxuhDR1L6tSoc_BJECPebWKRXjBZCiFV4n3oknjhMstn64tZ_2W-5JsGY4Hc5n9yBXArwl93lqt7_RN5w6Cf0h4QyQ5v-65YGjQR0_FDW2QvzqY368QQMicAtaSqzs8KJZgnYb9c7d0zgdAZHzu6qMQvRL5hajrn1n91CbOpbISD08qNLyrdkt-bFTWhAI4vMQFh6WeZu0fM4lFd2NcRwr3XPksINHaQ-G_xBniIqbw0Ls1jF44-csFCur-kEgU8awapJzKnqDKgw",
          "e":"AQAB",
          "alg":"RS256",
          "kid":"2011-04-29"}
       ]
     }``
$DIR/internal/config/identity/openid/jwks_test.go:73:16-73:48: `.Unmarshal([]byte(jsonkey), &jk)`
$DIR/internal/config/identity/openid/jwks_test.go:82:3-82:40: `keys[ii], err = jks.DecodePublicKey()`
$DIR/internal/config/identity/openid/jwks_test.go:82:22-82:40: `.DecodePublicKey()`
$DIR/internal/config/identity/openid/jwks_test.go:93:34-93:41: `.P256()`
$DIR/internal/config/identity/openid/jwks_test.go:95:18-99:4: `.Equal(key0.X.Bytes(), []byte{
		0x30, 0xa0, 0x42, 0x4c, 0xd2,
		0x1c, 0x29, 0x44, 0x83, 0x8a, 0x2d, 0x75, 0xc9, 0x2b, 0x37, 0xe7, 0x6e, 0xa2,
		0xd, 0x9f, 0x0, 0x89, 0x3a, 0x3b, 0x4e, 0xee, 0x8a, 0x3c, 0xa, 0xaf, 0xec, 0x3e,
	})`
$DIR/internal/config/identity/openid/jwks_test.go:95:29-95:39: `.X.Bytes()`
$DIR/internal/config/identity/openid/jwks_test.go:101:18-106:4: `.Equal(key0.Y.Bytes(), []byte{
		0xe0, 0x4b, 0x65, 0xe9, 0x24,
		0x56, 0xd9, 0x88, 0x8b, 0x52, 0xb3, 0x79, 0xbd, 0xfb, 0xd5, 0x1e, 0xe8,
		0x69, 0xef, 0x1f, 0xf, 0xc6, 0x5b, 0x66, 0x59, 0x69, 0x5b, 0x6c, 0xce,
		0x8, 0x17, 0x23,
	})`
$DIR/internal/config/identity/openid/jwks_test.go:101:29-101:39: `.Y.Bytes()`
$DIR/internal/config/identity/openid/jwks_test.go:110:18-131:4: `.Equal(key1.N.Bytes(), []byte{
		0xd2, 0xfc, 0x7b, 0x6a, 0xa, 0x1e,
		0x6c, 0x67, 0x10, 0x4a, 0xeb, 0x8f, 0x88, 0xb2, 0x57, 0x66, 0x9b, 0x4d, 0xf6,
		0x79, 0xdd, 0xad, 0x9, 0x9b, 0x5c, 0x4a, 0x6c, 0xd9, 0xa8, 0x80, 0x15, 0xb5,
		0xa1, 0x33, 0xbf, 0xb, 0x85, 0x6c, 0x78, 0x71, 0xb6, 0xdf, 0x0, 0xb, 0x55,
		0x4f, 0xce, 0xb3, 0xc2, 0xed, 0x51, 0x2b, 0xb6, 0x8f, 0x14, 0x5c, 0x6e, 0x84,
		0x34, 0x75, 0x2f, 0xab, 0x52, 0xa1, 0xcf, 0xc1, 0x24, 0x40, 0x8f, 0x79, 0xb5,
		0x8a, 0x45, 0x78, 0xc1, 0x64, 0x28, 0x85, 0x57, 0x89, 0xf7, 0xa2, 0x49, 0xe3,
		0x84, 0xcb, 0x2d, 0x9f, 0xae, 0x2d, 0x67, 0xfd, 0x96, 0xfb, 0x92, 0x6c, 0x19,
		0x8e, 0x7, 0x73, 0x99, 0xfd, 0xc8, 0x15, 0xc0, 0xaf, 0x9, 0x7d, 0xde, 0x5a,
		0xad, 0xef, 0xf4, 0x4d, 0xe7, 0xe, 0x82, 0x7f, 0x48, 0x78, 0x43, 0x24, 0x39,
		0xbf, 0xee, 0xb9, 0x60, 0x68, 0xd0, 0x47, 0x4f, 0xc5, 0xd, 0x6d, 0x90, 0xbf,
		0x3a, 0x98, 0xdf, 0xaf, 0x10, 0x40, 0xc8, 0x9c, 0x2, 0xd6, 0x92, 0xab, 0x3b,
		0x3c, 0x28, 0x96, 0x60, 0x9d, 0x86, 0xfd, 0x73, 0xb7, 0x74, 0xce, 0x7, 0x40,
		0x64, 0x7c, 0xee, 0xea, 0xa3, 0x10, 0xbd, 0x12, 0xf9, 0x85, 0xa8, 0xeb, 0x9f,
		0x59, 0xfd, 0xd4, 0x26, 0xce, 0xa5, 0xb2, 0x12, 0xf, 0x4f, 0x2a, 0x34, 0xbc,
		0xab, 0x76, 0x4b, 0x7e, 0x6c, 0x54, 0xd6, 0x84, 0x2, 0x38, 0xbc, 0xc4, 0x5, 0x87,
		0xa5, 0x9e, 0x66, 0xed, 0x1f, 0x33, 0x89, 0x45, 0x77, 0x63, 0x5c, 0x47, 0xa,
		0xf7, 0x5c, 0xf9, 0x2c, 0x20, 0xd1, 0xda, 0x43, 0xe1, 0xbf, 0xc4, 0x19, 0xe2,
		0x22, 0xa6, 0xf0, 0xd0, 0xbb, 0x35, 0x8c, 0x5e, 0x38, 0xf9, 0xcb, 0x5, 0xa, 0xea,
		0xfe, 0x90, 0x48, 0x14, 0xf1, 0xac, 0x1a, 0xa4, 0x9c, 0xca, 0x9e, 0xa0, 0xca, 0x83,
	})`
$DIR/internal/config/identity/openid/jwks_test.go:110:29-110:39: `.N.Bytes()`
$DIR/internal/config/identity/openid/jwt_test.go:57:8-57:29: `.Number("1574812326")`
$DIR/internal/config/identity/openid/jwt_test.go:59:8-59:20: `.Duration(3)`
$DIR/internal/config/identity/openid/jwt_test.go:64:3-74:5: `t.Run("", func(t *testing.T) {
			claims := map[string]interface{}{}
			claims["exp"] = testCase.exp
			err := updateClaimsExpiry(testCase.dsecs, claims)
			if err != nil && !testCase.expectedFailure {
				t.Errorf("Expected success, got failure %s", err)
			}
			if err == nil && testCase.expectedFailure {
				t.Error("Expected failure, got success")
			}
		})`
$DIR/internal/config/identity/openid/jwt_test.go:64:4-74:5: `.Run("", func(t *testing.T) {
			claims := map[string]interface{}{}
			claims["exp"] = testCase.exp
			err := updateClaimsExpiry(testCase.dsecs, claims)
			if err != nil && !testCase.expectedFailure {
				t.Errorf("Expected success, got failure %s", err)
			}
			if err == nil && testCase.expectedFailure {
				t.Error("Expected failure, got success")
			}
		})`
$DIR/internal/config/identity/openid/jwt_test.go:66:4-66:32: `claims["exp"] = testCase.exp`
$DIR/internal/config/identity/openid/jwt_test.go:106:16-106:41: `.SigningMethodHS256.Alg()`
$DIR/internal/config/identity/openid/jwt_test.go:111:19-111:87: `.SignedString([]byte("WNGvKVyyNmXq0TraSvjaDN9CtpFgx35IXtGEffMCPR0"))`
$DIR/internal/config/identity/openid/jwt_test.go:115:2-115:20: `fmt.Println(token)`
$DIR/internal/config/identity/openid/jwt_test.go:115:5-115:20: `.Println(token)`
$DIR/internal/config/identity/openid/jwt_test.go:117:17-117:42: `.ParseHTTPURL(server.URL)`
$DIR/internal/config/identity/openid/jwt_test.go:126:2-126:108: `pubKeys.add("76b95ae5-33ef-4283-97b7-d2a85dc2d8f4", []byte("WNGvKVyyNmXq0TraSvjaDN9CtpFgx35IXtGEffMCPR0"))`
$DIR/internal/config/identity/openid/jwt_test.go:126:9-126:108: `.add("76b95ae5-33ef-4283-97b7-d2a85dc2d8f4", []byte("WNGvKVyyNmXq0TraSvjaDN9CtpFgx35IXtGEffMCPR0"))`
$DIR/internal/config/identity/openid/jwt_test.go:136:2-136:24: `provider.JWKS.URL = u1`
$DIR/internal/config/identity/openid/jwt_test.go:152:14-152:82: `.Validate(context.Background(), DummyRoleARN, token, "", "", claims)`
$DIR/internal/config/identity/openid/jwt_test.go:152:31-152:44: `.Background()`
$DIR/internal/config/identity/openid/jwt_test.go:158:2-166:8: `const jsonkey = `{"keys":
       [
         {"kty":"RSA",
          "n": "0vx7agoebGcQSuuPiLJXZptN9nndrQmbXEps2aiAFbWhM78LhWx4cbbfAAtVT86zwu1RK7aPFFxuhDR1L6tSoc_BJECPebWKRXjBZCiFV4n3oknjhMstn64tZ_2W-5JsGY4Hc5n9yBXArwl93lqt7_RN5w6Cf0h4QyQ5v-65YGjQR0_FDW2QvzqY368QQMicAtaSqzs8KJZgnYb9c7d0zgdAZHzu6qMQvRL5hajrn1n91CbOpbISD08qNLyrdkt-bFTWhAI4vMQFh6WeZu0fM4lFd2NcRwr3XPksINHaQ-G_xBniIqbw0Ls1jF44-csFCur-kEgU8awapJzKnqDKgw",
          "e":"AQAB",
          "alg":"RS256",
          "kid":"2011-04-29"}
       ]
     }``
$DIR/internal/config/identity/openid/jwt_test.go:172:16-172:62: `.parseAndAdd(bytes.NewBuffer([]byte(jsonkey)))`
$DIR/internal/config/identity/openid/jwt_test.go:172:34-172:61: `.NewBuffer([]byte(jsonkey))`
$DIR/internal/config/identity/openid/jwt_test.go:180:17-180:55: `.ParseHTTPURL("http://127.0.0.1:8443")`
$DIR/internal/config/identity/openid/jwt_test.go:186:2-186:24: `provider.JWKS.URL = u1`
$DIR/internal/config/identity/openid/jwt_test.go:198:15-198:61: `.Parse("http://127.0.0.1:8443/?Token=invalid")`
$DIR/internal/config/identity/openid/jwt_test.go:204:14-204:99: `.Validate(context.Background(), DummyRoleARN, u.Query().Get("Token"), "", "", claims)`
$DIR/internal/config/identity/openid/jwt_test.go:204:31-204:44: `.Background()`
$DIR/internal/config/identity/openid/jwt_test.go:204:61-204:69: `.Query()`
$DIR/internal/config/identity/openid/jwt_test.go:204:69-204:82: `.Get("Token")`
$DIR/internal/config/identity/openid/jwt_test.go:217:18-217:31: `.Duration(60)`
$DIR/internal/config/identity/openid/jwt_test.go:233:18-233:32: `.Duration(901)`
$DIR/internal/config/identity/openid/jwt_test.go:238:16-238:39: `.Parse(testCase.reqURL)`
$DIR/internal/config/identity/openid/jwt_test.go:242:35-242:43: `.Query()`
$DIR/internal/config/identity/openid/jwt_test.go:242:43-242:66: `.Get("DurationSeconds")`
$DIR/internal/config/identity/openid/jwt_test.go:254:22-254:223: `.StdEncoding.DecodeString("NTNv7j0TuYARvmNMmWXo6fKvM4o6nv/aUi9ryX38ZH+L1bkrnD1ObOQ8JAUmHCBq7Iy7otZcyAagBLHVKvvYaIpmMuxmARQ97jUVG16Jkpkp1wXOPsrF9zwew6TpczyHkHgX5EuLg2MeBuiT/qJACs1J0apruOOJCg/gOtkjB4c=")`
$DIR/internal/config/identity/openid/jwt_test.go:256:19-256:34: `.NewMapClaims()`
$DIR/internal/config/identity/openid/jwt_test.go:257:2-257:50: `claimsMap.SetExpiry(time.Now().Add(time.Minute))`
$DIR/internal/config/identity/openid/jwt_test.go:257:11-257:50: `.SetExpiry(time.Now().Add(time.Minute))`
$DIR/internal/config/identity/openid/jwt_test.go:257:26-257:32: `.Now()`
$DIR/internal/config/identity/openid/jwt_test.go:257:32-257:49: `.Add(time.Minute)`
$DIR/internal/config/identity/openid/jwt_test.go:258:2-258:39: `claimsMap.SetAccessKey("test-access")`
$DIR/internal/config/identity/openid/jwt_test.go:258:11-258:39: `.SetAccessKey("test-access")`
$DIR/internal/config/identity/openid/jwt_test.go:263:15-263:65: `.NewWithClaims(jwtg.SigningMethodHS256, claimsMap)`
$DIR/internal/config/identity/openid/jwt_test.go:264:27-264:49: `.SignedString(signKey)`
$DIR/internal/config/identity/openid/jwt_test.go:270:12-272:4: `.ParseWithClaims(tokenString, claimsMap, func(*jwtm.MapClaims) ([]byte, error) {
		return signKey, nil
	})`
$DIR/internal/config/identity/openid/jwt_test.go:285:2-285:33: `testKvs.Set(Vendor, "keycloak")`
$DIR/internal/config/identity/openid/jwt_test.go:285:9-285:33: `.Set(Vendor, "keycloak")`
$DIR/internal/config/identity/openid/jwt_test.go:286:2-286:41: `testKvs.Set(KeyCloakRealm, "TestRealm")`
$DIR/internal/config/identity/openid/jwt_test.go:286:9-286:41: `.Set(KeyCloakRealm, "TestRealm")`
$DIR/internal/config/identity/openid/jwt_test.go:287:2-287:66: `testKvs.Set(KeyCloakAdminURL, "http://keycloak.test/auth/admin")`
$DIR/internal/config/identity/openid/jwt_test.go:287:9-287:66: `.Set(KeyCloakAdminURL, "http://keycloak.test/auth/admin")`
$DIR/internal/config/identity/openid/jwt_test.go:289:17-289:28: `.Get(param)`
$DIR/internal/config/identity/openid/jwt_test.go:296:22-296:72: `.initializeProvider(cfgGet, http.DefaultTransport)`
$DIR/internal/config/lambda/event/arn_test.go:35:21-35:34: `.arn.String()`
$DIR/internal/config/lambda/event/targetid_test.go:36:21-36:34: `.tid.String()`
$DIR/internal/config/lambda/event/targetid_test.go:56:18-56:45: `.tid.ToARN(testCase.region)`
$DIR/internal/config/lambda/event/targetid_test.go:76:24-76:42: `.tid.MarshalJSON()`
$DIR/internal/config/lambda/event/targetid_test.go:84:15-84:54: `.DeepEqual(data, testCase.expectedData)`
$DIR/internal/config/lambda/event/targetid_test.go:105:18-105:47: `.UnmarshalJSON(testCase.data)`
$DIR/internal/config/lambda/event/targetidset_test.go:36:21-36:33: `.set.Clone()`
$DIR/internal/config/lambda/event/targetidset_test.go:38:14-38:46: `.DeepEqual(result, testCase.set)`
$DIR/internal/config/lambda/event/targetidset_test.go:42:3-42:37: `result.add(testCase.targetIDToAdd)`
$DIR/internal/config/lambda/event/targetidset_test.go:42:9-42:37: `.add(testCase.targetIDToAdd)`
$DIR/internal/config/lambda/event/targetidset_test.go:43:13-43:45: `.DeepEqual(result, testCase.set)`
$DIR/internal/config/lambda/event/targetidset_test.go:63:21-63:50: `.set.Union(testCase.setToAdd)`
$DIR/internal/config/lambda/event/targetidset_test.go:65:14-65:57: `.DeepEqual(testCase.expectedResult, result)`
$DIR/internal/config/lambda/event/targetidset_test.go:85:21-85:58: `.set.Difference(testCase.setToRemove)`
$DIR/internal/config/lambda/event/targetidset_test.go:87:14-87:57: `.DeepEqual(testCase.expectedResult, result)`
$DIR/internal/config/lambda/event/targetidset_test.go:106:14-106:57: `.DeepEqual(testCase.expectedResult, result)`
$DIR/internal/config/storageclass/storage-class_test.go:51:10-51:63: `.New("Unsupported scheme AB. Supported scheme is EC")`
$DIR/internal/config/storageclass/storage-class_test.go:58:10-58:45: `.New("Too many sections in EC:4:5")`
$DIR/internal/config/storageclass/storage-class_test.go:65:10-65:59: `.New(`strconv.Atoi: parsing "A": invalid syntax`)`
$DIR/internal/config/storageclass/storage-class_test.go:72:10-72:40: `.New("Too few sections in AB")`
$DIR/internal/config/storageclass/storage-class_test.go:85:41-85:69: `.DeepEqual(gotSc, tt.wantSc)`
$DIR/internal/config/storageclass/storage-class_test.go:149:4-149:23: `scfg.RRS.Parity = 7`
$DIR/internal/config/storageclass/storage-class_test.go:153:4-153:28: `scfg.Standard.Parity = 6`
$DIR/internal/config/storageclass/storage-class_test.go:157:4-157:28: `scfg.Standard.Parity = 7`
$DIR/internal/config/storageclass/storage-class_test.go:159:17-159:39: `.GetParityForSC(tt.sc)`
$DIR/internal/crypto/header_test.go:36:3-36:46: `got = got && S3KMS.IsRequested(test.Header)`
$DIR/internal/crypto/header_test.go:36:21-36:46: `.IsRequested(test.Header)`
$DIR/internal/crypto/header_test.go:47:3-47:43: `got = got && S3.IsRequested(test.Header)`
$DIR/internal/crypto/header_test.go:47:18-47:43: `.IsRequested(test.Header)`
$DIR/internal/crypto/header_test.go:58:3-58:45: `got = got && SSEC.IsRequested(test.Header)`
$DIR/internal/crypto/header_test.go:58:20-58:45: `.IsRequested(test.Header)`
$DIR/internal/crypto/header_test.go:93:18-93:43: `.IsRequested(test.Header)`
$DIR/internal/crypto/header_test.go:139:21-139:44: `.ParseHTTP(test.Header)`
$DIR/internal/crypto/header_test.go:162:15-162:40: `.IsRequested(test.Header)`
$DIR/internal/crypto/header_test.go:180:15-180:38: `.ParseHTTP(test.Header)`
$DIR/internal/crypto/header_test.go:222:17-222:42: `.IsRequested(test.Header)`
$DIR/internal/crypto/header_test.go:264:20-264:45: `.IsRequested(test.Header)`
$DIR/internal/crypto/header_test.go:335:19-335:42: `.ParseHTTP(test.Header)`
$DIR/internal/crypto/header_test.go:414:22-414:45: `.ParseHTTP(test.Header)`
$DIR/internal/crypto/header_test.go:501:4-501:19: `sort.Strings(v)`
$DIR/internal/crypto/header_test.go:501:8-501:19: `.Strings(v)`
$DIR/internal/crypto/header_test.go:502:4-502:19: `sort.Strings(u)`
$DIR/internal/crypto/header_test.go:502:8-502:19: `.Strings(u)`
$DIR/internal/crypto/header_test.go:526:4-526:20: `metadata[k] = ""`
$DIR/internal/crypto/header_test.go:529:3-529:38: `RemoveSensitiveHeaders(test.Header)`
$DIR/internal/crypto/header_test.go:533:3-533:35: `RemoveSensitiveEntries(metadata)`
$DIR/internal/crypto/key_test.go:52:34-52:60: `logger.MinimumLogLevel = l`
$DIR/internal/crypto/key_test.go:53:2-53:42: `logger.MinimumLogLevel = logger.ErrorLvl`
$DIR/internal/crypto/key_test.go:57:3-63:6: `func() {
			defer recoverTest(i, test.ShouldPass, t)
			key := GenerateKey(test.ExtKey[:], test.Random)
			if [32]byte(key) == [32]byte{} {
				t.Errorf("Test %d: generated key is zero key", i) // check that we generate random and unique key
			}
		}()`
$DIR/internal/crypto/key_test.go:78:34-78:60: `logger.MinimumLogLevel = l`
$DIR/internal/crypto/key_test.go:79:2-79:42: `logger.MinimumLogLevel = logger.ErrorLvl`
$DIR/internal/crypto/key_test.go:83:3-89:6: `func() {
			defer recoverTest(i, test.ShouldPass, t)
			iv := GenerateIV(test.Random)
			if iv == [32]byte{} {
				t.Errorf("Test %d: generated IV is zero IV", i) // check that we generate random and unique IV
			}
		}()`
$DIR/internal/crypto/key_test.go:132:19-132:108: `.Seal(test.SealExtKey[:], test.SealIV, test.SealDomain, test.SealBucket, test.SealObject)`
$DIR/internal/crypto/key_test.go:133:16-133:113: `.Unseal(test.UnsealExtKey[:], sealedKey, test.UnsealDomain, test.UnsealBucket, test.UnsealObject)`
$DIR/internal/crypto/key_test.go:143:18-143:68: `.Seal(extKey[:], iv, "SSE-S3", "bucket", "object")`
$DIR/internal/crypto/key_test.go:144:2-144:45: `sealedKey.Algorithm = InsecureSealAlgorithm`
$DIR/internal/crypto/key_test.go:145:15-145:74: `.Unseal(extKey[:], sealedKey, "SSE-S3", "bucket", "object")`
$DIR/internal/crypto/key_test.go:162:30-162:57: `.DecodeString(test.PartKey)`
$DIR/internal/crypto/key_test.go:166:17-166:44: `.DerivePartKey(test.PartID)`
$DIR/internal/crypto/key_test.go:167:12-167:47: `.Equal(partKey[:], expectedPartKey)`
$DIR/internal/crypto/key_test.go:183:3-183:19: `key[i] = byte(i)`
$DIR/internal/crypto/key_test.go:186:18-186:37: `.DecodeString(etag)`
$DIR/internal/crypto/key_test.go:190:20-190:34: `.SealETag(tag)`
$DIR/internal/crypto/key_test.go:191:27-191:50: `.UnsealETag(sealedETag)`
$DIR/internal/crypto/key_test.go:195:12-195:37: `.Equal(unsealedETag, tag)`
$DIR/internal/crypto/metadata_test.go:88:23-88:50: `.IsEncrypted(test.Metadata)`
$DIR/internal/crypto/metadata_test.go:111:25-111:52: `.IsEncrypted(test.Metadata)`
$DIR/internal/crypto/metadata_test.go:193:39-193:68: `.ParseMetadata(test.Metadata)`
$DIR/internal/crypto/metadata_test.go:205:12-205:41: `.Equal(dataKey, test.DataKey)`
$DIR/internal/crypto/metadata_test.go:214:12-214:59: `.Equal(sealedKey.Key[:], test.SealedKey.Key[:])`
$DIR/internal/crypto/metadata_test.go:217:12-217:57: `.Equal(sealedKey.IV[:], test.SealedKey.IV[:])`
$DIR/internal/crypto/metadata_test.go:280:25-280:54: `.ParseMetadata(test.Metadata)`
$DIR/internal/crypto/metadata_test.go:295:12-295:59: `.Equal(sealedKey.Key[:], test.SealedKey.Key[:])`
$DIR/internal/crypto/metadata_test.go:298:12-298:57: `.Equal(sealedKey.IV[:], test.SealedKey.IV[:])`
$DIR/internal/crypto/metadata_test.go:316:34-316:60: `logger.MinimumLogLevel = l`
$DIR/internal/crypto/metadata_test.go:317:2-317:42: `logger.MinimumLogLevel = logger.ErrorLvl`
$DIR/internal/crypto/metadata_test.go:319:17-319:85: `.CreateMetadata(nil, test.KeyID, test.SealedDataKey, test.SealedKey)`
$DIR/internal/crypto/metadata_test.go:320:38-320:62: `.ParseMetadata(metadata)`
$DIR/internal/crypto/metadata_test.go:328:12-328:46: `.Equal(kmsKey, test.SealedDataKey)`
$DIR/internal/crypto/metadata_test.go:334:12-334:57: `.Equal(sealedKey.IV[:], test.SealedKey.IV[:])`
$DIR/internal/crypto/metadata_test.go:337:12-337:59: `.Equal(sealedKey.Key[:], test.SealedKey.Key[:])`
$DIR/internal/crypto/metadata_test.go:347:8-347:87: `.CreateMetadata(nil, "", []byte{}, SealedKey{Algorithm: InsecureSealAlgorithm})`
$DIR/internal/crypto/metadata_test.go:361:34-361:60: `logger.MinimumLogLevel = l`
$DIR/internal/crypto/metadata_test.go:362:2-362:42: `logger.MinimumLogLevel = logger.ErrorLvl`
$DIR/internal/crypto/metadata_test.go:364:19-364:55: `.CreateMetadata(nil, test.SealedKey)`
$DIR/internal/crypto/metadata_test.go:365:25-365:49: `.ParseMetadata(metadata)`
$DIR/internal/crypto/metadata_test.go:373:12-373:57: `.Equal(sealedKey.IV[:], test.SealedKey.IV[:])`
$DIR/internal/crypto/metadata_test.go:376:12-376:59: `.Equal(sealedKey.Key[:], test.SealedKey.Key[:])`
$DIR/internal/crypto/metadata_test.go:386:10-386:75: `.CreateMetadata(nil, SealedKey{Algorithm: InsecureSealAlgorithm})`
$DIR/internal/crypto/metadata_test.go:401:19-401:43: `.DecodeString(test.ETag)`
$DIR/internal/crypto/metadata_test.go:454:3-454:39: `RemoveInternalEntries(test.Metadata)`
$DIR/internal/crypto/sse_test.go:26:2-26:25: `const Domain = "SSE-S3"`
$DIR/internal/crypto/sse_test.go:27:17-27:26: `.String()`
$DIR/internal/crypto/sse_test.go:33:2-33:24: `const Domain = "SSE-C"`
$DIR/internal/crypto/sse_test.go:34:19-34:28: `.String()`
$DIR/internal/crypto/sse_test.go:108:20-108:91: `.UnsealObjectKey(test.Headers, test.Metadata, test.Bucket, test.Object)`
$DIR/internal/crypto/sse_test.go:183:23-183:94: `.UnsealObjectKey(test.Headers, test.Metadata, test.Bucket, test.Object)`
$DIR/internal/deadlineconn/deadlineconn_test.go:31:15-31:44: `.Listen("tcp", "localhost:0")`
$DIR/internal/deadlineconn/deadlineconn_test.go:36:17-36:24: `.Addr()`
$DIR/internal/deadlineconn/deadlineconn_test.go:36:24-36:33: `.String()`
$DIR/internal/deadlineconn/deadlineconn_test.go:44:2-44:11: `wg.Add(1)`
$DIR/internal/deadlineconn/deadlineconn_test.go:44:4-44:11: `.Add(1)`
$DIR/internal/deadlineconn/deadlineconn_test.go:46:11-46:18: `.Done()`
$DIR/internal/deadlineconn/deadlineconn_test.go:48:31-48:43: `.AcceptTCP()`
$DIR/internal/deadlineconn/deadlineconn_test.go:54:3-54:45: `deadlineconn.WithReadDeadline(time.Second)`
$DIR/internal/deadlineconn/deadlineconn_test.go:54:15-54:45: `.WithReadDeadline(time.Second)`
$DIR/internal/deadlineconn/deadlineconn_test.go:55:3-55:46: `deadlineconn.WithWriteDeadline(time.Second)`
$DIR/internal/deadlineconn/deadlineconn_test.go:55:15-55:46: `.WithWriteDeadline(time.Second)`
$DIR/internal/deadlineconn/deadlineconn_test.go:60:3-60:33: `_, terr = deadlineconn.Read(b)`
$DIR/internal/deadlineconn/deadlineconn_test.go:60:25-60:33: `.Read(b)`
$DIR/internal/deadlineconn/deadlineconn_test.go:72:3-72:30: `time.Sleep(3 * time.Second)`
$DIR/internal/deadlineconn/deadlineconn_test.go:72:7-72:30: `.Sleep(3 * time.Second)`
$DIR/internal/deadlineconn/deadlineconn_test.go:74:3-74:33: `_, terr = deadlineconn.Read(b)`
$DIR/internal/deadlineconn/deadlineconn_test.go:74:25-74:33: `.Read(b)`
$DIR/internal/deadlineconn/deadlineconn_test.go:79:3-79:23: `received = string(b)`
$DIR/internal/deadlineconn/deadlineconn_test.go:86:3-86:64: `_, terr = io.WriteString(deadlineconn, "messages received\n")`
$DIR/internal/deadlineconn/deadlineconn_test.go:86:15-86:64: `.WriteString(deadlineconn, "messages received\n")`
$DIR/internal/deadlineconn/deadlineconn_test.go:93:15-93:39: `.Dial("tcp", serverAddr)`
$DIR/internal/deadlineconn/deadlineconn_test.go:99:2-99:45: `_, err = io.WriteString(c, "message one\n")`
$DIR/internal/deadlineconn/deadlineconn_test.go:99:13-99:45: `.WriteString(c, "message one\n")`
$DIR/internal/deadlineconn/deadlineconn_test.go:103:2-103:45: `_, err = io.WriteString(c, "message two\n")`
$DIR/internal/deadlineconn/deadlineconn_test.go:103:13-103:45: `.WriteString(c, "message two\n")`
$DIR/internal/deadlineconn/deadlineconn_test.go:108:24-108:37: `.NewReader(c)`
$DIR/internal/deadlineconn/deadlineconn_test.go:108:37-108:54: `.ReadString('\n')`
$DIR/internal/disk/disk_test.go:30:17-30:38: `.GetInfo(t.TempDir())`
$DIR/internal/disk/disk_test.go:30:27-30:37: `.TempDir()`
$DIR/internal/dsync/drwmutex_test.go:178:15-178:50: `.GOMAXPROCS(runtime.GOMAXPROCS(-1))`
$DIR/internal/dsync/drwmutex_test.go:178:34-178:49: `.GOMAXPROCS(-1)`
$DIR/internal/dsync/drwmutex_test.go:179:2-179:29: `doTestParallelReaders(1, 4)`
$DIR/internal/dsync/drwmutex_test.go:180:2-180:29: `doTestParallelReaders(3, 4)`
$DIR/internal/dsync/drwmutex_test.go:246:15-246:50: `.GOMAXPROCS(runtime.GOMAXPROCS(-1))`
$DIR/internal/dsync/drwmutex_test.go:246:34-246:49: `.GOMAXPROCS(-1)`
$DIR/internal/dsync/drwmutex_test.go:248:12-248:20: `.Short()`
$DIR/internal/dsync/drwmutex_test.go:249:3-249:8: `n = 5`
$DIR/internal/dsync/drwmutex_test.go:251:2-251:27: `hammerRWMutex(t, 1, 1, n)`
$DIR/internal/dsync/drwmutex_test.go:252:2-252:27: `hammerRWMutex(t, 1, 3, n)`
$DIR/internal/dsync/drwmutex_test.go:253:2-253:28: `hammerRWMutex(t, 1, 10, n)`
$DIR/internal/dsync/drwmutex_test.go:254:2-254:27: `hammerRWMutex(t, 4, 1, n)`
$DIR/internal/dsync/drwmutex_test.go:255:2-255:27: `hammerRWMutex(t, 4, 3, n)`
$DIR/internal/dsync/drwmutex_test.go:256:2-256:28: `hammerRWMutex(t, 4, 10, n)`
$DIR/internal/dsync/drwmutex_test.go:257:2-257:28: `hammerRWMutex(t, 10, 1, n)`
$DIR/internal/dsync/drwmutex_test.go:258:2-258:28: `hammerRWMutex(t, 10, 3, n)`
$DIR/internal/dsync/drwmutex_test.go:259:2-259:29: `hammerRWMutex(t, 10, 10, n)`
$DIR/internal/dsync/drwmutex_test.go:271:19-271:32: `.Background()`
$DIR/internal/dsync/drwmutex_test.go:281:3-281:35: `mu.RUnlock(context.Background())`
$DIR/internal/dsync/drwmutex_test.go:281:5-281:35: `.RUnlock(context.Background())`
$DIR/internal/dsync/drwmutex_test.go:281:21-281:34: `.Background()`
$DIR/internal/dsync/drwmutex_test.go:283:2-283:22: `mu.RLock(id, source)`
$DIR/internal/dsync/drwmutex_test.go:283:4-283:22: `.RLock(id, source)`
$DIR/internal/dsync/drwmutex_test.go:284:19-284:32: `.Background()`
$DIR/internal/dsync/drwmutex_test.go:295:20-295:33: `.Background()`
$DIR/internal/dsync/drwmutex_test.go:305:3-305:34: `mu.Unlock(context.Background())`
$DIR/internal/dsync/drwmutex_test.go:305:5-305:34: `.Unlock(context.Background())`
$DIR/internal/dsync/drwmutex_test.go:305:20-305:33: `.Background()`
$DIR/internal/dsync/drwmutex_test.go:307:2-307:21: `mu.Lock(id, source)`
$DIR/internal/dsync/drwmutex_test.go:307:4-307:21: `.Lock(id, source)`
$DIR/internal/dsync/drwmutex_test.go:308:20-308:33: `.Background()`
$DIR/internal/dsync/dsync_test.go:41:2-41:20: `startLockServers()`
$DIR/internal/dsync/dsync_test.go:46:3-46:49: `clnts = append(clnts, newClient(nodes[i].URL))`
$DIR/internal/dsync/dsync_test.go:50:64-50:70: `.New()`
$DIR/internal/dsync/dsync_test.go:50:70-50:79: `.String()`
$DIR/internal/dsync/dsync_test.go:59:11-59:17: `.Run()`
$DIR/internal/dsync/dsync_test.go:60:2-60:19: `stopLockServers()`
$DIR/internal/dsync/dsync_test.go:67:2-67:21: `dm.Lock(id, source)`
$DIR/internal/dsync/dsync_test.go:67:4-67:21: `.Lock(id, source)`
$DIR/internal/dsync/dsync_test.go:70:2-70:44: `time.Sleep(testDrwMutexRefreshCallTimeout)`
$DIR/internal/dsync/dsync_test.go:70:6-70:44: `.Sleep(testDrwMutexRefreshCallTimeout)`
$DIR/internal/dsync/dsync_test.go:72:19-72:32: `.Background()`
$DIR/internal/dsync/dsync_test.go:78:2-78:21: `dm.Lock(id, source)`
$DIR/internal/dsync/dsync_test.go:78:4-78:21: `.Lock(id, source)`
$DIR/internal/dsync/dsync_test.go:79:2-79:70: `time.Sleep(time.Duration(10+(rand.Float32()*50)) * time.Millisecond)`
$DIR/internal/dsync/dsync_test.go:79:6-79:70: `.Sleep(time.Duration(10+(rand.Float32()*50)) * time.Millisecond)`
$DIR/internal/dsync/dsync_test.go:79:17-79:50: `.Duration(10+(rand.Float32()*50))`
$DIR/internal/dsync/dsync_test.go:79:35-79:45: `.Float32()`
$DIR/internal/dsync/dsync_test.go:80:2-80:33: `dm.Unlock(context.Background())`
$DIR/internal/dsync/dsync_test.go:80:4-80:33: `.Unlock(context.Background())`
$DIR/internal/dsync/dsync_test.go:80:19-80:32: `.Background()`
$DIR/internal/dsync/dsync_test.go:82:2-82:21: `dm.Lock(id, source)`
$DIR/internal/dsync/dsync_test.go:82:4-82:21: `.Lock(id, source)`
$DIR/internal/dsync/dsync_test.go:83:2-83:70: `time.Sleep(time.Duration(10+(rand.Float32()*50)) * time.Millisecond)`
$DIR/internal/dsync/dsync_test.go:83:6-83:70: `.Sleep(time.Duration(10+(rand.Float32()*50)) * time.Millisecond)`
$DIR/internal/dsync/dsync_test.go:83:17-83:50: `.Duration(10+(rand.Float32()*50))`
$DIR/internal/dsync/dsync_test.go:83:35-83:45: `.Float32()`
$DIR/internal/dsync/dsync_test.go:84:2-84:33: `dm.Unlock(context.Background())`
$DIR/internal/dsync/dsync_test.go:84:4-84:33: `.Unlock(context.Background())`
$DIR/internal/dsync/dsync_test.go:84:19-84:32: `.Background()`
$DIR/internal/dsync/dsync_test.go:86:2-86:21: `dm.Lock(id, source)`
$DIR/internal/dsync/dsync_test.go:86:4-86:21: `.Lock(id, source)`
$DIR/internal/dsync/dsync_test.go:87:2-87:70: `time.Sleep(time.Duration(10+(rand.Float32()*50)) * time.Millisecond)`
$DIR/internal/dsync/dsync_test.go:87:6-87:70: `.Sleep(time.Duration(10+(rand.Float32()*50)) * time.Millisecond)`
$DIR/internal/dsync/dsync_test.go:87:17-87:50: `.Duration(10+(rand.Float32()*50))`
$DIR/internal/dsync/dsync_test.go:87:35-87:45: `.Float32()`
$DIR/internal/dsync/dsync_test.go:88:2-88:33: `dm.Unlock(context.Background())`
$DIR/internal/dsync/dsync_test.go:88:4-88:33: `.Unlock(context.Background())`
$DIR/internal/dsync/dsync_test.go:88:19-88:32: `.Background()`
$DIR/internal/dsync/dsync_test.go:90:2-90:21: `dm.Lock(id, source)`
$DIR/internal/dsync/dsync_test.go:90:4-90:21: `.Lock(id, source)`
$DIR/internal/dsync/dsync_test.go:91:2-91:70: `time.Sleep(time.Duration(10+(rand.Float32()*50)) * time.Millisecond)`
$DIR/internal/dsync/dsync_test.go:91:6-91:70: `.Sleep(time.Duration(10+(rand.Float32()*50)) * time.Millisecond)`
$DIR/internal/dsync/dsync_test.go:91:17-91:50: `.Duration(10+(rand.Float32()*50))`
$DIR/internal/dsync/dsync_test.go:91:35-91:45: `.Float32()`
$DIR/internal/dsync/dsync_test.go:92:2-92:33: `dm.Unlock(context.Background())`
$DIR/internal/dsync/dsync_test.go:92:4-92:33: `.Unlock(context.Background())`
$DIR/internal/dsync/dsync_test.go:92:19-92:32: `.Background()`
$DIR/internal/dsync/dsync_test.go:94:2-94:21: `dm.Lock(id, source)`
$DIR/internal/dsync/dsync_test.go:94:4-94:21: `.Lock(id, source)`
$DIR/internal/dsync/dsync_test.go:95:2-95:70: `time.Sleep(time.Duration(10+(rand.Float32()*50)) * time.Millisecond)`
$DIR/internal/dsync/dsync_test.go:95:6-95:70: `.Sleep(time.Duration(10+(rand.Float32()*50)) * time.Millisecond)`
$DIR/internal/dsync/dsync_test.go:95:17-95:50: `.Duration(10+(rand.Float32()*50))`
$DIR/internal/dsync/dsync_test.go:95:35-95:45: `.Float32()`
$DIR/internal/dsync/dsync_test.go:96:19-96:32: `.Background()`
$DIR/internal/dsync/dsync_test.go:104:2-104:24: `dm1st.Lock(id, source)`
$DIR/internal/dsync/dsync_test.go:104:7-104:24: `.Lock(id, source)`
$DIR/internal/dsync/dsync_test.go:108:3-108:45: `time.Sleep(5 * testDrwMutexAcquireTimeout)`
$DIR/internal/dsync/dsync_test.go:108:7-108:45: `.Sleep(5 * testDrwMutexAcquireTimeout)`
$DIR/internal/dsync/dsync_test.go:111:3-111:37: `dm1st.Unlock(context.Background())`
$DIR/internal/dsync/dsync_test.go:111:8-111:37: `.Unlock(context.Background())`
$DIR/internal/dsync/dsync_test.go:111:23-111:36: `.Background()`
$DIR/internal/dsync/dsync_test.go:114:2-114:24: `dm2nd.Lock(id, source)`
$DIR/internal/dsync/dsync_test.go:114:7-114:24: `.Lock(id, source)`
$DIR/internal/dsync/dsync_test.go:117:2-117:48: `time.Sleep(testDrwMutexRefreshCallTimeout * 2)`
$DIR/internal/dsync/dsync_test.go:117:6-117:48: `.Sleep(testDrwMutexRefreshCallTimeout * 2)`
$DIR/internal/dsync/dsync_test.go:119:22-119:35: `.Background()`
$DIR/internal/dsync/dsync_test.go:128:2-128:24: `dm1st.Lock(id, source)`
$DIR/internal/dsync/dsync_test.go:128:7-128:24: `.Lock(id, source)`
$DIR/internal/dsync/dsync_test.go:129:17-129:23: `.Now()`
$DIR/internal/dsync/dsync_test.go:134:3-134:45: `time.Sleep(2 * testDrwMutexAcquireTimeout)`
$DIR/internal/dsync/dsync_test.go:134:7-134:45: `.Sleep(2 * testDrwMutexAcquireTimeout)`
$DIR/internal/dsync/dsync_test.go:137:3-137:37: `dm1st.Unlock(context.Background())`
$DIR/internal/dsync/dsync_test.go:137:8-137:37: `.Unlock(context.Background())`
$DIR/internal/dsync/dsync_test.go:137:23-137:36: `.Background()`
$DIR/internal/dsync/dsync_test.go:139:2-139:42: `expect += 2 * testDrwMutexAcquireTimeout`
$DIR/internal/dsync/dsync_test.go:142:2-142:11: `wg.Add(2)`
$DIR/internal/dsync/dsync_test.go:142:4-142:11: `.Add(2)`
$DIR/internal/dsync/dsync_test.go:145:11-145:18: `.Done()`
$DIR/internal/dsync/dsync_test.go:147:3-147:25: `dm2nd.Lock(id, source)`
$DIR/internal/dsync/dsync_test.go:147:8-147:25: `.Lock(id, source)`
$DIR/internal/dsync/dsync_test.go:151:4-151:46: `time.Sleep(2 * testDrwMutexAcquireTimeout)`
$DIR/internal/dsync/dsync_test.go:151:8-151:46: `.Sleep(2 * testDrwMutexAcquireTimeout)`
$DIR/internal/dsync/dsync_test.go:154:4-154:38: `dm2nd.Unlock(context.Background())`
$DIR/internal/dsync/dsync_test.go:154:9-154:38: `.Unlock(context.Background())`
$DIR/internal/dsync/dsync_test.go:154:24-154:37: `.Background()`
$DIR/internal/dsync/dsync_test.go:157:3-157:25: `dm3rd.Lock(id, source)`
$DIR/internal/dsync/dsync_test.go:157:8-157:25: `.Lock(id, source)`
$DIR/internal/dsync/dsync_test.go:160:3-160:45: `time.Sleep(testDrwMutexRefreshCallTimeout)`
$DIR/internal/dsync/dsync_test.go:160:7-160:45: `.Sleep(testDrwMutexRefreshCallTimeout)`
$DIR/internal/dsync/dsync_test.go:162:3-162:37: `dm3rd.Unlock(context.Background())`
$DIR/internal/dsync/dsync_test.go:162:8-162:37: `.Unlock(context.Background())`
$DIR/internal/dsync/dsync_test.go:162:23-162:36: `.Background()`
$DIR/internal/dsync/dsync_test.go:164:2-164:73: `expect += 2*testDrwMutexAcquireTimeout + testDrwMutexRefreshCallTimeout`
$DIR/internal/dsync/dsync_test.go:167:11-167:18: `.Done()`
$DIR/internal/dsync/dsync_test.go:169:3-169:25: `dm3rd.Lock(id, source)`
$DIR/internal/dsync/dsync_test.go:169:8-169:25: `.Lock(id, source)`
$DIR/internal/dsync/dsync_test.go:173:4-173:46: `time.Sleep(2 * testDrwMutexAcquireTimeout)`
$DIR/internal/dsync/dsync_test.go:173:8-173:46: `.Sleep(2 * testDrwMutexAcquireTimeout)`
$DIR/internal/dsync/dsync_test.go:176:4-176:38: `dm3rd.Unlock(context.Background())`
$DIR/internal/dsync/dsync_test.go:176:9-176:38: `.Unlock(context.Background())`
$DIR/internal/dsync/dsync_test.go:176:24-176:37: `.Background()`
$DIR/internal/dsync/dsync_test.go:179:3-179:25: `dm2nd.Lock(id, source)`
$DIR/internal/dsync/dsync_test.go:179:8-179:25: `.Lock(id, source)`
$DIR/internal/dsync/dsync_test.go:182:3-182:45: `time.Sleep(testDrwMutexRefreshCallTimeout)`
$DIR/internal/dsync/dsync_test.go:182:7-182:45: `.Sleep(testDrwMutexRefreshCallTimeout)`
$DIR/internal/dsync/dsync_test.go:184:3-184:37: `dm2nd.Unlock(context.Background())`
$DIR/internal/dsync/dsync_test.go:184:8-184:37: `.Unlock(context.Background())`
$DIR/internal/dsync/dsync_test.go:184:23-184:36: `.Background()`
$DIR/internal/dsync/dsync_test.go:186:2-186:73: `expect += 2*testDrwMutexAcquireTimeout + testDrwMutexRefreshCallTimeout`
$DIR/internal/dsync/dsync_test.go:188:2-188:11: `wg.Wait()`
$DIR/internal/dsync/dsync_test.go:188:4-188:11: `.Wait()`
$DIR/internal/dsync/dsync_test.go:190:17-190:32: `.Since(started)`
$DIR/internal/dsync/dsync_test.go:202:2-202:22: `dm1.Lock(id, source)`
$DIR/internal/dsync/dsync_test.go:202:5-202:22: `.Lock(id, source)`
$DIR/internal/dsync/dsync_test.go:203:2-203:22: `dm2.Lock(id, source)`
$DIR/internal/dsync/dsync_test.go:203:5-203:22: `.Lock(id, source)`
$DIR/internal/dsync/dsync_test.go:204:2-204:34: `dm1.Unlock(context.Background())`
$DIR/internal/dsync/dsync_test.go:204:5-204:34: `.Unlock(context.Background())`
$DIR/internal/dsync/dsync_test.go:204:20-204:33: `.Background()`
$DIR/internal/dsync/dsync_test.go:205:20-205:33: `.Background()`
$DIR/internal/dsync/dsync_test.go:210:12-210:20: `.Short()`
$DIR/internal/dsync/dsync_test.go:211:3-211:41: `t.Skip("skipping test in short mode.")`
$DIR/internal/dsync/dsync_test.go:211:4-211:41: `.Skip("skipping test in short mode.")`
$DIR/internal/dsync/dsync_test.go:215:2-215:50: `dm.refreshInterval = testDrwMutexRefreshInterval`
$DIR/internal/dsync/dsync_test.go:217:24-217:57: `.WithCancel(context.Background())`
$DIR/internal/dsync/dsync_test.go:217:43-217:56: `.Background()`
$DIR/internal/dsync/dsync_test.go:219:8-219:76: `.GetLock(ctx, cancel, id, source, Options{Timeout: 5 * time.Minute})`
$DIR/internal/dsync/dsync_test.go:224:15-224:57: `.NewTimer(testDrwMutexRefreshInterval * 2)`
$DIR/internal/dsync/dsync_test.go:227:12-227:19: `.Done()`
$DIR/internal/dsync/dsync_test.go:233:19-233:32: `.Background()`
$DIR/internal/dsync/dsync_test.go:238:12-238:20: `.Short()`
$DIR/internal/dsync/dsync_test.go:239:3-239:41: `t.Skip("skipping test in short mode.")`
$DIR/internal/dsync/dsync_test.go:239:4-239:41: `.Skip("skipping test in short mode.")`
$DIR/internal/dsync/dsync_test.go:244:3-244:40: `lockServers[i].setRefreshReply(false)`
$DIR/internal/dsync/dsync_test.go:244:17-244:40: `.setRefreshReply(false)`
$DIR/internal/dsync/dsync_test.go:245:23-245:45: `.setRefreshReply(true)`
$DIR/internal/dsync/dsync_test.go:249:2-249:45: `dm.refreshInterval = 500 * time.Millisecond`
$DIR/internal/dsync/dsync_test.go:251:2-251:11: `wg.Add(1)`
$DIR/internal/dsync/dsync_test.go:251:4-251:11: `.Add(1)`
$DIR/internal/dsync/dsync_test.go:253:20-253:53: `.WithCancel(context.Background())`
$DIR/internal/dsync/dsync_test.go:253:39-253:52: `.Background()`
$DIR/internal/dsync/dsync_test.go:255:3-255:7: `cl()`
$DIR/internal/dsync/dsync_test.go:256:3-256:12: `wg.Done()`
$DIR/internal/dsync/dsync_test.go:256:5-256:12: `.Done()`
$DIR/internal/dsync/dsync_test.go:259:8-259:76: `.GetLock(ctx, cancel, id, source, Options{Timeout: 5 * time.Minute})`
$DIR/internal/dsync/dsync_test.go:264:2-264:11: `wg.Wait()`
$DIR/internal/dsync/dsync_test.go:264:4-264:11: `.Wait()`
$DIR/internal/dsync/dsync_test.go:265:8-265:14: `.Err()`
$DIR/internal/dsync/dsync_test.go:270:19-270:32: `.Background()`
$DIR/internal/dsync/dsync_test.go:275:12-275:20: `.Short()`
$DIR/internal/dsync/dsync_test.go:276:3-276:41: `t.Skip("skipping test in short mode.")`
$DIR/internal/dsync/dsync_test.go:276:4-276:41: `.Skip("skipping test in short mode.")`
$DIR/internal/dsync/dsync_test.go:280:2-280:52: `dm.refreshInterval = testDrwMutexUnlockCallTimeout`
$DIR/internal/dsync/dsync_test.go:281:8-281:90: `.GetLock(context.Background(), nil, id, source, Options{Timeout: 5 * time.Minute})`
$DIR/internal/dsync/dsync_test.go:281:24-281:37: `.Background()`
$DIR/internal/dsync/dsync_test.go:287:3-287:69: `lockServers[i].setResponseDelay(5 * testDrwMutexUnlockCallTimeout)`
$DIR/internal/dsync/dsync_test.go:287:17-287:69: `.setResponseDelay(5 * testDrwMutexUnlockCallTimeout)`
$DIR/internal/dsync/dsync_test.go:288:23-288:43: `.setResponseDelay(0)`
$DIR/internal/dsync/dsync_test.go:293:25-293:81: `.WithTimeout(context.Background(), 500*time.Millisecond)`
$DIR/internal/dsync/dsync_test.go:293:45-293:58: `.Background()`
$DIR/internal/dsync/dsync_test.go:295:3-295:17: `dm.Unlock(ctx)`
$DIR/internal/dsync/dsync_test.go:295:5-295:17: `.Unlock(ctx)`
$DIR/internal/dsync/dsync_test.go:296:3-296:31: `unlockReturned <- struct{}{}`
$DIR/internal/dsync/dsync_test.go:299:15-299:59: `.NewTimer(2 * testDrwMutexUnlockCallTimeout)`
$DIR/internal/dsync/dsync_test.go:300:13-300:20: `.Stop()`
$DIR/internal/dsync/dsync_test.go:321:12-321:20: `.Short()`
$DIR/internal/dsync/dsync_test.go:322:3-322:12: `loops = 5`
$DIR/internal/dsync/dsync_test.go:327:3-327:30: `go HammerMutex(m, loops, c)`
$DIR/internal/dsync/dsync_test.go:330:3-330:6: `<-c`
$DIR/internal/dsync/lock-args_gen_test.go:14:15-14:31: `.MarshalMsg(nil)`
$DIR/internal/dsync/lock-args_gen_test.go:18:16-18:34: `.UnmarshalMsg(bts)`
$DIR/internal/dsync/lock-args_gen_test.go:26:2-26:28: `left, err = msgp.Skip(bts)`
$DIR/internal/dsync/lock-args_gen_test.go:26:18-26:28: `.Skip(bts)`
$DIR/internal/dsync/lock-args_gen_test.go:73:2-73:23: `msgp.Encode(&buf, &v)`
$DIR/internal/dsync/lock-args_gen_test.go:73:6-73:23: `.Encode(&buf, &v)`
$DIR/internal/dsync/lock-args_gen_test.go:75:8-75:18: `.Msgsize()`
$DIR/internal/dsync/lock-args_gen_test.go:76:8-76:14: `.Len()`
$DIR/internal/dsync/lock-args_gen_test.go:81:13-81:31: `.Decode(&buf, &vn)`
$DIR/internal/dsync/lock-args_gen_test.go:86:2-86:13: `buf.Reset()`
$DIR/internal/dsync/lock-args_gen_test.go:86:5-86:13: `.Reset()`
$DIR/internal/dsync/lock-args_gen_test.go:87:2-87:23: `msgp.Encode(&buf, &v)`
$DIR/internal/dsync/lock-args_gen_test.go:87:6-87:23: `.Encode(&buf, &v)`
$DIR/internal/dsync/lock-args_gen_test.go:88:2-88:35: `err = msgp.NewReader(&buf).Skip()`
$DIR/internal/dsync/lock-args_gen_test.go:88:12-88:28: `.NewReader(&buf)`
$DIR/internal/dsync/lock-args_gen_test.go:88:28-88:35: `.Skip()`
$DIR/internal/etag/etag_test.go:88:12-88:26: `.ETag.String()`
$DIR/internal/etag/etag_test.go:140:30-140:54: `.NewReader(test.Content)`
$DIR/internal/etag/etag_test.go:141:18-141:43: `.Copy(io.Discard, reader)`
$DIR/internal/etag/etag_test.go:144:20-144:27: `.ETag()`
$DIR/internal/etag/etag_test.go:209:24-209:38: `.IsEncrypted()`
$DIR/internal/etag/etag_test.go:232:14-232:23: `.Format()`
$DIR/internal/etag/etag_test.go:232:23-232:32: `.String()`
$DIR/internal/event/arn_test.go:37:21-37:34: `.arn.String()`
$DIR/internal/event/arn_test.go:57:19-57:41: `.Marshal(testCase.arn)`
$DIR/internal/event/arn_test.go:65:15-65:54: `.DeepEqual(data, testCase.expectedData)`
$DIR/internal/event/arn_test.go:86:13-86:44: `.Unmarshal(testCase.data, &arn)`
$DIR/internal/event/config_test.go:68:13-68:46: `.Unmarshal(testCase.data, result)`
$DIR/internal/event/config_test.go:76:15-76:58: `.DeepEqual(result, testCase.expectedResult)`
$DIR/internal/event/config_test.go:98:13-98:46: `.Unmarshal(testCase.data, result)`
$DIR/internal/event/config_test.go:106:15-106:58: `.DeepEqual(result, testCase.expectedResult)`
$DIR/internal/event/config_test.go:125:21-125:46: `.filterRuleList.Pattern()`
$DIR/internal/event/config_test.go:193:13-193:48: `.Unmarshal(testCase.data, &Queue{})`
$DIR/internal/event/config_test.go:213:15-213:39: `.Unmarshal(data, queue1)`
$DIR/internal/event/config_test.go:214:3-214:13: `panic(err)`
$DIR/internal/event/config_test.go:217:2-234:24: `data = []byte(`
<QueueConfiguration>
   <Id>1</Id>
    <Filter>
        <S3Key>
            <FilterRule>
                <Name>prefix</Name>
                <Value>images/</Value>
            </FilterRule>
            <FilterRule>
                <Name>suffix</Name>
                <Value>jpg</Value>
            </FilterRule>
        </S3Key>
   </Filter>
   <Queue>arn:minio:sqs:us-east-1:1:webhook</Queue>
   <Event>s3:ObjectCreated:Put</Event>
</QueueConfiguration>`)`
$DIR/internal/event/config_test.go:236:15-236:39: `.Unmarshal(data, queue2)`
$DIR/internal/event/config_test.go:237:3-237:13: `panic(err)`
$DIR/internal/event/config_test.go:240:2-248:24: `data = []byte(`
<QueueConfiguration>
   <Id>1</Id>
   <Filter></Filter>
   <Queue>arn:minio:sqs:eu-west-2:1:webhook</Queue>
   <Event>s3:ObjectAccessed:*</Event>
   <Event>s3:ObjectCreated:*</Event>
   <Event>s3:ObjectRemoved:*</Event>
</QueueConfiguration>`)`
$DIR/internal/event/config_test.go:250:15-250:39: `.Unmarshal(data, queue3)`
$DIR/internal/event/config_test.go:251:3-251:13: `panic(err)`
$DIR/internal/event/config_test.go:257:23-257:83: `.Add(&ExampleTarget{TargetID{"1", "webhook"}, false, false})`
$DIR/internal/event/config_test.go:258:3-258:13: `panic(err)`
$DIR/internal/event/config_test.go:274:18-274:71: `.queue.Validate(testCase.region, testCase.targetList)`
$DIR/internal/event/config_test.go:294:15-294:39: `.Unmarshal(data, queue1)`
$DIR/internal/event/config_test.go:295:3-295:13: `panic(err)`
$DIR/internal/event/config_test.go:298:2-315:24: `data = []byte(`
<QueueConfiguration>
   <Id>1</Id>
    <Filter>
        <S3Key>
            <FilterRule>
                <Name>prefix</Name>
                <Value>images/</Value>
            </FilterRule>
            <FilterRule>
                <Name>suffix</Name>
                <Value>jpg</Value>
            </FilterRule>
        </S3Key>
   </Filter>
   <Queue>arn:minio:sqs::1:webhook</Queue>
   <Event>s3:ObjectCreated:Put</Event>
</QueueConfiguration>`)`
$DIR/internal/event/config_test.go:317:15-317:39: `.Unmarshal(data, queue2)`
$DIR/internal/event/config_test.go:318:3-318:13: `panic(err)`
$DIR/internal/event/config_test.go:333:3-333:44: `testCase.queue.SetRegion(testCase.region)`
$DIR/internal/event/config_test.go:333:11-333:44: `.queue.SetRegion(testCase.region)`
$DIR/internal/event/config_test.go:336:14-336:57: `.DeepEqual(result, testCase.expectedResult)`
$DIR/internal/event/config_test.go:353:15-353:43: `.Unmarshal(data, queueCase1)`
$DIR/internal/event/config_test.go:354:3-354:13: `panic(err)`
$DIR/internal/event/config_test.go:357:2-374:24: `data = []byte(`
<QueueConfiguration>
   <Id>1</Id>
    <Filter>
        <S3Key>
            <FilterRule>
                <Name>prefix</Name>
                <Value>images/</Value>
            </FilterRule>
            <FilterRule>
                <Name>suffix</Name>
                <Value>jpg</Value>
            </FilterRule>
        </S3Key>
   </Filter>
   <Queue>arn:minio:sqs:us-east-1:1:webhook</Queue>
   <Event>s3:ObjectCreated:Put</Event>
</QueueConfiguration>`)`
$DIR/internal/event/config_test.go:376:15-376:43: `.Unmarshal(data, queueCase2)`
$DIR/internal/event/config_test.go:377:3-377:13: `panic(err)`
$DIR/internal/event/config_test.go:392:21-392:40: `.queue.ToRulesMap()`
$DIR/internal/event/config_test.go:394:14-394:57: `.DeepEqual(result, testCase.expectedResult)`
$DIR/internal/event/config_test.go:511:13-511:49: `.Unmarshal(testCase.data, &Config{})`
$DIR/internal/event/config_test.go:534:15-534:40: `.Unmarshal(data, config1)`
$DIR/internal/event/config_test.go:535:3-535:13: `panic(err)`
$DIR/internal/event/config_test.go:538:2-558:3: `data = []byte(`
<NotificationConfiguration  xmlns="http://s3.amazonaws.com/doc/2006-03-01/">
   <QueueConfiguration>
      <Id>1</Id>
       <Filter>
           <S3Key>
               <FilterRule>
                   <Name>prefix</Name>
                   <Value>images/</Value>
               </FilterRule>
               <FilterRule>
                   <Name>suffix</Name>
                   <Value>jpg</Value>
               </FilterRule>
           </S3Key>
      </Filter>
      <Queue>arn:minio:sqs:us-east-1:1:webhook</Queue>
      <Event>s3:ObjectCreated:Put</Event>
   </QueueConfiguration>
</NotificationConfiguration>
`)`
$DIR/internal/event/config_test.go:560:15-560:40: `.Unmarshal(data, config2)`
$DIR/internal/event/config_test.go:561:3-561:13: `panic(err)`
$DIR/internal/event/config_test.go:564:2-592:3: `data = []byte(`
<NotificationConfiguration  xmlns="http://s3.amazonaws.com/doc/2006-03-01/">
   <QueueConfiguration>
      <Id>1</Id>
      <Filter></Filter>
      <Queue>arn:minio:sqs:us-east-1:1:webhook</Queue>
      <Event>s3:ObjectAccessed:*</Event>
      <Event>s3:ObjectCreated:*</Event>
      <Event>s3:ObjectRemoved:*</Event>
   </QueueConfiguration>
   <QueueConfiguration>
      <Id>2</Id>
       <Filter>
           <S3Key>
               <FilterRule>
                   <Name>prefix</Name>
                   <Value>images/</Value>
               </FilterRule>
               <FilterRule>
                   <Name>suffix</Name>
                   <Value>jpg</Value>
               </FilterRule>
           </S3Key>
      </Filter>
      <Queue>arn:minio:sqs:us-east-1:1:webhook</Queue>
      <Event>s3:ObjectCreated:Put</Event>
   </QueueConfiguration>
</NotificationConfiguration>
`)`
$DIR/internal/event/config_test.go:594:15-594:40: `.Unmarshal(data, config3)`
$DIR/internal/event/config_test.go:595:3-595:13: `panic(err)`
$DIR/internal/event/config_test.go:601:23-601:83: `.Add(&ExampleTarget{TargetID{"1", "webhook"}, false, false})`
$DIR/internal/event/config_test.go:602:3-602:13: `panic(err)`
$DIR/internal/event/config_test.go:618:18-618:72: `.config.Validate(testCase.region, testCase.targetList)`
$DIR/internal/event/config_test.go:641:15-641:40: `.Unmarshal(data, config1)`
$DIR/internal/event/config_test.go:642:3-642:13: `panic(err)`
$DIR/internal/event/config_test.go:645:2-665:3: `data = []byte(`
<NotificationConfiguration  xmlns="http://s3.amazonaws.com/doc/2006-03-01/">
   <QueueConfiguration>
      <Id>1</Id>
       <Filter>
           <S3Key>
               <FilterRule>
                   <Name>prefix</Name>
                   <Value>images/</Value>
               </FilterRule>
               <FilterRule>
                   <Name>suffix</Name>
                   <Value>jpg</Value>
               </FilterRule>
           </S3Key>
      </Filter>
      <Queue>arn:minio:sqs::1:webhook</Queue>
      <Event>s3:ObjectCreated:Put</Event>
   </QueueConfiguration>
</NotificationConfiguration>
`)`
$DIR/internal/event/config_test.go:667:15-667:40: `.Unmarshal(data, config2)`
$DIR/internal/event/config_test.go:668:3-668:13: `panic(err)`
$DIR/internal/event/config_test.go:671:2-699:3: `data = []byte(`
<NotificationConfiguration  xmlns="http://s3.amazonaws.com/doc/2006-03-01/">
   <QueueConfiguration>
      <Id>1</Id>
      <Filter></Filter>
      <Queue>arn:minio:sqs:us-east-1:1:webhook</Queue>
      <Event>s3:ObjectAccessed:*</Event>
      <Event>s3:ObjectCreated:*</Event>
      <Event>s3:ObjectRemoved:*</Event>
   </QueueConfiguration>
   <QueueConfiguration>
      <Id>2</Id>
       <Filter>
           <S3Key>
               <FilterRule>
                   <Name>prefix</Name>
                   <Value>images/</Value>
               </FilterRule>
               <FilterRule>
                   <Name>suffix</Name>
                   <Value>jpg</Value>
               </FilterRule>
           </S3Key>
      </Filter>
      <Queue>arn:minio:sqs:us-east-1:2:amqp</Queue>
      <Event>s3:ObjectCreated:Put</Event>
   </QueueConfiguration>
</NotificationConfiguration>
`)`
$DIR/internal/event/config_test.go:701:15-701:40: `.Unmarshal(data, config3)`
$DIR/internal/event/config_test.go:702:3-702:13: `panic(err)`
$DIR/internal/event/config_test.go:719:3-719:45: `testCase.config.SetRegion(testCase.region)`
$DIR/internal/event/config_test.go:719:11-719:45: `.config.SetRegion(testCase.region)`
$DIR/internal/event/config_test.go:722:4-722:38: `result = append(result, queue.ARN)`
$DIR/internal/event/config_test.go:725:14-725:57: `.DeepEqual(result, testCase.expectedResult)`
$DIR/internal/event/config_test.go:745:15-745:40: `.Unmarshal(data, config1)`
$DIR/internal/event/config_test.go:746:3-746:13: `panic(err)`
$DIR/internal/event/config_test.go:749:2-769:3: `data = []byte(`
<NotificationConfiguration  xmlns="http://s3.amazonaws.com/doc/2006-03-01/">
   <QueueConfiguration>
      <Id>1</Id>
       <Filter>
           <S3Key>
               <FilterRule>
                   <Name>prefix</Name>
                   <Value>images/</Value>
               </FilterRule>
               <FilterRule>
                   <Name>suffix</Name>
                   <Value>jpg</Value>
               </FilterRule>
           </S3Key>
      </Filter>
      <Queue>arn:minio:sqs::1:webhook</Queue>
      <Event>s3:ObjectCreated:Put</Event>
   </QueueConfiguration>
</NotificationConfiguration>
`)`
$DIR/internal/event/config_test.go:771:15-771:40: `.Unmarshal(data, config2)`
$DIR/internal/event/config_test.go:772:3-772:13: `panic(err)`
$DIR/internal/event/config_test.go:775:2-803:3: `data = []byte(`
<NotificationConfiguration  xmlns="http://s3.amazonaws.com/doc/2006-03-01/">
   <QueueConfiguration>
      <Id>1</Id>
      <Filter></Filter>
      <Queue>arn:minio:sqs:us-east-1:1:webhook</Queue>
      <Event>s3:ObjectAccessed:*</Event>
      <Event>s3:ObjectCreated:*</Event>
      <Event>s3:ObjectRemoved:*</Event>
   </QueueConfiguration>
   <QueueConfiguration>
      <Id>2</Id>
       <Filter>
           <S3Key>
               <FilterRule>
                   <Name>prefix</Name>
                   <Value>images/</Value>
               </FilterRule>
               <FilterRule>
                   <Name>suffix</Name>
                   <Value>jpg</Value>
               </FilterRule>
           </S3Key>
      </Filter>
      <Queue>arn:minio:sqs:us-east-1:2:amqp</Queue>
      <Event>s3:ObjectCreated:Put</Event>
   </QueueConfiguration>
</NotificationConfiguration>
`)`
$DIR/internal/event/config_test.go:805:15-805:40: `.Unmarshal(data, config3)`
$DIR/internal/event/config_test.go:806:3-806:13: `panic(err)`
$DIR/internal/event/config_test.go:814:2-814:83: `rulesMapCase3.add([]Name{ObjectCreatedPut}, "images/*jpg", TargetID{"2", "amqp"})`
$DIR/internal/event/config_test.go:814:15-814:83: `.add([]Name{ObjectCreatedPut}, "images/*jpg", TargetID{"2", "amqp"})`
$DIR/internal/event/config_test.go:826:21-826:41: `.config.ToRulesMap()`
$DIR/internal/event/config_test.go:828:14-828:57: `.DeepEqual(result, testCase.expectedResult)`
$DIR/internal/event/config_test.go:835:20-846:3: `.NewReader(`
<NotificationConfiguration  xmlns="http://s3.amazonaws.com/doc/2006-03-01/">
   <QueueConfiguration>
      <Id>1</Id>
      <Filter></Filter>
      <Queue>arn:minio:sqs:us-east-1:1:webhook</Queue>
      <Event>s3:ObjectAccessed:*</Event>
      <Event>s3:ObjectCreated:*</Event>
      <Event>s3:ObjectRemoved:*</Event>
   </QueueConfiguration>
</NotificationConfiguration>
`)`
$DIR/internal/event/config_test.go:848:20-868:3: `.NewReader(`
<NotificationConfiguration  xmlns="http://s3.amazonaws.com/doc/2006-03-01/">
   <QueueConfiguration>
      <Id>1</Id>
       <Filter>
           <S3Key>
               <FilterRule>
                   <Name>prefix</Name>
                   <Value>images/</Value>
               </FilterRule>
               <FilterRule>
                   <Name>suffix</Name>
                   <Value>jpg</Value>
               </FilterRule>
           </S3Key>
      </Filter>
      <Queue>arn:minio:sqs:us-east-1:1:webhook</Queue>
      <Event>s3:ObjectCreated:Put</Event>
   </QueueConfiguration>
</NotificationConfiguration>
`)`
$DIR/internal/event/config_test.go:870:20-898:3: `.NewReader(`
<NotificationConfiguration  xmlns="http://s3.amazonaws.com/doc/2006-03-01/">
   <QueueConfiguration>
      <Id>1</Id>
      <Filter></Filter>
      <Queue>arn:minio:sqs:us-east-1:1:webhook</Queue>
      <Event>s3:ObjectAccessed:*</Event>
      <Event>s3:ObjectCreated:*</Event>
      <Event>s3:ObjectRemoved:*</Event>
   </QueueConfiguration>
   <QueueConfiguration>
      <Id>2</Id>
       <Filter>
           <S3Key>
               <FilterRule>
                   <Name>prefix</Name>
                   <Value>images/</Value>
               </FilterRule>
               <FilterRule>
                   <Name>suffix</Name>
                   <Value>jpg</Value>
               </FilterRule>
           </S3Key>
      </Filter>
      <Queue>arn:minio:sqs:us-east-1:1:webhook</Queue>
      <Event>s3:ObjectCreated:Put</Event>
   </QueueConfiguration>
</NotificationConfiguration>
`)`
$DIR/internal/event/config_test.go:900:20-928:3: `.NewReader(`
<NotificationConfiguration  xmlns="http://s3.amazonaws.com/doc/2006-03-01/">
   <QueueConfiguration>
      <Id>1</Id>
      <Filter></Filter>
      <Queue>arn:minio:sqs:us-east-1:1:webhook</Queue>
      <Event>s3:ObjectAccessed:*</Event>
      <Event>s3:ObjectCreated:*</Event>
      <Event>s3:ObjectRemoved:*</Event>
   </QueueConfiguration>
   <CloudFunctionConfiguration>
      <Id>1</Id>
      <Filter>
             <S3Key>
                 <FilterRule>
                     <Name>suffix</Name>
                     <Value>.jpg</Value>
                 </FilterRule>
             </S3Key>
      </Filter>
      <Cloudcode>arn:aws:lambda:us-west-2:444455556666:cloud-function-A</Cloudcode>
      <Event>s3:ObjectCreated:Put</Event>
   </CloudFunctionConfiguration>
   <TopicConfiguration>
      <Topic>arn:aws:sns:us-west-2:444455556666:sns-notification-one</Topic>
      <Event>s3:ObjectCreated:*</Event>
  </TopicConfiguration>
</NotificationConfiguration>
`)`
$DIR/internal/event/config_test.go:933:23-933:83: `.Add(&ExampleTarget{TargetID{"1", "webhook"}, false, false})`
$DIR/internal/event/config_test.go:934:3-934:13: `panic(err)`
$DIR/internal/event/config_test.go:951:24-951:42: `.reader.Seek(0, 0)`
$DIR/internal/event/config_test.go:952:4-952:14: `panic(err)`
$DIR/internal/event/name_test.go:44:21-44:35: `.name.Expand()`
$DIR/internal/event/name_test.go:46:14-46:57: `.DeepEqual(result, testCase.expectedResult)`
$DIR/internal/event/name_test.go:80:21-80:35: `.name.String()`
$DIR/internal/event/name_test.go:102:19-102:42: `.Marshal(testCase.name)`
$DIR/internal/event/name_test.go:110:15-110:54: `.DeepEqual(data, testCase.expectedData)`
$DIR/internal/event/name_test.go:132:13-132:45: `.Unmarshal(testCase.data, &name)`
$DIR/internal/event/name_test.go:140:15-140:54: `.DeepEqual(name, testCase.expectedName)`
$DIR/internal/event/name_test.go:161:20-161:43: `.Marshal(testCase.name)`
$DIR/internal/event/name_test.go:169:15-169:54: `.DeepEqual(data, testCase.expectedData)`
$DIR/internal/event/name_test.go:191:14-191:46: `.Unmarshal(testCase.data, &name)`
$DIR/internal/event/name_test.go:199:15-199:54: `.DeepEqual(name, testCase.expectedName)`
$DIR/internal/event/name_test.go:228:15-228:54: `.DeepEqual(name, testCase.expectedName)`
$DIR/internal/event/rules_test.go:58:2-58:67: `rulesCase2.Add(NewPattern("2010*", ""), TargetID{"1", "webhook"})`
$DIR/internal/event/rules_test.go:58:12-58:67: `.Add(NewPattern("2010*", ""), TargetID{"1", "webhook"})`
$DIR/internal/event/rules_test.go:61:2-61:67: `rulesCase3.Add(NewPattern("2010*", ""), TargetID{"1", "webhook"})`
$DIR/internal/event/rules_test.go:61:12-61:67: `.Add(NewPattern("2010*", ""), TargetID{"1", "webhook"})`
$DIR/internal/event/rules_test.go:64:2-64:67: `rulesCase4.Add(NewPattern("", "*.jpg"), TargetID{"1", "webhook"})`
$DIR/internal/event/rules_test.go:64:12-64:67: `.Add(NewPattern("", "*.jpg"), TargetID{"1", "webhook"})`
$DIR/internal/event/rules_test.go:69:2-69:67: `rulesCase6.Add(NewPattern("", "*.jpg"), TargetID{"1", "webhook"})`
$DIR/internal/event/rules_test.go:69:12-69:67: `.Add(NewPattern("", "*.jpg"), TargetID{"1", "webhook"})`
$DIR/internal/event/rules_test.go:72:2-72:67: `rulesCase7.Add(NewPattern("", "*.jpg"), TargetID{"1", "webhook"})`
$DIR/internal/event/rules_test.go:72:12-72:67: `.Add(NewPattern("", "*.jpg"), TargetID{"1", "webhook"})`
$DIR/internal/event/rules_test.go:75:2-75:67: `rulesCase8.Add(NewPattern("2010*", ""), TargetID{"1", "webhook"})`
$DIR/internal/event/rules_test.go:75:12-75:67: `.Add(NewPattern("2010*", ""), TargetID{"1", "webhook"})`
$DIR/internal/event/rules_test.go:94:3-94:58: `testCase.rules.Add(testCase.pattern, testCase.targetID)`
$DIR/internal/event/rules_test.go:94:11-94:58: `.rules.Add(testCase.pattern, testCase.targetID)`
$DIR/internal/event/rules_test.go:107:2-107:64: `rulesCase2.Add(NewPattern("*", "*"), TargetID{"1", "webhook"})`
$DIR/internal/event/rules_test.go:107:12-107:64: `.Add(NewPattern("*", "*"), TargetID{"1", "webhook"})`
$DIR/internal/event/rules_test.go:110:2-110:67: `rulesCase3.Add(NewPattern("2010*", ""), TargetID{"1", "webhook"})`
$DIR/internal/event/rules_test.go:110:12-110:67: `.Add(NewPattern("2010*", ""), TargetID{"1", "webhook"})`
$DIR/internal/event/rules_test.go:111:2-111:64: `rulesCase3.Add(NewPattern("", "*.png"), TargetID{"2", "amqp"})`
$DIR/internal/event/rules_test.go:111:12-111:64: `.Add(NewPattern("", "*.png"), TargetID{"2", "amqp"})`
$DIR/internal/event/rules_test.go:114:2-114:67: `rulesCase4.Add(NewPattern("2010*", ""), TargetID{"1", "webhook"})`
$DIR/internal/event/rules_test.go:114:12-114:67: `.Add(NewPattern("2010*", ""), TargetID{"1", "webhook"})`
$DIR/internal/event/rules_test.go:128:21-128:54: `.rules.Match(testCase.objectName)`
$DIR/internal/event/rules_test.go:130:14-130:57: `.DeepEqual(testCase.expectedResult, result)`
$DIR/internal/event/rules_test.go:140:2-140:67: `rulesCase2.Add(NewPattern("2010*", ""), TargetID{"1", "webhook"})`
$DIR/internal/event/rules_test.go:140:12-140:67: `.Add(NewPattern("2010*", ""), TargetID{"1", "webhook"})`
$DIR/internal/event/rules_test.go:143:2-143:67: `rulesCase3.Add(NewPattern("", "*.jpg"), TargetID{"1", "webhook"})`
$DIR/internal/event/rules_test.go:143:12-143:67: `.Add(NewPattern("", "*.jpg"), TargetID{"1", "webhook"})`
$DIR/internal/event/rules_test.go:156:21-156:35: `.rules.Clone()`
$DIR/internal/event/rules_test.go:158:14-158:48: `.DeepEqual(result, testCase.rules)`
$DIR/internal/event/rules_test.go:162:3-162:65: `result.Add(NewPattern(testCase.prefix, ""), testCase.targetID)`
$DIR/internal/event/rules_test.go:162:9-162:65: `.Add(NewPattern(testCase.prefix, ""), testCase.targetID)`
$DIR/internal/event/rules_test.go:163:13-163:47: `.DeepEqual(result, testCase.rules)`
$DIR/internal/event/rules_test.go:176:2-176:64: `rules2Case2.Add(NewPattern("*", ""), TargetID{"1", "webhook"})`
$DIR/internal/event/rules_test.go:176:13-176:64: `.Add(NewPattern("*", ""), TargetID{"1", "webhook"})`
$DIR/internal/event/rules_test.go:178:2-178:72: `expectedResultCase2.Add(NewPattern("*", ""), TargetID{"1", "webhook"})`
$DIR/internal/event/rules_test.go:178:21-178:72: `.Add(NewPattern("*", ""), TargetID{"1", "webhook"})`
$DIR/internal/event/rules_test.go:181:2-181:63: `rulesCase3.Add(NewPattern("", "*"), TargetID{"1", "webhook"})`
$DIR/internal/event/rules_test.go:181:12-181:63: `.Add(NewPattern("", "*"), TargetID{"1", "webhook"})`
$DIR/internal/event/rules_test.go:184:2-184:72: `expectedResultCase3.Add(NewPattern("", "*"), TargetID{"1", "webhook"})`
$DIR/internal/event/rules_test.go:184:21-184:72: `.Add(NewPattern("", "*"), TargetID{"1", "webhook"})`
$DIR/internal/event/rules_test.go:187:2-187:67: `rulesCase4.Add(NewPattern("2010*", ""), TargetID{"1", "webhook"})`
$DIR/internal/event/rules_test.go:187:12-187:67: `.Add(NewPattern("2010*", ""), TargetID{"1", "webhook"})`
$DIR/internal/event/rules_test.go:189:2-189:68: `rules2Case4.Add(NewPattern("2010*", ""), TargetID{"1", "webhook"})`
$DIR/internal/event/rules_test.go:189:13-189:68: `.Add(NewPattern("2010*", ""), TargetID{"1", "webhook"})`
$DIR/internal/event/rules_test.go:191:2-191:76: `expectedResultCase4.Add(NewPattern("2010*", ""), TargetID{"1", "webhook"})`
$DIR/internal/event/rules_test.go:191:21-191:76: `.Add(NewPattern("2010*", ""), TargetID{"1", "webhook"})`
$DIR/internal/event/rules_test.go:194:2-194:67: `rulesCase5.Add(NewPattern("2010*", ""), TargetID{"1", "webhook"})`
$DIR/internal/event/rules_test.go:194:12-194:67: `.Add(NewPattern("2010*", ""), TargetID{"1", "webhook"})`
$DIR/internal/event/rules_test.go:195:2-195:64: `rulesCase5.Add(NewPattern("", "*.png"), TargetID{"2", "amqp"})`
$DIR/internal/event/rules_test.go:195:12-195:64: `.Add(NewPattern("", "*.png"), TargetID{"2", "amqp"})`
$DIR/internal/event/rules_test.go:197:2-197:64: `rules2Case5.Add(NewPattern("*", ""), TargetID{"1", "webhook"})`
$DIR/internal/event/rules_test.go:197:13-197:64: `.Add(NewPattern("*", ""), TargetID{"1", "webhook"})`
$DIR/internal/event/rules_test.go:199:2-199:76: `expectedResultCase5.Add(NewPattern("2010*", ""), TargetID{"1", "webhook"})`
$DIR/internal/event/rules_test.go:199:21-199:76: `.Add(NewPattern("2010*", ""), TargetID{"1", "webhook"})`
$DIR/internal/event/rules_test.go:200:2-200:73: `expectedResultCase5.Add(NewPattern("", "*.png"), TargetID{"2", "amqp"})`
$DIR/internal/event/rules_test.go:200:21-200:73: `.Add(NewPattern("", "*.png"), TargetID{"2", "amqp"})`
$DIR/internal/event/rules_test.go:201:2-201:72: `expectedResultCase5.Add(NewPattern("*", ""), TargetID{"1", "webhook"})`
$DIR/internal/event/rules_test.go:201:21-201:72: `.Add(NewPattern("*", ""), TargetID{"1", "webhook"})`
$DIR/internal/event/rules_test.go:216:21-216:50: `.rules.Union(testCase.rules2)`
$DIR/internal/event/rules_test.go:218:14-218:57: `.DeepEqual(testCase.expectedResult, result)`
$DIR/internal/event/rules_test.go:231:2-231:65: `rules2Case2.Add(NewPattern("*", "*"), TargetID{"1", "webhook"})`
$DIR/internal/event/rules_test.go:231:13-231:65: `.Add(NewPattern("*", "*"), TargetID{"1", "webhook"})`
$DIR/internal/event/rules_test.go:235:2-235:64: `rulesCase3.Add(NewPattern("*", "*"), TargetID{"1", "webhook"})`
$DIR/internal/event/rules_test.go:235:12-235:64: `.Add(NewPattern("*", "*"), TargetID{"1", "webhook"})`
$DIR/internal/event/rules_test.go:238:2-238:73: `expectedResultCase3.Add(NewPattern("*", "*"), TargetID{"1", "webhook"})`
$DIR/internal/event/rules_test.go:238:21-238:73: `.Add(NewPattern("*", "*"), TargetID{"1", "webhook"})`
$DIR/internal/event/rules_test.go:241:2-241:64: `rulesCase4.Add(NewPattern("*", "*"), TargetID{"1", "webhook"})`
$DIR/internal/event/rules_test.go:241:12-241:64: `.Add(NewPattern("*", "*"), TargetID{"1", "webhook"})`
$DIR/internal/event/rules_test.go:243:2-243:68: `rules2Case4.Add(NewPattern("2010*", ""), TargetID{"1", "webhook"})`
$DIR/internal/event/rules_test.go:243:13-243:68: `.Add(NewPattern("2010*", ""), TargetID{"1", "webhook"})`
$DIR/internal/event/rules_test.go:244:2-244:65: `rules2Case4.Add(NewPattern("", "*.png"), TargetID{"2", "amqp"})`
$DIR/internal/event/rules_test.go:244:13-244:65: `.Add(NewPattern("", "*.png"), TargetID{"2", "amqp"})`
$DIR/internal/event/rules_test.go:246:2-246:73: `expectedResultCase4.Add(NewPattern("*", "*"), TargetID{"1", "webhook"})`
$DIR/internal/event/rules_test.go:246:21-246:73: `.Add(NewPattern("*", "*"), TargetID{"1", "webhook"})`
$DIR/internal/event/rules_test.go:249:2-249:63: `rulesCase5.Add(NewPattern("*", ""), TargetID{"1", "webhook"})`
$DIR/internal/event/rules_test.go:249:12-249:63: `.Add(NewPattern("*", ""), TargetID{"1", "webhook"})`
$DIR/internal/event/rules_test.go:250:2-250:60: `rulesCase5.Add(NewPattern("", "*"), TargetID{"2", "amqp"})`
$DIR/internal/event/rules_test.go:250:12-250:60: `.Add(NewPattern("", "*"), TargetID{"2", "amqp"})`
$DIR/internal/event/rules_test.go:252:2-252:68: `rules2Case5.Add(NewPattern("2010*", ""), TargetID{"1", "webhook"})`
$DIR/internal/event/rules_test.go:252:13-252:68: `.Add(NewPattern("2010*", ""), TargetID{"1", "webhook"})`
$DIR/internal/event/rules_test.go:253:2-253:61: `rules2Case5.Add(NewPattern("", "*"), TargetID{"2", "amqp"})`
$DIR/internal/event/rules_test.go:253:13-253:61: `.Add(NewPattern("", "*"), TargetID{"2", "amqp"})`
$DIR/internal/event/rules_test.go:255:2-255:72: `expectedResultCase5.Add(NewPattern("*", ""), TargetID{"1", "webhook"})`
$DIR/internal/event/rules_test.go:255:21-255:72: `.Add(NewPattern("*", ""), TargetID{"1", "webhook"})`
$DIR/internal/event/rules_test.go:270:21-270:55: `.rules.Difference(testCase.rules2)`
$DIR/internal/event/rules_test.go:272:14-272:57: `.DeepEqual(testCase.expectedResult, result)`
$DIR/internal/event/rulesmap_test.go:45:21-45:38: `.rulesMap.Clone()`
$DIR/internal/event/rulesmap_test.go:47:14-47:51: `.DeepEqual(result, testCase.rulesMap)`
$DIR/internal/event/rulesmap_test.go:51:3-51:37: `result.Add(testCase.rulesMapToAdd)`
$DIR/internal/event/rulesmap_test.go:51:9-51:37: `.Add(testCase.rulesMapToAdd)`
$DIR/internal/event/rulesmap_test.go:52:13-52:50: `.DeepEqual(result, testCase.rulesMap)`
$DIR/internal/event/rulesmap_test.go:70:2-70:82: `expectedResultCase3.add([]Name{ObjectCreatedAll}, "*", TargetID{"1", "webhook"})`
$DIR/internal/event/rulesmap_test.go:70:21-70:82: `.add([]Name{ObjectCreatedAll}, "*", TargetID{"1", "webhook"})`
$DIR/internal/event/rulesmap_test.go:83:3-83:48: `testCase.rulesMap.Add(testCase.rulesMapToAdd)`
$DIR/internal/event/rulesmap_test.go:83:11-83:48: `.rulesMap.Add(testCase.rulesMapToAdd)`
$DIR/internal/event/rulesmap_test.go:85:14-85:68: `.DeepEqual(testCase.rulesMap, testCase.expectedResult)`
$DIR/internal/event/rulesmap_test.go:101:2-101:76: `rulesMapCase3.add([]Name{ObjectCreatedAll}, "*", TargetID{"1", "webhook"})`
$DIR/internal/event/rulesmap_test.go:101:15-101:76: `.add([]Name{ObjectCreatedAll}, "*", TargetID{"1", "webhook"})`
$DIR/internal/event/rulesmap_test.go:116:3-116:51: `testCase.rulesMap.Remove(testCase.rulesMapToAdd)`
$DIR/internal/event/rulesmap_test.go:116:11-116:51: `.rulesMap.Remove(testCase.rulesMapToAdd)`
$DIR/internal/event/rulesmap_test.go:118:14-118:68: `.DeepEqual(testCase.rulesMap, testCase.expectedResult)`
$DIR/internal/event/rulesmap_test.go:132:2-132:73: `rulesMapCase4.add([]Name{ObjectCreatedAll}, "*", TargetID{"2", "amqp"})`
$DIR/internal/event/rulesmap_test.go:132:15-132:73: `.add([]Name{ObjectCreatedAll}, "*", TargetID{"2", "amqp"})`
$DIR/internal/event/rulesmap_test.go:147:21-147:77: `.rulesMap.Match(testCase.eventName, testCase.objectName)`
$DIR/internal/event/rulesmap_test.go:149:14-149:57: `.DeepEqual(result, testCase.expectedResult)`
$DIR/internal/event/rulesmap_test.go:157:2-158:33: `rulesMapCase1.add([]Name{ObjectAccessedGet, ObjectAccessedHead, ObjectAccessedGetRetention, ObjectAccessedGetLegalHold},
		"*", TargetID{"1", "webhook"})`
$DIR/internal/event/rulesmap_test.go:157:15-158:33: `.add([]Name{ObjectAccessedGet, ObjectAccessedHead, ObjectAccessedGetRetention, ObjectAccessedGetLegalHold},
		"*", TargetID{"1", "webhook"})`
$DIR/internal/event/rulesmap_test.go:161:2-164:35: `rulesMapCase2.add([]Name{
		ObjectAccessedGet, ObjectAccessedHead,
		ObjectCreatedPut, ObjectAccessedGetRetention, ObjectAccessedGetLegalHold,
	}, "*", TargetID{"1", "webhook"})`
$DIR/internal/event/rulesmap_test.go:161:15-164:35: `.add([]Name{
		ObjectAccessedGet, ObjectAccessedHead,
		ObjectCreatedPut, ObjectAccessedGetRetention, ObjectAccessedGetLegalHold,
	}, "*", TargetID{"1", "webhook"})`
$DIR/internal/event/rulesmap_test.go:167:2-167:87: `rulesMapCase3.add([]Name{ObjectRemovedDelete}, "2010*.jpg", TargetID{"1", "webhook"})`
$DIR/internal/event/rulesmap_test.go:167:15-167:87: `.add([]Name{ObjectRemovedDelete}, "2010*.jpg", TargetID{"1", "webhook"})`
$DIR/internal/event/rulesmap_test.go:183:14-183:57: `.DeepEqual(result, testCase.expectedResult)`
$DIR/internal/event/target/mysql_test.go:29:25-29:35: `.Drivers()`
$DIR/internal/event/target/mysql_test.go:31:4-31:16: `found = true`
$DIR/internal/event/target/nats_contrib_test.go:28:2-28:19: `opts.Port = 14222`
$DIR/internal/event/target/nats_contrib_test.go:29:17-29:34: `.RunServer(&opts)`
$DIR/internal/event/target/nats_contrib_test.go:30:9-30:20: `.Shutdown()`
$DIR/internal/event/target/nats_contrib_test.go:36:20-36:36: `.Port(opts.Port)`
$DIR/internal/event/target/nats_contrib_test.go:41:26-41:40: `.connectNats()`
$DIR/internal/event/target/nats_contrib_test.go:50:2-50:19: `opts.Port = 14223`
$DIR/internal/event/target/nats_contrib_test.go:51:2-51:29: `opts.Username = "testminio"`
$DIR/internal/event/target/nats_contrib_test.go:52:2-52:29: `opts.Password = "miniotest"`
$DIR/internal/event/target/nats_contrib_test.go:53:17-53:34: `.RunServer(&opts)`
$DIR/internal/event/target/nats_contrib_test.go:54:9-54:20: `.Shutdown()`
$DIR/internal/event/target/nats_contrib_test.go:60:20-60:36: `.Port(opts.Port)`
$DIR/internal/event/target/nats_contrib_test.go:68:26-68:40: `.connectNats()`
$DIR/internal/event/target/nats_contrib_test.go:77:2-77:19: `opts.Port = 14223`
$DIR/internal/event/target/nats_contrib_test.go:78:2-78:31: `opts.Authorization = "s3cr3t"`
$DIR/internal/event/target/nats_contrib_test.go:79:17-79:34: `.RunServer(&opts)`
$DIR/internal/event/target/nats_contrib_test.go:80:9-80:20: `.Shutdown()`
$DIR/internal/event/target/nats_contrib_test.go:86:20-86:36: `.Port(opts.Port)`
$DIR/internal/event/target/nats_contrib_test.go:93:26-93:40: `.connectNats()`
$DIR/internal/event/target/nats_tls_contrib_test.go:29:23-29:98: `.RunServerWithConfig(filepath.Join("testdata", "contrib", "nats_tls.conf"))`
$DIR/internal/event/target/nats_tls_contrib_test.go:29:52-29:97: `.Join("testdata", "contrib", "nats_tls.conf")`
$DIR/internal/event/target/nats_tls_contrib_test.go:30:9-30:20: `.Shutdown()`
$DIR/internal/event/target/nats_tls_contrib_test.go:36:20-36:36: `.Port(opts.Port)`
$DIR/internal/event/target/nats_tls_contrib_test.go:41:22-41:79: `.Join("testdata", "contrib", "certs", "root_ca_cert.pem")`
$DIR/internal/event/target/nats_tls_contrib_test.go:44:26-44:40: `.connectNats()`
$DIR/internal/event/target/nats_tls_contrib_test.go:52:23-52:110: `.RunServerWithConfig(filepath.Join("testdata", "contrib", "nats_tls_client_cert.conf"))`
$DIR/internal/event/target/nats_tls_contrib_test.go:52:52-52:109: `.Join("testdata", "contrib", "nats_tls_client_cert.conf")`
$DIR/internal/event/target/nats_tls_contrib_test.go:53:9-53:20: `.Shutdown()`
$DIR/internal/event/target/nats_tls_contrib_test.go:59:20-59:36: `.Port(opts.Port)`
$DIR/internal/event/target/nats_tls_contrib_test.go:64:22-64:79: `.Join("testdata", "contrib", "certs", "root_ca_cert.pem")`
$DIR/internal/event/target/nats_tls_contrib_test.go:65:22-65:83: `.Join("testdata", "contrib", "certs", "nats_client_cert.pem")`
$DIR/internal/event/target/nats_tls_contrib_test.go:66:22-66:82: `.Join("testdata", "contrib", "certs", "nats_client_key.pem")`
$DIR/internal/event/target/nats_tls_contrib_test.go:69:26-69:40: `.connectNats()`
$DIR/internal/event/target/nsq_test.go:27:2-35:3: `type fields struct {
		Enable      bool
		NSQDAddress xnet.Host
		Topic       string
		TLS         struct {
			Enable     bool
			SkipVerify bool
		}
	}`
$DIR/internal/event/target/nsq_test.go:87:3-96:5: `t.Run(tt.name, func(t *testing.T) {
			n := NSQArgs{
				Enable:      tt.fields.Enable,
				NSQDAddress: tt.fields.NSQDAddress,
				Topic:       tt.fields.Topic,
			}
			if err := n.Validate(); (err != nil) != tt.wantErr {
				t.Errorf("NSQArgs.Validate() error = %v, wantErr %v", err, tt.wantErr)
			}
		})`
$DIR/internal/event/target/nsq_test.go:87:4-96:5: `.Run(tt.name, func(t *testing.T) {
			n := NSQArgs{
				Enable:      tt.fields.Enable,
				NSQDAddress: tt.fields.NSQDAddress,
				Topic:       tt.fields.Topic,
			}
			if err := n.Validate(); (err != nil) != tt.wantErr {
				t.Errorf("NSQArgs.Validate() error = %v, wantErr %v", err, tt.wantErr)
			}
		})`
$DIR/internal/event/target/nsq_test.go:93:15-93:26: `.Validate()`
$DIR/internal/event/target/postgresql_test.go:29:25-29:35: `.Drivers()`
$DIR/internal/event/target/postgresql_test.go:31:4-31:16: `found = true`
$DIR/internal/event/target/queuestore_test.go:63:18-63:33: `.Put(testEvent)`
$DIR/internal/event/target/queuestore_test.go:68:21-68:28: `.List()`
$DIR/internal/event/target/queuestore_test.go:90:18-90:33: `.Put(testEvent)`
$DIR/internal/event/target/queuestore_test.go:94:25-94:32: `.List()`
$DIR/internal/event/target/queuestore_test.go:101:24-101:63: `.Get(strings.TrimSuffix(key, eventExt))`
$DIR/internal/event/target/queuestore_test.go:101:36-101:62: `.TrimSuffix(key, eventExt)`
$DIR/internal/event/target/queuestore_test.go:105:15-105:43: `.DeepEqual(testEvent, event)`
$DIR/internal/event/target/queuestore_test.go:127:18-127:33: `.Put(testEvent)`
$DIR/internal/event/target/queuestore_test.go:131:25-131:32: `.List()`
$DIR/internal/event/target/queuestore_test.go:138:16-138:55: `.Del(strings.TrimSuffix(key, eventExt))`
$DIR/internal/event/target/queuestore_test.go:138:28-138:54: `.TrimSuffix(key, eventExt)`
$DIR/internal/event/target/queuestore_test.go:147:21-147:28: `.List()`
$DIR/internal/event/target/queuestore_test.go:169:18-169:33: `.Put(testEvent)`
$DIR/internal/event/target/queuestore_test.go:174:17-174:32: `.Put(testEvent)`
$DIR/internal/event/target/queuestore_test.go:191:18-191:33: `.Put(testEvent)`
$DIR/internal/event/target/queuestore_test.go:196:21-196:28: `.List()`
$DIR/internal/event/target/queuestore_test.go:206:2-206:39: `store, err = setUpStore(queueDir, 10)`
$DIR/internal/event/target/queuestore_test.go:210:2-210:27: `names, err = store.List()`
$DIR/internal/event/target/queuestore_test.go:210:20-210:27: `.List()`
$DIR/internal/event/target/queuestore_test.go:218:24-218:30: `.Len()`
$DIR/internal/event/target/queuestore_test.go:224:15-224:24: `.Del(key)`
$DIR/internal/event/target/queuestore_test.go:230:19-230:26: `.List()`
$DIR/internal/event/targetid_test.go:36:21-36:34: `.tid.String()`
$DIR/internal/event/targetid_test.go:56:18-56:45: `.tid.ToARN(testCase.region)`
$DIR/internal/event/targetid_test.go:76:24-76:42: `.tid.MarshalJSON()`
$DIR/internal/event/targetid_test.go:84:15-84:54: `.DeepEqual(data, testCase.expectedData)`
$DIR/internal/event/targetid_test.go:105:18-105:47: `.UnmarshalJSON(testCase.data)`
$DIR/internal/event/targetidset_test.go:36:21-36:33: `.set.Clone()`
$DIR/internal/event/targetidset_test.go:38:14-38:46: `.DeepEqual(result, testCase.set)`
$DIR/internal/event/targetidset_test.go:42:3-42:37: `result.add(testCase.targetIDToAdd)`
$DIR/internal/event/targetidset_test.go:42:9-42:37: `.add(testCase.targetIDToAdd)`
$DIR/internal/event/targetidset_test.go:43:13-43:45: `.DeepEqual(result, testCase.set)`
$DIR/internal/event/targetidset_test.go:63:21-63:50: `.set.Union(testCase.setToAdd)`
$DIR/internal/event/targetidset_test.go:65:14-65:57: `.DeepEqual(testCase.expectedResult, result)`
$DIR/internal/event/targetidset_test.go:85:21-85:58: `.set.Difference(testCase.setToRemove)`
$DIR/internal/event/targetidset_test.go:87:14-87:57: `.DeepEqual(testCase.expectedResult, result)`
$DIR/internal/event/targetidset_test.go:106:14-106:57: `.DeepEqual(testCase.expectedResult, result)`
$DIR/internal/event/targetlist_test.go:89:27-89:88: `.Add(&ExampleTarget{TargetID{"2", "testcase"}, false, false})`
$DIR/internal/event/targetlist_test.go:90:3-90:13: `panic(err)`
$DIR/internal/event/targetlist_test.go:94:27-94:88: `.Add(&ExampleTarget{TargetID{"3", "testcase"}, false, false})`
$DIR/internal/event/targetlist_test.go:95:3-95:13: `panic(err)`
$DIR/internal/event/targetlist_test.go:110:18-110:50: `.targetList.Add(testCase.target)`
$DIR/internal/event/targetlist_test.go:118:22-118:40: `.targetList.List()`
$DIR/internal/event/targetlist_test.go:127:16-127:48: `.DeepEqual(targetID1, targetID2)`
$DIR/internal/event/targetlist_test.go:128:7-128:19: `found = true`
$DIR/internal/event/targetlist_test.go:144:27-144:88: `.Add(&ExampleTarget{TargetID{"2", "testcase"}, false, false})`
$DIR/internal/event/targetlist_test.go:145:3-145:13: `panic(err)`
$DIR/internal/event/targetlist_test.go:149:27-149:88: `.Add(&ExampleTarget{TargetID{"3", "testcase"}, false, false})`
$DIR/internal/event/targetlist_test.go:150:3-150:13: `panic(err)`
$DIR/internal/event/targetlist_test.go:164:21-164:58: `.targetList.Exists(testCase.targetID)`
$DIR/internal/event/targetlist_test.go:176:27-176:88: `.Add(&ExampleTarget{TargetID{"2", "testcase"}, false, false})`
$DIR/internal/event/targetlist_test.go:177:3-177:13: `panic(err)`
$DIR/internal/event/targetlist_test.go:181:27-181:88: `.Add(&ExampleTarget{TargetID{"3", "testcase"}, false, false})`
$DIR/internal/event/targetlist_test.go:182:3-182:13: `panic(err)`
$DIR/internal/event/targetlist_test.go:184:27-184:87: `.Add(&ExampleTarget{TargetID{"1", "webhook"}, false, false})`
$DIR/internal/event/targetlist_test.go:185:3-185:13: `panic(err)`
$DIR/internal/event/targetlist_test.go:198:21-198:39: `.targetList.List()`
$DIR/internal/event/targetlist_test.go:207:15-207:47: `.DeepEqual(targetID1, targetID2)`
$DIR/internal/event/targetlist_test.go:208:6-208:18: `found = true`
$DIR/internal/event/targetlist_test.go:223:27-223:88: `.Add(&ExampleTarget{TargetID{"2", "testcase"}, false, false})`
$DIR/internal/event/targetlist_test.go:224:3-224:13: `panic(err)`
$DIR/internal/event/targetlist_test.go:228:27-228:88: `.Add(&ExampleTarget{TargetID{"3", "testcase"}, false, false})`
$DIR/internal/event/targetlist_test.go:229:3-229:13: `panic(err)`
$DIR/internal/event/targetlist_test.go:233:27-233:87: `.Add(&ExampleTarget{TargetID{"4", "testcase"}, true, false})`
$DIR/internal/event/targetlist_test.go:234:3-234:13: `panic(err)`
$DIR/internal/event/targetlist_test.go:250:3-252:12: `testCase.targetList.Send(Event{}, map[TargetID]struct{}{
			testCase.targetID: {},
		}, resCh)`
$DIR/internal/event/targetlist_test.go:250:11-252:12: `.targetList.Send(Event{}, map[TargetID]struct{}{
			testCase.targetID: {},
		}, resCh)`
$DIR/internal/hash/reader_test.go:30:27-30:53: `.NewReader([]byte("abcd"))`
$DIR/internal/hash/reader_test.go:34:2-34:33: `_, err = io.Copy(io.Discard, r)`
$DIR/internal/hash/reader_test.go:34:13-34:33: `.Copy(io.Discard, r)`
$DIR/internal/hash/reader_test.go:38:6-38:21: `.MD5HexString()`
$DIR/internal/hash/reader_test.go:41:6-41:24: `.SHA256HexString()`
$DIR/internal/hash/reader_test.go:44:6-44:24: `.MD5Base64String()`
$DIR/internal/hash/reader_test.go:47:6-47:13: `.Size()`
$DIR/internal/hash/reader_test.go:50:6-50:19: `.ActualSize()`
$DIR/internal/hash/reader_test.go:53:25-53:74: `.DecodeString("e2fc714c4727ee9395f324cd2e7f331f")`
$DIR/internal/hash/reader_test.go:57:11-57:39: `.Equal(r.MD5(), expectedMD5)`
$DIR/internal/hash/reader_test.go:57:19-57:25: `.MD5()`
$DIR/internal/hash/reader_test.go:60:11-60:46: `.Equal(r.MD5Current(), expectedMD5)`
$DIR/internal/hash/reader_test.go:60:19-60:32: `.MD5Current()`
$DIR/internal/hash/reader_test.go:63:28-63:109: `.DecodeString("88d4266fd4e6338d13b845fcf289579d209c897823b9217da3e161936f031589")`
$DIR/internal/hash/reader_test.go:67:11-67:45: `.Equal(r.SHA256(), expectedSHA256)`
$DIR/internal/hash/reader_test.go:67:19-67:28: `.SHA256()`
$DIR/internal/hash/reader_test.go:84:21-84:47: `.NewReader([]byte("abcd"))`
$DIR/internal/hash/reader_test.go:90:21-90:47: `.NewReader([]byte("abcd"))`
$DIR/internal/hash/reader_test.go:101:21-101:47: `.NewReader([]byte("abcd"))`
$DIR/internal/hash/reader_test.go:112:35-112:61: `.NewReader([]byte("abcd"))`
$DIR/internal/hash/reader_test.go:118:35-118:61: `.NewReader([]byte("abcd"))`
$DIR/internal/hash/reader_test.go:129:35-129:61: `.NewReader([]byte("abcd"))`
$DIR/internal/hash/reader_test.go:136:35-136:86: `.NewReader([]byte("abcd-more-stuff-to-be ignored"))`
$DIR/internal/hash/reader_test.go:143:35-143:86: `.NewReader([]byte("abcd-more-stuff-to-be ignored"))`
$DIR/internal/hash/reader_test.go:150:35-150:61: `.NewReader([]byte("abcd"))`
$DIR/internal/hash/reader_test.go:161:21-161:64: `.NewReader([]byte("abcd-morethan-4-bytes"))`
$DIR/internal/hash/reader_test.go:168:35-168:61: `.NewReader([]byte("abcd"))`
$DIR/internal/hash/reader_test.go:175:21-175:64: `.NewReader([]byte("abcd-morethan-4-bytes"))`
$DIR/internal/hash/reader_test.go:183:35-183:71: `.NewReader([]byte("abcd-morestuff"))`
$DIR/internal/hash/reader_test.go:190:3-201:5: `t.Run(fmt.Sprintf("case-%d", i+1), func(t *testing.T) {
			r, err := NewReader(testCase.src, testCase.size, testCase.md5hex, testCase.sha256hex, testCase.actualSize)
			if err != nil {
				t.Fatalf("Test %q: Initializing reader failed %s", testCase.desc, err)
			}
			_, err = io.Copy(io.Discard, r)
			if err != nil {
				if err.Error() != testCase.err.Error() {
					t.Errorf("Test %q: Expected error %s, got error %s", testCase.desc, testCase.err, err)
				}
			}
		})`
$DIR/internal/hash/reader_test.go:190:4-201:5: `.Run(fmt.Sprintf("case-%d", i+1), func(t *testing.T) {
			r, err := NewReader(testCase.src, testCase.size, testCase.md5hex, testCase.sha256hex, testCase.actualSize)
			if err != nil {
				t.Fatalf("Test %q: Initializing reader failed %s", testCase.desc, err)
			}
			_, err = io.Copy(io.Discard, r)
			if err != nil {
				if err.Error() != testCase.err.Error() {
					t.Errorf("Test %q: Expected error %s, got error %s", testCase.desc, testCase.err, err)
				}
			}
		})`
$DIR/internal/hash/reader_test.go:190:12-190:36: `.Sprintf("case-%d", i+1)`
$DIR/internal/hash/reader_test.go:195:4-195:35: `_, err = io.Copy(io.Discard, r)`
$DIR/internal/hash/reader_test.go:195:15-195:35: `.Copy(io.Discard, r)`
$DIR/internal/hash/reader_test.go:225:21-225:47: `.NewReader([]byte("abcd"))`
$DIR/internal/hash/reader_test.go:233:21-233:47: `.NewReader([]byte("abcd"))`
$DIR/internal/hash/reader_test.go:241:35-241:61: `.NewReader([]byte("abcd"))`
$DIR/internal/hash/reader_test.go:248:35-248:61: `.NewReader([]byte("abcd"))`
$DIR/internal/hash/reader_test.go:256:35-256:61: `.NewReader([]byte("abcd"))`
$DIR/internal/hash/reader_test.go:264:35-264:61: `.NewReader([]byte("abcd"))`
$DIR/internal/hash/reader_test.go:272:35-272:61: `.NewReader([]byte("abcd"))`
$DIR/internal/hash/reader_test.go:280:21-280:47: `.NewReader([]byte("abcd"))`
$DIR/internal/hash/reader_test.go:287:35-287:71: `.NewReader([]byte("abcd-morestuff"))`
$DIR/internal/hash/reader_test.go:295:3-303:5: `t.Run(fmt.Sprintf("case-%d", i+1), func(t *testing.T) {
			_, err := NewReader(testCase.src, testCase.size, testCase.md5hex, testCase.sha256hex, testCase.actualSize)
			if err != nil && testCase.success {
				t.Errorf("Test %q: Expected success, but got error %s instead", testCase.desc, err)
			}
			if err == nil && !testCase.success {
				t.Errorf("Test %q: Expected error, but got success", testCase.desc)
			}
		})`
$DIR/internal/hash/reader_test.go:295:4-303:5: `.Run(fmt.Sprintf("case-%d", i+1), func(t *testing.T) {
			_, err := NewReader(testCase.src, testCase.size, testCase.md5hex, testCase.sha256hex, testCase.actualSize)
			if err != nil && testCase.success {
				t.Errorf("Test %q: Expected success, but got error %s instead", testCase.desc, err)
			}
			if err == nil && !testCase.success {
				t.Errorf("Test %q: Expected error, but got success", testCase.desc)
			}
		})`
$DIR/internal/hash/reader_test.go:295:12-295:36: `.Sprintf("case-%d", i+1)`
$DIR/internal/http/listener_test.go:141:41-141:53: `.Duration(0)`
$DIR/internal/http/listener_test.go:141:59-141:71: `.Duration(0)`
$DIR/internal/http/listener_test.go:141:77-141:89: `.Duration(0)`
$DIR/internal/http/listener_test.go:142:39-142:51: `.Duration(0)`
$DIR/internal/http/listener_test.go:142:57-142:69: `.Duration(0)`
$DIR/internal/http/listener_test.go:142:75-142:87: `.Duration(0)`
$DIR/internal/http/listener_test.go:143:34-143:46: `.Duration(0)`
$DIR/internal/http/listener_test.go:143:52-143:64: `.Duration(0)`
$DIR/internal/http/listener_test.go:143:70-143:82: `.Duration(0)`
$DIR/internal/http/listener_test.go:144:40-144:52: `.Duration(0)`
$DIR/internal/http/listener_test.go:144:58-144:70: `.Duration(0)`
$DIR/internal/http/listener_test.go:144:76-144:88: `.Duration(0)`
$DIR/internal/http/listener_test.go:145:37-145:49: `.Duration(0)`
$DIR/internal/http/listener_test.go:145:55-145:67: `.Duration(0)`
$DIR/internal/http/listener_test.go:145:73-145:85: `.Duration(0)`
$DIR/internal/http/listener_test.go:146:60-146:72: `.Duration(0)`
$DIR/internal/http/listener_test.go:146:78-146:90: `.Duration(0)`
$DIR/internal/http/listener_test.go:146:96-146:108: `.Duration(0)`
$DIR/internal/http/listener_test.go:147:59-147:71: `.Duration(0)`
$DIR/internal/http/listener_test.go:147:77-147:89: `.Duration(0)`
$DIR/internal/http/listener_test.go:147:95-147:107: `.Duration(0)`
$DIR/internal/http/listener_test.go:148:33-148:45: `.Duration(0)`
$DIR/internal/http/listener_test.go:148:51-148:63: `.Duration(0)`
$DIR/internal/http/listener_test.go:148:69-148:81: `.Duration(0)`
$DIR/internal/http/listener_test.go:149:33-149:45: `.Duration(0)`
$DIR/internal/http/listener_test.go:149:51-149:63: `.Duration(0)`
$DIR/internal/http/listener_test.go:149:69-149:81: `.Duration(0)`
$DIR/internal/http/listener_test.go:150:47-150:59: `.Duration(0)`
$DIR/internal/http/listener_test.go:150:65-150:77: `.Duration(0)`
$DIR/internal/http/listener_test.go:150:83-150:95: `.Duration(0)`
$DIR/internal/http/listener_test.go:154:43-154:56: `.Background()`
$DIR/internal/http/listener_test.go:173:3-173:11: `t.Skip()`
$DIR/internal/http/listener_test.go:173:4-173:11: `.Skip()`
$DIR/internal/http/listener_test.go:190:43-190:56: `.Background()`
$DIR/internal/http/listener_test.go:194:14-194:89: `.Contains(err.Error(), "The requested address is not valid in its context")`
$DIR/internal/http/listener_test.go:198:14-198:68: `.Contains(err.Error(), "bind: address already in use")`
$DIR/internal/http/listener_test.go:204:38-204:46: `.Addrs()`
$DIR/internal/http/listener_test.go:205:20-205:53: `.Dial("tcp", serverAddr.String())`
$DIR/internal/http/listener_test.go:205:43-205:52: `.String()`
$DIR/internal/http/listener_test.go:218:3-218:11: `t.Skip()`
$DIR/internal/http/listener_test.go:218:4-218:11: `.Skip()`
$DIR/internal/http/listener_test.go:224:3-224:47: `casePorts = append(casePorts, getNextPort())`
$DIR/internal/http/listener_test.go:240:43-240:56: `.Background()`
$DIR/internal/http/listener_test.go:244:14-244:89: `.Contains(err.Error(), "The requested address is not valid in its context")`
$DIR/internal/http/listener_test.go:248:14-248:68: `.Contains(err.Error(), "bind: address already in use")`
$DIR/internal/http/listener_test.go:254:19-254:26: `.Addr()`
$DIR/internal/http/listener_test.go:255:10-255:19: `.String()`
$DIR/internal/http/listener_test.go:265:3-265:11: `t.Skip()`
$DIR/internal/http/listener_test.go:265:4-265:11: `.Skip()`
$DIR/internal/http/listener_test.go:271:3-271:47: `casePorts = append(casePorts, getNextPort())`
$DIR/internal/http/listener_test.go:278:46-278:91: `.CreateStringSet("127.0.0.1:" + casePorts[0])`
$DIR/internal/http/listener_test.go:279:53-279:105: `.CreateStringSet(nonLoopBackIP + ":" + casePorts[1])`
$DIR/internal/http/listener_test.go:280:82-280:157: `.CreateStringSet("127.0.0.1:"+casePorts[2], nonLoopBackIP+":"+casePorts[2])`
$DIR/internal/http/listener_test.go:281:46-281:91: `.CreateStringSet("127.0.0.1:" + casePorts[3])`
$DIR/internal/http/listener_test.go:282:53-282:105: `.CreateStringSet(nonLoopBackIP + ":" + casePorts[4])`
$DIR/internal/http/listener_test.go:283:82-283:157: `.CreateStringSet("127.0.0.1:"+casePorts[5], nonLoopBackIP+":"+casePorts[5])`
$DIR/internal/http/listener_test.go:287:43-287:56: `.Background()`
$DIR/internal/http/listener_test.go:291:14-291:89: `.Contains(err.Error(), "The requested address is not valid in its context")`
$DIR/internal/http/listener_test.go:295:14-295:68: `.Contains(err.Error(), "bind: address already in use")`
$DIR/internal/http/listener_test.go:301:20-301:28: `.Addrs()`
$DIR/internal/http/listener_test.go:302:17-302:32: `.NewStringSet()`
$DIR/internal/http/listener_test.go:304:4-304:30: `addrSet.Add(addr.String())`
$DIR/internal/http/listener_test.go:304:11-304:30: `.Add(addr.String())`
$DIR/internal/http/listener_test.go:304:20-304:29: `.String()`
$DIR/internal/http/listener_test.go:307:14-307:45: `.Equals(testCase.expectedAddrs)`
$DIR/internal/http/server_test.go:32:17-34:4: `.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		fmt.Fprintf(w, "Hello, world")
	})`
$DIR/internal/http/server_test.go:33:3-33:33: `fmt.Fprintf(w, "Hello, world")`
$DIR/internal/http/server_test.go:33:6-33:33: `.Fprintf(w, "Hello, world")`
$DIR/internal/http/server_test.go:50:38-51:32: `.
			UseHandler(testCase.handler)`
$DIR/internal/http/server_test.go:51:32-52:46: `.
			UseShutdownTimeout(DefaultShutdownTimeout)`
$DIR/internal/http/server_test.go:54:4-57:6: `server = server.UseTLSConfig(&tls.Config{
				PreferServerCipherSuites: true,
				GetCertificate:           testCase.certFn,
			})`
$DIR/internal/http/server_test.go:54:19-57:6: `.UseTLSConfig(&tls.Config{
				PreferServerCipherSuites: true,
				GetCertificate:           testCase.certFn,
			})`
$DIR/internal/http/server_test.go:63:14-63:54: `.DeepEqual(server.Addrs, testCase.addrs)`
$DIR/internal/ioutil/ioutil_test.go:44:13-44:32: `.Write([]byte("1"))`
$DIR/internal/ioutil/ioutil_test.go:49:2-49:31: `_, err = w.Write([]byte("1"))`
$DIR/internal/ioutil/ioutil_test.go:49:12-49:31: `.Write([]byte("1"))`
$DIR/internal/ioutil/ioutil_test.go:53:2-53:92: `w = NewDeadlineWriter(&sleepWriter{timeout: 100 * time.Millisecond}, 600*time.Millisecond)`
$DIR/internal/ioutil/ioutil_test.go:54:13-54:35: `.Write([]byte("abcd"))`
$DIR/internal/ioutil/ioutil_test.go:66:11-66:24: `.HasWritten()`
$DIR/internal/ioutil/ioutil_test.go:69:2-69:19: `writer.Write(nil)`
$DIR/internal/ioutil/ioutil_test.go:69:8-69:19: `.Write(nil)`
$DIR/internal/ioutil/ioutil_test.go:70:12-70:25: `.HasWritten()`
$DIR/internal/ioutil/ioutil_test.go:74:2-74:35: `writer = WriteOnClose(io.Discard)`
$DIR/internal/ioutil/ioutil_test.go:76:12-76:25: `.HasWritten()`
$DIR/internal/ioutil/ioutil_test.go:83:14-83:33: `.CreateTemp("", "")`
$DIR/internal/ioutil/ioutil_test.go:87:12-87:19: `.Name()`
$DIR/internal/ioutil/ioutil_test.go:88:10-88:24: `.Remove(name1)`
$DIR/internal/ioutil/ioutil_test.go:89:2-89:29: `f.WriteString("aaaaaaaaaa")`
$DIR/internal/ioutil/ioutil_test.go:89:3-89:29: `.WriteString("aaaaaaaaaa")`
$DIR/internal/ioutil/ioutil_test.go:92:2-92:32: `f, err = os.CreateTemp("", "")`
$DIR/internal/ioutil/ioutil_test.go:92:13-92:32: `.CreateTemp("", "")`
$DIR/internal/ioutil/ioutil_test.go:96:12-96:19: `.Name()`
$DIR/internal/ioutil/ioutil_test.go:97:10-97:24: `.Remove(name2)`
$DIR/internal/ioutil/ioutil_test.go:98:2-98:29: `f.WriteString("bbbbbbbbbb")`
$DIR/internal/ioutil/ioutil_test.go:98:3-98:29: `.WriteString("bbbbbbbbbb")`
$DIR/internal/ioutil/ioutil_test.go:105:14-105:30: `.ReadFile(name1)`
$DIR/internal/ioutil/ioutil_test.go:122:9-122:31: `.NewBuffer([]byte(""))`
$DIR/internal/ioutil/ioutil_test.go:123:9-123:31: `.NewBuffer([]byte(""))`
$DIR/internal/ioutil/ioutil_test.go:124:9-124:34: `.NewBuffer([]byte("abc"))`
$DIR/internal/ioutil/ioutil_test.go:125:9-125:34: `.NewBuffer([]byte("abc"))`
$DIR/internal/ioutil/ioutil_test.go:126:9-126:34: `.NewBuffer([]byte("abc"))`
$DIR/internal/ioutil/ioutil_test.go:127:9-127:34: `.NewBuffer([]byte("abc"))`
$DIR/internal/ioutil/ioutil_test.go:128:9-128:34: `.NewBuffer([]byte("abc"))`
$DIR/internal/ioutil/ioutil_test.go:132:15-132:26: `.ReadAll(r)`
$DIR/internal/ioutil/ioutil_test.go:143:14-143:33: `.CreateTemp("", "")`
$DIR/internal/ioutil/ioutil_test.go:147:14-147:21: `.Name()`
$DIR/internal/ioutil/ioutil_test.go:149:10-149:27: `.Remove(f.Name())`
$DIR/internal/ioutil/ioutil_test.go:149:19-149:26: `.Name()`
$DIR/internal/ioutil/ioutil_test.go:150:16-150:30: `.Stat(tmpFile)`
$DIR/internal/ioutil/ioutil_test.go:154:16-154:30: `.Stat(tmpFile)`
$DIR/internal/ioutil/ioutil_test.go:161:13-161:54: `.WriteFile(tmpFile, []byte("aaa"), 0o644)`
$DIR/internal/ioutil/ioutil_test.go:164:2-164:29: `fi2, err = os.Stat(tmpFile)`
$DIR/internal/ioutil/ioutil_test.go:164:15-164:29: `.Stat(tmpFile)`
$DIR/internal/jwt/parser_test.go:180:3-212:5: `t.Run(data.name, func(t *testing.T) {
			// Parse the token
			var err error

			// Figure out correct claims type
			switch claims := data.claims.(type) {
			case *MapClaims:
				if data.tokenString == "" {
					data.tokenString = mapClaimsToken(claims)
				}
				err = ParseWithClaims(data.tokenString, &MapClaims{}, data.keyfunc)
			case *StandardClaims:
				if data.tokenString == "" {
					data.tokenString = standardClaimsToken(claims)
				}
				err = ParseWithStandardClaims(data.tokenString, &StandardClaims{}, []byte("HelloSecret"))
			}

			if data.valid && err != nil {
				t.Errorf("Error while verifying token: %T:%v", err, err)
			}

			if !data.valid && err == nil {
				t.Errorf("Invalid token passed validation")
			}

			if data.errors != 0 {
				_, ok := err.(*jwt.ValidationError)
				if !ok {
					t.Errorf("Expected *jwt.ValidationError, but got %#v instead", err)
				}
			}
		})`
$DIR/internal/jwt/parser_test.go:180:4-212:5: `.Run(data.name, func(t *testing.T) {
			// Parse the token
			var err error

			// Figure out correct claims type
			switch claims := data.claims.(type) {
			case *MapClaims:
				if data.tokenString == "" {
					data.tokenString = mapClaimsToken(claims)
				}
				err = ParseWithClaims(data.tokenString, &MapClaims{}, data.keyfunc)
			case *StandardClaims:
				if data.tokenString == "" {
					data.tokenString = standardClaimsToken(claims)
				}
				err = ParseWithStandardClaims(data.tokenString, &StandardClaims{}, []byte("HelloSecret"))
			}

			if data.valid && err != nil {
				t.Errorf("Error while verifying token: %T:%v", err, err)
			}

			if !data.valid && err == nil {
				t.Errorf("Invalid token passed validation")
			}

			if data.errors != 0 {
				_, ok := err.(*jwt.ValidationError)
				if !ok {
					t.Errorf("Expected *jwt.ValidationError, but got %#v instead", err)
				}
			}
		})`
$DIR/internal/jwt/parser_test.go:188:6-188:47: `data.tokenString = mapClaimsToken(claims)`
$DIR/internal/jwt/parser_test.go:190:5-190:72: `err = ParseWithClaims(data.tokenString, &MapClaims{}, data.keyfunc)`
$DIR/internal/jwt/parser_test.go:193:6-193:52: `data.tokenString = standardClaimsToken(claims)`
$DIR/internal/jwt/parser_test.go:195:5-195:94: `err = ParseWithStandardClaims(data.tokenString, &StandardClaims{}, []byte("HelloSecret"))`
$DIR/internal/kms/dek_test.go:48:20-48:38: `.Key.MarshalText()`
$DIR/internal/kms/dek_test.go:54:15-54:35: `.UnmarshalText(text)`
$DIR/internal/kms/dek_test.go:60:12-60:55: `.Equal(key.Ciphertext, test.Key.Ciphertext)`
$DIR/internal/kms/single-key_test.go:33:17-33:72: `.GenerateKey(context.Background(), "my-key", Context{})`
$DIR/internal/kms/single-key_test.go:33:37-33:50: `.Background()`
$DIR/internal/kms/single-key_test.go:37:23-37:72: `.DecryptKey(key.KeyID, key.Ciphertext, Context{})`
$DIR/internal/kms/single-key_test.go:41:11-41:43: `.Equal(key.Plaintext, plaintext)`
$DIR/internal/kms/single-key_test.go:53:25-53:66: `.StdEncoding.DecodeString(test.Plaintext)`
$DIR/internal/kms/single-key_test.go:57:28-57:70: `.StdEncoding.DecodeString(test.Ciphertext)`
$DIR/internal/kms/single-key_test.go:61:24-61:73: `.DecryptKey(test.KeyID, ciphertext, test.Context)`
$DIR/internal/kms/single-key_test.go:65:12-65:38: `.Equal(plaintext, dataKey)`
$DIR/internal/lock/lock_test.go:28:14-28:37: `.CreateTemp("", "lock")`
$DIR/internal/lock/lock_test.go:34:3-34:28: `err = os.Remove(f.Name())`
$DIR/internal/lock/lock_test.go:34:11-34:28: `.Remove(f.Name())`
$DIR/internal/lock/lock_test.go:34:20-34:27: `.Name()`
$DIR/internal/lock/lock_test.go:40:2-40:55: `_, err = LockedOpenFile(f.Name(), os.O_APPEND, 0o600)`
$DIR/internal/lock/lock_test.go:40:27-40:34: `.Name()`
$DIR/internal/lock/lock_test.go:48:8-48:18: `.TempDir()`
$DIR/internal/lock/lock_test.go:58:14-58:37: `.CreateTemp("", "lock")`
$DIR/internal/lock/lock_test.go:64:3-64:28: `err = os.Remove(f.Name())`
$DIR/internal/lock/lock_test.go:64:11-64:28: `.Remove(f.Name())`
$DIR/internal/lock/lock_test.go:64:20-64:27: `.Name()`
$DIR/internal/lock/lock_test.go:70:31-70:38: `.Name()`
$DIR/internal/lock/lock_test.go:74:17-74:28: `.IsClosed()`
$DIR/internal/lock/lock_test.go:80:2-80:18: `rlk.IncLockRef()`
$DIR/internal/lock/lock_test.go:80:5-80:18: `.IncLockRef()`
$DIR/internal/lock/lock_test.go:82:2-82:27: `isClosed = rlk.IsClosed()`
$DIR/internal/lock/lock_test.go:82:16-82:27: `.IsClosed()`
$DIR/internal/lock/lock_test.go:92:2-92:27: `isClosed = rlk.IsClosed()`
$DIR/internal/lock/lock_test.go:92:16-92:27: `.IsClosed()`
$DIR/internal/lock/lock_test.go:103:2-103:27: `isClosed = rlk.IsClosed()`
$DIR/internal/lock/lock_test.go:103:16-103:27: `.IsClosed()`
$DIR/internal/lock/lock_test.go:113:2-113:30: `_, err = newRLockedFile(nil)`
$DIR/internal/lock/lock_test.go:121:14-121:37: `.CreateTemp("", "lock")`
$DIR/internal/lock/lock_test.go:127:3-127:28: `err = os.Remove(f.Name())`
$DIR/internal/lock/lock_test.go:127:11-127:28: `.Remove(f.Name())`
$DIR/internal/lock/lock_test.go:127:20-127:27: `.Name()`
$DIR/internal/lock/lock_test.go:134:28-134:35: `.Name()`
$DIR/internal/lock/lock_test.go:145:31-145:38: `.Name()`
$DIR/internal/lock/lock_test.go:153:32-153:39: `.Name()`
$DIR/internal/lock/lock_test.go:158:3-158:23: `locked <- struct{}{}`
$DIR/internal/lock/lock_test.go:168:13-168:43: `.After(100 * time.Millisecond)`
$DIR/internal/lock/lock_test.go:179:13-179:36: `.After(1 * time.Second)`
$DIR/internal/lock/lock_windows_test.go:35:27-35:44: `.Repeat("o", 248)`
$DIR/internal/lock/lock_windows_test.go:54:16-54:55: `.Replace(test.in, "long", veryLong, -1)`
$DIR/internal/lock/lock_windows_test.go:55:18-55:59: `.Replace(test.want, "long", veryLong, -1)`
$DIR/internal/lock/lock_windows_test.go:57:4-57:52: `got = strings.Replace(got, veryLong, "long", -1)`
$DIR/internal/lock/lock_windows_test.go:57:17-57:52: `.Replace(got, veryLong, "long", -1)`
$DIR/internal/lsync/lrwmutex_test.go:173:15-173:50: `.GOMAXPROCS(runtime.GOMAXPROCS(-1))`
$DIR/internal/lsync/lrwmutex_test.go:173:34-173:49: `.GOMAXPROCS(-1)`
$DIR/internal/lsync/lrwmutex_test.go:174:2-174:29: `doTestParallelReaders(1, 4)`
$DIR/internal/lsync/lrwmutex_test.go:175:2-175:29: `doTestParallelReaders(3, 4)`
$DIR/internal/lsync/lrwmutex_test.go:237:15-237:50: `.GOMAXPROCS(runtime.GOMAXPROCS(-1))`
$DIR/internal/lsync/lrwmutex_test.go:237:34-237:49: `.GOMAXPROCS(-1)`
$DIR/internal/lsync/lrwmutex_test.go:239:12-239:20: `.Short()`
$DIR/internal/lsync/lrwmutex_test.go:240:3-240:8: `n = 5`
$DIR/internal/lsync/lrwmutex_test.go:242:2-242:24: `HammerRWMutex(1, 1, n)`
$DIR/internal/lsync/lrwmutex_test.go:243:2-243:24: `HammerRWMutex(1, 3, n)`
$DIR/internal/lsync/lrwmutex_test.go:244:2-244:25: `HammerRWMutex(1, 10, n)`
$DIR/internal/lsync/lrwmutex_test.go:245:2-245:24: `HammerRWMutex(4, 1, n)`
$DIR/internal/lsync/lrwmutex_test.go:246:2-246:24: `HammerRWMutex(4, 3, n)`
$DIR/internal/lsync/lrwmutex_test.go:247:2-247:25: `HammerRWMutex(4, 10, n)`
$DIR/internal/lsync/lrwmutex_test.go:248:2-248:25: `HammerRWMutex(10, 1, n)`
$DIR/internal/lsync/lrwmutex_test.go:249:2-249:25: `HammerRWMutex(10, 3, n)`
$DIR/internal/lsync/lrwmutex_test.go:250:2-250:26: `HammerRWMutex(10, 10, n)`
$DIR/internal/lsync/lrwmutex_test.go:260:2-260:20: `rl = wl.DRLocker()`
$DIR/internal/lsync/lrwmutex_test.go:260:9-260:20: `.DRLocker()`
$DIR/internal/lsync/lrwmutex_test.go:264:4-264:13: `rl.Lock()`
$DIR/internal/lsync/lrwmutex_test.go:264:6-264:13: `.Lock()`
$DIR/internal/lsync/lrwmutex_test.go:265:4-265:13: `rl.Lock()`
$DIR/internal/lsync/lrwmutex_test.go:265:6-265:13: `.Lock()`
$DIR/internal/lsync/lrwmutex_test.go:266:4-266:19: `rlocked <- true`
$DIR/internal/lsync/lrwmutex_test.go:267:4-267:13: `wl.Lock()`
$DIR/internal/lsync/lrwmutex_test.go:267:6-267:13: `.Lock()`
$DIR/internal/lsync/lrwmutex_test.go:268:4-268:19: `wlocked <- true`
$DIR/internal/lsync/lrwmutex_test.go:272:3-272:12: `<-rlocked`
$DIR/internal/lsync/lrwmutex_test.go:273:3-273:14: `rl.Unlock()`
$DIR/internal/lsync/lrwmutex_test.go:273:5-273:14: `.Unlock()`
$DIR/internal/lsync/lrwmutex_test.go:279:3-279:14: `rl.Unlock()`
$DIR/internal/lsync/lrwmutex_test.go:279:5-279:14: `.Unlock()`
$DIR/internal/lsync/lrwmutex_test.go:280:3-280:12: `<-wlocked`
$DIR/internal/lsync/lrwmutex_test.go:286:3-286:14: `wl.Unlock()`
$DIR/internal/lsync/lrwmutex_test.go:286:5-286:14: `.Unlock()`
$DIR/internal/lsync/lrwmutex_test.go:309:2-309:12: `mu.RLock()`
$DIR/internal/lsync/lrwmutex_test.go:309:4-309:12: `.RLock()`
$DIR/internal/lsync/lrwmutex_test.go:332:2-332:11: `mu.Lock()`
$DIR/internal/lsync/lrwmutex_test.go:332:4-332:11: `.Lock()`
$DIR/internal/mountinfo/mountinfo_linux_test.go:40:10-40:20: `.TempDir()`
$DIR/internal/mountinfo/mountinfo_linux_test.go:41:24-41:44: `.Join(dir, "mounts")`
$DIR/internal/mountinfo/mountinfo_linux_test.go:42:13-42:63: `.WriteFile(mountsPath, []byte(successCase), 0o666)`
$DIR/internal/mountinfo/mountinfo_linux_test.go:55:13-55:168: `.Sprintf("Cross-device mounts detected on path (/path/to/1) at following locations %s. Export path should not have any sub-mounts, refusing to start.", mp)`
$DIR/internal/mountinfo/mountinfo_linux_test.go:66:24-66:95: `.Sprintf("Invalid argument, path (%s) is expected to be absolute", ".")`
$DIR/internal/mountinfo/mountinfo_linux_test.go:89:10-89:20: `.TempDir()`
$DIR/internal/mountinfo/mountinfo_linux_test.go:90:24-90:44: `.Join(dir, "mounts")`
$DIR/internal/mountinfo/mountinfo_linux_test.go:91:13-91:63: `.WriteFile(mountsPath, []byte(successCase), 0o666)`
$DIR/internal/mountinfo/mountinfo_linux_test.go:100:18-100:49: `.checkCrossMounts("/path/to/1")`
$DIR/internal/mountinfo/mountinfo_linux_test.go:107:13-107:168: `.Sprintf("Cross-device mounts detected on path (/path/to/1) at following locations %s. Export path should not have any sub-mounts, refusing to start.", mp)`
$DIR/internal/mountinfo/mountinfo_linux_test.go:114:18-114:40: `.checkCrossMounts(".")`
$DIR/internal/mountinfo/mountinfo_linux_test.go:117:24-117:95: `.Sprintf("Invalid argument, path (%s) is expected to be absolute", ".")`
$DIR/internal/mountinfo/mountinfo_linux_test.go:124:18-124:49: `.checkCrossMounts("/path/to/x")`
$DIR/internal/mountinfo/mountinfo_linux_test.go:137:10-137:20: `.TempDir()`
$DIR/internal/mountinfo/mountinfo_linux_test.go:139:24-139:44: `.Join(dir, "mounts")`
$DIR/internal/mountinfo/mountinfo_linux_test.go:140:13-140:63: `.WriteFile(mountsPath, []byte(successCase), 0o666)`
$DIR/internal/mountinfo/mountinfo_linux_test.go:146:3-146:43: `mounts, err = readProcMounts(mountsPath)`
$DIR/internal/mountinfo/mountinfo_linux_test.go:157:3-157:79: `mp = mountInfo{"/dev/1", "/path/to/1", "type1", []string{"flags"}, "1", "1"}`
$DIR/internal/mountinfo/mountinfo_linux_test.go:161:3-161:91: `mp = mountInfo{"/dev/2", "/path/to/2", "type2", []string{"flags", "1", "2=3"}, "2", "2"}`
$DIR/internal/mountinfo/mountinfo_linux_test.go:168:38-168:64: `.Join(dir, "non-existent")`
$DIR/internal/mountinfo/mountinfo_linux_test.go:168:84-168:100: `.IsNotExist(err)`
$DIR/internal/mountinfo/mountinfo_linux_test.go:182:40-182:63: `.NewReader(successCase)`
$DIR/internal/mountinfo/mountinfo_linux_test.go:193:3-193:79: `mp = mountInfo{"/dev/1", "/path/to/1", "type1", []string{"flags"}, "1", "1"}`
$DIR/internal/mountinfo/mountinfo_linux_test.go:197:3-197:91: `mp = mountInfo{"/dev/2", "/path/to/2", "type2", []string{"flags", "1", "2=3"}, "2", "2"}`
$DIR/internal/mountinfo/mountinfo_linux_test.go:209:37-209:51: `.NewReader(ec)`
$DIR/internal/pubsub/pubsub_test.go:32:14-32:51: `.Subscribe(MaskAll, ch1, doneCh, nil)`
$DIR/internal/pubsub/pubsub_test.go:35:14-35:51: `.Subscribe(MaskAll, ch2, doneCh, nil)`
$DIR/internal/pubsub/pubsub_test.go:38:2-38:11: `ps.Lock()`
$DIR/internal/pubsub/pubsub_test.go:38:4-38:11: `.Lock()`
$DIR/internal/pubsub/pubsub_test.go:39:10-39:19: `.Unlock()`
$DIR/internal/pubsub/pubsub_test.go:41:28-41:52: `.NumSubscribers(MaskAll)`
$DIR/internal/pubsub/pubsub_test.go:41:63-41:77: `.Subscribers()`
$DIR/internal/pubsub/pubsub_test.go:52:14-52:51: `.Subscribe(Mask(1), ch1, doneCh, nil)`
$DIR/internal/pubsub/pubsub_test.go:55:14-55:51: `.Subscribe(Mask(2), ch2, doneCh, nil)`
$DIR/internal/pubsub/pubsub_test.go:58:2-58:11: `ps.Lock()`
$DIR/internal/pubsub/pubsub_test.go:58:4-58:11: `.Lock()`
$DIR/internal/pubsub/pubsub_test.go:59:10-59:19: `.Unlock()`
$DIR/internal/pubsub/pubsub_test.go:64:30-64:54: `.NumSubscribers(Mask(1))`
$DIR/internal/pubsub/pubsub_test.go:67:30-67:54: `.NumSubscribers(Mask(2))`
$DIR/internal/pubsub/pubsub_test.go:70:30-70:56: `.NumSubscribers(Mask(1|2))`
$DIR/internal/pubsub/pubsub_test.go:73:30-73:54: `.NumSubscribers(MaskAll)`
$DIR/internal/pubsub/pubsub_test.go:76:30-76:54: `.NumSubscribers(Mask(4))`
$DIR/internal/pubsub/pubsub_test.go:88:14-88:51: `.Subscribe(MaskAll, ch1, doneCh, nil)`
$DIR/internal/pubsub/pubsub_test.go:91:14-91:51: `.Subscribe(MaskAll, ch2, doneCh, nil)`
$DIR/internal/pubsub/pubsub_test.go:94:14-94:51: `.Subscribe(MaskAll, ch3, doneCh, nil)`
$DIR/internal/pubsub/pubsub_test.go:105:14-105:52: `.Subscribe(MaskAll, ch1, doneCh1, nil)`
$DIR/internal/pubsub/pubsub_test.go:108:14-108:52: `.Subscribe(MaskAll, ch2, doneCh2, nil)`
$DIR/internal/pubsub/pubsub_test.go:112:2-112:16: `close(doneCh1)`
$DIR/internal/pubsub/pubsub_test.go:114:2-114:36: `time.Sleep(100 * time.Millisecond)`
$DIR/internal/pubsub/pubsub_test.go:114:6-114:36: `.Sleep(100 * time.Millisecond)`
$DIR/internal/pubsub/pubsub_test.go:115:2-115:11: `ps.Lock()`
$DIR/internal/pubsub/pubsub_test.go:115:4-115:11: `.Lock()`
$DIR/internal/pubsub/pubsub_test.go:119:2-119:13: `ps.Unlock()`
$DIR/internal/pubsub/pubsub_test.go:119:4-119:13: `.Unlock()`
$DIR/internal/pubsub/pubsub_test.go:134:14-134:90: `.Subscribe(MaskAll, ch1, doneCh1, func(entry Maskable) bool { return true })`
$DIR/internal/pubsub/pubsub_test.go:138:2-138:17: `ps.Publish(val)`
$DIR/internal/pubsub/pubsub_test.go:138:4-138:17: `.Publish(val)`
$DIR/internal/pubsub/pubsub_test.go:151:14-151:89: `.Subscribe(MaskAll, ch1, doneCh, func(entry Maskable) bool { return true })`
$DIR/internal/pubsub/pubsub_test.go:154:14-154:89: `.Subscribe(MaskAll, ch2, doneCh, func(entry Maskable) bool { return true })`
$DIR/internal/pubsub/pubsub_test.go:158:2-158:17: `ps.Publish(val)`
$DIR/internal/pubsub/pubsub_test.go:158:4-158:17: `.Publish(val)`
$DIR/internal/pubsub/pubsub_test.go:175:14-175:89: `.Subscribe(Mask(1), ch1, doneCh, func(entry Maskable) bool { return true })`
$DIR/internal/pubsub/pubsub_test.go:179:14-179:91: `.Subscribe(Mask(1|2), ch2, doneCh, func(entry Maskable) bool { return true })`
$DIR/internal/pubsub/pubsub_test.go:183:14-183:89: `.Subscribe(Mask(2), ch3, doneCh, func(entry Maskable) bool { return true })`
$DIR/internal/pubsub/pubsub_test.go:187:2-187:17: `ps.Publish(val)`
$DIR/internal/pubsub/pubsub_test.go:187:4-187:17: `.Publish(val)`
$DIR/internal/rest/client_test.go:47:16-47:33: `.New("something")`
$DIR/internal/rest/client_test.go:52:3-68:5: `t.Run(tt.name, func(t *testing.T) {
			// Wrap error
			n := &NetworkError{
				Err: tt.err,
			}
			//nolint:gocritic
			if tt.target == nil {
				var netErrInterface net.Error
				if errors.As(n, &netErrInterface) != tt.want {
					t.Errorf("errors.As(n, &tt.target) != tt.want, n: %#v, target: %#v, want:%v, got: %v", n, tt.target, tt.want, !tt.want)
				}
			} else {
				if errors.As(n, &tt.target) != tt.want {
					t.Errorf("errors.As(n, &tt.target) != tt.want, n: %#v, target: %#v, want:%v, got: %v", n, tt.target, tt.want, !tt.want)
				}
			}
		})`
$DIR/internal/rest/client_test.go:52:4-68:5: `.Run(tt.name, func(t *testing.T) {
			// Wrap error
			n := &NetworkError{
				Err: tt.err,
			}
			//nolint:gocritic
			if tt.target == nil {
				var netErrInterface net.Error
				if errors.As(n, &netErrInterface) != tt.want {
					t.Errorf("errors.As(n, &tt.target) != tt.want, n: %#v, target: %#v, want:%v, got: %v", n, tt.target, tt.want, !tt.want)
				}
			} else {
				if errors.As(n, &tt.target) != tt.want {
					t.Errorf("errors.As(n, &tt.target) != tt.want, n: %#v, target: %#v, want:%v, got: %v", n, tt.target, tt.want, !tt.want)
				}
			}
		})`
$DIR/internal/rest/client_test.go:60:14-60:38: `.As(n, &netErrInterface)`
$DIR/internal/rest/client_test.go:64:14-64:32: `.As(n, &tt.target)`
$DIR/internal/s3select/csv/reader_contrib_test.go:49:23-49:63: `.NopCloser(strings.NewReader(c.content))`
$DIR/internal/s3select/csv/reader_contrib_test.go:49:41-49:62: `.NewReader(c.content)`
$DIR/internal/s3select/csv/reader_contrib_test.go:61:4-61:32: `record, err = r.Read(record)`
$DIR/internal/s3select/csv/reader_contrib_test.go:61:19-61:32: `.Read(record)`
$DIR/internal/s3select/csv/reader_contrib_test.go:71:4-71:34: `record.WriteCSV(&result, opts)`
$DIR/internal/s3select/csv/reader_contrib_test.go:71:10-71:34: `.WriteCSV(&result, opts)`
$DIR/internal/s3select/csv/reader_contrib_test.go:72:4-72:37: `result.Truncate(result.Len() - 1)`
$DIR/internal/s3select/csv/reader_contrib_test.go:72:10-72:37: `.Truncate(result.Len() - 1)`
$DIR/internal/s3select/csv/reader_contrib_test.go:72:26-72:32: `.Len()`
$DIR/internal/s3select/csv/reader_contrib_test.go:73:4-73:41: `result.WriteString(c.recordDelimiter)`
$DIR/internal/s3select/csv/reader_contrib_test.go:73:10-73:41: `.WriteString(c.recordDelimiter)`
$DIR/internal/s3select/csv/reader_contrib_test.go:80:12-80:21: `.String()`
$DIR/internal/s3select/csv/reader_contrib_test.go:221:3-276:5: `t.Run(c.file, func(t *testing.T) {
			var err error
			var record sql.Record
			var result bytes.Buffer
			input := openTestFile(t, c.file)
			// Get above block size.
			input = append(input, input...)
			args := ReaderArgs{
				FileHeaderInfo:             use,
				RecordDelimiter:            c.recordDelimiter,
				FieldDelimiter:             c.fieldDelimiter,
				QuoteCharacter:             defaultQuoteCharacter,
				QuoteEscapeCharacter:       defaultQuoteEscapeCharacter,
				CommentCharacter:           defaultCommentCharacter,
				AllowQuotedRecordDelimiter: false,
				unmarshaled:                true,
			}
			if !c.header {
				args.FileHeaderInfo = none
			}
			r, _ := NewReader(io.NopCloser(bytes.NewReader(input)), &args)
			fields := 0
			for {
				record, err = r.Read(record)
				if err != nil {
					break
				}
				if fields < 10 {
					opts := sql.WriteCSVOpts{
						FieldDelimiter: ',',
						Quote:          '"',
						QuoteEscape:    '"',
						AlwaysQuote:    false,
					}
					// Write with fixed delimiters, newlines.
					err := record.WriteCSV(&result, opts)
					if err != nil {
						t.Error(err)
					}
				}
				fields++
			}
			r.Close()
			if err != io.EOF {
				t.Fatalf("Case %d failed with %s", i, err)
			}
			if !reflect.DeepEqual(r.columnNames, c.wantColumns) {
				t.Errorf("Case %d failed: expected %#v, got result %#v", i, c.wantColumns, r.columnNames)
			}
			if result.String() != c.wantTenFields {
				t.Errorf("Case %d failed: expected %v, got result %v", i, c.wantTenFields, result.String())
			}
			if fields != c.totalFields {
				t.Errorf("Case %d failed: expected %v results %v", i, c.totalFields, fields)
			}
		})`
$DIR/internal/s3select/csv/reader_contrib_test.go:221:4-276:5: `.Run(c.file, func(t *testing.T) {
			var err error
			var record sql.Record
			var result bytes.Buffer
			input := openTestFile(t, c.file)
			// Get above block size.
			input = append(input, input...)
			args := ReaderArgs{
				FileHeaderInfo:             use,
				RecordDelimiter:            c.recordDelimiter,
				FieldDelimiter:             c.fieldDelimiter,
				QuoteCharacter:             defaultQuoteCharacter,
				QuoteEscapeCharacter:       defaultQuoteEscapeCharacter,
				CommentCharacter:           defaultCommentCharacter,
				AllowQuotedRecordDelimiter: false,
				unmarshaled:                true,
			}
			if !c.header {
				args.FileHeaderInfo = none
			}
			r, _ := NewReader(io.NopCloser(bytes.NewReader(input)), &args)
			fields := 0
			for {
				record, err = r.Read(record)
				if err != nil {
					break
				}
				if fields < 10 {
					opts := sql.WriteCSVOpts{
						FieldDelimiter: ',',
						Quote:          '"',
						QuoteEscape:    '"',
						AlwaysQuote:    false,
					}
					// Write with fixed delimiters, newlines.
					err := record.WriteCSV(&result, opts)
					if err != nil {
						t.Error(err)
					}
				}
				fields++
			}
			r.Close()
			if err != io.EOF {
				t.Fatalf("Case %d failed with %s", i, err)
			}
			if !reflect.DeepEqual(r.columnNames, c.wantColumns) {
				t.Errorf("Case %d failed: expected %#v, got result %#v", i, c.wantColumns, r.columnNames)
			}
			if result.String() != c.wantTenFields {
				t.Errorf("Case %d failed: expected %v, got result %v", i, c.wantTenFields, result.String())
			}
			if fields != c.totalFields {
				t.Errorf("Case %d failed: expected %v results %v", i, c.totalFields, fields)
			}
		})`
$DIR/internal/s3select/csv/reader_contrib_test.go:227:4-227:35: `input = append(input, input...)`
$DIR/internal/s3select/csv/reader_contrib_test.go:239:5-239:31: `args.FileHeaderInfo = none`
$DIR/internal/s3select/csv/reader_contrib_test.go:241:24-241:58: `.NopCloser(bytes.NewReader(input))`
$DIR/internal/s3select/csv/reader_contrib_test.go:241:40-241:57: `.NewReader(input)`
$DIR/internal/s3select/csv/reader_contrib_test.go:244:5-244:33: `record, err = r.Read(record)`
$DIR/internal/s3select/csv/reader_contrib_test.go:244:20-244:33: `.Read(record)`
$DIR/internal/s3select/csv/reader_contrib_test.go:256:19-256:43: `.WriteCSV(&result, opts)`
$DIR/internal/s3select/csv/reader_contrib_test.go:261:5-261:13: `fields++`
$DIR/internal/s3select/csv/reader_contrib_test.go:267:15-267:55: `.DeepEqual(r.columnNames, c.wantColumns)`
$DIR/internal/s3select/csv/reader_contrib_test.go:270:13-270:22: `.String()`
$DIR/internal/s3select/csv/reader_contrib_test.go:289:21-289:51: `.New("unable to read file :(")`
$DIR/internal/s3select/csv/reader_contrib_test.go:436:3-489:5: `t.Run(c.file, func(t *testing.T) {
			var err error
			var record sql.Record
			var result bytes.Buffer
			input := openTestFile(t, c.file)
			args := ReaderArgs{
				FileHeaderInfo:             use,
				RecordDelimiter:            c.recordDelimiter,
				FieldDelimiter:             c.fieldDelimiter,
				QuoteCharacter:             defaultQuoteCharacter,
				QuoteEscapeCharacter:       defaultQuoteEscapeCharacter,
				CommentCharacter:           defaultCommentCharacter,
				AllowQuotedRecordDelimiter: false,
				unmarshaled:                true,
			}
			if !c.header {
				args.FileHeaderInfo = none
			}
			inr := io.Reader(bytes.NewReader(input))
			if c.sendErr != nil {
				inr = io.MultiReader(inr, errReader{c.sendErr})
			}
			r, _ := NewReader(io.NopCloser(inr), &args)
			fields := 0
			for {
				record, err = r.Read(record)
				if err != nil {
					break
				}

				opts := sql.WriteCSVOpts{
					FieldDelimiter: ',',
					Quote:          '"',
					QuoteEscape:    '"',
					AlwaysQuote:    false,
				}
				// Write with fixed delimiters, newlines.
				err := record.WriteCSV(&result, opts)
				if err != nil {
					t.Error(err)
				}
				fields++
			}
			r.Close()
			if err != c.wantErr {
				t.Fatalf("Case %d failed with %s", i, err)
			}
			if !reflect.DeepEqual(r.columnNames, c.wantColumns) {
				t.Errorf("Case %d failed: expected \n%#v, got result \n%#v", i, c.wantColumns, r.columnNames)
			}
			if result.String() != c.wantFields {
				t.Errorf("Case %d failed: expected \n%v\nGot result \n%v", i, c.wantFields, result.String())
			}
		})`
$DIR/internal/s3select/csv/reader_contrib_test.go:436:4-489:5: `.Run(c.file, func(t *testing.T) {
			var err error
			var record sql.Record
			var result bytes.Buffer
			input := openTestFile(t, c.file)
			args := ReaderArgs{
				FileHeaderInfo:             use,
				RecordDelimiter:            c.recordDelimiter,
				FieldDelimiter:             c.fieldDelimiter,
				QuoteCharacter:             defaultQuoteCharacter,
				QuoteEscapeCharacter:       defaultQuoteEscapeCharacter,
				CommentCharacter:           defaultCommentCharacter,
				AllowQuotedRecordDelimiter: false,
				unmarshaled:                true,
			}
			if !c.header {
				args.FileHeaderInfo = none
			}
			inr := io.Reader(bytes.NewReader(input))
			if c.sendErr != nil {
				inr = io.MultiReader(inr, errReader{c.sendErr})
			}
			r, _ := NewReader(io.NopCloser(inr), &args)
			fields := 0
			for {
				record, err = r.Read(record)
				if err != nil {
					break
				}

				opts := sql.WriteCSVOpts{
					FieldDelimiter: ',',
					Quote:          '"',
					QuoteEscape:    '"',
					AlwaysQuote:    false,
				}
				// Write with fixed delimiters, newlines.
				err := record.WriteCSV(&result, opts)
				if err != nil {
					t.Error(err)
				}
				fields++
			}
			r.Close()
			if err != c.wantErr {
				t.Fatalf("Case %d failed with %s", i, err)
			}
			if !reflect.DeepEqual(r.columnNames, c.wantColumns) {
				t.Errorf("Case %d failed: expected \n%#v, got result \n%#v", i, c.wantColumns, r.columnNames)
			}
			if result.String() != c.wantFields {
				t.Errorf("Case %d failed: expected \n%v\nGot result \n%v", i, c.wantFields, result.String())
			}
		})`
$DIR/internal/s3select/csv/reader_contrib_test.go:452:5-452:31: `args.FileHeaderInfo = none`
$DIR/internal/s3select/csv/reader_contrib_test.go:454:13-454:44: `.Reader(bytes.NewReader(input))`
$DIR/internal/s3select/csv/reader_contrib_test.go:454:26-454:43: `.NewReader(input)`
$DIR/internal/s3select/csv/reader_contrib_test.go:456:5-456:52: `inr = io.MultiReader(inr, errReader{c.sendErr})`
$DIR/internal/s3select/csv/reader_contrib_test.go:456:13-456:52: `.MultiReader(inr, errReader{c.sendErr})`
$DIR/internal/s3select/csv/reader_contrib_test.go:458:24-458:39: `.NopCloser(inr)`
$DIR/internal/s3select/csv/reader_contrib_test.go:461:5-461:33: `record, err = r.Read(record)`
$DIR/internal/s3select/csv/reader_contrib_test.go:461:20-461:33: `.Read(record)`
$DIR/internal/s3select/csv/reader_contrib_test.go:473:18-473:42: `.WriteCSV(&result, opts)`
$DIR/internal/s3select/csv/reader_contrib_test.go:477:5-477:13: `fields++`
$DIR/internal/s3select/csv/reader_contrib_test.go:483:15-483:55: `.DeepEqual(r.columnNames, c.wantColumns)`
$DIR/internal/s3select/csv/reader_contrib_test.go:486:13-486:22: `.String()`
$DIR/internal/s3select/json/preader_test.go:31:18-31:38: `.ReadDir("testdata")`
$DIR/internal/s3select/json/preader_test.go:36:3-53:5: `t.Run(file.Name(), func(t *testing.T) {
			f, err := os.Open(filepath.Join("testdata", file.Name()))
			if err != nil {
				t.Fatal(err)
			}
			r := NewPReader(f, &ReaderArgs{})
			var record sql.Record
			for {
				record, err = r.Read(record)
				if err != nil {
					break
				}
			}
			r.Close()
			if err != io.EOF {
				t.Fatalf("Reading failed with %s, %s", err, file.Name())
			}
		})`
$DIR/internal/s3select/json/preader_test.go:36:4-53:5: `.Run(file.Name(), func(t *testing.T) {
			f, err := os.Open(filepath.Join("testdata", file.Name()))
			if err != nil {
				t.Fatal(err)
			}
			r := NewPReader(f, &ReaderArgs{})
			var record sql.Record
			for {
				record, err = r.Read(record)
				if err != nil {
					break
				}
			}
			r.Close()
			if err != io.EOF {
				t.Fatalf("Reading failed with %s, %s", err, file.Name())
			}
		})`
$DIR/internal/s3select/json/preader_test.go:36:13-36:20: `.Name()`
$DIR/internal/s3select/json/preader_test.go:37:16-37:61: `.Open(filepath.Join("testdata", file.Name()))`
$DIR/internal/s3select/json/preader_test.go:37:30-37:60: `.Join("testdata", file.Name())`
$DIR/internal/s3select/json/preader_test.go:37:52-37:59: `.Name()`
$DIR/internal/s3select/json/preader_test.go:44:5-44:33: `record, err = r.Read(record)`
$DIR/internal/s3select/json/preader_test.go:44:20-44:33: `.Read(record)`
$DIR/internal/s3select/json/preader_test.go:55:3-72:5: `t.Run(file.Name()+"-close", func(t *testing.T) {
			f, err := os.Open(filepath.Join("testdata", file.Name()))
			if err != nil {
				t.Fatal(err)
			}
			r := NewPReader(f, &ReaderArgs{})
			r.Close()
			var record sql.Record
			for {
				record, err = r.Read(record)
				if err != nil {
					break
				}
			}
			if err != io.EOF {
				t.Fatalf("Reading failed with %s, %s", err, file.Name())
			}
		})`
$DIR/internal/s3select/json/preader_test.go:55:4-72:5: `.Run(file.Name()+"-close", func(t *testing.T) {
			f, err := os.Open(filepath.Join("testdata", file.Name()))
			if err != nil {
				t.Fatal(err)
			}
			r := NewPReader(f, &ReaderArgs{})
			r.Close()
			var record sql.Record
			for {
				record, err = r.Read(record)
				if err != nil {
					break
				}
			}
			if err != io.EOF {
				t.Fatalf("Reading failed with %s, %s", err, file.Name())
			}
		})`
$DIR/internal/s3select/json/preader_test.go:55:13-55:20: `.Name()`
$DIR/internal/s3select/json/preader_test.go:56:16-56:61: `.Open(filepath.Join("testdata", file.Name()))`
$DIR/internal/s3select/json/preader_test.go:56:30-56:60: `.Join("testdata", file.Name())`
$DIR/internal/s3select/json/preader_test.go:56:52-56:59: `.Name()`
$DIR/internal/s3select/json/preader_test.go:64:5-64:33: `record, err = r.Read(record)`
$DIR/internal/s3select/json/preader_test.go:64:20-64:33: `.Read(record)`
$DIR/internal/s3select/json/reader_test.go:31:18-31:38: `.ReadDir("testdata")`
$DIR/internal/s3select/json/reader_test.go:36:3-53:5: `t.Run(file.Name(), func(t *testing.T) {
			f, err := os.Open(filepath.Join("testdata", file.Name()))
			if err != nil {
				t.Fatal(err)
			}
			r := NewReader(f, &ReaderArgs{})
			var record sql.Record
			for {
				record, err = r.Read(record)
				if err != nil {
					break
				}
			}
			r.Close()
			if err != io.EOF {
				t.Fatalf("Reading failed with %s, %s", err, file.Name())
			}
		})`
$DIR/internal/s3select/json/reader_test.go:36:4-53:5: `.Run(file.Name(), func(t *testing.T) {
			f, err := os.Open(filepath.Join("testdata", file.Name()))
			if err != nil {
				t.Fatal(err)
			}
			r := NewReader(f, &ReaderArgs{})
			var record sql.Record
			for {
				record, err = r.Read(record)
				if err != nil {
					break
				}
			}
			r.Close()
			if err != io.EOF {
				t.Fatalf("Reading failed with %s, %s", err, file.Name())
			}
		})`
$DIR/internal/s3select/json/reader_test.go:36:13-36:20: `.Name()`
$DIR/internal/s3select/json/reader_test.go:37:16-37:61: `.Open(filepath.Join("testdata", file.Name()))`
$DIR/internal/s3select/json/reader_test.go:37:30-37:60: `.Join("testdata", file.Name())`
$DIR/internal/s3select/json/reader_test.go:37:52-37:59: `.Name()`
$DIR/internal/s3select/json/reader_test.go:44:5-44:33: `record, err = r.Read(record)`
$DIR/internal/s3select/json/reader_test.go:44:20-44:33: `.Read(record)`
$DIR/internal/s3select/json/reader_test.go:55:3-72:5: `t.Run(file.Name()+"-close", func(t *testing.T) {
			f, err := os.Open(filepath.Join("testdata", file.Name()))
			if err != nil {
				t.Fatal(err)
			}
			r := NewReader(f, &ReaderArgs{})
			r.Close()
			var record sql.Record
			for {
				record, err = r.Read(record)
				if err != nil {
					break
				}
			}
			if err != io.EOF {
				t.Fatalf("Reading failed with %s, %s", err, file.Name())
			}
		})`
$DIR/internal/s3select/json/reader_test.go:55:4-72:5: `.Run(file.Name()+"-close", func(t *testing.T) {
			f, err := os.Open(filepath.Join("testdata", file.Name()))
			if err != nil {
				t.Fatal(err)
			}
			r := NewReader(f, &ReaderArgs{})
			r.Close()
			var record sql.Record
			for {
				record, err = r.Read(record)
				if err != nil {
					break
				}
			}
			if err != io.EOF {
				t.Fatalf("Reading failed with %s, %s", err, file.Name())
			}
		})`
$DIR/internal/s3select/json/reader_test.go:55:13-55:20: `.Name()`
$DIR/internal/s3select/json/reader_test.go:56:16-56:61: `.Open(filepath.Join("testdata", file.Name()))`
$DIR/internal/s3select/json/reader_test.go:56:30-56:60: `.Join("testdata", file.Name())`
$DIR/internal/s3select/json/reader_test.go:56:52-56:59: `.Name()`
$DIR/internal/s3select/json/reader_test.go:64:5-64:33: `record, err = r.Read(record)`
$DIR/internal/s3select/json/reader_test.go:64:20-64:33: `.Read(record)`
$DIR/internal/s3select/select_test.go:604:3-655:5: `t.Run(testCase.name, func(t *testing.T) {
			// Hack cpuid to the CPU doesn't appear to support AVX2.
			// Restore whatever happens.
			if cpuid.CPU.Supports(cpuid.AVX2) {
				cpuid.CPU.Disable(cpuid.AVX2)
				defer cpuid.CPU.Enable(cpuid.AVX2)
			}
			if simdjson.SupportedCPU() {
				t.Fatal("setup error: expected cpu to be unsupported")
			}
			testReq := testCase.requestXML
			if len(testReq) == 0 {
				var escaped bytes.Buffer
				xml.EscapeText(&escaped, []byte(testCase.query))
				testReq = []byte(fmt.Sprintf(defRequest, escaped.String()))
			}
			s3Select, err := NewS3Select(bytes.NewReader(testReq))
			if err != nil {
				t.Fatal(err)
			}

			in := input
			if len(testCase.withJSON) > 0 {
				in = testCase.withJSON
			}
			if err = s3Select.Open(newStringRSC(in)); err != nil {
				t.Fatal(err)
			}

			w := &testResponseWriter{}
			s3Select.Evaluate(w)
			s3Select.Close()
			resp := http.Response{
				StatusCode:    http.StatusOK,
				Body:          io.NopCloser(bytes.NewReader(w.response)),
				ContentLength: int64(len(w.response)),
			}
			res, err := minio.NewSelectResults(&resp, "testbucket")
			if err != nil {
				t.Error(err)
				return
			}
			got, err := io.ReadAll(res)
			if err != nil {
				t.Error(err)
				return
			}
			gotS := strings.TrimSpace(string(got))
			if !reflect.DeepEqual(gotS, testCase.wantResult) {
				t.Errorf("received response does not match with expected reply. Query: %s\ngot: %s\nwant:%s", testCase.query, gotS, testCase.wantResult)
			}
		})`
$DIR/internal/s3select/select_test.go:604:4-655:5: `.Run(testCase.name, func(t *testing.T) {
			// Hack cpuid to the CPU doesn't appear to support AVX2.
			// Restore whatever happens.
			if cpuid.CPU.Supports(cpuid.AVX2) {
				cpuid.CPU.Disable(cpuid.AVX2)
				defer cpuid.CPU.Enable(cpuid.AVX2)
			}
			if simdjson.SupportedCPU() {
				t.Fatal("setup error: expected cpu to be unsupported")
			}
			testReq := testCase.requestXML
			if len(testReq) == 0 {
				var escaped bytes.Buffer
				xml.EscapeText(&escaped, []byte(testCase.query))
				testReq = []byte(fmt.Sprintf(defRequest, escaped.String()))
			}
			s3Select, err := NewS3Select(bytes.NewReader(testReq))
			if err != nil {
				t.Fatal(err)
			}

			in := input
			if len(testCase.withJSON) > 0 {
				in = testCase.withJSON
			}
			if err = s3Select.Open(newStringRSC(in)); err != nil {
				t.Fatal(err)
			}

			w := &testResponseWriter{}
			s3Select.Evaluate(w)
			s3Select.Close()
			resp := http.Response{
				StatusCode:    http.StatusOK,
				Body:          io.NopCloser(bytes.NewReader(w.response)),
				ContentLength: int64(len(w.response)),
			}
			res, err := minio.NewSelectResults(&resp, "testbucket")
			if err != nil {
				t.Error(err)
				return
			}
			got, err := io.ReadAll(res)
			if err != nil {
				t.Error(err)
				return
			}
			gotS := strings.TrimSpace(string(got))
			if !reflect.DeepEqual(gotS, testCase.wantResult) {
				t.Errorf("received response does not match with expected reply. Query: %s\ngot: %s\nwant:%s", testCase.query, gotS, testCase.wantResult)
			}
		})`
$DIR/internal/s3select/select_test.go:607:12-607:37: `.CPU.Supports(cpuid.AVX2)`
$DIR/internal/s3select/select_test.go:608:5-608:34: `cpuid.CPU.Disable(cpuid.AVX2)`
$DIR/internal/s3select/select_test.go:608:10-608:34: `.CPU.Disable(cpuid.AVX2)`
$DIR/internal/s3select/select_test.go:609:16-609:39: `.CPU.Enable(cpuid.AVX2)`
$DIR/internal/s3select/select_test.go:611:15-611:30: `.SupportedCPU()`
$DIR/internal/s3select/select_test.go:617:5-617:53: `xml.EscapeText(&escaped, []byte(testCase.query))`
$DIR/internal/s3select/select_test.go:617:8-617:53: `.EscapeText(&escaped, []byte(testCase.query))`
$DIR/internal/s3select/select_test.go:618:5-618:64: `testReq = []byte(fmt.Sprintf(defRequest, escaped.String()))`
$DIR/internal/s3select/select_test.go:618:25-618:63: `.Sprintf(defRequest, escaped.String())`
$DIR/internal/s3select/select_test.go:618:53-618:62: `.String()`
$DIR/internal/s3select/select_test.go:620:38-620:57: `.NewReader(testReq)`
$DIR/internal/s3select/select_test.go:627:5-627:27: `in = testCase.withJSON`
$DIR/internal/s3select/select_test.go:629:21-629:44: `.Open(newStringRSC(in))`
$DIR/internal/s3select/select_test.go:634:4-634:24: `s3Select.Evaluate(w)`
$DIR/internal/s3select/select_test.go:634:12-634:24: `.Evaluate(w)`
$DIR/internal/s3select/select_test.go:638:22-638:61: `.NopCloser(bytes.NewReader(w.response))`
$DIR/internal/s3select/select_test.go:638:38-638:60: `.NewReader(w.response)`
$DIR/internal/s3select/select_test.go:641:21-641:59: `.NewSelectResults(&resp, "testbucket")`
$DIR/internal/s3select/select_test.go:646:18-646:31: `.ReadAll(res)`
$DIR/internal/s3select/select_test.go:651:19-651:42: `.TrimSpace(string(got))`
$DIR/internal/s3select/select_test.go:652:15-652:52: `.DeepEqual(gotS, testCase.wantResult)`
$DIR/internal/s3select/select_test.go:656:3-701:5: `t.Run("simd-"+testCase.name, func(t *testing.T) {
			if !simdjson.SupportedCPU() {
				t.Skip("No CPU support")
			}
			testReq := testCase.requestXML
			if len(testReq) == 0 {
				var escaped bytes.Buffer
				xml.EscapeText(&escaped, []byte(testCase.query))
				testReq = []byte(fmt.Sprintf(defRequest, escaped.String()))
			}
			s3Select, err := NewS3Select(bytes.NewReader(testReq))
			if err != nil {
				t.Fatal(err)
			}

			in := input
			if len(testCase.withJSON) > 0 {
				in = testCase.withJSON
			}
			if err = s3Select.Open(newStringRSC(in)); err != nil {
				t.Fatal(err)
			}

			w := &testResponseWriter{}
			s3Select.Evaluate(w)
			s3Select.Close()
			resp := http.Response{
				StatusCode:    http.StatusOK,
				Body:          io.NopCloser(bytes.NewReader(w.response)),
				ContentLength: int64(len(w.response)),
			}
			res, err := minio.NewSelectResults(&resp, "testbucket")
			if err != nil {
				t.Error(err)
				return
			}
			got, err := io.ReadAll(res)
			if err != nil {
				t.Error(err)
				return
			}
			gotS := strings.TrimSpace(string(got))
			if !reflect.DeepEqual(gotS, testCase.wantResult) {
				t.Errorf("received response does not match with expected reply. Query: %s\ngot: %s\nwant:%s", testCase.query, gotS, testCase.wantResult)
			}
		})`
$DIR/internal/s3select/select_test.go:656:4-701:5: `.Run("simd-"+testCase.name, func(t *testing.T) {
			if !simdjson.SupportedCPU() {
				t.Skip("No CPU support")
			}
			testReq := testCase.requestXML
			if len(testReq) == 0 {
				var escaped bytes.Buffer
				xml.EscapeText(&escaped, []byte(testCase.query))
				testReq = []byte(fmt.Sprintf(defRequest, escaped.String()))
			}
			s3Select, err := NewS3Select(bytes.NewReader(testReq))
			if err != nil {
				t.Fatal(err)
			}

			in := input
			if len(testCase.withJSON) > 0 {
				in = testCase.withJSON
			}
			if err = s3Select.Open(newStringRSC(in)); err != nil {
				t.Fatal(err)
			}

			w := &testResponseWriter{}
			s3Select.Evaluate(w)
			s3Select.Close()
			resp := http.Response{
				StatusCode:    http.StatusOK,
				Body:          io.NopCloser(bytes.NewReader(w.response)),
				ContentLength: int64(len(w.response)),
			}
			res, err := minio.NewSelectResults(&resp, "testbucket")
			if err != nil {
				t.Error(err)
				return
			}
			got, err := io.ReadAll(res)
			if err != nil {
				t.Error(err)
				return
			}
			gotS := strings.TrimSpace(string(got))
			if !reflect.DeepEqual(gotS, testCase.wantResult) {
				t.Errorf("received response does not match with expected reply. Query: %s\ngot: %s\nwant:%s", testCase.query, gotS, testCase.wantResult)
			}
		})`
$DIR/internal/s3select/select_test.go:657:16-657:31: `.SupportedCPU()`
$DIR/internal/s3select/select_test.go:658:5-658:29: `t.Skip("No CPU support")`
$DIR/internal/s3select/select_test.go:658:6-658:29: `.Skip("No CPU support")`
$DIR/internal/s3select/select_test.go:663:5-663:53: `xml.EscapeText(&escaped, []byte(testCase.query))`
$DIR/internal/s3select/select_test.go:663:8-663:53: `.EscapeText(&escaped, []byte(testCase.query))`
$DIR/internal/s3select/select_test.go:664:5-664:64: `testReq = []byte(fmt.Sprintf(defRequest, escaped.String()))`
$DIR/internal/s3select/select_test.go:664:25-664:63: `.Sprintf(defRequest, escaped.String())`
$DIR/internal/s3select/select_test.go:664:53-664:62: `.String()`
$DIR/internal/s3select/select_test.go:666:38-666:57: `.NewReader(testReq)`
$DIR/internal/s3select/select_test.go:673:5-673:27: `in = testCase.withJSON`
$DIR/internal/s3select/select_test.go:675:21-675:44: `.Open(newStringRSC(in))`
$DIR/internal/s3select/select_test.go:680:4-680:24: `s3Select.Evaluate(w)`
$DIR/internal/s3select/select_test.go:680:12-680:24: `.Evaluate(w)`
$DIR/internal/s3select/select_test.go:684:22-684:61: `.NopCloser(bytes.NewReader(w.response))`
$DIR/internal/s3select/select_test.go:684:38-684:60: `.NewReader(w.response)`
$DIR/internal/s3select/select_test.go:687:21-687:59: `.NewSelectResults(&resp, "testbucket")`
$DIR/internal/s3select/select_test.go:692:18-692:31: `.ReadAll(res)`
$DIR/internal/s3select/select_test.go:697:19-697:42: `.TrimSpace(string(got))`
$DIR/internal/s3select/select_test.go:698:15-698:52: `.DeepEqual(gotS, testCase.wantResult)`
$DIR/internal/s3select/select_test.go:746:3-782:5: `t.Run(testCase.name, func(t *testing.T) {
			testReq := testCase.requestXML
			if len(testReq) == 0 {
				testReq = []byte(fmt.Sprintf(defRequest, testCase.query))
			}
			s3Select, err := NewS3Select(bytes.NewReader(testReq))
			if err != nil {
				t.Fatal(err)
			}

			if err = s3Select.Open(newStringRSC(input)); err != nil {
				t.Fatal(err)
			}

			w := &testResponseWriter{}
			s3Select.Evaluate(w)
			s3Select.Close()
			resp := http.Response{
				StatusCode:    http.StatusOK,
				Body:          io.NopCloser(bytes.NewReader(w.response)),
				ContentLength: int64(len(w.response)),
			}
			res, err := minio.NewSelectResults(&resp, "testbucket")
			if err != nil {
				t.Error(err)
				return
			}
			got, err := io.ReadAll(res)
			if err != nil {
				t.Error(err)
				return
			}
			gotS := strings.TrimSpace(string(got))
			if !reflect.DeepEqual(gotS, testCase.wantResult) {
				t.Errorf("received response does not match with expected reply. Query: %s\ngot: %s\nwant:%s", testCase.query, gotS, testCase.wantResult)
			}
		})`
$DIR/internal/s3select/select_test.go:746:4-782:5: `.Run(testCase.name, func(t *testing.T) {
			testReq := testCase.requestXML
			if len(testReq) == 0 {
				testReq = []byte(fmt.Sprintf(defRequest, testCase.query))
			}
			s3Select, err := NewS3Select(bytes.NewReader(testReq))
			if err != nil {
				t.Fatal(err)
			}

			if err = s3Select.Open(newStringRSC(input)); err != nil {
				t.Fatal(err)
			}

			w := &testResponseWriter{}
			s3Select.Evaluate(w)
			s3Select.Close()
			resp := http.Response{
				StatusCode:    http.StatusOK,
				Body:          io.NopCloser(bytes.NewReader(w.response)),
				ContentLength: int64(len(w.response)),
			}
			res, err := minio.NewSelectResults(&resp, "testbucket")
			if err != nil {
				t.Error(err)
				return
			}
			got, err := io.ReadAll(res)
			if err != nil {
				t.Error(err)
				return
			}
			gotS := strings.TrimSpace(string(got))
			if !reflect.DeepEqual(gotS, testCase.wantResult) {
				t.Errorf("received response does not match with expected reply. Query: %s\ngot: %s\nwant:%s", testCase.query, gotS, testCase.wantResult)
			}
		})`
$DIR/internal/s3select/select_test.go:749:5-749:62: `testReq = []byte(fmt.Sprintf(defRequest, testCase.query))`
$DIR/internal/s3select/select_test.go:749:25-749:61: `.Sprintf(defRequest, testCase.query)`
$DIR/internal/s3select/select_test.go:751:38-751:57: `.NewReader(testReq)`
$DIR/internal/s3select/select_test.go:756:21-756:47: `.Open(newStringRSC(input))`
$DIR/internal/s3select/select_test.go:761:4-761:24: `s3Select.Evaluate(w)`
$DIR/internal/s3select/select_test.go:761:12-761:24: `.Evaluate(w)`
$DIR/internal/s3select/select_test.go:765:22-765:61: `.NopCloser(bytes.NewReader(w.response))`
$DIR/internal/s3select/select_test.go:765:38-765:60: `.NewReader(w.response)`
$DIR/internal/s3select/select_test.go:768:21-768:59: `.NewSelectResults(&resp, "testbucket")`
$DIR/internal/s3select/select_test.go:773:18-773:31: `.ReadAll(res)`
$DIR/internal/s3select/select_test.go:778:19-778:42: `.TrimSpace(string(got))`
$DIR/internal/s3select/select_test.go:779:15-779:52: `.DeepEqual(gotS, testCase.wantResult)`
$DIR/internal/s3select/select_test.go:929:3-965:5: `t.Run(testCase.name, func(t *testing.T) {
			testReq := testCase.requestXML
			if len(testReq) == 0 {
				testReq = []byte(fmt.Sprintf(defRequest, testCase.query))
			}
			s3Select, err := NewS3Select(bytes.NewReader(testReq))
			if err != nil {
				t.Fatal(err)
			}

			if err = s3Select.Open(newBytesRSC(testCase.input)); err != nil {
				t.Fatal(err)
			}

			w := &testResponseWriter{}
			s3Select.Evaluate(w)
			s3Select.Close()
			resp := http.Response{
				StatusCode:    http.StatusOK,
				Body:          io.NopCloser(bytes.NewReader(w.response)),
				ContentLength: int64(len(w.response)),
			}
			res, err := minio.NewSelectResults(&resp, "testbucket")
			if err != nil {
				t.Error(err)
				return
			}
			got, err := io.ReadAll(res)
			if err != nil {
				t.Error(err)
				return
			}
			gotS := strings.TrimSpace(string(got))
			if !reflect.DeepEqual(gotS, testCase.wantResult) {
				t.Errorf("received response does not match with expected reply. Query: %s\ngot: %s\nwant:%s", testCase.query, gotS, testCase.wantResult)
			}
		})`
$DIR/internal/s3select/select_test.go:929:4-965:5: `.Run(testCase.name, func(t *testing.T) {
			testReq := testCase.requestXML
			if len(testReq) == 0 {
				testReq = []byte(fmt.Sprintf(defRequest, testCase.query))
			}
			s3Select, err := NewS3Select(bytes.NewReader(testReq))
			if err != nil {
				t.Fatal(err)
			}

			if err = s3Select.Open(newBytesRSC(testCase.input)); err != nil {
				t.Fatal(err)
			}

			w := &testResponseWriter{}
			s3Select.Evaluate(w)
			s3Select.Close()
			resp := http.Response{
				StatusCode:    http.StatusOK,
				Body:          io.NopCloser(bytes.NewReader(w.response)),
				ContentLength: int64(len(w.response)),
			}
			res, err := minio.NewSelectResults(&resp, "testbucket")
			if err != nil {
				t.Error(err)
				return
			}
			got, err := io.ReadAll(res)
			if err != nil {
				t.Error(err)
				return
			}
			gotS := strings.TrimSpace(string(got))
			if !reflect.DeepEqual(gotS, testCase.wantResult) {
				t.Errorf("received response does not match with expected reply. Query: %s\ngot: %s\nwant:%s", testCase.query, gotS, testCase.wantResult)
			}
		})`
$DIR/internal/s3select/select_test.go:932:5-932:62: `testReq = []byte(fmt.Sprintf(defRequest, testCase.query))`
$DIR/internal/s3select/select_test.go:932:25-932:61: `.Sprintf(defRequest, testCase.query)`
$DIR/internal/s3select/select_test.go:934:38-934:57: `.NewReader(testReq)`
$DIR/internal/s3select/select_test.go:939:21-939:55: `.Open(newBytesRSC(testCase.input))`
$DIR/internal/s3select/select_test.go:944:4-944:24: `s3Select.Evaluate(w)`
$DIR/internal/s3select/select_test.go:944:12-944:24: `.Evaluate(w)`
$DIR/internal/s3select/select_test.go:948:22-948:61: `.NopCloser(bytes.NewReader(w.response))`
$DIR/internal/s3select/select_test.go:948:38-948:60: `.NewReader(w.response)`
$DIR/internal/s3select/select_test.go:951:21-951:59: `.NewSelectResults(&resp, "testbucket")`
$DIR/internal/s3select/select_test.go:956:18-956:31: `.ReadAll(res)`
$DIR/internal/s3select/select_test.go:961:19-961:42: `.TrimSpace(string(got))`
$DIR/internal/s3select/select_test.go:962:15-962:52: `.DeepEqual(gotS, testCase.wantResult)`
$DIR/internal/s3select/select_test.go:1073:3-1109:5: `t.Run(testCase.name, func(t *testing.T) {
			testReq := testCase.requestXML
			if len(testReq) == 0 {
				testReq = []byte(fmt.Sprintf(defRequest, testCase.query))
			}
			s3Select, err := NewS3Select(bytes.NewReader(testReq))
			if err != nil {
				t.Fatal(err)
			}

			if err = s3Select.Open(newStringRSC(input)); err != nil {
				t.Fatal(err)
			}

			w := &testResponseWriter{}
			s3Select.Evaluate(w)
			s3Select.Close()
			resp := http.Response{
				StatusCode:    http.StatusOK,
				Body:          io.NopCloser(bytes.NewReader(w.response)),
				ContentLength: int64(len(w.response)),
			}
			res, err := minio.NewSelectResults(&resp, "testbucket")
			if err != nil {
				t.Error(err)
				return
			}
			got, err := io.ReadAll(res)
			if err != nil {
				t.Error(err)
				return
			}
			gotS := strings.TrimSpace(string(got))
			if gotS != testCase.wantResult {
				t.Errorf("received response does not match with expected reply.\nQuery: %s\n=====\ngot: %s\n=====\nwant: %s\n=====\n", testCase.query, gotS, testCase.wantResult)
			}
		})`
$DIR/internal/s3select/select_test.go:1073:4-1109:5: `.Run(testCase.name, func(t *testing.T) {
			testReq := testCase.requestXML
			if len(testReq) == 0 {
				testReq = []byte(fmt.Sprintf(defRequest, testCase.query))
			}
			s3Select, err := NewS3Select(bytes.NewReader(testReq))
			if err != nil {
				t.Fatal(err)
			}

			if err = s3Select.Open(newStringRSC(input)); err != nil {
				t.Fatal(err)
			}

			w := &testResponseWriter{}
			s3Select.Evaluate(w)
			s3Select.Close()
			resp := http.Response{
				StatusCode:    http.StatusOK,
				Body:          io.NopCloser(bytes.NewReader(w.response)),
				ContentLength: int64(len(w.response)),
			}
			res, err := minio.NewSelectResults(&resp, "testbucket")
			if err != nil {
				t.Error(err)
				return
			}
			got, err := io.ReadAll(res)
			if err != nil {
				t.Error(err)
				return
			}
			gotS := strings.TrimSpace(string(got))
			if gotS != testCase.wantResult {
				t.Errorf("received response does not match with expected reply.\nQuery: %s\n=====\ngot: %s\n=====\nwant: %s\n=====\n", testCase.query, gotS, testCase.wantResult)
			}
		})`
$DIR/internal/s3select/select_test.go:1076:5-1076:62: `testReq = []byte(fmt.Sprintf(defRequest, testCase.query))`
$DIR/internal/s3select/select_test.go:1076:25-1076:61: `.Sprintf(defRequest, testCase.query)`
$DIR/internal/s3select/select_test.go:1078:38-1078:57: `.NewReader(testReq)`
$DIR/internal/s3select/select_test.go:1083:21-1083:47: `.Open(newStringRSC(input))`
$DIR/internal/s3select/select_test.go:1088:4-1088:24: `s3Select.Evaluate(w)`
$DIR/internal/s3select/select_test.go:1088:12-1088:24: `.Evaluate(w)`
$DIR/internal/s3select/select_test.go:1092:22-1092:61: `.NopCloser(bytes.NewReader(w.response))`
$DIR/internal/s3select/select_test.go:1092:38-1092:60: `.NewReader(w.response)`
$DIR/internal/s3select/select_test.go:1095:21-1095:59: `.NewSelectResults(&resp, "testbucket")`
$DIR/internal/s3select/select_test.go:1100:18-1100:31: `.ReadAll(res)`
$DIR/internal/s3select/select_test.go:1105:19-1105:42: `.TrimSpace(string(got))`
$DIR/internal/s3select/select_test.go:1221:3-1254:5: `t.Run(fmt.Sprint(i), func(t *testing.T) {
			s3Select, err := NewS3Select(bytes.NewReader(testCase.requestXML))
			if err != nil {
				t.Fatal(err)
			}

			if err = s3Select.Open(newBytesRSC(csvData)); err != nil {
				t.Fatal(err)
			}

			w := &testResponseWriter{}
			s3Select.Evaluate(w)
			s3Select.Close()

			if !reflect.DeepEqual(w.response, testCase.expectedResult) {
				resp := http.Response{
					StatusCode:    http.StatusOK,
					Body:          io.NopCloser(bytes.NewReader(w.response)),
					ContentLength: int64(len(w.response)),
				}
				res, err := minio.NewSelectResults(&resp, "testbucket")
				if err != nil {
					t.Error(err)
					return
				}
				got, err := io.ReadAll(res)
				if err != nil {
					t.Error(err)
					return
				}

				t.Errorf("received response does not match with expected reply\ngot: %#v\nwant:%#v\ndecoded:%s", w.response, testCase.expectedResult, string(got))
			}
		})`
$DIR/internal/s3select/select_test.go:1221:4-1254:5: `.Run(fmt.Sprint(i), func(t *testing.T) {
			s3Select, err := NewS3Select(bytes.NewReader(testCase.requestXML))
			if err != nil {
				t.Fatal(err)
			}

			if err = s3Select.Open(newBytesRSC(csvData)); err != nil {
				t.Fatal(err)
			}

			w := &testResponseWriter{}
			s3Select.Evaluate(w)
			s3Select.Close()

			if !reflect.DeepEqual(w.response, testCase.expectedResult) {
				resp := http.Response{
					StatusCode:    http.StatusOK,
					Body:          io.NopCloser(bytes.NewReader(w.response)),
					ContentLength: int64(len(w.response)),
				}
				res, err := minio.NewSelectResults(&resp, "testbucket")
				if err != nil {
					t.Error(err)
					return
				}
				got, err := io.ReadAll(res)
				if err != nil {
					t.Error(err)
					return
				}

				t.Errorf("received response does not match with expected reply\ngot: %#v\nwant:%#v\ndecoded:%s", w.response, testCase.expectedResult, string(got))
			}
		})`
$DIR/internal/s3select/select_test.go:1221:12-1221:22: `.Sprint(i)`
$DIR/internal/s3select/select_test.go:1222:38-1222:69: `.NewReader(testCase.requestXML)`
$DIR/internal/s3select/select_test.go:1227:21-1227:48: `.Open(newBytesRSC(csvData))`
$DIR/internal/s3select/select_test.go:1232:4-1232:24: `s3Select.Evaluate(w)`
$DIR/internal/s3select/select_test.go:1232:12-1232:24: `.Evaluate(w)`
$DIR/internal/s3select/select_test.go:1235:15-1235:62: `.DeepEqual(w.response, testCase.expectedResult)`
$DIR/internal/s3select/select_test.go:1238:23-1238:62: `.NopCloser(bytes.NewReader(w.response))`
$DIR/internal/s3select/select_test.go:1238:39-1238:61: `.NewReader(w.response)`
$DIR/internal/s3select/select_test.go:1241:22-1241:60: `.NewSelectResults(&resp, "testbucket")`
$DIR/internal/s3select/select_test.go:1246:19-1246:32: `.ReadAll(res)`
$DIR/internal/s3select/select_test.go:1341:3-1374:5: `t.Run(fmt.Sprint(i), func(t *testing.T) {
			s3Select, err := NewS3Select(bytes.NewReader(testCase.requestXML))
			if err != nil {
				t.Fatal(err)
			}

			if err = s3Select.Open(newBytesRSC(jsonData)); err != nil {
				t.Fatal(err)
			}

			w := &testResponseWriter{}
			s3Select.Evaluate(w)
			s3Select.Close()

			if !reflect.DeepEqual(w.response, testCase.expectedResult) {
				resp := http.Response{
					StatusCode:    http.StatusOK,
					Body:          io.NopCloser(bytes.NewReader(w.response)),
					ContentLength: int64(len(w.response)),
				}
				res, err := minio.NewSelectResults(&resp, "testbucket")
				if err != nil {
					t.Error(err)
					return
				}
				got, err := io.ReadAll(res)
				if err != nil {
					t.Error(err)
					return
				}

				t.Errorf("received response does not match with expected reply\ngot: %#v\nwant:%#v\ndecoded:%s", w.response, testCase.expectedResult, string(got))
			}
		})`
$DIR/internal/s3select/select_test.go:1341:4-1374:5: `.Run(fmt.Sprint(i), func(t *testing.T) {
			s3Select, err := NewS3Select(bytes.NewReader(testCase.requestXML))
			if err != nil {
				t.Fatal(err)
			}

			if err = s3Select.Open(newBytesRSC(jsonData)); err != nil {
				t.Fatal(err)
			}

			w := &testResponseWriter{}
			s3Select.Evaluate(w)
			s3Select.Close()

			if !reflect.DeepEqual(w.response, testCase.expectedResult) {
				resp := http.Response{
					StatusCode:    http.StatusOK,
					Body:          io.NopCloser(bytes.NewReader(w.response)),
					ContentLength: int64(len(w.response)),
				}
				res, err := minio.NewSelectResults(&resp, "testbucket")
				if err != nil {
					t.Error(err)
					return
				}
				got, err := io.ReadAll(res)
				if err != nil {
					t.Error(err)
					return
				}

				t.Errorf("received response does not match with expected reply\ngot: %#v\nwant:%#v\ndecoded:%s", w.response, testCase.expectedResult, string(got))
			}
		})`
$DIR/internal/s3select/select_test.go:1341:12-1341:22: `.Sprint(i)`
$DIR/internal/s3select/select_test.go:1342:38-1342:69: `.NewReader(testCase.requestXML)`
$DIR/internal/s3select/select_test.go:1347:21-1347:49: `.Open(newBytesRSC(jsonData))`
$DIR/internal/s3select/select_test.go:1352:4-1352:24: `s3Select.Evaluate(w)`
$DIR/internal/s3select/select_test.go:1352:12-1352:24: `.Evaluate(w)`
$DIR/internal/s3select/select_test.go:1355:15-1355:62: `.DeepEqual(w.response, testCase.expectedResult)`
$DIR/internal/s3select/select_test.go:1358:23-1358:62: `.NopCloser(bytes.NewReader(w.response))`
$DIR/internal/s3select/select_test.go:1358:39-1358:61: `.NewReader(w.response)`
$DIR/internal/s3select/select_test.go:1361:22-1361:60: `.NewSelectResults(&resp, "testbucket")`
$DIR/internal/s3select/select_test.go:1366:19-1366:32: `.ReadAll(res)`
$DIR/internal/s3select/select_test.go:1638:3-1682:5: `t.Run(testCase.name, func(t *testing.T) {
			testReq := testCase.requestXML
			s3Select, err := NewS3Select(bytes.NewReader(testReq))
			if err != nil {
				if !testCase.wantErr {
					t.Fatal(err)
				}
				t.Logf("got expected error: %v", err)
				return
			}

			if err = s3Select.Open(newBytesRSC(testCase.input)); err != nil {
				if !testCase.wantErr {
					t.Fatal(err)
				}
				t.Logf("got expected error: %v", err)
				return
			} else if testCase.wantErr {
				t.Error("did not get expected error")
				return
			}

			w := &testResponseWriter{}
			s3Select.Evaluate(w)
			s3Select.Close()
			resp := http.Response{
				StatusCode:    http.StatusOK,
				Body:          io.NopCloser(bytes.NewReader(w.response)),
				ContentLength: int64(len(w.response)),
			}
			res, err := minio.NewSelectResults(&resp, "testbucket")
			if err != nil {
				t.Error(err)
				return
			}
			got, err := io.ReadAll(res)
			if err != nil {
				t.Error(err)
				return
			}
			gotS := strings.TrimSpace(string(got))
			if !reflect.DeepEqual(gotS, testCase.wantResult) {
				t.Errorf("received response does not match with expected reply. Query: %s\ngot: %s\nwant:%s", testCase.query, gotS, testCase.wantResult)
			}
		})`
$DIR/internal/s3select/select_test.go:1638:4-1682:5: `.Run(testCase.name, func(t *testing.T) {
			testReq := testCase.requestXML
			s3Select, err := NewS3Select(bytes.NewReader(testReq))
			if err != nil {
				if !testCase.wantErr {
					t.Fatal(err)
				}
				t.Logf("got expected error: %v", err)
				return
			}

			if err = s3Select.Open(newBytesRSC(testCase.input)); err != nil {
				if !testCase.wantErr {
					t.Fatal(err)
				}
				t.Logf("got expected error: %v", err)
				return
			} else if testCase.wantErr {
				t.Error("did not get expected error")
				return
			}

			w := &testResponseWriter{}
			s3Select.Evaluate(w)
			s3Select.Close()
			resp := http.Response{
				StatusCode:    http.StatusOK,
				Body:          io.NopCloser(bytes.NewReader(w.response)),
				ContentLength: int64(len(w.response)),
			}
			res, err := minio.NewSelectResults(&resp, "testbucket")
			if err != nil {
				t.Error(err)
				return
			}
			got, err := io.ReadAll(res)
			if err != nil {
				t.Error(err)
				return
			}
			gotS := strings.TrimSpace(string(got))
			if !reflect.DeepEqual(gotS, testCase.wantResult) {
				t.Errorf("received response does not match with expected reply. Query: %s\ngot: %s\nwant:%s", testCase.query, gotS, testCase.wantResult)
			}
		})`
$DIR/internal/s3select/select_test.go:1640:38-1640:57: `.NewReader(testReq)`
$DIR/internal/s3select/select_test.go:1649:21-1649:55: `.Open(newBytesRSC(testCase.input))`
$DIR/internal/s3select/select_test.go:1661:4-1661:24: `s3Select.Evaluate(w)`
$DIR/internal/s3select/select_test.go:1661:12-1661:24: `.Evaluate(w)`
$DIR/internal/s3select/select_test.go:1665:22-1665:61: `.NopCloser(bytes.NewReader(w.response))`
$DIR/internal/s3select/select_test.go:1665:38-1665:60: `.NewReader(w.response)`
$DIR/internal/s3select/select_test.go:1668:21-1668:59: `.NewSelectResults(&resp, "testbucket")`
$DIR/internal/s3select/select_test.go:1673:18-1673:31: `.ReadAll(res)`
$DIR/internal/s3select/select_test.go:1678:19-1678:42: `.TrimSpace(string(got))`
$DIR/internal/s3select/select_test.go:1679:15-1679:52: `.DeepEqual(gotS, testCase.wantResult)`
$DIR/internal/s3select/select_test.go:1687:2-1687:44: `t.Setenv("MINIO_API_SELECT_PARQUET", "on")`
$DIR/internal/s3select/select_test.go:1687:3-1687:44: `.Setenv("MINIO_API_SELECT_PARQUET", "on")`
$DIR/internal/s3select/select_test.go:1742:3-1783:5: `t.Run(fmt.Sprint(i), func(t *testing.T) {
			testdataFile := "testdata/testdata.parquet"
			file, err := os.Open(testdataFile)
			if err != nil {
				t.Fatal(err)
			}

			s3Select, err := NewS3Select(bytes.NewReader(testCase.requestXML))
			if err != nil {
				t.Fatal(err)
			}

			if err = s3Select.Open(file); err != nil {
				t.Fatal(err)
			}

			fmt.Printf("R: \nE: %s\n" /* string(w.response), */, string(testCase.expectedResult))

			w := &testResponseWriter{}
			s3Select.Evaluate(w)
			s3Select.Close()

			if !reflect.DeepEqual(w.response, testCase.expectedResult) {
				resp := http.Response{
					StatusCode:    http.StatusOK,
					Body:          io.NopCloser(bytes.NewReader(w.response)),
					ContentLength: int64(len(w.response)),
				}
				res, err := minio.NewSelectResults(&resp, "testbucket")
				if err != nil {
					t.Error(err)
					return
				}
				got, err := io.ReadAll(res)
				if err != nil {
					t.Error(err)
					return
				}

				t.Errorf("received response does not match with expected reply\ngot: %#v\nwant:%#v\ndecoded:%s", w.response, testCase.expectedResult, string(got))
			}
		})`
$DIR/internal/s3select/select_test.go:1742:4-1783:5: `.Run(fmt.Sprint(i), func(t *testing.T) {
			testdataFile := "testdata/testdata.parquet"
			file, err := os.Open(testdataFile)
			if err != nil {
				t.Fatal(err)
			}

			s3Select, err := NewS3Select(bytes.NewReader(testCase.requestXML))
			if err != nil {
				t.Fatal(err)
			}

			if err = s3Select.Open(file); err != nil {
				t.Fatal(err)
			}

			fmt.Printf("R: \nE: %s\n" /* string(w.response), */, string(testCase.expectedResult))

			w := &testResponseWriter{}
			s3Select.Evaluate(w)
			s3Select.Close()

			if !reflect.DeepEqual(w.response, testCase.expectedResult) {
				resp := http.Response{
					StatusCode:    http.StatusOK,
					Body:          io.NopCloser(bytes.NewReader(w.response)),
					ContentLength: int64(len(w.response)),
				}
				res, err := minio.NewSelectResults(&resp, "testbucket")
				if err != nil {
					t.Error(err)
					return
				}
				got, err := io.ReadAll(res)
				if err != nil {
					t.Error(err)
					return
				}

				t.Errorf("received response does not match with expected reply\ngot: %#v\nwant:%#v\ndecoded:%s", w.response, testCase.expectedResult, string(got))
			}
		})`
$DIR/internal/s3select/select_test.go:1742:12-1742:22: `.Sprint(i)`
$DIR/internal/s3select/select_test.go:1744:19-1744:38: `.Open(testdataFile)`
$DIR/internal/s3select/select_test.go:1749:38-1749:69: `.NewReader(testCase.requestXML)`
$DIR/internal/s3select/select_test.go:1754:21-1754:32: `.Open(file)`
$DIR/internal/s3select/select_test.go:1758:4-1758:89: `fmt.Printf("R: \nE: %s\n" /* string(w.response), */, string(testCase.expectedResult))`
$DIR/internal/s3select/select_test.go:1758:7-1758:89: `.Printf("R: \nE: %s\n" /* string(w.response), */, string(testCase.expectedResult))`
$DIR/internal/s3select/select_test.go:1761:4-1761:24: `s3Select.Evaluate(w)`
$DIR/internal/s3select/select_test.go:1761:12-1761:24: `.Evaluate(w)`
$DIR/internal/s3select/select_test.go:1764:15-1764:62: `.DeepEqual(w.response, testCase.expectedResult)`
$DIR/internal/s3select/select_test.go:1767:23-1767:62: `.NopCloser(bytes.NewReader(w.response))`
$DIR/internal/s3select/select_test.go:1767:39-1767:61: `.NewReader(w.response)`
$DIR/internal/s3select/select_test.go:1770:22-1770:60: `.NewSelectResults(&resp, "testbucket")`
$DIR/internal/s3select/select_test.go:1775:19-1775:32: `.ReadAll(res)`
$DIR/internal/s3select/select_test.go:1788:2-1788:44: `t.Setenv("MINIO_API_SELECT_PARQUET", "on")`
$DIR/internal/s3select/select_test.go:1788:3-1788:44: `.Setenv("MINIO_API_SELECT_PARQUET", "on")`
$DIR/internal/s3select/select_test.go:1847:3-1885:5: `t.Run(fmt.Sprint(i), func(t *testing.T) {
			testdataFile := "testdata/lineitem_shipdate.parquet"
			file, err := os.Open(testdataFile)
			if err != nil {
				t.Fatal(err)
			}

			s3Select, err := NewS3Select(bytes.NewReader(testCase.requestXML))
			if err != nil {
				t.Fatal(err)
			}

			if err = s3Select.Open(file); err != nil {
				t.Fatal(err)
			}

			w := &testResponseWriter{}
			s3Select.Evaluate(w)
			s3Select.Close()
			resp := http.Response{
				StatusCode:    http.StatusOK,
				Body:          io.NopCloser(bytes.NewReader(w.response)),
				ContentLength: int64(len(w.response)),
			}
			res, err := minio.NewSelectResults(&resp, "testbucket")
			if err != nil {
				t.Error(err)
				return
			}
			got, err := io.ReadAll(res)
			if err != nil {
				t.Error(err)
				return
			}
			gotS := strings.TrimSpace(string(got))
			if !reflect.DeepEqual(gotS, testCase.wantResult) {
				t.Errorf("received response does not match with expected reply. Query: %s\ngot: %s\nwant:%s", testCase.requestXML, gotS, testCase.wantResult)
			}
		})`
$DIR/internal/s3select/select_test.go:1847:4-1885:5: `.Run(fmt.Sprint(i), func(t *testing.T) {
			testdataFile := "testdata/lineitem_shipdate.parquet"
			file, err := os.Open(testdataFile)
			if err != nil {
				t.Fatal(err)
			}

			s3Select, err := NewS3Select(bytes.NewReader(testCase.requestXML))
			if err != nil {
				t.Fatal(err)
			}

			if err = s3Select.Open(file); err != nil {
				t.Fatal(err)
			}

			w := &testResponseWriter{}
			s3Select.Evaluate(w)
			s3Select.Close()
			resp := http.Response{
				StatusCode:    http.StatusOK,
				Body:          io.NopCloser(bytes.NewReader(w.response)),
				ContentLength: int64(len(w.response)),
			}
			res, err := minio.NewSelectResults(&resp, "testbucket")
			if err != nil {
				t.Error(err)
				return
			}
			got, err := io.ReadAll(res)
			if err != nil {
				t.Error(err)
				return
			}
			gotS := strings.TrimSpace(string(got))
			if !reflect.DeepEqual(gotS, testCase.wantResult) {
				t.Errorf("received response does not match with expected reply. Query: %s\ngot: %s\nwant:%s", testCase.requestXML, gotS, testCase.wantResult)
			}
		})`
$DIR/internal/s3select/select_test.go:1847:12-1847:22: `.Sprint(i)`
$DIR/internal/s3select/select_test.go:1849:19-1849:38: `.Open(testdataFile)`
$DIR/internal/s3select/select_test.go:1854:38-1854:69: `.NewReader(testCase.requestXML)`
$DIR/internal/s3select/select_test.go:1859:21-1859:32: `.Open(file)`
$DIR/internal/s3select/select_test.go:1864:4-1864:24: `s3Select.Evaluate(w)`
$DIR/internal/s3select/select_test.go:1864:12-1864:24: `.Evaluate(w)`
$DIR/internal/s3select/select_test.go:1868:22-1868:61: `.NopCloser(bytes.NewReader(w.response))`
$DIR/internal/s3select/select_test.go:1868:38-1868:60: `.NewReader(w.response)`
$DIR/internal/s3select/select_test.go:1871:21-1871:59: `.NewSelectResults(&resp, "testbucket")`
$DIR/internal/s3select/select_test.go:1876:18-1876:31: `.ReadAll(res)`
$DIR/internal/s3select/select_test.go:1881:19-1881:42: `.TrimSpace(string(got))`
$DIR/internal/s3select/select_test.go:1882:15-1882:52: `.DeepEqual(gotS, testCase.wantResult)`
$DIR/internal/s3select/select_test.go:1890:2-1890:44: `t.Setenv("MINIO_API_SELECT_PARQUET", "on")`
$DIR/internal/s3select/select_test.go:1890:3-1890:44: `.Setenv("MINIO_API_SELECT_PARQUET", "on")`
$DIR/internal/s3select/select_test.go:1947:3-1985:5: `t.Run(fmt.Sprint(i), func(t *testing.T) {
			testdataFile := "testdata/lineitem_shipdate.parquet"
			file, err := os.Open(testdataFile)
			if err != nil {
				t.Fatal(err)
			}

			s3Select, err := NewS3Select(bytes.NewReader(testCase.requestXML))
			if err != nil {
				t.Fatal(err)
			}

			if err = s3Select.Open(file); err != nil {
				t.Fatal(err)
			}

			w := &testResponseWriter{}
			s3Select.Evaluate(w)
			s3Select.Close()
			resp := http.Response{
				StatusCode:    http.StatusOK,
				Body:          io.NopCloser(bytes.NewReader(w.response)),
				ContentLength: int64(len(w.response)),
			}
			res, err := minio.NewSelectResults(&resp, "testbucket")
			if err != nil {
				t.Error(err)
				return
			}
			got, err := io.ReadAll(res)
			if err != nil {
				t.Error(err)
				return
			}
			gotS := strings.TrimSpace(string(got))
			if !reflect.DeepEqual(gotS, testCase.wantResult) {
				t.Errorf("received response does not match with expected reply. Query: %s\ngot: %s\nwant:%s", testCase.requestXML, gotS, testCase.wantResult)
			}
		})`
$DIR/internal/s3select/select_test.go:1947:4-1985:5: `.Run(fmt.Sprint(i), func(t *testing.T) {
			testdataFile := "testdata/lineitem_shipdate.parquet"
			file, err := os.Open(testdataFile)
			if err != nil {
				t.Fatal(err)
			}

			s3Select, err := NewS3Select(bytes.NewReader(testCase.requestXML))
			if err != nil {
				t.Fatal(err)
			}

			if err = s3Select.Open(file); err != nil {
				t.Fatal(err)
			}

			w := &testResponseWriter{}
			s3Select.Evaluate(w)
			s3Select.Close()
			resp := http.Response{
				StatusCode:    http.StatusOK,
				Body:          io.NopCloser(bytes.NewReader(w.response)),
				ContentLength: int64(len(w.response)),
			}
			res, err := minio.NewSelectResults(&resp, "testbucket")
			if err != nil {
				t.Error(err)
				return
			}
			got, err := io.ReadAll(res)
			if err != nil {
				t.Error(err)
				return
			}
			gotS := strings.TrimSpace(string(got))
			if !reflect.DeepEqual(gotS, testCase.wantResult) {
				t.Errorf("received response does not match with expected reply. Query: %s\ngot: %s\nwant:%s", testCase.requestXML, gotS, testCase.wantResult)
			}
		})`
$DIR/internal/s3select/select_test.go:1947:12-1947:22: `.Sprint(i)`
$DIR/internal/s3select/select_test.go:1949:19-1949:38: `.Open(testdataFile)`
$DIR/internal/s3select/select_test.go:1954:38-1954:69: `.NewReader(testCase.requestXML)`
$DIR/internal/s3select/select_test.go:1959:21-1959:32: `.Open(file)`
$DIR/internal/s3select/select_test.go:1964:4-1964:24: `s3Select.Evaluate(w)`
$DIR/internal/s3select/select_test.go:1964:12-1964:24: `.Evaluate(w)`
$DIR/internal/s3select/select_test.go:1968:22-1968:61: `.NopCloser(bytes.NewReader(w.response))`
$DIR/internal/s3select/select_test.go:1968:38-1968:60: `.NewReader(w.response)`
$DIR/internal/s3select/select_test.go:1971:21-1971:59: `.NewSelectResults(&resp, "testbucket")`
$DIR/internal/s3select/select_test.go:1976:18-1976:31: `.ReadAll(res)`
$DIR/internal/s3select/select_test.go:1981:19-1981:42: `.TrimSpace(string(got))`
$DIR/internal/s3select/select_test.go:1982:15-1982:52: `.DeepEqual(gotS, testCase.wantResult)`
$DIR/internal/s3select/simdj/reader_amd64_test.go:65:14-65:29: `.SupportedCPU()`
$DIR/internal/s3select/simdj/reader_amd64_test.go:66:3-66:28: `t.Skip("Unsupported cpu")`
$DIR/internal/s3select/simdj/reader_amd64_test.go:66:4-66:28: `.Skip("Unsupported cpu")`
$DIR/internal/s3select/simdj/reader_amd64_test.go:70:3-174:5: `t.Run(tt.name, func(t *testing.T) {
			ref := loadCompressed(t, tt.name)

			var err error
			dst := make(chan simdjson.Object, 100)
			dec := NewElementReader(dst, &err, &json.ReaderArgs{ContentType: "json"})
			pj, err := simdjson.ParseND(ref, nil)
			if err != nil {
				t.Fatal(err)
			}
			i := pj.Iter()
			cpy := i
			b, err := cpy.MarshalJSON()
			if err != nil {
				t.Fatal(err)
			}
			if false {
				t.Log(string(b))
			}
			// _ = os.WriteFile(filepath.Join("testdata", tt.name+".json"), b, os.ModePerm)

		parser:
			for {
				var next simdjson.Iter
				typ, err := i.AdvanceIter(&next)
				if err != nil {
					t.Fatal(err)
				}
				switch typ {
				case simdjson.TypeNone:
					close(dst)
					break parser
				case simdjson.TypeRoot:
					typ, obj, err := next.Root(nil)
					if err != nil {
						t.Fatal(err)
					}
					if typ != simdjson.TypeObject {
						if typ == simdjson.TypeNone {
							close(dst)
							break parser
						}
						t.Fatal("Unexpected type:", typ.String())
					}

					o, err := obj.Object(nil)
					if err != nil {
						t.Fatal(err)
					}
					dst <- *o
				default:
					t.Fatal("unexpected type:", typ.String())
				}
			}
			refDec := json.NewReader(io.NopCloser(bytes.NewBuffer(ref)), &json.ReaderArgs{ContentType: "json"})

			for {
				rec, err := dec.Read(nil)
				if err == io.EOF {
					break
				}
				if err != nil {
					t.Error(err)
				}
				want, err := refDec.Read(nil)
				if err != nil {
					t.Error(err)
				}
				var gotB, wantB bytes.Buffer
				opts := sql.WriteCSVOpts{
					FieldDelimiter: ',',
					Quote:          '"',
					QuoteEscape:    '"',
					AlwaysQuote:    false,
				}
				err = rec.WriteCSV(&gotB, opts)
				if err != nil {
					t.Error(err)
				}
				err = want.WriteCSV(&wantB, opts)
				if err != nil {
					t.Error(err)
				}

				if !bytes.Equal(gotB.Bytes(), wantB.Bytes()) {
					t.Errorf("CSV output mismatch.\nwant: %s(%x)\ngot:  %s(%x)", wantB.String(), wantB.Bytes(), gotB.String(), gotB.Bytes())
				}
				gotB.Reset()
				wantB.Reset()

				err = rec.WriteJSON(&gotB)
				if err != nil {
					t.Error(err)
				}
				err = want.WriteJSON(&wantB)
				if err != nil {
					t.Error(err)
				}
				// truncate newline from 'want'
				wantB.Truncate(wantB.Len() - 1)
				if !bytes.Equal(gotB.Bytes(), wantB.Bytes()) {
					t.Errorf("JSON output mismatch.\nwant: %s\ngot:  %s", wantB.String(), gotB.String())
				}
			}
		})`
$DIR/internal/s3select/simdj/reader_amd64_test.go:70:4-174:5: `.Run(tt.name, func(t *testing.T) {
			ref := loadCompressed(t, tt.name)

			var err error
			dst := make(chan simdjson.Object, 100)
			dec := NewElementReader(dst, &err, &json.ReaderArgs{ContentType: "json"})
			pj, err := simdjson.ParseND(ref, nil)
			if err != nil {
				t.Fatal(err)
			}
			i := pj.Iter()
			cpy := i
			b, err := cpy.MarshalJSON()
			if err != nil {
				t.Fatal(err)
			}
			if false {
				t.Log(string(b))
			}
			// _ = os.WriteFile(filepath.Join("testdata", tt.name+".json"), b, os.ModePerm)

		parser:
			for {
				var next simdjson.Iter
				typ, err := i.AdvanceIter(&next)
				if err != nil {
					t.Fatal(err)
				}
				switch typ {
				case simdjson.TypeNone:
					close(dst)
					break parser
				case simdjson.TypeRoot:
					typ, obj, err := next.Root(nil)
					if err != nil {
						t.Fatal(err)
					}
					if typ != simdjson.TypeObject {
						if typ == simdjson.TypeNone {
							close(dst)
							break parser
						}
						t.Fatal("Unexpected type:", typ.String())
					}

					o, err := obj.Object(nil)
					if err != nil {
						t.Fatal(err)
					}
					dst <- *o
				default:
					t.Fatal("unexpected type:", typ.String())
				}
			}
			refDec := json.NewReader(io.NopCloser(bytes.NewBuffer(ref)), &json.ReaderArgs{ContentType: "json"})

			for {
				rec, err := dec.Read(nil)
				if err == io.EOF {
					break
				}
				if err != nil {
					t.Error(err)
				}
				want, err := refDec.Read(nil)
				if err != nil {
					t.Error(err)
				}
				var gotB, wantB bytes.Buffer
				opts := sql.WriteCSVOpts{
					FieldDelimiter: ',',
					Quote:          '"',
					QuoteEscape:    '"',
					AlwaysQuote:    false,
				}
				err = rec.WriteCSV(&gotB, opts)
				if err != nil {
					t.Error(err)
				}
				err = want.WriteCSV(&wantB, opts)
				if err != nil {
					t.Error(err)
				}

				if !bytes.Equal(gotB.Bytes(), wantB.Bytes()) {
					t.Errorf("CSV output mismatch.\nwant: %s(%x)\ngot:  %s(%x)", wantB.String(), wantB.Bytes(), gotB.String(), gotB.Bytes())
				}
				gotB.Reset()
				wantB.Reset()

				err = rec.WriteJSON(&gotB)
				if err != nil {
					t.Error(err)
				}
				err = want.WriteJSON(&wantB)
				if err != nil {
					t.Error(err)
				}
				// truncate newline from 'want'
				wantB.Truncate(wantB.Len() - 1)
				if !bytes.Equal(gotB.Bytes(), wantB.Bytes()) {
					t.Errorf("JSON output mismatch.\nwant: %s\ngot:  %s", wantB.String(), gotB.String())
				}
			}
		})`
$DIR/internal/s3select/simdj/reader_amd64_test.go:76:23-76:41: `.ParseND(ref, nil)`
$DIR/internal/s3select/simdj/reader_amd64_test.go:80:11-80:18: `.Iter()`
$DIR/internal/s3select/simdj/reader_amd64_test.go:82:17-82:31: `.MarshalJSON()`
$DIR/internal/s3select/simdj/reader_amd64_test.go:94:18-94:37: `.AdvanceIter(&next)`
$DIR/internal/s3select/simdj/reader_amd64_test.go:100:6-100:16: `close(dst)`
$DIR/internal/s3select/simdj/reader_amd64_test.go:103:27-103:37: `.Root(nil)`
$DIR/internal/s3select/simdj/reader_amd64_test.go:109:8-109:18: `close(dst)`
$DIR/internal/s3select/simdj/reader_amd64_test.go:115:19-115:31: `.Object(nil)`
$DIR/internal/s3select/simdj/reader_amd64_test.go:119:6-119:15: `dst <- *o`
$DIR/internal/s3select/simdj/reader_amd64_test.go:124:18-124:103: `.NewReader(io.NopCloser(bytes.NewBuffer(ref)), &json.ReaderArgs{ContentType: "json"})`
$DIR/internal/s3select/simdj/reader_amd64_test.go:124:31-124:63: `.NopCloser(bytes.NewBuffer(ref))`
$DIR/internal/s3select/simdj/reader_amd64_test.go:124:47-124:62: `.NewBuffer(ref)`
$DIR/internal/s3select/simdj/reader_amd64_test.go:127:20-127:30: `.Read(nil)`
$DIR/internal/s3select/simdj/reader_amd64_test.go:134:24-134:34: `.Read(nil)`
$DIR/internal/s3select/simdj/reader_amd64_test.go:145:5-145:36: `err = rec.WriteCSV(&gotB, opts)`
$DIR/internal/s3select/simdj/reader_amd64_test.go:145:14-145:36: `.WriteCSV(&gotB, opts)`
$DIR/internal/s3select/simdj/reader_amd64_test.go:149:5-149:38: `err = want.WriteCSV(&wantB, opts)`
$DIR/internal/s3select/simdj/reader_amd64_test.go:149:15-149:38: `.WriteCSV(&wantB, opts)`
$DIR/internal/s3select/simdj/reader_amd64_test.go:154:14-154:49: `.Equal(gotB.Bytes(), wantB.Bytes())`
$DIR/internal/s3select/simdj/reader_amd64_test.go:154:25-154:33: `.Bytes()`
$DIR/internal/s3select/simdj/reader_amd64_test.go:154:40-154:48: `.Bytes()`
$DIR/internal/s3select/simdj/reader_amd64_test.go:157:5-157:17: `gotB.Reset()`
$DIR/internal/s3select/simdj/reader_amd64_test.go:157:9-157:17: `.Reset()`
$DIR/internal/s3select/simdj/reader_amd64_test.go:158:5-158:18: `wantB.Reset()`
$DIR/internal/s3select/simdj/reader_amd64_test.go:158:10-158:18: `.Reset()`
$DIR/internal/s3select/simdj/reader_amd64_test.go:160:5-160:31: `err = rec.WriteJSON(&gotB)`
$DIR/internal/s3select/simdj/reader_amd64_test.go:160:14-160:31: `.WriteJSON(&gotB)`
$DIR/internal/s3select/simdj/reader_amd64_test.go:164:5-164:33: `err = want.WriteJSON(&wantB)`
$DIR/internal/s3select/simdj/reader_amd64_test.go:164:15-164:33: `.WriteJSON(&wantB)`
$DIR/internal/s3select/simdj/reader_amd64_test.go:169:5-169:36: `wantB.Truncate(wantB.Len() - 1)`
$DIR/internal/s3select/simdj/reader_amd64_test.go:169:10-169:36: `.Truncate(wantB.Len() - 1)`
$DIR/internal/s3select/simdj/reader_amd64_test.go:169:25-169:31: `.Len()`
$DIR/internal/s3select/simdj/reader_amd64_test.go:170:14-170:49: `.Equal(gotB.Bytes(), wantB.Bytes())`
$DIR/internal/s3select/simdj/reader_amd64_test.go:170:25-170:33: `.Bytes()`
$DIR/internal/s3select/simdj/reader_amd64_test.go:170:40-170:48: `.Bytes()`
$DIR/internal/s3select/sql/jsonpath_test.go:46:14-46:60: `.Open(filepath.Join("jsondata", "books.json"))`
$DIR/internal/s3select/sql/jsonpath_test.go:46:28-46:59: `.Join("jsondata", "books.json")`
$DIR/internal/s3select/sql/jsonpath_test.go:51:14-51:25: `.ReadAll(f)`
$DIR/internal/s3select/sql/jsonpath_test.go:56:17-60:3: `.MustBuild(
		&JSONPath{},
		participle.Lexer(sqlLexer),
		participle.CaseInsensitive("Keyword"),
	)`
$DIR/internal/s3select/sql/jsonpath_test.go:58:13-58:29: `.Lexer(sqlLexer)`
$DIR/internal/s3select/sql/jsonpath_test.go:59:13-59:40: `.CaseInsensitive("Keyword")`
$DIR/internal/s3select/sql/jsonpath_test.go:72:3-97:5: `t.Run(tc.str, func(t *testing.T) {
			jp := JSONPath{}
			err := p.ParseString(tc.str, &jp)
			// fmt.Println(jp)
			if err != nil {
				t.Fatalf("parse failed!: %d %v %s", i, err, tc)
			}

			// Read only the first json object from the file
			recs, err := getJSONStructs(b)
			if err != nil || len(recs) != 3 {
				t.Fatalf("%v or length was not 3", err)
			}

			for j, rec := range recs {
				// fmt.Println(rec)
				r, _, err := jsonpathEval(jp.PathExpr, rec)
				if err != nil {
					t.Errorf("Error: %d %d %v", i, j, err)
				}
				if !reflect.DeepEqual(r, tc.res[j]) {
					fmt.Printf("%#v (%v) != %v (%v)\n", r, reflect.TypeOf(r), tc.res[j], reflect.TypeOf(tc.res[j]))
					t.Errorf("case: %d %d failed", i, j)
				}
			}
		})`
$DIR/internal/s3select/sql/jsonpath_test.go:72:4-97:5: `.Run(tc.str, func(t *testing.T) {
			jp := JSONPath{}
			err := p.ParseString(tc.str, &jp)
			// fmt.Println(jp)
			if err != nil {
				t.Fatalf("parse failed!: %d %v %s", i, err, tc)
			}

			// Read only the first json object from the file
			recs, err := getJSONStructs(b)
			if err != nil || len(recs) != 3 {
				t.Fatalf("%v or length was not 3", err)
			}

			for j, rec := range recs {
				// fmt.Println(rec)
				r, _, err := jsonpathEval(jp.PathExpr, rec)
				if err != nil {
					t.Errorf("Error: %d %d %v", i, j, err)
				}
				if !reflect.DeepEqual(r, tc.res[j]) {
					fmt.Printf("%#v (%v) != %v (%v)\n", r, reflect.TypeOf(r), tc.res[j], reflect.TypeOf(tc.res[j]))
					t.Errorf("case: %d %d failed", i, j)
				}
			}
		})`
$DIR/internal/s3select/sql/jsonpath_test.go:74:12-74:37: `.ParseString(tc.str, &jp)`
$DIR/internal/s3select/sql/jsonpath_test.go:92:16-92:40: `.DeepEqual(r, tc.res[j])`
$DIR/internal/s3select/sql/jsonpath_test.go:93:6-93:101: `fmt.Printf("%#v (%v) != %v (%v)\n", r, reflect.TypeOf(r), tc.res[j], reflect.TypeOf(tc.res[j]))`
$DIR/internal/s3select/sql/jsonpath_test.go:93:9-93:101: `.Printf("%#v (%v) != %v (%v)\n", r, reflect.TypeOf(r), tc.res[j], reflect.TypeOf(tc.res[j]))`
$DIR/internal/s3select/sql/jsonpath_test.go:93:52-93:62: `.TypeOf(r)`
$DIR/internal/s3select/sql/jsonpath_test.go:93:82-93:100: `.TypeOf(tc.res[j])`
$DIR/internal/s3select/sql/parser_test.go:29:17-34:3: `.MustBuild(
		&JSONPathElement{},
		participle.Lexer(sqlLexer),
		participle.CaseInsensitive("Keyword"),
		participle.CaseInsensitive("Timeword"),
	)`
$DIR/internal/s3select/sql/parser_test.go:31:13-31:29: `.Lexer(sqlLexer)`
$DIR/internal/s3select/sql/parser_test.go:32:13-32:40: `.CaseInsensitive("Keyword")`
$DIR/internal/s3select/sql/parser_test.go:33:13-33:41: `.CaseInsensitive("Timeword")`
$DIR/internal/s3select/sql/parser_test.go:51:11-51:31: `.ParseString(tc, &j)`
$DIR/internal/s3select/sql/parser_test.go:60:17-65:3: `.MustBuild(
		&JSONPath{},
		participle.Lexer(sqlLexer),
		participle.CaseInsensitive("Keyword"),
		participle.CaseInsensitive("Timeword"),
	)`
$DIR/internal/s3select/sql/parser_test.go:62:13-62:29: `.Lexer(sqlLexer)`
$DIR/internal/s3select/sql/parser_test.go:63:13-63:40: `.CaseInsensitive("Keyword")`
$DIR/internal/s3select/sql/parser_test.go:64:13-64:41: `.CaseInsensitive("Timeword")`
$DIR/internal/s3select/sql/parser_test.go:81:11-81:31: `.ParseString(tc, &j)`
$DIR/internal/s3select/sql/parser_test.go:90:17-94:3: `.MustBuild(
		&Identifier{},
		participle.Lexer(sqlLexer),
		participle.CaseInsensitive("Keyword"),
	)`
$DIR/internal/s3select/sql/parser_test.go:92:13-92:29: `.Lexer(sqlLexer)`
$DIR/internal/s3select/sql/parser_test.go:93:13-93:40: `.CaseInsensitive("Keyword")`
$DIR/internal/s3select/sql/parser_test.go:106:11-106:32: `.ParseString(tc, &id)`
$DIR/internal/s3select/sql/parser_test.go:123:11-123:32: `.ParseString(tc, &id)`
$DIR/internal/s3select/sql/parser_test.go:133:17-137:3: `.MustBuild(
		&ObjectKey{},
		participle.Lexer(sqlLexer),
		participle.CaseInsensitive("Keyword"),
	)`
$DIR/internal/s3select/sql/parser_test.go:135:13-135:29: `.Lexer(sqlLexer)`
$DIR/internal/s3select/sql/parser_test.go:136:13-136:40: `.CaseInsensitive("Keyword")`
$DIR/internal/s3select/sql/parser_test.go:146:11-146:31: `.ParseString(tc, &k)`
$DIR/internal/s3select/sql/parser_test.go:163:11-163:31: `.ParseString(tc, &k)`
$DIR/internal/s3select/sql/parser_test.go:173:17-178:3: `.MustBuild(
		&FuncExpr{},
		participle.Lexer(sqlLexer),
		participle.CaseInsensitive("Keyword"),
		participle.CaseInsensitive("Timeword"),
	)`
$DIR/internal/s3select/sql/parser_test.go:175:13-175:29: `.Lexer(sqlLexer)`
$DIR/internal/s3select/sql/parser_test.go:176:13-176:40: `.CaseInsensitive("Keyword")`
$DIR/internal/s3select/sql/parser_test.go:177:13-177:41: `.CaseInsensitive("Timeword")`
$DIR/internal/s3select/sql/parser_test.go:211:11-211:33: `.ParseString(tc, &fex)`
$DIR/internal/s3select/sql/parser_test.go:221:12-221:53: `.NewBuffer([]byte("S3Object.words.*.id"))`
$DIR/internal/s3select/sql/parser_test.go:223:22-223:29: `.Lex(s)`
$DIR/internal/s3select/sql/parser_test.go:227:22-227:38: `.ConsumeAll(lex)`
$DIR/internal/s3select/sql/parser_test.go:240:17-244:3: `.MustBuild(
		&Select{},
		participle.Lexer(sqlLexer),
		participle.CaseInsensitive("Keyword"),
	)`
$DIR/internal/s3select/sql/parser_test.go:242:13-242:29: `.Lexer(sqlLexer)`
$DIR/internal/s3select/sql/parser_test.go:243:13-243:40: `.CaseInsensitive("Keyword")`
$DIR/internal/s3select/sql/parser_test.go:256:11-256:31: `.ParseString(tc, &s)`
$DIR/internal/s3select/sql/parser_test.go:266:17-270:3: `.MustBuild(
		&Select{},
		participle.Lexer(sqlLexer),
		participle.CaseInsensitive("Keyword"),
	)`
$DIR/internal/s3select/sql/parser_test.go:268:13-268:29: `.Lexer(sqlLexer)`
$DIR/internal/s3select/sql/parser_test.go:269:13-269:40: `.CaseInsensitive("Keyword")`
$DIR/internal/s3select/sql/parser_test.go:284:11-284:31: `.ParseString(tc, &s)`
$DIR/internal/s3select/sql/parser_test.go:292:17-296:3: `.MustBuild(
		&Select{},
		participle.Lexer(sqlLexer),
		participle.CaseInsensitive("Keyword"),
	)`
$DIR/internal/s3select/sql/parser_test.go:294:13-294:29: `.Lexer(sqlLexer)`
$DIR/internal/s3select/sql/parser_test.go:295:13-295:40: `.CaseInsensitive("Keyword")`
$DIR/internal/s3select/sql/parser_test.go:306:11-306:31: `.ParseString(tc, &s)`
$DIR/internal/s3select/sql/parser_test.go:314:17-318:3: `.MustBuild(
		&Select{},
		participle.Lexer(sqlLexer),
		participle.CaseInsensitive("Keyword"),
	)`
$DIR/internal/s3select/sql/parser_test.go:316:13-316:29: `.Lexer(sqlLexer)`
$DIR/internal/s3select/sql/parser_test.go:317:13-317:40: `.CaseInsensitive("Keyword")`
$DIR/internal/s3select/sql/parser_test.go:337:11-337:31: `.ParseString(tc, &s)`
$DIR/internal/s3select/sql/parser_test.go:347:17-351:3: `.MustBuild(
		&Select{},
		participle.Lexer(sqlLexer),
		participle.CaseInsensitive("Keyword"),
	)`
$DIR/internal/s3select/sql/parser_test.go:349:13-349:29: `.Lexer(sqlLexer)`
$DIR/internal/s3select/sql/parser_test.go:350:13-350:40: `.CaseInsensitive("Keyword")`
$DIR/internal/s3select/sql/parser_test.go:360:11-360:31: `.ParseString(tc, &s)`
$DIR/internal/s3select/sql/parser_test.go:370:12-370:70: `.NewBuffer([]byte("year from select month hour distinct"))`
$DIR/internal/s3select/sql/parser_test.go:371:22-371:29: `.Lex(s)`
$DIR/internal/s3select/sql/parser_test.go:375:22-375:38: `.ConsumeAll(lex)`
$DIR/internal/s3select/sql/timestampfuncs_test.go:26:17-26:63: `.FixedZone("", int((8 * time.Hour).Seconds()))`
$DIR/internal/s3select/sql/timestampfuncs_test.go:26:51-26:61: `.Seconds()`
$DIR/internal/s3select/sql/timestampfuncs_test.go:27:24-27:71: `.FixedZone("", -int((8 * time.Hour).Seconds()))`
$DIR/internal/s3select/sql/timestampfuncs_test.go:27:59-27:69: `.Seconds()`
$DIR/internal/s3select/sql/timestampfuncs_test.go:32:17-32:56: `.Date(2010, 1, 1, 0, 0, 0, 0, time.UTC)`
$DIR/internal/s3select/sql/timestampfuncs_test.go:33:20-33:59: `.Date(2010, 2, 1, 0, 0, 0, 0, time.UTC)`
$DIR/internal/s3select/sql/timestampfuncs_test.go:34:23-34:62: `.Date(2010, 2, 3, 0, 0, 0, 0, time.UTC)`
$DIR/internal/s3select/sql/timestampfuncs_test.go:35:29-35:69: `.Date(2010, 2, 3, 4, 11, 0, 0, time.UTC)`
$DIR/internal/s3select/sql/timestampfuncs_test.go:36:32-36:73: `.Date(2010, 2, 3, 4, 11, 30, 0, time.UTC)`
$DIR/internal/s3select/sql/timestampfuncs_test.go:37:35-37:84: `.Date(2010, 2, 3, 4, 11, 30, 230000000, time.UTC)`
$DIR/internal/s3select/sql/timestampfuncs_test.go:38:34-38:73: `.Date(2010, 2, 3, 4, 11, 0, 0, beijing)`
$DIR/internal/s3select/sql/timestampfuncs_test.go:39:37-39:77: `.Date(2010, 2, 3, 4, 11, 30, 0, beijing)`
$DIR/internal/s3select/sql/timestampfuncs_test.go:40:40-40:88: `.Date(2010, 2, 3, 4, 11, 30, 230000000, beijing)`
$DIR/internal/s3select/sql/timestampfuncs_test.go:41:37-41:84: `.Date(2010, 2, 3, 4, 11, 30, 0, fakeLosAngeles)`
$DIR/internal/s3select/sql/timestampfuncs_test.go:42:40-42:95: `.Date(2010, 2, 3, 4, 11, 30, 230000000, fakeLosAngeles)`
$DIR/internal/s3select/sql/timestampfuncs_test.go:50:11-50:23: `.Equal(tc.t)`
$DIR/internal/s3select/sql/value_test.go:81:2-83:3: `type fields struct {
		a, b Value
	}`
$DIR/internal/s3select/sql/value_test.go:84:2-88:3: `type test struct {
		name   string
		fields fields
		wantOk bool
	}`
$DIR/internal/s3select/sql/value_test.go:94:4-100:6: `tests = append(tests, test{
				name: fmt.Sprint(a.GetTypeString(), "==", b.GetTypeString()),
				fields: fields{
					a: *a, b: *b,
				},
				wantOk: i == j,
			})`
$DIR/internal/s3select/sql/value_test.go:95:14-95:65: `.Sprint(a.GetTypeString(), "==", b.GetTypeString())`
$DIR/internal/s3select/sql/value_test.go:95:23-95:39: `.GetTypeString()`
$DIR/internal/s3select/sql/value_test.go:95:48-95:64: `.GetTypeString()`
$DIR/internal/s3select/sql/value_test.go:105:3-109:5: `t.Run(tt.name, func(t *testing.T) {
			if gotOk := tt.fields.a.SameTypeAs(tt.fields.b); gotOk != tt.wantOk {
				t.Errorf("SameTypeAs() = %v, want %v", gotOk, tt.wantOk)
			}
		})`
$DIR/internal/s3select/sql/value_test.go:105:4-109:5: `.Run(tt.name, func(t *testing.T) {
			if gotOk := tt.fields.a.SameTypeAs(tt.fields.b); gotOk != tt.wantOk {
				t.Errorf("SameTypeAs() = %v, want %v", gotOk, tt.wantOk)
			}
		})`
$DIR/internal/s3select/sql/value_test.go:106:18-106:51: `.fields.a.SameTypeAs(tt.fields.b)`
$DIR/internal/s3select/sql/value_test.go:114:2-116:3: `type fields struct {
		a, b Value
	}`
$DIR/internal/s3select/sql/value_test.go:117:2-121:3: `type test struct {
		name   string
		fields fields
		wantOk bool
	}`
$DIR/internal/s3select/sql/value_test.go:127:4-133:6: `tests = append(tests, test{
				name: fmt.Sprint(a.GetTypeString(), "==", b.GetTypeString()),
				fields: fields{
					a: *a, b: *b,
				},
				wantOk: i == j,
			})`
$DIR/internal/s3select/sql/value_test.go:128:14-128:65: `.Sprint(a.GetTypeString(), "==", b.GetTypeString())`
$DIR/internal/s3select/sql/value_test.go:128:23-128:39: `.GetTypeString()`
$DIR/internal/s3select/sql/value_test.go:128:48-128:64: `.GetTypeString()`
$DIR/internal/s3select/sql/value_test.go:140:4-147:6: `tests = append(tests, test{
				name: fmt.Sprint(a.GetTypeString(), "!=", b.GetTypeString()),
				fields: fields{
					a: *a, b: *b,
				},
				// Only Null == Null
				wantOk: a.IsNull() && b.IsNull() && i == 0 && j == 0,
			})`
$DIR/internal/s3select/sql/value_test.go:141:14-141:65: `.Sprint(a.GetTypeString(), "!=", b.GetTypeString())`
$DIR/internal/s3select/sql/value_test.go:141:23-141:39: `.GetTypeString()`
$DIR/internal/s3select/sql/value_test.go:141:48-141:64: `.GetTypeString()`
$DIR/internal/s3select/sql/value_test.go:146:14-146:23: `.IsNull()`
$DIR/internal/s3select/sql/value_test.go:146:28-146:37: `.IsNull()`
$DIR/internal/s3select/sql/value_test.go:151:3-155:5: `t.Run(tt.name, func(t *testing.T) {
			if gotOk := tt.fields.a.Equals(tt.fields.b); gotOk != tt.wantOk {
				t.Errorf("Equals() = %v, want %v", gotOk, tt.wantOk)
			}
		})`
$DIR/internal/s3select/sql/value_test.go:151:4-155:5: `.Run(tt.name, func(t *testing.T) {
			if gotOk := tt.fields.a.Equals(tt.fields.b); gotOk != tt.wantOk {
				t.Errorf("Equals() = %v, want %v", gotOk, tt.wantOk)
			}
		})`
$DIR/internal/s3select/sql/value_test.go:152:18-152:47: `.fields.a.Equals(tt.fields.b)`
$DIR/internal/s3select/sql/value_test.go:160:2-164:3: `type test struct {
		name    string
		want    string
		wantAlt string
	}`
$DIR/internal/s3select/sql/value_test.go:168:31-168:40: `.String()`
$DIR/internal/s3select/sql/value_test.go:173:31-173:40: `.String()`
$DIR/internal/s3select/sql/value_test.go:178:31-178:40: `.String()`
$DIR/internal/s3select/sql/value_test.go:183:31-183:40: `.String()`
$DIR/internal/s3select/sql/value_test.go:188:31-188:40: `.String()`
$DIR/internal/s3select/sql/value_test.go:193:31-193:40: `.String()`
$DIR/internal/s3select/sql/value_test.go:198:31-198:40: `.String()`
$DIR/internal/s3select/sql/value_test.go:205:3-214:5: `t.Run(tt.name, func(t *testing.T) {
			v := valueBuilders[i]()
			vAlt := altValueBuilders[i]()
			if got := v.CSVString(); got != tt.want {
				t.Errorf("CSVString() = %v, want %v", got, tt.want)
			}
			if got := vAlt.CSVString(); got != tt.wantAlt {
				t.Errorf("CSVString() = %v, want %v", got, tt.wantAlt)
			}
		})`
$DIR/internal/s3select/sql/value_test.go:205:4-214:5: `.Run(tt.name, func(t *testing.T) {
			v := valueBuilders[i]()
			vAlt := altValueBuilders[i]()
			if got := v.CSVString(); got != tt.want {
				t.Errorf("CSVString() = %v, want %v", got, tt.want)
			}
			if got := vAlt.CSVString(); got != tt.wantAlt {
				t.Errorf("CSVString() = %v, want %v", got, tt.wantAlt)
			}
		})`
$DIR/internal/s3select/sql/value_test.go:208:15-208:27: `.CSVString()`
$DIR/internal/s3select/sql/value_test.go:211:18-211:30: `.CSVString()`
$DIR/internal/s3select/sql/value_test.go:219:2-221:3: `type fields struct {
		value interface{}
	}`
$DIR/internal/s3select/sql/value_test.go:271:26-271:55: `.FormatInt(math.MaxInt64, 10)`
$DIR/internal/s3select/sql/value_test.go:279:26-279:55: `.FormatInt(math.MinInt64, 10)`
$DIR/internal/s3select/sql/value_test.go:353:3-364:5: `t.Run(tt.name, func(t *testing.T) {
			v := &Value{
				value: tt.fields.value,
			}
			got, got1 := v.bytesToInt()
			if got != tt.want {
				t.Errorf("bytesToInt() got = %v, want %v", got, tt.want)
			}
			if got1 != tt.wantOK {
				t.Errorf("bytesToInt() got1 = %v, want %v", got1, tt.wantOK)
			}
		})`
$DIR/internal/s3select/sql/value_test.go:353:4-364:5: `.Run(tt.name, func(t *testing.T) {
			v := &Value{
				value: tt.fields.value,
			}
			got, got1 := v.bytesToInt()
			if got != tt.want {
				t.Errorf("bytesToInt() got = %v, want %v", got, tt.want)
			}
			if got1 != tt.wantOK {
				t.Errorf("bytesToInt() got1 = %v, want %v", got1, tt.wantOK)
			}
		})`
$DIR/internal/s3select/sql/value_test.go:357:18-357:31: `.bytesToInt()`
$DIR/internal/s3select/sql/value_test.go:369:2-371:3: `type fields struct {
		value interface{}
	}`
$DIR/internal/s3select/sql/value_test.go:422:26-422:55: `.FormatInt(math.MaxInt64, 10)`
$DIR/internal/s3select/sql/value_test.go:430:26-430:55: `.FormatInt(math.MinInt64, 10)`
$DIR/internal/s3select/sql/value_test.go:456:26-456:68: `.FormatFloat(math.MaxFloat64, 'g', -1, 64)`
$DIR/internal/s3select/sql/value_test.go:464:26-464:69: `.FormatFloat(-math.MaxFloat64, 'g', -1, 64)`
$DIR/internal/s3select/sql/value_test.go:475:16-475:23: `.Inf(1)`
$DIR/internal/s3select/sql/value_test.go:484:16-484:24: `.Inf(-1)`
$DIR/internal/s3select/sql/value_test.go:490:26-490:80: `.FormatFloat(math.SmallestNonzeroFloat64, 'g', -1, 64)`
$DIR/internal/s3select/sql/value_test.go:498:26-498:81: `.FormatFloat(-math.SmallestNonzeroFloat64, 'g', -1, 64)`
$DIR/internal/s3select/sql/value_test.go:554:3-566:5: `t.Run(tt.name, func(t *testing.T) {
			v := Value{
				value: tt.fields.value,
			}
			got, got1 := v.bytesToFloat()
			diff := math.Abs(got - tt.want)
			if diff > floatCmpTolerance {
				t.Errorf("bytesToFloat() got = %v, want %v", got, tt.want)
			}
			if got1 != tt.wantOK {
				t.Errorf("bytesToFloat() got1 = %v, want %v", got1, tt.wantOK)
			}
		})`
$DIR/internal/s3select/sql/value_test.go:554:4-566:5: `.Run(tt.name, func(t *testing.T) {
			v := Value{
				value: tt.fields.value,
			}
			got, got1 := v.bytesToFloat()
			diff := math.Abs(got - tt.want)
			if diff > floatCmpTolerance {
				t.Errorf("bytesToFloat() got = %v, want %v", got, tt.want)
			}
			if got1 != tt.wantOK {
				t.Errorf("bytesToFloat() got1 = %v, want %v", got1, tt.wantOK)
			}
		})`
$DIR/internal/s3select/sql/value_test.go:558:18-558:33: `.bytesToFloat()`
$DIR/internal/s3select/sql/value_test.go:559:16-559:35: `.Abs(got - tt.want)`
$DIR/internal/s3select/sql/value_test.go:571:2-573:3: `type fields struct {
		value interface{}
	}`
$DIR/internal/s3select/sql/value_test.go:670:3-681:5: `t.Run(tt.name, func(t *testing.T) {
			v := Value{
				value: tt.fields.value,
			}
			gotVal, gotOk := v.bytesToBool()
			if gotVal != tt.wantVal {
				t.Errorf("bytesToBool() gotVal = %v, want %v", gotVal, tt.wantVal)
			}
			if gotOk != tt.wantOk {
				t.Errorf("bytesToBool() gotOk = %v, want %v", gotOk, tt.wantOk)
			}
		})`
$DIR/internal/s3select/sql/value_test.go:670:4-681:5: `.Run(tt.name, func(t *testing.T) {
			v := Value{
				value: tt.fields.value,
			}
			gotVal, gotOk := v.bytesToBool()
			if gotVal != tt.wantVal {
				t.Errorf("bytesToBool() gotVal = %v, want %v", gotVal, tt.wantVal)
			}
			if gotOk != tt.wantOk {
				t.Errorf("bytesToBool() gotOk = %v, want %v", gotOk, tt.wantOk)
			}
		})`
$DIR/internal/s3select/sql/value_test.go:674:22-674:36: `.bytesToBool()`
$DIR/internal/sync/errgroup/errgroup_test.go:40:3-51:5: `t.Run(fmt.Sprintf("Test%d", j+1), func(t *testing.T) {
			g := WithNErrs(len(tc.errs))
			for i, err := range tc.errs {
				err := err
				g.Go(func() error { return err }, i)
			}

			gotErrs := g.Wait()
			if !reflect.DeepEqual(gotErrs, tc.errs) {
				t.Errorf("Expected %#v, got %#v", tc.errs, gotErrs)
			}
		})`
$DIR/internal/sync/errgroup/errgroup_test.go:40:4-51:5: `.Run(fmt.Sprintf("Test%d", j+1), func(t *testing.T) {
			g := WithNErrs(len(tc.errs))
			for i, err := range tc.errs {
				err := err
				g.Go(func() error { return err }, i)
			}

			gotErrs := g.Wait()
			if !reflect.DeepEqual(gotErrs, tc.errs) {
				t.Errorf("Expected %#v, got %#v", tc.errs, gotErrs)
			}
		})`
$DIR/internal/sync/errgroup/errgroup_test.go:40:12-40:35: `.Sprintf("Test%d", j+1)`
$DIR/internal/sync/errgroup/errgroup_test.go:44:5-44:41: `g.Go(func() error { return err }, i)`
$DIR/internal/sync/errgroup/errgroup_test.go:44:6-44:41: `.Go(func() error { return err }, i)`
$DIR/internal/sync/errgroup/errgroup_test.go:47:16-47:23: `.Wait()`
$DIR/internal/sync/errgroup/errgroup_test.go:48:15-48:43: `.DeepEqual(gotErrs, tc.errs)`
$DIR/internal/workers/workers_test.go:75:4-75:13: `jt.Take()`
$DIR/internal/workers/workers_test.go:75:6-75:13: `.Take()`
$DIR/internal/workers/workers_test.go:77:13-77:20: `.Give()`
$DIR/internal/workers/workers_test.go:78:5-78:14: `mu.Lock()`
$DIR/internal/workers/workers_test.go:78:7-78:14: `.Lock()`
$DIR/internal/workers/workers_test.go:79:5-79:15: `jobsDone++`
$DIR/internal/workers/workers_test.go:80:5-80:16: `mu.Unlock()`
$DIR/internal/workers/workers_test.go:80:7-80:16: `.Unlock()`
$DIR/internal/workers/workers_test.go:83:3-83:12: `jt.Wait()`
$DIR/internal/workers/workers_test.go:83:5-83:12: `.Wait()`
$DIR/internal/workers/workers_test.go:90:3-92:5: `t.Run(fmt.Sprintf("test-%d", i), func(t *testing.T) {
			testFn(test.n, test.jobs, test.mustFail)
		})`
$DIR/internal/workers/workers_test.go:90:4-92:5: `.Run(fmt.Sprintf("test-%d", i), func(t *testing.T) {
			testFn(test.n, test.jobs, test.mustFail)
		})`
$DIR/internal/workers/workers_test.go:90:12-90:34: `.Sprintf("test-%d", i)`
$DIR/internal/workers/workers_test.go:91:4-91:44: `testFn(test.n, test.jobs, test.mustFail)`
$DIR/internal/workers/workers_test.go:102:5-102:14: `jt.Take()`
$DIR/internal/workers/workers_test.go:102:7-102:14: `.Take()`
$DIR/internal/workers/workers_test.go:104:14-104:21: `.Give()`
$DIR/internal/workers/workers_test.go:105:6-105:15: `mu.Lock()`
$DIR/internal/workers/workers_test.go:105:8-105:15: `.Lock()`
$DIR/internal/workers/workers_test.go:106:6-106:16: `jobsDone++`
$DIR/internal/workers/workers_test.go:107:6-107:17: `mu.Unlock()`
$DIR/internal/workers/workers_test.go:107:8-107:17: `.Unlock()`
$DIR/internal/workers/workers_test.go:110:4-110:13: `jt.Wait()`
$DIR/internal/workers/workers_test.go:110:6-110:13: `.Wait()`
