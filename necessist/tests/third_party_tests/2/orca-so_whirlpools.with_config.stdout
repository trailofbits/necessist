42 candidates in 1 test in 1 source file
$DIR/legacy-sdk/whirlpool/tests/sdk/whirlpools/whirlpool-impl.test.ts: dry running
$DIR/legacy-sdk/whirlpool/tests/sdk/whirlpools/whirlpool-impl.test.ts: mutilating
$DIR/legacy-sdk/whirlpool/tests/sdk/whirlpools/whirlpool-impl.test.ts: `await toTx(
          ctx,
          WhirlpoolIx.swapV2Ix(ctx.program, {
            amount: new BN(200_000),
            otherAmountThreshold: ZERO_BN,
            sqrtPriceLimit: MathUtil.toX64(new Decimal(4)),
            amountSpecifiedIsInput: true,
            aToB: true,
            whirlpool: whirlpoolPda.publicKey,
            tokenAuthority: ctx.wallet.publicKey,
            tokenOwnerAccountA: tokenAccountA,
            tokenVaultA: tokenVaultAKeypair.publicKey,
            tokenOwnerAccountB: tokenAccountB,
            tokenVaultB: tokenVaultBKeypair.publicKey,
            tickArray0: tickArrayPda.publicKey,
            tickArray1: tickArrayPda.publicKey,
            tickArray2: tickArrayPda.publicKey,
            oracle: oraclePda.publicKey,
            tokenMintA: tokenExtensionCtx.tokenMintWithProgramA.address,
            tokenMintB: tokenExtensionCtx.tokenMintWithProgramB.address,
            tokenProgramA: tokenExtensionCtx.tokenMintWithProgramA.tokenProgram,
            tokenProgramB: tokenExtensionCtx.tokenMintWithProgramB.tokenProgram,
            ...(await TokenExtensionUtil.getExtraAccountMetasForTransferHookForPool(
              ctx.connection,
              tokenExtensionCtx,
              tokenAccountA,
              tokenVaultAKeypair.publicKey,
              ctx.wallet.publicKey,
              tokenVaultBKeypair.publicKey,
              tokenAccountB,
              whirlpoolPda.publicKey,
            )),
          }),
        )
          .prependInstruction(useMaxCU()) // TransferHook require much CU
          .buildAndExecute();` passed
$DIR/legacy-sdk/whirlpool/tests/sdk/whirlpools/whirlpool-impl.test.ts: `await toTx(
          ctx,
          WhirlpoolIx.swapV2Ix(ctx.program, {
            amount: new BN(200_000),
            otherAmountThreshold: ZERO_BN,
            sqrtPriceLimit: MathUtil.toX64(new Decimal(5)),
            amountSpecifiedIsInput: true,
            aToB: false,
            whirlpool: whirlpoolPda.publicKey,
            tokenAuthority: ctx.wallet.publicKey,
            tokenOwnerAccountA: tokenAccountA,
            tokenVaultA: tokenVaultAKeypair.publicKey,
            tokenOwnerAccountB: tokenAccountB,
            tokenVaultB: tokenVaultBKeypair.publicKey,
            tickArray0: tickArrayPda.publicKey,
            tickArray1: tickArrayPda.publicKey,
            tickArray2: tickArrayPda.publicKey,
            oracle: oraclePda.publicKey,
            tokenMintA: tokenExtensionCtx.tokenMintWithProgramA.address,
            tokenMintB: tokenExtensionCtx.tokenMintWithProgramB.address,
            tokenProgramA: tokenExtensionCtx.tokenMintWithProgramA.tokenProgram,
            tokenProgramB: tokenExtensionCtx.tokenMintWithProgramB.tokenProgram,
            ...(await TokenExtensionUtil.getExtraAccountMetasForTransferHookForPool(
              ctx.connection,
              tokenExtensionCtx,
              tokenVaultAKeypair.publicKey,
              tokenAccountA,
              whirlpoolPda.publicKey,
              tokenAccountB,
              tokenVaultBKeypair.publicKey,
              ctx.wallet.publicKey,
            )),
          }),
        )
          .prependInstruction(useMaxCU()) // TransferHook require much CU
          .buildAndExecute();` passed
$DIR/legacy-sdk/whirlpool/tests/sdk/whirlpools/whirlpool-impl.test.ts: `await sleep(1200);` failed
$DIR/legacy-sdk/whirlpool/tests/sdk/whirlpools/whirlpool-impl.test.ts: `await transferToken(
          provider,
          walletPositionTokenAccount,
          newOwnerPositionTokenAccount,
          1,
        );` failed
$DIR/legacy-sdk/whirlpool/tests/sdk/whirlpools/whirlpool-impl.test.ts: `signatures.push(await tx.addSigner(otherWallet).buildAndExecute());` failed
$DIR/legacy-sdk/whirlpool/tests/sdk/whirlpools/whirlpool-impl.test.ts: `.init({
          tokenTraitA: tokenTraits.tokenTraitA,
          tokenTraitB: tokenTraits.tokenTraitB,
          tickSpacing,
          positions: [
            {
              tickLowerIndex,
              tickUpperIndex,
              liquidityAmount: new anchor.BN(10_000_000),
            }, // In range position
            {
              tickLowerIndex: 0,
              tickUpperIndex: 128,
              liquidityAmount: new anchor.BN(1_000_000),
            }, // Out of range position
          ],
          rewards: [
            {
              rewardTokenTrait: { isToken2022: false },
              emissionsPerSecondX64: MathUtil.toX64(new Decimal(10)),
              vaultAmount: new BN(vaultStartBalance),
            },
            {
              rewardTokenTrait: { isToken2022: false },
              emissionsPerSecondX64: MathUtil.toX64(new Decimal(5)),
              vaultAmount: new BN(vaultStartBalance),
            },
            {
              rewardTokenTrait: { isToken2022: false },
              emissionsPerSecondX64: MathUtil.toX64(new Decimal(10)),
              vaultAmount: new BN(vaultStartBalance),
            },
          ],
        })` nonbuildable
$DIR/legacy-sdk/whirlpool/tests/sdk/whirlpools/whirlpool-impl.test.ts: `.toX64(new Decimal(10))` nonbuildable
$DIR/legacy-sdk/whirlpool/tests/sdk/whirlpools/whirlpool-impl.test.ts: `.toX64(new Decimal(5))` nonbuildable
$DIR/legacy-sdk/whirlpool/tests/sdk/whirlpools/whirlpool-impl.test.ts: `.toX64(new Decimal(10))` nonbuildable
$DIR/legacy-sdk/whirlpool/tests/sdk/whirlpools/whirlpool-impl.test.ts: `.getInfos()` passed
$DIR/legacy-sdk/whirlpool/tests/sdk/whirlpools/whirlpool-impl.test.ts: `.getTickArray(
          ctx.program.programId,
          whirlpoolPda.publicKey,
          22528,
        )` nonbuildable
$DIR/legacy-sdk/whirlpool/tests/sdk/whirlpools/whirlpool-impl.test.ts: `.getOracle(
          ctx.program.programId,
          whirlpoolPda.publicKey,
        )` nonbuildable
$DIR/legacy-sdk/whirlpool/tests/sdk/whirlpools/whirlpool-impl.test.ts: `.buildTokenExtensionContext(
            ctx.fetcher,
            (
              await client.getPool(whirlpoolPda.publicKey, IGNORE_CACHE)
            ).getData(),
            IGNORE_CACHE,
          )` nonbuildable
$DIR/legacy-sdk/whirlpool/tests/sdk/whirlpools/whirlpool-impl.test.ts: `.getPool(whirlpoolPda.publicKey, IGNORE_CACHE)` nonbuildable
$DIR/legacy-sdk/whirlpool/tests/sdk/whirlpools/whirlpool-impl.test.ts: `.getData()` nonbuildable
$DIR/legacy-sdk/whirlpool/tests/sdk/whirlpools/whirlpool-impl.test.ts: `.swapV2Ix(ctx.program, {
            amount: new BN(200_000),
            otherAmountThreshold: ZERO_BN,
            sqrtPriceLimit: MathUtil.toX64(new Decimal(4)),
            amountSpecifiedIsInput: true,
            aToB: true,
            whirlpool: whirlpoolPda.publicKey,
            tokenAuthority: ctx.wallet.publicKey,
            tokenOwnerAccountA: tokenAccountA,
            tokenVaultA: tokenVaultAKeypair.publicKey,
            tokenOwnerAccountB: tokenAccountB,
            tokenVaultB: tokenVaultBKeypair.publicKey,
            tickArray0: tickArrayPda.publicKey,
            tickArray1: tickArrayPda.publicKey,
            tickArray2: tickArrayPda.publicKey,
            oracle: oraclePda.publicKey,
            tokenMintA: tokenExtensionCtx.tokenMintWithProgramA.address,
            tokenMintB: tokenExtensionCtx.tokenMintWithProgramB.address,
            tokenProgramA: tokenExtensionCtx.tokenMintWithProgramA.tokenProgram,
            tokenProgramB: tokenExtensionCtx.tokenMintWithProgramB.tokenProgram,
            ...(await TokenExtensionUtil.getExtraAccountMetasForTransferHookForPool(
              ctx.connection,
              tokenExtensionCtx,
              tokenAccountA,
              tokenVaultAKeypair.publicKey,
              ctx.wallet.publicKey,
              tokenVaultBKeypair.publicKey,
              tokenAccountB,
              whirlpoolPda.publicKey,
            )),
          })` nonbuildable
$DIR/legacy-sdk/whirlpool/tests/sdk/whirlpools/whirlpool-impl.test.ts: `.toX64(new Decimal(4))` nonbuildable
$DIR/legacy-sdk/whirlpool/tests/sdk/whirlpools/whirlpool-impl.test.ts: `.getExtraAccountMetasForTransferHookForPool(
              ctx.connection,
              tokenExtensionCtx,
              tokenAccountA,
              tokenVaultAKeypair.publicKey,
              ctx.wallet.publicKey,
              tokenVaultBKeypair.publicKey,
              tokenAccountB,
              whirlpoolPda.publicKey,
            )` nonbuildable
$DIR/legacy-sdk/whirlpool/tests/sdk/whirlpools/whirlpool-impl.test.ts: `// TransferHook require much CU
          .buildAndExecute()` passed
$DIR/legacy-sdk/whirlpool/tests/sdk/whirlpools/whirlpool-impl.test.ts: `.swapV2Ix(ctx.program, {
            amount: new BN(200_000),
            otherAmountThreshold: ZERO_BN,
            sqrtPriceLimit: MathUtil.toX64(new Decimal(5)),
            amountSpecifiedIsInput: true,
            aToB: false,
            whirlpool: whirlpoolPda.publicKey,
            tokenAuthority: ctx.wallet.publicKey,
            tokenOwnerAccountA: tokenAccountA,
            tokenVaultA: tokenVaultAKeypair.publicKey,
            tokenOwnerAccountB: tokenAccountB,
            tokenVaultB: tokenVaultBKeypair.publicKey,
            tickArray0: tickArrayPda.publicKey,
            tickArray1: tickArrayPda.publicKey,
            tickArray2: tickArrayPda.publicKey,
            oracle: oraclePda.publicKey,
            tokenMintA: tokenExtensionCtx.tokenMintWithProgramA.address,
            tokenMintB: tokenExtensionCtx.tokenMintWithProgramB.address,
            tokenProgramA: tokenExtensionCtx.tokenMintWithProgramA.tokenProgram,
            tokenProgramB: tokenExtensionCtx.tokenMintWithProgramB.tokenProgram,
            ...(await TokenExtensionUtil.getExtraAccountMetasForTransferHookForPool(
              ctx.connection,
              tokenExtensionCtx,
              tokenVaultAKeypair.publicKey,
              tokenAccountA,
              whirlpoolPda.publicKey,
              tokenAccountB,
              tokenVaultBKeypair.publicKey,
              ctx.wallet.publicKey,
            )),
          })` nonbuildable
$DIR/legacy-sdk/whirlpool/tests/sdk/whirlpools/whirlpool-impl.test.ts: `.toX64(new Decimal(5))` nonbuildable
$DIR/legacy-sdk/whirlpool/tests/sdk/whirlpools/whirlpool-impl.test.ts: `.getExtraAccountMetasForTransferHookForPool(
              ctx.connection,
              tokenExtensionCtx,
              tokenVaultAKeypair.publicKey,
              tokenAccountA,
              whirlpoolPda.publicKey,
              tokenAccountB,
              tokenVaultBKeypair.publicKey,
              ctx.wallet.publicKey,
            )` nonbuildable
$DIR/legacy-sdk/whirlpool/tests/sdk/whirlpools/whirlpool-impl.test.ts: `// TransferHook require much CU
          .buildAndExecute()` passed
$DIR/legacy-sdk/whirlpool/tests/sdk/whirlpools/whirlpool-impl.test.ts: `.web3.Keypair.generate()` nonbuildable
$DIR/legacy-sdk/whirlpool/tests/sdk/whirlpools/whirlpool-impl.test.ts: `.getPool(whirlpoolPda.publicKey, IGNORE_CACHE)` nonbuildable
$DIR/legacy-sdk/whirlpool/tests/sdk/whirlpools/whirlpool-impl.test.ts: `.getPosition(
          positionWithFees.publicKey,
          IGNORE_CACHE,
        )` nonbuildable
$DIR/legacy-sdk/whirlpool/tests/sdk/whirlpools/whirlpool-impl.test.ts: `.getData()` nonbuildable
$DIR/legacy-sdk/whirlpool/tests/sdk/whirlpools/whirlpool-impl.test.ts: `.getData()` nonbuildable
$DIR/legacy-sdk/whirlpool/tests/sdk/whirlpools/whirlpool-impl.test.ts: `.closePosition(
          positionWithFees.publicKey,
          new Percentage(new BN(10), new BN(100)),
          otherWallet.publicKey,
          otherWallet.publicKey,
          ctx.wallet.publicKey,
        )` nonbuildable
$DIR/legacy-sdk/whirlpool/tests/sdk/whirlpools/whirlpool-impl.test.ts: `.getData()` nonbuildable
$DIR/legacy-sdk/whirlpool/tests/sdk/whirlpools/whirlpool-impl.test.ts: `.fromDecimal(new Decimal(0))` nonbuildable
$DIR/legacy-sdk/whirlpool/tests/sdk/whirlpools/whirlpool-impl.test.ts: `.buildTokenExtensionContext(
            fetcher,
            poolData,
            IGNORE_CACHE,
          )` nonbuildable
$DIR/legacy-sdk/whirlpool/tests/sdk/whirlpools/whirlpool-impl.test.ts: `.getLowerTickData()` nonbuildable
$DIR/legacy-sdk/whirlpool/tests/sdk/whirlpools/whirlpool-impl.test.ts: `.getUpperTickData()` nonbuildable
$DIR/legacy-sdk/whirlpool/tests/sdk/whirlpools/whirlpool-impl.test.ts: `.buildTokenExtensionContext(
              fetcher,
              poolData,
              IGNORE_CACHE,
            )` nonbuildable
$DIR/legacy-sdk/whirlpool/tests/sdk/whirlpools/whirlpool-impl.test.ts: `.push(await tx.addSigner(otherWallet).buildAndExecute())` nonbuildable
$DIR/legacy-sdk/whirlpool/tests/sdk/whirlpools/whirlpool-impl.test.ts: `.addSigner(otherWallet)` nonbuildable
$DIR/legacy-sdk/whirlpool/tests/sdk/whirlpools/whirlpool-impl.test.ts: `.buildAndExecute()` nonbuildable
$DIR/legacy-sdk/whirlpool/tests/sdk/whirlpools/whirlpool-impl.test.ts: `.provider.connection.getTransaction(signatures[0], {
          maxSupportedTransactionVersion: 0,
        })` nonbuildable
$DIR/legacy-sdk/whirlpool/tests/sdk/whirlpools/whirlpool-impl.test.ts: `.getLowerTickData()` nonbuildable
$DIR/legacy-sdk/whirlpool/tests/sdk/whirlpools/whirlpool-impl.test.ts: `.getUpperTickData()` nonbuildable
$DIR/legacy-sdk/whirlpool/tests/sdk/whirlpools/whirlpool-impl.test.ts: `.buildTokenExtensionContext(
              fetcher,
              poolData,
              IGNORE_CACHE,
            )` nonbuildable
