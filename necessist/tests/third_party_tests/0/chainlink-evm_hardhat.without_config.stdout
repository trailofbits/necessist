$DIR/contracts/test/v0.8/Cron.test.ts: `await setTimestamp(timeStamp)`
$DIR/contracts/test/v0.8/Cron.test.ts: `.map(async (input) => {
            const spec = await cron.encodeCronString(input)
            const output = await cron.encodedSpecToString(spec)
            assert.equal(output, input)
          })`
$DIR/contracts/test/v0.8/Cron.test.ts: `.encodeCronString(input)`
$DIR/contracts/test/v0.8/Cron.test.ts: `.encodedSpecToString(spec)`
$DIR/contracts/test/v0.8/Cron.test.ts: `.unix(timeStamp)`
$DIR/contracts/test/v0.8/Cron.test.ts: `.add(30, 'days')`
$DIR/contracts/test/v0.8/Cron.test.ts: `.unix()`
$DIR/contracts/test/v0.8/Cron.test.ts: `.subtract(1, 'day')`
$DIR/contracts/test/v0.8/Cron.test.ts: `.unix()`
$DIR/contracts/test/v0.8/Cron.test.ts: `.add(12, 'hours')`
$DIR/contracts/test/v0.8/Cron.test.ts: `.unix()`
$DIR/contracts/test/v0.8/Cron.test.ts: `.subtract(12, 'hours')`
$DIR/contracts/test/v0.8/Cron.test.ts: `.unix()`
$DIR/contracts/test/v0.8/Cron.test.ts: `.add(2, 'hours')`
$DIR/contracts/test/v0.8/Cron.test.ts: `.add(10, 'minutes')`
$DIR/contracts/test/v0.8/Cron.test.ts: `.unix()`
$DIR/contracts/test/v0.8/Cron.test.ts: `.subtract(17, 'hours')`
$DIR/contracts/test/v0.8/Cron.test.ts: `.subtract(50, 'minutes')`
$DIR/contracts/test/v0.8/Cron.test.ts: `.unix()`
$DIR/contracts/test/v0.8/Cron.test.ts: `.add(2, 'months')`
$DIR/contracts/test/v0.8/Cron.test.ts: `.unix()`
$DIR/contracts/test/v0.8/Cron.test.ts: `.subtract(1, 'months')`
$DIR/contracts/test/v0.8/Cron.test.ts: `.unix()`
$DIR/contracts/test/v0.8/Cron.test.ts: `.calculateNextTick(test.cron)`
$DIR/contracts/test/v0.8/Cron.test.ts: `.calculateLastTick(test.cron)`
$DIR/contracts/test/v0.8/SimpleReadAccessController.test.ts: `.checkEnabled()`
$DIR/contracts/test/v0.8/SimpleReadAccessController.test.ts: `.connect(personas.Eddy)`
$DIR/contracts/test/v0.8/SimpleReadAccessController.test.ts: `.hasAccess(await personas.Eddy.getAddress(), '0x00')`
$DIR/contracts/test/v0.8/SimpleReadAccessController.test.ts: `.Eddy.getAddress()`
$DIR/contracts/test/v0.8/SimpleReadAccessController.test.ts: `.connect(personas.Eddy)`
$DIR/contracts/test/v0.8/SimpleReadAccessController.test.ts: `.hasAccess(await personas.Carol.getAddress(), '0x00')`
$DIR/contracts/test/v0.8/SimpleReadAccessController.test.ts: `.Carol.getAddress()`
$DIR/contracts/test/v0.8/SimpleReadAccessController.test.ts: `.hasAccess(await personas.Eddy.getAddress(), '0x00')`
$DIR/contracts/test/v0.8/SimpleReadAccessController.test.ts: `.Eddy.getAddress()`
$DIR/contracts/test/v0.8/SimpleReadAccessController.test.ts: `.Eddy.getAddress()`
$DIR/contracts/test/v0.8/SimpleReadAccessController.test.ts: `.addAccess(
            await personas.Eddy.getAddress(),
          )`
$DIR/contracts/test/v0.8/SimpleReadAccessController.test.ts: `.Eddy.getAddress()`
$DIR/contracts/test/v0.8/SimpleReadAccessController.test.ts: `.wait()`
$DIR/contracts/test/v0.8/SimpleReadAccessController.test.ts: `.hasAccess(await personas.Eddy.getAddress(), '0x00')`
$DIR/contracts/test/v0.8/SimpleReadAccessController.test.ts: `.Eddy.getAddress()`
$DIR/contracts/test/v0.8/SimpleReadAccessController.test.ts: `.Eddy.getAddress()`
$DIR/contracts/test/v0.8/SimpleReadAccessController.test.ts: `.removeAccess(
            await personas.Eddy.getAddress(),
          )`
$DIR/contracts/test/v0.8/SimpleReadAccessController.test.ts: `.Eddy.getAddress()`
$DIR/contracts/test/v0.8/SimpleReadAccessController.test.ts: `.wait()`
$DIR/contracts/test/v0.8/SimpleReadAccessController.test.ts: `.checkEnabled()`
$DIR/contracts/test/v0.8/SimpleReadAccessController.test.ts: `.checkEnabled()`
$DIR/contracts/test/v0.8/SimpleReadAccessController.test.ts: `.hasAccess(await personas.Eddy.getAddress(), '0x00')`
$DIR/contracts/test/v0.8/SimpleReadAccessController.test.ts: `.Eddy.getAddress()`
$DIR/contracts/test/v0.8/SimpleReadAccessController.test.ts: `.hasAccess(await personas.Ned.getAddress(), '0x00')`
$DIR/contracts/test/v0.8/SimpleReadAccessController.test.ts: `.Ned.getAddress()`
$DIR/contracts/test/v0.8/SimpleReadAccessController.test.ts: `.disableAccessCheck()`
$DIR/contracts/test/v0.8/SimpleReadAccessController.test.ts: `.wait()`
$DIR/contracts/test/v0.8/SimpleReadAccessController.test.ts: `.hasAccess(await personas.Eddy.getAddress(), '0x00')`
$DIR/contracts/test/v0.8/SimpleReadAccessController.test.ts: `.Eddy.getAddress()`
$DIR/contracts/test/v0.8/SimpleReadAccessController.test.ts: `.hasAccess(await personas.Ned.getAddress(), '0x00')`
$DIR/contracts/test/v0.8/SimpleReadAccessController.test.ts: `.Ned.getAddress()`
$DIR/contracts/test/v0.8/SimpleReadAccessController.test.ts: `.enableAccessCheck()`
$DIR/contracts/test/v0.8/SimpleReadAccessController.test.ts: `.wait()`
$DIR/contracts/test/v0.8/SimpleWriteAccessController.test.ts: `.checkEnabled()`
$DIR/contracts/test/v0.8/SimpleWriteAccessController.test.ts: `.connect(personas.Eddy)`
$DIR/contracts/test/v0.8/SimpleWriteAccessController.test.ts: `.hasAccess(await personas.Eddy.getAddress(), '0x00')`
$DIR/contracts/test/v0.8/SimpleWriteAccessController.test.ts: `.Eddy.getAddress()`
$DIR/contracts/test/v0.8/SimpleWriteAccessController.test.ts: `.connect(personas.Eddy)`
$DIR/contracts/test/v0.8/SimpleWriteAccessController.test.ts: `.hasAccess(await personas.Carol.getAddress(), '0x00')`
$DIR/contracts/test/v0.8/SimpleWriteAccessController.test.ts: `.Carol.getAddress()`
$DIR/contracts/test/v0.8/SimpleWriteAccessController.test.ts: `.hasAccess(await personas.Eddy.getAddress(), '0x00')`
$DIR/contracts/test/v0.8/SimpleWriteAccessController.test.ts: `.Eddy.getAddress()`
$DIR/contracts/test/v0.8/SimpleWriteAccessController.test.ts: `.Eddy.getAddress()`
$DIR/contracts/test/v0.8/SimpleWriteAccessController.test.ts: `.hasAccess(await personas.Eddy.getAddress(), '0x00')`
$DIR/contracts/test/v0.8/SimpleWriteAccessController.test.ts: `.Eddy.getAddress()`
$DIR/contracts/test/v0.8/SimpleWriteAccessController.test.ts: `.Eddy.getAddress()`
$DIR/contracts/test/v0.8/SimpleWriteAccessController.test.ts: `.checkEnabled()`
$DIR/contracts/test/v0.8/SimpleWriteAccessController.test.ts: `.checkEnabled()`
$DIR/contracts/test/v0.8/SimpleWriteAccessController.test.ts: `.hasAccess(await personas.Eddy.getAddress(), '0x00')`
$DIR/contracts/test/v0.8/SimpleWriteAccessController.test.ts: `.Eddy.getAddress()`
$DIR/contracts/test/v0.8/SimpleWriteAccessController.test.ts: `.hasAccess(await personas.Ned.getAddress(), '0x00')`
$DIR/contracts/test/v0.8/SimpleWriteAccessController.test.ts: `.Ned.getAddress()`
$DIR/contracts/test/v0.8/SimpleWriteAccessController.test.ts: `.hasAccess(await personas.Eddy.getAddress(), '0x00')`
$DIR/contracts/test/v0.8/SimpleWriteAccessController.test.ts: `.Eddy.getAddress()`
$DIR/contracts/test/v0.8/SimpleWriteAccessController.test.ts: `.hasAccess(await personas.Ned.getAddress(), '0x00')`
$DIR/contracts/test/v0.8/SimpleWriteAccessController.test.ts: `.Ned.getAddress()`
$DIR/contracts/test/v0.8/automation/AutomationRegistrar2_3.test.ts: `await registrar
        .connect(registrarOwner)
        .setTriggerConfig(
          Trigger.CONDITION,
          autoApproveType_ENABLED_ALL,
          maxAllowedAutoApprove,
        )`
$DIR/contracts/test/v0.8/automation/AutomationRegistrar2_3.test.ts: `await registrar
        .connect(registrarOwner)
        .setTriggerConfig(
          Trigger.CONDITION,
          autoApproveType_ENABLED_ALL,
          maxAllowedAutoApprove,
        )`
$DIR/contracts/test/v0.8/automation/AutomationRegistrar2_3.test.ts: `await linkToken
        .connect(requestSender)
        .transferAndCall(registrar.address, amount, abiEncodedBytes)`
$DIR/contracts/test/v0.8/automation/AutomationRegistrar2_3.test.ts: `await registrar
        .connect(registrarOwner)
        .setTriggerConfig(
          Trigger.CONDITION,
          autoApproveType_DISABLED,
          maxAllowedAutoApprove,
        )`
$DIR/contracts/test/v0.8/automation/AutomationRegistrar2_3.test.ts: `await registrar
        .connect(registrarOwner)
        .setTriggerConfig(Trigger.CONDITION, autoApproveType_ENABLED_ALL, 1)`
$DIR/contracts/test/v0.8/automation/AutomationRegistrar2_3.test.ts: `await registrar
        .connect(registrarOwner)
        .setTriggerConfig(Trigger.LOG, autoApproveType_ENABLED_ALL, 1)`
$DIR/contracts/test/v0.8/automation/AutomationRegistrar2_3.test.ts: `await linkToken
        .connect(requestSender)
        .transferAndCall(registrar.address, amount, abiEncodedBytes)`
$DIR/contracts/test/v0.8/automation/AutomationRegistrar2_3.test.ts: `abiEncodedBytes = encodeRegistrationParams({
        name: upkeepName,
        encryptedEmail: emptyBytes,
        upkeepContract: mock.address,
        gasLimit: performGas.toNumber() + 1, // make unique hash
        adminAddress: await admin.getAddress(),
        checkData: emptyBytes,
        triggerType: Trigger.CONDITION,
        triggerConfig: trigger,
        offchainConfig,
        amount,
        billingToken: linkToken.address,
      })`
$DIR/contracts/test/v0.8/automation/AutomationRegistrar2_3.test.ts: `await linkToken
        .connect(requestSender)
        .transferAndCall(registrar.address, amount, abiEncodedBytes)`
$DIR/contracts/test/v0.8/automation/AutomationRegistrar2_3.test.ts: `abiEncodedBytes = encodeRegistrationParams({
        name: upkeepName,
        encryptedEmail: emptyBytes,
        upkeepContract: mock.address,
        gasLimit: performGas, // make unique hash
        adminAddress: await admin.getAddress(),
        checkData: emptyBytes,
        triggerType: Trigger.LOG,
        triggerConfig: trigger,
        offchainConfig,
        amount,
        billingToken: linkToken.address,
      })`
$DIR/contracts/test/v0.8/automation/AutomationRegistrar2_3.test.ts: `await linkToken
        .connect(requestSender)
        .transferAndCall(registrar.address, amount, abiEncodedBytes)`
$DIR/contracts/test/v0.8/automation/AutomationRegistrar2_3.test.ts: `await registrar
        .connect(registrarOwner)
        .setTriggerConfig(Trigger.CONDITION, autoApproveType_ENABLED_ALL, 2)`
$DIR/contracts/test/v0.8/automation/AutomationRegistrar2_3.test.ts: `abiEncodedBytes = encodeRegistrationParams({
        name: upkeepName,
        encryptedEmail: emptyBytes,
        upkeepContract: mock.address,
        gasLimit: performGas.toNumber() + 2, // make unique hash
        adminAddress: await admin.getAddress(),
        checkData: emptyBytes,
        triggerType: Trigger.CONDITION,
        triggerConfig: trigger,
        offchainConfig,
        amount,
        billingToken: linkToken.address,
      })`
$DIR/contracts/test/v0.8/automation/AutomationRegistrar2_3.test.ts: `await linkToken
        .connect(requestSender)
        .transferAndCall(registrar.address, amount, abiEncodedBytes)`
$DIR/contracts/test/v0.8/automation/AutomationRegistrar2_3.test.ts: `abiEncodedBytes = encodeRegistrationParams({
        name: upkeepName,
        encryptedEmail: emptyBytes,
        upkeepContract: mock.address,
        gasLimit: performGas.toNumber() + 3, // make unique hash
        adminAddress: await admin.getAddress(),
        checkData: emptyBytes,
        triggerType: Trigger.CONDITION,
        triggerConfig: trigger,
        offchainConfig,
        amount,
        billingToken: linkToken.address,
      })`
$DIR/contracts/test/v0.8/automation/AutomationRegistrar2_3.test.ts: `await linkToken
        .connect(requestSender)
        .transferAndCall(registrar.address, amount, abiEncodedBytes)`
$DIR/contracts/test/v0.8/automation/AutomationRegistrar2_3.test.ts: `await registrar
        .connect(registrarOwner)
        .setTriggerConfig(
          Trigger.CONDITION,
          autoApproveType_ENABLED_SENDER_ALLOWLIST,
          maxAllowedAutoApprove,
        )`
$DIR/contracts/test/v0.8/automation/AutomationRegistrar2_3.test.ts: `await registrar
        .connect(registrarOwner)
        .setAutoApproveAllowedSender(senderAddress, true)`
$DIR/contracts/test/v0.8/automation/AutomationRegistrar2_3.test.ts: `await registrar
        .connect(registrarOwner)
        .setTriggerConfig(
          Trigger.CONDITION,
          autoApproveType_ENABLED_SENDER_ALLOWLIST,
          maxAllowedAutoApprove,
        )`
$DIR/contracts/test/v0.8/automation/AutomationRegistrar2_3.test.ts: `await registrar
        .connect(registrarOwner)
        .setAutoApproveAllowedSender(senderAddress, false)`
$DIR/contracts/test/v0.8/automation/AutomationRegistrar2_3.test.ts: `await linkToken.connect(requestSender).approve(registrar.address, amt)`
$DIR/contracts/test/v0.8/automation/AutomationRegistrar2_3.test.ts: `await registrar
        .connect(registrarOwner)
        .setTriggerConfig(
          Trigger.CONDITION,
          autoApproveType_ENABLED_ALL,
          maxAllowedAutoApprove,
        )`
$DIR/contracts/test/v0.8/automation/AutomationRegistrar2_3.test.ts: `await linkToken
        .connect(requestSender)
        .approve(registrar.address, minimumRegistrationAmount)`
$DIR/contracts/test/v0.8/automation/AutomationRegistrar2_3.test.ts: `await registrar
        .connect(registrarOwner)
        .setTriggerConfig(
          Trigger.CONDITION,
          autoApproveType_ENABLED_ALL,
          maxAllowedAutoApprove,
        )`
$DIR/contracts/test/v0.8/automation/AutomationRegistrar2_3.test.ts: `await registry
        .connect(owner)
        .setConfigTypeSafe(keepers, keepers, 1, onchainConfig, 1, '0x', [], [])`
$DIR/contracts/test/v0.8/automation/AutomationRegistrar2_3.test.ts: `await registrar
        .connect(registrarOwner)
        .setTriggerConfig(
          Trigger.CONDITION,
          autoApproveType_ENABLED_ALL,
          maxAllowedAutoApprove,
        )`
$DIR/contracts/test/v0.8/automation/AutomationRegistrar2_3.test.ts: `await linkToken.connect(requestSender).approve(registrar.address, amount)`
$DIR/contracts/test/v0.8/automation/AutomationRegistrar2_3.test.ts: `tx = await registrar
        .connect(registrarOwner)
        .setAutoApproveAllowedSender(senderAddress, false)`
$DIR/contracts/test/v0.8/automation/AutomationRegistrar2_3.test.ts: `senderAllowedStatus = await registrar
        .connect(owner)
        .getAutoApproveAllowedSender(senderAddress)`
$DIR/contracts/test/v0.8/automation/AutomationRegistrar2_3.test.ts: `await registrar.getTriggerRegistrationDetails(Trigger.LOG)`
$DIR/contracts/test/v0.8/automation/AutomationRegistrar2_3.test.ts: `await registrar.connect(registrarOwner).approve({
        name: upkeepName,
        encryptedEmail: emptyBytes,
        upkeepContract: mock.address,
        gasLimit: performGas,
        adminAddress: await admin.getAddress(),
        checkData: emptyBytes,
        triggerType: Trigger.CONDITION,
        triggerConfig: trigger,
        offchainConfig,
        amount,
        billingToken: linkToken.address,
      })`
$DIR/contracts/test/v0.8/automation/AutomationRegistrar2_3.test.ts: `await registrar.connect(registrarOwner).cancel(hash)`
$DIR/contracts/test/v0.8/automation/AutomationRegistrar2_3.test.ts: `await evmRevertCustomError(tx, registrar, errorMsgs.requestNotFound)`
$DIR/contracts/test/v0.8/automation/AutomationRegistrar2_3.test.ts: `tx = registrar.connect(registrarOwner).approve({
        name: upkeepName,
        encryptedEmail: emptyBytes,
        upkeepContract: mock.address,
        gasLimit: performGas,
        adminAddress: await admin.getAddress(),
        checkData: emptyBytes,
        triggerType: Trigger.CONDITION,
        triggerConfig: trigger,
        offchainConfig: emptyBytes,
        amount,
        billingToken: linkToken.address,
      })`
$DIR/contracts/test/v0.8/automation/AutomationRegistrar2_3.test.ts: `.typeAndVersion()`
$DIR/contracts/test/v0.8/automation/AutomationRegistrar2_3.test.ts: `.connect(someAddress)`
$DIR/contracts/test/v0.8/automation/AutomationRegistrar2_3.test.ts: `.onTokenTransfer(await someAddress.getAddress(), 0, '0x')`
$DIR/contracts/test/v0.8/automation/AutomationRegistrar2_3.test.ts: `.getAddress()`
$DIR/contracts/test/v0.8/automation/AutomationRegistrar2_3.test.ts: `.connect(requestSender)`
$DIR/contracts/test/v0.8/automation/AutomationRegistrar2_3.test.ts: `.transferAndCall(registrar.address, amount, abiEncodedBytes)`
$DIR/contracts/test/v0.8/automation/AutomationRegistrar2_3.test.ts: `.connect(registrarOwner)`
$DIR/contracts/test/v0.8/automation/AutomationRegistrar2_3.test.ts: `.setTriggerConfig(
          Trigger.CONDITION,
          autoApproveType_ENABLED_ALL,
          maxAllowedAutoApprove,
        )`
$DIR/contracts/test/v0.8/automation/AutomationRegistrar2_3.test.ts: `.getAddress()`
$DIR/contracts/test/v0.8/automation/AutomationRegistrar2_3.test.ts: `.connect(requestSender)`
$DIR/contracts/test/v0.8/automation/AutomationRegistrar2_3.test.ts: `.transferAndCall(registrar.address, amount, abiEncodedBytes)`
$DIR/contracts/test/v0.8/automation/AutomationRegistrar2_3.test.ts: `.getActiveUpkeepIDs(0, 1)`
$DIR/contracts/test/v0.8/automation/AutomationRegistrar2_3.test.ts: `.getUpkeep(id)`
$DIR/contracts/test/v0.8/automation/AutomationRegistrar2_3.test.ts: `.connect(registrarOwner)`
$DIR/contracts/test/v0.8/automation/AutomationRegistrar2_3.test.ts: `.setTriggerConfig(
          Trigger.CONDITION,
          autoApproveType_ENABLED_ALL,
          maxAllowedAutoApprove,
        )`
$DIR/contracts/test/v0.8/automation/AutomationRegistrar2_3.test.ts: `.getAddress()`
$DIR/contracts/test/v0.8/automation/AutomationRegistrar2_3.test.ts: `.mul(10)`
$DIR/contracts/test/v0.8/automation/AutomationRegistrar2_3.test.ts: `.connect(requestSender)`
$DIR/contracts/test/v0.8/automation/AutomationRegistrar2_3.test.ts: `.transferAndCall(registrar.address, amount, abiEncodedBytes)`
$DIR/contracts/test/v0.8/automation/AutomationRegistrar2_3.test.ts: `.getActiveUpkeepIDs(0, 1)`
$DIR/contracts/test/v0.8/automation/AutomationRegistrar2_3.test.ts: `.getState()`
$DIR/contracts/test/v0.8/automation/AutomationRegistrar2_3.test.ts: `.connect(registrarOwner)`
$DIR/contracts/test/v0.8/automation/AutomationRegistrar2_3.test.ts: `.setTriggerConfig(
          Trigger.CONDITION,
          autoApproveType_DISABLED,
          maxAllowedAutoApprove,
        )`
$DIR/contracts/test/v0.8/automation/AutomationRegistrar2_3.test.ts: `.getAddress()`
$DIR/contracts/test/v0.8/automation/AutomationRegistrar2_3.test.ts: `.connect(requestSender)`
$DIR/contracts/test/v0.8/automation/AutomationRegistrar2_3.test.ts: `.transferAndCall(registrar.address, amount, abiEncodedBytes)`
$DIR/contracts/test/v0.8/automation/AutomationRegistrar2_3.test.ts: `.wait()`
$DIR/contracts/test/v0.8/automation/AutomationRegistrar2_3.test.ts: `.getState()`
$DIR/contracts/test/v0.8/automation/AutomationRegistrar2_3.test.ts: `.getPendingRequest(hash)`
$DIR/contracts/test/v0.8/automation/AutomationRegistrar2_3.test.ts: `.eq(pendingRequest[1])`
$DIR/contracts/test/v0.8/automation/AutomationRegistrar2_3.test.ts: `.connect(registrarOwner)`
$DIR/contracts/test/v0.8/automation/AutomationRegistrar2_3.test.ts: `.setTriggerConfig(Trigger.CONDITION, autoApproveType_ENABLED_ALL, 1)`
$DIR/contracts/test/v0.8/automation/AutomationRegistrar2_3.test.ts: `.connect(registrarOwner)`
$DIR/contracts/test/v0.8/automation/AutomationRegistrar2_3.test.ts: `.setTriggerConfig(Trigger.LOG, autoApproveType_ENABLED_ALL, 1)`
$DIR/contracts/test/v0.8/automation/AutomationRegistrar2_3.test.ts: `.getAddress()`
$DIR/contracts/test/v0.8/automation/AutomationRegistrar2_3.test.ts: `.connect(requestSender)`
$DIR/contracts/test/v0.8/automation/AutomationRegistrar2_3.test.ts: `.transferAndCall(registrar.address, amount, abiEncodedBytes)`
$DIR/contracts/test/v0.8/automation/AutomationRegistrar2_3.test.ts: `.getAddress()`
$DIR/contracts/test/v0.8/automation/AutomationRegistrar2_3.test.ts: `.connect(requestSender)`
$DIR/contracts/test/v0.8/automation/AutomationRegistrar2_3.test.ts: `.transferAndCall(registrar.address, amount, abiEncodedBytes)`
$DIR/contracts/test/v0.8/automation/AutomationRegistrar2_3.test.ts: `.getAddress()`
$DIR/contracts/test/v0.8/automation/AutomationRegistrar2_3.test.ts: `.connect(requestSender)`
$DIR/contracts/test/v0.8/automation/AutomationRegistrar2_3.test.ts: `.transferAndCall(registrar.address, amount, abiEncodedBytes)`
$DIR/contracts/test/v0.8/automation/AutomationRegistrar2_3.test.ts: `.connect(registrarOwner)`
$DIR/contracts/test/v0.8/automation/AutomationRegistrar2_3.test.ts: `.setTriggerConfig(Trigger.CONDITION, autoApproveType_ENABLED_ALL, 2)`
$DIR/contracts/test/v0.8/automation/AutomationRegistrar2_3.test.ts: `.getAddress()`
$DIR/contracts/test/v0.8/automation/AutomationRegistrar2_3.test.ts: `.connect(requestSender)`
$DIR/contracts/test/v0.8/automation/AutomationRegistrar2_3.test.ts: `.transferAndCall(registrar.address, amount, abiEncodedBytes)`
$DIR/contracts/test/v0.8/automation/AutomationRegistrar2_3.test.ts: `.getAddress()`
$DIR/contracts/test/v0.8/automation/AutomationRegistrar2_3.test.ts: `.connect(requestSender)`
$DIR/contracts/test/v0.8/automation/AutomationRegistrar2_3.test.ts: `.transferAndCall(registrar.address, amount, abiEncodedBytes)`
$DIR/contracts/test/v0.8/automation/AutomationRegistrar2_3.test.ts: `.getState()`
$DIR/contracts/test/v0.8/automation/AutomationRegistrar2_3.test.ts: `.getAddress()`
$DIR/contracts/test/v0.8/automation/AutomationRegistrar2_3.test.ts: `.connect(registrarOwner)`
$DIR/contracts/test/v0.8/automation/AutomationRegistrar2_3.test.ts: `.setTriggerConfig(
          Trigger.CONDITION,
          autoApproveType_ENABLED_SENDER_ALLOWLIST,
          maxAllowedAutoApprove,
        )`
$DIR/contracts/test/v0.8/automation/AutomationRegistrar2_3.test.ts: `.connect(registrarOwner)`
$DIR/contracts/test/v0.8/automation/AutomationRegistrar2_3.test.ts: `.setAutoApproveAllowedSender(senderAddress, true)`
$DIR/contracts/test/v0.8/automation/AutomationRegistrar2_3.test.ts: `.getAddress()`
$DIR/contracts/test/v0.8/automation/AutomationRegistrar2_3.test.ts: `.connect(requestSender)`
$DIR/contracts/test/v0.8/automation/AutomationRegistrar2_3.test.ts: `.transferAndCall(registrar.address, amount, abiEncodedBytes)`
$DIR/contracts/test/v0.8/automation/AutomationRegistrar2_3.test.ts: `.getActiveUpkeepIDs(0, 1)`
$DIR/contracts/test/v0.8/automation/AutomationRegistrar2_3.test.ts: `.getUpkeep(id)`
$DIR/contracts/test/v0.8/automation/AutomationRegistrar2_3.test.ts: `.getState()`
$DIR/contracts/test/v0.8/automation/AutomationRegistrar2_3.test.ts: `.getAddress()`
$DIR/contracts/test/v0.8/automation/AutomationRegistrar2_3.test.ts: `.connect(registrarOwner)`
$DIR/contracts/test/v0.8/automation/AutomationRegistrar2_3.test.ts: `.setTriggerConfig(
          Trigger.CONDITION,
          autoApproveType_ENABLED_SENDER_ALLOWLIST,
          maxAllowedAutoApprove,
        )`
$DIR/contracts/test/v0.8/automation/AutomationRegistrar2_3.test.ts: `.connect(registrarOwner)`
$DIR/contracts/test/v0.8/automation/AutomationRegistrar2_3.test.ts: `.setAutoApproveAllowedSender(senderAddress, false)`
$DIR/contracts/test/v0.8/automation/AutomationRegistrar2_3.test.ts: `.getAddress()`
$DIR/contracts/test/v0.8/automation/AutomationRegistrar2_3.test.ts: `.connect(requestSender)`
$DIR/contracts/test/v0.8/automation/AutomationRegistrar2_3.test.ts: `.transferAndCall(registrar.address, amount, abiEncodedBytes)`
$DIR/contracts/test/v0.8/automation/AutomationRegistrar2_3.test.ts: `.wait()`
$DIR/contracts/test/v0.8/automation/AutomationRegistrar2_3.test.ts: `.getState()`
$DIR/contracts/test/v0.8/automation/AutomationRegistrar2_3.test.ts: `.getPendingRequest(hash)`
$DIR/contracts/test/v0.8/automation/AutomationRegistrar2_3.test.ts: `.eq(pendingRequest[1])`
$DIR/contracts/test/v0.8/automation/AutomationRegistrar2_3.test.ts: `.connect(someAddress)`
$DIR/contracts/test/v0.8/automation/AutomationRegistrar2_3.test.ts: `.registerUpkeep({
          name: upkeepName,
          upkeepContract: mock.address,
          gasLimit: performGas,
          adminAddress: await admin.getAddress(),
          triggerType: Trigger.CONDITION,
          checkData: emptyBytes,
          triggerConfig: trigger,
          offchainConfig: emptyBytes,
          amount,
          encryptedEmail: emptyBytes,
          billingToken: linkToken.address,
        })`
$DIR/contracts/test/v0.8/automation/AutomationRegistrar2_3.test.ts: `.getAddress()`
$DIR/contracts/test/v0.8/automation/AutomationRegistrar2_3.test.ts: `.sub(1)`
$DIR/contracts/test/v0.8/automation/AutomationRegistrar2_3.test.ts: `.connect(requestSender)`
$DIR/contracts/test/v0.8/automation/AutomationRegistrar2_3.test.ts: `.approve(registrar.address, amt)`
$DIR/contracts/test/v0.8/automation/AutomationRegistrar2_3.test.ts: `.connect(registrarOwner)`
$DIR/contracts/test/v0.8/automation/AutomationRegistrar2_3.test.ts: `.setTriggerConfig(
          Trigger.CONDITION,
          autoApproveType_ENABLED_ALL,
          maxAllowedAutoApprove,
        )`
$DIR/contracts/test/v0.8/automation/AutomationRegistrar2_3.test.ts: `.connect(requestSender)`
$DIR/contracts/test/v0.8/automation/AutomationRegistrar2_3.test.ts: `.registerUpkeep({
          name: upkeepName,
          upkeepContract: mock.address,
          gasLimit: performGas,
          adminAddress: await admin.getAddress(),
          triggerType: Trigger.CONDITION,
          checkData: emptyBytes,
          triggerConfig: trigger,
          offchainConfig: emptyBytes,
          amount: amt,
          encryptedEmail: emptyBytes,
          billingToken: linkToken.address,
        })`
$DIR/contracts/test/v0.8/automation/AutomationRegistrar2_3.test.ts: `.getAddress()`
$DIR/contracts/test/v0.8/automation/AutomationRegistrar2_3.test.ts: `.connect(requestSender)`
$DIR/contracts/test/v0.8/automation/AutomationRegistrar2_3.test.ts: `.approve(registrar.address, minimumRegistrationAmount)`
$DIR/contracts/test/v0.8/automation/AutomationRegistrar2_3.test.ts: `.connect(registrarOwner)`
$DIR/contracts/test/v0.8/automation/AutomationRegistrar2_3.test.ts: `.setTriggerConfig(
          Trigger.CONDITION,
          autoApproveType_ENABLED_ALL,
          maxAllowedAutoApprove,
        )`
$DIR/contracts/test/v0.8/automation/AutomationRegistrar2_3.test.ts: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/AutomationRegistrar2_3.test.ts: `.setConfigTypeSafe(keepers, keepers, 1, onchainConfig, 1, '0x', [], [])`
$DIR/contracts/test/v0.8/automation/AutomationRegistrar2_3.test.ts: `.connect(requestSender)`
$DIR/contracts/test/v0.8/automation/AutomationRegistrar2_3.test.ts: `.registerUpkeep({
          name: upkeepName,
          upkeepContract: mock.address,
          gasLimit: performGas,
          adminAddress: await admin.getAddress(),
          triggerType: Trigger.CONDITION,
          checkData: emptyBytes,
          triggerConfig: trigger,
          offchainConfig: emptyBytes,
          amount: minimumRegistrationAmount,
          encryptedEmail: emptyBytes,
          billingToken: linkToken.address,
        })`
$DIR/contracts/test/v0.8/automation/AutomationRegistrar2_3.test.ts: `.getAddress()`
$DIR/contracts/test/v0.8/automation/AutomationRegistrar2_3.test.ts: `.connect(registrarOwner)`
$DIR/contracts/test/v0.8/automation/AutomationRegistrar2_3.test.ts: `.setTriggerConfig(
          Trigger.CONDITION,
          autoApproveType_ENABLED_ALL,
          maxAllowedAutoApprove,
        )`
$DIR/contracts/test/v0.8/automation/AutomationRegistrar2_3.test.ts: `.connect(requestSender)`
$DIR/contracts/test/v0.8/automation/AutomationRegistrar2_3.test.ts: `.approve(registrar.address, amount)`
$DIR/contracts/test/v0.8/automation/AutomationRegistrar2_3.test.ts: `.connect(requestSender)`
$DIR/contracts/test/v0.8/automation/AutomationRegistrar2_3.test.ts: `.registerUpkeep({
        name: upkeepName,
        upkeepContract: mock.address,
        gasLimit: performGas,
        adminAddress: await admin.getAddress(),
        triggerType: Trigger.CONDITION,
        checkData: emptyBytes,
        triggerConfig: trigger,
        offchainConfig,
        amount,
        encryptedEmail: emptyBytes,
        billingToken: linkToken.address,
      })`
$DIR/contracts/test/v0.8/automation/AutomationRegistrar2_3.test.ts: `.getAddress()`
$DIR/contracts/test/v0.8/automation/AutomationRegistrar2_3.test.ts: `.getActiveUpkeepIDs(0, 1)`
$DIR/contracts/test/v0.8/automation/AutomationRegistrar2_3.test.ts: `.getUpkeep(id)`
$DIR/contracts/test/v0.8/automation/AutomationRegistrar2_3.test.ts: `.connect(stranger)`
$DIR/contracts/test/v0.8/automation/AutomationRegistrar2_3.test.ts: `.setAutoApproveAllowedSender(await admin.getAddress(), false)`
$DIR/contracts/test/v0.8/automation/AutomationRegistrar2_3.test.ts: `.getAddress()`
$DIR/contracts/test/v0.8/automation/AutomationRegistrar2_3.test.ts: `.getAddress()`
$DIR/contracts/test/v0.8/automation/AutomationRegistrar2_3.test.ts: `.connect(registrarOwner)`
$DIR/contracts/test/v0.8/automation/AutomationRegistrar2_3.test.ts: `.setAutoApproveAllowedSender(senderAddress, true)`
$DIR/contracts/test/v0.8/automation/AutomationRegistrar2_3.test.ts: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/AutomationRegistrar2_3.test.ts: `.getAutoApproveAllowedSender(senderAddress)`
$DIR/contracts/test/v0.8/automation/AutomationRegistrar2_3.test.ts: `.connect(registrarOwner)`
$DIR/contracts/test/v0.8/automation/AutomationRegistrar2_3.test.ts: `.setAutoApproveAllowedSender(senderAddress, false)`
$DIR/contracts/test/v0.8/automation/AutomationRegistrar2_3.test.ts: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/AutomationRegistrar2_3.test.ts: `.getAutoApproveAllowedSender(senderAddress)`
$DIR/contracts/test/v0.8/automation/AutomationRegistrar2_3.test.ts: `.connect(stranger)`
$DIR/contracts/test/v0.8/automation/AutomationRegistrar2_3.test.ts: `.setTriggerConfig(Trigger.LOG, autoApproveType_ENABLED_ALL, 100)`
$DIR/contracts/test/v0.8/automation/AutomationRegistrar2_3.test.ts: `.connect(registrarOwner)`
$DIR/contracts/test/v0.8/automation/AutomationRegistrar2_3.test.ts: `.setTriggerConfig(Trigger.LOG, autoApproveType_ENABLED_ALL, 100)`
$DIR/contracts/test/v0.8/automation/AutomationRegistrar2_3.test.ts: `.getTriggerRegistrationDetails(Trigger.LOG)`
$DIR/contracts/test/v0.8/automation/AutomationRegistrar2_3.test.ts: `.connect(stranger)`
$DIR/contracts/test/v0.8/automation/AutomationRegistrar2_3.test.ts: `.approve({
        name: upkeepName,
        encryptedEmail: emptyBytes,
        upkeepContract: mock.address,
        gasLimit: performGas,
        adminAddress: await admin.getAddress(),
        checkData: emptyBytes,
        triggerType: Trigger.CONDITION,
        triggerConfig: trigger,
        offchainConfig: emptyBytes,
        amount,
        billingToken: linkToken.address,
      })`
$DIR/contracts/test/v0.8/automation/AutomationRegistrar2_3.test.ts: `.getAddress()`
$DIR/contracts/test/v0.8/automation/AutomationRegistrar2_3.test.ts: `.connect(registrarOwner)`
$DIR/contracts/test/v0.8/automation/AutomationRegistrar2_3.test.ts: `.approve({
        name: upkeepName,
        encryptedEmail: emptyBytes,
        upkeepContract: mock.address,
        gasLimit: performGas,
        adminAddress: await admin.getAddress(),
        checkData: emptyBytes,
        triggerType: Trigger.CONDITION,
        triggerConfig: trigger,
        offchainConfig: emptyBytes,
        amount,
        billingToken: linkToken.address,
      })`
$DIR/contracts/test/v0.8/automation/AutomationRegistrar2_3.test.ts: `.getAddress()`
$DIR/contracts/test/v0.8/automation/AutomationRegistrar2_3.test.ts: `.Wallet.createRandom()`
$DIR/contracts/test/v0.8/automation/AutomationRegistrar2_3.test.ts: `.add(1)`
$DIR/contracts/test/v0.8/automation/AutomationRegistrar2_3.test.ts: `.add(1)`
$DIR/contracts/test/v0.8/automation/AutomationRegistrar2_3.test.ts: `.assign({}, params, field)`
$DIR/contracts/test/v0.8/automation/AutomationRegistrar2_3.test.ts: `.connect(registrarOwner)`
$DIR/contracts/test/v0.8/automation/AutomationRegistrar2_3.test.ts: `.approve(badParams)`
$DIR/contracts/test/v0.8/automation/AutomationRegistrar2_3.test.ts: `.connect(registrarOwner)`
$DIR/contracts/test/v0.8/automation/AutomationRegistrar2_3.test.ts: `.approve({
        name: upkeepName,
        encryptedEmail: emptyBytes,
        upkeepContract: mock.address,
        gasLimit: performGas,
        adminAddress: await admin.getAddress(),
        checkData: emptyBytes,
        triggerType: Trigger.CONDITION,
        triggerConfig: trigger,
        offchainConfig,
        amount,
        billingToken: linkToken.address,
      })`
$DIR/contracts/test/v0.8/automation/AutomationRegistrar2_3.test.ts: `.getAddress()`
$DIR/contracts/test/v0.8/automation/AutomationRegistrar2_3.test.ts: `.connect(registrarOwner)`
$DIR/contracts/test/v0.8/automation/AutomationRegistrar2_3.test.ts: `.approve({
        name: upkeepName,
        encryptedEmail: emptyBytes,
        upkeepContract: mock.address,
        gasLimit: performGas,
        adminAddress: await admin.getAddress(),
        checkData: emptyBytes,
        triggerType: Trigger.CONDITION,
        triggerConfig: trigger,
        offchainConfig,
        amount,
        billingToken: linkToken.address,
      })`
$DIR/contracts/test/v0.8/automation/AutomationRegistrar2_3.test.ts: `.getAddress()`
$DIR/contracts/test/v0.8/automation/AutomationRegistrar2_3.test.ts: `.connect(registrarOwner)`
$DIR/contracts/test/v0.8/automation/AutomationRegistrar2_3.test.ts: `.approve({
        name: upkeepName,
        encryptedEmail: emptyBytes,
        upkeepContract: mock.address,
        gasLimit: performGas,
        adminAddress: await admin.getAddress(),
        checkData: emptyBytes,
        triggerType: Trigger.CONDITION,
        triggerConfig: trigger,
        offchainConfig,
        amount,
        billingToken: linkToken.address,
      })`
$DIR/contracts/test/v0.8/automation/AutomationRegistrar2_3.test.ts: `.getAddress()`
$DIR/contracts/test/v0.8/automation/AutomationRegistrar2_3.test.ts: `.connect(stranger)`
$DIR/contracts/test/v0.8/automation/AutomationRegistrar2_3.test.ts: `.cancel(hash)`
$DIR/contracts/test/v0.8/automation/AutomationRegistrar2_3.test.ts: `.connect(registrarOwner)`
$DIR/contracts/test/v0.8/automation/AutomationRegistrar2_3.test.ts: `.cancel(
          '0x000000000000000000000000322813fd9a801c5507c9de605d63cea4f2ce6c44',
        )`
$DIR/contracts/test/v0.8/automation/AutomationRegistrar2_3.test.ts: `.balanceOf(await admin.getAddress())`
$DIR/contracts/test/v0.8/automation/AutomationRegistrar2_3.test.ts: `.getAddress()`
$DIR/contracts/test/v0.8/automation/AutomationRegistrar2_3.test.ts: `.connect(registrarOwner)`
$DIR/contracts/test/v0.8/automation/AutomationRegistrar2_3.test.ts: `.cancel(hash)`
$DIR/contracts/test/v0.8/automation/AutomationRegistrar2_3.test.ts: `.balanceOf(await admin.getAddress())`
$DIR/contracts/test/v0.8/automation/AutomationRegistrar2_3.test.ts: `.getAddress()`
$DIR/contracts/test/v0.8/automation/AutomationRegistrar2_3.test.ts: `.balanceOf(await admin.getAddress())`
$DIR/contracts/test/v0.8/automation/AutomationRegistrar2_3.test.ts: `.getAddress()`
$DIR/contracts/test/v0.8/automation/AutomationRegistrar2_3.test.ts: `.connect(admin)`
$DIR/contracts/test/v0.8/automation/AutomationRegistrar2_3.test.ts: `.cancel(hash)`
$DIR/contracts/test/v0.8/automation/AutomationRegistrar2_3.test.ts: `.balanceOf(await admin.getAddress())`
$DIR/contracts/test/v0.8/automation/AutomationRegistrar2_3.test.ts: `.getAddress()`
$DIR/contracts/test/v0.8/automation/AutomationRegistrar2_3.test.ts: `.connect(registrarOwner)`
$DIR/contracts/test/v0.8/automation/AutomationRegistrar2_3.test.ts: `.cancel(hash)`
$DIR/contracts/test/v0.8/automation/AutomationRegistrar2_3.test.ts: `.connect(registrarOwner)`
$DIR/contracts/test/v0.8/automation/AutomationRegistrar2_3.test.ts: `.cancel(hash)`
$DIR/contracts/test/v0.8/automation/AutomationRegistrar2_3.test.ts: `.connect(registrarOwner)`
$DIR/contracts/test/v0.8/automation/AutomationRegistrar2_3.test.ts: `.approve({
        name: upkeepName,
        encryptedEmail: emptyBytes,
        upkeepContract: mock.address,
        gasLimit: performGas,
        adminAddress: await admin.getAddress(),
        checkData: emptyBytes,
        triggerType: Trigger.CONDITION,
        triggerConfig: trigger,
        offchainConfig: emptyBytes,
        amount,
        billingToken: linkToken.address,
      })`
$DIR/contracts/test/v0.8/automation/AutomationRegistrar2_3.test.ts: `.getAddress()`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `await registry.connect(owner).pause()`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `upkeepIds.push(upkeepId)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `gasLimits.push(performGas)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `triggers.push('0x')`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `performDatas.push('0x')`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `performDatas.push('0x')`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `await registry.connect(admin).addFunds(upkeepId, BigNumber.from(10))`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `await tx.wait()`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `await ethers.provider.send('evm_mine', [])`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `newConfig.reorgProtectionEnabled = false`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `await registry // used to test initial configurations
          .connect(owner)
          .setConfigTypeSafe(
            signerAddresses,
            keeperAddresses,
            f,
            newConfig,
            offchainVersion,
            offchainBytes,
            baseConfig[6],
            baseConfig[7],
          )`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `newConfig.reorgProtectionEnabled = false`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `await registry // used to test initial configurations
          .connect(owner)
          .setConfigTypeSafe(
            signerAddresses,
            keeperAddresses,
            f,
            newConfig,
            offchainVersion,
            offchainBytes,
            baseConfig[6],
            baseConfig[7],
          )`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `await ethers.provider.send('evm_mine', [])`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `await ethers.provider.send('evm_mine', [])`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `tx = await getTransmitTx(registry, keeper1, [id], {
            checkBlockNum: latestBlock.number + 100,
            checkBlockHash: latestBlock.hash,
          })`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `receipt = await tx.wait()`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `reorgedUpkeepReportLogs = parseReorgedUpkeepReportLogs(receipt)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `newConfig.reorgProtectionEnabled = false`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `await registry // used to test initial configurations
          .connect(owner)
          .setConfigTypeSafe(
            signerAddresses,
            keeperAddresses,
            f,
            newConfig,
            offchainVersion,
            offchainBytes,
            baseConfig[6],
            baseConfig[7],
          )`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `tx = await getTransmitTx(registry, keeper1, [id], {
            checkBlockNum: latestBlock.number + 100,
            checkBlockHash: latestBlock.hash,
          })`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `receipt = await tx.wait()`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `reorgedUpkeepReportLogs = parseReorgedUpkeepReportLogs(receipt)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `await registry.connect(admin).cancelUpkeep(upkeepId)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `await ethers.provider.send('evm_mine', [])`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `await mock.setCanPerform(false)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `await mock.setCanPerform(false)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `await mock.setCanPerform(true)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `parsedLogs.push(iface.parseLog(log))`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `await mock.setCanPerform(true)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `await mock.setCanPerform(true)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `await mock.setCanPerform(true)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `await arbRegistry.connect(owner).addFunds(testUpkeepId, toWei('100'))`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `tx = await getTransmitTx(
          arbRegistry,
          keeper1,
          [testUpkeepId],

          { gasPrice: gasWei.mul('5') }, // High gas price so that it gets capped
        )`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `await registry.connect(owner).addFunds(afUpkeepId, toWei('100'))`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `await autoFunderUpkeep.setIsEligible(true)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `await autoFunderUpkeep.setShouldCancel(true)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `await getTransmitTx(registry, keeper1, [afUpkeepId])`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `registration = await registry.getUpkeep(afUpkeepId)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `upkeepIds.push(testUpkeepId)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `await registry.connect(owner).addFunds(testUpkeepId, toWei('10'))`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `await mock.setCanPerform(true)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `await mock.setPerformGasToBurn(performGas)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `totalPerformGas = totalPerformGas.add(performGas)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `await evmRevert(
          getTransmitTx(registry, keeper1, upkeepIds, {
            gasLimit: totalPerformGas,
          }),
        )`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `upkeepIds.push(testUpkeepId)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `await arbRegistry.connect(owner).addFunds(testUpkeepId, toWei('100'))`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `pd += '11'`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `performDatas.push(pd)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `upkeepCalldataWeights.push(w)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `totalCalldataWeight = totalCalldataWeight.add(w)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `await mock.setCanCheck(true)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `await registry.connect(admin).addFunds(upkeepId, tooLow)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `await registry.connect(admin).addFunds(upkeepId, oneWei)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `checkUpkeepResult = await registry
        .connect(zeroAddress)
        .callStatic['checkUpkeep(uint256)'](upkeepId)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `await mock.setCanCheck(true)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `await mock.setCanPerform(true)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `await registry.connect(owner).addFunds(upkeepID, minBalance1)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `maxPerformData += '11'`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `await registry.connect(admin).pauseUpkeep(upkeepId)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `await registry.connect(owner).cancelUpkeep(upkeepId)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `await registry
          .connect(admin)
          .withdrawFunds(upkeepId, await payee1.getAddress())`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `registration = await registry.getUpkeep(upkeepId)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `await registry.connect(owner).pause()`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `await mock.setCanPerform(false)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `await mock.setCanPerform(true)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `await mock.setCanPerform(true)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `await mock.setPerformGasToBurn(performGas)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `await registry.connect(admin).cancelUpkeep(upkeepId)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `await registry.connect(owner).cancelUpkeep(upkeepId)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `await registry.connect(owner).pause()`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `await registry.connect(admin).pauseUpkeep(upkeepId)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `await mock.setShouldRevertCheck(true)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `await mock.setCheckRevertReason(
          'custom revert error, clever way to insert offchain data',
        )`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `await mock.setShouldRevertCheck(true)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `longRevertReason += 'x'`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `await mock.setCheckRevertReason(longRevertReason)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `await mock.setCanCheck(false)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `longBytes += '1'`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `await mock.setCanCheck(true)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `await mock.setPerformData(longBytes)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `await mock.setCanCheck(true)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `await mock.setPerformData(randomBytes)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `await ltUpkeep.mock.checkLog.withArgs(log, '0x').returns(true, '0x1234')`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `await gasPriceFeed
        .connect(owner)
        .updateRoundData(roundId, answer, updatedAt, startedAt)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `roundId = 100`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `updatedAt = now()`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `startedAt = 946684799`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `await gasPriceFeed
        .connect(owner)
        .updateRoundData(roundId, -100, updatedAt, startedAt)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `roundId = 101`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `updatedAt = now()`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `startedAt = 946684799`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `await gasPriceFeed
        .connect(owner)
        .updateRoundData(roundId, 0, updatedAt, startedAt)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `await linkUSDFeed
        .connect(owner)
        .updateRoundData(roundId, answer, updatedAt, startedAt)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `roundId = 100`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `updatedAt = now()`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `startedAt = 946684799`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `await linkUSDFeed
        .connect(owner)
        .updateRoundData(roundId, -100, updatedAt, startedAt)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `roundId = 101`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `updatedAt = now()`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `startedAt = 946684799`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `await linkUSDFeed
        .connect(owner)
        .updateRoundData(roundId, 0, updatedAt, startedAt)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `await evmRevertCustomError(
        registry
          .connect(owner)
          .setConfigTypeSafe(
            [randomAddress(), randomAddress(), randomAddress(), zeroAddress],
            [
              randomAddress(),
              randomAddress(),
              randomAddress(),
              randomAddress(),
            ],
            f,
            newConfig,
            offchainVersion,
            offchainBytes,
            baseConfig[6],
            baseConfig[7],
          ),
        registry,
        'InvalidSigner',
      )`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `await registry
        .connect(owner)
        .setConfigTypeSafe(
          signerAddresses,
          keeperAddresses,
          f,
          newConfig,
          offchainVersion,
          offchainBytes,
          [],
          [],
        )`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `await registry.pause()`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `await registry
        .connect(owner)
        .setConfigTypeSafe(
          signerAddresses,
          keeperAddresses,
          f,
          newConfig,
          offchainVersion,
          offchainBytes,
          [],
          [],
        )`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `newKeepers.push(randomAddress())`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `newKeepers.pop()`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `await registry.connect(owner).cancelUpkeep(upkeepId)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `await linkToken.connect(owner).approve(registry.address, toWei('100'))`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `await registry.connect(owner).addFunds(upkeepId, toWei('100'))`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `await registry.connect(admin).cancelUpkeep(upkeepId)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `await getTransmitTx(registry, keeper1, [upkeepId])`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `await ethers.provider.send('evm_mine', [])`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `await registry.connect(owner).setConfigTypeSafe(
            signerAddresses,
            keeperAddresses,
            f,
            {
              checkGasLimit,
              stalenessSeconds,
              gasCeilingMultiplier,
              maxCheckDataSize,
              maxPerformDataSize,
              maxRevertDataSize,
              maxPerformGas,
              fallbackGasPrice,
              fallbackLinkPrice,
              fallbackNativePrice,
              transcoder: transcoder.address,
              registrars: [],
              upkeepPrivilegeManager: upkeepManager,
              chainModule: chainModuleBase.address,
              reorgProtectionEnabled: true,
              financeAdmin: financeAdminAddress,
            },
            offchainVersion,
            offchainBytes,
            [linkToken.address],
            [
              {
                gasFeePPB: paymentPremiumPPB,
                flatFeeMilliCents,
                priceFeed: linkUSDFeed.address,
                fallbackPrice: fallbackLinkPrice,
                minSpend: newMinUpkeepSpend,
                decimals: 18,
              },
            ],
          )`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `await registry.connect(admin).cancelUpkeep(upkeepId)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `await registry.connect(owner).setConfigTypeSafe(
            signerAddresses,
            keeperAddresses,
            f,
            {
              checkGasLimit,
              stalenessSeconds,
              gasCeilingMultiplier,
              maxCheckDataSize,
              maxPerformDataSize,
              maxRevertDataSize,
              maxPerformGas,
              fallbackGasPrice,
              fallbackLinkPrice,
              fallbackNativePrice,
              transcoder: transcoder.address,
              registrars: [],
              upkeepPrivilegeManager: upkeepManager,
              chainModule: chainModuleBase.address,
              reorgProtectionEnabled: true,
              financeAdmin: financeAdminAddress,
            },
            offchainVersion,
            offchainBytes,
            [linkToken.address],
            [
              {
                gasFeePPB: paymentPremiumPPB,
                flatFeeMilliCents,
                priceFeed: linkUSDFeed.address,
                fallbackPrice: fallbackLinkPrice,
                minSpend: newMinUpkeepSpend,
                decimals: 18,
              },
            ],
          )`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `await registry.connect(admin).cancelUpkeep(upkeepId)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `await registry.connect(owner).setConfigTypeSafe(
            signerAddresses,
            keeperAddresses,
            f,
            {
              checkGasLimit,
              stalenessSeconds,
              gasCeilingMultiplier,
              maxCheckDataSize,
              maxPerformDataSize,
              maxRevertDataSize,
              maxPerformGas,
              fallbackGasPrice,
              fallbackLinkPrice,
              fallbackNativePrice,
              transcoder: transcoder.address,
              registrars: [],
              upkeepPrivilegeManager: upkeepManager,
              chainModule: chainModuleBase.address,
              reorgProtectionEnabled: true,
              financeAdmin: financeAdminAddress,
            },
            offchainVersion,
            offchainBytes,
            [linkToken.address],
            [
              {
                gasFeePPB: paymentPremiumPPB,
                flatFeeMilliCents,
                priceFeed: linkUSDFeed.address,
                fallbackPrice: fallbackLinkPrice,
                minSpend: newMinUpkeepSpend,
                decimals: 18,
              },
            ],
          )`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `await registry.connect(admin).cancelUpkeep(upkeepId)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `await registry
        .connect(payee1)
        .withdrawPayment(await keeper1.getAddress(), to)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `await streamsLookupUpkeep.setShouldRevertCallback(true)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `longBytes += '11'`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `await streamsLookupUpkeep.setCallbackReturnBool(false)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `await getTransmitTx(registry, keeper1, [upkeepId])`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `await getTransmitTx(registry, keeper2, [upkeepId])`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `await getTransmitTx(registry, keeper1, [upkeepId])`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `await registry
        .connect(payee1)
        .withdrawPayment(
          await keeper1.getAddress(),
          await nonkeeper.getAddress(),
        )`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `await verifyConsistentAccounting(maxAllowedSpareChange)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `await getTransmitTx(registry, keeper1, [upkeepId])`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `maxAllowedSpareChange = maxAllowedSpareChange.add(BigNumber.from('31'))`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `await verifyConsistentAccounting(maxAllowedSpareChange)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `await registry
        .connect(payee1)
        .withdrawPayment(
          await keeper1.getAddress(),
          await nonkeeper.getAddress(),
        )`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `await verifyConsistentAccounting(maxAllowedSpareChange)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `await registry
        .connect(payee2)
        .withdrawPayment(
          await keeper2.getAddress(),
          await nonkeeper.getAddress(),
        )`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `await verifyConsistentAccounting(maxAllowedSpareChange)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `await getTransmitTx(registry, keeper1, [upkeepId])`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `maxAllowedSpareChange = maxAllowedSpareChange.add(BigNumber.from('31'))`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `await verifyConsistentAccounting(maxAllowedSpareChange)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `await registry.connect(owner).setConfigTypeSafe(
        signerAddresses.slice(2, 15), // only use 2-14th index keepers
        keeperAddresses.slice(2, 15),
        f,
        config,
        offchainVersion,
        offchainBytes,
        baseConfig[6],
        baseConfig[7],
      )`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `await verifyConsistentAccounting(maxAllowedSpareChange)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `await getTransmitTx(registry, keeper3, [upkeepId], {
        startingSignerIndex: 2,
      })`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `maxAllowedSpareChange = maxAllowedSpareChange.add(BigNumber.from('13'))`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `await verifyConsistentAccounting(maxAllowedSpareChange)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `await registry
        .connect(payee1)
        .withdrawPayment(
          await keeper1.getAddress(),
          await nonkeeper.getAddress(),
        )`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `await verifyConsistentAccounting(maxAllowedSpareChange)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `await registry
        .connect(payee3)
        .withdrawPayment(
          await keeper3.getAddress(),
          await nonkeeper.getAddress(),
        )`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `await verifyConsistentAccounting(maxAllowedSpareChange)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `await registry.connect(owner).setConfigTypeSafe(
        signerAddresses.slice(0, 4), // only use 0-3rd index keepers
        keeperAddresses.slice(0, 4),
        f,
        config,
        offchainVersion,
        offchainBytes,
        baseConfig[6],
        baseConfig[7],
      )`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `await verifyConsistentAccounting(maxAllowedSpareChange)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `await getTransmitTx(registry, keeper1, [upkeepId])`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `maxAllowedSpareChange = maxAllowedSpareChange.add(BigNumber.from('4'))`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `await getTransmitTx(registry, keeper3, [upkeepId])`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `maxAllowedSpareChange = maxAllowedSpareChange.add(BigNumber.from('4'))`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `await verifyConsistentAccounting(maxAllowedSpareChange)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `await registry
        .connect(payee5)
        .withdrawPayment(
          await keeper5.getAddress(),
          await nonkeeper.getAddress(),
        )`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `await verifyConsistentAccounting(maxAllowedSpareChange)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `await registry
        .connect(payee1)
        .withdrawPayment(
          await keeper1.getAddress(),
          await nonkeeper.getAddress(),
        )`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.pause()`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.push(upkeepId)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.push(performGas)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.push('0x')`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.push('0x')`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.push('0x')`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.add(BigNumber.from('1'))`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.from('1')`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.wait()`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.connect(admin)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.addFunds(upkeepId, BigNumber.from(10))`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.from(10)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.wait()`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.getUpkeep(upkeepId)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.wait()`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.utils.randomBytes(32)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.utils.randomBytes(32)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.utils.solidityKeccak256(
          ['uint256', 'bytes32', 'bytes32', 'uint32'],
          [logUpkeepId, logBlockHash, txHash, logIndex],
        )`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.wait()`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.wait()`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.getUpkeep(upkeepId)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.provider.getBlock(lastPerformed)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.wait()`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.provider.getBlock('latest')`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.wait()`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.provider.send('evm_mine', [])`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.provider.getBlock('latest')`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.provider.getBlock(latestBlock.number - 256)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.wait()`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.provider.getBlock('latest')`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.wait()`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `// used to test initial configurations
          .connect(owner)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.setConfigTypeSafe(
            signerAddresses,
            keeperAddresses,
            f,
            newConfig,
            offchainVersion,
            offchainBytes,
            baseConfig[6],
            baseConfig[7],
          )`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.provider.getBlock('latest')`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.wait()`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `// used to test initial configurations
          .connect(owner)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.setConfigTypeSafe(
            signerAddresses,
            keeperAddresses,
            f,
            newConfig,
            offchainVersion,
            offchainBytes,
            baseConfig[6],
            baseConfig[7],
          )`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.provider.send('evm_mine', [])`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.provider.getBlock('latest')`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.provider.getBlock(latestBlock.number - 256)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.wait()`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.provider.send('evm_mine', [])`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.wait()`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.provider.getBlock('latest')`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.wait()`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.wait()`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `// used to test initial configurations
          .connect(owner)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.setConfigTypeSafe(
            signerAddresses,
            keeperAddresses,
            f,
            newConfig,
            offchainVersion,
            offchainBytes,
            baseConfig[6],
            baseConfig[7],
          )`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.provider.getBlock('latest')`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.wait()`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.wait()`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.connect(admin)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.cancelUpkeep(upkeepId)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.provider.send('evm_mine', [])`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.wait()`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.setCanPerform(false)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.wait()`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.setCanPerform(false)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.wait()`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.setCanPerform(true)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.wait()`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.push(iface.parseLog(log))`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.parseLog(log)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.setCanPerform(true)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.getState()`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.wait()`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.getState()`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.sub(registryPremiumBefore)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.from('1')`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.mul(BigNumber.from('10'))`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.from('10')`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.setCanPerform(true)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.wait()`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.setCanPerform(true)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.from(1000000)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.registerUpkeep(
            mock.address,
            performGas,
            await admin.getAddress(),
            Trigger.CONDITION,
            linkToken.address,
            '0x',
            '0x',
            '0x',
          )`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.getAddress()`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.addFunds(testUpkeepId, toWei('100'))`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.mul('5')`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.wait()`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.addFunds(afUpkeepId, toWei('100'))`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.setIsEligible(true)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.setShouldCancel(true)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.getUpkeep(afUpkeepId)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.getUpkeep(afUpkeepId)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.lt(oldExpiration)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.slice(0, f + 1)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.connect(keeper1)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.transmit(
              [reportContext[0], reportContext[1], reportContext[2]],
              report,
              sigs.rs,
              sigs.ss,
              sigs.vs,
            )`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.getState()`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.slice(0, f + 2)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.connect(keeper1)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.transmit(
              [reportContext[0], reportContext[1], reportContext[2]],
              report,
              sigs.rs,
              sigs.ss,
              sigs.vs,
            )`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.getState()`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.Wallet.createRandom()`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.Wallet.createRandom()`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.connect(keeper1)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.transmit(
              [reportContext[0], reportContext[1], reportContext[2]],
              report,
              sigs.rs,
              sigs.ss,
              sigs.vs,
            )`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.getState()`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.connect(keeper1)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.transmit(
              [reportContext[0], reportContext[1], reportContext[2]],
              report,
              sigs.rs,
              sigs.ss,
              sigs.vs,
            )`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.from('0')`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.deploy()`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.registerUpkeep(
              mock.address,
              performGas,
              await admin.getAddress(),
              Trigger.CONDITION,
              linkToken.address,
              '0x',
              '0x',
              '0x',
            )`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.getAddress()`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.push(testUpkeepId)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.addFunds(testUpkeepId, toWei('10'))`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.setCanPerform(true)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.setPerformGasToBurn(performGas)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.add(performGas)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.add(transmitGasOverhead)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.from('0')`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.from(1000000)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.deploy()`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.registerUpkeep(
              mock.address,
              performGas,
              await admin.getAddress(),
              Trigger.CONDITION,
              linkToken.address,
              '0x',
              '0x',
              '0x',
            )`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.getAddress()`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.push(testUpkeepId)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.addFunds(testUpkeepId, toWei('100'))`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.push(pd)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.from(performDataSizes[i])`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.add(registryTransmitCalldataFixedBytesOverhead)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.add(
              registryTransmitCalldataPerSignerBytesOverhead.mul(
                BigNumber.from(f + 1),
              ),
            )`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.mul(
                BigNumber.from(f + 1),
              )`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.from(f + 1)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.push(w)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.add(w)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.mul('5')`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.wait()`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.setCanCheck(true)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.from(1)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.getMinBalanceForUpkeep(upkeepId)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.sub(oneWei)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.connect(admin)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.addFunds(upkeepId, tooLow)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.connect(zeroAddress)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.connect(admin)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.addFunds(upkeepId, oneWei)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.connect(zeroAddress)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.registerUpkeep(
          mock.address,
          performGas,
          await admin.getAddress(),
          Trigger.CONDITION,
          linkToken.address,
          '0x',
          '0x',
          '0x',
        )`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.getAddress()`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.setCanCheck(true)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.setCanPerform(true)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.getMinBalanceForUpkeep(upkeepID)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.sub(
        1,
      )`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.addFunds(upkeepID, minBalance1)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.connect(zeroAddress)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.mul(gasCeilingMultiplier)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.wait()`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.getBalance(upkeepId)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.getAddress()`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.connect(admin)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.pauseUpkeep(upkeepId)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.cancelUpkeep(upkeepId)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.connect(admin)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.withdrawFunds(upkeepId, await payee1.getAddress())`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.getAddress()`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.connect(admin)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.getAddress()`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.balanceOf(
          await payee1.getAddress(),
        )`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.getAddress()`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.balanceOf(registry.address)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.getUpkeep(upkeepId)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.connect(admin)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.withdrawFunds(upkeepId, await payee1.getAddress())`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.getAddress()`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.balanceOf(await payee1.getAddress())`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.getAddress()`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.balanceOf(registry.address)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.getUpkeep(upkeepId)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.connect(await owner.getAddress())`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.getAddress()`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.callStatic.simulatePerformUpkeep(upkeepId, '0x')`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.pause()`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.connect(zeroAddress)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.callStatic.simulatePerformUpkeep(upkeepId, '0x')`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.setCanPerform(false)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.connect(zeroAddress)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.callStatic.simulatePerformUpkeep(upkeepId, '0x')`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.gasUsed.gt(BigNumber.from('0'))`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.from('0')`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.setCanPerform(true)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.connect(zeroAddress)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.callStatic.simulatePerformUpkeep(upkeepId, '0x')`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.gasUsed.gt(BigNumber.from('0'))`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.from('0')`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.setCanPerform(true)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.setPerformGasToBurn(performGas)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.connect(zeroAddress)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.callStatic.simulatePerformUpkeep(upkeepId, '0x')`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.gasUsed.gt(
          performGas.sub(BigNumber.from('1000')),
        )`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.sub(BigNumber.from('1000'))`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.from('1000')`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.connect(await owner.getAddress())`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.getAddress()`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.connect(admin)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.cancelUpkeep(upkeepId)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.connect(zeroAddress)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.cancelUpkeep(upkeepId)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.connect(zeroAddress)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.pause()`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.connect(zeroAddress)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.connect(admin)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.pauseUpkeep(upkeepId)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.connect(zeroAddress)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.connect(zeroAddress)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.setShouldRevertCheck(true)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.setCheckRevertReason(
          'custom revert error, clever way to insert offchain data',
        )`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.connect(zeroAddress)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.performData.slice(10)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.linkUSD.gt(BigNumber.from('0'))`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.from('0')`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.setShouldRevertCheck(true)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.setCheckRevertReason(longRevertReason)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.connect(zeroAddress)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.setCanCheck(false)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.connect(zeroAddress)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.setCanCheck(true)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.setPerformData(longBytes)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.connect(zeroAddress)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.setCanCheck(true)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.setPerformData(randomBytes)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.provider.getBlock('latest')`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.connect(zeroAddress)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.linkUSD.eq(linkUSD)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.utils.randomBytes(32)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.utils.randomBytes(32)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.utils.randomBytes(32)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.utils.randomBytes(32)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.utils.randomBytes(1000)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.mock.checkLog.withArgs(log, '0x')`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.returns(true, '0x1234')`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.connect(zeroAddress)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.getGasOverhead()`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.add(registryPerSignerGasOverhead.mul(f + 1))`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.mul(f + 1)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.add(
            maxPerformDataSize
              .add(registryTransmitCalldataFixedBytesOverhead)
              .add(
                registryTransmitCalldataPerSignerBytesOverhead.mul(
                  BigNumber.from(f + 1),
                ),
              )
              .mul(
                registryPerPerformByteGasOverhead.add(
                  chainModuleOverheads.chainModulePerByteOverhead,
                ),
              ),
          )`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.add(registryTransmitCalldataFixedBytesOverhead)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.add(
                registryTransmitCalldataPerSignerBytesOverhead.mul(
                  BigNumber.from(f + 1),
                ),
              )`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.mul(
                  BigNumber.from(f + 1),
                )`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.from(f + 1)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.mul(
                registryPerPerformByteGasOverhead.add(
                  chainModuleOverheads.chainModulePerByteOverhead,
                ),
              )`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.add(
                  chainModuleOverheads.chainModulePerByteOverhead,
                )`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.add(chainModuleOverheads.chainModuleFixedOverhead)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.mul('2')`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.updateRoundData(roundId, answer, updatedAt, startedAt)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.updateRoundData(roundId, -100, updatedAt, startedAt)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.updateRoundData(roundId, 0, updatedAt, startedAt)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.getMaxPaymentForGas(
            upkeepId,
            Trigger.CONDITION,
            performGas,
            linkToken.address,
          )`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.getGasOverhead()`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.add(registryPerSignerGasOverhead.mul(f + 1))`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.mul(f + 1)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.add(
            maxPerformDataSize
              .add(registryTransmitCalldataFixedBytesOverhead)
              .add(
                registryTransmitCalldataPerSignerBytesOverhead.mul(
                  BigNumber.from(f + 1),
                ),
              )
              .mul(
                registryPerPerformByteGasOverhead.add(
                  chainModuleOverheads.chainModulePerByteOverhead,
                ),
              ),
          )`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.add(registryTransmitCalldataFixedBytesOverhead)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.add(
                registryTransmitCalldataPerSignerBytesOverhead.mul(
                  BigNumber.from(f + 1),
                ),
              )`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.mul(
                  BigNumber.from(f + 1),
                )`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.from(f + 1)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.mul(
                registryPerPerformByteGasOverhead.add(
                  chainModuleOverheads.chainModulePerByteOverhead,
                ),
              )`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.add(
                  chainModuleOverheads.chainModulePerByteOverhead,
                )`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.add(chainModuleOverheads.chainModuleFixedOverhead)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.mul('2')`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.updateRoundData(roundId, answer, updatedAt, startedAt)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.updateRoundData(roundId, -100, updatedAt, startedAt)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.updateRoundData(roundId, 0, updatedAt, startedAt)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.getMaxPaymentForGas(
            upkeepId,
            Trigger.CONDITION,
            performGas,
            linkToken.address,
          )`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.typeAndVersion()`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.connect(payee1)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.setConfigTypeSafe(
            signerAddresses,
            keeperAddresses,
            f,
            newConfig,
            offchainVersion,
            offchainBytes,
            baseConfig[6],
            baseConfig[7],
          )`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.setConfigTypeSafe(
            [randomAddress(), randomAddress(), randomAddress(), zeroAddress],
            [
              randomAddress(),
              randomAddress(),
              randomAddress(),
              randomAddress(),
            ],
            f,
            newConfig,
            offchainVersion,
            offchainBytes,
            baseConfig[6],
            baseConfig[7],
          )`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.setConfigTypeSafe(
            [
              randomAddress(),
              randomAddress(),
              randomAddress(),
              randomAddress(),
            ],
            [randomAddress(), randomAddress(), randomAddress(), zeroAddress],
            f,
            newConfig,
            offchainVersion,
            offchainBytes,
            baseConfig[6],
            baseConfig[7],
          )`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.getState()`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.getConfig()`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.setConfigTypeSafe(
          signerAddresses,
          keeperAddresses,
          f,
          newConfig,
          offchainVersion,
          offchainBytes,
          [],
          [],
        )`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.getState()`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.pause()`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.getState()`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.setConfigTypeSafe(
          signerAddresses,
          keeperAddresses,
          f,
          newConfig,
          offchainVersion,
          offchainBytes,
          [],
          [],
        )`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.getState()`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.setConfigTypeSafe(
          signerAddresses,
          keeperAddresses,
          f,
          newConfig,
          offchainVersion,
          offchainBytes,
          [],
          [],
        )`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.connect(payee1)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.setConfigTypeSafe(
            newKeepers,
            newKeepers,
            f,
            config,
            offchainVersion,
            offchainBytes,
            baseConfig[6],
            baseConfig[7],
          )`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.push(randomAddress())`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.setConfigTypeSafe(
            newKeepers,
            newKeepers,
            f,
            config,
            offchainVersion,
            offchainBytes,
            baseConfig[6],
            baseConfig[7],
          )`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.setConfigTypeSafe(
            newKeepers,
            newKeepers,
            0,
            config,
            offchainVersion,
            offchainBytes,
            baseConfig[6],
            baseConfig[7],
          )`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.setConfigTypeSafe(
            signers,
            newKeepers,
            f,
            config,
            offchainVersion,
            offchainBytes,
            baseConfig[6],
            baseConfig[7],
          )`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.pop()`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.setConfigTypeSafe(
            newKeepers,
            newKeepers,
            f,
            config,
            offchainVersion,
            offchainBytes,
            baseConfig[6],
            baseConfig[7],
          )`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.Eddy.getAddress()`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.Eddy.getAddress()`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.Eddy.getAddress()`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.Eddy.getAddress()`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.setConfigTypeSafe(
            newSigners,
            newKeepers,
            f,
            config,
            offchainVersion,
            offchainBytes,
            baseConfig[6],
            baseConfig[7],
          )`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.Eddy.getAddress()`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.Eddy.getAddress()`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.Eddy.getAddress()`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.Eddy.getAddress()`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.setConfigTypeSafe(
            newKeepers,
            newTransmitters,
            f,
            config,
            offchainVersion,
            offchainBytes,
            baseConfig[6],
            baseConfig[7],
          )`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.cancelUpkeep(upkeepId)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.wait()`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.approve(registry.address, toWei('100'))`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.addFunds(upkeepId, toWei('100'))`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.connect(admin)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.cancelUpkeep(upkeepId)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.provider.send('evm_mine', [])`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.wait()`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.getAddress()`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.setConfigTypeSafe(
            signerAddresses,
            keeperAddresses,
            f,
            {
              checkGasLimit,
              stalenessSeconds,
              gasCeilingMultiplier,
              maxCheckDataSize,
              maxPerformDataSize,
              maxRevertDataSize,
              maxPerformGas,
              fallbackGasPrice,
              fallbackLinkPrice,
              fallbackNativePrice,
              transcoder: transcoder.address,
              registrars: [],
              upkeepPrivilegeManager: upkeepManager,
              chainModule: chainModuleBase.address,
              reorgProtectionEnabled: true,
              financeAdmin: financeAdminAddress,
            },
            offchainVersion,
            offchainBytes,
            [linkToken.address],
            [
              {
                gasFeePPB: paymentPremiumPPB,
                flatFeeMilliCents,
                priceFeed: linkUSDFeed.address,
                fallbackPrice: fallbackLinkPrice,
                minSpend: newMinUpkeepSpend,
                decimals: 18,
              },
            ],
          )`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.balanceOf(
            await payee1.getAddress(),
          )`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.getAddress()`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.getUpkeep(upkeepId)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.linkAvailableForPayment()`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.sub(upkeepBefore)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.sub(amountSpent)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.connect(admin)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.cancelUpkeep(upkeepId)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.balanceOf(
            await payee1.getAddress(),
          )`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.getAddress()`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.getUpkeep(upkeepId)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.linkAvailableForPayment()`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.sub(ownerBefore)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.eq(cancellationFee)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.getAddress()`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.setConfigTypeSafe(
            signerAddresses,
            keeperAddresses,
            f,
            {
              checkGasLimit,
              stalenessSeconds,
              gasCeilingMultiplier,
              maxCheckDataSize,
              maxPerformDataSize,
              maxRevertDataSize,
              maxPerformGas,
              fallbackGasPrice,
              fallbackLinkPrice,
              fallbackNativePrice,
              transcoder: transcoder.address,
              registrars: [],
              upkeepPrivilegeManager: upkeepManager,
              chainModule: chainModuleBase.address,
              reorgProtectionEnabled: true,
              financeAdmin: financeAdminAddress,
            },
            offchainVersion,
            offchainBytes,
            [linkToken.address],
            [
              {
                gasFeePPB: paymentPremiumPPB,
                flatFeeMilliCents,
                priceFeed: linkUSDFeed.address,
                fallbackPrice: fallbackLinkPrice,
                minSpend: newMinUpkeepSpend,
                decimals: 18,
              },
            ],
          )`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.balanceOf(
            await payee1.getAddress(),
          )`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.getAddress()`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.getUpkeep(upkeepId)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.linkAvailableForPayment()`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.connect(admin)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.cancelUpkeep(upkeepId)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.balanceOf(
            await payee1.getAddress(),
          )`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.getAddress()`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.linkAvailableForPayment()`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.getUpkeep(upkeepId)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.sub(ownerBefore)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.eq(upkeepBefore)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.from(420)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.getAddress()`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.setConfigTypeSafe(
            signerAddresses,
            keeperAddresses,
            f,
            {
              checkGasLimit,
              stalenessSeconds,
              gasCeilingMultiplier,
              maxCheckDataSize,
              maxPerformDataSize,
              maxRevertDataSize,
              maxPerformGas,
              fallbackGasPrice,
              fallbackLinkPrice,
              fallbackNativePrice,
              transcoder: transcoder.address,
              registrars: [],
              upkeepPrivilegeManager: upkeepManager,
              chainModule: chainModuleBase.address,
              reorgProtectionEnabled: true,
              financeAdmin: financeAdminAddress,
            },
            offchainVersion,
            offchainBytes,
            [linkToken.address],
            [
              {
                gasFeePPB: paymentPremiumPPB,
                flatFeeMilliCents,
                priceFeed: linkUSDFeed.address,
                fallbackPrice: fallbackLinkPrice,
                minSpend: newMinUpkeepSpend,
                decimals: 18,
              },
            ],
          )`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.balanceOf(
            await payee1.getAddress(),
          )`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.getAddress()`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.getUpkeep(upkeepId)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.linkAvailableForPayment()`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.connect(admin)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.cancelUpkeep(upkeepId)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.balanceOf(
            await payee1.getAddress(),
          )`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.getAddress()`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.linkAvailableForPayment()`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.getUpkeep(upkeepId)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.eq(payee1After)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.connect(payee2)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.withdrawPayment(
            await keeper1.getAddress(),
            await nonkeeper.getAddress(),
          )`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.getAddress()`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.getAddress()`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.connect(payee2)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.withdrawPayment(await keeper1.getAddress(), zeroAddress)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.getAddress()`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.getAddress()`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.getTransmitterInfo(
        await keeper1.getAddress(),
      )`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.getAddress()`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.getUpkeep(upkeepId)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.balanceOf(to)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.balanceOf(registry.address)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.getState()`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.linkAvailableForPayment()`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.connect(payee1)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.withdrawPayment(await keeper1.getAddress(), to)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.getAddress()`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.getTransmitterInfo(
        await keeper1.getAddress(),
      )`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.getAddress()`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.getUpkeep(upkeepId)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.balanceOf(to)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.balanceOf(registry.address)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.getState()`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.linkAvailableForPayment()`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.sub(keeperBefore.balance)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.eq(registryLinkAfter)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.getTransmitterInfo(await keeper1.getAddress())`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.getAddress()`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.connect(payee1)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.withdrawPayment(
          await keeper1.getAddress(),
          await nonkeeper.getAddress(),
        )`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.getAddress()`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.getAddress()`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.getAddress()`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.getAddress()`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.getAddress()`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.setShouldRevertCallback(true)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.connect(zeroAddress)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.callStatic.checkCallback(streamsLookupUpkeepId, values, '0x')`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.gasUsed.gt(BigNumber.from('0'))`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.from('0')`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.connect(zeroAddress)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.callStatic.checkCallback(streamsLookupUpkeepId, values, '0x')`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.gasUsed.gt(BigNumber.from('0'))`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.from('0')`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.setCallbackReturnBool(false)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.connect(zeroAddress)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.callStatic.checkCallback(streamsLookupUpkeepId, values, '0x')`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.gasUsed.gt(BigNumber.from('0'))`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.from('0')`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.connect(zeroAddress)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.callStatic.checkCallback(streamsLookupUpkeepId, values, '0x')`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.utils.defaultAbiCoder.encode(
        ['bytes[]', 'bytes'],
        [values, '0x'],
      )`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.gasUsed.gt(BigNumber.from('0'))`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.from('0')`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.getState()`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.div(
        BigNumber.from(keeperAddresses.length),
      )`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.from(keeperAddresses.length)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.getTransmitterInfo(await keeper1.getAddress())`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.getAddress()`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.sub(premiumPerTransmitter)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.getTransmitterInfo(await keeper2.getAddress())`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.getAddress()`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.getState()`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.div(
        BigNumber.from(keeperAddresses.length),
      )`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.from(keeperAddresses.length)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.sub(
        premiumPerTransmitter,
      )`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.getTransmitterInfo(await keeper1.getAddress())`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.getAddress()`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.getTransmitterInfo(await keeper2.getAddress())`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.getAddress()`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.gt(k2Balance.add(additionalPremium))`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.add(additionalPremium)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.getState()`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.getTransmitterInfo(await keeper1.getAddress())`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.getAddress()`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.getTransmitterInfo(await keeper2.getAddress())`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.getAddress()`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.connect(payee1)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.withdrawPayment(
          await keeper1.getAddress(),
          await nonkeeper.getAddress(),
        )`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.getAddress()`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.getAddress()`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.getTransmitterInfo(
        await keeper1.getAddress(),
      )`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.getAddress()`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.getTransmitterInfo(
        await keeper2.getAddress(),
      )`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.getAddress()`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.lastCollected.eq(BigNumber.from(0))`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.from(0)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.from('0')`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.add(BigNumber.from('31'))`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.from('31')`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.connect(payee1)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.withdrawPayment(
          await keeper1.getAddress(),
          await nonkeeper.getAddress(),
        )`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.getAddress()`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.getAddress()`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.connect(payee2)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.withdrawPayment(
          await keeper2.getAddress(),
          await nonkeeper.getAddress(),
        )`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.getAddress()`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.getAddress()`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.add(BigNumber.from('31'))`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.from('31')`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.setConfigTypeSafe(
        signerAddresses.slice(2, 15), // only use 2-14th index keepers
        keeperAddresses.slice(2, 15),
        f,
        config,
        offchainVersion,
        offchainBytes,
        baseConfig[6],
        baseConfig[7],
      )`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.slice(2, 15)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.slice(2, 15)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.add(BigNumber.from('13'))`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.from('13')`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.connect(payee1)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.withdrawPayment(
          await keeper1.getAddress(),
          await nonkeeper.getAddress(),
        )`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.getAddress()`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.getAddress()`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.connect(payee3)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.withdrawPayment(
          await keeper3.getAddress(),
          await nonkeeper.getAddress(),
        )`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.getAddress()`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.getAddress()`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.setConfigTypeSafe(
        signerAddresses.slice(0, 4), // only use 0-3rd index keepers
        keeperAddresses.slice(0, 4),
        f,
        config,
        offchainVersion,
        offchainBytes,
        baseConfig[6],
        baseConfig[7],
      )`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.slice(0, 4)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.slice(0, 4)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.add(BigNumber.from('4'))`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.from('4')`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.add(BigNumber.from('4'))`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.from('4')`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.connect(payee5)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.withdrawPayment(
          await keeper5.getAddress(),
          await nonkeeper.getAddress(),
        )`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.getAddress()`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.getAddress()`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.connect(payee1)`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.withdrawPayment(
          await keeper1.getAddress(),
          await nonkeeper.getAddress(),
        )`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.getAddress()`
$DIR/contracts/test/v0.8/automation/AutomationRegistry2_3.test.ts: `.getAddress()`
$DIR/contracts/test/v0.8/automation/IAutomationRegistryMaster2_3.test.ts: `sharedSet.add(entryID(entry))`
$DIR/contracts/test/v0.8/automation/IAutomationRegistryMaster2_3.test.ts: `abiSet.add(id)`
$DIR/contracts/test/v0.8/automation/IAutomationRegistryMaster2_3.test.ts: `.utils.id(compositeABIs.join(''))`
$DIR/contracts/test/v0.8/automation/IAutomationRegistryMaster2_3.test.ts: `.join('')`
$DIR/contracts/test/v0.8/automation/IAutomationRegistryMaster2_3.test.ts: `.readFileSync(
        'src/v0.8/automation/interfaces/v2_3/IAutomationRegistryMaster2_3.sol',
      )`
$DIR/contracts/test/v0.8/automation/IAutomationRegistryMaster2_3.test.ts: `.slice(17, 83)`
$DIR/contracts/test/v0.8/automation/IAutomationRegistryMaster2_3.test.ts: `.add(entryID(entry))`
$DIR/contracts/test/v0.8/automation/IAutomationRegistryMaster2_3.test.ts: `.has(id)`
$DIR/contracts/test/v0.8/automation/IAutomationRegistryMaster2_3.test.ts: `.add(id)`
$DIR/contracts/test/v0.8/automation/IAutomationRegistryMaster2_3.test.ts: `.has(id)`
$DIR/contracts/test/v0.8/automation/KeeperCompatible.test.ts: `await contract
          .connect(ethers.constants.AddressZero)
          .verifyCannotExecute()`
$DIR/contracts/test/v0.8/automation/KeeperCompatible.test.ts: `.connect(ethers.constants.AddressZero)`
$DIR/contracts/test/v0.8/automation/KeeperCompatible.test.ts: `.verifyCannotExecute()`
$DIR/contracts/test/v0.8/automation/KeeperCompatible.test.ts: `.verifyCannotExecute()`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `await registry.connect(owner).pause()`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `upkeepIds.push(upkeepId)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `gasLimits.push(performGas)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `triggers.push('0x')`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `performDatas.push('0x')`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `performDatas.push('0x')`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `await registry.connect(admin).addFunds(upkeepId, BigNumber.from(10))`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `await tx.wait()`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `await ethers.provider.send('evm_mine', [])`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `newConfig.reorgProtectionEnabled = false`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `await registry // used to test initial configurations
          .connect(owner)
          .setConfigTypeSafe(
            signerAddresses,
            keeperAddresses,
            f,
            newConfig,
            offchainVersion,
            offchainBytes,
            baseConfig[6],
            baseConfig[7],
          )`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `newConfig.reorgProtectionEnabled = false`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `await registry // used to test initial configurations
          .connect(owner)
          .setConfigTypeSafe(
            signerAddresses,
            keeperAddresses,
            f,
            newConfig,
            offchainVersion,
            offchainBytes,
            baseConfig[6],
            baseConfig[7],
          )`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `await ethers.provider.send('evm_mine', [])`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `await ethers.provider.send('evm_mine', [])`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `tx = await getTransmitTx(registry, keeper1, [id], {
            checkBlockNum: latestBlock.number + 100,
            checkBlockHash: latestBlock.hash,
          })`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `receipt = await tx.wait()`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `reorgedUpkeepReportLogs = parseReorgedUpkeepReportLogs(receipt)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `newConfig.reorgProtectionEnabled = false`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `await registry // used to test initial configurations
          .connect(owner)
          .setConfigTypeSafe(
            signerAddresses,
            keeperAddresses,
            f,
            newConfig,
            offchainVersion,
            offchainBytes,
            baseConfig[6],
            baseConfig[7],
          )`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `tx = await getTransmitTx(registry, keeper1, [id], {
            checkBlockNum: latestBlock.number + 100,
            checkBlockHash: latestBlock.hash,
          })`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `receipt = await tx.wait()`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `reorgedUpkeepReportLogs = parseReorgedUpkeepReportLogs(receipt)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `await registry.connect(admin).cancelUpkeep(upkeepId)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `await ethers.provider.send('evm_mine', [])`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `await mock.setCanPerform(false)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `await mock.setCanPerform(false)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `await mock.setCanPerform(true)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `await mock.setCanPerform(true)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `parsedLogs.push(iface.parseLog(log))`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `await mock.setCanPerform(true)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `await mock.setCanPerform(true)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `await registry.connect(owner).addFunds(afUpkeepId, toWei('100'))`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `await autoFunderUpkeep.setIsEligible(true)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `await autoFunderUpkeep.setShouldCancel(true)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `await getTransmitTx(registry, keeper1, [afUpkeepId])`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `registration = await registry.getUpkeep(afUpkeepId)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `upkeepIds.push(testUpkeepId)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `await registry.connect(owner).addFunds(testUpkeepId, toWei('10'))`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `await mock.setCanPerform(true)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `await mock.setPerformGasToBurn(performGas)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `totalPerformGas = totalPerformGas.add(performGas)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `await evmRevert(
          getTransmitTx(registry, keeper1, upkeepIds, {
            gasLimit: totalPerformGas,
          }),
        )`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `await mock.setCanCheck(true)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `await registry.connect(admin).addFunds(upkeepId, tooLow)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `await registry.connect(admin).addFunds(upkeepId, oneWei)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `checkUpkeepResult = await registry
        .connect(zeroAddress)
        .callStatic['checkUpkeep(uint256)'](upkeepId)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `await mock.setCanCheck(true)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `await mock.setCanPerform(true)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `await registry.connect(owner).addFunds(upkeepID, minBalance1)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `maxPerformData += '11'`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `await registry.connect(admin).pauseUpkeep(upkeepId)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `await registry.connect(owner).cancelUpkeep(upkeepId)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `await registry
          .connect(admin)
          .withdrawFunds(upkeepId, await payee1.getAddress())`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `registration = await registry.getUpkeep(upkeepId)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `await registry.connect(owner).pause()`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `await mock.setCanPerform(false)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `await mock.setCanPerform(true)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `await mock.setCanPerform(true)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `await mock.setPerformGasToBurn(performGas)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `await registry
        .connect(admin)
        .setUpkeepGasLimit(upkeepId, BigNumber.from(2000000))`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `await registry.connect(admin).cancelUpkeep(upkeepId)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `await registry.connect(owner).cancelUpkeep(upkeepId)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `await registry.connect(owner).pause()`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `await registry.connect(admin).pauseUpkeep(upkeepId)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `await mock.setShouldRevertCheck(true)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `await mock.setCheckRevertReason(
          'custom revert error, clever way to insert offchain data',
        )`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `await mock.setShouldRevertCheck(true)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `longRevertReason += 'x'`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `await mock.setCheckRevertReason(longRevertReason)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `await mock.setCanCheck(false)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `longBytes += '1'`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `await mock.setCanCheck(true)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `await mock.setPerformData(longBytes)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `await mock.setCanCheck(true)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `await mock.setPerformData(randomBytes)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `await ltUpkeep.mock.checkLog.withArgs(log, '0x').returns(true, '0x1234')`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `await gasPriceFeed
        .connect(owner)
        .updateRoundData(roundId, answer, updatedAt, startedAt)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `roundId = 100`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `updatedAt = now()`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `startedAt = 946684799`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `await gasPriceFeed
        .connect(owner)
        .updateRoundData(roundId, -100, updatedAt, startedAt)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `roundId = 101`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `updatedAt = now()`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `startedAt = 946684799`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `await gasPriceFeed
        .connect(owner)
        .updateRoundData(roundId, 0, updatedAt, startedAt)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `await linkUSDFeed
        .connect(owner)
        .updateRoundData(roundId, answer, updatedAt, startedAt)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `roundId = 100`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `updatedAt = now()`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `startedAt = 946684799`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `await linkUSDFeed
        .connect(owner)
        .updateRoundData(roundId, -100, updatedAt, startedAt)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `roundId = 101`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `updatedAt = now()`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `startedAt = 946684799`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `await linkUSDFeed
        .connect(owner)
        .updateRoundData(roundId, 0, updatedAt, startedAt)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `await evmRevertCustomError(
        registry
          .connect(owner)
          .setConfigTypeSafe(
            [randomAddress(), randomAddress(), randomAddress(), zeroAddress],
            [
              randomAddress(),
              randomAddress(),
              randomAddress(),
              randomAddress(),
            ],
            f,
            newConfig,
            offchainVersion,
            offchainBytes,
            baseConfig[6],
            baseConfig[7],
          ),
        registry,
        'InvalidSigner',
      )`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `await registry
        .connect(owner)
        .setConfigTypeSafe(
          signerAddresses,
          keeperAddresses,
          f,
          newConfig,
          offchainVersion,
          offchainBytes,
          [],
          [],
        )`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `await registry.pause()`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `await registry
        .connect(owner)
        .setConfigTypeSafe(
          signerAddresses,
          keeperAddresses,
          f,
          newConfig,
          offchainVersion,
          offchainBytes,
          [],
          [],
        )`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `newKeepers.push(randomAddress())`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `newKeepers.pop()`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `await registry.connect(owner).setConfigTypeSafe(
            signerAddresses,
            keeperAddresses,
            f,
            {
              checkGasLimit,
              stalenessSeconds,
              gasCeilingMultiplier,
              maxCheckDataSize,
              maxPerformDataSize,
              maxRevertDataSize,
              maxPerformGas,
              fallbackGasPrice,
              fallbackLinkPrice,
              fallbackNativePrice,
              transcoder: transcoder.address,
              registrars: [],
              upkeepPrivilegeManager: upkeepManager,
              chainModule: moduleBase.address,
              reorgProtectionEnabled: true,
              financeAdmin: financeAdminAddress,
            },
            offchainVersion,
            offchainBytes,
            [linkToken.address],
            [
              {
                gasFeePPB: paymentPremiumPPB,
                flatFeeMilliCents,
                priceFeed: linkUSDFeed.address,
                fallbackPrice: fallbackLinkPrice,
                minSpend: newMinUpkeepSpend,
                decimals: 18,
              },
            ],
          )`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `await registry.connect(admin).cancelUpkeep(upkeepId)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `await registry.connect(owner).setConfigTypeSafe(
            signerAddresses,
            keeperAddresses,
            f,
            {
              checkGasLimit,
              stalenessSeconds,
              gasCeilingMultiplier,
              maxCheckDataSize,
              maxPerformDataSize,
              maxRevertDataSize,
              maxPerformGas,
              fallbackGasPrice,
              fallbackLinkPrice,
              fallbackNativePrice,
              transcoder: transcoder.address,
              registrars: [],
              upkeepPrivilegeManager: upkeepManager,
              chainModule: moduleBase.address,
              reorgProtectionEnabled: true,
              financeAdmin: financeAdminAddress,
            },
            offchainVersion,
            offchainBytes,
            [linkToken.address],
            [
              {
                gasFeePPB: paymentPremiumPPB,
                flatFeeMilliCents,
                priceFeed: linkUSDFeed.address,
                fallbackPrice: fallbackLinkPrice,
                minSpend: newMinUpkeepSpend,
                decimals: 18,
              },
            ],
          )`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `await registry.connect(admin).cancelUpkeep(upkeepId)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `await registry.connect(owner).setConfigTypeSafe(
            signerAddresses,
            keeperAddresses,
            f,
            {
              checkGasLimit,
              stalenessSeconds,
              gasCeilingMultiplier,
              maxCheckDataSize,
              maxPerformDataSize,
              maxRevertDataSize,
              maxPerformGas,
              fallbackGasPrice,
              fallbackLinkPrice,
              fallbackNativePrice,
              transcoder: transcoder.address,
              registrars: [],
              upkeepPrivilegeManager: upkeepManager,
              chainModule: moduleBase.address,
              reorgProtectionEnabled: true,
              financeAdmin: financeAdminAddress,
            },
            offchainVersion,
            offchainBytes,
            [linkToken.address],
            [
              {
                gasFeePPB: paymentPremiumPPB,
                flatFeeMilliCents,
                priceFeed: linkUSDFeed.address,
                fallbackPrice: fallbackLinkPrice,
                minSpend: newMinUpkeepSpend,
                decimals: 18,
              },
            ],
          )`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `await registry.connect(admin).cancelUpkeep(upkeepId)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `await registry
        .connect(payee1)
        .withdrawPayment(await keeper1.getAddress(), to)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `await streamsLookupUpkeep.setShouldRevertCallback(true)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `longBytes += '11'`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `await streamsLookupUpkeep.setCallbackReturnBool(false)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `await getTransmitTx(registry, keeper1, [upkeepId])`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `await getTransmitTx(registry, keeper2, [upkeepId])`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `await getTransmitTx(registry, keeper1, [upkeepId])`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `await registry
        .connect(payee1)
        .withdrawPayment(
          await keeper1.getAddress(),
          await nonkeeper.getAddress(),
        )`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `await verifyConsistentAccounting(maxAllowedSpareChange)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `await getTransmitTx(registry, keeper1, [upkeepId])`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `maxAllowedSpareChange = maxAllowedSpareChange.add(BigNumber.from('31'))`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `await verifyConsistentAccounting(maxAllowedSpareChange)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `await registry
        .connect(payee1)
        .withdrawPayment(
          await keeper1.getAddress(),
          await nonkeeper.getAddress(),
        )`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `await verifyConsistentAccounting(maxAllowedSpareChange)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `await registry
        .connect(payee2)
        .withdrawPayment(
          await keeper2.getAddress(),
          await nonkeeper.getAddress(),
        )`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `await verifyConsistentAccounting(maxAllowedSpareChange)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `await getTransmitTx(registry, keeper1, [upkeepId])`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `maxAllowedSpareChange = maxAllowedSpareChange.add(BigNumber.from('31'))`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `await verifyConsistentAccounting(maxAllowedSpareChange)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `await registry.connect(owner).setConfigTypeSafe(
        signerAddresses.slice(2, 15), // only use 2-14th index keepers
        keeperAddresses.slice(2, 15),
        f,
        config,
        offchainVersion,
        offchainBytes,
        baseConfig[6],
        baseConfig[7],
      )`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `await verifyConsistentAccounting(maxAllowedSpareChange)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `await getTransmitTx(registry, keeper3, [upkeepId], {
        startingSignerIndex: 2,
      })`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `maxAllowedSpareChange = maxAllowedSpareChange.add(BigNumber.from('13'))`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `await verifyConsistentAccounting(maxAllowedSpareChange)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `await registry
        .connect(payee1)
        .withdrawPayment(
          await keeper1.getAddress(),
          await nonkeeper.getAddress(),
        )`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `await verifyConsistentAccounting(maxAllowedSpareChange)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `await registry
        .connect(payee3)
        .withdrawPayment(
          await keeper3.getAddress(),
          await nonkeeper.getAddress(),
        )`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `await verifyConsistentAccounting(maxAllowedSpareChange)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `await registry.connect(owner).setConfigTypeSafe(
        signerAddresses.slice(0, 4), // only use 0-3rd index keepers
        keeperAddresses.slice(0, 4),
        f,
        config,
        offchainVersion,
        offchainBytes,
        baseConfig[6],
        baseConfig[7],
      )`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `await verifyConsistentAccounting(maxAllowedSpareChange)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `await getTransmitTx(registry, keeper1, [upkeepId])`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `maxAllowedSpareChange = maxAllowedSpareChange.add(BigNumber.from('4'))`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `await getTransmitTx(registry, keeper3, [upkeepId])`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `maxAllowedSpareChange = maxAllowedSpareChange.add(BigNumber.from('4'))`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `await verifyConsistentAccounting(maxAllowedSpareChange)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `await registry
        .connect(payee5)
        .withdrawPayment(
          await keeper5.getAddress(),
          await nonkeeper.getAddress(),
        )`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `await verifyConsistentAccounting(maxAllowedSpareChange)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `await registry
        .connect(payee1)
        .withdrawPayment(
          await keeper1.getAddress(),
          await nonkeeper.getAddress(),
        )`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.pause()`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.push(upkeepId)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.push(performGas)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.push('0x')`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.push('0x')`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.push('0x')`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.add(BigNumber.from('1'))`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.from('1')`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.wait()`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.connect(admin)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.addFunds(upkeepId, BigNumber.from(10))`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.from(10)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.wait()`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.getUpkeep(upkeepId)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.wait()`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.utils.randomBytes(32)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.utils.randomBytes(32)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.utils.solidityKeccak256(
          ['uint256', 'bytes32', 'bytes32', 'uint32'],
          [logUpkeepId, logBlockHash, txHash, logIndex],
        )`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.wait()`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.wait()`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.getUpkeep(upkeepId)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.provider.getBlock(lastPerformed)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.wait()`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.provider.getBlock('latest')`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.wait()`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.provider.send('evm_mine', [])`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.provider.getBlock('latest')`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.provider.getBlock(latestBlock.number - 256)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.wait()`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.provider.getBlock('latest')`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.wait()`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `// used to test initial configurations
          .connect(owner)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.setConfigTypeSafe(
            signerAddresses,
            keeperAddresses,
            f,
            newConfig,
            offchainVersion,
            offchainBytes,
            baseConfig[6],
            baseConfig[7],
          )`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.provider.getBlock('latest')`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.wait()`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `// used to test initial configurations
          .connect(owner)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.setConfigTypeSafe(
            signerAddresses,
            keeperAddresses,
            f,
            newConfig,
            offchainVersion,
            offchainBytes,
            baseConfig[6],
            baseConfig[7],
          )`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.provider.send('evm_mine', [])`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.provider.getBlock('latest')`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.provider.getBlock(latestBlock.number - 256)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.wait()`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.provider.send('evm_mine', [])`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.wait()`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.provider.getBlock('latest')`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.wait()`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.wait()`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `// used to test initial configurations
          .connect(owner)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.setConfigTypeSafe(
            signerAddresses,
            keeperAddresses,
            f,
            newConfig,
            offchainVersion,
            offchainBytes,
            baseConfig[6],
            baseConfig[7],
          )`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.provider.getBlock('latest')`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.wait()`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.wait()`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.connect(admin)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.cancelUpkeep(upkeepId)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.provider.send('evm_mine', [])`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.wait()`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.setCanPerform(false)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.wait()`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.setCanPerform(false)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.wait()`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.setCanPerform(true)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.from(150000)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.setCanPerform(true)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.wait()`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.push(iface.parseLog(log))`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.parseLog(log)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.setCanPerform(true)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.getState()`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.wait()`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.getState()`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.sub(registryPremiumBefore)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.from('1')`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.mul(BigNumber.from('10'))`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.from('10')`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.setCanPerform(true)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.wait()`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.addFunds(afUpkeepId, toWei('100'))`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.setIsEligible(true)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.setShouldCancel(true)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.getUpkeep(afUpkeepId)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.getUpkeep(afUpkeepId)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.lt(oldExpiration)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.slice(0, f + 1)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.connect(keeper1)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.transmit(
              [reportContext[0], reportContext[1], reportContext[2]],
              report,
              sigs.rs,
              sigs.ss,
              sigs.vs,
            )`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.getState()`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.slice(0, f + 2)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.connect(keeper1)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.transmit(
              [reportContext[0], reportContext[1], reportContext[2]],
              report,
              sigs.rs,
              sigs.ss,
              sigs.vs,
            )`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.getState()`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.Wallet.createRandom()`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.Wallet.createRandom()`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.connect(keeper1)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.transmit(
              [reportContext[0], reportContext[1], reportContext[2]],
              report,
              sigs.rs,
              sigs.ss,
              sigs.vs,
            )`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.getState()`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.connect(keeper1)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.transmit(
              [reportContext[0], reportContext[1], reportContext[2]],
              report,
              sigs.rs,
              sigs.ss,
              sigs.vs,
            )`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.from('0')`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.deploy()`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.registerUpkeep(
              mock.address,
              performGas,
              await admin.getAddress(),
              Trigger.CONDITION,
              linkToken.address,
              '0x',
              '0x',
              '0x',
            )`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.getAddress()`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.push(testUpkeepId)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.addFunds(testUpkeepId, toWei('10'))`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.setCanPerform(true)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.setPerformGasToBurn(performGas)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.add(performGas)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.add(transmitGasOverhead)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.setCanCheck(true)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.from(1)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.getMinBalanceForUpkeep(upkeepId)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.sub(oneWei)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.connect(admin)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.addFunds(upkeepId, tooLow)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.connect(zeroAddress)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.connect(admin)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.addFunds(upkeepId, oneWei)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.connect(zeroAddress)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.registerUpkeep(
          mock.address,
          performGas,
          await admin.getAddress(),
          Trigger.CONDITION,
          linkToken.address,
          '0x',
          '0x',
          '0x',
        )`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.getAddress()`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.setCanCheck(true)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.setCanPerform(true)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.getMinBalanceForUpkeep(upkeepID)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.sub(
        1,
      )`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.addFunds(upkeepID, minBalance1)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.connect(zeroAddress)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.mul(gasCeilingMultiplier)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.wait()`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.getBalance(upkeepId)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.getAddress()`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.connect(admin)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.pauseUpkeep(upkeepId)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.cancelUpkeep(upkeepId)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.connect(admin)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.withdrawFunds(upkeepId, await payee1.getAddress())`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.getAddress()`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.connect(admin)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.getAddress()`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.balanceOf(
          await payee1.getAddress(),
        )`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.getAddress()`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.balanceOf(registry.address)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.getUpkeep(upkeepId)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.connect(admin)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.withdrawFunds(upkeepId, await payee1.getAddress())`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.getAddress()`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.balanceOf(await payee1.getAddress())`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.getAddress()`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.balanceOf(registry.address)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.getUpkeep(upkeepId)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.connect(await owner.getAddress())`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.getAddress()`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.callStatic.simulatePerformUpkeep(upkeepId, '0x')`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.pause()`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.connect(zeroAddress)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.callStatic.simulatePerformUpkeep(upkeepId, '0x')`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.setCanPerform(false)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.connect(zeroAddress)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.callStatic.simulatePerformUpkeep(upkeepId, '0x')`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.gasUsed.gt(BigNumber.from('0'))`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.from('0')`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.setCanPerform(true)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.connect(zeroAddress)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.callStatic.simulatePerformUpkeep(upkeepId, '0x')`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.gasUsed.gt(BigNumber.from('0'))`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.from('0')`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.setCanPerform(true)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.setPerformGasToBurn(performGas)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.connect(admin)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.setUpkeepGasLimit(upkeepId, BigNumber.from(2000000))`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.from(2000000)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.connect(zeroAddress)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.callStatic.simulatePerformUpkeep(upkeepId, '0x')`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.gasUsed.gt(
          performGas.add(pubdataGas).sub(BigNumber.from('1000')),
        )`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.add(pubdataGas)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.sub(BigNumber.from('1000'))`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.from('1000')`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.connect(await owner.getAddress())`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.getAddress()`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.connect(admin)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.cancelUpkeep(upkeepId)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.connect(zeroAddress)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.cancelUpkeep(upkeepId)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.connect(zeroAddress)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.pause()`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.connect(zeroAddress)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.connect(admin)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.pauseUpkeep(upkeepId)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.connect(zeroAddress)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.connect(zeroAddress)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.setShouldRevertCheck(true)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.setCheckRevertReason(
          'custom revert error, clever way to insert offchain data',
        )`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.connect(zeroAddress)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.performData.slice(10)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.linkUSD.gt(BigNumber.from('0'))`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.from('0')`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.setShouldRevertCheck(true)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.setCheckRevertReason(longRevertReason)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.connect(zeroAddress)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.setCanCheck(false)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.connect(zeroAddress)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.setCanCheck(true)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.setPerformData(longBytes)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.connect(zeroAddress)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.setCanCheck(true)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.setPerformData(randomBytes)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.provider.getBlock('latest')`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.connect(zeroAddress)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.linkUSD.eq(linkUSD)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.utils.randomBytes(32)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.utils.randomBytes(32)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.utils.randomBytes(32)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.utils.randomBytes(32)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.utils.randomBytes(1000)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.mock.checkLog.withArgs(log, '0x')`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.returns(true, '0x1234')`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.connect(zeroAddress)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.getGasOverhead()`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.add(registryPerSignerGasOverhead.mul(f + 1))`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.mul(f + 1)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.add(chainModuleOverheads.chainModuleFixedOverhead)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.mul('2')`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.updateRoundData(roundId, answer, updatedAt, startedAt)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.updateRoundData(roundId, -100, updatedAt, startedAt)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.updateRoundData(roundId, 0, updatedAt, startedAt)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.getMaxPaymentForGas(
            upkeepId,
            Trigger.CONDITION,
            performGas,
            linkToken.address,
          )`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.getGasOverhead()`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.add(registryPerSignerGasOverhead.mul(f + 1))`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.mul(f + 1)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.add(chainModuleOverheads.chainModuleFixedOverhead)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.mul('2')`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.updateRoundData(roundId, answer, updatedAt, startedAt)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.updateRoundData(roundId, -100, updatedAt, startedAt)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.updateRoundData(roundId, 0, updatedAt, startedAt)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.getMaxPaymentForGas(
            upkeepId,
            Trigger.CONDITION,
            performGas,
            linkToken.address,
          )`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.typeAndVersion()`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.connect(payee1)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.setConfigTypeSafe(
            signerAddresses,
            keeperAddresses,
            f,
            newConfig,
            offchainVersion,
            offchainBytes,
            baseConfig[6],
            baseConfig[7],
          )`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.setConfigTypeSafe(
            [randomAddress(), randomAddress(), randomAddress(), zeroAddress],
            [
              randomAddress(),
              randomAddress(),
              randomAddress(),
              randomAddress(),
            ],
            f,
            newConfig,
            offchainVersion,
            offchainBytes,
            baseConfig[6],
            baseConfig[7],
          )`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.setConfigTypeSafe(
            [
              randomAddress(),
              randomAddress(),
              randomAddress(),
              randomAddress(),
            ],
            [randomAddress(), randomAddress(), randomAddress(), zeroAddress],
            f,
            newConfig,
            offchainVersion,
            offchainBytes,
            baseConfig[6],
            baseConfig[7],
          )`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.getState()`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.getConfig()`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.setConfigTypeSafe(
          signerAddresses,
          keeperAddresses,
          f,
          newConfig,
          offchainVersion,
          offchainBytes,
          [],
          [],
        )`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.getState()`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.pause()`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.getState()`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.setConfigTypeSafe(
          signerAddresses,
          keeperAddresses,
          f,
          newConfig,
          offchainVersion,
          offchainBytes,
          [],
          [],
        )`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.getState()`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.setConfigTypeSafe(
          signerAddresses,
          keeperAddresses,
          f,
          newConfig,
          offchainVersion,
          offchainBytes,
          [],
          [],
        )`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.connect(payee1)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.setConfigTypeSafe(
            newKeepers,
            newKeepers,
            f,
            config,
            offchainVersion,
            offchainBytes,
            baseConfig[6],
            baseConfig[7],
          )`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.push(randomAddress())`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.setConfigTypeSafe(
            newKeepers,
            newKeepers,
            f,
            config,
            offchainVersion,
            offchainBytes,
            baseConfig[6],
            baseConfig[7],
          )`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.setConfigTypeSafe(
            newKeepers,
            newKeepers,
            0,
            config,
            offchainVersion,
            offchainBytes,
            baseConfig[6],
            baseConfig[7],
          )`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.setConfigTypeSafe(
            signers,
            newKeepers,
            f,
            config,
            offchainVersion,
            offchainBytes,
            baseConfig[6],
            baseConfig[7],
          )`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.pop()`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.setConfigTypeSafe(
            newKeepers,
            newKeepers,
            f,
            config,
            offchainVersion,
            offchainBytes,
            baseConfig[6],
            baseConfig[7],
          )`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.Eddy.getAddress()`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.Eddy.getAddress()`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.Eddy.getAddress()`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.Eddy.getAddress()`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.setConfigTypeSafe(
            newSigners,
            newKeepers,
            f,
            config,
            offchainVersion,
            offchainBytes,
            baseConfig[6],
            baseConfig[7],
          )`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.Eddy.getAddress()`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.Eddy.getAddress()`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.Eddy.getAddress()`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.Eddy.getAddress()`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.setConfigTypeSafe(
            newKeepers,
            newTransmitters,
            f,
            config,
            offchainVersion,
            offchainBytes,
            baseConfig[6],
            baseConfig[7],
          )`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.getAddress()`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.setConfigTypeSafe(
            signerAddresses,
            keeperAddresses,
            f,
            {
              checkGasLimit,
              stalenessSeconds,
              gasCeilingMultiplier,
              maxCheckDataSize,
              maxPerformDataSize,
              maxRevertDataSize,
              maxPerformGas,
              fallbackGasPrice,
              fallbackLinkPrice,
              fallbackNativePrice,
              transcoder: transcoder.address,
              registrars: [],
              upkeepPrivilegeManager: upkeepManager,
              chainModule: moduleBase.address,
              reorgProtectionEnabled: true,
              financeAdmin: financeAdminAddress,
            },
            offchainVersion,
            offchainBytes,
            [linkToken.address],
            [
              {
                gasFeePPB: paymentPremiumPPB,
                flatFeeMilliCents,
                priceFeed: linkUSDFeed.address,
                fallbackPrice: fallbackLinkPrice,
                minSpend: newMinUpkeepSpend,
                decimals: 18,
              },
            ],
          )`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.balanceOf(
            await payee1.getAddress(),
          )`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.getAddress()`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.getUpkeep(upkeepId)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.linkAvailableForPayment()`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.sub(upkeepBefore)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.sub(amountSpent)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.connect(admin)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.cancelUpkeep(upkeepId)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.balanceOf(
            await payee1.getAddress(),
          )`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.getAddress()`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.getUpkeep(upkeepId)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.linkAvailableForPayment()`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.sub(ownerBefore)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.eq(cancellationFee)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.getAddress()`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.setConfigTypeSafe(
            signerAddresses,
            keeperAddresses,
            f,
            {
              checkGasLimit,
              stalenessSeconds,
              gasCeilingMultiplier,
              maxCheckDataSize,
              maxPerformDataSize,
              maxRevertDataSize,
              maxPerformGas,
              fallbackGasPrice,
              fallbackLinkPrice,
              fallbackNativePrice,
              transcoder: transcoder.address,
              registrars: [],
              upkeepPrivilegeManager: upkeepManager,
              chainModule: moduleBase.address,
              reorgProtectionEnabled: true,
              financeAdmin: financeAdminAddress,
            },
            offchainVersion,
            offchainBytes,
            [linkToken.address],
            [
              {
                gasFeePPB: paymentPremiumPPB,
                flatFeeMilliCents,
                priceFeed: linkUSDFeed.address,
                fallbackPrice: fallbackLinkPrice,
                minSpend: newMinUpkeepSpend,
                decimals: 18,
              },
            ],
          )`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.balanceOf(
            await payee1.getAddress(),
          )`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.getAddress()`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.getUpkeep(upkeepId)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.linkAvailableForPayment()`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.connect(admin)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.cancelUpkeep(upkeepId)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.balanceOf(
            await payee1.getAddress(),
          )`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.getAddress()`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.linkAvailableForPayment()`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.getUpkeep(upkeepId)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.sub(ownerBefore)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.eq(upkeepBefore)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.from(420)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.getAddress()`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.setConfigTypeSafe(
            signerAddresses,
            keeperAddresses,
            f,
            {
              checkGasLimit,
              stalenessSeconds,
              gasCeilingMultiplier,
              maxCheckDataSize,
              maxPerformDataSize,
              maxRevertDataSize,
              maxPerformGas,
              fallbackGasPrice,
              fallbackLinkPrice,
              fallbackNativePrice,
              transcoder: transcoder.address,
              registrars: [],
              upkeepPrivilegeManager: upkeepManager,
              chainModule: moduleBase.address,
              reorgProtectionEnabled: true,
              financeAdmin: financeAdminAddress,
            },
            offchainVersion,
            offchainBytes,
            [linkToken.address],
            [
              {
                gasFeePPB: paymentPremiumPPB,
                flatFeeMilliCents,
                priceFeed: linkUSDFeed.address,
                fallbackPrice: fallbackLinkPrice,
                minSpend: newMinUpkeepSpend,
                decimals: 18,
              },
            ],
          )`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.balanceOf(
            await payee1.getAddress(),
          )`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.getAddress()`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.getUpkeep(upkeepId)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.linkAvailableForPayment()`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.connect(admin)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.cancelUpkeep(upkeepId)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.balanceOf(
            await payee1.getAddress(),
          )`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.getAddress()`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.linkAvailableForPayment()`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.getUpkeep(upkeepId)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.eq(payee1After)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.connect(payee2)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.withdrawPayment(
            await keeper1.getAddress(),
            await nonkeeper.getAddress(),
          )`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.getAddress()`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.getAddress()`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.connect(payee2)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.withdrawPayment(await keeper1.getAddress(), zeroAddress)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.getAddress()`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.getAddress()`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.getTransmitterInfo(
        await keeper1.getAddress(),
      )`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.getAddress()`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.getUpkeep(upkeepId)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.balanceOf(to)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.balanceOf(registry.address)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.getState()`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.linkAvailableForPayment()`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.connect(payee1)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.withdrawPayment(await keeper1.getAddress(), to)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.getAddress()`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.getTransmitterInfo(
        await keeper1.getAddress(),
      )`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.getAddress()`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.getUpkeep(upkeepId)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.balanceOf(to)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.balanceOf(registry.address)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.getState()`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.linkAvailableForPayment()`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.sub(keeperBefore.balance)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.eq(registryLinkAfter)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.getTransmitterInfo(await keeper1.getAddress())`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.getAddress()`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.connect(payee1)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.withdrawPayment(
          await keeper1.getAddress(),
          await nonkeeper.getAddress(),
        )`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.getAddress()`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.getAddress()`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.getAddress()`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.getAddress()`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.getAddress()`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.setShouldRevertCallback(true)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.connect(zeroAddress)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.callStatic.checkCallback(streamsLookupUpkeepId, values, '0x')`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.gasUsed.gt(BigNumber.from('0'))`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.from('0')`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.connect(zeroAddress)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.callStatic.checkCallback(streamsLookupUpkeepId, values, '0x')`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.gasUsed.gt(BigNumber.from('0'))`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.from('0')`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.setCallbackReturnBool(false)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.connect(zeroAddress)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.callStatic.checkCallback(streamsLookupUpkeepId, values, '0x')`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.gasUsed.gt(BigNumber.from('0'))`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.from('0')`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.connect(zeroAddress)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.callStatic.checkCallback(streamsLookupUpkeepId, values, '0x')`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.utils.defaultAbiCoder.encode(
        ['bytes[]', 'bytes'],
        [values, '0x'],
      )`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.gasUsed.gt(BigNumber.from('0'))`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.from('0')`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.getState()`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.div(
        BigNumber.from(keeperAddresses.length),
      )`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.from(keeperAddresses.length)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.getTransmitterInfo(await keeper1.getAddress())`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.getAddress()`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.sub(premiumPerTransmitter)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.getTransmitterInfo(await keeper2.getAddress())`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.getAddress()`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.getState()`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.div(
        BigNumber.from(keeperAddresses.length),
      )`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.from(keeperAddresses.length)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.sub(
        premiumPerTransmitter,
      )`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.getTransmitterInfo(await keeper1.getAddress())`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.getAddress()`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.getTransmitterInfo(await keeper2.getAddress())`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.getAddress()`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.gt(k2Balance.add(additionalPremium))`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.add(additionalPremium)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.getState()`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.getTransmitterInfo(await keeper1.getAddress())`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.getAddress()`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.getTransmitterInfo(await keeper2.getAddress())`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.getAddress()`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.connect(payee1)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.withdrawPayment(
          await keeper1.getAddress(),
          await nonkeeper.getAddress(),
        )`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.getAddress()`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.getAddress()`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.getTransmitterInfo(
        await keeper1.getAddress(),
      )`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.getAddress()`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.getTransmitterInfo(
        await keeper2.getAddress(),
      )`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.getAddress()`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.lastCollected.eq(BigNumber.from(0))`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.from(0)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.from('0')`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.add(BigNumber.from('31'))`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.from('31')`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.connect(payee1)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.withdrawPayment(
          await keeper1.getAddress(),
          await nonkeeper.getAddress(),
        )`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.getAddress()`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.getAddress()`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.connect(payee2)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.withdrawPayment(
          await keeper2.getAddress(),
          await nonkeeper.getAddress(),
        )`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.getAddress()`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.getAddress()`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.add(BigNumber.from('31'))`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.from('31')`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.setConfigTypeSafe(
        signerAddresses.slice(2, 15), // only use 2-14th index keepers
        keeperAddresses.slice(2, 15),
        f,
        config,
        offchainVersion,
        offchainBytes,
        baseConfig[6],
        baseConfig[7],
      )`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.slice(2, 15)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.slice(2, 15)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.add(BigNumber.from('13'))`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.from('13')`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.connect(payee1)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.withdrawPayment(
          await keeper1.getAddress(),
          await nonkeeper.getAddress(),
        )`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.getAddress()`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.getAddress()`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.connect(payee3)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.withdrawPayment(
          await keeper3.getAddress(),
          await nonkeeper.getAddress(),
        )`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.getAddress()`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.getAddress()`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.connect(owner)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.setConfigTypeSafe(
        signerAddresses.slice(0, 4), // only use 0-3rd index keepers
        keeperAddresses.slice(0, 4),
        f,
        config,
        offchainVersion,
        offchainBytes,
        baseConfig[6],
        baseConfig[7],
      )`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.slice(0, 4)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.slice(0, 4)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.add(BigNumber.from('4'))`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.from('4')`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.add(BigNumber.from('4'))`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.from('4')`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.connect(payee5)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.withdrawPayment(
          await keeper5.getAddress(),
          await nonkeeper.getAddress(),
        )`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.getAddress()`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.getAddress()`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.connect(payee1)`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.withdrawPayment(
          await keeper1.getAddress(),
          await nonkeeper.getAddress(),
        )`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.getAddress()`
$DIR/contracts/test/v0.8/automation/ZKSyncAutomationRegistry2_3.test.ts: `.getAddress()`
$DIR/contracts/test/v0.8/directory.test.ts: `noNumbersAsFirstChar(newPath)`
$DIR/contracts/test/v0.8/directory.test.ts: `.join(__dirname, '..', '..', 'src')`
$DIR/contracts/test/v0.8/directory.test.ts: `.readdirSync(dirPath, { withFileTypes: true })`
$DIR/contracts/test/v0.8/directory.test.ts: `.test(entry.name)`
$DIR/contracts/test/v0.8/directory.test.ts: `.join(dirPath, entry.name)`
$DIR/contracts/test/v0.8/directory.test.ts: `.isDirectory()`
$DIR/contracts/test/v0.8/directory.test.ts: `.join(dirPath, entry.name)`
$DIR/contracts/test/v0.8/operatorforwarder/AuthorizedForwarder.test.ts: `await tx.wait()`
$DIR/contracts/test/v0.8/operatorforwarder/AuthorizedForwarder.test.ts: `await tx.wait()`
$DIR/contracts/test/v0.8/operatorforwarder/AuthorizedForwarder.test.ts: `await evmRevert(
              forwarder
                .connect(roles.defaultAccount)
                .multiForward(
                  [brokenMock.address, mock.address],
                  [brokenMsgPayload, payload],
                ),
              'Failure message',
            )`
$DIR/contracts/test/v0.8/operatorforwarder/AuthorizedForwarder.test.ts: `await evmRevert(
              // first
              forwarder
                .connect(roles.defaultAccount)
                .multiForward(
                  [brokenMock.address, mock.address],
                  [brokenPayload, payload],
                ),
              'Forwarded call reverted without reason',
            )`
$DIR/contracts/test/v0.8/operatorforwarder/AuthorizedForwarder.test.ts: `await tx.wait()`
$DIR/contracts/test/v0.8/operatorforwarder/AuthorizedForwarder.test.ts: `await tx.wait()`
$DIR/contracts/test/v0.8/operatorforwarder/AuthorizedForwarder.test.ts: `.typeAndVersion()`
$DIR/contracts/test/v0.8/operatorforwarder/AuthorizedForwarder.test.ts: `.linkToken()`
$DIR/contracts/test/v0.8/operatorforwarder/AuthorizedForwarder.test.ts: `.connect(roles.defaultAccount)`
$DIR/contracts/test/v0.8/operatorforwarder/AuthorizedForwarder.test.ts: `.deploy(
          zeroAddress, // Link Address
          await roles.defaultAccount.getAddress(),
          zeroAddress,
          '0x',
        )`
$DIR/contracts/test/v0.8/operatorforwarder/AuthorizedForwarder.test.ts: `.defaultAccount.getAddress()`
$DIR/contracts/test/v0.8/operatorforwarder/AuthorizedForwarder.test.ts: `.getAuthorizedSenders()`
$DIR/contracts/test/v0.8/operatorforwarder/AuthorizedForwarder.test.ts: `.connect(roles.defaultAccount)`
$DIR/contracts/test/v0.8/operatorforwarder/AuthorizedForwarder.test.ts: `.setAuthorizedSenders(newSenders)`
$DIR/contracts/test/v0.8/operatorforwarder/AuthorizedForwarder.test.ts: `.getAuthorizedSenders()`
$DIR/contracts/test/v0.8/operatorforwarder/AuthorizedForwarder.test.ts: `.utils.defaultAbiCoder.encode(
            ['address[]', 'address'],
            [newSenders, await roles.defaultAccount.getAddress()],
          )`
$DIR/contracts/test/v0.8/operatorforwarder/AuthorizedForwarder.test.ts: `.defaultAccount.getAddress()`
$DIR/contracts/test/v0.8/operatorforwarder/AuthorizedForwarder.test.ts: `.connect(roles.defaultAccount)`
$DIR/contracts/test/v0.8/operatorforwarder/AuthorizedForwarder.test.ts: `.getAuthorizedSenders()`
$DIR/contracts/test/v0.8/operatorforwarder/AuthorizedForwarder.test.ts: `.oracleNode.getAddress()`
$DIR/contracts/test/v0.8/operatorforwarder/AuthorizedForwarder.test.ts: `.connect(roles.defaultAccount)`
$DIR/contracts/test/v0.8/operatorforwarder/AuthorizedForwarder.test.ts: `.setAuthorizedSenders(newSenders)`
$DIR/contracts/test/v0.8/operatorforwarder/AuthorizedForwarder.test.ts: `.connect(roles.stranger)`
$DIR/contracts/test/v0.8/operatorforwarder/AuthorizedForwarder.test.ts: `.setAuthorizedSenders([await roles.stranger.getAddress()])`
$DIR/contracts/test/v0.8/operatorforwarder/AuthorizedForwarder.test.ts: `.stranger.getAddress()`
$DIR/contracts/test/v0.8/operatorforwarder/AuthorizedForwarder.test.ts: `.connect(roles.stranger)`
$DIR/contracts/test/v0.8/operatorforwarder/AuthorizedForwarder.test.ts: `.forward(mock.address, payload)`
$DIR/contracts/test/v0.8/operatorforwarder/AuthorizedForwarder.test.ts: `.connect(roles.defaultAccount)`
$DIR/contracts/test/v0.8/operatorforwarder/AuthorizedForwarder.test.ts: `.forward(brokenMock.address, brokenMsgPayload)`
$DIR/contracts/test/v0.8/operatorforwarder/AuthorizedForwarder.test.ts: `.connect(roles.defaultAccount)`
$DIR/contracts/test/v0.8/operatorforwarder/AuthorizedForwarder.test.ts: `.forward(brokenMock.address, brokenPayload)`
$DIR/contracts/test/v0.8/operatorforwarder/AuthorizedForwarder.test.ts: `.connect(roles.defaultAccount)`
$DIR/contracts/test/v0.8/operatorforwarder/AuthorizedForwarder.test.ts: `.forward(zeroAddress, payload)`
$DIR/contracts/test/v0.8/operatorforwarder/AuthorizedForwarder.test.ts: `.interface.getSighash('name')`
$DIR/contracts/test/v0.8/operatorforwarder/AuthorizedForwarder.test.ts: `.connect(roles.defaultAccount)`
$DIR/contracts/test/v0.8/operatorforwarder/AuthorizedForwarder.test.ts: `.forward(link.address, sighash)`
$DIR/contracts/test/v0.8/operatorforwarder/AuthorizedForwarder.test.ts: `.connect(roles.defaultAccount)`
$DIR/contracts/test/v0.8/operatorforwarder/AuthorizedForwarder.test.ts: `.forward(mock.address, payload)`
$DIR/contracts/test/v0.8/operatorforwarder/AuthorizedForwarder.test.ts: `.wait()`
$DIR/contracts/test/v0.8/operatorforwarder/AuthorizedForwarder.test.ts: `.getBytes()`
$DIR/contracts/test/v0.8/operatorforwarder/AuthorizedForwarder.test.ts: `.connect(roles.defaultAccount)`
$DIR/contracts/test/v0.8/operatorforwarder/AuthorizedForwarder.test.ts: `.forward(mock.address, payload)`
$DIR/contracts/test/v0.8/operatorforwarder/AuthorizedForwarder.test.ts: `.connect(roles.stranger)`
$DIR/contracts/test/v0.8/operatorforwarder/AuthorizedForwarder.test.ts: `.multiForward([mock.address], [payload])`
$DIR/contracts/test/v0.8/operatorforwarder/AuthorizedForwarder.test.ts: `.connect(roles.defaultAccount)`
$DIR/contracts/test/v0.8/operatorforwarder/AuthorizedForwarder.test.ts: `.multiForward([brokenMock.address], [brokenMsgPayload])`
$DIR/contracts/test/v0.8/operatorforwarder/AuthorizedForwarder.test.ts: `.connect(roles.defaultAccount)`
$DIR/contracts/test/v0.8/operatorforwarder/AuthorizedForwarder.test.ts: `.multiForward([brokenMock.address], [brokenPayload])`
$DIR/contracts/test/v0.8/operatorforwarder/AuthorizedForwarder.test.ts: `.connect(roles.defaultAccount)`
$DIR/contracts/test/v0.8/operatorforwarder/AuthorizedForwarder.test.ts: `.multiForward([zeroAddress], [payload])`
$DIR/contracts/test/v0.8/operatorforwarder/AuthorizedForwarder.test.ts: `.interface.getSighash('name')`
$DIR/contracts/test/v0.8/operatorforwarder/AuthorizedForwarder.test.ts: `.connect(roles.defaultAccount)`
$DIR/contracts/test/v0.8/operatorforwarder/AuthorizedForwarder.test.ts: `.multiForward([link.address], [sighash])`
$DIR/contracts/test/v0.8/operatorforwarder/AuthorizedForwarder.test.ts: `.connect(roles.defaultAccount)`
$DIR/contracts/test/v0.8/operatorforwarder/AuthorizedForwarder.test.ts: `.multiForward([mock.address], [payload])`
$DIR/contracts/test/v0.8/operatorforwarder/AuthorizedForwarder.test.ts: `.wait()`
$DIR/contracts/test/v0.8/operatorforwarder/AuthorizedForwarder.test.ts: `.getBytes()`
$DIR/contracts/test/v0.8/operatorforwarder/AuthorizedForwarder.test.ts: `.connect(roles.defaultAccount)`
$DIR/contracts/test/v0.8/operatorforwarder/AuthorizedForwarder.test.ts: `.multiForward([mock.address], [payload])`
$DIR/contracts/test/v0.8/operatorforwarder/AuthorizedForwarder.test.ts: `.connect(roles.defaultAccount)`
$DIR/contracts/test/v0.8/operatorforwarder/AuthorizedForwarder.test.ts: `.multiForward([brokenMock.address], [brokenMsgPayload])`
$DIR/contracts/test/v0.8/operatorforwarder/AuthorizedForwarder.test.ts: `.connect(roles.defaultAccount)`
$DIR/contracts/test/v0.8/operatorforwarder/AuthorizedForwarder.test.ts: `.multiForward([brokenMock.address], [brokenPayload])`
$DIR/contracts/test/v0.8/operatorforwarder/AuthorizedForwarder.test.ts: `.connect(roles.defaultAccount)`
$DIR/contracts/test/v0.8/operatorforwarder/AuthorizedForwarder.test.ts: `.multiForward(
                  [brokenMock.address, mock.address],
                  [brokenMsgPayload, payload],
                )`
$DIR/contracts/test/v0.8/operatorforwarder/AuthorizedForwarder.test.ts: `.connect(roles.defaultAccount)`
$DIR/contracts/test/v0.8/operatorforwarder/AuthorizedForwarder.test.ts: `.multiForward(
                  [mock.address, brokenMock.address],
                  [payload, brokenMsgPayload],
                )`
$DIR/contracts/test/v0.8/operatorforwarder/AuthorizedForwarder.test.ts: `.connect(roles.defaultAccount)`
$DIR/contracts/test/v0.8/operatorforwarder/AuthorizedForwarder.test.ts: `.multiForward(
                  [brokenMock.address, mock.address],
                  [brokenPayload, payload],
                )`
$DIR/contracts/test/v0.8/operatorforwarder/AuthorizedForwarder.test.ts: `.connect(roles.defaultAccount)`
$DIR/contracts/test/v0.8/operatorforwarder/AuthorizedForwarder.test.ts: `.multiForward(
                  [mock.address, brokenMock.address],
                  [payload, brokenPayload],
                )`
$DIR/contracts/test/v0.8/operatorforwarder/AuthorizedForwarder.test.ts: `.connect(roles.defaultAccount)`
$DIR/contracts/test/v0.8/operatorforwarder/AuthorizedForwarder.test.ts: `.multiForward([zeroAddress], [payload])`
$DIR/contracts/test/v0.8/operatorforwarder/AuthorizedForwarder.test.ts: `.interface.getSighash('name')`
$DIR/contracts/test/v0.8/operatorforwarder/AuthorizedForwarder.test.ts: `.connect(roles.defaultAccount)`
$DIR/contracts/test/v0.8/operatorforwarder/AuthorizedForwarder.test.ts: `.multiForward([link.address], [sighash])`
$DIR/contracts/test/v0.8/operatorforwarder/AuthorizedForwarder.test.ts: `.connect(roles.defaultAccount)`
$DIR/contracts/test/v0.8/operatorforwarder/AuthorizedForwarder.test.ts: `.multiForward([mock.address], [payload])`
$DIR/contracts/test/v0.8/operatorforwarder/AuthorizedForwarder.test.ts: `.wait()`
$DIR/contracts/test/v0.8/operatorforwarder/AuthorizedForwarder.test.ts: `.getBytes()`
$DIR/contracts/test/v0.8/operatorforwarder/AuthorizedForwarder.test.ts: `.connect(roles.defaultAccount)`
$DIR/contracts/test/v0.8/operatorforwarder/AuthorizedForwarder.test.ts: `.multiForward([mock.address], [payload])`
$DIR/contracts/test/v0.8/operatorforwarder/AuthorizedForwarder.test.ts: `.connect(roles.stranger)`
$DIR/contracts/test/v0.8/operatorforwarder/AuthorizedForwarder.test.ts: `.transferOwnershipWithMessage(
              await roles.stranger.getAddress(),
              message,
            )`
$DIR/contracts/test/v0.8/operatorforwarder/AuthorizedForwarder.test.ts: `.stranger.getAddress()`
$DIR/contracts/test/v0.8/operatorforwarder/AuthorizedForwarder.test.ts: `.connect(roles.defaultAccount)`
$DIR/contracts/test/v0.8/operatorforwarder/AuthorizedForwarder.test.ts: `.transferOwnershipWithMessage(
            await roles.stranger.getAddress(),
            message,
          )`
$DIR/contracts/test/v0.8/operatorforwarder/AuthorizedForwarder.test.ts: `.stranger.getAddress()`
$DIR/contracts/test/v0.8/operatorforwarder/AuthorizedForwarder.test.ts: `.wait()`
$DIR/contracts/test/v0.8/operatorforwarder/AuthorizedForwarder.test.ts: `.stranger.getAddress()`
$DIR/contracts/test/v0.8/operatorforwarder/AuthorizedForwarder.test.ts: `.connect(roles.defaultAccount)`
$DIR/contracts/test/v0.8/operatorforwarder/AuthorizedForwarder.test.ts: `.transferOwnershipWithMessage(
            await roles.stranger.getAddress(),
            message,
          )`
$DIR/contracts/test/v0.8/operatorforwarder/AuthorizedForwarder.test.ts: `.stranger.getAddress()`
$DIR/contracts/test/v0.8/operatorforwarder/AuthorizedForwarder.test.ts: `.wait()`
$DIR/contracts/test/v0.8/operatorforwarder/AuthorizedForwarder.test.ts: `.connect(roles.stranger)`
$DIR/contracts/test/v0.8/operatorforwarder/AuthorizedForwarder.test.ts: `.ownerForward(mock.address, payload)`
$DIR/contracts/test/v0.8/operatorforwarder/AuthorizedForwarder.test.ts: `.interface.getSighash('name')`
$DIR/contracts/test/v0.8/operatorforwarder/AuthorizedForwarder.test.ts: `.connect(roles.defaultAccount)`
$DIR/contracts/test/v0.8/operatorforwarder/AuthorizedForwarder.test.ts: `.connect(roles.defaultAccount)`
$DIR/contracts/test/v0.8/operatorforwarder/AuthorizedForwarder.test.ts: `.ownerForward(mock.address, payload)`
$DIR/contracts/test/v0.8/operatorforwarder/AuthorizedForwarder.test.ts: `.wait()`
$DIR/contracts/test/v0.8/operatorforwarder/AuthorizedForwarder.test.ts: `.getBytes()`
$DIR/contracts/test/v0.8/operatorforwarder/AuthorizedForwarder.test.ts: `.connect(roles.defaultAccount)`
$DIR/contracts/test/v0.8/operatorforwarder/AuthorizedForwarder.test.ts: `.ownerForward(zeroAddress, payload)`
$DIR/contracts/test/v0.8/operatorforwarder/AuthorizedForwarder.test.ts: `.connect(roles.defaultAccount)`
$DIR/contracts/test/v0.8/operatorforwarder/AuthorizedForwarder.test.ts: `.ownerForward(mock.address, payload)`
$DIR/contracts/test/v0.8/operatorforwarder/ConfirmedOwner.test.ts: `.all([
        owner.getAddress(),
        confirmedOwner.owner(),
      ])`
$DIR/contracts/test/v0.8/operatorforwarder/ConfirmedOwner.test.ts: `.getAddress()`
$DIR/contracts/test/v0.8/operatorforwarder/ConfirmedOwner.test.ts: `.owner()`
$DIR/contracts/test/v0.8/operatorforwarder/ConfirmedOwner.test.ts: `.connect(owner)`
$DIR/contracts/test/v0.8/operatorforwarder/ConfirmedOwner.test.ts: `.deploy(ethers.constants.AddressZero)`
$DIR/contracts/test/v0.8/operatorforwarder/ConfirmedOwner.test.ts: `.connect(owner)`
$DIR/contracts/test/v0.8/operatorforwarder/ConfirmedOwner.test.ts: `.modifierOnlyOwner()`
$DIR/contracts/test/v0.8/operatorforwarder/ConfirmedOwner.test.ts: `.connect(owner)`
$DIR/contracts/test/v0.8/operatorforwarder/ConfirmedOwner.test.ts: `.transferOwnership(await newOwner.getAddress())`
$DIR/contracts/test/v0.8/operatorforwarder/ConfirmedOwner.test.ts: `.getAddress()`
$DIR/contracts/test/v0.8/operatorforwarder/ConfirmedOwner.test.ts: `.getAddress()`
$DIR/contracts/test/v0.8/operatorforwarder/ConfirmedOwner.test.ts: `.getAddress()`
$DIR/contracts/test/v0.8/operatorforwarder/ConfirmedOwner.test.ts: `.connect(owner)`
$DIR/contracts/test/v0.8/operatorforwarder/ConfirmedOwner.test.ts: `.transferOwnership(await owner.getAddress())`
$DIR/contracts/test/v0.8/operatorforwarder/ConfirmedOwner.test.ts: `.getAddress()`
$DIR/contracts/test/v0.8/operatorforwarder/ConfirmedOwner.test.ts: `.connect(newOwner)`
$DIR/contracts/test/v0.8/operatorforwarder/ConfirmedOwner.test.ts: `.acceptOwnership()`
$DIR/contracts/test/v0.8/operatorforwarder/ConfirmedOwner.test.ts: `.getAddress()`
$DIR/contracts/test/v0.8/operatorforwarder/ConfirmedOwner.test.ts: `.getAddress()`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `await operator
          .connect(roles.defaultAccount)
          .setAuthorizedSenders([await roles.oracleNode1.getAddress()])`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `await operator
          .connect(roles.defaultAccount)
          .distributeFunds(receivers, amounts, { value: totalAmount })`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `await evmRevert(mock.maliciousWithdraw())`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `bigNumEquals(operatorOriginalBalance, operatorNewBalance)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `requester = await basicConsumerFactory
            .connect(roles.defaultAccount)
            .deploy(link.address, operator.address, specId)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `await link.transfer(requester.address, paymentAmount)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `await mock.maliciousTargetConsumer(requester.address)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `request.requestId = ethers.utils.formatBytes32String('DOESNOTEXIST')`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `await operator
            .connect(roles.oracleNode)
            .fulfillOracleRequest(...convertFufillParams(request, response))`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `await operator
            .connect(roles.oracleNode)
            .fulfillOracleRequest(...convertFufillParams(request, response))`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `await evmRevert(
            operator
              .connect(roles.oracleNode)
              .fulfillOracleRequest(...convertFufillParams(request, response2)),
          )`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `await evmRevert(
            operator.connect(roles.oracleNode).fulfillOracleRequest(
              ...convertFufillParams(request, response, {
                gasLimit: 70000,
              }),
            ),
          )`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `await operator
            .connect(roles.oracleNode)
            .fulfillOracleRequest(...convertFufillParams(request, response))`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `bigNumEquals(balance, 0)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `await operator
            .connect(roles.defaultAccount)
            .withdraw(await roles.oracleNode.getAddress(), paymentAmount)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `await operator
            .connect(roles.oracleNode)
            .fulfillOracleRequest(...convertFufillParams(request, response))`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `await operator
            .connect(roles.oracleNode)
            .fulfillOracleRequest(...convertFufillParams(request, response))`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `bigNumEquals(balance, 0)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `await operator
            .connect(roles.defaultAccount)
            .withdraw(await roles.oracleNode.getAddress(), paymentAmount)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `await operator
            .connect(roles.oracleNode)
            .fulfillOracleRequest(...convertFufillParams(request, response))`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `bigNumEquals(mockBalance, 0)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `bigNumEquals(balance, 0)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `await operator
            .connect(roles.defaultAccount)
            .withdraw(await roles.oracleNode.getAddress(), paymentAmount)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `await operator
            .connect(roles.oracleNode)
            .fulfillOracleRequest(...convertFufillParams(request, response))`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `request = decodeRunRequest(receipt.logs?.[3])`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `await operator
            .connect(roles.oracleNode)
            .fulfillOracleRequest(...convertFufillParams(request, response))`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `request = decodeRunRequest(receipt.logs?.[3])`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `await operator
            .connect(roles.oracleNode)
            .fulfillOracleRequest(...convertFufillParams(request, response))`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `request = decodeRunRequest(receipt.logs?.[3])`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `await operator
            .connect(roles.oracleNode)
            .fulfillOracleRequest(...convertFufillParams(request, response))`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `responseParams[2] = forwarder1.address`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `await operator
            .connect(roles.defaultAccount)
            .acceptOwnableContracts([forwarder1.address])`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `await evmRevert(
            operator
              .connect(roles.oracleNode)
              .fulfillOracleRequest(...responseParams),
            'Cannot call owned contract',
          )`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `await operator
            .connect(roles.defaultAccount)
            .transferOwnableContracts([forwarder1.address], link.address)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `request.requestId = ethers.utils.formatBytes32String('DOESNOTEXIST')`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `await operator
              .connect(roles.oracleNode)
              .fulfillOracleRequest2(
                ...convertFulfill2Params(
                  request,
                  responseTypes,
                  responseValues,
                ),
              )`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `await operator
              .connect(roles.oracleNode)
              .fulfillOracleRequest2(
                ...convertFulfill2Params(
                  request,
                  responseTypes,
                  responseValues,
                ),
              )`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `await evmRevert(
              operator
                .connect(roles.oracleNode)
                .fulfillOracleRequest2(
                  ...convertFulfill2Params(
                    request,
                    responseTypes,
                    response2Values,
                  ),
                ),
            )`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `await evmRevert(
              operator.connect(roles.oracleNode).fulfillOracleRequest2(
                ...convertFulfill2Params(
                  request,
                  responseTypes,
                  responseValues,
                  {
                    gasLimit: 70000,
                  },
                ),
              ),
            )`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `await operator
              .connect(roles.oracleNode)
              .fulfillOracleRequest2(
                ...convertFulfill2Params(
                  request,
                  responseTypes,
                  responseValues,
                ),
              )`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `bigNumEquals(balance, 0)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `await operator
              .connect(roles.defaultAccount)
              .withdraw(await roles.oracleNode.getAddress(), paymentAmount)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `await operator
              .connect(roles.oracleNode)
              .fulfillOracleRequest2(
                ...convertFulfill2Params(
                  request,
                  responseTypes,
                  responseValues,
                ),
              )`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `await operator
              .connect(roles.oracleNode)
              .fulfillOracleRequest2(
                ...convertFulfill2Params(
                  request,
                  responseTypes,
                  responseValues,
                ),
              )`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `bigNumEquals(balance, 0)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `await operator
              .connect(roles.defaultAccount)
              .withdraw(await roles.oracleNode.getAddress(), paymentAmount)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `await operator
              .connect(roles.oracleNode)
              .fulfillOracleRequest2(
                ...convertFulfill2Params(
                  request,
                  responseTypes,
                  responseValues,
                ),
              )`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `bigNumEquals(mockBalance, 0)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `bigNumEquals(balance, 0)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `await operator
              .connect(roles.defaultAccount)
              .withdraw(await roles.oracleNode.getAddress(), paymentAmount)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `await operator
              .connect(roles.oracleNode)
              .fulfillOracleRequest2(
                ...convertFulfill2Params(
                  request,
                  responseTypes,
                  responseValues,
                ),
              )`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `request = decodeRunRequest(receipt.logs?.[3])`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `await operator
              .connect(roles.oracleNode)
              .fulfillOracleRequest2(
                ...convertFulfill2Params(
                  request,
                  responseTypes,
                  responseValues,
                ),
              )`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `request = decodeRunRequest(receipt.logs?.[3])`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `await operator
              .connect(roles.oracleNode)
              .fulfillOracleRequest2(
                ...convertFulfill2Params(
                  request,
                  responseTypes,
                  responseValues,
                ),
              )`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `request = decodeRunRequest(receipt.logs?.[3])`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `await operator
              .connect(roles.oracleNode)
              .fulfillOracleRequest2(
                ...convertFulfill2Params(
                  request,
                  responseTypes,
                  responseValues,
                ),
              )`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `responseParams[2] = forwarder1.address`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `await operator
              .connect(roles.defaultAccount)
              .acceptOwnableContracts([forwarder1.address])`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `await evmRevert(
              operator
                .connect(roles.oracleNode)
                .fulfillOracleRequest2(...responseParams),
              'Cannot call owned contract',
            )`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `await operator
              .connect(roles.defaultAccount)
              .transferOwnableContracts([forwarder1.address], link.address)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `request = decodeRunRequest(receipt.logs?.[3])`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `request.requestId =
                ethers.utils.formatBytes32String('DOESNOTEXIST')`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `await operator
                .connect(roles.oracleNode)
                .fulfillOracleRequest2(
                  ...convertFulfill2Params(
                    request,
                    responseTypes,
                    responseValues,
                  ),
                )`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `await operator
                .connect(roles.oracleNode)
                .fulfillOracleRequest2(
                  ...convertFulfill2Params(
                    request,
                    responseTypes,
                    responseValues,
                  ),
                )`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `await evmRevert(
                operator
                  .connect(roles.oracleNode)
                  .fulfillOracleRequest2(
                    ...convertFulfill2Params(
                      request,
                      responseTypes,
                      response2Values,
                    ),
                  ),
              )`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `await evmRevert(
                operator.connect(roles.oracleNode).fulfillOracleRequest2(
                  ...convertFulfill2Params(
                    request,
                    responseTypes,
                    responseValues,
                    {
                      gasLimit: 70000,
                    },
                  ),
                ),
              )`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `await operator
                .connect(roles.oracleNode)
                .fulfillOracleRequest2(
                  ...convertFulfill2Params(
                    request,
                    responseTypes,
                    responseValues,
                  ),
                )`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `bigNumEquals(balance, 0)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `await operator
                .connect(roles.defaultAccount)
                .withdraw(await roles.oracleNode.getAddress(), paymentAmount)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `await operator
                .connect(roles.oracleNode)
                .fulfillOracleRequest2(
                  ...convertFulfill2Params(
                    request,
                    responseTypes,
                    responseValues,
                  ),
                )`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `await operator
                .connect(roles.oracleNode)
                .fulfillOracleRequest2(
                  ...convertFulfill2Params(
                    request,
                    responseTypes,
                    responseValues,
                  ),
                )`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `bigNumEquals(balance, 0)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `await operator
                .connect(roles.defaultAccount)
                .withdraw(await roles.oracleNode.getAddress(), paymentAmount)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `await operator
                .connect(roles.oracleNode)
                .fulfillOracleRequest2(
                  ...convertFulfill2Params(
                    request,
                    responseTypes,
                    responseValues,
                  ),
                )`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `bigNumEquals(mockBalance, 0)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `bigNumEquals(balance, 0)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `await operator
                .connect(roles.defaultAccount)
                .withdraw(await roles.oracleNode.getAddress(), paymentAmount)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `await operator
                .connect(roles.oracleNode)
                .fulfillOracleRequest2(
                  ...convertFulfill2Params(
                    request,
                    responseTypes,
                    responseValues,
                  ),
                )`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `request = decodeRunRequest(receipt.logs?.[3])`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `await operator
                .connect(roles.oracleNode)
                .fulfillOracleRequest2(
                  ...convertFulfill2Params(
                    request,
                    responseTypes,
                    responseValues,
                  ),
                )`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `request = decodeRunRequest(receipt.logs?.[3])`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `await operator
                .connect(roles.oracleNode)
                .fulfillOracleRequest2(
                  ...convertFulfill2Params(
                    request,
                    responseTypes,
                    responseValues,
                  ),
                )`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `request = decodeRunRequest(receipt.logs?.[3])`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `await operator
                .connect(roles.oracleNode)
                .fulfillOracleRequest2(
                  ...convertFulfill2Params(
                    request,
                    responseTypes,
                    responseValues,
                  ),
                )`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `request.requestId =
                ethers.utils.formatBytes32String('DOESNOTEXIST')`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `await operator
                .connect(roles.oracleNode)
                .fulfillOracleRequest2(
                  ...convertFulfill2Params(
                    request,
                    responseTypes,
                    responseValues,
                  ),
                )`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `await operator
                .connect(roles.oracleNode)
                .fulfillOracleRequest2(
                  ...convertFulfill2Params(
                    request,
                    responseTypes,
                    responseValues,
                  ),
                )`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `await evmRevert(
                operator
                  .connect(roles.oracleNode)
                  .fulfillOracleRequest2(
                    ...convertFulfill2Params(
                      request,
                      responseTypes,
                      repeatedResponseValues,
                    ),
                  ),
              )`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `await evmRevert(
                operator.connect(roles.oracleNode).fulfillOracleRequest2(
                  ...convertFulfill2Params(
                    request,
                    responseTypes,
                    responseValues,
                    {
                      gasLimit: 70000,
                    },
                  ),
                ),
              )`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `await operator
                .connect(roles.oracleNode)
                .fulfillOracleRequest2(
                  ...convertFulfill2Params(
                    request,
                    responseTypes,
                    responseValues,
                  ),
                )`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `bigNumEquals(balance, 0)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `await operator
                .connect(roles.defaultAccount)
                .withdraw(await roles.oracleNode.getAddress(), paymentAmount)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `await operator
                .connect(roles.oracleNode)
                .fulfillOracleRequest2(
                  ...convertFulfill2Params(
                    request,
                    responseTypes,
                    responseValues,
                  ),
                )`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `await operator
                .connect(roles.oracleNode)
                .fulfillOracleRequest2(
                  ...convertFulfill2Params(
                    request,
                    responseTypes,
                    responseValues,
                  ),
                )`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `bigNumEquals(balance, 0)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `await operator
                .connect(roles.defaultAccount)
                .withdraw(await roles.oracleNode.getAddress(), paymentAmount)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `await operator
                .connect(roles.oracleNode)
                .fulfillOracleRequest2(
                  ...convertFulfill2Params(
                    request,
                    responseTypes,
                    responseValues,
                  ),
                )`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `bigNumEquals(mockBalance, 0)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `bigNumEquals(balance, 0)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `await operator
                .connect(roles.defaultAccount)
                .withdraw(await roles.oracleNode.getAddress(), paymentAmount)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `await operator
                .connect(roles.oracleNode)
                .fulfillOracleRequest2(
                  ...convertFulfill2Params(
                    request,
                    responseTypes,
                    responseValues,
                  ),
                )`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `request = decodeRunRequest(receipt.logs?.[3])`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `await operator
                .connect(roles.oracleNode)
                .fulfillOracleRequest2(
                  ...convertFulfill2Params(
                    request,
                    responseTypes,
                    responseValues,
                  ),
                )`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `request = decodeRunRequest(receipt.logs?.[3])`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `await operator
                .connect(roles.oracleNode)
                .fulfillOracleRequest2(
                  ...convertFulfill2Params(
                    request,
                    responseTypes,
                    responseValues,
                  ),
                )`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `request = decodeRunRequest(receipt.logs?.[3])`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `await operator
                .connect(roles.oracleNode)
                .fulfillOracleRequest2(
                  ...convertFulfill2Params(
                    request,
                    responseTypes,
                    responseValues,
                  ),
                )`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `await link.transfer(basicConsumer.address, paymentAmount)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `fulfillParams[5] = '0x'`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `await evmRevert(
          operator
            .connect(roles.defaultAccount)
            .withdraw(await roles.oracleNode.getAddress(), toWei('1')),
        )`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `balance = await link.balanceOf(await roles.oracleNode.getAddress())`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `await operator
            .connect(roles.defaultAccount)
            .withdraw(await roles.defaultAccount.getAddress(), paid)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `bigNumEquals(operatorDifference, paid)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `await evmRevert(
            operator
              .connect(roles.defaultAccount)
              .withdraw(await roles.oracleNode.getAddress(), payment),
          )`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `await operator
              .connect(roles.defaultAccount)
              .withdraw(await roles.defaultAccount.getAddress(), paid)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `bigNumEquals(operatorDifference, paid)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `await evmRevert(
            operator
              .connect(roles.defaultAccount)
              .withdraw(await roles.stranger.getAddress(), withdrawalAmount),
          )`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `await operator
            .connect(roles.defaultAccount)
            .withdraw(await roles.stranger.getAddress(), partialAmount)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `await operator
            .connect(roles.defaultAccount)
            .withdraw(await roles.stranger.getAddress(), payment)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `await evmRevert(
            operator
              .connect(roles.stranger)
              .withdraw(await roles.stranger.getAddress(), payment),
          )`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `await operator
              .connect(roles.defaultAccount)
              .withdraw(await roles.defaultAccount.getAddress(), paid)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `bigNumEquals(operatorDifference, paid)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `await link.transfer(operator.address, startingBalance)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `bigNumEquals(
            requesterBalanceBefore.sub(requesterBalanceAfter),
            payment,
          )`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `await increaseTime5Minutes(ethers.provider)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `await increaseTime5Minutes(ethers.provider)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `await operator
            .connect(roles.consumer)
            .cancelOracleRequestByRequester(
              ...convertCancelByRequesterParams(request, nonce),
            )`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `await increaseTime5Minutes(ethers.provider)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `await increaseTime5Minutes(ethers.provider)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `await operator
            .connect(roles.consumer)
            .cancelOracleRequestByRequester(
              ...convertCancelByRequesterParams(request, nonce),
            )`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `await increaseTime5Minutes(ethers.provider)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `bigNumEquals(request.payment, oracleBalance)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `await increaseTime5Minutes(ethers.provider)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `await operator
            .connect(roles.consumer)
            .cancelOracleRequest(...convertCancelParams(request))`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `await increaseTime5Minutes(ethers.provider)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `await increaseTime5Minutes(ethers.provider)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `await operator
            .connect(roles.consumer)
            .cancelOracleRequest(...convertCancelParams(request))`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `await tx.wait()`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.typeAndVersion()`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.connect(owner)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.transferOwnableContracts([forwarder1.address], operator.address)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.connect(owner)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.transferOwnableContracts(
            [forwarder1.address, forwarder2.address],
            await roles.oracleNode1.getAddress(),
          )`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.oracleNode1.getAddress()`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.wait()`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.oracleNode1.getAddress()`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.connect(roles.stranger)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.transferOwnableContracts(
              [forwarder1.address],
              await roles.oracleNode2.getAddress(),
            )`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.oracleNode2.getAddress()`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.owner()`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.connect(roles.defaultAccount)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.setAuthorizedSenders([await roles.oracleNode1.getAddress()])`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.oracleNode1.getAddress()`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.connect(roles.oracleNode1)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.connect(roles.stranger)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.acceptOwnableContracts([await roles.oracleNode2.getAddress()])`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.oracleNode2.getAddress()`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.connect(roles.defaultAccount)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.distributeFunds([], [])`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.oracleNode2.getAddress()`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.oracleNode3.getAddress()`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.connect(roles.defaultAccount)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.distributeFunds(receivers, amounts)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.connect(roles.defaultAccount)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.distributeFunds(
              [await roles.oracleNode2.getAddress()],
              [amountToSend],
              {
                value: ethSent,
              },
            )`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.oracleNode2.getAddress()`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.oracleNode2.getBalance()`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.oracleNode3.getBalance()`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.oracleNode2.getAddress()`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.oracleNode3.getAddress()`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.connect(roles.defaultAccount)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.distributeFunds(receivers, amounts, { value: totalAmount })`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.oracleNode2.getBalance()`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.oracleNode3.getBalance()`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.sub(node3BalanceBefore)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.getAuthorizedSenders()`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.utils.defaultAbiCoder.encode(
            ['address[]', 'address'],
            [newSenders, await roles.defaultAccount.getAddress()],
          )`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.defaultAccount.getAddress()`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.connect(roles.defaultAccount)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.isAuthorizedSender(await roles.oracleNode.getAddress())`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.oracleNode.getAddress()`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.connect(roles.defaultAccount)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.setAuthorizedSenders(newSenders)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.connect(roles.defaultAccount)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.stranger.getAddress()`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.connect(roles.stranger)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.setAuthorizedSenders([await roles.stranger.getAddress()])`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.stranger.getAddress()`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.connect(roles.stranger)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.setAuthorizedSendersOn(newSenders, [forwarder1.address])`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.connect(roles.defaultAccount)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.connect(roles.oracleNode1)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.connect(roles.oracleNode1)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.connect(roles.oracleNode1)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.setAuthorizedSendersOn(targets, newSenders)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.wait()`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.utils.defaultAbiCoder.encode(
          ['address[]', 'address[]', 'address'],
          [targets, newSenders, await roles.oracleNode1.getAddress()],
        )`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.oracleNode1.getAddress()`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.connect(roles.oracleNode1)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.setAuthorizedSendersOn(
            [forwarder1.address, forwarder2.address],
            newSenders,
          )`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.wait()`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.utils.defaultAbiCoder.encode(
          ['address[]', 'address'],
          [newSenders, operator.address],
        )`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.owner()`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.utils.defaultAbiCoder.encode(
          ['address[]', 'address'],
          [newSenders, operator2.address],
        )`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.connect(roles.stranger)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.acceptAuthorizedReceivers(
              [forwarder1.address, forwarder2.address],
              newSenders,
            )`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.onTokenTransfer(
            await roles.defaultAccount.getAddress(),
            0,
            callData,
          )`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.defaultAccount.getAddress()`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.transferAndCall(operator.address, 0, callData, {
          value: 0,
        })`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.wait()`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.transferAndCall(operator.address, 0, '0x', {
              value: 0,
            })`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.balanceOf(operator.address)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.balanceOf(mock.address)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.maliciousWithdraw()`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.balanceOf(operator.address)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.balanceOf(mock.address)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.maliciousTargetConsumer(to)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.wait()`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.connect(roles.defaultAccount)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.deploy(link.address, operator.address, specId)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.transfer(requester.address, paymentAmount)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.maliciousTargetConsumer(requester.address)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.interface.getSighash('onTokenTransfer')`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.slice(2)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.transferAndCall(operator.address, 0, maliciousPayload, {
          value: 0,
        })`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.transferAndCall(operator.address, paid, args2)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.interface.getSighash('oracleRequest')`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.transferAndCall(operator.address, paid, maliciousData)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.transferAndCall(operator.address, paid, args)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.connect(roles.oracleNode)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.oracleRequest(
              '0x0000000000000000000000000000000000000000',
              0,
              specId,
              to,
              fHash,
              1,
              1,
              '0x',
            )`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.transferAndCall(operator.address, paid, args2)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.transferAndCall(operator.address, paid, args)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.connect(roles.oracleNode)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.oracleRequest(
              '0x0000000000000000000000000000000000000000',
              0,
              specId,
              to,
              fHash,
              1,
              1,
              '0x',
            )`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.connect(roles.oracleNode)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.fulfillOracleRequest(...fulfillParams)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.wait()`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.connect(roles.stranger)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.fulfillOracleRequest(...convertFufillParams(request, response))`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.connect(roles.stranger)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.fulfillOracleRequest(...convertFufillParams(request, response))`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.utils.formatBytes32String('DOESNOTEXIST')`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.connect(roles.oracleNode)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.fulfillOracleRequest(...convertFufillParams(request, response))`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.connect(roles.oracleNode)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.fulfillOracleRequest(...convertFufillParams(request, response))`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.getCurrentPrice()`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.utils.parseBytes32String(currentValue)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.connect(roles.oracleNode)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.fulfillOracleRequest(...fulfillParams)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.wait()`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.connect(roles.oracleNode)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.fulfillOracleRequest(...convertFufillParams(request, response))`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.connect(roles.oracleNode)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.fulfillOracleRequest(...convertFufillParams(request, response2))`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.getCurrentPrice()`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.utils.parseBytes32String(currentValue)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.connect(roles.oracleNode)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.fulfillOracleRequest(
              ...convertFufillParams(request, response, {
                gasLimit: 70000,
              }),
            )`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.withdrawable()`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.maliciousRequestCancel(
            specId,
            ethers.utils.toUtf8Bytes('doesNothing(bytes32,bytes32)'),
          )`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.utils.toUtf8Bytes('doesNothing(bytes32,bytes32)')`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.maliciousPrice(specId)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.wait()`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.eq(req.payment)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.connect(roles.oracleNode)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.fulfillOracleRequest(...convertFufillParams(request, response))`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.balanceOf(
            await roles.oracleNode.getAddress(),
          )`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.oracleNode.getAddress()`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.connect(roles.defaultAccount)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.withdraw(await roles.oracleNode.getAddress(), paymentAmount)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.oracleNode.getAddress()`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.balanceOf(
            await roles.oracleNode.getAddress(),
          )`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.oracleNode.getAddress()`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.connect(roles.oracleNode)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.fulfillOracleRequest(...convertFufillParams(request, response))`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.connect(roles.oracleNode)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.fulfillOracleRequest(...convertFufillParams(request, response2))`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.connect(roles.oracleNode)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.fulfillOracleRequest(...convertFufillParams(request, response))`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.balanceOf(
            await roles.oracleNode.getAddress(),
          )`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.oracleNode.getAddress()`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.connect(roles.defaultAccount)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.withdraw(await roles.oracleNode.getAddress(), paymentAmount)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.oracleNode.getAddress()`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.balanceOf(
            await roles.oracleNode.getAddress(),
          )`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.oracleNode.getAddress()`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.connect(roles.oracleNode)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.fulfillOracleRequest(...convertFufillParams(request, response))`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.balanceOf(maliciousConsumer.address)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.balanceOf(
            await roles.oracleNode.getAddress(),
          )`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.oracleNode.getAddress()`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.connect(roles.defaultAccount)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.withdraw(await roles.oracleNode.getAddress(), paymentAmount)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.oracleNode.getAddress()`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.balanceOf(
            await roles.oracleNode.getAddress(),
          )`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.oracleNode.getAddress()`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.connect(roles.oracleNode)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.fulfillOracleRequest(...convertFufillParams(request, response))`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.connect(roles.oracleNode)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.fulfillOracleRequest(...convertFufillParams(request, response2))`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.requestData(
            specId,
            ethers.utils.toUtf8Bytes('stealEthCall(bytes32,bytes32)'),
          )`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.utils.toUtf8Bytes('stealEthCall(bytes32,bytes32)')`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.wait()`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.connect(roles.oracleNode)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.fulfillOracleRequest(...convertFufillParams(request, response))`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.provider.getBalance(maliciousConsumer.address)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.requestData(
            specId,
            ethers.utils.toUtf8Bytes('stealEthSend(bytes32,bytes32)'),
          )`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.utils.toUtf8Bytes('stealEthSend(bytes32,bytes32)')`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.wait()`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.connect(roles.oracleNode)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.fulfillOracleRequest(...convertFufillParams(request, response))`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.provider.getBalance(maliciousConsumer.address)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.requestData(
            specId,
            ethers.utils.toUtf8Bytes('stealEthTransfer(bytes32,bytes32)'),
          )`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.utils.toUtf8Bytes('stealEthTransfer(bytes32,bytes32)')`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.wait()`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.connect(roles.oracleNode)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.fulfillOracleRequest(...convertFufillParams(request, response))`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.provider.getBalance(maliciousConsumer.address)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.requestData(
            specId,
            ethers.utils.toUtf8Bytes('whatever(bytes32,bytes32)'),
          )`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.utils.toUtf8Bytes('whatever(bytes32,bytes32)')`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.wait()`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.connect(roles.defaultAccount)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.acceptOwnableContracts([forwarder1.address])`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.connect(roles.oracleNode)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.fulfillOracleRequest(...responseParams)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.connect(roles.defaultAccount)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.transferOwnableContracts([forwarder1.address], link.address)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.connect(roles.oracleNode)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.fulfillOracleRequest(...responseParams)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.connect(roles.oracleNode)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.fulfillOracleRequest2(...fulfillParams)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.wait()`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.connect(roles.stranger)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.fulfillOracleRequest2(
                  ...convertFulfill2Params(
                    request,
                    responseTypes,
                    responseValues,
                  ),
                )`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.utils.formatBytes32String('DOESNOTEXIST')`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.connect(roles.oracleNode)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.fulfillOracleRequest2(
                  ...convertFulfill2Params(
                    request,
                    responseTypes,
                    responseValues,
                  ),
                )`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.connect(roles.oracleNode)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.fulfillOracleRequest2(
                ...convertFulfill2Params(
                  request,
                  responseTypes,
                  responseValues,
                ),
              )`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.getCurrentPrice()`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.utils.parseBytes32String(currentValue)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.connect(roles.oracleNode)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.fulfillOracleRequest2(...fulfillParams)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.wait()`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.connect(roles.oracleNode)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.fulfillOracleRequest2(
                ...convertFulfill2Params(
                  request,
                  responseTypes,
                  responseValues,
                ),
              )`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.connect(roles.oracleNode)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.fulfillOracleRequest2(
                  ...convertFulfill2Params(
                    request,
                    responseTypes,
                    response2Values,
                  ),
                )`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.getCurrentPrice()`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.utils.parseBytes32String(currentValue)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.connect(roles.oracleNode)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.fulfillOracleRequest2(
                ...convertFulfill2Params(
                  request,
                  responseTypes,
                  responseValues,
                  {
                    gasLimit: 70000,
                  },
                ),
              )`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.withdrawable()`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.requestId.slice(2)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.requestId.slice(2)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.requestId.slice(2)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.payment.slice(2)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.padStart(64, '0')`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.callbackAddr.slice(2)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.padStart(64, '0')`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.callbackFunc.slice(2)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.padEnd(64, '0')`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.expiration.slice(2)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.padStart(64, '0')`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.connect(roles.oracleNode)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.signer.sendTransaction({
              to: operator.address,
              data,
            })`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.maliciousRequestCancel(
              specId,
              ethers.utils.toUtf8Bytes('doesNothing(bytes32,bytes32)'),
            )`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.utils.toUtf8Bytes('doesNothing(bytes32,bytes32)')`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.maliciousPrice(specId)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.wait()`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.eq(req.payment)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.connect(roles.oracleNode)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.fulfillOracleRequest2(
                ...convertFulfill2Params(
                  request,
                  responseTypes,
                  responseValues,
                ),
              )`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.balanceOf(
              await roles.oracleNode.getAddress(),
            )`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.oracleNode.getAddress()`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.connect(roles.defaultAccount)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.withdraw(await roles.oracleNode.getAddress(), paymentAmount)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.oracleNode.getAddress()`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.balanceOf(
              await roles.oracleNode.getAddress(),
            )`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.oracleNode.getAddress()`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.connect(roles.oracleNode)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.fulfillOracleRequest2(
                ...convertFulfill2Params(
                  request,
                  responseTypes,
                  responseValues,
                ),
              )`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.connect(roles.oracleNode)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.fulfillOracleRequest2(
                  ...convertFulfill2Params(
                    request,
                    responseTypes,
                    response2Values,
                  ),
                )`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.connect(roles.oracleNode)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.fulfillOracleRequest2(
                ...convertFulfill2Params(
                  request,
                  responseTypes,
                  responseValues,
                ),
              )`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.balanceOf(
              await roles.oracleNode.getAddress(),
            )`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.oracleNode.getAddress()`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.connect(roles.defaultAccount)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.withdraw(await roles.oracleNode.getAddress(), paymentAmount)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.oracleNode.getAddress()`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.balanceOf(
              await roles.oracleNode.getAddress(),
            )`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.oracleNode.getAddress()`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.connect(roles.oracleNode)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.fulfillOracleRequest2(
                ...convertFulfill2Params(
                  request,
                  responseTypes,
                  responseValues,
                ),
              )`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.balanceOf(maliciousConsumer.address)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.balanceOf(
              await roles.oracleNode.getAddress(),
            )`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.oracleNode.getAddress()`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.connect(roles.defaultAccount)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.withdraw(await roles.oracleNode.getAddress(), paymentAmount)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.oracleNode.getAddress()`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.balanceOf(
              await roles.oracleNode.getAddress(),
            )`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.oracleNode.getAddress()`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.connect(roles.oracleNode)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.fulfillOracleRequest2(
                ...convertFulfill2Params(
                  request,
                  responseTypes,
                  responseValues,
                ),
              )`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.connect(roles.oracleNode)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.fulfillOracleRequest2(
                  ...convertFulfill2Params(
                    request,
                    responseTypes,
                    response2Values,
                  ),
                )`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.requestData(
              specId,
              ethers.utils.toUtf8Bytes('stealEthCall(bytes32,bytes32)'),
            )`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.utils.toUtf8Bytes('stealEthCall(bytes32,bytes32)')`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.wait()`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.connect(roles.oracleNode)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.fulfillOracleRequest2(
                ...convertFulfill2Params(
                  request,
                  responseTypes,
                  responseValues,
                ),
              )`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.provider.getBalance(maliciousConsumer.address)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.requestData(
              specId,
              ethers.utils.toUtf8Bytes('stealEthSend(bytes32,bytes32)'),
            )`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.utils.toUtf8Bytes('stealEthSend(bytes32,bytes32)')`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.wait()`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.connect(roles.oracleNode)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.fulfillOracleRequest2(
                ...convertFulfill2Params(
                  request,
                  responseTypes,
                  responseValues,
                ),
              )`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.provider.getBalance(maliciousConsumer.address)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.requestData(
              specId,
              ethers.utils.toUtf8Bytes('stealEthTransfer(bytes32,bytes32)'),
            )`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.utils.toUtf8Bytes('stealEthTransfer(bytes32,bytes32)')`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.wait()`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.connect(roles.oracleNode)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.fulfillOracleRequest2(
                ...convertFulfill2Params(
                  request,
                  responseTypes,
                  responseValues,
                ),
              )`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.provider.getBalance(maliciousConsumer.address)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.requestData(
              specId,
              ethers.utils.toUtf8Bytes('whatever(bytes32,bytes32)'),
            )`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.utils.toUtf8Bytes('whatever(bytes32,bytes32)')`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.wait()`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.connect(roles.defaultAccount)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.acceptOwnableContracts([forwarder1.address])`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.connect(roles.oracleNode)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.fulfillOracleRequest2(...responseParams)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.connect(roles.defaultAccount)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.transferOwnableContracts([forwarder1.address], link.address)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.connect(roles.oracleNode)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.fulfillOracleRequest(...responseParams)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.connect(roles.oracleNode)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.fulfillOracleRequest2(...fulfillParams)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.wait()`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.publicGetNextRequestCount()`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.requestEthereumPrice('USD', 0)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.wait()`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.utils.solidityPack(
              ['address', 'uint256'],
              [multiConsumer.address, nonce],
            )`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.utils.keccak256(packed)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.connect(roles.stranger)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.fulfillOracleRequest2(
                    ...convertFulfill2Params(
                      request,
                      responseTypes,
                      responseValues,
                    ),
                  )`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.utils.formatBytes32String('DOESNOTEXIST')`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.connect(roles.oracleNode)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.fulfillOracleRequest2(
                    ...convertFulfill2Params(
                      request,
                      responseTypes,
                      responseValues,
                    ),
                  )`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.connect(roles.oracleNode)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.fulfillOracleRequest2(
                  ...convertFulfill2Params(
                    request,
                    responseTypes,
                    responseValues,
                  ),
                )`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.getCurrentPrice()`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.utils.toUtf8String(currentValue)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.connect(roles.oracleNode)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.fulfillOracleRequest2(...fulfillParams)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.wait()`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.connect(roles.oracleNode)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.fulfillOracleRequest2(
                  ...convertFulfill2Params(
                    request,
                    responseTypes,
                    responseValues,
                  ),
                )`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.connect(roles.oracleNode)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.fulfillOracleRequest2(
                    ...convertFulfill2Params(
                      request,
                      responseTypes,
                      response2Values,
                    ),
                  )`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.getCurrentPrice()`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.utils.toUtf8String(currentValue)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.connect(roles.oracleNode)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.fulfillOracleRequest2(
                  ...convertFulfill2Params(
                    request,
                    responseTypes,
                    responseValues,
                    {
                      gasLimit: 70000,
                    },
                  ),
                )`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.withdrawable()`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.maliciousRequestCancel(
                specId,
                ethers.utils.toUtf8Bytes('doesNothing(bytes32,bytes32)'),
              )`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.utils.toUtf8Bytes('doesNothing(bytes32,bytes32)')`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.maliciousPrice(specId)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.wait()`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.eq(req.payment)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.connect(roles.oracleNode)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.fulfillOracleRequest2(
                  ...convertFulfill2Params(
                    request,
                    responseTypes,
                    responseValues,
                  ),
                )`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.balanceOf(
                await roles.oracleNode.getAddress(),
              )`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.oracleNode.getAddress()`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.connect(roles.defaultAccount)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.withdraw(await roles.oracleNode.getAddress(), paymentAmount)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.oracleNode.getAddress()`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.balanceOf(
                await roles.oracleNode.getAddress(),
              )`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.oracleNode.getAddress()`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.connect(roles.oracleNode)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.fulfillOracleRequest2(
                  ...convertFulfill2Params(
                    request,
                    responseTypes,
                    responseValues,
                  ),
                )`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.connect(roles.oracleNode)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.fulfillOracleRequest2(
                    ...convertFulfill2Params(
                      request,
                      responseTypes,
                      response2Values,
                    ),
                  )`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.connect(roles.oracleNode)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.fulfillOracleRequest2(
                  ...convertFulfill2Params(
                    request,
                    responseTypes,
                    responseValues,
                  ),
                )`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.balanceOf(
                await roles.oracleNode.getAddress(),
              )`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.oracleNode.getAddress()`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.connect(roles.defaultAccount)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.withdraw(await roles.oracleNode.getAddress(), paymentAmount)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.oracleNode.getAddress()`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.balanceOf(
                await roles.oracleNode.getAddress(),
              )`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.oracleNode.getAddress()`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.connect(roles.oracleNode)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.fulfillOracleRequest2(
                  ...convertFulfill2Params(
                    request,
                    responseTypes,
                    responseValues,
                  ),
                )`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.balanceOf(
                maliciousConsumer.address,
              )`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.balanceOf(
                await roles.oracleNode.getAddress(),
              )`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.oracleNode.getAddress()`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.connect(roles.defaultAccount)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.withdraw(await roles.oracleNode.getAddress(), paymentAmount)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.oracleNode.getAddress()`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.balanceOf(
                await roles.oracleNode.getAddress(),
              )`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.oracleNode.getAddress()`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.connect(roles.oracleNode)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.fulfillOracleRequest2(
                  ...convertFulfill2Params(
                    request,
                    responseTypes,
                    responseValues,
                  ),
                )`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.connect(roles.oracleNode)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.fulfillOracleRequest2(
                    ...convertFulfill2Params(
                      request,
                      responseTypes,
                      response2Values,
                    ),
                  )`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.requestData(
                specId,
                ethers.utils.toUtf8Bytes('stealEthCall(bytes32,bytes32)'),
              )`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.utils.toUtf8Bytes('stealEthCall(bytes32,bytes32)')`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.wait()`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.connect(roles.oracleNode)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.fulfillOracleRequest2(
                  ...convertFulfill2Params(
                    request,
                    responseTypes,
                    responseValues,
                  ),
                )`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.provider.getBalance(maliciousConsumer.address)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.requestData(
                specId,
                ethers.utils.toUtf8Bytes('stealEthSend(bytes32,bytes32)'),
              )`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.utils.toUtf8Bytes('stealEthSend(bytes32,bytes32)')`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.wait()`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.connect(roles.oracleNode)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.fulfillOracleRequest2(
                  ...convertFulfill2Params(
                    request,
                    responseTypes,
                    responseValues,
                  ),
                )`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.provider.getBalance(maliciousConsumer.address)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.requestData(
                specId,
                ethers.utils.toUtf8Bytes('stealEthTransfer(bytes32,bytes32)'),
              )`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.utils.toUtf8Bytes('stealEthTransfer(bytes32,bytes32)')`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.wait()`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.connect(roles.oracleNode)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.fulfillOracleRequest2(
                  ...convertFulfill2Params(
                    request,
                    responseTypes,
                    responseValues,
                  ),
                )`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.provider.getBalance(maliciousConsumer.address)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.connect(roles.oracleNode)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.fulfillOracleRequest2(...fulfillParams)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.wait()`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.connect(roles.stranger)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.fulfillOracleRequest2(
                    ...convertFulfill2Params(
                      request,
                      responseTypes,
                      responseValues,
                    ),
                  )`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.utils.formatBytes32String('DOESNOTEXIST')`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.connect(roles.oracleNode)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.fulfillOracleRequest2(
                    ...convertFulfill2Params(
                      request,
                      responseTypes,
                      responseValues,
                    ),
                  )`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.connect(roles.oracleNode)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.fulfillOracleRequest2(
                  ...convertFulfill2Params(
                    request,
                    responseTypes,
                    responseValues,
                  ),
                )`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.usd()`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.eur()`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.jpy()`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.utils.parseBytes32String(thirdValue)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.connect(roles.oracleNode)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.fulfillOracleRequest2(...fulfillParams)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.wait()`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.connect(roles.oracleNode)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.fulfillOracleRequest2(
                  ...convertFulfill2Params(
                    request,
                    responseTypes,
                    responseValues,
                  ),
                )`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.connect(roles.oracleNode)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.fulfillOracleRequest2(
                    ...convertFulfill2Params(
                      request,
                      responseTypes,
                      repeatedResponseValues,
                    ),
                  )`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.usd()`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.eur()`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.jpy()`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.utils.parseBytes32String(thirdValue)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.connect(roles.oracleNode)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.fulfillOracleRequest2(
                  ...convertFulfill2Params(
                    request,
                    responseTypes,
                    responseValues,
                    {
                      gasLimit: 70000,
                    },
                  ),
                )`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.withdrawable()`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.maliciousRequestCancel(
                specId,
                ethers.utils.toUtf8Bytes('doesNothing(bytes32,bytes32)'),
              )`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.utils.toUtf8Bytes('doesNothing(bytes32,bytes32)')`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.maliciousPrice(specId)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.wait()`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.eq(req.payment)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.connect(roles.oracleNode)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.fulfillOracleRequest2(
                  ...convertFulfill2Params(
                    request,
                    responseTypes,
                    responseValues,
                  ),
                )`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.balanceOf(
                await roles.oracleNode.getAddress(),
              )`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.oracleNode.getAddress()`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.connect(roles.defaultAccount)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.withdraw(await roles.oracleNode.getAddress(), paymentAmount)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.oracleNode.getAddress()`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.balanceOf(
                await roles.oracleNode.getAddress(),
              )`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.oracleNode.getAddress()`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.connect(roles.oracleNode)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.fulfillOracleRequest2(
                  ...convertFulfill2Params(
                    request,
                    responseTypes,
                    responseValues,
                  ),
                )`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.connect(roles.oracleNode)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.fulfillOracleRequest2(
                    ...convertFulfill2Params(
                      request,
                      responseTypes,
                      repeatedResponseValues,
                    ),
                  )`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.connect(roles.oracleNode)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.fulfillOracleRequest2(
                  ...convertFulfill2Params(
                    request,
                    responseTypes,
                    responseValues,
                  ),
                )`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.balanceOf(
                await roles.oracleNode.getAddress(),
              )`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.oracleNode.getAddress()`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.connect(roles.defaultAccount)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.withdraw(await roles.oracleNode.getAddress(), paymentAmount)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.oracleNode.getAddress()`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.balanceOf(
                await roles.oracleNode.getAddress(),
              )`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.oracleNode.getAddress()`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.connect(roles.oracleNode)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.fulfillOracleRequest2(
                  ...convertFulfill2Params(
                    request,
                    responseTypes,
                    responseValues,
                  ),
                )`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.balanceOf(
                maliciousConsumer.address,
              )`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.balanceOf(
                await roles.oracleNode.getAddress(),
              )`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.oracleNode.getAddress()`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.connect(roles.defaultAccount)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.withdraw(await roles.oracleNode.getAddress(), paymentAmount)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.oracleNode.getAddress()`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.balanceOf(
                await roles.oracleNode.getAddress(),
              )`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.oracleNode.getAddress()`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.connect(roles.oracleNode)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.fulfillOracleRequest2(
                  ...convertFulfill2Params(
                    request,
                    responseTypes,
                    responseValues,
                  ),
                )`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.connect(roles.oracleNode)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.fulfillOracleRequest2(
                    ...convertFulfill2Params(
                      request,
                      responseTypes,
                      repeatedResponseValues,
                    ),
                  )`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.requestData(
                specId,
                ethers.utils.toUtf8Bytes('stealEthCall(bytes32,bytes32)'),
              )`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.utils.toUtf8Bytes('stealEthCall(bytes32,bytes32)')`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.wait()`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.connect(roles.oracleNode)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.fulfillOracleRequest2(
                  ...convertFulfill2Params(
                    request,
                    responseTypes,
                    responseValues,
                  ),
                )`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.provider.getBalance(maliciousConsumer.address)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.requestData(
                specId,
                ethers.utils.toUtf8Bytes('stealEthSend(bytes32,bytes32)'),
              )`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.utils.toUtf8Bytes('stealEthSend(bytes32,bytes32)')`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.wait()`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.connect(roles.oracleNode)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.fulfillOracleRequest2(
                  ...convertFulfill2Params(
                    request,
                    responseTypes,
                    responseValues,
                  ),
                )`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.provider.getBalance(maliciousConsumer.address)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.requestData(
                specId,
                ethers.utils.toUtf8Bytes('stealEthTransfer(bytes32,bytes32)'),
              )`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.utils.toUtf8Bytes('stealEthTransfer(bytes32,bytes32)')`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.wait()`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.connect(roles.oracleNode)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.fulfillOracleRequest2(
                  ...convertFulfill2Params(
                    request,
                    responseTypes,
                    responseValues,
                  ),
                )`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.provider.getBalance(maliciousConsumer.address)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.connect(roles.defaultAccount)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.deploy(link.address, operator.address, specId)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.transfer(basicConsumer.address, paymentAmount)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.requestEthereumPrice(
          'USD',
          paymentAmount,
        )`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.wait()`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.connect(roles.oracleNode)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.fulfillOracleRequest2(...fulfillParams)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.balanceOf(await roles.oracleNode.getAddress())`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.oracleNode.getAddress()`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.connect(roles.defaultAccount)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.withdraw(await roles.oracleNode.getAddress(), toWei('1'))`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.oracleNode.getAddress()`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.balanceOf(await roles.oracleNode.getAddress())`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.oracleNode.getAddress()`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.balanceOf(operator.address)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.balanceOf(
            await roles.defaultAccount.getAddress(),
          )`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.defaultAccount.getAddress()`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.connect(roles.defaultAccount)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.withdraw(await roles.defaultAccount.getAddress(), paid)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.defaultAccount.getAddress()`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.balanceOf(operator.address)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.balanceOf(
            await roles.defaultAccount.getAddress(),
          )`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.defaultAccount.getAddress()`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.sub(accountBalanceBefore)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.sub(operatorBalanceAfter)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.connect(roles.defaultAccount)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.withdraw(await roles.oracleNode.getAddress(), payment)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.oracleNode.getAddress()`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.balanceOf(
            await roles.oracleNode.getAddress(),
          )`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.oracleNode.getAddress()`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.balanceOf(operator.address)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.balanceOf(
              await roles.defaultAccount.getAddress(),
            )`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.defaultAccount.getAddress()`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.connect(roles.defaultAccount)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.withdraw(await roles.defaultAccount.getAddress(), paid)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.defaultAccount.getAddress()`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.balanceOf(operator.address)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.balanceOf(
              await roles.defaultAccount.getAddress(),
            )`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.defaultAccount.getAddress()`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.sub(accountBalanceBefore)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.sub(operatorBalanceAfter)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.balanceOf(operator.address)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.balanceOf(
            await roles.stranger.getAddress(),
          )`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.stranger.getAddress()`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.connect(roles.defaultAccount)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.withdraw(await roles.stranger.getAddress(), withdrawalAmount)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.stranger.getAddress()`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.balanceOf(operator.address)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.balanceOf(
            await roles.stranger.getAddress(),
          )`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.stranger.getAddress()`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.connect(roles.defaultAccount)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.withdraw(await roles.stranger.getAddress(), partialAmount)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.stranger.getAddress()`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.balanceOf(
            await roles.stranger.getAddress(),
          )`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.stranger.getAddress()`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.balanceOf(operator.address)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.connect(roles.defaultAccount)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.withdraw(await roles.stranger.getAddress(), payment)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.stranger.getAddress()`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.balanceOf(
            await roles.stranger.getAddress(),
          )`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.stranger.getAddress()`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.connect(roles.stranger)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.withdraw(await roles.stranger.getAddress(), payment)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.stranger.getAddress()`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.balanceOf(
            await roles.stranger.getAddress(),
          )`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.stranger.getAddress()`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.constants.Zero.eq(balance)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.balanceOf(operator.address)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.balanceOf(
              await roles.defaultAccount.getAddress(),
            )`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.defaultAccount.getAddress()`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.connect(roles.defaultAccount)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.withdraw(await roles.defaultAccount.getAddress(), paid)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.defaultAccount.getAddress()`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.balanceOf(operator.address)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.balanceOf(
              await roles.defaultAccount.getAddress(),
            )`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.defaultAccount.getAddress()`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.sub(accountBalanceBefore)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.sub(operatorBalanceAfter)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.withdrawable()`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.withdrawable()`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.add(paid)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.transfer(operator.address, startingBalance)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.connect(roles.stranger)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.ownerTransferAndCall(to, payment, args)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.connect(roles.defaultAccount)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.ownerTransferAndCall(to, tooMuch, args)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.interface.parseLog({
            data: transferLog.data,
            topics: transferLog.topics,
          })`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.sub(requesterBalanceAfter)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.sub(receiverBalanceBefore)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.utils.formatBytes32String('1337')`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.interface.getSighash('requestedBytes32')`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.from('')`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.connect(roles.stranger)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.cancelOracleRequestByRequester(
              ...convertCancelByRequesterParams(fakeRequest, nonce),
            )`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.connect(roles.consumer)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.cancelOracleRequestByRequester(
                ...convertCancelByRequesterParams(request, nonce),
              )`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.connect(roles.consumer)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.cancelOracleRequestByRequester(
              ...convertCancelByRequesterParams(request, nonce),
            )`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.balanceOf(
            await roles.consumer.getAddress(),
          )`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.consumer.getAddress()`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.connect(roles.consumer)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.cancelOracleRequestByRequester(
              ...convertCancelByRequesterParams(request, nonce),
            )`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.wait()`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.connect(roles.consumer)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.cancelOracleRequestByRequester(
              ...convertCancelByRequesterParams(request, nonce),
            )`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.connect(roles.consumer)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.cancelOracleRequestByRequester(...convertCancelParams(request))`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.utils.formatBytes32String('1337')`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.interface.getSighash('requestedBytes32')`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.from('')`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.connect(roles.stranger)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.cancelOracleRequest(...convertCancelParams(fakeRequest))`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.balanceOf(operator.address)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.balanceOf(
          await roles.consumer.getAddress(),
        )`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.consumer.getAddress()`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.connect(roles.consumer)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.cancelOracleRequest(...convertCancelParams(request))`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.connect(roles.consumer)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.cancelOracleRequest(...convertCancelParams(request))`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.balanceOf(
            await roles.consumer.getAddress(),
          )`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.consumer.getAddress()`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.connect(roles.consumer)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.cancelOracleRequest(...convertCancelParams(request))`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.wait()`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.connect(roles.consumer)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.cancelOracleRequest(...convertCancelParams(request))`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.connect(roles.consumer)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.cancelOracleRequest(...convertCancelParams(request))`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.connect(roles.stranger)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.ownerForward(mock.address, payload)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.interface.getSighash('name')`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.connect(roles.defaultAccount)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.ownerForward(link.address, sighash)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.connect(roles.defaultAccount)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.ownerForward(mock.address, payload)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.wait()`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.getBytes()`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.connect(roles.defaultAccount)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.ownerForward(zeroAddress, payload)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.connect(roles.defaultAccount)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.ownerForward(mock.address, payload)`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.wait()`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.interface.decodeEventLog(
            mock.interface.getEvent('SetBytes'),
            log.data,
            log.topics,
          )`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.interface.getEvent('SetBytes')`
$DIR/contracts/test/v0.8/operatorforwarder/Operator.test.ts: `.utils.getAddress(logData.from)`
$DIR/contracts/test/v0.8/operatorforwarder/OperatorFactory.test.ts: `operator = await operatorFactory
        .connect(roles.defaultAccount)
        .attach(emittedOperator)`
$DIR/contracts/test/v0.8/operatorforwarder/OperatorFactory.test.ts: `operator = await operatorFactory
        .connect(roles.defaultAccount)
        .attach(receipt?.events?.[0]?.args?.[0])`
$DIR/contracts/test/v0.8/operatorforwarder/OperatorFactory.test.ts: `forwarder = await forwarderFactory
        .connect(roles.defaultAccount)
        .attach(emittedForwarder)`
$DIR/contracts/test/v0.8/operatorforwarder/OperatorFactory.test.ts: `forwarder = await forwarderFactory
        .connect(roles.defaultAccount)
        .attach(emittedForwarder)`
$DIR/contracts/test/v0.8/operatorforwarder/OperatorFactory.test.ts: `forwarder = await forwarderFactory
        .connect(roles.defaultAccount)
        .attach(emittedForwarder)`
$DIR/contracts/test/v0.8/operatorforwarder/OperatorFactory.test.ts: `.typeAndVersion()`
$DIR/contracts/test/v0.8/operatorforwarder/OperatorFactory.test.ts: `.oracleNode.getAddress()`
$DIR/contracts/test/v0.8/operatorforwarder/OperatorFactory.test.ts: `.connect(roles.defaultAccount)`
$DIR/contracts/test/v0.8/operatorforwarder/OperatorFactory.test.ts: `.attach(emittedOperator)`
$DIR/contracts/test/v0.8/operatorforwarder/OperatorFactory.test.ts: `.owner()`
$DIR/contracts/test/v0.8/operatorforwarder/OperatorFactory.test.ts: `.oracleNode.getAddress()`
$DIR/contracts/test/v0.8/operatorforwarder/OperatorFactory.test.ts: `.created(emittedOperator)`
$DIR/contracts/test/v0.8/operatorforwarder/OperatorFactory.test.ts: `.oracleNode.getAddress()`
$DIR/contracts/test/v0.8/operatorforwarder/OperatorFactory.test.ts: `.oracleNode.getAddress()`
$DIR/contracts/test/v0.8/operatorforwarder/OperatorFactory.test.ts: `.connect(roles.defaultAccount)`
$DIR/contracts/test/v0.8/operatorforwarder/OperatorFactory.test.ts: `.attach(receipt?.events?.[0]?.args?.[0])`
$DIR/contracts/test/v0.8/operatorforwarder/OperatorFactory.test.ts: `.oracleNode.getAddress()`
$DIR/contracts/test/v0.8/operatorforwarder/OperatorFactory.test.ts: `.owner()`
$DIR/contracts/test/v0.8/operatorforwarder/OperatorFactory.test.ts: `.connect(roles.defaultAccount)`
$DIR/contracts/test/v0.8/operatorforwarder/OperatorFactory.test.ts: `.attach(emittedForwarder)`
$DIR/contracts/test/v0.8/operatorforwarder/OperatorFactory.test.ts: `.owner()`
$DIR/contracts/test/v0.8/operatorforwarder/OperatorFactory.test.ts: `.created(emittedForwarder)`
$DIR/contracts/test/v0.8/operatorforwarder/OperatorFactory.test.ts: `.oracleNode.getAddress()`
$DIR/contracts/test/v0.8/operatorforwarder/OperatorFactory.test.ts: `.connect(roles.defaultAccount)`
$DIR/contracts/test/v0.8/operatorforwarder/OperatorFactory.test.ts: `.attach(emittedForwarder)`
$DIR/contracts/test/v0.8/operatorforwarder/OperatorFactory.test.ts: `.owner()`
$DIR/contracts/test/v0.8/operatorforwarder/OperatorFactory.test.ts: `.oracleNode.getAddress()`
$DIR/contracts/test/v0.8/operatorforwarder/OperatorFactory.test.ts: `.created(emittedForwarder)`
$DIR/contracts/test/v0.8/operatorforwarder/OperatorFactory.test.ts: `.oracleNode.getAddress()`
$DIR/contracts/test/v0.8/operatorforwarder/OperatorFactory.test.ts: `.connect(roles.defaultAccount)`
$DIR/contracts/test/v0.8/operatorforwarder/OperatorFactory.test.ts: `.attach(emittedForwarder)`
$DIR/contracts/test/v0.8/operatorforwarder/OperatorFactory.test.ts: `.owner()`
$DIR/contracts/test/v0.8/operatorforwarder/OperatorFactory.test.ts: `.oracleNode.getAddress()`
$DIR/contracts/test/v0.8/operatorforwarder/OperatorFactory.test.ts: `.stranger.getAddress()`
$DIR/contracts/test/v0.8/operatorforwarder/OperatorFactory.test.ts: `.utils.defaultAbiCoder.encode(
        ['bytes'],
        [message],
      )`
$DIR/contracts/test/v0.8/operatorforwarder/OperatorFactory.test.ts: `.created(emittedForwarder)`
