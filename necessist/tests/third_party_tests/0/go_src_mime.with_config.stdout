329 candidates in 56 tests in 12 source files
$DIR/src/mime/encodedword_test.go: dry running
$DIR/src/mime/encodedword_test.go: mutilating
$DIR/src/mime/encodedword_test.go: `wordLen = 0` timed-out
$DIR/src/mime/encodedword_test.go: `wordLen++` passed
$DIR/src/mime/encodedword_test.go: `i++` failed
$DIR/src/mime/encodedword_test.go: `.Repeat("é", 10)` nonbuildable
$DIR/src/mime/encodedword_test.go: `.Repeat("=C3=A9", 10)` nonbuildable
$DIR/src/mime/encodedword_test.go: `.Repeat("é", 11)` nonbuildable
$DIR/src/mime/encodedword_test.go: `.Repeat("=C3=A9", 10)` nonbuildable
$DIR/src/mime/encodedword_test.go: `.Repeat("\xe9", 22)` nonbuildable
$DIR/src/mime/encodedword_test.go: `.Repeat("=E9", 22)` nonbuildable
$DIR/src/mime/encodedword_test.go: `.Repeat("\x80", 22)` nonbuildable
$DIR/src/mime/encodedword_test.go: `.Repeat("=80", 21)` nonbuildable
$DIR/src/mime/encodedword_test.go: `.Repeat("\xe9", 45)` nonbuildable
$DIR/src/mime/encodedword_test.go: `.Repeat("6enp", 15)` nonbuildable
$DIR/src/mime/encodedword_test.go: `.Repeat("\x80", 48)` nonbuildable
$DIR/src/mime/encodedword_test.go: `.Repeat("gICA", 15)` nonbuildable
$DIR/src/mime/encodedword_test.go: `.enc.Encode(test.charset, test.src)` nonbuildable
$DIR/src/mime/encodedword_test.go: `.Repeat("à", 30)` nonbuildable
$DIR/src/mime/encodedword_test.go: `.Repeat("é", 60)` nonbuildable
$DIR/src/mime/encodedword_test.go: `.Repeat("ï", 25)` nonbuildable
$DIR/src/mime/encodedword_test.go: `.Repeat("ô", 37)` nonbuildable
$DIR/src/mime/encodedword_test.go: `.Repeat("\x80", 50)` nonbuildable
$DIR/src/mime/encodedword_test.go: `.enc.Encode("utf-8", test.src)` nonbuildable
$DIR/src/mime/encodedword_test.go: `.Decode(test.src)` nonbuildable
$DIR/src/mime/encodedword_test.go: `.DecodeHeader(test.src)` nonbuildable
$DIR/src/mime/encodedword_test.go: `.ReadAll(input)` nonbuildable
$DIR/src/mime/encodedword_test.go: `.NewReader(got)` nonbuildable
$DIR/src/mime/encodedword_test.go: `.DecodeHeader(test.src)` nonbuildable
$DIR/src/mime/encodedword_test.go: `.New("Test error")` nonbuildable
$DIR/src/mime/encodedword_test.go: `.DecodeHeader("=?charset?Q?foo?=")` nonbuildable
$DIR/src/mime/mediatype_test.go: dry running
$DIR/src/mime/mediatype_test.go: mutilating
$DIR/src/mime/mediatype_test.go: `sm[s[i]] = s[i+1]` failed
$DIR/src/mime/mediatype_test.go: `k = strings.ToLower(k)` failed
$DIR/src/mime/mediatype_test.go: `.DeepEqual(params, test.p)` nonbuildable
$DIR/src/mime/mediatype_test.go: `.ToLower(tt.typ)` nonbuildable
$DIR/src/mime/mediatype_test.go: `.ToLower(k)` nonbuildable
$DIR/src/mime/multipart/formdata_test.go: dry running
$DIR/src/mime/multipart/formdata_test.go: mutilating
$DIR/src/mime/multipart/formdata_test.go: `fd = testFile(t, f.File["fileb"][0], "fileb.txt", filebContents)` failed
$DIR/src/mime/multipart/formdata_test.go: `f.RemoveAll()` passed
$DIR/src/mime/multipart/formdata_test.go: `w.Write([]byte("value"))` passed
$DIR/src/mime/multipart/formdata_test.go: `h.Set("Content-Disposition", `form-data; name="a"`)` passed
$DIR/src/mime/multipart/formdata_test.go: `h.Set("X-Foo", strings.Repeat("a", 10<<20))` failed
$DIR/src/mime/multipart/formdata_test.go: `w.Write([]byte("value"))` passed
$DIR/src/mime/multipart/formdata_test.go: `w.Write([]byte("v"))` passed
$DIR/src/mime/multipart/formdata_test.go: `t.Run(test.name, func(t *testing.T) {
			var buf bytes.Buffer
			fw := NewWriter(&buf)
			test.f(fw)
			if err := fw.Close(); err != nil {
				t.Fatal(err)
			}
			fr := NewReader(&buf, fw.Boundary())
			_, err := fr.ReadForm(0)
			if err != ErrMessageTooLarge {
				t.Errorf("fr.ReadForm() = %v, want ErrMessageTooLarge", err)
			}
		})` passed
$DIR/src/mime/multipart/formdata_test.go: `test.f(fw)` failed
$DIR/src/mime/multipart/formdata_test.go: `t.Setenv("GODEBUG", "multipartfiles=distinct")` failed
$DIR/src/mime/multipart/formdata_test.go: `name += fmt.Sprintf("/godebug=%v", test.godebug)` passed
$DIR/src/mime/multipart/formdata_test.go: `t.Run(name, func(t *testing.T) {
			if test.godebug != "" {
				t.Setenv("GODEBUG", test.godebug)
			}
			var buf bytes.Buffer
			fw := NewWriter(&buf)
			for i := 0; i < test.values; i++ {
				w, _ := fw.CreateFormField(fmt.Sprintf("field%v", i))
				fmt.Fprintf(w, "value %v", i)
			}
			for i := 0; i < test.files; i++ {
				h := make(textproto.MIMEHeader)
				h.Set("Content-Disposition",
					fmt.Sprintf(`form-data; name="file%v"; filename="file%v"`, i, i))
				h.Set("Content-Type", "application/octet-stream")
				for j := 0; j < test.extraKeysPerFile; j++ {
					h.Set(fmt.Sprintf("k%v", j), "v")
				}
				w, _ := fw.CreatePart(h)
				fmt.Fprintf(w, "value %v", i)
			}
			if err := fw.Close(); err != nil {
				t.Fatal(err)
			}
			fr := NewReader(bytes.NewReader(buf.Bytes()), fw.Boundary())
			form, err := fr.ReadForm(1 << 10)
			if err == nil {
				defer form.RemoveAll()
			}
			if err != test.wantErr {
				t.Errorf("ReadForm = %v, want %v", err, test.wantErr)
			}
		})` passed
$DIR/src/mime/multipart/formdata_test.go: `t.Setenv("GODEBUG", test.godebug)` failed
$DIR/src/mime/multipart/formdata_test.go: `fmt.Fprintf(w, "value %v", i)` passed
$DIR/src/mime/multipart/formdata_test.go: `h.Set("Content-Disposition",
					fmt.Sprintf(`form-data; name="file%v"; filename="file%v"`, i, i))` failed
$DIR/src/mime/multipart/formdata_test.go: `h.Set("Content-Type", "application/octet-stream")` passed
$DIR/src/mime/multipart/formdata_test.go: `h.Set(fmt.Sprintf("k%v", j), "v")` failed
$DIR/src/mime/multipart/formdata_test.go: `fmt.Fprintf(w, "value %v", i)` passed
$DIR/src/mime/multipart/formdata_test.go: `t.Run(test.name, func(t *testing.T) {
			const eol = "\r\n"
			s := `--boundary` + eol
			s += `Content-Disposition: form-data; name="a"` + eol
			s += `Content-Type: text/plain` + eol
			s += test.prefix
			fr := io.MultiReader(
				strings.NewReader(s),
				neverendingReader('X'),
			)
			r := NewReader(fr, "boundary")
			_, err := r.ReadForm(1 << 20)
			if err != ErrMessageTooLarge {
				t.Fatalf("ReadForm(1 << 20): %v, want ErrMessageTooLarge", err)
			}
		})` passed
$DIR/src/mime/multipart/formdata_test.go: `s += `Content-Disposition: form-data; name="a"` + eol` passed
$DIR/src/mime/multipart/formdata_test.go: `s += `Content-Type: text/plain` + eol` passed
$DIR/src/mime/multipart/formdata_test.go: `s += test.prefix` passed
$DIR/src/mime/multipart/formdata_test.go: `.NewReader(strings.ReplaceAll(message, "\n", "\r\n"))` nonbuildable
$DIR/src/mime/multipart/formdata_test.go: `.ReplaceAll(message, "\n", "\r\n")` nonbuildable
$DIR/src/mime/multipart/formdata_test.go: `.ReadForm(25)` nonbuildable
$DIR/src/mime/multipart/formdata_test.go: `.RemoveAll()` nonbuildable
$DIR/src/mime/multipart/formdata_test.go: `.NewReader(strings.ReplaceAll(messageWithFileWithoutName, "\n", "\r\n"))` nonbuildable
$DIR/src/mime/multipart/formdata_test.go: `.ReplaceAll(messageWithFileWithoutName, "\n", "\r\n")` nonbuildable
$DIR/src/mime/multipart/formdata_test.go: `.ReadForm(25)` nonbuildable
$DIR/src/mime/multipart/formdata_test.go: `.RemoveAll()` nonbuildable
$DIR/src/mime/multipart/formdata_test.go: `.NewReader(strings.ReplaceAll(messageWithFileName, "\n", "\r\n"))` nonbuildable
$DIR/src/mime/multipart/formdata_test.go: `.ReplaceAll(messageWithFileName, "\n", "\r\n")` nonbuildable
$DIR/src/mime/multipart/formdata_test.go: `.ReadForm(math.MaxInt64)` nonbuildable
$DIR/src/mime/multipart/formdata_test.go: `.RemoveAll()` nonbuildable
$DIR/src/mime/multipart/formdata_test.go: `.NewReader(strings.ReplaceAll(messageWithTextContentType, "\n", "\r\n"))` nonbuildable
$DIR/src/mime/multipart/formdata_test.go: `.ReplaceAll(messageWithTextContentType, "\n", "\r\n")` nonbuildable
$DIR/src/mime/multipart/formdata_test.go: `.ReadForm(math.MaxInt64)` nonbuildable
$DIR/src/mime/multipart/formdata_test.go: `.RemoveAll()` nonbuildable
$DIR/src/mime/multipart/formdata_test.go: `.NewReader(strings.ReplaceAll(messageWithTextContentType, "\n", "\r\n"))` nonbuildable
$DIR/src/mime/multipart/formdata_test.go: `.ReplaceAll(messageWithTextContentType, "\n", "\r\n")` nonbuildable
$DIR/src/mime/multipart/formdata_test.go: `.ReadForm(25)` nonbuildable
$DIR/src/mime/multipart/formdata_test.go: `.RemoveAll()` nonbuildable
$DIR/src/mime/multipart/formdata_test.go: `.NewReader(body)` nonbuildable
$DIR/src/mime/multipart/formdata_test.go: `.ReadForm(maxMemory)` nonbuildable
$DIR/src/mime/multipart/formdata_test.go: `.Short()` nonbuildable
$DIR/src/mime/multipart/formdata_test.go: `.Repeat("1", n)` nonbuildable
$DIR/src/mime/multipart/formdata_test.go: `.ReplaceAll(message, "\n", "\r\n")` nonbuildable
$DIR/src/mime/multipart/formdata_test.go: `.NewReader(testBody)` nonbuildable
$DIR/src/mime/multipart/formdata_test.go: `.ReadForm(maxMemory)` nonbuildable
$DIR/src/mime/multipart/formdata_test.go: `.RemoveAll()` nonbuildable
$DIR/src/mime/multipart/formdata_test.go: `.Repeat("a", 10<<20)` nonbuildable
$DIR/src/mime/multipart/formdata_test.go: `.CreateFormField(name)` nonbuildable
$DIR/src/mime/multipart/formdata_test.go: `.Write([]byte("value"))` nonbuildable
$DIR/src/mime/multipart/formdata_test.go: `.Set("Content-Disposition", `form-data; name="a"`)` nonbuildable
$DIR/src/mime/multipart/formdata_test.go: `.Set("X-Foo", strings.Repeat("a", 10<<20))` nonbuildable
$DIR/src/mime/multipart/formdata_test.go: `.Repeat("a", 10<<20)` nonbuildable
$DIR/src/mime/multipart/formdata_test.go: `.CreatePart(h)` nonbuildable
$DIR/src/mime/multipart/formdata_test.go: `.Write([]byte("value"))` nonbuildable
$DIR/src/mime/multipart/formdata_test.go: `.CreateFormField("f")` nonbuildable
$DIR/src/mime/multipart/formdata_test.go: `.Write([]byte("v"))` nonbuildable
$DIR/src/mime/multipart/formdata_test.go: `.Run(test.name, func(t *testing.T) {
			var buf bytes.Buffer
			fw := NewWriter(&buf)
			test.f(fw)
			if err := fw.Close(); err != nil {
				t.Fatal(err)
			}
			fr := NewReader(&buf, fw.Boundary())
			_, err := fr.ReadForm(0)
			if err != ErrMessageTooLarge {
				t.Errorf("fr.ReadForm() = %v, want ErrMessageTooLarge", err)
			}
		})` nonbuildable
$DIR/src/mime/multipart/formdata_test.go: `.f(fw)` nonbuildable
$DIR/src/mime/multipart/formdata_test.go: `.Boundary()` nonbuildable
$DIR/src/mime/multipart/formdata_test.go: `.ReadForm(0)` nonbuildable
$DIR/src/mime/multipart/formdata_test.go: `.Setenv("GODEBUG", "multipartfiles=distinct")` nonbuildable
$DIR/src/mime/multipart/formdata_test.go: `.Sprintf("values=%v/files=%v/extraKeysPerFile=%v", test.values, test.files, test.extraKeysPerFile)` nonbuildable
$DIR/src/mime/multipart/formdata_test.go: `.Sprintf("/godebug=%v", test.godebug)` nonbuildable
$DIR/src/mime/multipart/formdata_test.go: `.Run(name, func(t *testing.T) {
			if test.godebug != "" {
				t.Setenv("GODEBUG", test.godebug)
			}
			var buf bytes.Buffer
			fw := NewWriter(&buf)
			for i := 0; i < test.values; i++ {
				w, _ := fw.CreateFormField(fmt.Sprintf("field%v", i))
				fmt.Fprintf(w, "value %v", i)
			}
			for i := 0; i < test.files; i++ {
				h := make(textproto.MIMEHeader)
				h.Set("Content-Disposition",
					fmt.Sprintf(`form-data; name="file%v"; filename="file%v"`, i, i))
				h.Set("Content-Type", "application/octet-stream")
				for j := 0; j < test.extraKeysPerFile; j++ {
					h.Set(fmt.Sprintf("k%v", j), "v")
				}
				w, _ := fw.CreatePart(h)
				fmt.Fprintf(w, "value %v", i)
			}
			if err := fw.Close(); err != nil {
				t.Fatal(err)
			}
			fr := NewReader(bytes.NewReader(buf.Bytes()), fw.Boundary())
			form, err := fr.ReadForm(1 << 10)
			if err == nil {
				defer form.RemoveAll()
			}
			if err != test.wantErr {
				t.Errorf("ReadForm = %v, want %v", err, test.wantErr)
			}
		})` nonbuildable
$DIR/src/mime/multipart/formdata_test.go: `.Setenv("GODEBUG", test.godebug)` nonbuildable
$DIR/src/mime/multipart/formdata_test.go: `.CreateFormField(fmt.Sprintf("field%v", i))` nonbuildable
$DIR/src/mime/multipart/formdata_test.go: `.Sprintf("field%v", i)` nonbuildable
$DIR/src/mime/multipart/formdata_test.go: `.Fprintf(w, "value %v", i)` nonbuildable
$DIR/src/mime/multipart/formdata_test.go: `.Set("Content-Disposition",
					fmt.Sprintf(`form-data; name="file%v"; filename="file%v"`, i, i))` nonbuildable
$DIR/src/mime/multipart/formdata_test.go: `.Sprintf(`form-data; name="file%v"; filename="file%v"`, i, i)` nonbuildable
$DIR/src/mime/multipart/formdata_test.go: `.Set("Content-Type", "application/octet-stream")` nonbuildable
$DIR/src/mime/multipart/formdata_test.go: `.Set(fmt.Sprintf("k%v", j), "v")` nonbuildable
$DIR/src/mime/multipart/formdata_test.go: `.Sprintf("k%v", j)` nonbuildable
$DIR/src/mime/multipart/formdata_test.go: `.CreatePart(h)` nonbuildable
$DIR/src/mime/multipart/formdata_test.go: `.Fprintf(w, "value %v", i)` nonbuildable
$DIR/src/mime/multipart/formdata_test.go: `.NewReader(buf.Bytes())` nonbuildable
$DIR/src/mime/multipart/formdata_test.go: `.Bytes()` nonbuildable
$DIR/src/mime/multipart/formdata_test.go: `.Boundary()` nonbuildable
$DIR/src/mime/multipart/formdata_test.go: `.ReadForm(1 << 10)` nonbuildable
$DIR/src/mime/multipart/formdata_test.go: `.RemoveAll()` nonbuildable
$DIR/src/mime/multipart/formdata_test.go: `.Run(test.name, func(t *testing.T) {
			const eol = "\r\n"
			s := `--boundary` + eol
			s += `Content-Disposition: form-data; name="a"` + eol
			s += `Content-Type: text/plain` + eol
			s += test.prefix
			fr := io.MultiReader(
				strings.NewReader(s),
				neverendingReader('X'),
			)
			r := NewReader(fr, "boundary")
			_, err := r.ReadForm(1 << 20)
			if err != ErrMessageTooLarge {
				t.Fatalf("ReadForm(1 << 20): %v, want ErrMessageTooLarge", err)
			}
		})` nonbuildable
$DIR/src/mime/multipart/formdata_test.go: `.MultiReader(
				strings.NewReader(s),
				neverendingReader('X'),
			)` nonbuildable
$DIR/src/mime/multipart/formdata_test.go: `.NewReader(s)` nonbuildable
$DIR/src/mime/multipart/formdata_test.go: `.ReadForm(1 << 20)` nonbuildable
$DIR/src/mime/multipart/multipart_test.go: dry running
$DIR/src/mime/multipart/multipart_test.go: mutilating
$DIR/src/mime/multipart/multipart_test.go: `p.Header.Set("Content-Disposition", test[0])` failed
$DIR/src/mime/multipart/multipart_test.go: `expectEq(t, expectedBody, buf.String(), fmt.Sprintf("test %d", testNum))` passed
$DIR/src/mime/multipart/multipart_test.go: `part, err = reader.NextPart()` failed
$DIR/src/mime/multipart/multipart_test.go: `body = strings.ReplaceAll(body, "\n", "\r\n")` passed
$DIR/src/mime/multipart/multipart_test.go: `_, err = io.Copy(io.Discard, part)` failed
$DIR/src/mime/multipart/multipart_test.go: `expectEq(t, body, string(data), fmt.Sprintf("Part %d body", i))` passed
$DIR/src/mime/multipart/multipart_test.go: `i++` passed
$DIR/src/mime/multipart/multipart_test.go: `readPart(textproto.MIMEHeader{"Foo-Bar": {"baz"}}, "Body")` failed
$DIR/src/mime/multipart/multipart_test.go: `t.Run(cte, func(t *testing.T) {
			testQuotedPrintableEncoding(t, cte)
		})` passed
$DIR/src/mime/multipart/multipart_test.go: `testQuotedPrintableEncoding(t, cte)` passed
$DIR/src/mime/multipart/multipart_test.go: `_, err = io.Copy(&buf, part)` failed
$DIR/src/mime/multipart/multipart_test.go: `part, err = r.NextPart()` failed
$DIR/src/mime/multipart/multipart_test.go: `buf.Reset()` failed
$DIR/src/mime/multipart/multipart_test.go: `_, err = io.Copy(&buf, part)` failed
$DIR/src/mime/multipart/multipart_test.go: `got = buf.String()` failed
$DIR/src/mime/multipart/multipart_test.go: `want = `<div dir="ltr">Hello World.</div>`` failed
$DIR/src/mime/multipart/multipart_test.go: `p, err = mr2.NextPart()` failed
$DIR/src/mime/multipart/multipart_test.go: `p, err = mr2.NextPart()` failed
$DIR/src/mime/multipart/multipart_test.go: `p, err = mr2.NextPart()` failed
$DIR/src/mime/multipart/multipart_test.go: `_, err = mr.NextPart()` failed
$DIR/src/mime/multipart/multipart_test.go: `_, err = mr.NextPart()` failed
$DIR/src/mime/multipart/multipart_test.go: `got = append(got, headerBody{p.Header, string(pbody)})` failed
$DIR/src/mime/multipart/multipart_test.go: `maxSize = 512` passed
$DIR/src/mime/multipart/multipart_test.go: `buf.Reset()` passed
$DIR/src/mime/multipart/multipart_test.go: `part.Write(bodyb[:size])` timed-out
$DIR/src/mime/multipart/multipart_test.go: `part, _ = w.CreateFormField("key")` timed-out
$DIR/src/mime/multipart/multipart_test.go: `part.Write([]byte("val"))` passed
$DIR/src/mime/multipart/multipart_test.go: `.NewReader("")` nonbuildable
$DIR/src/mime/multipart/multipart_test.go: `.isBoundaryDelimiterLine([]byte("--myBoundary\r\n"))` nonbuildable
$DIR/src/mime/multipart/multipart_test.go: `.isBoundaryDelimiterLine([]byte("--myBoundary \r\n"))` nonbuildable
$DIR/src/mime/multipart/multipart_test.go: `.isBoundaryDelimiterLine([]byte("--myBoundary \n"))` nonbuildable
$DIR/src/mime/multipart/multipart_test.go: `.isBoundaryDelimiterLine([]byte("--myBoundary bogus \n"))` nonbuildable
$DIR/src/mime/multipart/multipart_test.go: `.isBoundaryDelimiterLine([]byte("--myBoundary bogus--"))` nonbuildable
$DIR/src/mime/multipart/multipart_test.go: `.Header.Set("Content-Disposition", test[0])` nonbuildable
$DIR/src/mime/multipart/multipart_test.go: `.FormName()` nonbuildable
$DIR/src/mime/multipart/multipart_test.go: `.FileName()` nonbuildable
$DIR/src/mime/multipart/multipart_test.go: `.NewReader(testMultipartBody("\r\n"))` nonbuildable
$DIR/src/mime/multipart/multipart_test.go: `.NewReader(testMultipartBody("\n"))` nonbuildable
$DIR/src/mime/multipart/multipart_test.go: `.NewReader(testMultipartBody("\r\n"))` nonbuildable
$DIR/src/mime/multipart/multipart_test.go: `.NewReader(body)` nonbuildable
$DIR/src/mime/multipart/multipart_test.go: `.NextPart()` nonbuildable
$DIR/src/mime/multipart/multipart_test.go: `.Copy(buf, part)` nonbuildable
$DIR/src/mime/multipart/multipart_test.go: `.String()` nonbuildable
$DIR/src/mime/multipart/multipart_test.go: `.Sprintf("test %d", testNum)` nonbuildable
$DIR/src/mime/multipart/multipart_test.go: `.NextPart()` nonbuildable
$DIR/src/mime/multipart/multipart_test.go: `.NextPart()` nonbuildable
$DIR/src/mime/multipart/multipart_test.go: `.ReplaceAll(body, "\n", "\r\n")` nonbuildable
$DIR/src/mime/multipart/multipart_test.go: `.NewReader(body)` nonbuildable
$DIR/src/mime/multipart/multipart_test.go: `.NextPart()` nonbuildable
$DIR/src/mime/multipart/multipart_test.go: `.Copy(io.Discard, part)` nonbuildable
$DIR/src/mime/multipart/multipart_test.go: `.MultiReader(
			strings.NewReader(testBody1),
			&sentinelReader{done1},
			strings.NewReader(testBody2))` nonbuildable
$DIR/src/mime/multipart/multipart_test.go: `.NewReader(testBody1)` nonbuildable
$DIR/src/mime/multipart/multipart_test.go: `.NewReader(testBody2)` nonbuildable
$DIR/src/mime/multipart/multipart_test.go: `.NextPart()` nonbuildable
$DIR/src/mime/multipart/multipart_test.go: `.DeepEqual(part.Header, hdr)` nonbuildable
$DIR/src/mime/multipart/multipart_test.go: `.ReadAll(part)` nonbuildable
$DIR/src/mime/multipart/multipart_test.go: `.Sprintf("Part %d body", i)` nonbuildable
$DIR/src/mime/multipart/multipart_test.go: `.NewReader(testBody)` nonbuildable
$DIR/src/mime/multipart/multipart_test.go: `.NextPart()` nonbuildable
$DIR/src/mime/multipart/multipart_test.go: `.Copy(&buf, part)` nonbuildable
$DIR/src/mime/multipart/multipart_test.go: `.Run(cte, func(t *testing.T) {
			testQuotedPrintableEncoding(t, cte)
		})` nonbuildable
$DIR/src/mime/multipart/multipart_test.go: `.Replace(`--0016e68ee29c5d515f04cedf6733
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: quoted-printable

<div dir=3D"ltr">Hello World.</div>
--0016e68ee29c5d515f04cedf6733
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: quoted-printable

<div dir=3D"ltr">Hello World.</div>
--0016e68ee29c5d515f04cedf6733--`, "\n", "\r\n", -1)` nonbuildable
$DIR/src/mime/multipart/multipart_test.go: `.NewReader(body)` nonbuildable
$DIR/src/mime/multipart/multipart_test.go: `.NextRawPart()` nonbuildable
$DIR/src/mime/multipart/multipart_test.go: `.Copy(&buf, part)` nonbuildable
$DIR/src/mime/multipart/multipart_test.go: `.String()` nonbuildable
$DIR/src/mime/multipart/multipart_test.go: `.NextPart()` nonbuildable
$DIR/src/mime/multipart/multipart_test.go: `.Reset()` nonbuildable
$DIR/src/mime/multipart/multipart_test.go: `.Copy(&buf, part)` nonbuildable
$DIR/src/mime/multipart/multipart_test.go: `.String()` nonbuildable
$DIR/src/mime/multipart/multipart_test.go: `.Open("testdata/nested-mime")` nonbuildable
$DIR/src/mime/multipart/multipart_test.go: `.NextPart()` nonbuildable
$DIR/src/mime/multipart/multipart_test.go: `.NextPart()` nonbuildable
$DIR/src/mime/multipart/multipart_test.go: `.ReadAll(p)` nonbuildable
$DIR/src/mime/multipart/multipart_test.go: `.NextPart()` nonbuildable
$DIR/src/mime/multipart/multipart_test.go: `.ReadAll(p)` nonbuildable
$DIR/src/mime/multipart/multipart_test.go: `.NextPart()` nonbuildable
$DIR/src/mime/multipart/multipart_test.go: `.NextPart()` nonbuildable
$DIR/src/mime/multipart/multipart_test.go: `.NextPart()` nonbuildable
$DIR/src/mime/multipart/multipart_test.go: `.NewReader(tt.in)` nonbuildable
$DIR/src/mime/multipart/multipart_test.go: `.NextPart()` nonbuildable
$DIR/src/mime/multipart/multipart_test.go: `.ReadAll(p)` nonbuildable
$DIR/src/mime/multipart/multipart_test.go: `.DeepEqual(tt.want, got)` nonbuildable
$DIR/src/mime/multipart/multipart_test.go: `.DeepEqual(wantPart, got[pi])` nonbuildable
$DIR/src/mime/multipart/multipart_test.go: `.Short()` nonbuildable
$DIR/src/mime/multipart/multipart_test.go: `.Repeat("a", maxSize)` nonbuildable
$DIR/src/mime/multipart/multipart_test.go: `.Reset()` nonbuildable
$DIR/src/mime/multipart/multipart_test.go: `.CreateFormField("f")` nonbuildable
$DIR/src/mime/multipart/multipart_test.go: `.Write(bodyb[:size])` nonbuildable
$DIR/src/mime/multipart/multipart_test.go: `.CreateFormField("key")` nonbuildable
$DIR/src/mime/multipart/multipart_test.go: `.Write([]byte("val"))` nonbuildable
$DIR/src/mime/multipart/multipart_test.go: `.Boundary()` nonbuildable
$DIR/src/mime/multipart/multipart_test.go: `.NewReader("")` nonbuildable
$DIR/src/mime/multipart/multipart_test.go: `.NextPart()` nonbuildable
$DIR/src/mime/multipart/multipart_test.go: `.Sprint(err)` nonbuildable
$DIR/src/mime/multipart/writer_test.go: dry running
$DIR/src/mime/multipart/writer_test.go: mutilating
$DIR/src/mime/multipart/writer_test.go: `part.Write(fileContents)` failed
$DIR/src/mime/multipart/writer_test.go: `err = w.WriteField("key", "val")` failed
$DIR/src/mime/multipart/writer_test.go: `part.Write([]byte("val"))` passed
$DIR/src/mime/multipart/writer_test.go: `err = w.Close()` failed
$DIR/src/mime/multipart/writer_test.go: `part, err = r.NextPart()` failed
$DIR/src/mime/multipart/writer_test.go: `slurp, err = io.ReadAll(part)` failed
$DIR/src/mime/multipart/writer_test.go: `part, err = r.NextPart()` failed
$DIR/src/mime/multipart/writer_test.go: `w.CreateFormField("foo")` passed
$DIR/src/mime/multipart/writer_test.go: `done <- 1` timed-out
$DIR/src/mime/multipart/writer_test.go: `w.Boundary()` passed
$DIR/src/mime/multipart/writer_test.go: `part.Write([]byte("foo"))` failed
$DIR/src/mime/multipart/writer_test.go: `.CreateFormFile("myfile", "my-file.txt")` nonbuildable
$DIR/src/mime/multipart/writer_test.go: `.Write(fileContents)` nonbuildable
$DIR/src/mime/multipart/writer_test.go: `.WriteField("key", "val")` nonbuildable
$DIR/src/mime/multipart/writer_test.go: `.Write([]byte("val"))` nonbuildable
$DIR/src/mime/multipart/writer_test.go: `.String()` nonbuildable
$DIR/src/mime/multipart/writer_test.go: `.Boundary()` nonbuildable
$DIR/src/mime/multipart/writer_test.go: `.NextPart()` nonbuildable
$DIR/src/mime/multipart/writer_test.go: `.FormName()` nonbuildable
$DIR/src/mime/multipart/writer_test.go: `.ReadAll(part)` nonbuildable
$DIR/src/mime/multipart/writer_test.go: `.NextPart()` nonbuildable
$DIR/src/mime/multipart/writer_test.go: `.FormName()` nonbuildable
$DIR/src/mime/multipart/writer_test.go: `.ReadAll(part)` nonbuildable
$DIR/src/mime/multipart/writer_test.go: `.NextPart()` nonbuildable
$DIR/src/mime/multipart/writer_test.go: `.Repeat("x", 70)` nonbuildable
$DIR/src/mime/multipart/writer_test.go: `.Repeat("x", 71)` nonbuildable
$DIR/src/mime/multipart/writer_test.go: `.SetBoundary(tt.b)` failed
$DIR/src/mime/multipart/writer_test.go: `.Boundary()` nonbuildable
$DIR/src/mime/multipart/writer_test.go: `.FormDataContentType()` nonbuildable
$DIR/src/mime/multipart/writer_test.go: `.ParseMediaType(ct)` nonbuildable
$DIR/src/mime/multipart/writer_test.go: `.String()` nonbuildable
$DIR/src/mime/multipart/writer_test.go: `.Contains(got, wantSub)` nonbuildable
$DIR/src/mime/multipart/writer_test.go: `.CreateFormField("foo")` nonbuildable
$DIR/src/mime/multipart/writer_test.go: `.Boundary()` nonbuildable
$DIR/src/mime/multipart/writer_test.go: `.SetBoundary("MIMEBOUNDARY")` failed
$DIR/src/mime/multipart/writer_test.go: `.CreatePart(header)` nonbuildable
$DIR/src/mime/multipart/writer_test.go: `.Write([]byte("foo"))` nonbuildable
$DIR/src/mime/multipart/writer_test.go: `.String()` nonbuildable
$DIR/src/mime/quotedprintable/reader_test.go: dry running
$DIR/src/mime/quotedprintable/reader_test.go: mutilating
$DIR/src/mime/quotedprintable/reader_test.go: `n = 4` passed
$DIR/src/mime/quotedprintable/reader_test.go: `everySequence("", "0A \r\n=", n, func(s string) {
		if strings.HasSuffix(s, "=") || strings.Contains(s, "==") {
			return
		}
		buf.Reset()
		_, err := io.Copy(&buf, NewReader(strings.NewReader(s)))
		if err != nil {
			errStr := err.Error()
			if strings.Contains(errStr, "invalid bytes after =:") {
				errStr = "invalid bytes after ="
			}
			res[errStr]++
			if strings.Contains(errStr, "invalid hex byte ") {
				if strings.HasSuffix(errStr, "0x20") && (strings.Contains(s, "=0 ") || strings.Contains(s, "=A ") || strings.Contains(s, "= ")) {
					return
				}
				if strings.HasSuffix(errStr, "0x3d") && (strings.Contains(s, "=0=") || strings.Contains(s, "=A=")) {
					return
				}
				if strings.HasSuffix(errStr, "0x0a") || strings.HasSuffix(errStr, "0x0d") {
					// bunch of cases; since whitespace at the end of a line before \n is removed.
					return
				}
			}
			if strings.Contains(errStr, "unexpected EOF") {
				return
			}
			if errStr == "invalid bytes after =" && badSoftRx.MatchString(s) {
				return
			}
			t.Errorf("decode(%q) = %v", s, err)
			return
		}
		if *useQprint {
			cmd := exec.Command("qprint", "-d")
			cmd.Stdin = strings.NewReader(s)
			stderr, err := cmd.StderrPipe()
			if err != nil {
				panic(err)
			}
			qpres := make(chan any, 2)
			go func() {
				br := bufio.NewReader(stderr)
				s, _ := br.ReadString('\n')
				if s != "" {
					qpres <- errors.New(s)
					if cmd.Process != nil {
						// It can get stuck on invalid input, like:
						// echo -n "0000= " | qprint -d
						cmd.Process.Kill()
					}
				}
			}()
			go func() {
				want, err := cmd.Output()
				if err == nil {
					qpres <- want
				}
			}()
			select {
			case got := <-qpres:
				if want, ok := got.([]byte); ok {
					if string(want) != buf.String() {
						t.Errorf("go decode(%q) = %q; qprint = %q", s, want, buf.String())
					}
				} else {
					t.Logf("qprint -d(%q) = %v", s, got)
				}
			case <-time.After(5 * time.Second):
				t.Logf("qprint timeout on %q", s)
			}
		}
		res["OK"]++
	})` failed
$DIR/src/mime/quotedprintable/reader_test.go: `buf.Reset()` passed
$DIR/src/mime/quotedprintable/reader_test.go: `errStr = "invalid bytes after ="` timed-out
$DIR/src/mime/quotedprintable/reader_test.go: `res[errStr]++` failed
$DIR/src/mime/quotedprintable/reader_test.go: `cmd.Stdin = strings.NewReader(s)` passed
$DIR/src/mime/quotedprintable/reader_test.go: `qpres <- errors.New(s)` passed
$DIR/src/mime/quotedprintable/reader_test.go: `cmd.Process.Kill()` passed
$DIR/src/mime/quotedprintable/reader_test.go: `qpres <- want` passed
$DIR/src/mime/quotedprintable/reader_test.go: `res["OK"]++` failed
$DIR/src/mime/quotedprintable/reader_test.go: `outcomes = append(outcomes, fmt.Sprintf("%v: %d", k, v))` failed
$DIR/src/mime/quotedprintable/reader_test.go: `want = `OK: 896
invalid bytes after =: 100
quotedprintable: invalid hex byte 0x0d: 26
unexpected EOF: 3`` passed
$DIR/src/mime/quotedprintable/reader_test.go: `.Copy(&buf, NewReader(strings.NewReader(tt.in)))` nonbuildable
$DIR/src/mime/quotedprintable/reader_test.go: `.NewReader(tt.in)` nonbuildable
$DIR/src/mime/quotedprintable/reader_test.go: `.String()` nonbuildable
$DIR/src/mime/quotedprintable/reader_test.go: `.Sprint(err)` nonbuildable
$DIR/src/mime/quotedprintable/reader_test.go: `.LookPath("qprint")` nonbuildable
$DIR/src/mime/quotedprintable/reader_test.go: `.Short()` nonbuildable
$DIR/src/mime/quotedprintable/reader_test.go: `.HasSuffix(s, "=")` nonbuildable
$DIR/src/mime/quotedprintable/reader_test.go: `.Contains(s, "==")` nonbuildable
$DIR/src/mime/quotedprintable/reader_test.go: `.Reset()` nonbuildable
$DIR/src/mime/quotedprintable/reader_test.go: `.Copy(&buf, NewReader(strings.NewReader(s)))` nonbuildable
$DIR/src/mime/quotedprintable/reader_test.go: `.NewReader(s)` nonbuildable
$DIR/src/mime/quotedprintable/reader_test.go: `.Contains(errStr, "invalid bytes after =:")` nonbuildable
$DIR/src/mime/quotedprintable/reader_test.go: `.Contains(errStr, "invalid hex byte ")` nonbuildable
$DIR/src/mime/quotedprintable/reader_test.go: `.HasSuffix(errStr, "0x20")` nonbuildable
$DIR/src/mime/quotedprintable/reader_test.go: `.Contains(s, "=0 ")` nonbuildable
$DIR/src/mime/quotedprintable/reader_test.go: `.Contains(s, "=A ")` nonbuildable
$DIR/src/mime/quotedprintable/reader_test.go: `.Contains(s, "= ")` nonbuildable
$DIR/src/mime/quotedprintable/reader_test.go: `.HasSuffix(errStr, "0x3d")` nonbuildable
$DIR/src/mime/quotedprintable/reader_test.go: `.Contains(s, "=0=")` nonbuildable
$DIR/src/mime/quotedprintable/reader_test.go: `.Contains(s, "=A=")` nonbuildable
$DIR/src/mime/quotedprintable/reader_test.go: `.HasSuffix(errStr, "0x0a")` nonbuildable
$DIR/src/mime/quotedprintable/reader_test.go: `.HasSuffix(errStr, "0x0d")` nonbuildable
$DIR/src/mime/quotedprintable/reader_test.go: `.Contains(errStr, "unexpected EOF")` nonbuildable
$DIR/src/mime/quotedprintable/reader_test.go: `.MatchString(s)` nonbuildable
$DIR/src/mime/quotedprintable/reader_test.go: `.Command("qprint", "-d")` nonbuildable
$DIR/src/mime/quotedprintable/reader_test.go: `.NewReader(s)` nonbuildable
$DIR/src/mime/quotedprintable/reader_test.go: `.StderrPipe()` nonbuildable
$DIR/src/mime/quotedprintable/reader_test.go: `.NewReader(stderr)` nonbuildable
$DIR/src/mime/quotedprintable/reader_test.go: `.ReadString('\n')` nonbuildable
$DIR/src/mime/quotedprintable/reader_test.go: `.New(s)` nonbuildable
$DIR/src/mime/quotedprintable/reader_test.go: `.Process.Kill()` nonbuildable
$DIR/src/mime/quotedprintable/reader_test.go: `.Output()` nonbuildable
$DIR/src/mime/quotedprintable/reader_test.go: `.String()` nonbuildable
$DIR/src/mime/quotedprintable/reader_test.go: `.After(5 * time.Second)` nonbuildable
$DIR/src/mime/quotedprintable/reader_test.go: `.Sprintf("%v: %d", k, v)` nonbuildable
$DIR/src/mime/quotedprintable/reader_test.go: `.Join(outcomes, "\n")` nonbuildable
$DIR/src/mime/quotedprintable/reader_test.go: `.Short()` nonbuildable
$DIR/src/mime/quotedprintable/writer_test.go: dry running
$DIR/src/mime/quotedprintable/writer_test.go: mutilating
$DIR/src/mime/quotedprintable/writer_test.go: `.Write(testMsg)` nonbuildable
$DIR/src/mime/quotedprintable/writer_test.go: `.ReadAll(r)` nonbuildable
$DIR/src/mime/type_test.go: dry running
$DIR/src/mime/type_test.go: mutilating
$DIR/src/mime/type_test.go: `once = sync.Once{}` passed
$DIR/src/mime/type_test.go: `clearMimeTypes()` passed
$DIR/src/mime/type_test.go: `setType(".foo", "x/foo")` failed
$DIR/src/mime/type_test.go: `setType(".bar", "x/bar")` failed
$DIR/src/mime/type_test.go: `setType(".Bar", "x/bar; capital=1")` failed
$DIR/src/mime/type_test.go: `clearMimeTypes()` passed
$DIR/src/mime/type_test.go: `setType(".TEST", caps)` failed
$DIR/src/mime/type_test.go: `setType(".tesT", custom)` failed
$DIR/src/mime/type_test.go: `clearMimeTypes()` passed
$DIR/src/mime/type_test.go: `setType(".gif", "image/gif")` failed
$DIR/src/mime/type_test.go: `setType(".a", "foo/letter")` failed
$DIR/src/mime/type_test.go: `setType(".b", "foo/letter")` passed
$DIR/src/mime/type_test.go: `setType(".B", "foo/letter")` passed
$DIR/src/mime/type_test.go: `setType(".PNG", "image/png")` failed
$DIR/src/mime/type_test.go: `TypeByExtension(".html")` passed
$DIR/src/mime/type_test.go: `TypeByExtension(".HtML")` passed
$DIR/src/mime/type_test.go: `clearMimeTypes()` passed
$DIR/src/mime/type_test.go: `setMimeTypes(builtinTypesLower, builtinTypesLower)` failed
$DIR/src/mime/type_test.go: `.Contains(err.Error(), tt.wantErr)` nonbuildable
$DIR/src/mime/type_test.go: `.DeepEqual(got, tt.want)` nonbuildable
$DIR/src/mime/type_test.go: `.AllocsPerRun(10000, func() {
		TypeByExtension(".html")
		TypeByExtension(".HtML")
	})` nonbuildable
$DIR/src/mime/type_test.go: `.DeepEqual(got, tt.want)` nonbuildable
$DIR/src/mime/type_unix_test.go: dry running
$DIR/src/mime/type_unix_test.go: mutilating
$DIR/src/mime/type_unix_test.go: `initMimeUnixTest(t)` failed
