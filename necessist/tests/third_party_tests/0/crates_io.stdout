Warning: Failed to determine module path: Failed to determine relative path of test file "$DIR/crates_io_index/ser.rs"

This may indicate a bug in Necessist. Consider opening an issue at: https://github.com/trailofbits/necessist/issues

Silence this warning with: --allow module-path-unknown
Warning: Failed to determine module path: Failed to determine relative path of test file "$DIR/crates_io_index/ser.rs"
Warning: Failed to determine module path: Failed to determine relative path of test file "$DIR/crates_io_index/ser.rs"
Warning: Failed to determine module path: Failed to determine relative path of test file "$DIR/crates_io_index/ser.rs"
Warning: Failed to determine module path: Failed to determine relative path of test file "$DIR/crates_io_index/ser.rs"
Warning: Failed to determine module path: Failed to determine relative path of test file "$DIR/crates_io_markdown/lib.rs"
$DIR/crates_io_tarball/src/lib.rs:110:13-110:35: `.add_raw_manifest(b"")`
$DIR/crates_io_tarball/src/lib.rs:111:13-111:21: `.build()`
$DIR/crates_io_tarball/src/lib.rs:126:13-126:35: `.add_raw_manifest(b"")`
$DIR/crates_io_tarball/src/lib.rs:127:13-127:84: `.add_file("foo-0.0.1/.cargo_vcs_info.json", br#"{"unknown": "field"}"#)`
$DIR/crates_io_tarball/src/lib.rs:128:13-128:21: `.build()`
$DIR/crates_io_tarball/src/lib.rs:141:13-141:35: `.add_raw_manifest(b"")`
$DIR/crates_io_tarball/src/lib.rs:142:13-145:14: `.add_file(
                "foo-0.0.1/.cargo_vcs_info.json",
                br#"{"path_in_vcs": "path/in/vcs"}"#,
            )`
$DIR/crates_io_tarball/src/lib.rs:146:13-146:21: `.build()`
$DIR/crates_io_tarball/src/lib.rs:159:13-166:14: `.add_raw_manifest(
                br#"
[package]
rust-version = "1.59"
readme = "README.md"
repository = "https://github.com/foo/bar"
"#,
            )`
$DIR/crates_io_tarball/src/lib.rs:167:13-167:21: `.build()`
$DIR/crates_io_tarball/src/lib.rs:172:9-172:63: `assert_some_eq!(manifest.package.readme, "README.md");`
$DIR/crates_io_tarball/src/lib.rs:173:9-173:84: `assert_some_eq!(manifest.package.repository, "https://github.com/foo/bar");`
$DIR/crates_io_tarball/src/lib.rs:180:13-185:14: `.add_raw_manifest(
                br#"
                [project]
                rust-version = "1.23"
                "#,
            )`
$DIR/crates_io_tarball/src/lib.rs:186:13-186:21: `.build()`
$DIR/src/admin/render_readmes.rs:236:13-241:14: `.add_raw_manifest(
                br#"
[package]
readme = "README.md"
"#,
            )`
$DIR/src/admin/render_readmes.rs:242:13-242:56: `.add_file("foo-0.0.1/README.md", b"readme")`
$DIR/src/admin/render_readmes.rs:243:13-243:30: `.build_unzipped()`
$DIR/src/admin/render_readmes.rs:253:13-257:14: `.add_raw_manifest(
                br#"
[package]
"#,
            )`
$DIR/src/admin/render_readmes.rs:258:13-258:30: `.build_unzipped()`
$DIR/src/admin/render_readmes.rs:269:13-273:14: `.add_raw_manifest(
                br#"
[package]
"#,
            )`
$DIR/src/admin/render_readmes.rs:274:13-274:56: `.add_file("foo-0.0.1/README.md", b"readme")`
$DIR/src/admin/render_readmes.rs:275:13-275:30: `.build_unzipped()`
$DIR/src/admin/render_readmes.rs:285:13-291:14: `.add_raw_manifest(
                br#"
[package]
readme = "README.md"
repository = "https://github.com/foo/foo"
"#,
            )`
$DIR/src/admin/render_readmes.rs:292:13-292:75: `.add_file("foo-0.0.1/README.md", b"readme [link](./Other.md)")`
$DIR/src/admin/render_readmes.rs:293:13-293:30: `.build_unzipped()`
$DIR/src/admin/render_readmes.rs:303:13-309:14: `.add_raw_manifest(
                br#"
[package]
readme = "docs/README.md"
repository = "https://github.com/foo/foo"
"#,
            )`
$DIR/src/admin/render_readmes.rs:310:13-313:14: `.add_file(
                "foo-0.0.1/docs/README.md",
                b"docs/readme [link](./Other.md)",
            )`
$DIR/src/admin/render_readmes.rs:314:13-314:30: `.build_unzipped()`
$DIR/src/auth.rs:274:13-274:60: `.with_endpoint_scope(EndpointScope::PublishNew)`
$DIR/src/auth.rs:275:13-275:40: `.for_crate("tokio-console")`
$DIR/src/auth.rs:293:13-293:63: `.with_endpoint_scope(EndpointScope::PublishUpdate)`
$DIR/src/auth.rs:294:13-294:40: `.for_crate("tokio-console")`
$DIR/src/auth.rs:312:13-312:54: `.with_endpoint_scope(EndpointScope::Yank)`
$DIR/src/auth.rs:313:13-313:40: `.for_crate("tokio-console")`
$DIR/src/auth.rs:331:13-331:62: `.with_endpoint_scope(EndpointScope::ChangeOwners)`
$DIR/src/auth.rs:332:13-332:40: `.for_crate("tokio-console")`
$DIR/src/config/server.rs:278:62-278:82: `.collect::<Vec<_>>()`
$DIR/src/config/server.rs:281:62-281:82: `.collect::<Vec<_>>()`
$DIR/src/config/server.rs:289:5-292:7: `assert_ok_eq!(
        parse_cidr_block("127.0.0.1/24"),
        "127.0.0.1/24".parse::<IpNetwork>().unwrap()
    );`
$DIR/src/config/server.rs:313:5-318:7: `assert_ok_eq!(
        parse_cidr_block("2002::1234:abcd:ffff:c0a8:101/64"),
        "2002::1234:abcd:ffff:c0a8:101/64"
            .parse::<IpNetwork>()
            .unwrap()
    );`
$DIR/src/controllers/helpers/pagination.rs:311:54-311:72: `.gather(&mock(""))`
$DIR/src/controllers/helpers/pagination.rs:321:9-321:73: `assert_error("page=", "cannot parse integer from empty string");`
$DIR/src/controllers/helpers/pagination.rs:322:9-322:76: `assert_error("page=not_a_number", "invalid digit found in string");`
$DIR/src/controllers/helpers/pagination.rs:323:9-323:67: `assert_error("page=1.0", "invalid digit found in string");`
$DIR/src/controllers/helpers/pagination.rs:324:9-324:82: `assert_error("page=0", "page indexing starts from 1, page 0 is invalid");`
$DIR/src/controllers/helpers/pagination.rs:327:13-327:37: `.gather(&mock("page=5"))`
$DIR/src/controllers/helpers/pagination.rs:337:9-337:77: `assert_error("per_page=", "cannot parse integer from empty string");`
$DIR/src/controllers/helpers/pagination.rs:338:9-338:80: `assert_error("per_page=not_a_number", "invalid digit found in string");`
$DIR/src/controllers/helpers/pagination.rs:339:9-339:71: `assert_error("per_page=1.0", "invalid digit found in string");`
$DIR/src/controllers/helpers/pagination.rs:340:9-340:76: `assert_error("per_page=101", "cannot request more than 100 items");`
$DIR/src/controllers/helpers/pagination.rs:343:13-343:41: `.gather(&mock("per_page=5"))`
$DIR/src/controllers/helpers/pagination.rs:350:9-354:11: `assert_pagination_error(
            PaginationOptions::builder(),
            "seek=OTg",
            "?seek= is not supported for this request",
        );`
$DIR/src/controllers/helpers/pagination.rs:357:13-357:31: `.enable_seek(true)`
$DIR/src/controllers/helpers/pagination.rs:358:13-358:39: `.gather(&mock("seek=OTg"))`
$DIR/src/controllers/helpers/pagination.rs:373:9-377:11: `assert_pagination_error(
            PaginationOptions::builder(),
            "page=1&seek=OTg",
            "providing both ?page= and ?seek= is unsupported",
        );`
$DIR/src/controllers/helpers/pagination.rs:379:41-379:59: `.enable_seek(true)`
$DIR/src/controllers/helpers/pagination.rs:388:41-388:61: `.enable_pages(false)`
$DIR/src/controllers/user/session.rs:163:83-163:90: `.into()`
$DIR/src/controllers/user/session.rs:164:33-164:40: `.into()`
$DIR/src/controllers/user/session.rs:165:33-165:40: `.into()`
$DIR/src/downloads_counter.rs:259:23-259:41: `.new_version(conn)`
$DIR/src/downloads_counter.rs:260:23-260:41: `.new_version(conn)`
$DIR/src/downloads_counter.rs:261:23-261:41: `.new_version(conn)`
$DIR/src/downloads_counter.rs:265:13-265:35: `counter.increment(v1);`
$DIR/src/downloads_counter.rs:265:20-265:34: `.increment(v1)`
$DIR/src/downloads_counter.rs:268:13-268:35: `counter.increment(v2);`
$DIR/src/downloads_counter.rs:268:20-268:34: `.increment(v2)`
$DIR/src/downloads_counter.rs:274:13-274:48: `.persist_all_shards_with_conn(conn)`
$DIR/src/downloads_counter.rs:289:9-289:52: `state.assert_downloads_count(conn, v1, 10);`
$DIR/src/downloads_counter.rs:289:14-289:51: `.assert_downloads_count(conn, v1, 10)`
$DIR/src/downloads_counter.rs:290:9-290:51: `state.assert_downloads_count(conn, v2, 5);`
$DIR/src/downloads_counter.rs:290:14-290:50: `.assert_downloads_count(conn, v2, 5)`
$DIR/src/downloads_counter.rs:300:23-300:41: `.new_version(conn)`
$DIR/src/downloads_counter.rs:301:31-301:56: `.inner.determine_map(&v1)`
$DIR/src/downloads_counter.rs:304:27-304:45: `.new_version(conn)`
$DIR/src/downloads_counter.rs:305:22-305:47: `.inner.determine_map(&v2)`
$DIR/src/downloads_counter.rs:306:13-306:42: `v2 = state.new_version(conn);`
$DIR/src/downloads_counter.rs:306:23-306:41: `.new_version(conn)`
$DIR/src/downloads_counter.rs:308:31-308:56: `.inner.determine_map(&v2)`
$DIR/src/downloads_counter.rs:312:13-312:35: `counter.increment(v1);`
$DIR/src/downloads_counter.rs:312:20-312:34: `.increment(v1)`
$DIR/src/downloads_counter.rs:315:13-315:35: `counter.increment(v2);`
$DIR/src/downloads_counter.rs:315:20-315:34: `.increment(v2)`
$DIR/src/downloads_counter.rs:321:32-321:47: `.shards_count()`
$DIR/src/downloads_counter.rs:323:17-323:52: `.persist_next_shard_with_conn(conn)`
$DIR/src/downloads_counter.rs:327:17-327:31: `pending -= 10;`
$DIR/src/downloads_counter.rs:337:17-337:60: `state.assert_downloads_count(conn, v1, 10);`
$DIR/src/downloads_counter.rs:337:22-337:59: `.assert_downloads_count(conn, v1, 10)`
$DIR/src/downloads_counter.rs:339:17-339:30: `pending -= 5;`
$DIR/src/downloads_counter.rs:365:9-365:52: `state.assert_downloads_count(conn, v1, 10);`
$DIR/src/downloads_counter.rs:365:14-365:51: `.assert_downloads_count(conn, v1, 10)`
$DIR/src/downloads_counter.rs:372:13-372:61: `map.determine_map(&v1) == map.determine_map(&v2)`
$DIR/src/downloads_counter.rs:372:16-372:35: `.determine_map(&v1)`
$DIR/src/downloads_counter.rs:372:42-372:61: `.determine_map(&v2)`
$DIR/src/downloads_counter.rs:379:13-379:61: `map.determine_map(&v1) != map.determine_map(&v2)`
$DIR/src/downloads_counter.rs:379:16-379:35: `.determine_map(&v1)`
$DIR/src/downloads_counter.rs:379:42-379:61: `.determine_map(&v2)`
$DIR/src/metrics/log_encoder.rs:226:9-226:55: `registry.register(Box::new(counter.clone()))?;`
$DIR/src/metrics/log_encoder.rs:226:17-226:53: `.register(Box::new(counter.clone()))`
$DIR/src/metrics/log_encoder.rs:240:9-240:28: `counter.inc_by(42);`
$DIR/src/metrics/log_encoder.rs:240:16-240:27: `.inc_by(42)`
$DIR/src/metrics/log_encoder.rs:260:9-260:53: `registry.register(Box::new(gauge.clone()))?;`
$DIR/src/metrics/log_encoder.rs:260:17-260:51: `.register(Box::new(gauge.clone()))`
$DIR/src/metrics/log_encoder.rs:274:9-274:23: `gauge.set(42);`
$DIR/src/metrics/log_encoder.rs:274:14-274:22: `.set(42)`
$DIR/src/metrics/log_encoder.rs:297:9-297:57: `registry.register(Box::new(histogram.clone()))?;`
$DIR/src/metrics/log_encoder.rs:297:17-297:55: `.register(Box::new(histogram.clone()))`
$DIR/src/metrics/log_encoder.rs:301:13-301:38: `histogram.observe(value);`
$DIR/src/metrics/log_encoder.rs:301:22-301:37: `.observe(value)`
$DIR/src/metrics/log_encoder.rs:302:13-302:28: `value += 0.001;`
$DIR/src/metrics/log_encoder.rs:334:9-334:57: `registry.register(Box::new(gauge_vec.clone()))?;`
$DIR/src/metrics/log_encoder.rs:334:17-334:55: `.register(Box::new(gauge_vec.clone()))`
$DIR/src/metrics/log_encoder.rs:336:9-336:60: `gauge_vec.with_label_values(&["foo", "1"]).set(42);`
$DIR/src/metrics/log_encoder.rs:336:18-336:51: `.with_label_values(&["foo", "1"])`
$DIR/src/metrics/log_encoder.rs:336:51-336:59: `.set(42)`
$DIR/src/metrics/log_encoder.rs:337:9-337:60: `gauge_vec.with_label_values(&["bar", "2"]).set(98);`
$DIR/src/metrics/log_encoder.rs:337:18-337:51: `.with_label_values(&["bar", "2"])`
$DIR/src/metrics/log_encoder.rs:337:51-337:59: `.set(98)`
$DIR/src/metrics/log_encoder.rs:374:9-374:45: `registry.register(Box::new(gauge))?;`
$DIR/src/metrics/log_encoder.rs:374:17-374:43: `.register(Box::new(gauge))`
$DIR/src/metrics/log_encoder.rs:377:9-377:68: `LogEncoder::new().encode(&registry.gather(), &mut output)?;`
$DIR/src/metrics/log_encoder.rs:377:26-377:66: `.encode(&registry.gather(), &mut output)`
$DIR/src/metrics/log_encoder.rs:377:43-377:52: `.gather()`
$DIR/src/metrics/log_encoder.rs:389:28-389:48: `.collect::<Vec<_>>()`
$DIR/src/metrics/log_encoder.rs:404:29-404:49: `.collect::<Vec<_>>()`
$DIR/src/middleware/normalize_path.rs:73:48-73:57: `.body(())`
$DIR/src/middleware/normalize_path.rs:74:9-74:40: `normalize_path_inner(&mut req);`
$DIR/src/middleware/normalize_path.rs:81:48-81:57: `.body(())`
$DIR/src/middleware/normalize_path.rs:82:9-82:40: `normalize_path_inner(&mut req);`
$DIR/src/middleware/normalize_path.rs:89:53-89:62: `.body(())`
$DIR/src/middleware/normalize_path.rs:90:9-90:40: `normalize_path_inner(&mut req);`
$DIR/src/models/category.rs:167:9-174:23: `insert_into(categories)
            .values(&vec![
                (category.eq("Cat 2"), slug.eq("cat2")),
                (category.eq("Cat 1"), slug.eq("cat1")),
                (category.eq("Cat 1::sub"), slug.eq("cat1::sub")),
            ])
            .execute(conn)
            .unwrap();`
$DIR/src/models/category.rs:168:13-172:15: `.values(&vec![
                (category.eq("Cat 2"), slug.eq("cat2")),
                (category.eq("Cat 1"), slug.eq("cat1")),
                (category.eq("Cat 1::sub"), slug.eq("cat1::sub")),
            ])`
$DIR/src/models/category.rs:173:13-173:27: `.execute(conn)`
$DIR/src/models/category.rs:178:13-178:25: `.into_iter()`
$DIR/src/models/category.rs:179:13-179:33: `.map(|c| c.category)`
$DIR/src/models/category.rs:180:13-180:33: `.collect::<Vec<_>>()`
$DIR/src/models/category.rs:189:9-196:23: `insert_into(categories)
            .values(&vec![
                (category.eq("Cat 1"), slug.eq("cat1"), crates_cnt.eq(0)),
                (category.eq("Cat 2"), slug.eq("cat2"), crates_cnt.eq(2)),
                (category.eq("Cat 3"), slug.eq("cat3"), crates_cnt.eq(1)),
            ])
            .execute(conn)
            .unwrap();`
$DIR/src/models/category.rs:190:13-194:15: `.values(&vec![
                (category.eq("Cat 1"), slug.eq("cat1"), crates_cnt.eq(0)),
                (category.eq("Cat 2"), slug.eq("cat2"), crates_cnt.eq(2)),
                (category.eq("Cat 3"), slug.eq("cat3"), crates_cnt.eq(1)),
            ])`
$DIR/src/models/category.rs:195:13-195:27: `.execute(conn)`
$DIR/src/models/category.rs:200:13-200:25: `.into_iter()`
$DIR/src/models/category.rs:201:13-201:33: `.map(|c| c.category)`
$DIR/src/models/category.rs:202:13-202:33: `.collect::<Vec<_>>()`
$DIR/src/models/category.rs:215:9-221:23: `insert_into(categories)
            .values(&vec![
                (category.eq("Cat 1"), slug.eq("cat1")),
                (category.eq("Cat 2"), slug.eq("cat2")),
            ])
            .execute(conn)
            .unwrap();`
$DIR/src/models/category.rs:216:13-219:15: `.values(&vec![
                (category.eq("Cat 1"), slug.eq("cat1")),
                (category.eq("Cat 2"), slug.eq("cat2")),
            ])`
$DIR/src/models/category.rs:220:13-220:27: `.execute(conn)`
$DIR/src/models/category.rs:225:13-225:25: `.into_iter()`
$DIR/src/models/category.rs:226:13-226:33: `.map(|c| c.category)`
$DIR/src/models/category.rs:227:13-227:33: `.collect::<Vec<_>>()`
$DIR/src/models/category.rs:233:13-233:25: `.into_iter()`
$DIR/src/models/category.rs:234:13-234:33: `.map(|c| c.category)`
$DIR/src/models/category.rs:235:13-235:33: `.collect::<Vec<_>>()`
$DIR/src/models/category.rs:244:9-266:23: `insert_into(categories)
            .values(&vec![
                (category.eq("Cat 1"), slug.eq("cat1"), crates_cnt.eq(1)),
                (
                    category.eq("Cat 1::sub"),
                    slug.eq("cat1::sub"),
                    crates_cnt.eq(2),
                ),
                (category.eq("Cat 2"), slug.eq("cat2"), crates_cnt.eq(3)),
                (
                    category.eq("Cat 2::Sub 1"),
                    slug.eq("cat2::sub1"),
                    crates_cnt.eq(4),
                ),
                (
                    category.eq("Cat 2::Sub 2"),
                    slug.eq("cat2::sub2"),
                    crates_cnt.eq(5),
                ),
                (category.eq("Cat 3"), slug.eq("cat3"), crates_cnt.eq(6)),
            ])
            .execute(conn)
            .unwrap();`
$DIR/src/models/category.rs:245:13-264:15: `.values(&vec![
                (category.eq("Cat 1"), slug.eq("cat1"), crates_cnt.eq(1)),
                (
                    category.eq("Cat 1::sub"),
                    slug.eq("cat1::sub"),
                    crates_cnt.eq(2),
                ),
                (category.eq("Cat 2"), slug.eq("cat2"), crates_cnt.eq(3)),
                (
                    category.eq("Cat 2::Sub 1"),
                    slug.eq("cat2::sub1"),
                    crates_cnt.eq(4),
                ),
                (
                    category.eq("Cat 2::Sub 2"),
                    slug.eq("cat2::sub2"),
                    crates_cnt.eq(5),
                ),
                (category.eq("Cat 3"), slug.eq("cat3"), crates_cnt.eq(6)),
            ])`
$DIR/src/models/category.rs:265:13-265:27: `.execute(conn)`
$DIR/src/models/category.rs:270:13-270:25: `.into_iter()`
$DIR/src/models/category.rs:271:13-271:49: `.map(|c| (c.category, c.crates_cnt))`
$DIR/src/models/category.rs:272:13-272:33: `.collect::<Vec<_>>()`
$DIR/src/models/category.rs:285:9-307:23: `insert_into(categories)
            .values(&vec![
                (category.eq("Cat 1"), slug.eq("cat1"), crates_cnt.eq(1)),
                (
                    category.eq("Cat 1::sub"),
                    slug.eq("cat1::sub"),
                    crates_cnt.eq(2),
                ),
                (category.eq("Cat 2"), slug.eq("cat2"), crates_cnt.eq(3)),
                (
                    category.eq("Cat 2::Sub 1"),
                    slug.eq("cat2::sub1"),
                    crates_cnt.eq(4),
                ),
                (
                    category.eq("Cat 2::Sub 2"),
                    slug.eq("cat2::sub2"),
                    crates_cnt.eq(5),
                ),
                (category.eq("Cat 3"), slug.eq("cat3"), crates_cnt.eq(6)),
            ])
            .execute(conn)
            .unwrap();`
$DIR/src/models/category.rs:286:13-305:15: `.values(&vec![
                (category.eq("Cat 1"), slug.eq("cat1"), crates_cnt.eq(1)),
                (
                    category.eq("Cat 1::sub"),
                    slug.eq("cat1::sub"),
                    crates_cnt.eq(2),
                ),
                (category.eq("Cat 2"), slug.eq("cat2"), crates_cnt.eq(3)),
                (
                    category.eq("Cat 2::Sub 1"),
                    slug.eq("cat2::sub1"),
                    crates_cnt.eq(4),
                ),
                (
                    category.eq("Cat 2::Sub 2"),
                    slug.eq("cat2::sub2"),
                    crates_cnt.eq(5),
                ),
                (category.eq("Cat 3"), slug.eq("cat3"), crates_cnt.eq(6)),
            ])`
$DIR/src/models/category.rs:306:13-306:27: `.execute(conn)`
$DIR/src/models/category.rs:311:13-311:25: `.into_iter()`
$DIR/src/models/category.rs:312:13-312:49: `.map(|c| (c.category, c.crates_cnt))`
$DIR/src/models/category.rs:313:13-313:33: `.collect::<Vec<_>>()`
$DIR/src/models/category.rs:319:13-319:25: `.into_iter()`
$DIR/src/models/category.rs:320:13-320:49: `.map(|c| (c.category, c.crates_cnt))`
$DIR/src/models/category.rs:321:13-321:33: `.collect::<Vec<_>>()`
$DIR/src/models/category.rs:330:9-362:23: `insert_into(categories)
            .values(&vec![
                (category.eq("Cat 1"), slug.eq("cat1"), crates_cnt.eq(1)),
                (
                    category.eq("Cat 1::sub1"),
                    slug.eq("cat1::sub1"),
                    crates_cnt.eq(2),
                ),
                (
                    category.eq("Cat 1::sub2"),
                    slug.eq("cat1::sub2"),
                    crates_cnt.eq(2),
                ),
                (
                    category.eq("Cat 1::sub1::subsub1"),
                    slug.eq("cat1::sub1::subsub1"),
                    crates_cnt.eq(2),
                ),
                (category.eq("Cat 2"), slug.eq("cat2"), crates_cnt.eq(3)),
                (
                    category.eq("Cat 2::Sub 1"),
                    slug.eq("cat2::sub1"),
                    crates_cnt.eq(4),
                ),
                (
                    category.eq("Cat 2::Sub 2"),
                    slug.eq("cat2::sub2"),
                    crates_cnt.eq(5),
                ),
                (category.eq("Cat 3"), slug.eq("cat3"), crates_cnt.eq(200)),
            ])
            .execute(conn)
            .unwrap();`
$DIR/src/models/category.rs:331:13-360:15: `.values(&vec![
                (category.eq("Cat 1"), slug.eq("cat1"), crates_cnt.eq(1)),
                (
                    category.eq("Cat 1::sub1"),
                    slug.eq("cat1::sub1"),
                    crates_cnt.eq(2),
                ),
                (
                    category.eq("Cat 1::sub2"),
                    slug.eq("cat1::sub2"),
                    crates_cnt.eq(2),
                ),
                (
                    category.eq("Cat 1::sub1::subsub1"),
                    slug.eq("cat1::sub1::subsub1"),
                    crates_cnt.eq(2),
                ),
                (category.eq("Cat 2"), slug.eq("cat2"), crates_cnt.eq(3)),
                (
                    category.eq("Cat 2::Sub 1"),
                    slug.eq("cat2::sub1"),
                    crates_cnt.eq(4),
                ),
                (
                    category.eq("Cat 2::Sub 2"),
                    slug.eq("cat2::sub2"),
                    crates_cnt.eq(5),
                ),
                (category.eq("Cat 3"), slug.eq("cat3"), crates_cnt.eq(200)),
            ])`
$DIR/src/models/category.rs:361:13-361:27: `.execute(conn)`
$DIR/src/models/category.rs:364:60-364:72: `.first(conn)`
$DIR/src/models/category.rs:365:26-365:46: `.subcategories(conn)`
$DIR/src/models/category.rs:366:26-366:50: `.parent_categories(conn)`
$DIR/src/models/keyword.rs:100:9-103:23: `diesel::insert_into(keywords::table)
            .values(keywords::keyword.eq("NO"))
            .execute(conn)
            .unwrap();`
$DIR/src/models/keyword.rs:101:13-101:48: `.values(keywords::keyword.eq("NO"))`
$DIR/src/models/keyword.rs:101:38-101:47: `.eq("NO")`
$DIR/src/models/keyword.rs:102:13-102:27: `.execute(conn)`
$DIR/src/models/token/scopes.rs:136:9-136:66: `assert(EndpointScope::ChangeOwners, "\"change-owners\"");`
$DIR/src/models/token/scopes.rs:137:9-137:62: `assert(EndpointScope::PublishNew, "\"publish-new\"");`
$DIR/src/models/token/scopes.rs:138:9-138:68: `assert(EndpointScope::PublishUpdate, "\"publish-update\"");`
$DIR/src/models/token/scopes.rs:149:9-149:34: `assert("foo", "\"foo\"");`
$DIR/src/models/token/scopes.rs:150:9-150:36: `assert("foo*", "\"foo*\"");`
$DIR/src/models/token/scopes.rs:151:9-151:32: `assert("f*", "\"f*\"");`
$DIR/src/models/token/scopes.rs:152:9-152:30: `assert("*", "\"*\"");`
$DIR/src/models/token/scopes.rs:153:9-153:42: `assert("foo-bar", "\"foo-bar\"");`
$DIR/src/models/token/scopes.rs:154:9-154:42: `assert("foo_bar", "\"foo_bar\"");`
$DIR/src/models/token/scopes.rs:160:9-160:49: `assert_ok!(CrateScope::try_from("foo"));`
$DIR/src/models/token/scopes.rs:163:9-163:50: `assert_ok!(CrateScope::try_from("foo*"));`
$DIR/src/models/token/scopes.rs:164:9-164:48: `assert_ok!(CrateScope::try_from("f*"));`
$DIR/src/models/token/scopes.rs:165:9-165:47: `assert_ok!(CrateScope::try_from("*"));`
$DIR/src/models/token/scopes.rs:166:9-166:52: `assert_err!(CrateScope::try_from("te*st"));`
$DIR/src/models/token/scopes.rs:169:9-169:53: `assert_ok!(CrateScope::try_from("foo-bar"));`
$DIR/src/models/token/scopes.rs:170:9-170:53: `assert_ok!(CrateScope::try_from("foo_bar"));`
$DIR/src/models/token/scopes.rs:173:9-173:47: `assert_err!(CrateScope::try_from(""));`
$DIR/src/models/token.rs:111:42-111:51: `.hashed()`
$DIR/src/models/token.rs:116:17-116:41: `.and_hms_opt(14, 23, 11)`
$DIR/src/models/token.rs:121:21-121:45: `.and_hms_opt(14, 23, 12)`
$DIR/src/models/token.rs:129:9-131:67: `assert_some!(json
            .as_str()
            .find(r#""created_at":"2017-01-06T14:23:11+00:00""#));`
$DIR/src/models/version.rs:307:9-307:50: `assert_ok!(validate_license_expr("MIT"));`
$DIR/src/models/version.rs:308:9-308:64: `assert_ok!(validate_license_expr("MIT OR Apache-2.0"));`
$DIR/src/models/version.rs:309:9-309:61: `assert_ok!(validate_license_expr("MIT/Apache-2.0"));`
$DIR/src/models/version.rs:310:9-310:65: `assert_ok!(validate_license_expr("MIT AND Apache-2.0"));`
$DIR/src/models/version.rs:311:9-311:74: `assert_ok!(validate_license_expr("MIT OR (Apache-2.0 AND MIT)"));`
$DIR/src/models/version.rs:312:9-312:55: `assert_ok!(validate_license_expr("GPL-3.0+"));`
$DIR/src/publish_rate_limit.rs:126:26-126:74: `.take_token(new_user(conn, "user1")?, now, conn)`
$DIR/src/publish_rate_limit.rs:138:26-138:74: `.take_token(new_user(conn, "user2")?, now, conn)`
$DIR/src/publish_rate_limit.rs:158:26-158:57: `.take_token(user_id, now, conn)`
$DIR/src/publish_rate_limit.rs:179:26-179:65: `.take_token(user_id, refill_time, conn)`
$DIR/src/publish_rate_limit.rs:204:26-204:65: `.take_token(user_id, refill_time, conn)`
$DIR/src/publish_rate_limit.rs:224:26-224:95: `.take_token(user_id, now + chrono::Duration::milliseconds(250), conn)`
$DIR/src/publish_rate_limit.rs:245:26-245:57: `.take_token(user_id, now, conn)`
$DIR/src/publish_rate_limit.rs:253:26-253:57: `.take_token(user_id, now, conn)`
$DIR/src/publish_rate_limit.rs:269:26-269:65: `.take_token(user_id, refill_time, conn)`
$DIR/src/publish_rate_limit.rs:291:26-291:65: `.take_token(user_id, refill_time, conn)`
$DIR/src/publish_rate_limit.rs:314:9-319:29: `diesel::insert_into(publish_rate_overrides::table)
            .values((
                publish_rate_overrides::user_id.eq(user_id),
                publish_rate_overrides::burst.eq(20),
            ))
            .execute(conn)?;`
$DIR/src/publish_rate_limit.rs:315:13-318:15: `.values((
                publish_rate_overrides::user_id.eq(user_id),
                publish_rate_overrides::burst.eq(20),
            ))`
$DIR/src/publish_rate_limit.rs:316:48-316:60: `.eq(user_id)`
$DIR/src/publish_rate_limit.rs:317:46-317:53: `.eq(20)`
$DIR/src/publish_rate_limit.rs:319:13-319:27: `.execute(conn)`
$DIR/src/publish_rate_limit.rs:321:26-321:57: `.take_token(user_id, now, conn)`
$DIR/src/publish_rate_limit.rs:322:32-322:69: `.take_token(other_user_id, now, conn)`
$DIR/src/publish_rate_limit.rs:341:9-347:29: `diesel::insert_into(publish_rate_overrides::table)
            .values((
                publish_rate_overrides::user_id.eq(user_id),
                publish_rate_overrides::burst.eq(20),
                publish_rate_overrides::expires_at.eq(now + chrono::Duration::days(30)),
            ))
            .execute(conn)?;`
$DIR/src/publish_rate_limit.rs:342:13-346:15: `.values((
                publish_rate_overrides::user_id.eq(user_id),
                publish_rate_overrides::burst.eq(20),
                publish_rate_overrides::expires_at.eq(now + chrono::Duration::days(30)),
            ))`
$DIR/src/publish_rate_limit.rs:343:48-343:60: `.eq(user_id)`
$DIR/src/publish_rate_limit.rs:344:46-344:53: `.eq(20)`
$DIR/src/publish_rate_limit.rs:345:51-345:88: `.eq(now + chrono::Duration::days(30))`
$DIR/src/publish_rate_limit.rs:347:13-347:27: `.execute(conn)`
$DIR/src/publish_rate_limit.rs:349:26-349:57: `.take_token(user_id, now, conn)`
$DIR/src/publish_rate_limit.rs:350:32-350:69: `.take_token(other_user_id, now, conn)`
$DIR/src/publish_rate_limit.rs:356:9-359:29: `diesel::update(publish_rate_overrides::table)
            .set(publish_rate_overrides::expires_at.eq(now - chrono::Duration::days(30)))
            .filter(publish_rate_overrides::user_id.eq(user_id))
            .execute(conn)?;`
$DIR/src/publish_rate_limit.rs:357:13-357:90: `.set(publish_rate_overrides::expires_at.eq(now - chrono::Duration::days(30)))`
$DIR/src/publish_rate_limit.rs:357:52-357:89: `.eq(now - chrono::Duration::days(30))`
$DIR/src/publish_rate_limit.rs:358:13-358:65: `.filter(publish_rate_overrides::user_id.eq(user_id))`
$DIR/src/publish_rate_limit.rs:358:52-358:64: `.eq(user_id)`
$DIR/src/publish_rate_limit.rs:359:13-359:27: `.execute(conn)`
$DIR/src/publish_rate_limit.rs:361:26-361:57: `.take_token(user_id, now, conn)`
$DIR/src/publish_rate_limit.rs:362:32-362:69: `.take_token(other_user_id, now, conn)`
$DIR/src/router.rs:205:13-205:27: `.parse::<u8>()`
$DIR/src/router.rs:206:13-206:64: `.map_err(|err| err.chain(internal("middle error")))`
$DIR/src/router.rs:206:31-206:63: `.chain(internal("middle error"))`
$DIR/src/router.rs:207:13-207:78: `.map_err(|err| err.chain(bad_request("outer user facing error")))`
$DIR/src/router.rs:207:31-207:77: `.chain(bad_request("outer user facing error"))`
$DIR/src/router.rs:209:13-209:29: `.into_response()`
$DIR/src/swirl/runner.rs:308:9-313:12: `runner.get_single_job(dummy_sender(), move |job, _| {
            fetch_barrier.0.wait(); // Tell thread 2 it can lock its job
            assert_eq!(first_job_id, job.id);
            return_barrier.0.wait(); // Wait for thread 2 to lock its job
            Ok(())
        });`
$DIR/src/swirl/runner.rs:308:15-313:11: `.get_single_job(dummy_sender(), move |job, _| {
            fetch_barrier.0.wait(); // Tell thread 2 it can lock its job
            assert_eq!(first_job_id, job.id);
            return_barrier.0.wait(); // Wait for thread 2 to lock its job
            Ok(())
        })`
$DIR/src/swirl/runner.rs:309:13-309:36: `fetch_barrier.0.wait();`
$DIR/src/swirl/runner.rs:309:28-309:35: `.wait()`
$DIR/src/swirl/runner.rs:311:13-311:37: `return_barrier.0.wait();`
$DIR/src/swirl/runner.rs:311:29-311:36: `.wait()`
$DIR/src/swirl/runner.rs:312:13-312:19: `Ok(())`
$DIR/src/swirl/runner.rs:315:9-315:33: `fetch_barrier2.0.wait();`
$DIR/src/swirl/runner.rs:315:25-315:32: `.wait()`
$DIR/src/swirl/runner.rs:316:9-320:12: `runner.get_single_job(dummy_sender(), move |job, _| {
            assert_eq!(second_job_id, job.id);
            return_barrier2.0.wait(); // Tell thread 1 it can unlock its job
            Ok(())
        });`
$DIR/src/swirl/runner.rs:316:15-320:11: `.get_single_job(dummy_sender(), move |job, _| {
            assert_eq!(second_job_id, job.id);
            return_barrier2.0.wait(); // Tell thread 1 it can unlock its job
            Ok(())
        })`
$DIR/src/swirl/runner.rs:318:13-318:38: `return_barrier2.0.wait();`
$DIR/src/swirl/runner.rs:318:30-318:37: `.wait()`
$DIR/src/swirl/runner.rs:319:13-319:19: `Ok(())`
$DIR/src/swirl/runner.rs:322:15-322:31: `.wait_for_jobs()`
$DIR/src/swirl/runner.rs:330:9-330:35: `create_dummy_job(&runner);`
$DIR/src/swirl/runner.rs:332:9-332:62: `runner.get_single_job(dummy_sender(), |_, _| Ok(()));`
$DIR/src/swirl/runner.rs:332:15-332:61: `.get_single_job(dummy_sender(), |_, _| Ok(()))`
$DIR/src/swirl/runner.rs:333:9-333:41: `runner.wait_for_jobs().unwrap();`
$DIR/src/swirl/runner.rs:333:15-333:31: `.wait_for_jobs()`
$DIR/src/swirl/runner.rs:336:13-336:21: `.count()`
$DIR/src/swirl/runner.rs:337:13-337:60: `.get_result(&mut *runner.connection().unwrap())`
$DIR/src/swirl/runner.rs:337:37-337:50: `.connection()`
$DIR/src/swirl/runner.rs:346:9-346:35: `create_dummy_job(&runner);`
$DIR/src/swirl/runner.rs:350:9-356:12: `runner.get_single_job(dummy_sender(), move |_, state| {
            state.conn.transaction(|_| {
                barrier.0.wait();
                // The job should go back into the queue after a panic
                panic!();
            })
        });`
$DIR/src/swirl/runner.rs:350:15-356:11: `.get_single_job(dummy_sender(), move |_, state| {
            state.conn.transaction(|_| {
                barrier.0.wait();
                // The job should go back into the queue after a panic
                panic!();
            })
        })`
$DIR/src/swirl/runner.rs:351:13-355:15: `state.conn.transaction(|_| {
                barrier.0.wait();
                // The job should go back into the queue after a panic
                panic!();
            })`
$DIR/src/swirl/runner.rs:351:18-355:15: `.conn.transaction(|_| {
                barrier.0.wait();
                // The job should go back into the queue after a panic
                panic!();
            })`
$DIR/src/swirl/runner.rs:352:17-352:34: `barrier.0.wait();`
$DIR/src/swirl/runner.rs:352:26-352:33: `.wait()`
$DIR/src/swirl/runner.rs:358:32-358:45: `.connection()`
$DIR/src/swirl/runner.rs:360:9-360:27: `barrier2.0.wait();`
$DIR/src/swirl/runner.rs:360:19-360:26: `.wait()`
$DIR/src/swirl/runner.rs:367:13-367:24: `.select(id)`
$DIR/src/swirl/runner.rs:368:13-368:35: `.filter(retries.eq(0))`
$DIR/src/swirl/runner.rs:368:28-368:34: `.eq(0)`
$DIR/src/swirl/runner.rs:369:13-369:26: `.for_update()`
$DIR/src/swirl/runner.rs:370:13-370:31: `.load::<i64>(conn)`
$DIR/src/swirl/runner.rs:376:13-376:24: `.select(id)`
$DIR/src/swirl/runner.rs:377:13-377:26: `.for_update()`
$DIR/src/swirl/runner.rs:378:13-378:31: `.load::<i64>(conn)`
$DIR/src/swirl/runner.rs:382:15-382:31: `.wait_for_jobs()`
$DIR/src/swirl/runner.rs:391:9-391:64: `runner.get_single_job(dummy_sender(), |_, _| panic!());`
$DIR/src/swirl/runner.rs:391:15-391:63: `.get_single_job(dummy_sender(), |_, _| panic!())`
$DIR/src/swirl/runner.rs:392:9-392:41: `runner.wait_for_jobs().unwrap();`
$DIR/src/swirl/runner.rs:392:15-392:31: `.wait_for_jobs()`
$DIR/src/swirl/runner.rs:395:13-395:26: `.find(job_id)`
$DIR/src/swirl/runner.rs:396:13-396:29: `.select(retries)`
$DIR/src/swirl/runner.rs:397:13-397:26: `.for_update()`
$DIR/src/swirl/runner.rs:398:13-398:62: `.first::<i32>(&mut *runner.connection().unwrap())`
$DIR/src/swirl/runner.rs:398:39-398:52: `.connection()`
$DIR/src/tests/account_lock.rs:26:45-26:57: `.with_user()`
$DIR/src/tests/account_lock.rs:27:5-27:50: `lock_account(&app, user.as_model().id, None);`
$DIR/src/tests/account_lock.rs:27:28-27:39: `.as_model()`
$DIR/src/tests/account_lock.rs:29:24-29:39: `.get::<()>(URL)`
$DIR/src/tests/account_lock.rs:41:27-41:39: `.naive_utc()`
$DIR/src/tests/account_lock.rs:43:45-43:57: `.with_user()`
$DIR/src/tests/account_lock.rs:44:5-44:57: `lock_account(&app, user.as_model().id, Some(until));`
$DIR/src/tests/account_lock.rs:44:28-44:39: `.as_model()`
$DIR/src/tests/account_lock.rs:46:22-46:57: `.format("%Y-%m-%d at %H:%M:%S UTC")`
$DIR/src/tests/account_lock.rs:47:24-47:39: `.get::<()>(URL)`
$DIR/src/tests/account_lock.rs:59:27-59:39: `.naive_utc()`
$DIR/src/tests/account_lock.rs:61:45-61:57: `.with_user()`
$DIR/src/tests/account_lock.rs:62:5-62:57: `lock_account(&app, user.as_model().id, Some(until));`
$DIR/src/tests/account_lock.rs:62:28-62:39: `.as_model()`
$DIR/src/tests/account_lock.rs:64:9-64:39: `.get::<serde_json::Value>(URL)`
$DIR/src/tests/all.rs:172:35-172:43: `.empty()`
$DIR/src/tests/all.rs:173:18-173:29: `.as_inner()`
$DIR/src/tests/all.rs:175:21-175:44: `.primary_database.get()`
$DIR/src/tests/all.rs:176:21-176:44: `.primary_database.get()`
$DIR/src/tests/authentication.rs:12:36-12:44: `.empty()`
$DIR/src/tests/authentication.rs:13:38-13:47: `.get(URL)`
$DIR/src/tests/authentication.rs:21:36-21:44: `.empty()`
$DIR/src/tests/authentication.rs:22:27-22:61: `.request_builder(Method::GET, URL)`
$DIR/src/tests/authentication.rs:23:5-23:63: `request.header(header::AUTHORIZATION, "cio1tkfake-token");`
$DIR/src/tests/authentication.rs:23:12-23:62: `.header(header::AUTHORIZATION, "cio1tkfake-token")`
$DIR/src/tests/authentication.rs:24:38-24:51: `.run(request)`
$DIR/src/tests/authentication.rs:35:38-35:46: `.empty()`
$DIR/src/tests/authentication.rs:37:26-37:37: `.as_inner()`
$DIR/src/tests/authentication.rs:37:37-37:51: `.session_key()`
$DIR/src/tests/authentication.rs:40:27-40:61: `.request_builder(Method::GET, URL)`
$DIR/src/tests/authentication.rs:41:5-41:45: `request.header(header::COOKIE, &cookie);`
$DIR/src/tests/authentication.rs:41:12-41:44: `.header(header::COOKIE, &cookie)`
$DIR/src/tests/authentication.rs:43:21-43:40: `.run::<()>(request)`
$DIR/src/tests/blocked_routes.rs:8:9-10:11: `.with_config(|config| {
            config.blocked_routes.clear();
        })`
$DIR/src/tests/blocked_routes.rs:9:13-9:43: `config.blocked_routes.clear();`
$DIR/src/tests/blocked_routes.rs:9:19-9:42: `.blocked_routes.clear()`
$DIR/src/tests/blocked_routes.rs:11:9-11:21: `.with_user()`
$DIR/src/tests/blocked_routes.rs:13:5-17:8: `app.db(|conn| {
        CrateBuilder::new("foo", user.as_model().id)
            .version(VersionBuilder::new("1.0.0"))
            .expect_build(conn);
    });`
$DIR/src/tests/blocked_routes.rs:13:8-17:7: `.db(|conn| {
        CrateBuilder::new("foo", user.as_model().id)
            .version(VersionBuilder::new("1.0.0"))
            .expect_build(conn);
    })`
$DIR/src/tests/blocked_routes.rs:14:9-16:33: `CrateBuilder::new("foo", user.as_model().id)
            .version(VersionBuilder::new("1.0.0"))
            .expect_build(conn);`
$DIR/src/tests/blocked_routes.rs:14:38-14:49: `.as_model()`
$DIR/src/tests/blocked_routes.rs:15:13-15:51: `.version(VersionBuilder::new("1.0.0"))`
$DIR/src/tests/blocked_routes.rs:16:13-16:32: `.expect_build(conn)`
$DIR/src/tests/blocked_routes.rs:19:22-19:69: `.get::<()>("/api/v1/crates/foo/1.0.0/download")`
$DIR/src/tests/blocked_routes.rs:19:69-19:78: `.status()`
$DIR/src/tests/blocked_routes.rs:26:9-31:11: `.with_config(|config| {
            config.blocked_routes.clear();
            config
                .blocked_routes
                .insert("/api/v1/crates/:crate_id/:version/download".into());
        })`
$DIR/src/tests/blocked_routes.rs:27:13-27:43: `config.blocked_routes.clear();`
$DIR/src/tests/blocked_routes.rs:27:19-27:42: `.blocked_routes.clear()`
$DIR/src/tests/blocked_routes.rs:28:13-30:78: `config
                .blocked_routes
                .insert("/api/v1/crates/:crate_id/:version/download".into());`
$DIR/src/tests/blocked_routes.rs:29:17-30:77: `.blocked_routes
                .insert("/api/v1/crates/:crate_id/:version/download".into())`
$DIR/src/tests/blocked_routes.rs:30:69-30:76: `.into()`
$DIR/src/tests/blocked_routes.rs:32:9-32:21: `.with_user()`
$DIR/src/tests/blocked_routes.rs:34:5-38:8: `app.db(|conn| {
        CrateBuilder::new("foo", user.as_model().id)
            .version(VersionBuilder::new("1.0.0"))
            .expect_build(conn);
    });`
$DIR/src/tests/blocked_routes.rs:34:8-38:7: `.db(|conn| {
        CrateBuilder::new("foo", user.as_model().id)
            .version(VersionBuilder::new("1.0.0"))
            .expect_build(conn);
    })`
$DIR/src/tests/blocked_routes.rs:35:9-37:33: `CrateBuilder::new("foo", user.as_model().id)
            .version(VersionBuilder::new("1.0.0"))
            .expect_build(conn);`
$DIR/src/tests/blocked_routes.rs:35:38-35:49: `.as_model()`
$DIR/src/tests/blocked_routes.rs:36:13-36:51: `.version(VersionBuilder::new("1.0.0"))`
$DIR/src/tests/blocked_routes.rs:37:13-37:32: `.expect_build(conn)`
$DIR/src/tests/blocked_routes.rs:40:22-40:69: `.get::<()>("/api/v1/crates/foo/1.0.0/download")`
$DIR/src/tests/blocked_routes.rs:40:69-40:78: `.status()`
$DIR/src/tests/categories.rs:60:5-60:93: `::crates_io::boot::categories::sync_with_connection(ALGORITHMS_AND_SUCH, conn).unwrap();`
$DIR/src/tests/categories.rs:70:5-70:93: `::crates_io::boot::categories::sync_with_connection(ALGORITHMS_AND_SUCH, conn).unwrap();`
$DIR/src/tests/categories.rs:71:5-71:84: `::crates_io::boot::categories::sync_with_connection(ALGORITHMS, conn).unwrap();`
$DIR/src/tests/categories.rs:81:5-81:93: `::crates_io::boot::categories::sync_with_connection(ALGORITHMS_AND_SUCH, conn).unwrap();`
$DIR/src/tests/categories.rs:82:5-82:96: `::crates_io::boot::categories::sync_with_connection(ALGORITHMS_AND_ANOTHER, conn).unwrap();`
$DIR/src/tests/dump_db.rs:6:5-6:47: `crates_io::util::tracing::init_for_test();`
$DIR/src/tests/dump_db.rs:13:5-13:48: `directory.populate(&database_url).unwrap();`
$DIR/src/tests/dump_db.rs:13:14-13:38: `.populate(&database_url)`
$DIR/src/tests/dump_db.rs:17:34-17:64: `.export_dir.join("import.sql")`
$DIR/src/tests/dump_db.rs:18:45-18:60: `.database_url()`
$DIR/src/tests/github_secret_scanning.rs:22:51-22:64: `.with_token()`
$DIR/src/tests/github_secret_scanning.rs:28:5-34:8: `app.db(|conn| {
        let tokens: Vec<ApiToken> = assert_ok!(ApiToken::belonging_to(user.as_model())
            .filter(api_tokens::revoked.eq(false))
            .load(conn));
        assert_eq!(tokens.len(), 1);
        assert_eq!(tokens[0].name, token.as_model().name);
    });`
$DIR/src/tests/github_secret_scanning.rs:28:8-34:7: `.db(|conn| {
        let tokens: Vec<ApiToken> = assert_ok!(ApiToken::belonging_to(user.as_model())
            .filter(api_tokens::revoked.eq(false))
            .load(conn));
        assert_eq!(tokens.len(), 1);
        assert_eq!(tokens[0].name, token.as_model().name);
    })`
$DIR/src/tests/github_secret_scanning.rs:37:5-43:8: `app.db(|conn| {
        let hashed_token = HashedToken::hash("some_token");
        diesel::update(api_tokens::table)
            .set(api_tokens::token.eq(hashed_token))
            .execute(conn)
            .unwrap();
    });`
$DIR/src/tests/github_secret_scanning.rs:37:8-43:7: `.db(|conn| {
        let hashed_token = HashedToken::hash("some_token");
        diesel::update(api_tokens::table)
            .set(api_tokens::token.eq(hashed_token))
            .execute(conn)
            .unwrap();
    })`
$DIR/src/tests/github_secret_scanning.rs:39:9-42:23: `diesel::update(api_tokens::table)
            .set(api_tokens::token.eq(hashed_token))
            .execute(conn)
            .unwrap();`
$DIR/src/tests/github_secret_scanning.rs:40:13-40:53: `.set(api_tokens::token.eq(hashed_token))`
$DIR/src/tests/github_secret_scanning.rs:40:35-40:52: `.eq(hashed_token)`
$DIR/src/tests/github_secret_scanning.rs:41:13-41:27: `.execute(conn)`
$DIR/src/tests/github_secret_scanning.rs:45:27-45:45: `.post_request(URL)`
$DIR/src/tests/github_secret_scanning.rs:46:5-46:37: `request.with_body(GITHUB_ALERT);`
$DIR/src/tests/github_secret_scanning.rs:46:12-46:36: `.with_body(GITHUB_ALERT)`
$DIR/src/tests/github_secret_scanning.rs:47:5-47:82: `request.header("GITHUB-PUBLIC-KEY-IDENTIFIER", GITHUB_PUBLIC_KEY_IDENTIFIER);`
$DIR/src/tests/github_secret_scanning.rs:47:12-47:81: `.header("GITHUB-PUBLIC-KEY-IDENTIFIER", GITHUB_PUBLIC_KEY_IDENTIFIER)`
$DIR/src/tests/github_secret_scanning.rs:48:5-48:80: `request.header("GITHUB-PUBLIC-KEY-SIGNATURE", GITHUB_PUBLIC_KEY_SIGNATURE);`
$DIR/src/tests/github_secret_scanning.rs:48:12-48:79: `.header("GITHUB-PUBLIC-KEY-SIGNATURE", GITHUB_PUBLIC_KEY_SIGNATURE)`
$DIR/src/tests/github_secret_scanning.rs:49:24-49:71: `.run::<Vec<GitHubSecretAlertFeedback>>(request)`
$DIR/src/tests/github_secret_scanning.rs:53:28-53:35: `.good()`
$DIR/src/tests/github_secret_scanning.rs:63:5-72:8: `app.db(|conn| {
        let tokens: Vec<ApiToken> = assert_ok!(ApiToken::belonging_to(user.as_model())
            .filter(api_tokens::revoked.eq(false))
            .load(conn));
        assert_eq!(tokens.len(), 0);
        let tokens: Vec<ApiToken> = assert_ok!(ApiToken::belonging_to(user.as_model())
            .filter(api_tokens::revoked.eq(true))
            .load(conn));
        assert_eq!(tokens.len(), 1);
    });`
$DIR/src/tests/github_secret_scanning.rs:63:8-72:7: `.db(|conn| {
        let tokens: Vec<ApiToken> = assert_ok!(ApiToken::belonging_to(user.as_model())
            .filter(api_tokens::revoked.eq(false))
            .load(conn));
        assert_eq!(tokens.len(), 0);
        let tokens: Vec<ApiToken> = assert_ok!(ApiToken::belonging_to(user.as_model())
            .filter(api_tokens::revoked.eq(true))
            .load(conn));
        assert_eq!(tokens.len(), 1);
    })`
$DIR/src/tests/github_secret_scanning.rs:80:51-80:64: `.with_token()`
$DIR/src/tests/github_secret_scanning.rs:86:5-92:8: `app.db(|conn| {
        let tokens: Vec<ApiToken> = assert_ok!(ApiToken::belonging_to(user.as_model())
            .filter(api_tokens::revoked.eq(false))
            .load(conn));
        assert_eq!(tokens.len(), 1);
        assert_eq!(tokens[0].name, token.as_model().name);
    });`
$DIR/src/tests/github_secret_scanning.rs:86:8-92:7: `.db(|conn| {
        let tokens: Vec<ApiToken> = assert_ok!(ApiToken::belonging_to(user.as_model())
            .filter(api_tokens::revoked.eq(false))
            .load(conn));
        assert_eq!(tokens.len(), 1);
        assert_eq!(tokens[0].name, token.as_model().name);
    })`
$DIR/src/tests/github_secret_scanning.rs:95:5-104:8: `app.db(|conn| {
        let hashed_token = HashedToken::hash("some_token");
        diesel::update(api_tokens::table)
            .set((
                api_tokens::token.eq(hashed_token),
                api_tokens::revoked.eq(true),
            ))
            .execute(conn)
            .unwrap();
    });`
$DIR/src/tests/github_secret_scanning.rs:95:8-104:7: `.db(|conn| {
        let hashed_token = HashedToken::hash("some_token");
        diesel::update(api_tokens::table)
            .set((
                api_tokens::token.eq(hashed_token),
                api_tokens::revoked.eq(true),
            ))
            .execute(conn)
            .unwrap();
    })`
$DIR/src/tests/github_secret_scanning.rs:97:9-103:23: `diesel::update(api_tokens::table)
            .set((
                api_tokens::token.eq(hashed_token),
                api_tokens::revoked.eq(true),
            ))
            .execute(conn)
            .unwrap();`
$DIR/src/tests/github_secret_scanning.rs:98:13-101:15: `.set((
                api_tokens::token.eq(hashed_token),
                api_tokens::revoked.eq(true),
            ))`
$DIR/src/tests/github_secret_scanning.rs:99:34-99:51: `.eq(hashed_token)`
$DIR/src/tests/github_secret_scanning.rs:100:36-100:45: `.eq(true)`
$DIR/src/tests/github_secret_scanning.rs:102:13-102:27: `.execute(conn)`
$DIR/src/tests/github_secret_scanning.rs:106:27-106:45: `.post_request(URL)`
$DIR/src/tests/github_secret_scanning.rs:107:5-107:37: `request.with_body(GITHUB_ALERT);`
$DIR/src/tests/github_secret_scanning.rs:107:12-107:36: `.with_body(GITHUB_ALERT)`
$DIR/src/tests/github_secret_scanning.rs:108:5-108:82: `request.header("GITHUB-PUBLIC-KEY-IDENTIFIER", GITHUB_PUBLIC_KEY_IDENTIFIER);`
$DIR/src/tests/github_secret_scanning.rs:108:12-108:81: `.header("GITHUB-PUBLIC-KEY-IDENTIFIER", GITHUB_PUBLIC_KEY_IDENTIFIER)`
$DIR/src/tests/github_secret_scanning.rs:109:5-109:80: `request.header("GITHUB-PUBLIC-KEY-SIGNATURE", GITHUB_PUBLIC_KEY_SIGNATURE);`
$DIR/src/tests/github_secret_scanning.rs:109:12-109:79: `.header("GITHUB-PUBLIC-KEY-SIGNATURE", GITHUB_PUBLIC_KEY_SIGNATURE)`
$DIR/src/tests/github_secret_scanning.rs:110:24-110:71: `.run::<Vec<GitHubSecretAlertFeedback>>(request)`
$DIR/src/tests/github_secret_scanning.rs:114:28-114:35: `.good()`
$DIR/src/tests/github_secret_scanning.rs:124:5-133:8: `app.db(|conn| {
        let tokens: Vec<ApiToken> = assert_ok!(ApiToken::belonging_to(user.as_model())
            .filter(api_tokens::revoked.eq(false))
            .load(conn));
        assert_eq!(tokens.len(), 0);
        let tokens: Vec<ApiToken> = assert_ok!(ApiToken::belonging_to(user.as_model())
            .filter(api_tokens::revoked.eq(true))
            .load(conn));
        assert_eq!(tokens.len(), 1);
    });`
$DIR/src/tests/github_secret_scanning.rs:124:8-133:7: `.db(|conn| {
        let tokens: Vec<ApiToken> = assert_ok!(ApiToken::belonging_to(user.as_model())
            .filter(api_tokens::revoked.eq(false))
            .load(conn));
        assert_eq!(tokens.len(), 0);
        let tokens: Vec<ApiToken> = assert_ok!(ApiToken::belonging_to(user.as_model())
            .filter(api_tokens::revoked.eq(true))
            .load(conn));
        assert_eq!(tokens.len(), 1);
    })`
$DIR/src/tests/github_secret_scanning.rs:141:51-141:64: `.with_token()`
$DIR/src/tests/github_secret_scanning.rs:147:5-153:8: `app.db(|conn| {
        let tokens: Vec<ApiToken> = assert_ok!(ApiToken::belonging_to(user.as_model())
            .filter(api_tokens::revoked.eq(false))
            .load(conn));
        assert_eq!(tokens.len(), 1);
        assert_eq!(tokens[0].name, token.as_model().name);
    });`
$DIR/src/tests/github_secret_scanning.rs:147:8-153:7: `.db(|conn| {
        let tokens: Vec<ApiToken> = assert_ok!(ApiToken::belonging_to(user.as_model())
            .filter(api_tokens::revoked.eq(false))
            .load(conn));
        assert_eq!(tokens.len(), 1);
        assert_eq!(tokens[0].name, token.as_model().name);
    })`
$DIR/src/tests/github_secret_scanning.rs:155:27-155:45: `.post_request(URL)`
$DIR/src/tests/github_secret_scanning.rs:156:5-156:37: `request.with_body(GITHUB_ALERT);`
$DIR/src/tests/github_secret_scanning.rs:156:12-156:36: `.with_body(GITHUB_ALERT)`
$DIR/src/tests/github_secret_scanning.rs:157:5-157:82: `request.header("GITHUB-PUBLIC-KEY-IDENTIFIER", GITHUB_PUBLIC_KEY_IDENTIFIER);`
$DIR/src/tests/github_secret_scanning.rs:157:12-157:81: `.header("GITHUB-PUBLIC-KEY-IDENTIFIER", GITHUB_PUBLIC_KEY_IDENTIFIER)`
$DIR/src/tests/github_secret_scanning.rs:158:5-158:80: `request.header("GITHUB-PUBLIC-KEY-SIGNATURE", GITHUB_PUBLIC_KEY_SIGNATURE);`
$DIR/src/tests/github_secret_scanning.rs:158:12-158:79: `.header("GITHUB-PUBLIC-KEY-SIGNATURE", GITHUB_PUBLIC_KEY_SIGNATURE)`
$DIR/src/tests/github_secret_scanning.rs:159:24-159:71: `.run::<Vec<GitHubSecretAlertFeedback>>(request)`
$DIR/src/tests/github_secret_scanning.rs:163:28-163:35: `.good()`
$DIR/src/tests/github_secret_scanning.rs:173:5-179:8: `app.db(|conn| {
        let tokens: Vec<ApiToken> = assert_ok!(ApiToken::belonging_to(user.as_model())
            .filter(api_tokens::revoked.eq(false))
            .load(conn));
        assert_eq!(tokens.len(), 1);
        assert_eq!(tokens[0].name, token.as_model().name);
    });`
$DIR/src/tests/github_secret_scanning.rs:173:8-179:7: `.db(|conn| {
        let tokens: Vec<ApiToken> = assert_ok!(ApiToken::belonging_to(user.as_model())
            .filter(api_tokens::revoked.eq(false))
            .load(conn));
        assert_eq!(tokens.len(), 1);
        assert_eq!(tokens[0].name, token.as_model().name);
    })`
$DIR/src/tests/github_secret_scanning.rs:187:36-187:44: `.empty()`
$DIR/src/tests/github_secret_scanning.rs:190:23-190:41: `.post_request(URL)`
$DIR/src/tests/github_secret_scanning.rs:191:24-191:43: `.run::<()>(request)`
$DIR/src/tests/github_secret_scanning.rs:195:27-195:45: `.post_request(URL)`
$DIR/src/tests/github_secret_scanning.rs:196:5-196:37: `request.with_body(GITHUB_ALERT);`
$DIR/src/tests/github_secret_scanning.rs:196:12-196:36: `.with_body(GITHUB_ALERT)`
$DIR/src/tests/github_secret_scanning.rs:197:24-197:43: `.run::<()>(request)`
$DIR/src/tests/github_secret_scanning.rs:201:27-201:45: `.post_request(URL)`
$DIR/src/tests/github_secret_scanning.rs:202:5-202:82: `request.header("GITHUB-PUBLIC-KEY-IDENTIFIER", GITHUB_PUBLIC_KEY_IDENTIFIER);`
$DIR/src/tests/github_secret_scanning.rs:202:12-202:81: `.header("GITHUB-PUBLIC-KEY-IDENTIFIER", GITHUB_PUBLIC_KEY_IDENTIFIER)`
$DIR/src/tests/github_secret_scanning.rs:203:5-203:80: `request.header("GITHUB-PUBLIC-KEY-SIGNATURE", GITHUB_PUBLIC_KEY_SIGNATURE);`
$DIR/src/tests/github_secret_scanning.rs:203:12-203:79: `.header("GITHUB-PUBLIC-KEY-SIGNATURE", GITHUB_PUBLIC_KEY_SIGNATURE)`
$DIR/src/tests/github_secret_scanning.rs:204:24-204:43: `.run::<()>(request)`
$DIR/src/tests/github_secret_scanning.rs:208:27-208:45: `.post_request(URL)`
$DIR/src/tests/github_secret_scanning.rs:209:5-209:37: `request.with_body(GITHUB_ALERT);`
$DIR/src/tests/github_secret_scanning.rs:209:12-209:36: `.with_body(GITHUB_ALERT)`
$DIR/src/tests/github_secret_scanning.rs:210:5-210:82: `request.header("GITHUB-PUBLIC-KEY-IDENTIFIER", GITHUB_PUBLIC_KEY_IDENTIFIER);`
$DIR/src/tests/github_secret_scanning.rs:210:12-210:81: `.header("GITHUB-PUBLIC-KEY-IDENTIFIER", GITHUB_PUBLIC_KEY_IDENTIFIER)`
$DIR/src/tests/github_secret_scanning.rs:211:24-211:43: `.run::<()>(request)`
$DIR/src/tests/github_secret_scanning.rs:215:27-215:45: `.post_request(URL)`
$DIR/src/tests/github_secret_scanning.rs:216:5-216:37: `request.with_body(GITHUB_ALERT);`
$DIR/src/tests/github_secret_scanning.rs:216:12-216:36: `.with_body(GITHUB_ALERT)`
$DIR/src/tests/github_secret_scanning.rs:217:5-217:82: `request.header("GITHUB-PUBLIC-KEY-IDENTIFIER", GITHUB_PUBLIC_KEY_IDENTIFIER);`
$DIR/src/tests/github_secret_scanning.rs:217:12-217:81: `.header("GITHUB-PUBLIC-KEY-IDENTIFIER", GITHUB_PUBLIC_KEY_IDENTIFIER)`
$DIR/src/tests/github_secret_scanning.rs:218:5-218:68: `request.header("GITHUB-PUBLIC-KEY-SIGNATURE", "bad signature");`
$DIR/src/tests/github_secret_scanning.rs:218:12-218:67: `.header("GITHUB-PUBLIC-KEY-SIGNATURE", "bad signature")`
$DIR/src/tests/github_secret_scanning.rs:219:24-219:43: `.run::<()>(request)`
$DIR/src/tests/github_secret_scanning.rs:223:27-223:45: `.post_request(URL)`
$DIR/src/tests/github_secret_scanning.rs:224:5-224:37: `request.with_body(GITHUB_ALERT);`
$DIR/src/tests/github_secret_scanning.rs:224:12-224:36: `.with_body(GITHUB_ALERT)`
$DIR/src/tests/github_secret_scanning.rs:225:5-225:82: `request.header("GITHUB-PUBLIC-KEY-IDENTIFIER", GITHUB_PUBLIC_KEY_IDENTIFIER);`
$DIR/src/tests/github_secret_scanning.rs:225:12-225:81: `.header("GITHUB-PUBLIC-KEY-IDENTIFIER", GITHUB_PUBLIC_KEY_IDENTIFIER)`
$DIR/src/tests/github_secret_scanning.rs:226:5-226:75: `request.header("GITHUB-PUBLIC-KEY-SIGNATURE", "YmFkIHNpZ25hdHVyZQ==");`
$DIR/src/tests/github_secret_scanning.rs:226:12-226:74: `.header("GITHUB-PUBLIC-KEY-SIGNATURE", "YmFkIHNpZ25hdHVyZQ==")`
$DIR/src/tests/github_secret_scanning.rs:227:24-227:43: `.run::<()>(request)`
$DIR/src/tests/krate/following.rs:8:41-8:53: `.with_user()`
$DIR/src/tests/krate/following.rs:10:5-12:8: `app.db(|conn| {
        CrateBuilder::new("foo_following", user.as_model().id).expect_build(conn);
    });`
$DIR/src/tests/krate/following.rs:10:8-12:7: `.db(|conn| {
        CrateBuilder::new("foo_following", user.as_model().id).expect_build(conn);
    })`
$DIR/src/tests/krate/following.rs:11:9-11:83: `CrateBuilder::new("foo_following", user.as_model().id).expect_build(conn);`
$DIR/src/tests/krate/following.rs:11:48-11:59: `.as_model()`
$DIR/src/tests/krate/following.rs:11:63-11:82: `.expect_build(conn)`
$DIR/src/tests/krate/following.rs:20:9-22:23: `user.get::<F>("/api/v1/crates/foo_following/following")
            .good()
            .following`
$DIR/src/tests/krate/following.rs:20:13-20:64: `.get::<F>("/api/v1/crates/foo_following/following")`
$DIR/src/tests/krate/following.rs:21:13-21:20: `.good()`
$DIR/src/tests/krate/following.rs:42:5-42:14: `follow();`
$DIR/src/tests/krate/following.rs:43:5-43:14: `follow();`
$DIR/src/tests/krate/following.rs:47:5-47:16: `unfollow();`
$DIR/src/tests/krate/following.rs:48:5-48:16: `unfollow();`
$DIR/src/tests/krate/following.rs:55:48-55:61: `.with_token()`
$DIR/src/tests/krate/following.rs:56:26-56:37: `.as_model()`
$DIR/src/tests/krate/following.rs:61:5-64:8: `app.db(|conn| {
        CrateBuilder::new(crate_to_follow, api_token.user_id).expect_build(conn);
        CrateBuilder::new(crate_not_followed, api_token.user_id).expect_build(conn);
    });`
$DIR/src/tests/krate/following.rs:61:8-64:7: `.db(|conn| {
        CrateBuilder::new(crate_to_follow, api_token.user_id).expect_build(conn);
        CrateBuilder::new(crate_not_followed, api_token.user_id).expect_build(conn);
    })`
$DIR/src/tests/krate/following.rs:62:9-62:82: `CrateBuilder::new(crate_to_follow, api_token.user_id).expect_build(conn);`
$DIR/src/tests/krate/following.rs:62:62-62:81: `.expect_build(conn)`
$DIR/src/tests/krate/following.rs:63:9-63:85: `CrateBuilder::new(crate_not_followed, api_token.user_id).expect_build(conn);`
$DIR/src/tests/krate/following.rs:63:65-63:84: `.expect_build(conn)`
$DIR/src/tests/krate/following.rs:73:9-75:23: `user.get::<F>(&format!("/api/v1/crates/{crate_name}/following"))
            .good()
            .following`
$DIR/src/tests/krate/following.rs:73:13-73:73: `.get::<F>(&format!("/api/v1/crates/{crate_name}/following"))`
$DIR/src/tests/krate/following.rs:74:13-74:20: `.good()`
$DIR/src/tests/krate/following.rs:87:5-87:29: `follow(crate_to_follow);`
$DIR/src/tests/krate/following.rs:92:21-92:43: `.search("following=1")`
$DIR/src/tests/krate/publish.rs:30:41-30:53: `.with_user()`
$DIR/src/tests/krate/publish.rs:32:74-32:91: `.version("1.0.0")`
$DIR/src/tests/krate/publish.rs:33:5-33:49: `user.publish_crate(crate_to_publish).good();`
$DIR/src/tests/krate/publish.rs:33:9-33:41: `.publish_crate(crate_to_publish)`
$DIR/src/tests/krate/publish.rs:33:41-33:48: `.good()`
$DIR/src/tests/krate/publish.rs:35:5-40:8: `app.db(|conn| {
        diesel::update(crates::table)
            .set(crates::updated_at.eq(crates::updated_at - 1.hour()))
            .execute(conn)
            .unwrap();
    });`
$DIR/src/tests/krate/publish.rs:35:8-40:7: `.db(|conn| {
        diesel::update(crates::table)
            .set(crates::updated_at.eq(crates::updated_at - 1.hour()))
            .execute(conn)
            .unwrap();
    })`
$DIR/src/tests/krate/publish.rs:36:9-39:23: `diesel::update(crates::table)
            .set(crates::updated_at.eq(crates::updated_at - 1.hour()))
            .execute(conn)
            .unwrap();`
$DIR/src/tests/krate/publish.rs:37:13-37:71: `.set(crates::updated_at.eq(crates::updated_at - 1.hour()))`
$DIR/src/tests/krate/publish.rs:37:36-37:70: `.eq(crates::updated_at - 1.hour())`
$DIR/src/tests/krate/publish.rs:37:62-37:69: `.hour()`
$DIR/src/tests/krate/publish.rs:38:13-38:27: `.execute(conn)`
$DIR/src/tests/krate/publish.rs:42:35-42:73: `.show_crate("foo_versions_updated_at")`
$DIR/src/tests/krate/publish.rs:45:74-45:91: `.version("2.0.0")`
$DIR/src/tests/krate/publish.rs:46:5-46:49: `user.publish_crate(crate_to_publish).good();`
$DIR/src/tests/krate/publish.rs:46:9-46:41: `.publish_crate(crate_to_publish)`
$DIR/src/tests/krate/publish.rs:46:41-46:48: `.good()`
$DIR/src/tests/krate/publish.rs:48:35-48:73: `.show_crate("foo_versions_updated_at")`
$DIR/src/tests/krate/publish.rs:56:48-56:61: `.with_token()`
$DIR/src/tests/krate/publish.rs:60:24-60:56: `.publish_crate(crate_to_publish)`
$DIR/src/tests/krate/publish.rs:68:5-73:8: `app.db(|conn| {
        diesel::update(api_tokens::table)
            .set(api_tokens::token.eq(b"bad" as &[u8]))
            .execute(conn)
            .unwrap();
    });`
$DIR/src/tests/krate/publish.rs:68:8-73:7: `.db(|conn| {
        diesel::update(api_tokens::table)
            .set(api_tokens::token.eq(b"bad" as &[u8]))
            .execute(conn)
            .unwrap();
    })`
$DIR/src/tests/krate/publish.rs:69:9-72:23: `diesel::update(api_tokens::table)
            .set(api_tokens::token.eq(b"bad" as &[u8]))
            .execute(conn)
            .unwrap();`
$DIR/src/tests/krate/publish.rs:70:13-70:56: `.set(api_tokens::token.eq(b"bad" as &[u8]))`
$DIR/src/tests/krate/publish.rs:70:35-70:55: `.eq(b"bad" as &[u8])`
$DIR/src/tests/krate/publish.rs:71:13-71:27: `.execute(conn)`
$DIR/src/tests/krate/publish.rs:76:25-76:57: `.publish_crate(crate_to_publish)`
$DIR/src/tests/krate/publish.rs:86:43-86:56: `.with_token()`
$DIR/src/tests/krate/publish.rs:89:57-89:74: `.version("1.0.0")`
$DIR/src/tests/krate/publish.rs:90:29-90:61: `.publish_crate(crate_to_publish)`
$DIR/src/tests/krate/publish.rs:93:28-93:40: `.into_json()`
$DIR/src/tests/krate/publish.rs:94:24-94:36: `.as_object()`
$DIR/src/tests/krate/publish.rs:95:26-95:40: `.get("errors")`
$DIR/src/tests/krate/publish.rs:95:49-95:60: `.as_array()`
$DIR/src/tests/krate/publish.rs:96:33-96:41: `.first()`
$DIR/src/tests/krate/publish.rs:96:50-96:62: `.as_object()`
$DIR/src/tests/krate/publish.rs:97:33-97:47: `.get("detail")`
$DIR/src/tests/krate/publish.rs:102:5-102:33: `bad_name("", error_message);`
$DIR/src/tests/krate/publish.rs:103:5-103:40: `bad_name("foo bar", error_message);`
$DIR/src/tests/krate/publish.rs:104:5-104:63: `bad_name(&"a".repeat(MAX_NAME_LENGTH + 1), error_message);`
$DIR/src/tests/krate/publish.rs:104:18-104:46: `.repeat(MAX_NAME_LENGTH + 1)`
$DIR/src/tests/krate/publish.rs:105:5-105:38: `bad_name("snow☃", error_message);`
$DIR/src/tests/krate/publish.rs:106:5-106:40: `bad_name("áccênts", error_message);`
$DIR/src/tests/krate/publish.rs:109:5-109:36: `bad_name("std", error_message);`
$DIR/src/tests/krate/publish.rs:110:5-110:36: `bad_name("STD", error_message);`
$DIR/src/tests/krate/publish.rs:111:5-111:44: `bad_name("compiler-rt", error_message);`
$DIR/src/tests/krate/publish.rs:112:5-112:44: `bad_name("compiler_rt", error_message);`
$DIR/src/tests/krate/publish.rs:118:39-118:51: `.with_user()`
$DIR/src/tests/krate/publish.rs:120:58-120:75: `.version("1.0.0")`
$DIR/src/tests/krate/publish.rs:121:31-121:63: `.publish_crate(crate_to_publish)`
$DIR/src/tests/krate/publish.rs:121:63-121:70: `.good()`
$DIR/src/tests/krate/publish.rs:129:43-129:56: `.with_token()`
$DIR/src/tests/krate/publish.rs:131:58-131:75: `.version("1.0.0")`
$DIR/src/tests/krate/publish.rs:132:32-132:64: `.publish_crate(crate_to_publish)`
$DIR/src/tests/krate/publish.rs:132:64-132:71: `.good()`
$DIR/src/tests/krate/publish.rs:140:43-140:56: `.with_token()`
$DIR/src/tests/krate/publish.rs:142:60-142:81: `.version("0.0.0-pre")`
$DIR/src/tests/krate/publish.rs:143:32-143:64: `.publish_crate(crate_to_publish)`
$DIR/src/tests/krate/publish.rs:143:64-143:71: `.good()`
$DIR/src/tests/krate/publish.rs:151:48-151:61: `.with_token()`
$DIR/src/tests/krate/publish.rs:153:5-156:8: `app.db(|conn| {
        // Insert a crate directly into the database so that new-krate can depend on it
        CrateBuilder::new("package-name", user.as_model().id).expect_build(conn);
    });`
$DIR/src/tests/krate/publish.rs:153:8-156:7: `.db(|conn| {
        // Insert a crate directly into the database so that new-krate can depend on it
        CrateBuilder::new("package-name", user.as_model().id).expect_build(conn);
    })`
$DIR/src/tests/krate/publish.rs:155:9-155:82: `CrateBuilder::new("package-name", user.as_model().id).expect_build(conn);`
$DIR/src/tests/krate/publish.rs:155:47-155:58: `.as_model()`
$DIR/src/tests/krate/publish.rs:155:62-155:81: `.expect_build(conn)`
$DIR/src/tests/krate/publish.rs:158:60-158:78: `.rename("my-name")`
$DIR/src/tests/krate/publish.rs:161:9-161:26: `.version("1.0.0")`
$DIR/src/tests/krate/publish.rs:162:9-162:32: `.dependency(dependency)`
$DIR/src/tests/krate/publish.rs:163:5-163:50: `token.publish_crate(crate_to_publish).good();`
$DIR/src/tests/krate/publish.rs:163:10-163:42: `.publish_crate(crate_to_publish)`
$DIR/src/tests/krate/publish.rs:163:42-163:49: `.good()`
$DIR/src/tests/krate/publish.rs:165:21-165:57: `.crates_from_index_head("new-krate")`
$DIR/src/tests/krate/publish.rs:176:48-176:61: `.with_token()`
$DIR/src/tests/krate/publish.rs:178:5-181:8: `app.db(|conn| {
        // Insert a crate directly into the database so that new-krate can depend on it
        CrateBuilder::new("package-name", user.as_model().id).expect_build(conn);
    });`
$DIR/src/tests/krate/publish.rs:178:8-181:7: `.db(|conn| {
        // Insert a crate directly into the database so that new-krate can depend on it
        CrateBuilder::new("package-name", user.as_model().id).expect_build(conn);
    })`
$DIR/src/tests/krate/publish.rs:180:9-180:82: `CrateBuilder::new("package-name", user.as_model().id).expect_build(conn);`
$DIR/src/tests/krate/publish.rs:180:47-180:58: `.as_model()`
$DIR/src/tests/krate/publish.rs:180:62-180:81: `.expect_build(conn)`
$DIR/src/tests/krate/publish.rs:183:60-183:79: `.rename("_my-name")`
$DIR/src/tests/krate/publish.rs:186:9-186:26: `.version("1.0.0")`
$DIR/src/tests/krate/publish.rs:187:9-187:32: `.dependency(dependency)`
$DIR/src/tests/krate/publish.rs:188:5-188:50: `token.publish_crate(crate_to_publish).good();`
$DIR/src/tests/krate/publish.rs:188:10-188:42: `.publish_crate(crate_to_publish)`
$DIR/src/tests/krate/publish.rs:188:42-188:49: `.good()`
$DIR/src/tests/krate/publish.rs:190:21-190:57: `.crates_from_index_head("new-krate")`
$DIR/src/tests/krate/publish.rs:203:51-203:64: `.with_token()`
$DIR/src/tests/krate/publish.rs:205:5-211:8: `app.db(|conn| {
        // Insert a crate directly into the database so that new_dep can depend on it
        // The name choice of `foo-dep` is important! It has the property of
        // name != canon_crate_name(name) and is a regression test for
        // https://github.com/rust-lang/crates.io/issues/651
        CrateBuilder::new("foo-dep", user.as_model().id).expect_build(conn);
    });`
$DIR/src/tests/krate/publish.rs:205:8-211:7: `.db(|conn| {
        // Insert a crate directly into the database so that new_dep can depend on it
        // The name choice of `foo-dep` is important! It has the property of
        // name != canon_crate_name(name) and is a regression test for
        // https://github.com/rust-lang/crates.io/issues/651
        CrateBuilder::new("foo-dep", user.as_model().id).expect_build(conn);
    })`
$DIR/src/tests/krate/publish.rs:210:9-210:77: `CrateBuilder::new("foo-dep", user.as_model().id).expect_build(conn);`
$DIR/src/tests/krate/publish.rs:210:42-210:53: `.as_model()`
$DIR/src/tests/krate/publish.rs:210:57-210:76: `.expect_build(conn)`
$DIR/src/tests/krate/publish.rs:213:55-213:76: `.version_req("1.0.0")`
$DIR/src/tests/krate/publish.rs:216:9-216:26: `.version("1.0.0")`
$DIR/src/tests/krate/publish.rs:217:9-217:32: `.dependency(dependency)`
$DIR/src/tests/krate/publish.rs:219:5-219:50: `token.publish_crate(crate_to_publish).good();`
$DIR/src/tests/krate/publish.rs:219:10-219:42: `.publish_crate(crate_to_publish)`
$DIR/src/tests/krate/publish.rs:219:42-219:49: `.good()`
$DIR/src/tests/krate/publish.rs:222:9-222:66: `.get::<Deps>("/api/v1/crates/new_dep/1.0.0/dependencies")`
$DIR/src/tests/krate/publish.rs:223:9-223:16: `.good()`
$DIR/src/tests/krate/publish.rs:233:48-233:61: `.with_token()`
$DIR/src/tests/krate/publish.rs:235:5-241:8: `app.db(|conn| {
        // Insert a crate directly into the database so that new_dep can depend on it
        // The name choice of `foo-dep` is important! It has the property of
        // name != canon_crate_name(name) and is a regression test for
        // https://github.com/rust-lang/crates.io/issues/651
        CrateBuilder::new("foo-dep", user.as_model().id).expect_build(conn);
    });`
$DIR/src/tests/krate/publish.rs:235:8-241:7: `.db(|conn| {
        // Insert a crate directly into the database so that new_dep can depend on it
        // The name choice of `foo-dep` is important! It has the property of
        // name != canon_crate_name(name) and is a regression test for
        // https://github.com/rust-lang/crates.io/issues/651
        CrateBuilder::new("foo-dep", user.as_model().id).expect_build(conn);
    })`
$DIR/src/tests/krate/publish.rs:240:9-240:77: `CrateBuilder::new("foo-dep", user.as_model().id).expect_build(conn);`
$DIR/src/tests/krate/publish.rs:240:42-240:53: `.as_model()`
$DIR/src/tests/krate/publish.rs:240:57-240:76: `.expect_build(conn)`
$DIR/src/tests/krate/publish.rs:243:55-243:76: `.version_req("1.2.3")`
$DIR/src/tests/krate/publish.rs:246:9-246:26: `.version("1.0.0")`
$DIR/src/tests/krate/publish.rs:247:9-247:32: `.dependency(dependency)`
$DIR/src/tests/krate/publish.rs:250:43-250:51: `.build()`
$DIR/src/tests/krate/publish.rs:251:24-251:89: `.replace(r#""version_req":"1.2.3""#, r#""version_req":"broken""#)`
$DIR/src/tests/krate/publish.rs:256:9-256:63: `.put::<serde_json::Value>("/api/v1/crates/new", &body)`
$DIR/src/tests/krate/publish.rs:257:9-257:16: `.good()`
$DIR/src/tests/krate/publish.rs:267:48-267:61: `.with_token()`
$DIR/src/tests/krate/publish.rs:269:5-271:8: `app.db(|conn| {
        CrateBuilder::new("foo-dep", user.as_model().id).expect_build(conn);
    });`
$DIR/src/tests/krate/publish.rs:269:8-271:7: `.db(|conn| {
        CrateBuilder::new("foo-dep", user.as_model().id).expect_build(conn);
    })`
$DIR/src/tests/krate/publish.rs:270:9-270:77: `CrateBuilder::new("foo-dep", user.as_model().id).expect_build(conn);`
$DIR/src/tests/krate/publish.rs:270:42-270:53: `.as_model()`
$DIR/src/tests/krate/publish.rs:270:57-270:76: `.expect_build(conn)`
$DIR/src/tests/krate/publish.rs:277:9-277:26: `.version("1.0.0")`
$DIR/src/tests/krate/publish.rs:278:9-278:32: `.dependency(dependency)`
$DIR/src/tests/krate/publish.rs:280:25-280:57: `.publish_crate(crate_to_publish)`
$DIR/src/tests/krate/publish.rs:290:48-290:61: `.with_token()`
$DIR/src/tests/krate/publish.rs:292:5-294:8: `app.db(|conn| {
        CrateBuilder::new("foo-dep", user.as_model().id).expect_build(conn);
    });`
$DIR/src/tests/krate/publish.rs:292:8-294:7: `.db(|conn| {
        CrateBuilder::new("foo-dep", user.as_model().id).expect_build(conn);
    })`
$DIR/src/tests/krate/publish.rs:293:9-293:77: `CrateBuilder::new("foo-dep", user.as_model().id).expect_build(conn);`
$DIR/src/tests/krate/publish.rs:293:42-293:53: `.as_model()`
$DIR/src/tests/krate/publish.rs:293:57-293:76: `.expect_build(conn)`
$DIR/src/tests/krate/publish.rs:296:55-296:68: `.registry("")`
$DIR/src/tests/krate/publish.rs:297:54-297:77: `.dependency(dependency)`
$DIR/src/tests/krate/publish.rs:298:10-298:42: `.publish_crate(crate_to_publish)`
$DIR/src/tests/krate/publish.rs:303:43-303:56: `.with_token()`
$DIR/src/tests/krate/publish.rs:306:38-306:90: `.registry("https://server.example/path/to/registry")`
$DIR/src/tests/krate/publish.rs:308:74-308:97: `.dependency(dependency)`
$DIR/src/tests/krate/publish.rs:309:25-309:57: `.publish_crate(crate_to_publish)`
$DIR/src/tests/krate/publish.rs:319:48-319:61: `.with_token()`
$DIR/src/tests/krate/publish.rs:321:5-324:8: `app.db(|conn| {
        // Insert a crate directly into the database so that new_wild can depend on it
        CrateBuilder::new("foo_wild", user.as_model().id).expect_build(conn);
    });`
$DIR/src/tests/krate/publish.rs:321:8-324:7: `.db(|conn| {
        // Insert a crate directly into the database so that new_wild can depend on it
        CrateBuilder::new("foo_wild", user.as_model().id).expect_build(conn);
    })`
$DIR/src/tests/krate/publish.rs:323:9-323:78: `CrateBuilder::new("foo_wild", user.as_model().id).expect_build(conn);`
$DIR/src/tests/krate/publish.rs:323:43-323:54: `.as_model()`
$DIR/src/tests/krate/publish.rs:323:58-323:77: `.expect_build(conn)`
$DIR/src/tests/krate/publish.rs:326:56-326:73: `.version_req("*")`
$DIR/src/tests/krate/publish.rs:329:9-329:26: `.version("1.0.0")`
$DIR/src/tests/krate/publish.rs:330:9-330:32: `.dependency(dependency)`
$DIR/src/tests/krate/publish.rs:332:25-332:57: `.publish_crate(crate_to_publish)`
$DIR/src/tests/krate/publish.rs:342:48-342:61: `.with_token()`
$DIR/src/tests/krate/publish.rs:344:5-347:8: `app.db(|conn| {
        // Insert a crate directly into the database and then we'll try to publish another version
        CrateBuilder::new("foo_twice", user.as_model().id).expect_build(conn);
    });`
$DIR/src/tests/krate/publish.rs:344:8-347:7: `.db(|conn| {
        // Insert a crate directly into the database and then we'll try to publish another version
        CrateBuilder::new("foo_twice", user.as_model().id).expect_build(conn);
    })`
$DIR/src/tests/krate/publish.rs:346:9-346:79: `CrateBuilder::new("foo_twice", user.as_model().id).expect_build(conn);`
$DIR/src/tests/krate/publish.rs:346:44-346:55: `.as_model()`
$DIR/src/tests/krate/publish.rs:346:59-346:78: `.expect_build(conn)`
$DIR/src/tests/krate/publish.rs:350:9-350:26: `.version("2.0.0")`
$DIR/src/tests/krate/publish.rs:351:9-351:42: `.description("2.0.0 description")`
$DIR/src/tests/krate/publish.rs:352:21-352:53: `.publish_crate(crate_to_publish)`
$DIR/src/tests/krate/publish.rs:352:53-352:60: `.good()`
$DIR/src/tests/krate/publish.rs:360:41-360:53: `.with_user()`
$DIR/src/tests/krate/publish.rs:362:5-365:8: `app.db(|conn| {
        // Create the foo_wrong crate with one user
        CrateBuilder::new("foo_wrong", user.as_model().id).expect_build(conn);
    });`
$DIR/src/tests/krate/publish.rs:362:8-365:7: `.db(|conn| {
        // Create the foo_wrong crate with one user
        CrateBuilder::new("foo_wrong", user.as_model().id).expect_build(conn);
    })`
$DIR/src/tests/krate/publish.rs:364:9-364:79: `CrateBuilder::new("foo_wrong", user.as_model().id).expect_build(conn);`
$DIR/src/tests/krate/publish.rs:364:44-364:55: `.as_model()`
$DIR/src/tests/krate/publish.rs:364:59-364:78: `.expect_build(conn)`
$DIR/src/tests/krate/publish.rs:368:27-368:50: `.db_new_user("another")`
$DIR/src/tests/krate/publish.rs:368:50-368:70: `.db_new_token("bar")`
$DIR/src/tests/krate/publish.rs:369:60-369:77: `.version("2.0.0")`
$DIR/src/tests/krate/publish.rs:371:32-371:64: `.publish_crate(crate_to_publish)`
$DIR/src/tests/krate/publish.rs:381:39-381:51: `.with_user()`
$DIR/src/tests/krate/publish.rs:384:49-384:63: `.files(&files)`
$DIR/src/tests/krate/publish.rs:386:24-386:47: `.publish_crate(builder)`
$DIR/src/tests/krate/publish.rs:396:48-396:61: `.with_token()`
$DIR/src/tests/krate/publish.rs:398:5-402:8: `app.db(|conn| {
        CrateBuilder::new("foo_whitelist", user.as_model().id)
            .max_upload_size(2_000_000)
            .expect_build(conn);
    });`
$DIR/src/tests/krate/publish.rs:398:8-402:7: `.db(|conn| {
        CrateBuilder::new("foo_whitelist", user.as_model().id)
            .max_upload_size(2_000_000)
            .expect_build(conn);
    })`
$DIR/src/tests/krate/publish.rs:399:9-401:33: `CrateBuilder::new("foo_whitelist", user.as_model().id)
            .max_upload_size(2_000_000)
            .expect_build(conn);`
$DIR/src/tests/krate/publish.rs:399:48-399:59: `.as_model()`
$DIR/src/tests/krate/publish.rs:400:13-400:40: `.max_upload_size(2_000_000)`
$DIR/src/tests/krate/publish.rs:401:13-401:32: `.expect_build(conn)`
$DIR/src/tests/krate/publish.rs:406:9-406:26: `.version("1.1.0")`
$DIR/src/tests/krate/publish.rs:407:9-407:23: `.files(&files)`
$DIR/src/tests/krate/publish.rs:409:10-409:42: `.publish_crate(crate_to_publish)`
$DIR/src/tests/krate/publish.rs:414:39-414:51: `.with_user()`
$DIR/src/tests/krate/publish.rs:417:45-417:59: `.files(&files)`
$DIR/src/tests/krate/publish.rs:419:24-419:47: `.publish_crate(builder)`
$DIR/src/tests/krate/publish.rs:429:43-429:56: `.with_token()`
$DIR/src/tests/krate/publish.rs:432:33-432:43: `.take(len)`
$DIR/src/tests/krate/publish.rs:435:9-435:26: `.version("1.1.0")`
$DIR/src/tests/krate/publish.rs:436:9-436:63: `.files_with_io(&mut [("foo-1.1.0/a", &mut body, len)])`
$DIR/src/tests/krate/publish.rs:438:25-438:57: `.publish_crate(crate_to_publish)`
$DIR/src/tests/krate/publish.rs:448:48-448:61: `.with_token()`
$DIR/src/tests/krate/publish.rs:450:5-455:8: `app.db(|conn| {
        // Insert a crate directly into the database and then we'll try to publish the same version
        CrateBuilder::new("foo_dupe", user.as_model().id)
            .version("1.0.0")
            .expect_build(conn);
    });`
$DIR/src/tests/krate/publish.rs:450:8-455:7: `.db(|conn| {
        // Insert a crate directly into the database and then we'll try to publish the same version
        CrateBuilder::new("foo_dupe", user.as_model().id)
            .version("1.0.0")
            .expect_build(conn);
    })`
$DIR/src/tests/krate/publish.rs:452:9-454:33: `CrateBuilder::new("foo_dupe", user.as_model().id)
            .version("1.0.0")
            .expect_build(conn);`
$DIR/src/tests/krate/publish.rs:452:43-452:54: `.as_model()`
$DIR/src/tests/krate/publish.rs:453:13-453:30: `.version("1.0.0")`
$DIR/src/tests/krate/publish.rs:454:13-454:32: `.expect_build(conn)`
$DIR/src/tests/krate/publish.rs:457:59-457:76: `.version("1.0.0")`
$DIR/src/tests/krate/publish.rs:458:25-458:57: `.publish_crate(crate_to_publish)`
$DIR/src/tests/krate/publish.rs:468:48-468:61: `.with_token()`
$DIR/src/tests/krate/publish.rs:470:5-474:8: `app.db(|conn| {
        CrateBuilder::new("Foo_similar", user.as_model().id)
            .version("1.0.0")
            .expect_build(conn);
    });`
$DIR/src/tests/krate/publish.rs:470:8-474:7: `.db(|conn| {
        CrateBuilder::new("Foo_similar", user.as_model().id)
            .version("1.0.0")
            .expect_build(conn);
    })`
$DIR/src/tests/krate/publish.rs:471:9-473:33: `CrateBuilder::new("Foo_similar", user.as_model().id)
            .version("1.0.0")
            .expect_build(conn);`
$DIR/src/tests/krate/publish.rs:471:46-471:57: `.as_model()`
$DIR/src/tests/krate/publish.rs:472:13-472:30: `.version("1.0.0")`
$DIR/src/tests/krate/publish.rs:473:13-473:32: `.expect_build(conn)`
$DIR/src/tests/krate/publish.rs:476:62-476:79: `.version("1.1.0")`
$DIR/src/tests/krate/publish.rs:477:25-477:57: `.publish_crate(crate_to_publish)`
$DIR/src/tests/krate/publish.rs:487:48-487:61: `.with_token()`
$DIR/src/tests/krate/publish.rs:489:5-493:8: `app.db(|conn| {
        CrateBuilder::new("foo_bar_hyphen", user.as_model().id)
            .version("1.0.0")
            .expect_build(conn);
    });`
$DIR/src/tests/krate/publish.rs:489:8-493:7: `.db(|conn| {
        CrateBuilder::new("foo_bar_hyphen", user.as_model().id)
            .version("1.0.0")
            .expect_build(conn);
    })`
$DIR/src/tests/krate/publish.rs:490:9-492:33: `CrateBuilder::new("foo_bar_hyphen", user.as_model().id)
            .version("1.0.0")
            .expect_build(conn);`
$DIR/src/tests/krate/publish.rs:490:49-490:60: `.as_model()`
$DIR/src/tests/krate/publish.rs:491:13-491:30: `.version("1.0.0")`
$DIR/src/tests/krate/publish.rs:492:13-492:32: `.expect_build(conn)`
$DIR/src/tests/krate/publish.rs:495:65-495:82: `.version("1.1.0")`
$DIR/src/tests/krate/publish.rs:496:25-496:57: `.publish_crate(crate_to_publish)`
$DIR/src/tests/krate/publish.rs:506:48-506:61: `.with_token()`
$DIR/src/tests/krate/publish.rs:508:5-512:8: `app.db(|conn| {
        CrateBuilder::new("foo-bar-underscore", user.as_model().id)
            .version("1.0.0")
            .expect_build(conn);
    });`
$DIR/src/tests/krate/publish.rs:508:8-512:7: `.db(|conn| {
        CrateBuilder::new("foo-bar-underscore", user.as_model().id)
            .version("1.0.0")
            .expect_build(conn);
    })`
$DIR/src/tests/krate/publish.rs:509:9-511:33: `CrateBuilder::new("foo-bar-underscore", user.as_model().id)
            .version("1.0.0")
            .expect_build(conn);`
$DIR/src/tests/krate/publish.rs:509:53-509:64: `.as_model()`
$DIR/src/tests/krate/publish.rs:510:13-510:30: `.version("1.0.0")`
$DIR/src/tests/krate/publish.rs:511:13-511:32: `.expect_build(conn)`
$DIR/src/tests/krate/publish.rs:514:69-514:86: `.version("1.1.0")`
$DIR/src/tests/krate/publish.rs:515:25-515:57: `.publish_crate(crate_to_publish)`
$DIR/src/tests/krate/publish.rs:525:45-525:58: `.with_token()`
$DIR/src/tests/krate/publish.rs:528:5-528:50: `token.publish_crate(crate_to_publish).good();`
$DIR/src/tests/krate/publish.rs:528:10-528:42: `.publish_crate(crate_to_publish)`
$DIR/src/tests/krate/publish.rs:528:42-528:49: `.good()`
$DIR/src/tests/krate/publish.rs:530:21-530:51: `.crates_from_index_head("fgt")`
$DIR/src/tests/krate/publish.rs:543:45-543:58: `.with_token()`
$DIR/src/tests/krate/publish.rs:545:54-545:71: `.version("0.0.1")`
$DIR/src/tests/krate/publish.rs:546:5-546:50: `token.publish_crate(crate_to_publish).good();`
$DIR/src/tests/krate/publish.rs:546:10-546:42: `.publish_crate(crate_to_publish)`
$DIR/src/tests/krate/publish.rs:546:42-546:49: `.good()`
$DIR/src/tests/krate/publish.rs:547:54-547:71: `.version("1.0.0")`
$DIR/src/tests/krate/publish.rs:548:5-548:50: `token.publish_crate(crate_to_publish).good();`
$DIR/src/tests/krate/publish.rs:548:10-548:42: `.publish_crate(crate_to_publish)`
$DIR/src/tests/krate/publish.rs:548:42-548:49: `.good()`
$DIR/src/tests/krate/publish.rs:550:21-550:51: `.crates_from_index_head("fpp")`
$DIR/src/tests/krate/publish.rs:562:45-562:58: `.with_token()`
$DIR/src/tests/krate/publish.rs:564:5-564:57: `app.upstream_index().create_empty_commit().unwrap();`
$DIR/src/tests/krate/publish.rs:564:8-564:25: `.upstream_index()`
$DIR/src/tests/krate/publish.rs:564:25-564:47: `.create_empty_commit()`
$DIR/src/tests/krate/publish.rs:567:10-567:42: `.publish_crate(crate_to_publish)`
$DIR/src/tests/krate/publish.rs:572:43-572:56: `.with_token()`
$DIR/src/tests/krate/publish.rs:577:62-577:85: `.dependency(dependency)`
$DIR/src/tests/krate/publish.rs:579:25-579:57: `.publish_crate(crate_to_publish)`
$DIR/src/tests/krate/publish.rs:589:43-589:56: `.with_token()`
$DIR/src/tests/krate/publish.rs:591:61-591:72: `.readme("")`
$DIR/src/tests/krate/publish.rs:592:21-592:53: `.publish_crate(crate_to_publish)`
$DIR/src/tests/krate/publish.rs:592:53-592:60: `.good()`
$DIR/src/tests/krate/publish.rs:600:43-600:56: `.with_token()`
$DIR/src/tests/krate/publish.rs:603:9-603:30: `.version("1.0.0+foo")`
$DIR/src/tests/krate/publish.rs:604:9-604:20: `.readme("")`
$DIR/src/tests/krate/publish.rs:605:21-605:53: `.publish_crate(crate_to_publish)`
$DIR/src/tests/krate/publish.rs:605:53-605:60: `.good()`
$DIR/src/tests/krate/publish.rs:613:45-613:58: `.with_token()`
$DIR/src/tests/krate/publish.rs:615:5-617:8: `app.db(|conn| {
        delete(emails::table).execute(conn).unwrap();
    });`
$DIR/src/tests/krate/publish.rs:615:8-617:7: `.db(|conn| {
        delete(emails::table).execute(conn).unwrap();
    })`
$DIR/src/tests/krate/publish.rs:616:9-616:54: `delete(emails::table).execute(conn).unwrap();`
$DIR/src/tests/krate/publish.rs:616:30-616:44: `.execute(conn)`
$DIR/src/tests/krate/publish.rs:621:25-621:57: `.publish_crate(crate_to_publish)`
$DIR/src/tests/krate/publish.rs:631:45-631:58: `.with_token()`
$DIR/src/tests/krate/publish.rs:633:5-638:8: `app.db(|conn| {
        update(emails::table)
            .set((emails::verified.eq(false),))
            .execute(conn)
            .unwrap();
    });`
$DIR/src/tests/krate/publish.rs:633:8-638:7: `.db(|conn| {
        update(emails::table)
            .set((emails::verified.eq(false),))
            .execute(conn)
            .unwrap();
    })`
$DIR/src/tests/krate/publish.rs:634:9-637:23: `update(emails::table)
            .set((emails::verified.eq(false),))
            .execute(conn)
            .unwrap();`
$DIR/src/tests/krate/publish.rs:635:13-635:48: `.set((emails::verified.eq(false),))`
$DIR/src/tests/krate/publish.rs:635:35-635:45: `.eq(false)`
$DIR/src/tests/krate/publish.rs:636:13-636:27: `.execute(conn)`
$DIR/src/tests/krate/publish.rs:642:25-642:57: `.publish_crate(crate_to_publish)`
$DIR/src/tests/krate/publish.rs:652:45-652:58: `.with_token()`
$DIR/src/tests/krate/publish.rs:656:5-656:50: `token.publish_crate(crate_to_publish).good();`
$DIR/src/tests/krate/publish.rs:656:10-656:42: `.publish_crate(crate_to_publish)`
$DIR/src/tests/krate/publish.rs:656:42-656:49: `.good()`
$DIR/src/tests/krate/publish.rs:660:13-660:50: `.select(versions_published_by::email)`
$DIR/src/tests/krate/publish.rs:661:13-661:25: `.first(conn)`
$DIR/src/tests/krate/publish.rs:671:48-671:61: `.with_token()`
$DIR/src/tests/krate/publish.rs:673:5-673:79: `app.db(|conn| assert!(VersionOwnerAction::all(conn).unwrap().is_empty()));`
$DIR/src/tests/krate/publish.rs:673:8-673:78: `.db(|conn| assert!(VersionOwnerAction::all(conn).unwrap().is_empty()))`
$DIR/src/tests/krate/publish.rs:677:5-677:50: `token.publish_crate(crate_to_publish).good();`
$DIR/src/tests/krate/publish.rs:677:10-677:42: `.publish_crate(crate_to_publish)`
$DIR/src/tests/krate/publish.rs:677:42-677:49: `.good()`
$DIR/src/tests/krate/publish.rs:680:20-680:49: `.show_version("fyk", "1.0.0")`
$DIR/src/tests/krate/publish.rs:691:51-691:64: `.with_token()`
$DIR/src/tests/krate/publish.rs:692:20-692:31: `.as_model()`
$DIR/src/tests/krate/publish.rs:695:5-699:8: `app.db(|conn| {
        CrateBuilder::new("docscrate", user.id)
            .version("0.2.0")
            .expect_build(conn);
    });`
$DIR/src/tests/krate/publish.rs:695:8-699:7: `.db(|conn| {
        CrateBuilder::new("docscrate", user.id)
            .version("0.2.0")
            .expect_build(conn);
    })`
$DIR/src/tests/krate/publish.rs:696:9-698:33: `CrateBuilder::new("docscrate", user.id)
            .version("0.2.0")
            .expect_build(conn);`
$DIR/src/tests/krate/publish.rs:697:13-697:30: `.version("0.2.0")`
$DIR/src/tests/krate/publish.rs:698:13-698:32: `.expect_build(conn)`
$DIR/src/tests/krate/publish.rs:703:20-703:44: `.show_crate("docscrate")`
$DIR/src/tests/krate/publish.rs:708:9-708:26: `.version("0.2.1")`
$DIR/src/tests/krate/publish.rs:709:9-709:40: `.documentation("http://foo.rs")`
$DIR/src/tests/krate/publish.rs:710:21-710:53: `.publish_crate(crate_to_publish)`
$DIR/src/tests/krate/publish.rs:710:53-710:60: `.good()`
$DIR/src/tests/krate/publish.rs:714:20-714:44: `.show_crate("docscrate")`
$DIR/src/tests/krate/publish.rs:718:60-718:77: `.version("0.2.2")`
$DIR/src/tests/krate/publish.rs:719:21-719:53: `.publish_crate(crate_to_publish)`
$DIR/src/tests/krate/publish.rs:719:53-719:60: `.good()`
$DIR/src/tests/krate/publish.rs:723:20-723:44: `.show_crate("docscrate")`
$DIR/src/tests/krate/publish.rs:729:43-729:56: `.with_token()`
$DIR/src/tests/krate/publish.rs:731:9-731:24: `.keyword("c++")`
$DIR/src/tests/krate/publish.rs:732:9-732:36: `.keyword("crates-io_index")`
$DIR/src/tests/krate/publish.rs:733:9-733:30: `.keyword("1password")`
$DIR/src/tests/krate/publish.rs:734:21-734:53: `.publish_crate(crate_to_publish)`
$DIR/src/tests/krate/publish.rs:734:53-734:60: `.good()`
$DIR/src/tests/krate/publish.rs:741:43-741:56: `.with_token()`
$DIR/src/tests/krate/publish.rs:743:43-743:84: `.keyword("super-long-keyword-name-oh-no")`
$DIR/src/tests/krate/publish.rs:744:25-744:57: `.publish_crate(crate_to_publish)`
$DIR/src/tests/krate/publish.rs:751:62-751:78: `.keyword("?@?%")`
$DIR/src/tests/krate/publish.rs:752:25-752:57: `.publish_crate(crate_to_publish)`
$DIR/src/tests/krate/publish.rs:759:62-759:81: `.keyword("áccênts")`
$DIR/src/tests/krate/publish.rs:760:25-760:57: `.publish_crate(crate_to_publish)`
$DIR/src/tests/krate/publish.rs:770:45-770:58: `.with_token()`
$DIR/src/tests/krate/publish.rs:772:5-776:8: `app.db(|conn| {
        new_category("Category 1", "cat1", "Category 1 crates")
            .create_or_update(conn)
            .unwrap();
    });`
$DIR/src/tests/krate/publish.rs:772:8-776:7: `.db(|conn| {
        new_category("Category 1", "cat1", "Category 1 crates")
            .create_or_update(conn)
            .unwrap();
    })`
$DIR/src/tests/krate/publish.rs:773:9-775:23: `new_category("Category 1", "cat1", "Category 1 crates")
            .create_or_update(conn)
            .unwrap();`
$DIR/src/tests/krate/publish.rs:774:13-774:36: `.create_or_update(conn)`
$DIR/src/tests/krate/publish.rs:778:63-778:80: `.category("cat1")`
$DIR/src/tests/krate/publish.rs:779:21-779:53: `.publish_crate(crate_to_publish)`
$DIR/src/tests/krate/publish.rs:779:53-779:60: `.good()`
$DIR/src/tests/krate/publish.rs:788:43-788:56: `.with_token()`
$DIR/src/tests/krate/publish.rs:790:66-790:82: `.category("bar")`
$DIR/src/tests/krate/publish.rs:791:21-791:53: `.publish_crate(crate_to_publish)`
$DIR/src/tests/krate/publish.rs:791:53-791:60: `.good()`
$DIR/src/tests/krate/publish.rs:800:43-800:56: `.with_token()`
$DIR/src/tests/krate/publish.rs:803:9-803:26: `.version("1.1.0")`
$DIR/src/tests/krate/publish.rs:804:9-804:25: `.unset_license()`
$DIR/src/tests/krate/publish.rs:805:9-805:29: `.unset_description()`
$DIR/src/tests/krate/publish.rs:807:25-807:57: `.publish_crate(crate_to_publish)`
$DIR/src/tests/krate/publish.rs:815:9-815:26: `.version("1.1.0")`
$DIR/src/tests/krate/publish.rs:816:9-816:29: `.unset_description()`
$DIR/src/tests/krate/publish.rs:818:25-818:57: `.publish_crate(crate_to_publish)`
$DIR/src/tests/krate/publish.rs:826:9-826:26: `.version("1.1.0")`
$DIR/src/tests/krate/publish.rs:827:9-827:25: `.unset_license()`
$DIR/src/tests/krate/publish.rs:828:9-828:29: `.license_file("foo")`
$DIR/src/tests/krate/publish.rs:829:9-829:29: `.unset_description()`
$DIR/src/tests/krate/publish.rs:831:25-831:57: `.publish_crate(crate_to_publish)`
$DIR/src/tests/krate/publish.rs:841:43-841:56: `.with_token()`
$DIR/src/tests/krate/publish.rs:847:9-847:54: `assert_ok!(header.set_path("foo-1.1.0/bar"));`
$DIR/src/tests/krate/publish.rs:848:9-848:28: `header.set_size(0);`
$DIR/src/tests/krate/publish.rs:848:15-848:27: `.set_size(0)`
$DIR/src/tests/krate/publish.rs:849:9-849:60: `header.set_entry_type(tar::EntryType::hard_link());`
$DIR/src/tests/krate/publish.rs:849:15-849:59: `.set_entry_type(tar::EntryType::hard_link())`
$DIR/src/tests/krate/publish.rs:850:9-850:63: `assert_ok!(header.set_link_name("foo-1.1.0/another"));`
$DIR/src/tests/krate/publish.rs:851:9-851:28: `header.set_cksum();`
$DIR/src/tests/krate/publish.rs:851:15-851:27: `.set_cksum()`
$DIR/src/tests/krate/publish.rs:852:9-852:49: `assert_ok!(ar.append(&header, &[][..]));`
$DIR/src/tests/krate/publish.rs:853:9-853:33: `assert_ok!(ar.finish());`
$DIR/src/tests/krate/publish.rs:856:54-856:71: `.version("1.1.0")`
$DIR/src/tests/krate/publish.rs:856:71-856:88: `.tarball(tarball)`
$DIR/src/tests/krate/publish.rs:858:25-858:57: `.publish_crate(crate_to_publish)`
$DIR/src/tests/krate/publish.rs:873:9-876:11: `.with_config(|config| {
            config.max_upload_size = max_upload_size;
            config.max_unpack_size = max_upload_size;
        })`
$DIR/src/tests/krate/publish.rs:874:13-874:54: `config.max_upload_size = max_upload_size;`
$DIR/src/tests/krate/publish.rs:875:13-875:54: `config.max_unpack_size = max_upload_size;`
$DIR/src/tests/krate/publish.rs:877:9-877:22: `.with_token()`
$DIR/src/tests/krate/publish.rs:886:9-886:61: `assert_ok!(header.set_path("foo-1.1.0/Cargo.toml"));`
$DIR/src/tests/krate/publish.rs:887:9-887:44: `header.set_size(data.len() as u64);`
$DIR/src/tests/krate/publish.rs:887:15-887:43: `.set_size(data.len() as u64)`
$DIR/src/tests/krate/publish.rs:887:29-887:35: `.len()`
$DIR/src/tests/krate/publish.rs:888:9-888:28: `header.set_cksum();`
$DIR/src/tests/krate/publish.rs:888:15-888:27: `.set_cksum()`
$DIR/src/tests/krate/publish.rs:889:9-889:46: `assert_ok!(ar.append(&header, data));`
$DIR/src/tests/krate/publish.rs:890:9-890:33: `assert_ok!(ar.finish());`
$DIR/src/tests/krate/publish.rs:893:54-893:71: `.version("1.1.0")`
$DIR/src/tests/krate/publish.rs:893:71-893:88: `.tarball(tarball)`
$DIR/src/tests/krate/publish.rs:895:25-895:57: `.publish_crate(crate_to_publish)`
$DIR/src/tests/krate/publish.rs:897:24-897:31: `.good()`
$DIR/src/tests/krate/publish.rs:909:9-912:11: `.with_config(|config| {
            config.max_upload_size = max_upload_size;
            config.max_unpack_size = max_upload_size;
        })`
$DIR/src/tests/krate/publish.rs:910:13-910:54: `config.max_upload_size = max_upload_size;`
$DIR/src/tests/krate/publish.rs:911:13-911:54: `config.max_unpack_size = max_upload_size;`
$DIR/src/tests/krate/publish.rs:913:9-913:22: `.with_token()`
$DIR/src/tests/krate/publish.rs:922:9-922:61: `assert_ok!(header.set_path("foo-1.1.0/Cargo.toml"));`
$DIR/src/tests/krate/publish.rs:923:9-923:44: `header.set_size(data.len() as u64);`
$DIR/src/tests/krate/publish.rs:923:15-923:43: `.set_size(data.len() as u64)`
$DIR/src/tests/krate/publish.rs:923:29-923:35: `.len()`
$DIR/src/tests/krate/publish.rs:924:9-924:28: `header.set_cksum();`
$DIR/src/tests/krate/publish.rs:924:15-924:27: `.set_cksum()`
$DIR/src/tests/krate/publish.rs:925:9-925:46: `assert_ok!(ar.append(&header, data));`
$DIR/src/tests/krate/publish.rs:926:9-926:33: `assert_ok!(ar.finish());`
$DIR/src/tests/krate/publish.rs:929:54-929:71: `.version("1.1.0")`
$DIR/src/tests/krate/publish.rs:929:71-929:88: `.tarball(tarball)`
$DIR/src/tests/krate/publish.rs:931:25-931:57: `.publish_crate(crate_to_publish)`
$DIR/src/tests/krate/publish.rs:942:9-942:64: `.with_publish_rate_limit(Duration::from_millis(500), 1)`
$DIR/src/tests/krate/publish.rs:943:9-943:22: `.with_token()`
$DIR/src/tests/krate/publish.rs:947:5-947:50: `token.publish_crate(crate_to_publish).good();`
$DIR/src/tests/krate/publish.rs:947:10-947:42: `.publish_crate(crate_to_publish)`
$DIR/src/tests/krate/publish.rs:947:42-947:49: `.good()`
$DIR/src/tests/krate/publish.rs:951:25-951:57: `.publish_crate(crate_to_publish)`
$DIR/src/tests/krate/publish.rs:954:24-954:66: `.get::<()>("/api/v1/crates/rate_limited2")`
$DIR/src/tests/krate/publish.rs:958:5-958:47: `thread::sleep(Duration::from_millis(500));`
$DIR/src/tests/krate/publish.rs:961:5-961:50: `token.publish_crate(crate_to_publish).good();`
$DIR/src/tests/krate/publish.rs:961:10-961:42: `.publish_crate(crate_to_publish)`
$DIR/src/tests/krate/publish.rs:961:42-961:49: `.good()`
$DIR/src/tests/krate/publish.rs:963:20-963:48: `.show_crate("rate_limited2")`
$DIR/src/tests/krate/publish.rs:970:9-970:64: `.with_publish_rate_limit(Duration::from_millis(500), 1)`
$DIR/src/tests/krate/publish.rs:971:9-971:22: `.with_token()`
$DIR/src/tests/krate/publish.rs:975:5-975:50: `token.publish_crate(crate_to_publish).good();`
$DIR/src/tests/krate/publish.rs:975:10-975:42: `.publish_crate(crate_to_publish)`
$DIR/src/tests/krate/publish.rs:975:42-975:49: `.good()`
$DIR/src/tests/krate/publish.rs:977:59-977:76: `.version("1.0.1")`
$DIR/src/tests/krate/publish.rs:978:10-978:37: `.publish_crate(new_version)`
$DIR/src/tests/krate/publish.rs:983:48-983:61: `.with_token()`
$DIR/src/tests/krate/publish.rs:985:5-988:8: `app.db(|conn| {
        // Insert a crate directly into the database so that foo_new can depend on it
        CrateBuilder::new("bar", user.as_model().id).expect_build(conn);
    });`
$DIR/src/tests/krate/publish.rs:985:8-988:7: `.db(|conn| {
        // Insert a crate directly into the database so that foo_new can depend on it
        CrateBuilder::new("bar", user.as_model().id).expect_build(conn);
    })`
$DIR/src/tests/krate/publish.rs:987:9-987:73: `CrateBuilder::new("bar", user.as_model().id).expect_build(conn);`
$DIR/src/tests/krate/publish.rs:987:38-987:49: `.as_model()`
$DIR/src/tests/krate/publish.rs:987:53-987:72: `.expect_build(conn)`
$DIR/src/tests/krate/publish.rs:993:9-993:26: `.version("1.0.0")`
$DIR/src/tests/krate/publish.rs:994:9-994:32: `.dependency(dependency)`
$DIR/src/tests/krate/publish.rs:995:9-995:56: `.feature("new_feat", &["dep:bar", "bar?/feat"])`
$DIR/src/tests/krate/publish.rs:996:9-996:34: `.feature("old_feat", &[])`
$DIR/src/tests/krate/publish.rs:997:5-997:50: `token.publish_crate(crate_to_publish).good();`
$DIR/src/tests/krate/publish.rs:997:10-997:42: `.publish_crate(crate_to_publish)`
$DIR/src/tests/krate/publish.rs:997:42-997:49: `.good()`
$DIR/src/tests/krate/publish.rs:999:21-999:51: `.crates_from_index_head("foo")`
$DIR/src/tests/krate/publish.rs:1015:48-1015:61: `.with_token()`
$DIR/src/tests/krate/publish.rs:1017:5-1021:8: `app.db(|conn| {
        // Insert crates directly into the database so that two-deps can depend on it
        CrateBuilder::new("dep-a", user.as_model().id).expect_build(conn);
        CrateBuilder::new("dep-b", user.as_model().id).expect_build(conn);
    });`
$DIR/src/tests/krate/publish.rs:1017:8-1021:7: `.db(|conn| {
        // Insert crates directly into the database so that two-deps can depend on it
        CrateBuilder::new("dep-a", user.as_model().id).expect_build(conn);
        CrateBuilder::new("dep-b", user.as_model().id).expect_build(conn);
    })`
$DIR/src/tests/krate/publish.rs:1019:9-1019:75: `CrateBuilder::new("dep-a", user.as_model().id).expect_build(conn);`
$DIR/src/tests/krate/publish.rs:1019:40-1019:51: `.as_model()`
$DIR/src/tests/krate/publish.rs:1019:55-1019:74: `.expect_build(conn)`
$DIR/src/tests/krate/publish.rs:1020:9-1020:75: `CrateBuilder::new("dep-b", user.as_model().id).expect_build(conn);`
$DIR/src/tests/krate/publish.rs:1020:40-1020:51: `.as_model()`
$DIR/src/tests/krate/publish.rs:1020:55-1020:74: `.expect_build(conn)`
$DIR/src/tests/krate/publish.rs:1028:9-1028:26: `.version("1.0.0")`
$DIR/src/tests/krate/publish.rs:1029:9-1029:27: `.dependency(dep_b)`
$DIR/src/tests/krate/publish.rs:1030:9-1030:27: `.dependency(dep_a)`
$DIR/src/tests/krate/publish.rs:1031:5-1031:50: `token.publish_crate(crate_to_publish).good();`
$DIR/src/tests/krate/publish.rs:1031:10-1031:42: `.publish_crate(crate_to_publish)`
$DIR/src/tests/krate/publish.rs:1031:42-1031:49: `.good()`
$DIR/src/tests/krate/publish.rs:1033:21-1033:56: `.crates_from_index_head("two-deps")`
$DIR/src/tests/krate/publish.rs:1043:39-1043:51: `.with_user()`
$DIR/src/tests/krate/publish.rs:1045:24-1045:61: `.put::<()>("/api/v1/crates/new", &[])`
$DIR/src/tests/krate/versions.rs:14:44-14:56: `.with_user()`
$DIR/src/tests/krate/versions.rs:15:20-15:31: `.as_model()`
$DIR/src/tests/krate/versions.rs:16:5-30:8: `app.db(|conn| {
        CrateBuilder::new("foo_versions", user.id)
            .version("0.5.1")
            .version(VersionBuilder::new("1.0.0").rust_version("1.64"))
            .version("0.5.0")
            .expect_build(conn);
        // Make version 1.0.0 mimic a version published before we started recording who published
        // versions
        let none: Option<i32> = None;
        update(versions::table)
            .filter(versions::num.eq("1.0.0"))
            .set(versions::published_by.eq(none))
            .execute(conn)
            .unwrap();
    });`
$DIR/src/tests/krate/versions.rs:16:8-30:7: `.db(|conn| {
        CrateBuilder::new("foo_versions", user.id)
            .version("0.5.1")
            .version(VersionBuilder::new("1.0.0").rust_version("1.64"))
            .version("0.5.0")
            .expect_build(conn);
        // Make version 1.0.0 mimic a version published before we started recording who published
        // versions
        let none: Option<i32> = None;
        update(versions::table)
            .filter(versions::num.eq("1.0.0"))
            .set(versions::published_by.eq(none))
            .execute(conn)
            .unwrap();
    })`
$DIR/src/tests/krate/versions.rs:17:9-21:33: `CrateBuilder::new("foo_versions", user.id)
            .version("0.5.1")
            .version(VersionBuilder::new("1.0.0").rust_version("1.64"))
            .version("0.5.0")
            .expect_build(conn);`
$DIR/src/tests/krate/versions.rs:18:13-18:30: `.version("0.5.1")`
$DIR/src/tests/krate/versions.rs:19:13-19:72: `.version(VersionBuilder::new("1.0.0").rust_version("1.64"))`
$DIR/src/tests/krate/versions.rs:19:50-19:71: `.rust_version("1.64")`
$DIR/src/tests/krate/versions.rs:20:13-20:30: `.version("0.5.0")`
$DIR/src/tests/krate/versions.rs:21:13-21:32: `.expect_build(conn)`
$DIR/src/tests/krate/versions.rs:25:9-29:23: `update(versions::table)
            .filter(versions::num.eq("1.0.0"))
            .set(versions::published_by.eq(none))
            .execute(conn)
            .unwrap();`
$DIR/src/tests/krate/versions.rs:26:13-26:47: `.filter(versions::num.eq("1.0.0"))`
$DIR/src/tests/krate/versions.rs:26:34-26:46: `.eq("1.0.0")`
$DIR/src/tests/krate/versions.rs:27:13-27:50: `.set(versions::published_by.eq(none))`
$DIR/src/tests/krate/versions.rs:27:40-27:49: `.eq(none)`
$DIR/src/tests/krate/versions.rs:28:13-28:27: `.execute(conn)`
$DIR/src/tests/krate/versions.rs:32:34-32:78: `.get("/api/v1/crates/foo_versions/versions")`
$DIR/src/tests/krate/versions.rs:32:78-32:85: `.good()`
$DIR/src/tests/krate/versions.rs:36:5-36:61: `assert_some_eq!(&json.versions[0].rust_version, "1.64");`
$DIR/src/tests/krate/versions.rs:39:5-39:50: `assert_none!(&json.versions[0].published_by);`
$DIR/src/tests/krate/yanking.rs:8:53-8:66: `.with_token()`
$DIR/src/tests/krate/yanking.rs:12:5-12:50: `token.publish_crate(crate_to_publish).good();`
$DIR/src/tests/krate/yanking.rs:12:10-12:42: `.publish_crate(crate_to_publish)`
$DIR/src/tests/krate/yanking.rs:12:42-12:49: `.good()`
$DIR/src/tests/krate/yanking.rs:14:21-14:51: `.crates_from_index_head("fyk")`
$DIR/src/tests/krate/yanking.rs:16:5-16:46: `assert_some_eq!(crates[0].yanked, false);`
$DIR/src/tests/krate/yanking.rs:19:20-19:49: `.show_version("fyk", "1.0.0")`
$DIR/src/tests/krate/yanking.rs:23:5-23:39: `token.yank("fyk", "1.0.0").good();`
$DIR/src/tests/krate/yanking.rs:23:10-23:31: `.yank("fyk", "1.0.0")`
$DIR/src/tests/krate/yanking.rs:23:31-23:38: `.good()`
$DIR/src/tests/krate/yanking.rs:25:21-25:51: `.crates_from_index_head("fyk")`
$DIR/src/tests/krate/yanking.rs:27:5-27:45: `assert_some_eq!(crates[0].yanked, true);`
$DIR/src/tests/krate/yanking.rs:29:20-29:49: `.show_version("fyk", "1.0.0")`
$DIR/src/tests/krate/yanking.rs:33:5-33:41: `token.unyank("fyk", "1.0.0").good();`
$DIR/src/tests/krate/yanking.rs:33:10-33:33: `.unyank("fyk", "1.0.0")`
$DIR/src/tests/krate/yanking.rs:33:33-33:40: `.good()`
$DIR/src/tests/krate/yanking.rs:35:21-35:51: `.crates_from_index_head("fyk")`
$DIR/src/tests/krate/yanking.rs:37:5-37:46: `assert_some_eq!(crates[0].yanked, false);`
$DIR/src/tests/krate/yanking.rs:39:20-39:49: `.show_version("fyk", "1.0.0")`
$DIR/src/tests/krate/yanking.rs:43:5-43:40: `cookie.yank("fyk", "1.0.0").good();`
$DIR/src/tests/krate/yanking.rs:43:11-43:32: `.yank("fyk", "1.0.0")`
$DIR/src/tests/krate/yanking.rs:43:32-43:39: `.good()`
$DIR/src/tests/krate/yanking.rs:45:21-45:51: `.crates_from_index_head("fyk")`
$DIR/src/tests/krate/yanking.rs:47:5-47:45: `assert_some_eq!(crates[0].yanked, true);`
$DIR/src/tests/krate/yanking.rs:49:20-49:49: `.show_version("fyk", "1.0.0")`
$DIR/src/tests/krate/yanking.rs:53:5-53:42: `cookie.unyank("fyk", "1.0.0").good();`
$DIR/src/tests/krate/yanking.rs:53:11-53:34: `.unyank("fyk", "1.0.0")`
$DIR/src/tests/krate/yanking.rs:53:34-53:41: `.good()`
$DIR/src/tests/krate/yanking.rs:55:21-55:51: `.crates_from_index_head("fyk")`
$DIR/src/tests/krate/yanking.rs:57:5-57:46: `assert_some_eq!(crates[0].yanked, false);`
$DIR/src/tests/krate/yanking.rs:59:20-59:49: `.show_version("fyk", "1.0.0")`
$DIR/src/tests/krate/yanking.rs:65:46-65:59: `.with_token()`
$DIR/src/tests/krate/yanking.rs:69:5-69:50: `token.publish_crate(crate_to_publish).good();`
$DIR/src/tests/krate/yanking.rs:69:10-69:42: `.publish_crate(crate_to_publish)`
$DIR/src/tests/krate/yanking.rs:69:42-69:49: `.good()`
$DIR/src/tests/krate/yanking.rs:72:20-72:42: `.show_crate("fyk_max")`
$DIR/src/tests/krate/yanking.rs:76:58-76:75: `.version("2.0.0")`
$DIR/src/tests/krate/yanking.rs:77:21-77:53: `.publish_crate(crate_to_publish)`
$DIR/src/tests/krate/yanking.rs:77:53-77:60: `.good()`
$DIR/src/tests/krate/yanking.rs:81:5-81:43: `token.yank("fyk_max", "1.0.0").good();`
$DIR/src/tests/krate/yanking.rs:81:10-81:35: `.yank("fyk_max", "1.0.0")`
$DIR/src/tests/krate/yanking.rs:81:35-81:42: `.good()`
$DIR/src/tests/krate/yanking.rs:83:20-83:42: `.show_crate("fyk_max")`
$DIR/src/tests/krate/yanking.rs:87:5-87:45: `token.unyank("fyk_max", "1.0.0").good();`
$DIR/src/tests/krate/yanking.rs:87:10-87:37: `.unyank("fyk_max", "1.0.0")`
$DIR/src/tests/krate/yanking.rs:87:37-87:44: `.good()`
$DIR/src/tests/krate/yanking.rs:89:20-89:42: `.show_crate("fyk_max")`
$DIR/src/tests/krate/yanking.rs:93:5-93:43: `token.yank("fyk_max", "2.0.0").good();`
$DIR/src/tests/krate/yanking.rs:93:10-93:35: `.yank("fyk_max", "2.0.0")`
$DIR/src/tests/krate/yanking.rs:93:35-93:42: `.good()`
$DIR/src/tests/krate/yanking.rs:95:20-95:42: `.show_crate("fyk_max")`
$DIR/src/tests/krate/yanking.rs:99:5-99:43: `token.yank("fyk_max", "1.0.0").good();`
$DIR/src/tests/krate/yanking.rs:99:10-99:35: `.yank("fyk_max", "1.0.0")`
$DIR/src/tests/krate/yanking.rs:99:35-99:42: `.good()`
$DIR/src/tests/krate/yanking.rs:101:20-101:42: `.show_crate("fyk_max")`
$DIR/src/tests/krate/yanking.rs:105:5-105:45: `token.unyank("fyk_max", "2.0.0").good();`
$DIR/src/tests/krate/yanking.rs:105:10-105:37: `.unyank("fyk_max", "2.0.0")`
$DIR/src/tests/krate/yanking.rs:105:37-105:44: `.good()`
$DIR/src/tests/krate/yanking.rs:107:20-107:42: `.show_crate("fyk_max")`
$DIR/src/tests/krate/yanking.rs:111:5-111:45: `token.unyank("fyk_max", "1.0.0").good();`
$DIR/src/tests/krate/yanking.rs:111:10-111:37: `.unyank("fyk_max", "1.0.0")`
$DIR/src/tests/krate/yanking.rs:111:37-111:44: `.good()`
$DIR/src/tests/krate/yanking.rs:113:20-113:42: `.show_crate("fyk_max")`
$DIR/src/tests/krate/yanking.rs:119:46-119:59: `.with_token()`
$DIR/src/tests/krate/yanking.rs:123:5-123:50: `token.publish_crate(crate_to_publish).good();`
$DIR/src/tests/krate/yanking.rs:123:10-123:42: `.publish_crate(crate_to_publish)`
$DIR/src/tests/krate/yanking.rs:123:42-123:49: `.good()`
$DIR/src/tests/krate/yanking.rs:126:20-126:42: `.show_crate("fyk_max")`
$DIR/src/tests/krate/yanking.rs:130:5-130:43: `token.yank("fyk_max", "1.0.0").good();`
$DIR/src/tests/krate/yanking.rs:130:10-130:35: `.yank("fyk_max", "1.0.0")`
$DIR/src/tests/krate/yanking.rs:130:35-130:42: `.good()`
$DIR/src/tests/krate/yanking.rs:132:20-132:42: `.show_crate("fyk_max")`
$DIR/src/tests/krate/yanking.rs:136:58-136:75: `.version("2.0.0")`
$DIR/src/tests/krate/yanking.rs:137:21-137:53: `.publish_crate(crate_to_publish)`
$DIR/src/tests/krate/yanking.rs:137:53-137:60: `.good()`
$DIR/src/tests/krate/yanking.rs:141:5-141:45: `token.unyank("fyk_max", "1.0.0").good();`
$DIR/src/tests/krate/yanking.rs:141:10-141:37: `.unyank("fyk_max", "1.0.0")`
$DIR/src/tests/krate/yanking.rs:141:37-141:44: `.good()`
$DIR/src/tests/krate/yanking.rs:143:20-143:42: `.show_crate("fyk_max")`
$DIR/src/tests/middleware/head.rs:6:36-6:44: `.empty()`
$DIR/src/tests/middleware/head.rs:8:19-8:68: `.request_builder(Method::HEAD, "/api/v1/summary")`
$DIR/src/tests/middleware/head.rs:9:19-9:34: `.run::<()>(req)`
$DIR/src/tests/middleware/head.rs:16:36-16:44: `.empty()`
$DIR/src/tests/middleware/head.rs:18:19-18:61: `.request_builder(Method::HEAD, "/unknown")`
$DIR/src/tests/middleware/head.rs:19:19-19:34: `.run::<()>(req)`
$DIR/src/tests/models/krate.rs:8:41-8:53: `.with_user()`
$DIR/src/tests/models/krate.rs:9:20-9:31: `.as_model()`
$DIR/src/tests/models/krate.rs:13:13-13:45: `.checked_sub_days(Days::new(14))`
$DIR/src/tests/models/krate.rs:15:13-15:25: `.naive_utc()`
$DIR/src/tests/models/krate.rs:18:13-18:44: `.checked_sub_days(Days::new(7))`
$DIR/src/tests/models/krate.rs:20:13-20:25: `.naive_utc()`
$DIR/src/tests/models/krate.rs:23:13-23:51: `.version(VersionBuilder::new("0.1.0"))`
$DIR/src/tests/models/krate.rs:24:13-24:32: `.expect_build(conn)`
$DIR/src/tests/models/krate.rs:26:28-26:49: `.index_metadata(conn)`
$DIR/src/tests/models/krate.rs:27:9-27:41: `assert_yaml_snapshot!(metadata);`
$DIR/src/tests/models/krate.rs:30:13-34:14: `.version(
                VersionBuilder::new("1.0.0-beta.1")
                    .created_at(created_at_1)
                    .yanked(true),
            )`
$DIR/src/tests/models/krate.rs:32:21-32:46: `.created_at(created_at_1)`
$DIR/src/tests/models/krate.rs:33:21-33:34: `.yanked(true)`
$DIR/src/tests/models/krate.rs:35:13-35:76: `.version(VersionBuilder::new("1.0.0").created_at(created_at_1))`
$DIR/src/tests/models/krate.rs:35:50-35:75: `.created_at(created_at_1)`
$DIR/src/tests/models/krate.rs:36:13-40:14: `.version(
                VersionBuilder::new("2.0.0")
                    .created_at(created_at_2)
                    .dependency(&fooo, None),
            )`
$DIR/src/tests/models/krate.rs:38:21-38:46: `.created_at(created_at_2)`
$DIR/src/tests/models/krate.rs:39:21-39:45: `.dependency(&fooo, None)`
$DIR/src/tests/models/krate.rs:41:13-41:80: `.version(VersionBuilder::new("1.0.1").checksum("0123456789abcdef"))`
$DIR/src/tests/models/krate.rs:41:50-41:79: `.checksum("0123456789abcdef")`
$DIR/src/tests/models/krate.rs:42:13-42:32: `.expect_build(conn)`
$DIR/src/tests/models/krate.rs:44:27-44:48: `.index_metadata(conn)`
$DIR/src/tests/models/krate.rs:45:9-45:41: `assert_yaml_snapshot!(metadata);`
$DIR/src/tests/not_found_error.rs:6:36-6:44: `.empty()`
$DIR/src/tests/not_found_error.rs:8:24-8:53: `.get::<()>("/does-not-exist")`
$DIR/src/tests/not_found_error.rs:18:36-18:44: `.empty()`
$DIR/src/tests/not_found_error.rs:20:24-20:60: `.get::<()>("/api/v1/does-not-exist")`
$DIR/src/tests/owners.rs:136:45-136:58: `.with_token()`
$DIR/src/tests/owners.rs:139:60-139:77: `.version("1.0.0")`
$DIR/src/tests/owners.rs:140:5-140:50: `token.publish_crate(crate_to_publish).good();`
$DIR/src/tests/owners.rs:140:10-140:42: `.publish_crate(crate_to_publish)`
$DIR/src/tests/owners.rs:140:42-140:49: `.good()`
$DIR/src/tests/owners.rs:143:20-143:39: `.db_new_user("Bar")`
$DIR/src/tests/owners.rs:144:5-144:46: `token.add_user_owner("foo_owner", "BAR");`
$DIR/src/tests/owners.rs:144:10-144:45: `.add_user_owner("foo_owner", "BAR")`
$DIR/src/tests/owners.rs:147:27-147:87: `.db(|conn| Crate::by_name("foo_owner").first(conn).unwrap())`
$DIR/src/tests/owners.rs:147:65-147:77: `.first(conn)`
$DIR/src/tests/owners.rs:148:5-148:62: `user2.accept_ownership_invitation("foo_owner", krate.id);`
$DIR/src/tests/owners.rs:148:10-148:61: `.accept_ownership_invitation("foo_owner", krate.id)`
$DIR/src/tests/owners.rs:151:23-151:62: `.search_by_user_id(user2.as_model().id)`
$DIR/src/tests/owners.rs:151:47-151:58: `.as_model()`
$DIR/src/tests/owners.rs:155:60-155:77: `.version("2.0.0")`
$DIR/src/tests/owners.rs:157:9-157:35: `.db_new_token("bar_token")`
$DIR/src/tests/owners.rs:158:9-158:41: `.publish_crate(crate_to_publish)`
$DIR/src/tests/owners.rs:178:48-178:61: `.with_token()`
$DIR/src/tests/owners.rs:179:25-179:36: `.as_model()`
$DIR/src/tests/owners.rs:182:9-182:98: `.db(|conn| CrateBuilder::new("owners_selfremove", user.as_model().id).expect_build(conn))`
$DIR/src/tests/owners.rs:182:63-182:74: `.as_model()`
$DIR/src/tests/owners.rs:182:78-182:97: `.expect_build(conn)`
$DIR/src/tests/owners.rs:185:25-185:75: `.remove_named_owner("owners_selfremove", username)`
$DIR/src/tests/owners.rs:192:5-192:63: `create_and_add_owner(&app, &token, "secondowner", &krate);`
$DIR/src/tests/owners.rs:195:25-195:75: `.remove_named_owner("owners_selfremove", username)`
$DIR/src/tests/owners.rs:203:25-203:75: `.remove_named_owner("owners_selfremove", username)`
$DIR/src/tests/owners.rs:214:48-214:61: `.with_token()`
$DIR/src/tests/owners.rs:215:25-215:36: `.as_model()`
$DIR/src/tests/owners.rs:218:12-218:99: `.db(|conn| CrateBuilder::new("owners_multiple", user.as_model().id).expect_build(conn))`
$DIR/src/tests/owners.rs:218:64-218:75: `.as_model()`
$DIR/src/tests/owners.rs:218:79-218:98: `.expect_build(conn)`
$DIR/src/tests/owners.rs:224:25-224:95: `.remove_named_owners("owners_multiple", &[username, "user2", "user3"])`
$DIR/src/tests/owners.rs:233:25-233:85: `.remove_named_owners("owners_multiple", &["user2", "user3"])`
$DIR/src/tests/owners.rs:242:25-242:83: `.add_named_owners("owners_multiple", &["user2", username])`
$DIR/src/tests/owners.rs:251:25-251:82: `.add_named_owners("owners_multiple", &["user2", "user3"])`
$DIR/src/tests/owners.rs:261:5-261:62: `user2.accept_ownership_invitation(&krate.name, krate.id);`
$DIR/src/tests/owners.rs:261:10-261:61: `.accept_ownership_invitation(&krate.name, krate.id)`
$DIR/src/tests/owners.rs:262:5-262:62: `user3.accept_ownership_invitation(&krate.name, krate.id);`
$DIR/src/tests/owners.rs:262:10-262:61: `.accept_ownership_invitation(&krate.name, krate.id)`
$DIR/src/tests/owners.rs:269:43-269:55: `.with_user()`
$DIR/src/tests/owners.rs:271:20-271:42: `.db_new_user("user-2")`
$DIR/src/tests/owners.rs:272:22-272:33: `.as_model()`
$DIR/src/tests/owners.rs:275:12-275:95: `.db(|conn| CrateBuilder::new("foo_crate", cookie.as_model().id).expect_build(conn))`
$DIR/src/tests/owners.rs:275:60-275:71: `.as_model()`
$DIR/src/tests/owners.rs:275:75-275:94: `.expect_build(conn)`
$DIR/src/tests/owners.rs:280:26-280:49: `.put::<()>(&url, &body)`
$DIR/src/tests/owners.rs:290:45-290:58: `.with_token()`
$DIR/src/tests/owners.rs:292:20-292:42: `.db_new_user("user-2")`
$DIR/src/tests/owners.rs:293:22-293:33: `.as_model()`
$DIR/src/tests/owners.rs:296:12-296:99: `.db(|conn| CrateBuilder::new("foo_crate", token.as_model().user_id).expect_build(conn))`
$DIR/src/tests/owners.rs:296:59-296:70: `.as_model()`
$DIR/src/tests/owners.rs:296:79-296:98: `.expect_build(conn)`
$DIR/src/tests/owners.rs:301:25-301:48: `.put::<()>(&url, &body)`
$DIR/src/tests/owners.rs:312:24-312:89: `.with_scoped_token(None, Some(vec![EndpointScope::ChangeOwners]))`
$DIR/src/tests/owners.rs:314:20-314:42: `.db_new_user("user-2")`
$DIR/src/tests/owners.rs:315:22-315:33: `.as_model()`
$DIR/src/tests/owners.rs:318:12-318:99: `.db(|conn| CrateBuilder::new("foo_crate", token.as_model().user_id).expect_build(conn))`
$DIR/src/tests/owners.rs:318:59-318:70: `.as_model()`
$DIR/src/tests/owners.rs:318:79-318:98: `.expect_build(conn)`
$DIR/src/tests/owners.rs:323:25-323:48: `.put::<()>(&url, &body)`
$DIR/src/tests/owners.rs:335:45-335:94: `.with_scoped_token(crate_scopes, endpoint_scopes)`
$DIR/src/tests/owners.rs:337:20-337:42: `.db_new_user("user-2")`
$DIR/src/tests/owners.rs:338:22-338:33: `.as_model()`
$DIR/src/tests/owners.rs:341:12-341:99: `.db(|conn| CrateBuilder::new("foo_crate", token.as_model().user_id).expect_build(conn))`
$DIR/src/tests/owners.rs:341:59-341:70: `.as_model()`
$DIR/src/tests/owners.rs:341:79-341:98: `.expect_build(conn)`
$DIR/src/tests/owners.rs:346:25-346:48: `.put::<()>(&url, &body)`
$DIR/src/tests/owners.rs:358:45-358:94: `.with_scoped_token(crate_scopes, endpoint_scopes)`
$DIR/src/tests/owners.rs:360:20-360:42: `.db_new_user("user-2")`
$DIR/src/tests/owners.rs:361:22-361:33: `.as_model()`
$DIR/src/tests/owners.rs:364:12-364:99: `.db(|conn| CrateBuilder::new("foo_crate", token.as_model().user_id).expect_build(conn))`
$DIR/src/tests/owners.rs:364:59-364:70: `.as_model()`
$DIR/src/tests/owners.rs:364:79-364:98: `.expect_build(conn)`
$DIR/src/tests/owners.rs:369:25-369:48: `.put::<()>(&url, &body)`
$DIR/src/tests/owners.rs:380:24-380:90: `.with_scoped_token(None, Some(vec![EndpointScope::PublishUpdate]))`
$DIR/src/tests/owners.rs:382:20-382:42: `.db_new_user("user-2")`
$DIR/src/tests/owners.rs:383:22-383:33: `.as_model()`
$DIR/src/tests/owners.rs:386:12-386:99: `.db(|conn| CrateBuilder::new("foo_crate", token.as_model().user_id).expect_build(conn))`
$DIR/src/tests/owners.rs:386:59-386:70: `.as_model()`
$DIR/src/tests/owners.rs:386:79-386:98: `.expect_build(conn)`
$DIR/src/tests/owners.rs:391:25-391:48: `.put::<()>(&url, &body)`
$DIR/src/tests/owners.rs:401:46-401:58: `.with_user()`
$DIR/src/tests/owners.rs:403:20-403:42: `.db_new_user("user-2")`
$DIR/src/tests/owners.rs:404:22-404:33: `.as_model()`
$DIR/src/tests/owners.rs:407:12-407:95: `.db(|conn| CrateBuilder::new("foo_crate", cookie.as_model().id).expect_build(conn))`
$DIR/src/tests/owners.rs:407:60-407:71: `.as_model()`
$DIR/src/tests/owners.rs:407:75-407:94: `.expect_build(conn)`
$DIR/src/tests/owners.rs:412:24-412:47: `.put::<()>(&url, &body)`
$DIR/src/tests/owners.rs:422:45-422:58: `.with_token()`
$DIR/src/tests/owners.rs:423:5-423:37: `app.db_new_user("invited_user");`
$DIR/src/tests/owners.rs:423:8-423:36: `.db_new_user("invited_user")`
$DIR/src/tests/owners.rs:424:5-424:97: `app.db(|conn| CrateBuilder::new("crate_name", owner.as_model().user_id).expect_build(conn));`
$DIR/src/tests/owners.rs:424:8-424:96: `.db(|conn| CrateBuilder::new("crate_name", owner.as_model().user_id).expect_build(conn))`
$DIR/src/tests/owners.rs:424:56-424:67: `.as_model()`
$DIR/src/tests/owners.rs:424:76-424:95: `.expect_build(conn)`
$DIR/src/tests/owners.rs:430:25-430:71: `.add_named_owner("crate_name", "invited_user")`
$DIR/src/tests/owners.rs:444:25-444:71: `.add_named_owner("crate_name", "invited_user")`
$DIR/src/tests/owners.rs:460:45-460:58: `.with_token()`
$DIR/src/tests/owners.rs:461:5-461:37: `app.db_new_user("invited_user");`
$DIR/src/tests/owners.rs:461:8-461:36: `.db_new_user("invited_user")`
$DIR/src/tests/owners.rs:463:12-463:100: `.db(|conn| CrateBuilder::new("crate_name", owner.as_model().user_id).expect_build(conn))`
$DIR/src/tests/owners.rs:463:60-463:71: `.as_model()`
$DIR/src/tests/owners.rs:463:80-463:99: `.expect_build(conn)`
$DIR/src/tests/owners.rs:469:25-469:71: `.add_named_owner("crate_name", "invited_user")`
$DIR/src/tests/owners.rs:483:5-483:39: `expire_invitation(&app, krate.id);`
$DIR/src/tests/owners.rs:486:25-486:71: `.add_named_owner("crate_name", "invited_user")`
$DIR/src/tests/owners.rs:508:44-508:56: `.with_user()`
$DIR/src/tests/owners.rs:509:20-509:31: `.as_model()`
$DIR/src/tests/owners.rs:511:42-516:7: `.db(|conn| {
        let t = new_team("team_foo").create_or_update(conn).unwrap();
        let krate = CrateBuilder::new("foo", user.id).expect_build(conn);
        add_team_to_crate(&t, &krate, user, conn).unwrap();
        (krate, t)
    })`
$DIR/src/tests/owners.rs:512:37-512:60: `.create_or_update(conn)`
$DIR/src/tests/owners.rs:513:54-513:73: `.expect_build(conn)`
$DIR/src/tests/owners.rs:514:9-514:60: `add_team_to_crate(&t, &krate, user, conn).unwrap();`
$DIR/src/tests/owners.rs:515:9-515:19: `(krate, t)`
$DIR/src/tests/owners.rs:518:20-518:44: `.db_new_user("user_bar")`
$DIR/src/tests/owners.rs:519:22-519:33: `.as_model()`
$DIR/src/tests/owners.rs:521:12-521:77: `.db(|conn| CrateBuilder::new("bar", user2.id).expect_build(conn))`
$DIR/src/tests/owners.rs:521:57-521:76: `.expect_build(conn)`
$DIR/src/tests/owners.rs:523:20-523:48: `.search_by_user_id(user2.id)`
$DIR/src/tests/owners.rs:528:20-528:35: `.search(&query)`
$DIR/src/tests/owners.rs:542:44-542:56: `.with_user()`
$DIR/src/tests/owners.rs:543:20-543:31: `.as_model()`
$DIR/src/tests/owners.rs:545:19-552:7: `.db(|conn| {
        let t = new_team("github:test_org:team_sloth")
            .create_or_update(conn)
            .unwrap();
        let krate = CrateBuilder::new("best_crate", user.id).expect_build(conn);
        add_team_to_crate(&t, &krate, user, conn).unwrap();
        t
    })`
$DIR/src/tests/owners.rs:547:13-547:36: `.create_or_update(conn)`
$DIR/src/tests/owners.rs:549:61-549:80: `.expect_build(conn)`
$DIR/src/tests/owners.rs:550:9-550:60: `add_team_to_crate(&t, &krate, user, conn).unwrap();`
$DIR/src/tests/owners.rs:551:9-551:10: `t`
$DIR/src/tests/owners.rs:554:34-554:78: `.get("/api/v1/crates/best_crate/owner_team")`
$DIR/src/tests/owners.rs:554:78-554:85: `.good()`
$DIR/src/tests/owners.rs:558:34-558:78: `.get("/api/v1/crates/best_crate/owner_user")`
$DIR/src/tests/owners.rs:558:78-558:85: `.good()`
$DIR/src/tests/owners.rs:565:44-565:56: `.with_user()`
$DIR/src/tests/owners.rs:566:20-566:31: `.as_model()`
$DIR/src/tests/owners.rs:568:5-573:8: `app.db(|conn| {
        let krate = CrateBuilder::new("foo_my_packages", user.id).expect_build(conn);
        krate
            .owner_remove(app.as_inner(), conn, user, &user.gh_login)
            .unwrap();
    });`
$DIR/src/tests/owners.rs:568:8-573:7: `.db(|conn| {
        let krate = CrateBuilder::new("foo_my_packages", user.id).expect_build(conn);
        krate
            .owner_remove(app.as_inner(), conn, user, &user.gh_login)
            .unwrap();
    })`
$DIR/src/tests/owners.rs:569:66-569:85: `.expect_build(conn)`
$DIR/src/tests/owners.rs:570:9-572:23: `krate
            .owner_remove(app.as_inner(), conn, user, &user.gh_login)
            .unwrap();`
$DIR/src/tests/owners.rs:571:13-571:70: `.owner_remove(app.as_inner(), conn, user, &user.gh_login)`
$DIR/src/tests/owners.rs:571:30-571:41: `.as_inner()`
$DIR/src/tests/owners.rs:575:34-575:83: `.get("/api/v1/crates/foo_my_packages/owner_user")`
$DIR/src/tests/owners.rs:575:83-575:90: `.good()`
$DIR/src/tests/owners.rs:581:39-581:51: `.with_user()`
$DIR/src/tests/owners.rs:583:20-583:39: `.list_invitations()`
$DIR/src/tests/owners.rs:589:43-589:56: `.with_token()`
$DIR/src/tests/owners.rs:592:9-592:51: `.get("/api/v1/me/crate_owner_invitations")`
$DIR/src/tests/owners.rs:598:49-598:62: `.with_token()`
$DIR/src/tests/owners.rs:599:22-599:33: `.as_model()`
$DIR/src/tests/owners.rs:601:20-601:95: `.db(|conn| CrateBuilder::new("invited_crate", owner.id).expect_build(conn))`
$DIR/src/tests/owners.rs:601:75-601:94: `.expect_build(conn)`
$DIR/src/tests/owners.rs:603:19-603:47: `.db_new_user("invited_user")`
$DIR/src/tests/owners.rs:604:5-604:59: `token.add_user_owner("invited_crate", "invited_user");`
$DIR/src/tests/owners.rs:604:10-604:58: `.add_user_owner("invited_crate", "invited_user")`
$DIR/src/tests/owners.rs:606:24-606:72: `.get::<()>("/api/v1/me/crate_owner_invitations")`
$DIR/src/tests/owners.rs:609:27-609:46: `.list_invitations()`
$DIR/src/tests/owners.rs:631:49-631:62: `.with_token()`
$DIR/src/tests/owners.rs:632:22-632:33: `.as_model()`
$DIR/src/tests/owners.rs:634:19-634:47: `.db_new_user("invited_user")`
$DIR/src/tests/owners.rs:636:21-636:98: `.db(|conn| CrateBuilder::new("invited_crate_1", owner.id).expect_build(conn))`
$DIR/src/tests/owners.rs:636:78-636:97: `.expect_build(conn)`
$DIR/src/tests/owners.rs:637:21-637:98: `.db(|conn| CrateBuilder::new("invited_crate_2", owner.id).expect_build(conn))`
$DIR/src/tests/owners.rs:637:78-637:97: `.expect_build(conn)`
$DIR/src/tests/owners.rs:638:5-638:61: `token.add_user_owner("invited_crate_1", "invited_user");`
$DIR/src/tests/owners.rs:638:10-638:60: `.add_user_owner("invited_crate_1", "invited_user")`
$DIR/src/tests/owners.rs:639:5-639:61: `token.add_user_owner("invited_crate_2", "invited_user");`
$DIR/src/tests/owners.rs:639:10-639:60: `.add_user_owner("invited_crate_2", "invited_user")`
$DIR/src/tests/owners.rs:642:5-642:40: `expire_invitation(&app, krate1.id);`
$DIR/src/tests/owners.rs:644:27-644:46: `.list_invitations()`
$DIR/src/tests/owners.rs:671:58-671:71: `.with_token()`
$DIR/src/tests/owners.rs:672:22-672:33: `.as_model()`
$DIR/src/tests/owners.rs:673:27-673:51: `.db_new_user("user_bar")`
$DIR/src/tests/owners.rs:674:20-674:99: `.db(|conn| CrateBuilder::new("accept_invitation", owner.id).expect_build(conn))`
$DIR/src/tests/owners.rs:674:79-674:98: `.expect_build(conn)`
$DIR/src/tests/owners.rs:677:5-677:65: `owner_token.add_user_owner("accept_invitation", "user_bar");`
$DIR/src/tests/owners.rs:677:16-677:64: `.add_user_owner("accept_invitation", "user_bar")`
$DIR/src/tests/owners.rs:680:5-680:69: `invited_user.accept_ownership_invitation(&krate.name, krate.id);`
$DIR/src/tests/owners.rs:680:17-680:68: `.accept_ownership_invitation(&krate.name, krate.id)`
$DIR/src/tests/owners.rs:683:28-683:47: `.list_invitations()`
$DIR/src/tests/owners.rs:687:20-687:59: `.show_crate_owners("accept_invitation")`
$DIR/src/tests/owners.rs:697:58-697:71: `.with_token()`
$DIR/src/tests/owners.rs:698:22-698:33: `.as_model()`
$DIR/src/tests/owners.rs:699:27-699:51: `.db_new_user("user_bar")`
$DIR/src/tests/owners.rs:700:20-700:100: `.db(|conn| CrateBuilder::new("decline_invitation", owner.id).expect_build(conn))`
$DIR/src/tests/owners.rs:700:80-700:99: `.expect_build(conn)`
$DIR/src/tests/owners.rs:703:5-703:66: `owner_token.add_user_owner("decline_invitation", "user_bar");`
$DIR/src/tests/owners.rs:703:16-703:65: `.add_user_owner("decline_invitation", "user_bar")`
$DIR/src/tests/owners.rs:706:5-706:70: `invited_user.decline_ownership_invitation(&krate.name, krate.id);`
$DIR/src/tests/owners.rs:706:17-706:69: `.decline_ownership_invitation(&krate.name, krate.id)`
$DIR/src/tests/owners.rs:709:28-709:47: `.list_invitations()`
$DIR/src/tests/owners.rs:713:20-713:60: `.show_crate_owners("decline_invitation")`
$DIR/src/tests/owners.rs:719:58-719:71: `.with_token()`
$DIR/src/tests/owners.rs:720:22-720:33: `.as_model()`
$DIR/src/tests/owners.rs:721:27-721:51: `.db_new_user("user_bar")`
$DIR/src/tests/owners.rs:722:21-722:100: `.db(|conn| CrateBuilder::new("accept_invitation", owner.id).expect_build(conn))`
$DIR/src/tests/owners.rs:722:80-722:99: `.expect_build(conn)`
$DIR/src/tests/owners.rs:725:5-725:65: `owner_token.add_user_owner("accept_invitation", "user_bar");`
$DIR/src/tests/owners.rs:725:16-725:64: `.add_user_owner("accept_invitation", "user_bar")`
$DIR/src/tests/owners.rs:728:60-728:71: `.as_inner()`
$DIR/src/tests/owners.rs:731:5-731:62: `anon.accept_ownership_invitation_by_token(&invite_token);`
$DIR/src/tests/owners.rs:731:9-731:61: `.accept_ownership_invitation_by_token(&invite_token)`
$DIR/src/tests/owners.rs:734:28-734:47: `.list_invitations()`
$DIR/src/tests/owners.rs:738:20-738:59: `.show_crate_owners("accept_invitation")`
$DIR/src/tests/owners.rs:761:58-761:71: `.with_token()`
$DIR/src/tests/owners.rs:762:22-762:33: `.as_model()`
$DIR/src/tests/owners.rs:763:27-763:52: `.db_new_user("demo_user")`
$DIR/src/tests/owners.rs:764:20-764:92: `.db(|conn| CrateBuilder::new("demo_crate", owner.id).expect_build(conn))`
$DIR/src/tests/owners.rs:764:72-764:91: `.expect_build(conn)`
$DIR/src/tests/owners.rs:767:5-767:59: `owner_token.add_user_owner("demo_crate", "demo_user");`
$DIR/src/tests/owners.rs:767:16-767:58: `.add_user_owner("demo_crate", "demo_user")`
$DIR/src/tests/owners.rs:770:5-770:39: `expire_invitation(&app, krate.id);`
$DIR/src/tests/owners.rs:773:28-773:89: `.try_accept_ownership_invitation::<()>(&krate.name, krate.id)`
$DIR/src/tests/owners.rs:788:20-788:52: `.show_crate_owners("demo_crate")`
$DIR/src/tests/owners.rs:794:58-794:71: `.with_token()`
$DIR/src/tests/owners.rs:795:22-795:33: `.as_model()`
$DIR/src/tests/owners.rs:796:27-796:52: `.db_new_user("demo_user")`
$DIR/src/tests/owners.rs:797:20-797:92: `.db(|conn| CrateBuilder::new("demo_crate", owner.id).expect_build(conn))`
$DIR/src/tests/owners.rs:797:72-797:91: `.expect_build(conn)`
$DIR/src/tests/owners.rs:800:5-800:59: `owner_token.add_user_owner("demo_crate", "demo_user");`
$DIR/src/tests/owners.rs:800:16-800:58: `.add_user_owner("demo_crate", "demo_user")`
$DIR/src/tests/owners.rs:803:5-803:39: `expire_invitation(&app, krate.id);`
$DIR/src/tests/owners.rs:806:5-806:70: `invited_user.decline_ownership_invitation(&krate.name, krate.id);`
$DIR/src/tests/owners.rs:806:17-806:69: `.decline_ownership_invitation(&krate.name, krate.id)`
$DIR/src/tests/owners.rs:809:20-809:52: `.show_crate_owners("demo_crate")`
$DIR/src/tests/owners.rs:815:58-815:71: `.with_token()`
$DIR/src/tests/owners.rs:816:22-816:33: `.as_model()`
$DIR/src/tests/owners.rs:817:28-817:53: `.db_new_user("demo_user")`
$DIR/src/tests/owners.rs:818:20-818:92: `.db(|conn| CrateBuilder::new("demo_crate", owner.id).expect_build(conn))`
$DIR/src/tests/owners.rs:818:72-818:91: `.expect_build(conn)`
$DIR/src/tests/owners.rs:821:5-821:59: `owner_token.add_user_owner("demo_crate", "demo_user");`
$DIR/src/tests/owners.rs:821:16-821:58: `.add_user_owner("demo_crate", "demo_user")`
$DIR/src/tests/owners.rs:824:5-824:39: `expire_invitation(&app, krate.id);`
$DIR/src/tests/owners.rs:827:60-827:71: `.as_inner()`
$DIR/src/tests/owners.rs:830:20-830:82: `.try_accept_ownership_invitation_by_token::<()>(&invite_token)`
$DIR/src/tests/owners.rs:845:20-845:52: `.show_crate_owners("demo_crate")`
$DIR/src/tests/owners.rs:854:55-854:68: `.with_token()`
$DIR/src/tests/owners.rs:855:22-855:33: `.as_model()`
$DIR/src/tests/owners.rs:861:5-872:8: `app.db(|conn| {
        NewUser {
            gh_id: -1,
            gh_login: invited_gh_login,
            name: None,
            gh_avatar: None,
            gh_access_token: Cow::Borrowed("some random token"),
        }
        .create_or_update(None, &app.as_inner().emails, conn)
        .unwrap();
        CrateBuilder::new(krate_name, owner.id).expect_build(conn);
    });`
$DIR/src/tests/owners.rs:861:8-872:7: `.db(|conn| {
        NewUser {
            gh_id: -1,
            gh_login: invited_gh_login,
            name: None,
            gh_avatar: None,
            gh_access_token: Cow::Borrowed("some random token"),
        }
        .create_or_update(None, &app.as_inner().emails, conn)
        .unwrap();
        CrateBuilder::new(krate_name, owner.id).expect_build(conn);
    })`
$DIR/src/tests/owners.rs:862:9-870:19: `NewUser {
            gh_id: -1,
            gh_login: invited_gh_login,
            name: None,
            gh_avatar: None,
            gh_access_token: Cow::Borrowed("some random token"),
        }
        .create_or_update(None, &app.as_inner().emails, conn)
        .unwrap();`
$DIR/src/tests/owners.rs:869:9-869:62: `.create_or_update(None, &app.as_inner().emails, conn)`
$DIR/src/tests/owners.rs:869:37-869:48: `.as_inner()`
$DIR/src/tests/owners.rs:871:9-871:68: `CrateBuilder::new(krate_name, owner.id).expect_build(conn);`
$DIR/src/tests/owners.rs:871:48-871:67: `.expect_build(conn)`
$DIR/src/tests/owners.rs:874:27-874:57: `.db_new_user(invited_gh_login)`
$DIR/src/tests/owners.rs:876:5-876:56: `owner_token.add_user_owner(krate_name, "user_bar");`
$DIR/src/tests/owners.rs:876:16-876:55: `.add_user_owner(krate_name, "user_bar")`
$DIR/src/tests/owners.rs:878:28-878:47: `.list_invitations()`
$DIR/src/tests/owners.rs:884:55-884:68: `.with_token()`
$DIR/src/tests/owners.rs:885:22-885:33: `.as_model()`
$DIR/src/tests/owners.rs:892:5-892:39: `app.db_new_user(invited_gh_login);`
$DIR/src/tests/owners.rs:892:8-892:38: `.db_new_user(invited_gh_login)`
$DIR/src/tests/owners.rs:894:27-894:57: `.db_new_user(invited_gh_login)`
$DIR/src/tests/owners.rs:896:5-898:8: `app.db(|conn| {
        CrateBuilder::new(krate_name, owner.id).expect_build(conn);
    });`
$DIR/src/tests/owners.rs:896:8-898:7: `.db(|conn| {
        CrateBuilder::new(krate_name, owner.id).expect_build(conn);
    })`
$DIR/src/tests/owners.rs:897:9-897:68: `CrateBuilder::new(krate_name, owner.id).expect_build(conn);`
$DIR/src/tests/owners.rs:897:48-897:67: `.expect_build(conn)`
$DIR/src/tests/owners.rs:900:5-900:56: `owner_token.add_user_owner(krate_name, "user_bar");`
$DIR/src/tests/owners.rs:900:16-900:55: `.add_user_owner(krate_name, "user_bar")`
$DIR/src/tests/owners.rs:902:28-902:47: `.list_invitations()`
$DIR/src/tests/owners.rs:938:49-938:62: `.with_token()`
$DIR/src/tests/owners.rs:940:31-945:7: `.db(|conn| {
        (
            CrateBuilder::new("crate_1", owner.as_model().id).expect_build(conn),
            CrateBuilder::new("crate_2", owner.as_model().id).expect_build(conn),
        )
    })`
$DIR/src/tests/owners.rs:941:9-944:10: `(
            CrateBuilder::new("crate_1", owner.as_model().id).expect_build(conn),
            CrateBuilder::new("crate_2", owner.as_model().id).expect_build(conn),
        )`
$DIR/src/tests/owners.rs:942:47-942:58: `.as_model()`
$DIR/src/tests/owners.rs:942:62-942:81: `.expect_build(conn)`
$DIR/src/tests/owners.rs:943:47-943:58: `.as_model()`
$DIR/src/tests/owners.rs:943:62-943:81: `.expect_build(conn)`
$DIR/src/tests/owners.rs:946:20-946:42: `.db_new_user("user_1")`
$DIR/src/tests/owners.rs:947:20-947:42: `.db_new_user("user_2")`
$DIR/src/tests/owners.rs:948:5-948:47: `token.add_user_owner("crate_1", "user_1");`
$DIR/src/tests/owners.rs:948:10-948:46: `.add_user_owner("crate_1", "user_1")`
$DIR/src/tests/owners.rs:949:5-949:47: `token.add_user_owner("crate_1", "user_2");`
$DIR/src/tests/owners.rs:949:10-949:46: `.add_user_owner("crate_1", "user_2")`
$DIR/src/tests/owners.rs:950:5-950:47: `token.add_user_owner("crate_2", "user_1");`
$DIR/src/tests/owners.rs:950:10-950:46: `.add_user_owner("crate_2", "user_1")`
$DIR/src/tests/owners.rs:1077:49-1077:62: `.with_token()`
$DIR/src/tests/owners.rs:1078:19-1078:47: `.db_new_user("invited_user")`
$DIR/src/tests/owners.rs:1080:31-1085:7: `.db(|conn| {
        (
            CrateBuilder::new("crate_1", owner.as_model().id).expect_build(conn),
            CrateBuilder::new("crate_2", owner.as_model().id).expect_build(conn),
        )
    })`
$DIR/src/tests/owners.rs:1081:9-1084:10: `(
            CrateBuilder::new("crate_1", owner.as_model().id).expect_build(conn),
            CrateBuilder::new("crate_2", owner.as_model().id).expect_build(conn),
        )`
$DIR/src/tests/owners.rs:1082:47-1082:58: `.as_model()`
$DIR/src/tests/owners.rs:1082:62-1082:81: `.expect_build(conn)`
$DIR/src/tests/owners.rs:1083:47-1083:58: `.as_model()`
$DIR/src/tests/owners.rs:1083:62-1083:81: `.expect_build(conn)`
$DIR/src/tests/owners.rs:1086:5-1086:53: `token.add_user_owner("crate_1", "invited_user");`
$DIR/src/tests/owners.rs:1086:10-1086:52: `.add_user_owner("crate_1", "invited_user")`
$DIR/src/tests/owners.rs:1087:5-1087:53: `token.add_user_owner("crate_2", "invited_user");`
$DIR/src/tests/owners.rs:1087:10-1087:52: `.add_user_owner("crate_2", "invited_user")`
$DIR/src/tests/owners.rs:1090:5-1090:40: `expire_invitation(&app, crate1.id);`
$DIR/src/tests/owners.rs:1117:49-1117:62: `.with_token()`
$DIR/src/tests/owners.rs:1118:19-1118:47: `.db_new_user("invited_user")`
$DIR/src/tests/owners.rs:1120:31-1125:7: `.db(|conn| {
        (
            CrateBuilder::new("crate_1", owner.as_model().id).expect_build(conn),
            CrateBuilder::new("crate_2", owner.as_model().id).expect_build(conn),
        )
    })`
$DIR/src/tests/owners.rs:1121:9-1124:10: `(
            CrateBuilder::new("crate_1", owner.as_model().id).expect_build(conn),
            CrateBuilder::new("crate_2", owner.as_model().id).expect_build(conn),
        )`
$DIR/src/tests/owners.rs:1122:47-1122:58: `.as_model()`
$DIR/src/tests/owners.rs:1122:62-1122:81: `.expect_build(conn)`
$DIR/src/tests/owners.rs:1123:47-1123:58: `.as_model()`
$DIR/src/tests/owners.rs:1123:62-1123:81: `.expect_build(conn)`
$DIR/src/tests/owners.rs:1126:5-1126:53: `token.add_user_owner("crate_1", "invited_user");`
$DIR/src/tests/owners.rs:1126:10-1126:52: `.add_user_owner("crate_1", "invited_user")`
$DIR/src/tests/owners.rs:1127:5-1127:53: `token.add_user_owner("crate_2", "invited_user");`
$DIR/src/tests/owners.rs:1127:10-1127:52: `.add_user_owner("crate_2", "invited_user")`
$DIR/src/tests/owners.rs:1160:44-1160:68: `.trim_start_matches('?')`
$DIR/src/tests/owners.rs:1185:43-1185:56: `.with_token()`
$DIR/src/tests/owners.rs:1187:21-1187:71: `.get::<()>("/api/private/crate_owner_invitations")`
$DIR/src/tests/owners.rs:1201:45-1201:58: `.with_token()`
$DIR/src/tests/owners.rs:1202:25-1202:46: `.db_new_user("other")`
$DIR/src/tests/owners.rs:1205:21-1208:6: `.get_with_query::<()>(
        "/api/private/crate_owner_invitations",
        &format!("invitee_id={}", owner.as_model().id),
    )`
$DIR/src/tests/owners.rs:1212:21-1215:6: `.get_with_query::<()>(
        "/api/private/crate_owner_invitations",
        &format!("invitee_id={}", other_user.as_model().id),
    )`
$DIR/src/tests/owners.rs:1221:45-1221:58: `.with_token()`
$DIR/src/tests/owners.rs:1222:25-1222:46: `.db_new_user("other")`
$DIR/src/tests/owners.rs:1223:5-1226:8: `app.db(|conn| {
        CrateBuilder::new("crate_1", owner.as_model().id).expect_build(conn);
        CrateBuilder::new("crate_2", other_user.as_model().id).expect_build(conn);
    });`
$DIR/src/tests/owners.rs:1223:8-1226:7: `.db(|conn| {
        CrateBuilder::new("crate_1", owner.as_model().id).expect_build(conn);
        CrateBuilder::new("crate_2", other_user.as_model().id).expect_build(conn);
    })`
$DIR/src/tests/owners.rs:1224:9-1224:78: `CrateBuilder::new("crate_1", owner.as_model().id).expect_build(conn);`
$DIR/src/tests/owners.rs:1224:43-1224:54: `.as_model()`
$DIR/src/tests/owners.rs:1224:58-1224:77: `.expect_build(conn)`
$DIR/src/tests/owners.rs:1225:9-1225:83: `CrateBuilder::new("crate_2", other_user.as_model().id).expect_build(conn);`
$DIR/src/tests/owners.rs:1225:48-1225:59: `.as_model()`
$DIR/src/tests/owners.rs:1225:63-1225:82: `.expect_build(conn)`
$DIR/src/tests/owners.rs:1230:14-1230:97: `.get_with_query::<()>("/api/private/crate_owner_invitations", "crate_name=crate_1")`
$DIR/src/tests/owners.rs:1235:14-1235:97: `.get_with_query::<()>("/api/private/crate_owner_invitations", "crate_name=crate_2")`
$DIR/src/tests/pagination.rs:10:9-13:11: `.with_config(|config| {
            config.max_allowed_page_offset = 1;
            config.page_offset_cidr_blocklist = vec!["127.0.0.1/24".parse::<IpNetwork>().unwrap()];
        })`
$DIR/src/tests/pagination.rs:11:13-11:48: `config.max_allowed_page_offset = 1;`
$DIR/src/tests/pagination.rs:12:13-12:100: `config.page_offset_cidr_blocklist = vec!["127.0.0.1/24".parse::<IpNetwork>().unwrap()];`
$DIR/src/tests/pagination.rs:14:9-14:21: `.with_user()`
$DIR/src/tests/pagination.rs:15:20-15:31: `.as_model()`
$DIR/src/tests/pagination.rs:17:5-21:8: `app.db(|conn| {
        CrateBuilder::new("pagination_links_1", user.id).expect_build(conn);
        CrateBuilder::new("pagination_links_2", user.id).expect_build(conn);
        CrateBuilder::new("pagination_links_3", user.id).expect_build(conn);
    });`
$DIR/src/tests/pagination.rs:17:8-21:7: `.db(|conn| {
        CrateBuilder::new("pagination_links_1", user.id).expect_build(conn);
        CrateBuilder::new("pagination_links_2", user.id).expect_build(conn);
        CrateBuilder::new("pagination_links_3", user.id).expect_build(conn);
    })`
$DIR/src/tests/pagination.rs:18:9-18:77: `CrateBuilder::new("pagination_links_1", user.id).expect_build(conn);`
$DIR/src/tests/pagination.rs:18:57-18:76: `.expect_build(conn)`
$DIR/src/tests/pagination.rs:19:9-19:77: `CrateBuilder::new("pagination_links_2", user.id).expect_build(conn);`
$DIR/src/tests/pagination.rs:19:57-19:76: `.expect_build(conn)`
$DIR/src/tests/pagination.rs:20:9-20:77: `CrateBuilder::new("pagination_links_3", user.id).expect_build(conn);`
$DIR/src/tests/pagination.rs:20:57-20:76: `.expect_build(conn)`
$DIR/src/tests/pagination.rs:23:24-23:84: `.get_with_query::<()>("/api/v1/crates", "page=2&per_page=1")`
$DIR/src/tests/read_only_mode.rs:9:38-9:46: `.empty()`
$DIR/src/tests/read_only_mode.rs:10:5-10:36: `app.db(set_read_only).unwrap();`
$DIR/src/tests/read_only_mode.rs:10:8-10:26: `.db(set_read_only)`
$DIR/src/tests/read_only_mode.rs:11:24-11:52: `.get::<()>("/api/v1/crates")`
$DIR/src/tests/read_only_mode.rs:17:48-17:61: `.with_token()`
$DIR/src/tests/read_only_mode.rs:18:5-23:8: `app.db(|conn| {
        CrateBuilder::new("foo_yank_read_only", user.as_model().id)
            .version("1.0.0")
            .expect_build(conn);
        set_read_only(conn).unwrap();
    });`
$DIR/src/tests/read_only_mode.rs:18:8-23:7: `.db(|conn| {
        CrateBuilder::new("foo_yank_read_only", user.as_model().id)
            .version("1.0.0")
            .expect_build(conn);
        set_read_only(conn).unwrap();
    })`
$DIR/src/tests/read_only_mode.rs:19:9-21:33: `CrateBuilder::new("foo_yank_read_only", user.as_model().id)
            .version("1.0.0")
            .expect_build(conn);`
$DIR/src/tests/read_only_mode.rs:19:53-19:64: `.as_model()`
$DIR/src/tests/read_only_mode.rs:20:13-20:30: `.version("1.0.0")`
$DIR/src/tests/read_only_mode.rs:21:13-21:32: `.expect_build(conn)`
$DIR/src/tests/read_only_mode.rs:22:9-22:38: `set_read_only(conn).unwrap();`
$DIR/src/tests/read_only_mode.rs:25:25-25:86: `.delete::<()>("/api/v1/crates/foo_yank_read_only/1.0.0/yank")`
$DIR/src/tests/read_only_mode.rs:30:9-32:23: `diesel::sql_query("ROLLBACK TO test_post_readonly")
            .execute(conn)
            .unwrap();`
$DIR/src/tests/read_only_mode.rs:31:13-31:27: `.execute(conn)`
$DIR/src/tests/read_only_mode.rs:38:44-38:56: `.with_user()`
$DIR/src/tests/read_only_mode.rs:40:5-45:8: `app.db(|conn| {
        CrateBuilder::new("foo_download_read_only", user.as_model().id)
            .version("1.0.0")
            .expect_build(conn);
        set_read_only(conn).unwrap();
    });`
$DIR/src/tests/read_only_mode.rs:40:8-45:7: `.db(|conn| {
        CrateBuilder::new("foo_download_read_only", user.as_model().id)
            .version("1.0.0")
            .expect_build(conn);
        set_read_only(conn).unwrap();
    })`
$DIR/src/tests/read_only_mode.rs:41:9-43:33: `CrateBuilder::new("foo_download_read_only", user.as_model().id)
            .version("1.0.0")
            .expect_build(conn);`
$DIR/src/tests/read_only_mode.rs:41:57-41:68: `.as_model()`
$DIR/src/tests/read_only_mode.rs:42:13-42:30: `.version("1.0.0")`
$DIR/src/tests/read_only_mode.rs:43:13-43:32: `.expect_build(conn)`
$DIR/src/tests/read_only_mode.rs:44:9-44:38: `set_read_only(conn).unwrap();`
$DIR/src/tests/read_only_mode.rs:47:24-47:90: `.get::<()>("/api/v1/crates/foo_download_read_only/1.0.0/download")`
$DIR/src/tests/read_only_mode.rs:56:30-56:53: `.select(sum(downloads))`
$DIR/src/tests/read_only_mode.rs:56:53-56:70: `.get_result(conn)`
$DIR/src/tests/routes/categories/get.rs:10:38-10:46: `.empty()`
$DIR/src/tests/routes/categories/get.rs:14:5-14:38: `anon.get(url).assert_not_found();`
$DIR/src/tests/routes/categories/get.rs:14:9-14:18: `.get(url)`
$DIR/src/tests/routes/categories/get.rs:14:18-14:37: `.assert_not_found()`
$DIR/src/tests/routes/categories/get.rs:17:5-22:8: `app.db(|conn| {
        assert_ok!(new_category("Foo Bar", "foo-bar", "Foo Bar crates").create_or_update(conn));
        assert_ok!(
            new_category("Foo Bar::Baz", "foo-bar::baz", "Baz crates").create_or_update(conn)
        );
    });`
$DIR/src/tests/routes/categories/get.rs:17:8-22:7: `.db(|conn| {
        assert_ok!(new_category("Foo Bar", "foo-bar", "Foo Bar crates").create_or_update(conn));
        assert_ok!(
            new_category("Foo Bar::Baz", "foo-bar::baz", "Baz crates").create_or_update(conn)
        );
    })`
$DIR/src/tests/routes/categories/get.rs:18:9-18:97: `assert_ok!(new_category("Foo Bar", "foo-bar", "Foo Bar crates").create_or_update(conn));`
$DIR/src/tests/routes/categories/get.rs:19:9-21:11: `assert_ok!(
            new_category("Foo Bar::Baz", "foo-bar::baz", "Baz crates").create_or_update(conn)
        );`
$DIR/src/tests/routes/categories/get.rs:25:27-25:36: `.get(url)`
$DIR/src/tests/routes/categories/get.rs:25:36-25:43: `.good()`
$DIR/src/tests/routes/categories/get.rs:40:44-40:56: `.with_user()`
$DIR/src/tests/routes/categories/get.rs:41:20-41:31: `.as_model()`
$DIR/src/tests/routes/categories/get.rs:43:20-50:7: `.db(|conn| {
        assert_ok!(new_category("cat1", "cat1", "Category 1 crates").create_or_update(conn));
        assert_ok!(
            new_category("Category 2", "category-2", "Category 2 crates").create_or_update(conn)
        );

        CrateBuilder::new("foo_crate", user.id).expect_build(conn)
    })`
$DIR/src/tests/routes/categories/get.rs:44:9-44:94: `assert_ok!(new_category("cat1", "cat1", "Category 1 crates").create_or_update(conn));`
$DIR/src/tests/routes/categories/get.rs:45:9-47:11: `assert_ok!(
            new_category("Category 2", "category-2", "Category 2 crates").create_or_update(conn)
        );`
$DIR/src/tests/routes/categories/get.rs:49:9-49:67: `CrateBuilder::new("foo_crate", user.id).expect_build(conn)`
$DIR/src/tests/routes/categories/get.rs:49:48-49:67: `.expect_build(conn)`
$DIR/src/tests/routes/categories/get.rs:53:5-53:71: `app.db(|conn| Category::update_crate(conn, &krate, &[]).unwrap());`
$DIR/src/tests/routes/categories/get.rs:53:8-53:70: `.db(|conn| Category::update_crate(conn, &krate, &[]).unwrap())`
$DIR/src/tests/routes/categories/get.rs:58:5-58:77: `app.db(|conn| Category::update_crate(conn, &krate, &["cat1"]).unwrap());`
$DIR/src/tests/routes/categories/get.rs:58:8-58:76: `.db(|conn| Category::update_crate(conn, &krate, &["cat1"]).unwrap())`
$DIR/src/tests/routes/categories/get.rs:63:5-63:83: `app.db(|conn| Category::update_crate(conn, &krate, &["category-2"]).unwrap());`
$DIR/src/tests/routes/categories/get.rs:63:8-63:82: `.db(|conn| Category::update_crate(conn, &krate, &["category-2"]).unwrap())`
$DIR/src/tests/routes/categories/get.rs:68:5-68:71: `app.db(|conn| Category::update_crate(conn, &krate, &[]).unwrap());`
$DIR/src/tests/routes/categories/get.rs:68:8-68:70: `.db(|conn| Category::update_crate(conn, &krate, &[]).unwrap())`
$DIR/src/tests/routes/categories/get.rs:73:5-73:91: `app.db(|conn| Category::update_crate(conn, &krate, &["cat1", "category-2"]).unwrap());`
$DIR/src/tests/routes/categories/get.rs:73:8-73:90: `.db(|conn| Category::update_crate(conn, &krate, &["cat1", "category-2"]).unwrap())`
$DIR/src/tests/routes/categories/get.rs:78:5-78:71: `app.db(|conn| Category::update_crate(conn, &krate, &[]).unwrap());`
$DIR/src/tests/routes/categories/get.rs:78:8-78:70: `.db(|conn| Category::update_crate(conn, &krate, &[]).unwrap())`
$DIR/src/tests/routes/categories/get.rs:83:5-87:8: `app.db(|conn| {
        let invalid_categories =
            Category::update_crate(conn, &krate, &["cat1", "catnope"]).unwrap();
        assert_eq!(invalid_categories, vec!["catnope"]);
    });`
$DIR/src/tests/routes/categories/get.rs:83:8-87:7: `.db(|conn| {
        let invalid_categories =
            Category::update_crate(conn, &krate, &["cat1", "catnope"]).unwrap();
        assert_eq!(invalid_categories, vec!["catnope"]);
    })`
$DIR/src/tests/routes/categories/get.rs:93:20-93:41: `.show_category_list()`
$DIR/src/tests/routes/categories/get.rs:98:5-98:83: `app.db(|conn| Category::update_crate(conn, &krate, &["Category 2"]).unwrap());`
$DIR/src/tests/routes/categories/get.rs:98:8-98:82: `.db(|conn| Category::update_crate(conn, &krate, &["Category 2"]).unwrap())`
$DIR/src/tests/routes/categories/get.rs:103:5-106:8: `app.db(|conn| {
        assert_ok!(new_category("cat1::bar", "cat1::bar", "bar crates").create_or_update(conn));
        Category::update_crate(conn, &krate, &["cat1", "cat1::bar"]).unwrap();
    });`
$DIR/src/tests/routes/categories/get.rs:103:8-106:7: `.db(|conn| {
        assert_ok!(new_category("cat1::bar", "cat1::bar", "bar crates").create_or_update(conn));
        Category::update_crate(conn, &krate, &["cat1", "cat1::bar"]).unwrap();
    })`
$DIR/src/tests/routes/categories/get.rs:104:9-104:97: `assert_ok!(new_category("cat1::bar", "cat1::bar", "bar crates").create_or_update(conn));`
$DIR/src/tests/routes/categories/get.rs:105:9-105:79: `Category::update_crate(conn, &krate, &["cat1", "cat1::bar"]).unwrap();`
$DIR/src/tests/routes/categories/list.rs:8:38-8:46: `.empty()`
$DIR/src/tests/routes/categories/list.rs:11:27-11:53: `.get("/api/v1/categories")`
$DIR/src/tests/routes/categories/list.rs:11:53-11:60: `.good()`
$DIR/src/tests/routes/categories/list.rs:12:5-12:33: `assert_yaml_snapshot!(json);`
$DIR/src/tests/routes/categories/list.rs:15:5-22:8: `app.db(|conn| {
        new_category("foo", "foo", "Foo crates")
            .create_or_update(conn)
            .unwrap();
        new_category("foo::bar", "foo::bar", "Bar crates")
            .create_or_update(conn)
            .unwrap();
    });`
$DIR/src/tests/routes/categories/list.rs:15:8-22:7: `.db(|conn| {
        new_category("foo", "foo", "Foo crates")
            .create_or_update(conn)
            .unwrap();
        new_category("foo::bar", "foo::bar", "Bar crates")
            .create_or_update(conn)
            .unwrap();
    })`
$DIR/src/tests/routes/categories/list.rs:16:9-18:23: `new_category("foo", "foo", "Foo crates")
            .create_or_update(conn)
            .unwrap();`
$DIR/src/tests/routes/categories/list.rs:17:13-17:36: `.create_or_update(conn)`
$DIR/src/tests/routes/categories/list.rs:19:9-21:23: `new_category("foo::bar", "foo::bar", "Bar crates")
            .create_or_update(conn)
            .unwrap();`
$DIR/src/tests/routes/categories/list.rs:20:13-20:36: `.create_or_update(conn)`
$DIR/src/tests/routes/categories/list.rs:25:27-25:53: `.get("/api/v1/categories")`
$DIR/src/tests/routes/categories/list.rs:25:53-25:60: `.good()`
$DIR/src/tests/routes/category_slugs/list.rs:8:38-8:46: `.empty()`
$DIR/src/tests/routes/category_slugs/list.rs:9:5-16:8: `app.db(|conn| {
        new_category("Foo", "foo", "For crates that foo")
            .create_or_update(conn)
            .unwrap();
        new_category("Bar", "bar", "For crates that bar")
            .create_or_update(conn)
            .unwrap();
    });`
$DIR/src/tests/routes/category_slugs/list.rs:9:8-16:7: `.db(|conn| {
        new_category("Foo", "foo", "For crates that foo")
            .create_or_update(conn)
            .unwrap();
        new_category("Bar", "bar", "For crates that bar")
            .create_or_update(conn)
            .unwrap();
    })`
$DIR/src/tests/routes/category_slugs/list.rs:10:9-12:23: `new_category("Foo", "foo", "For crates that foo")
            .create_or_update(conn)
            .unwrap();`
$DIR/src/tests/routes/category_slugs/list.rs:11:13-11:36: `.create_or_update(conn)`
$DIR/src/tests/routes/category_slugs/list.rs:13:9-15:23: `new_category("Bar", "bar", "For crates that bar")
            .create_or_update(conn)
            .unwrap();`
$DIR/src/tests/routes/category_slugs/list.rs:14:13-14:36: `.create_or_update(conn)`
$DIR/src/tests/routes/category_slugs/list.rs:18:31-18:61: `.get("/api/v1/category_slugs")`
$DIR/src/tests/routes/category_slugs/list.rs:18:61-18:68: `.good()`
$DIR/src/tests/routes/crates/downloads.rs:43:44-43:56: `.with_user()`
$DIR/src/tests/routes/crates/downloads.rs:44:20-44:31: `.as_model()`
$DIR/src/tests/routes/crates/downloads.rs:46:5-50:8: `app.db(|conn| {
        CrateBuilder::new("foo_download", user.id)
            .version(VersionBuilder::new("1.0.0"))
            .expect_build(conn);
    });`
$DIR/src/tests/routes/crates/downloads.rs:46:8-50:7: `.db(|conn| {
        CrateBuilder::new("foo_download", user.id)
            .version(VersionBuilder::new("1.0.0"))
            .expect_build(conn);
    })`
$DIR/src/tests/routes/crates/downloads.rs:47:9-49:33: `CrateBuilder::new("foo_download", user.id)
            .version(VersionBuilder::new("1.0.0"))
            .expect_build(conn);`
$DIR/src/tests/routes/crates/downloads.rs:48:13-48:51: `.version(VersionBuilder::new("1.0.0"))`
$DIR/src/tests/routes/crates/downloads.rs:49:13-49:32: `.expect_build(conn)`
$DIR/src/tests/routes/crates/downloads.rs:54:28-54:44: `.get::<()>(&url)`
$DIR/src/tests/routes/crates/downloads.rs:59:5-59:36: `download("foo_download/1.0.0");`
$DIR/src/tests/routes/crates/downloads.rs:61:5-61:59: `assert_dl_count(&anon, "foo_download/1.0.0", None, 0);`
$DIR/src/tests/routes/crates/downloads.rs:62:5-62:53: `assert_dl_count(&anon, "foo_download", None, 0);`
$DIR/src/tests/routes/crates/downloads.rs:63:5-63:35: `persist_downloads_count(&app);`
$DIR/src/tests/routes/crates/downloads.rs:65:5-65:59: `assert_dl_count(&anon, "foo_download/1.0.0", None, 1);`
$DIR/src/tests/routes/crates/downloads.rs:66:5-66:53: `assert_dl_count(&anon, "foo_download", None, 1);`
$DIR/src/tests/routes/crates/downloads.rs:68:5-68:36: `download("FOO_DOWNLOAD/1.0.0");`
$DIR/src/tests/routes/crates/downloads.rs:69:5-69:35: `persist_downloads_count(&app);`
$DIR/src/tests/routes/crates/downloads.rs:70:5-70:59: `assert_dl_count(&anon, "FOO_DOWNLOAD/1.0.0", None, 2);`
$DIR/src/tests/routes/crates/downloads.rs:71:5-71:53: `assert_dl_count(&anon, "FOO_DOWNLOAD", None, 2);`
$DIR/src/tests/routes/crates/downloads.rs:73:32-73:45: `.date_naive()`
$DIR/src/tests/routes/crates/downloads.rs:73:67-73:80: `.format("%F")`
$DIR/src/tests/routes/crates/downloads.rs:75:5-75:67: `assert_dl_count(&anon, "FOO_DOWNLOAD/1.0.0", Some(&query), 0);`
$DIR/src/tests/routes/crates/downloads.rs:79:31-79:44: `.date_naive()`
$DIR/src/tests/routes/crates/downloads.rs:79:65-79:78: `.format("%F")`
$DIR/src/tests/routes/crates/downloads.rs:81:5-81:67: `assert_dl_count(&anon, "FOO_DOWNLOAD/1.0.0", Some(&query), 2);`
$DIR/src/tests/routes/crates/following.rs:6:39-6:51: `.with_user()`
$DIR/src/tests/routes/crates/following.rs:8:9-8:55: `.get("/api/v1/crates/foo_following/following")`
$DIR/src/tests/routes/crates/following.rs:14:45-14:58: `.with_token()`
$DIR/src/tests/routes/crates/following.rs:15:26-15:37: `.as_model()`
$DIR/src/tests/routes/crates/following.rs:19:5-21:8: `app.db(|conn| {
        CrateBuilder::new(a_crate, api_token.user_id).expect_build(conn);
    });`
$DIR/src/tests/routes/crates/following.rs:19:8-21:7: `.db(|conn| {
        CrateBuilder::new(a_crate, api_token.user_id).expect_build(conn);
    })`
$DIR/src/tests/routes/crates/following.rs:20:9-20:74: `CrateBuilder::new(a_crate, api_token.user_id).expect_build(conn);`
$DIR/src/tests/routes/crates/following.rs:20:54-20:73: `.expect_build(conn)`
$DIR/src/tests/routes/crates/following.rs:25:9-25:61: `.get(&format!("/api/v1/crates/{a_crate}/following"))`
$DIR/src/tests/routes/crates/list.rs:11:38-11:46: `.empty()`
$DIR/src/tests/routes/crates/list.rs:12:20-12:31: `.search("")`
$DIR/src/tests/routes/crates/list.rs:16:20-21:7: `.db(|conn| {
        let u = new_user("foo")
            .create_or_update(None, &app.as_inner().emails, conn)
            .unwrap();
        CrateBuilder::new("fooindex", u.id).expect_build(conn)
    })`
$DIR/src/tests/routes/crates/list.rs:18:13-18:66: `.create_or_update(None, &app.as_inner().emails, conn)`
$DIR/src/tests/routes/crates/list.rs:18:41-18:52: `.as_inner()`
$DIR/src/tests/routes/crates/list.rs:20:9-20:63: `CrateBuilder::new("fooindex", u.id).expect_build(conn)`
$DIR/src/tests/routes/crates/list.rs:20:44-20:63: `.expect_build(conn)`
$DIR/src/tests/routes/crates/list.rs:23:20-23:31: `.search("")`
$DIR/src/tests/routes/crates/list.rs:33:44-33:56: `.with_user()`
$DIR/src/tests/routes/crates/list.rs:34:20-34:31: `.as_model()`
$DIR/src/tests/routes/crates/list.rs:36:30-56:7: `.db(|conn| {
        let krate = CrateBuilder::new("foo_index_queries", user.id)
            .readme("readme")
            .description("description")
            .keyword("kw1")
            .expect_build(conn);

        let krate2 = CrateBuilder::new("BAR_INDEX_QUERIES", user.id)
            .keyword("KW1")
            .expect_build(conn);

        CrateBuilder::new("foo", user.id)
            .keyword("kw3")
            .expect_build(conn);

        CrateBuilder::new("two-keywords", user.id)
            .keyword("kw1")
            .keyword("kw3")
            .expect_build(conn);
        (krate, krate2)
    })`
$DIR/src/tests/routes/crates/list.rs:38:13-38:30: `.readme("readme")`
$DIR/src/tests/routes/crates/list.rs:39:13-39:40: `.description("description")`
$DIR/src/tests/routes/crates/list.rs:40:13-40:28: `.keyword("kw1")`
$DIR/src/tests/routes/crates/list.rs:41:13-41:32: `.expect_build(conn)`
$DIR/src/tests/routes/crates/list.rs:44:13-44:28: `.keyword("KW1")`
$DIR/src/tests/routes/crates/list.rs:45:13-45:32: `.expect_build(conn)`
$DIR/src/tests/routes/crates/list.rs:47:9-49:33: `CrateBuilder::new("foo", user.id)
            .keyword("kw3")
            .expect_build(conn);`
$DIR/src/tests/routes/crates/list.rs:48:13-48:28: `.keyword("kw3")`
$DIR/src/tests/routes/crates/list.rs:49:13-49:32: `.expect_build(conn)`
$DIR/src/tests/routes/crates/list.rs:51:9-54:33: `CrateBuilder::new("two-keywords", user.id)
            .keyword("kw1")
            .keyword("kw3")
            .expect_build(conn);`
$DIR/src/tests/routes/crates/list.rs:52:13-52:28: `.keyword("kw1")`
$DIR/src/tests/routes/crates/list.rs:53:13-53:28: `.keyword("kw3")`
$DIR/src/tests/routes/crates/list.rs:54:13-54:32: `.expect_build(conn)`
$DIR/src/tests/routes/crates/list.rs:55:9-55:24: `(krate, krate2)`
$DIR/src/tests/routes/crates/list.rs:82:5-91:8: `app.db(|conn| {
        new_category("Category 1", "cat1", "Category 1 crates")
            .create_or_update(conn)
            .unwrap();
        new_category("Category 1::Ba'r", "cat1::bar", "Ba'r crates")
            .create_or_update(conn)
            .unwrap();
        Category::update_crate(conn, &krate, &["cat1"]).unwrap();
        Category::update_crate(conn, &krate2, &["cat1::bar"]).unwrap();
    });`
$DIR/src/tests/routes/crates/list.rs:82:8-91:7: `.db(|conn| {
        new_category("Category 1", "cat1", "Category 1 crates")
            .create_or_update(conn)
            .unwrap();
        new_category("Category 1::Ba'r", "cat1::bar", "Ba'r crates")
            .create_or_update(conn)
            .unwrap();
        Category::update_crate(conn, &krate, &["cat1"]).unwrap();
        Category::update_crate(conn, &krate2, &["cat1::bar"]).unwrap();
    })`
$DIR/src/tests/routes/crates/list.rs:83:9-85:23: `new_category("Category 1", "cat1", "Category 1 crates")
            .create_or_update(conn)
            .unwrap();`
$DIR/src/tests/routes/crates/list.rs:84:13-84:36: `.create_or_update(conn)`
$DIR/src/tests/routes/crates/list.rs:86:9-88:23: `new_category("Category 1::Ba'r", "cat1::bar", "Ba'r crates")
            .create_or_update(conn)
            .unwrap();`
$DIR/src/tests/routes/crates/list.rs:87:13-87:36: `.create_or_update(conn)`
$DIR/src/tests/routes/crates/list.rs:89:9-89:66: `Category::update_crate(conn, &krate, &["cat1"]).unwrap();`
$DIR/src/tests/routes/crates/list.rs:90:9-90:72: `Category::update_crate(conn, &krate2, &["cat1::bar"]).unwrap();`
$DIR/src/tests/routes/crates/list.rs:93:18-93:42: `.search("category=cat1")`
$DIR/src/tests/routes/crates/list.rs:97:18-97:47: `.search("category=cat1::bar")`
$DIR/src/tests/routes/crates/list.rs:101:18-101:41: `.search("keyword=cat2")`
$DIR/src/tests/routes/crates/list.rs:105:18-105:51: `.search("q=readme&category=cat1")`
$DIR/src/tests/routes/crates/list.rs:109:18-109:54: `.search("keyword=kw1&category=cat1")`
$DIR/src/tests/routes/crates/list.rs:113:18-113:54: `.search("keyword=kw3&category=cat1")`
$DIR/src/tests/routes/crates/list.rs:123:44-123:56: `.with_user()`
$DIR/src/tests/routes/crates/list.rs:124:20-124:31: `.as_model()`
$DIR/src/tests/routes/crates/list.rs:125:5-130:8: `app.db(|conn| {
        CrateBuilder::new("which", user.id).expect_build(conn);
        CrateBuilder::new("should_be_excluded", user.id)
            .readme("crate which does things")
            .expect_build(conn);
    });`
$DIR/src/tests/routes/crates/list.rs:125:8-130:7: `.db(|conn| {
        CrateBuilder::new("which", user.id).expect_build(conn);
        CrateBuilder::new("should_be_excluded", user.id)
            .readme("crate which does things")
            .expect_build(conn);
    })`
$DIR/src/tests/routes/crates/list.rs:126:9-126:64: `CrateBuilder::new("which", user.id).expect_build(conn);`
$DIR/src/tests/routes/crates/list.rs:126:44-126:63: `.expect_build(conn)`
$DIR/src/tests/routes/crates/list.rs:127:9-129:33: `CrateBuilder::new("should_be_excluded", user.id)
            .readme("crate which does things")
            .expect_build(conn);`
$DIR/src/tests/routes/crates/list.rs:128:13-128:47: `.readme("crate which does things")`
$DIR/src/tests/routes/crates/list.rs:129:13-129:32: `.expect_build(conn)`
$DIR/src/tests/routes/crates/list.rs:131:20-131:38: `.search("q=which")`
$DIR/src/tests/routes/crates/list.rs:138:44-138:56: `.with_user()`
$DIR/src/tests/routes/crates/list.rs:139:20-139:31: `.as_model()`
$DIR/src/tests/routes/crates/list.rs:141:5-157:8: `app.db(|conn| {
        CrateBuilder::new("foo_exact", user.id)
            .description("bar_exact baz_exact")
            .expect_build(conn);

        CrateBuilder::new("bar-exact", user.id)
            .description("foo_exact baz_exact foo-exact baz_exact")
            .expect_build(conn);

        CrateBuilder::new("baz_exact", user.id)
            .description("foo-exact bar_exact foo-exact bar_exact foo_exact bar_exact")
            .expect_build(conn);

        CrateBuilder::new("other_exact", user.id)
            .description("other_exact")
            .expect_build(conn);
    });`
$DIR/src/tests/routes/crates/list.rs:141:8-157:7: `.db(|conn| {
        CrateBuilder::new("foo_exact", user.id)
            .description("bar_exact baz_exact")
            .expect_build(conn);

        CrateBuilder::new("bar-exact", user.id)
            .description("foo_exact baz_exact foo-exact baz_exact")
            .expect_build(conn);

        CrateBuilder::new("baz_exact", user.id)
            .description("foo-exact bar_exact foo-exact bar_exact foo_exact bar_exact")
            .expect_build(conn);

        CrateBuilder::new("other_exact", user.id)
            .description("other_exact")
            .expect_build(conn);
    })`
$DIR/src/tests/routes/crates/list.rs:142:9-144:33: `CrateBuilder::new("foo_exact", user.id)
            .description("bar_exact baz_exact")
            .expect_build(conn);`
$DIR/src/tests/routes/crates/list.rs:143:13-143:48: `.description("bar_exact baz_exact")`
$DIR/src/tests/routes/crates/list.rs:144:13-144:32: `.expect_build(conn)`
$DIR/src/tests/routes/crates/list.rs:146:9-148:33: `CrateBuilder::new("bar-exact", user.id)
            .description("foo_exact baz_exact foo-exact baz_exact")
            .expect_build(conn);`
$DIR/src/tests/routes/crates/list.rs:147:13-147:68: `.description("foo_exact baz_exact foo-exact baz_exact")`
$DIR/src/tests/routes/crates/list.rs:148:13-148:32: `.expect_build(conn)`
$DIR/src/tests/routes/crates/list.rs:150:9-152:33: `CrateBuilder::new("baz_exact", user.id)
            .description("foo-exact bar_exact foo-exact bar_exact foo_exact bar_exact")
            .expect_build(conn);`
$DIR/src/tests/routes/crates/list.rs:151:13-151:88: `.description("foo-exact bar_exact foo-exact bar_exact foo_exact bar_exact")`
$DIR/src/tests/routes/crates/list.rs:152:13-152:32: `.expect_build(conn)`
$DIR/src/tests/routes/crates/list.rs:154:9-156:33: `CrateBuilder::new("other_exact", user.id)
            .description("other_exact")
            .expect_build(conn);`
$DIR/src/tests/routes/crates/list.rs:155:13-155:40: `.description("other_exact")`
$DIR/src/tests/routes/crates/list.rs:156:13-156:32: `.expect_build(conn)`
$DIR/src/tests/routes/crates/list.rs:159:20-159:42: `.search("q=foo-exact")`
$DIR/src/tests/routes/crates/list.rs:165:20-165:42: `.search("q=bar_exact")`
$DIR/src/tests/routes/crates/list.rs:171:20-171:42: `.search("q=baz_exact")`
$DIR/src/tests/routes/crates/list.rs:181:44-181:56: `.with_user()`
$DIR/src/tests/routes/crates/list.rs:182:20-182:31: `.as_model()`
$DIR/src/tests/routes/crates/list.rs:184:5-243:8: `app.db(|conn| {
        let krate1 = CrateBuilder::new("foo_sort", user.id)
            .description("bar_sort baz_sort const")
            .downloads(50)
            .recent_downloads(50)
            .expect_build(conn);

        let krate2 = CrateBuilder::new("bar_sort", user.id)
            .description("foo_sort baz_sort foo_sort baz_sort const")
            .downloads(3333)
            .recent_downloads(0)
            .expect_build(conn);

        let krate3 = CrateBuilder::new("baz_sort", user.id)
            .description("foo_sort bar_sort foo_sort bar_sort foo_sort bar_sort const")
            .downloads(100_000)
            .recent_downloads(10)
            .expect_build(conn);

        let krate4 = CrateBuilder::new("other_sort", user.id)
            .description("other_sort const")
            .downloads(999_999)
            .expect_build(conn);

        // Set the created at column for each crate
        update(&krate1)
            .set(crates::created_at.eq(now - 4.weeks()))
            .execute(conn)
            .unwrap();
        update(&krate2)
            .set(crates::created_at.eq(now - 1.weeks()))
            .execute(conn)
            .unwrap();
        update(&krate3)
            .set(crates::created_at.eq(now - 2.weeks()))
            .execute(conn)
            .unwrap();
        update(&krate4)
            .set(crates::created_at.eq(now - 3.weeks()))
            .execute(conn)
            .unwrap();

        // Set the updated at column for each crate
        update(&krate1)
            .set(crates::updated_at.eq(now - 3.weeks()))
            .execute(conn)
            .unwrap();
        update(&krate2)
            .set(crates::updated_at.eq(now - 5.days()))
            .execute(conn)
            .unwrap();
        update(&krate3)
            .set(crates::updated_at.eq(now - 10.seconds()))
            .execute(conn)
            .unwrap();
        update(&krate4)
            .set(crates::updated_at.eq(now))
            .execute(conn)
            .unwrap();
    });`
$DIR/src/tests/routes/crates/list.rs:184:8-243:7: `.db(|conn| {
        let krate1 = CrateBuilder::new("foo_sort", user.id)
            .description("bar_sort baz_sort const")
            .downloads(50)
            .recent_downloads(50)
            .expect_build(conn);

        let krate2 = CrateBuilder::new("bar_sort", user.id)
            .description("foo_sort baz_sort foo_sort baz_sort const")
            .downloads(3333)
            .recent_downloads(0)
            .expect_build(conn);

        let krate3 = CrateBuilder::new("baz_sort", user.id)
            .description("foo_sort bar_sort foo_sort bar_sort foo_sort bar_sort const")
            .downloads(100_000)
            .recent_downloads(10)
            .expect_build(conn);

        let krate4 = CrateBuilder::new("other_sort", user.id)
            .description("other_sort const")
            .downloads(999_999)
            .expect_build(conn);

        // Set the created at column for each crate
        update(&krate1)
            .set(crates::created_at.eq(now - 4.weeks()))
            .execute(conn)
            .unwrap();
        update(&krate2)
            .set(crates::created_at.eq(now - 1.weeks()))
            .execute(conn)
            .unwrap();
        update(&krate3)
            .set(crates::created_at.eq(now - 2.weeks()))
            .execute(conn)
            .unwrap();
        update(&krate4)
            .set(crates::created_at.eq(now - 3.weeks()))
            .execute(conn)
            .unwrap();

        // Set the updated at column for each crate
        update(&krate1)
            .set(crates::updated_at.eq(now - 3.weeks()))
            .execute(conn)
            .unwrap();
        update(&krate2)
            .set(crates::updated_at.eq(now - 5.days()))
            .execute(conn)
            .unwrap();
        update(&krate3)
            .set(crates::updated_at.eq(now - 10.seconds()))
            .execute(conn)
            .unwrap();
        update(&krate4)
            .set(crates::updated_at.eq(now))
            .execute(conn)
            .unwrap();
    })`
$DIR/src/tests/routes/crates/list.rs:186:13-186:52: `.description("bar_sort baz_sort const")`
$DIR/src/tests/routes/crates/list.rs:187:13-187:27: `.downloads(50)`
$DIR/src/tests/routes/crates/list.rs:188:13-188:34: `.recent_downloads(50)`
$DIR/src/tests/routes/crates/list.rs:189:13-189:32: `.expect_build(conn)`
$DIR/src/tests/routes/crates/list.rs:192:13-192:70: `.description("foo_sort baz_sort foo_sort baz_sort const")`
$DIR/src/tests/routes/crates/list.rs:193:13-193:29: `.downloads(3333)`
$DIR/src/tests/routes/crates/list.rs:194:13-194:33: `.recent_downloads(0)`
$DIR/src/tests/routes/crates/list.rs:195:13-195:32: `.expect_build(conn)`
$DIR/src/tests/routes/crates/list.rs:198:13-198:88: `.description("foo_sort bar_sort foo_sort bar_sort foo_sort bar_sort const")`
$DIR/src/tests/routes/crates/list.rs:199:13-199:32: `.downloads(100_000)`
$DIR/src/tests/routes/crates/list.rs:200:13-200:34: `.recent_downloads(10)`
$DIR/src/tests/routes/crates/list.rs:201:13-201:32: `.expect_build(conn)`
$DIR/src/tests/routes/crates/list.rs:204:13-204:45: `.description("other_sort const")`
$DIR/src/tests/routes/crates/list.rs:205:13-205:32: `.downloads(999_999)`
$DIR/src/tests/routes/crates/list.rs:206:13-206:32: `.expect_build(conn)`
$DIR/src/tests/routes/crates/list.rs:209:9-212:23: `update(&krate1)
            .set(crates::created_at.eq(now - 4.weeks()))
            .execute(conn)
            .unwrap();`
$DIR/src/tests/routes/crates/list.rs:210:13-210:57: `.set(crates::created_at.eq(now - 4.weeks()))`
$DIR/src/tests/routes/crates/list.rs:210:36-210:56: `.eq(now - 4.weeks())`
$DIR/src/tests/routes/crates/list.rs:210:47-210:55: `.weeks()`
$DIR/src/tests/routes/crates/list.rs:211:13-211:27: `.execute(conn)`
$DIR/src/tests/routes/crates/list.rs:213:9-216:23: `update(&krate2)
            .set(crates::created_at.eq(now - 1.weeks()))
            .execute(conn)
            .unwrap();`
$DIR/src/tests/routes/crates/list.rs:214:13-214:57: `.set(crates::created_at.eq(now - 1.weeks()))`
$DIR/src/tests/routes/crates/list.rs:214:36-214:56: `.eq(now - 1.weeks())`
$DIR/src/tests/routes/crates/list.rs:214:47-214:55: `.weeks()`
$DIR/src/tests/routes/crates/list.rs:215:13-215:27: `.execute(conn)`
$DIR/src/tests/routes/crates/list.rs:217:9-220:23: `update(&krate3)
            .set(crates::created_at.eq(now - 2.weeks()))
            .execute(conn)
            .unwrap();`
$DIR/src/tests/routes/crates/list.rs:218:13-218:57: `.set(crates::created_at.eq(now - 2.weeks()))`
$DIR/src/tests/routes/crates/list.rs:218:36-218:56: `.eq(now - 2.weeks())`
$DIR/src/tests/routes/crates/list.rs:218:47-218:55: `.weeks()`
$DIR/src/tests/routes/crates/list.rs:219:13-219:27: `.execute(conn)`
$DIR/src/tests/routes/crates/list.rs:221:9-224:23: `update(&krate4)
            .set(crates::created_at.eq(now - 3.weeks()))
            .execute(conn)
            .unwrap();`
$DIR/src/tests/routes/crates/list.rs:222:13-222:57: `.set(crates::created_at.eq(now - 3.weeks()))`
$DIR/src/tests/routes/crates/list.rs:222:36-222:56: `.eq(now - 3.weeks())`
$DIR/src/tests/routes/crates/list.rs:222:47-222:55: `.weeks()`
$DIR/src/tests/routes/crates/list.rs:223:13-223:27: `.execute(conn)`
$DIR/src/tests/routes/crates/list.rs:227:9-230:23: `update(&krate1)
            .set(crates::updated_at.eq(now - 3.weeks()))
            .execute(conn)
            .unwrap();`
$DIR/src/tests/routes/crates/list.rs:228:13-228:57: `.set(crates::updated_at.eq(now - 3.weeks()))`
$DIR/src/tests/routes/crates/list.rs:228:36-228:56: `.eq(now - 3.weeks())`
$DIR/src/tests/routes/crates/list.rs:228:47-228:55: `.weeks()`
$DIR/src/tests/routes/crates/list.rs:229:13-229:27: `.execute(conn)`
$DIR/src/tests/routes/crates/list.rs:231:9-234:23: `update(&krate2)
            .set(crates::updated_at.eq(now - 5.days()))
            .execute(conn)
            .unwrap();`
$DIR/src/tests/routes/crates/list.rs:232:13-232:56: `.set(crates::updated_at.eq(now - 5.days()))`
$DIR/src/tests/routes/crates/list.rs:232:36-232:55: `.eq(now - 5.days())`
$DIR/src/tests/routes/crates/list.rs:232:47-232:54: `.days()`
$DIR/src/tests/routes/crates/list.rs:233:13-233:27: `.execute(conn)`
$DIR/src/tests/routes/crates/list.rs:235:9-238:23: `update(&krate3)
            .set(crates::updated_at.eq(now - 10.seconds()))
            .execute(conn)
            .unwrap();`
$DIR/src/tests/routes/crates/list.rs:236:13-236:60: `.set(crates::updated_at.eq(now - 10.seconds()))`
$DIR/src/tests/routes/crates/list.rs:236:36-236:59: `.eq(now - 10.seconds())`
$DIR/src/tests/routes/crates/list.rs:236:48-236:58: `.seconds()`
$DIR/src/tests/routes/crates/list.rs:237:13-237:27: `.execute(conn)`
$DIR/src/tests/routes/crates/list.rs:239:9-242:23: `update(&krate4)
            .set(crates::updated_at.eq(now))
            .execute(conn)
            .unwrap();`
$DIR/src/tests/routes/crates/list.rs:240:13-240:45: `.set(crates::updated_at.eq(now))`
$DIR/src/tests/routes/crates/list.rs:240:36-240:44: `.eq(now)`
$DIR/src/tests/routes/crates/list.rs:241:13-241:27: `.execute(conn)`
$DIR/src/tests/routes/crates/list.rs:246:20-246:45: `.search("sort=downloads")`
$DIR/src/tests/routes/crates/list.rs:254:20-254:52: `.search("sort=recent-downloads")`
$DIR/src/tests/routes/crates/list.rs:262:20-262:50: `.search("sort=recent-updates")`
$DIR/src/tests/routes/crates/list.rs:270:20-270:39: `.search("sort=new")`
$DIR/src/tests/routes/crates/list.rs:279:20-279:52: `.search("sort=recent-downloads")`
$DIR/src/tests/routes/crates/list.rs:290:44-290:56: `.with_user()`
$DIR/src/tests/routes/crates/list.rs:291:20-291:31: `.as_model()`
$DIR/src/tests/routes/crates/list.rs:293:5-352:8: `app.db(|conn| {
        let krate1 = CrateBuilder::new("foo_sort", user.id)
            .description("bar_sort baz_sort const")
            .downloads(50)
            .recent_downloads(50)
            .expect_build(conn);

        let krate2 = CrateBuilder::new("bar_sort", user.id)
            .description("foo_sort baz_sort foo_sort baz_sort const")
            .downloads(3333)
            .recent_downloads(0)
            .expect_build(conn);

        let krate3 = CrateBuilder::new("baz_sort", user.id)
            .description("foo_sort bar_sort foo_sort bar_sort foo_sort bar_sort const")
            .downloads(100_000)
            .recent_downloads(10)
            .expect_build(conn);

        let krate4 = CrateBuilder::new("other_sort", user.id)
            .description("other_sort const")
            .downloads(999_999)
            .expect_build(conn);

        // Set the created at column for each crate
        update(&krate1)
            .set(crates::created_at.eq(now - 4.weeks()))
            .execute(conn)
            .unwrap();
        update(&krate2)
            .set(crates::created_at.eq(now - 1.weeks()))
            .execute(conn)
            .unwrap();
        update(&krate3)
            .set(crates::created_at.eq(now - 2.weeks()))
            .execute(conn)
            .unwrap();
        update(&krate4)
            .set(crates::created_at.eq(now - 3.weeks()))
            .execute(conn)
            .unwrap();

        // Set the updated at column for each crate
        update(&krate1)
            .set(crates::updated_at.eq(now - 3.weeks()))
            .execute(conn)
            .unwrap();
        update(&krate2)
            .set(crates::updated_at.eq(now - 5.days()))
            .execute(conn)
            .unwrap();
        update(&krate3)
            .set(crates::updated_at.eq(now - 10.seconds()))
            .execute(conn)
            .unwrap();
        update(&krate4)
            .set(crates::updated_at.eq(now))
            .execute(conn)
            .unwrap();
    });`
$DIR/src/tests/routes/crates/list.rs:293:8-352:7: `.db(|conn| {
        let krate1 = CrateBuilder::new("foo_sort", user.id)
            .description("bar_sort baz_sort const")
            .downloads(50)
            .recent_downloads(50)
            .expect_build(conn);

        let krate2 = CrateBuilder::new("bar_sort", user.id)
            .description("foo_sort baz_sort foo_sort baz_sort const")
            .downloads(3333)
            .recent_downloads(0)
            .expect_build(conn);

        let krate3 = CrateBuilder::new("baz_sort", user.id)
            .description("foo_sort bar_sort foo_sort bar_sort foo_sort bar_sort const")
            .downloads(100_000)
            .recent_downloads(10)
            .expect_build(conn);

        let krate4 = CrateBuilder::new("other_sort", user.id)
            .description("other_sort const")
            .downloads(999_999)
            .expect_build(conn);

        // Set the created at column for each crate
        update(&krate1)
            .set(crates::created_at.eq(now - 4.weeks()))
            .execute(conn)
            .unwrap();
        update(&krate2)
            .set(crates::created_at.eq(now - 1.weeks()))
            .execute(conn)
            .unwrap();
        update(&krate3)
            .set(crates::created_at.eq(now - 2.weeks()))
            .execute(conn)
            .unwrap();
        update(&krate4)
            .set(crates::created_at.eq(now - 3.weeks()))
            .execute(conn)
            .unwrap();

        // Set the updated at column for each crate
        update(&krate1)
            .set(crates::updated_at.eq(now - 3.weeks()))
            .execute(conn)
            .unwrap();
        update(&krate2)
            .set(crates::updated_at.eq(now - 5.days()))
            .execute(conn)
            .unwrap();
        update(&krate3)
            .set(crates::updated_at.eq(now - 10.seconds()))
            .execute(conn)
            .unwrap();
        update(&krate4)
            .set(crates::updated_at.eq(now))
            .execute(conn)
            .unwrap();
    })`
$DIR/src/tests/routes/crates/list.rs:295:13-295:52: `.description("bar_sort baz_sort const")`
$DIR/src/tests/routes/crates/list.rs:296:13-296:27: `.downloads(50)`
$DIR/src/tests/routes/crates/list.rs:297:13-297:34: `.recent_downloads(50)`
$DIR/src/tests/routes/crates/list.rs:298:13-298:32: `.expect_build(conn)`
$DIR/src/tests/routes/crates/list.rs:301:13-301:70: `.description("foo_sort baz_sort foo_sort baz_sort const")`
$DIR/src/tests/routes/crates/list.rs:302:13-302:29: `.downloads(3333)`
$DIR/src/tests/routes/crates/list.rs:303:13-303:33: `.recent_downloads(0)`
$DIR/src/tests/routes/crates/list.rs:304:13-304:32: `.expect_build(conn)`
$DIR/src/tests/routes/crates/list.rs:307:13-307:88: `.description("foo_sort bar_sort foo_sort bar_sort foo_sort bar_sort const")`
$DIR/src/tests/routes/crates/list.rs:308:13-308:32: `.downloads(100_000)`
$DIR/src/tests/routes/crates/list.rs:309:13-309:34: `.recent_downloads(10)`
$DIR/src/tests/routes/crates/list.rs:310:13-310:32: `.expect_build(conn)`
$DIR/src/tests/routes/crates/list.rs:313:13-313:45: `.description("other_sort const")`
$DIR/src/tests/routes/crates/list.rs:314:13-314:32: `.downloads(999_999)`
$DIR/src/tests/routes/crates/list.rs:315:13-315:32: `.expect_build(conn)`
$DIR/src/tests/routes/crates/list.rs:318:9-321:23: `update(&krate1)
            .set(crates::created_at.eq(now - 4.weeks()))
            .execute(conn)
            .unwrap();`
$DIR/src/tests/routes/crates/list.rs:319:13-319:57: `.set(crates::created_at.eq(now - 4.weeks()))`
$DIR/src/tests/routes/crates/list.rs:319:36-319:56: `.eq(now - 4.weeks())`
$DIR/src/tests/routes/crates/list.rs:319:47-319:55: `.weeks()`
$DIR/src/tests/routes/crates/list.rs:320:13-320:27: `.execute(conn)`
$DIR/src/tests/routes/crates/list.rs:322:9-325:23: `update(&krate2)
            .set(crates::created_at.eq(now - 1.weeks()))
            .execute(conn)
            .unwrap();`
$DIR/src/tests/routes/crates/list.rs:323:13-323:57: `.set(crates::created_at.eq(now - 1.weeks()))`
$DIR/src/tests/routes/crates/list.rs:323:36-323:56: `.eq(now - 1.weeks())`
$DIR/src/tests/routes/crates/list.rs:323:47-323:55: `.weeks()`
$DIR/src/tests/routes/crates/list.rs:324:13-324:27: `.execute(conn)`
$DIR/src/tests/routes/crates/list.rs:326:9-329:23: `update(&krate3)
            .set(crates::created_at.eq(now - 2.weeks()))
            .execute(conn)
            .unwrap();`
$DIR/src/tests/routes/crates/list.rs:327:13-327:57: `.set(crates::created_at.eq(now - 2.weeks()))`
$DIR/src/tests/routes/crates/list.rs:327:36-327:56: `.eq(now - 2.weeks())`
$DIR/src/tests/routes/crates/list.rs:327:47-327:55: `.weeks()`
$DIR/src/tests/routes/crates/list.rs:328:13-328:27: `.execute(conn)`
$DIR/src/tests/routes/crates/list.rs:330:9-333:23: `update(&krate4)
            .set(crates::created_at.eq(now - 3.weeks()))
            .execute(conn)
            .unwrap();`
$DIR/src/tests/routes/crates/list.rs:331:13-331:57: `.set(crates::created_at.eq(now - 3.weeks()))`
$DIR/src/tests/routes/crates/list.rs:331:36-331:56: `.eq(now - 3.weeks())`
$DIR/src/tests/routes/crates/list.rs:331:47-331:55: `.weeks()`
$DIR/src/tests/routes/crates/list.rs:332:13-332:27: `.execute(conn)`
$DIR/src/tests/routes/crates/list.rs:336:9-339:23: `update(&krate1)
            .set(crates::updated_at.eq(now - 3.weeks()))
            .execute(conn)
            .unwrap();`
$DIR/src/tests/routes/crates/list.rs:337:13-337:57: `.set(crates::updated_at.eq(now - 3.weeks()))`
$DIR/src/tests/routes/crates/list.rs:337:36-337:56: `.eq(now - 3.weeks())`
$DIR/src/tests/routes/crates/list.rs:337:47-337:55: `.weeks()`
$DIR/src/tests/routes/crates/list.rs:338:13-338:27: `.execute(conn)`
$DIR/src/tests/routes/crates/list.rs:340:9-343:23: `update(&krate2)
            .set(crates::updated_at.eq(now - 5.days()))
            .execute(conn)
            .unwrap();`
$DIR/src/tests/routes/crates/list.rs:341:13-341:56: `.set(crates::updated_at.eq(now - 5.days()))`
$DIR/src/tests/routes/crates/list.rs:341:36-341:55: `.eq(now - 5.days())`
$DIR/src/tests/routes/crates/list.rs:341:47-341:54: `.days()`
$DIR/src/tests/routes/crates/list.rs:342:13-342:27: `.execute(conn)`
$DIR/src/tests/routes/crates/list.rs:344:9-347:23: `update(&krate3)
            .set(crates::updated_at.eq(now - 10.seconds()))
            .execute(conn)
            .unwrap();`
$DIR/src/tests/routes/crates/list.rs:345:13-345:60: `.set(crates::updated_at.eq(now - 10.seconds()))`
$DIR/src/tests/routes/crates/list.rs:345:36-345:59: `.eq(now - 10.seconds())`
$DIR/src/tests/routes/crates/list.rs:345:48-345:58: `.seconds()`
$DIR/src/tests/routes/crates/list.rs:346:13-346:27: `.execute(conn)`
$DIR/src/tests/routes/crates/list.rs:348:9-351:23: `update(&krate4)
            .set(crates::updated_at.eq(now))
            .execute(conn)
            .unwrap();`
$DIR/src/tests/routes/crates/list.rs:349:13-349:45: `.set(crates::updated_at.eq(now))`
$DIR/src/tests/routes/crates/list.rs:349:36-349:44: `.eq(now)`
$DIR/src/tests/routes/crates/list.rs:350:13-350:27: `.execute(conn)`
$DIR/src/tests/routes/crates/list.rs:355:20-355:56: `.search("q=foo_sort&sort=downloads")`
$DIR/src/tests/routes/crates/list.rs:361:20-361:56: `.search("q=bar_sort&sort=downloads")`
$DIR/src/tests/routes/crates/list.rs:367:20-367:56: `.search("q=baz_sort&sort=downloads")`
$DIR/src/tests/routes/crates/list.rs:373:20-373:53: `.search("q=const&sort=downloads")`
$DIR/src/tests/routes/crates/list.rs:381:20-381:63: `.search("q=bar_sort&sort=recent-downloads")`
$DIR/src/tests/routes/crates/list.rs:389:20-389:52: `.search("sort=recent-downloads")`
$DIR/src/tests/routes/crates/list.rs:397:20-397:61: `.search("q=bar_sort&sort=recent-updates")`
$DIR/src/tests/routes/crates/list.rs:404:20-404:50: `.search("q=bar_sort&sort=new")`
$DIR/src/tests/routes/crates/list.rs:413:44-413:56: `.with_user()`
$DIR/src/tests/routes/crates/list.rs:414:20-414:31: `.as_model()`
$DIR/src/tests/routes/crates/list.rs:416:5-421:8: `app.db(|conn| {
        CrateBuilder::new("foo", user.id).expect_build(conn);
        CrateBuilder::new("bar", user.id).expect_build(conn);
        CrateBuilder::new("baz", user.id).expect_build(conn);
        CrateBuilder::new("other", user.id).expect_build(conn);
    });`
$DIR/src/tests/routes/crates/list.rs:416:8-421:7: `.db(|conn| {
        CrateBuilder::new("foo", user.id).expect_build(conn);
        CrateBuilder::new("bar", user.id).expect_build(conn);
        CrateBuilder::new("baz", user.id).expect_build(conn);
        CrateBuilder::new("other", user.id).expect_build(conn);
    })`
$DIR/src/tests/routes/crates/list.rs:417:9-417:62: `CrateBuilder::new("foo", user.id).expect_build(conn);`
$DIR/src/tests/routes/crates/list.rs:417:42-417:61: `.expect_build(conn)`
$DIR/src/tests/routes/crates/list.rs:418:9-418:62: `CrateBuilder::new("bar", user.id).expect_build(conn);`
$DIR/src/tests/routes/crates/list.rs:418:42-418:61: `.expect_build(conn)`
$DIR/src/tests/routes/crates/list.rs:419:9-419:62: `CrateBuilder::new("baz", user.id).expect_build(conn);`
$DIR/src/tests/routes/crates/list.rs:419:42-419:61: `.expect_build(conn)`
$DIR/src/tests/routes/crates/list.rs:420:9-420:64: `CrateBuilder::new("other", user.id).expect_build(conn);`
$DIR/src/tests/routes/crates/list.rs:420:44-420:63: `.expect_build(conn)`
$DIR/src/tests/routes/crates/list.rs:424:13-424:97: `.search("ids%5B%5D=foo&ids%5B%5D=bar&ids%5B%5D=baz&ids%5B%5D=baz&ids%5B%5D=unknown")`
$DIR/src/tests/routes/crates/list.rs:433:44-433:56: `.with_user()`
$DIR/src/tests/routes/crates/list.rs:434:20-434:31: `.as_model()`
$DIR/src/tests/routes/crates/list.rs:436:22-462:7: `.db(|conn| {
        // exact match should be first
        let one = CrateBuilder::new("temp", user.id)
            .readme("readme")
            .description("description")
            .keyword("kw1")
            .expect_build(conn);
        // temp_udp should match second because of _
        let two = CrateBuilder::new("temp_utp", user.id)
            .readme("readme")
            .description("description")
            .keyword("kw1")
            .expect_build(conn);
        // evalrs should match 3rd because of readme
        let three = CrateBuilder::new("evalrs", user.id)
            .readme("evalrs_temp evalrs_temp evalrs_temp")
            .description("description")
            .keyword("kw1")
            .expect_build(conn);
        // tempfile should appear 4th
        let four = CrateBuilder::new("tempfile", user.id)
            .readme("readme")
            .description("description")
            .keyword("kw1")
            .expect_build(conn);
        vec![one, two, three, four]
    })`
$DIR/src/tests/routes/crates/list.rs:439:13-439:30: `.readme("readme")`
$DIR/src/tests/routes/crates/list.rs:440:13-440:40: `.description("description")`
$DIR/src/tests/routes/crates/list.rs:441:13-441:28: `.keyword("kw1")`
$DIR/src/tests/routes/crates/list.rs:442:13-442:32: `.expect_build(conn)`
$DIR/src/tests/routes/crates/list.rs:445:13-445:30: `.readme("readme")`
$DIR/src/tests/routes/crates/list.rs:446:13-446:40: `.description("description")`
$DIR/src/tests/routes/crates/list.rs:447:13-447:28: `.keyword("kw1")`
$DIR/src/tests/routes/crates/list.rs:448:13-448:32: `.expect_build(conn)`
$DIR/src/tests/routes/crates/list.rs:451:13-451:59: `.readme("evalrs_temp evalrs_temp evalrs_temp")`
$DIR/src/tests/routes/crates/list.rs:452:13-452:40: `.description("description")`
$DIR/src/tests/routes/crates/list.rs:453:13-453:28: `.keyword("kw1")`
$DIR/src/tests/routes/crates/list.rs:454:13-454:32: `.expect_build(conn)`
$DIR/src/tests/routes/crates/list.rs:457:13-457:30: `.readme("readme")`
$DIR/src/tests/routes/crates/list.rs:458:13-458:40: `.description("description")`
$DIR/src/tests/routes/crates/list.rs:459:13-459:28: `.keyword("kw1")`
$DIR/src/tests/routes/crates/list.rs:460:13-460:32: `.expect_build(conn)`
$DIR/src/tests/routes/crates/list.rs:461:9-461:36: `vec![one, two, three, four]`
$DIR/src/tests/routes/crates/list.rs:463:27-463:44: `.search("q=temp")`
$DIR/src/tests/routes/crates/list.rs:466:48-466:61: `.zip(ordered)`
$DIR/src/tests/routes/crates/list.rs:470:27-470:42: `.search("q=te")`
$DIR/src/tests/routes/crates/list.rs:477:44-477:56: `.with_user()`
$DIR/src/tests/routes/crates/list.rs:478:20-478:31: `.as_model()`
$DIR/src/tests/routes/crates/list.rs:480:5-500:8: `app.db(|conn| {
        CrateBuilder::new("unyanked", user.id)
            .version(VersionBuilder::new("1.0.0"))
            .version(VersionBuilder::new("2.0.0"))
            .expect_build(conn);

        CrateBuilder::new("newest_yanked", user.id)
            .version(VersionBuilder::new("1.0.0"))
            .version(VersionBuilder::new("2.0.0").yanked(true))
            .expect_build(conn);

        CrateBuilder::new("oldest_yanked", user.id)
            .version(VersionBuilder::new("1.0.0").yanked(true))
            .version(VersionBuilder::new("2.0.0"))
            .expect_build(conn);

        CrateBuilder::new("all_yanked", user.id)
            .version(VersionBuilder::new("1.0.0").yanked(true))
            .version(VersionBuilder::new("2.0.0").yanked(true))
            .expect_build(conn);
    });`
$DIR/src/tests/routes/crates/list.rs:480:8-500:7: `.db(|conn| {
        CrateBuilder::new("unyanked", user.id)
            .version(VersionBuilder::new("1.0.0"))
            .version(VersionBuilder::new("2.0.0"))
            .expect_build(conn);

        CrateBuilder::new("newest_yanked", user.id)
            .version(VersionBuilder::new("1.0.0"))
            .version(VersionBuilder::new("2.0.0").yanked(true))
            .expect_build(conn);

        CrateBuilder::new("oldest_yanked", user.id)
            .version(VersionBuilder::new("1.0.0").yanked(true))
            .version(VersionBuilder::new("2.0.0"))
            .expect_build(conn);

        CrateBuilder::new("all_yanked", user.id)
            .version(VersionBuilder::new("1.0.0").yanked(true))
            .version(VersionBuilder::new("2.0.0").yanked(true))
            .expect_build(conn);
    })`
$DIR/src/tests/routes/crates/list.rs:481:9-484:33: `CrateBuilder::new("unyanked", user.id)
            .version(VersionBuilder::new("1.0.0"))
            .version(VersionBuilder::new("2.0.0"))
            .expect_build(conn);`
$DIR/src/tests/routes/crates/list.rs:482:13-482:51: `.version(VersionBuilder::new("1.0.0"))`
$DIR/src/tests/routes/crates/list.rs:483:13-483:51: `.version(VersionBuilder::new("2.0.0"))`
$DIR/src/tests/routes/crates/list.rs:484:13-484:32: `.expect_build(conn)`
$DIR/src/tests/routes/crates/list.rs:486:9-489:33: `CrateBuilder::new("newest_yanked", user.id)
            .version(VersionBuilder::new("1.0.0"))
            .version(VersionBuilder::new("2.0.0").yanked(true))
            .expect_build(conn);`
$DIR/src/tests/routes/crates/list.rs:487:13-487:51: `.version(VersionBuilder::new("1.0.0"))`
$DIR/src/tests/routes/crates/list.rs:488:13-488:64: `.version(VersionBuilder::new("2.0.0").yanked(true))`
$DIR/src/tests/routes/crates/list.rs:488:50-488:63: `.yanked(true)`
$DIR/src/tests/routes/crates/list.rs:489:13-489:32: `.expect_build(conn)`
$DIR/src/tests/routes/crates/list.rs:491:9-494:33: `CrateBuilder::new("oldest_yanked", user.id)
            .version(VersionBuilder::new("1.0.0").yanked(true))
            .version(VersionBuilder::new("2.0.0"))
            .expect_build(conn);`
$DIR/src/tests/routes/crates/list.rs:492:13-492:64: `.version(VersionBuilder::new("1.0.0").yanked(true))`
$DIR/src/tests/routes/crates/list.rs:492:50-492:63: `.yanked(true)`
$DIR/src/tests/routes/crates/list.rs:493:13-493:51: `.version(VersionBuilder::new("2.0.0"))`
$DIR/src/tests/routes/crates/list.rs:494:13-494:32: `.expect_build(conn)`
$DIR/src/tests/routes/crates/list.rs:496:9-499:33: `CrateBuilder::new("all_yanked", user.id)
            .version(VersionBuilder::new("1.0.0").yanked(true))
            .version(VersionBuilder::new("2.0.0").yanked(true))
            .expect_build(conn);`
$DIR/src/tests/routes/crates/list.rs:497:13-497:64: `.version(VersionBuilder::new("1.0.0").yanked(true))`
$DIR/src/tests/routes/crates/list.rs:497:50-497:63: `.yanked(true)`
$DIR/src/tests/routes/crates/list.rs:498:13-498:64: `.version(VersionBuilder::new("2.0.0").yanked(true))`
$DIR/src/tests/routes/crates/list.rs:498:50-498:63: `.yanked(true)`
$DIR/src/tests/routes/crates/list.rs:499:13-499:32: `.expect_build(conn)`
$DIR/src/tests/routes/crates/list.rs:503:20-503:67: `.search("include_yanked=yes&sort=alphabetical")`
$DIR/src/tests/routes/crates/list.rs:511:20-511:66: `.search("include_yanked=no&sort=alphabetical")`
$DIR/src/tests/routes/crates/list.rs:520:44-520:56: `.with_user()`
$DIR/src/tests/routes/crates/list.rs:521:20-521:31: `.as_model()`
$DIR/src/tests/routes/crates/list.rs:523:5-529:8: `app.db(|conn| {
        CrateBuilder::new("foo_yanked_version", user.id)
            .description("foo")
            .version("1.0.0")
            .version(VersionBuilder::new("1.1.0").yanked(true))
            .expect_build(conn);
    });`
$DIR/src/tests/routes/crates/list.rs:523:8-529:7: `.db(|conn| {
        CrateBuilder::new("foo_yanked_version", user.id)
            .description("foo")
            .version("1.0.0")
            .version(VersionBuilder::new("1.1.0").yanked(true))
            .expect_build(conn);
    })`
$DIR/src/tests/routes/crates/list.rs:524:9-528:33: `CrateBuilder::new("foo_yanked_version", user.id)
            .description("foo")
            .version("1.0.0")
            .version(VersionBuilder::new("1.1.0").yanked(true))
            .expect_build(conn);`
$DIR/src/tests/routes/crates/list.rs:525:13-525:32: `.description("foo")`
$DIR/src/tests/routes/crates/list.rs:526:13-526:30: `.version("1.0.0")`
$DIR/src/tests/routes/crates/list.rs:527:13-527:64: `.version(VersionBuilder::new("1.1.0").yanked(true))`
$DIR/src/tests/routes/crates/list.rs:527:50-527:63: `.yanked(true)`
$DIR/src/tests/routes/crates/list.rs:528:13-528:32: `.expect_build(conn)`
$DIR/src/tests/routes/crates/list.rs:531:20-531:36: `.search("q=foo")`
$DIR/src/tests/routes/crates/list.rs:538:44-538:56: `.with_user()`
$DIR/src/tests/routes/crates/list.rs:539:20-539:31: `.as_model()`
$DIR/src/tests/routes/crates/list.rs:541:5-550:8: `app.db(|conn| {
        CrateBuilder::new("foo", user.id)
            .description("foo")
            .version("0.3.0")
            .version("1.0.0")
            .version(VersionBuilder::new("1.1.0").yanked(true))
            .version("2.0.0-beta.1")
            .version("0.3.1")
            .expect_build(conn);
    });`
$DIR/src/tests/routes/crates/list.rs:541:8-550:7: `.db(|conn| {
        CrateBuilder::new("foo", user.id)
            .description("foo")
            .version("0.3.0")
            .version("1.0.0")
            .version(VersionBuilder::new("1.1.0").yanked(true))
            .version("2.0.0-beta.1")
            .version("0.3.1")
            .expect_build(conn);
    })`
$DIR/src/tests/routes/crates/list.rs:542:9-549:33: `CrateBuilder::new("foo", user.id)
            .description("foo")
            .version("0.3.0")
            .version("1.0.0")
            .version(VersionBuilder::new("1.1.0").yanked(true))
            .version("2.0.0-beta.1")
            .version("0.3.1")
            .expect_build(conn);`
$DIR/src/tests/routes/crates/list.rs:543:13-543:32: `.description("foo")`
$DIR/src/tests/routes/crates/list.rs:544:13-544:30: `.version("0.3.0")`
$DIR/src/tests/routes/crates/list.rs:545:13-545:30: `.version("1.0.0")`
$DIR/src/tests/routes/crates/list.rs:546:13-546:64: `.version(VersionBuilder::new("1.1.0").yanked(true))`
$DIR/src/tests/routes/crates/list.rs:546:50-546:63: `.yanked(true)`
$DIR/src/tests/routes/crates/list.rs:547:13-547:37: `.version("2.0.0-beta.1")`
$DIR/src/tests/routes/crates/list.rs:548:13-548:30: `.version("0.3.1")`
$DIR/src/tests/routes/crates/list.rs:549:13-549:32: `.expect_build(conn)`
$DIR/src/tests/routes/crates/list.rs:552:20-552:36: `.search("q=foo")`
$DIR/src/tests/routes/crates/list.rs:565:44-565:56: `.with_user()`
$DIR/src/tests/routes/crates/list.rs:566:20-566:31: `.as_model()`
$DIR/src/tests/routes/crates/list.rs:568:5-581:8: `app.db(|conn| {
        // More than 90 days ago
        CrateBuilder::new("green_ball", user.id)
            .description("For fetching")
            .downloads(10)
            .recent_downloads(0)
            .expect_build(conn);

        CrateBuilder::new("sweet_potato_snack", user.id)
            .description("For when better than usual")
            .downloads(5)
            .recent_downloads(2)
            .expect_build(conn);
    });`
$DIR/src/tests/routes/crates/list.rs:568:8-581:7: `.db(|conn| {
        // More than 90 days ago
        CrateBuilder::new("green_ball", user.id)
            .description("For fetching")
            .downloads(10)
            .recent_downloads(0)
            .expect_build(conn);

        CrateBuilder::new("sweet_potato_snack", user.id)
            .description("For when better than usual")
            .downloads(5)
            .recent_downloads(2)
            .expect_build(conn);
    })`
$DIR/src/tests/routes/crates/list.rs:570:9-574:33: `CrateBuilder::new("green_ball", user.id)
            .description("For fetching")
            .downloads(10)
            .recent_downloads(0)
            .expect_build(conn);`
$DIR/src/tests/routes/crates/list.rs:571:13-571:41: `.description("For fetching")`
$DIR/src/tests/routes/crates/list.rs:572:13-572:27: `.downloads(10)`
$DIR/src/tests/routes/crates/list.rs:573:13-573:33: `.recent_downloads(0)`
$DIR/src/tests/routes/crates/list.rs:574:13-574:32: `.expect_build(conn)`
$DIR/src/tests/routes/crates/list.rs:576:9-580:33: `CrateBuilder::new("sweet_potato_snack", user.id)
            .description("For when better than usual")
            .downloads(5)
            .recent_downloads(2)
            .expect_build(conn);`
$DIR/src/tests/routes/crates/list.rs:577:13-577:55: `.description("For when better than usual")`
$DIR/src/tests/routes/crates/list.rs:578:13-578:26: `.downloads(5)`
$DIR/src/tests/routes/crates/list.rs:579:13-579:33: `.recent_downloads(2)`
$DIR/src/tests/routes/crates/list.rs:580:13-580:32: `.expect_build(conn)`
$DIR/src/tests/routes/crates/list.rs:583:20-583:52: `.search("sort=recent-downloads")`
$DIR/src/tests/routes/crates/list.rs:602:44-602:56: `.with_user()`
$DIR/src/tests/routes/crates/list.rs:603:20-603:31: `.as_model()`
$DIR/src/tests/routes/crates/list.rs:605:5-612:8: `app.db(|conn| {
        // More than 90 days ago
        CrateBuilder::new("green_ball", user.id)
            .description("For fetching")
            .downloads(0)
            .recent_downloads(0)
            .expect_build(conn);
    });`
$DIR/src/tests/routes/crates/list.rs:605:8-612:7: `.db(|conn| {
        // More than 90 days ago
        CrateBuilder::new("green_ball", user.id)
            .description("For fetching")
            .downloads(0)
            .recent_downloads(0)
            .expect_build(conn);
    })`
$DIR/src/tests/routes/crates/list.rs:607:9-611:33: `CrateBuilder::new("green_ball", user.id)
            .description("For fetching")
            .downloads(0)
            .recent_downloads(0)
            .expect_build(conn);`
$DIR/src/tests/routes/crates/list.rs:608:13-608:41: `.description("For fetching")`
$DIR/src/tests/routes/crates/list.rs:609:13-609:26: `.downloads(0)`
$DIR/src/tests/routes/crates/list.rs:610:13-610:33: `.recent_downloads(0)`
$DIR/src/tests/routes/crates/list.rs:611:13-611:32: `.expect_build(conn)`
$DIR/src/tests/routes/crates/list.rs:614:20-614:52: `.search("sort=recent-downloads")`
$DIR/src/tests/routes/crates/list.rs:626:44-626:56: `.with_user()`
$DIR/src/tests/routes/crates/list.rs:627:20-627:31: `.as_model()`
$DIR/src/tests/routes/crates/list.rs:629:42-646:7: `.db(|conn| {
        // More than 90 days ago
        let green_crate = CrateBuilder::new("green_ball", user.id)
            .description("For fetching")
            .keyword("dog")
            .downloads(10)
            .recent_downloads(10)
            .expect_build(conn);

        let potato_crate = CrateBuilder::new("sweet_potato_snack", user.id)
            .description("For when better than usual")
            .keyword("dog")
            .downloads(20)
            .recent_downloads(0)
            .expect_build(conn);

        (green_crate, potato_crate)
    })`
$DIR/src/tests/routes/crates/list.rs:632:13-632:41: `.description("For fetching")`
$DIR/src/tests/routes/crates/list.rs:633:13-633:28: `.keyword("dog")`
$DIR/src/tests/routes/crates/list.rs:634:13-634:27: `.downloads(10)`
$DIR/src/tests/routes/crates/list.rs:635:13-635:34: `.recent_downloads(10)`
$DIR/src/tests/routes/crates/list.rs:636:13-636:32: `.expect_build(conn)`
$DIR/src/tests/routes/crates/list.rs:639:13-639:55: `.description("For when better than usual")`
$DIR/src/tests/routes/crates/list.rs:640:13-640:28: `.keyword("dog")`
$DIR/src/tests/routes/crates/list.rs:641:13-641:27: `.downloads(20)`
$DIR/src/tests/routes/crates/list.rs:642:13-642:33: `.recent_downloads(0)`
$DIR/src/tests/routes/crates/list.rs:643:13-643:32: `.expect_build(conn)`
$DIR/src/tests/routes/crates/list.rs:645:9-645:36: `(green_crate, potato_crate)`
$DIR/src/tests/routes/crates/list.rs:650:20-650:42: `.search("keyword=dog")`
$DIR/src/tests/routes/crates/list.rs:663:5-669:8: `app.db(|conn| {
        new_category("Animal", "animal", "animal crates")
            .create_or_update(conn)
            .unwrap();
        Category::update_crate(conn, &green_crate, &["animal"]).unwrap();
        Category::update_crate(conn, &potato_crate, &["animal"]).unwrap();
    });`
$DIR/src/tests/routes/crates/list.rs:663:8-669:7: `.db(|conn| {
        new_category("Animal", "animal", "animal crates")
            .create_or_update(conn)
            .unwrap();
        Category::update_crate(conn, &green_crate, &["animal"]).unwrap();
        Category::update_crate(conn, &potato_crate, &["animal"]).unwrap();
    })`
$DIR/src/tests/routes/crates/list.rs:664:9-666:23: `new_category("Animal", "animal", "animal crates")
            .create_or_update(conn)
            .unwrap();`
$DIR/src/tests/routes/crates/list.rs:665:13-665:36: `.create_or_update(conn)`
$DIR/src/tests/routes/crates/list.rs:667:9-667:74: `Category::update_crate(conn, &green_crate, &["animal"]).unwrap();`
$DIR/src/tests/routes/crates/list.rs:668:9-668:75: `Category::update_crate(conn, &potato_crate, &["animal"]).unwrap();`
$DIR/src/tests/routes/crates/list.rs:673:20-673:46: `.search("category=animal")`
$DIR/src/tests/routes/crates/list.rs:689:44-689:56: `.with_user()`
$DIR/src/tests/routes/crates/list.rs:690:20-690:31: `.as_model()`
$DIR/src/tests/routes/crates/list.rs:692:5-696:8: `app.db(|conn| {
        CrateBuilder::new("pagination_links_1", user.id).expect_build(conn);
        CrateBuilder::new("pagination_links_2", user.id).expect_build(conn);
        CrateBuilder::new("pagination_links_3", user.id).expect_build(conn);
    });`
$DIR/src/tests/routes/crates/list.rs:692:8-696:7: `.db(|conn| {
        CrateBuilder::new("pagination_links_1", user.id).expect_build(conn);
        CrateBuilder::new("pagination_links_2", user.id).expect_build(conn);
        CrateBuilder::new("pagination_links_3", user.id).expect_build(conn);
    })`
$DIR/src/tests/routes/crates/list.rs:693:9-693:77: `CrateBuilder::new("pagination_links_1", user.id).expect_build(conn);`
$DIR/src/tests/routes/crates/list.rs:693:57-693:76: `.expect_build(conn)`
$DIR/src/tests/routes/crates/list.rs:694:9-694:77: `CrateBuilder::new("pagination_links_2", user.id).expect_build(conn);`
$DIR/src/tests/routes/crates/list.rs:694:57-694:76: `.expect_build(conn)`
$DIR/src/tests/routes/crates/list.rs:695:9-695:77: `CrateBuilder::new("pagination_links_3", user.id).expect_build(conn);`
$DIR/src/tests/routes/crates/list.rs:695:57-695:76: `.expect_build(conn)`
$DIR/src/tests/routes/crates/list.rs:702:21-702:51: `.search("letter=p&per_page=1")`
$DIR/src/tests/routes/crates/list.rs:703:21-703:58: `.search("letter=p&page=2&per_page=1")`
$DIR/src/tests/routes/crates/list.rs:704:21-704:58: `.search("letter=p&page=3&per_page=1")`
$DIR/src/tests/routes/crates/list.rs:705:21-705:58: `.search("letter=p&page=4&per_page=1")`
$DIR/src/tests/routes/crates/list.rs:729:44-729:56: `.with_user()`
$DIR/src/tests/routes/crates/list.rs:730:20-730:31: `.as_model()`
$DIR/src/tests/routes/crates/list.rs:732:5-736:8: `app.db(|conn| {
        CrateBuilder::new("pagination_links_1", user.id).expect_build(conn);
        CrateBuilder::new("pagination_links_2", user.id).expect_build(conn);
        CrateBuilder::new("pagination_links_3", user.id).expect_build(conn);
    });`
$DIR/src/tests/routes/crates/list.rs:732:8-736:7: `.db(|conn| {
        CrateBuilder::new("pagination_links_1", user.id).expect_build(conn);
        CrateBuilder::new("pagination_links_2", user.id).expect_build(conn);
        CrateBuilder::new("pagination_links_3", user.id).expect_build(conn);
    })`
$DIR/src/tests/routes/crates/list.rs:733:9-733:77: `CrateBuilder::new("pagination_links_1", user.id).expect_build(conn);`
$DIR/src/tests/routes/crates/list.rs:733:57-733:76: `.expect_build(conn)`
$DIR/src/tests/routes/crates/list.rs:734:9-734:77: `CrateBuilder::new("pagination_links_2", user.id).expect_build(conn);`
$DIR/src/tests/routes/crates/list.rs:734:57-734:76: `.expect_build(conn)`
$DIR/src/tests/routes/crates/list.rs:735:9-735:77: `CrateBuilder::new("pagination_links_3", user.id).expect_build(conn);`
$DIR/src/tests/routes/crates/list.rs:735:57-735:76: `.expect_build(conn)`
$DIR/src/tests/routes/crates/list.rs:741:38-741:45: `.take()`
$DIR/src/tests/routes/crates/list.rs:742:24-742:68: `.search(current_url.trim_start_matches('?'))`
$DIR/src/tests/routes/crates/list.rs:742:43-742:67: `.trim_start_matches('?')`
$DIR/src/tests/routes/crates/list.rs:743:9-743:20: `calls += 1;`
$DIR/src/tests/routes/crates/list.rs:745:9-751:11: `results.append(
            &mut resp
                .crates
                .iter()
                .map(|res| res.name.clone())
                .collect::<Vec<_>>(),
        );`
$DIR/src/tests/routes/crates/list.rs:745:16-751:10: `.append(
            &mut resp
                .crates
                .iter()
                .map(|res| res.name.clone())
                .collect::<Vec<_>>(),
        )`
$DIR/src/tests/routes/crates/list.rs:749:17-749:45: `.map(|res| res.name.clone())`
$DIR/src/tests/routes/crates/list.rs:750:17-750:37: `.collect::<Vec<_>>()`
$DIR/src/tests/routes/crates/list.rs:755:13-755:33: `url = Some(new_url);`
$DIR/src/tests/routes/crates/list.rs:777:44-777:56: `.with_user()`
$DIR/src/tests/routes/crates/list.rs:778:20-778:31: `.as_model()`
$DIR/src/tests/routes/crates/list.rs:780:5-784:8: `app.db(|conn| {
        CrateBuilder::new("pagination_links_1", user.id).expect_build(conn);
        CrateBuilder::new("pagination_links_2", user.id).expect_build(conn);
        CrateBuilder::new("pagination_links_3", user.id).expect_build(conn);
    });`
$DIR/src/tests/routes/crates/list.rs:780:8-784:7: `.db(|conn| {
        CrateBuilder::new("pagination_links_1", user.id).expect_build(conn);
        CrateBuilder::new("pagination_links_2", user.id).expect_build(conn);
        CrateBuilder::new("pagination_links_3", user.id).expect_build(conn);
    })`
$DIR/src/tests/routes/crates/list.rs:781:9-781:77: `CrateBuilder::new("pagination_links_1", user.id).expect_build(conn);`
$DIR/src/tests/routes/crates/list.rs:781:57-781:76: `.expect_build(conn)`
$DIR/src/tests/routes/crates/list.rs:782:9-782:77: `CrateBuilder::new("pagination_links_2", user.id).expect_build(conn);`
$DIR/src/tests/routes/crates/list.rs:782:57-782:76: `.expect_build(conn)`
$DIR/src/tests/routes/crates/list.rs:783:9-783:77: `CrateBuilder::new("pagination_links_3", user.id).expect_build(conn);`
$DIR/src/tests/routes/crates/list.rs:783:57-783:76: `.expect_build(conn)`
$DIR/src/tests/routes/crates/list.rs:787:21-787:42: `.search("per_page=1")`
$DIR/src/tests/routes/crates/list.rs:791:22-791:50: `.search("page=2&per_page=1")`
$DIR/src/tests/routes/crates/list.rs:797:44-797:56: `.with_user()`
$DIR/src/tests/routes/crates/list.rs:798:20-798:31: `.as_model()`
$DIR/src/tests/routes/crates/list.rs:800:5-804:8: `app.db(|conn| {
        CrateBuilder::new("pagination_links_1", user.id).expect_build(conn);
        CrateBuilder::new("pagination_links_2", user.id).expect_build(conn);
        CrateBuilder::new("pagination_links_3", user.id).expect_build(conn);
    });`
$DIR/src/tests/routes/crates/list.rs:800:8-804:7: `.db(|conn| {
        CrateBuilder::new("pagination_links_1", user.id).expect_build(conn);
        CrateBuilder::new("pagination_links_2", user.id).expect_build(conn);
        CrateBuilder::new("pagination_links_3", user.id).expect_build(conn);
    })`
$DIR/src/tests/routes/crates/list.rs:801:9-801:77: `CrateBuilder::new("pagination_links_1", user.id).expect_build(conn);`
$DIR/src/tests/routes/crates/list.rs:801:57-801:76: `.expect_build(conn)`
$DIR/src/tests/routes/crates/list.rs:802:9-802:77: `CrateBuilder::new("pagination_links_2", user.id).expect_build(conn);`
$DIR/src/tests/routes/crates/list.rs:802:57-802:76: `.expect_build(conn)`
$DIR/src/tests/routes/crates/list.rs:803:9-803:77: `CrateBuilder::new("pagination_links_3", user.id).expect_build(conn);`
$DIR/src/tests/routes/crates/list.rs:803:57-803:76: `.expect_build(conn)`
$DIR/src/tests/routes/crates/list.rs:807:13-807:96: `.get_with_query::<()>("/api/v1/crates", "page=1&per_page=100%22%EF%BC%8Cexception")`
$DIR/src/tests/routes/crates/list.rs:815:13-815:96: `.get_with_query::<()>("/api/v1/crates", "page=100%22%EF%BC%8Cexception&per_page=1")`
$DIR/src/tests/routes/crates/list.rs:825:41-825:53: `.with_user()`
$DIR/src/tests/routes/crates/list.rs:826:18-826:29: `.as_model()`
$DIR/src/tests/routes/crates/list.rs:827:5-829:8: `app.db(|conn| {
        CrateBuilder::new("foo_my_packages", id).expect_build(conn);
    });`
$DIR/src/tests/routes/crates/list.rs:827:8-829:7: `.db(|conn| {
        CrateBuilder::new("foo_my_packages", id).expect_build(conn);
    })`
$DIR/src/tests/routes/crates/list.rs:828:9-828:69: `CrateBuilder::new("foo_my_packages", id).expect_build(conn);`
$DIR/src/tests/routes/crates/list.rs:828:49-828:68: `.expect_build(conn)`
$DIR/src/tests/routes/crates/list.rs:831:24-831:46: `.search_by_user_id(id)`
$DIR/src/tests/routes/crates/list.rs:837:44-837:56: `.with_user()`
$DIR/src/tests/routes/crates/list.rs:838:20-838:31: `.as_model()`
$DIR/src/tests/routes/crates/list.rs:840:5-845:8: `app.db(|conn| {
        let krate = CrateBuilder::new("foo_my_packages", user.id).expect_build(conn);
        krate
            .owner_remove(app.as_inner(), conn, user, "foo")
            .unwrap();
    });`
$DIR/src/tests/routes/crates/list.rs:840:8-845:7: `.db(|conn| {
        let krate = CrateBuilder::new("foo_my_packages", user.id).expect_build(conn);
        krate
            .owner_remove(app.as_inner(), conn, user, "foo")
            .unwrap();
    })`
$DIR/src/tests/routes/crates/list.rs:841:66-841:85: `.expect_build(conn)`
$DIR/src/tests/routes/crates/list.rs:842:9-844:23: `krate
            .owner_remove(app.as_inner(), conn, user, "foo")
            .unwrap();`
$DIR/src/tests/routes/crates/list.rs:843:13-843:61: `.owner_remove(app.as_inner(), conn, user, "foo")`
$DIR/src/tests/routes/crates/list.rs:843:30-843:41: `.as_inner()`
$DIR/src/tests/routes/crates/list.rs:847:24-847:51: `.search_by_user_id(user.id)`
$DIR/src/tests/routes/crates/new.rs:6:41-6:53: `.with_user()`
$DIR/src/tests/routes/crates/new.rs:8:33-8:44: `.as_inner()`
$DIR/src/tests/routes/crates/new.rs:11:51-11:86: `.version(&format!("0.0.{version}"))`
$DIR/src/tests/routes/crates/new.rs:12:9-12:53: `user.publish_crate(crate_to_publish).good();`
$DIR/src/tests/routes/crates/new.rs:12:13-12:45: `.publish_crate(crate_to_publish)`
$DIR/src/tests/routes/crates/new.rs:12:45-12:52: `.good()`
$DIR/src/tests/routes/crates/new.rs:15:66-15:83: `.version("1.0.0")`
$DIR/src/tests/routes/crates/new.rs:16:24-16:56: `.publish_crate(crate_to_publish)`
$DIR/src/tests/routes/crates/new.rs:18:24-18:36: `.into_json()`
$DIR/src/tests/routes/crates/owners/add.rs:9:42-9:54: `.with_user()`
$DIR/src/tests/routes/crates/owners/add.rs:11:23-11:47: `.db_new_user("cilantro")`
$DIR/src/tests/routes/crates/owners/add.rs:12:5-14:8: `app.db(|conn| {
        CrateBuilder::new("guacamole", owner.as_model().id).expect_build(conn);
    });`
$DIR/src/tests/routes/crates/owners/add.rs:12:8-14:7: `.db(|conn| {
        CrateBuilder::new("guacamole", owner.as_model().id).expect_build(conn);
    })`
$DIR/src/tests/routes/crates/owners/add.rs:13:9-13:80: `CrateBuilder::new("guacamole", owner.as_model().id).expect_build(conn);`
$DIR/src/tests/routes/crates/owners/add.rs:13:45-13:56: `.as_model()`
$DIR/src/tests/routes/crates/owners/add.rs:13:60-13:79: `.expect_build(conn)`
$DIR/src/tests/routes/crates/owners/add.rs:31:9-31:74: `.put("/api/v1/crates/guacamole/owners", body.unwrap().as_bytes())`
$DIR/src/tests/routes/crates/owners/add.rs:32:9-32:16: `.good()`
$DIR/src/tests/routes/crates/read.rs:7:44-7:56: `.with_user()`
$DIR/src/tests/routes/crates/read.rs:8:20-8:31: `.as_model()`
$DIR/src/tests/routes/crates/read.rs:10:20-36:7: `.db(|conn| {
        use crates_io::schema::versions;
        use diesel::{update, ExpressionMethods};

        let krate = CrateBuilder::new("foo_show", user.id)
            .description("description")
            .documentation("https://example.com")
            .homepage("http://example.com")
            .version(VersionBuilder::new("1.0.0"))
            .version(VersionBuilder::new("0.5.0"))
            .version(VersionBuilder::new("0.5.1"))
            .keyword("kw1")
            .downloads(20)
            .recent_downloads(10)
            .expect_build(conn);

        // Make version 1.0.0 mimic a version published before we started recording who published
        // versions
        let none: Option<i32> = None;
        update(versions::table)
            .filter(versions::num.eq("1.0.0"))
            .set(versions::published_by.eq(none))
            .execute(conn)
            .unwrap();

        krate
    })`
$DIR/src/tests/routes/crates/read.rs:15:13-15:40: `.description("description")`
$DIR/src/tests/routes/crates/read.rs:16:13-16:50: `.documentation("https://example.com")`
$DIR/src/tests/routes/crates/read.rs:17:13-17:44: `.homepage("http://example.com")`
$DIR/src/tests/routes/crates/read.rs:18:13-18:51: `.version(VersionBuilder::new("1.0.0"))`
$DIR/src/tests/routes/crates/read.rs:19:13-19:51: `.version(VersionBuilder::new("0.5.0"))`
$DIR/src/tests/routes/crates/read.rs:20:13-20:51: `.version(VersionBuilder::new("0.5.1"))`
$DIR/src/tests/routes/crates/read.rs:21:13-21:28: `.keyword("kw1")`
$DIR/src/tests/routes/crates/read.rs:22:13-22:27: `.downloads(20)`
$DIR/src/tests/routes/crates/read.rs:23:13-23:34: `.recent_downloads(10)`
$DIR/src/tests/routes/crates/read.rs:24:13-24:32: `.expect_build(conn)`
$DIR/src/tests/routes/crates/read.rs:29:9-33:23: `update(versions::table)
            .filter(versions::num.eq("1.0.0"))
            .set(versions::published_by.eq(none))
            .execute(conn)
            .unwrap();`
$DIR/src/tests/routes/crates/read.rs:30:13-30:47: `.filter(versions::num.eq("1.0.0"))`
$DIR/src/tests/routes/crates/read.rs:30:34-30:46: `.eq("1.0.0")`
$DIR/src/tests/routes/crates/read.rs:31:13-31:50: `.set(versions::published_by.eq(none))`
$DIR/src/tests/routes/crates/read.rs:31:40-31:49: `.eq(none)`
$DIR/src/tests/routes/crates/read.rs:32:13-32:27: `.execute(conn)`
$DIR/src/tests/routes/crates/read.rs:35:9-35:14: `krate`
$DIR/src/tests/routes/crates/read.rs:38:20-38:43: `.show_crate("foo_show")`
$DIR/src/tests/routes/crates/read.rs:54:5-54:45: `assert_none!(&versions[0].published_by);`
$DIR/src/tests/routes/crates/read.rs:75:44-75:56: `.with_user()`
$DIR/src/tests/routes/crates/read.rs:76:20-76:31: `.as_model()`
$DIR/src/tests/routes/crates/read.rs:78:20-104:7: `.db(|conn| {
        use crates_io::schema::versions;
        use diesel::{update, ExpressionMethods};

        let krate = CrateBuilder::new("foo_show_minimal", user.id)
            .description("description")
            .documentation("https://example.com")
            .homepage("http://example.com")
            .version(VersionBuilder::new("1.0.0"))
            .version(VersionBuilder::new("0.5.0"))
            .version(VersionBuilder::new("0.5.1"))
            .keyword("kw1")
            .downloads(20)
            .recent_downloads(10)
            .expect_build(conn);

        // Make version 1.0.0 mimic a version published before we started recording who published
        // versions
        let none: Option<i32> = None;
        update(versions::table)
            .filter(versions::num.eq("1.0.0"))
            .set(versions::published_by.eq(none))
            .execute(conn)
            .unwrap();

        krate
    })`
$DIR/src/tests/routes/crates/read.rs:83:13-83:40: `.description("description")`
$DIR/src/tests/routes/crates/read.rs:84:13-84:50: `.documentation("https://example.com")`
$DIR/src/tests/routes/crates/read.rs:85:13-85:44: `.homepage("http://example.com")`
$DIR/src/tests/routes/crates/read.rs:86:13-86:51: `.version(VersionBuilder::new("1.0.0"))`
$DIR/src/tests/routes/crates/read.rs:87:13-87:51: `.version(VersionBuilder::new("0.5.0"))`
$DIR/src/tests/routes/crates/read.rs:88:13-88:51: `.version(VersionBuilder::new("0.5.1"))`
$DIR/src/tests/routes/crates/read.rs:89:13-89:28: `.keyword("kw1")`
$DIR/src/tests/routes/crates/read.rs:90:13-90:27: `.downloads(20)`
$DIR/src/tests/routes/crates/read.rs:91:13-91:34: `.recent_downloads(10)`
$DIR/src/tests/routes/crates/read.rs:92:13-92:32: `.expect_build(conn)`
$DIR/src/tests/routes/crates/read.rs:97:9-101:23: `update(versions::table)
            .filter(versions::num.eq("1.0.0"))
            .set(versions::published_by.eq(none))
            .execute(conn)
            .unwrap();`
$DIR/src/tests/routes/crates/read.rs:98:13-98:47: `.filter(versions::num.eq("1.0.0"))`
$DIR/src/tests/routes/crates/read.rs:98:34-98:46: `.eq("1.0.0")`
$DIR/src/tests/routes/crates/read.rs:99:13-99:50: `.set(versions::published_by.eq(none))`
$DIR/src/tests/routes/crates/read.rs:99:40-99:49: `.eq(none)`
$DIR/src/tests/routes/crates/read.rs:100:13-100:27: `.execute(conn)`
$DIR/src/tests/routes/crates/read.rs:103:9-103:14: `krate`
$DIR/src/tests/routes/crates/read.rs:106:20-106:59: `.show_crate_minimal("foo_show_minimal")`
$DIR/src/tests/routes/crates/read.rs:121:39-121:51: `.with_user()`
$DIR/src/tests/routes/crates/read.rs:123:67-123:84: `.version("1.0.0")`
$DIR/src/tests/routes/crates/read.rs:124:5-124:49: `user.publish_crate(crate_to_publish).good();`
$DIR/src/tests/routes/crates/read.rs:124:9-124:41: `.publish_crate(crate_to_publish)`
$DIR/src/tests/routes/crates/read.rs:124:41-124:48: `.good()`
$DIR/src/tests/routes/crates/read.rs:129:9-129:26: `.version("2.0.0")`
$DIR/src/tests/routes/crates/read.rs:130:9-130:23: `.files(&files)`
$DIR/src/tests/routes/crates/read.rs:131:5-131:49: `user.publish_crate(crate_to_publish).good();`
$DIR/src/tests/routes/crates/read.rs:131:9-131:41: `.publish_crate(crate_to_publish)`
$DIR/src/tests/routes/crates/read.rs:131:41-131:48: `.good()`
$DIR/src/tests/routes/crates/read.rs:133:26-133:57: `.show_crate("foo_version_size")`
$DIR/src/tests/routes/crates/read.rs:140:9-140:36: `.find(|v| v.num == "1.0.0")`
$DIR/src/tests/routes/crates/read.rs:149:9-149:36: `.find(|v| v.num == "2.0.0")`
$DIR/src/tests/routes/crates/read.rs:156:44-156:56: `.with_user()`
$DIR/src/tests/routes/crates/read.rs:157:20-157:31: `.as_model()`
$DIR/src/tests/routes/crates/read.rs:159:5-163:8: `app.db(|conn| {
        CrateBuilder::new("foo_bad_doc_url", user.id)
            .documentation("http://rust-ci.org/foo/foo_bad_doc_url/doc/foo_bad_doc_url/")
            .expect_build(conn)
    });`
$DIR/src/tests/routes/crates/read.rs:159:8-163:7: `.db(|conn| {
        CrateBuilder::new("foo_bad_doc_url", user.id)
            .documentation("http://rust-ci.org/foo/foo_bad_doc_url/doc/foo_bad_doc_url/")
            .expect_build(conn)
    })`
$DIR/src/tests/routes/crates/read.rs:160:9-162:32: `CrateBuilder::new("foo_bad_doc_url", user.id)
            .documentation("http://rust-ci.org/foo/foo_bad_doc_url/doc/foo_bad_doc_url/")
            .expect_build(conn)`
$DIR/src/tests/routes/crates/read.rs:161:13-161:90: `.documentation("http://rust-ci.org/foo/foo_bad_doc_url/doc/foo_bad_doc_url/")`
$DIR/src/tests/routes/crates/read.rs:162:13-162:32: `.expect_build(conn)`
$DIR/src/tests/routes/crates/read.rs:165:20-165:50: `.show_crate("foo_bad_doc_url")`
$DIR/src/tests/routes/crates/reverse_dependencies.rs:22:44-22:56: `.with_user()`
$DIR/src/tests/routes/crates/reverse_dependencies.rs:23:20-23:31: `.as_model()`
$DIR/src/tests/routes/crates/reverse_dependencies.rs:25:5-35:8: `app.db(|conn| {
        let c1 = CrateBuilder::new("c1", user.id).expect_build(conn);
        CrateBuilder::new("c2", user.id)
            .version(VersionBuilder::new("1.0.0").dependency(&c1, None))
            .version(
                VersionBuilder::new("1.1.0")
                    .dependency(&c1, None)
                    .dependency(&c1, Some("foo")),
            )
            .expect_build(conn);
    });`
$DIR/src/tests/routes/crates/reverse_dependencies.rs:25:8-35:7: `.db(|conn| {
        let c1 = CrateBuilder::new("c1", user.id).expect_build(conn);
        CrateBuilder::new("c2", user.id)
            .version(VersionBuilder::new("1.0.0").dependency(&c1, None))
            .version(
                VersionBuilder::new("1.1.0")
                    .dependency(&c1, None)
                    .dependency(&c1, Some("foo")),
            )
            .expect_build(conn);
    })`
$DIR/src/tests/routes/crates/reverse_dependencies.rs:26:50-26:69: `.expect_build(conn)`
$DIR/src/tests/routes/crates/reverse_dependencies.rs:27:9-34:33: `CrateBuilder::new("c2", user.id)
            .version(VersionBuilder::new("1.0.0").dependency(&c1, None))
            .version(
                VersionBuilder::new("1.1.0")
                    .dependency(&c1, None)
                    .dependency(&c1, Some("foo")),
            )
            .expect_build(conn);`
$DIR/src/tests/routes/crates/reverse_dependencies.rs:28:13-28:73: `.version(VersionBuilder::new("1.0.0").dependency(&c1, None))`
$DIR/src/tests/routes/crates/reverse_dependencies.rs:28:50-28:72: `.dependency(&c1, None)`
$DIR/src/tests/routes/crates/reverse_dependencies.rs:29:13-33:14: `.version(
                VersionBuilder::new("1.1.0")
                    .dependency(&c1, None)
                    .dependency(&c1, Some("foo")),
            )`
$DIR/src/tests/routes/crates/reverse_dependencies.rs:31:21-31:43: `.dependency(&c1, None)`
$DIR/src/tests/routes/crates/reverse_dependencies.rs:32:21-32:50: `.dependency(&c1, Some("foo"))`
$DIR/src/tests/routes/crates/reverse_dependencies.rs:34:13-34:32: `.expect_build(conn)`
$DIR/src/tests/routes/crates/reverse_dependencies.rs:37:20-37:47: `.reverse_dependencies("c1")`
$DIR/src/tests/routes/crates/reverse_dependencies.rs:46:20-46:47: `.reverse_dependencies("c2")`
$DIR/src/tests/routes/crates/reverse_dependencies.rs:53:44-53:56: `.with_user()`
$DIR/src/tests/routes/crates/reverse_dependencies.rs:54:20-54:31: `.as_model()`
$DIR/src/tests/routes/crates/reverse_dependencies.rs:56:5-64:8: `app.db(|conn| {
        let c1 = CrateBuilder::new("c1", user.id)
            .version("1.1.0")
            .expect_build(conn);
        CrateBuilder::new("c2", user.id)
            .version("1.0.0")
            .version(VersionBuilder::new("2.0.0").dependency(&c1, None))
            .expect_build(conn);
    });`
$DIR/src/tests/routes/crates/reverse_dependencies.rs:56:8-64:7: `.db(|conn| {
        let c1 = CrateBuilder::new("c1", user.id)
            .version("1.1.0")
            .expect_build(conn);
        CrateBuilder::new("c2", user.id)
            .version("1.0.0")
            .version(VersionBuilder::new("2.0.0").dependency(&c1, None))
            .expect_build(conn);
    })`
$DIR/src/tests/routes/crates/reverse_dependencies.rs:58:13-58:30: `.version("1.1.0")`
$DIR/src/tests/routes/crates/reverse_dependencies.rs:59:13-59:32: `.expect_build(conn)`
$DIR/src/tests/routes/crates/reverse_dependencies.rs:60:9-63:33: `CrateBuilder::new("c2", user.id)
            .version("1.0.0")
            .version(VersionBuilder::new("2.0.0").dependency(&c1, None))
            .expect_build(conn);`
$DIR/src/tests/routes/crates/reverse_dependencies.rs:61:13-61:30: `.version("1.0.0")`
$DIR/src/tests/routes/crates/reverse_dependencies.rs:62:13-62:73: `.version(VersionBuilder::new("2.0.0").dependency(&c1, None))`
$DIR/src/tests/routes/crates/reverse_dependencies.rs:62:50-62:72: `.dependency(&c1, None)`
$DIR/src/tests/routes/crates/reverse_dependencies.rs:63:13-63:32: `.expect_build(conn)`
$DIR/src/tests/routes/crates/reverse_dependencies.rs:66:20-66:47: `.reverse_dependencies("c1")`
$DIR/src/tests/routes/crates/reverse_dependencies.rs:74:44-74:56: `.with_user()`
$DIR/src/tests/routes/crates/reverse_dependencies.rs:75:20-75:31: `.as_model()`
$DIR/src/tests/routes/crates/reverse_dependencies.rs:77:5-85:8: `app.db(|conn| {
        let c1 = CrateBuilder::new("c1", user.id)
            .version("1.0.0")
            .expect_build(conn);
        CrateBuilder::new("c2", user.id)
            .version(VersionBuilder::new("1.0.0").dependency(&c1, None))
            .version("2.0.0")
            .expect_build(conn);
    });`
$DIR/src/tests/routes/crates/reverse_dependencies.rs:77:8-85:7: `.db(|conn| {
        let c1 = CrateBuilder::new("c1", user.id)
            .version("1.0.0")
            .expect_build(conn);
        CrateBuilder::new("c2", user.id)
            .version(VersionBuilder::new("1.0.0").dependency(&c1, None))
            .version("2.0.0")
            .expect_build(conn);
    })`
$DIR/src/tests/routes/crates/reverse_dependencies.rs:79:13-79:30: `.version("1.0.0")`
$DIR/src/tests/routes/crates/reverse_dependencies.rs:80:13-80:32: `.expect_build(conn)`
$DIR/src/tests/routes/crates/reverse_dependencies.rs:81:9-84:33: `CrateBuilder::new("c2", user.id)
            .version(VersionBuilder::new("1.0.0").dependency(&c1, None))
            .version("2.0.0")
            .expect_build(conn);`
$DIR/src/tests/routes/crates/reverse_dependencies.rs:82:13-82:73: `.version(VersionBuilder::new("1.0.0").dependency(&c1, None))`
$DIR/src/tests/routes/crates/reverse_dependencies.rs:82:50-82:72: `.dependency(&c1, None)`
$DIR/src/tests/routes/crates/reverse_dependencies.rs:83:13-83:30: `.version("2.0.0")`
$DIR/src/tests/routes/crates/reverse_dependencies.rs:84:13-84:32: `.expect_build(conn)`
$DIR/src/tests/routes/crates/reverse_dependencies.rs:87:20-87:47: `.reverse_dependencies("c1")`
$DIR/src/tests/routes/crates/reverse_dependencies.rs:94:44-94:56: `.with_user()`
$DIR/src/tests/routes/crates/reverse_dependencies.rs:95:20-95:31: `.as_model()`
$DIR/src/tests/routes/crates/reverse_dependencies.rs:97:5-108:8: `app.db(|conn| {
        let c1 = CrateBuilder::new("c1", user.id)
            .version("1.0.0")
            .expect_build(conn);
        CrateBuilder::new("c2", user.id)
            .version("1.1.0-pre")
            .expect_build(conn);
        CrateBuilder::new("c3", user.id)
            .version(VersionBuilder::new("1.0.0").dependency(&c1, None))
            .version("1.1.0-pre")
            .expect_build(conn);
    });`
$DIR/src/tests/routes/crates/reverse_dependencies.rs:97:8-108:7: `.db(|conn| {
        let c1 = CrateBuilder::new("c1", user.id)
            .version("1.0.0")
            .expect_build(conn);
        CrateBuilder::new("c2", user.id)
            .version("1.1.0-pre")
            .expect_build(conn);
        CrateBuilder::new("c3", user.id)
            .version(VersionBuilder::new("1.0.0").dependency(&c1, None))
            .version("1.1.0-pre")
            .expect_build(conn);
    })`
$DIR/src/tests/routes/crates/reverse_dependencies.rs:99:13-99:30: `.version("1.0.0")`
$DIR/src/tests/routes/crates/reverse_dependencies.rs:100:13-100:32: `.expect_build(conn)`
$DIR/src/tests/routes/crates/reverse_dependencies.rs:101:9-103:33: `CrateBuilder::new("c2", user.id)
            .version("1.1.0-pre")
            .expect_build(conn);`
$DIR/src/tests/routes/crates/reverse_dependencies.rs:102:13-102:34: `.version("1.1.0-pre")`
$DIR/src/tests/routes/crates/reverse_dependencies.rs:103:13-103:32: `.expect_build(conn)`
$DIR/src/tests/routes/crates/reverse_dependencies.rs:104:9-107:33: `CrateBuilder::new("c3", user.id)
            .version(VersionBuilder::new("1.0.0").dependency(&c1, None))
            .version("1.1.0-pre")
            .expect_build(conn);`
$DIR/src/tests/routes/crates/reverse_dependencies.rs:105:13-105:73: `.version(VersionBuilder::new("1.0.0").dependency(&c1, None))`
$DIR/src/tests/routes/crates/reverse_dependencies.rs:105:50-105:72: `.dependency(&c1, None)`
$DIR/src/tests/routes/crates/reverse_dependencies.rs:106:13-106:34: `.version("1.1.0-pre")`
$DIR/src/tests/routes/crates/reverse_dependencies.rs:107:13-107:32: `.expect_build(conn)`
$DIR/src/tests/routes/crates/reverse_dependencies.rs:110:20-110:47: `.reverse_dependencies("c1")`
$DIR/src/tests/routes/crates/reverse_dependencies.rs:118:44-118:56: `.with_user()`
$DIR/src/tests/routes/crates/reverse_dependencies.rs:119:20-119:31: `.as_model()`
$DIR/src/tests/routes/crates/reverse_dependencies.rs:121:5-129:8: `app.db(|conn| {
        let c1 = CrateBuilder::new("c1", user.id)
            .version("1.0.0")
            .expect_build(conn);
        CrateBuilder::new("c2", user.id)
            .version("1.0.0")
            .version(VersionBuilder::new("2.0.0").dependency(&c1, None))
            .expect_build(conn);
    });`
$DIR/src/tests/routes/crates/reverse_dependencies.rs:121:8-129:7: `.db(|conn| {
        let c1 = CrateBuilder::new("c1", user.id)
            .version("1.0.0")
            .expect_build(conn);
        CrateBuilder::new("c2", user.id)
            .version("1.0.0")
            .version(VersionBuilder::new("2.0.0").dependency(&c1, None))
            .expect_build(conn);
    })`
$DIR/src/tests/routes/crates/reverse_dependencies.rs:123:13-123:30: `.version("1.0.0")`
$DIR/src/tests/routes/crates/reverse_dependencies.rs:124:13-124:32: `.expect_build(conn)`
$DIR/src/tests/routes/crates/reverse_dependencies.rs:125:9-128:33: `CrateBuilder::new("c2", user.id)
            .version("1.0.0")
            .version(VersionBuilder::new("2.0.0").dependency(&c1, None))
            .expect_build(conn);`
$DIR/src/tests/routes/crates/reverse_dependencies.rs:126:13-126:30: `.version("1.0.0")`
$DIR/src/tests/routes/crates/reverse_dependencies.rs:127:13-127:73: `.version(VersionBuilder::new("2.0.0").dependency(&c1, None))`
$DIR/src/tests/routes/crates/reverse_dependencies.rs:127:50-127:72: `.dependency(&c1, None)`
$DIR/src/tests/routes/crates/reverse_dependencies.rs:128:13-128:32: `.expect_build(conn)`
$DIR/src/tests/routes/crates/reverse_dependencies.rs:131:20-131:47: `.reverse_dependencies("c1")`
$DIR/src/tests/routes/crates/reverse_dependencies.rs:136:5-144:8: `app.db(|conn| {
        use crates_io::schema::versions;
        use diesel::{ExpressionMethods, QueryDsl, RunQueryDsl};

        diesel::update(versions::table.filter(versions::num.eq("2.0.0")))
            .set(versions::yanked.eq(true))
            .execute(conn)
            .unwrap();
    });`
$DIR/src/tests/routes/crates/reverse_dependencies.rs:136:8-144:7: `.db(|conn| {
        use crates_io::schema::versions;
        use diesel::{ExpressionMethods, QueryDsl, RunQueryDsl};

        diesel::update(versions::table.filter(versions::num.eq("2.0.0")))
            .set(versions::yanked.eq(true))
            .execute(conn)
            .unwrap();
    })`
$DIR/src/tests/routes/crates/reverse_dependencies.rs:140:9-143:23: `diesel::update(versions::table.filter(versions::num.eq("2.0.0")))
            .set(versions::yanked.eq(true))
            .execute(conn)
            .unwrap();`
$DIR/src/tests/routes/crates/reverse_dependencies.rs:140:39-140:73: `.filter(versions::num.eq("2.0.0"))`
$DIR/src/tests/routes/crates/reverse_dependencies.rs:140:60-140:72: `.eq("2.0.0")`
$DIR/src/tests/routes/crates/reverse_dependencies.rs:141:13-141:44: `.set(versions::yanked.eq(true))`
$DIR/src/tests/routes/crates/reverse_dependencies.rs:141:34-141:43: `.eq(true)`
$DIR/src/tests/routes/crates/reverse_dependencies.rs:142:13-142:27: `.execute(conn)`
$DIR/src/tests/routes/crates/reverse_dependencies.rs:146:20-146:47: `.reverse_dependencies("c1")`
$DIR/src/tests/routes/crates/reverse_dependencies.rs:153:44-153:56: `.with_user()`
$DIR/src/tests/routes/crates/reverse_dependencies.rs:154:20-154:31: `.as_model()`
$DIR/src/tests/routes/crates/reverse_dependencies.rs:156:5-179:8: `app.db(|conn| {
        use crates_io::schema::versions;
        use diesel::{update, ExpressionMethods, RunQueryDsl};

        let c1 = CrateBuilder::new("c1", user.id)
            .version("1.0.0")
            .expect_build(conn);
        CrateBuilder::new("c2", user.id)
            .version(VersionBuilder::new("2.0.0").dependency(&c1, None))
            .expect_build(conn);

        // Make c2's version (and,incidentally, c1's, but that doesn't matter) mimic a version
        // published before we started recording who published versions
        let none: Option<i32> = None;
        update(versions::table)
            .set(versions::published_by.eq(none))
            .execute(conn)
            .unwrap();

        // c3's version will have the published by info recorded
        CrateBuilder::new("c3", user.id)
            .version(VersionBuilder::new("3.0.0").dependency(&c1, None))
            .expect_build(conn);
    });`
$DIR/src/tests/routes/crates/reverse_dependencies.rs:156:8-179:7: `.db(|conn| {
        use crates_io::schema::versions;
        use diesel::{update, ExpressionMethods, RunQueryDsl};

        let c1 = CrateBuilder::new("c1", user.id)
            .version("1.0.0")
            .expect_build(conn);
        CrateBuilder::new("c2", user.id)
            .version(VersionBuilder::new("2.0.0").dependency(&c1, None))
            .expect_build(conn);

        // Make c2's version (and,incidentally, c1's, but that doesn't matter) mimic a version
        // published before we started recording who published versions
        let none: Option<i32> = None;
        update(versions::table)
            .set(versions::published_by.eq(none))
            .execute(conn)
            .unwrap();

        // c3's version will have the published by info recorded
        CrateBuilder::new("c3", user.id)
            .version(VersionBuilder::new("3.0.0").dependency(&c1, None))
            .expect_build(conn);
    })`
$DIR/src/tests/routes/crates/reverse_dependencies.rs:161:13-161:30: `.version("1.0.0")`
$DIR/src/tests/routes/crates/reverse_dependencies.rs:162:13-162:32: `.expect_build(conn)`
$DIR/src/tests/routes/crates/reverse_dependencies.rs:163:9-165:33: `CrateBuilder::new("c2", user.id)
            .version(VersionBuilder::new("2.0.0").dependency(&c1, None))
            .expect_build(conn);`
$DIR/src/tests/routes/crates/reverse_dependencies.rs:164:13-164:73: `.version(VersionBuilder::new("2.0.0").dependency(&c1, None))`
$DIR/src/tests/routes/crates/reverse_dependencies.rs:164:50-164:72: `.dependency(&c1, None)`
$DIR/src/tests/routes/crates/reverse_dependencies.rs:165:13-165:32: `.expect_build(conn)`
$DIR/src/tests/routes/crates/reverse_dependencies.rs:170:9-173:23: `update(versions::table)
            .set(versions::published_by.eq(none))
            .execute(conn)
            .unwrap();`
$DIR/src/tests/routes/crates/reverse_dependencies.rs:171:13-171:50: `.set(versions::published_by.eq(none))`
$DIR/src/tests/routes/crates/reverse_dependencies.rs:171:40-171:49: `.eq(none)`
$DIR/src/tests/routes/crates/reverse_dependencies.rs:172:13-172:27: `.execute(conn)`
$DIR/src/tests/routes/crates/reverse_dependencies.rs:176:9-178:33: `CrateBuilder::new("c3", user.id)
            .version(VersionBuilder::new("3.0.0").dependency(&c1, None))
            .expect_build(conn);`
$DIR/src/tests/routes/crates/reverse_dependencies.rs:177:13-177:73: `.version(VersionBuilder::new("3.0.0").dependency(&c1, None))`
$DIR/src/tests/routes/crates/reverse_dependencies.rs:177:50-177:72: `.dependency(&c1, None)`
$DIR/src/tests/routes/crates/reverse_dependencies.rs:178:13-178:32: `.expect_build(conn)`
$DIR/src/tests/routes/crates/reverse_dependencies.rs:181:20-181:47: `.reverse_dependencies("c1")`
$DIR/src/tests/routes/crates/reverse_dependencies.rs:184:42-184:68: `.find(|v| v.krate == "c2")`
$DIR/src/tests/routes/crates/reverse_dependencies.rs:185:5-185:44: `assert_none!(&c2_version.published_by);`
$DIR/src/tests/routes/crates/reverse_dependencies.rs:187:42-187:68: `.find(|v| v.krate == "c3")`
$DIR/src/tests/routes/crates/reverse_dependencies.rs:196:44-196:56: `.with_user()`
$DIR/src/tests/routes/crates/reverse_dependencies.rs:197:20-197:31: `.as_model()`
$DIR/src/tests/routes/crates/reverse_dependencies.rs:201:5-208:8: `app.db(|conn| {
        let c1 = CrateBuilder::new("c1", user.id).expect_build(conn);
        // The crate that depends on c1...
        CrateBuilder::new("c2", user.id)
            // ...has a patch version at the limits of what the semver crate supports
            .version(VersionBuilder::new(&large_but_valid_version_number).dependency(&c1, None))
            .expect_build(conn);
    });`
$DIR/src/tests/routes/crates/reverse_dependencies.rs:201:8-208:7: `.db(|conn| {
        let c1 = CrateBuilder::new("c1", user.id).expect_build(conn);
        // The crate that depends on c1...
        CrateBuilder::new("c2", user.id)
            // ...has a patch version at the limits of what the semver crate supports
            .version(VersionBuilder::new(&large_but_valid_version_number).dependency(&c1, None))
            .expect_build(conn);
    })`
$DIR/src/tests/routes/crates/reverse_dependencies.rs:202:50-202:69: `.expect_build(conn)`
$DIR/src/tests/routes/crates/reverse_dependencies.rs:204:9-207:33: `CrateBuilder::new("c2", user.id)
            // ...has a patch version at the limits of what the semver crate supports
            .version(VersionBuilder::new(&large_but_valid_version_number).dependency(&c1, None))
            .expect_build(conn);`
$DIR/src/tests/routes/crates/reverse_dependencies.rs:205:13-206:97: `// ...has a patch version at the limits of what the semver crate supports
            .version(VersionBuilder::new(&large_but_valid_version_number).dependency(&c1, None))`
$DIR/src/tests/routes/crates/reverse_dependencies.rs:206:74-206:96: `.dependency(&c1, None)`
$DIR/src/tests/routes/crates/reverse_dependencies.rs:207:13-207:32: `.expect_build(conn)`
$DIR/src/tests/routes/crates/reverse_dependencies.rs:210:20-210:47: `.reverse_dependencies("c1")`
$DIR/src/tests/routes/crates/versions/authors.rs:8:44-8:56: `.with_user()`
$DIR/src/tests/routes/crates/versions/authors.rs:9:20-9:31: `.as_model()`
$DIR/src/tests/routes/crates/versions/authors.rs:11:5-15:8: `app.db(|conn| {
        CrateBuilder::new("foo_authors", user.id)
            .version("1.0.0")
            .expect_build(conn);
    });`
$DIR/src/tests/routes/crates/versions/authors.rs:11:8-15:7: `.db(|conn| {
        CrateBuilder::new("foo_authors", user.id)
            .version("1.0.0")
            .expect_build(conn);
    })`
$DIR/src/tests/routes/crates/versions/authors.rs:12:9-14:33: `CrateBuilder::new("foo_authors", user.id)
            .version("1.0.0")
            .expect_build(conn);`
$DIR/src/tests/routes/crates/versions/authors.rs:13:13-13:30: `.version("1.0.0")`
$DIR/src/tests/routes/crates/versions/authors.rs:14:13-14:32: `.expect_build(conn)`
$DIR/src/tests/routes/crates/versions/authors.rs:17:27-17:75: `.get("/api/v1/crates/foo_authors/1.0.0/authors")`
$DIR/src/tests/routes/crates/versions/authors.rs:17:75-17:82: `.good()`
$DIR/src/tests/routes/crates/versions/authors.rs:18:20-18:32: `.as_object()`
$DIR/src/tests/routes/crates/versions/dependencies.rs:13:44-13:56: `.with_user()`
$DIR/src/tests/routes/crates/versions/dependencies.rs:14:20-14:31: `.as_model()`
$DIR/src/tests/routes/crates/versions/dependencies.rs:16:5-22:8: `app.db(|conn| {
        let c1 = CrateBuilder::new("foo_deps", user.id).expect_build(conn);
        let c2 = CrateBuilder::new("bar_deps", user.id).expect_build(conn);
        VersionBuilder::new("1.0.0")
            .dependency(&c2, None)
            .expect_build(c1.id, user.id, conn);
    });`
$DIR/src/tests/routes/crates/versions/dependencies.rs:16:8-22:7: `.db(|conn| {
        let c1 = CrateBuilder::new("foo_deps", user.id).expect_build(conn);
        let c2 = CrateBuilder::new("bar_deps", user.id).expect_build(conn);
        VersionBuilder::new("1.0.0")
            .dependency(&c2, None)
            .expect_build(c1.id, user.id, conn);
    })`
$DIR/src/tests/routes/crates/versions/dependencies.rs:17:56-17:75: `.expect_build(conn)`
$DIR/src/tests/routes/crates/versions/dependencies.rs:18:56-18:75: `.expect_build(conn)`
$DIR/src/tests/routes/crates/versions/dependencies.rs:19:9-21:49: `VersionBuilder::new("1.0.0")
            .dependency(&c2, None)
            .expect_build(c1.id, user.id, conn);`
$DIR/src/tests/routes/crates/versions/dependencies.rs:20:13-20:35: `.dependency(&c2, None)`
$DIR/src/tests/routes/crates/versions/dependencies.rs:21:13-21:48: `.expect_build(c1.id, user.id, conn)`
$DIR/src/tests/routes/crates/versions/dependencies.rs:25:9-25:59: `.get("/api/v1/crates/foo_deps/1.0.0/dependencies")`
$DIR/src/tests/routes/crates/versions/dependencies.rs:26:9-26:16: `.good()`
$DIR/src/tests/routes/crates/versions/dependencies.rs:29:24-29:80: `.get::<()>("/api/v1/crates/foo_deps/1.0.2/dependencies")`
$DIR/src/tests/routes/crates/versions/download.rs:6:44-6:56: `.with_user()`
$DIR/src/tests/routes/crates/versions/download.rs:7:20-7:31: `.as_model()`
$DIR/src/tests/routes/crates/versions/download.rs:9:5-11:8: `app.db(|conn| {
        CrateBuilder::new("foo_bad", user.id).expect_build(conn);
    });`
$DIR/src/tests/routes/crates/versions/download.rs:9:8-11:7: `.db(|conn| {
        CrateBuilder::new("foo_bad", user.id).expect_build(conn);
    })`
$DIR/src/tests/routes/crates/versions/download.rs:10:9-10:66: `CrateBuilder::new("foo_bad", user.id).expect_build(conn);`
$DIR/src/tests/routes/crates/versions/download.rs:10:46-10:65: `.expect_build(conn)`
$DIR/src/tests/routes/crates/versions/download.rs:13:9-13:54: `.get("/api/v1/crates/foo_bad/0.1.0/download")`
$DIR/src/tests/routes/crates/versions/download.rs:19:44-19:56: `.with_user()`
$DIR/src/tests/routes/crates/versions/download.rs:20:20-20:31: `.as_model()`
$DIR/src/tests/routes/crates/versions/download.rs:22:5-26:8: `app.db(|conn| {
        CrateBuilder::new("foo_download", user.id)
            .version(VersionBuilder::new("1.0.0"))
            .expect_build(conn);
    });`
$DIR/src/tests/routes/crates/versions/download.rs:22:8-26:7: `.db(|conn| {
        CrateBuilder::new("foo_download", user.id)
            .version(VersionBuilder::new("1.0.0"))
            .expect_build(conn);
    })`
$DIR/src/tests/routes/crates/versions/download.rs:23:9-25:33: `CrateBuilder::new("foo_download", user.id)
            .version(VersionBuilder::new("1.0.0"))
            .expect_build(conn);`
$DIR/src/tests/routes/crates/versions/download.rs:24:13-24:51: `.version(VersionBuilder::new("1.0.0"))`
$DIR/src/tests/routes/crates/versions/download.rs:25:13-25:32: `.expect_build(conn)`
$DIR/src/tests/routes/crates/versions/download.rs:30:9-30:65: `.get::<()>("/api/v1/crates/foo-download/1.0.0/download")`
$DIR/src/tests/routes/crates/versions/download.rs:37:9-39:11: `.with_config(|config| {
            config.force_unconditional_redirects = true;
        })`
$DIR/src/tests/routes/crates/versions/download.rs:38:13-38:57: `config.force_unconditional_redirects = true;`
$DIR/src/tests/routes/crates/versions/download.rs:40:9-40:21: `.with_user()`
$DIR/src/tests/routes/crates/versions/download.rs:42:5-46:8: `app.db(|conn| {
        CrateBuilder::new("foo-download", user.as_model().id)
            .version(VersionBuilder::new("1.0.0"))
            .expect_build(conn);
    });`
$DIR/src/tests/routes/crates/versions/download.rs:42:8-46:7: `.db(|conn| {
        CrateBuilder::new("foo-download", user.as_model().id)
            .version(VersionBuilder::new("1.0.0"))
            .expect_build(conn);
    })`
$DIR/src/tests/routes/crates/versions/download.rs:43:9-45:33: `CrateBuilder::new("foo-download", user.as_model().id)
            .version(VersionBuilder::new("1.0.0"))
            .expect_build(conn);`
$DIR/src/tests/routes/crates/versions/download.rs:43:47-43:58: `.as_model()`
$DIR/src/tests/routes/crates/versions/download.rs:44:13-44:51: `.version(VersionBuilder::new("1.0.0"))`
$DIR/src/tests/routes/crates/versions/download.rs:45:13-45:32: `.expect_build(conn)`
$DIR/src/tests/routes/crates/versions/download.rs:49:5-50:85: `anon.get::<()>("/api/v1/crates/foo-download/1.0.0/download")
        .assert_redirect_ends_with("/crates/foo-download/foo-download-1.0.0.crate");`
$DIR/src/tests/routes/crates/versions/download.rs:49:9-49:65: `.get::<()>("/api/v1/crates/foo-download/1.0.0/download")`
$DIR/src/tests/routes/crates/versions/download.rs:50:9-50:84: `.assert_redirect_ends_with("/crates/foo-download/foo-download-1.0.0.crate")`
$DIR/src/tests/routes/crates/versions/download.rs:53:5-54:85: `anon.get::<()>("/api/v1/crates/Foo_downloaD/1.0.0/download")
        .assert_redirect_ends_with("/crates/Foo_downloaD/Foo_downloaD-1.0.0.crate");`
$DIR/src/tests/routes/crates/versions/download.rs:53:9-53:65: `.get::<()>("/api/v1/crates/Foo_downloaD/1.0.0/download")`
$DIR/src/tests/routes/crates/versions/download.rs:54:9-54:84: `.assert_redirect_ends_with("/crates/Foo_downloaD/Foo_downloaD-1.0.0.crate")`
$DIR/src/tests/routes/crates/versions/download.rs:57:5-58:85: `anon.get::<()>("/api/v1/crates/foo-download/2.0.0/download")
        .assert_redirect_ends_with("/crates/foo-download/foo-download-2.0.0.crate");`
$DIR/src/tests/routes/crates/versions/download.rs:57:9-57:65: `.get::<()>("/api/v1/crates/foo-download/2.0.0/download")`
$DIR/src/tests/routes/crates/versions/download.rs:58:9-58:84: `.assert_redirect_ends_with("/crates/foo-download/foo-download-2.0.0.crate")`
$DIR/src/tests/routes/crates/versions/download.rs:61:9-61:65: `.get::<()>("/api/v1/crates/bar-download/1.0.0/download")`
$DIR/src/tests/routes/crates/versions/download.rs:71:44-71:56: `.with_user()`
$DIR/src/tests/routes/crates/versions/download.rs:72:20-72:31: `.as_model()`
$DIR/src/tests/routes/crates/versions/download.rs:74:5-78:8: `app.db(|conn| {
        CrateBuilder::new("foo_download", user.id)
            .version(VersionBuilder::new("1.0.0"))
            .expect_build(conn);
    });`
$DIR/src/tests/routes/crates/versions/download.rs:74:8-78:7: `.db(|conn| {
        CrateBuilder::new("foo_download", user.id)
            .version(VersionBuilder::new("1.0.0"))
            .expect_build(conn);
    })`
$DIR/src/tests/routes/crates/versions/download.rs:75:9-77:33: `CrateBuilder::new("foo_download", user.id)
            .version(VersionBuilder::new("1.0.0"))
            .expect_build(conn);`
$DIR/src/tests/routes/crates/versions/download.rs:76:13-76:51: `.version(VersionBuilder::new("1.0.0"))`
$DIR/src/tests/routes/crates/versions/download.rs:77:13-77:32: `.expect_build(conn)`
$DIR/src/tests/routes/crates/versions/download.rs:80:5-81:85: `anon.get::<()>("/api/v1/crates/foo_download/1.0.0/download")
        .assert_redirect_ends_with("/crates/foo_download/foo_download-1.0.0.crate");`
$DIR/src/tests/routes/crates/versions/download.rs:80:9-80:65: `.get::<()>("/api/v1/crates/foo_download/1.0.0/download")`
$DIR/src/tests/routes/crates/versions/download.rs:81:9-81:84: `.assert_redirect_ends_with("/crates/foo_download/foo_download-1.0.0.crate")`
$DIR/src/tests/routes/crates/versions/download.rs:84:5-89:8: `app.db(|conn| {
        diesel::update(crates.filter(name.eq("foo_download")))
            .set(name.eq("other"))
            .execute(conn)
            .unwrap();
    });`
$DIR/src/tests/routes/crates/versions/download.rs:84:8-89:7: `.db(|conn| {
        diesel::update(crates.filter(name.eq("foo_download")))
            .set(name.eq("other"))
            .execute(conn)
            .unwrap();
    })`
$DIR/src/tests/routes/crates/versions/download.rs:85:9-88:23: `diesel::update(crates.filter(name.eq("foo_download")))
            .set(name.eq("other"))
            .execute(conn)
            .unwrap();`
$DIR/src/tests/routes/crates/versions/download.rs:85:30-85:62: `.filter(name.eq("foo_download"))`
$DIR/src/tests/routes/crates/versions/download.rs:85:42-85:61: `.eq("foo_download")`
$DIR/src/tests/routes/crates/versions/download.rs:86:13-86:35: `.set(name.eq("other"))`
$DIR/src/tests/routes/crates/versions/download.rs:86:22-86:34: `.eq("other")`
$DIR/src/tests/routes/crates/versions/download.rs:87:13-87:27: `.execute(conn)`
$DIR/src/tests/routes/crates/versions/download.rs:92:5-93:85: `anon.get::<()>("/api/v1/crates/foo_download/1.0.0/download")
        .assert_redirect_ends_with("/crates/foo_download/foo_download-1.0.0.crate");`
$DIR/src/tests/routes/crates/versions/download.rs:92:9-92:65: `.get::<()>("/api/v1/crates/foo_download/1.0.0/download")`
$DIR/src/tests/routes/crates/versions/download.rs:93:9-93:84: `.assert_redirect_ends_with("/crates/foo_download/foo_download-1.0.0.crate")`
$DIR/src/tests/routes/crates/versions/download.rs:96:5-96:46: `downloads::persist_downloads_count(&app);`
$DIR/src/tests/routes/crates/versions/download.rs:103:44-103:56: `.with_user()`
$DIR/src/tests/routes/crates/versions/download.rs:104:20-104:31: `.as_model()`
$DIR/src/tests/routes/crates/versions/download.rs:106:5-110:8: `app.db(|conn| {
        CrateBuilder::new("foo", user.id)
            .version(VersionBuilder::new("1.0.0+bar"))
            .expect_build(conn);
    });`
$DIR/src/tests/routes/crates/versions/download.rs:106:8-110:7: `.db(|conn| {
        CrateBuilder::new("foo", user.id)
            .version(VersionBuilder::new("1.0.0+bar"))
            .expect_build(conn);
    })`
$DIR/src/tests/routes/crates/versions/download.rs:107:9-109:33: `CrateBuilder::new("foo", user.id)
            .version(VersionBuilder::new("1.0.0+bar"))
            .expect_build(conn);`
$DIR/src/tests/routes/crates/versions/download.rs:108:13-108:55: `.version(VersionBuilder::new("1.0.0+bar"))`
$DIR/src/tests/routes/crates/versions/download.rs:109:13-109:32: `.expect_build(conn)`
$DIR/src/tests/routes/crates/versions/download.rs:112:5-113:73: `anon.get::<()>("/api/v1/crates/foo/1.0.0+bar/download")
        .assert_redirect_ends_with("/crates/foo/foo-1.0.0%2Bbar.crate");`
$DIR/src/tests/routes/crates/versions/download.rs:112:9-112:60: `.get::<()>("/api/v1/crates/foo/1.0.0+bar/download")`
$DIR/src/tests/routes/crates/versions/download.rs:113:9-113:72: `.assert_redirect_ends_with("/crates/foo/foo-1.0.0%2Bbar.crate")`
$DIR/src/tests/routes/crates/versions/download.rs:115:9-115:58: `.get::<()>("/api/v1/crates/foo/1.0.0+bar/readme")`
$DIR/src/tests/routes/crates/versions/read.rs:9:44-9:56: `.with_user()`
$DIR/src/tests/routes/crates/versions/read.rs:10:20-10:31: `.as_model()`
$DIR/src/tests/routes/crates/versions/read.rs:12:16-19:7: `.db(|conn| {
        let krate = CrateBuilder::new("foo_vers_show", user.id).expect_build(conn);
        VersionBuilder::new("2.0.0")
            .size(1234)
            .checksum("c241cd77c3723ccf1aa453f169ee60c0a888344da504bee0142adb859092acb4")
            .rust_version("1.64")
            .expect_build(krate.id, user.id, conn)
    })`
$DIR/src/tests/routes/crates/versions/read.rs:13:64-13:83: `.expect_build(conn)`
$DIR/src/tests/routes/crates/versions/read.rs:14:9-18:51: `VersionBuilder::new("2.0.0")
            .size(1234)
            .checksum("c241cd77c3723ccf1aa453f169ee60c0a888344da504bee0142adb859092acb4")
            .rust_version("1.64")
            .expect_build(krate.id, user.id, conn)`
$DIR/src/tests/routes/crates/versions/read.rs:15:13-15:24: `.size(1234)`
$DIR/src/tests/routes/crates/versions/read.rs:16:13-16:90: `.checksum("c241cd77c3723ccf1aa453f169ee60c0a888344da504bee0142adb859092acb4")`
$DIR/src/tests/routes/crates/versions/read.rs:17:13-17:34: `.rust_version("1.64")`
$DIR/src/tests/routes/crates/versions/read.rs:18:13-18:51: `.expect_build(krate.id, user.id, conn)`
$DIR/src/tests/routes/crates/versions/read.rs:22:27-22:36: `.get(url)`
$DIR/src/tests/routes/crates/versions/read.rs:22:36-22:43: `.good()`
$DIR/src/tests/routes/crates/versions/read.rs:36:44-36:56: `.with_user()`
$DIR/src/tests/routes/crates/versions/read.rs:37:20-37:31: `.as_model()`
$DIR/src/tests/routes/crates/versions/read.rs:39:16-51:7: `.db(|conn| {
        let krate = CrateBuilder::new("foo_vers_show_no_pb", user.id).expect_build(conn);
        let version = VersionBuilder::new("1.0.0").expect_build(krate.id, user.id, conn);

        // Mimic a version published before we started recording who published versions
        let none: Option<i32> = None;
        update(versions::table)
            .set(versions::published_by.eq(none))
            .execute(conn)
            .unwrap();

        version
    })`
$DIR/src/tests/routes/crates/versions/read.rs:40:70-40:89: `.expect_build(conn)`
$DIR/src/tests/routes/crates/versions/read.rs:41:51-41:89: `.expect_build(krate.id, user.id, conn)`
$DIR/src/tests/routes/crates/versions/read.rs:45:9-48:23: `update(versions::table)
            .set(versions::published_by.eq(none))
            .execute(conn)
            .unwrap();`
$DIR/src/tests/routes/crates/versions/read.rs:46:13-46:50: `.set(versions::published_by.eq(none))`
$DIR/src/tests/routes/crates/versions/read.rs:46:40-46:49: `.eq(none)`
$DIR/src/tests/routes/crates/versions/read.rs:47:13-47:27: `.execute(conn)`
$DIR/src/tests/routes/crates/versions/read.rs:50:9-50:16: `version`
$DIR/src/tests/routes/crates/versions/read.rs:54:27-54:36: `.get(url)`
$DIR/src/tests/routes/crates/versions/read.rs:54:36-54:43: `.good()`
$DIR/src/tests/routes/crates/versions/yank_unyank.rs:32:45-32:58: `.with_token()`
$DIR/src/tests/routes/crates/versions/yank_unyank.rs:34:27-34:46: `.db_new_user("bar")`
$DIR/src/tests/routes/crates/versions/yank_unyank.rs:35:36-35:47: `.as_model()`
$DIR/src/tests/routes/crates/versions/yank_unyank.rs:36:5-40:8: `app.db(|conn| {
        CrateBuilder::new("foo_not", another_user.id)
            .version("1.0.0")
            .expect_build(conn);
    });`
$DIR/src/tests/routes/crates/versions/yank_unyank.rs:36:8-40:7: `.db(|conn| {
        CrateBuilder::new("foo_not", another_user.id)
            .version("1.0.0")
            .expect_build(conn);
    })`
$DIR/src/tests/routes/crates/versions/yank_unyank.rs:37:9-39:33: `CrateBuilder::new("foo_not", another_user.id)
            .version("1.0.0")
            .expect_build(conn);`
$DIR/src/tests/routes/crates/versions/yank_unyank.rs:38:13-38:30: `.version("1.0.0")`
$DIR/src/tests/routes/crates/versions/yank_unyank.rs:39:13-39:32: `.expect_build(conn)`
$DIR/src/tests/routes/crates/versions/yank_unyank.rs:42:25-42:50: `.yank("foo_not", "1.0.0")`
$DIR/src/tests/routes/crates/versions/yank_unyank.rs:52:46-52:59: `.with_token()`
$DIR/src/tests/routes/crates/versions/yank_unyank.rs:56:5-56:50: `token.publish_crate(crate_to_publish).good();`
$DIR/src/tests/routes/crates/versions/yank_unyank.rs:56:10-56:42: `.publish_crate(crate_to_publish)`
$DIR/src/tests/routes/crates/versions/yank_unyank.rs:56:42-56:49: `.good()`
$DIR/src/tests/routes/crates/versions/yank_unyank.rs:59:5-59:39: `token.yank("fyk", "1.0.0").good();`
$DIR/src/tests/routes/crates/versions/yank_unyank.rs:59:10-59:31: `.yank("fyk", "1.0.0")`
$DIR/src/tests/routes/crates/versions/yank_unyank.rs:59:31-59:38: `.good()`
$DIR/src/tests/routes/crates/versions/yank_unyank.rs:62:20-62:49: `.show_version("fyk", "1.0.0")`
$DIR/src/tests/routes/crates/versions/yank_unyank.rs:73:46-73:59: `.with_token()`
$DIR/src/tests/routes/crates/versions/yank_unyank.rs:77:5-77:50: `token.publish_crate(crate_to_publish).good();`
$DIR/src/tests/routes/crates/versions/yank_unyank.rs:77:10-77:42: `.publish_crate(crate_to_publish)`
$DIR/src/tests/routes/crates/versions/yank_unyank.rs:77:42-77:49: `.good()`
$DIR/src/tests/routes/crates/versions/yank_unyank.rs:80:5-80:39: `token.yank("fyk", "1.0.0").good();`
$DIR/src/tests/routes/crates/versions/yank_unyank.rs:80:10-80:31: `.yank("fyk", "1.0.0")`
$DIR/src/tests/routes/crates/versions/yank_unyank.rs:80:31-80:38: `.good()`
$DIR/src/tests/routes/crates/versions/yank_unyank.rs:83:5-83:41: `token.unyank("fyk", "1.0.0").good();`
$DIR/src/tests/routes/crates/versions/yank_unyank.rs:83:10-83:33: `.unyank("fyk", "1.0.0")`
$DIR/src/tests/routes/crates/versions/yank_unyank.rs:83:33-83:40: `.good()`
$DIR/src/tests/routes/crates/versions/yank_unyank.rs:86:20-86:49: `.show_version("fyk", "1.0.0")`
$DIR/src/tests/routes/crates/versions/yank_unyank.rs:117:30-117:62: `.yank(CRATE_NAME, CRATE_VERSION)`
$DIR/src/tests/routes/crates/versions/yank_unyank.rs:124:30-124:64: `.unyank(CRATE_NAME, CRATE_VERSION)`
$DIR/src/tests/routes/crates/versions/yank_unyank.rs:136:30-136:62: `.yank(CRATE_NAME, CRATE_VERSION)`
$DIR/src/tests/routes/crates/versions/yank_unyank.rs:140:30-140:64: `.unyank(CRATE_NAME, CRATE_VERSION)`
$DIR/src/tests/routes/crates/versions/yank_unyank.rs:148:28-148:55: `.db_new_token("test-token")`
$DIR/src/tests/routes/crates/versions/yank_unyank.rs:150:30-150:62: `.yank(CRATE_NAME, CRATE_VERSION)`
$DIR/src/tests/routes/crates/versions/yank_unyank.rs:154:30-154:64: `.unyank(CRATE_NAME, CRATE_VERSION)`
$DIR/src/tests/routes/crates/versions/yank_unyank.rs:165:19-165:95: `.db_new_scoped_token("test-token", None, None, Some(expired_at.naive_utc()))`
$DIR/src/tests/routes/crates/versions/yank_unyank.rs:165:81-165:93: `.naive_utc()`
$DIR/src/tests/routes/crates/versions/yank_unyank.rs:167:30-167:62: `.yank(CRATE_NAME, CRATE_VERSION)`
$DIR/src/tests/routes/crates/versions/yank_unyank.rs:171:30-171:64: `.unyank(CRATE_NAME, CRATE_VERSION)`
$DIR/src/tests/routes/crates/versions/yank_unyank.rs:182:19-182:95: `.db_new_scoped_token("test-token", None, None, Some(expired_at.naive_utc()))`
$DIR/src/tests/routes/crates/versions/yank_unyank.rs:182:81-182:93: `.naive_utc()`
$DIR/src/tests/routes/crates/versions/yank_unyank.rs:184:30-184:62: `.yank(CRATE_NAME, CRATE_VERSION)`
$DIR/src/tests/routes/crates/versions/yank_unyank.rs:191:30-191:64: `.unyank(CRATE_NAME, CRATE_VERSION)`
$DIR/src/tests/routes/crates/versions/yank_unyank.rs:203:19-203:98: `.db_new_scoped_token("test-token", None, Some(vec![EndpointScope::Yank]), None)`
$DIR/src/tests/routes/crates/versions/yank_unyank.rs:205:30-205:62: `.yank(CRATE_NAME, CRATE_VERSION)`
$DIR/src/tests/routes/crates/versions/yank_unyank.rs:209:30-209:64: `.unyank(CRATE_NAME, CRATE_VERSION)`
$DIR/src/tests/routes/crates/versions/yank_unyank.rs:217:28-222:10: `.db_new_scoped_token(
            "test-token",
            None,
            Some(vec![EndpointScope::PublishUpdate]),
            None,
        )`
$DIR/src/tests/routes/crates/versions/yank_unyank.rs:224:30-224:62: `.yank(CRATE_NAME, CRATE_VERSION)`
$DIR/src/tests/routes/crates/versions/yank_unyank.rs:231:30-231:64: `.unyank(CRATE_NAME, CRATE_VERSION)`
$DIR/src/tests/routes/crates/versions/yank_unyank.rs:242:28-247:10: `.db_new_scoped_token(
            "test-token",
            Some(vec![CrateScope::try_from(CRATE_NAME).unwrap()]),
            None,
            None,
        )`
$DIR/src/tests/routes/crates/versions/yank_unyank.rs:249:30-249:62: `.yank(CRATE_NAME, CRATE_VERSION)`
$DIR/src/tests/routes/crates/versions/yank_unyank.rs:253:30-253:64: `.unyank(CRATE_NAME, CRATE_VERSION)`
$DIR/src/tests/routes/crates/versions/yank_unyank.rs:262:28-267:10: `.db_new_scoped_token(
            "test-token",
            Some(vec![CrateScope::try_from(wildcard).unwrap()]),
            None,
            None,
        )`
$DIR/src/tests/routes/crates/versions/yank_unyank.rs:269:30-269:62: `.yank(CRATE_NAME, CRATE_VERSION)`
$DIR/src/tests/routes/crates/versions/yank_unyank.rs:273:30-273:64: `.unyank(CRATE_NAME, CRATE_VERSION)`
$DIR/src/tests/routes/crates/versions/yank_unyank.rs:281:28-286:10: `.db_new_scoped_token(
            "test-token",
            Some(vec![CrateScope::try_from("foo").unwrap()]),
            None,
            None,
        )`
$DIR/src/tests/routes/crates/versions/yank_unyank.rs:288:30-288:62: `.yank(CRATE_NAME, CRATE_VERSION)`
$DIR/src/tests/routes/crates/versions/yank_unyank.rs:295:30-295:64: `.unyank(CRATE_NAME, CRATE_VERSION)`
$DIR/src/tests/routes/crates/versions/yank_unyank.rs:306:28-311:10: `.db_new_scoped_token(
            "test-token",
            Some(vec![CrateScope::try_from("foo*").unwrap()]),
            None,
            None,
        )`
$DIR/src/tests/routes/crates/versions/yank_unyank.rs:313:30-313:62: `.yank(CRATE_NAME, CRATE_VERSION)`
$DIR/src/tests/routes/crates/versions/yank_unyank.rs:320:30-320:64: `.unyank(CRATE_NAME, CRATE_VERSION)`
$DIR/src/tests/routes/keywords/list.rs:19:38-19:46: `.empty()`
$DIR/src/tests/routes/keywords/list.rs:20:33-20:42: `.get(url)`
$DIR/src/tests/routes/keywords/list.rs:20:42-20:49: `.good()`
$DIR/src/tests/routes/keywords/list.rs:24:5-26:8: `app.db(|conn| {
        Keyword::find_or_create_all(conn, &["foo"]).unwrap();
    });`
$DIR/src/tests/routes/keywords/list.rs:24:8-26:7: `.db(|conn| {
        Keyword::find_or_create_all(conn, &["foo"]).unwrap();
    })`
$DIR/src/tests/routes/keywords/list.rs:25:9-25:62: `Keyword::find_or_create_all(conn, &["foo"]).unwrap();`
$DIR/src/tests/routes/keywords/list.rs:28:33-28:42: `.get(url)`
$DIR/src/tests/routes/keywords/list.rs:28:42-28:49: `.good()`
$DIR/src/tests/routes/keywords/read.rs:14:38-14:46: `.empty()`
$DIR/src/tests/routes/keywords/read.rs:15:5-15:38: `anon.get(url).assert_not_found();`
$DIR/src/tests/routes/keywords/read.rs:15:9-15:18: `.get(url)`
$DIR/src/tests/routes/keywords/read.rs:15:18-15:37: `.assert_not_found()`
$DIR/src/tests/routes/keywords/read.rs:17:5-19:8: `app.db(|conn| {
        Keyword::find_or_create_all(conn, &["foo"]).unwrap();
    });`
$DIR/src/tests/routes/keywords/read.rs:17:8-19:7: `.db(|conn| {
        Keyword::find_or_create_all(conn, &["foo"]).unwrap();
    })`
$DIR/src/tests/routes/keywords/read.rs:18:9-18:62: `Keyword::find_or_create_all(conn, &["foo"]).unwrap();`
$DIR/src/tests/routes/keywords/read.rs:20:33-20:42: `.get(url)`
$DIR/src/tests/routes/keywords/read.rs:20:42-20:49: `.good()`
$DIR/src/tests/routes/keywords/read.rs:27:38-27:46: `.empty()`
$DIR/src/tests/routes/keywords/read.rs:28:5-28:38: `anon.get(url).assert_not_found();`
$DIR/src/tests/routes/keywords/read.rs:28:9-28:18: `.get(url)`
$DIR/src/tests/routes/keywords/read.rs:28:18-28:37: `.assert_not_found()`
$DIR/src/tests/routes/keywords/read.rs:30:5-32:8: `app.db(|conn| {
        Keyword::find_or_create_all(conn, &["UPPER"]).unwrap();
    });`
$DIR/src/tests/routes/keywords/read.rs:30:8-32:7: `.db(|conn| {
        Keyword::find_or_create_all(conn, &["UPPER"]).unwrap();
    })`
$DIR/src/tests/routes/keywords/read.rs:31:9-31:64: `Keyword::find_or_create_all(conn, &["UPPER"]).unwrap();`
$DIR/src/tests/routes/keywords/read.rs:33:33-33:42: `.get(url)`
$DIR/src/tests/routes/keywords/read.rs:33:42-33:49: `.good()`
$DIR/src/tests/routes/keywords/read.rs:39:44-39:56: `.with_user()`
$DIR/src/tests/routes/keywords/read.rs:40:20-40:31: `.as_model()`
$DIR/src/tests/routes/keywords/read.rs:43:37-43:76: `.get(&format!("/api/v1/keywords/{kw}"))`
$DIR/src/tests/routes/keywords/read.rs:43:76-43:83: `.good()`
$DIR/src/tests/routes/keywords/read.rs:44:9-44:41: `json.keyword.crates_cnt as usize`
$DIR/src/tests/routes/keywords/read.rs:47:20-50:7: `.db(|conn| {
        Keyword::find_or_create_all(conn, &["kw1", "kw2"]).unwrap();
        CrateBuilder::new("fookey", user.id).expect_build(conn)
    })`
$DIR/src/tests/routes/keywords/read.rs:48:9-48:69: `Keyword::find_or_create_all(conn, &["kw1", "kw2"]).unwrap();`
$DIR/src/tests/routes/keywords/read.rs:49:9-49:64: `CrateBuilder::new("fookey", user.id).expect_build(conn)`
$DIR/src/tests/routes/keywords/read.rs:49:45-49:64: `.expect_build(conn)`
$DIR/src/tests/routes/keywords/read.rs:52:5-54:8: `app.db(|conn| {
        Keyword::update_crate(conn, &krate, &[]).unwrap();
    });`
$DIR/src/tests/routes/keywords/read.rs:52:8-54:7: `.db(|conn| {
        Keyword::update_crate(conn, &krate, &[]).unwrap();
    })`
$DIR/src/tests/routes/keywords/read.rs:53:9-53:59: `Keyword::update_crate(conn, &krate, &[]).unwrap();`
$DIR/src/tests/routes/keywords/read.rs:58:5-60:8: `app.db(|conn| {
        Keyword::update_crate(conn, &krate, &["kw1"]).unwrap();
    });`
$DIR/src/tests/routes/keywords/read.rs:58:8-60:7: `.db(|conn| {
        Keyword::update_crate(conn, &krate, &["kw1"]).unwrap();
    })`
$DIR/src/tests/routes/keywords/read.rs:59:9-59:64: `Keyword::update_crate(conn, &krate, &["kw1"]).unwrap();`
$DIR/src/tests/routes/keywords/read.rs:64:5-66:8: `app.db(|conn| {
        Keyword::update_crate(conn, &krate, &["kw2"]).unwrap();
    });`
$DIR/src/tests/routes/keywords/read.rs:64:8-66:7: `.db(|conn| {
        Keyword::update_crate(conn, &krate, &["kw2"]).unwrap();
    })`
$DIR/src/tests/routes/keywords/read.rs:65:9-65:64: `Keyword::update_crate(conn, &krate, &["kw2"]).unwrap();`
$DIR/src/tests/routes/keywords/read.rs:70:5-72:8: `app.db(|conn| {
        Keyword::update_crate(conn, &krate, &[]).unwrap();
    });`
$DIR/src/tests/routes/keywords/read.rs:70:8-72:7: `.db(|conn| {
        Keyword::update_crate(conn, &krate, &[]).unwrap();
    })`
$DIR/src/tests/routes/keywords/read.rs:71:9-71:59: `Keyword::update_crate(conn, &krate, &[]).unwrap();`
$DIR/src/tests/routes/keywords/read.rs:76:5-78:8: `app.db(|conn| {
        Keyword::update_crate(conn, &krate, &["kw1", "kw2"]).unwrap();
    });`
$DIR/src/tests/routes/keywords/read.rs:76:8-78:7: `.db(|conn| {
        Keyword::update_crate(conn, &krate, &["kw1", "kw2"]).unwrap();
    })`
$DIR/src/tests/routes/keywords/read.rs:77:9-77:71: `Keyword::update_crate(conn, &krate, &["kw1", "kw2"]).unwrap();`
$DIR/src/tests/routes/keywords/read.rs:82:5-84:8: `app.db(|conn| {
        Keyword::update_crate(conn, &krate, &[]).unwrap();
    });`
$DIR/src/tests/routes/keywords/read.rs:82:8-84:7: `.db(|conn| {
        Keyword::update_crate(conn, &krate, &[]).unwrap();
    })`
$DIR/src/tests/routes/keywords/read.rs:83:9-83:59: `Keyword::update_crate(conn, &krate, &[]).unwrap();`
$DIR/src/tests/routes/me/email_notifications.rs:27:41-27:53: `.with_user()`
$DIR/src/tests/routes/me/email_notifications.rs:29:24-34:7: `.db(|conn| {
        vec![
            CrateBuilder::new("test_package", user.as_model().id).expect_build(conn),
            CrateBuilder::new("another_package", user.as_model().id).expect_build(conn),
        ]
    })`
$DIR/src/tests/routes/me/email_notifications.rs:30:9-33:10: `vec![
            CrateBuilder::new("test_package", user.as_model().id).expect_build(conn),
            CrateBuilder::new("another_package", user.as_model().id).expect_build(conn),
        ]`
$DIR/src/tests/routes/me/email_notifications.rs:36:25-36:32: `.get(0)`
$DIR/src/tests/routes/me/email_notifications.rs:37:25-37:32: `.get(1)`
$DIR/src/tests/routes/me/email_notifications.rs:41:5-44:9: `user.update_email_notifications(vec![EmailNotificationsUpdate {
        id: a_id,
        email_notifications: false,
    }]);`
$DIR/src/tests/routes/me/email_notifications.rs:41:9-44:8: `.update_email_notifications(vec![EmailNotificationsUpdate {
        id: a_id,
        email_notifications: false,
    }])`
$DIR/src/tests/routes/me/email_notifications.rs:45:20-45:30: `.show_me()`
$DIR/src/tests/routes/me/email_notifications.rs:65:5-68:9: `user.update_email_notifications(vec![EmailNotificationsUpdate {
        id: b_id,
        email_notifications: false,
    }]);`
$DIR/src/tests/routes/me/email_notifications.rs:65:9-68:8: `.update_email_notifications(vec![EmailNotificationsUpdate {
        id: b_id,
        email_notifications: false,
    }])`
$DIR/src/tests/routes/me/email_notifications.rs:69:20-69:30: `.show_me()`
$DIR/src/tests/routes/me/email_notifications.rs:90:5-99:8: `user.update_email_notifications(vec![
        EmailNotificationsUpdate {
            id: a_id,
            email_notifications: true,
        },
        EmailNotificationsUpdate {
            id: b_id,
            email_notifications: true,
        },
    ]);`
$DIR/src/tests/routes/me/email_notifications.rs:90:9-99:7: `.update_email_notifications(vec![
        EmailNotificationsUpdate {
            id: a_id,
            email_notifications: true,
        },
        EmailNotificationsUpdate {
            id: b_id,
            email_notifications: true,
        },
    ])`
$DIR/src/tests/routes/me/email_notifications.rs:100:20-100:30: `.show_me()`
$DIR/src/tests/routes/me/email_notifications.rs:111:41-111:53: `.with_user()`
$DIR/src/tests/routes/me/email_notifications.rs:113:27-118:7: `.db(|conn| {
        let u = new_user("arbitrary_username")
            .create_or_update(None, &app.as_inner().emails, conn)
            .unwrap();
        CrateBuilder::new("test_package", u.id).expect_build(conn)
    })`
$DIR/src/tests/routes/me/email_notifications.rs:115:13-115:66: `.create_or_update(None, &app.as_inner().emails, conn)`
$DIR/src/tests/routes/me/email_notifications.rs:115:41-115:52: `.as_inner()`
$DIR/src/tests/routes/me/email_notifications.rs:117:9-117:67: `CrateBuilder::new("test_package", u.id).expect_build(conn)`
$DIR/src/tests/routes/me/email_notifications.rs:117:48-117:67: `.expect_build(conn)`
$DIR/src/tests/routes/me/email_notifications.rs:120:5-123:9: `user.update_email_notifications(vec![EmailNotificationsUpdate {
        id: not_my_crate.id,
        email_notifications: false,
    }]);`
$DIR/src/tests/routes/me/email_notifications.rs:120:9-123:8: `.update_email_notifications(vec![EmailNotificationsUpdate {
        id: not_my_crate.id,
        email_notifications: false,
    }])`
$DIR/src/tests/routes/me/email_notifications.rs:126:9-131:11: `.db(|conn| {
            crate_owners::table
                .select(crate_owners::email_notifications)
                .filter(crate_owners::crate_id.eq(not_my_crate.id))
                .first(conn)
        })`
$DIR/src/tests/routes/me/email_notifications.rs:127:13-130:29: `crate_owners::table
                .select(crate_owners::email_notifications)
                .filter(crate_owners::crate_id.eq(not_my_crate.id))
                .first(conn)`
$DIR/src/tests/routes/me/email_notifications.rs:128:17-128:59: `.select(crate_owners::email_notifications)`
$DIR/src/tests/routes/me/email_notifications.rs:129:17-129:68: `.filter(crate_owners::crate_id.eq(not_my_crate.id))`
$DIR/src/tests/routes/me/email_notifications.rs:129:47-129:67: `.eq(not_my_crate.id)`
$DIR/src/tests/routes/me/email_notifications.rs:130:17-130:29: `.first(conn)`
$DIR/src/tests/routes/me/get.rs:21:38-21:46: `.empty()`
$DIR/src/tests/routes/me/get.rs:22:5-22:38: `anon.get(url).assert_forbidden();`
$DIR/src/tests/routes/me/get.rs:22:9-22:18: `.get(url)`
$DIR/src/tests/routes/me/get.rs:22:18-22:37: `.assert_forbidden()`
$DIR/src/tests/routes/me/get.rs:24:19-24:38: `.db_new_user("foo")`
$DIR/src/tests/routes/me/get.rs:25:20-25:30: `.show_me()`
$DIR/src/tests/routes/me/get.rs:29:5-32:8: `app.db(|conn| {
        CrateBuilder::new("foo_my_packages", user.as_model().id).expect_build(conn);
        assert_eq!(json.user.email, user.as_model().email(conn).unwrap());
    });`
$DIR/src/tests/routes/me/get.rs:29:8-32:7: `.db(|conn| {
        CrateBuilder::new("foo_my_packages", user.as_model().id).expect_build(conn);
        assert_eq!(json.user.email, user.as_model().email(conn).unwrap());
    })`
$DIR/src/tests/routes/me/get.rs:30:9-30:85: `CrateBuilder::new("foo_my_packages", user.as_model().id).expect_build(conn);`
$DIR/src/tests/routes/me/get.rs:30:50-30:61: `.as_model()`
$DIR/src/tests/routes/me/get.rs:30:65-30:84: `.expect_build(conn)`
$DIR/src/tests/routes/me/get.rs:33:28-33:38: `.show_me()`
$DIR/src/tests/routes/me/get.rs:40:41-40:53: `.with_user()`
$DIR/src/tests/routes/me/get.rs:41:26-41:37: `.as_model()`
$DIR/src/tests/routes/me/get.rs:43:5-48:8: `app.db(|conn| {
        let krate = CrateBuilder::new("foo_my_packages", user_model.id).expect_build(conn);
        krate
            .owner_remove(app.as_inner(), conn, user_model, &user_model.gh_login)
            .unwrap();
    });`
$DIR/src/tests/routes/me/get.rs:43:8-48:7: `.db(|conn| {
        let krate = CrateBuilder::new("foo_my_packages", user_model.id).expect_build(conn);
        krate
            .owner_remove(app.as_inner(), conn, user_model, &user_model.gh_login)
            .unwrap();
    })`
$DIR/src/tests/routes/me/get.rs:44:72-44:91: `.expect_build(conn)`
$DIR/src/tests/routes/me/get.rs:45:9-47:23: `krate
            .owner_remove(app.as_inner(), conn, user_model, &user_model.gh_login)
            .unwrap();`
$DIR/src/tests/routes/me/get.rs:46:13-46:82: `.owner_remove(app.as_inner(), conn, user_model, &user_model.gh_login)`
$DIR/src/tests/routes/me/get.rs:46:30-46:41: `.as_inner()`
$DIR/src/tests/routes/me/get.rs:50:20-50:30: `.show_me()`
$DIR/src/tests/routes/me/tokens/create.rs:13:36-13:44: `.empty()`
$DIR/src/tests/routes/me/tokens/create.rs:14:9-14:43: `.put("/api/v1/me/tokens", NEW_BAR)`
$DIR/src/tests/routes/me/tokens/create.rs:19:39-19:51: `.with_user()`
$DIR/src/tests/routes/me/tokens/create.rs:21:24-21:64: `.put::<()>("/api/v1/me/tokens", invalid)`
$DIR/src/tests/routes/me/tokens/create.rs:31:39-31:51: `.with_user()`
$DIR/src/tests/routes/me/tokens/create.rs:33:24-33:67: `.put::<()>("/api/v1/me/tokens", empty_name)`
$DIR/src/tests/routes/me/tokens/create.rs:43:41-43:53: `.with_user()`
$DIR/src/tests/routes/me/tokens/create.rs:44:18-44:29: `.as_model()`
$DIR/src/tests/routes/me/tokens/create.rs:45:5-49:8: `app.db(|conn| {
        for i in 0..1000 {
            assert_ok!(ApiToken::insert(conn, id, &format!("token {i}")));
        }
    });`
$DIR/src/tests/routes/me/tokens/create.rs:45:8-49:7: `.db(|conn| {
        for i in 0..1000 {
            assert_ok!(ApiToken::insert(conn, id, &format!("token {i}")));
        }
    })`
$DIR/src/tests/routes/me/tokens/create.rs:47:13-47:75: `assert_ok!(ApiToken::insert(conn, id, &format!("token {i}")));`
$DIR/src/tests/routes/me/tokens/create.rs:50:24-50:64: `.put::<()>("/api/v1/me/tokens", NEW_BAR)`
$DIR/src/tests/routes/me/tokens/create.rs:60:41-60:53: `.with_user()`
$DIR/src/tests/routes/me/tokens/create.rs:62:24-62:64: `.put::<()>("/api/v1/me/tokens", NEW_BAR)`
$DIR/src/tests/routes/me/tokens/create.rs:64:5-69:8: `assert_yaml_snapshot!(response.into_json(), {
        ".api_token.id" => insta::any_id_redaction(),
        ".api_token.created_at" => "[datetime]",
        ".api_token.last_used_at" => "[datetime]",
        ".api_token.token" => insta::api_token_redaction(),
    });`
$DIR/src/tests/routes/me/tokens/create.rs:72:12-72:86: `.db(|conn| assert_ok!(ApiToken::belonging_to(user.as_model()).load(conn)))`
$DIR/src/tests/routes/me/tokens/create.rs:83:39-83:51: `.with_user()`
$DIR/src/tests/routes/me/tokens/create.rs:84:28-84:62: `.put("/api/v1/me/tokens", NEW_BAR)`
$DIR/src/tests/routes/me/tokens/create.rs:84:62-84:69: `.good()`
$DIR/src/tests/routes/me/tokens/create.rs:85:29-85:63: `.put("/api/v1/me/tokens", NEW_BAR)`
$DIR/src/tests/routes/me/tokens/create.rs:85:63-85:70: `.good()`
$DIR/src/tests/routes/me/tokens/create.rs:93:42-93:54: `.with_user()`
$DIR/src/tests/routes/me/tokens/create.rs:94:29-94:63: `.put("/api/v1/me/tokens", NEW_BAR)`
$DIR/src/tests/routes/me/tokens/create.rs:94:63-94:70: `.good()`
$DIR/src/tests/routes/me/tokens/create.rs:96:20-96:39: `.db_new_user("bar")`
$DIR/src/tests/routes/me/tokens/create.rs:97:30-97:64: `.put("/api/v1/me/tokens", NEW_BAR)`
$DIR/src/tests/routes/me/tokens/create.rs:97:64-97:71: `.good()`
$DIR/src/tests/routes/me/tokens/create.rs:104:43-104:56: `.with_token()`
$DIR/src/tests/routes/me/tokens/create.rs:105:25-108:6: `.put::<()>(
        "/api/v1/me/tokens",
        br#"{ "api_token": { "name": "baz" } }"#,
    )`
$DIR/src/tests/routes/me/tokens/create.rs:118:41-118:53: `.with_user()`
$DIR/src/tests/routes/me/tokens/create.rs:128:24-128:92: `.put::<()>("/api/v1/me/tokens", &serde_json::to_vec(&json).unwrap())`
$DIR/src/tests/routes/me/tokens/create.rs:130:5-135:8: `assert_yaml_snapshot!(response.into_json(), {
        ".api_token.id" => insta::any_id_redaction(),
        ".api_token.created_at" => "[datetime]",
        ".api_token.last_used_at" => "[datetime]",
        ".api_token.token" => insta::api_token_redaction(),
    });`
$DIR/src/tests/routes/me/tokens/create.rs:138:12-138:86: `.db(|conn| assert_ok!(ApiToken::belonging_to(user.as_model()).load(conn)))`
$DIR/src/tests/routes/me/tokens/create.rs:158:41-158:53: `.with_user()`
$DIR/src/tests/routes/me/tokens/create.rs:168:24-168:92: `.put::<()>("/api/v1/me/tokens", &serde_json::to_vec(&json).unwrap())`
$DIR/src/tests/routes/me/tokens/create.rs:170:5-175:8: `assert_yaml_snapshot!(response.into_json(), {
        ".api_token.id" => insta::any_id_redaction(),
        ".api_token.created_at" => "[datetime]",
        ".api_token.last_used_at" => "[datetime]",
        ".api_token.token" => insta::api_token_redaction(),
    });`
$DIR/src/tests/routes/me/tokens/create.rs:178:12-178:86: `.db(|conn| assert_ok!(ApiToken::belonging_to(user.as_model()).load(conn)))`
$DIR/src/tests/routes/me/tokens/create.rs:189:39-189:51: `.with_user()`
$DIR/src/tests/routes/me/tokens/create.rs:199:24-199:92: `.put::<()>("/api/v1/me/tokens", &serde_json::to_vec(&json).unwrap())`
$DIR/src/tests/routes/me/tokens/create.rs:209:39-209:51: `.with_user()`
$DIR/src/tests/routes/me/tokens/create.rs:219:24-219:92: `.put::<()>("/api/v1/me/tokens", &serde_json::to_vec(&json).unwrap())`
$DIR/src/tests/routes/me/tokens/create.rs:229:42-229:54: `.with_user()`
$DIR/src/tests/routes/me/tokens/create.rs:240:24-240:92: `.put::<()>("/api/v1/me/tokens", &serde_json::to_vec(&json).unwrap())`
$DIR/src/tests/routes/me/tokens/delete.rs:11:39-11:51: `.with_user()`
$DIR/src/tests/routes/me/tokens/delete.rs:12:38-12:68: `.delete("/api/v1/me/tokens/5")`
$DIR/src/tests/routes/me/tokens/delete.rs:12:68-12:75: `.good()`
$DIR/src/tests/routes/me/tokens/delete.rs:17:49-17:62: `.with_token()`
$DIR/src/tests/routes/me/tokens/delete.rs:18:22-18:33: `.as_model()`
$DIR/src/tests/routes/me/tokens/delete.rs:19:22-19:33: `.as_model()`
$DIR/src/tests/routes/me/tokens/delete.rs:20:20-20:39: `.db_new_user("baz")`
$DIR/src/tests/routes/me/tokens/delete.rs:31:9-31:60: `.delete(&format!("/api/v1/me/tokens/{}", token.id))`
$DIR/src/tests/routes/me/tokens/delete.rs:32:9-32:16: `.good()`
$DIR/src/tests/routes/me/tokens/delete.rs:44:48-44:61: `.with_token()`
$DIR/src/tests/routes/me/tokens/delete.rs:47:5-51:8: `app.db(|conn| {
        let tokens: Vec<ApiToken> = assert_ok!(ApiToken::belonging_to(user.as_model()).load(conn));
        assert_eq!(tokens.len(), 1);
        assert_eq!(tokens[0].name, token.as_model().name);
    });`
$DIR/src/tests/routes/me/tokens/delete.rs:47:8-51:7: `.db(|conn| {
        let tokens: Vec<ApiToken> = assert_ok!(ApiToken::belonging_to(user.as_model()).load(conn));
        assert_eq!(tokens.len(), 1);
        assert_eq!(tokens[0].name, token.as_model().name);
    })`
$DIR/src/tests/routes/me/tokens/delete.rs:55:9-55:71: `.delete(&format!("/api/v1/me/tokens/{}", token.as_model().id))`
$DIR/src/tests/routes/me/tokens/delete.rs:56:9-56:16: `.good()`
$DIR/src/tests/routes/me/tokens/delete.rs:60:48-60:59: `.as_model()`
$DIR/src/tests/routes/me/tokens/delete.rs:61:13-61:51: `.filter(api_tokens::revoked.eq(false))`
$DIR/src/tests/routes/me/tokens/delete.rs:61:40-61:50: `.eq(false)`
$DIR/src/tests/routes/me/tokens/delete.rs:62:13-62:21: `.count()`
$DIR/src/tests/routes/me/tokens/delete.rs:63:13-63:30: `.get_result(conn)`
$DIR/src/tests/routes/me/tokens/delete_current.rs:9:48-9:61: `.with_token()`
$DIR/src/tests/routes/me/tokens/delete_current.rs:12:5-18:8: `app.db(|conn| {
        let tokens: Vec<ApiToken> = assert_ok!(ApiToken::belonging_to(user.as_model())
            .filter(api_tokens::revoked.eq(false))
            .load(conn));
        assert_eq!(tokens.len(), 1);
        assert_eq!(tokens[0].name, token.as_model().name);
    });`
$DIR/src/tests/routes/me/tokens/delete_current.rs:12:8-18:7: `.db(|conn| {
        let tokens: Vec<ApiToken> = assert_ok!(ApiToken::belonging_to(user.as_model())
            .filter(api_tokens::revoked.eq(false))
            .load(conn));
        assert_eq!(tokens.len(), 1);
        assert_eq!(tokens[0].name, token.as_model().name);
    })`
$DIR/src/tests/routes/me/tokens/delete_current.rs:21:25-21:64: `.delete::<()>("/api/v1/tokens/current")`
$DIR/src/tests/routes/me/tokens/delete_current.rs:35:36-35:44: `.empty()`
$DIR/src/tests/routes/me/tokens/delete_current.rs:37:24-37:63: `.delete::<()>("/api/v1/tokens/current")`
$DIR/src/tests/routes/me/tokens/delete_current.rs:47:48-47:61: `.with_token()`
$DIR/src/tests/routes/me/tokens/delete_current.rs:50:5-56:8: `app.db(|conn| {
        let tokens: Vec<ApiToken> = assert_ok!(ApiToken::belonging_to(user.as_model())
            .filter(api_tokens::revoked.eq(false))
            .load(conn));
        assert_eq!(tokens.len(), 1);
        assert_eq!(tokens[0].name, token.as_model().name);
    });`
$DIR/src/tests/routes/me/tokens/delete_current.rs:50:8-56:7: `.db(|conn| {
        let tokens: Vec<ApiToken> = assert_ok!(ApiToken::belonging_to(user.as_model())
            .filter(api_tokens::revoked.eq(false))
            .load(conn));
        assert_eq!(tokens.len(), 1);
        assert_eq!(tokens[0].name, token.as_model().name);
    })`
$DIR/src/tests/routes/me/tokens/delete_current.rs:59:24-59:63: `.delete::<()>("/api/v1/tokens/current")`
$DIR/src/tests/routes/me/tokens/list.rs:10:36-10:44: `.empty()`
$DIR/src/tests/routes/me/tokens/list.rs:11:9-11:34: `.get("/api/v1/me/tokens")`
$DIR/src/tests/routes/me/tokens/list.rs:16:43-16:56: `.with_token()`
$DIR/src/tests/routes/me/tokens/list.rs:17:10-17:35: `.get("/api/v1/me/tokens")`
$DIR/src/tests/routes/me/tokens/list.rs:22:39-22:51: `.with_user()`
$DIR/src/tests/routes/me/tokens/list.rs:23:24-23:55: `.get::<()>("/api/v1/me/tokens")`
$DIR/src/tests/routes/me/tokens/list.rs:25:24-25:36: `.into_json()`
$DIR/src/tests/routes/me/tokens/list.rs:26:45-26:56: `.as_array()`
$DIR/src/tests/routes/me/tokens/list.rs:32:41-32:53: `.with_user()`
$DIR/src/tests/routes/me/tokens/list.rs:33:18-33:29: `.as_model()`
$DIR/src/tests/routes/me/tokens/list.rs:34:5-57:8: `app.db(|conn| {
        vec![
            assert_ok!(ApiToken::insert(conn, id, "bar")),
            assert_ok!(ApiToken::insert_with_scopes(
                conn,
                id,
                "baz",
                Some(vec![
                    CrateScope::try_from("serde").unwrap(),
                    CrateScope::try_from("serde-*").unwrap()
                ]),
                Some(vec![EndpointScope::PublishUpdate]),
                None
            )),
            assert_ok!(ApiToken::insert_with_scopes(
                conn,
                id,
                "qux",
                None,
                None,
                Some((Utc::now() - Duration::days(1)).naive_utc()),
            )),
        ]
    });`
$DIR/src/tests/routes/me/tokens/list.rs:34:8-57:7: `.db(|conn| {
        vec![
            assert_ok!(ApiToken::insert(conn, id, "bar")),
            assert_ok!(ApiToken::insert_with_scopes(
                conn,
                id,
                "baz",
                Some(vec![
                    CrateScope::try_from("serde").unwrap(),
                    CrateScope::try_from("serde-*").unwrap()
                ]),
                Some(vec![EndpointScope::PublishUpdate]),
                None
            )),
            assert_ok!(ApiToken::insert_with_scopes(
                conn,
                id,
                "qux",
                None,
                None,
                Some((Utc::now() - Duration::days(1)).naive_utc()),
            )),
        ]
    })`
$DIR/src/tests/routes/me/tokens/list.rs:35:9-56:10: `vec![
            assert_ok!(ApiToken::insert(conn, id, "bar")),
            assert_ok!(ApiToken::insert_with_scopes(
                conn,
                id,
                "baz",
                Some(vec![
                    CrateScope::try_from("serde").unwrap(),
                    CrateScope::try_from("serde-*").unwrap()
                ]),
                Some(vec![EndpointScope::PublishUpdate]),
                None
            )),
            assert_ok!(ApiToken::insert_with_scopes(
                conn,
                id,
                "qux",
                None,
                None,
                Some((Utc::now() - Duration::days(1)).naive_utc()),
            )),
        ]`
$DIR/src/tests/routes/me/tokens/list.rs:59:24-59:55: `.get::<()>("/api/v1/me/tokens")`
$DIR/src/tests/routes/me/tokens/list.rs:75:41-75:53: `.with_user()`
$DIR/src/tests/routes/me/tokens/list.rs:76:18-76:29: `.as_model()`
$DIR/src/tests/routes/me/tokens/list.rs:77:5-100:8: `app.db(|conn| {
        vec![
            assert_ok!(ApiToken::insert(conn, id, "bar")),
            assert_ok!(ApiToken::insert_with_scopes(
                conn,
                id,
                "ancient",
                Some(vec![
                    CrateScope::try_from("serde").unwrap(),
                    CrateScope::try_from("serde-*").unwrap()
                ]),
                Some(vec![EndpointScope::PublishUpdate]),
                Some((Utc::now() - Duration::days(31)).naive_utc()),
            )),
            assert_ok!(ApiToken::insert_with_scopes(
                conn,
                id,
                "recent",
                None,
                None,
                Some((Utc::now() - Duration::days(1)).naive_utc()),
            )),
        ]
    });`
$DIR/src/tests/routes/me/tokens/list.rs:77:8-100:7: `.db(|conn| {
        vec![
            assert_ok!(ApiToken::insert(conn, id, "bar")),
            assert_ok!(ApiToken::insert_with_scopes(
                conn,
                id,
                "ancient",
                Some(vec![
                    CrateScope::try_from("serde").unwrap(),
                    CrateScope::try_from("serde-*").unwrap()
                ]),
                Some(vec![EndpointScope::PublishUpdate]),
                Some((Utc::now() - Duration::days(31)).naive_utc()),
            )),
            assert_ok!(ApiToken::insert_with_scopes(
                conn,
                id,
                "recent",
                None,
                None,
                Some((Utc::now() - Duration::days(1)).naive_utc()),
            )),
        ]
    })`
$DIR/src/tests/routes/me/tokens/list.rs:78:9-99:10: `vec![
            assert_ok!(ApiToken::insert(conn, id, "bar")),
            assert_ok!(ApiToken::insert_with_scopes(
                conn,
                id,
                "ancient",
                Some(vec![
                    CrateScope::try_from("serde").unwrap(),
                    CrateScope::try_from("serde-*").unwrap()
                ]),
                Some(vec![EndpointScope::PublishUpdate]),
                Some((Utc::now() - Duration::days(31)).naive_utc()),
            )),
            assert_ok!(ApiToken::insert_with_scopes(
                conn,
                id,
                "recent",
                None,
                None,
                Some((Utc::now() - Duration::days(1)).naive_utc()),
            )),
        ]`
$DIR/src/tests/routes/me/tokens/list.rs:102:24-102:71: `.get::<()>("/api/v1/me/tokens?expired_days=30")`
$DIR/src/tests/routes/me/tokens/list.rs:104:24-104:36: `.into_json()`
$DIR/src/tests/routes/me/tokens/list.rs:105:45-105:56: `.as_array()`
$DIR/src/tests/routes/me/tokens/list.rs:107:5-107:65: `assert_response_tokens_contain_name(response_tokens, "bar");`
$DIR/src/tests/routes/me/tokens/list.rs:110:24-110:71: `.get::<()>("/api/v1/me/tokens?expired_days=60")`
$DIR/src/tests/routes/me/tokens/list.rs:112:24-112:36: `.into_json()`
$DIR/src/tests/routes/me/tokens/list.rs:113:45-113:56: `.as_array()`
$DIR/src/tests/routes/me/tokens/list.rs:115:5-115:65: `assert_response_tokens_contain_name(response_tokens, "bar");`
$DIR/src/tests/routes/me/tokens/list.rs:116:5-116:69: `assert_response_tokens_contain_name(response_tokens, "ancient");`
$DIR/src/tests/routes/me/tokens/list.rs:122:41-122:53: `.with_user()`
$DIR/src/tests/routes/me/tokens/list.rs:123:18-123:29: `.as_model()`
$DIR/src/tests/routes/me/tokens/list.rs:124:21-129:7: `.db(|conn| {
        vec![
            assert_ok!(ApiToken::insert(conn, id, "bar")),
            assert_ok!(ApiToken::insert(conn, id, "baz")),
        ]
    })`
$DIR/src/tests/routes/me/tokens/list.rs:125:9-128:10: `vec![
            assert_ok!(ApiToken::insert(conn, id, "bar")),
            assert_ok!(ApiToken::insert(conn, id, "baz")),
        ]`
$DIR/src/tests/routes/me/tokens/list.rs:132:24-132:55: `.get::<()>("/api/v1/me/tokens")`
$DIR/src/tests/routes/me/tokens/list.rs:134:24-134:36: `.into_json()`
$DIR/src/tests/routes/me/tokens/list.rs:135:45-135:56: `.as_array()`
$DIR/src/tests/routes/me/tokens/list.rs:139:24-139:91: `.delete::<()>(&format!("/api/v1/me/tokens/{}", tokens[0].model.id))`
$DIR/src/tests/routes/me/tokens/list.rs:143:24-143:55: `.get::<()>("/api/v1/me/tokens")`
$DIR/src/tests/routes/me/tokens/list.rs:145:24-145:36: `.into_json()`
$DIR/src/tests/routes/me/tokens/list.rs:146:45-146:56: `.as_array()`
$DIR/src/tests/routes/me/updates.rs:12:43-12:56: `.with_token()`
$DIR/src/tests/routes/me/updates.rs:13:10-13:36: `.get("/api/v1/me/updates")`
$DIR/src/tests/routes/me/updates.rs:28:41-28:53: `.with_user()`
$DIR/src/tests/routes/me/updates.rs:29:26-29:37: `.as_model()`
$DIR/src/tests/routes/me/updates.rs:31:5-47:8: `app.db(|conn| {
        CrateBuilder::new("foo_fighters", user_id)
            .version(VersionBuilder::new("1.0.0"))
            .expect_build(conn);

        // Make foo_fighters's version mimic a version published before we started recording who
        // published versions
        let none: Option<i32> = None;
        update(versions::table)
            .set(versions::published_by.eq(none))
            .execute(conn)
            .unwrap();

        CrateBuilder::new("bar_fighters", user_id)
            .version(VersionBuilder::new("1.0.0"))
            .expect_build(conn);
    });`
$DIR/src/tests/routes/me/updates.rs:31:8-47:7: `.db(|conn| {
        CrateBuilder::new("foo_fighters", user_id)
            .version(VersionBuilder::new("1.0.0"))
            .expect_build(conn);

        // Make foo_fighters's version mimic a version published before we started recording who
        // published versions
        let none: Option<i32> = None;
        update(versions::table)
            .set(versions::published_by.eq(none))
            .execute(conn)
            .unwrap();

        CrateBuilder::new("bar_fighters", user_id)
            .version(VersionBuilder::new("1.0.0"))
            .expect_build(conn);
    })`
$DIR/src/tests/routes/me/updates.rs:32:9-34:33: `CrateBuilder::new("foo_fighters", user_id)
            .version(VersionBuilder::new("1.0.0"))
            .expect_build(conn);`
$DIR/src/tests/routes/me/updates.rs:33:13-33:51: `.version(VersionBuilder::new("1.0.0"))`
$DIR/src/tests/routes/me/updates.rs:34:13-34:32: `.expect_build(conn)`
$DIR/src/tests/routes/me/updates.rs:39:9-42:23: `update(versions::table)
            .set(versions::published_by.eq(none))
            .execute(conn)
            .unwrap();`
$DIR/src/tests/routes/me/updates.rs:40:13-40:50: `.set(versions::published_by.eq(none))`
$DIR/src/tests/routes/me/updates.rs:40:40-40:49: `.eq(none)`
$DIR/src/tests/routes/me/updates.rs:41:13-41:27: `.execute(conn)`
$DIR/src/tests/routes/me/updates.rs:44:9-46:33: `CrateBuilder::new("bar_fighters", user_id)
            .version(VersionBuilder::new("1.0.0"))
            .expect_build(conn);`
$DIR/src/tests/routes/me/updates.rs:45:13-45:51: `.version(VersionBuilder::new("1.0.0"))`
$DIR/src/tests/routes/me/updates.rs:46:13-46:32: `.expect_build(conn)`
$DIR/src/tests/routes/me/updates.rs:49:20-49:46: `.get("/api/v1/me/updates")`
$DIR/src/tests/routes/me/updates.rs:49:46-49:53: `.good()`
$DIR/src/tests/routes/me/updates.rs:53:5-54:17: `user.put::<OkBool>("/api/v1/crates/foo_fighters/follow", b"")
        .good();`
$DIR/src/tests/routes/me/updates.rs:53:9-53:66: `.put::<OkBool>("/api/v1/crates/foo_fighters/follow", b"")`
$DIR/src/tests/routes/me/updates.rs:54:9-54:16: `.good()`
$DIR/src/tests/routes/me/updates.rs:55:5-56:17: `user.put::<OkBool>("/api/v1/crates/bar_fighters/follow", b"")
        .good();`
$DIR/src/tests/routes/me/updates.rs:55:9-55:66: `.put::<OkBool>("/api/v1/crates/bar_fighters/follow", b"")`
$DIR/src/tests/routes/me/updates.rs:56:9-56:16: `.good()`
$DIR/src/tests/routes/me/updates.rs:58:20-58:46: `.get("/api/v1/me/updates")`
$DIR/src/tests/routes/me/updates.rs:58:46-58:53: `.good()`
$DIR/src/tests/routes/me/updates.rs:64:9-64:45: `.find(|v| v.krate == "foo_fighters")`
$DIR/src/tests/routes/me/updates.rs:66:5-66:45: `assert_none!(&foo_version.published_by);`
$DIR/src/tests/routes/me/updates.rs:70:9-70:45: `.find(|v| v.krate == "bar_fighters")`
$DIR/src/tests/routes/me/updates.rs:78:9-78:60: `.get_with_query("/api/v1/me/updates", "per_page=1")`
$DIR/src/tests/routes/me/updates.rs:79:9-79:16: `.good()`
$DIR/src/tests/routes/me/updates.rs:83:5-84:17: `user.delete::<OkBool>("/api/v1/crates/bar_fighters/follow")
        .good();`
$DIR/src/tests/routes/me/updates.rs:83:9-83:64: `.delete::<OkBool>("/api/v1/crates/bar_fighters/follow")`
$DIR/src/tests/routes/me/updates.rs:84:9-84:16: `.good()`
$DIR/src/tests/routes/me/updates.rs:86:9-86:67: `.get_with_query("/api/v1/me/updates", "page=2&per_page=1")`
$DIR/src/tests/routes/me/updates.rs:87:9-87:16: `.good()`
$DIR/src/tests/routes/me/updates.rs:91:24-91:77: `.get_with_query::<()>("/api/v1/me/updates", "page=0")`
$DIR/src/tests/routes/metrics.rs:8:9-8:90: `.with_config(|config| config.metrics_authorization_token = Some("foobar".into()))`
$DIR/src/tests/routes/metrics.rs:8:81-8:88: `.into()`
$DIR/src/tests/routes/metrics.rs:9:9-9:17: `.empty()`
$DIR/src/tests/routes/metrics.rs:24:9-24:90: `.with_config(|config| config.metrics_authorization_token = Some("secret".into()))`
$DIR/src/tests/routes/metrics.rs:24:81-24:88: `.into()`
$DIR/src/tests/routes/metrics.rs:25:9-25:17: `.empty()`
$DIR/src/tests/routes/metrics.rs:53:9-53:73: `.with_config(|config| config.metrics_authorization_token = None)`
$DIR/src/tests/routes/metrics.rs:54:9-54:17: `.empty()`
$DIR/src/tests/routes/session/authorize.rs:6:36-6:44: `.empty()`
$DIR/src/tests/routes/session/authorize.rs:7:24-7:68: `.get::<()>("/api/private/session/authorize")`
$DIR/src/tests/routes/session/begin.rs:11:36-11:44: `.empty()`
$DIR/src/tests/routes/session/begin.rs:12:34-12:68: `.get("/api/private/session/begin")`
$DIR/src/tests/routes/session/begin.rs:12:68-12:75: `.good()`
$DIR/src/tests/routes/summary.rs:23:36-23:44: `.empty()`
$DIR/src/tests/routes/summary.rs:24:9-24:51: `.get::<SummaryResponse>("/api/v1/summary")`
$DIR/src/tests/routes/summary.rs:29:44-29:56: `.with_user()`
$DIR/src/tests/routes/summary.rs:30:20-30:31: `.as_model()`
$DIR/src/tests/routes/summary.rs:31:5-82:8: `app.db(|conn| {
        let now_ = Utc::now().naive_utc();
        let now_plus_two = now_ + chrono::Duration::seconds(2);

        new_category("Category 1", "cat1", "Category 1 crates")
            .create_or_update(conn)
            .unwrap();

        CrateBuilder::new("some_downloads", user.id)
            .version(VersionBuilder::new("0.1.0"))
            .description("description")
            .keyword("popular")
            .category("cat1")
            .downloads(20)
            .recent_downloads(10)
            .expect_build(conn);

        CrateBuilder::new("most_recent_downloads", user.id)
            .version(VersionBuilder::new("0.2.0"))
            .keyword("popular")
            .category("cat1")
            .downloads(5000)
            .recent_downloads(50)
            .expect_build(conn);

        CrateBuilder::new("just_updated", user.id)
            .version(VersionBuilder::new("0.1.0"))
            .version(VersionBuilder::new("0.1.2"))
            // update 'just_updated' krate. Others won't appear because updated_at == created_at.
            .updated_at(now_)
            .expect_build(conn);

        CrateBuilder::new("just_updated_patch", user.id)
            .version(VersionBuilder::new("0.1.0"))
            .version(VersionBuilder::new("0.2.0"))
            // Add a patch version be newer than the other versions, including the higher one.
            .version(VersionBuilder::new("0.1.1").created_at(now_plus_two))
            .updated_at(now_plus_two)
            .expect_build(conn);

        CrateBuilder::new("with_downloads", user.id)
            .version(VersionBuilder::new("0.3.0"))
            .keyword("popular")
            .downloads(1000)
            .expect_build(conn);

        // set total_downloads global value for `num_downloads` prop
        update(metadata::table)
            .set(metadata::total_downloads.eq(6000))
            .execute(conn)
            .unwrap();
    });`
$DIR/src/tests/routes/summary.rs:31:8-82:7: `.db(|conn| {
        let now_ = Utc::now().naive_utc();
        let now_plus_two = now_ + chrono::Duration::seconds(2);

        new_category("Category 1", "cat1", "Category 1 crates")
            .create_or_update(conn)
            .unwrap();

        CrateBuilder::new("some_downloads", user.id)
            .version(VersionBuilder::new("0.1.0"))
            .description("description")
            .keyword("popular")
            .category("cat1")
            .downloads(20)
            .recent_downloads(10)
            .expect_build(conn);

        CrateBuilder::new("most_recent_downloads", user.id)
            .version(VersionBuilder::new("0.2.0"))
            .keyword("popular")
            .category("cat1")
            .downloads(5000)
            .recent_downloads(50)
            .expect_build(conn);

        CrateBuilder::new("just_updated", user.id)
            .version(VersionBuilder::new("0.1.0"))
            .version(VersionBuilder::new("0.1.2"))
            // update 'just_updated' krate. Others won't appear because updated_at == created_at.
            .updated_at(now_)
            .expect_build(conn);

        CrateBuilder::new("just_updated_patch", user.id)
            .version(VersionBuilder::new("0.1.0"))
            .version(VersionBuilder::new("0.2.0"))
            // Add a patch version be newer than the other versions, including the higher one.
            .version(VersionBuilder::new("0.1.1").created_at(now_plus_two))
            .updated_at(now_plus_two)
            .expect_build(conn);

        CrateBuilder::new("with_downloads", user.id)
            .version(VersionBuilder::new("0.3.0"))
            .keyword("popular")
            .downloads(1000)
            .expect_build(conn);

        // set total_downloads global value for `num_downloads` prop
        update(metadata::table)
            .set(metadata::total_downloads.eq(6000))
            .execute(conn)
            .unwrap();
    })`
$DIR/src/tests/routes/summary.rs:32:30-32:42: `.naive_utc()`
$DIR/src/tests/routes/summary.rs:35:9-37:23: `new_category("Category 1", "cat1", "Category 1 crates")
            .create_or_update(conn)
            .unwrap();`
$DIR/src/tests/routes/summary.rs:36:13-36:36: `.create_or_update(conn)`
$DIR/src/tests/routes/summary.rs:39:9-46:33: `CrateBuilder::new("some_downloads", user.id)
            .version(VersionBuilder::new("0.1.0"))
            .description("description")
            .keyword("popular")
            .category("cat1")
            .downloads(20)
            .recent_downloads(10)
            .expect_build(conn);`
$DIR/src/tests/routes/summary.rs:40:13-40:51: `.version(VersionBuilder::new("0.1.0"))`
$DIR/src/tests/routes/summary.rs:41:13-41:40: `.description("description")`
$DIR/src/tests/routes/summary.rs:42:13-42:32: `.keyword("popular")`
$DIR/src/tests/routes/summary.rs:43:13-43:30: `.category("cat1")`
$DIR/src/tests/routes/summary.rs:44:13-44:27: `.downloads(20)`
$DIR/src/tests/routes/summary.rs:45:13-45:34: `.recent_downloads(10)`
$DIR/src/tests/routes/summary.rs:46:13-46:32: `.expect_build(conn)`
$DIR/src/tests/routes/summary.rs:48:9-54:33: `CrateBuilder::new("most_recent_downloads", user.id)
            .version(VersionBuilder::new("0.2.0"))
            .keyword("popular")
            .category("cat1")
            .downloads(5000)
            .recent_downloads(50)
            .expect_build(conn);`
$DIR/src/tests/routes/summary.rs:49:13-49:51: `.version(VersionBuilder::new("0.2.0"))`
$DIR/src/tests/routes/summary.rs:50:13-50:32: `.keyword("popular")`
$DIR/src/tests/routes/summary.rs:51:13-51:30: `.category("cat1")`
$DIR/src/tests/routes/summary.rs:52:13-52:29: `.downloads(5000)`
$DIR/src/tests/routes/summary.rs:53:13-53:34: `.recent_downloads(50)`
$DIR/src/tests/routes/summary.rs:54:13-54:32: `.expect_build(conn)`
$DIR/src/tests/routes/summary.rs:56:9-61:33: `CrateBuilder::new("just_updated", user.id)
            .version(VersionBuilder::new("0.1.0"))
            .version(VersionBuilder::new("0.1.2"))
            // update 'just_updated' krate. Others won't appear because updated_at == created_at.
            .updated_at(now_)
            .expect_build(conn);`
$DIR/src/tests/routes/summary.rs:57:13-57:51: `.version(VersionBuilder::new("0.1.0"))`
$DIR/src/tests/routes/summary.rs:58:13-58:51: `.version(VersionBuilder::new("0.1.2"))`
$DIR/src/tests/routes/summary.rs:59:13-60:30: `// update 'just_updated' krate. Others won't appear because updated_at == created_at.
            .updated_at(now_)`
$DIR/src/tests/routes/summary.rs:61:13-61:32: `.expect_build(conn)`
$DIR/src/tests/routes/summary.rs:63:9-69:33: `CrateBuilder::new("just_updated_patch", user.id)
            .version(VersionBuilder::new("0.1.0"))
            .version(VersionBuilder::new("0.2.0"))
            // Add a patch version be newer than the other versions, including the higher one.
            .version(VersionBuilder::new("0.1.1").created_at(now_plus_two))
            .updated_at(now_plus_two)
            .expect_build(conn);`
$DIR/src/tests/routes/summary.rs:64:13-64:51: `.version(VersionBuilder::new("0.1.0"))`
$DIR/src/tests/routes/summary.rs:65:13-65:51: `.version(VersionBuilder::new("0.2.0"))`
$DIR/src/tests/routes/summary.rs:66:13-67:76: `// Add a patch version be newer than the other versions, including the higher one.
            .version(VersionBuilder::new("0.1.1").created_at(now_plus_two))`
$DIR/src/tests/routes/summary.rs:67:50-67:75: `.created_at(now_plus_two)`
$DIR/src/tests/routes/summary.rs:68:13-68:38: `.updated_at(now_plus_two)`
$DIR/src/tests/routes/summary.rs:69:13-69:32: `.expect_build(conn)`
$DIR/src/tests/routes/summary.rs:71:9-75:33: `CrateBuilder::new("with_downloads", user.id)
            .version(VersionBuilder::new("0.3.0"))
            .keyword("popular")
            .downloads(1000)
            .expect_build(conn);`
$DIR/src/tests/routes/summary.rs:72:13-72:51: `.version(VersionBuilder::new("0.3.0"))`
$DIR/src/tests/routes/summary.rs:73:13-73:32: `.keyword("popular")`
$DIR/src/tests/routes/summary.rs:74:13-74:29: `.downloads(1000)`
$DIR/src/tests/routes/summary.rs:75:13-75:32: `.expect_build(conn)`
$DIR/src/tests/routes/summary.rs:78:9-81:23: `update(metadata::table)
            .set(metadata::total_downloads.eq(6000))
            .execute(conn)
            .unwrap();`
$DIR/src/tests/routes/summary.rs:79:13-79:53: `.set(metadata::total_downloads.eq(6000))`
$DIR/src/tests/routes/summary.rs:79:43-79:52: `.eq(6000)`
$DIR/src/tests/routes/summary.rs:80:13-80:27: `.execute(conn)`
$DIR/src/tests/routes/summary.rs:84:37-84:60: `.get("/api/v1/summary")`
$DIR/src/tests/routes/summary.rs:84:60-84:67: `.good()`
$DIR/src/tests/routes/summary.rs:114:9-121:11: `.with_config(|config| {
            config.excluded_crate_names = vec![
                "most_recent_downloads".into(),
                // make sure no error occurs with a crate name that doesn't exist and that the name
                // matches are exact, not substrings
                "downloads".into(),
            ];
        })`
$DIR/src/tests/routes/summary.rs:115:13-120:15: `config.excluded_crate_names = vec![
                "most_recent_downloads".into(),
                // make sure no error occurs with a crate name that doesn't exist and that the name
                // matches are exact, not substrings
                "downloads".into(),
            ];`
$DIR/src/tests/routes/summary.rs:122:9-122:21: `.with_user()`
$DIR/src/tests/routes/summary.rs:123:20-123:31: `.as_model()`
$DIR/src/tests/routes/summary.rs:124:5-141:8: `app.db(|conn| {
        CrateBuilder::new("some_downloads", user.id)
            .version(VersionBuilder::new("0.1.0"))
            .description("description")
            .keyword("popular")
            .category("cat1")
            .downloads(20)
            .recent_downloads(10)
            .expect_build(conn);

        CrateBuilder::new("most_recent_downloads", user.id)
            .version(VersionBuilder::new("0.2.0"))
            .keyword("popular")
            .category("cat1")
            .downloads(5000)
            .recent_downloads(50)
            .expect_build(conn);
    });`
$DIR/src/tests/routes/summary.rs:124:8-141:7: `.db(|conn| {
        CrateBuilder::new("some_downloads", user.id)
            .version(VersionBuilder::new("0.1.0"))
            .description("description")
            .keyword("popular")
            .category("cat1")
            .downloads(20)
            .recent_downloads(10)
            .expect_build(conn);

        CrateBuilder::new("most_recent_downloads", user.id)
            .version(VersionBuilder::new("0.2.0"))
            .keyword("popular")
            .category("cat1")
            .downloads(5000)
            .recent_downloads(50)
            .expect_build(conn);
    })`
$DIR/src/tests/routes/summary.rs:125:9-132:33: `CrateBuilder::new("some_downloads", user.id)
            .version(VersionBuilder::new("0.1.0"))
            .description("description")
            .keyword("popular")
            .category("cat1")
            .downloads(20)
            .recent_downloads(10)
            .expect_build(conn);`
$DIR/src/tests/routes/summary.rs:126:13-126:51: `.version(VersionBuilder::new("0.1.0"))`
$DIR/src/tests/routes/summary.rs:127:13-127:40: `.description("description")`
$DIR/src/tests/routes/summary.rs:128:13-128:32: `.keyword("popular")`
$DIR/src/tests/routes/summary.rs:129:13-129:30: `.category("cat1")`
$DIR/src/tests/routes/summary.rs:130:13-130:27: `.downloads(20)`
$DIR/src/tests/routes/summary.rs:131:13-131:34: `.recent_downloads(10)`
$DIR/src/tests/routes/summary.rs:132:13-132:32: `.expect_build(conn)`
$DIR/src/tests/routes/summary.rs:134:9-140:33: `CrateBuilder::new("most_recent_downloads", user.id)
            .version(VersionBuilder::new("0.2.0"))
            .keyword("popular")
            .category("cat1")
            .downloads(5000)
            .recent_downloads(50)
            .expect_build(conn);`
$DIR/src/tests/routes/summary.rs:135:13-135:51: `.version(VersionBuilder::new("0.2.0"))`
$DIR/src/tests/routes/summary.rs:136:13-136:32: `.keyword("popular")`
$DIR/src/tests/routes/summary.rs:137:13-137:30: `.category("cat1")`
$DIR/src/tests/routes/summary.rs:138:13-138:29: `.downloads(5000)`
$DIR/src/tests/routes/summary.rs:139:13-139:34: `.recent_downloads(50)`
$DIR/src/tests/routes/summary.rs:140:13-140:32: `.expect_build(conn)`
$DIR/src/tests/routes/summary.rs:143:37-143:60: `.get("/api/v1/summary")`
$DIR/src/tests/routes/summary.rs:143:60-143:67: `.good()`
$DIR/src/tests/routes/users/read.rs:12:41-12:53: `.with_user()`
$DIR/src/tests/routes/users/read.rs:13:5-13:28: `app.db_new_user("Bar");`
$DIR/src/tests/routes/users/read.rs:13:8-13:27: `.db_new_user("Bar")`
$DIR/src/tests/routes/users/read.rs:15:44-15:69: `.get("/api/v1/users/foo")`
$DIR/src/tests/routes/users/read.rs:15:69-15:76: `.good()`
$DIR/src/tests/routes/users/read.rs:18:44-18:69: `.get("/api/v1/users/bAr")`
$DIR/src/tests/routes/users/read.rs:18:69-18:76: `.good()`
$DIR/src/tests/routes/users/read.rs:25:38-25:46: `.empty()`
$DIR/src/tests/routes/users/read.rs:27:5-51:8: `app.db(|conn| {
        // Please do not delete or modify the setup of this test in order to get it to pass.
        // This setup mimics how GitHub works. If someone abandons a GitHub account, the username is
        // available for anyone to take. We need to support having multiple user accounts
        // with the same gh_login in crates.io. `gh_id` is stable across renames, so that field
        // should be used for uniquely identifying GitHub accounts whenever possible. For the
        // crates.io/user/:username pages, the best we can do is show the last crates.io account
        // created with that username.
        assert_ok!(NewUser::new(
            1,
            "foobar",
            Some("I was first then deleted my github account"),
            None,
            "bar"
        )
        .create_or_update(None, &app.as_inner().emails, conn));
        assert_ok!(NewUser::new(
            2,
            "FOOBAR",
            Some("I was second, I took the foobar username on github"),
            None,
            "bar"
        )
        .create_or_update(None, &app.as_inner().emails, conn));
    });`
$DIR/src/tests/routes/users/read.rs:27:8-51:7: `.db(|conn| {
        // Please do not delete or modify the setup of this test in order to get it to pass.
        // This setup mimics how GitHub works. If someone abandons a GitHub account, the username is
        // available for anyone to take. We need to support having multiple user accounts
        // with the same gh_login in crates.io. `gh_id` is stable across renames, so that field
        // should be used for uniquely identifying GitHub accounts whenever possible. For the
        // crates.io/user/:username pages, the best we can do is show the last crates.io account
        // created with that username.
        assert_ok!(NewUser::new(
            1,
            "foobar",
            Some("I was first then deleted my github account"),
            None,
            "bar"
        )
        .create_or_update(None, &app.as_inner().emails, conn));
        assert_ok!(NewUser::new(
            2,
            "FOOBAR",
            Some("I was second, I took the foobar username on github"),
            None,
            "bar"
        )
        .create_or_update(None, &app.as_inner().emails, conn));
    })`
$DIR/src/tests/routes/users/read.rs:35:9-42:64: `assert_ok!(NewUser::new(
            1,
            "foobar",
            Some("I was first then deleted my github account"),
            None,
            "bar"
        )
        .create_or_update(None, &app.as_inner().emails, conn));`
$DIR/src/tests/routes/users/read.rs:43:9-50:64: `assert_ok!(NewUser::new(
            2,
            "FOOBAR",
            Some("I was second, I took the foobar username on github"),
            None,
            "bar"
        )
        .create_or_update(None, &app.as_inner().emails, conn));`
$DIR/src/tests/routes/users/read.rs:53:44-53:72: `.get("/api/v1/users/fOObAr")`
$DIR/src/tests/routes/users/read.rs:53:72-53:79: `.good()`
$DIR/src/tests/routes/users/stats.rs:14:44-14:56: `.with_user()`
$DIR/src/tests/routes/users/stats.rs:15:20-15:31: `.as_model()`
$DIR/src/tests/routes/users/stats.rs:16:27-16:46: `.db_new_user("bar")`
$DIR/src/tests/routes/users/stats.rs:17:36-17:47: `.as_model()`
$DIR/src/tests/routes/users/stats.rs:19:5-44:8: `app.db(|conn| {
        let mut krate = CrateBuilder::new("foo_krate1", user.id).expect_build(conn);
        krate.downloads = 10;
        update(&krate).set(&krate).execute(conn).unwrap();

        let mut krate2 = CrateBuilder::new("foo_krate2", user.id).expect_build(conn);
        krate2.downloads = 20;
        update(&krate2).set(&krate2).execute(conn).unwrap();

        let mut another_krate = CrateBuilder::new("bar_krate1", another_user.id).expect_build(conn);
        another_krate.downloads = 2;
        update(&another_krate)
            .set(&another_krate)
            .execute(conn)
            .unwrap();

        let mut no_longer_my_krate = CrateBuilder::new("nacho", user.id).expect_build(conn);
        no_longer_my_krate.downloads = 5;
        update(&no_longer_my_krate)
            .set(&no_longer_my_krate)
            .execute(conn)
            .unwrap();
        no_longer_my_krate
            .owner_remove(app.as_inner(), conn, user, &user.gh_login)
            .unwrap();
    });`
$DIR/src/tests/routes/users/stats.rs:19:8-44:7: `.db(|conn| {
        let mut krate = CrateBuilder::new("foo_krate1", user.id).expect_build(conn);
        krate.downloads = 10;
        update(&krate).set(&krate).execute(conn).unwrap();

        let mut krate2 = CrateBuilder::new("foo_krate2", user.id).expect_build(conn);
        krate2.downloads = 20;
        update(&krate2).set(&krate2).execute(conn).unwrap();

        let mut another_krate = CrateBuilder::new("bar_krate1", another_user.id).expect_build(conn);
        another_krate.downloads = 2;
        update(&another_krate)
            .set(&another_krate)
            .execute(conn)
            .unwrap();

        let mut no_longer_my_krate = CrateBuilder::new("nacho", user.id).expect_build(conn);
        no_longer_my_krate.downloads = 5;
        update(&no_longer_my_krate)
            .set(&no_longer_my_krate)
            .execute(conn)
            .unwrap();
        no_longer_my_krate
            .owner_remove(app.as_inner(), conn, user, &user.gh_login)
            .unwrap();
    })`
$DIR/src/tests/routes/users/stats.rs:20:65-20:84: `.expect_build(conn)`
$DIR/src/tests/routes/users/stats.rs:21:9-21:30: `krate.downloads = 10;`
$DIR/src/tests/routes/users/stats.rs:22:9-22:59: `update(&krate).set(&krate).execute(conn).unwrap();`
$DIR/src/tests/routes/users/stats.rs:22:23-22:35: `.set(&krate)`
$DIR/src/tests/routes/users/stats.rs:22:35-22:49: `.execute(conn)`
$DIR/src/tests/routes/users/stats.rs:24:66-24:85: `.expect_build(conn)`
$DIR/src/tests/routes/users/stats.rs:25:9-25:31: `krate2.downloads = 20;`
$DIR/src/tests/routes/users/stats.rs:26:9-26:61: `update(&krate2).set(&krate2).execute(conn).unwrap();`
$DIR/src/tests/routes/users/stats.rs:26:24-26:37: `.set(&krate2)`
$DIR/src/tests/routes/users/stats.rs:26:37-26:51: `.execute(conn)`
$DIR/src/tests/routes/users/stats.rs:28:81-28:100: `.expect_build(conn)`
$DIR/src/tests/routes/users/stats.rs:29:9-29:37: `another_krate.downloads = 2;`
$DIR/src/tests/routes/users/stats.rs:30:9-33:23: `update(&another_krate)
            .set(&another_krate)
            .execute(conn)
            .unwrap();`
$DIR/src/tests/routes/users/stats.rs:31:13-31:33: `.set(&another_krate)`
$DIR/src/tests/routes/users/stats.rs:32:13-32:27: `.execute(conn)`
$DIR/src/tests/routes/users/stats.rs:35:73-35:92: `.expect_build(conn)`
$DIR/src/tests/routes/users/stats.rs:36:9-36:42: `no_longer_my_krate.downloads = 5;`
$DIR/src/tests/routes/users/stats.rs:37:9-40:23: `update(&no_longer_my_krate)
            .set(&no_longer_my_krate)
            .execute(conn)
            .unwrap();`
$DIR/src/tests/routes/users/stats.rs:38:13-38:38: `.set(&no_longer_my_krate)`
$DIR/src/tests/routes/users/stats.rs:39:13-39:27: `.execute(conn)`
$DIR/src/tests/routes/users/stats.rs:41:9-43:23: `no_longer_my_krate
            .owner_remove(app.as_inner(), conn, user, &user.gh_login)
            .unwrap();`
$DIR/src/tests/routes/users/stats.rs:42:13-42:70: `.owner_remove(app.as_inner(), conn, user, &user.gh_login)`
$DIR/src/tests/routes/users/stats.rs:42:30-42:41: `.as_inner()`
$DIR/src/tests/routes/users/stats.rs:47:32-47:42: `.get(&url)`
$DIR/src/tests/routes/users/stats.rs:47:42-47:49: `.good()`
$DIR/src/tests/routes/users/stats.rs:54:42-54:54: `.with_user()`
$DIR/src/tests/routes/users/stats.rs:55:20-55:31: `.as_model()`
$DIR/src/tests/routes/users/stats.rs:58:32-58:42: `.get(&url)`
$DIR/src/tests/routes/users/stats.rs:58:42-58:49: `.good()`
$DIR/src/tests/routes/users/update.rs:47:46-47:58: `.with_user()`
$DIR/src/tests/routes/users/update.rs:48:21-48:32: `.as_model()`
$DIR/src/tests/routes/users/update.rs:50:24-50:70: `.update_email_more_control(model.id, Some(""))`
$DIR/src/tests/routes/users/update.rs:57:24-57:66: `.update_email_more_control(model.id, None)`
$DIR/src/tests/routes/users/update.rs:72:44-72:56: `.with_user()`
$DIR/src/tests/routes/users/update.rs:73:27-73:49: `.db_new_user("not_me")`
$DIR/src/tests/routes/users/update.rs:74:42-74:53: `.as_model()`
$DIR/src/tests/routes/users/update.rs:76:24-79:6: `.update_email_more_control(
        another_user_model.id,
        Some("pineapple@pineapples.pineapple"),
    )`
$DIR/src/tests/routes/users/update.rs:86:24-89:6: `.update_email_more_control(
        another_user_model.id,
        Some("pineapple@pineapples.pineapple"),
    )`
$DIR/src/tests/routes/versions/list.rs:10:44-10:56: `.with_user()`
$DIR/src/tests/routes/versions/list.rs:11:20-11:31: `.as_model()`
$DIR/src/tests/routes/versions/list.rs:15:27-15:36: `.get(url)`
$DIR/src/tests/routes/versions/list.rs:15:36-15:43: `.good()`
$DIR/src/tests/routes/versions/list.rs:16:5-16:33: `assert_yaml_snapshot!(json);`
$DIR/src/tests/routes/versions/list.rs:18:23-25:7: `.db(|conn| {
        CrateBuilder::new("foo_vers_index", user.id)
            .version(VersionBuilder::new("2.0.0").license(Some("MIT")))
            .version(VersionBuilder::new("2.0.1").license(Some("MIT/Apache-2.0")))
            .expect_build(conn);
        let ids: Vec<i32> = versions::table.select(versions::id).load(conn).unwrap();
        (ids[0], ids[1])
    })`
$DIR/src/tests/routes/versions/list.rs:19:9-22:33: `CrateBuilder::new("foo_vers_index", user.id)
            .version(VersionBuilder::new("2.0.0").license(Some("MIT")))
            .version(VersionBuilder::new("2.0.1").license(Some("MIT/Apache-2.0")))
            .expect_build(conn);`
$DIR/src/tests/routes/versions/list.rs:20:13-20:72: `.version(VersionBuilder::new("2.0.0").license(Some("MIT")))`
$DIR/src/tests/routes/versions/list.rs:20:50-20:71: `.license(Some("MIT"))`
$DIR/src/tests/routes/versions/list.rs:21:13-21:83: `.version(VersionBuilder::new("2.0.1").license(Some("MIT/Apache-2.0")))`
$DIR/src/tests/routes/versions/list.rs:21:50-21:82: `.license(Some("MIT/Apache-2.0"))`
$DIR/src/tests/routes/versions/list.rs:22:13-22:32: `.expect_build(conn)`
$DIR/src/tests/routes/versions/list.rs:23:44-23:65: `.select(versions::id)`
$DIR/src/tests/routes/versions/list.rs:23:65-23:76: `.load(conn)`
$DIR/src/tests/routes/versions/list.rs:24:9-24:25: `(ids[0], ids[1])`
$DIR/src/tests/routes/versions/list.rs:28:27-28:55: `.get_with_query(url, &query)`
$DIR/src/tests/routes/versions/list.rs:28:55-28:62: `.good()`
$DIR/src/tests/routes/versions/read.rs:8:44-8:56: `.with_user()`
$DIR/src/tests/routes/versions/read.rs:9:20-9:31: `.as_model()`
$DIR/src/tests/routes/versions/read.rs:11:16-16:7: `.db(|conn| {
        let krate = CrateBuilder::new("foo_vers_show_id", user.id).expect_build(conn);
        VersionBuilder::new("2.0.0")
            .size(1234)
            .expect_build(krate.id, user.id, conn)
    })`
$DIR/src/tests/routes/versions/read.rs:12:67-12:86: `.expect_build(conn)`
$DIR/src/tests/routes/versions/read.rs:13:9-15:51: `VersionBuilder::new("2.0.0")
            .size(1234)
            .expect_build(krate.id, user.id, conn)`
$DIR/src/tests/routes/versions/read.rs:14:13-14:24: `.size(1234)`
$DIR/src/tests/routes/versions/read.rs:15:13-15:51: `.expect_build(krate.id, user.id, conn)`
$DIR/src/tests/routes/versions/read.rs:19:27-19:37: `.get(&url)`
$DIR/src/tests/routes/versions/read.rs:19:37-19:44: `.good()`
$DIR/src/tests/schema_details.rs:16:23-16:64: `.definition.contains("ON DELETE CASCADE")`
$DIR/src/tests/schema_details.rs:36:23-36:64: `.definition.contains("ON DELETE CASCADE")`
$DIR/src/tests/server.rs:9:39-9:47: `.empty()`
$DIR/src/tests/server.rs:11:23-11:70: `.request_builder(Method::GET, "/api/v1/crates")`
$DIR/src/tests/server.rs:12:5-12:40: `req.header(header::USER_AGENT, "");`
$DIR/src/tests/server.rs:12:8-12:39: `.header(header::USER_AGENT, "")`
$DIR/src/tests/server.rs:13:20-13:35: `.run::<()>(req)`
$DIR/src/tests/server.rs:19:44-19:56: `.with_user()`
$DIR/src/tests/server.rs:21:5-23:8: `app.db(|conn| {
        CrateBuilder::new("dl_no_ua", user.as_model().id).expect_build(conn);
    });`
$DIR/src/tests/server.rs:21:8-23:7: `.db(|conn| {
        CrateBuilder::new("dl_no_ua", user.as_model().id).expect_build(conn);
    })`
$DIR/src/tests/server.rs:22:9-22:78: `CrateBuilder::new("dl_no_ua", user.as_model().id).expect_build(conn);`
$DIR/src/tests/server.rs:22:43-22:54: `.as_model()`
$DIR/src/tests/server.rs:22:58-22:77: `.expect_build(conn)`
$DIR/src/tests/server.rs:25:23-25:95: `.request_builder(Method::GET, "/api/v1/crates/dl_no_ua/0.99.0/download")`
$DIR/src/tests/server.rs:26:5-26:40: `req.header(header::USER_AGENT, "");`
$DIR/src/tests/server.rs:26:8-26:39: `.header(header::USER_AGENT, "")`
$DIR/src/tests/server.rs:27:20-27:35: `.run::<()>(req)`
$DIR/src/tests/server.rs:34:9-36:11: `.with_config(|config| {
            config.blocked_traffic = vec![("Never-Given".into(), vec!["1".into()])];
        })`
$DIR/src/tests/server.rs:35:13-35:85: `config.blocked_traffic = vec![("Never-Given".into(), vec!["1".into()])];`
$DIR/src/tests/server.rs:37:9-37:21: `.with_user()`
$DIR/src/tests/server.rs:39:5-41:8: `app.db(|conn| {
        CrateBuilder::new("dl_no_ua", user.as_model().id).expect_build(conn);
    });`
$DIR/src/tests/server.rs:39:8-41:7: `.db(|conn| {
        CrateBuilder::new("dl_no_ua", user.as_model().id).expect_build(conn);
    })`
$DIR/src/tests/server.rs:40:9-40:78: `CrateBuilder::new("dl_no_ua", user.as_model().id).expect_build(conn);`
$DIR/src/tests/server.rs:40:43-40:54: `.as_model()`
$DIR/src/tests/server.rs:40:58-40:77: `.expect_build(conn)`
$DIR/src/tests/server.rs:43:23-43:95: `.request_builder(Method::GET, "/api/v1/crates/dl_no_ua/0.99.0/download")`
$DIR/src/tests/server.rs:44:5-44:40: `req.header(header::USER_AGENT, "");`
$DIR/src/tests/server.rs:44:8-44:39: `.header(header::USER_AGENT, "")`
$DIR/src/tests/server.rs:45:20-45:35: `.run::<()>(req)`
$DIR/src/tests/server.rs:52:9-54:11: `.with_config(|config| {
            config.blocked_traffic = vec![("User-Agent".into(), vec!["1".into(), "2".into()])];
        })`
$DIR/src/tests/server.rs:53:13-53:96: `config.blocked_traffic = vec![("User-Agent".into(), vec!["1".into(), "2".into()])];`
$DIR/src/tests/server.rs:55:9-55:21: `.with_user()`
$DIR/src/tests/server.rs:57:5-59:8: `app.db(|conn| {
        CrateBuilder::new("dl_no_ua", user.as_model().id).expect_build(conn);
    });`
$DIR/src/tests/server.rs:57:8-59:7: `.db(|conn| {
        CrateBuilder::new("dl_no_ua", user.as_model().id).expect_build(conn);
    })`
$DIR/src/tests/server.rs:58:9-58:78: `CrateBuilder::new("dl_no_ua", user.as_model().id).expect_build(conn);`
$DIR/src/tests/server.rs:58:43-58:54: `.as_model()`
$DIR/src/tests/server.rs:58:58-58:77: `.expect_build(conn)`
$DIR/src/tests/server.rs:61:23-61:95: `.request_builder(Method::GET, "/api/v1/crates/dl_no_ua/0.99.0/download")`
$DIR/src/tests/server.rs:63:5-63:41: `req.header(header::USER_AGENT, "1");`
$DIR/src/tests/server.rs:63:8-63:40: `.header(header::USER_AGENT, "1")`
$DIR/src/tests/server.rs:64:5-64:40: `req.header("x-request-id", "abcd");`
$DIR/src/tests/server.rs:64:8-64:39: `.header("x-request-id", "abcd")`
$DIR/src/tests/server.rs:65:20-65:35: `.run::<()>(req)`
$DIR/src/tests/server.rs:67:5-67:48: `assert_display_snapshot!(resp.into_text());`
$DIR/src/tests/server.rs:69:23-69:95: `.request_builder(Method::GET, "/api/v1/crates/dl_no_ua/0.99.0/download")`
$DIR/src/tests/server.rs:72:5-75:7: `req.header(
        header::USER_AGENT,
        "1value-must-match-exactly-this-is-allowed",
    );`
$DIR/src/tests/server.rs:72:8-75:6: `.header(
        header::USER_AGENT,
        "1value-must-match-exactly-this-is-allowed",
    )`
$DIR/src/tests/server.rs:76:20-76:35: `.run::<()>(req)`
$DIR/src/tests/server_binary.rs:19:5-19:59: `initialize_dummy_crate(&mut server_bin.db().unwrap());`
$DIR/src/tests/server_binary.rs:19:43-19:48: `.db()`
$DIR/src/tests/server_binary.rs:21:36-21:44: `.start()`
$DIR/src/tests/server_binary.rs:25:9-25:49: `.get("api/v1/crates/FOO/1.0.0/download")`
$DIR/src/tests/server_binary.rs:41:5-41:59: `initialize_dummy_crate(&mut server_bin.db().unwrap());`
$DIR/src/tests/server_binary.rs:41:43-41:48: `.db()`
$DIR/src/tests/server_binary.rs:46:5-46:46: `server_bin.chaosproxy.break_networking();`
$DIR/src/tests/server_binary.rs:46:15-46:45: `.chaosproxy.break_networking()`
$DIR/src/tests/server_binary.rs:48:36-48:44: `.start()`
$DIR/src/tests/server_binary.rs:52:9-52:49: `.get("api/v1/crates/FOO/1.0.0/download")`
$DIR/src/tests/team.rs:22:48-22:61: `.with_token()`
$DIR/src/tests/team.rs:24:5-26:8: `app.db(|conn| {
        CrateBuilder::new("foo_not_github", user.as_model().id).expect_build(conn);
    });`
$DIR/src/tests/team.rs:24:8-26:7: `.db(|conn| {
        CrateBuilder::new("foo_not_github", user.as_model().id).expect_build(conn);
    })`
$DIR/src/tests/team.rs:25:9-25:84: `CrateBuilder::new("foo_not_github", user.as_model().id).expect_build(conn);`
$DIR/src/tests/team.rs:25:49-25:60: `.as_model()`
$DIR/src/tests/team.rs:25:64-25:83: `.expect_build(conn)`
$DIR/src/tests/team.rs:28:25-28:78: `.add_named_owner("foo_not_github", "dropbox:foo:foo")`
$DIR/src/tests/team.rs:38:48-38:61: `.with_token()`
$DIR/src/tests/team.rs:40:5-42:8: `app.db(|conn| {
        CrateBuilder::new("foo_weird_name", user.as_model().id).expect_build(conn);
    });`
$DIR/src/tests/team.rs:40:8-42:7: `.db(|conn| {
        CrateBuilder::new("foo_weird_name", user.as_model().id).expect_build(conn);
    })`
$DIR/src/tests/team.rs:41:9-41:84: `CrateBuilder::new("foo_weird_name", user.as_model().id).expect_build(conn);`
$DIR/src/tests/team.rs:41:49-41:60: `.as_model()`
$DIR/src/tests/team.rs:41:64-41:83: `.expect_build(conn)`
$DIR/src/tests/team.rs:44:25-44:84: `.add_named_owner("foo_weird_name", "github:foo/../bar:wut")`
$DIR/src/tests/team.rs:55:48-55:61: `.with_token()`
$DIR/src/tests/team.rs:57:5-59:8: `app.db(|conn| {
        CrateBuilder::new("foo_one_colon", user.as_model().id).expect_build(conn);
    });`
$DIR/src/tests/team.rs:57:8-59:7: `.db(|conn| {
        CrateBuilder::new("foo_one_colon", user.as_model().id).expect_build(conn);
    })`
$DIR/src/tests/team.rs:58:9-58:83: `CrateBuilder::new("foo_one_colon", user.as_model().id).expect_build(conn);`
$DIR/src/tests/team.rs:58:48-58:59: `.as_model()`
$DIR/src/tests/team.rs:58:63-58:82: `.expect_build(conn)`
$DIR/src/tests/team.rs:61:25-61:72: `.add_named_owner("foo_one_colon", "github:foo")`
$DIR/src/tests/team.rs:71:48-71:61: `.with_token()`
$DIR/src/tests/team.rs:73:5-75:8: `app.db(|conn| {
        CrateBuilder::new("foo_nonexistent", user.as_model().id).expect_build(conn);
    });`
$DIR/src/tests/team.rs:73:8-75:7: `.db(|conn| {
        CrateBuilder::new("foo_nonexistent", user.as_model().id).expect_build(conn);
    })`
$DIR/src/tests/team.rs:74:9-74:85: `CrateBuilder::new("foo_nonexistent", user.as_model().id).expect_build(conn);`
$DIR/src/tests/team.rs:74:50-74:61: `.as_model()`
$DIR/src/tests/team.rs:74:65-74:84: `.expect_build(conn)`
$DIR/src/tests/team.rs:77:25-77:99: `.add_named_owner("foo_nonexistent", "github:test-org:this-does-not-exist")`
$DIR/src/tests/team.rs:88:38-88:46: `.empty()`
$DIR/src/tests/team.rs:89:19-89:49: `.db_new_user("user-all-teams")`
$DIR/src/tests/team.rs:90:21-90:58: `.db_new_token("arbitrary token name")`
$DIR/src/tests/team.rs:91:24-91:35: `.as_model()`
$DIR/src/tests/team.rs:93:5-111:8: `app.db(|conn| {
        use crates_io::schema::teams::dsl::*;

        CrateBuilder::new("foo_renamed_team", owner_id).expect_build(conn);

        // create team with same ID and different name compared to http mock
        // used for `add_named_owner`
        NewTeam::new(
            "github:test-org:old-core", // different team name
            1000,                       // same org ID
            2001,                       // same team id as `core` team
            None,
            None,
        )
        .create_or_update(conn)
        .unwrap();

        assert_eq!(teams.count().get_result::<i64>(conn).unwrap(), 1);
    });`
$DIR/src/tests/team.rs:93:8-111:7: `.db(|conn| {
        use crates_io::schema::teams::dsl::*;

        CrateBuilder::new("foo_renamed_team", owner_id).expect_build(conn);

        // create team with same ID and different name compared to http mock
        // used for `add_named_owner`
        NewTeam::new(
            "github:test-org:old-core", // different team name
            1000,                       // same org ID
            2001,                       // same team id as `core` team
            None,
            None,
        )
        .create_or_update(conn)
        .unwrap();

        assert_eq!(teams.count().get_result::<i64>(conn).unwrap(), 1);
    })`
$DIR/src/tests/team.rs:96:9-96:76: `CrateBuilder::new("foo_renamed_team", owner_id).expect_build(conn);`
$DIR/src/tests/team.rs:96:56-96:75: `.expect_build(conn)`
$DIR/src/tests/team.rs:100:9-108:19: `NewTeam::new(
            "github:test-org:old-core", // different team name
            1000,                       // same org ID
            2001,                       // same team id as `core` team
            None,
            None,
        )
        .create_or_update(conn)
        .unwrap();`
$DIR/src/tests/team.rs:107:9-107:32: `.create_or_update(conn)`
$DIR/src/tests/team.rs:113:5-115:17: `token
        .add_named_owner("foo_renamed_team", "github:test-org:core")
        .good();`
$DIR/src/tests/team.rs:114:9-114:69: `.add_named_owner("foo_renamed_team", "github:test-org:core")`
$DIR/src/tests/team.rs:115:9-115:16: `.good()`
$DIR/src/tests/team.rs:117:20-117:58: `.crate_owner_teams("foo_renamed_team")`
$DIR/src/tests/team.rs:117:58-117:65: `.good()`
$DIR/src/tests/team.rs:125:38-125:46: `.empty()`
$DIR/src/tests/team.rs:126:19-126:49: `.db_new_user("user-all-teams")`
$DIR/src/tests/team.rs:127:21-127:58: `.db_new_token("arbitrary token name")`
$DIR/src/tests/team.rs:129:5-131:8: `app.db(|conn| {
        CrateBuilder::new("foo_mixed_case", user.as_model().id).expect_build(conn);
    });`
$DIR/src/tests/team.rs:129:8-131:7: `.db(|conn| {
        CrateBuilder::new("foo_mixed_case", user.as_model().id).expect_build(conn);
    })`
$DIR/src/tests/team.rs:130:9-130:84: `CrateBuilder::new("foo_mixed_case", user.as_model().id).expect_build(conn);`
$DIR/src/tests/team.rs:130:49-130:60: `.as_model()`
$DIR/src/tests/team.rs:130:64-130:83: `.expect_build(conn)`
$DIR/src/tests/team.rs:133:5-135:17: `token
        .add_named_owner("foo_mixed_case", "github:Test-Org:Core")
        .good();`
$DIR/src/tests/team.rs:134:9-134:67: `.add_named_owner("foo_mixed_case", "github:Test-Org:Core")`
$DIR/src/tests/team.rs:135:9-135:16: `.good()`
$DIR/src/tests/team.rs:137:5-143:8: `app.db(|conn| {
        let krate: Crate = Crate::by_name("foo_mixed_case").first(conn).unwrap();
        let owners = krate.owners(conn).unwrap();
        assert_eq!(owners.len(), 2);
        let owner = &owners[1];
        assert_eq!(owner.login(), owner.login().to_lowercase());
    });`
$DIR/src/tests/team.rs:137:8-143:7: `.db(|conn| {
        let krate: Crate = Crate::by_name("foo_mixed_case").first(conn).unwrap();
        let owners = krate.owners(conn).unwrap();
        assert_eq!(owners.len(), 2);
        let owner = &owners[1];
        assert_eq!(owner.login(), owner.login().to_lowercase());
    })`
$DIR/src/tests/team.rs:138:60-138:72: `.first(conn)`
$DIR/src/tests/team.rs:139:27-139:40: `.owners(conn)`
$DIR/src/tests/team.rs:145:20-145:56: `.crate_owner_teams("foo_mixed_case")`
$DIR/src/tests/team.rs:145:56-145:63: `.good()`
$DIR/src/tests/team.rs:152:38-152:46: `.empty()`
$DIR/src/tests/team.rs:153:19-153:49: `.db_new_user("user-org-owner")`
$DIR/src/tests/team.rs:154:21-154:58: `.db_new_token("arbitrary token name")`
$DIR/src/tests/team.rs:156:5-158:8: `app.db(|conn| {
        CrateBuilder::new("foo_org_owner", user.as_model().id).expect_build(conn);
    });`
$DIR/src/tests/team.rs:156:8-158:7: `.db(|conn| {
        CrateBuilder::new("foo_org_owner", user.as_model().id).expect_build(conn);
    })`
$DIR/src/tests/team.rs:157:9-157:83: `CrateBuilder::new("foo_org_owner", user.as_model().id).expect_build(conn);`
$DIR/src/tests/team.rs:157:48-157:59: `.as_model()`
$DIR/src/tests/team.rs:157:63-157:82: `.expect_build(conn)`
$DIR/src/tests/team.rs:160:5-162:17: `token
        .add_named_owner("foo_org_owner", "github:test-org:core")
        .good();`
$DIR/src/tests/team.rs:161:9-161:66: `.add_named_owner("foo_org_owner", "github:test-org:core")`
$DIR/src/tests/team.rs:162:9-162:16: `.good()`
$DIR/src/tests/team.rs:164:5-170:8: `app.db(|conn| {
        let krate: Crate = Crate::by_name("foo_org_owner").first(conn).unwrap();
        let owners = krate.owners(conn).unwrap();
        assert_eq!(owners.len(), 2);
        let owner = &owners[1];
        assert_eq!(owner.login(), owner.login().to_lowercase());
    });`
$DIR/src/tests/team.rs:164:8-170:7: `.db(|conn| {
        let krate: Crate = Crate::by_name("foo_org_owner").first(conn).unwrap();
        let owners = krate.owners(conn).unwrap();
        assert_eq!(owners.len(), 2);
        let owner = &owners[1];
        assert_eq!(owner.login(), owner.login().to_lowercase());
    })`
$DIR/src/tests/team.rs:165:59-165:71: `.first(conn)`
$DIR/src/tests/team.rs:166:27-166:40: `.owners(conn)`
$DIR/src/tests/team.rs:172:20-172:55: `.crate_owner_teams("foo_org_owner")`
$DIR/src/tests/team.rs:172:55-172:62: `.good()`
$DIR/src/tests/team.rs:180:35-180:43: `.empty()`
$DIR/src/tests/team.rs:181:19-181:48: `.db_new_user("user-one-team")`
$DIR/src/tests/team.rs:182:21-182:58: `.db_new_token("arbitrary token name")`
$DIR/src/tests/team.rs:184:5-186:8: `app.db(|conn| {
        CrateBuilder::new("foo_team_non_member", user.as_model().id).expect_build(conn);
    });`
$DIR/src/tests/team.rs:184:8-186:7: `.db(|conn| {
        CrateBuilder::new("foo_team_non_member", user.as_model().id).expect_build(conn);
    })`
$DIR/src/tests/team.rs:185:9-185:89: `CrateBuilder::new("foo_team_non_member", user.as_model().id).expect_build(conn);`
$DIR/src/tests/team.rs:185:54-185:65: `.as_model()`
$DIR/src/tests/team.rs:185:69-185:88: `.expect_build(conn)`
$DIR/src/tests/team.rs:188:25-188:88: `.add_named_owner("foo_team_non_member", "github:test-org:core")`
$DIR/src/tests/team.rs:198:35-198:43: `.empty()`
$DIR/src/tests/team.rs:200:33-200:55: `.db_new_user(username)`
$DIR/src/tests/team.rs:201:49-201:86: `.db_new_token("arbitrary token name")`
$DIR/src/tests/team.rs:203:5-205:8: `app.db(|conn| {
        CrateBuilder::new("foo_remove_team", user_on_both_teams.as_model().id).expect_build(conn);
    });`
$DIR/src/tests/team.rs:203:8-205:7: `.db(|conn| {
        CrateBuilder::new("foo_remove_team", user_on_both_teams.as_model().id).expect_build(conn);
    })`
$DIR/src/tests/team.rs:204:9-204:99: `CrateBuilder::new("foo_remove_team", user_on_both_teams.as_model().id).expect_build(conn);`
$DIR/src/tests/team.rs:204:64-204:75: `.as_model()`
$DIR/src/tests/team.rs:204:79-204:98: `.expect_build(conn)`
$DIR/src/tests/team.rs:207:5-209:17: `token_on_both_teams
        .add_named_owner("foo_remove_team", "github:test-org:core")
        .good();`
$DIR/src/tests/team.rs:208:9-208:68: `.add_named_owner("foo_remove_team", "github:test-org:core")`
$DIR/src/tests/team.rs:209:9-209:16: `.good()`
$DIR/src/tests/team.rs:213:39-213:87: `.remove_named_owner("foo_remove_team", username)`
$DIR/src/tests/team.rs:220:5-222:17: `token_on_both_teams
        .remove_named_owner("foo_remove_team", "github:test-org:core")
        .good();`
$DIR/src/tests/team.rs:221:9-221:71: `.remove_named_owner("foo_remove_team", "github:test-org:core")`
$DIR/src/tests/team.rs:222:9-222:16: `.good()`
$DIR/src/tests/team.rs:224:31-224:60: `.db_new_user("user-one-team")`
$DIR/src/tests/team.rs:225:66-225:83: `.version("2.0.0")`
$DIR/src/tests/team.rs:226:36-226:68: `.publish_crate(crate_to_publish)`
$DIR/src/tests/team.rs:236:35-236:43: `.empty()`
$DIR/src/tests/team.rs:237:33-237:63: `.db_new_user("user-all-teams")`
$DIR/src/tests/team.rs:238:49-238:86: `.db_new_token("arbitrary token name")`
$DIR/src/tests/team.rs:240:5-243:8: `app.db(|conn| {
        CrateBuilder::new("foo_remove_team_owner", user_on_both_teams.as_model().id)
            .expect_build(conn);
    });`
$DIR/src/tests/team.rs:240:8-243:7: `.db(|conn| {
        CrateBuilder::new("foo_remove_team_owner", user_on_both_teams.as_model().id)
            .expect_build(conn);
    })`
$DIR/src/tests/team.rs:241:9-242:33: `CrateBuilder::new("foo_remove_team_owner", user_on_both_teams.as_model().id)
            .expect_build(conn);`
$DIR/src/tests/team.rs:241:70-241:81: `.as_model()`
$DIR/src/tests/team.rs:242:13-242:32: `.expect_build(conn)`
$DIR/src/tests/team.rs:245:5-247:17: `token_on_both_teams
        .add_named_owner("foo_remove_team_owner", "github:test-org:all")
        .good();`
$DIR/src/tests/team.rs:246:9-246:73: `.add_named_owner("foo_remove_team_owner", "github:test-org:all")`
$DIR/src/tests/team.rs:247:9-247:16: `.good()`
$DIR/src/tests/team.rs:249:31-249:60: `.db_new_user("user-one-team")`
$DIR/src/tests/team.rs:250:45-250:82: `.db_new_token("arbitrary token name")`
$DIR/src/tests/team.rs:253:26-253:93: `.remove_named_owner("foo_remove_team_owner", "github:test-org:all")`
$DIR/src/tests/team.rs:260:29-260:59: `.db_new_user("user-org-owner")`
$DIR/src/tests/team.rs:261:41-261:78: `.db_new_token("arbitrary token name")`
$DIR/src/tests/team.rs:263:24-263:91: `.remove_named_owner("foo_remove_team_owner", "github:test-org:all")`
$DIR/src/tests/team.rs:274:35-274:43: `.empty()`
$DIR/src/tests/team.rs:275:33-275:63: `.db_new_user("user-all-teams")`
$DIR/src/tests/team.rs:276:49-276:86: `.db_new_token("arbitrary token name")`
$DIR/src/tests/team.rs:278:5-280:8: `app.db(|conn| {
        CrateBuilder::new("foo_not_owned", user_on_both_teams.as_model().id).expect_build(conn);
    });`
$DIR/src/tests/team.rs:278:8-280:7: `.db(|conn| {
        CrateBuilder::new("foo_not_owned", user_on_both_teams.as_model().id).expect_build(conn);
    })`
$DIR/src/tests/team.rs:279:9-279:97: `CrateBuilder::new("foo_not_owned", user_on_both_teams.as_model().id).expect_build(conn);`
$DIR/src/tests/team.rs:279:62-279:73: `.as_model()`
$DIR/src/tests/team.rs:279:77-279:96: `.expect_build(conn)`
$DIR/src/tests/team.rs:282:5-284:17: `token_on_both_teams
        .add_named_owner("foo_not_owned", "github:test-org:core")
        .good();`
$DIR/src/tests/team.rs:283:9-283:66: `.add_named_owner("foo_not_owned", "github:test-org:core")`
$DIR/src/tests/team.rs:284:9-284:16: `.good()`
$DIR/src/tests/team.rs:286:31-286:60: `.db_new_user("user-one-team")`
$DIR/src/tests/team.rs:288:64-288:81: `.version("2.0.0")`
$DIR/src/tests/team.rs:289:36-289:68: `.publish_crate(crate_to_publish)`
$DIR/src/tests/team.rs:299:35-299:43: `.empty()`
$DIR/src/tests/team.rs:300:33-300:63: `.db_new_user("user-all-teams")`
$DIR/src/tests/team.rs:301:49-301:86: `.db_new_token("arbitrary token name")`
$DIR/src/tests/team.rs:303:5-305:8: `app.db(|conn| {
        CrateBuilder::new("foo_not_owned", user_on_both_teams.as_model().id).expect_build(conn);
    });`
$DIR/src/tests/team.rs:303:8-305:7: `.db(|conn| {
        CrateBuilder::new("foo_not_owned", user_on_both_teams.as_model().id).expect_build(conn);
    })`
$DIR/src/tests/team.rs:304:9-304:97: `CrateBuilder::new("foo_not_owned", user_on_both_teams.as_model().id).expect_build(conn);`
$DIR/src/tests/team.rs:304:62-304:73: `.as_model()`
$DIR/src/tests/team.rs:304:77-304:96: `.expect_build(conn)`
$DIR/src/tests/team.rs:307:5-309:17: `token_on_both_teams
        .add_named_owner("foo_not_owned", "github:test-org:core")
        .good();`
$DIR/src/tests/team.rs:308:9-308:66: `.add_named_owner("foo_not_owned", "github:test-org:core")`
$DIR/src/tests/team.rs:309:9-309:16: `.good()`
$DIR/src/tests/team.rs:311:29-311:59: `.db_new_user("user-org-owner")`
$DIR/src/tests/team.rs:313:64-313:81: `.version("2.0.0")`
$DIR/src/tests/team.rs:314:34-314:66: `.publish_crate(crate_to_publish)`
$DIR/src/tests/team.rs:325:35-325:43: `.empty()`
$DIR/src/tests/team.rs:326:33-326:63: `.db_new_user("user-all-teams")`
$DIR/src/tests/team.rs:327:49-327:86: `.db_new_token("arbitrary token name")`
$DIR/src/tests/team.rs:329:5-331:8: `app.db(|conn| {
        CrateBuilder::new("foo_team_owned", user_on_both_teams.as_model().id).expect_build(conn);
    });`
$DIR/src/tests/team.rs:329:8-331:7: `.db(|conn| {
        CrateBuilder::new("foo_team_owned", user_on_both_teams.as_model().id).expect_build(conn);
    })`
$DIR/src/tests/team.rs:330:9-330:98: `CrateBuilder::new("foo_team_owned", user_on_both_teams.as_model().id).expect_build(conn);`
$DIR/src/tests/team.rs:330:63-330:74: `.as_model()`
$DIR/src/tests/team.rs:330:78-330:97: `.expect_build(conn)`
$DIR/src/tests/team.rs:333:5-335:17: `token_on_both_teams
        .add_named_owner("foo_team_owned", "github:test-org:all")
        .good();`
$DIR/src/tests/team.rs:334:9-334:66: `.add_named_owner("foo_team_owned", "github:test-org:all")`
$DIR/src/tests/team.rs:335:9-335:16: `.good()`
$DIR/src/tests/team.rs:337:31-337:60: `.db_new_user("user-one-team")`
$DIR/src/tests/team.rs:339:65-339:82: `.version("2.0.0")`
$DIR/src/tests/team.rs:340:21-340:53: `.publish_crate(crate_to_publish)`
$DIR/src/tests/team.rs:346:35-346:43: `.empty()`
$DIR/src/tests/team.rs:347:33-347:63: `.db_new_user("user-all-teams")`
$DIR/src/tests/team.rs:348:49-348:86: `.db_new_token("arbitrary token name")`
$DIR/src/tests/team.rs:350:5-352:8: `app.db(|conn| {
        CrateBuilder::new("foo_add_owner", user_on_both_teams.as_model().id).expect_build(conn);
    });`
$DIR/src/tests/team.rs:350:8-352:7: `.db(|conn| {
        CrateBuilder::new("foo_add_owner", user_on_both_teams.as_model().id).expect_build(conn);
    })`
$DIR/src/tests/team.rs:351:9-351:97: `CrateBuilder::new("foo_add_owner", user_on_both_teams.as_model().id).expect_build(conn);`
$DIR/src/tests/team.rs:351:62-351:73: `.as_model()`
$DIR/src/tests/team.rs:351:77-351:96: `.expect_build(conn)`
$DIR/src/tests/team.rs:354:5-356:17: `token_on_both_teams
        .add_named_owner("foo_add_owner", "github:test-org:all")
        .good();`
$DIR/src/tests/team.rs:355:9-355:65: `.add_named_owner("foo_add_owner", "github:test-org:all")`
$DIR/src/tests/team.rs:356:9-356:16: `.good()`
$DIR/src/tests/team.rs:358:29-358:59: `.db_new_user("user-org-owner")`
$DIR/src/tests/team.rs:359:41-359:78: `.db_new_token("arbitrary token name")`
$DIR/src/tests/team.rs:361:35-361:90: `.add_named_owner("foo_add_owner", "arbitrary_username")`
$DIR/src/tests/team.rs:371:35-371:43: `.empty()`
$DIR/src/tests/team.rs:372:33-372:63: `.db_new_user("user-all-teams")`
$DIR/src/tests/team.rs:373:49-373:86: `.db_new_token("arbitrary token name")`
$DIR/src/tests/team.rs:375:5-377:8: `app.db(|conn| {
        CrateBuilder::new("foo_add_owner", user_on_both_teams.as_model().id).expect_build(conn);
    });`
$DIR/src/tests/team.rs:375:8-377:7: `.db(|conn| {
        CrateBuilder::new("foo_add_owner", user_on_both_teams.as_model().id).expect_build(conn);
    })`
$DIR/src/tests/team.rs:376:9-376:97: `CrateBuilder::new("foo_add_owner", user_on_both_teams.as_model().id).expect_build(conn);`
$DIR/src/tests/team.rs:376:62-376:73: `.as_model()`
$DIR/src/tests/team.rs:376:77-376:96: `.expect_build(conn)`
$DIR/src/tests/team.rs:379:5-381:17: `token_on_both_teams
        .add_named_owner("foo_add_owner", "github:test-org:all")
        .good();`
$DIR/src/tests/team.rs:380:9-380:65: `.add_named_owner("foo_add_owner", "github:test-org:all")`
$DIR/src/tests/team.rs:381:9-381:16: `.good()`
$DIR/src/tests/team.rs:383:31-383:60: `.db_new_user("user-one-team")`
$DIR/src/tests/team.rs:384:45-384:82: `.db_new_token("arbitrary token name")`
$DIR/src/tests/team.rs:386:37-386:92: `.add_named_owner("foo_add_owner", "arbitrary_username")`
$DIR/src/tests/team.rs:396:44-396:56: `.with_user()`
$DIR/src/tests/team.rs:397:20-397:31: `.as_model()`
$DIR/src/tests/team.rs:399:19-406:7: `.db(|conn| {
        let t = new_team("github:test-org:team")
            .create_or_update(conn)
            .unwrap();
        let krate = CrateBuilder::new("foo", user.id).expect_build(conn);
        add_team_to_crate(&t, &krate, user, conn).unwrap();
        t
    })`
$DIR/src/tests/team.rs:401:13-401:36: `.create_or_update(conn)`
$DIR/src/tests/team.rs:403:54-403:73: `.expect_build(conn)`
$DIR/src/tests/team.rs:404:9-404:60: `add_team_to_crate(&t, &krate, user, conn).unwrap();`
$DIR/src/tests/team.rs:405:9-405:10: `t`
$DIR/src/tests/team.rs:408:20-408:60: `.search(&format!("team_id={}", team.id))`
$DIR/src/tests/team.rs:414:38-414:46: `.empty()`
$DIR/src/tests/team.rs:415:19-415:49: `.db_new_user("user-all-teams")`
$DIR/src/tests/team.rs:416:20-416:31: `.as_model()`
$DIR/src/tests/team.rs:418:19-429:7: `.db(|conn| {
        let t = NewTeam::new("github:test-org:core", 1000, 2001, None, None)
            .create_or_update(conn)
            .unwrap();

        let krate = CrateBuilder::new("foo", user.id).expect_build(conn);
        add_team_to_crate(&t, &krate, user, conn).unwrap();
        krate
            .owner_remove(app.as_inner(), conn, user, &t.login)
            .unwrap();
        t
    })`
$DIR/src/tests/team.rs:420:13-420:36: `.create_or_update(conn)`
$DIR/src/tests/team.rs:423:54-423:73: `.expect_build(conn)`
$DIR/src/tests/team.rs:424:9-424:60: `add_team_to_crate(&t, &krate, user, conn).unwrap();`
$DIR/src/tests/team.rs:425:9-427:23: `krate
            .owner_remove(app.as_inner(), conn, user, &t.login)
            .unwrap();`
$DIR/src/tests/team.rs:426:13-426:64: `.owner_remove(app.as_inner(), conn, user, &t.login)`
$DIR/src/tests/team.rs:426:30-426:41: `.as_inner()`
$DIR/src/tests/team.rs:428:9-428:10: `t`
$DIR/src/tests/team.rs:431:20-431:60: `.search(&format!("team_id={}", team.id))`
$DIR/src/tests/token.rs:10:51-10:64: `.with_token()`
$DIR/src/tests/token.rs:12:5-12:38: `anon.get(url).assert_forbidden();`
$DIR/src/tests/token.rs:12:9-12:18: `.get(url)`
$DIR/src/tests/token.rs:12:18-12:37: `.assert_forbidden()`
$DIR/src/tests/token.rs:13:5-13:41: `user.get::<EncodableMe>(url).good();`
$DIR/src/tests/token.rs:13:9-13:33: `.get::<EncodableMe>(url)`
$DIR/src/tests/token.rs:13:33-13:40: `.good()`
$DIR/src/tests/token.rs:14:5-14:49: `assert_none!(token.as_model().last_used_at);`
$DIR/src/tests/token.rs:17:5-17:33: `token.search("following=1");`
$DIR/src/tests/token.rs:17:10-17:32: `.search("following=1")`
$DIR/src/tests/token.rs:20:12-20:87: `.db(|conn| assert_ok!(ApiToken::belonging_to(user.as_model()).first(conn)))`
$DIR/src/tests/token.rs:31:36-31:44: `.empty()`
$DIR/src/tests/token.rs:33:27-33:44: `.get_request(url)`
$DIR/src/tests/token.rs:34:5-34:55: `request.header(header::AUTHORIZATION, "oldtoken");`
$DIR/src/tests/token.rs:34:12-34:54: `.header(header::AUTHORIZATION, "oldtoken")`
$DIR/src/tests/token.rs:35:24-35:43: `.run::<()>(request)`
$DIR/src/tests/unhealthy_database.rs:13:9-13:70: `.with_database(TestDatabase::SlowRealPool { replica: false })`
$DIR/src/tests/unhealthy_database.rs:14:9-14:22: `.with_token()`
$DIR/src/tests/unhealthy_database.rs:15:5-19:8: `app.db(|conn| {
        CrateBuilder::new("crate_name", owner.as_model().user_id)
            .version("1.0.0")
            .expect_build(conn)
    });`
$DIR/src/tests/unhealthy_database.rs:15:8-19:7: `.db(|conn| {
        CrateBuilder::new("crate_name", owner.as_model().user_id)
            .version("1.0.0")
            .expect_build(conn)
    })`
$DIR/src/tests/unhealthy_database.rs:16:9-18:32: `CrateBuilder::new("crate_name", owner.as_model().user_id)
            .version("1.0.0")
            .expect_build(conn)`
$DIR/src/tests/unhealthy_database.rs:16:46-16:57: `.as_model()`
$DIR/src/tests/unhealthy_database.rs:17:13-17:30: `.version("1.0.0")`
$DIR/src/tests/unhealthy_database.rs:18:13-18:32: `.expect_build(conn)`
$DIR/src/tests/unhealthy_database.rs:30:5-30:52: `app.primary_db_chaosproxy().break_networking();`
$DIR/src/tests/unhealthy_database.rs:30:8-30:32: `.primary_db_chaosproxy()`
$DIR/src/tests/unhealthy_database.rs:30:32-30:51: `.break_networking()`
$DIR/src/tests/unhealthy_database.rs:31:5-31:43: `assert_unconditional_redirects(&anon);`
$DIR/src/tests/unhealthy_database.rs:36:5-36:54: `app.primary_db_chaosproxy().restore_networking();`
$DIR/src/tests/unhealthy_database.rs:36:8-36:32: `.primary_db_chaosproxy()`
$DIR/src/tests/unhealthy_database.rs:36:32-36:53: `.restore_networking()`
$DIR/src/tests/unhealthy_database.rs:37:5-40:56: `app.as_inner()
        .primary_database
        .wait_until_healthy(DB_HEALTHY_TIMEOUT)
        .expect("the database did not return healthy");`
$DIR/src/tests/unhealthy_database.rs:37:8-37:19: `.as_inner()`
$DIR/src/tests/unhealthy_database.rs:38:9-39:48: `.primary_database
        .wait_until_healthy(DB_HEALTHY_TIMEOUT)`
$DIR/src/tests/unhealthy_database.rs:76:9-76:70: `.with_database(TestDatabase::SlowRealPool { replica: false })`
$DIR/src/tests/unhealthy_database.rs:77:9-77:17: `.empty()`
$DIR/src/tests/unhealthy_database.rs:79:24-79:53: `.get::<()>("/api/v1/summary")`
$DIR/src/tests/unhealthy_database.rs:82:5-82:52: `app.primary_db_chaosproxy().break_networking();`
$DIR/src/tests/unhealthy_database.rs:82:8-82:32: `.primary_db_chaosproxy()`
$DIR/src/tests/unhealthy_database.rs:82:32-82:51: `.break_networking()`
$DIR/src/tests/unhealthy_database.rs:84:24-84:53: `.get::<()>("/api/v1/summary")`
$DIR/src/tests/unhealthy_database.rs:87:5-87:54: `app.primary_db_chaosproxy().restore_networking();`
$DIR/src/tests/unhealthy_database.rs:87:8-87:32: `.primary_db_chaosproxy()`
$DIR/src/tests/unhealthy_database.rs:87:32-87:53: `.restore_networking()`
$DIR/src/tests/unhealthy_database.rs:88:5-91:56: `app.as_inner()
        .primary_database
        .wait_until_healthy(DB_HEALTHY_TIMEOUT)
        .expect("the database did not return healthy");`
$DIR/src/tests/unhealthy_database.rs:88:8-88:19: `.as_inner()`
$DIR/src/tests/unhealthy_database.rs:89:9-90:48: `.primary_database
        .wait_until_healthy(DB_HEALTHY_TIMEOUT)`
$DIR/src/tests/unhealthy_database.rs:93:24-93:53: `.get::<()>("/api/v1/summary")`
$DIR/src/tests/unhealthy_database.rs:102:9-102:69: `.with_database(TestDatabase::SlowRealPool { replica: true })`
$DIR/src/tests/unhealthy_database.rs:103:9-103:21: `.with_user()`
$DIR/src/tests/unhealthy_database.rs:104:5-104:28: `app.db_new_user("foo");`
$DIR/src/tests/unhealthy_database.rs:104:8-104:27: `.db_new_user("foo")`
$DIR/src/tests/unhealthy_database.rs:105:5-105:52: `app.primary_db_chaosproxy().break_networking();`
$DIR/src/tests/unhealthy_database.rs:105:8-105:32: `.primary_db_chaosproxy()`
$DIR/src/tests/unhealthy_database.rs:105:32-105:51: `.break_networking()`
$DIR/src/tests/unhealthy_database.rs:108:25-108:40: `.get::<()>(URL)`
$DIR/src/tests/unhealthy_database.rs:112:5-112:54: `app.primary_db_chaosproxy().restore_networking();`
$DIR/src/tests/unhealthy_database.rs:112:8-112:32: `.primary_db_chaosproxy()`
$DIR/src/tests/unhealthy_database.rs:112:32-112:53: `.restore_networking()`
$DIR/src/tests/unhealthy_database.rs:113:8-113:19: `.as_inner()`
$DIR/src/tests/unhealthy_database.rs:114:9-115:48: `.primary_database
        .wait_until_healthy(DB_HEALTHY_TIMEOUT)`
$DIR/src/tests/unhealthy_database.rs:124:9-124:69: `.with_database(TestDatabase::SlowRealPool { replica: true })`
$DIR/src/tests/unhealthy_database.rs:125:9-125:21: `.with_user()`
$DIR/src/tests/unhealthy_database.rs:126:5-126:28: `app.db_new_user("foo");`
$DIR/src/tests/unhealthy_database.rs:126:8-126:27: `.db_new_user("foo")`
$DIR/src/tests/unhealthy_database.rs:127:5-127:52: `app.primary_db_chaosproxy().break_networking();`
$DIR/src/tests/unhealthy_database.rs:127:8-127:32: `.primary_db_chaosproxy()`
$DIR/src/tests/unhealthy_database.rs:127:32-127:51: `.break_networking()`
$DIR/src/tests/unhealthy_database.rs:128:5-128:52: `app.replica_db_chaosproxy().break_networking();`
$DIR/src/tests/unhealthy_database.rs:128:8-128:32: `.replica_db_chaosproxy()`
$DIR/src/tests/unhealthy_database.rs:128:32-128:51: `.break_networking()`
$DIR/src/tests/unhealthy_database.rs:131:25-131:40: `.get::<()>(URL)`
$DIR/src/tests/unhealthy_database.rs:135:5-135:54: `app.replica_db_chaosproxy().restore_networking();`
$DIR/src/tests/unhealthy_database.rs:135:8-135:32: `.replica_db_chaosproxy()`
$DIR/src/tests/unhealthy_database.rs:135:32-135:53: `.restore_networking()`
$DIR/src/tests/unhealthy_database.rs:136:5-141:56: `app.as_inner()
        .read_only_replica_database
        .as_ref()
        .expect("no replica database configured")
        .wait_until_healthy(DB_HEALTHY_TIMEOUT)
        .expect("the database did not return healthy");`
$DIR/src/tests/unhealthy_database.rs:136:8-136:19: `.as_inner()`
$DIR/src/tests/unhealthy_database.rs:140:9-140:48: `.wait_until_healthy(DB_HEALTHY_TIMEOUT)`
$DIR/src/tests/unhealthy_database.rs:143:25-143:40: `.get::<()>(URL)`
$DIR/src/tests/unhealthy_database.rs:147:5-147:54: `app.primary_db_chaosproxy().restore_networking();`
$DIR/src/tests/unhealthy_database.rs:147:8-147:32: `.primary_db_chaosproxy()`
$DIR/src/tests/unhealthy_database.rs:147:32-147:53: `.restore_networking()`
$DIR/src/tests/unhealthy_database.rs:148:8-148:19: `.as_inner()`
$DIR/src/tests/unhealthy_database.rs:149:9-150:48: `.primary_database
        .wait_until_healthy(DB_HEALTHY_TIMEOUT)`
$DIR/src/tests/unhealthy_database.rs:159:9-159:69: `.with_database(TestDatabase::SlowRealPool { replica: true })`
$DIR/src/tests/unhealthy_database.rs:160:9-160:21: `.with_user()`
$DIR/src/tests/unhealthy_database.rs:161:5-161:28: `app.db_new_user("foo");`
$DIR/src/tests/unhealthy_database.rs:161:8-161:27: `.db_new_user("foo")`
$DIR/src/tests/unhealthy_database.rs:162:5-162:52: `app.primary_db_chaosproxy().break_networking();`
$DIR/src/tests/unhealthy_database.rs:162:8-162:32: `.primary_db_chaosproxy()`
$DIR/src/tests/unhealthy_database.rs:162:32-162:51: `.break_networking()`
$DIR/src/tests/unhealthy_database.rs:163:5-163:52: `app.replica_db_chaosproxy().break_networking();`
$DIR/src/tests/unhealthy_database.rs:163:8-163:32: `.replica_db_chaosproxy()`
$DIR/src/tests/unhealthy_database.rs:163:32-163:51: `.break_networking()`
$DIR/src/tests/unhealthy_database.rs:166:25-166:40: `.get::<()>(URL)`
$DIR/src/tests/unhealthy_database.rs:170:5-170:54: `app.primary_db_chaosproxy().restore_networking();`
$DIR/src/tests/unhealthy_database.rs:170:8-170:32: `.primary_db_chaosproxy()`
$DIR/src/tests/unhealthy_database.rs:170:32-170:53: `.restore_networking()`
$DIR/src/tests/unhealthy_database.rs:171:5-174:56: `app.as_inner()
        .primary_database
        .wait_until_healthy(DB_HEALTHY_TIMEOUT)
        .expect("the database did not return healthy");`
$DIR/src/tests/unhealthy_database.rs:171:8-171:19: `.as_inner()`
$DIR/src/tests/unhealthy_database.rs:172:9-173:48: `.primary_database
        .wait_until_healthy(DB_HEALTHY_TIMEOUT)`
$DIR/src/tests/unhealthy_database.rs:176:25-176:40: `.get::<()>(URL)`
$DIR/src/tests/user.rs:19:48-19:61: `.with_token()`
$DIR/src/tests/user.rs:20:21-20:32: `.as_model()`
$DIR/src/tests/user.rs:21:22-21:34: `.plaintext()`
$DIR/src/tests/user.rs:23:19-35:7: `.db(|conn| {
        // Reuse gh_id but use new gh_login and gh_access_token
        assert_ok!(
            NewUser::new(gh_id, "bar", None, None, "bar_token").create_or_update(
                None,
                &app.as_inner().emails,
                conn
            )
        );

        // Use the original API token to find the now updated user
        assert_ok!(User::find_by_api_token(conn, token.expose_secret()))
    })`
$DIR/src/tests/user.rs:25:9-31:11: `assert_ok!(
            NewUser::new(gh_id, "bar", None, None, "bar_token").create_or_update(
                None,
                &app.as_inner().emails,
                conn
            )
        );`
$DIR/src/tests/user.rs:34:9-34:73: `assert_ok!(User::find_by_api_token(conn, token.expose_secret()))`
$DIR/src/tests/user.rs:52:35-52:43: `.empty()`
$DIR/src/tests/user.rs:57:40-63:7: `.db(|conn| {
        let u = new_user("arbitrary_username");
        let u = u
            .create_or_update(None, &app.as_inner().emails, conn)
            .unwrap();
        MockCookieUser::new(&app, u)
    })`
$DIR/src/tests/user.rs:60:13-60:66: `.create_or_update(None, &app.as_inner().emails, conn)`
$DIR/src/tests/user.rs:60:41-60:52: `.as_inner()`
$DIR/src/tests/user.rs:62:9-62:37: `MockCookieUser::new(&app, u)`
$DIR/src/tests/user.rs:64:68-64:79: `.as_model()`
$DIR/src/tests/user.rs:66:41-66:51: `.show_me()`
$DIR/src/tests/user.rs:71:5-71:72: `user_without_github_email.update_email("apricot@apricots.apricot");`
$DIR/src/tests/user.rs:71:30-71:71: `.update_email("apricot@apricots.apricot")`
$DIR/src/tests/user.rs:74:46-85:7: `.db(|conn| {
        let u = NewUser {
            // Use the same github ID to link to the existing account
            gh_id: user_without_github_email_model.gh_id,
            // new_user uses a None email; the rest of the fields are arbitrary
            ..new_user("arbitrary_username")
        };
        let u = u
            .create_or_update(None, &app.as_inner().emails, conn)
            .unwrap();
        MockCookieUser::new(&app, u)
    })`
$DIR/src/tests/user.rs:82:13-82:66: `.create_or_update(None, &app.as_inner().emails, conn)`
$DIR/src/tests/user.rs:82:41-82:52: `.as_inner()`
$DIR/src/tests/user.rs:84:9-84:37: `MockCookieUser::new(&app, u)`
$DIR/src/tests/user.rs:87:47-87:57: `.show_me()`
$DIR/src/tests/user.rs:97:41-97:53: `.with_user()`
$DIR/src/tests/user.rs:98:21-98:32: `.as_model()`
$DIR/src/tests/user.rs:99:37-104:7: `.db(|conn| {
        Email::belonging_to(model)
            .select(emails::email)
            .first(conn)
            .unwrap()
    })`
$DIR/src/tests/user.rs:100:9-103:22: `Email::belonging_to(model)
            .select(emails::email)
            .first(conn)
            .unwrap()`
$DIR/src/tests/user.rs:101:13-101:35: `.select(emails::email)`
$DIR/src/tests/user.rs:102:13-102:25: `.first(conn)`
$DIR/src/tests/user.rs:109:50-120:7: `.db(|conn| {
        let u = NewUser {
            // Use the same github ID to link to the existing account
            gh_id: model.gh_id,
            // the rest of the fields are arbitrary
            ..new_user("arbitrary_username")
        };
        let u = u
            .create_or_update(Some(new_github_email), &app.as_inner().emails, conn)
            .unwrap();
        MockCookieUser::new(&app, u)
    })`
$DIR/src/tests/user.rs:117:13-117:84: `.create_or_update(Some(new_github_email), &app.as_inner().emails, conn)`
$DIR/src/tests/user.rs:117:59-117:70: `.as_inner()`
$DIR/src/tests/user.rs:119:9-119:37: `MockCookieUser::new(&app, u)`
$DIR/src/tests/user.rs:122:51-122:61: `.show_me()`
$DIR/src/tests/user.rs:131:46-131:58: `.with_user()`
$DIR/src/tests/user.rs:133:20-133:30: `.show_me()`
$DIR/src/tests/user.rs:136:5-136:45: `user.update_email("mango@mangos.mango");`
$DIR/src/tests/user.rs:136:9-136:44: `.update_email("mango@mangos.mango")`
$DIR/src/tests/user.rs:138:20-138:30: `.show_me()`
$DIR/src/tests/user.rs:153:35-153:43: `.empty()`
$DIR/src/tests/user.rs:159:19-167:7: `.db(|conn| {
        let u = NewUser {
            ..new_user("arbitrary_username")
        };
        let u = u
            .create_or_update(Some(email), &app.as_inner().emails, conn)
            .unwrap();
        MockCookieUser::new(&app, u)
    })`
$DIR/src/tests/user.rs:164:13-164:73: `.create_or_update(Some(email), &app.as_inner().emails, conn)`
$DIR/src/tests/user.rs:164:48-164:59: `.as_inner()`
$DIR/src/tests/user.rs:166:9-166:37: `MockCookieUser::new(&app, u)`
$DIR/src/tests/user.rs:168:26-168:37: `.as_model()`
$DIR/src/tests/user.rs:170:34-175:7: `.db(|conn| {
        Email::belonging_to(user_model)
            .select(emails::token)
            .first(conn)
            .unwrap()
    })`
$DIR/src/tests/user.rs:171:9-174:22: `Email::belonging_to(user_model)
            .select(emails::token)
            .first(conn)
            .unwrap()`
$DIR/src/tests/user.rs:172:13-172:35: `.select(emails::token)`
$DIR/src/tests/user.rs:173:13-173:25: `.first(conn)`
$DIR/src/tests/user.rs:177:5-177:38: `user.confirm_email(&email_token);`
$DIR/src/tests/user.rs:177:9-177:37: `.confirm_email(&email_token)`
$DIR/src/tests/user.rs:179:20-179:30: `.show_me()`
$DIR/src/tests/user.rs:194:35-194:43: `.empty()`
$DIR/src/tests/user.rs:199:19-213:7: `.db(|conn| {
        let u = NewUser {
            ..new_user("arbitrary_username")
        };
        let u = u
            .create_or_update(Some(email), &app.as_inner().emails, conn)
            .unwrap();
        update(Email::belonging_to(&u))
            // Users created before we added verification will have
            // `NULL` in the `token_generated_at` column.
            .set(emails::token_generated_at.eq(None::<NaiveDateTime>))
            .execute(conn)
            .unwrap();
        MockCookieUser::new(&app, u)
    })`
$DIR/src/tests/user.rs:204:13-204:73: `.create_or_update(Some(email), &app.as_inner().emails, conn)`
$DIR/src/tests/user.rs:204:48-204:59: `.as_inner()`
$DIR/src/tests/user.rs:206:9-211:23: `update(Email::belonging_to(&u))
            // Users created before we added verification will have
            // `NULL` in the `token_generated_at` column.
            .set(emails::token_generated_at.eq(None::<NaiveDateTime>))
            .execute(conn)
            .unwrap();`
$DIR/src/tests/user.rs:207:13-209:71: `// Users created before we added verification will have
            // `NULL` in the `token_generated_at` column.
            .set(emails::token_generated_at.eq(None::<NaiveDateTime>))`
$DIR/src/tests/user.rs:209:44-209:70: `.eq(None::<NaiveDateTime>)`
$DIR/src/tests/user.rs:210:13-210:27: `.execute(conn)`
$DIR/src/tests/user.rs:212:9-212:37: `MockCookieUser::new(&app, u)`
$DIR/src/tests/user.rs:215:20-215:30: `.show_me()`
$DIR/src/tests/util/mock_request.rs:54:9-54:39: `req.with_body(b"Hello world");`
$DIR/src/tests/util/mock_request.rs:54:12-54:38: `.with_body(b"Hello world")`
$DIR/src/tests/util/mock_request.rs:70:9-70:48: `req.header(header::USER_AGENT, "lulz");`
$DIR/src/tests/util/mock_request.rs:70:12-70:47: `.header(header::USER_AGENT, "lulz")`
$DIR/src/tests/util/mock_request.rs:71:9-71:38: `req.header(header::DNT, "1");`
$DIR/src/tests/util/mock_request.rs:71:12-71:37: `.header(header::DNT, "1")`
$DIR/src/tests/util/test_app.rs:469:52-469:59: `.into()`
$DIR/src/tests/util/test_app.rs:470:56-470:63: `.into()`
$DIR/src/tests/util/test_app.rs:471:59-471:66: `.into()`
$DIR/src/tests/util/test_app.rs:472:60-472:67: `.into()`
$DIR/src/tests/util/test_app.rs:475:46-475:53: `.into()`
$DIR/src/tests/version.rs:7:41-7:53: `.with_user()`
$DIR/src/tests/version.rs:8:20-8:31: `.as_model()`
$DIR/src/tests/version.rs:11:58-11:77: `.expect_build(conn)`
$DIR/src/tests/version.rs:12:51-12:85: `.expect_build(c.id, user.id, conn)`
$DIR/src/tests/version.rs:14:9-14:69: `Version::record_readme_rendering(version.id, conn).unwrap();`
$DIR/src/tests/version.rs:15:9-15:69: `Version::record_readme_rendering(version.id, conn).unwrap();`
$DIR/src/tests/worker/git.rs:10:45-10:58: `.with_token()`
$DIR/src/tests/worker/git.rs:11:23-11:40: `.upstream_index()`
$DIR/src/tests/worker/git.rs:15:44-15:61: `.version("1.0.0")`
$DIR/src/tests/worker/git.rs:15:61-15:68: `.body()`
$DIR/src/tests/worker/git.rs:16:25-16:64: `.put::<()>("/api/v1/crates/new", &body)`
$DIR/src/tests/worker/git.rs:20:5-20:68: `assert_ok_eq!(upstream.list_commits(), vec!["Initial Commit"]);`
$DIR/src/tests/worker/git.rs:23:5-23:39: `app.run_pending_background_jobs();`
$DIR/src/tests/worker/git.rs:23:8-23:38: `.run_pending_background_jobs()`
$DIR/src/tests/worker/git.rs:24:5-27:7: `assert_ok_eq!(
        upstream.list_commits(),
        vec!["Initial Commit", "Create crate `serde`"]
    );`
$DIR/src/tests/worker/git.rs:28:5-28:57: `assert_ok_eq!(upstream.crate_exists("serde"), true);`
$DIR/src/tests/worker/git.rs:32:25-32:73: `.delete::<()>("/api/v1/crates/serde/1.0.0/yank")`
$DIR/src/tests/worker/git.rs:35:5-35:39: `app.run_pending_background_jobs();`
$DIR/src/tests/worker/git.rs:35:8-35:38: `.run_pending_background_jobs()`
$DIR/src/tests/worker/git.rs:36:5-43:7: `assert_ok_eq!(
        upstream.list_commits(),
        vec![
            "Initial Commit",
            "Create crate `serde`",
            "Update crate `serde`",
        ]
    );`
$DIR/src/tests/worker/git.rs:44:5-44:57: `assert_ok_eq!(upstream.crate_exists("serde"), true);`
$DIR/src/tests/worker/git.rs:48:5-55:8: `app.db(|conn| {
        use crates_io::schema::crates;

        let krate: Crate = assert_ok!(Crate::by_name("serde").first(conn));
        assert_ok!(diesel::delete(crates::table.find(krate.id)).execute(conn));

        assert_ok!(Job::enqueue_sync_to_index("serde", conn));
    });`
$DIR/src/tests/worker/git.rs:48:8-55:7: `.db(|conn| {
        use crates_io::schema::crates;

        let krate: Crate = assert_ok!(Crate::by_name("serde").first(conn));
        assert_ok!(diesel::delete(crates::table.find(krate.id)).execute(conn));

        assert_ok!(Job::enqueue_sync_to_index("serde", conn));
    })`
$DIR/src/tests/worker/git.rs:52:9-52:80: `assert_ok!(diesel::delete(crates::table.find(krate.id)).execute(conn));`
$DIR/src/tests/worker/git.rs:54:9-54:63: `assert_ok!(Job::enqueue_sync_to_index("serde", conn));`
$DIR/src/tests/worker/git.rs:57:5-57:39: `app.run_pending_background_jobs();`
$DIR/src/tests/worker/git.rs:57:8-57:38: `.run_pending_background_jobs()`
$DIR/src/tests/worker/git.rs:58:5-66:7: `assert_ok_eq!(
        upstream.list_commits(),
        vec![
            "Initial Commit",
            "Create crate `serde`",
            "Update crate `serde`",
            "Delete crate `serde`",
        ]
    );`
$DIR/src/util/bytes_request.rs:122:13-122:57: `.send_data(vec![0; ACTUAL_BODY_SIZE].into())`
$DIR/src/util/bytes_request.rs:122:49-122:56: `.into()`
$DIR/src/util/bytes_request.rs:125:43-125:54: `.body(body)`
$DIR/src/util/bytes_request.rs:128:13-128:26: `.request(req)`
$DIR/src/util/bytes_request.rs:132:9-132:35: `quit_tx.send(()).unwrap();`
$DIR/src/util/bytes_request.rs:132:16-132:25: `.send(())`
$DIR/src/util/bytes_request.rs:133:9-133:40: `server.await.unwrap().unwrap();`
$DIR/src/util/token.rs:102:37-102:53: `.expose_secret()`
$DIR/src/views/krate_publish.rs:241:5-241:63: `assert_ok!(json::from_str::<EncodableFeature>("\"foo\""));`
$DIR/src/views/krate_publish.rs:242:5-242:61: `assert_err!(json::from_str::<EncodableFeature>("\"\""));`
$DIR/src/views/krate_publish.rs:243:5-243:62: `assert_err!(json::from_str::<EncodableFeature>("\"/\""));`
$DIR/src/views/krate_publish.rs:244:5-244:64: `assert_err!(json::from_str::<EncodableFeature>("\"%/%\""));`
$DIR/src/views/krate_publish.rs:245:5-245:63: `assert_ok!(json::from_str::<EncodableFeature>("\"a/a\""));`
$DIR/src/views.rs:705:17-705:41: `.and_hms_opt(14, 23, 11)`
$DIR/src/views.rs:724:17-724:41: `.and_hms_opt(14, 23, 11)`
$DIR/src/views.rs:742:17-742:41: `.and_hms_opt(14, 23, 11)`
$DIR/src/views.rs:762:17-762:41: `.and_hms_opt(14, 23, 11)`
$DIR/src/views.rs:766:17-766:41: `.and_hms_opt(14, 23, 12)`
$DIR/src/views.rs:797:9-799:67: `assert_some!(json
            .as_str()
            .find(r#""updated_at":"2017-01-06T14:23:11+00:00""#));`
$DIR/src/views.rs:800:9-802:67: `assert_some!(json
            .as_str()
            .find(r#""created_at":"2017-01-06T14:23:12+00:00""#));`
$DIR/src/views.rs:813:17-813:41: `.and_hms_opt(14, 23, 11)`
$DIR/src/views.rs:821:17-821:41: `.and_hms_opt(14, 23, 12)`
$DIR/src/views.rs:843:9-845:67: `assert_some!(json
            .as_str()
            .find(r#""updated_at":"2017-01-06T14:23:11+00:00""#));`
$DIR/src/views.rs:861:17-861:41: `.and_hms_opt(14, 23, 11)`
$DIR/src/views.rs:865:17-865:41: `.and_hms_opt(16, 30, 00)`
$DIR/src/views.rs:869:9-871:67: `assert_some!(json
            .as_str()
            .find(r#""created_at":"2017-01-06T14:23:11+00:00""#));`
$DIR/src/worker/dump_db/configuration.rs:92:9-92:76: `tables.insert("a".to_owned(), table_config_with_deps(&["b", "c"]));`
$DIR/src/worker/dump_db/configuration.rs:92:15-92:75: `.insert("a".to_owned(), table_config_with_deps(&["b", "c"]))`
$DIR/src/worker/dump_db/configuration.rs:93:9-93:76: `tables.insert("b".to_owned(), table_config_with_deps(&["c", "d"]));`
$DIR/src/worker/dump_db/configuration.rs:93:15-93:75: `.insert("b".to_owned(), table_config_with_deps(&["c", "d"]))`
$DIR/src/worker/dump_db/configuration.rs:94:9-94:71: `tables.insert("c".to_owned(), table_config_with_deps(&["d"]));`
$DIR/src/worker/dump_db/configuration.rs:94:15-94:70: `.insert("c".to_owned(), table_config_with_deps(&["d"]))`
$DIR/src/worker/dump_db/configuration.rs:95:9-95:70: `config.0.insert("d".to_owned(), table_config_with_deps(&[]));`
$DIR/src/worker/dump_db/configuration.rs:95:17-95:69: `.insert("d".to_owned(), table_config_with_deps(&[]))`
$DIR/src/worker/dump_db/configuration.rs:104:9-104:71: `tables.insert("a".to_owned(), table_config_with_deps(&["b"]));`
$DIR/src/worker/dump_db/configuration.rs:104:15-104:70: `.insert("a".to_owned(), table_config_with_deps(&["b"]))`
$DIR/src/worker/dump_db/configuration.rs:105:9-105:71: `tables.insert("b".to_owned(), table_config_with_deps(&["a"]));`
$DIR/src/worker/dump_db/configuration.rs:105:15-105:70: `.insert("b".to_owned(), table_config_with_deps(&["a"]))`
$DIR/src/worker/dump_db/gen_scripts.rs:134:13-139:15: `.flat_map(|(table, config)| {
                config.columns.keys().map(|column| Column {
                    table_name: table.clone(),
                    column_name: column.clone(),
                })
            })`
$DIR/src/worker/dump_db/gen_scripts.rs:135:17-138:19: `config.columns.keys().map(|column| Column {
                    table_name: table.clone(),
                    column_name: column.clone(),
                })`
$DIR/src/worker/dump_db/gen_scripts.rs:135:23-135:38: `.columns.keys()`
$DIR/src/worker/dump_db/gen_scripts.rs:135:38-138:19: `.map(|column| Column {
                    table_name: table.clone(),
                    column_name: column.clone(),
                })`
$DIR/src/worker/dump_db/gen_scripts.rs:140:13-140:23: `.collect()`
$DIR/src/worker/dump_db/gen_scripts.rs:145:24-145:49: `.difference(&vis_columns)`
$DIR/src/worker/dump_db/gen_scripts.rs:147:13-149:16: `errors.push(format!(
                "No visibility information for columns {table_name}.{column_name}."
            ));`
$DIR/src/worker/dump_db/gen_scripts.rs:147:19-149:15: `.push(format!(
                "No visibility information for columns {table_name}.{column_name}."
            ))`
$DIR/src/worker/dump_db/gen_scripts.rs:154:25-154:49: `.difference(&db_columns)`
$DIR/src/worker/dump_db/gen_scripts.rs:156:13-158:16: `errors.push(format!(
                "Column {table_name}.{column_name} does not exist in the database."
            ));`
$DIR/src/worker/dump_db/gen_scripts.rs:156:19-158:15: `.push(format!(
                "Column {table_name}.{column_name} does not exist in the database."
            ))`
$DIR/src/worker/dump_db.rs:279:13-279:35: `.prefix("DumpTarball")`
$DIR/src/worker/dump_db.rs:280:13-280:23: `.tempdir()`
$DIR/src/worker/dump_db.rs:282:24-282:31: `.path()`
$DIR/src/worker/dump_db.rs:282:31-282:50: `.join("0000-00-00")`
$DIR/src/worker/dump_db.rs:284:9-284:37: `fs::create_dir(&p).unwrap();`
$DIR/src/worker/dump_db.rs:285:9-285:80: `fs::write(p.join("README.md"), "# crates.io Database Dump\n").unwrap();`
$DIR/src/worker/dump_db.rs:285:20-285:38: `.join("README.md")`
$DIR/src/worker/dump_db.rs:286:9-286:49: `fs::create_dir(p.join("data")).unwrap();`
$DIR/src/worker/dump_db.rs:286:25-286:38: `.join("data")`
$DIR/src/worker/dump_db.rs:287:9-287:67: `fs::write(p.join("data").join("crates.csv"), "").unwrap();`
$DIR/src/worker/dump_db.rs:287:20-287:33: `.join("data")`
$DIR/src/worker/dump_db.rs:287:33-287:52: `.join("crates.csv")`
$DIR/src/worker/dump_db.rs:288:9-288:73: `fs::write(p.join("data").join("crate_owners.csv"), "").unwrap();`
$DIR/src/worker/dump_db.rs:288:20-288:33: `.join("data")`
$DIR/src/worker/dump_db.rs:288:33-288:58: `.join("crate_owners.csv")`
$DIR/src/worker/dump_db.rs:289:9-289:66: `fs::write(p.join("data").join("users.csv"), "").unwrap();`
$DIR/src/worker/dump_db.rs:289:20-289:33: `.join("data")`
$DIR/src/worker/dump_db.rs:289:33-289:51: `.join("users.csv")`
$DIR/src/worker/dump_db.rs:295:30-295:40: `.entries()`
$DIR/src/worker/dump_db.rs:295:49-295:61: `.enumerate()`
$DIR/src/worker/update_downloads.rs:127:9-130:23: `insert_into(version_downloads::table)
            .values(version_downloads::version_id.eq(version.id))
            .execute(conn)
            .unwrap();`
$DIR/src/worker/update_downloads.rs:128:13-128:66: `.values(version_downloads::version_id.eq(version.id))`
$DIR/src/worker/update_downloads.rs:128:50-128:65: `.eq(version.id)`
$DIR/src/worker/update_downloads.rs:129:13-129:27: `.execute(conn)`
$DIR/src/worker/update_downloads.rs:131:9-138:23: `insert_into(version_downloads::table)
            .values((
                version_downloads::version_id.eq(version.id),
                version_downloads::date.eq(date(now - 1.day())),
                version_downloads::processed.eq(true),
            ))
            .execute(conn)
            .unwrap();`
$DIR/src/worker/update_downloads.rs:132:13-136:15: `.values((
                version_downloads::version_id.eq(version.id),
                version_downloads::date.eq(date(now - 1.day())),
                version_downloads::processed.eq(true),
            ))`
$DIR/src/worker/update_downloads.rs:133:46-133:61: `.eq(version.id)`
$DIR/src/worker/update_downloads.rs:134:40-134:64: `.eq(date(now - 1.day()))`
$DIR/src/worker/update_downloads.rs:134:56-134:62: `.day()`
$DIR/src/worker/update_downloads.rs:135:45-135:54: `.eq(true)`
$DIR/src/worker/update_downloads.rs:137:13-137:27: `.execute(conn)`
$DIR/src/worker/update_downloads.rs:140:9-140:38: `super::update(conn).unwrap();`
$DIR/src/worker/update_downloads.rs:142:13-142:30: `.find(version.id)`
$DIR/src/worker/update_downloads.rs:143:13-143:41: `.select(versions::downloads)`
$DIR/src/worker/update_downloads.rs:144:13-144:25: `.first(conn)`
$DIR/src/worker/update_downloads.rs:147:13-147:28: `.find(krate.id)`
$DIR/src/worker/update_downloads.rs:148:13-148:39: `.select(crates::downloads)`
$DIR/src/worker/update_downloads.rs:149:13-149:25: `.first(conn)`
$DIR/src/worker/update_downloads.rs:151:9-151:38: `super::update(conn).unwrap();`
$DIR/src/worker/update_downloads.rs:153:13-153:30: `.find(version.id)`
$DIR/src/worker/update_downloads.rs:154:13-154:41: `.select(versions::downloads)`
$DIR/src/worker/update_downloads.rs:155:13-155:25: `.first(conn)`
$DIR/src/worker/update_downloads.rs:166:9-175:23: `insert_into(version_downloads::table)
            .values((
                version_downloads::version_id.eq(version.id),
                version_downloads::downloads.eq(2),
                version_downloads::counted.eq(2),
                version_downloads::date.eq(date(now - 2.days())),
                version_downloads::processed.eq(false),
            ))
            .execute(conn)
            .unwrap();`
$DIR/src/worker/update_downloads.rs:167:13-173:15: `.values((
                version_downloads::version_id.eq(version.id),
                version_downloads::downloads.eq(2),
                version_downloads::counted.eq(2),
                version_downloads::date.eq(date(now - 2.days())),
                version_downloads::processed.eq(false),
            ))`
$DIR/src/worker/update_downloads.rs:168:46-168:61: `.eq(version.id)`
$DIR/src/worker/update_downloads.rs:169:45-169:51: `.eq(2)`
$DIR/src/worker/update_downloads.rs:170:43-170:49: `.eq(2)`
$DIR/src/worker/update_downloads.rs:171:40-171:65: `.eq(date(now - 2.days()))`
$DIR/src/worker/update_downloads.rs:171:56-171:63: `.days()`
$DIR/src/worker/update_downloads.rs:172:45-172:55: `.eq(false)`
$DIR/src/worker/update_downloads.rs:174:13-174:27: `.execute(conn)`
$DIR/src/worker/update_downloads.rs:176:9-176:38: `super::update(conn).unwrap();`
$DIR/src/worker/update_downloads.rs:178:13-178:66: `.filter(version_downloads::version_id.eq(version.id))`
$DIR/src/worker/update_downloads.rs:178:50-178:65: `.eq(version.id)`
$DIR/src/worker/update_downloads.rs:179:13-179:50: `.select(version_downloads::processed)`
$DIR/src/worker/update_downloads.rs:180:13-180:25: `.first(conn)`
$DIR/src/worker/update_downloads.rs:190:9-199:23: `insert_into(version_downloads::table)
            .values((
                version_downloads::version_id.eq(version.id),
                version_downloads::downloads.eq(2),
                version_downloads::counted.eq(2),
                version_downloads::date.eq(date(now)),
                version_downloads::processed.eq(false),
            ))
            .execute(conn)
            .unwrap();`
$DIR/src/worker/update_downloads.rs:191:13-197:15: `.values((
                version_downloads::version_id.eq(version.id),
                version_downloads::downloads.eq(2),
                version_downloads::counted.eq(2),
                version_downloads::date.eq(date(now)),
                version_downloads::processed.eq(false),
            ))`
$DIR/src/worker/update_downloads.rs:192:46-192:61: `.eq(version.id)`
$DIR/src/worker/update_downloads.rs:193:45-193:51: `.eq(2)`
$DIR/src/worker/update_downloads.rs:194:43-194:49: `.eq(2)`
$DIR/src/worker/update_downloads.rs:195:40-195:54: `.eq(date(now))`
$DIR/src/worker/update_downloads.rs:196:45-196:55: `.eq(false)`
$DIR/src/worker/update_downloads.rs:198:13-198:27: `.execute(conn)`
$DIR/src/worker/update_downloads.rs:200:9-200:38: `super::update(conn).unwrap();`
$DIR/src/worker/update_downloads.rs:202:13-202:66: `.filter(version_downloads::version_id.eq(version.id))`
$DIR/src/worker/update_downloads.rs:202:50-202:65: `.eq(version.id)`
$DIR/src/worker/update_downloads.rs:203:13-203:50: `.select(version_downloads::processed)`
$DIR/src/worker/update_downloads.rs:204:13-204:25: `.first(conn)`
$DIR/src/worker/update_downloads.rs:216:9-219:23: `update(versions::table)
            .set(versions::updated_at.eq(now - 2.hours()))
            .execute(conn)
            .unwrap();`
$DIR/src/worker/update_downloads.rs:217:13-217:59: `.set(versions::updated_at.eq(now - 2.hours()))`
$DIR/src/worker/update_downloads.rs:217:38-217:58: `.eq(now - 2.hours())`
$DIR/src/worker/update_downloads.rs:217:49-217:57: `.hours()`
$DIR/src/worker/update_downloads.rs:218:13-218:27: `.execute(conn)`
$DIR/src/worker/update_downloads.rs:220:9-223:23: `update(crates::table)
            .set(crates::updated_at.eq(now - 2.hours()))
            .execute(conn)
            .unwrap();`
$DIR/src/worker/update_downloads.rs:221:13-221:57: `.set(crates::updated_at.eq(now - 2.hours()))`
$DIR/src/worker/update_downloads.rs:221:36-221:56: `.eq(now - 2.hours())`
$DIR/src/worker/update_downloads.rs:221:47-221:55: `.hours()`
$DIR/src/worker/update_downloads.rs:222:13-222:27: `.execute(conn)`
$DIR/src/worker/update_downloads.rs:224:9-233:23: `insert_into(version_downloads::table)
            .values((
                version_downloads::version_id.eq(version.id),
                version_downloads::downloads.eq(2),
                version_downloads::counted.eq(1),
                version_downloads::date.eq(date(now)),
                version_downloads::processed.eq(false),
            ))
            .execute(conn)
            .unwrap();`
$DIR/src/worker/update_downloads.rs:225:13-231:15: `.values((
                version_downloads::version_id.eq(version.id),
                version_downloads::downloads.eq(2),
                version_downloads::counted.eq(1),
                version_downloads::date.eq(date(now)),
                version_downloads::processed.eq(false),
            ))`
$DIR/src/worker/update_downloads.rs:226:46-226:61: `.eq(version.id)`
$DIR/src/worker/update_downloads.rs:227:45-227:51: `.eq(2)`
$DIR/src/worker/update_downloads.rs:228:43-228:49: `.eq(1)`
$DIR/src/worker/update_downloads.rs:229:40-229:54: `.eq(date(now))`
$DIR/src/worker/update_downloads.rs:230:45-230:55: `.eq(false)`
$DIR/src/worker/update_downloads.rs:232:13-232:27: `.execute(conn)`
$DIR/src/worker/update_downloads.rs:234:9-240:23: `insert_into(version_downloads::table)
            .values((
                version_downloads::version_id.eq(version.id),
                version_downloads::date.eq(date(now - 1.day())),
            ))
            .execute(conn)
            .unwrap();`
$DIR/src/worker/update_downloads.rs:235:13-238:15: `.values((
                version_downloads::version_id.eq(version.id),
                version_downloads::date.eq(date(now - 1.day())),
            ))`
$DIR/src/worker/update_downloads.rs:236:46-236:61: `.eq(version.id)`
$DIR/src/worker/update_downloads.rs:237:40-237:64: `.eq(date(now - 1.day()))`
$DIR/src/worker/update_downloads.rs:237:56-237:62: `.day()`
$DIR/src/worker/update_downloads.rs:239:13-239:27: `.execute(conn)`
$DIR/src/worker/update_downloads.rs:242:54-242:71: `.find(version.id)`
$DIR/src/worker/update_downloads.rs:242:71-242:83: `.first(conn)`
$DIR/src/worker/update_downloads.rs:244:13-244:45: `.filter(crates::id.eq(krate.id))`
$DIR/src/worker/update_downloads.rs:244:31-244:44: `.eq(krate.id)`
$DIR/src/worker/update_downloads.rs:245:13-245:25: `.first(conn)`
$DIR/src/worker/update_downloads.rs:247:9-247:38: `super::update(conn).unwrap();`
$DIR/src/worker/update_downloads.rs:248:48-248:65: `.find(version.id)`
$DIR/src/worker/update_downloads.rs:248:65-248:77: `.first(conn)`
$DIR/src/worker/update_downloads.rs:252:13-252:45: `.filter(crates::id.eq(krate.id))`
$DIR/src/worker/update_downloads.rs:252:31-252:44: `.eq(krate.id)`
$DIR/src/worker/update_downloads.rs:253:13-253:25: `.first(conn)`
$DIR/src/worker/update_downloads.rs:257:9-257:38: `super::update(conn).unwrap();`
$DIR/src/worker/update_downloads.rs:258:48-258:65: `.find(version.id)`
$DIR/src/worker/update_downloads.rs:258:65-258:77: `.first(conn)`
$DIR/src/worker/update_downloads.rs:270:9-273:23: `update(versions::table)
            .set(versions::updated_at.eq(now - 2.days()))
            .execute(conn)
            .unwrap();`
$DIR/src/worker/update_downloads.rs:271:13-271:58: `.set(versions::updated_at.eq(now - 2.days()))`
$DIR/src/worker/update_downloads.rs:271:38-271:57: `.eq(now - 2.days())`
$DIR/src/worker/update_downloads.rs:271:49-271:56: `.days()`
$DIR/src/worker/update_downloads.rs:272:13-272:27: `.execute(conn)`
$DIR/src/worker/update_downloads.rs:274:9-277:23: `update(crates::table)
            .set(crates::updated_at.eq(now - 2.days()))
            .execute(conn)
            .unwrap();`
$DIR/src/worker/update_downloads.rs:275:13-275:56: `.set(crates::updated_at.eq(now - 2.days()))`
$DIR/src/worker/update_downloads.rs:275:36-275:55: `.eq(now - 2.days())`
$DIR/src/worker/update_downloads.rs:275:47-275:54: `.days()`
$DIR/src/worker/update_downloads.rs:276:13-276:27: `.execute(conn)`
$DIR/src/worker/update_downloads.rs:278:9-287:23: `insert_into(version_downloads::table)
            .values((
                version_downloads::version_id.eq(version.id),
                version_downloads::downloads.eq(2),
                version_downloads::counted.eq(2),
                version_downloads::date.eq(date(now - 2.days())),
                version_downloads::processed.eq(false),
            ))
            .execute(conn)
            .unwrap();`
$DIR/src/worker/update_downloads.rs:279:13-285:15: `.values((
                version_downloads::version_id.eq(version.id),
                version_downloads::downloads.eq(2),
                version_downloads::counted.eq(2),
                version_downloads::date.eq(date(now - 2.days())),
                version_downloads::processed.eq(false),
            ))`
$DIR/src/worker/update_downloads.rs:280:46-280:61: `.eq(version.id)`
$DIR/src/worker/update_downloads.rs:281:45-281:51: `.eq(2)`
$DIR/src/worker/update_downloads.rs:282:43-282:49: `.eq(2)`
$DIR/src/worker/update_downloads.rs:283:40-283:65: `.eq(date(now - 2.days()))`
$DIR/src/worker/update_downloads.rs:283:56-283:63: `.days()`
$DIR/src/worker/update_downloads.rs:284:45-284:55: `.eq(false)`
$DIR/src/worker/update_downloads.rs:286:13-286:27: `.execute(conn)`
$DIR/src/worker/update_downloads.rs:289:9-289:38: `super::update(conn).unwrap();`
$DIR/src/worker/update_downloads.rs:291:13-291:61: `.select(versions::updated_at.ne(now - 2.days()))`
$DIR/src/worker/update_downloads.rs:291:41-291:60: `.ne(now - 2.days())`
$DIR/src/worker/update_downloads.rs:291:52-291:59: `.days()`
$DIR/src/worker/update_downloads.rs:292:13-292:30: `.get_result(conn)`
$DIR/src/worker/update_downloads.rs:294:13-294:59: `.select(crates::updated_at.ne(now - 2.days()))`
$DIR/src/worker/update_downloads.rs:294:39-294:58: `.ne(now - 2.days())`
$DIR/src/worker/update_downloads.rs:294:50-294:57: `.days()`
$DIR/src/worker/update_downloads.rs:295:13-295:30: `.get_result(conn)`
