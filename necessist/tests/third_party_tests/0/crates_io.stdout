Warning: Failed to determine module path: Failed to determine relative path of test file "$DIR/crates_io_index/ser.rs"

This may indicate a bug in Necessist. Consider opening an issue at: https://github.com/trailofbits/necessist/issues

Silence this warning with: --allow module-path-unknown
Warning: Failed to determine module path: Failed to determine relative path of test file "$DIR/crates_io_index/ser.rs"
Warning: Failed to determine module path: Failed to determine relative path of test file "$DIR/crates_io_index/ser.rs"
Warning: Failed to determine module path: Failed to determine relative path of test file "$DIR/crates_io_index/ser.rs"
Warning: Failed to determine module path: Failed to determine relative path of test file "$DIR/crates_io_index/ser.rs"
Warning: Failed to determine module path: Failed to determine relative path of test file "$DIR/crates_io_markdown/lib.rs"
Warning: Failed to determine module path: Failed to determine relative path of test file "$DIR/crates_io_markdown/lib.rs"
Warning: Failed to determine module path: Failed to determine relative path of test file "$DIR/crates_io_markdown/lib.rs"
Warning: Failed to determine module path: Failed to determine relative path of test file "$DIR/crates_io_markdown/lib.rs"
Warning: Failed to determine module path: Failed to determine relative path of test file "$DIR/crates_io_markdown/lib.rs"
Warning: Failed to determine module path: Failed to determine relative path of test file "$DIR/crates_io_markdown/lib.rs"
$DIR/crates_io_tarball/src/lib.rs:152:13-155:14: `.add_file(
                "foo-0.0.1/Cargo.toml",
                b"[package]\nname = \"foo\"\nversion = \"0.0.1\"\n",
            )`
$DIR/crates_io_tarball/src/lib.rs:156:13-156:21: `.build()`
$DIR/crates_io_tarball/src/lib.rs:161:9-161:45: `assert_none!(tarball_info.vcs_info);`
$DIR/crates_io_tarball/src/lib.rs:169:13-172:14: `.add_file(
                "foo-0.0.1/Cargo.toml",
                b"[package]\nname = \"foo\"\nversion = \"0.0.1\"\n",
            )`
$DIR/crates_io_tarball/src/lib.rs:173:13-173:84: `.add_file("foo-0.0.1/.cargo_vcs_info.json", br#"{"unknown": "field"}"#)`
$DIR/crates_io_tarball/src/lib.rs:174:13-174:21: `.build()`
$DIR/crates_io_tarball/src/lib.rs:186:13-189:14: `.add_file(
                "foo-0.0.1/Cargo.toml",
                b"[package]\nname = \"foo\"\nversion = \"0.0.1\"\n",
            )`
$DIR/crates_io_tarball/src/lib.rs:190:13-193:14: `.add_file(
                "foo-0.0.1/.cargo_vcs_info.json",
                br#"{"path_in_vcs": "path/in/vcs"}"#,
            )`
$DIR/crates_io_tarball/src/lib.rs:194:13-194:21: `.build()`
$DIR/crates_io_tarball/src/lib.rs:206:13-216:14: `.add_file(
                "foo-0.0.1/Cargo.toml",
                br#"
[package]
name = "foo"
version = "0.0.1"
rust-version = "1.59"
readme = "README.md"
repository = "https://github.com/foo/bar"
"#,
            )`
$DIR/crates_io_tarball/src/lib.rs:217:13-217:21: `.build()`
$DIR/crates_io_tarball/src/lib.rs:231:13-239:14: `.add_file(
                "foo-0.0.1/Cargo.toml",
                br#"
                [project]
                name = "foo"
                version = "0.0.1"
                rust-version = "1.23"
                "#,
            )`
$DIR/crates_io_tarball/src/lib.rs:240:13-240:21: `.build()`
$DIR/crates_io_tarball/src/lib.rs:252:13-259:14: `.add_file(
                "foo-0.0.1/Cargo.toml",
                br#"
                [package]
                name = "foo"
                version = "0.0.1"
                "#,
            )`
$DIR/crates_io_tarball/src/lib.rs:260:13-260:21: `.build()`
$DIR/crates_io_tarball/src/lib.rs:272:13-280:14: `.add_file(
                "foo-0.0.1/Cargo.toml",
                br#"
                [package]
                name = "foo"
                version = "0.0.1"
                readme = false
                "#,
            )`
$DIR/crates_io_tarball/src/lib.rs:281:13-281:21: `.build()`
$DIR/crates_io_tarball/src/lib.rs:293:13-301:14: `.add_file(
                "foo-0.0.1/cargo.toml",
                br#"
[package]
name = "foo"
version = "0.0.1"
repository = "https://github.com/foo/bar"
"#,
            )`
$DIR/crates_io_tarball/src/lib.rs:302:13-302:21: `.build()`
$DIR/crates_io_tarball/src/lib.rs:315:17-323:18: `.add_file(
                    &format!("foo-0.0.1/{file}"),
                    br#"
[package]
name = "foo"
version = "0.0.1"
repository = "https://github.com/foo/bar"
"#,
                )`
$DIR/crates_io_tarball/src/lib.rs:324:17-324:25: `.build()`
$DIR/crates_io_tarball/src/lib.rs:346:17-356:19: `.fold(TarballBuilder::new(), |builder, file| {
                    builder.add_file(
                        &format!("foo-0.0.1/{file}"),
                        br#"
[package]
name = "foo"
version = "0.0.1"
repository = "https://github.com/foo/bar"
"#,
                    )
                })`
$DIR/crates_io_tarball/src/lib.rs:347:21-355:22: `builder.add_file(
                        &format!("foo-0.0.1/{file}"),
                        br#"
[package]
name = "foo"
version = "0.0.1"
repository = "https://github.com/foo/bar"
"#,
                    )`
$DIR/crates_io_tarball/src/lib.rs:347:28-355:22: `.add_file(
                        &format!("foo-0.0.1/{file}"),
                        br#"
[package]
name = "foo"
version = "0.0.1"
repository = "https://github.com/foo/bar"
"#,
                    )`
$DIR/crates_io_tarball/src/lib.rs:357:17-357:25: `.build()`
$DIR/crates_io_tarball/src/lib.rs:364:21-364:33: `.into_iter()`
$DIR/crates_io_tarball/src/lib.rs:365:21-365:71: `.map(|file| PathBuf::from("foo-0.0.1").join(file))`
$DIR/crates_io_tarball/src/lib.rs:365:59-365:70: `.join(file)`
$DIR/crates_io_tarball/src/lib.rs:366:21-366:31: `.collect()`
$DIR/crates_io_tarball/src/lib.rs:367:17-367:29: `want.sort();`
$DIR/crates_io_tarball/src/lib.rs:367:21-367:28: `.sort()`
$DIR/src/admin/render_readmes.rs:249:13-257:14: `.add_file(
                "foo-0.0.1/Cargo.toml",
                br#"
[package]
name = "foo"
version = "0.0.1"
readme = "README.md"
"#,
            )`
$DIR/src/admin/render_readmes.rs:258:13-258:56: `.add_file("foo-0.0.1/README.md", b"readme")`
$DIR/src/admin/render_readmes.rs:259:13-259:30: `.build_unzipped()`
$DIR/src/admin/render_readmes.rs:269:13-274:14: `.add_file(
                "foo-0.0.1/Cargo.toml",
                br#"
[package]
"#,
            )`
$DIR/src/admin/render_readmes.rs:275:13-275:30: `.build_unzipped()`
$DIR/src/admin/render_readmes.rs:286:13-293:14: `.add_file(
                "foo-0.0.1/Cargo.toml",
                br#"
[package]
name = "foo"
version = "0.0.1"
"#,
            )`
$DIR/src/admin/render_readmes.rs:294:13-294:56: `.add_file("foo-0.0.1/README.md", b"readme")`
$DIR/src/admin/render_readmes.rs:295:13-295:30: `.build_unzipped()`
$DIR/src/admin/render_readmes.rs:305:13-314:14: `.add_file(
                "foo-0.0.1/Cargo.toml",
                br#"
[package]
name = "foo"
version = "0.0.1"
readme = "README.md"
repository = "https://github.com/foo/foo"
"#,
            )`
$DIR/src/admin/render_readmes.rs:315:13-315:75: `.add_file("foo-0.0.1/README.md", b"readme [link](./Other.md)")`
$DIR/src/admin/render_readmes.rs:316:13-316:30: `.build_unzipped()`
$DIR/src/admin/render_readmes.rs:326:13-335:14: `.add_file(
                "foo-0.0.1/Cargo.toml",
                br#"
[package]
name = "foo"
version = "0.0.1"
readme = "docs/README.md"
repository = "https://github.com/foo/foo"
"#,
            )`
$DIR/src/admin/render_readmes.rs:336:13-339:14: `.add_file(
                "foo-0.0.1/docs/README.md",
                b"docs/readme [link](./Other.md)",
            )`
$DIR/src/admin/render_readmes.rs:340:13-340:30: `.build_unzipped()`
$DIR/src/auth.rs:278:13-278:60: `.with_endpoint_scope(EndpointScope::PublishNew)`
$DIR/src/auth.rs:279:13-279:40: `.for_crate("tokio-console")`
$DIR/src/auth.rs:297:13-297:63: `.with_endpoint_scope(EndpointScope::PublishUpdate)`
$DIR/src/auth.rs:298:13-298:40: `.for_crate("tokio-console")`
$DIR/src/auth.rs:316:13-316:54: `.with_endpoint_scope(EndpointScope::Yank)`
$DIR/src/auth.rs:317:13-317:40: `.for_crate("tokio-console")`
$DIR/src/auth.rs:335:13-335:62: `.with_endpoint_scope(EndpointScope::ChangeOwners)`
$DIR/src/auth.rs:336:13-336:40: `.for_crate("tokio-console")`
$DIR/src/config/server.rs:295:62-295:82: `.collect::<Vec<_>>()`
$DIR/src/config/server.rs:298:62-298:82: `.collect::<Vec<_>>()`
$DIR/src/config/server.rs:306:5-309:7: `assert_ok_eq!(
        parse_cidr_block("127.0.0.1/24"),
        "127.0.0.1/24".parse::<IpNetwork>().unwrap()
    );`
$DIR/src/config/server.rs:330:5-335:7: `assert_ok_eq!(
        parse_cidr_block("2002::1234:abcd:ffff:c0a8:101/64"),
        "2002::1234:abcd:ffff:c0a8:101/64"
            .parse::<IpNetwork>()
            .unwrap()
    );`
$DIR/src/controllers/helpers/pagination.rs:311:54-311:72: `.gather(&mock(""))`
$DIR/src/controllers/helpers/pagination.rs:321:9-321:73: `assert_error("page=", "cannot parse integer from empty string");`
$DIR/src/controllers/helpers/pagination.rs:322:9-322:76: `assert_error("page=not_a_number", "invalid digit found in string");`
$DIR/src/controllers/helpers/pagination.rs:323:9-323:67: `assert_error("page=1.0", "invalid digit found in string");`
$DIR/src/controllers/helpers/pagination.rs:324:9-324:82: `assert_error("page=0", "page indexing starts from 1, page 0 is invalid");`
$DIR/src/controllers/helpers/pagination.rs:327:13-327:37: `.gather(&mock("page=5"))`
$DIR/src/controllers/helpers/pagination.rs:337:9-337:77: `assert_error("per_page=", "cannot parse integer from empty string");`
$DIR/src/controllers/helpers/pagination.rs:338:9-338:80: `assert_error("per_page=not_a_number", "invalid digit found in string");`
$DIR/src/controllers/helpers/pagination.rs:339:9-339:71: `assert_error("per_page=1.0", "invalid digit found in string");`
$DIR/src/controllers/helpers/pagination.rs:340:9-340:76: `assert_error("per_page=101", "cannot request more than 100 items");`
$DIR/src/controllers/helpers/pagination.rs:343:13-343:41: `.gather(&mock("per_page=5"))`
$DIR/src/controllers/helpers/pagination.rs:350:9-354:11: `assert_pagination_error(
            PaginationOptions::builder(),
            "seek=OTg",
            "?seek= is not supported for this request",
        );`
$DIR/src/controllers/helpers/pagination.rs:357:13-357:31: `.enable_seek(true)`
$DIR/src/controllers/helpers/pagination.rs:358:13-358:39: `.gather(&mock("seek=OTg"))`
$DIR/src/controllers/helpers/pagination.rs:362:13-362:52: `assert_ok_eq!(raw.decode::<i32>(), 98);`
$DIR/src/controllers/helpers/pagination.rs:373:9-377:11: `assert_pagination_error(
            PaginationOptions::builder(),
            "page=1&seek=OTg",
            "providing both ?page= and ?seek= is unsupported",
        );`
$DIR/src/controllers/helpers/pagination.rs:379:41-379:59: `.enable_seek(true)`
$DIR/src/controllers/helpers/pagination.rs:388:41-388:61: `.enable_pages(false)`
$DIR/src/controllers/helpers/pagination.rs:397:9-397:47: `assert_ok_eq!(encode_seek(98), "OTg");`
$DIR/src/controllers/helpers/pagination.rs:398:9-398:67: `assert_ok_eq!(encode_seek(("foo", 42)), "WyJmb28iLDQyXQ");`
$DIR/src/controllers/helpers/pagination.rs:401:9-401:74: `assert_ok_eq!(decode_seek::<i32>(&encode_seek(98).unwrap()), 98);`
$DIR/src/controllers/user/session.rs:163:83-163:90: `.into()`
$DIR/src/controllers/user/session.rs:164:33-164:40: `.into()`
$DIR/src/controllers/user/session.rs:165:33-165:40: `.into()`
$DIR/src/downloads_counter.rs:259:23-259:41: `.new_version(conn)`
$DIR/src/downloads_counter.rs:260:23-260:41: `.new_version(conn)`
$DIR/src/downloads_counter.rs:261:23-261:41: `.new_version(conn)`
$DIR/src/downloads_counter.rs:265:13-265:35: `counter.increment(v1);`
$DIR/src/downloads_counter.rs:265:20-265:34: `.increment(v1)`
$DIR/src/downloads_counter.rs:268:13-268:35: `counter.increment(v2);`
$DIR/src/downloads_counter.rs:268:20-268:34: `.increment(v2)`
$DIR/src/downloads_counter.rs:274:13-274:48: `.persist_all_shards_with_conn(conn)`
$DIR/src/downloads_counter.rs:289:9-289:52: `state.assert_downloads_count(conn, v1, 10);`
$DIR/src/downloads_counter.rs:289:14-289:51: `.assert_downloads_count(conn, v1, 10)`
$DIR/src/downloads_counter.rs:290:9-290:51: `state.assert_downloads_count(conn, v2, 5);`
$DIR/src/downloads_counter.rs:290:14-290:50: `.assert_downloads_count(conn, v2, 5)`
$DIR/src/downloads_counter.rs:300:23-300:41: `.new_version(conn)`
$DIR/src/downloads_counter.rs:301:31-301:56: `.inner.determine_map(&v1)`
$DIR/src/downloads_counter.rs:304:27-304:45: `.new_version(conn)`
$DIR/src/downloads_counter.rs:305:22-305:47: `.inner.determine_map(&v2)`
$DIR/src/downloads_counter.rs:306:13-306:42: `v2 = state.new_version(conn);`
$DIR/src/downloads_counter.rs:306:23-306:41: `.new_version(conn)`
$DIR/src/downloads_counter.rs:308:31-308:56: `.inner.determine_map(&v2)`
$DIR/src/downloads_counter.rs:312:13-312:35: `counter.increment(v1);`
$DIR/src/downloads_counter.rs:312:20-312:34: `.increment(v1)`
$DIR/src/downloads_counter.rs:315:13-315:35: `counter.increment(v2);`
$DIR/src/downloads_counter.rs:315:20-315:34: `.increment(v2)`
$DIR/src/downloads_counter.rs:321:32-321:47: `.shards_count()`
$DIR/src/downloads_counter.rs:323:17-323:52: `.persist_next_shard_with_conn(conn)`
$DIR/src/downloads_counter.rs:327:17-327:31: `pending -= 10;`
$DIR/src/downloads_counter.rs:337:17-337:60: `state.assert_downloads_count(conn, v1, 10);`
$DIR/src/downloads_counter.rs:337:22-337:59: `.assert_downloads_count(conn, v1, 10)`
$DIR/src/downloads_counter.rs:339:17-339:30: `pending -= 5;`
$DIR/src/downloads_counter.rs:365:9-365:52: `state.assert_downloads_count(conn, v1, 10);`
$DIR/src/downloads_counter.rs:365:14-365:51: `.assert_downloads_count(conn, v1, 10)`
$DIR/src/downloads_counter.rs:372:13-372:61: `map.determine_map(&v1) == map.determine_map(&v2)`
$DIR/src/downloads_counter.rs:372:16-372:35: `.determine_map(&v1)`
$DIR/src/downloads_counter.rs:372:42-372:61: `.determine_map(&v2)`
$DIR/src/downloads_counter.rs:379:13-379:61: `map.determine_map(&v1) != map.determine_map(&v2)`
$DIR/src/downloads_counter.rs:379:16-379:35: `.determine_map(&v1)`
$DIR/src/downloads_counter.rs:379:42-379:61: `.determine_map(&v2)`
$DIR/src/licenses.rs:20:9-20:47: `assert_ok!(parse_license_expr("MIT"));`
$DIR/src/licenses.rs:21:9-21:61: `assert_ok!(parse_license_expr("MIT OR Apache-2.0"));`
$DIR/src/licenses.rs:22:9-22:58: `assert_ok!(parse_license_expr("MIT/Apache-2.0"));`
$DIR/src/licenses.rs:23:9-23:62: `assert_ok!(parse_license_expr("MIT AND Apache-2.0"));`
$DIR/src/licenses.rs:24:9-24:71: `assert_ok!(parse_license_expr("MIT OR (Apache-2.0 AND MIT)"));`
$DIR/src/licenses.rs:25:9-25:52: `assert_ok!(parse_license_expr("GPL-3.0+"));`
$DIR/src/metrics/log_encoder.rs:226:9-226:55: `registry.register(Box::new(counter.clone()))?;`
$DIR/src/metrics/log_encoder.rs:226:17-226:53: `.register(Box::new(counter.clone()))`
$DIR/src/metrics/log_encoder.rs:240:9-240:28: `counter.inc_by(42);`
$DIR/src/metrics/log_encoder.rs:240:16-240:27: `.inc_by(42)`
$DIR/src/metrics/log_encoder.rs:260:9-260:53: `registry.register(Box::new(gauge.clone()))?;`
$DIR/src/metrics/log_encoder.rs:260:17-260:51: `.register(Box::new(gauge.clone()))`
$DIR/src/metrics/log_encoder.rs:274:9-274:23: `gauge.set(42);`
$DIR/src/metrics/log_encoder.rs:274:14-274:22: `.set(42)`
$DIR/src/metrics/log_encoder.rs:297:9-297:57: `registry.register(Box::new(histogram.clone()))?;`
$DIR/src/metrics/log_encoder.rs:297:17-297:55: `.register(Box::new(histogram.clone()))`
$DIR/src/metrics/log_encoder.rs:301:13-301:38: `histogram.observe(value);`
$DIR/src/metrics/log_encoder.rs:301:22-301:37: `.observe(value)`
$DIR/src/metrics/log_encoder.rs:302:13-302:28: `value += 0.001;`
$DIR/src/metrics/log_encoder.rs:334:9-334:57: `registry.register(Box::new(gauge_vec.clone()))?;`
$DIR/src/metrics/log_encoder.rs:334:17-334:55: `.register(Box::new(gauge_vec.clone()))`
$DIR/src/metrics/log_encoder.rs:336:9-336:60: `gauge_vec.with_label_values(&["foo", "1"]).set(42);`
$DIR/src/metrics/log_encoder.rs:336:18-336:51: `.with_label_values(&["foo", "1"])`
$DIR/src/metrics/log_encoder.rs:336:51-336:59: `.set(42)`
$DIR/src/metrics/log_encoder.rs:337:9-337:60: `gauge_vec.with_label_values(&["bar", "2"]).set(98);`
$DIR/src/metrics/log_encoder.rs:337:18-337:51: `.with_label_values(&["bar", "2"])`
$DIR/src/metrics/log_encoder.rs:337:51-337:59: `.set(98)`
$DIR/src/metrics/log_encoder.rs:374:9-374:45: `registry.register(Box::new(gauge))?;`
$DIR/src/metrics/log_encoder.rs:374:17-374:43: `.register(Box::new(gauge))`
$DIR/src/metrics/log_encoder.rs:377:9-377:68: `LogEncoder::new().encode(&registry.gather(), &mut output)?;`
$DIR/src/metrics/log_encoder.rs:377:26-377:66: `.encode(&registry.gather(), &mut output)`
$DIR/src/metrics/log_encoder.rs:377:43-377:52: `.gather()`
$DIR/src/metrics/log_encoder.rs:389:28-389:48: `.collect::<Vec<_>>()`
$DIR/src/metrics/log_encoder.rs:404:29-404:49: `.collect::<Vec<_>>()`
$DIR/src/middleware/normalize_path.rs:73:48-73:57: `.body(())`
$DIR/src/middleware/normalize_path.rs:74:9-74:40: `normalize_path_inner(&mut req);`
$DIR/src/middleware/normalize_path.rs:81:48-81:57: `.body(())`
$DIR/src/middleware/normalize_path.rs:82:9-82:40: `normalize_path_inner(&mut req);`
$DIR/src/middleware/normalize_path.rs:89:53-89:62: `.body(())`
$DIR/src/middleware/normalize_path.rs:90:9-90:40: `normalize_path_inner(&mut req);`
$DIR/src/models/category.rs:167:9-174:23: `insert_into(categories)
            .values(&vec![
                (category.eq("Cat 2"), slug.eq("cat2")),
                (category.eq("Cat 1"), slug.eq("cat1")),
                (category.eq("Cat 1::sub"), slug.eq("cat1::sub")),
            ])
            .execute(conn)
            .unwrap();`
$DIR/src/models/category.rs:168:13-172:15: `.values(&vec![
                (category.eq("Cat 2"), slug.eq("cat2")),
                (category.eq("Cat 1"), slug.eq("cat1")),
                (category.eq("Cat 1::sub"), slug.eq("cat1::sub")),
            ])`
$DIR/src/models/category.rs:173:13-173:27: `.execute(conn)`
$DIR/src/models/category.rs:178:13-178:25: `.into_iter()`
$DIR/src/models/category.rs:179:13-179:33: `.map(|c| c.category)`
$DIR/src/models/category.rs:180:13-180:33: `.collect::<Vec<_>>()`
$DIR/src/models/category.rs:189:9-196:23: `insert_into(categories)
            .values(&vec![
                (category.eq("Cat 1"), slug.eq("cat1"), crates_cnt.eq(0)),
                (category.eq("Cat 2"), slug.eq("cat2"), crates_cnt.eq(2)),
                (category.eq("Cat 3"), slug.eq("cat3"), crates_cnt.eq(1)),
            ])
            .execute(conn)
            .unwrap();`
$DIR/src/models/category.rs:190:13-194:15: `.values(&vec![
                (category.eq("Cat 1"), slug.eq("cat1"), crates_cnt.eq(0)),
                (category.eq("Cat 2"), slug.eq("cat2"), crates_cnt.eq(2)),
                (category.eq("Cat 3"), slug.eq("cat3"), crates_cnt.eq(1)),
            ])`
$DIR/src/models/category.rs:195:13-195:27: `.execute(conn)`
$DIR/src/models/category.rs:200:13-200:25: `.into_iter()`
$DIR/src/models/category.rs:201:13-201:33: `.map(|c| c.category)`
$DIR/src/models/category.rs:202:13-202:33: `.collect::<Vec<_>>()`
$DIR/src/models/category.rs:215:9-221:23: `insert_into(categories)
            .values(&vec![
                (category.eq("Cat 1"), slug.eq("cat1")),
                (category.eq("Cat 2"), slug.eq("cat2")),
            ])
            .execute(conn)
            .unwrap();`
$DIR/src/models/category.rs:216:13-219:15: `.values(&vec![
                (category.eq("Cat 1"), slug.eq("cat1")),
                (category.eq("Cat 2"), slug.eq("cat2")),
            ])`
$DIR/src/models/category.rs:220:13-220:27: `.execute(conn)`
$DIR/src/models/category.rs:225:13-225:25: `.into_iter()`
$DIR/src/models/category.rs:226:13-226:33: `.map(|c| c.category)`
$DIR/src/models/category.rs:227:13-227:33: `.collect::<Vec<_>>()`
$DIR/src/models/category.rs:233:13-233:25: `.into_iter()`
$DIR/src/models/category.rs:234:13-234:33: `.map(|c| c.category)`
$DIR/src/models/category.rs:235:13-235:33: `.collect::<Vec<_>>()`
$DIR/src/models/category.rs:244:9-266:23: `insert_into(categories)
            .values(&vec![
                (category.eq("Cat 1"), slug.eq("cat1"), crates_cnt.eq(1)),
                (
                    category.eq("Cat 1::sub"),
                    slug.eq("cat1::sub"),
                    crates_cnt.eq(2),
                ),
                (category.eq("Cat 2"), slug.eq("cat2"), crates_cnt.eq(3)),
                (
                    category.eq("Cat 2::Sub 1"),
                    slug.eq("cat2::sub1"),
                    crates_cnt.eq(4),
                ),
                (
                    category.eq("Cat 2::Sub 2"),
                    slug.eq("cat2::sub2"),
                    crates_cnt.eq(5),
                ),
                (category.eq("Cat 3"), slug.eq("cat3"), crates_cnt.eq(6)),
            ])
            .execute(conn)
            .unwrap();`
$DIR/src/models/category.rs:245:13-264:15: `.values(&vec![
                (category.eq("Cat 1"), slug.eq("cat1"), crates_cnt.eq(1)),
                (
                    category.eq("Cat 1::sub"),
                    slug.eq("cat1::sub"),
                    crates_cnt.eq(2),
                ),
                (category.eq("Cat 2"), slug.eq("cat2"), crates_cnt.eq(3)),
                (
                    category.eq("Cat 2::Sub 1"),
                    slug.eq("cat2::sub1"),
                    crates_cnt.eq(4),
                ),
                (
                    category.eq("Cat 2::Sub 2"),
                    slug.eq("cat2::sub2"),
                    crates_cnt.eq(5),
                ),
                (category.eq("Cat 3"), slug.eq("cat3"), crates_cnt.eq(6)),
            ])`
$DIR/src/models/category.rs:265:13-265:27: `.execute(conn)`
$DIR/src/models/category.rs:270:13-270:25: `.into_iter()`
$DIR/src/models/category.rs:271:13-271:49: `.map(|c| (c.category, c.crates_cnt))`
$DIR/src/models/category.rs:272:13-272:33: `.collect::<Vec<_>>()`
$DIR/src/models/category.rs:285:9-307:23: `insert_into(categories)
            .values(&vec![
                (category.eq("Cat 1"), slug.eq("cat1"), crates_cnt.eq(1)),
                (
                    category.eq("Cat 1::sub"),
                    slug.eq("cat1::sub"),
                    crates_cnt.eq(2),
                ),
                (category.eq("Cat 2"), slug.eq("cat2"), crates_cnt.eq(3)),
                (
                    category.eq("Cat 2::Sub 1"),
                    slug.eq("cat2::sub1"),
                    crates_cnt.eq(4),
                ),
                (
                    category.eq("Cat 2::Sub 2"),
                    slug.eq("cat2::sub2"),
                    crates_cnt.eq(5),
                ),
                (category.eq("Cat 3"), slug.eq("cat3"), crates_cnt.eq(6)),
            ])
            .execute(conn)
            .unwrap();`
$DIR/src/models/category.rs:286:13-305:15: `.values(&vec![
                (category.eq("Cat 1"), slug.eq("cat1"), crates_cnt.eq(1)),
                (
                    category.eq("Cat 1::sub"),
                    slug.eq("cat1::sub"),
                    crates_cnt.eq(2),
                ),
                (category.eq("Cat 2"), slug.eq("cat2"), crates_cnt.eq(3)),
                (
                    category.eq("Cat 2::Sub 1"),
                    slug.eq("cat2::sub1"),
                    crates_cnt.eq(4),
                ),
                (
                    category.eq("Cat 2::Sub 2"),
                    slug.eq("cat2::sub2"),
                    crates_cnt.eq(5),
                ),
                (category.eq("Cat 3"), slug.eq("cat3"), crates_cnt.eq(6)),
            ])`
$DIR/src/models/category.rs:306:13-306:27: `.execute(conn)`
$DIR/src/models/category.rs:311:13-311:25: `.into_iter()`
$DIR/src/models/category.rs:312:13-312:49: `.map(|c| (c.category, c.crates_cnt))`
$DIR/src/models/category.rs:313:13-313:33: `.collect::<Vec<_>>()`
$DIR/src/models/category.rs:319:13-319:25: `.into_iter()`
$DIR/src/models/category.rs:320:13-320:49: `.map(|c| (c.category, c.crates_cnt))`
$DIR/src/models/category.rs:321:13-321:33: `.collect::<Vec<_>>()`
$DIR/src/models/category.rs:330:9-362:23: `insert_into(categories)
            .values(&vec![
                (category.eq("Cat 1"), slug.eq("cat1"), crates_cnt.eq(1)),
                (
                    category.eq("Cat 1::sub1"),
                    slug.eq("cat1::sub1"),
                    crates_cnt.eq(2),
                ),
                (
                    category.eq("Cat 1::sub2"),
                    slug.eq("cat1::sub2"),
                    crates_cnt.eq(2),
                ),
                (
                    category.eq("Cat 1::sub1::subsub1"),
                    slug.eq("cat1::sub1::subsub1"),
                    crates_cnt.eq(2),
                ),
                (category.eq("Cat 2"), slug.eq("cat2"), crates_cnt.eq(3)),
                (
                    category.eq("Cat 2::Sub 1"),
                    slug.eq("cat2::sub1"),
                    crates_cnt.eq(4),
                ),
                (
                    category.eq("Cat 2::Sub 2"),
                    slug.eq("cat2::sub2"),
                    crates_cnt.eq(5),
                ),
                (category.eq("Cat 3"), slug.eq("cat3"), crates_cnt.eq(200)),
            ])
            .execute(conn)
            .unwrap();`
$DIR/src/models/category.rs:331:13-360:15: `.values(&vec![
                (category.eq("Cat 1"), slug.eq("cat1"), crates_cnt.eq(1)),
                (
                    category.eq("Cat 1::sub1"),
                    slug.eq("cat1::sub1"),
                    crates_cnt.eq(2),
                ),
                (
                    category.eq("Cat 1::sub2"),
                    slug.eq("cat1::sub2"),
                    crates_cnt.eq(2),
                ),
                (
                    category.eq("Cat 1::sub1::subsub1"),
                    slug.eq("cat1::sub1::subsub1"),
                    crates_cnt.eq(2),
                ),
                (category.eq("Cat 2"), slug.eq("cat2"), crates_cnt.eq(3)),
                (
                    category.eq("Cat 2::Sub 1"),
                    slug.eq("cat2::sub1"),
                    crates_cnt.eq(4),
                ),
                (
                    category.eq("Cat 2::Sub 2"),
                    slug.eq("cat2::sub2"),
                    crates_cnt.eq(5),
                ),
                (category.eq("Cat 3"), slug.eq("cat3"), crates_cnt.eq(200)),
            ])`
$DIR/src/models/category.rs:361:13-361:27: `.execute(conn)`
$DIR/src/models/category.rs:364:60-364:72: `.first(conn)`
$DIR/src/models/category.rs:365:26-365:46: `.subcategories(conn)`
$DIR/src/models/category.rs:366:26-366:50: `.parent_categories(conn)`
$DIR/src/models/keyword.rs:100:9-103:23: `diesel::insert_into(keywords::table)
            .values(keywords::keyword.eq("NO"))
            .execute(conn)
            .unwrap();`
$DIR/src/models/keyword.rs:101:13-101:48: `.values(keywords::keyword.eq("NO"))`
$DIR/src/models/keyword.rs:101:38-101:47: `.eq("NO")`
$DIR/src/models/keyword.rs:102:13-102:27: `.execute(conn)`
$DIR/src/models/token/scopes.rs:136:9-136:66: `assert(EndpointScope::ChangeOwners, "\"change-owners\"");`
$DIR/src/models/token/scopes.rs:137:9-137:62: `assert(EndpointScope::PublishNew, "\"publish-new\"");`
$DIR/src/models/token/scopes.rs:138:9-138:68: `assert(EndpointScope::PublishUpdate, "\"publish-update\"");`
$DIR/src/models/token/scopes.rs:149:9-149:34: `assert("foo", "\"foo\"");`
$DIR/src/models/token/scopes.rs:150:9-150:36: `assert("foo*", "\"foo*\"");`
$DIR/src/models/token/scopes.rs:151:9-151:32: `assert("f*", "\"f*\"");`
$DIR/src/models/token/scopes.rs:152:9-152:30: `assert("*", "\"*\"");`
$DIR/src/models/token/scopes.rs:153:9-153:42: `assert("foo-bar", "\"foo-bar\"");`
$DIR/src/models/token/scopes.rs:154:9-154:42: `assert("foo_bar", "\"foo_bar\"");`
$DIR/src/models/token/scopes.rs:160:9-160:49: `assert_ok!(CrateScope::try_from("foo"));`
$DIR/src/models/token/scopes.rs:163:9-163:50: `assert_ok!(CrateScope::try_from("foo*"));`
$DIR/src/models/token/scopes.rs:164:9-164:48: `assert_ok!(CrateScope::try_from("f*"));`
$DIR/src/models/token/scopes.rs:165:9-165:47: `assert_ok!(CrateScope::try_from("*"));`
$DIR/src/models/token/scopes.rs:166:9-166:52: `assert_err!(CrateScope::try_from("te*st"));`
$DIR/src/models/token/scopes.rs:169:9-169:53: `assert_ok!(CrateScope::try_from("foo-bar"));`
$DIR/src/models/token/scopes.rs:170:9-170:53: `assert_ok!(CrateScope::try_from("foo_bar"));`
$DIR/src/models/token/scopes.rs:173:9-173:47: `assert_err!(CrateScope::try_from(""));`
$DIR/src/models/token.rs:114:17-114:41: `.and_hms_opt(14, 23, 11)`
$DIR/src/models/token.rs:118:17-118:41: `.and_hms_opt(14, 23, 12)`
$DIR/src/models/token.rs:124:9-126:67: `assert_some!(json
            .as_str()
            .find(r#""created_at":"2017-01-06T14:23:11+00:00""#));`
$DIR/src/rate_limiter.rs:187:13-193:15: `rate_limiter.insert(
                *action,
                RateLimiterConfig {
                    rate: Duration::from_secs(action.default_rate_seconds()),
                    burst: action.default_burst(),
                },
            );`
$DIR/src/rate_limiter.rs:187:25-193:14: `.insert(
                *action,
                RateLimiterConfig {
                    rate: Duration::from_secs(action.default_rate_seconds()),
                    burst: action.default_burst(),
                },
            )`
$DIR/src/rate_limiter.rs:190:53-190:76: `.default_rate_seconds()`
$DIR/src/rate_limiter.rs:191:34-191:50: `.default_burst()`
$DIR/src/rate_limiter.rs:207:30-207:78: `.take_token(user_id, action, publish_time, conn)`
$DIR/src/rate_limiter.rs:209:13-209:56: `last_refill_times.push(bucket.last_refill);`
$DIR/src/rate_limiter.rs:209:30-209:55: `.push(bucket.last_refill)`
$DIR/src/rate_limiter.rs:210:13-210:59: `expected_last_refill_times.push(publish_time);`
$DIR/src/rate_limiter.rs:210:39-210:58: `.push(publish_time)`
$DIR/src/rate_limiter.rs:222:30-222:78: `.take_token(user_id, action, publish_time, conn)`
$DIR/src/rate_limiter.rs:224:13-224:56: `last_refill_times.push(bucket.last_refill);`
$DIR/src/rate_limiter.rs:224:30-224:55: `.push(bucket.last_refill)`
$DIR/src/rate_limiter.rs:225:13-225:59: `expected_last_refill_times.push(publish_time);`
$DIR/src/rate_limiter.rs:225:39-225:58: `.push(publish_time)`
$DIR/src/rate_limiter.rs:237:30-237:78: `.take_token(user_id, action, publish_time, conn)`
$DIR/src/rate_limiter.rs:239:13-239:56: `last_refill_times.push(bucket.last_refill);`
$DIR/src/rate_limiter.rs:239:30-239:55: `.push(bucket.last_refill)`
$DIR/src/rate_limiter.rs:240:13-240:59: `expected_last_refill_times.push(publish_time);`
$DIR/src/rate_limiter.rs:240:39-240:58: `.push(publish_time)`
$DIR/src/rate_limiter.rs:257:9-257:18: `.create()`
$DIR/src/rate_limiter.rs:258:26-263:10: `.take_token(
            new_user(conn, "user1")?,
            LimitedAction::PublishNew,
            now,
            conn,
        )`
$DIR/src/rate_limiter.rs:277:9-277:18: `.create()`
$DIR/src/rate_limiter.rs:278:26-283:10: `.take_token(
            new_user(conn, "user2")?,
            LimitedAction::PublishNew,
            now,
            conn,
        )`
$DIR/src/rate_limiter.rs:304:9-304:18: `.create()`
$DIR/src/rate_limiter.rs:306:26-306:84: `.take_token(user_id, LimitedAction::PublishNew, now, conn)`
$DIR/src/rate_limiter.rs:327:9-327:18: `.create()`
$DIR/src/rate_limiter.rs:330:26-330:92: `.take_token(user_id, LimitedAction::PublishNew, refill_time, conn)`
$DIR/src/rate_limiter.rs:355:9-355:18: `.create()`
$DIR/src/rate_limiter.rs:358:26-358:92: `.take_token(user_id, LimitedAction::PublishNew, refill_time, conn)`
$DIR/src/rate_limiter.rs:379:9-379:18: `.create()`
$DIR/src/rate_limiter.rs:381:26-386:10: `.take_token(
            user_id,
            LimitedAction::PublishNew,
            now + chrono::Duration::milliseconds(250),
            conn,
        )`
$DIR/src/rate_limiter.rs:408:9-408:18: `.create()`
$DIR/src/rate_limiter.rs:410:26-410:84: `.take_token(user_id, LimitedAction::PublishNew, now, conn)`
$DIR/src/rate_limiter.rs:419:26-419:84: `.take_token(user_id, LimitedAction::PublishNew, now, conn)`
$DIR/src/rate_limiter.rs:434:9-434:18: `.create()`
$DIR/src/rate_limiter.rs:437:26-437:92: `.take_token(user_id, LimitedAction::PublishNew, refill_time, conn)`
$DIR/src/rate_limiter.rs:459:9-459:18: `.create()`
$DIR/src/rate_limiter.rs:462:26-462:92: `.take_token(user_id, LimitedAction::PublishNew, refill_time, conn)`
$DIR/src/rate_limiter.rs:480:9-486:11: `config.insert(
            LimitedAction::PublishNew,
            RateLimiterConfig {
                rate: Duration::from_secs(1),
                burst: 10,
            },
        );`
$DIR/src/rate_limiter.rs:480:15-486:10: `.insert(
            LimitedAction::PublishNew,
            RateLimiterConfig {
                rate: Duration::from_secs(1),
                burst: 10,
            },
        )`
$DIR/src/rate_limiter.rs:487:9-493:11: `config.insert(
            LimitedAction::YankUnyank,
            RateLimiterConfig {
                rate: Duration::from_secs(1),
                burst: 20,
            },
        );`
$DIR/src/rate_limiter.rs:487:15-493:10: `.insert(
            LimitedAction::YankUnyank,
            RateLimiterConfig {
                rate: Duration::from_secs(1),
                burst: 20,
            },
        )`
$DIR/src/rate_limiter.rs:527:9-527:18: `.create()`
$DIR/src/rate_limiter.rs:531:9-537:29: `diesel::insert_into(publish_rate_overrides::table)
            .values((
                publish_rate_overrides::user_id.eq(user_id),
                publish_rate_overrides::action.eq(LimitedAction::PublishNew),
                publish_rate_overrides::burst.eq(20),
            ))
            .execute(conn)?;`
$DIR/src/rate_limiter.rs:532:13-536:15: `.values((
                publish_rate_overrides::user_id.eq(user_id),
                publish_rate_overrides::action.eq(LimitedAction::PublishNew),
                publish_rate_overrides::burst.eq(20),
            ))`
$DIR/src/rate_limiter.rs:533:48-533:60: `.eq(user_id)`
$DIR/src/rate_limiter.rs:534:47-534:77: `.eq(LimitedAction::PublishNew)`
$DIR/src/rate_limiter.rs:535:46-535:53: `.eq(20)`
$DIR/src/rate_limiter.rs:537:13-537:27: `.execute(conn)`
$DIR/src/rate_limiter.rs:539:26-539:84: `.take_token(user_id, LimitedAction::PublishNew, now, conn)`
$DIR/src/rate_limiter.rs:540:32-540:96: `.take_token(other_user_id, LimitedAction::PublishNew, now, conn)`
$DIR/src/rate_limiter.rs:557:9-557:18: `.create()`
$DIR/src/rate_limiter.rs:561:9-568:29: `diesel::insert_into(publish_rate_overrides::table)
            .values((
                publish_rate_overrides::user_id.eq(user_id),
                publish_rate_overrides::action.eq(LimitedAction::PublishNew),
                publish_rate_overrides::burst.eq(20),
                publish_rate_overrides::expires_at.eq(now + chrono::Duration::days(30)),
            ))
            .execute(conn)?;`
$DIR/src/rate_limiter.rs:562:13-567:15: `.values((
                publish_rate_overrides::user_id.eq(user_id),
                publish_rate_overrides::action.eq(LimitedAction::PublishNew),
                publish_rate_overrides::burst.eq(20),
                publish_rate_overrides::expires_at.eq(now + chrono::Duration::days(30)),
            ))`
$DIR/src/rate_limiter.rs:563:48-563:60: `.eq(user_id)`
$DIR/src/rate_limiter.rs:564:47-564:77: `.eq(LimitedAction::PublishNew)`
$DIR/src/rate_limiter.rs:565:46-565:53: `.eq(20)`
$DIR/src/rate_limiter.rs:566:51-566:88: `.eq(now + chrono::Duration::days(30))`
$DIR/src/rate_limiter.rs:568:13-568:27: `.execute(conn)`
$DIR/src/rate_limiter.rs:570:26-570:84: `.take_token(user_id, LimitedAction::PublishNew, now, conn)`
$DIR/src/rate_limiter.rs:571:32-571:96: `.take_token(other_user_id, LimitedAction::PublishNew, now, conn)`
$DIR/src/rate_limiter.rs:577:9-580:29: `diesel::update(publish_rate_overrides::table)
            .set(publish_rate_overrides::expires_at.eq(now - chrono::Duration::days(30)))
            .filter(publish_rate_overrides::user_id.eq(user_id))
            .execute(conn)?;`
$DIR/src/rate_limiter.rs:578:13-578:90: `.set(publish_rate_overrides::expires_at.eq(now - chrono::Duration::days(30)))`
$DIR/src/rate_limiter.rs:578:52-578:89: `.eq(now - chrono::Duration::days(30))`
$DIR/src/rate_limiter.rs:579:13-579:65: `.filter(publish_rate_overrides::user_id.eq(user_id))`
$DIR/src/rate_limiter.rs:579:52-579:64: `.eq(user_id)`
$DIR/src/rate_limiter.rs:580:13-580:27: `.execute(conn)`
$DIR/src/rate_limiter.rs:582:26-582:84: `.take_token(user_id, LimitedAction::PublishNew, now, conn)`
$DIR/src/rate_limiter.rs:583:32-583:96: `.take_token(other_user_id, LimitedAction::PublishNew, now, conn)`
$DIR/src/rate_limiter.rs:602:13-608:15: `config.insert(
                action,
                RateLimiterConfig {
                    rate: Duration::from_secs(1),
                    burst: 10,
                },
            );`
$DIR/src/rate_limiter.rs:602:19-608:14: `.insert(
                action,
                RateLimiterConfig {
                    rate: Duration::from_secs(1),
                    burst: 10,
                },
            )`
$DIR/src/rate_limiter.rs:612:9-618:29: `diesel::insert_into(publish_rate_overrides::table)
            .values((
                publish_rate_overrides::user_id.eq(user_id),
                publish_rate_overrides::action.eq(LimitedAction::PublishNew),
                publish_rate_overrides::burst.eq(20),
            ))
            .execute(conn)?;`
$DIR/src/rate_limiter.rs:613:13-617:15: `.values((
                publish_rate_overrides::user_id.eq(user_id),
                publish_rate_overrides::action.eq(LimitedAction::PublishNew),
                publish_rate_overrides::burst.eq(20),
            ))`
$DIR/src/rate_limiter.rs:614:48-614:60: `.eq(user_id)`
$DIR/src/rate_limiter.rs:615:47-615:77: `.eq(LimitedAction::PublishNew)`
$DIR/src/rate_limiter.rs:616:46-616:53: `.eq(20)`
$DIR/src/rate_limiter.rs:618:13-618:27: `.execute(conn)`
$DIR/src/router.rs:212:13-212:27: `.parse::<u8>()`
$DIR/src/router.rs:213:13-213:64: `.map_err(|err| err.chain(internal("middle error")))`
$DIR/src/router.rs:213:31-213:63: `.chain(internal("middle error"))`
$DIR/src/router.rs:214:13-214:78: `.map_err(|err| err.chain(bad_request("outer user facing error")))`
$DIR/src/router.rs:214:31-214:77: `.chain(bad_request("outer user facing error"))`
$DIR/src/router.rs:216:13-216:29: `.into_response()`
$DIR/src/storage.rs:392:9-392:66: `config.cdn_prefix = Some("static.crates.io".to_string());`
$DIR/src/storage.rs:451:16-451:46: `.delete_all_crate_files("foo")`
$DIR/src/storage.rs:466:16-466:42: `.delete_all_readmes("foo")`
$DIR/src/storage.rs:481:16-481:50: `.delete_crate_file("foo", "1.2.3")`
$DIR/src/storage.rs:497:16-497:46: `.delete_readme("foo", "1.2.3")`
$DIR/src/storage.rs:513:10-513:58: `.upload_crate_file("foo", "1.2.3", Bytes::new())`
$DIR/src/storage.rs:520:10-520:62: `.upload_crate_file("foo", "2.0.0+foo", Bytes::new())`
$DIR/src/storage.rs:536:10-536:55: `.upload_readme("foo", "1.2.3", bytes.clone())`
$DIR/src/storage.rs:543:10-543:51: `.upload_readme("foo", "2.0.0+foo", bytes)`
$DIR/src/storage.rs:559:10-559:43: `.sync_index("foo", Some(content))`
$DIR/src/storage.rs:564:10-564:34: `.sync_index("foo", None)`
$DIR/src/storage.rs:577:10-577:46: `.upload_db_dump(target, file.path())`
$DIR/src/storage.rs:577:38-577:45: `.path()`
$DIR/src/swirl/runner.rs:308:9-313:12: `runner.get_single_job(dummy_sender(), move |job, _| {
            fetch_barrier.0.wait(); // Tell thread 2 it can lock its job
            assert_eq!(first_job_id, job.id);
            return_barrier.0.wait(); // Wait for thread 2 to lock its job
            Ok(())
        });`
$DIR/src/swirl/runner.rs:308:15-313:11: `.get_single_job(dummy_sender(), move |job, _| {
            fetch_barrier.0.wait(); // Tell thread 2 it can lock its job
            assert_eq!(first_job_id, job.id);
            return_barrier.0.wait(); // Wait for thread 2 to lock its job
            Ok(())
        })`
$DIR/src/swirl/runner.rs:309:13-309:36: `fetch_barrier.0.wait();`
$DIR/src/swirl/runner.rs:309:28-309:35: `.wait()`
$DIR/src/swirl/runner.rs:311:13-311:37: `return_barrier.0.wait();`
$DIR/src/swirl/runner.rs:311:29-311:36: `.wait()`
$DIR/src/swirl/runner.rs:312:13-312:19: `Ok(())`
$DIR/src/swirl/runner.rs:315:9-315:33: `fetch_barrier2.0.wait();`
$DIR/src/swirl/runner.rs:315:25-315:32: `.wait()`
$DIR/src/swirl/runner.rs:316:9-320:12: `runner.get_single_job(dummy_sender(), move |job, _| {
            assert_eq!(second_job_id, job.id);
            return_barrier2.0.wait(); // Tell thread 1 it can unlock its job
            Ok(())
        });`
$DIR/src/swirl/runner.rs:316:15-320:11: `.get_single_job(dummy_sender(), move |job, _| {
            assert_eq!(second_job_id, job.id);
            return_barrier2.0.wait(); // Tell thread 1 it can unlock its job
            Ok(())
        })`
$DIR/src/swirl/runner.rs:318:13-318:38: `return_barrier2.0.wait();`
$DIR/src/swirl/runner.rs:318:30-318:37: `.wait()`
$DIR/src/swirl/runner.rs:319:13-319:19: `Ok(())`
$DIR/src/swirl/runner.rs:322:15-322:31: `.wait_for_jobs()`
$DIR/src/swirl/runner.rs:330:9-330:35: `create_dummy_job(&runner);`
$DIR/src/swirl/runner.rs:332:9-332:62: `runner.get_single_job(dummy_sender(), |_, _| Ok(()));`
$DIR/src/swirl/runner.rs:332:15-332:61: `.get_single_job(dummy_sender(), |_, _| Ok(()))`
$DIR/src/swirl/runner.rs:333:9-333:41: `runner.wait_for_jobs().unwrap();`
$DIR/src/swirl/runner.rs:333:15-333:31: `.wait_for_jobs()`
$DIR/src/swirl/runner.rs:336:13-336:21: `.count()`
$DIR/src/swirl/runner.rs:337:13-337:60: `.get_result(&mut *runner.connection().unwrap())`
$DIR/src/swirl/runner.rs:337:37-337:50: `.connection()`
$DIR/src/swirl/runner.rs:346:9-346:35: `create_dummy_job(&runner);`
$DIR/src/swirl/runner.rs:350:9-356:12: `runner.get_single_job(dummy_sender(), move |_, state| {
            state.conn.transaction(|_| {
                barrier.0.wait();
                // The job should go back into the queue after a panic
                panic!();
            })
        });`
$DIR/src/swirl/runner.rs:350:15-356:11: `.get_single_job(dummy_sender(), move |_, state| {
            state.conn.transaction(|_| {
                barrier.0.wait();
                // The job should go back into the queue after a panic
                panic!();
            })
        })`
$DIR/src/swirl/runner.rs:351:13-355:15: `state.conn.transaction(|_| {
                barrier.0.wait();
                // The job should go back into the queue after a panic
                panic!();
            })`
$DIR/src/swirl/runner.rs:351:18-355:15: `.conn.transaction(|_| {
                barrier.0.wait();
                // The job should go back into the queue after a panic
                panic!();
            })`
$DIR/src/swirl/runner.rs:352:17-352:34: `barrier.0.wait();`
$DIR/src/swirl/runner.rs:352:26-352:33: `.wait()`
$DIR/src/swirl/runner.rs:358:32-358:45: `.connection()`
$DIR/src/swirl/runner.rs:360:9-360:27: `barrier2.0.wait();`
$DIR/src/swirl/runner.rs:360:19-360:26: `.wait()`
$DIR/src/swirl/runner.rs:367:13-367:24: `.select(id)`
$DIR/src/swirl/runner.rs:368:13-368:35: `.filter(retries.eq(0))`
$DIR/src/swirl/runner.rs:368:28-368:34: `.eq(0)`
$DIR/src/swirl/runner.rs:369:13-369:26: `.for_update()`
$DIR/src/swirl/runner.rs:370:13-370:31: `.load::<i64>(conn)`
$DIR/src/swirl/runner.rs:376:13-376:24: `.select(id)`
$DIR/src/swirl/runner.rs:377:13-377:26: `.for_update()`
$DIR/src/swirl/runner.rs:378:13-378:31: `.load::<i64>(conn)`
$DIR/src/swirl/runner.rs:382:15-382:31: `.wait_for_jobs()`
$DIR/src/swirl/runner.rs:391:9-391:64: `runner.get_single_job(dummy_sender(), |_, _| panic!());`
$DIR/src/swirl/runner.rs:391:15-391:63: `.get_single_job(dummy_sender(), |_, _| panic!())`
$DIR/src/swirl/runner.rs:392:9-392:41: `runner.wait_for_jobs().unwrap();`
$DIR/src/swirl/runner.rs:392:15-392:31: `.wait_for_jobs()`
$DIR/src/swirl/runner.rs:395:13-395:26: `.find(job_id)`
$DIR/src/swirl/runner.rs:396:13-396:29: `.select(retries)`
$DIR/src/swirl/runner.rs:397:13-397:26: `.for_update()`
$DIR/src/swirl/runner.rs:398:13-398:62: `.first::<i32>(&mut *runner.connection().unwrap())`
$DIR/src/swirl/runner.rs:398:39-398:52: `.connection()`
$DIR/src/tests/account_lock.rs:26:45-26:57: `.with_user()`
$DIR/src/tests/account_lock.rs:27:5-27:50: `lock_account(&app, user.as_model().id, None);`
$DIR/src/tests/account_lock.rs:27:28-27:39: `.as_model()`
$DIR/src/tests/account_lock.rs:29:24-29:39: `.get::<()>(URL)`
$DIR/src/tests/account_lock.rs:41:27-41:39: `.naive_utc()`
$DIR/src/tests/account_lock.rs:43:45-43:57: `.with_user()`
$DIR/src/tests/account_lock.rs:44:5-44:57: `lock_account(&app, user.as_model().id, Some(until));`
$DIR/src/tests/account_lock.rs:44:28-44:39: `.as_model()`
$DIR/src/tests/account_lock.rs:46:22-46:57: `.format("%Y-%m-%d at %H:%M:%S UTC")`
$DIR/src/tests/account_lock.rs:47:24-47:39: `.get::<()>(URL)`
$DIR/src/tests/account_lock.rs:59:27-59:39: `.naive_utc()`
$DIR/src/tests/account_lock.rs:61:45-61:57: `.with_user()`
$DIR/src/tests/account_lock.rs:62:5-62:57: `lock_account(&app, user.as_model().id, Some(until));`
$DIR/src/tests/account_lock.rs:62:28-62:39: `.as_model()`
$DIR/src/tests/account_lock.rs:64:9-64:39: `.get::<serde_json::Value>(URL)`
$DIR/src/tests/all.rs:169:35-169:43: `.empty()`
$DIR/src/tests/all.rs:170:18-170:29: `.as_inner()`
$DIR/src/tests/all.rs:172:21-172:32: `.db_write()`
$DIR/src/tests/all.rs:173:21-173:32: `.db_write()`
$DIR/src/tests/authentication.rs:12:36-12:44: `.empty()`
$DIR/src/tests/authentication.rs:13:38-13:47: `.get(URL)`
$DIR/src/tests/authentication.rs:21:36-21:44: `.empty()`
$DIR/src/tests/authentication.rs:22:27-22:61: `.request_builder(Method::GET, URL)`
$DIR/src/tests/authentication.rs:23:5-23:63: `request.header(header::AUTHORIZATION, "cio1tkfake-token");`
$DIR/src/tests/authentication.rs:23:12-23:62: `.header(header::AUTHORIZATION, "cio1tkfake-token")`
$DIR/src/tests/authentication.rs:24:38-24:51: `.run(request)`
$DIR/src/tests/authentication.rs:35:38-35:46: `.empty()`
$DIR/src/tests/authentication.rs:37:26-37:37: `.as_inner()`
$DIR/src/tests/authentication.rs:37:37-37:51: `.session_key()`
$DIR/src/tests/authentication.rs:40:27-40:61: `.request_builder(Method::GET, URL)`
$DIR/src/tests/authentication.rs:41:5-41:45: `request.header(header::COOKIE, &cookie);`
$DIR/src/tests/authentication.rs:41:12-41:44: `.header(header::COOKIE, &cookie)`
$DIR/src/tests/authentication.rs:43:21-43:40: `.run::<()>(request)`
$DIR/src/tests/blocked_routes.rs:8:9-10:11: `.with_config(|config| {
            config.blocked_routes.clear();
        })`
$DIR/src/tests/blocked_routes.rs:9:13-9:43: `config.blocked_routes.clear();`
$DIR/src/tests/blocked_routes.rs:9:19-9:42: `.blocked_routes.clear()`
$DIR/src/tests/blocked_routes.rs:11:9-11:21: `.with_user()`
$DIR/src/tests/blocked_routes.rs:13:5-17:8: `app.db(|conn| {
        CrateBuilder::new("foo", user.as_model().id)
            .version(VersionBuilder::new("1.0.0"))
            .expect_build(conn);
    });`
$DIR/src/tests/blocked_routes.rs:13:8-17:7: `.db(|conn| {
        CrateBuilder::new("foo", user.as_model().id)
            .version(VersionBuilder::new("1.0.0"))
            .expect_build(conn);
    })`
$DIR/src/tests/blocked_routes.rs:14:9-16:33: `CrateBuilder::new("foo", user.as_model().id)
            .version(VersionBuilder::new("1.0.0"))
            .expect_build(conn);`
$DIR/src/tests/blocked_routes.rs:14:38-14:49: `.as_model()`
$DIR/src/tests/blocked_routes.rs:15:13-15:51: `.version(VersionBuilder::new("1.0.0"))`
$DIR/src/tests/blocked_routes.rs:16:13-16:32: `.expect_build(conn)`
$DIR/src/tests/blocked_routes.rs:19:22-19:69: `.get::<()>("/api/v1/crates/foo/1.0.0/download")`
$DIR/src/tests/blocked_routes.rs:19:69-19:78: `.status()`
$DIR/src/tests/blocked_routes.rs:26:9-31:11: `.with_config(|config| {
            config.blocked_routes.clear();
            config
                .blocked_routes
                .insert("/api/v1/crates/:crate_id/:version/download".into());
        })`
$DIR/src/tests/blocked_routes.rs:27:13-27:43: `config.blocked_routes.clear();`
$DIR/src/tests/blocked_routes.rs:27:19-27:42: `.blocked_routes.clear()`
$DIR/src/tests/blocked_routes.rs:28:13-30:78: `config
                .blocked_routes
                .insert("/api/v1/crates/:crate_id/:version/download".into());`
$DIR/src/tests/blocked_routes.rs:29:17-30:77: `.blocked_routes
                .insert("/api/v1/crates/:crate_id/:version/download".into())`
$DIR/src/tests/blocked_routes.rs:30:69-30:76: `.into()`
$DIR/src/tests/blocked_routes.rs:32:9-32:21: `.with_user()`
$DIR/src/tests/blocked_routes.rs:34:5-38:8: `app.db(|conn| {
        CrateBuilder::new("foo", user.as_model().id)
            .version(VersionBuilder::new("1.0.0"))
            .expect_build(conn);
    });`
$DIR/src/tests/blocked_routes.rs:34:8-38:7: `.db(|conn| {
        CrateBuilder::new("foo", user.as_model().id)
            .version(VersionBuilder::new("1.0.0"))
            .expect_build(conn);
    })`
$DIR/src/tests/blocked_routes.rs:35:9-37:33: `CrateBuilder::new("foo", user.as_model().id)
            .version(VersionBuilder::new("1.0.0"))
            .expect_build(conn);`
$DIR/src/tests/blocked_routes.rs:35:38-35:49: `.as_model()`
$DIR/src/tests/blocked_routes.rs:36:13-36:51: `.version(VersionBuilder::new("1.0.0"))`
$DIR/src/tests/blocked_routes.rs:37:13-37:32: `.expect_build(conn)`
$DIR/src/tests/blocked_routes.rs:40:22-40:69: `.get::<()>("/api/v1/crates/foo/1.0.0/download")`
$DIR/src/tests/blocked_routes.rs:40:69-40:78: `.status()`
$DIR/src/tests/categories.rs:60:5-60:93: `::crates_io::boot::categories::sync_with_connection(ALGORITHMS_AND_SUCH, conn).unwrap();`
$DIR/src/tests/categories.rs:70:5-70:93: `::crates_io::boot::categories::sync_with_connection(ALGORITHMS_AND_SUCH, conn).unwrap();`
$DIR/src/tests/categories.rs:71:5-71:84: `::crates_io::boot::categories::sync_with_connection(ALGORITHMS, conn).unwrap();`
$DIR/src/tests/categories.rs:81:5-81:93: `::crates_io::boot::categories::sync_with_connection(ALGORITHMS_AND_SUCH, conn).unwrap();`
$DIR/src/tests/categories.rs:82:5-82:96: `::crates_io::boot::categories::sync_with_connection(ALGORITHMS_AND_ANOTHER, conn).unwrap();`
$DIR/src/tests/dump_db.rs:6:5-6:47: `crates_io::util::tracing::init_for_test();`
$DIR/src/tests/dump_db.rs:13:5-13:48: `directory.populate(&database_url).unwrap();`
$DIR/src/tests/dump_db.rs:13:14-13:38: `.populate(&database_url)`
$DIR/src/tests/dump_db.rs:17:34-17:64: `.export_dir.join("import.sql")`
$DIR/src/tests/dump_db.rs:18:45-18:60: `.database_url()`
$DIR/src/tests/github_secret_scanning.rs:22:51-22:64: `.with_token()`
$DIR/src/tests/github_secret_scanning.rs:28:5-35:8: `app.db(|conn| {
        let tokens: Vec<ApiToken> = assert_ok!(ApiToken::belonging_to(user.as_model())
            .select(ApiToken::as_select())
            .filter(api_tokens::revoked.eq(false))
            .load(conn));
        assert_eq!(tokens.len(), 1);
        assert_eq!(tokens[0].name, token.as_model().name);
    });`
$DIR/src/tests/github_secret_scanning.rs:28:8-35:7: `.db(|conn| {
        let tokens: Vec<ApiToken> = assert_ok!(ApiToken::belonging_to(user.as_model())
            .select(ApiToken::as_select())
            .filter(api_tokens::revoked.eq(false))
            .load(conn));
        assert_eq!(tokens.len(), 1);
        assert_eq!(tokens[0].name, token.as_model().name);
    })`
$DIR/src/tests/github_secret_scanning.rs:38:5-44:8: `app.db(|conn| {
        let hashed_token = HashedToken::hash("some_token");
        diesel::update(api_tokens::table)
            .set(api_tokens::token.eq(hashed_token))
            .execute(conn)
            .unwrap();
    });`
$DIR/src/tests/github_secret_scanning.rs:38:8-44:7: `.db(|conn| {
        let hashed_token = HashedToken::hash("some_token");
        diesel::update(api_tokens::table)
            .set(api_tokens::token.eq(hashed_token))
            .execute(conn)
            .unwrap();
    })`
$DIR/src/tests/github_secret_scanning.rs:40:9-43:23: `diesel::update(api_tokens::table)
            .set(api_tokens::token.eq(hashed_token))
            .execute(conn)
            .unwrap();`
$DIR/src/tests/github_secret_scanning.rs:41:13-41:53: `.set(api_tokens::token.eq(hashed_token))`
$DIR/src/tests/github_secret_scanning.rs:41:35-41:52: `.eq(hashed_token)`
$DIR/src/tests/github_secret_scanning.rs:42:13-42:27: `.execute(conn)`
$DIR/src/tests/github_secret_scanning.rs:46:27-46:45: `.post_request(URL)`
$DIR/src/tests/github_secret_scanning.rs:47:5-47:47: `*request.body_mut() = GITHUB_ALERT.into();`
$DIR/src/tests/github_secret_scanning.rs:47:13-47:24: `.body_mut()`
$DIR/src/tests/github_secret_scanning.rs:47:39-47:46: `.into()`
$DIR/src/tests/github_secret_scanning.rs:48:5-48:82: `request.header("GITHUB-PUBLIC-KEY-IDENTIFIER", GITHUB_PUBLIC_KEY_IDENTIFIER);`
$DIR/src/tests/github_secret_scanning.rs:48:12-48:81: `.header("GITHUB-PUBLIC-KEY-IDENTIFIER", GITHUB_PUBLIC_KEY_IDENTIFIER)`
$DIR/src/tests/github_secret_scanning.rs:49:5-49:80: `request.header("GITHUB-PUBLIC-KEY-SIGNATURE", GITHUB_PUBLIC_KEY_SIGNATURE);`
$DIR/src/tests/github_secret_scanning.rs:49:12-49:79: `.header("GITHUB-PUBLIC-KEY-SIGNATURE", GITHUB_PUBLIC_KEY_SIGNATURE)`
$DIR/src/tests/github_secret_scanning.rs:50:24-50:71: `.run::<Vec<GitHubSecretAlertFeedback>>(request)`
$DIR/src/tests/github_secret_scanning.rs:54:28-54:35: `.good()`
$DIR/src/tests/github_secret_scanning.rs:64:5-75:8: `app.db(|conn| {
        let tokens: Vec<ApiToken> = assert_ok!(ApiToken::belonging_to(user.as_model())
            .select(ApiToken::as_select())
            .filter(api_tokens::revoked.eq(false))
            .load(conn));
        assert_eq!(tokens.len(), 0);
        let tokens: Vec<ApiToken> = assert_ok!(ApiToken::belonging_to(user.as_model())
            .select(ApiToken::as_select())
            .filter(api_tokens::revoked.eq(true))
            .load(conn));
        assert_eq!(tokens.len(), 1);
    });`
$DIR/src/tests/github_secret_scanning.rs:64:8-75:7: `.db(|conn| {
        let tokens: Vec<ApiToken> = assert_ok!(ApiToken::belonging_to(user.as_model())
            .select(ApiToken::as_select())
            .filter(api_tokens::revoked.eq(false))
            .load(conn));
        assert_eq!(tokens.len(), 0);
        let tokens: Vec<ApiToken> = assert_ok!(ApiToken::belonging_to(user.as_model())
            .select(ApiToken::as_select())
            .filter(api_tokens::revoked.eq(true))
            .load(conn));
        assert_eq!(tokens.len(), 1);
    })`
$DIR/src/tests/github_secret_scanning.rs:83:51-83:64: `.with_token()`
$DIR/src/tests/github_secret_scanning.rs:89:5-96:8: `app.db(|conn| {
        let tokens: Vec<ApiToken> = assert_ok!(ApiToken::belonging_to(user.as_model())
            .select(ApiToken::as_select())
            .filter(api_tokens::revoked.eq(false))
            .load(conn));
        assert_eq!(tokens.len(), 1);
        assert_eq!(tokens[0].name, token.as_model().name);
    });`
$DIR/src/tests/github_secret_scanning.rs:89:8-96:7: `.db(|conn| {
        let tokens: Vec<ApiToken> = assert_ok!(ApiToken::belonging_to(user.as_model())
            .select(ApiToken::as_select())
            .filter(api_tokens::revoked.eq(false))
            .load(conn));
        assert_eq!(tokens.len(), 1);
        assert_eq!(tokens[0].name, token.as_model().name);
    })`
$DIR/src/tests/github_secret_scanning.rs:99:5-108:8: `app.db(|conn| {
        let hashed_token = HashedToken::hash("some_token");
        diesel::update(api_tokens::table)
            .set((
                api_tokens::token.eq(hashed_token),
                api_tokens::revoked.eq(true),
            ))
            .execute(conn)
            .unwrap();
    });`
$DIR/src/tests/github_secret_scanning.rs:99:8-108:7: `.db(|conn| {
        let hashed_token = HashedToken::hash("some_token");
        diesel::update(api_tokens::table)
            .set((
                api_tokens::token.eq(hashed_token),
                api_tokens::revoked.eq(true),
            ))
            .execute(conn)
            .unwrap();
    })`
$DIR/src/tests/github_secret_scanning.rs:101:9-107:23: `diesel::update(api_tokens::table)
            .set((
                api_tokens::token.eq(hashed_token),
                api_tokens::revoked.eq(true),
            ))
            .execute(conn)
            .unwrap();`
$DIR/src/tests/github_secret_scanning.rs:102:13-105:15: `.set((
                api_tokens::token.eq(hashed_token),
                api_tokens::revoked.eq(true),
            ))`
$DIR/src/tests/github_secret_scanning.rs:103:34-103:51: `.eq(hashed_token)`
$DIR/src/tests/github_secret_scanning.rs:104:36-104:45: `.eq(true)`
$DIR/src/tests/github_secret_scanning.rs:106:13-106:27: `.execute(conn)`
$DIR/src/tests/github_secret_scanning.rs:110:27-110:45: `.post_request(URL)`
$DIR/src/tests/github_secret_scanning.rs:111:5-111:47: `*request.body_mut() = GITHUB_ALERT.into();`
$DIR/src/tests/github_secret_scanning.rs:111:13-111:24: `.body_mut()`
$DIR/src/tests/github_secret_scanning.rs:111:39-111:46: `.into()`
$DIR/src/tests/github_secret_scanning.rs:112:5-112:82: `request.header("GITHUB-PUBLIC-KEY-IDENTIFIER", GITHUB_PUBLIC_KEY_IDENTIFIER);`
$DIR/src/tests/github_secret_scanning.rs:112:12-112:81: `.header("GITHUB-PUBLIC-KEY-IDENTIFIER", GITHUB_PUBLIC_KEY_IDENTIFIER)`
$DIR/src/tests/github_secret_scanning.rs:113:5-113:80: `request.header("GITHUB-PUBLIC-KEY-SIGNATURE", GITHUB_PUBLIC_KEY_SIGNATURE);`
$DIR/src/tests/github_secret_scanning.rs:113:12-113:79: `.header("GITHUB-PUBLIC-KEY-SIGNATURE", GITHUB_PUBLIC_KEY_SIGNATURE)`
$DIR/src/tests/github_secret_scanning.rs:114:24-114:71: `.run::<Vec<GitHubSecretAlertFeedback>>(request)`
$DIR/src/tests/github_secret_scanning.rs:118:28-118:35: `.good()`
$DIR/src/tests/github_secret_scanning.rs:128:5-139:8: `app.db(|conn| {
        let tokens: Vec<ApiToken> = assert_ok!(ApiToken::belonging_to(user.as_model())
            .select(ApiToken::as_select())
            .filter(api_tokens::revoked.eq(false))
            .load(conn));
        assert_eq!(tokens.len(), 0);
        let tokens: Vec<ApiToken> = assert_ok!(ApiToken::belonging_to(user.as_model())
            .select(ApiToken::as_select())
            .filter(api_tokens::revoked.eq(true))
            .load(conn));
        assert_eq!(tokens.len(), 1);
    });`
$DIR/src/tests/github_secret_scanning.rs:128:8-139:7: `.db(|conn| {
        let tokens: Vec<ApiToken> = assert_ok!(ApiToken::belonging_to(user.as_model())
            .select(ApiToken::as_select())
            .filter(api_tokens::revoked.eq(false))
            .load(conn));
        assert_eq!(tokens.len(), 0);
        let tokens: Vec<ApiToken> = assert_ok!(ApiToken::belonging_to(user.as_model())
            .select(ApiToken::as_select())
            .filter(api_tokens::revoked.eq(true))
            .load(conn));
        assert_eq!(tokens.len(), 1);
    })`
$DIR/src/tests/github_secret_scanning.rs:147:51-147:64: `.with_token()`
$DIR/src/tests/github_secret_scanning.rs:153:5-160:8: `app.db(|conn| {
        let tokens: Vec<ApiToken> = assert_ok!(ApiToken::belonging_to(user.as_model())
            .select(ApiToken::as_select())
            .filter(api_tokens::revoked.eq(false))
            .load(conn));
        assert_eq!(tokens.len(), 1);
        assert_eq!(tokens[0].name, token.as_model().name);
    });`
$DIR/src/tests/github_secret_scanning.rs:153:8-160:7: `.db(|conn| {
        let tokens: Vec<ApiToken> = assert_ok!(ApiToken::belonging_to(user.as_model())
            .select(ApiToken::as_select())
            .filter(api_tokens::revoked.eq(false))
            .load(conn));
        assert_eq!(tokens.len(), 1);
        assert_eq!(tokens[0].name, token.as_model().name);
    })`
$DIR/src/tests/github_secret_scanning.rs:162:27-162:45: `.post_request(URL)`
$DIR/src/tests/github_secret_scanning.rs:163:5-163:47: `*request.body_mut() = GITHUB_ALERT.into();`
$DIR/src/tests/github_secret_scanning.rs:163:13-163:24: `.body_mut()`
$DIR/src/tests/github_secret_scanning.rs:163:39-163:46: `.into()`
$DIR/src/tests/github_secret_scanning.rs:164:5-164:82: `request.header("GITHUB-PUBLIC-KEY-IDENTIFIER", GITHUB_PUBLIC_KEY_IDENTIFIER);`
$DIR/src/tests/github_secret_scanning.rs:164:12-164:81: `.header("GITHUB-PUBLIC-KEY-IDENTIFIER", GITHUB_PUBLIC_KEY_IDENTIFIER)`
$DIR/src/tests/github_secret_scanning.rs:165:5-165:80: `request.header("GITHUB-PUBLIC-KEY-SIGNATURE", GITHUB_PUBLIC_KEY_SIGNATURE);`
$DIR/src/tests/github_secret_scanning.rs:165:12-165:79: `.header("GITHUB-PUBLIC-KEY-SIGNATURE", GITHUB_PUBLIC_KEY_SIGNATURE)`
$DIR/src/tests/github_secret_scanning.rs:166:24-166:71: `.run::<Vec<GitHubSecretAlertFeedback>>(request)`
$DIR/src/tests/github_secret_scanning.rs:170:28-170:35: `.good()`
$DIR/src/tests/github_secret_scanning.rs:180:5-187:8: `app.db(|conn| {
        let tokens: Vec<ApiToken> = assert_ok!(ApiToken::belonging_to(user.as_model())
            .select(ApiToken::as_select())
            .filter(api_tokens::revoked.eq(false))
            .load(conn));
        assert_eq!(tokens.len(), 1);
        assert_eq!(tokens[0].name, token.as_model().name);
    });`
$DIR/src/tests/github_secret_scanning.rs:180:8-187:7: `.db(|conn| {
        let tokens: Vec<ApiToken> = assert_ok!(ApiToken::belonging_to(user.as_model())
            .select(ApiToken::as_select())
            .filter(api_tokens::revoked.eq(false))
            .load(conn));
        assert_eq!(tokens.len(), 1);
        assert_eq!(tokens[0].name, token.as_model().name);
    })`
$DIR/src/tests/github_secret_scanning.rs:195:36-195:44: `.empty()`
$DIR/src/tests/github_secret_scanning.rs:198:23-198:41: `.post_request(URL)`
$DIR/src/tests/github_secret_scanning.rs:199:24-199:43: `.run::<()>(request)`
$DIR/src/tests/github_secret_scanning.rs:203:27-203:45: `.post_request(URL)`
$DIR/src/tests/github_secret_scanning.rs:204:5-204:47: `*request.body_mut() = GITHUB_ALERT.into();`
$DIR/src/tests/github_secret_scanning.rs:204:13-204:24: `.body_mut()`
$DIR/src/tests/github_secret_scanning.rs:204:39-204:46: `.into()`
$DIR/src/tests/github_secret_scanning.rs:205:24-205:43: `.run::<()>(request)`
$DIR/src/tests/github_secret_scanning.rs:209:27-209:45: `.post_request(URL)`
$DIR/src/tests/github_secret_scanning.rs:210:5-210:82: `request.header("GITHUB-PUBLIC-KEY-IDENTIFIER", GITHUB_PUBLIC_KEY_IDENTIFIER);`
$DIR/src/tests/github_secret_scanning.rs:210:12-210:81: `.header("GITHUB-PUBLIC-KEY-IDENTIFIER", GITHUB_PUBLIC_KEY_IDENTIFIER)`
$DIR/src/tests/github_secret_scanning.rs:211:5-211:80: `request.header("GITHUB-PUBLIC-KEY-SIGNATURE", GITHUB_PUBLIC_KEY_SIGNATURE);`
$DIR/src/tests/github_secret_scanning.rs:211:12-211:79: `.header("GITHUB-PUBLIC-KEY-SIGNATURE", GITHUB_PUBLIC_KEY_SIGNATURE)`
$DIR/src/tests/github_secret_scanning.rs:212:24-212:43: `.run::<()>(request)`
$DIR/src/tests/github_secret_scanning.rs:216:27-216:45: `.post_request(URL)`
$DIR/src/tests/github_secret_scanning.rs:217:5-217:47: `*request.body_mut() = GITHUB_ALERT.into();`
$DIR/src/tests/github_secret_scanning.rs:217:13-217:24: `.body_mut()`
$DIR/src/tests/github_secret_scanning.rs:217:39-217:46: `.into()`
$DIR/src/tests/github_secret_scanning.rs:218:5-218:82: `request.header("GITHUB-PUBLIC-KEY-IDENTIFIER", GITHUB_PUBLIC_KEY_IDENTIFIER);`
$DIR/src/tests/github_secret_scanning.rs:218:12-218:81: `.header("GITHUB-PUBLIC-KEY-IDENTIFIER", GITHUB_PUBLIC_KEY_IDENTIFIER)`
$DIR/src/tests/github_secret_scanning.rs:219:24-219:43: `.run::<()>(request)`
$DIR/src/tests/github_secret_scanning.rs:223:27-223:45: `.post_request(URL)`
$DIR/src/tests/github_secret_scanning.rs:224:5-224:47: `*request.body_mut() = GITHUB_ALERT.into();`
$DIR/src/tests/github_secret_scanning.rs:224:13-224:24: `.body_mut()`
$DIR/src/tests/github_secret_scanning.rs:224:39-224:46: `.into()`
$DIR/src/tests/github_secret_scanning.rs:225:5-225:82: `request.header("GITHUB-PUBLIC-KEY-IDENTIFIER", GITHUB_PUBLIC_KEY_IDENTIFIER);`
$DIR/src/tests/github_secret_scanning.rs:225:12-225:81: `.header("GITHUB-PUBLIC-KEY-IDENTIFIER", GITHUB_PUBLIC_KEY_IDENTIFIER)`
$DIR/src/tests/github_secret_scanning.rs:226:5-226:68: `request.header("GITHUB-PUBLIC-KEY-SIGNATURE", "bad signature");`
$DIR/src/tests/github_secret_scanning.rs:226:12-226:67: `.header("GITHUB-PUBLIC-KEY-SIGNATURE", "bad signature")`
$DIR/src/tests/github_secret_scanning.rs:227:24-227:43: `.run::<()>(request)`
$DIR/src/tests/github_secret_scanning.rs:231:27-231:45: `.post_request(URL)`
$DIR/src/tests/github_secret_scanning.rs:232:5-232:47: `*request.body_mut() = GITHUB_ALERT.into();`
$DIR/src/tests/github_secret_scanning.rs:232:13-232:24: `.body_mut()`
$DIR/src/tests/github_secret_scanning.rs:232:39-232:46: `.into()`
$DIR/src/tests/github_secret_scanning.rs:233:5-233:82: `request.header("GITHUB-PUBLIC-KEY-IDENTIFIER", GITHUB_PUBLIC_KEY_IDENTIFIER);`
$DIR/src/tests/github_secret_scanning.rs:233:12-233:81: `.header("GITHUB-PUBLIC-KEY-IDENTIFIER", GITHUB_PUBLIC_KEY_IDENTIFIER)`
$DIR/src/tests/github_secret_scanning.rs:234:5-234:75: `request.header("GITHUB-PUBLIC-KEY-SIGNATURE", "YmFkIHNpZ25hdHVyZQ==");`
$DIR/src/tests/github_secret_scanning.rs:234:12-234:74: `.header("GITHUB-PUBLIC-KEY-SIGNATURE", "YmFkIHNpZ25hdHVyZQ==")`
$DIR/src/tests/github_secret_scanning.rs:235:24-235:43: `.run::<()>(request)`
$DIR/src/tests/krate/following.rs:8:41-8:53: `.with_user()`
$DIR/src/tests/krate/following.rs:10:5-12:8: `app.db(|conn| {
        CrateBuilder::new("foo_following", user.as_model().id).expect_build(conn);
    });`
$DIR/src/tests/krate/following.rs:10:8-12:7: `.db(|conn| {
        CrateBuilder::new("foo_following", user.as_model().id).expect_build(conn);
    })`
$DIR/src/tests/krate/following.rs:11:9-11:83: `CrateBuilder::new("foo_following", user.as_model().id).expect_build(conn);`
$DIR/src/tests/krate/following.rs:11:48-11:59: `.as_model()`
$DIR/src/tests/krate/following.rs:11:63-11:82: `.expect_build(conn)`
$DIR/src/tests/krate/following.rs:20:9-22:23: `user.get::<F>("/api/v1/crates/foo_following/following")
            .good()
            .following`
$DIR/src/tests/krate/following.rs:20:13-20:64: `.get::<F>("/api/v1/crates/foo_following/following")`
$DIR/src/tests/krate/following.rs:21:13-21:20: `.good()`
$DIR/src/tests/krate/following.rs:42:5-42:14: `follow();`
$DIR/src/tests/krate/following.rs:43:5-43:14: `follow();`
$DIR/src/tests/krate/following.rs:47:5-47:16: `unfollow();`
$DIR/src/tests/krate/following.rs:48:5-48:16: `unfollow();`
$DIR/src/tests/krate/following.rs:55:48-55:61: `.with_token()`
$DIR/src/tests/krate/following.rs:56:26-56:37: `.as_model()`
$DIR/src/tests/krate/following.rs:61:5-64:8: `app.db(|conn| {
        CrateBuilder::new(crate_to_follow, api_token.user_id).expect_build(conn);
        CrateBuilder::new(crate_not_followed, api_token.user_id).expect_build(conn);
    });`
$DIR/src/tests/krate/following.rs:61:8-64:7: `.db(|conn| {
        CrateBuilder::new(crate_to_follow, api_token.user_id).expect_build(conn);
        CrateBuilder::new(crate_not_followed, api_token.user_id).expect_build(conn);
    })`
$DIR/src/tests/krate/following.rs:62:9-62:82: `CrateBuilder::new(crate_to_follow, api_token.user_id).expect_build(conn);`
$DIR/src/tests/krate/following.rs:62:62-62:81: `.expect_build(conn)`
$DIR/src/tests/krate/following.rs:63:9-63:85: `CrateBuilder::new(crate_not_followed, api_token.user_id).expect_build(conn);`
$DIR/src/tests/krate/following.rs:63:65-63:84: `.expect_build(conn)`
$DIR/src/tests/krate/following.rs:73:9-75:23: `user.get::<F>(&format!("/api/v1/crates/{crate_name}/following"))
            .good()
            .following`
$DIR/src/tests/krate/following.rs:73:13-73:73: `.get::<F>(&format!("/api/v1/crates/{crate_name}/following"))`
$DIR/src/tests/krate/following.rs:74:13-74:20: `.good()`
$DIR/src/tests/krate/following.rs:87:5-87:29: `follow(crate_to_follow);`
$DIR/src/tests/krate/following.rs:92:21-92:43: `.search("following=1")`
$DIR/src/tests/krate/publish/audit_action.rs:7:48-7:61: `.with_token()`
$DIR/src/tests/krate/publish/audit_action.rs:9:5-9:79: `app.db(|conn| assert!(VersionOwnerAction::all(conn).unwrap().is_empty()));`
$DIR/src/tests/krate/publish/audit_action.rs:9:8-9:78: `.db(|conn| assert!(VersionOwnerAction::all(conn).unwrap().is_empty()))`
$DIR/src/tests/krate/publish/audit_action.rs:13:5-13:50: `token.publish_crate(crate_to_publish).good();`
$DIR/src/tests/krate/publish/audit_action.rs:13:10-13:42: `.publish_crate(crate_to_publish)`
$DIR/src/tests/krate/publish/audit_action.rs:13:42-13:49: `.good()`
$DIR/src/tests/krate/publish/audit_action.rs:16:20-16:49: `.show_version("fyk", "1.0.0")`
$DIR/src/tests/krate/publish/auth.rs:10:48-10:61: `.with_token()`
$DIR/src/tests/krate/publish/auth.rs:14:24-14:56: `.publish_crate(crate_to_publish)`
$DIR/src/tests/krate/publish/auth.rs:22:5-27:8: `app.db(|conn| {
        diesel::update(api_tokens::table)
            .set(api_tokens::token.eq(b"bad" as &[u8]))
            .execute(conn)
            .unwrap();
    });`
$DIR/src/tests/krate/publish/auth.rs:22:8-27:7: `.db(|conn| {
        diesel::update(api_tokens::table)
            .set(api_tokens::token.eq(b"bad" as &[u8]))
            .execute(conn)
            .unwrap();
    })`
$DIR/src/tests/krate/publish/auth.rs:23:9-26:23: `diesel::update(api_tokens::table)
            .set(api_tokens::token.eq(b"bad" as &[u8]))
            .execute(conn)
            .unwrap();`
$DIR/src/tests/krate/publish/auth.rs:24:13-24:56: `.set(api_tokens::token.eq(b"bad" as &[u8]))`
$DIR/src/tests/krate/publish/auth.rs:24:35-24:55: `.eq(b"bad" as &[u8])`
$DIR/src/tests/krate/publish/auth.rs:25:13-25:27: `.execute(conn)`
$DIR/src/tests/krate/publish/auth.rs:30:25-30:57: `.publish_crate(crate_to_publish)`
$DIR/src/tests/krate/publish/auth.rs:42:41-42:53: `.with_user()`
$DIR/src/tests/krate/publish/auth.rs:44:5-47:8: `app.db(|conn| {
        // Create the foo_wrong crate with one user
        CrateBuilder::new("foo_wrong", user.as_model().id).expect_build(conn);
    });`
$DIR/src/tests/krate/publish/auth.rs:44:8-47:7: `.db(|conn| {
        // Create the foo_wrong crate with one user
        CrateBuilder::new("foo_wrong", user.as_model().id).expect_build(conn);
    })`
$DIR/src/tests/krate/publish/auth.rs:46:9-46:79: `CrateBuilder::new("foo_wrong", user.as_model().id).expect_build(conn);`
$DIR/src/tests/krate/publish/auth.rs:46:44-46:55: `.as_model()`
$DIR/src/tests/krate/publish/auth.rs:46:59-46:78: `.expect_build(conn)`
$DIR/src/tests/krate/publish/auth.rs:50:27-50:50: `.db_new_user("another")`
$DIR/src/tests/krate/publish/auth.rs:50:50-50:70: `.db_new_token("bar")`
$DIR/src/tests/krate/publish/auth.rs:53:32-53:64: `.publish_crate(crate_to_publish)`
$DIR/src/tests/krate/publish/auth.rs:55:5-55:49: `assert_json_snapshot!(response.into_json());`
$DIR/src/tests/krate/publish/basics.rs:10:41-10:53: `.with_user()`
$DIR/src/tests/krate/publish/basics.rs:13:24-13:56: `.publish_crate(crate_to_publish)`
$DIR/src/tests/krate/publish/basics.rs:15:5-18:8: `assert_json_snapshot!(response.into_json(), {
        ".crate.created_at" => "[datetime]",
        ".crate.updated_at" => "[datetime]",
    });`
$DIR/src/tests/krate/publish/basics.rs:20:21-20:55: `.crates_from_index_head("foo_new")`
$DIR/src/tests/krate/publish/basics.rs:21:5-21:35: `assert_json_snapshot!(crates);`
$DIR/src/tests/krate/publish/basics.rs:28:13-28:50: `.select(versions_published_by::email)`
$DIR/src/tests/krate/publish/basics.rs:29:13-29:25: `.first(conn)`
$DIR/src/tests/krate/publish/basics.rs:37:45-37:58: `.with_token()`
$DIR/src/tests/krate/publish/basics.rs:40:25-40:57: `.publish_crate(crate_to_publish)`
$DIR/src/tests/krate/publish/basics.rs:42:5-45:8: `assert_json_snapshot!(response.into_json(), {
        ".crate.created_at" => "[datetime]",
        ".crate.updated_at" => "[datetime]",
    });`
$DIR/src/tests/krate/publish/basics.rs:53:45-53:58: `.with_token()`
$DIR/src/tests/krate/publish/basics.rs:56:25-56:57: `.publish_crate(crate_to_publish)`
$DIR/src/tests/krate/publish/basics.rs:58:5-61:8: `assert_json_snapshot!(response.into_json(), {
        ".crate.created_at" => "[datetime]",
        ".crate.updated_at" => "[datetime]",
    });`
$DIR/src/tests/krate/publish/basics.rs:72:45-72:58: `.with_token()`
$DIR/src/tests/krate/publish/basics.rs:75:5-75:50: `token.publish_crate(crate_to_publish).good();`
$DIR/src/tests/krate/publish/basics.rs:75:10-75:42: `.publish_crate(crate_to_publish)`
$DIR/src/tests/krate/publish/basics.rs:75:42-75:49: `.good()`
$DIR/src/tests/krate/publish/basics.rs:78:50-78:83: `.description("2.0.0 description")`
$DIR/src/tests/krate/publish/basics.rs:79:25-79:57: `.publish_crate(crate_to_publish)`
$DIR/src/tests/krate/publish/basics.rs:81:5-84:8: `assert_json_snapshot!(response.into_json(), {
        ".crate.created_at" => "[datetime]",
        ".crate.updated_at" => "[datetime]",
    });`
$DIR/src/tests/krate/publish/basics.rs:86:21-86:57: `.crates_from_index_head("foo_twice")`
$DIR/src/tests/krate/publish/basics.rs:87:5-87:35: `assert_json_snapshot!(crates);`
$DIR/src/tests/krate/publish/basics.rs:99:48-99:61: `.with_token()`
$DIR/src/tests/krate/publish/basics.rs:101:5-106:8: `app.db(|conn| {
        // Insert a crate directly into the database and then we'll try to publish the same version
        CrateBuilder::new("foo_dupe", user.as_model().id)
            .version("1.0.0")
            .expect_build(conn);
    });`
$DIR/src/tests/krate/publish/basics.rs:101:8-106:7: `.db(|conn| {
        // Insert a crate directly into the database and then we'll try to publish the same version
        CrateBuilder::new("foo_dupe", user.as_model().id)
            .version("1.0.0")
            .expect_build(conn);
    })`
$DIR/src/tests/krate/publish/basics.rs:103:9-105:33: `CrateBuilder::new("foo_dupe", user.as_model().id)
            .version("1.0.0")
            .expect_build(conn);`
$DIR/src/tests/krate/publish/basics.rs:103:43-103:54: `.as_model()`
$DIR/src/tests/krate/publish/basics.rs:104:13-104:30: `.version("1.0.0")`
$DIR/src/tests/krate/publish/basics.rs:105:13-105:32: `.expect_build(conn)`
$DIR/src/tests/krate/publish/basics.rs:109:25-109:57: `.publish_crate(crate_to_publish)`
$DIR/src/tests/krate/publish/basics.rs:111:5-111:49: `assert_json_snapshot!(response.into_json());`
$DIR/src/tests/krate/publish/categories.rs:9:45-9:58: `.with_token()`
$DIR/src/tests/krate/publish/categories.rs:11:5-15:8: `app.db(|conn| {
        new_category("Category 1", "cat1", "Category 1 crates")
            .create_or_update(conn)
            .unwrap();
    });`
$DIR/src/tests/krate/publish/categories.rs:11:8-15:7: `.db(|conn| {
        new_category("Category 1", "cat1", "Category 1 crates")
            .create_or_update(conn)
            .unwrap();
    })`
$DIR/src/tests/krate/publish/categories.rs:12:9-14:23: `new_category("Category 1", "cat1", "Category 1 crates")
            .create_or_update(conn)
            .unwrap();`
$DIR/src/tests/krate/publish/categories.rs:13:13-13:36: `.create_or_update(conn)`
$DIR/src/tests/krate/publish/categories.rs:17:72-17:89: `.category("cat1")`
$DIR/src/tests/krate/publish/categories.rs:18:25-18:57: `.publish_crate(crate_to_publish)`
$DIR/src/tests/krate/publish/categories.rs:28:43-28:56: `.with_token()`
$DIR/src/tests/krate/publish/categories.rs:30:75-30:91: `.category("bar")`
$DIR/src/tests/krate/publish/categories.rs:31:25-31:57: `.publish_crate(crate_to_publish)`
$DIR/src/tests/krate/publish/categories.rs:41:45-41:58: `.with_token()`
$DIR/src/tests/krate/publish/categories.rs:43:25-51:6: `.publish_crate(
        PublishBuilder::new("foo", "1.0.0")
            .category("one")
            .category("two")
            .category("three")
            .category("four")
            .category("five")
            .category("six"),
    )`
$DIR/src/tests/krate/publish/categories.rs:45:13-45:29: `.category("one")`
$DIR/src/tests/krate/publish/categories.rs:46:13-46:29: `.category("two")`
$DIR/src/tests/krate/publish/categories.rs:47:13-47:31: `.category("three")`
$DIR/src/tests/krate/publish/categories.rs:48:13-48:30: `.category("four")`
$DIR/src/tests/krate/publish/categories.rs:49:13-49:30: `.category("five")`
$DIR/src/tests/krate/publish/categories.rs:50:13-50:29: `.category("six")`
$DIR/src/tests/krate/publish/categories.rs:53:5-53:49: `assert_json_snapshot!(response.into_json());`
$DIR/src/tests/krate/publish/dependencies.rs:8:45-8:58: `.with_token()`
$DIR/src/tests/krate/publish/dependencies.rs:10:25-12:6: `.publish_crate(
        PublishBuilder::new("foo", "1.0.0").dependency(DependencyBuilder::new("🦀")),
    )`
$DIR/src/tests/krate/publish/dependencies.rs:11:44-11:84: `.dependency(DependencyBuilder::new("🦀"))`
$DIR/src/tests/krate/publish/dependencies.rs:14:5-14:49: `assert_json_snapshot!(response.into_json());`
$DIR/src/tests/krate/publish/dependencies.rs:20:48-20:61: `.with_token()`
$DIR/src/tests/krate/publish/dependencies.rs:22:5-25:8: `app.db(|conn| {
        // Insert a crate directly into the database so that new-krate can depend on it
        CrateBuilder::new("package-name", user.as_model().id).expect_build(conn);
    });`
$DIR/src/tests/krate/publish/dependencies.rs:22:8-25:7: `.db(|conn| {
        // Insert a crate directly into the database so that new-krate can depend on it
        CrateBuilder::new("package-name", user.as_model().id).expect_build(conn);
    })`
$DIR/src/tests/krate/publish/dependencies.rs:24:9-24:82: `CrateBuilder::new("package-name", user.as_model().id).expect_build(conn);`
$DIR/src/tests/krate/publish/dependencies.rs:24:47-24:58: `.as_model()`
$DIR/src/tests/krate/publish/dependencies.rs:24:62-24:81: `.expect_build(conn)`
$DIR/src/tests/krate/publish/dependencies.rs:27:60-27:78: `.rename("my-name")`
$DIR/src/tests/krate/publish/dependencies.rs:29:69-29:92: `.dependency(dependency)`
$DIR/src/tests/krate/publish/dependencies.rs:30:5-30:50: `token.publish_crate(crate_to_publish).good();`
$DIR/src/tests/krate/publish/dependencies.rs:30:10-30:42: `.publish_crate(crate_to_publish)`
$DIR/src/tests/krate/publish/dependencies.rs:30:42-30:49: `.good()`
$DIR/src/tests/krate/publish/dependencies.rs:32:21-32:57: `.crates_from_index_head("new-krate")`
$DIR/src/tests/krate/publish/dependencies.rs:38:48-38:61: `.with_token()`
$DIR/src/tests/krate/publish/dependencies.rs:40:5-43:8: `app.db(|conn| {
        // Insert a crate directly into the database so that new-krate can depend on it
        CrateBuilder::new("package-name", user.as_model().id).expect_build(conn);
    });`
$DIR/src/tests/krate/publish/dependencies.rs:40:8-43:7: `.db(|conn| {
        // Insert a crate directly into the database so that new-krate can depend on it
        CrateBuilder::new("package-name", user.as_model().id).expect_build(conn);
    })`
$DIR/src/tests/krate/publish/dependencies.rs:42:9-42:82: `CrateBuilder::new("package-name", user.as_model().id).expect_build(conn);`
$DIR/src/tests/krate/publish/dependencies.rs:42:47-42:58: `.as_model()`
$DIR/src/tests/krate/publish/dependencies.rs:42:62-42:81: `.expect_build(conn)`
$DIR/src/tests/krate/publish/dependencies.rs:45:25-48:6: `.publish_crate(
        PublishBuilder::new("new-krate", "1.0.0")
            .dependency(DependencyBuilder::new("package-name").rename("💩")),
    )`
$DIR/src/tests/krate/publish/dependencies.rs:47:13-47:76: `.dependency(DependencyBuilder::new("package-name").rename("💩"))`
$DIR/src/tests/krate/publish/dependencies.rs:47:63-47:75: `.rename("💩")`
$DIR/src/tests/krate/publish/dependencies.rs:50:5-50:49: `assert_json_snapshot!(response.into_json());`
$DIR/src/tests/krate/publish/dependencies.rs:56:48-56:61: `.with_token()`
$DIR/src/tests/krate/publish/dependencies.rs:58:5-61:8: `app.db(|conn| {
        // Insert a crate directly into the database so that new-krate can depend on it
        CrateBuilder::new("package-name", user.as_model().id).expect_build(conn);
    });`
$DIR/src/tests/krate/publish/dependencies.rs:58:8-61:7: `.db(|conn| {
        // Insert a crate directly into the database so that new-krate can depend on it
        CrateBuilder::new("package-name", user.as_model().id).expect_build(conn);
    })`
$DIR/src/tests/krate/publish/dependencies.rs:60:9-60:82: `CrateBuilder::new("package-name", user.as_model().id).expect_build(conn);`
$DIR/src/tests/krate/publish/dependencies.rs:60:47-60:58: `.as_model()`
$DIR/src/tests/krate/publish/dependencies.rs:60:62-60:81: `.expect_build(conn)`
$DIR/src/tests/krate/publish/dependencies.rs:63:60-63:79: `.rename("_my-name")`
$DIR/src/tests/krate/publish/dependencies.rs:65:69-65:92: `.dependency(dependency)`
$DIR/src/tests/krate/publish/dependencies.rs:66:5-66:50: `token.publish_crate(crate_to_publish).good();`
$DIR/src/tests/krate/publish/dependencies.rs:66:10-66:42: `.publish_crate(crate_to_publish)`
$DIR/src/tests/krate/publish/dependencies.rs:66:42-66:49: `.good()`
$DIR/src/tests/krate/publish/dependencies.rs:68:21-68:57: `.crates_from_index_head("new-krate")`
$DIR/src/tests/krate/publish/dependencies.rs:76:51-76:64: `.with_token()`
$DIR/src/tests/krate/publish/dependencies.rs:78:5-84:8: `app.db(|conn| {
        // Insert a crate directly into the database so that new_dep can depend on it
        // The name choice of `foo-dep` is important! It has the property of
        // name != canon_crate_name(name) and is a regression test for
        // https://github.com/rust-lang/crates.io/issues/651
        CrateBuilder::new("foo-dep", user.as_model().id).expect_build(conn);
    });`
$DIR/src/tests/krate/publish/dependencies.rs:78:8-84:7: `.db(|conn| {
        // Insert a crate directly into the database so that new_dep can depend on it
        // The name choice of `foo-dep` is important! It has the property of
        // name != canon_crate_name(name) and is a regression test for
        // https://github.com/rust-lang/crates.io/issues/651
        CrateBuilder::new("foo-dep", user.as_model().id).expect_build(conn);
    })`
$DIR/src/tests/krate/publish/dependencies.rs:83:9-83:77: `CrateBuilder::new("foo-dep", user.as_model().id).expect_build(conn);`
$DIR/src/tests/krate/publish/dependencies.rs:83:42-83:53: `.as_model()`
$DIR/src/tests/krate/publish/dependencies.rs:83:57-83:76: `.expect_build(conn)`
$DIR/src/tests/krate/publish/dependencies.rs:86:55-86:76: `.version_req("1.0.0")`
$DIR/src/tests/krate/publish/dependencies.rs:88:67-88:90: `.dependency(dependency)`
$DIR/src/tests/krate/publish/dependencies.rs:90:5-90:50: `token.publish_crate(crate_to_publish).good();`
$DIR/src/tests/krate/publish/dependencies.rs:90:10-90:42: `.publish_crate(crate_to_publish)`
$DIR/src/tests/krate/publish/dependencies.rs:90:42-90:49: `.good()`
$DIR/src/tests/krate/publish/dependencies.rs:93:9-93:66: `.get::<Deps>("/api/v1/crates/new_dep/1.0.0/dependencies")`
$DIR/src/tests/krate/publish/dependencies.rs:94:9-94:16: `.good()`
$DIR/src/tests/krate/publish/dependencies.rs:101:21-101:55: `.crates_from_index_head("new_dep")`
$DIR/src/tests/krate/publish/dependencies.rs:107:48-107:61: `.with_token()`
$DIR/src/tests/krate/publish/dependencies.rs:109:5-115:8: `app.db(|conn| {
        // Insert a crate directly into the database so that new_dep can depend on it
        // The name choice of `foo-dep` is important! It has the property of
        // name != canon_crate_name(name) and is a regression test for
        // https://github.com/rust-lang/crates.io/issues/651
        CrateBuilder::new("foo-dep", user.as_model().id).expect_build(conn);
    });`
$DIR/src/tests/krate/publish/dependencies.rs:109:8-115:7: `.db(|conn| {
        // Insert a crate directly into the database so that new_dep can depend on it
        // The name choice of `foo-dep` is important! It has the property of
        // name != canon_crate_name(name) and is a regression test for
        // https://github.com/rust-lang/crates.io/issues/651
        CrateBuilder::new("foo-dep", user.as_model().id).expect_build(conn);
    })`
$DIR/src/tests/krate/publish/dependencies.rs:114:9-114:77: `CrateBuilder::new("foo-dep", user.as_model().id).expect_build(conn);`
$DIR/src/tests/krate/publish/dependencies.rs:114:42-114:53: `.as_model()`
$DIR/src/tests/krate/publish/dependencies.rs:114:57-114:76: `.expect_build(conn)`
$DIR/src/tests/krate/publish/dependencies.rs:117:55-117:77: `.version_req("broken")`
$DIR/src/tests/krate/publish/dependencies.rs:119:67-119:90: `.dependency(dependency)`
$DIR/src/tests/krate/publish/dependencies.rs:120:25-120:57: `.publish_crate(crate_to_publish)`
$DIR/src/tests/krate/publish/dependencies.rs:122:5-122:49: `assert_json_snapshot!(response.into_json());`
$DIR/src/tests/krate/publish/dependencies.rs:128:48-128:61: `.with_token()`
$DIR/src/tests/krate/publish/dependencies.rs:130:5-132:8: `app.db(|conn| {
        CrateBuilder::new("foo-dep", user.as_model().id).expect_build(conn);
    });`
$DIR/src/tests/krate/publish/dependencies.rs:130:8-132:7: `.db(|conn| {
        CrateBuilder::new("foo-dep", user.as_model().id).expect_build(conn);
    })`
$DIR/src/tests/krate/publish/dependencies.rs:131:9-131:77: `CrateBuilder::new("foo-dep", user.as_model().id).expect_build(conn);`
$DIR/src/tests/krate/publish/dependencies.rs:131:42-131:53: `.as_model()`
$DIR/src/tests/krate/publish/dependencies.rs:131:57-131:76: `.expect_build(conn)`
$DIR/src/tests/krate/publish/dependencies.rs:137:67-137:90: `.dependency(dependency)`
$DIR/src/tests/krate/publish/dependencies.rs:139:25-139:57: `.publish_crate(crate_to_publish)`
$DIR/src/tests/krate/publish/dependencies.rs:141:5-141:49: `assert_json_snapshot!(response.into_json());`
$DIR/src/tests/krate/publish/dependencies.rs:147:48-147:61: `.with_token()`
$DIR/src/tests/krate/publish/dependencies.rs:149:5-151:8: `app.db(|conn| {
        CrateBuilder::new("foo-dep", user.as_model().id).expect_build(conn);
    });`
$DIR/src/tests/krate/publish/dependencies.rs:149:8-151:7: `.db(|conn| {
        CrateBuilder::new("foo-dep", user.as_model().id).expect_build(conn);
    })`
$DIR/src/tests/krate/publish/dependencies.rs:150:9-150:77: `CrateBuilder::new("foo-dep", user.as_model().id).expect_build(conn);`
$DIR/src/tests/krate/publish/dependencies.rs:150:42-150:53: `.as_model()`
$DIR/src/tests/krate/publish/dependencies.rs:150:57-150:76: `.expect_build(conn)`
$DIR/src/tests/krate/publish/dependencies.rs:153:55-153:68: `.registry("")`
$DIR/src/tests/krate/publish/dependencies.rs:154:63-154:86: `.dependency(dependency)`
$DIR/src/tests/krate/publish/dependencies.rs:155:10-155:42: `.publish_crate(crate_to_publish)`
$DIR/src/tests/krate/publish/dependencies.rs:160:45-160:58: `.with_token()`
$DIR/src/tests/krate/publish/dependencies.rs:163:38-163:90: `.registry("https://server.example/path/to/registry")`
$DIR/src/tests/krate/publish/dependencies.rs:166:64-166:87: `.dependency(dependency)`
$DIR/src/tests/krate/publish/dependencies.rs:167:25-167:57: `.publish_crate(crate_to_publish)`
$DIR/src/tests/krate/publish/dependencies.rs:169:5-169:49: `assert_json_snapshot!(response.into_json());`
$DIR/src/tests/krate/publish/dependencies.rs:175:48-175:61: `.with_token()`
$DIR/src/tests/krate/publish/dependencies.rs:177:5-180:8: `app.db(|conn| {
        // Insert a crate directly into the database so that new_wild can depend on it
        CrateBuilder::new("foo_wild", user.as_model().id).expect_build(conn);
    });`
$DIR/src/tests/krate/publish/dependencies.rs:177:8-180:7: `.db(|conn| {
        // Insert a crate directly into the database so that new_wild can depend on it
        CrateBuilder::new("foo_wild", user.as_model().id).expect_build(conn);
    })`
$DIR/src/tests/krate/publish/dependencies.rs:179:9-179:78: `CrateBuilder::new("foo_wild", user.as_model().id).expect_build(conn);`
$DIR/src/tests/krate/publish/dependencies.rs:179:43-179:54: `.as_model()`
$DIR/src/tests/krate/publish/dependencies.rs:179:58-179:77: `.expect_build(conn)`
$DIR/src/tests/krate/publish/dependencies.rs:182:56-182:73: `.version_req("*")`
$DIR/src/tests/krate/publish/dependencies.rs:184:68-184:91: `.dependency(dependency)`
$DIR/src/tests/krate/publish/dependencies.rs:186:25-186:57: `.publish_crate(crate_to_publish)`
$DIR/src/tests/krate/publish/dependencies.rs:188:5-188:49: `assert_json_snapshot!(response.into_json());`
$DIR/src/tests/krate/publish/dependencies.rs:194:45-194:58: `.with_token()`
$DIR/src/tests/krate/publish/dependencies.rs:199:71-199:94: `.dependency(dependency)`
$DIR/src/tests/krate/publish/dependencies.rs:201:25-201:57: `.publish_crate(crate_to_publish)`
$DIR/src/tests/krate/publish/dependencies.rs:203:5-203:49: `assert_json_snapshot!(response.into_json());`
$DIR/src/tests/krate/publish/dependencies.rs:209:48-209:61: `.with_token()`
$DIR/src/tests/krate/publish/dependencies.rs:211:5-215:8: `app.db(|conn| {
        // Insert crates directly into the database so that two-deps can depend on it
        CrateBuilder::new("dep-a", user.as_model().id).expect_build(conn);
        CrateBuilder::new("dep-b", user.as_model().id).expect_build(conn);
    });`
$DIR/src/tests/krate/publish/dependencies.rs:211:8-215:7: `.db(|conn| {
        // Insert crates directly into the database so that two-deps can depend on it
        CrateBuilder::new("dep-a", user.as_model().id).expect_build(conn);
        CrateBuilder::new("dep-b", user.as_model().id).expect_build(conn);
    })`
$DIR/src/tests/krate/publish/dependencies.rs:213:9-213:75: `CrateBuilder::new("dep-a", user.as_model().id).expect_build(conn);`
$DIR/src/tests/krate/publish/dependencies.rs:213:40-213:51: `.as_model()`
$DIR/src/tests/krate/publish/dependencies.rs:213:55-213:74: `.expect_build(conn)`
$DIR/src/tests/krate/publish/dependencies.rs:214:9-214:75: `CrateBuilder::new("dep-b", user.as_model().id).expect_build(conn);`
$DIR/src/tests/krate/publish/dependencies.rs:214:40-214:51: `.as_model()`
$DIR/src/tests/krate/publish/dependencies.rs:214:55-214:74: `.expect_build(conn)`
$DIR/src/tests/krate/publish/dependencies.rs:222:9-222:27: `.dependency(dep_b)`
$DIR/src/tests/krate/publish/dependencies.rs:223:9-223:27: `.dependency(dep_a)`
$DIR/src/tests/krate/publish/dependencies.rs:224:5-224:50: `token.publish_crate(crate_to_publish).good();`
$DIR/src/tests/krate/publish/dependencies.rs:224:10-224:42: `.publish_crate(crate_to_publish)`
$DIR/src/tests/krate/publish/dependencies.rs:224:42-224:49: `.good()`
$DIR/src/tests/krate/publish/dependencies.rs:226:21-226:56: `.crates_from_index_head("two-deps")`
$DIR/src/tests/krate/publish/dependencies.rs:232:45-232:58: `.with_token()`
$DIR/src/tests/krate/publish/dependencies.rs:234:25-237:6: `.publish_crate(
        PublishBuilder::new("foo", "1.0.0")
            .dependency(DependencyBuilder::new("bar").add_feature("🍺")),
    )`
$DIR/src/tests/krate/publish/dependencies.rs:236:13-236:72: `.dependency(DependencyBuilder::new("bar").add_feature("🍺"))`
$DIR/src/tests/krate/publish/dependencies.rs:236:54-236:71: `.add_feature("🍺")`
$DIR/src/tests/krate/publish/dependencies.rs:239:5-239:49: `assert_json_snapshot!(response.into_json());`
$DIR/src/tests/krate/publish/emails.rs:10:45-10:58: `.with_token()`
$DIR/src/tests/krate/publish/emails.rs:12:5-14:8: `app.db(|conn| {
        delete(emails::table).execute(conn).unwrap();
    });`
$DIR/src/tests/krate/publish/emails.rs:12:8-14:7: `.db(|conn| {
        delete(emails::table).execute(conn).unwrap();
    })`
$DIR/src/tests/krate/publish/emails.rs:13:9-13:54: `delete(emails::table).execute(conn).unwrap();`
$DIR/src/tests/krate/publish/emails.rs:13:30-13:44: `.execute(conn)`
$DIR/src/tests/krate/publish/emails.rs:18:25-18:57: `.publish_crate(crate_to_publish)`
$DIR/src/tests/krate/publish/emails.rs:20:5-20:49: `assert_json_snapshot!(response.into_json());`
$DIR/src/tests/krate/publish/emails.rs:26:45-26:58: `.with_token()`
$DIR/src/tests/krate/publish/emails.rs:28:5-33:8: `app.db(|conn| {
        update(emails::table)
            .set((emails::verified.eq(false),))
            .execute(conn)
            .unwrap();
    });`
$DIR/src/tests/krate/publish/emails.rs:28:8-33:7: `.db(|conn| {
        update(emails::table)
            .set((emails::verified.eq(false),))
            .execute(conn)
            .unwrap();
    })`
$DIR/src/tests/krate/publish/emails.rs:29:9-32:23: `update(emails::table)
            .set((emails::verified.eq(false),))
            .execute(conn)
            .unwrap();`
$DIR/src/tests/krate/publish/emails.rs:30:13-30:48: `.set((emails::verified.eq(false),))`
$DIR/src/tests/krate/publish/emails.rs:30:35-30:45: `.eq(false)`
$DIR/src/tests/krate/publish/emails.rs:31:13-31:27: `.execute(conn)`
$DIR/src/tests/krate/publish/emails.rs:37:25-37:57: `.publish_crate(crate_to_publish)`
$DIR/src/tests/krate/publish/emails.rs:39:5-39:49: `assert_json_snapshot!(response.into_json());`
$DIR/src/tests/krate/publish/features.rs:8:48-8:61: `.with_token()`
$DIR/src/tests/krate/publish/features.rs:10:5-13:8: `app.db(|conn| {
        // Insert a crate directly into the database so that foo_new can depend on it
        CrateBuilder::new("bar", user.as_model().id).expect_build(conn);
    });`
$DIR/src/tests/krate/publish/features.rs:10:8-13:7: `.db(|conn| {
        // Insert a crate directly into the database so that foo_new can depend on it
        CrateBuilder::new("bar", user.as_model().id).expect_build(conn);
    })`
$DIR/src/tests/krate/publish/features.rs:12:9-12:73: `CrateBuilder::new("bar", user.as_model().id).expect_build(conn);`
$DIR/src/tests/krate/publish/features.rs:12:38-12:49: `.as_model()`
$DIR/src/tests/krate/publish/features.rs:12:53-12:72: `.expect_build(conn)`
$DIR/src/tests/krate/publish/features.rs:18:9-18:32: `.dependency(dependency)`
$DIR/src/tests/krate/publish/features.rs:19:9-19:56: `.feature("new_feat", &["dep:bar", "bar?/feat"])`
$DIR/src/tests/krate/publish/features.rs:20:9-20:34: `.feature("old_feat", &[])`
$DIR/src/tests/krate/publish/features.rs:21:5-21:50: `token.publish_crate(crate_to_publish).good();`
$DIR/src/tests/krate/publish/features.rs:21:10-21:42: `.publish_crate(crate_to_publish)`
$DIR/src/tests/krate/publish/features.rs:21:42-21:49: `.good()`
$DIR/src/tests/krate/publish/features.rs:23:21-23:51: `.crates_from_index_head("foo")`
$DIR/src/tests/krate/publish/features.rs:29:45-29:58: `.with_token()`
$DIR/src/tests/krate/publish/features.rs:31:63-31:84: `.feature("~foo", &[])`
$DIR/src/tests/krate/publish/features.rs:32:25-32:57: `.publish_crate(crate_to_publish)`
$DIR/src/tests/krate/publish/features.rs:34:5-34:49: `assert_json_snapshot!(response.into_json());`
$DIR/src/tests/krate/publish/features.rs:40:45-40:58: `.with_token()`
$DIR/src/tests/krate/publish/features.rs:42:63-42:89: `.feature("foo", &["!bar"])`
$DIR/src/tests/krate/publish/features.rs:43:25-43:57: `.publish_crate(crate_to_publish)`
$DIR/src/tests/krate/publish/features.rs:45:5-45:49: `assert_json_snapshot!(response.into_json());`
$DIR/src/tests/krate/publish/git.rs:6:45-6:58: `.with_token()`
$DIR/src/tests/krate/publish/git.rs:8:5-8:57: `app.upstream_index().create_empty_commit().unwrap();`
$DIR/src/tests/krate/publish/git.rs:8:8-8:25: `.upstream_index()`
$DIR/src/tests/krate/publish/git.rs:8:25-8:47: `.create_empty_commit()`
$DIR/src/tests/krate/publish/git.rs:11:5-11:50: `token.publish_crate(crate_to_publish).good();`
$DIR/src/tests/krate/publish/git.rs:11:10-11:42: `.publish_crate(crate_to_publish)`
$DIR/src/tests/krate/publish/git.rs:11:42-11:49: `.good()`
$DIR/src/tests/krate/publish/inheritance.rs:8:56-8:69: `.with_token()`
$DIR/src/tests/krate/publish/inheritance.rs:10:25-13:6: `.publish_crate(
        PublishBuilder::new("foo", "1.0.0")
            .custom_manifest("[package]\nname = \"foo\"\nversion.workspace = true\n"),
    )`
$DIR/src/tests/krate/publish/inheritance.rs:12:13-12:86: `.custom_manifest("[package]\nname = \"foo\"\nversion.workspace = true\n")`
$DIR/src/tests/krate/publish/inheritance.rs:20:56-20:69: `.with_token()`
$DIR/src/tests/krate/publish/inheritance.rs:22:25-24:7: `.publish_crate(PublishBuilder::new("foo", "1.0.0").custom_manifest(
        "[package]\nname = \"foo\"\nversion = \"1.0.0\"\n\n[dependencies]\nserde.workspace = true\n",
    ))`
$DIR/src/tests/krate/publish/inheritance.rs:22:75-24:6: `.custom_manifest(
        "[package]\nname = \"foo\"\nversion = \"1.0.0\"\n\n[dependencies]\nserde.workspace = true\n",
    )`
$DIR/src/tests/krate/publish/keywords.rs:8:43-8:56: `.with_token()`
$DIR/src/tests/krate/publish/keywords.rs:10:9-10:24: `.keyword("c++")`
$DIR/src/tests/krate/publish/keywords.rs:11:9-11:36: `.keyword("crates-io_index")`
$DIR/src/tests/krate/publish/keywords.rs:12:9-12:30: `.keyword("1password")`
$DIR/src/tests/krate/publish/keywords.rs:13:25-13:57: `.publish_crate(crate_to_publish)`
$DIR/src/tests/krate/publish/keywords.rs:23:43-23:56: `.with_token()`
$DIR/src/tests/krate/publish/keywords.rs:25:52-25:93: `.keyword("super-long-keyword-name-oh-no")`
$DIR/src/tests/krate/publish/keywords.rs:26:25-26:57: `.publish_crate(crate_to_publish)`
$DIR/src/tests/krate/publish/keywords.rs:30:71-30:87: `.keyword("?@?%")`
$DIR/src/tests/krate/publish/keywords.rs:31:25-31:57: `.publish_crate(crate_to_publish)`
$DIR/src/tests/krate/publish/keywords.rs:35:71-35:90: `.keyword("áccênts")`
$DIR/src/tests/krate/publish/keywords.rs:36:25-36:57: `.publish_crate(crate_to_publish)`
$DIR/src/tests/krate/publish/keywords.rs:43:45-43:58: `.with_token()`
$DIR/src/tests/krate/publish/keywords.rs:44:25-52:6: `.publish_crate(
        PublishBuilder::new("foo", "1.0.0")
            .keyword("one")
            .keyword("two")
            .keyword("three")
            .keyword("four")
            .keyword("five")
            .keyword("six"),
    )`
$DIR/src/tests/krate/publish/keywords.rs:46:13-46:28: `.keyword("one")`
$DIR/src/tests/krate/publish/keywords.rs:47:13-47:28: `.keyword("two")`
$DIR/src/tests/krate/publish/keywords.rs:48:13-48:30: `.keyword("three")`
$DIR/src/tests/krate/publish/keywords.rs:49:13-49:29: `.keyword("four")`
$DIR/src/tests/krate/publish/keywords.rs:50:13-50:29: `.keyword("five")`
$DIR/src/tests/krate/publish/keywords.rs:51:13-51:28: `.keyword("six")`
$DIR/src/tests/krate/publish/keywords.rs:54:5-54:49: `assert_json_snapshot!(response.into_json());`
$DIR/src/tests/krate/publish/manifest.rs:11:56-11:69: `.with_token()`
$DIR/src/tests/krate/publish/manifest.rs:13:25-21:7: `.publish_crate(PublishBuilder::new("foo", "1.0.0").custom_manifest(
        r#"[package]
            name = "foo"
            version = "1.0.0"
            description = "description"
            license = "MIT"
            rust-version = "1.69"
            readme = false"#,
    ))`
$DIR/src/tests/krate/publish/manifest.rs:13:75-21:6: `.custom_manifest(
        r#"[package]
            name = "foo"
            version = "1.0.0"
            description = "description"
            license = "MIT"
            rust-version = "1.69"
            readme = false"#,
    )`
$DIR/src/tests/krate/publish/manifest.rs:23:5-26:8: `assert_json_snapshot!(response.into_json(), {
        ".crate.created_at" => "[datetime]",
        ".crate.updated_at" => "[datetime]",
    });`
$DIR/src/tests/krate/publish/manifest.rs:28:25-28:63: `.get::<()>("/api/v1/crates/foo/1.0.0")`
$DIR/src/tests/krate/publish/manifest.rs:42:56-42:69: `.with_token()`
$DIR/src/tests/krate/publish/manifest.rs:44:25-44:90: `.publish_crate(PublishBuilder::new("foo", "1.0.0").no_manifest())`
$DIR/src/tests/krate/publish/manifest.rs:44:75-44:89: `.no_manifest()`
$DIR/src/tests/krate/publish/manifest.rs:51:56-51:69: `.with_token()`
$DIR/src/tests/krate/publish/manifest.rs:53:25-60:6: `.publish_crate(
        PublishBuilder::new("foo", "1.0.0")
            .add_file(
                "foo-1.0.0/CARGO.TOML",
                "[package]\nname = \"foo\"\nversion = \"1.0.0\"\n",
            )
            .no_manifest(),
    )`
$DIR/src/tests/krate/publish/manifest.rs:55:13-58:14: `.add_file(
                "foo-1.0.0/CARGO.TOML",
                "[package]\nname = \"foo\"\nversion = \"1.0.0\"\n",
            )`
$DIR/src/tests/krate/publish/manifest.rs:59:13-59:27: `.no_manifest()`
$DIR/src/tests/krate/publish/manifest.rs:67:56-67:69: `.with_token()`
$DIR/src/tests/krate/publish/manifest.rs:69:25-80:6: `.publish_crate(
        PublishBuilder::new("foo", "1.0.0")
            .add_file(
                "foo-1.0.0/Cargo.toml",
                "[package]\nname = \"foo\"\nversion = \"1.0.0\"\n",
            )
            .add_file(
                "foo-1.0.0/cargo.toml",
                "[package]\nname = \"foo\"\nversion = \"1.0.0\"\n",
            )
            .no_manifest(),
    )`
$DIR/src/tests/krate/publish/manifest.rs:71:13-74:14: `.add_file(
                "foo-1.0.0/Cargo.toml",
                "[package]\nname = \"foo\"\nversion = \"1.0.0\"\n",
            )`
$DIR/src/tests/krate/publish/manifest.rs:75:13-78:14: `.add_file(
                "foo-1.0.0/cargo.toml",
                "[package]\nname = \"foo\"\nversion = \"1.0.0\"\n",
            )`
$DIR/src/tests/krate/publish/manifest.rs:79:13-79:27: `.no_manifest()`
$DIR/src/tests/krate/publish/manifest.rs:87:56-87:69: `.with_token()`
$DIR/src/tests/krate/publish/manifest.rs:89:25-89:96: `.publish_crate(PublishBuilder::new("foo", "1.0.0").custom_manifest(""))`
$DIR/src/tests/krate/publish/manifest.rs:89:75-89:95: `.custom_manifest("")`
$DIR/src/tests/krate/publish/manifest.rs:96:56-96:69: `.with_token()`
$DIR/src/tests/krate/publish/manifest.rs:98:25-100:6: `.publish_crate(
        PublishBuilder::new("foo", "1.0.0").custom_manifest("[package]\nversion = \"1.0.0\""),
    )`
$DIR/src/tests/krate/publish/manifest.rs:99:44-99:94: `.custom_manifest("[package]\nversion = \"1.0.0\"")`
$DIR/src/tests/krate/publish/manifest.rs:107:56-107:69: `.with_token()`
$DIR/src/tests/krate/publish/manifest.rs:109:25-111:6: `.publish_crate(
        PublishBuilder::new("foo", "1.0.0").custom_manifest("[package]\nname = \"foo\""),
    )`
$DIR/src/tests/krate/publish/manifest.rs:110:44-110:89: `.custom_manifest("[package]\nname = \"foo\"")`
$DIR/src/tests/krate/publish/manifest.rs:118:56-118:69: `.with_token()`
$DIR/src/tests/krate/publish/manifest.rs:121:14-123:11: `.publish_crate(PublishBuilder::new("foo", "1.0.0").custom_manifest(
            "[package]\nname = \"foo\"\nversion = \"1.0.0\"\ndescription = \"description\"\nlicense = \"MIT\"\nrust-version = \"\"\n",
        ))`
$DIR/src/tests/krate/publish/manifest.rs:121:64-123:10: `.custom_manifest(
            "[package]\nname = \"foo\"\nversion = \"1.0.0\"\ndescription = \"description\"\nlicense = \"MIT\"\nrust-version = \"\"\n",
        )`
$DIR/src/tests/krate/publish/manifest.rs:127:25-129:7: `.publish_crate(PublishBuilder::new("foo", "1.0.0").custom_manifest(
        "[package]\nname = \"foo\"\nversion = \"1.0.0\"\ndescription = \"description\"\nlicense = \"MIT\"\nrust-version = \"1.0.0-beta.2\"\n",
    ))`
$DIR/src/tests/krate/publish/manifest.rs:127:75-129:6: `.custom_manifest(
        "[package]\nname = \"foo\"\nversion = \"1.0.0\"\ndescription = \"description\"\nlicense = \"MIT\"\nrust-version = \"1.0.0-beta.2\"\n",
    )`
$DIR/src/tests/krate/publish/max_size.rs:14:9-17:11: `.with_config(|config| {
            config.max_upload_size = max_upload_size;
            config.max_unpack_size = max_upload_size;
        })`
$DIR/src/tests/krate/publish/max_size.rs:15:13-15:54: `config.max_upload_size = max_upload_size;`
$DIR/src/tests/krate/publish/max_size.rs:16:13-16:54: `config.max_unpack_size = max_upload_size;`
$DIR/src/tests/krate/publish/max_size.rs:18:9-18:22: `.with_token()`
$DIR/src/tests/krate/publish/max_size.rs:26:9-26:61: `assert_ok!(header.set_path("foo-1.1.0/Cargo.toml"));`
$DIR/src/tests/krate/publish/max_size.rs:27:9-27:44: `header.set_size(data.len() as u64);`
$DIR/src/tests/krate/publish/max_size.rs:27:15-27:43: `.set_size(data.len() as u64)`
$DIR/src/tests/krate/publish/max_size.rs:27:29-27:35: `.len()`
$DIR/src/tests/krate/publish/max_size.rs:28:9-28:28: `header.set_cksum();`
$DIR/src/tests/krate/publish/max_size.rs:28:15-28:27: `.set_cksum()`
$DIR/src/tests/krate/publish/max_size.rs:29:9-29:60: `assert_ok!(builder.as_mut().append(&header, data));`
$DIR/src/tests/krate/publish/max_size.rs:35:9-35:63: `assert_ok!(header.set_path("foo-1.1.0/big-file.txt"));`
$DIR/src/tests/krate/publish/max_size.rs:36:9-36:44: `header.set_size(data.len() as u64);`
$DIR/src/tests/krate/publish/max_size.rs:36:15-36:43: `.set_size(data.len() as u64)`
$DIR/src/tests/krate/publish/max_size.rs:36:29-36:35: `.len()`
$DIR/src/tests/krate/publish/max_size.rs:37:9-37:28: `header.set_cksum();`
$DIR/src/tests/krate/publish/max_size.rs:37:15-37:27: `.set_cksum()`
$DIR/src/tests/krate/publish/max_size.rs:38:9-38:60: `assert_ok!(builder.as_mut().append(&header, data));`
$DIR/src/tests/krate/publish/max_size.rs:41:9-41:60: `builder.build_with_compression(Compression::none())`
$DIR/src/tests/krate/publish/max_size.rs:41:16-41:60: `.build_with_compression(Compression::none())`
$DIR/src/tests/krate/publish/max_size.rs:44:63-44:71: `.build()`
$DIR/src/tests/krate/publish/max_size.rs:47:25-47:45: `.publish_crate(body)`
$DIR/src/tests/krate/publish/max_size.rs:49:5-52:8: `assert_json_snapshot!(response.into_json(), {
        ".crate.created_at" => "[datetime]",
        ".crate.updated_at" => "[datetime]",
    });`
$DIR/src/tests/krate/publish/max_size.rs:60:9-63:11: `.with_config(|config| {
            config.max_upload_size = max_upload_size;
            config.max_unpack_size = max_upload_size;
        })`
$DIR/src/tests/krate/publish/max_size.rs:61:13-61:54: `config.max_upload_size = max_upload_size;`
$DIR/src/tests/krate/publish/max_size.rs:62:13-62:54: `config.max_unpack_size = max_upload_size;`
$DIR/src/tests/krate/publish/max_size.rs:64:9-64:22: `.with_token()`
$DIR/src/tests/krate/publish/max_size.rs:73:9-73:61: `assert_ok!(header.set_path("foo-1.1.0/Cargo.toml"));`
$DIR/src/tests/krate/publish/max_size.rs:74:9-74:44: `header.set_size(data.len() as u64);`
$DIR/src/tests/krate/publish/max_size.rs:74:15-74:43: `.set_size(data.len() as u64)`
$DIR/src/tests/krate/publish/max_size.rs:74:29-74:35: `.len()`
$DIR/src/tests/krate/publish/max_size.rs:75:9-75:28: `header.set_cksum();`
$DIR/src/tests/krate/publish/max_size.rs:75:15-75:27: `.set_cksum()`
$DIR/src/tests/krate/publish/max_size.rs:76:9-76:60: `assert_ok!(builder.as_mut().append(&header, data));`
$DIR/src/tests/krate/publish/max_size.rs:79:9-79:60: `builder.build_with_compression(Compression::none())`
$DIR/src/tests/krate/publish/max_size.rs:79:16-79:60: `.build_with_compression(Compression::none())`
$DIR/src/tests/krate/publish/max_size.rs:82:63-82:71: `.build()`
$DIR/src/tests/krate/publish/max_size.rs:85:25-85:45: `.publish_crate(body)`
$DIR/src/tests/krate/publish/max_size.rs:87:5-87:49: `assert_json_snapshot!(response.into_json());`
$DIR/src/tests/krate/publish/max_size.rs:94:9-97:11: `.with_config(|config| {
            config.max_upload_size = 3000;
            config.max_unpack_size = 2000;
        })`
$DIR/src/tests/krate/publish/max_size.rs:95:13-95:43: `config.max_upload_size = 3000;`
$DIR/src/tests/krate/publish/max_size.rs:96:13-96:43: `config.max_unpack_size = 2000;`
$DIR/src/tests/krate/publish/max_size.rs:98:9-98:22: `.with_token()`
$DIR/src/tests/krate/publish/max_size.rs:102:5-102:61: `io::repeat(0).take(len).read_to_end(&mut body).unwrap();`
$DIR/src/tests/krate/publish/max_size.rs:102:18-102:28: `.take(len)`
$DIR/src/tests/krate/publish/max_size.rs:102:28-102:51: `.read_to_end(&mut body)`
$DIR/src/tests/krate/publish/max_size.rs:104:63-104:93: `.add_file("foo-1.1.0/a", body)`
$DIR/src/tests/krate/publish/max_size.rs:106:25-106:57: `.publish_crate(crate_to_publish)`
$DIR/src/tests/krate/publish/max_size.rs:108:5-108:49: `assert_json_snapshot!(response.into_json());`
$DIR/src/tests/krate/publish/max_size.rs:116:9-119:11: `.with_config(|config| {
            config.max_upload_size = 3000;
            config.max_unpack_size = 2000;
        })`
$DIR/src/tests/krate/publish/max_size.rs:117:13-117:43: `config.max_upload_size = 3000;`
$DIR/src/tests/krate/publish/max_size.rs:118:13-118:43: `config.max_unpack_size = 2000;`
$DIR/src/tests/krate/publish/max_size.rs:120:9-120:21: `.with_user()`
$DIR/src/tests/krate/publish/max_size.rs:123:9-123:62: `.add_file("foo_big-1.0.0/big", &[b'a'; 2000] as &[_])`
$DIR/src/tests/krate/publish/max_size.rs:125:24-125:47: `.publish_crate(builder)`
$DIR/src/tests/krate/publish/max_size.rs:127:5-127:49: `assert_json_snapshot!(response.into_json());`
$DIR/src/tests/krate/publish/max_size.rs:134:48-134:61: `.with_token()`
$DIR/src/tests/krate/publish/max_size.rs:136:5-140:8: `app.db(|conn| {
        CrateBuilder::new("foo_whitelist", user.as_model().id)
            .max_upload_size(2_000_000)
            .expect_build(conn);
    });`
$DIR/src/tests/krate/publish/max_size.rs:136:8-140:7: `.db(|conn| {
        CrateBuilder::new("foo_whitelist", user.as_model().id)
            .max_upload_size(2_000_000)
            .expect_build(conn);
    })`
$DIR/src/tests/krate/publish/max_size.rs:137:9-139:33: `CrateBuilder::new("foo_whitelist", user.as_model().id)
            .max_upload_size(2_000_000)
            .expect_build(conn);`
$DIR/src/tests/krate/publish/max_size.rs:137:48-137:59: `.as_model()`
$DIR/src/tests/krate/publish/max_size.rs:138:13-138:40: `.max_upload_size(2_000_000)`
$DIR/src/tests/krate/publish/max_size.rs:139:13-139:32: `.expect_build(conn)`
$DIR/src/tests/krate/publish/max_size.rs:143:9-143:68: `.add_file("foo_whitelist-1.1.0/big", &[b'a'; 2000] as &[_])`
$DIR/src/tests/krate/publish/max_size.rs:145:5-145:50: `token.publish_crate(crate_to_publish).good();`
$DIR/src/tests/krate/publish/max_size.rs:145:10-145:42: `.publish_crate(crate_to_publish)`
$DIR/src/tests/krate/publish/max_size.rs:145:42-145:49: `.good()`
$DIR/src/tests/krate/publish/rate_limit.rs:14:9-14:83: `.with_rate_limit(LimitedAction::PublishNew, Duration::from_millis(500), 1)`
$DIR/src/tests/krate/publish/rate_limit.rs:15:9-15:22: `.with_token()`
$DIR/src/tests/krate/publish/rate_limit.rs:18:5-30:8: `app.db(|conn| {
        // Ratelimit bucket should next refill in about a year
        let far_future = Utc::now().naive_utc() + Duration::from_secs(60 * 60 * 24 * 365);
        diesel::insert_into(publish_limit_buckets::table)
            .values((
                publish_limit_buckets::user_id.eq(token.as_model().user_id),
                publish_limit_buckets::action.eq(LimitedAction::PublishNew),
                publish_limit_buckets::tokens.eq(0),
                publish_limit_buckets::last_refill.eq(far_future),
            ))
            .execute(conn)
            .expect("Failed to set fake ratelimit")
    });`
$DIR/src/tests/krate/publish/rate_limit.rs:18:8-30:7: `.db(|conn| {
        // Ratelimit bucket should next refill in about a year
        let far_future = Utc::now().naive_utc() + Duration::from_secs(60 * 60 * 24 * 365);
        diesel::insert_into(publish_limit_buckets::table)
            .values((
                publish_limit_buckets::user_id.eq(token.as_model().user_id),
                publish_limit_buckets::action.eq(LimitedAction::PublishNew),
                publish_limit_buckets::tokens.eq(0),
                publish_limit_buckets::last_refill.eq(far_future),
            ))
            .execute(conn)
            .expect("Failed to set fake ratelimit")
    })`
$DIR/src/tests/krate/publish/rate_limit.rs:20:36-20:48: `.naive_utc()`
$DIR/src/tests/krate/publish/rate_limit.rs:21:9-29:52: `diesel::insert_into(publish_limit_buckets::table)
            .values((
                publish_limit_buckets::user_id.eq(token.as_model().user_id),
                publish_limit_buckets::action.eq(LimitedAction::PublishNew),
                publish_limit_buckets::tokens.eq(0),
                publish_limit_buckets::last_refill.eq(far_future),
            ))
            .execute(conn)
            .expect("Failed to set fake ratelimit")`
$DIR/src/tests/krate/publish/rate_limit.rs:22:13-27:15: `.values((
                publish_limit_buckets::user_id.eq(token.as_model().user_id),
                publish_limit_buckets::action.eq(LimitedAction::PublishNew),
                publish_limit_buckets::tokens.eq(0),
                publish_limit_buckets::last_refill.eq(far_future),
            ))`
$DIR/src/tests/krate/publish/rate_limit.rs:23:47-23:76: `.eq(token.as_model().user_id)`
$DIR/src/tests/krate/publish/rate_limit.rs:23:56-23:67: `.as_model()`
$DIR/src/tests/krate/publish/rate_limit.rs:24:46-24:76: `.eq(LimitedAction::PublishNew)`
$DIR/src/tests/krate/publish/rate_limit.rs:25:46-25:52: `.eq(0)`
$DIR/src/tests/krate/publish/rate_limit.rs:26:51-26:66: `.eq(far_future)`
$DIR/src/tests/krate/publish/rate_limit.rs:28:13-28:27: `.execute(conn)`
$DIR/src/tests/krate/publish/rate_limit.rs:33:5-35:57: `token
        .publish_crate(crate_to_publish)
        .assert_rate_limited(LimitedAction::PublishNew);`
$DIR/src/tests/krate/publish/rate_limit.rs:34:9-34:41: `.publish_crate(crate_to_publish)`
$DIR/src/tests/krate/publish/rate_limit.rs:35:9-35:56: `.assert_rate_limited(LimitedAction::PublishNew)`
$DIR/src/tests/krate/publish/rate_limit.rs:39:24-39:65: `.get::<()>("/api/v1/crates/rate_limited")`
$DIR/src/tests/krate/publish/rate_limit.rs:46:9-46:83: `.with_rate_limit(LimitedAction::PublishNew, Duration::from_millis(500), 1)`
$DIR/src/tests/krate/publish/rate_limit.rs:47:9-47:22: `.with_token()`
$DIR/src/tests/krate/publish/rate_limit.rs:50:5-62:8: `app.db(|conn| {
        // Ratelimit bucket should next refill right now!
        let just_now = Utc::now().naive_utc() - Duration::from_millis(500);
        diesel::insert_into(publish_limit_buckets::table)
            .values((
                publish_limit_buckets::user_id.eq(token.as_model().user_id),
                publish_limit_buckets::action.eq(LimitedAction::PublishNew),
                publish_limit_buckets::tokens.eq(0),
                publish_limit_buckets::last_refill.eq(just_now),
            ))
            .execute(conn)
            .expect("Failed to set fake ratelimit")
    });`
$DIR/src/tests/krate/publish/rate_limit.rs:50:8-62:7: `.db(|conn| {
        // Ratelimit bucket should next refill right now!
        let just_now = Utc::now().naive_utc() - Duration::from_millis(500);
        diesel::insert_into(publish_limit_buckets::table)
            .values((
                publish_limit_buckets::user_id.eq(token.as_model().user_id),
                publish_limit_buckets::action.eq(LimitedAction::PublishNew),
                publish_limit_buckets::tokens.eq(0),
                publish_limit_buckets::last_refill.eq(just_now),
            ))
            .execute(conn)
            .expect("Failed to set fake ratelimit")
    })`
$DIR/src/tests/krate/publish/rate_limit.rs:52:34-52:46: `.naive_utc()`
$DIR/src/tests/krate/publish/rate_limit.rs:53:9-61:52: `diesel::insert_into(publish_limit_buckets::table)
            .values((
                publish_limit_buckets::user_id.eq(token.as_model().user_id),
                publish_limit_buckets::action.eq(LimitedAction::PublishNew),
                publish_limit_buckets::tokens.eq(0),
                publish_limit_buckets::last_refill.eq(just_now),
            ))
            .execute(conn)
            .expect("Failed to set fake ratelimit")`
$DIR/src/tests/krate/publish/rate_limit.rs:54:13-59:15: `.values((
                publish_limit_buckets::user_id.eq(token.as_model().user_id),
                publish_limit_buckets::action.eq(LimitedAction::PublishNew),
                publish_limit_buckets::tokens.eq(0),
                publish_limit_buckets::last_refill.eq(just_now),
            ))`
$DIR/src/tests/krate/publish/rate_limit.rs:55:47-55:76: `.eq(token.as_model().user_id)`
$DIR/src/tests/krate/publish/rate_limit.rs:55:56-55:67: `.as_model()`
$DIR/src/tests/krate/publish/rate_limit.rs:56:46-56:76: `.eq(LimitedAction::PublishNew)`
$DIR/src/tests/krate/publish/rate_limit.rs:57:46-57:52: `.eq(0)`
$DIR/src/tests/krate/publish/rate_limit.rs:58:51-58:64: `.eq(just_now)`
$DIR/src/tests/krate/publish/rate_limit.rs:60:13-60:27: `.execute(conn)`
$DIR/src/tests/krate/publish/rate_limit.rs:65:5-65:50: `token.publish_crate(crate_to_publish).good();`
$DIR/src/tests/krate/publish/rate_limit.rs:65:10-65:42: `.publish_crate(crate_to_publish)`
$DIR/src/tests/krate/publish/rate_limit.rs:65:42-65:49: `.good()`
$DIR/src/tests/krate/publish/rate_limit.rs:69:20-69:47: `.show_crate("rate_limited")`
$DIR/src/tests/krate/publish/rate_limit.rs:76:9-81:10: `// Most people get 1 new token every 1 day
        .with_rate_limit(
            LimitedAction::PublishNew,
            Duration::from_secs(60 * 60 * 24),
            1,
        )`
$DIR/src/tests/krate/publish/rate_limit.rs:82:9-82:22: `.with_token()`
$DIR/src/tests/krate/publish/rate_limit.rs:84:5-95:8: `app.db(|conn| {
        // Add an override so our user gets *2* new tokens (expires, y'know, sometime)
        diesel::insert_into(publish_rate_overrides::table)
            .values((
                publish_rate_overrides::user_id.eq(token.as_model().user_id),
                publish_rate_overrides::burst.eq(2),
                publish_rate_overrides::expires_at.eq(None::<NaiveDateTime>),
                publish_rate_overrides::action.eq(LimitedAction::PublishNew),
            ))
            .execute(conn)
            .expect("Failed to add ratelimit override")
    });`
$DIR/src/tests/krate/publish/rate_limit.rs:84:8-95:7: `.db(|conn| {
        // Add an override so our user gets *2* new tokens (expires, y'know, sometime)
        diesel::insert_into(publish_rate_overrides::table)
            .values((
                publish_rate_overrides::user_id.eq(token.as_model().user_id),
                publish_rate_overrides::burst.eq(2),
                publish_rate_overrides::expires_at.eq(None::<NaiveDateTime>),
                publish_rate_overrides::action.eq(LimitedAction::PublishNew),
            ))
            .execute(conn)
            .expect("Failed to add ratelimit override")
    })`
$DIR/src/tests/krate/publish/rate_limit.rs:86:9-94:56: `diesel::insert_into(publish_rate_overrides::table)
            .values((
                publish_rate_overrides::user_id.eq(token.as_model().user_id),
                publish_rate_overrides::burst.eq(2),
                publish_rate_overrides::expires_at.eq(None::<NaiveDateTime>),
                publish_rate_overrides::action.eq(LimitedAction::PublishNew),
            ))
            .execute(conn)
            .expect("Failed to add ratelimit override")`
$DIR/src/tests/krate/publish/rate_limit.rs:87:13-92:15: `.values((
                publish_rate_overrides::user_id.eq(token.as_model().user_id),
                publish_rate_overrides::burst.eq(2),
                publish_rate_overrides::expires_at.eq(None::<NaiveDateTime>),
                publish_rate_overrides::action.eq(LimitedAction::PublishNew),
            ))`
$DIR/src/tests/krate/publish/rate_limit.rs:88:48-88:77: `.eq(token.as_model().user_id)`
$DIR/src/tests/krate/publish/rate_limit.rs:88:57-88:68: `.as_model()`
$DIR/src/tests/krate/publish/rate_limit.rs:89:46-89:52: `.eq(2)`
$DIR/src/tests/krate/publish/rate_limit.rs:90:51-90:77: `.eq(None::<NaiveDateTime>)`
$DIR/src/tests/krate/publish/rate_limit.rs:91:47-91:77: `.eq(LimitedAction::PublishNew)`
$DIR/src/tests/krate/publish/rate_limit.rs:93:13-93:27: `.execute(conn)`
$DIR/src/tests/krate/publish/rate_limit.rs:98:5-98:50: `token.publish_crate(crate_to_publish).good();`
$DIR/src/tests/krate/publish/rate_limit.rs:98:10-98:42: `.publish_crate(crate_to_publish)`
$DIR/src/tests/krate/publish/rate_limit.rs:98:42-98:49: `.good()`
$DIR/src/tests/krate/publish/rate_limit.rs:102:20-102:48: `.show_crate("rate_limited1")`
$DIR/src/tests/krate/publish/rate_limit.rs:106:5-106:50: `token.publish_crate(crate_to_publish).good();`
$DIR/src/tests/krate/publish/rate_limit.rs:106:10-106:42: `.publish_crate(crate_to_publish)`
$DIR/src/tests/krate/publish/rate_limit.rs:106:42-106:49: `.good()`
$DIR/src/tests/krate/publish/rate_limit.rs:110:20-110:48: `.show_crate("rate_limited2")`
$DIR/src/tests/krate/publish/rate_limit.rs:114:5-116:57: `token
        .publish_crate(crate_to_publish)
        .assert_rate_limited(LimitedAction::PublishNew);`
$DIR/src/tests/krate/publish/rate_limit.rs:115:9-115:41: `.publish_crate(crate_to_publish)`
$DIR/src/tests/krate/publish/rate_limit.rs:116:9-116:56: `.assert_rate_limited(LimitedAction::PublishNew)`
$DIR/src/tests/krate/publish/rate_limit.rs:120:24-120:66: `.get::<()>("/api/v1/crates/rate_limited3")`
$DIR/src/tests/krate/publish/rate_limit.rs:127:9-132:10: `// Most people get 1 new token every 1 day
        .with_rate_limit(
            LimitedAction::PublishNew,
            Duration::from_secs(60 * 60 * 24),
            1,
        )`
$DIR/src/tests/krate/publish/rate_limit.rs:133:9-133:22: `.with_token()`
$DIR/src/tests/krate/publish/rate_limit.rs:135:5-147:8: `app.db(|conn| {
        // Add an override so our user gets *2* new tokens (expires, y'know, sometime)
        let just_now = Utc::now().naive_utc() - Duration::from_secs(1);
        diesel::insert_into(publish_rate_overrides::table)
            .values((
                publish_rate_overrides::user_id.eq(token.as_model().user_id),
                publish_rate_overrides::burst.eq(2),
                publish_rate_overrides::expires_at.eq(just_now),
                publish_rate_overrides::action.eq(LimitedAction::PublishNew),
            ))
            .execute(conn)
            .expect("Failed to add ratelimit override")
    });`
$DIR/src/tests/krate/publish/rate_limit.rs:135:8-147:7: `.db(|conn| {
        // Add an override so our user gets *2* new tokens (expires, y'know, sometime)
        let just_now = Utc::now().naive_utc() - Duration::from_secs(1);
        diesel::insert_into(publish_rate_overrides::table)
            .values((
                publish_rate_overrides::user_id.eq(token.as_model().user_id),
                publish_rate_overrides::burst.eq(2),
                publish_rate_overrides::expires_at.eq(just_now),
                publish_rate_overrides::action.eq(LimitedAction::PublishNew),
            ))
            .execute(conn)
            .expect("Failed to add ratelimit override")
    })`
$DIR/src/tests/krate/publish/rate_limit.rs:137:34-137:46: `.naive_utc()`
$DIR/src/tests/krate/publish/rate_limit.rs:138:9-146:56: `diesel::insert_into(publish_rate_overrides::table)
            .values((
                publish_rate_overrides::user_id.eq(token.as_model().user_id),
                publish_rate_overrides::burst.eq(2),
                publish_rate_overrides::expires_at.eq(just_now),
                publish_rate_overrides::action.eq(LimitedAction::PublishNew),
            ))
            .execute(conn)
            .expect("Failed to add ratelimit override")`
$DIR/src/tests/krate/publish/rate_limit.rs:139:13-144:15: `.values((
                publish_rate_overrides::user_id.eq(token.as_model().user_id),
                publish_rate_overrides::burst.eq(2),
                publish_rate_overrides::expires_at.eq(just_now),
                publish_rate_overrides::action.eq(LimitedAction::PublishNew),
            ))`
$DIR/src/tests/krate/publish/rate_limit.rs:140:48-140:77: `.eq(token.as_model().user_id)`
$DIR/src/tests/krate/publish/rate_limit.rs:140:57-140:68: `.as_model()`
$DIR/src/tests/krate/publish/rate_limit.rs:141:46-141:52: `.eq(2)`
$DIR/src/tests/krate/publish/rate_limit.rs:142:51-142:64: `.eq(just_now)`
$DIR/src/tests/krate/publish/rate_limit.rs:143:47-143:77: `.eq(LimitedAction::PublishNew)`
$DIR/src/tests/krate/publish/rate_limit.rs:145:13-145:27: `.execute(conn)`
$DIR/src/tests/krate/publish/rate_limit.rs:150:5-150:50: `token.publish_crate(crate_to_publish).good();`
$DIR/src/tests/krate/publish/rate_limit.rs:150:10-150:42: `.publish_crate(crate_to_publish)`
$DIR/src/tests/krate/publish/rate_limit.rs:150:42-150:49: `.good()`
$DIR/src/tests/krate/publish/rate_limit.rs:154:20-154:48: `.show_crate("rate_limited1")`
$DIR/src/tests/krate/publish/rate_limit.rs:158:5-160:57: `token
        .publish_crate(crate_to_publish)
        .assert_rate_limited(LimitedAction::PublishNew);`
$DIR/src/tests/krate/publish/rate_limit.rs:159:9-159:41: `.publish_crate(crate_to_publish)`
$DIR/src/tests/krate/publish/rate_limit.rs:160:9-160:56: `.assert_rate_limited(LimitedAction::PublishNew)`
$DIR/src/tests/krate/publish/rate_limit.rs:164:24-164:66: `.get::<()>("/api/v1/crates/rate_limited2")`
$DIR/src/tests/krate/publish/rate_limit.rs:171:9-171:85: `.with_rate_limit(LimitedAction::PublishNew, Duration::from_secs(60 * 60), 1)`
$DIR/src/tests/krate/publish/rate_limit.rs:172:9-172:22: `.with_token()`
$DIR/src/tests/krate/publish/rate_limit.rs:176:5-176:50: `token.publish_crate(crate_to_publish).good();`
$DIR/src/tests/krate/publish/rate_limit.rs:176:10-176:42: `.publish_crate(crate_to_publish)`
$DIR/src/tests/krate/publish/rate_limit.rs:176:42-176:49: `.good()`
$DIR/src/tests/krate/publish/rate_limit.rs:179:10-179:37: `.publish_crate(new_version)`
$DIR/src/tests/krate/publish/rate_limit.rs:185:9-185:86: `.with_rate_limit(LimitedAction::PublishUpdate, Duration::from_millis(500), 1)`
$DIR/src/tests/krate/publish/rate_limit.rs:186:9-186:22: `.with_token()`
$DIR/src/tests/krate/publish/rate_limit.rs:190:5-190:50: `token.publish_crate(crate_to_publish).good();`
$DIR/src/tests/krate/publish/rate_limit.rs:190:10-190:42: `.publish_crate(crate_to_publish)`
$DIR/src/tests/krate/publish/rate_limit.rs:190:42-190:49: `.good()`
$DIR/src/tests/krate/publish/rate_limit.rs:192:20-192:48: `.show_crate("rate_limited1")`
$DIR/src/tests/krate/publish/rate_limit.rs:198:5-198:50: `token.publish_crate(crate_to_publish).good();`
$DIR/src/tests/krate/publish/rate_limit.rs:198:10-198:42: `.publish_crate(crate_to_publish)`
$DIR/src/tests/krate/publish/rate_limit.rs:198:42-198:49: `.good()`
$DIR/src/tests/krate/publish/rate_limit.rs:200:20-200:48: `.show_crate("rate_limited1")`
$DIR/src/tests/krate/publish/rate_limit.rs:206:5-208:60: `token
        .publish_crate(crate_to_publish)
        .assert_rate_limited(LimitedAction::PublishUpdate);`
$DIR/src/tests/krate/publish/rate_limit.rs:207:9-207:41: `.publish_crate(crate_to_publish)`
$DIR/src/tests/krate/publish/rate_limit.rs:208:9-208:59: `.assert_rate_limited(LimitedAction::PublishUpdate)`
$DIR/src/tests/krate/publish/rate_limit.rs:211:20-211:48: `.show_crate("rate_limited1")`
$DIR/src/tests/krate/publish/rate_limit.rs:216:5-216:47: `thread::sleep(Duration::from_millis(500));`
$DIR/src/tests/krate/publish/rate_limit.rs:219:5-219:50: `token.publish_crate(crate_to_publish).good();`
$DIR/src/tests/krate/publish/rate_limit.rs:219:10-219:42: `.publish_crate(crate_to_publish)`
$DIR/src/tests/krate/publish/rate_limit.rs:219:42-219:49: `.good()`
$DIR/src/tests/krate/publish/rate_limit.rs:221:20-221:48: `.show_crate("rate_limited1")`
$DIR/src/tests/krate/publish/rate_limit.rs:229:9-233:10: `.with_rate_limit(
            LimitedAction::PublishUpdate,
            Duration::from_secs(60 * 60),
            1,
        )`
$DIR/src/tests/krate/publish/rate_limit.rs:234:9-234:22: `.with_token()`
$DIR/src/tests/krate/publish/rate_limit.rs:238:10-238:42: `.publish_crate(crate_to_publish)`
$DIR/src/tests/krate/publish/rate_limit.rs:242:10-242:42: `.publish_crate(crate_to_publish)`
$DIR/src/tests/krate/publish/readme.rs:8:45-8:58: `.with_token()`
$DIR/src/tests/krate/publish/readme.rs:10:70-10:92: `.readme("hello world")`
$DIR/src/tests/krate/publish/readme.rs:11:25-11:57: `.publish_crate(crate_to_publish)`
$DIR/src/tests/krate/publish/readme.rs:13:5-16:8: `assert_json_snapshot!(response.into_json(), {
        ".crate.created_at" => "[datetime]",
        ".crate.updated_at" => "[datetime]",
    });`
$DIR/src/tests/krate/publish/readme.rs:28:45-28:58: `.with_token()`
$DIR/src/tests/krate/publish/readme.rs:30:70-30:81: `.readme("")`
$DIR/src/tests/krate/publish/readme.rs:31:25-31:57: `.publish_crate(crate_to_publish)`
$DIR/src/tests/krate/publish/readme.rs:33:5-36:8: `assert_json_snapshot!(response.into_json(), {
        ".crate.created_at" => "[datetime]",
        ".crate.updated_at" => "[datetime]",
    });`
$DIR/src/tests/krate/publish/readme.rs:47:45-47:58: `.with_token()`
$DIR/src/tests/krate/publish/readme.rs:49:74-49:96: `.readme("hello world")`
$DIR/src/tests/krate/publish/readme.rs:50:25-50:57: `.publish_crate(crate_to_publish)`
$DIR/src/tests/krate/publish/readme.rs:52:5-55:8: `assert_json_snapshot!(response.into_json(), {
        ".crate.created_at" => "[datetime]",
        ".crate.updated_at" => "[datetime]",
    });`
$DIR/src/tests/krate/publish/readme.rs:67:51-67:64: `.with_token()`
$DIR/src/tests/krate/publish/readme.rs:68:20-68:31: `.as_model()`
$DIR/src/tests/krate/publish/readme.rs:71:5-75:8: `app.db(|conn| {
        CrateBuilder::new("docscrate", user.id)
            .version("0.2.0")
            .expect_build(conn);
    });`
$DIR/src/tests/krate/publish/readme.rs:71:8-75:7: `.db(|conn| {
        CrateBuilder::new("docscrate", user.id)
            .version("0.2.0")
            .expect_build(conn);
    })`
$DIR/src/tests/krate/publish/readme.rs:72:9-74:33: `CrateBuilder::new("docscrate", user.id)
            .version("0.2.0")
            .expect_build(conn);`
$DIR/src/tests/krate/publish/readme.rs:73:13-73:30: `.version("0.2.0")`
$DIR/src/tests/krate/publish/readme.rs:74:13-74:32: `.expect_build(conn)`
$DIR/src/tests/krate/publish/readme.rs:79:20-79:44: `.show_crate("docscrate")`
$DIR/src/tests/krate/publish/readme.rs:83:69-83:100: `.documentation("http://foo.rs")`
$DIR/src/tests/krate/publish/readme.rs:84:21-84:53: `.publish_crate(crate_to_publish)`
$DIR/src/tests/krate/publish/readme.rs:84:53-84:60: `.good()`
$DIR/src/tests/krate/publish/readme.rs:88:20-88:44: `.show_crate("docscrate")`
$DIR/src/tests/krate/publish/readme.rs:93:21-93:53: `.publish_crate(crate_to_publish)`
$DIR/src/tests/krate/publish/readme.rs:93:53-93:60: `.good()`
$DIR/src/tests/krate/publish/readme.rs:97:20-97:44: `.show_crate("docscrate")`
$DIR/src/tests/krate/publish/similar_names.rs:8:48-8:61: `.with_token()`
$DIR/src/tests/krate/publish/similar_names.rs:10:5-14:8: `app.db(|conn| {
        CrateBuilder::new("Foo_similar", user.as_model().id)
            .version("1.0.0")
            .expect_build(conn);
    });`
$DIR/src/tests/krate/publish/similar_names.rs:10:8-14:7: `.db(|conn| {
        CrateBuilder::new("Foo_similar", user.as_model().id)
            .version("1.0.0")
            .expect_build(conn);
    })`
$DIR/src/tests/krate/publish/similar_names.rs:11:9-13:33: `CrateBuilder::new("Foo_similar", user.as_model().id)
            .version("1.0.0")
            .expect_build(conn);`
$DIR/src/tests/krate/publish/similar_names.rs:11:46-11:57: `.as_model()`
$DIR/src/tests/krate/publish/similar_names.rs:12:13-12:30: `.version("1.0.0")`
$DIR/src/tests/krate/publish/similar_names.rs:13:13-13:32: `.expect_build(conn)`
$DIR/src/tests/krate/publish/similar_names.rs:17:25-17:57: `.publish_crate(crate_to_publish)`
$DIR/src/tests/krate/publish/similar_names.rs:19:5-19:49: `assert_json_snapshot!(response.into_json());`
$DIR/src/tests/krate/publish/similar_names.rs:26:48-26:61: `.with_token()`
$DIR/src/tests/krate/publish/similar_names.rs:28:5-32:8: `app.db(|conn| {
        CrateBuilder::new("foo_bar_hyphen", user.as_model().id)
            .version("1.0.0")
            .expect_build(conn);
    });`
$DIR/src/tests/krate/publish/similar_names.rs:28:8-32:7: `.db(|conn| {
        CrateBuilder::new("foo_bar_hyphen", user.as_model().id)
            .version("1.0.0")
            .expect_build(conn);
    })`
$DIR/src/tests/krate/publish/similar_names.rs:29:9-31:33: `CrateBuilder::new("foo_bar_hyphen", user.as_model().id)
            .version("1.0.0")
            .expect_build(conn);`
$DIR/src/tests/krate/publish/similar_names.rs:29:49-29:60: `.as_model()`
$DIR/src/tests/krate/publish/similar_names.rs:30:13-30:30: `.version("1.0.0")`
$DIR/src/tests/krate/publish/similar_names.rs:31:13-31:32: `.expect_build(conn)`
$DIR/src/tests/krate/publish/similar_names.rs:35:25-35:57: `.publish_crate(crate_to_publish)`
$DIR/src/tests/krate/publish/similar_names.rs:37:5-37:49: `assert_json_snapshot!(response.into_json());`
$DIR/src/tests/krate/publish/similar_names.rs:44:48-44:61: `.with_token()`
$DIR/src/tests/krate/publish/similar_names.rs:46:5-50:8: `app.db(|conn| {
        CrateBuilder::new("foo-bar-underscore", user.as_model().id)
            .version("1.0.0")
            .expect_build(conn);
    });`
$DIR/src/tests/krate/publish/similar_names.rs:46:8-50:7: `.db(|conn| {
        CrateBuilder::new("foo-bar-underscore", user.as_model().id)
            .version("1.0.0")
            .expect_build(conn);
    })`
$DIR/src/tests/krate/publish/similar_names.rs:47:9-49:33: `CrateBuilder::new("foo-bar-underscore", user.as_model().id)
            .version("1.0.0")
            .expect_build(conn);`
$DIR/src/tests/krate/publish/similar_names.rs:47:53-47:64: `.as_model()`
$DIR/src/tests/krate/publish/similar_names.rs:48:13-48:30: `.version("1.0.0")`
$DIR/src/tests/krate/publish/similar_names.rs:49:13-49:32: `.expect_build(conn)`
$DIR/src/tests/krate/publish/similar_names.rs:53:25-53:57: `.publish_crate(crate_to_publish)`
$DIR/src/tests/krate/publish/similar_names.rs:55:5-55:49: `assert_json_snapshot!(response.into_json());`
$DIR/src/tests/krate/publish/tarball.rs:9:41-9:53: `.with_user()`
$DIR/src/tests/krate/publish/tarball.rs:12:9-12:37: `.add_file("foo-1.0.0/a", "")`
$DIR/src/tests/krate/publish/tarball.rs:13:9-13:37: `.add_file("bar-1.0.0/a", "")`
$DIR/src/tests/krate/publish/tarball.rs:15:24-15:47: `.publish_crate(builder)`
$DIR/src/tests/krate/publish/tarball.rs:27:45-27:58: `.with_token()`
$DIR/src/tests/krate/publish/tarball.rs:33:9-33:54: `assert_ok!(header.set_path("foo-1.1.0/bar"));`
$DIR/src/tests/krate/publish/tarball.rs:34:9-34:28: `header.set_size(0);`
$DIR/src/tests/krate/publish/tarball.rs:34:15-34:27: `.set_size(0)`
$DIR/src/tests/krate/publish/tarball.rs:35:9-35:60: `header.set_entry_type(tar::EntryType::hard_link());`
$DIR/src/tests/krate/publish/tarball.rs:35:15-35:59: `.set_entry_type(tar::EntryType::hard_link())`
$DIR/src/tests/krate/publish/tarball.rs:36:9-36:63: `assert_ok!(header.set_link_name("foo-1.1.0/another"));`
$DIR/src/tests/krate/publish/tarball.rs:37:9-37:28: `header.set_cksum();`
$DIR/src/tests/krate/publish/tarball.rs:37:15-37:27: `.set_cksum()`
$DIR/src/tests/krate/publish/tarball.rs:38:9-38:63: `assert_ok!(builder.as_mut().append(&header, &[][..]));`
$DIR/src/tests/krate/publish/tarball.rs:40:9-40:24: `builder.build()`
$DIR/src/tests/krate/publish/tarball.rs:40:16-40:24: `.build()`
$DIR/src/tests/krate/publish/tarball.rs:43:63-43:71: `.build()`
$DIR/src/tests/krate/publish/tarball.rs:46:25-46:45: `.publish_crate(body)`
$DIR/src/tests/krate/publish/tarball.rs:48:5-48:49: `assert_json_snapshot!(response.into_json());`
$DIR/src/tests/krate/publish/tarball.rs:54:41-54:53: `.with_user()`
$DIR/src/tests/krate/publish/tarball.rs:56:24-56:52: `.publish_crate(&[] as &[u8])`
$DIR/src/tests/krate/publish/tarball.rs:58:5-58:49: `assert_json_snapshot!(response.into_json());`
$DIR/src/tests/krate/publish/tarball.rs:64:45-64:58: `.with_token()`
$DIR/src/tests/krate/publish/tarball.rs:66:25-66:59: `.publish_crate(&[0u8, 0] as &[u8])`
$DIR/src/tests/krate/publish/tarball.rs:68:5-68:49: `assert_json_snapshot!(response.into_json());`
$DIR/src/tests/krate/publish/tarball.rs:74:45-74:58: `.with_token()`
$DIR/src/tests/krate/publish/tarball.rs:76:25-76:70: `.publish_crate(&[100u8, 0, 0, 0, 0] as &[u8])`
$DIR/src/tests/krate/publish/tarball.rs:78:5-78:49: `assert_json_snapshot!(response.into_json());`
$DIR/src/tests/krate/publish/tarball.rs:84:45-84:58: `.with_token()`
$DIR/src/tests/krate/publish/tarball.rs:86:25-86:81: `.publish_crate(&[2, 0, 0, 0, b'{', b'}', 0, 0] as &[u8])`
$DIR/src/tests/krate/publish/tarball.rs:88:5-88:49: `assert_json_snapshot!(response.into_json());`
$DIR/src/tests/krate/publish/tarball.rs:94:45-94:58: `.with_token()`
$DIR/src/tests/krate/publish/tarball.rs:96:25-96:92: `.publish_crate(&[2, 0, 0, 0, b'{', b'}', 100, 0, 0, 0, 0] as &[u8])`
$DIR/src/tests/krate/publish/tarball.rs:98:5-98:49: `assert_json_snapshot!(response.into_json());`
$DIR/src/tests/krate/publish/timestamps.rs:10:41-10:53: `.with_user()`
$DIR/src/tests/krate/publish/timestamps.rs:13:5-13:49: `user.publish_crate(crate_to_publish).good();`
$DIR/src/tests/krate/publish/timestamps.rs:13:9-13:41: `.publish_crate(crate_to_publish)`
$DIR/src/tests/krate/publish/timestamps.rs:13:41-13:48: `.good()`
$DIR/src/tests/krate/publish/timestamps.rs:15:5-20:8: `app.db(|conn| {
        diesel::update(crates::table)
            .set(crates::updated_at.eq(crates::updated_at - 1.hour()))
            .execute(conn)
            .unwrap();
    });`
$DIR/src/tests/krate/publish/timestamps.rs:15:8-20:7: `.db(|conn| {
        diesel::update(crates::table)
            .set(crates::updated_at.eq(crates::updated_at - 1.hour()))
            .execute(conn)
            .unwrap();
    })`
$DIR/src/tests/krate/publish/timestamps.rs:16:9-19:23: `diesel::update(crates::table)
            .set(crates::updated_at.eq(crates::updated_at - 1.hour()))
            .execute(conn)
            .unwrap();`
$DIR/src/tests/krate/publish/timestamps.rs:17:13-17:71: `.set(crates::updated_at.eq(crates::updated_at - 1.hour()))`
$DIR/src/tests/krate/publish/timestamps.rs:17:36-17:70: `.eq(crates::updated_at - 1.hour())`
$DIR/src/tests/krate/publish/timestamps.rs:17:62-17:69: `.hour()`
$DIR/src/tests/krate/publish/timestamps.rs:18:13-18:27: `.execute(conn)`
$DIR/src/tests/krate/publish/timestamps.rs:22:35-22:73: `.show_crate("foo_versions_updated_at")`
$DIR/src/tests/krate/publish/timestamps.rs:26:5-26:49: `user.publish_crate(crate_to_publish).good();`
$DIR/src/tests/krate/publish/timestamps.rs:26:9-26:41: `.publish_crate(crate_to_publish)`
$DIR/src/tests/krate/publish/timestamps.rs:26:41-26:48: `.good()`
$DIR/src/tests/krate/publish/timestamps.rs:28:35-28:73: `.show_crate("foo_versions_updated_at")`
$DIR/src/tests/krate/publish/validation.rs:9:45-9:58: `.with_token()`
$DIR/src/tests/krate/publish/validation.rs:11:63-11:71: `.build()`
$DIR/src/tests/krate/publish/validation.rs:14:25-14:45: `.publish_crate(body)`
$DIR/src/tests/krate/publish/validation.rs:16:5-16:49: `assert_json_snapshot!(response.into_json());`
$DIR/src/tests/krate/publish/validation.rs:22:45-22:58: `.with_token()`
$DIR/src/tests/krate/publish/validation.rs:26:29-26:61: `.publish_crate(crate_to_publish)`
$DIR/src/tests/krate/publish/validation.rs:28:9-28:53: `assert_json_snapshot!(response.into_json());`
$DIR/src/tests/krate/publish/validation.rs:31:5-31:18: `bad_name("");`
$DIR/src/tests/krate/publish/validation.rs:32:5-32:25: `bad_name("foo bar");`
$DIR/src/tests/krate/publish/validation.rs:33:5-33:48: `bad_name(&"a".repeat(MAX_NAME_LENGTH + 1));`
$DIR/src/tests/krate/publish/validation.rs:33:18-33:46: `.repeat(MAX_NAME_LENGTH + 1)`
$DIR/src/tests/krate/publish/validation.rs:34:5-34:23: `bad_name("snow☃");`
$DIR/src/tests/krate/publish/validation.rs:35:5-35:25: `bad_name("áccênts");`
$DIR/src/tests/krate/publish/validation.rs:37:5-37:21: `bad_name("std");`
$DIR/src/tests/krate/publish/validation.rs:38:5-38:21: `bad_name("STD");`
$DIR/src/tests/krate/publish/validation.rs:39:5-39:29: `bad_name("compiler-rt");`
$DIR/src/tests/krate/publish/validation.rs:40:5-40:29: `bad_name("compiler_rt");`
$DIR/src/tests/krate/publish/validation.rs:41:5-41:29: `bad_name("coMpiLer_Rt");`
$DIR/src/tests/krate/publish/validation.rs:48:45-48:58: `.with_token()`
$DIR/src/tests/krate/publish/validation.rs:50:62-50:70: `.build()`
$DIR/src/tests/krate/publish/validation.rs:51:24-51:75: `.replace(r#""vers":"1.0.0""#, r#""vers":"broken""#)`
$DIR/src/tests/krate/publish/validation.rs:55:25-55:45: `.publish_crate(body)`
$DIR/src/tests/krate/publish/validation.rs:56:5-56:49: `assert_json_snapshot!(response.into_json());`
$DIR/src/tests/krate/publish/validation.rs:62:45-62:58: `.with_token()`
$DIR/src/tests/krate/publish/validation.rs:65:9-65:25: `.unset_license()`
$DIR/src/tests/krate/publish/validation.rs:66:9-66:29: `.unset_description()`
$DIR/src/tests/krate/publish/validation.rs:68:25-68:57: `.publish_crate(crate_to_publish)`
$DIR/src/tests/krate/publish/validation.rs:70:5-70:49: `assert_json_snapshot!(response.into_json());`
$DIR/src/tests/krate/publish/validation.rs:72:72-72:92: `.unset_description()`
$DIR/src/tests/krate/publish/validation.rs:74:25-74:57: `.publish_crate(crate_to_publish)`
$DIR/src/tests/krate/publish/validation.rs:76:5-76:49: `assert_json_snapshot!(response.into_json());`
$DIR/src/tests/krate/publish/validation.rs:79:9-79:25: `.unset_license()`
$DIR/src/tests/krate/publish/validation.rs:80:9-80:29: `.license_file("foo")`
$DIR/src/tests/krate/publish/validation.rs:81:9-81:29: `.unset_description()`
$DIR/src/tests/krate/publish/validation.rs:83:25-83:57: `.publish_crate(crate_to_publish)`
$DIR/src/tests/krate/publish/validation.rs:85:5-85:49: `assert_json_snapshot!(response.into_json());`
$DIR/src/tests/krate/publish/validation.rs:92:45-92:58: `.with_token()`
$DIR/src/tests/krate/publish/validation.rs:95:14-95:91: `.publish_crate(PublishBuilder::new("foo", "1.0.0").license("MIT AND foobar"))`
$DIR/src/tests/krate/publish/validation.rs:95:64-95:90: `.license("MIT AND foobar")`
$DIR/src/tests/krate/publish/validation.rs:97:5-97:49: `assert_json_snapshot!(response.into_json());`
$DIR/src/tests/krate/publish/validation.rs:103:45-103:58: `.with_token()`
$DIR/src/tests/krate/publish/validation.rs:105:25-107:6: `.publish_crate(
        PublishBuilder::new("foo", "1.0.0").documentation("javascript:alert('boom')"),
    )`
$DIR/src/tests/krate/publish/validation.rs:106:44-106:86: `.documentation("javascript:alert('boom')")`
$DIR/src/tests/krate/publish/validation.rs:109:5-109:49: `assert_json_snapshot!(response.into_json());`
$DIR/src/tests/krate/versions.rs:14:44-14:56: `.with_user()`
$DIR/src/tests/krate/versions.rs:15:20-15:31: `.as_model()`
$DIR/src/tests/krate/versions.rs:16:5-30:8: `app.db(|conn| {
        CrateBuilder::new("foo_versions", user.id)
            .version("0.5.1")
            .version(VersionBuilder::new("1.0.0").rust_version("1.64"))
            .version("0.5.0")
            .expect_build(conn);
        // Make version 1.0.0 mimic a version published before we started recording who published
        // versions
        let none: Option<i32> = None;
        update(versions::table)
            .filter(versions::num.eq("1.0.0"))
            .set(versions::published_by.eq(none))
            .execute(conn)
            .unwrap();
    });`
$DIR/src/tests/krate/versions.rs:16:8-30:7: `.db(|conn| {
        CrateBuilder::new("foo_versions", user.id)
            .version("0.5.1")
            .version(VersionBuilder::new("1.0.0").rust_version("1.64"))
            .version("0.5.0")
            .expect_build(conn);
        // Make version 1.0.0 mimic a version published before we started recording who published
        // versions
        let none: Option<i32> = None;
        update(versions::table)
            .filter(versions::num.eq("1.0.0"))
            .set(versions::published_by.eq(none))
            .execute(conn)
            .unwrap();
    })`
$DIR/src/tests/krate/versions.rs:17:9-21:33: `CrateBuilder::new("foo_versions", user.id)
            .version("0.5.1")
            .version(VersionBuilder::new("1.0.0").rust_version("1.64"))
            .version("0.5.0")
            .expect_build(conn);`
$DIR/src/tests/krate/versions.rs:18:13-18:30: `.version("0.5.1")`
$DIR/src/tests/krate/versions.rs:19:13-19:72: `.version(VersionBuilder::new("1.0.0").rust_version("1.64"))`
$DIR/src/tests/krate/versions.rs:19:50-19:71: `.rust_version("1.64")`
$DIR/src/tests/krate/versions.rs:20:13-20:30: `.version("0.5.0")`
$DIR/src/tests/krate/versions.rs:21:13-21:32: `.expect_build(conn)`
$DIR/src/tests/krate/versions.rs:25:9-29:23: `update(versions::table)
            .filter(versions::num.eq("1.0.0"))
            .set(versions::published_by.eq(none))
            .execute(conn)
            .unwrap();`
$DIR/src/tests/krate/versions.rs:26:13-26:47: `.filter(versions::num.eq("1.0.0"))`
$DIR/src/tests/krate/versions.rs:26:34-26:46: `.eq("1.0.0")`
$DIR/src/tests/krate/versions.rs:27:13-27:50: `.set(versions::published_by.eq(none))`
$DIR/src/tests/krate/versions.rs:27:40-27:49: `.eq(none)`
$DIR/src/tests/krate/versions.rs:28:13-28:27: `.execute(conn)`
$DIR/src/tests/krate/versions.rs:32:34-32:78: `.get("/api/v1/crates/foo_versions/versions")`
$DIR/src/tests/krate/versions.rs:32:78-32:85: `.good()`
$DIR/src/tests/krate/versions.rs:36:5-36:61: `assert_some_eq!(&json.versions[0].rust_version, "1.64");`
$DIR/src/tests/krate/versions.rs:39:5-39:50: `assert_none!(&json.versions[0].published_by);`
$DIR/src/tests/krate/yanking.rs:13:53-13:66: `.with_token()`
$DIR/src/tests/krate/yanking.rs:17:5-17:50: `token.publish_crate(crate_to_publish).good();`
$DIR/src/tests/krate/yanking.rs:17:10-17:42: `.publish_crate(crate_to_publish)`
$DIR/src/tests/krate/yanking.rs:17:42-17:49: `.good()`
$DIR/src/tests/krate/yanking.rs:19:21-19:51: `.crates_from_index_head("fyk")`
$DIR/src/tests/krate/yanking.rs:21:5-21:46: `assert_some_eq!(crates[0].yanked, false);`
$DIR/src/tests/krate/yanking.rs:24:20-24:49: `.show_version("fyk", "1.0.0")`
$DIR/src/tests/krate/yanking.rs:28:5-28:39: `token.yank("fyk", "1.0.0").good();`
$DIR/src/tests/krate/yanking.rs:28:10-28:31: `.yank("fyk", "1.0.0")`
$DIR/src/tests/krate/yanking.rs:28:31-28:38: `.good()`
$DIR/src/tests/krate/yanking.rs:30:21-30:51: `.crates_from_index_head("fyk")`
$DIR/src/tests/krate/yanking.rs:32:5-32:45: `assert_some_eq!(crates[0].yanked, true);`
$DIR/src/tests/krate/yanking.rs:34:20-34:49: `.show_version("fyk", "1.0.0")`
$DIR/src/tests/krate/yanking.rs:38:5-38:41: `token.unyank("fyk", "1.0.0").good();`
$DIR/src/tests/krate/yanking.rs:38:10-38:33: `.unyank("fyk", "1.0.0")`
$DIR/src/tests/krate/yanking.rs:38:33-38:40: `.good()`
$DIR/src/tests/krate/yanking.rs:40:21-40:51: `.crates_from_index_head("fyk")`
$DIR/src/tests/krate/yanking.rs:42:5-42:46: `assert_some_eq!(crates[0].yanked, false);`
$DIR/src/tests/krate/yanking.rs:44:20-44:49: `.show_version("fyk", "1.0.0")`
$DIR/src/tests/krate/yanking.rs:48:5-48:40: `cookie.yank("fyk", "1.0.0").good();`
$DIR/src/tests/krate/yanking.rs:48:11-48:32: `.yank("fyk", "1.0.0")`
$DIR/src/tests/krate/yanking.rs:48:32-48:39: `.good()`
$DIR/src/tests/krate/yanking.rs:50:21-50:51: `.crates_from_index_head("fyk")`
$DIR/src/tests/krate/yanking.rs:52:5-52:45: `assert_some_eq!(crates[0].yanked, true);`
$DIR/src/tests/krate/yanking.rs:54:20-54:49: `.show_version("fyk", "1.0.0")`
$DIR/src/tests/krate/yanking.rs:58:5-58:42: `cookie.unyank("fyk", "1.0.0").good();`
$DIR/src/tests/krate/yanking.rs:58:11-58:34: `.unyank("fyk", "1.0.0")`
$DIR/src/tests/krate/yanking.rs:58:34-58:41: `.good()`
$DIR/src/tests/krate/yanking.rs:60:21-60:51: `.crates_from_index_head("fyk")`
$DIR/src/tests/krate/yanking.rs:62:5-62:46: `assert_some_eq!(crates[0].yanked, false);`
$DIR/src/tests/krate/yanking.rs:64:20-64:49: `.show_version("fyk", "1.0.0")`
$DIR/src/tests/krate/yanking.rs:78:9-78:83: `.with_rate_limit(LimitedAction::YankUnyank, Duration::from_millis(500), 1)`
$DIR/src/tests/krate/yanking.rs:79:9-79:22: `.with_token()`
$DIR/src/tests/krate/yanking.rs:82:5-94:8: `app.db(|conn| {
        // Ratelimit bucket should next refill in about a year
        let far_future = Utc::now().naive_utc() + Duration::from_secs(60 * 60 * 24 * 365);
        diesel::insert_into(publish_limit_buckets::table)
            .values((
                publish_limit_buckets::user_id.eq(token.as_model().user_id),
                publish_limit_buckets::action.eq(LimitedAction::YankUnyank),
                publish_limit_buckets::tokens.eq(0),
                publish_limit_buckets::last_refill.eq(far_future),
            ))
            .execute(conn)
            .expect("Failed to set fake ratelimit")
    });`
$DIR/src/tests/krate/yanking.rs:82:8-94:7: `.db(|conn| {
        // Ratelimit bucket should next refill in about a year
        let far_future = Utc::now().naive_utc() + Duration::from_secs(60 * 60 * 24 * 365);
        diesel::insert_into(publish_limit_buckets::table)
            .values((
                publish_limit_buckets::user_id.eq(token.as_model().user_id),
                publish_limit_buckets::action.eq(LimitedAction::YankUnyank),
                publish_limit_buckets::tokens.eq(0),
                publish_limit_buckets::last_refill.eq(far_future),
            ))
            .execute(conn)
            .expect("Failed to set fake ratelimit")
    })`
$DIR/src/tests/krate/yanking.rs:84:36-84:48: `.naive_utc()`
$DIR/src/tests/krate/yanking.rs:85:9-93:52: `diesel::insert_into(publish_limit_buckets::table)
            .values((
                publish_limit_buckets::user_id.eq(token.as_model().user_id),
                publish_limit_buckets::action.eq(LimitedAction::YankUnyank),
                publish_limit_buckets::tokens.eq(0),
                publish_limit_buckets::last_refill.eq(far_future),
            ))
            .execute(conn)
            .expect("Failed to set fake ratelimit")`
$DIR/src/tests/krate/yanking.rs:86:13-91:15: `.values((
                publish_limit_buckets::user_id.eq(token.as_model().user_id),
                publish_limit_buckets::action.eq(LimitedAction::YankUnyank),
                publish_limit_buckets::tokens.eq(0),
                publish_limit_buckets::last_refill.eq(far_future),
            ))`
$DIR/src/tests/krate/yanking.rs:87:47-87:76: `.eq(token.as_model().user_id)`
$DIR/src/tests/krate/yanking.rs:87:56-87:67: `.as_model()`
$DIR/src/tests/krate/yanking.rs:88:46-88:76: `.eq(LimitedAction::YankUnyank)`
$DIR/src/tests/krate/yanking.rs:89:46-89:52: `.eq(0)`
$DIR/src/tests/krate/yanking.rs:90:51-90:66: `.eq(far_future)`
$DIR/src/tests/krate/yanking.rs:92:13-92:27: `.execute(conn)`
$DIR/src/tests/krate/yanking.rs:98:5-98:50: `token.publish_crate(crate_to_publish).good();`
$DIR/src/tests/krate/yanking.rs:98:10-98:42: `.publish_crate(crate_to_publish)`
$DIR/src/tests/krate/yanking.rs:98:42-98:49: `.good()`
$DIR/src/tests/krate/yanking.rs:102:5-104:57: `token
        .yank("yankable", "1.0.0")
        .assert_rate_limited(LimitedAction::YankUnyank);`
$DIR/src/tests/krate/yanking.rs:103:9-103:35: `.yank("yankable", "1.0.0")`
$DIR/src/tests/krate/yanking.rs:104:9-104:56: `.assert_rate_limited(LimitedAction::YankUnyank)`
$DIR/src/tests/krate/yanking.rs:111:9-111:83: `.with_rate_limit(LimitedAction::YankUnyank, Duration::from_millis(500), 1)`
$DIR/src/tests/krate/yanking.rs:112:9-112:22: `.with_token()`
$DIR/src/tests/krate/yanking.rs:115:5-127:8: `app.db(|conn| {
        // Ratelimit bucket should next refill right now!
        let just_now = Utc::now().naive_utc() - Duration::from_millis(500);
        diesel::insert_into(publish_limit_buckets::table)
            .values((
                publish_limit_buckets::user_id.eq(token.as_model().user_id),
                publish_limit_buckets::action.eq(LimitedAction::YankUnyank),
                publish_limit_buckets::tokens.eq(0),
                publish_limit_buckets::last_refill.eq(just_now),
            ))
            .execute(conn)
            .expect("Failed to set fake ratelimit")
    });`
$DIR/src/tests/krate/yanking.rs:115:8-127:7: `.db(|conn| {
        // Ratelimit bucket should next refill right now!
        let just_now = Utc::now().naive_utc() - Duration::from_millis(500);
        diesel::insert_into(publish_limit_buckets::table)
            .values((
                publish_limit_buckets::user_id.eq(token.as_model().user_id),
                publish_limit_buckets::action.eq(LimitedAction::YankUnyank),
                publish_limit_buckets::tokens.eq(0),
                publish_limit_buckets::last_refill.eq(just_now),
            ))
            .execute(conn)
            .expect("Failed to set fake ratelimit")
    })`
$DIR/src/tests/krate/yanking.rs:117:34-117:46: `.naive_utc()`
$DIR/src/tests/krate/yanking.rs:118:9-126:52: `diesel::insert_into(publish_limit_buckets::table)
            .values((
                publish_limit_buckets::user_id.eq(token.as_model().user_id),
                publish_limit_buckets::action.eq(LimitedAction::YankUnyank),
                publish_limit_buckets::tokens.eq(0),
                publish_limit_buckets::last_refill.eq(just_now),
            ))
            .execute(conn)
            .expect("Failed to set fake ratelimit")`
$DIR/src/tests/krate/yanking.rs:119:13-124:15: `.values((
                publish_limit_buckets::user_id.eq(token.as_model().user_id),
                publish_limit_buckets::action.eq(LimitedAction::YankUnyank),
                publish_limit_buckets::tokens.eq(0),
                publish_limit_buckets::last_refill.eq(just_now),
            ))`
$DIR/src/tests/krate/yanking.rs:120:47-120:76: `.eq(token.as_model().user_id)`
$DIR/src/tests/krate/yanking.rs:120:56-120:67: `.as_model()`
$DIR/src/tests/krate/yanking.rs:121:46-121:76: `.eq(LimitedAction::YankUnyank)`
$DIR/src/tests/krate/yanking.rs:122:46-122:52: `.eq(0)`
$DIR/src/tests/krate/yanking.rs:123:51-123:64: `.eq(just_now)`
$DIR/src/tests/krate/yanking.rs:125:13-125:27: `.execute(conn)`
$DIR/src/tests/krate/yanking.rs:131:5-131:50: `token.publish_crate(crate_to_publish).good();`
$DIR/src/tests/krate/yanking.rs:131:10-131:42: `.publish_crate(crate_to_publish)`
$DIR/src/tests/krate/yanking.rs:131:42-131:49: `.good()`
$DIR/src/tests/krate/yanking.rs:132:5-132:31: `check_yanked(&app, false);`
$DIR/src/tests/krate/yanking.rs:134:5-134:44: `token.yank("yankable", "1.0.0").good();`
$DIR/src/tests/krate/yanking.rs:134:10-134:36: `.yank("yankable", "1.0.0")`
$DIR/src/tests/krate/yanking.rs:134:36-134:43: `.good()`
$DIR/src/tests/krate/yanking.rs:140:46-140:59: `.with_token()`
$DIR/src/tests/krate/yanking.rs:144:5-144:50: `token.publish_crate(crate_to_publish).good();`
$DIR/src/tests/krate/yanking.rs:144:10-144:42: `.publish_crate(crate_to_publish)`
$DIR/src/tests/krate/yanking.rs:144:42-144:49: `.good()`
$DIR/src/tests/krate/yanking.rs:147:20-147:42: `.show_crate("fyk_max")`
$DIR/src/tests/krate/yanking.rs:152:21-152:53: `.publish_crate(crate_to_publish)`
$DIR/src/tests/krate/yanking.rs:152:53-152:60: `.good()`
$DIR/src/tests/krate/yanking.rs:156:5-156:43: `token.yank("fyk_max", "1.0.0").good();`
$DIR/src/tests/krate/yanking.rs:156:10-156:35: `.yank("fyk_max", "1.0.0")`
$DIR/src/tests/krate/yanking.rs:156:35-156:42: `.good()`
$DIR/src/tests/krate/yanking.rs:158:20-158:42: `.show_crate("fyk_max")`
$DIR/src/tests/krate/yanking.rs:162:5-162:45: `token.unyank("fyk_max", "1.0.0").good();`
$DIR/src/tests/krate/yanking.rs:162:10-162:37: `.unyank("fyk_max", "1.0.0")`
$DIR/src/tests/krate/yanking.rs:162:37-162:44: `.good()`
$DIR/src/tests/krate/yanking.rs:164:20-164:42: `.show_crate("fyk_max")`
$DIR/src/tests/krate/yanking.rs:168:5-168:43: `token.yank("fyk_max", "2.0.0").good();`
$DIR/src/tests/krate/yanking.rs:168:10-168:35: `.yank("fyk_max", "2.0.0")`
$DIR/src/tests/krate/yanking.rs:168:35-168:42: `.good()`
$DIR/src/tests/krate/yanking.rs:170:20-170:42: `.show_crate("fyk_max")`
$DIR/src/tests/krate/yanking.rs:174:5-174:43: `token.yank("fyk_max", "1.0.0").good();`
$DIR/src/tests/krate/yanking.rs:174:10-174:35: `.yank("fyk_max", "1.0.0")`
$DIR/src/tests/krate/yanking.rs:174:35-174:42: `.good()`
$DIR/src/tests/krate/yanking.rs:176:20-176:42: `.show_crate("fyk_max")`
$DIR/src/tests/krate/yanking.rs:180:5-180:45: `token.unyank("fyk_max", "2.0.0").good();`
$DIR/src/tests/krate/yanking.rs:180:10-180:37: `.unyank("fyk_max", "2.0.0")`
$DIR/src/tests/krate/yanking.rs:180:37-180:44: `.good()`
$DIR/src/tests/krate/yanking.rs:182:20-182:42: `.show_crate("fyk_max")`
$DIR/src/tests/krate/yanking.rs:186:5-186:45: `token.unyank("fyk_max", "1.0.0").good();`
$DIR/src/tests/krate/yanking.rs:186:10-186:37: `.unyank("fyk_max", "1.0.0")`
$DIR/src/tests/krate/yanking.rs:186:37-186:44: `.good()`
$DIR/src/tests/krate/yanking.rs:188:20-188:42: `.show_crate("fyk_max")`
$DIR/src/tests/krate/yanking.rs:194:46-194:59: `.with_token()`
$DIR/src/tests/krate/yanking.rs:198:5-198:50: `token.publish_crate(crate_to_publish).good();`
$DIR/src/tests/krate/yanking.rs:198:10-198:42: `.publish_crate(crate_to_publish)`
$DIR/src/tests/krate/yanking.rs:198:42-198:49: `.good()`
$DIR/src/tests/krate/yanking.rs:201:20-201:42: `.show_crate("fyk_max")`
$DIR/src/tests/krate/yanking.rs:205:5-205:43: `token.yank("fyk_max", "1.0.0").good();`
$DIR/src/tests/krate/yanking.rs:205:10-205:35: `.yank("fyk_max", "1.0.0")`
$DIR/src/tests/krate/yanking.rs:205:35-205:42: `.good()`
$DIR/src/tests/krate/yanking.rs:207:20-207:42: `.show_crate("fyk_max")`
$DIR/src/tests/krate/yanking.rs:212:21-212:53: `.publish_crate(crate_to_publish)`
$DIR/src/tests/krate/yanking.rs:212:53-212:60: `.good()`
$DIR/src/tests/krate/yanking.rs:216:5-216:45: `token.unyank("fyk_max", "1.0.0").good();`
$DIR/src/tests/krate/yanking.rs:216:10-216:37: `.unyank("fyk_max", "1.0.0")`
$DIR/src/tests/krate/yanking.rs:216:37-216:44: `.good()`
$DIR/src/tests/krate/yanking.rs:218:20-218:42: `.show_crate("fyk_max")`
$DIR/src/tests/middleware/head.rs:6:36-6:44: `.empty()`
$DIR/src/tests/middleware/head.rs:8:19-8:68: `.request_builder(Method::HEAD, "/api/v1/summary")`
$DIR/src/tests/middleware/head.rs:9:19-9:34: `.run::<()>(req)`
$DIR/src/tests/middleware/head.rs:16:36-16:44: `.empty()`
$DIR/src/tests/middleware/head.rs:18:19-18:61: `.request_builder(Method::HEAD, "/unknown")`
$DIR/src/tests/middleware/head.rs:19:19-19:34: `.run::<()>(req)`
$DIR/src/tests/models/krate.rs:8:41-8:53: `.with_user()`
$DIR/src/tests/models/krate.rs:9:20-9:31: `.as_model()`
$DIR/src/tests/models/krate.rs:13:13-13:45: `.checked_sub_days(Days::new(14))`
$DIR/src/tests/models/krate.rs:15:13-15:25: `.naive_utc()`
$DIR/src/tests/models/krate.rs:18:13-18:44: `.checked_sub_days(Days::new(7))`
$DIR/src/tests/models/krate.rs:20:13-20:25: `.naive_utc()`
$DIR/src/tests/models/krate.rs:23:13-23:51: `.version(VersionBuilder::new("0.1.0"))`
$DIR/src/tests/models/krate.rs:24:13-24:32: `.expect_build(conn)`
$DIR/src/tests/models/krate.rs:26:28-26:49: `.index_metadata(conn)`
$DIR/src/tests/models/krate.rs:27:9-27:41: `assert_json_snapshot!(metadata);`
$DIR/src/tests/models/krate.rs:30:13-34:14: `.version(
                VersionBuilder::new("1.0.0-beta.1")
                    .created_at(created_at_1)
                    .yanked(true),
            )`
$DIR/src/tests/models/krate.rs:32:21-32:46: `.created_at(created_at_1)`
$DIR/src/tests/models/krate.rs:33:21-33:34: `.yanked(true)`
$DIR/src/tests/models/krate.rs:35:13-35:76: `.version(VersionBuilder::new("1.0.0").created_at(created_at_1))`
$DIR/src/tests/models/krate.rs:35:50-35:75: `.created_at(created_at_1)`
$DIR/src/tests/models/krate.rs:36:13-40:14: `.version(
                VersionBuilder::new("2.0.0")
                    .created_at(created_at_2)
                    .dependency(&fooo, None),
            )`
$DIR/src/tests/models/krate.rs:38:21-38:46: `.created_at(created_at_2)`
$DIR/src/tests/models/krate.rs:39:21-39:45: `.dependency(&fooo, None)`
$DIR/src/tests/models/krate.rs:41:13-41:80: `.version(VersionBuilder::new("1.0.1").checksum("0123456789abcdef"))`
$DIR/src/tests/models/krate.rs:41:50-41:79: `.checksum("0123456789abcdef")`
$DIR/src/tests/models/krate.rs:42:13-42:32: `.expect_build(conn)`
$DIR/src/tests/models/krate.rs:44:27-44:48: `.index_metadata(conn)`
$DIR/src/tests/models/krate.rs:45:9-45:41: `assert_json_snapshot!(metadata);`
$DIR/src/tests/not_found_error.rs:6:36-6:44: `.empty()`
$DIR/src/tests/not_found_error.rs:8:24-8:53: `.get::<()>("/does-not-exist")`
$DIR/src/tests/not_found_error.rs:18:36-18:44: `.empty()`
$DIR/src/tests/not_found_error.rs:20:24-20:60: `.get::<()>("/api/v1/does-not-exist")`
$DIR/src/tests/owners.rs:135:45-135:58: `.with_token()`
$DIR/src/tests/owners.rs:139:5-139:50: `token.publish_crate(crate_to_publish).good();`
$DIR/src/tests/owners.rs:139:10-139:42: `.publish_crate(crate_to_publish)`
$DIR/src/tests/owners.rs:139:42-139:49: `.good()`
$DIR/src/tests/owners.rs:142:20-142:39: `.db_new_user("Bar")`
$DIR/src/tests/owners.rs:143:5-143:46: `token.add_user_owner("foo_owner", "BAR");`
$DIR/src/tests/owners.rs:143:10-143:45: `.add_user_owner("foo_owner", "BAR")`
$DIR/src/tests/owners.rs:146:27-146:87: `.db(|conn| Crate::by_name("foo_owner").first(conn).unwrap())`
$DIR/src/tests/owners.rs:146:65-146:77: `.first(conn)`
$DIR/src/tests/owners.rs:147:5-147:62: `user2.accept_ownership_invitation("foo_owner", krate.id);`
$DIR/src/tests/owners.rs:147:10-147:61: `.accept_ownership_invitation("foo_owner", krate.id)`
$DIR/src/tests/owners.rs:150:23-150:62: `.search_by_user_id(user2.as_model().id)`
$DIR/src/tests/owners.rs:150:47-150:58: `.as_model()`
$DIR/src/tests/owners.rs:156:9-156:35: `.db_new_token("bar_token")`
$DIR/src/tests/owners.rs:157:9-157:41: `.publish_crate(crate_to_publish)`
$DIR/src/tests/owners.rs:177:48-177:61: `.with_token()`
$DIR/src/tests/owners.rs:178:25-178:36: `.as_model()`
$DIR/src/tests/owners.rs:181:9-181:98: `.db(|conn| CrateBuilder::new("owners_selfremove", user.as_model().id).expect_build(conn))`
$DIR/src/tests/owners.rs:181:63-181:74: `.as_model()`
$DIR/src/tests/owners.rs:181:78-181:97: `.expect_build(conn)`
$DIR/src/tests/owners.rs:184:25-184:75: `.remove_named_owner("owners_selfremove", username)`
$DIR/src/tests/owners.rs:191:5-191:63: `create_and_add_owner(&app, &token, "secondowner", &krate);`
$DIR/src/tests/owners.rs:194:25-194:75: `.remove_named_owner("owners_selfremove", username)`
$DIR/src/tests/owners.rs:202:25-202:75: `.remove_named_owner("owners_selfremove", username)`
$DIR/src/tests/owners.rs:213:48-213:61: `.with_token()`
$DIR/src/tests/owners.rs:214:25-214:36: `.as_model()`
$DIR/src/tests/owners.rs:217:12-217:99: `.db(|conn| CrateBuilder::new("owners_multiple", user.as_model().id).expect_build(conn))`
$DIR/src/tests/owners.rs:217:64-217:75: `.as_model()`
$DIR/src/tests/owners.rs:217:79-217:98: `.expect_build(conn)`
$DIR/src/tests/owners.rs:223:25-223:95: `.remove_named_owners("owners_multiple", &[username, "user2", "user3"])`
$DIR/src/tests/owners.rs:232:25-232:85: `.remove_named_owners("owners_multiple", &["user2", "user3"])`
$DIR/src/tests/owners.rs:241:25-241:83: `.add_named_owners("owners_multiple", &["user2", username])`
$DIR/src/tests/owners.rs:250:25-250:82: `.add_named_owners("owners_multiple", &["user2", "user3"])`
$DIR/src/tests/owners.rs:260:5-260:62: `user2.accept_ownership_invitation(&krate.name, krate.id);`
$DIR/src/tests/owners.rs:260:10-260:61: `.accept_ownership_invitation(&krate.name, krate.id)`
$DIR/src/tests/owners.rs:261:5-261:62: `user3.accept_ownership_invitation(&krate.name, krate.id);`
$DIR/src/tests/owners.rs:261:10-261:61: `.accept_ownership_invitation(&krate.name, krate.id)`
$DIR/src/tests/owners.rs:268:43-268:55: `.with_user()`
$DIR/src/tests/owners.rs:270:20-270:42: `.db_new_user("user-2")`
$DIR/src/tests/owners.rs:271:22-271:33: `.as_model()`
$DIR/src/tests/owners.rs:274:12-274:95: `.db(|conn| CrateBuilder::new("foo_crate", cookie.as_model().id).expect_build(conn))`
$DIR/src/tests/owners.rs:274:60-274:71: `.as_model()`
$DIR/src/tests/owners.rs:274:75-274:94: `.expect_build(conn)`
$DIR/src/tests/owners.rs:279:26-279:48: `.put::<()>(&url, body)`
$DIR/src/tests/owners.rs:289:45-289:58: `.with_token()`
$DIR/src/tests/owners.rs:291:20-291:42: `.db_new_user("user-2")`
$DIR/src/tests/owners.rs:292:22-292:33: `.as_model()`
$DIR/src/tests/owners.rs:295:12-295:99: `.db(|conn| CrateBuilder::new("foo_crate", token.as_model().user_id).expect_build(conn))`
$DIR/src/tests/owners.rs:295:59-295:70: `.as_model()`
$DIR/src/tests/owners.rs:295:79-295:98: `.expect_build(conn)`
$DIR/src/tests/owners.rs:300:25-300:47: `.put::<()>(&url, body)`
$DIR/src/tests/owners.rs:311:24-311:89: `.with_scoped_token(None, Some(vec![EndpointScope::ChangeOwners]))`
$DIR/src/tests/owners.rs:313:20-313:42: `.db_new_user("user-2")`
$DIR/src/tests/owners.rs:314:22-314:33: `.as_model()`
$DIR/src/tests/owners.rs:317:12-317:99: `.db(|conn| CrateBuilder::new("foo_crate", token.as_model().user_id).expect_build(conn))`
$DIR/src/tests/owners.rs:317:59-317:70: `.as_model()`
$DIR/src/tests/owners.rs:317:79-317:98: `.expect_build(conn)`
$DIR/src/tests/owners.rs:322:25-322:47: `.put::<()>(&url, body)`
$DIR/src/tests/owners.rs:334:45-334:94: `.with_scoped_token(crate_scopes, endpoint_scopes)`
$DIR/src/tests/owners.rs:336:20-336:42: `.db_new_user("user-2")`
$DIR/src/tests/owners.rs:337:22-337:33: `.as_model()`
$DIR/src/tests/owners.rs:340:12-340:99: `.db(|conn| CrateBuilder::new("foo_crate", token.as_model().user_id).expect_build(conn))`
$DIR/src/tests/owners.rs:340:59-340:70: `.as_model()`
$DIR/src/tests/owners.rs:340:79-340:98: `.expect_build(conn)`
$DIR/src/tests/owners.rs:345:25-345:47: `.put::<()>(&url, body)`
$DIR/src/tests/owners.rs:357:45-357:94: `.with_scoped_token(crate_scopes, endpoint_scopes)`
$DIR/src/tests/owners.rs:359:20-359:42: `.db_new_user("user-2")`
$DIR/src/tests/owners.rs:360:22-360:33: `.as_model()`
$DIR/src/tests/owners.rs:363:12-363:99: `.db(|conn| CrateBuilder::new("foo_crate", token.as_model().user_id).expect_build(conn))`
$DIR/src/tests/owners.rs:363:59-363:70: `.as_model()`
$DIR/src/tests/owners.rs:363:79-363:98: `.expect_build(conn)`
$DIR/src/tests/owners.rs:368:25-368:47: `.put::<()>(&url, body)`
$DIR/src/tests/owners.rs:379:24-379:90: `.with_scoped_token(None, Some(vec![EndpointScope::PublishUpdate]))`
$DIR/src/tests/owners.rs:381:20-381:42: `.db_new_user("user-2")`
$DIR/src/tests/owners.rs:382:22-382:33: `.as_model()`
$DIR/src/tests/owners.rs:385:12-385:99: `.db(|conn| CrateBuilder::new("foo_crate", token.as_model().user_id).expect_build(conn))`
$DIR/src/tests/owners.rs:385:59-385:70: `.as_model()`
$DIR/src/tests/owners.rs:385:79-385:98: `.expect_build(conn)`
$DIR/src/tests/owners.rs:390:25-390:47: `.put::<()>(&url, body)`
$DIR/src/tests/owners.rs:400:46-400:58: `.with_user()`
$DIR/src/tests/owners.rs:402:20-402:42: `.db_new_user("user-2")`
$DIR/src/tests/owners.rs:403:22-403:33: `.as_model()`
$DIR/src/tests/owners.rs:406:12-406:95: `.db(|conn| CrateBuilder::new("foo_crate", cookie.as_model().id).expect_build(conn))`
$DIR/src/tests/owners.rs:406:60-406:71: `.as_model()`
$DIR/src/tests/owners.rs:406:75-406:94: `.expect_build(conn)`
$DIR/src/tests/owners.rs:411:24-411:46: `.put::<()>(&url, body)`
$DIR/src/tests/owners.rs:421:45-421:58: `.with_token()`
$DIR/src/tests/owners.rs:422:5-422:37: `app.db_new_user("invited_user");`
$DIR/src/tests/owners.rs:422:8-422:36: `.db_new_user("invited_user")`
$DIR/src/tests/owners.rs:423:5-423:97: `app.db(|conn| CrateBuilder::new("crate_name", owner.as_model().user_id).expect_build(conn));`
$DIR/src/tests/owners.rs:423:8-423:96: `.db(|conn| CrateBuilder::new("crate_name", owner.as_model().user_id).expect_build(conn))`
$DIR/src/tests/owners.rs:423:56-423:67: `.as_model()`
$DIR/src/tests/owners.rs:423:76-423:95: `.expect_build(conn)`
$DIR/src/tests/owners.rs:429:25-429:71: `.add_named_owner("crate_name", "invited_user")`
$DIR/src/tests/owners.rs:443:25-443:71: `.add_named_owner("crate_name", "invited_user")`
$DIR/src/tests/owners.rs:459:45-459:58: `.with_token()`
$DIR/src/tests/owners.rs:460:5-460:37: `app.db_new_user("invited_user");`
$DIR/src/tests/owners.rs:460:8-460:36: `.db_new_user("invited_user")`
$DIR/src/tests/owners.rs:462:12-462:100: `.db(|conn| CrateBuilder::new("crate_name", owner.as_model().user_id).expect_build(conn))`
$DIR/src/tests/owners.rs:462:60-462:71: `.as_model()`
$DIR/src/tests/owners.rs:462:80-462:99: `.expect_build(conn)`
$DIR/src/tests/owners.rs:468:25-468:71: `.add_named_owner("crate_name", "invited_user")`
$DIR/src/tests/owners.rs:482:5-482:39: `expire_invitation(&app, krate.id);`
$DIR/src/tests/owners.rs:485:25-485:71: `.add_named_owner("crate_name", "invited_user")`
$DIR/src/tests/owners.rs:507:44-507:56: `.with_user()`
$DIR/src/tests/owners.rs:508:20-508:31: `.as_model()`
$DIR/src/tests/owners.rs:510:42-515:7: `.db(|conn| {
        let t = new_team("team_foo").create_or_update(conn).unwrap();
        let krate = CrateBuilder::new("foo", user.id).expect_build(conn);
        add_team_to_crate(&t, &krate, user, conn).unwrap();
        (krate, t)
    })`
$DIR/src/tests/owners.rs:511:37-511:60: `.create_or_update(conn)`
$DIR/src/tests/owners.rs:512:54-512:73: `.expect_build(conn)`
$DIR/src/tests/owners.rs:513:9-513:60: `add_team_to_crate(&t, &krate, user, conn).unwrap();`
$DIR/src/tests/owners.rs:514:9-514:19: `(krate, t)`
$DIR/src/tests/owners.rs:517:20-517:44: `.db_new_user("user_bar")`
$DIR/src/tests/owners.rs:518:22-518:33: `.as_model()`
$DIR/src/tests/owners.rs:520:12-520:77: `.db(|conn| CrateBuilder::new("bar", user2.id).expect_build(conn))`
$DIR/src/tests/owners.rs:520:57-520:76: `.expect_build(conn)`
$DIR/src/tests/owners.rs:522:20-522:48: `.search_by_user_id(user2.id)`
$DIR/src/tests/owners.rs:527:20-527:35: `.search(&query)`
$DIR/src/tests/owners.rs:541:44-541:56: `.with_user()`
$DIR/src/tests/owners.rs:542:20-542:31: `.as_model()`
$DIR/src/tests/owners.rs:544:19-551:7: `.db(|conn| {
        let t = new_team("github:test_org:team_sloth")
            .create_or_update(conn)
            .unwrap();
        let krate = CrateBuilder::new("best_crate", user.id).expect_build(conn);
        add_team_to_crate(&t, &krate, user, conn).unwrap();
        t
    })`
$DIR/src/tests/owners.rs:546:13-546:36: `.create_or_update(conn)`
$DIR/src/tests/owners.rs:548:61-548:80: `.expect_build(conn)`
$DIR/src/tests/owners.rs:549:9-549:60: `add_team_to_crate(&t, &krate, user, conn).unwrap();`
$DIR/src/tests/owners.rs:550:9-550:10: `t`
$DIR/src/tests/owners.rs:553:34-553:78: `.get("/api/v1/crates/best_crate/owner_team")`
$DIR/src/tests/owners.rs:553:78-553:85: `.good()`
$DIR/src/tests/owners.rs:557:34-557:78: `.get("/api/v1/crates/best_crate/owner_user")`
$DIR/src/tests/owners.rs:557:78-557:85: `.good()`
$DIR/src/tests/owners.rs:564:44-564:56: `.with_user()`
$DIR/src/tests/owners.rs:565:20-565:31: `.as_model()`
$DIR/src/tests/owners.rs:567:5-570:8: `app.db(|conn| {
        let krate = CrateBuilder::new("foo_my_packages", user.id).expect_build(conn);
        krate.owner_remove(conn, &user.gh_login).unwrap();
    });`
$DIR/src/tests/owners.rs:567:8-570:7: `.db(|conn| {
        let krate = CrateBuilder::new("foo_my_packages", user.id).expect_build(conn);
        krate.owner_remove(conn, &user.gh_login).unwrap();
    })`
$DIR/src/tests/owners.rs:568:66-568:85: `.expect_build(conn)`
$DIR/src/tests/owners.rs:569:9-569:59: `krate.owner_remove(conn, &user.gh_login).unwrap();`
$DIR/src/tests/owners.rs:569:14-569:49: `.owner_remove(conn, &user.gh_login)`
$DIR/src/tests/owners.rs:572:34-572:83: `.get("/api/v1/crates/foo_my_packages/owner_user")`
$DIR/src/tests/owners.rs:572:83-572:90: `.good()`
$DIR/src/tests/owners.rs:578:39-578:51: `.with_user()`
$DIR/src/tests/owners.rs:580:20-580:39: `.list_invitations()`
$DIR/src/tests/owners.rs:586:43-586:56: `.with_token()`
$DIR/src/tests/owners.rs:589:9-589:51: `.get("/api/v1/me/crate_owner_invitations")`
$DIR/src/tests/owners.rs:595:49-595:62: `.with_token()`
$DIR/src/tests/owners.rs:596:22-596:33: `.as_model()`
$DIR/src/tests/owners.rs:598:20-598:95: `.db(|conn| CrateBuilder::new("invited_crate", owner.id).expect_build(conn))`
$DIR/src/tests/owners.rs:598:75-598:94: `.expect_build(conn)`
$DIR/src/tests/owners.rs:600:19-600:47: `.db_new_user("invited_user")`
$DIR/src/tests/owners.rs:601:5-601:59: `token.add_user_owner("invited_crate", "invited_user");`
$DIR/src/tests/owners.rs:601:10-601:58: `.add_user_owner("invited_crate", "invited_user")`
$DIR/src/tests/owners.rs:603:24-603:72: `.get::<()>("/api/v1/me/crate_owner_invitations")`
$DIR/src/tests/owners.rs:606:27-606:46: `.list_invitations()`
$DIR/src/tests/owners.rs:628:49-628:62: `.with_token()`
$DIR/src/tests/owners.rs:629:22-629:33: `.as_model()`
$DIR/src/tests/owners.rs:631:19-631:47: `.db_new_user("invited_user")`
$DIR/src/tests/owners.rs:633:21-633:98: `.db(|conn| CrateBuilder::new("invited_crate_1", owner.id).expect_build(conn))`
$DIR/src/tests/owners.rs:633:78-633:97: `.expect_build(conn)`
$DIR/src/tests/owners.rs:634:21-634:98: `.db(|conn| CrateBuilder::new("invited_crate_2", owner.id).expect_build(conn))`
$DIR/src/tests/owners.rs:634:78-634:97: `.expect_build(conn)`
$DIR/src/tests/owners.rs:635:5-635:61: `token.add_user_owner("invited_crate_1", "invited_user");`
$DIR/src/tests/owners.rs:635:10-635:60: `.add_user_owner("invited_crate_1", "invited_user")`
$DIR/src/tests/owners.rs:636:5-636:61: `token.add_user_owner("invited_crate_2", "invited_user");`
$DIR/src/tests/owners.rs:636:10-636:60: `.add_user_owner("invited_crate_2", "invited_user")`
$DIR/src/tests/owners.rs:639:5-639:40: `expire_invitation(&app, krate1.id);`
$DIR/src/tests/owners.rs:641:27-641:46: `.list_invitations()`
$DIR/src/tests/owners.rs:668:58-668:71: `.with_token()`
$DIR/src/tests/owners.rs:669:22-669:33: `.as_model()`
$DIR/src/tests/owners.rs:670:27-670:51: `.db_new_user("user_bar")`
$DIR/src/tests/owners.rs:671:20-671:99: `.db(|conn| CrateBuilder::new("accept_invitation", owner.id).expect_build(conn))`
$DIR/src/tests/owners.rs:671:79-671:98: `.expect_build(conn)`
$DIR/src/tests/owners.rs:674:5-674:65: `owner_token.add_user_owner("accept_invitation", "user_bar");`
$DIR/src/tests/owners.rs:674:16-674:64: `.add_user_owner("accept_invitation", "user_bar")`
$DIR/src/tests/owners.rs:677:5-677:69: `invited_user.accept_ownership_invitation(&krate.name, krate.id);`
$DIR/src/tests/owners.rs:677:17-677:68: `.accept_ownership_invitation(&krate.name, krate.id)`
$DIR/src/tests/owners.rs:680:28-680:47: `.list_invitations()`
$DIR/src/tests/owners.rs:684:20-684:59: `.show_crate_owners("accept_invitation")`
$DIR/src/tests/owners.rs:694:58-694:71: `.with_token()`
$DIR/src/tests/owners.rs:695:22-695:33: `.as_model()`
$DIR/src/tests/owners.rs:696:27-696:51: `.db_new_user("user_bar")`
$DIR/src/tests/owners.rs:697:20-697:100: `.db(|conn| CrateBuilder::new("decline_invitation", owner.id).expect_build(conn))`
$DIR/src/tests/owners.rs:697:80-697:99: `.expect_build(conn)`
$DIR/src/tests/owners.rs:700:5-700:66: `owner_token.add_user_owner("decline_invitation", "user_bar");`
$DIR/src/tests/owners.rs:700:16-700:65: `.add_user_owner("decline_invitation", "user_bar")`
$DIR/src/tests/owners.rs:703:5-703:70: `invited_user.decline_ownership_invitation(&krate.name, krate.id);`
$DIR/src/tests/owners.rs:703:17-703:69: `.decline_ownership_invitation(&krate.name, krate.id)`
$DIR/src/tests/owners.rs:706:28-706:47: `.list_invitations()`
$DIR/src/tests/owners.rs:710:20-710:60: `.show_crate_owners("decline_invitation")`
$DIR/src/tests/owners.rs:716:58-716:71: `.with_token()`
$DIR/src/tests/owners.rs:717:22-717:33: `.as_model()`
$DIR/src/tests/owners.rs:718:27-718:51: `.db_new_user("user_bar")`
$DIR/src/tests/owners.rs:719:21-719:100: `.db(|conn| CrateBuilder::new("accept_invitation", owner.id).expect_build(conn))`
$DIR/src/tests/owners.rs:719:80-719:99: `.expect_build(conn)`
$DIR/src/tests/owners.rs:722:5-722:65: `owner_token.add_user_owner("accept_invitation", "user_bar");`
$DIR/src/tests/owners.rs:722:16-722:64: `.add_user_owner("accept_invitation", "user_bar")`
$DIR/src/tests/owners.rs:725:60-725:71: `.as_inner()`
$DIR/src/tests/owners.rs:728:5-728:62: `anon.accept_ownership_invitation_by_token(&invite_token);`
$DIR/src/tests/owners.rs:728:9-728:61: `.accept_ownership_invitation_by_token(&invite_token)`
$DIR/src/tests/owners.rs:731:28-731:47: `.list_invitations()`
$DIR/src/tests/owners.rs:735:20-735:59: `.show_crate_owners("accept_invitation")`
$DIR/src/tests/owners.rs:758:58-758:71: `.with_token()`
$DIR/src/tests/owners.rs:759:22-759:33: `.as_model()`
$DIR/src/tests/owners.rs:760:27-760:52: `.db_new_user("demo_user")`
$DIR/src/tests/owners.rs:761:20-761:92: `.db(|conn| CrateBuilder::new("demo_crate", owner.id).expect_build(conn))`
$DIR/src/tests/owners.rs:761:72-761:91: `.expect_build(conn)`
$DIR/src/tests/owners.rs:764:5-764:59: `owner_token.add_user_owner("demo_crate", "demo_user");`
$DIR/src/tests/owners.rs:764:16-764:58: `.add_user_owner("demo_crate", "demo_user")`
$DIR/src/tests/owners.rs:767:5-767:39: `expire_invitation(&app, krate.id);`
$DIR/src/tests/owners.rs:770:28-770:89: `.try_accept_ownership_invitation::<()>(&krate.name, krate.id)`
$DIR/src/tests/owners.rs:785:20-785:52: `.show_crate_owners("demo_crate")`
$DIR/src/tests/owners.rs:791:58-791:71: `.with_token()`
$DIR/src/tests/owners.rs:792:22-792:33: `.as_model()`
$DIR/src/tests/owners.rs:793:27-793:52: `.db_new_user("demo_user")`
$DIR/src/tests/owners.rs:794:20-794:92: `.db(|conn| CrateBuilder::new("demo_crate", owner.id).expect_build(conn))`
$DIR/src/tests/owners.rs:794:72-794:91: `.expect_build(conn)`
$DIR/src/tests/owners.rs:797:5-797:59: `owner_token.add_user_owner("demo_crate", "demo_user");`
$DIR/src/tests/owners.rs:797:16-797:58: `.add_user_owner("demo_crate", "demo_user")`
$DIR/src/tests/owners.rs:800:5-800:39: `expire_invitation(&app, krate.id);`
$DIR/src/tests/owners.rs:803:5-803:70: `invited_user.decline_ownership_invitation(&krate.name, krate.id);`
$DIR/src/tests/owners.rs:803:17-803:69: `.decline_ownership_invitation(&krate.name, krate.id)`
$DIR/src/tests/owners.rs:806:20-806:52: `.show_crate_owners("demo_crate")`
$DIR/src/tests/owners.rs:812:58-812:71: `.with_token()`
$DIR/src/tests/owners.rs:813:22-813:33: `.as_model()`
$DIR/src/tests/owners.rs:814:28-814:53: `.db_new_user("demo_user")`
$DIR/src/tests/owners.rs:815:20-815:92: `.db(|conn| CrateBuilder::new("demo_crate", owner.id).expect_build(conn))`
$DIR/src/tests/owners.rs:815:72-815:91: `.expect_build(conn)`
$DIR/src/tests/owners.rs:818:5-818:59: `owner_token.add_user_owner("demo_crate", "demo_user");`
$DIR/src/tests/owners.rs:818:16-818:58: `.add_user_owner("demo_crate", "demo_user")`
$DIR/src/tests/owners.rs:821:5-821:39: `expire_invitation(&app, krate.id);`
$DIR/src/tests/owners.rs:824:60-824:71: `.as_inner()`
$DIR/src/tests/owners.rs:827:20-827:82: `.try_accept_ownership_invitation_by_token::<()>(&invite_token)`
$DIR/src/tests/owners.rs:842:20-842:52: `.show_crate_owners("demo_crate")`
$DIR/src/tests/owners.rs:851:55-851:68: `.with_token()`
$DIR/src/tests/owners.rs:852:22-852:33: `.as_model()`
$DIR/src/tests/owners.rs:858:5-869:8: `app.db(|conn| {
        NewUser {
            gh_id: -1,
            gh_login: invited_gh_login,
            name: None,
            gh_avatar: None,
            gh_access_token: Cow::Borrowed("some random token"),
        }
        .create_or_update(None, &app.as_inner().emails, conn)
        .unwrap();
        CrateBuilder::new(krate_name, owner.id).expect_build(conn);
    });`
$DIR/src/tests/owners.rs:858:8-869:7: `.db(|conn| {
        NewUser {
            gh_id: -1,
            gh_login: invited_gh_login,
            name: None,
            gh_avatar: None,
            gh_access_token: Cow::Borrowed("some random token"),
        }
        .create_or_update(None, &app.as_inner().emails, conn)
        .unwrap();
        CrateBuilder::new(krate_name, owner.id).expect_build(conn);
    })`
$DIR/src/tests/owners.rs:859:9-867:19: `NewUser {
            gh_id: -1,
            gh_login: invited_gh_login,
            name: None,
            gh_avatar: None,
            gh_access_token: Cow::Borrowed("some random token"),
        }
        .create_or_update(None, &app.as_inner().emails, conn)
        .unwrap();`
$DIR/src/tests/owners.rs:866:9-866:62: `.create_or_update(None, &app.as_inner().emails, conn)`
$DIR/src/tests/owners.rs:866:37-866:48: `.as_inner()`
$DIR/src/tests/owners.rs:868:9-868:68: `CrateBuilder::new(krate_name, owner.id).expect_build(conn);`
$DIR/src/tests/owners.rs:868:48-868:67: `.expect_build(conn)`
$DIR/src/tests/owners.rs:871:27-871:57: `.db_new_user(invited_gh_login)`
$DIR/src/tests/owners.rs:873:5-873:56: `owner_token.add_user_owner(krate_name, "user_bar");`
$DIR/src/tests/owners.rs:873:16-873:55: `.add_user_owner(krate_name, "user_bar")`
$DIR/src/tests/owners.rs:875:28-875:47: `.list_invitations()`
$DIR/src/tests/owners.rs:881:55-881:68: `.with_token()`
$DIR/src/tests/owners.rs:882:22-882:33: `.as_model()`
$DIR/src/tests/owners.rs:889:5-889:39: `app.db_new_user(invited_gh_login);`
$DIR/src/tests/owners.rs:889:8-889:38: `.db_new_user(invited_gh_login)`
$DIR/src/tests/owners.rs:891:27-891:57: `.db_new_user(invited_gh_login)`
$DIR/src/tests/owners.rs:893:5-895:8: `app.db(|conn| {
        CrateBuilder::new(krate_name, owner.id).expect_build(conn);
    });`
$DIR/src/tests/owners.rs:893:8-895:7: `.db(|conn| {
        CrateBuilder::new(krate_name, owner.id).expect_build(conn);
    })`
$DIR/src/tests/owners.rs:894:9-894:68: `CrateBuilder::new(krate_name, owner.id).expect_build(conn);`
$DIR/src/tests/owners.rs:894:48-894:67: `.expect_build(conn)`
$DIR/src/tests/owners.rs:897:5-897:56: `owner_token.add_user_owner(krate_name, "user_bar");`
$DIR/src/tests/owners.rs:897:16-897:55: `.add_user_owner(krate_name, "user_bar")`
$DIR/src/tests/owners.rs:899:28-899:47: `.list_invitations()`
$DIR/src/tests/owners.rs:935:49-935:62: `.with_token()`
$DIR/src/tests/owners.rs:937:31-942:7: `.db(|conn| {
        (
            CrateBuilder::new("crate_1", owner.as_model().id).expect_build(conn),
            CrateBuilder::new("crate_2", owner.as_model().id).expect_build(conn),
        )
    })`
$DIR/src/tests/owners.rs:938:9-941:10: `(
            CrateBuilder::new("crate_1", owner.as_model().id).expect_build(conn),
            CrateBuilder::new("crate_2", owner.as_model().id).expect_build(conn),
        )`
$DIR/src/tests/owners.rs:939:47-939:58: `.as_model()`
$DIR/src/tests/owners.rs:939:62-939:81: `.expect_build(conn)`
$DIR/src/tests/owners.rs:940:47-940:58: `.as_model()`
$DIR/src/tests/owners.rs:940:62-940:81: `.expect_build(conn)`
$DIR/src/tests/owners.rs:943:20-943:42: `.db_new_user("user_1")`
$DIR/src/tests/owners.rs:944:20-944:42: `.db_new_user("user_2")`
$DIR/src/tests/owners.rs:945:5-945:47: `token.add_user_owner("crate_1", "user_1");`
$DIR/src/tests/owners.rs:945:10-945:46: `.add_user_owner("crate_1", "user_1")`
$DIR/src/tests/owners.rs:946:5-946:47: `token.add_user_owner("crate_1", "user_2");`
$DIR/src/tests/owners.rs:946:10-946:46: `.add_user_owner("crate_1", "user_2")`
$DIR/src/tests/owners.rs:947:5-947:47: `token.add_user_owner("crate_2", "user_1");`
$DIR/src/tests/owners.rs:947:10-947:46: `.add_user_owner("crate_2", "user_1")`
$DIR/src/tests/owners.rs:1074:49-1074:62: `.with_token()`
$DIR/src/tests/owners.rs:1075:19-1075:47: `.db_new_user("invited_user")`
$DIR/src/tests/owners.rs:1077:31-1082:7: `.db(|conn| {
        (
            CrateBuilder::new("crate_1", owner.as_model().id).expect_build(conn),
            CrateBuilder::new("crate_2", owner.as_model().id).expect_build(conn),
        )
    })`
$DIR/src/tests/owners.rs:1078:9-1081:10: `(
            CrateBuilder::new("crate_1", owner.as_model().id).expect_build(conn),
            CrateBuilder::new("crate_2", owner.as_model().id).expect_build(conn),
        )`
$DIR/src/tests/owners.rs:1079:47-1079:58: `.as_model()`
$DIR/src/tests/owners.rs:1079:62-1079:81: `.expect_build(conn)`
$DIR/src/tests/owners.rs:1080:47-1080:58: `.as_model()`
$DIR/src/tests/owners.rs:1080:62-1080:81: `.expect_build(conn)`
$DIR/src/tests/owners.rs:1083:5-1083:53: `token.add_user_owner("crate_1", "invited_user");`
$DIR/src/tests/owners.rs:1083:10-1083:52: `.add_user_owner("crate_1", "invited_user")`
$DIR/src/tests/owners.rs:1084:5-1084:53: `token.add_user_owner("crate_2", "invited_user");`
$DIR/src/tests/owners.rs:1084:10-1084:52: `.add_user_owner("crate_2", "invited_user")`
$DIR/src/tests/owners.rs:1087:5-1087:40: `expire_invitation(&app, crate1.id);`
$DIR/src/tests/owners.rs:1114:49-1114:62: `.with_token()`
$DIR/src/tests/owners.rs:1115:19-1115:47: `.db_new_user("invited_user")`
$DIR/src/tests/owners.rs:1117:31-1122:7: `.db(|conn| {
        (
            CrateBuilder::new("crate_1", owner.as_model().id).expect_build(conn),
            CrateBuilder::new("crate_2", owner.as_model().id).expect_build(conn),
        )
    })`
$DIR/src/tests/owners.rs:1118:9-1121:10: `(
            CrateBuilder::new("crate_1", owner.as_model().id).expect_build(conn),
            CrateBuilder::new("crate_2", owner.as_model().id).expect_build(conn),
        )`
$DIR/src/tests/owners.rs:1119:47-1119:58: `.as_model()`
$DIR/src/tests/owners.rs:1119:62-1119:81: `.expect_build(conn)`
$DIR/src/tests/owners.rs:1120:47-1120:58: `.as_model()`
$DIR/src/tests/owners.rs:1120:62-1120:81: `.expect_build(conn)`
$DIR/src/tests/owners.rs:1123:5-1123:53: `token.add_user_owner("crate_1", "invited_user");`
$DIR/src/tests/owners.rs:1123:10-1123:52: `.add_user_owner("crate_1", "invited_user")`
$DIR/src/tests/owners.rs:1124:5-1124:53: `token.add_user_owner("crate_2", "invited_user");`
$DIR/src/tests/owners.rs:1124:10-1124:52: `.add_user_owner("crate_2", "invited_user")`
$DIR/src/tests/owners.rs:1157:44-1157:68: `.trim_start_matches('?')`
$DIR/src/tests/owners.rs:1182:43-1182:56: `.with_token()`
$DIR/src/tests/owners.rs:1184:21-1184:71: `.get::<()>("/api/private/crate_owner_invitations")`
$DIR/src/tests/owners.rs:1198:45-1198:58: `.with_token()`
$DIR/src/tests/owners.rs:1199:25-1199:46: `.db_new_user("other")`
$DIR/src/tests/owners.rs:1202:21-1205:6: `.get_with_query::<()>(
        "/api/private/crate_owner_invitations",
        &format!("invitee_id={}", owner.as_model().id),
    )`
$DIR/src/tests/owners.rs:1209:21-1212:6: `.get_with_query::<()>(
        "/api/private/crate_owner_invitations",
        &format!("invitee_id={}", other_user.as_model().id),
    )`
$DIR/src/tests/owners.rs:1218:45-1218:58: `.with_token()`
$DIR/src/tests/owners.rs:1219:25-1219:46: `.db_new_user("other")`
$DIR/src/tests/owners.rs:1220:5-1223:8: `app.db(|conn| {
        CrateBuilder::new("crate_1", owner.as_model().id).expect_build(conn);
        CrateBuilder::new("crate_2", other_user.as_model().id).expect_build(conn);
    });`
$DIR/src/tests/owners.rs:1220:8-1223:7: `.db(|conn| {
        CrateBuilder::new("crate_1", owner.as_model().id).expect_build(conn);
        CrateBuilder::new("crate_2", other_user.as_model().id).expect_build(conn);
    })`
$DIR/src/tests/owners.rs:1221:9-1221:78: `CrateBuilder::new("crate_1", owner.as_model().id).expect_build(conn);`
$DIR/src/tests/owners.rs:1221:43-1221:54: `.as_model()`
$DIR/src/tests/owners.rs:1221:58-1221:77: `.expect_build(conn)`
$DIR/src/tests/owners.rs:1222:9-1222:83: `CrateBuilder::new("crate_2", other_user.as_model().id).expect_build(conn);`
$DIR/src/tests/owners.rs:1222:48-1222:59: `.as_model()`
$DIR/src/tests/owners.rs:1222:63-1222:82: `.expect_build(conn)`
$DIR/src/tests/owners.rs:1227:14-1227:97: `.get_with_query::<()>("/api/private/crate_owner_invitations", "crate_name=crate_1")`
$DIR/src/tests/owners.rs:1232:14-1232:97: `.get_with_query::<()>("/api/private/crate_owner_invitations", "crate_name=crate_2")`
$DIR/src/tests/pagination.rs:10:9-13:11: `.with_config(|config| {
            config.max_allowed_page_offset = 1;
            config.page_offset_cidr_blocklist = vec!["127.0.0.1/24".parse::<IpNetwork>().unwrap()];
        })`
$DIR/src/tests/pagination.rs:11:13-11:48: `config.max_allowed_page_offset = 1;`
$DIR/src/tests/pagination.rs:12:13-12:100: `config.page_offset_cidr_blocklist = vec!["127.0.0.1/24".parse::<IpNetwork>().unwrap()];`
$DIR/src/tests/pagination.rs:14:9-14:21: `.with_user()`
$DIR/src/tests/pagination.rs:15:20-15:31: `.as_model()`
$DIR/src/tests/pagination.rs:17:5-21:8: `app.db(|conn| {
        CrateBuilder::new("pagination_links_1", user.id).expect_build(conn);
        CrateBuilder::new("pagination_links_2", user.id).expect_build(conn);
        CrateBuilder::new("pagination_links_3", user.id).expect_build(conn);
    });`
$DIR/src/tests/pagination.rs:17:8-21:7: `.db(|conn| {
        CrateBuilder::new("pagination_links_1", user.id).expect_build(conn);
        CrateBuilder::new("pagination_links_2", user.id).expect_build(conn);
        CrateBuilder::new("pagination_links_3", user.id).expect_build(conn);
    })`
$DIR/src/tests/pagination.rs:18:9-18:77: `CrateBuilder::new("pagination_links_1", user.id).expect_build(conn);`
$DIR/src/tests/pagination.rs:18:57-18:76: `.expect_build(conn)`
$DIR/src/tests/pagination.rs:19:9-19:77: `CrateBuilder::new("pagination_links_2", user.id).expect_build(conn);`
$DIR/src/tests/pagination.rs:19:57-19:76: `.expect_build(conn)`
$DIR/src/tests/pagination.rs:20:9-20:77: `CrateBuilder::new("pagination_links_3", user.id).expect_build(conn);`
$DIR/src/tests/pagination.rs:20:57-20:76: `.expect_build(conn)`
$DIR/src/tests/pagination.rs:23:24-23:84: `.get_with_query::<()>("/api/v1/crates", "page=2&per_page=1")`
$DIR/src/tests/read_only_mode.rs:9:38-9:46: `.empty()`
$DIR/src/tests/read_only_mode.rs:10:5-10:36: `app.db(set_read_only).unwrap();`
$DIR/src/tests/read_only_mode.rs:10:8-10:26: `.db(set_read_only)`
$DIR/src/tests/read_only_mode.rs:11:24-11:52: `.get::<()>("/api/v1/crates")`
$DIR/src/tests/read_only_mode.rs:17:48-17:61: `.with_token()`
$DIR/src/tests/read_only_mode.rs:18:5-23:8: `app.db(|conn| {
        CrateBuilder::new("foo_yank_read_only", user.as_model().id)
            .version("1.0.0")
            .expect_build(conn);
        set_read_only(conn).unwrap();
    });`
$DIR/src/tests/read_only_mode.rs:18:8-23:7: `.db(|conn| {
        CrateBuilder::new("foo_yank_read_only", user.as_model().id)
            .version("1.0.0")
            .expect_build(conn);
        set_read_only(conn).unwrap();
    })`
$DIR/src/tests/read_only_mode.rs:19:9-21:33: `CrateBuilder::new("foo_yank_read_only", user.as_model().id)
            .version("1.0.0")
            .expect_build(conn);`
$DIR/src/tests/read_only_mode.rs:19:53-19:64: `.as_model()`
$DIR/src/tests/read_only_mode.rs:20:13-20:30: `.version("1.0.0")`
$DIR/src/tests/read_only_mode.rs:21:13-21:32: `.expect_build(conn)`
$DIR/src/tests/read_only_mode.rs:22:9-22:38: `set_read_only(conn).unwrap();`
$DIR/src/tests/read_only_mode.rs:25:25-25:86: `.delete::<()>("/api/v1/crates/foo_yank_read_only/1.0.0/yank")`
$DIR/src/tests/read_only_mode.rs:30:9-32:23: `diesel::sql_query("ROLLBACK TO test_post_readonly")
            .execute(conn)
            .unwrap();`
$DIR/src/tests/read_only_mode.rs:31:13-31:27: `.execute(conn)`
$DIR/src/tests/read_only_mode.rs:38:44-38:56: `.with_user()`
$DIR/src/tests/read_only_mode.rs:40:5-45:8: `app.db(|conn| {
        CrateBuilder::new("foo_download_read_only", user.as_model().id)
            .version("1.0.0")
            .expect_build(conn);
        set_read_only(conn).unwrap();
    });`
$DIR/src/tests/read_only_mode.rs:40:8-45:7: `.db(|conn| {
        CrateBuilder::new("foo_download_read_only", user.as_model().id)
            .version("1.0.0")
            .expect_build(conn);
        set_read_only(conn).unwrap();
    })`
$DIR/src/tests/read_only_mode.rs:41:9-43:33: `CrateBuilder::new("foo_download_read_only", user.as_model().id)
            .version("1.0.0")
            .expect_build(conn);`
$DIR/src/tests/read_only_mode.rs:41:57-41:68: `.as_model()`
$DIR/src/tests/read_only_mode.rs:42:13-42:30: `.version("1.0.0")`
$DIR/src/tests/read_only_mode.rs:43:13-43:32: `.expect_build(conn)`
$DIR/src/tests/read_only_mode.rs:44:9-44:38: `set_read_only(conn).unwrap();`
$DIR/src/tests/read_only_mode.rs:47:24-47:90: `.get::<()>("/api/v1/crates/foo_download_read_only/1.0.0/download")`
$DIR/src/tests/read_only_mode.rs:56:30-56:53: `.select(sum(downloads))`
$DIR/src/tests/read_only_mode.rs:56:53-56:70: `.get_result(conn)`
$DIR/src/tests/read_only_mode.rs:57:9-57:39: `assert_ok_eq!(dl_count, None);`
$DIR/src/tests/routes/categories/get.rs:10:38-10:46: `.empty()`
$DIR/src/tests/routes/categories/get.rs:14:5-14:38: `anon.get(url).assert_not_found();`
$DIR/src/tests/routes/categories/get.rs:14:9-14:18: `.get(url)`
$DIR/src/tests/routes/categories/get.rs:14:18-14:37: `.assert_not_found()`
$DIR/src/tests/routes/categories/get.rs:17:5-22:8: `app.db(|conn| {
        assert_ok!(new_category("Foo Bar", "foo-bar", "Foo Bar crates").create_or_update(conn));
        assert_ok!(
            new_category("Foo Bar::Baz", "foo-bar::baz", "Baz crates").create_or_update(conn)
        );
    });`
$DIR/src/tests/routes/categories/get.rs:17:8-22:7: `.db(|conn| {
        assert_ok!(new_category("Foo Bar", "foo-bar", "Foo Bar crates").create_or_update(conn));
        assert_ok!(
            new_category("Foo Bar::Baz", "foo-bar::baz", "Baz crates").create_or_update(conn)
        );
    })`
$DIR/src/tests/routes/categories/get.rs:18:9-18:97: `assert_ok!(new_category("Foo Bar", "foo-bar", "Foo Bar crates").create_or_update(conn));`
$DIR/src/tests/routes/categories/get.rs:19:9-21:11: `assert_ok!(
            new_category("Foo Bar::Baz", "foo-bar::baz", "Baz crates").create_or_update(conn)
        );`
$DIR/src/tests/routes/categories/get.rs:25:27-25:36: `.get(url)`
$DIR/src/tests/routes/categories/get.rs:25:36-25:43: `.good()`
$DIR/src/tests/routes/categories/get.rs:40:44-40:56: `.with_user()`
$DIR/src/tests/routes/categories/get.rs:41:20-41:31: `.as_model()`
$DIR/src/tests/routes/categories/get.rs:43:20-50:7: `.db(|conn| {
        assert_ok!(new_category("cat1", "cat1", "Category 1 crates").create_or_update(conn));
        assert_ok!(
            new_category("Category 2", "category-2", "Category 2 crates").create_or_update(conn)
        );

        CrateBuilder::new("foo_crate", user.id).expect_build(conn)
    })`
$DIR/src/tests/routes/categories/get.rs:44:9-44:94: `assert_ok!(new_category("cat1", "cat1", "Category 1 crates").create_or_update(conn));`
$DIR/src/tests/routes/categories/get.rs:45:9-47:11: `assert_ok!(
            new_category("Category 2", "category-2", "Category 2 crates").create_or_update(conn)
        );`
$DIR/src/tests/routes/categories/get.rs:49:9-49:67: `CrateBuilder::new("foo_crate", user.id).expect_build(conn)`
$DIR/src/tests/routes/categories/get.rs:49:48-49:67: `.expect_build(conn)`
$DIR/src/tests/routes/categories/get.rs:53:5-53:71: `app.db(|conn| Category::update_crate(conn, &krate, &[]).unwrap());`
$DIR/src/tests/routes/categories/get.rs:53:8-53:70: `.db(|conn| Category::update_crate(conn, &krate, &[]).unwrap())`
$DIR/src/tests/routes/categories/get.rs:58:5-58:77: `app.db(|conn| Category::update_crate(conn, &krate, &["cat1"]).unwrap());`
$DIR/src/tests/routes/categories/get.rs:58:8-58:76: `.db(|conn| Category::update_crate(conn, &krate, &["cat1"]).unwrap())`
$DIR/src/tests/routes/categories/get.rs:63:5-63:83: `app.db(|conn| Category::update_crate(conn, &krate, &["category-2"]).unwrap());`
$DIR/src/tests/routes/categories/get.rs:63:8-63:82: `.db(|conn| Category::update_crate(conn, &krate, &["category-2"]).unwrap())`
$DIR/src/tests/routes/categories/get.rs:68:5-68:71: `app.db(|conn| Category::update_crate(conn, &krate, &[]).unwrap());`
$DIR/src/tests/routes/categories/get.rs:68:8-68:70: `.db(|conn| Category::update_crate(conn, &krate, &[]).unwrap())`
$DIR/src/tests/routes/categories/get.rs:73:5-73:91: `app.db(|conn| Category::update_crate(conn, &krate, &["cat1", "category-2"]).unwrap());`
$DIR/src/tests/routes/categories/get.rs:73:8-73:90: `.db(|conn| Category::update_crate(conn, &krate, &["cat1", "category-2"]).unwrap())`
$DIR/src/tests/routes/categories/get.rs:78:5-78:71: `app.db(|conn| Category::update_crate(conn, &krate, &[]).unwrap());`
$DIR/src/tests/routes/categories/get.rs:78:8-78:70: `.db(|conn| Category::update_crate(conn, &krate, &[]).unwrap())`
$DIR/src/tests/routes/categories/get.rs:83:5-87:8: `app.db(|conn| {
        let invalid_categories =
            Category::update_crate(conn, &krate, &["cat1", "catnope"]).unwrap();
        assert_eq!(invalid_categories, vec!["catnope"]);
    });`
$DIR/src/tests/routes/categories/get.rs:83:8-87:7: `.db(|conn| {
        let invalid_categories =
            Category::update_crate(conn, &krate, &["cat1", "catnope"]).unwrap();
        assert_eq!(invalid_categories, vec!["catnope"]);
    })`
$DIR/src/tests/routes/categories/get.rs:93:20-93:41: `.show_category_list()`
$DIR/src/tests/routes/categories/get.rs:98:5-98:83: `app.db(|conn| Category::update_crate(conn, &krate, &["Category 2"]).unwrap());`
$DIR/src/tests/routes/categories/get.rs:98:8-98:82: `.db(|conn| Category::update_crate(conn, &krate, &["Category 2"]).unwrap())`
$DIR/src/tests/routes/categories/get.rs:103:5-106:8: `app.db(|conn| {
        assert_ok!(new_category("cat1::bar", "cat1::bar", "bar crates").create_or_update(conn));
        Category::update_crate(conn, &krate, &["cat1", "cat1::bar"]).unwrap();
    });`
$DIR/src/tests/routes/categories/get.rs:103:8-106:7: `.db(|conn| {
        assert_ok!(new_category("cat1::bar", "cat1::bar", "bar crates").create_or_update(conn));
        Category::update_crate(conn, &krate, &["cat1", "cat1::bar"]).unwrap();
    })`
$DIR/src/tests/routes/categories/get.rs:104:9-104:97: `assert_ok!(new_category("cat1::bar", "cat1::bar", "bar crates").create_or_update(conn));`
$DIR/src/tests/routes/categories/get.rs:105:9-105:79: `Category::update_crate(conn, &krate, &["cat1", "cat1::bar"]).unwrap();`
$DIR/src/tests/routes/categories/list.rs:8:38-8:46: `.empty()`
$DIR/src/tests/routes/categories/list.rs:11:27-11:53: `.get("/api/v1/categories")`
$DIR/src/tests/routes/categories/list.rs:11:53-11:60: `.good()`
$DIR/src/tests/routes/categories/list.rs:12:5-12:33: `assert_json_snapshot!(json);`
$DIR/src/tests/routes/categories/list.rs:15:5-22:8: `app.db(|conn| {
        new_category("foo", "foo", "Foo crates")
            .create_or_update(conn)
            .unwrap();
        new_category("foo::bar", "foo::bar", "Bar crates")
            .create_or_update(conn)
            .unwrap();
    });`
$DIR/src/tests/routes/categories/list.rs:15:8-22:7: `.db(|conn| {
        new_category("foo", "foo", "Foo crates")
            .create_or_update(conn)
            .unwrap();
        new_category("foo::bar", "foo::bar", "Bar crates")
            .create_or_update(conn)
            .unwrap();
    })`
$DIR/src/tests/routes/categories/list.rs:16:9-18:23: `new_category("foo", "foo", "Foo crates")
            .create_or_update(conn)
            .unwrap();`
$DIR/src/tests/routes/categories/list.rs:17:13-17:36: `.create_or_update(conn)`
$DIR/src/tests/routes/categories/list.rs:19:9-21:23: `new_category("foo::bar", "foo::bar", "Bar crates")
            .create_or_update(conn)
            .unwrap();`
$DIR/src/tests/routes/categories/list.rs:20:13-20:36: `.create_or_update(conn)`
$DIR/src/tests/routes/categories/list.rs:25:27-25:53: `.get("/api/v1/categories")`
$DIR/src/tests/routes/categories/list.rs:25:53-25:60: `.good()`
$DIR/src/tests/routes/category_slugs/list.rs:8:38-8:46: `.empty()`
$DIR/src/tests/routes/category_slugs/list.rs:9:5-16:8: `app.db(|conn| {
        new_category("Foo", "foo", "For crates that foo")
            .create_or_update(conn)
            .unwrap();
        new_category("Bar", "bar", "For crates that bar")
            .create_or_update(conn)
            .unwrap();
    });`
$DIR/src/tests/routes/category_slugs/list.rs:9:8-16:7: `.db(|conn| {
        new_category("Foo", "foo", "For crates that foo")
            .create_or_update(conn)
            .unwrap();
        new_category("Bar", "bar", "For crates that bar")
            .create_or_update(conn)
            .unwrap();
    })`
$DIR/src/tests/routes/category_slugs/list.rs:10:9-12:23: `new_category("Foo", "foo", "For crates that foo")
            .create_or_update(conn)
            .unwrap();`
$DIR/src/tests/routes/category_slugs/list.rs:11:13-11:36: `.create_or_update(conn)`
$DIR/src/tests/routes/category_slugs/list.rs:13:9-15:23: `new_category("Bar", "bar", "For crates that bar")
            .create_or_update(conn)
            .unwrap();`
$DIR/src/tests/routes/category_slugs/list.rs:14:13-14:36: `.create_or_update(conn)`
$DIR/src/tests/routes/category_slugs/list.rs:18:31-18:61: `.get("/api/v1/category_slugs")`
$DIR/src/tests/routes/category_slugs/list.rs:18:61-18:68: `.good()`
$DIR/src/tests/routes/crates/downloads.rs:43:44-43:56: `.with_user()`
$DIR/src/tests/routes/crates/downloads.rs:44:20-44:31: `.as_model()`
$DIR/src/tests/routes/crates/downloads.rs:46:5-50:8: `app.db(|conn| {
        CrateBuilder::new("foo_download", user.id)
            .version(VersionBuilder::new("1.0.0"))
            .expect_build(conn);
    });`
$DIR/src/tests/routes/crates/downloads.rs:46:8-50:7: `.db(|conn| {
        CrateBuilder::new("foo_download", user.id)
            .version(VersionBuilder::new("1.0.0"))
            .expect_build(conn);
    })`
$DIR/src/tests/routes/crates/downloads.rs:47:9-49:33: `CrateBuilder::new("foo_download", user.id)
            .version(VersionBuilder::new("1.0.0"))
            .expect_build(conn);`
$DIR/src/tests/routes/crates/downloads.rs:48:13-48:51: `.version(VersionBuilder::new("1.0.0"))`
$DIR/src/tests/routes/crates/downloads.rs:49:13-49:32: `.expect_build(conn)`
$DIR/src/tests/routes/crates/downloads.rs:54:28-54:44: `.get::<()>(&url)`
$DIR/src/tests/routes/crates/downloads.rs:59:5-59:36: `download("foo_download/1.0.0");`
$DIR/src/tests/routes/crates/downloads.rs:61:5-61:59: `assert_dl_count(&anon, "foo_download/1.0.0", None, 0);`
$DIR/src/tests/routes/crates/downloads.rs:62:5-62:53: `assert_dl_count(&anon, "foo_download", None, 0);`
$DIR/src/tests/routes/crates/downloads.rs:63:5-63:35: `persist_downloads_count(&app);`
$DIR/src/tests/routes/crates/downloads.rs:65:5-65:59: `assert_dl_count(&anon, "foo_download/1.0.0", None, 1);`
$DIR/src/tests/routes/crates/downloads.rs:66:5-66:53: `assert_dl_count(&anon, "foo_download", None, 1);`
$DIR/src/tests/routes/crates/downloads.rs:68:5-68:36: `download("FOO_DOWNLOAD/1.0.0");`
$DIR/src/tests/routes/crates/downloads.rs:69:5-69:35: `persist_downloads_count(&app);`
$DIR/src/tests/routes/crates/downloads.rs:70:5-70:59: `assert_dl_count(&anon, "FOO_DOWNLOAD/1.0.0", None, 2);`
$DIR/src/tests/routes/crates/downloads.rs:71:5-71:53: `assert_dl_count(&anon, "FOO_DOWNLOAD", None, 2);`
$DIR/src/tests/routes/crates/downloads.rs:73:32-73:45: `.date_naive()`
$DIR/src/tests/routes/crates/downloads.rs:73:67-73:80: `.format("%F")`
$DIR/src/tests/routes/crates/downloads.rs:75:5-75:67: `assert_dl_count(&anon, "FOO_DOWNLOAD/1.0.0", Some(&query), 0);`
$DIR/src/tests/routes/crates/downloads.rs:79:31-79:44: `.date_naive()`
$DIR/src/tests/routes/crates/downloads.rs:79:65-79:78: `.format("%F")`
$DIR/src/tests/routes/crates/downloads.rs:81:5-81:67: `assert_dl_count(&anon, "FOO_DOWNLOAD/1.0.0", Some(&query), 2);`
$DIR/src/tests/routes/crates/following.rs:6:39-6:51: `.with_user()`
$DIR/src/tests/routes/crates/following.rs:8:9-8:55: `.get("/api/v1/crates/foo_following/following")`
$DIR/src/tests/routes/crates/following.rs:14:45-14:58: `.with_token()`
$DIR/src/tests/routes/crates/following.rs:15:26-15:37: `.as_model()`
$DIR/src/tests/routes/crates/following.rs:19:5-21:8: `app.db(|conn| {
        CrateBuilder::new(a_crate, api_token.user_id).expect_build(conn);
    });`
$DIR/src/tests/routes/crates/following.rs:19:8-21:7: `.db(|conn| {
        CrateBuilder::new(a_crate, api_token.user_id).expect_build(conn);
    })`
$DIR/src/tests/routes/crates/following.rs:20:9-20:74: `CrateBuilder::new(a_crate, api_token.user_id).expect_build(conn);`
$DIR/src/tests/routes/crates/following.rs:20:54-20:73: `.expect_build(conn)`
$DIR/src/tests/routes/crates/following.rs:25:9-25:61: `.get(&format!("/api/v1/crates/{a_crate}/following"))`
$DIR/src/tests/routes/crates/list.rs:11:38-11:46: `.empty()`
$DIR/src/tests/routes/crates/list.rs:12:20-12:31: `.search("")`
$DIR/src/tests/routes/crates/list.rs:16:20-21:7: `.db(|conn| {
        let u = new_user("foo")
            .create_or_update(None, &app.as_inner().emails, conn)
            .unwrap();
        CrateBuilder::new("fooindex", u.id).expect_build(conn)
    })`
$DIR/src/tests/routes/crates/list.rs:18:13-18:66: `.create_or_update(None, &app.as_inner().emails, conn)`
$DIR/src/tests/routes/crates/list.rs:18:41-18:52: `.as_inner()`
$DIR/src/tests/routes/crates/list.rs:20:9-20:63: `CrateBuilder::new("fooindex", u.id).expect_build(conn)`
$DIR/src/tests/routes/crates/list.rs:20:44-20:63: `.expect_build(conn)`
$DIR/src/tests/routes/crates/list.rs:23:20-23:31: `.search("")`
$DIR/src/tests/routes/crates/list.rs:33:44-33:56: `.with_user()`
$DIR/src/tests/routes/crates/list.rs:34:20-34:31: `.as_model()`
$DIR/src/tests/routes/crates/list.rs:36:30-56:7: `.db(|conn| {
        let krate = CrateBuilder::new("foo_index_queries", user.id)
            .readme("readme")
            .description("description")
            .keyword("kw1")
            .expect_build(conn);

        let krate2 = CrateBuilder::new("BAR_INDEX_QUERIES", user.id)
            .keyword("KW1")
            .expect_build(conn);

        CrateBuilder::new("foo", user.id)
            .keyword("kw3")
            .expect_build(conn);

        CrateBuilder::new("two-keywords", user.id)
            .keyword("kw1")
            .keyword("kw3")
            .expect_build(conn);
        (krate, krate2)
    })`
$DIR/src/tests/routes/crates/list.rs:38:13-38:30: `.readme("readme")`
$DIR/src/tests/routes/crates/list.rs:39:13-39:40: `.description("description")`
$DIR/src/tests/routes/crates/list.rs:40:13-40:28: `.keyword("kw1")`
$DIR/src/tests/routes/crates/list.rs:41:13-41:32: `.expect_build(conn)`
$DIR/src/tests/routes/crates/list.rs:44:13-44:28: `.keyword("KW1")`
$DIR/src/tests/routes/crates/list.rs:45:13-45:32: `.expect_build(conn)`
$DIR/src/tests/routes/crates/list.rs:47:9-49:33: `CrateBuilder::new("foo", user.id)
            .keyword("kw3")
            .expect_build(conn);`
$DIR/src/tests/routes/crates/list.rs:48:13-48:28: `.keyword("kw3")`
$DIR/src/tests/routes/crates/list.rs:49:13-49:32: `.expect_build(conn)`
$DIR/src/tests/routes/crates/list.rs:51:9-54:33: `CrateBuilder::new("two-keywords", user.id)
            .keyword("kw1")
            .keyword("kw3")
            .expect_build(conn);`
$DIR/src/tests/routes/crates/list.rs:52:13-52:28: `.keyword("kw1")`
$DIR/src/tests/routes/crates/list.rs:53:13-53:28: `.keyword("kw3")`
$DIR/src/tests/routes/crates/list.rs:54:13-54:32: `.expect_build(conn)`
$DIR/src/tests/routes/crates/list.rs:55:9-55:24: `(krate, krate2)`
$DIR/src/tests/routes/crates/list.rs:82:5-91:8: `app.db(|conn| {
        new_category("Category 1", "cat1", "Category 1 crates")
            .create_or_update(conn)
            .unwrap();
        new_category("Category 1::Ba'r", "cat1::bar", "Ba'r crates")
            .create_or_update(conn)
            .unwrap();
        Category::update_crate(conn, &krate, &["cat1"]).unwrap();
        Category::update_crate(conn, &krate2, &["cat1::bar"]).unwrap();
    });`
$DIR/src/tests/routes/crates/list.rs:82:8-91:7: `.db(|conn| {
        new_category("Category 1", "cat1", "Category 1 crates")
            .create_or_update(conn)
            .unwrap();
        new_category("Category 1::Ba'r", "cat1::bar", "Ba'r crates")
            .create_or_update(conn)
            .unwrap();
        Category::update_crate(conn, &krate, &["cat1"]).unwrap();
        Category::update_crate(conn, &krate2, &["cat1::bar"]).unwrap();
    })`
$DIR/src/tests/routes/crates/list.rs:83:9-85:23: `new_category("Category 1", "cat1", "Category 1 crates")
            .create_or_update(conn)
            .unwrap();`
$DIR/src/tests/routes/crates/list.rs:84:13-84:36: `.create_or_update(conn)`
$DIR/src/tests/routes/crates/list.rs:86:9-88:23: `new_category("Category 1::Ba'r", "cat1::bar", "Ba'r crates")
            .create_or_update(conn)
            .unwrap();`
$DIR/src/tests/routes/crates/list.rs:87:13-87:36: `.create_or_update(conn)`
$DIR/src/tests/routes/crates/list.rs:89:9-89:66: `Category::update_crate(conn, &krate, &["cat1"]).unwrap();`
$DIR/src/tests/routes/crates/list.rs:90:9-90:72: `Category::update_crate(conn, &krate2, &["cat1::bar"]).unwrap();`
$DIR/src/tests/routes/crates/list.rs:93:18-93:42: `.search("category=cat1")`
$DIR/src/tests/routes/crates/list.rs:97:18-97:47: `.search("category=cat1::bar")`
$DIR/src/tests/routes/crates/list.rs:101:18-101:41: `.search("keyword=cat2")`
$DIR/src/tests/routes/crates/list.rs:105:18-105:51: `.search("q=readme&category=cat1")`
$DIR/src/tests/routes/crates/list.rs:109:18-109:54: `.search("keyword=kw1&category=cat1")`
$DIR/src/tests/routes/crates/list.rs:113:18-113:54: `.search("keyword=kw3&category=cat1")`
$DIR/src/tests/routes/crates/list.rs:123:44-123:56: `.with_user()`
$DIR/src/tests/routes/crates/list.rs:124:20-124:31: `.as_model()`
$DIR/src/tests/routes/crates/list.rs:125:5-130:8: `app.db(|conn| {
        CrateBuilder::new("which", user.id).expect_build(conn);
        CrateBuilder::new("should_be_excluded", user.id)
            .readme("crate which does things")
            .expect_build(conn);
    });`
$DIR/src/tests/routes/crates/list.rs:125:8-130:7: `.db(|conn| {
        CrateBuilder::new("which", user.id).expect_build(conn);
        CrateBuilder::new("should_be_excluded", user.id)
            .readme("crate which does things")
            .expect_build(conn);
    })`
$DIR/src/tests/routes/crates/list.rs:126:9-126:64: `CrateBuilder::new("which", user.id).expect_build(conn);`
$DIR/src/tests/routes/crates/list.rs:126:44-126:63: `.expect_build(conn)`
$DIR/src/tests/routes/crates/list.rs:127:9-129:33: `CrateBuilder::new("should_be_excluded", user.id)
            .readme("crate which does things")
            .expect_build(conn);`
$DIR/src/tests/routes/crates/list.rs:128:13-128:47: `.readme("crate which does things")`
$DIR/src/tests/routes/crates/list.rs:129:13-129:32: `.expect_build(conn)`
$DIR/src/tests/routes/crates/list.rs:131:20-131:38: `.search("q=which")`
$DIR/src/tests/routes/crates/list.rs:138:44-138:56: `.with_user()`
$DIR/src/tests/routes/crates/list.rs:139:20-139:31: `.as_model()`
$DIR/src/tests/routes/crates/list.rs:141:5-157:8: `app.db(|conn| {
        CrateBuilder::new("foo_exact", user.id)
            .description("bar_exact baz_exact")
            .expect_build(conn);

        CrateBuilder::new("bar-exact", user.id)
            .description("foo_exact baz_exact foo-exact baz_exact")
            .expect_build(conn);

        CrateBuilder::new("baz_exact", user.id)
            .description("foo-exact bar_exact foo-exact bar_exact foo_exact bar_exact")
            .expect_build(conn);

        CrateBuilder::new("other_exact", user.id)
            .description("other_exact")
            .expect_build(conn);
    });`
$DIR/src/tests/routes/crates/list.rs:141:8-157:7: `.db(|conn| {
        CrateBuilder::new("foo_exact", user.id)
            .description("bar_exact baz_exact")
            .expect_build(conn);

        CrateBuilder::new("bar-exact", user.id)
            .description("foo_exact baz_exact foo-exact baz_exact")
            .expect_build(conn);

        CrateBuilder::new("baz_exact", user.id)
            .description("foo-exact bar_exact foo-exact bar_exact foo_exact bar_exact")
            .expect_build(conn);

        CrateBuilder::new("other_exact", user.id)
            .description("other_exact")
            .expect_build(conn);
    })`
$DIR/src/tests/routes/crates/list.rs:142:9-144:33: `CrateBuilder::new("foo_exact", user.id)
            .description("bar_exact baz_exact")
            .expect_build(conn);`
$DIR/src/tests/routes/crates/list.rs:143:13-143:48: `.description("bar_exact baz_exact")`
$DIR/src/tests/routes/crates/list.rs:144:13-144:32: `.expect_build(conn)`
$DIR/src/tests/routes/crates/list.rs:146:9-148:33: `CrateBuilder::new("bar-exact", user.id)
            .description("foo_exact baz_exact foo-exact baz_exact")
            .expect_build(conn);`
$DIR/src/tests/routes/crates/list.rs:147:13-147:68: `.description("foo_exact baz_exact foo-exact baz_exact")`
$DIR/src/tests/routes/crates/list.rs:148:13-148:32: `.expect_build(conn)`
$DIR/src/tests/routes/crates/list.rs:150:9-152:33: `CrateBuilder::new("baz_exact", user.id)
            .description("foo-exact bar_exact foo-exact bar_exact foo_exact bar_exact")
            .expect_build(conn);`
$DIR/src/tests/routes/crates/list.rs:151:13-151:88: `.description("foo-exact bar_exact foo-exact bar_exact foo_exact bar_exact")`
$DIR/src/tests/routes/crates/list.rs:152:13-152:32: `.expect_build(conn)`
$DIR/src/tests/routes/crates/list.rs:154:9-156:33: `CrateBuilder::new("other_exact", user.id)
            .description("other_exact")
            .expect_build(conn);`
$DIR/src/tests/routes/crates/list.rs:155:13-155:40: `.description("other_exact")`
$DIR/src/tests/routes/crates/list.rs:156:13-156:32: `.expect_build(conn)`
$DIR/src/tests/routes/crates/list.rs:159:20-159:42: `.search("q=foo-exact")`
$DIR/src/tests/routes/crates/list.rs:165:20-165:42: `.search("q=bar_exact")`
$DIR/src/tests/routes/crates/list.rs:171:20-171:42: `.search("q=baz_exact")`
$DIR/src/tests/routes/crates/list.rs:181:44-181:56: `.with_user()`
$DIR/src/tests/routes/crates/list.rs:182:20-182:31: `.as_model()`
$DIR/src/tests/routes/crates/list.rs:184:5-243:8: `app.db(|conn| {
        let krate1 = CrateBuilder::new("foo_sort", user.id)
            .description("bar_sort baz_sort const")
            .downloads(50)
            .recent_downloads(50)
            .expect_build(conn);

        let krate2 = CrateBuilder::new("bar_sort", user.id)
            .description("foo_sort baz_sort foo_sort baz_sort const")
            .downloads(3333)
            .recent_downloads(0)
            .expect_build(conn);

        let krate3 = CrateBuilder::new("baz_sort", user.id)
            .description("foo_sort bar_sort foo_sort bar_sort foo_sort bar_sort const")
            .downloads(100_000)
            .recent_downloads(10)
            .expect_build(conn);

        let krate4 = CrateBuilder::new("other_sort", user.id)
            .description("other_sort const")
            .downloads(999_999)
            .expect_build(conn);

        // Set the created at column for each crate
        update(&krate1)
            .set(crates::created_at.eq(now - 4.weeks()))
            .execute(conn)
            .unwrap();
        update(&krate2)
            .set(crates::created_at.eq(now - 1.weeks()))
            .execute(conn)
            .unwrap();
        update(&krate3)
            .set(crates::created_at.eq(now - 2.weeks()))
            .execute(conn)
            .unwrap();
        update(&krate4)
            .set(crates::created_at.eq(now - 3.weeks()))
            .execute(conn)
            .unwrap();

        // Set the updated at column for each crate
        update(&krate1)
            .set(crates::updated_at.eq(now - 3.weeks()))
            .execute(conn)
            .unwrap();
        update(&krate2)
            .set(crates::updated_at.eq(now - 5.days()))
            .execute(conn)
            .unwrap();
        update(&krate3)
            .set(crates::updated_at.eq(now - 10.seconds()))
            .execute(conn)
            .unwrap();
        update(&krate4)
            .set(crates::updated_at.eq(now))
            .execute(conn)
            .unwrap();
    });`
$DIR/src/tests/routes/crates/list.rs:184:8-243:7: `.db(|conn| {
        let krate1 = CrateBuilder::new("foo_sort", user.id)
            .description("bar_sort baz_sort const")
            .downloads(50)
            .recent_downloads(50)
            .expect_build(conn);

        let krate2 = CrateBuilder::new("bar_sort", user.id)
            .description("foo_sort baz_sort foo_sort baz_sort const")
            .downloads(3333)
            .recent_downloads(0)
            .expect_build(conn);

        let krate3 = CrateBuilder::new("baz_sort", user.id)
            .description("foo_sort bar_sort foo_sort bar_sort foo_sort bar_sort const")
            .downloads(100_000)
            .recent_downloads(10)
            .expect_build(conn);

        let krate4 = CrateBuilder::new("other_sort", user.id)
            .description("other_sort const")
            .downloads(999_999)
            .expect_build(conn);

        // Set the created at column for each crate
        update(&krate1)
            .set(crates::created_at.eq(now - 4.weeks()))
            .execute(conn)
            .unwrap();
        update(&krate2)
            .set(crates::created_at.eq(now - 1.weeks()))
            .execute(conn)
            .unwrap();
        update(&krate3)
            .set(crates::created_at.eq(now - 2.weeks()))
            .execute(conn)
            .unwrap();
        update(&krate4)
            .set(crates::created_at.eq(now - 3.weeks()))
            .execute(conn)
            .unwrap();

        // Set the updated at column for each crate
        update(&krate1)
            .set(crates::updated_at.eq(now - 3.weeks()))
            .execute(conn)
            .unwrap();
        update(&krate2)
            .set(crates::updated_at.eq(now - 5.days()))
            .execute(conn)
            .unwrap();
        update(&krate3)
            .set(crates::updated_at.eq(now - 10.seconds()))
            .execute(conn)
            .unwrap();
        update(&krate4)
            .set(crates::updated_at.eq(now))
            .execute(conn)
            .unwrap();
    })`
$DIR/src/tests/routes/crates/list.rs:186:13-186:52: `.description("bar_sort baz_sort const")`
$DIR/src/tests/routes/crates/list.rs:187:13-187:27: `.downloads(50)`
$DIR/src/tests/routes/crates/list.rs:188:13-188:34: `.recent_downloads(50)`
$DIR/src/tests/routes/crates/list.rs:189:13-189:32: `.expect_build(conn)`
$DIR/src/tests/routes/crates/list.rs:192:13-192:70: `.description("foo_sort baz_sort foo_sort baz_sort const")`
$DIR/src/tests/routes/crates/list.rs:193:13-193:29: `.downloads(3333)`
$DIR/src/tests/routes/crates/list.rs:194:13-194:33: `.recent_downloads(0)`
$DIR/src/tests/routes/crates/list.rs:195:13-195:32: `.expect_build(conn)`
$DIR/src/tests/routes/crates/list.rs:198:13-198:88: `.description("foo_sort bar_sort foo_sort bar_sort foo_sort bar_sort const")`
$DIR/src/tests/routes/crates/list.rs:199:13-199:32: `.downloads(100_000)`
$DIR/src/tests/routes/crates/list.rs:200:13-200:34: `.recent_downloads(10)`
$DIR/src/tests/routes/crates/list.rs:201:13-201:32: `.expect_build(conn)`
$DIR/src/tests/routes/crates/list.rs:204:13-204:45: `.description("other_sort const")`
$DIR/src/tests/routes/crates/list.rs:205:13-205:32: `.downloads(999_999)`
$DIR/src/tests/routes/crates/list.rs:206:13-206:32: `.expect_build(conn)`
$DIR/src/tests/routes/crates/list.rs:209:9-212:23: `update(&krate1)
            .set(crates::created_at.eq(now - 4.weeks()))
            .execute(conn)
            .unwrap();`
$DIR/src/tests/routes/crates/list.rs:210:13-210:57: `.set(crates::created_at.eq(now - 4.weeks()))`
$DIR/src/tests/routes/crates/list.rs:210:36-210:56: `.eq(now - 4.weeks())`
$DIR/src/tests/routes/crates/list.rs:210:47-210:55: `.weeks()`
$DIR/src/tests/routes/crates/list.rs:211:13-211:27: `.execute(conn)`
$DIR/src/tests/routes/crates/list.rs:213:9-216:23: `update(&krate2)
            .set(crates::created_at.eq(now - 1.weeks()))
            .execute(conn)
            .unwrap();`
$DIR/src/tests/routes/crates/list.rs:214:13-214:57: `.set(crates::created_at.eq(now - 1.weeks()))`
$DIR/src/tests/routes/crates/list.rs:214:36-214:56: `.eq(now - 1.weeks())`
$DIR/src/tests/routes/crates/list.rs:214:47-214:55: `.weeks()`
$DIR/src/tests/routes/crates/list.rs:215:13-215:27: `.execute(conn)`
$DIR/src/tests/routes/crates/list.rs:217:9-220:23: `update(&krate3)
            .set(crates::created_at.eq(now - 2.weeks()))
            .execute(conn)
            .unwrap();`
$DIR/src/tests/routes/crates/list.rs:218:13-218:57: `.set(crates::created_at.eq(now - 2.weeks()))`
$DIR/src/tests/routes/crates/list.rs:218:36-218:56: `.eq(now - 2.weeks())`
$DIR/src/tests/routes/crates/list.rs:218:47-218:55: `.weeks()`
$DIR/src/tests/routes/crates/list.rs:219:13-219:27: `.execute(conn)`
$DIR/src/tests/routes/crates/list.rs:221:9-224:23: `update(&krate4)
            .set(crates::created_at.eq(now - 3.weeks()))
            .execute(conn)
            .unwrap();`
$DIR/src/tests/routes/crates/list.rs:222:13-222:57: `.set(crates::created_at.eq(now - 3.weeks()))`
$DIR/src/tests/routes/crates/list.rs:222:36-222:56: `.eq(now - 3.weeks())`
$DIR/src/tests/routes/crates/list.rs:222:47-222:55: `.weeks()`
$DIR/src/tests/routes/crates/list.rs:223:13-223:27: `.execute(conn)`
$DIR/src/tests/routes/crates/list.rs:227:9-230:23: `update(&krate1)
            .set(crates::updated_at.eq(now - 3.weeks()))
            .execute(conn)
            .unwrap();`
$DIR/src/tests/routes/crates/list.rs:228:13-228:57: `.set(crates::updated_at.eq(now - 3.weeks()))`
$DIR/src/tests/routes/crates/list.rs:228:36-228:56: `.eq(now - 3.weeks())`
$DIR/src/tests/routes/crates/list.rs:228:47-228:55: `.weeks()`
$DIR/src/tests/routes/crates/list.rs:229:13-229:27: `.execute(conn)`
$DIR/src/tests/routes/crates/list.rs:231:9-234:23: `update(&krate2)
            .set(crates::updated_at.eq(now - 5.days()))
            .execute(conn)
            .unwrap();`
$DIR/src/tests/routes/crates/list.rs:232:13-232:56: `.set(crates::updated_at.eq(now - 5.days()))`
$DIR/src/tests/routes/crates/list.rs:232:36-232:55: `.eq(now - 5.days())`
$DIR/src/tests/routes/crates/list.rs:232:47-232:54: `.days()`
$DIR/src/tests/routes/crates/list.rs:233:13-233:27: `.execute(conn)`
$DIR/src/tests/routes/crates/list.rs:235:9-238:23: `update(&krate3)
            .set(crates::updated_at.eq(now - 10.seconds()))
            .execute(conn)
            .unwrap();`
$DIR/src/tests/routes/crates/list.rs:236:13-236:60: `.set(crates::updated_at.eq(now - 10.seconds()))`
$DIR/src/tests/routes/crates/list.rs:236:36-236:59: `.eq(now - 10.seconds())`
$DIR/src/tests/routes/crates/list.rs:236:48-236:58: `.seconds()`
$DIR/src/tests/routes/crates/list.rs:237:13-237:27: `.execute(conn)`
$DIR/src/tests/routes/crates/list.rs:239:9-242:23: `update(&krate4)
            .set(crates::updated_at.eq(now))
            .execute(conn)
            .unwrap();`
$DIR/src/tests/routes/crates/list.rs:240:13-240:45: `.set(crates::updated_at.eq(now))`
$DIR/src/tests/routes/crates/list.rs:240:36-240:44: `.eq(now)`
$DIR/src/tests/routes/crates/list.rs:241:13-241:27: `.execute(conn)`
$DIR/src/tests/routes/crates/list.rs:246:20-246:45: `.search("sort=downloads")`
$DIR/src/tests/routes/crates/list.rs:254:20-254:52: `.search("sort=recent-downloads")`
$DIR/src/tests/routes/crates/list.rs:262:20-262:50: `.search("sort=recent-updates")`
$DIR/src/tests/routes/crates/list.rs:270:20-270:39: `.search("sort=new")`
$DIR/src/tests/routes/crates/list.rs:279:20-279:52: `.search("sort=recent-downloads")`
$DIR/src/tests/routes/crates/list.rs:290:44-290:56: `.with_user()`
$DIR/src/tests/routes/crates/list.rs:291:20-291:31: `.as_model()`
$DIR/src/tests/routes/crates/list.rs:293:5-352:8: `app.db(|conn| {
        let krate1 = CrateBuilder::new("foo_sort", user.id)
            .description("bar_sort baz_sort const")
            .downloads(50)
            .recent_downloads(50)
            .expect_build(conn);

        let krate2 = CrateBuilder::new("bar_sort", user.id)
            .description("foo_sort baz_sort foo_sort baz_sort const")
            .downloads(3333)
            .recent_downloads(0)
            .expect_build(conn);

        let krate3 = CrateBuilder::new("baz_sort", user.id)
            .description("foo_sort bar_sort foo_sort bar_sort foo_sort bar_sort const")
            .downloads(100_000)
            .recent_downloads(10)
            .expect_build(conn);

        let krate4 = CrateBuilder::new("other_sort", user.id)
            .description("other_sort const")
            .downloads(999_999)
            .expect_build(conn);

        // Set the created at column for each crate
        update(&krate1)
            .set(crates::created_at.eq(now - 4.weeks()))
            .execute(conn)
            .unwrap();
        update(&krate2)
            .set(crates::created_at.eq(now - 1.weeks()))
            .execute(conn)
            .unwrap();
        update(&krate3)
            .set(crates::created_at.eq(now - 2.weeks()))
            .execute(conn)
            .unwrap();
        update(&krate4)
            .set(crates::created_at.eq(now - 3.weeks()))
            .execute(conn)
            .unwrap();

        // Set the updated at column for each crate
        update(&krate1)
            .set(crates::updated_at.eq(now - 3.weeks()))
            .execute(conn)
            .unwrap();
        update(&krate2)
            .set(crates::updated_at.eq(now - 5.days()))
            .execute(conn)
            .unwrap();
        update(&krate3)
            .set(crates::updated_at.eq(now - 10.seconds()))
            .execute(conn)
            .unwrap();
        update(&krate4)
            .set(crates::updated_at.eq(now))
            .execute(conn)
            .unwrap();
    });`
$DIR/src/tests/routes/crates/list.rs:293:8-352:7: `.db(|conn| {
        let krate1 = CrateBuilder::new("foo_sort", user.id)
            .description("bar_sort baz_sort const")
            .downloads(50)
            .recent_downloads(50)
            .expect_build(conn);

        let krate2 = CrateBuilder::new("bar_sort", user.id)
            .description("foo_sort baz_sort foo_sort baz_sort const")
            .downloads(3333)
            .recent_downloads(0)
            .expect_build(conn);

        let krate3 = CrateBuilder::new("baz_sort", user.id)
            .description("foo_sort bar_sort foo_sort bar_sort foo_sort bar_sort const")
            .downloads(100_000)
            .recent_downloads(10)
            .expect_build(conn);

        let krate4 = CrateBuilder::new("other_sort", user.id)
            .description("other_sort const")
            .downloads(999_999)
            .expect_build(conn);

        // Set the created at column for each crate
        update(&krate1)
            .set(crates::created_at.eq(now - 4.weeks()))
            .execute(conn)
            .unwrap();
        update(&krate2)
            .set(crates::created_at.eq(now - 1.weeks()))
            .execute(conn)
            .unwrap();
        update(&krate3)
            .set(crates::created_at.eq(now - 2.weeks()))
            .execute(conn)
            .unwrap();
        update(&krate4)
            .set(crates::created_at.eq(now - 3.weeks()))
            .execute(conn)
            .unwrap();

        // Set the updated at column for each crate
        update(&krate1)
            .set(crates::updated_at.eq(now - 3.weeks()))
            .execute(conn)
            .unwrap();
        update(&krate2)
            .set(crates::updated_at.eq(now - 5.days()))
            .execute(conn)
            .unwrap();
        update(&krate3)
            .set(crates::updated_at.eq(now - 10.seconds()))
            .execute(conn)
            .unwrap();
        update(&krate4)
            .set(crates::updated_at.eq(now))
            .execute(conn)
            .unwrap();
    })`
$DIR/src/tests/routes/crates/list.rs:295:13-295:52: `.description("bar_sort baz_sort const")`
$DIR/src/tests/routes/crates/list.rs:296:13-296:27: `.downloads(50)`
$DIR/src/tests/routes/crates/list.rs:297:13-297:34: `.recent_downloads(50)`
$DIR/src/tests/routes/crates/list.rs:298:13-298:32: `.expect_build(conn)`
$DIR/src/tests/routes/crates/list.rs:301:13-301:70: `.description("foo_sort baz_sort foo_sort baz_sort const")`
$DIR/src/tests/routes/crates/list.rs:302:13-302:29: `.downloads(3333)`
$DIR/src/tests/routes/crates/list.rs:303:13-303:33: `.recent_downloads(0)`
$DIR/src/tests/routes/crates/list.rs:304:13-304:32: `.expect_build(conn)`
$DIR/src/tests/routes/crates/list.rs:307:13-307:88: `.description("foo_sort bar_sort foo_sort bar_sort foo_sort bar_sort const")`
$DIR/src/tests/routes/crates/list.rs:308:13-308:32: `.downloads(100_000)`
$DIR/src/tests/routes/crates/list.rs:309:13-309:34: `.recent_downloads(10)`
$DIR/src/tests/routes/crates/list.rs:310:13-310:32: `.expect_build(conn)`
$DIR/src/tests/routes/crates/list.rs:313:13-313:45: `.description("other_sort const")`
$DIR/src/tests/routes/crates/list.rs:314:13-314:32: `.downloads(999_999)`
$DIR/src/tests/routes/crates/list.rs:315:13-315:32: `.expect_build(conn)`
$DIR/src/tests/routes/crates/list.rs:318:9-321:23: `update(&krate1)
            .set(crates::created_at.eq(now - 4.weeks()))
            .execute(conn)
            .unwrap();`
$DIR/src/tests/routes/crates/list.rs:319:13-319:57: `.set(crates::created_at.eq(now - 4.weeks()))`
$DIR/src/tests/routes/crates/list.rs:319:36-319:56: `.eq(now - 4.weeks())`
$DIR/src/tests/routes/crates/list.rs:319:47-319:55: `.weeks()`
$DIR/src/tests/routes/crates/list.rs:320:13-320:27: `.execute(conn)`
$DIR/src/tests/routes/crates/list.rs:322:9-325:23: `update(&krate2)
            .set(crates::created_at.eq(now - 1.weeks()))
            .execute(conn)
            .unwrap();`
$DIR/src/tests/routes/crates/list.rs:323:13-323:57: `.set(crates::created_at.eq(now - 1.weeks()))`
$DIR/src/tests/routes/crates/list.rs:323:36-323:56: `.eq(now - 1.weeks())`
$DIR/src/tests/routes/crates/list.rs:323:47-323:55: `.weeks()`
$DIR/src/tests/routes/crates/list.rs:324:13-324:27: `.execute(conn)`
$DIR/src/tests/routes/crates/list.rs:326:9-329:23: `update(&krate3)
            .set(crates::created_at.eq(now - 2.weeks()))
            .execute(conn)
            .unwrap();`
$DIR/src/tests/routes/crates/list.rs:327:13-327:57: `.set(crates::created_at.eq(now - 2.weeks()))`
$DIR/src/tests/routes/crates/list.rs:327:36-327:56: `.eq(now - 2.weeks())`
$DIR/src/tests/routes/crates/list.rs:327:47-327:55: `.weeks()`
$DIR/src/tests/routes/crates/list.rs:328:13-328:27: `.execute(conn)`
$DIR/src/tests/routes/crates/list.rs:330:9-333:23: `update(&krate4)
            .set(crates::created_at.eq(now - 3.weeks()))
            .execute(conn)
            .unwrap();`
$DIR/src/tests/routes/crates/list.rs:331:13-331:57: `.set(crates::created_at.eq(now - 3.weeks()))`
$DIR/src/tests/routes/crates/list.rs:331:36-331:56: `.eq(now - 3.weeks())`
$DIR/src/tests/routes/crates/list.rs:331:47-331:55: `.weeks()`
$DIR/src/tests/routes/crates/list.rs:332:13-332:27: `.execute(conn)`
$DIR/src/tests/routes/crates/list.rs:336:9-339:23: `update(&krate1)
            .set(crates::updated_at.eq(now - 3.weeks()))
            .execute(conn)
            .unwrap();`
$DIR/src/tests/routes/crates/list.rs:337:13-337:57: `.set(crates::updated_at.eq(now - 3.weeks()))`
$DIR/src/tests/routes/crates/list.rs:337:36-337:56: `.eq(now - 3.weeks())`
$DIR/src/tests/routes/crates/list.rs:337:47-337:55: `.weeks()`
$DIR/src/tests/routes/crates/list.rs:338:13-338:27: `.execute(conn)`
$DIR/src/tests/routes/crates/list.rs:340:9-343:23: `update(&krate2)
            .set(crates::updated_at.eq(now - 5.days()))
            .execute(conn)
            .unwrap();`
$DIR/src/tests/routes/crates/list.rs:341:13-341:56: `.set(crates::updated_at.eq(now - 5.days()))`
$DIR/src/tests/routes/crates/list.rs:341:36-341:55: `.eq(now - 5.days())`
$DIR/src/tests/routes/crates/list.rs:341:47-341:54: `.days()`
$DIR/src/tests/routes/crates/list.rs:342:13-342:27: `.execute(conn)`
$DIR/src/tests/routes/crates/list.rs:344:9-347:23: `update(&krate3)
            .set(crates::updated_at.eq(now - 10.seconds()))
            .execute(conn)
            .unwrap();`
$DIR/src/tests/routes/crates/list.rs:345:13-345:60: `.set(crates::updated_at.eq(now - 10.seconds()))`
$DIR/src/tests/routes/crates/list.rs:345:36-345:59: `.eq(now - 10.seconds())`
$DIR/src/tests/routes/crates/list.rs:345:48-345:58: `.seconds()`
$DIR/src/tests/routes/crates/list.rs:346:13-346:27: `.execute(conn)`
$DIR/src/tests/routes/crates/list.rs:348:9-351:23: `update(&krate4)
            .set(crates::updated_at.eq(now))
            .execute(conn)
            .unwrap();`
$DIR/src/tests/routes/crates/list.rs:349:13-349:45: `.set(crates::updated_at.eq(now))`
$DIR/src/tests/routes/crates/list.rs:349:36-349:44: `.eq(now)`
$DIR/src/tests/routes/crates/list.rs:350:13-350:27: `.execute(conn)`
$DIR/src/tests/routes/crates/list.rs:355:20-355:56: `.search("q=foo_sort&sort=downloads")`
$DIR/src/tests/routes/crates/list.rs:361:20-361:56: `.search("q=bar_sort&sort=downloads")`
$DIR/src/tests/routes/crates/list.rs:367:20-367:56: `.search("q=baz_sort&sort=downloads")`
$DIR/src/tests/routes/crates/list.rs:373:20-373:53: `.search("q=const&sort=downloads")`
$DIR/src/tests/routes/crates/list.rs:381:20-381:63: `.search("q=bar_sort&sort=recent-downloads")`
$DIR/src/tests/routes/crates/list.rs:389:20-389:52: `.search("sort=recent-downloads")`
$DIR/src/tests/routes/crates/list.rs:397:20-397:61: `.search("q=bar_sort&sort=recent-updates")`
$DIR/src/tests/routes/crates/list.rs:404:20-404:50: `.search("q=bar_sort&sort=new")`
$DIR/src/tests/routes/crates/list.rs:413:44-413:56: `.with_user()`
$DIR/src/tests/routes/crates/list.rs:414:20-414:31: `.as_model()`
$DIR/src/tests/routes/crates/list.rs:416:5-421:8: `app.db(|conn| {
        CrateBuilder::new("foo", user.id).expect_build(conn);
        CrateBuilder::new("bar", user.id).expect_build(conn);
        CrateBuilder::new("baz", user.id).expect_build(conn);
        CrateBuilder::new("other", user.id).expect_build(conn);
    });`
$DIR/src/tests/routes/crates/list.rs:416:8-421:7: `.db(|conn| {
        CrateBuilder::new("foo", user.id).expect_build(conn);
        CrateBuilder::new("bar", user.id).expect_build(conn);
        CrateBuilder::new("baz", user.id).expect_build(conn);
        CrateBuilder::new("other", user.id).expect_build(conn);
    })`
$DIR/src/tests/routes/crates/list.rs:417:9-417:62: `CrateBuilder::new("foo", user.id).expect_build(conn);`
$DIR/src/tests/routes/crates/list.rs:417:42-417:61: `.expect_build(conn)`
$DIR/src/tests/routes/crates/list.rs:418:9-418:62: `CrateBuilder::new("bar", user.id).expect_build(conn);`
$DIR/src/tests/routes/crates/list.rs:418:42-418:61: `.expect_build(conn)`
$DIR/src/tests/routes/crates/list.rs:419:9-419:62: `CrateBuilder::new("baz", user.id).expect_build(conn);`
$DIR/src/tests/routes/crates/list.rs:419:42-419:61: `.expect_build(conn)`
$DIR/src/tests/routes/crates/list.rs:420:9-420:64: `CrateBuilder::new("other", user.id).expect_build(conn);`
$DIR/src/tests/routes/crates/list.rs:420:44-420:63: `.expect_build(conn)`
$DIR/src/tests/routes/crates/list.rs:424:13-424:97: `.search("ids%5B%5D=foo&ids%5B%5D=bar&ids%5B%5D=baz&ids%5B%5D=baz&ids%5B%5D=unknown")`
$DIR/src/tests/routes/crates/list.rs:433:44-433:56: `.with_user()`
$DIR/src/tests/routes/crates/list.rs:434:20-434:31: `.as_model()`
$DIR/src/tests/routes/crates/list.rs:436:22-462:7: `.db(|conn| {
        // exact match should be first
        let one = CrateBuilder::new("temp", user.id)
            .readme("readme")
            .description("description")
            .keyword("kw1")
            .expect_build(conn);
        // temp_udp should match second because of _
        let two = CrateBuilder::new("temp_utp", user.id)
            .readme("readme")
            .description("description")
            .keyword("kw1")
            .expect_build(conn);
        // evalrs should match 3rd because of readme
        let three = CrateBuilder::new("evalrs", user.id)
            .readme("evalrs_temp evalrs_temp evalrs_temp")
            .description("description")
            .keyword("kw1")
            .expect_build(conn);
        // tempfile should appear 4th
        let four = CrateBuilder::new("tempfile", user.id)
            .readme("readme")
            .description("description")
            .keyword("kw1")
            .expect_build(conn);
        vec![one, two, three, four]
    })`
$DIR/src/tests/routes/crates/list.rs:439:13-439:30: `.readme("readme")`
$DIR/src/tests/routes/crates/list.rs:440:13-440:40: `.description("description")`
$DIR/src/tests/routes/crates/list.rs:441:13-441:28: `.keyword("kw1")`
$DIR/src/tests/routes/crates/list.rs:442:13-442:32: `.expect_build(conn)`
$DIR/src/tests/routes/crates/list.rs:445:13-445:30: `.readme("readme")`
$DIR/src/tests/routes/crates/list.rs:446:13-446:40: `.description("description")`
$DIR/src/tests/routes/crates/list.rs:447:13-447:28: `.keyword("kw1")`
$DIR/src/tests/routes/crates/list.rs:448:13-448:32: `.expect_build(conn)`
$DIR/src/tests/routes/crates/list.rs:451:13-451:59: `.readme("evalrs_temp evalrs_temp evalrs_temp")`
$DIR/src/tests/routes/crates/list.rs:452:13-452:40: `.description("description")`
$DIR/src/tests/routes/crates/list.rs:453:13-453:28: `.keyword("kw1")`
$DIR/src/tests/routes/crates/list.rs:454:13-454:32: `.expect_build(conn)`
$DIR/src/tests/routes/crates/list.rs:457:13-457:30: `.readme("readme")`
$DIR/src/tests/routes/crates/list.rs:458:13-458:40: `.description("description")`
$DIR/src/tests/routes/crates/list.rs:459:13-459:28: `.keyword("kw1")`
$DIR/src/tests/routes/crates/list.rs:460:13-460:32: `.expect_build(conn)`
$DIR/src/tests/routes/crates/list.rs:461:9-461:36: `vec![one, two, three, four]`
$DIR/src/tests/routes/crates/list.rs:463:27-463:44: `.search("q=temp")`
$DIR/src/tests/routes/crates/list.rs:466:48-466:61: `.zip(ordered)`
$DIR/src/tests/routes/crates/list.rs:470:27-470:42: `.search("q=te")`
$DIR/src/tests/routes/crates/list.rs:477:44-477:56: `.with_user()`
$DIR/src/tests/routes/crates/list.rs:478:20-478:31: `.as_model()`
$DIR/src/tests/routes/crates/list.rs:480:5-500:8: `app.db(|conn| {
        CrateBuilder::new("unyanked", user.id)
            .version(VersionBuilder::new("1.0.0"))
            .version(VersionBuilder::new("2.0.0"))
            .expect_build(conn);

        CrateBuilder::new("newest_yanked", user.id)
            .version(VersionBuilder::new("1.0.0"))
            .version(VersionBuilder::new("2.0.0").yanked(true))
            .expect_build(conn);

        CrateBuilder::new("oldest_yanked", user.id)
            .version(VersionBuilder::new("1.0.0").yanked(true))
            .version(VersionBuilder::new("2.0.0"))
            .expect_build(conn);

        CrateBuilder::new("all_yanked", user.id)
            .version(VersionBuilder::new("1.0.0").yanked(true))
            .version(VersionBuilder::new("2.0.0").yanked(true))
            .expect_build(conn);
    });`
$DIR/src/tests/routes/crates/list.rs:480:8-500:7: `.db(|conn| {
        CrateBuilder::new("unyanked", user.id)
            .version(VersionBuilder::new("1.0.0"))
            .version(VersionBuilder::new("2.0.0"))
            .expect_build(conn);

        CrateBuilder::new("newest_yanked", user.id)
            .version(VersionBuilder::new("1.0.0"))
            .version(VersionBuilder::new("2.0.0").yanked(true))
            .expect_build(conn);

        CrateBuilder::new("oldest_yanked", user.id)
            .version(VersionBuilder::new("1.0.0").yanked(true))
            .version(VersionBuilder::new("2.0.0"))
            .expect_build(conn);

        CrateBuilder::new("all_yanked", user.id)
            .version(VersionBuilder::new("1.0.0").yanked(true))
            .version(VersionBuilder::new("2.0.0").yanked(true))
            .expect_build(conn);
    })`
$DIR/src/tests/routes/crates/list.rs:481:9-484:33: `CrateBuilder::new("unyanked", user.id)
            .version(VersionBuilder::new("1.0.0"))
            .version(VersionBuilder::new("2.0.0"))
            .expect_build(conn);`
$DIR/src/tests/routes/crates/list.rs:482:13-482:51: `.version(VersionBuilder::new("1.0.0"))`
$DIR/src/tests/routes/crates/list.rs:483:13-483:51: `.version(VersionBuilder::new("2.0.0"))`
$DIR/src/tests/routes/crates/list.rs:484:13-484:32: `.expect_build(conn)`
$DIR/src/tests/routes/crates/list.rs:486:9-489:33: `CrateBuilder::new("newest_yanked", user.id)
            .version(VersionBuilder::new("1.0.0"))
            .version(VersionBuilder::new("2.0.0").yanked(true))
            .expect_build(conn);`
$DIR/src/tests/routes/crates/list.rs:487:13-487:51: `.version(VersionBuilder::new("1.0.0"))`
$DIR/src/tests/routes/crates/list.rs:488:13-488:64: `.version(VersionBuilder::new("2.0.0").yanked(true))`
$DIR/src/tests/routes/crates/list.rs:488:50-488:63: `.yanked(true)`
$DIR/src/tests/routes/crates/list.rs:489:13-489:32: `.expect_build(conn)`
$DIR/src/tests/routes/crates/list.rs:491:9-494:33: `CrateBuilder::new("oldest_yanked", user.id)
            .version(VersionBuilder::new("1.0.0").yanked(true))
            .version(VersionBuilder::new("2.0.0"))
            .expect_build(conn);`
$DIR/src/tests/routes/crates/list.rs:492:13-492:64: `.version(VersionBuilder::new("1.0.0").yanked(true))`
$DIR/src/tests/routes/crates/list.rs:492:50-492:63: `.yanked(true)`
$DIR/src/tests/routes/crates/list.rs:493:13-493:51: `.version(VersionBuilder::new("2.0.0"))`
$DIR/src/tests/routes/crates/list.rs:494:13-494:32: `.expect_build(conn)`
$DIR/src/tests/routes/crates/list.rs:496:9-499:33: `CrateBuilder::new("all_yanked", user.id)
            .version(VersionBuilder::new("1.0.0").yanked(true))
            .version(VersionBuilder::new("2.0.0").yanked(true))
            .expect_build(conn);`
$DIR/src/tests/routes/crates/list.rs:497:13-497:64: `.version(VersionBuilder::new("1.0.0").yanked(true))`
$DIR/src/tests/routes/crates/list.rs:497:50-497:63: `.yanked(true)`
$DIR/src/tests/routes/crates/list.rs:498:13-498:64: `.version(VersionBuilder::new("2.0.0").yanked(true))`
$DIR/src/tests/routes/crates/list.rs:498:50-498:63: `.yanked(true)`
$DIR/src/tests/routes/crates/list.rs:499:13-499:32: `.expect_build(conn)`
$DIR/src/tests/routes/crates/list.rs:503:20-503:67: `.search("include_yanked=yes&sort=alphabetical")`
$DIR/src/tests/routes/crates/list.rs:511:20-511:66: `.search("include_yanked=no&sort=alphabetical")`
$DIR/src/tests/routes/crates/list.rs:520:44-520:56: `.with_user()`
$DIR/src/tests/routes/crates/list.rs:521:20-521:31: `.as_model()`
$DIR/src/tests/routes/crates/list.rs:523:5-529:8: `app.db(|conn| {
        CrateBuilder::new("foo_yanked_version", user.id)
            .description("foo")
            .version("1.0.0")
            .version(VersionBuilder::new("1.1.0").yanked(true))
            .expect_build(conn);
    });`
$DIR/src/tests/routes/crates/list.rs:523:8-529:7: `.db(|conn| {
        CrateBuilder::new("foo_yanked_version", user.id)
            .description("foo")
            .version("1.0.0")
            .version(VersionBuilder::new("1.1.0").yanked(true))
            .expect_build(conn);
    })`
$DIR/src/tests/routes/crates/list.rs:524:9-528:33: `CrateBuilder::new("foo_yanked_version", user.id)
            .description("foo")
            .version("1.0.0")
            .version(VersionBuilder::new("1.1.0").yanked(true))
            .expect_build(conn);`
$DIR/src/tests/routes/crates/list.rs:525:13-525:32: `.description("foo")`
$DIR/src/tests/routes/crates/list.rs:526:13-526:30: `.version("1.0.0")`
$DIR/src/tests/routes/crates/list.rs:527:13-527:64: `.version(VersionBuilder::new("1.1.0").yanked(true))`
$DIR/src/tests/routes/crates/list.rs:527:50-527:63: `.yanked(true)`
$DIR/src/tests/routes/crates/list.rs:528:13-528:32: `.expect_build(conn)`
$DIR/src/tests/routes/crates/list.rs:531:20-531:36: `.search("q=foo")`
$DIR/src/tests/routes/crates/list.rs:538:44-538:56: `.with_user()`
$DIR/src/tests/routes/crates/list.rs:539:20-539:31: `.as_model()`
$DIR/src/tests/routes/crates/list.rs:541:5-550:8: `app.db(|conn| {
        CrateBuilder::new("foo", user.id)
            .description("foo")
            .version("0.3.0")
            .version("1.0.0")
            .version(VersionBuilder::new("1.1.0").yanked(true))
            .version("2.0.0-beta.1")
            .version("0.3.1")
            .expect_build(conn);
    });`
$DIR/src/tests/routes/crates/list.rs:541:8-550:7: `.db(|conn| {
        CrateBuilder::new("foo", user.id)
            .description("foo")
            .version("0.3.0")
            .version("1.0.0")
            .version(VersionBuilder::new("1.1.0").yanked(true))
            .version("2.0.0-beta.1")
            .version("0.3.1")
            .expect_build(conn);
    })`
$DIR/src/tests/routes/crates/list.rs:542:9-549:33: `CrateBuilder::new("foo", user.id)
            .description("foo")
            .version("0.3.0")
            .version("1.0.0")
            .version(VersionBuilder::new("1.1.0").yanked(true))
            .version("2.0.0-beta.1")
            .version("0.3.1")
            .expect_build(conn);`
$DIR/src/tests/routes/crates/list.rs:543:13-543:32: `.description("foo")`
$DIR/src/tests/routes/crates/list.rs:544:13-544:30: `.version("0.3.0")`
$DIR/src/tests/routes/crates/list.rs:545:13-545:30: `.version("1.0.0")`
$DIR/src/tests/routes/crates/list.rs:546:13-546:64: `.version(VersionBuilder::new("1.1.0").yanked(true))`
$DIR/src/tests/routes/crates/list.rs:546:50-546:63: `.yanked(true)`
$DIR/src/tests/routes/crates/list.rs:547:13-547:37: `.version("2.0.0-beta.1")`
$DIR/src/tests/routes/crates/list.rs:548:13-548:30: `.version("0.3.1")`
$DIR/src/tests/routes/crates/list.rs:549:13-549:32: `.expect_build(conn)`
$DIR/src/tests/routes/crates/list.rs:552:20-552:36: `.search("q=foo")`
$DIR/src/tests/routes/crates/list.rs:565:44-565:56: `.with_user()`
$DIR/src/tests/routes/crates/list.rs:566:20-566:31: `.as_model()`
$DIR/src/tests/routes/crates/list.rs:568:5-581:8: `app.db(|conn| {
        // More than 90 days ago
        CrateBuilder::new("green_ball", user.id)
            .description("For fetching")
            .downloads(10)
            .recent_downloads(0)
            .expect_build(conn);

        CrateBuilder::new("sweet_potato_snack", user.id)
            .description("For when better than usual")
            .downloads(5)
            .recent_downloads(2)
            .expect_build(conn);
    });`
$DIR/src/tests/routes/crates/list.rs:568:8-581:7: `.db(|conn| {
        // More than 90 days ago
        CrateBuilder::new("green_ball", user.id)
            .description("For fetching")
            .downloads(10)
            .recent_downloads(0)
            .expect_build(conn);

        CrateBuilder::new("sweet_potato_snack", user.id)
            .description("For when better than usual")
            .downloads(5)
            .recent_downloads(2)
            .expect_build(conn);
    })`
$DIR/src/tests/routes/crates/list.rs:570:9-574:33: `CrateBuilder::new("green_ball", user.id)
            .description("For fetching")
            .downloads(10)
            .recent_downloads(0)
            .expect_build(conn);`
$DIR/src/tests/routes/crates/list.rs:571:13-571:41: `.description("For fetching")`
$DIR/src/tests/routes/crates/list.rs:572:13-572:27: `.downloads(10)`
$DIR/src/tests/routes/crates/list.rs:573:13-573:33: `.recent_downloads(0)`
$DIR/src/tests/routes/crates/list.rs:574:13-574:32: `.expect_build(conn)`
$DIR/src/tests/routes/crates/list.rs:576:9-580:33: `CrateBuilder::new("sweet_potato_snack", user.id)
            .description("For when better than usual")
            .downloads(5)
            .recent_downloads(2)
            .expect_build(conn);`
$DIR/src/tests/routes/crates/list.rs:577:13-577:55: `.description("For when better than usual")`
$DIR/src/tests/routes/crates/list.rs:578:13-578:26: `.downloads(5)`
$DIR/src/tests/routes/crates/list.rs:579:13-579:33: `.recent_downloads(2)`
$DIR/src/tests/routes/crates/list.rs:580:13-580:32: `.expect_build(conn)`
$DIR/src/tests/routes/crates/list.rs:583:20-583:52: `.search("sort=recent-downloads")`
$DIR/src/tests/routes/crates/list.rs:602:44-602:56: `.with_user()`
$DIR/src/tests/routes/crates/list.rs:603:20-603:31: `.as_model()`
$DIR/src/tests/routes/crates/list.rs:605:5-612:8: `app.db(|conn| {
        // More than 90 days ago
        CrateBuilder::new("green_ball", user.id)
            .description("For fetching")
            .downloads(0)
            .recent_downloads(0)
            .expect_build(conn);
    });`
$DIR/src/tests/routes/crates/list.rs:605:8-612:7: `.db(|conn| {
        // More than 90 days ago
        CrateBuilder::new("green_ball", user.id)
            .description("For fetching")
            .downloads(0)
            .recent_downloads(0)
            .expect_build(conn);
    })`
$DIR/src/tests/routes/crates/list.rs:607:9-611:33: `CrateBuilder::new("green_ball", user.id)
            .description("For fetching")
            .downloads(0)
            .recent_downloads(0)
            .expect_build(conn);`
$DIR/src/tests/routes/crates/list.rs:608:13-608:41: `.description("For fetching")`
$DIR/src/tests/routes/crates/list.rs:609:13-609:26: `.downloads(0)`
$DIR/src/tests/routes/crates/list.rs:610:13-610:33: `.recent_downloads(0)`
$DIR/src/tests/routes/crates/list.rs:611:13-611:32: `.expect_build(conn)`
$DIR/src/tests/routes/crates/list.rs:614:20-614:52: `.search("sort=recent-downloads")`
$DIR/src/tests/routes/crates/list.rs:626:44-626:56: `.with_user()`
$DIR/src/tests/routes/crates/list.rs:627:20-627:31: `.as_model()`
$DIR/src/tests/routes/crates/list.rs:629:42-646:7: `.db(|conn| {
        // More than 90 days ago
        let green_crate = CrateBuilder::new("green_ball", user.id)
            .description("For fetching")
            .keyword("dog")
            .downloads(10)
            .recent_downloads(10)
            .expect_build(conn);

        let potato_crate = CrateBuilder::new("sweet_potato_snack", user.id)
            .description("For when better than usual")
            .keyword("dog")
            .downloads(20)
            .recent_downloads(0)
            .expect_build(conn);

        (green_crate, potato_crate)
    })`
$DIR/src/tests/routes/crates/list.rs:632:13-632:41: `.description("For fetching")`
$DIR/src/tests/routes/crates/list.rs:633:13-633:28: `.keyword("dog")`
$DIR/src/tests/routes/crates/list.rs:634:13-634:27: `.downloads(10)`
$DIR/src/tests/routes/crates/list.rs:635:13-635:34: `.recent_downloads(10)`
$DIR/src/tests/routes/crates/list.rs:636:13-636:32: `.expect_build(conn)`
$DIR/src/tests/routes/crates/list.rs:639:13-639:55: `.description("For when better than usual")`
$DIR/src/tests/routes/crates/list.rs:640:13-640:28: `.keyword("dog")`
$DIR/src/tests/routes/crates/list.rs:641:13-641:27: `.downloads(20)`
$DIR/src/tests/routes/crates/list.rs:642:13-642:33: `.recent_downloads(0)`
$DIR/src/tests/routes/crates/list.rs:643:13-643:32: `.expect_build(conn)`
$DIR/src/tests/routes/crates/list.rs:645:9-645:36: `(green_crate, potato_crate)`
$DIR/src/tests/routes/crates/list.rs:650:20-650:42: `.search("keyword=dog")`
$DIR/src/tests/routes/crates/list.rs:663:5-669:8: `app.db(|conn| {
        new_category("Animal", "animal", "animal crates")
            .create_or_update(conn)
            .unwrap();
        Category::update_crate(conn, &green_crate, &["animal"]).unwrap();
        Category::update_crate(conn, &potato_crate, &["animal"]).unwrap();
    });`
$DIR/src/tests/routes/crates/list.rs:663:8-669:7: `.db(|conn| {
        new_category("Animal", "animal", "animal crates")
            .create_or_update(conn)
            .unwrap();
        Category::update_crate(conn, &green_crate, &["animal"]).unwrap();
        Category::update_crate(conn, &potato_crate, &["animal"]).unwrap();
    })`
$DIR/src/tests/routes/crates/list.rs:664:9-666:23: `new_category("Animal", "animal", "animal crates")
            .create_or_update(conn)
            .unwrap();`
$DIR/src/tests/routes/crates/list.rs:665:13-665:36: `.create_or_update(conn)`
$DIR/src/tests/routes/crates/list.rs:667:9-667:74: `Category::update_crate(conn, &green_crate, &["animal"]).unwrap();`
$DIR/src/tests/routes/crates/list.rs:668:9-668:75: `Category::update_crate(conn, &potato_crate, &["animal"]).unwrap();`
$DIR/src/tests/routes/crates/list.rs:673:20-673:46: `.search("category=animal")`
$DIR/src/tests/routes/crates/list.rs:689:44-689:56: `.with_user()`
$DIR/src/tests/routes/crates/list.rs:690:20-690:31: `.as_model()`
$DIR/src/tests/routes/crates/list.rs:692:5-696:8: `app.db(|conn| {
        CrateBuilder::new("pagination_links_1", user.id).expect_build(conn);
        CrateBuilder::new("pagination_links_2", user.id).expect_build(conn);
        CrateBuilder::new("pagination_links_3", user.id).expect_build(conn);
    });`
$DIR/src/tests/routes/crates/list.rs:692:8-696:7: `.db(|conn| {
        CrateBuilder::new("pagination_links_1", user.id).expect_build(conn);
        CrateBuilder::new("pagination_links_2", user.id).expect_build(conn);
        CrateBuilder::new("pagination_links_3", user.id).expect_build(conn);
    })`
$DIR/src/tests/routes/crates/list.rs:693:9-693:77: `CrateBuilder::new("pagination_links_1", user.id).expect_build(conn);`
$DIR/src/tests/routes/crates/list.rs:693:57-693:76: `.expect_build(conn)`
$DIR/src/tests/routes/crates/list.rs:694:9-694:77: `CrateBuilder::new("pagination_links_2", user.id).expect_build(conn);`
$DIR/src/tests/routes/crates/list.rs:694:57-694:76: `.expect_build(conn)`
$DIR/src/tests/routes/crates/list.rs:695:9-695:77: `CrateBuilder::new("pagination_links_3", user.id).expect_build(conn);`
$DIR/src/tests/routes/crates/list.rs:695:57-695:76: `.expect_build(conn)`
$DIR/src/tests/routes/crates/list.rs:702:21-702:51: `.search("letter=p&per_page=1")`
$DIR/src/tests/routes/crates/list.rs:703:21-703:58: `.search("letter=p&page=2&per_page=1")`
$DIR/src/tests/routes/crates/list.rs:704:21-704:58: `.search("letter=p&page=3&per_page=1")`
$DIR/src/tests/routes/crates/list.rs:705:21-705:58: `.search("letter=p&page=4&per_page=1")`
$DIR/src/tests/routes/crates/list.rs:729:44-729:56: `.with_user()`
$DIR/src/tests/routes/crates/list.rs:730:20-730:31: `.as_model()`
$DIR/src/tests/routes/crates/list.rs:732:5-736:8: `app.db(|conn| {
        CrateBuilder::new("pagination_links_1", user.id).expect_build(conn);
        CrateBuilder::new("pagination_links_2", user.id).expect_build(conn);
        CrateBuilder::new("pagination_links_3", user.id).expect_build(conn);
    });`
$DIR/src/tests/routes/crates/list.rs:732:8-736:7: `.db(|conn| {
        CrateBuilder::new("pagination_links_1", user.id).expect_build(conn);
        CrateBuilder::new("pagination_links_2", user.id).expect_build(conn);
        CrateBuilder::new("pagination_links_3", user.id).expect_build(conn);
    })`
$DIR/src/tests/routes/crates/list.rs:733:9-733:77: `CrateBuilder::new("pagination_links_1", user.id).expect_build(conn);`
$DIR/src/tests/routes/crates/list.rs:733:57-733:76: `.expect_build(conn)`
$DIR/src/tests/routes/crates/list.rs:734:9-734:77: `CrateBuilder::new("pagination_links_2", user.id).expect_build(conn);`
$DIR/src/tests/routes/crates/list.rs:734:57-734:76: `.expect_build(conn)`
$DIR/src/tests/routes/crates/list.rs:735:9-735:77: `CrateBuilder::new("pagination_links_3", user.id).expect_build(conn);`
$DIR/src/tests/routes/crates/list.rs:735:57-735:76: `.expect_build(conn)`
$DIR/src/tests/routes/crates/list.rs:741:38-741:45: `.take()`
$DIR/src/tests/routes/crates/list.rs:742:24-742:68: `.search(current_url.trim_start_matches('?'))`
$DIR/src/tests/routes/crates/list.rs:742:43-742:67: `.trim_start_matches('?')`
$DIR/src/tests/routes/crates/list.rs:743:9-743:20: `calls += 1;`
$DIR/src/tests/routes/crates/list.rs:745:9-751:11: `results.append(
            &mut resp
                .crates
                .iter()
                .map(|res| res.name.clone())
                .collect::<Vec<_>>(),
        );`
$DIR/src/tests/routes/crates/list.rs:745:16-751:10: `.append(
            &mut resp
                .crates
                .iter()
                .map(|res| res.name.clone())
                .collect::<Vec<_>>(),
        )`
$DIR/src/tests/routes/crates/list.rs:749:17-749:45: `.map(|res| res.name.clone())`
$DIR/src/tests/routes/crates/list.rs:750:17-750:37: `.collect::<Vec<_>>()`
$DIR/src/tests/routes/crates/list.rs:755:13-755:33: `url = Some(new_url);`
$DIR/src/tests/routes/crates/list.rs:777:44-777:56: `.with_user()`
$DIR/src/tests/routes/crates/list.rs:778:20-778:31: `.as_model()`
$DIR/src/tests/routes/crates/list.rs:780:5-784:8: `app.db(|conn| {
        CrateBuilder::new("pagination_links_1", user.id).expect_build(conn);
        CrateBuilder::new("pagination_links_2", user.id).expect_build(conn);
        CrateBuilder::new("pagination_links_3", user.id).expect_build(conn);
    });`
$DIR/src/tests/routes/crates/list.rs:780:8-784:7: `.db(|conn| {
        CrateBuilder::new("pagination_links_1", user.id).expect_build(conn);
        CrateBuilder::new("pagination_links_2", user.id).expect_build(conn);
        CrateBuilder::new("pagination_links_3", user.id).expect_build(conn);
    })`
$DIR/src/tests/routes/crates/list.rs:781:9-781:77: `CrateBuilder::new("pagination_links_1", user.id).expect_build(conn);`
$DIR/src/tests/routes/crates/list.rs:781:57-781:76: `.expect_build(conn)`
$DIR/src/tests/routes/crates/list.rs:782:9-782:77: `CrateBuilder::new("pagination_links_2", user.id).expect_build(conn);`
$DIR/src/tests/routes/crates/list.rs:782:57-782:76: `.expect_build(conn)`
$DIR/src/tests/routes/crates/list.rs:783:9-783:77: `CrateBuilder::new("pagination_links_3", user.id).expect_build(conn);`
$DIR/src/tests/routes/crates/list.rs:783:57-783:76: `.expect_build(conn)`
$DIR/src/tests/routes/crates/list.rs:787:21-787:42: `.search("per_page=1")`
$DIR/src/tests/routes/crates/list.rs:791:22-791:50: `.search("page=2&per_page=1")`
$DIR/src/tests/routes/crates/list.rs:797:44-797:56: `.with_user()`
$DIR/src/tests/routes/crates/list.rs:798:20-798:31: `.as_model()`
$DIR/src/tests/routes/crates/list.rs:800:5-804:8: `app.db(|conn| {
        CrateBuilder::new("pagination_links_1", user.id).expect_build(conn);
        CrateBuilder::new("pagination_links_2", user.id).expect_build(conn);
        CrateBuilder::new("pagination_links_3", user.id).expect_build(conn);
    });`
$DIR/src/tests/routes/crates/list.rs:800:8-804:7: `.db(|conn| {
        CrateBuilder::new("pagination_links_1", user.id).expect_build(conn);
        CrateBuilder::new("pagination_links_2", user.id).expect_build(conn);
        CrateBuilder::new("pagination_links_3", user.id).expect_build(conn);
    })`
$DIR/src/tests/routes/crates/list.rs:801:9-801:77: `CrateBuilder::new("pagination_links_1", user.id).expect_build(conn);`
$DIR/src/tests/routes/crates/list.rs:801:57-801:76: `.expect_build(conn)`
$DIR/src/tests/routes/crates/list.rs:802:9-802:77: `CrateBuilder::new("pagination_links_2", user.id).expect_build(conn);`
$DIR/src/tests/routes/crates/list.rs:802:57-802:76: `.expect_build(conn)`
$DIR/src/tests/routes/crates/list.rs:803:9-803:77: `CrateBuilder::new("pagination_links_3", user.id).expect_build(conn);`
$DIR/src/tests/routes/crates/list.rs:803:57-803:76: `.expect_build(conn)`
$DIR/src/tests/routes/crates/list.rs:807:13-807:96: `.get_with_query::<()>("/api/v1/crates", "page=1&per_page=100%22%EF%BC%8Cexception")`
$DIR/src/tests/routes/crates/list.rs:815:13-815:96: `.get_with_query::<()>("/api/v1/crates", "page=100%22%EF%BC%8Cexception&per_page=1")`
$DIR/src/tests/routes/crates/list.rs:825:41-825:53: `.with_user()`
$DIR/src/tests/routes/crates/list.rs:826:18-826:29: `.as_model()`
$DIR/src/tests/routes/crates/list.rs:827:5-829:8: `app.db(|conn| {
        CrateBuilder::new("foo_my_packages", id).expect_build(conn);
    });`
$DIR/src/tests/routes/crates/list.rs:827:8-829:7: `.db(|conn| {
        CrateBuilder::new("foo_my_packages", id).expect_build(conn);
    })`
$DIR/src/tests/routes/crates/list.rs:828:9-828:69: `CrateBuilder::new("foo_my_packages", id).expect_build(conn);`
$DIR/src/tests/routes/crates/list.rs:828:49-828:68: `.expect_build(conn)`
$DIR/src/tests/routes/crates/list.rs:831:24-831:46: `.search_by_user_id(id)`
$DIR/src/tests/routes/crates/list.rs:837:44-837:56: `.with_user()`
$DIR/src/tests/routes/crates/list.rs:838:20-838:31: `.as_model()`
$DIR/src/tests/routes/crates/list.rs:840:5-843:8: `app.db(|conn| {
        let krate = CrateBuilder::new("foo_my_packages", user.id).expect_build(conn);
        krate.owner_remove(conn, "foo").unwrap();
    });`
$DIR/src/tests/routes/crates/list.rs:840:8-843:7: `.db(|conn| {
        let krate = CrateBuilder::new("foo_my_packages", user.id).expect_build(conn);
        krate.owner_remove(conn, "foo").unwrap();
    })`
$DIR/src/tests/routes/crates/list.rs:841:66-841:85: `.expect_build(conn)`
$DIR/src/tests/routes/crates/list.rs:842:9-842:50: `krate.owner_remove(conn, "foo").unwrap();`
$DIR/src/tests/routes/crates/list.rs:842:14-842:40: `.owner_remove(conn, "foo")`
$DIR/src/tests/routes/crates/list.rs:845:24-845:51: `.search_by_user_id(user.id)`
$DIR/src/tests/routes/crates/new.rs:6:41-6:53: `.with_user()`
$DIR/src/tests/routes/crates/new.rs:8:33-8:44: `.as_inner()`
$DIR/src/tests/routes/crates/new.rs:11:9-11:53: `user.publish_crate(crate_to_publish).good();`
$DIR/src/tests/routes/crates/new.rs:11:13-11:45: `.publish_crate(crate_to_publish)`
$DIR/src/tests/routes/crates/new.rs:11:45-11:52: `.good()`
$DIR/src/tests/routes/crates/new.rs:15:24-15:56: `.publish_crate(crate_to_publish)`
$DIR/src/tests/routes/crates/new.rs:17:24-17:36: `.into_json()`
$DIR/src/tests/routes/crates/owners/add.rs:9:42-9:54: `.with_user()`
$DIR/src/tests/routes/crates/owners/add.rs:11:23-11:47: `.db_new_user("cilantro")`
$DIR/src/tests/routes/crates/owners/add.rs:12:5-14:8: `app.db(|conn| {
        CrateBuilder::new("guacamole", owner.as_model().id).expect_build(conn);
    });`
$DIR/src/tests/routes/crates/owners/add.rs:12:8-14:7: `.db(|conn| {
        CrateBuilder::new("guacamole", owner.as_model().id).expect_build(conn);
    })`
$DIR/src/tests/routes/crates/owners/add.rs:13:9-13:80: `CrateBuilder::new("guacamole", owner.as_model().id).expect_build(conn);`
$DIR/src/tests/routes/crates/owners/add.rs:13:45-13:56: `.as_model()`
$DIR/src/tests/routes/crates/owners/add.rs:13:60-13:79: `.expect_build(conn)`
$DIR/src/tests/routes/crates/owners/add.rs:31:9-31:63: `.put("/api/v1/crates/guacamole/owners", body.unwrap())`
$DIR/src/tests/routes/crates/owners/add.rs:32:9-32:16: `.good()`
$DIR/src/tests/routes/crates/read.rs:7:44-7:56: `.with_user()`
$DIR/src/tests/routes/crates/read.rs:8:20-8:31: `.as_model()`
$DIR/src/tests/routes/crates/read.rs:10:20-36:7: `.db(|conn| {
        use crates_io::schema::versions;
        use diesel::{update, ExpressionMethods};

        let krate = CrateBuilder::new("foo_show", user.id)
            .description("description")
            .documentation("https://example.com")
            .homepage("http://example.com")
            .version(VersionBuilder::new("1.0.0"))
            .version(VersionBuilder::new("0.5.0"))
            .version(VersionBuilder::new("0.5.1"))
            .keyword("kw1")
            .downloads(20)
            .recent_downloads(10)
            .expect_build(conn);

        // Make version 1.0.0 mimic a version published before we started recording who published
        // versions
        let none: Option<i32> = None;
        update(versions::table)
            .filter(versions::num.eq("1.0.0"))
            .set(versions::published_by.eq(none))
            .execute(conn)
            .unwrap();

        krate
    })`
$DIR/src/tests/routes/crates/read.rs:15:13-15:40: `.description("description")`
$DIR/src/tests/routes/crates/read.rs:16:13-16:50: `.documentation("https://example.com")`
$DIR/src/tests/routes/crates/read.rs:17:13-17:44: `.homepage("http://example.com")`
$DIR/src/tests/routes/crates/read.rs:18:13-18:51: `.version(VersionBuilder::new("1.0.0"))`
$DIR/src/tests/routes/crates/read.rs:19:13-19:51: `.version(VersionBuilder::new("0.5.0"))`
$DIR/src/tests/routes/crates/read.rs:20:13-20:51: `.version(VersionBuilder::new("0.5.1"))`
$DIR/src/tests/routes/crates/read.rs:21:13-21:28: `.keyword("kw1")`
$DIR/src/tests/routes/crates/read.rs:22:13-22:27: `.downloads(20)`
$DIR/src/tests/routes/crates/read.rs:23:13-23:34: `.recent_downloads(10)`
$DIR/src/tests/routes/crates/read.rs:24:13-24:32: `.expect_build(conn)`
$DIR/src/tests/routes/crates/read.rs:29:9-33:23: `update(versions::table)
            .filter(versions::num.eq("1.0.0"))
            .set(versions::published_by.eq(none))
            .execute(conn)
            .unwrap();`
$DIR/src/tests/routes/crates/read.rs:30:13-30:47: `.filter(versions::num.eq("1.0.0"))`
$DIR/src/tests/routes/crates/read.rs:30:34-30:46: `.eq("1.0.0")`
$DIR/src/tests/routes/crates/read.rs:31:13-31:50: `.set(versions::published_by.eq(none))`
$DIR/src/tests/routes/crates/read.rs:31:40-31:49: `.eq(none)`
$DIR/src/tests/routes/crates/read.rs:32:13-32:27: `.execute(conn)`
$DIR/src/tests/routes/crates/read.rs:35:9-35:14: `krate`
$DIR/src/tests/routes/crates/read.rs:38:20-38:43: `.show_crate("foo_show")`
$DIR/src/tests/routes/crates/read.rs:54:5-54:45: `assert_none!(&versions[0].published_by);`
$DIR/src/tests/routes/crates/read.rs:75:44-75:56: `.with_user()`
$DIR/src/tests/routes/crates/read.rs:76:20-76:31: `.as_model()`
$DIR/src/tests/routes/crates/read.rs:78:20-104:7: `.db(|conn| {
        use crates_io::schema::versions;
        use diesel::{update, ExpressionMethods};

        let krate = CrateBuilder::new("foo_show_minimal", user.id)
            .description("description")
            .documentation("https://example.com")
            .homepage("http://example.com")
            .version(VersionBuilder::new("1.0.0"))
            .version(VersionBuilder::new("0.5.0"))
            .version(VersionBuilder::new("0.5.1"))
            .keyword("kw1")
            .downloads(20)
            .recent_downloads(10)
            .expect_build(conn);

        // Make version 1.0.0 mimic a version published before we started recording who published
        // versions
        let none: Option<i32> = None;
        update(versions::table)
            .filter(versions::num.eq("1.0.0"))
            .set(versions::published_by.eq(none))
            .execute(conn)
            .unwrap();

        krate
    })`
$DIR/src/tests/routes/crates/read.rs:83:13-83:40: `.description("description")`
$DIR/src/tests/routes/crates/read.rs:84:13-84:50: `.documentation("https://example.com")`
$DIR/src/tests/routes/crates/read.rs:85:13-85:44: `.homepage("http://example.com")`
$DIR/src/tests/routes/crates/read.rs:86:13-86:51: `.version(VersionBuilder::new("1.0.0"))`
$DIR/src/tests/routes/crates/read.rs:87:13-87:51: `.version(VersionBuilder::new("0.5.0"))`
$DIR/src/tests/routes/crates/read.rs:88:13-88:51: `.version(VersionBuilder::new("0.5.1"))`
$DIR/src/tests/routes/crates/read.rs:89:13-89:28: `.keyword("kw1")`
$DIR/src/tests/routes/crates/read.rs:90:13-90:27: `.downloads(20)`
$DIR/src/tests/routes/crates/read.rs:91:13-91:34: `.recent_downloads(10)`
$DIR/src/tests/routes/crates/read.rs:92:13-92:32: `.expect_build(conn)`
$DIR/src/tests/routes/crates/read.rs:97:9-101:23: `update(versions::table)
            .filter(versions::num.eq("1.0.0"))
            .set(versions::published_by.eq(none))
            .execute(conn)
            .unwrap();`
$DIR/src/tests/routes/crates/read.rs:98:13-98:47: `.filter(versions::num.eq("1.0.0"))`
$DIR/src/tests/routes/crates/read.rs:98:34-98:46: `.eq("1.0.0")`
$DIR/src/tests/routes/crates/read.rs:99:13-99:50: `.set(versions::published_by.eq(none))`
$DIR/src/tests/routes/crates/read.rs:99:40-99:49: `.eq(none)`
$DIR/src/tests/routes/crates/read.rs:100:13-100:27: `.execute(conn)`
$DIR/src/tests/routes/crates/read.rs:103:9-103:14: `krate`
$DIR/src/tests/routes/crates/read.rs:106:20-106:59: `.show_crate_minimal("foo_show_minimal")`
$DIR/src/tests/routes/crates/read.rs:121:39-121:51: `.with_user()`
$DIR/src/tests/routes/crates/read.rs:124:5-124:49: `user.publish_crate(crate_to_publish).good();`
$DIR/src/tests/routes/crates/read.rs:124:9-124:41: `.publish_crate(crate_to_publish)`
$DIR/src/tests/routes/crates/read.rs:124:41-124:48: `.good()`
$DIR/src/tests/routes/crates/read.rs:128:9-128:53: `.add_file("foo_version_size-2.0.0/big", "a")`
$DIR/src/tests/routes/crates/read.rs:129:5-129:49: `user.publish_crate(crate_to_publish).good();`
$DIR/src/tests/routes/crates/read.rs:129:9-129:41: `.publish_crate(crate_to_publish)`
$DIR/src/tests/routes/crates/read.rs:129:41-129:48: `.good()`
$DIR/src/tests/routes/crates/read.rs:131:26-131:57: `.show_crate("foo_version_size")`
$DIR/src/tests/routes/crates/read.rs:138:9-138:36: `.find(|v| v.num == "1.0.0")`
$DIR/src/tests/routes/crates/read.rs:147:9-147:36: `.find(|v| v.num == "2.0.0")`
$DIR/src/tests/routes/crates/read.rs:154:44-154:56: `.with_user()`
$DIR/src/tests/routes/crates/read.rs:155:20-155:31: `.as_model()`
$DIR/src/tests/routes/crates/read.rs:157:5-161:8: `app.db(|conn| {
        CrateBuilder::new("foo_bad_doc_url", user.id)
            .documentation("http://rust-ci.org/foo/foo_bad_doc_url/doc/foo_bad_doc_url/")
            .expect_build(conn)
    });`
$DIR/src/tests/routes/crates/read.rs:157:8-161:7: `.db(|conn| {
        CrateBuilder::new("foo_bad_doc_url", user.id)
            .documentation("http://rust-ci.org/foo/foo_bad_doc_url/doc/foo_bad_doc_url/")
            .expect_build(conn)
    })`
$DIR/src/tests/routes/crates/read.rs:158:9-160:32: `CrateBuilder::new("foo_bad_doc_url", user.id)
            .documentation("http://rust-ci.org/foo/foo_bad_doc_url/doc/foo_bad_doc_url/")
            .expect_build(conn)`
$DIR/src/tests/routes/crates/read.rs:159:13-159:90: `.documentation("http://rust-ci.org/foo/foo_bad_doc_url/doc/foo_bad_doc_url/")`
$DIR/src/tests/routes/crates/read.rs:160:13-160:32: `.expect_build(conn)`
$DIR/src/tests/routes/crates/read.rs:163:20-163:50: `.show_crate("foo_bad_doc_url")`
$DIR/src/tests/routes/crates/reverse_dependencies.rs:22:44-22:56: `.with_user()`
$DIR/src/tests/routes/crates/reverse_dependencies.rs:23:20-23:31: `.as_model()`
$DIR/src/tests/routes/crates/reverse_dependencies.rs:25:5-35:8: `app.db(|conn| {
        let c1 = CrateBuilder::new("c1", user.id).expect_build(conn);
        CrateBuilder::new("c2", user.id)
            .version(VersionBuilder::new("1.0.0").dependency(&c1, None))
            .version(
                VersionBuilder::new("1.1.0")
                    .dependency(&c1, None)
                    .dependency(&c1, Some("foo")),
            )
            .expect_build(conn);
    });`
$DIR/src/tests/routes/crates/reverse_dependencies.rs:25:8-35:7: `.db(|conn| {
        let c1 = CrateBuilder::new("c1", user.id).expect_build(conn);
        CrateBuilder::new("c2", user.id)
            .version(VersionBuilder::new("1.0.0").dependency(&c1, None))
            .version(
                VersionBuilder::new("1.1.0")
                    .dependency(&c1, None)
                    .dependency(&c1, Some("foo")),
            )
            .expect_build(conn);
    })`
$DIR/src/tests/routes/crates/reverse_dependencies.rs:26:50-26:69: `.expect_build(conn)`
$DIR/src/tests/routes/crates/reverse_dependencies.rs:27:9-34:33: `CrateBuilder::new("c2", user.id)
            .version(VersionBuilder::new("1.0.0").dependency(&c1, None))
            .version(
                VersionBuilder::new("1.1.0")
                    .dependency(&c1, None)
                    .dependency(&c1, Some("foo")),
            )
            .expect_build(conn);`
$DIR/src/tests/routes/crates/reverse_dependencies.rs:28:13-28:73: `.version(VersionBuilder::new("1.0.0").dependency(&c1, None))`
$DIR/src/tests/routes/crates/reverse_dependencies.rs:28:50-28:72: `.dependency(&c1, None)`
$DIR/src/tests/routes/crates/reverse_dependencies.rs:29:13-33:14: `.version(
                VersionBuilder::new("1.1.0")
                    .dependency(&c1, None)
                    .dependency(&c1, Some("foo")),
            )`
$DIR/src/tests/routes/crates/reverse_dependencies.rs:31:21-31:43: `.dependency(&c1, None)`
$DIR/src/tests/routes/crates/reverse_dependencies.rs:32:21-32:50: `.dependency(&c1, Some("foo"))`
$DIR/src/tests/routes/crates/reverse_dependencies.rs:34:13-34:32: `.expect_build(conn)`
$DIR/src/tests/routes/crates/reverse_dependencies.rs:37:20-37:47: `.reverse_dependencies("c1")`
$DIR/src/tests/routes/crates/reverse_dependencies.rs:46:20-46:47: `.reverse_dependencies("c2")`
$DIR/src/tests/routes/crates/reverse_dependencies.rs:53:44-53:56: `.with_user()`
$DIR/src/tests/routes/crates/reverse_dependencies.rs:54:20-54:31: `.as_model()`
$DIR/src/tests/routes/crates/reverse_dependencies.rs:56:5-64:8: `app.db(|conn| {
        let c1 = CrateBuilder::new("c1", user.id)
            .version("1.1.0")
            .expect_build(conn);
        CrateBuilder::new("c2", user.id)
            .version("1.0.0")
            .version(VersionBuilder::new("2.0.0").dependency(&c1, None))
            .expect_build(conn);
    });`
$DIR/src/tests/routes/crates/reverse_dependencies.rs:56:8-64:7: `.db(|conn| {
        let c1 = CrateBuilder::new("c1", user.id)
            .version("1.1.0")
            .expect_build(conn);
        CrateBuilder::new("c2", user.id)
            .version("1.0.0")
            .version(VersionBuilder::new("2.0.0").dependency(&c1, None))
            .expect_build(conn);
    })`
$DIR/src/tests/routes/crates/reverse_dependencies.rs:58:13-58:30: `.version("1.1.0")`
$DIR/src/tests/routes/crates/reverse_dependencies.rs:59:13-59:32: `.expect_build(conn)`
$DIR/src/tests/routes/crates/reverse_dependencies.rs:60:9-63:33: `CrateBuilder::new("c2", user.id)
            .version("1.0.0")
            .version(VersionBuilder::new("2.0.0").dependency(&c1, None))
            .expect_build(conn);`
$DIR/src/tests/routes/crates/reverse_dependencies.rs:61:13-61:30: `.version("1.0.0")`
$DIR/src/tests/routes/crates/reverse_dependencies.rs:62:13-62:73: `.version(VersionBuilder::new("2.0.0").dependency(&c1, None))`
$DIR/src/tests/routes/crates/reverse_dependencies.rs:62:50-62:72: `.dependency(&c1, None)`
$DIR/src/tests/routes/crates/reverse_dependencies.rs:63:13-63:32: `.expect_build(conn)`
$DIR/src/tests/routes/crates/reverse_dependencies.rs:66:20-66:47: `.reverse_dependencies("c1")`
$DIR/src/tests/routes/crates/reverse_dependencies.rs:74:44-74:56: `.with_user()`
$DIR/src/tests/routes/crates/reverse_dependencies.rs:75:20-75:31: `.as_model()`
$DIR/src/tests/routes/crates/reverse_dependencies.rs:77:5-85:8: `app.db(|conn| {
        let c1 = CrateBuilder::new("c1", user.id)
            .version("1.0.0")
            .expect_build(conn);
        CrateBuilder::new("c2", user.id)
            .version(VersionBuilder::new("1.0.0").dependency(&c1, None))
            .version("2.0.0")
            .expect_build(conn);
    });`
$DIR/src/tests/routes/crates/reverse_dependencies.rs:77:8-85:7: `.db(|conn| {
        let c1 = CrateBuilder::new("c1", user.id)
            .version("1.0.0")
            .expect_build(conn);
        CrateBuilder::new("c2", user.id)
            .version(VersionBuilder::new("1.0.0").dependency(&c1, None))
            .version("2.0.0")
            .expect_build(conn);
    })`
$DIR/src/tests/routes/crates/reverse_dependencies.rs:79:13-79:30: `.version("1.0.0")`
$DIR/src/tests/routes/crates/reverse_dependencies.rs:80:13-80:32: `.expect_build(conn)`
$DIR/src/tests/routes/crates/reverse_dependencies.rs:81:9-84:33: `CrateBuilder::new("c2", user.id)
            .version(VersionBuilder::new("1.0.0").dependency(&c1, None))
            .version("2.0.0")
            .expect_build(conn);`
$DIR/src/tests/routes/crates/reverse_dependencies.rs:82:13-82:73: `.version(VersionBuilder::new("1.0.0").dependency(&c1, None))`
$DIR/src/tests/routes/crates/reverse_dependencies.rs:82:50-82:72: `.dependency(&c1, None)`
$DIR/src/tests/routes/crates/reverse_dependencies.rs:83:13-83:30: `.version("2.0.0")`
$DIR/src/tests/routes/crates/reverse_dependencies.rs:84:13-84:32: `.expect_build(conn)`
$DIR/src/tests/routes/crates/reverse_dependencies.rs:87:20-87:47: `.reverse_dependencies("c1")`
$DIR/src/tests/routes/crates/reverse_dependencies.rs:94:44-94:56: `.with_user()`
$DIR/src/tests/routes/crates/reverse_dependencies.rs:95:20-95:31: `.as_model()`
$DIR/src/tests/routes/crates/reverse_dependencies.rs:97:5-108:8: `app.db(|conn| {
        let c1 = CrateBuilder::new("c1", user.id)
            .version("1.0.0")
            .expect_build(conn);
        CrateBuilder::new("c2", user.id)
            .version("1.1.0-pre")
            .expect_build(conn);
        CrateBuilder::new("c3", user.id)
            .version(VersionBuilder::new("1.0.0").dependency(&c1, None))
            .version("1.1.0-pre")
            .expect_build(conn);
    });`
$DIR/src/tests/routes/crates/reverse_dependencies.rs:97:8-108:7: `.db(|conn| {
        let c1 = CrateBuilder::new("c1", user.id)
            .version("1.0.0")
            .expect_build(conn);
        CrateBuilder::new("c2", user.id)
            .version("1.1.0-pre")
            .expect_build(conn);
        CrateBuilder::new("c3", user.id)
            .version(VersionBuilder::new("1.0.0").dependency(&c1, None))
            .version("1.1.0-pre")
            .expect_build(conn);
    })`
$DIR/src/tests/routes/crates/reverse_dependencies.rs:99:13-99:30: `.version("1.0.0")`
$DIR/src/tests/routes/crates/reverse_dependencies.rs:100:13-100:32: `.expect_build(conn)`
$DIR/src/tests/routes/crates/reverse_dependencies.rs:101:9-103:33: `CrateBuilder::new("c2", user.id)
            .version("1.1.0-pre")
            .expect_build(conn);`
$DIR/src/tests/routes/crates/reverse_dependencies.rs:102:13-102:34: `.version("1.1.0-pre")`
$DIR/src/tests/routes/crates/reverse_dependencies.rs:103:13-103:32: `.expect_build(conn)`
$DIR/src/tests/routes/crates/reverse_dependencies.rs:104:9-107:33: `CrateBuilder::new("c3", user.id)
            .version(VersionBuilder::new("1.0.0").dependency(&c1, None))
            .version("1.1.0-pre")
            .expect_build(conn);`
$DIR/src/tests/routes/crates/reverse_dependencies.rs:105:13-105:73: `.version(VersionBuilder::new("1.0.0").dependency(&c1, None))`
$DIR/src/tests/routes/crates/reverse_dependencies.rs:105:50-105:72: `.dependency(&c1, None)`
$DIR/src/tests/routes/crates/reverse_dependencies.rs:106:13-106:34: `.version("1.1.0-pre")`
$DIR/src/tests/routes/crates/reverse_dependencies.rs:107:13-107:32: `.expect_build(conn)`
$DIR/src/tests/routes/crates/reverse_dependencies.rs:110:20-110:47: `.reverse_dependencies("c1")`
$DIR/src/tests/routes/crates/reverse_dependencies.rs:118:44-118:56: `.with_user()`
$DIR/src/tests/routes/crates/reverse_dependencies.rs:119:20-119:31: `.as_model()`
$DIR/src/tests/routes/crates/reverse_dependencies.rs:121:5-129:8: `app.db(|conn| {
        let c1 = CrateBuilder::new("c1", user.id)
            .version("1.0.0")
            .expect_build(conn);
        CrateBuilder::new("c2", user.id)
            .version("1.0.0")
            .version(VersionBuilder::new("2.0.0").dependency(&c1, None))
            .expect_build(conn);
    });`
$DIR/src/tests/routes/crates/reverse_dependencies.rs:121:8-129:7: `.db(|conn| {
        let c1 = CrateBuilder::new("c1", user.id)
            .version("1.0.0")
            .expect_build(conn);
        CrateBuilder::new("c2", user.id)
            .version("1.0.0")
            .version(VersionBuilder::new("2.0.0").dependency(&c1, None))
            .expect_build(conn);
    })`
$DIR/src/tests/routes/crates/reverse_dependencies.rs:123:13-123:30: `.version("1.0.0")`
$DIR/src/tests/routes/crates/reverse_dependencies.rs:124:13-124:32: `.expect_build(conn)`
$DIR/src/tests/routes/crates/reverse_dependencies.rs:125:9-128:33: `CrateBuilder::new("c2", user.id)
            .version("1.0.0")
            .version(VersionBuilder::new("2.0.0").dependency(&c1, None))
            .expect_build(conn);`
$DIR/src/tests/routes/crates/reverse_dependencies.rs:126:13-126:30: `.version("1.0.0")`
$DIR/src/tests/routes/crates/reverse_dependencies.rs:127:13-127:73: `.version(VersionBuilder::new("2.0.0").dependency(&c1, None))`
$DIR/src/tests/routes/crates/reverse_dependencies.rs:127:50-127:72: `.dependency(&c1, None)`
$DIR/src/tests/routes/crates/reverse_dependencies.rs:128:13-128:32: `.expect_build(conn)`
$DIR/src/tests/routes/crates/reverse_dependencies.rs:131:20-131:47: `.reverse_dependencies("c1")`
$DIR/src/tests/routes/crates/reverse_dependencies.rs:136:5-144:8: `app.db(|conn| {
        use crates_io::schema::versions;
        use diesel::{ExpressionMethods, QueryDsl, RunQueryDsl};

        diesel::update(versions::table.filter(versions::num.eq("2.0.0")))
            .set(versions::yanked.eq(true))
            .execute(conn)
            .unwrap();
    });`
$DIR/src/tests/routes/crates/reverse_dependencies.rs:136:8-144:7: `.db(|conn| {
        use crates_io::schema::versions;
        use diesel::{ExpressionMethods, QueryDsl, RunQueryDsl};

        diesel::update(versions::table.filter(versions::num.eq("2.0.0")))
            .set(versions::yanked.eq(true))
            .execute(conn)
            .unwrap();
    })`
$DIR/src/tests/routes/crates/reverse_dependencies.rs:140:9-143:23: `diesel::update(versions::table.filter(versions::num.eq("2.0.0")))
            .set(versions::yanked.eq(true))
            .execute(conn)
            .unwrap();`
$DIR/src/tests/routes/crates/reverse_dependencies.rs:140:39-140:73: `.filter(versions::num.eq("2.0.0"))`
$DIR/src/tests/routes/crates/reverse_dependencies.rs:140:60-140:72: `.eq("2.0.0")`
$DIR/src/tests/routes/crates/reverse_dependencies.rs:141:13-141:44: `.set(versions::yanked.eq(true))`
$DIR/src/tests/routes/crates/reverse_dependencies.rs:141:34-141:43: `.eq(true)`
$DIR/src/tests/routes/crates/reverse_dependencies.rs:142:13-142:27: `.execute(conn)`
$DIR/src/tests/routes/crates/reverse_dependencies.rs:146:20-146:47: `.reverse_dependencies("c1")`
$DIR/src/tests/routes/crates/reverse_dependencies.rs:153:44-153:56: `.with_user()`
$DIR/src/tests/routes/crates/reverse_dependencies.rs:154:20-154:31: `.as_model()`
$DIR/src/tests/routes/crates/reverse_dependencies.rs:156:5-179:8: `app.db(|conn| {
        use crates_io::schema::versions;
        use diesel::{update, ExpressionMethods, RunQueryDsl};

        let c1 = CrateBuilder::new("c1", user.id)
            .version("1.0.0")
            .expect_build(conn);
        CrateBuilder::new("c2", user.id)
            .version(VersionBuilder::new("2.0.0").dependency(&c1, None))
            .expect_build(conn);

        // Make c2's version (and,incidentally, c1's, but that doesn't matter) mimic a version
        // published before we started recording who published versions
        let none: Option<i32> = None;
        update(versions::table)
            .set(versions::published_by.eq(none))
            .execute(conn)
            .unwrap();

        // c3's version will have the published by info recorded
        CrateBuilder::new("c3", user.id)
            .version(VersionBuilder::new("3.0.0").dependency(&c1, None))
            .expect_build(conn);
    });`
$DIR/src/tests/routes/crates/reverse_dependencies.rs:156:8-179:7: `.db(|conn| {
        use crates_io::schema::versions;
        use diesel::{update, ExpressionMethods, RunQueryDsl};

        let c1 = CrateBuilder::new("c1", user.id)
            .version("1.0.0")
            .expect_build(conn);
        CrateBuilder::new("c2", user.id)
            .version(VersionBuilder::new("2.0.0").dependency(&c1, None))
            .expect_build(conn);

        // Make c2's version (and,incidentally, c1's, but that doesn't matter) mimic a version
        // published before we started recording who published versions
        let none: Option<i32> = None;
        update(versions::table)
            .set(versions::published_by.eq(none))
            .execute(conn)
            .unwrap();

        // c3's version will have the published by info recorded
        CrateBuilder::new("c3", user.id)
            .version(VersionBuilder::new("3.0.0").dependency(&c1, None))
            .expect_build(conn);
    })`
$DIR/src/tests/routes/crates/reverse_dependencies.rs:161:13-161:30: `.version("1.0.0")`
$DIR/src/tests/routes/crates/reverse_dependencies.rs:162:13-162:32: `.expect_build(conn)`
$DIR/src/tests/routes/crates/reverse_dependencies.rs:163:9-165:33: `CrateBuilder::new("c2", user.id)
            .version(VersionBuilder::new("2.0.0").dependency(&c1, None))
            .expect_build(conn);`
$DIR/src/tests/routes/crates/reverse_dependencies.rs:164:13-164:73: `.version(VersionBuilder::new("2.0.0").dependency(&c1, None))`
$DIR/src/tests/routes/crates/reverse_dependencies.rs:164:50-164:72: `.dependency(&c1, None)`
$DIR/src/tests/routes/crates/reverse_dependencies.rs:165:13-165:32: `.expect_build(conn)`
$DIR/src/tests/routes/crates/reverse_dependencies.rs:170:9-173:23: `update(versions::table)
            .set(versions::published_by.eq(none))
            .execute(conn)
            .unwrap();`
$DIR/src/tests/routes/crates/reverse_dependencies.rs:171:13-171:50: `.set(versions::published_by.eq(none))`
$DIR/src/tests/routes/crates/reverse_dependencies.rs:171:40-171:49: `.eq(none)`
$DIR/src/tests/routes/crates/reverse_dependencies.rs:172:13-172:27: `.execute(conn)`
$DIR/src/tests/routes/crates/reverse_dependencies.rs:176:9-178:33: `CrateBuilder::new("c3", user.id)
            .version(VersionBuilder::new("3.0.0").dependency(&c1, None))
            .expect_build(conn);`
$DIR/src/tests/routes/crates/reverse_dependencies.rs:177:13-177:73: `.version(VersionBuilder::new("3.0.0").dependency(&c1, None))`
$DIR/src/tests/routes/crates/reverse_dependencies.rs:177:50-177:72: `.dependency(&c1, None)`
$DIR/src/tests/routes/crates/reverse_dependencies.rs:178:13-178:32: `.expect_build(conn)`
$DIR/src/tests/routes/crates/reverse_dependencies.rs:181:20-181:47: `.reverse_dependencies("c1")`
$DIR/src/tests/routes/crates/reverse_dependencies.rs:184:42-184:68: `.find(|v| v.krate == "c2")`
$DIR/src/tests/routes/crates/reverse_dependencies.rs:185:5-185:44: `assert_none!(&c2_version.published_by);`
$DIR/src/tests/routes/crates/reverse_dependencies.rs:187:42-187:68: `.find(|v| v.krate == "c3")`
$DIR/src/tests/routes/crates/reverse_dependencies.rs:196:44-196:56: `.with_user()`
$DIR/src/tests/routes/crates/reverse_dependencies.rs:197:20-197:31: `.as_model()`
$DIR/src/tests/routes/crates/reverse_dependencies.rs:201:5-208:8: `app.db(|conn| {
        let c1 = CrateBuilder::new("c1", user.id).expect_build(conn);
        // The crate that depends on c1...
        CrateBuilder::new("c2", user.id)
            // ...has a patch version at the limits of what the semver crate supports
            .version(VersionBuilder::new(&large_but_valid_version_number).dependency(&c1, None))
            .expect_build(conn);
    });`
$DIR/src/tests/routes/crates/reverse_dependencies.rs:201:8-208:7: `.db(|conn| {
        let c1 = CrateBuilder::new("c1", user.id).expect_build(conn);
        // The crate that depends on c1...
        CrateBuilder::new("c2", user.id)
            // ...has a patch version at the limits of what the semver crate supports
            .version(VersionBuilder::new(&large_but_valid_version_number).dependency(&c1, None))
            .expect_build(conn);
    })`
$DIR/src/tests/routes/crates/reverse_dependencies.rs:202:50-202:69: `.expect_build(conn)`
$DIR/src/tests/routes/crates/reverse_dependencies.rs:204:9-207:33: `CrateBuilder::new("c2", user.id)
            // ...has a patch version at the limits of what the semver crate supports
            .version(VersionBuilder::new(&large_but_valid_version_number).dependency(&c1, None))
            .expect_build(conn);`
$DIR/src/tests/routes/crates/reverse_dependencies.rs:205:13-206:97: `// ...has a patch version at the limits of what the semver crate supports
            .version(VersionBuilder::new(&large_but_valid_version_number).dependency(&c1, None))`
$DIR/src/tests/routes/crates/reverse_dependencies.rs:206:74-206:96: `.dependency(&c1, None)`
$DIR/src/tests/routes/crates/reverse_dependencies.rs:207:13-207:32: `.expect_build(conn)`
$DIR/src/tests/routes/crates/reverse_dependencies.rs:210:20-210:47: `.reverse_dependencies("c1")`
$DIR/src/tests/routes/crates/versions/authors.rs:8:44-8:56: `.with_user()`
$DIR/src/tests/routes/crates/versions/authors.rs:9:20-9:31: `.as_model()`
$DIR/src/tests/routes/crates/versions/authors.rs:11:5-15:8: `app.db(|conn| {
        CrateBuilder::new("foo_authors", user.id)
            .version("1.0.0")
            .expect_build(conn);
    });`
$DIR/src/tests/routes/crates/versions/authors.rs:11:8-15:7: `.db(|conn| {
        CrateBuilder::new("foo_authors", user.id)
            .version("1.0.0")
            .expect_build(conn);
    })`
$DIR/src/tests/routes/crates/versions/authors.rs:12:9-14:33: `CrateBuilder::new("foo_authors", user.id)
            .version("1.0.0")
            .expect_build(conn);`
$DIR/src/tests/routes/crates/versions/authors.rs:13:13-13:30: `.version("1.0.0")`
$DIR/src/tests/routes/crates/versions/authors.rs:14:13-14:32: `.expect_build(conn)`
$DIR/src/tests/routes/crates/versions/authors.rs:17:27-17:75: `.get("/api/v1/crates/foo_authors/1.0.0/authors")`
$DIR/src/tests/routes/crates/versions/authors.rs:17:75-17:82: `.good()`
$DIR/src/tests/routes/crates/versions/authors.rs:18:20-18:32: `.as_object()`
$DIR/src/tests/routes/crates/versions/dependencies.rs:13:44-13:56: `.with_user()`
$DIR/src/tests/routes/crates/versions/dependencies.rs:14:20-14:31: `.as_model()`
$DIR/src/tests/routes/crates/versions/dependencies.rs:16:5-22:8: `app.db(|conn| {
        let c1 = CrateBuilder::new("foo_deps", user.id).expect_build(conn);
        let c2 = CrateBuilder::new("bar_deps", user.id).expect_build(conn);
        VersionBuilder::new("1.0.0")
            .dependency(&c2, None)
            .expect_build(c1.id, user.id, conn);
    });`
$DIR/src/tests/routes/crates/versions/dependencies.rs:16:8-22:7: `.db(|conn| {
        let c1 = CrateBuilder::new("foo_deps", user.id).expect_build(conn);
        let c2 = CrateBuilder::new("bar_deps", user.id).expect_build(conn);
        VersionBuilder::new("1.0.0")
            .dependency(&c2, None)
            .expect_build(c1.id, user.id, conn);
    })`
$DIR/src/tests/routes/crates/versions/dependencies.rs:17:56-17:75: `.expect_build(conn)`
$DIR/src/tests/routes/crates/versions/dependencies.rs:18:56-18:75: `.expect_build(conn)`
$DIR/src/tests/routes/crates/versions/dependencies.rs:19:9-21:49: `VersionBuilder::new("1.0.0")
            .dependency(&c2, None)
            .expect_build(c1.id, user.id, conn);`
$DIR/src/tests/routes/crates/versions/dependencies.rs:20:13-20:35: `.dependency(&c2, None)`
$DIR/src/tests/routes/crates/versions/dependencies.rs:21:13-21:48: `.expect_build(c1.id, user.id, conn)`
$DIR/src/tests/routes/crates/versions/dependencies.rs:25:9-25:59: `.get("/api/v1/crates/foo_deps/1.0.0/dependencies")`
$DIR/src/tests/routes/crates/versions/dependencies.rs:26:9-26:16: `.good()`
$DIR/src/tests/routes/crates/versions/dependencies.rs:29:24-29:80: `.get::<()>("/api/v1/crates/foo_deps/1.0.2/dependencies")`
$DIR/src/tests/routes/crates/versions/download.rs:6:44-6:56: `.with_user()`
$DIR/src/tests/routes/crates/versions/download.rs:7:20-7:31: `.as_model()`
$DIR/src/tests/routes/crates/versions/download.rs:9:5-11:8: `app.db(|conn| {
        CrateBuilder::new("foo_bad", user.id).expect_build(conn);
    });`
$DIR/src/tests/routes/crates/versions/download.rs:9:8-11:7: `.db(|conn| {
        CrateBuilder::new("foo_bad", user.id).expect_build(conn);
    })`
$DIR/src/tests/routes/crates/versions/download.rs:10:9-10:66: `CrateBuilder::new("foo_bad", user.id).expect_build(conn);`
$DIR/src/tests/routes/crates/versions/download.rs:10:46-10:65: `.expect_build(conn)`
$DIR/src/tests/routes/crates/versions/download.rs:13:9-13:54: `.get("/api/v1/crates/foo_bad/0.1.0/download")`
$DIR/src/tests/routes/crates/versions/download.rs:19:44-19:56: `.with_user()`
$DIR/src/tests/routes/crates/versions/download.rs:20:20-20:31: `.as_model()`
$DIR/src/tests/routes/crates/versions/download.rs:22:5-26:8: `app.db(|conn| {
        CrateBuilder::new("foo_download", user.id)
            .version(VersionBuilder::new("1.0.0"))
            .expect_build(conn);
    });`
$DIR/src/tests/routes/crates/versions/download.rs:22:8-26:7: `.db(|conn| {
        CrateBuilder::new("foo_download", user.id)
            .version(VersionBuilder::new("1.0.0"))
            .expect_build(conn);
    })`
$DIR/src/tests/routes/crates/versions/download.rs:23:9-25:33: `CrateBuilder::new("foo_download", user.id)
            .version(VersionBuilder::new("1.0.0"))
            .expect_build(conn);`
$DIR/src/tests/routes/crates/versions/download.rs:24:13-24:51: `.version(VersionBuilder::new("1.0.0"))`
$DIR/src/tests/routes/crates/versions/download.rs:25:13-25:32: `.expect_build(conn)`
$DIR/src/tests/routes/crates/versions/download.rs:30:9-30:65: `.get::<()>("/api/v1/crates/foo-download/1.0.0/download")`
$DIR/src/tests/routes/crates/versions/download.rs:37:9-39:11: `.with_config(|config| {
            config.force_unconditional_redirects = true;
        })`
$DIR/src/tests/routes/crates/versions/download.rs:38:13-38:57: `config.force_unconditional_redirects = true;`
$DIR/src/tests/routes/crates/versions/download.rs:40:9-40:21: `.with_user()`
$DIR/src/tests/routes/crates/versions/download.rs:42:5-46:8: `app.db(|conn| {
        CrateBuilder::new("foo-download", user.as_model().id)
            .version(VersionBuilder::new("1.0.0"))
            .expect_build(conn);
    });`
$DIR/src/tests/routes/crates/versions/download.rs:42:8-46:7: `.db(|conn| {
        CrateBuilder::new("foo-download", user.as_model().id)
            .version(VersionBuilder::new("1.0.0"))
            .expect_build(conn);
    })`
$DIR/src/tests/routes/crates/versions/download.rs:43:9-45:33: `CrateBuilder::new("foo-download", user.as_model().id)
            .version(VersionBuilder::new("1.0.0"))
            .expect_build(conn);`
$DIR/src/tests/routes/crates/versions/download.rs:43:47-43:58: `.as_model()`
$DIR/src/tests/routes/crates/versions/download.rs:44:13-44:51: `.version(VersionBuilder::new("1.0.0"))`
$DIR/src/tests/routes/crates/versions/download.rs:45:13-45:32: `.expect_build(conn)`
$DIR/src/tests/routes/crates/versions/download.rs:49:5-50:85: `anon.get::<()>("/api/v1/crates/foo-download/1.0.0/download")
        .assert_redirect_ends_with("/crates/foo-download/foo-download-1.0.0.crate");`
$DIR/src/tests/routes/crates/versions/download.rs:49:9-49:65: `.get::<()>("/api/v1/crates/foo-download/1.0.0/download")`
$DIR/src/tests/routes/crates/versions/download.rs:50:9-50:84: `.assert_redirect_ends_with("/crates/foo-download/foo-download-1.0.0.crate")`
$DIR/src/tests/routes/crates/versions/download.rs:53:5-54:85: `anon.get::<()>("/api/v1/crates/Foo_downloaD/1.0.0/download")
        .assert_redirect_ends_with("/crates/Foo_downloaD/Foo_downloaD-1.0.0.crate");`
$DIR/src/tests/routes/crates/versions/download.rs:53:9-53:65: `.get::<()>("/api/v1/crates/Foo_downloaD/1.0.0/download")`
$DIR/src/tests/routes/crates/versions/download.rs:54:9-54:84: `.assert_redirect_ends_with("/crates/Foo_downloaD/Foo_downloaD-1.0.0.crate")`
$DIR/src/tests/routes/crates/versions/download.rs:57:5-58:85: `anon.get::<()>("/api/v1/crates/foo-download/2.0.0/download")
        .assert_redirect_ends_with("/crates/foo-download/foo-download-2.0.0.crate");`
$DIR/src/tests/routes/crates/versions/download.rs:57:9-57:65: `.get::<()>("/api/v1/crates/foo-download/2.0.0/download")`
$DIR/src/tests/routes/crates/versions/download.rs:58:9-58:84: `.assert_redirect_ends_with("/crates/foo-download/foo-download-2.0.0.crate")`
$DIR/src/tests/routes/crates/versions/download.rs:61:9-61:65: `.get::<()>("/api/v1/crates/bar-download/1.0.0/download")`
$DIR/src/tests/routes/crates/versions/download.rs:71:44-71:56: `.with_user()`
$DIR/src/tests/routes/crates/versions/download.rs:72:20-72:31: `.as_model()`
$DIR/src/tests/routes/crates/versions/download.rs:74:5-78:8: `app.db(|conn| {
        CrateBuilder::new("foo_download", user.id)
            .version(VersionBuilder::new("1.0.0"))
            .expect_build(conn);
    });`
$DIR/src/tests/routes/crates/versions/download.rs:74:8-78:7: `.db(|conn| {
        CrateBuilder::new("foo_download", user.id)
            .version(VersionBuilder::new("1.0.0"))
            .expect_build(conn);
    })`
$DIR/src/tests/routes/crates/versions/download.rs:75:9-77:33: `CrateBuilder::new("foo_download", user.id)
            .version(VersionBuilder::new("1.0.0"))
            .expect_build(conn);`
$DIR/src/tests/routes/crates/versions/download.rs:76:13-76:51: `.version(VersionBuilder::new("1.0.0"))`
$DIR/src/tests/routes/crates/versions/download.rs:77:13-77:32: `.expect_build(conn)`
$DIR/src/tests/routes/crates/versions/download.rs:80:5-81:85: `anon.get::<()>("/api/v1/crates/foo_download/1.0.0/download")
        .assert_redirect_ends_with("/crates/foo_download/foo_download-1.0.0.crate");`
$DIR/src/tests/routes/crates/versions/download.rs:80:9-80:65: `.get::<()>("/api/v1/crates/foo_download/1.0.0/download")`
$DIR/src/tests/routes/crates/versions/download.rs:81:9-81:84: `.assert_redirect_ends_with("/crates/foo_download/foo_download-1.0.0.crate")`
$DIR/src/tests/routes/crates/versions/download.rs:84:5-89:8: `app.db(|conn| {
        diesel::update(crates.filter(name.eq("foo_download")))
            .set(name.eq("other"))
            .execute(conn)
            .unwrap();
    });`
$DIR/src/tests/routes/crates/versions/download.rs:84:8-89:7: `.db(|conn| {
        diesel::update(crates.filter(name.eq("foo_download")))
            .set(name.eq("other"))
            .execute(conn)
            .unwrap();
    })`
$DIR/src/tests/routes/crates/versions/download.rs:85:9-88:23: `diesel::update(crates.filter(name.eq("foo_download")))
            .set(name.eq("other"))
            .execute(conn)
            .unwrap();`
$DIR/src/tests/routes/crates/versions/download.rs:85:30-85:62: `.filter(name.eq("foo_download"))`
$DIR/src/tests/routes/crates/versions/download.rs:85:42-85:61: `.eq("foo_download")`
$DIR/src/tests/routes/crates/versions/download.rs:86:13-86:35: `.set(name.eq("other"))`
$DIR/src/tests/routes/crates/versions/download.rs:86:22-86:34: `.eq("other")`
$DIR/src/tests/routes/crates/versions/download.rs:87:13-87:27: `.execute(conn)`
$DIR/src/tests/routes/crates/versions/download.rs:92:5-93:85: `anon.get::<()>("/api/v1/crates/foo_download/1.0.0/download")
        .assert_redirect_ends_with("/crates/foo_download/foo_download-1.0.0.crate");`
$DIR/src/tests/routes/crates/versions/download.rs:92:9-92:65: `.get::<()>("/api/v1/crates/foo_download/1.0.0/download")`
$DIR/src/tests/routes/crates/versions/download.rs:93:9-93:84: `.assert_redirect_ends_with("/crates/foo_download/foo_download-1.0.0.crate")`
$DIR/src/tests/routes/crates/versions/download.rs:96:5-96:46: `downloads::persist_downloads_count(&app);`
$DIR/src/tests/routes/crates/versions/download.rs:103:44-103:56: `.with_user()`
$DIR/src/tests/routes/crates/versions/download.rs:104:20-104:31: `.as_model()`
$DIR/src/tests/routes/crates/versions/download.rs:106:5-110:8: `app.db(|conn| {
        CrateBuilder::new("foo", user.id)
            .version(VersionBuilder::new("1.0.0+bar"))
            .expect_build(conn);
    });`
$DIR/src/tests/routes/crates/versions/download.rs:106:8-110:7: `.db(|conn| {
        CrateBuilder::new("foo", user.id)
            .version(VersionBuilder::new("1.0.0+bar"))
            .expect_build(conn);
    })`
$DIR/src/tests/routes/crates/versions/download.rs:107:9-109:33: `CrateBuilder::new("foo", user.id)
            .version(VersionBuilder::new("1.0.0+bar"))
            .expect_build(conn);`
$DIR/src/tests/routes/crates/versions/download.rs:108:13-108:55: `.version(VersionBuilder::new("1.0.0+bar"))`
$DIR/src/tests/routes/crates/versions/download.rs:109:13-109:32: `.expect_build(conn)`
$DIR/src/tests/routes/crates/versions/download.rs:112:5-113:73: `anon.get::<()>("/api/v1/crates/foo/1.0.0+bar/download")
        .assert_redirect_ends_with("/crates/foo/foo-1.0.0%2Bbar.crate");`
$DIR/src/tests/routes/crates/versions/download.rs:112:9-112:60: `.get::<()>("/api/v1/crates/foo/1.0.0+bar/download")`
$DIR/src/tests/routes/crates/versions/download.rs:113:9-113:72: `.assert_redirect_ends_with("/crates/foo/foo-1.0.0%2Bbar.crate")`
$DIR/src/tests/routes/crates/versions/download.rs:115:9-115:58: `.get::<()>("/api/v1/crates/foo/1.0.0+bar/readme")`
$DIR/src/tests/routes/crates/versions/read.rs:9:44-9:56: `.with_user()`
$DIR/src/tests/routes/crates/versions/read.rs:10:20-10:31: `.as_model()`
$DIR/src/tests/routes/crates/versions/read.rs:12:16-19:7: `.db(|conn| {
        let krate = CrateBuilder::new("foo_vers_show", user.id).expect_build(conn);
        VersionBuilder::new("2.0.0")
            .size(1234)
            .checksum("c241cd77c3723ccf1aa453f169ee60c0a888344da504bee0142adb859092acb4")
            .rust_version("1.64")
            .expect_build(krate.id, user.id, conn)
    })`
$DIR/src/tests/routes/crates/versions/read.rs:13:64-13:83: `.expect_build(conn)`
$DIR/src/tests/routes/crates/versions/read.rs:14:9-18:51: `VersionBuilder::new("2.0.0")
            .size(1234)
            .checksum("c241cd77c3723ccf1aa453f169ee60c0a888344da504bee0142adb859092acb4")
            .rust_version("1.64")
            .expect_build(krate.id, user.id, conn)`
$DIR/src/tests/routes/crates/versions/read.rs:15:13-15:24: `.size(1234)`
$DIR/src/tests/routes/crates/versions/read.rs:16:13-16:90: `.checksum("c241cd77c3723ccf1aa453f169ee60c0a888344da504bee0142adb859092acb4")`
$DIR/src/tests/routes/crates/versions/read.rs:17:13-17:34: `.rust_version("1.64")`
$DIR/src/tests/routes/crates/versions/read.rs:18:13-18:51: `.expect_build(krate.id, user.id, conn)`
$DIR/src/tests/routes/crates/versions/read.rs:22:27-22:36: `.get(url)`
$DIR/src/tests/routes/crates/versions/read.rs:22:36-22:43: `.good()`
$DIR/src/tests/routes/crates/versions/read.rs:36:44-36:56: `.with_user()`
$DIR/src/tests/routes/crates/versions/read.rs:37:20-37:31: `.as_model()`
$DIR/src/tests/routes/crates/versions/read.rs:39:16-51:7: `.db(|conn| {
        let krate = CrateBuilder::new("foo_vers_show_no_pb", user.id).expect_build(conn);
        let version = VersionBuilder::new("1.0.0").expect_build(krate.id, user.id, conn);

        // Mimic a version published before we started recording who published versions
        let none: Option<i32> = None;
        update(versions::table)
            .set(versions::published_by.eq(none))
            .execute(conn)
            .unwrap();

        version
    })`
$DIR/src/tests/routes/crates/versions/read.rs:40:70-40:89: `.expect_build(conn)`
$DIR/src/tests/routes/crates/versions/read.rs:41:51-41:89: `.expect_build(krate.id, user.id, conn)`
$DIR/src/tests/routes/crates/versions/read.rs:45:9-48:23: `update(versions::table)
            .set(versions::published_by.eq(none))
            .execute(conn)
            .unwrap();`
$DIR/src/tests/routes/crates/versions/read.rs:46:13-46:50: `.set(versions::published_by.eq(none))`
$DIR/src/tests/routes/crates/versions/read.rs:46:40-46:49: `.eq(none)`
$DIR/src/tests/routes/crates/versions/read.rs:47:13-47:27: `.execute(conn)`
$DIR/src/tests/routes/crates/versions/read.rs:50:9-50:16: `version`
$DIR/src/tests/routes/crates/versions/read.rs:54:27-54:36: `.get(url)`
$DIR/src/tests/routes/crates/versions/read.rs:54:36-54:43: `.good()`
$DIR/src/tests/routes/crates/versions/yank_unyank.rs:32:45-32:58: `.with_token()`
$DIR/src/tests/routes/crates/versions/yank_unyank.rs:34:27-34:46: `.db_new_user("bar")`
$DIR/src/tests/routes/crates/versions/yank_unyank.rs:35:36-35:47: `.as_model()`
$DIR/src/tests/routes/crates/versions/yank_unyank.rs:36:5-40:8: `app.db(|conn| {
        CrateBuilder::new("foo_not", another_user.id)
            .version("1.0.0")
            .expect_build(conn);
    });`
$DIR/src/tests/routes/crates/versions/yank_unyank.rs:36:8-40:7: `.db(|conn| {
        CrateBuilder::new("foo_not", another_user.id)
            .version("1.0.0")
            .expect_build(conn);
    })`
$DIR/src/tests/routes/crates/versions/yank_unyank.rs:37:9-39:33: `CrateBuilder::new("foo_not", another_user.id)
            .version("1.0.0")
            .expect_build(conn);`
$DIR/src/tests/routes/crates/versions/yank_unyank.rs:38:13-38:30: `.version("1.0.0")`
$DIR/src/tests/routes/crates/versions/yank_unyank.rs:39:13-39:32: `.expect_build(conn)`
$DIR/src/tests/routes/crates/versions/yank_unyank.rs:42:25-42:50: `.yank("foo_not", "1.0.0")`
$DIR/src/tests/routes/crates/versions/yank_unyank.rs:52:46-52:59: `.with_token()`
$DIR/src/tests/routes/crates/versions/yank_unyank.rs:56:5-56:50: `token.publish_crate(crate_to_publish).good();`
$DIR/src/tests/routes/crates/versions/yank_unyank.rs:56:10-56:42: `.publish_crate(crate_to_publish)`
$DIR/src/tests/routes/crates/versions/yank_unyank.rs:56:42-56:49: `.good()`
$DIR/src/tests/routes/crates/versions/yank_unyank.rs:59:5-59:39: `token.yank("fyk", "1.0.0").good();`
$DIR/src/tests/routes/crates/versions/yank_unyank.rs:59:10-59:31: `.yank("fyk", "1.0.0")`
$DIR/src/tests/routes/crates/versions/yank_unyank.rs:59:31-59:38: `.good()`
$DIR/src/tests/routes/crates/versions/yank_unyank.rs:62:20-62:49: `.show_version("fyk", "1.0.0")`
$DIR/src/tests/routes/crates/versions/yank_unyank.rs:73:46-73:59: `.with_token()`
$DIR/src/tests/routes/crates/versions/yank_unyank.rs:77:5-77:50: `token.publish_crate(crate_to_publish).good();`
$DIR/src/tests/routes/crates/versions/yank_unyank.rs:77:10-77:42: `.publish_crate(crate_to_publish)`
$DIR/src/tests/routes/crates/versions/yank_unyank.rs:77:42-77:49: `.good()`
$DIR/src/tests/routes/crates/versions/yank_unyank.rs:80:5-80:39: `token.yank("fyk", "1.0.0").good();`
$DIR/src/tests/routes/crates/versions/yank_unyank.rs:80:10-80:31: `.yank("fyk", "1.0.0")`
$DIR/src/tests/routes/crates/versions/yank_unyank.rs:80:31-80:38: `.good()`
$DIR/src/tests/routes/crates/versions/yank_unyank.rs:83:5-83:41: `token.unyank("fyk", "1.0.0").good();`
$DIR/src/tests/routes/crates/versions/yank_unyank.rs:83:10-83:33: `.unyank("fyk", "1.0.0")`
$DIR/src/tests/routes/crates/versions/yank_unyank.rs:83:33-83:40: `.good()`
$DIR/src/tests/routes/crates/versions/yank_unyank.rs:86:20-86:49: `.show_version("fyk", "1.0.0")`
$DIR/src/tests/routes/crates/versions/yank_unyank.rs:117:30-117:62: `.yank(CRATE_NAME, CRATE_VERSION)`
$DIR/src/tests/routes/crates/versions/yank_unyank.rs:124:30-124:64: `.unyank(CRATE_NAME, CRATE_VERSION)`
$DIR/src/tests/routes/crates/versions/yank_unyank.rs:136:30-136:62: `.yank(CRATE_NAME, CRATE_VERSION)`
$DIR/src/tests/routes/crates/versions/yank_unyank.rs:140:30-140:64: `.unyank(CRATE_NAME, CRATE_VERSION)`
$DIR/src/tests/routes/crates/versions/yank_unyank.rs:148:28-148:55: `.db_new_token("test-token")`
$DIR/src/tests/routes/crates/versions/yank_unyank.rs:150:30-150:62: `.yank(CRATE_NAME, CRATE_VERSION)`
$DIR/src/tests/routes/crates/versions/yank_unyank.rs:154:30-154:64: `.unyank(CRATE_NAME, CRATE_VERSION)`
$DIR/src/tests/routes/crates/versions/yank_unyank.rs:165:19-165:95: `.db_new_scoped_token("test-token", None, None, Some(expired_at.naive_utc()))`
$DIR/src/tests/routes/crates/versions/yank_unyank.rs:165:81-165:93: `.naive_utc()`
$DIR/src/tests/routes/crates/versions/yank_unyank.rs:167:30-167:62: `.yank(CRATE_NAME, CRATE_VERSION)`
$DIR/src/tests/routes/crates/versions/yank_unyank.rs:171:30-171:64: `.unyank(CRATE_NAME, CRATE_VERSION)`
$DIR/src/tests/routes/crates/versions/yank_unyank.rs:182:19-182:95: `.db_new_scoped_token("test-token", None, None, Some(expired_at.naive_utc()))`
$DIR/src/tests/routes/crates/versions/yank_unyank.rs:182:81-182:93: `.naive_utc()`
$DIR/src/tests/routes/crates/versions/yank_unyank.rs:184:30-184:62: `.yank(CRATE_NAME, CRATE_VERSION)`
$DIR/src/tests/routes/crates/versions/yank_unyank.rs:191:30-191:64: `.unyank(CRATE_NAME, CRATE_VERSION)`
$DIR/src/tests/routes/crates/versions/yank_unyank.rs:203:19-203:98: `.db_new_scoped_token("test-token", None, Some(vec![EndpointScope::Yank]), None)`
$DIR/src/tests/routes/crates/versions/yank_unyank.rs:205:30-205:62: `.yank(CRATE_NAME, CRATE_VERSION)`
$DIR/src/tests/routes/crates/versions/yank_unyank.rs:209:30-209:64: `.unyank(CRATE_NAME, CRATE_VERSION)`
$DIR/src/tests/routes/crates/versions/yank_unyank.rs:217:28-222:10: `.db_new_scoped_token(
            "test-token",
            None,
            Some(vec![EndpointScope::PublishUpdate]),
            None,
        )`
$DIR/src/tests/routes/crates/versions/yank_unyank.rs:224:30-224:62: `.yank(CRATE_NAME, CRATE_VERSION)`
$DIR/src/tests/routes/crates/versions/yank_unyank.rs:231:30-231:64: `.unyank(CRATE_NAME, CRATE_VERSION)`
$DIR/src/tests/routes/crates/versions/yank_unyank.rs:242:28-247:10: `.db_new_scoped_token(
            "test-token",
            Some(vec![CrateScope::try_from(CRATE_NAME).unwrap()]),
            None,
            None,
        )`
$DIR/src/tests/routes/crates/versions/yank_unyank.rs:249:30-249:62: `.yank(CRATE_NAME, CRATE_VERSION)`
$DIR/src/tests/routes/crates/versions/yank_unyank.rs:253:30-253:64: `.unyank(CRATE_NAME, CRATE_VERSION)`
$DIR/src/tests/routes/crates/versions/yank_unyank.rs:262:28-267:10: `.db_new_scoped_token(
            "test-token",
            Some(vec![CrateScope::try_from(wildcard).unwrap()]),
            None,
            None,
        )`
$DIR/src/tests/routes/crates/versions/yank_unyank.rs:269:30-269:62: `.yank(CRATE_NAME, CRATE_VERSION)`
$DIR/src/tests/routes/crates/versions/yank_unyank.rs:273:30-273:64: `.unyank(CRATE_NAME, CRATE_VERSION)`
$DIR/src/tests/routes/crates/versions/yank_unyank.rs:281:28-286:10: `.db_new_scoped_token(
            "test-token",
            Some(vec![CrateScope::try_from("foo").unwrap()]),
            None,
            None,
        )`
$DIR/src/tests/routes/crates/versions/yank_unyank.rs:288:30-288:62: `.yank(CRATE_NAME, CRATE_VERSION)`
$DIR/src/tests/routes/crates/versions/yank_unyank.rs:295:30-295:64: `.unyank(CRATE_NAME, CRATE_VERSION)`
$DIR/src/tests/routes/crates/versions/yank_unyank.rs:306:28-311:10: `.db_new_scoped_token(
            "test-token",
            Some(vec![CrateScope::try_from("foo*").unwrap()]),
            None,
            None,
        )`
$DIR/src/tests/routes/crates/versions/yank_unyank.rs:313:30-313:62: `.yank(CRATE_NAME, CRATE_VERSION)`
$DIR/src/tests/routes/crates/versions/yank_unyank.rs:320:30-320:64: `.unyank(CRATE_NAME, CRATE_VERSION)`
$DIR/src/tests/routes/keywords/list.rs:19:38-19:46: `.empty()`
$DIR/src/tests/routes/keywords/list.rs:20:33-20:42: `.get(url)`
$DIR/src/tests/routes/keywords/list.rs:20:42-20:49: `.good()`
$DIR/src/tests/routes/keywords/list.rs:24:5-26:8: `app.db(|conn| {
        Keyword::find_or_create_all(conn, &["foo"]).unwrap();
    });`
$DIR/src/tests/routes/keywords/list.rs:24:8-26:7: `.db(|conn| {
        Keyword::find_or_create_all(conn, &["foo"]).unwrap();
    })`
$DIR/src/tests/routes/keywords/list.rs:25:9-25:62: `Keyword::find_or_create_all(conn, &["foo"]).unwrap();`
$DIR/src/tests/routes/keywords/list.rs:28:33-28:42: `.get(url)`
$DIR/src/tests/routes/keywords/list.rs:28:42-28:49: `.good()`
$DIR/src/tests/routes/keywords/read.rs:14:38-14:46: `.empty()`
$DIR/src/tests/routes/keywords/read.rs:15:5-15:38: `anon.get(url).assert_not_found();`
$DIR/src/tests/routes/keywords/read.rs:15:9-15:18: `.get(url)`
$DIR/src/tests/routes/keywords/read.rs:15:18-15:37: `.assert_not_found()`
$DIR/src/tests/routes/keywords/read.rs:17:5-19:8: `app.db(|conn| {
        Keyword::find_or_create_all(conn, &["foo"]).unwrap();
    });`
$DIR/src/tests/routes/keywords/read.rs:17:8-19:7: `.db(|conn| {
        Keyword::find_or_create_all(conn, &["foo"]).unwrap();
    })`
$DIR/src/tests/routes/keywords/read.rs:18:9-18:62: `Keyword::find_or_create_all(conn, &["foo"]).unwrap();`
$DIR/src/tests/routes/keywords/read.rs:20:33-20:42: `.get(url)`
$DIR/src/tests/routes/keywords/read.rs:20:42-20:49: `.good()`
$DIR/src/tests/routes/keywords/read.rs:27:38-27:46: `.empty()`
$DIR/src/tests/routes/keywords/read.rs:28:5-28:38: `anon.get(url).assert_not_found();`
$DIR/src/tests/routes/keywords/read.rs:28:9-28:18: `.get(url)`
$DIR/src/tests/routes/keywords/read.rs:28:18-28:37: `.assert_not_found()`
$DIR/src/tests/routes/keywords/read.rs:30:5-32:8: `app.db(|conn| {
        Keyword::find_or_create_all(conn, &["UPPER"]).unwrap();
    });`
$DIR/src/tests/routes/keywords/read.rs:30:8-32:7: `.db(|conn| {
        Keyword::find_or_create_all(conn, &["UPPER"]).unwrap();
    })`
$DIR/src/tests/routes/keywords/read.rs:31:9-31:64: `Keyword::find_or_create_all(conn, &["UPPER"]).unwrap();`
$DIR/src/tests/routes/keywords/read.rs:33:33-33:42: `.get(url)`
$DIR/src/tests/routes/keywords/read.rs:33:42-33:49: `.good()`
$DIR/src/tests/routes/keywords/read.rs:39:44-39:56: `.with_user()`
$DIR/src/tests/routes/keywords/read.rs:40:20-40:31: `.as_model()`
$DIR/src/tests/routes/keywords/read.rs:43:37-43:76: `.get(&format!("/api/v1/keywords/{kw}"))`
$DIR/src/tests/routes/keywords/read.rs:43:76-43:83: `.good()`
$DIR/src/tests/routes/keywords/read.rs:44:9-44:41: `json.keyword.crates_cnt as usize`
$DIR/src/tests/routes/keywords/read.rs:47:20-50:7: `.db(|conn| {
        Keyword::find_or_create_all(conn, &["kw1", "kw2"]).unwrap();
        CrateBuilder::new("fookey", user.id).expect_build(conn)
    })`
$DIR/src/tests/routes/keywords/read.rs:48:9-48:69: `Keyword::find_or_create_all(conn, &["kw1", "kw2"]).unwrap();`
$DIR/src/tests/routes/keywords/read.rs:49:9-49:64: `CrateBuilder::new("fookey", user.id).expect_build(conn)`
$DIR/src/tests/routes/keywords/read.rs:49:45-49:64: `.expect_build(conn)`
$DIR/src/tests/routes/keywords/read.rs:52:5-54:8: `app.db(|conn| {
        Keyword::update_crate(conn, &krate, &[]).unwrap();
    });`
$DIR/src/tests/routes/keywords/read.rs:52:8-54:7: `.db(|conn| {
        Keyword::update_crate(conn, &krate, &[]).unwrap();
    })`
$DIR/src/tests/routes/keywords/read.rs:53:9-53:59: `Keyword::update_crate(conn, &krate, &[]).unwrap();`
$DIR/src/tests/routes/keywords/read.rs:58:5-60:8: `app.db(|conn| {
        Keyword::update_crate(conn, &krate, &["kw1"]).unwrap();
    });`
$DIR/src/tests/routes/keywords/read.rs:58:8-60:7: `.db(|conn| {
        Keyword::update_crate(conn, &krate, &["kw1"]).unwrap();
    })`
$DIR/src/tests/routes/keywords/read.rs:59:9-59:64: `Keyword::update_crate(conn, &krate, &["kw1"]).unwrap();`
$DIR/src/tests/routes/keywords/read.rs:64:5-66:8: `app.db(|conn| {
        Keyword::update_crate(conn, &krate, &["kw2"]).unwrap();
    });`
$DIR/src/tests/routes/keywords/read.rs:64:8-66:7: `.db(|conn| {
        Keyword::update_crate(conn, &krate, &["kw2"]).unwrap();
    })`
$DIR/src/tests/routes/keywords/read.rs:65:9-65:64: `Keyword::update_crate(conn, &krate, &["kw2"]).unwrap();`
$DIR/src/tests/routes/keywords/read.rs:70:5-72:8: `app.db(|conn| {
        Keyword::update_crate(conn, &krate, &[]).unwrap();
    });`
$DIR/src/tests/routes/keywords/read.rs:70:8-72:7: `.db(|conn| {
        Keyword::update_crate(conn, &krate, &[]).unwrap();
    })`
$DIR/src/tests/routes/keywords/read.rs:71:9-71:59: `Keyword::update_crate(conn, &krate, &[]).unwrap();`
$DIR/src/tests/routes/keywords/read.rs:76:5-78:8: `app.db(|conn| {
        Keyword::update_crate(conn, &krate, &["kw1", "kw2"]).unwrap();
    });`
$DIR/src/tests/routes/keywords/read.rs:76:8-78:7: `.db(|conn| {
        Keyword::update_crate(conn, &krate, &["kw1", "kw2"]).unwrap();
    })`
$DIR/src/tests/routes/keywords/read.rs:77:9-77:71: `Keyword::update_crate(conn, &krate, &["kw1", "kw2"]).unwrap();`
$DIR/src/tests/routes/keywords/read.rs:82:5-84:8: `app.db(|conn| {
        Keyword::update_crate(conn, &krate, &[]).unwrap();
    });`
$DIR/src/tests/routes/keywords/read.rs:82:8-84:7: `.db(|conn| {
        Keyword::update_crate(conn, &krate, &[]).unwrap();
    })`
$DIR/src/tests/routes/keywords/read.rs:83:9-83:59: `Keyword::update_crate(conn, &krate, &[]).unwrap();`
$DIR/src/tests/routes/me/email_notifications.rs:24:41-24:53: `.with_user()`
$DIR/src/tests/routes/me/email_notifications.rs:26:24-31:7: `.db(|conn| {
        vec![
            CrateBuilder::new("test_package", user.as_model().id).expect_build(conn),
            CrateBuilder::new("another_package", user.as_model().id).expect_build(conn),
        ]
    })`
$DIR/src/tests/routes/me/email_notifications.rs:27:9-30:10: `vec![
            CrateBuilder::new("test_package", user.as_model().id).expect_build(conn),
            CrateBuilder::new("another_package", user.as_model().id).expect_build(conn),
        ]`
$DIR/src/tests/routes/me/email_notifications.rs:33:25-33:32: `.get(0)`
$DIR/src/tests/routes/me/email_notifications.rs:34:25-34:32: `.get(1)`
$DIR/src/tests/routes/me/email_notifications.rs:38:5-41:9: `user.update_email_notifications(vec![EmailNotificationsUpdate {
        id: a_id,
        email_notifications: false,
    }]);`
$DIR/src/tests/routes/me/email_notifications.rs:38:9-41:8: `.update_email_notifications(vec![EmailNotificationsUpdate {
        id: a_id,
        email_notifications: false,
    }])`
$DIR/src/tests/routes/me/email_notifications.rs:42:20-42:30: `.show_me()`
$DIR/src/tests/routes/me/email_notifications.rs:62:5-65:9: `user.update_email_notifications(vec![EmailNotificationsUpdate {
        id: b_id,
        email_notifications: false,
    }]);`
$DIR/src/tests/routes/me/email_notifications.rs:62:9-65:8: `.update_email_notifications(vec![EmailNotificationsUpdate {
        id: b_id,
        email_notifications: false,
    }])`
$DIR/src/tests/routes/me/email_notifications.rs:66:20-66:30: `.show_me()`
$DIR/src/tests/routes/me/email_notifications.rs:87:5-96:8: `user.update_email_notifications(vec![
        EmailNotificationsUpdate {
            id: a_id,
            email_notifications: true,
        },
        EmailNotificationsUpdate {
            id: b_id,
            email_notifications: true,
        },
    ]);`
$DIR/src/tests/routes/me/email_notifications.rs:87:9-96:7: `.update_email_notifications(vec![
        EmailNotificationsUpdate {
            id: a_id,
            email_notifications: true,
        },
        EmailNotificationsUpdate {
            id: b_id,
            email_notifications: true,
        },
    ])`
$DIR/src/tests/routes/me/email_notifications.rs:97:20-97:30: `.show_me()`
$DIR/src/tests/routes/me/email_notifications.rs:108:41-108:53: `.with_user()`
$DIR/src/tests/routes/me/email_notifications.rs:110:27-115:7: `.db(|conn| {
        let u = new_user("arbitrary_username")
            .create_or_update(None, &app.as_inner().emails, conn)
            .unwrap();
        CrateBuilder::new("test_package", u.id).expect_build(conn)
    })`
$DIR/src/tests/routes/me/email_notifications.rs:112:13-112:66: `.create_or_update(None, &app.as_inner().emails, conn)`
$DIR/src/tests/routes/me/email_notifications.rs:112:41-112:52: `.as_inner()`
$DIR/src/tests/routes/me/email_notifications.rs:114:9-114:67: `CrateBuilder::new("test_package", u.id).expect_build(conn)`
$DIR/src/tests/routes/me/email_notifications.rs:114:48-114:67: `.expect_build(conn)`
$DIR/src/tests/routes/me/email_notifications.rs:117:5-120:9: `user.update_email_notifications(vec![EmailNotificationsUpdate {
        id: not_my_crate.id,
        email_notifications: false,
    }]);`
$DIR/src/tests/routes/me/email_notifications.rs:117:9-120:8: `.update_email_notifications(vec![EmailNotificationsUpdate {
        id: not_my_crate.id,
        email_notifications: false,
    }])`
$DIR/src/tests/routes/me/email_notifications.rs:123:9-128:11: `.db(|conn| {
            crate_owners::table
                .select(crate_owners::email_notifications)
                .filter(crate_owners::crate_id.eq(not_my_crate.id))
                .first(conn)
        })`
$DIR/src/tests/routes/me/email_notifications.rs:124:13-127:29: `crate_owners::table
                .select(crate_owners::email_notifications)
                .filter(crate_owners::crate_id.eq(not_my_crate.id))
                .first(conn)`
$DIR/src/tests/routes/me/email_notifications.rs:125:17-125:59: `.select(crate_owners::email_notifications)`
$DIR/src/tests/routes/me/email_notifications.rs:126:17-126:68: `.filter(crate_owners::crate_id.eq(not_my_crate.id))`
$DIR/src/tests/routes/me/email_notifications.rs:126:47-126:67: `.eq(not_my_crate.id)`
$DIR/src/tests/routes/me/email_notifications.rs:127:17-127:29: `.first(conn)`
$DIR/src/tests/routes/me/get.rs:21:38-21:46: `.empty()`
$DIR/src/tests/routes/me/get.rs:22:5-22:38: `anon.get(url).assert_forbidden();`
$DIR/src/tests/routes/me/get.rs:22:9-22:18: `.get(url)`
$DIR/src/tests/routes/me/get.rs:22:18-22:37: `.assert_forbidden()`
$DIR/src/tests/routes/me/get.rs:24:19-24:38: `.db_new_user("foo")`
$DIR/src/tests/routes/me/get.rs:25:20-25:30: `.show_me()`
$DIR/src/tests/routes/me/get.rs:29:5-32:8: `app.db(|conn| {
        CrateBuilder::new("foo_my_packages", user.as_model().id).expect_build(conn);
        assert_eq!(json.user.email, user.as_model().email(conn).unwrap());
    });`
$DIR/src/tests/routes/me/get.rs:29:8-32:7: `.db(|conn| {
        CrateBuilder::new("foo_my_packages", user.as_model().id).expect_build(conn);
        assert_eq!(json.user.email, user.as_model().email(conn).unwrap());
    })`
$DIR/src/tests/routes/me/get.rs:30:9-30:85: `CrateBuilder::new("foo_my_packages", user.as_model().id).expect_build(conn);`
$DIR/src/tests/routes/me/get.rs:30:50-30:61: `.as_model()`
$DIR/src/tests/routes/me/get.rs:30:65-30:84: `.expect_build(conn)`
$DIR/src/tests/routes/me/get.rs:33:28-33:38: `.show_me()`
$DIR/src/tests/routes/me/get.rs:40:41-40:53: `.with_user()`
$DIR/src/tests/routes/me/get.rs:41:26-41:37: `.as_model()`
$DIR/src/tests/routes/me/get.rs:43:5-46:8: `app.db(|conn| {
        let krate = CrateBuilder::new("foo_my_packages", user_model.id).expect_build(conn);
        krate.owner_remove(conn, &user_model.gh_login).unwrap();
    });`
$DIR/src/tests/routes/me/get.rs:43:8-46:7: `.db(|conn| {
        let krate = CrateBuilder::new("foo_my_packages", user_model.id).expect_build(conn);
        krate.owner_remove(conn, &user_model.gh_login).unwrap();
    })`
$DIR/src/tests/routes/me/get.rs:44:72-44:91: `.expect_build(conn)`
$DIR/src/tests/routes/me/get.rs:45:9-45:65: `krate.owner_remove(conn, &user_model.gh_login).unwrap();`
$DIR/src/tests/routes/me/get.rs:45:14-45:55: `.owner_remove(conn, &user_model.gh_login)`
$DIR/src/tests/routes/me/get.rs:48:20-48:30: `.show_me()`
$DIR/src/tests/routes/me/tokens/create.rs:13:36-13:44: `.empty()`
$DIR/src/tests/routes/me/tokens/create.rs:14:9-14:43: `.put("/api/v1/me/tokens", NEW_BAR)`
$DIR/src/tests/routes/me/tokens/create.rs:19:39-19:51: `.with_user()`
$DIR/src/tests/routes/me/tokens/create.rs:21:24-21:64: `.put::<()>("/api/v1/me/tokens", invalid)`
$DIR/src/tests/routes/me/tokens/create.rs:31:39-31:51: `.with_user()`
$DIR/src/tests/routes/me/tokens/create.rs:33:24-33:67: `.put::<()>("/api/v1/me/tokens", empty_name)`
$DIR/src/tests/routes/me/tokens/create.rs:43:41-43:53: `.with_user()`
$DIR/src/tests/routes/me/tokens/create.rs:44:18-44:29: `.as_model()`
$DIR/src/tests/routes/me/tokens/create.rs:45:5-49:8: `app.db(|conn| {
        for i in 0..1000 {
            assert_ok!(ApiToken::insert(conn, id, &format!("token {i}")));
        }
    });`
$DIR/src/tests/routes/me/tokens/create.rs:45:8-49:7: `.db(|conn| {
        for i in 0..1000 {
            assert_ok!(ApiToken::insert(conn, id, &format!("token {i}")));
        }
    })`
$DIR/src/tests/routes/me/tokens/create.rs:47:13-47:75: `assert_ok!(ApiToken::insert(conn, id, &format!("token {i}")));`
$DIR/src/tests/routes/me/tokens/create.rs:50:24-50:64: `.put::<()>("/api/v1/me/tokens", NEW_BAR)`
$DIR/src/tests/routes/me/tokens/create.rs:60:41-60:53: `.with_user()`
$DIR/src/tests/routes/me/tokens/create.rs:62:24-62:64: `.put::<()>("/api/v1/me/tokens", NEW_BAR)`
$DIR/src/tests/routes/me/tokens/create.rs:64:5-69:8: `assert_json_snapshot!(response.into_json(), {
        ".api_token.id" => insta::any_id_redaction(),
        ".api_token.created_at" => "[datetime]",
        ".api_token.last_used_at" => "[datetime]",
        ".api_token.token" => insta::api_token_redaction(),
    });`
$DIR/src/tests/routes/me/tokens/create.rs:71:36-75:7: `.db(|conn| {
        assert_ok!(ApiToken::belonging_to(user.as_model())
            .select(ApiToken::as_select())
            .load(conn))
    })`
$DIR/src/tests/routes/me/tokens/create.rs:72:9-74:25: `assert_ok!(ApiToken::belonging_to(user.as_model())
            .select(ApiToken::as_select())
            .load(conn))`
$DIR/src/tests/routes/me/tokens/create.rs:86:39-86:51: `.with_user()`
$DIR/src/tests/routes/me/tokens/create.rs:87:28-87:62: `.put("/api/v1/me/tokens", NEW_BAR)`
$DIR/src/tests/routes/me/tokens/create.rs:87:62-87:69: `.good()`
$DIR/src/tests/routes/me/tokens/create.rs:88:29-88:63: `.put("/api/v1/me/tokens", NEW_BAR)`
$DIR/src/tests/routes/me/tokens/create.rs:88:63-88:70: `.good()`
$DIR/src/tests/routes/me/tokens/create.rs:96:42-96:54: `.with_user()`
$DIR/src/tests/routes/me/tokens/create.rs:97:29-97:63: `.put("/api/v1/me/tokens", NEW_BAR)`
$DIR/src/tests/routes/me/tokens/create.rs:97:63-97:70: `.good()`
$DIR/src/tests/routes/me/tokens/create.rs:99:20-99:39: `.db_new_user("bar")`
$DIR/src/tests/routes/me/tokens/create.rs:100:30-100:64: `.put("/api/v1/me/tokens", NEW_BAR)`
$DIR/src/tests/routes/me/tokens/create.rs:100:64-100:71: `.good()`
$DIR/src/tests/routes/me/tokens/create.rs:107:43-107:56: `.with_token()`
$DIR/src/tests/routes/me/tokens/create.rs:108:25-111:6: `.put::<()>(
        "/api/v1/me/tokens",
        br#"{ "api_token": { "name": "baz" } }"# as &[u8],
    )`
$DIR/src/tests/routes/me/tokens/create.rs:121:41-121:53: `.with_user()`
$DIR/src/tests/routes/me/tokens/create.rs:131:24-131:91: `.put::<()>("/api/v1/me/tokens", serde_json::to_vec(&json).unwrap())`
$DIR/src/tests/routes/me/tokens/create.rs:133:5-138:8: `assert_json_snapshot!(response.into_json(), {
        ".api_token.id" => insta::any_id_redaction(),
        ".api_token.created_at" => "[datetime]",
        ".api_token.last_used_at" => "[datetime]",
        ".api_token.token" => insta::api_token_redaction(),
    });`
$DIR/src/tests/routes/me/tokens/create.rs:140:36-144:7: `.db(|conn| {
        assert_ok!(ApiToken::belonging_to(user.as_model())
            .select(ApiToken::as_select())
            .load(conn))
    })`
$DIR/src/tests/routes/me/tokens/create.rs:141:9-143:25: `assert_ok!(ApiToken::belonging_to(user.as_model())
            .select(ApiToken::as_select())
            .load(conn))`
$DIR/src/tests/routes/me/tokens/create.rs:164:41-164:53: `.with_user()`
$DIR/src/tests/routes/me/tokens/create.rs:174:24-174:91: `.put::<()>("/api/v1/me/tokens", serde_json::to_vec(&json).unwrap())`
$DIR/src/tests/routes/me/tokens/create.rs:176:5-181:8: `assert_json_snapshot!(response.into_json(), {
        ".api_token.id" => insta::any_id_redaction(),
        ".api_token.created_at" => "[datetime]",
        ".api_token.last_used_at" => "[datetime]",
        ".api_token.token" => insta::api_token_redaction(),
    });`
$DIR/src/tests/routes/me/tokens/create.rs:183:36-187:7: `.db(|conn| {
        assert_ok!(ApiToken::belonging_to(user.as_model())
            .select(ApiToken::as_select())
            .load(conn))
    })`
$DIR/src/tests/routes/me/tokens/create.rs:184:9-186:25: `assert_ok!(ApiToken::belonging_to(user.as_model())
            .select(ApiToken::as_select())
            .load(conn))`
$DIR/src/tests/routes/me/tokens/create.rs:198:39-198:51: `.with_user()`
$DIR/src/tests/routes/me/tokens/create.rs:208:24-208:91: `.put::<()>("/api/v1/me/tokens", serde_json::to_vec(&json).unwrap())`
$DIR/src/tests/routes/me/tokens/create.rs:218:39-218:51: `.with_user()`
$DIR/src/tests/routes/me/tokens/create.rs:228:24-228:91: `.put::<()>("/api/v1/me/tokens", serde_json::to_vec(&json).unwrap())`
$DIR/src/tests/routes/me/tokens/create.rs:238:42-238:54: `.with_user()`
$DIR/src/tests/routes/me/tokens/create.rs:249:24-249:91: `.put::<()>("/api/v1/me/tokens", serde_json::to_vec(&json).unwrap())`
$DIR/src/tests/routes/me/tokens/delete.rs:11:39-11:51: `.with_user()`
$DIR/src/tests/routes/me/tokens/delete.rs:12:38-12:68: `.delete("/api/v1/me/tokens/5")`
$DIR/src/tests/routes/me/tokens/delete.rs:12:68-12:75: `.good()`
$DIR/src/tests/routes/me/tokens/delete.rs:17:49-17:62: `.with_token()`
$DIR/src/tests/routes/me/tokens/delete.rs:18:22-18:33: `.as_model()`
$DIR/src/tests/routes/me/tokens/delete.rs:19:22-19:33: `.as_model()`
$DIR/src/tests/routes/me/tokens/delete.rs:20:20-20:39: `.db_new_user("baz")`
$DIR/src/tests/routes/me/tokens/delete.rs:33:9-33:60: `.delete(&format!("/api/v1/me/tokens/{}", token.id))`
$DIR/src/tests/routes/me/tokens/delete.rs:34:9-34:16: `.good()`
$DIR/src/tests/routes/me/tokens/delete.rs:48:48-48:61: `.with_token()`
$DIR/src/tests/routes/me/tokens/delete.rs:51:5-57:8: `app.db(|conn| {
        let tokens: Vec<ApiToken> = assert_ok!(ApiToken::belonging_to(user.as_model())
            .select(ApiToken::as_select())
            .load(conn));
        assert_eq!(tokens.len(), 1);
        assert_eq!(tokens[0].name, token.as_model().name);
    });`
$DIR/src/tests/routes/me/tokens/delete.rs:51:8-57:7: `.db(|conn| {
        let tokens: Vec<ApiToken> = assert_ok!(ApiToken::belonging_to(user.as_model())
            .select(ApiToken::as_select())
            .load(conn));
        assert_eq!(tokens.len(), 1);
        assert_eq!(tokens[0].name, token.as_model().name);
    })`
$DIR/src/tests/routes/me/tokens/delete.rs:61:9-61:71: `.delete(&format!("/api/v1/me/tokens/{}", token.as_model().id))`
$DIR/src/tests/routes/me/tokens/delete.rs:62:9-62:16: `.good()`
$DIR/src/tests/routes/me/tokens/delete.rs:66:48-66:59: `.as_model()`
$DIR/src/tests/routes/me/tokens/delete.rs:67:13-67:51: `.filter(api_tokens::revoked.eq(false))`
$DIR/src/tests/routes/me/tokens/delete.rs:67:40-67:50: `.eq(false)`
$DIR/src/tests/routes/me/tokens/delete.rs:68:13-68:21: `.count()`
$DIR/src/tests/routes/me/tokens/delete.rs:69:13-69:30: `.get_result(conn)`
$DIR/src/tests/routes/me/tokens/delete_current.rs:9:48-9:61: `.with_token()`
$DIR/src/tests/routes/me/tokens/delete_current.rs:12:5-19:8: `app.db(|conn| {
        let tokens: Vec<ApiToken> = assert_ok!(ApiToken::belonging_to(user.as_model())
            .select(ApiToken::as_select())
            .filter(api_tokens::revoked.eq(false))
            .load(conn));
        assert_eq!(tokens.len(), 1);
        assert_eq!(tokens[0].name, token.as_model().name);
    });`
$DIR/src/tests/routes/me/tokens/delete_current.rs:12:8-19:7: `.db(|conn| {
        let tokens: Vec<ApiToken> = assert_ok!(ApiToken::belonging_to(user.as_model())
            .select(ApiToken::as_select())
            .filter(api_tokens::revoked.eq(false))
            .load(conn));
        assert_eq!(tokens.len(), 1);
        assert_eq!(tokens[0].name, token.as_model().name);
    })`
$DIR/src/tests/routes/me/tokens/delete_current.rs:22:25-22:64: `.delete::<()>("/api/v1/tokens/current")`
$DIR/src/tests/routes/me/tokens/delete_current.rs:37:36-37:44: `.empty()`
$DIR/src/tests/routes/me/tokens/delete_current.rs:39:24-39:63: `.delete::<()>("/api/v1/tokens/current")`
$DIR/src/tests/routes/me/tokens/delete_current.rs:49:48-49:61: `.with_token()`
$DIR/src/tests/routes/me/tokens/delete_current.rs:52:5-59:8: `app.db(|conn| {
        let tokens: Vec<ApiToken> = assert_ok!(ApiToken::belonging_to(user.as_model())
            .select(ApiToken::as_select())
            .filter(api_tokens::revoked.eq(false))
            .load(conn));
        assert_eq!(tokens.len(), 1);
        assert_eq!(tokens[0].name, token.as_model().name);
    });`
$DIR/src/tests/routes/me/tokens/delete_current.rs:52:8-59:7: `.db(|conn| {
        let tokens: Vec<ApiToken> = assert_ok!(ApiToken::belonging_to(user.as_model())
            .select(ApiToken::as_select())
            .filter(api_tokens::revoked.eq(false))
            .load(conn));
        assert_eq!(tokens.len(), 1);
        assert_eq!(tokens[0].name, token.as_model().name);
    })`
$DIR/src/tests/routes/me/tokens/delete_current.rs:62:24-62:63: `.delete::<()>("/api/v1/tokens/current")`
$DIR/src/tests/routes/me/tokens/list.rs:10:36-10:44: `.empty()`
$DIR/src/tests/routes/me/tokens/list.rs:11:9-11:34: `.get("/api/v1/me/tokens")`
$DIR/src/tests/routes/me/tokens/list.rs:16:43-16:56: `.with_token()`
$DIR/src/tests/routes/me/tokens/list.rs:17:10-17:35: `.get("/api/v1/me/tokens")`
$DIR/src/tests/routes/me/tokens/list.rs:22:39-22:51: `.with_user()`
$DIR/src/tests/routes/me/tokens/list.rs:23:24-23:55: `.get::<()>("/api/v1/me/tokens")`
$DIR/src/tests/routes/me/tokens/list.rs:25:24-25:36: `.into_json()`
$DIR/src/tests/routes/me/tokens/list.rs:26:45-26:56: `.as_array()`
$DIR/src/tests/routes/me/tokens/list.rs:32:41-32:53: `.with_user()`
$DIR/src/tests/routes/me/tokens/list.rs:33:18-33:29: `.as_model()`
$DIR/src/tests/routes/me/tokens/list.rs:34:5-57:8: `app.db(|conn| {
        vec![
            assert_ok!(ApiToken::insert(conn, id, "bar")),
            assert_ok!(ApiToken::insert_with_scopes(
                conn,
                id,
                "baz",
                Some(vec![
                    CrateScope::try_from("serde").unwrap(),
                    CrateScope::try_from("serde-*").unwrap()
                ]),
                Some(vec![EndpointScope::PublishUpdate]),
                None
            )),
            assert_ok!(ApiToken::insert_with_scopes(
                conn,
                id,
                "qux",
                None,
                None,
                Some((Utc::now() - Duration::days(1)).naive_utc()),
            )),
        ]
    });`
$DIR/src/tests/routes/me/tokens/list.rs:34:8-57:7: `.db(|conn| {
        vec![
            assert_ok!(ApiToken::insert(conn, id, "bar")),
            assert_ok!(ApiToken::insert_with_scopes(
                conn,
                id,
                "baz",
                Some(vec![
                    CrateScope::try_from("serde").unwrap(),
                    CrateScope::try_from("serde-*").unwrap()
                ]),
                Some(vec![EndpointScope::PublishUpdate]),
                None
            )),
            assert_ok!(ApiToken::insert_with_scopes(
                conn,
                id,
                "qux",
                None,
                None,
                Some((Utc::now() - Duration::days(1)).naive_utc()),
            )),
        ]
    })`
$DIR/src/tests/routes/me/tokens/list.rs:35:9-56:10: `vec![
            assert_ok!(ApiToken::insert(conn, id, "bar")),
            assert_ok!(ApiToken::insert_with_scopes(
                conn,
                id,
                "baz",
                Some(vec![
                    CrateScope::try_from("serde").unwrap(),
                    CrateScope::try_from("serde-*").unwrap()
                ]),
                Some(vec![EndpointScope::PublishUpdate]),
                None
            )),
            assert_ok!(ApiToken::insert_with_scopes(
                conn,
                id,
                "qux",
                None,
                None,
                Some((Utc::now() - Duration::days(1)).naive_utc()),
            )),
        ]`
$DIR/src/tests/routes/me/tokens/list.rs:59:24-59:55: `.get::<()>("/api/v1/me/tokens")`
$DIR/src/tests/routes/me/tokens/list.rs:75:41-75:53: `.with_user()`
$DIR/src/tests/routes/me/tokens/list.rs:76:18-76:29: `.as_model()`
$DIR/src/tests/routes/me/tokens/list.rs:77:5-100:8: `app.db(|conn| {
        vec![
            assert_ok!(ApiToken::insert(conn, id, "bar")),
            assert_ok!(ApiToken::insert_with_scopes(
                conn,
                id,
                "ancient",
                Some(vec![
                    CrateScope::try_from("serde").unwrap(),
                    CrateScope::try_from("serde-*").unwrap()
                ]),
                Some(vec![EndpointScope::PublishUpdate]),
                Some((Utc::now() - Duration::days(31)).naive_utc()),
            )),
            assert_ok!(ApiToken::insert_with_scopes(
                conn,
                id,
                "recent",
                None,
                None,
                Some((Utc::now() - Duration::days(1)).naive_utc()),
            )),
        ]
    });`
$DIR/src/tests/routes/me/tokens/list.rs:77:8-100:7: `.db(|conn| {
        vec![
            assert_ok!(ApiToken::insert(conn, id, "bar")),
            assert_ok!(ApiToken::insert_with_scopes(
                conn,
                id,
                "ancient",
                Some(vec![
                    CrateScope::try_from("serde").unwrap(),
                    CrateScope::try_from("serde-*").unwrap()
                ]),
                Some(vec![EndpointScope::PublishUpdate]),
                Some((Utc::now() - Duration::days(31)).naive_utc()),
            )),
            assert_ok!(ApiToken::insert_with_scopes(
                conn,
                id,
                "recent",
                None,
                None,
                Some((Utc::now() - Duration::days(1)).naive_utc()),
            )),
        ]
    })`
$DIR/src/tests/routes/me/tokens/list.rs:78:9-99:10: `vec![
            assert_ok!(ApiToken::insert(conn, id, "bar")),
            assert_ok!(ApiToken::insert_with_scopes(
                conn,
                id,
                "ancient",
                Some(vec![
                    CrateScope::try_from("serde").unwrap(),
                    CrateScope::try_from("serde-*").unwrap()
                ]),
                Some(vec![EndpointScope::PublishUpdate]),
                Some((Utc::now() - Duration::days(31)).naive_utc()),
            )),
            assert_ok!(ApiToken::insert_with_scopes(
                conn,
                id,
                "recent",
                None,
                None,
                Some((Utc::now() - Duration::days(1)).naive_utc()),
            )),
        ]`
$DIR/src/tests/routes/me/tokens/list.rs:102:24-102:71: `.get::<()>("/api/v1/me/tokens?expired_days=30")`
$DIR/src/tests/routes/me/tokens/list.rs:104:24-104:36: `.into_json()`
$DIR/src/tests/routes/me/tokens/list.rs:105:45-105:56: `.as_array()`
$DIR/src/tests/routes/me/tokens/list.rs:107:5-107:65: `assert_response_tokens_contain_name(response_tokens, "bar");`
$DIR/src/tests/routes/me/tokens/list.rs:110:24-110:71: `.get::<()>("/api/v1/me/tokens?expired_days=60")`
$DIR/src/tests/routes/me/tokens/list.rs:112:24-112:36: `.into_json()`
$DIR/src/tests/routes/me/tokens/list.rs:113:45-113:56: `.as_array()`
$DIR/src/tests/routes/me/tokens/list.rs:115:5-115:65: `assert_response_tokens_contain_name(response_tokens, "bar");`
$DIR/src/tests/routes/me/tokens/list.rs:116:5-116:69: `assert_response_tokens_contain_name(response_tokens, "ancient");`
$DIR/src/tests/routes/me/tokens/list.rs:122:41-122:53: `.with_user()`
$DIR/src/tests/routes/me/tokens/list.rs:123:18-123:29: `.as_model()`
$DIR/src/tests/routes/me/tokens/list.rs:124:21-129:7: `.db(|conn| {
        vec![
            assert_ok!(ApiToken::insert(conn, id, "bar")),
            assert_ok!(ApiToken::insert(conn, id, "baz")),
        ]
    })`
$DIR/src/tests/routes/me/tokens/list.rs:125:9-128:10: `vec![
            assert_ok!(ApiToken::insert(conn, id, "bar")),
            assert_ok!(ApiToken::insert(conn, id, "baz")),
        ]`
$DIR/src/tests/routes/me/tokens/list.rs:132:24-132:55: `.get::<()>("/api/v1/me/tokens")`
$DIR/src/tests/routes/me/tokens/list.rs:134:24-134:36: `.into_json()`
$DIR/src/tests/routes/me/tokens/list.rs:135:45-135:56: `.as_array()`
$DIR/src/tests/routes/me/tokens/list.rs:139:24-139:91: `.delete::<()>(&format!("/api/v1/me/tokens/{}", tokens[0].model.id))`
$DIR/src/tests/routes/me/tokens/list.rs:143:24-143:55: `.get::<()>("/api/v1/me/tokens")`
$DIR/src/tests/routes/me/tokens/list.rs:145:24-145:36: `.into_json()`
$DIR/src/tests/routes/me/tokens/list.rs:146:45-146:56: `.as_array()`
$DIR/src/tests/routes/me/updates.rs:12:43-12:56: `.with_token()`
$DIR/src/tests/routes/me/updates.rs:13:10-13:36: `.get("/api/v1/me/updates")`
$DIR/src/tests/routes/me/updates.rs:28:41-28:53: `.with_user()`
$DIR/src/tests/routes/me/updates.rs:29:26-29:37: `.as_model()`
$DIR/src/tests/routes/me/updates.rs:31:5-47:8: `app.db(|conn| {
        CrateBuilder::new("foo_fighters", user_id)
            .version(VersionBuilder::new("1.0.0"))
            .expect_build(conn);

        // Make foo_fighters's version mimic a version published before we started recording who
        // published versions
        let none: Option<i32> = None;
        update(versions::table)
            .set(versions::published_by.eq(none))
            .execute(conn)
            .unwrap();

        CrateBuilder::new("bar_fighters", user_id)
            .version(VersionBuilder::new("1.0.0"))
            .expect_build(conn);
    });`
$DIR/src/tests/routes/me/updates.rs:31:8-47:7: `.db(|conn| {
        CrateBuilder::new("foo_fighters", user_id)
            .version(VersionBuilder::new("1.0.0"))
            .expect_build(conn);

        // Make foo_fighters's version mimic a version published before we started recording who
        // published versions
        let none: Option<i32> = None;
        update(versions::table)
            .set(versions::published_by.eq(none))
            .execute(conn)
            .unwrap();

        CrateBuilder::new("bar_fighters", user_id)
            .version(VersionBuilder::new("1.0.0"))
            .expect_build(conn);
    })`
$DIR/src/tests/routes/me/updates.rs:32:9-34:33: `CrateBuilder::new("foo_fighters", user_id)
            .version(VersionBuilder::new("1.0.0"))
            .expect_build(conn);`
$DIR/src/tests/routes/me/updates.rs:33:13-33:51: `.version(VersionBuilder::new("1.0.0"))`
$DIR/src/tests/routes/me/updates.rs:34:13-34:32: `.expect_build(conn)`
$DIR/src/tests/routes/me/updates.rs:39:9-42:23: `update(versions::table)
            .set(versions::published_by.eq(none))
            .execute(conn)
            .unwrap();`
$DIR/src/tests/routes/me/updates.rs:40:13-40:50: `.set(versions::published_by.eq(none))`
$DIR/src/tests/routes/me/updates.rs:40:40-40:49: `.eq(none)`
$DIR/src/tests/routes/me/updates.rs:41:13-41:27: `.execute(conn)`
$DIR/src/tests/routes/me/updates.rs:44:9-46:33: `CrateBuilder::new("bar_fighters", user_id)
            .version(VersionBuilder::new("1.0.0"))
            .expect_build(conn);`
$DIR/src/tests/routes/me/updates.rs:45:13-45:51: `.version(VersionBuilder::new("1.0.0"))`
$DIR/src/tests/routes/me/updates.rs:46:13-46:32: `.expect_build(conn)`
$DIR/src/tests/routes/me/updates.rs:49:20-49:46: `.get("/api/v1/me/updates")`
$DIR/src/tests/routes/me/updates.rs:49:46-49:53: `.good()`
$DIR/src/tests/routes/me/updates.rs:53:5-54:17: `user.put::<OkBool>("/api/v1/crates/foo_fighters/follow", b"" as &[u8])
        .good();`
$DIR/src/tests/routes/me/updates.rs:53:9-53:75: `.put::<OkBool>("/api/v1/crates/foo_fighters/follow", b"" as &[u8])`
$DIR/src/tests/routes/me/updates.rs:54:9-54:16: `.good()`
$DIR/src/tests/routes/me/updates.rs:55:5-56:17: `user.put::<OkBool>("/api/v1/crates/bar_fighters/follow", b"" as &[u8])
        .good();`
$DIR/src/tests/routes/me/updates.rs:55:9-55:75: `.put::<OkBool>("/api/v1/crates/bar_fighters/follow", b"" as &[u8])`
$DIR/src/tests/routes/me/updates.rs:56:9-56:16: `.good()`
$DIR/src/tests/routes/me/updates.rs:58:20-58:46: `.get("/api/v1/me/updates")`
$DIR/src/tests/routes/me/updates.rs:58:46-58:53: `.good()`
$DIR/src/tests/routes/me/updates.rs:64:9-64:45: `.find(|v| v.krate == "foo_fighters")`
$DIR/src/tests/routes/me/updates.rs:66:5-66:45: `assert_none!(&foo_version.published_by);`
$DIR/src/tests/routes/me/updates.rs:70:9-70:45: `.find(|v| v.krate == "bar_fighters")`
$DIR/src/tests/routes/me/updates.rs:78:9-78:60: `.get_with_query("/api/v1/me/updates", "per_page=1")`
$DIR/src/tests/routes/me/updates.rs:79:9-79:16: `.good()`
$DIR/src/tests/routes/me/updates.rs:83:5-84:17: `user.delete::<OkBool>("/api/v1/crates/bar_fighters/follow")
        .good();`
$DIR/src/tests/routes/me/updates.rs:83:9-83:64: `.delete::<OkBool>("/api/v1/crates/bar_fighters/follow")`
$DIR/src/tests/routes/me/updates.rs:84:9-84:16: `.good()`
$DIR/src/tests/routes/me/updates.rs:86:9-86:67: `.get_with_query("/api/v1/me/updates", "page=2&per_page=1")`
$DIR/src/tests/routes/me/updates.rs:87:9-87:16: `.good()`
$DIR/src/tests/routes/me/updates.rs:91:24-91:77: `.get_with_query::<()>("/api/v1/me/updates", "page=0")`
$DIR/src/tests/routes/metrics.rs:8:9-8:90: `.with_config(|config| config.metrics_authorization_token = Some("foobar".into()))`
$DIR/src/tests/routes/metrics.rs:8:81-8:88: `.into()`
$DIR/src/tests/routes/metrics.rs:9:9-9:17: `.empty()`
$DIR/src/tests/routes/metrics.rs:24:9-24:90: `.with_config(|config| config.metrics_authorization_token = Some("secret".into()))`
$DIR/src/tests/routes/metrics.rs:24:81-24:88: `.into()`
$DIR/src/tests/routes/metrics.rs:25:9-25:17: `.empty()`
$DIR/src/tests/routes/metrics.rs:53:9-53:73: `.with_config(|config| config.metrics_authorization_token = None)`
$DIR/src/tests/routes/metrics.rs:54:9-54:17: `.empty()`
$DIR/src/tests/routes/session/authorize.rs:6:36-6:44: `.empty()`
$DIR/src/tests/routes/session/authorize.rs:7:24-7:68: `.get::<()>("/api/private/session/authorize")`
$DIR/src/tests/routes/session/begin.rs:11:36-11:44: `.empty()`
$DIR/src/tests/routes/session/begin.rs:12:34-12:68: `.get("/api/private/session/begin")`
$DIR/src/tests/routes/session/begin.rs:12:68-12:75: `.good()`
$DIR/src/tests/routes/summary.rs:23:36-23:44: `.empty()`
$DIR/src/tests/routes/summary.rs:24:9-24:51: `.get::<SummaryResponse>("/api/v1/summary")`
$DIR/src/tests/routes/summary.rs:29:44-29:56: `.with_user()`
$DIR/src/tests/routes/summary.rs:30:20-30:31: `.as_model()`
$DIR/src/tests/routes/summary.rs:31:5-82:8: `app.db(|conn| {
        let now_ = Utc::now().naive_utc();
        let now_plus_two = now_ + chrono::Duration::seconds(2);

        new_category("Category 1", "cat1", "Category 1 crates")
            .create_or_update(conn)
            .unwrap();

        CrateBuilder::new("some_downloads", user.id)
            .version(VersionBuilder::new("0.1.0"))
            .description("description")
            .keyword("popular")
            .category("cat1")
            .downloads(20)
            .recent_downloads(10)
            .expect_build(conn);

        CrateBuilder::new("most_recent_downloads", user.id)
            .version(VersionBuilder::new("0.2.0"))
            .keyword("popular")
            .category("cat1")
            .downloads(5000)
            .recent_downloads(50)
            .expect_build(conn);

        CrateBuilder::new("just_updated", user.id)
            .version(VersionBuilder::new("0.1.0"))
            .version(VersionBuilder::new("0.1.2"))
            // update 'just_updated' krate. Others won't appear because updated_at == created_at.
            .updated_at(now_)
            .expect_build(conn);

        CrateBuilder::new("just_updated_patch", user.id)
            .version(VersionBuilder::new("0.1.0"))
            .version(VersionBuilder::new("0.2.0"))
            // Add a patch version be newer than the other versions, including the higher one.
            .version(VersionBuilder::new("0.1.1").created_at(now_plus_two))
            .updated_at(now_plus_two)
            .expect_build(conn);

        CrateBuilder::new("with_downloads", user.id)
            .version(VersionBuilder::new("0.3.0"))
            .keyword("popular")
            .downloads(1000)
            .expect_build(conn);

        // set total_downloads global value for `num_downloads` prop
        update(metadata::table)
            .set(metadata::total_downloads.eq(6000))
            .execute(conn)
            .unwrap();
    });`
$DIR/src/tests/routes/summary.rs:31:8-82:7: `.db(|conn| {
        let now_ = Utc::now().naive_utc();
        let now_plus_two = now_ + chrono::Duration::seconds(2);

        new_category("Category 1", "cat1", "Category 1 crates")
            .create_or_update(conn)
            .unwrap();

        CrateBuilder::new("some_downloads", user.id)
            .version(VersionBuilder::new("0.1.0"))
            .description("description")
            .keyword("popular")
            .category("cat1")
            .downloads(20)
            .recent_downloads(10)
            .expect_build(conn);

        CrateBuilder::new("most_recent_downloads", user.id)
            .version(VersionBuilder::new("0.2.0"))
            .keyword("popular")
            .category("cat1")
            .downloads(5000)
            .recent_downloads(50)
            .expect_build(conn);

        CrateBuilder::new("just_updated", user.id)
            .version(VersionBuilder::new("0.1.0"))
            .version(VersionBuilder::new("0.1.2"))
            // update 'just_updated' krate. Others won't appear because updated_at == created_at.
            .updated_at(now_)
            .expect_build(conn);

        CrateBuilder::new("just_updated_patch", user.id)
            .version(VersionBuilder::new("0.1.0"))
            .version(VersionBuilder::new("0.2.0"))
            // Add a patch version be newer than the other versions, including the higher one.
            .version(VersionBuilder::new("0.1.1").created_at(now_plus_two))
            .updated_at(now_plus_two)
            .expect_build(conn);

        CrateBuilder::new("with_downloads", user.id)
            .version(VersionBuilder::new("0.3.0"))
            .keyword("popular")
            .downloads(1000)
            .expect_build(conn);

        // set total_downloads global value for `num_downloads` prop
        update(metadata::table)
            .set(metadata::total_downloads.eq(6000))
            .execute(conn)
            .unwrap();
    })`
$DIR/src/tests/routes/summary.rs:32:30-32:42: `.naive_utc()`
$DIR/src/tests/routes/summary.rs:35:9-37:23: `new_category("Category 1", "cat1", "Category 1 crates")
            .create_or_update(conn)
            .unwrap();`
$DIR/src/tests/routes/summary.rs:36:13-36:36: `.create_or_update(conn)`
$DIR/src/tests/routes/summary.rs:39:9-46:33: `CrateBuilder::new("some_downloads", user.id)
            .version(VersionBuilder::new("0.1.0"))
            .description("description")
            .keyword("popular")
            .category("cat1")
            .downloads(20)
            .recent_downloads(10)
            .expect_build(conn);`
$DIR/src/tests/routes/summary.rs:40:13-40:51: `.version(VersionBuilder::new("0.1.0"))`
$DIR/src/tests/routes/summary.rs:41:13-41:40: `.description("description")`
$DIR/src/tests/routes/summary.rs:42:13-42:32: `.keyword("popular")`
$DIR/src/tests/routes/summary.rs:43:13-43:30: `.category("cat1")`
$DIR/src/tests/routes/summary.rs:44:13-44:27: `.downloads(20)`
$DIR/src/tests/routes/summary.rs:45:13-45:34: `.recent_downloads(10)`
$DIR/src/tests/routes/summary.rs:46:13-46:32: `.expect_build(conn)`
$DIR/src/tests/routes/summary.rs:48:9-54:33: `CrateBuilder::new("most_recent_downloads", user.id)
            .version(VersionBuilder::new("0.2.0"))
            .keyword("popular")
            .category("cat1")
            .downloads(5000)
            .recent_downloads(50)
            .expect_build(conn);`
$DIR/src/tests/routes/summary.rs:49:13-49:51: `.version(VersionBuilder::new("0.2.0"))`
$DIR/src/tests/routes/summary.rs:50:13-50:32: `.keyword("popular")`
$DIR/src/tests/routes/summary.rs:51:13-51:30: `.category("cat1")`
$DIR/src/tests/routes/summary.rs:52:13-52:29: `.downloads(5000)`
$DIR/src/tests/routes/summary.rs:53:13-53:34: `.recent_downloads(50)`
$DIR/src/tests/routes/summary.rs:54:13-54:32: `.expect_build(conn)`
$DIR/src/tests/routes/summary.rs:56:9-61:33: `CrateBuilder::new("just_updated", user.id)
            .version(VersionBuilder::new("0.1.0"))
            .version(VersionBuilder::new("0.1.2"))
            // update 'just_updated' krate. Others won't appear because updated_at == created_at.
            .updated_at(now_)
            .expect_build(conn);`
$DIR/src/tests/routes/summary.rs:57:13-57:51: `.version(VersionBuilder::new("0.1.0"))`
$DIR/src/tests/routes/summary.rs:58:13-58:51: `.version(VersionBuilder::new("0.1.2"))`
$DIR/src/tests/routes/summary.rs:59:13-60:30: `// update 'just_updated' krate. Others won't appear because updated_at == created_at.
            .updated_at(now_)`
$DIR/src/tests/routes/summary.rs:61:13-61:32: `.expect_build(conn)`
$DIR/src/tests/routes/summary.rs:63:9-69:33: `CrateBuilder::new("just_updated_patch", user.id)
            .version(VersionBuilder::new("0.1.0"))
            .version(VersionBuilder::new("0.2.0"))
            // Add a patch version be newer than the other versions, including the higher one.
            .version(VersionBuilder::new("0.1.1").created_at(now_plus_two))
            .updated_at(now_plus_two)
            .expect_build(conn);`
$DIR/src/tests/routes/summary.rs:64:13-64:51: `.version(VersionBuilder::new("0.1.0"))`
$DIR/src/tests/routes/summary.rs:65:13-65:51: `.version(VersionBuilder::new("0.2.0"))`
$DIR/src/tests/routes/summary.rs:66:13-67:76: `// Add a patch version be newer than the other versions, including the higher one.
            .version(VersionBuilder::new("0.1.1").created_at(now_plus_two))`
$DIR/src/tests/routes/summary.rs:67:50-67:75: `.created_at(now_plus_two)`
$DIR/src/tests/routes/summary.rs:68:13-68:38: `.updated_at(now_plus_two)`
$DIR/src/tests/routes/summary.rs:69:13-69:32: `.expect_build(conn)`
$DIR/src/tests/routes/summary.rs:71:9-75:33: `CrateBuilder::new("with_downloads", user.id)
            .version(VersionBuilder::new("0.3.0"))
            .keyword("popular")
            .downloads(1000)
            .expect_build(conn);`
$DIR/src/tests/routes/summary.rs:72:13-72:51: `.version(VersionBuilder::new("0.3.0"))`
$DIR/src/tests/routes/summary.rs:73:13-73:32: `.keyword("popular")`
$DIR/src/tests/routes/summary.rs:74:13-74:29: `.downloads(1000)`
$DIR/src/tests/routes/summary.rs:75:13-75:32: `.expect_build(conn)`
$DIR/src/tests/routes/summary.rs:78:9-81:23: `update(metadata::table)
            .set(metadata::total_downloads.eq(6000))
            .execute(conn)
            .unwrap();`
$DIR/src/tests/routes/summary.rs:79:13-79:53: `.set(metadata::total_downloads.eq(6000))`
$DIR/src/tests/routes/summary.rs:79:43-79:52: `.eq(6000)`
$DIR/src/tests/routes/summary.rs:80:13-80:27: `.execute(conn)`
$DIR/src/tests/routes/summary.rs:84:37-84:60: `.get("/api/v1/summary")`
$DIR/src/tests/routes/summary.rs:84:60-84:67: `.good()`
$DIR/src/tests/routes/summary.rs:114:9-121:11: `.with_config(|config| {
            config.excluded_crate_names = vec![
                "most_recent_downloads".into(),
                // make sure no error occurs with a crate name that doesn't exist and that the name
                // matches are exact, not substrings
                "downloads".into(),
            ];
        })`
$DIR/src/tests/routes/summary.rs:115:13-120:15: `config.excluded_crate_names = vec![
                "most_recent_downloads".into(),
                // make sure no error occurs with a crate name that doesn't exist and that the name
                // matches are exact, not substrings
                "downloads".into(),
            ];`
$DIR/src/tests/routes/summary.rs:122:9-122:21: `.with_user()`
$DIR/src/tests/routes/summary.rs:123:20-123:31: `.as_model()`
$DIR/src/tests/routes/summary.rs:124:5-141:8: `app.db(|conn| {
        CrateBuilder::new("some_downloads", user.id)
            .version(VersionBuilder::new("0.1.0"))
            .description("description")
            .keyword("popular")
            .category("cat1")
            .downloads(20)
            .recent_downloads(10)
            .expect_build(conn);

        CrateBuilder::new("most_recent_downloads", user.id)
            .version(VersionBuilder::new("0.2.0"))
            .keyword("popular")
            .category("cat1")
            .downloads(5000)
            .recent_downloads(50)
            .expect_build(conn);
    });`
$DIR/src/tests/routes/summary.rs:124:8-141:7: `.db(|conn| {
        CrateBuilder::new("some_downloads", user.id)
            .version(VersionBuilder::new("0.1.0"))
            .description("description")
            .keyword("popular")
            .category("cat1")
            .downloads(20)
            .recent_downloads(10)
            .expect_build(conn);

        CrateBuilder::new("most_recent_downloads", user.id)
            .version(VersionBuilder::new("0.2.0"))
            .keyword("popular")
            .category("cat1")
            .downloads(5000)
            .recent_downloads(50)
            .expect_build(conn);
    })`
$DIR/src/tests/routes/summary.rs:125:9-132:33: `CrateBuilder::new("some_downloads", user.id)
            .version(VersionBuilder::new("0.1.0"))
            .description("description")
            .keyword("popular")
            .category("cat1")
            .downloads(20)
            .recent_downloads(10)
            .expect_build(conn);`
$DIR/src/tests/routes/summary.rs:126:13-126:51: `.version(VersionBuilder::new("0.1.0"))`
$DIR/src/tests/routes/summary.rs:127:13-127:40: `.description("description")`
$DIR/src/tests/routes/summary.rs:128:13-128:32: `.keyword("popular")`
$DIR/src/tests/routes/summary.rs:129:13-129:30: `.category("cat1")`
$DIR/src/tests/routes/summary.rs:130:13-130:27: `.downloads(20)`
$DIR/src/tests/routes/summary.rs:131:13-131:34: `.recent_downloads(10)`
$DIR/src/tests/routes/summary.rs:132:13-132:32: `.expect_build(conn)`
$DIR/src/tests/routes/summary.rs:134:9-140:33: `CrateBuilder::new("most_recent_downloads", user.id)
            .version(VersionBuilder::new("0.2.0"))
            .keyword("popular")
            .category("cat1")
            .downloads(5000)
            .recent_downloads(50)
            .expect_build(conn);`
$DIR/src/tests/routes/summary.rs:135:13-135:51: `.version(VersionBuilder::new("0.2.0"))`
$DIR/src/tests/routes/summary.rs:136:13-136:32: `.keyword("popular")`
$DIR/src/tests/routes/summary.rs:137:13-137:30: `.category("cat1")`
$DIR/src/tests/routes/summary.rs:138:13-138:29: `.downloads(5000)`
$DIR/src/tests/routes/summary.rs:139:13-139:34: `.recent_downloads(50)`
$DIR/src/tests/routes/summary.rs:140:13-140:32: `.expect_build(conn)`
$DIR/src/tests/routes/summary.rs:143:37-143:60: `.get("/api/v1/summary")`
$DIR/src/tests/routes/summary.rs:143:60-143:67: `.good()`
$DIR/src/tests/routes/users/read.rs:12:41-12:53: `.with_user()`
$DIR/src/tests/routes/users/read.rs:13:5-13:28: `app.db_new_user("Bar");`
$DIR/src/tests/routes/users/read.rs:13:8-13:27: `.db_new_user("Bar")`
$DIR/src/tests/routes/users/read.rs:15:44-15:69: `.get("/api/v1/users/foo")`
$DIR/src/tests/routes/users/read.rs:15:69-15:76: `.good()`
$DIR/src/tests/routes/users/read.rs:18:44-18:69: `.get("/api/v1/users/bAr")`
$DIR/src/tests/routes/users/read.rs:18:69-18:76: `.good()`
$DIR/src/tests/routes/users/read.rs:25:38-25:46: `.empty()`
$DIR/src/tests/routes/users/read.rs:27:5-51:8: `app.db(|conn| {
        // Please do not delete or modify the setup of this test in order to get it to pass.
        // This setup mimics how GitHub works. If someone abandons a GitHub account, the username is
        // available for anyone to take. We need to support having multiple user accounts
        // with the same gh_login in crates.io. `gh_id` is stable across renames, so that field
        // should be used for uniquely identifying GitHub accounts whenever possible. For the
        // crates.io/user/:username pages, the best we can do is show the last crates.io account
        // created with that username.
        assert_ok!(NewUser::new(
            1,
            "foobar",
            Some("I was first then deleted my github account"),
            None,
            "bar"
        )
        .create_or_update(None, &app.as_inner().emails, conn));
        assert_ok!(NewUser::new(
            2,
            "FOOBAR",
            Some("I was second, I took the foobar username on github"),
            None,
            "bar"
        )
        .create_or_update(None, &app.as_inner().emails, conn));
    });`
$DIR/src/tests/routes/users/read.rs:27:8-51:7: `.db(|conn| {
        // Please do not delete or modify the setup of this test in order to get it to pass.
        // This setup mimics how GitHub works. If someone abandons a GitHub account, the username is
        // available for anyone to take. We need to support having multiple user accounts
        // with the same gh_login in crates.io. `gh_id` is stable across renames, so that field
        // should be used for uniquely identifying GitHub accounts whenever possible. For the
        // crates.io/user/:username pages, the best we can do is show the last crates.io account
        // created with that username.
        assert_ok!(NewUser::new(
            1,
            "foobar",
            Some("I was first then deleted my github account"),
            None,
            "bar"
        )
        .create_or_update(None, &app.as_inner().emails, conn));
        assert_ok!(NewUser::new(
            2,
            "FOOBAR",
            Some("I was second, I took the foobar username on github"),
            None,
            "bar"
        )
        .create_or_update(None, &app.as_inner().emails, conn));
    })`
$DIR/src/tests/routes/users/read.rs:35:9-42:64: `assert_ok!(NewUser::new(
            1,
            "foobar",
            Some("I was first then deleted my github account"),
            None,
            "bar"
        )
        .create_or_update(None, &app.as_inner().emails, conn));`
$DIR/src/tests/routes/users/read.rs:43:9-50:64: `assert_ok!(NewUser::new(
            2,
            "FOOBAR",
            Some("I was second, I took the foobar username on github"),
            None,
            "bar"
        )
        .create_or_update(None, &app.as_inner().emails, conn));`
$DIR/src/tests/routes/users/read.rs:53:44-53:72: `.get("/api/v1/users/fOObAr")`
$DIR/src/tests/routes/users/read.rs:53:72-53:79: `.good()`
$DIR/src/tests/routes/users/stats.rs:14:44-14:56: `.with_user()`
$DIR/src/tests/routes/users/stats.rs:15:20-15:31: `.as_model()`
$DIR/src/tests/routes/users/stats.rs:16:27-16:46: `.db_new_user("bar")`
$DIR/src/tests/routes/users/stats.rs:17:36-17:47: `.as_model()`
$DIR/src/tests/routes/users/stats.rs:19:5-44:8: `app.db(|conn| {
        let mut krate = CrateBuilder::new("foo_krate1", user.id).expect_build(conn);
        krate.downloads = 10;
        update(&krate).set(&krate).execute(conn).unwrap();

        let mut krate2 = CrateBuilder::new("foo_krate2", user.id).expect_build(conn);
        krate2.downloads = 20;
        update(&krate2).set(&krate2).execute(conn).unwrap();

        let mut another_krate = CrateBuilder::new("bar_krate1", another_user.id).expect_build(conn);
        another_krate.downloads = 2;
        update(&another_krate)
            .set(&another_krate)
            .execute(conn)
            .unwrap();

        let mut no_longer_my_krate = CrateBuilder::new("nacho", user.id).expect_build(conn);
        no_longer_my_krate.downloads = 5;
        update(&no_longer_my_krate)
            .set(&no_longer_my_krate)
            .execute(conn)
            .unwrap();
        no_longer_my_krate
            .owner_remove(conn, &user.gh_login)
            .unwrap();
    });`
$DIR/src/tests/routes/users/stats.rs:19:8-44:7: `.db(|conn| {
        let mut krate = CrateBuilder::new("foo_krate1", user.id).expect_build(conn);
        krate.downloads = 10;
        update(&krate).set(&krate).execute(conn).unwrap();

        let mut krate2 = CrateBuilder::new("foo_krate2", user.id).expect_build(conn);
        krate2.downloads = 20;
        update(&krate2).set(&krate2).execute(conn).unwrap();

        let mut another_krate = CrateBuilder::new("bar_krate1", another_user.id).expect_build(conn);
        another_krate.downloads = 2;
        update(&another_krate)
            .set(&another_krate)
            .execute(conn)
            .unwrap();

        let mut no_longer_my_krate = CrateBuilder::new("nacho", user.id).expect_build(conn);
        no_longer_my_krate.downloads = 5;
        update(&no_longer_my_krate)
            .set(&no_longer_my_krate)
            .execute(conn)
            .unwrap();
        no_longer_my_krate
            .owner_remove(conn, &user.gh_login)
            .unwrap();
    })`
$DIR/src/tests/routes/users/stats.rs:20:65-20:84: `.expect_build(conn)`
$DIR/src/tests/routes/users/stats.rs:21:9-21:30: `krate.downloads = 10;`
$DIR/src/tests/routes/users/stats.rs:22:9-22:59: `update(&krate).set(&krate).execute(conn).unwrap();`
$DIR/src/tests/routes/users/stats.rs:22:23-22:35: `.set(&krate)`
$DIR/src/tests/routes/users/stats.rs:22:35-22:49: `.execute(conn)`
$DIR/src/tests/routes/users/stats.rs:24:66-24:85: `.expect_build(conn)`
$DIR/src/tests/routes/users/stats.rs:25:9-25:31: `krate2.downloads = 20;`
$DIR/src/tests/routes/users/stats.rs:26:9-26:61: `update(&krate2).set(&krate2).execute(conn).unwrap();`
$DIR/src/tests/routes/users/stats.rs:26:24-26:37: `.set(&krate2)`
$DIR/src/tests/routes/users/stats.rs:26:37-26:51: `.execute(conn)`
$DIR/src/tests/routes/users/stats.rs:28:81-28:100: `.expect_build(conn)`
$DIR/src/tests/routes/users/stats.rs:29:9-29:37: `another_krate.downloads = 2;`
$DIR/src/tests/routes/users/stats.rs:30:9-33:23: `update(&another_krate)
            .set(&another_krate)
            .execute(conn)
            .unwrap();`
$DIR/src/tests/routes/users/stats.rs:31:13-31:33: `.set(&another_krate)`
$DIR/src/tests/routes/users/stats.rs:32:13-32:27: `.execute(conn)`
$DIR/src/tests/routes/users/stats.rs:35:73-35:92: `.expect_build(conn)`
$DIR/src/tests/routes/users/stats.rs:36:9-36:42: `no_longer_my_krate.downloads = 5;`
$DIR/src/tests/routes/users/stats.rs:37:9-40:23: `update(&no_longer_my_krate)
            .set(&no_longer_my_krate)
            .execute(conn)
            .unwrap();`
$DIR/src/tests/routes/users/stats.rs:38:13-38:38: `.set(&no_longer_my_krate)`
$DIR/src/tests/routes/users/stats.rs:39:13-39:27: `.execute(conn)`
$DIR/src/tests/routes/users/stats.rs:41:9-43:23: `no_longer_my_krate
            .owner_remove(conn, &user.gh_login)
            .unwrap();`
$DIR/src/tests/routes/users/stats.rs:42:13-42:48: `.owner_remove(conn, &user.gh_login)`
$DIR/src/tests/routes/users/stats.rs:47:32-47:42: `.get(&url)`
$DIR/src/tests/routes/users/stats.rs:47:42-47:49: `.good()`
$DIR/src/tests/routes/users/stats.rs:54:42-54:54: `.with_user()`
$DIR/src/tests/routes/users/stats.rs:55:20-55:31: `.as_model()`
$DIR/src/tests/routes/users/stats.rs:58:32-58:42: `.get(&url)`
$DIR/src/tests/routes/users/stats.rs:58:42-58:49: `.good()`
$DIR/src/tests/routes/users/update.rs:47:46-47:58: `.with_user()`
$DIR/src/tests/routes/users/update.rs:48:21-48:32: `.as_model()`
$DIR/src/tests/routes/users/update.rs:50:24-50:70: `.update_email_more_control(model.id, Some(""))`
$DIR/src/tests/routes/users/update.rs:57:24-57:66: `.update_email_more_control(model.id, None)`
$DIR/src/tests/routes/users/update.rs:72:44-72:56: `.with_user()`
$DIR/src/tests/routes/users/update.rs:73:27-73:49: `.db_new_user("not_me")`
$DIR/src/tests/routes/users/update.rs:74:42-74:53: `.as_model()`
$DIR/src/tests/routes/users/update.rs:76:24-79:6: `.update_email_more_control(
        another_user_model.id,
        Some("pineapple@pineapples.pineapple"),
    )`
$DIR/src/tests/routes/users/update.rs:86:24-89:6: `.update_email_more_control(
        another_user_model.id,
        Some("pineapple@pineapples.pineapple"),
    )`
$DIR/src/tests/routes/versions/list.rs:10:44-10:56: `.with_user()`
$DIR/src/tests/routes/versions/list.rs:11:20-11:31: `.as_model()`
$DIR/src/tests/routes/versions/list.rs:15:27-15:36: `.get(url)`
$DIR/src/tests/routes/versions/list.rs:15:36-15:43: `.good()`
$DIR/src/tests/routes/versions/list.rs:16:5-16:33: `assert_json_snapshot!(json);`
$DIR/src/tests/routes/versions/list.rs:18:23-25:7: `.db(|conn| {
        CrateBuilder::new("foo_vers_index", user.id)
            .version(VersionBuilder::new("2.0.0").license(Some("MIT")))
            .version(VersionBuilder::new("2.0.1").license(Some("MIT/Apache-2.0")))
            .expect_build(conn);
        let ids: Vec<i32> = versions::table.select(versions::id).load(conn).unwrap();
        (ids[0], ids[1])
    })`
$DIR/src/tests/routes/versions/list.rs:19:9-22:33: `CrateBuilder::new("foo_vers_index", user.id)
            .version(VersionBuilder::new("2.0.0").license(Some("MIT")))
            .version(VersionBuilder::new("2.0.1").license(Some("MIT/Apache-2.0")))
            .expect_build(conn);`
$DIR/src/tests/routes/versions/list.rs:20:13-20:72: `.version(VersionBuilder::new("2.0.0").license(Some("MIT")))`
$DIR/src/tests/routes/versions/list.rs:20:50-20:71: `.license(Some("MIT"))`
$DIR/src/tests/routes/versions/list.rs:21:13-21:83: `.version(VersionBuilder::new("2.0.1").license(Some("MIT/Apache-2.0")))`
$DIR/src/tests/routes/versions/list.rs:21:50-21:82: `.license(Some("MIT/Apache-2.0"))`
$DIR/src/tests/routes/versions/list.rs:22:13-22:32: `.expect_build(conn)`
$DIR/src/tests/routes/versions/list.rs:23:44-23:65: `.select(versions::id)`
$DIR/src/tests/routes/versions/list.rs:23:65-23:76: `.load(conn)`
$DIR/src/tests/routes/versions/list.rs:24:9-24:25: `(ids[0], ids[1])`
$DIR/src/tests/routes/versions/list.rs:28:27-28:55: `.get_with_query(url, &query)`
$DIR/src/tests/routes/versions/list.rs:28:55-28:62: `.good()`
$DIR/src/tests/routes/versions/read.rs:8:44-8:56: `.with_user()`
$DIR/src/tests/routes/versions/read.rs:9:20-9:31: `.as_model()`
$DIR/src/tests/routes/versions/read.rs:11:16-16:7: `.db(|conn| {
        let krate = CrateBuilder::new("foo_vers_show_id", user.id).expect_build(conn);
        VersionBuilder::new("2.0.0")
            .size(1234)
            .expect_build(krate.id, user.id, conn)
    })`
$DIR/src/tests/routes/versions/read.rs:12:67-12:86: `.expect_build(conn)`
$DIR/src/tests/routes/versions/read.rs:13:9-15:51: `VersionBuilder::new("2.0.0")
            .size(1234)
            .expect_build(krate.id, user.id, conn)`
$DIR/src/tests/routes/versions/read.rs:14:13-14:24: `.size(1234)`
$DIR/src/tests/routes/versions/read.rs:15:13-15:51: `.expect_build(krate.id, user.id, conn)`
$DIR/src/tests/routes/versions/read.rs:19:27-19:37: `.get(&url)`
$DIR/src/tests/routes/versions/read.rs:19:37-19:44: `.good()`
$DIR/src/tests/schema_details.rs:16:23-16:64: `.definition.contains("ON DELETE CASCADE")`
$DIR/src/tests/schema_details.rs:36:23-36:64: `.definition.contains("ON DELETE CASCADE")`
$DIR/src/tests/server.rs:9:39-9:47: `.empty()`
$DIR/src/tests/server.rs:11:23-11:70: `.request_builder(Method::GET, "/api/v1/crates")`
$DIR/src/tests/server.rs:12:5-12:40: `req.header(header::USER_AGENT, "");`
$DIR/src/tests/server.rs:12:8-12:39: `.header(header::USER_AGENT, "")`
$DIR/src/tests/server.rs:13:20-13:35: `.run::<()>(req)`
$DIR/src/tests/server.rs:19:44-19:56: `.with_user()`
$DIR/src/tests/server.rs:21:5-23:8: `app.db(|conn| {
        CrateBuilder::new("dl_no_ua", user.as_model().id).expect_build(conn);
    });`
$DIR/src/tests/server.rs:21:8-23:7: `.db(|conn| {
        CrateBuilder::new("dl_no_ua", user.as_model().id).expect_build(conn);
    })`
$DIR/src/tests/server.rs:22:9-22:78: `CrateBuilder::new("dl_no_ua", user.as_model().id).expect_build(conn);`
$DIR/src/tests/server.rs:22:43-22:54: `.as_model()`
$DIR/src/tests/server.rs:22:58-22:77: `.expect_build(conn)`
$DIR/src/tests/server.rs:25:23-25:95: `.request_builder(Method::GET, "/api/v1/crates/dl_no_ua/0.99.0/download")`
$DIR/src/tests/server.rs:26:5-26:40: `req.header(header::USER_AGENT, "");`
$DIR/src/tests/server.rs:26:8-26:39: `.header(header::USER_AGENT, "")`
$DIR/src/tests/server.rs:27:20-27:35: `.run::<()>(req)`
$DIR/src/tests/server.rs:34:9-36:11: `.with_config(|config| {
            config.blocked_traffic = vec![("Never-Given".into(), vec!["1".into()])];
        })`
$DIR/src/tests/server.rs:35:13-35:85: `config.blocked_traffic = vec![("Never-Given".into(), vec!["1".into()])];`
$DIR/src/tests/server.rs:37:9-37:21: `.with_user()`
$DIR/src/tests/server.rs:39:5-41:8: `app.db(|conn| {
        CrateBuilder::new("dl_no_ua", user.as_model().id).expect_build(conn);
    });`
$DIR/src/tests/server.rs:39:8-41:7: `.db(|conn| {
        CrateBuilder::new("dl_no_ua", user.as_model().id).expect_build(conn);
    })`
$DIR/src/tests/server.rs:40:9-40:78: `CrateBuilder::new("dl_no_ua", user.as_model().id).expect_build(conn);`
$DIR/src/tests/server.rs:40:43-40:54: `.as_model()`
$DIR/src/tests/server.rs:40:58-40:77: `.expect_build(conn)`
$DIR/src/tests/server.rs:43:23-43:95: `.request_builder(Method::GET, "/api/v1/crates/dl_no_ua/0.99.0/download")`
$DIR/src/tests/server.rs:44:5-44:40: `req.header(header::USER_AGENT, "");`
$DIR/src/tests/server.rs:44:8-44:39: `.header(header::USER_AGENT, "")`
$DIR/src/tests/server.rs:45:20-45:35: `.run::<()>(req)`
$DIR/src/tests/server.rs:52:9-54:11: `.with_config(|config| {
            config.blocked_traffic = vec![("User-Agent".into(), vec!["1".into(), "2".into()])];
        })`
$DIR/src/tests/server.rs:53:13-53:96: `config.blocked_traffic = vec![("User-Agent".into(), vec!["1".into(), "2".into()])];`
$DIR/src/tests/server.rs:55:9-55:21: `.with_user()`
$DIR/src/tests/server.rs:57:5-59:8: `app.db(|conn| {
        CrateBuilder::new("dl_no_ua", user.as_model().id).expect_build(conn);
    });`
$DIR/src/tests/server.rs:57:8-59:7: `.db(|conn| {
        CrateBuilder::new("dl_no_ua", user.as_model().id).expect_build(conn);
    })`
$DIR/src/tests/server.rs:58:9-58:78: `CrateBuilder::new("dl_no_ua", user.as_model().id).expect_build(conn);`
$DIR/src/tests/server.rs:58:43-58:54: `.as_model()`
$DIR/src/tests/server.rs:58:58-58:77: `.expect_build(conn)`
$DIR/src/tests/server.rs:61:23-61:95: `.request_builder(Method::GET, "/api/v1/crates/dl_no_ua/0.99.0/download")`
$DIR/src/tests/server.rs:63:5-63:41: `req.header(header::USER_AGENT, "1");`
$DIR/src/tests/server.rs:63:8-63:40: `.header(header::USER_AGENT, "1")`
$DIR/src/tests/server.rs:64:5-64:40: `req.header("x-request-id", "abcd");`
$DIR/src/tests/server.rs:64:8-64:39: `.header("x-request-id", "abcd")`
$DIR/src/tests/server.rs:65:20-65:35: `.run::<()>(req)`
$DIR/src/tests/server.rs:67:5-67:48: `assert_display_snapshot!(resp.into_text());`
$DIR/src/tests/server.rs:69:23-69:95: `.request_builder(Method::GET, "/api/v1/crates/dl_no_ua/0.99.0/download")`
$DIR/src/tests/server.rs:72:5-75:7: `req.header(
        header::USER_AGENT,
        "1value-must-match-exactly-this-is-allowed",
    );`
$DIR/src/tests/server.rs:72:8-75:6: `.header(
        header::USER_AGENT,
        "1value-must-match-exactly-this-is-allowed",
    )`
$DIR/src/tests/server.rs:76:20-76:35: `.run::<()>(req)`
$DIR/src/tests/server_binary.rs:19:5-19:59: `initialize_dummy_crate(&mut server_bin.db().unwrap());`
$DIR/src/tests/server_binary.rs:19:43-19:48: `.db()`
$DIR/src/tests/server_binary.rs:21:36-21:44: `.start()`
$DIR/src/tests/server_binary.rs:25:9-25:49: `.get("api/v1/crates/FOO/1.0.0/download")`
$DIR/src/tests/server_binary.rs:41:5-41:59: `initialize_dummy_crate(&mut server_bin.db().unwrap());`
$DIR/src/tests/server_binary.rs:41:43-41:48: `.db()`
$DIR/src/tests/server_binary.rs:46:5-46:46: `server_bin.chaosproxy.break_networking();`
$DIR/src/tests/server_binary.rs:46:15-46:45: `.chaosproxy.break_networking()`
$DIR/src/tests/server_binary.rs:48:36-48:44: `.start()`
$DIR/src/tests/server_binary.rs:52:9-52:49: `.get("api/v1/crates/FOO/1.0.0/download")`
$DIR/src/tests/team.rs:25:48-25:61: `.with_token()`
$DIR/src/tests/team.rs:27:5-29:8: `app.db(|conn| {
        CrateBuilder::new("foo_not_github", user.as_model().id).expect_build(conn);
    });`
$DIR/src/tests/team.rs:27:8-29:7: `.db(|conn| {
        CrateBuilder::new("foo_not_github", user.as_model().id).expect_build(conn);
    })`
$DIR/src/tests/team.rs:28:9-28:84: `CrateBuilder::new("foo_not_github", user.as_model().id).expect_build(conn);`
$DIR/src/tests/team.rs:28:49-28:60: `.as_model()`
$DIR/src/tests/team.rs:28:64-28:83: `.expect_build(conn)`
$DIR/src/tests/team.rs:31:25-31:78: `.add_named_owner("foo_not_github", "dropbox:foo:foo")`
$DIR/src/tests/team.rs:41:48-41:61: `.with_token()`
$DIR/src/tests/team.rs:43:5-45:8: `app.db(|conn| {
        CrateBuilder::new("foo_weird_name", user.as_model().id).expect_build(conn);
    });`
$DIR/src/tests/team.rs:43:8-45:7: `.db(|conn| {
        CrateBuilder::new("foo_weird_name", user.as_model().id).expect_build(conn);
    })`
$DIR/src/tests/team.rs:44:9-44:84: `CrateBuilder::new("foo_weird_name", user.as_model().id).expect_build(conn);`
$DIR/src/tests/team.rs:44:49-44:60: `.as_model()`
$DIR/src/tests/team.rs:44:64-44:83: `.expect_build(conn)`
$DIR/src/tests/team.rs:47:25-47:84: `.add_named_owner("foo_weird_name", "github:foo/../bar:wut")`
$DIR/src/tests/team.rs:58:48-58:61: `.with_token()`
$DIR/src/tests/team.rs:60:5-62:8: `app.db(|conn| {
        CrateBuilder::new("foo_one_colon", user.as_model().id).expect_build(conn);
    });`
$DIR/src/tests/team.rs:60:8-62:7: `.db(|conn| {
        CrateBuilder::new("foo_one_colon", user.as_model().id).expect_build(conn);
    })`
$DIR/src/tests/team.rs:61:9-61:83: `CrateBuilder::new("foo_one_colon", user.as_model().id).expect_build(conn);`
$DIR/src/tests/team.rs:61:48-61:59: `.as_model()`
$DIR/src/tests/team.rs:61:63-61:82: `.expect_build(conn)`
$DIR/src/tests/team.rs:64:25-64:72: `.add_named_owner("foo_one_colon", "github:foo")`
$DIR/src/tests/team.rs:74:48-74:61: `.with_token()`
$DIR/src/tests/team.rs:76:5-78:8: `app.db(|conn| {
        CrateBuilder::new("foo_add_nonexistent", user.as_model().id).expect_build(conn);
    });`
$DIR/src/tests/team.rs:76:8-78:7: `.db(|conn| {
        CrateBuilder::new("foo_add_nonexistent", user.as_model().id).expect_build(conn);
    })`
$DIR/src/tests/team.rs:77:9-77:89: `CrateBuilder::new("foo_add_nonexistent", user.as_model().id).expect_build(conn);`
$DIR/src/tests/team.rs:77:54-77:65: `.as_model()`
$DIR/src/tests/team.rs:77:69-77:88: `.expect_build(conn)`
$DIR/src/tests/team.rs:81:14-81:92: `.add_named_owner("foo_add_nonexistent", "github:test-org:this-does-not-exist")`
$DIR/src/tests/team.rs:92:38-92:46: `.empty()`
$DIR/src/tests/team.rs:93:19-93:49: `.db_new_user("user-all-teams")`
$DIR/src/tests/team.rs:94:21-94:58: `.db_new_token("arbitrary token name")`
$DIR/src/tests/team.rs:95:24-95:35: `.as_model()`
$DIR/src/tests/team.rs:97:5-115:8: `app.db(|conn| {
        use crates_io::schema::teams::dsl::*;

        CrateBuilder::new("foo_renamed_team", owner_id).expect_build(conn);

        // create team with same ID and different name compared to http mock
        // used for `add_named_owner`
        NewTeam::new(
            "github:test-org:old-core", // different team name
            1000,                       // same org ID
            2001,                       // same team id as `core` team
            None,
            None,
        )
        .create_or_update(conn)
        .unwrap();

        assert_eq!(teams.count().get_result::<i64>(conn).unwrap(), 1);
    });`
$DIR/src/tests/team.rs:97:8-115:7: `.db(|conn| {
        use crates_io::schema::teams::dsl::*;

        CrateBuilder::new("foo_renamed_team", owner_id).expect_build(conn);

        // create team with same ID and different name compared to http mock
        // used for `add_named_owner`
        NewTeam::new(
            "github:test-org:old-core", // different team name
            1000,                       // same org ID
            2001,                       // same team id as `core` team
            None,
            None,
        )
        .create_or_update(conn)
        .unwrap();

        assert_eq!(teams.count().get_result::<i64>(conn).unwrap(), 1);
    })`
$DIR/src/tests/team.rs:100:9-100:76: `CrateBuilder::new("foo_renamed_team", owner_id).expect_build(conn);`
$DIR/src/tests/team.rs:100:56-100:75: `.expect_build(conn)`
$DIR/src/tests/team.rs:104:9-112:19: `NewTeam::new(
            "github:test-org:old-core", // different team name
            1000,                       // same org ID
            2001,                       // same team id as `core` team
            None,
            None,
        )
        .create_or_update(conn)
        .unwrap();`
$DIR/src/tests/team.rs:111:9-111:32: `.create_or_update(conn)`
$DIR/src/tests/team.rs:117:5-119:17: `token
        .add_named_owner("foo_renamed_team", "github:test-org:core")
        .good();`
$DIR/src/tests/team.rs:118:9-118:69: `.add_named_owner("foo_renamed_team", "github:test-org:core")`
$DIR/src/tests/team.rs:119:9-119:16: `.good()`
$DIR/src/tests/team.rs:121:20-121:58: `.crate_owner_teams("foo_renamed_team")`
$DIR/src/tests/team.rs:121:58-121:65: `.good()`
$DIR/src/tests/team.rs:129:38-129:46: `.empty()`
$DIR/src/tests/team.rs:130:19-130:49: `.db_new_user("user-all-teams")`
$DIR/src/tests/team.rs:131:21-131:58: `.db_new_token("arbitrary token name")`
$DIR/src/tests/team.rs:133:5-135:8: `app.db(|conn| {
        CrateBuilder::new("foo_mixed_case", user.as_model().id).expect_build(conn);
    });`
$DIR/src/tests/team.rs:133:8-135:7: `.db(|conn| {
        CrateBuilder::new("foo_mixed_case", user.as_model().id).expect_build(conn);
    })`
$DIR/src/tests/team.rs:134:9-134:84: `CrateBuilder::new("foo_mixed_case", user.as_model().id).expect_build(conn);`
$DIR/src/tests/team.rs:134:49-134:60: `.as_model()`
$DIR/src/tests/team.rs:134:64-134:83: `.expect_build(conn)`
$DIR/src/tests/team.rs:137:5-139:17: `token
        .add_named_owner("foo_mixed_case", "github:Test-Org:Core")
        .good();`
$DIR/src/tests/team.rs:138:9-138:67: `.add_named_owner("foo_mixed_case", "github:Test-Org:Core")`
$DIR/src/tests/team.rs:139:9-139:16: `.good()`
$DIR/src/tests/team.rs:141:5-147:8: `app.db(|conn| {
        let krate: Crate = Crate::by_name("foo_mixed_case").first(conn).unwrap();
        let owners = krate.owners(conn).unwrap();
        assert_eq!(owners.len(), 2);
        let owner = &owners[1];
        assert_eq!(owner.login(), owner.login().to_lowercase());
    });`
$DIR/src/tests/team.rs:141:8-147:7: `.db(|conn| {
        let krate: Crate = Crate::by_name("foo_mixed_case").first(conn).unwrap();
        let owners = krate.owners(conn).unwrap();
        assert_eq!(owners.len(), 2);
        let owner = &owners[1];
        assert_eq!(owner.login(), owner.login().to_lowercase());
    })`
$DIR/src/tests/team.rs:142:60-142:72: `.first(conn)`
$DIR/src/tests/team.rs:143:27-143:40: `.owners(conn)`
$DIR/src/tests/team.rs:149:20-149:56: `.crate_owner_teams("foo_mixed_case")`
$DIR/src/tests/team.rs:149:56-149:63: `.good()`
$DIR/src/tests/team.rs:156:38-156:46: `.empty()`
$DIR/src/tests/team.rs:157:19-157:49: `.db_new_user("user-org-owner")`
$DIR/src/tests/team.rs:158:21-158:58: `.db_new_token("arbitrary token name")`
$DIR/src/tests/team.rs:160:5-162:8: `app.db(|conn| {
        CrateBuilder::new("foo_org_owner", user.as_model().id).expect_build(conn);
    });`
$DIR/src/tests/team.rs:160:8-162:7: `.db(|conn| {
        CrateBuilder::new("foo_org_owner", user.as_model().id).expect_build(conn);
    })`
$DIR/src/tests/team.rs:161:9-161:83: `CrateBuilder::new("foo_org_owner", user.as_model().id).expect_build(conn);`
$DIR/src/tests/team.rs:161:48-161:59: `.as_model()`
$DIR/src/tests/team.rs:161:63-161:82: `.expect_build(conn)`
$DIR/src/tests/team.rs:164:5-166:17: `token
        .add_named_owner("foo_org_owner", "github:test-org:core")
        .good();`
$DIR/src/tests/team.rs:165:9-165:66: `.add_named_owner("foo_org_owner", "github:test-org:core")`
$DIR/src/tests/team.rs:166:9-166:16: `.good()`
$DIR/src/tests/team.rs:168:5-174:8: `app.db(|conn| {
        let krate: Crate = Crate::by_name("foo_org_owner").first(conn).unwrap();
        let owners = krate.owners(conn).unwrap();
        assert_eq!(owners.len(), 2);
        let owner = &owners[1];
        assert_eq!(owner.login(), owner.login().to_lowercase());
    });`
$DIR/src/tests/team.rs:168:8-174:7: `.db(|conn| {
        let krate: Crate = Crate::by_name("foo_org_owner").first(conn).unwrap();
        let owners = krate.owners(conn).unwrap();
        assert_eq!(owners.len(), 2);
        let owner = &owners[1];
        assert_eq!(owner.login(), owner.login().to_lowercase());
    })`
$DIR/src/tests/team.rs:169:59-169:71: `.first(conn)`
$DIR/src/tests/team.rs:170:27-170:40: `.owners(conn)`
$DIR/src/tests/team.rs:176:20-176:55: `.crate_owner_teams("foo_org_owner")`
$DIR/src/tests/team.rs:176:55-176:62: `.good()`
$DIR/src/tests/team.rs:184:35-184:43: `.empty()`
$DIR/src/tests/team.rs:185:19-185:48: `.db_new_user("user-one-team")`
$DIR/src/tests/team.rs:186:21-186:58: `.db_new_token("arbitrary token name")`
$DIR/src/tests/team.rs:188:5-190:8: `app.db(|conn| {
        CrateBuilder::new("foo_team_non_member", user.as_model().id).expect_build(conn);
    });`
$DIR/src/tests/team.rs:188:8-190:7: `.db(|conn| {
        CrateBuilder::new("foo_team_non_member", user.as_model().id).expect_build(conn);
    })`
$DIR/src/tests/team.rs:189:9-189:89: `CrateBuilder::new("foo_team_non_member", user.as_model().id).expect_build(conn);`
$DIR/src/tests/team.rs:189:54-189:65: `.as_model()`
$DIR/src/tests/team.rs:189:69-189:88: `.expect_build(conn)`
$DIR/src/tests/team.rs:192:25-192:88: `.add_named_owner("foo_team_non_member", "github:test-org:core")`
$DIR/src/tests/team.rs:202:35-202:43: `.empty()`
$DIR/src/tests/team.rs:204:33-204:55: `.db_new_user(username)`
$DIR/src/tests/team.rs:205:49-205:86: `.db_new_token("arbitrary token name")`
$DIR/src/tests/team.rs:207:5-209:8: `app.db(|conn| {
        CrateBuilder::new("foo_remove_team", user_on_both_teams.as_model().id).expect_build(conn);
    });`
$DIR/src/tests/team.rs:207:8-209:7: `.db(|conn| {
        CrateBuilder::new("foo_remove_team", user_on_both_teams.as_model().id).expect_build(conn);
    })`
$DIR/src/tests/team.rs:208:9-208:99: `CrateBuilder::new("foo_remove_team", user_on_both_teams.as_model().id).expect_build(conn);`
$DIR/src/tests/team.rs:208:64-208:75: `.as_model()`
$DIR/src/tests/team.rs:208:79-208:98: `.expect_build(conn)`
$DIR/src/tests/team.rs:211:5-213:17: `token_on_both_teams
        .add_named_owner("foo_remove_team", "github:test-org:core")
        .good();`
$DIR/src/tests/team.rs:212:9-212:68: `.add_named_owner("foo_remove_team", "github:test-org:core")`
$DIR/src/tests/team.rs:213:9-213:16: `.good()`
$DIR/src/tests/team.rs:217:39-217:87: `.remove_named_owner("foo_remove_team", username)`
$DIR/src/tests/team.rs:224:5-226:17: `token_on_both_teams
        .remove_named_owner("foo_remove_team", "github:test-org:core")
        .good();`
$DIR/src/tests/team.rs:225:9-225:71: `.remove_named_owner("foo_remove_team", "github:test-org:core")`
$DIR/src/tests/team.rs:226:9-226:16: `.good()`
$DIR/src/tests/team.rs:228:31-228:60: `.db_new_user("user-one-team")`
$DIR/src/tests/team.rs:230:36-230:68: `.publish_crate(crate_to_publish)`
$DIR/src/tests/team.rs:240:35-240:43: `.empty()`
$DIR/src/tests/team.rs:241:33-241:63: `.db_new_user("user-all-teams")`
$DIR/src/tests/team.rs:242:49-242:86: `.db_new_token("arbitrary token name")`
$DIR/src/tests/team.rs:244:5-247:8: `app.db(|conn| {
        CrateBuilder::new("foo_remove_team_owner", user_on_both_teams.as_model().id)
            .expect_build(conn);
    });`
$DIR/src/tests/team.rs:244:8-247:7: `.db(|conn| {
        CrateBuilder::new("foo_remove_team_owner", user_on_both_teams.as_model().id)
            .expect_build(conn);
    })`
$DIR/src/tests/team.rs:245:9-246:33: `CrateBuilder::new("foo_remove_team_owner", user_on_both_teams.as_model().id)
            .expect_build(conn);`
$DIR/src/tests/team.rs:245:70-245:81: `.as_model()`
$DIR/src/tests/team.rs:246:13-246:32: `.expect_build(conn)`
$DIR/src/tests/team.rs:249:5-251:17: `token_on_both_teams
        .add_named_owner("foo_remove_team_owner", "github:test-org:all")
        .good();`
$DIR/src/tests/team.rs:250:9-250:73: `.add_named_owner("foo_remove_team_owner", "github:test-org:all")`
$DIR/src/tests/team.rs:251:9-251:16: `.good()`
$DIR/src/tests/team.rs:253:31-253:60: `.db_new_user("user-one-team")`
$DIR/src/tests/team.rs:254:45-254:82: `.db_new_token("arbitrary token name")`
$DIR/src/tests/team.rs:257:26-257:93: `.remove_named_owner("foo_remove_team_owner", "github:test-org:all")`
$DIR/src/tests/team.rs:264:29-264:59: `.db_new_user("user-org-owner")`
$DIR/src/tests/team.rs:265:41-265:78: `.db_new_token("arbitrary token name")`
$DIR/src/tests/team.rs:267:24-267:91: `.remove_named_owner("foo_remove_team_owner", "github:test-org:all")`
$DIR/src/tests/team.rs:277:48-277:61: `.with_token()`
$DIR/src/tests/team.rs:279:5-288:8: `app.db(|conn| {
        CrateBuilder::new("foo_remove_nonexistent", user.as_model().id).expect_build(conn);
        insert_into(teams::table)
            .values((
                teams::login.eq("github:test-org:this-does-not-exist"),
                teams::github_id.eq(5678),
            ))
            .execute(conn)
            .expect("couldn't insert nonexistent team")
    });`
$DIR/src/tests/team.rs:279:8-288:7: `.db(|conn| {
        CrateBuilder::new("foo_remove_nonexistent", user.as_model().id).expect_build(conn);
        insert_into(teams::table)
            .values((
                teams::login.eq("github:test-org:this-does-not-exist"),
                teams::github_id.eq(5678),
            ))
            .execute(conn)
            .expect("couldn't insert nonexistent team")
    })`
$DIR/src/tests/team.rs:280:9-280:92: `CrateBuilder::new("foo_remove_nonexistent", user.as_model().id).expect_build(conn);`
$DIR/src/tests/team.rs:280:57-280:68: `.as_model()`
$DIR/src/tests/team.rs:280:72-280:91: `.expect_build(conn)`
$DIR/src/tests/team.rs:281:9-287:56: `insert_into(teams::table)
            .values((
                teams::login.eq("github:test-org:this-does-not-exist"),
                teams::github_id.eq(5678),
            ))
            .execute(conn)
            .expect("couldn't insert nonexistent team")`
$DIR/src/tests/team.rs:282:13-285:15: `.values((
                teams::login.eq("github:test-org:this-does-not-exist"),
                teams::github_id.eq(5678),
            ))`
$DIR/src/tests/team.rs:283:29-283:71: `.eq("github:test-org:this-does-not-exist")`
$DIR/src/tests/team.rs:284:33-284:42: `.eq(5678)`
$DIR/src/tests/team.rs:286:13-286:27: `.execute(conn)`
$DIR/src/tests/team.rs:291:9-294:10: `.remove_named_owner(
            "foo_remove_nonexistent",
            "github:test-org:this-does-not-exist",
        )`
$DIR/src/tests/team.rs:301:35-301:43: `.empty()`
$DIR/src/tests/team.rs:302:33-302:63: `.db_new_user("user-all-teams")`
$DIR/src/tests/team.rs:303:49-303:86: `.db_new_token("arbitrary token name")`
$DIR/src/tests/team.rs:305:5-307:8: `app.db(|conn| {
        CrateBuilder::new("foo_not_owned", user_on_both_teams.as_model().id).expect_build(conn);
    });`
$DIR/src/tests/team.rs:305:8-307:7: `.db(|conn| {
        CrateBuilder::new("foo_not_owned", user_on_both_teams.as_model().id).expect_build(conn);
    })`
$DIR/src/tests/team.rs:306:9-306:97: `CrateBuilder::new("foo_not_owned", user_on_both_teams.as_model().id).expect_build(conn);`
$DIR/src/tests/team.rs:306:62-306:73: `.as_model()`
$DIR/src/tests/team.rs:306:77-306:96: `.expect_build(conn)`
$DIR/src/tests/team.rs:309:5-311:17: `token_on_both_teams
        .add_named_owner("foo_not_owned", "github:test-org:core")
        .good();`
$DIR/src/tests/team.rs:310:9-310:66: `.add_named_owner("foo_not_owned", "github:test-org:core")`
$DIR/src/tests/team.rs:311:9-311:16: `.good()`
$DIR/src/tests/team.rs:313:31-313:60: `.db_new_user("user-one-team")`
$DIR/src/tests/team.rs:316:36-316:68: `.publish_crate(crate_to_publish)`
$DIR/src/tests/team.rs:326:35-326:43: `.empty()`
$DIR/src/tests/team.rs:327:33-327:63: `.db_new_user("user-all-teams")`
$DIR/src/tests/team.rs:328:49-328:86: `.db_new_token("arbitrary token name")`
$DIR/src/tests/team.rs:330:5-332:8: `app.db(|conn| {
        CrateBuilder::new("foo_not_owned", user_on_both_teams.as_model().id).expect_build(conn);
    });`
$DIR/src/tests/team.rs:330:8-332:7: `.db(|conn| {
        CrateBuilder::new("foo_not_owned", user_on_both_teams.as_model().id).expect_build(conn);
    })`
$DIR/src/tests/team.rs:331:9-331:97: `CrateBuilder::new("foo_not_owned", user_on_both_teams.as_model().id).expect_build(conn);`
$DIR/src/tests/team.rs:331:62-331:73: `.as_model()`
$DIR/src/tests/team.rs:331:77-331:96: `.expect_build(conn)`
$DIR/src/tests/team.rs:334:5-336:17: `token_on_both_teams
        .add_named_owner("foo_not_owned", "github:test-org:core")
        .good();`
$DIR/src/tests/team.rs:335:9-335:66: `.add_named_owner("foo_not_owned", "github:test-org:core")`
$DIR/src/tests/team.rs:336:9-336:16: `.good()`
$DIR/src/tests/team.rs:338:29-338:59: `.db_new_user("user-org-owner")`
$DIR/src/tests/team.rs:341:34-341:66: `.publish_crate(crate_to_publish)`
$DIR/src/tests/team.rs:352:35-352:43: `.empty()`
$DIR/src/tests/team.rs:353:33-353:63: `.db_new_user("user-all-teams")`
$DIR/src/tests/team.rs:354:49-354:86: `.db_new_token("arbitrary token name")`
$DIR/src/tests/team.rs:356:5-358:8: `app.db(|conn| {
        CrateBuilder::new("foo_team_owned", user_on_both_teams.as_model().id).expect_build(conn);
    });`
$DIR/src/tests/team.rs:356:8-358:7: `.db(|conn| {
        CrateBuilder::new("foo_team_owned", user_on_both_teams.as_model().id).expect_build(conn);
    })`
$DIR/src/tests/team.rs:357:9-357:98: `CrateBuilder::new("foo_team_owned", user_on_both_teams.as_model().id).expect_build(conn);`
$DIR/src/tests/team.rs:357:63-357:74: `.as_model()`
$DIR/src/tests/team.rs:357:78-357:97: `.expect_build(conn)`
$DIR/src/tests/team.rs:360:5-362:17: `token_on_both_teams
        .add_named_owner("foo_team_owned", "github:test-org:all")
        .good();`
$DIR/src/tests/team.rs:361:9-361:66: `.add_named_owner("foo_team_owned", "github:test-org:all")`
$DIR/src/tests/team.rs:362:9-362:16: `.good()`
$DIR/src/tests/team.rs:364:31-364:60: `.db_new_user("user-one-team")`
$DIR/src/tests/team.rs:367:21-367:53: `.publish_crate(crate_to_publish)`
$DIR/src/tests/team.rs:373:35-373:43: `.empty()`
$DIR/src/tests/team.rs:374:33-374:63: `.db_new_user("user-all-teams")`
$DIR/src/tests/team.rs:375:49-375:86: `.db_new_token("arbitrary token name")`
$DIR/src/tests/team.rs:377:5-379:8: `app.db(|conn| {
        CrateBuilder::new("foo_add_owner", user_on_both_teams.as_model().id).expect_build(conn);
    });`
$DIR/src/tests/team.rs:377:8-379:7: `.db(|conn| {
        CrateBuilder::new("foo_add_owner", user_on_both_teams.as_model().id).expect_build(conn);
    })`
$DIR/src/tests/team.rs:378:9-378:97: `CrateBuilder::new("foo_add_owner", user_on_both_teams.as_model().id).expect_build(conn);`
$DIR/src/tests/team.rs:378:62-378:73: `.as_model()`
$DIR/src/tests/team.rs:378:77-378:96: `.expect_build(conn)`
$DIR/src/tests/team.rs:381:5-383:17: `token_on_both_teams
        .add_named_owner("foo_add_owner", "github:test-org:all")
        .good();`
$DIR/src/tests/team.rs:382:9-382:65: `.add_named_owner("foo_add_owner", "github:test-org:all")`
$DIR/src/tests/team.rs:383:9-383:16: `.good()`
$DIR/src/tests/team.rs:385:29-385:59: `.db_new_user("user-org-owner")`
$DIR/src/tests/team.rs:386:41-386:78: `.db_new_token("arbitrary token name")`
$DIR/src/tests/team.rs:388:35-388:90: `.add_named_owner("foo_add_owner", "arbitrary_username")`
$DIR/src/tests/team.rs:398:35-398:43: `.empty()`
$DIR/src/tests/team.rs:399:33-399:63: `.db_new_user("user-all-teams")`
$DIR/src/tests/team.rs:400:49-400:86: `.db_new_token("arbitrary token name")`
$DIR/src/tests/team.rs:402:5-404:8: `app.db(|conn| {
        CrateBuilder::new("foo_add_owner", user_on_both_teams.as_model().id).expect_build(conn);
    });`
$DIR/src/tests/team.rs:402:8-404:7: `.db(|conn| {
        CrateBuilder::new("foo_add_owner", user_on_both_teams.as_model().id).expect_build(conn);
    })`
$DIR/src/tests/team.rs:403:9-403:97: `CrateBuilder::new("foo_add_owner", user_on_both_teams.as_model().id).expect_build(conn);`
$DIR/src/tests/team.rs:403:62-403:73: `.as_model()`
$DIR/src/tests/team.rs:403:77-403:96: `.expect_build(conn)`
$DIR/src/tests/team.rs:406:5-408:17: `token_on_both_teams
        .add_named_owner("foo_add_owner", "github:test-org:all")
        .good();`
$DIR/src/tests/team.rs:407:9-407:65: `.add_named_owner("foo_add_owner", "github:test-org:all")`
$DIR/src/tests/team.rs:408:9-408:16: `.good()`
$DIR/src/tests/team.rs:410:31-410:60: `.db_new_user("user-one-team")`
$DIR/src/tests/team.rs:411:45-411:82: `.db_new_token("arbitrary token name")`
$DIR/src/tests/team.rs:413:37-413:92: `.add_named_owner("foo_add_owner", "arbitrary_username")`
$DIR/src/tests/team.rs:423:44-423:56: `.with_user()`
$DIR/src/tests/team.rs:424:20-424:31: `.as_model()`
$DIR/src/tests/team.rs:426:19-433:7: `.db(|conn| {
        let t = new_team("github:test-org:team")
            .create_or_update(conn)
            .unwrap();
        let krate = CrateBuilder::new("foo", user.id).expect_build(conn);
        add_team_to_crate(&t, &krate, user, conn).unwrap();
        t
    })`
$DIR/src/tests/team.rs:428:13-428:36: `.create_or_update(conn)`
$DIR/src/tests/team.rs:430:54-430:73: `.expect_build(conn)`
$DIR/src/tests/team.rs:431:9-431:60: `add_team_to_crate(&t, &krate, user, conn).unwrap();`
$DIR/src/tests/team.rs:432:9-432:10: `t`
$DIR/src/tests/team.rs:435:20-435:60: `.search(&format!("team_id={}", team.id))`
$DIR/src/tests/team.rs:441:38-441:46: `.empty()`
$DIR/src/tests/team.rs:442:19-442:49: `.db_new_user("user-all-teams")`
$DIR/src/tests/team.rs:443:20-443:31: `.as_model()`
$DIR/src/tests/team.rs:445:19-454:7: `.db(|conn| {
        let t = NewTeam::new("github:test-org:core", 1000, 2001, None, None)
            .create_or_update(conn)
            .unwrap();

        let krate = CrateBuilder::new("foo", user.id).expect_build(conn);
        add_team_to_crate(&t, &krate, user, conn).unwrap();
        krate.owner_remove(conn, &t.login).unwrap();
        t
    })`
$DIR/src/tests/team.rs:447:13-447:36: `.create_or_update(conn)`
$DIR/src/tests/team.rs:450:54-450:73: `.expect_build(conn)`
$DIR/src/tests/team.rs:451:9-451:60: `add_team_to_crate(&t, &krate, user, conn).unwrap();`
$DIR/src/tests/team.rs:452:9-452:53: `krate.owner_remove(conn, &t.login).unwrap();`
$DIR/src/tests/team.rs:452:14-452:43: `.owner_remove(conn, &t.login)`
$DIR/src/tests/team.rs:453:9-453:10: `t`
$DIR/src/tests/team.rs:456:20-456:60: `.search(&format!("team_id={}", team.id))`
$DIR/src/tests/token.rs:10:51-10:64: `.with_token()`
$DIR/src/tests/token.rs:12:5-12:38: `anon.get(url).assert_forbidden();`
$DIR/src/tests/token.rs:12:9-12:18: `.get(url)`
$DIR/src/tests/token.rs:12:18-12:37: `.assert_forbidden()`
$DIR/src/tests/token.rs:13:5-13:41: `user.get::<EncodableMe>(url).good();`
$DIR/src/tests/token.rs:13:9-13:33: `.get::<EncodableMe>(url)`
$DIR/src/tests/token.rs:13:33-13:40: `.good()`
$DIR/src/tests/token.rs:14:5-14:49: `assert_none!(token.as_model().last_used_at);`
$DIR/src/tests/token.rs:17:5-17:33: `token.search("following=1");`
$DIR/src/tests/token.rs:17:10-17:32: `.search("following=1")`
$DIR/src/tests/token.rs:19:30-23:7: `.db(|conn| {
        assert_ok!(ApiToken::belonging_to(user.as_model())
            .select(ApiToken::as_select())
            .first(conn))
    })`
$DIR/src/tests/token.rs:20:9-22:26: `assert_ok!(ApiToken::belonging_to(user.as_model())
            .select(ApiToken::as_select())
            .first(conn))`
$DIR/src/tests/token.rs:34:36-34:44: `.empty()`
$DIR/src/tests/token.rs:36:27-36:44: `.get_request(url)`
$DIR/src/tests/token.rs:37:5-37:55: `request.header(header::AUTHORIZATION, "oldtoken");`
$DIR/src/tests/token.rs:37:12-37:54: `.header(header::AUTHORIZATION, "oldtoken")`
$DIR/src/tests/token.rs:38:24-38:43: `.run::<()>(request)`
$DIR/src/tests/unhealthy_database.rs:13:9-13:70: `.with_database(TestDatabase::SlowRealPool { replica: false })`
$DIR/src/tests/unhealthy_database.rs:14:9-14:22: `.with_token()`
$DIR/src/tests/unhealthy_database.rs:15:5-19:8: `app.db(|conn| {
        CrateBuilder::new("crate_name", owner.as_model().user_id)
            .version("1.0.0")
            .expect_build(conn)
    });`
$DIR/src/tests/unhealthy_database.rs:15:8-19:7: `.db(|conn| {
        CrateBuilder::new("crate_name", owner.as_model().user_id)
            .version("1.0.0")
            .expect_build(conn)
    })`
$DIR/src/tests/unhealthy_database.rs:16:9-18:32: `CrateBuilder::new("crate_name", owner.as_model().user_id)
            .version("1.0.0")
            .expect_build(conn)`
$DIR/src/tests/unhealthy_database.rs:16:46-16:57: `.as_model()`
$DIR/src/tests/unhealthy_database.rs:17:13-17:30: `.version("1.0.0")`
$DIR/src/tests/unhealthy_database.rs:18:13-18:32: `.expect_build(conn)`
$DIR/src/tests/unhealthy_database.rs:30:5-30:52: `app.primary_db_chaosproxy().break_networking();`
$DIR/src/tests/unhealthy_database.rs:30:8-30:32: `.primary_db_chaosproxy()`
$DIR/src/tests/unhealthy_database.rs:30:32-30:51: `.break_networking()`
$DIR/src/tests/unhealthy_database.rs:31:5-31:43: `assert_unconditional_redirects(&anon);`
$DIR/src/tests/unhealthy_database.rs:36:5-36:54: `app.primary_db_chaosproxy().restore_networking();`
$DIR/src/tests/unhealthy_database.rs:36:8-36:32: `.primary_db_chaosproxy()`
$DIR/src/tests/unhealthy_database.rs:36:32-36:53: `.restore_networking()`
$DIR/src/tests/unhealthy_database.rs:37:5-40:56: `app.as_inner()
        .primary_database
        .wait_until_healthy(DB_HEALTHY_TIMEOUT)
        .expect("the database did not return healthy");`
$DIR/src/tests/unhealthy_database.rs:37:8-37:19: `.as_inner()`
$DIR/src/tests/unhealthy_database.rs:38:9-39:48: `.primary_database
        .wait_until_healthy(DB_HEALTHY_TIMEOUT)`
$DIR/src/tests/unhealthy_database.rs:76:9-76:70: `.with_database(TestDatabase::SlowRealPool { replica: false })`
$DIR/src/tests/unhealthy_database.rs:77:9-77:17: `.empty()`
$DIR/src/tests/unhealthy_database.rs:79:24-79:53: `.get::<()>("/api/v1/summary")`
$DIR/src/tests/unhealthy_database.rs:82:5-82:52: `app.primary_db_chaosproxy().break_networking();`
$DIR/src/tests/unhealthy_database.rs:82:8-82:32: `.primary_db_chaosproxy()`
$DIR/src/tests/unhealthy_database.rs:82:32-82:51: `.break_networking()`
$DIR/src/tests/unhealthy_database.rs:84:24-84:53: `.get::<()>("/api/v1/summary")`
$DIR/src/tests/unhealthy_database.rs:87:5-87:54: `app.primary_db_chaosproxy().restore_networking();`
$DIR/src/tests/unhealthy_database.rs:87:8-87:32: `.primary_db_chaosproxy()`
$DIR/src/tests/unhealthy_database.rs:87:32-87:53: `.restore_networking()`
$DIR/src/tests/unhealthy_database.rs:88:5-91:56: `app.as_inner()
        .primary_database
        .wait_until_healthy(DB_HEALTHY_TIMEOUT)
        .expect("the database did not return healthy");`
$DIR/src/tests/unhealthy_database.rs:88:8-88:19: `.as_inner()`
$DIR/src/tests/unhealthy_database.rs:89:9-90:48: `.primary_database
        .wait_until_healthy(DB_HEALTHY_TIMEOUT)`
$DIR/src/tests/unhealthy_database.rs:93:24-93:53: `.get::<()>("/api/v1/summary")`
$DIR/src/tests/unhealthy_database.rs:102:9-102:69: `.with_database(TestDatabase::SlowRealPool { replica: true })`
$DIR/src/tests/unhealthy_database.rs:103:9-103:21: `.with_user()`
$DIR/src/tests/unhealthy_database.rs:104:5-104:28: `app.db_new_user("foo");`
$DIR/src/tests/unhealthy_database.rs:104:8-104:27: `.db_new_user("foo")`
$DIR/src/tests/unhealthy_database.rs:105:5-105:52: `app.primary_db_chaosproxy().break_networking();`
$DIR/src/tests/unhealthy_database.rs:105:8-105:32: `.primary_db_chaosproxy()`
$DIR/src/tests/unhealthy_database.rs:105:32-105:51: `.break_networking()`
$DIR/src/tests/unhealthy_database.rs:108:25-108:40: `.get::<()>(URL)`
$DIR/src/tests/unhealthy_database.rs:112:5-112:54: `app.primary_db_chaosproxy().restore_networking();`
$DIR/src/tests/unhealthy_database.rs:112:8-112:32: `.primary_db_chaosproxy()`
$DIR/src/tests/unhealthy_database.rs:112:32-112:53: `.restore_networking()`
$DIR/src/tests/unhealthy_database.rs:113:8-113:19: `.as_inner()`
$DIR/src/tests/unhealthy_database.rs:114:9-115:48: `.primary_database
        .wait_until_healthy(DB_HEALTHY_TIMEOUT)`
$DIR/src/tests/unhealthy_database.rs:124:9-124:69: `.with_database(TestDatabase::SlowRealPool { replica: true })`
$DIR/src/tests/unhealthy_database.rs:125:9-125:21: `.with_user()`
$DIR/src/tests/unhealthy_database.rs:126:5-126:28: `app.db_new_user("foo");`
$DIR/src/tests/unhealthy_database.rs:126:8-126:27: `.db_new_user("foo")`
$DIR/src/tests/unhealthy_database.rs:127:5-127:52: `app.primary_db_chaosproxy().break_networking();`
$DIR/src/tests/unhealthy_database.rs:127:8-127:32: `.primary_db_chaosproxy()`
$DIR/src/tests/unhealthy_database.rs:127:32-127:51: `.break_networking()`
$DIR/src/tests/unhealthy_database.rs:128:5-128:52: `app.replica_db_chaosproxy().break_networking();`
$DIR/src/tests/unhealthy_database.rs:128:8-128:32: `.replica_db_chaosproxy()`
$DIR/src/tests/unhealthy_database.rs:128:32-128:51: `.break_networking()`
$DIR/src/tests/unhealthy_database.rs:131:25-131:40: `.get::<()>(URL)`
$DIR/src/tests/unhealthy_database.rs:135:5-135:54: `app.replica_db_chaosproxy().restore_networking();`
$DIR/src/tests/unhealthy_database.rs:135:8-135:32: `.replica_db_chaosproxy()`
$DIR/src/tests/unhealthy_database.rs:135:32-135:53: `.restore_networking()`
$DIR/src/tests/unhealthy_database.rs:136:5-141:56: `app.as_inner()
        .read_only_replica_database
        .as_ref()
        .expect("no replica database configured")
        .wait_until_healthy(DB_HEALTHY_TIMEOUT)
        .expect("the database did not return healthy");`
$DIR/src/tests/unhealthy_database.rs:136:8-136:19: `.as_inner()`
$DIR/src/tests/unhealthy_database.rs:140:9-140:48: `.wait_until_healthy(DB_HEALTHY_TIMEOUT)`
$DIR/src/tests/unhealthy_database.rs:143:25-143:40: `.get::<()>(URL)`
$DIR/src/tests/unhealthy_database.rs:147:5-147:54: `app.primary_db_chaosproxy().restore_networking();`
$DIR/src/tests/unhealthy_database.rs:147:8-147:32: `.primary_db_chaosproxy()`
$DIR/src/tests/unhealthy_database.rs:147:32-147:53: `.restore_networking()`
$DIR/src/tests/unhealthy_database.rs:148:8-148:19: `.as_inner()`
$DIR/src/tests/unhealthy_database.rs:149:9-150:48: `.primary_database
        .wait_until_healthy(DB_HEALTHY_TIMEOUT)`
$DIR/src/tests/unhealthy_database.rs:159:9-159:69: `.with_database(TestDatabase::SlowRealPool { replica: true })`
$DIR/src/tests/unhealthy_database.rs:160:9-160:21: `.with_user()`
$DIR/src/tests/unhealthy_database.rs:161:5-161:28: `app.db_new_user("foo");`
$DIR/src/tests/unhealthy_database.rs:161:8-161:27: `.db_new_user("foo")`
$DIR/src/tests/unhealthy_database.rs:162:5-162:52: `app.primary_db_chaosproxy().break_networking();`
$DIR/src/tests/unhealthy_database.rs:162:8-162:32: `.primary_db_chaosproxy()`
$DIR/src/tests/unhealthy_database.rs:162:32-162:51: `.break_networking()`
$DIR/src/tests/unhealthy_database.rs:163:5-163:52: `app.replica_db_chaosproxy().break_networking();`
$DIR/src/tests/unhealthy_database.rs:163:8-163:32: `.replica_db_chaosproxy()`
$DIR/src/tests/unhealthy_database.rs:163:32-163:51: `.break_networking()`
$DIR/src/tests/unhealthy_database.rs:166:25-166:40: `.get::<()>(URL)`
$DIR/src/tests/unhealthy_database.rs:170:5-170:54: `app.primary_db_chaosproxy().restore_networking();`
$DIR/src/tests/unhealthy_database.rs:170:8-170:32: `.primary_db_chaosproxy()`
$DIR/src/tests/unhealthy_database.rs:170:32-170:53: `.restore_networking()`
$DIR/src/tests/unhealthy_database.rs:171:5-174:56: `app.as_inner()
        .primary_database
        .wait_until_healthy(DB_HEALTHY_TIMEOUT)
        .expect("the database did not return healthy");`
$DIR/src/tests/unhealthy_database.rs:171:8-171:19: `.as_inner()`
$DIR/src/tests/unhealthy_database.rs:172:9-173:48: `.primary_database
        .wait_until_healthy(DB_HEALTHY_TIMEOUT)`
$DIR/src/tests/unhealthy_database.rs:176:25-176:40: `.get::<()>(URL)`
$DIR/src/tests/user.rs:19:48-19:61: `.with_token()`
$DIR/src/tests/user.rs:20:21-20:32: `.as_model()`
$DIR/src/tests/user.rs:21:22-21:34: `.plaintext()`
$DIR/src/tests/user.rs:23:19-35:7: `.db(|conn| {
        // Reuse gh_id but use new gh_login and gh_access_token
        assert_ok!(
            NewUser::new(gh_id, "bar", None, None, "bar_token").create_or_update(
                None,
                &app.as_inner().emails,
                conn
            )
        );

        // Use the original API token to find the now updated user
        assert_ok!(User::find_by_api_token(conn, token.expose_secret()))
    })`
$DIR/src/tests/user.rs:25:9-31:11: `assert_ok!(
            NewUser::new(gh_id, "bar", None, None, "bar_token").create_or_update(
                None,
                &app.as_inner().emails,
                conn
            )
        );`
$DIR/src/tests/user.rs:34:9-34:73: `assert_ok!(User::find_by_api_token(conn, token.expose_secret()))`
$DIR/src/tests/user.rs:52:35-52:43: `.empty()`
$DIR/src/tests/user.rs:57:40-63:7: `.db(|conn| {
        let u = new_user("arbitrary_username");
        let u = u
            .create_or_update(None, &app.as_inner().emails, conn)
            .unwrap();
        MockCookieUser::new(&app, u)
    })`
$DIR/src/tests/user.rs:60:13-60:66: `.create_or_update(None, &app.as_inner().emails, conn)`
$DIR/src/tests/user.rs:60:41-60:52: `.as_inner()`
$DIR/src/tests/user.rs:62:9-62:37: `MockCookieUser::new(&app, u)`
$DIR/src/tests/user.rs:64:68-64:79: `.as_model()`
$DIR/src/tests/user.rs:66:41-66:51: `.show_me()`
$DIR/src/tests/user.rs:71:5-71:72: `user_without_github_email.update_email("apricot@apricots.apricot");`
$DIR/src/tests/user.rs:71:30-71:71: `.update_email("apricot@apricots.apricot")`
$DIR/src/tests/user.rs:74:46-85:7: `.db(|conn| {
        let u = NewUser {
            // Use the same github ID to link to the existing account
            gh_id: user_without_github_email_model.gh_id,
            // new_user uses a None email; the rest of the fields are arbitrary
            ..new_user("arbitrary_username")
        };
        let u = u
            .create_or_update(None, &app.as_inner().emails, conn)
            .unwrap();
        MockCookieUser::new(&app, u)
    })`
$DIR/src/tests/user.rs:82:13-82:66: `.create_or_update(None, &app.as_inner().emails, conn)`
$DIR/src/tests/user.rs:82:41-82:52: `.as_inner()`
$DIR/src/tests/user.rs:84:9-84:37: `MockCookieUser::new(&app, u)`
$DIR/src/tests/user.rs:87:47-87:57: `.show_me()`
$DIR/src/tests/user.rs:97:41-97:53: `.with_user()`
$DIR/src/tests/user.rs:98:21-98:32: `.as_model()`
$DIR/src/tests/user.rs:99:37-104:7: `.db(|conn| {
        Email::belonging_to(model)
            .select(emails::email)
            .first(conn)
            .unwrap()
    })`
$DIR/src/tests/user.rs:100:9-103:22: `Email::belonging_to(model)
            .select(emails::email)
            .first(conn)
            .unwrap()`
$DIR/src/tests/user.rs:101:13-101:35: `.select(emails::email)`
$DIR/src/tests/user.rs:102:13-102:25: `.first(conn)`
$DIR/src/tests/user.rs:109:50-120:7: `.db(|conn| {
        let u = NewUser {
            // Use the same github ID to link to the existing account
            gh_id: model.gh_id,
            // the rest of the fields are arbitrary
            ..new_user("arbitrary_username")
        };
        let u = u
            .create_or_update(Some(new_github_email), &app.as_inner().emails, conn)
            .unwrap();
        MockCookieUser::new(&app, u)
    })`
$DIR/src/tests/user.rs:117:13-117:84: `.create_or_update(Some(new_github_email), &app.as_inner().emails, conn)`
$DIR/src/tests/user.rs:117:59-117:70: `.as_inner()`
$DIR/src/tests/user.rs:119:9-119:37: `MockCookieUser::new(&app, u)`
$DIR/src/tests/user.rs:122:51-122:61: `.show_me()`
$DIR/src/tests/user.rs:131:46-131:58: `.with_user()`
$DIR/src/tests/user.rs:133:20-133:30: `.show_me()`
$DIR/src/tests/user.rs:136:5-136:45: `user.update_email("mango@mangos.mango");`
$DIR/src/tests/user.rs:136:9-136:44: `.update_email("mango@mangos.mango")`
$DIR/src/tests/user.rs:138:20-138:30: `.show_me()`
$DIR/src/tests/user.rs:153:35-153:43: `.empty()`
$DIR/src/tests/user.rs:159:19-167:7: `.db(|conn| {
        let u = NewUser {
            ..new_user("arbitrary_username")
        };
        let u = u
            .create_or_update(Some(email), &app.as_inner().emails, conn)
            .unwrap();
        MockCookieUser::new(&app, u)
    })`
$DIR/src/tests/user.rs:164:13-164:73: `.create_or_update(Some(email), &app.as_inner().emails, conn)`
$DIR/src/tests/user.rs:164:48-164:59: `.as_inner()`
$DIR/src/tests/user.rs:166:9-166:37: `MockCookieUser::new(&app, u)`
$DIR/src/tests/user.rs:168:26-168:37: `.as_model()`
$DIR/src/tests/user.rs:170:34-175:7: `.db(|conn| {
        Email::belonging_to(user_model)
            .select(emails::token)
            .first(conn)
            .unwrap()
    })`
$DIR/src/tests/user.rs:171:9-174:22: `Email::belonging_to(user_model)
            .select(emails::token)
            .first(conn)
            .unwrap()`
$DIR/src/tests/user.rs:172:13-172:35: `.select(emails::token)`
$DIR/src/tests/user.rs:173:13-173:25: `.first(conn)`
$DIR/src/tests/user.rs:177:5-177:38: `user.confirm_email(&email_token);`
$DIR/src/tests/user.rs:177:9-177:37: `.confirm_email(&email_token)`
$DIR/src/tests/user.rs:179:20-179:30: `.show_me()`
$DIR/src/tests/user.rs:194:35-194:43: `.empty()`
$DIR/src/tests/user.rs:199:19-213:7: `.db(|conn| {
        let u = NewUser {
            ..new_user("arbitrary_username")
        };
        let u = u
            .create_or_update(Some(email), &app.as_inner().emails, conn)
            .unwrap();
        update(Email::belonging_to(&u))
            // Users created before we added verification will have
            // `NULL` in the `token_generated_at` column.
            .set(emails::token_generated_at.eq(None::<NaiveDateTime>))
            .execute(conn)
            .unwrap();
        MockCookieUser::new(&app, u)
    })`
$DIR/src/tests/user.rs:204:13-204:73: `.create_or_update(Some(email), &app.as_inner().emails, conn)`
$DIR/src/tests/user.rs:204:48-204:59: `.as_inner()`
$DIR/src/tests/user.rs:206:9-211:23: `update(Email::belonging_to(&u))
            // Users created before we added verification will have
            // `NULL` in the `token_generated_at` column.
            .set(emails::token_generated_at.eq(None::<NaiveDateTime>))
            .execute(conn)
            .unwrap();`
$DIR/src/tests/user.rs:207:13-209:71: `// Users created before we added verification will have
            // `NULL` in the `token_generated_at` column.
            .set(emails::token_generated_at.eq(None::<NaiveDateTime>))`
$DIR/src/tests/user.rs:209:44-209:70: `.eq(None::<NaiveDateTime>)`
$DIR/src/tests/user.rs:210:13-210:27: `.execute(conn)`
$DIR/src/tests/user.rs:212:9-212:37: `MockCookieUser::new(&app, u)`
$DIR/src/tests/user.rs:215:20-215:30: `.show_me()`
$DIR/src/tests/util/mock_request.rs:48:9-48:62: `*req.body_mut() = Bytes::from_static(b"Hello world");`
$DIR/src/tests/util/mock_request.rs:48:13-48:24: `.body_mut()`
$DIR/src/tests/util/mock_request.rs:64:9-64:48: `req.header(header::USER_AGENT, "lulz");`
$DIR/src/tests/util/mock_request.rs:64:12-64:47: `.header(header::USER_AGENT, "lulz")`
$DIR/src/tests/util/mock_request.rs:65:9-65:38: `req.header(header::DNT, "1");`
$DIR/src/tests/util/mock_request.rs:65:12-65:37: `.header(header::DNT, "1")`
$DIR/src/tests/version.rs:7:41-7:53: `.with_user()`
$DIR/src/tests/version.rs:8:20-8:31: `.as_model()`
$DIR/src/tests/version.rs:11:58-11:77: `.expect_build(conn)`
$DIR/src/tests/version.rs:12:51-12:85: `.expect_build(c.id, user.id, conn)`
$DIR/src/tests/version.rs:14:9-14:69: `Version::record_readme_rendering(version.id, conn).unwrap();`
$DIR/src/tests/version.rs:15:9-15:69: `Version::record_readme_rendering(version.id, conn).unwrap();`
$DIR/src/tests/worker/git.rs:10:45-10:58: `.with_token()`
$DIR/src/tests/worker/git.rs:11:23-11:40: `.upstream_index()`
$DIR/src/tests/worker/git.rs:15:53-15:60: `.body()`
$DIR/src/tests/worker/git.rs:16:25-16:63: `.put::<()>("/api/v1/crates/new", body)`
$DIR/src/tests/worker/git.rs:20:5-20:68: `assert_ok_eq!(upstream.list_commits(), vec!["Initial Commit"]);`
$DIR/src/tests/worker/git.rs:23:5-23:39: `app.run_pending_background_jobs();`
$DIR/src/tests/worker/git.rs:23:8-23:38: `.run_pending_background_jobs()`
$DIR/src/tests/worker/git.rs:24:5-27:7: `assert_ok_eq!(
        upstream.list_commits(),
        vec!["Initial Commit", "Create crate `serde`"]
    );`
$DIR/src/tests/worker/git.rs:28:5-28:57: `assert_ok_eq!(upstream.crate_exists("serde"), true);`
$DIR/src/tests/worker/git.rs:32:25-32:73: `.delete::<()>("/api/v1/crates/serde/1.0.0/yank")`
$DIR/src/tests/worker/git.rs:35:5-35:39: `app.run_pending_background_jobs();`
$DIR/src/tests/worker/git.rs:35:8-35:38: `.run_pending_background_jobs()`
$DIR/src/tests/worker/git.rs:36:5-43:7: `assert_ok_eq!(
        upstream.list_commits(),
        vec![
            "Initial Commit",
            "Create crate `serde`",
            "Update crate `serde`",
        ]
    );`
$DIR/src/tests/worker/git.rs:44:5-44:57: `assert_ok_eq!(upstream.crate_exists("serde"), true);`
$DIR/src/tests/worker/git.rs:48:5-55:8: `app.db(|conn| {
        use crates_io::schema::crates;

        let krate: Crate = assert_ok!(Crate::by_name("serde").first(conn));
        assert_ok!(diesel::delete(crates::table.find(krate.id)).execute(conn));

        assert_ok!(Job::enqueue_sync_to_index("serde", conn));
    });`
$DIR/src/tests/worker/git.rs:48:8-55:7: `.db(|conn| {
        use crates_io::schema::crates;

        let krate: Crate = assert_ok!(Crate::by_name("serde").first(conn));
        assert_ok!(diesel::delete(crates::table.find(krate.id)).execute(conn));

        assert_ok!(Job::enqueue_sync_to_index("serde", conn));
    })`
$DIR/src/tests/worker/git.rs:52:9-52:80: `assert_ok!(diesel::delete(crates::table.find(krate.id)).execute(conn));`
$DIR/src/tests/worker/git.rs:54:9-54:63: `assert_ok!(Job::enqueue_sync_to_index("serde", conn));`
$DIR/src/tests/worker/git.rs:57:5-57:39: `app.run_pending_background_jobs();`
$DIR/src/tests/worker/git.rs:57:8-57:38: `.run_pending_background_jobs()`
$DIR/src/tests/worker/git.rs:58:5-66:7: `assert_ok_eq!(
        upstream.list_commits(),
        vec![
            "Initial Commit",
            "Create crate `serde`",
            "Update crate `serde`",
            "Delete crate `serde`",
        ]
    );`
$DIR/src/util/bytes_request.rs:122:13-122:57: `.send_data(vec![0; ACTUAL_BODY_SIZE].into())`
$DIR/src/util/bytes_request.rs:122:49-122:56: `.into()`
$DIR/src/util/bytes_request.rs:125:43-125:54: `.body(body)`
$DIR/src/util/bytes_request.rs:128:13-128:26: `.request(req)`
$DIR/src/util/bytes_request.rs:132:9-132:35: `quit_tx.send(()).unwrap();`
$DIR/src/util/bytes_request.rs:132:16-132:25: `.send(())`
$DIR/src/util/bytes_request.rs:133:9-133:40: `server.await.unwrap().unwrap();`
$DIR/src/util/token.rs:102:37-102:53: `.expose_secret()`
$DIR/src/views.rs:705:17-705:41: `.and_hms_opt(14, 23, 11)`
$DIR/src/views.rs:724:17-724:41: `.and_hms_opt(14, 23, 11)`
$DIR/src/views.rs:742:17-742:41: `.and_hms_opt(14, 23, 11)`
$DIR/src/views.rs:762:17-762:41: `.and_hms_opt(14, 23, 11)`
$DIR/src/views.rs:766:17-766:41: `.and_hms_opt(14, 23, 12)`
$DIR/src/views.rs:797:9-799:67: `assert_some!(json
            .as_str()
            .find(r#""updated_at":"2017-01-06T14:23:11+00:00""#));`
$DIR/src/views.rs:800:9-802:67: `assert_some!(json
            .as_str()
            .find(r#""created_at":"2017-01-06T14:23:12+00:00""#));`
$DIR/src/views.rs:813:17-813:41: `.and_hms_opt(14, 23, 11)`
$DIR/src/views.rs:821:17-821:41: `.and_hms_opt(14, 23, 12)`
$DIR/src/views.rs:843:9-845:67: `assert_some!(json
            .as_str()
            .find(r#""updated_at":"2017-01-06T14:23:11+00:00""#));`
$DIR/src/views.rs:861:17-861:41: `.and_hms_opt(14, 23, 11)`
$DIR/src/views.rs:865:17-865:41: `.and_hms_opt(16, 30, 00)`
$DIR/src/views.rs:869:9-871:67: `assert_some!(json
            .as_str()
            .find(r#""created_at":"2017-01-06T14:23:11+00:00""#));`
$DIR/src/worker/dump_db/configuration.rs:92:9-92:76: `tables.insert("a".to_owned(), table_config_with_deps(&["b", "c"]));`
$DIR/src/worker/dump_db/configuration.rs:92:15-92:75: `.insert("a".to_owned(), table_config_with_deps(&["b", "c"]))`
$DIR/src/worker/dump_db/configuration.rs:93:9-93:76: `tables.insert("b".to_owned(), table_config_with_deps(&["c", "d"]));`
$DIR/src/worker/dump_db/configuration.rs:93:15-93:75: `.insert("b".to_owned(), table_config_with_deps(&["c", "d"]))`
$DIR/src/worker/dump_db/configuration.rs:94:9-94:71: `tables.insert("c".to_owned(), table_config_with_deps(&["d"]));`
$DIR/src/worker/dump_db/configuration.rs:94:15-94:70: `.insert("c".to_owned(), table_config_with_deps(&["d"]))`
$DIR/src/worker/dump_db/configuration.rs:95:9-95:70: `config.0.insert("d".to_owned(), table_config_with_deps(&[]));`
$DIR/src/worker/dump_db/configuration.rs:95:17-95:69: `.insert("d".to_owned(), table_config_with_deps(&[]))`
$DIR/src/worker/dump_db/configuration.rs:104:9-104:71: `tables.insert("a".to_owned(), table_config_with_deps(&["b"]));`
$DIR/src/worker/dump_db/configuration.rs:104:15-104:70: `.insert("a".to_owned(), table_config_with_deps(&["b"]))`
$DIR/src/worker/dump_db/configuration.rs:105:9-105:71: `tables.insert("b".to_owned(), table_config_with_deps(&["a"]));`
$DIR/src/worker/dump_db/configuration.rs:105:15-105:70: `.insert("b".to_owned(), table_config_with_deps(&["a"]))`
$DIR/src/worker/dump_db/gen_scripts.rs:134:13-139:15: `.flat_map(|(table, config)| {
                config.columns.keys().map(|column| Column {
                    table_name: table.clone(),
                    column_name: column.clone(),
                })
            })`
$DIR/src/worker/dump_db/gen_scripts.rs:135:17-138:19: `config.columns.keys().map(|column| Column {
                    table_name: table.clone(),
                    column_name: column.clone(),
                })`
$DIR/src/worker/dump_db/gen_scripts.rs:135:23-135:38: `.columns.keys()`
$DIR/src/worker/dump_db/gen_scripts.rs:135:38-138:19: `.map(|column| Column {
                    table_name: table.clone(),
                    column_name: column.clone(),
                })`
$DIR/src/worker/dump_db/gen_scripts.rs:140:13-140:23: `.collect()`
$DIR/src/worker/dump_db/gen_scripts.rs:145:24-145:49: `.difference(&vis_columns)`
$DIR/src/worker/dump_db/gen_scripts.rs:147:13-149:16: `errors.push(format!(
                "No visibility information for columns {table_name}.{column_name}."
            ));`
$DIR/src/worker/dump_db/gen_scripts.rs:147:19-149:15: `.push(format!(
                "No visibility information for columns {table_name}.{column_name}."
            ))`
$DIR/src/worker/dump_db/gen_scripts.rs:154:25-154:49: `.difference(&db_columns)`
$DIR/src/worker/dump_db/gen_scripts.rs:156:13-158:16: `errors.push(format!(
                "Column {table_name}.{column_name} does not exist in the database."
            ));`
$DIR/src/worker/dump_db/gen_scripts.rs:156:19-158:15: `.push(format!(
                "Column {table_name}.{column_name} does not exist in the database."
            ))`
$DIR/src/worker/dump_db.rs:282:13-282:35: `.prefix("DumpTarball")`
$DIR/src/worker/dump_db.rs:283:13-283:23: `.tempdir()`
$DIR/src/worker/dump_db.rs:285:24-285:31: `.path()`
$DIR/src/worker/dump_db.rs:285:31-285:50: `.join("0000-00-00")`
$DIR/src/worker/dump_db.rs:287:9-287:37: `fs::create_dir(&p).unwrap();`
$DIR/src/worker/dump_db.rs:288:9-288:80: `fs::write(p.join("README.md"), "# crates.io Database Dump\n").unwrap();`
$DIR/src/worker/dump_db.rs:288:20-288:38: `.join("README.md")`
$DIR/src/worker/dump_db.rs:289:9-289:49: `fs::create_dir(p.join("data")).unwrap();`
$DIR/src/worker/dump_db.rs:289:25-289:38: `.join("data")`
$DIR/src/worker/dump_db.rs:290:9-290:67: `fs::write(p.join("data").join("crates.csv"), "").unwrap();`
$DIR/src/worker/dump_db.rs:290:20-290:33: `.join("data")`
$DIR/src/worker/dump_db.rs:290:33-290:52: `.join("crates.csv")`
$DIR/src/worker/dump_db.rs:291:9-291:73: `fs::write(p.join("data").join("crate_owners.csv"), "").unwrap();`
$DIR/src/worker/dump_db.rs:291:20-291:33: `.join("data")`
$DIR/src/worker/dump_db.rs:291:33-291:58: `.join("crate_owners.csv")`
$DIR/src/worker/dump_db.rs:292:9-292:66: `fs::write(p.join("data").join("users.csv"), "").unwrap();`
$DIR/src/worker/dump_db.rs:292:20-292:33: `.join("data")`
$DIR/src/worker/dump_db.rs:292:33-292:51: `.join("users.csv")`
$DIR/src/worker/dump_db.rs:298:30-298:40: `.entries()`
$DIR/src/worker/dump_db.rs:298:49-298:61: `.enumerate()`
$DIR/src/worker/update_downloads.rs:126:9-129:23: `insert_into(version_downloads::table)
            .values(version_downloads::version_id.eq(version.id))
            .execute(conn)
            .unwrap();`
$DIR/src/worker/update_downloads.rs:127:13-127:66: `.values(version_downloads::version_id.eq(version.id))`
$DIR/src/worker/update_downloads.rs:127:50-127:65: `.eq(version.id)`
$DIR/src/worker/update_downloads.rs:128:13-128:27: `.execute(conn)`
$DIR/src/worker/update_downloads.rs:130:9-137:23: `insert_into(version_downloads::table)
            .values((
                version_downloads::version_id.eq(version.id),
                version_downloads::date.eq(date(now - 1.day())),
                version_downloads::processed.eq(true),
            ))
            .execute(conn)
            .unwrap();`
$DIR/src/worker/update_downloads.rs:131:13-135:15: `.values((
                version_downloads::version_id.eq(version.id),
                version_downloads::date.eq(date(now - 1.day())),
                version_downloads::processed.eq(true),
            ))`
$DIR/src/worker/update_downloads.rs:132:46-132:61: `.eq(version.id)`
$DIR/src/worker/update_downloads.rs:133:40-133:64: `.eq(date(now - 1.day()))`
$DIR/src/worker/update_downloads.rs:133:56-133:62: `.day()`
$DIR/src/worker/update_downloads.rs:134:45-134:54: `.eq(true)`
$DIR/src/worker/update_downloads.rs:136:13-136:27: `.execute(conn)`
$DIR/src/worker/update_downloads.rs:139:9-139:38: `super::update(conn).unwrap();`
$DIR/src/worker/update_downloads.rs:141:13-141:30: `.find(version.id)`
$DIR/src/worker/update_downloads.rs:142:13-142:41: `.select(versions::downloads)`
$DIR/src/worker/update_downloads.rs:143:13-143:25: `.first(conn)`
$DIR/src/worker/update_downloads.rs:146:13-146:28: `.find(krate.id)`
$DIR/src/worker/update_downloads.rs:147:13-147:39: `.select(crates::downloads)`
$DIR/src/worker/update_downloads.rs:148:13-148:25: `.first(conn)`
$DIR/src/worker/update_downloads.rs:150:9-150:38: `super::update(conn).unwrap();`
$DIR/src/worker/update_downloads.rs:152:13-152:30: `.find(version.id)`
$DIR/src/worker/update_downloads.rs:153:13-153:41: `.select(versions::downloads)`
$DIR/src/worker/update_downloads.rs:154:13-154:25: `.first(conn)`
$DIR/src/worker/update_downloads.rs:165:9-174:23: `insert_into(version_downloads::table)
            .values((
                version_downloads::version_id.eq(version.id),
                version_downloads::downloads.eq(2),
                version_downloads::counted.eq(2),
                version_downloads::date.eq(date(now - 2.days())),
                version_downloads::processed.eq(false),
            ))
            .execute(conn)
            .unwrap();`
$DIR/src/worker/update_downloads.rs:166:13-172:15: `.values((
                version_downloads::version_id.eq(version.id),
                version_downloads::downloads.eq(2),
                version_downloads::counted.eq(2),
                version_downloads::date.eq(date(now - 2.days())),
                version_downloads::processed.eq(false),
            ))`
$DIR/src/worker/update_downloads.rs:167:46-167:61: `.eq(version.id)`
$DIR/src/worker/update_downloads.rs:168:45-168:51: `.eq(2)`
$DIR/src/worker/update_downloads.rs:169:43-169:49: `.eq(2)`
$DIR/src/worker/update_downloads.rs:170:40-170:65: `.eq(date(now - 2.days()))`
$DIR/src/worker/update_downloads.rs:170:56-170:63: `.days()`
$DIR/src/worker/update_downloads.rs:171:45-171:55: `.eq(false)`
$DIR/src/worker/update_downloads.rs:173:13-173:27: `.execute(conn)`
$DIR/src/worker/update_downloads.rs:175:9-175:38: `super::update(conn).unwrap();`
$DIR/src/worker/update_downloads.rs:177:13-177:66: `.filter(version_downloads::version_id.eq(version.id))`
$DIR/src/worker/update_downloads.rs:177:50-177:65: `.eq(version.id)`
$DIR/src/worker/update_downloads.rs:178:13-178:50: `.select(version_downloads::processed)`
$DIR/src/worker/update_downloads.rs:179:13-179:25: `.first(conn)`
$DIR/src/worker/update_downloads.rs:189:9-198:23: `insert_into(version_downloads::table)
            .values((
                version_downloads::version_id.eq(version.id),
                version_downloads::downloads.eq(2),
                version_downloads::counted.eq(2),
                version_downloads::date.eq(date(now)),
                version_downloads::processed.eq(false),
            ))
            .execute(conn)
            .unwrap();`
$DIR/src/worker/update_downloads.rs:190:13-196:15: `.values((
                version_downloads::version_id.eq(version.id),
                version_downloads::downloads.eq(2),
                version_downloads::counted.eq(2),
                version_downloads::date.eq(date(now)),
                version_downloads::processed.eq(false),
            ))`
$DIR/src/worker/update_downloads.rs:191:46-191:61: `.eq(version.id)`
$DIR/src/worker/update_downloads.rs:192:45-192:51: `.eq(2)`
$DIR/src/worker/update_downloads.rs:193:43-193:49: `.eq(2)`
$DIR/src/worker/update_downloads.rs:194:40-194:54: `.eq(date(now))`
$DIR/src/worker/update_downloads.rs:195:45-195:55: `.eq(false)`
$DIR/src/worker/update_downloads.rs:197:13-197:27: `.execute(conn)`
$DIR/src/worker/update_downloads.rs:199:9-199:38: `super::update(conn).unwrap();`
$DIR/src/worker/update_downloads.rs:201:13-201:66: `.filter(version_downloads::version_id.eq(version.id))`
$DIR/src/worker/update_downloads.rs:201:50-201:65: `.eq(version.id)`
$DIR/src/worker/update_downloads.rs:202:13-202:50: `.select(version_downloads::processed)`
$DIR/src/worker/update_downloads.rs:203:13-203:25: `.first(conn)`
$DIR/src/worker/update_downloads.rs:215:9-218:23: `update(versions::table)
            .set(versions::updated_at.eq(now - 2.hours()))
            .execute(conn)
            .unwrap();`
$DIR/src/worker/update_downloads.rs:216:13-216:59: `.set(versions::updated_at.eq(now - 2.hours()))`
$DIR/src/worker/update_downloads.rs:216:38-216:58: `.eq(now - 2.hours())`
$DIR/src/worker/update_downloads.rs:216:49-216:57: `.hours()`
$DIR/src/worker/update_downloads.rs:217:13-217:27: `.execute(conn)`
$DIR/src/worker/update_downloads.rs:219:9-222:23: `update(crates::table)
            .set(crates::updated_at.eq(now - 2.hours()))
            .execute(conn)
            .unwrap();`
$DIR/src/worker/update_downloads.rs:220:13-220:57: `.set(crates::updated_at.eq(now - 2.hours()))`
$DIR/src/worker/update_downloads.rs:220:36-220:56: `.eq(now - 2.hours())`
$DIR/src/worker/update_downloads.rs:220:47-220:55: `.hours()`
$DIR/src/worker/update_downloads.rs:221:13-221:27: `.execute(conn)`
$DIR/src/worker/update_downloads.rs:223:9-232:23: `insert_into(version_downloads::table)
            .values((
                version_downloads::version_id.eq(version.id),
                version_downloads::downloads.eq(2),
                version_downloads::counted.eq(1),
                version_downloads::date.eq(date(now)),
                version_downloads::processed.eq(false),
            ))
            .execute(conn)
            .unwrap();`
$DIR/src/worker/update_downloads.rs:224:13-230:15: `.values((
                version_downloads::version_id.eq(version.id),
                version_downloads::downloads.eq(2),
                version_downloads::counted.eq(1),
                version_downloads::date.eq(date(now)),
                version_downloads::processed.eq(false),
            ))`
$DIR/src/worker/update_downloads.rs:225:46-225:61: `.eq(version.id)`
$DIR/src/worker/update_downloads.rs:226:45-226:51: `.eq(2)`
$DIR/src/worker/update_downloads.rs:227:43-227:49: `.eq(1)`
$DIR/src/worker/update_downloads.rs:228:40-228:54: `.eq(date(now))`
$DIR/src/worker/update_downloads.rs:229:45-229:55: `.eq(false)`
$DIR/src/worker/update_downloads.rs:231:13-231:27: `.execute(conn)`
$DIR/src/worker/update_downloads.rs:233:9-239:23: `insert_into(version_downloads::table)
            .values((
                version_downloads::version_id.eq(version.id),
                version_downloads::date.eq(date(now - 1.day())),
            ))
            .execute(conn)
            .unwrap();`
$DIR/src/worker/update_downloads.rs:234:13-237:15: `.values((
                version_downloads::version_id.eq(version.id),
                version_downloads::date.eq(date(now - 1.day())),
            ))`
$DIR/src/worker/update_downloads.rs:235:46-235:61: `.eq(version.id)`
$DIR/src/worker/update_downloads.rs:236:40-236:64: `.eq(date(now - 1.day()))`
$DIR/src/worker/update_downloads.rs:236:56-236:62: `.day()`
$DIR/src/worker/update_downloads.rs:238:13-238:27: `.execute(conn)`
$DIR/src/worker/update_downloads.rs:241:54-241:71: `.find(version.id)`
$DIR/src/worker/update_downloads.rs:241:71-241:83: `.first(conn)`
$DIR/src/worker/update_downloads.rs:243:13-243:45: `.filter(crates::id.eq(krate.id))`
$DIR/src/worker/update_downloads.rs:243:31-243:44: `.eq(krate.id)`
$DIR/src/worker/update_downloads.rs:244:13-244:25: `.first(conn)`
$DIR/src/worker/update_downloads.rs:246:9-246:38: `super::update(conn).unwrap();`
$DIR/src/worker/update_downloads.rs:247:48-247:65: `.find(version.id)`
$DIR/src/worker/update_downloads.rs:247:65-247:77: `.first(conn)`
$DIR/src/worker/update_downloads.rs:251:13-251:45: `.filter(crates::id.eq(krate.id))`
$DIR/src/worker/update_downloads.rs:251:31-251:44: `.eq(krate.id)`
$DIR/src/worker/update_downloads.rs:252:13-252:25: `.first(conn)`
$DIR/src/worker/update_downloads.rs:256:9-256:38: `super::update(conn).unwrap();`
$DIR/src/worker/update_downloads.rs:257:48-257:65: `.find(version.id)`
$DIR/src/worker/update_downloads.rs:257:65-257:77: `.first(conn)`
$DIR/src/worker/update_downloads.rs:269:9-272:23: `update(versions::table)
            .set(versions::updated_at.eq(now - 2.days()))
            .execute(conn)
            .unwrap();`
$DIR/src/worker/update_downloads.rs:270:13-270:58: `.set(versions::updated_at.eq(now - 2.days()))`
$DIR/src/worker/update_downloads.rs:270:38-270:57: `.eq(now - 2.days())`
$DIR/src/worker/update_downloads.rs:270:49-270:56: `.days()`
$DIR/src/worker/update_downloads.rs:271:13-271:27: `.execute(conn)`
$DIR/src/worker/update_downloads.rs:273:9-276:23: `update(crates::table)
            .set(crates::updated_at.eq(now - 2.days()))
            .execute(conn)
            .unwrap();`
$DIR/src/worker/update_downloads.rs:274:13-274:56: `.set(crates::updated_at.eq(now - 2.days()))`
$DIR/src/worker/update_downloads.rs:274:36-274:55: `.eq(now - 2.days())`
$DIR/src/worker/update_downloads.rs:274:47-274:54: `.days()`
$DIR/src/worker/update_downloads.rs:275:13-275:27: `.execute(conn)`
$DIR/src/worker/update_downloads.rs:277:9-286:23: `insert_into(version_downloads::table)
            .values((
                version_downloads::version_id.eq(version.id),
                version_downloads::downloads.eq(2),
                version_downloads::counted.eq(2),
                version_downloads::date.eq(date(now - 2.days())),
                version_downloads::processed.eq(false),
            ))
            .execute(conn)
            .unwrap();`
$DIR/src/worker/update_downloads.rs:278:13-284:15: `.values((
                version_downloads::version_id.eq(version.id),
                version_downloads::downloads.eq(2),
                version_downloads::counted.eq(2),
                version_downloads::date.eq(date(now - 2.days())),
                version_downloads::processed.eq(false),
            ))`
$DIR/src/worker/update_downloads.rs:279:46-279:61: `.eq(version.id)`
$DIR/src/worker/update_downloads.rs:280:45-280:51: `.eq(2)`
$DIR/src/worker/update_downloads.rs:281:43-281:49: `.eq(2)`
$DIR/src/worker/update_downloads.rs:282:40-282:65: `.eq(date(now - 2.days()))`
$DIR/src/worker/update_downloads.rs:282:56-282:63: `.days()`
$DIR/src/worker/update_downloads.rs:283:45-283:55: `.eq(false)`
$DIR/src/worker/update_downloads.rs:285:13-285:27: `.execute(conn)`
$DIR/src/worker/update_downloads.rs:288:9-288:38: `super::update(conn).unwrap();`
$DIR/src/worker/update_downloads.rs:290:13-290:61: `.select(versions::updated_at.ne(now - 2.days()))`
$DIR/src/worker/update_downloads.rs:290:41-290:60: `.ne(now - 2.days())`
$DIR/src/worker/update_downloads.rs:290:52-290:59: `.days()`
$DIR/src/worker/update_downloads.rs:291:13-291:30: `.get_result(conn)`
$DIR/src/worker/update_downloads.rs:293:13-293:59: `.select(crates::updated_at.ne(now - 2.days()))`
$DIR/src/worker/update_downloads.rs:293:39-293:58: `.ne(now - 2.days())`
$DIR/src/worker/update_downloads.rs:293:50-293:57: `.days()`
$DIR/src/worker/update_downloads.rs:294:13-294:30: `.get_result(conn)`
