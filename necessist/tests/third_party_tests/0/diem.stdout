Warning: Found multiple functions with the following names in `$DIR/config/management/operational/src/account_resource.rs`: {
    "execute",
}
Silence this warning with: --allow local-function-ambiguous
Warning: Found multiple functions with the following names in `$DIR/config/management/operational/src/governance.rs`: {
    "execute",
}
Warning: Found multiple functions with the following names in `$DIR/config/management/operational/src/keys.rs`: {
    "save_key",
}
Warning: Found multiple functions with the following names in `$DIR/config/management/operational/src/validator_config.rs`: {
    "execute",
}
Warning: Found multiple functions with the following names in `$DIR/consensus/consensus-types/src/timeout_2chain.rs`: {
    "epoch",
    "round",
}
Warning: Found multiple functions with the following names in `$DIR/consensus/safety-rules/src/configurable_validator_signer.rs`: {
    "author",
    "sign",
}
Warning: Found multiple functions with the following names in `$DIR/consensus/safety-rules/src/remote_service.rs`: {
    "process_one_message",
}
Warning: Found multiple functions with the following names in `$DIR/consensus/safety-rules/src/serializer.rs`: {
    "request",
}
Warning: Found multiple functions with the following names in `$DIR/consensus/src/experimental/commit_phase.rs`: {
    "blocks",
}
Warning: Found multiple functions with the following names in `$DIR/consensus/src/network_tests.rs`: {
    "add_node",
    "extend_author_to_twin_ids",
    "get_twin_ids",
    "is_message_dropped",
    "split_network",
}
Warning: Found multiple functions with the following names in `$DIR/consensus/src/round_manager.rs`: {
    "epoch_state",
    "sync_up",
}
Warning: Found multiple functions with the following names in `$DIR/consensus/src/test_utils/mock_storage.rs`: {
    "recover_from_ledger",
    "start",
}
Warning: Found multiple functions with the following names in `$DIR/crates/debug-interface/src/lib.rs`: {
    "get_node_metrics",
}
Warning: Found multiple functions with the following names in `$DIR/crates/diem/src/common/config.rs`: {
    "save",
}
Warning: Found multiple functions with the following names in `$DIR/crates/diem-assets-proof/src/lib.rs`: {
    "exec",
}
Warning: Found multiple functions with the following names in `$DIR/crates/diem-client/src/proxy.rs`: {
    "contains",
}
Warning: Found multiple functions with the following names in `$DIR/crates/diem-client/src/request.rs`: {
    "method",
}
Warning: Found multiple functions with the following names in `$DIR/crates/diem-client/src/verifying_client/file_state_store.rs`: {
    "latest_state",
    "store",
}
Warning: Found multiple functions with the following names in `$DIR/crates/diem-client/src/verifying_client/state_store.rs`: {
    "latest_state",
    "latest_state_version",
    "store",
}
Warning: Found multiple functions with the following names in `$DIR/crates/diem-crypto/src/ed25519.rs`: {
    "to_bytes",
}
Warning: Found multiple functions with the following names in `$DIR/crates/diem-crypto/src/multi_ed25519.rs`: {
    "length",
    "to_bytes",
}
Warning: Found multiple functions with the following names in `$DIR/crates/diem-crypto/src/validatable.rs`: {
    "hash",
    "serialize",
    "validate",
}
Warning: Found multiple functions with the following names in `$DIR/crates/diem-crypto/src/x25519.rs`: {
    "to_bytes",
}
Warning: Found multiple functions with the following names in `$DIR/crates/diem-logger/src/diem_logger.rs`: {
    "enabled",
    "write",
}
Warning: Found multiple functions with the following names in `$DIR/crates/diem-proptest-helpers/src/unit_tests/repeat_vec_tests.rs`: {
    "extend",
    "get",
    "len",
    "remove",
    "remove_all",
}
Warning: Found multiple functions with the following names in `$DIR/crates/diem-retrier/src/lib.rs`: {
    "next",
}
Warning: Found multiple functions with the following names in `$DIR/crates/diem-time-service/src/mock.rs`: {
    "advance",
    "advance_next",
}
Warning: Found multiple functions with the following names in `$DIR/crates/proxy/src/lib.rs`: {
    "contains",
}
Warning: Found multiple functions with the following names in `$DIR/devtools/x/src/lint/guppy.rs`: {
    "name",
}
Warning: Found multiple functions with the following names in `$DIR/execution/execution-correctness/src/remote_service.rs`: {
    "process_one_message",
}
Warning: Found multiple functions with the following names in `$DIR/execution/execution-correctness/src/serializer.rs`: {
    "request",
}
Warning: Found multiple functions with the following names in `$DIR/execution/executor/src/lib.rs`: {
    "committed_block_id",
}
Warning: Found multiple functions with the following names in `$DIR/json-rpc/types/src/stream/request.rs`: {
    "method_name",
}
Warning: Found multiple functions with the following names in `$DIR/language/borrow-graph/src/references.rs`: {
    "remap_refs",
}
Warning: Found multiple functions with the following names in `$DIR/language/bytecode-verifier/src/type_safety.rs`: {
    "local_at",
}
Warning: Found multiple functions with the following names in `$DIR/language/compiler/bytecode-source-map/src/marking.rs`: {
    "type_param",
}
Warning: Found multiple functions with the following names in `$DIR/language/compiler/bytecode-source-map/src/source_map.rs`: {
    "add_code_mapping",
    "add_local_mapping",
    "add_nop_mapping",
    "add_parameter_mapping",
    "add_type_parameter",
    "get_code_location",
    "get_parameter_or_local_name",
    "get_type_parameter_name",
}
Warning: Found multiple functions with the following names in `$DIR/language/diem-framework/releases/src/legacy/transaction_scripts.rs`: {
    "hash",
}
Warning: Found multiple functions with the following names in `$DIR/language/diem-vm/mvhashmap/src/lib.rs`: {
    "read",
    "skip",
    "write",
}
Warning: Found multiple functions with the following names in `$DIR/language/diem-vm/src/data_cache.rs`: {
    "get",
    "get_module",
    "get_resource",
}
Warning: Found multiple functions with the following names in `$DIR/language/move-binary-format/src/control_flow_graph.rs`: {
    "display",
}
Warning: Found multiple functions with the following names in `$DIR/language/move-binary-format/src/deserializer.rs`: {
    "get_address_identifiers",
    "get_constant_pool",
    "get_function_handles",
    "get_function_instantiations",
    "get_identifiers",
    "get_module_handles",
    "get_signatures",
    "get_struct_handles",
}
Warning: Found multiple functions with the following names in `$DIR/language/move-binary-format/src/file_format_common.rs`: {
    "read_u32",
    "read_u8",
    "read_uleb128_as_u64",
}
Warning: Found multiple functions with the following names in `$DIR/language/move-binary-format/src/proptest_types/functions.rs`: {
    "add_signature",
    "materialize",
    "signatures",
}
Warning: Found multiple functions with the following names in `$DIR/language/move-binary-format/src/proptest_types/signature.rs`: {
    "materialize",
}
Warning: Found multiple functions with the following names in `$DIR/language/move-binary-format/src/proptest_types/types.rs`: {
    "materialize",
}
Warning: Found multiple functions with the following names in `$DIR/language/move-binary-format/src/serializer.rs`: {
    "get_address_identifiers",
    "get_constant_pool",
    "get_function_handles",
    "get_function_instantiations",
    "get_identifiers",
    "get_module_handles",
    "get_signatures",
    "get_struct_handles",
    "serialize_table_indices",
}
Warning: Found multiple functions with the following names in `$DIR/language/move-binary-format/src/views.rs`: {
    "abilities",
    "arg_count",
    "arg_tokens",
    "clone",
    "is_native",
    "len",
    "module_handle",
    "name",
    "parameters",
    "return_",
    "return_count",
    "return_tokens",
    "signature_token",
    "type_parameters",
}
Warning: Found multiple functions with the following names in `$DIR/language/move-core/types/src/abi.rs`: {
    "args",
    "doc",
    "name",
    "ty_args",
}
Warning: Found multiple functions with the following names in `$DIR/language/move-core/types/src/effects.rs`: {
    "publish_module",
    "publish_or_overwrite_module",
    "publish_or_overwrite_resource",
    "publish_resource",
    "squash",
    "unpublish_module",
    "unpublish_resource",
}
Warning: Found multiple functions with the following names in `$DIR/language/move-core/types/src/identifier.rs`: {
    "is_valid",
}
Warning: Found multiple functions with the following names in `$DIR/language/move-core/types/src/parser.rs`: {
    "parse_type_tag",
}
Warning: Found multiple functions with the following names in `$DIR/language/move-core/types/src/value.rs`: {
    "deserialize",
    "serialize",
}
Warning: Found multiple functions with the following names in `$DIR/language/move-core/types/src/vm_status.rs`: {
    "status_type",
}
Warning: Found multiple functions with the following names in `$DIR/language/move-ir/types/src/ast.rs`: {
    "get_external_deps",
    "name",
}
Warning: Found multiple functions with the following names in `$DIR/language/move-ir/types/src/location.rs`: {
    "cmp",
    "partial_cmp",
}
Warning: Found multiple functions with the following names in `$DIR/language/move-lang/src/cfgir/ast.rs`: {
    "ast_debug",
}
Warning: Found multiple functions with the following names in `$DIR/language/move-lang/src/cfgir/cfg.rs`: {
    "ast_debug",
    "block",
    "blocks",
    "successors",
}
Warning: Found multiple functions with the following names in `$DIR/language/move-lang/src/cfgir/liveness/mod.rs`: {
    "command",
    "exp",
    "exp_list_item",
    "lvalue",
    "lvalues",
}
Warning: Found multiple functions with the following names in `$DIR/language/move-lang/src/command_line/compiler.rs`: {
    "run",
}
Warning: Found multiple functions with the following names in `$DIR/language/move-lang/src/expansion/aliases.rs`: {
    "is_empty",
}
Warning: Found multiple functions with the following names in `$DIR/language/move-lang/src/expansion/ast.rs`: {
    "ast_debug",
    "into_iter",
    "next",
    "size_hint",
}
Warning: Found multiple functions with the following names in `$DIR/language/move-lang/src/hlir/ast.rs`: {
    "abilities",
    "ast_debug",
    "is_unit",
}
Warning: Found multiple functions with the following names in `$DIR/language/move-lang/src/naming/ast.rs`: {
    "ast_debug",
}
Warning: Found multiple functions with the following names in `$DIR/language/move-lang/src/parser/ast.rs`: {
    "ast_debug",
}
Warning: Found multiple functions with the following names in `$DIR/language/move-lang/src/shared/ast_debug.rs`: {
    "ast_debug",
}
Warning: Found multiple functions with the following names in `$DIR/language/move-lang/src/shared/remembering_unique_map.rs`: {
    "into_iter",
    "next",
    "size_hint",
}
Warning: Found multiple functions with the following names in `$DIR/language/move-lang/src/shared/unique_map.rs`: {
    "into_iter",
    "next",
}
Warning: Found multiple functions with the following names in `$DIR/language/move-lang/src/shared/unique_set.rs`: {
    "into_iter",
    "next",
}
Warning: Found multiple functions with the following names in `$DIR/language/move-lang/src/typing/ast.rs`: {
    "ast_debug",
}
Warning: Found multiple functions with the following names in `$DIR/language/move-model/src/ast.rs`: {
    "any",
    "display",
    "uses_memory",
}
Warning: Found multiple functions with the following names in `$DIR/language/move-model/src/model.rs`: {
    "default",
    "display",
    "get_doc",
    "get_full_name_str",
    "get_id",
    "get_identifier",
    "get_loc",
    "get_name",
    "get_name_for_display",
    "get_qualified_id",
    "get_spec",
    "get_struct",
    "get_type_parameters",
    "instantiate",
    "is_native",
    "is_pragma_true",
    "matches_name",
    "symbol_pool",
}
Warning: Found multiple functions with the following names in `$DIR/language/move-model/src/ty.rs`: {
    "into_normalized_type",
    "is_spec",
    "unify",
}
Warning: Found multiple functions with the following names in `$DIR/language/move-prover/boogie-backend/src/bytecode_translator.rs`: {
    "inst",
    "translate",
}
Warning: Found multiple functions with the following names in `$DIR/language/move-prover/bytecode/src/access_path.rs`: {
    "add_offset",
    "add_struct_offset",
    "get_type",
    "is_constant",
    "is_statically_known",
    "prepend",
    "substitute_footprint",
}
Warning: Found multiple functions with the following names in `$DIR/language/move-prover/bytecode/src/access_path_trie.rs`: {
    "iter_offsets",
    "iter_paths_opt",
    "iter_values",
    "join",
    "keys_statically_known",
    "substitute_footprint",
}
Warning: Found multiple functions with the following names in `$DIR/language/move-prover/bytecode/src/dataflow_domains.rs`: {
    "as_ref",
    "into_iter",
    "join",
}
Warning: Found multiple functions with the following names in `$DIR/language/move-prover/bytecode/src/read_write_set_analysis.rs`: {
    "join",
    "normalize",
}
Warning: Found multiple functions with the following names in `$DIR/language/move-prover/bytecode/src/stackless_bytecode.rs`: {
    "display",
    "instantiate",
}
Warning: Found multiple functions with the following names in `$DIR/language/move-prover/bytecode/src/usage_analysis.rs`: {
    "join",
}
Warning: Found multiple functions with the following names in `$DIR/language/move-prover/interpreter/src/concrete/ty.rs`: {
    "fmt",
    "is_compatible_for_arithmetic",
    "is_compatible_for_assign",
    "is_compatible_for_bitshift",
    "is_compatible_for_bitwise",
    "is_compatible_for_comparison",
    "is_compatible_for_constant",
    "is_int",
}
Warning: Found multiple functions with the following names in `$DIR/language/move-prover/interpreter/src/concrete/value.rs`: {
    "del_resource",
    "get_resource",
    "has_resource",
    "into_address",
    "into_bool",
    "into_int",
    "into_num",
    "into_signer",
    "into_struct",
    "into_u128",
    "into_u64",
    "into_u8",
    "into_vector",
    "put_resource",
}
Warning: Found multiple functions with the following names in `$DIR/language/move-symbol-pool/src/symbol.rs`: {
    "fmt",
}
Warning: Found multiple functions with the following names in `$DIR/language/move-vm/runtime/src/interpreter.rs`: {
    "pop",
    "push",
}
Warning: Found multiple functions with the following names in `$DIR/language/move-vm/runtime/src/loader.rs`: {
    "field_count",
    "field_instantiation_count",
    "field_instantiation_offset",
    "field_offset",
    "function_at",
    "function_instantiation_at",
    "get",
    "insert",
    "single_type_at",
    "struct_at",
    "type_to_type_layout",
}
Warning: Found multiple functions with the following names in `$DIR/language/move-vm/test-utils/src/storage.rs`: {
    "apply",
    "get_module",
    "get_resource",
}
Warning: Found multiple functions with the following names in `$DIR/language/move-vm/types/src/values/values_impl.rs`: {
    "as_move_value",
    "borrow_elem",
    "borrow_global",
    "copy_value",
    "deserialize",
    "equals",
    "exists",
    "into_effect",
    "is_mutated",
    "len",
    "move_from",
    "move_to",
    "read_ref",
    "serialize",
    "size",
    "unpack",
    "value_as",
    "write_ref",
}
Warning: Found multiple functions with the following names in `$DIR/language/testing-infra/e2e-tests/src/account.rs`: {
    "address",
    "make_account_access_path",
    "make_balance_access_path",
    "make_event_generator_access_path",
    "rotate_key",
    "to_value",
}
Warning: Found multiple functions with the following names in `$DIR/language/testing-infra/e2e-tests/src/account_universe/universe.rs`: {
    "pick",
}
Warning: Found multiple functions with the following names in `$DIR/language/testing-infra/e2e-tests/src/execution_strategies/guided_strategy.rs`: {
    "partition",
}
Warning: Found multiple functions with the following names in `$DIR/language/testing-infra/functional-tests/src/checker/matcher.rs`: {
    "is_failure",
    "is_success",
}
Warning: Found multiple functions with the following names in `$DIR/language/testing-infra/functional-tests/src/common.rs`: {
    "as_inner",
}
Warning: Found multiple functions with the following names in `$DIR/language/tools/move-cli/src/sandbox/utils/on_disk_state_view.rs`: {
    "to_string",
}
Warning: Found multiple functions with the following names in `$DIR/language/tools/move-coverage/src/coverage_map.rs`: {
    "insert",
    "insert_multi",
    "merge",
}
Warning: Found multiple functions with the following names in `$DIR/language/tools/read-write-set/types/src/lib.rs`: {
    "sub_type_actuals",
}
Warning: Found multiple functions with the following names in `$DIR/language/tools/resource-viewer/src/fat_type.rs`: {
    "subst",
    "try_into",
}
Warning: Found multiple functions with the following names in `$DIR/language/tools/resource-viewer/src/lib.rs`: {
    "serialize",
}
Warning: Found multiple functions with the following names in `$DIR/mempool/src/core_mempool/index.rs`: {
    "cmp",
    "contains",
    "insert",
    "make_key",
    "remove",
}
Warning: Found multiple functions with the following names in `$DIR/mempool/src/tests/node.rs`: {
    "get_next_network_req",
    "peer_role",
    "primary_network",
    "primary_peer_id",
    "role",
    "secondary_network",
    "secondary_peer_id",
    "send_network_req",
}
Warning: Found multiple functions with the following names in `$DIR/network/netcore/src/transport/boxed.rs`: {
    "dial",
    "listen_on",
}
Warning: Found multiple functions with the following names in `$DIR/network/src/connectivity_manager/mod.rs`: {
    "clear_src",
    "is_empty",
    "len",
    "union",
    "update",
}
Warning: Found multiple functions with the following names in `$DIR/network/src/noise/stream.rs`: {
    "poll_flush",
    "poll_read",
    "poll_write",
}
Warning: Found multiple functions with the following names in `$DIR/network/src/peer_manager/builder.rs`: {
    "add_connection_event_listener",
}
Warning: Found multiple functions with the following names in `$DIR/network/src/testutils/fake_socket.rs`: {
    "poll_close",
    "poll_flush",
    "poll_read",
    "set_fragmented_read",
    "set_trailing",
}
Warning: Found multiple functions with the following names in `$DIR/network/src/transport/mod.rs`: {
    "dial",
    "listen_on",
}
Warning: Found multiple functions with the following names in `$DIR/sdk/offchain/src/payment_command.rs`: {
    "counterparty_actor",
}
Warning: Found multiple functions with the following names in `$DIR/sdk/offchain/src/types.rs`: {
    "validate_write_once_fields",
}
Warning: Found multiple functions with the following names in `$DIR/sdk/src/transaction_builder.rs`: {
    "eq",
}
Warning: Found multiple functions with the following names in `$DIR/sdk/src/types.rs`: {
    "authentication_key",
    "private_key",
    "public_key",
}
Warning: Found multiple functions with the following names in `$DIR/secure/key-manager/src/tests.rs`: {
    "diem_timestamp",
    "last_reconfiguration",
    "retrieve_account_state",
    "retrieve_sequence_number",
    "retrieve_validator_config",
    "retrieve_validator_info",
    "submit_transaction",
}
Warning: Found multiple functions with the following names in `$DIR/secure/net/src/lib.rs`: {
    "as_str",
    "increment_counter",
    "read",
    "shutdown",
    "write",
}
Warning: Found multiple functions with the following names in `$DIR/secure/storage/src/namespaced.rs`: {
    "get",
}
Warning: Found multiple functions with the following names in `$DIR/secure/storage/src/vault.rs`: {
    "available",
    "client",
    "create_key",
    "crypto_name",
    "export_private_key",
    "export_private_key_for_version",
    "get",
    "get_public_key",
    "get_public_key_previous_version",
    "import_private_key",
    "reset_and_clear",
    "rotate_key",
    "set",
    "sign",
    "sign_using_version",
}
Warning: Found multiple functions with the following names in `$DIR/state-sync/state-sync-v1/tests/test_harness.rs`: {
    "get_chunk",
    "get_epoch_ending_ledger_info",
    "get_local_storage_state",
    "move_to_next_epoch",
}
Warning: Found multiple functions with the following names in `$DIR/storage/accumulator/src/lib.rs`: {
    "append",
    "get_consistency_proof",
    "get_frozen_subtree_hashes",
    "get_proof",
    "get_range_proof",
    "get_range_proof_positions",
    "get_root_hash",
}
Warning: Found multiple functions with the following names in `$DIR/storage/backup/backup-cli/src/backup_types/epoch_ending/restore.rs`: {
    "name",
    "run",
    "run_impl",
}
Warning: Found multiple functions with the following names in `$DIR/storage/backup/backup-cli/src/backup_types/transaction/restore.rs`: {
    "run",
}
Warning: Found multiple functions with the following names in `$DIR/storage/backup/backup-cli/src/storage/command_adapter/command.rs`: {
    "spawn",
}
Warning: Found multiple functions with the following names in `$DIR/storage/diem-scratchpad/benches/sparse_merkle.rs`: {
    "run",
}
Warning: Found multiple functions with the following names in `$DIR/storage/diem-scratchpad/src/sparse_merkle/mod.rs`: {
    "spawn",
}
Warning: Found multiple functions with the following names in `$DIR/storage/diem-scratchpad/src/sparse_merkle/node.rs`: {
    "calc_hash",
    "weak",
}
Warning: Found multiple functions with the following names in `$DIR/storage/diem-scratchpad/src/sparse_merkle/test_utils/naive_smt.rs`: {
    "get_proof",
}
Warning: Found multiple functions with the following names in `$DIR/storage/diem-scratchpad/src/sparse_merkle/updater.rs`: {
    "into_children",
}
Warning: Found multiple functions with the following names in `$DIR/storage/diemdb/src/event_store/mod.rs`: {
    "get",
}
Warning: Found multiple functions with the following names in `$DIR/storage/diemdb/src/ledger_counters/mod.rs`: {
    "get",
}
Warning: Found multiple functions with the following names in `$DIR/storage/diemdb/src/ledger_store/mod.rs`: {
    "next",
    "next_impl",
}
Warning: Found multiple functions with the following names in `$DIR/storage/diemdb/src/lib.rs`: {
    "get_epoch_ending_ledger_infos",
    "update_rocksdb_properties",
}
Warning: Found multiple functions with the following names in `$DIR/storage/diemdb/src/transaction_store/mod.rs`: {
    "next",
    "next_impl",
}
Warning: Found multiple functions with the following names in `$DIR/storage/jellyfish-merkle/src/node_type/mod.rs`: {
    "hash",
}
Warning: Found multiple functions with the following names in `$DIR/storage/schemadb/src/lib.rs`: {
    "put",
}
Warning: Found multiple functions with the following names in `$DIR/testsuite/cli/diem-wallet/src/wallet_library.rs`: {
    "sign_txn",
}
Warning: Found multiple functions with the following names in `$DIR/testsuite/cluster-test/src/prometheus.rs`: {
    "avg",
}
Warning: Found multiple functions with the following names in `$DIR/testsuite/cluster-test/src/tx_emitter.rs`: {
    "query_sequence_numbers",
}
Warning: Found multiple functions with the following names in `$DIR/testsuite/diem-fuzzer/src/fuzz_targets/storage.rs`: {
    "generate",
}
Warning: Found multiple functions with the following names in `$DIR/testsuite/diem-fuzzer/src/fuzz_targets/transaction.rs`: {
    "generate",
}
Warning: Found multiple functions with the following names in `$DIR/testsuite/forge/src/backend/local/node.rs`: {
    "config",
    "health_check",
    "name",
    "peer_id",
    "start",
    "stop",
}
Warning: Found multiple functions with the following names in `$DIR/testsuite/forge/src/interface/public.rs`: {
    "create_designated_dealer_account",
    "create_parent_vasp_account",
    "fund",
}
Warning: Found multiple functions with the following names in `$DIR/testsuite/forge-cli/src/main.rs`: {
    "name",
}
Warning: Found multiple functions with the following names in `$DIR/types/src/account_config/resources/vasp_domain.rs`: {
    "domain",
}
Warning: Found multiple functions with the following names in `$DIR/types/src/chain_id.rs`: {
    "id",
}
Warning: Found multiple functions with the following names in `$DIR/types/src/contract_event.rs`: {
    "verify",
}
Warning: Found multiple functions with the following names in `$DIR/types/src/ledger_info.rs`: {
    "commit_info",
}
Warning: Found multiple functions with the following names in `$DIR/types/src/network_address/mod.rs`: {
    "fmt",
}
Warning: Found multiple functions with the following names in `$DIR/types/src/nibble/nibble_path/mod.rs`: {
    "next",
    "num_nibbles",
    "peek",
}
Warning: Found multiple functions with the following names in `$DIR/types/src/proof/definition.rs`: {
    "left_siblings",
    "verify",
}
Warning: Found multiple functions with the following names in `$DIR/types/src/proptest_types.rs`: {
    "materialize",
}
Warning: Found multiple functions with the following names in `$DIR/types/src/transaction/authenticator.rs`: {
    "verify",
}
Warning: Found multiple functions with the following names in `$DIR/types/src/transaction/mod.rs`: {
    "format_for_client",
    "into_raw_transaction",
    "is_empty",
    "len",
    "sender",
    "should_trigger_reconfiguration_by_default",
    "verify",
}
Warning: Found multiple functions with the following names in `$DIR/types/src/waypoint.rs`: {
    "verify",
}
Warning: Found multiple functions with the following names in `$DIR/types/src/write_set.rs`: {
    "into_iter",
    "is_empty",
}
$DIR/config/generate-key/src/lib.rs: `file.write_all(&encoded)
        .expect("Unable to write key to file at specified path");`
$DIR/config/generate-key/src/lib.rs: `path.create_as_file().unwrap();`
$DIR/config/generate-key/src/lib.rs: `.gen()`
$DIR/config/generate-key/src/lib.rs: `.exists()`
$DIR/config/generate-key/src/lib.rs: `.is_file()`
$DIR/config/generate-key/src/lib.rs: `.write_all(&encoded)`
$DIR/config/generate-key/src/lib.rs: `.create_as_file()`
$DIR/config/generate-key/src/lib.rs: `.path()`
$DIR/config/generate-key/src/lib.rs: `.path()`
$DIR/config/management/genesis/src/command.rs: `temppath.create_as_file().unwrap();`
$DIR/config/management/genesis/src/command.rs: `file.write_all(&layout_text.to_string().into_bytes())
            .unwrap();`
$DIR/config/management/genesis/src/command.rs: `file.sync_all().unwrap();`
$DIR/config/management/genesis/src/command.rs: `helper
            .set_layout(temppath.path().to_str().unwrap())
            .unwrap();`
$DIR/config/management/genesis/src/command.rs: `tempdir.create_as_dir().unwrap();`
$DIR/config/management/genesis/src/command.rs: `temppath.create_as_file().unwrap();`
$DIR/config/management/genesis/src/command.rs: `temppath.persist();`
$DIR/config/management/genesis/src/command.rs: `file.write_all(b).unwrap();`
$DIR/config/management/genesis/src/command.rs: `file.sync_all().unwrap();`
$DIR/config/management/genesis/src/command.rs: `helper
            .set_move_modules(tempdir.path().to_str().unwrap())
            .unwrap();`
$DIR/config/management/genesis/src/command.rs: `helper.initialize_by_idx(dave_ns.into(), storage_idx);`
$DIR/config/management/genesis/src/command.rs: `helper
            .diem_root_key(dave_ns, &(dave_ns.to_string() + shared))
            .unwrap();`
$DIR/config/management/genesis/src/command.rs: `helper
            .treasury_compliance_key(dave_ns, &(dave_ns.to_string() + shared))
            .unwrap();`
$DIR/config/management/genesis/src/command.rs: `storage_idx += 1;`
$DIR/config/management/genesis/src/command.rs: `helper.initialize_by_idx(ns.clone(), storage_idx);`
$DIR/config/management/genesis/src/command.rs: `helper.owner_key(&ns, &ns_shared).unwrap();`
$DIR/config/management/genesis/src/command.rs: `storage_idx += 1;`
$DIR/config/management/genesis/src/command.rs: `helper.initialize_by_idx(ns.clone(), storage_idx);`
$DIR/config/management/genesis/src/command.rs: `helper.operator_key(&ns, &ns_shared).unwrap();`
$DIR/config/management/genesis/src/command.rs: `helper.set_operator(&operator_name, &ns_shared).unwrap();`
$DIR/config/management/genesis/src/command.rs: `helper
                .validator_config(
                    &owner_name,
                    "/ip4/0.0.0.0/tcp/6180".parse().unwrap(),
                    "/ip4/0.0.0.0/tcp/6180".parse().unwrap(),
                    ChainId::test(),
                    &ns,
                    &ns_shared,
                )
                .unwrap();`
$DIR/config/management/genesis/src/command.rs: `genesis_path.create_as_file().unwrap();`
$DIR/config/management/genesis/src/command.rs: `helper
            .genesis(ChainId::test(), genesis_path.path())
            .unwrap();`
$DIR/config/management/genesis/src/command.rs: `file.read_to_end(&mut contents).unwrap();`
$DIR/config/management/genesis/src/command.rs: `helper.insert_waypoint(ns, waypoint).unwrap();`
$DIR/config/management/genesis/src/command.rs: `helper.verify_genesis(ns, genesis_path.path()).unwrap();`
$DIR/config/management/genesis/src/command.rs: `helper
            .set_layout(temppath.path().to_str().unwrap())
            .unwrap_err();`
$DIR/config/management/genesis/src/command.rs: `temppath.create_as_file().unwrap();`
$DIR/config/management/genesis/src/command.rs: `file.write_all(&layout_text.to_string().into_bytes())
            .unwrap();`
$DIR/config/management/genesis/src/command.rs: `file.sync_all().unwrap();`
$DIR/config/management/genesis/src/command.rs: `helper
            .set_layout(temppath.path().to_str().unwrap())
            .unwrap();`
$DIR/config/management/genesis/src/command.rs: `storage_helper.initialize_by_idx(local_operator_ns.into(), 0);`
$DIR/config/management/genesis/src/command.rs: `shared_storage
            .set(OWNER_KEY, owner_key)
            .map_err(|e| Error::StorageWriteError("shared", OWNER_KEY, e.to_string()))
            .unwrap();`
$DIR/config/management/genesis/src/command.rs: `storage_helper.initialize_by_idx(local_owner_ns.into(), 0);`
$DIR/config/management/genesis/src/command.rs: `shared_storage
            .set(OPERATOR_KEY, operator_key)
            .map_err(|e| Error::StorageWriteError("shared", OPERATOR_KEY, e.to_string()))
            .unwrap();`
$DIR/config/management/genesis/src/command.rs: `helper.initialize_by_idx(namespace.into(), 0);`
$DIR/config/management/genesis/src/command.rs: `.create_as_file()`
$DIR/config/management/genesis/src/command.rs: `.path()`
$DIR/config/management/genesis/src/command.rs: `.write_all(&layout_text.to_string().into_bytes())`
$DIR/config/management/genesis/src/command.rs: `.sync_all()`
$DIR/config/management/genesis/src/command.rs: `.path()`
$DIR/config/management/genesis/src/command.rs: `.to_str()`
$DIR/config/management/genesis/src/command.rs: `.create_as_dir()`
$DIR/config/management/genesis/src/command.rs: `.path()`
$DIR/config/management/genesis/src/command.rs: `.create_as_file()`
$DIR/config/management/genesis/src/command.rs: `.persist()`
$DIR/config/management/genesis/src/command.rs: `.path()`
$DIR/config/management/genesis/src/command.rs: `.write_all(b)`
$DIR/config/management/genesis/src/command.rs: `.sync_all()`
$DIR/config/management/genesis/src/command.rs: `.path()`
$DIR/config/management/genesis/src/command.rs: `.to_str()`
$DIR/config/management/genesis/src/command.rs: `.initialize_by_idx(dave_ns.into(), storage_idx)`
$DIR/config/management/genesis/src/command.rs: `.into()`
$DIR/config/management/genesis/src/command.rs: `.initialize_by_idx(ns.clone(), storage_idx)`
$DIR/config/management/genesis/src/command.rs: `.initialize_by_idx(ns.clone(), storage_idx)`
$DIR/config/management/genesis/src/command.rs: `.chars()`
$DIR/config/management/genesis/src/command.rs: `.skip(9)`
$DIR/config/management/genesis/src/command.rs: `.collect()`
$DIR/config/management/genesis/src/command.rs: `.parse()`
$DIR/config/management/genesis/src/command.rs: `.parse()`
$DIR/config/management/genesis/src/command.rs: `.create_as_file()`
$DIR/config/management/genesis/src/command.rs: `.path()`
$DIR/config/management/genesis/src/command.rs: `.path()`
$DIR/config/management/genesis/src/command.rs: `.read_to_end(&mut contents)`
$DIR/config/management/genesis/src/command.rs: `.verify_genesis(ns, genesis_path.path())`
$DIR/config/management/genesis/src/command.rs: `.path()`
$DIR/config/management/genesis/src/command.rs: `.path()`
$DIR/config/management/genesis/src/command.rs: `.to_str()`
$DIR/config/management/genesis/src/command.rs: `.create_as_file()`
$DIR/config/management/genesis/src/command.rs: `.path()`
$DIR/config/management/genesis/src/command.rs: `.write_all(&layout_text.to_string().into_bytes())`
$DIR/config/management/genesis/src/command.rs: `.sync_all()`
$DIR/config/management/genesis/src/command.rs: `.path()`
$DIR/config/management/genesis/src/command.rs: `.to_str()`
$DIR/config/management/genesis/src/command.rs: `.storage(constants::COMMON_NS.into())`
$DIR/config/management/genesis/src/command.rs: `.into()`
$DIR/config/management/genesis/src/command.rs: `.get::<String>(constants::LAYOUT)`
$DIR/config/management/genesis/src/command.rs: `.initialize_by_idx(local_operator_ns.into(), 0)`
$DIR/config/management/genesis/src/command.rs: `.into()`
$DIR/config/management/genesis/src/command.rs: `.public_key()`
$DIR/config/management/genesis/src/command.rs: `.storage(owner_name.into())`
$DIR/config/management/genesis/src/command.rs: `.into()`
$DIR/config/management/genesis/src/command.rs: `.set(OWNER_KEY, owner_key)`
$DIR/config/management/genesis/src/command.rs: `.map_err(|e| Error::StorageWriteError("shared", OWNER_KEY, e.to_string()))`
$DIR/config/management/genesis/src/command.rs: `.parse()`
$DIR/config/management/genesis/src/command.rs: `.parse()`
$DIR/config/management/genesis/src/command.rs: `.storage(remote_operator_ns.into())`
$DIR/config/management/genesis/src/command.rs: `.into()`
$DIR/config/management/genesis/src/command.rs: `.get::<Transaction>(constants::VALIDATOR_CONFIG)`
$DIR/config/management/genesis/src/command.rs: `.as_signed_user_txn()`
$DIR/config/management/genesis/src/command.rs: `.payload()`
$DIR/config/management/genesis/src/command.rs: `.args()`
$DIR/config/management/genesis/src/command.rs: `.get(0)`
$DIR/config/management/genesis/src/command.rs: `.initialize_by_idx(local_owner_ns.into(), 0)`
$DIR/config/management/genesis/src/command.rs: `.into()`
$DIR/config/management/genesis/src/command.rs: `.public_key()`
$DIR/config/management/genesis/src/command.rs: `.storage(operator_name.into())`
$DIR/config/management/genesis/src/command.rs: `.into()`
$DIR/config/management/genesis/src/command.rs: `.set(OPERATOR_KEY, operator_key)`
$DIR/config/management/genesis/src/command.rs: `.map_err(|e| Error::StorageWriteError("shared", OPERATOR_KEY, e.to_string()))`
$DIR/config/management/genesis/src/command.rs: `.storage(remote_owner_ns.into())`
$DIR/config/management/genesis/src/command.rs: `.into()`
$DIR/config/management/genesis/src/command.rs: `.get::<String>(constants::VALIDATOR_OPERATOR)`
$DIR/config/management/genesis/src/command.rs: `.split("Key not set")`
$DIR/config/management/genesis/src/command.rs: `.count()`
$DIR/config/management/genesis/src/command.rs: `.initialize_by_idx(namespace.into(), 0)`
$DIR/config/management/genesis/src/command.rs: `.into()`
$DIR/config/management/genesis/src/command.rs: `.split("Key not set")`
$DIR/config/management/genesis/src/command.rs: `.count()`
$DIR/config/management/genesis/src/key.rs: `op(&helper, &local_ns, &remote_ns).unwrap_err();`
$DIR/config/management/genesis/src/key.rs: `helper.initialize_by_idx(local_ns.clone(), 0);`
$DIR/config/management/genesis/src/key.rs: `.initialize_by_idx(local_ns.clone(), 0)`
$DIR/config/management/genesis/src/key.rs: `.storage(local_ns.clone())`
$DIR/config/management/genesis/src/key.rs: `.get_public_key(key_name)`
$DIR/config/management/genesis/src/key.rs: `.storage(remote_ns)`
$DIR/config/management/genesis/src/key.rs: `.get::<Ed25519PublicKey>(key_name)`
$DIR/config/management/network-address-encryption/src/lib.rs: `keys.keys.insert(version, StorageKey(key));`
$DIR/config/management/network-address-encryption/src/lib.rs: `keys.current = version;`
$DIR/config/management/network-address-encryption/src/lib.rs: `enc_addrs.push(addr.encrypt(&key.0, keys.current, &account, seq_num, idx as u32)?);`
$DIR/config/management/network-address-encryption/src/lib.rs: `addrs.push(addr);`
$DIR/config/management/network-address-encryption/src/lib.rs: `*self.cached_keys.write() = Some(keys.clone());`
$DIR/config/management/network-address-encryption/src/lib.rs: `encryptor.initialize().unwrap();`
$DIR/config/management/network-address-encryption/src/lib.rs: `rng.fill_bytes(&mut key);`
$DIR/config/management/network-address-encryption/src/lib.rs: `encryptor.add_key(0, key).unwrap();`
$DIR/config/management/network-address-encryption/src/lib.rs: `encryptor.set_current_version(0).unwrap();`
$DIR/config/management/network-address-encryption/src/lib.rs: `rng.fill_bytes(&mut key);`
$DIR/config/management/network-address-encryption/src/lib.rs: `encryptor.add_key(1, key).unwrap();`
$DIR/config/management/network-address-encryption/src/lib.rs: `encryptor.set_current_version(1).unwrap();`
$DIR/config/management/network-address-encryption/src/lib.rs: `rng.fill_bytes(&mut key);`
$DIR/config/management/network-address-encryption/src/lib.rs: `encryptor.add_key(4, key).unwrap();`
$DIR/config/management/network-address-encryption/src/lib.rs: `encryptor.set_current_version(4).unwrap();`
$DIR/config/management/network-address-encryption/src/lib.rs: `encryptor.set_current_version(5).unwrap_err();`
$DIR/config/management/network-address-encryption/src/lib.rs: `encryptor.storage = Storage::from(InMemoryStorage::new());`
$DIR/config/management/network-address-encryption/src/lib.rs: `*encryptor.cached_keys.write() = None;`
$DIR/config/management/network-address-encryption/src/lib.rs: `encryptor.encrypt(&addrs, account, 1).unwrap_err();`
$DIR/config/management/network-address-encryption/src/lib.rs: `encryptor.initialize().unwrap();`
$DIR/config/management/network-address-encryption/src/lib.rs: `rng.fill_bytes(&mut key);`
$DIR/config/management/network-address-encryption/src/lib.rs: `encryptor.add_key(0, key).unwrap();`
$DIR/config/management/network-address-encryption/src/lib.rs: `.keys.insert(version, StorageKey(key))`
$DIR/config/management/network-address-encryption/src/lib.rs: `.keys.get(&version)`
$DIR/config/management/network-address-encryption/src/lib.rs: `.is_some()`
$DIR/config/management/network-address-encryption/src/lib.rs: `.keys
            .get(&keys.current)`
$DIR/config/management/network-address-encryption/src/lib.rs: `.ok_or(Error::VersionNotFound(keys.current))`
$DIR/config/management/network-address-encryption/src/lib.rs: `.enumerate()`
$DIR/config/management/network-address-encryption/src/lib.rs: `.push(addr.encrypt(&key.0, keys.current, &account, seq_num, idx as u32)?)`
$DIR/config/management/network-address-encryption/src/lib.rs: `.encrypt(&key.0, keys.current, &account, seq_num, idx as u32)`
$DIR/config/management/network-address-encryption/src/lib.rs: `.into()`
$DIR/config/management/network-address-encryption/src/lib.rs: `.map_err(|e| Error::AddressDeserialization(account, e.to_string()))`
$DIR/config/management/network-address-encryption/src/lib.rs: `.enumerate()`
$DIR/config/management/network-address-encryption/src/lib.rs: `.keys
                .get(&enc_addr.key_version())`
$DIR/config/management/network-address-encryption/src/lib.rs: `.key_version()`
$DIR/config/management/network-address-encryption/src/lib.rs: `.ok_or_else(|| Error::VersionNotFound(enc_addr.key_version()))`
$DIR/config/management/network-address-encryption/src/lib.rs: `.key_version()`
$DIR/config/management/network-address-encryption/src/lib.rs: `.decrypt(&key.0, &account, idx as u32)`
$DIR/config/management/network-address-encryption/src/lib.rs: `.map_err(|e| Error::DecryptionError(account, e.to_string()))`
$DIR/config/management/network-address-encryption/src/lib.rs: `.push(addr)`
$DIR/config/management/network-address-encryption/src/lib.rs: `.storage
            .get::<ValidatorKeys>(VALIDATOR_NETWORK_ADDRESS_KEYS)`
$DIR/config/management/network-address-encryption/src/lib.rs: `.map(|v| v.value)`
$DIR/config/management/network-address-encryption/src/lib.rs: `.map_err(|e| e.into())`
$DIR/config/management/network-address-encryption/src/lib.rs: `.into()`
$DIR/config/management/network-address-encryption/src/lib.rs: `.cached_keys.write()`
$DIR/config/management/network-address-encryption/src/lib.rs: `.cached_keys.read()`
$DIR/config/management/network-address-encryption/src/lib.rs: `.storage
            .set(VALIDATOR_NETWORK_ADDRESS_KEYS, keys)`
$DIR/config/management/network-address-encryption/src/lib.rs: `.into()`
$DIR/config/management/network-address-encryption/src/lib.rs: `.gen()`
$DIR/config/management/network-address-encryption/src/lib.rs: `.fill_bytes(&mut key)`
$DIR/config/management/network-address-encryption/src/lib.rs: `.fill_bytes(&mut key)`
$DIR/config/management/network-address-encryption/src/lib.rs: `.fill_bytes(&mut key)`
$DIR/config/management/network-address-encryption/src/lib.rs: `.gen()`
$DIR/config/management/network-address-encryption/src/lib.rs: `.fill_bytes(&mut key)`
$DIR/config/management/src/config.rs: `.id()`
$DIR/config/management/src/secure_backend.rs: `config.set_data_dir(PathBuf::from(""));`
$DIR/config/management/src/secure_backend.rs: `config.path = PathBuf::from(path);`
$DIR/config/management/src/secure_backend.rs: `config.namespace = self.parameters.remove("namespace");`
$DIR/config/management/src/secure_backend.rs: `storage(memory).unwrap();`
$DIR/config/management/src/secure_backend.rs: `path.create_as_file().unwrap();`
$DIR/config/management/src/secure_backend.rs: `storage(&disk).unwrap();`
$DIR/config/management/src/secure_backend.rs: `path.create_as_file().unwrap();`
$DIR/config/management/src/secure_backend.rs: `file.write_all(b"disk_token").unwrap();`
$DIR/config/management/src/secure_backend.rs: `storage(&github).unwrap();`
$DIR/config/management/src/secure_backend.rs: `storage(&github).unwrap();`
$DIR/config/management/src/secure_backend.rs: `storage(&github).unwrap();`
$DIR/config/management/src/secure_backend.rs: `path.create_as_file().unwrap();`
$DIR/config/management/src/secure_backend.rs: `file.write_all(b"disk_token").unwrap();`
$DIR/config/management/src/secure_backend.rs: `storage(&vault).unwrap();`
$DIR/config/management/src/secure_backend.rs: `storage(&vault).unwrap();`
$DIR/config/management/src/secure_backend.rs: `.set_data_dir(PathBuf::from(""))`
$DIR/config/management/src/secure_backend.rs: `.parameters
                    .remove("path")`
$DIR/config/management/src/secure_backend.rs: `.ok_or_else(|| Error::BackendParsingError("missing path".into()))`
$DIR/config/management/src/secure_backend.rs: `.into()`
$DIR/config/management/src/secure_backend.rs: `.parameters.remove("namespace")`
$DIR/config/management/src/secure_backend.rs: `.parameters
                    .remove("repository_owner")`
$DIR/config/management/src/secure_backend.rs: `.ok_or_else(|| Error::BackendParsingError("missing repository owner".into()))`
$DIR/config/management/src/secure_backend.rs: `.into()`
$DIR/config/management/src/secure_backend.rs: `.parameters
                    .remove("repository")`
$DIR/config/management/src/secure_backend.rs: `.ok_or_else(|| Error::BackendParsingError("missing repository".into()))`
$DIR/config/management/src/secure_backend.rs: `.into()`
$DIR/config/management/src/secure_backend.rs: `.parameters.remove("branch")`
$DIR/config/management/src/secure_backend.rs: `.parameters
                    .remove("token")`
$DIR/config/management/src/secure_backend.rs: `.ok_or_else(|| Error::BackendParsingError("missing token".into()))`
$DIR/config/management/src/secure_backend.rs: `.into()`
$DIR/config/management/src/secure_backend.rs: `.parameters.remove("namespace")`
$DIR/config/management/src/secure_backend.rs: `.parameters.remove("ca_certificate")`
$DIR/config/management/src/secure_backend.rs: `.map(PathBuf::from)`
$DIR/config/management/src/secure_backend.rs: `.parameters
                    .remove("server")`
$DIR/config/management/src/secure_backend.rs: `.ok_or_else(|| Error::BackendParsingError("missing server".into()))`
$DIR/config/management/src/secure_backend.rs: `.into()`
$DIR/config/management/src/secure_backend.rs: `.parameters
                    .remove("token")`
$DIR/config/management/src/secure_backend.rs: `.ok_or_else(|| Error::BackendParsingError("missing token".into()))`
$DIR/config/management/src/secure_backend.rs: `.into()`
$DIR/config/management/src/secure_backend.rs: `.parameters.remove("namespace")`
$DIR/config/management/src/secure_backend.rs: `.parameters.is_empty()`
$DIR/config/management/src/secure_backend.rs: `.create_as_file()`
$DIR/config/management/src/secure_backend.rs: `.create_as_file()`
$DIR/config/management/src/secure_backend.rs: `.path()`
$DIR/config/management/src/secure_backend.rs: `.write_all(b"disk_token")`
$DIR/config/management/src/secure_backend.rs: `.path()`
$DIR/config/management/src/secure_backend.rs: `.to_str()`
$DIR/config/management/src/secure_backend.rs: `.create_as_file()`
$DIR/config/management/src/secure_backend.rs: `.path()`
$DIR/config/management/src/secure_backend.rs: `.write_all(b"disk_token")`
$DIR/config/management/src/secure_backend.rs: `.path()`
$DIR/config/management/src/secure_backend.rs: `.to_str()`
$DIR/config/management/src/validator_config.rs: `validate_address("no_port", &no_port).expect_err("Failed to check for port");`
$DIR/config/management/src/validator_config.rs: `validate_address("no_ip", &no_ip).expect_err("Failed to check for no IP");`
$DIR/config/management/src/validator_config.rs: `validate_address("ipv6", &ipv6).expect_err("Failed to check for ipv6");`
$DIR/config/management/src/validator_config.rs: `validate_address("ipv4_and_ipv6", &ipv4_and_ipv6).expect_err("Failed to check for ipv6");`
$DIR/config/management/src/validator_config.rs: `validate_address("bad_protocol", &bad_protocol)
            .expect_err("Failed to check for bad protocol");`
$DIR/config/management/src/validator_config.rs: `validate_address("ip", &ip).expect("IP failed to validate");`
$DIR/config/management/src/validator_config.rs: `.is_ok()`
$DIR/config/management/src/validator_config.rs: `.to_socket_addrs()`
$DIR/config/management/src/validator_config.rs: `.map_err(|err| {
        Error::CommandArgumentError(format!(
            "{}: Failed to resolve address '{}': {}",
            address_name, network_address, err
        ))
    })`
$DIR/config/management/src/validator_config.rs: `.len()`
$DIR/config/seed-peer-generator/src/utils.rs: `addresses.push(network_address);`
$DIR/config/seed-peer-generator/src/utils.rs: `expected_peers.insert(peer_id, Peer::from_addrs(role, fullnode_addresses));`
$DIR/config/seed-peer-generator/src/utils.rs: `.payload()`
$DIR/config/seed-peer-generator/src/utils.rs: `.filter_map(|validator_info| {
            to_seed_peer(validator_info, role, &to_addresses).map_or_else(
                |error| {
                    warn!(
                        "Unable to generate seed for validator {} {}",
                        validator_info.account_address(),
                        error
                    );
                    None
                },
                Some,
            )
        })`
$DIR/config/seed-peer-generator/src/utils.rs: `.collect::<PeerSet>()`
$DIR/config/seed-peer-generator/src/utils.rs: `.is_empty()`
$DIR/config/seed-peer-generator/src/utils.rs: `.account_address()`
$DIR/config/seed-peer-generator/src/utils.rs: `.public_key()`
$DIR/config/seed-peer-generator/src/utils.rs: `.public_key()`
$DIR/config/seed-peer-generator/src/utils.rs: `.append_prod_protos(pubkey, HANDSHAKE_VERSION)`
$DIR/config/seed-peer-generator/src/utils.rs: `.push(network_address)`
$DIR/config/seed-peer-generator/src/utils.rs: `.insert(peer_id, Peer::from_addrs(role, fullnode_addresses))`
$DIR/config/src/config/execution_config.rs: `file.read_to_end(&mut buffer)
                .map_err(|e| Error::IO("genesis".into(), e))?;`
$DIR/config/src/config/execution_config.rs: `self.genesis = Some(data);`
$DIR/config/src/config/execution_config.rs: `self.genesis_file_location = PathBuf::from(GENESIS_DEFAULT);`
$DIR/config/src/config/execution_config.rs: `file.write_all(&data)
                .map_err(|e| Error::IO("genesis".into(), e))?;`
$DIR/config/src/config/execution_config.rs: `config.genesis = Some(fake_genesis.clone());`
$DIR/config/src/config/execution_config.rs: `config.save(&root_dir).expect("Unable to save");`
$DIR/config/src/config/execution_config.rs: `config.genesis = None;`
$DIR/config/src/config/execution_config.rs: `temp_dir.create_as_dir().expect("error creating tempdir");`
$DIR/config/src/config/execution_config.rs: `.is_empty()`
$DIR/config/src/config/execution_config.rs: `.full_path(&self.genesis_file_location)`
$DIR/config/src/config/execution_config.rs: `.map_err(|e| Error::IO("genesis".into(), e))`
$DIR/config/src/config/execution_config.rs: `.into()`
$DIR/config/src/config/execution_config.rs: `.read_to_end(&mut buffer)`
$DIR/config/src/config/execution_config.rs: `.map_err(|e| Error::IO("genesis".into(), e))`
$DIR/config/src/config/execution_config.rs: `.into()`
$DIR/config/src/config/execution_config.rs: `.map_err(|e| Error::BCS("genesis", e))`
$DIR/config/src/config/execution_config.rs: `.is_empty()`
$DIR/config/src/config/execution_config.rs: `.full_path(&self.genesis_file_location)`
$DIR/config/src/config/execution_config.rs: `.map_err(|e| Error::IO("genesis".into(), e))`
$DIR/config/src/config/execution_config.rs: `.into()`
$DIR/config/src/config/execution_config.rs: `.map_err(|e| Error::BCS("genesis", e))`
$DIR/config/src/config/execution_config.rs: `.write_all(&data)`
$DIR/config/src/config/execution_config.rs: `.map_err(|e| Error::IO("genesis".into(), e))`
$DIR/config/src/config/execution_config.rs: `.into()`
$DIR/config/src/config/execution_config.rs: `.path()`
$DIR/config/src/config/execution_config.rs: `.freeze()`
$DIR/config/src/config/execution_config.rs: `.path()`
$DIR/config/src/config/execution_config.rs: `.create_as_dir()`
$DIR/config/src/config/mod.rs: `NodeConfig::default_for_public_full_node();`
$DIR/config/src/config/mod.rs: `NodeConfig::default_for_validator();`
$DIR/config/src/config/mod.rs: `NodeConfig::default_for_validator_full_node();`
$DIR/config/src/config/mod.rs: `NodeConfig::parse(docker_public_full_node).unwrap();`
$DIR/config/src/config/secure_backend_config.rs: `temppath.create_as_file().unwrap();`
$DIR/config/src/config/secure_backend_config.rs: `file.write_all(b"disk_token").unwrap();`
$DIR/config/src/config/secure_backend_config.rs: `.path.is_relative()`
$DIR/config/src/config/secure_backend_config.rs: `.create_as_file()`
$DIR/config/src/config/secure_backend_config.rs: `.write_all(b"disk_token")`
$DIR/config/src/config/test_config.rs: `self.auth_key = Some(AuthenticationKey::ed25519(&privkey.public_key()));`
$DIR/config/src/config/test_config.rs: `self.operator_key = Some(ConfigKey::new(privkey));`
$DIR/config/src/config/test_config.rs: `self.owner_key = Some(ConfigKey::new(privkey));`
$DIR/config/src/config/test_config.rs: `self.execution_key = Some(ConfigKey::new(privkey));`
$DIR/config/src/config/test_config.rs: `clone_test_config.auth_key = test_config.auth_key;`
$DIR/config/src/config/test_config.rs: `clone_test_config.execution_key = test_config.execution_key.clone();`
$DIR/config/src/config/test_config.rs: `clone_test_config.operator_key = test_config.operator_key.clone();`
$DIR/config/src/config/test_config.rs: `clone_test_config.owner_key = test_config.owner_key.clone();`
$DIR/config/src/config/test_config.rs: `.public_key()`
$DIR/consensus/consensus-types/src/block_test.rs: `ledger_info_altered.add_signature(signer.author(), signature);`
$DIR/consensus/consensus-types/src/block_test.rs: `.quorum_cert()`
$DIR/consensus/consensus-types/src/block_test.rs: `.certified_block()`
$DIR/consensus/consensus-types/src/block_test.rs: `.gen_block_info(
            parent_block_info.executed_state_id(),
            parent_block_info.version(),
            parent_block_info.next_epoch_state().cloned(),
        )`
$DIR/consensus/consensus-types/src/block_test.rs: `.executed_state_id()`
$DIR/consensus/consensus-types/src/block_test.rs: `.version()`
$DIR/consensus/consensus-types/src/block_test.rs: `.next_epoch_state()`
$DIR/consensus/consensus-types/src/block_test.rs: `.quorum_cert()`
$DIR/consensus/consensus-types/src/block_test.rs: `.certified_block()`
$DIR/consensus/consensus-types/src/block_test.rs: `.as_micros()`
$DIR/consensus/consensus-types/src/block_test.rs: `.as_micros()`
$DIR/consensus/consensus-types/src/block_test.rs: `.as_micros()`
$DIR/consensus/consensus-types/src/block_test.rs: `.sign(genesis_qc.ledger_info().ledger_info())`
$DIR/consensus/consensus-types/src/block_test.rs: `.ledger_info()`
$DIR/consensus/consensus-types/src/block_test.rs: `.ledger_info()`
$DIR/consensus/consensus-types/src/block_test.rs: `.ledger_info()`
$DIR/consensus/consensus-types/src/block_test.rs: `.add_signature(signer.author(), signature)`
$DIR/consensus/consensus-types/src/block_test.rs: `.author()`
$DIR/consensus/consensus-types/src/block_test.rs: `.vote_data()`
$DIR/consensus/consensus-types/src/timeout_2chain.rs: `ensure!(
            hqc_round < self.timeout.round(),
            "Timeout round should be larger than the QC round"
        );`
$DIR/consensus/consensus-types/src/timeout_2chain.rs: `self.timeout.quorum_cert().verify(validators)?;`
$DIR/consensus/consensus-types/src/timeout_2chain.rs: `validators.check_voting_power(self.signatures.keys())?;`
$DIR/consensus/consensus-types/src/timeout_2chain.rs: `validators
                .verify(*author, &t, signature)
                .with_context(|| format!("Failed to verify {}'s TimeoutSigningRepr", *author))?;`
$DIR/consensus/consensus-types/src/timeout_2chain.rs: `signed_round = std::cmp::max(signed_round, *qc_round);`
$DIR/consensus/consensus-types/src/timeout_2chain.rs: `ensure!(
            hqc_round == signed_round,
            "Inconsistent hqc round, qc has round {}, highest signed round {}",
            hqc_round,
            signed_round
        );`
$DIR/consensus/consensus-types/src/timeout_2chain.rs: `debug_assert_eq!(
            self.timeout.epoch(),
            timeout.epoch(),
            "Timeout should have the same epoch as TimeoutCert"
        );`
$DIR/consensus/consensus-types/src/timeout_2chain.rs: `debug_assert_eq!(
            self.timeout.round(),
            timeout.round(),
            "Timeout should have the same round as TimeoutCert"
        );`
$DIR/consensus/consensus-types/src/timeout_2chain.rs: `self.timeout = timeout;`
$DIR/consensus/consensus-types/src/timeout_2chain.rs: `self.signatures.insert(author, (hqc_round, signature));`
$DIR/consensus/consensus-types/src/timeout_2chain.rs: `ledger_info.add_signature(signer.author(), signature);`
$DIR/consensus/consensus-types/src/timeout_2chain.rs: `valid_timeout_cert.verify(&validators).unwrap();`
$DIR/consensus/consensus-types/src/timeout_2chain.rs: `invalid_timeout_cert.timeout.round = 1;`
$DIR/consensus/consensus-types/src/timeout_2chain.rs: `invalid_timeout_cert
        .signatures
        .get_mut(&signers[0].author())
        .unwrap()
        .1 = Ed25519Signature::dummy_signature();`
$DIR/consensus/consensus-types/src/timeout_2chain.rs: `invalid_timeout_cert
        .signatures
        .remove(&signers[0].author())
        .unwrap();`
$DIR/consensus/consensus-types/src/timeout_2chain.rs: `invalid_timeout_cert.timeout.quorum_cert = generate_quorum(2, quorum_size);`
$DIR/consensus/consensus-types/src/timeout_2chain.rs: `invalid_timeout_cert.timeout.quorum_cert = generate_quorum(3, quorum_size - 1);`
$DIR/consensus/consensus-types/src/timeout_2chain.rs: `.quorum_cert.certified_block()`
$DIR/consensus/consensus-types/src/timeout_2chain.rs: `.signing_format()`
$DIR/consensus/consensus-types/src/timeout_2chain.rs: `.timeout.quorum_cert()`
$DIR/consensus/consensus-types/src/timeout_2chain.rs: `.verify(validators)`
$DIR/consensus/consensus-types/src/timeout_2chain.rs: `.check_voting_power(self.signatures.keys())`
$DIR/consensus/consensus-types/src/timeout_2chain.rs: `.signatures.keys()`
$DIR/consensus/consensus-types/src/timeout_2chain.rs: `.verify(*author, &t, signature)`
$DIR/consensus/consensus-types/src/timeout_2chain.rs: `.with_context(|| format!("Failed to verify {}'s TimeoutSigningRepr", *author))`
$DIR/consensus/consensus-types/src/timeout_2chain.rs: `.signatures.insert(author, (hqc_round, signature))`
$DIR/consensus/consensus-types/src/timeout_2chain.rs: `.quorum_voting_power()`
$DIR/consensus/consensus-types/src/timeout_2chain.rs: `.hash()`
$DIR/consensus/consensus-types/src/timeout_2chain.rs: `.ledger_info()`
$DIR/consensus/consensus-types/src/timeout_2chain.rs: `.add_signature(signer.author(), signature)`
$DIR/consensus/consensus-types/src/timeout_2chain.rs: `.author()`
$DIR/consensus/consensus-types/src/timeout_2chain.rs: `.map(|qc_round| generate_timeout(4, qc_round))`
$DIR/consensus/consensus-types/src/timeout_2chain.rs: `.collect()`
$DIR/consensus/consensus-types/src/timeout_2chain.rs: `.zip(&signers)`
$DIR/consensus/consensus-types/src/timeout_2chain.rs: `.author()`
$DIR/consensus/consensus-types/src/timeout_2chain.rs: `.signatures
        .get_mut(&signers[0].author())`
$DIR/consensus/consensus-types/src/timeout_2chain.rs: `.author()`
$DIR/consensus/consensus-types/src/timeout_2chain.rs: `.signatures
        .remove(&signers[0].author())`
$DIR/consensus/consensus-types/src/timeout_2chain.rs: `.author()`
$DIR/consensus/safety-rules/src/persistent_safety_storage.rs: `self.cached_safety_data = Some(safety_data.clone());`
$DIR/consensus/safety-rules/src/persistent_safety_storage.rs: `counters::set_state("epoch", data.epoch as i64);`
$DIR/consensus/safety-rules/src/persistent_safety_storage.rs: `counters::set_state("last_voted_round", data.last_voted_round as i64);`
$DIR/consensus/safety-rules/src/persistent_safety_storage.rs: `counters::set_state("preferred_round", data.preferred_round as i64);`
$DIR/consensus/safety-rules/src/persistent_safety_storage.rs: `self.cached_safety_data = Some(data);`
$DIR/consensus/safety-rules/src/persistent_safety_storage.rs: `self.cached_safety_data = None;`
$DIR/consensus/safety-rules/src/persistent_safety_storage.rs: `safety_storage
            .set_safety_data(SafetyData::new(9, 8, 1, 0, None))
            .unwrap();`
$DIR/consensus/safety-rules/src/persistent_safety_storage.rs: `.internal_store.get(SAFETY_DATA)`
$DIR/consensus/safety-rules/src/persistent_safety_storage.rs: `.map(|v| v.value)`
$DIR/consensus/safety-rules/src/persistent_safety_storage.rs: `.internal_store.get(SAFETY_DATA)`
$DIR/consensus/safety-rules/src/persistent_safety_storage.rs: `.map(|v| v.value)`
$DIR/consensus/safety-rules/src/persistent_safety_storage.rs: `.internal_store.set(SAFETY_DATA, data.clone())`
$DIR/consensus/safety-rules/src/persistent_safety_storage.rs: `.private_key()`
$DIR/consensus/safety-rules/src/tests/local.rs: `suite::run_test_suite(
                    &safety_rules(
                        *verify_vote_proposal_signature,
                        *export_consensus_key,
                        *decoupled_execution,
                    ),
                    *decoupled_execution,
                );`
$DIR/consensus/safety-rules/src/tests/local.rs: `.client()`
$DIR/consensus/safety-rules/src/tests/networking.rs: `.client()`
$DIR/consensus/safety-rules/src/tests/networking.rs: `.consensus_state()`
$DIR/consensus/safety-rules/src/tests/networking.rs: `.client()`
$DIR/consensus/safety-rules/src/tests/networking.rs: `.consensus_state()`
$DIR/consensus/safety-rules/src/tests/safety_rules.rs: `suite::run_test_suite(
                    &safety_rules(
                        *verify_vote_proposal_signature,
                        *export_consensus_key,
                        *decoupled_execution,
                    ),
                    *decoupled_execution,
                );`
$DIR/consensus/safety-rules/src/tests/serializer.rs: `suite::run_test_suite(
                    &safety_rules(
                        *verify_vote_proposal_signature,
                        *export_consensus_key,
                        *decoupled_execution,
                    ),
                    *decoupled_execution,
                );`
$DIR/consensus/safety-rules/src/tests/serializer.rs: `.client()`
$DIR/consensus/safety-rules/src/tests/thread.rs: `suite::run_test_suite(
                    &safety_rules(
                        *verify_vote_proposal_signature,
                        *export_consensus_key,
                        *decoupled_execution,
                    ),
                    *decoupled_execution,
                );`
$DIR/consensus/safety-rules/src/tests/thread.rs: `.client()`
$DIR/consensus/safety-rules/src/tests/vault.rs: `suite::run_test_suite(
                    &safety_rules(
                        *verify_vote_proposal_signature,
                        *export_consensus_key,
                        *decoupled_execution,
                    ),
                    *decoupled_execution,
                );`
$DIR/consensus/safety-rules/src/tests/vault.rs: `storage.reset_and_clear().unwrap();`
$DIR/consensus/safety-rules/src/tests/vault.rs: `.is_none()`
$DIR/consensus/safety-rules/src/tests/vault.rs: `.reset_and_clear()`
$DIR/consensus/safety-rules/src/tests/vault.rs: `.author()`
$DIR/consensus/safety-rules/src/tests/vault.rs: `.private_key()`
$DIR/consensus/safety-rules/src/tests/vault.rs: `.client()`
$DIR/consensus/safety-rules/tests/binary.rs: `test_config.waypoint = Some(waypoint);`
$DIR/consensus/safety-rules/tests/binary.rs: `config.service = SafetyRulesService::Process(RemoteService { server_address });`
$DIR/consensus/safety-rules/tests/binary.rs: `config_path.create_as_file().unwrap();`
$DIR/consensus/safety-rules/tests/binary.rs: `config.save_config(config_path.path()).unwrap();`
$DIR/consensus/safety-rules/tests/binary.rs: `command
        .arg(config_path.path())
        .stdin(std::process::Stdio::inherit())
        .stdout(std::process::Stdio::inherit())
        .stderr(std::process::Stdio::inherit());`
$DIR/consensus/safety-rules/tests/binary.rs: `child.kill().expect("could not kill safety-rules process");`
$DIR/consensus/safety-rules/tests/binary.rs: `child
        .wait()
        .expect("could not wait on safety-rules process");`
$DIR/consensus/safety-rules/tests/binary.rs: `.private_key()`
$DIR/consensus/safety-rules/tests/binary.rs: `.into()`
$DIR/consensus/safety-rules/tests/binary.rs: `.create_as_file()`
$DIR/consensus/safety-rules/tests/binary.rs: `.save_config(config_path.path())`
$DIR/consensus/safety-rules/tests/binary.rs: `.path()`
$DIR/consensus/safety-rules/tests/binary.rs: `.arg(config_path.path())`
$DIR/consensus/safety-rules/tests/binary.rs: `.path()`
$DIR/consensus/safety-rules/tests/binary.rs: `.stdin(std::process::Stdio::inherit())`
$DIR/consensus/safety-rules/tests/binary.rs: `.stdout(std::process::Stdio::inherit())`
$DIR/consensus/safety-rules/tests/binary.rs: `.stderr(std::process::Stdio::inherit())`
$DIR/consensus/safety-rules/tests/binary.rs: `.spawn()`
$DIR/consensus/safety-rules/tests/binary.rs: `.client()`
$DIR/consensus/safety-rules/tests/binary.rs: `.consensus_state()`
$DIR/consensus/safety-rules/tests/binary.rs: `.kill()`
$DIR/consensus/safety-rules/tests/binary.rs: `.wait()`
$DIR/consensus/src/block_storage/block_store_and_lec_recovery_test.rs: `drop(execution_correctness_manager);`
$DIR/consensus/src/block_storage/block_store_and_lec_recovery_test.rs: `.get_startup_info()`
$DIR/consensus/src/block_storage/block_store_and_lec_recovery_test.rs: `.ledger_info()`
$DIR/consensus/src/block_storage/block_store_and_lec_recovery_test.rs: `.ledger_info()`
$DIR/consensus/src/block_storage/block_store_and_lec_recovery_test.rs: `.id()`
$DIR/consensus/src/block_storage/block_store_and_lec_recovery_test.rs: `.txn_accumulator()`
$DIR/consensus/src/block_storage/block_store_and_lec_recovery_test.rs: `.num_leaves()`
$DIR/consensus/src/block_storage/block_store_and_lec_recovery_test.rs: `.state_id()`
$DIR/consensus/src/block_storage/block_store_and_lec_recovery_test.rs: `.peer_id()`
$DIR/consensus/src/block_storage/block_store_and_lec_recovery_test.rs: `.client()`
$DIR/consensus/src/block_storage/block_store_and_lec_recovery_test.rs: `.block_store()`
$DIR/consensus/src/block_storage/block_store_and_lec_recovery_test.rs: `.ordered_root()`
$DIR/consensus/src/block_storage/block_store_and_lec_recovery_test.rs: `.id()`
$DIR/consensus/src/block_storage/block_store_and_lec_recovery_test.rs: `.get_block(genesis_block_id)`
$DIR/consensus/src/block_storage/block_store_and_lec_recovery_test.rs: `.insert_block_with_qc(qc.clone(), &genesis_block, 1)`
$DIR/consensus/src/block_storage/block_store_and_lec_recovery_test.rs: `.insert_block(&a1, 2, None)`
$DIR/consensus/src/block_storage/block_store_and_lec_recovery_test.rs: `.insert_block_with_qc(qc, &genesis_block, 4)`
$DIR/consensus/src/block_storage/block_store_and_lec_recovery_test.rs: `.insert_block(&a2, 3, Some(genesis.block_info()))`
$DIR/consensus/src/block_storage/block_store_and_lec_recovery_test.rs: `.block_info()`
$DIR/consensus/src/block_storage/block_store_and_lec_recovery_test.rs: `.insert_block(&b1, 5, None)`
$DIR/consensus/src/block_storage/block_store_and_lec_recovery_test.rs: `.insert_block(&b1, 6, None)`
$DIR/consensus/src/block_storage/block_store_and_lec_recovery_test.rs: `.client()`
$DIR/consensus/src/block_storage/block_store_and_lec_recovery_test.rs: `.block_store()`
$DIR/consensus/src/block_storage/block_store_and_lec_recovery_test.rs: `.ordered_root()`
$DIR/consensus/src/block_storage/block_store_and_lec_recovery_test.rs: `.id()`
$DIR/consensus/src/block_storage/block_store_and_lec_recovery_test.rs: `.get_block(genesis_block_id)`
$DIR/consensus/src/block_storage/block_store_and_lec_recovery_test.rs: `.insert_block_with_qc(qc.clone(), &genesis_block, 1)`
$DIR/consensus/src/block_storage/block_store_and_lec_recovery_test.rs: `.insert_block(&a1, 2, None)`
$DIR/consensus/src/block_storage/block_store_and_lec_recovery_test.rs: `.insert_block_with_qc(qc, &genesis_block, 4)`
$DIR/consensus/src/block_storage/block_store_and_lec_recovery_test.rs: `.client()`
$DIR/consensus/src/block_storage/block_store_and_lec_recovery_test.rs: `.block_store()`
$DIR/consensus/src/block_storage/block_store_and_lec_recovery_test.rs: `.ordered_root()`
$DIR/consensus/src/block_storage/block_store_and_lec_recovery_test.rs: `.id()`
$DIR/consensus/src/block_storage/block_store_and_lec_recovery_test.rs: `.get_block(genesis_block_id)`
$DIR/consensus/src/block_storage/block_store_and_lec_recovery_test.rs: `.insert_block_with_qc(qc.clone(), &genesis_block, 1)`
$DIR/consensus/src/block_storage/block_store_and_lec_recovery_test.rs: `.insert_block(&a1, 2, None)`
$DIR/consensus/src/block_storage/block_store_and_lec_recovery_test.rs: `.insert_block_with_qc(qc, &genesis_block, 4)`
$DIR/consensus/src/block_storage/block_store_and_lec_recovery_test.rs: `.insert_block(&a2, 3, Some(genesis.block_info()))`
$DIR/consensus/src/block_storage/block_store_and_lec_recovery_test.rs: `.block_info()`
$DIR/consensus/src/block_storage/block_store_and_lec_recovery_test.rs: `.insert_block(&b1, 5, None)`
$DIR/consensus/src/block_storage/block_store_and_lec_recovery_test.rs: `.insert_block(&b1, 6, None)`
$DIR/consensus/src/block_storage/block_store_test.rs: `cur_node = inserter.insert_block_with_qc(certificate_for_genesis(), &cur_node, round);`
$DIR/consensus/src/block_storage/block_store_test.rs: `cur_node = inserter.insert_block(&cur_node, round, None);`
$DIR/consensus/src/block_storage/block_store_test.rs: `added_blocks.push(cur_node.clone());`
$DIR/consensus/src/block_storage/block_store_test.rs: `block_store.prune_tree(block.id());`
$DIR/consensus/src/block_storage/block_store_test.rs: `block_store.prune_tree(b2.id());`
$DIR/consensus/src/block_storage/block_store_test.rs: `::diem_logger::Logger::init_for_testing();`
$DIR/consensus/src/block_storage/block_store_test.rs: `block_store
                .insert_single_quorum_cert(qc.as_ref().clone())
                .unwrap();`
$DIR/consensus/src/block_storage/block_store_test.rs: `block_store.prune_tree(a2.id());`
$DIR/consensus/src/block_storage/block_store_test.rs: `.block_store()`
$DIR/consensus/src/block_storage/block_store_test.rs: `.ordered_root()`
$DIR/consensus/src/block_storage/block_store_test.rs: `.insert_block_with_qc(certificate_for_genesis(), &genesis, 1)`
$DIR/consensus/src/block_storage/block_store_test.rs: `.insert_block(&block_round_1, 3, None)`
$DIR/consensus/src/block_storage/block_store_test.rs: `.insert_block(&block_round_1, 4, None)`
$DIR/consensus/src/block_storage/block_store_test.rs: `.block_store()`
$DIR/consensus/src/block_storage/block_store_test.rs: `.ordered_root()`
$DIR/consensus/src/block_storage/block_store_test.rs: `.insert_block_with_qc(certificate_for_genesis(), &genesis, 1)`
$DIR/consensus/src/block_storage/block_store_test.rs: `.insert_block(&block_a_1, 2, None)`
$DIR/consensus/src/block_storage/block_store_test.rs: `.block_store()`
$DIR/consensus/src/block_storage/block_store_test.rs: `.ordered_root()`
$DIR/consensus/src/block_storage/block_store_test.rs: `.get_block(genesis.id())`
$DIR/consensus/src/block_storage/block_store_test.rs: `.id()`
$DIR/consensus/src/block_storage/block_store_test.rs: `.insert_block_with_qc(certificate_for_genesis(), &cur_node, round)`
$DIR/consensus/src/block_storage/block_store_test.rs: `.insert_block(&cur_node, round, None)`
$DIR/consensus/src/block_storage/block_store_test.rs: `.push(cur_node.clone())`
$DIR/consensus/src/block_storage/block_store_test.rs: `.enumerate()`
$DIR/consensus/src/block_storage/block_store_test.rs: `.prune_tree(block.id())`
$DIR/consensus/src/block_storage/block_store_test.rs: `.id()`
$DIR/consensus/src/block_storage/block_store_test.rs: `.block_store()`
$DIR/consensus/src/block_storage/block_store_test.rs: `.get_block(block_store.ordered_root().id())`
$DIR/consensus/src/block_storage/block_store_test.rs: `.ordered_root()`
$DIR/consensus/src/block_storage/block_store_test.rs: `.id()`
$DIR/consensus/src/block_storage/block_store_test.rs: `.insert_block_with_qc(certificate_for_genesis(), &genesis, 1)`
$DIR/consensus/src/block_storage/block_store_test.rs: `.insert_block(&b1, 2, None)`
$DIR/consensus/src/block_storage/block_store_test.rs: `.insert_block(&b2, 3, None)`
$DIR/consensus/src/block_storage/block_store_test.rs: `.prune_tree(b2.id())`
$DIR/consensus/src/block_storage/block_store_test.rs: `.id()`
$DIR/consensus/src/block_storage/block_store_test.rs: `.block_store()`
$DIR/consensus/src/block_storage/block_store_test.rs: `.ordered_root()`
$DIR/consensus/src/block_storage/block_store_test.rs: `.insert_block_with_qc(certificate_for_genesis(), &genesis, 1)`
$DIR/consensus/src/block_storage/block_store_test.rs: `.enumerate()`
$DIR/consensus/src/block_storage/block_store_test.rs: `.take(10)`
$DIR/consensus/src/block_storage/block_store_test.rs: `.skip(1)`
$DIR/consensus/src/block_storage/block_store_test.rs: `.block()`
$DIR/consensus/src/block_storage/block_store_test.rs: `.gen_block_info(
                    block.compute_result().root_hash(),
                    block.compute_result().version(),
                    block.compute_result().epoch_state().clone(),
                )`
$DIR/consensus/src/block_storage/block_store_test.rs: `.compute_result()`
$DIR/consensus/src/block_storage/block_store_test.rs: `.root_hash()`
$DIR/consensus/src/block_storage/block_store_test.rs: `.compute_result()`
$DIR/consensus/src/block_storage/block_store_test.rs: `.version()`
$DIR/consensus/src/block_storage/block_store_test.rs: `.compute_result()`
$DIR/consensus/src/block_storage/block_store_test.rs: `.epoch_state()`
$DIR/consensus/src/block_storage/block_store_test.rs: `.quorum_cert()`
$DIR/consensus/src/block_storage/block_store_test.rs: `.certified_block()`
$DIR/consensus/src/block_storage/block_store_test.rs: `.author()`
$DIR/consensus/src/block_storage/block_store_test.rs: `.insert_vote(&vote, &validator_verifier)`
$DIR/consensus/src/block_storage/block_store_test.rs: `.block()`
$DIR/consensus/src/block_storage/block_store_test.rs: `.gen_block_info(
                block.compute_result().root_hash(),
                block.compute_result().version(),
                block.compute_result().epoch_state().clone(),
            )`
$DIR/consensus/src/block_storage/block_store_test.rs: `.compute_result()`
$DIR/consensus/src/block_storage/block_store_test.rs: `.root_hash()`
$DIR/consensus/src/block_storage/block_store_test.rs: `.compute_result()`
$DIR/consensus/src/block_storage/block_store_test.rs: `.version()`
$DIR/consensus/src/block_storage/block_store_test.rs: `.compute_result()`
$DIR/consensus/src/block_storage/block_store_test.rs: `.epoch_state()`
$DIR/consensus/src/block_storage/block_store_test.rs: `.quorum_cert()`
$DIR/consensus/src/block_storage/block_store_test.rs: `.certified_block()`
$DIR/consensus/src/block_storage/block_store_test.rs: `.author()`
$DIR/consensus/src/block_storage/block_store_test.rs: `.insert_vote(&vote, &validator_verifier)`
$DIR/consensus/src/block_storage/block_store_test.rs: `.insert_single_quorum_cert(qc.as_ref().clone())`
$DIR/consensus/src/block_storage/block_store_test.rs: `.get_quorum_cert_for_block(block.id())`
$DIR/consensus/src/block_storage/block_store_test.rs: `.id()`
$DIR/consensus/src/block_storage/block_store_test.rs: `.ordered_root()`
$DIR/consensus/src/block_storage/block_store_test.rs: `.timestamp_usecs()`
$DIR/consensus/src/block_storage/block_store_test.rs: `.execute_and_insert_block(block_with_illegal_timestamp)`
$DIR/consensus/src/block_storage/block_store_test.rs: `.block_store()`
$DIR/consensus/src/block_storage/block_store_test.rs: `.ordered_root()`
$DIR/consensus/src/block_storage/block_store_test.rs: `.insert_block_with_qc(certificate_for_genesis(), &genesis, 1)`
$DIR/consensus/src/block_storage/block_store_test.rs: `.insert_block(&a1, 2, None)`
$DIR/consensus/src/block_storage/block_store_test.rs: `.insert_block(&a2, 3, None)`
$DIR/consensus/src/block_storage/block_store_test.rs: `.block_store()`
$DIR/consensus/src/block_storage/block_store_test.rs: `.ordered_root()`
$DIR/consensus/src/block_storage/block_store_test.rs: `.insert_block_with_qc(certificate_for_genesis(), &genesis, 1)`
$DIR/consensus/src/block_storage/block_store_test.rs: `.insert_block(&a1, 2, None)`
$DIR/consensus/src/block_storage/block_store_test.rs: `.insert_block(&a2, 3, None)`
$DIR/consensus/src/block_storage/block_store_test.rs: `.prune_tree(a2.id())`
$DIR/consensus/src/block_storage/block_store_test.rs: `.id()`
$DIR/consensus/src/block_storage/block_store_test.rs: `.round()`
$DIR/consensus/src/block_storage/block_store_test.rs: `.round()`
$DIR/consensus/src/block_storage/block_store_test.rs: `.id()`
$DIR/consensus/src/block_storage/block_store_test.rs: `.round()`
$DIR/consensus/src/block_storage/block_store_test.rs: `.id()`
$DIR/consensus/src/block_storage/block_store_test.rs: `.round()`
$DIR/consensus/src/block_storage/block_store_test.rs: `.get_quorum_cert_for_block(a2.id())`
$DIR/consensus/src/block_storage/block_store_test.rs: `.id()`
$DIR/consensus/src/consensusdb/consensusdb_test.rs: `db.save_blocks_and_quorum_certificates(blocks.clone(), qcs.clone())
        .unwrap();`
$DIR/consensus/src/consensusdb/consensusdb_test.rs: `db.save_highest_timeout_certificate(tc.clone()).unwrap();`
$DIR/consensus/src/consensusdb/consensusdb_test.rs: `db.save_highest_2chain_timeout_certificate(tc.clone())
        .unwrap();`
$DIR/consensus/src/consensusdb/consensusdb_test.rs: `db.save_vote(vote.clone()).unwrap();`
$DIR/consensus/src/consensusdb/consensusdb_test.rs: `db.delete_highest_timeout_certificate().unwrap();`
$DIR/consensus/src/consensusdb/consensusdb_test.rs: `db.delete_highest_2chain_timeout_certificate().unwrap();`
$DIR/consensus/src/consensusdb/consensusdb_test.rs: `db.delete_last_vote_msg().unwrap();`
$DIR/consensus/src/consensusdb/consensusdb_test.rs: `db.save_blocks_and_quorum_certificates(blocks, qcs).unwrap();`
$DIR/consensus/src/consensusdb/consensusdb_test.rs: `db.delete_blocks_and_quorum_certificates(vec![block_id, qc_id])
        .unwrap();`
$DIR/consensus/src/consensusdb/consensusdb_test.rs: `.save_blocks_and_quorum_certificates(blocks.clone(), qcs.clone())`
$DIR/consensus/src/consensusdb/consensusdb_test.rs: `.save_highest_timeout_certificate(tc.clone())`
$DIR/consensus/src/consensusdb/consensusdb_test.rs: `.save_highest_2chain_timeout_certificate(tc.clone())`
$DIR/consensus/src/consensusdb/consensusdb_test.rs: `.save_vote(vote.clone())`
$DIR/consensus/src/consensusdb/consensusdb_test.rs: `.get_data()`
$DIR/consensus/src/consensusdb/consensusdb_test.rs: `.delete_highest_timeout_certificate()`
$DIR/consensus/src/consensusdb/consensusdb_test.rs: `.delete_highest_2chain_timeout_certificate()`
$DIR/consensus/src/consensusdb/consensusdb_test.rs: `.delete_last_vote_msg()`
$DIR/consensus/src/consensusdb/consensusdb_test.rs: `.id()`
$DIR/consensus/src/consensusdb/consensusdb_test.rs: `.certified_block()`
$DIR/consensus/src/consensusdb/consensusdb_test.rs: `.id()`
$DIR/consensus/src/consensusdb/consensusdb_test.rs: `.save_blocks_and_quorum_certificates(blocks, qcs)`
$DIR/consensus/src/consensusdb/consensusdb_test.rs: `.delete_blocks_and_quorum_certificates(vec![block_id, qc_id])`
$DIR/consensus/src/consensusdb/schema/block/test.rs: `.id()`
$DIR/consensus/src/consensusdb/schema/quorum_certificate/test.rs: `.certified_block()`
$DIR/consensus/src/consensusdb/schema/quorum_certificate/test.rs: `.id()`
$DIR/consensus/src/error.rs: `.into()`
$DIR/consensus/src/error.rs: `.context("Context!")`
$DIR/consensus/src/experimental/linkedlist.rs: `(*old_head).borrow_mut().prev = Some(new_head.clone());`
$DIR/consensus/src/experimental/linkedlist.rs: `(*new_head).borrow_mut().next = Some(old_head);`
$DIR/consensus/src/experimental/linkedlist.rs: `self.head = Some(new_head);`
$DIR/consensus/src/experimental/linkedlist.rs: `self.tail = Some(new_head.clone());`
$DIR/consensus/src/experimental/linkedlist.rs: `self.head = Some(new_head);`
$DIR/consensus/src/experimental/linkedlist.rs: `(*old_tail).borrow_mut().next = Some(new_tail.clone());`
$DIR/consensus/src/experimental/linkedlist.rs: `(*new_tail).borrow_mut().prev = Some(old_tail);`
$DIR/consensus/src/experimental/linkedlist.rs: `self.tail = Some(new_tail);`
$DIR/consensus/src/experimental/linkedlist.rs: `self.head = Some(new_tail.clone());`
$DIR/consensus/src/experimental/linkedlist.rs: `self.tail = Some(new_tail);`
$DIR/consensus/src/experimental/linkedlist.rs: `.head.take()`
$DIR/consensus/src/experimental/linkedlist.rs: `.tail.take()`
$DIR/consensus/src/experimental/tests/commit_phase_tests.rs: `dummy_ledger_info_with_sig.add_signature(signer.author(), signer.sign(&dummy_ledger_info));`
$DIR/consensus/src/experimental/tests/commit_phase_tests.rs: `runtime.spawn(commit_phase.start());`
$DIR/consensus/src/experimental/tests/commit_phase_tests.rs: `commit_tx
                    .send(CommitChannelType(
                        vecblocks.clone(),
                        li_sig.clone(),
                        empty_state_computer_call_back(),
                    ))
                    .await
                    .ok();`
$DIR/consensus/src/experimental/tests/commit_phase_tests.rs: `commit_phase_reset_tx.send(tx).await.ok();`
$DIR/consensus/src/experimental/tests/commit_phase_tests.rs: `rx.await.ok();`
$DIR/consensus/src/experimental/tests/commit_phase_tests.rs: `commit_tx
                .send(CommitChannelType(
                    vecblocks.clone(),
                    li_sig.clone(),
                    empty_state_computer_call_back(),
                ))
                .await
                .ok();`
$DIR/consensus/src/experimental/tests/commit_phase_tests.rs: `runtime.spawn(commit_phase.start());`
$DIR/consensus/src/experimental/tests/commit_phase_tests.rs: `commit_tx
                .send(CommitChannelType(
                    vecblocks,
                    li_sig,
                    empty_state_computer_call_back(),
                ))
                .await
                .ok();`
$DIR/consensus/src/experimental/tests/commit_phase_tests.rs: `runtime.spawn(commit_phase.start());`
$DIR/consensus/src/experimental/tests/commit_phase_tests.rs: `commit_tx
                .send(CommitChannelType(
                    vec![ExecutedBlock::new(block.clone(), compute_result)],
                    LedgerInfoWithSignatures::new(
                        LedgerInfo::new(
                            block.gen_block_info(*ACCUMULATOR_PLACEHOLDER_HASH, 0, None),
                            *ACCUMULATOR_PLACEHOLDER_HASH,
                        ),
                        BTreeMap::<AccountAddress, Ed25519Signature>::new(),
                    ),
                    empty_state_computer_call_back(),
                ))
                .await
                .ok();`
$DIR/consensus/src/experimental/tests/commit_phase_tests.rs: `runtime.spawn(commit_phase.start());`
$DIR/consensus/src/experimental/tests/commit_phase_tests.rs: `commit_tx
                .send(CommitChannelType(
                    vecblocks,
                    li_sig,
                    empty_state_computer_call_back(),
                ))
                .await
                .ok();`
$DIR/consensus/src/experimental/tests/commit_phase_tests.rs: `msg_tx
                .send(VerifiedEvent::CommitVote(Box::new(
                    generate_random_commit_vote(&signers[0]),
                )))
                .await
                .ok();`
$DIR/consensus/src/experimental/tests/commit_phase_tests.rs: `runtime.spawn(commit_phase.start());`
$DIR/consensus/src/experimental/tests/commit_phase_tests.rs: `commit_tx
                .send(CommitChannelType(
                    vecblocks,
                    li_sig,
                    empty_state_computer_call_back(),
                ))
                .await
                .ok();`
$DIR/consensus/src/experimental/tests/commit_phase_tests.rs: `msg_tx
                .send(VerifiedEvent::CommitDecision(Box::new(
                    CommitDecision::new(LedgerInfoWithSignatures::new(
                        li_sig_prime.ledger_info().clone(),
                        BTreeMap::<AccountAddress, Ed25519Signature>::new(),
                    )),
                )))
                .await
                .ok();`
$DIR/consensus/src/experimental/tests/commit_phase_tests.rs: `commit_phase.set_blocks(Some(PendingBlocks::new(
                vecblocks,
                li_sig,
                empty_state_computer_call_back(),
            )));`
$DIR/consensus/src/experimental/tests/commit_phase_tests.rs: `commit_phase.set_blocks(Some(PendingBlocks::new(
                vecblocks,
                li_sig,
                empty_state_computer_call_back(),
            )));`
$DIR/consensus/src/experimental/tests/commit_phase_tests.rs: `commit_tx
                    .send(CommitChannelType(
                        vecblocks.clone(),
                        li_sig.clone(),
                        empty_state_computer_call_back(),
                    ))
                    .await
                    .ok();`
$DIR/consensus/src/experimental/tests/commit_phase_tests.rs: `commit_phase.set_blocks(Some(PendingBlocks::new(
                vecblocks.clone(),
                li_sig.clone(),
                empty_state_computer_call_back(),
            )));`
$DIR/consensus/src/experimental/tests/commit_phase_tests.rs: `commit_phase.process_reset_event(tx).await.ok();`
$DIR/consensus/src/experimental/tests/commit_phase_tests.rs: `rx.await.ok();`
$DIR/consensus/src/experimental/tests/commit_phase_tests.rs: `commit_tx
                .send(CommitChannelType(
                    vecblocks.clone(),
                    li_sig.clone(),
                    empty_state_computer_call_back(),
                ))
                .await
                .ok();`
$DIR/consensus/src/experimental/tests/commit_phase_tests.rs: `commit_phase.check_commit().await.ok();`
$DIR/consensus/src/experimental/tests/commit_phase_tests.rs: `commit_phase.set_blocks(Some(PendingBlocks::new(
                vecblocks.clone(),
                li_sig.clone(),
                empty_state_computer_call_back(),
            )));`
$DIR/consensus/src/experimental/tests/commit_phase_tests.rs: `commit_phase.check_commit().await.ok();`
$DIR/consensus/src/experimental/tests/commit_phase_tests.rs: `commit_phase.set_blocks(Some(PendingBlocks::new(
                vecblocks,
                ledger_info_with_no_sig,
                empty_state_computer_call_back(),
            )));`
$DIR/consensus/src/experimental/tests/commit_phase_tests.rs: `commit_phase.check_commit().await.ok();`
$DIR/consensus/src/experimental/tests/commit_phase_tests.rs: `.author()`
$DIR/consensus/src/experimental/tests/commit_phase_tests.rs: `.add_signature(signer.author(), signer.sign(&dummy_ledger_info))`
$DIR/consensus/src/experimental/tests/commit_phase_tests.rs: `.author()`
$DIR/consensus/src/experimental/tests/commit_phase_tests.rs: `.sign(&dummy_ledger_info)`
$DIR/consensus/src/experimental/tests/commit_phase_tests.rs: `.spawn(commit_phase.start())`
$DIR/consensus/src/experimental/tests/commit_phase_tests.rs: `.start()`
$DIR/consensus/src/experimental/tests/commit_phase_tests.rs: `.send(CommitChannelType(
                        vecblocks.clone(),
                        li_sig.clone(),
                        empty_state_computer_call_back(),
                    ))`
$DIR/consensus/src/experimental/tests/commit_phase_tests.rs: `.ok()`
$DIR/consensus/src/experimental/tests/commit_phase_tests.rs: `.send(tx)`
$DIR/consensus/src/experimental/tests/commit_phase_tests.rs: `.ok()`
$DIR/consensus/src/experimental/tests/commit_phase_tests.rs: `.ok()`
$DIR/consensus/src/experimental/tests/commit_phase_tests.rs: `.send(CommitChannelType(
                    vecblocks.clone(),
                    li_sig.clone(),
                    empty_state_computer_call_back(),
                ))`
$DIR/consensus/src/experimental/tests/commit_phase_tests.rs: `.ok()`
$DIR/consensus/src/experimental/tests/commit_phase_tests.rs: `.spawn(commit_phase.start())`
$DIR/consensus/src/experimental/tests/commit_phase_tests.rs: `.start()`
$DIR/consensus/src/experimental/tests/commit_phase_tests.rs: `.send(CommitChannelType(
                    vecblocks,
                    li_sig,
                    empty_state_computer_call_back(),
                ))`
$DIR/consensus/src/experimental/tests/commit_phase_tests.rs: `.ok()`
$DIR/consensus/src/experimental/tests/commit_phase_tests.rs: `.next()`
$DIR/consensus/src/experimental/tests/commit_phase_tests.rs: `.next()`
$DIR/consensus/src/experimental/tests/commit_phase_tests.rs: `.first()`
$DIR/consensus/src/experimental/tests/commit_phase_tests.rs: `.compute(&block, *ACCUMULATOR_PLACEHOLDER_HASH)`
$DIR/consensus/src/experimental/tests/commit_phase_tests.rs: `.spawn(commit_phase.start())`
$DIR/consensus/src/experimental/tests/commit_phase_tests.rs: `.start()`
$DIR/consensus/src/experimental/tests/commit_phase_tests.rs: `.send(CommitChannelType(
                    vec![ExecutedBlock::new(block.clone(), compute_result)],
                    LedgerInfoWithSignatures::new(
                        LedgerInfo::new(
                            block.gen_block_info(*ACCUMULATOR_PLACEHOLDER_HASH, 0, None),
                            *ACCUMULATOR_PLACEHOLDER_HASH,
                        ),
                        BTreeMap::<AccountAddress, Ed25519Signature>::new(),
                    ),
                    empty_state_computer_call_back(),
                ))`
$DIR/consensus/src/experimental/tests/commit_phase_tests.rs: `.gen_block_info(*ACCUMULATOR_PLACEHOLDER_HASH, 0, None)`
$DIR/consensus/src/experimental/tests/commit_phase_tests.rs: `.ok()`
$DIR/consensus/src/experimental/tests/commit_phase_tests.rs: `.spawn(commit_phase.start())`
$DIR/consensus/src/experimental/tests/commit_phase_tests.rs: `.start()`
$DIR/consensus/src/experimental/tests/commit_phase_tests.rs: `.send(CommitChannelType(
                    vecblocks,
                    li_sig,
                    empty_state_computer_call_back(),
                ))`
$DIR/consensus/src/experimental/tests/commit_phase_tests.rs: `.ok()`
$DIR/consensus/src/experimental/tests/commit_phase_tests.rs: `.next()`
$DIR/consensus/src/experimental/tests/commit_phase_tests.rs: `.send(VerifiedEvent::CommitVote(Box::new(
                    generate_random_commit_vote(&signers[0]),
                )))`
$DIR/consensus/src/experimental/tests/commit_phase_tests.rs: `.ok()`
$DIR/consensus/src/experimental/tests/commit_phase_tests.rs: `.spawn(commit_phase.start())`
$DIR/consensus/src/experimental/tests/commit_phase_tests.rs: `.start()`
$DIR/consensus/src/experimental/tests/commit_phase_tests.rs: `.send(CommitChannelType(
                    vecblocks,
                    li_sig,
                    empty_state_computer_call_back(),
                ))`
$DIR/consensus/src/experimental/tests/commit_phase_tests.rs: `.ok()`
$DIR/consensus/src/experimental/tests/commit_phase_tests.rs: `.next()`
$DIR/consensus/src/experimental/tests/commit_phase_tests.rs: `.send(VerifiedEvent::CommitDecision(Box::new(
                    CommitDecision::new(LedgerInfoWithSignatures::new(
                        li_sig_prime.ledger_info().clone(),
                        BTreeMap::<AccountAddress, Ed25519Signature>::new(),
                    )),
                )))`
$DIR/consensus/src/experimental/tests/commit_phase_tests.rs: `.ledger_info()`
$DIR/consensus/src/experimental/tests/commit_phase_tests.rs: `.ok()`
$DIR/consensus/src/experimental/tests/commit_phase_tests.rs: `.set_blocks(Some(PendingBlocks::new(
                vecblocks,
                li_sig,
                empty_state_computer_call_back(),
            )))`
$DIR/consensus/src/experimental/tests/commit_phase_tests.rs: `.set_blocks(Some(PendingBlocks::new(
                vecblocks,
                li_sig,
                empty_state_computer_call_back(),
            )))`
$DIR/consensus/src/experimental/tests/commit_phase_tests.rs: `.send(CommitChannelType(
                        vecblocks.clone(),
                        li_sig.clone(),
                        empty_state_computer_call_back(),
                    ))`
$DIR/consensus/src/experimental/tests/commit_phase_tests.rs: `.ok()`
$DIR/consensus/src/experimental/tests/commit_phase_tests.rs: `.set_blocks(Some(PendingBlocks::new(
                vecblocks.clone(),
                li_sig.clone(),
                empty_state_computer_call_back(),
            )))`
$DIR/consensus/src/experimental/tests/commit_phase_tests.rs: `.process_reset_event(tx)`
$DIR/consensus/src/experimental/tests/commit_phase_tests.rs: `.ok()`
$DIR/consensus/src/experimental/tests/commit_phase_tests.rs: `.ok()`
$DIR/consensus/src/experimental/tests/commit_phase_tests.rs: `.send(CommitChannelType(
                    vecblocks.clone(),
                    li_sig.clone(),
                    empty_state_computer_call_back(),
                ))`
$DIR/consensus/src/experimental/tests/commit_phase_tests.rs: `.ok()`
$DIR/consensus/src/experimental/tests/commit_phase_tests.rs: `.check_commit()`
$DIR/consensus/src/experimental/tests/commit_phase_tests.rs: `.ok()`
$DIR/consensus/src/experimental/tests/commit_phase_tests.rs: `.set_blocks(Some(PendingBlocks::new(
                vecblocks.clone(),
                li_sig.clone(),
                empty_state_computer_call_back(),
            )))`
$DIR/consensus/src/experimental/tests/commit_phase_tests.rs: `.check_commit()`
$DIR/consensus/src/experimental/tests/commit_phase_tests.rs: `.ok()`
$DIR/consensus/src/experimental/tests/commit_phase_tests.rs: `.last()`
$DIR/consensus/src/experimental/tests/commit_phase_tests.rs: `.block_info()`
$DIR/consensus/src/experimental/tests/commit_phase_tests.rs: `.ledger_info()`
$DIR/consensus/src/experimental/tests/commit_phase_tests.rs: `.set_blocks(Some(PendingBlocks::new(
                vecblocks,
                ledger_info_with_no_sig,
                empty_state_computer_call_back(),
            )))`
$DIR/consensus/src/experimental/tests/commit_phase_tests.rs: `.check_commit()`
$DIR/consensus/src/experimental/tests/commit_phase_tests.rs: `.ok()`
$DIR/consensus/src/experimental/tests/commit_phase_tests.rs: `.last()`
$DIR/consensus/src/experimental/tests/commit_phase_tests.rs: `.block_info()`
$DIR/consensus/src/experimental/tests/commit_phase_tests.rs: `.ledger_info()`
$DIR/consensus/src/experimental/tests/execution_phase_tests.rs: `runtime.spawn(execution_phase_pipeline.start());`
$DIR/consensus/src/experimental/tests/execution_phase_tests.rs: `in_channel_tx
            .send(ExecutionRequest {
                ordered_blocks: vec![ExecutedBlock::new(block, StateComputeResult::new_dummy())],
            })
            .await
            .ok();`
$DIR/consensus/src/experimental/tests/execution_phase_tests.rs: `.get_root_hash()`
$DIR/consensus/src/experimental/tests/execution_phase_tests.rs: `.process(ExecutionRequest {
                ordered_blocks: vec![ExecutedBlock::new(block, StateComputeResult::new_dummy())],
            })`
$DIR/consensus/src/experimental/tests/execution_phase_tests.rs: `.spawn(execution_phase_pipeline.start())`
$DIR/consensus/src/experimental/tests/execution_phase_tests.rs: `.start()`
$DIR/consensus/src/experimental/tests/execution_phase_tests.rs: `.send(ExecutionRequest {
                ordered_blocks: vec![ExecutedBlock::new(block, StateComputeResult::new_dummy())],
            })`
$DIR/consensus/src/experimental/tests/execution_phase_tests.rs: `.ok()`
$DIR/consensus/src/experimental/tests/execution_phase_tests.rs: `.next()`
$DIR/consensus/src/liveness/leader_reputation_test.rs: `proposers.push(signer.author());`
$DIR/consensus/src/liveness/leader_reputation_test.rs: `signers.push(signer);`
$DIR/consensus/src/liveness/leader_reputation_test.rs: `proposers.push(signer.author());`
$DIR/consensus/src/liveness/leader_reputation_test.rs: `signers.push(signer);`
$DIR/consensus/src/liveness/leader_reputation_test.rs: `s += *w;`
$DIR/consensus/src/liveness/leader_reputation_test.rs: `accu += *w;`
$DIR/consensus/src/liveness/leader_reputation_test.rs: `expected_index = i;`
$DIR/consensus/src/liveness/leader_reputation_test.rs: `.map(|v| v.author())`
$DIR/consensus/src/liveness/leader_reputation_test.rs: `.author()`
$DIR/consensus/src/liveness/leader_reputation_test.rs: `.collect()`
$DIR/consensus/src/liveness/leader_reputation_test.rs: `.push(signer.author())`
$DIR/consensus/src/liveness/leader_reputation_test.rs: `.author()`
$DIR/consensus/src/liveness/leader_reputation_test.rs: `.push(signer)`
$DIR/consensus/src/liveness/leader_reputation_test.rs: `.get_weights(&proposers, &[])`
$DIR/consensus/src/liveness/leader_reputation_test.rs: `.get_weights(
        &proposers,
        &[
            create_block(proposers[0], vec![&signers[1], &signers[2]]),
            create_block(proposers[0], vec![&signers[3]]),
        ],
    )`
$DIR/consensus/src/liveness/leader_reputation_test.rs: `.enumerate()`
$DIR/consensus/src/liveness/leader_reputation_test.rs: `.push(signer.author())`
$DIR/consensus/src/liveness/leader_reputation_test.rs: `.author()`
$DIR/consensus/src/liveness/leader_reputation_test.rs: `.push(signer)`
$DIR/consensus/src/liveness/leader_reputation_test.rs: `.fold(0, |mut s, w| {
        s += *w;
        s
    })`
$DIR/consensus/src/liveness/leader_reputation_test.rs: `.to_le_bytes()`
$DIR/consensus/src/liveness/leader_reputation_test.rs: `.enumerate()`
$DIR/consensus/src/liveness/leader_reputation_test.rs: `.len()`
$DIR/consensus/src/liveness/leader_reputation_test.rs: `.get_valid_proposer(round)`
$DIR/consensus/src/liveness/proposal_generator_test.rs: `inserter.insert_qc_for_block(a1.as_ref(), None);`
$DIR/consensus/src/liveness/proposal_generator_test.rs: `inserter.insert_qc_for_block(b1.as_ref(), None);`
$DIR/consensus/src/liveness/proposal_generator_test.rs: `inserter.insert_qc_for_block(a1.as_ref(), None);`
$DIR/consensus/src/liveness/proposal_generator_test.rs: `.author()`
$DIR/consensus/src/liveness/proposal_generator_test.rs: `.ordered_root()`
$DIR/consensus/src/liveness/proposal_generator_test.rs: `.generate_proposal(1)`
$DIR/consensus/src/liveness/proposal_generator_test.rs: `.generate_proposal(1)`
$DIR/consensus/src/liveness/proposal_generator_test.rs: `.err()`
$DIR/consensus/src/liveness/proposal_generator_test.rs: `.block_store()`
$DIR/consensus/src/liveness/proposal_generator_test.rs: `.signer()`
$DIR/consensus/src/liveness/proposal_generator_test.rs: `.author()`
$DIR/consensus/src/liveness/proposal_generator_test.rs: `.ordered_root()`
$DIR/consensus/src/liveness/proposal_generator_test.rs: `.insert_block_with_qc(certificate_for_genesis(), &genesis, 1)`
$DIR/consensus/src/liveness/proposal_generator_test.rs: `.insert_block_with_qc(certificate_for_genesis(), &genesis, 2)`
$DIR/consensus/src/liveness/proposal_generator_test.rs: `.insert_qc_for_block(a1.as_ref(), None)`
$DIR/consensus/src/liveness/proposal_generator_test.rs: `.generate_proposal(11)`
$DIR/consensus/src/liveness/proposal_generator_test.rs: `.insert_qc_for_block(b1.as_ref(), None)`
$DIR/consensus/src/liveness/proposal_generator_test.rs: `.generate_proposal(12)`
$DIR/consensus/src/liveness/proposal_generator_test.rs: `.block_store()`
$DIR/consensus/src/liveness/proposal_generator_test.rs: `.signer()`
$DIR/consensus/src/liveness/proposal_generator_test.rs: `.author()`
$DIR/consensus/src/liveness/proposal_generator_test.rs: `.ordered_root()`
$DIR/consensus/src/liveness/proposal_generator_test.rs: `.insert_block_with_qc(certificate_for_genesis(), &genesis, 1)`
$DIR/consensus/src/liveness/proposal_generator_test.rs: `.insert_qc_for_block(a1.as_ref(), None)`
$DIR/consensus/src/liveness/proposal_generator_test.rs: `.generate_proposal(1)`
$DIR/consensus/src/liveness/proposal_generator_test.rs: `.err()`
$DIR/consensus/src/liveness/rotating_proposer_test.rs: `.author()`
$DIR/consensus/src/liveness/rotating_proposer_test.rs: `.author()`
$DIR/consensus/src/liveness/rotating_proposer_test.rs: `.author()`
$DIR/consensus/src/liveness/rotating_proposer_test.rs: `.author()`
$DIR/consensus/src/liveness/rotating_proposer_test.rs: `.author()`
$DIR/consensus/src/liveness/rotating_proposer_test.rs: `.author()`
$DIR/consensus/src/liveness/round_proposer_test.rs: `round_proposers.insert(1, chosen_author_round1);`
$DIR/consensus/src/liveness/round_proposer_test.rs: `round_proposers.insert(2, chosen_author_round2);`
$DIR/consensus/src/liveness/round_proposer_test.rs: `.author()`
$DIR/consensus/src/liveness/round_proposer_test.rs: `.author()`
$DIR/consensus/src/liveness/round_proposer_test.rs: `.author()`
$DIR/consensus/src/liveness/round_proposer_test.rs: `.insert(1, chosen_author_round1)`
$DIR/consensus/src/liveness/round_proposer_test.rs: `.insert(2, chosen_author_round2)`
$DIR/consensus/src/liveness/round_state_test.rs: `pm.process_certificates(generate_sync_info(Some(0), None, None));`
$DIR/consensus/src/liveness/round_state_test.rs: `pm.process_local_timeout(round);`
$DIR/consensus/src/liveness/round_state_test.rs: `.process_certificates(generate_sync_info(Some(0), None, None))`
$DIR/consensus/src/liveness/round_state_test.rs: `.next()`
$DIR/consensus/src/liveness/round_state_test.rs: `.process_local_timeout(round)`
$DIR/consensus/src/liveness/round_state_test.rs: `.process_certificates(generate_sync_info(Some(1), None, None))`
$DIR/consensus/src/liveness/round_state_test.rs: `.process_certificates(generate_sync_info(None, Some(2), None))`
$DIR/consensus/src/liveness/round_state_test.rs: `.process_certificates(generate_sync_info(Some(2), Some(3), None))`
$DIR/consensus/src/liveness/round_state_test.rs: `.process_certificates(generate_sync_info(Some(4), Some(4), None))`
$DIR/consensus/src/liveness/round_state_test.rs: `.unwrap_or(0)`
$DIR/consensus/src/liveness/round_state_test.rs: `.unwrap_or(0)`
$DIR/consensus/src/liveness/round_state_test.rs: `.unwrap_or(0)`
$DIR/consensus/src/network_tests.rs: `self.node_consensus_txs.lock().insert(twin_id, consensus_tx);`
$DIR/consensus/src/network_tests.rs: `self.drop_config.write().add_node(twin_id);`
$DIR/consensus/src/network_tests.rs: `self.extend_author_to_twin_ids(twin_id.author, twin_id);`
$DIR/consensus/src/network_tests.rs: `self.executor.spawn(futures::future::join(fut1, fut2));`
$DIR/consensus/src/network_tests.rs: `msg_copies.push(msg_copy);`
$DIR/consensus/src/network_tests.rs: `nodes.push(TwinId {
                id: i,
                author: signer.author(),
            });`
$DIR/consensus/src/network_tests.rs: `round_partitions.insert(1, vec![vec![nodes[0]], vec![nodes[1], nodes[2]]]);`
$DIR/consensus/src/network_tests.rs: `round_partitions.insert(
            2,
            vec![vec![nodes[1]], vec![nodes[2]], vec![nodes[3], nodes[4]]],
        );`
$DIR/consensus/src/network_tests.rs: `shared_connections.write().insert(
                *peer,
                vec![
                    ProtocolId::ConsensusDirectSendJSON,
                    ProtocolId::ConsensusDirectSend,
                    ProtocolId::ConsensusRpc,
                ]
                .iter()
                .into(),
            );`
$DIR/consensus/src/network_tests.rs: `network_sender.initialize(shared_connections.clone());`
$DIR/consensus/src/network_tests.rs: `receivers.push(receiver);`
$DIR/consensus/src/network_tests.rs: `runtime.handle().spawn(task.start());`
$DIR/consensus/src/network_tests.rs: `nodes.push(node);`
$DIR/consensus/src/network_tests.rs: `nodes[0]
                .send_vote(vote_msg.clone(), peers[2..5].to_vec())
                .await;`
$DIR/consensus/src/network_tests.rs: `nodes[0]
                .broadcast(ConsensusMsg::ProposalMsg(Box::new(proposal.clone())))
                .await;`
$DIR/consensus/src/network_tests.rs: `shared_connections.write().insert(
                *peer,
                vec![
                    ProtocolId::ConsensusDirectSendJSON,
                    ProtocolId::ConsensusDirectSend,
                    ProtocolId::ConsensusRpc,
                ]
                .iter()
                .into(),
            );`
$DIR/consensus/src/network_tests.rs: `network_sender.initialize(shared_connections.clone());`
$DIR/consensus/src/network_tests.rs: `senders.push(network_sender);`
$DIR/consensus/src/network_tests.rs: `receivers.push(receiver);`
$DIR/consensus/src/network_tests.rs: `runtime.handle().spawn(task.start());`
$DIR/consensus/src/network_tests.rs: `nodes.push(node);`
$DIR/consensus/src/network_tests.rs: `node0.send_vote(vote_msg.clone(), vec![peer1]).await;`
$DIR/consensus/src/network_tests.rs: `node0.send_vote(vote_msg.clone(), vec![peer1]).await;`
$DIR/consensus/src/network_tests.rs: `request.response_sender.send(Ok(bytes.into())).unwrap();`
$DIR/consensus/src/network_tests.rs: `runtime.handle().spawn(on_request_block);`
$DIR/consensus/src/network_tests.rs: `peer_mgr_notifs_tx
            .push((peer_id, protocol_id), bad_msg)
            .unwrap();`
$DIR/consensus/src/network_tests.rs: `peer_mgr_notifs_tx
            .push((peer_id, protocol_id), liveness_check_msg)
            .unwrap();`
$DIR/consensus/src/network_tests.rs: `drop(peer_mgr_notifs_tx);`
$DIR/consensus/src/network_tests.rs: `drop(connection_notifs_tx);`
$DIR/consensus/src/network_tests.rs: `drop(self_sender);`
$DIR/consensus/src/network_tests.rs: `.node_consensus_txs.lock()`
$DIR/consensus/src/network_tests.rs: `.insert(twin_id, consensus_tx)`
$DIR/consensus/src/network_tests.rs: `.drop_config.write()`
$DIR/consensus/src/network_tests.rs: `.add_node(twin_id)`
$DIR/consensus/src/network_tests.rs: `.extend_author_to_twin_ids(twin_id.author, twin_id)`
$DIR/consensus/src/network_tests.rs: `.map(Ok)`
$DIR/consensus/src/network_tests.rs: `.forward(::futures::sink::drain())`
$DIR/consensus/src/network_tests.rs: `.executor.spawn(futures::future::join(fut1, fut2))`
$DIR/consensus/src/network_tests.rs: `.node_consensus_txs
            .lock()`
$DIR/consensus/src/network_tests.rs: `.get(&dst_twin_id)`
$DIR/consensus/src/network_tests.rs: `.protocol_id.from_bytes(&msg.mdata)`
$DIR/consensus/src/network_tests.rs: `.push(
            (src_twin_id.author, ProtocolId::ConsensusDirectSend),
            msg_notif,
        )`
$DIR/consensus/src/network_tests.rs: `.len()`
$DIR/consensus/src/network_tests.rs: `.outbound_msgs_rx.next()`
$DIR/consensus/src/network_tests.rs: `.enumerate()`
$DIR/consensus/src/network_tests.rs: `.protocol_id.from_bytes(&msg.mdata)`
$DIR/consensus/src/network_tests.rs: `.push(msg_copy)`
$DIR/consensus/src/network_tests.rs: `.author_to_twin_ids.read()`
$DIR/consensus/src/network_tests.rs: `.drop_config.read()`
$DIR/consensus/src/network_tests.rs: `.is_message_dropped(src, dst)`
$DIR/consensus/src/network_tests.rs: `.map_or(false, |r| {
                self.drop_config_round.is_message_dropped(src, dst, r)
            })`
$DIR/consensus/src/network_tests.rs: `.outbound_msgs_rx.next()`
$DIR/consensus/src/network_tests.rs: `.protocol_id.from_bytes(&msg.mdata)`
$DIR/consensus/src/network_tests.rs: `.handle()`
$DIR/consensus/src/network_tests.rs: `.enumerate()`
$DIR/consensus/src/network_tests.rs: `.push(TwinId {
                id: i,
                author: signer.author(),
            })`
$DIR/consensus/src/network_tests.rs: `.author()`
$DIR/consensus/src/network_tests.rs: `.insert(1, vec![vec![nodes[0]], vec![nodes[1], nodes[2]]])`
$DIR/consensus/src/network_tests.rs: `.insert(
            2,
            vec![vec![nodes[1]], vec![nodes[2]], vec![nodes[3], nodes[4]]],
        )`
$DIR/consensus/src/network_tests.rs: `.handle()`
$DIR/consensus/src/network_tests.rs: `.map(|signer| signer.author())`
$DIR/consensus/src/network_tests.rs: `.author()`
$DIR/consensus/src/network_tests.rs: `.collect()`
$DIR/consensus/src/network_tests.rs: `.enumerate()`
$DIR/consensus/src/network_tests.rs: `.write()`
$DIR/consensus/src/network_tests.rs: `.insert(
                *peer,
                vec![
                    ProtocolId::ConsensusDirectSendJSON,
                    ProtocolId::ConsensusDirectSend,
                    ProtocolId::ConsensusRpc,
                ]
                .iter()
                .into(),
            )`
$DIR/consensus/src/network_tests.rs: `.into()`
$DIR/consensus/src/network_tests.rs: `.initialize(shared_connections.clone())`
$DIR/consensus/src/network_tests.rs: `.push(receiver)`
$DIR/consensus/src/network_tests.rs: `.handle()`
$DIR/consensus/src/network_tests.rs: `.spawn(task.start())`
$DIR/consensus/src/network_tests.rs: `.push(node)`
$DIR/consensus/src/network_tests.rs: `.send_vote(vote_msg.clone(), peers[2..5].to_vec())`
$DIR/consensus/src/network_tests.rs: `.take(5)`
$DIR/consensus/src/network_tests.rs: `.skip(2)`
$DIR/consensus/src/network_tests.rs: `.consensus_messages.next()`
$DIR/consensus/src/network_tests.rs: `.broadcast(ConsensusMsg::ProposalMsg(Box::new(proposal.clone())))`
$DIR/consensus/src/network_tests.rs: `.take(num_nodes - 1)`
$DIR/consensus/src/network_tests.rs: `.consensus_messages.next()`
$DIR/consensus/src/network_tests.rs: `.handle()`
$DIR/consensus/src/network_tests.rs: `.map(|signer| signer.author())`
$DIR/consensus/src/network_tests.rs: `.author()`
$DIR/consensus/src/network_tests.rs: `.collect()`
$DIR/consensus/src/network_tests.rs: `.enumerate()`
$DIR/consensus/src/network_tests.rs: `.write()`
$DIR/consensus/src/network_tests.rs: `.insert(
                *peer,
                vec![
                    ProtocolId::ConsensusDirectSendJSON,
                    ProtocolId::ConsensusDirectSend,
                    ProtocolId::ConsensusRpc,
                ]
                .iter()
                .into(),
            )`
$DIR/consensus/src/network_tests.rs: `.into()`
$DIR/consensus/src/network_tests.rs: `.initialize(shared_connections.clone())`
$DIR/consensus/src/network_tests.rs: `.push(network_sender)`
$DIR/consensus/src/network_tests.rs: `.push(receiver)`
$DIR/consensus/src/network_tests.rs: `.handle()`
$DIR/consensus/src/network_tests.rs: `.spawn(task.start())`
$DIR/consensus/src/network_tests.rs: `.push(node)`
$DIR/consensus/src/network_tests.rs: `.remove(1)`
$DIR/consensus/src/network_tests.rs: `.next()`
$DIR/consensus/src/network_tests.rs: `.send_vote(vote_msg.clone(), vec![peer1])`
$DIR/consensus/src/network_tests.rs: `.send_vote(vote_msg.clone(), vec![peer1])`
$DIR/consensus/src/network_tests.rs: `.response_sender.send(Ok(bytes.into()))`
$DIR/consensus/src/network_tests.rs: `.into()`
$DIR/consensus/src/network_tests.rs: `.handle()`
$DIR/consensus/src/network_tests.rs: `.spawn(on_request_block)`
$DIR/consensus/src/network_tests.rs: `.request_block(
                    BlockRetrievalRequest::new(HashValue::zero(), 1),
                    peer,
                    Duration::from_secs(5),
                )`
$DIR/consensus/src/network_tests.rs: `.push((peer_id, protocol_id), bad_msg)`
$DIR/consensus/src/network_tests.rs: `.push((peer_id, protocol_id), liveness_check_msg)`
$DIR/consensus/src/pending_votes.rs: `self.author_to_vote.insert(vote.author(), vote.clone());`
$DIR/consensus/src/pending_votes.rs: `li_with_sig.add_signature(vote.author(), vote.signature().clone());`
$DIR/consensus/src/pending_votes.rs: `partial_tc.add_signature(vote.author(), timeout_signature.clone());`
$DIR/consensus/src/pending_votes.rs: `partial_tc.add(vote.author(), timeout.clone(), signature.clone());`
$DIR/consensus/src/pending_votes.rs: `::diem_logger::Logger::init_for_testing();`
$DIR/consensus/src/pending_votes.rs: `::diem_logger::Logger::init_for_testing();`
$DIR/consensus/src/pending_votes.rs: `vote1_author_0.add_timeout_signature(signature);`
$DIR/consensus/src/pending_votes.rs: `vote2_author_1.add_timeout_signature(signature);`
$DIR/consensus/src/pending_votes.rs: `::diem_logger::Logger::init_for_testing();`
$DIR/consensus/src/pending_votes.rs: `vote1_author_0.add_2chain_timeout(timeout, signature);`
$DIR/consensus/src/pending_votes.rs: `vote2_author_1.add_2chain_timeout(timeout, signature);`
$DIR/consensus/src/pending_votes.rs: `.ledger_info()`
$DIR/consensus/src/pending_votes.rs: `.hash()`
$DIR/consensus/src/pending_votes.rs: `.author_to_vote.get(&vote.author())`
$DIR/consensus/src/pending_votes.rs: `.author()`
$DIR/consensus/src/pending_votes.rs: `.ledger_info()`
$DIR/consensus/src/pending_votes.rs: `.hash()`
$DIR/consensus/src/pending_votes.rs: `.is_timeout()`
$DIR/consensus/src/pending_votes.rs: `.is_timeout()`
$DIR/consensus/src/pending_votes.rs: `.author_to_vote.insert(vote.author(), vote.clone())`
$DIR/consensus/src/pending_votes.rs: `.author()`
$DIR/consensus/src/pending_votes.rs: `.li_digest_to_votes.entry(li_digest)`
$DIR/consensus/src/pending_votes.rs: `.or_insert_with(|| {
            // if the ledger info with signatures doesn't exist yet, create it
            LedgerInfoWithSignatures::new(vote.ledger_info().clone(), BTreeMap::new())
        })`
$DIR/consensus/src/pending_votes.rs: `.ledger_info()`
$DIR/consensus/src/pending_votes.rs: `.add_signature(vote.author(), vote.signature().clone())`
$DIR/consensus/src/pending_votes.rs: `.author()`
$DIR/consensus/src/pending_votes.rs: `.signature()`
$DIR/consensus/src/pending_votes.rs: `.check_voting_power(li_with_sig.signatures().keys())`
$DIR/consensus/src/pending_votes.rs: `.signatures()`
$DIR/consensus/src/pending_votes.rs: `.keys()`
$DIR/consensus/src/pending_votes.rs: `.vote_data()`
$DIR/consensus/src/pending_votes.rs: `.timeout_signature()`
$DIR/consensus/src/pending_votes.rs: `.generate_timeout()`
$DIR/consensus/src/pending_votes.rs: `.maybe_partial_tc
                .get_or_insert_with(|| TimeoutCertificate::new(timeout))`
$DIR/consensus/src/pending_votes.rs: `.add_signature(vote.author(), timeout_signature.clone())`
$DIR/consensus/src/pending_votes.rs: `.author()`
$DIR/consensus/src/pending_votes.rs: `.check_voting_power(partial_tc.signatures().keys())`
$DIR/consensus/src/pending_votes.rs: `.signatures()`
$DIR/consensus/src/pending_votes.rs: `.keys()`
$DIR/consensus/src/pending_votes.rs: `.two_chain_timeout()`
$DIR/consensus/src/pending_votes.rs: `.maybe_partial_2chain_tc
                .get_or_insert_with(|| TwoChainTimeoutCertificate::new(timeout.clone()))`
$DIR/consensus/src/pending_votes.rs: `.add(vote.author(), timeout.clone(), signature.clone())`
$DIR/consensus/src/pending_votes.rs: `.author()`
$DIR/consensus/src/pending_votes.rs: `.check_voting_power(partial_tc.signers())`
$DIR/consensus/src/pending_votes.rs: `.signers()`
$DIR/consensus/src/pending_votes.rs: `.author()`
$DIR/consensus/src/pending_votes.rs: `.author()`
$DIR/consensus/src/pending_votes.rs: `.author()`
$DIR/consensus/src/pending_votes.rs: `.author()`
$DIR/consensus/src/pending_votes.rs: `.author()`
$DIR/consensus/src/pending_votes.rs: `.generate_timeout()`
$DIR/consensus/src/pending_votes.rs: `.sign(&signers[0])`
$DIR/consensus/src/pending_votes.rs: `.add_timeout_signature(signature)`
$DIR/consensus/src/pending_votes.rs: `.author()`
$DIR/consensus/src/pending_votes.rs: `.generate_timeout()`
$DIR/consensus/src/pending_votes.rs: `.sign(&signers[1])`
$DIR/consensus/src/pending_votes.rs: `.add_timeout_signature(signature)`
$DIR/consensus/src/pending_votes.rs: `.author()`
$DIR/consensus/src/pending_votes.rs: `.generate_2chain_timeout(certificate_for_genesis())`
$DIR/consensus/src/pending_votes.rs: `.sign(&signers[0])`
$DIR/consensus/src/pending_votes.rs: `.add_2chain_timeout(timeout, signature)`
$DIR/consensus/src/pending_votes.rs: `.author()`
$DIR/consensus/src/pending_votes.rs: `.generate_2chain_timeout(certificate_for_genesis())`
$DIR/consensus/src/pending_votes.rs: `.sign(&signers[1])`
$DIR/consensus/src/pending_votes.rs: `.add_2chain_timeout(timeout, signature)`
$DIR/consensus/src/round_manager_fuzzing.rs: `safety_rules.initialize(&proof).unwrap();`
$DIR/consensus/src/round_manager_fuzzing.rs: `time_service.sleep(Duration::from_millis(1));`
$DIR/consensus/src/round_manager_fuzzing.rs: `block_on(async move {
        // TODO: make sure this obtains a vote when testing
        // TODO: make sure that if this obtains a vote, it's for round 1, etc.
        let _ = round_manager.process_proposal_msg(proposal).await;
    });`
$DIR/consensus/src/round_manager_fuzzing.rs: `.generate_proposal(NewRoundEvent {
                round: 1,
                reason: NewRoundReason::QCReady,
                timeout: std::time::Duration::new(5, 0),
            })`
$DIR/consensus/src/round_manager_fuzzing.rs: `.author()`
$DIR/consensus/src/round_manager_fuzzing.rs: `.public_key()`
$DIR/consensus/src/round_manager_fuzzing.rs: `.author()`
$DIR/consensus/src/round_manager_fuzzing.rs: `.public_key()`
$DIR/consensus/src/round_manager_fuzzing.rs: `.into()`
$DIR/consensus/src/round_manager_fuzzing.rs: `.initialize(&proof)`
$DIR/consensus/src/round_manager_fuzzing.rs: `.get_validator_set()`
$DIR/consensus/src/round_manager_fuzzing.rs: `.into()`
$DIR/consensus/src/round_manager_fuzzing.rs: `.author()`
$DIR/consensus/src/round_manager_fuzzing.rs: `.sleep(Duration::from_millis(1))`
$DIR/consensus/src/round_manager_fuzzing.rs: `.author()`
$DIR/consensus/src/round_manager_fuzzing.rs: `.verify_well_formed()`
$DIR/consensus/src/round_manager_fuzzing.rs: `.process_proposal_msg(proposal)`
$DIR/consensus/src/round_manager_test.rs: `node.block_store
            .insert_single_quorum_cert(block_0_quorum_cert.clone())
            .unwrap();`
$DIR/consensus/src/round_manager_test.rs: `tc.add_signature(node.signer.author(), timeout_signature);`
$DIR/consensus/src/round_manager_test.rs: `tc.add_signature(inserter.signer().author(), inserter.signer().sign(&timeout));`
$DIR/consensus/src/round_manager_test.rs: `data.push((proposal, tc));`
$DIR/consensus/src/round_manager_test.rs: `timed_block_on(&mut runtime, async {
        for (proposal, tc) in &data {
            let proposal_msg = ProposalMsg::new(
                proposal.clone(),
                SyncInfo::new(
                    proposal.quorum_cert().clone(),
                    genesis_qc.clone(),
                    Some(tc.clone()),
                    None,
                ),
            );
            node.round_manager
                .process_proposal_msg(proposal_msg)
                .await
                .unwrap();
        }
    });`
$DIR/consensus/src/round_manager_test.rs: `node = node.restart(&mut playground, runtime.handle().clone());`
$DIR/consensus/src/round_manager_test.rs: `runtime.spawn(playground.start());`
$DIR/consensus/src/round_manager_test.rs: `ahead_node
        .block_store
        .execute_and_insert_block(block_0)
        .unwrap();`
$DIR/consensus/src/round_manager_test.rs: `ahead_node
        .block_store
        .insert_single_quorum_cert(block_0_quorum_cert.clone())
        .unwrap();`
$DIR/consensus/src/round_manager_test.rs: `runtime.spawn(playground.start());`
$DIR/consensus/src/round_manager_test.rs: `runtime.spawn(playground.start());`
$DIR/consensus/src/round_manager_test.rs: `reset_safety_rules(&mut node);`
$DIR/consensus/src/round_manager_test.rs: `reset_safety_rules(&mut node);`
$DIR/consensus/src/round_manager_test.rs: `reset_safety_rules(&mut node);`
$DIR/consensus/src/round_manager_test.rs: `.storage
            .try_start()`
$DIR/consensus/src/round_manager_test.rs: `.unwrap_or_else(|e| panic!("fail to restart due to: {}", e))`
$DIR/consensus/src/round_manager_test.rs: `.all_events.next()`
$DIR/consensus/src/round_manager_test.rs: `.all_events.next()`
$DIR/consensus/src/round_manager_test.rs: `.all_events.next()`
$DIR/consensus/src/round_manager_test.rs: `.all_events.next()`
$DIR/consensus/src/round_manager_test.rs: `.handle()`
$DIR/consensus/src/round_manager_test.rs: `.handle()`
$DIR/consensus/src/round_manager_test.rs: `.block_store.ordered_root()`
$DIR/consensus/src/round_manager_test.rs: `.proposal()`
$DIR/consensus/src/round_manager_test.rs: `.id()`
$DIR/consensus/src/round_manager_test.rs: `.round_manager
            .process_proposal_msg(proposal_msg)`
$DIR/consensus/src/round_manager_test.rs: `.round_manager.process_vote_msg(vote_msg)`
$DIR/consensus/src/round_manager_test.rs: `.proposal()`
$DIR/consensus/src/round_manager_test.rs: `.handle()`
$DIR/consensus/src/round_manager_test.rs: `.handle()`
$DIR/consensus/src/round_manager_test.rs: `.id()`
$DIR/consensus/src/round_manager_test.rs: `.round_manager.process_proposal(proposal)`
$DIR/consensus/src/round_manager_test.rs: `.round_manager.consensus_state()`
$DIR/consensus/src/round_manager_test.rs: `.handle()`
$DIR/consensus/src/round_manager_test.rs: `.handle()`
$DIR/consensus/src/round_manager_test.rs: `.id()`
$DIR/consensus/src/round_manager_test.rs: `.id()`
$DIR/consensus/src/round_manager_test.rs: `.round_manager
            .process_proposal(new_block)`
$DIR/consensus/src/round_manager_test.rs: `.round_manager
            .process_proposal(old_block)`
$DIR/consensus/src/round_manager_test.rs: `.handle()`
$DIR/consensus/src/round_manager_test.rs: `.handle()`
$DIR/consensus/src/round_manager_test.rs: `.pop()`
$DIR/consensus/src/round_manager_test.rs: `.round_manager
            .process_proposal_msg(good_proposal)`
$DIR/consensus/src/round_manager_test.rs: `.handle()`
$DIR/consensus/src/round_manager_test.rs: `.handle()`
$DIR/consensus/src/round_manager_test.rs: `.pop()`
$DIR/consensus/src/round_manager_test.rs: `.proposal()`
$DIR/consensus/src/round_manager_test.rs: `.round_manager
            .process_proposal_msg(proposal_msg)`
$DIR/consensus/src/round_manager_test.rs: `.quorum_cert()`
$DIR/consensus/src/round_manager_test.rs: `.certified_block()`
$DIR/consensus/src/round_manager_test.rs: `.gen_block_info(
                parent_block_info.executed_state_id(),
                parent_block_info.version(),
                parent_block_info.next_epoch_state().cloned(),
            )`
$DIR/consensus/src/round_manager_test.rs: `.executed_state_id()`
$DIR/consensus/src/round_manager_test.rs: `.version()`
$DIR/consensus/src/round_manager_test.rs: `.next_epoch_state()`
$DIR/consensus/src/round_manager_test.rs: `.block_store
            .insert_single_quorum_cert(block_0_quorum_cert.clone())`
$DIR/consensus/src/round_manager_test.rs: `.round_manager
            .process_local_timeout(1)`
$DIR/consensus/src/round_manager_test.rs: `.handle()`
$DIR/consensus/src/round_manager_test.rs: `.handle()`
$DIR/consensus/src/round_manager_test.rs: `.pop()`
$DIR/consensus/src/round_manager_test.rs: `.pop()`
$DIR/consensus/src/round_manager_test.rs: `.round_manager
            .process_proposal_msg(good_proposal.clone())`
$DIR/consensus/src/round_manager_test.rs: `.handle()`
$DIR/consensus/src/round_manager_test.rs: `.handle()`
$DIR/consensus/src/round_manager_test.rs: `.pop()`
$DIR/consensus/src/round_manager_test.rs: `.sign(&node.signer)`
$DIR/consensus/src/round_manager_test.rs: `.add_signature(node.signer.author(), timeout_signature)`
$DIR/consensus/src/round_manager_test.rs: `.signer.author()`
$DIR/consensus/src/round_manager_test.rs: `.round_manager
            .process_proposal_msg(skip_round_proposal)`
$DIR/consensus/src/round_manager_test.rs: `.handle()`
$DIR/consensus/src/round_manager_test.rs: `.handle()`
$DIR/consensus/src/round_manager_test.rs: `.pop()`
$DIR/consensus/src/round_manager_test.rs: `.id()`
$DIR/consensus/src/round_manager_test.rs: `.round_manager
            .process_proposal_msg(proposal)`
$DIR/consensus/src/round_manager_test.rs: `.round_manager
            .process_block_retrieval(single_block_request)`
$DIR/consensus/src/round_manager_test.rs: `.round_manager
            .process_block_retrieval(missing_block_request)`
$DIR/consensus/src/round_manager_test.rs: `.round_manager
            .process_block_retrieval(many_block_request)`
$DIR/consensus/src/round_manager_test.rs: `.handle()`
$DIR/consensus/src/round_manager_test.rs: `.handle()`
$DIR/consensus/src/round_manager_test.rs: `.pop()`
$DIR/consensus/src/round_manager_test.rs: `.create_block_with_qc(genesis_qc.clone(), i, i, vec![])`
$DIR/consensus/src/round_manager_test.rs: `.add_signature(inserter.signer().author(), inserter.signer().sign(&timeout))`
$DIR/consensus/src/round_manager_test.rs: `.signer()`
$DIR/consensus/src/round_manager_test.rs: `.author()`
$DIR/consensus/src/round_manager_test.rs: `.signer()`
$DIR/consensus/src/round_manager_test.rs: `.sign(&timeout)`
$DIR/consensus/src/round_manager_test.rs: `.push((proposal, tc))`
$DIR/consensus/src/round_manager_test.rs: `.quorum_cert()`
$DIR/consensus/src/round_manager_test.rs: `.round_manager
                .process_proposal_msg(proposal_msg)`
$DIR/consensus/src/round_manager_test.rs: `.handle()`
$DIR/consensus/src/round_manager_test.rs: `.round_manager.consensus_state()`
$DIR/consensus/src/round_manager_test.rs: `.handle()`
$DIR/consensus/src/round_manager_test.rs: `.handle()`
$DIR/consensus/src/round_manager_test.rs: `.block_store.ordered_root()`
$DIR/consensus/src/round_manager_test.rs: `.round_manager
            .process_local_timeout(1)`
$DIR/consensus/src/round_manager_test.rs: `.vote()`
$DIR/consensus/src/round_manager_test.rs: `.handle()`
$DIR/consensus/src/round_manager_test.rs: `.handle()`
$DIR/consensus/src/round_manager_test.rs: `.proposal()`
$DIR/consensus/src/round_manager_test.rs: `.id()`
$DIR/consensus/src/round_manager_test.rs: `.round_manager
            .process_proposal_msg(proposal_msg)`
$DIR/consensus/src/round_manager_test.rs: `.vote()`
$DIR/consensus/src/round_manager_test.rs: `.round_manager
            .process_local_timeout(1)`
$DIR/consensus/src/round_manager_test.rs: `.vote()`
$DIR/consensus/src/round_manager_test.rs: `.handle()`
$DIR/consensus/src/round_manager_test.rs: `.handle()`
$DIR/consensus/src/round_manager_test.rs: `.spawn(playground.start())`
$DIR/consensus/src/round_manager_test.rs: `.start()`
$DIR/consensus/src/round_manager_test.rs: `.quorum_cert()`
$DIR/consensus/src/round_manager_test.rs: `.certified_block()`
$DIR/consensus/src/round_manager_test.rs: `.gen_block_info(
            parent_block_info.executed_state_id(),
            parent_block_info.version(),
            parent_block_info.next_epoch_state().cloned(),
        )`
$DIR/consensus/src/round_manager_test.rs: `.executed_state_id()`
$DIR/consensus/src/round_manager_test.rs: `.version()`
$DIR/consensus/src/round_manager_test.rs: `.next_epoch_state()`
$DIR/consensus/src/round_manager_test.rs: `.pop()`
$DIR/consensus/src/round_manager_test.rs: `.pop()`
$DIR/consensus/src/round_manager_test.rs: `.block_store
        .execute_and_insert_block(block_0)`
$DIR/consensus/src/round_manager_test.rs: `.block_store
        .insert_single_quorum_cert(block_0_quorum_cert.clone())`
$DIR/consensus/src/round_manager_test.rs: `.round_manager
            .process_local_timeout(1)`
$DIR/consensus/src/round_manager_test.rs: `.round_manager
            .process_vote_msg(timeout_vote_msg)`
$DIR/consensus/src/round_manager_test.rs: `.handle()`
$DIR/consensus/src/round_manager_test.rs: `.handle()`
$DIR/consensus/src/round_manager_test.rs: `.pop()`
$DIR/consensus/src/round_manager_test.rs: `.spawn(playground.start())`
$DIR/consensus/src/round_manager_test.rs: `.start()`
$DIR/consensus/src/round_manager_test.rs: `.round_manager
                .process_proposal_msg(proposal_msg)`
$DIR/consensus/src/round_manager_test.rs: `.round_manager.process_vote_msg(vote_msg)`
$DIR/consensus/src/round_manager_test.rs: `.round_manager
            .process_proposal_msg(block_4.clone())`
$DIR/consensus/src/round_manager_test.rs: `.commit_cb_receiver.next()`
$DIR/consensus/src/round_manager_test.rs: `.vote()`
$DIR/consensus/src/round_manager_test.rs: `.vote_data()`
$DIR/consensus/src/round_manager_test.rs: `.proposed()`
$DIR/consensus/src/round_manager_test.rs: `.parent()`
$DIR/consensus/src/round_manager_test.rs: `.round_manager
            .ensure_round_and_sync_up(
                sync_info.highest_round() + 1,
                &sync_info,
                node.signer.author(),
                true,
            )`
$DIR/consensus/src/round_manager_test.rs: `.highest_round()`
$DIR/consensus/src/round_manager_test.rs: `.signer.author()`
$DIR/consensus/src/round_manager_test.rs: `.handle()`
$DIR/consensus/src/round_manager_test.rs: `.handle()`
$DIR/consensus/src/round_manager_test.rs: `.pop()`
$DIR/consensus/src/round_manager_test.rs: `.spawn(playground.start())`
$DIR/consensus/src/round_manager_test.rs: `.start()`
$DIR/consensus/src/round_manager_test.rs: `.round_manager
                .process_proposal_msg(proposal_msg)`
$DIR/consensus/src/round_manager_test.rs: `.vote()`
$DIR/consensus/src/round_manager_test.rs: `.vote_data()`
$DIR/consensus/src/round_manager_test.rs: `.proposed()`
$DIR/consensus/src/round_manager_test.rs: `.round()`
$DIR/consensus/src/round_manager_test.rs: `.round_manager
                .process_local_timeout(round)`
$DIR/consensus/src/round_manager_test.rs: `.round_manager.process_vote_msg(vote_msg)`
$DIR/consensus/src/twins/basic_twins_test.rs: `runtime.spawn(playground.start());`
$DIR/consensus/src/twins/basic_twins_test.rs: `runtime.spawn(playground.start());`
$DIR/consensus/src/twins/basic_twins_test.rs: `commit_seen = true;`
$DIR/consensus/src/twins/basic_twins_test.rs: `round_proposers.insert(i, 0);`
$DIR/consensus/src/twins/basic_twins_test.rs: `round_partitions.insert(
            i,
            vec![
                vec![n0_twin_id, n1_twin_id, n2_twin_id],
                vec![n3_twin_id, twin0_twin_id, twin1_twin_id],
            ],
        );`
$DIR/consensus/src/twins/basic_twins_test.rs: `runtime.spawn(playground.start());`
$DIR/consensus/src/twins/basic_twins_test.rs: `round_proposers.insert(i, 0);`
$DIR/consensus/src/twins/basic_twins_test.rs: `runtime.spawn(playground.start());`
$DIR/consensus/src/twins/basic_twins_test.rs: `.handle()`
$DIR/consensus/src/twins/basic_twins_test.rs: `.storage.get_ledger_info()`
$DIR/consensus/src/twins/basic_twins_test.rs: `.wait_for_messages(1, NetworkPlayground::proposals_only)`
$DIR/consensus/src/twins/basic_twins_test.rs: `.handle()`
$DIR/consensus/src/twins/basic_twins_test.rs: `.spawn(playground.start())`
$DIR/consensus/src/twins/basic_twins_test.rs: `.start()`
$DIR/consensus/src/twins/basic_twins_test.rs: `.commit_cb_receiver.next()`
$DIR/consensus/src/twins/basic_twins_test.rs: `.commit_cb_receiver.try_next()`
$DIR/consensus/src/twins/basic_twins_test.rs: `.handle()`
$DIR/consensus/src/twins/basic_twins_test.rs: `.spawn(playground.start())`
$DIR/consensus/src/twins/basic_twins_test.rs: `.start()`
$DIR/consensus/src/twins/basic_twins_test.rs: `.commit_cb_receiver.try_next()`
$DIR/consensus/src/twins/basic_twins_test.rs: `.handle()`
$DIR/consensus/src/twins/basic_twins_test.rs: `.insert(i, 0)`
$DIR/consensus/src/twins/basic_twins_test.rs: `.insert(
            i,
            vec![
                vec![n0_twin_id, n1_twin_id, n2_twin_id],
                vec![n3_twin_id, twin0_twin_id, twin1_twin_id],
            ],
        )`
$DIR/consensus/src/twins/basic_twins_test.rs: `.spawn(playground.start())`
$DIR/consensus/src/twins/basic_twins_test.rs: `.start()`
$DIR/consensus/src/twins/basic_twins_test.rs: `.commit_cb_receiver.next()`
$DIR/consensus/src/twins/basic_twins_test.rs: `.commit_cb_receiver.next()`
$DIR/consensus/src/twins/basic_twins_test.rs: `.ledger_info()`
$DIR/consensus/src/twins/basic_twins_test.rs: `.commit_info()`
$DIR/consensus/src/twins/basic_twins_test.rs: `.id()`
$DIR/consensus/src/twins/basic_twins_test.rs: `.ledger_info()`
$DIR/consensus/src/twins/basic_twins_test.rs: `.commit_info()`
$DIR/consensus/src/twins/basic_twins_test.rs: `.id()`
$DIR/consensus/src/twins/basic_twins_test.rs: `.handle()`
$DIR/consensus/src/twins/basic_twins_test.rs: `.insert(i, 0)`
$DIR/consensus/src/twins/basic_twins_test.rs: `.spawn(playground.start())`
$DIR/consensus/src/twins/basic_twins_test.rs: `.start()`
$DIR/consensus/src/twins/basic_twins_test.rs: `.commit_cb_receiver.next()`
$DIR/consensus/src/twins/basic_twins_test.rs: `.commit_cb_receiver.next()`
$DIR/consensus/src/twins/basic_twins_test.rs: `.ledger_info()`
$DIR/consensus/src/twins/basic_twins_test.rs: `.commit_info()`
$DIR/consensus/src/twins/basic_twins_test.rs: `.id()`
$DIR/consensus/src/twins/basic_twins_test.rs: `.ledger_info()`
$DIR/consensus/src/twins/basic_twins_test.rs: `.commit_info()`
$DIR/consensus/src/twins/basic_twins_test.rs: `.id()`
$DIR/crates/bounded-executor/src/lib.rs: `drop(spawn_permit);`
$DIR/crates/bounded-executor/src/lib.rs: `tx1.send(()).unwrap();`
$DIR/crates/bounded-executor/src/lib.rs: `block_on(f1).unwrap().unwrap();`
$DIR/crates/bounded-executor/src/lib.rs: `tx2.send(()).unwrap();`
$DIR/crates/bounded-executor/src/lib.rs: `block_on(executor.spawn(async move {
                // acquired permit, there should only ever be MAX_WORKERS in this
                // critical section

                let prev_workers = WORKERS.fetch_add(1, Ordering::SeqCst);
                assert!(prev_workers < MAX_WORKERS);

                // yield back to the tokio scheduler
                yield_task().await;

                let prev_workers = WORKERS.fetch_sub(1, Ordering::SeqCst);
                assert!(prev_workers > 0 && prev_workers <= MAX_WORKERS);

                COMPLETED_TASKS.fetch_add(1, Ordering::Relaxed);
            }));`
$DIR/crates/bounded-executor/src/lib.rs: `COMPLETED_TASKS.fetch_add(1, Ordering::Relaxed);`
$DIR/crates/bounded-executor/src/lib.rs: `.acquire_owned()`
$DIR/crates/bounded-executor/src/lib.rs: `.try_acquire_owned()`
$DIR/crates/bounded-executor/src/lib.rs: `.ok()`
$DIR/crates/bounded-executor/src/lib.rs: `.map(move |ret| {
            drop(spawn_permit);
            ret
        })`
$DIR/crates/bounded-executor/src/lib.rs: `.handle()`
$DIR/crates/bounded-executor/src/lib.rs: `.send(())`
$DIR/crates/bounded-executor/src/lib.rs: `.send(())`
$DIR/crates/bounded-executor/src/lib.rs: `.handle()`
$DIR/crates/bounded-executor/src/lib.rs: `.fetch_add(1, Ordering::SeqCst)`
$DIR/crates/bounded-executor/src/lib.rs: `.fetch_sub(1, Ordering::SeqCst)`
$DIR/crates/bounded-executor/src/lib.rs: `.fetch_add(1, Ordering::Relaxed)`
$DIR/crates/bounded-executor/src/lib.rs: `.load(Ordering::Relaxed)`
$DIR/crates/channel/src/diem_channel_test.rs: `sender.push(0, 0).unwrap();`
$DIR/crates/channel/src/diem_channel_test.rs: `sender.push(0, 1).unwrap();`
$DIR/crates/channel/src/diem_channel_test.rs: `sender.push(0, 2).unwrap();`
$DIR/crates/channel/src/diem_channel_test.rs: `sender.push(0, 3).unwrap();`
$DIR/crates/channel/src/diem_channel_test.rs: `sleep(Duration::from_millis(100)).await;`
$DIR/crates/channel/src/diem_channel_test.rs: `sender.push(0, 0).unwrap();`
$DIR/crates/channel/src/diem_channel_test.rs: `sleep(Duration::from_millis(100)).await;`
$DIR/crates/channel/src/diem_channel_test.rs: `sender.push(0, 1).unwrap();`
$DIR/crates/channel/src/diem_channel_test.rs: `sleep(Duration::from_millis(100)).await;`
$DIR/crates/channel/src/diem_channel_test.rs: `sender.push(0, 2).unwrap();`
$DIR/crates/channel/src/diem_channel_test.rs: `sender.push(0, 0).unwrap();`
$DIR/crates/channel/src/diem_channel_test.rs: `sender.push(0, 1).unwrap();`
$DIR/crates/channel/src/diem_channel_test.rs: `block_on(f1);`
$DIR/crates/channel/src/diem_channel_test.rs: `sender
                .push(
                    AccountAddress::new([validator as u8; AccountAddress::LENGTH]),
                    (validator, message),
                )
                .unwrap();`
$DIR/crates/channel/src/diem_channel_test.rs: `block_on(async {
        for i in 0..num_validators {
            assert_eq!(
                receiver.select_next_some().await,
                (i, expected_last_message)
            );
        }
    });`
$DIR/crates/channel/src/diem_channel_test.rs: `sender.push(0, 'a').unwrap();`
$DIR/crates/channel/src/diem_channel_test.rs: `sender.push(0, 'b').unwrap();`
$DIR/crates/channel/src/diem_channel_test.rs: `sender
        .push_with_feedback(0, 'c', Some(c_status_tx))
        .unwrap();`
$DIR/crates/channel/src/diem_channel_test.rs: `sender
        .push_with_feedback(0, 'd', Some(d_status_tx))
        .unwrap();`
$DIR/crates/channel/src/diem_channel_test.rs: `.push(0, 0)`
$DIR/crates/channel/src/diem_channel_test.rs: `.push(0, 1)`
$DIR/crates/channel/src/diem_channel_test.rs: `.push(0, 2)`
$DIR/crates/channel/src/diem_channel_test.rs: `.push(0, 3)`
$DIR/crates/channel/src/diem_channel_test.rs: `.push(0, 0)`
$DIR/crates/channel/src/diem_channel_test.rs: `.push(0, 1)`
$DIR/crates/channel/src/diem_channel_test.rs: `.push(0, 2)`
$DIR/crates/channel/src/diem_channel_test.rs: `.push(0, 0)`
$DIR/crates/channel/src/diem_channel_test.rs: `.push(0, 1)`
$DIR/crates/channel/src/diem_channel_test.rs: `.push(
                    AccountAddress::new([validator as u8; AccountAddress::LENGTH]),
                    (validator, message),
                )`
$DIR/crates/channel/src/diem_channel_test.rs: `.push(0, 'a')`
$DIR/crates/channel/src/diem_channel_test.rs: `.push(0, 'b')`
$DIR/crates/channel/src/diem_channel_test.rs: `.push_with_feedback(0, 'c', Some(c_status_tx))`
$DIR/crates/channel/src/diem_channel_test.rs: `.push_with_feedback(0, 'd', Some(d_status_tx))`
$DIR/crates/channel/src/message_queues_test.rs: `q.push(
        validator,
        ProposalMsg {
            msg: "msg1".to_string(),
        },
    );`
$DIR/crates/channel/src/message_queues_test.rs: `q.push(
        validator,
        ProposalMsg {
            msg: "msg2".to_string(),
        },
    );`
$DIR/crates/channel/src/message_queues_test.rs: `q.push(
        validator,
        ProposalMsg {
            msg: "msg3".to_string(),
        },
    );`
$DIR/crates/channel/src/message_queues_test.rs: `q.push(
        validator,
        ProposalMsg {
            msg: "msg1".to_string(),
        },
    );`
$DIR/crates/channel/src/message_queues_test.rs: `q.push(
        validator,
        ProposalMsg {
            msg: "msg2".to_string(),
        },
    );`
$DIR/crates/channel/src/message_queues_test.rs: `q.push(
        validator,
        ProposalMsg {
            msg: "msg3".to_string(),
        },
    );`
$DIR/crates/channel/src/message_queues_test.rs: `q.push(
        validator,
        ProposalMsg {
            msg: "msg4".to_string(),
        },
    );`
$DIR/crates/channel/src/message_queues_test.rs: `q.push(
        validator,
        ProposalMsg {
            msg: "msg1".to_string(),
        },
    );`
$DIR/crates/channel/src/message_queues_test.rs: `q.push(
        validator,
        ProposalMsg {
            msg: "msg2".to_string(),
        },
    );`
$DIR/crates/channel/src/message_queues_test.rs: `q.push(
        validator,
        ProposalMsg {
            msg: "msg3".to_string(),
        },
    );`
$DIR/crates/channel/src/message_queues_test.rs: `q.push(
        validator,
        ProposalMsg {
            msg: "msg1".to_string(),
        },
    );`
$DIR/crates/channel/src/message_queues_test.rs: `q.push(
        validator,
        ProposalMsg {
            msg: "msg2".to_string(),
        },
    );`
$DIR/crates/channel/src/message_queues_test.rs: `q.push(
        validator,
        ProposalMsg {
            msg: "msg3".to_string(),
        },
    );`
$DIR/crates/channel/src/message_queues_test.rs: `q.push(
        validator,
        ProposalMsg {
            msg: "msg4".to_string(),
        },
    );`
$DIR/crates/channel/src/message_queues_test.rs: `q.push(
        validator,
        ProposalMsg {
            msg: "msg1".to_string(),
        },
    );`
$DIR/crates/channel/src/message_queues_test.rs: `q.push(
        validator,
        ProposalMsg {
            msg: "msg2".to_string(),
        },
    );`
$DIR/crates/channel/src/message_queues_test.rs: `q.push(
        validator,
        ProposalMsg {
            msg: "msg3".to_string(),
        },
    );`
$DIR/crates/channel/src/message_queues_test.rs: `q.push(
        validator,
        ProposalMsg {
            msg: "msg1".to_string(),
        },
    );`
$DIR/crates/channel/src/message_queues_test.rs: `q.push(
        validator,
        ProposalMsg {
            msg: "msg2".to_string(),
        },
    );`
$DIR/crates/channel/src/message_queues_test.rs: `q.push(
        validator,
        ProposalMsg {
            msg: "msg3".to_string(),
        },
    );`
$DIR/crates/channel/src/message_queues_test.rs: `q.push(
        validator,
        ProposalMsg {
            msg: "msg4".to_string(),
        },
    );`
$DIR/crates/channel/src/message_queues_test.rs: `q.push(
        validator1,
        ProposalMsg {
            msg: "validator1_msg1".to_string(),
        },
    );`
$DIR/crates/channel/src/message_queues_test.rs: `q.push(
        validator1,
        ProposalMsg {
            msg: "validator1_msg2".to_string(),
        },
    );`
$DIR/crates/channel/src/message_queues_test.rs: `q.push(
        validator1,
        ProposalMsg {
            msg: "validator1_msg3".to_string(),
        },
    );`
$DIR/crates/channel/src/message_queues_test.rs: `q.push(
        validator2,
        ProposalMsg {
            msg: "validator2_msg1".to_string(),
        },
    );`
$DIR/crates/channel/src/message_queues_test.rs: `q.push(
        validator3,
        ProposalMsg {
            msg: "validator3_msg1".to_string(),
        },
    );`
$DIR/crates/channel/src/message_queues_test.rs: `q.push(
        validator1,
        ProposalMsg {
            msg: "validator1_msg1".to_string(),
        },
    );`
$DIR/crates/channel/src/message_queues_test.rs: `q.push(
        validator1,
        ProposalMsg {
            msg: "validator1_msg2".to_string(),
        },
    );`
$DIR/crates/channel/src/message_queues_test.rs: `q.push(
        validator1,
        ProposalMsg {
            msg: "validator1_msg3".to_string(),
        },
    );`
$DIR/crates/channel/src/message_queues_test.rs: `q.push(
        validator2,
        ProposalMsg {
            msg: "validator2_msg1".to_string(),
        },
    );`
$DIR/crates/channel/src/message_queues_test.rs: `q.push(
        validator3,
        ProposalMsg {
            msg: "validator3_msg1".to_string(),
        },
    );`
$DIR/crates/channel/src/message_queues_test.rs: `q.push(
        validator1,
        ProposalMsg {
            msg: "validator1_msg1".to_string(),
        },
    );`
$DIR/crates/channel/src/message_queues_test.rs: `q.push(
        validator1,
        ProposalMsg {
            msg: "validator1_msg2".to_string(),
        },
    );`
$DIR/crates/channel/src/message_queues_test.rs: `q.push(
        validator1,
        ProposalMsg {
            msg: "validator1_msg3".to_string(),
        },
    );`
$DIR/crates/channel/src/message_queues_test.rs: `q.push(
        validator2,
        ProposalMsg {
            msg: "validator2_msg1".to_string(),
        },
    );`
$DIR/crates/channel/src/message_queues_test.rs: `q.push(
        validator3,
        ProposalMsg {
            msg: "validator3_msg1".to_string(),
        },
    );`
$DIR/crates/channel/src/message_queues_test.rs: `q.push(
        validator,
        ProposalMsg {
            msg: "msg1".to_string(),
        },
    );`
$DIR/crates/channel/src/message_queues_test.rs: `q.push(
        validator,
        ProposalMsg {
            msg: "msg2".to_string(),
        },
    );`
$DIR/crates/channel/src/message_queues_test.rs: `q.clear();`
$DIR/crates/channel/src/message_queues_test.rs: `q.push(
        validator,
        ProposalMsg {
            msg: "msg3".to_string(),
        },
    );`
$DIR/crates/channel/src/message_queues_test.rs: `.push(
        validator,
        ProposalMsg {
            msg: "msg1".to_string(),
        },
    )`
$DIR/crates/channel/src/message_queues_test.rs: `.push(
        validator,
        ProposalMsg {
            msg: "msg2".to_string(),
        },
    )`
$DIR/crates/channel/src/message_queues_test.rs: `.push(
        validator,
        ProposalMsg {
            msg: "msg3".to_string(),
        },
    )`
$DIR/crates/channel/src/message_queues_test.rs: `.push(
        validator,
        ProposalMsg {
            msg: "msg1".to_string(),
        },
    )`
$DIR/crates/channel/src/message_queues_test.rs: `.push(
        validator,
        ProposalMsg {
            msg: "msg2".to_string(),
        },
    )`
$DIR/crates/channel/src/message_queues_test.rs: `.push(
        validator,
        ProposalMsg {
            msg: "msg3".to_string(),
        },
    )`
$DIR/crates/channel/src/message_queues_test.rs: `.push(
        validator,
        ProposalMsg {
            msg: "msg4".to_string(),
        },
    )`
$DIR/crates/channel/src/message_queues_test.rs: `.push(
        validator,
        ProposalMsg {
            msg: "msg1".to_string(),
        },
    )`
$DIR/crates/channel/src/message_queues_test.rs: `.push(
        validator,
        ProposalMsg {
            msg: "msg2".to_string(),
        },
    )`
$DIR/crates/channel/src/message_queues_test.rs: `.push(
        validator,
        ProposalMsg {
            msg: "msg3".to_string(),
        },
    )`
$DIR/crates/channel/src/message_queues_test.rs: `.push(
        validator,
        ProposalMsg {
            msg: "msg1".to_string(),
        },
    )`
$DIR/crates/channel/src/message_queues_test.rs: `.push(
        validator,
        ProposalMsg {
            msg: "msg2".to_string(),
        },
    )`
$DIR/crates/channel/src/message_queues_test.rs: `.push(
        validator,
        ProposalMsg {
            msg: "msg3".to_string(),
        },
    )`
$DIR/crates/channel/src/message_queues_test.rs: `.push(
        validator,
        ProposalMsg {
            msg: "msg4".to_string(),
        },
    )`
$DIR/crates/channel/src/message_queues_test.rs: `.push(
        validator,
        ProposalMsg {
            msg: "msg1".to_string(),
        },
    )`
$DIR/crates/channel/src/message_queues_test.rs: `.push(
        validator,
        ProposalMsg {
            msg: "msg2".to_string(),
        },
    )`
$DIR/crates/channel/src/message_queues_test.rs: `.push(
        validator,
        ProposalMsg {
            msg: "msg3".to_string(),
        },
    )`
$DIR/crates/channel/src/message_queues_test.rs: `.push(
        validator,
        ProposalMsg {
            msg: "msg1".to_string(),
        },
    )`
$DIR/crates/channel/src/message_queues_test.rs: `.push(
        validator,
        ProposalMsg {
            msg: "msg2".to_string(),
        },
    )`
$DIR/crates/channel/src/message_queues_test.rs: `.push(
        validator,
        ProposalMsg {
            msg: "msg3".to_string(),
        },
    )`
$DIR/crates/channel/src/message_queues_test.rs: `.push(
        validator,
        ProposalMsg {
            msg: "msg4".to_string(),
        },
    )`
$DIR/crates/channel/src/message_queues_test.rs: `.push(
        validator1,
        ProposalMsg {
            msg: "validator1_msg1".to_string(),
        },
    )`
$DIR/crates/channel/src/message_queues_test.rs: `.push(
        validator1,
        ProposalMsg {
            msg: "validator1_msg2".to_string(),
        },
    )`
$DIR/crates/channel/src/message_queues_test.rs: `.push(
        validator1,
        ProposalMsg {
            msg: "validator1_msg3".to_string(),
        },
    )`
$DIR/crates/channel/src/message_queues_test.rs: `.push(
        validator2,
        ProposalMsg {
            msg: "validator2_msg1".to_string(),
        },
    )`
$DIR/crates/channel/src/message_queues_test.rs: `.push(
        validator3,
        ProposalMsg {
            msg: "validator3_msg1".to_string(),
        },
    )`
$DIR/crates/channel/src/message_queues_test.rs: `.push(
        validator1,
        ProposalMsg {
            msg: "validator1_msg1".to_string(),
        },
    )`
$DIR/crates/channel/src/message_queues_test.rs: `.push(
        validator1,
        ProposalMsg {
            msg: "validator1_msg2".to_string(),
        },
    )`
$DIR/crates/channel/src/message_queues_test.rs: `.push(
        validator1,
        ProposalMsg {
            msg: "validator1_msg3".to_string(),
        },
    )`
$DIR/crates/channel/src/message_queues_test.rs: `.push(
        validator2,
        ProposalMsg {
            msg: "validator2_msg1".to_string(),
        },
    )`
$DIR/crates/channel/src/message_queues_test.rs: `.push(
        validator3,
        ProposalMsg {
            msg: "validator3_msg1".to_string(),
        },
    )`
$DIR/crates/channel/src/message_queues_test.rs: `.push(
        validator1,
        ProposalMsg {
            msg: "validator1_msg1".to_string(),
        },
    )`
$DIR/crates/channel/src/message_queues_test.rs: `.push(
        validator1,
        ProposalMsg {
            msg: "validator1_msg2".to_string(),
        },
    )`
$DIR/crates/channel/src/message_queues_test.rs: `.push(
        validator1,
        ProposalMsg {
            msg: "validator1_msg3".to_string(),
        },
    )`
$DIR/crates/channel/src/message_queues_test.rs: `.push(
        validator2,
        ProposalMsg {
            msg: "validator2_msg1".to_string(),
        },
    )`
$DIR/crates/channel/src/message_queues_test.rs: `.push(
        validator3,
        ProposalMsg {
            msg: "validator3_msg1".to_string(),
        },
    )`
$DIR/crates/channel/src/message_queues_test.rs: `.push(
        validator,
        ProposalMsg {
            msg: "msg1".to_string(),
        },
    )`
$DIR/crates/channel/src/message_queues_test.rs: `.push(
        validator,
        ProposalMsg {
            msg: "msg2".to_string(),
        },
    )`
$DIR/crates/channel/src/message_queues_test.rs: `.clear()`
$DIR/crates/channel/src/message_queues_test.rs: `.push(
        validator,
        ProposalMsg {
            msg: "msg3".to_string(),
        },
    )`
$DIR/crates/channel/src/test.rs: `block_on(tx.send(item)).unwrap();`
$DIR/crates/channel/src/test.rs: `block_on(tx.send(1)).unwrap();`
$DIR/crates/channel/src/test.rs: `block_on(tx1.send(1)).unwrap();`
$DIR/crates/channel/src/test.rs: `tx.try_send(item).unwrap();`
$DIR/crates/channel/src/test.rs: `tx.try_send(item).unwrap();`
$DIR/crates/channel/src/test.rs: `tx.try_send(item).unwrap();`
$DIR/crates/channel/src/test.rs: `.send(item)`
$DIR/crates/channel/src/test.rs: `.next()`
$DIR/crates/channel/src/test.rs: `.send(1)`
$DIR/crates/channel/src/test.rs: `.send(2)`
$DIR/crates/channel/src/test.rs: `.next()`
$DIR/crates/channel/src/test.rs: `.send(1)`
$DIR/crates/channel/src/test.rs: `.send(2)`
$DIR/crates/channel/src/test.rs: `.next()`
$DIR/crates/channel/src/test.rs: `.try_send(item)`
$DIR/crates/channel/src/test.rs: `.next()`
$DIR/crates/channel/src/test.rs: `.try_send(item)`
$DIR/crates/channel/src/test.rs: `.try_send(item)`
$DIR/crates/channel/src/test.rs: `.try_send(item)`
$DIR/crates/channel/src/test.rs: `.next()`
$DIR/crates/channel/src/test.rs: `.next()`
$DIR/crates/channel/tests/many-keys-stress-test.rs: `cursor.write_all(&idx.to_le_bytes()).unwrap();`
$DIR/crates/channel/tests/many-keys-stress-test.rs: `cursor.write_all(&msg_idx.to_le_bytes()).unwrap();`
$DIR/crates/channel/tests/many-keys-stress-test.rs: `sender.push(key, msg).unwrap();`
$DIR/crates/channel/tests/many-keys-stress-test.rs: `NUM_PUSH.fetch_add(1, Ordering::Relaxed);`
$DIR/crates/channel/tests/many-keys-stress-test.rs: `thread::sleep(Duration::from_secs(1));`
$DIR/crates/channel/tests/many-keys-stress-test.rs: `NUM_POP.fetch_add(1, Ordering::Relaxed);`
$DIR/crates/channel/tests/many-keys-stress-test.rs: `block_on(receiver_task);`
$DIR/crates/channel/tests/many-keys-stress-test.rs: `sender_thread.join().unwrap();`
$DIR/crates/channel/tests/many-keys-stress-test.rs: `IS_DONE.store(true, Ordering::Relaxed);`
$DIR/crates/channel/tests/many-keys-stress-test.rs: `logger_thread.join().unwrap();`
$DIR/crates/channel/tests/many-keys-stress-test.rs: `.write_all(&idx.to_le_bytes())`
$DIR/crates/channel/tests/many-keys-stress-test.rs: `.to_le_bytes()`
$DIR/crates/channel/tests/many-keys-stress-test.rs: `.write_all(&msg_idx.to_le_bytes())`
$DIR/crates/channel/tests/many-keys-stress-test.rs: `.to_le_bytes()`
$DIR/crates/channel/tests/many-keys-stress-test.rs: `.push(key, msg)`
$DIR/crates/channel/tests/many-keys-stress-test.rs: `.fetch_add(1, Ordering::Relaxed)`
$DIR/crates/channel/tests/many-keys-stress-test.rs: `.load(Ordering::Relaxed)`
$DIR/crates/channel/tests/many-keys-stress-test.rs: `.next()`
$DIR/crates/channel/tests/many-keys-stress-test.rs: `.is_some()`
$DIR/crates/channel/tests/many-keys-stress-test.rs: `.fetch_add(1, Ordering::Relaxed)`
$DIR/crates/channel/tests/many-keys-stress-test.rs: `.join()`
$DIR/crates/channel/tests/many-keys-stress-test.rs: `.store(true, Ordering::Relaxed)`
$DIR/crates/channel/tests/many-keys-stress-test.rs: `.join()`
$DIR/crates/diem/tests/tests.rs: `.execute()`
$DIR/crates/diem-bitvec/src/lib.rs: `self.inner.resize(bucket + 1, 0);`
$DIR/crates/diem-bitvec/src/lib.rs: `self.inner[bucket] |= 0b1000_0000 >> bucket_pos as u8;`
$DIR/crates/diem-bitvec/src/lib.rs: `bytes[0] = 46;`
$DIR/crates/diem-bitvec/src/lib.rs: `bytes[0] = 32;`
$DIR/crates/diem-bitvec/src/lib.rs: `.inner.len()`
$DIR/crates/diem-bitvec/src/lib.rs: `.inner.resize(bucket + 1, 0)`
$DIR/crates/diem-crypto/src/multi_ed25519.rs: `input[bucket] |= 128 >> bucket_pos as u8;`
$DIR/crates/diem-crypto/src/unit_tests/bcs_test.rs: `.sign(&message)`
$DIR/crates/diem-crypto/src/unit_tests/bcs_test.rs: `.verify(&message, &public_key)`
$DIR/crates/diem-crypto/src/unit_tests/bcs_test.rs: `.sign(&message)`
$DIR/crates/diem-crypto/src/unit_tests/cryptohasher.rs: `salt.extend_from_slice(b"Foo");`
$DIR/crates/diem-crypto/src/unit_tests/cryptohasher.rs: `digest.update(HashValue::sha3_256_of(&salt[..]).as_ref());`
$DIR/crates/diem-crypto/src/unit_tests/cryptohasher.rs: `digest.finalize(&mut hasher_bytes);`
$DIR/crates/diem-crypto/src/unit_tests/cryptohasher.rs: `salt.extend_from_slice(b"Foo");`
$DIR/crates/diem-crypto/src/unit_tests/cryptohasher.rs: `digest.update(HashValue::sha3_256_of(&salt[..]).as_ref());`
$DIR/crates/diem-crypto/src/unit_tests/cryptohasher.rs: `digest.update(&bcs::to_bytes(&value).unwrap());`
$DIR/crates/diem-crypto/src/unit_tests/cryptohasher.rs: `digest.finalize(&mut hasher_bytes);`
$DIR/crates/diem-crypto/src/unit_tests/cryptohasher.rs: `.extend_from_slice(b"Foo")`
$DIR/crates/diem-crypto/src/unit_tests/cryptohasher.rs: `.update(HashValue::sha3_256_of(&salt[..]).as_ref())`
$DIR/crates/diem-crypto/src/unit_tests/cryptohasher.rs: `.finalize(&mut hasher_bytes)`
$DIR/crates/diem-crypto/src/unit_tests/cryptohasher.rs: `.extend_from_slice(b"Foo")`
$DIR/crates/diem-crypto/src/unit_tests/cryptohasher.rs: `.update(HashValue::sha3_256_of(&salt[..]).as_ref())`
$DIR/crates/diem-crypto/src/unit_tests/cryptohasher.rs: `.update(&bcs::to_bytes(&value).unwrap())`
$DIR/crates/diem-crypto/src/unit_tests/cryptohasher.rs: `.finalize(&mut hasher_bytes)`
$DIR/crates/diem-crypto/src/unit_tests/hash_test.rs: `wtr.extend_from_slice(&x.to_le_bytes());`
$DIR/crates/diem-crypto/src/unit_tests/hash_test.rs: `wtr.extend_from_slice(&x.to_le_bytes());`
$DIR/crates/diem-crypto/src/unit_tests/hash_test.rs: `wtr.extend_from_slice(&x.to_le_bytes());`
$DIR/crates/diem-crypto/src/unit_tests/hash_test.rs: `seed[..4].copy_from_slice(&[1, 2, 3, 4]);`
$DIR/crates/diem-crypto/src/unit_tests/hash_test.rs: `hash1 = HashValue::random_with_rng(&mut rng);`
$DIR/crates/diem-crypto/src/unit_tests/hash_test.rs: `hash2 = HashValue::random_with_rng(&mut rng);`
$DIR/crates/diem-crypto/src/unit_tests/hash_test.rs: `bits_rev.reverse();`
$DIR/crates/diem-crypto/src/unit_tests/hash_test.rs: `iter.next();`
$DIR/crates/diem-crypto/src/unit_tests/hash_test.rs: `iter.next_back();`
$DIR/crates/diem-crypto/src/unit_tests/hash_test.rs: `*byte = rand::thread_rng().gen();`
$DIR/crates/diem-crypto/src/unit_tests/hash_test.rs: `nibbles.push(*byte >> 4);`
$DIR/crates/diem-crypto/src/unit_tests/hash_test.rs: `nibbles.push(*byte & 0x0f);`
$DIR/crates/diem-crypto/src/unit_tests/hash_test.rs: `.extend_from_slice(&x.to_le_bytes())`
$DIR/crates/diem-crypto/src/unit_tests/hash_test.rs: `.to_le_bytes()`
$DIR/crates/diem-crypto/src/unit_tests/hash_test.rs: `.extend_from_slice(&x.to_le_bytes())`
$DIR/crates/diem-crypto/src/unit_tests/hash_test.rs: `.to_le_bytes()`
$DIR/crates/diem-crypto/src/unit_tests/hash_test.rs: `.extend_from_slice(&x.to_le_bytes())`
$DIR/crates/diem-crypto/src/unit_tests/hash_test.rs: `.to_le_bytes()`
$DIR/crates/diem-crypto/src/unit_tests/hash_test.rs: `.copy_from_slice(&[1, 2, 3, 4])`
$DIR/crates/diem-crypto/src/unit_tests/hash_test.rs: `.test_only_hash()`
$DIR/crates/diem-crypto/src/unit_tests/hash_test.rs: `.iter_bits()`
$DIR/crates/diem-crypto/src/unit_tests/hash_test.rs: `.collect::<Vec<_>>()`
$DIR/crates/diem-crypto/src/unit_tests/hash_test.rs: `.iter_bits()`
$DIR/crates/diem-crypto/src/unit_tests/hash_test.rs: `.rev()`
$DIR/crates/diem-crypto/src/unit_tests/hash_test.rs: `.collect::<Vec<_>>()`
$DIR/crates/diem-crypto/src/unit_tests/hash_test.rs: `.reverse()`
$DIR/crates/diem-crypto/src/unit_tests/hash_test.rs: `.test_only_hash()`
$DIR/crates/diem-crypto/src/unit_tests/hash_test.rs: `.iter_bits()`
$DIR/crates/diem-crypto/src/unit_tests/hash_test.rs: `.next()`
$DIR/crates/diem-crypto/src/unit_tests/hash_test.rs: `.next_back()`
$DIR/crates/diem-crypto/src/unit_tests/hash_test.rs: `.iter_bits()`
$DIR/crates/diem-crypto/src/unit_tests/hash_test.rs: `.rev()`
$DIR/crates/diem-crypto/src/unit_tests/hash_test.rs: `.iter_bits()`
$DIR/crates/diem-crypto/src/unit_tests/hash_test.rs: `.skip(100)`
$DIR/crates/diem-crypto/src/unit_tests/hash_test.rs: `.test_only_hash()`
$DIR/crates/diem-crypto/src/unit_tests/hash_test.rs: `.iter_bits()`
$DIR/crates/diem-crypto/src/unit_tests/hash_test.rs: `.zip(hash_str.chars())`
$DIR/crates/diem-crypto/src/unit_tests/hash_test.rs: `.chars()`
$DIR/crates/diem-crypto/src/unit_tests/hash_test.rs: `.take(HashValue::LENGTH)`
$DIR/crates/diem-crypto/src/unit_tests/hash_test.rs: `.gen()`
$DIR/crates/diem-crypto/src/unit_tests/hash_test.rs: `.push(*byte >> 4)`
$DIR/crates/diem-crypto/src/unit_tests/hash_test.rs: `.push(*byte & 0x0f)`
$DIR/crates/diem-crypto/src/unit_tests/hash_test.rs: `.enumerate()`
$DIR/crates/diem-crypto/src/unit_tests/hash_test.rs: `.take(HashValue::LENGTH * 2)`
$DIR/crates/diem-crypto/src/unit_tests/hash_test.rs: `.test_only_hash()`
$DIR/crates/diem-crypto/src/unit_tests/hash_test.rs: `.test_only_hash()`
$DIR/crates/diem-crypto/src/unit_tests/hash_test.rs: `.test_only_hash()`
$DIR/crates/diem-crypto/src/unit_tests/hash_test.rs: `.test_only_hash()`
$DIR/crates/diem-crypto/src/unit_tests/hash_test.rs: `.test_only_hash()`
$DIR/crates/diem-crypto/src/unit_tests/hash_test.rs: `.test_only_hash()`
$DIR/crates/diem-crypto/src/unit_tests/hash_test.rs: `.test_only_hash()`
$DIR/crates/diem-crypto/src/unit_tests/hash_test.rs: `.test_only_hash()`
$DIR/crates/diem-crypto/src/unit_tests/multi_ed25519_test.rs: `pub_keys_10_reversed.reverse();`
$DIR/crates/diem-crypto/src/unit_tests/multi_ed25519_test.rs: `.map(|_| Ed25519PrivateKey::generate(&mut rng))`
$DIR/crates/diem-crypto/src/unit_tests/multi_ed25519_test.rs: `.len()`
$DIR/crates/diem-crypto/src/unit_tests/multi_ed25519_test.rs: `.to_bytes()`
$DIR/crates/diem-crypto/src/unit_tests/multi_ed25519_test.rs: `.sign(message())`
$DIR/crates/diem-crypto/src/unit_tests/multi_ed25519_test.rs: `.to_bytes()`
$DIR/crates/diem-crypto/src/unit_tests/multi_ed25519_test.rs: `.map(|x| x.public_key())`
$DIR/crates/diem-crypto/src/unit_tests/multi_ed25519_test.rs: `.public_key()`
$DIR/crates/diem-crypto/src/unit_tests/multi_ed25519_test.rs: `.collect()`
$DIR/crates/diem-crypto/src/unit_tests/multi_ed25519_test.rs: `.map(|x| x.public_key())`
$DIR/crates/diem-crypto/src/unit_tests/multi_ed25519_test.rs: `.public_key()`
$DIR/crates/diem-crypto/src/unit_tests/multi_ed25519_test.rs: `.collect()`
$DIR/crates/diem-crypto/src/unit_tests/multi_ed25519_test.rs: `.map(|x| x.public_key())`
$DIR/crates/diem-crypto/src/unit_tests/multi_ed25519_test.rs: `.public_key()`
$DIR/crates/diem-crypto/src/unit_tests/multi_ed25519_test.rs: `.collect()`
$DIR/crates/diem-crypto/src/unit_tests/multi_ed25519_test.rs: `.map(|x| x.public_key())`
$DIR/crates/diem-crypto/src/unit_tests/multi_ed25519_test.rs: `.public_key()`
$DIR/crates/diem-crypto/src/unit_tests/multi_ed25519_test.rs: `.collect()`
$DIR/crates/diem-crypto/src/unit_tests/multi_ed25519_test.rs: `.map(|x| x.public_key())`
$DIR/crates/diem-crypto/src/unit_tests/multi_ed25519_test.rs: `.public_key()`
$DIR/crates/diem-crypto/src/unit_tests/multi_ed25519_test.rs: `.collect()`
$DIR/crates/diem-crypto/src/unit_tests/multi_ed25519_test.rs: `.public_keys()`
$DIR/crates/diem-crypto/src/unit_tests/multi_ed25519_test.rs: `.sign(message())`
$DIR/crates/diem-crypto/src/unit_tests/multi_ed25519_test.rs: `.collect()`
$DIR/crates/diem-crypto/src/unit_tests/multi_ed25519_test.rs: `.into_iter()`
$DIR/crates/diem-crypto/src/unit_tests/multi_ed25519_test.rs: `.zip(indices.into_iter())`
$DIR/crates/diem-crypto/src/unit_tests/multi_ed25519_test.rs: `.into_iter()`
$DIR/crates/diem-crypto/src/unit_tests/multi_ed25519_test.rs: `.collect()`
$DIR/crates/diem-crypto/src/unit_tests/multi_ed25519_test.rs: `.collect()`
$DIR/crates/diem-crypto/src/unit_tests/multi_ed25519_test.rs: `.into_iter()`
$DIR/crates/diem-crypto/src/unit_tests/multi_ed25519_test.rs: `.zip(indices.into_iter())`
$DIR/crates/diem-crypto/src/unit_tests/multi_ed25519_test.rs: `.into_iter()`
$DIR/crates/diem-crypto/src/unit_tests/multi_ed25519_test.rs: `.collect()`
$DIR/crates/diem-crypto/src/unit_tests/multi_ed25519_test.rs: `.into_iter()`
$DIR/crates/diem-crypto/src/unit_tests/multi_ed25519_test.rs: `.zip(indices_with_duplicate.into_iter())`
$DIR/crates/diem-crypto/src/unit_tests/multi_ed25519_test.rs: `.into_iter()`
$DIR/crates/diem-crypto/src/unit_tests/multi_ed25519_test.rs: `.collect()`
$DIR/crates/diem-crypto/src/unit_tests/multi_ed25519_test.rs: `.into_iter()`
$DIR/crates/diem-crypto/src/unit_tests/multi_ed25519_test.rs: `.zip(indices_with_out_of_range.into_iter())`
$DIR/crates/diem-crypto/src/unit_tests/multi_ed25519_test.rs: `.into_iter()`
$DIR/crates/diem-crypto/src/unit_tests/multi_ed25519_test.rs: `.collect()`
$DIR/crates/diem-crypto/src/unit_tests/multi_ed25519_test.rs: `.map(|x| x.public_key())`
$DIR/crates/diem-crypto/src/unit_tests/multi_ed25519_test.rs: `.public_key()`
$DIR/crates/diem-crypto/src/unit_tests/multi_ed25519_test.rs: `.collect()`
$DIR/crates/diem-crypto/src/unit_tests/multi_ed25519_test.rs: `.sign(message())`
$DIR/crates/diem-crypto/src/unit_tests/multi_ed25519_test.rs: `.reverse()`
$DIR/crates/diem-crypto/src/unit_tests/multi_ed25519_test.rs: `.sign(message())`
$DIR/crates/diem-crypto/src/unit_tests/multi_ed25519_test.rs: `.sign(message())`
$DIR/crates/diem-crypto/src/unit_tests/multi_ed25519_test.rs: `.verify(message(), &multi_public_key_1of3)`
$DIR/crates/diem-crypto/src/unit_tests/multi_ed25519_test.rs: `.sign(message())`
$DIR/crates/diem-crypto/src/unit_tests/multi_ed25519_test.rs: `.verify(message(), &multi_public_key_1of3)`
$DIR/crates/diem-crypto/src/unit_tests/multi_ed25519_test.rs: `.sign(message())`
$DIR/crates/diem-crypto/src/unit_tests/multi_ed25519_test.rs: `.verify(message(), &multi_public_key_1of3)`
$DIR/crates/diem-crypto/src/unit_tests/multi_ed25519_test.rs: `.sign(message())`
$DIR/crates/diem-crypto/src/unit_tests/noise_test.rs: `message_sent.push(i);`
$DIR/crates/diem-crypto/src/unit_tests/noise_test.rs: `message.extend_from_slice(&auth_tag);`
$DIR/crates/diem-crypto/src/unit_tests/noise_test.rs: `message.extend_from_slice(&auth_tag);`
$DIR/crates/diem-crypto/src/unit_tests/noise_test.rs: `dest.copy_from_slice(&self.ephemeral);`
$DIR/crates/diem-crypto/src/unit_tests/noise_test.rs: `test_vectors_path.push("test_vectors");`
$DIR/crates/diem-crypto/src/unit_tests/noise_test.rs: `test_vectors_path.push("noise_cacophony.txt");`
$DIR/crates/diem-crypto/src/unit_tests/noise_test.rs: `message.extend_from_slice(&auth_tag);`
$DIR/crates/diem-crypto/src/unit_tests/noise_test.rs: `message.extend_from_slice(&auth_tag);`
$DIR/crates/diem-crypto/src/unit_tests/noise_test.rs: `client_turn = !client_turn;`
$DIR/crates/diem-crypto/src/unit_tests/noise_test.rs: `message.extend_from_slice(&auth_tag);`
$DIR/crates/diem-crypto/src/unit_tests/noise_test.rs: `.public_key()`
$DIR/crates/diem-crypto/src/unit_tests/noise_test.rs: `.public_key()`
$DIR/crates/diem-crypto/src/unit_tests/noise_test.rs: `.initiate_connection(
                &mut rng,
                prologue,
                responder_public,
                Some(payload1),
                &mut first_message,
            )`
$DIR/crates/diem-crypto/src/unit_tests/noise_test.rs: `.respond_to_client_and_finalize(
                    &mut rng,
                    prologue,
                    &first_message,
                    Some(payload2),
                    &mut second_message,
                )`
$DIR/crates/diem-crypto/src/unit_tests/noise_test.rs: `.get_remote_static()`
$DIR/crates/diem-crypto/src/unit_tests/noise_test.rs: `.parse_client_init_message(prologue, &first_message)`
$DIR/crates/diem-crypto/src/unit_tests/noise_test.rs: `.respond_to_client(
                    &mut rng,
                    handshake_state,
                    Some(payload2),
                    &mut second_message,
                )`
$DIR/crates/diem-crypto/src/unit_tests/noise_test.rs: `.finalize_connection(initiator_state, &second_message)`
$DIR/crates/diem-crypto/src/unit_tests/noise_test.rs: `.push(i)`
$DIR/crates/diem-crypto/src/unit_tests/noise_test.rs: `.write_message_in_place(&mut message)`
$DIR/crates/diem-crypto/src/unit_tests/noise_test.rs: `.extend_from_slice(&auth_tag)`
$DIR/crates/diem-crypto/src/unit_tests/noise_test.rs: `.read_message_in_place(&mut message)`
$DIR/crates/diem-crypto/src/unit_tests/noise_test.rs: `.write_message_in_place(&mut message)`
$DIR/crates/diem-crypto/src/unit_tests/noise_test.rs: `.extend_from_slice(&auth_tag)`
$DIR/crates/diem-crypto/src/unit_tests/noise_test.rs: `.read_message_in_place(&mut message)`
$DIR/crates/diem-crypto/src/unit_tests/noise_test.rs: `.copy_from_slice(&self.ephemeral)`
$DIR/crates/diem-crypto/src/unit_tests/noise_test.rs: `.push("test_vectors")`
$DIR/crates/diem-crypto/src/unit_tests/noise_test.rs: `.push("noise_cacophony.txt")`
$DIR/crates/diem-crypto/src/unit_tests/noise_test.rs: `.to_str()`
$DIR/crates/diem-crypto/src/unit_tests/noise_test.rs: `.find(|vector| vector.protocol_name == "Noise_IK_25519_AESGCM_SHA256")`
$DIR/crates/diem-crypto/src/unit_tests/noise_test.rs: `.public_key()`
$DIR/crates/diem-crypto/src/unit_tests/noise_test.rs: `.public_key()`
$DIR/crates/diem-crypto/src/unit_tests/noise_test.rs: `.next()`
$DIR/crates/diem-crypto/src/unit_tests/noise_test.rs: `.initiate_connection(
                &mut rng,
                &prologue,
                responder_public,
                Some(&payload1),
                &mut first_message,
            )`
$DIR/crates/diem-crypto/src/unit_tests/noise_test.rs: `.next()`
$DIR/crates/diem-crypto/src/unit_tests/noise_test.rs: `.respond_to_client_and_finalize(
                    &mut rng,
                    &prologue,
                    &first_message,
                    Some(&payload2),
                    &mut second_message,
                )`
$DIR/crates/diem-crypto/src/unit_tests/noise_test.rs: `.parse_client_init_message(&prologue, &first_message)`
$DIR/crates/diem-crypto/src/unit_tests/noise_test.rs: `.respond_to_client(
                    &mut rng,
                    handshake_state,
                    Some(&payload2),
                    &mut second_message,
                )`
$DIR/crates/diem-crypto/src/unit_tests/noise_test.rs: `.get_remote_static()`
$DIR/crates/diem-crypto/src/unit_tests/noise_test.rs: `.finalize_connection(initiator_state, &second_message)`
$DIR/crates/diem-crypto/src/unit_tests/noise_test.rs: `.write_message_in_place(&mut message)`
$DIR/crates/diem-crypto/src/unit_tests/noise_test.rs: `.extend_from_slice(&auth_tag)`
$DIR/crates/diem-crypto/src/unit_tests/noise_test.rs: `.read_message_in_place(&mut message)`
$DIR/crates/diem-crypto/src/unit_tests/noise_test.rs: `.write_message_in_place(&mut message)`
$DIR/crates/diem-crypto/src/unit_tests/noise_test.rs: `.extend_from_slice(&auth_tag)`
$DIR/crates/diem-crypto/src/unit_tests/noise_test.rs: `.read_message_in_place(&mut message)`
$DIR/crates/diem-crypto/src/unit_tests/noise_test.rs: `.public_key()`
$DIR/crates/diem-crypto/src/unit_tests/noise_test.rs: `.initiate_connection(
            &mut rng,
            b"",
            responder_public,
            Some(payload),
            &mut first_message_bad,
        )`
$DIR/crates/diem-crypto/src/unit_tests/noise_test.rs: `.initiate_connection(
            &mut rng,
            b"",
            responder_public,
            Some(&payload_too_large),
            &mut large_buffer,
        )`
$DIR/crates/diem-crypto/src/unit_tests/noise_test.rs: `.initiate_connection(
                &mut rng,
                b"",
                responder_public,
                Some(payload),
                &mut first_message_good,
            )`
$DIR/crates/diem-crypto/src/unit_tests/noise_test.rs: `.respond_to_client_and_finalize(
                &mut rng,
                b"",
                &first_message_good[..first_message_good.len() - 1],
                Some(payload),
                &mut second_message_small,
            )`
$DIR/crates/diem-crypto/src/unit_tests/noise_test.rs: `.len()`
$DIR/crates/diem-crypto/src/unit_tests/noise_test.rs: `.respond_to_client_and_finalize(
                &mut rng,
                b"",
                &first_message_good,
                Some(payload),
                &mut second_message_large,
            )`
$DIR/crates/diem-crypto/src/unit_tests/noise_test.rs: `.respond_to_client_and_finalize(
                &mut rng,
                b"incorrect prologue",
                &first_message_good[..first_message_good.len() - 1],
                Some(payload),
                &mut second_message_large,
            )`
$DIR/crates/diem-crypto/src/unit_tests/noise_test.rs: `.len()`
$DIR/crates/diem-crypto/src/unit_tests/noise_test.rs: `.respond_to_client_and_finalize(
                &mut rng,
                b"",
                &first_message_good[..first_message_good.len() - 1],
                Some(&payload_too_large),
                &mut large_buffer,
            )`
$DIR/crates/diem-crypto/src/unit_tests/noise_test.rs: `.len()`
$DIR/crates/diem-crypto/src/unit_tests/noise_test.rs: `.respond_to_client_and_finalize(
                    &mut rng,
                    b"",
                    &first_message_good[..first_message_good.len() - 1],
                    Some(payload),
                    &mut second_message_large,
                )`
$DIR/crates/diem-crypto/src/unit_tests/noise_test.rs: `.len()`
$DIR/crates/diem-crypto/src/unit_tests/noise_test.rs: `.parse_client_init_message(b"", &first_message_good)`
$DIR/crates/diem-crypto/src/unit_tests/noise_test.rs: `.parse_client_init_message(
                b"",
                &first_message_good[..first_message_good.len() - 2],
            )`
$DIR/crates/diem-crypto/src/unit_tests/noise_test.rs: `.len()`
$DIR/crates/diem-crypto/src/unit_tests/noise_test.rs: `.parse_client_init_message(
                b"incorrect prologue",
                &first_message_good[..first_message_good.len() - 1],
            )`
$DIR/crates/diem-crypto/src/unit_tests/noise_test.rs: `.len()`
$DIR/crates/diem-crypto/src/unit_tests/noise_test.rs: `.parse_client_init_message(b"", &first_message_good[..first_message_good.len() - 1])`
$DIR/crates/diem-crypto/src/unit_tests/noise_test.rs: `.len()`
$DIR/crates/diem-crypto/src/unit_tests/noise_test.rs: `.respond_to_client(
                &mut rng,
                handshake_state.clone(),
                Some(payload),
                &mut second_message_small,
            )`
$DIR/crates/diem-crypto/src/unit_tests/noise_test.rs: `.respond_to_client(
                &mut rng,
                handshake_state.clone(),
                Some(&payload_too_large),
                &mut large_buffer,
            )`
$DIR/crates/diem-crypto/src/unit_tests/noise_test.rs: `.respond_to_client(
                    &mut rng,
                    handshake_state,
                    Some(payload),
                    &mut second_message_large,
                )`
$DIR/crates/diem-crypto/src/unit_tests/noise_test.rs: `.finalize_connection(initiator_state.clone(), &second_message_large)`
$DIR/crates/diem-crypto/src/unit_tests/noise_test.rs: `.finalize_connection(
            initiator_state.clone(),
            &second_message_large[..second_message_large.len() - 2],
        )`
$DIR/crates/diem-crypto/src/unit_tests/noise_test.rs: `.len()`
$DIR/crates/diem-crypto/src/unit_tests/noise_test.rs: `.finalize_connection(
                initiator_state.clone(),
                &second_message_large[..second_message_large.len() - 1],
            )`
$DIR/crates/diem-crypto/src/unit_tests/noise_test.rs: `.len()`
$DIR/crates/diem-crypto/src/unit_tests/noise_test.rs: `.write_message_in_place(&mut message)`
$DIR/crates/diem-crypto/src/unit_tests/noise_test.rs: `.read_message_in_place(&mut message)`
$DIR/crates/diem-crypto/src/unit_tests/noise_test.rs: `.extend_from_slice(&auth_tag)`
$DIR/crates/diem-crypto/src/unit_tests/noise_test.rs: `.read_message_in_place(&mut message)`
$DIR/crates/diem-documentation-tool/tests/update.rs: `tracer.trace_type::<MyEnum>(&samples).unwrap();`
$DIR/crates/diem-documentation-tool/tests/update.rs: `.trace_type::<MyEnum>(&samples)`
$DIR/crates/diem-documentation-tool/tests/update.rs: `.registry()`
$DIR/crates/diem-faucet/src/main.rs: `generate_key::generate_and_save_key(&f);`
$DIR/crates/diem-faucet/src/main.rs: `tokio::task::spawn(async move { future.await });`
$DIR/crates/diem-faucet/src/main.rs: `account["balances"][0]["amount"] = serde_json::json!(amount);`
$DIR/crates/diem-faucet/src/main.rs: `account["role"]["vasp_domains"]
                                .as_array_mut()
                                .unwrap()
                                .push(serde_json::json!(domain));`
$DIR/crates/diem-faucet/src/main.rs: `account["role"]["vasp_domains"]
                                .as_array_mut()
                                .unwrap()
                                .remove(index);`
$DIR/crates/diem-faucet/src/main.rs: `account["balances"][0]["amount"] = serde_json::json!(amount);`
$DIR/crates/diem-faucet/src/main.rs: `accounts.insert(
            AccountAddress::try_from(blessed.to_owned()).unwrap(),
            create_account(
                blessed,
                serde_json::json!([]),
                serde_json::json!({
                    "type": "unknown"
                }),
            ),
        );`
$DIR/crates/diem-faucet/src/main.rs: `accounts.insert(
            AccountAddress::try_from(dd.to_owned()).unwrap(),
            create_dd_account(dd, 4611685774556657903u64),
        );`
$DIR/crates/diem-faucet/src/main.rs: `.and(warp::post())`
$DIR/crates/diem-faucet/src/main.rs: `.and(warp::any().map(move || std::sync::Arc::clone(&service)))`
$DIR/crates/diem-faucet/src/main.rs: `.map(move || std::sync::Arc::clone(&service))`
$DIR/crates/diem-faucet/src/main.rs: `.and(warp::query().map(move |params: mint::MintParams| params))`
$DIR/crates/diem-faucet/src/main.rs: `.map(move |params: mint::MintParams| params)`
$DIR/crates/diem-faucet/src/main.rs: `.and_then(handle)`
$DIR/crates/diem-faucet/src/main.rs: `.with(warp::log::custom(|info| {
            info!(
                "{} \"{} {} {:?}\" {} \"{}\" \"{}\" {:?}",
                OptFmt(info.remote_addr()),
                info.method(),
                info.path(),
                info.version(),
                info.status().as_u16(),
                OptFmt(info.referer()),
                OptFmt(info.user_agent()),
                info.elapsed(),
            )
        }))`
$DIR/crates/diem-faucet/src/main.rs: `.with(warp::cors().allow_any_origin().allow_methods(vec!["POST"]))`
$DIR/crates/diem-faucet/src/main.rs: `.allow_any_origin()`
$DIR/crates/diem-faucet/src/main.rs: `.allow_methods(vec!["POST"])`
$DIR/crates/diem-faucet/src/main.rs: `.and(mint.clone())`
$DIR/crates/diem-faucet/src/main.rs: `.and(warp::path::end())`
$DIR/crates/diem-faucet/src/main.rs: `.and(mint)`
$DIR/crates/diem-faucet/src/main.rs: `.map(|| "diem-faucet:ok")`
$DIR/crates/diem-faucet/src/main.rs: `.or(route_mint.or(route_root))`
$DIR/crates/diem-faucet/src/main.rs: `.or(route_root)`
$DIR/crates/diem-faucet/src/main.rs: `.into_temp_path()`
$DIR/crates/diem-faucet/src/main.rs: `.and(warp::body::json())`
$DIR/crates/diem-faucet/src/main.rs: `.map(move |req: serde_json::Value| {
                let resp = handle_request(req, chain_id, Arc::clone(&accounts));
                Ok(warp::reply::json(&resp))
            })`
$DIR/crates/diem-faucet/src/main.rs: `.bind(([127, 0, 0, 1], port))`
$DIR/crates/diem-faucet/src/main.rs: `.to_str()`
$DIR/crates/diem-faucet/src/main.rs: `.method("GET")`
$DIR/crates/diem-faucet/src/main.rs: `.path("/-/healthy")`
$DIR/crates/diem-faucet/src/main.rs: `.reply(&filter)`
$DIR/crates/diem-faucet/src/main.rs: `.enumerate()`
$DIR/crates/diem-faucet/src/main.rs: `.method("POST")`
$DIR/crates/diem-faucet/src/main.rs: `.path(
                    format!(
                        "{}?auth_key={}&amount={}&currency_code=XDX",
                        path, auth_key, amount
                    )
                    .as_str(),
                )`
$DIR/crates/diem-faucet/src/main.rs: `.reply(&filter)`
$DIR/crates/diem-faucet/src/main.rs: `.read()`
$DIR/crates/diem-faucet/src/main.rs: `.get(&addr)`
$DIR/crates/diem-faucet/src/main.rs: `.method("POST")`
$DIR/crates/diem-faucet/src/main.rs: `.path(
                format!(
                    "/mint?auth_key={}&amount={}&trade_id={}&currency_code=XDX&return_txns=true",
                    auth_key, amount, trade_id
                )
                .as_str(),
            )`
$DIR/crates/diem-faucet/src/main.rs: `.reply(&filter)`
$DIR/crates/diem-faucet/src/main.rs: `.body()`
$DIR/crates/diem-faucet/src/main.rs: `.payload()`
$DIR/crates/diem-faucet/src/main.rs: `.read()`
$DIR/crates/diem-faucet/src/main.rs: `.get(&addr)`
$DIR/crates/diem-faucet/src/main.rs: `.method("POST")`
$DIR/crates/diem-faucet/src/main.rs: `.path(
                format!(
                    "/mint?auth_key={}&amount={}&currency_code=XDX&return_txns=true&is_designated_dealer=true",
                    auth_key, amount
                )
                    .as_str(),
            )`
$DIR/crates/diem-faucet/src/main.rs: `.reply(&filter)`
$DIR/crates/diem-faucet/src/main.rs: `.body()`
$DIR/crates/diem-faucet/src/main.rs: `.read()`
$DIR/crates/diem-faucet/src/main.rs: `.get(&addr)`
$DIR/crates/diem-faucet/src/main.rs: `.method("POST")`
$DIR/crates/diem-faucet/src/main.rs: `.path(
                format!(
                    "/mint?auth_key={}&amount=1000000&currency_code=XDX",
                    auth_key
                )
                .as_str(),
            )`
$DIR/crates/diem-faucet/src/main.rs: `.reply(&filter)`
$DIR/crates/diem-faucet/src/main.rs: `.method("POST")`
$DIR/crates/diem-faucet/src/main.rs: `.path(
                format!(
                    "/mint?auth_key={}&amount=1000000&currency_code=XDX",
                    auth_key
                )
                .as_str(),
            )`
$DIR/crates/diem-faucet/src/main.rs: `.reply(&filter)`
$DIR/crates/diem-faucet/src/main.rs: `.method("POST")`
$DIR/crates/diem-faucet/src/main.rs: `.path(
                    format!(
                        "/mint?auth_key={}&vasp_domain={}&is_remove_domain={}&amount=1&currency_code=XDX",
                        auth_key, "diem", false,
                    )
                    .as_str(),
                )`
$DIR/crates/diem-faucet/src/main.rs: `.reply(&filter)`
$DIR/crates/diem-faucet/src/main.rs: `.read()`
$DIR/crates/diem-faucet/src/main.rs: `.get(&addr)`
$DIR/crates/diem-faucet/src/main.rs: `.method("POST")`
$DIR/crates/diem-faucet/src/main.rs: `.path(
                    format!(
                        "/mint?auth_key={}&vasp_domain={}&is_remove_domain={}&amount=1&currency_code=XDX",
                        auth_key, vasp_domain_to_remove, true,
                    )
                        .as_str(),
                )`
$DIR/crates/diem-faucet/src/main.rs: `.reply(&filter)`
$DIR/crates/diem-faucet/src/main.rs: `.read()`
$DIR/crates/diem-faucet/src/main.rs: `.get(&addr)`
$DIR/crates/diem-faucet/src/main.rs: `.map(move |req| handle_request(req.clone(), chain_id, Arc::clone(&accounts)))`
$DIR/crates/diem-faucet/src/main.rs: `.collect()`
$DIR/crates/diem-faucet/src/main.rs: `.payload()`
$DIR/crates/diem-faucet/src/main.rs: `.write()`
$DIR/crates/diem-faucet/src/main.rs: `.insert(address, create_vasp_account(&address.to_string(), 0))`
$DIR/crates/diem-faucet/src/main.rs: `.write()`
$DIR/crates/diem-faucet/src/main.rs: `.insert(address, create_dd_account(&address.to_string(), 0))`
$DIR/crates/diem-faucet/src/main.rs: `.write()`
$DIR/crates/diem-faucet/src/main.rs: `.get_mut(&payee)`
$DIR/crates/diem-faucet/src/main.rs: `.payload()`
$DIR/crates/diem-faucet/src/main.rs: `.write()`
$DIR/crates/diem-faucet/src/main.rs: `.get_mut(&address)`
$DIR/crates/diem-faucet/src/main.rs: `.as_array_mut()`
$DIR/crates/diem-faucet/src/main.rs: `.push(serde_json::json!(domain))`
$DIR/crates/diem-faucet/src/main.rs: `.write()`
$DIR/crates/diem-faucet/src/main.rs: `.get_mut(&address)`
$DIR/crates/diem-faucet/src/main.rs: `.as_array()`
$DIR/crates/diem-faucet/src/main.rs: `.position(|x| x == json_domain)`
$DIR/crates/diem-faucet/src/main.rs: `.as_array_mut()`
$DIR/crates/diem-faucet/src/main.rs: `.remove(index)`
$DIR/crates/diem-faucet/src/main.rs: `.write()`
$DIR/crates/diem-faucet/src/main.rs: `.insert(address, create_vasp_account(&address.to_string(), 0))`
$DIR/crates/diem-faucet/src/main.rs: `.write()`
$DIR/crates/diem-faucet/src/main.rs: `.insert(address, create_dd_account(&address.to_string(), 0))`
$DIR/crates/diem-faucet/src/main.rs: `.write()`
$DIR/crates/diem-faucet/src/main.rs: `.get_mut(&payee)`
$DIR/crates/diem-faucet/src/main.rs: `.id()`
$DIR/crates/diem-faucet/src/main.rs: `.read()`
$DIR/crates/diem-faucet/src/main.rs: `.ok()`
$DIR/crates/diem-faucet/src/main.rs: `.and_then(|address| reader.get(&address))`
$DIR/crates/diem-faucet/src/main.rs: `.get(&address)`
$DIR/crates/diem-faucet/src/main.rs: `.id()`
$DIR/crates/diem-faucet/src/main.rs: `.insert(
            AccountAddress::try_from(blessed.to_owned()).unwrap(),
            create_account(
                blessed,
                serde_json::json!([]),
                serde_json::json!({
                    "type": "unknown"
                }),
            ),
        )`
$DIR/crates/diem-faucet/src/main.rs: `.insert(
            AccountAddress::try_from(dd.to_owned()).unwrap(),
            create_dd_account(dd, 4611685774556657903u64),
        )`
$DIR/crates/diem-infallible/src/mutex.rs: `*b = 8;`
$DIR/crates/diem-infallible/src/mutex.rs: `*b = 9;`
$DIR/crates/diem-infallible/src/mutex.rs: `.lock()`
$DIR/crates/diem-infallible/src/mutex.rs: `.join()`
$DIR/crates/diem-infallible/src/mutex.rs: `.join()`
$DIR/crates/diem-infallible/src/rwlock.rs: `*b = 8;`
$DIR/crates/diem-infallible/src/rwlock.rs: `*b = 9;`
$DIR/crates/diem-infallible/src/rwlock.rs: `.read()`
$DIR/crates/diem-infallible/src/rwlock.rs: `.write()`
$DIR/crates/diem-infallible/src/rwlock.rs: `.join()`
$DIR/crates/diem-infallible/src/rwlock.rs: `.join()`
$DIR/crates/diem-logger/src/diem_logger.rs: `crate::logger::set_global_logger(logger);`
$DIR/crates/diem-logger/src/diem_logger.rs: `handler.join().unwrap();`
$DIR/crates/diem-logger/src/diem_logger.rs: `.recv()`
$DIR/crates/diem-logger/src/diem_logger.rs: `.recv()`
$DIR/crates/diem-logger/src/diem_logger.rs: `.recv()`
$DIR/crates/diem-logger/src/diem_logger.rs: `.name("named thread".into())`
$DIR/crates/diem-logger/src/diem_logger.rs: `.into()`
$DIR/crates/diem-logger/src/diem_logger.rs: `.spawn(|| info!("thread"))`
$DIR/crates/diem-logger/src/diem_logger.rs: `.join()`
$DIR/crates/diem-logger/src/diem_logger.rs: `.recv()`
$DIR/crates/diem-logger/src/filter.rs: `self.directives.push(Directive::new(module, level));`
$DIR/crates/diem-logger/src/filter.rs: `self.directives.extend(
            filters
                .split(',')
                .map(Directive::from_str)
                .filter_map(Result::ok),
        );`
$DIR/crates/diem-logger/src/filter.rs: `self.directives.sort_by(|a, b| {
                let alen = a.name.as_ref().map(|a| a.len()).unwrap_or(0);
                let blen = b.name.as_ref().map(|b| b.len()).unwrap_or(0);
                alen.cmp(&blen)
            });`
$DIR/crates/diem-logger/src/filter.rs: `.directives.push(Directive::new(module, level))`
$DIR/crates/diem-logger/src/filter.rs: `.directives.extend(
            filters
                .split(',')
                .map(Directive::from_str)
                .filter_map(Result::ok),
        )`
$DIR/crates/diem-logger/src/filter.rs: `.split(',')`
$DIR/crates/diem-logger/src/filter.rs: `.map(Directive::from_str)`
$DIR/crates/diem-logger/src/filter.rs: `.filter_map(Result::ok)`
$DIR/crates/diem-logger/src/filter.rs: `.directives.is_empty()`
$DIR/crates/diem-logger/src/filter.rs: `.directives.sort_by(|a, b| {
                let alen = a.name.as_ref().map(|a| a.len()).unwrap_or(0);
                let blen = b.name.as_ref().map(|b| b.len()).unwrap_or(0);
                alen.cmp(&blen)
            })`
$DIR/crates/diem-logger/src/filter.rs: `.map(|a| a.len())`
$DIR/crates/diem-logger/src/filter.rs: `.len()`
$DIR/crates/diem-logger/src/filter.rs: `.unwrap_or(0)`
$DIR/crates/diem-logger/src/filter.rs: `.map(|b| b.len())`
$DIR/crates/diem-logger/src/filter.rs: `.len()`
$DIR/crates/diem-logger/src/filter.rs: `.unwrap_or(0)`
$DIR/crates/diem-logger/src/sample.rs: `v.push(i);`
$DIR/crates/diem-logger/src/sample.rs: `v.push(i);`
$DIR/crates/diem-logger/src/sample.rs: `v.push(i);`
$DIR/crates/diem-logger/src/sample.rs: `std::thread::sleep(Duration::from_millis(500));`
$DIR/crates/diem-logger/src/sample.rs: `sample!(
                SampleRate::Frequency(2),
                println!("loooooooooooooooooooooooooong hello {}", i),
            );`
$DIR/crates/diem-logger/src/sample.rs: `sample!(SampleRate::Frequency(2), {
                println!("hello {}", i);
            });`
$DIR/crates/diem-logger/src/sample.rs: `sample!(SampleRate::Frequency(2), println!("hello {}", i));`
$DIR/crates/diem-logger/src/sample.rs: `sample! {
                SampleRate::Frequency(2),

                for j in 10..20 {
                    println!("hello {}", j);
                }
            }`
$DIR/crates/diem-logger/src/sample.rs: `handles.push(std::thread::spawn(work));`
$DIR/crates/diem-logger/src/sample.rs: `count += handle.join().unwrap();`
$DIR/crates/diem-logger/src/sample.rs: `.push(i)`
$DIR/crates/diem-logger/src/sample.rs: `.push(i)`
$DIR/crates/diem-logger/src/sample.rs: `.push(i)`
$DIR/crates/diem-logger/src/sample.rs: `.push(std::thread::spawn(work))`
$DIR/crates/diem-logger/src/sample.rs: `.join()`
$DIR/crates/diem-logger/tests/derive.rs: `.required(1)`
$DIR/crates/diem-logger/tests/derive.rs: `.debug(vec![1, 2, 3])`
$DIR/crates/diem-logger/tests/derive.rs: `.debug_error(&debug_error)`
$DIR/crates/diem-logger/tests/derive.rs: `.display_error(&display_error)`
$DIR/crates/diem-logger/tests/logger.rs: `DiemLogger::builder()
        .is_async(false)
        .printer(Box::new(writer))
        .build();`
$DIR/crates/diem-logger/tests/logger.rs: `.logs.write()`
$DIR/crates/diem-logger/tests/logger.rs: `.is_async(false)`
$DIR/crates/diem-logger/tests/logger.rs: `.printer(Box::new(writer))`
$DIR/crates/diem-logger/tests/logger.rs: `.build()`
$DIR/crates/diem-logger/tests/logger.rs: `.remove(0)`
$DIR/crates/diem-logger/tests/logger.rs: `.remove(0)`
$DIR/crates/diem-logger/tests/logger_custom_format.rs: `DiemLogger::builder()
        .is_async(false)
        .printer(Box::new(writer))
        .custom_format(|entry| {
            use std::fmt::Write;
            let mut w = String::new();
            write!(w, "0000-00-00")?;
            write!(w, " [{}]", entry.metadata().level())?;
            if let Some(message) = entry.message() {
                write!(w, " {}", message)?;
            }
            if !entry.data().is_empty() {
                write!(w, " {}", serde_json::to_string(&entry.data()).unwrap())?;
            }
            Ok(w)
        })
        .build();`
$DIR/crates/diem-logger/tests/logger_custom_format.rs: `write!(w, "0000-00-00")?;`
$DIR/crates/diem-logger/tests/logger_custom_format.rs: `write!(w, " [{}]", entry.metadata().level())?;`
$DIR/crates/diem-logger/tests/logger_custom_format.rs: `write!(w, " {}", message)?;`
$DIR/crates/diem-logger/tests/logger_custom_format.rs: `write!(w, " {}", serde_json::to_string(&entry.data()).unwrap())?;`
$DIR/crates/diem-logger/tests/logger_custom_format.rs: `.logs.write()`
$DIR/crates/diem-logger/tests/logger_custom_format.rs: `.is_async(false)`
$DIR/crates/diem-logger/tests/logger_custom_format.rs: `.printer(Box::new(writer))`
$DIR/crates/diem-logger/tests/logger_custom_format.rs: `.custom_format(|entry| {
            use std::fmt::Write;
            let mut w = String::new();
            write!(w, "0000-00-00")?;
            write!(w, " [{}]", entry.metadata().level())?;
            if let Some(message) = entry.message() {
                write!(w, " {}", message)?;
            }
            if !entry.data().is_empty() {
                write!(w, " {}", serde_json::to_string(&entry.data()).unwrap())?;
            }
            Ok(w)
        })`
$DIR/crates/diem-logger/tests/logger_custom_format.rs: `.message()`
$DIR/crates/diem-logger/tests/logger_custom_format.rs: `.data()`
$DIR/crates/diem-logger/tests/logger_custom_format.rs: `.is_empty()`
$DIR/crates/diem-logger/tests/logger_custom_format.rs: `.build()`
$DIR/crates/diem-logger/tests/logger_custom_format.rs: `.remove(0)`
$DIR/crates/diem-logger/tests/remote.rs: `std::env::set_var("RUST_LOG_REMOTE", "debug");`
$DIR/crates/diem-logger/tests/remote.rs: `DiemLogger::builder().address(addr).is_async(true).build();`
$DIR/crates/diem-logger/tests/remote.rs: `diem_logger::flush();`
$DIR/crates/diem-logger/tests/remote.rs: `stream.read_until(b'\n', &mut buf).unwrap();`
$DIR/crates/diem-logger/tests/remote.rs: `stream.read_until(b'\n', &mut buf).unwrap();`
$DIR/crates/diem-logger/tests/remote.rs: `.local_addr()`
$DIR/crates/diem-logger/tests/remote.rs: `.address(addr)`
$DIR/crates/diem-logger/tests/remote.rs: `.is_async(true)`
$DIR/crates/diem-logger/tests/remote.rs: `.build()`
$DIR/crates/diem-logger/tests/remote.rs: `.accept()`
$DIR/crates/diem-logger/tests/remote.rs: `.read_until(b'\n', &mut buf)`
$DIR/crates/diem-logger/tests/remote.rs: `.read_until(b'\n', &mut buf)`
$DIR/crates/diem-logger/tests/remote.rs: `.join()`
$DIR/crates/diem-logger/tests/tracing_translation_tests.rs: `DiemLogger::builder()
        .is_async(false)
        .printer(Box::new(writer))
        .build();`
$DIR/crates/diem-logger/tests/tracing_translation_tests.rs: `tracing::error!("hello world");`
$DIR/crates/diem-logger/tests/tracing_translation_tests.rs: `tracing::info!("foo {} bar", 42);`
$DIR/crates/diem-logger/tests/tracing_translation_tests.rs: `tracing::warn!(a = true, b = false);`
$DIR/crates/diem-logger/tests/tracing_translation_tests.rs: `.logs.write()`
$DIR/crates/diem-logger/tests/tracing_translation_tests.rs: `.is_async(false)`
$DIR/crates/diem-logger/tests/tracing_translation_tests.rs: `.printer(Box::new(writer))`
$DIR/crates/diem-logger/tests/tracing_translation_tests.rs: `.build()`
$DIR/crates/diem-logger/tests/tracing_translation_tests.rs: `.pop()`
$DIR/crates/diem-logger/tests/tracing_translation_tests.rs: `.pop()`
$DIR/crates/diem-logger/tests/tracing_translation_tests.rs: `.pop()`
$DIR/crates/diem-metrics/src/json_encoder.rs: `export_me.insert(
                            flatten_metric_with_labels(name, m),
                            m.get_counter().get_value(),
                        );`
$DIR/crates/diem-metrics/src/json_encoder.rs: `export_me.insert(
                            flatten_metric_with_labels(name, m),
                            m.get_gauge().get_value(),
                        );`
$DIR/crates/diem-metrics/src/json_encoder.rs: `export_me.insert(
                            flatten_metric_with_labels(&format!("{}_count", name), m),
                            h.get_sample_count() as f64,
                        );`
$DIR/crates/diem-metrics/src/json_encoder.rs: `export_me.insert(
                            flatten_metric_with_labels(&format!("{}_sum", name), m),
                            h.get_sample_sum(),
                        );`
$DIR/crates/diem-metrics/src/json_encoder.rs: `writer.write_all(serde_json::to_string(&export_me).unwrap().as_bytes())?;`
$DIR/crates/diem-metrics/src/json_encoder.rs: `counter.with_label_values(&["get", "302"]).inc();`
$DIR/crates/diem-metrics/src/json_encoder.rs: `counter.with_label_values(&["get", "302"]).inc();`
$DIR/crates/diem-metrics/src/json_encoder.rs: `counter.with_label_values(&["get", "404"]).inc();`
$DIR/crates/diem-metrics/src/json_encoder.rs: `counter.with_label_values(&["put", ""]).inc();`
$DIR/crates/diem-metrics/src/json_encoder.rs: `.get_name()`
$DIR/crates/diem-metrics/src/json_encoder.rs: `.get_field_type()`
$DIR/crates/diem-metrics/src/json_encoder.rs: `.get_metric()`
$DIR/crates/diem-metrics/src/json_encoder.rs: `.insert(
                            flatten_metric_with_labels(name, m),
                            m.get_counter().get_value(),
                        )`
$DIR/crates/diem-metrics/src/json_encoder.rs: `.get_counter()`
$DIR/crates/diem-metrics/src/json_encoder.rs: `.get_value()`
$DIR/crates/diem-metrics/src/json_encoder.rs: `.insert(
                            flatten_metric_with_labels(name, m),
                            m.get_gauge().get_value(),
                        )`
$DIR/crates/diem-metrics/src/json_encoder.rs: `.get_gauge()`
$DIR/crates/diem-metrics/src/json_encoder.rs: `.get_value()`
$DIR/crates/diem-metrics/src/json_encoder.rs: `.get_histogram()`
$DIR/crates/diem-metrics/src/json_encoder.rs: `.insert(
                            flatten_metric_with_labels(&format!("{}_count", name), m),
                            h.get_sample_count() as f64,
                        )`
$DIR/crates/diem-metrics/src/json_encoder.rs: `.get_sample_count()`
$DIR/crates/diem-metrics/src/json_encoder.rs: `.insert(
                            flatten_metric_with_labels(&format!("{}_sum", name), m),
                            h.get_sample_sum(),
                        )`
$DIR/crates/diem-metrics/src/json_encoder.rs: `.get_sample_sum()`
$DIR/crates/diem-metrics/src/json_encoder.rs: `.write_all(serde_json::to_string(&export_me).unwrap().as_bytes())`
$DIR/crates/diem-metrics/src/json_encoder.rs: `.get_label()`
$DIR/crates/diem-metrics/src/json_encoder.rs: `.is_empty()`
$DIR/crates/diem-metrics/src/json_encoder.rs: `.get_label()`
$DIR/crates/diem-metrics/src/json_encoder.rs: `.map(LabelPair::get_value)`
$DIR/crates/diem-metrics/src/json_encoder.rs: `.filter(|&x| !x.is_empty())`
$DIR/crates/diem-metrics/src/json_encoder.rs: `.is_empty()`
$DIR/crates/diem-metrics/src/json_encoder.rs: `.collect()`
$DIR/crates/diem-metrics/src/json_encoder.rs: `.join(".")`
$DIR/crates/diem-metrics/src/json_encoder.rs: `.is_empty()`
$DIR/crates/diem-metrics/src/json_encoder.rs: `.metric()`
$DIR/crates/diem-metrics/src/json_encoder.rs: `.with_label_values(&[""])`
$DIR/crates/diem-metrics/src/json_encoder.rs: `.metric()`
$DIR/crates/diem-metrics/src/json_encoder.rs: `.with_label_values(&["hello"])`
$DIR/crates/diem-metrics/src/json_encoder.rs: `.metric()`
$DIR/crates/diem-metrics/src/json_encoder.rs: `.with_label_values(&["", ""])`
$DIR/crates/diem-metrics/src/json_encoder.rs: `.metric()`
$DIR/crates/diem-metrics/src/json_encoder.rs: `.with_label_values(&["hello", "world"])`
$DIR/crates/diem-metrics/src/json_encoder.rs: `.metric()`
$DIR/crates/diem-metrics/src/json_encoder.rs: `.with_label_values(&["get", "302"])`
$DIR/crates/diem-metrics/src/json_encoder.rs: `.inc()`
$DIR/crates/diem-metrics/src/json_encoder.rs: `.with_label_values(&["get", "302"])`
$DIR/crates/diem-metrics/src/json_encoder.rs: `.inc()`
$DIR/crates/diem-metrics/src/json_encoder.rs: `.with_label_values(&["get", "404"])`
$DIR/crates/diem-metrics/src/json_encoder.rs: `.inc()`
$DIR/crates/diem-metrics/src/json_encoder.rs: `.with_label_values(&["put", ""])`
$DIR/crates/diem-metrics/src/json_encoder.rs: `.inc()`
$DIR/crates/diem-metrics/src/json_encoder.rs: `.collect()`
$DIR/crates/diem-metrics/src/unit_tests/lib_test.rs: `r.register(Box::new(counter.clone())).unwrap();`
$DIR/crates/diem-metrics/src/unit_tests/lib_test.rs: `counter.inc();`
$DIR/crates/diem-metrics/src/unit_tests/lib_test.rs: `.register(Box::new(counter.clone()))`
$DIR/crates/diem-metrics/src/unit_tests/lib_test.rs: `.inc()`
$DIR/crates/diem-metrics/src/unit_tests/lib_test.rs: `.gather()`
$DIR/crates/diem-metrics/src/unit_tests/lib_test.rs: `.get(0)`
$DIR/crates/diem-metrics/src/unit_tests/lib_test.rs: `.get_metric()`
$DIR/crates/diem-rate-limiter/src/rate_limit.rs: `metrics
                    .with_label_values(&[self.label.as_str(), "allowed"])
                    .observe(self.allowed_in_period as f64);`
$DIR/crates/diem-rate-limiter/src/rate_limit.rs: `metrics
                    .with_label_values(&[self.label.as_str(), "throttled"])
                    .observe(self.throttled_in_period as f64);`
$DIR/crates/diem-rate-limiter/src/rate_limit.rs: `self.allowed_in_period = 0;`
$DIR/crates/diem-rate-limiter/src/rate_limit.rs: `self.throttled_in_period = 0;`
$DIR/crates/diem-rate-limiter/src/rate_limit.rs: `self.last_refresh_time += Duration::from_secs(num_intervals);`
$DIR/crates/diem-rate-limiter/src/rate_limit.rs: `self.allowed_in_period = self.allowed_in_period.saturating_add(requested);`
$DIR/crates/diem-rate-limiter/src/rate_limit.rs: `self.throttled_in_period = self.throttled_in_period.saturating_add(requested);`
$DIR/crates/diem-rate-limiter/src/rate_limit.rs: `self.allowed_in_period = self.allowed_in_period.saturating_add(allowed);`
$DIR/crates/diem-rate-limiter/src/rate_limit.rs: `self.throttled_in_period = self.throttled_in_period.saturating_add(requested);`
$DIR/crates/diem-rate-limiter/src/rate_limit.rs: `self.tokens = self.tokens.saturating_sub(requested);`
$DIR/crates/diem-rate-limiter/src/rate_limit.rs: `self.tokens = min(self.size, self.tokens.saturating_add(new_tokens));`
$DIR/crates/diem-rate-limiter/src/rate_limit.rs: `self.allowed_in_period = self.allowed_in_period.saturating_sub(new_tokens);`
$DIR/crates/diem-rate-limiter/src/rate_limit.rs: `rate_limiter
            .acquire_tokens(1)
            .expect_err("Expected time to wait");`
$DIR/crates/diem-rate-limiter/src/rate_limit.rs: `sleep(wait_time.duration_since(Instant::now()));`
$DIR/crates/diem-rate-limiter/src/rate_limit.rs: `sleep(bucket.time_of_next_refill().duration_since(Instant::now()));`
$DIR/crates/diem-rate-limiter/src/rate_limit.rs: `sleep(bucket.time_of_next_refill().duration_since(Instant::now()));`
$DIR/crates/diem-rate-limiter/src/rate_limit.rs: `.buckets.read()`
$DIR/crates/diem-rate-limiter/src/rate_limit.rs: `.get(&key)`
$DIR/crates/diem-rate-limiter/src/rate_limit.rs: `.buckets
                .write()`
$DIR/crates/diem-rate-limiter/src/rate_limit.rs: `.entry(key.clone())`
$DIR/crates/diem-rate-limiter/src/rate_limit.rs: `.or_insert_with(|| {
                    bucket_create(
                        self.label.to_string(),
                        self.log_info.clone(),
                        format!("{:?}", key),
                        size.saturating_mul(self.new_bucket_start_percentage as usize) / 100,
                        size,
                        rate,
                        self.metrics.clone(),
                    )
                })`
$DIR/crates/diem-rate-limiter/src/rate_limit.rs: `.saturating_mul(self.new_bucket_start_percentage as usize)`
$DIR/crates/diem-rate-limiter/src/rate_limit.rs: `.last_refresh_time.elapsed()`
$DIR/crates/diem-rate-limiter/src/rate_limit.rs: `.as_secs()`
$DIR/crates/diem-rate-limiter/src/rate_limit.rs: `.with_label_values(&[self.label.as_str(), "allowed"])`
$DIR/crates/diem-rate-limiter/src/rate_limit.rs: `.observe(self.allowed_in_period as f64)`
$DIR/crates/diem-rate-limiter/src/rate_limit.rs: `.with_label_values(&[self.label.as_str(), "throttled"])`
$DIR/crates/diem-rate-limiter/src/rate_limit.rs: `.observe(self.throttled_in_period as f64)`
$DIR/crates/diem-rate-limiter/src/rate_limit.rs: `.saturating_mul(self.rate)`
$DIR/crates/diem-rate-limiter/src/rate_limit.rs: `.allowed_in_period.saturating_add(requested)`
$DIR/crates/diem-rate-limiter/src/rate_limit.rs: `.throttled_in_period.saturating_add(requested)`
$DIR/crates/diem-rate-limiter/src/rate_limit.rs: `.allowed_in_period.saturating_add(allowed)`
$DIR/crates/diem-rate-limiter/src/rate_limit.rs: `.throttled_in_period.saturating_add(requested)`
$DIR/crates/diem-rate-limiter/src/rate_limit.rs: `.tokens.saturating_sub(requested)`
$DIR/crates/diem-rate-limiter/src/rate_limit.rs: `.saturating_sub(self.tokens)`
$DIR/crates/diem-rate-limiter/src/rate_limit.rs: `.ceil()`
$DIR/crates/diem-rate-limiter/src/rate_limit.rs: `.tokens.saturating_add(new_tokens)`
$DIR/crates/diem-rate-limiter/src/rate_limit.rs: `.allowed_in_period.saturating_sub(new_tokens)`
$DIR/crates/diem-rate-limiter/src/rate_limit.rs: `.acquire_tokens(1)`
$DIR/crates/diem-rate-limiter/src/rate_limit.rs: `.lock()`
$DIR/crates/diem-rate-limiter/src/rate_limit.rs: `.lock()`
$DIR/crates/diem-rate-limiter/src/rate_limit.rs: `.duration_since(Instant::now())`
$DIR/crates/diem-rate-limiter/src/rate_limit.rs: `.lock()`
$DIR/crates/diem-rate-limiter/src/rate_limit.rs: `.duration_since(Instant::now())`
$DIR/crates/diem-rate-limiter/src/rate_limit.rs: `.duration_since(Instant::now())`
$DIR/crates/diem-rate-limiter/src/rate_limit.rs: `.lock()`
$DIR/crates/diem-retrier/src/lib.rs: `thread::sleep(delay);`
$DIR/crates/diem-retrier/src/lib.rs: `.into_iter()`
$DIR/crates/diem-retrier/src/lib.rs: `.next()`
$DIR/crates/diem-retrier/src/lib.rs: `.into_iter()`
$DIR/crates/diem-retrier/src/lib.rs: `.into_iter()`
$DIR/crates/diem-time-service/src/mock.rs: `futures::executor::block_on(delay);`
$DIR/crates/diem-time-service/src/mock.rs: `self.next_sleep_index = self
            .next_sleep_index
            .checked_add(1)
            .expect("too many sleep entries");`
$DIR/crates/diem-time-service/src/mock.rs: `self.now += duration;`
$DIR/crates/diem-time-service/src/mock.rs: `self.now = max(self.now, auto_advance_deadline);`
$DIR/crates/diem-time-service/src/mock.rs: `self.auto_advance_deadline = None;`
$DIR/crates/diem-time-service/src/mock.rs: `this.deadline = deadline;`
$DIR/crates/diem-time-service/src/mock.rs: `this.index = index;`
$DIR/crates/diem-time-service/src/mock.rs: `assert_pending!(sleep.poll());`
$DIR/crates/diem-time-service/src/mock.rs: `assert_pending!(sleep.poll());`
$DIR/crates/diem-time-service/src/mock.rs: `sleep.enter(|_c, sleep| sleep.reset(ms(5)));`
$DIR/crates/diem-time-service/src/mock.rs: `assert_pending!(sleep.poll());`
$DIR/crates/diem-time-service/src/mock.rs: `sleep.enter(|_c, sleep| sleep.reset(ms(5)));`
$DIR/crates/diem-time-service/src/mock.rs: `assert_pending!(sleep.poll());`
$DIR/crates/diem-time-service/src/mock.rs: `assert_pending!(sleep.poll());`
$DIR/crates/diem-time-service/src/mock.rs: `sleep.enter(|_c, sleep| sleep.reset_until(time.now() + ms(5)));`
$DIR/crates/diem-time-service/src/mock.rs: `assert_pending!(sleep.poll());`
$DIR/crates/diem-time-service/src/mock.rs: `assert_pending!(sleep_5ms.poll());`
$DIR/crates/diem-time-service/src/mock.rs: `assert_pending!(sleep_10ms_1.poll());`
$DIR/crates/diem-time-service/src/mock.rs: `assert_pending!(sleep_10ms_2.poll());`
$DIR/crates/diem-time-service/src/mock.rs: `assert_pending!(sleep_10ms_3.poll());`
$DIR/crates/diem-time-service/src/mock.rs: `assert_pending!(sleep_15ms.poll());`
$DIR/crates/diem-time-service/src/mock.rs: `assert_pending!(sleep_20ms.poll());`
$DIR/crates/diem-time-service/src/mock.rs: `assert_ready!(sleep_5ms.poll());`
$DIR/crates/diem-time-service/src/mock.rs: `assert_ready!(sleep_10ms_1.poll());`
$DIR/crates/diem-time-service/src/mock.rs: `assert_ready!(sleep_10ms_2.poll());`
$DIR/crates/diem-time-service/src/mock.rs: `assert_ready!(sleep_10ms_3.poll());`
$DIR/crates/diem-time-service/src/mock.rs: `assert_pending!(sleep_15ms.poll());`
$DIR/crates/diem-time-service/src/mock.rs: `assert_pending!(sleep_20ms.poll());`
$DIR/crates/diem-time-service/src/mock.rs: `assert_ready!(sleep_15ms.poll());`
$DIR/crates/diem-time-service/src/mock.rs: `assert_pending!(sleep_20ms.poll());`
$DIR/crates/diem-time-service/src/mock.rs: `assert_ready_eq!(interval.poll_next(), Some(()));`
$DIR/crates/diem-time-service/src/mock.rs: `assert_ready_eq!(interval.poll_next(), Some(()));`
$DIR/crates/diem-time-service/src/mock.rs: `assert_ready_ok!(timeout.poll());`
$DIR/crates/diem-time-service/src/mock.rs: `assert_pending!(timeout.poll());`
$DIR/crates/diem-time-service/src/mock.rs: `assert_pending!(timeout.poll());`
$DIR/crates/diem-time-service/src/mock.rs: `tx.send(()).unwrap();`
$DIR/crates/diem-time-service/src/mock.rs: `assert_pending!(timeout.poll());`
$DIR/crates/diem-time-service/src/mock.rs: `assert_ready!(sleep.poll());`
$DIR/crates/diem-time-service/src/mock.rs: `assert_ready!(sleep.poll());`
$DIR/crates/diem-time-service/src/mock.rs: `assert_pending!(sleep.poll());`
$DIR/crates/diem-time-service/src/mock.rs: `assert_pending!(sleep.poll());`
$DIR/crates/diem-time-service/src/mock.rs: `assert_ready!(sleep.poll());`
$DIR/crates/diem-time-service/src/mock.rs: `assert_ready!(interval.poll_next());`
$DIR/crates/diem-time-service/src/mock.rs: `assert_ready!(interval.poll_next());`
$DIR/crates/diem-time-service/src/mock.rs: `assert_ready!(interval.poll_next());`
$DIR/crates/diem-time-service/src/mock.rs: `.next_sleep_index
            .checked_add(1)`
$DIR/crates/diem-time-service/src/mock.rs: `.pending.insert((deadline, index), maybe_waker)`
$DIR/crates/diem-time-service/src/mock.rs: `.get_mut()`
$DIR/crates/diem-time-service/src/mock.rs: `.flatten()`
$DIR/crates/diem-time-service/src/mock.rs: `.get_mut()`
$DIR/crates/diem-time-service/src/mock.rs: `.saturating_duration_since(this.time_service.now())`
$DIR/crates/diem-time-service/src/mock.rs: `.enter(|_c, sleep| sleep.reset(ms(5)))`
$DIR/crates/diem-time-service/src/mock.rs: `.enter(|_c, sleep| sleep.reset(ms(5)))`
$DIR/crates/diem-time-service/src/mock.rs: `.sleep_until(start + ms(10))`
$DIR/crates/diem-time-service/src/mock.rs: `.enter(|_c, sleep| sleep.reset_until(time.now() + ms(5)))`
$DIR/crates/diem-time-service/src/mock.rs: `.interval(ms(10))`
$DIR/crates/diem-time-service/src/mock.rs: `.timeout(ms(10), async {})`
$DIR/crates/diem-time-service/src/mock.rs: `.timeout(ms(10), rx)`
$DIR/crates/diem-time-service/src/mock.rs: `.send(())`
$DIR/crates/diem-time-service/src/mock.rs: `.timeout(ms(10), rx)`
$DIR/crates/short-hex-str/src/lib.rs: `debug_checked_precondition!(dst.len() == 2 * src.len());`
$DIR/crates/short-hex-str/src/lib.rs: `out[0] = hi;`
$DIR/crates/short-hex-str/src/lib.rs: `out[1] = lo;`
$DIR/crates/short-hex-str/src/lib.rs: `.zip(dst.chunks_mut(2))`
$DIR/crates/short-hex-str/src/lib.rs: `.chunks_mut(2)`
$DIR/devtools/x/src/cargo/selected_package.rs: `self.excludes.extend(exclude_names);`
$DIR/devtools/x/src/cargo/selected_package.rs: `.excludes.extend(exclude_names)`
$DIR/devtools/x/src/cargo/selected_package.rs: `.into_iter()`
$DIR/devtools/x/src/cargo/selected_package.rs: `.collect()`
$DIR/devtools/x/src/cargo/selected_package.rs: `.into_iter()`
$DIR/devtools/x/src/cargo/selected_package.rs: `.collect()`
$DIR/execution/execution-correctness/src/tests/local.rs: `suite::run_test_suite(execution_correctness(true));`
$DIR/execution/execution-correctness/src/tests/local.rs: `.client()`
$DIR/execution/execution-correctness/src/tests/serializer.rs: `suite::run_test_suite(execution_correctness(true));`
$DIR/execution/execution-correctness/src/tests/serializer.rs: `.client()`
$DIR/execution/execution-correctness/src/tests/thread.rs: `suite::run_test_suite(execution_correctness(true));`
$DIR/execution/execution-correctness/src/tests/thread.rs: `.client()`
$DIR/execution/execution-correctness/tests/binary.rs: `config.execution.service =
        ExecutionCorrectnessService::Process(RemoteExecutionService { server_address });`
$DIR/execution/execution-correctness/tests/binary.rs: `config_path.create_as_file().unwrap();`
$DIR/execution/execution-correctness/tests/binary.rs: `config.save_config(config_path.path()).unwrap();`
$DIR/execution/execution-correctness/tests/binary.rs: `command
        .arg(config_path.path())
        .stdin(std::process::Stdio::inherit())
        .stdout(std::process::Stdio::inherit())
        .stderr(std::process::Stdio::inherit());`
$DIR/execution/execution-correctness/tests/binary.rs: `child
        .kill()
        .expect("could not kill execution-correctness process");`
$DIR/execution/execution-correctness/tests/binary.rs: `child
        .wait()
        .expect("could not wait on execution-correctness process");`
$DIR/execution/execution-correctness/tests/binary.rs: `.create_as_file()`
$DIR/execution/execution-correctness/tests/binary.rs: `.save_config(config_path.path())`
$DIR/execution/execution-correctness/tests/binary.rs: `.path()`
$DIR/execution/execution-correctness/tests/binary.rs: `.arg(config_path.path())`
$DIR/execution/execution-correctness/tests/binary.rs: `.path()`
$DIR/execution/execution-correctness/tests/binary.rs: `.stdin(std::process::Stdio::inherit())`
$DIR/execution/execution-correctness/tests/binary.rs: `.stdout(std::process::Stdio::inherit())`
$DIR/execution/execution-correctness/tests/binary.rs: `.stderr(std::process::Stdio::inherit())`
$DIR/execution/execution-correctness/tests/binary.rs: `.spawn()`
$DIR/execution/execution-correctness/tests/binary.rs: `.client()`
$DIR/execution/execution-correctness/tests/binary.rs: `.reset()`
$DIR/execution/execution-correctness/tests/binary.rs: `.kill()`
$DIR/execution/execution-correctness/tests/binary.rs: `.wait()`
$DIR/execution/executor/src/executor_test.rs: `executor.commit_blocks(vec![id], ledger_info).unwrap();`
$DIR/execution/executor/src/executor_test.rs: `buf[AccountAddress::LENGTH - 8..].copy_from_slice(&bytes);`
$DIR/execution/executor/src/executor_test.rs: `buf[HashValue::LENGTH - 8..].copy_from_slice(&bytes);`
$DIR/execution/executor/src/executor_test.rs: `parent_block_id = execute_and_commit_block(&executor, parent_block_id, i);`
$DIR/execution/executor/src/executor_test.rs: `executor
        .commit_blocks(vec![block1_id], ledger_info.clone())
        .unwrap();`
$DIR/execution/executor/src/executor_test.rs: `responses.push(output);`
$DIR/execution/executor/src/executor_test.rs: `responses.dedup();`
$DIR/execution/executor/src/executor_test.rs: `txns.push(txn);`
$DIR/execution/executor/src/executor_test.rs: `executor
        .commit_blocks(vec![id], ledger_info.clone())
        .unwrap();`
$DIR/execution/executor/src/executor_test.rs: `executor
        .execute_and_commit_chunk(chunks[0].clone(), ledger_info.clone(), None)
        .unwrap();`
$DIR/execution/executor/src/executor_test.rs: `executor
        .execute_and_commit_chunk(chunks[1].clone(), ledger_info.clone(), None)
        .unwrap();`
$DIR/execution/executor/src/executor_test.rs: `executor
        .execute_and_commit_chunk(
            TransactionListWithProof::new_empty(),
            ledger_info.clone(),
            None,
        )
        .unwrap();`
$DIR/execution/executor/src/executor_test.rs: `executor
        .execute_and_commit_chunk(chunks[1].clone(), ledger_info.clone(), None)
        .unwrap();`
$DIR/execution/executor/src/executor_test.rs: `executor
        .execute_and_commit_chunk(chunks[2].clone(), ledger_info.clone(), None)
        .unwrap();`
$DIR/execution/executor/src/executor_test.rs: `executor
            .execute_and_commit_chunk(chunks[0].clone(), ledger_info.clone(), None)
            .unwrap();`
$DIR/execution/executor/src/executor_test.rs: `executor
            .execute_and_commit_chunk(chunks[1].clone(), ledger_info.clone(), None)
            .unwrap();`
$DIR/execution/executor/src/executor_test.rs: `executor.commit_blocks(vec![block_id], ledger_info).unwrap();`
$DIR/execution/executor/src/executor_test.rs: `parent_block_id = first_block_id;`
$DIR/execution/executor/src/executor_test.rs: `.execute_block((id, vec![txn]), parent_block_id)`
$DIR/execution/executor/src/executor_test.rs: `.root_hash()`
$DIR/execution/executor/src/executor_test.rs: `.commit_blocks(vec![id], ledger_info)`
$DIR/execution/executor/src/executor_test.rs: `.to_be_bytes()`
$DIR/execution/executor/src/executor_test.rs: `.copy_from_slice(&bytes)`
$DIR/execution/executor/src/executor_test.rs: `.to_be_bytes()`
$DIR/execution/executor/src/executor_test.rs: `.copy_from_slice(&bytes)`
$DIR/execution/executor/src/executor_test.rs: `.committed_block_id()`
$DIR/execution/executor/src/executor_test.rs: `.execute_block((block_id, vec![txn0, txn1, txn2]), parent_block_id)`
$DIR/execution/executor/src/executor_test.rs: `.committed_block_id()`
$DIR/execution/executor/src/executor_test.rs: `.map(|i| encode_mint_transaction(gen_address(i), 100))`
$DIR/execution/executor/src/executor_test.rs: `.collect::<Vec<_>>()`
$DIR/execution/executor/src/executor_test.rs: `.execute_block((block_id, txns), parent_block_id)`
$DIR/execution/executor/src/executor_test.rs: `.root_hash()`
$DIR/execution/executor/src/executor_test.rs: `.commit_blocks(vec![block_id], ledger_info)`
$DIR/execution/executor/src/executor_test.rs: `.committed_block_id()`
$DIR/execution/executor/src/executor_test.rs: `.committed_block_id()`
$DIR/execution/executor/src/executor_test.rs: `.map(|i| encode_mint_transaction(gen_address(i), 100))`
$DIR/execution/executor/src/executor_test.rs: `.collect::<Vec<_>>()`
$DIR/execution/executor/src/executor_test.rs: `.map(|i| {
            if i % 2 == 0 {
                encode_mint_transaction(gen_address(i + 50), 100)
            } else {
                encode_transfer_transaction(gen_address(i), gen_address(i + 1), 500)
            }
        })`
$DIR/execution/executor/src/executor_test.rs: `.collect::<Vec<_>>()`
$DIR/execution/executor/src/executor_test.rs: `.execute_block((block1_id, block1_txns), parent_block_id)`
$DIR/execution/executor/src/executor_test.rs: `.execute_block((block2_id, block2_txns), block1_id)`
$DIR/execution/executor/src/executor_test.rs: `.root_hash()`
$DIR/execution/executor/src/executor_test.rs: `.commit_blocks(vec![block1_id, block2_id], ledger_info)`
$DIR/execution/executor/src/executor_test.rs: `.committed_block_id()`
$DIR/execution/executor/src/executor_test.rs: `.map(|i| encode_mint_transaction(gen_address(i), 100))`
$DIR/execution/executor/src/executor_test.rs: `.collect::<Vec<_>>()`
$DIR/execution/executor/src/executor_test.rs: `.execute_block((block1_id, block1_txns), parent_block_id)`
$DIR/execution/executor/src/executor_test.rs: `.root_hash()`
$DIR/execution/executor/src/executor_test.rs: `.commit_blocks(vec![block1_id], ledger_info.clone())`
$DIR/execution/executor/src/executor_test.rs: `.commit_blocks(vec![block1_id], ledger_info)`
$DIR/execution/executor/src/executor_test.rs: `.committed_block_id()`
$DIR/execution/executor/src/executor_test.rs: `.map(|i| encode_mint_transaction(gen_address(i), 100))`
$DIR/execution/executor/src/executor_test.rs: `.collect()`
$DIR/execution/executor/src/executor_test.rs: `.execute_block((block_id, txns.clone()), parent_block_id)`
$DIR/execution/executor/src/executor_test.rs: `.push(output)`
$DIR/execution/executor/src/executor_test.rs: `.dedup()`
$DIR/execution/executor/src/executor_test.rs: `.len()`
$DIR/execution/executor/src/executor_test.rs: `.last()`
$DIR/execution/executor/src/executor_test.rs: `.push(txn)`
$DIR/execution/executor/src/executor_test.rs: `.execute_block((id, txns.clone()), executor.committed_block_id())`
$DIR/execution/executor/src/executor_test.rs: `.committed_block_id()`
$DIR/execution/executor/src/executor_test.rs: `.len()`
$DIR/execution/executor/src/executor_test.rs: `.root_hash()`
$DIR/execution/executor/src/executor_test.rs: `.commit_blocks(vec![id], ledger_info.clone())`
$DIR/execution/executor/src/executor_test.rs: `.into_iter()`
$DIR/execution/executor/src/executor_test.rs: `.map(|range| {
            executor
                .db
                .reader
                .get_transactions(
                    range.start,
                    range.end - range.start,
                    ledger_version,
                    false, /* fetch_events */
                )
                .unwrap()
        })`
$DIR/execution/executor/src/executor_test.rs: `.db
                .reader
                .get_transactions(
                    range.start,
                    range.end - range.start,
                    ledger_version,
                    false, /* fetch_events */
                )`
$DIR/execution/executor/src/executor_test.rs: `.collect()`
$DIR/execution/executor/src/executor_test.rs: `.execute_and_commit_chunk(chunks[0].clone(), ledger_info.clone(), None)`
$DIR/execution/executor/src/executor_test.rs: `.reader.get_latest_ledger_info()`
$DIR/execution/executor/src/executor_test.rs: `.execute_and_commit_chunk(chunks[1].clone(), ledger_info.clone(), None)`
$DIR/execution/executor/src/executor_test.rs: `.reader.get_latest_ledger_info()`
$DIR/execution/executor/src/executor_test.rs: `.execute_and_commit_chunk(
            TransactionListWithProof::new_empty(),
            ledger_info.clone(),
            None,
        )`
$DIR/execution/executor/src/executor_test.rs: `.reader.get_latest_ledger_info()`
$DIR/execution/executor/src/executor_test.rs: `.execute_and_commit_chunk(chunks[1].clone(), ledger_info.clone(), None)`
$DIR/execution/executor/src/executor_test.rs: `.reader.get_latest_ledger_info()`
$DIR/execution/executor/src/executor_test.rs: `.execute_and_commit_chunk(chunks[2].clone(), ledger_info.clone(), None)`
$DIR/execution/executor/src/executor_test.rs: `.reader.get_latest_ledger_info()`
$DIR/execution/executor/src/executor_test.rs: `.execute_and_commit_chunk(chunks[0].clone(), ledger_info.clone(), None)`
$DIR/execution/executor/src/executor_test.rs: `.reader.get_latest_ledger_info()`
$DIR/execution/executor/src/executor_test.rs: `.execute_and_commit_chunk(chunks[1].clone(), ledger_info.clone(), None)`
$DIR/execution/executor/src/executor_test.rs: `.reader.get_latest_ledger_info()`
$DIR/execution/executor/src/executor_test.rs: `.committed_block_id()`
$DIR/execution/executor/src/executor_test.rs: `.map(|_| encode_mint_transaction(gen_address(rng.gen::<u64>()), 100))`
$DIR/execution/executor/src/executor_test.rs: `.gen::<u64>()`
$DIR/execution/executor/src/executor_test.rs: `.collect::<Vec<_>>()`
$DIR/execution/executor/src/executor_test.rs: `.execute_block((block_id, txns), parent_block_id)`
$DIR/execution/executor/src/executor_test.rs: `.root_hash()`
$DIR/execution/executor/src/executor_test.rs: `.commit_blocks(vec![block_id], ledger_info)`
$DIR/execution/executor/src/executor_test.rs: `.committed_block_id()`
$DIR/execution/executor/src/executor_test.rs: `.execute_block((first_block_id, vec![first_txn]), parent_block_id)`
$DIR/execution/executor/src/executor_test.rs: `.execute_block((second_block.id, second_block.txns), parent_block_id)`
$DIR/execution/executor/src/mock_vm/mock_vm_test.rs: `txns.push(encode_mint_transaction(gen_address(i), amount));`
$DIR/execution/executor/src/mock_vm/mock_vm_test.rs: `txns.push(encode_mint_transaction(sender, amount));`
$DIR/execution/executor/src/mock_vm/mock_vm_test.rs: `output_iter.next();`
$DIR/execution/executor/src/mock_vm/mock_vm_test.rs: `output_iter.next();`
$DIR/execution/executor/src/mock_vm/mock_vm_test.rs: `.push(encode_mint_transaction(gen_address(i), amount))`
$DIR/execution/executor/src/mock_vm/mock_vm_test.rs: `.as_signed_user_txn()`
$DIR/execution/executor/src/mock_vm/mock_vm_test.rs: `.sender()`
$DIR/execution/executor/src/mock_vm/mock_vm_test.rs: `.push(encode_mint_transaction(sender, amount))`
$DIR/execution/executor/src/mock_vm/mock_vm_test.rs: `.enumerate()`
$DIR/execution/executor/src/mock_vm/mock_vm_test.rs: `.next()`
$DIR/execution/executor/src/mock_vm/mock_vm_test.rs: `.next()`
$DIR/execution/executor/src/speculation_cache/test.rs: `buf[HashValue::LENGTH - 8..].copy_from_slice(&bytes);`
$DIR/execution/executor/src/speculation_cache/test.rs: `cache
        .add_block(*PRE_GENESIS_BLOCK_ID, gen_block(id(1)))
        .unwrap();`
$DIR/execution/executor/src/speculation_cache/test.rs: `cache.add_block(id(1), gen_block(id(2))).unwrap();`
$DIR/execution/executor/src/speculation_cache/test.rs: `cache.add_block(id(1), gen_block(id(3))).unwrap();`
$DIR/execution/executor/src/speculation_cache/test.rs: `cache.add_block(id(3), gen_block(id(4))).unwrap();`
$DIR/execution/executor/src/speculation_cache/test.rs: `cache.add_block(id(3), gen_block(id(5))).unwrap();`
$DIR/execution/executor/src/speculation_cache/test.rs: `cache
        .add_block(*PRE_GENESIS_BLOCK_ID, gen_block(id(6)))
        .unwrap();`
$DIR/execution/executor/src/speculation_cache/test.rs: `cache.add_block(id(6), gen_block(id(7))).unwrap();`
$DIR/execution/executor/src/speculation_cache/test.rs: `cache.add_block(id(7), gen_block(id(8))).unwrap();`
$DIR/execution/executor/src/speculation_cache/test.rs: `cache.add_block(id(6), gen_block(id(9))).unwrap();`
$DIR/execution/executor/src/speculation_cache/test.rs: `cache.add_block(id(9), gen_block(id(10))).unwrap();`
$DIR/execution/executor/src/speculation_cache/test.rs: `cache.add_block(id(9), gen_block(id(11))).unwrap();`
$DIR/execution/executor/src/speculation_cache/test.rs: `cache.prune(&gen_ledger_info(id(9), false)).unwrap();`
$DIR/execution/executor/src/speculation_cache/test.rs: `num_blocks = cache.block_map.lock().len();`
$DIR/execution/executor/src/speculation_cache/test.rs: `cache.prune(&gen_ledger_info(id(1), true)).unwrap();`
$DIR/execution/executor/src/speculation_cache/test.rs: `.to_be_bytes()`
$DIR/execution/executor/src/speculation_cache/test.rs: `.copy_from_slice(&bytes)`
$DIR/execution/executor/src/speculation_cache/test.rs: `.add_block(*PRE_GENESIS_BLOCK_ID, gen_block(id(1)))`
$DIR/execution/executor/src/speculation_cache/test.rs: `.add_block(id(1), gen_block(id(2)))`
$DIR/execution/executor/src/speculation_cache/test.rs: `.add_block(id(1), gen_block(id(3)))`
$DIR/execution/executor/src/speculation_cache/test.rs: `.add_block(id(3), gen_block(id(4)))`
$DIR/execution/executor/src/speculation_cache/test.rs: `.add_block(id(3), gen_block(id(5)))`
$DIR/execution/executor/src/speculation_cache/test.rs: `.add_block(*PRE_GENESIS_BLOCK_ID, gen_block(id(6)))`
$DIR/execution/executor/src/speculation_cache/test.rs: `.add_block(id(6), gen_block(id(7)))`
$DIR/execution/executor/src/speculation_cache/test.rs: `.add_block(id(7), gen_block(id(8)))`
$DIR/execution/executor/src/speculation_cache/test.rs: `.add_block(id(6), gen_block(id(9)))`
$DIR/execution/executor/src/speculation_cache/test.rs: `.add_block(id(9), gen_block(id(10)))`
$DIR/execution/executor/src/speculation_cache/test.rs: `.add_block(id(9), gen_block(id(11)))`
$DIR/execution/executor/src/speculation_cache/test.rs: `.block_map.lock()`
$DIR/execution/executor/src/speculation_cache/test.rs: `.len()`
$DIR/execution/executor/src/speculation_cache/test.rs: `.prune(&gen_ledger_info(id(9), false))`
$DIR/execution/executor/src/speculation_cache/test.rs: `.block_map.lock()`
$DIR/execution/executor/src/speculation_cache/test.rs: `.len()`
$DIR/execution/executor/src/speculation_cache/test.rs: `.prune(&gen_ledger_info(id(1), true))`
$DIR/execution/executor/src/speculation_cache/test.rs: `.block_map.lock()`
$DIR/execution/executor/src/speculation_cache/test.rs: `.len()`
$DIR/execution/executor/src/speculation_cache/test.rs: `.add_block(id(1), gen_block(id(7)))`
$DIR/execution/executor/src/speculation_cache/test.rs: `.add_block(id(1), gen_block(id(7)))`
$DIR/execution/executor/tests/db_bootstrapper_test.rs: `maybe_bootstrap::<DiemVM>(&db_rw, &genesis_txn, waypoint).unwrap();`
$DIR/execution/executor/tests/db_bootstrapper_test.rs: `executor
        .commit_blocks(vec![block_id], ledger_info_with_sigs)
        .unwrap();`
$DIR/execution/executor/tests/db_bootstrapper_test.rs: `receiver.add_chunk(chunk, proof).unwrap();`
$DIR/execution/executor/tests/db_bootstrapper_test.rs: `receiver.finish().unwrap();`
$DIR/execution/executor/tests/db_bootstrapper_test.rs: `.reader
        .get_startup_info()`
$DIR/execution/executor/tests/db_bootstrapper_test.rs: `.reader
        .get_accumulator_summary(waypoint.version())`
$DIR/execution/executor/tests/db_bootstrapper_test.rs: `.version()`
$DIR/execution/executor/tests/db_bootstrapper_test.rs: `.reader
        .get_state_proof(trusted_state.version())`
$DIR/execution/executor/tests/db_bootstrapper_test.rs: `.version()`
$DIR/execution/executor/tests/db_bootstrapper_test.rs: `.verify_and_ratchet(&state_proof, Some(&initial_accumulator))`
$DIR/execution/executor/tests/db_bootstrapper_test.rs: `.reader.get_latest_ledger_info()`
$DIR/execution/executor/tests/db_bootstrapper_test.rs: `.ledger_info()`
$DIR/execution/executor/tests/db_bootstrapper_test.rs: `.version()`
$DIR/execution/executor/tests/db_bootstrapper_test.rs: `.ledger_info()`
$DIR/execution/executor/tests/db_bootstrapper_test.rs: `.next_block_epoch()`
$DIR/execution/executor/tests/db_bootstrapper_test.rs: `.len()`
$DIR/execution/executor/tests/db_bootstrapper_test.rs: `.execute_block((block_id, txns), executor.committed_block_id())`
$DIR/execution/executor/tests/db_bootstrapper_test.rs: `.committed_block_id()`
$DIR/execution/executor/tests/db_bootstrapper_test.rs: `.commit_blocks(vec![block_id], ledger_info_with_sigs)`
$DIR/execution/executor/tests/db_bootstrapper_test.rs: `.public_key()`
$DIR/execution/executor/tests/db_bootstrapper_test.rs: `.derived_address()`
$DIR/execution/executor/tests/db_bootstrapper_test.rs: `.public_key()`
$DIR/execution/executor/tests/db_bootstrapper_test.rs: `.derived_address()`
$DIR/execution/executor/tests/db_bootstrapper_test.rs: `.public_key()`
$DIR/execution/executor/tests/db_bootstrapper_test.rs: `.public_key()`
$DIR/execution/executor/tests/db_bootstrapper_test.rs: `.public_key()`
$DIR/execution/executor/tests/db_bootstrapper_test.rs: `.prefix()`
$DIR/execution/executor/tests/db_bootstrapper_test.rs: `.public_key()`
$DIR/execution/executor/tests/db_bootstrapper_test.rs: `.reader
        .get_latest_account_state(config_address())`
$DIR/execution/executor/tests/db_bootstrapper_test.rs: `.get_configuration_resource()`
$DIR/execution/executor/tests/db_bootstrapper_test.rs: `.get_backup_handler()`
$DIR/execution/executor/tests/db_bootstrapper_test.rs: `.get_account_iter(4)`
$DIR/execution/executor/tests/db_bootstrapper_test.rs: `.collect::<Result<Vec<_>>>()`
$DIR/execution/executor/tests/db_bootstrapper_test.rs: `.get_account_state_range_proof(accounts.last().unwrap().0, 1)`
$DIR/execution/executor/tests/db_bootstrapper_test.rs: `.last()`
$DIR/execution/executor/tests/db_bootstrapper_test.rs: `.get_latest_state_root()`
$DIR/execution/executor/tests/db_bootstrapper_test.rs: `.get_restore_handler()`
$DIR/execution/executor/tests/db_bootstrapper_test.rs: `.get_state_restore_receiver(version, root_hash)`
$DIR/execution/executor/tests/db_bootstrapper_test.rs: `.into_iter()`
$DIR/execution/executor/tests/db_bootstrapper_test.rs: `.add_chunk(chunk, proof)`
$DIR/execution/executor/tests/db_bootstrapper_test.rs: `.finish()`
$DIR/execution/executor/tests/db_bootstrapper_test.rs: `.freeze()`
$DIR/execution/executor/tests/db_bootstrapper_test.rs: `.reader
        .get_accumulator_summary(trusted_state.version())`
$DIR/execution/executor/tests/db_bootstrapper_test.rs: `.version()`
$DIR/execution/executor/tests/db_bootstrapper_test.rs: `.reader
        .get_state_proof(trusted_state.version())`
$DIR/execution/executor/tests/db_bootstrapper_test.rs: `.version()`
$DIR/execution/executor/tests/db_bootstrapper_test.rs: `.verify_and_ratchet(&state_proof, Some(&initial_accumulator))`
$DIR/execution/executor/tests/db_bootstrapper_test.rs: `.reader
        .get_accumulator_summary(trusted_state.version())`
$DIR/execution/executor/tests/db_bootstrapper_test.rs: `.version()`
$DIR/execution/executor/tests/db_bootstrapper_test.rs: `.reader.get_state_proof(trusted_state.version())`
$DIR/execution/executor/tests/db_bootstrapper_test.rs: `.version()`
$DIR/execution/executor/tests/db_bootstrapper_test.rs: `.verify_and_ratchet(&state_proof, Some(&initial_accumulator))`
$DIR/execution/executor/tests/db_bootstrapper_test.rs: `.freeze()`
$DIR/execution/executor/tests/db_bootstrapper_test.rs: `.reader
        .get_accumulator_summary(trusted_state.version())`
$DIR/execution/executor/tests/db_bootstrapper_test.rs: `.version()`
$DIR/execution/executor/tests/db_bootstrapper_test.rs: `.reader.get_state_proof(trusted_state.version())`
$DIR/execution/executor/tests/db_bootstrapper_test.rs: `.version()`
$DIR/execution/executor/tests/db_bootstrapper_test.rs: `.verify_and_ratchet(&state_proof, Some(&initial_accumulator))`
$DIR/execution/executor/tests/db_bootstrapper_test.rs: `.new_state()`
$DIR/execution/executor/tests/storage_integration_test.rs: `path.create_as_dir().unwrap();`
$DIR/execution/executor/tests/storage_integration_test.rs: `trusted_state
        .verify_and_ratchet(&state_proof, Some(&initial_accumulator))
        .unwrap();`
$DIR/execution/executor/tests/storage_integration_test.rs: `path.create_as_dir().unwrap();`
$DIR/execution/executor/tests/storage_integration_test.rs: `executor
        .commit_blocks(vec![block_id], ledger_info_with_sigs)
        .unwrap();`
$DIR/execution/executor/tests/storage_integration_test.rs: `verify_committed_txn_status(t3.as_ref(), &txn_block[2]).unwrap();`
$DIR/execution/executor/tests/storage_integration_test.rs: `path.create_as_dir().unwrap();`
$DIR/execution/executor/tests/storage_integration_test.rs: `executor
        .commit_blocks(vec![block1_id], ledger_info_with_sigs)
        .unwrap();`
$DIR/execution/executor/tests/storage_integration_test.rs: `verify_committed_txn_status(txn1.as_ref(), &block1[0]).unwrap();`
$DIR/execution/executor/tests/storage_integration_test.rs: `executor
        .commit_blocks(vec![block2_id], ledger_info_with_sigs)
        .unwrap();`
$DIR/execution/executor/tests/storage_integration_test.rs: `verify_committed_txn_status(txn2.as_ref(), &block2[0]).unwrap();`
$DIR/execution/executor/tests/storage_integration_test.rs: `.create_as_dir()`
$DIR/execution/executor/tests/storage_integration_test.rs: `.path()`
$DIR/execution/executor/tests/storage_integration_test.rs: `.reader
        .get_accumulator_summary(trusted_state.version())`
$DIR/execution/executor/tests/storage_integration_test.rs: `.version()`
$DIR/execution/executor/tests/storage_integration_test.rs: `.reader.get_state_proof(trusted_state.version())`
$DIR/execution/executor/tests/storage_integration_test.rs: `.version()`
$DIR/execution/executor/tests/storage_integration_test.rs: `.verify_and_ratchet(&state_proof, Some(&initial_accumulator))`
$DIR/execution/executor/tests/storage_integration_test.rs: `.latest_ledger_info()`
$DIR/execution/executor/tests/storage_integration_test.rs: `.reader
        .get_account_state_with_proof(diem_root_address(), 0, 0)`
$DIR/execution/executor/tests/storage_integration_test.rs: `.verify(li, 0, diem_root_address())`
$DIR/execution/executor/tests/storage_integration_test.rs: `.create_as_dir()`
$DIR/execution/executor/tests/storage_integration_test.rs: `.path()`
$DIR/execution/executor/tests/storage_integration_test.rs: `.committed_block_id()`
$DIR/execution/executor/tests/storage_integration_test.rs: `.author()`
$DIR/execution/executor/tests/storage_integration_test.rs: `.reader.get_state_proof(0)`
$DIR/execution/executor/tests/storage_integration_test.rs: `.latest_ledger_info()`
$DIR/execution/executor/tests/storage_integration_test.rs: `.version()`
$DIR/execution/executor/tests/storage_integration_test.rs: `.reader
        .get_account_state_with_proof(validator_account, current_version, current_version)`
$DIR/execution/executor/tests/storage_integration_test.rs: `.reader
        .get_account_state_with_proof(diem_root_address(), current_version, current_version)`
$DIR/execution/executor/tests/storage_integration_test.rs: `.public_key()`
$DIR/execution/executor/tests/storage_integration_test.rs: `.public_key()`
$DIR/execution/executor/tests/storage_integration_test.rs: `.public_key()`
$DIR/execution/executor/tests/storage_integration_test.rs: `.to_bytes()`
$DIR/execution/executor/tests/storage_integration_test.rs: `.execute_block((block_id, txn_block.clone()), parent_block_id)`
$DIR/execution/executor/tests/storage_integration_test.rs: `.commit_blocks(vec![block_id], ledger_info_with_sigs)`
$DIR/execution/executor/tests/storage_integration_test.rs: `.reader.get_state_proof(0)`
$DIR/execution/executor/tests/storage_integration_test.rs: `.latest_ledger_info()`
$DIR/execution/executor/tests/storage_integration_test.rs: `.version()`
$DIR/execution/executor/tests/storage_integration_test.rs: `.reader
        .get_account_transaction(operator_account, 0, true, current_version)`
$DIR/execution/executor/tests/storage_integration_test.rs: `.reader
        .get_account_state_with_proof(validator_account, current_version, current_version)`
$DIR/execution/executor/tests/storage_integration_test.rs: `.reader
        .get_account_state_with_proof(validator_account, current_version, current_version)`
$DIR/execution/executor/tests/storage_integration_test.rs: `.reader
        .get_account_state_with_proof(diem_root_address(), current_version, current_version)`
$DIR/execution/executor/tests/storage_integration_test.rs: `.reader
        .get_account_state_with_proof(diem_root_address(), current_version, current_version)`
$DIR/execution/executor/tests/storage_integration_test.rs: `.create_as_dir()`
$DIR/execution/executor/tests/storage_integration_test.rs: `.path()`
$DIR/execution/executor/tests/storage_integration_test.rs: `.committed_block_id()`
$DIR/execution/executor/tests/storage_integration_test.rs: `.author()`
$DIR/execution/executor/tests/storage_integration_test.rs: `.private_key()`
$DIR/execution/executor/tests/storage_integration_test.rs: `.public_key()`
$DIR/execution/executor/tests/storage_integration_test.rs: `.public_key()`
$DIR/execution/executor/tests/storage_integration_test.rs: `.collect()`
$DIR/execution/executor/tests/storage_integration_test.rs: `.into_script_blob("file_name", code)`
$DIR/execution/executor/tests/storage_integration_test.rs: `.public_key()`
$DIR/execution/executor/tests/storage_integration_test.rs: `.execute_block((block1_id, block1.clone()), parent_block_id)`
$DIR/execution/executor/tests/storage_integration_test.rs: `.commit_blocks(vec![block1_id], ledger_info_with_sigs)`
$DIR/execution/executor/tests/storage_integration_test.rs: `.reader
        .get_accumulator_summary(trusted_state.version())`
$DIR/execution/executor/tests/storage_integration_test.rs: `.version()`
$DIR/execution/executor/tests/storage_integration_test.rs: `.reader.get_state_proof(trusted_state.version())`
$DIR/execution/executor/tests/storage_integration_test.rs: `.version()`
$DIR/execution/executor/tests/storage_integration_test.rs: `.verify_and_ratchet(&state_proof, Some(&initial_accumulator))`
$DIR/execution/executor/tests/storage_integration_test.rs: `.new_state()`
$DIR/execution/executor/tests/storage_integration_test.rs: `.version()`
$DIR/execution/executor/tests/storage_integration_test.rs: `.reader
        .get_account_transaction(treasury_compliance_account, 0, false, current_version)`
$DIR/execution/executor/tests/storage_integration_test.rs: `.execute_block((block2_id, block2.clone()), executor.committed_block_id())`
$DIR/execution/executor/tests/storage_integration_test.rs: `.committed_block_id()`
$DIR/execution/executor/tests/storage_integration_test.rs: `.commit_blocks(vec![block2_id], ledger_info_with_sigs)`
$DIR/execution/executor/tests/storage_integration_test.rs: `.reader.get_state_proof(current_version)`
$DIR/execution/executor/tests/storage_integration_test.rs: `.verify_and_ratchet(&state_proof, None)`
$DIR/execution/executor/tests/storage_integration_test.rs: `.latest_ledger_info()`
$DIR/execution/executor/tests/storage_integration_test.rs: `.version()`
$DIR/execution/executor/tests/storage_integration_test.rs: `.reader
        .get_account_transaction(validator_account, 0, false, current_version)`
$DIR/execution/executor/tests/storage_integration_test.rs: `.reader
        .get_account_transaction(validator_account, 1, false, current_version)`
$DIR/json-rpc/src/fuzzing.rs: `rt.spawn(async move {
        if let Some((_, cb)) = mp_events.next().await {
            cb.send(Ok((
                diem_types::mempool_status::MempoolStatus::new(
                    diem_types::mempool_status::MempoolStatusCode::Accepted,
                ),
                None,
            )))
            .unwrap();
        }
    });`
$DIR/json-rpc/src/fuzzing.rs: `cb.send(Ok((
                diem_types::mempool_status::MempoolStatus::new(
                    diem_types::mempool_status::MempoolStatusCode::Accepted,
                ),
                None,
            )))
            .unwrap();`
$DIR/json-rpc/src/fuzzing.rs: `.generate(proptest::arbitrary::any::<
        diem_types::transaction::SignedTransaction,
    >())`
$DIR/json-rpc/src/fuzzing.rs: `.generate(proptest::prelude::any::<AccountStateWithProof>())`
$DIR/json-rpc/src/fuzzing.rs: `.enable_all()`
$DIR/json-rpc/src/fuzzing.rs: `.build()`
$DIR/json-rpc/src/fuzzing.rs: `.spawn(async move {
        if let Some((_, cb)) = mp_events.next().await {
            cb.send(Ok((
                diem_types::mempool_status::MempoolStatus::new(
                    diem_types::mempool_status::MempoolStatusCode::Accepted,
                ),
                None,
            )))
            .unwrap();
        }
    })`
$DIR/json-rpc/src/fuzzing.rs: `.next()`
$DIR/json-rpc/src/fuzzing.rs: `.send(Ok((
                diem_types::mempool_status::MempoolStatus::new(
                    diem_types::mempool_status::MempoolStatusCode::Accepted,
                ),
                None,
            )))`
$DIR/json-rpc/src/fuzzing.rs: `.block_on(async {
        let reply = runtime::rpc_endpoint(json_request, service, None)
            .await
            .unwrap();

        let resp = reply.into_response();
        let (_, body) = resp.into_parts();
        hyper::body::to_bytes(body).await.unwrap()
    })`
$DIR/json-rpc/src/fuzzing.rs: `.into_response()`
$DIR/json-rpc/src/fuzzing.rs: `.into_parts()`
$DIR/json-rpc/src/fuzzing.rs: `.get("jsonrpc")`
$DIR/json-rpc/src/fuzzing.rs: `.get("id")`
$DIR/json-rpc/src/fuzzing.rs: `.unwrap_or_else(|| panic!("failed to get ID from response: {}", response))`
$DIR/json-rpc/src/fuzzing.rs: `.unwrap_or_else(|_| panic!("Failed to deserialize ID from: {}", response))`
$DIR/json-rpc/src/stream_rpc/connection/client_connection.rs: `counters::INVALID_REQUESTS
            .with_label_values(&[
                self.connection_context.transport.as_str(),
                method.map_or(UNKNOWN, |m| m.as_str()),
                error.code_as_str(),
                self.connection_context.sdk_info.language.as_str(),
                &self.connection_context.sdk_info.version.to_string(),
            ])
            .inc();`
$DIR/json-rpc/src/stream_rpc/connection/client_connection.rs: `self.send_error(Some(request.method_request.method()), Some(request.id), err)
                        .await
                        .ok();`
$DIR/json-rpc/src/stream_rpc/connection/client_connection.rs: `self.send_error(method, id, err).await.ok();`
$DIR/json-rpc/src/stream_rpc/connection/client_connection.rs: `self.unsubscribe(&request.id);`
$DIR/json-rpc/src/stream_rpc/connection/client_connection.rs: `tasks.insert(request.id.clone(), Task(task));`
$DIR/json-rpc/src/stream_rpc/connection/client_connection.rs: `metric_subscription_rpc_received(
                    self,
                    request.method_name(),
                    counters::RpcResult::Success,
                );`
$DIR/json-rpc/src/stream_rpc/connection/client_connection.rs: `metric_subscription_rpc_received(
                    self,
                    request.method_name(),
                    counters::RpcResult::Error,
                );`
$DIR/json-rpc/src/stream_rpc/connection/client_connection.rs: `counters::SUBSCRIPTION_RPC_RECEIVED
        .with_label_values(&[
            client.connection_context.transport.as_str(),
            method,
            result.as_str(),
            client.connection_context.sdk_info.language.as_str(),
            &client.connection_context.sdk_info.version.to_string(),
        ])
        .inc();`
$DIR/json-rpc/src/stream_rpc/connection/client_connection.rs: `.sender.is_closed()`
$DIR/json-rpc/src/stream_rpc/connection/client_connection.rs: `.sender.send(Ok(message))`
$DIR/json-rpc/src/stream_rpc/connection/client_connection.rs: `.with_label_values(&[
                self.connection_context.transport.as_str(),
                method.map_or(UNKNOWN, |m| m.as_str()),
                error.code_as_str(),
                self.connection_context.sdk_info.language.as_str(),
                &self.connection_context.sdk_info.version.to_string(),
            ])`
$DIR/json-rpc/src/stream_rpc/connection/client_connection.rs: `.map_or(UNKNOWN, |m| m.as_str())`
$DIR/json-rpc/src/stream_rpc/connection/client_connection.rs: `.code_as_str()`
$DIR/json-rpc/src/stream_rpc/connection/client_connection.rs: `.inc()`
$DIR/json-rpc/src/stream_rpc/connection/client_connection.rs: `.method_request.method()`
$DIR/json-rpc/src/stream_rpc/connection/client_connection.rs: `.ok()`
$DIR/json-rpc/src/stream_rpc/connection/client_connection.rs: `.map_or(UNKNOWN, |m| m.as_str())`
$DIR/json-rpc/src/stream_rpc/connection/client_connection.rs: `.ok()`
$DIR/json-rpc/src/stream_rpc/connection/client_connection.rs: `.unsubscribe(&request.id)`
$DIR/json-rpc/src/stream_rpc/connection/client_connection.rs: `.tasks.lock()`
$DIR/json-rpc/src/stream_rpc/connection/client_connection.rs: `.contains_key(&request.id)`
$DIR/json-rpc/src/stream_rpc/connection/client_connection.rs: `.call_method(
            db.clone(),
            self.clone(),
            request.id.clone(),
        )`
$DIR/json-rpc/src/stream_rpc/connection/client_connection.rs: `.insert(request.id.clone(), Task(task))`
$DIR/json-rpc/src/stream_rpc/connection/client_connection.rs: `.method_name()`
$DIR/json-rpc/src/stream_rpc/connection/client_connection.rs: `.method_name()`
$DIR/json-rpc/src/stream_rpc/connection/client_connection.rs: `.with_label_values(&[
            client.connection_context.transport.as_str(),
            method,
            result.as_str(),
            client.connection_context.sdk_info.language.as_str(),
            &client.connection_context.sdk_info.version.to_string(),
        ])`
$DIR/json-rpc/src/stream_rpc/connection/client_connection.rs: `.inc()`
$DIR/json-rpc/src/stream_rpc/connection/client_connection.rs: `.recv()`
$DIR/json-rpc/src/stream_rpc/connection/client_connection.rs: `.recv()`
$DIR/json-rpc/src/stream_rpc/connection/client_connection.rs: `.recv()`
$DIR/json-rpc/src/stream_rpc/connection/client_connection.rs: `.get("result")`
$DIR/json-rpc/src/stream_rpc/connection/client_connection.rs: `.get("version")`
$DIR/json-rpc/src/stream_rpc/connection/client_connection.rs: `.recv()`
$DIR/json-rpc/src/stream_rpc/connection/client_connection.rs: `.recv()`
$DIR/json-rpc/src/stream_rpc/connection/client_connection.rs: `.get("result")`
$DIR/json-rpc/src/stream_rpc/connection/client_connection.rs: `.get("unsubscribe")`
$DIR/json-rpc/src/stream_rpc/connection/client_connection.rs: `.recv()`
$DIR/json-rpc/src/stream_rpc/subscription_types.rs: `self.backoff = create_backoff(config.poll_interval_ms, config.max_poll_interval_ms);`
$DIR/json-rpc/src/stream_rpc/subscription_types.rs: `tokio::time::sleep(sleepy_time).await;`
$DIR/json-rpc/src/stream_rpc/subscription_types.rs: `results.push(elapsed - last);`
$DIR/json-rpc/src/stream_rpc/subscription_types.rs: `last = elapsed;`
$DIR/json-rpc/src/stream_rpc/subscription_types.rs: `.max_delay(tokio::time::Duration::from_millis(max_poll_interval_ms))`
$DIR/json-rpc/src/stream_rpc/subscription_types.rs: `.items_to_send.get(self.item_index)`
$DIR/json-rpc/src/stream_rpc/subscription_types.rs: `.run(subscription_helper, params)`
$DIR/json-rpc/src/stream_rpc/subscription_types.rs: `.recv()`
$DIR/json-rpc/src/stream_rpc/subscription_types.rs: `.recv()`
$DIR/json-rpc/src/stream_rpc/subscription_types.rs: `.recv()`
$DIR/json-rpc/src/stream_rpc/subscription_types.rs: `.recv()`
$DIR/json-rpc/src/stream_rpc/subscription_types.rs: `.elapsed()`
$DIR/json-rpc/src/stream_rpc/subscription_types.rs: `.as_millis()`
$DIR/json-rpc/src/stream_rpc/subscription_types.rs: `.recv()`
$DIR/json-rpc/src/stream_rpc/subscription_types.rs: `.run(subscription_helper, params)`
$DIR/json-rpc/src/stream_rpc/subscription_types.rs: `.recv()`
$DIR/json-rpc/src/stream_rpc/subscription_types.rs: `.elapsed()`
$DIR/json-rpc/src/stream_rpc/subscription_types.rs: `.as_millis()`
$DIR/json-rpc/src/stream_rpc/subscription_types.rs: `.push(elapsed - last)`
$DIR/json-rpc/src/stream_rpc/subscription_types.rs: `.get(i)`
$DIR/json-rpc/src/stream_rpc/subscription_types.rs: `.get(i + 1)`
$DIR/json-rpc/src/stream_rpc/tests/websockets.rs: `ws_client.send_text(request).await;`
$DIR/json-rpc/src/stream_rpc/tests/websockets.rs: `ws_client.send_text(request).await;`
$DIR/json-rpc/src/stream_rpc/tests/websockets.rs: `ws_client.send_text(request).await;`
$DIR/json-rpc/src/stream_rpc/tests/websockets.rs: `ws_client.send_text(request.to_string()).await;`
$DIR/json-rpc/src/stream_rpc/tests/websockets.rs: `close_ws(ws_client, name).await;`
$DIR/json-rpc/src/stream_rpc/tests/websockets.rs: `ws_client.send_text(request).await;`
$DIR/json-rpc/src/stream_rpc/tests/websockets.rs: `close_ws(ws_client1, "").await;`
$DIR/json-rpc/src/stream_rpc/tests/websockets.rs: `close_ws(ws_client2, "").await;`
$DIR/json-rpc/src/stream_rpc/tests/websockets.rs: `runtime
            .handle()
            .block_on(timeout(
                500,
                tx.send(Message::text(request.to_string())),
                "send request",
            ))
            .unwrap_or_else(|e| panic!("{}: Could not send websocket request. {:?}", &name, e));`
$DIR/json-rpc/src/stream_rpc/tests/websockets.rs: `.send_text(request)`
$DIR/json-rpc/src/stream_rpc/tests/websockets.rs: `.send_text(request)`
$DIR/json-rpc/src/stream_rpc/tests/websockets.rs: `.send_text(request)`
$DIR/json-rpc/src/stream_rpc/tests/websockets.rs: `.events.get(0)`
$DIR/json-rpc/src/stream_rpc/tests/websockets.rs: `.key()`
$DIR/json-rpc/src/stream_rpc/tests/websockets.rs: `.filter(|(_, ev)| ev.key().to_string() == first_event_key)`
$DIR/json-rpc/src/stream_rpc/tests/websockets.rs: `.key()`
$DIR/json-rpc/src/stream_rpc/tests/websockets.rs: `.count()`
$DIR/json-rpc/src/stream_rpc/tests/websockets.rs: `.send_text(request.to_string())`
$DIR/json-rpc/src/stream_rpc/tests/websockets.rs: `.to_str()`
$DIR/json-rpc/src/stream_rpc/tests/websockets.rs: `.send_text(request)`
$DIR/json-rpc/src/stream_rpc/tests/websockets.rs: `.enter()`
$DIR/json-rpc/src/stream_rpc/tests/websockets.rs: `.method(http::method::Method::GET)`
$DIR/json-rpc/src/stream_rpc/tests/websockets.rs: `.uri(http::uri::Uri::try_from(&wss_url).unwrap())`
$DIR/json-rpc/src/stream_rpc/tests/websockets.rs: `.header("user-agent", "diem-client-sdk-python / 0.1.22")`
$DIR/json-rpc/src/stream_rpc/tests/websockets.rs: `.header("Content-Length", "1500")`
$DIR/json-rpc/src/stream_rpc/tests/websockets.rs: `.body(())`
$DIR/json-rpc/src/stream_rpc/tests/websockets.rs: `.handle()`
$DIR/json-rpc/src/stream_rpc/tests/websockets.rs: `.block_on(timeout(
            500,
            async move {
                let (ws_stream, _) = connect_async(http_request)
                    .await
                    .expect("Could not create websocket connection");
                ws_stream
            },
            "create ws connection",
        ))`
$DIR/json-rpc/src/stream_rpc/tests/websockets.rs: `.split()`
$DIR/json-rpc/src/stream_rpc/tests/websockets.rs: `.handle()`
$DIR/json-rpc/src/stream_rpc/tests/websockets.rs: `.block_on(timeout(
                500,
                tx.send(Message::text(request.to_string())),
                "send request",
            ))`
$DIR/json-rpc/src/stream_rpc/tests/websockets.rs: `.send(Message::text(request.to_string()))`
$DIR/json-rpc/src/stream_rpc/tests/websockets.rs: `.unwrap_or_else(|e| panic!("{}: Could not send websocket request. {:?}", &name, e))`
$DIR/json-rpc/src/stream_rpc/tests/websockets.rs: `.handle()`
$DIR/json-rpc/src/stream_rpc/tests/websockets.rs: `.block_on(timeout(500, rx.next(), "get next message"))`
$DIR/json-rpc/src/stream_rpc/tests/websockets.rs: `.next()`
$DIR/json-rpc/src/stream_rpc/tests/websockets.rs: `.unwrap_or_else(|| panic!("{}: Expected 'Some' response", &name))`
$DIR/json-rpc/src/stream_rpc/tests/websockets.rs: `.unwrap_or_else(|_| panic!("{}: Expected no error response", &name))`
$DIR/json-rpc/src/stream_rpc/transport/util.rs: `headers_with_forwarded.insert(warp::http::header::FORWARDED, forwarded_header);`
$DIR/json-rpc/src/stream_rpc/transport/util.rs: `headers_with_invalid_forwarded.insert(
        warp::http::header::FORWARDED,
        warp::http::header::HeaderValue::from_str("хулиган").unwrap(),
    );`
$DIR/json-rpc/src/stream_rpc/transport/util.rs: `.insert(warp::http::header::FORWARDED, forwarded_header)`
$DIR/json-rpc/src/stream_rpc/transport/util.rs: `.insert(
        warp::http::header::FORWARDED,
        warp::http::header::HeaderValue::from_str("хулиган").unwrap(),
    )`
$DIR/json-rpc/src/tests/unit_tests.rs: `runtime.spawn(async move {
        let validator = MockVMValidator;
        while let Some((txn, cb)) = mp_events.next().await {
            let vm_status = validator.validate_transaction(txn).unwrap().status();
            let result = if vm_status.is_some() {
                (MempoolStatus::new(MempoolStatusCode::VmError), vm_status)
            } else {
                (MempoolStatus::new(MempoolStatusCode::Accepted), None)
            };
            cb.send(Ok(result)).unwrap();
        }
    });`
$DIR/json-rpc/src/tests/unit_tests.rs: `cb.send(Ok(result)).unwrap();`
$DIR/json-rpc/src/tests/unit_tests.rs: `txn_submission(sender).unwrap();`
$DIR/json-rpc/src/tests/unit_tests.rs: `states.push(AccountState::try_from(blob).unwrap());`
$DIR/json-rpc/src/tests/unit_tests.rs: `batch.push(MethodRequest::get_account(*account));`
$DIR/json-rpc/src/tests/unit_tests.rs: `batch.push(MethodRequest::get_metadata_by_version(i));`
$DIR/json-rpc/src/tests/unit_tests.rs: `.request(reqwest::Method::OPTIONS, &url)`
$DIR/json-rpc/src/tests/unit_tests.rs: `.header("origin", origin)`
$DIR/json-rpc/src/tests/unit_tests.rs: `.header("access-control-headers", "content-type")`
$DIR/json-rpc/src/tests/unit_tests.rs: `.header("access-control-request-method", "POST")`
$DIR/json-rpc/src/tests/unit_tests.rs: `.send()`
$DIR/json-rpc/src/tests/unit_tests.rs: `.headers()`
$DIR/json-rpc/src/tests/unit_tests.rs: `.get("access-control-allow-origin")`
$DIR/json-rpc/src/tests/unit_tests.rs: `.get(&fake_path)`
$DIR/json-rpc/src/tests/unit_tests.rs: `.send()`
$DIR/json-rpc/src/tests/unit_tests.rs: `.get(&url)`
$DIR/json-rpc/src/tests/unit_tests.rs: `.send()`
$DIR/json-rpc/src/tests/unit_tests.rs: `.post(&url)`
$DIR/json-rpc/src/tests/unit_tests.rs: `.send()`
$DIR/json-rpc/src/tests/unit_tests.rs: `.post(&url_v1)`
$DIR/json-rpc/src/tests/unit_tests.rs: `.send()`
$DIR/json-rpc/src/tests/unit_tests.rs: `.post(&url)`
$DIR/json-rpc/src/tests/unit_tests.rs: `.body("non json")`
$DIR/json-rpc/src/tests/unit_tests.rs: `.send()`
$DIR/json-rpc/src/tests/unit_tests.rs: `.post(&url)`
$DIR/json-rpc/src/tests/unit_tests.rs: `.json(&json!({ "id": gen_string(DEFAULT_CONTENT_LENGTH_LIMIT) }))`
$DIR/json-rpc/src/tests/unit_tests.rs: `.send()`
$DIR/json-rpc/src/tests/unit_tests.rs: `.get_block_timestamp(version)`
$DIR/json-rpc/src/tests/unit_tests.rs: `.post(&url)`
$DIR/json-rpc/src/tests/unit_tests.rs: `.json(&request)`
$DIR/json-rpc/src/tests/unit_tests.rs: `.send()`
$DIR/json-rpc/src/tests/unit_tests.rs: `.headers()`
$DIR/json-rpc/src/tests/unit_tests.rs: `.json()`
$DIR/json-rpc/src/tests/unit_tests.rs: `.post(&url)`
$DIR/json-rpc/src/tests/unit_tests.rs: `.json(&request)`
$DIR/json-rpc/src/tests/unit_tests.rs: `.send()`
$DIR/json-rpc/src/tests/unit_tests.rs: `.json()`
$DIR/json-rpc/src/tests/unit_tests.rs: `.user_agent("diem-client-sdk-python / 2.11.15")`
$DIR/json-rpc/src/tests/unit_tests.rs: `.build()`
$DIR/json-rpc/src/tests/unit_tests.rs: `.post(&url)`
$DIR/json-rpc/src/tests/unit_tests.rs: `.json(&request)`
$DIR/json-rpc/src/tests/unit_tests.rs: `.send()`
$DIR/json-rpc/src/tests/unit_tests.rs: `.parse()`
$DIR/json-rpc/src/tests/unit_tests.rs: `.spawn(async move {
        let validator = MockVMValidator;
        while let Some((txn, cb)) = mp_events.next().await {
            let vm_status = validator.validate_transaction(txn).unwrap().status();
            let result = if vm_status.is_some() {
                (MempoolStatus::new(MempoolStatusCode::VmError), vm_status)
            } else {
                (MempoolStatus::new(MempoolStatusCode::Accepted), None)
            };
            cb.send(Ok(result)).unwrap();
        }
    })`
$DIR/json-rpc/src/tests/unit_tests.rs: `.next()`
$DIR/json-rpc/src/tests/unit_tests.rs: `.validate_transaction(txn)`
$DIR/json-rpc/src/tests/unit_tests.rs: `.status()`
$DIR/json-rpc/src/tests/unit_tests.rs: `.is_some()`
$DIR/json-rpc/src/tests/unit_tests.rs: `.send(Ok(result))`
$DIR/json-rpc/src/tests/unit_tests.rs: `.public_key()`
$DIR/json-rpc/src/tests/unit_tests.rs: `.json_rpc_error()`
$DIR/json-rpc/src/tests/unit_tests.rs: `.as_status_code()`
$DIR/json-rpc/src/tests/unit_tests.rs: `.next()`
$DIR/json-rpc/src/tests/unit_tests.rs: `.get_account(*first_account)`
$DIR/json-rpc/src/tests/unit_tests.rs: `.into_inner()`
$DIR/json-rpc/src/tests/unit_tests.rs: `.map(|bal| bal.amount)`
$DIR/json-rpc/src/tests/unit_tests.rs: `.collect()`
$DIR/json-rpc/src/tests/unit_tests.rs: `.get_balance_resources()`
$DIR/json-rpc/src/tests/unit_tests.rs: `.map(|(_, bal_resource)| bal_resource.coin())`
$DIR/json-rpc/src/tests/unit_tests.rs: `.coin()`
$DIR/json-rpc/src/tests/unit_tests.rs: `.collect()`
$DIR/json-rpc/src/tests/unit_tests.rs: `.push(AccountState::try_from(blob).unwrap())`
$DIR/json-rpc/src/tests/unit_tests.rs: `.push(MethodRequest::get_account(*account))`
$DIR/json-rpc/src/tests/unit_tests.rs: `.batch(batch)`
$DIR/json-rpc/src/tests/unit_tests.rs: `.into_iter()`
$DIR/json-rpc/src/tests/unit_tests.rs: `.enumerate()`
$DIR/json-rpc/src/tests/unit_tests.rs: `.into_inner()`
$DIR/json-rpc/src/tests/unit_tests.rs: `.unwrap_get_account()`
$DIR/json-rpc/src/tests/unit_tests.rs: `.map(|bal| bal.amount)`
$DIR/json-rpc/src/tests/unit_tests.rs: `.collect()`
$DIR/json-rpc/src/tests/unit_tests.rs: `.get_balance_resources()`
$DIR/json-rpc/src/tests/unit_tests.rs: `.map(|(_, bal_resource)| bal_resource.coin())`
$DIR/json-rpc/src/tests/unit_tests.rs: `.coin()`
$DIR/json-rpc/src/tests/unit_tests.rs: `.collect()`
$DIR/json-rpc/src/tests/unit_tests.rs: `.get_latest_commit_metadata()`
$DIR/json-rpc/src/tests/unit_tests.rs: `.get_metadata()`
$DIR/json-rpc/src/tests/unit_tests.rs: `.into_inner()`
$DIR/json-rpc/src/tests/unit_tests.rs: `.get_metadata_by_version(1)`
$DIR/json-rpc/src/tests/unit_tests.rs: `.into_inner()`
$DIR/json-rpc/src/tests/unit_tests.rs: `.push(MethodRequest::get_metadata_by_version(i))`
$DIR/json-rpc/src/tests/unit_tests.rs: `.batch(batch)`
$DIR/json-rpc/src/tests/unit_tests.rs: `.json_rpc_error()`
$DIR/json-rpc/src/tests/unit_tests.rs: `.get_events(
            EventKey::from_hex("13000000000000000000000000000000000000000a550c18").unwrap(),
            0,
            1001,
        )`
$DIR/json-rpc/src/tests/unit_tests.rs: `.json_rpc_error()`
$DIR/json-rpc/src/tests/unit_tests.rs: `.get_transactions(0, 1001, false)`
$DIR/json-rpc/src/tests/unit_tests.rs: `.json_rpc_error()`
$DIR/json-rpc/src/tests/unit_tests.rs: `.key()`
$DIR/json-rpc/src/tests/unit_tests.rs: `.get_events(
            *event_key,
            first_event.sequence_number(),
            first_event.sequence_number() + 10,
        )`
$DIR/json-rpc/src/tests/unit_tests.rs: `.sequence_number()`
$DIR/json-rpc/src/tests/unit_tests.rs: `.sequence_number()`
$DIR/json-rpc/src/tests/unit_tests.rs: `.into_inner()`
$DIR/json-rpc/src/tests/unit_tests.rs: `.get_latest_version()`
$DIR/json-rpc/src/tests/unit_tests.rs: `.map(u64::from)`
$DIR/json-rpc/src/tests/unit_tests.rs: `.take(page)`
$DIR/json-rpc/src/tests/unit_tests.rs: `.collect::<Vec<_>>()`
$DIR/json-rpc/src/tests/unit_tests.rs: `.into_iter()`
$DIR/json-rpc/src/tests/unit_tests.rs: `.get_transactions(base_version, page as u64, true)`
$DIR/json-rpc/src/tests/unit_tests.rs: `.into_inner()`
$DIR/json-rpc/src/tests/unit_tests.rs: `.enumerate()`
$DIR/json-rpc/src/tests/unit_tests.rs: `.filter(|(v, _)| *v == view.version)`
$DIR/json-rpc/src/tests/unit_tests.rs: `.map(|(_, e)| e)`
$DIR/json-rpc/src/tests/unit_tests.rs: `.collect::<Vec<_>>()`
$DIR/json-rpc/src/tests/unit_tests.rs: `.enumerate()`
$DIR/json-rpc/src/tests/unit_tests.rs: `.get(i)`
$DIR/json-rpc/src/tests/unit_tests.rs: `.payload()`
$DIR/json-rpc/src/tests/unit_tests.rs: `.sequence_number()`
$DIR/json-rpc/src/tests/unit_tests.rs: `.get_account_transaction(*acc, seq, true)`
$DIR/json-rpc/src/tests/unit_tests.rs: `.into_inner()`
$DIR/json-rpc/src/tests/unit_tests.rs: `.find_map(|(t, status)| {
                    if let Ok(x) = t.as_signed_user_txn() {
                        if x.sender() == *acc && x.sequence_number() == seq {
                            assert_eq!(tx_view.hash, t.hash());
                            return Some((x, status));
                        }
                    }
                    None
                })`
$DIR/json-rpc/src/tests/unit_tests.rs: `.as_signed_user_txn()`
$DIR/json-rpc/src/tests/unit_tests.rs: `.sender()`
$DIR/json-rpc/src/tests/unit_tests.rs: `.sequence_number()`
$DIR/json-rpc/src/tests/unit_tests.rs: `.filter(|(ev, _)| *ev == tx_view.version)`
$DIR/json-rpc/src/tests/unit_tests.rs: `.map(|(_, e)| e)`
$DIR/json-rpc/src/tests/unit_tests.rs: `.collect::<Vec<_>>()`
$DIR/json-rpc/src/tests/unit_tests.rs: `.enumerate()`
$DIR/json-rpc/src/tests/unit_tests.rs: `.get(i)`
$DIR/json-rpc/src/tests/unit_tests.rs: `.payload()`
$DIR/json-rpc/src/tests/unit_tests.rs: `.sequence_number()`
$DIR/json-rpc/src/tests/unit_tests.rs: `.get_account_transactions(*acc, 0, max(1, min(1000, total * 2)), true)`
$DIR/json-rpc/src/tests/unit_tests.rs: `.into_inner()`
$DIR/json-rpc/src/tests/unit_tests.rs: `.get_account_state_with_proof(account, None, None)`
$DIR/json-rpc/src/tests/unit_tests.rs: `.into_inner()`
$DIR/json-rpc/src/tests/unit_tests.rs: `.get_account_state_with_proof(account, Some(0), Some(0))`
$DIR/json-rpc/src/tests/unit_tests.rs: `.into_inner()`
$DIR/json-rpc/src/tests/unit_tests.rs: `.proof.transaction_info_to_account_proof()`
$DIR/json-rpc/src/tests/unit_tests.rs: `.proof.transaction_info_with_proof()`
$DIR/json-rpc/src/tests/unit_tests.rs: `.get_state_proof(version)`
$DIR/json-rpc/src/tests/unit_tests.rs: `.into_inner()`
$DIR/json-rpc/src/tests/unit_tests.rs: `.get_network_status()`
$DIR/json-rpc/src/tests/unit_tests.rs: `.into_inner()`
$DIR/json-rpc/src/tests/unit_tests.rs: `.get(&healthy_url)`
$DIR/json-rpc/src/tests/unit_tests.rs: `.send()`
$DIR/json-rpc/src/tests/unit_tests.rs: `.get(&healthy_url)`
$DIR/json-rpc/src/tests/unit_tests.rs: `.send()`
$DIR/json-rpc/src/tests/unit_tests.rs: `.sub(Duration::from_secs(ledger_latest_timestamp_lack))`
$DIR/json-rpc/src/tests/unit_tests.rs: `.duration_since(UNIX_EPOCH)`
$DIR/json-rpc/src/tests/unit_tests.rs: `.as_micros()`
$DIR/json-rpc/src/tests/unit_tests.rs: `.all_accounts
        .keys()`
$DIR/json-rpc/src/tests/unit_tests.rs: `.next()`
$DIR/json-rpc/src/tests/unit_tests.rs: `.account_state_with_proof
        .get(0)`
$DIR/json-rpc/types/src/request.rs: `parse_err(json!([10, 11]));`
$DIR/json-rpc/types/src/request.rs: `parse_ok(json!([10]));`
$DIR/json-rpc/types/src/request.rs: `parse_ok(json!([serde_json::Value::Null]));`
$DIR/json-rpc/types/src/request.rs: `parse_ok(json!([]));`
$DIR/json-rpc/types/src/request.rs: `parse_ok(json!({}));`
$DIR/json-rpc/types/src/request.rs: `parse_ok(serde_json::Value::Null);`
$DIR/json-rpc/types/src/request.rs: `parse_ok(json!({"version": 10}));`
$DIR/json-rpc/types/src/request.rs: `parse_ok(json!([account]));`
$DIR/json-rpc/types/src/request.rs: `parse_ok(json!([account, 10]));`
$DIR/json-rpc/types/src/request.rs: `parse_err(json!([account, "foo"]));`
$DIR/json-rpc/types/src/request.rs: `parse_err(json!([account, 10, 1]));`
$DIR/json-rpc/types/src/request.rs: `parse_err(json!([]));`
$DIR/json-rpc/types/src/request.rs: `parse_err(json!({}));`
$DIR/json-rpc/types/src/request.rs: `parse_ok(json!({
            "account": account,
        }));`
$DIR/json-rpc/types/src/request.rs: `parse_ok(json!({
            "account": account,
            "version": 10,
        }));`
$DIR/json-rpc/types/src/request.rs: `parse_ok(json!([10, 11, false]));`
$DIR/json-rpc/types/src/request.rs: `parse_err(json!([10, 11, false, "foo"]));`
$DIR/json-rpc/types/src/request.rs: `parse_err(json!(["foo", 11, false]));`
$DIR/json-rpc/types/src/request.rs: `parse_err(json!([10, 11]));`
$DIR/json-rpc/types/src/request.rs: `parse_err(json!([]));`
$DIR/json-rpc/types/src/request.rs: `parse_err(json!({}));`
$DIR/json-rpc/types/src/request.rs: `parse_ok(json!({
            "start_version": 10,
            "limit": 10,
            "include_events": true,
        }));`
$DIR/json-rpc/types/src/request.rs: `parse_err(json!({
            "limit": 10,
            "include_events": true,
        }));`
$DIR/json-rpc/types/src/request.rs: `parse_ok(json!([account, 11, false]));`
$DIR/json-rpc/types/src/request.rs: `parse_err(json!([account, 11, false, "foo"]));`
$DIR/json-rpc/types/src/request.rs: `parse_err(json!(["foo", 11, false]));`
$DIR/json-rpc/types/src/request.rs: `parse_err(json!([10, 11]));`
$DIR/json-rpc/types/src/request.rs: `parse_err(json!([]));`
$DIR/json-rpc/types/src/request.rs: `parse_err(json!({}));`
$DIR/json-rpc/types/src/request.rs: `parse_ok(json!({
            "account": account,
            "sequence_number": 10,
            "include_events": true,
        }));`
$DIR/json-rpc/types/src/request.rs: `parse_err(json!({
            "sequence_number": 10,
            "include_events": true,
        }));`
$DIR/json-rpc/types/src/request.rs: `parse_ok(json!([account, 10, 11, false]));`
$DIR/json-rpc/types/src/request.rs: `parse_err(json!([account, 10, 11, false, "foo"]));`
$DIR/json-rpc/types/src/request.rs: `parse_err(json!(["foo", 10, 11, false]));`
$DIR/json-rpc/types/src/request.rs: `parse_err(json!([10, 11]));`
$DIR/json-rpc/types/src/request.rs: `parse_err(json!([]));`
$DIR/json-rpc/types/src/request.rs: `parse_err(json!({}));`
$DIR/json-rpc/types/src/request.rs: `parse_ok(json!({
            "account": account,
            "start": 10,
            "limit": 11,
            "include_events": true,
        }));`
$DIR/json-rpc/types/src/request.rs: `parse_err(json!({
            "include_events": true,
        }));`
$DIR/json-rpc/types/src/request.rs: `parse_ok(json!([account, 10, 11, false]));`
$DIR/json-rpc/types/src/request.rs: `parse_ok(json!([account, 10, 11, false, 123]));`
$DIR/json-rpc/types/src/request.rs: `parse_err(json!([account, 10, 11, false, 123, "foo"]));`
$DIR/json-rpc/types/src/request.rs: `parse_err(json!(["foo", 10, 11, false]));`
$DIR/json-rpc/types/src/request.rs: `parse_err(json!([account, 10]));`
$DIR/json-rpc/types/src/request.rs: `parse_err(json!([]));`
$DIR/json-rpc/types/src/request.rs: `parse_err(json!({}));`
$DIR/json-rpc/types/src/request.rs: `parse_ok(json!({
            "account": account,
            "start": 10,
            "limit": 11,
            "include_events": true,
        }));`
$DIR/json-rpc/types/src/request.rs: `parse_ok(json!({
            "account": account,
            "start": 10,
            "limit": 11,
            "include_events": true,
            "ledger_version": 999,
        }));`
$DIR/json-rpc/types/src/request.rs: `parse_err(json!({
            "include_events": true,
        }));`
$DIR/json-rpc/types/src/request.rs: `parse_ok(json!([key, 10, 11]));`
$DIR/json-rpc/types/src/request.rs: `parse_err(json!([key, 10, 11, false]));`
$DIR/json-rpc/types/src/request.rs: `parse_err(json!(["foo", 10, 11]));`
$DIR/json-rpc/types/src/request.rs: `parse_err(json!([10, 11]));`
$DIR/json-rpc/types/src/request.rs: `parse_err(json!([]));`
$DIR/json-rpc/types/src/request.rs: `parse_err(json!({}));`
$DIR/json-rpc/types/src/request.rs: `parse_ok(json!({
            "key": key,
            "start": 10,
            "limit": 11,
        }));`
$DIR/json-rpc/types/src/request.rs: `parse_err(json!({
            "start": 10,
            "limit": 11,
        }));`
$DIR/json-rpc/types/src/request.rs: `parse_err(json!([10]));`
$DIR/json-rpc/types/src/request.rs: `parse_ok(json!([]));`
$DIR/json-rpc/types/src/request.rs: `parse_ok(json!({}));`
$DIR/json-rpc/types/src/request.rs: `parse_ok(serde_json::Value::Null);`
$DIR/json-rpc/types/src/request.rs: `parse_err(json!([10]));`
$DIR/json-rpc/types/src/request.rs: `parse_ok(json!([]));`
$DIR/json-rpc/types/src/request.rs: `parse_ok(json!({}));`
$DIR/json-rpc/types/src/request.rs: `parse_ok(serde_json::Value::Null);`
$DIR/json-rpc/types/src/request.rs: `parse_ok(json!([11]));`
$DIR/json-rpc/types/src/request.rs: `parse_err(json!([11, false]));`
$DIR/json-rpc/types/src/request.rs: `parse_err(json!(["foo"]));`
$DIR/json-rpc/types/src/request.rs: `parse_err(json!([]));`
$DIR/json-rpc/types/src/request.rs: `parse_err(json!({}));`
$DIR/json-rpc/types/src/request.rs: `parse_ok(json!({
            "version": 10,
        }));`
$DIR/json-rpc/types/src/request.rs: `parse_ok(json!([11, 42]));`
$DIR/json-rpc/types/src/request.rs: `parse_err(json!([11, 42, 7]));`
$DIR/json-rpc/types/src/request.rs: `parse_ok(json!([11]));`
$DIR/json-rpc/types/src/request.rs: `parse_ok(json!([]));`
$DIR/json-rpc/types/src/request.rs: `parse_err(json!(["foo"]));`
$DIR/json-rpc/types/src/request.rs: `parse_err(json!([123, "bar"]));`
$DIR/json-rpc/types/src/request.rs: `parse_ok(json!({}));`
$DIR/json-rpc/types/src/request.rs: `parse_ok(json!({
            "client_known_version": 123,
        }));`
$DIR/json-rpc/types/src/request.rs: `parse_ok(json!({
            "ledger_version": 123,
        }));`
$DIR/json-rpc/types/src/request.rs: `parse_ok(json!({
            "client_known_version": 42,
            "ledger_version": 123,
        }));`
$DIR/json-rpc/types/src/request.rs: `parse_ok(json!([account, 11, 12]));`
$DIR/json-rpc/types/src/request.rs: `parse_ok(json!([account]));`
$DIR/json-rpc/types/src/request.rs: `parse_ok(json!([account, 12]));`
$DIR/json-rpc/types/src/request.rs: `parse_err(json!([account, 11, 12, "foo"]));`
$DIR/json-rpc/types/src/request.rs: `parse_err(json!(["foo", 11, 12]));`
$DIR/json-rpc/types/src/request.rs: `parse_err(json!([10, 11]));`
$DIR/json-rpc/types/src/request.rs: `parse_err(json!([]));`
$DIR/json-rpc/types/src/request.rs: `parse_err(json!({}));`
$DIR/json-rpc/types/src/request.rs: `parse_ok(json!({
            "account": account,
            "version": 10,
            "ledger_version": 10,
        }));`
$DIR/json-rpc/types/src/request.rs: `parse_ok(json!({
            "account": account,
            "ledger_version": 10,
        }));`
$DIR/json-rpc/types/src/request.rs: `parse_ok(json!([10, 11, true]));`
$DIR/json-rpc/types/src/request.rs: `parse_err(json!([10, 11, 42, false]));`
$DIR/json-rpc/types/src/request.rs: `parse_err(json!(["foo", 11, false]));`
$DIR/json-rpc/types/src/request.rs: `parse_err(json!([10, 11]));`
$DIR/json-rpc/types/src/request.rs: `parse_err(json!([]));`
$DIR/json-rpc/types/src/request.rs: `parse_err(json!({}));`
$DIR/json-rpc/types/src/request.rs: `parse_ok(json!({
            "start_version": 10,
            "limit": 11,
            "include_events": true,
        }));`
$DIR/json-rpc/types/src/request.rs: `parse_ok(json!([key, 10, 11]));`
$DIR/json-rpc/types/src/request.rs: `parse_err(json!([key, 10, 11, false]));`
$DIR/json-rpc/types/src/request.rs: `parse_err(json!(["foo", 10, 11]));`
$DIR/json-rpc/types/src/request.rs: `parse_err(json!([10, 11]));`
$DIR/json-rpc/types/src/request.rs: `parse_err(json!([]));`
$DIR/json-rpc/types/src/request.rs: `parse_err(json!({}));`
$DIR/json-rpc/types/src/request.rs: `parse_ok(json!({
            "key": key,
            "start": 10,
            "limit": 11,
        }));`
$DIR/json-rpc/types/src/request.rs: `parse_err(json!({
            "start": 10,
            "limit": 11,
        }));`
$DIR/json-rpc/types/src/request.rs: `parse_ok(json!([key, 10]));`
$DIR/json-rpc/types/src/request.rs: `parse_ok(json!([key]));`
$DIR/json-rpc/types/src/request.rs: `parse_err(json!([key, 10, false]));`
$DIR/json-rpc/types/src/request.rs: `parse_err(json!(["foo", 10]));`
$DIR/json-rpc/types/src/request.rs: `parse_err(json!([]));`
$DIR/json-rpc/types/src/request.rs: `parse_err(json!({}));`
$DIR/json-rpc/types/src/request.rs: `parse_ok(json!({ "key": key, "version": 10 }));`
$DIR/json-rpc/types/src/request.rs: `parse_ok(json!({ "key": key }));`
$DIR/json-rpc/types/src/request.rs: `parse_err(json!({ "version": 10 }));`
$DIR/json-rpc/types/src/views.rs: `.try_into()`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/bounds_tests.rs: `m.self_module_handle_idx = ModuleHandleIndex(12);`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/bounds_tests.rs: `m.function_handles[0].return_ = SignatureIndex(1);`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/bounds_tests.rs: `m.signatures.push(Signature(vec![TypeParameter(0)]));`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/bounds_tests.rs: `m.function_handles[0].parameters = SignatureIndex(1);`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/bounds_tests.rs: `m.signatures.push(Signature(vec![TypeParameter(0)]));`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/bounds_tests.rs: `m.function_handles[0].return_ = SignatureIndex(1);`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/bounds_tests.rs: `m.signatures
        .push(Signature(vec![Struct(StructHandleIndex::new(1))]));`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/bounds_tests.rs: `fields[0].signature.0 = TypeParameter(0);`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/bounds_tests.rs: `fields[0].signature.0 = Struct(StructHandleIndex::new(3));`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/bounds_tests.rs: `fields[0].signature.0 =
                StructInstantiation(StructHandleIndex::new(0), vec![TypeParameter(0)]);`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/bounds_tests.rs: `m.function_instantiations.push(FunctionInstantiation {
        handle: FunctionHandleIndex::new(0),
        type_parameters: SignatureIndex::new(1),
    });`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/bounds_tests.rs: `m.function_defs[0].code.as_mut().unwrap().code = vec![CallGeneric(func_inst_idx)];`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/bounds_tests.rs: `s.function_instantiations.push(FunctionInstantiation {
        handle: FunctionHandleIndex::new(0),
        type_parameters: SignatureIndex::new(1),
    });`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/bounds_tests.rs: `s.code.code = vec![CallGeneric(func_inst_idx)];`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/bounds_tests.rs: `m.signatures.push(Signature(vec![TypeParameter(0)]));`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/bounds_tests.rs: `m.function_instantiations.push(FunctionInstantiation {
        handle: FunctionHandleIndex::new(0),
        type_parameters: SignatureIndex::new(1),
    });`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/bounds_tests.rs: `m.function_defs[0].code.as_mut().unwrap().code = vec![CallGeneric(func_inst_idx)];`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/bounds_tests.rs: `s.signatures.push(Signature(vec![TypeParameter(0)]));`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/bounds_tests.rs: `s.function_instantiations.push(FunctionInstantiation {
        handle: FunctionHandleIndex::new(0),
        type_parameters: SignatureIndex::new(1),
    });`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/bounds_tests.rs: `s.code.code = vec![CallGeneric(func_inst_idx)];`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/bounds_tests.rs: `m.signatures
        .push(Signature(vec![Struct(StructHandleIndex::new(3))]));`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/bounds_tests.rs: `m.function_instantiations.push(FunctionInstantiation {
        handle: FunctionHandleIndex::new(0),
        type_parameters: SignatureIndex::new(1),
    });`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/bounds_tests.rs: `m.function_defs[0].code.as_mut().unwrap().code = vec![CallGeneric(func_inst_idx)];`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/bounds_tests.rs: `s.signatures
        .push(Signature(vec![Struct(StructHandleIndex::new(3))]));`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/bounds_tests.rs: `s.function_instantiations.push(FunctionInstantiation {
        handle: FunctionHandleIndex::new(0),
        type_parameters: SignatureIndex::new(1),
    });`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/bounds_tests.rs: `s.code.code = vec![CallGeneric(func_inst_idx)];`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/bounds_tests.rs: `m.friend_decls.push(ModuleHandle {
        address: AddressIdentifierIndex::new(m.address_identifiers.len() as TableIndex),
        name: IdentifierIndex::new(0),
    });`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/bounds_tests.rs: `m.friend_decls.push(ModuleHandle {
        address: AddressIdentifierIndex::new(0),
        name: IdentifierIndex::new(m.identifiers.len() as TableIndex),
    });`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/bounds_tests.rs: `s.signatures.clear();`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/bounds_tests.rs: `m.function_defs[0].code.as_mut().unwrap().code = vec![bytecode];`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/bounds_tests.rs: `skeleton
        .signatures
        .push(Signature(vec![Struct(StructHandleIndex::new(3))]));`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/bounds_tests.rs: `m.function_defs[0].code.as_mut().unwrap().code = vec![bytecode];`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/bounds_tests.rs: `skeleton.signatures.push(Signature(vec![TypeParameter(0)]));`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/bounds_tests.rs: `m.function_defs[0].code.as_mut().unwrap().code = vec![bytecode];`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/bounds_tests.rs: `gen.zeros_all();`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/bounds_tests.rs: `.signatures.push(Signature(vec![TypeParameter(0)]))`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/bounds_tests.rs: `.signatures.push(Signature(vec![TypeParameter(0)]))`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/bounds_tests.rs: `.signatures
        .push(Signature(vec![Struct(StructHandleIndex::new(1))]))`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/bounds_tests.rs: `.function_instantiations.push(FunctionInstantiation {
        handle: FunctionHandleIndex::new(0),
        type_parameters: SignatureIndex::new(1),
    })`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/bounds_tests.rs: `.function_instantiations.len()`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/bounds_tests.rs: `.function_instantiations.push(FunctionInstantiation {
        handle: FunctionHandleIndex::new(0),
        type_parameters: SignatureIndex::new(1),
    })`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/bounds_tests.rs: `.function_instantiations.len()`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/bounds_tests.rs: `.signatures.push(Signature(vec![TypeParameter(0)]))`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/bounds_tests.rs: `.function_instantiations.push(FunctionInstantiation {
        handle: FunctionHandleIndex::new(0),
        type_parameters: SignatureIndex::new(1),
    })`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/bounds_tests.rs: `.function_instantiations.len()`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/bounds_tests.rs: `.signatures.push(Signature(vec![TypeParameter(0)]))`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/bounds_tests.rs: `.function_instantiations.push(FunctionInstantiation {
        handle: FunctionHandleIndex::new(0),
        type_parameters: SignatureIndex::new(1),
    })`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/bounds_tests.rs: `.function_instantiations.len()`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/bounds_tests.rs: `.signatures
        .push(Signature(vec![Struct(StructHandleIndex::new(3))]))`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/bounds_tests.rs: `.function_instantiations.push(FunctionInstantiation {
        handle: FunctionHandleIndex::new(0),
        type_parameters: SignatureIndex::new(1),
    })`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/bounds_tests.rs: `.function_instantiations.len()`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/bounds_tests.rs: `.signatures
        .push(Signature(vec![Struct(StructHandleIndex::new(3))]))`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/bounds_tests.rs: `.function_instantiations.push(FunctionInstantiation {
        handle: FunctionHandleIndex::new(0),
        type_parameters: SignatureIndex::new(1),
    })`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/bounds_tests.rs: `.function_instantiations.len()`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/bounds_tests.rs: `.friend_decls.push(ModuleHandle {
        address: AddressIdentifierIndex::new(m.address_identifiers.len() as TableIndex),
        name: IdentifierIndex::new(0),
    })`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/bounds_tests.rs: `.address_identifiers.len()`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/bounds_tests.rs: `.friend_decls.push(ModuleHandle {
        address: AddressIdentifierIndex::new(0),
        name: IdentifierIndex::new(m.identifiers.len() as TableIndex),
    })`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/bounds_tests.rs: `.identifiers.len()`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/bounds_tests.rs: `.signatures.clear()`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/bounds_tests.rs: `.signatures.len()`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/bounds_tests.rs: `.signatures
        .push(Signature(vec![Struct(StructHandleIndex::new(3))]))`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/bounds_tests.rs: `.signatures.len()`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/bounds_tests.rs: `.signatures.push(Signature(vec![TypeParameter(0)]))`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/bounds_tests.rs: `.signatures.len()`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/bounds_tests.rs: `.zeros_all()`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/constants_tests.rs: `module.constant_pool = vec![
        Constant {
            type_: SignatureToken::Bool,
            data: vec![0],
        },
        Constant {
            type_: SignatureToken::U8,
            data: vec![0],
        },
        Constant {
            type_: SignatureToken::U64,
            data: vec![0, 0, 0, 0, 0, 0, 0, 0],
        },
        Constant {
            type_: SignatureToken::U128,
            data: vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        },
        Constant {
            type_: SignatureToken::Address,
            data: vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        },
    ];`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/constants_tests.rs: `items.extend(item.clone());`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/constants_tests.rs: `items.extend(item);`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/constants_tests.rs: `(0..0xFFFF).for_each(|_| items.extend(item.clone()));`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/constants_tests.rs: `module.constant_pool = vec![
        // empty
        Constant {
            type_: tvec(SignatureToken::Bool),
            data: vec![0],
        },
        Constant {
            type_: tvec(tvec(SignatureToken::Bool)),
            data: vec![0],
        },
        Constant {
            type_: tvec(tvec(tvec(tvec(SignatureToken::Bool)))),
            data: vec![0],
        },
        Constant {
            type_: tvec(tvec(tvec(tvec(SignatureToken::Bool)))),
            data: double_vec(vec![0]),
        },
        // small
        Constant {
            type_: tvec(SignatureToken::Bool),
            data: vec![9, 1, 1, 1, 1, 1, 1, 1, 1, 1],
        },
        Constant {
            type_: tvec(SignatureToken::U8),
            data: vec![9, 1, 1, 1, 1, 1, 1, 1, 1, 1],
        },
        // large
        Constant {
            type_: tvec(SignatureToken::Bool),
            data: large_vec(vec![0]),
        },
        Constant {
            type_: tvec(SignatureToken::U8),
            data: large_vec(vec![0]),
        },
        Constant {
            type_: tvec(SignatureToken::U64),
            data: large_vec(vec![0, 0, 0, 0, 0, 0, 0, 0]),
        },
        Constant {
            type_: tvec(SignatureToken::U128),
            data: large_vec(vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]),
        },
        Constant {
            type_: tvec(SignatureToken::Address),
            data: large_vec(vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]),
        },
        // double large
        Constant {
            type_: tvec(tvec(SignatureToken::Bool)),
            data: double_vec(large_vec(vec![0])),
        },
        Constant {
            type_: tvec(tvec(SignatureToken::U8)),
            data: double_vec(large_vec(vec![0])),
        },
        Constant {
            type_: tvec(tvec(SignatureToken::U64)),
            data: double_vec(large_vec(vec![0, 0, 0, 0, 0, 0, 0, 0])),
        },
        Constant {
            type_: tvec(tvec(SignatureToken::U128)),
            data: double_vec(large_vec(vec![
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            ])),
        },
        Constant {
            type_: tvec(tvec(SignatureToken::Address)),
            data: double_vec(large_vec(vec![
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            ])),
        },
    ];`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/constants_tests.rs: `items.extend(item.clone());`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/constants_tests.rs: `items.extend(item);`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/constants_tests.rs: `(0..(0xFFFF + 1)).for_each(|_| items.extend(item.clone()));`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/constants_tests.rs: `module.constant_pool = vec![Constant { type_, data }];`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/constants_tests.rs: `.extend(item.clone())`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/constants_tests.rs: `.extend(item)`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/constants_tests.rs: `.for_each(|_| items.extend(item.clone()))`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/constants_tests.rs: `.extend(item.clone())`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/constants_tests.rs: `.extend(item.clone())`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/constants_tests.rs: `.extend(item)`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/constants_tests.rs: `.for_each(|_| items.extend(item.clone()))`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/constants_tests.rs: `.extend(item.clone())`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/control_flow_tests.rs: `.function_defs()`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/control_flow_tests.rs: `.enumerate()`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/control_flow_tests.rs: `.filter(|(_, def)| !def.is_native())`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/control_flow_tests.rs: `.is_native()`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/duplication_tests.rs: `m.friend_decls.push(handle.clone());`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/duplication_tests.rs: `m.friend_decls.push(handle);`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/duplication_tests.rs: `.friend_decls.push(handle.clone())`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/duplication_tests.rs: `.friend_decls.push(handle)`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/generic_ops_tests.rs: `module.function_defs[2].code = Some(CodeUnit {
        locals: SignatureIndex(0),
        code: vec![
            Bytecode::CallGeneric(FunctionInstantiationIndex(0)),
            Bytecode::Ret,
        ],
    });`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/generic_ops_tests.rs: `module.function_instantiations.push(FunctionInstantiation {
        handle: FunctionHandleIndex(0),
        type_parameters: SignatureIndex(2),
    });`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/generic_ops_tests.rs: `module.signatures.push(Signature(vec![SignatureToken::U64]));`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/generic_ops_tests.rs: `module.function_defs[2].code = Some(CodeUnit {
        locals: SignatureIndex(0),
        code: vec![Bytecode::Call(FunctionHandleIndex(1)), Bytecode::Ret],
    });`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/generic_ops_tests.rs: `module.function_defs[2].code = Some(CodeUnit {
        locals: SignatureIndex(0),
        code: vec![
            Bytecode::LdU64(10),
            Bytecode::PackGeneric(StructDefInstantiationIndex(0)),
            Bytecode::Pop,
            Bytecode::Ret,
        ],
    });`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/generic_ops_tests.rs: `module
        .struct_def_instantiations
        .push(StructDefInstantiation {
            def: StructDefinitionIndex(0),
            type_parameters: SignatureIndex(2),
        });`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/generic_ops_tests.rs: `module.signatures.push(Signature(vec![SignatureToken::U64]));`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/generic_ops_tests.rs: `module.function_defs[2].code = Some(CodeUnit {
        locals: SignatureIndex(0),
        code: vec![
            Bytecode::LdU64(10),
            Bytecode::Pack(StructDefinitionIndex(1)),
            Bytecode::Pop,
            Bytecode::Ret,
        ],
    });`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/generic_ops_tests.rs: `module.function_defs[2].code = Some(CodeUnit {
        locals: SignatureIndex(0),
        code: vec![
            Bytecode::LdU64(10),
            Bytecode::Pack(StructDefinitionIndex(0)),
            Bytecode::UnpackGeneric(StructDefInstantiationIndex(0)),
            Bytecode::Pop,
            Bytecode::Ret,
        ],
    });`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/generic_ops_tests.rs: `module
        .struct_def_instantiations
        .push(StructDefInstantiation {
            def: StructDefinitionIndex(0),
            type_parameters: SignatureIndex(2),
        });`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/generic_ops_tests.rs: `module.signatures.push(Signature(vec![SignatureToken::U64]));`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/generic_ops_tests.rs: `module.function_defs[2].code = Some(CodeUnit {
        locals: SignatureIndex(0),
        code: vec![
            Bytecode::LdU64(10),
            Bytecode::PackGeneric(StructDefInstantiationIndex(0)),
            Bytecode::Unpack(StructDefinitionIndex(1)),
            Bytecode::Pop,
            Bytecode::Ret,
        ],
    });`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/generic_ops_tests.rs: `module
        .struct_def_instantiations
        .push(StructDefInstantiation {
            def: StructDefinitionIndex(1),
            type_parameters: SignatureIndex(2),
        });`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/generic_ops_tests.rs: `module.signatures.push(Signature(vec![SignatureToken::U64]));`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/generic_ops_tests.rs: `module.function_defs[2].code = Some(CodeUnit {
        locals: SignatureIndex(0),
        code: vec![
            Bytecode::LdU64(10),
            Bytecode::Pack(StructDefinitionIndex(0)),
            Bytecode::MutBorrowFieldGeneric(FieldInstantiationIndex(0)),
            Bytecode::Pop,
            Bytecode::Ret,
        ],
    });`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/generic_ops_tests.rs: `module.field_instantiations.push(FieldInstantiation {
        handle: FieldHandleIndex(0),
        type_parameters: SignatureIndex(2),
    });`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/generic_ops_tests.rs: `module.field_handles.push(FieldHandle {
        owner: StructDefinitionIndex(0),
        field: 0,
    });`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/generic_ops_tests.rs: `module.signatures.push(Signature(vec![SignatureToken::U64]));`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/generic_ops_tests.rs: `module.function_defs[2].code = Some(CodeUnit {
        locals: SignatureIndex(0),
        code: vec![
            Bytecode::LdU64(10),
            Bytecode::PackGeneric(StructDefInstantiationIndex(0)),
            Bytecode::MutBorrowField(FieldHandleIndex(0)),
            Bytecode::Pop,
            Bytecode::Ret,
        ],
    });`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/generic_ops_tests.rs: `module
        .struct_def_instantiations
        .push(StructDefInstantiation {
            def: StructDefinitionIndex(1),
            type_parameters: SignatureIndex(2),
        });`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/generic_ops_tests.rs: `module.field_handles.push(FieldHandle {
        owner: StructDefinitionIndex(1),
        field: 0,
    });`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/generic_ops_tests.rs: `module.signatures.push(Signature(vec![SignatureToken::U64]));`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/generic_ops_tests.rs: `module.function_defs[2].code = Some(CodeUnit {
        locals: SignatureIndex(0),
        code: vec![
            Bytecode::LdU64(10),
            Bytecode::Pack(StructDefinitionIndex(0)),
            Bytecode::ImmBorrowFieldGeneric(FieldInstantiationIndex(0)),
            Bytecode::Pop,
            Bytecode::Ret,
        ],
    });`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/generic_ops_tests.rs: `module.field_instantiations.push(FieldInstantiation {
        handle: FieldHandleIndex(0),
        type_parameters: SignatureIndex(2),
    });`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/generic_ops_tests.rs: `module.field_handles.push(FieldHandle {
        owner: StructDefinitionIndex(0),
        field: 0,
    });`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/generic_ops_tests.rs: `module.signatures.push(Signature(vec![SignatureToken::U64]));`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/generic_ops_tests.rs: `module.function_defs[2].code = Some(CodeUnit {
        locals: SignatureIndex(0),
        code: vec![
            Bytecode::LdU64(10),
            Bytecode::PackGeneric(StructDefInstantiationIndex(0)),
            Bytecode::ImmBorrowField(FieldHandleIndex(0)),
            Bytecode::Pop,
            Bytecode::Ret,
        ],
    });`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/generic_ops_tests.rs: `module
        .struct_def_instantiations
        .push(StructDefInstantiation {
            def: StructDefinitionIndex(1),
            type_parameters: SignatureIndex(2),
        });`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/generic_ops_tests.rs: `module.field_handles.push(FieldHandle {
        owner: StructDefinitionIndex(1),
        field: 0,
    });`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/generic_ops_tests.rs: `module.signatures.push(Signature(vec![SignatureToken::U64]));`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/generic_ops_tests.rs: `module.function_defs[2]
        .acquires_global_resources
        .push(StructDefinitionIndex(2));`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/generic_ops_tests.rs: `module.function_defs[2].code = Some(CodeUnit {
        locals: SignatureIndex(0),
        code: vec![
            Bytecode::LdConst(ConstantPoolIndex(0)),
            Bytecode::MutBorrowGlobalGeneric(StructDefInstantiationIndex(0)),
            Bytecode::Pop,
            Bytecode::Ret,
        ],
    });`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/generic_ops_tests.rs: `module
        .struct_def_instantiations
        .push(StructDefInstantiation {
            def: StructDefinitionIndex(2),
            type_parameters: SignatureIndex(2),
        });`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/generic_ops_tests.rs: `module.signatures.push(Signature(vec![SignatureToken::U64]));`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/generic_ops_tests.rs: `module.function_defs[2]
        .acquires_global_resources
        .push(StructDefinitionIndex(3));`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/generic_ops_tests.rs: `module.function_defs[2].code = Some(CodeUnit {
        locals: SignatureIndex(0),
        code: vec![
            Bytecode::LdConst(ConstantPoolIndex(0)),
            Bytecode::MutBorrowGlobal(StructDefinitionIndex(3)),
            Bytecode::Pop,
            Bytecode::Ret,
        ],
    });`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/generic_ops_tests.rs: `module.function_defs[2]
        .acquires_global_resources
        .push(StructDefinitionIndex(2));`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/generic_ops_tests.rs: `module.function_defs[2].code = Some(CodeUnit {
        locals: SignatureIndex(0),
        code: vec![
            Bytecode::LdConst(ConstantPoolIndex(0)),
            Bytecode::ImmBorrowGlobalGeneric(StructDefInstantiationIndex(0)),
            Bytecode::Pop,
            Bytecode::Ret,
        ],
    });`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/generic_ops_tests.rs: `module
        .struct_def_instantiations
        .push(StructDefInstantiation {
            def: StructDefinitionIndex(2),
            type_parameters: SignatureIndex(2),
        });`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/generic_ops_tests.rs: `module.signatures.push(Signature(vec![SignatureToken::U64]));`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/generic_ops_tests.rs: `module.function_defs[2]
        .acquires_global_resources
        .push(StructDefinitionIndex(3));`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/generic_ops_tests.rs: `module.function_defs[2].code = Some(CodeUnit {
        locals: SignatureIndex(0),
        code: vec![
            Bytecode::LdConst(ConstantPoolIndex(0)),
            Bytecode::ImmBorrowGlobal(StructDefinitionIndex(3)),
            Bytecode::Pop,
            Bytecode::Ret,
        ],
    });`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/generic_ops_tests.rs: `module.function_defs[2].code = Some(CodeUnit {
        locals: SignatureIndex(0),
        code: vec![
            Bytecode::LdConst(ConstantPoolIndex(0)),
            Bytecode::ExistsGeneric(StructDefInstantiationIndex(0)),
            Bytecode::Pop,
            Bytecode::Ret,
        ],
    });`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/generic_ops_tests.rs: `module
        .struct_def_instantiations
        .push(StructDefInstantiation {
            def: StructDefinitionIndex(2),
            type_parameters: SignatureIndex(2),
        });`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/generic_ops_tests.rs: `module.signatures.push(Signature(vec![SignatureToken::U64]));`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/generic_ops_tests.rs: `module.function_defs[2].code = Some(CodeUnit {
        locals: SignatureIndex(0),
        code: vec![
            Bytecode::LdConst(ConstantPoolIndex(0)),
            Bytecode::Exists(StructDefinitionIndex(3)),
            Bytecode::Pop,
            Bytecode::Ret,
        ],
    });`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/generic_ops_tests.rs: `module.function_defs[2]
        .acquires_global_resources
        .push(StructDefinitionIndex(2));`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/generic_ops_tests.rs: `module.function_defs[2].code = Some(CodeUnit {
        locals: SignatureIndex(0),
        code: vec![
            Bytecode::LdConst(ConstantPoolIndex(0)),
            Bytecode::MoveFromGeneric(StructDefInstantiationIndex(0)),
            Bytecode::Unpack(StructDefinitionIndex(2)),
            Bytecode::Pop,
            Bytecode::Ret,
        ],
    });`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/generic_ops_tests.rs: `module
        .struct_def_instantiations
        .push(StructDefInstantiation {
            def: StructDefinitionIndex(2),
            type_parameters: SignatureIndex(2),
        });`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/generic_ops_tests.rs: `module.signatures.push(Signature(vec![SignatureToken::U64]));`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/generic_ops_tests.rs: `module.function_defs[2]
        .acquires_global_resources
        .push(StructDefinitionIndex(3));`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/generic_ops_tests.rs: `module.function_defs[2].code = Some(CodeUnit {
        locals: SignatureIndex(0),
        code: vec![
            Bytecode::LdConst(ConstantPoolIndex(0)),
            Bytecode::MoveFrom(StructDefinitionIndex(3)),
            Bytecode::UnpackGeneric(StructDefInstantiationIndex(0)),
            Bytecode::Pop,
            Bytecode::Ret,
        ],
    });`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/generic_ops_tests.rs: `module
        .struct_def_instantiations
        .push(StructDefInstantiation {
            def: StructDefinitionIndex(3),
            type_parameters: SignatureIndex(2),
        });`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/generic_ops_tests.rs: `module.signatures.push(Signature(vec![SignatureToken::U64]));`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/generic_ops_tests.rs: `module.function_defs[2].code = Some(CodeUnit {
        locals: SignatureIndex(0),
        code: vec![
            Bytecode::MoveLoc(0),
            Bytecode::LdU64(10),
            Bytecode::Pack(StructDefinitionIndex(2)),
            Bytecode::MoveToGeneric(StructDefInstantiationIndex(0)),
            Bytecode::Ret,
        ],
    });`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/generic_ops_tests.rs: `module
        .struct_def_instantiations
        .push(StructDefInstantiation {
            def: StructDefinitionIndex(2),
            type_parameters: SignatureIndex(2),
        });`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/generic_ops_tests.rs: `module.signatures.push(Signature(vec![SignatureToken::U64]));`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/generic_ops_tests.rs: `module.function_defs[2].code = Some(CodeUnit {
        locals: SignatureIndex(0),
        code: vec![
            Bytecode::MoveLoc(0),
            Bytecode::LdU64(10),
            Bytecode::PackGeneric(StructDefInstantiationIndex(0)),
            Bytecode::MoveTo(StructDefinitionIndex(3)),
            Bytecode::Ret,
        ],
    });`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/generic_ops_tests.rs: `module
        .struct_def_instantiations
        .push(StructDefInstantiation {
            def: StructDefinitionIndex(3),
            type_parameters: SignatureIndex(2),
        });`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/generic_ops_tests.rs: `module.signatures.push(Signature(vec![SignatureToken::U64]));`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/generic_ops_tests.rs: `.function_instantiations.push(FunctionInstantiation {
        handle: FunctionHandleIndex(0),
        type_parameters: SignatureIndex(2),
    })`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/generic_ops_tests.rs: `.signatures.push(Signature(vec![SignatureToken::U64]))`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/generic_ops_tests.rs: `.struct_def_instantiations
        .push(StructDefInstantiation {
            def: StructDefinitionIndex(0),
            type_parameters: SignatureIndex(2),
        })`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/generic_ops_tests.rs: `.signatures.push(Signature(vec![SignatureToken::U64]))`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/generic_ops_tests.rs: `.struct_def_instantiations
        .push(StructDefInstantiation {
            def: StructDefinitionIndex(0),
            type_parameters: SignatureIndex(2),
        })`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/generic_ops_tests.rs: `.signatures.push(Signature(vec![SignatureToken::U64]))`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/generic_ops_tests.rs: `.struct_def_instantiations
        .push(StructDefInstantiation {
            def: StructDefinitionIndex(1),
            type_parameters: SignatureIndex(2),
        })`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/generic_ops_tests.rs: `.signatures.push(Signature(vec![SignatureToken::U64]))`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/generic_ops_tests.rs: `.field_instantiations.push(FieldInstantiation {
        handle: FieldHandleIndex(0),
        type_parameters: SignatureIndex(2),
    })`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/generic_ops_tests.rs: `.field_handles.push(FieldHandle {
        owner: StructDefinitionIndex(0),
        field: 0,
    })`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/generic_ops_tests.rs: `.signatures.push(Signature(vec![SignatureToken::U64]))`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/generic_ops_tests.rs: `.struct_def_instantiations
        .push(StructDefInstantiation {
            def: StructDefinitionIndex(1),
            type_parameters: SignatureIndex(2),
        })`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/generic_ops_tests.rs: `.field_handles.push(FieldHandle {
        owner: StructDefinitionIndex(1),
        field: 0,
    })`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/generic_ops_tests.rs: `.signatures.push(Signature(vec![SignatureToken::U64]))`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/generic_ops_tests.rs: `.field_instantiations.push(FieldInstantiation {
        handle: FieldHandleIndex(0),
        type_parameters: SignatureIndex(2),
    })`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/generic_ops_tests.rs: `.field_handles.push(FieldHandle {
        owner: StructDefinitionIndex(0),
        field: 0,
    })`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/generic_ops_tests.rs: `.signatures.push(Signature(vec![SignatureToken::U64]))`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/generic_ops_tests.rs: `.struct_def_instantiations
        .push(StructDefInstantiation {
            def: StructDefinitionIndex(1),
            type_parameters: SignatureIndex(2),
        })`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/generic_ops_tests.rs: `.field_handles.push(FieldHandle {
        owner: StructDefinitionIndex(1),
        field: 0,
    })`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/generic_ops_tests.rs: `.signatures.push(Signature(vec![SignatureToken::U64]))`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/generic_ops_tests.rs: `.acquires_global_resources
        .push(StructDefinitionIndex(2))`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/generic_ops_tests.rs: `.struct_def_instantiations
        .push(StructDefInstantiation {
            def: StructDefinitionIndex(2),
            type_parameters: SignatureIndex(2),
        })`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/generic_ops_tests.rs: `.signatures.push(Signature(vec![SignatureToken::U64]))`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/generic_ops_tests.rs: `.acquires_global_resources
        .push(StructDefinitionIndex(3))`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/generic_ops_tests.rs: `.acquires_global_resources
        .push(StructDefinitionIndex(2))`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/generic_ops_tests.rs: `.struct_def_instantiations
        .push(StructDefInstantiation {
            def: StructDefinitionIndex(2),
            type_parameters: SignatureIndex(2),
        })`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/generic_ops_tests.rs: `.signatures.push(Signature(vec![SignatureToken::U64]))`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/generic_ops_tests.rs: `.acquires_global_resources
        .push(StructDefinitionIndex(3))`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/generic_ops_tests.rs: `.struct_def_instantiations
        .push(StructDefInstantiation {
            def: StructDefinitionIndex(2),
            type_parameters: SignatureIndex(2),
        })`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/generic_ops_tests.rs: `.signatures.push(Signature(vec![SignatureToken::U64]))`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/generic_ops_tests.rs: `.acquires_global_resources
        .push(StructDefinitionIndex(2))`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/generic_ops_tests.rs: `.struct_def_instantiations
        .push(StructDefInstantiation {
            def: StructDefinitionIndex(2),
            type_parameters: SignatureIndex(2),
        })`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/generic_ops_tests.rs: `.signatures.push(Signature(vec![SignatureToken::U64]))`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/generic_ops_tests.rs: `.acquires_global_resources
        .push(StructDefinitionIndex(3))`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/generic_ops_tests.rs: `.struct_def_instantiations
        .push(StructDefInstantiation {
            def: StructDefinitionIndex(3),
            type_parameters: SignatureIndex(2),
        })`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/generic_ops_tests.rs: `.signatures.push(Signature(vec![SignatureToken::U64]))`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/generic_ops_tests.rs: `.struct_def_instantiations
        .push(StructDefInstantiation {
            def: StructDefinitionIndex(2),
            type_parameters: SignatureIndex(2),
        })`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/generic_ops_tests.rs: `.signatures.push(Signature(vec![SignatureToken::U64]))`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/generic_ops_tests.rs: `.struct_def_instantiations
        .push(StructDefInstantiation {
            def: StructDefinitionIndex(3),
            type_parameters: SignatureIndex(2),
        })`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/generic_ops_tests.rs: `.signatures.push(Signature(vec![SignatureToken::U64]))`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/signature_tests.rs: `m.signatures[0] = Signature(vec![Reference(Box::new(Reference(Box::new(
        SignatureToken::Bool,
    ))))]);`
$DIR/language/bytecode-verifier/invalid-mutations/src/bounds.rs: `.any(|x| x == variant)`
$DIR/language/compiler/ir-to-bytecode/src/parser.rs: `good_chars.push(0x0A);`
$DIR/language/compiler/ir-to-bytecode/src/parser.rs: `good_chars.push(0x09);`
$DIR/language/compiler/ir-to-bytecode/src/parser.rs: `bad_chars.append(&mut (0x0B..=0x1F).collect::<Vec<_>>());`
$DIR/language/compiler/ir-to-bytecode/src/parser.rs: `bad_chars.push(0x7F);`
$DIR/language/compiler/ir-to-bytecode/src/parser.rs: `good_chars.push(bad_char);`
$DIR/language/compiler/ir-to-bytecode/src/parser.rs: `good_chars.pop();`
$DIR/language/compiler/ir-to-bytecode/src/parser.rs: `.collect::<Vec<u8>>()`
$DIR/language/compiler/ir-to-bytecode/src/parser.rs: `.push(0x0A)`
$DIR/language/compiler/ir-to-bytecode/src/parser.rs: `.push(0x09)`
$DIR/language/compiler/ir-to-bytecode/src/parser.rs: `.collect::<Vec<_>>()`
$DIR/language/compiler/ir-to-bytecode/src/parser.rs: `.append(&mut (0x0B..=0x1F).collect::<Vec<_>>())`
$DIR/language/compiler/ir-to-bytecode/src/parser.rs: `.collect::<Vec<_>>()`
$DIR/language/compiler/ir-to-bytecode/src/parser.rs: `.push(0x7F)`
$DIR/language/compiler/ir-to-bytecode/src/parser.rs: `.push(bad_char)`
$DIR/language/compiler/ir-to-bytecode/src/parser.rs: `.pop()`
$DIR/language/compiler/src/unit_tests/cfg_tests.rs: `cfg.display();`
$DIR/language/compiler/src/unit_tests/cfg_tests.rs: `cfg.display();`
$DIR/language/compiler/src/unit_tests/cfg_tests.rs: `cfg.display();`
$DIR/language/compiler/src/unit_tests/cfg_tests.rs: `cfg.display();`
$DIR/language/compiler/src/unit_tests/cfg_tests.rs: `cfg.display();`
$DIR/language/compiler/src/unit_tests/cfg_tests.rs: `cfg.display();`
$DIR/language/compiler/src/unit_tests/cfg_tests.rs: `cfg.display();`
$DIR/language/compiler/src/unit_tests/cfg_tests.rs: `cfg.display();`
$DIR/language/compiler/src/unit_tests/cfg_tests.rs: `cfg.display();`
$DIR/language/compiler/src/unit_tests/cfg_tests.rs: `cfg.display();`
$DIR/language/compiler/src/unit_tests/cfg_tests.rs: `cfg.display();`
$DIR/language/compiler/src/unit_tests/cfg_tests.rs: `.code()`
$DIR/language/compiler/src/unit_tests/cfg_tests.rs: `.display()`
$DIR/language/compiler/src/unit_tests/cfg_tests.rs: `.code()`
$DIR/language/compiler/src/unit_tests/cfg_tests.rs: `.display()`
$DIR/language/compiler/src/unit_tests/cfg_tests.rs: `.code()`
$DIR/language/compiler/src/unit_tests/cfg_tests.rs: `.display()`
$DIR/language/compiler/src/unit_tests/cfg_tests.rs: `.code()`
$DIR/language/compiler/src/unit_tests/cfg_tests.rs: `.display()`
$DIR/language/compiler/src/unit_tests/cfg_tests.rs: `.code()`
$DIR/language/compiler/src/unit_tests/cfg_tests.rs: `.display()`
$DIR/language/compiler/src/unit_tests/cfg_tests.rs: `.code()`
$DIR/language/compiler/src/unit_tests/cfg_tests.rs: `.display()`
$DIR/language/compiler/src/unit_tests/cfg_tests.rs: `.code()`
$DIR/language/compiler/src/unit_tests/cfg_tests.rs: `.display()`
$DIR/language/compiler/src/unit_tests/cfg_tests.rs: `.code()`
$DIR/language/compiler/src/unit_tests/cfg_tests.rs: `.display()`
$DIR/language/compiler/src/unit_tests/cfg_tests.rs: `.code()`
$DIR/language/compiler/src/unit_tests/cfg_tests.rs: `.display()`
$DIR/language/compiler/src/unit_tests/cfg_tests.rs: `.code()`
$DIR/language/compiler/src/unit_tests/cfg_tests.rs: `.display()`
$DIR/language/compiler/src/unit_tests/cfg_tests.rs: `.code()`
$DIR/language/compiler/src/unit_tests/cfg_tests.rs: `.display()`
$DIR/language/compiler/src/unit_tests/function_tests.rs: `code.reserve(30 * (num_formals + num_locals));`
$DIR/language/compiler/src/unit_tests/function_tests.rs: `code.push_str(", ");`
$DIR/language/compiler/src/unit_tests/function_tests.rs: `code.push_str(") {\n");`
$DIR/language/compiler/src/unit_tests/function_tests.rs: `code.push_str("return;");`
$DIR/language/compiler/src/unit_tests/function_tests.rs: `code.push('}');`
$DIR/language/compiler/src/unit_tests/function_tests.rs: `code.push_str(&generate_function("foo_func", 128, 127));`
$DIR/language/compiler/src/unit_tests/function_tests.rs: `code.push('}');`
$DIR/language/compiler/src/unit_tests/function_tests.rs: `.reserve(30 * (num_formals + num_locals))`
$DIR/language/compiler/src/unit_tests/function_tests.rs: `.push_str(", ")`
$DIR/language/compiler/src/unit_tests/function_tests.rs: `.push_str(") {\n")`
$DIR/language/compiler/src/unit_tests/function_tests.rs: `.push_str("return;")`
$DIR/language/compiler/src/unit_tests/function_tests.rs: `.push('}')`
$DIR/language/compiler/src/unit_tests/function_tests.rs: `.push_str(&generate_function("foo_func", 128, 127))`
$DIR/language/compiler/src/unit_tests/function_tests.rs: `.push('}')`
$DIR/language/compiler/src/unit_tests/serializer_tests.rs: `.serialize(&mut binary)`
$DIR/language/diem-framework/releases/src/legacy/transaction_scripts.rs: `.files()`
$DIR/language/diem-framework/releases/src/tests.rs: `bytecode_verifier::verify_module(module).unwrap_or_else(|_| {
                panic!(
                    "failed to verify module {} from version {}",
                    module.self_id(),
                    ver
                )
            });`
$DIR/language/diem-framework/releases/src/tests.rs: `bytecode_verifier::dependencies::verify_module(
                module,
                modules
                    .iter()
                    .enumerate()
                    .flat_map(|(j, module)| if i == j { None } else { Some(module) }),
            )
            .unwrap();`
$DIR/language/diem-framework/releases/src/tests.rs: `.map(|blob| {
                CompiledModule::deserialize(blob)
                    .unwrap_or_else(|_| panic!("unable to deserialize module from version {}", ver))
            })`
$DIR/language/diem-framework/releases/src/tests.rs: `.collect::<Vec<_>>()`
$DIR/language/diem-framework/releases/src/tests.rs: `.enumerate()`
$DIR/language/diem-framework/releases/src/tests.rs: `.unwrap_or_else(|_| {
                panic!(
                    "failed to verify module {} from version {}",
                    module.self_id(),
                    ver
                )
            })`
$DIR/language/diem-framework/releases/src/tests.rs: `.enumerate()`
$DIR/language/diem-framework/releases/src/tests.rs: `.flat_map(|(j, module)| if i == j { None } else { Some(module) })`
$DIR/language/diem-framework/tests/generated_files.rs: `.arg("status")`
$DIR/language/diem-framework/tests/generated_files.rs: `.arg("--porcelain")`
$DIR/language/diem-framework/tests/generated_files.rs: `.output()`
$DIR/language/diem-framework/tests/generated_files.rs: `.stdout.is_empty()`
$DIR/language/diem-framework/tests/generated_files.rs: `.is_ok()`
$DIR/language/diem-tools/transaction-replay/src/unit_tests/bisection_tests.rs: `check(vec![true, true, true, true], None);`
$DIR/language/diem-tools/transaction-replay/src/unit_tests/bisection_tests.rs: `check(vec![true, true, true, false], Some(3));`
$DIR/language/diem-tools/transaction-replay/src/unit_tests/bisection_tests.rs: `check(vec![true, true, false, false], Some(2));`
$DIR/language/diem-tools/transaction-replay/src/unit_tests/bisection_tests.rs: `override_changeset
        .publish_resource(
            address,
            AccountResource::struct_tag(),
            bcs::to_bytes(&AccountResource::new(
                0,
                vec![],
                None,
                None,
                EventHandle::new(EventKey::new_from_address(&address, 0), 0),
                EventHandle::new(EventKey::new_from_address(&address, 1), 1),
            ))
            .unwrap(),
        )
        .unwrap();`
$DIR/language/diem-tools/transaction-replay/src/unit_tests/bisection_tests.rs: `script_path.push("examples/account_exists.move");`
$DIR/language/diem-tools/transaction-replay/src/unit_tests/bisection_tests.rs: `.publish_resource(
            address,
            AccountResource::struct_tag(),
            bcs::to_bytes(&AccountResource::new(
                0,
                vec![],
                None,
                None,
                EventHandle::new(EventKey::new_from_address(&address, 0), 0),
                EventHandle::new(EventKey::new_from_address(&address, 1), 1),
            ))
            .unwrap(),
        )`
$DIR/language/diem-tools/transaction-replay/src/unit_tests/bisection_tests.rs: `.push("examples/account_exists.move")`
$DIR/language/diem-tools/writeset-transaction-generator/src/release_flow/unit_tests/release_tests.rs: `module.identifiers[0] = Identifier::new(format!("test_{:?}", i)).unwrap();`
$DIR/language/diem-tools/writeset-transaction-generator/src/release_flow/unit_tests/release_tests.rs: `verify_module(&module).expect("invalid module");`
$DIR/language/diem-tools/writeset-transaction-generator/src/release_flow/unit_tests/release_tests.rs: `module.serialize(&mut bytes).unwrap();`
$DIR/language/diem-tools/writeset-transaction-generator/src/release_flow/unit_tests/release_tests.rs: `modules_and_bytes.push((bytes.clone(), module.clone()));`
$DIR/language/diem-tools/writeset-transaction-generator/src/release_flow/unit_tests/release_tests.rs: `modules.push(module);`
$DIR/language/diem-tools/writeset-transaction-generator/src/release_flow/unit_tests/release_tests.rs: `modules_bytes.push(bytes);`
$DIR/language/diem-tools/writeset-transaction-generator/src/release_flow/unit_tests/release_tests.rs: `module.identifiers[0] = Identifier::new(format!("test_{:?}", 9)).unwrap();`
$DIR/language/diem-tools/writeset-transaction-generator/src/release_flow/unit_tests/release_tests.rs: `verify_module(&module).expect("invalid module");`
$DIR/language/diem-tools/writeset-transaction-generator/src/release_flow/unit_tests/release_tests.rs: `replace_module.serialize(&mut replace_module_bytes).unwrap();`
$DIR/language/diem-tools/writeset-transaction-generator/src/release_flow/unit_tests/release_tests.rs: `replace_modules.pop();`
$DIR/language/diem-tools/writeset-transaction-generator/src/release_flow/unit_tests/release_tests.rs: `replace_modules.push((replace_module_bytes.clone(), replace_module.clone()));`
$DIR/language/diem-tools/writeset-transaction-generator/src/release_flow/unit_tests/release_tests.rs: `new_modules.pop();`
$DIR/language/diem-tools/writeset-transaction-generator/src/release_flow/unit_tests/release_tests.rs: `old_modules.swap_remove(0);`
$DIR/language/diem-tools/writeset-transaction-generator/src/release_flow/unit_tests/release_tests.rs: `new_modules.pop();`
$DIR/language/diem-tools/writeset-transaction-generator/src/release_flow/unit_tests/release_tests.rs: `new_modules.push((replace_module_bytes.clone(), replace_module.clone()));`
$DIR/language/diem-tools/writeset-transaction-generator/src/release_flow/unit_tests/release_tests.rs: `new_modules.swap_remove(0);`
$DIR/language/diem-tools/writeset-transaction-generator/src/release_flow/unit_tests/release_tests.rs: `new_modules.pop();`
$DIR/language/diem-tools/writeset-transaction-generator/src/release_flow/unit_tests/release_tests.rs: `new_modules.push((replace_module_bytes.clone(), replace_module.clone()));`
$DIR/language/diem-tools/writeset-transaction-generator/src/release_flow/unit_tests/release_tests.rs: `old_modules.swap_remove(0);`
$DIR/language/diem-tools/writeset-transaction-generator/src/release_flow/unit_tests/release_tests.rs: `new_modules.pop();`
$DIR/language/diem-tools/writeset-transaction-generator/src/release_flow/unit_tests/release_tests.rs: `new_modules.pop();`
$DIR/language/diem-tools/writeset-transaction-generator/src/release_flow/unit_tests/release_tests.rs: `new_modules.push((replace_module_bytes.clone(), replace_module.clone()));`
$DIR/language/diem-tools/writeset-transaction-generator/src/release_flow/unit_tests/release_tests.rs: `old_modules.swap_remove(0);`
$DIR/language/diem-tools/writeset-transaction-generator/src/release_flow/unit_tests/release_tests.rs: `new_modules.pop();`
$DIR/language/diem-tools/writeset-transaction-generator/src/release_flow/unit_tests/release_tests.rs: `new_modules.pop();`
$DIR/language/diem-tools/writeset-transaction-generator/src/release_flow/unit_tests/release_tests.rs: `new_modules.push((replace_module_bytes.clone(), replace_module));`
$DIR/language/diem-tools/writeset-transaction-generator/src/release_flow/unit_tests/release_tests.rs: `new_modules.swap(0, 2);`
$DIR/language/diem-tools/writeset-transaction-generator/src/release_flow/unit_tests/release_tests.rs: `old_modules.swap_remove(0);`
$DIR/language/diem-tools/writeset-transaction-generator/src/release_flow/unit_tests/release_tests.rs: `new_modules.swap(4, 5);`
$DIR/language/diem-tools/writeset-transaction-generator/src/release_flow/unit_tests/release_tests.rs: `.serialize(&mut bytes)`
$DIR/language/diem-tools/writeset-transaction-generator/src/release_flow/unit_tests/release_tests.rs: `.push((bytes.clone(), module.clone()))`
$DIR/language/diem-tools/writeset-transaction-generator/src/release_flow/unit_tests/release_tests.rs: `.push(module)`
$DIR/language/diem-tools/writeset-transaction-generator/src/release_flow/unit_tests/release_tests.rs: `.push(bytes)`
$DIR/language/diem-tools/writeset-transaction-generator/src/release_flow/unit_tests/release_tests.rs: `.serialize(&mut replace_module_bytes)`
$DIR/language/diem-tools/writeset-transaction-generator/src/release_flow/unit_tests/release_tests.rs: `.split_off(1)`
$DIR/language/diem-tools/writeset-transaction-generator/src/release_flow/unit_tests/release_tests.rs: `.split_off(1)`
$DIR/language/diem-tools/writeset-transaction-generator/src/release_flow/unit_tests/release_tests.rs: `.pop()`
$DIR/language/diem-tools/writeset-transaction-generator/src/release_flow/unit_tests/release_tests.rs: `.push((replace_module_bytes.clone(), replace_module.clone()))`
$DIR/language/diem-tools/writeset-transaction-generator/src/release_flow/unit_tests/release_tests.rs: `.pop()`
$DIR/language/diem-tools/writeset-transaction-generator/src/release_flow/unit_tests/release_tests.rs: `.swap_remove(0)`
$DIR/language/diem-tools/writeset-transaction-generator/src/release_flow/unit_tests/release_tests.rs: `.pop()`
$DIR/language/diem-tools/writeset-transaction-generator/src/release_flow/unit_tests/release_tests.rs: `.push((replace_module_bytes.clone(), replace_module.clone()))`
$DIR/language/diem-tools/writeset-transaction-generator/src/release_flow/unit_tests/release_tests.rs: `.swap_remove(0)`
$DIR/language/diem-tools/writeset-transaction-generator/src/release_flow/unit_tests/release_tests.rs: `.pop()`
$DIR/language/diem-tools/writeset-transaction-generator/src/release_flow/unit_tests/release_tests.rs: `.push((replace_module_bytes.clone(), replace_module.clone()))`
$DIR/language/diem-tools/writeset-transaction-generator/src/release_flow/unit_tests/release_tests.rs: `.swap_remove(0)`
$DIR/language/diem-tools/writeset-transaction-generator/src/release_flow/unit_tests/release_tests.rs: `.pop()`
$DIR/language/diem-tools/writeset-transaction-generator/src/release_flow/unit_tests/release_tests.rs: `.pop()`
$DIR/language/diem-tools/writeset-transaction-generator/src/release_flow/unit_tests/release_tests.rs: `.push((replace_module_bytes.clone(), replace_module.clone()))`
$DIR/language/diem-tools/writeset-transaction-generator/src/release_flow/unit_tests/release_tests.rs: `.swap_remove(0)`
$DIR/language/diem-tools/writeset-transaction-generator/src/release_flow/unit_tests/release_tests.rs: `.pop()`
$DIR/language/diem-tools/writeset-transaction-generator/src/release_flow/unit_tests/release_tests.rs: `.pop()`
$DIR/language/diem-tools/writeset-transaction-generator/src/release_flow/unit_tests/release_tests.rs: `.push((replace_module_bytes.clone(), replace_module))`
$DIR/language/diem-tools/writeset-transaction-generator/src/release_flow/unit_tests/release_tests.rs: `.swap(0, 2)`
$DIR/language/diem-tools/writeset-transaction-generator/src/release_flow/unit_tests/release_tests.rs: `.swap_remove(0)`
$DIR/language/diem-tools/writeset-transaction-generator/src/release_flow/unit_tests/release_tests.rs: `.swap(4, 5)`
$DIR/language/diem-vm/mvhashmap/src/unit_tests/mod.rs: `mvtbl.write(&ap1, 10, Some(vec![0, 0, 0])).unwrap();`
$DIR/language/diem-vm/mvhashmap/src/unit_tests/mod.rs: `mvtbl.skip(&ap2, 20).unwrap();`
$DIR/language/diem-vm/mvhashmap/src/unit_tests/mod.rs: `mvtbl.write(&ap2, 10, Some(vec![0, 0, 0])).unwrap();`
$DIR/language/diem-vm/mvhashmap/src/unit_tests/mod.rs: `.read(&ap1, 5)`
$DIR/language/diem-vm/mvhashmap/src/unit_tests/mod.rs: `.read(&ap1, 10)`
$DIR/language/diem-vm/mvhashmap/src/unit_tests/mod.rs: `.read(&ap1, 15)`
$DIR/language/diem-vm/mvhashmap/src/unit_tests/mod.rs: `.write(&ap1, 10, Some(vec![0, 0, 0]))`
$DIR/language/diem-vm/mvhashmap/src/unit_tests/mod.rs: `.read(&ap1, 15)`
$DIR/language/diem-vm/mvhashmap/src/unit_tests/mod.rs: `.skip(&ap2, 20)`
$DIR/language/diem-vm/mvhashmap/src/unit_tests/mod.rs: `.write(&ap2, 10, Some(vec![0, 0, 0]))`
$DIR/language/diem-vm/mvhashmap/src/unit_tests/mod.rs: `.read(&ap2, 25)`
$DIR/language/diem-vm/parallel-executor/src/unit_tests/mod.rs: `.execute_transactions_parallel((), transactions)`
$DIR/language/diem-vm/parallel-executor/src/unit_tests/mod.rs: `.map(|_| random::<[u8; 32]>())`
$DIR/language/diem-vm/parallel-executor/src/unit_tests/mod.rs: `.collect()`
$DIR/language/diem-vm/parallel-executor/src/unit_tests/mod.rs: `.map(|_| random::<[u8; 32]>())`
$DIR/language/diem-vm/parallel-executor/src/unit_tests/mod.rs: `.collect()`
$DIR/language/diem-vm/parallel-executor/src/unit_tests/mod.rs: `.map(|key| (*key, random::<u64>()))`
$DIR/language/diem-vm/parallel-executor/src/unit_tests/mod.rs: `.collect::<Vec<_>>()`
$DIR/language/diem-vm/parallel-executor/src/unit_tests/mod.rs: `.map(|_| random::<[u8; 32]>())`
$DIR/language/diem-vm/parallel-executor/src/unit_tests/mod.rs: `.collect()`
$DIR/language/diem-vm/parallel-executor/src/unit_tests/mod.rs: `.map(|_| random::<[u8; 32]>())`
$DIR/language/diem-vm/parallel-executor/src/unit_tests/mod.rs: `.collect()`
$DIR/language/diem-vm/src/diem_vm_impl.rs: `assert_send::<DiemVM>();`
$DIR/language/diem-vm/src/diem_vm_impl.rs: `assert_sync::<DiemVM>();`
$DIR/language/diem-vm/src/diem_vm_impl.rs: `assert_send::<MoveVM>();`
$DIR/language/diem-vm/src/unit_tests/script_to_script_function_tests.rs: `.compiled_bytes()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `executor.set_golden_file(current_function_name!());`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `executor.execute_and_apply(
        blessed
            .transaction()
            .script(encode_create_parent_vasp_account_script(
                account_config::xus_tag(),
                0,
                *vasp_a.address(),
                vasp_a.auth_key_prefix(),
                vec![],
                true,
            ))
            .sequence_number(tc_sequence_number)
            .ttl(ttl)
            .sign(),
    );`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `executor.execute_and_apply(
        blessed
            .transaction()
            .script(encode_create_parent_vasp_account_script(
                account_config::xus_tag(),
                0,
                *vasp_b.address(),
                vasp_b.auth_key_prefix(),
                vec![],
                true,
            ))
            .sequence_number(tc_sequence_number.checked_add(1).unwrap())
            .ttl(ttl)
            .sign(),
    );`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `executor.execute_and_apply(
        vasp_a
            .transaction()
            .script(encode_create_child_vasp_account_script(
                account_config::xus_tag(),
                *vasp_a_child.address(),
                vasp_a_child.auth_key_prefix(),
                true,
                0,
            ))
            .sequence_number(0)
            .ttl(ttl)
            .sign(),
    );`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `executor.execute_and_apply(
        vasp_b
            .transaction()
            .script(encode_create_child_vasp_account_script(
                account_config::xus_tag(),
                *vasp_b_child.address(),
                vasp_b_child.auth_key_prefix(),
                true,
                0,
            ))
            .sequence_number(0)
            .ttl(ttl)
            .sign(),
    );`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `executor.execute_and_apply(
        diem_root
            .transaction()
            .write_set(encode_add_account_limits_admin_script(*vasp_a.address()))
            .sequence_number(dr_sequence_number)
            .sign(),
    );`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `executor.execute_and_apply(
        diem_root
            .transaction()
            .write_set(encode_add_account_limits_admin_script(*vasp_b.address()))
            .sequence_number(dr_sequence_number.checked_add(1).unwrap())
            .sign(),
    );`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `executor.execute_and_apply(
        dd.transaction()
            .script(encode_peer_to_peer_with_metadata_script(
                account_config::xus_tag(),
                *vasp_a.address(),
                2 * mint_amount,
                vec![],
                vec![],
            ))
            .sequence_number(dd_sequence_number)
            .ttl(ttl)
            .sign(),
    );`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `executor.execute_and_apply(
        dd.transaction()
            .script(encode_peer_to_peer_with_metadata_script(
                account_config::xus_tag(),
                *vasp_b.address(),
                2 * mint_amount,
                vec![],
                vec![],
            ))
            .sequence_number(dd_sequence_number.checked_add(1).unwrap())
            .ttl(ttl)
            .sign(),
    );`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `executor.execute_and_apply(
        blessed
            .transaction()
            .script(encode_update_account_limit_window_info_script(
                *vasp_a.address(),
                0,
                *vasp_a.address(),
            ))
            .sequence_number(tc_sequence_number.checked_add(2).unwrap())
            .ttl(ttl)
            .sign(),
    );`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `executor.execute_and_apply(
        blessed
            .transaction()
            .script(encode_update_account_limit_definition_script(
                *vasp_a.address(),
                mint_amount,
                0,
                0,
                0,
            ))
            .sequence_number(tc_sequence_number.checked_add(3).unwrap())
            .ttl(ttl)
            .sign(),
    );`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `executor.execute_and_apply(
        vasp_a
            .transaction()
            .script(encode_peer_to_peer_with_metadata_script(
                account_config::xus_tag(),
                *vasp_a_child.address(),
                mint_amount + 1,
                vec![],
                vec![],
            ))
            .sequence_number(1)
            .ttl(ttl)
            .sign(),
    );`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `executor.execute_and_apply(
        vasp_a_child
            .transaction()
            .script(encode_peer_to_peer_with_metadata_script(
                account_config::xus_tag(),
                *vasp_b_child.address(),
                mint_amount + 1,
                vec![],
                vec![],
            ))
            .sequence_number(0)
            .ttl(ttl)
            .sign(),
    );`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `executor.execute_and_apply(
        vasp_b_child
            .transaction()
            .script(encode_peer_to_peer_with_metadata_script(
                account_config::xus_tag(),
                *vasp_a_child.address(),
                mint_amount,
                vec![],
                vec![],
            ))
            .sequence_number(0)
            .ttl(ttl)
            .sign(),
    );`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `executor.set_block_time(prev_block_time + window_micros);`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `executor.new_block();`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `executor.execute_and_apply(
        blessed
            .transaction()
            .script(encode_update_account_limit_definition_script(
                *vasp_a.address(),
                std::u64::MAX, // unlimit inflow
                1000,          // set outflow to 1000
                0,
                0,
            ))
            .sequence_number(tc_sequence_number.checked_add(4).unwrap())
            .ttl(ttl)
            .sign(),
    );`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `executor.execute_and_apply(
        vasp_a
            .transaction()
            .script(encode_peer_to_peer_with_metadata_script(
                account_config::xus_tag(),
                *vasp_a_child.address(),
                1001,
                vec![],
                vec![],
            ))
            .sequence_number(2)
            .ttl(ttl)
            .sign(),
    );`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `executor.execute_and_apply(
        vasp_a_child
            .transaction()
            .script(encode_peer_to_peer_with_metadata_script(
                account_config::xus_tag(),
                *vasp_b_child.address(),
                1000,
                vec![],
                vec![],
            ))
            .sequence_number(1)
            .ttl(ttl)
            .sign(),
    );`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `executor.set_block_time(prev_block_time + window_micros);`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `executor.new_block();`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `executor.execute_and_apply(
            blessed
                .transaction()
                .script(encode_update_account_limit_definition_script(
                    *vasp_a.address(),
                    0,
                    std::u64::MAX, // unlimit outflow
                    a_balance,     // set max holding to the current balance of A
                    0,
                ))
                .sequence_number(tc_sequence_number.checked_add(5).unwrap())
                .ttl(ttl)
                .sign(),
        );`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `executor.execute_and_apply(
            blessed
                .transaction()
                .script(encode_update_account_limit_window_info_script(
                    *vasp_a.address(),
                    a_balance,
                    *vasp_a.address(),
                ))
                .sequence_number(tc_sequence_number.checked_add(6).unwrap())
                .ttl(ttl)
                .sign(),
        );`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `executor.execute_and_apply(
        vasp_a
            .transaction()
            .script(encode_peer_to_peer_with_metadata_script(
                account_config::xus_tag(),
                *vasp_b_child.address(),
                10,
                vec![],
                vec![],
            ))
            .sequence_number(3)
            .ttl(ttl)
            .sign(),
    );`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `executor.execute_and_apply(
        vasp_b
            .transaction()
            .script(encode_peer_to_peer_with_metadata_script(
                account_config::xus_tag(),
                *vasp_a_child.address(),
                10,
                vec![],
                vec![],
            ))
            .sequence_number(1)
            .ttl(ttl)
            .sign(),
    );`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `executor.execute_and_apply(
        vasp_a_child
            .transaction()
            .script(encode_peer_to_peer_with_metadata_script(
                account_config::xus_tag(),
                *vasp_a.address(),
                1100,
                vec![],
                vec![],
            ))
            .sequence_number(2)
            .ttl(ttl)
            .sign(),
    );`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `executor.set_block_time(prev_block_time + window_micros);`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `executor.new_block();`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.collect()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.into_script_blob("file_name", code)`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.collect()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.into_script_blob("file_name", code)`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.collect()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.into_script_blob("file_name", code)`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.set_golden_file(current_function_name!())`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.create_raw_account()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.create_raw_account()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.create_raw_account()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.create_raw_account()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.execute_and_apply(
        blessed
            .transaction()
            .script(encode_create_parent_vasp_account_script(
                account_config::xus_tag(),
                0,
                *vasp_a.address(),
                vasp_a.auth_key_prefix(),
                vec![],
                true,
            ))
            .sequence_number(tc_sequence_number)
            .ttl(ttl)
            .sign(),
    )`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.transaction()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.script(encode_create_parent_vasp_account_script(
                account_config::xus_tag(),
                0,
                *vasp_a.address(),
                vasp_a.auth_key_prefix(),
                vec![],
                true,
            ))`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.address()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.auth_key_prefix()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.sequence_number(tc_sequence_number)`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.ttl(ttl)`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.sign()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.execute_and_apply(
        blessed
            .transaction()
            .script(encode_create_parent_vasp_account_script(
                account_config::xus_tag(),
                0,
                *vasp_b.address(),
                vasp_b.auth_key_prefix(),
                vec![],
                true,
            ))
            .sequence_number(tc_sequence_number.checked_add(1).unwrap())
            .ttl(ttl)
            .sign(),
    )`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.transaction()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.script(encode_create_parent_vasp_account_script(
                account_config::xus_tag(),
                0,
                *vasp_b.address(),
                vasp_b.auth_key_prefix(),
                vec![],
                true,
            ))`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.address()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.auth_key_prefix()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.sequence_number(tc_sequence_number.checked_add(1).unwrap())`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.checked_add(1)`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.ttl(ttl)`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.sign()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.execute_and_apply(
        vasp_a
            .transaction()
            .script(encode_create_child_vasp_account_script(
                account_config::xus_tag(),
                *vasp_a_child.address(),
                vasp_a_child.auth_key_prefix(),
                true,
                0,
            ))
            .sequence_number(0)
            .ttl(ttl)
            .sign(),
    )`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.transaction()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.script(encode_create_child_vasp_account_script(
                account_config::xus_tag(),
                *vasp_a_child.address(),
                vasp_a_child.auth_key_prefix(),
                true,
                0,
            ))`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.address()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.auth_key_prefix()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.sequence_number(0)`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.ttl(ttl)`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.sign()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.execute_and_apply(
        vasp_b
            .transaction()
            .script(encode_create_child_vasp_account_script(
                account_config::xus_tag(),
                *vasp_b_child.address(),
                vasp_b_child.auth_key_prefix(),
                true,
                0,
            ))
            .sequence_number(0)
            .ttl(ttl)
            .sign(),
    )`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.transaction()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.script(encode_create_child_vasp_account_script(
                account_config::xus_tag(),
                *vasp_b_child.address(),
                vasp_b_child.auth_key_prefix(),
                true,
                0,
            ))`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.address()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.auth_key_prefix()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.sequence_number(0)`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.ttl(ttl)`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.sign()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.execute_and_apply(
        diem_root
            .transaction()
            .write_set(encode_add_account_limits_admin_script(*vasp_a.address()))
            .sequence_number(dr_sequence_number)
            .sign(),
    )`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.transaction()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.write_set(encode_add_account_limits_admin_script(*vasp_a.address()))`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.address()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.sequence_number(dr_sequence_number)`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.sign()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.execute_and_apply(
        diem_root
            .transaction()
            .write_set(encode_add_account_limits_admin_script(*vasp_b.address()))
            .sequence_number(dr_sequence_number.checked_add(1).unwrap())
            .sign(),
    )`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.transaction()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.write_set(encode_add_account_limits_admin_script(*vasp_b.address()))`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.address()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.sequence_number(dr_sequence_number.checked_add(1).unwrap())`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.checked_add(1)`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.sign()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.execute_and_apply(
        dd.transaction()
            .script(encode_peer_to_peer_with_metadata_script(
                account_config::xus_tag(),
                *vasp_a.address(),
                2 * mint_amount,
                vec![],
                vec![],
            ))
            .sequence_number(dd_sequence_number)
            .ttl(ttl)
            .sign(),
    )`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.transaction()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.script(encode_peer_to_peer_with_metadata_script(
                account_config::xus_tag(),
                *vasp_a.address(),
                2 * mint_amount,
                vec![],
                vec![],
            ))`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.address()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.sequence_number(dd_sequence_number)`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.ttl(ttl)`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.sign()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.execute_and_apply(
        dd.transaction()
            .script(encode_peer_to_peer_with_metadata_script(
                account_config::xus_tag(),
                *vasp_b.address(),
                2 * mint_amount,
                vec![],
                vec![],
            ))
            .sequence_number(dd_sequence_number.checked_add(1).unwrap())
            .ttl(ttl)
            .sign(),
    )`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.transaction()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.script(encode_peer_to_peer_with_metadata_script(
                account_config::xus_tag(),
                *vasp_b.address(),
                2 * mint_amount,
                vec![],
                vec![],
            ))`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.address()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.sequence_number(dd_sequence_number.checked_add(1).unwrap())`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.checked_add(1)`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.ttl(ttl)`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.sign()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.execute_and_apply(
        blessed
            .transaction()
            .script(encode_update_account_limit_window_info_script(
                *vasp_a.address(),
                0,
                *vasp_a.address(),
            ))
            .sequence_number(tc_sequence_number.checked_add(2).unwrap())
            .ttl(ttl)
            .sign(),
    )`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.transaction()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.script(encode_update_account_limit_window_info_script(
                *vasp_a.address(),
                0,
                *vasp_a.address(),
            ))`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.address()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.address()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.sequence_number(tc_sequence_number.checked_add(2).unwrap())`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.checked_add(2)`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.ttl(ttl)`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.sign()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.execute_and_apply(
        blessed
            .transaction()
            .script(encode_update_account_limit_definition_script(
                *vasp_a.address(),
                mint_amount,
                0,
                0,
                0,
            ))
            .sequence_number(tc_sequence_number.checked_add(3).unwrap())
            .ttl(ttl)
            .sign(),
    )`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.transaction()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.script(encode_update_account_limit_definition_script(
                *vasp_a.address(),
                mint_amount,
                0,
                0,
                0,
            ))`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.address()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.sequence_number(tc_sequence_number.checked_add(3).unwrap())`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.checked_add(3)`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.ttl(ttl)`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.sign()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.execute_transaction(
            vasp_b
                .transaction()
                .script(encode_peer_to_peer_with_metadata_script(
                    account_config::xus_tag(),
                    *vasp_a.address(),
                    mint_amount + 1,
                    vec![],
                    vec![],
                ))
                .sequence_number(1)
                .ttl(ttl)
                .sign(),
        )`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.transaction()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.script(encode_peer_to_peer_with_metadata_script(
                    account_config::xus_tag(),
                    *vasp_a.address(),
                    mint_amount + 1,
                    vec![],
                    vec![],
                ))`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.address()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.sequence_number(1)`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.ttl(ttl)`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.sign()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.execute_transaction(
            vasp_b
                .transaction()
                .script(encode_peer_to_peer_with_metadata_script(
                    account_config::xus_tag(),
                    *vasp_a_child.address(),
                    mint_amount + 1,
                    vec![],
                    vec![],
                ))
                .sequence_number(1)
                .ttl(ttl)
                .sign(),
        )`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.transaction()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.script(encode_peer_to_peer_with_metadata_script(
                    account_config::xus_tag(),
                    *vasp_a_child.address(),
                    mint_amount + 1,
                    vec![],
                    vec![],
                ))`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.address()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.sequence_number(1)`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.ttl(ttl)`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.sign()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.execute_and_apply(
        vasp_a
            .transaction()
            .script(encode_peer_to_peer_with_metadata_script(
                account_config::xus_tag(),
                *vasp_a_child.address(),
                mint_amount + 1,
                vec![],
                vec![],
            ))
            .sequence_number(1)
            .ttl(ttl)
            .sign(),
    )`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.transaction()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.script(encode_peer_to_peer_with_metadata_script(
                account_config::xus_tag(),
                *vasp_a_child.address(),
                mint_amount + 1,
                vec![],
                vec![],
            ))`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.address()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.sequence_number(1)`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.ttl(ttl)`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.sign()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.execute_and_apply(
        vasp_a_child
            .transaction()
            .script(encode_peer_to_peer_with_metadata_script(
                account_config::xus_tag(),
                *vasp_b_child.address(),
                mint_amount + 1,
                vec![],
                vec![],
            ))
            .sequence_number(0)
            .ttl(ttl)
            .sign(),
    )`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.transaction()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.script(encode_peer_to_peer_with_metadata_script(
                account_config::xus_tag(),
                *vasp_b_child.address(),
                mint_amount + 1,
                vec![],
                vec![],
            ))`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.address()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.sequence_number(0)`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.ttl(ttl)`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.sign()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.execute_and_apply(
        vasp_b_child
            .transaction()
            .script(encode_peer_to_peer_with_metadata_script(
                account_config::xus_tag(),
                *vasp_a_child.address(),
                mint_amount,
                vec![],
                vec![],
            ))
            .sequence_number(0)
            .ttl(ttl)
            .sign(),
    )`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.transaction()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.script(encode_peer_to_peer_with_metadata_script(
                account_config::xus_tag(),
                *vasp_a_child.address(),
                mint_amount,
                vec![],
                vec![],
            ))`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.address()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.sequence_number(0)`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.ttl(ttl)`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.sign()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.execute_transaction(
            dd.transaction()
                .script(encode_peer_to_peer_with_metadata_script(
                    account_config::xus_tag(),
                    *vasp_a_child.address(),
                    1,
                    vec![],
                    vec![],
                ))
                .sequence_number(dd_sequence_number.checked_add(2).unwrap())
                .ttl(ttl)
                .sign(),
        )`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.transaction()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.script(encode_peer_to_peer_with_metadata_script(
                    account_config::xus_tag(),
                    *vasp_a_child.address(),
                    1,
                    vec![],
                    vec![],
                ))`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.address()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.sequence_number(dd_sequence_number.checked_add(2).unwrap())`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.checked_add(2)`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.ttl(ttl)`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.sign()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.get_block_time()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.set_block_time(prev_block_time + window_micros)`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.new_block()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.execute_transaction(
            dd.transaction()
                .script(encode_peer_to_peer_with_metadata_script(
                    account_config::xus_tag(),
                    *vasp_a_child.address(),
                    1,
                    vec![],
                    vec![],
                ))
                .sequence_number(dd_sequence_number.checked_add(2).unwrap())
                .ttl(ttl)
                .sign(),
        )`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.transaction()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.script(encode_peer_to_peer_with_metadata_script(
                    account_config::xus_tag(),
                    *vasp_a_child.address(),
                    1,
                    vec![],
                    vec![],
                ))`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.address()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.sequence_number(dd_sequence_number.checked_add(2).unwrap())`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.checked_add(2)`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.ttl(ttl)`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.sign()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.execute_and_apply(
        blessed
            .transaction()
            .script(encode_update_account_limit_definition_script(
                *vasp_a.address(),
                std::u64::MAX, // unlimit inflow
                1000,          // set outflow to 1000
                0,
                0,
            ))
            .sequence_number(tc_sequence_number.checked_add(4).unwrap())
            .ttl(ttl)
            .sign(),
    )`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.transaction()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.script(encode_update_account_limit_definition_script(
                *vasp_a.address(),
                std::u64::MAX, // unlimit inflow
                1000,          // set outflow to 1000
                0,
                0,
            ))`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.address()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.sequence_number(tc_sequence_number.checked_add(4).unwrap())`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.checked_add(4)`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.ttl(ttl)`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.sign()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.execute_and_apply(
        vasp_a
            .transaction()
            .script(encode_peer_to_peer_with_metadata_script(
                account_config::xus_tag(),
                *vasp_a_child.address(),
                1001,
                vec![],
                vec![],
            ))
            .sequence_number(2)
            .ttl(ttl)
            .sign(),
    )`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.transaction()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.script(encode_peer_to_peer_with_metadata_script(
                account_config::xus_tag(),
                *vasp_a_child.address(),
                1001,
                vec![],
                vec![],
            ))`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.address()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.sequence_number(2)`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.ttl(ttl)`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.sign()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.execute_and_apply(
        vasp_a_child
            .transaction()
            .script(encode_peer_to_peer_with_metadata_script(
                account_config::xus_tag(),
                *vasp_b_child.address(),
                1000,
                vec![],
                vec![],
            ))
            .sequence_number(1)
            .ttl(ttl)
            .sign(),
    )`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.transaction()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.script(encode_peer_to_peer_with_metadata_script(
                account_config::xus_tag(),
                *vasp_b_child.address(),
                1000,
                vec![],
                vec![],
            ))`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.address()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.sequence_number(1)`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.ttl(ttl)`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.sign()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.execute_transaction(
            vasp_a
                .transaction()
                .script(encode_peer_to_peer_with_metadata_script(
                    account_config::xus_tag(),
                    *vasp_b.address(),
                    1,
                    vec![],
                    vec![],
                ))
                .sequence_number(3)
                .ttl(ttl)
                .sign(),
        )`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.transaction()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.script(encode_peer_to_peer_with_metadata_script(
                    account_config::xus_tag(),
                    *vasp_b.address(),
                    1,
                    vec![],
                    vec![],
                ))`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.address()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.sequence_number(3)`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.ttl(ttl)`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.sign()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.execute_transaction(
            vasp_a_child
                .transaction()
                .script(encode_peer_to_peer_with_metadata_script(
                    account_config::xus_tag(),
                    *vasp_b_child.address(),
                    1,
                    vec![],
                    vec![],
                ))
                .sequence_number(2)
                .ttl(ttl)
                .sign(),
        )`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.transaction()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.script(encode_peer_to_peer_with_metadata_script(
                    account_config::xus_tag(),
                    *vasp_b_child.address(),
                    1,
                    vec![],
                    vec![],
                ))`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.address()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.sequence_number(2)`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.ttl(ttl)`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.sign()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.execute_transaction(
            vasp_a_child
                .transaction()
                .script(encode_peer_to_peer_with_metadata_script(
                    account_config::xus_tag(),
                    *dd.address(),
                    1,
                    vec![],
                    vec![],
                ))
                .sequence_number(2)
                .ttl(ttl)
                .sign(),
        )`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.transaction()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.script(encode_peer_to_peer_with_metadata_script(
                    account_config::xus_tag(),
                    *dd.address(),
                    1,
                    vec![],
                    vec![],
                ))`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.address()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.sequence_number(2)`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.ttl(ttl)`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.sign()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.get_block_time()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.set_block_time(prev_block_time + window_micros)`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.new_block()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.execute_transaction(
            vasp_a_child
                .transaction()
                .script(encode_peer_to_peer_with_metadata_script(
                    account_config::xus_tag(),
                    *dd.address(),
                    1,
                    vec![],
                    vec![],
                ))
                .sequence_number(2)
                .ttl(window_micros)
                .ttl(ttl)
                .sign(),
        )`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.transaction()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.script(encode_peer_to_peer_with_metadata_script(
                    account_config::xus_tag(),
                    *dd.address(),
                    1,
                    vec![],
                    vec![],
                ))`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.address()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.sequence_number(2)`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.ttl(window_micros)`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.ttl(ttl)`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.sign()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.read_balance_resource(&vasp_a, account::xus_currency_code())`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.coin()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.read_balance_resource(&vasp_a_child, account::xus_currency_code())`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.coin()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.execute_and_apply(
            blessed
                .transaction()
                .script(encode_update_account_limit_definition_script(
                    *vasp_a.address(),
                    0,
                    std::u64::MAX, // unlimit outflow
                    a_balance,     // set max holding to the current balance of A
                    0,
                ))
                .sequence_number(tc_sequence_number.checked_add(5).unwrap())
                .ttl(ttl)
                .sign(),
        )`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.transaction()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.script(encode_update_account_limit_definition_script(
                    *vasp_a.address(),
                    0,
                    std::u64::MAX, // unlimit outflow
                    a_balance,     // set max holding to the current balance of A
                    0,
                ))`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.address()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.sequence_number(tc_sequence_number.checked_add(5).unwrap())`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.checked_add(5)`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.ttl(ttl)`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.sign()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.execute_and_apply(
            blessed
                .transaction()
                .script(encode_update_account_limit_window_info_script(
                    *vasp_a.address(),
                    a_balance,
                    *vasp_a.address(),
                ))
                .sequence_number(tc_sequence_number.checked_add(6).unwrap())
                .ttl(ttl)
                .sign(),
        )`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.transaction()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.script(encode_update_account_limit_window_info_script(
                    *vasp_a.address(),
                    a_balance,
                    *vasp_a.address(),
                ))`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.address()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.address()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.sequence_number(tc_sequence_number.checked_add(6).unwrap())`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.checked_add(6)`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.ttl(ttl)`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.sign()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.execute_transaction(
            vasp_b
                .transaction()
                .script(encode_peer_to_peer_with_metadata_script(
                    account_config::xus_tag(),
                    *vasp_a_child.address(),
                    1,
                    vec![],
                    vec![],
                ))
                .sequence_number(1)
                .ttl(ttl)
                .sign(),
        )`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.transaction()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.script(encode_peer_to_peer_with_metadata_script(
                    account_config::xus_tag(),
                    *vasp_a_child.address(),
                    1,
                    vec![],
                    vec![],
                ))`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.address()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.sequence_number(1)`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.ttl(ttl)`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.sign()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.execute_and_apply(
        vasp_a
            .transaction()
            .script(encode_peer_to_peer_with_metadata_script(
                account_config::xus_tag(),
                *vasp_b_child.address(),
                10,
                vec![],
                vec![],
            ))
            .sequence_number(3)
            .ttl(ttl)
            .sign(),
    )`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.transaction()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.script(encode_peer_to_peer_with_metadata_script(
                account_config::xus_tag(),
                *vasp_b_child.address(),
                10,
                vec![],
                vec![],
            ))`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.address()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.sequence_number(3)`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.ttl(ttl)`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.sign()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.execute_and_apply(
        vasp_b
            .transaction()
            .script(encode_peer_to_peer_with_metadata_script(
                account_config::xus_tag(),
                *vasp_a_child.address(),
                10,
                vec![],
                vec![],
            ))
            .sequence_number(1)
            .ttl(ttl)
            .sign(),
    )`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.transaction()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.script(encode_peer_to_peer_with_metadata_script(
                account_config::xus_tag(),
                *vasp_a_child.address(),
                10,
                vec![],
                vec![],
            ))`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.address()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.sequence_number(1)`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.ttl(ttl)`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.sign()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.execute_transaction(
            vasp_b
                .transaction()
                .script(encode_peer_to_peer_with_metadata_script(
                    account_config::xus_tag(),
                    *vasp_a_child.address(),
                    1,
                    vec![],
                    vec![],
                ))
                .sequence_number(2)
                .ttl(ttl)
                .sign(),
        )`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.transaction()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.script(encode_peer_to_peer_with_metadata_script(
                    account_config::xus_tag(),
                    *vasp_a_child.address(),
                    1,
                    vec![],
                    vec![],
                ))`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.address()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.sequence_number(2)`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.ttl(ttl)`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.sign()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.execute_and_apply(
        vasp_a_child
            .transaction()
            .script(encode_peer_to_peer_with_metadata_script(
                account_config::xus_tag(),
                *vasp_a.address(),
                1100,
                vec![],
                vec![],
            ))
            .sequence_number(2)
            .ttl(ttl)
            .sign(),
    )`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.transaction()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.script(encode_peer_to_peer_with_metadata_script(
                account_config::xus_tag(),
                *vasp_a.address(),
                1100,
                vec![],
                vec![],
            ))`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.address()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.sequence_number(2)`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.ttl(ttl)`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.sign()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.execute_transaction(
            dd.transaction()
                .script(encode_peer_to_peer_with_metadata_script(
                    account_config::xus_tag(),
                    *vasp_a_child.address(),
                    1,
                    vec![],
                    vec![],
                ))
                .sequence_number(dd_sequence_number.checked_add(2).unwrap())
                .ttl(ttl)
                .sign(),
        )`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.transaction()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.script(encode_peer_to_peer_with_metadata_script(
                    account_config::xus_tag(),
                    *vasp_a_child.address(),
                    1,
                    vec![],
                    vec![],
                ))`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.address()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.sequence_number(dd_sequence_number.checked_add(2).unwrap())`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.checked_add(2)`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.ttl(ttl)`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.sign()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.get_block_time()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.set_block_time(prev_block_time + window_micros)`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.new_block()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.execute_transaction(
            dd.transaction()
                .script(encode_peer_to_peer_with_metadata_script(
                    account_config::xus_tag(),
                    *vasp_a_child.address(),
                    1,
                    vec![],
                    vec![],
                ))
                .sequence_number(dd_sequence_number.checked_add(2).unwrap())
                .ttl(ttl)
                .sign(),
        )`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.transaction()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.script(encode_peer_to_peer_with_metadata_script(
                    account_config::xus_tag(),
                    *vasp_a_child.address(),
                    1,
                    vec![],
                    vec![],
                ))`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.address()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.sequence_number(dd_sequence_number.checked_add(2).unwrap())`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.checked_add(2)`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.ttl(ttl)`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.sign()`
$DIR/language/e2e-testsuite/src/tests/admin_script.rs: `executor.set_golden_file(current_function_name!());`
$DIR/language/e2e-testsuite/src/tests/admin_script.rs: `executor.add_account_data(&new_account);`
$DIR/language/e2e-testsuite/src/tests/admin_script.rs: `executor.new_block();`
$DIR/language/e2e-testsuite/src/tests/admin_script.rs: `executor.set_golden_file(current_function_name!());`
$DIR/language/e2e-testsuite/src/tests/admin_script.rs: `executor.add_account_data(&new_account);`
$DIR/language/e2e-testsuite/src/tests/admin_script.rs: `executor.new_block();`
$DIR/language/e2e-testsuite/src/tests/admin_script.rs: `executor.set_golden_file(current_function_name!());`
$DIR/language/e2e-testsuite/src/tests/admin_script.rs: `executor.add_account_data(&new_account);`
$DIR/language/e2e-testsuite/src/tests/admin_script.rs: `executor.new_block();`
$DIR/language/e2e-testsuite/src/tests/admin_script.rs: `.set_golden_file(current_function_name!())`
$DIR/language/e2e-testsuite/src/tests/admin_script.rs: `.create_raw_account_data(100_000, 0)`
$DIR/language/e2e-testsuite/src/tests/admin_script.rs: `.add_account_data(&new_account)`
$DIR/language/e2e-testsuite/src/tests/admin_script.rs: `.public_key()`
$DIR/language/e2e-testsuite/src/tests/admin_script.rs: `.collect()`
$DIR/language/e2e-testsuite/src/tests/admin_script.rs: `.into_script_blob("file_name", code)`
$DIR/language/e2e-testsuite/src/tests/admin_script.rs: `.transaction()`
$DIR/language/e2e-testsuite/src/tests/admin_script.rs: `.write_set(WriteSetPayload::Script {
            script: Script::new(
                script_body,
                vec![],
                vec![TransactionArgument::U8Vector(new_key_hash.clone())],
            ),
            execute_as: *new_account.address(),
        })`
$DIR/language/e2e-testsuite/src/tests/admin_script.rs: `.address()`
$DIR/language/e2e-testsuite/src/tests/admin_script.rs: `.sequence_number(1)`
$DIR/language/e2e-testsuite/src/tests/admin_script.rs: `.sign()`
$DIR/language/e2e-testsuite/src/tests/admin_script.rs: `.new_block()`
$DIR/language/e2e-testsuite/src/tests/admin_script.rs: `.execute_and_apply(txn)`
$DIR/language/e2e-testsuite/src/tests/admin_script.rs: `.read_account_resource(new_account.account())`
$DIR/language/e2e-testsuite/src/tests/admin_script.rs: `.account()`
$DIR/language/e2e-testsuite/src/tests/admin_script.rs: `.set_golden_file(current_function_name!())`
$DIR/language/e2e-testsuite/src/tests/admin_script.rs: `.create_raw_account_data(100_000, 0)`
$DIR/language/e2e-testsuite/src/tests/admin_script.rs: `.add_account_data(&new_account)`
$DIR/language/e2e-testsuite/src/tests/admin_script.rs: `.public_key()`
$DIR/language/e2e-testsuite/src/tests/admin_script.rs: `.collect()`
$DIR/language/e2e-testsuite/src/tests/admin_script.rs: `.into_script_blob("file_name", code)`
$DIR/language/e2e-testsuite/src/tests/admin_script.rs: `.transaction()`
$DIR/language/e2e-testsuite/src/tests/admin_script.rs: `.write_set(WriteSetPayload::Script {
            script: Script::new(
                script_body,
                vec![],
                vec![TransactionArgument::U8Vector(new_key_hash.clone())],
            ),
            execute_as: *new_account.address(),
        })`
$DIR/language/e2e-testsuite/src/tests/admin_script.rs: `.address()`
$DIR/language/e2e-testsuite/src/tests/admin_script.rs: `.sequence_number(1)`
$DIR/language/e2e-testsuite/src/tests/admin_script.rs: `.sign()`
$DIR/language/e2e-testsuite/src/tests/admin_script.rs: `.new_block()`
$DIR/language/e2e-testsuite/src/tests/admin_script.rs: `.execute_and_apply(txn)`
$DIR/language/e2e-testsuite/src/tests/admin_script.rs: `.read_account_resource(new_account.account())`
$DIR/language/e2e-testsuite/src/tests/admin_script.rs: `.account()`
$DIR/language/e2e-testsuite/src/tests/admin_script.rs: `.set_golden_file(current_function_name!())`
$DIR/language/e2e-testsuite/src/tests/admin_script.rs: `.create_raw_account_data(100_000, 0)`
$DIR/language/e2e-testsuite/src/tests/admin_script.rs: `.add_account_data(&new_account)`
$DIR/language/e2e-testsuite/src/tests/admin_script.rs: `.public_key()`
$DIR/language/e2e-testsuite/src/tests/admin_script.rs: `.collect()`
$DIR/language/e2e-testsuite/src/tests/admin_script.rs: `.into_script_blob("file_name", code)`
$DIR/language/e2e-testsuite/src/tests/admin_script.rs: `.transaction()`
$DIR/language/e2e-testsuite/src/tests/admin_script.rs: `.write_set(WriteSetPayload::Script {
            script: Script::new(
                script_body,
                vec![],
                vec![TransactionArgument::U8Vector(new_key_hash)],
            ),
            execute_as: *new_account.address(),
        })`
$DIR/language/e2e-testsuite/src/tests/admin_script.rs: `.address()`
$DIR/language/e2e-testsuite/src/tests/admin_script.rs: `.sequence_number(1)`
$DIR/language/e2e-testsuite/src/tests/admin_script.rs: `.sign()`
$DIR/language/e2e-testsuite/src/tests/admin_script.rs: `.new_block()`
$DIR/language/e2e-testsuite/src/tests/admin_script.rs: `.execute_transaction(txn)`
$DIR/language/e2e-testsuite/src/tests/create_account.rs: `executor.set_golden_file(current_function_name!());`
$DIR/language/e2e-testsuite/src/tests/create_account.rs: `executor.apply_write_set(output.write_set());`
$DIR/language/e2e-testsuite/src/tests/create_account.rs: `.set_golden_file(current_function_name!())`
$DIR/language/e2e-testsuite/src/tests/create_account.rs: `.create_raw_account()`
$DIR/language/e2e-testsuite/src/tests/create_account.rs: `.execute_transaction(txn)`
$DIR/language/e2e-testsuite/src/tests/create_account.rs: `.apply_write_set(output.write_set())`
$DIR/language/e2e-testsuite/src/tests/create_account.rs: `.write_set()`
$DIR/language/e2e-testsuite/src/tests/create_account.rs: `.read_account_resource(&sender)`
$DIR/language/e2e-testsuite/src/tests/create_account.rs: `.read_balance_resource(&new_account, account::xus_currency_code())`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `executor.add_account_data(&sender);`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `executor.set_golden_file(current_function_name!());`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `executor.add_account_data(&sender);`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `executor.set_golden_file(current_function_name!());`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `executor.execute_and_apply(txn);`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `executor.execute_and_apply(txn.clone());`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `executor.add_account_data(&sender);`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `executor.set_golden_file(current_function_name!());`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `executor.execute_and_apply(txn);`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `executor.execute_and_apply(txn.clone());`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `executor.add_account_data(&sender);`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `executor.set_golden_file(current_function_name!());`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `executor.execute_and_apply(txn);`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `txns.push(txn);`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `executor.add_account_data(&sender);`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `executor.set_golden_file(current_function_name!());`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `executor.execute_and_apply(txn);`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `executor.execute_and_apply(txn);`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `executor.execute_and_apply(txn);`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `txns.push(txn);`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `txns.push(txn);`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `.create_raw_account_data(1_000_010, 0)`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `.add_account_data(&sender)`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `.set_golden_file(current_function_name!())`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `.account()`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `.transaction()`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `.payload(stdlib::encode_opt_in_to_crsn_script_function(K))`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `.sequence_number(0)`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `.sign()`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `.account()`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `.transaction()`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `.payload(stdlib::encode_peer_to_peer_with_metadata_script_function(
            account_config::xus_tag(),
            *sender.address(),
            100,
            vec![],
            vec![],
        ))`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `.address()`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `.sequence_number(1)`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `.sign()`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `.create_raw_account_data(1_000_010, 0)`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `.add_account_data(&sender)`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `.set_golden_file(current_function_name!())`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `.account()`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `.transaction()`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `.payload(stdlib::encode_opt_in_to_crsn_script_function(K))`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `.sequence_number(0)`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `.sign()`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `.execute_and_apply(txn)`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `.account()`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `.transaction()`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `.payload(stdlib::encode_peer_to_peer_with_metadata_script_function(
            account_config::xus_tag(),
            *sender.address(),
            100,
            vec![],
            vec![],
        ))`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `.address()`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `.sequence_number(1)`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `.sign()`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `.execute_and_apply(txn.clone())`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `.execute_transaction(txn)`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `.create_raw_account_data(1_000_010, 0)`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `.add_account_data(&sender)`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `.set_golden_file(current_function_name!())`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `.account()`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `.transaction()`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `.payload(stdlib::encode_opt_in_to_crsn_script_function(K))`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `.sequence_number(0)`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `.sign()`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `.execute_and_apply(txn)`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `.account()`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `.transaction()`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `.payload(stdlib::encode_peer_to_peer_with_metadata_script_function(
            account_config::xus_tag(),
            *sender.address(),
            100,
            vec![],
            vec![],
        ))`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `.address()`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `.sequence_number(10)`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `.sign()`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `.execute_and_apply(txn.clone())`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `.execute_transaction(txn)`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `.create_raw_account_data(1_000_010, 0)`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `.add_account_data(&sender)`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `.set_golden_file(current_function_name!())`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `.account()`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `.transaction()`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `.payload(stdlib::encode_opt_in_to_crsn_script_function(K))`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `.sequence_number(0)`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `.sign()`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `.execute_and_apply(txn)`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `.account()`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `.transaction()`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `.payload(stdlib::encode_peer_to_peer_with_metadata_script_function(
                account_config::xus_tag(),
                *sender.address(),
                100,
                vec![],
                vec![],
            ))`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `.address()`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `.sequence_number(K - i)`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `.sign()`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `.push(txn)`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `.execute_block_and_keep_vm_status(txns)`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `.create_raw_account_data(1_000_010, 0)`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `.add_account_data(&sender)`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `.set_golden_file(current_function_name!())`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `.account()`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `.transaction()`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `.payload(stdlib::encode_opt_in_to_crsn_script_function(K))`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `.sequence_number(0)`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `.sign()`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `.execute_and_apply(txn)`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `.account()`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `.transaction()`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `.payload(stdlib::encode_peer_to_peer_with_metadata_script_function(
                account_config::xus_tag(),
                *sender.address(),
                100,
                vec![],
                vec![],
            ))`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `.address()`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `.sequence_number(i)`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `.sign()`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `.execute_and_apply(txn)`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `.account()`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `.transaction()`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `.payload(stdlib::encode_peer_to_peer_with_metadata_script_function(
            account_config::xus_tag(),
            *sender.address(),
            100,
            vec![],
            vec![],
        ))`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `.address()`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `.sequence_number(K + 1)`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `.sign()`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `.execute_transaction(txn)`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `.account()`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `.transaction()`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `.payload(stdlib::encode_force_expire_script_function(2 * K))`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `.sequence_number(2)`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `.sign()`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `.execute_and_apply(txn)`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `.account()`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `.transaction()`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `.payload(stdlib::encode_peer_to_peer_with_metadata_script_function(
                account_config::xus_tag(),
                *sender.address(),
                100,
                vec![],
                vec![],
            ))`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `.address()`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `.sequence_number(i)`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `.sign()`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `.push(txn)`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `.execute_block_and_keep_vm_status(txns)`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `.account()`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `.transaction()`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `.payload(stdlib::encode_peer_to_peer_with_metadata_script_function(
                account_config::xus_tag(),
                *sender.address(),
                100,
                vec![],
                vec![],
            ))`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `.address()`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `.sequence_number(3 * K - i)`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `.sign()`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `.push(txn)`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `.execute_block_and_keep_vm_status(txns)`
$DIR/language/e2e-testsuite/src/tests/data_store.rs: `executor.set_golden_file(current_function_name!());`
$DIR/language/e2e-testsuite/src/tests/data_store.rs: `executor.add_account_data(&sender);`
$DIR/language/e2e-testsuite/src/tests/data_store.rs: `executor.execute_and_apply(txn);`
$DIR/language/e2e-testsuite/src/tests/data_store.rs: `executor.apply_write_set(output.write_set());`
$DIR/language/e2e-testsuite/src/tests/data_store.rs: `executor.execute_and_apply(add_txn);`
$DIR/language/e2e-testsuite/src/tests/data_store.rs: `executor.execute_and_apply(borrow_txn);`
$DIR/language/e2e-testsuite/src/tests/data_store.rs: `executor.execute_and_apply(rem_txn);`
$DIR/language/e2e-testsuite/src/tests/data_store.rs: `executor.apply_write_set(output.write_set());`
$DIR/language/e2e-testsuite/src/tests/data_store.rs: `executor.apply_write_set(output.write_set());`
$DIR/language/e2e-testsuite/src/tests/data_store.rs: `executor.execute_and_apply(add_txn);`
$DIR/language/e2e-testsuite/src/tests/data_store.rs: `executor.apply_write_set(out.write_set());`
$DIR/language/e2e-testsuite/src/tests/data_store.rs: `executor.set_golden_file(current_function_name!());`
$DIR/language/e2e-testsuite/src/tests/data_store.rs: `executor.add_account_data(&sender);`
$DIR/language/e2e-testsuite/src/tests/data_store.rs: `executor.execute_and_apply(txn);`
$DIR/language/e2e-testsuite/src/tests/data_store.rs: `executor.apply_write_set(output.write_set());`
$DIR/language/e2e-testsuite/src/tests/data_store.rs: `executor.execute_and_apply(add_txn);`
$DIR/language/e2e-testsuite/src/tests/data_store.rs: `executor.execute_and_apply(borrow_txn);`
$DIR/language/e2e-testsuite/src/tests/data_store.rs: `executor.apply_write_set(out.write_set());`
$DIR/language/e2e-testsuite/src/tests/data_store.rs: `executor.set_golden_file(current_function_name!());`
$DIR/language/e2e-testsuite/src/tests/data_store.rs: `executor.add_account_data(&sender);`
$DIR/language/e2e-testsuite/src/tests/data_store.rs: `executor.execute_and_apply(txn);`
$DIR/language/e2e-testsuite/src/tests/data_store.rs: `executor.execute_and_apply(add_txn);`
$DIR/language/e2e-testsuite/src/tests/data_store.rs: `executor.execute_and_apply(borrow_txn);`
$DIR/language/e2e-testsuite/src/tests/data_store.rs: `executor.apply_write_set(out.write_set());`
$DIR/language/e2e-testsuite/src/tests/data_store.rs: `module
        .serialize(&mut module_blob)
        .expect("Module must serialize");`
$DIR/language/e2e-testsuite/src/tests/data_store.rs: `verify_module(&module).expect("Module must verify");`
$DIR/language/e2e-testsuite/src/tests/data_store.rs: `.set_golden_file(current_function_name!())`
$DIR/language/e2e-testsuite/src/tests/data_store.rs: `.create_raw_account_data(1_000_000, 10)`
$DIR/language/e2e-testsuite/src/tests/data_store.rs: `.add_account_data(&sender)`
$DIR/language/e2e-testsuite/src/tests/data_store.rs: `.execute_and_apply(txn)`
$DIR/language/e2e-testsuite/src/tests/data_store.rs: `.execute_transaction(rem_txn)`
$DIR/language/e2e-testsuite/src/tests/data_store.rs: `.apply_write_set(output.write_set())`
$DIR/language/e2e-testsuite/src/tests/data_store.rs: `.write_set()`
$DIR/language/e2e-testsuite/src/tests/data_store.rs: `.execute_and_apply(add_txn)`
$DIR/language/e2e-testsuite/src/tests/data_store.rs: `.execute_and_apply(borrow_txn)`
$DIR/language/e2e-testsuite/src/tests/data_store.rs: `.execute_and_apply(rem_txn)`
$DIR/language/e2e-testsuite/src/tests/data_store.rs: `.execute_transaction(rem_txn)`
$DIR/language/e2e-testsuite/src/tests/data_store.rs: `.apply_write_set(output.write_set())`
$DIR/language/e2e-testsuite/src/tests/data_store.rs: `.write_set()`
$DIR/language/e2e-testsuite/src/tests/data_store.rs: `.execute_transaction(borrow_txn)`
$DIR/language/e2e-testsuite/src/tests/data_store.rs: `.apply_write_set(output.write_set())`
$DIR/language/e2e-testsuite/src/tests/data_store.rs: `.write_set()`
$DIR/language/e2e-testsuite/src/tests/data_store.rs: `.execute_and_apply(add_txn)`
$DIR/language/e2e-testsuite/src/tests/data_store.rs: `.execute_transaction_block(txns)`
$DIR/language/e2e-testsuite/src/tests/data_store.rs: `.apply_write_set(out.write_set())`
$DIR/language/e2e-testsuite/src/tests/data_store.rs: `.write_set()`
$DIR/language/e2e-testsuite/src/tests/data_store.rs: `.set_golden_file(current_function_name!())`
$DIR/language/e2e-testsuite/src/tests/data_store.rs: `.create_raw_account_data(1_000_000, 10)`
$DIR/language/e2e-testsuite/src/tests/data_store.rs: `.add_account_data(&sender)`
$DIR/language/e2e-testsuite/src/tests/data_store.rs: `.execute_and_apply(txn)`
$DIR/language/e2e-testsuite/src/tests/data_store.rs: `.execute_transaction(rem_txn)`
$DIR/language/e2e-testsuite/src/tests/data_store.rs: `.apply_write_set(output.write_set())`
$DIR/language/e2e-testsuite/src/tests/data_store.rs: `.write_set()`
$DIR/language/e2e-testsuite/src/tests/data_store.rs: `.execute_and_apply(add_txn)`
$DIR/language/e2e-testsuite/src/tests/data_store.rs: `.execute_and_apply(borrow_txn)`
$DIR/language/e2e-testsuite/src/tests/data_store.rs: `.execute_transaction_block(txns)`
$DIR/language/e2e-testsuite/src/tests/data_store.rs: `.apply_write_set(out.write_set())`
$DIR/language/e2e-testsuite/src/tests/data_store.rs: `.write_set()`
$DIR/language/e2e-testsuite/src/tests/data_store.rs: `.set_golden_file(current_function_name!())`
$DIR/language/e2e-testsuite/src/tests/data_store.rs: `.create_raw_account_data(1_000_000, 10)`
$DIR/language/e2e-testsuite/src/tests/data_store.rs: `.add_account_data(&sender)`
$DIR/language/e2e-testsuite/src/tests/data_store.rs: `.execute_and_apply(txn)`
$DIR/language/e2e-testsuite/src/tests/data_store.rs: `.execute_transaction(rem_txn)`
$DIR/language/e2e-testsuite/src/tests/data_store.rs: `.write_set()`
$DIR/language/e2e-testsuite/src/tests/data_store.rs: `.execute_and_apply(add_txn)`
$DIR/language/e2e-testsuite/src/tests/data_store.rs: `.execute_and_apply(borrow_txn)`
$DIR/language/e2e-testsuite/src/tests/data_store.rs: `.execute_transaction_block(txns)`
$DIR/language/e2e-testsuite/src/tests/data_store.rs: `.apply_write_set(out.write_set())`
$DIR/language/e2e-testsuite/src/tests/data_store.rs: `.write_set()`
$DIR/language/e2e-testsuite/src/tests/data_store.rs: `.execute_transaction(borrow_txn)`
$DIR/language/e2e-testsuite/src/tests/data_store.rs: `.write_set()`
$DIR/language/e2e-testsuite/src/tests/data_store.rs: `.collect()`
$DIR/language/e2e-testsuite/src/tests/data_store.rs: `.into_compiled_module("file_name", module_code.as_str())`
$DIR/language/e2e-testsuite/src/tests/data_store.rs: `.serialize(&mut module_blob)`
$DIR/language/e2e-testsuite/src/tests/data_store.rs: `.account()`
$DIR/language/e2e-testsuite/src/tests/data_store.rs: `.transaction()`
$DIR/language/e2e-testsuite/src/tests/data_store.rs: `.module(Module::new(module_blob))`
$DIR/language/e2e-testsuite/src/tests/data_store.rs: `.sequence_number(seq_num)`
$DIR/language/e2e-testsuite/src/tests/data_store.rs: `.sign()`
$DIR/language/e2e-testsuite/src/tests/data_store.rs: `.account()`
$DIR/language/e2e-testsuite/src/tests/data_store.rs: `.transaction()`
$DIR/language/e2e-testsuite/src/tests/data_store.rs: `.script(module)`
$DIR/language/e2e-testsuite/src/tests/data_store.rs: `.sequence_number(seq_num)`
$DIR/language/e2e-testsuite/src/tests/data_store.rs: `.account()`
$DIR/language/e2e-testsuite/src/tests/data_store.rs: `.transaction()`
$DIR/language/e2e-testsuite/src/tests/data_store.rs: `.script(module)`
$DIR/language/e2e-testsuite/src/tests/data_store.rs: `.sequence_number(seq_num)`
$DIR/language/e2e-testsuite/src/tests/data_store.rs: `.account()`
$DIR/language/e2e-testsuite/src/tests/data_store.rs: `.transaction()`
$DIR/language/e2e-testsuite/src/tests/data_store.rs: `.script(module)`
$DIR/language/e2e-testsuite/src/tests/data_store.rs: `.sequence_number(seq_num)`
$DIR/language/e2e-testsuite/src/tests/execution_strategies.rs: `exec.execute_block(big_block).unwrap();`
$DIR/language/e2e-testsuite/src/tests/execution_strategies.rs: `exec.execute_block(big_block).unwrap();`
$DIR/language/e2e-testsuite/src/tests/execution_strategies.rs: `block1.push(AnnotatedTransaction::Block);`
$DIR/language/e2e-testsuite/src/tests/execution_strategies.rs: `block1.append(&mut block);`
$DIR/language/e2e-testsuite/src/tests/execution_strategies.rs: `block1.push(AnnotatedTransaction::Block);`
$DIR/language/e2e-testsuite/src/tests/execution_strategies.rs: `block1.append(&mut block);`
$DIR/language/e2e-testsuite/src/tests/execution_strategies.rs: `block1.push(AnnotatedTransaction::Block);`
$DIR/language/e2e-testsuite/src/tests/execution_strategies.rs: `block1.append(&mut block);`
$DIR/language/e2e-testsuite/src/tests/execution_strategies.rs: `exec.execute_block(block1).unwrap();`
$DIR/language/e2e-testsuite/src/tests/execution_strategies.rs: `block1.push(AnnotatedTransaction::Block);`
$DIR/language/e2e-testsuite/src/tests/execution_strategies.rs: `block1.append(&mut block);`
$DIR/language/e2e-testsuite/src/tests/execution_strategies.rs: `block1.push(AnnotatedTransaction::Block);`
$DIR/language/e2e-testsuite/src/tests/execution_strategies.rs: `block1.append(&mut block);`
$DIR/language/e2e-testsuite/src/tests/execution_strategies.rs: `block1.push(AnnotatedTransaction::Block);`
$DIR/language/e2e-testsuite/src/tests/execution_strategies.rs: `block1.append(&mut block);`
$DIR/language/e2e-testsuite/src/tests/execution_strategies.rs: `exec.add_executor(GuidedExecutor::new(PartitionedGuidedStrategy));`
$DIR/language/e2e-testsuite/src/tests/execution_strategies.rs: `exec.add_executor(GuidedExecutor::new(UnPartitionedGuidedStrategy));`
$DIR/language/e2e-testsuite/src/tests/execution_strategies.rs: `exec.execute_block(block1).unwrap();`
$DIR/language/e2e-testsuite/src/tests/execution_strategies.rs: `exec.add_executor(RandomExecutor::from_os_rng());`
$DIR/language/e2e-testsuite/src/tests/execution_strategies.rs: `exec.add_executor(RandomExecutor::from_os_rng());`
$DIR/language/e2e-testsuite/src/tests/execution_strategies.rs: `exec.add_executor(RandomExecutor::from_os_rng());`
$DIR/language/e2e-testsuite/src/tests/execution_strategies.rs: `exec.execute_block(block).unwrap();`
$DIR/language/e2e-testsuite/src/tests/execution_strategies.rs: `.map(txn)`
$DIR/language/e2e-testsuite/src/tests/execution_strategies.rs: `.collect()`
$DIR/language/e2e-testsuite/src/tests/execution_strategies.rs: `.execute_block(big_block)`
$DIR/language/e2e-testsuite/src/tests/execution_strategies.rs: `.map(txn)`
$DIR/language/e2e-testsuite/src/tests/execution_strategies.rs: `.collect()`
$DIR/language/e2e-testsuite/src/tests/execution_strategies.rs: `.execute_block(big_block)`
$DIR/language/e2e-testsuite/src/tests/execution_strategies.rs: `.map(|i| AnnotatedTransaction::Txn(Box::new(txn(i))))`
$DIR/language/e2e-testsuite/src/tests/execution_strategies.rs: `.collect()`
$DIR/language/e2e-testsuite/src/tests/execution_strategies.rs: `.push(AnnotatedTransaction::Block)`
$DIR/language/e2e-testsuite/src/tests/execution_strategies.rs: `.map(|i| AnnotatedTransaction::Txn(Box::new(txn(i + 10))))`
$DIR/language/e2e-testsuite/src/tests/execution_strategies.rs: `.collect()`
$DIR/language/e2e-testsuite/src/tests/execution_strategies.rs: `.append(&mut block)`
$DIR/language/e2e-testsuite/src/tests/execution_strategies.rs: `.push(AnnotatedTransaction::Block)`
$DIR/language/e2e-testsuite/src/tests/execution_strategies.rs: `.map(|i| AnnotatedTransaction::Txn(Box::new(txn(i + 15))))`
$DIR/language/e2e-testsuite/src/tests/execution_strategies.rs: `.collect()`
$DIR/language/e2e-testsuite/src/tests/execution_strategies.rs: `.append(&mut block)`
$DIR/language/e2e-testsuite/src/tests/execution_strategies.rs: `.push(AnnotatedTransaction::Block)`
$DIR/language/e2e-testsuite/src/tests/execution_strategies.rs: `.map(|i| AnnotatedTransaction::Txn(Box::new(txn(i + 22))))`
$DIR/language/e2e-testsuite/src/tests/execution_strategies.rs: `.collect()`
$DIR/language/e2e-testsuite/src/tests/execution_strategies.rs: `.append(&mut block)`
$DIR/language/e2e-testsuite/src/tests/execution_strategies.rs: `.execute_block(block1)`
$DIR/language/e2e-testsuite/src/tests/execution_strategies.rs: `.map(|i| AnnotatedTransaction::Txn(Box::new(txn(i))))`
$DIR/language/e2e-testsuite/src/tests/execution_strategies.rs: `.collect()`
$DIR/language/e2e-testsuite/src/tests/execution_strategies.rs: `.push(AnnotatedTransaction::Block)`
$DIR/language/e2e-testsuite/src/tests/execution_strategies.rs: `.map(|i| AnnotatedTransaction::Txn(Box::new(txn(i + 10))))`
$DIR/language/e2e-testsuite/src/tests/execution_strategies.rs: `.collect()`
$DIR/language/e2e-testsuite/src/tests/execution_strategies.rs: `.append(&mut block)`
$DIR/language/e2e-testsuite/src/tests/execution_strategies.rs: `.push(AnnotatedTransaction::Block)`
$DIR/language/e2e-testsuite/src/tests/execution_strategies.rs: `.map(|i| AnnotatedTransaction::Txn(Box::new(txn(i + 15))))`
$DIR/language/e2e-testsuite/src/tests/execution_strategies.rs: `.collect()`
$DIR/language/e2e-testsuite/src/tests/execution_strategies.rs: `.append(&mut block)`
$DIR/language/e2e-testsuite/src/tests/execution_strategies.rs: `.push(AnnotatedTransaction::Block)`
$DIR/language/e2e-testsuite/src/tests/execution_strategies.rs: `.map(|i| AnnotatedTransaction::Txn(Box::new(txn(i + 22))))`
$DIR/language/e2e-testsuite/src/tests/execution_strategies.rs: `.collect()`
$DIR/language/e2e-testsuite/src/tests/execution_strategies.rs: `.append(&mut block)`
$DIR/language/e2e-testsuite/src/tests/execution_strategies.rs: `.add_executor(GuidedExecutor::new(PartitionedGuidedStrategy))`
$DIR/language/e2e-testsuite/src/tests/execution_strategies.rs: `.add_executor(GuidedExecutor::new(UnPartitionedGuidedStrategy))`
$DIR/language/e2e-testsuite/src/tests/execution_strategies.rs: `.execute_block(block1)`
$DIR/language/e2e-testsuite/src/tests/execution_strategies.rs: `.map(txn)`
$DIR/language/e2e-testsuite/src/tests/execution_strategies.rs: `.collect()`
$DIR/language/e2e-testsuite/src/tests/execution_strategies.rs: `.add_executor(RandomExecutor::from_os_rng())`
$DIR/language/e2e-testsuite/src/tests/execution_strategies.rs: `.add_executor(RandomExecutor::from_os_rng())`
$DIR/language/e2e-testsuite/src/tests/execution_strategies.rs: `.add_executor(RandomExecutor::from_os_rng())`
$DIR/language/e2e-testsuite/src/tests/execution_strategies.rs: `.execute_block(block)`
$DIR/language/e2e-testsuite/src/tests/genesis.rs: `.execute_transaction_block(vec![txn])`
$DIR/language/e2e-testsuite/src/tests/genesis.rs: `.create_raw_account_data(1_000_000, 10)`
$DIR/language/e2e-testsuite/src/tests/genesis.rs: `.create_raw_account_data(100_000, 10)`
$DIR/language/e2e-testsuite/src/tests/genesis.rs: `.account()`
$DIR/language/e2e-testsuite/src/tests/genesis.rs: `.account()`
$DIR/language/e2e-testsuite/src/tests/genesis.rs: `.execute_transaction_block(vec![txn, Transaction::UserTransaction(txn2)])`
$DIR/language/e2e-testsuite/src/tests/genesis_initializations.rs: `executor.exec(
        "Roles",
        "grant_diem_root_role",
        vec![],
        serialize_values(&vec![
            MoveValue::Signer(account_config::diem_root_address()),
        ]),
    );`
$DIR/language/e2e-testsuite/src/tests/genesis_initializations.rs: `executor.exec(
        "Diem",
        "initialize",
        vec![],
        serialize_values(&vec![
            MoveValue::Signer(account_config::diem_root_address()),
        ]),
    );`
$DIR/language/e2e-testsuite/src/tests/genesis_initializations.rs: `executor.exec(
        "Roles",
        "grant_diem_root_role",
        vec![],
        serialize_values(&vec![
            MoveValue::Signer(account_config::diem_root_address()),
        ]),
    );`
$DIR/language/e2e-testsuite/src/tests/genesis_initializations.rs: `executor.exec(
        "Roles",
        "grant_treasury_compliance_role",
        vec![],
        serialize_values(&vec![
            MoveValue::Signer(account_config::treasury_compliance_account_address()),
            MoveValue::Signer(account_config::diem_root_address()),
        ]),
    );`
$DIR/language/e2e-testsuite/src/tests/genesis_initializations.rs: `executor.exec(
        "Diem",
        "initialize",
        vec![],
        serialize_values(&vec![
            MoveValue::Signer(account_config::diem_root_address()),
        ]),
    );`
$DIR/language/e2e-testsuite/src/tests/genesis_initializations.rs: `executor.exec(
        "DiemTimestamp",
        "set_time_has_started",
        vec![],
        serialize_values(&vec![
            MoveValue::Signer(account_config::diem_root_address()),
        ]),
    );`
$DIR/language/e2e-testsuite/src/tests/genesis_initializations.rs: `executor.exec(
        "Event",
        "publish_generator",
        vec![],
        serialize_values(&vec![
            MoveValue::Signer(account_config::diem_root_address()),
        ]),
    );`
$DIR/language/e2e-testsuite/src/tests/genesis_initializations.rs: `executor.exec(
        "DiemBlock",
        "initialize_block_metadata",
        vec![],
        serialize_values(&vec![
            MoveValue::Signer(account_config::diem_root_address()),
        ]),
    );`
$DIR/language/e2e-testsuite/src/tests/genesis_initializations.rs: `.try_exec(
        "Diem",
        "initialize",
        vec![],
        serialize_values(&vec![
            MoveValue::Signer(account_config::diem_root_address()),
        ]),
    )`
$DIR/language/e2e-testsuite/src/tests/genesis_initializations.rs: `.exec(
        "Roles",
        "grant_diem_root_role",
        vec![],
        serialize_values(&vec![
            MoveValue::Signer(account_config::diem_root_address()),
        ]),
    )`
$DIR/language/e2e-testsuite/src/tests/genesis_initializations.rs: `.exec(
        "Diem",
        "initialize",
        vec![],
        serialize_values(&vec![
            MoveValue::Signer(account_config::diem_root_address()),
        ]),
    )`
$DIR/language/e2e-testsuite/src/tests/genesis_initializations.rs: `.try_exec(
        "Diem",
        "initialize",
        vec![],
        serialize_values(&vec![
            MoveValue::Signer(account_config::diem_root_address()),
        ]),
    )`
$DIR/language/e2e-testsuite/src/tests/genesis_initializations.rs: `.try_exec(
        "Diem",
        "initialize",
        vec![],
        serialize_values(&vec![
            MoveValue::Signer(account_config::diem_root_address()),
        ]),
    )`
$DIR/language/e2e-testsuite/src/tests/genesis_initializations.rs: `.exec(
        "Roles",
        "grant_diem_root_role",
        vec![],
        serialize_values(&vec![
            MoveValue::Signer(account_config::diem_root_address()),
        ]),
    )`
$DIR/language/e2e-testsuite/src/tests/genesis_initializations.rs: `.exec(
        "Roles",
        "grant_treasury_compliance_role",
        vec![],
        serialize_values(&vec![
            MoveValue::Signer(account_config::treasury_compliance_account_address()),
            MoveValue::Signer(account_config::diem_root_address()),
        ]),
    )`
$DIR/language/e2e-testsuite/src/tests/genesis_initializations.rs: `.try_exec(
        "Diem",
        "initialize",
        vec![],
        serialize_values(&vec![MoveValue::Signer(
            account_config::treasury_compliance_account_address(),
        )]),
    )`
$DIR/language/e2e-testsuite/src/tests/genesis_initializations.rs: `.exec(
        "Diem",
        "initialize",
        vec![],
        serialize_values(&vec![
            MoveValue::Signer(account_config::diem_root_address()),
        ]),
    )`
$DIR/language/e2e-testsuite/src/tests/genesis_initializations.rs: `.try_exec(
        "Diem",
        "initialize",
        vec![],
        serialize_values(&vec![MoveValue::Signer(
            account_config::treasury_compliance_account_address(),
        )]),
    )`
$DIR/language/e2e-testsuite/src/tests/genesis_initializations.rs: `.try_exec(
        "DiemTimestamp",
        "set_time_has_started",
        vec![],
        serialize_values(&vec![MoveValue::Signer(account_address)]),
    )`
$DIR/language/e2e-testsuite/src/tests/genesis_initializations.rs: `.exec(
        "DiemTimestamp",
        "set_time_has_started",
        vec![],
        serialize_values(&vec![
            MoveValue::Signer(account_config::diem_root_address()),
        ]),
    )`
$DIR/language/e2e-testsuite/src/tests/genesis_initializations.rs: `.try_exec(
        "DiemTimestamp",
        "set_time_has_started",
        vec![],
        serialize_values(&vec![
            MoveValue::Signer(account_config::diem_root_address()),
        ]),
    )`
$DIR/language/e2e-testsuite/src/tests/genesis_initializations.rs: `.exec(
        "Event",
        "publish_generator",
        vec![],
        serialize_values(&vec![
            MoveValue::Signer(account_config::diem_root_address()),
        ]),
    )`
$DIR/language/e2e-testsuite/src/tests/genesis_initializations.rs: `.exec(
        "DiemBlock",
        "initialize_block_metadata",
        vec![],
        serialize_values(&vec![
            MoveValue::Signer(account_config::diem_root_address()),
        ]),
    )`
$DIR/language/e2e-testsuite/src/tests/genesis_initializations.rs: `.try_exec(
        "DiemBlock",
        "initialize_block_metadata",
        vec![],
        serialize_values(&vec![
            MoveValue::Signer(account_config::diem_root_address()),
        ]),
    )`
$DIR/language/e2e-testsuite/src/tests/module_publishing.rs: `executor.set_golden_file(current_function_name!());`
$DIR/language/e2e-testsuite/src/tests/module_publishing.rs: `executor.add_account_data(&account1);`
$DIR/language/e2e-testsuite/src/tests/module_publishing.rs: `executor.add_account_data(&account2);`
$DIR/language/e2e-testsuite/src/tests/module_publishing.rs: `executor.set_golden_file(current_function_name!());`
$DIR/language/e2e-testsuite/src/tests/module_publishing.rs: `executor.add_account_data(&sender);`
$DIR/language/e2e-testsuite/src/tests/module_publishing.rs: `executor.set_golden_file(current_function_name!());`
$DIR/language/e2e-testsuite/src/tests/module_publishing.rs: `executor.set_golden_file(current_function_name!());`
$DIR/language/e2e-testsuite/src/tests/module_publishing.rs: `executor.set_golden_file(current_function_name!());`
$DIR/language/e2e-testsuite/src/tests/module_publishing.rs: `executor.set_golden_file(current_function_name!());`
$DIR/language/e2e-testsuite/src/tests/module_publishing.rs: `executor.add_account_data(&sender);`
$DIR/language/e2e-testsuite/src/tests/module_publishing.rs: `executor.set_golden_file(current_function_name!());`
$DIR/language/e2e-testsuite/src/tests/module_publishing.rs: `executor.add_account_data(&sender);`
$DIR/language/e2e-testsuite/src/tests/module_publishing.rs: `.set_golden_file(current_function_name!())`
$DIR/language/e2e-testsuite/src/tests/module_publishing.rs: `.create_raw_account_data(1_000_000, 10)`
$DIR/language/e2e-testsuite/src/tests/module_publishing.rs: `.create_raw_account_data(1_000_000, 10)`
$DIR/language/e2e-testsuite/src/tests/module_publishing.rs: `.add_account_data(&account1)`
$DIR/language/e2e-testsuite/src/tests/module_publishing.rs: `.add_account_data(&account2)`
$DIR/language/e2e-testsuite/src/tests/module_publishing.rs: `.account()`
$DIR/language/e2e-testsuite/src/tests/module_publishing.rs: `.transaction()`
$DIR/language/e2e-testsuite/src/tests/module_publishing.rs: `.module(compiled_module)`
$DIR/language/e2e-testsuite/src/tests/module_publishing.rs: `.sequence_number(10)`
$DIR/language/e2e-testsuite/src/tests/module_publishing.rs: `.gas_unit_price(1)`
$DIR/language/e2e-testsuite/src/tests/module_publishing.rs: `.sign()`
$DIR/language/e2e-testsuite/src/tests/module_publishing.rs: `.execute_transaction(txn)`
$DIR/language/e2e-testsuite/src/tests/module_publishing.rs: `.status()`
$DIR/language/e2e-testsuite/src/tests/module_publishing.rs: `.set_golden_file(current_function_name!())`
$DIR/language/e2e-testsuite/src/tests/module_publishing.rs: `.create_raw_account_data(1_000_000, 10)`
$DIR/language/e2e-testsuite/src/tests/module_publishing.rs: `.add_account_data(&sender)`
$DIR/language/e2e-testsuite/src/tests/module_publishing.rs: `.account()`
$DIR/language/e2e-testsuite/src/tests/module_publishing.rs: `.transaction()`
$DIR/language/e2e-testsuite/src/tests/module_publishing.rs: `.module(random_module)`
$DIR/language/e2e-testsuite/src/tests/module_publishing.rs: `.sequence_number(10)`
$DIR/language/e2e-testsuite/src/tests/module_publishing.rs: `.gas_unit_price(1)`
$DIR/language/e2e-testsuite/src/tests/module_publishing.rs: `.sign()`
$DIR/language/e2e-testsuite/src/tests/module_publishing.rs: `.set_golden_file(current_function_name!())`
$DIR/language/e2e-testsuite/src/tests/module_publishing.rs: `.transaction()`
$DIR/language/e2e-testsuite/src/tests/module_publishing.rs: `.module(random_module)`
$DIR/language/e2e-testsuite/src/tests/module_publishing.rs: `.sequence_number(1)`
$DIR/language/e2e-testsuite/src/tests/module_publishing.rs: `.sign()`
$DIR/language/e2e-testsuite/src/tests/module_publishing.rs: `.set_golden_file(current_function_name!())`
$DIR/language/e2e-testsuite/src/tests/module_publishing.rs: `.transaction()`
$DIR/language/e2e-testsuite/src/tests/module_publishing.rs: `.module(random_script)`
$DIR/language/e2e-testsuite/src/tests/module_publishing.rs: `.sequence_number(1)`
$DIR/language/e2e-testsuite/src/tests/module_publishing.rs: `.sign()`
$DIR/language/e2e-testsuite/src/tests/module_publishing.rs: `.set_golden_file(current_function_name!())`
$DIR/language/e2e-testsuite/src/tests/module_publishing.rs: `.transaction()`
$DIR/language/e2e-testsuite/src/tests/module_publishing.rs: `.module(random_script)`
$DIR/language/e2e-testsuite/src/tests/module_publishing.rs: `.sequence_number(1)`
$DIR/language/e2e-testsuite/src/tests/module_publishing.rs: `.sign()`
$DIR/language/e2e-testsuite/src/tests/module_publishing.rs: `.set_golden_file(current_function_name!())`
$DIR/language/e2e-testsuite/src/tests/module_publishing.rs: `.create_raw_account_data(1_000_000, 10)`
$DIR/language/e2e-testsuite/src/tests/module_publishing.rs: `.add_account_data(&sender)`
$DIR/language/e2e-testsuite/src/tests/module_publishing.rs: `.account()`
$DIR/language/e2e-testsuite/src/tests/module_publishing.rs: `.transaction()`
$DIR/language/e2e-testsuite/src/tests/module_publishing.rs: `.module(random_script)`
$DIR/language/e2e-testsuite/src/tests/module_publishing.rs: `.sequence_number(10)`
$DIR/language/e2e-testsuite/src/tests/module_publishing.rs: `.sign()`
$DIR/language/e2e-testsuite/src/tests/module_publishing.rs: `.set_golden_file(current_function_name!())`
$DIR/language/e2e-testsuite/src/tests/module_publishing.rs: `.create_raw_account_data(1_000_000, 10)`
$DIR/language/e2e-testsuite/src/tests/module_publishing.rs: `.add_account_data(&sender)`
$DIR/language/e2e-testsuite/src/tests/module_publishing.rs: `.account()`
$DIR/language/e2e-testsuite/src/tests/module_publishing.rs: `.transaction()`
$DIR/language/e2e-testsuite/src/tests/module_publishing.rs: `.module(random_script)`
$DIR/language/e2e-testsuite/src/tests/module_publishing.rs: `.sequence_number(10)`
$DIR/language/e2e-testsuite/src/tests/module_publishing.rs: `.sign()`
$DIR/language/e2e-testsuite/src/tests/multi_agent.rs: `executor.set_golden_file(current_function_name!());`
$DIR/language/e2e-testsuite/src/tests/multi_agent.rs: `executor.execute_and_apply(
        tc.transaction()
            .script(encode_create_designated_dealer_script(
                account_config::xus_tag(),
                0,
                *dd.address(),
                dd.auth_key_prefix(),
                vec![],
                false, // add_all_currencies
            ))
            .sequence_number(0)
            .sign(),
    );`
$DIR/language/e2e-testsuite/src/tests/multi_agent.rs: `executor.execute_and_apply(
        tc.transaction()
            .script(encode_create_parent_vasp_account_script(
                account_config::xus_tag(),
                0,
                *vasp.address(),
                vasp.auth_key_prefix(),
                vec![],
                false, // add_all_currencies
            ))
            .sequence_number(1)
            .sign(),
    );`
$DIR/language/e2e-testsuite/src/tests/multi_agent.rs: `executor.apply_write_set(output.write_set());`
$DIR/language/e2e-testsuite/src/tests/multi_agent.rs: `executor.set_golden_file(current_function_name!());`
$DIR/language/e2e-testsuite/src/tests/multi_agent.rs: `sender.add_balance_currency(xdx_currency_code());`
$DIR/language/e2e-testsuite/src/tests/multi_agent.rs: `secondary_signer.add_balance_currency(xus_currency_code());`
$DIR/language/e2e-testsuite/src/tests/multi_agent.rs: `executor.add_account_data(&sender);`
$DIR/language/e2e-testsuite/src/tests/multi_agent.rs: `executor.add_account_data(&secondary_signer);`
$DIR/language/e2e-testsuite/src/tests/multi_agent.rs: `executor.apply_write_set(output.write_set());`
$DIR/language/e2e-testsuite/src/tests/multi_agent.rs: `executor.set_golden_file(current_function_name!());`
$DIR/language/e2e-testsuite/src/tests/multi_agent.rs: `executor.add_account_data(&sender);`
$DIR/language/e2e-testsuite/src/tests/multi_agent.rs: `executor.add_account_data(&secondary_signer);`
$DIR/language/e2e-testsuite/src/tests/multi_agent.rs: `executor.apply_write_set(output.write_set());`
$DIR/language/e2e-testsuite/src/tests/multi_agent.rs: `executor.set_golden_file(current_function_name!());`
$DIR/language/e2e-testsuite/src/tests/multi_agent.rs: `executor.add_account_data(&sender);`
$DIR/language/e2e-testsuite/src/tests/multi_agent.rs: `executor.add_account_data(&secondary_signer);`
$DIR/language/e2e-testsuite/src/tests/multi_agent.rs: `executor.add_account_data(&third_signer);`
$DIR/language/e2e-testsuite/src/tests/multi_agent.rs: `.set_golden_file(current_function_name!())`
$DIR/language/e2e-testsuite/src/tests/multi_agent.rs: `.create_raw_account()`
$DIR/language/e2e-testsuite/src/tests/multi_agent.rs: `.execute_and_apply(
        tc.transaction()
            .script(encode_create_designated_dealer_script(
                account_config::xus_tag(),
                0,
                *dd.address(),
                dd.auth_key_prefix(),
                vec![],
                false, // add_all_currencies
            ))
            .sequence_number(0)
            .sign(),
    )`
$DIR/language/e2e-testsuite/src/tests/multi_agent.rs: `.transaction()`
$DIR/language/e2e-testsuite/src/tests/multi_agent.rs: `.script(encode_create_designated_dealer_script(
                account_config::xus_tag(),
                0,
                *dd.address(),
                dd.auth_key_prefix(),
                vec![],
                false, // add_all_currencies
            ))`
$DIR/language/e2e-testsuite/src/tests/multi_agent.rs: `.address()`
$DIR/language/e2e-testsuite/src/tests/multi_agent.rs: `.auth_key_prefix()`
$DIR/language/e2e-testsuite/src/tests/multi_agent.rs: `.sequence_number(0)`
$DIR/language/e2e-testsuite/src/tests/multi_agent.rs: `.sign()`
$DIR/language/e2e-testsuite/src/tests/multi_agent.rs: `.create_raw_account()`
$DIR/language/e2e-testsuite/src/tests/multi_agent.rs: `.execute_and_apply(
        tc.transaction()
            .script(encode_create_parent_vasp_account_script(
                account_config::xus_tag(),
                0,
                *vasp.address(),
                vasp.auth_key_prefix(),
                vec![],
                false, // add_all_currencies
            ))
            .sequence_number(1)
            .sign(),
    )`
$DIR/language/e2e-testsuite/src/tests/multi_agent.rs: `.transaction()`
$DIR/language/e2e-testsuite/src/tests/multi_agent.rs: `.script(encode_create_parent_vasp_account_script(
                account_config::xus_tag(),
                0,
                *vasp.address(),
                vasp.auth_key_prefix(),
                vec![],
                false, // add_all_currencies
            ))`
$DIR/language/e2e-testsuite/src/tests/multi_agent.rs: `.address()`
$DIR/language/e2e-testsuite/src/tests/multi_agent.rs: `.auth_key_prefix()`
$DIR/language/e2e-testsuite/src/tests/multi_agent.rs: `.sequence_number(1)`
$DIR/language/e2e-testsuite/src/tests/multi_agent.rs: `.sign()`
$DIR/language/e2e-testsuite/src/tests/multi_agent.rs: `.execute_transaction(txn)`
$DIR/language/e2e-testsuite/src/tests/multi_agent.rs: `.apply_write_set(output.write_set())`
$DIR/language/e2e-testsuite/src/tests/multi_agent.rs: `.write_set()`
$DIR/language/e2e-testsuite/src/tests/multi_agent.rs: `.read_account_resource(&tc)`
$DIR/language/e2e-testsuite/src/tests/multi_agent.rs: `.read_account_resource(&dd)`
$DIR/language/e2e-testsuite/src/tests/multi_agent.rs: `.read_account_resource(&vasp)`
$DIR/language/e2e-testsuite/src/tests/multi_agent.rs: `.read_balance_resource(&dd, account::xus_currency_code())`
$DIR/language/e2e-testsuite/src/tests/multi_agent.rs: `.read_balance_resource(&vasp, account::xus_currency_code())`
$DIR/language/e2e-testsuite/src/tests/multi_agent.rs: `.set_golden_file(current_function_name!())`
$DIR/language/e2e-testsuite/src/tests/multi_agent.rs: `.create_raw_account_data(1_000_010, 10)`
$DIR/language/e2e-testsuite/src/tests/multi_agent.rs: `.create_xdx_raw_account_data(100_100, 100)`
$DIR/language/e2e-testsuite/src/tests/multi_agent.rs: `.add_balance_currency(xdx_currency_code())`
$DIR/language/e2e-testsuite/src/tests/multi_agent.rs: `.add_balance_currency(xus_currency_code())`
$DIR/language/e2e-testsuite/src/tests/multi_agent.rs: `.add_account_data(&sender)`
$DIR/language/e2e-testsuite/src/tests/multi_agent.rs: `.add_account_data(&secondary_signer)`
$DIR/language/e2e-testsuite/src/tests/multi_agent.rs: `.account()`
$DIR/language/e2e-testsuite/src/tests/multi_agent.rs: `.account()`
$DIR/language/e2e-testsuite/src/tests/multi_agent.rs: `.execute_transaction(txn)`
$DIR/language/e2e-testsuite/src/tests/multi_agent.rs: `.apply_write_set(output.write_set())`
$DIR/language/e2e-testsuite/src/tests/multi_agent.rs: `.write_set()`
$DIR/language/e2e-testsuite/src/tests/multi_agent.rs: `.read_account_resource(sender.account())`
$DIR/language/e2e-testsuite/src/tests/multi_agent.rs: `.account()`
$DIR/language/e2e-testsuite/src/tests/multi_agent.rs: `.read_balance_resource(sender.account(), account::xus_currency_code())`
$DIR/language/e2e-testsuite/src/tests/multi_agent.rs: `.account()`
$DIR/language/e2e-testsuite/src/tests/multi_agent.rs: `.read_balance_resource(sender.account(), account::xdx_currency_code())`
$DIR/language/e2e-testsuite/src/tests/multi_agent.rs: `.account()`
$DIR/language/e2e-testsuite/src/tests/multi_agent.rs: `.read_account_resource(secondary_signer.account())`
$DIR/language/e2e-testsuite/src/tests/multi_agent.rs: `.account()`
$DIR/language/e2e-testsuite/src/tests/multi_agent.rs: `.read_balance_resource(secondary_signer.account(), account::xus_currency_code())`
$DIR/language/e2e-testsuite/src/tests/multi_agent.rs: `.account()`
$DIR/language/e2e-testsuite/src/tests/multi_agent.rs: `.read_balance_resource(secondary_signer.account(), account::xdx_currency_code())`
$DIR/language/e2e-testsuite/src/tests/multi_agent.rs: `.account()`
$DIR/language/e2e-testsuite/src/tests/multi_agent.rs: `.set_golden_file(current_function_name!())`
$DIR/language/e2e-testsuite/src/tests/multi_agent.rs: `.create_raw_account_data(1_000_010, 10)`
$DIR/language/e2e-testsuite/src/tests/multi_agent.rs: `.create_raw_account_data(10, 100)`
$DIR/language/e2e-testsuite/src/tests/multi_agent.rs: `.add_account_data(&sender)`
$DIR/language/e2e-testsuite/src/tests/multi_agent.rs: `.add_account_data(&secondary_signer)`
$DIR/language/e2e-testsuite/src/tests/multi_agent.rs: `.account()`
$DIR/language/e2e-testsuite/src/tests/multi_agent.rs: `.account()`
$DIR/language/e2e-testsuite/src/tests/multi_agent.rs: `.execute_transaction(txn)`
$DIR/language/e2e-testsuite/src/tests/multi_agent.rs: `.apply_write_set(output.write_set())`
$DIR/language/e2e-testsuite/src/tests/multi_agent.rs: `.write_set()`
$DIR/language/e2e-testsuite/src/tests/multi_agent.rs: `.read_account_resource(sender.account())`
$DIR/language/e2e-testsuite/src/tests/multi_agent.rs: `.account()`
$DIR/language/e2e-testsuite/src/tests/multi_agent.rs: `.read_balance_resource(sender.account(), account::xus_currency_code())`
$DIR/language/e2e-testsuite/src/tests/multi_agent.rs: `.account()`
$DIR/language/e2e-testsuite/src/tests/multi_agent.rs: `.read_account_resource(secondary_signer.account())`
$DIR/language/e2e-testsuite/src/tests/multi_agent.rs: `.account()`
$DIR/language/e2e-testsuite/src/tests/multi_agent.rs: `.read_balance_resource(secondary_signer.account(), account::xus_currency_code())`
$DIR/language/e2e-testsuite/src/tests/multi_agent.rs: `.account()`
$DIR/language/e2e-testsuite/src/tests/multi_agent.rs: `.set_golden_file(current_function_name!())`
$DIR/language/e2e-testsuite/src/tests/multi_agent.rs: `.create_raw_account_data(1_000_010, 10)`
$DIR/language/e2e-testsuite/src/tests/multi_agent.rs: `.create_raw_account_data(100_100, 100)`
$DIR/language/e2e-testsuite/src/tests/multi_agent.rs: `.create_raw_account_data(100_100, 100)`
$DIR/language/e2e-testsuite/src/tests/multi_agent.rs: `.add_account_data(&sender)`
$DIR/language/e2e-testsuite/src/tests/multi_agent.rs: `.add_account_data(&secondary_signer)`
$DIR/language/e2e-testsuite/src/tests/multi_agent.rs: `.add_account_data(&third_signer)`
$DIR/language/e2e-testsuite/src/tests/multi_agent.rs: `.address()`
$DIR/language/e2e-testsuite/src/tests/multi_agent.rs: `.account()`
$DIR/language/e2e-testsuite/src/tests/multi_agent.rs: `.account()`
$DIR/language/e2e-testsuite/src/tests/multi_agent.rs: `.execute_transaction(signed_txn)`
$DIR/language/e2e-testsuite/src/tests/on_chain_configs.rs: `executor.set_golden_file(current_function_name!());`
$DIR/language/e2e-testsuite/src/tests/on_chain_configs.rs: `executor.add_account_data(&sender);`
$DIR/language/e2e-testsuite/src/tests/on_chain_configs.rs: `assert_prologue_parity!(
        executor.verify_transaction(txn.clone()).status(),
        executor.execute_transaction(txn).status(),
        StatusCode::UNKNOWN_SCRIPT
    );`
$DIR/language/e2e-testsuite/src/tests/on_chain_configs.rs: `.set_golden_file(current_function_name!())`
$DIR/language/e2e-testsuite/src/tests/on_chain_configs.rs: `.create_raw_account_data(5_000_000, 10)`
$DIR/language/e2e-testsuite/src/tests/on_chain_configs.rs: `.add_account_data(&sender)`
$DIR/language/e2e-testsuite/src/tests/on_chain_configs.rs: `.account()`
$DIR/language/e2e-testsuite/src/tests/on_chain_configs.rs: `.transaction()`
$DIR/language/e2e-testsuite/src/tests/on_chain_configs.rs: `.script(Script::new(random_script, vec![], vec![]))`
$DIR/language/e2e-testsuite/src/tests/on_chain_configs.rs: `.sequence_number(10)`
$DIR/language/e2e-testsuite/src/tests/on_chain_configs.rs: `.max_gas_amount(100_000)`
$DIR/language/e2e-testsuite/src/tests/on_chain_configs.rs: `.gas_unit_price(1)`
$DIR/language/e2e-testsuite/src/tests/on_chain_configs.rs: `.sign()`
$DIR/language/e2e-testsuite/src/tests/on_chain_configs.rs: `.transaction()`
$DIR/language/e2e-testsuite/src/tests/on_chain_configs.rs: `.script(Script::new(random_script, vec![], vec![]))`
$DIR/language/e2e-testsuite/src/tests/on_chain_configs.rs: `.sequence_number(1)`
$DIR/language/e2e-testsuite/src/tests/on_chain_configs.rs: `.sign()`
$DIR/language/e2e-testsuite/src/tests/peer_to_peer.rs: `::diem_logger::Logger::init_for_testing();`
$DIR/language/e2e-testsuite/src/tests/preburn_queue.rs: `executor.execute_and_apply(txn);`
$DIR/language/e2e-testsuite/src/tests/preburn_queue.rs: `*dd_seqno = dd_seqno.checked_add(1).unwrap();`
$DIR/language/e2e-testsuite/src/tests/preburn_queue.rs: `executor.execute_and_apply(txn);`
$DIR/language/e2e-testsuite/src/tests/preburn_queue.rs: `*tc_seqno = tc_seqno.checked_add(1).unwrap();`
$DIR/language/e2e-testsuite/src/tests/preburn_queue.rs: `executor.execute_and_apply(txn);`
$DIR/language/e2e-testsuite/src/tests/preburn_queue.rs: `*tc_seqno = tc_seqno.checked_add(1).unwrap();`
$DIR/language/e2e-testsuite/src/tests/preburn_queue.rs: `executor.execute_and_apply(txn);`
$DIR/language/e2e-testsuite/src/tests/preburn_queue.rs: `*tc_seqno = tc_seqno.checked_add(1).unwrap();`
$DIR/language/e2e-testsuite/src/tests/preburn_queue.rs: `executor.execute_and_apply(txn);`
$DIR/language/e2e-testsuite/src/tests/preburn_queue.rs: `*tc_seqno = tc_seqno.checked_add(1).unwrap();`
$DIR/language/e2e-testsuite/src/tests/preburn_queue.rs: `executor.set_golden_file(current_function_name!());`
$DIR/language/e2e-testsuite/src/tests/preburn_queue.rs: `utils::upgrade_df(&mut executor, &dr_account, &mut dr_seqno, Some(2));`
$DIR/language/e2e-testsuite/src/tests/preburn_queue.rs: `executor.set_golden_file(current_function_name!());`
$DIR/language/e2e-testsuite/src/tests/preburn_queue.rs: `utils::upgrade_df(&mut executor, &dr_account, &mut dr_seqno, Some(2));`
$DIR/language/e2e-testsuite/src/tests/preburn_queue.rs: `executor.set_golden_file(current_function_name!());`
$DIR/language/e2e-testsuite/src/tests/preburn_queue.rs: `utils::upgrade_df(&mut executor, &dr_account, &mut dr_seqno, Some(2));`
$DIR/language/e2e-testsuite/src/tests/preburn_queue.rs: `executor.set_golden_file(current_function_name!());`
$DIR/language/e2e-testsuite/src/tests/preburn_queue.rs: `utils::upgrade_df(&mut executor, &dr_account, &mut dr_seqno, Some(2));`
$DIR/language/e2e-testsuite/src/tests/preburn_queue.rs: `executor.set_golden_file(current_function_name!());`
$DIR/language/e2e-testsuite/src/tests/preburn_queue.rs: `utils::upgrade_df(&mut executor, &dr_account, &mut dr_seqno, Some(2));`
$DIR/language/e2e-testsuite/src/tests/preburn_queue.rs: `executor.set_golden_file(current_function_name!());`
$DIR/language/e2e-testsuite/src/tests/preburn_queue.rs: `.transaction()`
$DIR/language/e2e-testsuite/src/tests/preburn_queue.rs: `.script(script)`
$DIR/language/e2e-testsuite/src/tests/preburn_queue.rs: `.sequence_number(*dd_seqno)`
$DIR/language/e2e-testsuite/src/tests/preburn_queue.rs: `.sign()`
$DIR/language/e2e-testsuite/src/tests/preburn_queue.rs: `.execute_transaction(txn)`
$DIR/language/e2e-testsuite/src/tests/preburn_queue.rs: `.execute_and_apply(txn)`
$DIR/language/e2e-testsuite/src/tests/preburn_queue.rs: `.checked_add(1)`
$DIR/language/e2e-testsuite/src/tests/preburn_queue.rs: `.transaction()`
$DIR/language/e2e-testsuite/src/tests/preburn_queue.rs: `.script(encode_burn_script(
            account_config::xus_tag(),
            0,
            account_config::testnet_dd_account_address(),
        ))`
$DIR/language/e2e-testsuite/src/tests/preburn_queue.rs: `.sequence_number(*tc_seqno)`
$DIR/language/e2e-testsuite/src/tests/preburn_queue.rs: `.sign()`
$DIR/language/e2e-testsuite/src/tests/preburn_queue.rs: `.execute_transaction(txn)`
$DIR/language/e2e-testsuite/src/tests/preburn_queue.rs: `.execute_and_apply(txn)`
$DIR/language/e2e-testsuite/src/tests/preburn_queue.rs: `.checked_add(1)`
$DIR/language/e2e-testsuite/src/tests/preburn_queue.rs: `.transaction()`
$DIR/language/e2e-testsuite/src/tests/preburn_queue.rs: `.script(encode_cancel_burn_script(
            account_config::xus_tag(),
            account_config::testnet_dd_account_address(),
        ))`
$DIR/language/e2e-testsuite/src/tests/preburn_queue.rs: `.sequence_number(*tc_seqno)`
$DIR/language/e2e-testsuite/src/tests/preburn_queue.rs: `.sign()`
$DIR/language/e2e-testsuite/src/tests/preburn_queue.rs: `.execute_transaction(txn)`
$DIR/language/e2e-testsuite/src/tests/preburn_queue.rs: `.execute_and_apply(txn)`
$DIR/language/e2e-testsuite/src/tests/preburn_queue.rs: `.checked_add(1)`
$DIR/language/e2e-testsuite/src/tests/preburn_queue.rs: `.transaction()`
$DIR/language/e2e-testsuite/src/tests/preburn_queue.rs: `.payload(encode_burn_with_amount_script_function(
            account_config::xus_tag(),
            0,
            account_config::testnet_dd_account_address(),
            amount,
        ))`
$DIR/language/e2e-testsuite/src/tests/preburn_queue.rs: `.sequence_number(*tc_seqno)`
$DIR/language/e2e-testsuite/src/tests/preburn_queue.rs: `.sign()`
$DIR/language/e2e-testsuite/src/tests/preburn_queue.rs: `.execute_transaction(txn)`
$DIR/language/e2e-testsuite/src/tests/preburn_queue.rs: `.execute_and_apply(txn)`
$DIR/language/e2e-testsuite/src/tests/preburn_queue.rs: `.checked_add(1)`
$DIR/language/e2e-testsuite/src/tests/preburn_queue.rs: `.transaction()`
$DIR/language/e2e-testsuite/src/tests/preburn_queue.rs: `.payload(encode_cancel_burn_with_amount_script_function(
            account_config::xus_tag(),
            account_config::testnet_dd_account_address(),
            amount,
        ))`
$DIR/language/e2e-testsuite/src/tests/preburn_queue.rs: `.sequence_number(*tc_seqno)`
$DIR/language/e2e-testsuite/src/tests/preburn_queue.rs: `.sign()`
$DIR/language/e2e-testsuite/src/tests/preburn_queue.rs: `.execute_transaction(txn)`
$DIR/language/e2e-testsuite/src/tests/preburn_queue.rs: `.execute_and_apply(txn)`
$DIR/language/e2e-testsuite/src/tests/preburn_queue.rs: `.checked_add(1)`
$DIR/language/e2e-testsuite/src/tests/preburn_queue.rs: `.set_golden_file(current_function_name!())`
$DIR/language/e2e-testsuite/src/tests/preburn_queue.rs: `.set_golden_file(current_function_name!())`
$DIR/language/e2e-testsuite/src/tests/preburn_queue.rs: `.set_golden_file(current_function_name!())`
$DIR/language/e2e-testsuite/src/tests/preburn_queue.rs: `.set_golden_file(current_function_name!())`
$DIR/language/e2e-testsuite/src/tests/preburn_queue.rs: `.set_golden_file(current_function_name!())`
$DIR/language/e2e-testsuite/src/tests/preburn_queue.rs: `.set_golden_file(current_function_name!())`
$DIR/language/e2e-testsuite/src/tests/script_functions.rs: `executor.apply_write_set(output.write_set());`
$DIR/language/e2e-testsuite/src/tests/script_functions.rs: `executor.set_golden_file(current_function_name!());`
$DIR/language/e2e-testsuite/src/tests/script_functions.rs: `executor.add_account_data(&account);`
$DIR/language/e2e-testsuite/src/tests/script_functions.rs: `utils::upgrade_df(
        &mut executor,
        &dr_account,
        &mut dr_seqno,
        Some(DIEM_VERSION_2.major),
    );`
$DIR/language/e2e-testsuite/src/tests/script_functions.rs: `executor.set_golden_file(current_function_name!());`
$DIR/language/e2e-testsuite/src/tests/script_functions.rs: `executor.add_account_data(&account);`
$DIR/language/e2e-testsuite/src/tests/script_functions.rs: `utils::upgrade_df(
        &mut executor,
        &dr_account,
        &mut dr_seqno,
        Some(DIEM_VERSION_2.major),
    );`
$DIR/language/e2e-testsuite/src/tests/script_functions.rs: `executor.set_golden_file(current_function_name!());`
$DIR/language/e2e-testsuite/src/tests/script_functions.rs: `executor.add_account_data(&account);`
$DIR/language/e2e-testsuite/src/tests/script_functions.rs: `utils::upgrade_df(
        &mut executor,
        &dr_account,
        &mut dr_seqno,
        Some(DIEM_VERSION_2.major),
    );`
$DIR/language/e2e-testsuite/src/tests/script_functions.rs: `.transaction()`
$DIR/language/e2e-testsuite/src/tests/script_functions.rs: `.module(compiled_module)`
$DIR/language/e2e-testsuite/src/tests/script_functions.rs: `.sequence_number(seq_num)`
$DIR/language/e2e-testsuite/src/tests/script_functions.rs: `.sign()`
$DIR/language/e2e-testsuite/src/tests/script_functions.rs: `.execute_transaction(txn)`
$DIR/language/e2e-testsuite/src/tests/script_functions.rs: `.apply_write_set(output.write_set())`
$DIR/language/e2e-testsuite/src/tests/script_functions.rs: `.write_set()`
$DIR/language/e2e-testsuite/src/tests/script_functions.rs: `.set_golden_file(current_function_name!())`
$DIR/language/e2e-testsuite/src/tests/script_functions.rs: `.create_raw_account_data(1_000_000, sequence_number)`
$DIR/language/e2e-testsuite/src/tests/script_functions.rs: `.add_account_data(&account)`
$DIR/language/e2e-testsuite/src/tests/script_functions.rs: `.account()`
$DIR/language/e2e-testsuite/src/tests/script_functions.rs: `.account()`
$DIR/language/e2e-testsuite/src/tests/script_functions.rs: `.transaction()`
$DIR/language/e2e-testsuite/src/tests/script_functions.rs: `.script_function(ScriptFunction::new(
            ModuleId::new(*account.address(), Identifier::new("M").unwrap()),
            Identifier::new("f_private").unwrap(),
            vec![],
            vec![],
        ))`
$DIR/language/e2e-testsuite/src/tests/script_functions.rs: `.address()`
$DIR/language/e2e-testsuite/src/tests/script_functions.rs: `.sequence_number(sequence_number)`
$DIR/language/e2e-testsuite/src/tests/script_functions.rs: `.sign()`
$DIR/language/e2e-testsuite/src/tests/script_functions.rs: `.execute_transaction(txn.clone())`
$DIR/language/e2e-testsuite/src/tests/script_functions.rs: `.execute_transaction(txn)`
$DIR/language/e2e-testsuite/src/tests/script_functions.rs: `.set_golden_file(current_function_name!())`
$DIR/language/e2e-testsuite/src/tests/script_functions.rs: `.create_raw_account_data(1_000_000, sequence_number)`
$DIR/language/e2e-testsuite/src/tests/script_functions.rs: `.add_account_data(&account)`
$DIR/language/e2e-testsuite/src/tests/script_functions.rs: `.account()`
$DIR/language/e2e-testsuite/src/tests/script_functions.rs: `.account()`
$DIR/language/e2e-testsuite/src/tests/script_functions.rs: `.transaction()`
$DIR/language/e2e-testsuite/src/tests/script_functions.rs: `.script_function(ScriptFunction::new(
            ModuleId::new(*account.address(), Identifier::new("M").unwrap()),
            Identifier::new("f_public").unwrap(),
            vec![],
            vec![],
        ))`
$DIR/language/e2e-testsuite/src/tests/script_functions.rs: `.address()`
$DIR/language/e2e-testsuite/src/tests/script_functions.rs: `.sequence_number(sequence_number)`
$DIR/language/e2e-testsuite/src/tests/script_functions.rs: `.sign()`
$DIR/language/e2e-testsuite/src/tests/script_functions.rs: `.execute_transaction(txn.clone())`
$DIR/language/e2e-testsuite/src/tests/script_functions.rs: `.execute_transaction(txn)`
$DIR/language/e2e-testsuite/src/tests/script_functions.rs: `.set_golden_file(current_function_name!())`
$DIR/language/e2e-testsuite/src/tests/script_functions.rs: `.create_raw_account_data(1_000_000, sequence_number)`
$DIR/language/e2e-testsuite/src/tests/script_functions.rs: `.add_account_data(&account)`
$DIR/language/e2e-testsuite/src/tests/script_functions.rs: `.account()`
$DIR/language/e2e-testsuite/src/tests/script_functions.rs: `.account()`
$DIR/language/e2e-testsuite/src/tests/script_functions.rs: `.transaction()`
$DIR/language/e2e-testsuite/src/tests/script_functions.rs: `.script_function(ScriptFunction::new(
            ModuleId::new(*account.address(), Identifier::new("M").unwrap()),
            Identifier::new("f_script").unwrap(),
            vec![],
            vec![],
        ))`
$DIR/language/e2e-testsuite/src/tests/script_functions.rs: `.address()`
$DIR/language/e2e-testsuite/src/tests/script_functions.rs: `.sequence_number(sequence_number)`
$DIR/language/e2e-testsuite/src/tests/script_functions.rs: `.sign()`
$DIR/language/e2e-testsuite/src/tests/script_functions.rs: `.execute_transaction(txn.clone())`
$DIR/language/e2e-testsuite/src/tests/script_functions.rs: `.execute_transaction(txn)`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `executor.set_golden_file(current_function_name!());`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `executor.add_account_data(&sender);`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `script.code.code = vec![Bytecode::LdU8(0), Bytecode::Add, Bytecode::Ret];`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `script.serialize(&mut blob).expect("script must serialize");`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `executor.apply_write_set(output.write_set());`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `executor.set_golden_file(current_function_name!());`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `executor.add_account_data(&sender);`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `script
        .address_identifiers
        .push(AccountAddress::new([2u8; AccountAddress::LENGTH]));`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `script.identifiers.push(Identifier::new("module").unwrap());`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `script.module_handles.push(module_handle);`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `script.identifiers.push(Identifier::new("foo").unwrap());`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `script.function_handles.push(fun_handle);`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `script.code.code = vec![
        Bytecode::Call(FunctionHandleIndex(
            (script.function_handles.len() - 1) as u16,
        )),
        Bytecode::Ret,
    ];`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `script.serialize(&mut blob).expect("script must serialize");`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `executor.apply_write_set(output.write_set());`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `executor.set_golden_file(current_function_name!());`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `executor.add_account_data(&sender);`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `script
        .address_identifiers
        .push(account_config::CORE_CODE_ADDRESS);`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `script.identifiers.push(Identifier::new("BCS").unwrap());`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `script.module_handles.push(module_handle);`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `script.identifiers.push(Identifier::new("foo").unwrap());`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `script.function_handles.push(fun_handle);`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `script.code.code = vec![
        Bytecode::Call(FunctionHandleIndex(
            (script.function_handles.len() - 1) as u16,
        )),
        Bytecode::Ret,
    ];`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `script.serialize(&mut blob).expect("script must serialize");`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `executor.apply_write_set(output.write_set());`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `executor.set_golden_file(current_function_name!());`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `executor.add_account_data(&sender);`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `script
        .address_identifiers
        .push(account_config::CORE_CODE_ADDRESS);`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `script.identifiers.push(Identifier::new("BCS").unwrap());`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `script.module_handles.push(module_handle);`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `script
        .identifiers
        .push(Identifier::new("to_bytes").unwrap());`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `script.function_handles.push(fun_handle);`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `script.code.code = vec![
        Bytecode::Call(FunctionHandleIndex(
            (script.function_handles.len() - 1) as u16,
        )),
        Bytecode::Ret,
    ];`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `script.serialize(&mut blob).expect("script must serialize");`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `executor.apply_write_set(output.write_set());`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `executor.set_golden_file(current_function_name!());`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `executor.add_account_data(&sender);`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `script.address_identifiers.push(address);`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `script.identifiers.push(module.clone());`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `script.module_handles.push(module_handle);`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `script.code.code = vec![Bytecode::Ret];`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `script.type_parameters = vec![AbilitySet::EMPTY];`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `script.serialize(&mut blob).expect("script must serialize");`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `executor.apply_write_set(output.write_set());`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `executor.set_golden_file(current_function_name!());`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `executor.add_account_data(&sender);`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `script.address_identifiers.push(address);`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `script.identifiers.push(module.clone());`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `script.module_handles.push(module_handle);`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `script.code.code = vec![Bytecode::Ret];`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `script.type_parameters = vec![AbilitySet::EMPTY];`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `script.serialize(&mut blob).expect("script must serialize");`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `executor.apply_write_set(output.write_set());`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.set_golden_file(current_function_name!())`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.create_raw_account_data(1_000_000, 10)`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.add_account_data(&sender)`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.serialize(&mut blob)`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.account()`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.transaction()`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.script(Script::new(blob, vec![], vec![]))`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.sequence_number(10)`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.gas_unit_price(1)`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.sign()`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.execute_transaction(txn)`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.status()`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.apply_write_set(output.write_set())`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.write_set()`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.gas_used()`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.read_account_resource(sender.account())`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.account()`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.read_balance_resource(sender.account(), account::xus_currency_code())`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.account()`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.set_golden_file(current_function_name!())`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.create_raw_account_data(1_000_000, 10)`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.add_account_data(&sender)`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.address_identifiers
        .push(AccountAddress::new([2u8; AccountAddress::LENGTH]))`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.identifiers.push(Identifier::new("module").unwrap())`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.address_identifiers.len()`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.identifiers.len()`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.module_handles.push(module_handle)`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.identifiers.push(Identifier::new("foo").unwrap())`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.module_handles.len()`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.identifiers.len()`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.function_handles.push(fun_handle)`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.serialize(&mut blob)`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.account()`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.transaction()`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.script(Script::new(blob, vec![], vec![]))`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.sequence_number(10)`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.gas_unit_price(1)`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.sign()`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.execute_transaction(txn)`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.status()`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.apply_write_set(output.write_set())`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.write_set()`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.gas_used()`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.read_account_resource(sender.account())`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.account()`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.read_balance_resource(sender.account(), account::xus_currency_code())`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.account()`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.set_golden_file(current_function_name!())`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.create_raw_account_data(1_000_000, 10)`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.add_account_data(&sender)`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.address_identifiers
        .push(account_config::CORE_CODE_ADDRESS)`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.identifiers.push(Identifier::new("BCS").unwrap())`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.address_identifiers.len()`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.identifiers.len()`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.module_handles.push(module_handle)`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.identifiers.push(Identifier::new("foo").unwrap())`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.module_handles.len()`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.identifiers.len()`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.function_handles.push(fun_handle)`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.serialize(&mut blob)`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.account()`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.transaction()`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.script(Script::new(blob, vec![], vec![]))`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.sequence_number(10)`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.gas_unit_price(1)`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.sign()`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.execute_transaction(txn)`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.status()`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.apply_write_set(output.write_set())`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.write_set()`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.gas_used()`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.read_account_resource(sender.account())`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.account()`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.read_balance_resource(sender.account(), account::xus_currency_code())`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.account()`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.set_golden_file(current_function_name!())`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.create_raw_account_data(1_000_000, 10)`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.add_account_data(&sender)`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.address_identifiers
        .push(account_config::CORE_CODE_ADDRESS)`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.identifiers.push(Identifier::new("BCS").unwrap())`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.address_identifiers.len()`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.identifiers.len()`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.module_handles.push(module_handle)`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.identifiers
        .push(Identifier::new("to_bytes").unwrap())`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.module_handles.len()`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.identifiers.len()`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.function_handles.push(fun_handle)`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.serialize(&mut blob)`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.account()`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.transaction()`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.script(Script::new(blob, vec![], vec![]))`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.sequence_number(10)`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.gas_unit_price(1)`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.sign()`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.execute_transaction(txn)`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.status()`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.apply_write_set(output.write_set())`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.write_set()`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.gas_used()`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.read_account_resource(sender.account())`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.account()`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.read_balance_resource(sender.account(), account::xus_currency_code())`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.account()`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.set_golden_file(current_function_name!())`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.create_raw_account_data(1_000_000, 10)`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.add_account_data(&sender)`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.address_identifiers.push(address)`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.identifiers.push(module.clone())`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.address_identifiers.len()`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.identifiers.len()`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.module_handles.push(module_handle)`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.serialize(&mut blob)`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.account()`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.transaction()`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.script(Script::new(
            blob,
            vec![TypeTag::Struct(StructTag {
                address,
                module,
                name: Identifier::new("fake").unwrap(),
                type_params: vec![],
            })],
            vec![],
        ))`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.sequence_number(10)`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.gas_unit_price(1)`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.sign()`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.execute_transaction(txn)`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.status()`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.apply_write_set(output.write_set())`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.write_set()`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.gas_used()`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.read_account_resource(sender.account())`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.account()`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.read_balance_resource(sender.account(), account::xus_currency_code())`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.account()`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.set_golden_file(current_function_name!())`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.create_raw_account_data(1_000_000, 10)`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.add_account_data(&sender)`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.address_identifiers.push(address)`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.identifiers.push(module.clone())`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.address_identifiers.len()`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.identifiers.len()`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.module_handles.push(module_handle)`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.serialize(&mut blob)`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.account()`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.transaction()`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.script(Script::new(
            blob,
            vec![TypeTag::Vector(Box::new(TypeTag::Struct(StructTag {
                address,
                module,
                name: Identifier::new("fake").unwrap(),
                type_params: vec![],
            })))],
            vec![],
        ))`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.sequence_number(10)`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.gas_unit_price(1)`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.sign()`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.execute_transaction(txn)`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.status()`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.apply_write_set(output.write_set())`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.write_set()`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.gas_used()`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.read_account_resource(sender.account())`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.account()`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.read_balance_resource(sender.account(), account::xus_currency_code())`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.account()`
$DIR/language/e2e-testsuite/src/tests/transaction_builder.rs: `executor.set_golden_file(current_function_name!());`
$DIR/language/e2e-testsuite/src/tests/transaction_builder.rs: `currencies::add_currency_to_system(&mut executor, "COIN", &dr_account, 1);`
$DIR/language/e2e-testsuite/src/tests/transaction_builder.rs: `executor.execute_and_apply(
        blessed
            .transaction()
            .script(encode_create_parent_vasp_account_script(
                account_config::xus_tag(),
                0,
                *vasp_a.address(),
                vasp_a.auth_key_prefix(),
                vec![],
                false,
            ))
            .sequence_number(tc_sequence_number)
            .sign(),
    );`
$DIR/language/e2e-testsuite/src/tests/transaction_builder.rs: `executor.execute_and_apply(
        vasp_a
            .transaction()
            .script(encode_create_child_vasp_account_script(
                account_config::xus_tag(),
                *vasp_a_child1.address(),
                vasp_a_child1.auth_key_prefix(),
                false,
                0,
            ))
            .sequence_number(0)
            .sign(),
    );`
$DIR/language/e2e-testsuite/src/tests/transaction_builder.rs: `executor.execute_and_apply(
        vasp_a
            .transaction()
            .script(encode_add_currency_to_account_script(
                account_config::type_tag_for_currency_code(account::currency_code("COIN")),
            ))
            .sequence_number(1)
            .sign(),
    );`
$DIR/language/e2e-testsuite/src/tests/transaction_builder.rs: `executor.execute_and_apply(
        blessed
            .transaction()
            .script(encode_create_parent_vasp_account_script(
                account_config::xus_tag(),
                0,
                *vasp_b.address(),
                vasp_b.auth_key_prefix(),
                vec![],
                true,
            ))
            .sequence_number(tc_sequence_number.checked_add(1).unwrap())
            .sign(),
    );`
$DIR/language/e2e-testsuite/src/tests/transaction_builder.rs: `executor.execute_and_apply(
        vasp_b
            .transaction()
            .script(encode_create_child_vasp_account_script(
                account_config::xus_tag(),
                *vasp_b_child1.address(),
                vasp_b_child1.auth_key_prefix(),
                true,
                0,
            ))
            .sequence_number(0)
            .sign(),
    );`
$DIR/language/e2e-testsuite/src/tests/transaction_builder.rs: `.set_golden_file(current_function_name!())`
$DIR/language/e2e-testsuite/src/tests/transaction_builder.rs: `.create_raw_account()`
$DIR/language/e2e-testsuite/src/tests/transaction_builder.rs: `.create_raw_account()`
$DIR/language/e2e-testsuite/src/tests/transaction_builder.rs: `.create_raw_account()`
$DIR/language/e2e-testsuite/src/tests/transaction_builder.rs: `.create_raw_account()`
$DIR/language/e2e-testsuite/src/tests/transaction_builder.rs: `.create_raw_account()`
$DIR/language/e2e-testsuite/src/tests/transaction_builder.rs: `.execute_and_apply(
        blessed
            .transaction()
            .script(encode_create_parent_vasp_account_script(
                account_config::xus_tag(),
                0,
                *vasp_a.address(),
                vasp_a.auth_key_prefix(),
                vec![],
                false,
            ))
            .sequence_number(tc_sequence_number)
            .sign(),
    )`
$DIR/language/e2e-testsuite/src/tests/transaction_builder.rs: `.transaction()`
$DIR/language/e2e-testsuite/src/tests/transaction_builder.rs: `.script(encode_create_parent_vasp_account_script(
                account_config::xus_tag(),
                0,
                *vasp_a.address(),
                vasp_a.auth_key_prefix(),
                vec![],
                false,
            ))`
$DIR/language/e2e-testsuite/src/tests/transaction_builder.rs: `.address()`
$DIR/language/e2e-testsuite/src/tests/transaction_builder.rs: `.auth_key_prefix()`
$DIR/language/e2e-testsuite/src/tests/transaction_builder.rs: `.sequence_number(tc_sequence_number)`
$DIR/language/e2e-testsuite/src/tests/transaction_builder.rs: `.sign()`
$DIR/language/e2e-testsuite/src/tests/transaction_builder.rs: `.execute_and_apply(
        vasp_a
            .transaction()
            .script(encode_create_child_vasp_account_script(
                account_config::xus_tag(),
                *vasp_a_child1.address(),
                vasp_a_child1.auth_key_prefix(),
                false,
                0,
            ))
            .sequence_number(0)
            .sign(),
    )`
$DIR/language/e2e-testsuite/src/tests/transaction_builder.rs: `.transaction()`
$DIR/language/e2e-testsuite/src/tests/transaction_builder.rs: `.script(encode_create_child_vasp_account_script(
                account_config::xus_tag(),
                *vasp_a_child1.address(),
                vasp_a_child1.auth_key_prefix(),
                false,
                0,
            ))`
$DIR/language/e2e-testsuite/src/tests/transaction_builder.rs: `.address()`
$DIR/language/e2e-testsuite/src/tests/transaction_builder.rs: `.auth_key_prefix()`
$DIR/language/e2e-testsuite/src/tests/transaction_builder.rs: `.sequence_number(0)`
$DIR/language/e2e-testsuite/src/tests/transaction_builder.rs: `.sign()`
$DIR/language/e2e-testsuite/src/tests/transaction_builder.rs: `.execute_and_apply(
        vasp_a
            .transaction()
            .script(encode_add_currency_to_account_script(
                account_config::type_tag_for_currency_code(account::currency_code("COIN")),
            ))
            .sequence_number(1)
            .sign(),
    )`
$DIR/language/e2e-testsuite/src/tests/transaction_builder.rs: `.transaction()`
$DIR/language/e2e-testsuite/src/tests/transaction_builder.rs: `.script(encode_add_currency_to_account_script(
                account_config::type_tag_for_currency_code(account::currency_code("COIN")),
            ))`
$DIR/language/e2e-testsuite/src/tests/transaction_builder.rs: `.sequence_number(1)`
$DIR/language/e2e-testsuite/src/tests/transaction_builder.rs: `.sign()`
$DIR/language/e2e-testsuite/src/tests/transaction_builder.rs: `.execute_and_apply(
        blessed
            .transaction()
            .script(encode_create_parent_vasp_account_script(
                account_config::xus_tag(),
                0,
                *vasp_b.address(),
                vasp_b.auth_key_prefix(),
                vec![],
                true,
            ))
            .sequence_number(tc_sequence_number.checked_add(1).unwrap())
            .sign(),
    )`
$DIR/language/e2e-testsuite/src/tests/transaction_builder.rs: `.transaction()`
$DIR/language/e2e-testsuite/src/tests/transaction_builder.rs: `.script(encode_create_parent_vasp_account_script(
                account_config::xus_tag(),
                0,
                *vasp_b.address(),
                vasp_b.auth_key_prefix(),
                vec![],
                true,
            ))`
$DIR/language/e2e-testsuite/src/tests/transaction_builder.rs: `.address()`
$DIR/language/e2e-testsuite/src/tests/transaction_builder.rs: `.auth_key_prefix()`
$DIR/language/e2e-testsuite/src/tests/transaction_builder.rs: `.sequence_number(tc_sequence_number.checked_add(1).unwrap())`
$DIR/language/e2e-testsuite/src/tests/transaction_builder.rs: `.checked_add(1)`
$DIR/language/e2e-testsuite/src/tests/transaction_builder.rs: `.sign()`
$DIR/language/e2e-testsuite/src/tests/transaction_builder.rs: `.execute_and_apply(
        vasp_b
            .transaction()
            .script(encode_create_child_vasp_account_script(
                account_config::xus_tag(),
                *vasp_b_child1.address(),
                vasp_b_child1.auth_key_prefix(),
                true,
                0,
            ))
            .sequence_number(0)
            .sign(),
    )`
$DIR/language/e2e-testsuite/src/tests/transaction_builder.rs: `.transaction()`
$DIR/language/e2e-testsuite/src/tests/transaction_builder.rs: `.script(encode_create_child_vasp_account_script(
                account_config::xus_tag(),
                *vasp_b_child1.address(),
                vasp_b_child1.auth_key_prefix(),
                true,
                0,
            ))`
$DIR/language/e2e-testsuite/src/tests/transaction_builder.rs: `.address()`
$DIR/language/e2e-testsuite/src/tests/transaction_builder.rs: `.auth_key_prefix()`
$DIR/language/e2e-testsuite/src/tests/transaction_builder.rs: `.sequence_number(0)`
$DIR/language/e2e-testsuite/src/tests/transaction_builder.rs: `.sign()`
$DIR/language/e2e-testsuite/src/tests/transaction_builder.rs: `.transaction()`
$DIR/language/e2e-testsuite/src/tests/transaction_builder.rs: `.script(encode_create_child_vasp_account_script(
                account_config::type_tag_for_currency_code(account::currency_code("COIN")),
                *vasp_b_child2.address(),
                vasp_b_child2.auth_key_prefix(),
                false,
                0,
            ))`
$DIR/language/e2e-testsuite/src/tests/transaction_builder.rs: `.address()`
$DIR/language/e2e-testsuite/src/tests/transaction_builder.rs: `.auth_key_prefix()`
$DIR/language/e2e-testsuite/src/tests/transaction_builder.rs: `.sequence_number(1)`
$DIR/language/e2e-testsuite/src/tests/transaction_builder.rs: `.sign()`
$DIR/language/e2e-testsuite/src/tests/validator_set_management.rs: `executor.execute_and_apply(
        diem_root_account
            .transaction()
            .script(encode_create_validator_account_script(
                0,
                *validator_account.address(),
                validator_account.auth_key_prefix(),
                b"validator_0".to_vec(),
            ))
            .sequence_number(dr_seqno)
            .sign(),
    );`
$DIR/language/e2e-testsuite/src/tests/validator_set_management.rs: `executor.execute_and_apply(
        diem_root_account
            .transaction()
            .script(encode_create_validator_operator_account_script(
                0,
                *operator_account.address(),
                operator_account.auth_key_prefix(),
                b"operator_0".to_vec(),
            ))
            .sequence_number(dr_seqno.checked_add(1).unwrap())
            .sign(),
    );`
$DIR/language/e2e-testsuite/src/tests/validator_set_management.rs: `executor.execute_and_apply(
        validator_account
            .transaction()
            .script(encode_set_validator_operator_script(
                b"operator_0".to_vec(),
                *operator_account.address(),
            ))
            .sequence_number(0)
            .sign(),
    );`
$DIR/language/e2e-testsuite/src/tests/validator_set_management.rs: `executor.new_block();`
$DIR/language/e2e-testsuite/src/tests/validator_set_management.rs: `executor.execute_and_apply(
        operator_account
            .transaction()
            .script(encode_register_validator_config_script(
                *validator_account.address(),
                [
                    0xd7, 0x5a, 0x98, 0x01, 0x82, 0xb1, 0x0a, 0xb7, 0xd5, 0x4b, 0xfe, 0xd3, 0xc9,
                    0x64, 0x07, 0x3a, 0x0e, 0xe1, 0x72, 0xf3, 0xda, 0xa6, 0x23, 0x25, 0xaf, 0x02,
                    0x1a, 0x68, 0xf7, 0x07, 0x51, 0x1a,
                ]
                .to_vec(),
                vec![254; 32],
                vec![253; 32],
            ))
            .sequence_number(0)
            .sign(),
    );`
$DIR/language/e2e-testsuite/src/tests/validator_set_management.rs: `executor.set_golden_file(current_function_name!());`
$DIR/language/e2e-testsuite/src/tests/validator_set_management.rs: `.create_raw_account()`
$DIR/language/e2e-testsuite/src/tests/validator_set_management.rs: `.create_raw_account()`
$DIR/language/e2e-testsuite/src/tests/validator_set_management.rs: `.execute_and_apply(
        diem_root_account
            .transaction()
            .script(encode_create_validator_account_script(
                0,
                *validator_account.address(),
                validator_account.auth_key_prefix(),
                b"validator_0".to_vec(),
            ))
            .sequence_number(dr_seqno)
            .sign(),
    )`
$DIR/language/e2e-testsuite/src/tests/validator_set_management.rs: `.transaction()`
$DIR/language/e2e-testsuite/src/tests/validator_set_management.rs: `.script(encode_create_validator_account_script(
                0,
                *validator_account.address(),
                validator_account.auth_key_prefix(),
                b"validator_0".to_vec(),
            ))`
$DIR/language/e2e-testsuite/src/tests/validator_set_management.rs: `.address()`
$DIR/language/e2e-testsuite/src/tests/validator_set_management.rs: `.auth_key_prefix()`
$DIR/language/e2e-testsuite/src/tests/validator_set_management.rs: `.sequence_number(dr_seqno)`
$DIR/language/e2e-testsuite/src/tests/validator_set_management.rs: `.sign()`
$DIR/language/e2e-testsuite/src/tests/validator_set_management.rs: `.execute_and_apply(
        diem_root_account
            .transaction()
            .script(encode_create_validator_operator_account_script(
                0,
                *operator_account.address(),
                operator_account.auth_key_prefix(),
                b"operator_0".to_vec(),
            ))
            .sequence_number(dr_seqno.checked_add(1).unwrap())
            .sign(),
    )`
$DIR/language/e2e-testsuite/src/tests/validator_set_management.rs: `.transaction()`
$DIR/language/e2e-testsuite/src/tests/validator_set_management.rs: `.script(encode_create_validator_operator_account_script(
                0,
                *operator_account.address(),
                operator_account.auth_key_prefix(),
                b"operator_0".to_vec(),
            ))`
$DIR/language/e2e-testsuite/src/tests/validator_set_management.rs: `.address()`
$DIR/language/e2e-testsuite/src/tests/validator_set_management.rs: `.auth_key_prefix()`
$DIR/language/e2e-testsuite/src/tests/validator_set_management.rs: `.sequence_number(dr_seqno.checked_add(1).unwrap())`
$DIR/language/e2e-testsuite/src/tests/validator_set_management.rs: `.checked_add(1)`
$DIR/language/e2e-testsuite/src/tests/validator_set_management.rs: `.sign()`
$DIR/language/e2e-testsuite/src/tests/validator_set_management.rs: `.execute_and_apply(
        validator_account
            .transaction()
            .script(encode_set_validator_operator_script(
                b"operator_0".to_vec(),
                *operator_account.address(),
            ))
            .sequence_number(0)
            .sign(),
    )`
$DIR/language/e2e-testsuite/src/tests/validator_set_management.rs: `.transaction()`
$DIR/language/e2e-testsuite/src/tests/validator_set_management.rs: `.script(encode_set_validator_operator_script(
                b"operator_0".to_vec(),
                *operator_account.address(),
            ))`
$DIR/language/e2e-testsuite/src/tests/validator_set_management.rs: `.address()`
$DIR/language/e2e-testsuite/src/tests/validator_set_management.rs: `.sequence_number(0)`
$DIR/language/e2e-testsuite/src/tests/validator_set_management.rs: `.sign()`
$DIR/language/e2e-testsuite/src/tests/validator_set_management.rs: `.new_block()`
$DIR/language/e2e-testsuite/src/tests/validator_set_management.rs: `.execute_and_apply(
        operator_account
            .transaction()
            .script(encode_register_validator_config_script(
                *validator_account.address(),
                [
                    0xd7, 0x5a, 0x98, 0x01, 0x82, 0xb1, 0x0a, 0xb7, 0xd5, 0x4b, 0xfe, 0xd3, 0xc9,
                    0x64, 0x07, 0x3a, 0x0e, 0xe1, 0x72, 0xf3, 0xda, 0xa6, 0x23, 0x25, 0xaf, 0x02,
                    0x1a, 0x68, 0xf7, 0x07, 0x51, 0x1a,
                ]
                .to_vec(),
                vec![254; 32],
                vec![253; 32],
            ))
            .sequence_number(0)
            .sign(),
    )`
$DIR/language/e2e-testsuite/src/tests/validator_set_management.rs: `.transaction()`
$DIR/language/e2e-testsuite/src/tests/validator_set_management.rs: `.script(encode_register_validator_config_script(
                *validator_account.address(),
                [
                    0xd7, 0x5a, 0x98, 0x01, 0x82, 0xb1, 0x0a, 0xb7, 0xd5, 0x4b, 0xfe, 0xd3, 0xc9,
                    0x64, 0x07, 0x3a, 0x0e, 0xe1, 0x72, 0xf3, 0xda, 0xa6, 0x23, 0x25, 0xaf, 0x02,
                    0x1a, 0x68, 0xf7, 0x07, 0x51, 0x1a,
                ]
                .to_vec(),
                vec![254; 32],
                vec![253; 32],
            ))`
$DIR/language/e2e-testsuite/src/tests/validator_set_management.rs: `.address()`
$DIR/language/e2e-testsuite/src/tests/validator_set_management.rs: `.sequence_number(0)`
$DIR/language/e2e-testsuite/src/tests/validator_set_management.rs: `.sign()`
$DIR/language/e2e-testsuite/src/tests/validator_set_management.rs: `.transaction()`
$DIR/language/e2e-testsuite/src/tests/validator_set_management.rs: `.script(encode_add_validator_and_reconfigure_script(
                2,
                b"validator_0".to_vec(),
                *validator_account.address(),
            ))`
$DIR/language/e2e-testsuite/src/tests/validator_set_management.rs: `.address()`
$DIR/language/e2e-testsuite/src/tests/validator_set_management.rs: `.sequence_number(dr_seqno.checked_add(2).unwrap())`
$DIR/language/e2e-testsuite/src/tests/validator_set_management.rs: `.checked_add(2)`
$DIR/language/e2e-testsuite/src/tests/validator_set_management.rs: `.sign()`
$DIR/language/e2e-testsuite/src/tests/validator_set_management.rs: `.set_golden_file(current_function_name!())`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `executor.set_golden_file(current_function_name!());`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `executor.add_account_data(&sender);`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `executor.add_account_data(&secondary_signer);`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `executor.set_golden_file(current_function_name!());`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `executor.add_account_data(&sender);`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `executor.add_account_data(&secondary_signer);`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `executor.add_account_data(&third_signer);`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `executor.set_golden_file(current_function_name!());`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `executor.add_account_data(&sender);`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `executor.add_account_data(&secondary_signer);`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `executor.set_golden_file(current_function_name!());`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `executor.add_account_data(&sender);`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `executor.add_account_data(&secondary_signer);`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `executor.set_golden_file(current_function_name!());`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `executor.add_account_data(&sender);`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `executor.add_account_data(&secondary_signer);`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `executor.apply_write_set(sender_output.write_set());`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `sender_seq_num += 1;`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `executor.apply_write_set(secondary_signer_output.write_set());`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `executor.set_golden_file(current_function_name!());`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `executor.add_account_data(&sender);`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `executor.add_account_data(&secondary_signer);`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `executor.add_account_data(&third_signer);`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `executor.set_golden_file(current_function_name!());`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `executor.add_account_data(&sender);`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `executor.add_account_data(&secondary_signer);`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `executor.set_golden_file(current_function_name!());`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `executor.add_account_data(&sender);`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `executor.add_account_data(&secondary_signer);`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `executor.add_account_data(&third_signer);`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `executor.set_golden_file(current_function_name!());`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `executor.add_account_data(&sender);`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `executor.set_golden_file(current_function_name!());`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `executor.add_account_data(&sender);`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `executor.set_golden_file(current_function_name!());`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `executor.add_account_data(&sender);`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `executor.set_golden_file(current_function_name!());`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `executor.add_account_data(&sender);`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `executor.set_golden_file(current_function_name!());`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `executor.set_golden_file(current_function_name!());`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `executor.add_account_data(&sender);`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `executor.add_account_data(&receiver);`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `executor.set_golden_file(current_function_name!());`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `executor.add_account_data(&sender);`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `module.serialize(&mut bytes).unwrap();`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `module.serialize(&mut bytes).unwrap();`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `executor.set_golden_file(current_function_name!());`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `executor.add_module(&module.self_id(), bytes);`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `executor.add_account_data(&sender);`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `executor.set_golden_file(current_function_name!());`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `executor.add_module(&bad_module.self_id(), bad_module_bytes);`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `executor.add_account_data(&sender);`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `executor.set_golden_file(current_function_name!());`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `executor.add_module(&module.self_id(), bytes);`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `executor.add_account_data(&sender);`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `executor.set_golden_file(current_function_name!());`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `executor.add_module(&bad_module.self_id(), bad_module_bytes);`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `executor.add_module(&good_module.self_id(), good_module_bytes);`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `executor.add_account_data(&sender);`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `executor.set_golden_file(current_function_name!());`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `executor.add_module(&bad_module.self_id(), bad_module_bytes);`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `executor.add_module(&good_module.self_id(), good_module_bytes);`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `executor.add_account_data(&sender);`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `executor.set_golden_file(current_function_name!());`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `executor.add_module(&bad_module.self_id(), bad_module_bytes);`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `executor.add_module(&good_module.self_id(), good_module_bytes);`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `executor.add_account_data(&sender);`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `executor.set_golden_file(current_function_name!());`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `executor.new_block();`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `executor.execute_and_apply(txn);`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `executor.execute_and_apply(txn);`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `executor.exec(
        "DesignatedDealer",
        "add_currency",
        vec![coin_tag.clone()],
        serialize_values(&vec![
            MoveValue::Signer(*dd.address()),
            MoveValue::Signer(*tc_account.address()),
        ]),
    );`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `executor.execute_and_apply(txn);`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `assert_prologue_parity!(
        executor.verify_transaction(txn.clone()).status(),
        executor.execute_transaction(txn.clone()).status(),
        StatusCode::BAD_TRANSACTION_FEE_CURRENCY
    );`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `executor.exec(
        "TransactionFee",
        "add_txn_fee_currency",
        vec![coin_tag],
        serialize_values(&vec![MoveValue::Signer(*tc_account.address())]),
    );`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.set_golden_file(current_function_name!())`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.create_raw_account_data(1_000_010, 10)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.create_raw_account_data(100_100, 100)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.add_account_data(&sender)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.add_account_data(&secondary_signer)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.address()`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.account()`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.account()`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.set_golden_file(current_function_name!())`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.create_raw_account_data(1_000_010, 10)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.create_raw_account_data(100_100, 100)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.create_raw_account_data(100_100, 100)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.add_account_data(&sender)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.add_account_data(&secondary_signer)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.add_account_data(&third_signer)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.address()`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.account()`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.account()`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.set_golden_file(current_function_name!())`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.create_raw_account_data(1_000_010, 10)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.create_raw_account_data(100_100, 100)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.add_account_data(&sender)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.add_account_data(&secondary_signer)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.address()`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.account()`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.set_golden_file(current_function_name!())`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.create_raw_account_data(1_000_010, 10)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.create_raw_account_data(100_100, 100)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.add_account_data(&sender)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.add_account_data(&secondary_signer)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.address()`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.account()`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.account()`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.set_golden_file(current_function_name!())`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.create_raw_account_data(1_000_010, sender_seq_num)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.create_raw_account_data(100_100, secondary_signer_seq_num)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.add_account_data(&sender)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.add_account_data(&secondary_signer)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.map(|_| keygen.generate_keypair())`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.generate_keypair()`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.unzip()`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.map(|_| keygen.generate_keypair())`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.generate_keypair()`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.unzip()`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.execute_transaction(rotate_key_txn(
        sender.account(),
        sender_new_auth_key.to_vec(),
        sender_seq_num,
    ))`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.account()`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.apply_write_set(sender_output.write_set())`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.write_set()`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.execute_transaction(rotate_key_txn(
        secondary_signer.account(),
        secondary_signer_new_auth_key.to_vec(),
        secondary_signer_seq_num,
    ))`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.account()`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.apply_write_set(secondary_signer_output.write_set())`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.write_set()`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.account()`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.account()`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.sign(&raw_txn_with_data)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.sign(&raw_txn_with_data)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.set_golden_file(current_function_name!())`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.create_raw_account_data(1_000_010, 10)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.create_raw_account_data(100_100, 100)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.create_raw_account_data(100_100, 100)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.add_account_data(&sender)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.add_account_data(&secondary_signer)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.add_account_data(&third_signer)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.address()`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.account()`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.account()`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.set_golden_file(current_function_name!())`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.create_raw_account_data(1_000_010, 10)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.create_raw_account_data(100_100, 100)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.add_account_data(&sender)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.add_account_data(&secondary_signer)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.address()`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.account()`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.account()`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.set_golden_file(current_function_name!())`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.create_raw_account_data(1_000_010, 10)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.create_raw_account_data(100_100, 100)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.create_raw_account_data(100_100, 100)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.add_account_data(&sender)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.add_account_data(&secondary_signer)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.add_account_data(&third_signer)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.address()`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.account()`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.account()`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.set_golden_file(current_function_name!())`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.create_raw_account_data(1_000_010, 10)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.create_raw_account_data(100_100, 100)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.add_account_data(&sender)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.address()`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.account()`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.account()`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.set_golden_file(current_function_name!())`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.create_raw_account_data(1_000_000, 10)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.add_account_data(&sender)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.account()`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.transaction()`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.script(Script::new(random_script, vec![], vec![]))`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.sequence_number(10)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.max_gas_amount(100_000)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.gas_unit_price(1)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.sign()`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.set_golden_file(current_function_name!())`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.create_raw_account_data(1_000_000, 10)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.add_account_data(&sender)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.account()`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.transaction()`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.script(Script::new(random_script, vec![], vec![]))`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.sequence_number(10)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.max_gas_amount(100_000)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.gas_unit_price(1)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.sign()`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.execute_transaction(txn)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.status()`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.set_golden_file(current_function_name!())`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.create_raw_account_data(1_000_000, 10)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.add_account_data(&sender)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.account()`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.transaction()`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.module(random_module)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.sequence_number(10)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.max_gas_amount(100_000)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.gas_unit_price(1)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.sign()`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.set_golden_file(current_function_name!())`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.transaction()`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.module(random_module)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.sequence_number(1)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.max_gas_amount(100_000)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.sign()`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.set_golden_file(current_function_name!())`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.create_raw_account_data(1_000_000, 10)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.create_raw_account_data(1_000_000, 10)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.add_account_data(&sender)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.add_account_data(&receiver)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.account()`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.transaction()`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.module(random_module)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.sequence_number(10)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.max_gas_amount(100_000)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.gas_unit_price(1)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.sign()`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.execute_transaction(txn)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.status()`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.set_golden_file(current_function_name!())`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.create_raw_account_data(1_000_000, 10)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.add_account_data(&sender)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.account()`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.transaction()`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.module(random_module)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.sequence_number(10)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.max_gas_amount(100_000)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.gas_unit_price(1)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.sign()`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.into_compiled_module("file_name", bad_module_code)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.serialize(&mut bytes)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.chain(std::iter::once(&bad_dep))`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.collect()`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.into_compiled_module("file_name", good_module_code.as_str())`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.serialize(&mut bytes)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.set_golden_file(current_function_name!())`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.add_module(&module.self_id(), bytes)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.self_id()`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.create_raw_account_data(1_000_000, 10)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.add_account_data(&sender)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.into_script_blob("file_name", code)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.account()`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.transaction()`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.script(Script::new(script, vec![], vec![]))`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.sequence_number(10)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.max_gas_amount(100_000)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.gas_unit_price(1)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.sign()`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.execute_transaction(txn)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.status()`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.set_golden_file(current_function_name!())`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.add_module(&bad_module.self_id(), bad_module_bytes)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.self_id()`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.create_raw_account_data(1_000_000, 10)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.add_account_data(&sender)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.address()`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.account()`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.transaction()`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.module(good_module)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.sequence_number(10)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.max_gas_amount(100_000)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.gas_unit_price(1)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.sign()`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.execute_transaction(txn)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.status()`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.set_golden_file(current_function_name!())`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.add_module(&module.self_id(), bytes)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.self_id()`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.create_raw_account_data(1_000_000, 10)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.add_account_data(&sender)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.into_script_blob("file_name", code)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.account()`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.transaction()`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.script(Script::new(
            script,
            vec![TypeTag::Struct(StructTag {
                address: account_config::CORE_CODE_ADDRESS,
                module: Identifier::new("Test").unwrap(),
                name: Identifier::new("S1").unwrap(),
                type_params: vec![],
            })],
            vec![],
        ))`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.sequence_number(10)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.max_gas_amount(100_000)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.gas_unit_price(1)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.sign()`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.execute_transaction(txn)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.status()`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.set_golden_file(current_function_name!())`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.add_module(&bad_module.self_id(), bad_module_bytes)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.self_id()`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.add_module(&good_module.self_id(), good_module_bytes)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.self_id()`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.create_raw_account_data(1_000_000, 10)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.add_account_data(&sender)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.into_script_blob("file_name", code)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.account()`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.transaction()`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.script(Script::new(script, vec![], vec![]))`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.sequence_number(10)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.max_gas_amount(100_000)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.gas_unit_price(1)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.sign()`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.execute_transaction(txn)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.status()`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.set_golden_file(current_function_name!())`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.add_module(&bad_module.self_id(), bad_module_bytes)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.self_id()`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.add_module(&good_module.self_id(), good_module_bytes)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.self_id()`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.create_raw_account_data(1_000_000, 10)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.add_account_data(&sender)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.into_module_blob("file_name", module_code.as_str())`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.account()`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.transaction()`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.module(module)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.sequence_number(10)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.max_gas_amount(100_000)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.gas_unit_price(1)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.sign()`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.execute_transaction(txn)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.status()`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.set_golden_file(current_function_name!())`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.add_module(&bad_module.self_id(), bad_module_bytes)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.self_id()`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.add_module(&good_module.self_id(), good_module_bytes)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.self_id()`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.create_raw_account_data(1_000_000, 10)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.add_account_data(&sender)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.into_script_blob("file_name", code)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.account()`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.transaction()`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.script(Script::new(
            script,
            vec![TypeTag::Struct(StructTag {
                address: account_config::CORE_CODE_ADDRESS,
                module: Identifier::new("Test2").unwrap(),
                name: Identifier::new("S").unwrap(),
                type_params: vec![],
            })],
            vec![],
        ))`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.sequence_number(10)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.max_gas_amount(100_000)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.gas_unit_price(1)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.sign()`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.execute_transaction(txn)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.status()`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.set_golden_file(current_function_name!())`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.transaction()`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.module(module)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.sequence_number(1)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.sign()`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.into_script_blob("file_name", code)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.transaction()`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.write_set(WriteSetPayload::Script {
                script: Script::new(program, vec![], vec![]),
                execute_as: *tc_account.address(),
            })`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.address()`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.sequence_number(2)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.sign()`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.new_block()`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.execute_and_apply(txn)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.transaction()`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.script(transaction_builder::encode_create_designated_dealer_script(
            coin_tag.clone(),
            0,
            *dd.address(),
            dd.auth_key_prefix(),
            b"".to_vec(),
            true,
        ))`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.address()`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.auth_key_prefix()`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.sequence_number(0)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.sign()`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.execute_and_apply(txn)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.exec(
        "DesignatedDealer",
        "add_currency",
        vec![coin_tag.clone()],
        serialize_values(&vec![
            MoveValue::Signer(*dd.address()),
            MoveValue::Signer(*tc_account.address()),
        ]),
    )`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.transaction()`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.script(transaction_builder::encode_tiered_mint_script(
            coin_tag.clone(),
            0,
            *dd.address(),
            50000,
            1,
        ))`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.address()`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.sequence_number(1)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.sign()`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.execute_and_apply(txn)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.transaction()`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.script(
            transaction_builder::encode_peer_to_peer_with_metadata_script(
                coin_tag.clone(),
                *dd.address(),
                1,
                b"".to_vec(),
                b"".to_vec(),
            ),
        )`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.address()`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.gas_unit_price(1)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.max_gas_amount(800)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.gas_currency_code("COIN")`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.sequence_number(0)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.sign()`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.read_balance_resource(&dd, Identifier::new("COIN").unwrap())`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.exec(
        "TransactionFee",
        "add_txn_fee_currency",
        vec![coin_tag],
        serialize_values(&vec![MoveValue::Signer(*tc_account.address())]),
    )`
$DIR/language/e2e-testsuite/src/tests/writeset_builder.rs: `executor.set_golden_file(current_function_name!());`
$DIR/language/e2e-testsuite/src/tests/writeset_builder.rs: `module.serialize(&mut v).unwrap();`
$DIR/language/e2e-testsuite/src/tests/writeset_builder.rs: `session.set_diem_version(11);`
$DIR/language/e2e-testsuite/src/tests/writeset_builder.rs: `writeset.push((
            AccessPath::code_access_path(module.self_id()),
            WriteOp::Value(module_bytes),
        ));`
$DIR/language/e2e-testsuite/src/tests/writeset_builder.rs: `executor.apply_write_set(output.write_set());`
$DIR/language/e2e-testsuite/src/tests/writeset_builder.rs: `.set_golden_file(current_function_name!())`
$DIR/language/e2e-testsuite/src/tests/writeset_builder.rs: `.serialize(&mut v)`
$DIR/language/e2e-testsuite/src/tests/writeset_builder.rs: `.get_state_view()`
$DIR/language/e2e-testsuite/src/tests/writeset_builder.rs: `.set_diem_version(11)`
$DIR/language/e2e-testsuite/src/tests/writeset_builder.rs: `.into_inner()`
$DIR/language/e2e-testsuite/src/tests/writeset_builder.rs: `.into_mut()`
$DIR/language/e2e-testsuite/src/tests/writeset_builder.rs: `.push((
            AccessPath::code_access_path(module.self_id()),
            WriteOp::Value(module_bytes),
        ))`
$DIR/language/e2e-testsuite/src/tests/writeset_builder.rs: `.self_id()`
$DIR/language/e2e-testsuite/src/tests/writeset_builder.rs: `.freeze()`
$DIR/language/e2e-testsuite/src/tests/writeset_builder.rs: `.transaction()`
$DIR/language/e2e-testsuite/src/tests/writeset_builder.rs: `.write_set(WriteSetPayload::Direct(change_set))`
$DIR/language/e2e-testsuite/src/tests/writeset_builder.rs: `.sequence_number(1)`
$DIR/language/e2e-testsuite/src/tests/writeset_builder.rs: `.sign()`
$DIR/language/e2e-testsuite/src/tests/writeset_builder.rs: `.execute_transaction(writeset_txn.clone())`
$DIR/language/e2e-testsuite/src/tests/writeset_builder.rs: `.apply_write_set(output.write_set())`
$DIR/language/e2e-testsuite/src/tests/writeset_builder.rs: `.write_set()`
$DIR/language/e2e-testsuite/src/tests/writeset_builder.rs: `.get_state_view()`
$DIR/language/e2e-testsuite/src/tests/writeset_builder.rs: `.into_script_blob("file_name", code)`
$DIR/language/e2e-testsuite/src/tests/writeset_builder.rs: `.transaction()`
$DIR/language/e2e-testsuite/src/tests/writeset_builder.rs: `.script(Script::new(script_body, vec![], vec![]))`
$DIR/language/e2e-testsuite/src/tests/writeset_builder.rs: `.sequence_number(2)`
$DIR/language/e2e-testsuite/src/tests/writeset_builder.rs: `.sign()`
$DIR/language/e2e-testsuite/src/tests/writeset_builder.rs: `.execute_transaction(txn)`
$DIR/language/move-binary-format/src/unit_tests/binary_tests.rs: `binary_data.push(1).unwrap();`
$DIR/language/move-binary-format/src/unit_tests/binary_tests.rs: `.push(1)`
$DIR/language/move-binary-format/src/unit_tests/deserializer_tests.rs: `binary.extend(&version.to_le_bytes());`
$DIR/language/move-binary-format/src/unit_tests/deserializer_tests.rs: `binary.push(150);`
$DIR/language/move-binary-format/src/unit_tests/deserializer_tests.rs: `binary.push(150);`
$DIR/language/move-binary-format/src/unit_tests/deserializer_tests.rs: `binary.push(1);`
$DIR/language/move-binary-format/src/unit_tests/deserializer_tests.rs: `binary.extend(&version.to_le_bytes());`
$DIR/language/move-binary-format/src/unit_tests/deserializer_tests.rs: `binary.push(150);`
$DIR/language/move-binary-format/src/unit_tests/deserializer_tests.rs: `binary.push(150);`
$DIR/language/move-binary-format/src/unit_tests/deserializer_tests.rs: `binary.push(150);`
$DIR/language/move-binary-format/src/unit_tests/deserializer_tests.rs: `binary.push(150);`
$DIR/language/move-binary-format/src/unit_tests/deserializer_tests.rs: `binary.push(150);`
$DIR/language/move-binary-format/src/unit_tests/deserializer_tests.rs: `binary.push(150);`
$DIR/language/move-binary-format/src/unit_tests/deserializer_tests.rs: `binary.push(150);`
$DIR/language/move-binary-format/src/unit_tests/deserializer_tests.rs: `binary.push(150);`
$DIR/language/move-binary-format/src/unit_tests/deserializer_tests.rs: `binary.push(150);`
$DIR/language/move-binary-format/src/unit_tests/deserializer_tests.rs: `binary.push(150);`
$DIR/language/move-binary-format/src/unit_tests/deserializer_tests.rs: `binary.push(150);`
$DIR/language/move-binary-format/src/unit_tests/deserializer_tests.rs: `binary.push(0);`
$DIR/language/move-binary-format/src/unit_tests/deserializer_tests.rs: `binary.extend(&version.to_le_bytes());`
$DIR/language/move-binary-format/src/unit_tests/deserializer_tests.rs: `binary.push(0);`
$DIR/language/move-binary-format/src/unit_tests/deserializer_tests.rs: `binary.extend(&version.to_le_bytes());`
$DIR/language/move-binary-format/src/unit_tests/deserializer_tests.rs: `binary.push(10);`
$DIR/language/move-binary-format/src/unit_tests/deserializer_tests.rs: `binary.extend(&version.to_le_bytes());`
$DIR/language/move-binary-format/src/unit_tests/deserializer_tests.rs: `binary.push(1);`
$DIR/language/move-binary-format/src/unit_tests/deserializer_tests.rs: `binary.push(1);`
$DIR/language/move-binary-format/src/unit_tests/deserializer_tests.rs: `binary.push(0);`
$DIR/language/move-binary-format/src/unit_tests/deserializer_tests.rs: `binary.push(10);`
$DIR/language/move-binary-format/src/unit_tests/deserializer_tests.rs: `binary.extend(&version.to_le_bytes());`
$DIR/language/move-binary-format/src/unit_tests/deserializer_tests.rs: `binary.push(1);`
$DIR/language/move-binary-format/src/unit_tests/deserializer_tests.rs: `binary.push(1);`
$DIR/language/move-binary-format/src/unit_tests/deserializer_tests.rs: `binary.push(100);`
$DIR/language/move-binary-format/src/unit_tests/deserializer_tests.rs: `binary.push(10);`
$DIR/language/move-binary-format/src/unit_tests/deserializer_tests.rs: `binary.extend(&version.to_le_bytes());`
$DIR/language/move-binary-format/src/unit_tests/deserializer_tests.rs: `binary.push(2);`
$DIR/language/move-binary-format/src/unit_tests/deserializer_tests.rs: `binary.push(1);`
$DIR/language/move-binary-format/src/unit_tests/deserializer_tests.rs: `binary.push(0);`
$DIR/language/move-binary-format/src/unit_tests/deserializer_tests.rs: `binary.push(10);`
$DIR/language/move-binary-format/src/unit_tests/deserializer_tests.rs: `binary.push(2);`
$DIR/language/move-binary-format/src/unit_tests/deserializer_tests.rs: `binary.push(100);`
$DIR/language/move-binary-format/src/unit_tests/deserializer_tests.rs: `binary.push(10);`
$DIR/language/move-binary-format/src/unit_tests/deserializer_tests.rs: `binary.resize(binary.len() + 5000, 0);`
$DIR/language/move-binary-format/src/unit_tests/deserializer_tests.rs: `binary.extend(&version.to_le_bytes());`
$DIR/language/move-binary-format/src/unit_tests/deserializer_tests.rs: `binary.push(1);`
$DIR/language/move-binary-format/src/unit_tests/deserializer_tests.rs: `binary.push(1);`
$DIR/language/move-binary-format/src/unit_tests/deserializer_tests.rs: `binary.push(0);`
$DIR/language/move-binary-format/src/unit_tests/deserializer_tests.rs: `binary.push(10);`
$DIR/language/move-binary-format/src/unit_tests/deserializer_tests.rs: `binary.resize(binary.len() + 5, 0);`
$DIR/language/move-binary-format/src/unit_tests/deserializer_tests.rs: `binary.extend(&version.to_le_bytes());`
$DIR/language/move-binary-format/src/unit_tests/deserializer_tests.rs: `binary.push(1);`
$DIR/language/move-binary-format/src/unit_tests/deserializer_tests.rs: `binary.push(100);`
$DIR/language/move-binary-format/src/unit_tests/deserializer_tests.rs: `binary.push(0);`
$DIR/language/move-binary-format/src/unit_tests/deserializer_tests.rs: `binary.push(10);`
$DIR/language/move-binary-format/src/unit_tests/deserializer_tests.rs: `binary.resize(binary.len() + 10, 0);`
$DIR/language/move-binary-format/src/unit_tests/deserializer_tests.rs: `binary.extend(&version.to_le_bytes());`
$DIR/language/move-binary-format/src/unit_tests/deserializer_tests.rs: `binary.push(3);`
$DIR/language/move-binary-format/src/unit_tests/deserializer_tests.rs: `binary.push(1);`
$DIR/language/move-binary-format/src/unit_tests/deserializer_tests.rs: `binary.push(0);`
$DIR/language/move-binary-format/src/unit_tests/deserializer_tests.rs: `binary.push(10);`
$DIR/language/move-binary-format/src/unit_tests/deserializer_tests.rs: `binary.push(2);`
$DIR/language/move-binary-format/src/unit_tests/deserializer_tests.rs: `binary.push(10);`
$DIR/language/move-binary-format/src/unit_tests/deserializer_tests.rs: `binary.push(10);`
$DIR/language/move-binary-format/src/unit_tests/deserializer_tests.rs: `binary.push(1);`
$DIR/language/move-binary-format/src/unit_tests/deserializer_tests.rs: `binary.push(20);`
$DIR/language/move-binary-format/src/unit_tests/deserializer_tests.rs: `binary.push(10);`
$DIR/language/move-binary-format/src/unit_tests/deserializer_tests.rs: `binary.resize(binary.len() + 5000, 0);`
$DIR/language/move-binary-format/src/unit_tests/deserializer_tests.rs: `binary.extend(&version.to_le_bytes());`
$DIR/language/move-binary-format/src/unit_tests/deserializer_tests.rs: `binary.push(1);`
$DIR/language/move-binary-format/src/unit_tests/deserializer_tests.rs: `binary.push(0xD);`
$DIR/language/move-binary-format/src/unit_tests/deserializer_tests.rs: `binary.push(0);`
$DIR/language/move-binary-format/src/unit_tests/deserializer_tests.rs: `binary.push(10);`
$DIR/language/move-binary-format/src/unit_tests/deserializer_tests.rs: `binary.resize(binary.len() + 5000, 0);`
$DIR/language/move-binary-format/src/unit_tests/deserializer_tests.rs: `binary.extend(&(VERSION_MAX.checked_add(1).unwrap()).to_le_bytes());`
$DIR/language/move-binary-format/src/unit_tests/deserializer_tests.rs: `binary.push(10);`
$DIR/language/move-binary-format/src/unit_tests/deserializer_tests.rs: `binary.push(0);`
$DIR/language/move-binary-format/src/unit_tests/deserializer_tests.rs: `.extend(&version.to_le_bytes())`
$DIR/language/move-binary-format/src/unit_tests/deserializer_tests.rs: `.to_le_bytes()`
$DIR/language/move-binary-format/src/unit_tests/deserializer_tests.rs: `.push(150)`
$DIR/language/move-binary-format/src/unit_tests/deserializer_tests.rs: `.push(150)`
$DIR/language/move-binary-format/src/unit_tests/deserializer_tests.rs: `.push(1)`
$DIR/language/move-binary-format/src/unit_tests/deserializer_tests.rs: `.extend(&version.to_le_bytes())`
$DIR/language/move-binary-format/src/unit_tests/deserializer_tests.rs: `.to_le_bytes()`
$DIR/language/move-binary-format/src/unit_tests/deserializer_tests.rs: `.push(150)`
$DIR/language/move-binary-format/src/unit_tests/deserializer_tests.rs: `.push(150)`
$DIR/language/move-binary-format/src/unit_tests/deserializer_tests.rs: `.push(150)`
$DIR/language/move-binary-format/src/unit_tests/deserializer_tests.rs: `.push(150)`
$DIR/language/move-binary-format/src/unit_tests/deserializer_tests.rs: `.push(150)`
$DIR/language/move-binary-format/src/unit_tests/deserializer_tests.rs: `.push(150)`
$DIR/language/move-binary-format/src/unit_tests/deserializer_tests.rs: `.push(150)`
$DIR/language/move-binary-format/src/unit_tests/deserializer_tests.rs: `.push(150)`
$DIR/language/move-binary-format/src/unit_tests/deserializer_tests.rs: `.push(150)`
$DIR/language/move-binary-format/src/unit_tests/deserializer_tests.rs: `.push(150)`
$DIR/language/move-binary-format/src/unit_tests/deserializer_tests.rs: `.push(150)`
$DIR/language/move-binary-format/src/unit_tests/deserializer_tests.rs: `.push(0)`
$DIR/language/move-binary-format/src/unit_tests/deserializer_tests.rs: `.extend(&version.to_le_bytes())`
$DIR/language/move-binary-format/src/unit_tests/deserializer_tests.rs: `.to_le_bytes()`
$DIR/language/move-binary-format/src/unit_tests/deserializer_tests.rs: `.push(0)`
$DIR/language/move-binary-format/src/unit_tests/deserializer_tests.rs: `.extend(&version.to_le_bytes())`
$DIR/language/move-binary-format/src/unit_tests/deserializer_tests.rs: `.to_le_bytes()`
$DIR/language/move-binary-format/src/unit_tests/deserializer_tests.rs: `.push(10)`
$DIR/language/move-binary-format/src/unit_tests/deserializer_tests.rs: `.extend(&version.to_le_bytes())`
$DIR/language/move-binary-format/src/unit_tests/deserializer_tests.rs: `.to_le_bytes()`
$DIR/language/move-binary-format/src/unit_tests/deserializer_tests.rs: `.push(1)`
$DIR/language/move-binary-format/src/unit_tests/deserializer_tests.rs: `.push(1)`
$DIR/language/move-binary-format/src/unit_tests/deserializer_tests.rs: `.push(0)`
$DIR/language/move-binary-format/src/unit_tests/deserializer_tests.rs: `.push(10)`
$DIR/language/move-binary-format/src/unit_tests/deserializer_tests.rs: `.extend(&version.to_le_bytes())`
$DIR/language/move-binary-format/src/unit_tests/deserializer_tests.rs: `.to_le_bytes()`
$DIR/language/move-binary-format/src/unit_tests/deserializer_tests.rs: `.push(1)`
$DIR/language/move-binary-format/src/unit_tests/deserializer_tests.rs: `.push(1)`
$DIR/language/move-binary-format/src/unit_tests/deserializer_tests.rs: `.push(100)`
$DIR/language/move-binary-format/src/unit_tests/deserializer_tests.rs: `.push(10)`
$DIR/language/move-binary-format/src/unit_tests/deserializer_tests.rs: `.extend(&version.to_le_bytes())`
$DIR/language/move-binary-format/src/unit_tests/deserializer_tests.rs: `.to_le_bytes()`
$DIR/language/move-binary-format/src/unit_tests/deserializer_tests.rs: `.push(2)`
$DIR/language/move-binary-format/src/unit_tests/deserializer_tests.rs: `.push(1)`
$DIR/language/move-binary-format/src/unit_tests/deserializer_tests.rs: `.push(0)`
$DIR/language/move-binary-format/src/unit_tests/deserializer_tests.rs: `.push(10)`
$DIR/language/move-binary-format/src/unit_tests/deserializer_tests.rs: `.push(2)`
$DIR/language/move-binary-format/src/unit_tests/deserializer_tests.rs: `.push(100)`
$DIR/language/move-binary-format/src/unit_tests/deserializer_tests.rs: `.push(10)`
$DIR/language/move-binary-format/src/unit_tests/deserializer_tests.rs: `.resize(binary.len() + 5000, 0)`
$DIR/language/move-binary-format/src/unit_tests/deserializer_tests.rs: `.len()`
$DIR/language/move-binary-format/src/unit_tests/deserializer_tests.rs: `.extend(&version.to_le_bytes())`
$DIR/language/move-binary-format/src/unit_tests/deserializer_tests.rs: `.to_le_bytes()`
$DIR/language/move-binary-format/src/unit_tests/deserializer_tests.rs: `.push(1)`
$DIR/language/move-binary-format/src/unit_tests/deserializer_tests.rs: `.push(1)`
$DIR/language/move-binary-format/src/unit_tests/deserializer_tests.rs: `.push(0)`
$DIR/language/move-binary-format/src/unit_tests/deserializer_tests.rs: `.push(10)`
$DIR/language/move-binary-format/src/unit_tests/deserializer_tests.rs: `.resize(binary.len() + 5, 0)`
$DIR/language/move-binary-format/src/unit_tests/deserializer_tests.rs: `.len()`
$DIR/language/move-binary-format/src/unit_tests/deserializer_tests.rs: `.extend(&version.to_le_bytes())`
$DIR/language/move-binary-format/src/unit_tests/deserializer_tests.rs: `.to_le_bytes()`
$DIR/language/move-binary-format/src/unit_tests/deserializer_tests.rs: `.push(1)`
$DIR/language/move-binary-format/src/unit_tests/deserializer_tests.rs: `.push(100)`
$DIR/language/move-binary-format/src/unit_tests/deserializer_tests.rs: `.push(0)`
$DIR/language/move-binary-format/src/unit_tests/deserializer_tests.rs: `.push(10)`
$DIR/language/move-binary-format/src/unit_tests/deserializer_tests.rs: `.resize(binary.len() + 10, 0)`
$DIR/language/move-binary-format/src/unit_tests/deserializer_tests.rs: `.len()`
$DIR/language/move-binary-format/src/unit_tests/deserializer_tests.rs: `.extend(&version.to_le_bytes())`
$DIR/language/move-binary-format/src/unit_tests/deserializer_tests.rs: `.to_le_bytes()`
$DIR/language/move-binary-format/src/unit_tests/deserializer_tests.rs: `.push(3)`
$DIR/language/move-binary-format/src/unit_tests/deserializer_tests.rs: `.push(1)`
$DIR/language/move-binary-format/src/unit_tests/deserializer_tests.rs: `.push(0)`
$DIR/language/move-binary-format/src/unit_tests/deserializer_tests.rs: `.push(10)`
$DIR/language/move-binary-format/src/unit_tests/deserializer_tests.rs: `.push(2)`
$DIR/language/move-binary-format/src/unit_tests/deserializer_tests.rs: `.push(10)`
$DIR/language/move-binary-format/src/unit_tests/deserializer_tests.rs: `.push(10)`
$DIR/language/move-binary-format/src/unit_tests/deserializer_tests.rs: `.push(1)`
$DIR/language/move-binary-format/src/unit_tests/deserializer_tests.rs: `.push(20)`
$DIR/language/move-binary-format/src/unit_tests/deserializer_tests.rs: `.push(10)`
$DIR/language/move-binary-format/src/unit_tests/deserializer_tests.rs: `.resize(binary.len() + 5000, 0)`
$DIR/language/move-binary-format/src/unit_tests/deserializer_tests.rs: `.len()`
$DIR/language/move-binary-format/src/unit_tests/deserializer_tests.rs: `.extend(&version.to_le_bytes())`
$DIR/language/move-binary-format/src/unit_tests/deserializer_tests.rs: `.to_le_bytes()`
$DIR/language/move-binary-format/src/unit_tests/deserializer_tests.rs: `.push(1)`
$DIR/language/move-binary-format/src/unit_tests/deserializer_tests.rs: `.push(0xD)`
$DIR/language/move-binary-format/src/unit_tests/deserializer_tests.rs: `.push(0)`
$DIR/language/move-binary-format/src/unit_tests/deserializer_tests.rs: `.push(10)`
$DIR/language/move-binary-format/src/unit_tests/deserializer_tests.rs: `.resize(binary.len() + 5000, 0)`
$DIR/language/move-binary-format/src/unit_tests/deserializer_tests.rs: `.len()`
$DIR/language/move-binary-format/src/unit_tests/deserializer_tests.rs: `.extend(&(VERSION_MAX.checked_add(1).unwrap()).to_le_bytes())`
$DIR/language/move-binary-format/src/unit_tests/deserializer_tests.rs: `.checked_add(1)`
$DIR/language/move-binary-format/src/unit_tests/deserializer_tests.rs: `.to_le_bytes()`
$DIR/language/move-binary-format/src/unit_tests/deserializer_tests.rs: `.push(10)`
$DIR/language/move-binary-format/src/unit_tests/deserializer_tests.rs: `.push(0)`
$DIR/language/move-binary-format/src/unit_tests/number_tests.rs: `last_byte = true;`
$DIR/language/move-binary-format/src/unit_tests/number_tests.rs: `write_u64_as_uleb128(&mut buf, value).expect("serialization should work");`
$DIR/language/move-binary-format/src/unit_tests/number_tests.rs: `n += 1;`
$DIR/language/move-binary-format/src/unit_tests/number_tests.rs: `.into_inner()`
$DIR/language/move-binary-format/src/unit_tests/number_tests.rs: `.pow(exp)`
$DIR/language/move-binary-format/src/unit_tests/number_tests.rs: `.pow(exp)`
$DIR/language/move-binary-format/src/unit_tests/signature_token_tests.rs: `ty = SignatureToken::Vector(Box::new(ty));`
$DIR/language/move-binary-format/src/unit_tests/signature_token_tests.rs: `serialize_signature_token(&mut binary, &ty).expect("serialization should succeed");`
$DIR/language/move-binary-format/src/unit_tests/signature_token_tests.rs: `load_signature_token_test_entry(cursor).expect("deserialization should succeed");`
$DIR/language/move-binary-format/src/unit_tests/signature_token_tests.rs: `ty = SignatureToken::Vector(Box::new(ty));`
$DIR/language/move-binary-format/src/unit_tests/signature_token_tests.rs: `ty = SignatureToken::Vector(Box::new(ty));`
$DIR/language/move-binary-format/src/unit_tests/signature_token_tests.rs: `serialize_signature_token(&mut binary, &ty).expect_err("serialization should fail");`
$DIR/language/move-binary-format/src/unit_tests/signature_token_tests.rs: `serialize_signature_token_unchecked(&mut binary, &ty)
            .expect("serialization (unchecked) should succeed");`
$DIR/language/move-binary-format/src/unit_tests/signature_token_tests.rs: `load_signature_token_test_entry(cursor).expect_err("deserialization should fail");`
$DIR/language/move-binary-format/src/unit_tests/signature_token_tests.rs: `.as_inner()`
$DIR/language/move-binary-format/src/unit_tests/signature_token_tests.rs: `.as_inner()`
$DIR/language/move-command-line-common/src/character_sets.rs: `good_chars.push(0x0A);`
$DIR/language/move-command-line-common/src/character_sets.rs: `good_chars.push(0x09);`
$DIR/language/move-command-line-common/src/character_sets.rs: `bad_chars.append(&mut (0x0B..=0x1F).collect::<Vec<u8>>());`
$DIR/language/move-command-line-common/src/character_sets.rs: `bad_chars.push(0x7F);`
$DIR/language/move-command-line-common/src/character_sets.rs: `.collect::<Vec<u8>>()`
$DIR/language/move-command-line-common/src/character_sets.rs: `.push(0x0A)`
$DIR/language/move-command-line-common/src/character_sets.rs: `.push(0x09)`
$DIR/language/move-command-line-common/src/character_sets.rs: `.collect::<Vec<u8>>()`
$DIR/language/move-command-line-common/src/character_sets.rs: `.append(&mut (0x0B..=0x1F).collect::<Vec<u8>>())`
$DIR/language/move-command-line-common/src/character_sets.rs: `.collect::<Vec<u8>>()`
$DIR/language/move-command-line-common/src/character_sets.rs: `.push(0x7F)`
$DIR/language/move-core/types/src/account_address.rs: `AccountAddress::from_hex_literal(hex).unwrap_err();`
$DIR/language/move-core/types/src/vm_status.rs: `seen_codes.insert(*major_status_code);`
$DIR/language/move-core/types/src/vm_status.rs: `seen_statuses.insert(unwrapped_status);`
$DIR/language/move-core/types/src/vm_status.rs: `.contains(&possible_major_status_code)`
$DIR/language/move-core/types/src/vm_status.rs: `.insert(*major_status_code)`
$DIR/language/move-core/types/src/vm_status.rs: `.insert(unwrapped_status)`
$DIR/language/move-prover/bytecode/src/graph.rs: `back_edges.push(*e);`
$DIR/language/move-prover/bytecode/src/graph.rs: `loop_headers.insert(e.1);`
$DIR/language/move-prover/bytecode/src/graph.rs: `non_back_edges.push(*e);`
$DIR/language/move-prover/bytecode/src/graph.rs: `visited.insert(self.entry, false);`
$DIR/language/move-prover/bytecode/src/graph.rs: `stack.push(self.entry);`
$DIR/language/move-prover/bytecode/src/graph.rs: `visited.entry(n).and_modify(|x| {
                    *x = false;
                });`
$DIR/language/move-prover/bytecode/src/graph.rs: `*x = false;`
$DIR/language/move-prover/bytecode/src/graph.rs: `stack.push(n);`
$DIR/language/move-prover/bytecode/src/graph.rs: `visited.entry(n).and_modify(|x| {
                *x = true;
            });`
$DIR/language/move-prover/bytecode/src/graph.rs: `*x = true;`
$DIR/language/move-prover/bytecode/src/graph.rs: `visited.insert(*s, false);`
$DIR/language/move-prover/bytecode/src/graph.rs: `stack.push(*s);`
$DIR/language/move-prover/bytecode/src/graph.rs: `loop_body.insert(loop_header);`
$DIR/language/move-prover/bytecode/src/graph.rs: `loop_body.insert(loop_latch);`
$DIR/language/move-prover/bytecode/src/graph.rs: `stack.push(loop_latch);`
$DIR/language/move-prover/bytecode/src/graph.rs: `loop_body.insert(*p);`
$DIR/language/move-prover/bytecode/src/graph.rs: `stack.push(*p);`
$DIR/language/move-prover/bytecode/src/graph.rs: `curr_num = self.idom_tree[&curr_num];`
$DIR/language/move-prover/bytecode/src/graph.rs: `.push(*e)`
$DIR/language/move-prover/bytecode/src/graph.rs: `.insert(e.1)`
$DIR/language/move-prover/bytecode/src/graph.rs: `.push(*e)`
$DIR/language/move-prover/bytecode/src/graph.rs: `.into_iter()`
$DIR/language/move-prover/bytecode/src/graph.rs: `.map(|edge| self.natural_loop(edge))`
$DIR/language/move-prover/bytecode/src/graph.rs: `.collect()`
$DIR/language/move-prover/bytecode/src/graph.rs: `.insert(self.entry, false)`
$DIR/language/move-prover/bytecode/src/graph.rs: `.push(self.entry)`
$DIR/language/move-prover/bytecode/src/graph.rs: `.is_empty()`
$DIR/language/move-prover/bytecode/src/graph.rs: `.pop()`
$DIR/language/move-prover/bytecode/src/graph.rs: `.entry(n)`
$DIR/language/move-prover/bytecode/src/graph.rs: `.and_modify(|x| {
                    *x = false;
                })`
$DIR/language/move-prover/bytecode/src/graph.rs: `.push(n)`
$DIR/language/move-prover/bytecode/src/graph.rs: `.entry(n)`
$DIR/language/move-prover/bytecode/src/graph.rs: `.and_modify(|x| {
                *x = true;
            })`
$DIR/language/move-prover/bytecode/src/graph.rs: `.contains_key(s)`
$DIR/language/move-prover/bytecode/src/graph.rs: `.insert(*s, false)`
$DIR/language/move-prover/bytecode/src/graph.rs: `.push(*s)`
$DIR/language/move-prover/bytecode/src/graph.rs: `.insert(loop_header)`
$DIR/language/move-prover/bytecode/src/graph.rs: `.insert(loop_latch)`
$DIR/language/move-prover/bytecode/src/graph.rs: `.push(loop_latch)`
$DIR/language/move-prover/bytecode/src/graph.rs: `.is_empty()`
$DIR/language/move-prover/bytecode/src/graph.rs: `.pop()`
$DIR/language/move-prover/bytecode/src/graph.rs: `.contains(p)`
$DIR/language/move-prover/bytecode/src/graph.rs: `.insert(*p)`
$DIR/language/move-prover/bytecode/src/graph.rs: `.push(*p)`
$DIR/language/move-prover/bytecode/src/graph.rs: `.entry_num()`
$DIR/language/move-stdlib/src/tests.rs: `crate::build_stdlib_doc(&temp_dir.path().to_string_lossy());`
$DIR/language/move-stdlib/src/tests.rs: `crate::build_error_code_map(&temp_file.path().to_string_lossy());`
$DIR/language/move-stdlib/src/tests.rs: `.path()`
$DIR/language/move-stdlib/src/tests.rs: `.to_string_lossy()`
$DIR/language/move-stdlib/src/tests.rs: `.path()`
$DIR/language/move-stdlib/src/tests.rs: `.to_string_lossy()`
$DIR/language/move-symbol-pool/src/lib.rs: `.lock()`
$DIR/language/move-symbol-pool/src/pool.rs: `ptr = entry.next.as_mut();`
$DIR/language/move-symbol-pool/src/pool.rs: `self.0[bucket_index] = Some(entry);`
$DIR/language/move-symbol-pool/src/pool.rs: `.take()`
$DIR/language/move-symbol-pool/src/pool.rs: `.take()`
$DIR/language/move-vm/integration-tests/src/tests/bad_entry_point_tests.rs: `m.serialize(&mut blob).unwrap();`
$DIR/language/move-vm/integration-tests/src/tests/bad_entry_point_tests.rs: `storage.publish_or_overwrite_module(module_id.clone(), blob);`
$DIR/language/move-vm/integration-tests/src/tests/bad_entry_point_tests.rs: `.new_session(&storage)`
$DIR/language/move-vm/integration-tests/src/tests/bad_entry_point_tests.rs: `.execute_function(
            &module_id,
            &fun_name,
            vec![],
            serialize_values(&vec![MoveValue::Signer(TEST_ADDR)]),
            &mut gas_status,
        )`
$DIR/language/move-vm/integration-tests/src/tests/bad_entry_point_tests.rs: `.replace("{{ADDR}}", &format!("0x{}", TEST_ADDR))`
$DIR/language/move-vm/integration-tests/src/tests/bad_entry_point_tests.rs: `.pop()`
$DIR/language/move-vm/integration-tests/src/tests/bad_entry_point_tests.rs: `.serialize(&mut blob)`
$DIR/language/move-vm/integration-tests/src/tests/bad_entry_point_tests.rs: `.publish_or_overwrite_module(module_id.clone(), blob)`
$DIR/language/move-vm/integration-tests/src/tests/bad_entry_point_tests.rs: `.new_session(&storage)`
$DIR/language/move-vm/integration-tests/src/tests/bad_entry_point_tests.rs: `.execute_function(
            &module_id,
            &fun_name,
            vec![],
            serialize_values(&vec![MoveValue::Signer(TEST_ADDR)]),
            &mut gas_status,
        )`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `ms.serialize(&mut blob).unwrap();`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `storage.publish_or_overwrite_module(ms.self_id(), blob);`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `m.serialize(&mut blob).unwrap();`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `storage.publish_or_overwrite_module(m.self_id(), blob);`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `s1.serialize(&mut script_blob).unwrap();`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `sess.execute_script(
        script_blob,
        vec![],
        vec![],
        vec![TEST_ADDR],
        &mut gas_status,
    )
    .unwrap();`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `storage.apply(changeset).unwrap();`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `s2.serialize(&mut script_blob).unwrap();`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `sess.execute_script(
            script_blob.clone(),
            vec![],
            vec![],
            vec![TEST_ADDR],
            &mut gas_status,
        )
        .unwrap();`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `storage.publish_or_overwrite_resource(
        TEST_ADDR,
        StructTag {
            address: TEST_ADDR,
            module: Identifier::new("M").unwrap(),
            name: Identifier::new("Foo").unwrap(),
            type_params: vec![],
        },
        vec![0x3, 0x4, 0x5],
    );`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `m.serialize(&mut blob).unwrap();`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `storage.publish_or_overwrite_module(m.self_id(), blob.clone());`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `sess.execute_function(&module_id, &fun_name, vec![], vec![], &mut gas_status)
            .unwrap();`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `blob[0] = 0xde;`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `blob[1] = 0xad;`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `blob[2] = 0xbe;`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `blob[3] = 0xef;`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `storage.publish_or_overwrite_module(m.self_id(), blob);`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `m.serialize(&mut blob).unwrap();`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `storage.publish_or_overwrite_module(m.self_id(), blob);`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `sess.execute_function(&module_id, &fun_name, vec![], vec![], &mut gas_status)
            .unwrap();`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `m.function_defs[0].code.as_mut().unwrap().code = vec![];`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `m.serialize(&mut blob).unwrap();`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `storage.publish_or_overwrite_module(m.self_id(), blob);`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `m.serialize(&mut blob_m).unwrap();`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `n.serialize(&mut blob_n).unwrap();`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `storage.publish_or_overwrite_module(m.self_id(), blob_m);`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `storage.publish_or_overwrite_module(n.self_id(), blob_n.clone());`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `sess.execute_function(&module_id, &fun_name, vec![], vec![], &mut gas_status)
            .unwrap();`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `storage.publish_or_overwrite_module(n.self_id(), blob_n);`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `m.serialize(&mut blob_m).unwrap();`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `n.serialize(&mut blob_n).unwrap();`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `storage.publish_or_overwrite_module(m.self_id(), blob_m.clone());`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `storage.publish_or_overwrite_module(n.self_id(), blob_n.clone());`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `sess.execute_function(&module_id, &fun_name, vec![], vec![], &mut gas_status)
            .unwrap();`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `blob_m[0] = 0xde;`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `blob_m[1] = 0xad;`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `blob_m[2] = 0xbe;`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `blob_m[3] = 0xef;`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `storage.publish_or_overwrite_module(m.self_id(), blob_m);`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `storage.publish_or_overwrite_module(n.self_id(), blob_n);`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `n.serialize(&mut blob_n).unwrap();`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `m.serialize(&mut blob_m).unwrap();`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `storage.publish_or_overwrite_module(m.self_id(), blob_m);`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `storage.publish_or_overwrite_module(n.self_id(), blob_n.clone());`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `sess.execute_function(&module_id, &fun_name, vec![], vec![], &mut gas_status)
            .unwrap();`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `m.function_defs[0].code.as_mut().unwrap().code = vec![];`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `m.serialize(&mut blob_m).unwrap();`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `storage.publish_or_overwrite_module(m.self_id(), blob_m);`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `storage.publish_or_overwrite_module(n.self_id(), blob_n);`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `m.serialize(&mut m_blob).unwrap();`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `s.serialize(&mut s_blob).unwrap();`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `delta.publish_module(m.self_id(), m_blob).unwrap();`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `delta.publish_module(s.self_id(), s_blob).unwrap();`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `sess.execute_function(&m_id, &foo_name, vec![], vec![], &mut gas_status)
            .unwrap();`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `.replace("{{ADDR}}", &format!("0x{}", TEST_ADDR))`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `.pop()`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `.pop()`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `.pop()`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `.pop()`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `.serialize(&mut blob)`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `.publish_or_overwrite_module(ms.self_id(), blob)`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `.self_id()`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `.serialize(&mut blob)`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `.publish_or_overwrite_module(m.self_id(), blob)`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `.self_id()`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `.serialize(&mut script_blob)`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `.new_session(&storage)`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `.execute_script(
        script_blob,
        vec![],
        vec![],
        vec![TEST_ADDR],
        &mut gas_status,
    )`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `.finish()`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `.apply(changeset)`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `.serialize(&mut script_blob)`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `.new_session(&storage)`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `.execute_script(
            script_blob.clone(),
            vec![],
            vec![],
            vec![TEST_ADDR],
            &mut gas_status,
        )`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `.publish_or_overwrite_resource(
        TEST_ADDR,
        StructTag {
            address: TEST_ADDR,
            module: Identifier::new("M").unwrap(),
            name: Identifier::new("Foo").unwrap(),
            type_params: vec![],
        },
        vec![0x3, 0x4, 0x5],
    )`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `.new_session(&storage)`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `.execute_script(
                script_blob,
                vec![],
                vec![],
                vec![TEST_ADDR],
                &mut gas_status,
            )`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `.replace("{{ADDR}}", &format!("0x{}", TEST_ADDR))`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `.pop()`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `.serialize(&mut blob)`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `.publish_or_overwrite_module(m.self_id(), blob.clone())`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `.self_id()`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `.new_session(&storage)`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `.execute_function(&module_id, &fun_name, vec![], vec![], &mut gas_status)`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `.publish_or_overwrite_module(m.self_id(), blob)`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `.self_id()`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `.new_session(&storage)`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `.execute_function(&module_id, &fun_name, vec![], vec![], &mut gas_status)`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `.replace("{{ADDR}}", &format!("0x{}", TEST_ADDR))`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `.pop()`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `.serialize(&mut blob)`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `.publish_or_overwrite_module(m.self_id(), blob)`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `.self_id()`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `.new_session(&storage)`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `.execute_function(&module_id, &fun_name, vec![], vec![], &mut gas_status)`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `.serialize(&mut blob)`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `.publish_or_overwrite_module(m.self_id(), blob)`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `.self_id()`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `.new_session(&storage)`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `.execute_function(&module_id, &fun_name, vec![], vec![], &mut gas_status)`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `.replace("{{ADDR}}", &format!("0x{}", TEST_ADDR))`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `.pop()`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `.pop()`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `.serialize(&mut blob_m)`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `.serialize(&mut blob_n)`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `.publish_or_overwrite_module(m.self_id(), blob_m)`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `.self_id()`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `.publish_or_overwrite_module(n.self_id(), blob_n.clone())`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `.self_id()`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `.new_session(&storage)`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `.execute_function(&module_id, &fun_name, vec![], vec![], &mut gas_status)`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `.publish_or_overwrite_module(n.self_id(), blob_n)`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `.self_id()`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `.new_session(&storage)`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `.execute_function(&module_id, &fun_name, vec![], vec![], &mut gas_status)`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `.replace("{{ADDR}}", &format!("0x{}", TEST_ADDR))`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `.pop()`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `.pop()`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `.serialize(&mut blob_m)`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `.serialize(&mut blob_n)`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `.publish_or_overwrite_module(m.self_id(), blob_m.clone())`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `.self_id()`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `.publish_or_overwrite_module(n.self_id(), blob_n.clone())`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `.self_id()`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `.new_session(&storage)`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `.execute_function(&module_id, &fun_name, vec![], vec![], &mut gas_status)`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `.publish_or_overwrite_module(m.self_id(), blob_m)`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `.self_id()`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `.publish_or_overwrite_module(n.self_id(), blob_n)`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `.self_id()`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `.new_session(&storage)`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `.execute_function(&module_id, &fun_name, vec![], vec![], &mut gas_status)`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `.replace("{{ADDR}}", &format!("0x{}", TEST_ADDR))`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `.pop()`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `.pop()`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `.serialize(&mut blob_n)`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `.serialize(&mut blob_m)`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `.publish_or_overwrite_module(m.self_id(), blob_m)`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `.self_id()`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `.publish_or_overwrite_module(n.self_id(), blob_n.clone())`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `.self_id()`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `.new_session(&storage)`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `.execute_function(&module_id, &fun_name, vec![], vec![], &mut gas_status)`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `.serialize(&mut blob_m)`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `.publish_or_overwrite_module(m.self_id(), blob_m)`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `.self_id()`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `.publish_or_overwrite_module(n.self_id(), blob_n)`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `.self_id()`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `.new_session(&storage)`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `.execute_function(&module_id, &fun_name, vec![], vec![], &mut gas_status)`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `.new_session(&storage)`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `.execute_function(&module_id, &fun_name, vec![], vec![], &mut gas_status)`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `.replace("{{ADDR}}", &format!("0x{}", TEST_ADDR))`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `.pop()`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `.pop()`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `.serialize(&mut m_blob)`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `.serialize(&mut s_blob)`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `.publish_module(m.self_id(), m_blob)`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `.self_id()`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `.publish_module(s.self_id(), s_blob)`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `.self_id()`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `.self_id()`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `.new_session(&storage)`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `.execute_function(&m_id, &foo_name, vec![], vec![], &mut gas_status)`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `.execute_function(
                &m_id,
                &bar_name,
                vec![],
                serialize_values(&vec![MoveValue::Signer(TEST_ADDR)]),
                &mut gas_status,
            )`
$DIR/language/move-vm/integration-tests/src/tests/function_arg_tests.rs: `m.serialize(&mut blob).unwrap();`
$DIR/language/move-vm/integration-tests/src/tests/function_arg_tests.rs: `storage.publish_or_overwrite_module(module_id.clone(), blob);`
$DIR/language/move-vm/integration-tests/src/tests/function_arg_tests.rs: `sess.execute_function(&module_id, &fun_name, ty_args, args, &mut gas_status)?;`
$DIR/language/move-vm/integration-tests/src/tests/function_arg_tests.rs: `.map(|var| format!("{}: copy + drop", var))`
$DIR/language/move-vm/integration-tests/src/tests/function_arg_tests.rs: `.collect::<Vec<_>>()`
$DIR/language/move-vm/integration-tests/src/tests/function_arg_tests.rs: `.join(", ")`
$DIR/language/move-vm/integration-tests/src/tests/function_arg_tests.rs: `.enumerate()`
$DIR/language/move-vm/integration-tests/src/tests/function_arg_tests.rs: `.map(|(idx, ty)| format!("_x{}: {}", idx, ty))`
$DIR/language/move-vm/integration-tests/src/tests/function_arg_tests.rs: `.collect::<Vec<_>>()`
$DIR/language/move-vm/integration-tests/src/tests/function_arg_tests.rs: `.join(", ")`
$DIR/language/move-vm/integration-tests/src/tests/function_arg_tests.rs: `.pop()`
$DIR/language/move-vm/integration-tests/src/tests/function_arg_tests.rs: `.serialize(&mut blob)`
$DIR/language/move-vm/integration-tests/src/tests/function_arg_tests.rs: `.publish_or_overwrite_module(module_id.clone(), blob)`
$DIR/language/move-vm/integration-tests/src/tests/function_arg_tests.rs: `.new_session(&storage)`
$DIR/language/move-vm/integration-tests/src/tests/function_arg_tests.rs: `.into_iter()`
$DIR/language/move-vm/integration-tests/src/tests/function_arg_tests.rs: `.map(|val| val.simple_serialize().unwrap())`
$DIR/language/move-vm/integration-tests/src/tests/function_arg_tests.rs: `.simple_serialize()`
$DIR/language/move-vm/integration-tests/src/tests/function_arg_tests.rs: `.collect()`
$DIR/language/move-vm/integration-tests/src/tests/function_arg_tests.rs: `.execute_function(&module_id, &fun_name, ty_args, args, &mut gas_status)`
$DIR/language/move-vm/integration-tests/src/tests/loader_tests.rs: `module
                .serialize(&mut binary)
                .unwrap_or_else(|_| panic!("failure in module serialization: {:#?}", module));`
$DIR/language/move-vm/integration-tests/src/tests/loader_tests.rs: `session
                .publish_module(binary, WORKING_ACCOUNT, &mut gas_status)
                .unwrap_or_else(|_| panic!("failure publishing module: {:#?}", module));`
$DIR/language/move-vm/integration-tests/src/tests/loader_tests.rs: `self.store
            .apply(changeset)
            .expect("failure applying write set");`
$DIR/language/move-vm/integration-tests/src/tests/loader_tests.rs: `children.push(thread::spawn(move || {
                    let mut gas_status = GasStatus::new_unmetered();
                    let mut session = vm.new_session(&data_store);
                    session
                        .execute_function(&module_id, &name, vec![], vec![], &mut gas_status)
                        .unwrap_or_else(|_| {
                            panic!("Failure executing {:?}::{:?}", module_id, name)
                        });
                }));`
$DIR/language/move-vm/integration-tests/src/tests/loader_tests.rs: `session
                        .execute_function(&module_id, &name, vec![], vec![], &mut gas_status)
                        .unwrap_or_else(|_| {
                            panic!("Failure executing {:?}::{:?}", module_id, name)
                        });`
$DIR/language/move-vm/integration-tests/src/tests/loader_tests.rs: `session
            .execute_function(module, name, vec![], vec![], &mut gas_status)
            .unwrap_or_else(|_| panic!("Failure executing {:?}::{:?}", module, name));`
$DIR/language/move-vm/integration-tests/src/tests/loader_tests.rs: `path.push("src/tests/loader_tests_modules.move");`
$DIR/language/move-vm/integration-tests/src/tests/loader_tests.rs: `.vm.new_session(&self.store)`
$DIR/language/move-vm/integration-tests/src/tests/loader_tests.rs: `.serialize(&mut binary)`
$DIR/language/move-vm/integration-tests/src/tests/loader_tests.rs: `.unwrap_or_else(|_| panic!("failure in module serialization: {:#?}", module))`
$DIR/language/move-vm/integration-tests/src/tests/loader_tests.rs: `.publish_module(binary, WORKING_ACCOUNT, &mut gas_status)`
$DIR/language/move-vm/integration-tests/src/tests/loader_tests.rs: `.unwrap_or_else(|_| panic!("failure publishing module: {:#?}", module))`
$DIR/language/move-vm/integration-tests/src/tests/loader_tests.rs: `.finish()`
$DIR/language/move-vm/integration-tests/src/tests/loader_tests.rs: `.store
            .apply(changeset)`
$DIR/language/move-vm/integration-tests/src/tests/loader_tests.rs: `.push(thread::spawn(move || {
                    let mut gas_status = GasStatus::new_unmetered();
                    let mut session = vm.new_session(&data_store);
                    session
                        .execute_function(&module_id, &name, vec![], vec![], &mut gas_status)
                        .unwrap_or_else(|_| {
                            panic!("Failure executing {:?}::{:?}", module_id, name)
                        });
                }))`
$DIR/language/move-vm/integration-tests/src/tests/loader_tests.rs: `.new_session(&data_store)`
$DIR/language/move-vm/integration-tests/src/tests/loader_tests.rs: `.execute_function(&module_id, &name, vec![], vec![], &mut gas_status)`
$DIR/language/move-vm/integration-tests/src/tests/loader_tests.rs: `.unwrap_or_else(|_| {
                            panic!("Failure executing {:?}::{:?}", module_id, name)
                        })`
$DIR/language/move-vm/integration-tests/src/tests/loader_tests.rs: `.join()`
$DIR/language/move-vm/integration-tests/src/tests/loader_tests.rs: `.vm.new_session(&self.store)`
$DIR/language/move-vm/integration-tests/src/tests/loader_tests.rs: `.execute_function(module, name, vec![], vec![], &mut gas_status)`
$DIR/language/move-vm/integration-tests/src/tests/loader_tests.rs: `.unwrap_or_else(|_| panic!("Failure executing {:?}::{:?}", module, name))`
$DIR/language/move-vm/integration-tests/src/tests/loader_tests.rs: `.push("src/tests/loader_tests_modules.move")`
$DIR/language/move-vm/integration-tests/src/tests/mutated_accounts_tests.rs: `m.serialize(&mut blob).unwrap();`
$DIR/language/move-vm/integration-tests/src/tests/mutated_accounts_tests.rs: `storage.publish_or_overwrite_module(module_id.clone(), blob);`
$DIR/language/move-vm/integration-tests/src/tests/mutated_accounts_tests.rs: `sess.execute_function(
        &module_id,
        &publish,
        vec![],
        serialize_values(&vec![MoveValue::Signer(account1)]),
        &mut gas_status,
    )
    .unwrap();`
$DIR/language/move-vm/integration-tests/src/tests/mutated_accounts_tests.rs: `sess.execute_function(
        &module_id,
        &get,
        vec![],
        serialize_values(&vec![MoveValue::Address(account1)]),
        &mut gas_status,
    )
    .unwrap();`
$DIR/language/move-vm/integration-tests/src/tests/mutated_accounts_tests.rs: `sess.execute_function(
        &module_id,
        &flip,
        vec![],
        serialize_values(&vec![MoveValue::Address(account1)]),
        &mut gas_status,
    )
    .unwrap();`
$DIR/language/move-vm/integration-tests/src/tests/mutated_accounts_tests.rs: `storage.apply(changes).unwrap();`
$DIR/language/move-vm/integration-tests/src/tests/mutated_accounts_tests.rs: `sess.execute_function(
        &module_id,
        &get,
        vec![],
        serialize_values(&vec![MoveValue::Address(account1)]),
        &mut gas_status,
    )
    .unwrap();`
$DIR/language/move-vm/integration-tests/src/tests/mutated_accounts_tests.rs: `.replace("{{ADDR}}", &format!("0x{}", TEST_ADDR))`
$DIR/language/move-vm/integration-tests/src/tests/mutated_accounts_tests.rs: `.pop()`
$DIR/language/move-vm/integration-tests/src/tests/mutated_accounts_tests.rs: `.serialize(&mut blob)`
$DIR/language/move-vm/integration-tests/src/tests/mutated_accounts_tests.rs: `.publish_or_overwrite_module(module_id.clone(), blob)`
$DIR/language/move-vm/integration-tests/src/tests/mutated_accounts_tests.rs: `.new_session(&storage)`
$DIR/language/move-vm/integration-tests/src/tests/mutated_accounts_tests.rs: `.execute_function(
        &module_id,
        &publish,
        vec![],
        serialize_values(&vec![MoveValue::Signer(account1)]),
        &mut gas_status,
    )`
$DIR/language/move-vm/integration-tests/src/tests/mutated_accounts_tests.rs: `.execute_function(
        &module_id,
        &get,
        vec![],
        serialize_values(&vec![MoveValue::Address(account1)]),
        &mut gas_status,
    )`
$DIR/language/move-vm/integration-tests/src/tests/mutated_accounts_tests.rs: `.execute_function(
        &module_id,
        &flip,
        vec![],
        serialize_values(&vec![MoveValue::Address(account1)]),
        &mut gas_status,
    )`
$DIR/language/move-vm/integration-tests/src/tests/mutated_accounts_tests.rs: `.finish()`
$DIR/language/move-vm/integration-tests/src/tests/mutated_accounts_tests.rs: `.apply(changes)`
$DIR/language/move-vm/integration-tests/src/tests/mutated_accounts_tests.rs: `.new_session(&storage)`
$DIR/language/move-vm/integration-tests/src/tests/mutated_accounts_tests.rs: `.execute_function(
        &module_id,
        &get,
        vec![],
        serialize_values(&vec![MoveValue::Address(account1)]),
        &mut gas_status,
    )`
$DIR/language/move-vm/integration-tests/src/tests/return_value_tests.rs: `m.serialize(&mut blob).unwrap();`
$DIR/language/move-vm/integration-tests/src/tests/return_value_tests.rs: `storage.publish_or_overwrite_module(module_id.clone(), blob);`
$DIR/language/move-vm/integration-tests/src/tests/return_value_tests.rs: `MoveValue::simple_deserialize(blob, layout).unwrap();`
$DIR/language/move-vm/integration-tests/src/tests/return_value_tests.rs: `.join("\n")`
$DIR/language/move-vm/integration-tests/src/tests/return_value_tests.rs: `.pop()`
$DIR/language/move-vm/integration-tests/src/tests/return_value_tests.rs: `.serialize(&mut blob)`
$DIR/language/move-vm/integration-tests/src/tests/return_value_tests.rs: `.publish_or_overwrite_module(module_id.clone(), blob)`
$DIR/language/move-vm/integration-tests/src/tests/return_value_tests.rs: `.new_session(&storage)`
$DIR/language/move-vm/integration-tests/src/tests/return_value_tests.rs: `.into_iter()`
$DIR/language/move-vm/integration-tests/src/tests/return_value_tests.rs: `.map(|val| val.simple_serialize().unwrap())`
$DIR/language/move-vm/integration-tests/src/tests/return_value_tests.rs: `.simple_serialize()`
$DIR/language/move-vm/integration-tests/src/tests/return_value_tests.rs: `.collect()`
$DIR/language/move-vm/integration-tests/src/tests/return_value_tests.rs: `.execute_function(&module_id, &fun_name, ty_args, args, &mut gas_status)`
$DIR/language/move-vm/integration-tests/src/tests/return_value_tests.rs: `.zip(expected_layouts.iter())`
$DIR/language/move-vm/runtime/src/unit_tests/vm_arguments_tests.rs: `signatures.push(parameters);`
$DIR/language/move-vm/runtime/src/unit_tests/vm_arguments_tests.rs: `CompiledScript {
        version: move_binary_format::file_format_common::VERSION_MAX,
        module_handles: vec![],
        struct_handles: vec![],
        function_handles: vec![],

        function_instantiations: vec![],

        signatures,

        identifiers: vec![],
        address_identifiers: vec![],
        constant_pool: vec![],

        type_parameters: vec![],
        parameters: parameters_idx,
        code: CodeUnit {
            locals: SignatureIndex(0),
            code: vec![Bytecode::LdU64(0), Bytecode::Abort],
        },
    }
    .serialize(&mut blob)
    .expect("script must serialize");`
$DIR/language/move-vm/runtime/src/unit_tests/vm_arguments_tests.rs: `signatures.push(parameters);`
$DIR/language/move-vm/runtime/src/unit_tests/vm_arguments_tests.rs: `CompiledScript {
        version: move_binary_format::file_format_common::VERSION_MAX,
        module_handles: vec![ModuleHandle {
            address: AddressIdentifierIndex(0),
            name: IdentifierIndex(0),
        }],
        struct_handles: vec![StructHandle {
            module: ModuleHandleIndex(0),
            name: IdentifierIndex(1),
            abilities: AbilitySet::EMPTY,
            type_parameters: vec![],
        }],
        function_handles: vec![FunctionHandle {
            module: ModuleHandleIndex(0),
            name: IdentifierIndex(2),
            parameters: SignatureIndex(1),
            return_: SignatureIndex(0),
            type_parameters: vec![],
        }],

        function_instantiations: vec![],

        signatures,

        identifiers: vec![
            Identifier::new("one").unwrap(),
            Identifier::new("two").unwrap(),
            Identifier::new("three").unwrap(),
        ],
        address_identifiers: vec![AccountAddress::random()],
        constant_pool: vec![],

        type_parameters: vec![],
        parameters: parameters_idx,
        code: CodeUnit {
            locals: SignatureIndex(0),
            code: vec![Bytecode::LdU64(0), Bytecode::Abort],
        },
    }
    .serialize(&mut blob)
    .expect("script must serialize");`
$DIR/language/move-vm/runtime/src/unit_tests/vm_arguments_tests.rs: `signatures.push(parameters);`
$DIR/language/move-vm/runtime/src/unit_tests/vm_arguments_tests.rs: `signatures.push(return_);`
$DIR/language/move-vm/runtime/src/unit_tests/vm_arguments_tests.rs: `compiled_module.serialize(&mut bytes).unwrap();`
$DIR/language/move-vm/runtime/src/unit_tests/vm_arguments_tests.rs: `self.modules.insert(id, bytes);`
$DIR/language/move-vm/runtime/src/unit_tests/vm_arguments_tests.rs: `remote_view.add_module(module);`
$DIR/language/move-vm/runtime/src/unit_tests/vm_arguments_tests.rs: `session.execute_script_function(
        &id,
        function_name.as_ident_str(),
        ty_args,
        args,
        signers,
        &mut gas_status,
    )?;`
$DIR/language/move-vm/runtime/src/unit_tests/vm_arguments_tests.rs: `.enumerate()`
$DIR/language/move-vm/runtime/src/unit_tests/vm_arguments_tests.rs: `.find(|(_, s)| *s == &parameters)`
$DIR/language/move-vm/runtime/src/unit_tests/vm_arguments_tests.rs: `.push(parameters)`
$DIR/language/move-vm/runtime/src/unit_tests/vm_arguments_tests.rs: `.len()`
$DIR/language/move-vm/runtime/src/unit_tests/vm_arguments_tests.rs: `.serialize(&mut blob)`
$DIR/language/move-vm/runtime/src/unit_tests/vm_arguments_tests.rs: `.enumerate()`
$DIR/language/move-vm/runtime/src/unit_tests/vm_arguments_tests.rs: `.find(|(_, s)| *s == &parameters)`
$DIR/language/move-vm/runtime/src/unit_tests/vm_arguments_tests.rs: `.push(parameters)`
$DIR/language/move-vm/runtime/src/unit_tests/vm_arguments_tests.rs: `.len()`
$DIR/language/move-vm/runtime/src/unit_tests/vm_arguments_tests.rs: `.serialize(&mut blob)`
$DIR/language/move-vm/runtime/src/unit_tests/vm_arguments_tests.rs: `.enumerate()`
$DIR/language/move-vm/runtime/src/unit_tests/vm_arguments_tests.rs: `.find(|(_, s)| *s == &parameters)`
$DIR/language/move-vm/runtime/src/unit_tests/vm_arguments_tests.rs: `.push(parameters)`
$DIR/language/move-vm/runtime/src/unit_tests/vm_arguments_tests.rs: `.len()`
$DIR/language/move-vm/runtime/src/unit_tests/vm_arguments_tests.rs: `.enumerate()`
$DIR/language/move-vm/runtime/src/unit_tests/vm_arguments_tests.rs: `.find(|(_, s)| *s == &return_)`
$DIR/language/move-vm/runtime/src/unit_tests/vm_arguments_tests.rs: `.push(return_)`
$DIR/language/move-vm/runtime/src/unit_tests/vm_arguments_tests.rs: `.len()`
$DIR/language/move-vm/runtime/src/unit_tests/vm_arguments_tests.rs: `.self_id()`
$DIR/language/move-vm/runtime/src/unit_tests/vm_arguments_tests.rs: `.serialize(&mut bytes)`
$DIR/language/move-vm/runtime/src/unit_tests/vm_arguments_tests.rs: `.modules.insert(id, bytes)`
$DIR/language/move-vm/runtime/src/unit_tests/vm_arguments_tests.rs: `.self_id()`
$DIR/language/move-vm/runtime/src/unit_tests/vm_arguments_tests.rs: `.add_module(module)`
$DIR/language/move-vm/runtime/src/unit_tests/vm_arguments_tests.rs: `.new_session(&remote_view)`
$DIR/language/move-vm/runtime/src/unit_tests/vm_arguments_tests.rs: `.execute_script_function(
        &id,
        function_name.as_ident_str(),
        ty_args,
        args,
        signers,
        &mut gas_status,
    )`
$DIR/language/move-vm/runtime/src/unit_tests/vm_arguments_tests.rs: `.as_ident_str()`
$DIR/language/move-vm/runtime/src/unit_tests/vm_arguments_tests.rs: `.unwrap_or(StatusCode::ABORTED)`
$DIR/language/move-vm/runtime/src/unit_tests/vm_arguments_tests.rs: `.err()`
$DIR/language/move-vm/runtime/src/unit_tests/vm_arguments_tests.rs: `.unwrap_or(StatusCode::ABORTED)`
$DIR/language/move-vm/runtime/src/unit_tests/vm_arguments_tests.rs: `.self_id()`
$DIR/language/move-vm/runtime/src/unit_tests/vm_arguments_tests.rs: `.new_session(&remote_view)`
$DIR/language/move-vm/runtime/src/unit_tests/vm_arguments_tests.rs: `.execute_script_function(id, function_name, vec![], vec![], vec![], &mut gas_status)`
$DIR/language/move-vm/runtime/src/unit_tests/vm_arguments_tests.rs: `.err()`
$DIR/language/move-vm/runtime/src/unit_tests/vm_arguments_tests.rs: `.new_session(&remote_view)`
$DIR/language/move-vm/runtime/src/unit_tests/vm_arguments_tests.rs: `.execute_script_function(id, function_name, vec![], vec![], vec![], &mut gas_status)`
$DIR/language/move-vm/runtime/src/unit_tests/vm_arguments_tests.rs: `.err()`
$DIR/language/move-vm/types/src/values/value_tests.rs: `locals.store_loc(1, Value::u64(42))?;`
$DIR/language/move-vm/types/src/values/value_tests.rs: `locals.store_loc(
        0,
        Value::struct_(Struct::pack(vec![Value::u8(10), Value::bool(false)])),
    )?;`
$DIR/language/move-vm/types/src/values/value_tests.rs: `f.write_ref(Value::bool(true))?;`
$DIR/language/move-vm/types/src/values/value_tests.rs: `locals.store_loc(0, outer(20))?;`
$DIR/language/move-vm/types/src/values/value_tests.rs: `r3.write_ref(Value::u64(30))?;`
$DIR/language/move-vm/types/src/values/value_tests.rs: `locals.store_loc(0, Value::u8(0))?;`
$DIR/language/move-vm/types/src/values/value_tests.rs: `.store_loc(1, Value::u64(42))`
$DIR/language/move-vm/types/src/values/value_tests.rs: `.borrow_loc(1)`
$DIR/language/move-vm/types/src/values/value_tests.rs: `.value_as::<Reference>()`
$DIR/language/move-vm/types/src/values/value_tests.rs: `.unpack()`
$DIR/language/move-vm/types/src/values/value_tests.rs: `.collect()`
$DIR/language/move-vm/types/src/values/value_tests.rs: `.zip(unpacked.iter())`
$DIR/language/move-vm/types/src/values/value_tests.rs: `.store_loc(
        0,
        Value::struct_(Struct::pack(vec![Value::u8(10), Value::bool(false)])),
    )`
$DIR/language/move-vm/types/src/values/value_tests.rs: `.borrow_loc(0)`
$DIR/language/move-vm/types/src/values/value_tests.rs: `.value_as()`
$DIR/language/move-vm/types/src/values/value_tests.rs: `.borrow_field(1)`
$DIR/language/move-vm/types/src/values/value_tests.rs: `.value_as()`
$DIR/language/move-vm/types/src/values/value_tests.rs: `.borrow_field(1)`
$DIR/language/move-vm/types/src/values/value_tests.rs: `.value_as()`
$DIR/language/move-vm/types/src/values/value_tests.rs: `.write_ref(Value::bool(true))`
$DIR/language/move-vm/types/src/values/value_tests.rs: `.borrow_field(1)`
$DIR/language/move-vm/types/src/values/value_tests.rs: `.value_as()`
$DIR/language/move-vm/types/src/values/value_tests.rs: `.store_loc(0, outer(20))`
$DIR/language/move-vm/types/src/values/value_tests.rs: `.borrow_loc(0)`
$DIR/language/move-vm/types/src/values/value_tests.rs: `.value_as()`
$DIR/language/move-vm/types/src/values/value_tests.rs: `.borrow_field(1)`
$DIR/language/move-vm/types/src/values/value_tests.rs: `.value_as()`
$DIR/language/move-vm/types/src/values/value_tests.rs: `.borrow_field(0)`
$DIR/language/move-vm/types/src/values/value_tests.rs: `.value_as()`
$DIR/language/move-vm/types/src/values/value_tests.rs: `.borrow_field(0)`
$DIR/language/move-vm/types/src/values/value_tests.rs: `.value_as()`
$DIR/language/move-vm/types/src/values/value_tests.rs: `.write_ref(Value::u64(30))`
$DIR/language/move-vm/types/src/values/value_tests.rs: `.borrow_field(0)`
$DIR/language/move-vm/types/src/values/value_tests.rs: `.value_as()`
$DIR/language/move-vm/types/src/values/value_tests.rs: `.store_loc(0, Value::u8(0))`
$DIR/language/move-vm/types/src/values/value_tests.rs: `.borrow_loc(0)`
$DIR/language/testing-infra/functional-tests/src/tests/block_metadata_config_tests.rs: `s.parse::<Entry>().unwrap();`
$DIR/language/testing-infra/functional-tests/src/tests/block_metadata_config_tests.rs: `s.parse::<Entry>().unwrap_err();`
$DIR/language/testing-infra/functional-tests/src/tests/block_metadata_config_tests.rs: `s.parse::<Entry>().unwrap();`
$DIR/language/testing-infra/functional-tests/src/tests/block_metadata_config_tests.rs: `s.parse::<Entry>().unwrap_err();`
$DIR/language/testing-infra/functional-tests/src/tests/block_metadata_config_tests.rs: `parse_and_build_config(&global, r"
        //! proposer: alice
        //! block-time: 6
    ").unwrap();`
$DIR/language/testing-infra/functional-tests/src/tests/block_metadata_config_tests.rs: `parse_and_build_config(&global, r"
        //! proposer: alice
    ").unwrap_err();`
$DIR/language/testing-infra/functional-tests/src/tests/block_metadata_config_tests.rs: `.parse::<Entry>()`
$DIR/language/testing-infra/functional-tests/src/tests/block_metadata_config_tests.rs: `.parse::<Entry>()`
$DIR/language/testing-infra/functional-tests/src/tests/block_metadata_config_tests.rs: `.parse::<Entry>()`
$DIR/language/testing-infra/functional-tests/src/tests/block_metadata_config_tests.rs: `.parse::<Entry>()`
$DIR/language/testing-infra/functional-tests/src/tests/global_config_tests.rs: `s.parse::<Entry>().unwrap();`
$DIR/language/testing-infra/functional-tests/src/tests/global_config_tests.rs: `s.parse::<Entry>().unwrap_err();`
$DIR/language/testing-infra/functional-tests/src/tests/global_config_tests.rs: `.parse::<Entry>()`
$DIR/language/testing-infra/functional-tests/src/tests/global_config_tests.rs: `.parse::<Entry>()`
$DIR/language/testing-infra/functional-tests/src/tests/global_config_tests.rs: `.accounts.get("bob")`
$DIR/language/testing-infra/functional-tests/src/tests/global_config_tests.rs: `.accounts.get("default")`
$DIR/language/testing-infra/functional-tests/src/tests/global_config_tests.rs: `.accounts.get("default")`
$DIR/language/testing-infra/functional-tests/src/tests/global_config_tests.rs: `.accounts.get("bob")`
$DIR/language/testing-infra/functional-tests/src/tests/preprocessor_tests.rs: `build_transactions(&config, &transactions)?;`
$DIR/language/testing-infra/functional-tests/src/tests/preprocessor_tests.rs: `.lines()`
$DIR/language/testing-infra/functional-tests/src/tests/preprocessor_tests.rs: `.lines()`
$DIR/language/testing-infra/functional-tests/src/tests/transaction_config_tests.rs: `s.parse::<Entry>().unwrap();`
$DIR/language/testing-infra/functional-tests/src/tests/transaction_config_tests.rs: `s.parse::<Entry>().unwrap_err();`
$DIR/language/testing-infra/functional-tests/src/tests/transaction_config_tests.rs: `s.parse::<Entry>().unwrap();`
$DIR/language/testing-infra/functional-tests/src/tests/transaction_config_tests.rs: `s.parse::<Entry>().unwrap_err();`
$DIR/language/testing-infra/functional-tests/src/tests/transaction_config_tests.rs: `s.parse::<Entry>().unwrap();`
$DIR/language/testing-infra/functional-tests/src/tests/transaction_config_tests.rs: `s.parse::<Entry>().unwrap_err();`
$DIR/language/testing-infra/functional-tests/src/tests/transaction_config_tests.rs: `s.parse::<Entry>().unwrap();`
$DIR/language/testing-infra/functional-tests/src/tests/transaction_config_tests.rs: `s.parse::<Entry>().unwrap_err();`
$DIR/language/testing-infra/functional-tests/src/tests/transaction_config_tests.rs: `.parse::<Entry>()`
$DIR/language/testing-infra/functional-tests/src/tests/transaction_config_tests.rs: `.parse::<Entry>()`
$DIR/language/testing-infra/functional-tests/src/tests/transaction_config_tests.rs: `.parse::<Entry>()`
$DIR/language/testing-infra/functional-tests/src/tests/transaction_config_tests.rs: `.parse::<Entry>()`
$DIR/language/testing-infra/functional-tests/src/tests/transaction_config_tests.rs: `.parse::<Entry>()`
$DIR/language/testing-infra/functional-tests/src/tests/transaction_config_tests.rs: `.parse::<Entry>()`
$DIR/language/testing-infra/functional-tests/src/tests/transaction_config_tests.rs: `.parse::<Entry>()`
$DIR/language/testing-infra/functional-tests/src/tests/transaction_config_tests.rs: `.parse::<Entry>()`
$DIR/language/testing-infra/test-generation/tests/boolean_instructions.rs: `state1.stack_push(AbstractValue::new_primitive(SignatureToken::Bool));`
$DIR/language/testing-infra/test-generation/tests/boolean_instructions.rs: `state1.stack_push(AbstractValue::new_primitive(SignatureToken::Bool));`
$DIR/language/testing-infra/test-generation/tests/boolean_instructions.rs: `state1.stack_push(AbstractValue::new_primitive(SignatureToken::Bool));`
$DIR/language/testing-infra/test-generation/tests/boolean_instructions.rs: `state1.stack_push(AbstractValue::new_primitive(SignatureToken::Bool));`
$DIR/language/testing-infra/test-generation/tests/boolean_instructions.rs: `state1.stack_push(AbstractValue::new_primitive(SignatureToken::Bool));`
$DIR/language/testing-infra/test-generation/tests/boolean_instructions.rs: `state1.stack_push(AbstractValue::new_primitive(SignatureToken::Bool));`
$DIR/language/testing-infra/test-generation/tests/boolean_instructions.rs: `.stack_push(AbstractValue::new_primitive(SignatureToken::Bool))`
$DIR/language/testing-infra/test-generation/tests/boolean_instructions.rs: `.stack_push(AbstractValue::new_primitive(SignatureToken::Bool))`
$DIR/language/testing-infra/test-generation/tests/boolean_instructions.rs: `.stack_push(AbstractValue::new_primitive(SignatureToken::Bool))`
$DIR/language/testing-infra/test-generation/tests/boolean_instructions.rs: `.stack_push(AbstractValue::new_primitive(SignatureToken::Bool))`
$DIR/language/testing-infra/test-generation/tests/boolean_instructions.rs: `.stack_push(AbstractValue::new_primitive(SignatureToken::Bool))`
$DIR/language/testing-infra/test-generation/tests/boolean_instructions.rs: `.stack_push(AbstractValue::new_primitive(SignatureToken::Bool))`
$DIR/language/testing-infra/test-generation/tests/call_graph.rs: `call_graph.add_call(FunctionHandleIndex(0), FunctionHandleIndex(1));`
$DIR/language/testing-infra/test-generation/tests/call_graph.rs: `call_graph.add_call(FunctionHandleIndex(1), FunctionHandleIndex(2));`
$DIR/language/testing-infra/test-generation/tests/call_graph.rs: `call_graph.add_call(FunctionHandleIndex(2), FunctionHandleIndex(0));`
$DIR/language/testing-infra/test-generation/tests/call_graph.rs: `call_graph.add_call(FunctionHandleIndex(0), FunctionHandleIndex(1));`
$DIR/language/testing-infra/test-generation/tests/call_graph.rs: `call_graph.add_call(FunctionHandleIndex(1), FunctionHandleIndex(2));`
$DIR/language/testing-infra/test-generation/tests/call_graph.rs: `call_graph.add_call(FunctionHandleIndex(1), FunctionHandleIndex(3));`
$DIR/language/testing-infra/test-generation/tests/call_graph.rs: `call_graph.add_call(FunctionHandleIndex(3), FunctionHandleIndex(2));`
$DIR/language/testing-infra/test-generation/tests/call_graph.rs: `call_graph.add_call(FunctionHandleIndex(0), FunctionHandleIndex(1));`
$DIR/language/testing-infra/test-generation/tests/call_graph.rs: `call_graph.add_call(FunctionHandleIndex(1), FunctionHandleIndex(2));`
$DIR/language/testing-infra/test-generation/tests/call_graph.rs: `call_graph.add_call(FunctionHandleIndex(1), FunctionHandleIndex(3));`
$DIR/language/testing-infra/test-generation/tests/call_graph.rs: `call_graph.add_call(FunctionHandleIndex(3), FunctionHandleIndex(2));`
$DIR/language/testing-infra/test-generation/tests/call_graph.rs: `.can_call(FunctionHandleIndex(0))`
$DIR/language/testing-infra/test-generation/tests/call_graph.rs: `.add_call(FunctionHandleIndex(0), FunctionHandleIndex(1))`
$DIR/language/testing-infra/test-generation/tests/call_graph.rs: `.can_call(FunctionHandleIndex(0))`
$DIR/language/testing-infra/test-generation/tests/call_graph.rs: `.can_call(FunctionHandleIndex(1))`
$DIR/language/testing-infra/test-generation/tests/call_graph.rs: `.add_call(FunctionHandleIndex(1), FunctionHandleIndex(2))`
$DIR/language/testing-infra/test-generation/tests/call_graph.rs: `.add_call(FunctionHandleIndex(2), FunctionHandleIndex(0))`
$DIR/language/testing-infra/test-generation/tests/call_graph.rs: `.can_call(FunctionHandleIndex(0))`
$DIR/language/testing-infra/test-generation/tests/call_graph.rs: `.add_call(FunctionHandleIndex(0), FunctionHandleIndex(1))`
$DIR/language/testing-infra/test-generation/tests/call_graph.rs: `.add_call(FunctionHandleIndex(1), FunctionHandleIndex(2))`
$DIR/language/testing-infra/test-generation/tests/call_graph.rs: `.add_call(FunctionHandleIndex(1), FunctionHandleIndex(3))`
$DIR/language/testing-infra/test-generation/tests/call_graph.rs: `.add_call(FunctionHandleIndex(3), FunctionHandleIndex(2))`
$DIR/language/testing-infra/test-generation/tests/call_graph.rs: `.add_call(FunctionHandleIndex(0), FunctionHandleIndex(1))`
$DIR/language/testing-infra/test-generation/tests/call_graph.rs: `.add_call(FunctionHandleIndex(1), FunctionHandleIndex(2))`
$DIR/language/testing-infra/test-generation/tests/call_graph.rs: `.add_call(FunctionHandleIndex(1), FunctionHandleIndex(3))`
$DIR/language/testing-infra/test-generation/tests/call_graph.rs: `.add_call(FunctionHandleIndex(3), FunctionHandleIndex(2))`
$DIR/language/testing-infra/test-generation/tests/comparison_instructions.rs: `state1.stack_push(AbstractValue::new_primitive(ty.clone()));`
$DIR/language/testing-infra/test-generation/tests/comparison_instructions.rs: `state1.stack_push(AbstractValue::new_primitive(ty.clone()));`
$DIR/language/testing-infra/test-generation/tests/comparison_instructions.rs: `state1.stack_push(AbstractValue::new_primitive(SignatureToken::Bool));`
$DIR/language/testing-infra/test-generation/tests/comparison_instructions.rs: `state1.stack_push(AbstractValue::new_primitive(SignatureToken::Bool));`
$DIR/language/testing-infra/test-generation/tests/comparison_instructions.rs: `state1.stack_push(AbstractValue::new_primitive(SignatureToken::U64));`
$DIR/language/testing-infra/test-generation/tests/comparison_instructions.rs: `state1.stack_push(AbstractValue::new_primitive(SignatureToken::U64));`
$DIR/language/testing-infra/test-generation/tests/comparison_instructions.rs: `state1.stack_push(AbstractValue::new_primitive(SignatureToken::Bool));`
$DIR/language/testing-infra/test-generation/tests/comparison_instructions.rs: `state1.stack_push(AbstractValue::new_primitive(SignatureToken::Bool));`
$DIR/language/testing-infra/test-generation/tests/comparison_instructions.rs: `.cartesian_product(INTEGER_TYPES.iter())`
$DIR/language/testing-infra/test-generation/tests/comparison_instructions.rs: `.stack_push(AbstractValue::new_primitive(ty.clone()))`
$DIR/language/testing-infra/test-generation/tests/comparison_instructions.rs: `.stack_push(AbstractValue::new_primitive(ty.clone()))`
$DIR/language/testing-infra/test-generation/tests/comparison_instructions.rs: `.stack_push(AbstractValue::new_primitive(SignatureToken::Bool))`
$DIR/language/testing-infra/test-generation/tests/comparison_instructions.rs: `.stack_push(AbstractValue::new_primitive(SignatureToken::Bool))`
$DIR/language/testing-infra/test-generation/tests/comparison_instructions.rs: `.stack_push(AbstractValue::new_primitive(SignatureToken::U64))`
$DIR/language/testing-infra/test-generation/tests/comparison_instructions.rs: `.stack_push(AbstractValue::new_primitive(SignatureToken::U64))`
$DIR/language/testing-infra/test-generation/tests/comparison_instructions.rs: `.stack_push(AbstractValue::new_primitive(SignatureToken::Bool))`
$DIR/language/testing-infra/test-generation/tests/comparison_instructions.rs: `.stack_push(AbstractValue::new_primitive(SignatureToken::Bool))`
$DIR/language/testing-infra/test-generation/tests/control_flow_instructions.rs: `module.identifiers.push(Identifier::new("func0").unwrap());`
$DIR/language/testing-infra/test-generation/tests/control_flow_instructions.rs: `module.signatures = vec![
        Signature(vec![]),
        Signature(vec![SignatureToken::U64, SignatureToken::Bool]),
        Signature(vec![SignatureToken::Address]),
    ];`
$DIR/language/testing-infra/test-generation/tests/control_flow_instructions.rs: `module.function_handles = vec![FunctionHandle {
        module: ModuleHandleIndex::new(0),
        name: IdentifierIndex::new(offset as u16),
        parameters: SignatureIndex::new(1),
        return_: SignatureIndex::new(2),
        type_parameters: vec![],
    }];`
$DIR/language/testing-infra/test-generation/tests/control_flow_instructions.rs: `state1.stack_push(AbstractValue::new_primitive(SignatureToken::U64));`
$DIR/language/testing-infra/test-generation/tests/control_flow_instructions.rs: `state1.stack_push(AbstractValue::new_primitive(SignatureToken::Bool));`
$DIR/language/testing-infra/test-generation/tests/control_flow_instructions.rs: `state1.stack_push(AbstractValue::new_primitive(SignatureToken::U64));`
$DIR/language/testing-infra/test-generation/tests/control_flow_instructions.rs: `state1.stack_push(AbstractValue::new_primitive(SignatureToken::Bool));`
$DIR/language/testing-infra/test-generation/tests/control_flow_instructions.rs: `.identifiers.len()`
$DIR/language/testing-infra/test-generation/tests/control_flow_instructions.rs: `.identifiers.push(Identifier::new("func0").unwrap())`
$DIR/language/testing-infra/test-generation/tests/control_flow_instructions.rs: `.stack_push(AbstractValue::new_primitive(SignatureToken::U64))`
$DIR/language/testing-infra/test-generation/tests/control_flow_instructions.rs: `.stack_push(AbstractValue::new_primitive(SignatureToken::Bool))`
$DIR/language/testing-infra/test-generation/tests/control_flow_instructions.rs: `.stack_push(AbstractValue::new_primitive(SignatureToken::U64))`
$DIR/language/testing-infra/test-generation/tests/control_flow_instructions.rs: `.stack_push(AbstractValue::new_primitive(SignatureToken::Bool))`
$DIR/language/testing-infra/test-generation/tests/integer_instructions.rs: `state1.stack_push(AbstractValue::new_primitive(ty.clone()));`
$DIR/language/testing-infra/test-generation/tests/integer_instructions.rs: `state1.stack_push(AbstractValue::new_primitive(ty.clone()));`
$DIR/language/testing-infra/test-generation/tests/integer_instructions.rs: `state1.stack_push(AbstractValue::new_primitive(ty.clone()));`
$DIR/language/testing-infra/test-generation/tests/integer_instructions.rs: `state1.stack_push(AbstractValue::new_primitive(SignatureToken::U8));`
$DIR/language/testing-infra/test-generation/tests/integer_instructions.rs: `state1.stack_push(AbstractValue::new_primitive(ty2.clone()));`
$DIR/language/testing-infra/test-generation/tests/integer_instructions.rs: `.cartesian_product(INTEGER_TYPES.iter())`
$DIR/language/testing-infra/test-generation/tests/integer_instructions.rs: `.stack_push(AbstractValue::new_primitive(ty.clone()))`
$DIR/language/testing-infra/test-generation/tests/integer_instructions.rs: `.stack_push(AbstractValue::new_primitive(ty.clone()))`
$DIR/language/testing-infra/test-generation/tests/integer_instructions.rs: `.cartesian_product(INTEGER_TYPES.iter())`
$DIR/language/testing-infra/test-generation/tests/integer_instructions.rs: `.stack_push(AbstractValue::new_primitive(ty.clone()))`
$DIR/language/testing-infra/test-generation/tests/integer_instructions.rs: `.stack_push(AbstractValue::new_primitive(SignatureToken::U8))`
$DIR/language/testing-infra/test-generation/tests/integer_instructions.rs: `.stack_push(AbstractValue::new_primitive(ty2.clone()))`
$DIR/language/testing-infra/test-generation/tests/local_instructions.rs: `state1.local_insert(
        0,
        AbstractValue::new_primitive(SignatureToken::U64),
        BorrowState::Available,
    );`
$DIR/language/testing-infra/test-generation/tests/local_instructions.rs: `state1.local_insert(
        0,
        AbstractValue::new_primitive(SignatureToken::U64),
        BorrowState::Unavailable,
    );`
$DIR/language/testing-infra/test-generation/tests/local_instructions.rs: `state1.local_insert(
        0,
        AbstractValue::new_primitive(SignatureToken::U64),
        BorrowState::Available,
    );`
$DIR/language/testing-infra/test-generation/tests/local_instructions.rs: `state1.local_insert(
        0,
        AbstractValue::new_primitive(SignatureToken::U64),
        BorrowState::Unavailable,
    );`
$DIR/language/testing-infra/test-generation/tests/local_instructions.rs: `state1.local_insert(
        0,
        AbstractValue::new_primitive(SignatureToken::U64),
        BorrowState::Available,
    );`
$DIR/language/testing-infra/test-generation/tests/local_instructions.rs: `state1.local_insert(
        0,
        AbstractValue::new_primitive(SignatureToken::U64),
        BorrowState::Available,
    );`
$DIR/language/testing-infra/test-generation/tests/local_instructions.rs: `.local_insert(
        0,
        AbstractValue::new_primitive(SignatureToken::U64),
        BorrowState::Available,
    )`
$DIR/language/testing-infra/test-generation/tests/local_instructions.rs: `.local_insert(
        0,
        AbstractValue::new_primitive(SignatureToken::U64),
        BorrowState::Unavailable,
    )`
$DIR/language/testing-infra/test-generation/tests/local_instructions.rs: `.local_insert(
        0,
        AbstractValue::new_primitive(SignatureToken::U64),
        BorrowState::Available,
    )`
$DIR/language/testing-infra/test-generation/tests/local_instructions.rs: `.local_insert(
        0,
        AbstractValue::new_primitive(SignatureToken::U64),
        BorrowState::Unavailable,
    )`
$DIR/language/testing-infra/test-generation/tests/local_instructions.rs: `.local_insert(
        0,
        AbstractValue::new_primitive(SignatureToken::U64),
        BorrowState::Available,
    )`
$DIR/language/testing-infra/test-generation/tests/local_instructions.rs: `.local_insert(
        0,
        AbstractValue::new_primitive(SignatureToken::U64),
        BorrowState::Available,
    )`
$DIR/language/testing-infra/test-generation/tests/reference_instructions.rs: `state1.stack_push(AbstractValue::new_reference(
        SignatureToken::MutableReference(Box::new(SignatureToken::U64)),
        AbilitySet::PRIMITIVES,
    ));`
$DIR/language/testing-infra/test-generation/tests/reference_instructions.rs: `state1.stack_push(AbstractValue::new_reference(
        SignatureToken::MutableReference(Box::new(SignatureToken::U64)),
        AbilitySet::PRIMITIVES,
    ));`
$DIR/language/testing-infra/test-generation/tests/reference_instructions.rs: `state1.stack_push(AbstractValue::new_primitive(SignatureToken::U64));`
$DIR/language/testing-infra/test-generation/tests/reference_instructions.rs: `state1.stack_push(AbstractValue::new_reference(
        SignatureToken::MutableReference(Box::new(SignatureToken::U64)),
        AbilitySet::PRIMITIVES,
    ));`
$DIR/language/testing-infra/test-generation/tests/reference_instructions.rs: `state1.stack_push(AbstractValue::new_primitive(SignatureToken::Bool));`
$DIR/language/testing-infra/test-generation/tests/reference_instructions.rs: `state1.stack_push(AbstractValue::new_reference(
        SignatureToken::MutableReference(Box::new(SignatureToken::U64)),
        AbilitySet::PRIMITIVES,
    ));`
$DIR/language/testing-infra/test-generation/tests/reference_instructions.rs: `state1.stack_push(AbstractValue::new_primitive(SignatureToken::U64));`
$DIR/language/testing-infra/test-generation/tests/reference_instructions.rs: `state1.stack_push(AbstractValue::new_reference(
        SignatureToken::MutableReference(Box::new(SignatureToken::U64)),
        AbilitySet::PRIMITIVES,
    ));`
$DIR/language/testing-infra/test-generation/tests/reference_instructions.rs: `state1.stack_push(AbstractValue::new_reference(
        SignatureToken::MutableReference(Box::new(SignatureToken::U64)),
        AbilitySet::PRIMITIVES,
    ));`
$DIR/language/testing-infra/test-generation/tests/reference_instructions.rs: `state1.stack_push(AbstractValue::new_reference(
        SignatureToken::Reference(Box::new(SignatureToken::U64)),
        AbilitySet::PRIMITIVES,
    ));`
$DIR/language/testing-infra/test-generation/tests/reference_instructions.rs: `.stack_push(AbstractValue::new_reference(
        SignatureToken::MutableReference(Box::new(SignatureToken::U64)),
        AbilitySet::PRIMITIVES,
    ))`
$DIR/language/testing-infra/test-generation/tests/reference_instructions.rs: `.stack_push(AbstractValue::new_reference(
        SignatureToken::MutableReference(Box::new(SignatureToken::U64)),
        AbilitySet::PRIMITIVES,
    ))`
$DIR/language/testing-infra/test-generation/tests/reference_instructions.rs: `.stack_push(AbstractValue::new_primitive(SignatureToken::U64))`
$DIR/language/testing-infra/test-generation/tests/reference_instructions.rs: `.stack_push(AbstractValue::new_reference(
        SignatureToken::MutableReference(Box::new(SignatureToken::U64)),
        AbilitySet::PRIMITIVES,
    ))`
$DIR/language/testing-infra/test-generation/tests/reference_instructions.rs: `.stack_push(AbstractValue::new_primitive(SignatureToken::Bool))`
$DIR/language/testing-infra/test-generation/tests/reference_instructions.rs: `.stack_push(AbstractValue::new_reference(
        SignatureToken::MutableReference(Box::new(SignatureToken::U64)),
        AbilitySet::PRIMITIVES,
    ))`
$DIR/language/testing-infra/test-generation/tests/reference_instructions.rs: `.stack_push(AbstractValue::new_primitive(SignatureToken::U64))`
$DIR/language/testing-infra/test-generation/tests/reference_instructions.rs: `.stack_push(AbstractValue::new_reference(
        SignatureToken::MutableReference(Box::new(SignatureToken::U64)),
        AbilitySet::PRIMITIVES,
    ))`
$DIR/language/testing-infra/test-generation/tests/reference_instructions.rs: `.stack_push(AbstractValue::new_reference(
        SignatureToken::MutableReference(Box::new(SignatureToken::U64)),
        AbilitySet::PRIMITIVES,
    ))`
$DIR/language/testing-infra/test-generation/tests/reference_instructions.rs: `.stack_push(AbstractValue::new_reference(
        SignatureToken::Reference(Box::new(SignatureToken::U64)),
        AbilitySet::PRIMITIVES,
    ))`
$DIR/language/testing-infra/test-generation/tests/special_instructions.rs: `state1.stack_push(AbstractValue::new_primitive(SignatureToken::U64));`
$DIR/language/testing-infra/test-generation/tests/special_instructions.rs: `state1.stack_push(AbstractValue::new_primitive(SignatureToken::Address));`
$DIR/language/testing-infra/test-generation/tests/special_instructions.rs: `.stack_push(AbstractValue::new_primitive(SignatureToken::U64))`
$DIR/language/testing-infra/test-generation/tests/special_instructions.rs: `.stack_push(AbstractValue::new_primitive(SignatureToken::Address))`
$DIR/language/testing-infra/test-generation/tests/struct_instructions.rs: `module.identifiers.push(Identifier::new("struct0").unwrap());`
$DIR/language/testing-infra/test-generation/tests/struct_instructions.rs: `module
            .identifiers
            .push(Identifier::new(format!("string{}", i)).unwrap());`
$DIR/language/testing-infra/test-generation/tests/struct_instructions.rs: `fields.push(FieldDefinition {
            name: str_pool_idx,
            signature: TypeSignature(SignatureToken::Bool),
        });`
$DIR/language/testing-infra/test-generation/tests/struct_instructions.rs: `module.struct_defs.push(struct_def);`
$DIR/language/testing-infra/test-generation/tests/struct_instructions.rs: `module.struct_handles = vec![StructHandle {
        module: ModuleHandleIndex::new(0),
        name: IdentifierIndex::new((struct_index + offset) as TableIndex),
        abilities: if resource {
            AbilitySet::EMPTY | Ability::Key | Ability::Store
        } else {
            AbilitySet::PRIMITIVES
        },
        type_parameters: vec![],
    }];`
$DIR/language/testing-infra/test-generation/tests/struct_instructions.rs: `state1.stack_push(abstract_value);`
$DIR/language/testing-infra/test-generation/tests/struct_instructions.rs: `state1.stack_push(struct_value);`
$DIR/language/testing-infra/test-generation/tests/struct_instructions.rs: `state1.stack_push(AbstractValue::new_primitive(SignatureToken::Address));`
$DIR/language/testing-infra/test-generation/tests/struct_instructions.rs: `state1.stack_push(AbstractValue::new_primitive(SignatureToken::Address));`
$DIR/language/testing-infra/test-generation/tests/struct_instructions.rs: `state1.stack_push(AbstractValue::new_primitive(SignatureToken::Address));`
$DIR/language/testing-infra/test-generation/tests/struct_instructions.rs: `state1.stack_push(AbstractValue::new_primitive(SignatureToken::Address));`
$DIR/language/testing-infra/test-generation/tests/struct_instructions.rs: `state1.stack_push(AbstractValue::new_reference(
        SignatureToken::Reference(Box::new(SignatureToken::Signer)),
        AbilitySet::EMPTY | Ability::Drop,
    ));`
$DIR/language/testing-infra/test-generation/tests/struct_instructions.rs: `state1.stack_push(create_struct_value(&state1.module.module).0);`
$DIR/language/testing-infra/test-generation/tests/struct_instructions.rs: `state1.stack_push(AbstractValue::new_reference(
        SignatureToken::Reference(Box::new(SignatureToken::Signer)),
        AbilitySet::EMPTY | Ability::Drop,
    ));`
$DIR/language/testing-infra/test-generation/tests/struct_instructions.rs: `state1.stack_push(create_struct_value(&state1.module.module).0);`
$DIR/language/testing-infra/test-generation/tests/struct_instructions.rs: `state1.stack_push(AbstractValue::new_reference(
        SignatureToken::Reference(Box::new(SignatureToken::Signer)),
        AbilitySet::EMPTY | Ability::Drop,
    ));`
$DIR/language/testing-infra/test-generation/tests/struct_instructions.rs: `module.field_handles.push(FieldHandle {
        owner: struct_def_idx,
        field: 0,
    });`
$DIR/language/testing-infra/test-generation/tests/struct_instructions.rs: `state1.stack_push(AbstractValue {
        token: SignatureToken::MutableReference(Box::new(struct_value.token)),
        abilities: struct_value.abilities,
    });`
$DIR/language/testing-infra/test-generation/tests/struct_instructions.rs: `module.field_handles.push(FieldHandle {
        owner: struct_def_idx,
        field: 0,
    });`
$DIR/language/testing-infra/test-generation/tests/struct_instructions.rs: `module.field_handles.push(FieldHandle {
        owner: struct_def_idx,
        field: 0,
    });`
$DIR/language/testing-infra/test-generation/tests/struct_instructions.rs: `state1.stack_push(AbstractValue {
        token: SignatureToken::Reference(Box::new(struct_value.token)),
        abilities: struct_value.abilities,
    });`
$DIR/language/testing-infra/test-generation/tests/struct_instructions.rs: `module.field_handles.push(FieldHandle {
        owner: struct_def_idx,
        field: 0,
    });`
$DIR/language/testing-infra/test-generation/tests/struct_instructions.rs: `state1.stack_push(AbstractValue {
        token: SignatureToken::Reference(Box::new(struct_value.token)),
        abilities: struct_value.abilities,
    });`
$DIR/language/testing-infra/test-generation/tests/struct_instructions.rs: `module.field_handles.push(FieldHandle {
        owner: struct_def_idx,
        field: 0,
    });`
$DIR/language/testing-infra/test-generation/tests/struct_instructions.rs: `module.field_handles.push(FieldHandle {
        owner: struct_def_idx,
        field: 0,
    });`
$DIR/language/testing-infra/test-generation/tests/struct_instructions.rs: `state1.stack_push(AbstractValue {
        token: SignatureToken::MutableReference(Box::new(struct_value.token)),
        abilities: struct_value.abilities,
    });`
$DIR/language/testing-infra/test-generation/tests/struct_instructions.rs: `state1.stack_push(AbstractValue::new_primitive(SignatureToken::Address));`
$DIR/language/testing-infra/test-generation/tests/struct_instructions.rs: `state1.stack_push(AbstractValue::new_primitive(SignatureToken::Address));`
$DIR/language/testing-infra/test-generation/tests/struct_instructions.rs: `.identifiers.len()`
$DIR/language/testing-infra/test-generation/tests/struct_instructions.rs: `.identifiers.push(Identifier::new("struct0").unwrap())`
$DIR/language/testing-infra/test-generation/tests/struct_instructions.rs: `.identifiers
            .push(Identifier::new(format!("string{}", i)).unwrap())`
$DIR/language/testing-infra/test-generation/tests/struct_instructions.rs: `.push(FieldDefinition {
            name: str_pool_idx,
            signature: TypeSignature(SignatureToken::Bool),
        })`
$DIR/language/testing-infra/test-generation/tests/struct_instructions.rs: `.struct_defs.push(struct_def)`
$DIR/language/testing-infra/test-generation/tests/struct_instructions.rs: `.struct_def_at(StructDefinitionIndex::new(0))`
$DIR/language/testing-infra/test-generation/tests/struct_instructions.rs: `.fields()`
$DIR/language/testing-infra/test-generation/tests/struct_instructions.rs: `.into_iter()`
$DIR/language/testing-infra/test-generation/tests/struct_instructions.rs: `.flatten()`
$DIR/language/testing-infra/test-generation/tests/struct_instructions.rs: `.map(|field| field.type_signature().token().as_inner().clone())`
$DIR/language/testing-infra/test-generation/tests/struct_instructions.rs: `.type_signature()`
$DIR/language/testing-infra/test-generation/tests/struct_instructions.rs: `.token()`
$DIR/language/testing-infra/test-generation/tests/struct_instructions.rs: `.as_inner()`
$DIR/language/testing-infra/test-generation/tests/struct_instructions.rs: `.collect()`
$DIR/language/testing-infra/test-generation/tests/struct_instructions.rs: `.abilities()`
$DIR/language/testing-infra/test-generation/tests/struct_instructions.rs: `.map(|arg| abilities(module, arg, &[]))`
$DIR/language/testing-infra/test-generation/tests/struct_instructions.rs: `.repeat(type_argument_abilities.len())`
$DIR/language/testing-infra/test-generation/tests/struct_instructions.rs: `.len()`
$DIR/language/testing-infra/test-generation/tests/struct_instructions.rs: `.stack_push(abstract_value)`
$DIR/language/testing-infra/test-generation/tests/struct_instructions.rs: `.stack_peek(0)`
$DIR/language/testing-infra/test-generation/tests/struct_instructions.rs: `.stack_push(struct_value)`
$DIR/language/testing-infra/test-generation/tests/struct_instructions.rs: `.stack_push(AbstractValue::new_primitive(SignatureToken::Address))`
$DIR/language/testing-infra/test-generation/tests/struct_instructions.rs: `.stack_push(AbstractValue::new_primitive(SignatureToken::Address))`
$DIR/language/testing-infra/test-generation/tests/struct_instructions.rs: `.module
        .module
        .struct_def_at(StructDefinitionIndex::new(0))`
$DIR/language/testing-infra/test-generation/tests/struct_instructions.rs: `.stack_push(AbstractValue::new_primitive(SignatureToken::Address))`
$DIR/language/testing-infra/test-generation/tests/struct_instructions.rs: `.stack_peek(0)`
$DIR/language/testing-infra/test-generation/tests/struct_instructions.rs: `.stack_push(AbstractValue::new_primitive(SignatureToken::Address))`
$DIR/language/testing-infra/test-generation/tests/struct_instructions.rs: `.stack_push(AbstractValue::new_reference(
        SignatureToken::Reference(Box::new(SignatureToken::Signer)),
        AbilitySet::EMPTY | Ability::Drop,
    ))`
$DIR/language/testing-infra/test-generation/tests/struct_instructions.rs: `.stack_push(create_struct_value(&state1.module.module).0)`
$DIR/language/testing-infra/test-generation/tests/struct_instructions.rs: `.stack_push(AbstractValue::new_reference(
        SignatureToken::Reference(Box::new(SignatureToken::Signer)),
        AbilitySet::EMPTY | Ability::Drop,
    ))`
$DIR/language/testing-infra/test-generation/tests/struct_instructions.rs: `.stack_push(create_struct_value(&state1.module.module).0)`
$DIR/language/testing-infra/test-generation/tests/struct_instructions.rs: `.stack_push(AbstractValue::new_reference(
        SignatureToken::Reference(Box::new(SignatureToken::Signer)),
        AbilitySet::EMPTY | Ability::Drop,
    ))`
$DIR/language/testing-infra/test-generation/tests/struct_instructions.rs: `.struct_defs.len()`
$DIR/language/testing-infra/test-generation/tests/struct_instructions.rs: `.field_handles.push(FieldHandle {
        owner: struct_def_idx,
        field: 0,
    })`
$DIR/language/testing-infra/test-generation/tests/struct_instructions.rs: `.field_handles.len()`
$DIR/language/testing-infra/test-generation/tests/struct_instructions.rs: `.stack_push(AbstractValue {
        token: SignatureToken::MutableReference(Box::new(struct_value.token)),
        abilities: struct_value.abilities,
    })`
$DIR/language/testing-infra/test-generation/tests/struct_instructions.rs: `.struct_defs.len()`
$DIR/language/testing-infra/test-generation/tests/struct_instructions.rs: `.field_handles.push(FieldHandle {
        owner: struct_def_idx,
        field: 0,
    })`
$DIR/language/testing-infra/test-generation/tests/struct_instructions.rs: `.field_handles.len()`
$DIR/language/testing-infra/test-generation/tests/struct_instructions.rs: `.struct_defs.len()`
$DIR/language/testing-infra/test-generation/tests/struct_instructions.rs: `.field_handles.push(FieldHandle {
        owner: struct_def_idx,
        field: 0,
    })`
$DIR/language/testing-infra/test-generation/tests/struct_instructions.rs: `.field_handles.len()`
$DIR/language/testing-infra/test-generation/tests/struct_instructions.rs: `.stack_push(AbstractValue {
        token: SignatureToken::Reference(Box::new(struct_value.token)),
        abilities: struct_value.abilities,
    })`
$DIR/language/testing-infra/test-generation/tests/struct_instructions.rs: `.struct_defs.len()`
$DIR/language/testing-infra/test-generation/tests/struct_instructions.rs: `.field_handles.push(FieldHandle {
        owner: struct_def_idx,
        field: 0,
    })`
$DIR/language/testing-infra/test-generation/tests/struct_instructions.rs: `.field_handles.len()`
$DIR/language/testing-infra/test-generation/tests/struct_instructions.rs: `.stack_push(AbstractValue {
        token: SignatureToken::Reference(Box::new(struct_value.token)),
        abilities: struct_value.abilities,
    })`
$DIR/language/testing-infra/test-generation/tests/struct_instructions.rs: `.struct_defs.len()`
$DIR/language/testing-infra/test-generation/tests/struct_instructions.rs: `.field_handles.push(FieldHandle {
        owner: struct_def_idx,
        field: 0,
    })`
$DIR/language/testing-infra/test-generation/tests/struct_instructions.rs: `.field_handles.len()`
$DIR/language/testing-infra/test-generation/tests/struct_instructions.rs: `.struct_defs.len()`
$DIR/language/testing-infra/test-generation/tests/struct_instructions.rs: `.field_handles.push(FieldHandle {
        owner: struct_def_idx,
        field: 0,
    })`
$DIR/language/testing-infra/test-generation/tests/struct_instructions.rs: `.field_handles.len()`
$DIR/language/testing-infra/test-generation/tests/struct_instructions.rs: `.stack_push(AbstractValue {
        token: SignatureToken::MutableReference(Box::new(struct_value.token)),
        abilities: struct_value.abilities,
    })`
$DIR/language/testing-infra/test-generation/tests/struct_instructions.rs: `.stack_push(AbstractValue::new_primitive(SignatureToken::Address))`
$DIR/language/testing-infra/test-generation/tests/struct_instructions.rs: `.stack_push(AbstractValue::new_primitive(SignatureToken::Address))`
$DIR/language/tools/mirai-dataflow-analysis/tests/datalog_tests.rs: `test_files.push(file_path.into_os_string().into_string().unwrap());`
$DIR/language/tools/mirai-dataflow-analysis/tests/datalog_tests.rs: `*counter.entry(item).or_insert(0) += 1;`
$DIR/language/tools/mirai-dataflow-analysis/tests/datalog_tests.rs: `child
        .stdin
        .take()
        .unwrap()
        .write_all(file_data.as_bytes())
        .unwrap();`
$DIR/language/tools/mirai-dataflow-analysis/tests/datalog_tests.rs: `expected.push_str(c.as_str());`
$DIR/language/tools/mirai-dataflow-analysis/tests/datalog_tests.rs: `.unwrap_or_else(|_| panic!("{}", error_msg))`
$DIR/language/tools/mirai-dataflow-analysis/tests/datalog_tests.rs: `.file_type()`
$DIR/language/tools/mirai-dataflow-analysis/tests/datalog_tests.rs: `.is_file()`
$DIR/language/tools/mirai-dataflow-analysis/tests/datalog_tests.rs: `.path()`
$DIR/language/tools/mirai-dataflow-analysis/tests/datalog_tests.rs: `.push(file_path.into_os_string().into_string().unwrap())`
$DIR/language/tools/mirai-dataflow-analysis/tests/datalog_tests.rs: `.split('\n')`
$DIR/language/tools/mirai-dataflow-analysis/tests/datalog_tests.rs: `.collect::<Vec<&str>>()`
$DIR/language/tools/mirai-dataflow-analysis/tests/datalog_tests.rs: `.filter(|x| !x.is_empty())`
$DIR/language/tools/mirai-dataflow-analysis/tests/datalog_tests.rs: `.is_empty()`
$DIR/language/tools/mirai-dataflow-analysis/tests/datalog_tests.rs: `.map(|x| x.trim())`
$DIR/language/tools/mirai-dataflow-analysis/tests/datalog_tests.rs: `.trim()`
$DIR/language/tools/mirai-dataflow-analysis/tests/datalog_tests.rs: `.entry(item)`
$DIR/language/tools/mirai-dataflow-analysis/tests/datalog_tests.rs: `.or_insert(0)`
$DIR/language/tools/mirai-dataflow-analysis/tests/datalog_tests.rs: `.stdin(Stdio::piped())`
$DIR/language/tools/mirai-dataflow-analysis/tests/datalog_tests.rs: `.stdout(Stdio::piped())`
$DIR/language/tools/mirai-dataflow-analysis/tests/datalog_tests.rs: `.spawn()`
$DIR/language/tools/mirai-dataflow-analysis/tests/datalog_tests.rs: `.stdin
        .take()`
$DIR/language/tools/mirai-dataflow-analysis/tests/datalog_tests.rs: `.write_all(file_data.as_bytes())`
$DIR/language/tools/mirai-dataflow-analysis/tests/datalog_tests.rs: `.wait_with_output()`
$DIR/language/tools/mirai-dataflow-analysis/tests/datalog_tests.rs: `.captures_iter(&test_case_data)`
$DIR/language/tools/mirai-dataflow-analysis/tests/datalog_tests.rs: `.get(2)`
$DIR/language/tools/mirai-dataflow-analysis/tests/datalog_tests.rs: `.push_str(c.as_str())`
$DIR/language/tools/mirai-dataflow-analysis/tests/datalog_tests.rs: `.fold(0, |acc, file| acc + execute_test(file))`
$DIR/language/tools/move-cli/tests/cli_tests.rs: `.collect()`
$DIR/language/tools/move-cli/tests/cli_tests.rs: `.to_str()`
$DIR/language/tools/move-cli/tests/cli_tests.rs: `.collect()`
$DIR/language/tools/move-cli/tests/cli_tests.rs: `.to_str()`
$DIR/language/tools/move-unit-test/tests/test_deps.rs: `testing_config.source_files = vec![b_path.to_str().unwrap().to_owned()];`
$DIR/language/tools/move-unit-test/tests/test_deps.rs: `testing_config.dep_files = vec![a_path.to_str().unwrap().to_owned()];`
$DIR/language/tools/move-unit-test/tests/test_deps.rs: `.with_named_addresses(move_stdlib::move_stdlib_named_addresses())`
$DIR/language/tools/move-unit-test/tests/test_deps.rs: `.join("tests/sources/A.move")`
$DIR/language/tools/move-unit-test/tests/test_deps.rs: `.join("tests/sources/B.move")`
$DIR/language/tools/move-unit-test/tests/test_deps.rs: `.build_test_plan()`
$DIR/language/tools/move-unit-test/tests/test_deps.rs: `.module_tests.into_iter()`
$DIR/language/tools/move-unit-test/tests/test_deps.rs: `.next()`
$DIR/language/transaction-builder/generator/tests/cli.rs: `write!(&mut test_script, "{}", quotes.next().unwrap())?;`
$DIR/language/transaction-builder/generator/tests/cli.rs: `write!(&mut test_script, "{}", quotes.next().unwrap())?;`
$DIR/language/transaction-builder/generator/tests/cli.rs: `write!(&mut test_script, "{}", quotes.next().unwrap())?;`
$DIR/language/transaction-builder/generator/tests/cli.rs: `quote += &line;`
$DIR/language/transaction-builder/generator/tests/cli.rs: `quote += "\n";`
$DIR/language/transaction-builder/generator/tests/cli.rs: `result.push(quote);`
$DIR/language/transaction-builder/generator/tests/cli.rs: `.into_iter()`
$DIR/language/transaction-builder/generator/tests/cli.rs: `.path()`
$DIR/language/transaction-builder/generator/tests/cli.rs: `.join("test.sh")`
$DIR/language/transaction-builder/generator/tests/cli.rs: `.current_dir("../../..")`
$DIR/language/transaction-builder/generator/tests/cli.rs: `// root of Diem
            .env("DEST", dir.path())`
$DIR/language/transaction-builder/generator/tests/cli.rs: `.path()`
$DIR/language/transaction-builder/generator/tests/cli.rs: `.arg("-e")`
$DIR/language/transaction-builder/generator/tests/cli.rs: `.arg("-x")`
$DIR/language/transaction-builder/generator/tests/cli.rs: `.arg(dir.path().join("test.sh"))`
$DIR/language/transaction-builder/generator/tests/cli.rs: `.path()`
$DIR/language/transaction-builder/generator/tests/cli.rs: `.join("test.sh")`
$DIR/language/transaction-builder/generator/tests/cli.rs: `.output()`
$DIR/language/transaction-builder/generator/tests/cli.rs: `.path()`
$DIR/language/transaction-builder/generator/tests/cli.rs: `.join("test.sh")`
$DIR/language/transaction-builder/generator/tests/cli.rs: `.current_dir("../../..")`
$DIR/language/transaction-builder/generator/tests/cli.rs: `// root of Diem
        .env("DEST", dir.path())`
$DIR/language/transaction-builder/generator/tests/cli.rs: `.path()`
$DIR/language/transaction-builder/generator/tests/cli.rs: `.arg("-e")`
$DIR/language/transaction-builder/generator/tests/cli.rs: `.arg("-x")`
$DIR/language/transaction-builder/generator/tests/cli.rs: `.arg(dir.path().join("test.sh"))`
$DIR/language/transaction-builder/generator/tests/cli.rs: `.path()`
$DIR/language/transaction-builder/generator/tests/cli.rs: `.join("test.sh")`
$DIR/language/transaction-builder/generator/tests/cli.rs: `.output()`
$DIR/language/transaction-builder/generator/tests/cli.rs: `.lines()`
$DIR/language/transaction-builder/generator/tests/cli.rs: `.next()`
$DIR/language/transaction-builder/generator/tests/cli.rs: `.starts_with("```bash")`
$DIR/language/transaction-builder/generator/tests/cli.rs: `.next()`
$DIR/language/transaction-builder/generator/tests/cli.rs: `.starts_with("```")`
$DIR/language/transaction-builder/generator/tests/cli.rs: `.push(quote)`
$DIR/language/transaction-builder/generator/tests/generation.rs: `abis.extend(get_script_fun_abis().into_iter());`
$DIR/language/transaction-builder/generator/tests/generation.rs: `installer.install_module(&config, &registry).unwrap();`
$DIR/language/transaction-builder/generator/tests/generation.rs: `installer.install_serde_runtime().unwrap();`
$DIR/language/transaction-builder/generator/tests/generation.rs: `installer.install_bcs_runtime().unwrap();`
$DIR/language/transaction-builder/generator/tests/generation.rs: `std::fs::create_dir_all(stdlib_dir_path.clone()).unwrap();`
$DIR/language/transaction-builder/generator/tests/generation.rs: `buildgen::python3::output(&mut source, None, None, &abis).unwrap();`
$DIR/language/transaction-builder/generator/tests/generation.rs: `std::fs::copy(
        "examples/python3/stdlib_demo.py",
        dir.path().join("src/stdlib_demo.py"),
    )
    .unwrap();`
$DIR/language/transaction-builder/generator/tests/generation.rs: `installer.install_module(&config, &registry).unwrap();`
$DIR/language/transaction-builder/generator/tests/generation.rs: `std::fs::create_dir_all(stdlib_dir_path.clone()).unwrap();`
$DIR/language/transaction-builder/generator/tests/generation.rs: `std::fs::create_dir(stdlib_dir_path.join("src")).unwrap();`
$DIR/language/transaction-builder/generator/tests/generation.rs: `buildgen::rust::output(&mut source, abis, /* local types */ false).unwrap();`
$DIR/language/transaction-builder/generator/tests/generation.rs: `std::fs::copy(demo_file, stdlib_dir_path.join("src/stdlib_demo.rs")).unwrap();`
$DIR/language/transaction-builder/generator/tests/generation.rs: `bcs_installer.install_module(&config, &registry).unwrap();`
$DIR/language/transaction-builder/generator/tests/generation.rs: `bcs_installer.install_serde_runtime().unwrap();`
$DIR/language/transaction-builder/generator/tests/generation.rs: `bcs_installer.install_bcs_runtime().unwrap();`
$DIR/language/transaction-builder/generator/tests/generation.rs: `abi_installer
        .install_transaction_builders("diem_framework", &abis)
        .unwrap();`
$DIR/language/transaction-builder/generator/tests/generation.rs: `std::fs::copy(
        "examples/cpp/stdlib_demo.cpp",
        dir.path().join("stdlib_demo.cpp"),
    )
    .unwrap();`
$DIR/language/transaction-builder/generator/tests/generation.rs: `bcs_installer.install_module(&config, &registry).unwrap();`
$DIR/language/transaction-builder/generator/tests/generation.rs: `bcs_installer.install_serde_runtime().unwrap();`
$DIR/language/transaction-builder/generator/tests/generation.rs: `bcs_installer.install_bcs_runtime().unwrap();`
$DIR/language/transaction-builder/generator/tests/generation.rs: `abi_installer
        .install_transaction_builders("com.diem.stdlib", &abis)
        .unwrap();`
$DIR/language/transaction-builder/generator/tests/generation.rs: `std::fs::copy(
        "examples/java/StdlibDemo.java",
        dir.path().join("StdlibDemo.java"),
    )
    .unwrap();`
$DIR/language/transaction-builder/generator/tests/generation.rs: `std::env::set_var("TMPDIR", "/private/tmp/");`
$DIR/language/transaction-builder/generator/tests/generation.rs: `bcs_installer.install_module(&config, &registry).unwrap();`
$DIR/language/transaction-builder/generator/tests/generation.rs: `bcs_installer.install_serde_runtime().unwrap();`
$DIR/language/transaction-builder/generator/tests/generation.rs: `bcs_installer.install_bcs_runtime().unwrap();`
$DIR/language/transaction-builder/generator/tests/generation.rs: `abi_installer
        .install_transaction_builders("Diem.Stdlib", &abis)
        .unwrap();`
$DIR/language/transaction-builder/generator/tests/generation.rs: `std::fs::create_dir(dir.path().join("Demo")).unwrap();`
$DIR/language/transaction-builder/generator/tests/generation.rs: `std::fs::copy(
        "examples/csharp/StdlibDemo.cs",
        dir.path().join("Demo/StdlibDemo.cs"),
    )
    .unwrap();`
$DIR/language/transaction-builder/generator/tests/generation.rs: `bcs_installer.install_module(&config, &registry).unwrap();`
$DIR/language/transaction-builder/generator/tests/generation.rs: `abi_installer
        .install_transaction_builders("diemstdlib", &abis)
        .unwrap();`
$DIR/language/transaction-builder/generator/tests/generation.rs: `std::fs::copy(
        "examples/golang/stdlib_demo.go",
        dir.path().join("stdlib_demo.go"),
    )
    .unwrap();`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.extend(get_script_fun_abis().into_iter())`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.into_iter()`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.path()`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.join("src")`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.map(|e| e.unwrap().path())`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.path()`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.with_encodings(vec![serdegen::Encoding::Bcs])`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.with_custom_code(buildgen::read_custom_code_from_paths(
            &["diem_types"],
            paths,
        ))`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.install_module(&config, &registry)`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.install_serde_runtime()`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.install_bcs_runtime()`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.join("diem_framework")`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.join("__init__.py")`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.path()`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.join("src/stdlib_demo.py")`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.env("PYTHONPATH", python_path)`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.arg(dir.path().join("src/stdlib_demo.py"))`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.path()`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.join("src/stdlib_demo.py")`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.output()`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.arg("-c")`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.arg("import os; import numpy; print(os.path.dirname(numpy.__path__[0]), end='')")`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.output()`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.parent()`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.current_dir(dir.path())`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.path()`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.arg("--source-directory")`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.arg("src")`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.arg("--noninteractive")`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.arg("--binary")`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.arg(local_bin_path.join("pyre.bin"))`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.join("pyre.bin")`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.arg("--typeshed")`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.arg(local_bin_path.join("../lib/pyre_check/typeshed"))`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.join("../lib/pyre_check/typeshed")`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.arg("--search-path")`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.arg(String::from_utf8_lossy(&site_packages).as_ref())`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.arg("check")`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.status()`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.path()`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.install_module(&config, &registry)`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.path()`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.join("diem-framework")`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.join("Cargo.toml")`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.join("src")`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.join("src/lib.rs")`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.join("src/stdlib_demo.rs")`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.join("../../target")`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.current_dir(dir.path().join("diem-framework"))`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.path()`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.join("diem-framework")`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.arg("build")`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.arg("--target-dir")`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.arg(target_dir.clone())`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.status()`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.join("debug/stdlib_demo")`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.output()`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.with_encodings(vec![serdegen::Encoding::Bcs])`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.path()`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.install_module(&config, &registry)`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.install_serde_runtime()`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.install_bcs_runtime()`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.path()`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.install_transaction_builders("diem_framework", &abis)`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.path()`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.join("stdlib_demo.cpp")`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.arg("--std=c++17")`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.arg("-g")`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.arg(dir.path().join("diem_framework.cpp"))`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.path()`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.join("diem_framework.cpp")`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.arg(dir.path().join("stdlib_demo.cpp"))`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.path()`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.join("stdlib_demo.cpp")`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.arg("-o")`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.arg(dir.path().join("stdlib_demo"))`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.path()`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.join("stdlib_demo")`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.status()`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.path()`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.join("stdlib_demo")`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.output()`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.map(|e| e.unwrap().path())`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.path()`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.with_encodings(vec![serdegen::Encoding::Bcs])`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.with_custom_code(buildgen::read_custom_code_from_paths(
            &["com", "diem", "types"],
            paths,
        ))`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.path()`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.install_module(&config, &registry)`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.install_serde_runtime()`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.install_bcs_runtime()`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.path()`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.install_transaction_builders("com.diem.stdlib", &abis)`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.path()`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.join("StdlibDemo.java")`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.chain(std::fs::read_dir(dir.path().join("com/novi/serde")).unwrap())`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.path()`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.join("com/novi/serde")`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.chain(std::fs::read_dir(dir.path().join("com/novi/bcs")).unwrap())`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.path()`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.join("com/novi/bcs")`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.chain(std::fs::read_dir(dir.path().join("com/diem/types")).unwrap())`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.path()`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.join("com/diem/types")`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.chain(std::fs::read_dir(dir.path().join("com/diem/stdlib")).unwrap())`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.path()`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.join("com/diem/stdlib")`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.map(|e| e.unwrap().path())`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.path()`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.path()`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.join("StdlibDemo.java")`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.arg("-sourcepath")`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.arg(dir.path())`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.path()`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.arg("-d")`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.arg(dir.path().join("html"))`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.path()`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.join("html")`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.args(paths())`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.status()`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.arg("-cp")`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.arg(dir.path())`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.path()`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.arg("-d")`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.arg(dir.path())`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.path()`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.args(paths())`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.status()`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.arg("-enableassertions")`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.arg("-cp")`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.arg(dir.path())`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.path()`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.arg("StdlibDemo")`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.output()`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.map(|e| e.unwrap().path())`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.path()`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.with_encodings(vec![serdegen::Encoding::Bcs])`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.with_custom_code(buildgen::read_custom_code_from_paths(
            &["Diem", "Types"],
            paths,
        ))`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.path()`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.install_module(&config, &registry)`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.install_serde_runtime()`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.install_bcs_runtime()`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.path()`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.install_transaction_builders("Diem.Stdlib", &abis)`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.path()`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.join("Demo")`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.path()`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.join("Demo/StdlibDemo.cs")`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.arg("new")`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.arg("classlib")`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.arg("-n")`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.arg("Diem.Stdlib")`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.arg("-o")`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.arg(dir.path().join("Diem/Stdlib"))`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.path()`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.join("Diem/Stdlib")`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.status()`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.arg(dir.path().join("Diem/Stdlib/Class1.cs"))`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.path()`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.join("Diem/Stdlib/Class1.cs")`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.status()`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.arg("add")`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.arg(dir.path().join("Diem/Stdlib/Diem.Stdlib.csproj"))`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.path()`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.join("Diem/Stdlib/Diem.Stdlib.csproj")`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.arg("reference")`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.arg(dir.path().join("Diem/Types/Diem.Types.csproj"))`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.path()`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.join("Diem/Types/Diem.Types.csproj")`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.status()`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.arg("new")`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.arg("sln")`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.arg("-n")`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.arg("Demo")`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.arg("-o")`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.arg(dir.path().join("Demo"))`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.path()`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.join("Demo")`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.status()`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.arg("new")`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.arg("console")`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.arg("-n")`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.arg("Demo")`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.arg("-o")`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.arg(dir.path().join("Demo"))`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.path()`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.join("Demo")`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.status()`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.arg(dir.path().join("Demo/Program.cs"))`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.path()`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.join("Demo/Program.cs")`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.status()`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.arg("add")`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.arg(dir.path().join("Demo/Demo.csproj"))`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.path()`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.join("Demo/Demo.csproj")`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.arg("reference")`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.arg(dir.path().join("Diem/Stdlib/Diem.Stdlib.csproj"))`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.path()`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.join("Diem/Stdlib/Diem.Stdlib.csproj")`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.status()`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.arg("add")`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.arg(dir.path().join("Demo/Demo.csproj"))`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.path()`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.join("Demo/Demo.csproj")`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.arg("reference")`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.arg(dir.path().join("Diem/Types/Diem.Types.csproj"))`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.path()`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.join("Diem/Types/Diem.Types.csproj")`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.status()`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.arg("add")`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.arg(dir.path().join("Demo/Demo.csproj"))`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.path()`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.join("Demo/Demo.csproj")`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.arg("reference")`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.arg(dir.path().join("Serde/Serde.csproj"))`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.path()`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.join("Serde/Serde.csproj")`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.status()`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.arg("add")`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.arg(dir.path().join("Demo/Demo.csproj"))`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.path()`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.join("Demo/Demo.csproj")`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.arg("reference")`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.arg(dir.path().join("Bcs/Bcs.csproj"))`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.path()`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.join("Bcs/Bcs.csproj")`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.status()`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.arg("build")`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.arg(dir.path().join("Demo/Demo.csproj"))`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.path()`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.join("Demo/Demo.csproj")`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.status()`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.arg("run")`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.arg("--project")`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.arg(dir.path().join("Demo/Demo.csproj"))`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.path()`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.join("Demo/Demo.csproj")`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.output()`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.with_encodings(vec![serdegen::Encoding::Bcs])`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.path()`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.install_module(&config, &registry)`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.path()`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.install_transaction_builders("diemstdlib", &abis)`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.path()`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.join("stdlib_demo.go")`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.current_dir(dir.path())`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.path()`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.arg("mod")`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.arg("init")`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.arg("testing")`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.status()`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.current_dir(dir.path())`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.path()`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.arg("mod")`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.arg("edit")`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.arg("-replace")`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.arg(format!("testing={}", dir.path().to_string_lossy(),))`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.status()`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.current_dir(dir.path())`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.path()`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.arg("run")`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.arg(dir.path().join("stdlib_demo.go"))`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.path()`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.join("stdlib_demo.go")`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.output()`
$DIR/mempool/src/tests/core_mempool_test.rs: `transactions = add_txns_to_mempool(
        &mut mempool,
        vec![TestTransaction::new(0, 0, 1), TestTransaction::new(1, 0, 1)],
    );`
$DIR/mempool/src/tests/core_mempool_test.rs: `transactions = add_txns_to_mempool(
        &mut mempool,
        vec![
            TestTransaction::new(1, 0, 7),
            TestTransaction::new(1, 1, 5),
            TestTransaction::new(1, 2, 1),
            TestTransaction::new(1, 3, 6),
        ],
    );`
$DIR/mempool/src/tests/core_mempool_test.rs: `transactions = add_txns_to_mempool(
        &mut mempool,
        vec![
            TestTransaction::new(0, 0, 1).crsn(0),
            TestTransaction::new(1, 0, 1).crsn(0),
        ],
    );`
$DIR/mempool/src/tests/core_mempool_test.rs: `transactions = add_txns_to_mempool(
        &mut mempool,
        vec![
            TestTransaction::new(1, 0, 7).crsn(0),
            TestTransaction::new(1, 4, 6).crsn(0),
            TestTransaction::new(1, 1, 5).crsn(0),
            TestTransaction::new(1, 2, 5).crsn(0),
            TestTransaction::new(1, 3, 1).crsn(0),
        ],
    );`
$DIR/mempool/src/tests/core_mempool_test.rs: `gov_txn1.governance_role = *role1;`
$DIR/mempool/src/tests/core_mempool_test.rs: `gov_txn2.governance_role = *role2;`
$DIR/mempool/src/tests/core_mempool_test.rs: `std::mem::swap(&mut gov_txn1, &mut gov_txn2);`
$DIR/mempool/src/tests/core_mempool_test.rs: `pool.remove_transaction(&txn.sender(), txn.sequence_number(), false);`
$DIR/mempool/src/tests/core_mempool_test.rs: `pool.remove_transaction(&txn.sender(), txn.sequence_number(), false);`
$DIR/mempool/src/tests/core_mempool_test.rs: `config.mempool.system_transaction_timeout_secs = 0;`
$DIR/mempool/src/tests/core_mempool_test.rs: `add_txn(&mut mempool, TestTransaction::new(0, 0, 10)).unwrap();`
$DIR/mempool/src/tests/core_mempool_test.rs: `mempool.system_transaction_timeout = Duration::from_secs(10);`
$DIR/mempool/src/tests/core_mempool_test.rs: `add_txn(&mut mempool, transaction.clone()).unwrap();`
$DIR/mempool/src/tests/core_mempool_test.rs: `mempool.gc();`
$DIR/mempool/src/tests/core_mempool_test.rs: `pool.remove_transaction(&TestTransaction::get_address(1), 5, false);`
$DIR/mempool/src/tests/core_mempool_test.rs: `pool.remove_transaction(&TestTransaction::get_address(1), 5, false);`
$DIR/mempool/src/tests/core_mempool_test.rs: `add_txns_to_mempool(&mut pool, vec![TestTransaction::new(1, 6, 1)]);`
$DIR/mempool/src/tests/core_mempool_test.rs: `add_txns_to_mempool(
        &mut pool,
        vec![TestTransaction::new(1, 0, 1), TestTransaction::new(1, 1, 1)],
    );`
$DIR/mempool/src/tests/core_mempool_test.rs: `pool.remove_transaction(&TestTransaction::get_address(1), 0, true);`
$DIR/mempool/src/tests/core_mempool_test.rs: `pool.remove_transaction(&TestTransaction::get_address(1), 1, true);`
$DIR/mempool/src/tests/core_mempool_test.rs: `add_txns_to_mempool(
        &mut pool,
        vec![
            TestTransaction::new(1, 0, 1),
            TestTransaction::new(1, 1, 1),
            TestTransaction::new(1, 3, 1),
            TestTransaction::new(1, 5, 1),
        ],
    );`
$DIR/mempool/src/tests/core_mempool_test.rs: `add_txns_to_mempool(&mut pool, vec![TestTransaction::new(1, 2, 1)]);`
$DIR/mempool/src/tests/core_mempool_test.rs: `pool.remove_transaction(&TestTransaction::get_address(1), 4, false);`
$DIR/mempool/src/tests/core_mempool_test.rs: `config.mempool.capacity = 1;`
$DIR/mempool/src/tests/core_mempool_test.rs: `config.mempool.system_transaction_timeout_secs = 0;`
$DIR/mempool/src/tests/core_mempool_test.rs: `add_txn(&mut pool, TestTransaction::new(1, 0, 1)).unwrap();`
$DIR/mempool/src/tests/core_mempool_test.rs: `pool.remove_transaction(&TestTransaction::get_address(1), 0, false);`
$DIR/mempool/src/tests/core_mempool_test.rs: `pool.gc();`
$DIR/mempool/src/tests/core_mempool_test.rs: `config.mempool.capacity = 5;`
$DIR/mempool/src/tests/core_mempool_test.rs: `add_txn(&mut pool, TestTransaction::new(1, *seq, 1)).unwrap();`
$DIR/mempool/src/tests/core_mempool_test.rs: `add_txn(&mut pool, TestTransaction::new(0, *seq, 1)).unwrap();`
$DIR/mempool/src/tests/core_mempool_test.rs: `txns.sort_unstable();`
$DIR/mempool/src/tests/core_mempool_test.rs: `config.mempool.capacity = 6;`
$DIR/mempool/src/tests/core_mempool_test.rs: `add_txn(&mut pool, TestTransaction::new(1, *seq, 1)).unwrap();`
$DIR/mempool/src/tests/core_mempool_test.rs: `add_txn(&mut pool, TestTransaction::new(1, seq, 1)).unwrap();`
$DIR/mempool/src/tests/core_mempool_test.rs: `txns.sort_unstable();`
$DIR/mempool/src/tests/core_mempool_test.rs: `add_txn(&mut pool, TestTransaction::new(1, 0, 1)).unwrap();`
$DIR/mempool/src/tests/core_mempool_test.rs: `pool.add_txn(
        txn,
        0,
        1,
        AccountSequenceInfo::Sequential(0),
        TimelineState::NotReady,
        GovernanceRole::NonGovernanceRole,
    );`
$DIR/mempool/src/tests/core_mempool_test.rs: `add_txn(&mut pool, TestTransaction::new(1, 2, 1)).unwrap();`
$DIR/mempool/src/tests/core_mempool_test.rs: `add_txn(&mut pool, TestTransaction::new(1, 3, 1)).unwrap();`
$DIR/mempool/src/tests/core_mempool_test.rs: `pool.gc_by_expiration_time(Duration::from_secs(1));`
$DIR/mempool/src/tests/core_mempool_test.rs: `add_txn(&mut pool, TestTransaction::new(0, seq, 1)).unwrap();`
$DIR/mempool/src/tests/core_mempool_test.rs: `pool.add_txn(
        txn,
        0,
        1,
        AccountSequenceInfo::Sequential(db_sequence_number),
        TimelineState::NotReady,
        GovernanceRole::NonGovernanceRole,
    );`
$DIR/mempool/src/tests/core_mempool_test.rs: `cache.insert(1, 1);`
$DIR/mempool/src/tests/core_mempool_test.rs: `cache.insert(1, 2);`
$DIR/mempool/src/tests/core_mempool_test.rs: `cache.insert(2, 2);`
$DIR/mempool/src/tests/core_mempool_test.rs: `cache.insert(1, 3);`
$DIR/mempool/src/tests/core_mempool_test.rs: `cache.insert(3, 3);`
$DIR/mempool/src/tests/core_mempool_test.rs: `cache.gc(SystemTime::now()
        .checked_add(Duration::from_secs(10))
        .unwrap());`
$DIR/mempool/src/tests/core_mempool_test.rs: `.priority()`
$DIR/mempool/src/tests/core_mempool_test.rs: `.priority()`
$DIR/mempool/src/tests/core_mempool_test.rs: `.crsn(0)`
$DIR/mempool/src/tests/core_mempool_test.rs: `.make_signed_transaction_with_expiration_time(u64::max_value() - 1000)`
$DIR/mempool/src/tests/core_mempool_test.rs: `.crsn(0)`
$DIR/mempool/src/tests/core_mempool_test.rs: `.make_signed_transaction_with_expiration_time(u64::max_value() - 1000)`
$DIR/mempool/src/tests/core_mempool_test.rs: `.get_block(&mut mempool, 1)`
$DIR/mempool/src/tests/core_mempool_test.rs: `.crsn(0)`
$DIR/mempool/src/tests/core_mempool_test.rs: `.get_block(&mut mempool, 1)`
$DIR/mempool/src/tests/core_mempool_test.rs: `.remove_transaction(&txn.sender(), txn.sequence_number(), false)`
$DIR/mempool/src/tests/core_mempool_test.rs: `.sender()`
$DIR/mempool/src/tests/core_mempool_test.rs: `.sequence_number()`
$DIR/mempool/src/tests/core_mempool_test.rs: `.remove_transaction(&txn.sender(), txn.sequence_number(), false)`
$DIR/mempool/src/tests/core_mempool_test.rs: `.sender()`
$DIR/mempool/src/tests/core_mempool_test.rs: `.sequence_number()`
$DIR/mempool/src/tests/core_mempool_test.rs: `.gc()`
$DIR/mempool/src/tests/core_mempool_test.rs: `.get_block(1, HashSet::new())`
$DIR/mempool/src/tests/core_mempool_test.rs: `.remove_transaction(&TestTransaction::get_address(1), 5, false)`
$DIR/mempool/src/tests/core_mempool_test.rs: `.remove_transaction(&TestTransaction::get_address(1), 5, false)`
$DIR/mempool/src/tests/core_mempool_test.rs: `.remove_transaction(&TestTransaction::get_address(1), 0, true)`
$DIR/mempool/src/tests/core_mempool_test.rs: `.remove_transaction(&TestTransaction::get_address(1), 1, true)`
$DIR/mempool/src/tests/core_mempool_test.rs: `.map(SignedTransaction::sequence_number)`
$DIR/mempool/src/tests/core_mempool_test.rs: `.read_timeline(0, 10)`
$DIR/mempool/src/tests/core_mempool_test.rs: `.read_timeline(0, 10)`
$DIR/mempool/src/tests/core_mempool_test.rs: `.read_timeline(2, 10)`
$DIR/mempool/src/tests/core_mempool_test.rs: `.remove_transaction(&TestTransaction::get_address(1), 4, false)`
$DIR/mempool/src/tests/core_mempool_test.rs: `.read_timeline(0, 10)`
$DIR/mempool/src/tests/core_mempool_test.rs: `.remove_transaction(&TestTransaction::get_address(1), 0, false)`
$DIR/mempool/src/tests/core_mempool_test.rs: `.gc()`
$DIR/mempool/src/tests/core_mempool_test.rs: `.get_block(5, HashSet::new())`
$DIR/mempool/src/tests/core_mempool_test.rs: `.map(SignedTransaction::sequence_number)`
$DIR/mempool/src/tests/core_mempool_test.rs: `.collect()`
$DIR/mempool/src/tests/core_mempool_test.rs: `.sort_unstable()`
$DIR/mempool/src/tests/core_mempool_test.rs: `.get_block(5, HashSet::new())`
$DIR/mempool/src/tests/core_mempool_test.rs: `.map(SignedTransaction::sequence_number)`
$DIR/mempool/src/tests/core_mempool_test.rs: `.collect()`
$DIR/mempool/src/tests/core_mempool_test.rs: `.sort_unstable()`
$DIR/mempool/src/tests/core_mempool_test.rs: `.make_signed_transaction_with_expiration_time(0)`
$DIR/mempool/src/tests/core_mempool_test.rs: `.add_txn(
        txn,
        0,
        1,
        AccountSequenceInfo::Sequential(0),
        TimelineState::NotReady,
        GovernanceRole::NonGovernanceRole,
    )`
$DIR/mempool/src/tests/core_mempool_test.rs: `.read_timeline(0, 10)`
$DIR/mempool/src/tests/core_mempool_test.rs: `.gc_by_expiration_time(Duration::from_secs(1))`
$DIR/mempool/src/tests/core_mempool_test.rs: `.get_block(10, HashSet::new())`
$DIR/mempool/src/tests/core_mempool_test.rs: `.read_timeline(0, 10)`
$DIR/mempool/src/tests/core_mempool_test.rs: `.make_signed_transaction()`
$DIR/mempool/src/tests/core_mempool_test.rs: `.add_txn(
        txn,
        0,
        1,
        AccountSequenceInfo::Sequential(db_sequence_number),
        TimelineState::NotReady,
        GovernanceRole::NonGovernanceRole,
    )`
$DIR/mempool/src/tests/core_mempool_test.rs: `.get_block(10, HashSet::new())`
$DIR/mempool/src/tests/core_mempool_test.rs: `.insert(1, 1)`
$DIR/mempool/src/tests/core_mempool_test.rs: `.insert(1, 2)`
$DIR/mempool/src/tests/core_mempool_test.rs: `.insert(2, 2)`
$DIR/mempool/src/tests/core_mempool_test.rs: `.insert(1, 3)`
$DIR/mempool/src/tests/core_mempool_test.rs: `.insert(3, 3)`
$DIR/mempool/src/tests/core_mempool_test.rs: `.gc(SystemTime::now()
        .checked_add(Duration::from_secs(10))
        .unwrap())`
$DIR/mempool/src/tests/core_mempool_test.rs: `.checked_add(Duration::from_secs(10))`
$DIR/mempool/src/tests/multi_node_test.rs: `receiver.send_new_peer_event(
            receiver_is_primary,
            dialer_peer_id,
            dialer_role,
            ConnectionOrigin::Inbound,
        );`
$DIR/mempool/src/tests/multi_node_test.rs: `dialer.send_new_peer_event(
            dialer_is_primary,
            receiver_peer_id,
            receiver_role,
            ConnectionOrigin::Outbound,
        );`
$DIR/mempool/src/tests/multi_node_test.rs: `node_b.send_lost_peer_event(is_primary_b, id_a);`
$DIR/mempool/src/tests/multi_node_test.rs: `node_a.send_lost_peer_event(is_primary_a, id_b);`
$DIR/mempool/src/tests/multi_node_test.rs: `self.mut_node(node_id).wait_for_event(expected);`
$DIR/mempool/src/tests/multi_node_test.rs: `self.mut_node(node_id).check_no_subscriber_events();`
$DIR/mempool/src/tests/multi_node_test.rs: `self.mut_node(node_id)
            .check_no_network_messages_sent(is_primary);`
$DIR/mempool/src/tests/multi_node_test.rs: `receiver.send_network_req(
                            is_primary,
                            ProtocolId::MempoolDirectSend,
                            PeerManagerNotification::RecvMessage(sender_peer_id, msg),
                        );`
$DIR/mempool/src/tests/multi_node_test.rs: `self.deliver_response(&receiver_id, is_primary);`
$DIR/mempool/src/tests/multi_node_test.rs: `receiver.send_network_req(
                            is_primary,
                            ProtocolId::MempoolDirectSend,
                            PeerManagerNotification::RecvMessage(sender_peer_id, msg),
                        );`
$DIR/mempool/src/tests/multi_node_test.rs: `validator_mempool_config.broadcast_batch_size = Some(3);`
$DIR/mempool/src/tests/multi_node_test.rs: `validator_mempool_config.mempool_size = Some(5);`
$DIR/mempool/src/tests/multi_node_test.rs: `vfn_mempool_config.broadcast_batch_size = Some(3);`
$DIR/mempool/src/tests/multi_node_test.rs: `vfn_mempool_config.backoff_interval_ms = Some(50);`
$DIR/mempool/src/tests/multi_node_test.rs: `validator_mempool_config.max_broadcasts_per_peer = Some(3);`
$DIR/mempool/src/tests/multi_node_test.rs: `validator_mempool_config.ack_timeout_ms = Some(u64::MAX);`
$DIR/mempool/src/tests/multi_node_test.rs: `validator_mempool_config.backoff_interval_ms = Some(50);`
$DIR/mempool/src/tests/multi_node_test.rs: `.nodes.get(node_id)`
$DIR/mempool/src/tests/multi_node_test.rs: `.nodes.get_mut(node_id)`
$DIR/mempool/src/tests/multi_node_test.rs: `.node(node_id)`
$DIR/mempool/src/tests/multi_node_test.rs: `.peer_id(dialer_is_primary)`
$DIR/mempool/src/tests/multi_node_test.rs: `.peer_role()`
$DIR/mempool/src/tests/multi_node_test.rs: `.mut_node(receiver_id)`
$DIR/mempool/src/tests/multi_node_test.rs: `.send_new_peer_event(
            receiver_is_primary,
            dialer_peer_id,
            dialer_role,
            ConnectionOrigin::Inbound,
        )`
$DIR/mempool/src/tests/multi_node_test.rs: `.peer_id(receiver_is_primary)`
$DIR/mempool/src/tests/multi_node_test.rs: `.peer_role()`
$DIR/mempool/src/tests/multi_node_test.rs: `.mut_node(dialer_id)`
$DIR/mempool/src/tests/multi_node_test.rs: `.send_new_peer_event(
            dialer_is_primary,
            receiver_peer_id,
            receiver_role,
            ConnectionOrigin::Outbound,
        )`
$DIR/mempool/src/tests/multi_node_test.rs: `.peer_id(is_primary_a)`
$DIR/mempool/src/tests/multi_node_test.rs: `.send_lost_peer_event(is_primary_b, id_a)`
$DIR/mempool/src/tests/multi_node_test.rs: `.peer_id(is_primary_b)`
$DIR/mempool/src/tests/multi_node_test.rs: `.send_lost_peer_event(is_primary_a, id_b)`
$DIR/mempool/src/tests/multi_node_test.rs: `.wait_for_event(expected)`
$DIR/mempool/src/tests/multi_node_test.rs: `.check_no_subscriber_events()`
$DIR/mempool/src/tests/multi_node_test.rs: `.check_no_network_messages_sent(is_primary)`
$DIR/mempool/src/tests/multi_node_test.rs: `.peer_id(sender_is_primary)`
$DIR/mempool/src/tests/multi_node_test.rs: `.get_next_network_req(sender_is_primary)`
$DIR/mempool/src/tests/multi_node_test.rs: `.peer_to_node_id.get(&remote_peer_id)`
$DIR/mempool/src/tests/multi_node_test.rs: `.primary_peer_id()`
$DIR/mempool/src/tests/multi_node_test.rs: `.send_network_req(
                            is_primary,
                            ProtocolId::MempoolDirectSend,
                            PeerManagerNotification::RecvMessage(sender_peer_id, msg),
                        )`
$DIR/mempool/src/tests/multi_node_test.rs: `.mempool()`
$DIR/mempool/src/tests/multi_node_test.rs: `.get_block(100, HashSet::new())`
$DIR/mempool/src/tests/multi_node_test.rs: `.deliver_response(&receiver_id, is_primary)`
$DIR/mempool/src/tests/multi_node_test.rs: `.broadcast_txns_successfully(sender_id, is_primary_sender, 1)`
$DIR/mempool/src/tests/multi_node_test.rs: `.get(0)`
$DIR/mempool/src/tests/multi_node_test.rs: `.sequence_number()`
$DIR/mempool/src/tests/multi_node_test.rs: `.peer_id(is_primary_receiver)`
$DIR/mempool/src/tests/multi_node_test.rs: `.peer_id(sender_is_primary)`
$DIR/mempool/src/tests/multi_node_test.rs: `.get_next_network_req(sender_is_primary)`
$DIR/mempool/src/tests/multi_node_test.rs: `.peer_to_node_id.get(&remote_peer_id)`
$DIR/mempool/src/tests/multi_node_test.rs: `.primary_peer_id()`
$DIR/mempool/src/tests/multi_node_test.rs: `.send_network_req(
                            is_primary,
                            ProtocolId::MempoolDirectSend,
                            PeerManagerNotification::RecvMessage(sender_peer_id, msg),
                        )`
$DIR/mempool/src/tests/multi_node_test.rs: `.checked_add(num)`
$DIR/mempool/src/tests/multi_node_test.rs: `.get(0)`
$DIR/mempool/src/tests/multi_node_test.rs: `.get(1)`
$DIR/mempool/src/tests/multi_node_test.rs: `.get(0)`
$DIR/mempool/src/tests/multi_node_test.rs: `.get(1)`
$DIR/mempool/src/tests/multi_node_test.rs: `.take(3)`
$DIR/mempool/src/tests/multi_node_test.rs: `.get(0)`
$DIR/mempool/src/tests/multi_node_test.rs: `.get(1)`
$DIR/mempool/src/tests/multi_node_test.rs: `.get(2)`
$DIR/mempool/src/tests/multi_node_test.rs: `.get(0)`
$DIR/mempool/src/tests/multi_node_test.rs: `.get(1)`
$DIR/mempool/src/tests/multi_node_test.rs: `.get(0)`
$DIR/mempool/src/tests/multi_node_test.rs: `.get(1)`
$DIR/mempool/src/tests/multi_node_test.rs: `.get(0)`
$DIR/mempool/src/tests/multi_node_test.rs: `.get(1)`
$DIR/mempool/src/tests/multi_node_test.rs: `.get(0)`
$DIR/mempool/src/tests/multi_node_test.rs: `.get(1)`
$DIR/mempool/src/tests/multi_node_test.rs: `.get(&PeerRole::Validator)`
$DIR/mempool/src/tests/multi_node_test.rs: `.get(0)`
$DIR/mempool/src/tests/multi_node_test.rs: `.get(1)`
$DIR/mempool/src/tests/multi_node_test.rs: `.get(&PeerRole::ValidatorFullNode)`
$DIR/mempool/src/tests/multi_node_test.rs: `.get(0)`
$DIR/mempool/src/tests/multi_node_test.rs: `.get(1)`
$DIR/mempool/src/tests/multi_node_test.rs: `.get(&PeerRole::Unknown)`
$DIR/mempool/src/tests/multi_node_test.rs: `.get(0)`
$DIR/mempool/src/tests/multi_node_test.rs: `.get(&PeerRole::Validator)`
$DIR/mempool/src/tests/multi_node_test.rs: `.get(0)`
$DIR/mempool/src/tests/multi_node_test.rs: `.get(&PeerRole::ValidatorFullNode)`
$DIR/mempool/src/tests/multi_node_test.rs: `.get(0)`
$DIR/mempool/src/tests/multi_node_test.rs: `.map(|txn| txn.sequence_number())`
$DIR/mempool/src/tests/multi_node_test.rs: `.sequence_number()`
$DIR/mempool/src/tests/multi_node_test.rs: `.collect::<Vec<_>>()`
$DIR/mempool/src/tests/multi_node_test.rs: `.map(|txn| txn.sequence_number())`
$DIR/mempool/src/tests/multi_node_test.rs: `.sequence_number()`
$DIR/mempool/src/tests/multi_node_test.rs: `.collect::<Vec<_>>()`
$DIR/mempool/src/tests/multi_node_test.rs: `.map(|txn| txn.sequence_number())`
$DIR/mempool/src/tests/multi_node_test.rs: `.sequence_number()`
$DIR/mempool/src/tests/multi_node_test.rs: `.collect::<Vec<_>>()`
$DIR/mempool/src/tests/multi_node_test.rs: `.get(0)`
$DIR/mempool/src/tests/multi_node_test.rs: `.get(1)`
$DIR/mempool/src/tests/multi_node_test.rs: `.get(0)`
$DIR/mempool/src/tests/multi_node_test.rs: `.get(1)`
$DIR/mempool/src/tests/shared_mempool_test.rs: `block_on(async {
        assert!(consensus_sender.send(req).await.is_ok());
        assert!(callback_rcv.await.is_ok());
    });`
$DIR/mempool/src/tests/shared_mempool_test.rs: `block_on(async {
        assert!(mempool_notifier
            .notify_new_commit(committed_txns, 1, 1000)
            .await
            .is_ok());
    });`
$DIR/mempool/src/tests/shared_mempool_test.rs: `.make_signed_transaction_with_expiration_time(0)`
$DIR/mempool/src/tests/shared_mempool_test.rs: `.make_signed_transaction()`
$DIR/mempool/src/tests/shared_mempool_test.rs: `.mempool.lock()`
$DIR/mempool/src/tests/shared_mempool_test.rs: `.mempool.lock()`
$DIR/mempool/src/tests/shared_mempool_test.rs: `.read_timeline(0, 10)`
$DIR/mempool/src/tests/shared_mempool_test.rs: `.enable_all()`
$DIR/mempool/src/tests/shared_mempool_test.rs: `.build()`
$DIR/mempool/src/tests/shared_mempool_test.rs: `.enter()`
$DIR/mempool/src/tests/shared_mempool_test.rs: `.make_signed_transaction_with_expiration_time(0)`
$DIR/mempool/src/tests/shared_mempool_test.rs: `.make_signed_transaction()`
$DIR/mempool/src/tests/shared_mempool_test.rs: `.mempool.lock()`
$DIR/mempool/src/tests/shared_mempool_test.rs: `.mempool.lock()`
$DIR/mempool/src/tests/shared_mempool_test.rs: `.read_timeline(0, 10)`
$DIR/network/builder/src/test.rs: `::diem_logger::Logger::init_for_testing();`
$DIR/network/builder/src/test.rs: `dialer_sender
            .send_to(listener_peer_id, msg_clone.clone())
            .unwrap();`
$DIR/network/builder/src/test.rs: `listener_sender
            .send_to(dialer_peer_id, msg.clone())
            .unwrap();`
$DIR/network/builder/src/test.rs: `::diem_logger::Logger::init_for_testing();`
$DIR/network/builder/src/test.rs: `rs.send(Ok(bcs::to_bytes(&msg).unwrap().into())).unwrap();`
$DIR/network/builder/src/test.rs: `rs.send(Ok(bcs::to_bytes(&msg).unwrap().into())).unwrap();`
$DIR/network/builder/src/test.rs: `.send_to(listener_peer_id, msg_clone.clone())`
$DIR/network/builder/src/test.rs: `.next()`
$DIR/network/builder/src/test.rs: `.send_to(dialer_peer_id, msg.clone())`
$DIR/network/builder/src/test.rs: `.next()`
$DIR/network/builder/src/test.rs: `.send_rpc(listener_peer_id, msg_clone.clone(), Duration::from_secs(10))`
$DIR/network/builder/src/test.rs: `.next()`
$DIR/network/builder/src/test.rs: `.send(Ok(bcs::to_bytes(&msg).unwrap().into()))`
$DIR/network/builder/src/test.rs: `.into()`
$DIR/network/builder/src/test.rs: `.runtime.block_on(join(f_send, f_respond))`
$DIR/network/builder/src/test.rs: `.send_rpc(dialer_peer_id, msg_clone.clone(), Duration::from_secs(10))`
$DIR/network/builder/src/test.rs: `.next()`
$DIR/network/builder/src/test.rs: `.send(Ok(bcs::to_bytes(&msg).unwrap().into()))`
$DIR/network/builder/src/test.rs: `.into()`
$DIR/network/builder/src/test.rs: `.runtime.block_on(join(f_send, f_respond))`
$DIR/network/discovery/src/file.rs: `tokio::task::spawn(listener_task);`
$DIR/network/discovery/src/file.rs: `std::fs::write(path, file_contents).unwrap();`
$DIR/network/discovery/src/file.rs: `path.create_as_file().unwrap();`
$DIR/network/discovery/src/file.rs: `keys.insert(key);`
$DIR/network/discovery/src/file.rs: `peers.insert(
            PeerId::random(),
            Peer::new(addrs, keys, PeerRole::Downstream),
        );`
$DIR/network/discovery/src/file.rs: `std::fs::write(path.as_ref(), file_contents).unwrap();`
$DIR/network/discovery/src/file.rs: `while conn_mgr_reqs_rx.next().await.is_none() {}`
$DIR/network/discovery/src/file.rs: `path.create_as_file().unwrap();`
$DIR/network/discovery/src/file.rs: `sleep(Duration::from_secs(1)).await;`
$DIR/network/discovery/src/file.rs: `tokio::task::spawn(writer_task);`
$DIR/network/discovery/src/file.rs: `.create_as_file()`
$DIR/network/discovery/src/file.rs: `.next()`
$DIR/network/discovery/src/file.rs: `.find_noise_proto()`
$DIR/network/discovery/src/file.rs: `.insert(key)`
$DIR/network/discovery/src/file.rs: `.insert(
            PeerId::random(),
            Peer::new(addrs, keys, PeerRole::Downstream),
        )`
$DIR/network/discovery/src/file.rs: `.next()`
$DIR/network/discovery/src/file.rs: `.is_none()`
$DIR/network/discovery/src/file.rs: `.next()`
$DIR/network/discovery/src/file.rs: `.create_as_file()`
$DIR/network/discovery/src/file.rs: `.next()`
$DIR/network/discovery/src/validator_set.rs: `diem_logger::DiemLogger::init_for_testing();`
$DIR/network/discovery/src/validator_set.rs: `block_on(runtime.spawn(listener_future)).unwrap();`
$DIR/network/discovery/src/validator_set.rs: `configs.insert(
            ValidatorSet::CONFIG_ID,
            bcs::to_bytes(&validator_set).unwrap(),
        );`
$DIR/network/discovery/src/validator_set.rs: `reconfig_tx.publish(payload).unwrap();`
$DIR/network/discovery/src/validator_set.rs: `.public_key()`
$DIR/network/discovery/src/validator_set.rs: `.run()`
$DIR/network/discovery/src/validator_set.rs: `.spawn(listener_future)`
$DIR/network/discovery/src/validator_set.rs: `.append_prod_protos(pubkey, HANDSHAKE_VERSION)`
$DIR/network/discovery/src/validator_set.rs: `.encrypt(&addresses, peer_id, 0)`
$DIR/network/discovery/src/validator_set.rs: `.insert(
            ValidatorSet::CONFIG_ID,
            bcs::to_bytes(&validator_set).unwrap(),
        )`
$DIR/network/discovery/src/validator_set.rs: `.publish(payload)`
$DIR/network/memsocket/tests/memory_listener.rs: `block_on(dialer.write_all(b"foo"))?;`
$DIR/network/memsocket/tests/memory_listener.rs: `block_on(dialer.flush())?;`
$DIR/network/memsocket/tests/memory_listener.rs: `block_on(listener_socket.read_exact(&mut buf))?;`
$DIR/network/memsocket/tests/memory_listener.rs: `block_on(dialer.write_all(b"foo"))?;`
$DIR/network/memsocket/tests/memory_listener.rs: `block_on(dialer.flush())?;`
$DIR/network/memsocket/tests/memory_listener.rs: `block_on(listener_socket.read_exact(&mut buf))?;`
$DIR/network/memsocket/tests/memory_listener.rs: `block_on(listener_socket.write_all(b"bar"))?;`
$DIR/network/memsocket/tests/memory_listener.rs: `block_on(listener_socket.flush())?;`
$DIR/network/memsocket/tests/memory_listener.rs: `block_on(dialer.read_exact(&mut buf))?;`
$DIR/network/memsocket/tests/memory_listener.rs: `connect_on_port(9)?;`
$DIR/network/memsocket/tests/memory_listener.rs: `connect_on_port(9)?;`
$DIR/network/memsocket/tests/memory_listener.rs: `.incoming()`
$DIR/network/memsocket/tests/memory_listener.rs: `.next()`
$DIR/network/memsocket/tests/memory_listener.rs: `.write_all(b"foo")`
$DIR/network/memsocket/tests/memory_listener.rs: `.flush()`
$DIR/network/memsocket/tests/memory_listener.rs: `.read_exact(&mut buf)`
$DIR/network/memsocket/tests/memory_listener.rs: `.local_addr()`
$DIR/network/memsocket/tests/memory_listener.rs: `.incoming()`
$DIR/network/memsocket/tests/memory_listener.rs: `.next()`
$DIR/network/memsocket/tests/memory_listener.rs: `.write_all(b"foo")`
$DIR/network/memsocket/tests/memory_listener.rs: `.flush()`
$DIR/network/memsocket/tests/memory_listener.rs: `.read_exact(&mut buf)`
$DIR/network/memsocket/tests/memory_listener.rs: `.write_all(b"bar")`
$DIR/network/memsocket/tests/memory_listener.rs: `.flush()`
$DIR/network/memsocket/tests/memory_listener.rs: `.read_exact(&mut buf)`
$DIR/network/memsocket/tests/memory_socket.rs: `block_on(a.write_all(b"hello world"))?;`
$DIR/network/memsocket/tests/memory_socket.rs: `block_on(a.flush())?;`
$DIR/network/memsocket/tests/memory_socket.rs: `drop(a);`
$DIR/network/memsocket/tests/memory_socket.rs: `block_on(b.read_to_end(&mut v))?;`
$DIR/network/memsocket/tests/memory_socket.rs: `block_on(a.write_all(b"foobar"))?;`
$DIR/network/memsocket/tests/memory_socket.rs: `block_on(a.flush())?;`
$DIR/network/memsocket/tests/memory_socket.rs: `block_on(b.read_exact(&mut buf))?;`
$DIR/network/memsocket/tests/memory_socket.rs: `block_on(b.read_exact(&mut buf))?;`
$DIR/network/memsocket/tests/memory_socket.rs: `block_on(a.write_all(b"foobar"))?;`
$DIR/network/memsocket/tests/memory_socket.rs: `block_on(a.flush())?;`
$DIR/network/memsocket/tests/memory_socket.rs: `block_on(b.write_all(b"stormlight"))?;`
$DIR/network/memsocket/tests/memory_socket.rs: `block_on(b.flush())?;`
$DIR/network/memsocket/tests/memory_socket.rs: `block_on(a.read_exact(&mut buf_a))?;`
$DIR/network/memsocket/tests/memory_socket.rs: `block_on(b.read_exact(&mut buf_b))?;`
$DIR/network/memsocket/tests/memory_socket.rs: `block_on(a.read_exact(&mut buf_a))?;`
$DIR/network/memsocket/tests/memory_socket.rs: `block_on(b.read_exact(&mut buf_b))?;`
$DIR/network/memsocket/tests/memory_socket.rs: `block_on(a.write_all(b"words"))?;`
$DIR/network/memsocket/tests/memory_socket.rs: `block_on(a.write_all(b" "))?;`
$DIR/network/memsocket/tests/memory_socket.rs: `block_on(a.write_all(b"of"))?;`
$DIR/network/memsocket/tests/memory_socket.rs: `block_on(a.write_all(b" "))?;`
$DIR/network/memsocket/tests/memory_socket.rs: `block_on(a.write_all(b"radiance"))?;`
$DIR/network/memsocket/tests/memory_socket.rs: `block_on(a.flush())?;`
$DIR/network/memsocket/tests/memory_socket.rs: `drop(a);`
$DIR/network/memsocket/tests/memory_socket.rs: `block_on(b.read_exact(&mut buf))?;`
$DIR/network/memsocket/tests/memory_socket.rs: `block_on(a.write_all(b"way of kings"))?;`
$DIR/network/memsocket/tests/memory_socket.rs: `block_on(a.flush())?;`
$DIR/network/memsocket/tests/memory_socket.rs: `block_on(b.read_exact(&mut buf[..0]))?;`
$DIR/network/memsocket/tests/memory_socket.rs: `block_on(b.read_exact(&mut buf))?;`
$DIR/network/memsocket/tests/memory_socket.rs: `block_on(a.write_all(b"way of kings"))?;`
$DIR/network/memsocket/tests/memory_socket.rs: `block_on(a.flush())?;`
$DIR/network/memsocket/tests/memory_socket.rs: `.write_all(b"hello world")`
$DIR/network/memsocket/tests/memory_socket.rs: `.flush()`
$DIR/network/memsocket/tests/memory_socket.rs: `.read_to_end(&mut v)`
$DIR/network/memsocket/tests/memory_socket.rs: `.write_all(b"foobar")`
$DIR/network/memsocket/tests/memory_socket.rs: `.flush()`
$DIR/network/memsocket/tests/memory_socket.rs: `.read_exact(&mut buf)`
$DIR/network/memsocket/tests/memory_socket.rs: `.read_exact(&mut buf)`
$DIR/network/memsocket/tests/memory_socket.rs: `.write_all(b"foobar")`
$DIR/network/memsocket/tests/memory_socket.rs: `.flush()`
$DIR/network/memsocket/tests/memory_socket.rs: `.write_all(b"stormlight")`
$DIR/network/memsocket/tests/memory_socket.rs: `.flush()`
$DIR/network/memsocket/tests/memory_socket.rs: `.read_exact(&mut buf_a)`
$DIR/network/memsocket/tests/memory_socket.rs: `.read_exact(&mut buf_b)`
$DIR/network/memsocket/tests/memory_socket.rs: `.read_exact(&mut buf_a)`
$DIR/network/memsocket/tests/memory_socket.rs: `.read_exact(&mut buf_b)`
$DIR/network/memsocket/tests/memory_socket.rs: `.write_all(b"words")`
$DIR/network/memsocket/tests/memory_socket.rs: `.write_all(b" ")`
$DIR/network/memsocket/tests/memory_socket.rs: `.write_all(b"of")`
$DIR/network/memsocket/tests/memory_socket.rs: `.write_all(b" ")`
$DIR/network/memsocket/tests/memory_socket.rs: `.write_all(b"radiance")`
$DIR/network/memsocket/tests/memory_socket.rs: `.flush()`
$DIR/network/memsocket/tests/memory_socket.rs: `.read_exact(&mut buf)`
$DIR/network/memsocket/tests/memory_socket.rs: `.write_all(b"way of kings")`
$DIR/network/memsocket/tests/memory_socket.rs: `.flush()`
$DIR/network/memsocket/tests/memory_socket.rs: `.read_exact(&mut buf[..0])`
$DIR/network/memsocket/tests/memory_socket.rs: `.read_exact(&mut buf)`
$DIR/network/memsocket/tests/memory_socket.rs: `.write_all(b"way of kings")`
$DIR/network/memsocket/tests/memory_socket.rs: `.flush()`
$DIR/network/memsocket/tests/memory_socket.rs: `.read(&mut buf)`
$DIR/network/netcore/src/framing.rs: `buf.resize(len as usize, 0);`
$DIR/network/netcore/src/framing.rs: `stream.read_exact(buf.as_mut()).await?;`
$DIR/network/netcore/src/framing.rs: `stream.read_exact(&mut len_buf).await?;`
$DIR/network/netcore/src/framing.rs: `write_u16frame_len(&mut stream, len).await?;`
$DIR/network/netcore/src/framing.rs: `stream.write_all(buf).await?;`
$DIR/network/netcore/src/framing.rs: `stream.write_all(&len).await?;`
$DIR/network/netcore/src/framing.rs: `block_on(write_u16frame_len(&mut a, 17))?;`
$DIR/network/netcore/src/framing.rs: `block_on(a.flush())?;`
$DIR/network/netcore/src/framing.rs: `block_on(a.write_all(&[42]))?;`
$DIR/network/netcore/src/framing.rs: `block_on(a.flush())?;`
$DIR/network/netcore/src/framing.rs: `drop(a);`
$DIR/network/netcore/src/framing.rs: `drop(b);`
$DIR/network/netcore/src/framing.rs: `block_on(write_u16frame(&mut a, b"The Name of the Wind"))?;`
$DIR/network/netcore/src/framing.rs: `block_on(a.flush())?;`
$DIR/network/netcore/src/framing.rs: `block_on(read_u16frame(&mut b, &mut buf))?;`
$DIR/network/netcore/src/framing.rs: `block_on(write_u16frame(&mut a, b"The Name of the Wind"))?;`
$DIR/network/netcore/src/framing.rs: `block_on(write_u16frame(&mut b, b"The Wise Man's Fear"))?;`
$DIR/network/netcore/src/framing.rs: `block_on(b.flush())?;`
$DIR/network/netcore/src/framing.rs: `block_on(write_u16frame(&mut a, b"The Doors of Stone"))?;`
$DIR/network/netcore/src/framing.rs: `block_on(a.flush())?;`
$DIR/network/netcore/src/framing.rs: `block_on(read_u16frame(&mut b, &mut buf))?;`
$DIR/network/netcore/src/framing.rs: `block_on(read_u16frame(&mut b, &mut buf))?;`
$DIR/network/netcore/src/framing.rs: `block_on(read_u16frame(&mut a, &mut buf))?;`
$DIR/network/netcore/src/framing.rs: `buf.resize((u16::max_value() as usize) * 2, 0);`
$DIR/network/netcore/src/framing.rs: `.resize(len as usize, 0)`
$DIR/network/netcore/src/framing.rs: `.read_exact(buf.as_mut())`
$DIR/network/netcore/src/framing.rs: `.read_exact(&mut len_buf)`
$DIR/network/netcore/src/framing.rs: `.len()`
$DIR/network/netcore/src/framing.rs: `.try_into()`
$DIR/network/netcore/src/framing.rs: `.map_err(|_e| std::io::Error::new(std::io::ErrorKind::Other, "Too big"))`
$DIR/network/netcore/src/framing.rs: `.write_all(buf)`
$DIR/network/netcore/src/framing.rs: `.write_all(&len)`
$DIR/network/netcore/src/framing.rs: `.flush()`
$DIR/network/netcore/src/framing.rs: `.write_all(&[42])`
$DIR/network/netcore/src/framing.rs: `.flush()`
$DIR/network/netcore/src/framing.rs: `.write_all(&[42])`
$DIR/network/netcore/src/framing.rs: `.flush()`
$DIR/network/netcore/src/framing.rs: `.flush()`
$DIR/network/netcore/src/framing.rs: `.flush()`
$DIR/network/netcore/src/framing.rs: `.resize((u16::max_value() as usize) * 2, 0)`
$DIR/network/netcore/src/transport/memory.rs: `block_on(join(dialer, listener));`
$DIR/network/netcore/src/transport/memory.rs: `.local_addr()`
$DIR/network/netcore/src/transport/memory.rs: `.ok_or_else(|| {
            io::Error::new(
                io::ErrorKind::InvalidInput,
                format!(
                    "Unexpected dialing network address: '{}', \
                     expected format: '/memory/<port>/..'",
                    addr
                ),
            )
        })`
$DIR/network/netcore/src/transport/memory.rs: `.parse()`
$DIR/network/netcore/src/transport/memory.rs: `.into_future()`
$DIR/network/netcore/src/transport/memory.rs: `.read_to_end(&mut buf)`
$DIR/network/netcore/src/transport/memory.rs: `.write_all(b"hello world")`
$DIR/network/netcore/src/transport/memory.rs: `.flush()`
$DIR/network/netcore/src/transport/memory.rs: `.parse()`
$DIR/network/netcore/src/transport/memory.rs: `.parse()`
$DIR/network/netcore/src/transport/proxy_protocol.rs: `stream.read_exact(&mut header).await?;`
$DIR/network/netcore/src/transport/proxy_protocol.rs: `stream.read_exact(&mut address_bytes).await?;`
$DIR/network/netcore/src/transport/proxy_protocol.rs: `sender.write_all(&PPV2_SIGNATURE).await?;`
$DIR/network/netcore/src/transport/proxy_protocol.rs: `sender.write_all(&[PPV2_PROXY]).await?;`
$DIR/network/netcore/src/transport/proxy_protocol.rs: `sender.write_all(&[TCP_IPV4]).await?;`
$DIR/network/netcore/src/transport/proxy_protocol.rs: `sender.write_all(IPV4_ADDR_SIZE).await?;`
$DIR/network/netcore/src/transport/proxy_protocol.rs: `sender.write_all(IPV4_ADDR_1).await?;`
$DIR/network/netcore/src/transport/proxy_protocol.rs: `sender.write_all(IPV4_ADDR_2).await?;`
$DIR/network/netcore/src/transport/proxy_protocol.rs: `sender.write_all(PORT_80).await?;`
$DIR/network/netcore/src/transport/proxy_protocol.rs: `sender.write_all(PORT_80).await?;`
$DIR/network/netcore/src/transport/proxy_protocol.rs: `sender.write_all(&PPV2_SIGNATURE).await?;`
$DIR/network/netcore/src/transport/proxy_protocol.rs: `sender.write_all(&[PPV2_PROXY]).await?;`
$DIR/network/netcore/src/transport/proxy_protocol.rs: `sender.write_all(&[TCP_IPV6]).await?;`
$DIR/network/netcore/src/transport/proxy_protocol.rs: `sender.write_all(IPV6_ADDR_SIZE).await?;`
$DIR/network/netcore/src/transport/proxy_protocol.rs: `sender.write_all(IPV6_ADDR_1).await?;`
$DIR/network/netcore/src/transport/proxy_protocol.rs: `sender.write_all(IPV6_ADDR_2).await?;`
$DIR/network/netcore/src/transport/proxy_protocol.rs: `sender.write_all(PORT_80).await?;`
$DIR/network/netcore/src/transport/proxy_protocol.rs: `sender.write_all(PORT_80).await?;`
$DIR/network/netcore/src/transport/proxy_protocol.rs: `block_on(join(server, client));`
$DIR/network/netcore/src/transport/proxy_protocol.rs: `block_on(join(server, client));`
$DIR/network/netcore/src/transport/proxy_protocol.rs: `block_on(join(server, client));`
$DIR/network/netcore/src/transport/proxy_protocol.rs: `block_on(check_data);`
$DIR/network/netcore/src/transport/proxy_protocol.rs: `block_on(join(server, client));`
$DIR/network/netcore/src/transport/proxy_protocol.rs: `.read_exact(&mut header)`
$DIR/network/netcore/src/transport/proxy_protocol.rs: `.try_into()`
$DIR/network/netcore/src/transport/proxy_protocol.rs: `.read_exact(&mut address_bytes)`
$DIR/network/netcore/src/transport/proxy_protocol.rs: `.try_into()`
$DIR/network/netcore/src/transport/proxy_protocol.rs: `.try_into()`
$DIR/network/netcore/src/transport/proxy_protocol.rs: `.try_into()`
$DIR/network/netcore/src/transport/proxy_protocol.rs: `.try_into()`
$DIR/network/netcore/src/transport/proxy_protocol.rs: `.write_all(&PPV2_SIGNATURE)`
$DIR/network/netcore/src/transport/proxy_protocol.rs: `.write_all(&[PPV2_PROXY])`
$DIR/network/netcore/src/transport/proxy_protocol.rs: `.write_all(&[TCP_IPV4])`
$DIR/network/netcore/src/transport/proxy_protocol.rs: `.write_all(IPV4_ADDR_SIZE)`
$DIR/network/netcore/src/transport/proxy_protocol.rs: `.write_all(IPV4_ADDR_1)`
$DIR/network/netcore/src/transport/proxy_protocol.rs: `.write_all(IPV4_ADDR_2)`
$DIR/network/netcore/src/transport/proxy_protocol.rs: `.write_all(PORT_80)`
$DIR/network/netcore/src/transport/proxy_protocol.rs: `.write_all(PORT_80)`
$DIR/network/netcore/src/transport/proxy_protocol.rs: `.write_all(&PPV2_SIGNATURE)`
$DIR/network/netcore/src/transport/proxy_protocol.rs: `.write_all(&[PPV2_PROXY])`
$DIR/network/netcore/src/transport/proxy_protocol.rs: `.write_all(&[TCP_IPV6])`
$DIR/network/netcore/src/transport/proxy_protocol.rs: `.write_all(IPV6_ADDR_SIZE)`
$DIR/network/netcore/src/transport/proxy_protocol.rs: `.write_all(IPV6_ADDR_1)`
$DIR/network/netcore/src/transport/proxy_protocol.rs: `.write_all(IPV6_ADDR_2)`
$DIR/network/netcore/src/transport/proxy_protocol.rs: `.write_all(PORT_80)`
$DIR/network/netcore/src/transport/proxy_protocol.rs: `.write_all(PORT_80)`
$DIR/network/netcore/src/transport/proxy_protocol.rs: `.to_socket_addrs()`
$DIR/network/netcore/src/transport/proxy_protocol.rs: `.collect()`
$DIR/network/netcore/src/transport/proxy_protocol.rs: `.first()`
$DIR/network/netcore/src/transport/proxy_protocol.rs: `.read_exact(data)`
$DIR/network/netcore/src/transport/proxy_protocol.rs: `.to_socket_addrs()`
$DIR/network/netcore/src/transport/proxy_protocol.rs: `.collect()`
$DIR/network/netcore/src/transport/proxy_protocol.rs: `.first()`
$DIR/network/netcore/src/transport/proxy_protocol.rs: `.read_exact(data)`
$DIR/network/netcore/src/transport/proxy_protocol.rs: `.write_all(&PPV2_SIGNATURE)`
$DIR/network/netcore/src/transport/proxy_protocol.rs: `.write_all(&[PPV2_PROXY])`
$DIR/network/netcore/src/transport/proxy_protocol.rs: `.write_all(address_byte)`
$DIR/network/netcore/src/transport/proxy_protocol.rs: `.write_all(IPV4_ADDR_SIZE)`
$DIR/network/netcore/src/transport/proxy_protocol.rs: `.write_all(IPV4_ADDR_1)`
$DIR/network/netcore/src/transport/proxy_protocol.rs: `.write_all(IPV4_ADDR_2)`
$DIR/network/netcore/src/transport/proxy_protocol.rs: `.write_all(PORT_80)`
$DIR/network/netcore/src/transport/proxy_protocol.rs: `.write_all(PORT_80)`
$DIR/network/netcore/src/transport/proxy_protocol.rs: `.write_all(TEST_DATA)`
$DIR/network/netcore/src/transport/proxy_protocol.rs: `.read_exact(data)`
$DIR/network/netcore/src/transport/proxy_protocol.rs: `.write_all(array)`
$DIR/network/netcore/src/transport/tcp.rs: `listener.set_nonblocking(true)?;`
$DIR/network/netcore/src/transport/tcp.rs: `parse_ip_tcp(protos)
            .map(|_| ())
            .or_else(|| parse_dns_tcp(protos).map(|_| ()))
            .ok_or_else(|| invalid_addr_error(&addr))?;`
$DIR/network/netcore/src/transport/tcp.rs: `stream
            .write_all(&format!("CONNECT {0}:{1} HTTP/1.0\r\n\r\n", host, port).into_bytes())
            .await?;`
$DIR/network/netcore/src/transport/tcp.rs: `read += len;`
$DIR/network/netcore/src/transport/tcp.rs: `out.write_all(b"Earth").await?;`
$DIR/network/netcore/src/transport/tcp.rs: `out.read_exact(&mut buf).await?;`
$DIR/network/netcore/src/transport/tcp.rs: `out.read_exact(&mut buf).await?;`
$DIR/network/netcore/src/transport/tcp.rs: `out.write_all(b"Air").await?;`
$DIR/network/netcore/src/transport/tcp.rs: `.ok_or_else(|| invalid_addr_error(&addr))`
$DIR/network/netcore/src/transport/tcp.rs: `.is_empty()`
$DIR/network/netcore/src/transport/tcp.rs: `.set_nonblocking(true)`
$DIR/network/netcore/src/transport/tcp.rs: `.local_addr()`
$DIR/network/netcore/src/transport/tcp.rs: `.map(|_| ())`
$DIR/network/netcore/src/transport/tcp.rs: `.or_else(|| parse_dns_tcp(protos).map(|_| ()))`
$DIR/network/netcore/src/transport/tcp.rs: `.map(|_| ())`
$DIR/network/netcore/src/transport/tcp.rs: `.ok_or_else(|| invalid_addr_error(&addr))`
$DIR/network/netcore/src/transport/tcp.rs: `.first()`
$DIR/network/netcore/src/transport/tcp.rs: `.https(&ip.to_string())`
$DIR/network/netcore/src/transport/tcp.rs: `.https(&ip.to_string())`
$DIR/network/netcore/src/transport/tcp.rs: `.https(name.as_ref())`
$DIR/network/netcore/src/transport/tcp.rs: `.and_then(|https_proxy| Url::parse(https_proxy).ok())`
$DIR/network/netcore/src/transport/tcp.rs: `.ok()`
$DIR/network/netcore/src/transport/tcp.rs: `.has_host()`
$DIR/network/netcore/src/transport/tcp.rs: `.scheme()`
$DIR/network/netcore/src/transport/tcp.rs: `.filter(move |socketaddr| ip_filter.matches(socketaddr.ip()))`
$DIR/network/netcore/src/transport/tcp.rs: `.matches(socketaddr.ip())`
$DIR/network/netcore/src/transport/tcp.rs: `.ip()`
$DIR/network/netcore/src/transport/tcp.rs: `.unwrap_or_else(|| {
            io::Error::new(
                io::ErrorKind::InvalidInput,
                format!(
                    "could not resolve dns name to any address: name: {}, ip filter: {:?}",
                    dns_name.as_ref(),
                    ip_filter,
                ),
            )
        })`
$DIR/network/netcore/src/transport/tcp.rs: `.write_all(&format!("CONNECT {0}:{1} HTTP/1.0\r\n\r\n", host, port).into_bytes())`
$DIR/network/netcore/src/transport/tcp.rs: `.read(&mut buffer[read..])`
$DIR/network/netcore/src/transport/tcp.rs: `.len()`
$DIR/network/netcore/src/transport/tcp.rs: `.starts_with(b"HTTP/1.1 200")`
$DIR/network/netcore/src/transport/tcp.rs: `.starts_with(b"HTTP/1.0 200")`
$DIR/network/netcore/src/transport/tcp.rs: `.ends_with(b"\r\n\r\n")`
$DIR/network/netcore/src/transport/tcp.rs: `.and_then(|mut out, _addr, origin| async move {
            match origin {
                ConnectionOrigin::Inbound => {
                    out.write_all(b"Earth").await?;
                    let mut buf = [0; 3];
                    out.read_exact(&mut buf).await?;
                    assert_eq!(&buf, b"Air");
                }
                ConnectionOrigin::Outbound => {
                    let mut buf = [0; 5];
                    out.read_exact(&mut buf).await?;
                    assert_eq!(&buf, b"Earth");
                    out.write_all(b"Air").await?;
                }
            }
            Ok(())
        })`
$DIR/network/netcore/src/transport/tcp.rs: `.write_all(b"Earth")`
$DIR/network/netcore/src/transport/tcp.rs: `.read_exact(&mut buf)`
$DIR/network/netcore/src/transport/tcp.rs: `.read_exact(&mut buf)`
$DIR/network/netcore/src/transport/tcp.rs: `.write_all(b"Air")`
$DIR/network/netcore/src/transport/tcp.rs: `.parse()`
$DIR/network/netcore/src/transport/tcp.rs: `.into_future()`
$DIR/network/netcore/src/transport/tcp.rs: `.then(|(maybe_result, _stream)| {
            let (incoming, _addr) = maybe_result.unwrap().unwrap();
            incoming.map(Result::unwrap)
        })`
$DIR/network/netcore/src/transport/tcp.rs: `.parse()`
$DIR/network/netcore/src/transport/tcp.rs: `.parse()`
$DIR/network/netcore/src/transport/tcp.rs: `.collect::<Vec<_>>()`
$DIR/network/netcore/src/transport/tcp.rs: `.collect::<Vec<_>>()`
$DIR/network/netcore/src/transport/tcp.rs: `.collect::<Vec<_>>()`
$DIR/network/src/application/tests.rs: `peer_metadata_storage.insert_connection(connection_1);`
$DIR/network/src/application/tests.rs: `peer_metadata_storage.insert_connection(connection_2.clone());`
$DIR/network/src/application/tests.rs: `peer_metadata_storage.remove_connection(&different_connection_2);`
$DIR/network/src/application/tests.rs: `peer_metadata_storage.remove_connection(&connection_2);`
$DIR/network/src/application/tests.rs: `inner.get_mut().status = state;`
$DIR/network/src/application/tests.rs: `.insert_connection(connection_1)`
$DIR/network/src/application/tests.rs: `.insert_connection(connection_2.clone())`
$DIR/network/src/application/tests.rs: `.remove_connection(&different_connection_2)`
$DIR/network/src/application/tests.rs: `.remove_connection(&connection_2)`
$DIR/network/src/application/tests.rs: `.write(peer_id, |entry| match entry {
            Entry::Vacant(..) => Err(PeerError::NotFound),
            Entry::Occupied(inner) => {
                inner.get_mut().status = state;
                Ok(())
            }
        })`
$DIR/network/src/application/tests.rs: `.get_mut()`
$DIR/network/src/connectivity_manager/test.rs: `peer.addresses = vec![addr.clone()];`
$DIR/network/src/connectivity_manager/test.rs: `self.mock_time
            .advance_async(CONNECTIVITY_CHECK_INTERVAL)
            .await;`
$DIR/network/src/connectivity_manager/test.rs: `self.mock_time.advance_async(MAX_DELAY_WITH_JITTER).await;`
$DIR/network/src/connectivity_manager/test.rs: `metadata.addr = address;`
$DIR/network/src/connectivity_manager/test.rs: `metadata.addr = address;`
$DIR/network/src/connectivity_manager/test.rs: `self.connection_notifs_tx
            .push_with_feedback(peer_id, notif, Some(delivered_tx))
            .unwrap();`
$DIR/network/src/connectivity_manager/test.rs: `result_tx.send(result).unwrap();`
$DIR/network/src/connectivity_manager/test.rs: `while self.get_dial_queue_size().await > 0 {}`
$DIR/network/src/connectivity_manager/test.rs: `result_tx.send(result).unwrap();`
$DIR/network/src/connectivity_manager/test.rs: `peer.keys = HashSet::new();`
$DIR/network/src/connectivity_manager/test.rs: `peer.addresses = vec![network_address(DEFAULT_BASE_ADDR)];`
$DIR/network/src/connectivity_manager/test.rs: `peer.keys = HashSet::new();`
$DIR/network/src/connectivity_manager/test.rs: `peer.addresses = vec![network_address(DEFAULT_BASE_ADDR)];`
$DIR/network/src/connectivity_manager/test.rs: `peer.keys = HashSet::new();`
$DIR/network/src/connectivity_manager/test.rs: `peer.addresses = vec![network_address(DEFAULT_BASE_ADDR)];`
$DIR/network/src/connectivity_manager/test.rs: `peer.addresses = vec![other_addr_1.clone(), other_addr_2.clone()];`
$DIR/network/src/connectivity_manager/test.rs: `peer.addresses = vec![other_addr_1.clone(), other_addr_2.clone()];`
$DIR/network/src/connectivity_manager/test.rs: `peer.addresses = vec![other_addr_1.clone(), other_addr_2, other_addr_3];`
$DIR/network/src/connectivity_manager/test.rs: `peer.addresses = vec![other_addr_4.clone(), other_addr_5];`
$DIR/network/src/connectivity_manager/test.rs: `seeds.insert(peer_id, peer);`
$DIR/network/src/connectivity_manager/test.rs: `conn_mgr.handle_update_discovered_peers(DiscoverySource::OnChainValidatorSet, peers_1.clone());`
$DIR/network/src/connectivity_manager/test.rs: `conn_mgr.handle_update_discovered_peers(DiscoverySource::OnChainValidatorSet, peers_1.clone());`
$DIR/network/src/connectivity_manager/test.rs: `conn_mgr
        .handle_update_discovered_peers(DiscoverySource::OnChainValidatorSet, peers_empty.clone());`
$DIR/network/src/connectivity_manager/test.rs: `conn_mgr.handle_update_discovered_peers(DiscoverySource::OnChainValidatorSet, peers_1.clone());`
$DIR/network/src/connectivity_manager/test.rs: `conn_mgr.handle_update_discovered_peers(DiscoverySource::Config, peers_2);`
$DIR/network/src/connectivity_manager/test.rs: `conn_mgr
        .handle_update_discovered_peers(DiscoverySource::OnChainValidatorSet, peers_1_2.clone());`
$DIR/network/src/connectivity_manager/test.rs: `conn_mgr.handle_update_discovered_peers(DiscoverySource::Config, peers_1_2.clone());`
$DIR/network/src/connectivity_manager/test.rs: `conn_mgr.handle_update_discovered_peers(DiscoverySource::Config, peers_empty.clone());`
$DIR/network/src/connectivity_manager/test.rs: `conn_mgr
        .handle_update_discovered_peers(DiscoverySource::OnChainValidatorSet, peers_empty.clone());`
$DIR/network/src/connectivity_manager/test.rs: `conn_mgr.handle_update_discovered_peers(DiscoverySource::Config, peers_empty.clone());`
$DIR/network/src/connectivity_manager/test.rs: `.to_be_bytes()`
$DIR/network/src/connectivity_manager/test.rs: `.public_key()`
$DIR/network/src/connectivity_manager/test.rs: `.collect()`
$DIR/network/src/connectivity_manager/test.rs: `.first()`
$DIR/network/src/connectivity_manager/test.rs: `.mock_time
            .advance_async(CONNECTIVITY_CHECK_INTERVAL)`
$DIR/network/src/connectivity_manager/test.rs: `.mock_time.advance_async(MAX_DELAY_WITH_JITTER)`
$DIR/network/src/connectivity_manager/test.rs: `.conn_mgr_reqs_tx
            .send(ConnectivityRequest::GetDialQueueSize(queue_size_tx))`
$DIR/network/src/connectivity_manager/test.rs: `.connection_notifs_tx
            .push_with_feedback(peer_id, notif, Some(delivered_tx))`
$DIR/network/src/connectivity_manager/test.rs: `.is_ok()`
$DIR/network/src/connectivity_manager/test.rs: `.connection_reqs_rx.next()`
$DIR/network/src/connectivity_manager/test.rs: `.send(result)`
$DIR/network/src/connectivity_manager/test.rs: `.is_ok()`
$DIR/network/src/connectivity_manager/test.rs: `.connection_reqs_rx.next()`
$DIR/network/src/connectivity_manager/test.rs: `.send(result)`
$DIR/network/src/connectivity_manager/test.rs: `.conn_mgr_reqs_tx
            .send(ConnectivityRequest::UpdateDiscoveredPeers(src, peers))`
$DIR/network/src/connectivity_manager/test.rs: `.start()`
$DIR/network/src/connectivity_manager/test.rs: `.start()`
$DIR/network/src/connectivity_manager/test.rs: `.start()`
$DIR/network/src/connectivity_manager/test.rs: `.start()`
$DIR/network/src/connectivity_manager/test.rs: `.start()`
$DIR/network/src/connectivity_manager/test.rs: `.start()`
$DIR/network/src/connectivity_manager/test.rs: `.start()`
$DIR/network/src/connectivity_manager/test.rs: `.start()`
$DIR/network/src/connectivity_manager/test.rs: `.start()`
$DIR/network/src/connectivity_manager/test.rs: `.start()`
$DIR/network/src/connectivity_manager/test.rs: `.insert(peer_id, peer)`
$DIR/network/src/connectivity_manager/test.rs: `.start()`
$DIR/network/src/connectivity_manager/test.rs: `.public_key()`
$DIR/network/src/connectivity_manager/test.rs: `.public_key()`
$DIR/network/src/connectivity_manager/test.rs: `.handle_update_discovered_peers(DiscoverySource::OnChainValidatorSet, peers_1.clone())`
$DIR/network/src/connectivity_manager/test.rs: `.handle_update_discovered_peers(DiscoverySource::OnChainValidatorSet, peers_1.clone())`
$DIR/network/src/connectivity_manager/test.rs: `.handle_update_discovered_peers(DiscoverySource::OnChainValidatorSet, peers_empty.clone())`
$DIR/network/src/connectivity_manager/test.rs: `.handle_update_discovered_peers(DiscoverySource::OnChainValidatorSet, peers_1.clone())`
$DIR/network/src/connectivity_manager/test.rs: `.handle_update_discovered_peers(DiscoverySource::Config, peers_2)`
$DIR/network/src/connectivity_manager/test.rs: `.handle_update_discovered_peers(DiscoverySource::OnChainValidatorSet, peers_1_2.clone())`
$DIR/network/src/connectivity_manager/test.rs: `.handle_update_discovered_peers(DiscoverySource::Config, peers_1_2.clone())`
$DIR/network/src/connectivity_manager/test.rs: `.handle_update_discovered_peers(DiscoverySource::Config, peers_empty.clone())`
$DIR/network/src/connectivity_manager/test.rs: `.handle_update_discovered_peers(DiscoverySource::OnChainValidatorSet, peers_empty.clone())`
$DIR/network/src/connectivity_manager/test.rs: `.handle_update_discovered_peers(DiscoverySource::Config, peers_empty.clone())`
$DIR/network/src/noise/fuzzing.rs: `initiator_socket.save_writing(&mut init_msg);`
$DIR/network/src/noise/fuzzing.rs: `responder_socket.save_writing(&mut resp_msg);`
$DIR/network/src/noise/fuzzing.rs: `fake_socket.set_trailing();`
$DIR/network/src/noise/fuzzing.rs: `fake_socket.set_trailing();`
$DIR/network/src/noise/fuzzing.rs: `fake_socket.set_trailing();`
$DIR/network/src/noise/fuzzing.rs: `block_on(async move {
        let mut buffer = [0u8; 1024];
        let _ = peer.read(&mut buffer).await;
    });`
$DIR/network/src/noise/fuzzing.rs: `.save_writing(&mut init_msg)`
$DIR/network/src/noise/fuzzing.rs: `.save_writing(&mut resp_msg)`
$DIR/network/src/noise/fuzzing.rs: `.upgrade_outbound(initiator_socket, responder_public_key, fake_timestamp)`
$DIR/network/src/noise/fuzzing.rs: `.upgrade_inbound(responder_socket)`
$DIR/network/src/noise/fuzzing.rs: `.set_trailing()`
$DIR/network/src/noise/fuzzing.rs: `.upgrade_outbound(fake_socket, responder_public_key, fake_timestamp)`
$DIR/network/src/noise/fuzzing.rs: `.set_trailing()`
$DIR/network/src/noise/fuzzing.rs: `.upgrade_inbound(fake_socket)`
$DIR/network/src/noise/fuzzing.rs: `.is_empty()`
$DIR/network/src/noise/fuzzing.rs: `.set_trailing()`
$DIR/network/src/noise/fuzzing.rs: `.read(&mut buffer)`
$DIR/network/src/noise/handshake.rs: `client_message[..PeerId::LENGTH].copy_from_slice(self.network_context.peer_id().as_ref());`
$DIR/network/src/noise/handshake.rs: `client_message[PeerId::LENGTH..Self::PROLOGUE_SIZE]
            .copy_from_slice(remote_public_key.as_slice());`
$DIR/network/src/noise/handshake.rs: `socket
            .write_all(&client_message)
            .await
            .map_err(NoiseHandshakeError::ClientWriteFailed)?;`
$DIR/network/src/noise/handshake.rs: `socket
            .flush()
            .await
            .map_err(NoiseHandshakeError::ClientFlushFailed)?;`
$DIR/network/src/noise/handshake.rs: `socket
            .read_exact(&mut server_response)
            .await
            .map_err(NoiseHandshakeError::ClientReadFailed)?;`
$DIR/network/src/noise/handshake.rs: `socket
            .read_exact(&mut client_message)
            .await
            .map_err(NoiseHandshakeError::ServerReadFailed)?;`
$DIR/network/src/noise/handshake.rs: `client_timestamp.copy_from_slice(&payload);`
$DIR/network/src/noise/handshake.rs: `anti_replay_timestamps.store_timestamp(remote_public_key, client_timestamp);`
$DIR/network/src/noise/handshake.rs: `socket
            .write_all(&server_response)
            .await
            .map_err(|err| NoiseHandshakeError::ServerWriteFailed(remote_peer_short, err))?;`
$DIR/network/src/noise/handshake.rs: `client.noise_config = noise::NoiseConfig::new(client_private_key);`
$DIR/network/src/noise/handshake.rs: `::diem_logger::Logger::init_for_testing();`
$DIR/network/src/noise/handshake.rs: `client.network_context = NetworkContext::mock_with_peer_id(PeerId::random());`
$DIR/network/src/noise/handshake.rs: `dialer_socket.set_fragmented_read();`
$DIR/network/src/noise/handshake.rs: `listener_socket.set_fragmented_read();`
$DIR/network/src/noise/handshake.rs: `.copy_from_slice(self.network_context.peer_id().as_ref())`
$DIR/network/src/noise/handshake.rs: `.network_context.peer_id()`
$DIR/network/src/noise/handshake.rs: `.copy_from_slice(remote_public_key.as_slice())`
$DIR/network/src/noise/handshake.rs: `.split_at_mut(Self::PROLOGUE_SIZE)`
$DIR/network/src/noise/handshake.rs: `.noise_config
            .initiate_connection(
                &mut rng,
                prologue_msg,
                remote_public_key,
                Some(&payload),
                client_noise_msg,
            )`
$DIR/network/src/noise/handshake.rs: `.map_err(NoiseHandshakeError::BuildClientHandshakeMessageFailed)`
$DIR/network/src/noise/handshake.rs: `.write_all(&client_message)`
$DIR/network/src/noise/handshake.rs: `.map_err(NoiseHandshakeError::ClientWriteFailed)`
$DIR/network/src/noise/handshake.rs: `.flush()`
$DIR/network/src/noise/handshake.rs: `.map_err(NoiseHandshakeError::ClientFlushFailed)`
$DIR/network/src/noise/handshake.rs: `.read_exact(&mut server_response)`
$DIR/network/src/noise/handshake.rs: `.map_err(NoiseHandshakeError::ClientReadFailed)`
$DIR/network/src/noise/handshake.rs: `.noise_config
            .finalize_connection(initiator_state, &server_response)`
$DIR/network/src/noise/handshake.rs: `.map_err(NoiseHandshakeError::ClientFinalizeFailed)`
$DIR/network/src/noise/handshake.rs: `.read_exact(&mut client_message)`
$DIR/network/src/noise/handshake.rs: `.map_err(NoiseHandshakeError::ServerReadFailed)`
$DIR/network/src/noise/handshake.rs: `.split_at(PeerId::LENGTH)`
$DIR/network/src/noise/handshake.rs: `.map_err(|_| NoiseHandshakeError::InvalidClientPeerId(hex::encode(remote_peer_id)))`
$DIR/network/src/noise/handshake.rs: `.short_str()`
$DIR/network/src/noise/handshake.rs: `.network_context.peer_id()`
$DIR/network/src/noise/handshake.rs: `.noise_config.public_key()`
$DIR/network/src/noise/handshake.rs: `.split_at(Self::PROLOGUE_SIZE)`
$DIR/network/src/noise/handshake.rs: `.noise_config
            .parse_client_init_message(prologue, client_init_message)`
$DIR/network/src/noise/handshake.rs: `.map_err(|err| NoiseHandshakeError::ServerParseClient(remote_peer_short, err))`
$DIR/network/src/noise/handshake.rs: `.read()`
$DIR/network/src/noise/handshake.rs: `.get(&remote_peer_id)`
$DIR/network/src/noise/handshake.rs: `.read()`
$DIR/network/src/noise/handshake.rs: `.get(&remote_peer_id)`
$DIR/network/src/noise/handshake.rs: `.auth_mode.anti_replay_timestamps()`
$DIR/network/src/noise/handshake.rs: `.len()`
$DIR/network/src/noise/handshake.rs: `.copy_from_slice(&payload)`
$DIR/network/src/noise/handshake.rs: `.write()`
$DIR/network/src/noise/handshake.rs: `.is_replay(remote_public_key, client_timestamp)`
$DIR/network/src/noise/handshake.rs: `.store_timestamp(remote_public_key, client_timestamp)`
$DIR/network/src/noise/handshake.rs: `.noise_config
            .respond_to_client(&mut rng, handshake_state, None, &mut server_response)`
$DIR/network/src/noise/handshake.rs: `.map_err(|err| {
                NoiseHandshakeError::BuildServerHandshakeMessageFailed(remote_peer_short, err)
            })`
$DIR/network/src/noise/handshake.rs: `.write_all(&server_response)`
$DIR/network/src/noise/handshake.rs: `.map_err(|err| NoiseHandshakeError::ServerWriteFailed(remote_peer_short, err))`
$DIR/network/src/noise/handshake.rs: `.public_key()`
$DIR/network/src/noise/handshake.rs: `.public_key()`
$DIR/network/src/noise/handshake.rs: `.collect()`
$DIR/network/src/noise/handshake.rs: `.collect()`
$DIR/network/src/noise/handshake.rs: `.into_iter()`
$DIR/network/src/noise/handshake.rs: `.collect()`
$DIR/network/src/noise/handshake.rs: `.to_le_bytes()`
$DIR/network/src/noise/handshake.rs: `.set_fragmented_read()`
$DIR/network/src/noise/handshake.rs: `.set_fragmented_read()`
$DIR/network/src/noise/stream.rs: `block_on(client.write_all(b"stormlight"))?;`
$DIR/network/src/noise/stream.rs: `block_on(client.write_all(b" "))?;`
$DIR/network/src/noise/stream.rs: `block_on(client.write_all(b"archive"))?;`
$DIR/network/src/noise/stream.rs: `block_on(client.flush())?;`
$DIR/network/src/noise/stream.rs: `block_on(client.close())?;`
$DIR/network/src/noise/stream.rs: `block_on(server.read_to_end(&mut buf))?;`
$DIR/network/src/noise/stream.rs: `fake_socket.set_trailing();`
$DIR/network/src/noise/stream.rs: `block_on(client.write_all(b"The Name of the Wind")).unwrap();`
$DIR/network/src/noise/stream.rs: `block_on(client.flush()).unwrap();`
$DIR/network/src/noise/stream.rs: `block_on(client.write_all(b"The Wise Man's Fear")).unwrap();`
$DIR/network/src/noise/stream.rs: `block_on(client.flush()).unwrap();`
$DIR/network/src/noise/stream.rs: `block_on(server.write_all(b"The Doors of Stone")).unwrap();`
$DIR/network/src/noise/stream.rs: `block_on(server.flush()).unwrap();`
$DIR/network/src/noise/stream.rs: `block_on(server.read_exact(&mut buf)).unwrap();`
$DIR/network/src/noise/stream.rs: `block_on(server.read_exact(&mut buf)).unwrap();`
$DIR/network/src/noise/stream.rs: `block_on(client.read_exact(&mut buf)).unwrap();`
$DIR/network/src/noise/stream.rs: `block_on(client.write_all(&buf_send)).unwrap();`
$DIR/network/src/noise/stream.rs: `block_on(client.flush()).unwrap();`
$DIR/network/src/noise/stream.rs: `block_on(server.read_exact(&mut buf_receive)).unwrap();`
$DIR/network/src/noise/stream.rs: `dialer_socket.set_fragmented_read();`
$DIR/network/src/noise/stream.rs: `listener_socket.set_fragmented_read();`
$DIR/network/src/noise/stream.rs: `block_on(client.write_all(b"The Name of the Wind")).unwrap();`
$DIR/network/src/noise/stream.rs: `block_on(client.flush()).unwrap();`
$DIR/network/src/noise/stream.rs: `block_on(client.write_all(b"The Wise Man's Fear")).unwrap();`
$DIR/network/src/noise/stream.rs: `block_on(client.flush()).unwrap();`
$DIR/network/src/noise/stream.rs: `block_on(server.write_all(b"The Doors of Stone")).unwrap();`
$DIR/network/src/noise/stream.rs: `block_on(server.flush()).unwrap();`
$DIR/network/src/noise/stream.rs: `block_on(server.read_exact(&mut buf)).unwrap();`
$DIR/network/src/noise/stream.rs: `block_on(server.read_exact(&mut buf)).unwrap();`
$DIR/network/src/noise/stream.rs: `block_on(client.read_exact(&mut buf)).unwrap();`
$DIR/network/src/noise/stream.rs: `.public_key()`
$DIR/network/src/noise/stream.rs: `.public_key()`
$DIR/network/src/noise/stream.rs: `.upgrade_outbound(dialer_socket, server_public_key, AntiReplayTimestamps::now)`
$DIR/network/src/noise/stream.rs: `.upgrade_inbound(listener_socket)`
$DIR/network/src/noise/stream.rs: `.write_all(b"stormlight")`
$DIR/network/src/noise/stream.rs: `.write_all(b" ")`
$DIR/network/src/noise/stream.rs: `.write_all(b"archive")`
$DIR/network/src/noise/stream.rs: `.flush()`
$DIR/network/src/noise/stream.rs: `.close()`
$DIR/network/src/noise/stream.rs: `.read_to_end(&mut buf)`
$DIR/network/src/noise/stream.rs: `.set_trailing()`
$DIR/network/src/noise/stream.rs: `.read(&mut buffer)`
$DIR/network/src/noise/stream.rs: `.write_all(b"The Name of the Wind")`
$DIR/network/src/noise/stream.rs: `.flush()`
$DIR/network/src/noise/stream.rs: `.write_all(b"The Wise Man's Fear")`
$DIR/network/src/noise/stream.rs: `.flush()`
$DIR/network/src/noise/stream.rs: `.write_all(b"The Doors of Stone")`
$DIR/network/src/noise/stream.rs: `.flush()`
$DIR/network/src/noise/stream.rs: `.read_exact(&mut buf)`
$DIR/network/src/noise/stream.rs: `.read_exact(&mut buf)`
$DIR/network/src/noise/stream.rs: `.read_exact(&mut buf)`
$DIR/network/src/noise/stream.rs: `.write_all(&buf_send)`
$DIR/network/src/noise/stream.rs: `.flush()`
$DIR/network/src/noise/stream.rs: `.read_exact(&mut buf_receive)`
$DIR/network/src/noise/stream.rs: `.set_fragmented_read()`
$DIR/network/src/noise/stream.rs: `.set_fragmented_read()`
$DIR/network/src/noise/stream.rs: `.upgrade_outbound(dialer_socket, server_public_key, AntiReplayTimestamps::now)`
$DIR/network/src/noise/stream.rs: `.upgrade_inbound(listener_socket)`
$DIR/network/src/noise/stream.rs: `.write_all(b"The Name of the Wind")`
$DIR/network/src/noise/stream.rs: `.flush()`
$DIR/network/src/noise/stream.rs: `.write_all(b"The Wise Man's Fear")`
$DIR/network/src/noise/stream.rs: `.flush()`
$DIR/network/src/noise/stream.rs: `.write_all(b"The Doors of Stone")`
$DIR/network/src/noise/stream.rs: `.flush()`
$DIR/network/src/noise/stream.rs: `.read_exact(&mut buf)`
$DIR/network/src/noise/stream.rs: `.read_exact(&mut buf)`
$DIR/network/src/noise/stream.rs: `.read_exact(&mut buf)`
$DIR/network/src/peer/fuzzing.rs: `executor.spawn(peer.start());`
$DIR/network/src/peer/fuzzing.rs: `rt.block_on(async move {
        // Wait for "remote" to disconnect (we read all data and socket read
        // returns EOF), we read a disconnect request, or we fail to deserialize
        // something.
        connection_notifs_rx.collect::<Vec<_>>().await;

        // ACK the "remote" d/c and drop our handle to the Peer actor. Then wait
        // for all network notifs to drain out and finish.
        drop(peer_reqs_tx);
        peer_notifs_rx.collect::<Vec<_>>().await;
    });`
$DIR/network/src/peer/fuzzing.rs: `connection_notifs_rx.collect::<Vec<_>>().await;`
$DIR/network/src/peer/fuzzing.rs: `drop(peer_reqs_tx);`
$DIR/network/src/peer/fuzzing.rs: `peer_notifs_rx.collect::<Vec<_>>().await;`
$DIR/network/src/peer/fuzzing.rs: `.generate(vec(any::<NetworkMessage>(), 1..20))`
$DIR/network/src/peer/fuzzing.rs: `.send(network_msg)`
$DIR/network/src/peer/fuzzing.rs: `.read_to_end(&mut buf)`
$DIR/network/src/peer/fuzzing.rs: `.enable_all()`
$DIR/network/src/peer/fuzzing.rs: `.build()`
$DIR/network/src/peer/fuzzing.rs: `.handle()`
$DIR/network/src/peer/fuzzing.rs: `.spawn(peer.start())`
$DIR/network/src/peer/fuzzing.rs: `.start()`
$DIR/network/src/peer/fuzzing.rs: `.block_on(async move {
        // Wait for "remote" to disconnect (we read all data and socket read
        // returns EOF), we read a disconnect request, or we fail to deserialize
        // something.
        connection_notifs_rx.collect::<Vec<_>>().await;

        // ACK the "remote" d/c and drop our handle to the Peer actor. Then wait
        // for all network notifs to drain out and finish.
        drop(peer_reqs_tx);
        peer_notifs_rx.collect::<Vec<_>>().await;
    })`
$DIR/network/src/peer/fuzzing.rs: `.collect::<Vec<_>>()`
$DIR/network/src/peer/fuzzing.rs: `.collect::<Vec<_>>()`
$DIR/network/src/peer/test.rs: `peer_b.connection = Some(connection_a);`
$DIR/network/src/peer/test.rs: `self.0.push(protocol_id, PeerRequest::SendRpc(request))?;`
$DIR/network/src/peer/test.rs: `::diem_logger::Logger::init_for_testing();`
$DIR/network/src/peer/test.rs: `::diem_logger::Logger::init_for_testing();`
$DIR/network/src/peer/test.rs: `::diem_logger::Logger::init_for_testing();`
$DIR/network/src/peer/test.rs: `drop(peer_handle_a);`
$DIR/network/src/peer/test.rs: `::diem_logger::Logger::init_for_testing();`
$DIR/network/src/peer/test.rs: `::diem_logger::Logger::init_for_testing();`
$DIR/network/src/peer/test.rs: `match received {
                PeerNotification::RecvRpc(req) => res_txs.push(req.res_tx),
                _ => panic!("Unexpected PeerNotification: {:?}", received),
            };`
$DIR/network/src/peer/test.rs: `res_tx.send(Ok(response)).unwrap();`
$DIR/network/src/peer/test.rs: `::diem_logger::Logger::init_for_testing();`
$DIR/network/src/peer/test.rs: `mock_time.advance_ms_async(INBOUND_RPC_TIMEOUT_MS).await;`
$DIR/network/src/peer/test.rs: `res_tx.cancellation().await;`
$DIR/network/src/peer/test.rs: `::diem_logger::Logger::init_for_testing();`
$DIR/network/src/peer/test.rs: `drop(res_tx);`
$DIR/network/src/peer/test.rs: `::diem_logger::Logger::init_for_testing();`
$DIR/network/src/peer/test.rs: `::diem_logger::Logger::init_for_testing();`
$DIR/network/src/peer/test.rs: `send_recv_futures.push(send_recv.boxed());`
$DIR/network/src/peer/test.rs: `future::join_all(send_recv_futures).await;`
$DIR/network/src/peer/test.rs: `::diem_logger::Logger::init_for_testing();`
$DIR/network/src/peer/test.rs: `peer_handle.0.push(PROTOCOL, request).unwrap();`
$DIR/network/src/peer/test.rs: `drop(response_rx);`
$DIR/network/src/peer/test.rs: `tokio::task::yield_now().await;`
$DIR/network/src/peer/test.rs: `drop(peer_handle);`
$DIR/network/src/peer/test.rs: `::diem_logger::Logger::init_for_testing();`
$DIR/network/src/peer/test.rs: `peer_handle.0.push(PROTOCOL, request).unwrap();`
$DIR/network/src/peer/test.rs: `mock_time.advance_async(timeout).await;`
$DIR/network/src/peer/test.rs: `tokio::task::yield_now().await;`
$DIR/network/src/peer/test.rs: `drop(peer_handle);`
$DIR/network/src/peer/test.rs: `::diem_logger::Logger::init_for_testing();`
$DIR/network/src/peer/test.rs: `drop(peer_handle);`
$DIR/network/src/peer/test.rs: `::diem_logger::Logger::init_for_testing();`
$DIR/network/src/peer/test.rs: `::diem_logger::Logger::init_for_testing();`
$DIR/network/src/peer/test.rs: `drop(peer_handle);`
$DIR/network/src/peer/test.rs: `.into()`
$DIR/network/src/peer/test.rs: `.compat()`
$DIR/network/src/peer/test.rs: `.compat_write()`
$DIR/network/src/peer/test.rs: `.compat()`
$DIR/network/src/peer/test.rs: `.next()`
$DIR/network/src/peer/test.rs: `.push(message.protocol_id, PeerRequest::SendDirectSend(message))`
$DIR/network/src/peer/test.rs: `.push(protocol_id, PeerRequest::SendRpc(request))`
$DIR/network/src/peer/test.rs: `.handle()`
$DIR/network/src/peer/test.rs: `.next()`
$DIR/network/src/peer/test.rs: `.close()`
$DIR/network/src/peer/test.rs: `.start()`
$DIR/network/src/peer/test.rs: `.handle()`
$DIR/network/src/peer/test.rs: `.send(&send_msg)`
$DIR/network/src/peer/test.rs: `.close()`
$DIR/network/src/peer/test.rs: `.next()`
$DIR/network/src/peer/test.rs: `.start()`
$DIR/network/src/peer/test.rs: `.handle()`
$DIR/network/src/peer/test.rs: `.remote_peer_id()`
$DIR/network/src/peer/test.rs: `.remote_peer_id()`
$DIR/network/src/peer/test.rs: `.next()`
$DIR/network/src/peer/test.rs: `.next()`
$DIR/network/src/peer/test.rs: `.start()`
$DIR/network/src/peer/test.rs: `.start()`
$DIR/network/src/peer/test.rs: `.handle()`
$DIR/network/src/peer/test.rs: `.send(&send_msg)`
$DIR/network/src/peer/test.rs: `.next()`
$DIR/network/src/peer/test.rs: `.close()`
$DIR/network/src/peer/test.rs: `.next()`
$DIR/network/src/peer/test.rs: `.res_tx.send(response)`
$DIR/network/src/peer/test.rs: `.start()`
$DIR/network/src/peer/test.rs: `.handle()`
$DIR/network/src/peer/test.rs: `.send(&send_msg)`
$DIR/network/src/peer/test.rs: `.next()`
$DIR/network/src/peer/test.rs: `.close()`
$DIR/network/src/peer/test.rs: `.next()`
$DIR/network/src/peer/test.rs: `.push(req.res_tx)`
$DIR/network/src/peer/test.rs: `.into_iter()`
$DIR/network/src/peer/test.rs: `.send(Ok(response))`
$DIR/network/src/peer/test.rs: `.start()`
$DIR/network/src/peer/test.rs: `.handle()`
$DIR/network/src/peer/test.rs: `.into()`
$DIR/network/src/peer/test.rs: `.send(&send_msg)`
$DIR/network/src/peer/test.rs: `.next()`
$DIR/network/src/peer/test.rs: `.advance_ms_async(INBOUND_RPC_TIMEOUT_MS)`
$DIR/network/src/peer/test.rs: `.cancellation()`
$DIR/network/src/peer/test.rs: `.close()`
$DIR/network/src/peer/test.rs: `.try_collect::<Vec<_>>()`
$DIR/network/src/peer/test.rs: `.start()`
$DIR/network/src/peer/test.rs: `.handle()`
$DIR/network/src/peer/test.rs: `.send(&send_msg)`
$DIR/network/src/peer/test.rs: `.next()`
$DIR/network/src/peer/test.rs: `.close()`
$DIR/network/src/peer/test.rs: `.try_collect::<Vec<_>>()`
$DIR/network/src/peer/test.rs: `.start()`
$DIR/network/src/peer/test.rs: `.handle()`
$DIR/network/src/peer/test.rs: `.next()`
$DIR/network/src/peer/test.rs: `.send(&response)`
$DIR/network/src/peer/test.rs: `.start()`
$DIR/network/src/peer/test.rs: `.handle()`
$DIR/network/src/peer/test.rs: `.push(send_recv.boxed())`
$DIR/network/src/peer/test.rs: `.boxed()`
$DIR/network/src/peer/test.rs: `.next()`
$DIR/network/src/peer/test.rs: `.send(&response)`
$DIR/network/src/peer/test.rs: `.start()`
$DIR/network/src/peer/test.rs: `.handle()`
$DIR/network/src/peer/test.rs: `.push(PROTOCOL, request)`
$DIR/network/src/peer/test.rs: `.next()`
$DIR/network/src/peer/test.rs: `.send(&response)`
$DIR/network/src/peer/test.rs: `.start()`
$DIR/network/src/peer/test.rs: `.handle()`
$DIR/network/src/peer/test.rs: `.into()`
$DIR/network/src/peer/test.rs: `.push(PROTOCOL, request)`
$DIR/network/src/peer/test.rs: `.next()`
$DIR/network/src/peer/test.rs: `.advance_async(timeout)`
$DIR/network/src/peer/test.rs: `.send(&response)`
$DIR/network/src/peer/test.rs: `.start()`
$DIR/network/src/peer/test.rs: `.handle()`
$DIR/network/src/peer/test.rs: `.remote_peer_id()`
$DIR/network/src/peer/test.rs: `.start()`
$DIR/network/src/peer/test.rs: `.handle()`
$DIR/network/src/peer/test.rs: `.remote_peer_id()`
$DIR/network/src/peer/test.rs: `.close()`
$DIR/network/src/peer/test.rs: `.start()`
$DIR/network/src/peer/test.rs: `.handle()`
$DIR/network/src/peer/test.rs: `.start()`
$DIR/network/src/peer_manager/conn_notifs_channel.rs: `.push(peer_id, notif)`
$DIR/network/src/peer_manager/conn_notifs_channel.rs: `.push(peer_id, notif)`
$DIR/network/src/peer_manager/conn_notifs_channel.rs: `.select_next_some()`
$DIR/network/src/peer_manager/conn_notifs_channel.rs: `.select_next_some()`
$DIR/network/src/peer_manager/tests.rs: `ids.push(PeerId::random());`
$DIR/network/src/peer_manager/tests.rs: `ids.sort();`
$DIR/network/src/peer_manager/tests.rs: `msg_tx
        .send_raw_frame(Bytes::from_static(&[255, 111]))
        .await?;`
$DIR/network/src/peer_manager/tests.rs: `peer_manager.handle_connection_event(connection_event);`
$DIR/network/src/peer_manager/tests.rs: `ping_pong(&mut dropped_connection).await?;`
$DIR/network/src/peer_manager/tests.rs: `ping_pong(&mut live_connection).await?;`
$DIR/network/src/peer_manager/tests.rs: `live_connection.close().await?;`
$DIR/network/src/peer_manager/tests.rs: `::diem_logger::Logger::init_for_testing();`
$DIR/network/src/peer_manager/tests.rs: `peer_manager.add_peer(create_connection(
            inbound1,
            ids[0],
            "/ip6/::1/tcp/8080".parse().unwrap(),
            ConnectionOrigin::Inbound,
            ConnectionId::from(0),
        ));`
$DIR/network/src/peer_manager/tests.rs: `peer_manager.add_peer(create_connection(
            inbound2,
            ids[0],
            "/ip6/::1/tcp/8081".parse().unwrap(),
            ConnectionOrigin::Inbound,
            ConnectionId::from(1),
        ));`
$DIR/network/src/peer_manager/tests.rs: `::diem_logger::Logger::init_for_testing();`
$DIR/network/src/peer_manager/tests.rs: `peer_manager.add_peer(create_connection(
            inbound1,
            ids[1],
            NetworkAddress::mock(),
            ConnectionOrigin::Inbound,
            ConnectionId::from(0),
        ));`
$DIR/network/src/peer_manager/tests.rs: `peer_manager.add_peer(create_connection(
            outbound2,
            ids[1],
            NetworkAddress::mock(),
            ConnectionOrigin::Outbound,
            ConnectionId::from(1),
        ));`
$DIR/network/src/peer_manager/tests.rs: `::diem_logger::Logger::init_for_testing();`
$DIR/network/src/peer_manager/tests.rs: `peer_manager.add_peer(create_connection(
            inbound1,
            ids[0],
            NetworkAddress::mock(),
            ConnectionOrigin::Inbound,
            ConnectionId::from(0),
        ));`
$DIR/network/src/peer_manager/tests.rs: `peer_manager.add_peer(create_connection(
            outbound2,
            ids[0],
            NetworkAddress::mock(),
            ConnectionOrigin::Outbound,
            ConnectionId::from(1),
        ));`
$DIR/network/src/peer_manager/tests.rs: `::diem_logger::Logger::init_for_testing();`
$DIR/network/src/peer_manager/tests.rs: `peer_manager.add_peer(create_connection(
            outbound1,
            ids[1],
            NetworkAddress::mock(),
            ConnectionOrigin::Outbound,
            ConnectionId::from(0),
        ));`
$DIR/network/src/peer_manager/tests.rs: `peer_manager.add_peer(create_connection(
            inbound2,
            ids[1],
            NetworkAddress::mock(),
            ConnectionOrigin::Inbound,
            ConnectionId::from(1),
        ));`
$DIR/network/src/peer_manager/tests.rs: `::diem_logger::Logger::init_for_testing();`
$DIR/network/src/peer_manager/tests.rs: `peer_manager.add_peer(create_connection(
            outbound1,
            ids[0],
            NetworkAddress::mock(),
            ConnectionOrigin::Outbound,
            ConnectionId::from(0),
        ));`
$DIR/network/src/peer_manager/tests.rs: `peer_manager.add_peer(create_connection(
            inbound2,
            ids[0],
            NetworkAddress::mock(),
            ConnectionOrigin::Inbound,
            ConnectionId::from(1),
        ));`
$DIR/network/src/peer_manager/tests.rs: `::diem_logger::Logger::init_for_testing();`
$DIR/network/src/peer_manager/tests.rs: `peer_manager.add_peer(create_connection(
            outbound1,
            ids[0],
            NetworkAddress::mock(),
            ConnectionOrigin::Outbound,
            ConnectionId::from(0),
        ));`
$DIR/network/src/peer_manager/tests.rs: `peer_manager.add_peer(create_connection(
            outbound2,
            ids[0],
            NetworkAddress::mock(),
            ConnectionOrigin::Outbound,
            ConnectionId::from(1),
        ));`
$DIR/network/src/peer_manager/tests.rs: `peer_manager.add_peer(create_connection(
            outbound,
            ids[0],
            NetworkAddress::mock(),
            ConnectionOrigin::Outbound,
            ConnectionId::from(1),
        ));`
$DIR/network/src/peer_manager/tests.rs: `peer_manager.handle_connection_event(event);`
$DIR/network/src/peer_manager/tests.rs: `::diem_logger::Logger::init_for_testing();`
$DIR/network/src/peer_manager/tests.rs: `peer_manager.add_peer(create_connection(
            outbound,
            ids[0],
            NetworkAddress::mock(),
            ConnectionOrigin::Outbound,
            ConnectionId::from(0),
        ));`
$DIR/network/src/peer_manager/tests.rs: `peer_manager
            .handle_outbound_connection_request(ConnectionRequest::DisconnectPeer(
                ids[0],
                disconnect_resp_tx,
            ))
            .await;`
$DIR/network/src/peer_manager/tests.rs: `peer_manager.handle_connection_event(event);`
$DIR/network/src/peer_manager/tests.rs: `disconnect_resp_rx.await.unwrap().unwrap();`
$DIR/network/src/peer_manager/tests.rs: `.and_then(move |socket, addr, origin| async move {
            Ok(Connection {
                socket,
                metadata: ConnectionMetadata::new(
                    PeerId::random(),
                    ConnectionId::default(),
                    addr,
                    origin,
                    MessagingProtocolVersion::V1,
                    [TEST_PROTOCOL].iter().into(),
                    PeerRole::Unknown,
                ),
            })
        })`
$DIR/network/src/peer_manager/tests.rs: `.into()`
$DIR/network/src/peer_manager/tests.rs: `.push(PeerId::random())`
$DIR/network/src/peer_manager/tests.rs: `.sort()`
$DIR/network/src/peer_manager/tests.rs: `.parse()`
$DIR/network/src/peer_manager/tests.rs: `.collect()`
$DIR/network/src/peer_manager/tests.rs: `.compat()`
$DIR/network/src/peer_manager/tests.rs: `.compat_write()`
$DIR/network/src/peer_manager/tests.rs: `.compat()`
$DIR/network/src/peer_manager/tests.rs: `.send_raw_frame(Bytes::from_static(&[255, 111]))`
$DIR/network/src/peer_manager/tests.rs: `.next()`
$DIR/network/src/peer_manager/tests.rs: `.ok_or_else(|| PeerManagerError::Error(anyhow!("Failed to read pong msg")))`
$DIR/network/src/peer_manager/tests.rs: `.transport_notifs_rx.select_next_some()`
$DIR/network/src/peer_manager/tests.rs: `.handle_connection_event(connection_event)`
$DIR/network/src/peer_manager/tests.rs: `.close()`
$DIR/network/src/peer_manager/tests.rs: `.into()`
$DIR/network/src/peer_manager/tests.rs: `.handle()`
$DIR/network/src/peer_manager/tests.rs: `.add_peer(create_connection(
            inbound1,
            ids[0],
            "/ip6/::1/tcp/8080".parse().unwrap(),
            ConnectionOrigin::Inbound,
            ConnectionId::from(0),
        ))`
$DIR/network/src/peer_manager/tests.rs: `.parse()`
$DIR/network/src/peer_manager/tests.rs: `.add_peer(create_connection(
            inbound2,
            ids[0],
            "/ip6/::1/tcp/8081".parse().unwrap(),
            ConnectionOrigin::Inbound,
            ConnectionId::from(1),
        ))`
$DIR/network/src/peer_manager/tests.rs: `.parse()`
$DIR/network/src/peer_manager/tests.rs: `.handle()`
$DIR/network/src/peer_manager/tests.rs: `.add_peer(create_connection(
            inbound1,
            ids[1],
            NetworkAddress::mock(),
            ConnectionOrigin::Inbound,
            ConnectionId::from(0),
        ))`
$DIR/network/src/peer_manager/tests.rs: `.add_peer(create_connection(
            outbound2,
            ids[1],
            NetworkAddress::mock(),
            ConnectionOrigin::Outbound,
            ConnectionId::from(1),
        ))`
$DIR/network/src/peer_manager/tests.rs: `.handle()`
$DIR/network/src/peer_manager/tests.rs: `.add_peer(create_connection(
            inbound1,
            ids[0],
            NetworkAddress::mock(),
            ConnectionOrigin::Inbound,
            ConnectionId::from(0),
        ))`
$DIR/network/src/peer_manager/tests.rs: `.add_peer(create_connection(
            outbound2,
            ids[0],
            NetworkAddress::mock(),
            ConnectionOrigin::Outbound,
            ConnectionId::from(1),
        ))`
$DIR/network/src/peer_manager/tests.rs: `.handle()`
$DIR/network/src/peer_manager/tests.rs: `.add_peer(create_connection(
            outbound1,
            ids[1],
            NetworkAddress::mock(),
            ConnectionOrigin::Outbound,
            ConnectionId::from(0),
        ))`
$DIR/network/src/peer_manager/tests.rs: `.add_peer(create_connection(
            inbound2,
            ids[1],
            NetworkAddress::mock(),
            ConnectionOrigin::Inbound,
            ConnectionId::from(1),
        ))`
$DIR/network/src/peer_manager/tests.rs: `.handle()`
$DIR/network/src/peer_manager/tests.rs: `.add_peer(create_connection(
            outbound1,
            ids[0],
            NetworkAddress::mock(),
            ConnectionOrigin::Outbound,
            ConnectionId::from(0),
        ))`
$DIR/network/src/peer_manager/tests.rs: `.add_peer(create_connection(
            inbound2,
            ids[0],
            NetworkAddress::mock(),
            ConnectionOrigin::Inbound,
            ConnectionId::from(1),
        ))`
$DIR/network/src/peer_manager/tests.rs: `.handle()`
$DIR/network/src/peer_manager/tests.rs: `.add_peer(create_connection(
            outbound1,
            ids[0],
            NetworkAddress::mock(),
            ConnectionOrigin::Outbound,
            ConnectionId::from(0),
        ))`
$DIR/network/src/peer_manager/tests.rs: `.add_peer(create_connection(
            outbound2,
            ids[0],
            NetworkAddress::mock(),
            ConnectionOrigin::Outbound,
            ConnectionId::from(1),
        ))`
$DIR/network/src/peer_manager/tests.rs: `.handle()`
$DIR/network/src/peer_manager/tests.rs: `.add_peer(create_connection(
            outbound,
            ids[0],
            NetworkAddress::mock(),
            ConnectionOrigin::Outbound,
            ConnectionId::from(1),
        ))`
$DIR/network/src/peer_manager/tests.rs: `.into()`
$DIR/network/src/peer_manager/tests.rs: `.handle_connection_event(event)`
$DIR/network/src/peer_manager/tests.rs: `.handle()`
$DIR/network/src/peer_manager/tests.rs: `.add_peer(create_connection(
            outbound,
            ids[0],
            NetworkAddress::mock(),
            ConnectionOrigin::Outbound,
            ConnectionId::from(0),
        ))`
$DIR/network/src/peer_manager/tests.rs: `.next()`
$DIR/network/src/peer_manager/tests.rs: `.handle_outbound_connection_request(ConnectionRequest::DisconnectPeer(
                ids[0],
                disconnect_resp_tx,
            ))`
$DIR/network/src/peer_manager/tests.rs: `.into()`
$DIR/network/src/peer_manager/tests.rs: `.handle_connection_event(event)`
$DIR/network/src/peer_manager/tests.rs: `.next()`
$DIR/network/src/protocols/health_checker/test.rs: `self.mock_time.advance_async(PING_INTERVAL).await;`
$DIR/network/src/protocols/health_checker/test.rs: `res_tx.send(Ok(res_data.into())).unwrap();`
$DIR/network/src/protocols/health_checker/test.rs: `res_tx.send(Err(RpcError::TimedOut)).unwrap();`
$DIR/network/src/protocols/health_checker/test.rs: `self.peer_mgr_notifs_tx
            .push_with_feedback(
                key,
                PeerManagerNotification::RecvRpc(peer_id, inbound_rpc_req),
                Some(delivered_tx),
            )
            .unwrap();`
$DIR/network/src/protocols/health_checker/test.rs: `res_tx.send(Ok(())).unwrap();`
$DIR/network/src/protocols/health_checker/test.rs: `self.connection_notifs_tx
            .push_with_feedback(peer_id, notif, Some(delivered_tx))
            .unwrap();`
$DIR/network/src/protocols/health_checker/test.rs: `match bcs::from_bytes(&res_data).unwrap() {
        HealthCheckerMsg::Pong(_) => {}
        msg => panic!("Unexpected HealthCheckerMsg: {:?}", msg),
    };`
$DIR/network/src/protocols/health_checker/test.rs: `.mock_time.advance_async(PING_INTERVAL)`
$DIR/network/src/protocols/health_checker/test.rs: `.peer_mgr_reqs_rx.next()`
$DIR/network/src/protocols/health_checker/test.rs: `.send(Ok(res_data.into()))`
$DIR/network/src/protocols/health_checker/test.rs: `.into()`
$DIR/network/src/protocols/health_checker/test.rs: `.send(Err(RpcError::TimedOut))`
$DIR/network/src/protocols/health_checker/test.rs: `.into()`
$DIR/network/src/protocols/health_checker/test.rs: `.peer_mgr_notifs_tx
            .push_with_feedback(
                key,
                PeerManagerNotification::RecvRpc(peer_id, inbound_rpc_req),
                Some(delivered_tx),
            )`
$DIR/network/src/protocols/health_checker/test.rs: `.connection_reqs_rx.next()`
$DIR/network/src/protocols/health_checker/test.rs: `.send(Ok(()))`
$DIR/network/src/protocols/health_checker/test.rs: `.connection_notifs_tx
            .push_with_feedback(peer_id, notif, Some(delivered_tx))`
$DIR/network/src/protocols/health_checker/test.rs: `.start()`
$DIR/network/src/protocols/health_checker/test.rs: `.start()`
$DIR/network/src/protocols/health_checker/test.rs: `.start()`
$DIR/network/src/protocols/health_checker/test.rs: `.start()`
$DIR/network/src/protocols/health_checker/test.rs: `.start()`
$DIR/network/src/protocols/identity.rs: `write_u16frame(socket, &msg).await?;`
$DIR/network/src/protocols/identity.rs: `socket.flush().await?;`
$DIR/network/src/protocols/identity.rs: `read_u16frame(socket, &mut response).await?;`
$DIR/network/src/protocols/identity.rs: `supported_protocols.insert(
            MessagingProtocolVersion::V1,
            [
                ProtocolId::ConsensusDirectSend,
                ProtocolId::MempoolDirectSend,
            ]
            .iter()
            .into(),
        );`
$DIR/network/src/protocols/identity.rs: `supported_protocols.insert(
            MessagingProtocolVersion::V1,
            [ProtocolId::ConsensusRpc, ProtocolId::ConsensusDirectSend]
                .iter()
                .into(),
        );`
$DIR/network/src/protocols/identity.rs: `client_handshake.chain_id = ChainId::new(client_handshake.chain_id.id() + 1);`
$DIR/network/src/protocols/identity.rs: `client_handshake.network_id = NetworkId::Public;`
$DIR/network/src/protocols/identity.rs: `.map_err(|e| {
        io::Error::new(
            io::ErrorKind::InvalidData,
            format!("Failed to serialize identity msg: {}", e),
        )
    })`
$DIR/network/src/protocols/identity.rs: `.flush()`
$DIR/network/src/protocols/identity.rs: `.map_err(|e| {
        io::Error::new(
            io::ErrorKind::InvalidData,
            format!("Failed to parse identity msg: {}", e),
        )
    })`
$DIR/network/src/protocols/identity.rs: `.insert(
            MessagingProtocolVersion::V1,
            [
                ProtocolId::ConsensusDirectSend,
                ProtocolId::MempoolDirectSend,
            ]
            .iter()
            .into(),
        )`
$DIR/network/src/protocols/identity.rs: `.into()`
$DIR/network/src/protocols/identity.rs: `.insert(
            MessagingProtocolVersion::V1,
            [ProtocolId::ConsensusRpc, ProtocolId::ConsensusDirectSend]
                .iter()
                .into(),
        )`
$DIR/network/src/protocols/identity.rs: `.into()`
$DIR/network/src/protocols/identity.rs: `.chain_id.id()`
$DIR/network/src/protocols/identity.rs: `.perform_handshake(&remote_handshake)`
$DIR/network/src/protocols/identity.rs: `.perform_handshake(&remote_handshake)`
$DIR/network/src/protocols/identity.rs: `.perform_handshake(&remote_handshake)`
$DIR/network/src/protocols/identity.rs: `.perform_handshake(&remote_handshake)`
$DIR/network/src/protocols/wire/handshake/v1/test.rs: `handshake_msg.network_id = NetworkId::vfn_network();`
$DIR/network/src/protocols/wire/handshake/v1/test.rs: `h1.perform_handshake(&h2).unwrap();`
$DIR/network/src/protocols/wire/handshake/v1/test.rs: `h2.network_id = NetworkId::Private("h2".to_string());`
$DIR/network/src/protocols/wire/handshake/v1/test.rs: `h2.network_id = NetworkId::Public;`
$DIR/network/src/protocols/wire/handshake/v1/test.rs: `h2.chain_id = ChainId::new(h1.chain_id.id() + 1);`
$DIR/network/src/protocols/wire/handshake/v1/test.rs: `supported_protocols.insert(
        MessagingProtocolVersion::V1,
        [ProtocolId::ConsensusRpc, ProtocolId::DiscoveryDirectSend]
            .iter()
            .into(),
    );`
$DIR/network/src/protocols/wire/handshake/v1/test.rs: `supported_protocols.insert(
        MessagingProtocolVersion::V1,
        [ProtocolId::ConsensusRpc, ProtocolId::MempoolDirectSend]
            .iter()
            .into(),
    );`
$DIR/network/src/protocols/wire/handshake/v1/test.rs: `h1.perform_handshake(&h2).unwrap_err();`
$DIR/network/src/protocols/wire/handshake/v1/test.rs: `supported_protocols.insert(MessagingProtocolVersion::V1, SupportedProtocols::default());`
$DIR/network/src/protocols/wire/handshake/v1/test.rs: `.into()`
$DIR/network/src/protocols/wire/handshake/v1/test.rs: `.perform_handshake(&h2)`
$DIR/network/src/protocols/wire/handshake/v1/test.rs: `.perform_handshake(&h2)`
$DIR/network/src/protocols/wire/handshake/v1/test.rs: `.perform_handshake(&h2)`
$DIR/network/src/protocols/wire/handshake/v1/test.rs: `.chain_id.id()`
$DIR/network/src/protocols/wire/handshake/v1/test.rs: `.perform_handshake(&h2)`
$DIR/network/src/protocols/wire/handshake/v1/test.rs: `.insert(
        MessagingProtocolVersion::V1,
        [ProtocolId::ConsensusRpc, ProtocolId::DiscoveryDirectSend]
            .iter()
            .into(),
    )`
$DIR/network/src/protocols/wire/handshake/v1/test.rs: `.into()`
$DIR/network/src/protocols/wire/handshake/v1/test.rs: `.insert(
        MessagingProtocolVersion::V1,
        [ProtocolId::ConsensusRpc, ProtocolId::MempoolDirectSend]
            .iter()
            .into(),
    )`
$DIR/network/src/protocols/wire/handshake/v1/test.rs: `.into()`
$DIR/network/src/protocols/wire/handshake/v1/test.rs: `.perform_handshake(&h2)`
$DIR/network/src/protocols/wire/handshake/v1/test.rs: `.insert(MessagingProtocolVersion::V1, SupportedProtocols::default())`
$DIR/network/src/protocols/wire/messaging/v1/test.rs: `socket_tx.save_writing(&mut write_buf);`
$DIR/network/src/protocols/wire/messaging/v1/test.rs: `block_on(message_tx.send(&message)).unwrap();`
$DIR/network/src/protocols/wire/messaging/v1/test.rs: `.collect::<Vec<_>>()`
$DIR/network/src/protocols/wire/messaging/v1/test.rs: `.into_iter()`
$DIR/network/src/protocols/wire/messaging/v1/test.rs: `.collect::<Result<Vec<_>, _>>()`
$DIR/network/src/protocols/wire/messaging/v1/test.rs: `.save_writing(&mut write_buf)`
$DIR/network/src/protocols/wire/messaging/v1/test.rs: `.send(&message)`
$DIR/network/src/protocols/wire/messaging/v1/test.rs: `.send(&message)`
$DIR/network/src/protocols/wire/messaging/v1/test.rs: `.send(&message)`
$DIR/network/src/protocols/wire/messaging/v1/test.rs: `.next()`
$DIR/network/src/testutils/fake_socket.rs: `self.fragmented_read = true;`
$DIR/network/src/testutils/fake_socket.rs: `self.trailing = true;`
$DIR/network/src/testutils/fake_socket.rs: `self.written = Some(buf);`
$DIR/network/src/testutils/fake_socket.rs: `self.fragmented_write = true;`
$DIR/network/src/testutils/fake_socket.rs: `.read_exact(&mut buf)`
$DIR/network/src/testutils/fake_socket.rs: `.read(&mut buf)`
$DIR/network/src/testutils/fake_socket.rs: `.len()`
$DIR/network/src/testutils/fake_socket.rs: `.write(&msg[i..])`
$DIR/network/src/testutils/fake_socket.rs: `.close()`
$DIR/network/src/testutils/fake_socket.rs: `.read_to_end(&mut read_buf)`
$DIR/network/src/testutils/fake_socket.rs: `.read_exact(&mut buf)`
$DIR/network/src/testutils/fake_socket.rs: `.write(&first_message)`
$DIR/network/src/testutils/fake_socket.rs: `.read(&mut buf)`
$DIR/network/src/testutils/fake_socket.rs: `.write(&second_message)`
$DIR/network/src/testutils/fake_socket.rs: `.read(&mut buf)`
$DIR/network/src/transport/test.rs: `expect_formatted_addr(&listener_addr);`
$DIR/network/src/transport/test.rs: `expect_formatted_addr(&conn.metadata.addr);`
$DIR/network/src/transport/test.rs: `rt.block_on(future::join(listener_task, dialer_task));`
$DIR/network/src/transport/test.rs: `trusted_peers.write().remove(&dialer_peer_id).unwrap();`
$DIR/network/src/transport/test.rs: `expect_formatted_addr(&listener_addr);`
$DIR/network/src/transport/test.rs: `rt.block_on(future::join(listener_task, dialer_task));`
$DIR/network/src/transport/test.rs: `expect_formatted_addr(&listener_addr);`
$DIR/network/src/transport/test.rs: `expect_formatted_addr(&conn.metadata.addr);`
$DIR/network/src/transport/test.rs: `trusted_peers.write().clear();`
$DIR/network/src/transport/test.rs: `expect_formatted_addr(&conn.metadata.addr);`
$DIR/network/src/transport/test.rs: `rt.block_on(future::join(listener_task, dialer_task));`
$DIR/network/src/transport/test.rs: `.public_key()`
$DIR/network/src/transport/test.rs: `.collect()`
$DIR/network/src/transport/test.rs: `.public_key()`
$DIR/network/src/transport/test.rs: `.collect()`
$DIR/network/src/transport/test.rs: `.into_iter()`
$DIR/network/src/transport/test.rs: `.collect()`
$DIR/network/src/transport/test.rs: `.public_key()`
$DIR/network/src/transport/test.rs: `.public_key()`
$DIR/network/src/transport/test.rs: `.public_key()`
$DIR/network/src/transport/test.rs: `.public_key()`
$DIR/network/src/transport/test.rs: `.into_mock()`
$DIR/network/src/transport/test.rs: `.flush()`
$DIR/network/src/transport/test.rs: `.enter()`
$DIR/network/src/transport/test.rs: `.listen_on(listen_addr.parse().unwrap())`
$DIR/network/src/transport/test.rs: `.parse()`
$DIR/network/src/transport/test.rs: `.next()`
$DIR/network/src/transport/test.rs: `.socket.close()`
$DIR/network/src/transport/test.rs: `.dial(listener_peer_id, listener_addr.clone())`
$DIR/network/src/transport/test.rs: `.socket.close()`
$DIR/network/src/transport/test.rs: `.block_on(future::join(listener_task, dialer_task))`
$DIR/network/src/transport/test.rs: `.write()`
$DIR/network/src/transport/test.rs: `.remove(&dialer_peer_id)`
$DIR/network/src/transport/test.rs: `.enter()`
$DIR/network/src/transport/test.rs: `.listen_on(listen_addr.parse().unwrap())`
$DIR/network/src/transport/test.rs: `.parse()`
$DIR/network/src/transport/test.rs: `.next()`
$DIR/network/src/transport/test.rs: `.dial(listener_peer_id, listener_addr.clone())`
$DIR/network/src/transport/test.rs: `.block_on(future::join(listener_task, dialer_task))`
$DIR/network/src/transport/test.rs: `.enter()`
$DIR/network/src/transport/test.rs: `.listen_on(listen_addr.parse().unwrap())`
$DIR/network/src/transport/test.rs: `.parse()`
$DIR/network/src/transport/test.rs: `.next()`
$DIR/network/src/transport/test.rs: `.socket.close()`
$DIR/network/src/transport/test.rs: `.write()`
$DIR/network/src/transport/test.rs: `.clear()`
$DIR/network/src/transport/test.rs: `.next()`
$DIR/network/src/transport/test.rs: `.socket.close()`
$DIR/network/src/transport/test.rs: `.dial(listener_peer_id, listener_addr.clone())`
$DIR/network/src/transport/test.rs: `.socket.close()`
$DIR/network/src/transport/test.rs: `.dial(listener_peer_id, listener_addr.clone())`
$DIR/network/src/transport/test.rs: `.socket.close()`
$DIR/network/src/transport/test.rs: `.block_on(future::join(listener_task, dialer_task))`
$DIR/sdk/compatibility/src/lib.rs: `client.get_events(currency.mint_events_key, 0, 10)?;`
$DIR/sdk/compatibility/src/lib.rs: `client.get_network_status()?;`
$DIR/sdk/compatibility/src/lib.rs: `env.coffer()
        .fund(currency, account.authentication_key(), amount)?;`
$DIR/sdk/compatibility/src/lib.rs: `env.coffer()
        .fund(Currency::XUS, account.authentication_key(), 1000)?;`
$DIR/sdk/compatibility/src/lib.rs: `env.coffer()
        .fund(Currency::XUS, account_1.authentication_key(), 1000)?;`
$DIR/sdk/compatibility/src/lib.rs: `env.coffer()
        .fund(Currency::XUS, account_2.authentication_key(), 1000)?;`
$DIR/sdk/compatibility/src/lib.rs: `client.submit(&txn)?;`
$DIR/sdk/compatibility/src/lib.rs: `client.wait_for_signed_transaction(&txn, None, None)?;`
$DIR/sdk/compatibility/src/lib.rs: `txns.verify(
        latest_li.ledger_info(),
        account_1.address(),
        0,
        100,
        true,
        ledger_version,
    )?;`
$DIR/sdk/compatibility/src/lib.rs: `event_proof.verify(
        latest_li,
        &new_block_event_key(),
        Some(block_height),
        latest_li.version(),
    )?;`
$DIR/sdk/compatibility/src/lib.rs: `env.coffer()
        .fund(currency, account.authentication_key(), amount)?;`
$DIR/sdk/compatibility/src/lib.rs: `client.submit(&txn)?;`
$DIR/sdk/compatibility/src/lib.rs: `client.wait_for_signed_transaction(&txn, None, None)?;`
$DIR/sdk/compatibility/src/lib.rs: `env.coffer()
        .fund(currency, account.authentication_key(), amount)?;`
$DIR/sdk/compatibility/src/lib.rs: `client.submit(&txn)?;`
$DIR/sdk/compatibility/src/lib.rs: `client.wait_for_signed_transaction(&txn, None, None)?;`
$DIR/sdk/compatibility/src/lib.rs: `env.coffer()
        .fund(currency, account.authentication_key(), start_amount)?;`
$DIR/sdk/compatibility/src/lib.rs: `env.coffer()
        .fund(currency, account_2.authentication_key(), start_amount)?;`
$DIR/sdk/compatibility/src/lib.rs: `client.submit(&txn)?;`
$DIR/sdk/compatibility/src/lib.rs: `client.wait_for_signed_transaction(&txn, None, None)?;`
$DIR/sdk/compatibility/src/lib.rs: `env.coffer()
        .fund(currency, account.authentication_key(), amount)?;`
$DIR/sdk/compatibility/src/lib.rs: `client.submit(&txn)?;`
$DIR/sdk/compatibility/src/lib.rs: `client.wait_for_signed_transaction(&txn, None, None)?;`
$DIR/sdk/compatibility/src/lib.rs: `client.submit(&txn)?;`
$DIR/sdk/compatibility/src/lib.rs: `client.wait_for_signed_transaction(&txn, None, None)?;`
$DIR/sdk/compatibility/src/lib.rs: `env.coffer()
        .fund(currency, account.authentication_key(), start_amount)?;`
$DIR/sdk/compatibility/src/lib.rs: `env.coffer()
        .fund(currency, account_2.authentication_key(), start_amount)?;`
$DIR/sdk/compatibility/src/lib.rs: `client.submit(&txn)?;`
$DIR/sdk/compatibility/src/lib.rs: `client.submit(&txn)?;`
$DIR/sdk/compatibility/src/lib.rs: `client.wait_for_signed_transaction(&txn, None, None)?;`
$DIR/sdk/compatibility/src/lib.rs: `client.submit(&txn)?;`
$DIR/sdk/compatibility/src/lib.rs: `client.wait_for_signed_transaction(&txn, None, None)?;`
$DIR/sdk/compatibility/src/lib.rs: `env.coffer()
        .fund(currency, account.authentication_key(), start_amount)?;`
$DIR/sdk/compatibility/src/lib.rs: `client.submit(&txn)?;`
$DIR/sdk/compatibility/src/lib.rs: `client.wait_for_signed_transaction(&txn, None, None)?;`
$DIR/sdk/compatibility/src/lib.rs: `client.submit(&txn)?;`
$DIR/sdk/compatibility/src/lib.rs: `client.wait_for_signed_transaction(&txn, None, None)?;`
$DIR/sdk/compatibility/src/lib.rs: `.client()`
$DIR/sdk/compatibility/src/lib.rs: `.get_metadata()`
$DIR/sdk/compatibility/src/lib.rs: `.into_inner()`
$DIR/sdk/compatibility/src/lib.rs: `.client()`
$DIR/sdk/compatibility/src/lib.rs: `.get_metadata()`
$DIR/sdk/compatibility/src/lib.rs: `.into_inner()`
$DIR/sdk/compatibility/src/lib.rs: `.get_metadata_by_version(current_version.saturating_sub(1))`
$DIR/sdk/compatibility/src/lib.rs: `.saturating_sub(1)`
$DIR/sdk/compatibility/src/lib.rs: `.into_inner()`
$DIR/sdk/compatibility/src/lib.rs: `.client()`
$DIR/sdk/compatibility/src/lib.rs: `.get_metadata()`
$DIR/sdk/compatibility/src/lib.rs: `.into_inner()`
$DIR/sdk/compatibility/src/lib.rs: `.get_accumulator_consistency_proof(None, Some(metadata.version))`
$DIR/sdk/compatibility/src/lib.rs: `.into_inner()`
$DIR/sdk/compatibility/src/lib.rs: `.client()`
$DIR/sdk/compatibility/src/lib.rs: `.type_tag()`
$DIR/sdk/compatibility/src/lib.rs: `.type_tag()`
$DIR/sdk/compatibility/src/lib.rs: `.type_tag()`
$DIR/sdk/compatibility/src/lib.rs: `.type_tag()`
$DIR/sdk/compatibility/src/lib.rs: `.type_tag()`
$DIR/sdk/compatibility/src/lib.rs: `.type_tag()`
$DIR/sdk/compatibility/src/lib.rs: `.type_tag()`
$DIR/sdk/compatibility/src/lib.rs: `.type_tag()`
$DIR/sdk/compatibility/src/lib.rs: `.type_tag()`
$DIR/sdk/compatibility/src/lib.rs: `.type_tag()`
$DIR/sdk/compatibility/src/lib.rs: `.get_metadata()`
$DIR/sdk/compatibility/src/lib.rs: `.into_inner()`
$DIR/sdk/compatibility/src/lib.rs: `.code()`
$DIR/sdk/compatibility/src/lib.rs: `.split_whitespace()`
$DIR/sdk/compatibility/src/lib.rs: `.next()`
$DIR/sdk/compatibility/src/lib.rs: `.client()`
$DIR/sdk/compatibility/src/lib.rs: `.get_currencies()`
$DIR/sdk/compatibility/src/lib.rs: `.into_inner()`
$DIR/sdk/compatibility/src/lib.rs: `.client()`
$DIR/sdk/compatibility/src/lib.rs: `.get_currencies()`
$DIR/sdk/compatibility/src/lib.rs: `.into_inner()`
$DIR/sdk/compatibility/src/lib.rs: `.get_events(currency.mint_events_key, 0, 10)`
$DIR/sdk/compatibility/src/lib.rs: `.client()`
$DIR/sdk/compatibility/src/lib.rs: `.get_network_status()`
$DIR/sdk/compatibility/src/lib.rs: `.client()`
$DIR/sdk/compatibility/src/lib.rs: `.random_account()`
$DIR/sdk/compatibility/src/lib.rs: `.coffer()`
$DIR/sdk/compatibility/src/lib.rs: `.fund(currency, account.authentication_key(), amount)`
$DIR/sdk/compatibility/src/lib.rs: `.authentication_key()`
$DIR/sdk/compatibility/src/lib.rs: `.get_account(account.address())`
$DIR/sdk/compatibility/src/lib.rs: `.address()`
$DIR/sdk/compatibility/src/lib.rs: `.into_inner()`
$DIR/sdk/compatibility/src/lib.rs: `.find(|b| b.currency == currency)`
$DIR/sdk/compatibility/src/lib.rs: `.client()`
$DIR/sdk/compatibility/src/lib.rs: `.random_account()`
$DIR/sdk/compatibility/src/lib.rs: `.get_account(account.address())`
$DIR/sdk/compatibility/src/lib.rs: `.address()`
$DIR/sdk/compatibility/src/lib.rs: `.into_parts()`
$DIR/sdk/compatibility/src/lib.rs: `.get_account_by_version(account.address(), state_1.version)`
$DIR/sdk/compatibility/src/lib.rs: `.address()`
$DIR/sdk/compatibility/src/lib.rs: `.into_inner()`
$DIR/sdk/compatibility/src/lib.rs: `.coffer()`
$DIR/sdk/compatibility/src/lib.rs: `.fund(Currency::XUS, account.authentication_key(), 1000)`
$DIR/sdk/compatibility/src/lib.rs: `.authentication_key()`
$DIR/sdk/compatibility/src/lib.rs: `.get_account(account.address())`
$DIR/sdk/compatibility/src/lib.rs: `.address()`
$DIR/sdk/compatibility/src/lib.rs: `.into_parts()`
$DIR/sdk/compatibility/src/lib.rs: `.get_account_by_version(account.address(), state_3.version)`
$DIR/sdk/compatibility/src/lib.rs: `.address()`
$DIR/sdk/compatibility/src/lib.rs: `.into_inner()`
$DIR/sdk/compatibility/src/lib.rs: `.get_account_by_version(account.address(), state_1.version)`
$DIR/sdk/compatibility/src/lib.rs: `.address()`
$DIR/sdk/compatibility/src/lib.rs: `.into_inner()`
$DIR/sdk/compatibility/src/lib.rs: `.client()`
$DIR/sdk/compatibility/src/lib.rs: `.random_account()`
$DIR/sdk/compatibility/src/lib.rs: `.random_account()`
$DIR/sdk/compatibility/src/lib.rs: `.coffer()`
$DIR/sdk/compatibility/src/lib.rs: `.fund(Currency::XUS, account_1.authentication_key(), 1000)`
$DIR/sdk/compatibility/src/lib.rs: `.authentication_key()`
$DIR/sdk/compatibility/src/lib.rs: `.coffer()`
$DIR/sdk/compatibility/src/lib.rs: `.fund(Currency::XUS, account_2.authentication_key(), 1000)`
$DIR/sdk/compatibility/src/lib.rs: `.authentication_key()`
$DIR/sdk/compatibility/src/lib.rs: `.sign_with_transaction_builder(env.transaction_factory().peer_to_peer(
            Currency::XUS,
            account_2.address(),
            100,
        ))`
$DIR/sdk/compatibility/src/lib.rs: `.transaction_factory()`
$DIR/sdk/compatibility/src/lib.rs: `.peer_to_peer(
            Currency::XUS,
            account_2.address(),
            100,
        )`
$DIR/sdk/compatibility/src/lib.rs: `.address()`
$DIR/sdk/compatibility/src/lib.rs: `.submit(&txn)`
$DIR/sdk/compatibility/src/lib.rs: `.wait_for_signed_transaction(&txn, None, None)`
$DIR/sdk/compatibility/src/lib.rs: `.get_state_proof(0)`
$DIR/sdk/compatibility/src/lib.rs: `.into_inner()`
$DIR/sdk/compatibility/src/lib.rs: `.ledger_info()`
$DIR/sdk/compatibility/src/lib.rs: `.version()`
$DIR/sdk/compatibility/src/lib.rs: `.get_account_transactions_with_proofs(
            account_1.address(),
            0,
            100,
            true,
            Some(ledger_version),
        )`
$DIR/sdk/compatibility/src/lib.rs: `.address()`
$DIR/sdk/compatibility/src/lib.rs: `.into_inner()`
$DIR/sdk/compatibility/src/lib.rs: `.verify(
        latest_li.ledger_info(),
        account_1.address(),
        0,
        100,
        true,
        ledger_version,
    )`
$DIR/sdk/compatibility/src/lib.rs: `.ledger_info()`
$DIR/sdk/compatibility/src/lib.rs: `.address()`
$DIR/sdk/compatibility/src/lib.rs: `.client()`
$DIR/sdk/compatibility/src/lib.rs: `.batch(batch)`
$DIR/sdk/compatibility/src/lib.rs: `.into_iter()`
$DIR/sdk/compatibility/src/lib.rs: `.next()`
$DIR/sdk/compatibility/src/lib.rs: `.into_inner()`
$DIR/sdk/compatibility/src/lib.rs: `.next()`
$DIR/sdk/compatibility/src/lib.rs: `.into_inner()`
$DIR/sdk/compatibility/src/lib.rs: `.next()`
$DIR/sdk/compatibility/src/lib.rs: `.into_inner()`
$DIR/sdk/compatibility/src/lib.rs: `.try_into_get_state_proof()`
$DIR/sdk/compatibility/src/lib.rs: `.try_into_get_account_state_with_proof()`
$DIR/sdk/compatibility/src/lib.rs: `.try_into_get_event_by_version_with_proof()`
$DIR/sdk/compatibility/src/lib.rs: `.ledger_info()`
$DIR/sdk/compatibility/src/lib.rs: `.get_diem_block_resource()`
$DIR/sdk/compatibility/src/lib.rs: `.height()`
$DIR/sdk/compatibility/src/lib.rs: `.verify(
        latest_li,
        &new_block_event_key(),
        Some(block_height),
        latest_li.version(),
    )`
$DIR/sdk/compatibility/src/lib.rs: `.version()`
$DIR/sdk/compatibility/src/lib.rs: `.client()`
$DIR/sdk/compatibility/src/lib.rs: `.random_account()`
$DIR/sdk/compatibility/src/lib.rs: `.coffer()`
$DIR/sdk/compatibility/src/lib.rs: `.fund(currency, account.authentication_key(), amount)`
$DIR/sdk/compatibility/src/lib.rs: `.authentication_key()`
$DIR/sdk/compatibility/src/lib.rs: `.random_account()`
$DIR/sdk/compatibility/src/lib.rs: `.sign_with_transaction_builder(env.transaction_factory().create_child_vasp_account(
            currency,
            child_account.authentication_key(),
            false,
            0,
        ))`
$DIR/sdk/compatibility/src/lib.rs: `.transaction_factory()`
$DIR/sdk/compatibility/src/lib.rs: `.create_child_vasp_account(
            currency,
            child_account.authentication_key(),
            false,
            0,
        )`
$DIR/sdk/compatibility/src/lib.rs: `.authentication_key()`
$DIR/sdk/compatibility/src/lib.rs: `.submit(&txn)`
$DIR/sdk/compatibility/src/lib.rs: `.wait_for_signed_transaction(&txn, None, None)`
$DIR/sdk/compatibility/src/lib.rs: `.get_account(child_account.address())`
$DIR/sdk/compatibility/src/lib.rs: `.address()`
$DIR/sdk/compatibility/src/lib.rs: `.into_inner()`
$DIR/sdk/compatibility/src/lib.rs: `.find(|b| b.currency == currency)`
$DIR/sdk/compatibility/src/lib.rs: `.client()`
$DIR/sdk/compatibility/src/lib.rs: `.random_account()`
$DIR/sdk/compatibility/src/lib.rs: `.coffer()`
$DIR/sdk/compatibility/src/lib.rs: `.fund(currency, account.authentication_key(), amount)`
$DIR/sdk/compatibility/src/lib.rs: `.authentication_key()`
$DIR/sdk/compatibility/src/lib.rs: `.get_account(account.address())`
$DIR/sdk/compatibility/src/lib.rs: `.address()`
$DIR/sdk/compatibility/src/lib.rs: `.into_inner()`
$DIR/sdk/compatibility/src/lib.rs: `.sign_with_transaction_builder(
        env.transaction_factory()
            .add_currency_to_account(Currency::XDX),
    )`
$DIR/sdk/compatibility/src/lib.rs: `.transaction_factory()`
$DIR/sdk/compatibility/src/lib.rs: `.add_currency_to_account(Currency::XDX)`
$DIR/sdk/compatibility/src/lib.rs: `.submit(&txn)`
$DIR/sdk/compatibility/src/lib.rs: `.wait_for_signed_transaction(&txn, None, None)`
$DIR/sdk/compatibility/src/lib.rs: `.get_account(account.address())`
$DIR/sdk/compatibility/src/lib.rs: `.address()`
$DIR/sdk/compatibility/src/lib.rs: `.into_inner()`
$DIR/sdk/compatibility/src/lib.rs: `.find(|b| b.currency == Currency::XDX)`
$DIR/sdk/compatibility/src/lib.rs: `.client()`
$DIR/sdk/compatibility/src/lib.rs: `.random_account()`
$DIR/sdk/compatibility/src/lib.rs: `.coffer()`
$DIR/sdk/compatibility/src/lib.rs: `.fund(currency, account.authentication_key(), start_amount)`
$DIR/sdk/compatibility/src/lib.rs: `.authentication_key()`
$DIR/sdk/compatibility/src/lib.rs: `.random_account()`
$DIR/sdk/compatibility/src/lib.rs: `.coffer()`
$DIR/sdk/compatibility/src/lib.rs: `.fund(currency, account_2.authentication_key(), start_amount)`
$DIR/sdk/compatibility/src/lib.rs: `.authentication_key()`
$DIR/sdk/compatibility/src/lib.rs: `.sign_with_transaction_builder(env.transaction_factory().peer_to_peer(
        currency,
        account_2.address(),
        transfer_amount,
    ))`
$DIR/sdk/compatibility/src/lib.rs: `.transaction_factory()`
$DIR/sdk/compatibility/src/lib.rs: `.peer_to_peer(
        currency,
        account_2.address(),
        transfer_amount,
    )`
$DIR/sdk/compatibility/src/lib.rs: `.address()`
$DIR/sdk/compatibility/src/lib.rs: `.submit(&txn)`
$DIR/sdk/compatibility/src/lib.rs: `.wait_for_signed_transaction(&txn, None, None)`
$DIR/sdk/compatibility/src/lib.rs: `.get_account(account.address())`
$DIR/sdk/compatibility/src/lib.rs: `.address()`
$DIR/sdk/compatibility/src/lib.rs: `.into_inner()`
$DIR/sdk/compatibility/src/lib.rs: `.find(|b| b.currency == currency)`
$DIR/sdk/compatibility/src/lib.rs: `.get_account(account_2.address())`
$DIR/sdk/compatibility/src/lib.rs: `.address()`
$DIR/sdk/compatibility/src/lib.rs: `.into_inner()`
$DIR/sdk/compatibility/src/lib.rs: `.find(|b| b.currency == currency)`
$DIR/sdk/compatibility/src/lib.rs: `.client()`
$DIR/sdk/compatibility/src/lib.rs: `.random_account()`
$DIR/sdk/compatibility/src/lib.rs: `.coffer()`
$DIR/sdk/compatibility/src/lib.rs: `.fund(currency, account.authentication_key(), amount)`
$DIR/sdk/compatibility/src/lib.rs: `.authentication_key()`
$DIR/sdk/compatibility/src/lib.rs: `.sign_with_transaction_builder(
        env.transaction_factory()
            .rotate_authentication_key(rotated_key.authentication_key()),
    )`
$DIR/sdk/compatibility/src/lib.rs: `.transaction_factory()`
$DIR/sdk/compatibility/src/lib.rs: `.rotate_authentication_key(rotated_key.authentication_key())`
$DIR/sdk/compatibility/src/lib.rs: `.authentication_key()`
$DIR/sdk/compatibility/src/lib.rs: `.submit(&txn)`
$DIR/sdk/compatibility/src/lib.rs: `.wait_for_signed_transaction(&txn, None, None)`
$DIR/sdk/compatibility/src/lib.rs: `.get_account(account.address())`
$DIR/sdk/compatibility/src/lib.rs: `.address()`
$DIR/sdk/compatibility/src/lib.rs: `.into_inner()`
$DIR/sdk/compatibility/src/lib.rs: `.rotate_key(rotated_key)`
$DIR/sdk/compatibility/src/lib.rs: `.sign_with_transaction_builder(
        env.transaction_factory()
            .rotate_authentication_key(old_key.authentication_key()),
    )`
$DIR/sdk/compatibility/src/lib.rs: `.transaction_factory()`
$DIR/sdk/compatibility/src/lib.rs: `.rotate_authentication_key(old_key.authentication_key())`
$DIR/sdk/compatibility/src/lib.rs: `.authentication_key()`
$DIR/sdk/compatibility/src/lib.rs: `.submit(&txn)`
$DIR/sdk/compatibility/src/lib.rs: `.wait_for_signed_transaction(&txn, None, None)`
$DIR/sdk/compatibility/src/lib.rs: `.get_account(account.address())`
$DIR/sdk/compatibility/src/lib.rs: `.address()`
$DIR/sdk/compatibility/src/lib.rs: `.into_inner()`
$DIR/sdk/compatibility/src/lib.rs: `.client()`
$DIR/sdk/compatibility/src/lib.rs: `.get_metadata()`
$DIR/sdk/compatibility/src/lib.rs: `.into_inner()`
$DIR/sdk/compatibility/src/lib.rs: `.random_account()`
$DIR/sdk/compatibility/src/lib.rs: `.coffer()`
$DIR/sdk/compatibility/src/lib.rs: `.fund(currency, account.authentication_key(), start_amount)`
$DIR/sdk/compatibility/src/lib.rs: `.authentication_key()`
$DIR/sdk/compatibility/src/lib.rs: `.random_account()`
$DIR/sdk/compatibility/src/lib.rs: `.coffer()`
$DIR/sdk/compatibility/src/lib.rs: `.fund(currency, account_2.authentication_key(), start_amount)`
$DIR/sdk/compatibility/src/lib.rs: `.authentication_key()`
$DIR/sdk/compatibility/src/lib.rs: `.sign_with_transaction_builder(env.transaction_factory().peer_to_peer(
        currency,
        account_2.address(),
        transfer_amount,
    ))`
$DIR/sdk/compatibility/src/lib.rs: `.transaction_factory()`
$DIR/sdk/compatibility/src/lib.rs: `.peer_to_peer(
        currency,
        account_2.address(),
        transfer_amount,
    )`
$DIR/sdk/compatibility/src/lib.rs: `.address()`
$DIR/sdk/compatibility/src/lib.rs: `.submit(&txn)`
$DIR/sdk/compatibility/src/lib.rs: `.sign_with_transaction_builder(
        env.transaction_factory().rotate_dual_attestation_info(
            "https://example.com".as_bytes().to_vec(),
            dual_attestation_public_key.as_bytes().to_vec(),
        ),
    )`
$DIR/sdk/compatibility/src/lib.rs: `.transaction_factory()`
$DIR/sdk/compatibility/src/lib.rs: `.rotate_dual_attestation_info(
            "https://example.com".as_bytes().to_vec(),
            dual_attestation_public_key.as_bytes().to_vec(),
        )`
$DIR/sdk/compatibility/src/lib.rs: `.submit(&txn)`
$DIR/sdk/compatibility/src/lib.rs: `.wait_for_signed_transaction(&txn, None, None)`
$DIR/sdk/compatibility/src/lib.rs: `.address()`
$DIR/sdk/compatibility/src/lib.rs: `.sign(message.message(), &dual_attestation_public_key)`
$DIR/sdk/compatibility/src/lib.rs: `.message()`
$DIR/sdk/compatibility/src/lib.rs: `.to_bytes()`
$DIR/sdk/compatibility/src/lib.rs: `.sign_with_transaction_builder(
        env.transaction_factory().peer_to_peer_with_metadata(
            currency,
            account_2.address(),
            transfer_amount,
            metadata.as_bytes().to_vec(),
            sig,
        ),
    )`
$DIR/sdk/compatibility/src/lib.rs: `.transaction_factory()`
$DIR/sdk/compatibility/src/lib.rs: `.peer_to_peer_with_metadata(
            currency,
            account_2.address(),
            transfer_amount,
            metadata.as_bytes().to_vec(),
            sig,
        )`
$DIR/sdk/compatibility/src/lib.rs: `.address()`
$DIR/sdk/compatibility/src/lib.rs: `.submit(&txn)`
$DIR/sdk/compatibility/src/lib.rs: `.wait_for_signed_transaction(&txn, None, None)`
$DIR/sdk/compatibility/src/lib.rs: `.get_account(account.address())`
$DIR/sdk/compatibility/src/lib.rs: `.address()`
$DIR/sdk/compatibility/src/lib.rs: `.into_inner()`
$DIR/sdk/compatibility/src/lib.rs: `.find(|b| b.currency == currency)`
$DIR/sdk/compatibility/src/lib.rs: `.get_account(account_2.address())`
$DIR/sdk/compatibility/src/lib.rs: `.address()`
$DIR/sdk/compatibility/src/lib.rs: `.into_inner()`
$DIR/sdk/compatibility/src/lib.rs: `.find(|b| b.currency == currency)`
$DIR/sdk/compatibility/src/lib.rs: `.client()`
$DIR/sdk/compatibility/src/lib.rs: `.get_metadata()`
$DIR/sdk/compatibility/src/lib.rs: `.into_inner()`
$DIR/sdk/compatibility/src/lib.rs: `.random_account()`
$DIR/sdk/compatibility/src/lib.rs: `.coffer()`
$DIR/sdk/compatibility/src/lib.rs: `.fund(currency, account.authentication_key(), start_amount)`
$DIR/sdk/compatibility/src/lib.rs: `.authentication_key()`
$DIR/sdk/compatibility/src/lib.rs: `.random_account()`
$DIR/sdk/compatibility/src/lib.rs: `.sign_with_transaction_builder(env.transaction_factory().create_child_vasp_account(
            currency,
            child_account.authentication_key(),
            false,
            0,
        ))`
$DIR/sdk/compatibility/src/lib.rs: `.transaction_factory()`
$DIR/sdk/compatibility/src/lib.rs: `.create_child_vasp_account(
            currency,
            child_account.authentication_key(),
            false,
            0,
        )`
$DIR/sdk/compatibility/src/lib.rs: `.authentication_key()`
$DIR/sdk/compatibility/src/lib.rs: `.submit(&txn)`
$DIR/sdk/compatibility/src/lib.rs: `.wait_for_signed_transaction(&txn, None, None)`
$DIR/sdk/compatibility/src/lib.rs: `.sign_with_transaction_builder(env.transaction_factory().peer_to_peer(
        currency,
        child_account.address(),
        transfer_amount,
    ))`
$DIR/sdk/compatibility/src/lib.rs: `.transaction_factory()`
$DIR/sdk/compatibility/src/lib.rs: `.peer_to_peer(
        currency,
        child_account.address(),
        transfer_amount,
    )`
$DIR/sdk/compatibility/src/lib.rs: `.address()`
$DIR/sdk/compatibility/src/lib.rs: `.submit(&txn)`
$DIR/sdk/compatibility/src/lib.rs: `.wait_for_signed_transaction(&txn, None, None)`
$DIR/sdk/compatibility/src/lib.rs: `.get_account(account.address())`
$DIR/sdk/compatibility/src/lib.rs: `.address()`
$DIR/sdk/compatibility/src/lib.rs: `.into_inner()`
$DIR/sdk/compatibility/src/lib.rs: `.find(|b| b.currency == currency)`
$DIR/sdk/compatibility/src/lib.rs: `.get_account(child_account.address())`
$DIR/sdk/compatibility/src/lib.rs: `.address()`
$DIR/sdk/compatibility/src/lib.rs: `.into_inner()`
$DIR/sdk/compatibility/src/lib.rs: `.find(|b| b.currency == currency)`
$DIR/sdk/offchain/src/identifier.rs: `params.push(format!("c={}", c));`
$DIR/sdk/offchain/src/identifier.rs: `params.push(format!("am={}", am));`
$DIR/sdk/offchain/src/identifier.rs: `hex_address.push_str(ACCOUNT_ADDRESS);`
$DIR/sdk/offchain/src/identifier.rs: `.concat()`
$DIR/sdk/offchain/src/identifier.rs: `.to_base32()`
$DIR/sdk/offchain/src/identifier.rs: `.concat()`
$DIR/sdk/offchain/src/identifier.rs: `.push(format!("c={}", c))`
$DIR/sdk/offchain/src/identifier.rs: `.push(format!("am={}", am))`
$DIR/sdk/offchain/src/identifier.rs: `.is_empty()`
$DIR/sdk/offchain/src/identifier.rs: `.push_str(ACCOUNT_ADDRESS)`
$DIR/sdk/offchain/src/identifier.rs: `.to_base32()`
$DIR/sdk/offchain/src/jws.rs: `base64::encode_config_buf(
        serde_json::to_string(&Header {
            alg: JwsAlgorithm::EdDSA,
        })
        .map_err(JwsError::json)?,
        base64::URL_SAFE,
        &mut msg,
    );`
$DIR/sdk/offchain/src/jws.rs: `msg.push('.');`
$DIR/sdk/offchain/src/jws.rs: `base64::encode_config_buf(
        serde_json::to_string(t).map_err(JwsError::json)?,
        base64::URL_SAFE,
        &mut msg,
    );`
$DIR/sdk/offchain/src/jws.rs: `msg.push('.');`
$DIR/sdk/offchain/src/jws.rs: `base64::encode_config_buf(signature, base64::URL_SAFE, &mut msg);`
$DIR/sdk/offchain/src/jws.rs: `serde_json::from_slice::<Header>(&header).map_err(JwsError::json)?;`
$DIR/sdk/offchain/src/jws.rs: `verifier
        .verify(signing_msg.as_bytes(), &signature)
        .map_err(JwsError::signature)?;`
$DIR/sdk/offchain/src/jws.rs: `.map_err(JwsError::json)`
$DIR/sdk/offchain/src/jws.rs: `.push('.')`
$DIR/sdk/offchain/src/jws.rs: `.map_err(JwsError::json)`
$DIR/sdk/offchain/src/jws.rs: `.try_sign(msg.as_bytes())`
$DIR/sdk/offchain/src/jws.rs: `.map_err(JwsError::signature)`
$DIR/sdk/offchain/src/jws.rs: `.push('.')`
$DIR/sdk/offchain/src/jws.rs: `.map_err(JwsError::jws)`
$DIR/sdk/offchain/src/jws.rs: `.map_err(JwsError::jws)`
$DIR/sdk/offchain/src/jws.rs: `.map_err(JwsError::json)`
$DIR/sdk/offchain/src/jws.rs: `.map_err(JwsError::jws)`
$DIR/sdk/offchain/src/jws.rs: `.map_err(JwsError::signature)`
$DIR/sdk/offchain/src/jws.rs: `.verify(signing_msg.as_bytes(), &signature)`
$DIR/sdk/offchain/src/jws.rs: `.map_err(JwsError::signature)`
$DIR/sdk/offchain/src/jws.rs: `.rfind('.')`
$DIR/sdk/offchain/src/jws.rs: `.ok_or_else(|| JwsError::jws("missing section separator '.'"))`
$DIR/sdk/offchain/src/jws.rs: `.split_at(index)`
$DIR/sdk/offchain/src/types.rs: `serde_json::from_value::<KycDataObjectVersion>(invalid_version).unwrap_err();`
$DIR/secure/key-manager/src/tests.rs: `self.time.advance_secs(1);`
$DIR/secure/key-manager/src/tests.rs: `block.insert(0, prologue);`
$DIR/secure/key-manager/src/tests.rs: `self.executor
            .commit_blocks(vec![block_id], ledger_info_with_sigs)
            .unwrap();`
$DIR/secure/key-manager/src/tests.rs: `executor_test_helpers::bootstrap_genesis::<DiemVM>(&db_rw, get_genesis_txn(config).unwrap())
        .expect("Failed to execute genesis");`
$DIR/secure/key-manager/src/tests.rs: `sec_storage.set(OWNER_KEY, owner_key.private_key()).unwrap();`
$DIR/secure/key-manager/src/tests.rs: `sec_storage.set(OWNER_ACCOUNT, owner_account).unwrap();`
$DIR/secure/key-manager/src/tests.rs: `sec_storage
        .set(OPERATOR_KEY, operator_key.private_key())
        .unwrap();`
$DIR/secure/key-manager/src/tests.rs: `sec_storage.set(OPERATOR_ACCOUNT, operator_account).unwrap();`
$DIR/secure/key-manager/src/tests.rs: `sec_storage
        .set(crate::CONSENSUS_KEY, consensus_prikey)
        .unwrap();`
$DIR/secure/key-manager/src/tests.rs: `server.spawn(async move {
        while let Some((txn, cb)) = mp_events.next().await {
            let vm_status = MockVMValidator.validate_transaction(txn).unwrap().status();
            let result = if vm_status.is_some() {
                (MempoolStatus::new(MempoolStatusCode::VmError), vm_status)
            } else {
                (MempoolStatus::new(MempoolStatusCode::Accepted), None)
            };
            cb.send(Ok(result)).unwrap();
        }
    });`
$DIR/secure/key-manager/src/tests.rs: `cb.send(Ok(result)).unwrap();`
$DIR/secure/key-manager/src/tests.rs: `node.diem.last_reconfiguration().unwrap();`
$DIR/secure/key-manager/src/tests.rs: `node.diem.retrieve_validator_set().unwrap();`
$DIR/secure/key-manager/src/tests.rs: `node.diem.retrieve_validator_config(owner_account).unwrap();`
$DIR/secure/key-manager/src/tests.rs: `node.diem.retrieve_validator_info(owner_account).unwrap();`
$DIR/secure/key-manager/src/tests.rs: `node.diem.retrieve_diem_block_resource().unwrap();`
$DIR/secure/key-manager/src/tests.rs: `node.time.advance_secs(301);`
$DIR/secure/key-manager/src/tests.rs: `node.key_manager.compare_storage_to_config().unwrap();`
$DIR/secure/key-manager/src/tests.rs: `node.key_manager.compare_info_to_config().unwrap();`
$DIR/secure/key-manager/src/tests.rs: `node.time.advance_secs(301);`
$DIR/secure/key-manager/src/tests.rs: `node.time
        .advance_secs(key_manager_config.rotation_period_secs);`
$DIR/secure/key-manager/src/tests.rs: `node.update_diem_timestamp();`
$DIR/secure/key-manager/src/tests.rs: `node.update_diem_timestamp();`
$DIR/secure/key-manager/src/tests.rs: `node.key_manager.execute_once().unwrap();`
$DIR/secure/key-manager/src/tests.rs: `node.update_diem_timestamp();`
$DIR/secure/key-manager/src/tests.rs: `node.time
        .advance_secs(key_manager_config.txn_expiration_secs);`
$DIR/secure/key-manager/src/tests.rs: `node.update_diem_timestamp();`
$DIR/secure/key-manager/src/tests.rs: `node.update_diem_timestamp();`
$DIR/secure/key-manager/src/tests.rs: `node.key_manager.execute_once().unwrap();`
$DIR/secure/key-manager/src/tests.rs: `node.update_diem_timestamp();`
$DIR/secure/key-manager/src/tests.rs: `node.update_diem_timestamp();`
$DIR/secure/key-manager/src/tests.rs: `node.key_manager.storage.reset_and_clear().unwrap();`
$DIR/secure/key-manager/src/tests.rs: `node.update_diem_timestamp();`
$DIR/secure/key-manager/src/tests.rs: `node.update_diem_timestamp();`
$DIR/secure/key-manager/src/tests.rs: `node.update_diem_timestamp();`
$DIR/secure/key-manager/src/tests.rs: `node.update_diem_timestamp();`
$DIR/secure/key-manager/src/tests.rs: `node.update_diem_timestamp();`
$DIR/secure/key-manager/src/tests.rs: `node.key_manager
        .storage
        .set(CONSENSUS_KEY, "invalid value")
        .unwrap();`
$DIR/secure/key-manager/src/tests.rs: `node.key_manager
        .storage
        .set(OWNER_ACCOUNT, "00000000000000000000000000000001")
        .unwrap();`
$DIR/secure/key-manager/src/tests.rs: `.time.advance_secs(1)`
$DIR/secure/key-manager/src/tests.rs: `.time.now_unix_time()`
$DIR/secure/key-manager/src/tests.rs: `.as_micros()`
$DIR/secure/key-manager/src/tests.rs: `.get_account_from_storage(OWNER_ACCOUNT)`
$DIR/secure/key-manager/src/tests.rs: `.insert(0, prologue)`
$DIR/secure/key-manager/src/tests.rs: `.executor
            .execute_block((block_id, block), self.executor.committed_block_id())`
$DIR/secure/key-manager/src/tests.rs: `.executor.committed_block_id()`
$DIR/secure/key-manager/src/tests.rs: `.root_hash()`
$DIR/secure/key-manager/src/tests.rs: `.version()`
$DIR/secure/key-manager/src/tests.rs: `.epoch_state()`
$DIR/secure/key-manager/src/tests.rs: `.executor
            .commit_blocks(vec![block_id], ledger_info_with_sigs)`
$DIR/secure/key-manager/src/tests.rs: `.key_manager
            .storage
            .get::<AccountAddress>(account_name)`
$DIR/secure/key-manager/src/tests.rs: `.key_manager
            .storage
            .get::<Ed25519PrivateKey>(key_name)`
$DIR/secure/key-manager/src/tests.rs: `.get_validator_set()`
$DIR/secure/key-manager/src/tests.rs: `.into()`
$DIR/secure/key-manager/src/tests.rs: `.get_diem_block_resource()`
$DIR/secure/key-manager/src/tests.rs: `.into()`
$DIR/secure/key-manager/src/tests.rs: `.drain(..)`
$DIR/secure/key-manager/src/tests.rs: `.storage.dir()`
$DIR/secure/key-manager/src/tests.rs: `.into_mock()`
$DIR/secure/key-manager/src/tests.rs: `.set(OWNER_KEY, owner_key.private_key())`
$DIR/secure/key-manager/src/tests.rs: `.private_key()`
$DIR/secure/key-manager/src/tests.rs: `.set(OWNER_ACCOUNT, owner_account)`
$DIR/secure/key-manager/src/tests.rs: `.set(OPERATOR_KEY, operator_key.private_key())`
$DIR/secure/key-manager/src/tests.rs: `.private_key()`
$DIR/secure/key-manager/src/tests.rs: `.public_key()`
$DIR/secure/key-manager/src/tests.rs: `.set(OPERATOR_ACCOUNT, operator_account)`
$DIR/secure/key-manager/src/tests.rs: `.private_key()`
$DIR/secure/key-manager/src/tests.rs: `.set(crate::CONSENSUS_KEY, consensus_prikey)`
$DIR/secure/key-manager/src/tests.rs: `.parse()`
$DIR/secure/key-manager/src/tests.rs: `.spawn(async move {
        while let Some((txn, cb)) = mp_events.next().await {
            let vm_status = MockVMValidator.validate_transaction(txn).unwrap().status();
            let result = if vm_status.is_some() {
                (MempoolStatus::new(MempoolStatusCode::VmError), vm_status)
            } else {
                (MempoolStatus::new(MempoolStatusCode::Accepted), None)
            };
            cb.send(Ok(result)).unwrap();
        }
    })`
$DIR/secure/key-manager/src/tests.rs: `.next()`
$DIR/secure/key-manager/src/tests.rs: `.validate_transaction(txn)`
$DIR/secure/key-manager/src/tests.rs: `.status()`
$DIR/secure/key-manager/src/tests.rs: `.is_some()`
$DIR/secure/key-manager/src/tests.rs: `.send(Ok(result))`
$DIR/secure/key-manager/src/tests.rs: `.get_key_from_storage(CONSENSUS_KEY)`
$DIR/secure/key-manager/src/tests.rs: `.public_key()`
$DIR/secure/key-manager/src/tests.rs: `.get_key_from_storage(OPERATOR_KEY)`
$DIR/secure/key-manager/src/tests.rs: `.public_key()`
$DIR/secure/key-manager/src/tests.rs: `.time.advance_secs(301)`
$DIR/secure/key-manager/src/tests.rs: `.time.now_secs()`
$DIR/secure/key-manager/src/tests.rs: `.sign(&operator_privkey, operator_privkey.public_key())`
$DIR/secure/key-manager/src/tests.rs: `.public_key()`
$DIR/secure/key-manager/src/tests.rs: `.into_inner()`
$DIR/secure/key-manager/src/tests.rs: `.key_manager.compare_storage_to_config()`
$DIR/secure/key-manager/src/tests.rs: `.key_manager.compare_info_to_config()`
$DIR/secure/key-manager/src/tests.rs: `.key_manager.rotate_consensus_key()`
$DIR/secure/key-manager/src/tests.rs: `.time.advance_secs(301)`
$DIR/secure/key-manager/src/tests.rs: `.diem.take_all_transactions()`
$DIR/secure/key-manager/src/tests.rs: `.diem.take_all_transactions()`
$DIR/secure/key-manager/src/tests.rs: `.time
        .advance_secs(key_manager_config.rotation_period_secs)`
$DIR/secure/key-manager/src/tests.rs: `.update_diem_timestamp()`
$DIR/secure/key-manager/src/tests.rs: `.update_diem_timestamp()`
$DIR/secure/key-manager/src/tests.rs: `.key_manager.execute_once()`
$DIR/secure/key-manager/src/tests.rs: `.update_diem_timestamp()`
$DIR/secure/key-manager/src/tests.rs: `.time
        .advance_secs(key_manager_config.txn_expiration_secs)`
$DIR/secure/key-manager/src/tests.rs: `.update_diem_timestamp()`
$DIR/secure/key-manager/src/tests.rs: `.update_diem_timestamp()`
$DIR/secure/key-manager/src/tests.rs: `.key_manager.execute_once()`
$DIR/secure/key-manager/src/tests.rs: `.update_diem_timestamp()`
$DIR/secure/key-manager/src/tests.rs: `.key_manager.execute_once()`
$DIR/secure/key-manager/src/tests.rs: `.update_diem_timestamp()`
$DIR/secure/key-manager/src/tests.rs: `.key_manager.storage.reset_and_clear()`
$DIR/secure/key-manager/src/tests.rs: `.key_manager.execute_once()`
$DIR/secure/key-manager/src/tests.rs: `.update_diem_timestamp()`
$DIR/secure/key-manager/src/tests.rs: `.public_key()`
$DIR/secure/key-manager/src/tests.rs: `.to_bytes()`
$DIR/secure/key-manager/src/tests.rs: `.time.now_secs()`
$DIR/secure/key-manager/src/tests.rs: `.sign(&operator_privkey, operator_privkey.public_key())`
$DIR/secure/key-manager/src/tests.rs: `.public_key()`
$DIR/secure/key-manager/src/tests.rs: `.into_inner()`
$DIR/secure/key-manager/src/tests.rs: `.update_diem_timestamp()`
$DIR/secure/key-manager/src/tests.rs: `.update_diem_timestamp()`
$DIR/secure/key-manager/src/tests.rs: `.key_manager.rotate_consensus_key()`
$DIR/secure/key-manager/src/tests.rs: `.update_diem_timestamp()`
$DIR/secure/key-manager/src/tests.rs: `.update_diem_timestamp()`
$DIR/secure/key-manager/src/tests.rs: `.key_manager
        .storage
        .set(CONSENSUS_KEY, "invalid value")`
$DIR/secure/key-manager/src/tests.rs: `.key_manager.execute_once()`
$DIR/secure/key-manager/src/tests.rs: `.key_manager
        .storage
        .set(OWNER_ACCOUNT, "00000000000000000000000000000001")`
$DIR/secure/key-manager/src/tests.rs: `.key_manager.execute_once()`
$DIR/secure/net/src/lib.rs: `self.stream = None;`
$DIR/secure/net/src/lib.rs: `stream.shutdown()?;`
$DIR/secure/net/src/lib.rs: `self.stream = None;`
$DIR/secure/net/src/lib.rs: `thread::sleep(sleeptime);`
$DIR/secure/net/src/lib.rs: `stream = TcpStream::connect_timeout(&self.server, timeout);`
$DIR/secure/net/src/lib.rs: `stream.set_nodelay(true)?;`
$DIR/secure/net/src/lib.rs: `self.stream = Some(NetworkStream::new(stream, self.server, self.timeout_ms));`
$DIR/secure/net/src/lib.rs: `client.write(&data).unwrap();`
$DIR/secure/net/src/lib.rs: `server.write(&data).unwrap();`
$DIR/secure/net/src/lib.rs: `client.write(&data).unwrap();`
$DIR/secure/net/src/lib.rs: `client.shutdown().unwrap();`
$DIR/secure/net/src/lib.rs: `client.write(&data).unwrap();`
$DIR/secure/net/src/lib.rs: `client.write(&data).unwrap();`
$DIR/secure/net/src/lib.rs: `server.shutdown().unwrap();`
$DIR/secure/net/src/lib.rs: `while client.write(&data).is_ok() {}`
$DIR/secure/net/src/lib.rs: `client.write(&data).unwrap();`
$DIR/secure/net/src/lib.rs: `client.write(&data1).unwrap();`
$DIR/secure/net/src/lib.rs: `client.write(&data2).unwrap();`
$DIR/secure/net/src/lib.rs: `client.write(&data1).unwrap();`
$DIR/secure/net/src/lib.rs: `server.read().unwrap_err();`
$DIR/secure/net/src/lib.rs: `client2.write(&data2).unwrap();`
$DIR/secure/net/src/lib.rs: `client.write(&data1).unwrap();`
$DIR/secure/net/src/lib.rs: `client.read().unwrap_err();`
$DIR/secure/net/src/lib.rs: `server.listener = None;`
$DIR/secure/net/src/lib.rs: `client.write(&data2).unwrap();`
$DIR/secure/net/src/lib.rs: `.with_label_values(&[service, mode.as_str(), method.as_str(), result.as_str()])`
$DIR/secure/net/src/lib.rs: `.read()`
$DIR/secure/net/src/lib.rs: `.stream.take()`
$DIR/secure/net/src/lib.rs: `.ok_or(Error::NoActiveStream)`
$DIR/secure/net/src/lib.rs: `.shutdown()`
$DIR/secure/net/src/lib.rs: `.write(data)`
$DIR/secure/net/src/lib.rs: `.stream.is_none()`
$DIR/secure/net/src/lib.rs: `.set_nodelay(true)`
$DIR/secure/net/src/lib.rs: `.is_ok()`
$DIR/secure/storage/github/src/lib.rs: `self.delete_directory(&file[..file.len() - 1])?;`
$DIR/secure/storage/github/src/lib.rs: `self.delete_file(&file)?;`
$DIR/secure/storage/github/src/lib.rs: `request
            .set("Authorization", &format!("token {}", self.token))
            .set(ACCEPT_HEADER, ACCEPT_VALUE)
            .timeout_connect(TIMEOUT);`
$DIR/secure/storage/github/src/lib.rs: `request.set_proxy(ureq::Proxy::new(proxy_url).expect("Unable to parse proxy_url"));`
$DIR/secure/storage/github/src/lib.rs: `github.put(path, &value1_encoded).unwrap();`
$DIR/secure/storage/github/src/lib.rs: `github.put(path, &value2_encoded).unwrap();`
$DIR/secure/storage/github/src/lib.rs: `github.delete_file(path).unwrap();`
$DIR/secure/storage/github/src/lib.rs: `github.put(path1, &value1_encoded).unwrap();`
$DIR/secure/storage/github/src/lib.rs: `github.put(path2, &value2_encoded).unwrap();`
$DIR/secure/storage/github/src/lib.rs: `github.delete_file(path1).unwrap();`
$DIR/secure/storage/github/src/lib.rs: `github.get_directory(path1_root).unwrap_err();`
$DIR/secure/storage/github/src/lib.rs: `github.delete_file(path2).unwrap();`
$DIR/secure/storage/github/src/lib.rs: `github.put(file0, &value_encoded).unwrap();`
$DIR/secure/storage/github/src/lib.rs: `github.put(file1, &value_encoded).unwrap();`
$DIR/secure/storage/github/src/lib.rs: `github.delete_directory(root).unwrap();`
$DIR/secure/storage/github/src/lib.rs: `github.get_file(file0).unwrap_err();`
$DIR/secure/storage/github/src/lib.rs: `.send_json(
                json!({ "branch": self.branch.to_string(), "message": "diem-secure", "sha": hash }),
            )`
$DIR/secure/storage/github/src/lib.rs: `.status()`
$DIR/secure/storage/github/src/lib.rs: `.into()`
$DIR/secure/storage/github/src/lib.rs: `.trim_end_matches('/')`
$DIR/secure/storage/github/src/lib.rs: `.ends_with('/')`
$DIR/secure/storage/github/src/lib.rs: `.delete_directory(&file[..file.len() - 1])`
$DIR/secure/storage/github/src/lib.rs: `.len()`
$DIR/secure/storage/github/src/lib.rs: `.delete_file(&file)`
$DIR/secure/storage/github/src/lib.rs: `.call()`
$DIR/secure/storage/github/src/lib.rs: `.status()`
$DIR/secure/storage/github/src/lib.rs: `.into_iter()`
$DIR/secure/storage/github/src/lib.rs: `.map(|b| b.name)`
$DIR/secure/storage/github/src/lib.rs: `.collect()`
$DIR/secure/storage/github/src/lib.rs: `.into()`
$DIR/secure/storage/github/src/lib.rs: `.get_internal(path)`
$DIR/secure/storage/github/src/lib.rs: `.into_iter()`
$DIR/secure/storage/github/src/lib.rs: `.map(|entry| {
                if entry.content_type == "dir" {
                    entry.path + "/"
                } else {
                    entry.path
                }
            })`
$DIR/secure/storage/github/src/lib.rs: `.collect()`
$DIR/secure/storage/github/src/lib.rs: `.len()`
$DIR/secure/storage/github/src/lib.rs: `.ok_or_else(|| Error::InternalError("No content found".into()))`
$DIR/secure/storage/github/src/lib.rs: `.into()`
$DIR/secure/storage/github/src/lib.rs: `.lines()`
$DIR/secure/storage/github/src/lib.rs: `.collect::<Vec<_>>()`
$DIR/secure/storage/github/src/lib.rs: `.join("")`
$DIR/secure/storage/github/src/lib.rs: `.send_json(json)`
$DIR/secure/storage/github/src/lib.rs: `.status()`
$DIR/secure/storage/github/src/lib.rs: `.into()`
$DIR/secure/storage/github/src/lib.rs: `.set("Authorization", &format!("token {}", self.token))`
$DIR/secure/storage/github/src/lib.rs: `.set(ACCEPT_HEADER, ACCEPT_VALUE)`
$DIR/secure/storage/github/src/lib.rs: `.timeout_connect(TIMEOUT)`
$DIR/secure/storage/github/src/lib.rs: `.get_host()`
$DIR/secure/storage/github/src/lib.rs: `.https(&host)`
$DIR/secure/storage/github/src/lib.rs: `.set_proxy(ureq::Proxy::new(proxy_url).expect("Unable to parse proxy_url"))`
$DIR/secure/storage/github/src/lib.rs: `.get_url(path)`
$DIR/secure/storage/github/src/lib.rs: `.call()`
$DIR/secure/storage/github/src/lib.rs: `.status()`
$DIR/secure/storage/github/src/lib.rs: `.map_err(|e| e.into())`
$DIR/secure/storage/github/src/lib.rs: `.into()`
$DIR/secure/storage/github/src/lib.rs: `.map_err(|e| e.into())`
$DIR/secure/storage/github/src/lib.rs: `.into()`
$DIR/secure/storage/github/src/lib.rs: `.into()`
$DIR/secure/storage/github/src/lib.rs: `.into()`
$DIR/secure/storage/github/src/lib.rs: `.get_internal(path)`
$DIR/secure/storage/github/src/lib.rs: `.find(|entry| entry.path == path)`
$DIR/secure/storage/github/src/lib.rs: `.into()`
$DIR/secure/storage/github/src/lib.rs: `.into()`
$DIR/secure/storage/github/src/lib.rs: `.into()`
$DIR/secure/storage/github/src/lib.rs: `.into()`
$DIR/secure/storage/github/src/lib.rs: `.into()`
$DIR/secure/storage/github/src/lib.rs: `.into()`
$DIR/secure/storage/github/src/lib.rs: `.into()`
$DIR/secure/storage/github/src/lib.rs: `.into()`
$DIR/secure/storage/github/src/lib.rs: `.into()`
$DIR/secure/storage/github/src/lib.rs: `.into()`
$DIR/secure/storage/github/src/lib.rs: `.into()`
$DIR/secure/storage/github/src/lib.rs: `.into()`
$DIR/secure/storage/github/src/lib.rs: `.into()`
$DIR/secure/storage/github/src/lib.rs: `.into()`
$DIR/secure/storage/github/src/lib.rs: `.into()`
$DIR/secure/storage/github/src/lib.rs: `.into()`
$DIR/secure/storage/src/namespaced.rs: `default.set(key, 0).unwrap();`
$DIR/secure/storage/src/namespaced.rs: `nss0.set(key, 1).unwrap();`
$DIR/secure/storage/src/namespaced.rs: `nss1.set(key, 2).unwrap();`
$DIR/secure/storage/src/namespaced.rs: `nss.set(key, 1).unwrap();`
$DIR/secure/storage/src/namespaced.rs: `default.get::<u64>(key).unwrap_err();`
$DIR/secure/storage/src/namespaced.rs: `.namespaced(key)`
$DIR/secure/storage/src/namespaced.rs: `.path()`
$DIR/secure/storage/src/namespaced.rs: `.path()`
$DIR/secure/storage/src/tests/github.rs: `.into()`
$DIR/secure/storage/src/tests/github.rs: `.into()`
$DIR/secure/storage/src/tests/github.rs: `.into()`
$DIR/secure/storage/src/tests/github.rs: `.into()`
$DIR/secure/storage/src/tests/on_disk.rs: `.path()`
$DIR/secure/storage/src/tests/vault.rs: `storage.reset_and_clear().unwrap();`
$DIR/secure/storage/src/tests/vault.rs: `test();`
$DIR/secure/storage/src/tests/vault.rs: `storage.reset_and_clear().unwrap();`
$DIR/secure/storage/src/tests/vault.rs: `.is_none()`
$DIR/secure/storage/src/tests/vault.rs: `.reset_and_clear()`
$DIR/secure/storage/src/tests/vault.rs: `.reset_and_clear()`
$DIR/secure/storage/src/tests/vault.rs: `.into()`
$DIR/secure/storage/vault/src/dev.rs: `vr.client().unsealed().unwrap();`
$DIR/secure/storage/vault/src/dev.rs: `Client::new(host, ROOT_TOKEN.to_string(), None, None, None)
            .unsealed()
            .unwrap();`
$DIR/secure/storage/vault/src/dev.rs: `.unsealed()`
$DIR/secure/storage/vault/src/dev.rs: `.unsealed()`
$DIR/state-sync/inter-component/consensus-notifications/src/lib.rs: `consensus_listener.notification_receiver.close();`
$DIR/state-sync/inter-component/consensus-notifications/src/lib.rs: `std::thread::sleep(Duration::from_millis(1000));`
$DIR/state-sync/inter-component/consensus-notifications/src/lib.rs: `.is_empty()`
$DIR/state-sync/inter-component/consensus-notifications/src/lib.rs: `.send(commit_notification)`
$DIR/state-sync/inter-component/consensus-notifications/src/lib.rs: `.send(sync_notification)`
$DIR/state-sync/inter-component/consensus-notifications/src/lib.rs: `.callback
            .send(ConsensusNotificationResponse { result })`
$DIR/state-sync/inter-component/consensus-notifications/src/lib.rs: `.callback
            .send(ConsensusNotificationResponse { result })`
$DIR/state-sync/inter-component/consensus-notifications/src/lib.rs: `.enter()`
$DIR/state-sync/inter-component/consensus-notifications/src/lib.rs: `.notification_receiver.close()`
$DIR/state-sync/inter-component/consensus-notifications/src/lib.rs: `.enter()`
$DIR/state-sync/inter-component/consensus-notifications/src/lib.rs: `.enter()`
$DIR/state-sync/inter-component/consensus-notifications/src/lib.rs: `.select_next_some()`
$DIR/state-sync/inter-component/consensus-notifications/src/lib.rs: `.now_or_never()`
$DIR/state-sync/inter-component/consensus-notifications/src/lib.rs: `.select_next_some()`
$DIR/state-sync/inter-component/consensus-notifications/src/lib.rs: `.now_or_never()`
$DIR/state-sync/inter-component/consensus-notifications/src/lib.rs: `.enter()`
$DIR/state-sync/inter-component/consensus-notifications/src/lib.rs: `.select_next_some()`
$DIR/state-sync/inter-component/consensus-notifications/src/lib.rs: `.now_or_never()`
$DIR/state-sync/inter-component/consensus-notifications/src/lib.rs: `.into()`
$DIR/state-sync/inter-component/consensus-notifications/src/lib.rs: `.enable_all()`
$DIR/state-sync/inter-component/consensus-notifications/src/lib.rs: `.build()`
$DIR/state-sync/inter-component/event-notifications/src/tests.rs: `notification_count += 1;`
$DIR/state-sync/inter-component/event-notifications/src/tests.rs: `last_version_received = event_notification.version.try_into().unwrap();`
$DIR/state-sync/inter-component/event-notifications/src/tests.rs: `notification_received = false;`
$DIR/state-sync/inter-component/event-notifications/src/tests.rs: `notification_count += 1;`
$DIR/state-sync/inter-component/event-notifications/src/tests.rs: `notification_received = false;`
$DIR/state-sync/inter-component/event-notifications/src/tests.rs: `block_on(event_service.notify_initial_configs(version)).unwrap();`
$DIR/state-sync/inter-component/event-notifications/src/tests.rs: `block_on(event_service.notify_events(version, events)).unwrap();`
$DIR/state-sync/inter-component/event-notifications/src/tests.rs: `db_path.create_as_dir().unwrap();`
$DIR/state-sync/inter-component/event-notifications/src/tests.rs: `bootstrap_genesis::<DiemVM>(&db_rw, &genesis_txn).unwrap();`
$DIR/state-sync/inter-component/event-notifications/src/tests.rs: `.subscribe_to_reconfigurations()`
$DIR/state-sync/inter-component/event-notifications/src/tests.rs: `.subscribe_to_reconfigurations()`
$DIR/state-sync/inter-component/event-notifications/src/tests.rs: `.subscribe_to_reconfigurations()`
$DIR/state-sync/inter-component/event-notifications/src/tests.rs: `.subscribe_to_reconfigurations()`
$DIR/state-sync/inter-component/event-notifications/src/tests.rs: `.subscribe_to_reconfigurations()`
$DIR/state-sync/inter-component/event-notifications/src/tests.rs: `.subscribe_to_events(vec![event_key_1])`
$DIR/state-sync/inter-component/event-notifications/src/tests.rs: `.subscribe_to_events(vec![event_key_1, event_key_2])`
$DIR/state-sync/inter-component/event-notifications/src/tests.rs: `.subscribe_to_events(vec![reconfig_event_key])`
$DIR/state-sync/inter-component/event-notifications/src/tests.rs: `.subscribe_to_reconfigurations()`
$DIR/state-sync/inter-component/event-notifications/src/tests.rs: `.subscribe_to_reconfigurations()`
$DIR/state-sync/inter-component/event-notifications/src/tests.rs: `.subscribe_to_events(vec![event_key_1])`
$DIR/state-sync/inter-component/event-notifications/src/tests.rs: `.subscribe_to_events(vec![event_key_2])`
$DIR/state-sync/inter-component/event-notifications/src/tests.rs: `.subscribe_to_events(vec![event_key_1])`
$DIR/state-sync/inter-component/event-notifications/src/tests.rs: `.subscribe_to_events(vec![event_key_1, event_key_2])`
$DIR/state-sync/inter-component/event-notifications/src/tests.rs: `.subscribe_to_events(vec![event_key_2, event_key_3, event_key_4])`
$DIR/state-sync/inter-component/event-notifications/src/tests.rs: `.subscribe_to_events(vec![create_random_event_key()])`
$DIR/state-sync/inter-component/event-notifications/src/tests.rs: `.subscribe_to_reconfigurations()`
$DIR/state-sync/inter-component/event-notifications/src/tests.rs: `.select_next_some()`
$DIR/state-sync/inter-component/event-notifications/src/tests.rs: `.now_or_never()`
$DIR/state-sync/inter-component/event-notifications/src/tests.rs: `.version.try_into()`
$DIR/state-sync/inter-component/event-notifications/src/tests.rs: `.select_next_some()`
$DIR/state-sync/inter-component/event-notifications/src/tests.rs: `.now_or_never()`
$DIR/state-sync/inter-component/event-notifications/src/tests.rs: `.is_some()`
$DIR/state-sync/inter-component/event-notifications/src/tests.rs: `.select_next_some()`
$DIR/state-sync/inter-component/event-notifications/src/tests.rs: `.now_or_never()`
$DIR/state-sync/inter-component/event-notifications/src/tests.rs: `.select_next_some()`
$DIR/state-sync/inter-component/event-notifications/src/tests.rs: `.now_or_never()`
$DIR/state-sync/inter-component/event-notifications/src/tests.rs: `.on_chain_configs.configs()`
$DIR/state-sync/inter-component/event-notifications/src/tests.rs: `.notify_initial_configs(version)`
$DIR/state-sync/inter-component/event-notifications/src/tests.rs: `.notify_events(version, events)`
$DIR/state-sync/inter-component/event-notifications/src/tests.rs: `.create_as_dir()`
$DIR/state-sync/inter-component/event-notifications/src/tests.rs: `.path()`
$DIR/state-sync/inter-component/mempool-notifications/src/lib.rs: `mempool_listener.notification_receiver.close();`
$DIR/state-sync/inter-component/mempool-notifications/src/lib.rs: `transactions.push(create_user_transaction());`
$DIR/state-sync/inter-component/mempool-notifications/src/lib.rs: `.filter_map(|transaction| match transaction {
                Transaction::UserTransaction(signed_txn) => Some(CommittedTransaction {
                    sender: signed_txn.sender(),
                    sequence_number: signed_txn.sequence_number(),
                }),
                _ => None,
            })`
$DIR/state-sync/inter-component/mempool-notifications/src/lib.rs: `.sender()`
$DIR/state-sync/inter-component/mempool-notifications/src/lib.rs: `.sequence_number()`
$DIR/state-sync/inter-component/mempool-notifications/src/lib.rs: `.collect()`
$DIR/state-sync/inter-component/mempool-notifications/src/lib.rs: `.is_empty()`
$DIR/state-sync/inter-component/mempool-notifications/src/lib.rs: `.try_send(commit_notification)`
$DIR/state-sync/inter-component/mempool-notifications/src/lib.rs: `.callback
            .send(MempoolNotificationResponse::Success)`
$DIR/state-sync/inter-component/mempool-notifications/src/lib.rs: `.enter()`
$DIR/state-sync/inter-component/mempool-notifications/src/lib.rs: `.notification_receiver.close()`
$DIR/state-sync/inter-component/mempool-notifications/src/lib.rs: `.enter()`
$DIR/state-sync/inter-component/mempool-notifications/src/lib.rs: `.enter()`
$DIR/state-sync/inter-component/mempool-notifications/src/lib.rs: `.enter()`
$DIR/state-sync/inter-component/mempool-notifications/src/lib.rs: `.push(create_user_transaction())`
$DIR/state-sync/inter-component/mempool-notifications/src/lib.rs: `.enter()`
$DIR/state-sync/inter-component/mempool-notifications/src/lib.rs: `.select_next_some()`
$DIR/state-sync/inter-component/mempool-notifications/src/lib.rs: `.now_or_never()`
$DIR/state-sync/inter-component/mempool-notifications/src/lib.rs: `.enter()`
$DIR/state-sync/inter-component/mempool-notifications/src/lib.rs: `.select_next_some()`
$DIR/state-sync/inter-component/mempool-notifications/src/lib.rs: `.now_or_never()`
$DIR/state-sync/inter-component/mempool-notifications/src/lib.rs: `.public_key()`
$DIR/state-sync/inter-component/mempool-notifications/src/lib.rs: `.into()`
$DIR/state-sync/inter-component/mempool-notifications/src/lib.rs: `.sign(&raw_transaction)`
$DIR/state-sync/inter-component/mempool-notifications/src/lib.rs: `.freeze()`
$DIR/state-sync/inter-component/mempool-notifications/src/lib.rs: `.enable_all()`
$DIR/state-sync/inter-component/mempool-notifications/src/lib.rs: `.build()`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `self.request_manager.enable_peer(peer, metadata)?;`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `counters::PROCESS_CHUNK_REQUEST_COUNT
                        .with_label_values(&[
                            &peer.raw_network_id().to_string(),
                            &peer.peer_id().to_string(),
                            counters::FAIL_LABEL,
                        ])
                        .inc();`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `counters::PROCESS_CHUNK_REQUEST_COUNT
                        .with_label_values(&[
                            &peer.raw_network_id().to_string(),
                            &peer.peer_id().to_string(),
                            counters::SUCCESS_LABEL,
                        ])
                        .inc();`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `counters::STORAGE_READ_FAIL_COUNT.inc();`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `self.local_state = new_state;`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `Self::send_initialization_callback(cb_sender)?;`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `self.initialization_listener = Some(cb_sender);`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `fail_point!("state_sync_v1::process_sync_request_message", |_| {
            Err(crate::error::Error::UnexpectedError(
                "Injected error in process_sync_request_message".into(),
            ))
        });`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `self.sync_state_with_local_storage()?;`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `self.send_sync_req_callback(
                request,
                Err(Error::UnexpectedError("Sync request to old version".into())),
            )
            .await?;`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `self.sync_request = Some(request);`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `counters::COMMIT_FLOW_FAIL
                .with_label_values(&[counters::CONSENSUS_LABEL])
                .inc();`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `self.sync_state_with_local_storage()?;`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `self.update_sync_state_metrics_and_logs()?;`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `self.request_manager.remove_requests(synced_version);`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `self.request_manager.process_success_response(peer);`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `req.last_commit_timestamp = SystemTime::now();`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `self.check_initialized_or_sync_request_completed(synced_version)
            .await?;`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `counters::RECONFIG_PUBLISH_COUNT
                .with_label_values(&[counters::FAIL_LABEL])
                .inc();`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `Self::send_initialization_callback(initialization_listener)?;`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `counters::SYNC_REQUEST_RESULT
                    .with_label_values(&[counters::COMPLETE_LABEL])
                    .inc();`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `self.send_sync_req_callback(sync_request, Ok(())).await?;`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `counters::COMMIT_FLOW_FAIL
                .with_label_values(&[counters::MEMPOOL_LABEL])
                .inc();`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `counters::set_version(counters::VersionType::Synced, synced_version);`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `counters::set_version(counters::VersionType::Committed, committed_version);`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `counters::EPOCH.set(local_epoch as i64);`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `counters::set_timestamp(
            counters::TimestampType::Synced,
            self.executor_proxy.get_version_timestamp(synced_version)?,
        );`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `counters::set_timestamp(
            counters::TimestampType::Committed,
            self.executor_proxy
                .get_version_timestamp(committed_version)?,
        );`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `counters::set_timestamp(
            counters::TimestampType::Real,
            diem_infallible::duration_since_epoch().as_micros() as u64,
        );`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `self.sync_state_with_local_storage()?;`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `fail_point!("state_sync_v1::process_chunk_request", |_| {
            Err(crate::error::Error::UnexpectedError(
                "Injected error in process_chunk_request".into(),
            ))
        });`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `self.sync_state_with_local_storage()?;`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `self.request_manager.process_invalid_chunk_request(&peer);`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `self.verify_chunk_response_is_valid(peer, &response)?;`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `counters::APPLY_CHUNK_COUNT
                    .with_label_values(&[
                        &peer.raw_network_id().to_string(),
                        &peer.peer_id().to_string(),
                        counters::SUCCESS_LABEL,
                    ])
                    .inc();`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `counters::APPLY_CHUNK_COUNT
                    .with_label_values(&[
                        &peer.raw_network_id().to_string(),
                        &peer.peer_id().to_string(),
                        counters::FAIL_LABEL,
                    ])
                    .inc();`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `counters::SYNC_REQUEST_RESULT
                    .with_label_values(&[counters::TIMEOUT_LABEL])
                    .inc();`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `counters::TIMEOUT.inc();`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `counters::set_version(counters::VersionType::Target, target_version);`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `self.subscriptions.retain(|peer, request_info| {
            // filter out expired peer requests
            if SystemTime::now()
                .duration_since(request_info.expiration_time)
                .is_ok()
            {
                return false;
            }
            if request_info.known_version < highest_li_version {
                ready.push((peer.clone(), request_info.clone()));
                false
            } else {
                true
            }
        });`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `ready.push((peer.clone(), request_info.clone()));`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `ready.into_iter().for_each(|(peer, request_info)| {
            let result_label = if let Err(err) =
                self.deliver_subscription(peer.clone(), request_info, highest_li_version)
            {
                error!(LogSchema::new(LogEntry::SubscriptionDeliveryFail)
                    .peer(&peer)
                    .error(&err));
                counters::FAIL_LABEL
            } else {
                counters::SUCCESS_LABEL
            };
            counters::SUBSCRIPTION_DELIVERY_COUNT
                .with_label_values(&[
                    &peer.raw_network_id().to_string(),
                    &peer.peer_id().to_string(),
                    result_label,
                ])
                .inc();
        });`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `counters::SUBSCRIPTION_DELIVERY_COUNT
                .with_label_values(&[
                    &peer.raw_network_id().to_string(),
                    &peer.peer_id().to_string(),
                    result_label,
                ])
                .inc();`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `counters::FAILED_CHANNEL_SEND
                    .with_label_values(&[counters::CONSENSUS_SYNC_REQ_CALLBACK])
                    .inc();`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `block_on(validator_coordinator.process_sync_request(sync_request)).unwrap();`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `match callback_receiver.try_recv() {
            Ok(Some(notification_result)) => notification_result.result.unwrap(),
            result => panic!("Expected okay but got: {:?}", result),
        };`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `validator_coordinator
            .get_sync_state(callback_sender)
            .unwrap();`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `validator_coordinator
            .wait_for_initialization(callback_sender)
            .unwrap();`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `match callback_receiver.try_recv() {
            Ok(Some(result)) => result.unwrap(),
            result => panic!("Expected okay but got: {:?}", result),
        };`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `validator_coordinator
            .wait_for_initialization(callback_sender)
            .unwrap();`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `block_on(validator_coordinator.process_commit_notification(vec![], vec![], None, None))
            .unwrap();`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `block_on(validator_coordinator.process_commit_notification(
            vec![],
            vec![],
            Some(commit_notification),
            None,
        ))
        .unwrap();`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `validator_coordinator.check_progress().unwrap();`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `node_config.base.role = RoleType::Validator;`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `node_config.state_sync.sync_request_timeout_ms = 0;`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `validator_coordinator.check_progress().unwrap_err();`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `.request_manager.enable_peer(peer, metadata)`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `.with_label_values(&[
                        &peer.raw_network_id().to_string(),
                        &peer.peer_id().to_string(),
                        counters::CHUNK_REQUEST_MSG_LABEL,
                    ])`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `.raw_network_id()`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `.peer_id()`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `.start_timer()`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `.with_label_values(&[
                            &peer.raw_network_id().to_string(),
                            &peer.peer_id().to_string(),
                            counters::FAIL_LABEL,
                        ])`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `.raw_network_id()`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `.peer_id()`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `.inc()`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `.with_label_values(&[
                            &peer.raw_network_id().to_string(),
                            &peer.peer_id().to_string(),
                            counters::SUCCESS_LABEL,
                        ])`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `.raw_network_id()`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `.peer_id()`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `.inc()`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `.with_label_values(&[
                        &peer.raw_network_id().to_string(),
                        &peer.peer_id().to_string(),
                        counters::CHUNK_RESPONSE_MSG_LABEL,
                    ])`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `.raw_network_id()`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `.peer_id()`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `.start_timer()`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `.executor_proxy.get_local_storage_state()`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `.map_err(|e| {
            counters::STORAGE_READ_FAIL_COUNT.inc();
            e
        })`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `.inc()`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `.trusted_epoch()`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `.local_state.trusted_epoch()`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `.waypoint.version()`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `.local_state.committed_version()`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `.local_state.committed_version()`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `.consensus_sync_notification
            .target
            .ledger_info()`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `.version()`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `.into()`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `.into()`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `.local_state.synced_version()`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `.local_state.trusted_epoch()`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `.map_err(|error| {
            consensus_notifications::Error::UnexpectedErrorEncountered(format!("{:?}", error))
        })`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `.consensus_listener
            .respond_to_commit_notification(commit_notification, result)`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `.with_label_values(&[counters::CONSENSUS_LABEL])`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `.inc()`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `.map_err(|error| {
                error!(LogSchema::new(LogEntry::CommitFlow).error(&error));
                error
            })`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `.local_state.synced_version()`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `.request_manager.remove_requests(synced_version)`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `.request_manager.process_success_response(peer)`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `.executor_proxy
            .publish_on_chain_config_updates(reconfiguration_events)`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `.with_label_values(&[counters::FAIL_LABEL])`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `.inc()`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `.local_state.committed_version()`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `.local_state.trusted_epoch()`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `.initialization_listener.take()`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `.consensus_sync_notification
                .target
                .ledger_info()`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `.version()`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `.with_label_values(&[counters::COMPLETE_LABEL])`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `.inc()`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `.sync_request.take()`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `.local_state
            .committed_ledger_info()`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `.ledger_info()`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `.timestamp_usecs()`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `.mempool_notifier.notify_new_commit(
            committed_transactions,
            block_timestamp_usecs,
            self.config.mempool_commit_timeout_ms,
        )`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `.with_label_values(&[counters::MEMPOOL_LABEL])`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `.inc()`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `.into()`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `.local_state.synced_version()`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `.local_state.committed_version()`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `.local_state.trusted_epoch()`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `.set(local_epoch as i64)`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `.executor_proxy.get_version_timestamp(synced_version)`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `.executor_proxy
                .get_version_timestamp(committed_version)`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `.as_micros()`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `.send(self.local_state.clone())`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `.sync_state_with_local_storage()`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `.verify_chunk_request_is_valid(&request)`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `.request_manager.process_invalid_chunk_request(&peer)`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `.process_request_for_target_and_highest(
                peer,
                request,
                target_li,
                Some(timeout_ms),
            )`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `.is_consensus_executing()`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `.verify_chunk_response_is_valid(peer, &response)`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `.apply_chunk(peer, response.clone())`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `.with_label_values(&[
                        &peer.raw_network_id().to_string(),
                        &peer.peer_id().to_string(),
                        counters::SUCCESS_LABEL,
                    ])`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `.raw_network_id()`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `.peer_id()`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `.inc()`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `.with_label_values(&[
                        &peer.raw_network_id().to_string(),
                        &peer.peer_id().to_string(),
                        counters::FAIL_LABEL,
                    ])`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `.raw_network_id()`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `.peer_id()`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `.inc()`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `.process_commit_notification(
            response.txn_list_with_proof.transactions.clone(),
            vec![],
            None,
            Some(peer),
        )`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `.consensus_sync_notification
                .target
                .ledger_info()`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `.version()`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `.create_highest_available_chunk_target(Some(
                    sync_request.consensus_sync_notification.target.clone(),
                ))`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `.into()`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `.is_consensus_executing()`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `.last_commit_timestamp
                .checked_add(timeout_between_commits)`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `.ok_or_else(|| {
                    Error::IntegerOverflow("The commit deadline timestamp has overflown!".into())
                })`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `.into()`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `.duration_since(commit_deadline)`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `.is_ok()`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `.with_label_values(&[counters::TIMEOUT_LABEL])`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `.inc()`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `.sync_request.take()`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `.send_sync_req_callback(
                        sync_request,
                        Err(Error::UnexpectedError("Sync request timed out!".into())),
                    )`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `.into()`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `.local_state.synced_version()`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `.request_manager.has_request_timed_out(known_version)`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `.inc()`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `.local_state.trusted_epoch()`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `.is_initialized()`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `.sync_request.is_some()`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `.create_sync_request_chunk_target(known_version)`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `.request_manager.no_available_peers()`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `.into()`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `.version()`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `.unwrap_or_else(|| known_version.wrapping_add(1))`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `.wrapping_add(1)`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `.local_state.committed_version()`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `.subscriptions.retain(|peer, request_info| {
            // filter out expired peer requests
            if SystemTime::now()
                .duration_since(request_info.expiration_time)
                .is_ok()
            {
                return false;
            }
            if request_info.known_version < highest_li_version {
                ready.push((peer.clone(), request_info.clone()));
                false
            } else {
                true
            }
        })`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `.duration_since(request_info.expiration_time)`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `.is_ok()`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `.push((peer.clone(), request_info.clone()))`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `.into_iter()`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `.for_each(|(peer, request_info)| {
            let result_label = if let Err(err) =
                self.deliver_subscription(peer.clone(), request_info, highest_li_version)
            {
                error!(LogSchema::new(LogEntry::SubscriptionDeliveryFail)
                    .peer(&peer)
                    .error(&err));
                counters::FAIL_LABEL
            } else {
                counters::SUCCESS_LABEL
            };
            counters::SUBSCRIPTION_DELIVERY_COUNT
                .with_label_values(&[
                    &peer.raw_network_id().to_string(),
                    &peer.peer_id().to_string(),
                    result_label,
                ])
                .inc();
        })`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `.deliver_subscription(peer.clone(), request_info, highest_li_version)`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `.with_label_values(&[
                    &peer.raw_network_id().to_string(),
                    &peer.peer_id().to_string(),
                    result_label,
                ])`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `.raw_network_id()`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `.peer_id()`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `.inc()`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `.map_err(|error| {
            consensus_notifications::Error::UnexpectedErrorEncountered(format!("{:?}", error))
        })`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `.consensus_listener
            .respond_to_sync_notification(sync_req.consensus_sync_notification, msg)`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `.with_label_values(&[counters::CONSENSUS_SYNC_REQ_CALLBACK])`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `.inc()`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `.try_recv()`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `.ledger_info()`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `.try_recv()`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `.try_recv()`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `.try_recv()`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `.ledger_info()`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `.try_recv()`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `.try_recv()`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `.try_recv()`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `.network_id()`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `.peer_id()`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `.network_id()`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `.peer_id()`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `.network_id()`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `.peer_id()`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `.network_id()`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `.peer_id()`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `.ledger_info()`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `.process_chunk_message(
                peer_network_id.network_id(),
                peer_network_id.peer_id(),
                request.clone(),
            )`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `.network_id()`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `.peer_id()`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `.network_id()`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `.peer_id()`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `.network_id()`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `.peer_id()`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `.peer_id()`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `.network_id()`
$DIR/state-sync/state-sync-v1/src/executor_proxy.rs: `timer.stop_and_record();`
$DIR/state-sync/state-sync-v1/src/executor_proxy.rs: `counters::RECONFIG_PUBLISH_COUNT
                .with_label_values(&[counters::FAIL_LABEL])
                .inc();`
$DIR/state-sync/state-sync-v1/src/executor_proxy.rs: `publish_success = false;`
$DIR/state-sync/state-sync-v1/src/executor_proxy.rs: `self.on_chain_configs = new_configs;`
$DIR/state-sync/state-sync-v1/src/executor_proxy.rs: `counters::RECONFIG_PUBLISH_COUNT
                .with_label_values(&[counters::SUCCESS_LABEL])
                .inc();`
$DIR/state-sync/state-sync-v1/src/executor_proxy.rs: `executor_proxy
            .publish_on_chain_config_updates(reconfig_events)
            .unwrap();`
$DIR/state-sync/state-sync-v1/src/executor_proxy.rs: `drop(reconfig_receiver);`
$DIR/state-sync/state-sync-v1/src/executor_proxy.rs: `executor_proxy
            .publish_on_chain_config_updates(reconfig_events)
            .unwrap();`
$DIR/state-sync/state-sync-v1/src/executor_proxy.rs: `executor_proxy
            .publish_on_chain_config_updates(vec![])
            .unwrap();`
$DIR/state-sync/state-sync-v1/src/executor_proxy.rs: `executor_proxy
            .publish_on_chain_config_updates(reconfig_events)
            .unwrap();`
$DIR/state-sync/state-sync-v1/src/executor_proxy.rs: `executor_proxy
            .publish_on_chain_config_updates(reconfig_events)
            .unwrap();`
$DIR/state-sync/state-sync-v1/src/executor_proxy.rs: `executor_proxy
            .execute_chunk(txns, ledger_info_epoch_1.clone(), None)
            .unwrap();`
$DIR/state-sync/state-sync-v1/src/executor_proxy.rs: `executor_proxy.get_epoch_ending_ledger_info(4).unwrap_err();`
$DIR/state-sync/state-sync-v1/src/executor_proxy.rs: `executor_proxy
            .execute_chunk(txns, ledger_info_epoch_2.clone(), None)
            .unwrap();`
$DIR/state-sync/state-sync-v1/src/executor_proxy.rs: `executor_proxy
            .publish_on_chain_config_updates(reconfig_events)
            .unwrap();`
$DIR/state-sync/state-sync-v1/src/executor_proxy.rs: `db_path.create_as_dir().unwrap();`
$DIR/state-sync/state-sync-v1/src/executor_proxy.rs: `bootstrap_genesis::<DiemVM>(&db_rw, &genesis_txn).unwrap();`
$DIR/state-sync/state-sync-v1/src/executor_proxy.rs: `config_registry.push(TestOnChainConfig::CONFIG_ID);`
$DIR/state-sync/state-sync-v1/src/executor_proxy.rs: `payload.get::<DiemVersion>().unwrap();`
$DIR/state-sync/state-sync-v1/src/executor_proxy.rs: `executor_proxy
            .publish_on_chain_config_updates(reconfig_events)
            .unwrap();`
$DIR/state-sync/state-sync-v1/src/executor_proxy.rs: `payload.get::<DiemVersion>().unwrap();`
$DIR/state-sync/state-sync-v1/src/executor_proxy.rs: `payload.get::<OnChainConsensusConfig>().unwrap();`
$DIR/state-sync/state-sync-v1/src/executor_proxy.rs: `db_path.create_as_dir().unwrap();`
$DIR/state-sync/state-sync-v1/src/executor_proxy.rs: `bootstrap_genesis::<DiemVM>(&db_rw, &genesis_txn).unwrap();`
$DIR/state-sync/state-sync-v1/src/executor_proxy.rs: `block_executor
            .commit_blocks(vec![block_hash], ledger_info_with_sigs.clone())
            .unwrap();`
$DIR/state-sync/state-sync-v1/src/executor_proxy.rs: `.storage.get_startup_info()`
$DIR/state-sync/state-sync-v1/src/executor_proxy.rs: `.map_err(|error| {
            Error::UnexpectedError(format!(
                "Failed to get startup info from storage: {}",
                error
            ))
        })`
$DIR/state-sync/state-sync-v1/src/executor_proxy.rs: `.ok_or_else(|| Error::UnexpectedError("Missing startup info from storage".into()))`
$DIR/state-sync/state-sync-v1/src/executor_proxy.rs: `.into()`
$DIR/state-sync/state-sync-v1/src/executor_proxy.rs: `.get_epoch_state()`
$DIR/state-sync/state-sync-v1/src/executor_proxy.rs: `.start_timer()`
$DIR/state-sync/state-sync-v1/src/executor_proxy.rs: `.executor
            .execute_and_commit_chunk(
                txn_list_with_proof,
                verified_target_li,
                intermediate_end_of_epoch_li,
            )`
$DIR/state-sync/state-sync-v1/src/executor_proxy.rs: `.map_err(|error| {
                Error::UnexpectedError(format!("Execute and commit chunk failed: {}", error))
            })`
$DIR/state-sync/state-sync-v1/src/executor_proxy.rs: `.stop_and_record()`
$DIR/state-sync/state-sync-v1/src/executor_proxy.rs: `.with_label_values(&[counters::FAIL_LABEL])`
$DIR/state-sync/state-sync-v1/src/executor_proxy.rs: `.inc()`
$DIR/state-sync/state-sync-v1/src/executor_proxy.rs: `.checked_add(1)`
$DIR/state-sync/state-sync-v1/src/executor_proxy.rs: `.ok_or_else(|| Error::IntegerOverflow("Starting version has overflown!".into()))`
$DIR/state-sync/state-sync-v1/src/executor_proxy.rs: `.into()`
$DIR/state-sync/state-sync-v1/src/executor_proxy.rs: `.storage
            .get_transactions(starting_version, limit, target_version, false)`
$DIR/state-sync/state-sync-v1/src/executor_proxy.rs: `.storage
            .get_epoch_ending_ledger_info(version)`
$DIR/state-sync/state-sync-v1/src/executor_proxy.rs: `.is_empty()`
$DIR/state-sync/state-sync-v1/src/executor_proxy.rs: `.map(|event| *event.key())`
$DIR/state-sync/state-sync-v1/src/executor_proxy.rs: `.key()`
$DIR/state-sync/state-sync-v1/src/executor_proxy.rs: `.collect::<HashSet<_>>()`
$DIR/state-sync/state-sync-v1/src/executor_proxy.rs: `.configs()`
$DIR/state-sync/state-sync-v1/src/executor_proxy.rs: `.filter(|(config_id, config_value)| {
                if let Some(old_config_value) = self.on_chain_configs.configs().get(config_id) {
                    &old_config_value != config_value
                } else {
                    info!(
                        LogSchema::event_log(LogEntry::Reconfig, LogEvent::Received),
                        "Found a new on-chain config, for config id: {}", config_id
                    );
                    true
                }
            })`
$DIR/state-sync/state-sync-v1/src/executor_proxy.rs: `.on_chain_configs.configs()`
$DIR/state-sync/state-sync-v1/src/executor_proxy.rs: `.get(config_id)`
$DIR/state-sync/state-sync-v1/src/executor_proxy.rs: `.map(|(id, _)| *id)`
$DIR/state-sync/state-sync-v1/src/executor_proxy.rs: `.collect::<HashSet<_>>()`
$DIR/state-sync/state-sync-v1/src/executor_proxy.rs: `.subscribed_items()`
$DIR/state-sync/state-sync-v1/src/executor_proxy.rs: `.is_disjoint(&subscribed_items.configs)`
$DIR/state-sync/state-sync-v1/src/executor_proxy.rs: `.is_disjoint(&subscribed_items.events)`
$DIR/state-sync/state-sync-v1/src/executor_proxy.rs: `.publish(new_configs.clone())`
$DIR/state-sync/state-sync-v1/src/executor_proxy.rs: `.with_label_values(&[counters::SUCCESS_LABEL])`
$DIR/state-sync/state-sync-v1/src/executor_proxy.rs: `.inc()`
$DIR/state-sync/state-sync-v1/src/executor_proxy.rs: `.into()`
$DIR/state-sync/state-sync-v1/src/executor_proxy.rs: `.into_iter()`
$DIR/state-sync/state-sync-v1/src/executor_proxy.rs: `.filter(|event| *event.key() == new_epoch_event_key)`
$DIR/state-sync/state-sync-v1/src/executor_proxy.rs: `.key()`
$DIR/state-sync/state-sync-v1/src/executor_proxy.rs: `.select_next_some()`
$DIR/state-sync/state-sync-v1/src/executor_proxy.rs: `.now_or_never()`
$DIR/state-sync/state-sync-v1/src/executor_proxy.rs: `.get::<DiemVersion>()`
$DIR/state-sync/state-sync-v1/src/executor_proxy.rs: `.select_next_some()`
$DIR/state-sync/state-sync-v1/src/executor_proxy.rs: `.now_or_never()`
$DIR/state-sync/state-sync-v1/src/executor_proxy.rs: `.get::<OnChainConsensusConfig>()`
$DIR/state-sync/state-sync-v1/src/executor_proxy.rs: `.create_as_dir()`
$DIR/state-sync/state-sync-v1/src/executor_proxy.rs: `.path()`
$DIR/state-sync/state-sync-v1/src/executor_proxy.rs: `.push(TestOnChainConfig::CONFIG_ID)`
$DIR/state-sync/state-sync-v1/src/executor_proxy.rs: `.select_next_some()`
$DIR/state-sync/state-sync-v1/src/executor_proxy.rs: `.now_or_never()`
$DIR/state-sync/state-sync-v1/src/executor_proxy.rs: `.get::<DiemVersion>()`
$DIR/state-sync/state-sync-v1/src/executor_proxy.rs: `.select_next_some()`
$DIR/state-sync/state-sync-v1/src/executor_proxy.rs: `.now_or_never()`
$DIR/state-sync/state-sync-v1/src/executor_proxy.rs: `.get::<DiemVersion>()`
$DIR/state-sync/state-sync-v1/src/executor_proxy.rs: `.get::<OnChainConsensusConfig>()`
$DIR/state-sync/state-sync-v1/src/executor_proxy.rs: `.create_as_dir()`
$DIR/state-sync/state-sync-v1/src/executor_proxy.rs: `.path()`
$DIR/state-sync/state-sync-v1/src/executor_proxy.rs: `.public_key()`
$DIR/state-sync/state-sync-v1/src/executor_proxy.rs: `.public_key()`
$DIR/state-sync/state-sync-v1/src/executor_proxy.rs: `.to_bytes()`
$DIR/state-sync/state-sync-v1/src/executor_proxy.rs: `.public_key()`
$DIR/state-sync/state-sync-v1/src/executor_proxy.rs: `.public_key()`
$DIR/state-sync/state-sync-v1/src/executor_proxy.rs: `.public_key()`
$DIR/state-sync/state-sync-v1/src/executor_proxy.rs: `.execute_block((block_hash, block), block_executor.committed_block_id())`
$DIR/state-sync/state-sync-v1/src/executor_proxy.rs: `.committed_block_id()`
$DIR/state-sync/state-sync-v1/src/executor_proxy.rs: `.into()`
$DIR/state-sync/state-sync-v1/src/executor_proxy.rs: `.commit_blocks(vec![block_hash], ledger_info_with_sigs.clone())`
$DIR/state-sync/state-sync-v1/src/executor_proxy.rs: `.reconfig_events()`
$DIR/state-sync/state-sync-v1/src/request_manager.rs: `counters::ACTIVE_UPSTREAM_PEERS
            .with_label_values(&[&peer.raw_network_id().to_string()])
            .inc();`
$DIR/state-sync/state-sync-v1/src/request_manager.rs: `vacant_entry.insert(peer_score);`
$DIR/state-sync/state-sync-v1/src/request_manager.rs: `counters::ACTIVE_UPSTREAM_PEERS
                .with_label_values(&[&peer.raw_network_id().to_string()])
                .dec();`
$DIR/state-sync/state-sync-v1/src/request_manager.rs: `self.peer_scores.remove(peer);`
$DIR/state-sync/state-sync-v1/src/request_manager.rs: `*score = new_score;`
$DIR/state-sync/state-sync-v1/src/request_manager.rs: `eligible_peers.push((*peer).clone());`
$DIR/state-sync/state-sync-v1/src/request_manager.rs: `new_multicast_network_level = Some(network_level.clone());`
$DIR/state-sync/state-sync-v1/src/request_manager.rs: `prev_request.multicast_level = self.multicast_network_level.clone();`
$DIR/state-sync/state-sync-v1/src/request_manager.rs: `prev_request.multicast_start_time = now;`
$DIR/state-sync/state-sync-v1/src/request_manager.rs: `prev_request.last_request_peers = peers;`
$DIR/state-sync/state-sync-v1/src/request_manager.rs: `prev_request.last_request_time = now;`
$DIR/state-sync/state-sync-v1/src/request_manager.rs: `self.requests.insert(version, chunk_request_info.clone());`
$DIR/state-sync/state-sync-v1/src/request_manager.rs: `self.requests.remove(&v);`
$DIR/state-sync/state-sync-v1/src/request_manager.rs: `self.multicast_network_level = new_level.clone();`
$DIR/state-sync/state-sync-v1/src/request_manager.rs: `log_event = log_event.request_version(version);`
$DIR/state-sync/state-sync-v1/src/request_manager.rs: `counters::MULTICAST_LEVEL.set(network_counter_value);`
$DIR/state-sync/state-sync-v1/src/request_manager.rs: `request_manager.disable_peer(&validator_0).unwrap();`
$DIR/state-sync/state-sync-v1/src/request_manager.rs: `request_manager
                .process_chunk_version_mismatch(&validator_0, 100, 0)
                .unwrap_err();`
$DIR/state-sync/state-sync-v1/src/request_manager.rs: `request_manager
                .process_chunk_version_mismatch(&validator_0, 100, 0)
                .unwrap_err();`
$DIR/state-sync/state-sync-v1/src/request_manager.rs: `validators.push(validator);`
$DIR/state-sync/state-sync-v1/src/request_manager.rs: `*counter += 1;`
$DIR/state-sync/state-sync-v1/src/request_manager.rs: `add_validator_to_request_manager(&mut request_manager, &validator, PeerRole::Validator);`
$DIR/state-sync/state-sync-v1/src/request_manager.rs: `validators.push(validator);`
$DIR/state-sync/state-sync-v1/src/request_manager.rs: `request_manager
            .enable_peer(validator.clone(), connection_metadata)
            .unwrap();`
$DIR/state-sync/state-sync-v1/src/request_manager.rs: `.with_label_values(&[&peer.raw_network_id().to_string()])`
$DIR/state-sync/state-sync-v1/src/request_manager.rs: `.raw_network_id()`
$DIR/state-sync/state-sync-v1/src/request_manager.rs: `.inc()`
$DIR/state-sync/state-sync-v1/src/request_manager.rs: `.peer_scores.entry(peer)`
$DIR/state-sync/state-sync-v1/src/request_manager.rs: `.insert(peer_score)`
$DIR/state-sync/state-sync-v1/src/request_manager.rs: `.peer_scores.contains_key(peer)`
$DIR/state-sync/state-sync-v1/src/request_manager.rs: `.with_label_values(&[&peer.raw_network_id().to_string()])`
$DIR/state-sync/state-sync-v1/src/request_manager.rs: `.raw_network_id()`
$DIR/state-sync/state-sync-v1/src/request_manager.rs: `.dec()`
$DIR/state-sync/state-sync-v1/src/request_manager.rs: `.peer_scores.remove(peer)`
$DIR/state-sync/state-sync-v1/src/request_manager.rs: `.peer_scores.get_mut(peer)`
$DIR/state-sync/state-sync-v1/src/request_manager.rs: `.map(|(peer, peer_score)| (peer.raw_network_id(), (peer, peer_score)))`
$DIR/state-sync/state-sync-v1/src/request_manager.rs: `.raw_network_id()`
$DIR/state-sync/state-sync-v1/src/request_manager.rs: `.into_group_map()`
$DIR/state-sync/state-sync-v1/src/request_manager.rs: `.into_iter()`
$DIR/state-sync/state-sync-v1/src/request_manager.rs: `.map(|(network_level, peers)| {
                let mut eligible_peers = vec![];
                let weights: Vec<_> = peers
                    .iter()
                    .map(|(peer, peer_score)| {
                        eligible_peers.push((*peer).clone());
                        *peer_score
                    })
                    .collect();
                let weighted_index = WeightedIndex::new(weights)
                    .map_err(|error| {
                        error!(
                            "Failed to compute weighted index for eligible peers: {:?}",
                            error
                        );
                        error
                    })
                    .ok();
                (network_level, (eligible_peers, weighted_index))
            })`
$DIR/state-sync/state-sync-v1/src/request_manager.rs: `.map(|(peer, peer_score)| {
                        eligible_peers.push((*peer).clone());
                        *peer_score
                    })`
$DIR/state-sync/state-sync-v1/src/request_manager.rs: `.push((*peer).clone())`
$DIR/state-sync/state-sync-v1/src/request_manager.rs: `.collect()`
$DIR/state-sync/state-sync-v1/src/request_manager.rs: `.map_err(|error| {
                        error!(
                            "Failed to compute weighted index for eligible peers: {:?}",
                            error
                        );
                        error
                    })`
$DIR/state-sync/state-sync-v1/src/request_manager.rs: `.ok()`
$DIR/state-sync/state-sync-v1/src/request_manager.rs: `.is_empty()`
$DIR/state-sync/state-sync-v1/src/request_manager.rs: `.requests.get_mut(&version)`
$DIR/state-sync/state-sync-v1/src/request_manager.rs: `.requests.insert(version, chunk_request_info.clone())`
$DIR/state-sync/state-sync-v1/src/request_manager.rs: `.raw_network_id()`
$DIR/state-sync/state-sync-v1/src/request_manager.rs: `.requests.get(&version)`
$DIR/state-sync/state-sync-v1/src/request_manager.rs: `.last_request_peers.contains(peer)`
$DIR/state-sync/state-sync-v1/src/request_manager.rs: `.last_request_peers.len()`
$DIR/state-sync/state-sync-v1/src/request_manager.rs: `.requests
            .range(..version)`
$DIR/state-sync/state-sync-v1/src/request_manager.rs: `.filter_map(|(version, req)| {
                if is_timeout(req.last_request_time, self.request_timeout) {
                    Some(*version)
                } else {
                    None
                }
            })`
$DIR/state-sync/state-sync-v1/src/request_manager.rs: `.collect::<Vec<_>>()`
$DIR/state-sync/state-sync-v1/src/request_manager.rs: `.requests.remove(&v)`
$DIR/state-sync/state-sync-v1/src/request_manager.rs: `.raw_network_id()`
$DIR/state-sync/state-sync-v1/src/request_manager.rs: `.is_validator_network()`
$DIR/state-sync/state-sync-v1/src/request_manager.rs: `.raw_network_id()`
$DIR/state-sync/state-sync-v1/src/request_manager.rs: `.is_vfn_network()`
$DIR/state-sync/state-sync-v1/src/request_manager.rs: `.cmp(&current_level)`
$DIR/state-sync/state-sync-v1/src/request_manager.rs: `.old_multicast_level(current_level)`
$DIR/state-sync/state-sync-v1/src/request_manager.rs: `.new_multicast_level(new_level)`
$DIR/state-sync/state-sync-v1/src/request_manager.rs: `.request_version(version)`
$DIR/state-sync/state-sync-v1/src/request_manager.rs: `.checked_add(timeout_duration)`
$DIR/state-sync/state-sync-v1/src/request_manager.rs: `.duration_since(deadline)`
$DIR/state-sync/state-sync-v1/src/request_manager.rs: `.get(weighted_index.sample(&mut rng))`
$DIR/state-sync/state-sync-v1/src/request_manager.rs: `.sample(&mut rng)`
$DIR/state-sync/state-sync-v1/src/request_manager.rs: `.is_validator_network()`
$DIR/state-sync/state-sync-v1/src/request_manager.rs: `.is_vfn_network()`
$DIR/state-sync/state-sync-v1/src/request_manager.rs: `.set(network_counter_value)`
$DIR/state-sync/state-sync-v1/src/request_manager.rs: `.push(validator)`
$DIR/state-sync/state-sync-v1/src/request_manager.rs: `.get(&validators[validator_index])`
$DIR/state-sync/state-sync-v1/src/request_manager.rs: `.unwrap_or(&0)`
$DIR/state-sync/state-sync-v1/src/request_manager.rs: `.enumerate()`
$DIR/state-sync/state-sync-v1/src/request_manager.rs: `.entry(picked_peer)`
$DIR/state-sync/state-sync-v1/src/request_manager.rs: `.or_insert(0)`
$DIR/state-sync/state-sync-v1/src/request_manager.rs: `.push(validator)`
$DIR/state-sync/state-sync-v1/src/request_manager.rs: `.peer_id()`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `env.start_validator_peer(0, false);`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `env.start_validator_peer(1, false);`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `validator_0.commit(version);`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `validator_1.sync_to(target_li);`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `env.start_validator_peer(0, false);`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `attempt.fetch_add(1, Ordering::Relaxed);`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `env.start_state_sync_peer(1, handler, RoleType::Validator, Waypoint::default(), false);`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `validator_0.commit(synced_version);`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `validator_1.sync_to(validator_0.latest_li());`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `env.start_state_sync_peer(0, handler, RoleType::Validator, Waypoint::default(), false);`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `env.setup_state_sync_peer(
        1,
        default_handler(),
        RoleType::Validator,
        Waypoint::default(),
        100,
        300,
        false,
    );`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `validator_0.commit(1);`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `env.start_validator_peer(0, false);`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `env.start_fullnode_peer(1, false);`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `validator.commit(10);`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `validator.commit(20);`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `env.start_validator_peer(0, false);`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `env.start_validator_peer(1, false);`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `validator_0.commit(20);`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `validator_1.sync_to(validator_0.latest_li());`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `validator_0.commit(40);`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `validator_0.move_to_next_epoch(validator_infos, 0);`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `validator_0.commit(100);`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `validator_1.sync_to(validator_0.latest_li());`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `validator_0.commit(epoch * 100);`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `validator_0.move_to_next_epoch(validator_infos, 0);`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `validator_0.commit(950);`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `validator_1.sync_to(validator_0.latest_li());`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `env.start_validator_peer(0, false);`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `validator_0.commit(epoch * 100);`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `validator_0.move_to_next_epoch(vec![validator_0.get_validator_info().clone()], 0);`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `validator_0.commit(950);`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `drop(validator_0);`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `env.start_fullnode_peer(1, false);`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `drop(fullnode);`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `env.start_fullnode_peer(2, false);`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `env.start_validator_peer(0, false);`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `curr_version += 100;`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `validator_0.commit(curr_version);`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `validator_0.move_to_next_epoch(vec![validator_0.get_validator_info().clone()], 0);`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `curr_version += 400;`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `validator_0.commit(curr_version);`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `validator_0.move_to_next_epoch(vec![validator_0.get_validator_info().clone()], 0);`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `validator_0.commit(5250);`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `drop(validator_0);`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `env.start_state_sync_peer(1, default_handler(), RoleType::FullNode, waypoint, false);`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `fullnode.wait_until_initialized();`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `drop(fullnode);`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `env.start_fullnode_peer(2, false);`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `env.start_validator_peer(0, true);`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `env.start_validator_peer(1, true);`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `env.setup_state_sync_peer(
        2,
        default_handler(),
        RoleType::FullNode,
        Waypoint::default(),
        10_000,
        1_000_000,
        true,
    );`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `env.start_state_sync_peer(
        3,
        default_handler(),
        RoleType::FullNode,
        Waypoint::default(),
        true,
    );`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `validator_0.commit(400);`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `drop(validator_0);`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `drop(fullnode_0);`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `drop(fullnode_1);`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `env.get_state_sync_peer(2).wait_for_version(250, None);`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `env.get_state_sync_peer(0).commit(500);`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `env.clone_storage(0, 3);`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `env.get_state_sync_peer(3).wait_for_version(500, Some(500));`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `env.get_state_sync_peer(0).commit(600);`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `env.start_validator_peer(0, true);`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `env.start_fullnode_peer(1, true);`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `validator.commit(*committed_version);`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `validator.move_to_next_epoch(validator_infos, 0);`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `env.deliver_msg(fullnode_peer_id);`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `env.deliver_msg(validator_peer_id);`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `env.start_validator_peer(0, true);`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `env.start_fullnode_peer(1, true);`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `env.get_state_sync_peer(0).commit(next_commit as u64);`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `env.deliver_msg(fullnode_peer_id);`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `env.deliver_msg(validator_peer_id);`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `env.start_validator_peer(0, true);`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `env.setup_state_sync_peer(
        1,
        default_handler(),
        RoleType::FullNode,
        Waypoint::default(),
        1_000,
        60_000,
        true,
    );`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `env.start_fullnode_peer(2, true);`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `env.start_fullnode_peer(3, true);`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `env.start_fullnode_peer(4, true);`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `drop(validator);`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `drop(fullnode_0);`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `drop(fullnode_1);`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `drop(fullnode_2);`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `drop(fullnode_3);`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `env.deliver_msg(responding_peer_id);`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `env.assert_no_message_sent(fn_0_vfn_peer_id);`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `env.assert_no_message_sent(fn_0_pfn_peer_id);`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `env.deliver_msg(responding_peer_id);`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `env.get_state_sync_peer(validator_index)
        .commit(commit_version);`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `env.clone_storage(validator_index, *pfn);`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `request_recipients.push(recipient);`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `env.assert_no_message_sent(*inactive_peer);`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `env.deliver_msg(*recipient);`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `env.start_validator_peer(0, true);`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `env.setup_state_sync_peer(
        1,
        default_handler(),
        RoleType::FullNode,
        Waypoint::default(),
        1_000,
        multicast_timeout_ms,
        true,
    );`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `env.start_fullnode_peer(2, true);`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `env.start_fullnode_peer(3, true);`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `env.start_fullnode_peer(4, true);`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `drop(validator);`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `drop(fullnode_0);`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `drop(fullnode_1);`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `drop(fullnode_2);`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `std::thread::sleep(std::time::Duration::from_millis(multicast_timeout_ms));`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `env.deliver_msg(validator_peer_id);`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `std::thread::sleep(std::time::Duration::from_millis(multicast_timeout_ms));`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `env.deliver_msg(validator_peer_id);`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `env.deliver_msg(fn_2_pfn_peer_id);`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `env.deliver_msg(fn_1_vfn_2_peer_id);`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `env.deliver_msg(fn_2_pfn_peer_id);`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `env.deliver_msg(fn_1_vfn_2_peer_id);`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `env.deliver_msg(validator_peer_id);`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `env.deliver_msg(fn_2_pfn_peer_id);`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `env.deliver_msg(fn_1_vfn_2_peer_id);`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `env.deliver_msg(validator_peer_id);`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `env.deliver_msg(validator_peer_id);`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `env.deliver_msg(fn_1_vfn_2_peer_id);`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `env.deliver_msg(fn_2_pfn_peer_id);`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `env.deliver_msg(validator_peer_id);`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `env.deliver_msg(fn_1_vfn_2_peer_id);`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `env.deliver_msg(fn_2_pfn_peer_id);`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `env.send_peer_event(peer_id_0, peer_id_1, new_peer_notification, Outbound);`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `env.send_peer_event(peer_id_1, peer_id_0, new_peer_notification, Inbound);`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.start_validator_peer(0, false)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.start_validator_peer(1, false)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.get_state_sync_peer(0)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.get_state_sync_peer(1)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.commit(version)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.latest_li()`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.sync_to(target_li)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.start_validator_peer(0, false)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.load(Ordering::Relaxed)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.fetch_add(1, Ordering::Relaxed)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.into()`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.start_state_sync_peer(1, handler, RoleType::Validator, Waypoint::default(), false)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.get_state_sync_peer(0)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.get_state_sync_peer(1)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.commit(synced_version)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.sync_to(validator_0.latest_li())`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.latest_li()`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.into()`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.start_state_sync_peer(0, handler, RoleType::Validator, Waypoint::default(), false)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.setup_state_sync_peer(
        1,
        default_handler(),
        RoleType::Validator,
        Waypoint::default(),
        100,
        300,
        false,
    )`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.get_state_sync_peer(0)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.get_state_sync_peer(1)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.commit(1)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.latest_li()`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.start_validator_peer(0, false)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.start_fullnode_peer(1, false)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.get_state_sync_peer(0)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.get_state_sync_peer(1)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.commit(10)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.commit(20)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.start_validator_peer(0, false)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.start_validator_peer(1, false)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.get_state_sync_peer(0)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.get_state_sync_peer(1)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.commit(20)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.sync_to(validator_0.latest_li())`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.latest_li()`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.commit(40)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.move_to_next_epoch(validator_infos, 0)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.commit(100)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.sync_to(validator_0.latest_li())`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.latest_li()`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.commit(epoch * 100)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.move_to_next_epoch(validator_infos, 0)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.commit(950)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.sync_to(validator_0.latest_li())`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.latest_li()`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.start_validator_peer(0, false)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.get_state_sync_peer(0)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.commit(epoch * 100)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.move_to_next_epoch(vec![validator_0.get_validator_info().clone()], 0)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.commit(950)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.start_fullnode_peer(1, false)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.get_state_sync_peer(1)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.start_fullnode_peer(2, false)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.get_state_sync_peer(2)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.start_validator_peer(0, false)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.get_state_sync_peer(0)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.commit(curr_version)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.move_to_next_epoch(vec![validator_0.get_validator_info().clone()], 0)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.commit(curr_version)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.move_to_next_epoch(vec![validator_0.get_validator_info().clone()], 0)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.commit(5250)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.get_epoch_ending_ledger_info(3500)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.ledger_info()`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.start_state_sync_peer(1, default_handler(), RoleType::FullNode, waypoint, false)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.get_state_sync_peer(1)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.wait_until_initialized()`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.start_fullnode_peer(2, false)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.get_state_sync_peer(2)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.start_validator_peer(0, true)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.start_validator_peer(1, true)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.setup_state_sync_peer(
        2,
        default_handler(),
        RoleType::FullNode,
        Waypoint::default(),
        10_000,
        1_000_000,
        true,
    )`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.start_state_sync_peer(
        3,
        default_handler(),
        RoleType::FullNode,
        Waypoint::default(),
        true,
    )`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.get_state_sync_peer(0)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.get_state_sync_peer(2)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.get_state_sync_peer(3)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.get_peer_id(VALIDATOR_NETWORK.clone())`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.get_peer_id(VFN_NETWORK.clone())`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.get_peer_id(PFN_NETWORK.clone())`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.get_peer_id(VFN_NETWORK.clone())`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.get_peer_id(PFN_NETWORK.clone())`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.commit(400)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.deliver_msg(fullnode_0_peer_id_vfn)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.deliver_msg(validator_0_peer_id)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.get_state_sync_peer(2)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.wait_for_version(250, None)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.deliver_msg(fullnode_0_peer_id_pfn)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.get_state_sync_peer(0)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.commit(500)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.clone_storage(0, 3)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.get_state_sync_peer(3)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.wait_for_version(500, Some(500))`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.get_state_sync_peer(0)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.commit(600)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.deliver_msg(fullnode_1_peer_id_vfn)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.deliver_msg(validator_0_peer_id)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.deliver_msg(fullnode_1_peer_id_pfn)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.deliver_msg(fullnode_0_peer_id_pfn)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.deliver_msg(fullnode_1_peer_id_pfn)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.get_state_sync_peer(2)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.start_validator_peer(0, true)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.start_fullnode_peer(1, true)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.get_state_sync_peer(0)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.get_peer_id(VALIDATOR_NETWORK.clone())`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.get_state_sync_peer(1)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.get_peer_id(VFN_NETWORK.clone())`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.enumerate()`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.get(index)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.get_state_sync_peer(0)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.commit(*committed_version)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.contains(committed_version)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.move_to_next_epoch(validator_infos, 0)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.deliver_msg(fullnode_peer_id)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.deliver_msg(validator_peer_id)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.get_state_sync_peer(1)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.wait_for_version(*synced_version, Some(*committed_version))`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.start_validator_peer(0, true)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.start_fullnode_peer(1, true)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.get_state_sync_peer(0)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.get_peer_id(VALIDATOR_NETWORK.clone())`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.get_state_sync_peer(1)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.get_peer_id(VFN_NETWORK.clone())`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.enumerate()`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.get_state_sync_peer(0)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.commit(next_commit as u64)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.deliver_msg(fullnode_peer_id)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.deliver_msg(validator_peer_id)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.get_state_sync_peer(1)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.wait_for_version(*synced_version, Some(*committed_version))`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.start_validator_peer(0, true)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.setup_state_sync_peer(
        1,
        default_handler(),
        RoleType::FullNode,
        Waypoint::default(),
        1_000,
        60_000,
        true,
    )`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.start_fullnode_peer(2, true)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.start_fullnode_peer(3, true)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.start_fullnode_peer(4, true)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.get_state_sync_peer(0)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.get_state_sync_peer(1)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.get_state_sync_peer(2)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.get_state_sync_peer(3)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.get_state_sync_peer(4)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.get_peer_id(VFN_NETWORK.clone())`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.get_peer_id(VFN_NETWORK.clone())`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.get_peer_id(PFN_NETWORK.clone())`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.get_peer_id(PFN_NETWORK.clone())`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.get_peer_id(PFN_NETWORK.clone())`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.get_peer_id(PFN_NETWORK.clone())`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.deliver_msg(responding_peer_id)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.deliver_msg(responding_peer_id)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.deliver_msg(responding_peer_id)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.assert_no_message_sent(fn_0_vfn_peer_id)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.assert_no_message_sent(fn_0_pfn_peer_id)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.deliver_msg(responding_peer_id)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.deliver_msg(responding_peer_id)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.deliver_msg(responding_peer_id)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.get_state_sync_peer(validator_index)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.commit(commit_version)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.clone_storage(validator_index, *pfn)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.deliver_msg(*requesting_peer)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.push(recipient)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.assert_no_message_sent(*inactive_peer)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.last()`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.len()`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.enumerate()`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.deliver_msg(*recipient)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.start_validator_peer(0, true)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.setup_state_sync_peer(
        1,
        default_handler(),
        RoleType::FullNode,
        Waypoint::default(),
        1_000,
        multicast_timeout_ms,
        true,
    )`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.start_fullnode_peer(2, true)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.start_fullnode_peer(3, true)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.start_fullnode_peer(4, true)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.get_state_sync_peer(0)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.get_state_sync_peer(1)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.get_state_sync_peer(2)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.get_state_sync_peer(3)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.get_peer_id(VFN_NETWORK.clone())`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.get_peer_id(VFN_NETWORK.clone())`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.get_peer_id(VFN_NETWORK_2.clone())`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.get_peer_id(PFN_NETWORK.clone())`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.get_peer_id(VFN_NETWORK_2.clone())`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.get_peer_id(PFN_NETWORK.clone())`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.deliver_msg(validator_peer_id)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.deliver_msg(validator_peer_id)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.deliver_msg(fn_2_pfn_peer_id)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.deliver_msg(fn_1_vfn_2_peer_id)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.deliver_msg(fn_2_pfn_peer_id)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.deliver_msg(fn_1_vfn_2_peer_id)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.deliver_msg(validator_peer_id)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.deliver_msg(fn_2_pfn_peer_id)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.deliver_msg(fn_1_vfn_2_peer_id)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.deliver_msg(validator_peer_id)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.deliver_msg(validator_peer_id)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.deliver_msg(fn_1_vfn_2_peer_id)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.deliver_msg(fn_2_pfn_peer_id)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.deliver_msg(validator_peer_id)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.deliver_msg(fn_1_vfn_2_peer_id)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.deliver_msg(fn_2_pfn_peer_id)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.send_peer_event(peer_id_0, peer_id_1, new_peer_notification, Outbound)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.send_peer_event(peer_id_1, peer_id_0, new_peer_notification, Inbound)`
$DIR/storage/accumulator/src/tests/proof_test.rs: `store.put_many(&writes);`
$DIR/storage/accumulator/src/tests/proof_test.rs: `.put_many(&writes)`
$DIR/storage/accumulator/src/tests/write_test.rs: `store.verify(&[]).unwrap();`
$DIR/storage/accumulator/src/tests/write_test.rs: `store.put_many(&writes);`
$DIR/storage/accumulator/src/tests/write_test.rs: `leaves.push(hash);`
$DIR/storage/accumulator/src/tests/write_test.rs: `.verify(&[])`
$DIR/storage/accumulator/src/tests/write_test.rs: `.len()`
$DIR/storage/accumulator/src/tests/write_test.rs: `.put_many(&writes)`
$DIR/storage/accumulator/src/tests/write_test.rs: `.push(hash)`
$DIR/storage/accumulator/src/tests/write_test.rs: `.verify(&leaves)`
$DIR/storage/backup/backup-cli/src/backup_types/epoch_ending/tests.rs: `tgt_db_dir.create_as_dir().unwrap();`
$DIR/storage/backup/backup-cli/src/backup_types/epoch_ending/tests.rs: `backup_dir.create_as_dir().unwrap();`
$DIR/storage/backup/backup-cli/src/backup_types/epoch_ending/tests.rs: `rt.block_on(
        EpochEndingRestoreController::new(
            EpochEndingRestoreOpt { manifest_handle },
            GlobalRestoreOpt {
                db_dir: Some(tgt_db_dir.path().to_path_buf()),
                dry_run: false,
                target_version: Some(target_version),
                trusted_waypoints: TrustedWaypointOpt::default(),
                rocksdb_opt: RocksdbOpt::default(),
                concurernt_downloads: ConcurrentDownloadsOpt::default(),
            }
            .try_into()
            .unwrap(),
            store,
        )
        .run(None),
    )
    .unwrap();`
$DIR/storage/backup/backup-cli/src/backup_types/epoch_ending/tests.rs: `.create_as_dir()`
$DIR/storage/backup/backup-cli/src/backup_types/epoch_ending/tests.rs: `.create_as_dir()`
$DIR/storage/backup/backup-cli/src/backup_types/epoch_ending/tests.rs: `.path()`
$DIR/storage/backup/backup-cli/src/backup_types/epoch_ending/tests.rs: `.last()`
$DIR/storage/backup/backup-cli/src/backup_types/epoch_ending/tests.rs: `.ledger_info()`
$DIR/storage/backup/backup-cli/src/backup_types/epoch_ending/tests.rs: `.next_block_epoch()`
$DIR/storage/backup/backup-cli/src/backup_types/epoch_ending/tests.rs: `.len()`
$DIR/storage/backup/backup-cli/src/backup_types/epoch_ending/tests.rs: `.ledger_info()`
$DIR/storage/backup/backup-cli/src/backup_types/epoch_ending/tests.rs: `.version()`
$DIR/storage/backup/backup-cli/src/backup_types/epoch_ending/tests.rs: `.block_on(
            EpochEndingBackupController::new(
                EpochEndingBackupOpt {
                    start_epoch: 0,
                    end_epoch: latest_epoch,
                },
                GlobalBackupOpt {
                    max_chunk_size: 1024,
                },
                client,
                Arc::clone(&store),
            )
            .run(),
        )`
$DIR/storage/backup/backup-cli/src/backup_types/epoch_ending/tests.rs: `.run()`
$DIR/storage/backup/backup-cli/src/backup_types/epoch_ending/tests.rs: `.block_on(
        EpochEndingRestoreController::new(
            EpochEndingRestoreOpt { manifest_handle },
            GlobalRestoreOpt {
                db_dir: Some(tgt_db_dir.path().to_path_buf()),
                dry_run: false,
                target_version: Some(target_version),
                trusted_waypoints: TrustedWaypointOpt::default(),
                rocksdb_opt: RocksdbOpt::default(),
                concurernt_downloads: ConcurrentDownloadsOpt::default(),
            }
            .try_into()
            .unwrap(),
            store,
        )
        .run(None),
    )`
$DIR/storage/backup/backup-cli/src/backup_types/epoch_ending/tests.rs: `.path()`
$DIR/storage/backup/backup-cli/src/backup_types/epoch_ending/tests.rs: `.try_into()`
$DIR/storage/backup/backup-cli/src/backup_types/epoch_ending/tests.rs: `.run(None)`
$DIR/storage/backup/backup-cli/src/backup_types/epoch_ending/tests.rs: `.into_iter()`
$DIR/storage/backup/backup-cli/src/backup_types/epoch_ending/tests.rs: `.map(|(_, li)| li)`
$DIR/storage/backup/backup-cli/src/backup_types/epoch_ending/tests.rs: `.filter(|li| li.ledger_info().ends_epoch() && li.ledger_info().version() <= target_version)`
$DIR/storage/backup/backup-cli/src/backup_types/epoch_ending/tests.rs: `.ledger_info()`
$DIR/storage/backup/backup-cli/src/backup_types/epoch_ending/tests.rs: `.ends_epoch()`
$DIR/storage/backup/backup-cli/src/backup_types/epoch_ending/tests.rs: `.ledger_info()`
$DIR/storage/backup/backup-cli/src/backup_types/epoch_ending/tests.rs: `.version()`
$DIR/storage/backup/backup-cli/src/backup_types/epoch_ending/tests.rs: `.collect::<Vec<_>>()`
$DIR/storage/backup/backup-cli/src/backup_types/epoch_ending/tests.rs: `.last()`
$DIR/storage/backup/backup-cli/src/backup_types/epoch_ending/tests.rs: `.map(|li| li.ledger_info().next_block_epoch())`
$DIR/storage/backup/backup-cli/src/backup_types/epoch_ending/tests.rs: `.ledger_info()`
$DIR/storage/backup/backup-cli/src/backup_types/epoch_ending/tests.rs: `.next_block_epoch()`
$DIR/storage/backup/backup-cli/src/backup_types/epoch_ending/tests.rs: `.unwrap_or(0)`
$DIR/storage/backup/backup-cli/src/backup_types/state_snapshot/tests.rs: `tgt_db_dir.create_as_dir().unwrap();`
$DIR/storage/backup/backup-cli/src/backup_types/state_snapshot/tests.rs: `backup_dir.create_as_dir().unwrap();`
$DIR/storage/backup/backup-cli/src/backup_types/state_snapshot/tests.rs: `rt.block_on(
        StateSnapshotRestoreController::new(
            StateSnapshotRestoreOpt {
                manifest_handle,
                version: PRE_GENESIS_VERSION,
            },
            GlobalRestoreOpt {
                dry_run: false,
                db_dir: Some(tgt_db_dir.path().to_path_buf()),
                target_version: None, // max
                trusted_waypoints: TrustedWaypointOpt::default(),
                rocksdb_opt: RocksdbOpt::default(),
                concurernt_downloads: ConcurrentDownloadsOpt::default(),
            }
            .try_into()
            .unwrap(),
            store,
            None, /* epoch_history */
        )
        .run(),
    )
    .unwrap();`
$DIR/storage/backup/backup-cli/src/backup_types/state_snapshot/tests.rs: `.create_as_dir()`
$DIR/storage/backup/backup-cli/src/backup_types/state_snapshot/tests.rs: `.create_as_dir()`
$DIR/storage/backup/backup-cli/src/backup_types/state_snapshot/tests.rs: `.path()`
$DIR/storage/backup/backup-cli/src/backup_types/state_snapshot/tests.rs: `.get_latest_tree_state()`
$DIR/storage/backup/backup-cli/src/backup_types/state_snapshot/tests.rs: `.block_on(
            StateSnapshotBackupController::new(
                StateSnapshotBackupOpt { version },
                GlobalBackupOpt {
                    max_chunk_size: 500,
                },
                client,
                Arc::clone(&store),
            )
            .run(),
        )`
$DIR/storage/backup/backup-cli/src/backup_types/state_snapshot/tests.rs: `.run()`
$DIR/storage/backup/backup-cli/src/backup_types/state_snapshot/tests.rs: `.block_on(
        StateSnapshotRestoreController::new(
            StateSnapshotRestoreOpt {
                manifest_handle,
                version: PRE_GENESIS_VERSION,
            },
            GlobalRestoreOpt {
                dry_run: false,
                db_dir: Some(tgt_db_dir.path().to_path_buf()),
                target_version: None, // max
                trusted_waypoints: TrustedWaypointOpt::default(),
                rocksdb_opt: RocksdbOpt::default(),
                concurernt_downloads: ConcurrentDownloadsOpt::default(),
            }
            .try_into()
            .unwrap(),
            store,
            None, /* epoch_history */
        )
        .run(),
    )`
$DIR/storage/backup/backup-cli/src/backup_types/state_snapshot/tests.rs: `.path()`
$DIR/storage/backup/backup-cli/src/backup_types/state_snapshot/tests.rs: `.try_into()`
$DIR/storage/backup/backup-cli/src/backup_types/state_snapshot/tests.rs: `.run()`
$DIR/storage/backup/backup-cli/src/backup_types/transaction/tests.rs: `tgt_db_dir.create_as_dir().unwrap();`
$DIR/storage/backup/backup-cli/src/backup_types/transaction/tests.rs: `backup_dir.create_as_dir().unwrap();`
$DIR/storage/backup/backup-cli/src/backup_types/transaction/tests.rs: `rt.block_on(
        TransactionRestoreController::new(
            TransactionRestoreOpt {
                manifest_handle,
                replay_from_version: None, // max
            },
            GlobalRestoreOpt {
                dry_run: false,
                db_dir: Some(tgt_db_dir.path().to_path_buf()),
                target_version: Some(target_version),
                trusted_waypoints: TrustedWaypointOpt::default(),
                rocksdb_opt: RocksdbOpt::default(),
                concurernt_downloads: ConcurrentDownloadsOpt::default(),
            }
            .try_into()
            .unwrap(),
            store,
            None, /* epoch_history */
        )
        .run(),
    )
    .unwrap();`
$DIR/storage/backup/backup-cli/src/backup_types/transaction/tests.rs: `.create_as_dir()`
$DIR/storage/backup/backup-cli/src/backup_types/transaction/tests.rs: `.create_as_dir()`
$DIR/storage/backup/backup-cli/src/backup_types/transaction/tests.rs: `.path()`
$DIR/storage/backup/backup-cli/src/backup_types/transaction/tests.rs: `.last()`
$DIR/storage/backup/backup-cli/src/backup_types/transaction/tests.rs: `.ledger_info()`
$DIR/storage/backup/backup-cli/src/backup_types/transaction/tests.rs: `.version()`
$DIR/storage/backup/backup-cli/src/backup_types/transaction/tests.rs: `.fold(0, |x, b| x + b.0.len())`
$DIR/storage/backup/backup-cli/src/backup_types/transaction/tests.rs: `.len()`
$DIR/storage/backup/backup-cli/src/backup_types/transaction/tests.rs: `.flat_map(|(txns, _li)| txns)`
$DIR/storage/backup/backup-cli/src/backup_types/transaction/tests.rs: `.map(|txn_to_commit| txn_to_commit.transaction())`
$DIR/storage/backup/backup-cli/src/backup_types/transaction/tests.rs: `.transaction()`
$DIR/storage/backup/backup-cli/src/backup_types/transaction/tests.rs: `.collect::<Vec<_>>()`
$DIR/storage/backup/backup-cli/src/backup_types/transaction/tests.rs: `.map(|t| bcs::to_bytes(t).unwrap().len())`
$DIR/storage/backup/backup-cli/src/backup_types/transaction/tests.rs: `.len()`
$DIR/storage/backup/backup-cli/src/backup_types/transaction/tests.rs: `.max()`
$DIR/storage/backup/backup-cli/src/backup_types/transaction/tests.rs: `.block_on(
            TransactionBackupController::new(
                TransactionBackupOpt {
                    start_version: first_ver_to_backup,
                    num_transactions: num_txns_to_backup,
                },
                GlobalBackupOpt { max_chunk_size },
                client,
                Arc::clone(&store),
            )
            .run(),
        )`
$DIR/storage/backup/backup-cli/src/backup_types/transaction/tests.rs: `.run()`
$DIR/storage/backup/backup-cli/src/backup_types/transaction/tests.rs: `.block_on(
        TransactionRestoreController::new(
            TransactionRestoreOpt {
                manifest_handle,
                replay_from_version: None, // max
            },
            GlobalRestoreOpt {
                dry_run: false,
                db_dir: Some(tgt_db_dir.path().to_path_buf()),
                target_version: Some(target_version),
                trusted_waypoints: TrustedWaypointOpt::default(),
                rocksdb_opt: RocksdbOpt::default(),
                concurernt_downloads: ConcurrentDownloadsOpt::default(),
            }
            .try_into()
            .unwrap(),
            store,
            None, /* epoch_history */
        )
        .run(),
    )`
$DIR/storage/backup/backup-cli/src/backup_types/transaction/tests.rs: `.path()`
$DIR/storage/backup/backup-cli/src/backup_types/transaction/tests.rs: `.try_into()`
$DIR/storage/backup/backup-cli/src/backup_types/transaction/tests.rs: `.run()`
$DIR/storage/backup/backup-cli/src/backup_types/transaction/tests.rs: `.get_transactions(
            first_ver_to_backup,
            num_txns_to_restore as u64,
            target_version,
            true, /* fetch_events */
        )`
$DIR/storage/backup/backup-cli/src/storage/command_adapter/tests.rs: `std::env::remove_var("MYVAR2343u2");`
$DIR/storage/backup/backup-cli/src/storage/command_adapter/tests.rs: `std::env::set_var("MYVAR2343u2", "hehe");`
$DIR/storage/backup/backup-cli/src/storage/command_adapter/tests.rs: `.open_for_read(handle)`
$DIR/storage/backup/backup-cli/src/storage/command_adapter/tests.rs: `.read_to_string(&mut buf)`
$DIR/storage/backup/backup-cli/src/storage/command_adapter/tests.rs: `.create_for_write(handle, &name)`
$DIR/storage/backup/backup-cli/src/storage/command_adapter/tests.rs: `.write_all(&[0; 1024])`
$DIR/storage/backup/backup-cli/src/storage/command_adapter/tests.rs: `.shutdown()`
$DIR/storage/backup/backup-cli/src/storage/command_adapter/tests.rs: `.save_metadata_line(&name, &TextLine::new("1234").unwrap())`
$DIR/storage/backup/backup-cli/src/utils/read_record_bytes.rs: `good_record.extend_from_slice(data);`
$DIR/storage/backup/backup-cli/src/utils/read_record_bytes.rs: `bad_len.pop();`
$DIR/storage/backup/backup-cli/src/utils/read_record_bytes.rs: `bad_data.push(0u8);`
$DIR/storage/backup/backup-cli/src/utils/read_record_bytes.rs: `.len()`
$DIR/storage/backup/backup-cli/src/utils/read_record_bytes.rs: `.to_be_bytes()`
$DIR/storage/backup/backup-cli/src/utils/read_record_bytes.rs: `.extend_from_slice(data)`
$DIR/storage/backup/backup-cli/src/utils/read_record_bytes.rs: `.to_be_bytes()`
$DIR/storage/backup/backup-cli/src/utils/read_record_bytes.rs: `.to_be_bytes()`
$DIR/storage/backup/backup-cli/src/utils/read_record_bytes.rs: `.to_be_bytes()`
$DIR/storage/backup/backup-cli/src/utils/read_record_bytes.rs: `.pop()`
$DIR/storage/backup/backup-cli/src/utils/read_record_bytes.rs: `.to_be_bytes()`
$DIR/storage/backup/backup-cli/src/utils/read_record_bytes.rs: `.push(0u8)`
$DIR/storage/backup/backup-service/src/lib.rs: `runtime.handle().spawn(server);`
$DIR/storage/backup/backup-service/src/lib.rs: `.get_backup_handler()`
$DIR/storage/backup/backup-service/src/lib.rs: `.thread_name("backup")`
$DIR/storage/backup/backup-service/src/lib.rs: `.enable_all()`
$DIR/storage/backup/backup-service/src/lib.rs: `.build()`
$DIR/storage/backup/backup-service/src/lib.rs: `.enter()`
$DIR/storage/backup/backup-service/src/lib.rs: `.bind(address)`
$DIR/storage/backup/backup-service/src/lib.rs: `.handle()`
$DIR/storage/backup/backup-service/src/lib.rs: `.spawn(server)`
$DIR/storage/diem-scratchpad/src/sparse_merkle/sparse_merkle_test.rs: `key[n] = byte;`
$DIR/storage/diem-scratchpad/src/sparse_merkle/sparse_merkle_test.rs: `*buf.last_mut().unwrap() |= 1;`
$DIR/storage/diem-scratchpad/src/sparse_merkle/sparse_merkle_test.rs: `siblings.push(leaf2_hash);`
$DIR/storage/diem-scratchpad/src/sparse_merkle/sparse_merkle_test.rs: `siblings.reverse();`
$DIR/storage/diem-scratchpad/src/sparse_merkle/sparse_merkle_test.rs: `drop(smt1);`
$DIR/storage/diem-scratchpad/src/sparse_merkle/sparse_merkle_test.rs: `.test_only_hash()`
$DIR/storage/diem-scratchpad/src/sparse_merkle/sparse_merkle_test.rs: `.test_only_hash()`
$DIR/storage/diem-scratchpad/src/sparse_merkle/sparse_merkle_test.rs: `.into()`
$DIR/storage/diem-scratchpad/src/sparse_merkle/sparse_merkle_test.rs: `.hash()`
$DIR/storage/diem-scratchpad/src/sparse_merkle/sparse_merkle_test.rs: `.batch_update(vec![(key, &new_value)], &ProofReader::default())`
$DIR/storage/diem-scratchpad/src/sparse_merkle/sparse_merkle_test.rs: `.test_only_hash()`
$DIR/storage/diem-scratchpad/src/sparse_merkle/sparse_merkle_test.rs: `.into()`
$DIR/storage/diem-scratchpad/src/sparse_merkle/sparse_merkle_test.rs: `.hash()`
$DIR/storage/diem-scratchpad/src/sparse_merkle/sparse_merkle_test.rs: `.batch_update(vec![(key2, &value2)], &ProofReader::default())`
$DIR/storage/diem-scratchpad/src/sparse_merkle/sparse_merkle_test.rs: `.test_only_hash()`
$DIR/storage/diem-scratchpad/src/sparse_merkle/sparse_merkle_test.rs: `.test_only_hash()`
$DIR/storage/diem-scratchpad/src/sparse_merkle/sparse_merkle_test.rs: `.into()`
$DIR/storage/diem-scratchpad/src/sparse_merkle/sparse_merkle_test.rs: `.hash()`
$DIR/storage/diem-scratchpad/src/sparse_merkle/sparse_merkle_test.rs: `.hash()`
$DIR/storage/diem-scratchpad/src/sparse_merkle/sparse_merkle_test.rs: `.batch_update(vec![(key3, &value3)], &ProofReader::default())`
$DIR/storage/diem-scratchpad/src/sparse_merkle/sparse_merkle_test.rs: `.test_only_hash()`
$DIR/storage/diem-scratchpad/src/sparse_merkle/sparse_merkle_test.rs: `.test_only_hash()`
$DIR/storage/diem-scratchpad/src/sparse_merkle/sparse_merkle_test.rs: `.hash()`
$DIR/storage/diem-scratchpad/src/sparse_merkle/sparse_merkle_test.rs: `.into()`
$DIR/storage/diem-scratchpad/src/sparse_merkle/sparse_merkle_test.rs: `.hash()`
$DIR/storage/diem-scratchpad/src/sparse_merkle/sparse_merkle_test.rs: `.batch_update(vec![(key, &new_value)], &proof_reader)`
$DIR/storage/diem-scratchpad/src/sparse_merkle/sparse_merkle_test.rs: `.test_only_hash()`
$DIR/storage/diem-scratchpad/src/sparse_merkle/sparse_merkle_test.rs: `.hash()`
$DIR/storage/diem-scratchpad/src/sparse_merkle/sparse_merkle_test.rs: `.into()`
$DIR/storage/diem-scratchpad/src/sparse_merkle/sparse_merkle_test.rs: `.hash()`
$DIR/storage/diem-scratchpad/src/sparse_merkle/sparse_merkle_test.rs: `.hash()`
$DIR/storage/diem-scratchpad/src/sparse_merkle/sparse_merkle_test.rs: `.batch_update(vec![(key2, &value2)], &proof_reader)`
$DIR/storage/diem-scratchpad/src/sparse_merkle/sparse_merkle_test.rs: `.test_only_hash()`
$DIR/storage/diem-scratchpad/src/sparse_merkle/sparse_merkle_test.rs: `.test_only_hash()`
$DIR/storage/diem-scratchpad/src/sparse_merkle/sparse_merkle_test.rs: `.into()`
$DIR/storage/diem-scratchpad/src/sparse_merkle/sparse_merkle_test.rs: `.hash()`
$DIR/storage/diem-scratchpad/src/sparse_merkle/sparse_merkle_test.rs: `.batch_update(vec![(key3, &value3)], &proof_reader)`
$DIR/storage/diem-scratchpad/src/sparse_merkle/sparse_merkle_test.rs: `.last_mut()`
$DIR/storage/diem-scratchpad/src/sparse_merkle/sparse_merkle_test.rs: `.hash()`
$DIR/storage/diem-scratchpad/src/sparse_merkle/sparse_merkle_test.rs: `.hash()`
$DIR/storage/diem-scratchpad/src/sparse_merkle/sparse_merkle_test.rs: `.take(255)`
$DIR/storage/diem-scratchpad/src/sparse_merkle/sparse_merkle_test.rs: `.collect()`
$DIR/storage/diem-scratchpad/src/sparse_merkle/sparse_merkle_test.rs: `.push(leaf2_hash)`
$DIR/storage/diem-scratchpad/src/sparse_merkle/sparse_merkle_test.rs: `.reverse()`
$DIR/storage/diem-scratchpad/src/sparse_merkle/sparse_merkle_test.rs: `.fold(leaf1_hash, |previous_hash, hash| {
        hash_internal(previous_hash, *hash)
    })`
$DIR/storage/diem-scratchpad/src/sparse_merkle/sparse_merkle_test.rs: `.batch_update(vec![(key1, &new_blob1)], &proof_reader)`
$DIR/storage/diem-scratchpad/src/sparse_merkle/sparse_merkle_test.rs: `.hash()`
$DIR/storage/diem-scratchpad/src/sparse_merkle/sparse_merkle_test.rs: `.fold(new_leaf1_hash, |previous_hash, hash| {
        hash_internal(previous_hash, *hash)
    })`
$DIR/storage/diem-scratchpad/src/sparse_merkle/sparse_merkle_test.rs: `.test_only_hash()`
$DIR/storage/diem-scratchpad/src/sparse_merkle/sparse_merkle_test.rs: `.test_only_hash()`
$DIR/storage/diem-scratchpad/src/sparse_merkle/sparse_merkle_test.rs: `.test_only_hash()`
$DIR/storage/diem-scratchpad/src/sparse_merkle/sparse_merkle_test.rs: `.hash()`
$DIR/storage/diem-scratchpad/src/sparse_merkle/sparse_merkle_test.rs: `.hash()`
$DIR/storage/diem-scratchpad/src/sparse_merkle/sparse_merkle_test.rs: `.hash()`
$DIR/storage/diem-scratchpad/src/sparse_merkle/sparse_merkle_test.rs: `.test_only_hash()`
$DIR/storage/diem-scratchpad/src/sparse_merkle/sparse_merkle_test.rs: `.hash()`
$DIR/storage/diem-scratchpad/src/sparse_merkle/sparse_merkle_test.rs: `.batch_update(vec![(key4, &value4)], &proof_reader)`
$DIR/storage/diem-scratchpad/src/sparse_merkle/sparse_merkle_test.rs: `.test_only_hash()`
$DIR/storage/diem-scratchpad/src/sparse_merkle/sparse_merkle_test.rs: `.hash()`
$DIR/storage/diem-scratchpad/src/sparse_merkle/sparse_merkle_test.rs: `.batch_update(vec![(key1, &value1)], &proof_reader)`
$DIR/storage/diem-scratchpad/src/sparse_merkle/sparse_merkle_test.rs: `.hash()`
$DIR/storage/diem-scratchpad/src/sparse_merkle/sparse_merkle_test.rs: `.batch_update(vec![(key4, &value4)], &proof_reader)`
$DIR/storage/diem-scratchpad/src/sparse_merkle/sparse_merkle_test.rs: `.batch_update(
                vec![(HashValue::zero(), &AccountStateBlob::from(b"zero".to_vec()))],
                &proof_reader,
            )`
$DIR/storage/diemdb/src/diemdb_test.rs: `db.db
        .put::<JellyfishMerkleNodeSchema>(
            &NodeKey::new_empty_path(PRE_GENESIS_VERSION),
            &Node::new_leaf(address.hash(), blob.clone()),
        )
        .unwrap();`
$DIR/storage/diemdb/src/diemdb_test.rs: `db.ledger_store
        .put_transaction_infos(version, &[txn_info.clone()], &mut cs)
        .unwrap();`
$DIR/storage/diemdb/src/diemdb_test.rs: `db.db.write_schemas(cs.batch).unwrap();`
$DIR/storage/diemdb/src/diemdb_test.rs: `.get_latest_tree_state()`
$DIR/storage/diemdb/src/diemdb_test.rs: `.db
        .put::<JellyfishMerkleNodeSchema>(
            &NodeKey::new_empty_path(PRE_GENESIS_VERSION),
            &Node::new_leaf(address.hash(), blob.clone()),
        )`
$DIR/storage/diemdb/src/diemdb_test.rs: `.hash()`
$DIR/storage/diemdb/src/diemdb_test.rs: `.hash()`
$DIR/storage/diemdb/src/diemdb_test.rs: `.hash()`
$DIR/storage/diemdb/src/diemdb_test.rs: `.hash()`
$DIR/storage/diemdb/src/diemdb_test.rs: `.get_latest_tree_state()`
$DIR/storage/diemdb/src/diemdb_test.rs: `.get_latest_tree_state()`
$DIR/storage/diemdb/src/diemdb_test.rs: `.ledger_store
        .put_transaction_infos(version, &[txn_info.clone()], &mut cs)`
$DIR/storage/diemdb/src/diemdb_test.rs: `.db.write_schemas(cs.batch)`
$DIR/storage/diemdb/src/ledger_counters/test.rs: `bumps
        .bump(LedgerCounter::NewStateLeaves, 1)
        .bump(LedgerCounter::StaleStateLeaves, 1);`
$DIR/storage/diemdb/src/ledger_counters/test.rs: `counters.bump(&bumps);`
$DIR/storage/diemdb/src/ledger_counters/test.rs: `bumps
        .bump(LedgerCounter::EventsCreated, 1)
        .bump(LedgerCounter::NewStateLeaves, 1);`
$DIR/storage/diemdb/src/ledger_counters/test.rs: `counters.bump(&bumps);`
$DIR/storage/diemdb/src/ledger_counters/test.rs: `.bump(LedgerCounter::NewStateLeaves, 1)`
$DIR/storage/diemdb/src/ledger_counters/test.rs: `.bump(LedgerCounter::StaleStateLeaves, 1)`
$DIR/storage/diemdb/src/ledger_counters/test.rs: `.bump(&bumps)`
$DIR/storage/diemdb/src/ledger_counters/test.rs: `.bump(LedgerCounter::EventsCreated, 1)`
$DIR/storage/diemdb/src/ledger_counters/test.rs: `.bump(LedgerCounter::NewStateLeaves, 1)`
$DIR/storage/diemdb/src/ledger_counters/test.rs: `.bump(&bumps)`
$DIR/storage/diemdb/src/pruner/test.rs: `db.write_schemas(cs.batch).unwrap();`
$DIR/storage/diemdb/src/pruner/test.rs: `pruner.wake_and_wait(0 /* latest_version */).unwrap();`
$DIR/storage/diemdb/src/pruner/test.rs: `pruner.wake_and_wait(1 /* latest_version */).unwrap();`
$DIR/storage/diemdb/src/pruner/test.rs: `pruner.wake_and_wait(2 /* latest_version */).unwrap();`
$DIR/storage/diemdb/src/pruner/test.rs: `command_sender
            .send(Command::Prune {
                least_readable_version: 1,
            })
            .unwrap();`
$DIR/storage/diemdb/src/pruner/test.rs: `command_sender
            .send(Command::Prune {
                least_readable_version: 2,
            })
            .unwrap();`
$DIR/storage/diemdb/src/pruner/test.rs: `command_sender.send(Command::Quit).unwrap();`
$DIR/storage/diemdb/src/pruner/test.rs: `worker.work();`
$DIR/storage/diemdb/src/pruner/test.rs: `.put_account_state_sets(
            vec![account_state_set.into_iter().collect::<HashMap<_, _>>()],
            None,
            version,
            &mut cs,
        )`
$DIR/storage/diemdb/src/pruner/test.rs: `.write_schemas(cs.batch)`
$DIR/storage/diemdb/src/pruner/test.rs: `.get_account_state_with_proof_by_version(address, version)`
$DIR/storage/diemdb/src/pruner/test.rs: `.wake_and_wait(0 /* latest_version */)`
$DIR/storage/diemdb/src/pruner/test.rs: `.wake_and_wait(1 /* latest_version */)`
$DIR/storage/diemdb/src/pruner/test.rs: `.wake_and_wait(2 /* latest_version */)`
$DIR/storage/diemdb/src/pruner/test.rs: `.send(Command::Prune {
                least_readable_version: 1,
            })`
$DIR/storage/diemdb/src/pruner/test.rs: `.send(Command::Prune {
                least_readable_version: 2,
            })`
$DIR/storage/diemdb/src/pruner/test.rs: `.send(Command::Quit)`
$DIR/storage/diemdb/src/pruner/test.rs: `.work()`
$DIR/storage/diemdb/src/state_store/state_store_test.rs: `store.db.write_schemas(cs.batch).unwrap();`
$DIR/storage/diemdb/src/state_store/state_store_test.rs: `pruner::prune_state(
        Arc::clone(&store.db),
        least_readable_version,
        target_least_readable_version,
        limit,
    )
    .unwrap();`
$DIR/storage/diemdb/src/state_store/state_store_test.rs: `proof.verify(root, address.hash(), value.as_ref()).unwrap();`
$DIR/storage/diemdb/src/state_store/state_store_test.rs: `root = put_account_state_set(
        store,
        vec![
            (address1, value1_update.clone()),
            (address2, value2.clone()),
            (address3, value3.clone()),
        ],
        1, /* version */
        4, /* expected_nodes_created */
        1, /* expected_nodes_retired */
        1, /* expected_blobs_retired */
    );`
$DIR/storage/diemdb/src/state_store/state_store_test.rs: `.len()`
$DIR/storage/diemdb/src/state_store/state_store_test.rs: `.put_account_state_sets(
            vec![account_state_set.into_iter().collect::<HashMap<_, _>>()],
            None,
            version,
            &mut cs,
        )`
$DIR/storage/diemdb/src/state_store/state_store_test.rs: `.counter_bumps(version)`
$DIR/storage/diemdb/src/state_store/state_store_test.rs: `.db.write_schemas(cs.batch)`
$DIR/storage/diemdb/src/state_store/state_store_test.rs: `.get_account_state_with_proof_by_version(address, version)`
$DIR/storage/diemdb/src/state_store/state_store_test.rs: `.verify(root, address.hash(), value.as_ref())`
$DIR/storage/diemdb/src/state_store/state_store_test.rs: `.hash()`
$DIR/storage/diemdb/src/system_store/test.rs: `store.db.write_schemas(cs.batch).unwrap();`
$DIR/storage/diemdb/src/system_store/test.rs: `events_created_list
        .into_iter()
        .enumerate()
        .for_each(|(i, count)| {
            let mut bumps = LedgerCounterBumps::new();
            bumps.bump(LedgerCounter::EventsCreated, count);
            bumps_map.insert(first_version + i as u64, bumps);
        });`
$DIR/storage/diemdb/src/system_store/test.rs: `bumps.bump(LedgerCounter::EventsCreated, count);`
$DIR/storage/diemdb/src/system_store/test.rs: `bumps_map.insert(first_version + i as u64, bumps);`
$DIR/storage/diemdb/src/system_store/test.rs: `.bump_ledger_counters(first_version, last_version, &mut cs)`
$DIR/storage/diemdb/src/system_store/test.rs: `.db.write_schemas(cs.batch)`
$DIR/storage/diemdb/src/system_store/test.rs: `.into_iter()`
$DIR/storage/diemdb/src/system_store/test.rs: `.enumerate()`
$DIR/storage/diemdb/src/system_store/test.rs: `.for_each(|(i, count)| {
            let mut bumps = LedgerCounterBumps::new();
            bumps.bump(LedgerCounter::EventsCreated, count);
            bumps_map.insert(first_version + i as u64, bumps);
        })`
$DIR/storage/diemdb/src/system_store/test.rs: `.bump(LedgerCounter::EventsCreated, count)`
$DIR/storage/diemdb/src/system_store/test.rs: `.insert(first_version + i as u64, bumps)`
$DIR/storage/jellyfish-merkle/src/iterator/iterator_test.rs: `db.write_tree_update_batch(batch).unwrap();`
$DIR/storage/jellyfish-merkle/src/iterator/iterator_test.rs: `run_tests(db, &btree, 0 /* version */);`
$DIR/storage/jellyfish-merkle/src/iterator/iterator_test.rs: `db.write_tree_update_batch(batch).unwrap();`
$DIR/storage/jellyfish-merkle/src/iterator/iterator_test.rs: `.step_by(11)`
$DIR/storage/jellyfish-merkle/src/iterator/iterator_test.rs: `.to_be_bytes()`
$DIR/storage/jellyfish-merkle/src/iterator/iterator_test.rs: `.put_value_set(btree.clone().into_iter().collect(), 0 /* version */)`
$DIR/storage/jellyfish-merkle/src/iterator/iterator_test.rs: `.into_iter()`
$DIR/storage/jellyfish-merkle/src/iterator/iterator_test.rs: `.collect()`
$DIR/storage/jellyfish-merkle/src/iterator/iterator_test.rs: `.write_tree_update_batch(batch)`
$DIR/storage/jellyfish-merkle/src/iterator/iterator_test.rs: `.to_be_bytes()`
$DIR/storage/jellyfish-merkle/src/iterator/iterator_test.rs: `.put_value_set(vec![(key, value)], i as Version)`
$DIR/storage/jellyfish-merkle/src/iterator/iterator_test.rs: `.write_tree_update_batch(batch)`
$DIR/storage/jellyfish-merkle/src/iterator/iterator_test.rs: `.len()`
$DIR/storage/jellyfish-merkle/src/iterator/iterator_test.rs: `.keys()`
$DIR/storage/jellyfish-merkle/src/iterator/iterator_test.rs: `.nth(i)`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `db.write_tree_update_batch(batch).unwrap();`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `db.put_node(pre_genesis_root_key, Node::new_leaf(key1, value1.clone()))
        .unwrap();`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `db.write_tree_update_batch(batch).unwrap();`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `db.purge_stale_nodes(0).unwrap();`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `db.write_tree_update_batch(batch).unwrap();`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `db.write_tree_update_batch(batch).unwrap();`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `children.insert(
        Nibble::from(0),
        Child::new(leaf1.hash(), 1 /* version */, true /* is_leaf */),
    );`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `children.insert(
        Nibble::from(15),
        Child::new(leaf2.hash(), 1 /* version */, true /* is_leaf */),
    );`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `db.write_tree_update_batch(batch).unwrap();`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `db.write_tree_update_batch(batch).unwrap();`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `children.insert(
            Nibble::from(0),
            Child::new(leaf1.hash(), 1 /* version */, true /* is_leaf */),
        );`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `children.insert(
            Nibble::from(1),
            Child::new(leaf2.hash(), 1 /* version */, true /* is_leaf */),
        );`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `children.insert(
            Nibble::from(0),
            Child::new(
                internal.hash(),
                1,     /* version */
                false, /* is_leaf */
            ),
        );`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `db.write_tree_update_batch(batch).unwrap();`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `db.purge_stale_nodes(1).unwrap();`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `db.purge_stale_nodes(2).unwrap();`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `to_verify.remove(1);`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `db.write_tree_update_batch(batch).unwrap();`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `verify_fn(&tree, 0);`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `db.write_tree_update_batch(batch).unwrap();`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `verify_fn(&tree, 6);`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `db.purge_stale_nodes(1).unwrap();`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `db.purge_stale_nodes(2).unwrap();`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `db.purge_stale_nodes(3).unwrap();`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `db.purge_stale_nodes(4).unwrap();`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `db.purge_stale_nodes(5).unwrap();`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `db.purge_stale_nodes(6).unwrap();`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `verify_fn(&tree, 6);`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `db.write_tree_update_batch(batch).unwrap();`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `keys.push(HashValue::random());`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `values.push(ValueBlob::from(HashValue::random().to_vec()));`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `keyed_value_set.push(iter.next().unwrap());`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `db.write_tree_update_batch(batch.clone()).unwrap();`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `root_hashes_one_by_one.push(root);`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `batch_one_by_one.node_batch.extend(batch.node_batch);`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `batch_one_by_one
                .stale_node_index_batch
                .extend(batch.stale_node_index_batch);`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `batch_one_by_one.node_stats.extend(batch.node_stats);`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `keyed_value_set.push(iter.next().unwrap());`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `value_sets.push(keyed_value_set);`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `actual_seed[..seed.len()].copy_from_slice(seed);`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `kvs.push((key, value));`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `db.write_tree_update_batch(batch).unwrap();`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `actual_seed[..seed.len()].copy_from_slice(seed);`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `kvs.push((key, value.clone(), new_value.clone()));`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `roots.push(root[0]);`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `db.write_tree_update_batch(batch).unwrap();`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `roots.push(root[0]);`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `db.write_tree_update_batch(batch).unwrap();`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `.batch_put_value_sets(vec![vec![(key, value.clone())]], None, 0 /* version */)`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `.write_tree_update_batch(batch)`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `.put_node(pre_genesis_root_key, Node::new_leaf(key1, value1.clone()))`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `.batch_put_value_sets(
            vec![vec![(key2, value2.clone())]],
            None,
            0, /* version */
        )`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `.write_tree_update_batch(batch)`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `.purge_stale_nodes(0)`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `.batch_put_value_sets(
            vec![vec![(key1, value1.clone())]],
            None,
            0, /* version */
        )`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `.write_tree_update_batch(batch)`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `.batch_put_value_sets(
            vec![vec![(key2, value2.clone())]],
            None,
            1, /* version */
        )`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `.write_tree_update_batch(batch)`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `.insert(
        Nibble::from(0),
        Child::new(leaf1.hash(), 1 /* version */, true /* is_leaf */),
    )`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `.hash()`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `.insert(
        Nibble::from(15),
        Child::new(leaf2.hash(), 1 /* version */, true /* is_leaf */),
    )`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `.hash()`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `.batch_put_value_sets(
            vec![vec![(key1, value1.clone())]],
            None,
            0, /* version */
        )`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `.write_tree_update_batch(batch)`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `.batch_put_value_sets(
            vec![vec![(key2, value2.clone())]],
            None,
            1, /* version */
        )`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `.write_tree_update_batch(batch)`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `.insert(
            Nibble::from(0),
            Child::new(leaf1.hash(), 1 /* version */, true /* is_leaf */),
        )`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `.hash()`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `.insert(
            Nibble::from(1),
            Child::new(leaf2.hash(), 1 /* version */, true /* is_leaf */),
        )`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `.hash()`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `.insert(
            Nibble::from(0),
            Child::new(
                internal.hash(),
                1,     /* version */
                false, /* is_leaf */
            ),
        )`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `.hash()`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `.batch_put_value_sets(
            vec![vec![(key2, value2_update.clone())]],
            None,
            2, /* version */
        )`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `.write_tree_update_batch(batch)`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `.purge_stale_nodes(1)`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `.purge_stale_nodes(2)`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `.flatten()`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `.collect::<Vec<_>>()`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `.remove(1)`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `.put_value_set(one_batch, 0 /* version */)`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `.write_tree_update_batch(batch)`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `.batch_put_value_sets(batches, None, 0 /* first_version */)`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `.write_tree_update_batch(batch)`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `.purge_stale_nodes(1)`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `.purge_stale_nodes(2)`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `.purge_stale_nodes(3)`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `.purge_stale_nodes(4)`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `.purge_stale_nodes(5)`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `.purge_stale_nodes(6)`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `.batch_put_value_sets(
            vec![vec![
                (key1, value1.clone()),
                (key2, value2.clone()),
                (key3, value3.clone()),
            ]],
            None,
            0, /* version */
        )`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `.write_tree_update_batch(batch)`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `.get_with_proof(non_existing_key, 0)`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `.get_with_proof(non_existing_key, 0)`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `.get_with_proof(non_existing_key, 0)`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `.get_with_proof(HashValue::random(), 0)`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `.err()`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `.downcast::<MissingRootError>()`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `.push(HashValue::random())`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `.push(ValueBlob::from(HashValue::random().to_vec()))`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `.into_iter()`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `.zip(values.clone().into_iter())`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `.into_iter()`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `.push(iter.next().unwrap())`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `.next()`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `.put_value_set(keyed_value_set, version as Version)`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `.write_tree_update_batch(batch.clone())`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `.push(root)`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `.node_batch.extend(batch.node_batch)`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `.stale_node_index_batch
                .extend(batch.stale_node_index_batch)`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `.node_stats.extend(batch.node_stats)`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `.into_iter()`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `.zip(values.into_iter())`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `.into_iter()`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `.push(iter.next().unwrap())`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `.next()`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `.push(keyed_value_set)`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `.batch_put_value_sets(value_sets, None, 0 /* version */)`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `.len()`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `.copy_from_slice(seed)`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `.push((key, value))`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `.batch_put_value_sets(vec![kvs.clone()], None, 0 /* version */)`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `.write_tree_update_batch(batch)`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `.get_with_proof(*k, 0)`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `.len()`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `.copy_from_slice(seed)`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `.push((key, value.clone(), new_value.clone()))`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `.enumerate()`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `.batch_put_value_sets(vec![vec![(kvs.0, kvs.1.clone())]], None, idx as Version)`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `.push(root[0])`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `.write_tree_update_batch(batch)`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `.enumerate()`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `.batch_put_value_sets(vec![vec![(kvs.0, kvs.2.clone())]], None, version)`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `.push(root[0])`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `.write_tree_update_batch(batch)`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `.enumerate()`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `.gen_range(i..i + num_versions)`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `.get_with_proof(*k, random_version as Version)`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `.enumerate()`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `.gen_range(i + num_versions..2 * num_versions)`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `.get_with_proof(*k, random_version as Version)`
$DIR/storage/jellyfish-merkle/src/lib.rs: `.test_only_hash()`
$DIR/storage/jellyfish-merkle/src/lib.rs: `.test_only_hash()`
$DIR/storage/jellyfish-merkle/src/lib.rs: `.test_only_hash()`
$DIR/storage/jellyfish-merkle/src/lib.rs: `.test_only_hash()`
$DIR/storage/jellyfish-merkle/src/lib.rs: `.test_only_hash()`
$DIR/storage/jellyfish-merkle/src/lib.rs: `.test_only_hash()`
$DIR/storage/jellyfish-merkle/src/lib.rs: `.test_only_hash()`
$DIR/storage/jellyfish-merkle/src/lib.rs: `.test_only_hash()`
$DIR/storage/jellyfish-merkle/src/lib.rs: `.test_only_hash()`
$DIR/storage/jellyfish-merkle/src/node_type/node_type_test.rs: `*bytes.last_mut().unwrap() &= 0xf0;`
$DIR/storage/jellyfish-merkle/src/node_type/node_type_test.rs: `np.push(nibble);`
$DIR/storage/jellyfish-merkle/src/node_type/node_type_test.rs: `children.insert(
        Nibble::from(1),
        Child::new(leaf1_node.hash(), 0 /* version */, true),
    );`
$DIR/storage/jellyfish-merkle/src/node_type/node_type_test.rs: `children.insert(
        Nibble::from(2),
        Child::new(leaf2_node.hash(), 0 /* version */, true),
    );`
$DIR/storage/jellyfish-merkle/src/node_type/node_type_test.rs: `children.insert(
            Nibble::from(1),
            Child::new(
                HashValue::random(),
                0,    /* version */
                true, /* is_leaf */
            ),
        );`
$DIR/storage/jellyfish-merkle/src/node_type/node_type_test.rs: `InternalNode::new(children);`
$DIR/storage/jellyfish-merkle/src/node_type/node_type_test.rs: `children.insert(index1, Child::new(hash1, 0 /* version */, false));`
$DIR/storage/jellyfish-merkle/src/node_type/node_type_test.rs: `children.insert(index2, Child::new(hash2, 1 /* version */, false));`
$DIR/storage/jellyfish-merkle/src/node_type/node_type_test.rs: `children.insert(index1, Child::new(hash1, 0 /* version */, false));`
$DIR/storage/jellyfish-merkle/src/node_type/node_type_test.rs: `children.insert(index2, Child::new(hash2, 1 /* version */, false));`
$DIR/storage/jellyfish-merkle/src/node_type/node_type_test.rs: `.last_mut()`
$DIR/storage/jellyfish-merkle/src/node_type/node_type_test.rs: `.push(nibble)`
$DIR/storage/jellyfish-merkle/src/node_type/node_type_test.rs: `.bytes()`
$DIR/storage/jellyfish-merkle/src/node_type/node_type_test.rs: `.nibble_path()`
$DIR/storage/jellyfish-merkle/src/node_type/node_type_test.rs: `.nibble_path()`
$DIR/storage/jellyfish-merkle/src/node_type/node_type_test.rs: `.insert(
        Nibble::from(1),
        Child::new(leaf1_node.hash(), 0 /* version */, true),
    )`
$DIR/storage/jellyfish-merkle/src/node_type/node_type_test.rs: `.insert(
        Nibble::from(2),
        Child::new(leaf2_node.hash(), 0 /* version */, true),
    )`
$DIR/storage/jellyfish-merkle/src/node_type/node_type_test.rs: `.encode()`
$DIR/storage/jellyfish-merkle/src/node_type/node_type_test.rs: `.insert(
            Nibble::from(1),
            Child::new(
                HashValue::random(),
                0,    /* version */
                true, /* is_leaf */
            ),
        )`
$DIR/storage/jellyfish-merkle/src/node_type/node_type_test.rs: `.nibble_path()`
$DIR/storage/jellyfish-merkle/src/node_type/node_type_test.rs: `.nibble_path()`
$DIR/storage/jellyfish-merkle/src/node_type/node_type_test.rs: `.insert(index1, Child::new(hash1, 0 /* version */, false))`
$DIR/storage/jellyfish-merkle/src/node_type/node_type_test.rs: `.insert(index2, Child::new(hash2, 1 /* version */, false))`
$DIR/storage/jellyfish-merkle/src/node_type/node_type_test.rs: `.nibble_path()`
$DIR/storage/jellyfish-merkle/src/node_type/node_type_test.rs: `.nibble_path()`
$DIR/storage/jellyfish-merkle/src/node_type/node_type_test.rs: `.insert(index1, Child::new(hash1, 0 /* version */, false))`
$DIR/storage/jellyfish-merkle/src/node_type/node_type_test.rs: `.insert(index2, Child::new(hash2, 1 /* version */, false))`
$DIR/storage/jellyfish-merkle/src/tree_cache/tree_cache_test.rs: `db.put_node(node_key.clone(), node.clone()).unwrap();`
$DIR/storage/jellyfish-merkle/src/tree_cache/tree_cache_test.rs: `db.put_node(node_key.clone(), node).unwrap();`
$DIR/storage/jellyfish-merkle/src/tree_cache/tree_cache_test.rs: `cache.set_root_node_key(node_key.clone());`
$DIR/storage/jellyfish-merkle/src/tree_cache/tree_cache_test.rs: `db.put_node(pre_genesis_root_key.clone(), pre_genesis_only_node)
        .unwrap();`
$DIR/storage/jellyfish-merkle/src/tree_cache/tree_cache_test.rs: `cache.put_node(node1_key.clone(), node1.clone()).unwrap();`
$DIR/storage/jellyfish-merkle/src/tree_cache/tree_cache_test.rs: `cache.put_node(node2_key.clone(), node2.clone()).unwrap();`
$DIR/storage/jellyfish-merkle/src/tree_cache/tree_cache_test.rs: `cache.freeze();`
$DIR/storage/jellyfish-merkle/src/tree_cache/tree_cache_test.rs: `cache.delete_node(&node1_key, true /* is_leaf */);`
$DIR/storage/jellyfish-merkle/src/tree_cache/tree_cache_test.rs: `cache.freeze();`
$DIR/storage/jellyfish-merkle/src/tree_cache/tree_cache_test.rs: `.put_node(node_key.clone(), node.clone())`
$DIR/storage/jellyfish-merkle/src/tree_cache/tree_cache_test.rs: `.put_node(node_key.clone(), node)`
$DIR/storage/jellyfish-merkle/src/tree_cache/tree_cache_test.rs: `.set_root_node_key(node_key.clone())`
$DIR/storage/jellyfish-merkle/src/tree_cache/tree_cache_test.rs: `.put_node(pre_genesis_root_key.clone(), pre_genesis_only_node)`
$DIR/storage/jellyfish-merkle/src/tree_cache/tree_cache_test.rs: `.put_node(node1_key.clone(), node1.clone())`
$DIR/storage/jellyfish-merkle/src/tree_cache/tree_cache_test.rs: `.put_node(node2_key.clone(), node2.clone())`
$DIR/storage/jellyfish-merkle/src/tree_cache/tree_cache_test.rs: `.freeze()`
$DIR/storage/jellyfish-merkle/src/tree_cache/tree_cache_test.rs: `.delete_node(&node1_key, true /* is_leaf */)`
$DIR/storage/jellyfish-merkle/src/tree_cache/tree_cache_test.rs: `.freeze()`
$DIR/storage/jellyfish-merkle/src/tree_cache/tree_cache_test.rs: `.into()`
$DIR/storage/schemadb/tests/db.rs: `db_opts.create_if_missing(true);`
$DIR/storage/schemadb/tests/db.rs: `db_opts.create_missing_column_families(true);`
$DIR/storage/schemadb/tests/db.rs: `db.put::<TestSchema1>(&TestField(0), &TestField(0)).unwrap();`
$DIR/storage/schemadb/tests/db.rs: `db.put::<TestSchema1>(&TestField(1), &TestField(1)).unwrap();`
$DIR/storage/schemadb/tests/db.rs: `db.put::<TestSchema1>(&TestField(2), &TestField(2)).unwrap();`
$DIR/storage/schemadb/tests/db.rs: `db.put::<TestSchema2>(&TestField(2), &TestField(3)).unwrap();`
$DIR/storage/schemadb/tests/db.rs: `db.put::<TestSchema2>(&TestField(3), &TestField(4)).unwrap();`
$DIR/storage/schemadb/tests/db.rs: `db.put::<TestSchema2>(&TestField(4), &TestField(5)).unwrap();`
$DIR/storage/schemadb/tests/db.rs: `db_batch
        .put::<TestSchema1>(&TestField(0), &TestField(0))
        .unwrap();`
$DIR/storage/schemadb/tests/db.rs: `db_batch
        .put::<TestSchema1>(&TestField(1), &TestField(1))
        .unwrap();`
$DIR/storage/schemadb/tests/db.rs: `db_batch
        .put::<TestSchema1>(&TestField(2), &TestField(2))
        .unwrap();`
$DIR/storage/schemadb/tests/db.rs: `db_batch
        .put::<TestSchema2>(&TestField(3), &TestField(3))
        .unwrap();`
$DIR/storage/schemadb/tests/db.rs: `db_batch.delete::<TestSchema2>(&TestField(4)).unwrap();`
$DIR/storage/schemadb/tests/db.rs: `db_batch.delete::<TestSchema2>(&TestField(3)).unwrap();`
$DIR/storage/schemadb/tests/db.rs: `db_batch
        .put::<TestSchema2>(&TestField(4), &TestField(4))
        .unwrap();`
$DIR/storage/schemadb/tests/db.rs: `db_batch
        .put::<TestSchema2>(&TestField(5), &TestField(5))
        .unwrap();`
$DIR/storage/schemadb/tests/db.rs: `db.write_schemas(db_batch).unwrap();`
$DIR/storage/schemadb/tests/db.rs: `db_batch1
        .put::<TestSchema1>(&TestField(0), &TestField(0))
        .unwrap();`
$DIR/storage/schemadb/tests/db.rs: `db_batch1
        .put::<TestSchema1>(&TestField(1), &TestField(1))
        .unwrap();`
$DIR/storage/schemadb/tests/db.rs: `db_batch1
        .put::<TestSchema1>(&TestField(2), &TestField(2))
        .unwrap();`
$DIR/storage/schemadb/tests/db.rs: `db_batch1.delete::<TestSchema1>(&TestField(2)).unwrap();`
$DIR/storage/schemadb/tests/db.rs: `db.write_schemas(db_batch1).unwrap();`
$DIR/storage/schemadb/tests/db.rs: `db_batch2.delete::<TestSchema2>(&TestField(3)).unwrap();`
$DIR/storage/schemadb/tests/db.rs: `db_batch2
        .put::<TestSchema2>(&TestField(3), &TestField(3))
        .unwrap();`
$DIR/storage/schemadb/tests/db.rs: `db_batch2
        .put::<TestSchema2>(&TestField(4), &TestField(4))
        .unwrap();`
$DIR/storage/schemadb/tests/db.rs: `db_batch2
        .put::<TestSchema2>(&TestField(5), &TestField(5))
        .unwrap();`
$DIR/storage/schemadb/tests/db.rs: `db.write_schemas(db_batch2).unwrap();`
$DIR/storage/schemadb/tests/db.rs: `db.put::<TestSchema1>(&TestField(0), &TestField(0)).unwrap();`
$DIR/storage/schemadb/tests/db.rs: `db.put::<TestSchema1>(&TestField(0), &TestField(0)).unwrap();`
$DIR/storage/schemadb/tests/db.rs: `db.put::<TestSchema1>(&TestField(0), &TestField(0)).unwrap();`
$DIR/storage/schemadb/tests/db.rs: `db_batch
            .put::<TestSchema1>(&TestField(i), &TestField(i))
            .unwrap();`
$DIR/storage/schemadb/tests/db.rs: `db_batch
            .put::<TestSchema2>(&TestField(i), &TestField(i))
            .unwrap();`
$DIR/storage/schemadb/tests/db.rs: `db.write_schemas(db_batch).unwrap();`
$DIR/storage/schemadb/tests/db.rs: `db.flush_all().unwrap();`
$DIR/storage/schemadb/tests/db.rs: `.create_if_missing(true)`
$DIR/storage/schemadb/tests/db.rs: `.create_missing_column_families(true)`
$DIR/storage/schemadb/tests/db.rs: `.path()`
$DIR/storage/schemadb/tests/db.rs: `.path()`
$DIR/storage/schemadb/tests/db.rs: `.path()`
$DIR/storage/schemadb/tests/db.rs: `.path()`
$DIR/storage/schemadb/tests/db.rs: `.put::<TestSchema1>(&TestField(0), &TestField(0))`
$DIR/storage/schemadb/tests/db.rs: `.put::<TestSchema1>(&TestField(1), &TestField(1))`
$DIR/storage/schemadb/tests/db.rs: `.put::<TestSchema1>(&TestField(2), &TestField(2))`
$DIR/storage/schemadb/tests/db.rs: `.put::<TestSchema2>(&TestField(2), &TestField(3))`
$DIR/storage/schemadb/tests/db.rs: `.put::<TestSchema2>(&TestField(3), &TestField(4))`
$DIR/storage/schemadb/tests/db.rs: `.put::<TestSchema2>(&TestField(4), &TestField(5))`
$DIR/storage/schemadb/tests/db.rs: `.put::<TestSchema1>(&TestField(0), &TestField(0))`
$DIR/storage/schemadb/tests/db.rs: `.put::<TestSchema1>(&TestField(1), &TestField(1))`
$DIR/storage/schemadb/tests/db.rs: `.put::<TestSchema1>(&TestField(2), &TestField(2))`
$DIR/storage/schemadb/tests/db.rs: `.put::<TestSchema2>(&TestField(3), &TestField(3))`
$DIR/storage/schemadb/tests/db.rs: `.delete::<TestSchema2>(&TestField(4))`
$DIR/storage/schemadb/tests/db.rs: `.delete::<TestSchema2>(&TestField(3))`
$DIR/storage/schemadb/tests/db.rs: `.put::<TestSchema2>(&TestField(4), &TestField(4))`
$DIR/storage/schemadb/tests/db.rs: `.put::<TestSchema2>(&TestField(5), &TestField(5))`
$DIR/storage/schemadb/tests/db.rs: `.write_schemas(db_batch)`
$DIR/storage/schemadb/tests/db.rs: `.put::<TestSchema1>(&TestField(0), &TestField(0))`
$DIR/storage/schemadb/tests/db.rs: `.put::<TestSchema1>(&TestField(1), &TestField(1))`
$DIR/storage/schemadb/tests/db.rs: `.put::<TestSchema1>(&TestField(2), &TestField(2))`
$DIR/storage/schemadb/tests/db.rs: `.delete::<TestSchema1>(&TestField(2))`
$DIR/storage/schemadb/tests/db.rs: `.write_schemas(db_batch1)`
$DIR/storage/schemadb/tests/db.rs: `.delete::<TestSchema2>(&TestField(3))`
$DIR/storage/schemadb/tests/db.rs: `.put::<TestSchema2>(&TestField(3), &TestField(3))`
$DIR/storage/schemadb/tests/db.rs: `.put::<TestSchema2>(&TestField(4), &TestField(4))`
$DIR/storage/schemadb/tests/db.rs: `.put::<TestSchema2>(&TestField(5), &TestField(5))`
$DIR/storage/schemadb/tests/db.rs: `.write_schemas(db_batch2)`
$DIR/storage/schemadb/tests/db.rs: `.put::<TestSchema1>(&TestField(0), &TestField(0))`
$DIR/storage/schemadb/tests/db.rs: `.put::<TestSchema1>(&TestField(0), &TestField(0))`
$DIR/storage/schemadb/tests/db.rs: `.put::<TestSchema1>(&TestField(0), &TestField(0))`
$DIR/storage/schemadb/tests/db.rs: `.put::<TestSchema1>(&TestField(i), &TestField(i))`
$DIR/storage/schemadb/tests/db.rs: `.put::<TestSchema2>(&TestField(i), &TestField(i))`
$DIR/storage/schemadb/tests/db.rs: `.write_schemas(db_batch)`
$DIR/storage/schemadb/tests/db.rs: `.flush_all()`
$DIR/storage/schemadb/tests/iterator.rs: `iter.seek_to_first();`
$DIR/storage/schemadb/tests/iterator.rs: `iter.seek_to_first();`
$DIR/storage/schemadb/tests/iterator.rs: `iter.seek_to_last();`
$DIR/storage/schemadb/tests/iterator.rs: `iter.seek_to_last();`
$DIR/storage/schemadb/tests/iterator.rs: `iter.seek(&TestKey(1, 1, 0)).unwrap();`
$DIR/storage/schemadb/tests/iterator.rs: `iter.seek(&TestKey(1, 1, 0)).unwrap();`
$DIR/storage/schemadb/tests/iterator.rs: `iter.seek(&TestKey(1, 1, 1)).unwrap();`
$DIR/storage/schemadb/tests/iterator.rs: `iter.seek(&TestKey(1, 1, 1)).unwrap();`
$DIR/storage/schemadb/tests/iterator.rs: `iter.seek_for_prev(&TestKey(1, 1, 0)).unwrap();`
$DIR/storage/schemadb/tests/iterator.rs: `iter.seek_for_prev(&TestKey(1, 1, 0)).unwrap();`
$DIR/storage/schemadb/tests/iterator.rs: `iter.seek_for_prev(&TestKey(1, 1, 1)).unwrap();`
$DIR/storage/schemadb/tests/iterator.rs: `iter.seek_for_prev(&TestKey(1, 1, 1)).unwrap();`
$DIR/storage/schemadb/tests/iterator.rs: `iter.seek(&KeyPrefix1(2)).unwrap();`
$DIR/storage/schemadb/tests/iterator.rs: `iter.seek(&KeyPrefix1(2)).unwrap();`
$DIR/storage/schemadb/tests/iterator.rs: `iter.seek_for_prev(&KeyPrefix1(2)).unwrap();`
$DIR/storage/schemadb/tests/iterator.rs: `iter.seek_for_prev(&KeyPrefix1(2)).unwrap();`
$DIR/storage/schemadb/tests/iterator.rs: `iter.seek(&KeyPrefix2(2, 0)).unwrap();`
$DIR/storage/schemadb/tests/iterator.rs: `iter.seek(&KeyPrefix2(2, 0)).unwrap();`
$DIR/storage/schemadb/tests/iterator.rs: `iter.seek_for_prev(&KeyPrefix2(2, 0)).unwrap();`
$DIR/storage/schemadb/tests/iterator.rs: `iter.seek_for_prev(&KeyPrefix2(2, 0)).unwrap();`
$DIR/storage/schemadb/tests/iterator.rs: `.db
            .rev_iter(Default::default())`
$DIR/storage/schemadb/tests/iterator.rs: `.seek_to_first()`
$DIR/storage/schemadb/tests/iterator.rs: `.seek_to_first()`
$DIR/storage/schemadb/tests/iterator.rs: `.seek_to_last()`
$DIR/storage/schemadb/tests/iterator.rs: `.seek_to_last()`
$DIR/storage/schemadb/tests/iterator.rs: `.seek(&TestKey(1, 1, 0))`
$DIR/storage/schemadb/tests/iterator.rs: `.seek(&TestKey(1, 1, 0))`
$DIR/storage/schemadb/tests/iterator.rs: `.seek(&TestKey(1, 1, 1))`
$DIR/storage/schemadb/tests/iterator.rs: `.seek(&TestKey(1, 1, 1))`
$DIR/storage/schemadb/tests/iterator.rs: `.seek_for_prev(&TestKey(1, 1, 0))`
$DIR/storage/schemadb/tests/iterator.rs: `.seek_for_prev(&TestKey(1, 1, 0))`
$DIR/storage/schemadb/tests/iterator.rs: `.seek_for_prev(&TestKey(1, 1, 1))`
$DIR/storage/schemadb/tests/iterator.rs: `.seek_for_prev(&TestKey(1, 1, 1))`
$DIR/storage/schemadb/tests/iterator.rs: `.seek(&KeyPrefix1(2))`
$DIR/storage/schemadb/tests/iterator.rs: `.seek(&KeyPrefix1(2))`
$DIR/storage/schemadb/tests/iterator.rs: `.seek_for_prev(&KeyPrefix1(2))`
$DIR/storage/schemadb/tests/iterator.rs: `.seek_for_prev(&KeyPrefix1(2))`
$DIR/storage/schemadb/tests/iterator.rs: `.seek(&KeyPrefix2(2, 0))`
$DIR/storage/schemadb/tests/iterator.rs: `.seek(&KeyPrefix2(2, 0))`
$DIR/storage/schemadb/tests/iterator.rs: `.seek_for_prev(&KeyPrefix2(2, 0))`
$DIR/storage/schemadb/tests/iterator.rs: `.seek_for_prev(&KeyPrefix2(2, 0))`
$DIR/testsuite/cli/diem-wallet/src/key_factory.rs: `assume!(self.0 <= u64::max_value() / 2);`
$DIR/testsuite/cli/diem-wallet/src/key_factory.rs: `assume!(other.0 <= u64::max_value() / 2);`
$DIR/testsuite/cli/diem-wallet/src/key_factory.rs: `LittleEndian::write_u64(&mut le_n, child.0);`
$DIR/testsuite/cli/diem-wallet/src/key_factory.rs: `info.extend_from_slice(&le_n);`
$DIR/testsuite/cli/diem-wallet/src/key_factory.rs: `.extend_from_slice(&le_n)`
$DIR/testsuite/cli/diem-wallet/src/key_factory.rs: `.map_err(|e| {
            anyhow!(
                "Unable to convert hkdf output into private key, met Error:{}",
                e
            )
        })`
$DIR/testsuite/cli/diem-wallet/src/mnemonic.rs: `file.write_all(self.to_string().as_bytes())?;`
$DIR/testsuite/cli/diem-wallet/src/mnemonic.rs: `rng.fill_bytes(&mut buf[..]);`
$DIR/testsuite/cli/diem-wallet/src/mnemonic.rs: `mnemonic.write(path).unwrap();`
$DIR/testsuite/cli/diem-wallet/src/mnemonic.rs: `mnemonic = "abandon abandon abandon abandon abandon abandon abandon abandon abandon abandon abandon zoo";`
$DIR/testsuite/cli/diem-wallet/src/mnemonic.rs: `computed_mnemonic = Mnemonic::from(mnemonic);`
$DIR/testsuite/cli/diem-wallet/src/mnemonic.rs: `mnemonic = "void come effort suffer camp survey warrior heavy shoot primary clutch crush open amazing screen patrol group space point ten exist slush involve holiday";`
$DIR/testsuite/cli/diem-wallet/src/mnemonic.rs: `computed_mnemonic = Mnemonic::from(mnemonic);`
$DIR/testsuite/cli/diem-wallet/src/mnemonic.rs: `.exists()`
$DIR/testsuite/cli/diem-wallet/src/mnemonic.rs: `.is_file()`
$DIR/testsuite/cli/diem-wallet/src/mnemonic.rs: `.into()`
$DIR/testsuite/cli/diem-wallet/src/mnemonic.rs: `.write_all(self.to_string().as_bytes())`
$DIR/testsuite/cli/diem-wallet/src/mnemonic.rs: `.fill_bytes(&mut buf[..])`
$DIR/testsuite/cli/diem-wallet/src/mnemonic.rs: `.path()`
$DIR/testsuite/cli/diem-wallet/src/mnemonic.rs: `.step_by(4)`
$DIR/testsuite/cli/diem-wallet/src/mnemonic.rs: `.step_by(4)`
$DIR/testsuite/cli/src/client_proxy.rs: `self.accounts.push(account_data);`
$DIR/testsuite/cli/src/client_proxy.rs: `self.address_to_ref_id
            .insert(address, self.accounts.len() - 1);`
$DIR/testsuite/cli/src/client_proxy.rs: `accounts.reserve(count);`
$DIR/testsuite/cli/src/client_proxy.rs: `accounts.push(client_proxy.create_next_account(false).unwrap());`
$DIR/testsuite/cli/src/client_proxy.rs: `io_utils::write_recovery(&client.wallet, &path).expect("failed to write to file");`
$DIR/testsuite/cli/src/client_proxy.rs: `.wallet.new_address()`
$DIR/testsuite/cli/src/client_proxy.rs: `.derived_address()`
$DIR/testsuite/cli/src/client_proxy.rs: `.accounts.push(account_data)`
$DIR/testsuite/cli/src/client_proxy.rs: `.address_to_ref_id
            .insert(address, self.accounts.len() - 1)`
$DIR/testsuite/cli/src/client_proxy.rs: `.accounts.len()`
$DIR/testsuite/cli/src/client_proxy.rs: `.accounts.len()`
$DIR/testsuite/cli/src/client_proxy.rs: `.reserve(count)`
$DIR/testsuite/cli/src/client_proxy.rs: `.path()`
$DIR/testsuite/cli/src/client_proxy.rs: `.to_str()`
$DIR/testsuite/cli/src/client_proxy.rs: `.push(client_proxy.create_next_account(false).unwrap())`
$DIR/testsuite/cli/src/client_proxy.rs: `.path()`
$DIR/testsuite/diem-fuzzer/src/coverage.rs: `target.fuzz(&data);`
$DIR/testsuite/diem-fuzzer/src/coverage.rs: `.read_dir()`
$DIR/testsuite/diem-fuzzer/src/coverage.rs: `.path()`
$DIR/testsuite/diem-fuzzer/src/coverage.rs: `.file_name()`
$DIR/testsuite/diem-fuzzer/src/coverage.rs: `.to_str()`
$DIR/testsuite/diem-fuzzer/src/coverage.rs: `.unwrap_or_else(|| panic!("unknown fuzz target: {}", target_name))`
$DIR/testsuite/diem-fuzzer/src/coverage.rs: `.read_dir()`
$DIR/testsuite/diem-fuzzer/src/coverage.rs: `.path()`
$DIR/testsuite/diem-fuzzer/src/coverage.rs: `.fuzz(&data)`
$DIR/testsuite/forge/src/txn_emitter/atomic_histogram.rs: `buf.push(self.buckets[i].load(Ordering::Relaxed));`
$DIR/testsuite/forge/src/txn_emitter/atomic_histogram.rs: `self.buckets[bucket_num as usize].fetch_add(data_num as u64, Ordering::Relaxed);`
$DIR/testsuite/forge/src/txn_emitter/atomic_histogram.rs: `counter += self.buckets[i];`
$DIR/testsuite/forge/src/txn_emitter/atomic_histogram.rs: `cur_vec.push(i);`
$DIR/testsuite/forge/src/txn_emitter/atomic_histogram.rs: `cur_snap.buckets = cur_vec;`
$DIR/testsuite/forge/src/txn_emitter/atomic_histogram.rs: `prev_vec.push(i);`
$DIR/testsuite/forge/src/txn_emitter/atomic_histogram.rs: `pre_snap.buckets = prev_vec;`
$DIR/testsuite/forge/src/txn_emitter/atomic_histogram.rs: `.push(self.buckets[i].load(Ordering::Relaxed))`
$DIR/testsuite/forge/src/txn_emitter/atomic_histogram.rs: `.load(Ordering::Relaxed)`
$DIR/testsuite/forge/src/txn_emitter/atomic_histogram.rs: `.fetch_add(data_num as u64, Ordering::Relaxed)`
$DIR/testsuite/forge/src/txn_emitter/atomic_histogram.rs: `.sum()`
$DIR/testsuite/forge/src/txn_emitter/atomic_histogram.rs: `.buckets.len()`
$DIR/testsuite/forge/src/txn_emitter/atomic_histogram.rs: `.push(i)`
$DIR/testsuite/forge/src/txn_emitter/atomic_histogram.rs: `.push(i)`
$DIR/testsuite/smoke-test/src/client.rs: `check_create_mint_transfer(&mut swarm);`
$DIR/testsuite/smoke-test/src/client.rs: `node_config.json_rpc.stream_rpc.enabled = true;`
$DIR/testsuite/smoke-test/src/client.rs: `node_config.save(validator.config_path()).unwrap();`
$DIR/testsuite/smoke-test/src/client.rs: `validator.restart().unwrap();`
$DIR/testsuite/smoke-test/src/client.rs: `validator
            .wait_until_healthy(Instant::now() + Duration::from_secs(10))
            .unwrap();`
$DIR/testsuite/smoke-test/src/client.rs: `streaming_url
        .set_scheme("ws")
        .expect("Could not set scheme");`
$DIR/testsuite/smoke-test/src/client.rs: `streaming_url.set_path("/v1/stream/ws");`
$DIR/testsuite/smoke-test/src/client.rs: `drop(subscription_stream);`
$DIR/testsuite/smoke-test/src/client.rs: `rt.block_on(sleep(ms_500));`
$DIR/testsuite/smoke-test/src/client.rs: `swarm.validators_mut().nth(3).unwrap().stop();`
$DIR/testsuite/smoke-test/src/client.rs: `transfer_coins(
        &client,
        &transaction_factory,
        &mut account_0,
        &account_1,
        10,
    );`
$DIR/testsuite/smoke-test/src/client.rs: `assert_balance(&client, &account_0, 90);`
$DIR/testsuite/smoke-test/src/client.rs: `assert_balance(&client, &account_1, 20);`
$DIR/testsuite/smoke-test/src/client.rs: `validator.restart().unwrap();`
$DIR/testsuite/smoke-test/src/client.rs: `validator
        .wait_until_healthy(Instant::now() + Duration::from_secs(10))
        .unwrap();`
$DIR/testsuite/smoke-test/src/client.rs: `assert_balance(&client, &account_0, 90);`
$DIR/testsuite/smoke-test/src/client.rs: `assert_balance(&client, &account_1, 20);`
$DIR/testsuite/smoke-test/src/client.rs: `transfer_coins(
        &client,
        &transaction_factory,
        &mut account_0,
        &account_1,
        10,
    );`
$DIR/testsuite/smoke-test/src/client.rs: `assert_balance(&client, &account_0, 80);`
$DIR/testsuite/smoke-test/src/client.rs: `assert_balance(&client, &account_0, 100);`
$DIR/testsuite/smoke-test/src/client.rs: `assert_balance(&client, &account_1, 10);`
$DIR/testsuite/smoke-test/src/client.rs: `client.submit(&txn).unwrap();`
$DIR/testsuite/smoke-test/src/client.rs: `transfer_coins(&client, &transaction_factory, &mut account_0, &account_1, 1);`
$DIR/testsuite/smoke-test/src/client.rs: `assert_balance(&client, &account_0, 79);`
$DIR/testsuite/smoke-test/src/client.rs: `.validators()`
$DIR/testsuite/smoke-test/src/client.rs: `.next()`
$DIR/testsuite/smoke-test/src/client.rs: `.json_rpc_client()`
$DIR/testsuite/smoke-test/src/client.rs: `.get_metadata()`
$DIR/testsuite/smoke-test/src/client.rs: `.into_inner()`
$DIR/testsuite/smoke-test/src/client.rs: `.validators_mut()`
$DIR/testsuite/smoke-test/src/client.rs: `.config()`
$DIR/testsuite/smoke-test/src/client.rs: `.save(validator.config_path())`
$DIR/testsuite/smoke-test/src/client.rs: `.config_path()`
$DIR/testsuite/smoke-test/src/client.rs: `.restart()`
$DIR/testsuite/smoke-test/src/client.rs: `.wait_until_healthy(Instant::now() + Duration::from_secs(10))`
$DIR/testsuite/smoke-test/src/client.rs: `.validators()`
$DIR/testsuite/smoke-test/src/client.rs: `.next()`
$DIR/testsuite/smoke-test/src/client.rs: `.json_rpc_client()`
$DIR/testsuite/smoke-test/src/client.rs: `.get_currencies()`
$DIR/testsuite/smoke-test/src/client.rs: `.into_inner()`
$DIR/testsuite/smoke-test/src/client.rs: `.enter()`
$DIR/testsuite/smoke-test/src/client.rs: `.validators()`
$DIR/testsuite/smoke-test/src/client.rs: `.next()`
$DIR/testsuite/smoke-test/src/client.rs: `.json_rpc_endpoint()`
$DIR/testsuite/smoke-test/src/client.rs: `.set_scheme("ws")`
$DIR/testsuite/smoke-test/src/client.rs: `.set_path("/v1/stream/ws")`
$DIR/testsuite/smoke-test/src/client.rs: `.block_on(timeout(
            ms_500,
            StreamingClient::new(streaming_url, config.unwrap_or_default(), None),
        ))`
$DIR/testsuite/smoke-test/src/client.rs: `.unwrap_or_default()`
$DIR/testsuite/smoke-test/src/client.rs: `.unwrap_or_else(|e| panic!("Timeout creating StreamingClient: {}", e))`
$DIR/testsuite/smoke-test/src/client.rs: `.unwrap_or_else(|e| panic!("Error connecting to WS endpoint: {}", e))`
$DIR/testsuite/smoke-test/src/client.rs: `.enumerate()`
$DIR/testsuite/smoke-test/src/client.rs: `.block_on(timeout(
                ms_500,
                s_client.subscribe_events(currency.mint_events_key, 0),
            ))`
$DIR/testsuite/smoke-test/src/client.rs: `.subscribe_events(currency.mint_events_key, 0)`
$DIR/testsuite/smoke-test/src/client.rs: `.unwrap_or_else(|e| panic!("Timeout subscribing to {}: {}", &currency.code, e))`
$DIR/testsuite/smoke-test/src/client.rs: `.unwrap_or_else(|e| {
                panic!("Error subscribing to currency '{}': {}", &currency.code, e)
            })`
$DIR/testsuite/smoke-test/src/client.rs: `.block_on(timeout(ms_500, s_client.subscription_count()))`
$DIR/testsuite/smoke-test/src/client.rs: `.subscription_count()`
$DIR/testsuite/smoke-test/src/client.rs: `.unwrap_or_else(|e| panic!("Timeout count for {}: {}", &currency.code, e))`
$DIR/testsuite/smoke-test/src/client.rs: `.block_on(timeout(ms_500, subscription_stream.next()))`
$DIR/testsuite/smoke-test/src/client.rs: `.next()`
$DIR/testsuite/smoke-test/src/client.rs: `.unwrap_or_else(|e| panic!("Timeout getting message 1: {}", e))`
$DIR/testsuite/smoke-test/src/client.rs: `.unwrap_or_else(|| panic!("Currency '{}' response 1 is None", &currency.code))`
$DIR/testsuite/smoke-test/src/client.rs: `.unwrap_or_else(|e| {
                    panic!("Currency '{}' response 1 is Err: {}", &currency.code, e)
                })`
$DIR/testsuite/smoke-test/src/client.rs: `.parse_result(&StreamMethod::SubscribeToEvents)`
$DIR/testsuite/smoke-test/src/client.rs: `.unwrap_or_else(|e| {
                    panic!(
                        "Currency '{}' response 1 view is err: {}",
                        &currency.code, e
                    )
                })`
$DIR/testsuite/smoke-test/src/client.rs: `.unwrap_or_else(|| panic!("Currency '{}' response 1 view is None", &currency.code))`
$DIR/testsuite/smoke-test/src/client.rs: `.block_on(sleep(ms_500))`
$DIR/testsuite/smoke-test/src/client.rs: `.block_on(timeout(ms_500, s_client.subscription_count()))`
$DIR/testsuite/smoke-test/src/client.rs: `.subscription_count()`
$DIR/testsuite/smoke-test/src/client.rs: `.unwrap_or_else(|e| panic!("Timeout count for {}: {}", &currency.code, e))`
$DIR/testsuite/smoke-test/src/client.rs: `.validators_mut()`
$DIR/testsuite/smoke-test/src/client.rs: `.nth(3)`
$DIR/testsuite/smoke-test/src/client.rs: `.stop()`
$DIR/testsuite/smoke-test/src/client.rs: `.validators()`
$DIR/testsuite/smoke-test/src/client.rs: `.next()`
$DIR/testsuite/smoke-test/src/client.rs: `.json_rpc_client()`
$DIR/testsuite/smoke-test/src/client.rs: `.chain_info()`
$DIR/testsuite/smoke-test/src/client.rs: `.transaction_factory()`
$DIR/testsuite/smoke-test/src/client.rs: `.validators_mut()`
$DIR/testsuite/smoke-test/src/client.rs: `.next()`
$DIR/testsuite/smoke-test/src/client.rs: `.restart()`
$DIR/testsuite/smoke-test/src/client.rs: `.wait_until_healthy(Instant::now() + Duration::from_secs(10))`
$DIR/testsuite/smoke-test/src/client.rs: `.validators()`
$DIR/testsuite/smoke-test/src/client.rs: `.next()`
$DIR/testsuite/smoke-test/src/client.rs: `.json_rpc_client()`
$DIR/testsuite/smoke-test/src/client.rs: `.chain_info()`
$DIR/testsuite/smoke-test/src/client.rs: `.transaction_factory()`
$DIR/testsuite/smoke-test/src/client.rs: `.sign_with_transaction_builder(transaction_factory.peer_to_peer(
            diem_sdk::transaction_builder::Currency::XUS,
            account_1.address(),
            1,
        ))`
$DIR/testsuite/smoke-test/src/client.rs: `.peer_to_peer(
            diem_sdk::transaction_builder::Currency::XUS,
            account_1.address(),
            1,
        )`
$DIR/testsuite/smoke-test/src/client.rs: `.address()`
$DIR/testsuite/smoke-test/src/client.rs: `.submit(&txn)`
$DIR/testsuite/smoke-test/src/consensus.rs: `safety_rules_storage.reset_and_clear().unwrap();`
$DIR/testsuite/smoke-test/src/consensus.rs: `node_config.consensus.safety_rules.export_consensus_key = true;`
$DIR/testsuite/smoke-test/src/consensus.rs: `node_config.save(validator.config_path()).unwrap();`
$DIR/testsuite/smoke-test/src/consensus.rs: `validator.restart().unwrap();`
$DIR/testsuite/smoke-test/src/consensus.rs: `swarm.launch().unwrap();`
$DIR/testsuite/smoke-test/src/consensus.rs: `node_config.consensus.safety_rules.export_consensus_key = true;`
$DIR/testsuite/smoke-test/src/consensus.rs: `node_config.save(validator.config_path()).unwrap();`
$DIR/testsuite/smoke-test/src/consensus.rs: `validator.restart().unwrap();`
$DIR/testsuite/smoke-test/src/consensus.rs: `swarm.launch().unwrap();`
$DIR/testsuite/smoke-test/src/consensus.rs: `client.submit(&upgrade_txn).unwrap();`
$DIR/testsuite/smoke-test/src/consensus.rs: `client
        .wait_for_signed_transaction(&upgrade_txn, None, None)
        .unwrap();`
$DIR/testsuite/smoke-test/src/consensus.rs: `wait_for_transaction_on_all_nodes(&swarm, txn_ctx.address, txn_ctx.sequence_number);`
$DIR/testsuite/smoke-test/src/consensus.rs: `wait_for_transaction_on_all_nodes(&swarm, txn_ctx.address, txn_ctx.sequence_number);`
$DIR/testsuite/smoke-test/src/consensus.rs: `.validators()`
$DIR/testsuite/smoke-test/src/consensus.rs: `.nth(1)`
$DIR/testsuite/smoke-test/src/consensus.rs: `.config()`
$DIR/testsuite/smoke-test/src/consensus.rs: `.try_into()`
$DIR/testsuite/smoke-test/src/consensus.rs: `.reset_and_clear()`
$DIR/testsuite/smoke-test/src/consensus.rs: `.set_validator_config(
            None,
            Some(NetworkAddress::from_str("/ip4/10.0.0.16/tcp/80").unwrap()),
            &backend,
            false,
            false,
        )`
$DIR/testsuite/smoke-test/src/consensus.rs: `.rotate_operator_key(&backend, false)`
$DIR/testsuite/smoke-test/src/consensus.rs: `.validators()`
$DIR/testsuite/smoke-test/src/consensus.rs: `.next()`
$DIR/testsuite/smoke-test/src/consensus.rs: `.json_rpc_client()`
$DIR/testsuite/smoke-test/src/consensus.rs: `.get_account(txn_ctx.address)`
$DIR/testsuite/smoke-test/src/consensus.rs: `.into_inner()`
$DIR/testsuite/smoke-test/src/consensus.rs: `.validators()`
$DIR/testsuite/smoke-test/src/consensus.rs: `.nth(1)`
$DIR/testsuite/smoke-test/src/consensus.rs: `.json_rpc_client()`
$DIR/testsuite/smoke-test/src/consensus.rs: `.get_account(txn_ctx.address)`
$DIR/testsuite/smoke-test/src/consensus.rs: `.into_inner()`
$DIR/testsuite/smoke-test/src/consensus.rs: `.validators_mut()`
$DIR/testsuite/smoke-test/src/consensus.rs: `.config()`
$DIR/testsuite/smoke-test/src/consensus.rs: `.save(validator.config_path())`
$DIR/testsuite/smoke-test/src/consensus.rs: `.config_path()`
$DIR/testsuite/smoke-test/src/consensus.rs: `.restart()`
$DIR/testsuite/smoke-test/src/consensus.rs: `.launch()`
$DIR/testsuite/smoke-test/src/consensus.rs: `.validators_mut()`
$DIR/testsuite/smoke-test/src/consensus.rs: `.take(2)`
$DIR/testsuite/smoke-test/src/consensus.rs: `.config()`
$DIR/testsuite/smoke-test/src/consensus.rs: `.save(validator.config_path())`
$DIR/testsuite/smoke-test/src/consensus.rs: `.config_path()`
$DIR/testsuite/smoke-test/src/consensus.rs: `.restart()`
$DIR/testsuite/smoke-test/src/consensus.rs: `.launch()`
$DIR/testsuite/smoke-test/src/consensus.rs: `.chain_info()`
$DIR/testsuite/smoke-test/src/consensus.rs: `.transaction_factory()`
$DIR/testsuite/smoke-test/src/consensus.rs: `.chain_info()`
$DIR/testsuite/smoke-test/src/consensus.rs: `.root_account
        .sign_with_transaction_builder(
            transaction_factory
                .update_diem_consensus_config(0, bcs::to_bytes(&two_chain_config).unwrap()),
        )`
$DIR/testsuite/smoke-test/src/consensus.rs: `.update_diem_consensus_config(0, bcs::to_bytes(&two_chain_config).unwrap())`
$DIR/testsuite/smoke-test/src/consensus.rs: `.validators()`
$DIR/testsuite/smoke-test/src/consensus.rs: `.next()`
$DIR/testsuite/smoke-test/src/consensus.rs: `.json_rpc_client()`
$DIR/testsuite/smoke-test/src/consensus.rs: `.submit(&upgrade_txn)`
$DIR/testsuite/smoke-test/src/consensus.rs: `.wait_for_signed_transaction(&upgrade_txn, None, None)`
$DIR/testsuite/smoke-test/src/consensus.rs: `.validators()`
$DIR/testsuite/smoke-test/src/consensus.rs: `.next()`
$DIR/testsuite/smoke-test/src/consensus.rs: `.json_rpc_endpoint()`
$DIR/testsuite/smoke-test/src/consensus.rs: `.try_into()`
$DIR/testsuite/smoke-test/src/consensus.rs: `.chain_id()`
$DIR/testsuite/smoke-test/src/consensus.rs: `.rotate_operator_key(&backend, true)`
$DIR/testsuite/smoke-test/src/consensus.rs: `.rotate_consensus_key(&backend, false)`
$DIR/testsuite/smoke-test/src/consensus.rs: `.get::<AccountAddress>(OWNER_ACCOUNT)`
$DIR/testsuite/smoke-test/src/consensus.rs: `.validator_config(validator_account, Some(&backend))`
$DIR/testsuite/smoke-test/src/full_nodes.rs: `swarm
        .validator_mut(validator_peer_id)
        .unwrap()
        .wait_until_healthy(Instant::now() + Duration::from_secs(10))
        .unwrap();`
$DIR/testsuite/smoke-test/src/full_nodes.rs: `fullnode
            .wait_until_healthy(Instant::now() + Duration::from_secs(10))
            .unwrap();`
$DIR/testsuite/smoke-test/src/full_nodes.rs: `swarm
        .wait_for_all_nodes_to_catchup(Instant::now() + Duration::from_secs(10))
        .unwrap();`
$DIR/testsuite/smoke-test/src/full_nodes.rs: `assert_balance(&validator_client, &account_0, 9);`
$DIR/testsuite/smoke-test/src/full_nodes.rs: `assert_balance(&validator_client, &account_1, 11);`
$DIR/testsuite/smoke-test/src/full_nodes.rs: `assert_balance(&vfn_client, &account_0, 9);`
$DIR/testsuite/smoke-test/src/full_nodes.rs: `assert_balance(&vfn_client, &account_1, 11);`
$DIR/testsuite/smoke-test/src/full_nodes.rs: `assert_balance(&pfn_client, &account_0, 9);`
$DIR/testsuite/smoke-test/src/full_nodes.rs: `assert_balance(&pfn_client, &account_1, 11);`
$DIR/testsuite/smoke-test/src/full_nodes.rs: `assert_balance(&validator_client, &account_0, 8);`
$DIR/testsuite/smoke-test/src/full_nodes.rs: `assert_balance(&validator_client, &account_1, 12);`
$DIR/testsuite/smoke-test/src/full_nodes.rs: `assert_balance(&vfn_client, &account_0, 8);`
$DIR/testsuite/smoke-test/src/full_nodes.rs: `assert_balance(&vfn_client, &account_1, 12);`
$DIR/testsuite/smoke-test/src/full_nodes.rs: `pfn_client
        .wait_for_signed_transaction(&txn, None, None)
        .unwrap();`
$DIR/testsuite/smoke-test/src/full_nodes.rs: `assert_balance(&pfn_client, &account_0, 8);`
$DIR/testsuite/smoke-test/src/full_nodes.rs: `assert_balance(&pfn_client, &account_1, 12);`
$DIR/testsuite/smoke-test/src/full_nodes.rs: `assert_balance(&validator_client, &account_0, 7);`
$DIR/testsuite/smoke-test/src/full_nodes.rs: `assert_balance(&validator_client, &account_1, 13);`
$DIR/testsuite/smoke-test/src/full_nodes.rs: `vfn_client
        .wait_for_signed_transaction(&txn, None, None)
        .unwrap();`
$DIR/testsuite/smoke-test/src/full_nodes.rs: `assert_balance(&vfn_client, &account_0, 7);`
$DIR/testsuite/smoke-test/src/full_nodes.rs: `assert_balance(&vfn_client, &account_1, 13);`
$DIR/testsuite/smoke-test/src/full_nodes.rs: `pfn_client
        .wait_for_signed_transaction(&txn, None, None)
        .unwrap();`
$DIR/testsuite/smoke-test/src/full_nodes.rs: `assert_balance(&pfn_client, &account_0, 7);`
$DIR/testsuite/smoke-test/src/full_nodes.rs: `validator
            .wait_until_healthy(Instant::now() + Duration::from_secs(10))
            .unwrap();`
$DIR/testsuite/smoke-test/src/full_nodes.rs: `fullnode
            .wait_until_healthy(Instant::now() + Duration::from_secs(10))
            .unwrap();`
$DIR/testsuite/smoke-test/src/full_nodes.rs: `fullnode
            .wait_for_connectivity(Instant::now() + Duration::from_secs(60))
            .unwrap();`
$DIR/testsuite/smoke-test/src/full_nodes.rs: `swarm
        .wait_for_all_nodes_to_catchup(Instant::now() + Duration::from_secs(10))
        .unwrap();`
$DIR/testsuite/smoke-test/src/full_nodes.rs: `swarm.validator_mut(validator).unwrap().stop();`
$DIR/testsuite/smoke-test/src/full_nodes.rs: `transfer_coins_non_blocking(
            &vfn_client,
            &transaction_factory,
            &mut account_0,
            &account_1,
            1,
        );`
$DIR/testsuite/smoke-test/src/full_nodes.rs: `private_network.max_inbound_connections = 0;`
$DIR/testsuite/smoke-test/src/full_nodes.rs: `private_network.max_outbound_connections = 1;`
$DIR/testsuite/smoke-test/src/full_nodes.rs: `user_network.max_outbound_connections = 1;`
$DIR/testsuite/smoke-test/src/full_nodes.rs: `user_network.discovery_method = DiscoveryMethod::None;`
$DIR/testsuite/smoke-test/src/full_nodes.rs: `swarm
        .wait_for_connectivity(Instant::now() + Duration::from_secs(60))
        .unwrap();`
$DIR/testsuite/smoke-test/src/full_nodes.rs: `swarm
        .wait_for_all_nodes_to_catchup(Instant::now() + Duration::from_secs(60))
        .unwrap();`
$DIR/testsuite/smoke-test/src/full_nodes.rs: `transfer_coins(
        &user_client,
        &transaction_factory,
        &mut account_0,
        &account_1,
        10,
    );`
$DIR/testsuite/smoke-test/src/full_nodes.rs: `assert_balance(&user_client, &account_0, 90);`
$DIR/testsuite/smoke-test/src/full_nodes.rs: `assert_balance(&user_client, &account_1, 20);`
$DIR/testsuite/smoke-test/src/full_nodes.rs: `assert_balance(&validator_client, &account_0, 90);`
$DIR/testsuite/smoke-test/src/full_nodes.rs: `seed_keys.insert(seed_key);`
$DIR/testsuite/smoke-test/src/full_nodes.rs: `dest_network_config.seeds.insert(seed_peer_id, seed_peer);`
$DIR/testsuite/smoke-test/src/full_nodes.rs: `.chain_info()`
$DIR/testsuite/smoke-test/src/full_nodes.rs: `.transaction_factory()`
$DIR/testsuite/smoke-test/src/full_nodes.rs: `.versions()`
$DIR/testsuite/smoke-test/src/full_nodes.rs: `.max()`
$DIR/testsuite/smoke-test/src/full_nodes.rs: `.validators()`
$DIR/testsuite/smoke-test/src/full_nodes.rs: `.next()`
$DIR/testsuite/smoke-test/src/full_nodes.rs: `.peer_id()`
$DIR/testsuite/smoke-test/src/full_nodes.rs: `.add_validator_fullnode(
            &version,
            NodeConfig::default_for_validator_full_node(),
            validator_peer_id,
        )`
$DIR/testsuite/smoke-test/src/full_nodes.rs: `.add_full_node(&version, NodeConfig::default_for_public_full_node())`
$DIR/testsuite/smoke-test/src/full_nodes.rs: `.validator_mut(validator_peer_id)`
$DIR/testsuite/smoke-test/src/full_nodes.rs: `.wait_until_healthy(Instant::now() + Duration::from_secs(10))`
$DIR/testsuite/smoke-test/src/full_nodes.rs: `.full_nodes_mut()`
$DIR/testsuite/smoke-test/src/full_nodes.rs: `.wait_until_healthy(Instant::now() + Duration::from_secs(10))`
$DIR/testsuite/smoke-test/src/full_nodes.rs: `.validator(validator_peer_id)`
$DIR/testsuite/smoke-test/src/full_nodes.rs: `.json_rpc_client()`
$DIR/testsuite/smoke-test/src/full_nodes.rs: `.full_node(vfn_peer_id)`
$DIR/testsuite/smoke-test/src/full_nodes.rs: `.json_rpc_client()`
$DIR/testsuite/smoke-test/src/full_nodes.rs: `.full_node(pfn_peer_id)`
$DIR/testsuite/smoke-test/src/full_nodes.rs: `.json_rpc_client()`
$DIR/testsuite/smoke-test/src/full_nodes.rs: `.wait_for_all_nodes_to_catchup(Instant::now() + Duration::from_secs(10))`
$DIR/testsuite/smoke-test/src/full_nodes.rs: `.wait_for_signed_transaction(&txn, None, None)`
$DIR/testsuite/smoke-test/src/full_nodes.rs: `.wait_for_signed_transaction(&txn, None, None)`
$DIR/testsuite/smoke-test/src/full_nodes.rs: `.wait_for_signed_transaction(&txn, None, None)`
$DIR/testsuite/smoke-test/src/full_nodes.rs: `.chain_info()`
$DIR/testsuite/smoke-test/src/full_nodes.rs: `.transaction_factory()`
$DIR/testsuite/smoke-test/src/full_nodes.rs: `.versions()`
$DIR/testsuite/smoke-test/src/full_nodes.rs: `.max()`
$DIR/testsuite/smoke-test/src/full_nodes.rs: `.validators()`
$DIR/testsuite/smoke-test/src/full_nodes.rs: `.map(|v| v.peer_id())`
$DIR/testsuite/smoke-test/src/full_nodes.rs: `.peer_id()`
$DIR/testsuite/smoke-test/src/full_nodes.rs: `.collect::<Vec<_>>()`
$DIR/testsuite/smoke-test/src/full_nodes.rs: `.add_validator_fullnode(
            &version,
            NodeConfig::default_for_validator_full_node(),
            validator,
        )`
$DIR/testsuite/smoke-test/src/full_nodes.rs: `.validators_mut()`
$DIR/testsuite/smoke-test/src/full_nodes.rs: `.wait_until_healthy(Instant::now() + Duration::from_secs(10))`
$DIR/testsuite/smoke-test/src/full_nodes.rs: `.full_nodes_mut()`
$DIR/testsuite/smoke-test/src/full_nodes.rs: `.wait_until_healthy(Instant::now() + Duration::from_secs(10))`
$DIR/testsuite/smoke-test/src/full_nodes.rs: `.wait_for_connectivity(Instant::now() + Duration::from_secs(60))`
$DIR/testsuite/smoke-test/src/full_nodes.rs: `.wait_for_all_nodes_to_catchup(Instant::now() + Duration::from_secs(10))`
$DIR/testsuite/smoke-test/src/full_nodes.rs: `.full_node(vfn)`
$DIR/testsuite/smoke-test/src/full_nodes.rs: `.json_rpc_client()`
$DIR/testsuite/smoke-test/src/full_nodes.rs: `.validator_mut(validator)`
$DIR/testsuite/smoke-test/src/full_nodes.rs: `.stop()`
$DIR/testsuite/smoke-test/src/full_nodes.rs: `.chain_info()`
$DIR/testsuite/smoke-test/src/full_nodes.rs: `.transaction_factory()`
$DIR/testsuite/smoke-test/src/full_nodes.rs: `.versions()`
$DIR/testsuite/smoke-test/src/full_nodes.rs: `.max()`
$DIR/testsuite/smoke-test/src/full_nodes.rs: `.full_node_networks.first_mut()`
$DIR/testsuite/smoke-test/src/full_nodes.rs: `.full_node_networks.first_mut()`
$DIR/testsuite/smoke-test/src/full_nodes.rs: `.validators()`
$DIR/testsuite/smoke-test/src/full_nodes.rs: `.next()`
$DIR/testsuite/smoke-test/src/full_nodes.rs: `.config()`
$DIR/testsuite/smoke-test/src/full_nodes.rs: `.add_full_node(&version, private_config)`
$DIR/testsuite/smoke-test/src/full_nodes.rs: `.full_node(private)`
$DIR/testsuite/smoke-test/src/full_nodes.rs: `.config()`
$DIR/testsuite/smoke-test/src/full_nodes.rs: `.add_full_node(&version, user_config)`
$DIR/testsuite/smoke-test/src/full_nodes.rs: `.wait_for_connectivity(Instant::now() + Duration::from_secs(60))`
$DIR/testsuite/smoke-test/src/full_nodes.rs: `.full_node(user)`
$DIR/testsuite/smoke-test/src/full_nodes.rs: `.validators()`
$DIR/testsuite/smoke-test/src/full_nodes.rs: `.next()`
$DIR/testsuite/smoke-test/src/full_nodes.rs: `.json_rpc_client()`
$DIR/testsuite/smoke-test/src/full_nodes.rs: `.full_node(user)`
$DIR/testsuite/smoke-test/src/full_nodes.rs: `.json_rpc_client()`
$DIR/testsuite/smoke-test/src/full_nodes.rs: `.wait_for_all_nodes_to_catchup(Instant::now() + Duration::from_secs(60))`
$DIR/testsuite/smoke-test/src/full_nodes.rs: `.find(|network| network.network_id == network_id)`
$DIR/testsuite/smoke-test/src/full_nodes.rs: `.find(|network| network.network_id == network_id)`
$DIR/testsuite/smoke-test/src/full_nodes.rs: `.peer_id()`
$DIR/testsuite/smoke-test/src/full_nodes.rs: `.identity_key()`
$DIR/testsuite/smoke-test/src/full_nodes.rs: `.public_key()`
$DIR/testsuite/smoke-test/src/full_nodes.rs: `.find(|protocol| matches!(protocol, Protocol::Tcp(_)))`
$DIR/testsuite/smoke-test/src/full_nodes.rs: `.push(port_protocol.clone())`
$DIR/testsuite/smoke-test/src/full_nodes.rs: `.push(Protocol::NoiseIK(seed_key))`
$DIR/testsuite/smoke-test/src/full_nodes.rs: `.push(Protocol::Handshake(HANDSHAKE_VERSION))`
$DIR/testsuite/smoke-test/src/full_nodes.rs: `.insert(seed_key)`
$DIR/testsuite/smoke-test/src/full_nodes.rs: `.seeds.insert(seed_peer_id, seed_peer)`
$DIR/testsuite/smoke-test/src/genesis.rs: `workspace_builder::get_bin("db-backup");`
$DIR/testsuite/smoke-test/src/genesis.rs: `workspace_builder::get_bin("db-restore");`
$DIR/testsuite/smoke-test/src/genesis.rs: `workspace_builder::get_bin("db-backup-verify");`
$DIR/testsuite/smoke-test/src/genesis.rs: `node_config.consensus.sync_only = true;`
$DIR/testsuite/smoke-test/src/genesis.rs: `node_config.save(&node_config_path).unwrap();`
$DIR/testsuite/smoke-test/src/genesis.rs: `swarm
        .validator_mut(node_to_kill)
        .unwrap()
        .restart()
        .unwrap();`
$DIR/testsuite/smoke-test/src/genesis.rs: `swarm
        .validator_mut(node_to_kill)
        .unwrap()
        .wait_until_healthy(Instant::now() + Duration::from_secs(10))
        .unwrap();`
$DIR/testsuite/smoke-test/src/genesis.rs: `node_config.consensus.sync_only = true;`
$DIR/testsuite/smoke-test/src/genesis.rs: `node_config.save(validator.config_path()).unwrap();`
$DIR/testsuite/smoke-test/src/genesis.rs: `validator.restart().unwrap();`
$DIR/testsuite/smoke-test/src/genesis.rs: `validator
            .wait_until_healthy(Instant::now() + Duration::from_secs(10))
            .unwrap();`
$DIR/testsuite/smoke-test/src/genesis.rs: `swarm.validator_mut(node_to_kill).unwrap().stop();`
$DIR/testsuite/smoke-test/src/genesis.rs: `fs::remove_dir_all(node_config.storage.dir()).unwrap();`
$DIR/testsuite/smoke-test/src/genesis.rs: `swarm
        .validator_mut(node_to_kill)
        .unwrap()
        .restart()
        .unwrap();`
$DIR/testsuite/smoke-test/src/genesis.rs: `swarm
        .validator_mut(node_to_kill)
        .unwrap()
        .wait_until_healthy(Instant::now() + Duration::from_secs(10))
        .unwrap();`
$DIR/testsuite/smoke-test/src/genesis.rs: `swarm
        .wait_for_all_nodes_to_catchup(Instant::now() + Duration::from_secs(60))
        .unwrap();`
$DIR/testsuite/smoke-test/src/genesis.rs: `sleep(Duration::from_secs(1));`
$DIR/testsuite/smoke-test/src/genesis.rs: `genesis_path.create_as_file().unwrap();`
$DIR/testsuite/smoke-test/src/genesis.rs: `file.write_all(&bcs::to_bytes(&genesis_transaction).unwrap())
        .unwrap();`
$DIR/testsuite/smoke-test/src/genesis.rs: `insert_waypoint(&mut node_config, waypoint);`
$DIR/testsuite/smoke-test/src/genesis.rs: `node_config.execution.genesis = Some(genesis_transaction.clone());`
$DIR/testsuite/smoke-test/src/genesis.rs: `node_config.consensus.sync_only = false;`
$DIR/testsuite/smoke-test/src/genesis.rs: `node_config.save(validator.config_path()).unwrap();`
$DIR/testsuite/smoke-test/src/genesis.rs: `validator.start().unwrap();`
$DIR/testsuite/smoke-test/src/genesis.rs: `validator
            .wait_until_healthy(Instant::now() + Duration::from_secs(10))
            .unwrap();`
$DIR/testsuite/smoke-test/src/genesis.rs: `transfer_coins(
        &client_0,
        &transaction_factory,
        &mut account_0,
        &account_1,
        1,
    );`
$DIR/testsuite/smoke-test/src/genesis.rs: `assert_balance(&client_0, &account_0, 9);`
$DIR/testsuite/smoke-test/src/genesis.rs: `assert_balance(&client_0, &account_1, 11);`
$DIR/testsuite/smoke-test/src/genesis.rs: `client_0.submit(&txn).unwrap();`
$DIR/testsuite/smoke-test/src/genesis.rs: `client_0
        .wait_for_signed_transaction(&txn, None, None)
        .unwrap();`
$DIR/testsuite/smoke-test/src/genesis.rs: `node_config.execution.genesis = None;`
$DIR/testsuite/smoke-test/src/genesis.rs: `node_config.execution.genesis_file_location = PathBuf::from("");`
$DIR/testsuite/smoke-test/src/genesis.rs: `insert_waypoint(&mut node_config, waypoint);`
$DIR/testsuite/smoke-test/src/genesis.rs: `node_config.save(node_config_path).unwrap();`
$DIR/testsuite/smoke-test/src/genesis.rs: `swarm
        .validator_mut(node_to_kill)
        .unwrap()
        .restart()
        .unwrap();`
$DIR/testsuite/smoke-test/src/genesis.rs: `swarm
        .validator_mut(node_to_kill)
        .unwrap()
        .wait_until_healthy(Instant::now() + Duration::from_secs(10))
        .unwrap();`
$DIR/testsuite/smoke-test/src/genesis.rs: `swarm
        .wait_for_all_nodes_to_catchup(Instant::now() + Duration::from_secs(60))
        .unwrap();`
$DIR/testsuite/smoke-test/src/genesis.rs: `transfer_coins(&client, &transaction_factory, &mut account_0, &account_1, 1);`
$DIR/testsuite/smoke-test/src/genesis.rs: `assert_balance(&client_0, &account_0, 8);`
$DIR/testsuite/smoke-test/src/genesis.rs: `assert_balance(&client_0, &account_1, 12);`
$DIR/testsuite/smoke-test/src/genesis.rs: `swarm.validator_mut(node_to_kill).unwrap().stop();`
$DIR/testsuite/smoke-test/src/genesis.rs: `fs::remove_dir_all(&db_dir).unwrap();`
$DIR/testsuite/smoke-test/src/genesis.rs: `db_restore(backup_path.path(), db_dir.as_path(), &[waypoint]);`
$DIR/testsuite/smoke-test/src/genesis.rs: `swarm
        .validator_mut(node_to_kill)
        .unwrap()
        .restart()
        .unwrap();`
$DIR/testsuite/smoke-test/src/genesis.rs: `swarm
        .validator_mut(node_to_kill)
        .unwrap()
        .wait_until_healthy(Instant::now() + Duration::from_secs(10))
        .unwrap();`
$DIR/testsuite/smoke-test/src/genesis.rs: `swarm
        .wait_for_all_nodes_to_catchup(Instant::now() + Duration::from_secs(60))
        .unwrap();`
$DIR/testsuite/smoke-test/src/genesis.rs: `transfer_coins(&client, &transaction_factory, &mut account_0, &account_1, 1);`
$DIR/testsuite/smoke-test/src/genesis.rs: `assert_balance(&client_0, &account_0, 7);`
$DIR/testsuite/smoke-test/src/genesis.rs: `.chain_id()`
$DIR/testsuite/smoke-test/src/genesis.rs: `.chain_info()`
$DIR/testsuite/smoke-test/src/genesis.rs: `.transaction_factory()`
$DIR/testsuite/smoke-test/src/genesis.rs: `.validators()`
$DIR/testsuite/smoke-test/src/genesis.rs: `.map(|v| v.peer_id())`
$DIR/testsuite/smoke-test/src/genesis.rs: `.peer_id()`
$DIR/testsuite/smoke-test/src/genesis.rs: `.collect::<Vec<_>>()`
$DIR/testsuite/smoke-test/src/genesis.rs: `.validator(node_to_kill)`
$DIR/testsuite/smoke-test/src/genesis.rs: `.config_path()`
$DIR/testsuite/smoke-test/src/genesis.rs: `.validator(node_to_kill)`
$DIR/testsuite/smoke-test/src/genesis.rs: `.config()`
$DIR/testsuite/smoke-test/src/genesis.rs: `.save(&node_config_path)`
$DIR/testsuite/smoke-test/src/genesis.rs: `.validator_mut(node_to_kill)`
$DIR/testsuite/smoke-test/src/genesis.rs: `.restart()`
$DIR/testsuite/smoke-test/src/genesis.rs: `.validator_mut(node_to_kill)`
$DIR/testsuite/smoke-test/src/genesis.rs: `.wait_until_healthy(Instant::now() + Duration::from_secs(10))`
$DIR/testsuite/smoke-test/src/genesis.rs: `.validators_mut()`
$DIR/testsuite/smoke-test/src/genesis.rs: `.config()`
$DIR/testsuite/smoke-test/src/genesis.rs: `.save(validator.config_path())`
$DIR/testsuite/smoke-test/src/genesis.rs: `.config_path()`
$DIR/testsuite/smoke-test/src/genesis.rs: `.restart()`
$DIR/testsuite/smoke-test/src/genesis.rs: `.wait_until_healthy(Instant::now() + Duration::from_secs(10))`
$DIR/testsuite/smoke-test/src/genesis.rs: `.validator_mut(node_to_kill)`
$DIR/testsuite/smoke-test/src/genesis.rs: `.stop()`
$DIR/testsuite/smoke-test/src/genesis.rs: `.storage.dir()`
$DIR/testsuite/smoke-test/src/genesis.rs: `.validator_mut(node_to_kill)`
$DIR/testsuite/smoke-test/src/genesis.rs: `.restart()`
$DIR/testsuite/smoke-test/src/genesis.rs: `.validator_mut(node_to_kill)`
$DIR/testsuite/smoke-test/src/genesis.rs: `.wait_until_healthy(Instant::now() + Duration::from_secs(10))`
$DIR/testsuite/smoke-test/src/genesis.rs: `.wait_for_all_nodes_to_catchup(Instant::now() + Duration::from_secs(60))`
$DIR/testsuite/smoke-test/src/genesis.rs: `.validators()`
$DIR/testsuite/smoke-test/src/genesis.rs: `.json_rpc_client()`
$DIR/testsuite/smoke-test/src/genesis.rs: `.get_metadata()`
$DIR/testsuite/smoke-test/src/genesis.rs: `.into_inner()`
$DIR/testsuite/smoke-test/src/genesis.rs: `.peer_id()`
$DIR/testsuite/smoke-test/src/genesis.rs: `.validator(node_to_kill)`
$DIR/testsuite/smoke-test/src/genesis.rs: `.json_rpc_endpoint()`
$DIR/testsuite/smoke-test/src/genesis.rs: `.validator_config(validator_address, Some(&diem_root))`
$DIR/testsuite/smoke-test/src/genesis.rs: `.validators_mut()`
$DIR/testsuite/smoke-test/src/genesis.rs: `.create_as_file()`
$DIR/testsuite/smoke-test/src/genesis.rs: `.path()`
$DIR/testsuite/smoke-test/src/genesis.rs: `.write_all(&bcs::to_bytes(&genesis_transaction).unwrap())`
$DIR/testsuite/smoke-test/src/genesis.rs: `.current_dir(workspace_root())`
$DIR/testsuite/smoke-test/src/genesis.rs: `.args(&vec![
            node_config.storage.dir().to_str().unwrap(),
            "--genesis-txn-file",
            genesis_path.path().to_str().unwrap(),
        ])`
$DIR/testsuite/smoke-test/src/genesis.rs: `.output()`
$DIR/testsuite/smoke-test/src/genesis.rs: `.validators_mut()`
$DIR/testsuite/smoke-test/src/genesis.rs: `.filter(|v| v.peer_id() != node_to_kill)`
$DIR/testsuite/smoke-test/src/genesis.rs: `.peer_id()`
$DIR/testsuite/smoke-test/src/genesis.rs: `.config()`
$DIR/testsuite/smoke-test/src/genesis.rs: `.save(validator.config_path())`
$DIR/testsuite/smoke-test/src/genesis.rs: `.config_path()`
$DIR/testsuite/smoke-test/src/genesis.rs: `.start()`
$DIR/testsuite/smoke-test/src/genesis.rs: `.wait_until_healthy(Instant::now() + Duration::from_secs(10))`
$DIR/testsuite/smoke-test/src/genesis.rs: `.validator(validator_peer_ids[0])`
$DIR/testsuite/smoke-test/src/genesis.rs: `.json_rpc_client()`
$DIR/testsuite/smoke-test/src/genesis.rs: `.chain_info()`
$DIR/testsuite/smoke-test/src/genesis.rs: `.root_account
        .sign_with_transaction_builder(transaction_factory.update_diem_version(0, 12345))`
$DIR/testsuite/smoke-test/src/genesis.rs: `.update_diem_version(0, 12345)`
$DIR/testsuite/smoke-test/src/genesis.rs: `.submit(&txn)`
$DIR/testsuite/smoke-test/src/genesis.rs: `.wait_for_signed_transaction(&txn, None, None)`
$DIR/testsuite/smoke-test/src/genesis.rs: `.get_state_proof(0)`
$DIR/testsuite/smoke-test/src/genesis.rs: `.state()`
$DIR/testsuite/smoke-test/src/genesis.rs: `.inner()`
$DIR/testsuite/smoke-test/src/genesis.rs: `.epoch_change_proof.inner()`
$DIR/testsuite/smoke-test/src/genesis.rs: `.ledger_info_with_sigs
        .last()`
$DIR/testsuite/smoke-test/src/genesis.rs: `.ledger_info()`
$DIR/testsuite/smoke-test/src/genesis.rs: `.next_block_epoch()`
$DIR/testsuite/smoke-test/src/genesis.rs: `.validator(validator_peer_ids[0])`
$DIR/testsuite/smoke-test/src/genesis.rs: `.config()`
$DIR/testsuite/smoke-test/src/genesis.rs: `.storage
            .backup_service_address
            .port()`
$DIR/testsuite/smoke-test/src/genesis.rs: `.checked_sub(1)`
$DIR/testsuite/smoke-test/src/genesis.rs: `.validator(validator_peer_ids[0])`
$DIR/testsuite/smoke-test/src/genesis.rs: `.json_rpc_endpoint()`
$DIR/testsuite/smoke-test/src/genesis.rs: `.add_validator(validator_address, &diem_root, false)`
$DIR/testsuite/smoke-test/src/genesis.rs: `.save(node_config_path)`
$DIR/testsuite/smoke-test/src/genesis.rs: `.validator_mut(node_to_kill)`
$DIR/testsuite/smoke-test/src/genesis.rs: `.restart()`
$DIR/testsuite/smoke-test/src/genesis.rs: `.validator_mut(node_to_kill)`
$DIR/testsuite/smoke-test/src/genesis.rs: `.wait_until_healthy(Instant::now() + Duration::from_secs(10))`
$DIR/testsuite/smoke-test/src/genesis.rs: `.wait_for_all_nodes_to_catchup(Instant::now() + Duration::from_secs(60))`
$DIR/testsuite/smoke-test/src/genesis.rs: `.validator(node_to_kill)`
$DIR/testsuite/smoke-test/src/genesis.rs: `.json_rpc_client()`
$DIR/testsuite/smoke-test/src/genesis.rs: `.validator_mut(node_to_kill)`
$DIR/testsuite/smoke-test/src/genesis.rs: `.stop()`
$DIR/testsuite/smoke-test/src/genesis.rs: `.storage.dir()`
$DIR/testsuite/smoke-test/src/genesis.rs: `.path()`
$DIR/testsuite/smoke-test/src/genesis.rs: `.validator_mut(node_to_kill)`
$DIR/testsuite/smoke-test/src/genesis.rs: `.restart()`
$DIR/testsuite/smoke-test/src/genesis.rs: `.validator_mut(node_to_kill)`
$DIR/testsuite/smoke-test/src/genesis.rs: `.wait_until_healthy(Instant::now() + Duration::from_secs(10))`
$DIR/testsuite/smoke-test/src/genesis.rs: `.wait_for_all_nodes_to_catchup(Instant::now() + Duration::from_secs(60))`
$DIR/testsuite/smoke-test/src/genesis.rs: `.captures(db_bootstrapper_output)`
$DIR/testsuite/smoke-test/src/genesis.rs: `.ok_or_else(|| anyhow!("Failed to parse db-bootstrapper output."))`
$DIR/testsuite/smoke-test/src/genesis.rs: `.into()`
$DIR/testsuite/smoke-test/src/key_manager.rs: `sleep(Duration::from_secs(10));`
$DIR/testsuite/smoke-test/src/key_manager.rs: `sleep(Duration::from_secs(6));`
$DIR/testsuite/smoke-test/src/key_manager.rs: `.validators()`
$DIR/testsuite/smoke-test/src/key_manager.rs: `.next()`
$DIR/testsuite/smoke-test/src/key_manager.rs: `.config_path()`
$DIR/testsuite/smoke-test/src/key_manager.rs: `.try_into()`
$DIR/testsuite/smoke-test/src/key_manager.rs: `.json_rpc_endpoint()`
$DIR/testsuite/smoke-test/src/key_manager.rs: `.peer_id()`
$DIR/testsuite/smoke-test/src/key_manager.rs: `.get_public_key(CONSENSUS_KEY)`
$DIR/testsuite/smoke-test/src/key_manager.rs: `.retrieve_validator_info(account)`
$DIR/testsuite/smoke-test/src/key_manager.rs: `.try_into()`
$DIR/testsuite/smoke-test/src/key_manager.rs: `.execute()`
$DIR/testsuite/smoke-test/src/key_manager.rs: `.get_public_key(CONSENSUS_KEY)`
$DIR/testsuite/smoke-test/src/key_manager.rs: `.retrieve_validator_info(account)`
$DIR/testsuite/smoke-test/src/key_manager.rs: `.consensus_public_key()`
$DIR/testsuite/smoke-test/src/network.rs: `network.discovery_method = DiscoveryMethod::None;`
$DIR/testsuite/smoke-test/src/network.rs: `network.discovery_methods = vec![
                DiscoveryMethod::Onchain,
                DiscoveryMethod::File(
                    discovery_file.as_ref().to_path_buf(),
                    Duration::from_secs(1),
                ),
            ];`
$DIR/testsuite/smoke-test/src/network.rs: `network.max_inbound_connections = 0;`
$DIR/testsuite/smoke-test/src/network.rs: `swarm
        .validator_mut(validator_peer_id)
        .unwrap()
        .wait_until_healthy(Instant::now() + Duration::from_secs(10))
        .unwrap();`
$DIR/testsuite/smoke-test/src/network.rs: `swarm
        .fullnode_mut(vfn_peer_id)
        .unwrap()
        .wait_until_healthy(Instant::now() + Duration::from_secs(10))
        .unwrap();`
$DIR/testsuite/smoke-test/src/network.rs: `swarm
        .fullnode_mut(pfn_peer_id)
        .unwrap()
        .wait_until_healthy(Instant::now() + Duration::from_secs(10))
        .unwrap();`
$DIR/testsuite/smoke-test/src/network.rs: `FullNode::wait_for_connectivity(
        swarm.fullnode(pfn_peer_id).unwrap(),
        Instant::now() + Duration::from_secs(10),
    )
    .unwrap();`
$DIR/testsuite/smoke-test/src/network.rs: `swarm
        .fullnode_mut(pfn_peer_id_fail)
        .unwrap()
        .wait_until_healthy(Instant::now() + Duration::from_secs(10))
        .unwrap();`
$DIR/testsuite/smoke-test/src/network.rs: `sleep(Duration::from_secs(5));`
$DIR/testsuite/smoke-test/src/network.rs: `network.discovery_method = DiscoveryMethod::None;`
$DIR/testsuite/smoke-test/src/network.rs: `network.discovery_methods = vec![
                DiscoveryMethod::Onchain,
                DiscoveryMethod::File(
                    discovery_file.as_ref().to_path_buf(),
                    Duration::from_millis(100),
                ),
            ];`
$DIR/testsuite/smoke-test/src/network.rs: `swarm.launch().unwrap();`
$DIR/testsuite/smoke-test/src/network.rs: `sleep(Duration::from_millis(300));`
$DIR/testsuite/smoke-test/src/network.rs: `discovery_file.create_as_file().unwrap();`
$DIR/testsuite/smoke-test/src/network.rs: `write_peerset_to_file(discovery_file.as_ref(), peer_set);`
$DIR/testsuite/smoke-test/src/network.rs: `key_file.create_as_file().unwrap();`
$DIR/testsuite/smoke-test/src/network.rs: `node_config.save_config(node_config_path).unwrap();`
$DIR/testsuite/smoke-test/src/network.rs: `node.restart().unwrap();`
$DIR/testsuite/smoke-test/src/network.rs: `network.identity = Identity::from_config(private_key, *peer_id);`
$DIR/testsuite/smoke-test/src/network.rs: `std::fs::write(path, file_contents).unwrap();`
$DIR/testsuite/smoke-test/src/network.rs: `.versions()`
$DIR/testsuite/smoke-test/src/network.rs: `.max()`
$DIR/testsuite/smoke-test/src/network.rs: `.validators()`
$DIR/testsuite/smoke-test/src/network.rs: `.next()`
$DIR/testsuite/smoke-test/src/network.rs: `.peer_id()`
$DIR/testsuite/smoke-test/src/network.rs: `.add_validator_fullnode(
            &version,
            NodeConfig::default_for_validator_full_node(),
            validator_peer_id,
        )`
$DIR/testsuite/smoke-test/src/network.rs: `.fullnode_mut(vfn_peer_id)`
$DIR/testsuite/smoke-test/src/network.rs: `.validator_mut(validator_peer_id)`
$DIR/testsuite/smoke-test/src/network.rs: `.wait_until_healthy(Instant::now() + Duration::from_secs(10))`
$DIR/testsuite/smoke-test/src/network.rs: `.fullnode_mut(vfn_peer_id)`
$DIR/testsuite/smoke-test/src/network.rs: `.wait_until_healthy(Instant::now() + Duration::from_secs(10))`
$DIR/testsuite/smoke-test/src/network.rs: `.add_full_node(&version, NodeConfig::default_for_public_full_node())`
$DIR/testsuite/smoke-test/src/network.rs: `.fullnode_mut(pfn_peer_id)`
$DIR/testsuite/smoke-test/src/network.rs: `.fullnode_mut(pfn_peer_id)`
$DIR/testsuite/smoke-test/src/network.rs: `.wait_until_healthy(Instant::now() + Duration::from_secs(10))`
$DIR/testsuite/smoke-test/src/network.rs: `.fullnode(pfn_peer_id)`
$DIR/testsuite/smoke-test/src/network.rs: `.add_full_node(&version, NodeConfig::default_for_public_full_node())`
$DIR/testsuite/smoke-test/src/network.rs: `.fullnode_mut(pfn_peer_id_fail)`
$DIR/testsuite/smoke-test/src/network.rs: `.fullnode_mut(pfn_peer_id_fail)`
$DIR/testsuite/smoke-test/src/network.rs: `.wait_until_healthy(Instant::now() + Duration::from_secs(10))`
$DIR/testsuite/smoke-test/src/network.rs: `.validators()`
$DIR/testsuite/smoke-test/src/network.rs: `.next()`
$DIR/testsuite/smoke-test/src/network.rs: `.peer_id()`
$DIR/testsuite/smoke-test/src/network.rs: `.validator_mut(validator_peer_id)`
$DIR/testsuite/smoke-test/src/network.rs: `.launch()`
$DIR/testsuite/smoke-test/src/network.rs: `.create_as_file()`
$DIR/testsuite/smoke-test/src/network.rs: `.create_as_file()`
$DIR/testsuite/smoke-test/src/network.rs: `.generate_key(KeyType::X25519, key_file.as_ref(), EncodingType::BCS)`
$DIR/testsuite/smoke-test/src/network.rs: `.extract_peer_from_file(key_file.as_ref(), EncodingType::BCS)`
$DIR/testsuite/smoke-test/src/network.rs: `.config_path()`
$DIR/testsuite/smoke-test/src/network.rs: `.save_config(node_config_path)`
$DIR/testsuite/smoke-test/src/network.rs: `.restart()`
$DIR/testsuite/smoke-test/src/network.rs: `.find(|network| &network.network_id == network_id)`
$DIR/testsuite/smoke-test/src/network.rs: `.next()`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `wait_for_account_sequence_number(&client, txn_ctx.address, txn_ctx.sequence_number).unwrap();`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `op_tool
        .set_validator_config(
            Some(bad_network_address.clone()),
            None,
            &backend,
            false,
            false,
        )
        .unwrap_err();`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `wait_for_account_sequence_number(&client, txn_ctx.address, txn_ctx.sequence_number).unwrap();`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `storage.set(OWNER_ACCOUNT, validator_account).unwrap();`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `storage
        .import_private_key(OWNER_KEY, validator_key)
        .unwrap();`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `wait_for_account_sequence_number(&client, txn_ctx.address, txn_ctx.sequence_number).unwrap();`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `storage.set(OPERATOR_ACCOUNT, operator_account).unwrap();`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `storage
        .import_private_key(OPERATOR_KEY, operator_key)
        .unwrap();`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `wait_for_account_sequence_number(&client, txn_ctx.address, txn_ctx.sequence_number).unwrap();`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `wait_for_account_sequence_number(&client, txn_ctx.address, txn_ctx.sequence_number).unwrap();`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `op_tool
        .extract_private_key(
            OPERATOR_KEY,
            key_file_path.to_str().unwrap(),
            KeyType::Ed25519,
            EncodingType::BCS,
            &backend,
        )
        .unwrap();`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `op_tool
        .extract_public_key(
            OPERATOR_KEY,
            key_file_path.to_str().unwrap(),
            KeyType::Ed25519,
            EncodingType::BCS,
            &backend,
        )
        .unwrap();`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `path.create_as_file().unwrap();`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `output_path.create_as_file().unwrap();`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `key_path.create_as_file().unwrap();`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `keys.insert(
            op_tool
                .generate_key(KeyType::X25519, key_path.as_ref(), EncodingType::Hex)
                .unwrap()
                .public_key(),
        );`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `path.create_as_file().unwrap();`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `op_tool
        .insert_waypoint(inserted_waypoint, &backend, true)
        .unwrap();`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `op_tool
        .insert_waypoint(current_waypoint, &backend, false)
        .unwrap();`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `wait_for_account_sequence_number(&client, txn_ctx.address, txn_ctx.sequence_number).unwrap();`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `validator.stop();`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `validator.start().unwrap();`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `validator.stop();`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `validator.start().unwrap();`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `wait_for_account_sequence_number(&client, txn_ctx.address, txn_ctx.sequence_number).unwrap();`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `wait_for_account_sequence_number(&client, txn_ctx.address, txn_ctx.sequence_number).unwrap();`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `op_tool
        .insert_waypoint(inserted_waypoint, &backend, true)
        .unwrap();`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `wait_for_account_sequence_number(&client, operator_account, txn_ctx.sequence_number).unwrap();`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `storage
        .set(VALIDATOR_NETWORK_ADDRESS_KEYS, "INVALID KEY")
        .unwrap();`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `storage
        .set(VALIDATOR_NETWORK_ADDRESS_KEYS, "random string")
        .unwrap();`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `diem_json_rpc
        .retrieve_account_state(operator_account)
        .unwrap_err();`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `diem_json_rpc
        .retrieve_account_state(validator_account)
        .unwrap_err();`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `wait_for_account_sequence_number(&client, txn_ctx.address, txn_ctx.sequence_number).unwrap();`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `file_writer(key, file_path.clone());`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `std::thread::sleep(std::time::Duration::from_millis(10));`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `wait_for_account_sequence_number(&client, account, sequence_number).unwrap();`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.get::<AccountAddress>(OWNER_ACCOUNT)`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.account_resource(owner_account)`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.get::<AccountAddress>(OPERATOR_ACCOUNT)`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.account_resource(operator_account)`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.get_public_key(OPERATOR_KEY)`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.rotate_operator_key_with_custom_validation(&backend, false, Some(1), Some(0))`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.validators()`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.next()`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.json_rpc_client()`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.validate_transaction(txn_ctx.address, txn_ctx.sequence_number)`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.rotate_operator_key_with_custom_validation(&backend, false, Some(2), Some(60))`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.rotate_consensus_key(&backend, false)`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.get::<AccountAddress>(OWNER_ACCOUNT)`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.validator_config(validator_account, Some(&backend))`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.validator_set(Some(validator_account), Some(&backend))`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.rotate_key(CONSENSUS_KEY)`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.rotate_consensus_key(&backend, true)`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.set_validator_config(
            Some(bad_network_address.clone()),
            None,
            &backend,
            false,
            false,
        )`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.set_validator_config(Some(bad_network_address), None, &backend, false, true)`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.rotate_consensus_key(&backend, false)`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.rotate_validator_network_key(&backend, false)`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.rotate_fullnode_network_key(&backend, false)`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.rotate_operator_key(&backend, false)`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.set_validator_config(Some(new_network_address), None, &backend, false, false)`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.public_key()`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.validators()`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.next()`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.create_validator(
            val_human_name,
            validator_key_path.to_str().unwrap(),
            &diem_backend,
            false,
        )`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.to_str()`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.validators()`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.next()`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.public_key()`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.create_validator_operator(
            op_human_name,
            operator_key_path.to_str().unwrap(),
            &diem_backend,
            true,
        )`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.to_str()`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.json_rpc_client()`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.validate_transaction(txn_ctx.address, txn_ctx.sequence_number)`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.try_into()`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.set(OWNER_ACCOUNT, validator_account)`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.import_private_key(OWNER_KEY, validator_key)`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.json_rpc_endpoint()`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.retrieve_account_state(validator_account)`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.get_validator_config_resource()`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.set_validator_operator(op_human_name, operator_account, &backend, true)`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.retrieve_account_state(validator_account)`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.get_validator_config_resource()`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.set(OPERATOR_ACCOUNT, operator_account)`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.import_private_key(OPERATOR_KEY, operator_key)`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.set_validator_config(
            network_address.clone(),
            network_address,
            &backend,
            true,
            false,
        )`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.validator_set(None, Some(&backend))`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.add_validator(validator_account, &diem_backend, true)`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.validate_transaction(txn_ctx.address, txn_ctx.sequence_number)`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.validator_set(None, Some(&backend))`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.find(|info| info.account_address == validator_account)`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.add_validator(validator_account, &diem_backend, false)`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.validators()`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.next()`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.config_path()`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.with_file_name(OPERATOR_KEY)`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.extract_private_key(
            OPERATOR_KEY,
            key_file_path.to_str().unwrap(),
            KeyType::Ed25519,
            EncodingType::BCS,
            &backend,
        )`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.to_str()`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.export_private_key(OPERATOR_KEY)`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.validators()`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.next()`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.config_path()`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.with_file_name(OPERATOR_KEY)`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.extract_public_key(
            OPERATOR_KEY,
            key_file_path.to_str().unwrap(),
            KeyType::Ed25519,
            EncodingType::BCS,
            &backend,
        )`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.to_str()`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.get_public_key(OPERATOR_KEY)`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.validators()`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.next()`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.config()`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.extract_peer_from_storage(VALIDATOR_NETWORK_KEY, &backend)`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.peer_id()`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.identity_key()`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.public_key()`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.next()`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.extract_peer_from_storage(FULLNODE_NETWORK_KEY, &backend)`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.find(|network| network.network_id == NetworkId::Public)`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.peer_id()`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.identity_key()`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.public_key()`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.next()`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.create_as_file()`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.generate_key(KeyType::X25519, path.as_ref(), EncodingType::Hex)`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.extract_peer_from_file(path.as_ref(), EncodingType::Hex)`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.next()`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.public_key()`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.create_as_file()`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.create_as_file()`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.insert(
            op_tool
                .generate_key(KeyType::X25519, key_path.as_ref(), EncodingType::Hex)
                .unwrap()
                .public_key(),
        )`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.generate_key(KeyType::X25519, key_path.as_ref(), EncodingType::Hex)`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.public_key()`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.extract_peers_from_keys(keys.clone(), output_path.as_ref())`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.get(&address)`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.create_as_file()`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.generate_key(KeyType::X25519, path.as_ref(), EncodingType::Base64)`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.generate_key(KeyType::X25519, path.as_ref(), EncodingType::Hex)`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.generate_key(KeyType::X25519, path.as_ref(), EncodingType::BCS)`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.get(WAYPOINT)`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.insert_waypoint(inserted_waypoint, &backend, true)`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.insert_waypoint(current_waypoint, &backend, false)`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.rotate_fullnode_network_key(&backend, true)`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.validators()`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.next()`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.json_rpc_client()`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.get::<AccountAddress>(OWNER_ACCOUNT)`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.validator_config(validator_account, Some(&backend))`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.fullnode_network_address
        .find_noise_proto()`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.validator_set(Some(validator_account), Some(&backend))`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.fullnode_network_address
        .find_noise_proto()`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.rotate_validator_network_key(&backend, true)`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.get::<AccountAddress>(OWNER_ACCOUNT)`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.validator_config(validator_account, Some(&backend))`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.validator_network_address
        .find_noise_proto()`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.validator_set(Some(validator_account), Some(&backend))`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.validator_network_address
        .find_noise_proto()`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.validators_mut()`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.next()`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.stop()`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.start()`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.wait_for_connectivity(Instant::now() + Duration::from_secs(60))`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.rotate_key(VALIDATOR_NETWORK_KEY)`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.rotate_validator_network_key(&backend, true)`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.get::<AccountAddress>(OWNER_ACCOUNT)`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.validator_config(validator_account, Some(&backend))`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.validator_network_address
        .find_noise_proto()`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.validator_set(Some(validator_account), Some(&backend))`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.validator_network_address
        .find_noise_proto()`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.validators_mut()`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.next()`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.stop()`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.start()`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.wait_for_connectivity(Instant::now() + Duration::from_secs(60))`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.rotate_operator_key(&backend, true)`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.validators()`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.next()`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.json_rpc_client()`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.validate_transaction(txn_ctx.address, txn_ctx.sequence_number)`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.rotate_consensus_key(&backend, false)`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.get::<AccountAddress>(OWNER_ACCOUNT)`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.validator_config(validator_account, Some(&backend))`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.rotate_operator_key(&backend, false)`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.validate_transaction(txn_ctx.address, txn_ctx.sequence_number)`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.get::<AccountAddress>(OPERATOR_ACCOUNT)`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.account_resource(operator_account)`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.rotate_key(OPERATOR_KEY)`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.rotate_operator_key(&backend, true)`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.validators()`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.next()`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.json_rpc_client()`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.validate_transaction(txn_ctx.address, txn_ctx.sequence_number)`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.account_resource(operator_account)`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.print_account(OWNER_ACCOUNT, &backend)`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.get::<AccountAddress>(OWNER_ACCOUNT)`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.print_account(OPERATOR_ACCOUNT, &backend)`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.get::<AccountAddress>(OPERATOR_ACCOUNT)`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.print_key(OPERATOR_KEY, &backend)`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.get_public_key(OPERATOR_KEY)`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.print_key(CONSENSUS_KEY, &backend)`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.get_public_key(CONSENSUS_KEY)`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.insert_waypoint(inserted_waypoint, &backend, true)`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.print_waypoint(WAYPOINT, &backend)`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.print_waypoint(GENESIS_WAYPOINT, &backend)`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.print_account(OPERATOR_ACCOUNT, &backend)`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.rotate_operator_key(&backend, true)`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.validators()`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.next()`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.json_rpc_client()`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.validate_transaction(operator_account, txn_ctx.sequence_number)`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.rotate_operator_key(&backend, false)`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.validate_transaction(operator_account, txn_ctx.sequence_number)`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.get::<AccountAddress>(OWNER_ACCOUNT)`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.get_public_key(CONSENSUS_KEY)`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.validator_config(owner_account, Some(&backend))`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.rotate_key(CONSENSUS_KEY)`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.set_validator_config(
            Some(new_network_address.clone()),
            None,
            &backend,
            false,
            false,
        )`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.validator_config(owner_account, Some(&backend))`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.get::<AccountAddress>(OWNER_ACCOUNT)`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.validator_config(owner_account, Some(&backend))`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.validator_set(Some(owner_account), Some(&backend))`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.set(VALIDATOR_NETWORK_ADDRESS_KEYS, "INVALID KEY")`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.validator_config(owner_account, *backend)`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.validator_set(Some(owner_account), *backend)`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.get::<AccountAddress>(OWNER_ACCOUNT)`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.validator_config(owner_account, Some(&backend))`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.validator_set(Some(owner_account), Some(&backend))`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.first()`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.validator_set(None, Some(&backend))`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.find(|info| info.account_address == owner_account)`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.set(VALIDATOR_NETWORK_ADDRESS_KEYS, "random string")`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.validator_set(None, Some(&backend))`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.find(|info| info.account_address == owner_account)`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.public_key()`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.derived_address()`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.validators()`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.next()`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.json_rpc_endpoint()`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.retrieve_account_state(operator_account)`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.public_key()`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.create_validator_operator(
            op_human_name,
            key_file_path.to_str().unwrap(),
            &backend,
            false,
        )`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.to_str()`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.retrieve_account_state(operator_account)`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.get_validator_operator_config_resource()`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.validators()`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.next()`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.json_rpc_client()`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.json_rpc_endpoint()`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.retrieve_account_state(validator_account)`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.public_key()`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.create_validator(
            val_human_name,
            key_file_path.to_str().unwrap(),
            &backend,
            true,
        )`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.to_str()`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.validate_transaction(txn_ctx.address, txn_ctx.sequence_number)`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.retrieve_account_state(validator_account)`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.get_validator_config_resource()`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.chain_id()`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.validators()`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.next()`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.json_rpc_endpoint()`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.try_into()`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.config_path()`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.with_file_name("KEY_FILE")`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.elapsed()`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.get_account_transaction(address, seq, false)`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.into_inner()`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.validators()`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.json_rpc_client()`
$DIR/testsuite/smoke-test/src/release_flow.rs: `verify_release(chain_id, url.clone(), &payload_1, &release_modules, false).unwrap();`
$DIR/testsuite/smoke-test/src/release_flow.rs: `client.submit(&txn).unwrap();`
$DIR/testsuite/smoke-test/src/release_flow.rs: `client
        .wait_for_signed_transaction(&txn, None, None)
        .unwrap();`
$DIR/testsuite/smoke-test/src/release_flow.rs: `swarm
        .chain_info()
        .fund(Currency::XUS, account.address(), 100)
        .unwrap();`
$DIR/testsuite/smoke-test/src/release_flow.rs: `assert_balance(&client, &account, 200);`
$DIR/testsuite/smoke-test/src/release_flow.rs: `verify_release(chain_id, url.clone(), &payload_2, &old_modules, false).unwrap();`
$DIR/testsuite/smoke-test/src/release_flow.rs: `client.submit(&txn).unwrap();`
$DIR/testsuite/smoke-test/src/release_flow.rs: `client
        .wait_for_signed_transaction(&txn, None, None)
        .unwrap();`
$DIR/testsuite/smoke-test/src/release_flow.rs: `.chain_info()`
$DIR/testsuite/smoke-test/src/release_flow.rs: `.transaction_factory()`
$DIR/testsuite/smoke-test/src/release_flow.rs: `.chain_id()`
$DIR/testsuite/smoke-test/src/release_flow.rs: `.validators()`
$DIR/testsuite/smoke-test/src/release_flow.rs: `.next()`
$DIR/testsuite/smoke-test/src/release_flow.rs: `.json_rpc_endpoint()`
$DIR/testsuite/smoke-test/src/release_flow.rs: `.json_rpc_client()`
$DIR/testsuite/smoke-test/src/release_flow.rs: `.into_iter()`
$DIR/testsuite/smoke-test/src/release_flow.rs: `.map(|(bytes, modules)| (bytes.clone(), modules.clone()))`
$DIR/testsuite/smoke-test/src/release_flow.rs: `.collect::<Vec<_>>()`
$DIR/testsuite/smoke-test/src/release_flow.rs: `.chain_info()`
$DIR/testsuite/smoke-test/src/release_flow.rs: `.root_account
        .sign_with_transaction_builder(
            transaction_factory.payload(TransactionPayload::WriteSet(payload_1.clone())),
        )`
$DIR/testsuite/smoke-test/src/release_flow.rs: `.payload(TransactionPayload::WriteSet(payload_1.clone()))`
$DIR/testsuite/smoke-test/src/release_flow.rs: `.submit(&txn)`
$DIR/testsuite/smoke-test/src/release_flow.rs: `.wait_for_signed_transaction(&txn, None, None)`
$DIR/testsuite/smoke-test/src/release_flow.rs: `.get_latest_version()`
$DIR/testsuite/smoke-test/src/release_flow.rs: `.get_diem_framework_modules_by_version(latest_version)`
$DIR/testsuite/smoke-test/src/release_flow.rs: `.chain_info()`
$DIR/testsuite/smoke-test/src/release_flow.rs: `.fund(Currency::XUS, account.address(), 100)`
$DIR/testsuite/smoke-test/src/release_flow.rs: `.address()`
$DIR/testsuite/smoke-test/src/release_flow.rs: `.get_latest_version()`
$DIR/testsuite/smoke-test/src/release_flow.rs: `.chain_info()`
$DIR/testsuite/smoke-test/src/release_flow.rs: `.root_account
        .sign_with_transaction_builder(
            transaction_factory.payload(TransactionPayload::WriteSet(payload_2)),
        )`
$DIR/testsuite/smoke-test/src/release_flow.rs: `.payload(TransactionPayload::WriteSet(payload_2))`
$DIR/testsuite/smoke-test/src/release_flow.rs: `.submit(&txn)`
$DIR/testsuite/smoke-test/src/release_flow.rs: `.wait_for_signed_transaction(&txn, None, None)`
$DIR/testsuite/smoke-test/src/release_flow.rs: `.get_latest_version()`
$DIR/testsuite/smoke-test/src/release_flow.rs: `.get_diem_framework_modules_by_version(latest_version)`
$DIR/testsuite/smoke-test/src/state_sync.rs: `config.state_sync.chunk_limit = 5;`
$DIR/testsuite/smoke-test/src/state_sync.rs: `config.save(validator.config_path()).unwrap();`
$DIR/testsuite/smoke-test/src/state_sync.rs: `validator.restart().unwrap();`
$DIR/testsuite/smoke-test/src/state_sync.rs: `swarm.launch().unwrap();`
$DIR/testsuite/smoke-test/src/state_sync.rs: `transfer_coins(
        &client_1,
        &transaction_factory,
        &mut account_0,
        &account_1,
        10,
    );`
$DIR/testsuite/smoke-test/src/state_sync.rs: `assert_balance(&client_1, &account_0, 90);`
$DIR/testsuite/smoke-test/src/state_sync.rs: `assert_balance(&client_1, &account_1, 20);`
$DIR/testsuite/smoke-test/src/state_sync.rs: `swarm.validator_mut(node_to_restart).unwrap().stop();`
$DIR/testsuite/smoke-test/src/state_sync.rs: `transfer_coins(
        &client_1,
        &transaction_factory,
        &mut account_0,
        &account_1,
        1,
    );`
$DIR/testsuite/smoke-test/src/state_sync.rs: `assert_balance(&client_1, &account_0, 89);`
$DIR/testsuite/smoke-test/src/state_sync.rs: `assert_balance(&client_1, &account_1, 21);`
$DIR/testsuite/smoke-test/src/state_sync.rs: `swarm
        .validator_mut(node_to_restart)
        .unwrap()
        .start()
        .unwrap();`
$DIR/testsuite/smoke-test/src/state_sync.rs: `swarm
        .validator_mut(node_to_restart)
        .unwrap()
        .wait_until_healthy(Instant::now() + Duration::from_secs(10))
        .unwrap();`
$DIR/testsuite/smoke-test/src/state_sync.rs: `swarm
        .wait_for_all_nodes_to_catchup(Instant::now() + Duration::from_secs(60))
        .unwrap();`
$DIR/testsuite/smoke-test/src/state_sync.rs: `assert_balance(&client_0, &account_0, 89);`
$DIR/testsuite/smoke-test/src/state_sync.rs: `assert_balance(&client_0, &account_1, 21);`
$DIR/testsuite/smoke-test/src/state_sync.rs: `swarm.validator_mut(node_to_restart).unwrap().stop();`
$DIR/testsuite/smoke-test/src/state_sync.rs: `transfer_coins(
            &client_1,
            &transaction_factory,
            &mut account_0,
            &account_1,
            1,
        );`
$DIR/testsuite/smoke-test/src/state_sync.rs: `assert_balance(&client_1, &account_0, 79);`
$DIR/testsuite/smoke-test/src/state_sync.rs: `assert_balance(&client_1, &account_1, 31);`
$DIR/testsuite/smoke-test/src/state_sync.rs: `swarm
        .validator_mut(node_to_restart)
        .unwrap()
        .start()
        .unwrap();`
$DIR/testsuite/smoke-test/src/state_sync.rs: `swarm
        .validator_mut(node_to_restart)
        .unwrap()
        .wait_until_healthy(Instant::now() + Duration::from_secs(10))
        .unwrap();`
$DIR/testsuite/smoke-test/src/state_sync.rs: `swarm
        .wait_for_all_nodes_to_catchup(Instant::now() + Duration::from_secs(60))
        .unwrap();`
$DIR/testsuite/smoke-test/src/state_sync.rs: `assert_balance(&client_0, &account_0, 79);`
$DIR/testsuite/smoke-test/src/state_sync.rs: `assert_balance(&client_1, &account_0, 90);`
$DIR/testsuite/smoke-test/src/state_sync.rs: `assert_balance(&client_1, &account_1, 20);`
$DIR/testsuite/smoke-test/src/state_sync.rs: `swarm.validator_mut(node_to_restart).unwrap().stop();`
$DIR/testsuite/smoke-test/src/state_sync.rs: `fs::remove_dir_all(state_db_path).unwrap();`
$DIR/testsuite/smoke-test/src/state_sync.rs: `swarm
        .validator_mut(node_to_restart)
        .unwrap()
        .start()
        .unwrap();`
$DIR/testsuite/smoke-test/src/state_sync.rs: `swarm
        .validator_mut(node_to_restart)
        .unwrap()
        .wait_until_healthy(Instant::now() + Duration::from_secs(10))
        .unwrap();`
$DIR/testsuite/smoke-test/src/state_sync.rs: `client_0
        .wait_for_signed_transaction(&txn, None, None)
        .unwrap();`
$DIR/testsuite/smoke-test/src/state_sync.rs: `assert_balance(&client_0, &account_0, 90);`
$DIR/testsuite/smoke-test/src/state_sync.rs: `assert_balance(&client_0, &account_1, 20);`
$DIR/testsuite/smoke-test/src/state_sync.rs: `client_0
        .wait_for_signed_transaction(&txn, None, None)
        .unwrap();`
$DIR/testsuite/smoke-test/src/state_sync.rs: `assert_balance(&client_0, &account_0, 80);`
$DIR/testsuite/smoke-test/src/state_sync.rs: `assert_balance(&client_1, &account_0, 90);`
$DIR/testsuite/smoke-test/src/state_sync.rs: `assert_balance(&client_1, &account_1, 20);`
$DIR/testsuite/smoke-test/src/state_sync.rs: `swarm.validator_mut(node_to_restart).unwrap().stop();`
$DIR/testsuite/smoke-test/src/state_sync.rs: `fs::remove_dir_all(consensus_db_path).unwrap();`
$DIR/testsuite/smoke-test/src/state_sync.rs: `swarm
        .validator_mut(node_to_restart)
        .unwrap()
        .start()
        .unwrap();`
$DIR/testsuite/smoke-test/src/state_sync.rs: `swarm
        .validator_mut(node_to_restart)
        .unwrap()
        .wait_until_healthy(Instant::now() + Duration::from_secs(10))
        .unwrap();`
$DIR/testsuite/smoke-test/src/state_sync.rs: `client_0
        .wait_for_signed_transaction(&txn, None, None)
        .unwrap();`
$DIR/testsuite/smoke-test/src/state_sync.rs: `assert_balance(&client_0, &account_0, 90);`
$DIR/testsuite/smoke-test/src/state_sync.rs: `assert_balance(&client_0, &account_1, 20);`
$DIR/testsuite/smoke-test/src/state_sync.rs: `client_0
        .wait_for_signed_transaction(&txn, None, None)
        .unwrap();`
$DIR/testsuite/smoke-test/src/state_sync.rs: `assert_balance(&client_0, &account_0, 80);`
$DIR/testsuite/smoke-test/src/state_sync.rs: `config.state_sync.chunk_limit = 5;`
$DIR/testsuite/smoke-test/src/state_sync.rs: `config.save(validator.config_path()).unwrap();`
$DIR/testsuite/smoke-test/src/state_sync.rs: `validator.restart().unwrap();`
$DIR/testsuite/smoke-test/src/state_sync.rs: `swarm.launch().unwrap();`
$DIR/testsuite/smoke-test/src/state_sync.rs: `enable_custom_script(
        &client_0,
        &transaction_factory,
        swarm.chain_info().root_account,
    )
    .unwrap();`
$DIR/testsuite/smoke-test/src/state_sync.rs: `assert_balance(&client_0, &account_0, 100);`
$DIR/testsuite/smoke-test/src/state_sync.rs: `assert_balance(&client_0, &account_1, 10);`
$DIR/testsuite/smoke-test/src/state_sync.rs: `swarm.validator_mut(node_to_restart).unwrap().stop();`
$DIR/testsuite/smoke-test/src/state_sync.rs: `transfer_coins(
            &client_0,
            &transaction_factory,
            &mut account_0,
            &account_1,
            10,
        );`
$DIR/testsuite/smoke-test/src/state_sync.rs: `client_0.submit(&txn).unwrap();`
$DIR/testsuite/smoke-test/src/state_sync.rs: `client_0
        .wait_for_signed_transaction(&txn, None, None)
        .unwrap();`
$DIR/testsuite/smoke-test/src/state_sync.rs: `enable_custom_script(
            &client_0,
            &transaction_factory,
            swarm.chain_info().root_account,
        )
        .unwrap();`
$DIR/testsuite/smoke-test/src/state_sync.rs: `node_config.execution.genesis = None;`
$DIR/testsuite/smoke-test/src/state_sync.rs: `node_config.execution.genesis_file_location = PathBuf::from("");`
$DIR/testsuite/smoke-test/src/state_sync.rs: `insert_waypoint(&mut node_config, waypoint_epoch_2);`
$DIR/testsuite/smoke-test/src/state_sync.rs: `node_config.save(node_config_path).unwrap();`
$DIR/testsuite/smoke-test/src/state_sync.rs: `swarm
        .validator_mut(node_to_restart)
        .unwrap()
        .start()
        .unwrap();`
$DIR/testsuite/smoke-test/src/state_sync.rs: `swarm
        .validator_mut(node_to_restart)
        .unwrap()
        .wait_until_healthy(Instant::now() + Duration::from_secs(10))
        .unwrap();`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.validators_mut()`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.config()`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.save(validator.config_path())`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.config_path()`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.restart()`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.launch()`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.validators()`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.map(|v| v.peer_id())`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.peer_id()`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.collect::<Vec<_>>()`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.validator(validator_peer_ids[1])`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.json_rpc_client()`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.chain_info()`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.transaction_factory()`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.validator_mut(node_to_restart)`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.stop()`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.validator_mut(node_to_restart)`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.start()`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.validator_mut(node_to_restart)`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.wait_until_healthy(Instant::now() + Duration::from_secs(10))`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.wait_for_all_nodes_to_catchup(Instant::now() + Duration::from_secs(60))`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.validator(node_to_restart)`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.json_rpc_client()`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.validator_mut(node_to_restart)`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.stop()`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.validator_mut(node_to_restart)`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.start()`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.validator_mut(node_to_restart)`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.wait_until_healthy(Instant::now() + Duration::from_secs(10))`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.wait_for_all_nodes_to_catchup(Instant::now() + Duration::from_secs(60))`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.validators()`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.map(|v| v.peer_id())`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.peer_id()`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.collect::<Vec<_>>()`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.validator(validator_peer_ids[1])`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.json_rpc_client()`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.chain_info()`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.transaction_factory()`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.validator(node_to_restart)`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.config()`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.validator_mut(node_to_restart)`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.stop()`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.storage.dir()`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.join("diemdb")`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.validator_mut(node_to_restart)`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.start()`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.validator_mut(node_to_restart)`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.wait_until_healthy(Instant::now() + Duration::from_secs(10))`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.validator(node_to_restart)`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.json_rpc_client()`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.wait_for_signed_transaction(&txn, None, None)`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.wait_for_signed_transaction(&txn, None, None)`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.validators()`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.map(|v| v.peer_id())`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.peer_id()`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.collect::<Vec<_>>()`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.validator(validator_peer_ids[1])`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.json_rpc_client()`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.chain_info()`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.transaction_factory()`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.validator(node_to_restart)`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.config()`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.validator_mut(node_to_restart)`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.stop()`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.storage.dir()`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.join("consensusdb")`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.validator_mut(node_to_restart)`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.start()`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.validator_mut(node_to_restart)`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.wait_until_healthy(Instant::now() + Duration::from_secs(10))`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.validator(node_to_restart)`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.json_rpc_client()`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.wait_for_signed_transaction(&txn, None, None)`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.wait_for_signed_transaction(&txn, None, None)`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.validators_mut()`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.config()`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.save(validator.config_path())`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.config_path()`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.restart()`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.launch()`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.validators()`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.map(|v| v.peer_id())`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.peer_id()`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.collect::<Vec<_>>()`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.validator(validator_peer_ids[0])`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.json_rpc_client()`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.chain_info()`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.transaction_factory()`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.chain_info()`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.validator_mut(node_to_restart)`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.stop()`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.join("../..")`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.join("testsuite/smoke-test/src/dev_modules/test_script.move")`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.canonicalize()`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.to_str()`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.sign_with_transaction_builder(transaction_factory.payload(
        TransactionPayload::Script(Script::new(
            compiled_script,
            vec![],
            vec![
                TransactionArgument::U64(10),
                TransactionArgument::Address(AccountAddress::from_hex_literal("0x0").unwrap()),
            ],
        )),
    ))`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.payload(
        TransactionPayload::Script(Script::new(
            compiled_script,
            vec![],
            vec![
                TransactionArgument::U64(10),
                TransactionArgument::Address(AccountAddress::from_hex_literal("0x0").unwrap()),
            ],
        )),
    )`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.submit(&txn)`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.wait_for_signed_transaction(&txn, None, None)`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.chain_info()`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.get_state_proof(0)`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.into_inner()`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.epoch_change_proof
                .inner()`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.ledger_info_with_sigs
            .last()`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.ledger_info()`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.get_state_proof(0)`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.into_inner()`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.epoch_change_proof
            .inner()`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.ledger_info_with_sigs
            .last()`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.ledger_info()`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.validator(node_to_restart)`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.config_path()`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.validator(node_to_restart)`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.config()`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.save(node_config_path)`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.validator_mut(node_to_restart)`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.start()`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.validator_mut(node_to_restart)`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.wait_until_healthy(Instant::now() + Duration::from_secs(10))`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.wait_for_all_nodes_to_catchup(Instant::now() + Duration::from_secs(60))`
$DIR/testsuite/smoke-test/src/storage.rs: `workspace_builder::get_bin("db-backup");`
$DIR/testsuite/smoke-test/src/storage.rs: `workspace_builder::get_bin("db-restore");`
$DIR/testsuite/smoke-test/src/storage.rs: `workspace_builder::get_bin("db-backup-verify");`
$DIR/testsuite/smoke-test/src/storage.rs: `transfer_coins(
        &client_1,
        &transaction_factory,
        &mut account_0,
        &account_1,
        1,
    );`
$DIR/testsuite/smoke-test/src/storage.rs: `assert_balance(&client_1, &account_0, expected_balance_0);`
$DIR/testsuite/smoke-test/src/storage.rs: `assert_balance(&client_1, &account_1, expected_balance_1);`
$DIR/testsuite/smoke-test/src/storage.rs: `transfer_and_reconfig(
        &client_1,
        &transaction_factory,
        swarm.chain_info().root_account,
        &mut account_0,
        &account_1,
        20,
    )
    .unwrap();`
$DIR/testsuite/smoke-test/src/storage.rs: `expected_balance_0 -= 20;`
$DIR/testsuite/smoke-test/src/storage.rs: `expected_balance_1 += 20;`
$DIR/testsuite/smoke-test/src/storage.rs: `assert_balance(&client_1, &account_0, expected_balance_0);`
$DIR/testsuite/smoke-test/src/storage.rs: `assert_balance(&client_1, &account_1, expected_balance_1);`
$DIR/testsuite/smoke-test/src/storage.rs: `swarm.validator_mut(node_to_restart).unwrap().stop();`
$DIR/testsuite/smoke-test/src/storage.rs: `insert_waypoint(&mut node0_config, genesis_waypoint);`
$DIR/testsuite/smoke-test/src/storage.rs: `node0_config.save(node0_config_path).unwrap();`
$DIR/testsuite/smoke-test/src/storage.rs: `fs::remove_dir_all(db_dir.join("diemdb")).unwrap();`
$DIR/testsuite/smoke-test/src/storage.rs: `fs::remove_dir_all(db_dir.join("consensusdb")).unwrap();`
$DIR/testsuite/smoke-test/src/storage.rs: `transfer_and_reconfig(
            &client_1,
            &transaction_factory,
            swarm.chain_info().root_account,
            &mut account_0,
            &account_1,
            20,
        )
        .unwrap();`
$DIR/testsuite/smoke-test/src/storage.rs: `expected_balance_0 -= 20;`
$DIR/testsuite/smoke-test/src/storage.rs: `expected_balance_1 += 20;`
$DIR/testsuite/smoke-test/src/storage.rs: `assert_balance(&client_1, &account_0, expected_balance_0);`
$DIR/testsuite/smoke-test/src/storage.rs: `assert_balance(&client_1, &account_1, expected_balance_1);`
$DIR/testsuite/smoke-test/src/storage.rs: `swarm
        .validator_mut(node_to_restart)
        .unwrap()
        .start()
        .unwrap();`
$DIR/testsuite/smoke-test/src/storage.rs: `swarm
        .validator_mut(node_to_restart)
        .unwrap()
        .wait_until_healthy(Instant::now() + Duration::from_secs(10))
        .unwrap();`
$DIR/testsuite/smoke-test/src/storage.rs: `swarm
        .wait_for_all_nodes_to_catchup(Instant::now() + Duration::from_secs(60))
        .unwrap();`
$DIR/testsuite/smoke-test/src/storage.rs: `assert_balance(&client_0, &account_0, expected_balance_0);`
$DIR/testsuite/smoke-test/src/storage.rs: `metadata_cache_path.create_as_dir().unwrap();`
$DIR/testsuite/smoke-test/src/storage.rs: `trusted_waypoints.iter().for_each(|w| {
        cmd.arg("--trust-waypoint");
        cmd.arg(&w.to_string());
    });`
$DIR/testsuite/smoke-test/src/storage.rs: `cmd.arg("--trust-waypoint");`
$DIR/testsuite/smoke-test/src/storage.rs: `cmd.arg(&w.to_string());`
$DIR/testsuite/smoke-test/src/storage.rs: `std::thread::sleep(Duration::from_secs(1));`
$DIR/testsuite/smoke-test/src/storage.rs: `bail!("Failed to create backup.");`
$DIR/testsuite/smoke-test/src/storage.rs: `metadata_cache_path1.create_as_dir().unwrap();`
$DIR/testsuite/smoke-test/src/storage.rs: `metadata_cache_path2.create_as_dir().unwrap();`
$DIR/testsuite/smoke-test/src/storage.rs: `backup_path.create_as_dir().unwrap();`
$DIR/testsuite/smoke-test/src/storage.rs: `backup_coordinator.kill().unwrap();`
$DIR/testsuite/smoke-test/src/storage.rs: `metadata_cache_path.create_as_dir().unwrap();`
$DIR/testsuite/smoke-test/src/storage.rs: `trusted_waypoints.iter().for_each(|w| {
        cmd.arg("--trust-waypoint");
        cmd.arg(&w.to_string());
    });`
$DIR/testsuite/smoke-test/src/storage.rs: `cmd.arg("--trust-waypoint");`
$DIR/testsuite/smoke-test/src/storage.rs: `cmd.arg(&w.to_string());`
$DIR/testsuite/smoke-test/src/storage.rs: `client.submit(&txn)?;`
$DIR/testsuite/smoke-test/src/storage.rs: `client.wait_for_signed_transaction(&txn, None, None)?;`
$DIR/testsuite/smoke-test/src/storage.rs: `transfer_coins(client, transaction_factory, account0, account1, 1);`
$DIR/testsuite/smoke-test/src/storage.rs: `.validators()`
$DIR/testsuite/smoke-test/src/storage.rs: `.map(|v| v.peer_id())`
$DIR/testsuite/smoke-test/src/storage.rs: `.peer_id()`
$DIR/testsuite/smoke-test/src/storage.rs: `.collect::<Vec<_>>()`
$DIR/testsuite/smoke-test/src/storage.rs: `.validator(validator_peer_ids[1])`
$DIR/testsuite/smoke-test/src/storage.rs: `.json_rpc_client()`
$DIR/testsuite/smoke-test/src/storage.rs: `.chain_info()`
$DIR/testsuite/smoke-test/src/storage.rs: `.transaction_factory()`
$DIR/testsuite/smoke-test/src/storage.rs: `.chain_info()`
$DIR/testsuite/smoke-test/src/storage.rs: `.validator(validator_peer_ids[1])`
$DIR/testsuite/smoke-test/src/storage.rs: `.config()`
$DIR/testsuite/smoke-test/src/storage.rs: `.storage.backup_service_address.port()`
$DIR/testsuite/smoke-test/src/storage.rs: `.validator_mut(node_to_restart)`
$DIR/testsuite/smoke-test/src/storage.rs: `.stop()`
$DIR/testsuite/smoke-test/src/storage.rs: `.validator(node_to_restart)`
$DIR/testsuite/smoke-test/src/storage.rs: `.config_path()`
$DIR/testsuite/smoke-test/src/storage.rs: `.validator(node_to_restart)`
$DIR/testsuite/smoke-test/src/storage.rs: `.config()`
$DIR/testsuite/smoke-test/src/storage.rs: `.base.waypoint.genesis_waypoint()`
$DIR/testsuite/smoke-test/src/storage.rs: `.save(node0_config_path)`
$DIR/testsuite/smoke-test/src/storage.rs: `.storage.dir()`
$DIR/testsuite/smoke-test/src/storage.rs: `.join("diemdb")`
$DIR/testsuite/smoke-test/src/storage.rs: `.join("consensusdb")`
$DIR/testsuite/smoke-test/src/storage.rs: `.path()`
$DIR/testsuite/smoke-test/src/storage.rs: `.chain_info()`
$DIR/testsuite/smoke-test/src/storage.rs: `.validator_mut(node_to_restart)`
$DIR/testsuite/smoke-test/src/storage.rs: `.start()`
$DIR/testsuite/smoke-test/src/storage.rs: `.validator_mut(node_to_restart)`
$DIR/testsuite/smoke-test/src/storage.rs: `.wait_until_healthy(Instant::now() + Duration::from_secs(10))`
$DIR/testsuite/smoke-test/src/storage.rs: `.wait_for_all_nodes_to_catchup(Instant::now() + Duration::from_secs(60))`
$DIR/testsuite/smoke-test/src/storage.rs: `.validator(node_to_restart)`
$DIR/testsuite/smoke-test/src/storage.rs: `.json_rpc_client()`
$DIR/testsuite/smoke-test/src/storage.rs: `.create_as_dir()`
$DIR/testsuite/smoke-test/src/storage.rs: `.for_each(|w| {
        cmd.arg("--trust-waypoint");
        cmd.arg(&w.to_string());
    })`
$DIR/testsuite/smoke-test/src/storage.rs: `.arg("--trust-waypoint")`
$DIR/testsuite/smoke-test/src/storage.rs: `.arg(&w.to_string())`
$DIR/testsuite/smoke-test/src/storage.rs: `.args(&[
            "--metadata-cache-dir",
            metadata_cache_path.path().to_str().unwrap(),
            "local-fs",
            "--dir",
            backup_path.to_str().unwrap(),
        ])`
$DIR/testsuite/smoke-test/src/storage.rs: `.path()`
$DIR/testsuite/smoke-test/src/storage.rs: `.to_str()`
$DIR/testsuite/smoke-test/src/storage.rs: `.to_str()`
$DIR/testsuite/smoke-test/src/storage.rs: `.current_dir(workspace_root())`
$DIR/testsuite/smoke-test/src/storage.rs: `.output()`
$DIR/testsuite/smoke-test/src/storage.rs: `.current_dir(workspace_root())`
$DIR/testsuite/smoke-test/src/storage.rs: `.args(&[
                "one-shot",
                "query",
                "backup-storage-state",
                "--metadata-cache-dir",
                metadata_cache_path.to_str().unwrap(),
                "local-fs",
                "--dir",
                backup_path.to_str().unwrap(),
            ])`
$DIR/testsuite/smoke-test/src/storage.rs: `.to_str()`
$DIR/testsuite/smoke-test/src/storage.rs: `.to_str()`
$DIR/testsuite/smoke-test/src/storage.rs: `.output()`
$DIR/testsuite/smoke-test/src/storage.rs: `.parse()`
$DIR/testsuite/smoke-test/src/storage.rs: `.latest_epoch_ending_epoch.is_some()`
$DIR/testsuite/smoke-test/src/storage.rs: `.latest_transaction_version.is_some()`
$DIR/testsuite/smoke-test/src/storage.rs: `.latest_state_snapshot_version.is_some()`
$DIR/testsuite/smoke-test/src/storage.rs: `.create_as_dir()`
$DIR/testsuite/smoke-test/src/storage.rs: `.create_as_dir()`
$DIR/testsuite/smoke-test/src/storage.rs: `.create_as_dir()`
$DIR/testsuite/smoke-test/src/storage.rs: `.current_dir(workspace_root())`
$DIR/testsuite/smoke-test/src/storage.rs: `.args(&[
            "coordinator",
            "run",
            "--backup-service-address",
            &format!("http://localhost:{}", backup_service_port),
            "--transaction-batch-size",
            &transaction_batch_size.to_string(),
            "--state-snapshot-interval",
            &state_snapshot_interval.to_string(),
            "--metadata-cache-dir",
            metadata_cache_path1.path().to_str().unwrap(),
            "local-fs",
            "--dir",
            backup_path.path().to_str().unwrap(),
        ])`
$DIR/testsuite/smoke-test/src/storage.rs: `.path()`
$DIR/testsuite/smoke-test/src/storage.rs: `.to_str()`
$DIR/testsuite/smoke-test/src/storage.rs: `.path()`
$DIR/testsuite/smoke-test/src/storage.rs: `.to_str()`
$DIR/testsuite/smoke-test/src/storage.rs: `.spawn()`
$DIR/testsuite/smoke-test/src/storage.rs: `.path()`
$DIR/testsuite/smoke-test/src/storage.rs: `.path()`
$DIR/testsuite/smoke-test/src/storage.rs: `.kill()`
$DIR/testsuite/smoke-test/src/storage.rs: `.create_as_dir()`
$DIR/testsuite/smoke-test/src/storage.rs: `.for_each(|w| {
        cmd.arg("--trust-waypoint");
        cmd.arg(&w.to_string());
    })`
$DIR/testsuite/smoke-test/src/storage.rs: `.arg("--trust-waypoint")`
$DIR/testsuite/smoke-test/src/storage.rs: `.arg(&w.to_string())`
$DIR/testsuite/smoke-test/src/storage.rs: `.args(&[
            "--target-db-dir",
            db_path.to_str().unwrap(),
            "auto",
            "--metadata-cache-dir",
            metadata_cache_path.path().to_str().unwrap(),
            "local-fs",
            "--dir",
            backup_path.to_str().unwrap(),
        ])`
$DIR/testsuite/smoke-test/src/storage.rs: `.to_str()`
$DIR/testsuite/smoke-test/src/storage.rs: `.path()`
$DIR/testsuite/smoke-test/src/storage.rs: `.to_str()`
$DIR/testsuite/smoke-test/src/storage.rs: `.to_str()`
$DIR/testsuite/smoke-test/src/storage.rs: `.current_dir(workspace_root())`
$DIR/testsuite/smoke-test/src/storage.rs: `.output()`
$DIR/testsuite/smoke-test/src/storage.rs: `.get_metadata()`
$DIR/testsuite/smoke-test/src/storage.rs: `.into_inner()`
$DIR/testsuite/smoke-test/src/storage.rs: `.sign_with_transaction_builder(
                transaction_factory.update_diem_version(0, current_version + 1),
            )`
$DIR/testsuite/smoke-test/src/storage.rs: `.update_diem_version(0, current_version + 1)`
$DIR/testsuite/smoke-test/src/storage.rs: `.submit(&txn)`
$DIR/testsuite/smoke-test/src/storage.rs: `.wait_for_signed_transaction(&txn, None, None)`
$DIR/types/src/account_address.rs: `hash.copy_from_slice(bytes);`
$DIR/types/src/account_address.rs: `.parse()`
$DIR/types/src/account_address.rs: `.copy_from_slice(bytes)`
$DIR/types/src/epoch_change.rs: `validator_verifier.push(current_verifier.clone());`
$DIR/types/src/epoch_change.rs: `valid_ledger_info.push(LedgerInfoWithSignatures::new(ledger_info, signatures));`
$DIR/types/src/epoch_change.rs: `current_signers = next_signers;`
$DIR/types/src/epoch_change.rs: `current_verifier = next_verifier;`
$DIR/types/src/epoch_change.rs: `current_version += 1;`
$DIR/types/src/epoch_change.rs: `list.extend_from_slice(&valid_ledger_info[8..9]);`
$DIR/types/src/epoch_change.rs: `list.reverse();`
$DIR/types/src/epoch_change.rs: `.collect()`
$DIR/types/src/epoch_change.rs: `.push(current_verifier.clone())`
$DIR/types/src/epoch_change.rs: `.map(|s| (s.author(), s.sign(&ledger_info)))`
$DIR/types/src/epoch_change.rs: `.author()`
$DIR/types/src/epoch_change.rs: `.sign(&ledger_info)`
$DIR/types/src/epoch_change.rs: `.collect()`
$DIR/types/src/epoch_change.rs: `.push(LedgerInfoWithSignatures::new(ledger_info, signatures))`
$DIR/types/src/epoch_change.rs: `.extend_from_slice(&valid_ledger_info[8..9])`
$DIR/types/src/epoch_change.rs: `.reverse()`
$DIR/types/src/epoch_change.rs: `.ledger_info()`
$DIR/types/src/epoch_change.rs: `.ledger_info()`
$DIR/types/src/epoch_change.rs: `.ledger_info()`
$DIR/types/src/ledger_info.rs: `author_to_signature_map.insert(validator.author(), validator.sign(&ledger_info));`
$DIR/types/src/ledger_info.rs: `author_to_signature_map.insert(validator.author(), validator.sign(&ledger_info));`
$DIR/types/src/ledger_info.rs: `.map(|i| ValidatorSigner::random([i; 32]))`
$DIR/types/src/ledger_info.rs: `.collect()`
$DIR/types/src/ledger_info.rs: `.insert(validator.author(), validator.sign(&ledger_info))`
$DIR/types/src/ledger_info.rs: `.author()`
$DIR/types/src/ledger_info.rs: `.sign(&ledger_info)`
$DIR/types/src/ledger_info.rs: `.rev()`
$DIR/types/src/ledger_info.rs: `.insert(validator.author(), validator.sign(&ledger_info))`
$DIR/types/src/ledger_info.rs: `.author()`
$DIR/types/src/ledger_info.rs: `.sign(&ledger_info)`
$DIR/types/src/network_address/encrypted.rs: `addr_vec.extend_from_slice(auth_tag.as_slice());`
$DIR/types/src/network_address/encrypted.rs: `aead.decrypt_in_place_detached(nonce_slice, ad_slice, enc_addr_slice, auth_tag_slice)
            .map_err(|_| ParseError::DecryptError)?;`
$DIR/types/src/network_address/encrypted.rs: `enc_addr.truncate(auth_tag_offset);`
$DIR/types/src/network_address/encrypted.rs: `malicious_enc_addr.seq_num = 1234;`
$DIR/types/src/network_address/encrypted.rs: `malicious_enc_addr
            .decrypt(&shared_val_netaddr_key, &account, addr_idx)
            .unwrap_err();`
$DIR/types/src/network_address/encrypted.rs: `malicious_enc_addr.key_version = 9999;`
$DIR/types/src/network_address/encrypted.rs: `malicious_enc_addr
            .decrypt(&shared_val_netaddr_key, &account, addr_idx)
            .unwrap_err();`
$DIR/types/src/network_address/encrypted.rs: `buf[buf_len - 1] ^= 0x55;`
$DIR/types/src/network_address/encrypted.rs: `malicious_enc_addr
            .decrypt(&shared_val_netaddr_key, &account, addr_idx)
            .unwrap_err();`
$DIR/types/src/network_address/encrypted.rs: `malicious_enc_addr.enc_addr = vec![0x42u8; 123];`
$DIR/types/src/network_address/encrypted.rs: `malicious_enc_addr
            .decrypt(&shared_val_netaddr_key, &account, addr_idx)
            .unwrap_err();`
$DIR/types/src/network_address/encrypted.rs: `enc_addr
            .clone()
            .decrypt(&shared_val_netaddr_key, &malicious_account, addr_idx)
            .unwrap_err();`
$DIR/types/src/network_address/encrypted.rs: `enc_addr
            .clone()
            .decrypt(&malicious_shared_val_netaddr_key, &account, addr_idx)
            .unwrap_err();`
$DIR/types/src/network_address/encrypted.rs: `.to_be_bytes()`
$DIR/types/src/network_address/encrypted.rs: `.to_be_bytes()`
$DIR/types/src/network_address/encrypted.rs: `.encrypt_in_place_detached(nonce_slice, ad_slice, &mut addr_vec)`
$DIR/types/src/network_address/encrypted.rs: `.extend_from_slice(auth_tag.as_slice())`
$DIR/types/src/network_address/encrypted.rs: `.len()`
$DIR/types/src/network_address/encrypted.rs: `.to_be_bytes()`
$DIR/types/src/network_address/encrypted.rs: `.to_be_bytes()`
$DIR/types/src/network_address/encrypted.rs: `.len()`
$DIR/types/src/network_address/encrypted.rs: `.split_at_mut(auth_tag_offset)`
$DIR/types/src/network_address/encrypted.rs: `.decrypt_in_place_detached(nonce_slice, ad_slice, enc_addr_slice, auth_tag_slice)`
$DIR/types/src/network_address/encrypted.rs: `.map_err(|_| ParseError::DecryptError)`
$DIR/types/src/network_address/encrypted.rs: `.truncate(auth_tag_offset)`
$DIR/types/src/network_address/encrypted.rs: `.into()`
$DIR/types/src/network_address/encrypted.rs: `.len()`
$DIR/types/src/network_address/mod.rs: `.map_err(|err| format_err!("failed to parse: input: '{}', err: {}", addr_str, err))`
$DIR/types/src/nibble/nibble_path/nibble_path_test.rs: `.nibbles()`
$DIR/types/src/nibble/nibble_path/nibble_path_test.rs: `.bits()`
$DIR/types/src/nibble/nibble_path/nibble_path_test.rs: `.nibbles()`
$DIR/types/src/nibble/nibble_path/nibble_path_test.rs: `.visited_nibbles()`
$DIR/types/src/nibble/nibble_path/nibble_path_test.rs: `.nibbles()`
$DIR/types/src/nibble/nibble_path/nibble_path_test.rs: `.nibbles()`
$DIR/types/src/nibble/nibble_path/nibble_path_test.rs: `.nibbles()`
$DIR/types/src/nibble/nibble_path/nibble_path_test.rs: `.nibbles()`
$DIR/types/src/nibble/nibble_path/nibble_path_test.rs: `.nibbles()`
$DIR/types/src/nibble/nibble_path/nibble_path_test.rs: `.nibbles()`
$DIR/types/src/proof/accumulator/accumulator_test.rs: `current_leaves.resize(
        leaves.len().next_power_of_two(),
        *ACCUMULATOR_PLACEHOLDER_HASH,
    );`
$DIR/types/src/proof/accumulator/accumulator_test.rs: `parent_leaves.push(parent_hash);`
$DIR/types/src/proof/accumulator/accumulator_test.rs: `current_leaves = parent_leaves;`
$DIR/types/src/proof/accumulator/accumulator_test.rs: `current_level += 1;`
$DIR/types/src/proof/accumulator/accumulator_test.rs: `accumulator = accumulator.append(&[leaf]);`
$DIR/types/src/proof/accumulator/accumulator_test.rs: `.is_empty()`
$DIR/types/src/proof/accumulator/accumulator_test.rs: `.resize(
        leaves.len().next_power_of_two(),
        *ACCUMULATOR_PLACEHOLDER_HASH,
    )`
$DIR/types/src/proof/accumulator/accumulator_test.rs: `.len()`
$DIR/types/src/proof/accumulator/accumulator_test.rs: `.next_power_of_two()`
$DIR/types/src/proof/accumulator/accumulator_test.rs: `.len()`
$DIR/types/src/proof/accumulator/accumulator_test.rs: `.enumerate()`
$DIR/types/src/proof/accumulator/accumulator_test.rs: `.step_by(2)`
$DIR/types/src/proof/accumulator/accumulator_test.rs: `.push(parent_hash)`
$DIR/types/src/proof/accumulator/accumulator_test.rs: `.is_empty()`
$DIR/types/src/proof/accumulator/accumulator_test.rs: `.len()`
$DIR/types/src/proof/accumulator/accumulator_test.rs: `.get(&Position::root_from_leaf_index(rightmost_leaf_index))`
$DIR/types/src/proof/accumulator/accumulator_test.rs: `.map(|x| x.to_be_bytes().test_only_hash())`
$DIR/types/src/proof/accumulator/accumulator_test.rs: `.to_be_bytes()`
$DIR/types/src/proof/accumulator/accumulator_test.rs: `.test_only_hash()`
$DIR/types/src/proof/accumulator/accumulator_test.rs: `.map(|x| {
        let leaves = create_leaves(0..x);
        compute_root_hash_naive(&leaves)
    })`
$DIR/types/src/proof/accumulator/accumulator_test.rs: `.into_iter()`
$DIR/types/src/proof/accumulator/accumulator_test.rs: `.enumerate()`
$DIR/types/src/proof/accumulator/accumulator_test.rs: `.append(&[leaf])`
$DIR/types/src/proof/accumulator/mock.rs: `self.p2c.borrow_mut().insert(parent, pair);`
$DIR/types/src/proof/accumulator/mock.rs: `level = siblings_iter
                .map(|pair| self.hash_internal((pair[0], pair.get(1).copied())))
                .collect();`
$DIR/types/src/proof/accumulator/mock.rs: `.entry(pair)`
$DIR/types/src/proof/accumulator/mock.rs: `.or_insert_with(|| Self::hash_internal_inner(pair))`
$DIR/types/src/proof/accumulator/mock.rs: `.insert(parent, pair)`
$DIR/types/src/proof/accumulator/mock.rs: `.len()`
$DIR/types/src/proof/accumulator/mock.rs: `.chunks(2)`
$DIR/types/src/proof/accumulator/mock.rs: `.map(|pair| self.hash_internal((pair[0], pair.get(1).copied())))`
$DIR/types/src/proof/accumulator/mock.rs: `.get(1)`
$DIR/types/src/proof/accumulator/mock.rs: `.collect()`
$DIR/types/src/proof/accumulator/mock.rs: `.into_iter()`
$DIR/types/src/proof/accumulator/mock.rs: `.next()`
$DIR/types/src/proof/position/position_test.rs: `position = Position::from_inorder_index(0);`
$DIR/types/src/proof/position/position_test.rs: `position = Position::from_inorder_index(0);`
$DIR/types/src/proof/position/position_test.rs: `position = Position::from_inorder_index(7);`
$DIR/types/src/proof/position/position_test.rs: `position = Position::from_inorder_index(10);`
$DIR/types/src/proof/position/position_test.rs: `.parent()`
$DIR/types/src/proof/position/position_test.rs: `.sibling()`
$DIR/types/src/proof/position/position_test.rs: `.sibling()`
$DIR/types/src/proof/position/position_test.rs: `.left_child()`
$DIR/types/src/proof/position/position_test.rs: `.right_child()`
$DIR/types/src/proof/position/position_test.rs: `.left_child()`
$DIR/types/src/proof/position/position_test.rs: `.right_child()`
$DIR/types/src/proof/position/position_test.rs: `.level()`
$DIR/types/src/proof/position/position_test.rs: `.level()`
$DIR/types/src/proof/position/position_test.rs: `.iter_ancestor_sibling()`
$DIR/types/src/proof/position/position_test.rs: `.take(20)`
$DIR/types/src/proof/position/position_test.rs: `.map(Position::to_inorder_index)`
$DIR/types/src/proof/position/position_test.rs: `.collect::<Vec<u64>>()`
$DIR/types/src/proof/position/position_test.rs: `.iter_ancestor_sibling()`
$DIR/types/src/proof/position/position_test.rs: `.take(20)`
$DIR/types/src/proof/position/position_test.rs: `.map(Position::to_inorder_index)`
$DIR/types/src/proof/position/position_test.rs: `.collect::<Vec<u64>>()`
$DIR/types/src/proof/position/position_test.rs: `.iter_ancestor_sibling()`
$DIR/types/src/proof/position/position_test.rs: `.take(20)`
$DIR/types/src/proof/position/position_test.rs: `.map(Position::to_inorder_index)`
$DIR/types/src/proof/position/position_test.rs: `.collect::<Vec<u64>>()`
$DIR/types/src/proof/position/position_test.rs: `.iter_ancestor()`
$DIR/types/src/proof/position/position_test.rs: `.take(20)`
$DIR/types/src/proof/position/position_test.rs: `.map(Position::to_inorder_index)`
$DIR/types/src/proof/position/position_test.rs: `.collect::<Vec<u64>>()`
$DIR/types/src/proof/position/position_test.rs: `.iter_ancestor()`
$DIR/types/src/proof/position/position_test.rs: `.take(20)`
$DIR/types/src/proof/position/position_test.rs: `.map(Position::to_inorder_index)`
$DIR/types/src/proof/position/position_test.rs: `.collect::<Vec<u64>>()`
$DIR/types/src/proof/position/position_test.rs: `.right_child()`
$DIR/types/src/proof/position/position_test.rs: `.parent()`
$DIR/types/src/proof/position/position_test.rs: `.left_child()`
$DIR/types/src/proof/position/position_test.rs: `.parent()`
$DIR/types/src/proof/position/position_test.rs: `.level()`
$DIR/types/src/proof/position/position_test.rs: `.parent()`
$DIR/types/src/proof/position/position_test.rs: `.level()`
$DIR/types/src/proof/position/position_test.rs: `.level()`
$DIR/types/src/proof/position/position_test.rs: `.pos_counting_from_left()`
$DIR/types/src/proof/position/position_test.rs: `.to_inorder_index()`
$DIR/types/src/proof/position/position_test.rs: `.right_child()`
$DIR/types/src/proof/position/position_test.rs: `.pos_counting_from_left()`
$DIR/types/src/proof/position/position_test.rs: `.left_child()`
$DIR/types/src/proof/position/position_test.rs: `.pos_counting_from_left()`
$DIR/types/src/proof/position/position_test.rs: `.left_child()`
$DIR/types/src/proof/position/position_test.rs: `.to_inorder_index()`
$DIR/types/src/proof/position/position_test.rs: `.to_inorder_index()`
$DIR/types/src/proof/position/position_test.rs: `.to_inorder_index()`
$DIR/types/src/proof/position/position_test.rs: `.right_child()`
$DIR/types/src/proof/position/position_test.rs: `.to_inorder_index()`
$DIR/types/src/proof/position/position_test.rs: `.left_child()`
$DIR/types/src/proof/position/position_test.rs: `.to_inorder_index()`
$DIR/types/src/proof/position/position_test.rs: `.to_inorder_index()`
$DIR/types/src/proof/position/position_test.rs: `.right_child()`
$DIR/types/src/proof/position/position_test.rs: `.to_inorder_index()`
$DIR/types/src/proof/position/position_test.rs: `.to_inorder_index()`
$DIR/types/src/proof/position/position_test.rs: `.right_child()`
$DIR/types/src/proof/position/position_test.rs: `.to_inorder_index()`
$DIR/types/src/proof/position/position_test.rs: `.to_inorder_index()`
$DIR/types/src/proof/position/position_test.rs: `.right_child()`
$DIR/types/src/proof/position/position_test.rs: `.left_child()`
$DIR/types/src/proof/position/position_test.rs: `.sibling()`
$DIR/types/src/proof/position/position_test.rs: `.right_child()`
$DIR/types/src/proof/position/position_test.rs: `.sibling()`
$DIR/types/src/proof/position/position_test.rs: `.left_child()`
$DIR/types/src/proof/position/position_test.rs: `.right_child()`
$DIR/types/src/proof/position/position_test.rs: `.child(NodeDirection::Right)`
$DIR/types/src/proof/position/position_test.rs: `.left_child()`
$DIR/types/src/proof/position/position_test.rs: `.child(NodeDirection::Left)`
$DIR/types/src/proof/unit_tests/proof_test.rs: `siblings.push(HashValue::new([i; 32]));`
$DIR/types/src/proof/unit_tests/proof_test.rs: `siblings.push(HashValue::new([i; 32]));`
$DIR/types/src/proof/unit_tests/proof_test.rs: `siblings.push(HashValue::new([i; 32]));`
$DIR/types/src/proof/unit_tests/proof_test.rs: `HashValue::zero();`
$DIR/types/src/proof/unit_tests/proof_test.rs: `.test_only_hash()`
$DIR/types/src/proof/unit_tests/proof_test.rs: `.test_only_hash()`
$DIR/types/src/proof/unit_tests/proof_test.rs: `.test_only_hash()`
$DIR/types/src/proof/unit_tests/proof_test.rs: `.test_only_hash()`
$DIR/types/src/proof/unit_tests/proof_test.rs: `.hash()`
$DIR/types/src/proof/unit_tests/proof_test.rs: `.test_only_hash()`
$DIR/types/src/proof/unit_tests/proof_test.rs: `.test_only_hash()`
$DIR/types/src/proof/unit_tests/proof_test.rs: `.test_only_hash()`
$DIR/types/src/proof/unit_tests/proof_test.rs: `.hash()`
$DIR/types/src/proof/unit_tests/proof_test.rs: `.hash()`
$DIR/types/src/proof/unit_tests/proof_test.rs: `.hash()`
$DIR/types/src/proof/unit_tests/proof_test.rs: `.test_only_hash()`
$DIR/types/src/proof/unit_tests/proof_test.rs: `.push(HashValue::new([i; 32]))`
$DIR/types/src/proof/unit_tests/proof_test.rs: `.fold(element_hash, |hash, sibling_hash| {
        TestAccumulatorInternalNode::new(hash, *sibling_hash).hash()
    })`
$DIR/types/src/proof/unit_tests/proof_test.rs: `.test_only_hash()`
$DIR/types/src/proof/unit_tests/proof_test.rs: `.push(HashValue::new([i; 32]))`
$DIR/types/src/proof/unit_tests/proof_test.rs: `.fold(element_hash, |hash, sibling_hash| {
        TestAccumulatorInternalNode::new(*sibling_hash, hash).hash()
    })`
$DIR/types/src/proof/unit_tests/proof_test.rs: `.test_only_hash()`
$DIR/types/src/proof/unit_tests/proof_test.rs: `.push(HashValue::new([i; 32]))`
$DIR/types/src/proof/unit_tests/proof_test.rs: `.rev()`
$DIR/types/src/proof/unit_tests/proof_test.rs: `.fold(element_hash, |hash, sibling_hash| {
            TestAccumulatorInternalNode::new(hash, *sibling_hash).hash()
        })`
$DIR/types/src/proof/unit_tests/proof_test.rs: `.test_only_hash()`
$DIR/types/src/proof/unit_tests/proof_test.rs: `.into()`
$DIR/types/src/proof/unit_tests/proof_test.rs: `.test_only_hash()`
$DIR/types/src/proof/unit_tests/proof_test.rs: `.into()`
$DIR/types/src/proof/unit_tests/proof_test.rs: `.hash()`
$DIR/types/src/proof/unit_tests/proof_test.rs: `.into()`
$DIR/types/src/proof/unit_tests/proof_test.rs: `.hash()`
$DIR/types/src/proof/unit_tests/proof_test.rs: `.test_only_hash()`
$DIR/types/src/proof/unit_tests/proof_test.rs: `.test_only_hash()`
$DIR/types/src/proof/unit_tests/proof_test.rs: `.test_only_hash()`
$DIR/types/src/proof/unit_tests/proof_test.rs: `.test_only_hash()`
$DIR/types/src/proof/unit_tests/proof_test.rs: `.hash()`
$DIR/types/src/proof/unit_tests/proof_test.rs: `.hash()`
$DIR/types/src/proof/unit_tests/proof_test.rs: `.hash()`
$DIR/types/src/proof/unit_tests/proof_test.rs: `.hash()`
$DIR/types/src/proof/unit_tests/proof_test.rs: `.hash()`
$DIR/types/src/proof/unit_tests/proof_test.rs: `.hash()`
$DIR/types/src/proof/unit_tests/proof_test.rs: `.hash()`
$DIR/types/src/proof/unit_tests/proof_test.rs: `.hash()`
$DIR/types/src/proof/unit_tests/proof_test.rs: `.hash()`
$DIR/types/src/proof/unit_tests/proof_test.rs: `.test_only_hash()`
$DIR/types/src/proof/unit_tests/proof_test.rs: `.test_only_hash()`
$DIR/types/src/proof/unit_tests/proof_test.rs: `.test_only_hash()`
$DIR/types/src/proof/unit_tests/proof_test.rs: `.test_only_hash()`
$DIR/types/src/proof/unit_tests/proof_test.rs: `.test_only_hash()`
$DIR/types/src/proof/unit_tests/proof_test.rs: `.test_only_hash()`
$DIR/types/src/proof/unit_tests/proof_test.rs: `.hash()`
$DIR/types/src/proof/unit_tests/proof_test.rs: `.hash()`
$DIR/types/src/proof/unit_tests/proof_test.rs: `.hash()`
$DIR/types/src/proof/unit_tests/proof_test.rs: `.hash()`
$DIR/types/src/proof/unit_tests/proof_test.rs: `.test_only_hash()`
$DIR/types/src/proof/unit_tests/proof_test.rs: `.test_only_hash()`
$DIR/types/src/proof/unit_tests/proof_test.rs: `.test_only_hash()`
$DIR/types/src/proof/unit_tests/proof_test.rs: `.test_only_hash()`
$DIR/types/src/proof/unit_tests/proof_test.rs: `.test_only_hash()`
$DIR/types/src/proof/unit_tests/proof_test.rs: `.hash()`
$DIR/types/src/proof/unit_tests/proof_test.rs: `.hash()`
$DIR/types/src/proof/unit_tests/proof_test.rs: `.hash()`
$DIR/types/src/proof/unit_tests/proof_test.rs: `.hash()`
$DIR/types/src/proof/unit_tests/proof_test.rs: `.hash()`
$DIR/types/src/proof/unit_tests/proof_test.rs: `.hash()`
$DIR/types/src/proof/unit_tests/proof_test.rs: `.hash()`
$DIR/types/src/proof/unit_tests/proof_test.rs: `.hash()`
$DIR/types/src/proof/unit_tests/proof_test.rs: `.hash()`
$DIR/types/src/proof/unit_tests/proof_test.rs: `.test_only_hash()`
$DIR/types/src/proof/unit_tests/proof_test.rs: `.test_only_hash()`
$DIR/types/src/proof/unit_tests/proof_test.rs: `.public_key()`
$DIR/types/src/proof/unit_tests/proof_test.rs: `.sign(&privkey, pubkey)`
$DIR/types/src/proof/unit_tests/proof_test.rs: `.into_inner()`
$DIR/types/src/proof/unit_tests/proof_test.rs: `.hash()`
$DIR/types/src/proof/unit_tests/proof_test.rs: `.test_only_hash()`
$DIR/types/src/proof/unit_tests/proof_test.rs: `.test_only_hash()`
$DIR/types/src/proof/unit_tests/proof_test.rs: `.hash()`
$DIR/types/src/proof/unit_tests/proof_test.rs: `.hash()`
$DIR/types/src/proof/unit_tests/proof_test.rs: `.hash()`
$DIR/types/src/proof/unit_tests/proof_test.rs: `.hash()`
$DIR/types/src/proof/unit_tests/proof_test.rs: `.hash()`
$DIR/types/src/proof/unit_tests/proof_test.rs: `.test_only_hash()`
$DIR/types/src/proof/unit_tests/proof_test.rs: `.into()`
$DIR/types/src/proof/unit_tests/proof_test.rs: `.test_only_hash()`
$DIR/types/src/proof/unit_tests/proof_test.rs: `.verify(*ACCUMULATOR_PLACEHOLDER_HASH)`
$DIR/types/src/proof/unit_tests/proof_test.rs: `.verify(*ACCUMULATOR_PLACEHOLDER_HASH)`
$DIR/types/src/proof/unit_tests/proof_test.rs: `.verify(HashValue::zero())`
$DIR/types/src/proof/unit_tests/proof_test.rs: `.hash()`
$DIR/types/src/proof/unit_tests/proof_test.rs: `.verify(*ACCUMULATOR_PLACEHOLDER_HASH)`
$DIR/types/src/unit_tests/canonical_serialization_examples.rs: `.freeze()`
$DIR/types/src/unit_tests/code_debug_fmt_test.rs: `fmt::write(&mut output, format_args!("{:#?}", script))
        .expect("Error occurred while trying to format Script.");`
$DIR/types/src/unit_tests/transaction_test.rs: `.public_key()`
$DIR/types/src/unit_tests/transaction_test.rs: `.check_signature()`
$DIR/types/src/validator_verifier.rs: `account_address_to_validator_info.insert(
            random_signer.author(),
            crate::validator_verifier::ValidatorConsensusInfo::new(random_signer.public_key(), 1),
        );`
$DIR/types/src/validator_verifier.rs: `signers.push(random_signer);`
$DIR/types/src/validator_verifier.rs: `author_to_signature_map.insert(validator.author(), validator.sign(&dummy_struct));`
$DIR/types/src/validator_verifier.rs: `author_to_public_key_map.insert(
                validator.author(),
                ValidatorConsensusInfo::new(validator.public_key(), 1),
            );`
$DIR/types/src/validator_verifier.rs: `author_to_signature_map.insert(validator.author(), validator.sign(&dummy_struct));`
$DIR/types/src/validator_verifier.rs: `author_to_signature_map
            .insert(unknown_validator_signer.author(), unknown_signature.clone());`
$DIR/types/src/validator_verifier.rs: `author_to_signature_map.clear();`
$DIR/types/src/validator_verifier.rs: `author_to_signature_map.insert(validator.author(), validator.sign(&dummy_struct));`
$DIR/types/src/validator_verifier.rs: `author_to_signature_map
            .insert(unknown_validator_signer.author(), unknown_signature.clone());`
$DIR/types/src/validator_verifier.rs: `author_to_signature_map.clear();`
$DIR/types/src/validator_verifier.rs: `author_to_signature_map.insert(validator.author(), validator.sign(&dummy_struct));`
$DIR/types/src/validator_verifier.rs: `author_to_signature_map.insert(unknown_validator_signer.author(), unknown_signature);`
$DIR/types/src/validator_verifier.rs: `author_to_public_key_map.insert(
                validator_signer.author(),
                ValidatorConsensusInfo::new(validator_signer.public_key(), voting_power),
            );`
$DIR/types/src/validator_verifier.rs: `author_to_signature_map.insert(
                validator_signer.author(),
                validator_signer.sign(&dummy_struct),
            );`
$DIR/types/src/validator_verifier.rs: `author_to_public_key_map.insert(
                validator_signer.author(),
                ValidatorConsensusInfo::new(validator_signer.public_key(), i as u64),
            );`
$DIR/types/src/validator_verifier.rs: `author_to_signature_map.insert(
                validator_signer.author(),
                validator_signer.sign(&dummy_struct),
            );`
$DIR/types/src/validator_verifier.rs: `author_to_signature_map
            .insert(unknown_validator_signer.author(), unknown_signature.clone());`
$DIR/types/src/validator_verifier.rs: `author_to_signature_map.clear();`
$DIR/types/src/validator_verifier.rs: `author_to_signature_map.insert(validator.author(), validator.sign(&dummy_struct));`
$DIR/types/src/validator_verifier.rs: `author_to_signature_map
            .insert(unknown_validator_signer.author(), unknown_signature.clone());`
$DIR/types/src/validator_verifier.rs: `author_to_signature_map.clear();`
$DIR/types/src/validator_verifier.rs: `author_to_signature_map.insert(validator.author(), validator.sign(&dummy_struct));`
$DIR/types/src/validator_verifier.rs: `author_to_signature_map.insert(unknown_validator_signer.author(), unknown_signature);`
$DIR/types/src/validator_verifier.rs: `.insert(
            random_signer.author(),
            crate::validator_verifier::ValidatorConsensusInfo::new(random_signer.public_key(), 1),
        )`
$DIR/types/src/validator_verifier.rs: `.author()`
$DIR/types/src/validator_verifier.rs: `.public_key()`
$DIR/types/src/validator_verifier.rs: `.push(random_signer)`
$DIR/types/src/validator_verifier.rs: `.insert(validator.author(), validator.sign(&dummy_struct))`
$DIR/types/src/validator_verifier.rs: `.author()`
$DIR/types/src/validator_verifier.rs: `.sign(&dummy_struct)`
$DIR/types/src/validator_verifier.rs: `.sign(&dummy_struct)`
$DIR/types/src/validator_verifier.rs: `.author()`
$DIR/types/src/validator_verifier.rs: `.public_key()`
$DIR/types/src/validator_verifier.rs: `.sign(&dummy_struct)`
$DIR/types/src/validator_verifier.rs: `.map(|i| ValidatorSigner::random([i; 32]))`
$DIR/types/src/validator_verifier.rs: `.collect()`
$DIR/types/src/validator_verifier.rs: `.insert(
                validator.author(),
                ValidatorConsensusInfo::new(validator.public_key(), 1),
            )`
$DIR/types/src/validator_verifier.rs: `.author()`
$DIR/types/src/validator_verifier.rs: `.public_key()`
$DIR/types/src/validator_verifier.rs: `.insert(validator.author(), validator.sign(&dummy_struct))`
$DIR/types/src/validator_verifier.rs: `.author()`
$DIR/types/src/validator_verifier.rs: `.sign(&dummy_struct)`
$DIR/types/src/validator_verifier.rs: `.sign(&dummy_struct)`
$DIR/types/src/validator_verifier.rs: `.insert(unknown_validator_signer.author(), unknown_signature.clone())`
$DIR/types/src/validator_verifier.rs: `.author()`
$DIR/types/src/validator_verifier.rs: `.clear()`
$DIR/types/src/validator_verifier.rs: `.take(5)`
$DIR/types/src/validator_verifier.rs: `.insert(validator.author(), validator.sign(&dummy_struct))`
$DIR/types/src/validator_verifier.rs: `.author()`
$DIR/types/src/validator_verifier.rs: `.sign(&dummy_struct)`
$DIR/types/src/validator_verifier.rs: `.insert(unknown_validator_signer.author(), unknown_signature.clone())`
$DIR/types/src/validator_verifier.rs: `.author()`
$DIR/types/src/validator_verifier.rs: `.clear()`
$DIR/types/src/validator_verifier.rs: `.take(4)`
$DIR/types/src/validator_verifier.rs: `.insert(validator.author(), validator.sign(&dummy_struct))`
$DIR/types/src/validator_verifier.rs: `.author()`
$DIR/types/src/validator_verifier.rs: `.sign(&dummy_struct)`
$DIR/types/src/validator_verifier.rs: `.insert(unknown_validator_signer.author(), unknown_signature)`
$DIR/types/src/validator_verifier.rs: `.author()`
$DIR/types/src/validator_verifier.rs: `.map(|i| ValidatorSigner::random([i; 32]))`
$DIR/types/src/validator_verifier.rs: `.collect()`
$DIR/types/src/validator_verifier.rs: `.enumerate()`
$DIR/types/src/validator_verifier.rs: `.insert(
                validator_signer.author(),
                ValidatorConsensusInfo::new(validator_signer.public_key(), voting_power),
            )`
$DIR/types/src/validator_verifier.rs: `.author()`
$DIR/types/src/validator_verifier.rs: `.public_key()`
$DIR/types/src/validator_verifier.rs: `.insert(
                validator_signer.author(),
                validator_signer.sign(&dummy_struct),
            )`
$DIR/types/src/validator_verifier.rs: `.author()`
$DIR/types/src/validator_verifier.rs: `.sign(&dummy_struct)`
$DIR/types/src/validator_verifier.rs: `.map(|i| ValidatorSigner::random([i; 32]))`
$DIR/types/src/validator_verifier.rs: `.collect()`
$DIR/types/src/validator_verifier.rs: `.enumerate()`
$DIR/types/src/validator_verifier.rs: `.insert(
                validator_signer.author(),
                ValidatorConsensusInfo::new(validator_signer.public_key(), i as u64),
            )`
$DIR/types/src/validator_verifier.rs: `.author()`
$DIR/types/src/validator_verifier.rs: `.public_key()`
$DIR/types/src/validator_verifier.rs: `.insert(
                validator_signer.author(),
                validator_signer.sign(&dummy_struct),
            )`
$DIR/types/src/validator_verifier.rs: `.author()`
$DIR/types/src/validator_verifier.rs: `.sign(&dummy_struct)`
$DIR/types/src/validator_verifier.rs: `.sign(&dummy_struct)`
$DIR/types/src/validator_verifier.rs: `.insert(unknown_validator_signer.author(), unknown_signature.clone())`
$DIR/types/src/validator_verifier.rs: `.author()`
$DIR/types/src/validator_verifier.rs: `.clear()`
$DIR/types/src/validator_verifier.rs: `.skip(2)`
$DIR/types/src/validator_verifier.rs: `.insert(validator.author(), validator.sign(&dummy_struct))`
$DIR/types/src/validator_verifier.rs: `.author()`
$DIR/types/src/validator_verifier.rs: `.sign(&dummy_struct)`
$DIR/types/src/validator_verifier.rs: `.insert(unknown_validator_signer.author(), unknown_signature.clone())`
$DIR/types/src/validator_verifier.rs: `.author()`
$DIR/types/src/validator_verifier.rs: `.clear()`
$DIR/types/src/validator_verifier.rs: `.take(3)`
$DIR/types/src/validator_verifier.rs: `.insert(validator.author(), validator.sign(&dummy_struct))`
$DIR/types/src/validator_verifier.rs: `.author()`
$DIR/types/src/validator_verifier.rs: `.sign(&dummy_struct)`
$DIR/types/src/validator_verifier.rs: `.insert(unknown_validator_signer.author(), unknown_signature)`
$DIR/types/src/validator_verifier.rs: `.author()`
$DIR/vm-validator/src/unit_tests/vm_validator_test.rs: `.validate_transaction(transaction)`
$DIR/vm-validator/src/unit_tests/vm_validator_test.rs: `.validate_transaction(transaction)`
$DIR/vm-validator/src/unit_tests/vm_validator_test.rs: `.validate_transaction(transaction)`
$DIR/vm-validator/src/unit_tests/vm_validator_test.rs: `.validate_transaction(transaction)`
$DIR/vm-validator/src/unit_tests/vm_validator_test.rs: `.large_transaction_cutoff.get()`
$DIR/vm-validator/src/unit_tests/vm_validator_test.rs: `.intrinsic_gas_per_byte.get()`
$DIR/vm-validator/src/unit_tests/vm_validator_test.rs: `.validate_transaction(transaction)`
$DIR/vm-validator/src/unit_tests/vm_validator_test.rs: `.validate_transaction(transaction)`
$DIR/vm-validator/src/unit_tests/vm_validator_test.rs: `.validate_transaction(transaction)`
$DIR/vm-validator/src/unit_tests/vm_validator_test.rs: `.validate_transaction(transaction)`
$DIR/vm-validator/src/unit_tests/vm_validator_test.rs: `.validate_transaction(transaction)`
$DIR/vm-validator/src/unit_tests/vm_validator_test.rs: `.validate_transaction(transaction)`
$DIR/vm-validator/src/unit_tests/vm_validator_test.rs: `.public_key()`
$DIR/vm-validator/src/unit_tests/vm_validator_test.rs: `.validate_transaction(transaction)`
$DIR/vm-validator/src/unit_tests/vm_validator_test.rs: `.validate_transaction(transaction)`
$DIR/vm-validator/src/unit_tests/vm_validator_test.rs: `.validate_transaction(transaction)`
$DIR/vm-validator/src/unit_tests/vm_validator_test.rs: `.into_inner()`
$DIR/vm-validator/src/unit_tests/vm_validator_test.rs: `.validate_transaction(transaction)`
$DIR/vm-validator/src/unit_tests/vm_validator_test.rs: `.into_inner()`
$DIR/vm-validator/src/unit_tests/vm_validator_test.rs: `.validate_transaction(transaction)`
$DIR/vm-validator/src/unit_tests/vm_validator_test.rs: `.into_inner()`
$DIR/vm-validator/src/unit_tests/vm_validator_test.rs: `.validate_transaction(bad_transaction)`
$DIR/vm-validator/src/unit_tests/vm_validator_test.rs: `.validate_transaction(transaction)`
$DIR/vm-validator/src/unit_tests/vm_validator_test.rs: `.id()`
$DIR/vm-validator/src/unit_tests/vm_validator_test.rs: `.validate_transaction(transaction)`
$DIR/vm-validator/src/unit_tests/vm_validator_test.rs: `.validate_transaction(transaction)`
$DIR/vm-validator/src/unit_tests/vm_validator_test.rs: `.validate_transaction(transaction)`
