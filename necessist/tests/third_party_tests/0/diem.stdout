$DIR/config/generate-key/src/lib.rs: `path.create_as_file().unwrap();`
$DIR/config/generate-key/src/lib.rs: `.create_as_file()`
$DIR/config/generate-key/src/lib.rs: `.path()`
$DIR/config/generate-key/src/lib.rs: `.path()`
$DIR/config/management/genesis/src/command.rs: `temppath.create_as_file().unwrap();`
$DIR/config/management/genesis/src/command.rs: `file.write_all(&layout_text.to_string().into_bytes())
            .unwrap();`
$DIR/config/management/genesis/src/command.rs: `file.sync_all().unwrap();`
$DIR/config/management/genesis/src/command.rs: `helper
            .set_layout(temppath.path().to_str().unwrap())
            .unwrap();`
$DIR/config/management/genesis/src/command.rs: `tempdir.create_as_dir().unwrap();`
$DIR/config/management/genesis/src/command.rs: `temppath.create_as_file().unwrap();`
$DIR/config/management/genesis/src/command.rs: `temppath.persist();`
$DIR/config/management/genesis/src/command.rs: `file.write_all(b).unwrap();`
$DIR/config/management/genesis/src/command.rs: `file.sync_all().unwrap();`
$DIR/config/management/genesis/src/command.rs: `helper
            .set_move_modules(tempdir.path().to_str().unwrap())
            .unwrap();`
$DIR/config/management/genesis/src/command.rs: `helper.initialize_by_idx(dave_ns.into(), storage_idx);`
$DIR/config/management/genesis/src/command.rs: `helper
            .diem_root_key(dave_ns, &(dave_ns.to_string() + shared))
            .unwrap();`
$DIR/config/management/genesis/src/command.rs: `helper
            .treasury_compliance_key(dave_ns, &(dave_ns.to_string() + shared))
            .unwrap();`
$DIR/config/management/genesis/src/command.rs: `storage_idx += 1;`
$DIR/config/management/genesis/src/command.rs: `helper.initialize_by_idx(ns.clone(), storage_idx);`
$DIR/config/management/genesis/src/command.rs: `helper.owner_key(&ns, &ns_shared).unwrap();`
$DIR/config/management/genesis/src/command.rs: `storage_idx += 1;`
$DIR/config/management/genesis/src/command.rs: `helper.initialize_by_idx(ns.clone(), storage_idx);`
$DIR/config/management/genesis/src/command.rs: `helper.operator_key(&ns, &ns_shared).unwrap();`
$DIR/config/management/genesis/src/command.rs: `helper.set_operator(&operator_name, &ns_shared).unwrap();`
$DIR/config/management/genesis/src/command.rs: `helper
                .validator_config(
                    &owner_name,
                    "/ip4/0.0.0.0/tcp/6180".parse().unwrap(),
                    "/ip4/0.0.0.0/tcp/6180".parse().unwrap(),
                    ChainId::test(),
                    &ns,
                    &ns_shared,
                )
                .unwrap();`
$DIR/config/management/genesis/src/command.rs: `genesis_path.create_as_file().unwrap();`
$DIR/config/management/genesis/src/command.rs: `helper
            .genesis(ChainId::test(), genesis_path.path())
            .unwrap();`
$DIR/config/management/genesis/src/command.rs: `file.read_to_end(&mut contents).unwrap();`
$DIR/config/management/genesis/src/command.rs: `helper.insert_waypoint(ns, waypoint).unwrap();`
$DIR/config/management/genesis/src/command.rs: `helper.verify_genesis(ns, genesis_path.path()).unwrap();`
$DIR/config/management/genesis/src/command.rs: `helper
            .set_layout(temppath.path().to_str().unwrap())
            .unwrap_err();`
$DIR/config/management/genesis/src/command.rs: `temppath.create_as_file().unwrap();`
$DIR/config/management/genesis/src/command.rs: `file.write_all(&layout_text.to_string().into_bytes())
            .unwrap();`
$DIR/config/management/genesis/src/command.rs: `file.sync_all().unwrap();`
$DIR/config/management/genesis/src/command.rs: `helper
            .set_layout(temppath.path().to_str().unwrap())
            .unwrap();`
$DIR/config/management/genesis/src/command.rs: `storage_helper.initialize_by_idx(local_operator_ns.into(), 0);`
$DIR/config/management/genesis/src/command.rs: `shared_storage
            .set(OWNER_KEY, owner_key)
            .map_err(|e| Error::StorageWriteError("shared", OWNER_KEY, e.to_string()))
            .unwrap();`
$DIR/config/management/genesis/src/command.rs: `storage_helper.initialize_by_idx(local_owner_ns.into(), 0);`
$DIR/config/management/genesis/src/command.rs: `shared_storage
            .set(OPERATOR_KEY, operator_key)
            .map_err(|e| Error::StorageWriteError("shared", OPERATOR_KEY, e.to_string()))
            .unwrap();`
$DIR/config/management/genesis/src/command.rs: `helper.initialize_by_idx(namespace.into(), 0);`
$DIR/config/management/genesis/src/command.rs: `.create_as_file()`
$DIR/config/management/genesis/src/command.rs: `.path()`
$DIR/config/management/genesis/src/command.rs: `.write_all(&layout_text.to_string().into_bytes())`
$DIR/config/management/genesis/src/command.rs: `.sync_all()`
$DIR/config/management/genesis/src/command.rs: `.set_layout(temppath.path().to_str().unwrap())`
$DIR/config/management/genesis/src/command.rs: `.path()`
$DIR/config/management/genesis/src/command.rs: `.to_str()`
$DIR/config/management/genesis/src/command.rs: `.create_as_dir()`
$DIR/config/management/genesis/src/command.rs: `.path()`
$DIR/config/management/genesis/src/command.rs: `.create_as_file()`
$DIR/config/management/genesis/src/command.rs: `.persist()`
$DIR/config/management/genesis/src/command.rs: `.path()`
$DIR/config/management/genesis/src/command.rs: `.write_all(b)`
$DIR/config/management/genesis/src/command.rs: `.sync_all()`
$DIR/config/management/genesis/src/command.rs: `.set_move_modules(tempdir.path().to_str().unwrap())`
$DIR/config/management/genesis/src/command.rs: `.path()`
$DIR/config/management/genesis/src/command.rs: `.to_str()`
$DIR/config/management/genesis/src/command.rs: `.initialize_by_idx(dave_ns.into(), storage_idx)`
$DIR/config/management/genesis/src/command.rs: `.into()`
$DIR/config/management/genesis/src/command.rs: `.diem_root_key(dave_ns, &(dave_ns.to_string() + shared))`
$DIR/config/management/genesis/src/command.rs: `.treasury_compliance_key(dave_ns, &(dave_ns.to_string() + shared))`
$DIR/config/management/genesis/src/command.rs: `.initialize_by_idx(ns.clone(), storage_idx)`
$DIR/config/management/genesis/src/command.rs: `.owner_key(&ns, &ns_shared)`
$DIR/config/management/genesis/src/command.rs: `.initialize_by_idx(ns.clone(), storage_idx)`
$DIR/config/management/genesis/src/command.rs: `.operator_key(&ns, &ns_shared)`
$DIR/config/management/genesis/src/command.rs: `.set_operator(&operator_name, &ns_shared)`
$DIR/config/management/genesis/src/command.rs: `.chars()`
$DIR/config/management/genesis/src/command.rs: `.skip(9)`
$DIR/config/management/genesis/src/command.rs: `.collect()`
$DIR/config/management/genesis/src/command.rs: `.validator_config(
                    &owner_name,
                    "/ip4/0.0.0.0/tcp/6180".parse().unwrap(),
                    "/ip4/0.0.0.0/tcp/6180".parse().unwrap(),
                    ChainId::test(),
                    &ns,
                    &ns_shared,
                )`
$DIR/config/management/genesis/src/command.rs: `.parse()`
$DIR/config/management/genesis/src/command.rs: `.parse()`
$DIR/config/management/genesis/src/command.rs: `.create_as_file()`
$DIR/config/management/genesis/src/command.rs: `.genesis(ChainId::test(), genesis_path.path())`
$DIR/config/management/genesis/src/command.rs: `.path()`
$DIR/config/management/genesis/src/command.rs: `.path()`
$DIR/config/management/genesis/src/command.rs: `.read_to_end(&mut contents)`
$DIR/config/management/genesis/src/command.rs: `.create_waypoint(ChainId::test())`
$DIR/config/management/genesis/src/command.rs: `.insert_waypoint(ns, waypoint)`
$DIR/config/management/genesis/src/command.rs: `.verify_genesis(ns, genesis_path.path())`
$DIR/config/management/genesis/src/command.rs: `.path()`
$DIR/config/management/genesis/src/command.rs: `.set_layout(temppath.path().to_str().unwrap())`
$DIR/config/management/genesis/src/command.rs: `.path()`
$DIR/config/management/genesis/src/command.rs: `.to_str()`
$DIR/config/management/genesis/src/command.rs: `.create_as_file()`
$DIR/config/management/genesis/src/command.rs: `.path()`
$DIR/config/management/genesis/src/command.rs: `.write_all(&layout_text.to_string().into_bytes())`
$DIR/config/management/genesis/src/command.rs: `.sync_all()`
$DIR/config/management/genesis/src/command.rs: `.set_layout(temppath.path().to_str().unwrap())`
$DIR/config/management/genesis/src/command.rs: `.path()`
$DIR/config/management/genesis/src/command.rs: `.to_str()`
$DIR/config/management/genesis/src/command.rs: `.storage(constants::COMMON_NS.into())`
$DIR/config/management/genesis/src/command.rs: `.into()`
$DIR/config/management/genesis/src/command.rs: `.get::<String>(constants::LAYOUT)`
$DIR/config/management/genesis/src/command.rs: `.initialize_by_idx(local_operator_ns.into(), 0)`
$DIR/config/management/genesis/src/command.rs: `.into()`
$DIR/config/management/genesis/src/command.rs: `.operator_key(local_operator_ns, remote_operator_ns)`
$DIR/config/management/genesis/src/command.rs: `.public_key()`
$DIR/config/management/genesis/src/command.rs: `.storage(owner_name.into())`
$DIR/config/management/genesis/src/command.rs: `.into()`
$DIR/config/management/genesis/src/command.rs: `.set(OWNER_KEY, owner_key)`
$DIR/config/management/genesis/src/command.rs: `.map_err(|e| Error::StorageWriteError("shared", OWNER_KEY, e.to_string()))`
$DIR/config/management/genesis/src/command.rs: `.validator_config(
                owner_name,
                "/ip4/0.0.0.0/tcp/6180".parse().unwrap(),
                "/ip4/0.0.0.0/tcp/6180".parse().unwrap(),
                ChainId::test(),
                local_operator_ns,
                remote_operator_ns,
            )`
$DIR/config/management/genesis/src/command.rs: `.parse()`
$DIR/config/management/genesis/src/command.rs: `.parse()`
$DIR/config/management/genesis/src/command.rs: `.storage(remote_operator_ns.into())`
$DIR/config/management/genesis/src/command.rs: `.into()`
$DIR/config/management/genesis/src/command.rs: `.get::<Transaction>(constants::VALIDATOR_CONFIG)`
$DIR/config/management/genesis/src/command.rs: `.as_signed_user_txn()`
$DIR/config/management/genesis/src/command.rs: `.payload()`
$DIR/config/management/genesis/src/command.rs: `.args()`
$DIR/config/management/genesis/src/command.rs: `.get(0)`
$DIR/config/management/genesis/src/command.rs: `.initialize_by_idx(local_owner_ns.into(), 0)`
$DIR/config/management/genesis/src/command.rs: `.into()`
$DIR/config/management/genesis/src/command.rs: `.public_key()`
$DIR/config/management/genesis/src/command.rs: `.storage(operator_name.into())`
$DIR/config/management/genesis/src/command.rs: `.into()`
$DIR/config/management/genesis/src/command.rs: `.set(OPERATOR_KEY, operator_key)`
$DIR/config/management/genesis/src/command.rs: `.map_err(|e| Error::StorageWriteError("shared", OPERATOR_KEY, e.to_string()))`
$DIR/config/management/genesis/src/command.rs: `.set_operator(operator_name, remote_owner_ns)`
$DIR/config/management/genesis/src/command.rs: `.storage(remote_owner_ns.into())`
$DIR/config/management/genesis/src/command.rs: `.into()`
$DIR/config/management/genesis/src/command.rs: `.get::<String>(constants::VALIDATOR_OPERATOR)`
$DIR/config/management/genesis/src/command.rs: `.verify(namespace)`
$DIR/config/management/genesis/src/command.rs: `.split("Key not set")`
$DIR/config/management/genesis/src/command.rs: `.count()`
$DIR/config/management/genesis/src/command.rs: `.initialize_by_idx(namespace.into(), 0)`
$DIR/config/management/genesis/src/command.rs: `.into()`
$DIR/config/management/genesis/src/command.rs: `.verify(namespace)`
$DIR/config/management/genesis/src/command.rs: `.split("Key not set")`
$DIR/config/management/genesis/src/command.rs: `.count()`
$DIR/config/management/network-address-encryption/src/lib.rs: `encryptor.initialize().unwrap();`
$DIR/config/management/network-address-encryption/src/lib.rs: `rng.fill_bytes(&mut key);`
$DIR/config/management/network-address-encryption/src/lib.rs: `encryptor.add_key(0, key).unwrap();`
$DIR/config/management/network-address-encryption/src/lib.rs: `encryptor.set_current_version(0).unwrap();`
$DIR/config/management/network-address-encryption/src/lib.rs: `rng.fill_bytes(&mut key);`
$DIR/config/management/network-address-encryption/src/lib.rs: `encryptor.add_key(1, key).unwrap();`
$DIR/config/management/network-address-encryption/src/lib.rs: `encryptor.set_current_version(1).unwrap();`
$DIR/config/management/network-address-encryption/src/lib.rs: `rng.fill_bytes(&mut key);`
$DIR/config/management/network-address-encryption/src/lib.rs: `encryptor.add_key(4, key).unwrap();`
$DIR/config/management/network-address-encryption/src/lib.rs: `encryptor.set_current_version(4).unwrap();`
$DIR/config/management/network-address-encryption/src/lib.rs: `encryptor.set_current_version(5).unwrap_err();`
$DIR/config/management/network-address-encryption/src/lib.rs: `encryptor.storage = Storage::from(InMemoryStorage::new());`
$DIR/config/management/network-address-encryption/src/lib.rs: `*encryptor.cached_keys.write() = None;`
$DIR/config/management/network-address-encryption/src/lib.rs: `encryptor.encrypt(&addrs, account, 1).unwrap_err();`
$DIR/config/management/network-address-encryption/src/lib.rs: `encryptor.initialize().unwrap();`
$DIR/config/management/network-address-encryption/src/lib.rs: `rng.fill_bytes(&mut key);`
$DIR/config/management/network-address-encryption/src/lib.rs: `encryptor.add_key(0, key).unwrap();`
$DIR/config/management/network-address-encryption/src/lib.rs: `.initialize()`
$DIR/config/management/network-address-encryption/src/lib.rs: `.gen()`
$DIR/config/management/network-address-encryption/src/lib.rs: `.fill_bytes(&mut key)`
$DIR/config/management/network-address-encryption/src/lib.rs: `.add_key(0, key)`
$DIR/config/management/network-address-encryption/src/lib.rs: `.set_current_version(0)`
$DIR/config/management/network-address-encryption/src/lib.rs: `.fill_bytes(&mut key)`
$DIR/config/management/network-address-encryption/src/lib.rs: `.add_key(1, key)`
$DIR/config/management/network-address-encryption/src/lib.rs: `.set_current_version(1)`
$DIR/config/management/network-address-encryption/src/lib.rs: `.fill_bytes(&mut key)`
$DIR/config/management/network-address-encryption/src/lib.rs: `.add_key(4, key)`
$DIR/config/management/network-address-encryption/src/lib.rs: `.set_current_version(4)`
$DIR/config/management/network-address-encryption/src/lib.rs: `.set_current_version(5)`
$DIR/config/management/network-address-encryption/src/lib.rs: `.encrypt(&addrs, account, 5)`
$DIR/config/management/network-address-encryption/src/lib.rs: `.decrypt(&enc_addrs, account)`
$DIR/config/management/network-address-encryption/src/lib.rs: `.decrypt(&enc_addrs, another_account)`
$DIR/config/management/network-address-encryption/src/lib.rs: `.encrypt(&addrs, account, 0)`
$DIR/config/management/network-address-encryption/src/lib.rs: `.decrypt(&enc_addrs, account)`
$DIR/config/management/network-address-encryption/src/lib.rs: `.encrypt(&addrs, account, 1)`
$DIR/config/management/network-address-encryption/src/lib.rs: `.decrypt(&enc_addrs, account)`
$DIR/config/management/network-address-encryption/src/lib.rs: `.cached_keys.write()`
$DIR/config/management/network-address-encryption/src/lib.rs: `.encrypt(&addrs, account, 1)`
$DIR/config/management/network-address-encryption/src/lib.rs: `.decrypt(&enc_addrs, account)`
$DIR/config/management/network-address-encryption/src/lib.rs: `.initialize()`
$DIR/config/management/network-address-encryption/src/lib.rs: `.gen()`
$DIR/config/management/network-address-encryption/src/lib.rs: `.fill_bytes(&mut key)`
$DIR/config/management/network-address-encryption/src/lib.rs: `.add_key(0, key)`
$DIR/config/management/network-address-encryption/src/lib.rs: `.set_current_version(0)`
$DIR/config/management/src/config.rs: `.id()`
$DIR/config/management/src/secure_backend.rs: `storage(memory).unwrap();`
$DIR/config/management/src/secure_backend.rs: `path.create_as_file().unwrap();`
$DIR/config/management/src/secure_backend.rs: `storage(&disk).unwrap();`
$DIR/config/management/src/secure_backend.rs: `path.create_as_file().unwrap();`
$DIR/config/management/src/secure_backend.rs: `file.write_all(b"disk_token").unwrap();`
$DIR/config/management/src/secure_backend.rs: `storage(&github).unwrap();`
$DIR/config/management/src/secure_backend.rs: `storage(&github).unwrap();`
$DIR/config/management/src/secure_backend.rs: `storage(&github).unwrap();`
$DIR/config/management/src/secure_backend.rs: `path.create_as_file().unwrap();`
$DIR/config/management/src/secure_backend.rs: `file.write_all(b"disk_token").unwrap();`
$DIR/config/management/src/secure_backend.rs: `storage(&vault).unwrap();`
$DIR/config/management/src/secure_backend.rs: `storage(&vault).unwrap();`
$DIR/config/management/src/secure_backend.rs: `.create_as_file()`
$DIR/config/management/src/secure_backend.rs: `.create_as_file()`
$DIR/config/management/src/secure_backend.rs: `.path()`
$DIR/config/management/src/secure_backend.rs: `.write_all(b"disk_token")`
$DIR/config/management/src/secure_backend.rs: `.path()`
$DIR/config/management/src/secure_backend.rs: `.to_str()`
$DIR/config/management/src/secure_backend.rs: `.create_as_file()`
$DIR/config/management/src/secure_backend.rs: `.path()`
$DIR/config/management/src/secure_backend.rs: `.write_all(b"disk_token")`
$DIR/config/management/src/secure_backend.rs: `.path()`
$DIR/config/management/src/secure_backend.rs: `.to_str()`
$DIR/config/management/src/validator_config.rs: `validate_address("no_port", &no_port).expect_err("Failed to check for port");`
$DIR/config/management/src/validator_config.rs: `validate_address("no_ip", &no_ip).expect_err("Failed to check for no IP");`
$DIR/config/management/src/validator_config.rs: `validate_address("ipv6", &ipv6).expect_err("Failed to check for ipv6");`
$DIR/config/management/src/validator_config.rs: `validate_address("ipv4_and_ipv6", &ipv4_and_ipv6).expect_err("Failed to check for ipv6");`
$DIR/config/management/src/validator_config.rs: `validate_address("bad_protocol", &bad_protocol)
            .expect_err("Failed to check for bad protocol");`
$DIR/config/management/src/validator_config.rs: `validate_address("ip", &ip).expect("IP failed to validate");`
$DIR/config/seed-peer-generator/src/utils.rs: `expected_peers.insert(peer_id, Peer::from_addrs(role, fullnode_addresses));`
$DIR/config/seed-peer-generator/src/utils.rs: `.insert(peer_id, Peer::from_addrs(role, fullnode_addresses))`
$DIR/config/src/config/execution_config.rs: `config.genesis = Some(fake_genesis.clone());`
$DIR/config/src/config/execution_config.rs: `config.save(&root_dir).expect("Unable to save");`
$DIR/config/src/config/execution_config.rs: `config.genesis = None;`
$DIR/config/src/config/execution_config.rs: `.path()`
$DIR/config/src/config/execution_config.rs: `.load(&root_dir)`
$DIR/config/src/config/execution_config.rs: `.freeze()`
$DIR/config/src/config/execution_config.rs: `.path()`
$DIR/config/src/config/execution_config.rs: `.save(&root_dir)`
$DIR/config/src/config/execution_config.rs: `.load(&root_dir)`
$DIR/config/src/config/mod.rs: `NodeConfig::default_for_public_full_node();`
$DIR/config/src/config/mod.rs: `NodeConfig::default_for_validator();`
$DIR/config/src/config/mod.rs: `NodeConfig::default_for_validator_full_node();`
$DIR/config/src/config/mod.rs: `NodeConfig::parse(docker_public_full_node).unwrap();`
$DIR/config/src/config/secure_backend_config.rs: `temppath.create_as_file().unwrap();`
$DIR/config/src/config/secure_backend_config.rs: `file.write_all(b"disk_token").unwrap();`
$DIR/config/src/config/secure_backend_config.rs: `.create_as_file()`
$DIR/config/src/config/secure_backend_config.rs: `.path()`
$DIR/config/src/config/secure_backend_config.rs: `.write_all(b"disk_token")`
$DIR/config/src/config/secure_backend_config.rs: `.path()`
$DIR/config/src/config/test_config.rs: `test_config.random_account_key(&mut rng);`
$DIR/config/src/config/test_config.rs: `test_config.random_execution_key(&mut rng);`
$DIR/config/src/config/test_config.rs: `clone_test_config.auth_key = test_config.auth_key;`
$DIR/config/src/config/test_config.rs: `clone_test_config.execution_key = test_config.execution_key.clone();`
$DIR/config/src/config/test_config.rs: `clone_test_config.operator_key = test_config.operator_key.clone();`
$DIR/config/src/config/test_config.rs: `clone_test_config.owner_key = test_config.owner_key.clone();`
$DIR/config/src/config/test_config.rs: `.random_account_key(&mut rng)`
$DIR/config/src/config/test_config.rs: `.random_execution_key(&mut rng)`
$DIR/consensus/consensus-types/src/block_test.rs: `ledger_info_altered.add_signature(signer.author(), signature);`
$DIR/consensus/consensus-types/src/block_test.rs: `.quorum_cert()`
$DIR/consensus/consensus-types/src/block_test.rs: `.certified_block()`
$DIR/consensus/consensus-types/src/block_test.rs: `.gen_block_info(
            parent_block_info.executed_state_id(),
            parent_block_info.version(),
            parent_block_info.next_epoch_state().cloned(),
        )`
$DIR/consensus/consensus-types/src/block_test.rs: `.executed_state_id()`
$DIR/consensus/consensus-types/src/block_test.rs: `.version()`
$DIR/consensus/consensus-types/src/block_test.rs: `.next_epoch_state()`
$DIR/consensus/consensus-types/src/block_test.rs: `.quorum_cert()`
$DIR/consensus/consensus-types/src/block_test.rs: `.certified_block()`
$DIR/consensus/consensus-types/src/block_test.rs: `.as_micros()`
$DIR/consensus/consensus-types/src/block_test.rs: `.as_micros()`
$DIR/consensus/consensus-types/src/block_test.rs: `.as_micros()`
$DIR/consensus/consensus-types/src/block_test.rs: `.sign(genesis_qc.ledger_info().ledger_info())`
$DIR/consensus/consensus-types/src/block_test.rs: `.ledger_info()`
$DIR/consensus/consensus-types/src/block_test.rs: `.ledger_info()`
$DIR/consensus/consensus-types/src/block_test.rs: `.ledger_info()`
$DIR/consensus/consensus-types/src/block_test.rs: `.add_signature(signer.author(), signature)`
$DIR/consensus/consensus-types/src/block_test.rs: `.author()`
$DIR/consensus/consensus-types/src/block_test.rs: `.vote_data()`
$DIR/consensus/consensus-types/src/timeout_2chain.rs: `ledger_info.add_signature(signer.author(), signature);`
$DIR/consensus/consensus-types/src/timeout_2chain.rs: `valid_timeout_cert.add(signer.author(), timeout.clone(), timeout.sign(signer));`
$DIR/consensus/consensus-types/src/timeout_2chain.rs: `valid_timeout_cert.verify(&validators).unwrap();`
$DIR/consensus/consensus-types/src/timeout_2chain.rs: `invalid_timeout_cert.timeout.round = 1;`
$DIR/consensus/consensus-types/src/timeout_2chain.rs: `invalid_timeout_cert
        .signatures
        .get_mut(&signers[0].author())
        .unwrap()
        .1 = Ed25519Signature::dummy_signature();`
$DIR/consensus/consensus-types/src/timeout_2chain.rs: `invalid_timeout_cert
        .signatures
        .remove(&signers[0].author())
        .unwrap();`
$DIR/consensus/consensus-types/src/timeout_2chain.rs: `invalid_timeout_cert.timeout.quorum_cert = generate_quorum(2, quorum_size);`
$DIR/consensus/consensus-types/src/timeout_2chain.rs: `invalid_timeout_cert.timeout.quorum_cert = generate_quorum(3, quorum_size - 1);`
$DIR/consensus/consensus-types/src/timeout_2chain.rs: `.quorum_voting_power()`
$DIR/consensus/consensus-types/src/timeout_2chain.rs: `.hash()`
$DIR/consensus/consensus-types/src/timeout_2chain.rs: `.sign(ledger_info.ledger_info())`
$DIR/consensus/consensus-types/src/timeout_2chain.rs: `.ledger_info()`
$DIR/consensus/consensus-types/src/timeout_2chain.rs: `.add_signature(signer.author(), signature)`
$DIR/consensus/consensus-types/src/timeout_2chain.rs: `.author()`
$DIR/consensus/consensus-types/src/timeout_2chain.rs: `.map(|qc_round| generate_timeout(4, qc_round))`
$DIR/consensus/consensus-types/src/timeout_2chain.rs: `.collect()`
$DIR/consensus/consensus-types/src/timeout_2chain.rs: `.zip(&signers)`
$DIR/consensus/consensus-types/src/timeout_2chain.rs: `.add(signer.author(), timeout.clone(), timeout.sign(signer))`
$DIR/consensus/consensus-types/src/timeout_2chain.rs: `.author()`
$DIR/consensus/consensus-types/src/timeout_2chain.rs: `.sign(signer)`
$DIR/consensus/consensus-types/src/timeout_2chain.rs: `.verify(&validators)`
$DIR/consensus/consensus-types/src/timeout_2chain.rs: `.verify(&validators)`
$DIR/consensus/consensus-types/src/timeout_2chain.rs: `.signatures
        .get_mut(&signers[0].author())`
$DIR/consensus/consensus-types/src/timeout_2chain.rs: `.author()`
$DIR/consensus/consensus-types/src/timeout_2chain.rs: `.verify(&validators)`
$DIR/consensus/consensus-types/src/timeout_2chain.rs: `.signatures
        .remove(&signers[0].author())`
$DIR/consensus/consensus-types/src/timeout_2chain.rs: `.author()`
$DIR/consensus/consensus-types/src/timeout_2chain.rs: `.verify(&validators)`
$DIR/consensus/consensus-types/src/timeout_2chain.rs: `.verify(&validators)`
$DIR/consensus/consensus-types/src/timeout_2chain.rs: `.verify(&validators)`
$DIR/consensus/safety-rules/src/persistent_safety_storage.rs: `safety_storage
            .set_safety_data(SafetyData::new(9, 8, 1, 0, None))
            .unwrap();`
$DIR/consensus/safety-rules/src/persistent_safety_storage.rs: `.private_key()`
$DIR/consensus/safety-rules/src/persistent_safety_storage.rs: `.safety_data()`
$DIR/consensus/safety-rules/src/persistent_safety_storage.rs: `.set_safety_data(SafetyData::new(9, 8, 1, 0, None))`
$DIR/consensus/safety-rules/src/persistent_safety_storage.rs: `.safety_data()`
$DIR/consensus/safety-rules/src/tests/local.rs: `suite::run_test_suite(
                    &safety_rules(
                        *verify_vote_proposal_signature,
                        *export_consensus_key,
                        *decoupled_execution,
                    ),
                    *decoupled_execution,
                );`
$DIR/consensus/safety-rules/src/tests/networking.rs: `.client()`
$DIR/consensus/safety-rules/src/tests/networking.rs: `.consensus_state()`
$DIR/consensus/safety-rules/src/tests/networking.rs: `.client()`
$DIR/consensus/safety-rules/src/tests/networking.rs: `.consensus_state()`
$DIR/consensus/safety-rules/src/tests/safety_rules.rs: `suite::run_test_suite(
                    &safety_rules(
                        *verify_vote_proposal_signature,
                        *export_consensus_key,
                        *decoupled_execution,
                    ),
                    *decoupled_execution,
                );`
$DIR/consensus/safety-rules/src/tests/serializer.rs: `suite::run_test_suite(
                    &safety_rules(
                        *verify_vote_proposal_signature,
                        *export_consensus_key,
                        *decoupled_execution,
                    ),
                    *decoupled_execution,
                );`
$DIR/consensus/safety-rules/src/tests/thread.rs: `suite::run_test_suite(
                    &safety_rules(
                        *verify_vote_proposal_signature,
                        *export_consensus_key,
                        *decoupled_execution,
                    ),
                    *decoupled_execution,
                );`
$DIR/consensus/safety-rules/src/tests/vault.rs: `suite::run_test_suite(
                    &safety_rules(
                        *verify_vote_proposal_signature,
                        *export_consensus_key,
                        *decoupled_execution,
                    ),
                    *decoupled_execution,
                );`
$DIR/consensus/safety-rules/src/tests/vault.rs: `.is_none()`
$DIR/consensus/safety-rules/tests/binary.rs: `test_config.waypoint = Some(waypoint);`
$DIR/consensus/safety-rules/tests/binary.rs: `config.service = SafetyRulesService::Process(RemoteService { server_address });`
$DIR/consensus/safety-rules/tests/binary.rs: `config_path.create_as_file().unwrap();`
$DIR/consensus/safety-rules/tests/binary.rs: `config.save_config(config_path.path()).unwrap();`
$DIR/consensus/safety-rules/tests/binary.rs: `command
        .arg(config_path.path())
        .stdin(std::process::Stdio::inherit())
        .stdout(std::process::Stdio::inherit())
        .stderr(std::process::Stdio::inherit());`
$DIR/consensus/safety-rules/tests/binary.rs: `child.kill().expect("could not kill safety-rules process");`
$DIR/consensus/safety-rules/tests/binary.rs: `child
        .wait()
        .expect("could not wait on safety-rules process");`
$DIR/consensus/safety-rules/tests/binary.rs: `.private_key()`
$DIR/consensus/safety-rules/tests/binary.rs: `.into()`
$DIR/consensus/safety-rules/tests/binary.rs: `.create_as_file()`
$DIR/consensus/safety-rules/tests/binary.rs: `.save_config(config_path.path())`
$DIR/consensus/safety-rules/tests/binary.rs: `.path()`
$DIR/consensus/safety-rules/tests/binary.rs: `.arg(config_path.path())`
$DIR/consensus/safety-rules/tests/binary.rs: `.path()`
$DIR/consensus/safety-rules/tests/binary.rs: `.stdin(std::process::Stdio::inherit())`
$DIR/consensus/safety-rules/tests/binary.rs: `.stdout(std::process::Stdio::inherit())`
$DIR/consensus/safety-rules/tests/binary.rs: `.stderr(std::process::Stdio::inherit())`
$DIR/consensus/safety-rules/tests/binary.rs: `.spawn()`
$DIR/consensus/safety-rules/tests/binary.rs: `.client()`
$DIR/consensus/safety-rules/tests/binary.rs: `.consensus_state()`
$DIR/consensus/safety-rules/tests/binary.rs: `.kill()`
$DIR/consensus/safety-rules/tests/binary.rs: `.wait()`
$DIR/consensus/src/block_storage/block_store_and_lec_recovery_test.rs: `drop(execution_correctness_manager);`
$DIR/consensus/src/block_storage/block_store_and_lec_recovery_test.rs: `.client()`
$DIR/consensus/src/block_storage/block_store_and_lec_recovery_test.rs: `.block_store()`
$DIR/consensus/src/block_storage/block_store_and_lec_recovery_test.rs: `.ordered_root()`
$DIR/consensus/src/block_storage/block_store_and_lec_recovery_test.rs: `.id()`
$DIR/consensus/src/block_storage/block_store_and_lec_recovery_test.rs: `.get_block(genesis_block_id)`
$DIR/consensus/src/block_storage/block_store_and_lec_recovery_test.rs: `.insert_block_with_qc(qc.clone(), &genesis_block, 1)`
$DIR/consensus/src/block_storage/block_store_and_lec_recovery_test.rs: `.insert_block(&a1, 2, None)`
$DIR/consensus/src/block_storage/block_store_and_lec_recovery_test.rs: `.insert_block_with_qc(qc, &genesis_block, 4)`
$DIR/consensus/src/block_storage/block_store_and_lec_recovery_test.rs: `.insert_block(&a2, 3, Some(genesis.block_info()))`
$DIR/consensus/src/block_storage/block_store_and_lec_recovery_test.rs: `.block_info()`
$DIR/consensus/src/block_storage/block_store_and_lec_recovery_test.rs: `.insert_block(&b1, 5, None)`
$DIR/consensus/src/block_storage/block_store_and_lec_recovery_test.rs: `.insert_block(&b1, 6, None)`
$DIR/consensus/src/block_storage/block_store_and_lec_recovery_test.rs: `.client()`
$DIR/consensus/src/block_storage/block_store_and_lec_recovery_test.rs: `.block_store()`
$DIR/consensus/src/block_storage/block_store_and_lec_recovery_test.rs: `.ordered_root()`
$DIR/consensus/src/block_storage/block_store_and_lec_recovery_test.rs: `.id()`
$DIR/consensus/src/block_storage/block_store_and_lec_recovery_test.rs: `.get_block(genesis_block_id)`
$DIR/consensus/src/block_storage/block_store_and_lec_recovery_test.rs: `.insert_block_with_qc(qc.clone(), &genesis_block, 1)`
$DIR/consensus/src/block_storage/block_store_and_lec_recovery_test.rs: `.insert_block(&a1, 2, None)`
$DIR/consensus/src/block_storage/block_store_and_lec_recovery_test.rs: `.insert_block_with_qc(qc, &genesis_block, 4)`
$DIR/consensus/src/block_storage/block_store_and_lec_recovery_test.rs: `.client()`
$DIR/consensus/src/block_storage/block_store_and_lec_recovery_test.rs: `.block_store()`
$DIR/consensus/src/block_storage/block_store_and_lec_recovery_test.rs: `.ordered_root()`
$DIR/consensus/src/block_storage/block_store_and_lec_recovery_test.rs: `.id()`
$DIR/consensus/src/block_storage/block_store_and_lec_recovery_test.rs: `.get_block(genesis_block_id)`
$DIR/consensus/src/block_storage/block_store_and_lec_recovery_test.rs: `.insert_block_with_qc(qc.clone(), &genesis_block, 1)`
$DIR/consensus/src/block_storage/block_store_and_lec_recovery_test.rs: `.insert_block(&a1, 2, None)`
$DIR/consensus/src/block_storage/block_store_and_lec_recovery_test.rs: `.insert_block_with_qc(qc, &genesis_block, 4)`
$DIR/consensus/src/block_storage/block_store_and_lec_recovery_test.rs: `.insert_block(&a2, 3, Some(genesis.block_info()))`
$DIR/consensus/src/block_storage/block_store_and_lec_recovery_test.rs: `.block_info()`
$DIR/consensus/src/block_storage/block_store_and_lec_recovery_test.rs: `.insert_block(&b1, 5, None)`
$DIR/consensus/src/block_storage/block_store_and_lec_recovery_test.rs: `.insert_block(&b1, 6, None)`
$DIR/consensus/src/block_storage/block_store_test.rs: `cur_node = inserter.insert_block_with_qc(certificate_for_genesis(), &cur_node, round);`
$DIR/consensus/src/block_storage/block_store_test.rs: `cur_node = inserter.insert_block(&cur_node, round, None);`
$DIR/consensus/src/block_storage/block_store_test.rs: `added_blocks.push(cur_node.clone());`
$DIR/consensus/src/block_storage/block_store_test.rs: `block_store.prune_tree(block.id());`
$DIR/consensus/src/block_storage/block_store_test.rs: `block_store.prune_tree(b2.id());`
$DIR/consensus/src/block_storage/block_store_test.rs: `::diem_logger::Logger::init_for_testing();`
$DIR/consensus/src/block_storage/block_store_test.rs: `block_store
                .insert_single_quorum_cert(qc.as_ref().clone())
                .unwrap();`
$DIR/consensus/src/block_storage/block_store_test.rs: `block_store.prune_tree(a2.id());`
$DIR/consensus/src/block_storage/block_store_test.rs: `.block_store()`
$DIR/consensus/src/block_storage/block_store_test.rs: `.ordered_root()`
$DIR/consensus/src/block_storage/block_store_test.rs: `.insert_block_with_qc(certificate_for_genesis(), &genesis, 1)`
$DIR/consensus/src/block_storage/block_store_test.rs: `.insert_block(&block_round_1, 3, None)`
$DIR/consensus/src/block_storage/block_store_test.rs: `.insert_block(&block_round_1, 4, None)`
$DIR/consensus/src/block_storage/block_store_test.rs: `.block_store()`
$DIR/consensus/src/block_storage/block_store_test.rs: `.ordered_root()`
$DIR/consensus/src/block_storage/block_store_test.rs: `.insert_block_with_qc(certificate_for_genesis(), &genesis, 1)`
$DIR/consensus/src/block_storage/block_store_test.rs: `.insert_block(&block_a_1, 2, None)`
$DIR/consensus/src/block_storage/block_store_test.rs: `.block_store()`
$DIR/consensus/src/block_storage/block_store_test.rs: `.ordered_root()`
$DIR/consensus/src/block_storage/block_store_test.rs: `.get_block(genesis.id())`
$DIR/consensus/src/block_storage/block_store_test.rs: `.id()`
$DIR/consensus/src/block_storage/block_store_test.rs: `.insert_block_with_qc(certificate_for_genesis(), &cur_node, round)`
$DIR/consensus/src/block_storage/block_store_test.rs: `.insert_block(&cur_node, round, None)`
$DIR/consensus/src/block_storage/block_store_test.rs: `.push(cur_node.clone())`
$DIR/consensus/src/block_storage/block_store_test.rs: `.enumerate()`
$DIR/consensus/src/block_storage/block_store_test.rs: `.prune_tree(block.id())`
$DIR/consensus/src/block_storage/block_store_test.rs: `.id()`
$DIR/consensus/src/block_storage/block_store_test.rs: `.block_store()`
$DIR/consensus/src/block_storage/block_store_test.rs: `.get_block(block_store.ordered_root().id())`
$DIR/consensus/src/block_storage/block_store_test.rs: `.ordered_root()`
$DIR/consensus/src/block_storage/block_store_test.rs: `.id()`
$DIR/consensus/src/block_storage/block_store_test.rs: `.insert_block_with_qc(certificate_for_genesis(), &genesis, 1)`
$DIR/consensus/src/block_storage/block_store_test.rs: `.insert_block(&b1, 2, None)`
$DIR/consensus/src/block_storage/block_store_test.rs: `.insert_block(&b2, 3, None)`
$DIR/consensus/src/block_storage/block_store_test.rs: `.prune_tree(b2.id())`
$DIR/consensus/src/block_storage/block_store_test.rs: `.id()`
$DIR/consensus/src/block_storage/block_store_test.rs: `.block_store()`
$DIR/consensus/src/block_storage/block_store_test.rs: `.ordered_root()`
$DIR/consensus/src/block_storage/block_store_test.rs: `.insert_block_with_qc(certificate_for_genesis(), &genesis, 1)`
$DIR/consensus/src/block_storage/block_store_test.rs: `.enumerate()`
$DIR/consensus/src/block_storage/block_store_test.rs: `.take(10)`
$DIR/consensus/src/block_storage/block_store_test.rs: `.skip(1)`
$DIR/consensus/src/block_storage/block_store_test.rs: `.block()`
$DIR/consensus/src/block_storage/block_store_test.rs: `.gen_block_info(
                    block.compute_result().root_hash(),
                    block.compute_result().version(),
                    block.compute_result().epoch_state().clone(),
                )`
$DIR/consensus/src/block_storage/block_store_test.rs: `.compute_result()`
$DIR/consensus/src/block_storage/block_store_test.rs: `.root_hash()`
$DIR/consensus/src/block_storage/block_store_test.rs: `.compute_result()`
$DIR/consensus/src/block_storage/block_store_test.rs: `.version()`
$DIR/consensus/src/block_storage/block_store_test.rs: `.compute_result()`
$DIR/consensus/src/block_storage/block_store_test.rs: `.epoch_state()`
$DIR/consensus/src/block_storage/block_store_test.rs: `.quorum_cert()`
$DIR/consensus/src/block_storage/block_store_test.rs: `.certified_block()`
$DIR/consensus/src/block_storage/block_store_test.rs: `.author()`
$DIR/consensus/src/block_storage/block_store_test.rs: `.insert_vote(&vote, &validator_verifier)`
$DIR/consensus/src/block_storage/block_store_test.rs: `.block()`
$DIR/consensus/src/block_storage/block_store_test.rs: `.gen_block_info(
                block.compute_result().root_hash(),
                block.compute_result().version(),
                block.compute_result().epoch_state().clone(),
            )`
$DIR/consensus/src/block_storage/block_store_test.rs: `.compute_result()`
$DIR/consensus/src/block_storage/block_store_test.rs: `.root_hash()`
$DIR/consensus/src/block_storage/block_store_test.rs: `.compute_result()`
$DIR/consensus/src/block_storage/block_store_test.rs: `.version()`
$DIR/consensus/src/block_storage/block_store_test.rs: `.compute_result()`
$DIR/consensus/src/block_storage/block_store_test.rs: `.epoch_state()`
$DIR/consensus/src/block_storage/block_store_test.rs: `.quorum_cert()`
$DIR/consensus/src/block_storage/block_store_test.rs: `.certified_block()`
$DIR/consensus/src/block_storage/block_store_test.rs: `.author()`
$DIR/consensus/src/block_storage/block_store_test.rs: `.insert_vote(&vote, &validator_verifier)`
$DIR/consensus/src/block_storage/block_store_test.rs: `.insert_single_quorum_cert(qc.as_ref().clone())`
$DIR/consensus/src/block_storage/block_store_test.rs: `.get_quorum_cert_for_block(block.id())`
$DIR/consensus/src/block_storage/block_store_test.rs: `.id()`
$DIR/consensus/src/block_storage/block_store_test.rs: `.ordered_root()`
$DIR/consensus/src/block_storage/block_store_test.rs: `.timestamp_usecs()`
$DIR/consensus/src/block_storage/block_store_test.rs: `.execute_and_insert_block(block_with_illegal_timestamp)`
$DIR/consensus/src/block_storage/block_store_test.rs: `.block_store()`
$DIR/consensus/src/block_storage/block_store_test.rs: `.ordered_root()`
$DIR/consensus/src/block_storage/block_store_test.rs: `.insert_block_with_qc(certificate_for_genesis(), &genesis, 1)`
$DIR/consensus/src/block_storage/block_store_test.rs: `.insert_block(&a1, 2, None)`
$DIR/consensus/src/block_storage/block_store_test.rs: `.insert_block(&a2, 3, None)`
$DIR/consensus/src/block_storage/block_store_test.rs: `.block_store()`
$DIR/consensus/src/block_storage/block_store_test.rs: `.ordered_root()`
$DIR/consensus/src/block_storage/block_store_test.rs: `.insert_block_with_qc(certificate_for_genesis(), &genesis, 1)`
$DIR/consensus/src/block_storage/block_store_test.rs: `.insert_block(&a1, 2, None)`
$DIR/consensus/src/block_storage/block_store_test.rs: `.insert_block(&a2, 3, None)`
$DIR/consensus/src/block_storage/block_store_test.rs: `.prune_tree(a2.id())`
$DIR/consensus/src/block_storage/block_store_test.rs: `.id()`
$DIR/consensus/src/block_storage/block_store_test.rs: `.round()`
$DIR/consensus/src/block_storage/block_store_test.rs: `.round()`
$DIR/consensus/src/block_storage/block_store_test.rs: `.id()`
$DIR/consensus/src/block_storage/block_store_test.rs: `.round()`
$DIR/consensus/src/block_storage/block_store_test.rs: `.id()`
$DIR/consensus/src/block_storage/block_store_test.rs: `.round()`
$DIR/consensus/src/block_storage/block_store_test.rs: `.get_quorum_cert_for_block(a2.id())`
$DIR/consensus/src/block_storage/block_store_test.rs: `.id()`
$DIR/consensus/src/consensusdb/consensusdb_test.rs: `db.save_blocks_and_quorum_certificates(blocks.clone(), qcs.clone())
        .unwrap();`
$DIR/consensus/src/consensusdb/consensusdb_test.rs: `db.save_highest_timeout_certificate(tc.clone()).unwrap();`
$DIR/consensus/src/consensusdb/consensusdb_test.rs: `db.save_highest_2chain_timeout_certificate(tc.clone())
        .unwrap();`
$DIR/consensus/src/consensusdb/consensusdb_test.rs: `db.save_vote(vote.clone()).unwrap();`
$DIR/consensus/src/consensusdb/consensusdb_test.rs: `db.delete_highest_timeout_certificate().unwrap();`
$DIR/consensus/src/consensusdb/consensusdb_test.rs: `db.delete_highest_2chain_timeout_certificate().unwrap();`
$DIR/consensus/src/consensusdb/consensusdb_test.rs: `db.delete_last_vote_msg().unwrap();`
$DIR/consensus/src/consensusdb/consensusdb_test.rs: `db.save_blocks_and_quorum_certificates(blocks, qcs).unwrap();`
$DIR/consensus/src/consensusdb/consensusdb_test.rs: `db.delete_blocks_and_quorum_certificates(vec![block_id, qc_id])
        .unwrap();`
$DIR/consensus/src/consensusdb/consensusdb_test.rs: `.save_blocks_and_quorum_certificates(blocks.clone(), qcs.clone())`
$DIR/consensus/src/consensusdb/consensusdb_test.rs: `.save_highest_timeout_certificate(tc.clone())`
$DIR/consensus/src/consensusdb/consensusdb_test.rs: `.save_highest_2chain_timeout_certificate(tc.clone())`
$DIR/consensus/src/consensusdb/consensusdb_test.rs: `.save_vote(vote.clone())`
$DIR/consensus/src/consensusdb/consensusdb_test.rs: `.get_data()`
$DIR/consensus/src/consensusdb/consensusdb_test.rs: `.delete_highest_timeout_certificate()`
$DIR/consensus/src/consensusdb/consensusdb_test.rs: `.delete_highest_2chain_timeout_certificate()`
$DIR/consensus/src/consensusdb/consensusdb_test.rs: `.delete_last_vote_msg()`
$DIR/consensus/src/consensusdb/consensusdb_test.rs: `.id()`
$DIR/consensus/src/consensusdb/consensusdb_test.rs: `.certified_block()`
$DIR/consensus/src/consensusdb/consensusdb_test.rs: `.id()`
$DIR/consensus/src/consensusdb/consensusdb_test.rs: `.save_blocks_and_quorum_certificates(blocks, qcs)`
$DIR/consensus/src/consensusdb/consensusdb_test.rs: `.delete_blocks_and_quorum_certificates(vec![block_id, qc_id])`
$DIR/consensus/src/consensusdb/schema/block/test.rs: `.id()`
$DIR/consensus/src/consensusdb/schema/quorum_certificate/test.rs: `.certified_block()`
$DIR/consensus/src/consensusdb/schema/quorum_certificate/test.rs: `.id()`
$DIR/consensus/src/error.rs: `.into()`
$DIR/consensus/src/error.rs: `.context("Context!")`
$DIR/consensus/src/experimental/linkedlist.rs: `list.push_front(1);`
$DIR/consensus/src/experimental/linkedlist.rs: `list.push_front(2);`
$DIR/consensus/src/experimental/linkedlist.rs: `list.push_front(3);`
$DIR/consensus/src/experimental/linkedlist.rs: `list.push_front(4);`
$DIR/consensus/src/experimental/linkedlist.rs: `list.push_front(5);`
$DIR/consensus/src/experimental/linkedlist.rs: `list.push_back(1);`
$DIR/consensus/src/experimental/linkedlist.rs: `list.push_back(2);`
$DIR/consensus/src/experimental/linkedlist.rs: `list.push_back(3);`
$DIR/consensus/src/experimental/linkedlist.rs: `list.push_back(4);`
$DIR/consensus/src/experimental/linkedlist.rs: `list.push_back(5);`
$DIR/consensus/src/experimental/linkedlist.rs: `list.push_front(1);`
$DIR/consensus/src/experimental/linkedlist.rs: `list.push_front(2);`
$DIR/consensus/src/experimental/linkedlist.rs: `list.push_front(3);`
$DIR/consensus/src/experimental/linkedlist.rs: `list.push_front(1);`
$DIR/consensus/src/experimental/linkedlist.rs: `list.push_front(2);`
$DIR/consensus/src/experimental/linkedlist.rs: `list.push_front(3);`
$DIR/consensus/src/experimental/linkedlist.rs: `.push_front(1)`
$DIR/consensus/src/experimental/linkedlist.rs: `.push_front(2)`
$DIR/consensus/src/experimental/linkedlist.rs: `.push_front(3)`
$DIR/consensus/src/experimental/linkedlist.rs: `.push_front(4)`
$DIR/consensus/src/experimental/linkedlist.rs: `.push_front(5)`
$DIR/consensus/src/experimental/linkedlist.rs: `.push_back(1)`
$DIR/consensus/src/experimental/linkedlist.rs: `.push_back(2)`
$DIR/consensus/src/experimental/linkedlist.rs: `.push_back(3)`
$DIR/consensus/src/experimental/linkedlist.rs: `.push_back(4)`
$DIR/consensus/src/experimental/linkedlist.rs: `.push_back(5)`
$DIR/consensus/src/experimental/linkedlist.rs: `.push_front(1)`
$DIR/consensus/src/experimental/linkedlist.rs: `.push_front(2)`
$DIR/consensus/src/experimental/linkedlist.rs: `.push_front(3)`
$DIR/consensus/src/experimental/linkedlist.rs: `.push_front(1)`
$DIR/consensus/src/experimental/linkedlist.rs: `.push_front(2)`
$DIR/consensus/src/experimental/linkedlist.rs: `.push_front(3)`
$DIR/consensus/src/experimental/linkedlist.rs: `.into_iter()`
$DIR/consensus/src/experimental/tests/commit_phase_tests.rs: `runtime.spawn(commit_phase.start());`
$DIR/consensus/src/experimental/tests/commit_phase_tests.rs: `commit_tx
                    .send(CommitChannelType(
                        vecblocks.clone(),
                        li_sig.clone(),
                        empty_state_computer_call_back(),
                    ))
                    .await
                    .ok();`
$DIR/consensus/src/experimental/tests/commit_phase_tests.rs: `commit_phase_reset_tx.send(tx).await.ok();`
$DIR/consensus/src/experimental/tests/commit_phase_tests.rs: `rx.await.ok();`
$DIR/consensus/src/experimental/tests/commit_phase_tests.rs: `commit_tx
                .send(CommitChannelType(
                    vecblocks.clone(),
                    li_sig.clone(),
                    empty_state_computer_call_back(),
                ))
                .await
                .ok();`
$DIR/consensus/src/experimental/tests/commit_phase_tests.rs: `runtime.spawn(commit_phase.start());`
$DIR/consensus/src/experimental/tests/commit_phase_tests.rs: `commit_tx
                .send(CommitChannelType(
                    vecblocks,
                    li_sig,
                    empty_state_computer_call_back(),
                ))
                .await
                .ok();`
$DIR/consensus/src/experimental/tests/commit_phase_tests.rs: `runtime.spawn(commit_phase.start());`
$DIR/consensus/src/experimental/tests/commit_phase_tests.rs: `commit_tx
                .send(CommitChannelType(
                    vec![ExecutedBlock::new(block.clone(), compute_result)],
                    LedgerInfoWithSignatures::new(
                        LedgerInfo::new(
                            block.gen_block_info(*ACCUMULATOR_PLACEHOLDER_HASH, 0, None),
                            *ACCUMULATOR_PLACEHOLDER_HASH,
                        ),
                        BTreeMap::<AccountAddress, Ed25519Signature>::new(),
                    ),
                    empty_state_computer_call_back(),
                ))
                .await
                .ok();`
$DIR/consensus/src/experimental/tests/commit_phase_tests.rs: `runtime.spawn(commit_phase.start());`
$DIR/consensus/src/experimental/tests/commit_phase_tests.rs: `commit_tx
                .send(CommitChannelType(
                    vecblocks,
                    li_sig,
                    empty_state_computer_call_back(),
                ))
                .await
                .ok();`
$DIR/consensus/src/experimental/tests/commit_phase_tests.rs: `msg_tx
                .send(VerifiedEvent::CommitVote(Box::new(
                    generate_random_commit_vote(&signers[0]),
                )))
                .await
                .ok();`
$DIR/consensus/src/experimental/tests/commit_phase_tests.rs: `runtime.spawn(commit_phase.start());`
$DIR/consensus/src/experimental/tests/commit_phase_tests.rs: `commit_tx
                .send(CommitChannelType(
                    vecblocks,
                    li_sig,
                    empty_state_computer_call_back(),
                ))
                .await
                .ok();`
$DIR/consensus/src/experimental/tests/commit_phase_tests.rs: `msg_tx
                .send(VerifiedEvent::CommitDecision(Box::new(
                    CommitDecision::new(LedgerInfoWithSignatures::new(
                        li_sig_prime.ledger_info().clone(),
                        BTreeMap::<AccountAddress, Ed25519Signature>::new(),
                    )),
                )))
                .await
                .ok();`
$DIR/consensus/src/experimental/tests/commit_phase_tests.rs: `commit_phase.set_blocks(Some(PendingBlocks::new(
                vecblocks,
                li_sig,
                empty_state_computer_call_back(),
            )));`
$DIR/consensus/src/experimental/tests/commit_phase_tests.rs: `commit_phase.set_blocks(Some(PendingBlocks::new(
                vecblocks,
                li_sig,
                empty_state_computer_call_back(),
            )));`
$DIR/consensus/src/experimental/tests/commit_phase_tests.rs: `commit_tx
                    .send(CommitChannelType(
                        vecblocks.clone(),
                        li_sig.clone(),
                        empty_state_computer_call_back(),
                    ))
                    .await
                    .ok();`
$DIR/consensus/src/experimental/tests/commit_phase_tests.rs: `commit_phase.set_blocks(Some(PendingBlocks::new(
                vecblocks.clone(),
                li_sig.clone(),
                empty_state_computer_call_back(),
            )));`
$DIR/consensus/src/experimental/tests/commit_phase_tests.rs: `commit_phase.process_reset_event(tx).await.ok();`
$DIR/consensus/src/experimental/tests/commit_phase_tests.rs: `rx.await.ok();`
$DIR/consensus/src/experimental/tests/commit_phase_tests.rs: `commit_tx
                .send(CommitChannelType(
                    vecblocks.clone(),
                    li_sig.clone(),
                    empty_state_computer_call_back(),
                ))
                .await
                .ok();`
$DIR/consensus/src/experimental/tests/commit_phase_tests.rs: `commit_phase.check_commit().await.ok();`
$DIR/consensus/src/experimental/tests/commit_phase_tests.rs: `commit_phase.set_blocks(Some(PendingBlocks::new(
                vecblocks.clone(),
                li_sig.clone(),
                empty_state_computer_call_back(),
            )));`
$DIR/consensus/src/experimental/tests/commit_phase_tests.rs: `commit_phase.check_commit().await.ok();`
$DIR/consensus/src/experimental/tests/commit_phase_tests.rs: `commit_phase.set_blocks(Some(PendingBlocks::new(
                vecblocks,
                ledger_info_with_no_sig,
                empty_state_computer_call_back(),
            )));`
$DIR/consensus/src/experimental/tests/commit_phase_tests.rs: `commit_phase.check_commit().await.ok();`
$DIR/consensus/src/experimental/tests/commit_phase_tests.rs: `.spawn(commit_phase.start())`
$DIR/consensus/src/experimental/tests/commit_phase_tests.rs: `.start()`
$DIR/consensus/src/experimental/tests/commit_phase_tests.rs: `.send(CommitChannelType(
                        vecblocks.clone(),
                        li_sig.clone(),
                        empty_state_computer_call_back(),
                    ))`
$DIR/consensus/src/experimental/tests/commit_phase_tests.rs: `.ok()`
$DIR/consensus/src/experimental/tests/commit_phase_tests.rs: `.send(tx)`
$DIR/consensus/src/experimental/tests/commit_phase_tests.rs: `.ok()`
$DIR/consensus/src/experimental/tests/commit_phase_tests.rs: `.ok()`
$DIR/consensus/src/experimental/tests/commit_phase_tests.rs: `.send(CommitChannelType(
                    vecblocks.clone(),
                    li_sig.clone(),
                    empty_state_computer_call_back(),
                ))`
$DIR/consensus/src/experimental/tests/commit_phase_tests.rs: `.ok()`
$DIR/consensus/src/experimental/tests/commit_phase_tests.rs: `.spawn(commit_phase.start())`
$DIR/consensus/src/experimental/tests/commit_phase_tests.rs: `.start()`
$DIR/consensus/src/experimental/tests/commit_phase_tests.rs: `.send(CommitChannelType(
                    vecblocks,
                    li_sig,
                    empty_state_computer_call_back(),
                ))`
$DIR/consensus/src/experimental/tests/commit_phase_tests.rs: `.ok()`
$DIR/consensus/src/experimental/tests/commit_phase_tests.rs: `.next()`
$DIR/consensus/src/experimental/tests/commit_phase_tests.rs: `.next()`
$DIR/consensus/src/experimental/tests/commit_phase_tests.rs: `.first()`
$DIR/consensus/src/experimental/tests/commit_phase_tests.rs: `.compute(&block, *ACCUMULATOR_PLACEHOLDER_HASH)`
$DIR/consensus/src/experimental/tests/commit_phase_tests.rs: `.spawn(commit_phase.start())`
$DIR/consensus/src/experimental/tests/commit_phase_tests.rs: `.start()`
$DIR/consensus/src/experimental/tests/commit_phase_tests.rs: `.send(CommitChannelType(
                    vec![ExecutedBlock::new(block.clone(), compute_result)],
                    LedgerInfoWithSignatures::new(
                        LedgerInfo::new(
                            block.gen_block_info(*ACCUMULATOR_PLACEHOLDER_HASH, 0, None),
                            *ACCUMULATOR_PLACEHOLDER_HASH,
                        ),
                        BTreeMap::<AccountAddress, Ed25519Signature>::new(),
                    ),
                    empty_state_computer_call_back(),
                ))`
$DIR/consensus/src/experimental/tests/commit_phase_tests.rs: `.gen_block_info(*ACCUMULATOR_PLACEHOLDER_HASH, 0, None)`
$DIR/consensus/src/experimental/tests/commit_phase_tests.rs: `.ok()`
$DIR/consensus/src/experimental/tests/commit_phase_tests.rs: `.spawn(commit_phase.start())`
$DIR/consensus/src/experimental/tests/commit_phase_tests.rs: `.start()`
$DIR/consensus/src/experimental/tests/commit_phase_tests.rs: `.send(CommitChannelType(
                    vecblocks,
                    li_sig,
                    empty_state_computer_call_back(),
                ))`
$DIR/consensus/src/experimental/tests/commit_phase_tests.rs: `.ok()`
$DIR/consensus/src/experimental/tests/commit_phase_tests.rs: `.next()`
$DIR/consensus/src/experimental/tests/commit_phase_tests.rs: `.send(VerifiedEvent::CommitVote(Box::new(
                    generate_random_commit_vote(&signers[0]),
                )))`
$DIR/consensus/src/experimental/tests/commit_phase_tests.rs: `.ok()`
$DIR/consensus/src/experimental/tests/commit_phase_tests.rs: `.spawn(commit_phase.start())`
$DIR/consensus/src/experimental/tests/commit_phase_tests.rs: `.start()`
$DIR/consensus/src/experimental/tests/commit_phase_tests.rs: `.send(CommitChannelType(
                    vecblocks,
                    li_sig,
                    empty_state_computer_call_back(),
                ))`
$DIR/consensus/src/experimental/tests/commit_phase_tests.rs: `.ok()`
$DIR/consensus/src/experimental/tests/commit_phase_tests.rs: `.next()`
$DIR/consensus/src/experimental/tests/commit_phase_tests.rs: `.send(VerifiedEvent::CommitDecision(Box::new(
                    CommitDecision::new(LedgerInfoWithSignatures::new(
                        li_sig_prime.ledger_info().clone(),
                        BTreeMap::<AccountAddress, Ed25519Signature>::new(),
                    )),
                )))`
$DIR/consensus/src/experimental/tests/commit_phase_tests.rs: `.ledger_info()`
$DIR/consensus/src/experimental/tests/commit_phase_tests.rs: `.ok()`
$DIR/consensus/src/experimental/tests/commit_phase_tests.rs: `.set_blocks(Some(PendingBlocks::new(
                vecblocks,
                li_sig,
                empty_state_computer_call_back(),
            )))`
$DIR/consensus/src/experimental/tests/commit_phase_tests.rs: `.set_blocks(Some(PendingBlocks::new(
                vecblocks,
                li_sig,
                empty_state_computer_call_back(),
            )))`
$DIR/consensus/src/experimental/tests/commit_phase_tests.rs: `.send(CommitChannelType(
                        vecblocks.clone(),
                        li_sig.clone(),
                        empty_state_computer_call_back(),
                    ))`
$DIR/consensus/src/experimental/tests/commit_phase_tests.rs: `.ok()`
$DIR/consensus/src/experimental/tests/commit_phase_tests.rs: `.set_blocks(Some(PendingBlocks::new(
                vecblocks.clone(),
                li_sig.clone(),
                empty_state_computer_call_back(),
            )))`
$DIR/consensus/src/experimental/tests/commit_phase_tests.rs: `.process_reset_event(tx)`
$DIR/consensus/src/experimental/tests/commit_phase_tests.rs: `.ok()`
$DIR/consensus/src/experimental/tests/commit_phase_tests.rs: `.ok()`
$DIR/consensus/src/experimental/tests/commit_phase_tests.rs: `.send(CommitChannelType(
                    vecblocks.clone(),
                    li_sig.clone(),
                    empty_state_computer_call_back(),
                ))`
$DIR/consensus/src/experimental/tests/commit_phase_tests.rs: `.ok()`
$DIR/consensus/src/experimental/tests/commit_phase_tests.rs: `.check_commit()`
$DIR/consensus/src/experimental/tests/commit_phase_tests.rs: `.ok()`
$DIR/consensus/src/experimental/tests/commit_phase_tests.rs: `.set_blocks(Some(PendingBlocks::new(
                vecblocks.clone(),
                li_sig.clone(),
                empty_state_computer_call_back(),
            )))`
$DIR/consensus/src/experimental/tests/commit_phase_tests.rs: `.check_commit()`
$DIR/consensus/src/experimental/tests/commit_phase_tests.rs: `.ok()`
$DIR/consensus/src/experimental/tests/commit_phase_tests.rs: `.last()`
$DIR/consensus/src/experimental/tests/commit_phase_tests.rs: `.block_info()`
$DIR/consensus/src/experimental/tests/commit_phase_tests.rs: `.ledger_info()`
$DIR/consensus/src/experimental/tests/commit_phase_tests.rs: `.set_blocks(Some(PendingBlocks::new(
                vecblocks,
                ledger_info_with_no_sig,
                empty_state_computer_call_back(),
            )))`
$DIR/consensus/src/experimental/tests/commit_phase_tests.rs: `.check_commit()`
$DIR/consensus/src/experimental/tests/commit_phase_tests.rs: `.ok()`
$DIR/consensus/src/experimental/tests/commit_phase_tests.rs: `.last()`
$DIR/consensus/src/experimental/tests/commit_phase_tests.rs: `.block_info()`
$DIR/consensus/src/experimental/tests/commit_phase_tests.rs: `.ledger_info()`
$DIR/consensus/src/experimental/tests/execution_phase_tests.rs: `runtime.spawn(execution_phase_pipeline.start());`
$DIR/consensus/src/experimental/tests/execution_phase_tests.rs: `in_channel_tx
            .send(ExecutionRequest {
                ordered_blocks: vec![ExecutedBlock::new(block, StateComputeResult::new_dummy())],
            })
            .await
            .ok();`
$DIR/consensus/src/experimental/tests/execution_phase_tests.rs: `.process(ExecutionRequest {
                ordered_blocks: vec![ExecutedBlock::new(block, StateComputeResult::new_dummy())],
            })`
$DIR/consensus/src/experimental/tests/execution_phase_tests.rs: `.spawn(execution_phase_pipeline.start())`
$DIR/consensus/src/experimental/tests/execution_phase_tests.rs: `.start()`
$DIR/consensus/src/experimental/tests/execution_phase_tests.rs: `.send(ExecutionRequest {
                ordered_blocks: vec![ExecutedBlock::new(block, StateComputeResult::new_dummy())],
            })`
$DIR/consensus/src/experimental/tests/execution_phase_tests.rs: `.ok()`
$DIR/consensus/src/experimental/tests/execution_phase_tests.rs: `.next()`
$DIR/consensus/src/liveness/leader_reputation_test.rs: `proposers.push(signer.author());`
$DIR/consensus/src/liveness/leader_reputation_test.rs: `signers.push(signer);`
$DIR/consensus/src/liveness/leader_reputation_test.rs: `proposers.push(signer.author());`
$DIR/consensus/src/liveness/leader_reputation_test.rs: `signers.push(signer);`
$DIR/consensus/src/liveness/leader_reputation_test.rs: `s += *w;`
$DIR/consensus/src/liveness/leader_reputation_test.rs: `accu += *w;`
$DIR/consensus/src/liveness/leader_reputation_test.rs: `expected_index = i;`
$DIR/consensus/src/liveness/leader_reputation_test.rs: `.push(signer.author())`
$DIR/consensus/src/liveness/leader_reputation_test.rs: `.author()`
$DIR/consensus/src/liveness/leader_reputation_test.rs: `.push(signer)`
$DIR/consensus/src/liveness/leader_reputation_test.rs: `.get_weights(&proposers, &[])`
$DIR/consensus/src/liveness/leader_reputation_test.rs: `.get_weights(
        &proposers,
        &[
            create_block(proposers[0], vec![&signers[1], &signers[2]]),
            create_block(proposers[0], vec![&signers[3]]),
        ],
    )`
$DIR/consensus/src/liveness/leader_reputation_test.rs: `.enumerate()`
$DIR/consensus/src/liveness/leader_reputation_test.rs: `.push(signer.author())`
$DIR/consensus/src/liveness/leader_reputation_test.rs: `.author()`
$DIR/consensus/src/liveness/leader_reputation_test.rs: `.push(signer)`
$DIR/consensus/src/liveness/leader_reputation_test.rs: `.fold(0, |mut s, w| {
        s += *w;
        s
    })`
$DIR/consensus/src/liveness/leader_reputation_test.rs: `.to_le_bytes()`
$DIR/consensus/src/liveness/leader_reputation_test.rs: `.enumerate()`
$DIR/consensus/src/liveness/leader_reputation_test.rs: `.len()`
$DIR/consensus/src/liveness/leader_reputation_test.rs: `.get_valid_proposer(round)`
$DIR/consensus/src/liveness/proposal_generator_test.rs: `inserter.insert_qc_for_block(a1.as_ref(), None);`
$DIR/consensus/src/liveness/proposal_generator_test.rs: `inserter.insert_qc_for_block(b1.as_ref(), None);`
$DIR/consensus/src/liveness/proposal_generator_test.rs: `inserter.insert_qc_for_block(a1.as_ref(), None);`
$DIR/consensus/src/liveness/proposal_generator_test.rs: `.author()`
$DIR/consensus/src/liveness/proposal_generator_test.rs: `.ordered_root()`
$DIR/consensus/src/liveness/proposal_generator_test.rs: `.generate_proposal(1)`
$DIR/consensus/src/liveness/proposal_generator_test.rs: `.generate_proposal(1)`
$DIR/consensus/src/liveness/proposal_generator_test.rs: `.err()`
$DIR/consensus/src/liveness/proposal_generator_test.rs: `.block_store()`
$DIR/consensus/src/liveness/proposal_generator_test.rs: `.signer()`
$DIR/consensus/src/liveness/proposal_generator_test.rs: `.author()`
$DIR/consensus/src/liveness/proposal_generator_test.rs: `.ordered_root()`
$DIR/consensus/src/liveness/proposal_generator_test.rs: `.insert_block_with_qc(certificate_for_genesis(), &genesis, 1)`
$DIR/consensus/src/liveness/proposal_generator_test.rs: `.insert_block_with_qc(certificate_for_genesis(), &genesis, 2)`
$DIR/consensus/src/liveness/proposal_generator_test.rs: `.insert_qc_for_block(a1.as_ref(), None)`
$DIR/consensus/src/liveness/proposal_generator_test.rs: `.generate_proposal(11)`
$DIR/consensus/src/liveness/proposal_generator_test.rs: `.insert_qc_for_block(b1.as_ref(), None)`
$DIR/consensus/src/liveness/proposal_generator_test.rs: `.generate_proposal(12)`
$DIR/consensus/src/liveness/proposal_generator_test.rs: `.block_store()`
$DIR/consensus/src/liveness/proposal_generator_test.rs: `.signer()`
$DIR/consensus/src/liveness/proposal_generator_test.rs: `.author()`
$DIR/consensus/src/liveness/proposal_generator_test.rs: `.ordered_root()`
$DIR/consensus/src/liveness/proposal_generator_test.rs: `.insert_block_with_qc(certificate_for_genesis(), &genesis, 1)`
$DIR/consensus/src/liveness/proposal_generator_test.rs: `.insert_qc_for_block(a1.as_ref(), None)`
$DIR/consensus/src/liveness/proposal_generator_test.rs: `.generate_proposal(1)`
$DIR/consensus/src/liveness/proposal_generator_test.rs: `.err()`
$DIR/consensus/src/liveness/rotating_proposer_test.rs: `.author()`
$DIR/consensus/src/liveness/rotating_proposer_test.rs: `.author()`
$DIR/consensus/src/liveness/rotating_proposer_test.rs: `.author()`
$DIR/consensus/src/liveness/rotating_proposer_test.rs: `.author()`
$DIR/consensus/src/liveness/rotating_proposer_test.rs: `.author()`
$DIR/consensus/src/liveness/rotating_proposer_test.rs: `.author()`
$DIR/consensus/src/liveness/round_proposer_test.rs: `round_proposers.insert(1, chosen_author_round1);`
$DIR/consensus/src/liveness/round_proposer_test.rs: `round_proposers.insert(2, chosen_author_round2);`
$DIR/consensus/src/liveness/round_proposer_test.rs: `.author()`
$DIR/consensus/src/liveness/round_proposer_test.rs: `.author()`
$DIR/consensus/src/liveness/round_proposer_test.rs: `.author()`
$DIR/consensus/src/liveness/round_proposer_test.rs: `.insert(1, chosen_author_round1)`
$DIR/consensus/src/liveness/round_proposer_test.rs: `.insert(2, chosen_author_round2)`
$DIR/consensus/src/liveness/round_state_test.rs: `pm.process_certificates(generate_sync_info(Some(0), None, None));`
$DIR/consensus/src/liveness/round_state_test.rs: `pm.process_local_timeout(round);`
$DIR/consensus/src/liveness/round_state_test.rs: `expect_qc(
        2,
        pm.process_certificates(generate_sync_info(Some(1), None, None)),
    );`
$DIR/consensus/src/liveness/round_state_test.rs: `expect_timeout(
        3,
        pm.process_certificates(generate_sync_info(None, Some(2), None)),
    );`
$DIR/consensus/src/liveness/round_state_test.rs: `expect_timeout(
        4,
        pm.process_certificates(generate_sync_info(Some(2), Some(3), None)),
    );`
$DIR/consensus/src/liveness/round_state_test.rs: `.process_certificates(generate_sync_info(Some(0), None, None))`
$DIR/consensus/src/liveness/round_state_test.rs: `.next()`
$DIR/consensus/src/liveness/round_state_test.rs: `.process_local_timeout(round)`
$DIR/consensus/src/liveness/round_state_test.rs: `.process_certificates(generate_sync_info(Some(1), None, None))`
$DIR/consensus/src/liveness/round_state_test.rs: `.process_certificates(generate_sync_info(None, Some(2), None))`
$DIR/consensus/src/liveness/round_state_test.rs: `.process_certificates(generate_sync_info(Some(2), Some(3), None))`
$DIR/consensus/src/liveness/round_state_test.rs: `.process_certificates(generate_sync_info(Some(4), Some(4), None))`
$DIR/consensus/src/network_tests.rs: `nodes.push(TwinId {
                id: i,
                author: signer.author(),
            });`
$DIR/consensus/src/network_tests.rs: `round_partitions.insert(1, vec![vec![nodes[0]], vec![nodes[1], nodes[2]]]);`
$DIR/consensus/src/network_tests.rs: `round_partitions.insert(
            2,
            vec![vec![nodes[1]], vec![nodes[2]], vec![nodes[3], nodes[4]]],
        );`
$DIR/consensus/src/network_tests.rs: `shared_connections.write().insert(
                *peer,
                vec![
                    ProtocolId::ConsensusDirectSendJSON,
                    ProtocolId::ConsensusDirectSend,
                    ProtocolId::ConsensusRpc,
                ]
                .iter()
                .into(),
            );`
$DIR/consensus/src/network_tests.rs: `network_sender.initialize(shared_connections.clone());`
$DIR/consensus/src/network_tests.rs: `playground.add_node(twin_id, consensus_tx, network_reqs_rx, conn_mgr_reqs_rx);`
$DIR/consensus/src/network_tests.rs: `receivers.push(receiver);`
$DIR/consensus/src/network_tests.rs: `runtime.handle().spawn(task.start());`
$DIR/consensus/src/network_tests.rs: `nodes.push(node);`
$DIR/consensus/src/network_tests.rs: `nodes[0]
                .send_vote(vote_msg.clone(), peers[2..5].to_vec())
                .await;`
$DIR/consensus/src/network_tests.rs: `playground
                .wait_for_messages(3, NetworkPlayground::take_all)
                .await;`
$DIR/consensus/src/network_tests.rs: `nodes[0]
                .broadcast(ConsensusMsg::ProposalMsg(Box::new(proposal.clone())))
                .await;`
$DIR/consensus/src/network_tests.rs: `playground
                .wait_for_messages(4, NetworkPlayground::take_all)
                .await;`
$DIR/consensus/src/network_tests.rs: `shared_connections.write().insert(
                *peer,
                vec![
                    ProtocolId::ConsensusDirectSendJSON,
                    ProtocolId::ConsensusDirectSend,
                    ProtocolId::ConsensusRpc,
                ]
                .iter()
                .into(),
            );`
$DIR/consensus/src/network_tests.rs: `network_sender.initialize(shared_connections.clone());`
$DIR/consensus/src/network_tests.rs: `playground.add_node(twin_id, consensus_tx, network_reqs_rx, conn_mgr_reqs_rx);`
$DIR/consensus/src/network_tests.rs: `senders.push(network_sender);`
$DIR/consensus/src/network_tests.rs: `receivers.push(receiver);`
$DIR/consensus/src/network_tests.rs: `runtime.handle().spawn(task.start());`
$DIR/consensus/src/network_tests.rs: `nodes.push(node);`
$DIR/consensus/src/network_tests.rs: `node0.send_vote(vote_msg.clone(), vec![peer1]).await;`
$DIR/consensus/src/network_tests.rs: `node0.send_vote(vote_msg.clone(), vec![peer1]).await;`
$DIR/consensus/src/network_tests.rs: `playground
                    .wait_for_messages(2, NetworkPlayground::votes_only)
                    .await;`
$DIR/consensus/src/network_tests.rs: `request.response_sender.send(Ok(bytes.into())).unwrap();`
$DIR/consensus/src/network_tests.rs: `runtime.handle().spawn(on_request_block);`
$DIR/consensus/src/network_tests.rs: `peer_mgr_notifs_tx
            .push((peer_id, protocol_id), bad_msg)
            .unwrap();`
$DIR/consensus/src/network_tests.rs: `peer_mgr_notifs_tx
            .push((peer_id, protocol_id), liveness_check_msg)
            .unwrap();`
$DIR/consensus/src/network_tests.rs: `drop(peer_mgr_notifs_tx);`
$DIR/consensus/src/network_tests.rs: `drop(connection_notifs_tx);`
$DIR/consensus/src/network_tests.rs: `drop(self_sender);`
$DIR/consensus/src/network_tests.rs: `.handle()`
$DIR/consensus/src/network_tests.rs: `.enumerate()`
$DIR/consensus/src/network_tests.rs: `.push(TwinId {
                id: i,
                author: signer.author(),
            })`
$DIR/consensus/src/network_tests.rs: `.author()`
$DIR/consensus/src/network_tests.rs: `.insert(1, vec![vec![nodes[0]], vec![nodes[1], nodes[2]]])`
$DIR/consensus/src/network_tests.rs: `.insert(
            2,
            vec![vec![nodes[1]], vec![nodes[2]], vec![nodes[3], nodes[4]]],
        )`
$DIR/consensus/src/network_tests.rs: `.handle()`
$DIR/consensus/src/network_tests.rs: `.map(|signer| signer.author())`
$DIR/consensus/src/network_tests.rs: `.author()`
$DIR/consensus/src/network_tests.rs: `.collect()`
$DIR/consensus/src/network_tests.rs: `.enumerate()`
$DIR/consensus/src/network_tests.rs: `.write()`
$DIR/consensus/src/network_tests.rs: `.insert(
                *peer,
                vec![
                    ProtocolId::ConsensusDirectSendJSON,
                    ProtocolId::ConsensusDirectSend,
                    ProtocolId::ConsensusRpc,
                ]
                .iter()
                .into(),
            )`
$DIR/consensus/src/network_tests.rs: `.into()`
$DIR/consensus/src/network_tests.rs: `.initialize(shared_connections.clone())`
$DIR/consensus/src/network_tests.rs: `.add_node(twin_id, consensus_tx, network_reqs_rx, conn_mgr_reqs_rx)`
$DIR/consensus/src/network_tests.rs: `.push(receiver)`
$DIR/consensus/src/network_tests.rs: `.handle()`
$DIR/consensus/src/network_tests.rs: `.spawn(task.start())`
$DIR/consensus/src/network_tests.rs: `.start()`
$DIR/consensus/src/network_tests.rs: `.push(node)`
$DIR/consensus/src/network_tests.rs: `.send_vote(vote_msg.clone(), peers[2..5].to_vec())`
$DIR/consensus/src/network_tests.rs: `.wait_for_messages(3, NetworkPlayground::take_all)`
$DIR/consensus/src/network_tests.rs: `.take(5)`
$DIR/consensus/src/network_tests.rs: `.skip(2)`
$DIR/consensus/src/network_tests.rs: `.consensus_messages.next()`
$DIR/consensus/src/network_tests.rs: `.broadcast(ConsensusMsg::ProposalMsg(Box::new(proposal.clone())))`
$DIR/consensus/src/network_tests.rs: `.wait_for_messages(4, NetworkPlayground::take_all)`
$DIR/consensus/src/network_tests.rs: `.take(num_nodes - 1)`
$DIR/consensus/src/network_tests.rs: `.consensus_messages.next()`
$DIR/consensus/src/network_tests.rs: `.handle()`
$DIR/consensus/src/network_tests.rs: `.map(|signer| signer.author())`
$DIR/consensus/src/network_tests.rs: `.author()`
$DIR/consensus/src/network_tests.rs: `.collect()`
$DIR/consensus/src/network_tests.rs: `.enumerate()`
$DIR/consensus/src/network_tests.rs: `.write()`
$DIR/consensus/src/network_tests.rs: `.insert(
                *peer,
                vec![
                    ProtocolId::ConsensusDirectSendJSON,
                    ProtocolId::ConsensusDirectSend,
                    ProtocolId::ConsensusRpc,
                ]
                .iter()
                .into(),
            )`
$DIR/consensus/src/network_tests.rs: `.into()`
$DIR/consensus/src/network_tests.rs: `.initialize(shared_connections.clone())`
$DIR/consensus/src/network_tests.rs: `.add_node(twin_id, consensus_tx, network_reqs_rx, conn_mgr_reqs_rx)`
$DIR/consensus/src/network_tests.rs: `.push(network_sender)`
$DIR/consensus/src/network_tests.rs: `.push(receiver)`
$DIR/consensus/src/network_tests.rs: `.handle()`
$DIR/consensus/src/network_tests.rs: `.spawn(task.start())`
$DIR/consensus/src/network_tests.rs: `.start()`
$DIR/consensus/src/network_tests.rs: `.push(node)`
$DIR/consensus/src/network_tests.rs: `.remove(1)`
$DIR/consensus/src/network_tests.rs: `.next()`
$DIR/consensus/src/network_tests.rs: `.send_vote(vote_msg.clone(), vec![peer1])`
$DIR/consensus/src/network_tests.rs: `.send_vote(vote_msg.clone(), vec![peer1])`
$DIR/consensus/src/network_tests.rs: `.wait_for_messages(2, NetworkPlayground::votes_only)`
$DIR/consensus/src/network_tests.rs: `.response_sender.send(Ok(bytes.into()))`
$DIR/consensus/src/network_tests.rs: `.into()`
$DIR/consensus/src/network_tests.rs: `.handle()`
$DIR/consensus/src/network_tests.rs: `.spawn(on_request_block)`
$DIR/consensus/src/network_tests.rs: `.request_block(
                    BlockRetrievalRequest::new(HashValue::zero(), 1),
                    peer,
                    Duration::from_secs(5),
                )`
$DIR/consensus/src/network_tests.rs: `.push((peer_id, protocol_id), bad_msg)`
$DIR/consensus/src/network_tests.rs: `.push((peer_id, protocol_id), liveness_check_msg)`
$DIR/consensus/src/network_tests.rs: `.start()`
$DIR/consensus/src/pending_votes.rs: `::diem_logger::Logger::init_for_testing();`
$DIR/consensus/src/pending_votes.rs: `::diem_logger::Logger::init_for_testing();`
$DIR/consensus/src/pending_votes.rs: `vote1_author_0.add_timeout_signature(signature);`
$DIR/consensus/src/pending_votes.rs: `vote2_author_1.add_timeout_signature(signature);`
$DIR/consensus/src/pending_votes.rs: `::diem_logger::Logger::init_for_testing();`
$DIR/consensus/src/pending_votes.rs: `vote1_author_0.add_2chain_timeout(timeout, signature);`
$DIR/consensus/src/pending_votes.rs: `vote2_author_1.add_2chain_timeout(timeout, signature);`
$DIR/consensus/src/pending_votes.rs: `.author()`
$DIR/consensus/src/pending_votes.rs: `.author()`
$DIR/consensus/src/pending_votes.rs: `.author()`
$DIR/consensus/src/pending_votes.rs: `.author()`
$DIR/consensus/src/pending_votes.rs: `.insert_vote(&vote_data_2_author_2, &validator)`
$DIR/consensus/src/pending_votes.rs: `.author()`
$DIR/consensus/src/pending_votes.rs: `.generate_timeout()`
$DIR/consensus/src/pending_votes.rs: `.sign(&signers[0])`
$DIR/consensus/src/pending_votes.rs: `.add_timeout_signature(signature)`
$DIR/consensus/src/pending_votes.rs: `.author()`
$DIR/consensus/src/pending_votes.rs: `.generate_timeout()`
$DIR/consensus/src/pending_votes.rs: `.sign(&signers[1])`
$DIR/consensus/src/pending_votes.rs: `.add_timeout_signature(signature)`
$DIR/consensus/src/pending_votes.rs: `.insert_vote(&vote2_author_1, &validator)`
$DIR/consensus/src/pending_votes.rs: `.author()`
$DIR/consensus/src/pending_votes.rs: `.generate_2chain_timeout(certificate_for_genesis())`
$DIR/consensus/src/pending_votes.rs: `.sign(&signers[0])`
$DIR/consensus/src/pending_votes.rs: `.add_2chain_timeout(timeout, signature)`
$DIR/consensus/src/pending_votes.rs: `.author()`
$DIR/consensus/src/pending_votes.rs: `.generate_2chain_timeout(certificate_for_genesis())`
$DIR/consensus/src/pending_votes.rs: `.sign(&signers[1])`
$DIR/consensus/src/pending_votes.rs: `.add_2chain_timeout(timeout, signature)`
$DIR/consensus/src/pending_votes.rs: `.insert_vote(&vote2_author_1, &validator)`
$DIR/consensus/src/round_manager_test.rs: `node.next_proposal().await;`
$DIR/consensus/src/round_manager_test.rs: `node.next_proposal().await;`
$DIR/consensus/src/round_manager_test.rs: `node.next_vote().await;`
$DIR/consensus/src/round_manager_test.rs: `node.block_store
            .insert_single_quorum_cert(block_0_quorum_cert.clone())
            .unwrap();`
$DIR/consensus/src/round_manager_test.rs: `tc.add_signature(node.signer.author(), timeout_signature);`
$DIR/consensus/src/round_manager_test.rs: `tc.add_signature(inserter.signer().author(), inserter.signer().sign(&timeout));`
$DIR/consensus/src/round_manager_test.rs: `data.push((proposal, tc));`
$DIR/consensus/src/round_manager_test.rs: `timed_block_on(&mut runtime, async {
        for (proposal, tc) in &data {
            let proposal_msg = ProposalMsg::new(
                proposal.clone(),
                SyncInfo::new(
                    proposal.quorum_cert().clone(),
                    genesis_qc.clone(),
                    Some(tc.clone()),
                    None,
                ),
            );
            node.round_manager
                .process_proposal_msg(proposal_msg)
                .await
                .unwrap();
        }
    });`
$DIR/consensus/src/round_manager_test.rs: `node = node.restart(&mut playground, runtime.handle().clone());`
$DIR/consensus/src/round_manager_test.rs: `node.next_proposal().await;`
$DIR/consensus/src/round_manager_test.rs: `runtime.spawn(playground.start());`
$DIR/consensus/src/round_manager_test.rs: `ahead_node
        .block_store
        .execute_and_insert_block(block_0)
        .unwrap();`
$DIR/consensus/src/round_manager_test.rs: `ahead_node
        .block_store
        .insert_single_quorum_cert(block_0_quorum_cert.clone())
        .unwrap();`
$DIR/consensus/src/round_manager_test.rs: `ahead_node.next_proposal().await;`
$DIR/consensus/src/round_manager_test.rs: `behind_node.next_proposal().await;`
$DIR/consensus/src/round_manager_test.rs: `runtime.spawn(playground.start());`
$DIR/consensus/src/round_manager_test.rs: `runtime.spawn(playground.start());`
$DIR/consensus/src/round_manager_test.rs: `reset_safety_rules(&mut node);`
$DIR/consensus/src/round_manager_test.rs: `reset_safety_rules(&mut node);`
$DIR/consensus/src/round_manager_test.rs: `reset_safety_rules(&mut node);`
$DIR/consensus/src/round_manager_test.rs: `node.next_proposal().await;`
$DIR/consensus/src/round_manager_test.rs: `.handle()`
$DIR/consensus/src/round_manager_test.rs: `.handle()`
$DIR/consensus/src/round_manager_test.rs: `.block_store.ordered_root()`
$DIR/consensus/src/round_manager_test.rs: `.next_proposal()`
$DIR/consensus/src/round_manager_test.rs: `.proposal()`
$DIR/consensus/src/round_manager_test.rs: `.id()`
$DIR/consensus/src/round_manager_test.rs: `.round_manager
            .process_proposal_msg(proposal_msg)`
$DIR/consensus/src/round_manager_test.rs: `.next_vote()`
$DIR/consensus/src/round_manager_test.rs: `.round_manager.process_vote_msg(vote_msg)`
$DIR/consensus/src/round_manager_test.rs: `.next_proposal()`
$DIR/consensus/src/round_manager_test.rs: `.proposal()`
$DIR/consensus/src/round_manager_test.rs: `.handle()`
$DIR/consensus/src/round_manager_test.rs: `.handle()`
$DIR/consensus/src/round_manager_test.rs: `.next_proposal()`
$DIR/consensus/src/round_manager_test.rs: `.id()`
$DIR/consensus/src/round_manager_test.rs: `.round_manager.process_proposal(proposal)`
$DIR/consensus/src/round_manager_test.rs: `.next_vote()`
$DIR/consensus/src/round_manager_test.rs: `.round_manager.consensus_state()`
$DIR/consensus/src/round_manager_test.rs: `.handle()`
$DIR/consensus/src/round_manager_test.rs: `.handle()`
$DIR/consensus/src/round_manager_test.rs: `.id()`
$DIR/consensus/src/round_manager_test.rs: `.id()`
$DIR/consensus/src/round_manager_test.rs: `.next_proposal()`
$DIR/consensus/src/round_manager_test.rs: `.round_manager
            .process_proposal(new_block)`
$DIR/consensus/src/round_manager_test.rs: `.round_manager
            .process_proposal(old_block)`
$DIR/consensus/src/round_manager_test.rs: `.next_vote()`
$DIR/consensus/src/round_manager_test.rs: `.handle()`
$DIR/consensus/src/round_manager_test.rs: `.handle()`
$DIR/consensus/src/round_manager_test.rs: `.pop()`
$DIR/consensus/src/round_manager_test.rs: `.round_manager
            .process_proposal_msg(good_proposal)`
$DIR/consensus/src/round_manager_test.rs: `.handle()`
$DIR/consensus/src/round_manager_test.rs: `.handle()`
$DIR/consensus/src/round_manager_test.rs: `.pop()`
$DIR/consensus/src/round_manager_test.rs: `.next_proposal()`
$DIR/consensus/src/round_manager_test.rs: `.proposal()`
$DIR/consensus/src/round_manager_test.rs: `.round_manager
            .process_proposal_msg(proposal_msg)`
$DIR/consensus/src/round_manager_test.rs: `.next_vote()`
$DIR/consensus/src/round_manager_test.rs: `.quorum_cert()`
$DIR/consensus/src/round_manager_test.rs: `.certified_block()`
$DIR/consensus/src/round_manager_test.rs: `.gen_block_info(
                parent_block_info.executed_state_id(),
                parent_block_info.version(),
                parent_block_info.next_epoch_state().cloned(),
            )`
$DIR/consensus/src/round_manager_test.rs: `.executed_state_id()`
$DIR/consensus/src/round_manager_test.rs: `.version()`
$DIR/consensus/src/round_manager_test.rs: `.next_epoch_state()`
$DIR/consensus/src/round_manager_test.rs: `.block_store
            .insert_single_quorum_cert(block_0_quorum_cert.clone())`
$DIR/consensus/src/round_manager_test.rs: `.round_manager
            .process_local_timeout(1)`
$DIR/consensus/src/round_manager_test.rs: `.next_vote()`
$DIR/consensus/src/round_manager_test.rs: `.handle()`
$DIR/consensus/src/round_manager_test.rs: `.handle()`
$DIR/consensus/src/round_manager_test.rs: `.pop()`
$DIR/consensus/src/round_manager_test.rs: `.pop()`
$DIR/consensus/src/round_manager_test.rs: `.round_manager
            .process_proposal_msg(good_proposal.clone())`
$DIR/consensus/src/round_manager_test.rs: `.handle()`
$DIR/consensus/src/round_manager_test.rs: `.handle()`
$DIR/consensus/src/round_manager_test.rs: `.pop()`
$DIR/consensus/src/round_manager_test.rs: `.sign(&node.signer)`
$DIR/consensus/src/round_manager_test.rs: `.add_signature(node.signer.author(), timeout_signature)`
$DIR/consensus/src/round_manager_test.rs: `.signer.author()`
$DIR/consensus/src/round_manager_test.rs: `.round_manager
            .process_proposal_msg(skip_round_proposal)`
$DIR/consensus/src/round_manager_test.rs: `.handle()`
$DIR/consensus/src/round_manager_test.rs: `.handle()`
$DIR/consensus/src/round_manager_test.rs: `.pop()`
$DIR/consensus/src/round_manager_test.rs: `.id()`
$DIR/consensus/src/round_manager_test.rs: `.round_manager
            .process_proposal_msg(proposal)`
$DIR/consensus/src/round_manager_test.rs: `.round_manager
            .process_block_retrieval(single_block_request)`
$DIR/consensus/src/round_manager_test.rs: `.round_manager
            .process_block_retrieval(missing_block_request)`
$DIR/consensus/src/round_manager_test.rs: `.round_manager
            .process_block_retrieval(many_block_request)`
$DIR/consensus/src/round_manager_test.rs: `.handle()`
$DIR/consensus/src/round_manager_test.rs: `.handle()`
$DIR/consensus/src/round_manager_test.rs: `.pop()`
$DIR/consensus/src/round_manager_test.rs: `.create_block_with_qc(genesis_qc.clone(), i, i, vec![])`
$DIR/consensus/src/round_manager_test.rs: `.add_signature(inserter.signer().author(), inserter.signer().sign(&timeout))`
$DIR/consensus/src/round_manager_test.rs: `.signer()`
$DIR/consensus/src/round_manager_test.rs: `.author()`
$DIR/consensus/src/round_manager_test.rs: `.signer()`
$DIR/consensus/src/round_manager_test.rs: `.sign(&timeout)`
$DIR/consensus/src/round_manager_test.rs: `.push((proposal, tc))`
$DIR/consensus/src/round_manager_test.rs: `.quorum_cert()`
$DIR/consensus/src/round_manager_test.rs: `.round_manager
                .process_proposal_msg(proposal_msg)`
$DIR/consensus/src/round_manager_test.rs: `.restart(&mut playground, runtime.handle().clone())`
$DIR/consensus/src/round_manager_test.rs: `.handle()`
$DIR/consensus/src/round_manager_test.rs: `.round_manager.consensus_state()`
$DIR/consensus/src/round_manager_test.rs: `.handle()`
$DIR/consensus/src/round_manager_test.rs: `.handle()`
$DIR/consensus/src/round_manager_test.rs: `.block_store.ordered_root()`
$DIR/consensus/src/round_manager_test.rs: `.next_proposal()`
$DIR/consensus/src/round_manager_test.rs: `.round_manager
            .process_local_timeout(1)`
$DIR/consensus/src/round_manager_test.rs: `.next_vote()`
$DIR/consensus/src/round_manager_test.rs: `.vote()`
$DIR/consensus/src/round_manager_test.rs: `.handle()`
$DIR/consensus/src/round_manager_test.rs: `.handle()`
$DIR/consensus/src/round_manager_test.rs: `.next_proposal()`
$DIR/consensus/src/round_manager_test.rs: `.proposal()`
$DIR/consensus/src/round_manager_test.rs: `.id()`
$DIR/consensus/src/round_manager_test.rs: `.round_manager
            .process_proposal_msg(proposal_msg)`
$DIR/consensus/src/round_manager_test.rs: `.next_vote()`
$DIR/consensus/src/round_manager_test.rs: `.vote()`
$DIR/consensus/src/round_manager_test.rs: `.round_manager
            .process_local_timeout(1)`
$DIR/consensus/src/round_manager_test.rs: `.next_vote()`
$DIR/consensus/src/round_manager_test.rs: `.vote()`
$DIR/consensus/src/round_manager_test.rs: `.handle()`
$DIR/consensus/src/round_manager_test.rs: `.handle()`
$DIR/consensus/src/round_manager_test.rs: `.spawn(playground.start())`
$DIR/consensus/src/round_manager_test.rs: `.start()`
$DIR/consensus/src/round_manager_test.rs: `.quorum_cert()`
$DIR/consensus/src/round_manager_test.rs: `.certified_block()`
$DIR/consensus/src/round_manager_test.rs: `.gen_block_info(
            parent_block_info.executed_state_id(),
            parent_block_info.version(),
            parent_block_info.next_epoch_state().cloned(),
        )`
$DIR/consensus/src/round_manager_test.rs: `.executed_state_id()`
$DIR/consensus/src/round_manager_test.rs: `.version()`
$DIR/consensus/src/round_manager_test.rs: `.next_epoch_state()`
$DIR/consensus/src/round_manager_test.rs: `.pop()`
$DIR/consensus/src/round_manager_test.rs: `.pop()`
$DIR/consensus/src/round_manager_test.rs: `.block_store
        .execute_and_insert_block(block_0)`
$DIR/consensus/src/round_manager_test.rs: `.block_store
        .insert_single_quorum_cert(block_0_quorum_cert.clone())`
$DIR/consensus/src/round_manager_test.rs: `.next_proposal()`
$DIR/consensus/src/round_manager_test.rs: `.next_proposal()`
$DIR/consensus/src/round_manager_test.rs: `.round_manager
            .process_local_timeout(1)`
$DIR/consensus/src/round_manager_test.rs: `.next_vote()`
$DIR/consensus/src/round_manager_test.rs: `.round_manager
            .process_vote_msg(timeout_vote_msg)`
$DIR/consensus/src/round_manager_test.rs: `.next_sync_info()`
$DIR/consensus/src/round_manager_test.rs: `.handle()`
$DIR/consensus/src/round_manager_test.rs: `.handle()`
$DIR/consensus/src/round_manager_test.rs: `.pop()`
$DIR/consensus/src/round_manager_test.rs: `.spawn(playground.start())`
$DIR/consensus/src/round_manager_test.rs: `.start()`
$DIR/consensus/src/round_manager_test.rs: `.next_proposal()`
$DIR/consensus/src/round_manager_test.rs: `.round_manager
                .process_proposal_msg(proposal_msg)`
$DIR/consensus/src/round_manager_test.rs: `.next_vote()`
$DIR/consensus/src/round_manager_test.rs: `.round_manager.process_vote_msg(vote_msg)`
$DIR/consensus/src/round_manager_test.rs: `.next_proposal()`
$DIR/consensus/src/round_manager_test.rs: `.round_manager
            .process_proposal_msg(block_4.clone())`
$DIR/consensus/src/round_manager_test.rs: `.commit_cb_receiver.next()`
$DIR/consensus/src/round_manager_test.rs: `.next_vote()`
$DIR/consensus/src/round_manager_test.rs: `.vote()`
$DIR/consensus/src/round_manager_test.rs: `.vote_data()`
$DIR/consensus/src/round_manager_test.rs: `.proposed()`
$DIR/consensus/src/round_manager_test.rs: `.parent()`
$DIR/consensus/src/round_manager_test.rs: `.round_manager
            .ensure_round_and_sync_up(
                sync_info.highest_round() + 1,
                &sync_info,
                node.signer.author(),
                true,
            )`
$DIR/consensus/src/round_manager_test.rs: `.highest_round()`
$DIR/consensus/src/round_manager_test.rs: `.signer.author()`
$DIR/consensus/src/round_manager_test.rs: `.next_message()`
$DIR/consensus/src/round_manager_test.rs: `.next_message()`
$DIR/consensus/src/round_manager_test.rs: `.handle()`
$DIR/consensus/src/round_manager_test.rs: `.handle()`
$DIR/consensus/src/round_manager_test.rs: `.pop()`
$DIR/consensus/src/round_manager_test.rs: `.spawn(playground.start())`
$DIR/consensus/src/round_manager_test.rs: `.start()`
$DIR/consensus/src/round_manager_test.rs: `.next_proposal()`
$DIR/consensus/src/round_manager_test.rs: `.round_manager
                .process_proposal_msg(proposal_msg)`
$DIR/consensus/src/round_manager_test.rs: `.next_vote()`
$DIR/consensus/src/round_manager_test.rs: `.vote()`
$DIR/consensus/src/round_manager_test.rs: `.vote_data()`
$DIR/consensus/src/round_manager_test.rs: `.proposed()`
$DIR/consensus/src/round_manager_test.rs: `.round()`
$DIR/consensus/src/round_manager_test.rs: `.round_manager
                .process_local_timeout(round)`
$DIR/consensus/src/round_manager_test.rs: `.next_vote()`
$DIR/consensus/src/round_manager_test.rs: `.round_manager.process_vote_msg(vote_msg)`
$DIR/consensus/src/round_manager_test.rs: `.next_proposal()`
$DIR/consensus/src/twins/basic_twins_test.rs: `runtime.spawn(playground.start());`
$DIR/consensus/src/twins/basic_twins_test.rs: `runtime.spawn(playground.start());`
$DIR/consensus/src/twins/basic_twins_test.rs: `commit_seen = true;`
$DIR/consensus/src/twins/basic_twins_test.rs: `round_proposers.insert(i, 0);`
$DIR/consensus/src/twins/basic_twins_test.rs: `round_partitions.insert(
            i,
            vec![
                vec![n0_twin_id, n1_twin_id, n2_twin_id],
                vec![n3_twin_id, twin0_twin_id, twin1_twin_id],
            ],
        );`
$DIR/consensus/src/twins/basic_twins_test.rs: `runtime.spawn(playground.start());`
$DIR/consensus/src/twins/basic_twins_test.rs: `round_proposers.insert(i, 0);`
$DIR/consensus/src/twins/basic_twins_test.rs: `runtime.spawn(playground.start());`
$DIR/consensus/src/twins/basic_twins_test.rs: `.handle()`
$DIR/consensus/src/twins/basic_twins_test.rs: `.storage.get_ledger_info()`
$DIR/consensus/src/twins/basic_twins_test.rs: `.wait_for_messages(1, NetworkPlayground::proposals_only)`
$DIR/consensus/src/twins/basic_twins_test.rs: `.handle()`
$DIR/consensus/src/twins/basic_twins_test.rs: `.spawn(playground.start())`
$DIR/consensus/src/twins/basic_twins_test.rs: `.start()`
$DIR/consensus/src/twins/basic_twins_test.rs: `.commit_cb_receiver.next()`
$DIR/consensus/src/twins/basic_twins_test.rs: `.commit_cb_receiver.try_next()`
$DIR/consensus/src/twins/basic_twins_test.rs: `.handle()`
$DIR/consensus/src/twins/basic_twins_test.rs: `.spawn(playground.start())`
$DIR/consensus/src/twins/basic_twins_test.rs: `.start()`
$DIR/consensus/src/twins/basic_twins_test.rs: `.commit_cb_receiver.try_next()`
$DIR/consensus/src/twins/basic_twins_test.rs: `.handle()`
$DIR/consensus/src/twins/basic_twins_test.rs: `.insert(i, 0)`
$DIR/consensus/src/twins/basic_twins_test.rs: `.insert(
            i,
            vec![
                vec![n0_twin_id, n1_twin_id, n2_twin_id],
                vec![n3_twin_id, twin0_twin_id, twin1_twin_id],
            ],
        )`
$DIR/consensus/src/twins/basic_twins_test.rs: `.spawn(playground.start())`
$DIR/consensus/src/twins/basic_twins_test.rs: `.start()`
$DIR/consensus/src/twins/basic_twins_test.rs: `.commit_cb_receiver.next()`
$DIR/consensus/src/twins/basic_twins_test.rs: `.commit_cb_receiver.next()`
$DIR/consensus/src/twins/basic_twins_test.rs: `.ledger_info()`
$DIR/consensus/src/twins/basic_twins_test.rs: `.commit_info()`
$DIR/consensus/src/twins/basic_twins_test.rs: `.id()`
$DIR/consensus/src/twins/basic_twins_test.rs: `.ledger_info()`
$DIR/consensus/src/twins/basic_twins_test.rs: `.commit_info()`
$DIR/consensus/src/twins/basic_twins_test.rs: `.id()`
$DIR/consensus/src/twins/basic_twins_test.rs: `.handle()`
$DIR/consensus/src/twins/basic_twins_test.rs: `.insert(i, 0)`
$DIR/consensus/src/twins/basic_twins_test.rs: `.spawn(playground.start())`
$DIR/consensus/src/twins/basic_twins_test.rs: `.start()`
$DIR/consensus/src/twins/basic_twins_test.rs: `.commit_cb_receiver.next()`
$DIR/consensus/src/twins/basic_twins_test.rs: `.commit_cb_receiver.next()`
$DIR/consensus/src/twins/basic_twins_test.rs: `.ledger_info()`
$DIR/consensus/src/twins/basic_twins_test.rs: `.commit_info()`
$DIR/consensus/src/twins/basic_twins_test.rs: `.id()`
$DIR/consensus/src/twins/basic_twins_test.rs: `.ledger_info()`
$DIR/consensus/src/twins/basic_twins_test.rs: `.commit_info()`
$DIR/consensus/src/twins/basic_twins_test.rs: `.id()`
$DIR/crates/bounded-executor/src/lib.rs: `tx1.send(()).unwrap();`
$DIR/crates/bounded-executor/src/lib.rs: `block_on(f1).unwrap().unwrap();`
$DIR/crates/bounded-executor/src/lib.rs: `tx2.send(()).unwrap();`
$DIR/crates/bounded-executor/src/lib.rs: `block_on(executor.spawn(async move {
                // acquired permit, there should only ever be MAX_WORKERS in this
                // critical section

                let prev_workers = WORKERS.fetch_add(1, Ordering::SeqCst);
                assert!(prev_workers < MAX_WORKERS);

                // yield back to the tokio scheduler
                yield_task().await;

                let prev_workers = WORKERS.fetch_sub(1, Ordering::SeqCst);
                assert!(prev_workers > 0 && prev_workers <= MAX_WORKERS);

                COMPLETED_TASKS.fetch_add(1, Ordering::Relaxed);
            }));`
$DIR/crates/bounded-executor/src/lib.rs: `yield_task().await;`
$DIR/crates/bounded-executor/src/lib.rs: `COMPLETED_TASKS.fetch_add(1, Ordering::Relaxed);`
$DIR/crates/bounded-executor/src/lib.rs: `.handle()`
$DIR/crates/bounded-executor/src/lib.rs: `.try_spawn(rx1)`
$DIR/crates/bounded-executor/src/lib.rs: `.try_spawn(rx2)`
$DIR/crates/bounded-executor/src/lib.rs: `.send(())`
$DIR/crates/bounded-executor/src/lib.rs: `.try_spawn(rx2)`
$DIR/crates/bounded-executor/src/lib.rs: `.send(())`
$DIR/crates/bounded-executor/src/lib.rs: `.handle()`
$DIR/crates/bounded-executor/src/lib.rs: `.spawn(async move {
                // acquired permit, there should only ever be MAX_WORKERS in this
                // critical section

                let prev_workers = WORKERS.fetch_add(1, Ordering::SeqCst);
                assert!(prev_workers < MAX_WORKERS);

                // yield back to the tokio scheduler
                yield_task().await;

                let prev_workers = WORKERS.fetch_sub(1, Ordering::SeqCst);
                assert!(prev_workers > 0 && prev_workers <= MAX_WORKERS);

                COMPLETED_TASKS.fetch_add(1, Ordering::Relaxed);
            })`
$DIR/crates/bounded-executor/src/lib.rs: `.fetch_add(1, Ordering::SeqCst)`
$DIR/crates/bounded-executor/src/lib.rs: `.fetch_sub(1, Ordering::SeqCst)`
$DIR/crates/bounded-executor/src/lib.rs: `.fetch_add(1, Ordering::Relaxed)`
$DIR/crates/bounded-executor/src/lib.rs: `.load(Ordering::Relaxed)`
$DIR/crates/channel/src/diem_channel_test.rs: `sender.push(0, 0).unwrap();`
$DIR/crates/channel/src/diem_channel_test.rs: `sender.push(0, 1).unwrap();`
$DIR/crates/channel/src/diem_channel_test.rs: `sender.push(0, 2).unwrap();`
$DIR/crates/channel/src/diem_channel_test.rs: `sender.push(0, 3).unwrap();`
$DIR/crates/channel/src/diem_channel_test.rs: `sleep(Duration::from_millis(100)).await;`
$DIR/crates/channel/src/diem_channel_test.rs: `sender.push(0, 0).unwrap();`
$DIR/crates/channel/src/diem_channel_test.rs: `sleep(Duration::from_millis(100)).await;`
$DIR/crates/channel/src/diem_channel_test.rs: `sender.push(0, 1).unwrap();`
$DIR/crates/channel/src/diem_channel_test.rs: `sleep(Duration::from_millis(100)).await;`
$DIR/crates/channel/src/diem_channel_test.rs: `sender.push(0, 2).unwrap();`
$DIR/crates/channel/src/diem_channel_test.rs: `sender.push(0, 0).unwrap();`
$DIR/crates/channel/src/diem_channel_test.rs: `sender.push(0, 1).unwrap();`
$DIR/crates/channel/src/diem_channel_test.rs: `block_on(f1);`
$DIR/crates/channel/src/diem_channel_test.rs: `sender.push(0, 'a').unwrap();`
$DIR/crates/channel/src/diem_channel_test.rs: `sender.push(0, 'b').unwrap();`
$DIR/crates/channel/src/diem_channel_test.rs: `sender
        .push_with_feedback(0, 'c', Some(c_status_tx))
        .unwrap();`
$DIR/crates/channel/src/diem_channel_test.rs: `sender
        .push_with_feedback(0, 'd', Some(d_status_tx))
        .unwrap();`
$DIR/crates/channel/src/diem_channel_test.rs: `.push(0, 0)`
$DIR/crates/channel/src/diem_channel_test.rs: `.push(0, 1)`
$DIR/crates/channel/src/diem_channel_test.rs: `.push(0, 2)`
$DIR/crates/channel/src/diem_channel_test.rs: `.push(0, 3)`
$DIR/crates/channel/src/diem_channel_test.rs: `.push(0, 0)`
$DIR/crates/channel/src/diem_channel_test.rs: `.push(0, 1)`
$DIR/crates/channel/src/diem_channel_test.rs: `.push(0, 2)`
$DIR/crates/channel/src/diem_channel_test.rs: `.push(0, 0)`
$DIR/crates/channel/src/diem_channel_test.rs: `.push(0, 1)`
$DIR/crates/channel/src/diem_channel_test.rs: `.push(0, 'a')`
$DIR/crates/channel/src/diem_channel_test.rs: `.push(0, 'b')`
$DIR/crates/channel/src/diem_channel_test.rs: `.push_with_feedback(0, 'c', Some(c_status_tx))`
$DIR/crates/channel/src/diem_channel_test.rs: `.push_with_feedback(0, 'd', Some(d_status_tx))`
$DIR/crates/channel/src/message_queues_test.rs: `q.push(
        validator,
        ProposalMsg {
            msg: "msg1".to_string(),
        },
    );`
$DIR/crates/channel/src/message_queues_test.rs: `q.push(
        validator,
        ProposalMsg {
            msg: "msg2".to_string(),
        },
    );`
$DIR/crates/channel/src/message_queues_test.rs: `q.push(
        validator,
        ProposalMsg {
            msg: "msg3".to_string(),
        },
    );`
$DIR/crates/channel/src/message_queues_test.rs: `q.push(
        validator,
        ProposalMsg {
            msg: "msg1".to_string(),
        },
    );`
$DIR/crates/channel/src/message_queues_test.rs: `q.push(
        validator,
        ProposalMsg {
            msg: "msg2".to_string(),
        },
    );`
$DIR/crates/channel/src/message_queues_test.rs: `q.push(
        validator,
        ProposalMsg {
            msg: "msg3".to_string(),
        },
    );`
$DIR/crates/channel/src/message_queues_test.rs: `q.push(
        validator,
        ProposalMsg {
            msg: "msg4".to_string(),
        },
    );`
$DIR/crates/channel/src/message_queues_test.rs: `q.push(
        validator,
        ProposalMsg {
            msg: "msg1".to_string(),
        },
    );`
$DIR/crates/channel/src/message_queues_test.rs: `q.push(
        validator,
        ProposalMsg {
            msg: "msg2".to_string(),
        },
    );`
$DIR/crates/channel/src/message_queues_test.rs: `q.push(
        validator,
        ProposalMsg {
            msg: "msg3".to_string(),
        },
    );`
$DIR/crates/channel/src/message_queues_test.rs: `q.push(
        validator,
        ProposalMsg {
            msg: "msg1".to_string(),
        },
    );`
$DIR/crates/channel/src/message_queues_test.rs: `q.push(
        validator,
        ProposalMsg {
            msg: "msg2".to_string(),
        },
    );`
$DIR/crates/channel/src/message_queues_test.rs: `q.push(
        validator,
        ProposalMsg {
            msg: "msg3".to_string(),
        },
    );`
$DIR/crates/channel/src/message_queues_test.rs: `q.push(
        validator,
        ProposalMsg {
            msg: "msg4".to_string(),
        },
    );`
$DIR/crates/channel/src/message_queues_test.rs: `q.push(
        validator,
        ProposalMsg {
            msg: "msg1".to_string(),
        },
    );`
$DIR/crates/channel/src/message_queues_test.rs: `q.push(
        validator,
        ProposalMsg {
            msg: "msg2".to_string(),
        },
    );`
$DIR/crates/channel/src/message_queues_test.rs: `q.push(
        validator,
        ProposalMsg {
            msg: "msg3".to_string(),
        },
    );`
$DIR/crates/channel/src/message_queues_test.rs: `q.push(
        validator,
        ProposalMsg {
            msg: "msg1".to_string(),
        },
    );`
$DIR/crates/channel/src/message_queues_test.rs: `q.push(
        validator,
        ProposalMsg {
            msg: "msg2".to_string(),
        },
    );`
$DIR/crates/channel/src/message_queues_test.rs: `q.push(
        validator,
        ProposalMsg {
            msg: "msg3".to_string(),
        },
    );`
$DIR/crates/channel/src/message_queues_test.rs: `q.push(
        validator,
        ProposalMsg {
            msg: "msg4".to_string(),
        },
    );`
$DIR/crates/channel/src/message_queues_test.rs: `q.push(
        validator1,
        ProposalMsg {
            msg: "validator1_msg1".to_string(),
        },
    );`
$DIR/crates/channel/src/message_queues_test.rs: `q.push(
        validator1,
        ProposalMsg {
            msg: "validator1_msg2".to_string(),
        },
    );`
$DIR/crates/channel/src/message_queues_test.rs: `q.push(
        validator1,
        ProposalMsg {
            msg: "validator1_msg3".to_string(),
        },
    );`
$DIR/crates/channel/src/message_queues_test.rs: `q.push(
        validator2,
        ProposalMsg {
            msg: "validator2_msg1".to_string(),
        },
    );`
$DIR/crates/channel/src/message_queues_test.rs: `q.push(
        validator3,
        ProposalMsg {
            msg: "validator3_msg1".to_string(),
        },
    );`
$DIR/crates/channel/src/message_queues_test.rs: `q.push(
        validator1,
        ProposalMsg {
            msg: "validator1_msg1".to_string(),
        },
    );`
$DIR/crates/channel/src/message_queues_test.rs: `q.push(
        validator1,
        ProposalMsg {
            msg: "validator1_msg2".to_string(),
        },
    );`
$DIR/crates/channel/src/message_queues_test.rs: `q.push(
        validator1,
        ProposalMsg {
            msg: "validator1_msg3".to_string(),
        },
    );`
$DIR/crates/channel/src/message_queues_test.rs: `q.push(
        validator2,
        ProposalMsg {
            msg: "validator2_msg1".to_string(),
        },
    );`
$DIR/crates/channel/src/message_queues_test.rs: `q.push(
        validator3,
        ProposalMsg {
            msg: "validator3_msg1".to_string(),
        },
    );`
$DIR/crates/channel/src/message_queues_test.rs: `q.push(
        validator1,
        ProposalMsg {
            msg: "validator1_msg1".to_string(),
        },
    );`
$DIR/crates/channel/src/message_queues_test.rs: `q.push(
        validator1,
        ProposalMsg {
            msg: "validator1_msg2".to_string(),
        },
    );`
$DIR/crates/channel/src/message_queues_test.rs: `q.push(
        validator1,
        ProposalMsg {
            msg: "validator1_msg3".to_string(),
        },
    );`
$DIR/crates/channel/src/message_queues_test.rs: `q.push(
        validator2,
        ProposalMsg {
            msg: "validator2_msg1".to_string(),
        },
    );`
$DIR/crates/channel/src/message_queues_test.rs: `q.push(
        validator3,
        ProposalMsg {
            msg: "validator3_msg1".to_string(),
        },
    );`
$DIR/crates/channel/src/message_queues_test.rs: `q.push(
        validator,
        ProposalMsg {
            msg: "msg1".to_string(),
        },
    );`
$DIR/crates/channel/src/message_queues_test.rs: `q.push(
        validator,
        ProposalMsg {
            msg: "msg2".to_string(),
        },
    );`
$DIR/crates/channel/src/message_queues_test.rs: `q.clear();`
$DIR/crates/channel/src/message_queues_test.rs: `q.push(
        validator,
        ProposalMsg {
            msg: "msg3".to_string(),
        },
    );`
$DIR/crates/channel/src/message_queues_test.rs: `.push(
        validator,
        ProposalMsg {
            msg: "msg1".to_string(),
        },
    )`
$DIR/crates/channel/src/message_queues_test.rs: `.push(
        validator,
        ProposalMsg {
            msg: "msg2".to_string(),
        },
    )`
$DIR/crates/channel/src/message_queues_test.rs: `.push(
        validator,
        ProposalMsg {
            msg: "msg3".to_string(),
        },
    )`
$DIR/crates/channel/src/message_queues_test.rs: `.push(
        validator,
        ProposalMsg {
            msg: "msg1".to_string(),
        },
    )`
$DIR/crates/channel/src/message_queues_test.rs: `.push(
        validator,
        ProposalMsg {
            msg: "msg2".to_string(),
        },
    )`
$DIR/crates/channel/src/message_queues_test.rs: `.push(
        validator,
        ProposalMsg {
            msg: "msg3".to_string(),
        },
    )`
$DIR/crates/channel/src/message_queues_test.rs: `.push(
        validator,
        ProposalMsg {
            msg: "msg4".to_string(),
        },
    )`
$DIR/crates/channel/src/message_queues_test.rs: `.push(
        validator,
        ProposalMsg {
            msg: "msg1".to_string(),
        },
    )`
$DIR/crates/channel/src/message_queues_test.rs: `.push(
        validator,
        ProposalMsg {
            msg: "msg2".to_string(),
        },
    )`
$DIR/crates/channel/src/message_queues_test.rs: `.push(
        validator,
        ProposalMsg {
            msg: "msg3".to_string(),
        },
    )`
$DIR/crates/channel/src/message_queues_test.rs: `.push(
        validator,
        ProposalMsg {
            msg: "msg1".to_string(),
        },
    )`
$DIR/crates/channel/src/message_queues_test.rs: `.push(
        validator,
        ProposalMsg {
            msg: "msg2".to_string(),
        },
    )`
$DIR/crates/channel/src/message_queues_test.rs: `.push(
        validator,
        ProposalMsg {
            msg: "msg3".to_string(),
        },
    )`
$DIR/crates/channel/src/message_queues_test.rs: `.push(
        validator,
        ProposalMsg {
            msg: "msg4".to_string(),
        },
    )`
$DIR/crates/channel/src/message_queues_test.rs: `.push(
        validator,
        ProposalMsg {
            msg: "msg1".to_string(),
        },
    )`
$DIR/crates/channel/src/message_queues_test.rs: `.push(
        validator,
        ProposalMsg {
            msg: "msg2".to_string(),
        },
    )`
$DIR/crates/channel/src/message_queues_test.rs: `.push(
        validator,
        ProposalMsg {
            msg: "msg3".to_string(),
        },
    )`
$DIR/crates/channel/src/message_queues_test.rs: `.push(
        validator,
        ProposalMsg {
            msg: "msg1".to_string(),
        },
    )`
$DIR/crates/channel/src/message_queues_test.rs: `.push(
        validator,
        ProposalMsg {
            msg: "msg2".to_string(),
        },
    )`
$DIR/crates/channel/src/message_queues_test.rs: `.push(
        validator,
        ProposalMsg {
            msg: "msg3".to_string(),
        },
    )`
$DIR/crates/channel/src/message_queues_test.rs: `.push(
        validator,
        ProposalMsg {
            msg: "msg4".to_string(),
        },
    )`
$DIR/crates/channel/src/message_queues_test.rs: `.push(
        validator1,
        ProposalMsg {
            msg: "validator1_msg1".to_string(),
        },
    )`
$DIR/crates/channel/src/message_queues_test.rs: `.push(
        validator1,
        ProposalMsg {
            msg: "validator1_msg2".to_string(),
        },
    )`
$DIR/crates/channel/src/message_queues_test.rs: `.push(
        validator1,
        ProposalMsg {
            msg: "validator1_msg3".to_string(),
        },
    )`
$DIR/crates/channel/src/message_queues_test.rs: `.push(
        validator2,
        ProposalMsg {
            msg: "validator2_msg1".to_string(),
        },
    )`
$DIR/crates/channel/src/message_queues_test.rs: `.push(
        validator3,
        ProposalMsg {
            msg: "validator3_msg1".to_string(),
        },
    )`
$DIR/crates/channel/src/message_queues_test.rs: `.push(
        validator1,
        ProposalMsg {
            msg: "validator1_msg1".to_string(),
        },
    )`
$DIR/crates/channel/src/message_queues_test.rs: `.push(
        validator1,
        ProposalMsg {
            msg: "validator1_msg2".to_string(),
        },
    )`
$DIR/crates/channel/src/message_queues_test.rs: `.push(
        validator1,
        ProposalMsg {
            msg: "validator1_msg3".to_string(),
        },
    )`
$DIR/crates/channel/src/message_queues_test.rs: `.push(
        validator2,
        ProposalMsg {
            msg: "validator2_msg1".to_string(),
        },
    )`
$DIR/crates/channel/src/message_queues_test.rs: `.push(
        validator3,
        ProposalMsg {
            msg: "validator3_msg1".to_string(),
        },
    )`
$DIR/crates/channel/src/message_queues_test.rs: `.push(
        validator1,
        ProposalMsg {
            msg: "validator1_msg1".to_string(),
        },
    )`
$DIR/crates/channel/src/message_queues_test.rs: `.push(
        validator1,
        ProposalMsg {
            msg: "validator1_msg2".to_string(),
        },
    )`
$DIR/crates/channel/src/message_queues_test.rs: `.push(
        validator1,
        ProposalMsg {
            msg: "validator1_msg3".to_string(),
        },
    )`
$DIR/crates/channel/src/message_queues_test.rs: `.push(
        validator2,
        ProposalMsg {
            msg: "validator2_msg1".to_string(),
        },
    )`
$DIR/crates/channel/src/message_queues_test.rs: `.push(
        validator3,
        ProposalMsg {
            msg: "validator3_msg1".to_string(),
        },
    )`
$DIR/crates/channel/src/message_queues_test.rs: `.push(
        validator,
        ProposalMsg {
            msg: "msg1".to_string(),
        },
    )`
$DIR/crates/channel/src/message_queues_test.rs: `.push(
        validator,
        ProposalMsg {
            msg: "msg2".to_string(),
        },
    )`
$DIR/crates/channel/src/message_queues_test.rs: `.clear()`
$DIR/crates/channel/src/message_queues_test.rs: `.push(
        validator,
        ProposalMsg {
            msg: "msg3".to_string(),
        },
    )`
$DIR/crates/channel/src/test.rs: `block_on(tx.send(item)).unwrap();`
$DIR/crates/channel/src/test.rs: `block_on(tx.send(1)).unwrap();`
$DIR/crates/channel/src/test.rs: `block_on(tx1.send(1)).unwrap();`
$DIR/crates/channel/src/test.rs: `tx.try_send(item).unwrap();`
$DIR/crates/channel/src/test.rs: `tx.try_send(item).unwrap();`
$DIR/crates/channel/src/test.rs: `tx.try_send(item).unwrap();`
$DIR/crates/channel/src/test.rs: `.send(item)`
$DIR/crates/channel/src/test.rs: `.next()`
$DIR/crates/channel/src/test.rs: `.send(1)`
$DIR/crates/channel/src/test.rs: `.send(2)`
$DIR/crates/channel/src/test.rs: `.next()`
$DIR/crates/channel/src/test.rs: `.send(1)`
$DIR/crates/channel/src/test.rs: `.send(2)`
$DIR/crates/channel/src/test.rs: `.next()`
$DIR/crates/channel/src/test.rs: `.try_send(item)`
$DIR/crates/channel/src/test.rs: `.next()`
$DIR/crates/channel/src/test.rs: `.try_send(item)`
$DIR/crates/channel/src/test.rs: `.try_send(item)`
$DIR/crates/channel/src/test.rs: `.try_send(item)`
$DIR/crates/channel/src/test.rs: `.next()`
$DIR/crates/channel/src/test.rs: `.next()`
$DIR/crates/diem-bitvec/src/lib.rs: `p5.set(10);`
$DIR/crates/diem-bitvec/src/lib.rs: `p.set(std::u8::MAX);`
$DIR/crates/diem-bitvec/src/lib.rs: `p.set(0);`
$DIR/crates/diem-bitvec/src/lib.rs: `bytes[0] = 46;`
$DIR/crates/diem-bitvec/src/lib.rs: `bytes[0] = 32;`
$DIR/crates/diem-bitvec/src/lib.rs: `.set(10)`
$DIR/crates/diem-bitvec/src/lib.rs: `.set(std::u8::MAX)`
$DIR/crates/diem-bitvec/src/lib.rs: `.set(0)`
$DIR/crates/diem-crypto/src/multi_ed25519.rs: `bitmap_set_bit(&mut bitmap, 30);`
$DIR/crates/diem-crypto/src/unit_tests/bcs_test.rs: `.sign(&message)`
$DIR/crates/diem-crypto/src/unit_tests/bcs_test.rs: `.verify(&message, &public_key)`
$DIR/crates/diem-crypto/src/unit_tests/bcs_test.rs: `.sign(&message)`
$DIR/crates/diem-crypto/src/unit_tests/cryptohasher.rs: `salt.extend_from_slice(b"Foo");`
$DIR/crates/diem-crypto/src/unit_tests/cryptohasher.rs: `digest.update(HashValue::sha3_256_of(&salt[..]).as_ref());`
$DIR/crates/diem-crypto/src/unit_tests/cryptohasher.rs: `digest.finalize(&mut hasher_bytes);`
$DIR/crates/diem-crypto/src/unit_tests/cryptohasher.rs: `salt.extend_from_slice(b"Foo");`
$DIR/crates/diem-crypto/src/unit_tests/cryptohasher.rs: `digest.update(HashValue::sha3_256_of(&salt[..]).as_ref());`
$DIR/crates/diem-crypto/src/unit_tests/cryptohasher.rs: `digest.update(&bcs::to_bytes(&value).unwrap());`
$DIR/crates/diem-crypto/src/unit_tests/cryptohasher.rs: `digest.finalize(&mut hasher_bytes);`
$DIR/crates/diem-crypto/src/unit_tests/cryptohasher.rs: `.extend_from_slice(b"Foo")`
$DIR/crates/diem-crypto/src/unit_tests/cryptohasher.rs: `.update(HashValue::sha3_256_of(&salt[..]).as_ref())`
$DIR/crates/diem-crypto/src/unit_tests/cryptohasher.rs: `.finalize(&mut hasher_bytes)`
$DIR/crates/diem-crypto/src/unit_tests/cryptohasher.rs: `.extend_from_slice(b"Foo")`
$DIR/crates/diem-crypto/src/unit_tests/cryptohasher.rs: `.update(HashValue::sha3_256_of(&salt[..]).as_ref())`
$DIR/crates/diem-crypto/src/unit_tests/cryptohasher.rs: `.update(&bcs::to_bytes(&value).unwrap())`
$DIR/crates/diem-crypto/src/unit_tests/cryptohasher.rs: `.finalize(&mut hasher_bytes)`
$DIR/crates/diem-crypto/src/unit_tests/hash_test.rs: `wtr.extend_from_slice(&x.to_le_bytes());`
$DIR/crates/diem-crypto/src/unit_tests/hash_test.rs: `wtr.extend_from_slice(&x.to_le_bytes());`
$DIR/crates/diem-crypto/src/unit_tests/hash_test.rs: `wtr.extend_from_slice(&x.to_le_bytes());`
$DIR/crates/diem-crypto/src/unit_tests/hash_test.rs: `seed[..4].copy_from_slice(&[1, 2, 3, 4]);`
$DIR/crates/diem-crypto/src/unit_tests/hash_test.rs: `hash1 = HashValue::random_with_rng(&mut rng);`
$DIR/crates/diem-crypto/src/unit_tests/hash_test.rs: `hash2 = HashValue::random_with_rng(&mut rng);`
$DIR/crates/diem-crypto/src/unit_tests/hash_test.rs: `bits_rev.reverse();`
$DIR/crates/diem-crypto/src/unit_tests/hash_test.rs: `iter.next();`
$DIR/crates/diem-crypto/src/unit_tests/hash_test.rs: `iter.next_back();`
$DIR/crates/diem-crypto/src/unit_tests/hash_test.rs: `*byte = rand::thread_rng().gen();`
$DIR/crates/diem-crypto/src/unit_tests/hash_test.rs: `nibbles.push(*byte >> 4);`
$DIR/crates/diem-crypto/src/unit_tests/hash_test.rs: `nibbles.push(*byte & 0x0f);`
$DIR/crates/diem-crypto/src/unit_tests/hash_test.rs: `.extend_from_slice(&x.to_le_bytes())`
$DIR/crates/diem-crypto/src/unit_tests/hash_test.rs: `.to_le_bytes()`
$DIR/crates/diem-crypto/src/unit_tests/hash_test.rs: `.extend_from_slice(&x.to_le_bytes())`
$DIR/crates/diem-crypto/src/unit_tests/hash_test.rs: `.to_le_bytes()`
$DIR/crates/diem-crypto/src/unit_tests/hash_test.rs: `.extend_from_slice(&x.to_le_bytes())`
$DIR/crates/diem-crypto/src/unit_tests/hash_test.rs: `.to_le_bytes()`
$DIR/crates/diem-crypto/src/unit_tests/hash_test.rs: `.copy_from_slice(&[1, 2, 3, 4])`
$DIR/crates/diem-crypto/src/unit_tests/hash_test.rs: `.test_only_hash()`
$DIR/crates/diem-crypto/src/unit_tests/hash_test.rs: `.iter_bits()`
$DIR/crates/diem-crypto/src/unit_tests/hash_test.rs: `.collect::<Vec<_>>()`
$DIR/crates/diem-crypto/src/unit_tests/hash_test.rs: `.iter_bits()`
$DIR/crates/diem-crypto/src/unit_tests/hash_test.rs: `.rev()`
$DIR/crates/diem-crypto/src/unit_tests/hash_test.rs: `.collect::<Vec<_>>()`
$DIR/crates/diem-crypto/src/unit_tests/hash_test.rs: `.reverse()`
$DIR/crates/diem-crypto/src/unit_tests/hash_test.rs: `.test_only_hash()`
$DIR/crates/diem-crypto/src/unit_tests/hash_test.rs: `.iter_bits()`
$DIR/crates/diem-crypto/src/unit_tests/hash_test.rs: `.next()`
$DIR/crates/diem-crypto/src/unit_tests/hash_test.rs: `.next_back()`
$DIR/crates/diem-crypto/src/unit_tests/hash_test.rs: `.iter_bits()`
$DIR/crates/diem-crypto/src/unit_tests/hash_test.rs: `.rev()`
$DIR/crates/diem-crypto/src/unit_tests/hash_test.rs: `.iter_bits()`
$DIR/crates/diem-crypto/src/unit_tests/hash_test.rs: `.skip(100)`
$DIR/crates/diem-crypto/src/unit_tests/hash_test.rs: `.test_only_hash()`
$DIR/crates/diem-crypto/src/unit_tests/hash_test.rs: `.iter_bits()`
$DIR/crates/diem-crypto/src/unit_tests/hash_test.rs: `.zip(hash_str.chars())`
$DIR/crates/diem-crypto/src/unit_tests/hash_test.rs: `.chars()`
$DIR/crates/diem-crypto/src/unit_tests/hash_test.rs: `.take(HashValue::LENGTH)`
$DIR/crates/diem-crypto/src/unit_tests/hash_test.rs: `.gen()`
$DIR/crates/diem-crypto/src/unit_tests/hash_test.rs: `.push(*byte >> 4)`
$DIR/crates/diem-crypto/src/unit_tests/hash_test.rs: `.push(*byte & 0x0f)`
$DIR/crates/diem-crypto/src/unit_tests/hash_test.rs: `.enumerate()`
$DIR/crates/diem-crypto/src/unit_tests/hash_test.rs: `.take(HashValue::LENGTH * 2)`
$DIR/crates/diem-crypto/src/unit_tests/hash_test.rs: `.test_only_hash()`
$DIR/crates/diem-crypto/src/unit_tests/hash_test.rs: `.test_only_hash()`
$DIR/crates/diem-crypto/src/unit_tests/hash_test.rs: `.test_only_hash()`
$DIR/crates/diem-crypto/src/unit_tests/hash_test.rs: `.test_only_hash()`
$DIR/crates/diem-crypto/src/unit_tests/hash_test.rs: `.test_only_hash()`
$DIR/crates/diem-crypto/src/unit_tests/hash_test.rs: `.test_only_hash()`
$DIR/crates/diem-crypto/src/unit_tests/hash_test.rs: `.test_only_hash()`
$DIR/crates/diem-crypto/src/unit_tests/hash_test.rs: `.test_only_hash()`
$DIR/crates/diem-crypto/src/unit_tests/multi_ed25519_test.rs: `test_successful_public_key_serialization(&pub_keys_1, 1);`
$DIR/crates/diem-crypto/src/unit_tests/multi_ed25519_test.rs: `test_successful_public_key_serialization(&pub_keys_10, 1);`
$DIR/crates/diem-crypto/src/unit_tests/multi_ed25519_test.rs: `test_successful_public_key_serialization(&pub_keys_10, 7);`
$DIR/crates/diem-crypto/src/unit_tests/multi_ed25519_test.rs: `test_successful_public_key_serialization(&pub_keys_10, 10);`
$DIR/crates/diem-crypto/src/unit_tests/multi_ed25519_test.rs: `test_successful_public_key_serialization(&pub_keys_32, 2);`
$DIR/crates/diem-crypto/src/unit_tests/multi_ed25519_test.rs: `test_successful_public_key_serialization(&pub_keys_32, 32);`
$DIR/crates/diem-crypto/src/unit_tests/multi_ed25519_test.rs: `test_failed_public_key_serialization(multi_key_11of10, ValidationError);`
$DIR/crates/diem-crypto/src/unit_tests/multi_ed25519_test.rs: `test_failed_public_key_serialization(multi_key_0of10, ValidationError);`
$DIR/crates/diem-crypto/src/unit_tests/multi_ed25519_test.rs: `test_failed_public_key_serialization(multi_key_1of33, WrongLengthError);`
$DIR/crates/diem-crypto/src/unit_tests/multi_ed25519_test.rs: `test_failed_public_key_serialization(multi_key_empty_bytes, WrongLengthError);`
$DIR/crates/diem-crypto/src/unit_tests/multi_ed25519_test.rs: `test_failed_public_key_serialization(multi_key_1_byte, WrongLengthError);`
$DIR/crates/diem-crypto/src/unit_tests/multi_ed25519_test.rs: `test_failed_public_key_serialization(multi_key_31_bytes, WrongLengthError);`
$DIR/crates/diem-crypto/src/unit_tests/multi_ed25519_test.rs: `test_failed_public_key_serialization(multi_key_32_bytes, WrongLengthError);`
$DIR/crates/diem-crypto/src/unit_tests/multi_ed25519_test.rs: `test_failed_public_key_serialization(multi_key_34_bytes, WrongLengthError);`
$DIR/crates/diem-crypto/src/unit_tests/multi_ed25519_test.rs: `test_failed_public_key_serialization(multi_key_33_zero_bytes, ValidationError);`
$DIR/crates/diem-crypto/src/unit_tests/multi_ed25519_test.rs: `test_successful_signature_serialization(&priv_keys_3, 1);`
$DIR/crates/diem-crypto/src/unit_tests/multi_ed25519_test.rs: `test_successful_signature_serialization(&priv_keys_3, 2);`
$DIR/crates/diem-crypto/src/unit_tests/multi_ed25519_test.rs: `test_successful_signature_serialization(&priv_keys_3, 3);`
$DIR/crates/diem-crypto/src/unit_tests/multi_ed25519_test.rs: `test_successful_signature_serialization(&priv_keys_32, 1);`
$DIR/crates/diem-crypto/src/unit_tests/multi_ed25519_test.rs: `test_successful_signature_serialization(&priv_keys_32, 32);`
$DIR/crates/diem-crypto/src/unit_tests/multi_ed25519_test.rs: `pub_keys_10_reversed.reverse();`
$DIR/crates/diem-crypto/src/unit_tests/multi_ed25519_test.rs: `.map(|x| x.public_key())`
$DIR/crates/diem-crypto/src/unit_tests/multi_ed25519_test.rs: `.public_key()`
$DIR/crates/diem-crypto/src/unit_tests/multi_ed25519_test.rs: `.collect()`
$DIR/crates/diem-crypto/src/unit_tests/multi_ed25519_test.rs: `.map(|x| x.public_key())`
$DIR/crates/diem-crypto/src/unit_tests/multi_ed25519_test.rs: `.public_key()`
$DIR/crates/diem-crypto/src/unit_tests/multi_ed25519_test.rs: `.collect()`
$DIR/crates/diem-crypto/src/unit_tests/multi_ed25519_test.rs: `.map(|x| x.public_key())`
$DIR/crates/diem-crypto/src/unit_tests/multi_ed25519_test.rs: `.public_key()`
$DIR/crates/diem-crypto/src/unit_tests/multi_ed25519_test.rs: `.collect()`
$DIR/crates/diem-crypto/src/unit_tests/multi_ed25519_test.rs: `.map(|x| x.public_key())`
$DIR/crates/diem-crypto/src/unit_tests/multi_ed25519_test.rs: `.public_key()`
$DIR/crates/diem-crypto/src/unit_tests/multi_ed25519_test.rs: `.collect()`
$DIR/crates/diem-crypto/src/unit_tests/multi_ed25519_test.rs: `.map(|x| x.public_key())`
$DIR/crates/diem-crypto/src/unit_tests/multi_ed25519_test.rs: `.public_key()`
$DIR/crates/diem-crypto/src/unit_tests/multi_ed25519_test.rs: `.collect()`
$DIR/crates/diem-crypto/src/unit_tests/multi_ed25519_test.rs: `.public_keys()`
$DIR/crates/diem-crypto/src/unit_tests/multi_ed25519_test.rs: `.sign(message())`
$DIR/crates/diem-crypto/src/unit_tests/multi_ed25519_test.rs: `.collect()`
$DIR/crates/diem-crypto/src/unit_tests/multi_ed25519_test.rs: `.into_iter()`
$DIR/crates/diem-crypto/src/unit_tests/multi_ed25519_test.rs: `.zip(indices.into_iter())`
$DIR/crates/diem-crypto/src/unit_tests/multi_ed25519_test.rs: `.into_iter()`
$DIR/crates/diem-crypto/src/unit_tests/multi_ed25519_test.rs: `.collect()`
$DIR/crates/diem-crypto/src/unit_tests/multi_ed25519_test.rs: `.collect()`
$DIR/crates/diem-crypto/src/unit_tests/multi_ed25519_test.rs: `.into_iter()`
$DIR/crates/diem-crypto/src/unit_tests/multi_ed25519_test.rs: `.zip(indices.into_iter())`
$DIR/crates/diem-crypto/src/unit_tests/multi_ed25519_test.rs: `.into_iter()`
$DIR/crates/diem-crypto/src/unit_tests/multi_ed25519_test.rs: `.collect()`
$DIR/crates/diem-crypto/src/unit_tests/multi_ed25519_test.rs: `.into_iter()`
$DIR/crates/diem-crypto/src/unit_tests/multi_ed25519_test.rs: `.zip(indices_with_duplicate.into_iter())`
$DIR/crates/diem-crypto/src/unit_tests/multi_ed25519_test.rs: `.into_iter()`
$DIR/crates/diem-crypto/src/unit_tests/multi_ed25519_test.rs: `.collect()`
$DIR/crates/diem-crypto/src/unit_tests/multi_ed25519_test.rs: `.into_iter()`
$DIR/crates/diem-crypto/src/unit_tests/multi_ed25519_test.rs: `.zip(indices_with_out_of_range.into_iter())`
$DIR/crates/diem-crypto/src/unit_tests/multi_ed25519_test.rs: `.into_iter()`
$DIR/crates/diem-crypto/src/unit_tests/multi_ed25519_test.rs: `.collect()`
$DIR/crates/diem-crypto/src/unit_tests/multi_ed25519_test.rs: `.map(|x| x.public_key())`
$DIR/crates/diem-crypto/src/unit_tests/multi_ed25519_test.rs: `.public_key()`
$DIR/crates/diem-crypto/src/unit_tests/multi_ed25519_test.rs: `.collect()`
$DIR/crates/diem-crypto/src/unit_tests/multi_ed25519_test.rs: `.sign(message())`
$DIR/crates/diem-crypto/src/unit_tests/multi_ed25519_test.rs: `.reverse()`
$DIR/crates/diem-crypto/src/unit_tests/multi_ed25519_test.rs: `.sign(message())`
$DIR/crates/diem-crypto/src/unit_tests/multi_ed25519_test.rs: `.sign(message())`
$DIR/crates/diem-crypto/src/unit_tests/multi_ed25519_test.rs: `.verify(message(), &multi_public_key_1of3)`
$DIR/crates/diem-crypto/src/unit_tests/multi_ed25519_test.rs: `.sign(message())`
$DIR/crates/diem-crypto/src/unit_tests/multi_ed25519_test.rs: `.verify(message(), &multi_public_key_1of3)`
$DIR/crates/diem-crypto/src/unit_tests/multi_ed25519_test.rs: `.sign(message())`
$DIR/crates/diem-crypto/src/unit_tests/multi_ed25519_test.rs: `.verify(message(), &multi_public_key_1of3)`
$DIR/crates/diem-crypto/src/unit_tests/multi_ed25519_test.rs: `.sign(message())`
$DIR/crates/diem-crypto/src/unit_tests/noise_test.rs: `message_sent.push(i);`
$DIR/crates/diem-crypto/src/unit_tests/noise_test.rs: `message.extend_from_slice(&auth_tag);`
$DIR/crates/diem-crypto/src/unit_tests/noise_test.rs: `message.extend_from_slice(&auth_tag);`
$DIR/crates/diem-crypto/src/unit_tests/noise_test.rs: `dest.copy_from_slice(&self.ephemeral);`
$DIR/crates/diem-crypto/src/unit_tests/noise_test.rs: `test_vectors_path.push("test_vectors");`
$DIR/crates/diem-crypto/src/unit_tests/noise_test.rs: `test_vectors_path.push("noise_cacophony.txt");`
$DIR/crates/diem-crypto/src/unit_tests/noise_test.rs: `message.extend_from_slice(&auth_tag);`
$DIR/crates/diem-crypto/src/unit_tests/noise_test.rs: `message.extend_from_slice(&auth_tag);`
$DIR/crates/diem-crypto/src/unit_tests/noise_test.rs: `client_turn = !client_turn;`
$DIR/crates/diem-crypto/src/unit_tests/noise_test.rs: `message.extend_from_slice(&auth_tag);`
$DIR/crates/diem-crypto/src/unit_tests/noise_test.rs: `.public_key()`
$DIR/crates/diem-crypto/src/unit_tests/noise_test.rs: `.public_key()`
$DIR/crates/diem-crypto/src/unit_tests/noise_test.rs: `.initiate_connection(
                &mut rng,
                prologue,
                responder_public,
                Some(payload1),
                &mut first_message,
            )`
$DIR/crates/diem-crypto/src/unit_tests/noise_test.rs: `.respond_to_client_and_finalize(
                    &mut rng,
                    prologue,
                    &first_message,
                    Some(payload2),
                    &mut second_message,
                )`
$DIR/crates/diem-crypto/src/unit_tests/noise_test.rs: `.get_remote_static()`
$DIR/crates/diem-crypto/src/unit_tests/noise_test.rs: `.parse_client_init_message(prologue, &first_message)`
$DIR/crates/diem-crypto/src/unit_tests/noise_test.rs: `.respond_to_client(
                    &mut rng,
                    handshake_state,
                    Some(payload2),
                    &mut second_message,
                )`
$DIR/crates/diem-crypto/src/unit_tests/noise_test.rs: `.finalize_connection(initiator_state, &second_message)`
$DIR/crates/diem-crypto/src/unit_tests/noise_test.rs: `.push(i)`
$DIR/crates/diem-crypto/src/unit_tests/noise_test.rs: `.write_message_in_place(&mut message)`
$DIR/crates/diem-crypto/src/unit_tests/noise_test.rs: `.extend_from_slice(&auth_tag)`
$DIR/crates/diem-crypto/src/unit_tests/noise_test.rs: `.read_message_in_place(&mut message)`
$DIR/crates/diem-crypto/src/unit_tests/noise_test.rs: `.write_message_in_place(&mut message)`
$DIR/crates/diem-crypto/src/unit_tests/noise_test.rs: `.extend_from_slice(&auth_tag)`
$DIR/crates/diem-crypto/src/unit_tests/noise_test.rs: `.read_message_in_place(&mut message)`
$DIR/crates/diem-crypto/src/unit_tests/noise_test.rs: `.copy_from_slice(&self.ephemeral)`
$DIR/crates/diem-crypto/src/unit_tests/noise_test.rs: `.push("test_vectors")`
$DIR/crates/diem-crypto/src/unit_tests/noise_test.rs: `.push("noise_cacophony.txt")`
$DIR/crates/diem-crypto/src/unit_tests/noise_test.rs: `.to_str()`
$DIR/crates/diem-crypto/src/unit_tests/noise_test.rs: `.find(|vector| vector.protocol_name == "Noise_IK_25519_AESGCM_SHA256")`
$DIR/crates/diem-crypto/src/unit_tests/noise_test.rs: `.public_key()`
$DIR/crates/diem-crypto/src/unit_tests/noise_test.rs: `.public_key()`
$DIR/crates/diem-crypto/src/unit_tests/noise_test.rs: `.next()`
$DIR/crates/diem-crypto/src/unit_tests/noise_test.rs: `.initiate_connection(
                &mut rng,
                &prologue,
                responder_public,
                Some(&payload1),
                &mut first_message,
            )`
$DIR/crates/diem-crypto/src/unit_tests/noise_test.rs: `.next()`
$DIR/crates/diem-crypto/src/unit_tests/noise_test.rs: `.respond_to_client_and_finalize(
                    &mut rng,
                    &prologue,
                    &first_message,
                    Some(&payload2),
                    &mut second_message,
                )`
$DIR/crates/diem-crypto/src/unit_tests/noise_test.rs: `.parse_client_init_message(&prologue, &first_message)`
$DIR/crates/diem-crypto/src/unit_tests/noise_test.rs: `.respond_to_client(
                    &mut rng,
                    handshake_state,
                    Some(&payload2),
                    &mut second_message,
                )`
$DIR/crates/diem-crypto/src/unit_tests/noise_test.rs: `.get_remote_static()`
$DIR/crates/diem-crypto/src/unit_tests/noise_test.rs: `.finalize_connection(initiator_state, &second_message)`
$DIR/crates/diem-crypto/src/unit_tests/noise_test.rs: `.write_message_in_place(&mut message)`
$DIR/crates/diem-crypto/src/unit_tests/noise_test.rs: `.extend_from_slice(&auth_tag)`
$DIR/crates/diem-crypto/src/unit_tests/noise_test.rs: `.read_message_in_place(&mut message)`
$DIR/crates/diem-crypto/src/unit_tests/noise_test.rs: `.write_message_in_place(&mut message)`
$DIR/crates/diem-crypto/src/unit_tests/noise_test.rs: `.extend_from_slice(&auth_tag)`
$DIR/crates/diem-crypto/src/unit_tests/noise_test.rs: `.read_message_in_place(&mut message)`
$DIR/crates/diem-crypto/src/unit_tests/noise_test.rs: `.public_key()`
$DIR/crates/diem-crypto/src/unit_tests/noise_test.rs: `.initiate_connection(
            &mut rng,
            b"",
            responder_public,
            Some(payload),
            &mut first_message_bad,
        )`
$DIR/crates/diem-crypto/src/unit_tests/noise_test.rs: `.initiate_connection(
            &mut rng,
            b"",
            responder_public,
            Some(&payload_too_large),
            &mut large_buffer,
        )`
$DIR/crates/diem-crypto/src/unit_tests/noise_test.rs: `.initiate_connection(
                &mut rng,
                b"",
                responder_public,
                Some(payload),
                &mut first_message_good,
            )`
$DIR/crates/diem-crypto/src/unit_tests/noise_test.rs: `.respond_to_client_and_finalize(
                &mut rng,
                b"",
                &first_message_good[..first_message_good.len() - 1],
                Some(payload),
                &mut second_message_small,
            )`
$DIR/crates/diem-crypto/src/unit_tests/noise_test.rs: `.len()`
$DIR/crates/diem-crypto/src/unit_tests/noise_test.rs: `.respond_to_client_and_finalize(
                &mut rng,
                b"",
                &first_message_good,
                Some(payload),
                &mut second_message_large,
            )`
$DIR/crates/diem-crypto/src/unit_tests/noise_test.rs: `.respond_to_client_and_finalize(
                &mut rng,
                b"incorrect prologue",
                &first_message_good[..first_message_good.len() - 1],
                Some(payload),
                &mut second_message_large,
            )`
$DIR/crates/diem-crypto/src/unit_tests/noise_test.rs: `.len()`
$DIR/crates/diem-crypto/src/unit_tests/noise_test.rs: `.respond_to_client_and_finalize(
                &mut rng,
                b"",
                &first_message_good[..first_message_good.len() - 1],
                Some(&payload_too_large),
                &mut large_buffer,
            )`
$DIR/crates/diem-crypto/src/unit_tests/noise_test.rs: `.len()`
$DIR/crates/diem-crypto/src/unit_tests/noise_test.rs: `.respond_to_client_and_finalize(
                    &mut rng,
                    b"",
                    &first_message_good[..first_message_good.len() - 1],
                    Some(payload),
                    &mut second_message_large,
                )`
$DIR/crates/diem-crypto/src/unit_tests/noise_test.rs: `.len()`
$DIR/crates/diem-crypto/src/unit_tests/noise_test.rs: `.parse_client_init_message(b"", &first_message_good)`
$DIR/crates/diem-crypto/src/unit_tests/noise_test.rs: `.parse_client_init_message(
                b"",
                &first_message_good[..first_message_good.len() - 2],
            )`
$DIR/crates/diem-crypto/src/unit_tests/noise_test.rs: `.len()`
$DIR/crates/diem-crypto/src/unit_tests/noise_test.rs: `.parse_client_init_message(
                b"incorrect prologue",
                &first_message_good[..first_message_good.len() - 1],
            )`
$DIR/crates/diem-crypto/src/unit_tests/noise_test.rs: `.len()`
$DIR/crates/diem-crypto/src/unit_tests/noise_test.rs: `.parse_client_init_message(b"", &first_message_good[..first_message_good.len() - 1])`
$DIR/crates/diem-crypto/src/unit_tests/noise_test.rs: `.len()`
$DIR/crates/diem-crypto/src/unit_tests/noise_test.rs: `.respond_to_client(
                &mut rng,
                handshake_state.clone(),
                Some(payload),
                &mut second_message_small,
            )`
$DIR/crates/diem-crypto/src/unit_tests/noise_test.rs: `.respond_to_client(
                &mut rng,
                handshake_state.clone(),
                Some(&payload_too_large),
                &mut large_buffer,
            )`
$DIR/crates/diem-crypto/src/unit_tests/noise_test.rs: `.respond_to_client(
                    &mut rng,
                    handshake_state,
                    Some(payload),
                    &mut second_message_large,
                )`
$DIR/crates/diem-crypto/src/unit_tests/noise_test.rs: `.finalize_connection(initiator_state.clone(), &second_message_large)`
$DIR/crates/diem-crypto/src/unit_tests/noise_test.rs: `.finalize_connection(
            initiator_state.clone(),
            &second_message_large[..second_message_large.len() - 2],
        )`
$DIR/crates/diem-crypto/src/unit_tests/noise_test.rs: `.len()`
$DIR/crates/diem-crypto/src/unit_tests/noise_test.rs: `.finalize_connection(
                initiator_state.clone(),
                &second_message_large[..second_message_large.len() - 1],
            )`
$DIR/crates/diem-crypto/src/unit_tests/noise_test.rs: `.len()`
$DIR/crates/diem-crypto/src/unit_tests/noise_test.rs: `.write_message_in_place(&mut message)`
$DIR/crates/diem-crypto/src/unit_tests/noise_test.rs: `.read_message_in_place(&mut message)`
$DIR/crates/diem-crypto/src/unit_tests/noise_test.rs: `.extend_from_slice(&auth_tag)`
$DIR/crates/diem-crypto/src/unit_tests/noise_test.rs: `.read_message_in_place(&mut message)`
$DIR/crates/diem-documentation-tool/tests/update.rs: `tracer.trace_type::<MyEnum>(&samples).unwrap();`
$DIR/crates/diem-documentation-tool/tests/update.rs: `.trace_type::<MyEnum>(&samples)`
$DIR/crates/diem-documentation-tool/tests/update.rs: `.registry()`
$DIR/crates/diem-faucet/src/main.rs: `.method("GET")`
$DIR/crates/diem-faucet/src/main.rs: `.path("/-/healthy")`
$DIR/crates/diem-faucet/src/main.rs: `.reply(&filter)`
$DIR/crates/diem-faucet/src/main.rs: `.enumerate()`
$DIR/crates/diem-faucet/src/main.rs: `.method("POST")`
$DIR/crates/diem-faucet/src/main.rs: `.path(
                    format!(
                        "{}?auth_key={}&amount={}&currency_code=XDX",
                        path, auth_key, amount
                    )
                    .as_str(),
                )`
$DIR/crates/diem-faucet/src/main.rs: `.reply(&filter)`
$DIR/crates/diem-faucet/src/main.rs: `.read()`
$DIR/crates/diem-faucet/src/main.rs: `.get(&addr)`
$DIR/crates/diem-faucet/src/main.rs: `.method("POST")`
$DIR/crates/diem-faucet/src/main.rs: `.path(
                format!(
                    "/mint?auth_key={}&amount={}&trade_id={}&currency_code=XDX&return_txns=true",
                    auth_key, amount, trade_id
                )
                .as_str(),
            )`
$DIR/crates/diem-faucet/src/main.rs: `.reply(&filter)`
$DIR/crates/diem-faucet/src/main.rs: `.body()`
$DIR/crates/diem-faucet/src/main.rs: `.payload()`
$DIR/crates/diem-faucet/src/main.rs: `.read()`
$DIR/crates/diem-faucet/src/main.rs: `.get(&addr)`
$DIR/crates/diem-faucet/src/main.rs: `.method("POST")`
$DIR/crates/diem-faucet/src/main.rs: `.path(
                format!(
                    "/mint?auth_key={}&amount={}&currency_code=XDX&return_txns=true&is_designated_dealer=true",
                    auth_key, amount
                )
                    .as_str(),
            )`
$DIR/crates/diem-faucet/src/main.rs: `.reply(&filter)`
$DIR/crates/diem-faucet/src/main.rs: `.body()`
$DIR/crates/diem-faucet/src/main.rs: `.read()`
$DIR/crates/diem-faucet/src/main.rs: `.get(&addr)`
$DIR/crates/diem-faucet/src/main.rs: `.method("POST")`
$DIR/crates/diem-faucet/src/main.rs: `.path(
                format!(
                    "/mint?auth_key={}&amount=1000000&currency_code=XDX",
                    auth_key
                )
                .as_str(),
            )`
$DIR/crates/diem-faucet/src/main.rs: `.reply(&filter)`
$DIR/crates/diem-faucet/src/main.rs: `.method("POST")`
$DIR/crates/diem-faucet/src/main.rs: `.path(
                format!(
                    "/mint?auth_key={}&amount=1000000&currency_code=XDX",
                    auth_key
                )
                .as_str(),
            )`
$DIR/crates/diem-faucet/src/main.rs: `.reply(&filter)`
$DIR/crates/diem-faucet/src/main.rs: `.method("POST")`
$DIR/crates/diem-faucet/src/main.rs: `.path(
                    format!(
                        "/mint?auth_key={}&vasp_domain={}&is_remove_domain={}&amount=1&currency_code=XDX",
                        auth_key, "diem", false,
                    )
                    .as_str(),
                )`
$DIR/crates/diem-faucet/src/main.rs: `.reply(&filter)`
$DIR/crates/diem-faucet/src/main.rs: `.read()`
$DIR/crates/diem-faucet/src/main.rs: `.get(&addr)`
$DIR/crates/diem-faucet/src/main.rs: `.method("POST")`
$DIR/crates/diem-faucet/src/main.rs: `.path(
                    format!(
                        "/mint?auth_key={}&vasp_domain={}&is_remove_domain={}&amount=1&currency_code=XDX",
                        auth_key, vasp_domain_to_remove, true,
                    )
                        .as_str(),
                )`
$DIR/crates/diem-faucet/src/main.rs: `.reply(&filter)`
$DIR/crates/diem-faucet/src/main.rs: `.read()`
$DIR/crates/diem-faucet/src/main.rs: `.get(&addr)`
$DIR/crates/diem-infallible/src/mutex.rs: `*b = 8;`
$DIR/crates/diem-infallible/src/mutex.rs: `*b = 9;`
$DIR/crates/diem-infallible/src/mutex.rs: `.lock()`
$DIR/crates/diem-infallible/src/mutex.rs: `.lock()`
$DIR/crates/diem-infallible/src/mutex.rs: `.join()`
$DIR/crates/diem-infallible/src/mutex.rs: `.join()`
$DIR/crates/diem-infallible/src/mutex.rs: `.lock()`
$DIR/crates/diem-infallible/src/rwlock.rs: `*b = 8;`
$DIR/crates/diem-infallible/src/rwlock.rs: `*b = 9;`
$DIR/crates/diem-infallible/src/rwlock.rs: `.write()`
$DIR/crates/diem-infallible/src/rwlock.rs: `.write()`
$DIR/crates/diem-infallible/src/rwlock.rs: `.join()`
$DIR/crates/diem-infallible/src/rwlock.rs: `.join()`
$DIR/crates/diem-infallible/src/rwlock.rs: `.read()`
$DIR/crates/diem-logger/src/diem_logger.rs: `handler.join().unwrap();`
$DIR/crates/diem-logger/src/diem_logger.rs: `.recv()`
$DIR/crates/diem-logger/src/diem_logger.rs: `.recv()`
$DIR/crates/diem-logger/src/diem_logger.rs: `.recv()`
$DIR/crates/diem-logger/src/diem_logger.rs: `.name("named thread".into())`
$DIR/crates/diem-logger/src/diem_logger.rs: `.into()`
$DIR/crates/diem-logger/src/diem_logger.rs: `.spawn(|| info!("thread"))`
$DIR/crates/diem-logger/src/diem_logger.rs: `.join()`
$DIR/crates/diem-logger/src/diem_logger.rs: `.recv()`
$DIR/crates/diem-logger/src/filter.rs: `builder.parse("crate1::mod1=error,crate1::mod2,crate2=debug");`
$DIR/crates/diem-logger/src/filter.rs: `builder.parse("crate1::mod1=warn=info,crate2=debug");`
$DIR/crates/diem-logger/src/filter.rs: `builder.parse("crate1::mod1=noNumber,crate2=debug");`
$DIR/crates/diem-logger/src/filter.rs: `builder.parse("crate1::mod1=wrong,crate2=warn");`
$DIR/crates/diem-logger/src/filter.rs: `builder.parse("crate1::mod1=wrong,crate2=");`
$DIR/crates/diem-logger/src/filter.rs: `builder.parse("warn,crate2=debug");`
$DIR/crates/diem-logger/src/filter.rs: `.filter_level(LevelFilter::Info)`
$DIR/crates/diem-logger/src/filter.rs: `.build()`
$DIR/crates/diem-logger/src/filter.rs: `.filter(Some("crate2"), LevelFilter::Info)`
$DIR/crates/diem-logger/src/filter.rs: `.filter(Some("crate2::mod"), LevelFilter::Debug)`
$DIR/crates/diem-logger/src/filter.rs: `.filter(Some("crate1::mod1"), LevelFilter::Warn)`
$DIR/crates/diem-logger/src/filter.rs: `.build()`
$DIR/crates/diem-logger/src/filter.rs: `.parse("info,crate1::mod1=warn")`
$DIR/crates/diem-logger/src/filter.rs: `.build()`
$DIR/crates/diem-logger/src/filter.rs: `.filter(Some("crate2"), LevelFilter::Info)`
$DIR/crates/diem-logger/src/filter.rs: `.filter(Some("crate1::mod1"), LevelFilter::Warn)`
$DIR/crates/diem-logger/src/filter.rs: `.build()`
$DIR/crates/diem-logger/src/filter.rs: `.filter(Some("crate2"), LevelFilter::Info)`
$DIR/crates/diem-logger/src/filter.rs: `.filter(Some("crate1::mod1"), LevelFilter::Warn)`
$DIR/crates/diem-logger/src/filter.rs: `.build()`
$DIR/crates/diem-logger/src/filter.rs: `.filter(Some("crate2"), LevelFilter::Info)`
$DIR/crates/diem-logger/src/filter.rs: `.filter(Some("crate1::mod1"), LevelFilter::Warn)`
$DIR/crates/diem-logger/src/filter.rs: `.build()`
$DIR/crates/diem-logger/src/filter.rs: `.filter(Some("crate2"), LevelFilter::Info)`
$DIR/crates/diem-logger/src/filter.rs: `.filter(Some("crate2::mod"), LevelFilter::Debug)`
$DIR/crates/diem-logger/src/filter.rs: `.filter(Some("crate1::mod1"), LevelFilter::Warn)`
$DIR/crates/diem-logger/src/filter.rs: `.build()`
$DIR/crates/diem-logger/src/filter.rs: `.filter(None, LevelFilter::Info)`
$DIR/crates/diem-logger/src/filter.rs: `.filter(Some("crate1::mod1"), LevelFilter::Warn)`
$DIR/crates/diem-logger/src/filter.rs: `.build()`
$DIR/crates/diem-logger/src/filter.rs: `.filter(None, LevelFilter::Info)`
$DIR/crates/diem-logger/src/filter.rs: `.filter(Some("crate1::mod1"), LevelFilter::Off)`
$DIR/crates/diem-logger/src/filter.rs: `.build()`
$DIR/crates/diem-logger/src/filter.rs: `.parse("crate1::mod1=error,crate1::mod2,crate2=debug")`
$DIR/crates/diem-logger/src/filter.rs: `.parse("crate1::mod1=warn=info,crate2=debug")`
$DIR/crates/diem-logger/src/filter.rs: `.parse("crate1::mod1=noNumber,crate2=debug")`
$DIR/crates/diem-logger/src/filter.rs: `.parse("crate1::mod1=wrong,crate2=warn")`
$DIR/crates/diem-logger/src/filter.rs: `.parse("crate1::mod1=wrong,crate2=")`
$DIR/crates/diem-logger/src/filter.rs: `.parse("warn,crate2=debug")`
$DIR/crates/diem-logger/src/sample.rs: `v.push(i);`
$DIR/crates/diem-logger/src/sample.rs: `v.push(i);`
$DIR/crates/diem-logger/src/sample.rs: `v.push(i);`
$DIR/crates/diem-logger/src/sample.rs: `std::thread::sleep(Duration::from_millis(500));`
$DIR/crates/diem-logger/src/sample.rs: `sample!(
                SampleRate::Frequency(2),
                println!("loooooooooooooooooooooooooong hello {}", i),
            );`
$DIR/crates/diem-logger/src/sample.rs: `sample!(SampleRate::Frequency(2), {
                println!("hello {}", i);
            });`
$DIR/crates/diem-logger/src/sample.rs: `sample!(SampleRate::Frequency(2), println!("hello {}", i));`
$DIR/crates/diem-logger/src/sample.rs: `sample! {
                SampleRate::Frequency(2),

                for j in 10..20 {
                    println!("hello {}", j);
                }
            }`
$DIR/crates/diem-logger/src/sample.rs: `handles.push(std::thread::spawn(work));`
$DIR/crates/diem-logger/src/sample.rs: `count += handle.join().unwrap();`
$DIR/crates/diem-logger/src/sample.rs: `.sample()`
$DIR/crates/diem-logger/src/sample.rs: `.push(i)`
$DIR/crates/diem-logger/src/sample.rs: `.sample()`
$DIR/crates/diem-logger/src/sample.rs: `.push(i)`
$DIR/crates/diem-logger/src/sample.rs: `.sample()`
$DIR/crates/diem-logger/src/sample.rs: `.push(i)`
$DIR/crates/diem-logger/src/sample.rs: `.push(std::thread::spawn(work))`
$DIR/crates/diem-logger/src/sample.rs: `.join()`
$DIR/crates/diem-logger/tests/derive.rs: `.required(1)`
$DIR/crates/diem-logger/tests/derive.rs: `.debug(vec![1, 2, 3])`
$DIR/crates/diem-logger/tests/derive.rs: `.debug_error(&debug_error)`
$DIR/crates/diem-logger/tests/derive.rs: `.display_error(&display_error)`
$DIR/crates/diem-logger/tests/logger.rs: `DiemLogger::builder()
        .is_async(false)
        .printer(Box::new(writer))
        .build();`
$DIR/crates/diem-logger/tests/logger.rs: `.is_async(false)`
$DIR/crates/diem-logger/tests/logger.rs: `.printer(Box::new(writer))`
$DIR/crates/diem-logger/tests/logger.rs: `.build()`
$DIR/crates/diem-logger/tests/logger.rs: `.write()`
$DIR/crates/diem-logger/tests/logger.rs: `.remove(0)`
$DIR/crates/diem-logger/tests/logger.rs: `.write()`
$DIR/crates/diem-logger/tests/logger.rs: `.remove(0)`
$DIR/crates/diem-logger/tests/logger_custom_format.rs: `DiemLogger::builder()
        .is_async(false)
        .printer(Box::new(writer))
        .custom_format(|entry| {
            use std::fmt::Write;
            let mut w = String::new();
            write!(w, "0000-00-00")?;
            write!(w, " [{}]", entry.metadata().level())?;
            if let Some(message) = entry.message() {
                write!(w, " {}", message)?;
            }
            if !entry.data().is_empty() {
                write!(w, " {}", serde_json::to_string(&entry.data()).unwrap())?;
            }
            Ok(w)
        })
        .build();`
$DIR/crates/diem-logger/tests/logger_custom_format.rs: `write!(w, "0000-00-00")?;`
$DIR/crates/diem-logger/tests/logger_custom_format.rs: `write!(w, " [{}]", entry.metadata().level())?;`
$DIR/crates/diem-logger/tests/logger_custom_format.rs: `write!(w, " {}", message)?;`
$DIR/crates/diem-logger/tests/logger_custom_format.rs: `write!(w, " {}", serde_json::to_string(&entry.data()).unwrap())?;`
$DIR/crates/diem-logger/tests/logger_custom_format.rs: `.is_async(false)`
$DIR/crates/diem-logger/tests/logger_custom_format.rs: `.printer(Box::new(writer))`
$DIR/crates/diem-logger/tests/logger_custom_format.rs: `.custom_format(|entry| {
            use std::fmt::Write;
            let mut w = String::new();
            write!(w, "0000-00-00")?;
            write!(w, " [{}]", entry.metadata().level())?;
            if let Some(message) = entry.message() {
                write!(w, " {}", message)?;
            }
            if !entry.data().is_empty() {
                write!(w, " {}", serde_json::to_string(&entry.data()).unwrap())?;
            }
            Ok(w)
        })`
$DIR/crates/diem-logger/tests/logger_custom_format.rs: `.message()`
$DIR/crates/diem-logger/tests/logger_custom_format.rs: `.data()`
$DIR/crates/diem-logger/tests/logger_custom_format.rs: `.is_empty()`
$DIR/crates/diem-logger/tests/logger_custom_format.rs: `.build()`
$DIR/crates/diem-logger/tests/logger_custom_format.rs: `.write()`
$DIR/crates/diem-logger/tests/logger_custom_format.rs: `.remove(0)`
$DIR/crates/diem-logger/tests/remote.rs: `std::env::set_var("RUST_LOG_REMOTE", "debug");`
$DIR/crates/diem-logger/tests/remote.rs: `DiemLogger::builder().address(addr).is_async(true).build();`
$DIR/crates/diem-logger/tests/remote.rs: `diem_logger::flush();`
$DIR/crates/diem-logger/tests/remote.rs: `stream.read_until(b'\n', &mut buf).unwrap();`
$DIR/crates/diem-logger/tests/remote.rs: `stream.read_until(b'\n', &mut buf).unwrap();`
$DIR/crates/diem-logger/tests/remote.rs: `.local_addr()`
$DIR/crates/diem-logger/tests/remote.rs: `.address(addr)`
$DIR/crates/diem-logger/tests/remote.rs: `.is_async(true)`
$DIR/crates/diem-logger/tests/remote.rs: `.build()`
$DIR/crates/diem-logger/tests/remote.rs: `.accept()`
$DIR/crates/diem-logger/tests/remote.rs: `.read_until(b'\n', &mut buf)`
$DIR/crates/diem-logger/tests/remote.rs: `.read_until(b'\n', &mut buf)`
$DIR/crates/diem-logger/tests/remote.rs: `.join()`
$DIR/crates/diem-logger/tests/tracing_translation_tests.rs: `DiemLogger::builder()
        .is_async(false)
        .printer(Box::new(writer))
        .build();`
$DIR/crates/diem-logger/tests/tracing_translation_tests.rs: `tracing::error!("hello world");`
$DIR/crates/diem-logger/tests/tracing_translation_tests.rs: `tracing::info!("foo {} bar", 42);`
$DIR/crates/diem-logger/tests/tracing_translation_tests.rs: `tracing::warn!(a = true, b = false);`
$DIR/crates/diem-logger/tests/tracing_translation_tests.rs: `.is_async(false)`
$DIR/crates/diem-logger/tests/tracing_translation_tests.rs: `.printer(Box::new(writer))`
$DIR/crates/diem-logger/tests/tracing_translation_tests.rs: `.build()`
$DIR/crates/diem-logger/tests/tracing_translation_tests.rs: `.write()`
$DIR/crates/diem-logger/tests/tracing_translation_tests.rs: `.pop()`
$DIR/crates/diem-logger/tests/tracing_translation_tests.rs: `.write()`
$DIR/crates/diem-logger/tests/tracing_translation_tests.rs: `.pop()`
$DIR/crates/diem-logger/tests/tracing_translation_tests.rs: `.write()`
$DIR/crates/diem-logger/tests/tracing_translation_tests.rs: `.pop()`
$DIR/crates/diem-metrics/src/json_encoder.rs: `counter.with_label_values(&["get", "302"]).inc();`
$DIR/crates/diem-metrics/src/json_encoder.rs: `counter.with_label_values(&["get", "302"]).inc();`
$DIR/crates/diem-metrics/src/json_encoder.rs: `counter.with_label_values(&["get", "404"]).inc();`
$DIR/crates/diem-metrics/src/json_encoder.rs: `counter.with_label_values(&["put", ""]).inc();`
$DIR/crates/diem-metrics/src/json_encoder.rs: `.metric()`
$DIR/crates/diem-metrics/src/json_encoder.rs: `.with_label_values(&[""])`
$DIR/crates/diem-metrics/src/json_encoder.rs: `.metric()`
$DIR/crates/diem-metrics/src/json_encoder.rs: `.with_label_values(&["hello"])`
$DIR/crates/diem-metrics/src/json_encoder.rs: `.metric()`
$DIR/crates/diem-metrics/src/json_encoder.rs: `.with_label_values(&["", ""])`
$DIR/crates/diem-metrics/src/json_encoder.rs: `.metric()`
$DIR/crates/diem-metrics/src/json_encoder.rs: `.with_label_values(&["hello", "world"])`
$DIR/crates/diem-metrics/src/json_encoder.rs: `.metric()`
$DIR/crates/diem-metrics/src/json_encoder.rs: `.with_label_values(&["get", "302"])`
$DIR/crates/diem-metrics/src/json_encoder.rs: `.inc()`
$DIR/crates/diem-metrics/src/json_encoder.rs: `.with_label_values(&["get", "302"])`
$DIR/crates/diem-metrics/src/json_encoder.rs: `.inc()`
$DIR/crates/diem-metrics/src/json_encoder.rs: `.with_label_values(&["get", "404"])`
$DIR/crates/diem-metrics/src/json_encoder.rs: `.inc()`
$DIR/crates/diem-metrics/src/json_encoder.rs: `.with_label_values(&["put", ""])`
$DIR/crates/diem-metrics/src/json_encoder.rs: `.inc()`
$DIR/crates/diem-metrics/src/json_encoder.rs: `.collect()`
$DIR/crates/diem-metrics/src/json_encoder.rs: `.encode(&metric_family, &mut data_writer)`
$DIR/crates/diem-metrics/src/unit_tests/lib_test.rs: `r.register(Box::new(counter.clone())).unwrap();`
$DIR/crates/diem-metrics/src/unit_tests/lib_test.rs: `counter.inc();`
$DIR/crates/diem-metrics/src/unit_tests/lib_test.rs: `.register(Box::new(counter.clone()))`
$DIR/crates/diem-metrics/src/unit_tests/lib_test.rs: `.inc()`
$DIR/crates/diem-metrics/src/unit_tests/lib_test.rs: `.gather()`
$DIR/crates/diem-metrics/src/unit_tests/lib_test.rs: `.get(0)`
$DIR/crates/diem-metrics/src/unit_tests/lib_test.rs: `.get_metric()`
$DIR/crates/diem-proptest-helpers/src/unit_tests/repeat_vec_tests.rs: `basic_ops_impl(RepeatVec::new());`
$DIR/crates/diem-rate-limiter/src/rate_limit.rs: `bucket.return_tokens(2);`
$DIR/crates/diem-rate-limiter/src/rate_limit.rs: `assert_acquire(&mut bucket, 2);`
$DIR/crates/diem-rate-limiter/src/rate_limit.rs: `bucket.return_tokens(bucket_size + 1);`
$DIR/crates/diem-rate-limiter/src/rate_limit.rs: `sleep(wait_time.duration_since(Instant::now()));`
$DIR/crates/diem-rate-limiter/src/rate_limit.rs: `assert_acquire(&mut bucket, bucket_size);`
$DIR/crates/diem-rate-limiter/src/rate_limit.rs: `sleep(bucket.time_of_next_refill().duration_since(Instant::now()));`
$DIR/crates/diem-rate-limiter/src/rate_limit.rs: `bucket.refill();`
$DIR/crates/diem-rate-limiter/src/rate_limit.rs: `assert_acquire(&mut bucket, num_tokens);`
$DIR/crates/diem-rate-limiter/src/rate_limit.rs: `sleep(bucket.time_of_next_refill().duration_since(Instant::now()));`
$DIR/crates/diem-rate-limiter/src/rate_limit.rs: `assert_acquire(&mut bucket, bucket_size);`
$DIR/crates/diem-rate-limiter/src/rate_limit.rs: `assert_num_keys(&rate_limiter, 0);`
$DIR/crates/diem-rate-limiter/src/rate_limit.rs: `assert_num_keys(&rate_limiter, 0);`
$DIR/crates/diem-rate-limiter/src/rate_limit.rs: `assert_num_keys(&rate_limiter, 2);`
$DIR/crates/diem-rate-limiter/src/rate_limit.rs: `.bucket(key)`
$DIR/crates/diem-rate-limiter/src/rate_limit.rs: `.lock()`
$DIR/crates/diem-rate-limiter/src/rate_limit.rs: `.return_tokens(2)`
$DIR/crates/diem-rate-limiter/src/rate_limit.rs: `.return_tokens(bucket_size + 1)`
$DIR/crates/diem-rate-limiter/src/rate_limit.rs: `.bucket(key)`
$DIR/crates/diem-rate-limiter/src/rate_limit.rs: `.lock()`
$DIR/crates/diem-rate-limiter/src/rate_limit.rs: `.acquire_all_tokens(bucket_size + 1)`
$DIR/crates/diem-rate-limiter/src/rate_limit.rs: `.acquire_all_tokens(bucket_size)`
$DIR/crates/diem-rate-limiter/src/rate_limit.rs: `.acquire_all_tokens(bucket_size)`
$DIR/crates/diem-rate-limiter/src/rate_limit.rs: `.duration_since(Instant::now())`
$DIR/crates/diem-rate-limiter/src/rate_limit.rs: `.acquire_all_tokens(bucket_size)`
$DIR/crates/diem-rate-limiter/src/rate_limit.rs: `.bucket(key)`
$DIR/crates/diem-rate-limiter/src/rate_limit.rs: `.lock()`
$DIR/crates/diem-rate-limiter/src/rate_limit.rs: `.time_of_next_refill()`
$DIR/crates/diem-rate-limiter/src/rate_limit.rs: `.duration_since(Instant::now())`
$DIR/crates/diem-rate-limiter/src/rate_limit.rs: `.refill()`
$DIR/crates/diem-rate-limiter/src/rate_limit.rs: `.time_of_next_refill()`
$DIR/crates/diem-rate-limiter/src/rate_limit.rs: `.duration_since(Instant::now())`
$DIR/crates/diem-rate-limiter/src/rate_limit.rs: `.acquire_tokens(1)`
$DIR/crates/diem-rate-limiter/src/rate_limit.rs: `.bucket("Key")`
$DIR/crates/diem-rate-limiter/src/rate_limit.rs: `.lock()`
$DIR/crates/diem-rate-limiter/src/rate_limit.rs: `.bucket(key)`
$DIR/crates/diem-rate-limiter/src/rate_limit.rs: `.bucket(key)`
$DIR/crates/diem-rate-limiter/src/rate_limit.rs: `.bucket(key_to_keep)`
$DIR/crates/diem-rate-limiter/src/rate_limit.rs: `.bucket(key_to_gc)`
$DIR/crates/diem-retrier/src/lib.rs: `.into_iter()`
$DIR/crates/diem-retrier/src/lib.rs: `.next()`
$DIR/crates/diem-retrier/src/lib.rs: `.into_iter()`
$DIR/crates/diem-retrier/src/lib.rs: `.next()`
$DIR/crates/diem-time-service/src/mock.rs: `assert_pending!(sleep.poll());`
$DIR/crates/diem-time-service/src/mock.rs: `assert_pending!(sleep.poll());`
$DIR/crates/diem-time-service/src/mock.rs: `sleep.enter(|_c, sleep| sleep.reset(ms(5)));`
$DIR/crates/diem-time-service/src/mock.rs: `assert_pending!(sleep.poll());`
$DIR/crates/diem-time-service/src/mock.rs: `sleep.enter(|_c, sleep| sleep.reset(ms(5)));`
$DIR/crates/diem-time-service/src/mock.rs: `assert_pending!(sleep.poll());`
$DIR/crates/diem-time-service/src/mock.rs: `assert_pending!(sleep.poll());`
$DIR/crates/diem-time-service/src/mock.rs: `sleep.enter(|_c, sleep| sleep.reset_until(time.now() + ms(5)));`
$DIR/crates/diem-time-service/src/mock.rs: `assert_pending!(sleep.poll());`
$DIR/crates/diem-time-service/src/mock.rs: `assert_pending!(sleep_5ms.poll());`
$DIR/crates/diem-time-service/src/mock.rs: `assert_pending!(sleep_10ms_1.poll());`
$DIR/crates/diem-time-service/src/mock.rs: `assert_pending!(sleep_10ms_2.poll());`
$DIR/crates/diem-time-service/src/mock.rs: `assert_pending!(sleep_10ms_3.poll());`
$DIR/crates/diem-time-service/src/mock.rs: `assert_pending!(sleep_15ms.poll());`
$DIR/crates/diem-time-service/src/mock.rs: `assert_pending!(sleep_20ms.poll());`
$DIR/crates/diem-time-service/src/mock.rs: `assert_ready!(sleep_5ms.poll());`
$DIR/crates/diem-time-service/src/mock.rs: `assert_ready!(sleep_10ms_1.poll());`
$DIR/crates/diem-time-service/src/mock.rs: `assert_ready!(sleep_10ms_2.poll());`
$DIR/crates/diem-time-service/src/mock.rs: `assert_ready!(sleep_10ms_3.poll());`
$DIR/crates/diem-time-service/src/mock.rs: `assert_pending!(sleep_15ms.poll());`
$DIR/crates/diem-time-service/src/mock.rs: `assert_pending!(sleep_20ms.poll());`
$DIR/crates/diem-time-service/src/mock.rs: `assert_ready!(sleep_15ms.poll());`
$DIR/crates/diem-time-service/src/mock.rs: `assert_pending!(sleep_20ms.poll());`
$DIR/crates/diem-time-service/src/mock.rs: `assert_ready_eq!(interval.poll_next(), Some(()));`
$DIR/crates/diem-time-service/src/mock.rs: `assert_ready_eq!(interval.poll_next(), Some(()));`
$DIR/crates/diem-time-service/src/mock.rs: `assert_ready_ok!(timeout.poll());`
$DIR/crates/diem-time-service/src/mock.rs: `assert_pending!(timeout.poll());`
$DIR/crates/diem-time-service/src/mock.rs: `assert_pending!(timeout.poll());`
$DIR/crates/diem-time-service/src/mock.rs: `tx.send(()).unwrap();`
$DIR/crates/diem-time-service/src/mock.rs: `assert_pending!(timeout.poll());`
$DIR/crates/diem-time-service/src/mock.rs: `assert_ready!(sleep.poll());`
$DIR/crates/diem-time-service/src/mock.rs: `assert_ready!(sleep.poll());`
$DIR/crates/diem-time-service/src/mock.rs: `assert_pending!(sleep.poll());`
$DIR/crates/diem-time-service/src/mock.rs: `assert_pending!(sleep.poll());`
$DIR/crates/diem-time-service/src/mock.rs: `assert_ready!(sleep.poll());`
$DIR/crates/diem-time-service/src/mock.rs: `time.sleep_blocking(secs(10_000));`
$DIR/crates/diem-time-service/src/mock.rs: `assert_ready!(interval.poll_next());`
$DIR/crates/diem-time-service/src/mock.rs: `assert_ready!(interval.poll_next());`
$DIR/crates/diem-time-service/src/mock.rs: `assert_ready!(interval.poll_next());`
$DIR/crates/diem-time-service/src/mock.rs: `.now()`
$DIR/crates/diem-time-service/src/mock.rs: `.now_unix_time()`
$DIR/crates/diem-time-service/src/mock.rs: `.sleep(ms(10))`
$DIR/crates/diem-time-service/src/mock.rs: `.enter(|_c, sleep| sleep.reset(ms(5)))`
$DIR/crates/diem-time-service/src/mock.rs: `.reset(ms(5))`
$DIR/crates/diem-time-service/src/mock.rs: `.enter(|_c, sleep| sleep.reset(ms(5)))`
$DIR/crates/diem-time-service/src/mock.rs: `.reset(ms(5))`
$DIR/crates/diem-time-service/src/mock.rs: `.now()`
$DIR/crates/diem-time-service/src/mock.rs: `.sleep_until(start + ms(10))`
$DIR/crates/diem-time-service/src/mock.rs: `.enter(|_c, sleep| sleep.reset_until(time.now() + ms(5)))`
$DIR/crates/diem-time-service/src/mock.rs: `.reset_until(time.now() + ms(5))`
$DIR/crates/diem-time-service/src/mock.rs: `.now()`
$DIR/crates/diem-time-service/src/mock.rs: `.sleep(ms(5))`
$DIR/crates/diem-time-service/src/mock.rs: `.sleep(ms(10))`
$DIR/crates/diem-time-service/src/mock.rs: `.sleep(ms(10))`
$DIR/crates/diem-time-service/src/mock.rs: `.sleep(ms(10))`
$DIR/crates/diem-time-service/src/mock.rs: `.sleep(ms(15))`
$DIR/crates/diem-time-service/src/mock.rs: `.sleep(ms(20))`
$DIR/crates/diem-time-service/src/mock.rs: `.interval(ms(10))`
$DIR/crates/diem-time-service/src/mock.rs: `.timeout(ms(10), async {})`
$DIR/crates/diem-time-service/src/mock.rs: `.timeout(ms(10), rx)`
$DIR/crates/diem-time-service/src/mock.rs: `.send(())`
$DIR/crates/diem-time-service/src/mock.rs: `.timeout(ms(10), rx)`
$DIR/crates/diem-time-service/src/mock.rs: `.sleep(ms(20))`
$DIR/crates/diem-time-service/src/mock.rs: `.sleep(ms(30))`
$DIR/crates/diem-time-service/src/mock.rs: `.sleep(ms(90))`
$DIR/crates/diem-time-service/src/mock.rs: `.sleep_blocking(secs(10_000))`
$DIR/crates/short-hex-str/src/lib.rs: `hex_encode(&src, &mut actual);`
$DIR/devtools/x/src/cargo/selected_package.rs: `packages.add_excludes(vec!["foo"]);`
$DIR/devtools/x/src/cargo/selected_package.rs: `packages.add_excludes(vec!["foo", "bar"]);`
$DIR/devtools/x/src/cargo/selected_package.rs: `.into_iter()`
$DIR/devtools/x/src/cargo/selected_package.rs: `.collect()`
$DIR/devtools/x/src/cargo/selected_package.rs: `.add_excludes(vec!["foo"])`
$DIR/devtools/x/src/cargo/selected_package.rs: `.into_iter()`
$DIR/devtools/x/src/cargo/selected_package.rs: `.collect()`
$DIR/devtools/x/src/cargo/selected_package.rs: `.add_excludes(vec!["foo", "bar"])`
$DIR/execution/execution-correctness/src/tests/local.rs: `suite::run_test_suite(execution_correctness(true));`
$DIR/execution/execution-correctness/src/tests/serializer.rs: `suite::run_test_suite(execution_correctness(true));`
$DIR/execution/execution-correctness/src/tests/thread.rs: `suite::run_test_suite(execution_correctness(true));`
$DIR/execution/execution-correctness/tests/binary.rs: `config.execution.service =
        ExecutionCorrectnessService::Process(RemoteExecutionService { server_address });`
$DIR/execution/execution-correctness/tests/binary.rs: `config_path.create_as_file().unwrap();`
$DIR/execution/execution-correctness/tests/binary.rs: `config.save_config(config_path.path()).unwrap();`
$DIR/execution/execution-correctness/tests/binary.rs: `command
        .arg(config_path.path())
        .stdin(std::process::Stdio::inherit())
        .stdout(std::process::Stdio::inherit())
        .stderr(std::process::Stdio::inherit());`
$DIR/execution/execution-correctness/tests/binary.rs: `child
        .kill()
        .expect("could not kill execution-correctness process");`
$DIR/execution/execution-correctness/tests/binary.rs: `child
        .wait()
        .expect("could not wait on execution-correctness process");`
$DIR/execution/execution-correctness/tests/binary.rs: `.create_as_file()`
$DIR/execution/execution-correctness/tests/binary.rs: `.save_config(config_path.path())`
$DIR/execution/execution-correctness/tests/binary.rs: `.path()`
$DIR/execution/execution-correctness/tests/binary.rs: `.arg(config_path.path())`
$DIR/execution/execution-correctness/tests/binary.rs: `.path()`
$DIR/execution/execution-correctness/tests/binary.rs: `.stdin(std::process::Stdio::inherit())`
$DIR/execution/execution-correctness/tests/binary.rs: `.stdout(std::process::Stdio::inherit())`
$DIR/execution/execution-correctness/tests/binary.rs: `.stderr(std::process::Stdio::inherit())`
$DIR/execution/execution-correctness/tests/binary.rs: `.spawn()`
$DIR/execution/execution-correctness/tests/binary.rs: `.client()`
$DIR/execution/execution-correctness/tests/binary.rs: `.reset()`
$DIR/execution/execution-correctness/tests/binary.rs: `.kill()`
$DIR/execution/execution-correctness/tests/binary.rs: `.wait()`
$DIR/execution/executor/src/executor_test.rs: `parent_block_id = execute_and_commit_block(&executor, parent_block_id, i);`
$DIR/execution/executor/src/executor_test.rs: `executor
        .commit_blocks(vec![block1_id], ledger_info.clone())
        .unwrap();`
$DIR/execution/executor/src/executor_test.rs: `responses.push(output);`
$DIR/execution/executor/src/executor_test.rs: `responses.dedup();`
$DIR/execution/executor/src/executor_test.rs: `executor
        .execute_and_commit_chunk(chunks[0].clone(), ledger_info.clone(), None)
        .unwrap();`
$DIR/execution/executor/src/executor_test.rs: `executor
        .execute_and_commit_chunk(chunks[1].clone(), ledger_info.clone(), None)
        .unwrap();`
$DIR/execution/executor/src/executor_test.rs: `executor
        .execute_and_commit_chunk(
            TransactionListWithProof::new_empty(),
            ledger_info.clone(),
            None,
        )
        .unwrap();`
$DIR/execution/executor/src/executor_test.rs: `executor
        .execute_and_commit_chunk(chunks[1].clone(), ledger_info.clone(), None)
        .unwrap();`
$DIR/execution/executor/src/executor_test.rs: `executor
        .execute_and_commit_chunk(chunks[2].clone(), ledger_info.clone(), None)
        .unwrap();`
$DIR/execution/executor/src/executor_test.rs: `executor
            .execute_and_commit_chunk(chunks[0].clone(), ledger_info.clone(), None)
            .unwrap();`
$DIR/execution/executor/src/executor_test.rs: `executor
            .execute_and_commit_chunk(chunks[1].clone(), ledger_info.clone(), None)
            .unwrap();`
$DIR/execution/executor/src/executor_test.rs: `executor.commit_blocks(vec![block_id], ledger_info).unwrap();`
$DIR/execution/executor/src/executor_test.rs: `parent_block_id = first_block_id;`
$DIR/execution/executor/src/executor_test.rs: `.committed_block_id()`
$DIR/execution/executor/src/executor_test.rs: `.execute_block((block_id, vec![txn0, txn1, txn2]), parent_block_id)`
$DIR/execution/executor/src/executor_test.rs: `.committed_block_id()`
$DIR/execution/executor/src/executor_test.rs: `.map(|i| encode_mint_transaction(gen_address(i), 100))`
$DIR/execution/executor/src/executor_test.rs: `.collect::<Vec<_>>()`
$DIR/execution/executor/src/executor_test.rs: `.execute_block((block_id, txns), parent_block_id)`
$DIR/execution/executor/src/executor_test.rs: `.root_hash()`
$DIR/execution/executor/src/executor_test.rs: `.commit_blocks(vec![block_id], ledger_info)`
$DIR/execution/executor/src/executor_test.rs: `.committed_block_id()`
$DIR/execution/executor/src/executor_test.rs: `.committed_block_id()`
$DIR/execution/executor/src/executor_test.rs: `.map(|i| encode_mint_transaction(gen_address(i), 100))`
$DIR/execution/executor/src/executor_test.rs: `.collect::<Vec<_>>()`
$DIR/execution/executor/src/executor_test.rs: `.map(|i| {
            if i % 2 == 0 {
                encode_mint_transaction(gen_address(i + 50), 100)
            } else {
                encode_transfer_transaction(gen_address(i), gen_address(i + 1), 500)
            }
        })`
$DIR/execution/executor/src/executor_test.rs: `.collect::<Vec<_>>()`
$DIR/execution/executor/src/executor_test.rs: `.execute_block((block1_id, block1_txns), parent_block_id)`
$DIR/execution/executor/src/executor_test.rs: `.execute_block((block2_id, block2_txns), block1_id)`
$DIR/execution/executor/src/executor_test.rs: `.root_hash()`
$DIR/execution/executor/src/executor_test.rs: `.commit_blocks(vec![block1_id, block2_id], ledger_info)`
$DIR/execution/executor/src/executor_test.rs: `.committed_block_id()`
$DIR/execution/executor/src/executor_test.rs: `.map(|i| encode_mint_transaction(gen_address(i), 100))`
$DIR/execution/executor/src/executor_test.rs: `.collect::<Vec<_>>()`
$DIR/execution/executor/src/executor_test.rs: `.execute_block((block1_id, block1_txns), parent_block_id)`
$DIR/execution/executor/src/executor_test.rs: `.root_hash()`
$DIR/execution/executor/src/executor_test.rs: `.commit_blocks(vec![block1_id], ledger_info.clone())`
$DIR/execution/executor/src/executor_test.rs: `.commit_blocks(vec![block1_id], ledger_info)`
$DIR/execution/executor/src/executor_test.rs: `.committed_block_id()`
$DIR/execution/executor/src/executor_test.rs: `.map(|i| encode_mint_transaction(gen_address(i), 100))`
$DIR/execution/executor/src/executor_test.rs: `.collect()`
$DIR/execution/executor/src/executor_test.rs: `.execute_block((block_id, txns.clone()), parent_block_id)`
$DIR/execution/executor/src/executor_test.rs: `.push(output)`
$DIR/execution/executor/src/executor_test.rs: `.dedup()`
$DIR/execution/executor/src/executor_test.rs: `.execute_and_commit_chunk(chunks[0].clone(), ledger_info.clone(), None)`
$DIR/execution/executor/src/executor_test.rs: `.reader.get_latest_ledger_info()`
$DIR/execution/executor/src/executor_test.rs: `.execute_and_commit_chunk(chunks[1].clone(), ledger_info.clone(), None)`
$DIR/execution/executor/src/executor_test.rs: `.reader.get_latest_ledger_info()`
$DIR/execution/executor/src/executor_test.rs: `.execute_and_commit_chunk(
            TransactionListWithProof::new_empty(),
            ledger_info.clone(),
            None,
        )`
$DIR/execution/executor/src/executor_test.rs: `.reader.get_latest_ledger_info()`
$DIR/execution/executor/src/executor_test.rs: `.execute_and_commit_chunk(chunks[1].clone(), ledger_info.clone(), None)`
$DIR/execution/executor/src/executor_test.rs: `.reader.get_latest_ledger_info()`
$DIR/execution/executor/src/executor_test.rs: `.execute_and_commit_chunk(chunks[2].clone(), ledger_info.clone(), None)`
$DIR/execution/executor/src/executor_test.rs: `.reader.get_latest_ledger_info()`
$DIR/execution/executor/src/executor_test.rs: `.execute_and_commit_chunk(chunks[0].clone(), ledger_info.clone(), None)`
$DIR/execution/executor/src/executor_test.rs: `.reader.get_latest_ledger_info()`
$DIR/execution/executor/src/executor_test.rs: `.execute_and_commit_chunk(chunks[1].clone(), ledger_info.clone(), None)`
$DIR/execution/executor/src/executor_test.rs: `.reader.get_latest_ledger_info()`
$DIR/execution/executor/src/executor_test.rs: `.committed_block_id()`
$DIR/execution/executor/src/executor_test.rs: `.map(|_| encode_mint_transaction(gen_address(rng.gen::<u64>()), 100))`
$DIR/execution/executor/src/executor_test.rs: `.gen::<u64>()`
$DIR/execution/executor/src/executor_test.rs: `.collect::<Vec<_>>()`
$DIR/execution/executor/src/executor_test.rs: `.execute_block((block_id, txns), parent_block_id)`
$DIR/execution/executor/src/executor_test.rs: `.root_hash()`
$DIR/execution/executor/src/executor_test.rs: `.commit_blocks(vec![block_id], ledger_info)`
$DIR/execution/executor/src/executor_test.rs: `.committed_block_id()`
$DIR/execution/executor/src/executor_test.rs: `.execute_block((first_block_id, vec![first_txn]), parent_block_id)`
$DIR/execution/executor/src/executor_test.rs: `.execute_block((second_block.id, second_block.txns), parent_block_id)`
$DIR/execution/executor/src/mock_vm/mock_vm_test.rs: `txns.push(encode_mint_transaction(gen_address(i), amount));`
$DIR/execution/executor/src/mock_vm/mock_vm_test.rs: `txns.push(encode_mint_transaction(sender, amount));`
$DIR/execution/executor/src/mock_vm/mock_vm_test.rs: `output_iter.next();`
$DIR/execution/executor/src/mock_vm/mock_vm_test.rs: `output_iter.next();`
$DIR/execution/executor/src/mock_vm/mock_vm_test.rs: `.push(encode_mint_transaction(gen_address(i), amount))`
$DIR/execution/executor/src/mock_vm/mock_vm_test.rs: `.as_signed_user_txn()`
$DIR/execution/executor/src/mock_vm/mock_vm_test.rs: `.sender()`
$DIR/execution/executor/src/mock_vm/mock_vm_test.rs: `.push(encode_mint_transaction(sender, amount))`
$DIR/execution/executor/src/mock_vm/mock_vm_test.rs: `.enumerate()`
$DIR/execution/executor/src/mock_vm/mock_vm_test.rs: `.next()`
$DIR/execution/executor/src/mock_vm/mock_vm_test.rs: `.next()`
$DIR/execution/executor/src/speculation_cache/test.rs: `cache.prune(&gen_ledger_info(id(9), false)).unwrap();`
$DIR/execution/executor/src/speculation_cache/test.rs: `num_blocks = cache.block_map.lock().len();`
$DIR/execution/executor/src/speculation_cache/test.rs: `cache.prune(&gen_ledger_info(id(1), true)).unwrap();`
$DIR/execution/executor/src/speculation_cache/test.rs: `.block_map.lock()`
$DIR/execution/executor/src/speculation_cache/test.rs: `.len()`
$DIR/execution/executor/src/speculation_cache/test.rs: `.prune(&gen_ledger_info(id(9), false))`
$DIR/execution/executor/src/speculation_cache/test.rs: `.block_map.lock()`
$DIR/execution/executor/src/speculation_cache/test.rs: `.len()`
$DIR/execution/executor/src/speculation_cache/test.rs: `.prune(&gen_ledger_info(id(1), true))`
$DIR/execution/executor/src/speculation_cache/test.rs: `.block_map.lock()`
$DIR/execution/executor/src/speculation_cache/test.rs: `.len()`
$DIR/execution/executor/src/speculation_cache/test.rs: `.add_block(id(1), gen_block(id(7)))`
$DIR/execution/executor/src/speculation_cache/test.rs: `.add_block(id(1), gen_block(id(7)))`
$DIR/execution/executor/tests/db_bootstrapper_test.rs: `maybe_bootstrap::<DiemVM>(&db_rw, &genesis_txn, waypoint).unwrap();`
$DIR/execution/executor/tests/db_bootstrapper_test.rs: `execute_and_commit(vec![txn1, txn2, txn3, txn4], &db_rw, &signer);`
$DIR/execution/executor/tests/db_bootstrapper_test.rs: `restore_state_to_db(&db, accounts_backup, proof, root_hash, PRE_GENESIS_VERSION);`
$DIR/execution/executor/tests/db_bootstrapper_test.rs: `execute_and_commit(vec![txn1, txn2, txn3, txn4], &db, &signer);`
$DIR/execution/executor/tests/db_bootstrapper_test.rs: `execute_and_commit(vec![txn], &db, &signer);`
$DIR/execution/executor/tests/db_bootstrapper_test.rs: `.reader
        .get_startup_info()`
$DIR/execution/executor/tests/db_bootstrapper_test.rs: `.reader
        .get_accumulator_summary(waypoint.version())`
$DIR/execution/executor/tests/db_bootstrapper_test.rs: `.version()`
$DIR/execution/executor/tests/db_bootstrapper_test.rs: `.reader
        .get_state_proof(trusted_state.version())`
$DIR/execution/executor/tests/db_bootstrapper_test.rs: `.version()`
$DIR/execution/executor/tests/db_bootstrapper_test.rs: `.verify_and_ratchet(&state_proof, Some(&initial_accumulator))`
$DIR/execution/executor/tests/db_bootstrapper_test.rs: `.freeze()`
$DIR/execution/executor/tests/db_bootstrapper_test.rs: `.reader
        .get_accumulator_summary(trusted_state.version())`
$DIR/execution/executor/tests/db_bootstrapper_test.rs: `.version()`
$DIR/execution/executor/tests/db_bootstrapper_test.rs: `.reader
        .get_state_proof(trusted_state.version())`
$DIR/execution/executor/tests/db_bootstrapper_test.rs: `.version()`
$DIR/execution/executor/tests/db_bootstrapper_test.rs: `.verify_and_ratchet(&state_proof, Some(&initial_accumulator))`
$DIR/execution/executor/tests/db_bootstrapper_test.rs: `.reader
        .get_accumulator_summary(trusted_state.version())`
$DIR/execution/executor/tests/db_bootstrapper_test.rs: `.version()`
$DIR/execution/executor/tests/db_bootstrapper_test.rs: `.reader.get_state_proof(trusted_state.version())`
$DIR/execution/executor/tests/db_bootstrapper_test.rs: `.version()`
$DIR/execution/executor/tests/db_bootstrapper_test.rs: `.verify_and_ratchet(&state_proof, Some(&initial_accumulator))`
$DIR/execution/executor/tests/db_bootstrapper_test.rs: `.freeze()`
$DIR/execution/executor/tests/db_bootstrapper_test.rs: `.reader
        .get_accumulator_summary(trusted_state.version())`
$DIR/execution/executor/tests/db_bootstrapper_test.rs: `.version()`
$DIR/execution/executor/tests/db_bootstrapper_test.rs: `.reader.get_state_proof(trusted_state.version())`
$DIR/execution/executor/tests/db_bootstrapper_test.rs: `.version()`
$DIR/execution/executor/tests/db_bootstrapper_test.rs: `.verify_and_ratchet(&state_proof, Some(&initial_accumulator))`
$DIR/execution/executor/tests/db_bootstrapper_test.rs: `.new_state()`
$DIR/execution/executor/tests/storage_integration_test.rs: `path.create_as_dir().unwrap();`
$DIR/execution/executor/tests/storage_integration_test.rs: `trusted_state
        .verify_and_ratchet(&state_proof, Some(&initial_accumulator))
        .unwrap();`
$DIR/execution/executor/tests/storage_integration_test.rs: `path.create_as_dir().unwrap();`
$DIR/execution/executor/tests/storage_integration_test.rs: `executor
        .commit_blocks(vec![block_id], ledger_info_with_sigs)
        .unwrap();`
$DIR/execution/executor/tests/storage_integration_test.rs: `verify_committed_txn_status(t3.as_ref(), &txn_block[2]).unwrap();`
$DIR/execution/executor/tests/storage_integration_test.rs: `path.create_as_dir().unwrap();`
$DIR/execution/executor/tests/storage_integration_test.rs: `executor
        .commit_blocks(vec![block1_id], ledger_info_with_sigs)
        .unwrap();`
$DIR/execution/executor/tests/storage_integration_test.rs: `verify_committed_txn_status(txn1.as_ref(), &block1[0]).unwrap();`
$DIR/execution/executor/tests/storage_integration_test.rs: `executor
        .commit_blocks(vec![block2_id], ledger_info_with_sigs)
        .unwrap();`
$DIR/execution/executor/tests/storage_integration_test.rs: `verify_committed_txn_status(txn2.as_ref(), &block2[0]).unwrap();`
$DIR/execution/executor/tests/storage_integration_test.rs: `.create_as_dir()`
$DIR/execution/executor/tests/storage_integration_test.rs: `.path()`
$DIR/execution/executor/tests/storage_integration_test.rs: `.reader
        .get_accumulator_summary(trusted_state.version())`
$DIR/execution/executor/tests/storage_integration_test.rs: `.version()`
$DIR/execution/executor/tests/storage_integration_test.rs: `.reader.get_state_proof(trusted_state.version())`
$DIR/execution/executor/tests/storage_integration_test.rs: `.version()`
$DIR/execution/executor/tests/storage_integration_test.rs: `.verify_and_ratchet(&state_proof, Some(&initial_accumulator))`
$DIR/execution/executor/tests/storage_integration_test.rs: `.latest_ledger_info()`
$DIR/execution/executor/tests/storage_integration_test.rs: `.reader
        .get_account_state_with_proof(diem_root_address(), 0, 0)`
$DIR/execution/executor/tests/storage_integration_test.rs: `.verify(li, 0, diem_root_address())`
$DIR/execution/executor/tests/storage_integration_test.rs: `.create_as_dir()`
$DIR/execution/executor/tests/storage_integration_test.rs: `.path()`
$DIR/execution/executor/tests/storage_integration_test.rs: `.committed_block_id()`
$DIR/execution/executor/tests/storage_integration_test.rs: `.author()`
$DIR/execution/executor/tests/storage_integration_test.rs: `.reader.get_state_proof(0)`
$DIR/execution/executor/tests/storage_integration_test.rs: `.latest_ledger_info()`
$DIR/execution/executor/tests/storage_integration_test.rs: `.version()`
$DIR/execution/executor/tests/storage_integration_test.rs: `.reader
        .get_account_state_with_proof(validator_account, current_version, current_version)`
$DIR/execution/executor/tests/storage_integration_test.rs: `.reader
        .get_account_state_with_proof(diem_root_address(), current_version, current_version)`
$DIR/execution/executor/tests/storage_integration_test.rs: `.public_key()`
$DIR/execution/executor/tests/storage_integration_test.rs: `.public_key()`
$DIR/execution/executor/tests/storage_integration_test.rs: `.public_key()`
$DIR/execution/executor/tests/storage_integration_test.rs: `.to_bytes()`
$DIR/execution/executor/tests/storage_integration_test.rs: `.execute_block((block_id, txn_block.clone()), parent_block_id)`
$DIR/execution/executor/tests/storage_integration_test.rs: `.commit_blocks(vec![block_id], ledger_info_with_sigs)`
$DIR/execution/executor/tests/storage_integration_test.rs: `.reader.get_state_proof(0)`
$DIR/execution/executor/tests/storage_integration_test.rs: `.latest_ledger_info()`
$DIR/execution/executor/tests/storage_integration_test.rs: `.version()`
$DIR/execution/executor/tests/storage_integration_test.rs: `.reader
        .get_account_transaction(operator_account, 0, true, current_version)`
$DIR/execution/executor/tests/storage_integration_test.rs: `.reader
        .get_account_state_with_proof(validator_account, current_version, current_version)`
$DIR/execution/executor/tests/storage_integration_test.rs: `.reader
        .get_account_state_with_proof(validator_account, current_version, current_version)`
$DIR/execution/executor/tests/storage_integration_test.rs: `.reader
        .get_account_state_with_proof(diem_root_address(), current_version, current_version)`
$DIR/execution/executor/tests/storage_integration_test.rs: `.reader
        .get_account_state_with_proof(diem_root_address(), current_version, current_version)`
$DIR/execution/executor/tests/storage_integration_test.rs: `.create_as_dir()`
$DIR/execution/executor/tests/storage_integration_test.rs: `.path()`
$DIR/execution/executor/tests/storage_integration_test.rs: `.committed_block_id()`
$DIR/execution/executor/tests/storage_integration_test.rs: `.author()`
$DIR/execution/executor/tests/storage_integration_test.rs: `.private_key()`
$DIR/execution/executor/tests/storage_integration_test.rs: `.public_key()`
$DIR/execution/executor/tests/storage_integration_test.rs: `.public_key()`
$DIR/execution/executor/tests/storage_integration_test.rs: `.collect()`
$DIR/execution/executor/tests/storage_integration_test.rs: `.into_script_blob("file_name", code)`
$DIR/execution/executor/tests/storage_integration_test.rs: `.public_key()`
$DIR/execution/executor/tests/storage_integration_test.rs: `.execute_block((block1_id, block1.clone()), parent_block_id)`
$DIR/execution/executor/tests/storage_integration_test.rs: `.commit_blocks(vec![block1_id], ledger_info_with_sigs)`
$DIR/execution/executor/tests/storage_integration_test.rs: `.reader
        .get_accumulator_summary(trusted_state.version())`
$DIR/execution/executor/tests/storage_integration_test.rs: `.version()`
$DIR/execution/executor/tests/storage_integration_test.rs: `.reader.get_state_proof(trusted_state.version())`
$DIR/execution/executor/tests/storage_integration_test.rs: `.version()`
$DIR/execution/executor/tests/storage_integration_test.rs: `.verify_and_ratchet(&state_proof, Some(&initial_accumulator))`
$DIR/execution/executor/tests/storage_integration_test.rs: `.new_state()`
$DIR/execution/executor/tests/storage_integration_test.rs: `.version()`
$DIR/execution/executor/tests/storage_integration_test.rs: `.reader
        .get_account_transaction(treasury_compliance_account, 0, false, current_version)`
$DIR/execution/executor/tests/storage_integration_test.rs: `.execute_block((block2_id, block2.clone()), executor.committed_block_id())`
$DIR/execution/executor/tests/storage_integration_test.rs: `.committed_block_id()`
$DIR/execution/executor/tests/storage_integration_test.rs: `.commit_blocks(vec![block2_id], ledger_info_with_sigs)`
$DIR/execution/executor/tests/storage_integration_test.rs: `.reader.get_state_proof(current_version)`
$DIR/execution/executor/tests/storage_integration_test.rs: `.verify_and_ratchet(&state_proof, None)`
$DIR/execution/executor/tests/storage_integration_test.rs: `.latest_ledger_info()`
$DIR/execution/executor/tests/storage_integration_test.rs: `.version()`
$DIR/execution/executor/tests/storage_integration_test.rs: `.reader
        .get_account_transaction(validator_account, 0, false, current_version)`
$DIR/execution/executor/tests/storage_integration_test.rs: `.reader
        .get_account_transaction(validator_account, 1, false, current_version)`
$DIR/json-rpc/src/fuzzing.rs: `method_fuzzer(&gen_request_params!([]), "get_metadata");`
$DIR/json-rpc/src/fuzzing.rs: `method_fuzzer(&gen_request_params!([0]), "get_metadata");`
$DIR/json-rpc/src/fuzzing.rs: `method_fuzzer(
        &gen_request_params!(["000000000000000000000000000000dd"]),
        "get_account",
    );`
$DIR/json-rpc/src/fuzzing.rs: `method_fuzzer(&gen_request_params!([0, 1, true]), "get_transactions");`
$DIR/json-rpc/src/fuzzing.rs: `method_fuzzer(
        &gen_request_params!(["000000000000000000000000000000dd", 0, true]),
        "get_account_transaction",
    );`
$DIR/json-rpc/src/fuzzing.rs: `method_fuzzer(
        &gen_request_params!(["000000000000000000000000000000dd", 0, 1, true]),
        "get_account_transactions",
    );`
$DIR/json-rpc/src/fuzzing.rs: `method_fuzzer(
        &gen_request_params!(["00000000000000000000000000000000000000000a550c18", 0, 10]),
        "get_events",
    );`
$DIR/json-rpc/src/fuzzing.rs: `method_fuzzer(&gen_request_params!([]), "get_currencies");`
$DIR/json-rpc/src/fuzzing.rs: `method_fuzzer(&gen_request_params!([]), "get_network_status");`
$DIR/json-rpc/src/fuzzing.rs: `method_fuzzer(&gen_request_params!([1]), "get_state_proof");`
$DIR/json-rpc/src/fuzzing.rs: `method_fuzzer(
        &gen_request_params!([]),
        "get_accumulator_consistency_proof",
    );`
$DIR/json-rpc/src/fuzzing.rs: `method_fuzzer(
        &gen_request_params!(["000000000000000000000000000000dd", 0, 1]),
        "get_account_state_with_proof",
    );`
$DIR/json-rpc/src/fuzzing.rs: `method_fuzzer(
        &gen_request_params!([0, 1, true]),
        "get_transactions_with_proofs",
    );`
$DIR/json-rpc/src/fuzzing.rs: `method_fuzzer(
        &gen_request_params!(["000000000000000000000000000000dd", 0, 1, true]),
        "get_account_transactions_with_proofs",
    );`
$DIR/json-rpc/src/fuzzing.rs: `method_fuzzer(
        &gen_request_params!(["00000000000000000000000000000000000000000a550c18", 0, 1]),
        "get_events_with_proofs",
    );`
$DIR/json-rpc/src/stream_rpc/connection/client_connection.rs: `client_connection
            .received_message(Arc::new(mock_db.clone()), request)
            .await;`
$DIR/json-rpc/src/stream_rpc/connection/client_connection.rs: `client_connection
            .received_message(Arc::new(mock_db.clone()), request)
            .await;`
$DIR/json-rpc/src/stream_rpc/connection/client_connection.rs: `client_connection
            .received_message(Arc::new(mock_db.clone()), request)
            .await;`
$DIR/json-rpc/src/stream_rpc/connection/client_connection.rs: `client_connection
            .received_message(Arc::new(mock_db.clone()), request)
            .await;`
$DIR/json-rpc/src/stream_rpc/connection/client_connection.rs: `.send_raw(expected.clone())`
$DIR/json-rpc/src/stream_rpc/connection/client_connection.rs: `.recv()`
$DIR/json-rpc/src/stream_rpc/connection/client_connection.rs: `.received_message(Arc::new(mock_db.clone()), request)`
$DIR/json-rpc/src/stream_rpc/connection/client_connection.rs: `.recv()`
$DIR/json-rpc/src/stream_rpc/connection/client_connection.rs: `.recv()`
$DIR/json-rpc/src/stream_rpc/connection/client_connection.rs: `.get("result")`
$DIR/json-rpc/src/stream_rpc/connection/client_connection.rs: `.get("version")`
$DIR/json-rpc/src/stream_rpc/connection/client_connection.rs: `.received_message(Arc::new(mock_db.clone()), request)`
$DIR/json-rpc/src/stream_rpc/connection/client_connection.rs: `.recv()`
$DIR/json-rpc/src/stream_rpc/connection/client_connection.rs: `.received_message(Arc::new(mock_db.clone()), request)`
$DIR/json-rpc/src/stream_rpc/connection/client_connection.rs: `.recv()`
$DIR/json-rpc/src/stream_rpc/connection/client_connection.rs: `.get("result")`
$DIR/json-rpc/src/stream_rpc/connection/client_connection.rs: `.get("unsubscribe")`
$DIR/json-rpc/src/stream_rpc/connection/client_connection.rs: `.received_message(Arc::new(mock_db.clone()), request)`
$DIR/json-rpc/src/stream_rpc/connection/client_connection.rs: `.recv()`
$DIR/json-rpc/src/stream_rpc/subscription_types.rs: `subscription_helper.sleep_wiggled().await;`
$DIR/json-rpc/src/stream_rpc/subscription_types.rs: `results.push(elapsed - last);`
$DIR/json-rpc/src/stream_rpc/subscription_types.rs: `last = elapsed;`
$DIR/json-rpc/src/stream_rpc/subscription_types.rs: `subscription_helper.reset_backoff();`
$DIR/json-rpc/src/stream_rpc/subscription_types.rs: `.run(subscription_helper, params)`
$DIR/json-rpc/src/stream_rpc/subscription_types.rs: `.recv()`
$DIR/json-rpc/src/stream_rpc/subscription_types.rs: `.recv()`
$DIR/json-rpc/src/stream_rpc/subscription_types.rs: `.recv()`
$DIR/json-rpc/src/stream_rpc/subscription_types.rs: `.recv()`
$DIR/json-rpc/src/stream_rpc/subscription_types.rs: `.elapsed()`
$DIR/json-rpc/src/stream_rpc/subscription_types.rs: `.as_millis()`
$DIR/json-rpc/src/stream_rpc/subscription_types.rs: `.recv()`
$DIR/json-rpc/src/stream_rpc/subscription_types.rs: `.run(subscription_helper, params)`
$DIR/json-rpc/src/stream_rpc/subscription_types.rs: `.recv()`
$DIR/json-rpc/src/stream_rpc/subscription_types.rs: `.sleep_wiggled()`
$DIR/json-rpc/src/stream_rpc/subscription_types.rs: `.elapsed()`
$DIR/json-rpc/src/stream_rpc/subscription_types.rs: `.as_millis()`
$DIR/json-rpc/src/stream_rpc/subscription_types.rs: `.push(elapsed - last)`
$DIR/json-rpc/src/stream_rpc/subscription_types.rs: `.get(i)`
$DIR/json-rpc/src/stream_rpc/subscription_types.rs: `.get(i + 1)`
$DIR/json-rpc/src/stream_rpc/subscription_types.rs: `.reset_backoff()`
$DIR/json-rpc/src/stream_rpc/subscription_types.rs: `.sleep_wiggled()`
$DIR/json-rpc/src/stream_rpc/tests/websockets.rs: `ws_client.send_text(request).await;`
$DIR/json-rpc/src/stream_rpc/tests/websockets.rs: `ws_client.send_text(request).await;`
$DIR/json-rpc/src/stream_rpc/tests/websockets.rs: `ws_client.send_text(request).await;`
$DIR/json-rpc/src/stream_rpc/tests/websockets.rs: `ws_client.send_text(request.to_string()).await;`
$DIR/json-rpc/src/stream_rpc/tests/websockets.rs: `close_ws(ws_client, name).await;`
$DIR/json-rpc/src/stream_rpc/tests/websockets.rs: `ws_client.send_text(request).await;`
$DIR/json-rpc/src/stream_rpc/tests/websockets.rs: `close_ws(ws_client1, "").await;`
$DIR/json-rpc/src/stream_rpc/tests/websockets.rs: `close_ws(ws_client2, "").await;`
$DIR/json-rpc/src/stream_rpc/tests/websockets.rs: `runtime
            .handle()
            .block_on(timeout(
                500,
                tx.send(Message::text(request.to_string())),
                "send request",
            ))
            .unwrap_or_else(|e| panic!("{}: Could not send websocket request. {:?}", &name, e));`
$DIR/json-rpc/src/stream_rpc/tests/websockets.rs: `.send_text(request)`
$DIR/json-rpc/src/stream_rpc/tests/websockets.rs: `.send_text(request)`
$DIR/json-rpc/src/stream_rpc/tests/websockets.rs: `.send_text(request)`
$DIR/json-rpc/src/stream_rpc/tests/websockets.rs: `.events.get(0)`
$DIR/json-rpc/src/stream_rpc/tests/websockets.rs: `.key()`
$DIR/json-rpc/src/stream_rpc/tests/websockets.rs: `.filter(|(_, ev)| ev.key().to_string() == first_event_key)`
$DIR/json-rpc/src/stream_rpc/tests/websockets.rs: `.key()`
$DIR/json-rpc/src/stream_rpc/tests/websockets.rs: `.count()`
$DIR/json-rpc/src/stream_rpc/tests/websockets.rs: `.send_text(request.to_string())`
$DIR/json-rpc/src/stream_rpc/tests/websockets.rs: `.to_str()`
$DIR/json-rpc/src/stream_rpc/tests/websockets.rs: `.send_text(request)`
$DIR/json-rpc/src/stream_rpc/tests/websockets.rs: `.enter()`
$DIR/json-rpc/src/stream_rpc/tests/websockets.rs: `.method(http::method::Method::GET)`
$DIR/json-rpc/src/stream_rpc/tests/websockets.rs: `.uri(http::uri::Uri::try_from(&wss_url).unwrap())`
$DIR/json-rpc/src/stream_rpc/tests/websockets.rs: `.header("user-agent", "diem-client-sdk-python / 0.1.22")`
$DIR/json-rpc/src/stream_rpc/tests/websockets.rs: `.header("Content-Length", "1500")`
$DIR/json-rpc/src/stream_rpc/tests/websockets.rs: `.body(())`
$DIR/json-rpc/src/stream_rpc/tests/websockets.rs: `.handle()`
$DIR/json-rpc/src/stream_rpc/tests/websockets.rs: `.block_on(timeout(
            500,
            async move {
                let (ws_stream, _) = connect_async(http_request)
                    .await
                    .expect("Could not create websocket connection");
                ws_stream
            },
            "create ws connection",
        ))`
$DIR/json-rpc/src/stream_rpc/tests/websockets.rs: `.split()`
$DIR/json-rpc/src/stream_rpc/tests/websockets.rs: `.handle()`
$DIR/json-rpc/src/stream_rpc/tests/websockets.rs: `.block_on(timeout(
                500,
                tx.send(Message::text(request.to_string())),
                "send request",
            ))`
$DIR/json-rpc/src/stream_rpc/tests/websockets.rs: `.send(Message::text(request.to_string()))`
$DIR/json-rpc/src/stream_rpc/tests/websockets.rs: `.unwrap_or_else(|e| panic!("{}: Could not send websocket request. {:?}", &name, e))`
$DIR/json-rpc/src/stream_rpc/tests/websockets.rs: `.handle()`
$DIR/json-rpc/src/stream_rpc/tests/websockets.rs: `.block_on(timeout(500, rx.next(), "get next message"))`
$DIR/json-rpc/src/stream_rpc/tests/websockets.rs: `.next()`
$DIR/json-rpc/src/stream_rpc/tests/websockets.rs: `.unwrap_or_else(|| panic!("{}: Expected 'Some' response", &name))`
$DIR/json-rpc/src/stream_rpc/tests/websockets.rs: `.unwrap_or_else(|_| panic!("{}: Expected no error response", &name))`
$DIR/json-rpc/src/stream_rpc/transport/util.rs: `headers_with_forwarded.insert(warp::http::header::FORWARDED, forwarded_header);`
$DIR/json-rpc/src/stream_rpc/transport/util.rs: `headers_with_invalid_forwarded.insert(
        warp::http::header::FORWARDED,
        warp::http::header::HeaderValue::from_str("хулиган").unwrap(),
    );`
$DIR/json-rpc/src/stream_rpc/transport/util.rs: `.insert(warp::http::header::FORWARDED, forwarded_header)`
$DIR/json-rpc/src/stream_rpc/transport/util.rs: `.insert(
        warp::http::header::FORWARDED,
        warp::http::header::HeaderValue::from_str("хулиган").unwrap(),
    )`
$DIR/json-rpc/src/tests/unit_tests.rs: `runtime.spawn(async move {
        let validator = MockVMValidator;
        while let Some((txn, cb)) = mp_events.next().await {
            let vm_status = validator.validate_transaction(txn).unwrap().status();
            let result = if vm_status.is_some() {
                (MempoolStatus::new(MempoolStatusCode::VmError), vm_status)
            } else {
                (MempoolStatus::new(MempoolStatusCode::Accepted), None)
            };
            cb.send(Ok(result)).unwrap();
        }
    });`
$DIR/json-rpc/src/tests/unit_tests.rs: `cb.send(Ok(result)).unwrap();`
$DIR/json-rpc/src/tests/unit_tests.rs: `txn_submission(sender).unwrap();`
$DIR/json-rpc/src/tests/unit_tests.rs: `states.push(AccountState::try_from(blob).unwrap());`
$DIR/json-rpc/src/tests/unit_tests.rs: `batch.push(MethodRequest::get_account(*account));`
$DIR/json-rpc/src/tests/unit_tests.rs: `batch.push(MethodRequest::get_metadata_by_version(i));`
$DIR/json-rpc/src/tests/unit_tests.rs: `.request(reqwest::Method::OPTIONS, &url)`
$DIR/json-rpc/src/tests/unit_tests.rs: `.header("origin", origin)`
$DIR/json-rpc/src/tests/unit_tests.rs: `.header("access-control-headers", "content-type")`
$DIR/json-rpc/src/tests/unit_tests.rs: `.header("access-control-request-method", "POST")`
$DIR/json-rpc/src/tests/unit_tests.rs: `.send()`
$DIR/json-rpc/src/tests/unit_tests.rs: `.headers()`
$DIR/json-rpc/src/tests/unit_tests.rs: `.get("access-control-allow-origin")`
$DIR/json-rpc/src/tests/unit_tests.rs: `.get(&fake_path)`
$DIR/json-rpc/src/tests/unit_tests.rs: `.send()`
$DIR/json-rpc/src/tests/unit_tests.rs: `.get(&url)`
$DIR/json-rpc/src/tests/unit_tests.rs: `.send()`
$DIR/json-rpc/src/tests/unit_tests.rs: `.post(&url)`
$DIR/json-rpc/src/tests/unit_tests.rs: `.send()`
$DIR/json-rpc/src/tests/unit_tests.rs: `.post(&url_v1)`
$DIR/json-rpc/src/tests/unit_tests.rs: `.send()`
$DIR/json-rpc/src/tests/unit_tests.rs: `.post(&url)`
$DIR/json-rpc/src/tests/unit_tests.rs: `.body("non json")`
$DIR/json-rpc/src/tests/unit_tests.rs: `.send()`
$DIR/json-rpc/src/tests/unit_tests.rs: `.post(&url)`
$DIR/json-rpc/src/tests/unit_tests.rs: `.json(&json!({ "id": gen_string(DEFAULT_CONTENT_LENGTH_LIMIT) }))`
$DIR/json-rpc/src/tests/unit_tests.rs: `.send()`
$DIR/json-rpc/src/tests/unit_tests.rs: `.get_block_timestamp(version)`
$DIR/json-rpc/src/tests/unit_tests.rs: `.post(&url)`
$DIR/json-rpc/src/tests/unit_tests.rs: `.json(&request)`
$DIR/json-rpc/src/tests/unit_tests.rs: `.send()`
$DIR/json-rpc/src/tests/unit_tests.rs: `.headers()`
$DIR/json-rpc/src/tests/unit_tests.rs: `.json()`
$DIR/json-rpc/src/tests/unit_tests.rs: `.post(&url)`
$DIR/json-rpc/src/tests/unit_tests.rs: `.json(&request)`
$DIR/json-rpc/src/tests/unit_tests.rs: `.send()`
$DIR/json-rpc/src/tests/unit_tests.rs: `.json()`
$DIR/json-rpc/src/tests/unit_tests.rs: `.user_agent("diem-client-sdk-python / 2.11.15")`
$DIR/json-rpc/src/tests/unit_tests.rs: `.build()`
$DIR/json-rpc/src/tests/unit_tests.rs: `.post(&url)`
$DIR/json-rpc/src/tests/unit_tests.rs: `.json(&request)`
$DIR/json-rpc/src/tests/unit_tests.rs: `.send()`
$DIR/json-rpc/src/tests/unit_tests.rs: `.parse()`
$DIR/json-rpc/src/tests/unit_tests.rs: `.spawn(async move {
        let validator = MockVMValidator;
        while let Some((txn, cb)) = mp_events.next().await {
            let vm_status = validator.validate_transaction(txn).unwrap().status();
            let result = if vm_status.is_some() {
                (MempoolStatus::new(MempoolStatusCode::VmError), vm_status)
            } else {
                (MempoolStatus::new(MempoolStatusCode::Accepted), None)
            };
            cb.send(Ok(result)).unwrap();
        }
    })`
$DIR/json-rpc/src/tests/unit_tests.rs: `.next()`
$DIR/json-rpc/src/tests/unit_tests.rs: `.validate_transaction(txn)`
$DIR/json-rpc/src/tests/unit_tests.rs: `.status()`
$DIR/json-rpc/src/tests/unit_tests.rs: `.is_some()`
$DIR/json-rpc/src/tests/unit_tests.rs: `.send(Ok(result))`
$DIR/json-rpc/src/tests/unit_tests.rs: `.public_key()`
$DIR/json-rpc/src/tests/unit_tests.rs: `.json_rpc_error()`
$DIR/json-rpc/src/tests/unit_tests.rs: `.as_status_code()`
$DIR/json-rpc/src/tests/unit_tests.rs: `.next()`
$DIR/json-rpc/src/tests/unit_tests.rs: `.get_account(*first_account)`
$DIR/json-rpc/src/tests/unit_tests.rs: `.into_inner()`
$DIR/json-rpc/src/tests/unit_tests.rs: `.map(|bal| bal.amount)`
$DIR/json-rpc/src/tests/unit_tests.rs: `.collect()`
$DIR/json-rpc/src/tests/unit_tests.rs: `.get_balance_resources()`
$DIR/json-rpc/src/tests/unit_tests.rs: `.map(|(_, bal_resource)| bal_resource.coin())`
$DIR/json-rpc/src/tests/unit_tests.rs: `.coin()`
$DIR/json-rpc/src/tests/unit_tests.rs: `.collect()`
$DIR/json-rpc/src/tests/unit_tests.rs: `.push(AccountState::try_from(blob).unwrap())`
$DIR/json-rpc/src/tests/unit_tests.rs: `.push(MethodRequest::get_account(*account))`
$DIR/json-rpc/src/tests/unit_tests.rs: `.batch(batch)`
$DIR/json-rpc/src/tests/unit_tests.rs: `.into_iter()`
$DIR/json-rpc/src/tests/unit_tests.rs: `.enumerate()`
$DIR/json-rpc/src/tests/unit_tests.rs: `.into_inner()`
$DIR/json-rpc/src/tests/unit_tests.rs: `.unwrap_get_account()`
$DIR/json-rpc/src/tests/unit_tests.rs: `.map(|bal| bal.amount)`
$DIR/json-rpc/src/tests/unit_tests.rs: `.collect()`
$DIR/json-rpc/src/tests/unit_tests.rs: `.get_balance_resources()`
$DIR/json-rpc/src/tests/unit_tests.rs: `.map(|(_, bal_resource)| bal_resource.coin())`
$DIR/json-rpc/src/tests/unit_tests.rs: `.coin()`
$DIR/json-rpc/src/tests/unit_tests.rs: `.collect()`
$DIR/json-rpc/src/tests/unit_tests.rs: `.get_latest_commit_metadata()`
$DIR/json-rpc/src/tests/unit_tests.rs: `.get_metadata()`
$DIR/json-rpc/src/tests/unit_tests.rs: `.into_inner()`
$DIR/json-rpc/src/tests/unit_tests.rs: `.get_metadata_by_version(1)`
$DIR/json-rpc/src/tests/unit_tests.rs: `.into_inner()`
$DIR/json-rpc/src/tests/unit_tests.rs: `.push(MethodRequest::get_metadata_by_version(i))`
$DIR/json-rpc/src/tests/unit_tests.rs: `.batch(batch)`
$DIR/json-rpc/src/tests/unit_tests.rs: `.json_rpc_error()`
$DIR/json-rpc/src/tests/unit_tests.rs: `.get_events(
            EventKey::from_hex("13000000000000000000000000000000000000000a550c18").unwrap(),
            0,
            1001,
        )`
$DIR/json-rpc/src/tests/unit_tests.rs: `.json_rpc_error()`
$DIR/json-rpc/src/tests/unit_tests.rs: `.get_transactions(0, 1001, false)`
$DIR/json-rpc/src/tests/unit_tests.rs: `.json_rpc_error()`
$DIR/json-rpc/src/tests/unit_tests.rs: `.key()`
$DIR/json-rpc/src/tests/unit_tests.rs: `.get_events(
            *event_key,
            first_event.sequence_number(),
            first_event.sequence_number() + 10,
        )`
$DIR/json-rpc/src/tests/unit_tests.rs: `.sequence_number()`
$DIR/json-rpc/src/tests/unit_tests.rs: `.sequence_number()`
$DIR/json-rpc/src/tests/unit_tests.rs: `.into_inner()`
$DIR/json-rpc/src/tests/unit_tests.rs: `.get_latest_version()`
$DIR/json-rpc/src/tests/unit_tests.rs: `.map(u64::from)`
$DIR/json-rpc/src/tests/unit_tests.rs: `.take(page)`
$DIR/json-rpc/src/tests/unit_tests.rs: `.collect::<Vec<_>>()`
$DIR/json-rpc/src/tests/unit_tests.rs: `.into_iter()`
$DIR/json-rpc/src/tests/unit_tests.rs: `.get_transactions(base_version, page as u64, true)`
$DIR/json-rpc/src/tests/unit_tests.rs: `.into_inner()`
$DIR/json-rpc/src/tests/unit_tests.rs: `.enumerate()`
$DIR/json-rpc/src/tests/unit_tests.rs: `.filter(|(v, _)| *v == view.version)`
$DIR/json-rpc/src/tests/unit_tests.rs: `.map(|(_, e)| e)`
$DIR/json-rpc/src/tests/unit_tests.rs: `.collect::<Vec<_>>()`
$DIR/json-rpc/src/tests/unit_tests.rs: `.enumerate()`
$DIR/json-rpc/src/tests/unit_tests.rs: `.get(i)`
$DIR/json-rpc/src/tests/unit_tests.rs: `.payload()`
$DIR/json-rpc/src/tests/unit_tests.rs: `.sequence_number()`
$DIR/json-rpc/src/tests/unit_tests.rs: `.get_account_transaction(*acc, seq, true)`
$DIR/json-rpc/src/tests/unit_tests.rs: `.into_inner()`
$DIR/json-rpc/src/tests/unit_tests.rs: `.find_map(|(t, status)| {
                    if let Ok(x) = t.as_signed_user_txn() {
                        if x.sender() == *acc && x.sequence_number() == seq {
                            assert_eq!(tx_view.hash, t.hash());
                            return Some((x, status));
                        }
                    }
                    None
                })`
$DIR/json-rpc/src/tests/unit_tests.rs: `.as_signed_user_txn()`
$DIR/json-rpc/src/tests/unit_tests.rs: `.sender()`
$DIR/json-rpc/src/tests/unit_tests.rs: `.sequence_number()`
$DIR/json-rpc/src/tests/unit_tests.rs: `.filter(|(ev, _)| *ev == tx_view.version)`
$DIR/json-rpc/src/tests/unit_tests.rs: `.map(|(_, e)| e)`
$DIR/json-rpc/src/tests/unit_tests.rs: `.collect::<Vec<_>>()`
$DIR/json-rpc/src/tests/unit_tests.rs: `.enumerate()`
$DIR/json-rpc/src/tests/unit_tests.rs: `.get(i)`
$DIR/json-rpc/src/tests/unit_tests.rs: `.payload()`
$DIR/json-rpc/src/tests/unit_tests.rs: `.sequence_number()`
$DIR/json-rpc/src/tests/unit_tests.rs: `.get_account_transactions(*acc, 0, max(1, min(1000, total * 2)), true)`
$DIR/json-rpc/src/tests/unit_tests.rs: `.into_inner()`
$DIR/json-rpc/src/tests/unit_tests.rs: `.get_account_state_with_proof(account, None, None)`
$DIR/json-rpc/src/tests/unit_tests.rs: `.into_inner()`
$DIR/json-rpc/src/tests/unit_tests.rs: `.get_account_state_with_proof(account, Some(0), Some(0))`
$DIR/json-rpc/src/tests/unit_tests.rs: `.into_inner()`
$DIR/json-rpc/src/tests/unit_tests.rs: `.proof.transaction_info_to_account_proof()`
$DIR/json-rpc/src/tests/unit_tests.rs: `.proof.transaction_info_with_proof()`
$DIR/json-rpc/src/tests/unit_tests.rs: `.get_state_proof(version)`
$DIR/json-rpc/src/tests/unit_tests.rs: `.into_inner()`
$DIR/json-rpc/src/tests/unit_tests.rs: `.get_network_status()`
$DIR/json-rpc/src/tests/unit_tests.rs: `.into_inner()`
$DIR/json-rpc/src/tests/unit_tests.rs: `.get(&healthy_url)`
$DIR/json-rpc/src/tests/unit_tests.rs: `.send()`
$DIR/json-rpc/src/tests/unit_tests.rs: `.get(&healthy_url)`
$DIR/json-rpc/src/tests/unit_tests.rs: `.send()`
$DIR/json-rpc/src/tests/unit_tests.rs: `.sub(Duration::from_secs(ledger_latest_timestamp_lack))`
$DIR/json-rpc/src/tests/unit_tests.rs: `.duration_since(UNIX_EPOCH)`
$DIR/json-rpc/src/tests/unit_tests.rs: `.as_micros()`
$DIR/json-rpc/types/src/errors.rs: `assert_map_vm_code(
            StatusCode::UNKNOWN_VALIDATION_STATUS,
            ServerCode::VmValidationError,
        );`
$DIR/json-rpc/types/src/errors.rs: `assert_map_vm_code(
            StatusCode::UNKNOWN_VERIFICATION_ERROR,
            ServerCode::VmVerificationError,
        );`
$DIR/json-rpc/types/src/errors.rs: `assert_map_vm_code(
            StatusCode::UNKNOWN_INVARIANT_VIOLATION_ERROR,
            ServerCode::VmInvariantViolationError,
        );`
$DIR/json-rpc/types/src/errors.rs: `assert_map_vm_code(
            StatusCode::UNKNOWN_BINARY_ERROR,
            ServerCode::VmDeserializationError,
        );`
$DIR/json-rpc/types/src/errors.rs: `assert_map_vm_code(
            StatusCode::UNKNOWN_RUNTIME_STATUS,
            ServerCode::VmExecutionError,
        );`
$DIR/json-rpc/types/src/errors.rs: `assert_map_code(
            MempoolStatusCode::InvalidSeqNumber,
            ServerCode::MempoolInvalidSeqNumber,
        );`
$DIR/json-rpc/types/src/errors.rs: `assert_map_code(MempoolStatusCode::MempoolIsFull, ServerCode::MempoolIsFull);`
$DIR/json-rpc/types/src/errors.rs: `assert_map_code(
            MempoolStatusCode::TooManyTransactions,
            ServerCode::MempoolTooManyTransactions,
        );`
$DIR/json-rpc/types/src/errors.rs: `assert_map_code(
            MempoolStatusCode::InvalidUpdate,
            ServerCode::MempoolInvalidUpdate,
        );`
$DIR/json-rpc/types/src/errors.rs: `assert_map_code(MempoolStatusCode::VmError, ServerCode::MempoolVmError);`
$DIR/json-rpc/types/src/errors.rs: `.code_as_str()`
$DIR/json-rpc/types/src/request.rs: `parse_err(json!([10, 11]));`
$DIR/json-rpc/types/src/request.rs: `parse_ok(json!([10]));`
$DIR/json-rpc/types/src/request.rs: `parse_ok(json!([serde_json::Value::Null]));`
$DIR/json-rpc/types/src/request.rs: `parse_ok(json!([]));`
$DIR/json-rpc/types/src/request.rs: `parse_ok(json!({}));`
$DIR/json-rpc/types/src/request.rs: `parse_ok(serde_json::Value::Null);`
$DIR/json-rpc/types/src/request.rs: `parse_ok(json!({"version": 10}));`
$DIR/json-rpc/types/src/request.rs: `parse_ok(json!([account]));`
$DIR/json-rpc/types/src/request.rs: `parse_ok(json!([account, 10]));`
$DIR/json-rpc/types/src/request.rs: `parse_err(json!([account, "foo"]));`
$DIR/json-rpc/types/src/request.rs: `parse_err(json!([account, 10, 1]));`
$DIR/json-rpc/types/src/request.rs: `parse_err(json!([]));`
$DIR/json-rpc/types/src/request.rs: `parse_err(json!({}));`
$DIR/json-rpc/types/src/request.rs: `parse_ok(json!({
            "account": account,
        }));`
$DIR/json-rpc/types/src/request.rs: `parse_ok(json!({
            "account": account,
            "version": 10,
        }));`
$DIR/json-rpc/types/src/request.rs: `parse_ok(json!([10, 11, false]));`
$DIR/json-rpc/types/src/request.rs: `parse_err(json!([10, 11, false, "foo"]));`
$DIR/json-rpc/types/src/request.rs: `parse_err(json!(["foo", 11, false]));`
$DIR/json-rpc/types/src/request.rs: `parse_err(json!([10, 11]));`
$DIR/json-rpc/types/src/request.rs: `parse_err(json!([]));`
$DIR/json-rpc/types/src/request.rs: `parse_err(json!({}));`
$DIR/json-rpc/types/src/request.rs: `parse_ok(json!({
            "start_version": 10,
            "limit": 10,
            "include_events": true,
        }));`
$DIR/json-rpc/types/src/request.rs: `parse_err(json!({
            "limit": 10,
            "include_events": true,
        }));`
$DIR/json-rpc/types/src/request.rs: `parse_ok(json!([account, 11, false]));`
$DIR/json-rpc/types/src/request.rs: `parse_err(json!([account, 11, false, "foo"]));`
$DIR/json-rpc/types/src/request.rs: `parse_err(json!(["foo", 11, false]));`
$DIR/json-rpc/types/src/request.rs: `parse_err(json!([10, 11]));`
$DIR/json-rpc/types/src/request.rs: `parse_err(json!([]));`
$DIR/json-rpc/types/src/request.rs: `parse_err(json!({}));`
$DIR/json-rpc/types/src/request.rs: `parse_ok(json!({
            "account": account,
            "sequence_number": 10,
            "include_events": true,
        }));`
$DIR/json-rpc/types/src/request.rs: `parse_err(json!({
            "sequence_number": 10,
            "include_events": true,
        }));`
$DIR/json-rpc/types/src/request.rs: `parse_ok(json!([account, 10, 11, false]));`
$DIR/json-rpc/types/src/request.rs: `parse_err(json!([account, 10, 11, false, "foo"]));`
$DIR/json-rpc/types/src/request.rs: `parse_err(json!(["foo", 10, 11, false]));`
$DIR/json-rpc/types/src/request.rs: `parse_err(json!([10, 11]));`
$DIR/json-rpc/types/src/request.rs: `parse_err(json!([]));`
$DIR/json-rpc/types/src/request.rs: `parse_err(json!({}));`
$DIR/json-rpc/types/src/request.rs: `parse_ok(json!({
            "account": account,
            "start": 10,
            "limit": 11,
            "include_events": true,
        }));`
$DIR/json-rpc/types/src/request.rs: `parse_err(json!({
            "include_events": true,
        }));`
$DIR/json-rpc/types/src/request.rs: `parse_ok(json!([account, 10, 11, false]));`
$DIR/json-rpc/types/src/request.rs: `parse_ok(json!([account, 10, 11, false, 123]));`
$DIR/json-rpc/types/src/request.rs: `parse_err(json!([account, 10, 11, false, 123, "foo"]));`
$DIR/json-rpc/types/src/request.rs: `parse_err(json!(["foo", 10, 11, false]));`
$DIR/json-rpc/types/src/request.rs: `parse_err(json!([account, 10]));`
$DIR/json-rpc/types/src/request.rs: `parse_err(json!([]));`
$DIR/json-rpc/types/src/request.rs: `parse_err(json!({}));`
$DIR/json-rpc/types/src/request.rs: `parse_ok(json!({
            "account": account,
            "start": 10,
            "limit": 11,
            "include_events": true,
        }));`
$DIR/json-rpc/types/src/request.rs: `parse_ok(json!({
            "account": account,
            "start": 10,
            "limit": 11,
            "include_events": true,
            "ledger_version": 999,
        }));`
$DIR/json-rpc/types/src/request.rs: `parse_err(json!({
            "include_events": true,
        }));`
$DIR/json-rpc/types/src/request.rs: `parse_ok(json!([key, 10, 11]));`
$DIR/json-rpc/types/src/request.rs: `parse_err(json!([key, 10, 11, false]));`
$DIR/json-rpc/types/src/request.rs: `parse_err(json!(["foo", 10, 11]));`
$DIR/json-rpc/types/src/request.rs: `parse_err(json!([10, 11]));`
$DIR/json-rpc/types/src/request.rs: `parse_err(json!([]));`
$DIR/json-rpc/types/src/request.rs: `parse_err(json!({}));`
$DIR/json-rpc/types/src/request.rs: `parse_ok(json!({
            "key": key,
            "start": 10,
            "limit": 11,
        }));`
$DIR/json-rpc/types/src/request.rs: `parse_err(json!({
            "start": 10,
            "limit": 11,
        }));`
$DIR/json-rpc/types/src/request.rs: `parse_err(json!([10]));`
$DIR/json-rpc/types/src/request.rs: `parse_ok(json!([]));`
$DIR/json-rpc/types/src/request.rs: `parse_ok(json!({}));`
$DIR/json-rpc/types/src/request.rs: `parse_ok(serde_json::Value::Null);`
$DIR/json-rpc/types/src/request.rs: `parse_err(json!([10]));`
$DIR/json-rpc/types/src/request.rs: `parse_ok(json!([]));`
$DIR/json-rpc/types/src/request.rs: `parse_ok(json!({}));`
$DIR/json-rpc/types/src/request.rs: `parse_ok(serde_json::Value::Null);`
$DIR/json-rpc/types/src/request.rs: `parse_ok(json!([11]));`
$DIR/json-rpc/types/src/request.rs: `parse_err(json!([11, false]));`
$DIR/json-rpc/types/src/request.rs: `parse_err(json!(["foo"]));`
$DIR/json-rpc/types/src/request.rs: `parse_err(json!([]));`
$DIR/json-rpc/types/src/request.rs: `parse_err(json!({}));`
$DIR/json-rpc/types/src/request.rs: `parse_ok(json!({
            "version": 10,
        }));`
$DIR/json-rpc/types/src/request.rs: `parse_ok(json!([11, 42]));`
$DIR/json-rpc/types/src/request.rs: `parse_err(json!([11, 42, 7]));`
$DIR/json-rpc/types/src/request.rs: `parse_ok(json!([11]));`
$DIR/json-rpc/types/src/request.rs: `parse_ok(json!([]));`
$DIR/json-rpc/types/src/request.rs: `parse_err(json!(["foo"]));`
$DIR/json-rpc/types/src/request.rs: `parse_err(json!([123, "bar"]));`
$DIR/json-rpc/types/src/request.rs: `parse_ok(json!({}));`
$DIR/json-rpc/types/src/request.rs: `parse_ok(json!({
            "client_known_version": 123,
        }));`
$DIR/json-rpc/types/src/request.rs: `parse_ok(json!({
            "ledger_version": 123,
        }));`
$DIR/json-rpc/types/src/request.rs: `parse_ok(json!({
            "client_known_version": 42,
            "ledger_version": 123,
        }));`
$DIR/json-rpc/types/src/request.rs: `parse_ok(json!([account, 11, 12]));`
$DIR/json-rpc/types/src/request.rs: `parse_ok(json!([account]));`
$DIR/json-rpc/types/src/request.rs: `parse_ok(json!([account, 12]));`
$DIR/json-rpc/types/src/request.rs: `parse_err(json!([account, 11, 12, "foo"]));`
$DIR/json-rpc/types/src/request.rs: `parse_err(json!(["foo", 11, 12]));`
$DIR/json-rpc/types/src/request.rs: `parse_err(json!([10, 11]));`
$DIR/json-rpc/types/src/request.rs: `parse_err(json!([]));`
$DIR/json-rpc/types/src/request.rs: `parse_err(json!({}));`
$DIR/json-rpc/types/src/request.rs: `parse_ok(json!({
            "account": account,
            "version": 10,
            "ledger_version": 10,
        }));`
$DIR/json-rpc/types/src/request.rs: `parse_ok(json!({
            "account": account,
            "ledger_version": 10,
        }));`
$DIR/json-rpc/types/src/request.rs: `parse_ok(json!([10, 11, true]));`
$DIR/json-rpc/types/src/request.rs: `parse_err(json!([10, 11, 42, false]));`
$DIR/json-rpc/types/src/request.rs: `parse_err(json!(["foo", 11, false]));`
$DIR/json-rpc/types/src/request.rs: `parse_err(json!([10, 11]));`
$DIR/json-rpc/types/src/request.rs: `parse_err(json!([]));`
$DIR/json-rpc/types/src/request.rs: `parse_err(json!({}));`
$DIR/json-rpc/types/src/request.rs: `parse_ok(json!({
            "start_version": 10,
            "limit": 11,
            "include_events": true,
        }));`
$DIR/json-rpc/types/src/request.rs: `parse_ok(json!([key, 10, 11]));`
$DIR/json-rpc/types/src/request.rs: `parse_err(json!([key, 10, 11, false]));`
$DIR/json-rpc/types/src/request.rs: `parse_err(json!(["foo", 10, 11]));`
$DIR/json-rpc/types/src/request.rs: `parse_err(json!([10, 11]));`
$DIR/json-rpc/types/src/request.rs: `parse_err(json!([]));`
$DIR/json-rpc/types/src/request.rs: `parse_err(json!({}));`
$DIR/json-rpc/types/src/request.rs: `parse_ok(json!({
            "key": key,
            "start": 10,
            "limit": 11,
        }));`
$DIR/json-rpc/types/src/request.rs: `parse_err(json!({
            "start": 10,
            "limit": 11,
        }));`
$DIR/json-rpc/types/src/request.rs: `parse_ok(json!([key, 10]));`
$DIR/json-rpc/types/src/request.rs: `parse_ok(json!([key]));`
$DIR/json-rpc/types/src/request.rs: `parse_err(json!([key, 10, false]));`
$DIR/json-rpc/types/src/request.rs: `parse_err(json!(["foo", 10]));`
$DIR/json-rpc/types/src/request.rs: `parse_err(json!([]));`
$DIR/json-rpc/types/src/request.rs: `parse_err(json!({}));`
$DIR/json-rpc/types/src/request.rs: `parse_ok(json!({ "key": key, "version": 10 }));`
$DIR/json-rpc/types/src/request.rs: `parse_ok(json!({ "key": key }));`
$DIR/json-rpc/types/src/request.rs: `parse_err(json!({ "version": 10 }));`
$DIR/json-rpc/types/src/views.rs: `.try_into()`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/bounds_tests.rs: `m.self_module_handle_idx = ModuleHandleIndex(12);`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/bounds_tests.rs: `m.function_handles[0].return_ = SignatureIndex(1);`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/bounds_tests.rs: `m.signatures.push(Signature(vec![TypeParameter(0)]));`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/bounds_tests.rs: `m.function_handles[0].parameters = SignatureIndex(1);`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/bounds_tests.rs: `m.signatures.push(Signature(vec![TypeParameter(0)]));`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/bounds_tests.rs: `m.function_handles[0].return_ = SignatureIndex(1);`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/bounds_tests.rs: `m.signatures
        .push(Signature(vec![Struct(StructHandleIndex::new(1))]));`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/bounds_tests.rs: `fields[0].signature.0 = TypeParameter(0);`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/bounds_tests.rs: `fields[0].signature.0 = Struct(StructHandleIndex::new(3));`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/bounds_tests.rs: `fields[0].signature.0 =
                StructInstantiation(StructHandleIndex::new(0), vec![TypeParameter(0)]);`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/bounds_tests.rs: `m.function_instantiations.push(FunctionInstantiation {
        handle: FunctionHandleIndex::new(0),
        type_parameters: SignatureIndex::new(1),
    });`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/bounds_tests.rs: `m.function_defs[0].code.as_mut().unwrap().code = vec![CallGeneric(func_inst_idx)];`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/bounds_tests.rs: `s.function_instantiations.push(FunctionInstantiation {
        handle: FunctionHandleIndex::new(0),
        type_parameters: SignatureIndex::new(1),
    });`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/bounds_tests.rs: `s.code.code = vec![CallGeneric(func_inst_idx)];`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/bounds_tests.rs: `m.signatures.push(Signature(vec![TypeParameter(0)]));`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/bounds_tests.rs: `m.function_instantiations.push(FunctionInstantiation {
        handle: FunctionHandleIndex::new(0),
        type_parameters: SignatureIndex::new(1),
    });`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/bounds_tests.rs: `m.function_defs[0].code.as_mut().unwrap().code = vec![CallGeneric(func_inst_idx)];`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/bounds_tests.rs: `s.signatures.push(Signature(vec![TypeParameter(0)]));`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/bounds_tests.rs: `s.function_instantiations.push(FunctionInstantiation {
        handle: FunctionHandleIndex::new(0),
        type_parameters: SignatureIndex::new(1),
    });`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/bounds_tests.rs: `s.code.code = vec![CallGeneric(func_inst_idx)];`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/bounds_tests.rs: `m.signatures
        .push(Signature(vec![Struct(StructHandleIndex::new(3))]));`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/bounds_tests.rs: `m.function_instantiations.push(FunctionInstantiation {
        handle: FunctionHandleIndex::new(0),
        type_parameters: SignatureIndex::new(1),
    });`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/bounds_tests.rs: `m.function_defs[0].code.as_mut().unwrap().code = vec![CallGeneric(func_inst_idx)];`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/bounds_tests.rs: `s.signatures
        .push(Signature(vec![Struct(StructHandleIndex::new(3))]));`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/bounds_tests.rs: `s.function_instantiations.push(FunctionInstantiation {
        handle: FunctionHandleIndex::new(0),
        type_parameters: SignatureIndex::new(1),
    });`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/bounds_tests.rs: `s.code.code = vec![CallGeneric(func_inst_idx)];`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/bounds_tests.rs: `m.friend_decls.push(ModuleHandle {
        address: AddressIdentifierIndex::new(m.address_identifiers.len() as TableIndex),
        name: IdentifierIndex::new(0),
    });`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/bounds_tests.rs: `m.friend_decls.push(ModuleHandle {
        address: AddressIdentifierIndex::new(0),
        name: IdentifierIndex::new(m.identifiers.len() as TableIndex),
    });`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/bounds_tests.rs: `s.signatures.clear();`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/bounds_tests.rs: `m.function_defs[0].code.as_mut().unwrap().code = vec![bytecode];`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/bounds_tests.rs: `skeleton
        .signatures
        .push(Signature(vec![Struct(StructHandleIndex::new(3))]));`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/bounds_tests.rs: `m.function_defs[0].code.as_mut().unwrap().code = vec![bytecode];`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/bounds_tests.rs: `skeleton.signatures.push(Signature(vec![TypeParameter(0)]));`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/bounds_tests.rs: `m.function_defs[0].code.as_mut().unwrap().code = vec![bytecode];`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/bounds_tests.rs: `gen.zeros_all();`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/bounds_tests.rs: `.signatures.push(Signature(vec![TypeParameter(0)]))`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/bounds_tests.rs: `.signatures.push(Signature(vec![TypeParameter(0)]))`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/bounds_tests.rs: `.signatures
        .push(Signature(vec![Struct(StructHandleIndex::new(1))]))`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/bounds_tests.rs: `.function_instantiations.push(FunctionInstantiation {
        handle: FunctionHandleIndex::new(0),
        type_parameters: SignatureIndex::new(1),
    })`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/bounds_tests.rs: `.function_instantiations.len()`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/bounds_tests.rs: `.function_instantiations.push(FunctionInstantiation {
        handle: FunctionHandleIndex::new(0),
        type_parameters: SignatureIndex::new(1),
    })`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/bounds_tests.rs: `.function_instantiations.len()`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/bounds_tests.rs: `.signatures.push(Signature(vec![TypeParameter(0)]))`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/bounds_tests.rs: `.function_instantiations.push(FunctionInstantiation {
        handle: FunctionHandleIndex::new(0),
        type_parameters: SignatureIndex::new(1),
    })`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/bounds_tests.rs: `.function_instantiations.len()`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/bounds_tests.rs: `.signatures.push(Signature(vec![TypeParameter(0)]))`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/bounds_tests.rs: `.function_instantiations.push(FunctionInstantiation {
        handle: FunctionHandleIndex::new(0),
        type_parameters: SignatureIndex::new(1),
    })`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/bounds_tests.rs: `.function_instantiations.len()`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/bounds_tests.rs: `.signatures
        .push(Signature(vec![Struct(StructHandleIndex::new(3))]))`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/bounds_tests.rs: `.function_instantiations.push(FunctionInstantiation {
        handle: FunctionHandleIndex::new(0),
        type_parameters: SignatureIndex::new(1),
    })`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/bounds_tests.rs: `.function_instantiations.len()`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/bounds_tests.rs: `.signatures
        .push(Signature(vec![Struct(StructHandleIndex::new(3))]))`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/bounds_tests.rs: `.function_instantiations.push(FunctionInstantiation {
        handle: FunctionHandleIndex::new(0),
        type_parameters: SignatureIndex::new(1),
    })`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/bounds_tests.rs: `.function_instantiations.len()`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/bounds_tests.rs: `.friend_decls.push(ModuleHandle {
        address: AddressIdentifierIndex::new(m.address_identifiers.len() as TableIndex),
        name: IdentifierIndex::new(0),
    })`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/bounds_tests.rs: `.address_identifiers.len()`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/bounds_tests.rs: `.friend_decls.push(ModuleHandle {
        address: AddressIdentifierIndex::new(0),
        name: IdentifierIndex::new(m.identifiers.len() as TableIndex),
    })`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/bounds_tests.rs: `.identifiers.len()`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/bounds_tests.rs: `.signatures.clear()`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/bounds_tests.rs: `.signatures.len()`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/bounds_tests.rs: `.signatures
        .push(Signature(vec![Struct(StructHandleIndex::new(3))]))`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/bounds_tests.rs: `.signatures.len()`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/bounds_tests.rs: `.signatures.push(Signature(vec![TypeParameter(0)]))`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/bounds_tests.rs: `.signatures.len()`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/bounds_tests.rs: `.zeros_all()`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/constants_tests.rs: `module.constant_pool = vec![
        Constant {
            type_: SignatureToken::Bool,
            data: vec![0],
        },
        Constant {
            type_: SignatureToken::U8,
            data: vec![0],
        },
        Constant {
            type_: SignatureToken::U64,
            data: vec![0, 0, 0, 0, 0, 0, 0, 0],
        },
        Constant {
            type_: SignatureToken::U128,
            data: vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        },
        Constant {
            type_: SignatureToken::Address,
            data: vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        },
    ];`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/constants_tests.rs: `malformed(SignatureToken::U8, vec![0, 0]);`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/constants_tests.rs: `malformed(SignatureToken::U64, vec![0]);`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/constants_tests.rs: `malformed(SignatureToken::U128, vec![0]);`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/constants_tests.rs: `items.extend(item.clone());`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/constants_tests.rs: `items.extend(item);`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/constants_tests.rs: `(0..0xFFFF).for_each(|_| items.extend(item.clone()));`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/constants_tests.rs: `module.constant_pool = vec![
        // empty
        Constant {
            type_: tvec(SignatureToken::Bool),
            data: vec![0],
        },
        Constant {
            type_: tvec(tvec(SignatureToken::Bool)),
            data: vec![0],
        },
        Constant {
            type_: tvec(tvec(tvec(tvec(SignatureToken::Bool)))),
            data: vec![0],
        },
        Constant {
            type_: tvec(tvec(tvec(tvec(SignatureToken::Bool)))),
            data: double_vec(vec![0]),
        },
        // small
        Constant {
            type_: tvec(SignatureToken::Bool),
            data: vec![9, 1, 1, 1, 1, 1, 1, 1, 1, 1],
        },
        Constant {
            type_: tvec(SignatureToken::U8),
            data: vec![9, 1, 1, 1, 1, 1, 1, 1, 1, 1],
        },
        // large
        Constant {
            type_: tvec(SignatureToken::Bool),
            data: large_vec(vec![0]),
        },
        Constant {
            type_: tvec(SignatureToken::U8),
            data: large_vec(vec![0]),
        },
        Constant {
            type_: tvec(SignatureToken::U64),
            data: large_vec(vec![0, 0, 0, 0, 0, 0, 0, 0]),
        },
        Constant {
            type_: tvec(SignatureToken::U128),
            data: large_vec(vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]),
        },
        Constant {
            type_: tvec(SignatureToken::Address),
            data: large_vec(vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]),
        },
        // double large
        Constant {
            type_: tvec(tvec(SignatureToken::Bool)),
            data: double_vec(large_vec(vec![0])),
        },
        Constant {
            type_: tvec(tvec(SignatureToken::U8)),
            data: double_vec(large_vec(vec![0])),
        },
        Constant {
            type_: tvec(tvec(SignatureToken::U64)),
            data: double_vec(large_vec(vec![0, 0, 0, 0, 0, 0, 0, 0])),
        },
        Constant {
            type_: tvec(tvec(SignatureToken::U128)),
            data: double_vec(large_vec(vec![
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            ])),
        },
        Constant {
            type_: tvec(tvec(SignatureToken::Address)),
            data: double_vec(large_vec(vec![
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            ])),
        },
    ];`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/constants_tests.rs: `items.extend(item.clone());`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/constants_tests.rs: `items.extend(item);`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/constants_tests.rs: `(0..(0xFFFF + 1)).for_each(|_| items.extend(item.clone()));`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/constants_tests.rs: `malformed(tvec(SignatureToken::U64), vec![1, 0]);`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/constants_tests.rs: `malformed(
        tvec(SignatureToken::Address),
        vec![
            1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0,
        ],
    );`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/constants_tests.rs: `malformed(tvec(SignatureToken::U8), vec![0, 0]);`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/constants_tests.rs: `malformed(tvec(SignatureToken::U8), vec![0, 1]);`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/constants_tests.rs: `malformed(tvec(SignatureToken::U8), vec![2, 1, 1, 1]);`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/constants_tests.rs: `malformed(tvec(tvec(SignatureToken::U8)), double_vec(vec![0, 0]));`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/constants_tests.rs: `invalid_type(SignatureToken::TypeParameter(0), vec![0]);`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/constants_tests.rs: `invalid_type(SignatureToken::TypeParameter(0xFA), vec![0]);`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/constants_tests.rs: `invalid_type(tvec(SignatureToken::TypeParameter(0)), vec![0]);`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/constants_tests.rs: `invalid_type(tvec(SignatureToken::TypeParameter(0xAF)), vec![0]);`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/constants_tests.rs: `invalid_type(SignatureToken::Signer, vec![0]);`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/constants_tests.rs: `.extend(item.clone())`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/constants_tests.rs: `.extend(item)`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/constants_tests.rs: `.for_each(|_| items.extend(item.clone()))`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/constants_tests.rs: `.extend(item.clone())`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/constants_tests.rs: `.extend(item.clone())`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/constants_tests.rs: `.extend(item)`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/constants_tests.rs: `.for_each(|_| items.extend(item.clone()))`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/constants_tests.rs: `.extend(item.clone())`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/duplication_tests.rs: `m.friend_decls.push(handle.clone());`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/duplication_tests.rs: `m.friend_decls.push(handle);`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/duplication_tests.rs: `.friend_decls.push(handle.clone())`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/duplication_tests.rs: `.friend_decls.push(handle)`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/generic_ops_tests.rs: `module.function_defs[2].code = Some(CodeUnit {
        locals: SignatureIndex(0),
        code: vec![
            Bytecode::CallGeneric(FunctionInstantiationIndex(0)),
            Bytecode::Ret,
        ],
    });`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/generic_ops_tests.rs: `module.function_instantiations.push(FunctionInstantiation {
        handle: FunctionHandleIndex(0),
        type_parameters: SignatureIndex(2),
    });`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/generic_ops_tests.rs: `module.signatures.push(Signature(vec![SignatureToken::U64]));`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/generic_ops_tests.rs: `module.function_defs[2].code = Some(CodeUnit {
        locals: SignatureIndex(0),
        code: vec![Bytecode::Call(FunctionHandleIndex(1)), Bytecode::Ret],
    });`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/generic_ops_tests.rs: `module.function_defs[2].code = Some(CodeUnit {
        locals: SignatureIndex(0),
        code: vec![
            Bytecode::LdU64(10),
            Bytecode::PackGeneric(StructDefInstantiationIndex(0)),
            Bytecode::Pop,
            Bytecode::Ret,
        ],
    });`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/generic_ops_tests.rs: `module
        .struct_def_instantiations
        .push(StructDefInstantiation {
            def: StructDefinitionIndex(0),
            type_parameters: SignatureIndex(2),
        });`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/generic_ops_tests.rs: `module.signatures.push(Signature(vec![SignatureToken::U64]));`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/generic_ops_tests.rs: `module.function_defs[2].code = Some(CodeUnit {
        locals: SignatureIndex(0),
        code: vec![
            Bytecode::LdU64(10),
            Bytecode::Pack(StructDefinitionIndex(1)),
            Bytecode::Pop,
            Bytecode::Ret,
        ],
    });`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/generic_ops_tests.rs: `module.function_defs[2].code = Some(CodeUnit {
        locals: SignatureIndex(0),
        code: vec![
            Bytecode::LdU64(10),
            Bytecode::Pack(StructDefinitionIndex(0)),
            Bytecode::UnpackGeneric(StructDefInstantiationIndex(0)),
            Bytecode::Pop,
            Bytecode::Ret,
        ],
    });`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/generic_ops_tests.rs: `module
        .struct_def_instantiations
        .push(StructDefInstantiation {
            def: StructDefinitionIndex(0),
            type_parameters: SignatureIndex(2),
        });`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/generic_ops_tests.rs: `module.signatures.push(Signature(vec![SignatureToken::U64]));`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/generic_ops_tests.rs: `module.function_defs[2].code = Some(CodeUnit {
        locals: SignatureIndex(0),
        code: vec![
            Bytecode::LdU64(10),
            Bytecode::PackGeneric(StructDefInstantiationIndex(0)),
            Bytecode::Unpack(StructDefinitionIndex(1)),
            Bytecode::Pop,
            Bytecode::Ret,
        ],
    });`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/generic_ops_tests.rs: `module
        .struct_def_instantiations
        .push(StructDefInstantiation {
            def: StructDefinitionIndex(1),
            type_parameters: SignatureIndex(2),
        });`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/generic_ops_tests.rs: `module.signatures.push(Signature(vec![SignatureToken::U64]));`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/generic_ops_tests.rs: `module.function_defs[2].code = Some(CodeUnit {
        locals: SignatureIndex(0),
        code: vec![
            Bytecode::LdU64(10),
            Bytecode::Pack(StructDefinitionIndex(0)),
            Bytecode::MutBorrowFieldGeneric(FieldInstantiationIndex(0)),
            Bytecode::Pop,
            Bytecode::Ret,
        ],
    });`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/generic_ops_tests.rs: `module.field_instantiations.push(FieldInstantiation {
        handle: FieldHandleIndex(0),
        type_parameters: SignatureIndex(2),
    });`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/generic_ops_tests.rs: `module.field_handles.push(FieldHandle {
        owner: StructDefinitionIndex(0),
        field: 0,
    });`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/generic_ops_tests.rs: `module.signatures.push(Signature(vec![SignatureToken::U64]));`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/generic_ops_tests.rs: `module.function_defs[2].code = Some(CodeUnit {
        locals: SignatureIndex(0),
        code: vec![
            Bytecode::LdU64(10),
            Bytecode::PackGeneric(StructDefInstantiationIndex(0)),
            Bytecode::MutBorrowField(FieldHandleIndex(0)),
            Bytecode::Pop,
            Bytecode::Ret,
        ],
    });`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/generic_ops_tests.rs: `module
        .struct_def_instantiations
        .push(StructDefInstantiation {
            def: StructDefinitionIndex(1),
            type_parameters: SignatureIndex(2),
        });`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/generic_ops_tests.rs: `module.field_handles.push(FieldHandle {
        owner: StructDefinitionIndex(1),
        field: 0,
    });`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/generic_ops_tests.rs: `module.signatures.push(Signature(vec![SignatureToken::U64]));`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/generic_ops_tests.rs: `module.function_defs[2].code = Some(CodeUnit {
        locals: SignatureIndex(0),
        code: vec![
            Bytecode::LdU64(10),
            Bytecode::Pack(StructDefinitionIndex(0)),
            Bytecode::ImmBorrowFieldGeneric(FieldInstantiationIndex(0)),
            Bytecode::Pop,
            Bytecode::Ret,
        ],
    });`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/generic_ops_tests.rs: `module.field_instantiations.push(FieldInstantiation {
        handle: FieldHandleIndex(0),
        type_parameters: SignatureIndex(2),
    });`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/generic_ops_tests.rs: `module.field_handles.push(FieldHandle {
        owner: StructDefinitionIndex(0),
        field: 0,
    });`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/generic_ops_tests.rs: `module.signatures.push(Signature(vec![SignatureToken::U64]));`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/generic_ops_tests.rs: `module.function_defs[2].code = Some(CodeUnit {
        locals: SignatureIndex(0),
        code: vec![
            Bytecode::LdU64(10),
            Bytecode::PackGeneric(StructDefInstantiationIndex(0)),
            Bytecode::ImmBorrowField(FieldHandleIndex(0)),
            Bytecode::Pop,
            Bytecode::Ret,
        ],
    });`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/generic_ops_tests.rs: `module
        .struct_def_instantiations
        .push(StructDefInstantiation {
            def: StructDefinitionIndex(1),
            type_parameters: SignatureIndex(2),
        });`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/generic_ops_tests.rs: `module.field_handles.push(FieldHandle {
        owner: StructDefinitionIndex(1),
        field: 0,
    });`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/generic_ops_tests.rs: `module.signatures.push(Signature(vec![SignatureToken::U64]));`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/generic_ops_tests.rs: `module.function_defs[2]
        .acquires_global_resources
        .push(StructDefinitionIndex(2));`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/generic_ops_tests.rs: `module.function_defs[2].code = Some(CodeUnit {
        locals: SignatureIndex(0),
        code: vec![
            Bytecode::LdConst(ConstantPoolIndex(0)),
            Bytecode::MutBorrowGlobalGeneric(StructDefInstantiationIndex(0)),
            Bytecode::Pop,
            Bytecode::Ret,
        ],
    });`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/generic_ops_tests.rs: `module
        .struct_def_instantiations
        .push(StructDefInstantiation {
            def: StructDefinitionIndex(2),
            type_parameters: SignatureIndex(2),
        });`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/generic_ops_tests.rs: `module.signatures.push(Signature(vec![SignatureToken::U64]));`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/generic_ops_tests.rs: `module.function_defs[2]
        .acquires_global_resources
        .push(StructDefinitionIndex(3));`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/generic_ops_tests.rs: `module.function_defs[2].code = Some(CodeUnit {
        locals: SignatureIndex(0),
        code: vec![
            Bytecode::LdConst(ConstantPoolIndex(0)),
            Bytecode::MutBorrowGlobal(StructDefinitionIndex(3)),
            Bytecode::Pop,
            Bytecode::Ret,
        ],
    });`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/generic_ops_tests.rs: `module.function_defs[2]
        .acquires_global_resources
        .push(StructDefinitionIndex(2));`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/generic_ops_tests.rs: `module.function_defs[2].code = Some(CodeUnit {
        locals: SignatureIndex(0),
        code: vec![
            Bytecode::LdConst(ConstantPoolIndex(0)),
            Bytecode::ImmBorrowGlobalGeneric(StructDefInstantiationIndex(0)),
            Bytecode::Pop,
            Bytecode::Ret,
        ],
    });`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/generic_ops_tests.rs: `module
        .struct_def_instantiations
        .push(StructDefInstantiation {
            def: StructDefinitionIndex(2),
            type_parameters: SignatureIndex(2),
        });`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/generic_ops_tests.rs: `module.signatures.push(Signature(vec![SignatureToken::U64]));`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/generic_ops_tests.rs: `module.function_defs[2]
        .acquires_global_resources
        .push(StructDefinitionIndex(3));`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/generic_ops_tests.rs: `module.function_defs[2].code = Some(CodeUnit {
        locals: SignatureIndex(0),
        code: vec![
            Bytecode::LdConst(ConstantPoolIndex(0)),
            Bytecode::ImmBorrowGlobal(StructDefinitionIndex(3)),
            Bytecode::Pop,
            Bytecode::Ret,
        ],
    });`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/generic_ops_tests.rs: `module.function_defs[2].code = Some(CodeUnit {
        locals: SignatureIndex(0),
        code: vec![
            Bytecode::LdConst(ConstantPoolIndex(0)),
            Bytecode::ExistsGeneric(StructDefInstantiationIndex(0)),
            Bytecode::Pop,
            Bytecode::Ret,
        ],
    });`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/generic_ops_tests.rs: `module
        .struct_def_instantiations
        .push(StructDefInstantiation {
            def: StructDefinitionIndex(2),
            type_parameters: SignatureIndex(2),
        });`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/generic_ops_tests.rs: `module.signatures.push(Signature(vec![SignatureToken::U64]));`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/generic_ops_tests.rs: `module.function_defs[2].code = Some(CodeUnit {
        locals: SignatureIndex(0),
        code: vec![
            Bytecode::LdConst(ConstantPoolIndex(0)),
            Bytecode::Exists(StructDefinitionIndex(3)),
            Bytecode::Pop,
            Bytecode::Ret,
        ],
    });`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/generic_ops_tests.rs: `module.function_defs[2]
        .acquires_global_resources
        .push(StructDefinitionIndex(2));`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/generic_ops_tests.rs: `module.function_defs[2].code = Some(CodeUnit {
        locals: SignatureIndex(0),
        code: vec![
            Bytecode::LdConst(ConstantPoolIndex(0)),
            Bytecode::MoveFromGeneric(StructDefInstantiationIndex(0)),
            Bytecode::Unpack(StructDefinitionIndex(2)),
            Bytecode::Pop,
            Bytecode::Ret,
        ],
    });`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/generic_ops_tests.rs: `module
        .struct_def_instantiations
        .push(StructDefInstantiation {
            def: StructDefinitionIndex(2),
            type_parameters: SignatureIndex(2),
        });`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/generic_ops_tests.rs: `module.signatures.push(Signature(vec![SignatureToken::U64]));`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/generic_ops_tests.rs: `module.function_defs[2]
        .acquires_global_resources
        .push(StructDefinitionIndex(3));`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/generic_ops_tests.rs: `module.function_defs[2].code = Some(CodeUnit {
        locals: SignatureIndex(0),
        code: vec![
            Bytecode::LdConst(ConstantPoolIndex(0)),
            Bytecode::MoveFrom(StructDefinitionIndex(3)),
            Bytecode::UnpackGeneric(StructDefInstantiationIndex(0)),
            Bytecode::Pop,
            Bytecode::Ret,
        ],
    });`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/generic_ops_tests.rs: `module
        .struct_def_instantiations
        .push(StructDefInstantiation {
            def: StructDefinitionIndex(3),
            type_parameters: SignatureIndex(2),
        });`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/generic_ops_tests.rs: `module.signatures.push(Signature(vec![SignatureToken::U64]));`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/generic_ops_tests.rs: `module.function_defs[2].code = Some(CodeUnit {
        locals: SignatureIndex(0),
        code: vec![
            Bytecode::MoveLoc(0),
            Bytecode::LdU64(10),
            Bytecode::Pack(StructDefinitionIndex(2)),
            Bytecode::MoveToGeneric(StructDefInstantiationIndex(0)),
            Bytecode::Ret,
        ],
    });`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/generic_ops_tests.rs: `module
        .struct_def_instantiations
        .push(StructDefInstantiation {
            def: StructDefinitionIndex(2),
            type_parameters: SignatureIndex(2),
        });`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/generic_ops_tests.rs: `module.signatures.push(Signature(vec![SignatureToken::U64]));`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/generic_ops_tests.rs: `module.function_defs[2].code = Some(CodeUnit {
        locals: SignatureIndex(0),
        code: vec![
            Bytecode::MoveLoc(0),
            Bytecode::LdU64(10),
            Bytecode::PackGeneric(StructDefInstantiationIndex(0)),
            Bytecode::MoveTo(StructDefinitionIndex(3)),
            Bytecode::Ret,
        ],
    });`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/generic_ops_tests.rs: `module
        .struct_def_instantiations
        .push(StructDefInstantiation {
            def: StructDefinitionIndex(3),
            type_parameters: SignatureIndex(2),
        });`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/generic_ops_tests.rs: `module.signatures.push(Signature(vec![SignatureToken::U64]));`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/generic_ops_tests.rs: `.function_instantiations.push(FunctionInstantiation {
        handle: FunctionHandleIndex(0),
        type_parameters: SignatureIndex(2),
    })`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/generic_ops_tests.rs: `.signatures.push(Signature(vec![SignatureToken::U64]))`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/generic_ops_tests.rs: `.struct_def_instantiations
        .push(StructDefInstantiation {
            def: StructDefinitionIndex(0),
            type_parameters: SignatureIndex(2),
        })`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/generic_ops_tests.rs: `.signatures.push(Signature(vec![SignatureToken::U64]))`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/generic_ops_tests.rs: `.struct_def_instantiations
        .push(StructDefInstantiation {
            def: StructDefinitionIndex(0),
            type_parameters: SignatureIndex(2),
        })`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/generic_ops_tests.rs: `.signatures.push(Signature(vec![SignatureToken::U64]))`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/generic_ops_tests.rs: `.struct_def_instantiations
        .push(StructDefInstantiation {
            def: StructDefinitionIndex(1),
            type_parameters: SignatureIndex(2),
        })`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/generic_ops_tests.rs: `.signatures.push(Signature(vec![SignatureToken::U64]))`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/generic_ops_tests.rs: `.field_instantiations.push(FieldInstantiation {
        handle: FieldHandleIndex(0),
        type_parameters: SignatureIndex(2),
    })`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/generic_ops_tests.rs: `.field_handles.push(FieldHandle {
        owner: StructDefinitionIndex(0),
        field: 0,
    })`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/generic_ops_tests.rs: `.signatures.push(Signature(vec![SignatureToken::U64]))`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/generic_ops_tests.rs: `.struct_def_instantiations
        .push(StructDefInstantiation {
            def: StructDefinitionIndex(1),
            type_parameters: SignatureIndex(2),
        })`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/generic_ops_tests.rs: `.field_handles.push(FieldHandle {
        owner: StructDefinitionIndex(1),
        field: 0,
    })`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/generic_ops_tests.rs: `.signatures.push(Signature(vec![SignatureToken::U64]))`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/generic_ops_tests.rs: `.field_instantiations.push(FieldInstantiation {
        handle: FieldHandleIndex(0),
        type_parameters: SignatureIndex(2),
    })`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/generic_ops_tests.rs: `.field_handles.push(FieldHandle {
        owner: StructDefinitionIndex(0),
        field: 0,
    })`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/generic_ops_tests.rs: `.signatures.push(Signature(vec![SignatureToken::U64]))`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/generic_ops_tests.rs: `.struct_def_instantiations
        .push(StructDefInstantiation {
            def: StructDefinitionIndex(1),
            type_parameters: SignatureIndex(2),
        })`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/generic_ops_tests.rs: `.field_handles.push(FieldHandle {
        owner: StructDefinitionIndex(1),
        field: 0,
    })`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/generic_ops_tests.rs: `.signatures.push(Signature(vec![SignatureToken::U64]))`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/generic_ops_tests.rs: `.acquires_global_resources
        .push(StructDefinitionIndex(2))`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/generic_ops_tests.rs: `.struct_def_instantiations
        .push(StructDefInstantiation {
            def: StructDefinitionIndex(2),
            type_parameters: SignatureIndex(2),
        })`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/generic_ops_tests.rs: `.signatures.push(Signature(vec![SignatureToken::U64]))`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/generic_ops_tests.rs: `.acquires_global_resources
        .push(StructDefinitionIndex(3))`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/generic_ops_tests.rs: `.acquires_global_resources
        .push(StructDefinitionIndex(2))`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/generic_ops_tests.rs: `.struct_def_instantiations
        .push(StructDefInstantiation {
            def: StructDefinitionIndex(2),
            type_parameters: SignatureIndex(2),
        })`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/generic_ops_tests.rs: `.signatures.push(Signature(vec![SignatureToken::U64]))`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/generic_ops_tests.rs: `.acquires_global_resources
        .push(StructDefinitionIndex(3))`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/generic_ops_tests.rs: `.struct_def_instantiations
        .push(StructDefInstantiation {
            def: StructDefinitionIndex(2),
            type_parameters: SignatureIndex(2),
        })`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/generic_ops_tests.rs: `.signatures.push(Signature(vec![SignatureToken::U64]))`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/generic_ops_tests.rs: `.acquires_global_resources
        .push(StructDefinitionIndex(2))`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/generic_ops_tests.rs: `.struct_def_instantiations
        .push(StructDefInstantiation {
            def: StructDefinitionIndex(2),
            type_parameters: SignatureIndex(2),
        })`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/generic_ops_tests.rs: `.signatures.push(Signature(vec![SignatureToken::U64]))`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/generic_ops_tests.rs: `.acquires_global_resources
        .push(StructDefinitionIndex(3))`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/generic_ops_tests.rs: `.struct_def_instantiations
        .push(StructDefInstantiation {
            def: StructDefinitionIndex(3),
            type_parameters: SignatureIndex(2),
        })`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/generic_ops_tests.rs: `.signatures.push(Signature(vec![SignatureToken::U64]))`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/generic_ops_tests.rs: `.struct_def_instantiations
        .push(StructDefInstantiation {
            def: StructDefinitionIndex(2),
            type_parameters: SignatureIndex(2),
        })`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/generic_ops_tests.rs: `.signatures.push(Signature(vec![SignatureToken::U64]))`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/generic_ops_tests.rs: `.struct_def_instantiations
        .push(StructDefInstantiation {
            def: StructDefinitionIndex(3),
            type_parameters: SignatureIndex(2),
        })`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/generic_ops_tests.rs: `.signatures.push(Signature(vec![SignatureToken::U64]))`
$DIR/language/bytecode-verifier/bytecode-verifier-tests/src/unit_tests/signature_tests.rs: `m.signatures[0] = Signature(vec![Reference(Box::new(Reference(Box::new(
        SignatureToken::Bool,
    ))))]);`
$DIR/language/bytecode-verifier/invalid-mutations/src/bounds.rs: `.any(|x| x == variant)`
$DIR/language/compiler/ir-to-bytecode/src/parser.rs: `good_chars.push(0x0A);`
$DIR/language/compiler/ir-to-bytecode/src/parser.rs: `good_chars.push(0x09);`
$DIR/language/compiler/ir-to-bytecode/src/parser.rs: `bad_chars.append(&mut (0x0B..=0x1F).collect::<Vec<_>>());`
$DIR/language/compiler/ir-to-bytecode/src/parser.rs: `bad_chars.push(0x7F);`
$DIR/language/compiler/ir-to-bytecode/src/parser.rs: `good_chars.push(bad_char);`
$DIR/language/compiler/ir-to-bytecode/src/parser.rs: `good_chars.pop();`
$DIR/language/compiler/ir-to-bytecode/src/parser.rs: `.collect::<Vec<u8>>()`
$DIR/language/compiler/ir-to-bytecode/src/parser.rs: `.push(0x0A)`
$DIR/language/compiler/ir-to-bytecode/src/parser.rs: `.push(0x09)`
$DIR/language/compiler/ir-to-bytecode/src/parser.rs: `.collect::<Vec<_>>()`
$DIR/language/compiler/ir-to-bytecode/src/parser.rs: `.append(&mut (0x0B..=0x1F).collect::<Vec<_>>())`
$DIR/language/compiler/ir-to-bytecode/src/parser.rs: `.collect::<Vec<_>>()`
$DIR/language/compiler/ir-to-bytecode/src/parser.rs: `.push(0x7F)`
$DIR/language/compiler/ir-to-bytecode/src/parser.rs: `.push(bad_char)`
$DIR/language/compiler/ir-to-bytecode/src/parser.rs: `.pop()`
$DIR/language/compiler/src/unit_tests/cfg_tests.rs: `cfg.display();`
$DIR/language/compiler/src/unit_tests/cfg_tests.rs: `cfg.display();`
$DIR/language/compiler/src/unit_tests/cfg_tests.rs: `cfg.display();`
$DIR/language/compiler/src/unit_tests/cfg_tests.rs: `cfg.display();`
$DIR/language/compiler/src/unit_tests/cfg_tests.rs: `cfg.display();`
$DIR/language/compiler/src/unit_tests/cfg_tests.rs: `cfg.display();`
$DIR/language/compiler/src/unit_tests/cfg_tests.rs: `cfg.display();`
$DIR/language/compiler/src/unit_tests/cfg_tests.rs: `cfg.display();`
$DIR/language/compiler/src/unit_tests/cfg_tests.rs: `cfg.display();`
$DIR/language/compiler/src/unit_tests/cfg_tests.rs: `cfg.display();`
$DIR/language/compiler/src/unit_tests/cfg_tests.rs: `cfg.display();`
$DIR/language/compiler/src/unit_tests/cfg_tests.rs: `.code()`
$DIR/language/compiler/src/unit_tests/cfg_tests.rs: `.display()`
$DIR/language/compiler/src/unit_tests/cfg_tests.rs: `.code()`
$DIR/language/compiler/src/unit_tests/cfg_tests.rs: `.display()`
$DIR/language/compiler/src/unit_tests/cfg_tests.rs: `.code()`
$DIR/language/compiler/src/unit_tests/cfg_tests.rs: `.display()`
$DIR/language/compiler/src/unit_tests/cfg_tests.rs: `.code()`
$DIR/language/compiler/src/unit_tests/cfg_tests.rs: `.display()`
$DIR/language/compiler/src/unit_tests/cfg_tests.rs: `.code()`
$DIR/language/compiler/src/unit_tests/cfg_tests.rs: `.display()`
$DIR/language/compiler/src/unit_tests/cfg_tests.rs: `.code()`
$DIR/language/compiler/src/unit_tests/cfg_tests.rs: `.display()`
$DIR/language/compiler/src/unit_tests/cfg_tests.rs: `.code()`
$DIR/language/compiler/src/unit_tests/cfg_tests.rs: `.display()`
$DIR/language/compiler/src/unit_tests/cfg_tests.rs: `.code()`
$DIR/language/compiler/src/unit_tests/cfg_tests.rs: `.display()`
$DIR/language/compiler/src/unit_tests/cfg_tests.rs: `.code()`
$DIR/language/compiler/src/unit_tests/cfg_tests.rs: `.display()`
$DIR/language/compiler/src/unit_tests/cfg_tests.rs: `.code()`
$DIR/language/compiler/src/unit_tests/cfg_tests.rs: `.display()`
$DIR/language/compiler/src/unit_tests/cfg_tests.rs: `.code()`
$DIR/language/compiler/src/unit_tests/cfg_tests.rs: `.display()`
$DIR/language/compiler/src/unit_tests/function_tests.rs: `code.push_str(&generate_function("foo_func", 128, 127));`
$DIR/language/compiler/src/unit_tests/function_tests.rs: `code.push('}');`
$DIR/language/compiler/src/unit_tests/function_tests.rs: `.push_str(&generate_function("foo_func", 128, 127))`
$DIR/language/compiler/src/unit_tests/function_tests.rs: `.push('}')`
$DIR/language/compiler/src/unit_tests/serializer_tests.rs: `.serialize(&mut binary)`
$DIR/language/diem-framework/releases/src/legacy/transaction_scripts.rs: `.files()`
$DIR/language/diem-framework/releases/src/tests.rs: `bytecode_verifier::verify_module(module).unwrap_or_else(|_| {
                panic!(
                    "failed to verify module {} from version {}",
                    module.self_id(),
                    ver
                )
            });`
$DIR/language/diem-framework/releases/src/tests.rs: `bytecode_verifier::dependencies::verify_module(
                module,
                modules
                    .iter()
                    .enumerate()
                    .flat_map(|(j, module)| if i == j { None } else { Some(module) }),
            )
            .unwrap();`
$DIR/language/diem-framework/releases/src/tests.rs: `.map(|blob| {
                CompiledModule::deserialize(blob)
                    .unwrap_or_else(|_| panic!("unable to deserialize module from version {}", ver))
            })`
$DIR/language/diem-framework/releases/src/tests.rs: `.collect::<Vec<_>>()`
$DIR/language/diem-framework/releases/src/tests.rs: `.enumerate()`
$DIR/language/diem-framework/releases/src/tests.rs: `.unwrap_or_else(|_| {
                panic!(
                    "failed to verify module {} from version {}",
                    module.self_id(),
                    ver
                )
            })`
$DIR/language/diem-framework/releases/src/tests.rs: `.enumerate()`
$DIR/language/diem-framework/releases/src/tests.rs: `.flat_map(|(j, module)| if i == j { None } else { Some(module) })`
$DIR/language/diem-framework/tests/generated_files.rs: `.is_ok()`
$DIR/language/diem-tools/transaction-replay/src/unit_tests/bisection_tests.rs: `check(vec![true, true, true, true], None);`
$DIR/language/diem-tools/transaction-replay/src/unit_tests/bisection_tests.rs: `check(vec![true, true, true, false], Some(3));`
$DIR/language/diem-tools/transaction-replay/src/unit_tests/bisection_tests.rs: `check(vec![true, true, false, false], Some(2));`
$DIR/language/diem-tools/transaction-replay/src/unit_tests/bisection_tests.rs: `override_changeset
        .publish_resource(
            address,
            AccountResource::struct_tag(),
            bcs::to_bytes(&AccountResource::new(
                0,
                vec![],
                None,
                None,
                EventHandle::new(EventKey::new_from_address(&address, 0), 0),
                EventHandle::new(EventKey::new_from_address(&address, 1), 1),
            ))
            .unwrap(),
        )
        .unwrap();`
$DIR/language/diem-tools/transaction-replay/src/unit_tests/bisection_tests.rs: `script_path.push("examples/account_exists.move");`
$DIR/language/diem-tools/transaction-replay/src/unit_tests/bisection_tests.rs: `.publish_resource(
            address,
            AccountResource::struct_tag(),
            bcs::to_bytes(&AccountResource::new(
                0,
                vec![],
                None,
                None,
                EventHandle::new(EventKey::new_from_address(&address, 0), 0),
                EventHandle::new(EventKey::new_from_address(&address, 1), 1),
            ))
            .unwrap(),
        )`
$DIR/language/diem-tools/transaction-replay/src/unit_tests/bisection_tests.rs: `.push("examples/account_exists.move")`
$DIR/language/diem-tools/writeset-transaction-generator/src/release_flow/unit_tests/release_tests.rs: `module.identifiers[0] = Identifier::new(format!("test_{:?}", i)).unwrap();`
$DIR/language/diem-tools/writeset-transaction-generator/src/release_flow/unit_tests/release_tests.rs: `verify_module(&module).expect("invalid module");`
$DIR/language/diem-tools/writeset-transaction-generator/src/release_flow/unit_tests/release_tests.rs: `module.serialize(&mut bytes).unwrap();`
$DIR/language/diem-tools/writeset-transaction-generator/src/release_flow/unit_tests/release_tests.rs: `modules_and_bytes.push((bytes.clone(), module.clone()));`
$DIR/language/diem-tools/writeset-transaction-generator/src/release_flow/unit_tests/release_tests.rs: `modules.push(module);`
$DIR/language/diem-tools/writeset-transaction-generator/src/release_flow/unit_tests/release_tests.rs: `modules_bytes.push(bytes);`
$DIR/language/diem-tools/writeset-transaction-generator/src/release_flow/unit_tests/release_tests.rs: `module.identifiers[0] = Identifier::new(format!("test_{:?}", 9)).unwrap();`
$DIR/language/diem-tools/writeset-transaction-generator/src/release_flow/unit_tests/release_tests.rs: `verify_module(&module).expect("invalid module");`
$DIR/language/diem-tools/writeset-transaction-generator/src/release_flow/unit_tests/release_tests.rs: `replace_module.serialize(&mut replace_module_bytes).unwrap();`
$DIR/language/diem-tools/writeset-transaction-generator/src/release_flow/unit_tests/release_tests.rs: `replace_modules.pop();`
$DIR/language/diem-tools/writeset-transaction-generator/src/release_flow/unit_tests/release_tests.rs: `replace_modules.push((replace_module_bytes.clone(), replace_module.clone()));`
$DIR/language/diem-tools/writeset-transaction-generator/src/release_flow/unit_tests/release_tests.rs: `new_modules.pop();`
$DIR/language/diem-tools/writeset-transaction-generator/src/release_flow/unit_tests/release_tests.rs: `old_modules.swap_remove(0);`
$DIR/language/diem-tools/writeset-transaction-generator/src/release_flow/unit_tests/release_tests.rs: `new_modules.pop();`
$DIR/language/diem-tools/writeset-transaction-generator/src/release_flow/unit_tests/release_tests.rs: `new_modules.push((replace_module_bytes.clone(), replace_module.clone()));`
$DIR/language/diem-tools/writeset-transaction-generator/src/release_flow/unit_tests/release_tests.rs: `new_modules.swap_remove(0);`
$DIR/language/diem-tools/writeset-transaction-generator/src/release_flow/unit_tests/release_tests.rs: `new_modules.pop();`
$DIR/language/diem-tools/writeset-transaction-generator/src/release_flow/unit_tests/release_tests.rs: `new_modules.push((replace_module_bytes.clone(), replace_module.clone()));`
$DIR/language/diem-tools/writeset-transaction-generator/src/release_flow/unit_tests/release_tests.rs: `old_modules.swap_remove(0);`
$DIR/language/diem-tools/writeset-transaction-generator/src/release_flow/unit_tests/release_tests.rs: `new_modules.pop();`
$DIR/language/diem-tools/writeset-transaction-generator/src/release_flow/unit_tests/release_tests.rs: `new_modules.pop();`
$DIR/language/diem-tools/writeset-transaction-generator/src/release_flow/unit_tests/release_tests.rs: `new_modules.push((replace_module_bytes.clone(), replace_module.clone()));`
$DIR/language/diem-tools/writeset-transaction-generator/src/release_flow/unit_tests/release_tests.rs: `old_modules.swap_remove(0);`
$DIR/language/diem-tools/writeset-transaction-generator/src/release_flow/unit_tests/release_tests.rs: `new_modules.pop();`
$DIR/language/diem-tools/writeset-transaction-generator/src/release_flow/unit_tests/release_tests.rs: `new_modules.pop();`
$DIR/language/diem-tools/writeset-transaction-generator/src/release_flow/unit_tests/release_tests.rs: `new_modules.push((replace_module_bytes.clone(), replace_module));`
$DIR/language/diem-tools/writeset-transaction-generator/src/release_flow/unit_tests/release_tests.rs: `new_modules.swap(0, 2);`
$DIR/language/diem-tools/writeset-transaction-generator/src/release_flow/unit_tests/release_tests.rs: `old_modules.swap_remove(0);`
$DIR/language/diem-tools/writeset-transaction-generator/src/release_flow/unit_tests/release_tests.rs: `new_modules.swap(4, 5);`
$DIR/language/diem-tools/writeset-transaction-generator/src/release_flow/unit_tests/release_tests.rs: `.serialize(&mut bytes)`
$DIR/language/diem-tools/writeset-transaction-generator/src/release_flow/unit_tests/release_tests.rs: `.push((bytes.clone(), module.clone()))`
$DIR/language/diem-tools/writeset-transaction-generator/src/release_flow/unit_tests/release_tests.rs: `.push(module)`
$DIR/language/diem-tools/writeset-transaction-generator/src/release_flow/unit_tests/release_tests.rs: `.push(bytes)`
$DIR/language/diem-tools/writeset-transaction-generator/src/release_flow/unit_tests/release_tests.rs: `.serialize(&mut replace_module_bytes)`
$DIR/language/diem-tools/writeset-transaction-generator/src/release_flow/unit_tests/release_tests.rs: `.split_off(1)`
$DIR/language/diem-tools/writeset-transaction-generator/src/release_flow/unit_tests/release_tests.rs: `.split_off(1)`
$DIR/language/diem-tools/writeset-transaction-generator/src/release_flow/unit_tests/release_tests.rs: `.pop()`
$DIR/language/diem-tools/writeset-transaction-generator/src/release_flow/unit_tests/release_tests.rs: `.push((replace_module_bytes.clone(), replace_module.clone()))`
$DIR/language/diem-tools/writeset-transaction-generator/src/release_flow/unit_tests/release_tests.rs: `.pop()`
$DIR/language/diem-tools/writeset-transaction-generator/src/release_flow/unit_tests/release_tests.rs: `.swap_remove(0)`
$DIR/language/diem-tools/writeset-transaction-generator/src/release_flow/unit_tests/release_tests.rs: `.pop()`
$DIR/language/diem-tools/writeset-transaction-generator/src/release_flow/unit_tests/release_tests.rs: `.push((replace_module_bytes.clone(), replace_module.clone()))`
$DIR/language/diem-tools/writeset-transaction-generator/src/release_flow/unit_tests/release_tests.rs: `.swap_remove(0)`
$DIR/language/diem-tools/writeset-transaction-generator/src/release_flow/unit_tests/release_tests.rs: `.pop()`
$DIR/language/diem-tools/writeset-transaction-generator/src/release_flow/unit_tests/release_tests.rs: `.push((replace_module_bytes.clone(), replace_module.clone()))`
$DIR/language/diem-tools/writeset-transaction-generator/src/release_flow/unit_tests/release_tests.rs: `.swap_remove(0)`
$DIR/language/diem-tools/writeset-transaction-generator/src/release_flow/unit_tests/release_tests.rs: `.pop()`
$DIR/language/diem-tools/writeset-transaction-generator/src/release_flow/unit_tests/release_tests.rs: `.pop()`
$DIR/language/diem-tools/writeset-transaction-generator/src/release_flow/unit_tests/release_tests.rs: `.push((replace_module_bytes.clone(), replace_module.clone()))`
$DIR/language/diem-tools/writeset-transaction-generator/src/release_flow/unit_tests/release_tests.rs: `.swap_remove(0)`
$DIR/language/diem-tools/writeset-transaction-generator/src/release_flow/unit_tests/release_tests.rs: `.pop()`
$DIR/language/diem-tools/writeset-transaction-generator/src/release_flow/unit_tests/release_tests.rs: `.pop()`
$DIR/language/diem-tools/writeset-transaction-generator/src/release_flow/unit_tests/release_tests.rs: `.push((replace_module_bytes.clone(), replace_module))`
$DIR/language/diem-tools/writeset-transaction-generator/src/release_flow/unit_tests/release_tests.rs: `.swap(0, 2)`
$DIR/language/diem-tools/writeset-transaction-generator/src/release_flow/unit_tests/release_tests.rs: `.swap_remove(0)`
$DIR/language/diem-tools/writeset-transaction-generator/src/release_flow/unit_tests/release_tests.rs: `.swap(4, 5)`
$DIR/language/diem-vm/mvhashmap/src/unit_tests/mod.rs: `mvtbl.write(&ap1, 10, Some(vec![0, 0, 0])).unwrap();`
$DIR/language/diem-vm/mvhashmap/src/unit_tests/mod.rs: `mvtbl.skip(&ap2, 20).unwrap();`
$DIR/language/diem-vm/mvhashmap/src/unit_tests/mod.rs: `mvtbl.write(&ap2, 10, Some(vec![0, 0, 0])).unwrap();`
$DIR/language/diem-vm/mvhashmap/src/unit_tests/mod.rs: `.read(&ap1, 5)`
$DIR/language/diem-vm/mvhashmap/src/unit_tests/mod.rs: `.read(&ap1, 10)`
$DIR/language/diem-vm/mvhashmap/src/unit_tests/mod.rs: `.read(&ap1, 15)`
$DIR/language/diem-vm/mvhashmap/src/unit_tests/mod.rs: `.write(&ap1, 10, Some(vec![0, 0, 0]))`
$DIR/language/diem-vm/mvhashmap/src/unit_tests/mod.rs: `.read(&ap1, 15)`
$DIR/language/diem-vm/mvhashmap/src/unit_tests/mod.rs: `.skip(&ap2, 20)`
$DIR/language/diem-vm/mvhashmap/src/unit_tests/mod.rs: `.write(&ap2, 10, Some(vec![0, 0, 0]))`
$DIR/language/diem-vm/mvhashmap/src/unit_tests/mod.rs: `.read(&ap2, 25)`
$DIR/language/diem-vm/parallel-executor/src/unit_tests/mod.rs: `.map(|_| random::<[u8; 32]>())`
$DIR/language/diem-vm/parallel-executor/src/unit_tests/mod.rs: `.collect()`
$DIR/language/diem-vm/parallel-executor/src/unit_tests/mod.rs: `.map(|_| random::<[u8; 32]>())`
$DIR/language/diem-vm/parallel-executor/src/unit_tests/mod.rs: `.collect()`
$DIR/language/diem-vm/parallel-executor/src/unit_tests/mod.rs: `.map(|key| (*key, random::<u64>()))`
$DIR/language/diem-vm/parallel-executor/src/unit_tests/mod.rs: `.collect::<Vec<_>>()`
$DIR/language/diem-vm/parallel-executor/src/unit_tests/mod.rs: `.map(|_| random::<[u8; 32]>())`
$DIR/language/diem-vm/parallel-executor/src/unit_tests/mod.rs: `.collect()`
$DIR/language/diem-vm/parallel-executor/src/unit_tests/mod.rs: `.map(|_| random::<[u8; 32]>())`
$DIR/language/diem-vm/parallel-executor/src/unit_tests/mod.rs: `.collect()`
$DIR/language/diem-vm/src/diem_vm_impl.rs: `assert_send::<DiemVM>();`
$DIR/language/diem-vm/src/diem_vm_impl.rs: `assert_sync::<DiemVM>();`
$DIR/language/diem-vm/src/diem_vm_impl.rs: `assert_send::<MoveVM>();`
$DIR/language/diem-vm/src/unit_tests/script_to_script_function_tests.rs: `.compiled_bytes()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `executor.set_golden_file(current_function_name!());`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `executor.execute_and_apply(
        blessed
            .transaction()
            .script(encode_create_parent_vasp_account_script(
                account_config::xus_tag(),
                0,
                *vasp_a.address(),
                vasp_a.auth_key_prefix(),
                vec![],
                true,
            ))
            .sequence_number(tc_sequence_number)
            .ttl(ttl)
            .sign(),
    );`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `executor.execute_and_apply(
        blessed
            .transaction()
            .script(encode_create_parent_vasp_account_script(
                account_config::xus_tag(),
                0,
                *vasp_b.address(),
                vasp_b.auth_key_prefix(),
                vec![],
                true,
            ))
            .sequence_number(tc_sequence_number.checked_add(1).unwrap())
            .ttl(ttl)
            .sign(),
    );`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `executor.execute_and_apply(
        vasp_a
            .transaction()
            .script(encode_create_child_vasp_account_script(
                account_config::xus_tag(),
                *vasp_a_child.address(),
                vasp_a_child.auth_key_prefix(),
                true,
                0,
            ))
            .sequence_number(0)
            .ttl(ttl)
            .sign(),
    );`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `executor.execute_and_apply(
        vasp_b
            .transaction()
            .script(encode_create_child_vasp_account_script(
                account_config::xus_tag(),
                *vasp_b_child.address(),
                vasp_b_child.auth_key_prefix(),
                true,
                0,
            ))
            .sequence_number(0)
            .ttl(ttl)
            .sign(),
    );`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `executor.execute_and_apply(
        diem_root
            .transaction()
            .write_set(encode_add_account_limits_admin_script(*vasp_a.address()))
            .sequence_number(dr_sequence_number)
            .sign(),
    );`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `executor.execute_and_apply(
        diem_root
            .transaction()
            .write_set(encode_add_account_limits_admin_script(*vasp_b.address()))
            .sequence_number(dr_sequence_number.checked_add(1).unwrap())
            .sign(),
    );`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `executor.execute_and_apply(
        dd.transaction()
            .script(encode_peer_to_peer_with_metadata_script(
                account_config::xus_tag(),
                *vasp_a.address(),
                2 * mint_amount,
                vec![],
                vec![],
            ))
            .sequence_number(dd_sequence_number)
            .ttl(ttl)
            .sign(),
    );`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `executor.execute_and_apply(
        dd.transaction()
            .script(encode_peer_to_peer_with_metadata_script(
                account_config::xus_tag(),
                *vasp_b.address(),
                2 * mint_amount,
                vec![],
                vec![],
            ))
            .sequence_number(dd_sequence_number.checked_add(1).unwrap())
            .ttl(ttl)
            .sign(),
    );`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `executor.execute_and_apply(
        blessed
            .transaction()
            .script(encode_update_account_limit_window_info_script(
                *vasp_a.address(),
                0,
                *vasp_a.address(),
            ))
            .sequence_number(tc_sequence_number.checked_add(2).unwrap())
            .ttl(ttl)
            .sign(),
    );`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `executor.execute_and_apply(
        blessed
            .transaction()
            .script(encode_update_account_limit_definition_script(
                *vasp_a.address(),
                mint_amount,
                0,
                0,
                0,
            ))
            .sequence_number(tc_sequence_number.checked_add(3).unwrap())
            .ttl(ttl)
            .sign(),
    );`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `assert_aborted_with(output, 776);`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `assert_aborted_with(output, 776);`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `executor.execute_and_apply(
        vasp_a
            .transaction()
            .script(encode_peer_to_peer_with_metadata_script(
                account_config::xus_tag(),
                *vasp_a_child.address(),
                mint_amount + 1,
                vec![],
                vec![],
            ))
            .sequence_number(1)
            .ttl(ttl)
            .sign(),
    );`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `executor.execute_and_apply(
        vasp_a_child
            .transaction()
            .script(encode_peer_to_peer_with_metadata_script(
                account_config::xus_tag(),
                *vasp_b_child.address(),
                mint_amount + 1,
                vec![],
                vec![],
            ))
            .sequence_number(0)
            .ttl(ttl)
            .sign(),
    );`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `executor.execute_and_apply(
        vasp_b_child
            .transaction()
            .script(encode_peer_to_peer_with_metadata_script(
                account_config::xus_tag(),
                *vasp_a_child.address(),
                mint_amount,
                vec![],
                vec![],
            ))
            .sequence_number(0)
            .ttl(ttl)
            .sign(),
    );`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `assert_aborted_with(output, 776);`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `executor.set_block_time(prev_block_time + window_micros);`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `executor.new_block();`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `executor.execute_and_apply(
        blessed
            .transaction()
            .script(encode_update_account_limit_definition_script(
                *vasp_a.address(),
                std::u64::MAX, // unlimit inflow
                1000,          // set outflow to 1000
                0,
                0,
            ))
            .sequence_number(tc_sequence_number.checked_add(4).unwrap())
            .ttl(ttl)
            .sign(),
    );`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `executor.execute_and_apply(
        vasp_a
            .transaction()
            .script(encode_peer_to_peer_with_metadata_script(
                account_config::xus_tag(),
                *vasp_a_child.address(),
                1001,
                vec![],
                vec![],
            ))
            .sequence_number(2)
            .ttl(ttl)
            .sign(),
    );`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `executor.execute_and_apply(
        vasp_a_child
            .transaction()
            .script(encode_peer_to_peer_with_metadata_script(
                account_config::xus_tag(),
                *vasp_b_child.address(),
                1000,
                vec![],
                vec![],
            ))
            .sequence_number(1)
            .ttl(ttl)
            .sign(),
    );`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `assert_aborted_with(output, 1544);`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `assert_aborted_with(output, 1544);`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `assert_aborted_with(output, 1544);`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `executor.set_block_time(prev_block_time + window_micros);`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `executor.new_block();`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `executor.execute_and_apply(
            blessed
                .transaction()
                .script(encode_update_account_limit_definition_script(
                    *vasp_a.address(),
                    0,
                    std::u64::MAX, // unlimit outflow
                    a_balance,     // set max holding to the current balance of A
                    0,
                ))
                .sequence_number(tc_sequence_number.checked_add(5).unwrap())
                .ttl(ttl)
                .sign(),
        );`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `executor.execute_and_apply(
            blessed
                .transaction()
                .script(encode_update_account_limit_window_info_script(
                    *vasp_a.address(),
                    a_balance,
                    *vasp_a.address(),
                ))
                .sequence_number(tc_sequence_number.checked_add(6).unwrap())
                .ttl(ttl)
                .sign(),
        );`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `assert_aborted_with(output, 776);`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `executor.execute_and_apply(
        vasp_a
            .transaction()
            .script(encode_peer_to_peer_with_metadata_script(
                account_config::xus_tag(),
                *vasp_b_child.address(),
                10,
                vec![],
                vec![],
            ))
            .sequence_number(3)
            .ttl(ttl)
            .sign(),
    );`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `executor.execute_and_apply(
        vasp_b
            .transaction()
            .script(encode_peer_to_peer_with_metadata_script(
                account_config::xus_tag(),
                *vasp_a_child.address(),
                10,
                vec![],
                vec![],
            ))
            .sequence_number(1)
            .ttl(ttl)
            .sign(),
    );`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `assert_aborted_with(output, 776);`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `executor.execute_and_apply(
        vasp_a_child
            .transaction()
            .script(encode_peer_to_peer_with_metadata_script(
                account_config::xus_tag(),
                *vasp_a.address(),
                1100,
                vec![],
                vec![],
            ))
            .sequence_number(2)
            .ttl(ttl)
            .sign(),
    );`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `assert_aborted_with(output, 776);`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `executor.set_block_time(prev_block_time + window_micros);`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `executor.new_block();`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `assert_aborted_with(output, 776);`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.set_golden_file(current_function_name!())`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.create_raw_account()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.create_raw_account()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.create_raw_account()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.create_raw_account()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.execute_and_apply(
        blessed
            .transaction()
            .script(encode_create_parent_vasp_account_script(
                account_config::xus_tag(),
                0,
                *vasp_a.address(),
                vasp_a.auth_key_prefix(),
                vec![],
                true,
            ))
            .sequence_number(tc_sequence_number)
            .ttl(ttl)
            .sign(),
    )`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.transaction()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.script(encode_create_parent_vasp_account_script(
                account_config::xus_tag(),
                0,
                *vasp_a.address(),
                vasp_a.auth_key_prefix(),
                vec![],
                true,
            ))`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.address()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.auth_key_prefix()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.sequence_number(tc_sequence_number)`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.ttl(ttl)`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.sign()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.execute_and_apply(
        blessed
            .transaction()
            .script(encode_create_parent_vasp_account_script(
                account_config::xus_tag(),
                0,
                *vasp_b.address(),
                vasp_b.auth_key_prefix(),
                vec![],
                true,
            ))
            .sequence_number(tc_sequence_number.checked_add(1).unwrap())
            .ttl(ttl)
            .sign(),
    )`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.transaction()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.script(encode_create_parent_vasp_account_script(
                account_config::xus_tag(),
                0,
                *vasp_b.address(),
                vasp_b.auth_key_prefix(),
                vec![],
                true,
            ))`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.address()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.auth_key_prefix()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.sequence_number(tc_sequence_number.checked_add(1).unwrap())`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.checked_add(1)`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.ttl(ttl)`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.sign()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.execute_and_apply(
        vasp_a
            .transaction()
            .script(encode_create_child_vasp_account_script(
                account_config::xus_tag(),
                *vasp_a_child.address(),
                vasp_a_child.auth_key_prefix(),
                true,
                0,
            ))
            .sequence_number(0)
            .ttl(ttl)
            .sign(),
    )`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.transaction()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.script(encode_create_child_vasp_account_script(
                account_config::xus_tag(),
                *vasp_a_child.address(),
                vasp_a_child.auth_key_prefix(),
                true,
                0,
            ))`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.address()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.auth_key_prefix()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.sequence_number(0)`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.ttl(ttl)`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.sign()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.execute_and_apply(
        vasp_b
            .transaction()
            .script(encode_create_child_vasp_account_script(
                account_config::xus_tag(),
                *vasp_b_child.address(),
                vasp_b_child.auth_key_prefix(),
                true,
                0,
            ))
            .sequence_number(0)
            .ttl(ttl)
            .sign(),
    )`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.transaction()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.script(encode_create_child_vasp_account_script(
                account_config::xus_tag(),
                *vasp_b_child.address(),
                vasp_b_child.auth_key_prefix(),
                true,
                0,
            ))`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.address()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.auth_key_prefix()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.sequence_number(0)`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.ttl(ttl)`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.sign()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.execute_and_apply(
        diem_root
            .transaction()
            .write_set(encode_add_account_limits_admin_script(*vasp_a.address()))
            .sequence_number(dr_sequence_number)
            .sign(),
    )`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.transaction()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.write_set(encode_add_account_limits_admin_script(*vasp_a.address()))`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.address()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.sequence_number(dr_sequence_number)`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.sign()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.execute_and_apply(
        diem_root
            .transaction()
            .write_set(encode_add_account_limits_admin_script(*vasp_b.address()))
            .sequence_number(dr_sequence_number.checked_add(1).unwrap())
            .sign(),
    )`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.transaction()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.write_set(encode_add_account_limits_admin_script(*vasp_b.address()))`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.address()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.sequence_number(dr_sequence_number.checked_add(1).unwrap())`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.checked_add(1)`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.sign()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.execute_and_apply(
        dd.transaction()
            .script(encode_peer_to_peer_with_metadata_script(
                account_config::xus_tag(),
                *vasp_a.address(),
                2 * mint_amount,
                vec![],
                vec![],
            ))
            .sequence_number(dd_sequence_number)
            .ttl(ttl)
            .sign(),
    )`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.transaction()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.script(encode_peer_to_peer_with_metadata_script(
                account_config::xus_tag(),
                *vasp_a.address(),
                2 * mint_amount,
                vec![],
                vec![],
            ))`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.address()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.sequence_number(dd_sequence_number)`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.ttl(ttl)`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.sign()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.execute_and_apply(
        dd.transaction()
            .script(encode_peer_to_peer_with_metadata_script(
                account_config::xus_tag(),
                *vasp_b.address(),
                2 * mint_amount,
                vec![],
                vec![],
            ))
            .sequence_number(dd_sequence_number.checked_add(1).unwrap())
            .ttl(ttl)
            .sign(),
    )`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.transaction()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.script(encode_peer_to_peer_with_metadata_script(
                account_config::xus_tag(),
                *vasp_b.address(),
                2 * mint_amount,
                vec![],
                vec![],
            ))`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.address()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.sequence_number(dd_sequence_number.checked_add(1).unwrap())`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.checked_add(1)`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.ttl(ttl)`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.sign()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.execute_and_apply(
        blessed
            .transaction()
            .script(encode_update_account_limit_window_info_script(
                *vasp_a.address(),
                0,
                *vasp_a.address(),
            ))
            .sequence_number(tc_sequence_number.checked_add(2).unwrap())
            .ttl(ttl)
            .sign(),
    )`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.transaction()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.script(encode_update_account_limit_window_info_script(
                *vasp_a.address(),
                0,
                *vasp_a.address(),
            ))`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.address()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.address()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.sequence_number(tc_sequence_number.checked_add(2).unwrap())`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.checked_add(2)`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.ttl(ttl)`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.sign()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.execute_and_apply(
        blessed
            .transaction()
            .script(encode_update_account_limit_definition_script(
                *vasp_a.address(),
                mint_amount,
                0,
                0,
                0,
            ))
            .sequence_number(tc_sequence_number.checked_add(3).unwrap())
            .ttl(ttl)
            .sign(),
    )`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.transaction()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.script(encode_update_account_limit_definition_script(
                *vasp_a.address(),
                mint_amount,
                0,
                0,
                0,
            ))`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.address()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.sequence_number(tc_sequence_number.checked_add(3).unwrap())`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.checked_add(3)`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.ttl(ttl)`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.sign()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.execute_transaction(
            vasp_b
                .transaction()
                .script(encode_peer_to_peer_with_metadata_script(
                    account_config::xus_tag(),
                    *vasp_a.address(),
                    mint_amount + 1,
                    vec![],
                    vec![],
                ))
                .sequence_number(1)
                .ttl(ttl)
                .sign(),
        )`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.transaction()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.script(encode_peer_to_peer_with_metadata_script(
                    account_config::xus_tag(),
                    *vasp_a.address(),
                    mint_amount + 1,
                    vec![],
                    vec![],
                ))`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.address()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.sequence_number(1)`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.ttl(ttl)`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.sign()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.execute_transaction(
            vasp_b
                .transaction()
                .script(encode_peer_to_peer_with_metadata_script(
                    account_config::xus_tag(),
                    *vasp_a_child.address(),
                    mint_amount + 1,
                    vec![],
                    vec![],
                ))
                .sequence_number(1)
                .ttl(ttl)
                .sign(),
        )`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.transaction()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.script(encode_peer_to_peer_with_metadata_script(
                    account_config::xus_tag(),
                    *vasp_a_child.address(),
                    mint_amount + 1,
                    vec![],
                    vec![],
                ))`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.address()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.sequence_number(1)`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.ttl(ttl)`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.sign()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.execute_and_apply(
        vasp_a
            .transaction()
            .script(encode_peer_to_peer_with_metadata_script(
                account_config::xus_tag(),
                *vasp_a_child.address(),
                mint_amount + 1,
                vec![],
                vec![],
            ))
            .sequence_number(1)
            .ttl(ttl)
            .sign(),
    )`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.transaction()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.script(encode_peer_to_peer_with_metadata_script(
                account_config::xus_tag(),
                *vasp_a_child.address(),
                mint_amount + 1,
                vec![],
                vec![],
            ))`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.address()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.sequence_number(1)`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.ttl(ttl)`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.sign()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.execute_and_apply(
        vasp_a_child
            .transaction()
            .script(encode_peer_to_peer_with_metadata_script(
                account_config::xus_tag(),
                *vasp_b_child.address(),
                mint_amount + 1,
                vec![],
                vec![],
            ))
            .sequence_number(0)
            .ttl(ttl)
            .sign(),
    )`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.transaction()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.script(encode_peer_to_peer_with_metadata_script(
                account_config::xus_tag(),
                *vasp_b_child.address(),
                mint_amount + 1,
                vec![],
                vec![],
            ))`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.address()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.sequence_number(0)`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.ttl(ttl)`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.sign()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.execute_and_apply(
        vasp_b_child
            .transaction()
            .script(encode_peer_to_peer_with_metadata_script(
                account_config::xus_tag(),
                *vasp_a_child.address(),
                mint_amount,
                vec![],
                vec![],
            ))
            .sequence_number(0)
            .ttl(ttl)
            .sign(),
    )`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.transaction()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.script(encode_peer_to_peer_with_metadata_script(
                account_config::xus_tag(),
                *vasp_a_child.address(),
                mint_amount,
                vec![],
                vec![],
            ))`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.address()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.sequence_number(0)`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.ttl(ttl)`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.sign()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.execute_transaction(
            dd.transaction()
                .script(encode_peer_to_peer_with_metadata_script(
                    account_config::xus_tag(),
                    *vasp_a_child.address(),
                    1,
                    vec![],
                    vec![],
                ))
                .sequence_number(dd_sequence_number.checked_add(2).unwrap())
                .ttl(ttl)
                .sign(),
        )`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.transaction()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.script(encode_peer_to_peer_with_metadata_script(
                    account_config::xus_tag(),
                    *vasp_a_child.address(),
                    1,
                    vec![],
                    vec![],
                ))`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.address()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.sequence_number(dd_sequence_number.checked_add(2).unwrap())`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.checked_add(2)`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.ttl(ttl)`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.sign()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.get_block_time()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.set_block_time(prev_block_time + window_micros)`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.new_block()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.execute_transaction(
            dd.transaction()
                .script(encode_peer_to_peer_with_metadata_script(
                    account_config::xus_tag(),
                    *vasp_a_child.address(),
                    1,
                    vec![],
                    vec![],
                ))
                .sequence_number(dd_sequence_number.checked_add(2).unwrap())
                .ttl(ttl)
                .sign(),
        )`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.transaction()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.script(encode_peer_to_peer_with_metadata_script(
                    account_config::xus_tag(),
                    *vasp_a_child.address(),
                    1,
                    vec![],
                    vec![],
                ))`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.address()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.sequence_number(dd_sequence_number.checked_add(2).unwrap())`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.checked_add(2)`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.ttl(ttl)`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.sign()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.execute_and_apply(
        blessed
            .transaction()
            .script(encode_update_account_limit_definition_script(
                *vasp_a.address(),
                std::u64::MAX, // unlimit inflow
                1000,          // set outflow to 1000
                0,
                0,
            ))
            .sequence_number(tc_sequence_number.checked_add(4).unwrap())
            .ttl(ttl)
            .sign(),
    )`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.transaction()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.script(encode_update_account_limit_definition_script(
                *vasp_a.address(),
                std::u64::MAX, // unlimit inflow
                1000,          // set outflow to 1000
                0,
                0,
            ))`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.address()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.sequence_number(tc_sequence_number.checked_add(4).unwrap())`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.checked_add(4)`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.ttl(ttl)`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.sign()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.execute_and_apply(
        vasp_a
            .transaction()
            .script(encode_peer_to_peer_with_metadata_script(
                account_config::xus_tag(),
                *vasp_a_child.address(),
                1001,
                vec![],
                vec![],
            ))
            .sequence_number(2)
            .ttl(ttl)
            .sign(),
    )`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.transaction()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.script(encode_peer_to_peer_with_metadata_script(
                account_config::xus_tag(),
                *vasp_a_child.address(),
                1001,
                vec![],
                vec![],
            ))`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.address()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.sequence_number(2)`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.ttl(ttl)`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.sign()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.execute_and_apply(
        vasp_a_child
            .transaction()
            .script(encode_peer_to_peer_with_metadata_script(
                account_config::xus_tag(),
                *vasp_b_child.address(),
                1000,
                vec![],
                vec![],
            ))
            .sequence_number(1)
            .ttl(ttl)
            .sign(),
    )`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.transaction()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.script(encode_peer_to_peer_with_metadata_script(
                account_config::xus_tag(),
                *vasp_b_child.address(),
                1000,
                vec![],
                vec![],
            ))`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.address()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.sequence_number(1)`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.ttl(ttl)`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.sign()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.execute_transaction(
            vasp_a
                .transaction()
                .script(encode_peer_to_peer_with_metadata_script(
                    account_config::xus_tag(),
                    *vasp_b.address(),
                    1,
                    vec![],
                    vec![],
                ))
                .sequence_number(3)
                .ttl(ttl)
                .sign(),
        )`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.transaction()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.script(encode_peer_to_peer_with_metadata_script(
                    account_config::xus_tag(),
                    *vasp_b.address(),
                    1,
                    vec![],
                    vec![],
                ))`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.address()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.sequence_number(3)`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.ttl(ttl)`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.sign()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.execute_transaction(
            vasp_a_child
                .transaction()
                .script(encode_peer_to_peer_with_metadata_script(
                    account_config::xus_tag(),
                    *vasp_b_child.address(),
                    1,
                    vec![],
                    vec![],
                ))
                .sequence_number(2)
                .ttl(ttl)
                .sign(),
        )`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.transaction()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.script(encode_peer_to_peer_with_metadata_script(
                    account_config::xus_tag(),
                    *vasp_b_child.address(),
                    1,
                    vec![],
                    vec![],
                ))`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.address()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.sequence_number(2)`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.ttl(ttl)`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.sign()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.execute_transaction(
            vasp_a_child
                .transaction()
                .script(encode_peer_to_peer_with_metadata_script(
                    account_config::xus_tag(),
                    *dd.address(),
                    1,
                    vec![],
                    vec![],
                ))
                .sequence_number(2)
                .ttl(ttl)
                .sign(),
        )`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.transaction()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.script(encode_peer_to_peer_with_metadata_script(
                    account_config::xus_tag(),
                    *dd.address(),
                    1,
                    vec![],
                    vec![],
                ))`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.address()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.sequence_number(2)`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.ttl(ttl)`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.sign()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.get_block_time()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.set_block_time(prev_block_time + window_micros)`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.new_block()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.execute_transaction(
            vasp_a_child
                .transaction()
                .script(encode_peer_to_peer_with_metadata_script(
                    account_config::xus_tag(),
                    *dd.address(),
                    1,
                    vec![],
                    vec![],
                ))
                .sequence_number(2)
                .ttl(window_micros)
                .ttl(ttl)
                .sign(),
        )`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.transaction()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.script(encode_peer_to_peer_with_metadata_script(
                    account_config::xus_tag(),
                    *dd.address(),
                    1,
                    vec![],
                    vec![],
                ))`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.address()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.sequence_number(2)`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.ttl(window_micros)`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.ttl(ttl)`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.sign()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.read_balance_resource(&vasp_a, account::xus_currency_code())`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.coin()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.read_balance_resource(&vasp_a_child, account::xus_currency_code())`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.coin()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.execute_and_apply(
            blessed
                .transaction()
                .script(encode_update_account_limit_definition_script(
                    *vasp_a.address(),
                    0,
                    std::u64::MAX, // unlimit outflow
                    a_balance,     // set max holding to the current balance of A
                    0,
                ))
                .sequence_number(tc_sequence_number.checked_add(5).unwrap())
                .ttl(ttl)
                .sign(),
        )`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.transaction()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.script(encode_update_account_limit_definition_script(
                    *vasp_a.address(),
                    0,
                    std::u64::MAX, // unlimit outflow
                    a_balance,     // set max holding to the current balance of A
                    0,
                ))`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.address()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.sequence_number(tc_sequence_number.checked_add(5).unwrap())`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.checked_add(5)`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.ttl(ttl)`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.sign()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.execute_and_apply(
            blessed
                .transaction()
                .script(encode_update_account_limit_window_info_script(
                    *vasp_a.address(),
                    a_balance,
                    *vasp_a.address(),
                ))
                .sequence_number(tc_sequence_number.checked_add(6).unwrap())
                .ttl(ttl)
                .sign(),
        )`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.transaction()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.script(encode_update_account_limit_window_info_script(
                    *vasp_a.address(),
                    a_balance,
                    *vasp_a.address(),
                ))`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.address()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.address()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.sequence_number(tc_sequence_number.checked_add(6).unwrap())`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.checked_add(6)`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.ttl(ttl)`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.sign()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.execute_transaction(
            vasp_b
                .transaction()
                .script(encode_peer_to_peer_with_metadata_script(
                    account_config::xus_tag(),
                    *vasp_a_child.address(),
                    1,
                    vec![],
                    vec![],
                ))
                .sequence_number(1)
                .ttl(ttl)
                .sign(),
        )`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.transaction()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.script(encode_peer_to_peer_with_metadata_script(
                    account_config::xus_tag(),
                    *vasp_a_child.address(),
                    1,
                    vec![],
                    vec![],
                ))`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.address()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.sequence_number(1)`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.ttl(ttl)`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.sign()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.execute_and_apply(
        vasp_a
            .transaction()
            .script(encode_peer_to_peer_with_metadata_script(
                account_config::xus_tag(),
                *vasp_b_child.address(),
                10,
                vec![],
                vec![],
            ))
            .sequence_number(3)
            .ttl(ttl)
            .sign(),
    )`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.transaction()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.script(encode_peer_to_peer_with_metadata_script(
                account_config::xus_tag(),
                *vasp_b_child.address(),
                10,
                vec![],
                vec![],
            ))`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.address()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.sequence_number(3)`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.ttl(ttl)`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.sign()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.execute_and_apply(
        vasp_b
            .transaction()
            .script(encode_peer_to_peer_with_metadata_script(
                account_config::xus_tag(),
                *vasp_a_child.address(),
                10,
                vec![],
                vec![],
            ))
            .sequence_number(1)
            .ttl(ttl)
            .sign(),
    )`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.transaction()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.script(encode_peer_to_peer_with_metadata_script(
                account_config::xus_tag(),
                *vasp_a_child.address(),
                10,
                vec![],
                vec![],
            ))`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.address()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.sequence_number(1)`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.ttl(ttl)`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.sign()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.execute_transaction(
            vasp_b
                .transaction()
                .script(encode_peer_to_peer_with_metadata_script(
                    account_config::xus_tag(),
                    *vasp_a_child.address(),
                    1,
                    vec![],
                    vec![],
                ))
                .sequence_number(2)
                .ttl(ttl)
                .sign(),
        )`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.transaction()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.script(encode_peer_to_peer_with_metadata_script(
                    account_config::xus_tag(),
                    *vasp_a_child.address(),
                    1,
                    vec![],
                    vec![],
                ))`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.address()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.sequence_number(2)`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.ttl(ttl)`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.sign()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.execute_and_apply(
        vasp_a_child
            .transaction()
            .script(encode_peer_to_peer_with_metadata_script(
                account_config::xus_tag(),
                *vasp_a.address(),
                1100,
                vec![],
                vec![],
            ))
            .sequence_number(2)
            .ttl(ttl)
            .sign(),
    )`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.transaction()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.script(encode_peer_to_peer_with_metadata_script(
                account_config::xus_tag(),
                *vasp_a.address(),
                1100,
                vec![],
                vec![],
            ))`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.address()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.sequence_number(2)`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.ttl(ttl)`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.sign()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.execute_transaction(
            dd.transaction()
                .script(encode_peer_to_peer_with_metadata_script(
                    account_config::xus_tag(),
                    *vasp_a_child.address(),
                    1,
                    vec![],
                    vec![],
                ))
                .sequence_number(dd_sequence_number.checked_add(2).unwrap())
                .ttl(ttl)
                .sign(),
        )`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.transaction()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.script(encode_peer_to_peer_with_metadata_script(
                    account_config::xus_tag(),
                    *vasp_a_child.address(),
                    1,
                    vec![],
                    vec![],
                ))`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.address()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.sequence_number(dd_sequence_number.checked_add(2).unwrap())`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.checked_add(2)`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.ttl(ttl)`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.sign()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.get_block_time()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.set_block_time(prev_block_time + window_micros)`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.new_block()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.execute_transaction(
            dd.transaction()
                .script(encode_peer_to_peer_with_metadata_script(
                    account_config::xus_tag(),
                    *vasp_a_child.address(),
                    1,
                    vec![],
                    vec![],
                ))
                .sequence_number(dd_sequence_number.checked_add(2).unwrap())
                .ttl(ttl)
                .sign(),
        )`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.transaction()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.script(encode_peer_to_peer_with_metadata_script(
                    account_config::xus_tag(),
                    *vasp_a_child.address(),
                    1,
                    vec![],
                    vec![],
                ))`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.address()`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.sequence_number(dd_sequence_number.checked_add(2).unwrap())`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.checked_add(2)`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.ttl(ttl)`
$DIR/language/e2e-testsuite/src/tests/account_limits.rs: `.sign()`
$DIR/language/e2e-testsuite/src/tests/admin_script.rs: `executor.set_golden_file(current_function_name!());`
$DIR/language/e2e-testsuite/src/tests/admin_script.rs: `executor.add_account_data(&new_account);`
$DIR/language/e2e-testsuite/src/tests/admin_script.rs: `executor.new_block();`
$DIR/language/e2e-testsuite/src/tests/admin_script.rs: `executor.set_golden_file(current_function_name!());`
$DIR/language/e2e-testsuite/src/tests/admin_script.rs: `executor.add_account_data(&new_account);`
$DIR/language/e2e-testsuite/src/tests/admin_script.rs: `executor.new_block();`
$DIR/language/e2e-testsuite/src/tests/admin_script.rs: `executor.set_golden_file(current_function_name!());`
$DIR/language/e2e-testsuite/src/tests/admin_script.rs: `executor.add_account_data(&new_account);`
$DIR/language/e2e-testsuite/src/tests/admin_script.rs: `executor.new_block();`
$DIR/language/e2e-testsuite/src/tests/admin_script.rs: `.set_golden_file(current_function_name!())`
$DIR/language/e2e-testsuite/src/tests/admin_script.rs: `.create_raw_account_data(100_000, 0)`
$DIR/language/e2e-testsuite/src/tests/admin_script.rs: `.add_account_data(&new_account)`
$DIR/language/e2e-testsuite/src/tests/admin_script.rs: `.public_key()`
$DIR/language/e2e-testsuite/src/tests/admin_script.rs: `.collect()`
$DIR/language/e2e-testsuite/src/tests/admin_script.rs: `.into_script_blob("file_name", code)`
$DIR/language/e2e-testsuite/src/tests/admin_script.rs: `.transaction()`
$DIR/language/e2e-testsuite/src/tests/admin_script.rs: `.write_set(WriteSetPayload::Script {
            script: Script::new(
                script_body,
                vec![],
                vec![TransactionArgument::U8Vector(new_key_hash.clone())],
            ),
            execute_as: *new_account.address(),
        })`
$DIR/language/e2e-testsuite/src/tests/admin_script.rs: `.address()`
$DIR/language/e2e-testsuite/src/tests/admin_script.rs: `.sequence_number(1)`
$DIR/language/e2e-testsuite/src/tests/admin_script.rs: `.sign()`
$DIR/language/e2e-testsuite/src/tests/admin_script.rs: `.new_block()`
$DIR/language/e2e-testsuite/src/tests/admin_script.rs: `.execute_and_apply(txn)`
$DIR/language/e2e-testsuite/src/tests/admin_script.rs: `.read_account_resource(new_account.account())`
$DIR/language/e2e-testsuite/src/tests/admin_script.rs: `.account()`
$DIR/language/e2e-testsuite/src/tests/admin_script.rs: `.set_golden_file(current_function_name!())`
$DIR/language/e2e-testsuite/src/tests/admin_script.rs: `.create_raw_account_data(100_000, 0)`
$DIR/language/e2e-testsuite/src/tests/admin_script.rs: `.add_account_data(&new_account)`
$DIR/language/e2e-testsuite/src/tests/admin_script.rs: `.public_key()`
$DIR/language/e2e-testsuite/src/tests/admin_script.rs: `.collect()`
$DIR/language/e2e-testsuite/src/tests/admin_script.rs: `.into_script_blob("file_name", code)`
$DIR/language/e2e-testsuite/src/tests/admin_script.rs: `.transaction()`
$DIR/language/e2e-testsuite/src/tests/admin_script.rs: `.write_set(WriteSetPayload::Script {
            script: Script::new(
                script_body,
                vec![],
                vec![TransactionArgument::U8Vector(new_key_hash.clone())],
            ),
            execute_as: *new_account.address(),
        })`
$DIR/language/e2e-testsuite/src/tests/admin_script.rs: `.address()`
$DIR/language/e2e-testsuite/src/tests/admin_script.rs: `.sequence_number(1)`
$DIR/language/e2e-testsuite/src/tests/admin_script.rs: `.sign()`
$DIR/language/e2e-testsuite/src/tests/admin_script.rs: `.new_block()`
$DIR/language/e2e-testsuite/src/tests/admin_script.rs: `.execute_and_apply(txn)`
$DIR/language/e2e-testsuite/src/tests/admin_script.rs: `.read_account_resource(new_account.account())`
$DIR/language/e2e-testsuite/src/tests/admin_script.rs: `.account()`
$DIR/language/e2e-testsuite/src/tests/admin_script.rs: `.set_golden_file(current_function_name!())`
$DIR/language/e2e-testsuite/src/tests/admin_script.rs: `.create_raw_account_data(100_000, 0)`
$DIR/language/e2e-testsuite/src/tests/admin_script.rs: `.add_account_data(&new_account)`
$DIR/language/e2e-testsuite/src/tests/admin_script.rs: `.public_key()`
$DIR/language/e2e-testsuite/src/tests/admin_script.rs: `.collect()`
$DIR/language/e2e-testsuite/src/tests/admin_script.rs: `.into_script_blob("file_name", code)`
$DIR/language/e2e-testsuite/src/tests/admin_script.rs: `.transaction()`
$DIR/language/e2e-testsuite/src/tests/admin_script.rs: `.write_set(WriteSetPayload::Script {
            script: Script::new(
                script_body,
                vec![],
                vec![TransactionArgument::U8Vector(new_key_hash)],
            ),
            execute_as: *new_account.address(),
        })`
$DIR/language/e2e-testsuite/src/tests/admin_script.rs: `.address()`
$DIR/language/e2e-testsuite/src/tests/admin_script.rs: `.sequence_number(1)`
$DIR/language/e2e-testsuite/src/tests/admin_script.rs: `.sign()`
$DIR/language/e2e-testsuite/src/tests/admin_script.rs: `.new_block()`
$DIR/language/e2e-testsuite/src/tests/admin_script.rs: `.execute_transaction(txn)`
$DIR/language/e2e-testsuite/src/tests/create_account.rs: `executor.set_golden_file(current_function_name!());`
$DIR/language/e2e-testsuite/src/tests/create_account.rs: `executor.apply_write_set(output.write_set());`
$DIR/language/e2e-testsuite/src/tests/create_account.rs: `.set_golden_file(current_function_name!())`
$DIR/language/e2e-testsuite/src/tests/create_account.rs: `.create_raw_account()`
$DIR/language/e2e-testsuite/src/tests/create_account.rs: `.execute_transaction(txn)`
$DIR/language/e2e-testsuite/src/tests/create_account.rs: `.apply_write_set(output.write_set())`
$DIR/language/e2e-testsuite/src/tests/create_account.rs: `.write_set()`
$DIR/language/e2e-testsuite/src/tests/create_account.rs: `.read_account_resource(&sender)`
$DIR/language/e2e-testsuite/src/tests/create_account.rs: `.read_balance_resource(&new_account, account::xus_currency_code())`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `executor.add_account_data(&sender);`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `executor.set_golden_file(current_function_name!());`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `executor.add_account_data(&sender);`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `executor.set_golden_file(current_function_name!());`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `executor.execute_and_apply(txn);`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `executor.execute_and_apply(txn.clone());`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `executor.add_account_data(&sender);`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `executor.set_golden_file(current_function_name!());`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `executor.execute_and_apply(txn);`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `executor.execute_and_apply(txn.clone());`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `executor.add_account_data(&sender);`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `executor.set_golden_file(current_function_name!());`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `executor.execute_and_apply(txn);`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `txns.push(txn);`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `executor.add_account_data(&sender);`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `executor.set_golden_file(current_function_name!());`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `executor.execute_and_apply(txn);`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `executor.execute_and_apply(txn);`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `executor.execute_and_apply(txn);`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `txns.push(txn);`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `txns.push(txn);`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `.create_raw_account_data(1_000_010, 0)`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `.add_account_data(&sender)`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `.set_golden_file(current_function_name!())`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `.account()`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `.transaction()`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `.payload(stdlib::encode_opt_in_to_crsn_script_function(K))`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `.sequence_number(0)`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `.sign()`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `.account()`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `.transaction()`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `.payload(stdlib::encode_peer_to_peer_with_metadata_script_function(
            account_config::xus_tag(),
            *sender.address(),
            100,
            vec![],
            vec![],
        ))`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `.address()`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `.sequence_number(1)`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `.sign()`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `.create_raw_account_data(1_000_010, 0)`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `.add_account_data(&sender)`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `.set_golden_file(current_function_name!())`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `.account()`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `.transaction()`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `.payload(stdlib::encode_opt_in_to_crsn_script_function(K))`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `.sequence_number(0)`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `.sign()`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `.execute_and_apply(txn)`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `.account()`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `.transaction()`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `.payload(stdlib::encode_peer_to_peer_with_metadata_script_function(
            account_config::xus_tag(),
            *sender.address(),
            100,
            vec![],
            vec![],
        ))`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `.address()`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `.sequence_number(1)`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `.sign()`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `.execute_and_apply(txn.clone())`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `.execute_transaction(txn)`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `.create_raw_account_data(1_000_010, 0)`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `.add_account_data(&sender)`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `.set_golden_file(current_function_name!())`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `.account()`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `.transaction()`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `.payload(stdlib::encode_opt_in_to_crsn_script_function(K))`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `.sequence_number(0)`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `.sign()`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `.execute_and_apply(txn)`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `.account()`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `.transaction()`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `.payload(stdlib::encode_peer_to_peer_with_metadata_script_function(
            account_config::xus_tag(),
            *sender.address(),
            100,
            vec![],
            vec![],
        ))`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `.address()`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `.sequence_number(10)`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `.sign()`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `.execute_and_apply(txn.clone())`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `.execute_transaction(txn)`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `.create_raw_account_data(1_000_010, 0)`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `.add_account_data(&sender)`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `.set_golden_file(current_function_name!())`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `.account()`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `.transaction()`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `.payload(stdlib::encode_opt_in_to_crsn_script_function(K))`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `.sequence_number(0)`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `.sign()`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `.execute_and_apply(txn)`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `.account()`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `.transaction()`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `.payload(stdlib::encode_peer_to_peer_with_metadata_script_function(
                account_config::xus_tag(),
                *sender.address(),
                100,
                vec![],
                vec![],
            ))`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `.address()`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `.sequence_number(K - i)`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `.sign()`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `.push(txn)`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `.execute_block_and_keep_vm_status(txns)`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `.create_raw_account_data(1_000_010, 0)`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `.add_account_data(&sender)`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `.set_golden_file(current_function_name!())`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `.account()`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `.transaction()`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `.payload(stdlib::encode_opt_in_to_crsn_script_function(K))`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `.sequence_number(0)`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `.sign()`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `.execute_and_apply(txn)`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `.account()`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `.transaction()`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `.payload(stdlib::encode_peer_to_peer_with_metadata_script_function(
                account_config::xus_tag(),
                *sender.address(),
                100,
                vec![],
                vec![],
            ))`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `.address()`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `.sequence_number(i)`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `.sign()`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `.execute_and_apply(txn)`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `.account()`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `.transaction()`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `.payload(stdlib::encode_peer_to_peer_with_metadata_script_function(
            account_config::xus_tag(),
            *sender.address(),
            100,
            vec![],
            vec![],
        ))`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `.address()`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `.sequence_number(K + 1)`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `.sign()`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `.execute_transaction(txn)`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `.account()`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `.transaction()`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `.payload(stdlib::encode_force_expire_script_function(2 * K))`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `.sequence_number(2)`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `.sign()`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `.execute_and_apply(txn)`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `.account()`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `.transaction()`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `.payload(stdlib::encode_peer_to_peer_with_metadata_script_function(
                account_config::xus_tag(),
                *sender.address(),
                100,
                vec![],
                vec![],
            ))`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `.address()`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `.sequence_number(i)`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `.sign()`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `.push(txn)`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `.execute_block_and_keep_vm_status(txns)`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `.account()`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `.transaction()`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `.payload(stdlib::encode_peer_to_peer_with_metadata_script_function(
                account_config::xus_tag(),
                *sender.address(),
                100,
                vec![],
                vec![],
            ))`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `.address()`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `.sequence_number(3 * K - i)`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `.sign()`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `.push(txn)`
$DIR/language/e2e-testsuite/src/tests/crsn.rs: `.execute_block_and_keep_vm_status(txns)`
$DIR/language/e2e-testsuite/src/tests/data_store.rs: `executor.set_golden_file(current_function_name!());`
$DIR/language/e2e-testsuite/src/tests/data_store.rs: `executor.add_account_data(&sender);`
$DIR/language/e2e-testsuite/src/tests/data_store.rs: `executor.execute_and_apply(txn);`
$DIR/language/e2e-testsuite/src/tests/data_store.rs: `executor.apply_write_set(output.write_set());`
$DIR/language/e2e-testsuite/src/tests/data_store.rs: `executor.execute_and_apply(add_txn);`
$DIR/language/e2e-testsuite/src/tests/data_store.rs: `executor.execute_and_apply(borrow_txn);`
$DIR/language/e2e-testsuite/src/tests/data_store.rs: `executor.execute_and_apply(rem_txn);`
$DIR/language/e2e-testsuite/src/tests/data_store.rs: `executor.apply_write_set(output.write_set());`
$DIR/language/e2e-testsuite/src/tests/data_store.rs: `executor.apply_write_set(output.write_set());`
$DIR/language/e2e-testsuite/src/tests/data_store.rs: `executor.execute_and_apply(add_txn);`
$DIR/language/e2e-testsuite/src/tests/data_store.rs: `executor.apply_write_set(out.write_set());`
$DIR/language/e2e-testsuite/src/tests/data_store.rs: `executor.set_golden_file(current_function_name!());`
$DIR/language/e2e-testsuite/src/tests/data_store.rs: `executor.add_account_data(&sender);`
$DIR/language/e2e-testsuite/src/tests/data_store.rs: `executor.execute_and_apply(txn);`
$DIR/language/e2e-testsuite/src/tests/data_store.rs: `executor.apply_write_set(output.write_set());`
$DIR/language/e2e-testsuite/src/tests/data_store.rs: `executor.execute_and_apply(add_txn);`
$DIR/language/e2e-testsuite/src/tests/data_store.rs: `executor.execute_and_apply(borrow_txn);`
$DIR/language/e2e-testsuite/src/tests/data_store.rs: `executor.apply_write_set(out.write_set());`
$DIR/language/e2e-testsuite/src/tests/data_store.rs: `executor.set_golden_file(current_function_name!());`
$DIR/language/e2e-testsuite/src/tests/data_store.rs: `executor.add_account_data(&sender);`
$DIR/language/e2e-testsuite/src/tests/data_store.rs: `executor.execute_and_apply(txn);`
$DIR/language/e2e-testsuite/src/tests/data_store.rs: `executor.execute_and_apply(add_txn);`
$DIR/language/e2e-testsuite/src/tests/data_store.rs: `executor.execute_and_apply(borrow_txn);`
$DIR/language/e2e-testsuite/src/tests/data_store.rs: `executor.apply_write_set(out.write_set());`
$DIR/language/e2e-testsuite/src/tests/data_store.rs: `.set_golden_file(current_function_name!())`
$DIR/language/e2e-testsuite/src/tests/data_store.rs: `.create_raw_account_data(1_000_000, 10)`
$DIR/language/e2e-testsuite/src/tests/data_store.rs: `.add_account_data(&sender)`
$DIR/language/e2e-testsuite/src/tests/data_store.rs: `.execute_and_apply(txn)`
$DIR/language/e2e-testsuite/src/tests/data_store.rs: `.execute_transaction(rem_txn)`
$DIR/language/e2e-testsuite/src/tests/data_store.rs: `.apply_write_set(output.write_set())`
$DIR/language/e2e-testsuite/src/tests/data_store.rs: `.write_set()`
$DIR/language/e2e-testsuite/src/tests/data_store.rs: `.execute_and_apply(add_txn)`
$DIR/language/e2e-testsuite/src/tests/data_store.rs: `.execute_and_apply(borrow_txn)`
$DIR/language/e2e-testsuite/src/tests/data_store.rs: `.execute_and_apply(rem_txn)`
$DIR/language/e2e-testsuite/src/tests/data_store.rs: `.execute_transaction(rem_txn)`
$DIR/language/e2e-testsuite/src/tests/data_store.rs: `.apply_write_set(output.write_set())`
$DIR/language/e2e-testsuite/src/tests/data_store.rs: `.write_set()`
$DIR/language/e2e-testsuite/src/tests/data_store.rs: `.execute_transaction(borrow_txn)`
$DIR/language/e2e-testsuite/src/tests/data_store.rs: `.apply_write_set(output.write_set())`
$DIR/language/e2e-testsuite/src/tests/data_store.rs: `.write_set()`
$DIR/language/e2e-testsuite/src/tests/data_store.rs: `.execute_and_apply(add_txn)`
$DIR/language/e2e-testsuite/src/tests/data_store.rs: `.execute_transaction_block(txns)`
$DIR/language/e2e-testsuite/src/tests/data_store.rs: `.apply_write_set(out.write_set())`
$DIR/language/e2e-testsuite/src/tests/data_store.rs: `.write_set()`
$DIR/language/e2e-testsuite/src/tests/data_store.rs: `.set_golden_file(current_function_name!())`
$DIR/language/e2e-testsuite/src/tests/data_store.rs: `.create_raw_account_data(1_000_000, 10)`
$DIR/language/e2e-testsuite/src/tests/data_store.rs: `.add_account_data(&sender)`
$DIR/language/e2e-testsuite/src/tests/data_store.rs: `.execute_and_apply(txn)`
$DIR/language/e2e-testsuite/src/tests/data_store.rs: `.execute_transaction(rem_txn)`
$DIR/language/e2e-testsuite/src/tests/data_store.rs: `.apply_write_set(output.write_set())`
$DIR/language/e2e-testsuite/src/tests/data_store.rs: `.write_set()`
$DIR/language/e2e-testsuite/src/tests/data_store.rs: `.execute_and_apply(add_txn)`
$DIR/language/e2e-testsuite/src/tests/data_store.rs: `.execute_and_apply(borrow_txn)`
$DIR/language/e2e-testsuite/src/tests/data_store.rs: `.execute_transaction_block(txns)`
$DIR/language/e2e-testsuite/src/tests/data_store.rs: `.apply_write_set(out.write_set())`
$DIR/language/e2e-testsuite/src/tests/data_store.rs: `.write_set()`
$DIR/language/e2e-testsuite/src/tests/data_store.rs: `.set_golden_file(current_function_name!())`
$DIR/language/e2e-testsuite/src/tests/data_store.rs: `.create_raw_account_data(1_000_000, 10)`
$DIR/language/e2e-testsuite/src/tests/data_store.rs: `.add_account_data(&sender)`
$DIR/language/e2e-testsuite/src/tests/data_store.rs: `.execute_and_apply(txn)`
$DIR/language/e2e-testsuite/src/tests/data_store.rs: `.execute_transaction(rem_txn)`
$DIR/language/e2e-testsuite/src/tests/data_store.rs: `.write_set()`
$DIR/language/e2e-testsuite/src/tests/data_store.rs: `.execute_and_apply(add_txn)`
$DIR/language/e2e-testsuite/src/tests/data_store.rs: `.execute_and_apply(borrow_txn)`
$DIR/language/e2e-testsuite/src/tests/data_store.rs: `.execute_transaction_block(txns)`
$DIR/language/e2e-testsuite/src/tests/data_store.rs: `.apply_write_set(out.write_set())`
$DIR/language/e2e-testsuite/src/tests/data_store.rs: `.write_set()`
$DIR/language/e2e-testsuite/src/tests/data_store.rs: `.execute_transaction(borrow_txn)`
$DIR/language/e2e-testsuite/src/tests/data_store.rs: `.write_set()`
$DIR/language/e2e-testsuite/src/tests/execution_strategies.rs: `exec.execute_block(big_block).unwrap();`
$DIR/language/e2e-testsuite/src/tests/execution_strategies.rs: `exec.execute_block(big_block).unwrap();`
$DIR/language/e2e-testsuite/src/tests/execution_strategies.rs: `block1.push(AnnotatedTransaction::Block);`
$DIR/language/e2e-testsuite/src/tests/execution_strategies.rs: `block1.append(&mut block);`
$DIR/language/e2e-testsuite/src/tests/execution_strategies.rs: `block1.push(AnnotatedTransaction::Block);`
$DIR/language/e2e-testsuite/src/tests/execution_strategies.rs: `block1.append(&mut block);`
$DIR/language/e2e-testsuite/src/tests/execution_strategies.rs: `block1.push(AnnotatedTransaction::Block);`
$DIR/language/e2e-testsuite/src/tests/execution_strategies.rs: `block1.append(&mut block);`
$DIR/language/e2e-testsuite/src/tests/execution_strategies.rs: `exec.execute_block(block1).unwrap();`
$DIR/language/e2e-testsuite/src/tests/execution_strategies.rs: `block1.push(AnnotatedTransaction::Block);`
$DIR/language/e2e-testsuite/src/tests/execution_strategies.rs: `block1.append(&mut block);`
$DIR/language/e2e-testsuite/src/tests/execution_strategies.rs: `block1.push(AnnotatedTransaction::Block);`
$DIR/language/e2e-testsuite/src/tests/execution_strategies.rs: `block1.append(&mut block);`
$DIR/language/e2e-testsuite/src/tests/execution_strategies.rs: `block1.push(AnnotatedTransaction::Block);`
$DIR/language/e2e-testsuite/src/tests/execution_strategies.rs: `block1.append(&mut block);`
$DIR/language/e2e-testsuite/src/tests/execution_strategies.rs: `exec.add_executor(GuidedExecutor::new(PartitionedGuidedStrategy));`
$DIR/language/e2e-testsuite/src/tests/execution_strategies.rs: `exec.add_executor(GuidedExecutor::new(UnPartitionedGuidedStrategy));`
$DIR/language/e2e-testsuite/src/tests/execution_strategies.rs: `exec.execute_block(block1).unwrap();`
$DIR/language/e2e-testsuite/src/tests/execution_strategies.rs: `exec.add_executor(RandomExecutor::from_os_rng());`
$DIR/language/e2e-testsuite/src/tests/execution_strategies.rs: `exec.add_executor(RandomExecutor::from_os_rng());`
$DIR/language/e2e-testsuite/src/tests/execution_strategies.rs: `exec.add_executor(RandomExecutor::from_os_rng());`
$DIR/language/e2e-testsuite/src/tests/execution_strategies.rs: `exec.execute_block(block).unwrap();`
$DIR/language/e2e-testsuite/src/tests/execution_strategies.rs: `.map(txn)`
$DIR/language/e2e-testsuite/src/tests/execution_strategies.rs: `.collect()`
$DIR/language/e2e-testsuite/src/tests/execution_strategies.rs: `.execute_block(big_block)`
$DIR/language/e2e-testsuite/src/tests/execution_strategies.rs: `.map(txn)`
$DIR/language/e2e-testsuite/src/tests/execution_strategies.rs: `.collect()`
$DIR/language/e2e-testsuite/src/tests/execution_strategies.rs: `.execute_block(big_block)`
$DIR/language/e2e-testsuite/src/tests/execution_strategies.rs: `.map(|i| AnnotatedTransaction::Txn(Box::new(txn(i))))`
$DIR/language/e2e-testsuite/src/tests/execution_strategies.rs: `.collect()`
$DIR/language/e2e-testsuite/src/tests/execution_strategies.rs: `.push(AnnotatedTransaction::Block)`
$DIR/language/e2e-testsuite/src/tests/execution_strategies.rs: `.map(|i| AnnotatedTransaction::Txn(Box::new(txn(i + 10))))`
$DIR/language/e2e-testsuite/src/tests/execution_strategies.rs: `.collect()`
$DIR/language/e2e-testsuite/src/tests/execution_strategies.rs: `.append(&mut block)`
$DIR/language/e2e-testsuite/src/tests/execution_strategies.rs: `.push(AnnotatedTransaction::Block)`
$DIR/language/e2e-testsuite/src/tests/execution_strategies.rs: `.map(|i| AnnotatedTransaction::Txn(Box::new(txn(i + 15))))`
$DIR/language/e2e-testsuite/src/tests/execution_strategies.rs: `.collect()`
$DIR/language/e2e-testsuite/src/tests/execution_strategies.rs: `.append(&mut block)`
$DIR/language/e2e-testsuite/src/tests/execution_strategies.rs: `.push(AnnotatedTransaction::Block)`
$DIR/language/e2e-testsuite/src/tests/execution_strategies.rs: `.map(|i| AnnotatedTransaction::Txn(Box::new(txn(i + 22))))`
$DIR/language/e2e-testsuite/src/tests/execution_strategies.rs: `.collect()`
$DIR/language/e2e-testsuite/src/tests/execution_strategies.rs: `.append(&mut block)`
$DIR/language/e2e-testsuite/src/tests/execution_strategies.rs: `.execute_block(block1)`
$DIR/language/e2e-testsuite/src/tests/execution_strategies.rs: `.map(|i| AnnotatedTransaction::Txn(Box::new(txn(i))))`
$DIR/language/e2e-testsuite/src/tests/execution_strategies.rs: `.collect()`
$DIR/language/e2e-testsuite/src/tests/execution_strategies.rs: `.push(AnnotatedTransaction::Block)`
$DIR/language/e2e-testsuite/src/tests/execution_strategies.rs: `.map(|i| AnnotatedTransaction::Txn(Box::new(txn(i + 10))))`
$DIR/language/e2e-testsuite/src/tests/execution_strategies.rs: `.collect()`
$DIR/language/e2e-testsuite/src/tests/execution_strategies.rs: `.append(&mut block)`
$DIR/language/e2e-testsuite/src/tests/execution_strategies.rs: `.push(AnnotatedTransaction::Block)`
$DIR/language/e2e-testsuite/src/tests/execution_strategies.rs: `.map(|i| AnnotatedTransaction::Txn(Box::new(txn(i + 15))))`
$DIR/language/e2e-testsuite/src/tests/execution_strategies.rs: `.collect()`
$DIR/language/e2e-testsuite/src/tests/execution_strategies.rs: `.append(&mut block)`
$DIR/language/e2e-testsuite/src/tests/execution_strategies.rs: `.push(AnnotatedTransaction::Block)`
$DIR/language/e2e-testsuite/src/tests/execution_strategies.rs: `.map(|i| AnnotatedTransaction::Txn(Box::new(txn(i + 22))))`
$DIR/language/e2e-testsuite/src/tests/execution_strategies.rs: `.collect()`
$DIR/language/e2e-testsuite/src/tests/execution_strategies.rs: `.append(&mut block)`
$DIR/language/e2e-testsuite/src/tests/execution_strategies.rs: `.add_executor(GuidedExecutor::new(PartitionedGuidedStrategy))`
$DIR/language/e2e-testsuite/src/tests/execution_strategies.rs: `.add_executor(GuidedExecutor::new(UnPartitionedGuidedStrategy))`
$DIR/language/e2e-testsuite/src/tests/execution_strategies.rs: `.execute_block(block1)`
$DIR/language/e2e-testsuite/src/tests/execution_strategies.rs: `.map(txn)`
$DIR/language/e2e-testsuite/src/tests/execution_strategies.rs: `.collect()`
$DIR/language/e2e-testsuite/src/tests/execution_strategies.rs: `.add_executor(RandomExecutor::from_os_rng())`
$DIR/language/e2e-testsuite/src/tests/execution_strategies.rs: `.add_executor(RandomExecutor::from_os_rng())`
$DIR/language/e2e-testsuite/src/tests/execution_strategies.rs: `.add_executor(RandomExecutor::from_os_rng())`
$DIR/language/e2e-testsuite/src/tests/execution_strategies.rs: `.execute_block(block)`
$DIR/language/e2e-testsuite/src/tests/genesis.rs: `.execute_transaction_block(vec![txn])`
$DIR/language/e2e-testsuite/src/tests/genesis.rs: `.create_raw_account_data(1_000_000, 10)`
$DIR/language/e2e-testsuite/src/tests/genesis.rs: `.create_raw_account_data(100_000, 10)`
$DIR/language/e2e-testsuite/src/tests/genesis.rs: `.account()`
$DIR/language/e2e-testsuite/src/tests/genesis.rs: `.account()`
$DIR/language/e2e-testsuite/src/tests/genesis.rs: `.execute_transaction_block(vec![txn, Transaction::UserTransaction(txn2)])`
$DIR/language/e2e-testsuite/src/tests/genesis_initializations.rs: `executor.exec(
        "Roles",
        "grant_diem_root_role",
        vec![],
        serialize_values(&vec![
            MoveValue::Signer(account_config::diem_root_address()),
        ]),
    );`
$DIR/language/e2e-testsuite/src/tests/genesis_initializations.rs: `executor.exec(
        "Diem",
        "initialize",
        vec![],
        serialize_values(&vec![
            MoveValue::Signer(account_config::diem_root_address()),
        ]),
    );`
$DIR/language/e2e-testsuite/src/tests/genesis_initializations.rs: `executor.exec(
        "Roles",
        "grant_diem_root_role",
        vec![],
        serialize_values(&vec![
            MoveValue::Signer(account_config::diem_root_address()),
        ]),
    );`
$DIR/language/e2e-testsuite/src/tests/genesis_initializations.rs: `executor.exec(
        "Roles",
        "grant_treasury_compliance_role",
        vec![],
        serialize_values(&vec![
            MoveValue::Signer(account_config::treasury_compliance_account_address()),
            MoveValue::Signer(account_config::diem_root_address()),
        ]),
    );`
$DIR/language/e2e-testsuite/src/tests/genesis_initializations.rs: `executor.exec(
        "Diem",
        "initialize",
        vec![],
        serialize_values(&vec![
            MoveValue::Signer(account_config::diem_root_address()),
        ]),
    );`
$DIR/language/e2e-testsuite/src/tests/genesis_initializations.rs: `executor.exec(
        "DiemTimestamp",
        "set_time_has_started",
        vec![],
        serialize_values(&vec![
            MoveValue::Signer(account_config::diem_root_address()),
        ]),
    );`
$DIR/language/e2e-testsuite/src/tests/genesis_initializations.rs: `executor.exec(
        "Event",
        "publish_generator",
        vec![],
        serialize_values(&vec![
            MoveValue::Signer(account_config::diem_root_address()),
        ]),
    );`
$DIR/language/e2e-testsuite/src/tests/genesis_initializations.rs: `executor.exec(
        "DiemBlock",
        "initialize_block_metadata",
        vec![],
        serialize_values(&vec![
            MoveValue::Signer(account_config::diem_root_address()),
        ]),
    );`
$DIR/language/e2e-testsuite/src/tests/genesis_initializations.rs: `.try_exec(
        "Diem",
        "initialize",
        vec![],
        serialize_values(&vec![
            MoveValue::Signer(account_config::diem_root_address()),
        ]),
    )`
$DIR/language/e2e-testsuite/src/tests/genesis_initializations.rs: `.exec(
        "Roles",
        "grant_diem_root_role",
        vec![],
        serialize_values(&vec![
            MoveValue::Signer(account_config::diem_root_address()),
        ]),
    )`
$DIR/language/e2e-testsuite/src/tests/genesis_initializations.rs: `.exec(
        "Diem",
        "initialize",
        vec![],
        serialize_values(&vec![
            MoveValue::Signer(account_config::diem_root_address()),
        ]),
    )`
$DIR/language/e2e-testsuite/src/tests/genesis_initializations.rs: `.try_exec(
        "Diem",
        "initialize",
        vec![],
        serialize_values(&vec![
            MoveValue::Signer(account_config::diem_root_address()),
        ]),
    )`
$DIR/language/e2e-testsuite/src/tests/genesis_initializations.rs: `.try_exec(
        "Diem",
        "initialize",
        vec![],
        serialize_values(&vec![
            MoveValue::Signer(account_config::diem_root_address()),
        ]),
    )`
$DIR/language/e2e-testsuite/src/tests/genesis_initializations.rs: `.exec(
        "Roles",
        "grant_diem_root_role",
        vec![],
        serialize_values(&vec![
            MoveValue::Signer(account_config::diem_root_address()),
        ]),
    )`
$DIR/language/e2e-testsuite/src/tests/genesis_initializations.rs: `.exec(
        "Roles",
        "grant_treasury_compliance_role",
        vec![],
        serialize_values(&vec![
            MoveValue::Signer(account_config::treasury_compliance_account_address()),
            MoveValue::Signer(account_config::diem_root_address()),
        ]),
    )`
$DIR/language/e2e-testsuite/src/tests/genesis_initializations.rs: `.try_exec(
        "Diem",
        "initialize",
        vec![],
        serialize_values(&vec![MoveValue::Signer(
            account_config::treasury_compliance_account_address(),
        )]),
    )`
$DIR/language/e2e-testsuite/src/tests/genesis_initializations.rs: `.exec(
        "Diem",
        "initialize",
        vec![],
        serialize_values(&vec![
            MoveValue::Signer(account_config::diem_root_address()),
        ]),
    )`
$DIR/language/e2e-testsuite/src/tests/genesis_initializations.rs: `.try_exec(
        "Diem",
        "initialize",
        vec![],
        serialize_values(&vec![MoveValue::Signer(
            account_config::treasury_compliance_account_address(),
        )]),
    )`
$DIR/language/e2e-testsuite/src/tests/genesis_initializations.rs: `.try_exec(
        "DiemTimestamp",
        "set_time_has_started",
        vec![],
        serialize_values(&vec![MoveValue::Signer(account_address)]),
    )`
$DIR/language/e2e-testsuite/src/tests/genesis_initializations.rs: `.exec(
        "DiemTimestamp",
        "set_time_has_started",
        vec![],
        serialize_values(&vec![
            MoveValue::Signer(account_config::diem_root_address()),
        ]),
    )`
$DIR/language/e2e-testsuite/src/tests/genesis_initializations.rs: `.try_exec(
        "DiemTimestamp",
        "set_time_has_started",
        vec![],
        serialize_values(&vec![
            MoveValue::Signer(account_config::diem_root_address()),
        ]),
    )`
$DIR/language/e2e-testsuite/src/tests/genesis_initializations.rs: `.exec(
        "Event",
        "publish_generator",
        vec![],
        serialize_values(&vec![
            MoveValue::Signer(account_config::diem_root_address()),
        ]),
    )`
$DIR/language/e2e-testsuite/src/tests/genesis_initializations.rs: `.exec(
        "DiemBlock",
        "initialize_block_metadata",
        vec![],
        serialize_values(&vec![
            MoveValue::Signer(account_config::diem_root_address()),
        ]),
    )`
$DIR/language/e2e-testsuite/src/tests/genesis_initializations.rs: `.try_exec(
        "DiemBlock",
        "initialize_block_metadata",
        vec![],
        serialize_values(&vec![
            MoveValue::Signer(account_config::diem_root_address()),
        ]),
    )`
$DIR/language/e2e-testsuite/src/tests/module_publishing.rs: `executor.set_golden_file(current_function_name!());`
$DIR/language/e2e-testsuite/src/tests/module_publishing.rs: `executor.add_account_data(&account1);`
$DIR/language/e2e-testsuite/src/tests/module_publishing.rs: `executor.add_account_data(&account2);`
$DIR/language/e2e-testsuite/src/tests/module_publishing.rs: `executor.set_golden_file(current_function_name!());`
$DIR/language/e2e-testsuite/src/tests/module_publishing.rs: `executor.add_account_data(&sender);`
$DIR/language/e2e-testsuite/src/tests/module_publishing.rs: `executor.set_golden_file(current_function_name!());`
$DIR/language/e2e-testsuite/src/tests/module_publishing.rs: `executor.set_golden_file(current_function_name!());`
$DIR/language/e2e-testsuite/src/tests/module_publishing.rs: `executor.set_golden_file(current_function_name!());`
$DIR/language/e2e-testsuite/src/tests/module_publishing.rs: `executor.set_golden_file(current_function_name!());`
$DIR/language/e2e-testsuite/src/tests/module_publishing.rs: `executor.add_account_data(&sender);`
$DIR/language/e2e-testsuite/src/tests/module_publishing.rs: `executor.set_golden_file(current_function_name!());`
$DIR/language/e2e-testsuite/src/tests/module_publishing.rs: `executor.add_account_data(&sender);`
$DIR/language/e2e-testsuite/src/tests/module_publishing.rs: `.set_golden_file(current_function_name!())`
$DIR/language/e2e-testsuite/src/tests/module_publishing.rs: `.create_raw_account_data(1_000_000, 10)`
$DIR/language/e2e-testsuite/src/tests/module_publishing.rs: `.create_raw_account_data(1_000_000, 10)`
$DIR/language/e2e-testsuite/src/tests/module_publishing.rs: `.add_account_data(&account1)`
$DIR/language/e2e-testsuite/src/tests/module_publishing.rs: `.add_account_data(&account2)`
$DIR/language/e2e-testsuite/src/tests/module_publishing.rs: `.account()`
$DIR/language/e2e-testsuite/src/tests/module_publishing.rs: `.transaction()`
$DIR/language/e2e-testsuite/src/tests/module_publishing.rs: `.module(compiled_module)`
$DIR/language/e2e-testsuite/src/tests/module_publishing.rs: `.sequence_number(10)`
$DIR/language/e2e-testsuite/src/tests/module_publishing.rs: `.gas_unit_price(1)`
$DIR/language/e2e-testsuite/src/tests/module_publishing.rs: `.sign()`
$DIR/language/e2e-testsuite/src/tests/module_publishing.rs: `.execute_transaction(txn)`
$DIR/language/e2e-testsuite/src/tests/module_publishing.rs: `.status()`
$DIR/language/e2e-testsuite/src/tests/module_publishing.rs: `.set_golden_file(current_function_name!())`
$DIR/language/e2e-testsuite/src/tests/module_publishing.rs: `.create_raw_account_data(1_000_000, 10)`
$DIR/language/e2e-testsuite/src/tests/module_publishing.rs: `.add_account_data(&sender)`
$DIR/language/e2e-testsuite/src/tests/module_publishing.rs: `.account()`
$DIR/language/e2e-testsuite/src/tests/module_publishing.rs: `.transaction()`
$DIR/language/e2e-testsuite/src/tests/module_publishing.rs: `.module(random_module)`
$DIR/language/e2e-testsuite/src/tests/module_publishing.rs: `.sequence_number(10)`
$DIR/language/e2e-testsuite/src/tests/module_publishing.rs: `.gas_unit_price(1)`
$DIR/language/e2e-testsuite/src/tests/module_publishing.rs: `.sign()`
$DIR/language/e2e-testsuite/src/tests/module_publishing.rs: `.set_golden_file(current_function_name!())`
$DIR/language/e2e-testsuite/src/tests/module_publishing.rs: `.transaction()`
$DIR/language/e2e-testsuite/src/tests/module_publishing.rs: `.module(random_module)`
$DIR/language/e2e-testsuite/src/tests/module_publishing.rs: `.sequence_number(1)`
$DIR/language/e2e-testsuite/src/tests/module_publishing.rs: `.sign()`
$DIR/language/e2e-testsuite/src/tests/module_publishing.rs: `.set_golden_file(current_function_name!())`
$DIR/language/e2e-testsuite/src/tests/module_publishing.rs: `.transaction()`
$DIR/language/e2e-testsuite/src/tests/module_publishing.rs: `.module(random_script)`
$DIR/language/e2e-testsuite/src/tests/module_publishing.rs: `.sequence_number(1)`
$DIR/language/e2e-testsuite/src/tests/module_publishing.rs: `.sign()`
$DIR/language/e2e-testsuite/src/tests/module_publishing.rs: `.set_golden_file(current_function_name!())`
$DIR/language/e2e-testsuite/src/tests/module_publishing.rs: `.transaction()`
$DIR/language/e2e-testsuite/src/tests/module_publishing.rs: `.module(random_script)`
$DIR/language/e2e-testsuite/src/tests/module_publishing.rs: `.sequence_number(1)`
$DIR/language/e2e-testsuite/src/tests/module_publishing.rs: `.sign()`
$DIR/language/e2e-testsuite/src/tests/module_publishing.rs: `.set_golden_file(current_function_name!())`
$DIR/language/e2e-testsuite/src/tests/module_publishing.rs: `.create_raw_account_data(1_000_000, 10)`
$DIR/language/e2e-testsuite/src/tests/module_publishing.rs: `.add_account_data(&sender)`
$DIR/language/e2e-testsuite/src/tests/module_publishing.rs: `.account()`
$DIR/language/e2e-testsuite/src/tests/module_publishing.rs: `.transaction()`
$DIR/language/e2e-testsuite/src/tests/module_publishing.rs: `.module(random_script)`
$DIR/language/e2e-testsuite/src/tests/module_publishing.rs: `.sequence_number(10)`
$DIR/language/e2e-testsuite/src/tests/module_publishing.rs: `.sign()`
$DIR/language/e2e-testsuite/src/tests/module_publishing.rs: `.set_golden_file(current_function_name!())`
$DIR/language/e2e-testsuite/src/tests/module_publishing.rs: `.create_raw_account_data(1_000_000, 10)`
$DIR/language/e2e-testsuite/src/tests/module_publishing.rs: `.add_account_data(&sender)`
$DIR/language/e2e-testsuite/src/tests/module_publishing.rs: `.account()`
$DIR/language/e2e-testsuite/src/tests/module_publishing.rs: `.transaction()`
$DIR/language/e2e-testsuite/src/tests/module_publishing.rs: `.module(random_script)`
$DIR/language/e2e-testsuite/src/tests/module_publishing.rs: `.sequence_number(10)`
$DIR/language/e2e-testsuite/src/tests/module_publishing.rs: `.sign()`
$DIR/language/e2e-testsuite/src/tests/multi_agent.rs: `executor.set_golden_file(current_function_name!());`
$DIR/language/e2e-testsuite/src/tests/multi_agent.rs: `executor.execute_and_apply(
        tc.transaction()
            .script(encode_create_designated_dealer_script(
                account_config::xus_tag(),
                0,
                *dd.address(),
                dd.auth_key_prefix(),
                vec![],
                false, // add_all_currencies
            ))
            .sequence_number(0)
            .sign(),
    );`
$DIR/language/e2e-testsuite/src/tests/multi_agent.rs: `executor.execute_and_apply(
        tc.transaction()
            .script(encode_create_parent_vasp_account_script(
                account_config::xus_tag(),
                0,
                *vasp.address(),
                vasp.auth_key_prefix(),
                vec![],
                false, // add_all_currencies
            ))
            .sequence_number(1)
            .sign(),
    );`
$DIR/language/e2e-testsuite/src/tests/multi_agent.rs: `executor.apply_write_set(output.write_set());`
$DIR/language/e2e-testsuite/src/tests/multi_agent.rs: `executor.set_golden_file(current_function_name!());`
$DIR/language/e2e-testsuite/src/tests/multi_agent.rs: `sender.add_balance_currency(xdx_currency_code());`
$DIR/language/e2e-testsuite/src/tests/multi_agent.rs: `secondary_signer.add_balance_currency(xus_currency_code());`
$DIR/language/e2e-testsuite/src/tests/multi_agent.rs: `executor.add_account_data(&sender);`
$DIR/language/e2e-testsuite/src/tests/multi_agent.rs: `executor.add_account_data(&secondary_signer);`
$DIR/language/e2e-testsuite/src/tests/multi_agent.rs: `executor.apply_write_set(output.write_set());`
$DIR/language/e2e-testsuite/src/tests/multi_agent.rs: `executor.set_golden_file(current_function_name!());`
$DIR/language/e2e-testsuite/src/tests/multi_agent.rs: `executor.add_account_data(&sender);`
$DIR/language/e2e-testsuite/src/tests/multi_agent.rs: `executor.add_account_data(&secondary_signer);`
$DIR/language/e2e-testsuite/src/tests/multi_agent.rs: `executor.apply_write_set(output.write_set());`
$DIR/language/e2e-testsuite/src/tests/multi_agent.rs: `executor.set_golden_file(current_function_name!());`
$DIR/language/e2e-testsuite/src/tests/multi_agent.rs: `executor.add_account_data(&sender);`
$DIR/language/e2e-testsuite/src/tests/multi_agent.rs: `executor.add_account_data(&secondary_signer);`
$DIR/language/e2e-testsuite/src/tests/multi_agent.rs: `executor.add_account_data(&third_signer);`
$DIR/language/e2e-testsuite/src/tests/multi_agent.rs: `.set_golden_file(current_function_name!())`
$DIR/language/e2e-testsuite/src/tests/multi_agent.rs: `.create_raw_account()`
$DIR/language/e2e-testsuite/src/tests/multi_agent.rs: `.execute_and_apply(
        tc.transaction()
            .script(encode_create_designated_dealer_script(
                account_config::xus_tag(),
                0,
                *dd.address(),
                dd.auth_key_prefix(),
                vec![],
                false, // add_all_currencies
            ))
            .sequence_number(0)
            .sign(),
    )`
$DIR/language/e2e-testsuite/src/tests/multi_agent.rs: `.transaction()`
$DIR/language/e2e-testsuite/src/tests/multi_agent.rs: `.script(encode_create_designated_dealer_script(
                account_config::xus_tag(),
                0,
                *dd.address(),
                dd.auth_key_prefix(),
                vec![],
                false, // add_all_currencies
            ))`
$DIR/language/e2e-testsuite/src/tests/multi_agent.rs: `.address()`
$DIR/language/e2e-testsuite/src/tests/multi_agent.rs: `.auth_key_prefix()`
$DIR/language/e2e-testsuite/src/tests/multi_agent.rs: `.sequence_number(0)`
$DIR/language/e2e-testsuite/src/tests/multi_agent.rs: `.sign()`
$DIR/language/e2e-testsuite/src/tests/multi_agent.rs: `.create_raw_account()`
$DIR/language/e2e-testsuite/src/tests/multi_agent.rs: `.execute_and_apply(
        tc.transaction()
            .script(encode_create_parent_vasp_account_script(
                account_config::xus_tag(),
                0,
                *vasp.address(),
                vasp.auth_key_prefix(),
                vec![],
                false, // add_all_currencies
            ))
            .sequence_number(1)
            .sign(),
    )`
$DIR/language/e2e-testsuite/src/tests/multi_agent.rs: `.transaction()`
$DIR/language/e2e-testsuite/src/tests/multi_agent.rs: `.script(encode_create_parent_vasp_account_script(
                account_config::xus_tag(),
                0,
                *vasp.address(),
                vasp.auth_key_prefix(),
                vec![],
                false, // add_all_currencies
            ))`
$DIR/language/e2e-testsuite/src/tests/multi_agent.rs: `.address()`
$DIR/language/e2e-testsuite/src/tests/multi_agent.rs: `.auth_key_prefix()`
$DIR/language/e2e-testsuite/src/tests/multi_agent.rs: `.sequence_number(1)`
$DIR/language/e2e-testsuite/src/tests/multi_agent.rs: `.sign()`
$DIR/language/e2e-testsuite/src/tests/multi_agent.rs: `.execute_transaction(txn)`
$DIR/language/e2e-testsuite/src/tests/multi_agent.rs: `.apply_write_set(output.write_set())`
$DIR/language/e2e-testsuite/src/tests/multi_agent.rs: `.write_set()`
$DIR/language/e2e-testsuite/src/tests/multi_agent.rs: `.read_account_resource(&tc)`
$DIR/language/e2e-testsuite/src/tests/multi_agent.rs: `.read_account_resource(&dd)`
$DIR/language/e2e-testsuite/src/tests/multi_agent.rs: `.read_account_resource(&vasp)`
$DIR/language/e2e-testsuite/src/tests/multi_agent.rs: `.read_balance_resource(&dd, account::xus_currency_code())`
$DIR/language/e2e-testsuite/src/tests/multi_agent.rs: `.read_balance_resource(&vasp, account::xus_currency_code())`
$DIR/language/e2e-testsuite/src/tests/multi_agent.rs: `.set_golden_file(current_function_name!())`
$DIR/language/e2e-testsuite/src/tests/multi_agent.rs: `.create_raw_account_data(1_000_010, 10)`
$DIR/language/e2e-testsuite/src/tests/multi_agent.rs: `.create_xdx_raw_account_data(100_100, 100)`
$DIR/language/e2e-testsuite/src/tests/multi_agent.rs: `.add_balance_currency(xdx_currency_code())`
$DIR/language/e2e-testsuite/src/tests/multi_agent.rs: `.add_balance_currency(xus_currency_code())`
$DIR/language/e2e-testsuite/src/tests/multi_agent.rs: `.add_account_data(&sender)`
$DIR/language/e2e-testsuite/src/tests/multi_agent.rs: `.add_account_data(&secondary_signer)`
$DIR/language/e2e-testsuite/src/tests/multi_agent.rs: `.account()`
$DIR/language/e2e-testsuite/src/tests/multi_agent.rs: `.account()`
$DIR/language/e2e-testsuite/src/tests/multi_agent.rs: `.execute_transaction(txn)`
$DIR/language/e2e-testsuite/src/tests/multi_agent.rs: `.apply_write_set(output.write_set())`
$DIR/language/e2e-testsuite/src/tests/multi_agent.rs: `.write_set()`
$DIR/language/e2e-testsuite/src/tests/multi_agent.rs: `.read_account_resource(sender.account())`
$DIR/language/e2e-testsuite/src/tests/multi_agent.rs: `.account()`
$DIR/language/e2e-testsuite/src/tests/multi_agent.rs: `.read_balance_resource(sender.account(), account::xus_currency_code())`
$DIR/language/e2e-testsuite/src/tests/multi_agent.rs: `.account()`
$DIR/language/e2e-testsuite/src/tests/multi_agent.rs: `.read_balance_resource(sender.account(), account::xdx_currency_code())`
$DIR/language/e2e-testsuite/src/tests/multi_agent.rs: `.account()`
$DIR/language/e2e-testsuite/src/tests/multi_agent.rs: `.read_account_resource(secondary_signer.account())`
$DIR/language/e2e-testsuite/src/tests/multi_agent.rs: `.account()`
$DIR/language/e2e-testsuite/src/tests/multi_agent.rs: `.read_balance_resource(secondary_signer.account(), account::xus_currency_code())`
$DIR/language/e2e-testsuite/src/tests/multi_agent.rs: `.account()`
$DIR/language/e2e-testsuite/src/tests/multi_agent.rs: `.read_balance_resource(secondary_signer.account(), account::xdx_currency_code())`
$DIR/language/e2e-testsuite/src/tests/multi_agent.rs: `.account()`
$DIR/language/e2e-testsuite/src/tests/multi_agent.rs: `.set_golden_file(current_function_name!())`
$DIR/language/e2e-testsuite/src/tests/multi_agent.rs: `.create_raw_account_data(1_000_010, 10)`
$DIR/language/e2e-testsuite/src/tests/multi_agent.rs: `.create_raw_account_data(10, 100)`
$DIR/language/e2e-testsuite/src/tests/multi_agent.rs: `.add_account_data(&sender)`
$DIR/language/e2e-testsuite/src/tests/multi_agent.rs: `.add_account_data(&secondary_signer)`
$DIR/language/e2e-testsuite/src/tests/multi_agent.rs: `.account()`
$DIR/language/e2e-testsuite/src/tests/multi_agent.rs: `.account()`
$DIR/language/e2e-testsuite/src/tests/multi_agent.rs: `.execute_transaction(txn)`
$DIR/language/e2e-testsuite/src/tests/multi_agent.rs: `.apply_write_set(output.write_set())`
$DIR/language/e2e-testsuite/src/tests/multi_agent.rs: `.write_set()`
$DIR/language/e2e-testsuite/src/tests/multi_agent.rs: `.read_account_resource(sender.account())`
$DIR/language/e2e-testsuite/src/tests/multi_agent.rs: `.account()`
$DIR/language/e2e-testsuite/src/tests/multi_agent.rs: `.read_balance_resource(sender.account(), account::xus_currency_code())`
$DIR/language/e2e-testsuite/src/tests/multi_agent.rs: `.account()`
$DIR/language/e2e-testsuite/src/tests/multi_agent.rs: `.read_account_resource(secondary_signer.account())`
$DIR/language/e2e-testsuite/src/tests/multi_agent.rs: `.account()`
$DIR/language/e2e-testsuite/src/tests/multi_agent.rs: `.read_balance_resource(secondary_signer.account(), account::xus_currency_code())`
$DIR/language/e2e-testsuite/src/tests/multi_agent.rs: `.account()`
$DIR/language/e2e-testsuite/src/tests/multi_agent.rs: `.set_golden_file(current_function_name!())`
$DIR/language/e2e-testsuite/src/tests/multi_agent.rs: `.create_raw_account_data(1_000_010, 10)`
$DIR/language/e2e-testsuite/src/tests/multi_agent.rs: `.create_raw_account_data(100_100, 100)`
$DIR/language/e2e-testsuite/src/tests/multi_agent.rs: `.create_raw_account_data(100_100, 100)`
$DIR/language/e2e-testsuite/src/tests/multi_agent.rs: `.add_account_data(&sender)`
$DIR/language/e2e-testsuite/src/tests/multi_agent.rs: `.add_account_data(&secondary_signer)`
$DIR/language/e2e-testsuite/src/tests/multi_agent.rs: `.add_account_data(&third_signer)`
$DIR/language/e2e-testsuite/src/tests/multi_agent.rs: `.address()`
$DIR/language/e2e-testsuite/src/tests/multi_agent.rs: `.account()`
$DIR/language/e2e-testsuite/src/tests/multi_agent.rs: `.account()`
$DIR/language/e2e-testsuite/src/tests/multi_agent.rs: `.execute_transaction(signed_txn)`
$DIR/language/e2e-testsuite/src/tests/on_chain_configs.rs: `executor.set_golden_file(current_function_name!());`
$DIR/language/e2e-testsuite/src/tests/on_chain_configs.rs: `executor.add_account_data(&sender);`
$DIR/language/e2e-testsuite/src/tests/on_chain_configs.rs: `assert_prologue_parity!(
        executor.verify_transaction(txn.clone()).status(),
        executor.execute_transaction(txn).status(),
        StatusCode::UNKNOWN_SCRIPT
    );`
$DIR/language/e2e-testsuite/src/tests/on_chain_configs.rs: `.set_golden_file(current_function_name!())`
$DIR/language/e2e-testsuite/src/tests/on_chain_configs.rs: `.create_raw_account_data(5_000_000, 10)`
$DIR/language/e2e-testsuite/src/tests/on_chain_configs.rs: `.add_account_data(&sender)`
$DIR/language/e2e-testsuite/src/tests/on_chain_configs.rs: `.account()`
$DIR/language/e2e-testsuite/src/tests/on_chain_configs.rs: `.transaction()`
$DIR/language/e2e-testsuite/src/tests/on_chain_configs.rs: `.script(Script::new(random_script, vec![], vec![]))`
$DIR/language/e2e-testsuite/src/tests/on_chain_configs.rs: `.sequence_number(10)`
$DIR/language/e2e-testsuite/src/tests/on_chain_configs.rs: `.max_gas_amount(100_000)`
$DIR/language/e2e-testsuite/src/tests/on_chain_configs.rs: `.gas_unit_price(1)`
$DIR/language/e2e-testsuite/src/tests/on_chain_configs.rs: `.sign()`
$DIR/language/e2e-testsuite/src/tests/on_chain_configs.rs: `.transaction()`
$DIR/language/e2e-testsuite/src/tests/on_chain_configs.rs: `.script(Script::new(random_script, vec![], vec![]))`
$DIR/language/e2e-testsuite/src/tests/on_chain_configs.rs: `.sequence_number(1)`
$DIR/language/e2e-testsuite/src/tests/on_chain_configs.rs: `.sign()`
$DIR/language/e2e-testsuite/src/tests/peer_to_peer.rs: `::diem_logger::Logger::init_for_testing();`
$DIR/language/e2e-testsuite/src/tests/preburn_queue.rs: `executor.set_golden_file(current_function_name!());`
$DIR/language/e2e-testsuite/src/tests/preburn_queue.rs: `create_preburn_balance(&mut executor, &dd_account, 10, &mut dd_seqno, false);`
$DIR/language/e2e-testsuite/src/tests/preburn_queue.rs: `burn_old(&mut executor, &tc_account, &mut tc_seqno, false);`
$DIR/language/e2e-testsuite/src/tests/preburn_queue.rs: `create_preburn_balance(&mut executor, &dd_account, 10, &mut dd_seqno, false);`
$DIR/language/e2e-testsuite/src/tests/preburn_queue.rs: `cancel_burn_old(&mut executor, &tc_account, &mut tc_seqno, false);`
$DIR/language/e2e-testsuite/src/tests/preburn_queue.rs: `utils::upgrade_df(&mut executor, &dr_account, &mut dr_seqno, Some(2));`
$DIR/language/e2e-testsuite/src/tests/preburn_queue.rs: `create_preburn_balance(&mut executor, &dd_account, 100, &mut dd_seqno, false);`
$DIR/language/e2e-testsuite/src/tests/preburn_queue.rs: `burn_with_amount_new(&mut executor, 100, &tc_account, &mut tc_seqno, false);`
$DIR/language/e2e-testsuite/src/tests/preburn_queue.rs: `create_preburn_balance(&mut executor, &dd_account, 10, &mut dd_seqno, false);`
$DIR/language/e2e-testsuite/src/tests/preburn_queue.rs: `executor.set_golden_file(current_function_name!());`
$DIR/language/e2e-testsuite/src/tests/preburn_queue.rs: `create_preburn_balance(&mut executor, &dd_account, 10, &mut dd_seqno, false);`
$DIR/language/e2e-testsuite/src/tests/preburn_queue.rs: `burn_old(&mut executor, &tc_account, &mut tc_seqno, false);`
$DIR/language/e2e-testsuite/src/tests/preburn_queue.rs: `create_preburn_balance(&mut executor, &dd_account, 10, &mut dd_seqno, false);`
$DIR/language/e2e-testsuite/src/tests/preburn_queue.rs: `cancel_burn_old(&mut executor, &tc_account, &mut tc_seqno, false);`
$DIR/language/e2e-testsuite/src/tests/preburn_queue.rs: `utils::upgrade_df(&mut executor, &dr_account, &mut dr_seqno, Some(2));`
$DIR/language/e2e-testsuite/src/tests/preburn_queue.rs: `create_preburn_balance(&mut executor, &dd_account, 100, &mut dd_seqno, false);`
$DIR/language/e2e-testsuite/src/tests/preburn_queue.rs: `create_preburn_balance(&mut executor, &dd_account, 20, &mut dd_seqno, false);`
$DIR/language/e2e-testsuite/src/tests/preburn_queue.rs: `burn_with_amount_new(&mut executor, 20, &tc_account, &mut tc_seqno, false);`
$DIR/language/e2e-testsuite/src/tests/preburn_queue.rs: `executor.set_golden_file(current_function_name!());`
$DIR/language/e2e-testsuite/src/tests/preburn_queue.rs: `create_preburn_balance(&mut executor, &dd_account, 10, &mut dd_seqno, false);`
$DIR/language/e2e-testsuite/src/tests/preburn_queue.rs: `utils::upgrade_df(&mut executor, &dr_account, &mut dr_seqno, Some(2));`
$DIR/language/e2e-testsuite/src/tests/preburn_queue.rs: `create_preburn_balance(&mut executor, &dd_account, 100, &mut dd_seqno, false);`
$DIR/language/e2e-testsuite/src/tests/preburn_queue.rs: `cancel_burn_with_amount_new(&mut executor, 100, &tc_account, &mut tc_seqno, false);`
$DIR/language/e2e-testsuite/src/tests/preburn_queue.rs: `executor.set_golden_file(current_function_name!());`
$DIR/language/e2e-testsuite/src/tests/preburn_queue.rs: `create_preburn_balance(&mut executor, &dd_account, 10, &mut dd_seqno, false);`
$DIR/language/e2e-testsuite/src/tests/preburn_queue.rs: `burn_old(&mut executor, &tc_account, &mut tc_seqno, false);`
$DIR/language/e2e-testsuite/src/tests/preburn_queue.rs: `create_preburn_balance(&mut executor, &dd_account, 10, &mut dd_seqno, false);`
$DIR/language/e2e-testsuite/src/tests/preburn_queue.rs: `cancel_burn_old(&mut executor, &tc_account, &mut tc_seqno, false);`
$DIR/language/e2e-testsuite/src/tests/preburn_queue.rs: `utils::upgrade_df(&mut executor, &dr_account, &mut dr_seqno, Some(2));`
$DIR/language/e2e-testsuite/src/tests/preburn_queue.rs: `executor.set_golden_file(current_function_name!());`
$DIR/language/e2e-testsuite/src/tests/preburn_queue.rs: `create_preburn_balance(&mut executor, &dd_account, 10, &mut dd_seqno, false);`
$DIR/language/e2e-testsuite/src/tests/preburn_queue.rs: `burn_old(&mut executor, &tc_account, &mut tc_seqno, false);`
$DIR/language/e2e-testsuite/src/tests/preburn_queue.rs: `create_preburn_balance(&mut executor, &dd_account, 10, &mut dd_seqno, false);`
$DIR/language/e2e-testsuite/src/tests/preburn_queue.rs: `cancel_burn_old(&mut executor, &tc_account, &mut tc_seqno, false);`
$DIR/language/e2e-testsuite/src/tests/preburn_queue.rs: `utils::upgrade_df(&mut executor, &dr_account, &mut dr_seqno, Some(2));`
$DIR/language/e2e-testsuite/src/tests/preburn_queue.rs: `create_preburn_balance(&mut executor, &dd_account, 100, &mut dd_seqno, false);`
$DIR/language/e2e-testsuite/src/tests/preburn_queue.rs: `executor.set_golden_file(current_function_name!());`
$DIR/language/e2e-testsuite/src/tests/preburn_queue.rs: `.set_golden_file(current_function_name!())`
$DIR/language/e2e-testsuite/src/tests/preburn_queue.rs: `.set_golden_file(current_function_name!())`
$DIR/language/e2e-testsuite/src/tests/preburn_queue.rs: `.set_golden_file(current_function_name!())`
$DIR/language/e2e-testsuite/src/tests/preburn_queue.rs: `.set_golden_file(current_function_name!())`
$DIR/language/e2e-testsuite/src/tests/preburn_queue.rs: `.set_golden_file(current_function_name!())`
$DIR/language/e2e-testsuite/src/tests/preburn_queue.rs: `.set_golden_file(current_function_name!())`
$DIR/language/e2e-testsuite/src/tests/script_functions.rs: `executor.set_golden_file(current_function_name!());`
$DIR/language/e2e-testsuite/src/tests/script_functions.rs: `executor.add_account_data(&account);`
$DIR/language/e2e-testsuite/src/tests/script_functions.rs: `utils::upgrade_df(
        &mut executor,
        &dr_account,
        &mut dr_seqno,
        Some(DIEM_VERSION_2.major),
    );`
$DIR/language/e2e-testsuite/src/tests/script_functions.rs: `executor.set_golden_file(current_function_name!());`
$DIR/language/e2e-testsuite/src/tests/script_functions.rs: `executor.add_account_data(&account);`
$DIR/language/e2e-testsuite/src/tests/script_functions.rs: `utils::upgrade_df(
        &mut executor,
        &dr_account,
        &mut dr_seqno,
        Some(DIEM_VERSION_2.major),
    );`
$DIR/language/e2e-testsuite/src/tests/script_functions.rs: `executor.set_golden_file(current_function_name!());`
$DIR/language/e2e-testsuite/src/tests/script_functions.rs: `executor.add_account_data(&account);`
$DIR/language/e2e-testsuite/src/tests/script_functions.rs: `utils::upgrade_df(
        &mut executor,
        &dr_account,
        &mut dr_seqno,
        Some(DIEM_VERSION_2.major),
    );`
$DIR/language/e2e-testsuite/src/tests/script_functions.rs: `.set_golden_file(current_function_name!())`
$DIR/language/e2e-testsuite/src/tests/script_functions.rs: `.create_raw_account_data(1_000_000, sequence_number)`
$DIR/language/e2e-testsuite/src/tests/script_functions.rs: `.add_account_data(&account)`
$DIR/language/e2e-testsuite/src/tests/script_functions.rs: `.account()`
$DIR/language/e2e-testsuite/src/tests/script_functions.rs: `.account()`
$DIR/language/e2e-testsuite/src/tests/script_functions.rs: `.transaction()`
$DIR/language/e2e-testsuite/src/tests/script_functions.rs: `.script_function(ScriptFunction::new(
            ModuleId::new(*account.address(), Identifier::new("M").unwrap()),
            Identifier::new("f_private").unwrap(),
            vec![],
            vec![],
        ))`
$DIR/language/e2e-testsuite/src/tests/script_functions.rs: `.address()`
$DIR/language/e2e-testsuite/src/tests/script_functions.rs: `.sequence_number(sequence_number)`
$DIR/language/e2e-testsuite/src/tests/script_functions.rs: `.sign()`
$DIR/language/e2e-testsuite/src/tests/script_functions.rs: `.execute_transaction(txn.clone())`
$DIR/language/e2e-testsuite/src/tests/script_functions.rs: `.execute_transaction(txn)`
$DIR/language/e2e-testsuite/src/tests/script_functions.rs: `.set_golden_file(current_function_name!())`
$DIR/language/e2e-testsuite/src/tests/script_functions.rs: `.create_raw_account_data(1_000_000, sequence_number)`
$DIR/language/e2e-testsuite/src/tests/script_functions.rs: `.add_account_data(&account)`
$DIR/language/e2e-testsuite/src/tests/script_functions.rs: `.account()`
$DIR/language/e2e-testsuite/src/tests/script_functions.rs: `.account()`
$DIR/language/e2e-testsuite/src/tests/script_functions.rs: `.transaction()`
$DIR/language/e2e-testsuite/src/tests/script_functions.rs: `.script_function(ScriptFunction::new(
            ModuleId::new(*account.address(), Identifier::new("M").unwrap()),
            Identifier::new("f_public").unwrap(),
            vec![],
            vec![],
        ))`
$DIR/language/e2e-testsuite/src/tests/script_functions.rs: `.address()`
$DIR/language/e2e-testsuite/src/tests/script_functions.rs: `.sequence_number(sequence_number)`
$DIR/language/e2e-testsuite/src/tests/script_functions.rs: `.sign()`
$DIR/language/e2e-testsuite/src/tests/script_functions.rs: `.execute_transaction(txn.clone())`
$DIR/language/e2e-testsuite/src/tests/script_functions.rs: `.execute_transaction(txn)`
$DIR/language/e2e-testsuite/src/tests/script_functions.rs: `.set_golden_file(current_function_name!())`
$DIR/language/e2e-testsuite/src/tests/script_functions.rs: `.create_raw_account_data(1_000_000, sequence_number)`
$DIR/language/e2e-testsuite/src/tests/script_functions.rs: `.add_account_data(&account)`
$DIR/language/e2e-testsuite/src/tests/script_functions.rs: `.account()`
$DIR/language/e2e-testsuite/src/tests/script_functions.rs: `.account()`
$DIR/language/e2e-testsuite/src/tests/script_functions.rs: `.transaction()`
$DIR/language/e2e-testsuite/src/tests/script_functions.rs: `.script_function(ScriptFunction::new(
            ModuleId::new(*account.address(), Identifier::new("M").unwrap()),
            Identifier::new("f_script").unwrap(),
            vec![],
            vec![],
        ))`
$DIR/language/e2e-testsuite/src/tests/script_functions.rs: `.address()`
$DIR/language/e2e-testsuite/src/tests/script_functions.rs: `.sequence_number(sequence_number)`
$DIR/language/e2e-testsuite/src/tests/script_functions.rs: `.sign()`
$DIR/language/e2e-testsuite/src/tests/script_functions.rs: `.execute_transaction(txn.clone())`
$DIR/language/e2e-testsuite/src/tests/script_functions.rs: `.execute_transaction(txn)`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `executor.set_golden_file(current_function_name!());`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `executor.add_account_data(&sender);`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `script.code.code = vec![Bytecode::LdU8(0), Bytecode::Add, Bytecode::Ret];`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `script.serialize(&mut blob).expect("script must serialize");`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `executor.apply_write_set(output.write_set());`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `executor.set_golden_file(current_function_name!());`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `executor.add_account_data(&sender);`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `script
        .address_identifiers
        .push(AccountAddress::new([2u8; AccountAddress::LENGTH]));`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `script.identifiers.push(Identifier::new("module").unwrap());`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `script.module_handles.push(module_handle);`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `script.identifiers.push(Identifier::new("foo").unwrap());`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `script.function_handles.push(fun_handle);`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `script.code.code = vec![
        Bytecode::Call(FunctionHandleIndex(
            (script.function_handles.len() - 1) as u16,
        )),
        Bytecode::Ret,
    ];`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `script.serialize(&mut blob).expect("script must serialize");`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `executor.apply_write_set(output.write_set());`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `executor.set_golden_file(current_function_name!());`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `executor.add_account_data(&sender);`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `script
        .address_identifiers
        .push(account_config::CORE_CODE_ADDRESS);`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `script.identifiers.push(Identifier::new("BCS").unwrap());`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `script.module_handles.push(module_handle);`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `script.identifiers.push(Identifier::new("foo").unwrap());`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `script.function_handles.push(fun_handle);`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `script.code.code = vec![
        Bytecode::Call(FunctionHandleIndex(
            (script.function_handles.len() - 1) as u16,
        )),
        Bytecode::Ret,
    ];`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `script.serialize(&mut blob).expect("script must serialize");`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `executor.apply_write_set(output.write_set());`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `executor.set_golden_file(current_function_name!());`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `executor.add_account_data(&sender);`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `script
        .address_identifiers
        .push(account_config::CORE_CODE_ADDRESS);`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `script.identifiers.push(Identifier::new("BCS").unwrap());`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `script.module_handles.push(module_handle);`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `script
        .identifiers
        .push(Identifier::new("to_bytes").unwrap());`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `script.function_handles.push(fun_handle);`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `script.code.code = vec![
        Bytecode::Call(FunctionHandleIndex(
            (script.function_handles.len() - 1) as u16,
        )),
        Bytecode::Ret,
    ];`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `script.serialize(&mut blob).expect("script must serialize");`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `executor.apply_write_set(output.write_set());`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `executor.set_golden_file(current_function_name!());`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `executor.add_account_data(&sender);`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `script.address_identifiers.push(address);`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `script.identifiers.push(module.clone());`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `script.module_handles.push(module_handle);`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `script.code.code = vec![Bytecode::Ret];`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `script.type_parameters = vec![AbilitySet::EMPTY];`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `script.serialize(&mut blob).expect("script must serialize");`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `executor.apply_write_set(output.write_set());`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `executor.set_golden_file(current_function_name!());`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `executor.add_account_data(&sender);`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `script.address_identifiers.push(address);`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `script.identifiers.push(module.clone());`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `script.module_handles.push(module_handle);`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `script.code.code = vec![Bytecode::Ret];`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `script.type_parameters = vec![AbilitySet::EMPTY];`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `script.serialize(&mut blob).expect("script must serialize");`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `executor.apply_write_set(output.write_set());`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.set_golden_file(current_function_name!())`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.create_raw_account_data(1_000_000, 10)`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.add_account_data(&sender)`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.serialize(&mut blob)`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.account()`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.transaction()`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.script(Script::new(blob, vec![], vec![]))`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.sequence_number(10)`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.gas_unit_price(1)`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.sign()`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.execute_transaction(txn)`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.status()`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.apply_write_set(output.write_set())`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.write_set()`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.gas_used()`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.read_account_resource(sender.account())`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.account()`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.read_balance_resource(sender.account(), account::xus_currency_code())`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.account()`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.set_golden_file(current_function_name!())`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.create_raw_account_data(1_000_000, 10)`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.add_account_data(&sender)`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.address_identifiers
        .push(AccountAddress::new([2u8; AccountAddress::LENGTH]))`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.identifiers.push(Identifier::new("module").unwrap())`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.address_identifiers.len()`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.identifiers.len()`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.module_handles.push(module_handle)`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.identifiers.push(Identifier::new("foo").unwrap())`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.module_handles.len()`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.identifiers.len()`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.function_handles.push(fun_handle)`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.serialize(&mut blob)`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.account()`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.transaction()`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.script(Script::new(blob, vec![], vec![]))`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.sequence_number(10)`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.gas_unit_price(1)`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.sign()`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.execute_transaction(txn)`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.status()`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.apply_write_set(output.write_set())`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.write_set()`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.gas_used()`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.read_account_resource(sender.account())`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.account()`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.read_balance_resource(sender.account(), account::xus_currency_code())`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.account()`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.set_golden_file(current_function_name!())`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.create_raw_account_data(1_000_000, 10)`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.add_account_data(&sender)`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.address_identifiers
        .push(account_config::CORE_CODE_ADDRESS)`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.identifiers.push(Identifier::new("BCS").unwrap())`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.address_identifiers.len()`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.identifiers.len()`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.module_handles.push(module_handle)`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.identifiers.push(Identifier::new("foo").unwrap())`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.module_handles.len()`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.identifiers.len()`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.function_handles.push(fun_handle)`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.serialize(&mut blob)`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.account()`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.transaction()`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.script(Script::new(blob, vec![], vec![]))`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.sequence_number(10)`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.gas_unit_price(1)`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.sign()`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.execute_transaction(txn)`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.status()`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.apply_write_set(output.write_set())`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.write_set()`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.gas_used()`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.read_account_resource(sender.account())`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.account()`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.read_balance_resource(sender.account(), account::xus_currency_code())`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.account()`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.set_golden_file(current_function_name!())`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.create_raw_account_data(1_000_000, 10)`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.add_account_data(&sender)`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.address_identifiers
        .push(account_config::CORE_CODE_ADDRESS)`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.identifiers.push(Identifier::new("BCS").unwrap())`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.address_identifiers.len()`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.identifiers.len()`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.module_handles.push(module_handle)`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.identifiers
        .push(Identifier::new("to_bytes").unwrap())`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.module_handles.len()`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.identifiers.len()`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.function_handles.push(fun_handle)`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.serialize(&mut blob)`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.account()`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.transaction()`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.script(Script::new(blob, vec![], vec![]))`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.sequence_number(10)`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.gas_unit_price(1)`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.sign()`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.execute_transaction(txn)`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.status()`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.apply_write_set(output.write_set())`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.write_set()`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.gas_used()`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.read_account_resource(sender.account())`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.account()`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.read_balance_resource(sender.account(), account::xus_currency_code())`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.account()`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.set_golden_file(current_function_name!())`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.create_raw_account_data(1_000_000, 10)`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.add_account_data(&sender)`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.address_identifiers.push(address)`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.identifiers.push(module.clone())`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.address_identifiers.len()`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.identifiers.len()`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.module_handles.push(module_handle)`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.serialize(&mut blob)`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.account()`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.transaction()`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.script(Script::new(
            blob,
            vec![TypeTag::Struct(StructTag {
                address,
                module,
                name: Identifier::new("fake").unwrap(),
                type_params: vec![],
            })],
            vec![],
        ))`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.sequence_number(10)`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.gas_unit_price(1)`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.sign()`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.execute_transaction(txn)`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.status()`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.apply_write_set(output.write_set())`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.write_set()`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.gas_used()`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.read_account_resource(sender.account())`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.account()`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.read_balance_resource(sender.account(), account::xus_currency_code())`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.account()`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.set_golden_file(current_function_name!())`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.create_raw_account_data(1_000_000, 10)`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.add_account_data(&sender)`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.address_identifiers.push(address)`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.identifiers.push(module.clone())`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.address_identifiers.len()`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.identifiers.len()`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.module_handles.push(module_handle)`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.serialize(&mut blob)`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.account()`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.transaction()`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.script(Script::new(
            blob,
            vec![TypeTag::Vector(Box::new(TypeTag::Struct(StructTag {
                address,
                module,
                name: Identifier::new("fake").unwrap(),
                type_params: vec![],
            })))],
            vec![],
        ))`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.sequence_number(10)`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.gas_unit_price(1)`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.sign()`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.execute_transaction(txn)`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.status()`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.apply_write_set(output.write_set())`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.write_set()`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.gas_used()`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.read_account_resource(sender.account())`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.account()`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.read_balance_resource(sender.account(), account::xus_currency_code())`
$DIR/language/e2e-testsuite/src/tests/scripts.rs: `.account()`
$DIR/language/e2e-testsuite/src/tests/transaction_builder.rs: `executor.set_golden_file(current_function_name!());`
$DIR/language/e2e-testsuite/src/tests/transaction_builder.rs: `currencies::add_currency_to_system(&mut executor, "COIN", &dr_account, 1);`
$DIR/language/e2e-testsuite/src/tests/transaction_builder.rs: `executor.execute_and_apply(
        blessed
            .transaction()
            .script(encode_create_parent_vasp_account_script(
                account_config::xus_tag(),
                0,
                *vasp_a.address(),
                vasp_a.auth_key_prefix(),
                vec![],
                false,
            ))
            .sequence_number(tc_sequence_number)
            .sign(),
    );`
$DIR/language/e2e-testsuite/src/tests/transaction_builder.rs: `executor.execute_and_apply(
        vasp_a
            .transaction()
            .script(encode_create_child_vasp_account_script(
                account_config::xus_tag(),
                *vasp_a_child1.address(),
                vasp_a_child1.auth_key_prefix(),
                false,
                0,
            ))
            .sequence_number(0)
            .sign(),
    );`
$DIR/language/e2e-testsuite/src/tests/transaction_builder.rs: `executor.execute_and_apply(
        vasp_a
            .transaction()
            .script(encode_add_currency_to_account_script(
                account_config::type_tag_for_currency_code(account::currency_code("COIN")),
            ))
            .sequence_number(1)
            .sign(),
    );`
$DIR/language/e2e-testsuite/src/tests/transaction_builder.rs: `executor.execute_and_apply(
        blessed
            .transaction()
            .script(encode_create_parent_vasp_account_script(
                account_config::xus_tag(),
                0,
                *vasp_b.address(),
                vasp_b.auth_key_prefix(),
                vec![],
                true,
            ))
            .sequence_number(tc_sequence_number.checked_add(1).unwrap())
            .sign(),
    );`
$DIR/language/e2e-testsuite/src/tests/transaction_builder.rs: `executor.execute_and_apply(
        vasp_b
            .transaction()
            .script(encode_create_child_vasp_account_script(
                account_config::xus_tag(),
                *vasp_b_child1.address(),
                vasp_b_child1.auth_key_prefix(),
                true,
                0,
            ))
            .sequence_number(0)
            .sign(),
    );`
$DIR/language/e2e-testsuite/src/tests/transaction_builder.rs: `.set_golden_file(current_function_name!())`
$DIR/language/e2e-testsuite/src/tests/transaction_builder.rs: `.create_raw_account()`
$DIR/language/e2e-testsuite/src/tests/transaction_builder.rs: `.create_raw_account()`
$DIR/language/e2e-testsuite/src/tests/transaction_builder.rs: `.create_raw_account()`
$DIR/language/e2e-testsuite/src/tests/transaction_builder.rs: `.create_raw_account()`
$DIR/language/e2e-testsuite/src/tests/transaction_builder.rs: `.create_raw_account()`
$DIR/language/e2e-testsuite/src/tests/transaction_builder.rs: `.execute_and_apply(
        blessed
            .transaction()
            .script(encode_create_parent_vasp_account_script(
                account_config::xus_tag(),
                0,
                *vasp_a.address(),
                vasp_a.auth_key_prefix(),
                vec![],
                false,
            ))
            .sequence_number(tc_sequence_number)
            .sign(),
    )`
$DIR/language/e2e-testsuite/src/tests/transaction_builder.rs: `.transaction()`
$DIR/language/e2e-testsuite/src/tests/transaction_builder.rs: `.script(encode_create_parent_vasp_account_script(
                account_config::xus_tag(),
                0,
                *vasp_a.address(),
                vasp_a.auth_key_prefix(),
                vec![],
                false,
            ))`
$DIR/language/e2e-testsuite/src/tests/transaction_builder.rs: `.address()`
$DIR/language/e2e-testsuite/src/tests/transaction_builder.rs: `.auth_key_prefix()`
$DIR/language/e2e-testsuite/src/tests/transaction_builder.rs: `.sequence_number(tc_sequence_number)`
$DIR/language/e2e-testsuite/src/tests/transaction_builder.rs: `.sign()`
$DIR/language/e2e-testsuite/src/tests/transaction_builder.rs: `.execute_and_apply(
        vasp_a
            .transaction()
            .script(encode_create_child_vasp_account_script(
                account_config::xus_tag(),
                *vasp_a_child1.address(),
                vasp_a_child1.auth_key_prefix(),
                false,
                0,
            ))
            .sequence_number(0)
            .sign(),
    )`
$DIR/language/e2e-testsuite/src/tests/transaction_builder.rs: `.transaction()`
$DIR/language/e2e-testsuite/src/tests/transaction_builder.rs: `.script(encode_create_child_vasp_account_script(
                account_config::xus_tag(),
                *vasp_a_child1.address(),
                vasp_a_child1.auth_key_prefix(),
                false,
                0,
            ))`
$DIR/language/e2e-testsuite/src/tests/transaction_builder.rs: `.address()`
$DIR/language/e2e-testsuite/src/tests/transaction_builder.rs: `.auth_key_prefix()`
$DIR/language/e2e-testsuite/src/tests/transaction_builder.rs: `.sequence_number(0)`
$DIR/language/e2e-testsuite/src/tests/transaction_builder.rs: `.sign()`
$DIR/language/e2e-testsuite/src/tests/transaction_builder.rs: `.execute_and_apply(
        vasp_a
            .transaction()
            .script(encode_add_currency_to_account_script(
                account_config::type_tag_for_currency_code(account::currency_code("COIN")),
            ))
            .sequence_number(1)
            .sign(),
    )`
$DIR/language/e2e-testsuite/src/tests/transaction_builder.rs: `.transaction()`
$DIR/language/e2e-testsuite/src/tests/transaction_builder.rs: `.script(encode_add_currency_to_account_script(
                account_config::type_tag_for_currency_code(account::currency_code("COIN")),
            ))`
$DIR/language/e2e-testsuite/src/tests/transaction_builder.rs: `.sequence_number(1)`
$DIR/language/e2e-testsuite/src/tests/transaction_builder.rs: `.sign()`
$DIR/language/e2e-testsuite/src/tests/transaction_builder.rs: `.execute_and_apply(
        blessed
            .transaction()
            .script(encode_create_parent_vasp_account_script(
                account_config::xus_tag(),
                0,
                *vasp_b.address(),
                vasp_b.auth_key_prefix(),
                vec![],
                true,
            ))
            .sequence_number(tc_sequence_number.checked_add(1).unwrap())
            .sign(),
    )`
$DIR/language/e2e-testsuite/src/tests/transaction_builder.rs: `.transaction()`
$DIR/language/e2e-testsuite/src/tests/transaction_builder.rs: `.script(encode_create_parent_vasp_account_script(
                account_config::xus_tag(),
                0,
                *vasp_b.address(),
                vasp_b.auth_key_prefix(),
                vec![],
                true,
            ))`
$DIR/language/e2e-testsuite/src/tests/transaction_builder.rs: `.address()`
$DIR/language/e2e-testsuite/src/tests/transaction_builder.rs: `.auth_key_prefix()`
$DIR/language/e2e-testsuite/src/tests/transaction_builder.rs: `.sequence_number(tc_sequence_number.checked_add(1).unwrap())`
$DIR/language/e2e-testsuite/src/tests/transaction_builder.rs: `.checked_add(1)`
$DIR/language/e2e-testsuite/src/tests/transaction_builder.rs: `.sign()`
$DIR/language/e2e-testsuite/src/tests/transaction_builder.rs: `.execute_and_apply(
        vasp_b
            .transaction()
            .script(encode_create_child_vasp_account_script(
                account_config::xus_tag(),
                *vasp_b_child1.address(),
                vasp_b_child1.auth_key_prefix(),
                true,
                0,
            ))
            .sequence_number(0)
            .sign(),
    )`
$DIR/language/e2e-testsuite/src/tests/transaction_builder.rs: `.transaction()`
$DIR/language/e2e-testsuite/src/tests/transaction_builder.rs: `.script(encode_create_child_vasp_account_script(
                account_config::xus_tag(),
                *vasp_b_child1.address(),
                vasp_b_child1.auth_key_prefix(),
                true,
                0,
            ))`
$DIR/language/e2e-testsuite/src/tests/transaction_builder.rs: `.address()`
$DIR/language/e2e-testsuite/src/tests/transaction_builder.rs: `.auth_key_prefix()`
$DIR/language/e2e-testsuite/src/tests/transaction_builder.rs: `.sequence_number(0)`
$DIR/language/e2e-testsuite/src/tests/transaction_builder.rs: `.sign()`
$DIR/language/e2e-testsuite/src/tests/transaction_builder.rs: `.transaction()`
$DIR/language/e2e-testsuite/src/tests/transaction_builder.rs: `.script(encode_create_child_vasp_account_script(
                account_config::type_tag_for_currency_code(account::currency_code("COIN")),
                *vasp_b_child2.address(),
                vasp_b_child2.auth_key_prefix(),
                false,
                0,
            ))`
$DIR/language/e2e-testsuite/src/tests/transaction_builder.rs: `.address()`
$DIR/language/e2e-testsuite/src/tests/transaction_builder.rs: `.auth_key_prefix()`
$DIR/language/e2e-testsuite/src/tests/transaction_builder.rs: `.sequence_number(1)`
$DIR/language/e2e-testsuite/src/tests/transaction_builder.rs: `.sign()`
$DIR/language/e2e-testsuite/src/tests/validator_set_management.rs: `executor.set_golden_file(current_function_name!());`
$DIR/language/e2e-testsuite/src/tests/validator_set_management.rs: `.set_golden_file(current_function_name!())`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `executor.set_golden_file(current_function_name!());`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `executor.add_account_data(&sender);`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `executor.add_account_data(&secondary_signer);`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `executor.set_golden_file(current_function_name!());`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `executor.add_account_data(&sender);`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `executor.add_account_data(&secondary_signer);`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `executor.add_account_data(&third_signer);`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `executor.set_golden_file(current_function_name!());`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `executor.add_account_data(&sender);`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `executor.add_account_data(&secondary_signer);`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `executor.set_golden_file(current_function_name!());`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `executor.add_account_data(&sender);`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `executor.add_account_data(&secondary_signer);`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `executor.set_golden_file(current_function_name!());`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `executor.add_account_data(&sender);`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `executor.add_account_data(&secondary_signer);`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `executor.apply_write_set(sender_output.write_set());`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `sender_seq_num += 1;`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `executor.apply_write_set(secondary_signer_output.write_set());`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `executor.set_golden_file(current_function_name!());`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `executor.add_account_data(&sender);`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `executor.add_account_data(&secondary_signer);`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `executor.add_account_data(&third_signer);`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `executor.set_golden_file(current_function_name!());`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `executor.add_account_data(&sender);`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `executor.add_account_data(&secondary_signer);`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `executor.set_golden_file(current_function_name!());`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `executor.add_account_data(&sender);`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `executor.add_account_data(&secondary_signer);`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `executor.add_account_data(&third_signer);`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `executor.set_golden_file(current_function_name!());`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `executor.add_account_data(&sender);`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `executor.set_golden_file(current_function_name!());`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `executor.add_account_data(&sender);`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `executor.set_golden_file(current_function_name!());`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `executor.add_account_data(&sender);`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `executor.set_golden_file(current_function_name!());`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `executor.add_account_data(&sender);`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `executor.set_golden_file(current_function_name!());`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `executor.set_golden_file(current_function_name!());`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `executor.add_account_data(&sender);`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `executor.add_account_data(&receiver);`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `executor.set_golden_file(current_function_name!());`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `executor.add_account_data(&sender);`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `executor.set_golden_file(current_function_name!());`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `executor.add_module(&module.self_id(), bytes);`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `executor.add_account_data(&sender);`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `executor.set_golden_file(current_function_name!());`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `executor.add_module(&bad_module.self_id(), bad_module_bytes);`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `executor.add_account_data(&sender);`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `executor.set_golden_file(current_function_name!());`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `executor.add_module(&module.self_id(), bytes);`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `executor.add_account_data(&sender);`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `executor.set_golden_file(current_function_name!());`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `executor.add_module(&bad_module.self_id(), bad_module_bytes);`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `executor.add_module(&good_module.self_id(), good_module_bytes);`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `executor.add_account_data(&sender);`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `executor.set_golden_file(current_function_name!());`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `executor.add_module(&bad_module.self_id(), bad_module_bytes);`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `executor.add_module(&good_module.self_id(), good_module_bytes);`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `executor.add_account_data(&sender);`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `executor.set_golden_file(current_function_name!());`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `executor.add_module(&bad_module.self_id(), bad_module_bytes);`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `executor.add_module(&good_module.self_id(), good_module_bytes);`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `executor.add_account_data(&sender);`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `executor.set_golden_file(current_function_name!());`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `executor.new_block();`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `executor.execute_and_apply(txn);`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `executor.execute_and_apply(txn);`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `executor.exec(
        "DesignatedDealer",
        "add_currency",
        vec![coin_tag.clone()],
        serialize_values(&vec![
            MoveValue::Signer(*dd.address()),
            MoveValue::Signer(*tc_account.address()),
        ]),
    );`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `executor.execute_and_apply(txn);`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `assert_prologue_parity!(
        executor.verify_transaction(txn.clone()).status(),
        executor.execute_transaction(txn.clone()).status(),
        StatusCode::BAD_TRANSACTION_FEE_CURRENCY
    );`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `executor.exec(
        "TransactionFee",
        "add_txn_fee_currency",
        vec![coin_tag],
        serialize_values(&vec![MoveValue::Signer(*tc_account.address())]),
    );`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.set_golden_file(current_function_name!())`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.create_raw_account_data(1_000_010, 10)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.create_raw_account_data(100_100, 100)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.add_account_data(&sender)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.add_account_data(&secondary_signer)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.address()`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.account()`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.account()`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.set_golden_file(current_function_name!())`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.create_raw_account_data(1_000_010, 10)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.create_raw_account_data(100_100, 100)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.create_raw_account_data(100_100, 100)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.add_account_data(&sender)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.add_account_data(&secondary_signer)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.add_account_data(&third_signer)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.address()`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.account()`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.account()`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.set_golden_file(current_function_name!())`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.create_raw_account_data(1_000_010, 10)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.create_raw_account_data(100_100, 100)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.add_account_data(&sender)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.add_account_data(&secondary_signer)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.address()`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.account()`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.set_golden_file(current_function_name!())`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.create_raw_account_data(1_000_010, 10)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.create_raw_account_data(100_100, 100)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.add_account_data(&sender)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.add_account_data(&secondary_signer)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.address()`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.account()`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.account()`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.set_golden_file(current_function_name!())`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.create_raw_account_data(1_000_010, sender_seq_num)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.create_raw_account_data(100_100, secondary_signer_seq_num)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.add_account_data(&sender)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.add_account_data(&secondary_signer)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.map(|_| keygen.generate_keypair())`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.generate_keypair()`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.unzip()`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.map(|_| keygen.generate_keypair())`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.generate_keypair()`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.unzip()`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.execute_transaction(rotate_key_txn(
        sender.account(),
        sender_new_auth_key.to_vec(),
        sender_seq_num,
    ))`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.account()`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.apply_write_set(sender_output.write_set())`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.write_set()`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.execute_transaction(rotate_key_txn(
        secondary_signer.account(),
        secondary_signer_new_auth_key.to_vec(),
        secondary_signer_seq_num,
    ))`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.account()`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.apply_write_set(secondary_signer_output.write_set())`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.write_set()`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.account()`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.account()`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.sign(&raw_txn_with_data)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.sign(&raw_txn_with_data)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.set_golden_file(current_function_name!())`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.create_raw_account_data(1_000_010, 10)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.create_raw_account_data(100_100, 100)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.create_raw_account_data(100_100, 100)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.add_account_data(&sender)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.add_account_data(&secondary_signer)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.add_account_data(&third_signer)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.address()`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.account()`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.account()`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.set_golden_file(current_function_name!())`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.create_raw_account_data(1_000_010, 10)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.create_raw_account_data(100_100, 100)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.add_account_data(&sender)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.add_account_data(&secondary_signer)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.address()`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.account()`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.account()`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.set_golden_file(current_function_name!())`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.create_raw_account_data(1_000_010, 10)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.create_raw_account_data(100_100, 100)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.create_raw_account_data(100_100, 100)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.add_account_data(&sender)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.add_account_data(&secondary_signer)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.add_account_data(&third_signer)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.address()`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.account()`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.account()`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.set_golden_file(current_function_name!())`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.create_raw_account_data(1_000_010, 10)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.create_raw_account_data(100_100, 100)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.add_account_data(&sender)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.address()`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.account()`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.account()`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.set_golden_file(current_function_name!())`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.create_raw_account_data(1_000_000, 10)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.add_account_data(&sender)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.account()`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.transaction()`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.script(Script::new(random_script, vec![], vec![]))`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.sequence_number(10)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.max_gas_amount(100_000)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.gas_unit_price(1)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.sign()`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.set_golden_file(current_function_name!())`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.create_raw_account_data(1_000_000, 10)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.add_account_data(&sender)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.account()`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.transaction()`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.script(Script::new(random_script, vec![], vec![]))`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.sequence_number(10)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.max_gas_amount(100_000)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.gas_unit_price(1)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.sign()`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.execute_transaction(txn)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.status()`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.set_golden_file(current_function_name!())`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.create_raw_account_data(1_000_000, 10)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.add_account_data(&sender)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.account()`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.transaction()`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.module(random_module)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.sequence_number(10)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.max_gas_amount(100_000)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.gas_unit_price(1)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.sign()`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.set_golden_file(current_function_name!())`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.transaction()`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.module(random_module)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.sequence_number(1)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.max_gas_amount(100_000)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.sign()`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.set_golden_file(current_function_name!())`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.create_raw_account_data(1_000_000, 10)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.create_raw_account_data(1_000_000, 10)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.add_account_data(&sender)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.add_account_data(&receiver)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.account()`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.transaction()`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.module(random_module)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.sequence_number(10)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.max_gas_amount(100_000)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.gas_unit_price(1)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.sign()`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.execute_transaction(txn)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.status()`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.set_golden_file(current_function_name!())`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.create_raw_account_data(1_000_000, 10)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.add_account_data(&sender)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.account()`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.transaction()`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.module(random_module)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.sequence_number(10)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.max_gas_amount(100_000)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.gas_unit_price(1)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.sign()`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.set_golden_file(current_function_name!())`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.add_module(&module.self_id(), bytes)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.self_id()`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.create_raw_account_data(1_000_000, 10)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.add_account_data(&sender)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.into_script_blob("file_name", code)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.account()`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.transaction()`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.script(Script::new(script, vec![], vec![]))`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.sequence_number(10)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.max_gas_amount(100_000)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.gas_unit_price(1)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.sign()`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.execute_transaction(txn)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.status()`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.set_golden_file(current_function_name!())`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.add_module(&bad_module.self_id(), bad_module_bytes)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.self_id()`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.create_raw_account_data(1_000_000, 10)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.add_account_data(&sender)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.address()`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.account()`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.transaction()`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.module(good_module)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.sequence_number(10)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.max_gas_amount(100_000)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.gas_unit_price(1)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.sign()`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.execute_transaction(txn)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.status()`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.set_golden_file(current_function_name!())`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.add_module(&module.self_id(), bytes)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.self_id()`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.create_raw_account_data(1_000_000, 10)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.add_account_data(&sender)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.into_script_blob("file_name", code)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.account()`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.transaction()`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.script(Script::new(
            script,
            vec![TypeTag::Struct(StructTag {
                address: account_config::CORE_CODE_ADDRESS,
                module: Identifier::new("Test").unwrap(),
                name: Identifier::new("S1").unwrap(),
                type_params: vec![],
            })],
            vec![],
        ))`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.sequence_number(10)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.max_gas_amount(100_000)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.gas_unit_price(1)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.sign()`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.execute_transaction(txn)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.status()`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.set_golden_file(current_function_name!())`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.add_module(&bad_module.self_id(), bad_module_bytes)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.self_id()`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.add_module(&good_module.self_id(), good_module_bytes)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.self_id()`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.create_raw_account_data(1_000_000, 10)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.add_account_data(&sender)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.into_script_blob("file_name", code)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.account()`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.transaction()`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.script(Script::new(script, vec![], vec![]))`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.sequence_number(10)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.max_gas_amount(100_000)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.gas_unit_price(1)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.sign()`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.execute_transaction(txn)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.status()`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.set_golden_file(current_function_name!())`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.add_module(&bad_module.self_id(), bad_module_bytes)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.self_id()`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.add_module(&good_module.self_id(), good_module_bytes)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.self_id()`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.create_raw_account_data(1_000_000, 10)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.add_account_data(&sender)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.into_module_blob("file_name", module_code.as_str())`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.account()`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.transaction()`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.module(module)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.sequence_number(10)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.max_gas_amount(100_000)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.gas_unit_price(1)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.sign()`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.execute_transaction(txn)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.status()`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.set_golden_file(current_function_name!())`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.add_module(&bad_module.self_id(), bad_module_bytes)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.self_id()`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.add_module(&good_module.self_id(), good_module_bytes)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.self_id()`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.create_raw_account_data(1_000_000, 10)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.add_account_data(&sender)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.into_script_blob("file_name", code)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.account()`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.transaction()`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.script(Script::new(
            script,
            vec![TypeTag::Struct(StructTag {
                address: account_config::CORE_CODE_ADDRESS,
                module: Identifier::new("Test2").unwrap(),
                name: Identifier::new("S").unwrap(),
                type_params: vec![],
            })],
            vec![],
        ))`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.sequence_number(10)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.max_gas_amount(100_000)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.gas_unit_price(1)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.sign()`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.execute_transaction(txn)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.status()`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.set_golden_file(current_function_name!())`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.transaction()`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.module(module)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.sequence_number(1)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.sign()`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.into_script_blob("file_name", code)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.transaction()`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.write_set(WriteSetPayload::Script {
                script: Script::new(program, vec![], vec![]),
                execute_as: *tc_account.address(),
            })`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.address()`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.sequence_number(2)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.sign()`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.new_block()`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.execute_and_apply(txn)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.transaction()`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.script(transaction_builder::encode_create_designated_dealer_script(
            coin_tag.clone(),
            0,
            *dd.address(),
            dd.auth_key_prefix(),
            b"".to_vec(),
            true,
        ))`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.address()`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.auth_key_prefix()`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.sequence_number(0)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.sign()`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.execute_and_apply(txn)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.exec(
        "DesignatedDealer",
        "add_currency",
        vec![coin_tag.clone()],
        serialize_values(&vec![
            MoveValue::Signer(*dd.address()),
            MoveValue::Signer(*tc_account.address()),
        ]),
    )`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.transaction()`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.script(transaction_builder::encode_tiered_mint_script(
            coin_tag.clone(),
            0,
            *dd.address(),
            50000,
            1,
        ))`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.address()`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.sequence_number(1)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.sign()`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.execute_and_apply(txn)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.transaction()`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.script(
            transaction_builder::encode_peer_to_peer_with_metadata_script(
                coin_tag.clone(),
                *dd.address(),
                1,
                b"".to_vec(),
                b"".to_vec(),
            ),
        )`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.address()`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.gas_unit_price(1)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.max_gas_amount(800)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.gas_currency_code("COIN")`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.sequence_number(0)`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.sign()`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.read_balance_resource(&dd, Identifier::new("COIN").unwrap())`
$DIR/language/e2e-testsuite/src/tests/verify_txn.rs: `.exec(
        "TransactionFee",
        "add_txn_fee_currency",
        vec![coin_tag],
        serialize_values(&vec![MoveValue::Signer(*tc_account.address())]),
    )`
$DIR/language/e2e-testsuite/src/tests/writeset_builder.rs: `executor.set_golden_file(current_function_name!());`
$DIR/language/e2e-testsuite/src/tests/writeset_builder.rs: `module.serialize(&mut v).unwrap();`
$DIR/language/e2e-testsuite/src/tests/writeset_builder.rs: `session.set_diem_version(11);`
$DIR/language/e2e-testsuite/src/tests/writeset_builder.rs: `writeset.push((
            AccessPath::code_access_path(module.self_id()),
            WriteOp::Value(module_bytes),
        ));`
$DIR/language/e2e-testsuite/src/tests/writeset_builder.rs: `executor.apply_write_set(output.write_set());`
$DIR/language/e2e-testsuite/src/tests/writeset_builder.rs: `.set_golden_file(current_function_name!())`
$DIR/language/e2e-testsuite/src/tests/writeset_builder.rs: `.serialize(&mut v)`
$DIR/language/e2e-testsuite/src/tests/writeset_builder.rs: `.get_state_view()`
$DIR/language/e2e-testsuite/src/tests/writeset_builder.rs: `.set_diem_version(11)`
$DIR/language/e2e-testsuite/src/tests/writeset_builder.rs: `.into_inner()`
$DIR/language/e2e-testsuite/src/tests/writeset_builder.rs: `.into_mut()`
$DIR/language/e2e-testsuite/src/tests/writeset_builder.rs: `.push((
            AccessPath::code_access_path(module.self_id()),
            WriteOp::Value(module_bytes),
        ))`
$DIR/language/e2e-testsuite/src/tests/writeset_builder.rs: `.self_id()`
$DIR/language/e2e-testsuite/src/tests/writeset_builder.rs: `.freeze()`
$DIR/language/e2e-testsuite/src/tests/writeset_builder.rs: `.transaction()`
$DIR/language/e2e-testsuite/src/tests/writeset_builder.rs: `.write_set(WriteSetPayload::Direct(change_set))`
$DIR/language/e2e-testsuite/src/tests/writeset_builder.rs: `.sequence_number(1)`
$DIR/language/e2e-testsuite/src/tests/writeset_builder.rs: `.sign()`
$DIR/language/e2e-testsuite/src/tests/writeset_builder.rs: `.execute_transaction(writeset_txn.clone())`
$DIR/language/e2e-testsuite/src/tests/writeset_builder.rs: `.apply_write_set(output.write_set())`
$DIR/language/e2e-testsuite/src/tests/writeset_builder.rs: `.write_set()`
$DIR/language/e2e-testsuite/src/tests/writeset_builder.rs: `.get_state_view()`
$DIR/language/e2e-testsuite/src/tests/writeset_builder.rs: `.into_script_blob("file_name", code)`
$DIR/language/e2e-testsuite/src/tests/writeset_builder.rs: `.transaction()`
$DIR/language/e2e-testsuite/src/tests/writeset_builder.rs: `.script(Script::new(script_body, vec![], vec![]))`
$DIR/language/e2e-testsuite/src/tests/writeset_builder.rs: `.sequence_number(2)`
$DIR/language/e2e-testsuite/src/tests/writeset_builder.rs: `.sign()`
$DIR/language/e2e-testsuite/src/tests/writeset_builder.rs: `.execute_transaction(txn)`
$DIR/language/move-binary-format/src/unit_tests/binary_tests.rs: `binary_data.push(1).unwrap();`
$DIR/language/move-binary-format/src/unit_tests/binary_tests.rs: `.push(1)`
$DIR/language/move-binary-format/src/unit_tests/deserializer_tests.rs: `binary.extend(&(VERSION_MAX.checked_add(1).unwrap()).to_le_bytes());`
$DIR/language/move-binary-format/src/unit_tests/deserializer_tests.rs: `binary.push(10);`
$DIR/language/move-binary-format/src/unit_tests/deserializer_tests.rs: `binary.push(0);`
$DIR/language/move-binary-format/src/unit_tests/deserializer_tests.rs: `malformed_simple_versioned_test(*version);`
$DIR/language/move-binary-format/src/unit_tests/deserializer_tests.rs: `.extend(&(VERSION_MAX.checked_add(1).unwrap()).to_le_bytes())`
$DIR/language/move-binary-format/src/unit_tests/deserializer_tests.rs: `.checked_add(1)`
$DIR/language/move-binary-format/src/unit_tests/deserializer_tests.rs: `.to_le_bytes()`
$DIR/language/move-binary-format/src/unit_tests/deserializer_tests.rs: `.push(10)`
$DIR/language/move-binary-format/src/unit_tests/deserializer_tests.rs: `.push(0)`
$DIR/language/move-binary-format/src/unit_tests/number_tests.rs: `uleb128_test_u64(0, 1);`
$DIR/language/move-binary-format/src/unit_tests/number_tests.rs: `uleb128_test_u64(2u64.pow(exp) - 1, n);`
$DIR/language/move-binary-format/src/unit_tests/number_tests.rs: `uleb128_test_u64(2u64.pow(exp), n + 1);`
$DIR/language/move-binary-format/src/unit_tests/number_tests.rs: `n += 1;`
$DIR/language/move-binary-format/src/unit_tests/number_tests.rs: `uleb128_test_u64(u64::max_value() - 1, 10);`
$DIR/language/move-binary-format/src/unit_tests/number_tests.rs: `.pow(exp)`
$DIR/language/move-binary-format/src/unit_tests/number_tests.rs: `.pow(exp)`
$DIR/language/move-binary-format/src/unit_tests/signature_token_tests.rs: `ty = SignatureToken::Vector(Box::new(ty));`
$DIR/language/move-binary-format/src/unit_tests/signature_token_tests.rs: `serialize_signature_token(&mut binary, &ty).expect("serialization should succeed");`
$DIR/language/move-binary-format/src/unit_tests/signature_token_tests.rs: `load_signature_token_test_entry(cursor).expect("deserialization should succeed");`
$DIR/language/move-binary-format/src/unit_tests/signature_token_tests.rs: `ty = SignatureToken::Vector(Box::new(ty));`
$DIR/language/move-binary-format/src/unit_tests/signature_token_tests.rs: `ty = SignatureToken::Vector(Box::new(ty));`
$DIR/language/move-binary-format/src/unit_tests/signature_token_tests.rs: `serialize_signature_token(&mut binary, &ty).expect_err("serialization should fail");`
$DIR/language/move-binary-format/src/unit_tests/signature_token_tests.rs: `serialize_signature_token_unchecked(&mut binary, &ty)
            .expect("serialization (unchecked) should succeed");`
$DIR/language/move-binary-format/src/unit_tests/signature_token_tests.rs: `load_signature_token_test_entry(cursor).expect_err("deserialization should fail");`
$DIR/language/move-binary-format/src/unit_tests/signature_token_tests.rs: `.as_inner()`
$DIR/language/move-binary-format/src/unit_tests/signature_token_tests.rs: `.as_inner()`
$DIR/language/move-command-line-common/src/character_sets.rs: `good_chars.push(0x0A);`
$DIR/language/move-command-line-common/src/character_sets.rs: `good_chars.push(0x09);`
$DIR/language/move-command-line-common/src/character_sets.rs: `bad_chars.append(&mut (0x0B..=0x1F).collect::<Vec<u8>>());`
$DIR/language/move-command-line-common/src/character_sets.rs: `bad_chars.push(0x7F);`
$DIR/language/move-command-line-common/src/character_sets.rs: `.collect::<Vec<u8>>()`
$DIR/language/move-command-line-common/src/character_sets.rs: `.push(0x0A)`
$DIR/language/move-command-line-common/src/character_sets.rs: `.push(0x09)`
$DIR/language/move-command-line-common/src/character_sets.rs: `.collect::<Vec<u8>>()`
$DIR/language/move-command-line-common/src/character_sets.rs: `.append(&mut (0x0B..=0x1F).collect::<Vec<u8>>())`
$DIR/language/move-command-line-common/src/character_sets.rs: `.collect::<Vec<u8>>()`
$DIR/language/move-command-line-common/src/character_sets.rs: `.push(0x7F)`
$DIR/language/move-core/types/src/account_address.rs: `AccountAddress::from_hex_literal(hex).unwrap_err();`
$DIR/language/move-core/types/src/vm_status.rs: `seen_codes.insert(*major_status_code);`
$DIR/language/move-core/types/src/vm_status.rs: `seen_statuses.insert(unwrapped_status);`
$DIR/language/move-core/types/src/vm_status.rs: `.contains(&possible_major_status_code)`
$DIR/language/move-core/types/src/vm_status.rs: `.insert(*major_status_code)`
$DIR/language/move-core/types/src/vm_status.rs: `.insert(unwrapped_status)`
$DIR/language/move-prover/bytecode/src/graph.rs: `.compute_reducible()`
$DIR/language/move-prover/bytecode/src/graph.rs: `.compute_reducible()`
$DIR/language/move-stdlib/src/tests.rs: `crate::build_stdlib_doc(&temp_dir.path().to_string_lossy());`
$DIR/language/move-stdlib/src/tests.rs: `crate::build_error_code_map(&temp_file.path().to_string_lossy());`
$DIR/language/move-stdlib/src/tests.rs: `.path()`
$DIR/language/move-stdlib/src/tests.rs: `.to_string_lossy()`
$DIR/language/move-stdlib/src/tests.rs: `.path()`
$DIR/language/move-stdlib/src/tests.rs: `.to_string_lossy()`
$DIR/language/move-symbol-pool/src/lib.rs: `.lock()`
$DIR/language/move-symbol-pool/src/pool.rs: `.insert(Cow::Borrowed("hi"))`
$DIR/language/move-symbol-pool/src/pool.rs: `.insert(Cow::Owned("hi".to_owned()))`
$DIR/language/move-vm/integration-tests/src/tests/bad_entry_point_tests.rs: `m.serialize(&mut blob).unwrap();`
$DIR/language/move-vm/integration-tests/src/tests/bad_entry_point_tests.rs: `storage.publish_or_overwrite_module(module_id.clone(), blob);`
$DIR/language/move-vm/integration-tests/src/tests/bad_entry_point_tests.rs: `.new_session(&storage)`
$DIR/language/move-vm/integration-tests/src/tests/bad_entry_point_tests.rs: `.execute_function(
            &module_id,
            &fun_name,
            vec![],
            serialize_values(&vec![MoveValue::Signer(TEST_ADDR)]),
            &mut gas_status,
        )`
$DIR/language/move-vm/integration-tests/src/tests/bad_entry_point_tests.rs: `.replace("{{ADDR}}", &format!("0x{}", TEST_ADDR))`
$DIR/language/move-vm/integration-tests/src/tests/bad_entry_point_tests.rs: `.pop()`
$DIR/language/move-vm/integration-tests/src/tests/bad_entry_point_tests.rs: `.serialize(&mut blob)`
$DIR/language/move-vm/integration-tests/src/tests/bad_entry_point_tests.rs: `.publish_or_overwrite_module(module_id.clone(), blob)`
$DIR/language/move-vm/integration-tests/src/tests/bad_entry_point_tests.rs: `.new_session(&storage)`
$DIR/language/move-vm/integration-tests/src/tests/bad_entry_point_tests.rs: `.execute_function(
            &module_id,
            &fun_name,
            vec![],
            serialize_values(&vec![MoveValue::Signer(TEST_ADDR)]),
            &mut gas_status,
        )`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `ms.serialize(&mut blob).unwrap();`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `storage.publish_or_overwrite_module(ms.self_id(), blob);`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `m.serialize(&mut blob).unwrap();`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `storage.publish_or_overwrite_module(m.self_id(), blob);`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `s1.serialize(&mut script_blob).unwrap();`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `sess.execute_script(
        script_blob,
        vec![],
        vec![],
        vec![TEST_ADDR],
        &mut gas_status,
    )
    .unwrap();`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `storage.apply(changeset).unwrap();`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `s2.serialize(&mut script_blob).unwrap();`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `sess.execute_script(
            script_blob.clone(),
            vec![],
            vec![],
            vec![TEST_ADDR],
            &mut gas_status,
        )
        .unwrap();`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `storage.publish_or_overwrite_resource(
        TEST_ADDR,
        StructTag {
            address: TEST_ADDR,
            module: Identifier::new("M").unwrap(),
            name: Identifier::new("Foo").unwrap(),
            type_params: vec![],
        },
        vec![0x3, 0x4, 0x5],
    );`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `m.serialize(&mut blob).unwrap();`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `storage.publish_or_overwrite_module(m.self_id(), blob.clone());`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `sess.execute_function(&module_id, &fun_name, vec![], vec![], &mut gas_status)
            .unwrap();`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `blob[0] = 0xde;`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `blob[1] = 0xad;`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `blob[2] = 0xbe;`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `blob[3] = 0xef;`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `storage.publish_or_overwrite_module(m.self_id(), blob);`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `m.serialize(&mut blob).unwrap();`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `storage.publish_or_overwrite_module(m.self_id(), blob);`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `sess.execute_function(&module_id, &fun_name, vec![], vec![], &mut gas_status)
            .unwrap();`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `m.function_defs[0].code.as_mut().unwrap().code = vec![];`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `m.serialize(&mut blob).unwrap();`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `storage.publish_or_overwrite_module(m.self_id(), blob);`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `m.serialize(&mut blob_m).unwrap();`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `n.serialize(&mut blob_n).unwrap();`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `storage.publish_or_overwrite_module(m.self_id(), blob_m);`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `storage.publish_or_overwrite_module(n.self_id(), blob_n.clone());`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `sess.execute_function(&module_id, &fun_name, vec![], vec![], &mut gas_status)
            .unwrap();`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `storage.publish_or_overwrite_module(n.self_id(), blob_n);`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `m.serialize(&mut blob_m).unwrap();`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `n.serialize(&mut blob_n).unwrap();`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `storage.publish_or_overwrite_module(m.self_id(), blob_m.clone());`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `storage.publish_or_overwrite_module(n.self_id(), blob_n.clone());`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `sess.execute_function(&module_id, &fun_name, vec![], vec![], &mut gas_status)
            .unwrap();`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `blob_m[0] = 0xde;`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `blob_m[1] = 0xad;`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `blob_m[2] = 0xbe;`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `blob_m[3] = 0xef;`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `storage.publish_or_overwrite_module(m.self_id(), blob_m);`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `storage.publish_or_overwrite_module(n.self_id(), blob_n);`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `n.serialize(&mut blob_n).unwrap();`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `m.serialize(&mut blob_m).unwrap();`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `storage.publish_or_overwrite_module(m.self_id(), blob_m);`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `storage.publish_or_overwrite_module(n.self_id(), blob_n.clone());`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `sess.execute_function(&module_id, &fun_name, vec![], vec![], &mut gas_status)
            .unwrap();`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `m.function_defs[0].code.as_mut().unwrap().code = vec![];`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `m.serialize(&mut blob_m).unwrap();`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `storage.publish_or_overwrite_module(m.self_id(), blob_m);`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `storage.publish_or_overwrite_module(n.self_id(), blob_n);`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `m.serialize(&mut m_blob).unwrap();`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `s.serialize(&mut s_blob).unwrap();`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `delta.publish_module(m.self_id(), m_blob).unwrap();`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `delta.publish_module(s.self_id(), s_blob).unwrap();`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `sess.execute_function(&m_id, &foo_name, vec![], vec![], &mut gas_status)
            .unwrap();`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `.replace("{{ADDR}}", &format!("0x{}", TEST_ADDR))`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `.pop()`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `.pop()`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `.pop()`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `.pop()`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `.serialize(&mut blob)`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `.publish_or_overwrite_module(ms.self_id(), blob)`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `.self_id()`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `.serialize(&mut blob)`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `.publish_or_overwrite_module(m.self_id(), blob)`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `.self_id()`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `.serialize(&mut script_blob)`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `.new_session(&storage)`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `.execute_script(
        script_blob,
        vec![],
        vec![],
        vec![TEST_ADDR],
        &mut gas_status,
    )`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `.finish()`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `.apply(changeset)`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `.serialize(&mut script_blob)`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `.new_session(&storage)`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `.execute_script(
            script_blob.clone(),
            vec![],
            vec![],
            vec![TEST_ADDR],
            &mut gas_status,
        )`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `.publish_or_overwrite_resource(
        TEST_ADDR,
        StructTag {
            address: TEST_ADDR,
            module: Identifier::new("M").unwrap(),
            name: Identifier::new("Foo").unwrap(),
            type_params: vec![],
        },
        vec![0x3, 0x4, 0x5],
    )`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `.new_session(&storage)`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `.execute_script(
                script_blob,
                vec![],
                vec![],
                vec![TEST_ADDR],
                &mut gas_status,
            )`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `.replace("{{ADDR}}", &format!("0x{}", TEST_ADDR))`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `.pop()`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `.serialize(&mut blob)`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `.publish_or_overwrite_module(m.self_id(), blob.clone())`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `.self_id()`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `.new_session(&storage)`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `.execute_function(&module_id, &fun_name, vec![], vec![], &mut gas_status)`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `.publish_or_overwrite_module(m.self_id(), blob)`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `.self_id()`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `.new_session(&storage)`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `.execute_function(&module_id, &fun_name, vec![], vec![], &mut gas_status)`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `.replace("{{ADDR}}", &format!("0x{}", TEST_ADDR))`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `.pop()`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `.serialize(&mut blob)`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `.publish_or_overwrite_module(m.self_id(), blob)`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `.self_id()`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `.new_session(&storage)`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `.execute_function(&module_id, &fun_name, vec![], vec![], &mut gas_status)`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `.serialize(&mut blob)`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `.publish_or_overwrite_module(m.self_id(), blob)`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `.self_id()`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `.new_session(&storage)`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `.execute_function(&module_id, &fun_name, vec![], vec![], &mut gas_status)`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `.replace("{{ADDR}}", &format!("0x{}", TEST_ADDR))`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `.pop()`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `.pop()`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `.serialize(&mut blob_m)`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `.serialize(&mut blob_n)`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `.publish_or_overwrite_module(m.self_id(), blob_m)`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `.self_id()`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `.publish_or_overwrite_module(n.self_id(), blob_n.clone())`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `.self_id()`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `.new_session(&storage)`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `.execute_function(&module_id, &fun_name, vec![], vec![], &mut gas_status)`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `.publish_or_overwrite_module(n.self_id(), blob_n)`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `.self_id()`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `.new_session(&storage)`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `.execute_function(&module_id, &fun_name, vec![], vec![], &mut gas_status)`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `.replace("{{ADDR}}", &format!("0x{}", TEST_ADDR))`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `.pop()`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `.pop()`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `.serialize(&mut blob_m)`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `.serialize(&mut blob_n)`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `.publish_or_overwrite_module(m.self_id(), blob_m.clone())`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `.self_id()`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `.publish_or_overwrite_module(n.self_id(), blob_n.clone())`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `.self_id()`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `.new_session(&storage)`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `.execute_function(&module_id, &fun_name, vec![], vec![], &mut gas_status)`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `.publish_or_overwrite_module(m.self_id(), blob_m)`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `.self_id()`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `.publish_or_overwrite_module(n.self_id(), blob_n)`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `.self_id()`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `.new_session(&storage)`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `.execute_function(&module_id, &fun_name, vec![], vec![], &mut gas_status)`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `.replace("{{ADDR}}", &format!("0x{}", TEST_ADDR))`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `.pop()`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `.pop()`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `.serialize(&mut blob_n)`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `.serialize(&mut blob_m)`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `.publish_or_overwrite_module(m.self_id(), blob_m)`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `.self_id()`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `.publish_or_overwrite_module(n.self_id(), blob_n.clone())`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `.self_id()`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `.new_session(&storage)`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `.execute_function(&module_id, &fun_name, vec![], vec![], &mut gas_status)`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `.serialize(&mut blob_m)`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `.publish_or_overwrite_module(m.self_id(), blob_m)`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `.self_id()`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `.publish_or_overwrite_module(n.self_id(), blob_n)`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `.self_id()`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `.new_session(&storage)`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `.execute_function(&module_id, &fun_name, vec![], vec![], &mut gas_status)`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `.new_session(&storage)`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `.execute_function(&module_id, &fun_name, vec![], vec![], &mut gas_status)`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `.replace("{{ADDR}}", &format!("0x{}", TEST_ADDR))`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `.pop()`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `.pop()`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `.serialize(&mut m_blob)`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `.serialize(&mut s_blob)`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `.publish_module(m.self_id(), m_blob)`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `.self_id()`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `.publish_module(s.self_id(), s_blob)`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `.self_id()`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `.self_id()`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `.new_session(&storage)`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `.execute_function(&m_id, &foo_name, vec![], vec![], &mut gas_status)`
$DIR/language/move-vm/integration-tests/src/tests/bad_storage_tests.rs: `.execute_function(
                &m_id,
                &bar_name,
                vec![],
                serialize_values(&vec![MoveValue::Signer(TEST_ADDR)]),
                &mut gas_status,
            )`
$DIR/language/move-vm/integration-tests/src/tests/loader_tests.rs: `adapter.publish_modules(modules);`
$DIR/language/move-vm/integration-tests/src/tests/loader_tests.rs: `adapter.publish_modules(modules);`
$DIR/language/move-vm/integration-tests/src/tests/loader_tests.rs: `adapter.publish_modules(modules);`
$DIR/language/move-vm/integration-tests/src/tests/loader_tests.rs: `.publish_modules(modules)`
$DIR/language/move-vm/integration-tests/src/tests/loader_tests.rs: `.publish_modules(modules)`
$DIR/language/move-vm/integration-tests/src/tests/loader_tests.rs: `.publish_modules(modules)`
$DIR/language/move-vm/integration-tests/src/tests/mutated_accounts_tests.rs: `m.serialize(&mut blob).unwrap();`
$DIR/language/move-vm/integration-tests/src/tests/mutated_accounts_tests.rs: `storage.publish_or_overwrite_module(module_id.clone(), blob);`
$DIR/language/move-vm/integration-tests/src/tests/mutated_accounts_tests.rs: `sess.execute_function(
        &module_id,
        &publish,
        vec![],
        serialize_values(&vec![MoveValue::Signer(account1)]),
        &mut gas_status,
    )
    .unwrap();`
$DIR/language/move-vm/integration-tests/src/tests/mutated_accounts_tests.rs: `sess.execute_function(
        &module_id,
        &get,
        vec![],
        serialize_values(&vec![MoveValue::Address(account1)]),
        &mut gas_status,
    )
    .unwrap();`
$DIR/language/move-vm/integration-tests/src/tests/mutated_accounts_tests.rs: `sess.execute_function(
        &module_id,
        &flip,
        vec![],
        serialize_values(&vec![MoveValue::Address(account1)]),
        &mut gas_status,
    )
    .unwrap();`
$DIR/language/move-vm/integration-tests/src/tests/mutated_accounts_tests.rs: `storage.apply(changes).unwrap();`
$DIR/language/move-vm/integration-tests/src/tests/mutated_accounts_tests.rs: `sess.execute_function(
        &module_id,
        &get,
        vec![],
        serialize_values(&vec![MoveValue::Address(account1)]),
        &mut gas_status,
    )
    .unwrap();`
$DIR/language/move-vm/integration-tests/src/tests/mutated_accounts_tests.rs: `.replace("{{ADDR}}", &format!("0x{}", TEST_ADDR))`
$DIR/language/move-vm/integration-tests/src/tests/mutated_accounts_tests.rs: `.pop()`
$DIR/language/move-vm/integration-tests/src/tests/mutated_accounts_tests.rs: `.serialize(&mut blob)`
$DIR/language/move-vm/integration-tests/src/tests/mutated_accounts_tests.rs: `.publish_or_overwrite_module(module_id.clone(), blob)`
$DIR/language/move-vm/integration-tests/src/tests/mutated_accounts_tests.rs: `.new_session(&storage)`
$DIR/language/move-vm/integration-tests/src/tests/mutated_accounts_tests.rs: `.execute_function(
        &module_id,
        &publish,
        vec![],
        serialize_values(&vec![MoveValue::Signer(account1)]),
        &mut gas_status,
    )`
$DIR/language/move-vm/integration-tests/src/tests/mutated_accounts_tests.rs: `.execute_function(
        &module_id,
        &get,
        vec![],
        serialize_values(&vec![MoveValue::Address(account1)]),
        &mut gas_status,
    )`
$DIR/language/move-vm/integration-tests/src/tests/mutated_accounts_tests.rs: `.execute_function(
        &module_id,
        &flip,
        vec![],
        serialize_values(&vec![MoveValue::Address(account1)]),
        &mut gas_status,
    )`
$DIR/language/move-vm/integration-tests/src/tests/mutated_accounts_tests.rs: `.finish()`
$DIR/language/move-vm/integration-tests/src/tests/mutated_accounts_tests.rs: `.apply(changes)`
$DIR/language/move-vm/integration-tests/src/tests/mutated_accounts_tests.rs: `.new_session(&storage)`
$DIR/language/move-vm/integration-tests/src/tests/mutated_accounts_tests.rs: `.execute_function(
        &module_id,
        &get,
        vec![],
        serialize_values(&vec![MoveValue::Address(account1)]),
        &mut gas_status,
    )`
$DIR/language/move-vm/runtime/src/unit_tests/vm_arguments_tests.rs: `remote_view.add_module(module);`
$DIR/language/move-vm/runtime/src/unit_tests/vm_arguments_tests.rs: `.unwrap_or(StatusCode::ABORTED)`
$DIR/language/move-vm/runtime/src/unit_tests/vm_arguments_tests.rs: `.err()`
$DIR/language/move-vm/runtime/src/unit_tests/vm_arguments_tests.rs: `.unwrap_or(StatusCode::ABORTED)`
$DIR/language/move-vm/runtime/src/unit_tests/vm_arguments_tests.rs: `.self_id()`
$DIR/language/move-vm/runtime/src/unit_tests/vm_arguments_tests.rs: `.new_session(&remote_view)`
$DIR/language/move-vm/runtime/src/unit_tests/vm_arguments_tests.rs: `.execute_script_function(id, function_name, vec![], vec![], vec![], &mut gas_status)`
$DIR/language/move-vm/runtime/src/unit_tests/vm_arguments_tests.rs: `.err()`
$DIR/language/move-vm/runtime/src/unit_tests/vm_arguments_tests.rs: `.add_module(module)`
$DIR/language/move-vm/runtime/src/unit_tests/vm_arguments_tests.rs: `.new_session(&remote_view)`
$DIR/language/move-vm/runtime/src/unit_tests/vm_arguments_tests.rs: `.execute_script_function(id, function_name, vec![], vec![], vec![], &mut gas_status)`
$DIR/language/move-vm/runtime/src/unit_tests/vm_arguments_tests.rs: `.err()`
$DIR/language/move-vm/types/src/values/value_tests.rs: `locals.store_loc(1, Value::u64(42))?;`
$DIR/language/move-vm/types/src/values/value_tests.rs: `locals.store_loc(
        0,
        Value::struct_(Struct::pack(vec![Value::u8(10), Value::bool(false)])),
    )?;`
$DIR/language/move-vm/types/src/values/value_tests.rs: `f.write_ref(Value::bool(true))?;`
$DIR/language/move-vm/types/src/values/value_tests.rs: `locals.store_loc(0, outer(20))?;`
$DIR/language/move-vm/types/src/values/value_tests.rs: `r3.write_ref(Value::u64(30))?;`
$DIR/language/move-vm/types/src/values/value_tests.rs: `locals.store_loc(0, Value::u8(0))?;`
$DIR/language/move-vm/types/src/values/value_tests.rs: `.store_loc(1, Value::u64(42))`
$DIR/language/move-vm/types/src/values/value_tests.rs: `.borrow_loc(1)`
$DIR/language/move-vm/types/src/values/value_tests.rs: `.value_as::<Reference>()`
$DIR/language/move-vm/types/src/values/value_tests.rs: `.unpack()`
$DIR/language/move-vm/types/src/values/value_tests.rs: `.collect()`
$DIR/language/move-vm/types/src/values/value_tests.rs: `.zip(unpacked.iter())`
$DIR/language/move-vm/types/src/values/value_tests.rs: `.store_loc(
        0,
        Value::struct_(Struct::pack(vec![Value::u8(10), Value::bool(false)])),
    )`
$DIR/language/move-vm/types/src/values/value_tests.rs: `.borrow_loc(0)`
$DIR/language/move-vm/types/src/values/value_tests.rs: `.value_as()`
$DIR/language/move-vm/types/src/values/value_tests.rs: `.borrow_field(1)`
$DIR/language/move-vm/types/src/values/value_tests.rs: `.value_as()`
$DIR/language/move-vm/types/src/values/value_tests.rs: `.borrow_field(1)`
$DIR/language/move-vm/types/src/values/value_tests.rs: `.value_as()`
$DIR/language/move-vm/types/src/values/value_tests.rs: `.write_ref(Value::bool(true))`
$DIR/language/move-vm/types/src/values/value_tests.rs: `.borrow_field(1)`
$DIR/language/move-vm/types/src/values/value_tests.rs: `.value_as()`
$DIR/language/move-vm/types/src/values/value_tests.rs: `.store_loc(0, outer(20))`
$DIR/language/move-vm/types/src/values/value_tests.rs: `.borrow_loc(0)`
$DIR/language/move-vm/types/src/values/value_tests.rs: `.value_as()`
$DIR/language/move-vm/types/src/values/value_tests.rs: `.borrow_field(1)`
$DIR/language/move-vm/types/src/values/value_tests.rs: `.value_as()`
$DIR/language/move-vm/types/src/values/value_tests.rs: `.borrow_field(0)`
$DIR/language/move-vm/types/src/values/value_tests.rs: `.value_as()`
$DIR/language/move-vm/types/src/values/value_tests.rs: `.borrow_field(0)`
$DIR/language/move-vm/types/src/values/value_tests.rs: `.value_as()`
$DIR/language/move-vm/types/src/values/value_tests.rs: `.write_ref(Value::u64(30))`
$DIR/language/move-vm/types/src/values/value_tests.rs: `.borrow_field(0)`
$DIR/language/move-vm/types/src/values/value_tests.rs: `.value_as()`
$DIR/language/move-vm/types/src/values/value_tests.rs: `.store_loc(0, Value::u8(0))`
$DIR/language/move-vm/types/src/values/value_tests.rs: `.borrow_loc(0)`
$DIR/language/testing-infra/functional-tests/src/checker/tests/parse_directives.rs: `check_sp(&directives[0], &Directive::Check("abc".to_string()), 10, 13);`
$DIR/language/testing-infra/functional-tests/src/checker/tests/parse_directives.rs: `check_sp(&directives[0], &Directive::Not("abc".to_string()), 8, 11);`
$DIR/language/testing-infra/functional-tests/src/checker/tests/parse_directives.rs: `check_sp(&directives[0], &Directive::Check("abc".to_string()), 10, 13);`
$DIR/language/testing-infra/functional-tests/src/checker/tests/parse_directives.rs: `check_sp(&directives[1], &Directive::Check("f".to_string()), 15, 16);`
$DIR/language/testing-infra/functional-tests/src/checker/tests/parse_directives.rs: `check_sp(&directives[0], &Directive::Not("abc".to_string()), 8, 11);`
$DIR/language/testing-infra/functional-tests/src/checker/tests/parse_directives.rs: `check_sp(&directives[1], &Directive::Not("f".to_string()), 13, 14);`
$DIR/language/testing-infra/functional-tests/src/checker/tests/parse_directives.rs: `check_sp(&directives[0], &Directive::Not("a".to_string()), 6, 7);`
$DIR/language/testing-infra/functional-tests/src/checker/tests/parse_directives.rs: `check_sp(&directives[1], &Directive::Not("b".to_string()), 8, 9);`
$DIR/language/testing-infra/functional-tests/src/checker/tests/parse_directives.rs: `check_sp(&directives[2], &Directive::Not("c".to_string()), 10, 11);`
$DIR/language/testing-infra/functional-tests/src/checker/tests/parse_directives.rs: `check_sp(
        &directives[0],
        &Directive::Check("abc  def\\\t\n\r\"".to_string()),
        10,
        30,
    );`
$DIR/language/testing-infra/functional-tests/src/checker/tests/parse_directives.rs: `check_sp(&directives[0], &Directive::Check(" ".to_string()), 10, 13);`
$DIR/language/testing-infra/functional-tests/src/checker/tests/parse_directives.rs: `check_sp(&directives[1], &Directive::Check("\"".to_string()), 14, 18);`
$DIR/language/testing-infra/functional-tests/src/checker/tests/parse_directives.rs: `check_sp(&directives[0], &Directive::Check(" ".to_string()), 10, 13);`
$DIR/language/testing-infra/functional-tests/src/checker/tests/parse_directives.rs: `check_sp(&directives[1], &Directive::Check("abc".to_string()), 14, 17);`
$DIR/language/testing-infra/functional-tests/src/checker/tests/parse_directives.rs: `check_sp(&directives[2], &Directive::Check("".to_string()), 19, 21);`
$DIR/language/testing-infra/functional-tests/src/tests/block_metadata_config_tests.rs: `s.parse::<Entry>().unwrap();`
$DIR/language/testing-infra/functional-tests/src/tests/block_metadata_config_tests.rs: `s.parse::<Entry>().unwrap_err();`
$DIR/language/testing-infra/functional-tests/src/tests/block_metadata_config_tests.rs: `s.parse::<Entry>().unwrap();`
$DIR/language/testing-infra/functional-tests/src/tests/block_metadata_config_tests.rs: `s.parse::<Entry>().unwrap_err();`
$DIR/language/testing-infra/functional-tests/src/tests/block_metadata_config_tests.rs: `parse_and_build_config(&global, r"
        //! proposer: alice
        //! block-time: 6
    ").unwrap();`
$DIR/language/testing-infra/functional-tests/src/tests/block_metadata_config_tests.rs: `parse_and_build_config(&global, r"
        //! proposer: alice
    ").unwrap_err();`
$DIR/language/testing-infra/functional-tests/src/tests/block_metadata_config_tests.rs: `.parse::<Entry>()`
$DIR/language/testing-infra/functional-tests/src/tests/block_metadata_config_tests.rs: `.parse::<Entry>()`
$DIR/language/testing-infra/functional-tests/src/tests/block_metadata_config_tests.rs: `.parse::<Entry>()`
$DIR/language/testing-infra/functional-tests/src/tests/block_metadata_config_tests.rs: `.parse::<Entry>()`
$DIR/language/testing-infra/functional-tests/src/tests/global_config_tests.rs: `s.parse::<Entry>().unwrap();`
$DIR/language/testing-infra/functional-tests/src/tests/global_config_tests.rs: `s.parse::<Entry>().unwrap_err();`
$DIR/language/testing-infra/functional-tests/src/tests/global_config_tests.rs: `.parse::<Entry>()`
$DIR/language/testing-infra/functional-tests/src/tests/global_config_tests.rs: `.parse::<Entry>()`
$DIR/language/testing-infra/functional-tests/src/tests/global_config_tests.rs: `.accounts.get("bob")`
$DIR/language/testing-infra/functional-tests/src/tests/global_config_tests.rs: `.accounts.get("default")`
$DIR/language/testing-infra/functional-tests/src/tests/global_config_tests.rs: `.accounts.get("default")`
$DIR/language/testing-infra/functional-tests/src/tests/global_config_tests.rs: `.accounts.get("bob")`
$DIR/language/testing-infra/functional-tests/src/tests/transaction_config_tests.rs: `s.parse::<Entry>().unwrap();`
$DIR/language/testing-infra/functional-tests/src/tests/transaction_config_tests.rs: `s.parse::<Entry>().unwrap_err();`
$DIR/language/testing-infra/functional-tests/src/tests/transaction_config_tests.rs: `s.parse::<Entry>().unwrap();`
$DIR/language/testing-infra/functional-tests/src/tests/transaction_config_tests.rs: `s.parse::<Entry>().unwrap_err();`
$DIR/language/testing-infra/functional-tests/src/tests/transaction_config_tests.rs: `s.parse::<Entry>().unwrap();`
$DIR/language/testing-infra/functional-tests/src/tests/transaction_config_tests.rs: `s.parse::<Entry>().unwrap_err();`
$DIR/language/testing-infra/functional-tests/src/tests/transaction_config_tests.rs: `s.parse::<Entry>().unwrap();`
$DIR/language/testing-infra/functional-tests/src/tests/transaction_config_tests.rs: `s.parse::<Entry>().unwrap_err();`
$DIR/language/testing-infra/functional-tests/src/tests/transaction_config_tests.rs: `.parse::<Entry>()`
$DIR/language/testing-infra/functional-tests/src/tests/transaction_config_tests.rs: `.parse::<Entry>()`
$DIR/language/testing-infra/functional-tests/src/tests/transaction_config_tests.rs: `.parse::<Entry>()`
$DIR/language/testing-infra/functional-tests/src/tests/transaction_config_tests.rs: `.parse::<Entry>()`
$DIR/language/testing-infra/functional-tests/src/tests/transaction_config_tests.rs: `.parse::<Entry>()`
$DIR/language/testing-infra/functional-tests/src/tests/transaction_config_tests.rs: `.parse::<Entry>()`
$DIR/language/testing-infra/functional-tests/src/tests/transaction_config_tests.rs: `.parse::<Entry>()`
$DIR/language/testing-infra/functional-tests/src/tests/transaction_config_tests.rs: `.parse::<Entry>()`
$DIR/language/testing-infra/test-generation/tests/boolean_instructions.rs: `state1.stack_push(AbstractValue::new_primitive(SignatureToken::Bool));`
$DIR/language/testing-infra/test-generation/tests/boolean_instructions.rs: `state1.stack_push(AbstractValue::new_primitive(SignatureToken::Bool));`
$DIR/language/testing-infra/test-generation/tests/boolean_instructions.rs: `state1.stack_push(AbstractValue::new_primitive(SignatureToken::Bool));`
$DIR/language/testing-infra/test-generation/tests/boolean_instructions.rs: `state1.stack_push(AbstractValue::new_primitive(SignatureToken::Bool));`
$DIR/language/testing-infra/test-generation/tests/boolean_instructions.rs: `state1.stack_push(AbstractValue::new_primitive(SignatureToken::Bool));`
$DIR/language/testing-infra/test-generation/tests/boolean_instructions.rs: `state1.stack_push(AbstractValue::new_primitive(SignatureToken::Bool));`
$DIR/language/testing-infra/test-generation/tests/boolean_instructions.rs: `.stack_push(AbstractValue::new_primitive(SignatureToken::Bool))`
$DIR/language/testing-infra/test-generation/tests/boolean_instructions.rs: `.stack_push(AbstractValue::new_primitive(SignatureToken::Bool))`
$DIR/language/testing-infra/test-generation/tests/boolean_instructions.rs: `.stack_push(AbstractValue::new_primitive(SignatureToken::Bool))`
$DIR/language/testing-infra/test-generation/tests/boolean_instructions.rs: `.stack_push(AbstractValue::new_primitive(SignatureToken::Bool))`
$DIR/language/testing-infra/test-generation/tests/boolean_instructions.rs: `.stack_push(AbstractValue::new_primitive(SignatureToken::Bool))`
$DIR/language/testing-infra/test-generation/tests/boolean_instructions.rs: `.stack_push(AbstractValue::new_primitive(SignatureToken::Bool))`
$DIR/language/testing-infra/test-generation/tests/call_graph.rs: `call_graph.add_call(FunctionHandleIndex(0), FunctionHandleIndex(1));`
$DIR/language/testing-infra/test-generation/tests/call_graph.rs: `call_graph.add_call(FunctionHandleIndex(1), FunctionHandleIndex(2));`
$DIR/language/testing-infra/test-generation/tests/call_graph.rs: `call_graph.add_call(FunctionHandleIndex(2), FunctionHandleIndex(0));`
$DIR/language/testing-infra/test-generation/tests/call_graph.rs: `call_graph.add_call(FunctionHandleIndex(0), FunctionHandleIndex(1));`
$DIR/language/testing-infra/test-generation/tests/call_graph.rs: `call_graph.add_call(FunctionHandleIndex(1), FunctionHandleIndex(2));`
$DIR/language/testing-infra/test-generation/tests/call_graph.rs: `call_graph.add_call(FunctionHandleIndex(1), FunctionHandleIndex(3));`
$DIR/language/testing-infra/test-generation/tests/call_graph.rs: `call_graph.add_call(FunctionHandleIndex(3), FunctionHandleIndex(2));`
$DIR/language/testing-infra/test-generation/tests/call_graph.rs: `call_graph.add_call(FunctionHandleIndex(0), FunctionHandleIndex(1));`
$DIR/language/testing-infra/test-generation/tests/call_graph.rs: `call_graph.add_call(FunctionHandleIndex(1), FunctionHandleIndex(2));`
$DIR/language/testing-infra/test-generation/tests/call_graph.rs: `call_graph.add_call(FunctionHandleIndex(1), FunctionHandleIndex(3));`
$DIR/language/testing-infra/test-generation/tests/call_graph.rs: `call_graph.add_call(FunctionHandleIndex(3), FunctionHandleIndex(2));`
$DIR/language/testing-infra/test-generation/tests/call_graph.rs: `.can_call(FunctionHandleIndex(0))`
$DIR/language/testing-infra/test-generation/tests/call_graph.rs: `.add_call(FunctionHandleIndex(0), FunctionHandleIndex(1))`
$DIR/language/testing-infra/test-generation/tests/call_graph.rs: `.can_call(FunctionHandleIndex(0))`
$DIR/language/testing-infra/test-generation/tests/call_graph.rs: `.can_call(FunctionHandleIndex(1))`
$DIR/language/testing-infra/test-generation/tests/call_graph.rs: `.add_call(FunctionHandleIndex(1), FunctionHandleIndex(2))`
$DIR/language/testing-infra/test-generation/tests/call_graph.rs: `.add_call(FunctionHandleIndex(2), FunctionHandleIndex(0))`
$DIR/language/testing-infra/test-generation/tests/call_graph.rs: `.can_call(FunctionHandleIndex(0))`
$DIR/language/testing-infra/test-generation/tests/call_graph.rs: `.add_call(FunctionHandleIndex(0), FunctionHandleIndex(1))`
$DIR/language/testing-infra/test-generation/tests/call_graph.rs: `.add_call(FunctionHandleIndex(1), FunctionHandleIndex(2))`
$DIR/language/testing-infra/test-generation/tests/call_graph.rs: `.add_call(FunctionHandleIndex(1), FunctionHandleIndex(3))`
$DIR/language/testing-infra/test-generation/tests/call_graph.rs: `.add_call(FunctionHandleIndex(3), FunctionHandleIndex(2))`
$DIR/language/testing-infra/test-generation/tests/call_graph.rs: `.add_call(FunctionHandleIndex(0), FunctionHandleIndex(1))`
$DIR/language/testing-infra/test-generation/tests/call_graph.rs: `.add_call(FunctionHandleIndex(1), FunctionHandleIndex(2))`
$DIR/language/testing-infra/test-generation/tests/call_graph.rs: `.add_call(FunctionHandleIndex(1), FunctionHandleIndex(3))`
$DIR/language/testing-infra/test-generation/tests/call_graph.rs: `.add_call(FunctionHandleIndex(3), FunctionHandleIndex(2))`
$DIR/language/testing-infra/test-generation/tests/comparison_instructions.rs: `state1.stack_push(AbstractValue::new_primitive(ty.clone()));`
$DIR/language/testing-infra/test-generation/tests/comparison_instructions.rs: `state1.stack_push(AbstractValue::new_primitive(ty.clone()));`
$DIR/language/testing-infra/test-generation/tests/comparison_instructions.rs: `state1.stack_push(AbstractValue::new_primitive(SignatureToken::Bool));`
$DIR/language/testing-infra/test-generation/tests/comparison_instructions.rs: `state1.stack_push(AbstractValue::new_primitive(SignatureToken::Bool));`
$DIR/language/testing-infra/test-generation/tests/comparison_instructions.rs: `state1.stack_push(AbstractValue::new_primitive(SignatureToken::U64));`
$DIR/language/testing-infra/test-generation/tests/comparison_instructions.rs: `state1.stack_push(AbstractValue::new_primitive(SignatureToken::U64));`
$DIR/language/testing-infra/test-generation/tests/comparison_instructions.rs: `state1.stack_push(AbstractValue::new_primitive(SignatureToken::Bool));`
$DIR/language/testing-infra/test-generation/tests/comparison_instructions.rs: `state1.stack_push(AbstractValue::new_primitive(SignatureToken::Bool));`
$DIR/language/testing-infra/test-generation/tests/comparison_instructions.rs: `.cartesian_product(INTEGER_TYPES.iter())`
$DIR/language/testing-infra/test-generation/tests/comparison_instructions.rs: `.stack_push(AbstractValue::new_primitive(ty.clone()))`
$DIR/language/testing-infra/test-generation/tests/comparison_instructions.rs: `.stack_push(AbstractValue::new_primitive(ty.clone()))`
$DIR/language/testing-infra/test-generation/tests/comparison_instructions.rs: `.stack_push(AbstractValue::new_primitive(SignatureToken::Bool))`
$DIR/language/testing-infra/test-generation/tests/comparison_instructions.rs: `.stack_push(AbstractValue::new_primitive(SignatureToken::Bool))`
$DIR/language/testing-infra/test-generation/tests/comparison_instructions.rs: `.stack_push(AbstractValue::new_primitive(SignatureToken::U64))`
$DIR/language/testing-infra/test-generation/tests/comparison_instructions.rs: `.stack_push(AbstractValue::new_primitive(SignatureToken::U64))`
$DIR/language/testing-infra/test-generation/tests/comparison_instructions.rs: `.stack_push(AbstractValue::new_primitive(SignatureToken::Bool))`
$DIR/language/testing-infra/test-generation/tests/comparison_instructions.rs: `.stack_push(AbstractValue::new_primitive(SignatureToken::Bool))`
$DIR/language/testing-infra/test-generation/tests/control_flow_instructions.rs: `state1.stack_push(AbstractValue::new_primitive(SignatureToken::U64));`
$DIR/language/testing-infra/test-generation/tests/control_flow_instructions.rs: `state1.stack_push(AbstractValue::new_primitive(SignatureToken::Bool));`
$DIR/language/testing-infra/test-generation/tests/control_flow_instructions.rs: `state1.stack_push(AbstractValue::new_primitive(SignatureToken::U64));`
$DIR/language/testing-infra/test-generation/tests/control_flow_instructions.rs: `state1.stack_push(AbstractValue::new_primitive(SignatureToken::Bool));`
$DIR/language/testing-infra/test-generation/tests/control_flow_instructions.rs: `.stack_push(AbstractValue::new_primitive(SignatureToken::U64))`
$DIR/language/testing-infra/test-generation/tests/control_flow_instructions.rs: `.stack_push(AbstractValue::new_primitive(SignatureToken::Bool))`
$DIR/language/testing-infra/test-generation/tests/control_flow_instructions.rs: `.stack_push(AbstractValue::new_primitive(SignatureToken::U64))`
$DIR/language/testing-infra/test-generation/tests/control_flow_instructions.rs: `.stack_push(AbstractValue::new_primitive(SignatureToken::Bool))`
$DIR/language/testing-infra/test-generation/tests/integer_instructions.rs: `state1.stack_push(AbstractValue::new_primitive(ty.clone()));`
$DIR/language/testing-infra/test-generation/tests/integer_instructions.rs: `state1.stack_push(AbstractValue::new_primitive(ty.clone()));`
$DIR/language/testing-infra/test-generation/tests/integer_instructions.rs: `state1.stack_push(AbstractValue::new_primitive(ty.clone()));`
$DIR/language/testing-infra/test-generation/tests/integer_instructions.rs: `state1.stack_push(AbstractValue::new_primitive(SignatureToken::U8));`
$DIR/language/testing-infra/test-generation/tests/integer_instructions.rs: `state1.stack_push(AbstractValue::new_primitive(ty2.clone()));`
$DIR/language/testing-infra/test-generation/tests/integer_instructions.rs: `.cartesian_product(INTEGER_TYPES.iter())`
$DIR/language/testing-infra/test-generation/tests/integer_instructions.rs: `.stack_push(AbstractValue::new_primitive(ty.clone()))`
$DIR/language/testing-infra/test-generation/tests/integer_instructions.rs: `.stack_push(AbstractValue::new_primitive(ty.clone()))`
$DIR/language/testing-infra/test-generation/tests/integer_instructions.rs: `.cartesian_product(INTEGER_TYPES.iter())`
$DIR/language/testing-infra/test-generation/tests/integer_instructions.rs: `.stack_push(AbstractValue::new_primitive(ty.clone()))`
$DIR/language/testing-infra/test-generation/tests/integer_instructions.rs: `.stack_push(AbstractValue::new_primitive(SignatureToken::U8))`
$DIR/language/testing-infra/test-generation/tests/integer_instructions.rs: `.stack_push(AbstractValue::new_primitive(ty2.clone()))`
$DIR/language/testing-infra/test-generation/tests/local_instructions.rs: `state1.local_insert(
        0,
        AbstractValue::new_primitive(SignatureToken::U64),
        BorrowState::Available,
    );`
$DIR/language/testing-infra/test-generation/tests/local_instructions.rs: `state1.local_insert(
        0,
        AbstractValue::new_primitive(SignatureToken::U64),
        BorrowState::Unavailable,
    );`
$DIR/language/testing-infra/test-generation/tests/local_instructions.rs: `state1.local_insert(
        0,
        AbstractValue::new_primitive(SignatureToken::U64),
        BorrowState::Available,
    );`
$DIR/language/testing-infra/test-generation/tests/local_instructions.rs: `state1.local_insert(
        0,
        AbstractValue::new_primitive(SignatureToken::U64),
        BorrowState::Unavailable,
    );`
$DIR/language/testing-infra/test-generation/tests/local_instructions.rs: `state1.local_insert(
        0,
        AbstractValue::new_primitive(SignatureToken::U64),
        BorrowState::Available,
    );`
$DIR/language/testing-infra/test-generation/tests/local_instructions.rs: `state1.local_insert(
        0,
        AbstractValue::new_primitive(SignatureToken::U64),
        BorrowState::Available,
    );`
$DIR/language/testing-infra/test-generation/tests/local_instructions.rs: `.local_insert(
        0,
        AbstractValue::new_primitive(SignatureToken::U64),
        BorrowState::Available,
    )`
$DIR/language/testing-infra/test-generation/tests/local_instructions.rs: `.local_insert(
        0,
        AbstractValue::new_primitive(SignatureToken::U64),
        BorrowState::Unavailable,
    )`
$DIR/language/testing-infra/test-generation/tests/local_instructions.rs: `.local_insert(
        0,
        AbstractValue::new_primitive(SignatureToken::U64),
        BorrowState::Available,
    )`
$DIR/language/testing-infra/test-generation/tests/local_instructions.rs: `.local_insert(
        0,
        AbstractValue::new_primitive(SignatureToken::U64),
        BorrowState::Unavailable,
    )`
$DIR/language/testing-infra/test-generation/tests/local_instructions.rs: `.local_insert(
        0,
        AbstractValue::new_primitive(SignatureToken::U64),
        BorrowState::Available,
    )`
$DIR/language/testing-infra/test-generation/tests/local_instructions.rs: `.local_insert(
        0,
        AbstractValue::new_primitive(SignatureToken::U64),
        BorrowState::Available,
    )`
$DIR/language/testing-infra/test-generation/tests/reference_instructions.rs: `state1.stack_push(AbstractValue::new_reference(
        SignatureToken::MutableReference(Box::new(SignatureToken::U64)),
        AbilitySet::PRIMITIVES,
    ));`
$DIR/language/testing-infra/test-generation/tests/reference_instructions.rs: `state1.stack_push(AbstractValue::new_reference(
        SignatureToken::MutableReference(Box::new(SignatureToken::U64)),
        AbilitySet::PRIMITIVES,
    ));`
$DIR/language/testing-infra/test-generation/tests/reference_instructions.rs: `state1.stack_push(AbstractValue::new_primitive(SignatureToken::U64));`
$DIR/language/testing-infra/test-generation/tests/reference_instructions.rs: `state1.stack_push(AbstractValue::new_reference(
        SignatureToken::MutableReference(Box::new(SignatureToken::U64)),
        AbilitySet::PRIMITIVES,
    ));`
$DIR/language/testing-infra/test-generation/tests/reference_instructions.rs: `state1.stack_push(AbstractValue::new_primitive(SignatureToken::Bool));`
$DIR/language/testing-infra/test-generation/tests/reference_instructions.rs: `state1.stack_push(AbstractValue::new_reference(
        SignatureToken::MutableReference(Box::new(SignatureToken::U64)),
        AbilitySet::PRIMITIVES,
    ));`
$DIR/language/testing-infra/test-generation/tests/reference_instructions.rs: `state1.stack_push(AbstractValue::new_primitive(SignatureToken::U64));`
$DIR/language/testing-infra/test-generation/tests/reference_instructions.rs: `state1.stack_push(AbstractValue::new_reference(
        SignatureToken::MutableReference(Box::new(SignatureToken::U64)),
        AbilitySet::PRIMITIVES,
    ));`
$DIR/language/testing-infra/test-generation/tests/reference_instructions.rs: `state1.stack_push(AbstractValue::new_reference(
        SignatureToken::MutableReference(Box::new(SignatureToken::U64)),
        AbilitySet::PRIMITIVES,
    ));`
$DIR/language/testing-infra/test-generation/tests/reference_instructions.rs: `state1.stack_push(AbstractValue::new_reference(
        SignatureToken::Reference(Box::new(SignatureToken::U64)),
        AbilitySet::PRIMITIVES,
    ));`
$DIR/language/testing-infra/test-generation/tests/reference_instructions.rs: `.stack_push(AbstractValue::new_reference(
        SignatureToken::MutableReference(Box::new(SignatureToken::U64)),
        AbilitySet::PRIMITIVES,
    ))`
$DIR/language/testing-infra/test-generation/tests/reference_instructions.rs: `.stack_push(AbstractValue::new_reference(
        SignatureToken::MutableReference(Box::new(SignatureToken::U64)),
        AbilitySet::PRIMITIVES,
    ))`
$DIR/language/testing-infra/test-generation/tests/reference_instructions.rs: `.stack_push(AbstractValue::new_primitive(SignatureToken::U64))`
$DIR/language/testing-infra/test-generation/tests/reference_instructions.rs: `.stack_push(AbstractValue::new_reference(
        SignatureToken::MutableReference(Box::new(SignatureToken::U64)),
        AbilitySet::PRIMITIVES,
    ))`
$DIR/language/testing-infra/test-generation/tests/reference_instructions.rs: `.stack_push(AbstractValue::new_primitive(SignatureToken::Bool))`
$DIR/language/testing-infra/test-generation/tests/reference_instructions.rs: `.stack_push(AbstractValue::new_reference(
        SignatureToken::MutableReference(Box::new(SignatureToken::U64)),
        AbilitySet::PRIMITIVES,
    ))`
$DIR/language/testing-infra/test-generation/tests/reference_instructions.rs: `.stack_push(AbstractValue::new_primitive(SignatureToken::U64))`
$DIR/language/testing-infra/test-generation/tests/reference_instructions.rs: `.stack_push(AbstractValue::new_reference(
        SignatureToken::MutableReference(Box::new(SignatureToken::U64)),
        AbilitySet::PRIMITIVES,
    ))`
$DIR/language/testing-infra/test-generation/tests/reference_instructions.rs: `.stack_push(AbstractValue::new_reference(
        SignatureToken::MutableReference(Box::new(SignatureToken::U64)),
        AbilitySet::PRIMITIVES,
    ))`
$DIR/language/testing-infra/test-generation/tests/reference_instructions.rs: `.stack_push(AbstractValue::new_reference(
        SignatureToken::Reference(Box::new(SignatureToken::U64)),
        AbilitySet::PRIMITIVES,
    ))`
$DIR/language/testing-infra/test-generation/tests/special_instructions.rs: `state1.stack_push(AbstractValue::new_primitive(SignatureToken::U64));`
$DIR/language/testing-infra/test-generation/tests/special_instructions.rs: `state1.stack_push(AbstractValue::new_primitive(SignatureToken::Address));`
$DIR/language/testing-infra/test-generation/tests/special_instructions.rs: `.stack_push(AbstractValue::new_primitive(SignatureToken::U64))`
$DIR/language/testing-infra/test-generation/tests/special_instructions.rs: `.stack_push(AbstractValue::new_primitive(SignatureToken::Address))`
$DIR/language/testing-infra/test-generation/tests/struct_instructions.rs: `state1.stack_push(abstract_value);`
$DIR/language/testing-infra/test-generation/tests/struct_instructions.rs: `state1.stack_push(struct_value);`
$DIR/language/testing-infra/test-generation/tests/struct_instructions.rs: `state1.stack_push(AbstractValue::new_primitive(SignatureToken::Address));`
$DIR/language/testing-infra/test-generation/tests/struct_instructions.rs: `state1.stack_push(AbstractValue::new_primitive(SignatureToken::Address));`
$DIR/language/testing-infra/test-generation/tests/struct_instructions.rs: `state1.stack_push(AbstractValue::new_primitive(SignatureToken::Address));`
$DIR/language/testing-infra/test-generation/tests/struct_instructions.rs: `state1.stack_push(AbstractValue::new_primitive(SignatureToken::Address));`
$DIR/language/testing-infra/test-generation/tests/struct_instructions.rs: `state1.stack_push(AbstractValue::new_reference(
        SignatureToken::Reference(Box::new(SignatureToken::Signer)),
        AbilitySet::EMPTY | Ability::Drop,
    ));`
$DIR/language/testing-infra/test-generation/tests/struct_instructions.rs: `state1.stack_push(create_struct_value(&state1.module.module).0);`
$DIR/language/testing-infra/test-generation/tests/struct_instructions.rs: `state1.stack_push(AbstractValue::new_reference(
        SignatureToken::Reference(Box::new(SignatureToken::Signer)),
        AbilitySet::EMPTY | Ability::Drop,
    ));`
$DIR/language/testing-infra/test-generation/tests/struct_instructions.rs: `state1.stack_push(create_struct_value(&state1.module.module).0);`
$DIR/language/testing-infra/test-generation/tests/struct_instructions.rs: `state1.stack_push(AbstractValue::new_reference(
        SignatureToken::Reference(Box::new(SignatureToken::Signer)),
        AbilitySet::EMPTY | Ability::Drop,
    ));`
$DIR/language/testing-infra/test-generation/tests/struct_instructions.rs: `module.field_handles.push(FieldHandle {
        owner: struct_def_idx,
        field: 0,
    });`
$DIR/language/testing-infra/test-generation/tests/struct_instructions.rs: `state1.stack_push(AbstractValue {
        token: SignatureToken::MutableReference(Box::new(struct_value.token)),
        abilities: struct_value.abilities,
    });`
$DIR/language/testing-infra/test-generation/tests/struct_instructions.rs: `module.field_handles.push(FieldHandle {
        owner: struct_def_idx,
        field: 0,
    });`
$DIR/language/testing-infra/test-generation/tests/struct_instructions.rs: `module.field_handles.push(FieldHandle {
        owner: struct_def_idx,
        field: 0,
    });`
$DIR/language/testing-infra/test-generation/tests/struct_instructions.rs: `state1.stack_push(AbstractValue {
        token: SignatureToken::Reference(Box::new(struct_value.token)),
        abilities: struct_value.abilities,
    });`
$DIR/language/testing-infra/test-generation/tests/struct_instructions.rs: `module.field_handles.push(FieldHandle {
        owner: struct_def_idx,
        field: 0,
    });`
$DIR/language/testing-infra/test-generation/tests/struct_instructions.rs: `state1.stack_push(AbstractValue {
        token: SignatureToken::Reference(Box::new(struct_value.token)),
        abilities: struct_value.abilities,
    });`
$DIR/language/testing-infra/test-generation/tests/struct_instructions.rs: `module.field_handles.push(FieldHandle {
        owner: struct_def_idx,
        field: 0,
    });`
$DIR/language/testing-infra/test-generation/tests/struct_instructions.rs: `module.field_handles.push(FieldHandle {
        owner: struct_def_idx,
        field: 0,
    });`
$DIR/language/testing-infra/test-generation/tests/struct_instructions.rs: `state1.stack_push(AbstractValue {
        token: SignatureToken::MutableReference(Box::new(struct_value.token)),
        abilities: struct_value.abilities,
    });`
$DIR/language/testing-infra/test-generation/tests/struct_instructions.rs: `state1.stack_push(AbstractValue::new_primitive(SignatureToken::Address));`
$DIR/language/testing-infra/test-generation/tests/struct_instructions.rs: `state1.stack_push(AbstractValue::new_primitive(SignatureToken::Address));`
$DIR/language/testing-infra/test-generation/tests/struct_instructions.rs: `.stack_push(abstract_value)`
$DIR/language/testing-infra/test-generation/tests/struct_instructions.rs: `.stack_peek(0)`
$DIR/language/testing-infra/test-generation/tests/struct_instructions.rs: `.stack_push(struct_value)`
$DIR/language/testing-infra/test-generation/tests/struct_instructions.rs: `.stack_push(AbstractValue::new_primitive(SignatureToken::Address))`
$DIR/language/testing-infra/test-generation/tests/struct_instructions.rs: `.stack_push(AbstractValue::new_primitive(SignatureToken::Address))`
$DIR/language/testing-infra/test-generation/tests/struct_instructions.rs: `.module
        .module
        .struct_def_at(StructDefinitionIndex::new(0))`
$DIR/language/testing-infra/test-generation/tests/struct_instructions.rs: `.stack_push(AbstractValue::new_primitive(SignatureToken::Address))`
$DIR/language/testing-infra/test-generation/tests/struct_instructions.rs: `.stack_peek(0)`
$DIR/language/testing-infra/test-generation/tests/struct_instructions.rs: `.stack_push(AbstractValue::new_primitive(SignatureToken::Address))`
$DIR/language/testing-infra/test-generation/tests/struct_instructions.rs: `.stack_push(AbstractValue::new_reference(
        SignatureToken::Reference(Box::new(SignatureToken::Signer)),
        AbilitySet::EMPTY | Ability::Drop,
    ))`
$DIR/language/testing-infra/test-generation/tests/struct_instructions.rs: `.stack_push(create_struct_value(&state1.module.module).0)`
$DIR/language/testing-infra/test-generation/tests/struct_instructions.rs: `.stack_push(AbstractValue::new_reference(
        SignatureToken::Reference(Box::new(SignatureToken::Signer)),
        AbilitySet::EMPTY | Ability::Drop,
    ))`
$DIR/language/testing-infra/test-generation/tests/struct_instructions.rs: `.stack_push(create_struct_value(&state1.module.module).0)`
$DIR/language/testing-infra/test-generation/tests/struct_instructions.rs: `.stack_push(AbstractValue::new_reference(
        SignatureToken::Reference(Box::new(SignatureToken::Signer)),
        AbilitySet::EMPTY | Ability::Drop,
    ))`
$DIR/language/testing-infra/test-generation/tests/struct_instructions.rs: `.struct_defs.len()`
$DIR/language/testing-infra/test-generation/tests/struct_instructions.rs: `.field_handles.push(FieldHandle {
        owner: struct_def_idx,
        field: 0,
    })`
$DIR/language/testing-infra/test-generation/tests/struct_instructions.rs: `.field_handles.len()`
$DIR/language/testing-infra/test-generation/tests/struct_instructions.rs: `.stack_push(AbstractValue {
        token: SignatureToken::MutableReference(Box::new(struct_value.token)),
        abilities: struct_value.abilities,
    })`
$DIR/language/testing-infra/test-generation/tests/struct_instructions.rs: `.struct_defs.len()`
$DIR/language/testing-infra/test-generation/tests/struct_instructions.rs: `.field_handles.push(FieldHandle {
        owner: struct_def_idx,
        field: 0,
    })`
$DIR/language/testing-infra/test-generation/tests/struct_instructions.rs: `.field_handles.len()`
$DIR/language/testing-infra/test-generation/tests/struct_instructions.rs: `.struct_defs.len()`
$DIR/language/testing-infra/test-generation/tests/struct_instructions.rs: `.field_handles.push(FieldHandle {
        owner: struct_def_idx,
        field: 0,
    })`
$DIR/language/testing-infra/test-generation/tests/struct_instructions.rs: `.field_handles.len()`
$DIR/language/testing-infra/test-generation/tests/struct_instructions.rs: `.stack_push(AbstractValue {
        token: SignatureToken::Reference(Box::new(struct_value.token)),
        abilities: struct_value.abilities,
    })`
$DIR/language/testing-infra/test-generation/tests/struct_instructions.rs: `.struct_defs.len()`
$DIR/language/testing-infra/test-generation/tests/struct_instructions.rs: `.field_handles.push(FieldHandle {
        owner: struct_def_idx,
        field: 0,
    })`
$DIR/language/testing-infra/test-generation/tests/struct_instructions.rs: `.field_handles.len()`
$DIR/language/testing-infra/test-generation/tests/struct_instructions.rs: `.stack_push(AbstractValue {
        token: SignatureToken::Reference(Box::new(struct_value.token)),
        abilities: struct_value.abilities,
    })`
$DIR/language/testing-infra/test-generation/tests/struct_instructions.rs: `.struct_defs.len()`
$DIR/language/testing-infra/test-generation/tests/struct_instructions.rs: `.field_handles.push(FieldHandle {
        owner: struct_def_idx,
        field: 0,
    })`
$DIR/language/testing-infra/test-generation/tests/struct_instructions.rs: `.field_handles.len()`
$DIR/language/testing-infra/test-generation/tests/struct_instructions.rs: `.struct_defs.len()`
$DIR/language/testing-infra/test-generation/tests/struct_instructions.rs: `.field_handles.push(FieldHandle {
        owner: struct_def_idx,
        field: 0,
    })`
$DIR/language/testing-infra/test-generation/tests/struct_instructions.rs: `.field_handles.len()`
$DIR/language/testing-infra/test-generation/tests/struct_instructions.rs: `.stack_push(AbstractValue {
        token: SignatureToken::MutableReference(Box::new(struct_value.token)),
        abilities: struct_value.abilities,
    })`
$DIR/language/testing-infra/test-generation/tests/struct_instructions.rs: `.stack_push(AbstractValue::new_primitive(SignatureToken::Address))`
$DIR/language/testing-infra/test-generation/tests/struct_instructions.rs: `.stack_push(AbstractValue::new_primitive(SignatureToken::Address))`
$DIR/language/tools/mirai-dataflow-analysis/tests/datalog_tests.rs: `.fold(0, |acc, file| acc + execute_test(file))`
$DIR/language/tools/move-unit-test/tests/test_deps.rs: `testing_config.source_files = vec![b_path.to_str().unwrap().to_owned()];`
$DIR/language/tools/move-unit-test/tests/test_deps.rs: `testing_config.dep_files = vec![a_path.to_str().unwrap().to_owned()];`
$DIR/language/tools/move-unit-test/tests/test_deps.rs: `.with_named_addresses(move_stdlib::move_stdlib_named_addresses())`
$DIR/language/tools/move-unit-test/tests/test_deps.rs: `.join("tests/sources/A.move")`
$DIR/language/tools/move-unit-test/tests/test_deps.rs: `.join("tests/sources/B.move")`
$DIR/language/tools/move-unit-test/tests/test_deps.rs: `.build_test_plan()`
$DIR/language/tools/move-unit-test/tests/test_deps.rs: `.module_tests.into_iter()`
$DIR/language/tools/move-unit-test/tests/test_deps.rs: `.next()`
$DIR/language/transaction-builder/generator/tests/cli.rs: `write!(&mut test_script, "{}", quotes.next().unwrap())?;`
$DIR/language/transaction-builder/generator/tests/cli.rs: `write!(&mut test_script, "{}", quotes.next().unwrap())?;`
$DIR/language/transaction-builder/generator/tests/cli.rs: `write!(&mut test_script, "{}", quotes.next().unwrap())?;`
$DIR/language/transaction-builder/generator/tests/cli.rs: `.into_iter()`
$DIR/language/transaction-builder/generator/tests/cli.rs: `.path()`
$DIR/language/transaction-builder/generator/tests/cli.rs: `.join("test.sh")`
$DIR/language/transaction-builder/generator/tests/cli.rs: `.current_dir("../../..")`
$DIR/language/transaction-builder/generator/tests/cli.rs: `// root of Diem
            .env("DEST", dir.path())`
$DIR/language/transaction-builder/generator/tests/cli.rs: `.path()`
$DIR/language/transaction-builder/generator/tests/cli.rs: `.arg("-e")`
$DIR/language/transaction-builder/generator/tests/cli.rs: `.arg("-x")`
$DIR/language/transaction-builder/generator/tests/cli.rs: `.arg(dir.path().join("test.sh"))`
$DIR/language/transaction-builder/generator/tests/cli.rs: `.path()`
$DIR/language/transaction-builder/generator/tests/cli.rs: `.join("test.sh")`
$DIR/language/transaction-builder/generator/tests/cli.rs: `.output()`
$DIR/language/transaction-builder/generator/tests/cli.rs: `.path()`
$DIR/language/transaction-builder/generator/tests/cli.rs: `.join("test.sh")`
$DIR/language/transaction-builder/generator/tests/cli.rs: `.current_dir("../../..")`
$DIR/language/transaction-builder/generator/tests/cli.rs: `// root of Diem
        .env("DEST", dir.path())`
$DIR/language/transaction-builder/generator/tests/cli.rs: `.path()`
$DIR/language/transaction-builder/generator/tests/cli.rs: `.arg("-e")`
$DIR/language/transaction-builder/generator/tests/cli.rs: `.arg("-x")`
$DIR/language/transaction-builder/generator/tests/cli.rs: `.arg(dir.path().join("test.sh"))`
$DIR/language/transaction-builder/generator/tests/cli.rs: `.path()`
$DIR/language/transaction-builder/generator/tests/cli.rs: `.join("test.sh")`
$DIR/language/transaction-builder/generator/tests/cli.rs: `.output()`
$DIR/language/transaction-builder/generator/tests/generation.rs: `installer.install_module(&config, &registry).unwrap();`
$DIR/language/transaction-builder/generator/tests/generation.rs: `installer.install_serde_runtime().unwrap();`
$DIR/language/transaction-builder/generator/tests/generation.rs: `installer.install_bcs_runtime().unwrap();`
$DIR/language/transaction-builder/generator/tests/generation.rs: `std::fs::create_dir_all(stdlib_dir_path.clone()).unwrap();`
$DIR/language/transaction-builder/generator/tests/generation.rs: `buildgen::python3::output(&mut source, None, None, &abis).unwrap();`
$DIR/language/transaction-builder/generator/tests/generation.rs: `std::fs::copy(
        "examples/python3/stdlib_demo.py",
        dir.path().join("src/stdlib_demo.py"),
    )
    .unwrap();`
$DIR/language/transaction-builder/generator/tests/generation.rs: `bcs_installer.install_module(&config, &registry).unwrap();`
$DIR/language/transaction-builder/generator/tests/generation.rs: `bcs_installer.install_serde_runtime().unwrap();`
$DIR/language/transaction-builder/generator/tests/generation.rs: `bcs_installer.install_bcs_runtime().unwrap();`
$DIR/language/transaction-builder/generator/tests/generation.rs: `abi_installer
        .install_transaction_builders("diem_framework", &abis)
        .unwrap();`
$DIR/language/transaction-builder/generator/tests/generation.rs: `std::fs::copy(
        "examples/cpp/stdlib_demo.cpp",
        dir.path().join("stdlib_demo.cpp"),
    )
    .unwrap();`
$DIR/language/transaction-builder/generator/tests/generation.rs: `bcs_installer.install_module(&config, &registry).unwrap();`
$DIR/language/transaction-builder/generator/tests/generation.rs: `bcs_installer.install_serde_runtime().unwrap();`
$DIR/language/transaction-builder/generator/tests/generation.rs: `bcs_installer.install_bcs_runtime().unwrap();`
$DIR/language/transaction-builder/generator/tests/generation.rs: `abi_installer
        .install_transaction_builders("com.diem.stdlib", &abis)
        .unwrap();`
$DIR/language/transaction-builder/generator/tests/generation.rs: `std::fs::copy(
        "examples/java/StdlibDemo.java",
        dir.path().join("StdlibDemo.java"),
    )
    .unwrap();`
$DIR/language/transaction-builder/generator/tests/generation.rs: `std::env::set_var("TMPDIR", "/private/tmp/");`
$DIR/language/transaction-builder/generator/tests/generation.rs: `bcs_installer.install_module(&config, &registry).unwrap();`
$DIR/language/transaction-builder/generator/tests/generation.rs: `bcs_installer.install_serde_runtime().unwrap();`
$DIR/language/transaction-builder/generator/tests/generation.rs: `bcs_installer.install_bcs_runtime().unwrap();`
$DIR/language/transaction-builder/generator/tests/generation.rs: `abi_installer
        .install_transaction_builders("Diem.Stdlib", &abis)
        .unwrap();`
$DIR/language/transaction-builder/generator/tests/generation.rs: `std::fs::create_dir(dir.path().join("Demo")).unwrap();`
$DIR/language/transaction-builder/generator/tests/generation.rs: `std::fs::copy(
        "examples/csharp/StdlibDemo.cs",
        dir.path().join("Demo/StdlibDemo.cs"),
    )
    .unwrap();`
$DIR/language/transaction-builder/generator/tests/generation.rs: `bcs_installer.install_module(&config, &registry).unwrap();`
$DIR/language/transaction-builder/generator/tests/generation.rs: `abi_installer
        .install_transaction_builders("diemstdlib", &abis)
        .unwrap();`
$DIR/language/transaction-builder/generator/tests/generation.rs: `std::fs::copy(
        "examples/golang/stdlib_demo.go",
        dir.path().join("stdlib_demo.go"),
    )
    .unwrap();`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.path()`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.join("src")`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.map(|e| e.unwrap().path())`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.path()`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.with_encodings(vec![serdegen::Encoding::Bcs])`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.with_custom_code(buildgen::read_custom_code_from_paths(
            &["diem_types"],
            paths,
        ))`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.install_module(&config, &registry)`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.install_serde_runtime()`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.install_bcs_runtime()`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.join("diem_framework")`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.join("__init__.py")`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.path()`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.join("src/stdlib_demo.py")`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.env("PYTHONPATH", python_path)`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.arg(dir.path().join("src/stdlib_demo.py"))`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.path()`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.join("src/stdlib_demo.py")`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.output()`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.arg("-c")`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.arg("import os; import numpy; print(os.path.dirname(numpy.__path__[0]), end='')")`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.output()`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.parent()`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.current_dir(dir.path())`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.path()`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.arg("--source-directory")`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.arg("src")`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.arg("--noninteractive")`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.arg("--binary")`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.arg(local_bin_path.join("pyre.bin"))`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.join("pyre.bin")`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.arg("--typeshed")`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.arg(local_bin_path.join("../lib/pyre_check/typeshed"))`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.join("../lib/pyre_check/typeshed")`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.arg("--search-path")`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.arg(String::from_utf8_lossy(&site_packages).as_ref())`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.arg("check")`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.status()`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.with_encodings(vec![serdegen::Encoding::Bcs])`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.path()`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.install_module(&config, &registry)`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.install_serde_runtime()`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.install_bcs_runtime()`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.path()`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.install_transaction_builders("diem_framework", &abis)`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.path()`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.join("stdlib_demo.cpp")`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.arg("--std=c++17")`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.arg("-g")`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.arg(dir.path().join("diem_framework.cpp"))`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.path()`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.join("diem_framework.cpp")`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.arg(dir.path().join("stdlib_demo.cpp"))`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.path()`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.join("stdlib_demo.cpp")`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.arg("-o")`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.arg(dir.path().join("stdlib_demo"))`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.path()`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.join("stdlib_demo")`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.status()`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.path()`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.join("stdlib_demo")`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.output()`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.map(|e| e.unwrap().path())`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.path()`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.with_encodings(vec![serdegen::Encoding::Bcs])`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.with_custom_code(buildgen::read_custom_code_from_paths(
            &["com", "diem", "types"],
            paths,
        ))`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.path()`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.install_module(&config, &registry)`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.install_serde_runtime()`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.install_bcs_runtime()`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.path()`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.install_transaction_builders("com.diem.stdlib", &abis)`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.path()`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.join("StdlibDemo.java")`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.chain(std::fs::read_dir(dir.path().join("com/novi/serde")).unwrap())`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.path()`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.join("com/novi/serde")`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.chain(std::fs::read_dir(dir.path().join("com/novi/bcs")).unwrap())`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.path()`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.join("com/novi/bcs")`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.chain(std::fs::read_dir(dir.path().join("com/diem/types")).unwrap())`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.path()`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.join("com/diem/types")`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.chain(std::fs::read_dir(dir.path().join("com/diem/stdlib")).unwrap())`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.path()`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.join("com/diem/stdlib")`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.map(|e| e.unwrap().path())`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.path()`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.path()`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.join("StdlibDemo.java")`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.arg("-sourcepath")`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.arg(dir.path())`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.path()`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.arg("-d")`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.arg(dir.path().join("html"))`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.path()`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.join("html")`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.args(paths())`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.status()`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.arg("-cp")`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.arg(dir.path())`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.path()`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.arg("-d")`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.arg(dir.path())`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.path()`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.args(paths())`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.status()`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.arg("-enableassertions")`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.arg("-cp")`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.arg(dir.path())`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.path()`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.arg("StdlibDemo")`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.output()`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.map(|e| e.unwrap().path())`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.path()`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.with_encodings(vec![serdegen::Encoding::Bcs])`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.with_custom_code(buildgen::read_custom_code_from_paths(
            &["Diem", "Types"],
            paths,
        ))`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.path()`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.install_module(&config, &registry)`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.install_serde_runtime()`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.install_bcs_runtime()`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.path()`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.install_transaction_builders("Diem.Stdlib", &abis)`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.path()`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.join("Demo")`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.path()`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.join("Demo/StdlibDemo.cs")`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.arg("new")`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.arg("classlib")`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.arg("-n")`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.arg("Diem.Stdlib")`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.arg("-o")`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.arg(dir.path().join("Diem/Stdlib"))`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.path()`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.join("Diem/Stdlib")`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.status()`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.arg(dir.path().join("Diem/Stdlib/Class1.cs"))`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.path()`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.join("Diem/Stdlib/Class1.cs")`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.status()`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.arg("add")`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.arg(dir.path().join("Diem/Stdlib/Diem.Stdlib.csproj"))`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.path()`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.join("Diem/Stdlib/Diem.Stdlib.csproj")`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.arg("reference")`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.arg(dir.path().join("Diem/Types/Diem.Types.csproj"))`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.path()`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.join("Diem/Types/Diem.Types.csproj")`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.status()`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.arg("new")`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.arg("sln")`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.arg("-n")`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.arg("Demo")`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.arg("-o")`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.arg(dir.path().join("Demo"))`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.path()`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.join("Demo")`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.status()`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.arg("new")`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.arg("console")`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.arg("-n")`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.arg("Demo")`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.arg("-o")`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.arg(dir.path().join("Demo"))`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.path()`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.join("Demo")`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.status()`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.arg(dir.path().join("Demo/Program.cs"))`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.path()`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.join("Demo/Program.cs")`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.status()`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.arg("add")`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.arg(dir.path().join("Demo/Demo.csproj"))`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.path()`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.join("Demo/Demo.csproj")`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.arg("reference")`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.arg(dir.path().join("Diem/Stdlib/Diem.Stdlib.csproj"))`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.path()`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.join("Diem/Stdlib/Diem.Stdlib.csproj")`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.status()`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.arg("add")`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.arg(dir.path().join("Demo/Demo.csproj"))`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.path()`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.join("Demo/Demo.csproj")`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.arg("reference")`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.arg(dir.path().join("Diem/Types/Diem.Types.csproj"))`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.path()`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.join("Diem/Types/Diem.Types.csproj")`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.status()`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.arg("add")`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.arg(dir.path().join("Demo/Demo.csproj"))`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.path()`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.join("Demo/Demo.csproj")`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.arg("reference")`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.arg(dir.path().join("Serde/Serde.csproj"))`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.path()`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.join("Serde/Serde.csproj")`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.status()`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.arg("add")`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.arg(dir.path().join("Demo/Demo.csproj"))`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.path()`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.join("Demo/Demo.csproj")`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.arg("reference")`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.arg(dir.path().join("Bcs/Bcs.csproj"))`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.path()`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.join("Bcs/Bcs.csproj")`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.status()`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.arg("build")`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.arg(dir.path().join("Demo/Demo.csproj"))`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.path()`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.join("Demo/Demo.csproj")`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.status()`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.arg("run")`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.arg("--project")`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.arg(dir.path().join("Demo/Demo.csproj"))`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.path()`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.join("Demo/Demo.csproj")`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.output()`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.with_encodings(vec![serdegen::Encoding::Bcs])`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.path()`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.install_module(&config, &registry)`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.path()`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.install_transaction_builders("diemstdlib", &abis)`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.path()`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.join("stdlib_demo.go")`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.current_dir(dir.path())`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.path()`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.arg("mod")`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.arg("init")`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.arg("testing")`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.status()`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.current_dir(dir.path())`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.path()`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.arg("mod")`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.arg("edit")`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.arg("-replace")`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.arg(format!("testing={}", dir.path().to_string_lossy(),))`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.status()`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.current_dir(dir.path())`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.path()`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.arg("run")`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.arg(dir.path().join("stdlib_demo.go"))`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.path()`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.join("stdlib_demo.go")`
$DIR/language/transaction-builder/generator/tests/generation.rs: `.output()`
$DIR/mempool/src/tests/core_mempool_test.rs: `transactions = add_txns_to_mempool(
        &mut mempool,
        vec![TestTransaction::new(0, 0, 1), TestTransaction::new(1, 0, 1)],
    );`
$DIR/mempool/src/tests/core_mempool_test.rs: `transactions = add_txns_to_mempool(
        &mut mempool,
        vec![
            TestTransaction::new(1, 0, 7),
            TestTransaction::new(1, 1, 5),
            TestTransaction::new(1, 2, 1),
            TestTransaction::new(1, 3, 6),
        ],
    );`
$DIR/mempool/src/tests/core_mempool_test.rs: `transactions = add_txns_to_mempool(
        &mut mempool,
        vec![
            TestTransaction::new(0, 0, 1).crsn(0),
            TestTransaction::new(1, 0, 1).crsn(0),
        ],
    );`
$DIR/mempool/src/tests/core_mempool_test.rs: `transactions = add_txns_to_mempool(
        &mut mempool,
        vec![
            TestTransaction::new(1, 0, 7).crsn(0),
            TestTransaction::new(1, 4, 6).crsn(0),
            TestTransaction::new(1, 1, 5).crsn(0),
            TestTransaction::new(1, 2, 5).crsn(0),
            TestTransaction::new(1, 3, 1).crsn(0),
        ],
    );`
$DIR/mempool/src/tests/core_mempool_test.rs: `gov_txn1.governance_role = *role1;`
$DIR/mempool/src/tests/core_mempool_test.rs: `gov_txn2.governance_role = *role2;`
$DIR/mempool/src/tests/core_mempool_test.rs: `std::mem::swap(&mut gov_txn1, &mut gov_txn2);`
$DIR/mempool/src/tests/core_mempool_test.rs: `pool.remove_transaction(&txn.sender(), txn.sequence_number(), false);`
$DIR/mempool/src/tests/core_mempool_test.rs: `pool.remove_transaction(&txn.sender(), txn.sequence_number(), false);`
$DIR/mempool/src/tests/core_mempool_test.rs: `config.mempool.system_transaction_timeout_secs = 0;`
$DIR/mempool/src/tests/core_mempool_test.rs: `add_txn(&mut mempool, TestTransaction::new(0, 0, 10)).unwrap();`
$DIR/mempool/src/tests/core_mempool_test.rs: `mempool.system_transaction_timeout = Duration::from_secs(10);`
$DIR/mempool/src/tests/core_mempool_test.rs: `add_txn(&mut mempool, transaction.clone()).unwrap();`
$DIR/mempool/src/tests/core_mempool_test.rs: `mempool.gc();`
$DIR/mempool/src/tests/core_mempool_test.rs: `pool.remove_transaction(&TestTransaction::get_address(1), 5, false);`
$DIR/mempool/src/tests/core_mempool_test.rs: `pool.remove_transaction(&TestTransaction::get_address(1), 5, false);`
$DIR/mempool/src/tests/core_mempool_test.rs: `add_txns_to_mempool(&mut pool, vec![TestTransaction::new(1, 6, 1)]);`
$DIR/mempool/src/tests/core_mempool_test.rs: `add_txns_to_mempool(
        &mut pool,
        vec![TestTransaction::new(1, 0, 1), TestTransaction::new(1, 1, 1)],
    );`
$DIR/mempool/src/tests/core_mempool_test.rs: `pool.remove_transaction(&TestTransaction::get_address(1), 0, true);`
$DIR/mempool/src/tests/core_mempool_test.rs: `pool.remove_transaction(&TestTransaction::get_address(1), 1, true);`
$DIR/mempool/src/tests/core_mempool_test.rs: `add_txns_to_mempool(
        &mut pool,
        vec![
            TestTransaction::new(1, 0, 1),
            TestTransaction::new(1, 1, 1),
            TestTransaction::new(1, 3, 1),
            TestTransaction::new(1, 5, 1),
        ],
    );`
$DIR/mempool/src/tests/core_mempool_test.rs: `add_txns_to_mempool(&mut pool, vec![TestTransaction::new(1, 2, 1)]);`
$DIR/mempool/src/tests/core_mempool_test.rs: `pool.remove_transaction(&TestTransaction::get_address(1), 4, false);`
$DIR/mempool/src/tests/core_mempool_test.rs: `config.mempool.capacity = 1;`
$DIR/mempool/src/tests/core_mempool_test.rs: `config.mempool.system_transaction_timeout_secs = 0;`
$DIR/mempool/src/tests/core_mempool_test.rs: `add_txn(&mut pool, TestTransaction::new(1, 0, 1)).unwrap();`
$DIR/mempool/src/tests/core_mempool_test.rs: `pool.remove_transaction(&TestTransaction::get_address(1), 0, false);`
$DIR/mempool/src/tests/core_mempool_test.rs: `pool.gc();`
$DIR/mempool/src/tests/core_mempool_test.rs: `config.mempool.capacity = 5;`
$DIR/mempool/src/tests/core_mempool_test.rs: `add_txn(&mut pool, TestTransaction::new(1, *seq, 1)).unwrap();`
$DIR/mempool/src/tests/core_mempool_test.rs: `add_txn(&mut pool, TestTransaction::new(0, *seq, 1)).unwrap();`
$DIR/mempool/src/tests/core_mempool_test.rs: `txns.sort_unstable();`
$DIR/mempool/src/tests/core_mempool_test.rs: `config.mempool.capacity = 6;`
$DIR/mempool/src/tests/core_mempool_test.rs: `add_txn(&mut pool, TestTransaction::new(1, *seq, 1)).unwrap();`
$DIR/mempool/src/tests/core_mempool_test.rs: `add_txn(&mut pool, TestTransaction::new(1, seq, 1)).unwrap();`
$DIR/mempool/src/tests/core_mempool_test.rs: `txns.sort_unstable();`
$DIR/mempool/src/tests/core_mempool_test.rs: `add_txn(&mut pool, TestTransaction::new(1, 0, 1)).unwrap();`
$DIR/mempool/src/tests/core_mempool_test.rs: `pool.add_txn(
        txn,
        0,
        1,
        AccountSequenceInfo::Sequential(0),
        TimelineState::NotReady,
        GovernanceRole::NonGovernanceRole,
    );`
$DIR/mempool/src/tests/core_mempool_test.rs: `add_txn(&mut pool, TestTransaction::new(1, 2, 1)).unwrap();`
$DIR/mempool/src/tests/core_mempool_test.rs: `add_txn(&mut pool, TestTransaction::new(1, 3, 1)).unwrap();`
$DIR/mempool/src/tests/core_mempool_test.rs: `pool.gc_by_expiration_time(Duration::from_secs(1));`
$DIR/mempool/src/tests/core_mempool_test.rs: `add_txn(&mut pool, TestTransaction::new(0, seq, 1)).unwrap();`
$DIR/mempool/src/tests/core_mempool_test.rs: `pool.add_txn(
        txn,
        0,
        1,
        AccountSequenceInfo::Sequential(db_sequence_number),
        TimelineState::NotReady,
        GovernanceRole::NonGovernanceRole,
    );`
$DIR/mempool/src/tests/core_mempool_test.rs: `cache.insert(1, 1);`
$DIR/mempool/src/tests/core_mempool_test.rs: `cache.insert(1, 2);`
$DIR/mempool/src/tests/core_mempool_test.rs: `cache.insert(2, 2);`
$DIR/mempool/src/tests/core_mempool_test.rs: `cache.insert(1, 3);`
$DIR/mempool/src/tests/core_mempool_test.rs: `cache.insert(3, 3);`
$DIR/mempool/src/tests/core_mempool_test.rs: `cache.gc(SystemTime::now()
        .checked_add(Duration::from_secs(10))
        .unwrap());`
$DIR/mempool/src/tests/core_mempool_test.rs: `.priority()`
$DIR/mempool/src/tests/core_mempool_test.rs: `.priority()`
$DIR/mempool/src/tests/core_mempool_test.rs: `.crsn(0)`
$DIR/mempool/src/tests/core_mempool_test.rs: `.make_signed_transaction_with_expiration_time(u64::max_value() - 1000)`
$DIR/mempool/src/tests/core_mempool_test.rs: `.crsn(0)`
$DIR/mempool/src/tests/core_mempool_test.rs: `.make_signed_transaction_with_expiration_time(u64::max_value() - 1000)`
$DIR/mempool/src/tests/core_mempool_test.rs: `.get_block(&mut mempool, 1)`
$DIR/mempool/src/tests/core_mempool_test.rs: `.crsn(0)`
$DIR/mempool/src/tests/core_mempool_test.rs: `.get_block(&mut mempool, 1)`
$DIR/mempool/src/tests/core_mempool_test.rs: `.remove_transaction(&txn.sender(), txn.sequence_number(), false)`
$DIR/mempool/src/tests/core_mempool_test.rs: `.sender()`
$DIR/mempool/src/tests/core_mempool_test.rs: `.sequence_number()`
$DIR/mempool/src/tests/core_mempool_test.rs: `.remove_transaction(&txn.sender(), txn.sequence_number(), false)`
$DIR/mempool/src/tests/core_mempool_test.rs: `.sender()`
$DIR/mempool/src/tests/core_mempool_test.rs: `.sequence_number()`
$DIR/mempool/src/tests/core_mempool_test.rs: `.gc()`
$DIR/mempool/src/tests/core_mempool_test.rs: `.get_block(1, HashSet::new())`
$DIR/mempool/src/tests/core_mempool_test.rs: `.remove_transaction(&TestTransaction::get_address(1), 5, false)`
$DIR/mempool/src/tests/core_mempool_test.rs: `.remove_transaction(&TestTransaction::get_address(1), 5, false)`
$DIR/mempool/src/tests/core_mempool_test.rs: `.remove_transaction(&TestTransaction::get_address(1), 0, true)`
$DIR/mempool/src/tests/core_mempool_test.rs: `.remove_transaction(&TestTransaction::get_address(1), 1, true)`
$DIR/mempool/src/tests/core_mempool_test.rs: `.map(SignedTransaction::sequence_number)`
$DIR/mempool/src/tests/core_mempool_test.rs: `.read_timeline(0, 10)`
$DIR/mempool/src/tests/core_mempool_test.rs: `.read_timeline(0, 10)`
$DIR/mempool/src/tests/core_mempool_test.rs: `.read_timeline(2, 10)`
$DIR/mempool/src/tests/core_mempool_test.rs: `.remove_transaction(&TestTransaction::get_address(1), 4, false)`
$DIR/mempool/src/tests/core_mempool_test.rs: `.read_timeline(0, 10)`
$DIR/mempool/src/tests/core_mempool_test.rs: `.remove_transaction(&TestTransaction::get_address(1), 0, false)`
$DIR/mempool/src/tests/core_mempool_test.rs: `.gc()`
$DIR/mempool/src/tests/core_mempool_test.rs: `.get_block(5, HashSet::new())`
$DIR/mempool/src/tests/core_mempool_test.rs: `.map(SignedTransaction::sequence_number)`
$DIR/mempool/src/tests/core_mempool_test.rs: `.collect()`
$DIR/mempool/src/tests/core_mempool_test.rs: `.sort_unstable()`
$DIR/mempool/src/tests/core_mempool_test.rs: `.get_block(5, HashSet::new())`
$DIR/mempool/src/tests/core_mempool_test.rs: `.map(SignedTransaction::sequence_number)`
$DIR/mempool/src/tests/core_mempool_test.rs: `.collect()`
$DIR/mempool/src/tests/core_mempool_test.rs: `.sort_unstable()`
$DIR/mempool/src/tests/core_mempool_test.rs: `.make_signed_transaction_with_expiration_time(0)`
$DIR/mempool/src/tests/core_mempool_test.rs: `.add_txn(
        txn,
        0,
        1,
        AccountSequenceInfo::Sequential(0),
        TimelineState::NotReady,
        GovernanceRole::NonGovernanceRole,
    )`
$DIR/mempool/src/tests/core_mempool_test.rs: `.read_timeline(0, 10)`
$DIR/mempool/src/tests/core_mempool_test.rs: `.gc_by_expiration_time(Duration::from_secs(1))`
$DIR/mempool/src/tests/core_mempool_test.rs: `.get_block(10, HashSet::new())`
$DIR/mempool/src/tests/core_mempool_test.rs: `.read_timeline(0, 10)`
$DIR/mempool/src/tests/core_mempool_test.rs: `.make_signed_transaction()`
$DIR/mempool/src/tests/core_mempool_test.rs: `.add_txn(
        txn,
        0,
        1,
        AccountSequenceInfo::Sequential(db_sequence_number),
        TimelineState::NotReady,
        GovernanceRole::NonGovernanceRole,
    )`
$DIR/mempool/src/tests/core_mempool_test.rs: `.get_block(10, HashSet::new())`
$DIR/mempool/src/tests/core_mempool_test.rs: `.insert(1, 1)`
$DIR/mempool/src/tests/core_mempool_test.rs: `.insert(1, 2)`
$DIR/mempool/src/tests/core_mempool_test.rs: `.insert(2, 2)`
$DIR/mempool/src/tests/core_mempool_test.rs: `.insert(1, 3)`
$DIR/mempool/src/tests/core_mempool_test.rs: `.insert(3, 3)`
$DIR/mempool/src/tests/core_mempool_test.rs: `.gc(SystemTime::now()
        .checked_add(Duration::from_secs(10))
        .unwrap())`
$DIR/mempool/src/tests/core_mempool_test.rs: `.checked_add(Duration::from_secs(10))`
$DIR/mempool/src/tests/multi_node_test.rs: `harness.add_txns(v_a, test_transactions(0, 3));`
$DIR/mempool/src/tests/multi_node_test.rs: `harness.connect(v_b, v_a);`
$DIR/mempool/src/tests/multi_node_test.rs: `harness.broadcast_txns_and_validate(v_a, v_b, seq_num);`
$DIR/mempool/src/tests/multi_node_test.rs: `harness.add_txns(v_a, test_transactions(0, 3));`
$DIR/mempool/src/tests/multi_node_test.rs: `harness.connect(v_b, v_a);`
$DIR/mempool/src/tests/multi_node_test.rs: `harness.add_txns(v_a, vec![test_transaction(0)]);`
$DIR/mempool/src/tests/multi_node_test.rs: `harness.connect(v_b, v_a);`
$DIR/mempool/src/tests/multi_node_test.rs: `harness.broadcast_txns_and_validate(v_a, v_b, 0);`
$DIR/mempool/src/tests/multi_node_test.rs: `harness.connect(v_c, v_a);`
$DIR/mempool/src/tests/multi_node_test.rs: `harness.broadcast_txns_and_validate(v_a, v_c, 0);`
$DIR/mempool/src/tests/multi_node_test.rs: `harness.disconnect(v_a, true, v_b, true);`
$DIR/mempool/src/tests/multi_node_test.rs: `harness.add_txns(v_a, vec![test_transaction(seq_num)]);`
$DIR/mempool/src/tests/multi_node_test.rs: `harness.broadcast_txns_and_validate(v_a, v_c, seq_num);`
$DIR/mempool/src/tests/multi_node_test.rs: `harness.connect(v_b, v_a);`
$DIR/mempool/src/tests/multi_node_test.rs: `harness.broadcast_txns_and_validate(v_a, v_b, seq_num);`
$DIR/mempool/src/tests/multi_node_test.rs: `harness.add_txns(v_a, vec![test_transaction(0), test_transaction(2)]);`
$DIR/mempool/src/tests/multi_node_test.rs: `harness.connect(v_b, v_a);`
$DIR/mempool/src/tests/multi_node_test.rs: `harness.broadcast_txns_and_validate(v_a, v_b, 0);`
$DIR/mempool/src/tests/multi_node_test.rs: `harness.add_txns(v_a, vec![test_transaction(1)]);`
$DIR/mempool/src/tests/multi_node_test.rs: `harness.broadcast_txns_and_validate(v_a, v_b, 1);`
$DIR/mempool/src/tests/multi_node_test.rs: `harness.add_txns(v_a, vec![test_transaction(0)]);`
$DIR/mempool/src/tests/multi_node_test.rs: `harness.connect(v_b, v_a);`
$DIR/mempool/src/tests/multi_node_test.rs: `harness.broadcast_txns_successfully(v_a, true, 1);`
$DIR/mempool/src/tests/multi_node_test.rs: `harness.add_txns(v_b, vec![TestTransaction::new(2, 0, 1)]);`
$DIR/mempool/src/tests/multi_node_test.rs: `harness.add_txns(v_a, vec![test_transaction(0), test_transaction(2)]);`
$DIR/mempool/src/tests/multi_node_test.rs: `harness.add_txns(v_b, vec![test_transaction(1)]);`
$DIR/mempool/src/tests/multi_node_test.rs: `harness.connect(v_b, v_a);`
$DIR/mempool/src/tests/multi_node_test.rs: `harness.broadcast_txns_and_validate(v_a, v_b, 0);`
$DIR/mempool/src/tests/multi_node_test.rs: `harness.broadcast_txns_and_validate(v_b, v_a, 1);`
$DIR/mempool/src/tests/multi_node_test.rs: `harness.add_txns(v_a, vec![test_transaction(0)]);`
$DIR/mempool/src/tests/multi_node_test.rs: `harness.connect(v_b, v_a);`
$DIR/mempool/src/tests/multi_node_test.rs: `harness.add_txns(v_a, vec![TestTransaction::new(1, 0, 5)]);`
$DIR/mempool/src/tests/multi_node_test.rs: `harness.connect_with_networks(pfn, true, vfn_a, false);`
$DIR/mempool/src/tests/multi_node_test.rs: `harness.connect_with_networks(vfn_a, false, vfn_b, false);`
$DIR/mempool/src/tests/multi_node_test.rs: `harness.connect(vfn_a, v_a);`
$DIR/mempool/src/tests/multi_node_test.rs: `harness.connect(vfn_b, v_b);`
$DIR/mempool/src/tests/multi_node_test.rs: `harness.connect(v_b, v_a);`
$DIR/mempool/src/tests/multi_node_test.rs: `harness.add_txns(vfn_a, vec![test_transaction(0)]);`
$DIR/mempool/src/tests/multi_node_test.rs: `harness.broadcast_txns_and_validate(vfn_a, v_a, 0);`
$DIR/mempool/src/tests/multi_node_test.rs: `harness.broadcast_txns_and_validate_with_networks(vfn_a, false, vfn_b, false, 0);`
$DIR/mempool/src/tests/multi_node_test.rs: `harness.assert_no_message_sent(vfn_a, true);`
$DIR/mempool/src/tests/multi_node_test.rs: `validator_mempool_config.broadcast_batch_size = Some(3);`
$DIR/mempool/src/tests/multi_node_test.rs: `validator_mempool_config.mempool_size = Some(5);`
$DIR/mempool/src/tests/multi_node_test.rs: `vfn_mempool_config.broadcast_batch_size = Some(3);`
$DIR/mempool/src/tests/multi_node_test.rs: `vfn_mempool_config.backoff_interval_ms = Some(50);`
$DIR/mempool/src/tests/multi_node_test.rs: `harness.add_txns(vfn, all_txns.clone());`
$DIR/mempool/src/tests/multi_node_test.rs: `harness.connect(vfn, val);`
$DIR/mempool/src/tests/multi_node_test.rs: `harness.commit_txns(val, all_txns[..1].to_vec());`
$DIR/mempool/src/tests/multi_node_test.rs: `harness.broadcast_txns_successfully(vfn, true, 1);`
$DIR/mempool/src/tests/multi_node_test.rs: `harness.add_txns(v_a, pool_txns);`
$DIR/mempool/src/tests/multi_node_test.rs: `harness.connect(v_b, v_a);`
$DIR/mempool/src/tests/multi_node_test.rs: `harness.commit_txns(v_a, vec![test_transaction(1)]);`
$DIR/mempool/src/tests/multi_node_test.rs: `validator_mempool_config.max_broadcasts_per_peer = Some(3);`
$DIR/mempool/src/tests/multi_node_test.rs: `validator_mempool_config.ack_timeout_ms = Some(u64::MAX);`
$DIR/mempool/src/tests/multi_node_test.rs: `validator_mempool_config.backoff_interval_ms = Some(50);`
$DIR/mempool/src/tests/multi_node_test.rs: `harness.add_txns(v_a, pool_txns);`
$DIR/mempool/src/tests/multi_node_test.rs: `harness.connect(v_b, v_a);`
$DIR/mempool/src/tests/multi_node_test.rs: `harness.assert_no_message_sent(v_a, true);`
$DIR/mempool/src/tests/multi_node_test.rs: `harness.deliver_response(v_b, true);`
$DIR/mempool/src/tests/multi_node_test.rs: `harness.assert_no_message_sent(v_a, true);`
$DIR/mempool/src/tests/multi_node_test.rs: `.get(0)`
$DIR/mempool/src/tests/multi_node_test.rs: `.get(1)`
$DIR/mempool/src/tests/multi_node_test.rs: `.add_txns(v_a, test_transactions(0, 3))`
$DIR/mempool/src/tests/multi_node_test.rs: `.connect(v_b, v_a)`
$DIR/mempool/src/tests/multi_node_test.rs: `.broadcast_txns_and_validate(v_a, v_b, seq_num)`
$DIR/mempool/src/tests/multi_node_test.rs: `.get(0)`
$DIR/mempool/src/tests/multi_node_test.rs: `.get(1)`
$DIR/mempool/src/tests/multi_node_test.rs: `.add_txns(v_a, test_transactions(0, 3))`
$DIR/mempool/src/tests/multi_node_test.rs: `.connect(v_b, v_a)`
$DIR/mempool/src/tests/multi_node_test.rs: `.take(3)`
$DIR/mempool/src/tests/multi_node_test.rs: `.broadcast_txns_successfully(v_a, true, 1)`
$DIR/mempool/src/tests/multi_node_test.rs: `.get(0)`
$DIR/mempool/src/tests/multi_node_test.rs: `.get(1)`
$DIR/mempool/src/tests/multi_node_test.rs: `.get(2)`
$DIR/mempool/src/tests/multi_node_test.rs: `.add_txns(v_a, vec![test_transaction(0)])`
$DIR/mempool/src/tests/multi_node_test.rs: `.connect(v_b, v_a)`
$DIR/mempool/src/tests/multi_node_test.rs: `.broadcast_txns_and_validate(v_a, v_b, 0)`
$DIR/mempool/src/tests/multi_node_test.rs: `.connect(v_c, v_a)`
$DIR/mempool/src/tests/multi_node_test.rs: `.broadcast_txns_and_validate(v_a, v_c, 0)`
$DIR/mempool/src/tests/multi_node_test.rs: `.disconnect(v_a, true, v_b, true)`
$DIR/mempool/src/tests/multi_node_test.rs: `.add_txns(v_a, vec![test_transaction(seq_num)])`
$DIR/mempool/src/tests/multi_node_test.rs: `.broadcast_txns_and_validate(v_a, v_c, seq_num)`
$DIR/mempool/src/tests/multi_node_test.rs: `.connect(v_b, v_a)`
$DIR/mempool/src/tests/multi_node_test.rs: `.broadcast_txns_and_validate(v_a, v_b, seq_num)`
$DIR/mempool/src/tests/multi_node_test.rs: `.get(0)`
$DIR/mempool/src/tests/multi_node_test.rs: `.get(1)`
$DIR/mempool/src/tests/multi_node_test.rs: `.add_txns(v_a, vec![test_transaction(0), test_transaction(2)])`
$DIR/mempool/src/tests/multi_node_test.rs: `.connect(v_b, v_a)`
$DIR/mempool/src/tests/multi_node_test.rs: `.broadcast_txns_and_validate(v_a, v_b, 0)`
$DIR/mempool/src/tests/multi_node_test.rs: `.add_txns(v_a, vec![test_transaction(1)])`
$DIR/mempool/src/tests/multi_node_test.rs: `.broadcast_txns_and_validate(v_a, v_b, 1)`
$DIR/mempool/src/tests/multi_node_test.rs: `.get(0)`
$DIR/mempool/src/tests/multi_node_test.rs: `.get(1)`
$DIR/mempool/src/tests/multi_node_test.rs: `.add_txns(v_a, vec![test_transaction(0)])`
$DIR/mempool/src/tests/multi_node_test.rs: `.connect(v_b, v_a)`
$DIR/mempool/src/tests/multi_node_test.rs: `.broadcast_txns_successfully(v_a, true, 1)`
$DIR/mempool/src/tests/multi_node_test.rs: `.add_txns(v_b, vec![TestTransaction::new(2, 0, 1)])`
$DIR/mempool/src/tests/multi_node_test.rs: `.broadcast_txns_successfully(v_b, true, 1)`
$DIR/mempool/src/tests/multi_node_test.rs: `.get(0)`
$DIR/mempool/src/tests/multi_node_test.rs: `.get(1)`
$DIR/mempool/src/tests/multi_node_test.rs: `.add_txns(v_a, vec![test_transaction(0), test_transaction(2)])`
$DIR/mempool/src/tests/multi_node_test.rs: `.add_txns(v_b, vec![test_transaction(1)])`
$DIR/mempool/src/tests/multi_node_test.rs: `.connect(v_b, v_a)`
$DIR/mempool/src/tests/multi_node_test.rs: `.broadcast_txns_and_validate(v_a, v_b, 0)`
$DIR/mempool/src/tests/multi_node_test.rs: `.broadcast_txns_and_validate(v_b, v_a, 1)`
$DIR/mempool/src/tests/multi_node_test.rs: `.get(0)`
$DIR/mempool/src/tests/multi_node_test.rs: `.get(1)`
$DIR/mempool/src/tests/multi_node_test.rs: `.add_txns(v_a, vec![test_transaction(0)])`
$DIR/mempool/src/tests/multi_node_test.rs: `.connect(v_b, v_a)`
$DIR/mempool/src/tests/multi_node_test.rs: `.broadcast_txns_successfully(v_a, true, 1)`
$DIR/mempool/src/tests/multi_node_test.rs: `.add_txns(v_a, vec![TestTransaction::new(1, 0, 5)])`
$DIR/mempool/src/tests/multi_node_test.rs: `.broadcast_txns_successfully(v_a, true, 1)`
$DIR/mempool/src/tests/multi_node_test.rs: `.get(&PeerRole::Validator)`
$DIR/mempool/src/tests/multi_node_test.rs: `.get(0)`
$DIR/mempool/src/tests/multi_node_test.rs: `.get(1)`
$DIR/mempool/src/tests/multi_node_test.rs: `.get(&PeerRole::ValidatorFullNode)`
$DIR/mempool/src/tests/multi_node_test.rs: `.get(0)`
$DIR/mempool/src/tests/multi_node_test.rs: `.get(1)`
$DIR/mempool/src/tests/multi_node_test.rs: `.get(&PeerRole::Unknown)`
$DIR/mempool/src/tests/multi_node_test.rs: `.get(0)`
$DIR/mempool/src/tests/multi_node_test.rs: `.connect_with_networks(pfn, true, vfn_a, false)`
$DIR/mempool/src/tests/multi_node_test.rs: `.connect_with_networks(vfn_a, false, vfn_b, false)`
$DIR/mempool/src/tests/multi_node_test.rs: `.connect(vfn_a, v_a)`
$DIR/mempool/src/tests/multi_node_test.rs: `.connect(vfn_b, v_b)`
$DIR/mempool/src/tests/multi_node_test.rs: `.connect(v_b, v_a)`
$DIR/mempool/src/tests/multi_node_test.rs: `.add_txns(vfn_a, vec![test_transaction(0)])`
$DIR/mempool/src/tests/multi_node_test.rs: `.broadcast_txns_and_validate(vfn_a, v_a, 0)`
$DIR/mempool/src/tests/multi_node_test.rs: `.broadcast_txns_and_validate_with_networks(vfn_a, false, vfn_b, false, 0)`
$DIR/mempool/src/tests/multi_node_test.rs: `.assert_no_message_sent(vfn_a, true)`
$DIR/mempool/src/tests/multi_node_test.rs: `.get(&PeerRole::Validator)`
$DIR/mempool/src/tests/multi_node_test.rs: `.get(0)`
$DIR/mempool/src/tests/multi_node_test.rs: `.get(&PeerRole::ValidatorFullNode)`
$DIR/mempool/src/tests/multi_node_test.rs: `.get(0)`
$DIR/mempool/src/tests/multi_node_test.rs: `.add_txns(vfn, all_txns.clone())`
$DIR/mempool/src/tests/multi_node_test.rs: `.connect(vfn, val)`
$DIR/mempool/src/tests/multi_node_test.rs: `.broadcast_txns_successfully(vfn, true, 1)`
$DIR/mempool/src/tests/multi_node_test.rs: `.map(|txn| txn.sequence_number())`
$DIR/mempool/src/tests/multi_node_test.rs: `.sequence_number()`
$DIR/mempool/src/tests/multi_node_test.rs: `.collect::<Vec<_>>()`
$DIR/mempool/src/tests/multi_node_test.rs: `.broadcast_txns(vfn, true, 1, false, true, false)`
$DIR/mempool/src/tests/multi_node_test.rs: `.map(|txn| txn.sequence_number())`
$DIR/mempool/src/tests/multi_node_test.rs: `.sequence_number()`
$DIR/mempool/src/tests/multi_node_test.rs: `.collect::<Vec<_>>()`
$DIR/mempool/src/tests/multi_node_test.rs: `.commit_txns(val, all_txns[..1].to_vec())`
$DIR/mempool/src/tests/multi_node_test.rs: `.broadcast_txns_successfully(vfn, true, 1)`
$DIR/mempool/src/tests/multi_node_test.rs: `.broadcast_txns(vfn, true, 1, false, true, false)`
$DIR/mempool/src/tests/multi_node_test.rs: `.map(|txn| txn.sequence_number())`
$DIR/mempool/src/tests/multi_node_test.rs: `.sequence_number()`
$DIR/mempool/src/tests/multi_node_test.rs: `.collect::<Vec<_>>()`
$DIR/mempool/src/tests/multi_node_test.rs: `.get(0)`
$DIR/mempool/src/tests/multi_node_test.rs: `.get(1)`
$DIR/mempool/src/tests/multi_node_test.rs: `.add_txns(v_a, pool_txns)`
$DIR/mempool/src/tests/multi_node_test.rs: `.connect(v_b, v_a)`
$DIR/mempool/src/tests/multi_node_test.rs: `.broadcast_txns(v_a, true, 1, true, false, false)`
$DIR/mempool/src/tests/multi_node_test.rs: `.broadcast_txns(v_a, true, 1, true, true, false)`
$DIR/mempool/src/tests/multi_node_test.rs: `.broadcast_txns(v_a, true, 1, true, false, false)`
$DIR/mempool/src/tests/multi_node_test.rs: `.commit_txns(v_a, vec![test_transaction(1)])`
$DIR/mempool/src/tests/multi_node_test.rs: `.broadcast_txns(v_a, true, 1, true, false, false)`
$DIR/mempool/src/tests/multi_node_test.rs: `.get(0)`
$DIR/mempool/src/tests/multi_node_test.rs: `.get(1)`
$DIR/mempool/src/tests/multi_node_test.rs: `.add_txns(v_a, pool_txns)`
$DIR/mempool/src/tests/multi_node_test.rs: `.connect(v_b, v_a)`
$DIR/mempool/src/tests/multi_node_test.rs: `.broadcast_txns(v_a, true, 1, true, true, true)`
$DIR/mempool/src/tests/multi_node_test.rs: `.broadcast_txns(v_a, true, 1, true, false, false)`
$DIR/mempool/src/tests/multi_node_test.rs: `.assert_no_message_sent(v_a, true)`
$DIR/mempool/src/tests/multi_node_test.rs: `.deliver_response(v_b, true)`
$DIR/mempool/src/tests/multi_node_test.rs: `.broadcast_txns(v_a, true, 1, false, true, true)`
$DIR/mempool/src/tests/multi_node_test.rs: `.assert_no_message_sent(v_a, true)`
$DIR/mempool/src/tests/shared_mempool_test.rs: `block_on(async {
        assert!(consensus_sender.send(req).await.is_ok());
        assert!(callback_rcv.await.is_ok());
    });`
$DIR/mempool/src/tests/shared_mempool_test.rs: `block_on(async {
        assert!(mempool_notifier
            .notify_new_commit(committed_txns, 1, 1000)
            .await
            .is_ok());
    });`
$DIR/mempool/src/tests/shared_mempool_test.rs: `.make_signed_transaction_with_expiration_time(0)`
$DIR/mempool/src/tests/shared_mempool_test.rs: `.make_signed_transaction()`
$DIR/mempool/src/tests/shared_mempool_test.rs: `.mempool.lock()`
$DIR/mempool/src/tests/shared_mempool_test.rs: `.mempool.lock()`
$DIR/mempool/src/tests/shared_mempool_test.rs: `.read_timeline(0, 10)`
$DIR/mempool/src/tests/shared_mempool_test.rs: `.enable_all()`
$DIR/mempool/src/tests/shared_mempool_test.rs: `.build()`
$DIR/mempool/src/tests/shared_mempool_test.rs: `.enter()`
$DIR/mempool/src/tests/shared_mempool_test.rs: `.make_signed_transaction_with_expiration_time(0)`
$DIR/mempool/src/tests/shared_mempool_test.rs: `.make_signed_transaction()`
$DIR/mempool/src/tests/shared_mempool_test.rs: `.mempool.lock()`
$DIR/mempool/src/tests/shared_mempool_test.rs: `.mempool.lock()`
$DIR/mempool/src/tests/shared_mempool_test.rs: `.read_timeline(0, 10)`
$DIR/network/builder/src/test.rs: `::diem_logger::Logger::init_for_testing();`
$DIR/network/builder/src/test.rs: `dialer_sender
            .send_to(listener_peer_id, msg_clone.clone())
            .unwrap();`
$DIR/network/builder/src/test.rs: `listener_sender
            .send_to(dialer_peer_id, msg.clone())
            .unwrap();`
$DIR/network/builder/src/test.rs: `::diem_logger::Logger::init_for_testing();`
$DIR/network/builder/src/test.rs: `rs.send(Ok(bcs::to_bytes(&msg).unwrap().into())).unwrap();`
$DIR/network/builder/src/test.rs: `rs.send(Ok(bcs::to_bytes(&msg).unwrap().into())).unwrap();`
$DIR/network/builder/src/test.rs: `.send_to(listener_peer_id, msg_clone.clone())`
$DIR/network/builder/src/test.rs: `.next()`
$DIR/network/builder/src/test.rs: `.send_to(dialer_peer_id, msg.clone())`
$DIR/network/builder/src/test.rs: `.next()`
$DIR/network/builder/src/test.rs: `.send_rpc(listener_peer_id, msg_clone.clone(), Duration::from_secs(10))`
$DIR/network/builder/src/test.rs: `.next()`
$DIR/network/builder/src/test.rs: `.send(Ok(bcs::to_bytes(&msg).unwrap().into()))`
$DIR/network/builder/src/test.rs: `.into()`
$DIR/network/builder/src/test.rs: `.runtime.block_on(join(f_send, f_respond))`
$DIR/network/builder/src/test.rs: `.send_rpc(dialer_peer_id, msg_clone.clone(), Duration::from_secs(10))`
$DIR/network/builder/src/test.rs: `.next()`
$DIR/network/builder/src/test.rs: `.send(Ok(bcs::to_bytes(&msg).unwrap().into()))`
$DIR/network/builder/src/test.rs: `.into()`
$DIR/network/builder/src/test.rs: `.runtime.block_on(join(f_send, f_respond))`
$DIR/network/discovery/src/file.rs: `path.create_as_file().unwrap();`
$DIR/network/discovery/src/file.rs: `write_peer_set(&peers, path.as_ref().as_ref());`
$DIR/network/discovery/src/file.rs: `keys.insert(key);`
$DIR/network/discovery/src/file.rs: `peers.insert(
            PeerId::random(),
            Peer::new(addrs, keys, PeerRole::Downstream),
        );`
$DIR/network/discovery/src/file.rs: `std::fs::write(path.as_ref(), file_contents).unwrap();`
$DIR/network/discovery/src/file.rs: `while conn_mgr_reqs_rx.next().await.is_none() {}`
$DIR/network/discovery/src/file.rs: `path.create_as_file().unwrap();`
$DIR/network/discovery/src/file.rs: `sleep(Duration::from_secs(1)).await;`
$DIR/network/discovery/src/file.rs: `write_peer_set(&peers, path.as_ref().as_ref());`
$DIR/network/discovery/src/file.rs: `tokio::task::spawn(writer_task);`
$DIR/network/discovery/src/file.rs: `.create_as_file()`
$DIR/network/discovery/src/file.rs: `.next()`
$DIR/network/discovery/src/file.rs: `.find_noise_proto()`
$DIR/network/discovery/src/file.rs: `.insert(key)`
$DIR/network/discovery/src/file.rs: `.insert(
            PeerId::random(),
            Peer::new(addrs, keys, PeerRole::Downstream),
        )`
$DIR/network/discovery/src/file.rs: `.next()`
$DIR/network/discovery/src/file.rs: `.is_none()`
$DIR/network/discovery/src/file.rs: `.next()`
$DIR/network/discovery/src/file.rs: `.create_as_file()`
$DIR/network/discovery/src/file.rs: `.next()`
$DIR/network/discovery/src/validator_set.rs: `diem_logger::DiemLogger::init_for_testing();`
$DIR/network/discovery/src/validator_set.rs: `send_pubkey_update(
            peer_id,
            consensus_pubkey,
            different_pubkey,
            &mut reconfig_tx,
        );`
$DIR/network/discovery/src/validator_set.rs: `check_network_key_mismatch_metric(0, &network_context);`
$DIR/network/discovery/src/validator_set.rs: `block_on(runtime.spawn(listener_future)).unwrap();`
$DIR/network/discovery/src/validator_set.rs: `.public_key()`
$DIR/network/discovery/src/validator_set.rs: `.run()`
$DIR/network/discovery/src/validator_set.rs: `.spawn(listener_future)`
$DIR/network/memsocket/tests/memory_listener.rs: `block_on(dialer.write_all(b"foo"))?;`
$DIR/network/memsocket/tests/memory_listener.rs: `block_on(dialer.flush())?;`
$DIR/network/memsocket/tests/memory_listener.rs: `block_on(listener_socket.read_exact(&mut buf))?;`
$DIR/network/memsocket/tests/memory_listener.rs: `block_on(dialer.write_all(b"foo"))?;`
$DIR/network/memsocket/tests/memory_listener.rs: `block_on(dialer.flush())?;`
$DIR/network/memsocket/tests/memory_listener.rs: `block_on(listener_socket.read_exact(&mut buf))?;`
$DIR/network/memsocket/tests/memory_listener.rs: `block_on(listener_socket.write_all(b"bar"))?;`
$DIR/network/memsocket/tests/memory_listener.rs: `block_on(listener_socket.flush())?;`
$DIR/network/memsocket/tests/memory_listener.rs: `block_on(dialer.read_exact(&mut buf))?;`
$DIR/network/memsocket/tests/memory_listener.rs: `connect_on_port(9)?;`
$DIR/network/memsocket/tests/memory_listener.rs: `connect_on_port(9)?;`
$DIR/network/memsocket/tests/memory_listener.rs: `.incoming()`
$DIR/network/memsocket/tests/memory_listener.rs: `.next()`
$DIR/network/memsocket/tests/memory_listener.rs: `.write_all(b"foo")`
$DIR/network/memsocket/tests/memory_listener.rs: `.flush()`
$DIR/network/memsocket/tests/memory_listener.rs: `.read_exact(&mut buf)`
$DIR/network/memsocket/tests/memory_listener.rs: `.local_addr()`
$DIR/network/memsocket/tests/memory_listener.rs: `.incoming()`
$DIR/network/memsocket/tests/memory_listener.rs: `.next()`
$DIR/network/memsocket/tests/memory_listener.rs: `.write_all(b"foo")`
$DIR/network/memsocket/tests/memory_listener.rs: `.flush()`
$DIR/network/memsocket/tests/memory_listener.rs: `.read_exact(&mut buf)`
$DIR/network/memsocket/tests/memory_listener.rs: `.write_all(b"bar")`
$DIR/network/memsocket/tests/memory_listener.rs: `.flush()`
$DIR/network/memsocket/tests/memory_listener.rs: `.read_exact(&mut buf)`
$DIR/network/memsocket/tests/memory_socket.rs: `block_on(a.write_all(b"hello world"))?;`
$DIR/network/memsocket/tests/memory_socket.rs: `block_on(a.flush())?;`
$DIR/network/memsocket/tests/memory_socket.rs: `drop(a);`
$DIR/network/memsocket/tests/memory_socket.rs: `block_on(b.read_to_end(&mut v))?;`
$DIR/network/memsocket/tests/memory_socket.rs: `block_on(a.write_all(b"foobar"))?;`
$DIR/network/memsocket/tests/memory_socket.rs: `block_on(a.flush())?;`
$DIR/network/memsocket/tests/memory_socket.rs: `block_on(b.read_exact(&mut buf))?;`
$DIR/network/memsocket/tests/memory_socket.rs: `block_on(b.read_exact(&mut buf))?;`
$DIR/network/memsocket/tests/memory_socket.rs: `block_on(a.write_all(b"foobar"))?;`
$DIR/network/memsocket/tests/memory_socket.rs: `block_on(a.flush())?;`
$DIR/network/memsocket/tests/memory_socket.rs: `block_on(b.write_all(b"stormlight"))?;`
$DIR/network/memsocket/tests/memory_socket.rs: `block_on(b.flush())?;`
$DIR/network/memsocket/tests/memory_socket.rs: `block_on(a.read_exact(&mut buf_a))?;`
$DIR/network/memsocket/tests/memory_socket.rs: `block_on(b.read_exact(&mut buf_b))?;`
$DIR/network/memsocket/tests/memory_socket.rs: `block_on(a.read_exact(&mut buf_a))?;`
$DIR/network/memsocket/tests/memory_socket.rs: `block_on(b.read_exact(&mut buf_b))?;`
$DIR/network/memsocket/tests/memory_socket.rs: `block_on(a.write_all(b"words"))?;`
$DIR/network/memsocket/tests/memory_socket.rs: `block_on(a.write_all(b" "))?;`
$DIR/network/memsocket/tests/memory_socket.rs: `block_on(a.write_all(b"of"))?;`
$DIR/network/memsocket/tests/memory_socket.rs: `block_on(a.write_all(b" "))?;`
$DIR/network/memsocket/tests/memory_socket.rs: `block_on(a.write_all(b"radiance"))?;`
$DIR/network/memsocket/tests/memory_socket.rs: `block_on(a.flush())?;`
$DIR/network/memsocket/tests/memory_socket.rs: `drop(a);`
$DIR/network/memsocket/tests/memory_socket.rs: `block_on(b.read_exact(&mut buf))?;`
$DIR/network/memsocket/tests/memory_socket.rs: `block_on(a.write_all(b"way of kings"))?;`
$DIR/network/memsocket/tests/memory_socket.rs: `block_on(a.flush())?;`
$DIR/network/memsocket/tests/memory_socket.rs: `block_on(b.read_exact(&mut buf[..0]))?;`
$DIR/network/memsocket/tests/memory_socket.rs: `block_on(b.read_exact(&mut buf))?;`
$DIR/network/memsocket/tests/memory_socket.rs: `block_on(a.write_all(b"way of kings"))?;`
$DIR/network/memsocket/tests/memory_socket.rs: `block_on(a.flush())?;`
$DIR/network/memsocket/tests/memory_socket.rs: `.write_all(b"hello world")`
$DIR/network/memsocket/tests/memory_socket.rs: `.flush()`
$DIR/network/memsocket/tests/memory_socket.rs: `.read_to_end(&mut v)`
$DIR/network/memsocket/tests/memory_socket.rs: `.write_all(b"foobar")`
$DIR/network/memsocket/tests/memory_socket.rs: `.flush()`
$DIR/network/memsocket/tests/memory_socket.rs: `.read_exact(&mut buf)`
$DIR/network/memsocket/tests/memory_socket.rs: `.read_exact(&mut buf)`
$DIR/network/memsocket/tests/memory_socket.rs: `.write_all(b"foobar")`
$DIR/network/memsocket/tests/memory_socket.rs: `.flush()`
$DIR/network/memsocket/tests/memory_socket.rs: `.write_all(b"stormlight")`
$DIR/network/memsocket/tests/memory_socket.rs: `.flush()`
$DIR/network/memsocket/tests/memory_socket.rs: `.read_exact(&mut buf_a)`
$DIR/network/memsocket/tests/memory_socket.rs: `.read_exact(&mut buf_b)`
$DIR/network/memsocket/tests/memory_socket.rs: `.read_exact(&mut buf_a)`
$DIR/network/memsocket/tests/memory_socket.rs: `.read_exact(&mut buf_b)`
$DIR/network/memsocket/tests/memory_socket.rs: `.write_all(b"words")`
$DIR/network/memsocket/tests/memory_socket.rs: `.write_all(b" ")`
$DIR/network/memsocket/tests/memory_socket.rs: `.write_all(b"of")`
$DIR/network/memsocket/tests/memory_socket.rs: `.write_all(b" ")`
$DIR/network/memsocket/tests/memory_socket.rs: `.write_all(b"radiance")`
$DIR/network/memsocket/tests/memory_socket.rs: `.flush()`
$DIR/network/memsocket/tests/memory_socket.rs: `.read_exact(&mut buf)`
$DIR/network/memsocket/tests/memory_socket.rs: `.write_all(b"way of kings")`
$DIR/network/memsocket/tests/memory_socket.rs: `.flush()`
$DIR/network/memsocket/tests/memory_socket.rs: `.read_exact(&mut buf[..0])`
$DIR/network/memsocket/tests/memory_socket.rs: `.read_exact(&mut buf)`
$DIR/network/memsocket/tests/memory_socket.rs: `.write_all(b"way of kings")`
$DIR/network/memsocket/tests/memory_socket.rs: `.flush()`
$DIR/network/memsocket/tests/memory_socket.rs: `.read(&mut buf)`
$DIR/network/netcore/src/framing.rs: `block_on(write_u16frame_len(&mut a, 17))?;`
$DIR/network/netcore/src/framing.rs: `block_on(a.flush())?;`
$DIR/network/netcore/src/framing.rs: `block_on(a.write_all(&[42]))?;`
$DIR/network/netcore/src/framing.rs: `block_on(a.flush())?;`
$DIR/network/netcore/src/framing.rs: `drop(a);`
$DIR/network/netcore/src/framing.rs: `drop(b);`
$DIR/network/netcore/src/framing.rs: `block_on(write_u16frame(&mut a, b"The Name of the Wind"))?;`
$DIR/network/netcore/src/framing.rs: `block_on(a.flush())?;`
$DIR/network/netcore/src/framing.rs: `block_on(read_u16frame(&mut b, &mut buf))?;`
$DIR/network/netcore/src/framing.rs: `block_on(write_u16frame(&mut a, b"The Name of the Wind"))?;`
$DIR/network/netcore/src/framing.rs: `block_on(write_u16frame(&mut b, b"The Wise Man's Fear"))?;`
$DIR/network/netcore/src/framing.rs: `block_on(b.flush())?;`
$DIR/network/netcore/src/framing.rs: `block_on(write_u16frame(&mut a, b"The Doors of Stone"))?;`
$DIR/network/netcore/src/framing.rs: `block_on(a.flush())?;`
$DIR/network/netcore/src/framing.rs: `block_on(read_u16frame(&mut b, &mut buf))?;`
$DIR/network/netcore/src/framing.rs: `block_on(read_u16frame(&mut b, &mut buf))?;`
$DIR/network/netcore/src/framing.rs: `block_on(read_u16frame(&mut a, &mut buf))?;`
$DIR/network/netcore/src/framing.rs: `buf.resize((u16::max_value() as usize) * 2, 0);`
$DIR/network/netcore/src/framing.rs: `.flush()`
$DIR/network/netcore/src/framing.rs: `.write_all(&[42])`
$DIR/network/netcore/src/framing.rs: `.flush()`
$DIR/network/netcore/src/framing.rs: `.write_all(&[42])`
$DIR/network/netcore/src/framing.rs: `.flush()`
$DIR/network/netcore/src/framing.rs: `.flush()`
$DIR/network/netcore/src/framing.rs: `.flush()`
$DIR/network/netcore/src/framing.rs: `.resize((u16::max_value() as usize) * 2, 0)`
$DIR/network/netcore/src/transport/memory.rs: `block_on(join(dialer, listener));`
$DIR/network/netcore/src/transport/memory.rs: `.listen_on("/memory/0".parse().unwrap())`
$DIR/network/netcore/src/transport/memory.rs: `.parse()`
$DIR/network/netcore/src/transport/memory.rs: `.into_future()`
$DIR/network/netcore/src/transport/memory.rs: `.read_to_end(&mut buf)`
$DIR/network/netcore/src/transport/memory.rs: `.dial(peer_id, addr)`
$DIR/network/netcore/src/transport/memory.rs: `.write_all(b"hello world")`
$DIR/network/netcore/src/transport/memory.rs: `.flush()`
$DIR/network/netcore/src/transport/memory.rs: `.listen_on("/ip4/127.0.0.1/tcp/0".parse().unwrap())`
$DIR/network/netcore/src/transport/memory.rs: `.parse()`
$DIR/network/netcore/src/transport/memory.rs: `.dial(peer_id, "/ip4/127.0.0.1/tcp/22".parse().unwrap())`
$DIR/network/netcore/src/transport/memory.rs: `.parse()`
$DIR/network/netcore/src/transport/proxy_protocol.rs: `block_on(join(server, client));`
$DIR/network/netcore/src/transport/proxy_protocol.rs: `block_on(join(server, client));`
$DIR/network/netcore/src/transport/proxy_protocol.rs: `test_error_case(&[&[0; 12]]);`
$DIR/network/netcore/src/transport/proxy_protocol.rs: `test_error_case(&[&PPV2_SIGNATURE, &[0x00]]);`
$DIR/network/netcore/src/transport/proxy_protocol.rs: `test_error_case(&[&PPV2_SIGNATURE, &[0x22]]);`
$DIR/network/netcore/src/transport/proxy_protocol.rs: `test_error_case(&[&PPV2_SIGNATURE, &[PPV2_PROXY], &[0x55], &[0x00, 0x00]]);`
$DIR/network/netcore/src/transport/proxy_protocol.rs: `test_error_case(&[&PPV2_SIGNATURE, &[PPV2_PROXY], &[TCP_IPV4], &[0x00, 0x00]]);`
$DIR/network/netcore/src/transport/proxy_protocol.rs: `.to_socket_addrs()`
$DIR/network/netcore/src/transport/proxy_protocol.rs: `.collect()`
$DIR/network/netcore/src/transport/proxy_protocol.rs: `.first()`
$DIR/network/netcore/src/transport/proxy_protocol.rs: `.read_exact(data)`
$DIR/network/netcore/src/transport/proxy_protocol.rs: `.to_socket_addrs()`
$DIR/network/netcore/src/transport/proxy_protocol.rs: `.collect()`
$DIR/network/netcore/src/transport/proxy_protocol.rs: `.first()`
$DIR/network/netcore/src/transport/proxy_protocol.rs: `.read_exact(data)`
$DIR/network/netcore/src/transport/tcp.rs: `out.write_all(b"Earth").await?;`
$DIR/network/netcore/src/transport/tcp.rs: `out.read_exact(&mut buf).await?;`
$DIR/network/netcore/src/transport/tcp.rs: `out.read_exact(&mut buf).await?;`
$DIR/network/netcore/src/transport/tcp.rs: `out.write_all(b"Air").await?;`
$DIR/network/netcore/src/transport/tcp.rs: `.and_then(|mut out, _addr, origin| async move {
            match origin {
                ConnectionOrigin::Inbound => {
                    out.write_all(b"Earth").await?;
                    let mut buf = [0; 3];
                    out.read_exact(&mut buf).await?;
                    assert_eq!(&buf, b"Air");
                }
                ConnectionOrigin::Outbound => {
                    let mut buf = [0; 5];
                    out.read_exact(&mut buf).await?;
                    assert_eq!(&buf, b"Earth");
                    out.write_all(b"Air").await?;
                }
            }
            Ok(())
        })`
$DIR/network/netcore/src/transport/tcp.rs: `.write_all(b"Earth")`
$DIR/network/netcore/src/transport/tcp.rs: `.read_exact(&mut buf)`
$DIR/network/netcore/src/transport/tcp.rs: `.read_exact(&mut buf)`
$DIR/network/netcore/src/transport/tcp.rs: `.write_all(b"Air")`
$DIR/network/netcore/src/transport/tcp.rs: `.listen_on("/ip4/127.0.0.1/tcp/0".parse().unwrap())`
$DIR/network/netcore/src/transport/tcp.rs: `.parse()`
$DIR/network/netcore/src/transport/tcp.rs: `.dial(peer_id, addr)`
$DIR/network/netcore/src/transport/tcp.rs: `.into_future()`
$DIR/network/netcore/src/transport/tcp.rs: `.then(|(maybe_result, _stream)| {
            let (incoming, _addr) = maybe_result.unwrap().unwrap();
            incoming.map(Result::unwrap)
        })`
$DIR/network/netcore/src/transport/tcp.rs: `.listen_on("/memory/0".parse().unwrap())`
$DIR/network/netcore/src/transport/tcp.rs: `.parse()`
$DIR/network/netcore/src/transport/tcp.rs: `.dial(peer_id, "/memory/22".parse().unwrap())`
$DIR/network/netcore/src/transport/tcp.rs: `.parse()`
$DIR/network/netcore/src/transport/tcp.rs: `.collect::<Vec<_>>()`
$DIR/network/netcore/src/transport/tcp.rs: `.collect::<Vec<_>>()`
$DIR/network/netcore/src/transport/tcp.rs: `.collect::<Vec<_>>()`
$DIR/network/src/application/tests.rs: `peer_metadata_storage.insert_connection(connection_1);`
$DIR/network/src/application/tests.rs: `peer_metadata_storage.insert_connection(connection_2.clone());`
$DIR/network/src/application/tests.rs: `update_state(
        peer_metadata_storage.clone(),
        peer_1,
        PeerState::Disconnecting,
    );`
$DIR/network/src/application/tests.rs: `peer_metadata_storage.remove_connection(&different_connection_2);`
$DIR/network/src/application/tests.rs: `peer_metadata_storage.remove_connection(&connection_2);`
$DIR/network/src/application/tests.rs: `.insert_connection(connection_1)`
$DIR/network/src/application/tests.rs: `.insert_connection(connection_2.clone())`
$DIR/network/src/application/tests.rs: `.remove_connection(&different_connection_2)`
$DIR/network/src/application/tests.rs: `.remove_connection(&connection_2)`
$DIR/network/src/connectivity_manager/test.rs: `mock.trigger_connectivity_check().await;`
$DIR/network/src/connectivity_manager/test.rs: `mock.trigger_pending_dials().await;`
$DIR/network/src/connectivity_manager/test.rs: `mock.expect_one_dial_success(seed_peer_id, seed_addr.clone())
            .await;`
$DIR/network/src/connectivity_manager/test.rs: `mock.send_update_discovered_peers(DiscoverySource::OnChainValidatorSet, seeds)
            .await;`
$DIR/network/src/connectivity_manager/test.rs: `mock.trigger_connectivity_check().await;`
$DIR/network/src/connectivity_manager/test.rs: `mock.send_update_discovered_peers(DiscoverySource::OnChainValidatorSet, update)
            .await;`
$DIR/network/src/connectivity_manager/test.rs: `mock.send_lost_peer_await_delivery(seed_peer_id, seed_addr.clone())
            .await;`
$DIR/network/src/connectivity_manager/test.rs: `mock.trigger_connectivity_check().await;`
$DIR/network/src/connectivity_manager/test.rs: `mock.trigger_pending_dials().await;`
$DIR/network/src/connectivity_manager/test.rs: `mock.expect_one_dial_fail(seed_peer_id, new_seed_addr).await;`
$DIR/network/src/connectivity_manager/test.rs: `mock.trigger_connectivity_check().await;`
$DIR/network/src/connectivity_manager/test.rs: `mock.trigger_pending_dials().await;`
$DIR/network/src/connectivity_manager/test.rs: `mock.expect_one_dial_success(seed_peer_id, seed_addr).await;`
$DIR/network/src/connectivity_manager/test.rs: `mock.send_update_discovered_peers(DiscoverySource::OnChainValidatorSet, update.clone())
            .await;`
$DIR/network/src/connectivity_manager/test.rs: `mock.trigger_connectivity_check().await;`
$DIR/network/src/connectivity_manager/test.rs: `mock.trigger_pending_dials().await;`
$DIR/network/src/connectivity_manager/test.rs: `mock.expect_one_dial_success(other_peer_id, other_addr.clone())
            .await;`
$DIR/network/src/connectivity_manager/test.rs: `mock.send_update_discovered_peers(DiscoverySource::OnChainValidatorSet, update)
            .await;`
$DIR/network/src/connectivity_manager/test.rs: `mock.trigger_connectivity_check().await;`
$DIR/network/src/connectivity_manager/test.rs: `mock.send_update_discovered_peers(DiscoverySource::OnChainValidatorSet, update)
            .await;`
$DIR/network/src/connectivity_manager/test.rs: `mock.trigger_connectivity_check().await;`
$DIR/network/src/connectivity_manager/test.rs: `mock.send_lost_peer_await_delivery(other_peer_id, other_addr_new.clone())
            .await;`
$DIR/network/src/connectivity_manager/test.rs: `mock.trigger_connectivity_check().await;`
$DIR/network/src/connectivity_manager/test.rs: `mock.trigger_pending_dials().await;`
$DIR/network/src/connectivity_manager/test.rs: `mock.expect_one_dial_success(other_peer_id, other_addr_new)
            .await;`
$DIR/network/src/connectivity_manager/test.rs: `mock.send_update_discovered_peers(DiscoverySource::OnChainValidatorSet, update)
            .await;`
$DIR/network/src/connectivity_manager/test.rs: `mock.trigger_connectivity_check().await;`
$DIR/network/src/connectivity_manager/test.rs: `mock.trigger_pending_dials().await;`
$DIR/network/src/connectivity_manager/test.rs: `mock.expect_one_dial_success(other_peer_id, other_addr.clone())
            .await;`
$DIR/network/src/connectivity_manager/test.rs: `mock.send_lost_peer_await_delivery(other_peer_id, other_addr.clone())
            .await;`
$DIR/network/src/connectivity_manager/test.rs: `mock.trigger_connectivity_check().await;`
$DIR/network/src/connectivity_manager/test.rs: `mock.trigger_pending_dials().await;`
$DIR/network/src/connectivity_manager/test.rs: `mock.expect_one_dial_success(other_peer_id, other_addr.clone())
            .await;`
$DIR/network/src/connectivity_manager/test.rs: `mock.send_update_discovered_peers(DiscoverySource::OnChainValidatorSet, peers)
            .await;`
$DIR/network/src/connectivity_manager/test.rs: `mock.trigger_connectivity_check().await;`
$DIR/network/src/connectivity_manager/test.rs: `mock.trigger_pending_dials().await;`
$DIR/network/src/connectivity_manager/test.rs: `mock.expect_one_dial_success(other_peer_id, other_addr.clone())
            .await;`
$DIR/network/src/connectivity_manager/test.rs: `peer.keys = HashSet::new();`
$DIR/network/src/connectivity_manager/test.rs: `peer.addresses = vec![network_address(DEFAULT_BASE_ADDR)];`
$DIR/network/src/connectivity_manager/test.rs: `mock.send_update_discovered_peers(DiscoverySource::OnChainValidatorSet, peers)
            .await;`
$DIR/network/src/connectivity_manager/test.rs: `mock.trigger_connectivity_check().await;`
$DIR/network/src/connectivity_manager/test.rs: `mock.expect_disconnect_success(other_peer_id, other_addr)
            .await;`
$DIR/network/src/connectivity_manager/test.rs: `mock.send_update_discovered_peers(DiscoverySource::OnChainValidatorSet, peers)
            .await;`
$DIR/network/src/connectivity_manager/test.rs: `mock.trigger_connectivity_check().await;`
$DIR/network/src/connectivity_manager/test.rs: `mock.trigger_pending_dials().await;`
$DIR/network/src/connectivity_manager/test.rs: `mock.expect_one_dial_fail(other_peer_id, other_addr.clone())
            .await;`
$DIR/network/src/connectivity_manager/test.rs: `mock.trigger_connectivity_check().await;`
$DIR/network/src/connectivity_manager/test.rs: `mock.trigger_pending_dials().await;`
$DIR/network/src/connectivity_manager/test.rs: `mock.expect_one_dial_success(other_peer_id, other_addr.clone())
            .await;`
$DIR/network/src/connectivity_manager/test.rs: `peer.keys = HashSet::new();`
$DIR/network/src/connectivity_manager/test.rs: `peer.addresses = vec![network_address(DEFAULT_BASE_ADDR)];`
$DIR/network/src/connectivity_manager/test.rs: `mock.send_update_discovered_peers(DiscoverySource::OnChainValidatorSet, peers)
            .await;`
$DIR/network/src/connectivity_manager/test.rs: `mock.trigger_connectivity_check().await;`
$DIR/network/src/connectivity_manager/test.rs: `mock.expect_disconnect_fail(other_peer_id, other_addr.clone())
            .await;`
$DIR/network/src/connectivity_manager/test.rs: `mock.trigger_connectivity_check().await;`
$DIR/network/src/connectivity_manager/test.rs: `mock.expect_disconnect_success(other_peer_id, other_addr.clone())
            .await;`
$DIR/network/src/connectivity_manager/test.rs: `mock.send_update_discovered_peers(DiscoverySource::OnChainValidatorSet, peers)
            .await;`
$DIR/network/src/connectivity_manager/test.rs: `mock.trigger_connectivity_check().await;`
$DIR/network/src/connectivity_manager/test.rs: `mock.trigger_pending_dials().await;`
$DIR/network/src/connectivity_manager/test.rs: `mock.expect_one_dial_fail(other_peer_id, other_addr.clone())
            .await;`
$DIR/network/src/connectivity_manager/test.rs: `mock.send_new_peer_await_delivery(other_peer_id, other_peer_id, other_addr.clone())
            .await;`
$DIR/network/src/connectivity_manager/test.rs: `mock.trigger_connectivity_check().await;`
$DIR/network/src/connectivity_manager/test.rs: `peer.keys = HashSet::new();`
$DIR/network/src/connectivity_manager/test.rs: `peer.addresses = vec![network_address(DEFAULT_BASE_ADDR)];`
$DIR/network/src/connectivity_manager/test.rs: `mock.send_update_discovered_peers(DiscoverySource::OnChainValidatorSet, peers)
            .await;`
$DIR/network/src/connectivity_manager/test.rs: `mock.trigger_connectivity_check().await;`
$DIR/network/src/connectivity_manager/test.rs: `mock.expect_disconnect_fail(other_peer_id, other_addr.clone())
            .await;`
$DIR/network/src/connectivity_manager/test.rs: `mock.send_lost_peer_await_delivery(other_peer_id, other_addr)
            .await;`
$DIR/network/src/connectivity_manager/test.rs: `mock.trigger_connectivity_check().await;`
$DIR/network/src/connectivity_manager/test.rs: `mock.send_update_discovered_peers(DiscoverySource::OnChainValidatorSet, peers)
            .await;`
$DIR/network/src/connectivity_manager/test.rs: `mock.send_new_peer_await_delivery(peer_id_b, peer_id_b, peer_b_addr)
            .await;`
$DIR/network/src/connectivity_manager/test.rs: `mock.trigger_connectivity_check().await;`
$DIR/network/src/connectivity_manager/test.rs: `mock.trigger_pending_dials().await;`
$DIR/network/src/connectivity_manager/test.rs: `mock.expect_one_dial_fail(peer_id_a, peer_a_addr.clone())
                .await;`
$DIR/network/src/connectivity_manager/test.rs: `mock.trigger_connectivity_check().await;`
$DIR/network/src/connectivity_manager/test.rs: `mock.trigger_pending_dials().await;`
$DIR/network/src/connectivity_manager/test.rs: `mock.expect_one_dial_success(peer_id_a, peer_a_addr).await;`
$DIR/network/src/connectivity_manager/test.rs: `peer.addresses = vec![other_addr_1.clone(), other_addr_2.clone()];`
$DIR/network/src/connectivity_manager/test.rs: `mock.send_update_discovered_peers(DiscoverySource::OnChainValidatorSet, update)
            .await;`
$DIR/network/src/connectivity_manager/test.rs: `mock.trigger_connectivity_check().await;`
$DIR/network/src/connectivity_manager/test.rs: `mock.trigger_pending_dials().await;`
$DIR/network/src/connectivity_manager/test.rs: `mock.expect_one_dial_fail(other_peer_id, other_addr_1).await;`
$DIR/network/src/connectivity_manager/test.rs: `mock.trigger_connectivity_check().await;`
$DIR/network/src/connectivity_manager/test.rs: `mock.trigger_pending_dials().await;`
$DIR/network/src/connectivity_manager/test.rs: `mock.expect_one_dial_success(other_peer_id, other_addr_2)
            .await;`
$DIR/network/src/connectivity_manager/test.rs: `peer.addresses = vec![other_addr_1.clone(), other_addr_2.clone()];`
$DIR/network/src/connectivity_manager/test.rs: `mock.send_update_discovered_peers(DiscoverySource::OnChainValidatorSet, update)
            .await;`
$DIR/network/src/connectivity_manager/test.rs: `mock.trigger_connectivity_check().await;`
$DIR/network/src/connectivity_manager/test.rs: `mock.trigger_pending_dials().await;`
$DIR/network/src/connectivity_manager/test.rs: `mock.expect_one_dial_fail(other_peer_id, other_addr_1.clone())
            .await;`
$DIR/network/src/connectivity_manager/test.rs: `mock.trigger_connectivity_check().await;`
$DIR/network/src/connectivity_manager/test.rs: `mock.trigger_pending_dials().await;`
$DIR/network/src/connectivity_manager/test.rs: `mock.expect_one_dial_fail(other_peer_id, other_addr_2).await;`
$DIR/network/src/connectivity_manager/test.rs: `mock.trigger_connectivity_check().await;`
$DIR/network/src/connectivity_manager/test.rs: `mock.trigger_pending_dials().await;`
$DIR/network/src/connectivity_manager/test.rs: `mock.expect_one_dial_success(other_peer_id, other_addr_1)
            .await;`
$DIR/network/src/connectivity_manager/test.rs: `peer.addresses = vec![other_addr_1.clone(), other_addr_2, other_addr_3];`
$DIR/network/src/connectivity_manager/test.rs: `mock.send_update_discovered_peers(DiscoverySource::OnChainValidatorSet, update)
            .await;`
$DIR/network/src/connectivity_manager/test.rs: `mock.trigger_connectivity_check().await;`
$DIR/network/src/connectivity_manager/test.rs: `mock.trigger_pending_dials().await;`
$DIR/network/src/connectivity_manager/test.rs: `mock.expect_one_dial_fail(other_peer_id, other_addr_1).await;`
$DIR/network/src/connectivity_manager/test.rs: `peer.addresses = vec![other_addr_4.clone(), other_addr_5];`
$DIR/network/src/connectivity_manager/test.rs: `mock.send_update_discovered_peers(DiscoverySource::OnChainValidatorSet, update)
            .await;`
$DIR/network/src/connectivity_manager/test.rs: `mock.trigger_connectivity_check().await;`
$DIR/network/src/connectivity_manager/test.rs: `mock.trigger_pending_dials().await;`
$DIR/network/src/connectivity_manager/test.rs: `mock.expect_one_dial_success(other_peer_id, other_addr_4)
            .await;`
$DIR/network/src/connectivity_manager/test.rs: `seeds.insert(peer_id, peer);`
$DIR/network/src/connectivity_manager/test.rs: `mock.trigger_connectivity_check().await;`
$DIR/network/src/connectivity_manager/test.rs: `mock.trigger_pending_dials().await;`
$DIR/network/src/connectivity_manager/test.rs: `mock.expect_num_dials(MAX_TEST_CONNECTIONS).await;`
$DIR/network/src/connectivity_manager/test.rs: `mock.trigger_connectivity_check().await;`
$DIR/network/src/connectivity_manager/test.rs: `conn_mgr.handle_update_discovered_peers(DiscoverySource::OnChainValidatorSet, peers_1.clone());`
$DIR/network/src/connectivity_manager/test.rs: `conn_mgr.handle_update_discovered_peers(DiscoverySource::OnChainValidatorSet, peers_1.clone());`
$DIR/network/src/connectivity_manager/test.rs: `conn_mgr
        .handle_update_discovered_peers(DiscoverySource::OnChainValidatorSet, peers_empty.clone());`
$DIR/network/src/connectivity_manager/test.rs: `conn_mgr.handle_update_discovered_peers(DiscoverySource::OnChainValidatorSet, peers_1.clone());`
$DIR/network/src/connectivity_manager/test.rs: `conn_mgr.handle_update_discovered_peers(DiscoverySource::Config, peers_2);`
$DIR/network/src/connectivity_manager/test.rs: `conn_mgr
        .handle_update_discovered_peers(DiscoverySource::OnChainValidatorSet, peers_1_2.clone());`
$DIR/network/src/connectivity_manager/test.rs: `conn_mgr.handle_update_discovered_peers(DiscoverySource::Config, peers_1_2.clone());`
$DIR/network/src/connectivity_manager/test.rs: `conn_mgr.handle_update_discovered_peers(DiscoverySource::Config, peers_empty.clone());`
$DIR/network/src/connectivity_manager/test.rs: `conn_mgr
        .handle_update_discovered_peers(DiscoverySource::OnChainValidatorSet, peers_empty.clone());`
$DIR/network/src/connectivity_manager/test.rs: `conn_mgr.handle_update_discovered_peers(DiscoverySource::Config, peers_empty.clone());`
$DIR/network/src/connectivity_manager/test.rs: `.trigger_connectivity_check()`
$DIR/network/src/connectivity_manager/test.rs: `.trigger_pending_dials()`
$DIR/network/src/connectivity_manager/test.rs: `.expect_one_dial_success(seed_peer_id, seed_addr.clone())`
$DIR/network/src/connectivity_manager/test.rs: `.send_update_discovered_peers(DiscoverySource::OnChainValidatorSet, seeds)`
$DIR/network/src/connectivity_manager/test.rs: `.trigger_connectivity_check()`
$DIR/network/src/connectivity_manager/test.rs: `.send_update_discovered_peers(DiscoverySource::OnChainValidatorSet, update)`
$DIR/network/src/connectivity_manager/test.rs: `.send_lost_peer_await_delivery(seed_peer_id, seed_addr.clone())`
$DIR/network/src/connectivity_manager/test.rs: `.trigger_connectivity_check()`
$DIR/network/src/connectivity_manager/test.rs: `.trigger_pending_dials()`
$DIR/network/src/connectivity_manager/test.rs: `.expect_one_dial_fail(seed_peer_id, new_seed_addr)`
$DIR/network/src/connectivity_manager/test.rs: `.trigger_connectivity_check()`
$DIR/network/src/connectivity_manager/test.rs: `.trigger_pending_dials()`
$DIR/network/src/connectivity_manager/test.rs: `.expect_one_dial_success(seed_peer_id, seed_addr)`
$DIR/network/src/connectivity_manager/test.rs: `.start()`
$DIR/network/src/connectivity_manager/test.rs: `.send_update_discovered_peers(DiscoverySource::OnChainValidatorSet, update.clone())`
$DIR/network/src/connectivity_manager/test.rs: `.trigger_connectivity_check()`
$DIR/network/src/connectivity_manager/test.rs: `.trigger_pending_dials()`
$DIR/network/src/connectivity_manager/test.rs: `.expect_one_dial_success(other_peer_id, other_addr.clone())`
$DIR/network/src/connectivity_manager/test.rs: `.send_update_discovered_peers(DiscoverySource::OnChainValidatorSet, update)`
$DIR/network/src/connectivity_manager/test.rs: `.trigger_connectivity_check()`
$DIR/network/src/connectivity_manager/test.rs: `.send_update_discovered_peers(DiscoverySource::OnChainValidatorSet, update)`
$DIR/network/src/connectivity_manager/test.rs: `.trigger_connectivity_check()`
$DIR/network/src/connectivity_manager/test.rs: `.send_lost_peer_await_delivery(other_peer_id, other_addr_new.clone())`
$DIR/network/src/connectivity_manager/test.rs: `.trigger_connectivity_check()`
$DIR/network/src/connectivity_manager/test.rs: `.trigger_pending_dials()`
$DIR/network/src/connectivity_manager/test.rs: `.expect_one_dial_success(other_peer_id, other_addr_new)`
$DIR/network/src/connectivity_manager/test.rs: `.start()`
$DIR/network/src/connectivity_manager/test.rs: `.send_update_discovered_peers(DiscoverySource::OnChainValidatorSet, update)`
$DIR/network/src/connectivity_manager/test.rs: `.trigger_connectivity_check()`
$DIR/network/src/connectivity_manager/test.rs: `.trigger_pending_dials()`
$DIR/network/src/connectivity_manager/test.rs: `.expect_one_dial_success(other_peer_id, other_addr.clone())`
$DIR/network/src/connectivity_manager/test.rs: `.send_lost_peer_await_delivery(other_peer_id, other_addr.clone())`
$DIR/network/src/connectivity_manager/test.rs: `.trigger_connectivity_check()`
$DIR/network/src/connectivity_manager/test.rs: `.trigger_pending_dials()`
$DIR/network/src/connectivity_manager/test.rs: `.expect_one_dial_success(other_peer_id, other_addr.clone())`
$DIR/network/src/connectivity_manager/test.rs: `.start()`
$DIR/network/src/connectivity_manager/test.rs: `.send_update_discovered_peers(DiscoverySource::OnChainValidatorSet, peers)`
$DIR/network/src/connectivity_manager/test.rs: `.trigger_connectivity_check()`
$DIR/network/src/connectivity_manager/test.rs: `.trigger_pending_dials()`
$DIR/network/src/connectivity_manager/test.rs: `.expect_one_dial_success(other_peer_id, other_addr.clone())`
$DIR/network/src/connectivity_manager/test.rs: `.send_update_discovered_peers(DiscoverySource::OnChainValidatorSet, peers)`
$DIR/network/src/connectivity_manager/test.rs: `.trigger_connectivity_check()`
$DIR/network/src/connectivity_manager/test.rs: `.expect_disconnect_success(other_peer_id, other_addr)`
$DIR/network/src/connectivity_manager/test.rs: `.start()`
$DIR/network/src/connectivity_manager/test.rs: `.send_update_discovered_peers(DiscoverySource::OnChainValidatorSet, peers)`
$DIR/network/src/connectivity_manager/test.rs: `.trigger_connectivity_check()`
$DIR/network/src/connectivity_manager/test.rs: `.trigger_pending_dials()`
$DIR/network/src/connectivity_manager/test.rs: `.expect_one_dial_fail(other_peer_id, other_addr.clone())`
$DIR/network/src/connectivity_manager/test.rs: `.trigger_connectivity_check()`
$DIR/network/src/connectivity_manager/test.rs: `.trigger_pending_dials()`
$DIR/network/src/connectivity_manager/test.rs: `.expect_one_dial_success(other_peer_id, other_addr.clone())`
$DIR/network/src/connectivity_manager/test.rs: `.send_update_discovered_peers(DiscoverySource::OnChainValidatorSet, peers)`
$DIR/network/src/connectivity_manager/test.rs: `.trigger_connectivity_check()`
$DIR/network/src/connectivity_manager/test.rs: `.expect_disconnect_fail(other_peer_id, other_addr.clone())`
$DIR/network/src/connectivity_manager/test.rs: `.trigger_connectivity_check()`
$DIR/network/src/connectivity_manager/test.rs: `.expect_disconnect_success(other_peer_id, other_addr.clone())`
$DIR/network/src/connectivity_manager/test.rs: `.start()`
$DIR/network/src/connectivity_manager/test.rs: `.send_update_discovered_peers(DiscoverySource::OnChainValidatorSet, peers)`
$DIR/network/src/connectivity_manager/test.rs: `.trigger_connectivity_check()`
$DIR/network/src/connectivity_manager/test.rs: `.trigger_pending_dials()`
$DIR/network/src/connectivity_manager/test.rs: `.expect_one_dial_fail(other_peer_id, other_addr.clone())`
$DIR/network/src/connectivity_manager/test.rs: `.send_new_peer_await_delivery(other_peer_id, other_peer_id, other_addr.clone())`
$DIR/network/src/connectivity_manager/test.rs: `.trigger_connectivity_check()`
$DIR/network/src/connectivity_manager/test.rs: `.send_update_discovered_peers(DiscoverySource::OnChainValidatorSet, peers)`
$DIR/network/src/connectivity_manager/test.rs: `.trigger_connectivity_check()`
$DIR/network/src/connectivity_manager/test.rs: `.expect_disconnect_fail(other_peer_id, other_addr.clone())`
$DIR/network/src/connectivity_manager/test.rs: `.send_lost_peer_await_delivery(other_peer_id, other_addr)`
$DIR/network/src/connectivity_manager/test.rs: `.trigger_connectivity_check()`
$DIR/network/src/connectivity_manager/test.rs: `.start()`
$DIR/network/src/connectivity_manager/test.rs: `.send_update_discovered_peers(DiscoverySource::OnChainValidatorSet, peers)`
$DIR/network/src/connectivity_manager/test.rs: `.send_new_peer_await_delivery(peer_id_b, peer_id_b, peer_b_addr)`
$DIR/network/src/connectivity_manager/test.rs: `.trigger_connectivity_check()`
$DIR/network/src/connectivity_manager/test.rs: `.trigger_pending_dials()`
$DIR/network/src/connectivity_manager/test.rs: `.expect_one_dial_fail(peer_id_a, peer_a_addr.clone())`
$DIR/network/src/connectivity_manager/test.rs: `.trigger_connectivity_check()`
$DIR/network/src/connectivity_manager/test.rs: `.trigger_pending_dials()`
$DIR/network/src/connectivity_manager/test.rs: `.expect_one_dial_success(peer_id_a, peer_a_addr)`
$DIR/network/src/connectivity_manager/test.rs: `.start()`
$DIR/network/src/connectivity_manager/test.rs: `.send_update_discovered_peers(DiscoverySource::OnChainValidatorSet, update)`
$DIR/network/src/connectivity_manager/test.rs: `.trigger_connectivity_check()`
$DIR/network/src/connectivity_manager/test.rs: `.trigger_pending_dials()`
$DIR/network/src/connectivity_manager/test.rs: `.expect_one_dial_fail(other_peer_id, other_addr_1)`
$DIR/network/src/connectivity_manager/test.rs: `.trigger_connectivity_check()`
$DIR/network/src/connectivity_manager/test.rs: `.trigger_pending_dials()`
$DIR/network/src/connectivity_manager/test.rs: `.expect_one_dial_success(other_peer_id, other_addr_2)`
$DIR/network/src/connectivity_manager/test.rs: `.start()`
$DIR/network/src/connectivity_manager/test.rs: `.send_update_discovered_peers(DiscoverySource::OnChainValidatorSet, update)`
$DIR/network/src/connectivity_manager/test.rs: `.trigger_connectivity_check()`
$DIR/network/src/connectivity_manager/test.rs: `.trigger_pending_dials()`
$DIR/network/src/connectivity_manager/test.rs: `.expect_one_dial_fail(other_peer_id, other_addr_1.clone())`
$DIR/network/src/connectivity_manager/test.rs: `.trigger_connectivity_check()`
$DIR/network/src/connectivity_manager/test.rs: `.trigger_pending_dials()`
$DIR/network/src/connectivity_manager/test.rs: `.expect_one_dial_fail(other_peer_id, other_addr_2)`
$DIR/network/src/connectivity_manager/test.rs: `.trigger_connectivity_check()`
$DIR/network/src/connectivity_manager/test.rs: `.trigger_pending_dials()`
$DIR/network/src/connectivity_manager/test.rs: `.expect_one_dial_success(other_peer_id, other_addr_1)`
$DIR/network/src/connectivity_manager/test.rs: `.start()`
$DIR/network/src/connectivity_manager/test.rs: `.send_update_discovered_peers(DiscoverySource::OnChainValidatorSet, update)`
$DIR/network/src/connectivity_manager/test.rs: `.trigger_connectivity_check()`
$DIR/network/src/connectivity_manager/test.rs: `.trigger_pending_dials()`
$DIR/network/src/connectivity_manager/test.rs: `.expect_one_dial_fail(other_peer_id, other_addr_1)`
$DIR/network/src/connectivity_manager/test.rs: `.send_update_discovered_peers(DiscoverySource::OnChainValidatorSet, update)`
$DIR/network/src/connectivity_manager/test.rs: `.trigger_connectivity_check()`
$DIR/network/src/connectivity_manager/test.rs: `.trigger_pending_dials()`
$DIR/network/src/connectivity_manager/test.rs: `.expect_one_dial_success(other_peer_id, other_addr_4)`
$DIR/network/src/connectivity_manager/test.rs: `.start()`
$DIR/network/src/connectivity_manager/test.rs: `.insert(peer_id, peer)`
$DIR/network/src/connectivity_manager/test.rs: `.trigger_connectivity_check()`
$DIR/network/src/connectivity_manager/test.rs: `.trigger_pending_dials()`
$DIR/network/src/connectivity_manager/test.rs: `.expect_num_dials(MAX_TEST_CONNECTIONS)`
$DIR/network/src/connectivity_manager/test.rs: `.trigger_connectivity_check()`
$DIR/network/src/connectivity_manager/test.rs: `.start()`
$DIR/network/src/connectivity_manager/test.rs: `.public_key()`
$DIR/network/src/connectivity_manager/test.rs: `.public_key()`
$DIR/network/src/connectivity_manager/test.rs: `.handle_update_discovered_peers(DiscoverySource::OnChainValidatorSet, peers_1.clone())`
$DIR/network/src/connectivity_manager/test.rs: `.handle_update_discovered_peers(DiscoverySource::OnChainValidatorSet, peers_1.clone())`
$DIR/network/src/connectivity_manager/test.rs: `.handle_update_discovered_peers(DiscoverySource::OnChainValidatorSet, peers_empty.clone())`
$DIR/network/src/connectivity_manager/test.rs: `.handle_update_discovered_peers(DiscoverySource::OnChainValidatorSet, peers_1.clone())`
$DIR/network/src/connectivity_manager/test.rs: `.handle_update_discovered_peers(DiscoverySource::Config, peers_2)`
$DIR/network/src/connectivity_manager/test.rs: `.handle_update_discovered_peers(DiscoverySource::OnChainValidatorSet, peers_1_2.clone())`
$DIR/network/src/connectivity_manager/test.rs: `.handle_update_discovered_peers(DiscoverySource::Config, peers_1_2.clone())`
$DIR/network/src/connectivity_manager/test.rs: `.handle_update_discovered_peers(DiscoverySource::Config, peers_empty.clone())`
$DIR/network/src/connectivity_manager/test.rs: `.handle_update_discovered_peers(DiscoverySource::OnChainValidatorSet, peers_empty.clone())`
$DIR/network/src/connectivity_manager/test.rs: `.handle_update_discovered_peers(DiscoverySource::Config, peers_empty.clone())`
$DIR/network/src/noise/fuzzing.rs: `fuzz_responder(&init_msg);`
$DIR/network/src/noise/fuzzing.rs: `fuzz_initiator(&resp_msg);`
$DIR/network/src/noise/handshake.rs: `client.noise_config = noise::NoiseConfig::new(client_private_key);`
$DIR/network/src/noise/handshake.rs: `::diem_logger::Logger::init_for_testing();`
$DIR/network/src/noise/handshake.rs: `client.network_context = NetworkContext::mock_with_peer_id(PeerId::random());`
$DIR/network/src/noise/handshake.rs: `dialer_socket.set_fragmented_read();`
$DIR/network/src/noise/handshake.rs: `listener_socket.set_fragmented_read();`
$DIR/network/src/noise/handshake.rs: `.upgrade_outbound(dialer_socket, server_public_key, bad_timestamp(1))`
$DIR/network/src/noise/handshake.rs: `.upgrade_inbound(listener_socket)`
$DIR/network/src/noise/handshake.rs: `.upgrade_outbound(dialer_socket, server_public_key, bad_timestamp(0))`
$DIR/network/src/noise/handshake.rs: `.upgrade_inbound(listener_socket)`
$DIR/network/src/noise/handshake.rs: `.upgrade_outbound(dialer_socket, server_public_key, bad_timestamp(1))`
$DIR/network/src/noise/handshake.rs: `.upgrade_inbound(listener_socket)`
$DIR/network/src/noise/handshake.rs: `.upgrade_outbound(dialer_socket, server_public_key, bad_timestamp(2))`
$DIR/network/src/noise/handshake.rs: `.upgrade_inbound(listener_socket)`
$DIR/network/src/noise/handshake.rs: `.set_fragmented_read()`
$DIR/network/src/noise/handshake.rs: `.set_fragmented_read()`
$DIR/network/src/noise/handshake.rs: `.upgrade_outbound(dialer_socket, server_public_key, AntiReplayTimestamps::now)`
$DIR/network/src/noise/handshake.rs: `.upgrade_inbound(listener_socket)`
$DIR/network/src/noise/stream.rs: `block_on(client.write_all(b"stormlight"))?;`
$DIR/network/src/noise/stream.rs: `block_on(client.write_all(b" "))?;`
$DIR/network/src/noise/stream.rs: `block_on(client.write_all(b"archive"))?;`
$DIR/network/src/noise/stream.rs: `block_on(client.flush())?;`
$DIR/network/src/noise/stream.rs: `block_on(client.close())?;`
$DIR/network/src/noise/stream.rs: `block_on(server.read_to_end(&mut buf))?;`
$DIR/network/src/noise/stream.rs: `fake_socket.set_trailing();`
$DIR/network/src/noise/stream.rs: `block_on(client.write_all(b"The Name of the Wind")).unwrap();`
$DIR/network/src/noise/stream.rs: `block_on(client.flush()).unwrap();`
$DIR/network/src/noise/stream.rs: `block_on(client.write_all(b"The Wise Man's Fear")).unwrap();`
$DIR/network/src/noise/stream.rs: `block_on(client.flush()).unwrap();`
$DIR/network/src/noise/stream.rs: `block_on(server.write_all(b"The Doors of Stone")).unwrap();`
$DIR/network/src/noise/stream.rs: `block_on(server.flush()).unwrap();`
$DIR/network/src/noise/stream.rs: `block_on(server.read_exact(&mut buf)).unwrap();`
$DIR/network/src/noise/stream.rs: `block_on(server.read_exact(&mut buf)).unwrap();`
$DIR/network/src/noise/stream.rs: `block_on(client.read_exact(&mut buf)).unwrap();`
$DIR/network/src/noise/stream.rs: `block_on(client.write_all(&buf_send)).unwrap();`
$DIR/network/src/noise/stream.rs: `block_on(client.flush()).unwrap();`
$DIR/network/src/noise/stream.rs: `block_on(server.read_exact(&mut buf_receive)).unwrap();`
$DIR/network/src/noise/stream.rs: `dialer_socket.set_fragmented_read();`
$DIR/network/src/noise/stream.rs: `listener_socket.set_fragmented_read();`
$DIR/network/src/noise/stream.rs: `block_on(client.write_all(b"The Name of the Wind")).unwrap();`
$DIR/network/src/noise/stream.rs: `block_on(client.flush()).unwrap();`
$DIR/network/src/noise/stream.rs: `block_on(client.write_all(b"The Wise Man's Fear")).unwrap();`
$DIR/network/src/noise/stream.rs: `block_on(client.flush()).unwrap();`
$DIR/network/src/noise/stream.rs: `block_on(server.write_all(b"The Doors of Stone")).unwrap();`
$DIR/network/src/noise/stream.rs: `block_on(server.flush()).unwrap();`
$DIR/network/src/noise/stream.rs: `block_on(server.read_exact(&mut buf)).unwrap();`
$DIR/network/src/noise/stream.rs: `block_on(server.read_exact(&mut buf)).unwrap();`
$DIR/network/src/noise/stream.rs: `block_on(client.read_exact(&mut buf)).unwrap();`
$DIR/network/src/noise/stream.rs: `.write_all(b"stormlight")`
$DIR/network/src/noise/stream.rs: `.write_all(b" ")`
$DIR/network/src/noise/stream.rs: `.write_all(b"archive")`
$DIR/network/src/noise/stream.rs: `.flush()`
$DIR/network/src/noise/stream.rs: `.close()`
$DIR/network/src/noise/stream.rs: `.read_to_end(&mut buf)`
$DIR/network/src/noise/stream.rs: `.set_trailing()`
$DIR/network/src/noise/stream.rs: `.read(&mut buffer)`
$DIR/network/src/noise/stream.rs: `.write_all(b"The Name of the Wind")`
$DIR/network/src/noise/stream.rs: `.flush()`
$DIR/network/src/noise/stream.rs: `.write_all(b"The Wise Man's Fear")`
$DIR/network/src/noise/stream.rs: `.flush()`
$DIR/network/src/noise/stream.rs: `.write_all(b"The Doors of Stone")`
$DIR/network/src/noise/stream.rs: `.flush()`
$DIR/network/src/noise/stream.rs: `.read_exact(&mut buf)`
$DIR/network/src/noise/stream.rs: `.read_exact(&mut buf)`
$DIR/network/src/noise/stream.rs: `.read_exact(&mut buf)`
$DIR/network/src/noise/stream.rs: `.write_all(&buf_send)`
$DIR/network/src/noise/stream.rs: `.flush()`
$DIR/network/src/noise/stream.rs: `.read_exact(&mut buf_receive)`
$DIR/network/src/noise/stream.rs: `.set_fragmented_read()`
$DIR/network/src/noise/stream.rs: `.set_fragmented_read()`
$DIR/network/src/noise/stream.rs: `.upgrade_outbound(dialer_socket, server_public_key, AntiReplayTimestamps::now)`
$DIR/network/src/noise/stream.rs: `.upgrade_inbound(listener_socket)`
$DIR/network/src/noise/stream.rs: `.write_all(b"The Name of the Wind")`
$DIR/network/src/noise/stream.rs: `.flush()`
$DIR/network/src/noise/stream.rs: `.write_all(b"The Wise Man's Fear")`
$DIR/network/src/noise/stream.rs: `.flush()`
$DIR/network/src/noise/stream.rs: `.write_all(b"The Doors of Stone")`
$DIR/network/src/noise/stream.rs: `.flush()`
$DIR/network/src/noise/stream.rs: `.read_exact(&mut buf)`
$DIR/network/src/noise/stream.rs: `.read_exact(&mut buf)`
$DIR/network/src/noise/stream.rs: `.read_exact(&mut buf)`
$DIR/network/src/peer/fuzzing.rs: `fuzz(&corpus);`
$DIR/network/src/peer/test.rs: `::diem_logger::Logger::init_for_testing();`
$DIR/network/src/peer/test.rs: `peer_handle.send_direct_send(send_msg.clone());`
$DIR/network/src/peer/test.rs: `::diem_logger::Logger::init_for_testing();`
$DIR/network/src/peer/test.rs: `::diem_logger::Logger::init_for_testing();`
$DIR/network/src/peer/test.rs: `peer_handle_a.send_direct_send(msg_a.clone());`
$DIR/network/src/peer/test.rs: `peer_handle_b.send_direct_send(msg_b.clone());`
$DIR/network/src/peer/test.rs: `drop(peer_handle_a);`
$DIR/network/src/peer/test.rs: `assert_disconnected_event(
            remote_peer_id_a,
            DisconnectReason::Requested,
            &mut connection_notifs_rx_a,
        )
        .await;`
$DIR/network/src/peer/test.rs: `assert_disconnected_event(
            remote_peer_id_b,
            DisconnectReason::ConnectionLost,
            &mut connection_notifs_rx_b,
        )
        .await;`
$DIR/network/src/peer/test.rs: `::diem_logger::Logger::init_for_testing();`
$DIR/network/src/peer/test.rs: `::diem_logger::Logger::init_for_testing();`
$DIR/network/src/peer/test.rs: `match received {
                PeerNotification::RecvRpc(req) => res_txs.push(req.res_tx),
                _ => panic!("Unexpected PeerNotification: {:?}", received),
            };`
$DIR/network/src/peer/test.rs: `res_tx.send(Ok(response)).unwrap();`
$DIR/network/src/peer/test.rs: `::diem_logger::Logger::init_for_testing();`
$DIR/network/src/peer/test.rs: `mock_time.advance_ms_async(INBOUND_RPC_TIMEOUT_MS).await;`
$DIR/network/src/peer/test.rs: `res_tx.cancellation().await;`
$DIR/network/src/peer/test.rs: `::diem_logger::Logger::init_for_testing();`
$DIR/network/src/peer/test.rs: `drop(res_tx);`
$DIR/network/src/peer/test.rs: `::diem_logger::Logger::init_for_testing();`
$DIR/network/src/peer/test.rs: `::diem_logger::Logger::init_for_testing();`
$DIR/network/src/peer/test.rs: `send_recv_futures.push(send_recv.boxed());`
$DIR/network/src/peer/test.rs: `future::join_all(send_recv_futures).await;`
$DIR/network/src/peer/test.rs: `::diem_logger::Logger::init_for_testing();`
$DIR/network/src/peer/test.rs: `peer_handle.0.push(PROTOCOL, request).unwrap();`
$DIR/network/src/peer/test.rs: `drop(response_rx);`
$DIR/network/src/peer/test.rs: `tokio::task::yield_now().await;`
$DIR/network/src/peer/test.rs: `drop(peer_handle);`
$DIR/network/src/peer/test.rs: `::diem_logger::Logger::init_for_testing();`
$DIR/network/src/peer/test.rs: `peer_handle.0.push(PROTOCOL, request).unwrap();`
$DIR/network/src/peer/test.rs: `mock_time.advance_async(timeout).await;`
$DIR/network/src/peer/test.rs: `tokio::task::yield_now().await;`
$DIR/network/src/peer/test.rs: `drop(peer_handle);`
$DIR/network/src/peer/test.rs: `::diem_logger::Logger::init_for_testing();`
$DIR/network/src/peer/test.rs: `drop(peer_handle);`
$DIR/network/src/peer/test.rs: `assert_disconnected_event(
            remote_peer_id,
            DisconnectReason::Requested,
            &mut connection_notifs_rx,
        )
        .await;`
$DIR/network/src/peer/test.rs: `::diem_logger::Logger::init_for_testing();`
$DIR/network/src/peer/test.rs: `assert_disconnected_event(
            remote_peer_id,
            DisconnectReason::ConnectionLost,
            &mut connection_notifs_rx,
        )
        .await;`
$DIR/network/src/peer/test.rs: `::diem_logger::Logger::init_for_testing();`
$DIR/network/src/peer/test.rs: `drop(peer_handle);`
$DIR/network/src/peer/test.rs: `.handle()`
$DIR/network/src/peer/test.rs: `.next()`
$DIR/network/src/peer/test.rs: `.close()`
$DIR/network/src/peer/test.rs: `.send_direct_send(send_msg.clone())`
$DIR/network/src/peer/test.rs: `.start()`
$DIR/network/src/peer/test.rs: `.handle()`
$DIR/network/src/peer/test.rs: `.send(&send_msg)`
$DIR/network/src/peer/test.rs: `.close()`
$DIR/network/src/peer/test.rs: `.next()`
$DIR/network/src/peer/test.rs: `.start()`
$DIR/network/src/peer/test.rs: `.handle()`
$DIR/network/src/peer/test.rs: `.remote_peer_id()`
$DIR/network/src/peer/test.rs: `.remote_peer_id()`
$DIR/network/src/peer/test.rs: `.send_direct_send(msg_a.clone())`
$DIR/network/src/peer/test.rs: `.send_direct_send(msg_b.clone())`
$DIR/network/src/peer/test.rs: `.next()`
$DIR/network/src/peer/test.rs: `.next()`
$DIR/network/src/peer/test.rs: `.start()`
$DIR/network/src/peer/test.rs: `.start()`
$DIR/network/src/peer/test.rs: `.handle()`
$DIR/network/src/peer/test.rs: `.send(&send_msg)`
$DIR/network/src/peer/test.rs: `.next()`
$DIR/network/src/peer/test.rs: `.close()`
$DIR/network/src/peer/test.rs: `.next()`
$DIR/network/src/peer/test.rs: `.res_tx.send(response)`
$DIR/network/src/peer/test.rs: `.start()`
$DIR/network/src/peer/test.rs: `.handle()`
$DIR/network/src/peer/test.rs: `.send(&send_msg)`
$DIR/network/src/peer/test.rs: `.next()`
$DIR/network/src/peer/test.rs: `.close()`
$DIR/network/src/peer/test.rs: `.next()`
$DIR/network/src/peer/test.rs: `.push(req.res_tx)`
$DIR/network/src/peer/test.rs: `.into_iter()`
$DIR/network/src/peer/test.rs: `.send(Ok(response))`
$DIR/network/src/peer/test.rs: `.start()`
$DIR/network/src/peer/test.rs: `.handle()`
$DIR/network/src/peer/test.rs: `.into()`
$DIR/network/src/peer/test.rs: `.send(&send_msg)`
$DIR/network/src/peer/test.rs: `.next()`
$DIR/network/src/peer/test.rs: `.advance_ms_async(INBOUND_RPC_TIMEOUT_MS)`
$DIR/network/src/peer/test.rs: `.cancellation()`
$DIR/network/src/peer/test.rs: `.close()`
$DIR/network/src/peer/test.rs: `.try_collect::<Vec<_>>()`
$DIR/network/src/peer/test.rs: `.start()`
$DIR/network/src/peer/test.rs: `.handle()`
$DIR/network/src/peer/test.rs: `.send(&send_msg)`
$DIR/network/src/peer/test.rs: `.next()`
$DIR/network/src/peer/test.rs: `.close()`
$DIR/network/src/peer/test.rs: `.try_collect::<Vec<_>>()`
$DIR/network/src/peer/test.rs: `.start()`
$DIR/network/src/peer/test.rs: `.handle()`
$DIR/network/src/peer/test.rs: `.send_rpc_request(PROTOCOL, Bytes::from(&b"hello world"[..]), timeout)`
$DIR/network/src/peer/test.rs: `.next()`
$DIR/network/src/peer/test.rs: `.send(&response)`
$DIR/network/src/peer/test.rs: `.start()`
$DIR/network/src/peer/test.rs: `.handle()`
$DIR/network/src/peer/test.rs: `.send_rpc_request(PROTOCOL, Bytes::from(&b"hello world"[..]), timeout)`
$DIR/network/src/peer/test.rs: `.push(send_recv.boxed())`
$DIR/network/src/peer/test.rs: `.boxed()`
$DIR/network/src/peer/test.rs: `.next()`
$DIR/network/src/peer/test.rs: `.send(&response)`
$DIR/network/src/peer/test.rs: `.start()`
$DIR/network/src/peer/test.rs: `.handle()`
$DIR/network/src/peer/test.rs: `.push(PROTOCOL, request)`
$DIR/network/src/peer/test.rs: `.next()`
$DIR/network/src/peer/test.rs: `.send(&response)`
$DIR/network/src/peer/test.rs: `.start()`
$DIR/network/src/peer/test.rs: `.handle()`
$DIR/network/src/peer/test.rs: `.into()`
$DIR/network/src/peer/test.rs: `.push(PROTOCOL, request)`
$DIR/network/src/peer/test.rs: `.next()`
$DIR/network/src/peer/test.rs: `.advance_async(timeout)`
$DIR/network/src/peer/test.rs: `.send(&response)`
$DIR/network/src/peer/test.rs: `.start()`
$DIR/network/src/peer/test.rs: `.handle()`
$DIR/network/src/peer/test.rs: `.remote_peer_id()`
$DIR/network/src/peer/test.rs: `.start()`
$DIR/network/src/peer/test.rs: `.handle()`
$DIR/network/src/peer/test.rs: `.remote_peer_id()`
$DIR/network/src/peer/test.rs: `.close()`
$DIR/network/src/peer/test.rs: `.start()`
$DIR/network/src/peer/test.rs: `.handle()`
$DIR/network/src/peer/test.rs: `.start()`
$DIR/network/src/peer_manager/conn_notifs_channel.rs: `send_new_peer(&mut sender, conn_a.clone());`
$DIR/network/src/peer_manager/conn_notifs_channel.rs: `send_lost_peer(
                &mut sender,
                conn_a.clone(),
                DisconnectReason::ConnectionLost,
            );`
$DIR/network/src/peer_manager/conn_notifs_channel.rs: `send_new_peer(&mut sender, conn_a.clone());`
$DIR/network/src/peer_manager/conn_notifs_channel.rs: `send_lost_peer(&mut sender, conn_a.clone(), DisconnectReason::Requested);`
$DIR/network/src/peer_manager/conn_notifs_channel.rs: `send_new_peer(&mut sender, conn_a);`
$DIR/network/src/peer_manager/conn_notifs_channel.rs: `send_new_peer(&mut sender, conn_b);`
$DIR/network/src/peer_manager/conn_notifs_channel.rs: `.select_next_some()`
$DIR/network/src/peer_manager/conn_notifs_channel.rs: `.select_next_some()`
$DIR/network/src/peer_manager/tests.rs: `::diem_logger::Logger::init_for_testing();`
$DIR/network/src/peer_manager/tests.rs: `peer_manager.add_peer(create_connection(
            inbound1,
            ids[0],
            "/ip6/::1/tcp/8080".parse().unwrap(),
            ConnectionOrigin::Inbound,
            ConnectionId::from(0),
        ));`
$DIR/network/src/peer_manager/tests.rs: `peer_manager.add_peer(create_connection(
            inbound2,
            ids[0],
            "/ip6/::1/tcp/8081".parse().unwrap(),
            ConnectionOrigin::Inbound,
            ConnectionId::from(1),
        ));`
$DIR/network/src/peer_manager/tests.rs: `check_correct_connection_is_live(
            outbound2,
            outbound1,
            ConnectionOrigin::Inbound,
            ConnectionOrigin::Inbound,
            ids[0],
            true,
            &mut peer_manager,
        )
        .await;`
$DIR/network/src/peer_manager/tests.rs: `::diem_logger::Logger::init_for_testing();`
$DIR/network/src/peer_manager/tests.rs: `peer_manager.add_peer(create_connection(
            inbound1,
            ids[1],
            NetworkAddress::mock(),
            ConnectionOrigin::Inbound,
            ConnectionId::from(0),
        ));`
$DIR/network/src/peer_manager/tests.rs: `peer_manager.add_peer(create_connection(
            outbound2,
            ids[1],
            NetworkAddress::mock(),
            ConnectionOrigin::Outbound,
            ConnectionId::from(1),
        ));`
$DIR/network/src/peer_manager/tests.rs: `check_correct_connection_is_live(
            outbound1,
            inbound2,
            ConnectionOrigin::Inbound,
            ConnectionOrigin::Outbound,
            ids[1],
            false,
            &mut peer_manager,
        )
        .await;`
$DIR/network/src/peer_manager/tests.rs: `::diem_logger::Logger::init_for_testing();`
$DIR/network/src/peer_manager/tests.rs: `peer_manager.add_peer(create_connection(
            inbound1,
            ids[0],
            NetworkAddress::mock(),
            ConnectionOrigin::Inbound,
            ConnectionId::from(0),
        ));`
$DIR/network/src/peer_manager/tests.rs: `peer_manager.add_peer(create_connection(
            outbound2,
            ids[0],
            NetworkAddress::mock(),
            ConnectionOrigin::Outbound,
            ConnectionId::from(1),
        ));`
$DIR/network/src/peer_manager/tests.rs: `check_correct_connection_is_live(
            inbound2,
            outbound1,
            ConnectionOrigin::Outbound,
            ConnectionOrigin::Inbound,
            ids[0],
            true,
            &mut peer_manager,
        )
        .await;`
$DIR/network/src/peer_manager/tests.rs: `::diem_logger::Logger::init_for_testing();`
$DIR/network/src/peer_manager/tests.rs: `peer_manager.add_peer(create_connection(
            outbound1,
            ids[1],
            NetworkAddress::mock(),
            ConnectionOrigin::Outbound,
            ConnectionId::from(0),
        ));`
$DIR/network/src/peer_manager/tests.rs: `peer_manager.add_peer(create_connection(
            inbound2,
            ids[1],
            NetworkAddress::mock(),
            ConnectionOrigin::Inbound,
            ConnectionId::from(1),
        ));`
$DIR/network/src/peer_manager/tests.rs: `check_correct_connection_is_live(
            outbound2,
            inbound1,
            ConnectionOrigin::Inbound,
            ConnectionOrigin::Outbound,
            ids[1],
            true,
            &mut peer_manager,
        )
        .await;`
$DIR/network/src/peer_manager/tests.rs: `::diem_logger::Logger::init_for_testing();`
$DIR/network/src/peer_manager/tests.rs: `peer_manager.add_peer(create_connection(
            outbound1,
            ids[0],
            NetworkAddress::mock(),
            ConnectionOrigin::Outbound,
            ConnectionId::from(0),
        ));`
$DIR/network/src/peer_manager/tests.rs: `peer_manager.add_peer(create_connection(
            inbound2,
            ids[0],
            NetworkAddress::mock(),
            ConnectionOrigin::Inbound,
            ConnectionId::from(1),
        ));`
$DIR/network/src/peer_manager/tests.rs: `check_correct_connection_is_live(
            inbound1,
            outbound2,
            ConnectionOrigin::Outbound,
            ConnectionOrigin::Inbound,
            ids[0],
            false,
            &mut peer_manager,
        )
        .await;`
$DIR/network/src/peer_manager/tests.rs: `::diem_logger::Logger::init_for_testing();`
$DIR/network/src/peer_manager/tests.rs: `peer_manager.add_peer(create_connection(
            outbound1,
            ids[0],
            NetworkAddress::mock(),
            ConnectionOrigin::Outbound,
            ConnectionId::from(0),
        ));`
$DIR/network/src/peer_manager/tests.rs: `peer_manager.add_peer(create_connection(
            outbound2,
            ids[0],
            NetworkAddress::mock(),
            ConnectionOrigin::Outbound,
            ConnectionId::from(1),
        ));`
$DIR/network/src/peer_manager/tests.rs: `check_correct_connection_is_live(
            inbound2,
            inbound1,
            ConnectionOrigin::Outbound,
            ConnectionOrigin::Outbound,
            ids[0],
            true,
            &mut peer_manager,
        )
        .await;`
$DIR/network/src/peer_manager/tests.rs: `peer_manager.add_peer(create_connection(
            outbound,
            ids[0],
            NetworkAddress::mock(),
            ConnectionOrigin::Outbound,
            ConnectionId::from(1),
        ));`
$DIR/network/src/peer_manager/tests.rs: `peer_manager.handle_connection_event(event);`
$DIR/network/src/peer_manager/tests.rs: `::diem_logger::Logger::init_for_testing();`
$DIR/network/src/peer_manager/tests.rs: `peer_manager.add_peer(create_connection(
            outbound,
            ids[0],
            NetworkAddress::mock(),
            ConnectionOrigin::Outbound,
            ConnectionId::from(0),
        ));`
$DIR/network/src/peer_manager/tests.rs: `peer_manager
            .handle_outbound_connection_request(ConnectionRequest::DisconnectPeer(
                ids[0],
                disconnect_resp_tx,
            ))
            .await;`
$DIR/network/src/peer_manager/tests.rs: `peer_manager.handle_connection_event(event);`
$DIR/network/src/peer_manager/tests.rs: `disconnect_resp_rx.await.unwrap().unwrap();`
$DIR/network/src/peer_manager/tests.rs: `.handle()`
$DIR/network/src/peer_manager/tests.rs: `.add_peer(create_connection(
            inbound1,
            ids[0],
            "/ip6/::1/tcp/8080".parse().unwrap(),
            ConnectionOrigin::Inbound,
            ConnectionId::from(0),
        ))`
$DIR/network/src/peer_manager/tests.rs: `.parse()`
$DIR/network/src/peer_manager/tests.rs: `.add_peer(create_connection(
            inbound2,
            ids[0],
            "/ip6/::1/tcp/8081".parse().unwrap(),
            ConnectionOrigin::Inbound,
            ConnectionId::from(1),
        ))`
$DIR/network/src/peer_manager/tests.rs: `.parse()`
$DIR/network/src/peer_manager/tests.rs: `.handle()`
$DIR/network/src/peer_manager/tests.rs: `.add_peer(create_connection(
            inbound1,
            ids[1],
            NetworkAddress::mock(),
            ConnectionOrigin::Inbound,
            ConnectionId::from(0),
        ))`
$DIR/network/src/peer_manager/tests.rs: `.add_peer(create_connection(
            outbound2,
            ids[1],
            NetworkAddress::mock(),
            ConnectionOrigin::Outbound,
            ConnectionId::from(1),
        ))`
$DIR/network/src/peer_manager/tests.rs: `.handle()`
$DIR/network/src/peer_manager/tests.rs: `.add_peer(create_connection(
            inbound1,
            ids[0],
            NetworkAddress::mock(),
            ConnectionOrigin::Inbound,
            ConnectionId::from(0),
        ))`
$DIR/network/src/peer_manager/tests.rs: `.add_peer(create_connection(
            outbound2,
            ids[0],
            NetworkAddress::mock(),
            ConnectionOrigin::Outbound,
            ConnectionId::from(1),
        ))`
$DIR/network/src/peer_manager/tests.rs: `.handle()`
$DIR/network/src/peer_manager/tests.rs: `.add_peer(create_connection(
            outbound1,
            ids[1],
            NetworkAddress::mock(),
            ConnectionOrigin::Outbound,
            ConnectionId::from(0),
        ))`
$DIR/network/src/peer_manager/tests.rs: `.add_peer(create_connection(
            inbound2,
            ids[1],
            NetworkAddress::mock(),
            ConnectionOrigin::Inbound,
            ConnectionId::from(1),
        ))`
$DIR/network/src/peer_manager/tests.rs: `.handle()`
$DIR/network/src/peer_manager/tests.rs: `.add_peer(create_connection(
            outbound1,
            ids[0],
            NetworkAddress::mock(),
            ConnectionOrigin::Outbound,
            ConnectionId::from(0),
        ))`
$DIR/network/src/peer_manager/tests.rs: `.add_peer(create_connection(
            inbound2,
            ids[0],
            NetworkAddress::mock(),
            ConnectionOrigin::Inbound,
            ConnectionId::from(1),
        ))`
$DIR/network/src/peer_manager/tests.rs: `.handle()`
$DIR/network/src/peer_manager/tests.rs: `.add_peer(create_connection(
            outbound1,
            ids[0],
            NetworkAddress::mock(),
            ConnectionOrigin::Outbound,
            ConnectionId::from(0),
        ))`
$DIR/network/src/peer_manager/tests.rs: `.add_peer(create_connection(
            outbound2,
            ids[0],
            NetworkAddress::mock(),
            ConnectionOrigin::Outbound,
            ConnectionId::from(1),
        ))`
$DIR/network/src/peer_manager/tests.rs: `.handle()`
$DIR/network/src/peer_manager/tests.rs: `.add_peer(create_connection(
            outbound,
            ids[0],
            NetworkAddress::mock(),
            ConnectionOrigin::Outbound,
            ConnectionId::from(1),
        ))`
$DIR/network/src/peer_manager/tests.rs: `.into()`
$DIR/network/src/peer_manager/tests.rs: `.handle_connection_event(event)`
$DIR/network/src/peer_manager/tests.rs: `.handle()`
$DIR/network/src/peer_manager/tests.rs: `.add_peer(create_connection(
            outbound,
            ids[0],
            NetworkAddress::mock(),
            ConnectionOrigin::Outbound,
            ConnectionId::from(0),
        ))`
$DIR/network/src/peer_manager/tests.rs: `.next()`
$DIR/network/src/peer_manager/tests.rs: `.handle_outbound_connection_request(ConnectionRequest::DisconnectPeer(
                ids[0],
                disconnect_resp_tx,
            ))`
$DIR/network/src/peer_manager/tests.rs: `.into()`
$DIR/network/src/peer_manager/tests.rs: `.handle_connection_event(event)`
$DIR/network/src/peer_manager/tests.rs: `.next()`
$DIR/network/src/protocols/health_checker/test.rs: `harness.trigger_ping().await;`
$DIR/network/src/protocols/health_checker/test.rs: `harness.send_new_peer_notification(peer_id).await;`
$DIR/network/src/protocols/health_checker/test.rs: `harness.trigger_ping().await;`
$DIR/network/src/protocols/health_checker/test.rs: `harness.expect_ping_send_ok().await;`
$DIR/network/src/protocols/health_checker/test.rs: `harness.send_new_peer_notification(peer_id).await;`
$DIR/network/src/protocols/health_checker/test.rs: `expect_pong(res_rx).await;`
$DIR/network/src/protocols/health_checker/test.rs: `harness.trigger_ping().await;`
$DIR/network/src/protocols/health_checker/test.rs: `harness.send_new_peer_notification(peer_id).await;`
$DIR/network/src/protocols/health_checker/test.rs: `harness.trigger_ping().await;`
$DIR/network/src/protocols/health_checker/test.rs: `harness.expect_ping_send_not_ok().await;`
$DIR/network/src/protocols/health_checker/test.rs: `harness.expect_disconnect(peer_id).await;`
$DIR/network/src/protocols/health_checker/test.rs: `harness.trigger_ping().await;`
$DIR/network/src/protocols/health_checker/test.rs: `harness.send_new_peer_notification(peer_id).await;`
$DIR/network/src/protocols/health_checker/test.rs: `harness.trigger_ping().await;`
$DIR/network/src/protocols/health_checker/test.rs: `harness.expect_ping_send_not_ok().await;`
$DIR/network/src/protocols/health_checker/test.rs: `harness.trigger_ping().await;`
$DIR/network/src/protocols/health_checker/test.rs: `harness.expect_ping_send_ok().await;`
$DIR/network/src/protocols/health_checker/test.rs: `harness.trigger_ping().await;`
$DIR/network/src/protocols/health_checker/test.rs: `harness.expect_ping_send_not_ok().await;`
$DIR/network/src/protocols/health_checker/test.rs: `harness.expect_disconnect(peer_id).await;`
$DIR/network/src/protocols/health_checker/test.rs: `harness.trigger_ping().await;`
$DIR/network/src/protocols/health_checker/test.rs: `harness.send_new_peer_notification(peer_id).await;`
$DIR/network/src/protocols/health_checker/test.rs: `harness.trigger_ping().await;`
$DIR/network/src/protocols/health_checker/test.rs: `harness.expect_ping_send_not_ok().await;`
$DIR/network/src/protocols/health_checker/test.rs: `harness.expect_disconnect(peer_id).await;`
$DIR/network/src/protocols/health_checker/test.rs: `.trigger_ping()`
$DIR/network/src/protocols/health_checker/test.rs: `.send_new_peer_notification(peer_id)`
$DIR/network/src/protocols/health_checker/test.rs: `.trigger_ping()`
$DIR/network/src/protocols/health_checker/test.rs: `.expect_ping_send_ok()`
$DIR/network/src/protocols/health_checker/test.rs: `.start()`
$DIR/network/src/protocols/health_checker/test.rs: `.send_new_peer_notification(peer_id)`
$DIR/network/src/protocols/health_checker/test.rs: `.send_inbound_ping(peer_id, 0)`
$DIR/network/src/protocols/health_checker/test.rs: `.start()`
$DIR/network/src/protocols/health_checker/test.rs: `.trigger_ping()`
$DIR/network/src/protocols/health_checker/test.rs: `.send_new_peer_notification(peer_id)`
$DIR/network/src/protocols/health_checker/test.rs: `.trigger_ping()`
$DIR/network/src/protocols/health_checker/test.rs: `.expect_ping_send_not_ok()`
$DIR/network/src/protocols/health_checker/test.rs: `.expect_disconnect(peer_id)`
$DIR/network/src/protocols/health_checker/test.rs: `.start()`
$DIR/network/src/protocols/health_checker/test.rs: `.trigger_ping()`
$DIR/network/src/protocols/health_checker/test.rs: `.send_new_peer_notification(peer_id)`
$DIR/network/src/protocols/health_checker/test.rs: `.trigger_ping()`
$DIR/network/src/protocols/health_checker/test.rs: `.expect_ping_send_not_ok()`
$DIR/network/src/protocols/health_checker/test.rs: `.trigger_ping()`
$DIR/network/src/protocols/health_checker/test.rs: `.expect_ping_send_ok()`
$DIR/network/src/protocols/health_checker/test.rs: `.trigger_ping()`
$DIR/network/src/protocols/health_checker/test.rs: `.expect_ping_send_not_ok()`
$DIR/network/src/protocols/health_checker/test.rs: `.expect_disconnect(peer_id)`
$DIR/network/src/protocols/health_checker/test.rs: `.start()`
$DIR/network/src/protocols/health_checker/test.rs: `.trigger_ping()`
$DIR/network/src/protocols/health_checker/test.rs: `.send_new_peer_notification(peer_id)`
$DIR/network/src/protocols/health_checker/test.rs: `.trigger_ping()`
$DIR/network/src/protocols/health_checker/test.rs: `.expect_ping_send_not_ok()`
$DIR/network/src/protocols/health_checker/test.rs: `.expect_disconnect(peer_id)`
$DIR/network/src/protocols/health_checker/test.rs: `.start()`
$DIR/network/src/protocols/identity.rs: `supported_protocols.insert(
            MessagingProtocolVersion::V1,
            [
                ProtocolId::ConsensusDirectSend,
                ProtocolId::MempoolDirectSend,
            ]
            .iter()
            .into(),
        );`
$DIR/network/src/protocols/identity.rs: `supported_protocols.insert(
            MessagingProtocolVersion::V1,
            [ProtocolId::ConsensusRpc, ProtocolId::ConsensusDirectSend]
                .iter()
                .into(),
        );`
$DIR/network/src/protocols/identity.rs: `client_handshake.chain_id = ChainId::new(client_handshake.chain_id.id() + 1);`
$DIR/network/src/protocols/identity.rs: `client_handshake.network_id = NetworkId::Public;`
$DIR/network/src/protocols/identity.rs: `.insert(
            MessagingProtocolVersion::V1,
            [
                ProtocolId::ConsensusDirectSend,
                ProtocolId::MempoolDirectSend,
            ]
            .iter()
            .into(),
        )`
$DIR/network/src/protocols/identity.rs: `.into()`
$DIR/network/src/protocols/identity.rs: `.insert(
            MessagingProtocolVersion::V1,
            [ProtocolId::ConsensusRpc, ProtocolId::ConsensusDirectSend]
                .iter()
                .into(),
        )`
$DIR/network/src/protocols/identity.rs: `.into()`
$DIR/network/src/protocols/identity.rs: `.chain_id.id()`
$DIR/network/src/protocols/identity.rs: `.perform_handshake(&remote_handshake)`
$DIR/network/src/protocols/identity.rs: `.perform_handshake(&remote_handshake)`
$DIR/network/src/protocols/identity.rs: `.perform_handshake(&remote_handshake)`
$DIR/network/src/protocols/identity.rs: `.perform_handshake(&remote_handshake)`
$DIR/network/src/protocols/wire/handshake/v1/test.rs: `handshake_msg.network_id = NetworkId::vfn_network();`
$DIR/network/src/protocols/wire/handshake/v1/test.rs: `h1.perform_handshake(&h2).unwrap();`
$DIR/network/src/protocols/wire/handshake/v1/test.rs: `h2.network_id = NetworkId::Private("h2".to_string());`
$DIR/network/src/protocols/wire/handshake/v1/test.rs: `h2.network_id = NetworkId::Public;`
$DIR/network/src/protocols/wire/handshake/v1/test.rs: `h2.chain_id = ChainId::new(h1.chain_id.id() + 1);`
$DIR/network/src/protocols/wire/handshake/v1/test.rs: `supported_protocols.insert(
        MessagingProtocolVersion::V1,
        [ProtocolId::ConsensusRpc, ProtocolId::DiscoveryDirectSend]
            .iter()
            .into(),
    );`
$DIR/network/src/protocols/wire/handshake/v1/test.rs: `supported_protocols.insert(
        MessagingProtocolVersion::V1,
        [ProtocolId::ConsensusRpc, ProtocolId::MempoolDirectSend]
            .iter()
            .into(),
    );`
$DIR/network/src/protocols/wire/handshake/v1/test.rs: `h1.perform_handshake(&h2).unwrap_err();`
$DIR/network/src/protocols/wire/handshake/v1/test.rs: `supported_protocols.insert(MessagingProtocolVersion::V1, SupportedProtocols::default());`
$DIR/network/src/protocols/wire/handshake/v1/test.rs: `.into()`
$DIR/network/src/protocols/wire/handshake/v1/test.rs: `.perform_handshake(&h2)`
$DIR/network/src/protocols/wire/handshake/v1/test.rs: `.perform_handshake(&h2)`
$DIR/network/src/protocols/wire/handshake/v1/test.rs: `.perform_handshake(&h2)`
$DIR/network/src/protocols/wire/handshake/v1/test.rs: `.chain_id.id()`
$DIR/network/src/protocols/wire/handshake/v1/test.rs: `.perform_handshake(&h2)`
$DIR/network/src/protocols/wire/handshake/v1/test.rs: `.insert(
        MessagingProtocolVersion::V1,
        [ProtocolId::ConsensusRpc, ProtocolId::DiscoveryDirectSend]
            .iter()
            .into(),
    )`
$DIR/network/src/protocols/wire/handshake/v1/test.rs: `.into()`
$DIR/network/src/protocols/wire/handshake/v1/test.rs: `.insert(
        MessagingProtocolVersion::V1,
        [ProtocolId::ConsensusRpc, ProtocolId::MempoolDirectSend]
            .iter()
            .into(),
    )`
$DIR/network/src/protocols/wire/handshake/v1/test.rs: `.into()`
$DIR/network/src/protocols/wire/handshake/v1/test.rs: `.perform_handshake(&h2)`
$DIR/network/src/protocols/wire/handshake/v1/test.rs: `.insert(MessagingProtocolVersion::V1, SupportedProtocols::default())`
$DIR/network/src/protocols/wire/messaging/v1/test.rs: `socket_tx.save_writing(&mut write_buf);`
$DIR/network/src/protocols/wire/messaging/v1/test.rs: `block_on(message_tx.send(&message)).unwrap();`
$DIR/network/src/protocols/wire/messaging/v1/test.rs: `.collect::<Vec<_>>()`
$DIR/network/src/protocols/wire/messaging/v1/test.rs: `.into_iter()`
$DIR/network/src/protocols/wire/messaging/v1/test.rs: `.collect::<Result<Vec<_>, _>>()`
$DIR/network/src/protocols/wire/messaging/v1/test.rs: `.save_writing(&mut write_buf)`
$DIR/network/src/protocols/wire/messaging/v1/test.rs: `.send(&message)`
$DIR/network/src/protocols/wire/messaging/v1/test.rs: `.send(&message)`
$DIR/network/src/protocols/wire/messaging/v1/test.rs: `.send(&message)`
$DIR/network/src/protocols/wire/messaging/v1/test.rs: `.next()`
$DIR/network/src/testutils/fake_socket.rs: `socket.set_fragmented_read();`
$DIR/network/src/testutils/fake_socket.rs: `tx.set_fragmented_write();`
$DIR/network/src/testutils/fake_socket.rs: `tx.save_writing(&mut tx_writes);`
$DIR/network/src/testutils/fake_socket.rs: `socket.set_trailing();`
$DIR/network/src/testutils/fake_socket.rs: `dialer.save_writing(&mut init_msg);`
$DIR/network/src/testutils/fake_socket.rs: `listener.save_writing(&mut resp_msg);`
$DIR/network/src/testutils/fake_socket.rs: `dialer.set_fragmented_read();`
$DIR/network/src/testutils/fake_socket.rs: `listener.set_fragmented_read();`
$DIR/network/src/testutils/fake_socket.rs: `.read_exact(&mut buf)`
$DIR/network/src/testutils/fake_socket.rs: `.set_fragmented_read()`
$DIR/network/src/testutils/fake_socket.rs: `.read(&mut buf)`
$DIR/network/src/testutils/fake_socket.rs: `.set_fragmented_write()`
$DIR/network/src/testutils/fake_socket.rs: `.save_writing(&mut tx_writes)`
$DIR/network/src/testutils/fake_socket.rs: `.len()`
$DIR/network/src/testutils/fake_socket.rs: `.write(&msg[i..])`
$DIR/network/src/testutils/fake_socket.rs: `.close()`
$DIR/network/src/testutils/fake_socket.rs: `.read_to_end(&mut read_buf)`
$DIR/network/src/testutils/fake_socket.rs: `.set_trailing()`
$DIR/network/src/testutils/fake_socket.rs: `.read_exact(&mut buf)`
$DIR/network/src/testutils/fake_socket.rs: `.save_writing(&mut init_msg)`
$DIR/network/src/testutils/fake_socket.rs: `.save_writing(&mut resp_msg)`
$DIR/network/src/testutils/fake_socket.rs: `.set_fragmented_read()`
$DIR/network/src/testutils/fake_socket.rs: `.set_fragmented_read()`
$DIR/network/src/testutils/fake_socket.rs: `.write(&first_message)`
$DIR/network/src/testutils/fake_socket.rs: `.read(&mut buf)`
$DIR/network/src/testutils/fake_socket.rs: `.write(&second_message)`
$DIR/network/src/testutils/fake_socket.rs: `.read(&mut buf)`
$DIR/sdk/compatibility/src/lib.rs: `client.get_events(currency.mint_events_key, 0, 10)?;`
$DIR/sdk/compatibility/src/lib.rs: `client.get_network_status()?;`
$DIR/sdk/compatibility/src/lib.rs: `env.coffer()
        .fund(currency, account.authentication_key(), amount)?;`
$DIR/sdk/compatibility/src/lib.rs: `env.coffer()
        .fund(Currency::XUS, account.authentication_key(), 1000)?;`
$DIR/sdk/compatibility/src/lib.rs: `env.coffer()
        .fund(Currency::XUS, account_1.authentication_key(), 1000)?;`
$DIR/sdk/compatibility/src/lib.rs: `env.coffer()
        .fund(Currency::XUS, account_2.authentication_key(), 1000)?;`
$DIR/sdk/compatibility/src/lib.rs: `client.submit(&txn)?;`
$DIR/sdk/compatibility/src/lib.rs: `client.wait_for_signed_transaction(&txn, None, None)?;`
$DIR/sdk/compatibility/src/lib.rs: `txns.verify(
        latest_li.ledger_info(),
        account_1.address(),
        0,
        100,
        true,
        ledger_version,
    )?;`
$DIR/sdk/compatibility/src/lib.rs: `event_proof.verify(
        latest_li,
        &new_block_event_key(),
        Some(block_height),
        latest_li.version(),
    )?;`
$DIR/sdk/compatibility/src/lib.rs: `env.coffer()
        .fund(currency, account.authentication_key(), amount)?;`
$DIR/sdk/compatibility/src/lib.rs: `client.submit(&txn)?;`
$DIR/sdk/compatibility/src/lib.rs: `client.wait_for_signed_transaction(&txn, None, None)?;`
$DIR/sdk/compatibility/src/lib.rs: `env.coffer()
        .fund(currency, account.authentication_key(), amount)?;`
$DIR/sdk/compatibility/src/lib.rs: `client.submit(&txn)?;`
$DIR/sdk/compatibility/src/lib.rs: `client.wait_for_signed_transaction(&txn, None, None)?;`
$DIR/sdk/compatibility/src/lib.rs: `env.coffer()
        .fund(currency, account.authentication_key(), start_amount)?;`
$DIR/sdk/compatibility/src/lib.rs: `env.coffer()
        .fund(currency, account_2.authentication_key(), start_amount)?;`
$DIR/sdk/compatibility/src/lib.rs: `client.submit(&txn)?;`
$DIR/sdk/compatibility/src/lib.rs: `client.wait_for_signed_transaction(&txn, None, None)?;`
$DIR/sdk/compatibility/src/lib.rs: `env.coffer()
        .fund(currency, account.authentication_key(), amount)?;`
$DIR/sdk/compatibility/src/lib.rs: `client.submit(&txn)?;`
$DIR/sdk/compatibility/src/lib.rs: `client.wait_for_signed_transaction(&txn, None, None)?;`
$DIR/sdk/compatibility/src/lib.rs: `client.submit(&txn)?;`
$DIR/sdk/compatibility/src/lib.rs: `client.wait_for_signed_transaction(&txn, None, None)?;`
$DIR/sdk/compatibility/src/lib.rs: `env.coffer()
        .fund(currency, account.authentication_key(), start_amount)?;`
$DIR/sdk/compatibility/src/lib.rs: `env.coffer()
        .fund(currency, account_2.authentication_key(), start_amount)?;`
$DIR/sdk/compatibility/src/lib.rs: `client.submit(&txn)?;`
$DIR/sdk/compatibility/src/lib.rs: `client.submit(&txn)?;`
$DIR/sdk/compatibility/src/lib.rs: `client.wait_for_signed_transaction(&txn, None, None)?;`
$DIR/sdk/compatibility/src/lib.rs: `client.submit(&txn)?;`
$DIR/sdk/compatibility/src/lib.rs: `client.wait_for_signed_transaction(&txn, None, None)?;`
$DIR/sdk/compatibility/src/lib.rs: `env.coffer()
        .fund(currency, account.authentication_key(), start_amount)?;`
$DIR/sdk/compatibility/src/lib.rs: `client.submit(&txn)?;`
$DIR/sdk/compatibility/src/lib.rs: `client.wait_for_signed_transaction(&txn, None, None)?;`
$DIR/sdk/compatibility/src/lib.rs: `client.submit(&txn)?;`
$DIR/sdk/compatibility/src/lib.rs: `client.wait_for_signed_transaction(&txn, None, None)?;`
$DIR/sdk/compatibility/src/lib.rs: `.client()`
$DIR/sdk/compatibility/src/lib.rs: `.get_metadata()`
$DIR/sdk/compatibility/src/lib.rs: `.into_inner()`
$DIR/sdk/compatibility/src/lib.rs: `.client()`
$DIR/sdk/compatibility/src/lib.rs: `.get_metadata()`
$DIR/sdk/compatibility/src/lib.rs: `.into_inner()`
$DIR/sdk/compatibility/src/lib.rs: `.get_metadata_by_version(current_version.saturating_sub(1))`
$DIR/sdk/compatibility/src/lib.rs: `.saturating_sub(1)`
$DIR/sdk/compatibility/src/lib.rs: `.into_inner()`
$DIR/sdk/compatibility/src/lib.rs: `.client()`
$DIR/sdk/compatibility/src/lib.rs: `.get_metadata()`
$DIR/sdk/compatibility/src/lib.rs: `.into_inner()`
$DIR/sdk/compatibility/src/lib.rs: `.get_accumulator_consistency_proof(None, Some(metadata.version))`
$DIR/sdk/compatibility/src/lib.rs: `.into_inner()`
$DIR/sdk/compatibility/src/lib.rs: `.client()`
$DIR/sdk/compatibility/src/lib.rs: `.type_tag()`
$DIR/sdk/compatibility/src/lib.rs: `.type_tag()`
$DIR/sdk/compatibility/src/lib.rs: `.type_tag()`
$DIR/sdk/compatibility/src/lib.rs: `.type_tag()`
$DIR/sdk/compatibility/src/lib.rs: `.type_tag()`
$DIR/sdk/compatibility/src/lib.rs: `.type_tag()`
$DIR/sdk/compatibility/src/lib.rs: `.type_tag()`
$DIR/sdk/compatibility/src/lib.rs: `.type_tag()`
$DIR/sdk/compatibility/src/lib.rs: `.type_tag()`
$DIR/sdk/compatibility/src/lib.rs: `.type_tag()`
$DIR/sdk/compatibility/src/lib.rs: `.get_metadata()`
$DIR/sdk/compatibility/src/lib.rs: `.into_inner()`
$DIR/sdk/compatibility/src/lib.rs: `.code()`
$DIR/sdk/compatibility/src/lib.rs: `.split_whitespace()`
$DIR/sdk/compatibility/src/lib.rs: `.next()`
$DIR/sdk/compatibility/src/lib.rs: `.client()`
$DIR/sdk/compatibility/src/lib.rs: `.get_currencies()`
$DIR/sdk/compatibility/src/lib.rs: `.into_inner()`
$DIR/sdk/compatibility/src/lib.rs: `.client()`
$DIR/sdk/compatibility/src/lib.rs: `.get_currencies()`
$DIR/sdk/compatibility/src/lib.rs: `.into_inner()`
$DIR/sdk/compatibility/src/lib.rs: `.get_events(currency.mint_events_key, 0, 10)`
$DIR/sdk/compatibility/src/lib.rs: `.client()`
$DIR/sdk/compatibility/src/lib.rs: `.get_network_status()`
$DIR/sdk/compatibility/src/lib.rs: `.client()`
$DIR/sdk/compatibility/src/lib.rs: `.random_account()`
$DIR/sdk/compatibility/src/lib.rs: `.coffer()`
$DIR/sdk/compatibility/src/lib.rs: `.fund(currency, account.authentication_key(), amount)`
$DIR/sdk/compatibility/src/lib.rs: `.authentication_key()`
$DIR/sdk/compatibility/src/lib.rs: `.get_account(account.address())`
$DIR/sdk/compatibility/src/lib.rs: `.address()`
$DIR/sdk/compatibility/src/lib.rs: `.into_inner()`
$DIR/sdk/compatibility/src/lib.rs: `.find(|b| b.currency == currency)`
$DIR/sdk/compatibility/src/lib.rs: `.client()`
$DIR/sdk/compatibility/src/lib.rs: `.random_account()`
$DIR/sdk/compatibility/src/lib.rs: `.get_account(account.address())`
$DIR/sdk/compatibility/src/lib.rs: `.address()`
$DIR/sdk/compatibility/src/lib.rs: `.into_parts()`
$DIR/sdk/compatibility/src/lib.rs: `.get_account_by_version(account.address(), state_1.version)`
$DIR/sdk/compatibility/src/lib.rs: `.address()`
$DIR/sdk/compatibility/src/lib.rs: `.into_inner()`
$DIR/sdk/compatibility/src/lib.rs: `.coffer()`
$DIR/sdk/compatibility/src/lib.rs: `.fund(Currency::XUS, account.authentication_key(), 1000)`
$DIR/sdk/compatibility/src/lib.rs: `.authentication_key()`
$DIR/sdk/compatibility/src/lib.rs: `.get_account(account.address())`
$DIR/sdk/compatibility/src/lib.rs: `.address()`
$DIR/sdk/compatibility/src/lib.rs: `.into_parts()`
$DIR/sdk/compatibility/src/lib.rs: `.get_account_by_version(account.address(), state_3.version)`
$DIR/sdk/compatibility/src/lib.rs: `.address()`
$DIR/sdk/compatibility/src/lib.rs: `.into_inner()`
$DIR/sdk/compatibility/src/lib.rs: `.get_account_by_version(account.address(), state_1.version)`
$DIR/sdk/compatibility/src/lib.rs: `.address()`
$DIR/sdk/compatibility/src/lib.rs: `.into_inner()`
$DIR/sdk/compatibility/src/lib.rs: `.client()`
$DIR/sdk/compatibility/src/lib.rs: `.random_account()`
$DIR/sdk/compatibility/src/lib.rs: `.random_account()`
$DIR/sdk/compatibility/src/lib.rs: `.coffer()`
$DIR/sdk/compatibility/src/lib.rs: `.fund(Currency::XUS, account_1.authentication_key(), 1000)`
$DIR/sdk/compatibility/src/lib.rs: `.authentication_key()`
$DIR/sdk/compatibility/src/lib.rs: `.coffer()`
$DIR/sdk/compatibility/src/lib.rs: `.fund(Currency::XUS, account_2.authentication_key(), 1000)`
$DIR/sdk/compatibility/src/lib.rs: `.authentication_key()`
$DIR/sdk/compatibility/src/lib.rs: `.sign_with_transaction_builder(env.transaction_factory().peer_to_peer(
            Currency::XUS,
            account_2.address(),
            100,
        ))`
$DIR/sdk/compatibility/src/lib.rs: `.transaction_factory()`
$DIR/sdk/compatibility/src/lib.rs: `.peer_to_peer(
            Currency::XUS,
            account_2.address(),
            100,
        )`
$DIR/sdk/compatibility/src/lib.rs: `.address()`
$DIR/sdk/compatibility/src/lib.rs: `.submit(&txn)`
$DIR/sdk/compatibility/src/lib.rs: `.wait_for_signed_transaction(&txn, None, None)`
$DIR/sdk/compatibility/src/lib.rs: `.get_state_proof(0)`
$DIR/sdk/compatibility/src/lib.rs: `.into_inner()`
$DIR/sdk/compatibility/src/lib.rs: `.ledger_info()`
$DIR/sdk/compatibility/src/lib.rs: `.version()`
$DIR/sdk/compatibility/src/lib.rs: `.get_account_transactions_with_proofs(
            account_1.address(),
            0,
            100,
            true,
            Some(ledger_version),
        )`
$DIR/sdk/compatibility/src/lib.rs: `.address()`
$DIR/sdk/compatibility/src/lib.rs: `.into_inner()`
$DIR/sdk/compatibility/src/lib.rs: `.verify(
        latest_li.ledger_info(),
        account_1.address(),
        0,
        100,
        true,
        ledger_version,
    )`
$DIR/sdk/compatibility/src/lib.rs: `.ledger_info()`
$DIR/sdk/compatibility/src/lib.rs: `.address()`
$DIR/sdk/compatibility/src/lib.rs: `.client()`
$DIR/sdk/compatibility/src/lib.rs: `.batch(batch)`
$DIR/sdk/compatibility/src/lib.rs: `.into_iter()`
$DIR/sdk/compatibility/src/lib.rs: `.next()`
$DIR/sdk/compatibility/src/lib.rs: `.into_inner()`
$DIR/sdk/compatibility/src/lib.rs: `.next()`
$DIR/sdk/compatibility/src/lib.rs: `.into_inner()`
$DIR/sdk/compatibility/src/lib.rs: `.next()`
$DIR/sdk/compatibility/src/lib.rs: `.into_inner()`
$DIR/sdk/compatibility/src/lib.rs: `.try_into_get_state_proof()`
$DIR/sdk/compatibility/src/lib.rs: `.try_into_get_account_state_with_proof()`
$DIR/sdk/compatibility/src/lib.rs: `.try_into_get_event_by_version_with_proof()`
$DIR/sdk/compatibility/src/lib.rs: `.ledger_info()`
$DIR/sdk/compatibility/src/lib.rs: `.get_diem_block_resource()`
$DIR/sdk/compatibility/src/lib.rs: `.height()`
$DIR/sdk/compatibility/src/lib.rs: `.verify(
        latest_li,
        &new_block_event_key(),
        Some(block_height),
        latest_li.version(),
    )`
$DIR/sdk/compatibility/src/lib.rs: `.version()`
$DIR/sdk/compatibility/src/lib.rs: `.client()`
$DIR/sdk/compatibility/src/lib.rs: `.random_account()`
$DIR/sdk/compatibility/src/lib.rs: `.coffer()`
$DIR/sdk/compatibility/src/lib.rs: `.fund(currency, account.authentication_key(), amount)`
$DIR/sdk/compatibility/src/lib.rs: `.authentication_key()`
$DIR/sdk/compatibility/src/lib.rs: `.random_account()`
$DIR/sdk/compatibility/src/lib.rs: `.sign_with_transaction_builder(env.transaction_factory().create_child_vasp_account(
            currency,
            child_account.authentication_key(),
            false,
            0,
        ))`
$DIR/sdk/compatibility/src/lib.rs: `.transaction_factory()`
$DIR/sdk/compatibility/src/lib.rs: `.create_child_vasp_account(
            currency,
            child_account.authentication_key(),
            false,
            0,
        )`
$DIR/sdk/compatibility/src/lib.rs: `.authentication_key()`
$DIR/sdk/compatibility/src/lib.rs: `.submit(&txn)`
$DIR/sdk/compatibility/src/lib.rs: `.wait_for_signed_transaction(&txn, None, None)`
$DIR/sdk/compatibility/src/lib.rs: `.get_account(child_account.address())`
$DIR/sdk/compatibility/src/lib.rs: `.address()`
$DIR/sdk/compatibility/src/lib.rs: `.into_inner()`
$DIR/sdk/compatibility/src/lib.rs: `.find(|b| b.currency == currency)`
$DIR/sdk/compatibility/src/lib.rs: `.client()`
$DIR/sdk/compatibility/src/lib.rs: `.random_account()`
$DIR/sdk/compatibility/src/lib.rs: `.coffer()`
$DIR/sdk/compatibility/src/lib.rs: `.fund(currency, account.authentication_key(), amount)`
$DIR/sdk/compatibility/src/lib.rs: `.authentication_key()`
$DIR/sdk/compatibility/src/lib.rs: `.get_account(account.address())`
$DIR/sdk/compatibility/src/lib.rs: `.address()`
$DIR/sdk/compatibility/src/lib.rs: `.into_inner()`
$DIR/sdk/compatibility/src/lib.rs: `.sign_with_transaction_builder(
        env.transaction_factory()
            .add_currency_to_account(Currency::XDX),
    )`
$DIR/sdk/compatibility/src/lib.rs: `.transaction_factory()`
$DIR/sdk/compatibility/src/lib.rs: `.add_currency_to_account(Currency::XDX)`
$DIR/sdk/compatibility/src/lib.rs: `.submit(&txn)`
$DIR/sdk/compatibility/src/lib.rs: `.wait_for_signed_transaction(&txn, None, None)`
$DIR/sdk/compatibility/src/lib.rs: `.get_account(account.address())`
$DIR/sdk/compatibility/src/lib.rs: `.address()`
$DIR/sdk/compatibility/src/lib.rs: `.into_inner()`
$DIR/sdk/compatibility/src/lib.rs: `.find(|b| b.currency == Currency::XDX)`
$DIR/sdk/compatibility/src/lib.rs: `.client()`
$DIR/sdk/compatibility/src/lib.rs: `.random_account()`
$DIR/sdk/compatibility/src/lib.rs: `.coffer()`
$DIR/sdk/compatibility/src/lib.rs: `.fund(currency, account.authentication_key(), start_amount)`
$DIR/sdk/compatibility/src/lib.rs: `.authentication_key()`
$DIR/sdk/compatibility/src/lib.rs: `.random_account()`
$DIR/sdk/compatibility/src/lib.rs: `.coffer()`
$DIR/sdk/compatibility/src/lib.rs: `.fund(currency, account_2.authentication_key(), start_amount)`
$DIR/sdk/compatibility/src/lib.rs: `.authentication_key()`
$DIR/sdk/compatibility/src/lib.rs: `.sign_with_transaction_builder(env.transaction_factory().peer_to_peer(
        currency,
        account_2.address(),
        transfer_amount,
    ))`
$DIR/sdk/compatibility/src/lib.rs: `.transaction_factory()`
$DIR/sdk/compatibility/src/lib.rs: `.peer_to_peer(
        currency,
        account_2.address(),
        transfer_amount,
    )`
$DIR/sdk/compatibility/src/lib.rs: `.address()`
$DIR/sdk/compatibility/src/lib.rs: `.submit(&txn)`
$DIR/sdk/compatibility/src/lib.rs: `.wait_for_signed_transaction(&txn, None, None)`
$DIR/sdk/compatibility/src/lib.rs: `.get_account(account.address())`
$DIR/sdk/compatibility/src/lib.rs: `.address()`
$DIR/sdk/compatibility/src/lib.rs: `.into_inner()`
$DIR/sdk/compatibility/src/lib.rs: `.find(|b| b.currency == currency)`
$DIR/sdk/compatibility/src/lib.rs: `.get_account(account_2.address())`
$DIR/sdk/compatibility/src/lib.rs: `.address()`
$DIR/sdk/compatibility/src/lib.rs: `.into_inner()`
$DIR/sdk/compatibility/src/lib.rs: `.find(|b| b.currency == currency)`
$DIR/sdk/compatibility/src/lib.rs: `.client()`
$DIR/sdk/compatibility/src/lib.rs: `.random_account()`
$DIR/sdk/compatibility/src/lib.rs: `.coffer()`
$DIR/sdk/compatibility/src/lib.rs: `.fund(currency, account.authentication_key(), amount)`
$DIR/sdk/compatibility/src/lib.rs: `.authentication_key()`
$DIR/sdk/compatibility/src/lib.rs: `.sign_with_transaction_builder(
        env.transaction_factory()
            .rotate_authentication_key(rotated_key.authentication_key()),
    )`
$DIR/sdk/compatibility/src/lib.rs: `.transaction_factory()`
$DIR/sdk/compatibility/src/lib.rs: `.rotate_authentication_key(rotated_key.authentication_key())`
$DIR/sdk/compatibility/src/lib.rs: `.authentication_key()`
$DIR/sdk/compatibility/src/lib.rs: `.submit(&txn)`
$DIR/sdk/compatibility/src/lib.rs: `.wait_for_signed_transaction(&txn, None, None)`
$DIR/sdk/compatibility/src/lib.rs: `.get_account(account.address())`
$DIR/sdk/compatibility/src/lib.rs: `.address()`
$DIR/sdk/compatibility/src/lib.rs: `.into_inner()`
$DIR/sdk/compatibility/src/lib.rs: `.rotate_key(rotated_key)`
$DIR/sdk/compatibility/src/lib.rs: `.sign_with_transaction_builder(
        env.transaction_factory()
            .rotate_authentication_key(old_key.authentication_key()),
    )`
$DIR/sdk/compatibility/src/lib.rs: `.transaction_factory()`
$DIR/sdk/compatibility/src/lib.rs: `.rotate_authentication_key(old_key.authentication_key())`
$DIR/sdk/compatibility/src/lib.rs: `.authentication_key()`
$DIR/sdk/compatibility/src/lib.rs: `.submit(&txn)`
$DIR/sdk/compatibility/src/lib.rs: `.wait_for_signed_transaction(&txn, None, None)`
$DIR/sdk/compatibility/src/lib.rs: `.get_account(account.address())`
$DIR/sdk/compatibility/src/lib.rs: `.address()`
$DIR/sdk/compatibility/src/lib.rs: `.into_inner()`
$DIR/sdk/compatibility/src/lib.rs: `.client()`
$DIR/sdk/compatibility/src/lib.rs: `.get_metadata()`
$DIR/sdk/compatibility/src/lib.rs: `.into_inner()`
$DIR/sdk/compatibility/src/lib.rs: `.random_account()`
$DIR/sdk/compatibility/src/lib.rs: `.coffer()`
$DIR/sdk/compatibility/src/lib.rs: `.fund(currency, account.authentication_key(), start_amount)`
$DIR/sdk/compatibility/src/lib.rs: `.authentication_key()`
$DIR/sdk/compatibility/src/lib.rs: `.random_account()`
$DIR/sdk/compatibility/src/lib.rs: `.coffer()`
$DIR/sdk/compatibility/src/lib.rs: `.fund(currency, account_2.authentication_key(), start_amount)`
$DIR/sdk/compatibility/src/lib.rs: `.authentication_key()`
$DIR/sdk/compatibility/src/lib.rs: `.sign_with_transaction_builder(env.transaction_factory().peer_to_peer(
        currency,
        account_2.address(),
        transfer_amount,
    ))`
$DIR/sdk/compatibility/src/lib.rs: `.transaction_factory()`
$DIR/sdk/compatibility/src/lib.rs: `.peer_to_peer(
        currency,
        account_2.address(),
        transfer_amount,
    )`
$DIR/sdk/compatibility/src/lib.rs: `.address()`
$DIR/sdk/compatibility/src/lib.rs: `.submit(&txn)`
$DIR/sdk/compatibility/src/lib.rs: `.sign_with_transaction_builder(
        env.transaction_factory().rotate_dual_attestation_info(
            "https://example.com".as_bytes().to_vec(),
            dual_attestation_public_key.as_bytes().to_vec(),
        ),
    )`
$DIR/sdk/compatibility/src/lib.rs: `.transaction_factory()`
$DIR/sdk/compatibility/src/lib.rs: `.rotate_dual_attestation_info(
            "https://example.com".as_bytes().to_vec(),
            dual_attestation_public_key.as_bytes().to_vec(),
        )`
$DIR/sdk/compatibility/src/lib.rs: `.submit(&txn)`
$DIR/sdk/compatibility/src/lib.rs: `.wait_for_signed_transaction(&txn, None, None)`
$DIR/sdk/compatibility/src/lib.rs: `.address()`
$DIR/sdk/compatibility/src/lib.rs: `.sign(message.message(), &dual_attestation_public_key)`
$DIR/sdk/compatibility/src/lib.rs: `.message()`
$DIR/sdk/compatibility/src/lib.rs: `.to_bytes()`
$DIR/sdk/compatibility/src/lib.rs: `.sign_with_transaction_builder(
        env.transaction_factory().peer_to_peer_with_metadata(
            currency,
            account_2.address(),
            transfer_amount,
            metadata.as_bytes().to_vec(),
            sig,
        ),
    )`
$DIR/sdk/compatibility/src/lib.rs: `.transaction_factory()`
$DIR/sdk/compatibility/src/lib.rs: `.peer_to_peer_with_metadata(
            currency,
            account_2.address(),
            transfer_amount,
            metadata.as_bytes().to_vec(),
            sig,
        )`
$DIR/sdk/compatibility/src/lib.rs: `.address()`
$DIR/sdk/compatibility/src/lib.rs: `.submit(&txn)`
$DIR/sdk/compatibility/src/lib.rs: `.wait_for_signed_transaction(&txn, None, None)`
$DIR/sdk/compatibility/src/lib.rs: `.get_account(account.address())`
$DIR/sdk/compatibility/src/lib.rs: `.address()`
$DIR/sdk/compatibility/src/lib.rs: `.into_inner()`
$DIR/sdk/compatibility/src/lib.rs: `.find(|b| b.currency == currency)`
$DIR/sdk/compatibility/src/lib.rs: `.get_account(account_2.address())`
$DIR/sdk/compatibility/src/lib.rs: `.address()`
$DIR/sdk/compatibility/src/lib.rs: `.into_inner()`
$DIR/sdk/compatibility/src/lib.rs: `.find(|b| b.currency == currency)`
$DIR/sdk/compatibility/src/lib.rs: `.client()`
$DIR/sdk/compatibility/src/lib.rs: `.get_metadata()`
$DIR/sdk/compatibility/src/lib.rs: `.into_inner()`
$DIR/sdk/compatibility/src/lib.rs: `.random_account()`
$DIR/sdk/compatibility/src/lib.rs: `.coffer()`
$DIR/sdk/compatibility/src/lib.rs: `.fund(currency, account.authentication_key(), start_amount)`
$DIR/sdk/compatibility/src/lib.rs: `.authentication_key()`
$DIR/sdk/compatibility/src/lib.rs: `.random_account()`
$DIR/sdk/compatibility/src/lib.rs: `.sign_with_transaction_builder(env.transaction_factory().create_child_vasp_account(
            currency,
            child_account.authentication_key(),
            false,
            0,
        ))`
$DIR/sdk/compatibility/src/lib.rs: `.transaction_factory()`
$DIR/sdk/compatibility/src/lib.rs: `.create_child_vasp_account(
            currency,
            child_account.authentication_key(),
            false,
            0,
        )`
$DIR/sdk/compatibility/src/lib.rs: `.authentication_key()`
$DIR/sdk/compatibility/src/lib.rs: `.submit(&txn)`
$DIR/sdk/compatibility/src/lib.rs: `.wait_for_signed_transaction(&txn, None, None)`
$DIR/sdk/compatibility/src/lib.rs: `.sign_with_transaction_builder(env.transaction_factory().peer_to_peer(
        currency,
        child_account.address(),
        transfer_amount,
    ))`
$DIR/sdk/compatibility/src/lib.rs: `.transaction_factory()`
$DIR/sdk/compatibility/src/lib.rs: `.peer_to_peer(
        currency,
        child_account.address(),
        transfer_amount,
    )`
$DIR/sdk/compatibility/src/lib.rs: `.address()`
$DIR/sdk/compatibility/src/lib.rs: `.submit(&txn)`
$DIR/sdk/compatibility/src/lib.rs: `.wait_for_signed_transaction(&txn, None, None)`
$DIR/sdk/compatibility/src/lib.rs: `.get_account(account.address())`
$DIR/sdk/compatibility/src/lib.rs: `.address()`
$DIR/sdk/compatibility/src/lib.rs: `.into_inner()`
$DIR/sdk/compatibility/src/lib.rs: `.find(|b| b.currency == currency)`
$DIR/sdk/compatibility/src/lib.rs: `.get_account(child_account.address())`
$DIR/sdk/compatibility/src/lib.rs: `.address()`
$DIR/sdk/compatibility/src/lib.rs: `.into_inner()`
$DIR/sdk/compatibility/src/lib.rs: `.find(|b| b.currency == currency)`
$DIR/sdk/offchain/src/identifier.rs: `hex_address.push_str(ACCOUNT_ADDRESS);`
$DIR/sdk/offchain/src/identifier.rs: `.push_str(ACCOUNT_ADDRESS)`
$DIR/sdk/offchain/src/identifier.rs: `.to_encoded_string()`
$DIR/sdk/offchain/src/identifier.rs: `.to_base32()`
$DIR/sdk/offchain/src/types.rs: `serde_json::from_value::<KycDataObjectVersion>(invalid_version).unwrap_err();`
$DIR/secure/net/src/lib.rs: `client.write(&data).unwrap();`
$DIR/secure/net/src/lib.rs: `server.write(&data).unwrap();`
$DIR/secure/net/src/lib.rs: `client.write(&data).unwrap();`
$DIR/secure/net/src/lib.rs: `client.shutdown().unwrap();`
$DIR/secure/net/src/lib.rs: `client.write(&data).unwrap();`
$DIR/secure/net/src/lib.rs: `client.write(&data).unwrap();`
$DIR/secure/net/src/lib.rs: `server.shutdown().unwrap();`
$DIR/secure/net/src/lib.rs: `while client.write(&data).is_ok() {}`
$DIR/secure/net/src/lib.rs: `client.write(&data).unwrap();`
$DIR/secure/net/src/lib.rs: `client.write(&data1).unwrap();`
$DIR/secure/net/src/lib.rs: `client.write(&data2).unwrap();`
$DIR/secure/net/src/lib.rs: `client.write(&data1).unwrap();`
$DIR/secure/net/src/lib.rs: `server.read().unwrap_err();`
$DIR/secure/net/src/lib.rs: `client2.write(&data2).unwrap();`
$DIR/secure/net/src/lib.rs: `client.write(&data1).unwrap();`
$DIR/secure/net/src/lib.rs: `client.read().unwrap_err();`
$DIR/secure/net/src/lib.rs: `server.listener = None;`
$DIR/secure/net/src/lib.rs: `client.write(&data2).unwrap();`
$DIR/secure/net/src/lib.rs: `.write(&data)`
$DIR/secure/net/src/lib.rs: `.read()`
$DIR/secure/net/src/lib.rs: `.write(&data)`
$DIR/secure/net/src/lib.rs: `.read()`
$DIR/secure/net/src/lib.rs: `.write(&data)`
$DIR/secure/net/src/lib.rs: `.read()`
$DIR/secure/net/src/lib.rs: `.shutdown()`
$DIR/secure/net/src/lib.rs: `.write(&data)`
$DIR/secure/net/src/lib.rs: `.read()`
$DIR/secure/net/src/lib.rs: `.write(&data)`
$DIR/secure/net/src/lib.rs: `.read()`
$DIR/secure/net/src/lib.rs: `.shutdown()`
$DIR/secure/net/src/lib.rs: `.write(&data)`
$DIR/secure/net/src/lib.rs: `.is_ok()`
$DIR/secure/net/src/lib.rs: `.write(&data)`
$DIR/secure/net/src/lib.rs: `.read()`
$DIR/secure/net/src/lib.rs: `.write(&data1)`
$DIR/secure/net/src/lib.rs: `.write(&data2)`
$DIR/secure/net/src/lib.rs: `.read()`
$DIR/secure/net/src/lib.rs: `.read()`
$DIR/secure/net/src/lib.rs: `.write(&data1)`
$DIR/secure/net/src/lib.rs: `.read()`
$DIR/secure/net/src/lib.rs: `.read()`
$DIR/secure/net/src/lib.rs: `.write(&data2)`
$DIR/secure/net/src/lib.rs: `.read()`
$DIR/secure/net/src/lib.rs: `.write(&data1)`
$DIR/secure/net/src/lib.rs: `.read()`
$DIR/secure/net/src/lib.rs: `.read()`
$DIR/secure/net/src/lib.rs: `.write(&data2)`
$DIR/secure/net/src/lib.rs: `.read()`
$DIR/secure/storage/github/src/lib.rs: `github.put(path, &value1_encoded).unwrap();`
$DIR/secure/storage/github/src/lib.rs: `github.put(path, &value2_encoded).unwrap();`
$DIR/secure/storage/github/src/lib.rs: `github.delete_file(path).unwrap();`
$DIR/secure/storage/github/src/lib.rs: `github.put(path1, &value1_encoded).unwrap();`
$DIR/secure/storage/github/src/lib.rs: `github.put(path2, &value2_encoded).unwrap();`
$DIR/secure/storage/github/src/lib.rs: `github.delete_file(path1).unwrap();`
$DIR/secure/storage/github/src/lib.rs: `github.get_directory(path1_root).unwrap_err();`
$DIR/secure/storage/github/src/lib.rs: `github.delete_file(path2).unwrap();`
$DIR/secure/storage/github/src/lib.rs: `github.put(file0, &value_encoded).unwrap();`
$DIR/secure/storage/github/src/lib.rs: `github.put(file1, &value_encoded).unwrap();`
$DIR/secure/storage/github/src/lib.rs: `github.delete_directory(root).unwrap();`
$DIR/secure/storage/github/src/lib.rs: `github.get_file(file0).unwrap_err();`
$DIR/secure/storage/github/src/lib.rs: `.into()`
$DIR/secure/storage/github/src/lib.rs: `.into()`
$DIR/secure/storage/github/src/lib.rs: `.into()`
$DIR/secure/storage/github/src/lib.rs: `.into()`
$DIR/secure/storage/github/src/lib.rs: `.get_file(path)`
$DIR/secure/storage/github/src/lib.rs: `.put(path, &value1_encoded)`
$DIR/secure/storage/github/src/lib.rs: `.get_file(path)`
$DIR/secure/storage/github/src/lib.rs: `.put(path, &value2_encoded)`
$DIR/secure/storage/github/src/lib.rs: `.get_file(path)`
$DIR/secure/storage/github/src/lib.rs: `.delete_file(path)`
$DIR/secure/storage/github/src/lib.rs: `.get_file(path)`
$DIR/secure/storage/github/src/lib.rs: `.into()`
$DIR/secure/storage/github/src/lib.rs: `.into()`
$DIR/secure/storage/github/src/lib.rs: `.into()`
$DIR/secure/storage/github/src/lib.rs: `.into()`
$DIR/secure/storage/github/src/lib.rs: `.put(path1, &value1_encoded)`
$DIR/secure/storage/github/src/lib.rs: `.put(path2, &value2_encoded)`
$DIR/secure/storage/github/src/lib.rs: `.get_file(path1)`
$DIR/secure/storage/github/src/lib.rs: `.get_file(path2)`
$DIR/secure/storage/github/src/lib.rs: `.delete_file(path1)`
$DIR/secure/storage/github/src/lib.rs: `.get_directory(path1_root)`
$DIR/secure/storage/github/src/lib.rs: `.get_file(path2)`
$DIR/secure/storage/github/src/lib.rs: `.delete_file(path2)`
$DIR/secure/storage/github/src/lib.rs: `.get_directory(path2_root)`
$DIR/secure/storage/github/src/lib.rs: `.into()`
$DIR/secure/storage/github/src/lib.rs: `.into()`
$DIR/secure/storage/github/src/lib.rs: `.into()`
$DIR/secure/storage/github/src/lib.rs: `.into()`
$DIR/secure/storage/github/src/lib.rs: `.put(file0, &value_encoded)`
$DIR/secure/storage/github/src/lib.rs: `.put(file1, &value_encoded)`
$DIR/secure/storage/github/src/lib.rs: `.get_file(file0)`
$DIR/secure/storage/github/src/lib.rs: `.get_file(file1)`
$DIR/secure/storage/github/src/lib.rs: `.delete_directory(root)`
$DIR/secure/storage/github/src/lib.rs: `.get_file(file0)`
$DIR/secure/storage/github/src/lib.rs: `.get_file(file1)`
$DIR/secure/storage/github/src/lib.rs: `.into()`
$DIR/secure/storage/github/src/lib.rs: `.into()`
$DIR/secure/storage/github/src/lib.rs: `.into()`
$DIR/secure/storage/github/src/lib.rs: `.into()`
$DIR/secure/storage/github/src/lib.rs: `.get_branches()`
$DIR/secure/storage/src/namespaced.rs: `default.set(key, 0).unwrap();`
$DIR/secure/storage/src/namespaced.rs: `nss0.set(key, 1).unwrap();`
$DIR/secure/storage/src/namespaced.rs: `nss1.set(key, 2).unwrap();`
$DIR/secure/storage/src/namespaced.rs: `nss.set(key, 1).unwrap();`
$DIR/secure/storage/src/namespaced.rs: `default.get::<u64>(key).unwrap_err();`
$DIR/secure/storage/src/namespaced.rs: `.path()`
$DIR/secure/storage/src/namespaced.rs: `.set(key, 0)`
$DIR/secure/storage/src/namespaced.rs: `.set(key, 1)`
$DIR/secure/storage/src/namespaced.rs: `.set(key, 2)`
$DIR/secure/storage/src/namespaced.rs: `.path()`
$DIR/secure/storage/src/namespaced.rs: `.set(key, 1)`
$DIR/secure/storage/src/namespaced.rs: `.get::<u64>(key)`
$DIR/secure/storage/src/tests/github.rs: `.into()`
$DIR/secure/storage/src/tests/github.rs: `.into()`
$DIR/secure/storage/src/tests/github.rs: `.into()`
$DIR/secure/storage/src/tests/github.rs: `.into()`
$DIR/secure/storage/src/tests/on_disk.rs: `.path()`
$DIR/secure/storage/src/tests/vault.rs: `storage.reset_and_clear().unwrap();`
$DIR/secure/storage/src/tests/vault.rs: `test();`
$DIR/secure/storage/src/tests/vault.rs: `storage.reset_and_clear().unwrap();`
$DIR/secure/storage/src/tests/vault.rs: `.is_none()`
$DIR/secure/storage/src/tests/vault.rs: `.reset_and_clear()`
$DIR/secure/storage/src/tests/vault.rs: `.reset_and_clear()`
$DIR/secure/storage/vault/src/dev.rs: `vr.client().unsealed().unwrap();`
$DIR/secure/storage/vault/src/dev.rs: `Client::new(host, ROOT_TOKEN.to_string(), None, None, None)
            .unsealed()
            .unwrap();`
$DIR/secure/storage/vault/src/dev.rs: `.client()`
$DIR/secure/storage/vault/src/dev.rs: `.unsealed()`
$DIR/secure/storage/vault/src/dev.rs: `.unsealed()`
$DIR/state-sync/inter-component/consensus-notifications/src/lib.rs: `consensus_listener.notification_receiver.close();`
$DIR/state-sync/inter-component/consensus-notifications/src/lib.rs: `std::thread::sleep(Duration::from_millis(1000));`
$DIR/state-sync/inter-component/consensus-notifications/src/lib.rs: `.enter()`
$DIR/state-sync/inter-component/consensus-notifications/src/lib.rs: `.notify_new_commit(vec![create_user_transaction()], vec![])`
$DIR/state-sync/inter-component/consensus-notifications/src/lib.rs: `.notification_receiver.close()`
$DIR/state-sync/inter-component/consensus-notifications/src/lib.rs: `.notify_new_commit(vec![create_user_transaction()], vec![])`
$DIR/state-sync/inter-component/consensus-notifications/src/lib.rs: `.enter()`
$DIR/state-sync/inter-component/consensus-notifications/src/lib.rs: `.notify_new_commit(vec![], vec![])`
$DIR/state-sync/inter-component/consensus-notifications/src/lib.rs: `.enter()`
$DIR/state-sync/inter-component/consensus-notifications/src/lib.rs: `.notify_new_commit(transactions.clone(), reconfiguration_events.clone())`
$DIR/state-sync/inter-component/consensus-notifications/src/lib.rs: `.select_next_some()`
$DIR/state-sync/inter-component/consensus-notifications/src/lib.rs: `.now_or_never()`
$DIR/state-sync/inter-component/consensus-notifications/src/lib.rs: `.sync_to_target(create_ledger_info())`
$DIR/state-sync/inter-component/consensus-notifications/src/lib.rs: `.select_next_some()`
$DIR/state-sync/inter-component/consensus-notifications/src/lib.rs: `.now_or_never()`
$DIR/state-sync/inter-component/consensus-notifications/src/lib.rs: `.enter()`
$DIR/state-sync/inter-component/consensus-notifications/src/lib.rs: `.select_next_some()`
$DIR/state-sync/inter-component/consensus-notifications/src/lib.rs: `.now_or_never()`
$DIR/state-sync/inter-component/consensus-notifications/src/lib.rs: `.respond_to_commit_notification(commit_notification, Ok(()))`
$DIR/state-sync/inter-component/consensus-notifications/src/lib.rs: `.respond_to_sync_notification(
                        sync_notification,
                        Err(Error::UnexpectedErrorEncountered("Oops?".into())),
                    )`
$DIR/state-sync/inter-component/consensus-notifications/src/lib.rs: `.into()`
$DIR/state-sync/inter-component/consensus-notifications/src/lib.rs: `.notify_new_commit(vec![create_user_transaction()], vec![])`
$DIR/state-sync/inter-component/consensus-notifications/src/lib.rs: `.sync_to_target(create_ledger_info())`
$DIR/state-sync/inter-component/event-notifications/src/tests.rs: `notify_initial_configs(&mut event_service, version);`
$DIR/state-sync/inter-component/event-notifications/src/tests.rs: `verify_reconfig_notifications_received(
            vec![&mut listener_1, &mut listener_2, &mut listener_3],
            version,
            epoch,
        );`
$DIR/state-sync/inter-component/event-notifications/src/tests.rs: `notify_events(&mut event_service, version, vec![reconfig_event.clone()]);`
$DIR/state-sync/inter-component/event-notifications/src/tests.rs: `verify_reconfig_notifications_received(
            vec![&mut listener_1, &mut listener_2, &mut listener_3],
            version,
            epoch,
        );`
$DIR/state-sync/inter-component/event-notifications/src/tests.rs: `notify_events(&mut event_service, 0, vec![reconfig_event.clone()]);`
$DIR/state-sync/inter-component/event-notifications/src/tests.rs: `notify_initial_configs(&mut event_service, 0);`
$DIR/state-sync/inter-component/event-notifications/src/tests.rs: `notify_initial_configs(&mut event_service, 0);`
$DIR/state-sync/inter-component/event-notifications/src/tests.rs: `verify_reconfig_notifications_received(
        vec![&mut reconfig_listener_1, &mut reconfig_listener_2],
        0,
        1,
    );`
$DIR/state-sync/inter-component/event-notifications/src/tests.rs: `verify_no_event_notifications(vec![
        &mut event_listener_1,
        &mut event_listener_2,
        &mut event_listener_3,
    ]);`
$DIR/state-sync/inter-component/event-notifications/src/tests.rs: `notify_events(&mut event_service, 0, vec![reconfig_event.clone()]);`
$DIR/state-sync/inter-component/event-notifications/src/tests.rs: `verify_reconfig_notifications_received(
        vec![&mut reconfig_listener_1, &mut reconfig_listener_2],
        0,
        1,
    );`
$DIR/state-sync/inter-component/event-notifications/src/tests.rs: `verify_event_notification_received(
        vec![&mut event_listener_3],
        0,
        vec![reconfig_event.clone()],
    );`
$DIR/state-sync/inter-component/event-notifications/src/tests.rs: `verify_no_event_notifications(vec![&mut event_listener_1, &mut event_listener_2]);`
$DIR/state-sync/inter-component/event-notifications/src/tests.rs: `notify_events(
        &mut event_service,
        0,
        vec![event_1.clone(), event_2.clone(), reconfig_event.clone()],
    );`
$DIR/state-sync/inter-component/event-notifications/src/tests.rs: `verify_reconfig_notifications_received(
        vec![&mut reconfig_listener_1, &mut reconfig_listener_2],
        0,
        1,
    );`
$DIR/state-sync/inter-component/event-notifications/src/tests.rs: `verify_event_notification_received(vec![&mut event_listener_1], 0, vec![event_1.clone()]);`
$DIR/state-sync/inter-component/event-notifications/src/tests.rs: `verify_event_notification_received(
        vec![&mut event_listener_2],
        0,
        vec![event_1.clone(), event_2],
    );`
$DIR/state-sync/inter-component/event-notifications/src/tests.rs: `verify_event_notification_received(vec![&mut event_listener_3], 0, vec![reconfig_event]);`
$DIR/state-sync/inter-component/event-notifications/src/tests.rs: `notify_events(&mut event_service, 0, vec![event_1.clone()]);`
$DIR/state-sync/inter-component/event-notifications/src/tests.rs: `verify_event_notification_received(
        vec![&mut event_listener_1, &mut event_listener_2],
        0,
        vec![event_1],
    );`
$DIR/state-sync/inter-component/event-notifications/src/tests.rs: `verify_no_reconfig_notifications(vec![&mut reconfig_listener_1, &mut reconfig_listener_2]);`
$DIR/state-sync/inter-component/event-notifications/src/tests.rs: `notify_events(&mut event_service, version, vec![event_1.clone()]);`
$DIR/state-sync/inter-component/event-notifications/src/tests.rs: `notify_events(
            &mut event_service,
            version,
            vec![event_2.clone(), event_1.clone()],
        );`
$DIR/state-sync/inter-component/event-notifications/src/tests.rs: `notify_events(&mut event_service, version, vec![event_3.clone()]);`
$DIR/state-sync/inter-component/event-notifications/src/tests.rs: `notify_events(&mut event_service, version, vec![event_1.clone()]);`
$DIR/state-sync/inter-component/event-notifications/src/tests.rs: `verify_event_notification_received(
        vec![&mut listener_1, &mut listener_2],
        version,
        vec![event_1],
    );`
$DIR/state-sync/inter-component/event-notifications/src/tests.rs: `verify_no_event_notifications(vec![&mut listener_1, &mut listener_2, &mut listener_3]);`
$DIR/state-sync/inter-component/event-notifications/src/tests.rs: `notify_events(
        &mut event_service,
        version,
        vec![event_2.clone(), event_3.clone()],
    );`
$DIR/state-sync/inter-component/event-notifications/src/tests.rs: `verify_event_notification_received(vec![&mut listener_2], version, vec![event_2.clone()]);`
$DIR/state-sync/inter-component/event-notifications/src/tests.rs: `verify_event_notification_received(vec![&mut listener_3], version, vec![event_2, event_3]);`
$DIR/state-sync/inter-component/event-notifications/src/tests.rs: `notify_events(&mut event_service, version, vec![event_5]);`
$DIR/state-sync/inter-component/event-notifications/src/tests.rs: `notify_events(
        &mut event_service,
        1,
        vec![create_test_event(create_random_event_key())],
    );`
$DIR/state-sync/inter-component/event-notifications/src/tests.rs: `.subscribe_to_reconfigurations()`
$DIR/state-sync/inter-component/event-notifications/src/tests.rs: `.subscribe_to_reconfigurations()`
$DIR/state-sync/inter-component/event-notifications/src/tests.rs: `.subscribe_to_reconfigurations()`
$DIR/state-sync/inter-component/event-notifications/src/tests.rs: `.subscribe_to_reconfigurations()`
$DIR/state-sync/inter-component/event-notifications/src/tests.rs: `.subscribe_to_reconfigurations()`
$DIR/state-sync/inter-component/event-notifications/src/tests.rs: `.subscribe_to_events(vec![event_key_1])`
$DIR/state-sync/inter-component/event-notifications/src/tests.rs: `.subscribe_to_events(vec![event_key_1, event_key_2])`
$DIR/state-sync/inter-component/event-notifications/src/tests.rs: `.subscribe_to_events(vec![reconfig_event_key])`
$DIR/state-sync/inter-component/event-notifications/src/tests.rs: `.subscribe_to_reconfigurations()`
$DIR/state-sync/inter-component/event-notifications/src/tests.rs: `.subscribe_to_reconfigurations()`
$DIR/state-sync/inter-component/event-notifications/src/tests.rs: `.subscribe_to_events(vec![event_key_1])`
$DIR/state-sync/inter-component/event-notifications/src/tests.rs: `.subscribe_to_events(vec![event_key_2])`
$DIR/state-sync/inter-component/event-notifications/src/tests.rs: `.subscribe_to_events(vec![event_key_1])`
$DIR/state-sync/inter-component/event-notifications/src/tests.rs: `.subscribe_to_events(vec![event_key_1, event_key_2])`
$DIR/state-sync/inter-component/event-notifications/src/tests.rs: `.subscribe_to_events(vec![event_key_2, event_key_3, event_key_4])`
$DIR/state-sync/inter-component/event-notifications/src/tests.rs: `.subscribe_to_events(vec![create_random_event_key()])`
$DIR/state-sync/inter-component/event-notifications/src/tests.rs: `.subscribe_to_reconfigurations()`
$DIR/state-sync/inter-component/mempool-notifications/src/lib.rs: `mempool_listener.notification_receiver.close();`
$DIR/state-sync/inter-component/mempool-notifications/src/lib.rs: `transactions.push(create_user_transaction());`
$DIR/state-sync/inter-component/mempool-notifications/src/lib.rs: `.enter()`
$DIR/state-sync/inter-component/mempool-notifications/src/lib.rs: `.notify_new_commit(vec![create_user_transaction()], 0, 1000)`
$DIR/state-sync/inter-component/mempool-notifications/src/lib.rs: `.notification_receiver.close()`
$DIR/state-sync/inter-component/mempool-notifications/src/lib.rs: `.notify_new_commit(vec![create_user_transaction()], 0, 1000)`
$DIR/state-sync/inter-component/mempool-notifications/src/lib.rs: `.enter()`
$DIR/state-sync/inter-component/mempool-notifications/src/lib.rs: `.notify_new_commit(vec![create_user_transaction()], 0, 0)`
$DIR/state-sync/inter-component/mempool-notifications/src/lib.rs: `.enter()`
$DIR/state-sync/inter-component/mempool-notifications/src/lib.rs: `.notify_new_commit(vec![], 0, 1000)`
$DIR/state-sync/inter-component/mempool-notifications/src/lib.rs: `.enter()`
$DIR/state-sync/inter-component/mempool-notifications/src/lib.rs: `.notify_new_commit(transactions.clone(), 0, 1000)`
$DIR/state-sync/inter-component/mempool-notifications/src/lib.rs: `.push(create_user_transaction())`
$DIR/state-sync/inter-component/mempool-notifications/src/lib.rs: `.notify_new_commit(transactions, 0, 1000)`
$DIR/state-sync/inter-component/mempool-notifications/src/lib.rs: `.enter()`
$DIR/state-sync/inter-component/mempool-notifications/src/lib.rs: `.notify_new_commit(transactions, block_timestamp_usecs, 1000)`
$DIR/state-sync/inter-component/mempool-notifications/src/lib.rs: `.select_next_some()`
$DIR/state-sync/inter-component/mempool-notifications/src/lib.rs: `.now_or_never()`
$DIR/state-sync/inter-component/mempool-notifications/src/lib.rs: `.enter()`
$DIR/state-sync/inter-component/mempool-notifications/src/lib.rs: `.select_next_some()`
$DIR/state-sync/inter-component/mempool-notifications/src/lib.rs: `.now_or_never()`
$DIR/state-sync/inter-component/mempool-notifications/src/lib.rs: `.ack_commit_notification(mempool_commit_notification)`
$DIR/state-sync/inter-component/mempool-notifications/src/lib.rs: `.notify_new_commit(
            vec![create_user_transaction()],
            101,
            1000,
        )`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `block_on(validator_coordinator.process_sync_request(sync_request)).unwrap();`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `match callback_receiver.try_recv() {
            Ok(Some(notification_result)) => notification_result.result.unwrap(),
            result => panic!("Expected okay but got: {:?}", result),
        };`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `validator_coordinator
            .get_sync_state(callback_sender)
            .unwrap();`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `validator_coordinator
            .wait_for_initialization(callback_sender)
            .unwrap();`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `match callback_receiver.try_recv() {
            Ok(Some(result)) => result.unwrap(),
            result => panic!("Expected okay but got: {:?}", result),
        };`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `validator_coordinator
            .wait_for_initialization(callback_sender)
            .unwrap();`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `block_on(validator_coordinator.process_commit_notification(vec![], vec![], None, None))
            .unwrap();`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `block_on(validator_coordinator.process_commit_notification(
            vec![],
            vec![],
            Some(commit_notification),
            None,
        ))
        .unwrap();`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `validator_coordinator.check_progress().unwrap();`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `node_config.base.role = RoleType::Validator;`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `node_config.state_sync.sync_request_timeout_ms = 0;`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `validator_coordinator.check_progress().unwrap_err();`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `verify_all_chunk_requests_are_invalid(
            &mut validator_coordinator,
            &peer_network_id,
            &chunk_requests[1..2], // Ignore waypoint request
        );`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `process_new_peer_event(&mut validator_coordinator, &peer_network_id);`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `process_new_peer_event(&mut full_node_coordinator, &peer_network_id);`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `verify_all_chunk_responses_are_the_wrong_type(
            &mut full_node_coordinator,
            &peer_network_id,
            &chunk_responses[0..1], // Ignore the target and highest chunk responses
        );`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `process_new_peer_event(&mut validator_coordinator, &peer_network_id);`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `verify_all_chunk_responses_are_the_wrong_type(
            &mut validator_coordinator,
            &peer_network_id,
            &chunk_responses[0..1], // Ignore the target and highest chunk responses
        );`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `process_new_peer_event(&mut validator_coordinator, &peer_network_id);`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `verify_all_chunk_responses_are_the_wrong_type(
            &mut validator_coordinator,
            &peer_network_id,
            &chunk_responses[1..=2], // Ignore the waypoint chunk response
        );`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `.process_sync_request(sync_request)`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `.process_sync_request(sync_request)`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `.try_recv()`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `.ledger_info()`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `.process_sync_request(sync_request)`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `.try_recv()`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `.get_sync_state(callback_sender)`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `.try_recv()`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `.get_sync_state(callback_sender)`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `.wait_for_initialization(callback_sender)`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `.try_recv()`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `.wait_for_initialization(callback_sender)`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `.ledger_info()`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `.wait_for_initialization(callback_sender)`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `.try_recv()`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `.process_commit_notification(vec![], vec![], None, None)`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `.process_commit_notification(
            vec![],
            vec![],
            Some(commit_notification),
            None,
        )`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `.try_recv()`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `.process_commit_notification(
            committed_transactions,
            vec![],
            Some(commit_notification),
            None,
        )`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `.check_progress()`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `.process_sync_request(sync_request)`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `.check_progress()`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `.process_sync_request(sync_request)`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `.check_progress()`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `.try_recv()`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `.process_new_peer(node_network_id, connection_metadata.clone())`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `.process_new_peer(node_network_id.clone(), connection_metadata)`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `.process_lost_peer(node_network_id, peer_id)`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `.process_chunk_message(
                peer_network_id.network_id(),
                peer_network_id.peer_id(),
                chunk_response.clone(),
            )`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `.network_id()`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `.peer_id()`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `.process_sync_request(sync_request)`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `.process_chunk_message(
                peer_network_id.network_id(),
                peer_network_id.peer_id(),
                chunk_response.clone(),
            )`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `.network_id()`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `.peer_id()`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `.process_chunk_message(
                peer_network_id.network_id(),
                peer_network_id.peer_id(),
                chunk_response.clone(),
            )`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `.network_id()`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `.peer_id()`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `.process_chunk_message(
                peer_network_id.network_id(),
                peer_network_id.peer_id(),
                chunk_response.clone(),
            )`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `.network_id()`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `.peer_id()`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `.process_sync_request(sync_request)`
$DIR/state-sync/state-sync-v1/src/coordinator.rs: `.ledger_info()`
$DIR/state-sync/state-sync-v1/src/executor_proxy.rs: `executor_proxy
            .publish_on_chain_config_updates(reconfig_events)
            .unwrap();`
$DIR/state-sync/state-sync-v1/src/executor_proxy.rs: `drop(reconfig_receiver);`
$DIR/state-sync/state-sync-v1/src/executor_proxy.rs: `executor_proxy
            .publish_on_chain_config_updates(reconfig_events)
            .unwrap();`
$DIR/state-sync/state-sync-v1/src/executor_proxy.rs: `executor_proxy
            .publish_on_chain_config_updates(vec![])
            .unwrap();`
$DIR/state-sync/state-sync-v1/src/executor_proxy.rs: `executor_proxy
            .publish_on_chain_config_updates(reconfig_events)
            .unwrap();`
$DIR/state-sync/state-sync-v1/src/executor_proxy.rs: `executor_proxy
            .publish_on_chain_config_updates(reconfig_events)
            .unwrap();`
$DIR/state-sync/state-sync-v1/src/executor_proxy.rs: `executor_proxy
            .execute_chunk(txns, ledger_info_epoch_1.clone(), None)
            .unwrap();`
$DIR/state-sync/state-sync-v1/src/executor_proxy.rs: `executor_proxy.get_epoch_ending_ledger_info(4).unwrap_err();`
$DIR/state-sync/state-sync-v1/src/executor_proxy.rs: `executor_proxy
            .execute_chunk(txns, ledger_info_epoch_2.clone(), None)
            .unwrap();`
$DIR/state-sync/state-sync-v1/src/executor_proxy.rs: `executor_proxy
            .publish_on_chain_config_updates(reconfig_events)
            .unwrap();`
$DIR/state-sync/state-sync-v1/src/executor_proxy.rs: `db_path.create_as_dir().unwrap();`
$DIR/state-sync/state-sync-v1/src/executor_proxy.rs: `bootstrap_genesis::<DiemVM>(&db_rw, &genesis_txn).unwrap();`
$DIR/state-sync/state-sync-v1/src/executor_proxy.rs: `config_registry.push(TestOnChainConfig::CONFIG_ID);`
$DIR/state-sync/state-sync-v1/src/executor_proxy.rs: `payload.get::<DiemVersion>().unwrap();`
$DIR/state-sync/state-sync-v1/src/executor_proxy.rs: `executor_proxy
            .publish_on_chain_config_updates(reconfig_events)
            .unwrap();`
$DIR/state-sync/state-sync-v1/src/executor_proxy.rs: `payload.get::<DiemVersion>().unwrap();`
$DIR/state-sync/state-sync-v1/src/executor_proxy.rs: `payload.get::<OnChainConsensusConfig>().unwrap();`
$DIR/state-sync/state-sync-v1/src/executor_proxy.rs: `.publish_on_chain_config_updates(reconfig_events)`
$DIR/state-sync/state-sync-v1/src/executor_proxy.rs: `.publish_on_chain_config_updates(reconfig_events)`
$DIR/state-sync/state-sync-v1/src/executor_proxy.rs: `.publish_on_chain_config_updates(vec![])`
$DIR/state-sync/state-sync-v1/src/executor_proxy.rs: `.publish_on_chain_config_updates(reconfig_events)`
$DIR/state-sync/state-sync-v1/src/executor_proxy.rs: `.publish_on_chain_config_updates(reconfig_events)`
$DIR/state-sync/state-sync-v1/src/executor_proxy.rs: `.select_next_some()`
$DIR/state-sync/state-sync-v1/src/executor_proxy.rs: `.now_or_never()`
$DIR/state-sync/state-sync-v1/src/executor_proxy.rs: `.get::<DiemVersion>()`
$DIR/state-sync/state-sync-v1/src/executor_proxy.rs: `.get_chunk(0, 2, 2)`
$DIR/state-sync/state-sync-v1/src/executor_proxy.rs: `.execute_chunk(txns, ledger_info_epoch_1.clone(), None)`
$DIR/state-sync/state-sync-v1/src/executor_proxy.rs: `.get_chunk(2, 2, 5)`
$DIR/state-sync/state-sync-v1/src/executor_proxy.rs: `.get_epoch_ending_ledger_info(4)`
$DIR/state-sync/state-sync-v1/src/executor_proxy.rs: `.get_chunk(4, 1, 5)`
$DIR/state-sync/state-sync-v1/src/executor_proxy.rs: `.execute_chunk(txns, ledger_info_epoch_2.clone(), None)`
$DIR/state-sync/state-sync-v1/src/executor_proxy.rs: `.get_local_storage_state()`
$DIR/state-sync/state-sync-v1/src/executor_proxy.rs: `.get_local_storage_state()`
$DIR/state-sync/state-sync-v1/src/executor_proxy.rs: `.publish_on_chain_config_updates(reconfig_events)`
$DIR/state-sync/state-sync-v1/src/executor_proxy.rs: `.select_next_some()`
$DIR/state-sync/state-sync-v1/src/executor_proxy.rs: `.now_or_never()`
$DIR/state-sync/state-sync-v1/src/executor_proxy.rs: `.get::<OnChainConsensusConfig>()`
$DIR/state-sync/state-sync-v1/src/executor_proxy.rs: `.create_as_dir()`
$DIR/state-sync/state-sync-v1/src/executor_proxy.rs: `.path()`
$DIR/state-sync/state-sync-v1/src/executor_proxy.rs: `.push(TestOnChainConfig::CONFIG_ID)`
$DIR/state-sync/state-sync-v1/src/executor_proxy.rs: `.select_next_some()`
$DIR/state-sync/state-sync-v1/src/executor_proxy.rs: `.now_or_never()`
$DIR/state-sync/state-sync-v1/src/executor_proxy.rs: `.get::<DiemVersion>()`
$DIR/state-sync/state-sync-v1/src/executor_proxy.rs: `.publish_on_chain_config_updates(reconfig_events)`
$DIR/state-sync/state-sync-v1/src/executor_proxy.rs: `.select_next_some()`
$DIR/state-sync/state-sync-v1/src/executor_proxy.rs: `.now_or_never()`
$DIR/state-sync/state-sync-v1/src/executor_proxy.rs: `.get::<DiemVersion>()`
$DIR/state-sync/state-sync-v1/src/executor_proxy.rs: `.get::<OnChainConsensusConfig>()`
$DIR/state-sync/state-sync-v1/src/request_manager.rs: `request_manager.disable_peer(&validator_0).unwrap();`
$DIR/state-sync/state-sync-v1/src/request_manager.rs: `add_validator_to_request_manager(&mut request_manager, &validator_0, PeerRole::Validator);`
$DIR/state-sync/state-sync-v1/src/request_manager.rs: `request_manager.process_empty_chunk(&validators[validator_index as usize]);`
$DIR/state-sync/state-sync-v1/src/request_manager.rs: `request_manager.process_success_response(&validators[0]);`
$DIR/state-sync/state-sync-v1/src/request_manager.rs: `request_manager.add_request(1, validator_0.clone());`
$DIR/state-sync/state-sync-v1/src/request_manager.rs: `request_manager.add_request(100, vec![validator_0.clone()]);`
$DIR/state-sync/state-sync-v1/src/request_manager.rs: `request_manager
                .process_chunk_version_mismatch(&validator_0, 100, 0)
                .unwrap_err();`
$DIR/state-sync/state-sync-v1/src/request_manager.rs: `request_manager.process_empty_chunk(&validators[validator_index as usize]);`
$DIR/state-sync/state-sync-v1/src/request_manager.rs: `request_manager.add_request(100, vec![validator_0.clone(), validator_1.clone()]);`
$DIR/state-sync/state-sync-v1/src/request_manager.rs: `request_manager
                .process_chunk_version_mismatch(&validator_0, 100, 0)
                .unwrap_err();`
$DIR/state-sync/state-sync-v1/src/request_manager.rs: `request_manager.process_empty_chunk(&validators[0]);`
$DIR/state-sync/state-sync-v1/src/request_manager.rs: `request_manager.process_invalid_chunk(&validators[0]);`
$DIR/state-sync/state-sync-v1/src/request_manager.rs: `request_manager.process_invalid_chunk_request(&validators[0]);`
$DIR/state-sync/state-sync-v1/src/request_manager.rs: `request_manager.process_chunk_from_downstream(&validators[0]);`
$DIR/state-sync/state-sync-v1/src/request_manager.rs: `add_validator_to_request_manager(&mut request_manager, &validator, peer_role);`
$DIR/state-sync/state-sync-v1/src/request_manager.rs: `validators.push(validator);`
$DIR/state-sync/state-sync-v1/src/request_manager.rs: `request_manager.add_request(1, validator_0.clone());`
$DIR/state-sync/state-sync-v1/src/request_manager.rs: `request_manager.add_request(3, validator_1.clone());`
$DIR/state-sync/state-sync-v1/src/request_manager.rs: `request_manager.add_request(5, validator_0.clone());`
$DIR/state-sync/state-sync-v1/src/request_manager.rs: `request_manager.add_request(10, validator_0);`
$DIR/state-sync/state-sync-v1/src/request_manager.rs: `request_manager.add_request(12, validator_1);`
$DIR/state-sync/state-sync-v1/src/request_manager.rs: `request_manager.remove_requests(5);`
$DIR/state-sync/state-sync-v1/src/request_manager.rs: `request_manager.add_request(1, vec![validators[0].clone()]);`
$DIR/state-sync/state-sync-v1/src/request_manager.rs: `request_manager.add_request(1, vec![validators[1].clone()]);`
$DIR/state-sync/state-sync-v1/src/request_manager.rs: `.disable_peer(&validator_0)`
$DIR/state-sync/state-sync-v1/src/request_manager.rs: `.process_empty_chunk(&validators[validator_index as usize])`
$DIR/state-sync/state-sync-v1/src/request_manager.rs: `.process_success_response(&validators[0])`
$DIR/state-sync/state-sync-v1/src/request_manager.rs: `.add_request(1, validator_0.clone())`
$DIR/state-sync/state-sync-v1/src/request_manager.rs: `.add_request(100, vec![validator_0.clone()])`
$DIR/state-sync/state-sync-v1/src/request_manager.rs: `.process_chunk_version_mismatch(&validator_0, 100, 0)`
$DIR/state-sync/state-sync-v1/src/request_manager.rs: `.process_empty_chunk(&validators[validator_index as usize])`
$DIR/state-sync/state-sync-v1/src/request_manager.rs: `.add_request(100, vec![validator_0.clone(), validator_1.clone()])`
$DIR/state-sync/state-sync-v1/src/request_manager.rs: `.process_chunk_version_mismatch(&validator_0, 100, 0)`
$DIR/state-sync/state-sync-v1/src/request_manager.rs: `.process_empty_chunk(&validators[0])`
$DIR/state-sync/state-sync-v1/src/request_manager.rs: `.process_invalid_chunk(&validators[0])`
$DIR/state-sync/state-sync-v1/src/request_manager.rs: `.process_invalid_chunk_request(&validators[0])`
$DIR/state-sync/state-sync-v1/src/request_manager.rs: `.process_chunk_from_downstream(&validators[0])`
$DIR/state-sync/state-sync-v1/src/request_manager.rs: `.push(validator)`
$DIR/state-sync/state-sync-v1/src/request_manager.rs: `.add_request(1, validator_0.clone())`
$DIR/state-sync/state-sync-v1/src/request_manager.rs: `.add_request(3, validator_1.clone())`
$DIR/state-sync/state-sync-v1/src/request_manager.rs: `.add_request(5, validator_0.clone())`
$DIR/state-sync/state-sync-v1/src/request_manager.rs: `.add_request(10, validator_0)`
$DIR/state-sync/state-sync-v1/src/request_manager.rs: `.add_request(12, validator_1)`
$DIR/state-sync/state-sync-v1/src/request_manager.rs: `.remove_requests(5)`
$DIR/state-sync/state-sync-v1/src/request_manager.rs: `.add_request(1, vec![validators[0].clone()])`
$DIR/state-sync/state-sync-v1/src/request_manager.rs: `.add_request(1, vec![validators[1].clone()])`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `env.start_validator_peer(0, false);`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `env.start_validator_peer(1, false);`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `validator_0.commit(version);`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `validator_1.sync_to(target_li);`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `env.start_validator_peer(0, false);`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `attempt.fetch_add(1, Ordering::Relaxed);`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `env.start_state_sync_peer(1, handler, RoleType::Validator, Waypoint::default(), false);`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `validator_0.commit(synced_version);`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `validator_1.sync_to(validator_0.latest_li());`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `env.start_state_sync_peer(0, handler, RoleType::Validator, Waypoint::default(), false);`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `env.setup_state_sync_peer(
        1,
        default_handler(),
        RoleType::Validator,
        Waypoint::default(),
        100,
        300,
        false,
    );`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `validator_0.commit(1);`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `env.start_validator_peer(0, false);`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `env.start_fullnode_peer(1, false);`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `validator.commit(10);`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `validator.commit(20);`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `env.start_validator_peer(0, false);`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `env.start_validator_peer(1, false);`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `validator_0.commit(20);`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `validator_1.sync_to(validator_0.latest_li());`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `validator_0.commit(40);`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `validator_0.move_to_next_epoch(validator_infos, 0);`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `validator_0.commit(100);`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `validator_1.sync_to(validator_0.latest_li());`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `validator_0.commit(epoch * 100);`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `validator_0.move_to_next_epoch(validator_infos, 0);`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `validator_0.commit(950);`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `validator_1.sync_to(validator_0.latest_li());`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `env.start_validator_peer(0, false);`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `validator_0.commit(epoch * 100);`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `validator_0.move_to_next_epoch(vec![validator_0.get_validator_info().clone()], 0);`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `validator_0.commit(950);`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `drop(validator_0);`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `env.start_fullnode_peer(1, false);`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `drop(fullnode);`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `env.start_fullnode_peer(2, false);`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `env.start_validator_peer(0, false);`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `curr_version += 100;`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `validator_0.commit(curr_version);`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `validator_0.move_to_next_epoch(vec![validator_0.get_validator_info().clone()], 0);`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `curr_version += 400;`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `validator_0.commit(curr_version);`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `validator_0.move_to_next_epoch(vec![validator_0.get_validator_info().clone()], 0);`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `validator_0.commit(5250);`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `drop(validator_0);`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `env.start_state_sync_peer(1, default_handler(), RoleType::FullNode, waypoint, false);`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `fullnode.wait_until_initialized();`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `drop(fullnode);`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `env.start_fullnode_peer(2, false);`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `env.start_validator_peer(0, true);`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `env.start_validator_peer(1, true);`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `env.setup_state_sync_peer(
        2,
        default_handler(),
        RoleType::FullNode,
        Waypoint::default(),
        10_000,
        1_000_000,
        true,
    );`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `env.start_state_sync_peer(
        3,
        default_handler(),
        RoleType::FullNode,
        Waypoint::default(),
        true,
    );`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `validator_0.commit(400);`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `drop(validator_0);`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `drop(fullnode_0);`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `drop(fullnode_1);`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `send_connection_notifications(&mut env, validator_0_peer_id, fullnode_0_peer_id_vfn, true);`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `send_connection_notifications(
        &mut env,
        fullnode_1_peer_id_pfn,
        fullnode_0_peer_id_pfn,
        true,
    );`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `check_chunk_request(message, 0, None);`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `check_chunk_response(message, 400, 1, 250);`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `env.get_state_sync_peer(2).wait_for_version(250, None);`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `send_connection_notifications(&mut env, validator_0_peer_id, fullnode_0_peer_id_vfn, false);`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `check_chunk_request(message, 250, Some(400));`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `env.get_state_sync_peer(0).commit(500);`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `env.clone_storage(0, 3);`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `env.get_state_sync_peer(3).wait_for_version(500, Some(500));`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `send_connection_notifications(&mut env, validator_0_peer_id, fullnode_1_peer_id_vfn, true);`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `env.get_state_sync_peer(0).commit(600);`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `check_chunk_request(message, 500, None);`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `check_chunk_response(message, 600, 501, 100);`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `check_chunk_response(message, 400, 251, 150);`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `check_chunk_request(message, 400, None);`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `check_chunk_response(message, 600, 401, 200);`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `env.start_validator_peer(0, true);`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `env.start_fullnode_peer(1, true);`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `send_connection_notifications(&mut env, validator_peer_id, fullnode_peer_id, true);`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `validator.commit(*committed_version);`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `validator.move_to_next_epoch(validator_infos, 0);`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `env.deliver_msg(fullnode_peer_id);`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `env.deliver_msg(validator_peer_id);`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `env.start_validator_peer(0, true);`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `env.start_fullnode_peer(1, true);`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `send_connection_notifications(&mut env, validator_peer_id, fullnode_peer_id, true);`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `env.get_state_sync_peer(0).commit(next_commit as u64);`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `env.deliver_msg(fullnode_peer_id);`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `env.deliver_msg(validator_peer_id);`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `env.start_validator_peer(0, true);`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `env.setup_state_sync_peer(
        1,
        default_handler(),
        RoleType::FullNode,
        Waypoint::default(),
        1_000,
        60_000,
        true,
    );`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `env.start_fullnode_peer(2, true);`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `env.start_fullnode_peer(3, true);`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `env.start_fullnode_peer(4, true);`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `drop(validator);`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `drop(fullnode_0);`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `drop(fullnode_1);`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `drop(fullnode_2);`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `drop(fullnode_3);`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `send_connection_notifications(&mut env, validator_peer_id, fn_0_vfn_peer_id, true);`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `send_connection_notifications(&mut env, *peer, fn_0_pfn_peer_id, true);`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `send_connection_notifications(&mut env, validator_peer_id, fn_0_vfn_peer_id, false);`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `env.deliver_msg(responding_peer_id);`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `send_connection_notifications(&mut env, fn_1_pfn_peer_id, fn_0_pfn_peer_id, false);`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `send_connection_notifications(&mut env, fn_2_pfn_peer_id, fn_0_pfn_peer_id, false);`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `send_connection_notifications(&mut env, fn_3_pfn_peer_id, fn_0_pfn_peer_id, false);`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `env.assert_no_message_sent(fn_0_vfn_peer_id);`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `env.assert_no_message_sent(fn_0_pfn_peer_id);`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `send_connection_notifications(&mut env, fn_2_pfn_peer_id, fn_0_pfn_peer_id, true);`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `send_connection_notifications(&mut env, validator_peer_id, fn_0_vfn_peer_id, true);`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `send_connection_notifications(&mut env, *peer, fn_0_pfn_peer_id, true);`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `env.deliver_msg(responding_peer_id);`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `env.start_validator_peer(0, true);`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `env.setup_state_sync_peer(
        1,
        default_handler(),
        RoleType::FullNode,
        Waypoint::default(),
        1_000,
        multicast_timeout_ms,
        true,
    );`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `env.start_fullnode_peer(2, true);`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `env.start_fullnode_peer(3, true);`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `env.start_fullnode_peer(4, true);`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `drop(validator);`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `drop(fullnode_0);`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `drop(fullnode_1);`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `drop(fullnode_2);`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `send_connection_notifications(&mut env, validator_peer_id, fn_0_vfn_peer_id, true);`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `send_connection_notifications(&mut env, fn_1_vfn_2_peer_id, fn_0_vfn_2_peer_id, true);`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `send_connection_notifications(&mut env, fn_2_pfn_peer_id, fn_0_pfn_peer_id, true);`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `std::thread::sleep(std::time::Duration::from_millis(multicast_timeout_ms));`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `env.deliver_msg(validator_peer_id);`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `std::thread::sleep(std::time::Duration::from_millis(multicast_timeout_ms));`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `env.deliver_msg(validator_peer_id);`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `env.deliver_msg(fn_2_pfn_peer_id);`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `env.deliver_msg(fn_1_vfn_2_peer_id);`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `env.deliver_msg(fn_2_pfn_peer_id);`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `env.deliver_msg(fn_1_vfn_2_peer_id);`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `env.deliver_msg(validator_peer_id);`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `env.deliver_msg(fn_2_pfn_peer_id);`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `env.deliver_msg(fn_1_vfn_2_peer_id);`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `env.deliver_msg(validator_peer_id);`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `env.deliver_msg(validator_peer_id);`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `env.deliver_msg(fn_1_vfn_2_peer_id);`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `env.deliver_msg(fn_2_pfn_peer_id);`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `env.deliver_msg(validator_peer_id);`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `env.deliver_msg(fn_1_vfn_2_peer_id);`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `env.deliver_msg(fn_2_pfn_peer_id);`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.start_validator_peer(0, false)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.start_validator_peer(1, false)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.get_state_sync_peer(0)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.get_state_sync_peer(1)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.commit(version)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.latest_li()`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.sync_to(target_li)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.start_validator_peer(0, false)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.load(Ordering::Relaxed)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.fetch_add(1, Ordering::Relaxed)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.into()`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.start_state_sync_peer(1, handler, RoleType::Validator, Waypoint::default(), false)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.get_state_sync_peer(0)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.get_state_sync_peer(1)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.commit(synced_version)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.sync_to(validator_0.latest_li())`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.latest_li()`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.into()`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.start_state_sync_peer(0, handler, RoleType::Validator, Waypoint::default(), false)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.setup_state_sync_peer(
        1,
        default_handler(),
        RoleType::Validator,
        Waypoint::default(),
        100,
        300,
        false,
    )`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.get_state_sync_peer(0)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.get_state_sync_peer(1)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.commit(1)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.latest_li()`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.start_validator_peer(0, false)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.start_fullnode_peer(1, false)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.get_state_sync_peer(0)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.get_state_sync_peer(1)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.commit(10)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.commit(20)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.start_validator_peer(0, false)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.start_validator_peer(1, false)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.get_state_sync_peer(0)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.get_state_sync_peer(1)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.commit(20)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.sync_to(validator_0.latest_li())`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.latest_li()`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.commit(40)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.move_to_next_epoch(validator_infos, 0)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.commit(100)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.sync_to(validator_0.latest_li())`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.latest_li()`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.commit(epoch * 100)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.move_to_next_epoch(validator_infos, 0)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.commit(950)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.sync_to(validator_0.latest_li())`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.latest_li()`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.start_validator_peer(0, false)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.get_state_sync_peer(0)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.commit(epoch * 100)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.move_to_next_epoch(vec![validator_0.get_validator_info().clone()], 0)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.commit(950)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.start_fullnode_peer(1, false)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.get_state_sync_peer(1)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.start_fullnode_peer(2, false)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.get_state_sync_peer(2)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.start_validator_peer(0, false)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.get_state_sync_peer(0)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.commit(curr_version)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.move_to_next_epoch(vec![validator_0.get_validator_info().clone()], 0)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.commit(curr_version)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.move_to_next_epoch(vec![validator_0.get_validator_info().clone()], 0)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.commit(5250)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.get_epoch_ending_ledger_info(3500)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.ledger_info()`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.start_state_sync_peer(1, default_handler(), RoleType::FullNode, waypoint, false)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.get_state_sync_peer(1)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.wait_until_initialized()`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.start_fullnode_peer(2, false)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.get_state_sync_peer(2)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.start_validator_peer(0, true)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.start_validator_peer(1, true)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.setup_state_sync_peer(
        2,
        default_handler(),
        RoleType::FullNode,
        Waypoint::default(),
        10_000,
        1_000_000,
        true,
    )`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.start_state_sync_peer(
        3,
        default_handler(),
        RoleType::FullNode,
        Waypoint::default(),
        true,
    )`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.get_state_sync_peer(0)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.get_state_sync_peer(2)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.get_state_sync_peer(3)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.get_peer_id(VALIDATOR_NETWORK.clone())`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.get_peer_id(VFN_NETWORK.clone())`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.get_peer_id(PFN_NETWORK.clone())`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.get_peer_id(VFN_NETWORK.clone())`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.get_peer_id(PFN_NETWORK.clone())`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.commit(400)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.deliver_msg(fullnode_0_peer_id_vfn)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.deliver_msg(validator_0_peer_id)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.get_state_sync_peer(2)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.wait_for_version(250, None)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.deliver_msg(fullnode_0_peer_id_pfn)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.get_state_sync_peer(0)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.commit(500)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.clone_storage(0, 3)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.get_state_sync_peer(3)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.wait_for_version(500, Some(500))`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.get_state_sync_peer(0)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.commit(600)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.deliver_msg(fullnode_1_peer_id_vfn)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.deliver_msg(validator_0_peer_id)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.deliver_msg(fullnode_1_peer_id_pfn)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.deliver_msg(fullnode_0_peer_id_pfn)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.deliver_msg(fullnode_1_peer_id_pfn)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.get_state_sync_peer(2)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.start_validator_peer(0, true)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.start_fullnode_peer(1, true)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.get_state_sync_peer(0)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.get_peer_id(VALIDATOR_NETWORK.clone())`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.get_state_sync_peer(1)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.get_peer_id(VFN_NETWORK.clone())`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.enumerate()`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.get(index)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.get_state_sync_peer(0)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.commit(*committed_version)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.contains(committed_version)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.move_to_next_epoch(validator_infos, 0)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.deliver_msg(fullnode_peer_id)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.deliver_msg(validator_peer_id)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.get_state_sync_peer(1)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.wait_for_version(*synced_version, Some(*committed_version))`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.start_validator_peer(0, true)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.start_fullnode_peer(1, true)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.get_state_sync_peer(0)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.get_peer_id(VALIDATOR_NETWORK.clone())`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.get_state_sync_peer(1)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.get_peer_id(VFN_NETWORK.clone())`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.enumerate()`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.get_state_sync_peer(0)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.commit(next_commit as u64)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.deliver_msg(fullnode_peer_id)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.deliver_msg(validator_peer_id)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.get_state_sync_peer(1)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.wait_for_version(*synced_version, Some(*committed_version))`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.start_validator_peer(0, true)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.setup_state_sync_peer(
        1,
        default_handler(),
        RoleType::FullNode,
        Waypoint::default(),
        1_000,
        60_000,
        true,
    )`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.start_fullnode_peer(2, true)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.start_fullnode_peer(3, true)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.start_fullnode_peer(4, true)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.get_state_sync_peer(0)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.get_state_sync_peer(1)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.get_state_sync_peer(2)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.get_state_sync_peer(3)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.get_state_sync_peer(4)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.get_peer_id(VFN_NETWORK.clone())`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.get_peer_id(VFN_NETWORK.clone())`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.get_peer_id(PFN_NETWORK.clone())`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.get_peer_id(PFN_NETWORK.clone())`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.get_peer_id(PFN_NETWORK.clone())`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.get_peer_id(PFN_NETWORK.clone())`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.deliver_msg(responding_peer_id)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.deliver_msg(responding_peer_id)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.deliver_msg(responding_peer_id)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.assert_no_message_sent(fn_0_vfn_peer_id)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.assert_no_message_sent(fn_0_pfn_peer_id)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.deliver_msg(responding_peer_id)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.deliver_msg(responding_peer_id)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.deliver_msg(responding_peer_id)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.start_validator_peer(0, true)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.setup_state_sync_peer(
        1,
        default_handler(),
        RoleType::FullNode,
        Waypoint::default(),
        1_000,
        multicast_timeout_ms,
        true,
    )`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.start_fullnode_peer(2, true)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.start_fullnode_peer(3, true)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.start_fullnode_peer(4, true)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.get_state_sync_peer(0)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.get_state_sync_peer(1)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.get_state_sync_peer(2)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.get_state_sync_peer(3)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.get_peer_id(VFN_NETWORK.clone())`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.get_peer_id(VFN_NETWORK.clone())`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.get_peer_id(VFN_NETWORK_2.clone())`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.get_peer_id(PFN_NETWORK.clone())`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.get_peer_id(VFN_NETWORK_2.clone())`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.get_peer_id(PFN_NETWORK.clone())`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.deliver_msg(validator_peer_id)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.deliver_msg(validator_peer_id)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.deliver_msg(fn_2_pfn_peer_id)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.deliver_msg(fn_1_vfn_2_peer_id)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.deliver_msg(fn_2_pfn_peer_id)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.deliver_msg(fn_1_vfn_2_peer_id)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.deliver_msg(validator_peer_id)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.deliver_msg(fn_2_pfn_peer_id)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.deliver_msg(fn_1_vfn_2_peer_id)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.deliver_msg(validator_peer_id)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.deliver_msg(validator_peer_id)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.deliver_msg(fn_1_vfn_2_peer_id)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.deliver_msg(fn_2_pfn_peer_id)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.deliver_msg(validator_peer_id)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.deliver_msg(fn_1_vfn_2_peer_id)`
$DIR/state-sync/state-sync-v1/tests/integration_tests.rs: `.deliver_msg(fn_2_pfn_peer_id)`
$DIR/storage/accumulator/src/tests/proof_test.rs: `store.put_many(&writes);`
$DIR/storage/accumulator/src/tests/proof_test.rs: `.put_many(&writes)`
$DIR/storage/accumulator/src/tests/write_test.rs: `store.verify(&[]).unwrap();`
$DIR/storage/accumulator/src/tests/write_test.rs: `store.put_many(&writes);`
$DIR/storage/accumulator/src/tests/write_test.rs: `leaves.push(hash);`
$DIR/storage/accumulator/src/tests/write_test.rs: `.verify(&[])`
$DIR/storage/accumulator/src/tests/write_test.rs: `.len()`
$DIR/storage/accumulator/src/tests/write_test.rs: `.put_many(&writes)`
$DIR/storage/accumulator/src/tests/write_test.rs: `.push(hash)`
$DIR/storage/accumulator/src/tests/write_test.rs: `.verify(&leaves)`
$DIR/storage/backup/backup-cli/src/backup_types/epoch_ending/tests.rs: `tgt_db_dir.create_as_dir().unwrap();`
$DIR/storage/backup/backup-cli/src/backup_types/epoch_ending/tests.rs: `backup_dir.create_as_dir().unwrap();`
$DIR/storage/backup/backup-cli/src/backup_types/epoch_ending/tests.rs: `rt.block_on(
        EpochEndingRestoreController::new(
            EpochEndingRestoreOpt { manifest_handle },
            GlobalRestoreOpt {
                db_dir: Some(tgt_db_dir.path().to_path_buf()),
                dry_run: false,
                target_version: Some(target_version),
                trusted_waypoints: TrustedWaypointOpt::default(),
                rocksdb_opt: RocksdbOpt::default(),
                concurernt_downloads: ConcurrentDownloadsOpt::default(),
            }
            .try_into()
            .unwrap(),
            store,
        )
        .run(None),
    )
    .unwrap();`
$DIR/storage/backup/backup-cli/src/backup_types/epoch_ending/tests.rs: `.create_as_dir()`
$DIR/storage/backup/backup-cli/src/backup_types/epoch_ending/tests.rs: `.create_as_dir()`
$DIR/storage/backup/backup-cli/src/backup_types/epoch_ending/tests.rs: `.path()`
$DIR/storage/backup/backup-cli/src/backup_types/epoch_ending/tests.rs: `.last()`
$DIR/storage/backup/backup-cli/src/backup_types/epoch_ending/tests.rs: `.ledger_info()`
$DIR/storage/backup/backup-cli/src/backup_types/epoch_ending/tests.rs: `.next_block_epoch()`
$DIR/storage/backup/backup-cli/src/backup_types/epoch_ending/tests.rs: `.len()`
$DIR/storage/backup/backup-cli/src/backup_types/epoch_ending/tests.rs: `.ledger_info()`
$DIR/storage/backup/backup-cli/src/backup_types/epoch_ending/tests.rs: `.version()`
$DIR/storage/backup/backup-cli/src/backup_types/epoch_ending/tests.rs: `.block_on(
            EpochEndingBackupController::new(
                EpochEndingBackupOpt {
                    start_epoch: 0,
                    end_epoch: latest_epoch,
                },
                GlobalBackupOpt {
                    max_chunk_size: 1024,
                },
                client,
                Arc::clone(&store),
            )
            .run(),
        )`
$DIR/storage/backup/backup-cli/src/backup_types/epoch_ending/tests.rs: `.run()`
$DIR/storage/backup/backup-cli/src/backup_types/epoch_ending/tests.rs: `.block_on(
        EpochEndingRestoreController::new(
            EpochEndingRestoreOpt { manifest_handle },
            GlobalRestoreOpt {
                db_dir: Some(tgt_db_dir.path().to_path_buf()),
                dry_run: false,
                target_version: Some(target_version),
                trusted_waypoints: TrustedWaypointOpt::default(),
                rocksdb_opt: RocksdbOpt::default(),
                concurernt_downloads: ConcurrentDownloadsOpt::default(),
            }
            .try_into()
            .unwrap(),
            store,
        )
        .run(None),
    )`
$DIR/storage/backup/backup-cli/src/backup_types/epoch_ending/tests.rs: `.path()`
$DIR/storage/backup/backup-cli/src/backup_types/epoch_ending/tests.rs: `.try_into()`
$DIR/storage/backup/backup-cli/src/backup_types/epoch_ending/tests.rs: `.run(None)`
$DIR/storage/backup/backup-cli/src/backup_types/epoch_ending/tests.rs: `.into_iter()`
$DIR/storage/backup/backup-cli/src/backup_types/epoch_ending/tests.rs: `.map(|(_, li)| li)`
$DIR/storage/backup/backup-cli/src/backup_types/epoch_ending/tests.rs: `.filter(|li| li.ledger_info().ends_epoch() && li.ledger_info().version() <= target_version)`
$DIR/storage/backup/backup-cli/src/backup_types/epoch_ending/tests.rs: `.ledger_info()`
$DIR/storage/backup/backup-cli/src/backup_types/epoch_ending/tests.rs: `.ends_epoch()`
$DIR/storage/backup/backup-cli/src/backup_types/epoch_ending/tests.rs: `.ledger_info()`
$DIR/storage/backup/backup-cli/src/backup_types/epoch_ending/tests.rs: `.version()`
$DIR/storage/backup/backup-cli/src/backup_types/epoch_ending/tests.rs: `.collect::<Vec<_>>()`
$DIR/storage/backup/backup-cli/src/backup_types/epoch_ending/tests.rs: `.last()`
$DIR/storage/backup/backup-cli/src/backup_types/epoch_ending/tests.rs: `.map(|li| li.ledger_info().next_block_epoch())`
$DIR/storage/backup/backup-cli/src/backup_types/epoch_ending/tests.rs: `.ledger_info()`
$DIR/storage/backup/backup-cli/src/backup_types/epoch_ending/tests.rs: `.next_block_epoch()`
$DIR/storage/backup/backup-cli/src/backup_types/epoch_ending/tests.rs: `.unwrap_or(0)`
$DIR/storage/backup/backup-cli/src/backup_types/state_snapshot/tests.rs: `tgt_db_dir.create_as_dir().unwrap();`
$DIR/storage/backup/backup-cli/src/backup_types/state_snapshot/tests.rs: `backup_dir.create_as_dir().unwrap();`
$DIR/storage/backup/backup-cli/src/backup_types/state_snapshot/tests.rs: `rt.block_on(
        StateSnapshotRestoreController::new(
            StateSnapshotRestoreOpt {
                manifest_handle,
                version: PRE_GENESIS_VERSION,
            },
            GlobalRestoreOpt {
                dry_run: false,
                db_dir: Some(tgt_db_dir.path().to_path_buf()),
                target_version: None, // max
                trusted_waypoints: TrustedWaypointOpt::default(),
                rocksdb_opt: RocksdbOpt::default(),
                concurernt_downloads: ConcurrentDownloadsOpt::default(),
            }
            .try_into()
            .unwrap(),
            store,
            None, /* epoch_history */
        )
        .run(),
    )
    .unwrap();`
$DIR/storage/backup/backup-cli/src/backup_types/state_snapshot/tests.rs: `.create_as_dir()`
$DIR/storage/backup/backup-cli/src/backup_types/state_snapshot/tests.rs: `.create_as_dir()`
$DIR/storage/backup/backup-cli/src/backup_types/state_snapshot/tests.rs: `.path()`
$DIR/storage/backup/backup-cli/src/backup_types/state_snapshot/tests.rs: `.get_latest_tree_state()`
$DIR/storage/backup/backup-cli/src/backup_types/state_snapshot/tests.rs: `.block_on(
            StateSnapshotBackupController::new(
                StateSnapshotBackupOpt { version },
                GlobalBackupOpt {
                    max_chunk_size: 500,
                },
                client,
                Arc::clone(&store),
            )
            .run(),
        )`
$DIR/storage/backup/backup-cli/src/backup_types/state_snapshot/tests.rs: `.run()`
$DIR/storage/backup/backup-cli/src/backup_types/state_snapshot/tests.rs: `.block_on(
        StateSnapshotRestoreController::new(
            StateSnapshotRestoreOpt {
                manifest_handle,
                version: PRE_GENESIS_VERSION,
            },
            GlobalRestoreOpt {
                dry_run: false,
                db_dir: Some(tgt_db_dir.path().to_path_buf()),
                target_version: None, // max
                trusted_waypoints: TrustedWaypointOpt::default(),
                rocksdb_opt: RocksdbOpt::default(),
                concurernt_downloads: ConcurrentDownloadsOpt::default(),
            }
            .try_into()
            .unwrap(),
            store,
            None, /* epoch_history */
        )
        .run(),
    )`
$DIR/storage/backup/backup-cli/src/backup_types/state_snapshot/tests.rs: `.path()`
$DIR/storage/backup/backup-cli/src/backup_types/state_snapshot/tests.rs: `.try_into()`
$DIR/storage/backup/backup-cli/src/backup_types/state_snapshot/tests.rs: `.run()`
$DIR/storage/backup/backup-cli/src/backup_types/transaction/tests.rs: `tgt_db_dir.create_as_dir().unwrap();`
$DIR/storage/backup/backup-cli/src/backup_types/transaction/tests.rs: `backup_dir.create_as_dir().unwrap();`
$DIR/storage/backup/backup-cli/src/backup_types/transaction/tests.rs: `rt.block_on(
        TransactionRestoreController::new(
            TransactionRestoreOpt {
                manifest_handle,
                replay_from_version: None, // max
            },
            GlobalRestoreOpt {
                dry_run: false,
                db_dir: Some(tgt_db_dir.path().to_path_buf()),
                target_version: Some(target_version),
                trusted_waypoints: TrustedWaypointOpt::default(),
                rocksdb_opt: RocksdbOpt::default(),
                concurernt_downloads: ConcurrentDownloadsOpt::default(),
            }
            .try_into()
            .unwrap(),
            store,
            None, /* epoch_history */
        )
        .run(),
    )
    .unwrap();`
$DIR/storage/backup/backup-cli/src/backup_types/transaction/tests.rs: `.create_as_dir()`
$DIR/storage/backup/backup-cli/src/backup_types/transaction/tests.rs: `.create_as_dir()`
$DIR/storage/backup/backup-cli/src/backup_types/transaction/tests.rs: `.path()`
$DIR/storage/backup/backup-cli/src/backup_types/transaction/tests.rs: `.last()`
$DIR/storage/backup/backup-cli/src/backup_types/transaction/tests.rs: `.ledger_info()`
$DIR/storage/backup/backup-cli/src/backup_types/transaction/tests.rs: `.version()`
$DIR/storage/backup/backup-cli/src/backup_types/transaction/tests.rs: `.fold(0, |x, b| x + b.0.len())`
$DIR/storage/backup/backup-cli/src/backup_types/transaction/tests.rs: `.len()`
$DIR/storage/backup/backup-cli/src/backup_types/transaction/tests.rs: `.flat_map(|(txns, _li)| txns)`
$DIR/storage/backup/backup-cli/src/backup_types/transaction/tests.rs: `.map(|txn_to_commit| txn_to_commit.transaction())`
$DIR/storage/backup/backup-cli/src/backup_types/transaction/tests.rs: `.transaction()`
$DIR/storage/backup/backup-cli/src/backup_types/transaction/tests.rs: `.collect::<Vec<_>>()`
$DIR/storage/backup/backup-cli/src/backup_types/transaction/tests.rs: `.map(|t| bcs::to_bytes(t).unwrap().len())`
$DIR/storage/backup/backup-cli/src/backup_types/transaction/tests.rs: `.len()`
$DIR/storage/backup/backup-cli/src/backup_types/transaction/tests.rs: `.max()`
$DIR/storage/backup/backup-cli/src/backup_types/transaction/tests.rs: `.block_on(
            TransactionBackupController::new(
                TransactionBackupOpt {
                    start_version: first_ver_to_backup,
                    num_transactions: num_txns_to_backup,
                },
                GlobalBackupOpt { max_chunk_size },
                client,
                Arc::clone(&store),
            )
            .run(),
        )`
$DIR/storage/backup/backup-cli/src/backup_types/transaction/tests.rs: `.run()`
$DIR/storage/backup/backup-cli/src/backup_types/transaction/tests.rs: `.block_on(
        TransactionRestoreController::new(
            TransactionRestoreOpt {
                manifest_handle,
                replay_from_version: None, // max
            },
            GlobalRestoreOpt {
                dry_run: false,
                db_dir: Some(tgt_db_dir.path().to_path_buf()),
                target_version: Some(target_version),
                trusted_waypoints: TrustedWaypointOpt::default(),
                rocksdb_opt: RocksdbOpt::default(),
                concurernt_downloads: ConcurrentDownloadsOpt::default(),
            }
            .try_into()
            .unwrap(),
            store,
            None, /* epoch_history */
        )
        .run(),
    )`
$DIR/storage/backup/backup-cli/src/backup_types/transaction/tests.rs: `.path()`
$DIR/storage/backup/backup-cli/src/backup_types/transaction/tests.rs: `.try_into()`
$DIR/storage/backup/backup-cli/src/backup_types/transaction/tests.rs: `.run()`
$DIR/storage/backup/backup-cli/src/backup_types/transaction/tests.rs: `.get_transactions(
            first_ver_to_backup,
            num_txns_to_restore as u64,
            target_version,
            true, /* fetch_events */
        )`
$DIR/storage/backup/backup-cli/src/storage/command_adapter/tests.rs: `block_on(assert_commands_error(
        "echo okay; exec 1>&-; false; cat > /dev/null",
    ));`
$DIR/storage/backup/backup-cli/src/storage/command_adapter/tests.rs: `std::env::remove_var("MYVAR2343u2");`
$DIR/storage/backup/backup-cli/src/storage/command_adapter/tests.rs: `block_on(assert_commands_error(
        "echo $MYVAR2343u2 > /dev/null; echo okay; exec 1>&-; cat > /dev/null",
    ));`
$DIR/storage/backup/backup-cli/src/storage/command_adapter/tests.rs: `std::env::set_var("MYVAR2343u2", "hehe");`
$DIR/storage/backup/backup-cli/src/storage/command_adapter/tests.rs: `block_on(assert_commands_error(
        "echo okay | (cat; false) | cat; exec 1>&-; cat | (cat; true) | cat > /dev/null",
    ));`
$DIR/storage/backup/backup-cli/src/storage/command_adapter/tests.rs: `block_on(assert_commands_error(
        "echo okay | (cat; true) | cat; exec 1>&-; cat | (cat; false) | cat > /dev/null",
    ));`
$DIR/storage/backup/backup-cli/src/utils/read_record_bytes.rs: `good_record.extend_from_slice(data);`
$DIR/storage/backup/backup-cli/src/utils/read_record_bytes.rs: `bad_len.pop();`
$DIR/storage/backup/backup-cli/src/utils/read_record_bytes.rs: `bad_data.push(0u8);`
$DIR/storage/backup/backup-cli/src/utils/read_record_bytes.rs: `.len()`
$DIR/storage/backup/backup-cli/src/utils/read_record_bytes.rs: `.to_be_bytes()`
$DIR/storage/backup/backup-cli/src/utils/read_record_bytes.rs: `.extend_from_slice(data)`
$DIR/storage/backup/backup-cli/src/utils/read_record_bytes.rs: `.to_be_bytes()`
$DIR/storage/backup/backup-cli/src/utils/read_record_bytes.rs: `.to_be_bytes()`
$DIR/storage/backup/backup-cli/src/utils/read_record_bytes.rs: `.to_be_bytes()`
$DIR/storage/backup/backup-cli/src/utils/read_record_bytes.rs: `.pop()`
$DIR/storage/backup/backup-cli/src/utils/read_record_bytes.rs: `.to_be_bytes()`
$DIR/storage/backup/backup-cli/src/utils/read_record_bytes.rs: `.push(0u8)`
$DIR/storage/diem-scratchpad/src/sparse_merkle/sparse_merkle_test.rs: `*buf.last_mut().unwrap() |= 1;`
$DIR/storage/diem-scratchpad/src/sparse_merkle/sparse_merkle_test.rs: `siblings.push(leaf2_hash);`
$DIR/storage/diem-scratchpad/src/sparse_merkle/sparse_merkle_test.rs: `siblings.reverse();`
$DIR/storage/diem-scratchpad/src/sparse_merkle/sparse_merkle_test.rs: `drop(smt1);`
$DIR/storage/diem-scratchpad/src/sparse_merkle/sparse_merkle_test.rs: `.test_only_hash()`
$DIR/storage/diem-scratchpad/src/sparse_merkle/sparse_merkle_test.rs: `.test_only_hash()`
$DIR/storage/diem-scratchpad/src/sparse_merkle/sparse_merkle_test.rs: `.into()`
$DIR/storage/diem-scratchpad/src/sparse_merkle/sparse_merkle_test.rs: `.hash()`
$DIR/storage/diem-scratchpad/src/sparse_merkle/sparse_merkle_test.rs: `.batch_update(vec![(key, &new_value)], &ProofReader::default())`
$DIR/storage/diem-scratchpad/src/sparse_merkle/sparse_merkle_test.rs: `.test_only_hash()`
$DIR/storage/diem-scratchpad/src/sparse_merkle/sparse_merkle_test.rs: `.into()`
$DIR/storage/diem-scratchpad/src/sparse_merkle/sparse_merkle_test.rs: `.hash()`
$DIR/storage/diem-scratchpad/src/sparse_merkle/sparse_merkle_test.rs: `.batch_update(vec![(key2, &value2)], &ProofReader::default())`
$DIR/storage/diem-scratchpad/src/sparse_merkle/sparse_merkle_test.rs: `.test_only_hash()`
$DIR/storage/diem-scratchpad/src/sparse_merkle/sparse_merkle_test.rs: `.test_only_hash()`
$DIR/storage/diem-scratchpad/src/sparse_merkle/sparse_merkle_test.rs: `.into()`
$DIR/storage/diem-scratchpad/src/sparse_merkle/sparse_merkle_test.rs: `.hash()`
$DIR/storage/diem-scratchpad/src/sparse_merkle/sparse_merkle_test.rs: `.hash()`
$DIR/storage/diem-scratchpad/src/sparse_merkle/sparse_merkle_test.rs: `.batch_update(vec![(key3, &value3)], &ProofReader::default())`
$DIR/storage/diem-scratchpad/src/sparse_merkle/sparse_merkle_test.rs: `.test_only_hash()`
$DIR/storage/diem-scratchpad/src/sparse_merkle/sparse_merkle_test.rs: `.test_only_hash()`
$DIR/storage/diem-scratchpad/src/sparse_merkle/sparse_merkle_test.rs: `.hash()`
$DIR/storage/diem-scratchpad/src/sparse_merkle/sparse_merkle_test.rs: `.into()`
$DIR/storage/diem-scratchpad/src/sparse_merkle/sparse_merkle_test.rs: `.hash()`
$DIR/storage/diem-scratchpad/src/sparse_merkle/sparse_merkle_test.rs: `.batch_update(vec![(key, &new_value)], &proof_reader)`
$DIR/storage/diem-scratchpad/src/sparse_merkle/sparse_merkle_test.rs: `.test_only_hash()`
$DIR/storage/diem-scratchpad/src/sparse_merkle/sparse_merkle_test.rs: `.hash()`
$DIR/storage/diem-scratchpad/src/sparse_merkle/sparse_merkle_test.rs: `.into()`
$DIR/storage/diem-scratchpad/src/sparse_merkle/sparse_merkle_test.rs: `.hash()`
$DIR/storage/diem-scratchpad/src/sparse_merkle/sparse_merkle_test.rs: `.hash()`
$DIR/storage/diem-scratchpad/src/sparse_merkle/sparse_merkle_test.rs: `.batch_update(vec![(key2, &value2)], &proof_reader)`
$DIR/storage/diem-scratchpad/src/sparse_merkle/sparse_merkle_test.rs: `.test_only_hash()`
$DIR/storage/diem-scratchpad/src/sparse_merkle/sparse_merkle_test.rs: `.test_only_hash()`
$DIR/storage/diem-scratchpad/src/sparse_merkle/sparse_merkle_test.rs: `.into()`
$DIR/storage/diem-scratchpad/src/sparse_merkle/sparse_merkle_test.rs: `.hash()`
$DIR/storage/diem-scratchpad/src/sparse_merkle/sparse_merkle_test.rs: `.batch_update(vec![(key3, &value3)], &proof_reader)`
$DIR/storage/diem-scratchpad/src/sparse_merkle/sparse_merkle_test.rs: `.last_mut()`
$DIR/storage/diem-scratchpad/src/sparse_merkle/sparse_merkle_test.rs: `.hash()`
$DIR/storage/diem-scratchpad/src/sparse_merkle/sparse_merkle_test.rs: `.hash()`
$DIR/storage/diem-scratchpad/src/sparse_merkle/sparse_merkle_test.rs: `.take(255)`
$DIR/storage/diem-scratchpad/src/sparse_merkle/sparse_merkle_test.rs: `.collect()`
$DIR/storage/diem-scratchpad/src/sparse_merkle/sparse_merkle_test.rs: `.push(leaf2_hash)`
$DIR/storage/diem-scratchpad/src/sparse_merkle/sparse_merkle_test.rs: `.reverse()`
$DIR/storage/diem-scratchpad/src/sparse_merkle/sparse_merkle_test.rs: `.fold(leaf1_hash, |previous_hash, hash| {
        hash_internal(previous_hash, *hash)
    })`
$DIR/storage/diem-scratchpad/src/sparse_merkle/sparse_merkle_test.rs: `.batch_update(vec![(key1, &new_blob1)], &proof_reader)`
$DIR/storage/diem-scratchpad/src/sparse_merkle/sparse_merkle_test.rs: `.hash()`
$DIR/storage/diem-scratchpad/src/sparse_merkle/sparse_merkle_test.rs: `.fold(new_leaf1_hash, |previous_hash, hash| {
        hash_internal(previous_hash, *hash)
    })`
$DIR/storage/diem-scratchpad/src/sparse_merkle/sparse_merkle_test.rs: `.test_only_hash()`
$DIR/storage/diem-scratchpad/src/sparse_merkle/sparse_merkle_test.rs: `.test_only_hash()`
$DIR/storage/diem-scratchpad/src/sparse_merkle/sparse_merkle_test.rs: `.test_only_hash()`
$DIR/storage/diem-scratchpad/src/sparse_merkle/sparse_merkle_test.rs: `.hash()`
$DIR/storage/diem-scratchpad/src/sparse_merkle/sparse_merkle_test.rs: `.hash()`
$DIR/storage/diem-scratchpad/src/sparse_merkle/sparse_merkle_test.rs: `.hash()`
$DIR/storage/diem-scratchpad/src/sparse_merkle/sparse_merkle_test.rs: `.test_only_hash()`
$DIR/storage/diem-scratchpad/src/sparse_merkle/sparse_merkle_test.rs: `.hash()`
$DIR/storage/diem-scratchpad/src/sparse_merkle/sparse_merkle_test.rs: `.batch_update(vec![(key4, &value4)], &proof_reader)`
$DIR/storage/diem-scratchpad/src/sparse_merkle/sparse_merkle_test.rs: `.test_only_hash()`
$DIR/storage/diem-scratchpad/src/sparse_merkle/sparse_merkle_test.rs: `.hash()`
$DIR/storage/diem-scratchpad/src/sparse_merkle/sparse_merkle_test.rs: `.batch_update(vec![(key1, &value1)], &proof_reader)`
$DIR/storage/diem-scratchpad/src/sparse_merkle/sparse_merkle_test.rs: `.hash()`
$DIR/storage/diem-scratchpad/src/sparse_merkle/sparse_merkle_test.rs: `.batch_update(vec![(key4, &value4)], &proof_reader)`
$DIR/storage/diem-scratchpad/src/sparse_merkle/sparse_merkle_test.rs: `.batch_update(
                vec![(HashValue::zero(), &AccountStateBlob::from(b"zero".to_vec()))],
                &proof_reader,
            )`
$DIR/storage/diemdb/src/diemdb_test.rs: `db.db
        .put::<JellyfishMerkleNodeSchema>(
            &NodeKey::new_empty_path(PRE_GENESIS_VERSION),
            &Node::new_leaf(address.hash(), blob.clone()),
        )
        .unwrap();`
$DIR/storage/diemdb/src/diemdb_test.rs: `put_transaction_info(&db, 0, &txn_info);`
$DIR/storage/diemdb/src/diemdb_test.rs: `.get_latest_tree_state()`
$DIR/storage/diemdb/src/diemdb_test.rs: `.db
        .put::<JellyfishMerkleNodeSchema>(
            &NodeKey::new_empty_path(PRE_GENESIS_VERSION),
            &Node::new_leaf(address.hash(), blob.clone()),
        )`
$DIR/storage/diemdb/src/diemdb_test.rs: `.hash()`
$DIR/storage/diemdb/src/diemdb_test.rs: `.hash()`
$DIR/storage/diemdb/src/diemdb_test.rs: `.hash()`
$DIR/storage/diemdb/src/diemdb_test.rs: `.hash()`
$DIR/storage/diemdb/src/diemdb_test.rs: `.get_latest_tree_state()`
$DIR/storage/diemdb/src/diemdb_test.rs: `.get_latest_tree_state()`
$DIR/storage/diemdb/src/ledger_counters/test.rs: `bumps
        .bump(LedgerCounter::NewStateLeaves, 1)
        .bump(LedgerCounter::StaleStateLeaves, 1);`
$DIR/storage/diemdb/src/ledger_counters/test.rs: `counters.bump(&bumps);`
$DIR/storage/diemdb/src/ledger_counters/test.rs: `bumps
        .bump(LedgerCounter::EventsCreated, 1)
        .bump(LedgerCounter::NewStateLeaves, 1);`
$DIR/storage/diemdb/src/ledger_counters/test.rs: `counters.bump(&bumps);`
$DIR/storage/diemdb/src/ledger_counters/test.rs: `.bump(LedgerCounter::NewStateLeaves, 1)`
$DIR/storage/diemdb/src/ledger_counters/test.rs: `.bump(LedgerCounter::StaleStateLeaves, 1)`
$DIR/storage/diemdb/src/ledger_counters/test.rs: `.bump(&bumps)`
$DIR/storage/diemdb/src/ledger_counters/test.rs: `.bump(LedgerCounter::EventsCreated, 1)`
$DIR/storage/diemdb/src/ledger_counters/test.rs: `.bump(LedgerCounter::NewStateLeaves, 1)`
$DIR/storage/diemdb/src/ledger_counters/test.rs: `.bump(&bumps)`
$DIR/storage/diemdb/src/pruner/test.rs: `pruner.wake_and_wait(0 /* latest_version */).unwrap();`
$DIR/storage/diemdb/src/pruner/test.rs: `verify_state_in_store(state_store, address, Some(&value0), 0);`
$DIR/storage/diemdb/src/pruner/test.rs: `verify_state_in_store(state_store, address, Some(&value1), 1);`
$DIR/storage/diemdb/src/pruner/test.rs: `verify_state_in_store(state_store, address, Some(&value2), 2);`
$DIR/storage/diemdb/src/pruner/test.rs: `pruner.wake_and_wait(1 /* latest_version */).unwrap();`
$DIR/storage/diemdb/src/pruner/test.rs: `verify_state_in_store(state_store, address, Some(&value1), 1);`
$DIR/storage/diemdb/src/pruner/test.rs: `verify_state_in_store(state_store, address, Some(&value2), 2);`
$DIR/storage/diemdb/src/pruner/test.rs: `pruner.wake_and_wait(2 /* latest_version */).unwrap();`
$DIR/storage/diemdb/src/pruner/test.rs: `verify_state_in_store(state_store, address, Some(&value2), 2);`
$DIR/storage/diemdb/src/pruner/test.rs: `command_sender
            .send(Command::Prune {
                least_readable_version: 1,
            })
            .unwrap();`
$DIR/storage/diemdb/src/pruner/test.rs: `command_sender
            .send(Command::Prune {
                least_readable_version: 2,
            })
            .unwrap();`
$DIR/storage/diemdb/src/pruner/test.rs: `command_sender.send(Command::Quit).unwrap();`
$DIR/storage/diemdb/src/pruner/test.rs: `worker.work();`
$DIR/storage/diemdb/src/pruner/test.rs: `verify_state_in_store(state_store, address, Some(&value0), 0);`
$DIR/storage/diemdb/src/pruner/test.rs: `verify_state_in_store(state_store, address, Some(&value1), 1);`
$DIR/storage/diemdb/src/pruner/test.rs: `verify_state_in_store(state_store, address, Some(&value2), 2);`
$DIR/storage/diemdb/src/pruner/test.rs: `.wake_and_wait(0 /* latest_version */)`
$DIR/storage/diemdb/src/pruner/test.rs: `.wake_and_wait(1 /* latest_version */)`
$DIR/storage/diemdb/src/pruner/test.rs: `.wake_and_wait(2 /* latest_version */)`
$DIR/storage/diemdb/src/pruner/test.rs: `.send(Command::Prune {
                least_readable_version: 1,
            })`
$DIR/storage/diemdb/src/pruner/test.rs: `.send(Command::Prune {
                least_readable_version: 2,
            })`
$DIR/storage/diemdb/src/pruner/test.rs: `.send(Command::Quit)`
$DIR/storage/diemdb/src/pruner/test.rs: `.work()`
$DIR/storage/diemdb/src/state_store/state_store_test.rs: `verify_state_in_store(store, address1, Some(&value1), 0, root);`
$DIR/storage/diemdb/src/state_store/state_store_test.rs: `verify_state_in_store(store, address2, None, 0, root);`
$DIR/storage/diemdb/src/state_store/state_store_test.rs: `verify_state_in_store(store, address3, None, 0, root);`
$DIR/storage/diemdb/src/state_store/state_store_test.rs: `root = put_account_state_set(
        store,
        vec![
            (address1, value1_update.clone()),
            (address2, value2.clone()),
            (address3, value3.clone()),
        ],
        1, /* version */
        4, /* expected_nodes_created */
        1, /* expected_nodes_retired */
        1, /* expected_blobs_retired */
    );`
$DIR/storage/diemdb/src/state_store/state_store_test.rs: `verify_state_in_store(store, address1, Some(&value1_update), 1, root);`
$DIR/storage/diemdb/src/state_store/state_store_test.rs: `verify_state_in_store(store, address2, Some(&value2), 1, root);`
$DIR/storage/diemdb/src/state_store/state_store_test.rs: `prune_stale_indices(
            store, 0, /* least_readable_version */
            1, /* target_least_readable_version */
            0, /* limit */
        );`
$DIR/storage/diemdb/src/state_store/state_store_test.rs: `verify_state_in_store(store, address1, Some(&value1), 0, root0);`
$DIR/storage/diemdb/src/state_store/state_store_test.rs: `prune_stale_indices(
            store, 0,   /* least_readable_version */
            1,   /* target_least_readable_version */
            100, /* limit */
        );`
$DIR/storage/diemdb/src/state_store/state_store_test.rs: `verify_state_in_store(store, address1, Some(&value1), 1, root1);`
$DIR/storage/diemdb/src/state_store/state_store_test.rs: `verify_state_in_store(store, address2, Some(&value2_update), 1, root1);`
$DIR/storage/diemdb/src/state_store/state_store_test.rs: `verify_state_in_store(store, address3, Some(&value3), 1, root1);`
$DIR/storage/diemdb/src/state_store/state_store_test.rs: `prune_stale_indices(
            store, 1,   /* least_readable_version */
            2,   /* target_least_readable_version */
            100, /* limit */
        );`
$DIR/storage/diemdb/src/state_store/state_store_test.rs: `verify_state_in_store(store, address1, Some(&value1), 2, root2);`
$DIR/storage/diemdb/src/state_store/state_store_test.rs: `verify_state_in_store(store, address2, Some(&value2_update), 2, root2);`
$DIR/storage/diemdb/src/state_store/state_store_test.rs: `verify_state_in_store(store, address3, Some(&value3_update), 2, root2);`
$DIR/storage/jellyfish-merkle/src/iterator/iterator_test.rs: `test_n_leaves_same_version(i);`
$DIR/storage/jellyfish-merkle/src/iterator/iterator_test.rs: `.step_by(11)`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `db.write_tree_update_batch(batch).unwrap();`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `db.put_node(pre_genesis_root_key, Node::new_leaf(key1, value1.clone()))
        .unwrap();`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `db.write_tree_update_batch(batch).unwrap();`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `db.purge_stale_nodes(0).unwrap();`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `db.write_tree_update_batch(batch).unwrap();`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `db.write_tree_update_batch(batch).unwrap();`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `children.insert(
        Nibble::from(0),
        Child::new(leaf1.hash(), 1 /* version */, true /* is_leaf */),
    );`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `children.insert(
        Nibble::from(15),
        Child::new(leaf2.hash(), 1 /* version */, true /* is_leaf */),
    );`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `db.write_tree_update_batch(batch).unwrap();`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `db.write_tree_update_batch(batch).unwrap();`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `children.insert(
            Nibble::from(0),
            Child::new(leaf1.hash(), 1 /* version */, true /* is_leaf */),
        );`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `children.insert(
            Nibble::from(1),
            Child::new(leaf2.hash(), 1 /* version */, true /* is_leaf */),
        );`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `children.insert(
            Nibble::from(0),
            Child::new(
                internal.hash(),
                1,     /* version */
                false, /* is_leaf */
            ),
        );`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `db.write_tree_update_batch(batch).unwrap();`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `db.purge_stale_nodes(1).unwrap();`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `db.purge_stale_nodes(2).unwrap();`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `to_verify.remove(1);`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `db.write_tree_update_batch(batch).unwrap();`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `verify_fn(&tree, 0);`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `db.write_tree_update_batch(batch).unwrap();`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `verify_fn(&tree, 6);`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `db.purge_stale_nodes(1).unwrap();`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `db.purge_stale_nodes(2).unwrap();`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `db.purge_stale_nodes(3).unwrap();`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `db.purge_stale_nodes(4).unwrap();`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `db.purge_stale_nodes(5).unwrap();`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `db.purge_stale_nodes(6).unwrap();`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `verify_fn(&tree, 6);`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `db.write_tree_update_batch(batch).unwrap();`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `keys.push(HashValue::random());`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `values.push(ValueBlob::from(HashValue::random().to_vec()));`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `keyed_value_set.push(iter.next().unwrap());`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `db.write_tree_update_batch(batch.clone()).unwrap();`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `root_hashes_one_by_one.push(root);`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `batch_one_by_one.node_batch.extend(batch.node_batch);`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `batch_one_by_one
                .stale_node_index_batch
                .extend(batch.stale_node_index_batch);`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `batch_one_by_one.node_stats.extend(batch.node_stats);`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `keyed_value_set.push(iter.next().unwrap());`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `value_sets.push(keyed_value_set);`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `.batch_put_value_sets(vec![vec![(key, value.clone())]], None, 0 /* version */)`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `.write_tree_update_batch(batch)`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `.put_node(pre_genesis_root_key, Node::new_leaf(key1, value1.clone()))`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `.batch_put_value_sets(
            vec![vec![(key2, value2.clone())]],
            None,
            0, /* version */
        )`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `.write_tree_update_batch(batch)`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `.purge_stale_nodes(0)`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `.batch_put_value_sets(
            vec![vec![(key1, value1.clone())]],
            None,
            0, /* version */
        )`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `.write_tree_update_batch(batch)`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `.batch_put_value_sets(
            vec![vec![(key2, value2.clone())]],
            None,
            1, /* version */
        )`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `.write_tree_update_batch(batch)`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `.insert(
        Nibble::from(0),
        Child::new(leaf1.hash(), 1 /* version */, true /* is_leaf */),
    )`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `.hash()`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `.insert(
        Nibble::from(15),
        Child::new(leaf2.hash(), 1 /* version */, true /* is_leaf */),
    )`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `.hash()`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `.batch_put_value_sets(
            vec![vec![(key1, value1.clone())]],
            None,
            0, /* version */
        )`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `.write_tree_update_batch(batch)`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `.batch_put_value_sets(
            vec![vec![(key2, value2.clone())]],
            None,
            1, /* version */
        )`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `.write_tree_update_batch(batch)`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `.insert(
            Nibble::from(0),
            Child::new(leaf1.hash(), 1 /* version */, true /* is_leaf */),
        )`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `.hash()`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `.insert(
            Nibble::from(1),
            Child::new(leaf2.hash(), 1 /* version */, true /* is_leaf */),
        )`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `.hash()`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `.insert(
            Nibble::from(0),
            Child::new(
                internal.hash(),
                1,     /* version */
                false, /* is_leaf */
            ),
        )`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `.hash()`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `.batch_put_value_sets(
            vec![vec![(key2, value2_update.clone())]],
            None,
            2, /* version */
        )`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `.write_tree_update_batch(batch)`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `.purge_stale_nodes(1)`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `.purge_stale_nodes(2)`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `.flatten()`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `.collect::<Vec<_>>()`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `.remove(1)`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `.put_value_set(one_batch, 0 /* version */)`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `.write_tree_update_batch(batch)`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `.batch_put_value_sets(batches, None, 0 /* first_version */)`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `.write_tree_update_batch(batch)`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `.purge_stale_nodes(1)`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `.purge_stale_nodes(2)`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `.purge_stale_nodes(3)`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `.purge_stale_nodes(4)`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `.purge_stale_nodes(5)`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `.purge_stale_nodes(6)`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `.batch_put_value_sets(
            vec![vec![
                (key1, value1.clone()),
                (key2, value2.clone()),
                (key3, value3.clone()),
            ]],
            None,
            0, /* version */
        )`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `.write_tree_update_batch(batch)`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `.get_with_proof(non_existing_key, 0)`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `.get_with_proof(non_existing_key, 0)`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `.get_with_proof(non_existing_key, 0)`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `.get_with_proof(HashValue::random(), 0)`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `.err()`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `.downcast::<MissingRootError>()`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `.push(HashValue::random())`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `.push(ValueBlob::from(HashValue::random().to_vec()))`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `.into_iter()`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `.zip(values.clone().into_iter())`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `.into_iter()`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `.push(iter.next().unwrap())`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `.next()`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `.put_value_set(keyed_value_set, version as Version)`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `.write_tree_update_batch(batch.clone())`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `.push(root)`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `.node_batch.extend(batch.node_batch)`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `.stale_node_index_batch
                .extend(batch.stale_node_index_batch)`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `.node_stats.extend(batch.node_stats)`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `.into_iter()`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `.zip(values.into_iter())`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `.into_iter()`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `.push(iter.next().unwrap())`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `.next()`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `.push(keyed_value_set)`
$DIR/storage/jellyfish-merkle/src/jellyfish_merkle_test.rs: `.batch_put_value_sets(value_sets, None, 0 /* version */)`
$DIR/storage/jellyfish-merkle/src/lib.rs: `.test_only_hash()`
$DIR/storage/jellyfish-merkle/src/lib.rs: `.test_only_hash()`
$DIR/storage/jellyfish-merkle/src/lib.rs: `.test_only_hash()`
$DIR/storage/jellyfish-merkle/src/lib.rs: `.test_only_hash()`
$DIR/storage/jellyfish-merkle/src/lib.rs: `.test_only_hash()`
$DIR/storage/jellyfish-merkle/src/lib.rs: `.test_only_hash()`
$DIR/storage/jellyfish-merkle/src/lib.rs: `.test_only_hash()`
$DIR/storage/jellyfish-merkle/src/lib.rs: `.test_only_hash()`
$DIR/storage/jellyfish-merkle/src/lib.rs: `.test_only_hash()`
$DIR/storage/jellyfish-merkle/src/node_type/node_type_test.rs: `children.insert(
        Nibble::from(1),
        Child::new(leaf1_node.hash(), 0 /* version */, true),
    );`
$DIR/storage/jellyfish-merkle/src/node_type/node_type_test.rs: `children.insert(
        Nibble::from(2),
        Child::new(leaf2_node.hash(), 0 /* version */, true),
    );`
$DIR/storage/jellyfish-merkle/src/node_type/node_type_test.rs: `children.insert(
            Nibble::from(1),
            Child::new(
                HashValue::random(),
                0,    /* version */
                true, /* is_leaf */
            ),
        );`
$DIR/storage/jellyfish-merkle/src/node_type/node_type_test.rs: `InternalNode::new(children);`
$DIR/storage/jellyfish-merkle/src/node_type/node_type_test.rs: `children.insert(index1, Child::new(hash1, 0 /* version */, false));`
$DIR/storage/jellyfish-merkle/src/node_type/node_type_test.rs: `children.insert(index2, Child::new(hash2, 1 /* version */, false));`
$DIR/storage/jellyfish-merkle/src/node_type/node_type_test.rs: `children.insert(index1, Child::new(hash1, 0 /* version */, false));`
$DIR/storage/jellyfish-merkle/src/node_type/node_type_test.rs: `children.insert(index2, Child::new(hash2, 1 /* version */, false));`
$DIR/storage/jellyfish-merkle/src/node_type/node_type_test.rs: `.nibble_path()`
$DIR/storage/jellyfish-merkle/src/node_type/node_type_test.rs: `.nibble_path()`
$DIR/storage/jellyfish-merkle/src/node_type/node_type_test.rs: `.insert(
        Nibble::from(1),
        Child::new(leaf1_node.hash(), 0 /* version */, true),
    )`
$DIR/storage/jellyfish-merkle/src/node_type/node_type_test.rs: `.hash()`
$DIR/storage/jellyfish-merkle/src/node_type/node_type_test.rs: `.insert(
        Nibble::from(2),
        Child::new(leaf2_node.hash(), 0 /* version */, true),
    )`
$DIR/storage/jellyfish-merkle/src/node_type/node_type_test.rs: `.hash()`
$DIR/storage/jellyfish-merkle/src/node_type/node_type_test.rs: `.encode()`
$DIR/storage/jellyfish-merkle/src/node_type/node_type_test.rs: `.insert(
            Nibble::from(1),
            Child::new(
                HashValue::random(),
                0,    /* version */
                true, /* is_leaf */
            ),
        )`
$DIR/storage/jellyfish-merkle/src/node_type/node_type_test.rs: `.hash()`
$DIR/storage/jellyfish-merkle/src/node_type/node_type_test.rs: `.nibble_path()`
$DIR/storage/jellyfish-merkle/src/node_type/node_type_test.rs: `.nibble_path()`
$DIR/storage/jellyfish-merkle/src/node_type/node_type_test.rs: `.insert(index1, Child::new(hash1, 0 /* version */, false))`
$DIR/storage/jellyfish-merkle/src/node_type/node_type_test.rs: `.insert(index2, Child::new(hash2, 1 /* version */, false))`
$DIR/storage/jellyfish-merkle/src/node_type/node_type_test.rs: `.nibble_path()`
$DIR/storage/jellyfish-merkle/src/node_type/node_type_test.rs: `.nibble_path()`
$DIR/storage/jellyfish-merkle/src/node_type/node_type_test.rs: `.insert(index1, Child::new(hash1, 0 /* version */, false))`
$DIR/storage/jellyfish-merkle/src/node_type/node_type_test.rs: `.insert(index2, Child::new(hash2, 1 /* version */, false))`
$DIR/storage/jellyfish-merkle/src/tree_cache/tree_cache_test.rs: `db.put_node(node_key.clone(), node.clone()).unwrap();`
$DIR/storage/jellyfish-merkle/src/tree_cache/tree_cache_test.rs: `db.put_node(node_key.clone(), node).unwrap();`
$DIR/storage/jellyfish-merkle/src/tree_cache/tree_cache_test.rs: `cache.set_root_node_key(node_key.clone());`
$DIR/storage/jellyfish-merkle/src/tree_cache/tree_cache_test.rs: `db.put_node(pre_genesis_root_key.clone(), pre_genesis_only_node)
        .unwrap();`
$DIR/storage/jellyfish-merkle/src/tree_cache/tree_cache_test.rs: `cache.put_node(node1_key.clone(), node1.clone()).unwrap();`
$DIR/storage/jellyfish-merkle/src/tree_cache/tree_cache_test.rs: `cache.put_node(node2_key.clone(), node2.clone()).unwrap();`
$DIR/storage/jellyfish-merkle/src/tree_cache/tree_cache_test.rs: `cache.freeze();`
$DIR/storage/jellyfish-merkle/src/tree_cache/tree_cache_test.rs: `cache.delete_node(&node1_key, true /* is_leaf */);`
$DIR/storage/jellyfish-merkle/src/tree_cache/tree_cache_test.rs: `cache.freeze();`
$DIR/storage/jellyfish-merkle/src/tree_cache/tree_cache_test.rs: `.put_node(node_key.clone(), node.clone())`
$DIR/storage/jellyfish-merkle/src/tree_cache/tree_cache_test.rs: `.put_node(node_key.clone(), node)`
$DIR/storage/jellyfish-merkle/src/tree_cache/tree_cache_test.rs: `.set_root_node_key(node_key.clone())`
$DIR/storage/jellyfish-merkle/src/tree_cache/tree_cache_test.rs: `.put_node(pre_genesis_root_key.clone(), pre_genesis_only_node)`
$DIR/storage/jellyfish-merkle/src/tree_cache/tree_cache_test.rs: `.put_node(node1_key.clone(), node1.clone())`
$DIR/storage/jellyfish-merkle/src/tree_cache/tree_cache_test.rs: `.put_node(node2_key.clone(), node2.clone())`
$DIR/storage/jellyfish-merkle/src/tree_cache/tree_cache_test.rs: `.freeze()`
$DIR/storage/jellyfish-merkle/src/tree_cache/tree_cache_test.rs: `.delete_node(&node1_key, true /* is_leaf */)`
$DIR/storage/jellyfish-merkle/src/tree_cache/tree_cache_test.rs: `.freeze()`
$DIR/storage/jellyfish-merkle/src/tree_cache/tree_cache_test.rs: `.into()`
$DIR/storage/schemadb/tests/db.rs: `db.put::<TestSchema1>(&TestField(0), &TestField(0)).unwrap();`
$DIR/storage/schemadb/tests/db.rs: `db.put::<TestSchema1>(&TestField(1), &TestField(1)).unwrap();`
$DIR/storage/schemadb/tests/db.rs: `db.put::<TestSchema1>(&TestField(2), &TestField(2)).unwrap();`
$DIR/storage/schemadb/tests/db.rs: `db.put::<TestSchema2>(&TestField(2), &TestField(3)).unwrap();`
$DIR/storage/schemadb/tests/db.rs: `db.put::<TestSchema2>(&TestField(3), &TestField(4)).unwrap();`
$DIR/storage/schemadb/tests/db.rs: `db.put::<TestSchema2>(&TestField(4), &TestField(5)).unwrap();`
$DIR/storage/schemadb/tests/db.rs: `db_batch
        .put::<TestSchema1>(&TestField(0), &TestField(0))
        .unwrap();`
$DIR/storage/schemadb/tests/db.rs: `db_batch
        .put::<TestSchema1>(&TestField(1), &TestField(1))
        .unwrap();`
$DIR/storage/schemadb/tests/db.rs: `db_batch
        .put::<TestSchema1>(&TestField(2), &TestField(2))
        .unwrap();`
$DIR/storage/schemadb/tests/db.rs: `db_batch
        .put::<TestSchema2>(&TestField(3), &TestField(3))
        .unwrap();`
$DIR/storage/schemadb/tests/db.rs: `db_batch.delete::<TestSchema2>(&TestField(4)).unwrap();`
$DIR/storage/schemadb/tests/db.rs: `db_batch.delete::<TestSchema2>(&TestField(3)).unwrap();`
$DIR/storage/schemadb/tests/db.rs: `db_batch
        .put::<TestSchema2>(&TestField(4), &TestField(4))
        .unwrap();`
$DIR/storage/schemadb/tests/db.rs: `db_batch
        .put::<TestSchema2>(&TestField(5), &TestField(5))
        .unwrap();`
$DIR/storage/schemadb/tests/db.rs: `db.write_schemas(db_batch).unwrap();`
$DIR/storage/schemadb/tests/db.rs: `db_batch1
        .put::<TestSchema1>(&TestField(0), &TestField(0))
        .unwrap();`
$DIR/storage/schemadb/tests/db.rs: `db_batch1
        .put::<TestSchema1>(&TestField(1), &TestField(1))
        .unwrap();`
$DIR/storage/schemadb/tests/db.rs: `db_batch1
        .put::<TestSchema1>(&TestField(2), &TestField(2))
        .unwrap();`
$DIR/storage/schemadb/tests/db.rs: `db_batch1.delete::<TestSchema1>(&TestField(2)).unwrap();`
$DIR/storage/schemadb/tests/db.rs: `db.write_schemas(db_batch1).unwrap();`
$DIR/storage/schemadb/tests/db.rs: `db_batch2.delete::<TestSchema2>(&TestField(3)).unwrap();`
$DIR/storage/schemadb/tests/db.rs: `db_batch2
        .put::<TestSchema2>(&TestField(3), &TestField(3))
        .unwrap();`
$DIR/storage/schemadb/tests/db.rs: `db_batch2
        .put::<TestSchema2>(&TestField(4), &TestField(4))
        .unwrap();`
$DIR/storage/schemadb/tests/db.rs: `db_batch2
        .put::<TestSchema2>(&TestField(5), &TestField(5))
        .unwrap();`
$DIR/storage/schemadb/tests/db.rs: `db.write_schemas(db_batch2).unwrap();`
$DIR/storage/schemadb/tests/db.rs: `db.put::<TestSchema1>(&TestField(0), &TestField(0)).unwrap();`
$DIR/storage/schemadb/tests/db.rs: `db.put::<TestSchema1>(&TestField(0), &TestField(0)).unwrap();`
$DIR/storage/schemadb/tests/db.rs: `db.put::<TestSchema1>(&TestField(0), &TestField(0)).unwrap();`
$DIR/storage/schemadb/tests/db.rs: `db_batch
            .put::<TestSchema1>(&TestField(i), &TestField(i))
            .unwrap();`
$DIR/storage/schemadb/tests/db.rs: `db_batch
            .put::<TestSchema2>(&TestField(i), &TestField(i))
            .unwrap();`
$DIR/storage/schemadb/tests/db.rs: `db.write_schemas(db_batch).unwrap();`
$DIR/storage/schemadb/tests/db.rs: `db.flush_all().unwrap();`
$DIR/storage/schemadb/tests/db.rs: `.put::<TestSchema1>(&TestField(0), &TestField(0))`
$DIR/storage/schemadb/tests/db.rs: `.put::<TestSchema1>(&TestField(1), &TestField(1))`
$DIR/storage/schemadb/tests/db.rs: `.put::<TestSchema1>(&TestField(2), &TestField(2))`
$DIR/storage/schemadb/tests/db.rs: `.put::<TestSchema2>(&TestField(2), &TestField(3))`
$DIR/storage/schemadb/tests/db.rs: `.put::<TestSchema2>(&TestField(3), &TestField(4))`
$DIR/storage/schemadb/tests/db.rs: `.put::<TestSchema2>(&TestField(4), &TestField(5))`
$DIR/storage/schemadb/tests/db.rs: `.put::<TestSchema1>(&TestField(0), &TestField(0))`
$DIR/storage/schemadb/tests/db.rs: `.put::<TestSchema1>(&TestField(1), &TestField(1))`
$DIR/storage/schemadb/tests/db.rs: `.put::<TestSchema1>(&TestField(2), &TestField(2))`
$DIR/storage/schemadb/tests/db.rs: `.put::<TestSchema2>(&TestField(3), &TestField(3))`
$DIR/storage/schemadb/tests/db.rs: `.delete::<TestSchema2>(&TestField(4))`
$DIR/storage/schemadb/tests/db.rs: `.delete::<TestSchema2>(&TestField(3))`
$DIR/storage/schemadb/tests/db.rs: `.put::<TestSchema2>(&TestField(4), &TestField(4))`
$DIR/storage/schemadb/tests/db.rs: `.put::<TestSchema2>(&TestField(5), &TestField(5))`
$DIR/storage/schemadb/tests/db.rs: `.write_schemas(db_batch)`
$DIR/storage/schemadb/tests/db.rs: `.put::<TestSchema1>(&TestField(0), &TestField(0))`
$DIR/storage/schemadb/tests/db.rs: `.put::<TestSchema1>(&TestField(1), &TestField(1))`
$DIR/storage/schemadb/tests/db.rs: `.put::<TestSchema1>(&TestField(2), &TestField(2))`
$DIR/storage/schemadb/tests/db.rs: `.delete::<TestSchema1>(&TestField(2))`
$DIR/storage/schemadb/tests/db.rs: `.write_schemas(db_batch1)`
$DIR/storage/schemadb/tests/db.rs: `.delete::<TestSchema2>(&TestField(3))`
$DIR/storage/schemadb/tests/db.rs: `.put::<TestSchema2>(&TestField(3), &TestField(3))`
$DIR/storage/schemadb/tests/db.rs: `.put::<TestSchema2>(&TestField(4), &TestField(4))`
$DIR/storage/schemadb/tests/db.rs: `.put::<TestSchema2>(&TestField(5), &TestField(5))`
$DIR/storage/schemadb/tests/db.rs: `.write_schemas(db_batch2)`
$DIR/storage/schemadb/tests/db.rs: `.put::<TestSchema1>(&TestField(0), &TestField(0))`
$DIR/storage/schemadb/tests/db.rs: `.put::<TestSchema1>(&TestField(0), &TestField(0))`
$DIR/storage/schemadb/tests/db.rs: `.put::<TestSchema1>(&TestField(0), &TestField(0))`
$DIR/storage/schemadb/tests/db.rs: `.put::<TestSchema1>(&TestField(i), &TestField(i))`
$DIR/storage/schemadb/tests/db.rs: `.put::<TestSchema2>(&TestField(i), &TestField(i))`
$DIR/storage/schemadb/tests/db.rs: `.write_schemas(db_batch)`
$DIR/storage/schemadb/tests/db.rs: `.flush_all()`
$DIR/storage/schemadb/tests/iterator.rs: `iter.seek_to_first();`
$DIR/storage/schemadb/tests/iterator.rs: `iter.seek_to_first();`
$DIR/storage/schemadb/tests/iterator.rs: `iter.seek_to_last();`
$DIR/storage/schemadb/tests/iterator.rs: `iter.seek_to_last();`
$DIR/storage/schemadb/tests/iterator.rs: `iter.seek(&TestKey(1, 1, 0)).unwrap();`
$DIR/storage/schemadb/tests/iterator.rs: `iter.seek(&TestKey(1, 1, 0)).unwrap();`
$DIR/storage/schemadb/tests/iterator.rs: `iter.seek(&TestKey(1, 1, 1)).unwrap();`
$DIR/storage/schemadb/tests/iterator.rs: `iter.seek(&TestKey(1, 1, 1)).unwrap();`
$DIR/storage/schemadb/tests/iterator.rs: `iter.seek_for_prev(&TestKey(1, 1, 0)).unwrap();`
$DIR/storage/schemadb/tests/iterator.rs: `iter.seek_for_prev(&TestKey(1, 1, 0)).unwrap();`
$DIR/storage/schemadb/tests/iterator.rs: `iter.seek_for_prev(&TestKey(1, 1, 1)).unwrap();`
$DIR/storage/schemadb/tests/iterator.rs: `iter.seek_for_prev(&TestKey(1, 1, 1)).unwrap();`
$DIR/storage/schemadb/tests/iterator.rs: `iter.seek(&KeyPrefix1(2)).unwrap();`
$DIR/storage/schemadb/tests/iterator.rs: `iter.seek(&KeyPrefix1(2)).unwrap();`
$DIR/storage/schemadb/tests/iterator.rs: `iter.seek_for_prev(&KeyPrefix1(2)).unwrap();`
$DIR/storage/schemadb/tests/iterator.rs: `iter.seek_for_prev(&KeyPrefix1(2)).unwrap();`
$DIR/storage/schemadb/tests/iterator.rs: `iter.seek(&KeyPrefix2(2, 0)).unwrap();`
$DIR/storage/schemadb/tests/iterator.rs: `iter.seek(&KeyPrefix2(2, 0)).unwrap();`
$DIR/storage/schemadb/tests/iterator.rs: `iter.seek_for_prev(&KeyPrefix2(2, 0)).unwrap();`
$DIR/storage/schemadb/tests/iterator.rs: `iter.seek_for_prev(&KeyPrefix2(2, 0)).unwrap();`
$DIR/storage/schemadb/tests/iterator.rs: `.seek_to_first()`
$DIR/storage/schemadb/tests/iterator.rs: `.rev_iter()`
$DIR/storage/schemadb/tests/iterator.rs: `.seek_to_first()`
$DIR/storage/schemadb/tests/iterator.rs: `.seek_to_last()`
$DIR/storage/schemadb/tests/iterator.rs: `.rev_iter()`
$DIR/storage/schemadb/tests/iterator.rs: `.seek_to_last()`
$DIR/storage/schemadb/tests/iterator.rs: `.seek(&TestKey(1, 1, 0))`
$DIR/storage/schemadb/tests/iterator.rs: `.rev_iter()`
$DIR/storage/schemadb/tests/iterator.rs: `.seek(&TestKey(1, 1, 0))`
$DIR/storage/schemadb/tests/iterator.rs: `.seek(&TestKey(1, 1, 1))`
$DIR/storage/schemadb/tests/iterator.rs: `.rev_iter()`
$DIR/storage/schemadb/tests/iterator.rs: `.seek(&TestKey(1, 1, 1))`
$DIR/storage/schemadb/tests/iterator.rs: `.seek_for_prev(&TestKey(1, 1, 0))`
$DIR/storage/schemadb/tests/iterator.rs: `.rev_iter()`
$DIR/storage/schemadb/tests/iterator.rs: `.seek_for_prev(&TestKey(1, 1, 0))`
$DIR/storage/schemadb/tests/iterator.rs: `.seek_for_prev(&TestKey(1, 1, 1))`
$DIR/storage/schemadb/tests/iterator.rs: `.rev_iter()`
$DIR/storage/schemadb/tests/iterator.rs: `.seek_for_prev(&TestKey(1, 1, 1))`
$DIR/storage/schemadb/tests/iterator.rs: `.seek(&KeyPrefix1(2))`
$DIR/storage/schemadb/tests/iterator.rs: `.rev_iter()`
$DIR/storage/schemadb/tests/iterator.rs: `.seek(&KeyPrefix1(2))`
$DIR/storage/schemadb/tests/iterator.rs: `.seek_for_prev(&KeyPrefix1(2))`
$DIR/storage/schemadb/tests/iterator.rs: `.rev_iter()`
$DIR/storage/schemadb/tests/iterator.rs: `.seek_for_prev(&KeyPrefix1(2))`
$DIR/storage/schemadb/tests/iterator.rs: `.seek(&KeyPrefix2(2, 0))`
$DIR/storage/schemadb/tests/iterator.rs: `.rev_iter()`
$DIR/storage/schemadb/tests/iterator.rs: `.seek(&KeyPrefix2(2, 0))`
$DIR/storage/schemadb/tests/iterator.rs: `.seek_for_prev(&KeyPrefix2(2, 0))`
$DIR/storage/schemadb/tests/iterator.rs: `.rev_iter()`
$DIR/storage/schemadb/tests/iterator.rs: `.seek_for_prev(&KeyPrefix2(2, 0))`
$DIR/testsuite/cli/diem-wallet/src/key_factory.rs: `child_1_again.increment();`
$DIR/testsuite/cli/diem-wallet/src/key_factory.rs: `.private_child(ChildNumber(0))`
$DIR/testsuite/cli/diem-wallet/src/key_factory.rs: `.private_child(ChildNumber(0))`
$DIR/testsuite/cli/diem-wallet/src/key_factory.rs: `.private_child(ChildNumber(1))`
$DIR/testsuite/cli/diem-wallet/src/key_factory.rs: `.increment()`
$DIR/testsuite/cli/diem-wallet/src/key_factory.rs: `.private_child(child_1_again)`
$DIR/testsuite/cli/diem-wallet/src/mnemonic.rs: `rng.fill_bytes(&mut buf[..]);`
$DIR/testsuite/cli/diem-wallet/src/mnemonic.rs: `mnemonic.write(path).unwrap();`
$DIR/testsuite/cli/diem-wallet/src/mnemonic.rs: `mnemonic = "abandon abandon abandon abandon abandon abandon abandon abandon abandon abandon abandon zoo";`
$DIR/testsuite/cli/diem-wallet/src/mnemonic.rs: `computed_mnemonic = Mnemonic::from(mnemonic);`
$DIR/testsuite/cli/diem-wallet/src/mnemonic.rs: `mnemonic = "void come effort suffer camp survey warrior heavy shoot primary clutch crush open amazing screen patrol group space point ten exist slush involve holiday";`
$DIR/testsuite/cli/diem-wallet/src/mnemonic.rs: `computed_mnemonic = Mnemonic::from(mnemonic);`
$DIR/testsuite/cli/diem-wallet/src/mnemonic.rs: `.fill_bytes(&mut buf[..])`
$DIR/testsuite/cli/diem-wallet/src/mnemonic.rs: `.path()`
$DIR/testsuite/cli/diem-wallet/src/mnemonic.rs: `.write(path)`
$DIR/testsuite/cli/diem-wallet/src/mnemonic.rs: `.step_by(4)`
$DIR/testsuite/cli/diem-wallet/src/mnemonic.rs: `.step_by(4)`
$DIR/testsuite/cli/src/client_proxy.rs: `io_utils::write_recovery(&client.wallet, &path).expect("failed to write to file");`
$DIR/testsuite/cli/src/client_proxy.rs: `.path()`
$DIR/testsuite/diem-fuzzer/src/coverage.rs: `target.fuzz(&data);`
$DIR/testsuite/diem-fuzzer/src/coverage.rs: `.read_dir()`
$DIR/testsuite/diem-fuzzer/src/coverage.rs: `.path()`
$DIR/testsuite/diem-fuzzer/src/coverage.rs: `.file_name()`
$DIR/testsuite/diem-fuzzer/src/coverage.rs: `.to_str()`
$DIR/testsuite/diem-fuzzer/src/coverage.rs: `.unwrap_or_else(|| panic!("unknown fuzz target: {}", target_name))`
$DIR/testsuite/diem-fuzzer/src/coverage.rs: `.read_dir()`
$DIR/testsuite/diem-fuzzer/src/coverage.rs: `.path()`
$DIR/testsuite/diem-fuzzer/src/coverage.rs: `.fuzz(&data)`
$DIR/testsuite/forge/src/txn_emitter/atomic_histogram.rs: `cur_vec.push(i);`
$DIR/testsuite/forge/src/txn_emitter/atomic_histogram.rs: `cur_snap.buckets = cur_vec;`
$DIR/testsuite/forge/src/txn_emitter/atomic_histogram.rs: `prev_vec.push(i);`
$DIR/testsuite/forge/src/txn_emitter/atomic_histogram.rs: `pre_snap.buckets = prev_vec;`
$DIR/testsuite/forge/src/txn_emitter/atomic_histogram.rs: `histogram.record_data_point(i as u64 * 100, 1);`
$DIR/testsuite/forge/src/txn_emitter/atomic_histogram.rs: `.push(i)`
$DIR/testsuite/forge/src/txn_emitter/atomic_histogram.rs: `.push(i)`
$DIR/testsuite/forge/src/txn_emitter/atomic_histogram.rs: `.record_data_point(i as u64 * 100, 1)`
$DIR/testsuite/forge/src/txn_emitter/atomic_histogram.rs: `.snapshot()`
$DIR/testsuite/forge/src/txn_emitter/atomic_histogram.rs: `.latency_buckets.percentile(9, 10)`
$DIR/testsuite/smoke-test/src/client.rs: `check_create_mint_transfer(&mut swarm);`
$DIR/testsuite/smoke-test/src/client.rs: `node_config.json_rpc.stream_rpc.enabled = true;`
$DIR/testsuite/smoke-test/src/client.rs: `node_config.save(validator.config_path()).unwrap();`
$DIR/testsuite/smoke-test/src/client.rs: `validator.restart().unwrap();`
$DIR/testsuite/smoke-test/src/client.rs: `validator
            .wait_until_healthy(Instant::now() + Duration::from_secs(10))
            .unwrap();`
$DIR/testsuite/smoke-test/src/client.rs: `streaming_url
        .set_scheme("ws")
        .expect("Could not set scheme");`
$DIR/testsuite/smoke-test/src/client.rs: `streaming_url.set_path("/v1/stream/ws");`
$DIR/testsuite/smoke-test/src/client.rs: `drop(subscription_stream);`
$DIR/testsuite/smoke-test/src/client.rs: `rt.block_on(sleep(ms_500));`
$DIR/testsuite/smoke-test/src/client.rs: `swarm.validators_mut().nth(3).unwrap().stop();`
$DIR/testsuite/smoke-test/src/client.rs: `transfer_coins(
        &client,
        &transaction_factory,
        &mut account_0,
        &account_1,
        10,
    );`
$DIR/testsuite/smoke-test/src/client.rs: `assert_balance(&client, &account_0, 90);`
$DIR/testsuite/smoke-test/src/client.rs: `assert_balance(&client, &account_1, 20);`
$DIR/testsuite/smoke-test/src/client.rs: `validator.restart().unwrap();`
$DIR/testsuite/smoke-test/src/client.rs: `validator
        .wait_until_healthy(Instant::now() + Duration::from_secs(10))
        .unwrap();`
$DIR/testsuite/smoke-test/src/client.rs: `assert_balance(&client, &account_0, 90);`
$DIR/testsuite/smoke-test/src/client.rs: `assert_balance(&client, &account_1, 20);`
$DIR/testsuite/smoke-test/src/client.rs: `transfer_coins(
        &client,
        &transaction_factory,
        &mut account_0,
        &account_1,
        10,
    );`
$DIR/testsuite/smoke-test/src/client.rs: `assert_balance(&client, &account_0, 80);`
$DIR/testsuite/smoke-test/src/client.rs: `assert_balance(&client, &account_0, 100);`
$DIR/testsuite/smoke-test/src/client.rs: `assert_balance(&client, &account_1, 10);`
$DIR/testsuite/smoke-test/src/client.rs: `client.submit(&txn).unwrap();`
$DIR/testsuite/smoke-test/src/client.rs: `transfer_coins(&client, &transaction_factory, &mut account_0, &account_1, 1);`
$DIR/testsuite/smoke-test/src/client.rs: `assert_balance(&client, &account_0, 79);`
$DIR/testsuite/smoke-test/src/client.rs: `.validators()`
$DIR/testsuite/smoke-test/src/client.rs: `.next()`
$DIR/testsuite/smoke-test/src/client.rs: `.json_rpc_client()`
$DIR/testsuite/smoke-test/src/client.rs: `.get_metadata()`
$DIR/testsuite/smoke-test/src/client.rs: `.into_inner()`
$DIR/testsuite/smoke-test/src/client.rs: `.validators_mut()`
$DIR/testsuite/smoke-test/src/client.rs: `.config()`
$DIR/testsuite/smoke-test/src/client.rs: `.save(validator.config_path())`
$DIR/testsuite/smoke-test/src/client.rs: `.config_path()`
$DIR/testsuite/smoke-test/src/client.rs: `.restart()`
$DIR/testsuite/smoke-test/src/client.rs: `.wait_until_healthy(Instant::now() + Duration::from_secs(10))`
$DIR/testsuite/smoke-test/src/client.rs: `.validators()`
$DIR/testsuite/smoke-test/src/client.rs: `.next()`
$DIR/testsuite/smoke-test/src/client.rs: `.json_rpc_client()`
$DIR/testsuite/smoke-test/src/client.rs: `.get_currencies()`
$DIR/testsuite/smoke-test/src/client.rs: `.into_inner()`
$DIR/testsuite/smoke-test/src/client.rs: `.enter()`
$DIR/testsuite/smoke-test/src/client.rs: `.validators()`
$DIR/testsuite/smoke-test/src/client.rs: `.next()`
$DIR/testsuite/smoke-test/src/client.rs: `.json_rpc_endpoint()`
$DIR/testsuite/smoke-test/src/client.rs: `.set_scheme("ws")`
$DIR/testsuite/smoke-test/src/client.rs: `.set_path("/v1/stream/ws")`
$DIR/testsuite/smoke-test/src/client.rs: `.block_on(timeout(
            ms_500,
            StreamingClient::new(streaming_url, config.unwrap_or_default(), None),
        ))`
$DIR/testsuite/smoke-test/src/client.rs: `.unwrap_or_default()`
$DIR/testsuite/smoke-test/src/client.rs: `.unwrap_or_else(|e| panic!("Timeout creating StreamingClient: {}", e))`
$DIR/testsuite/smoke-test/src/client.rs: `.unwrap_or_else(|e| panic!("Error connecting to WS endpoint: {}", e))`
$DIR/testsuite/smoke-test/src/client.rs: `.enumerate()`
$DIR/testsuite/smoke-test/src/client.rs: `.block_on(timeout(
                ms_500,
                s_client.subscribe_events(currency.mint_events_key, 0),
            ))`
$DIR/testsuite/smoke-test/src/client.rs: `.subscribe_events(currency.mint_events_key, 0)`
$DIR/testsuite/smoke-test/src/client.rs: `.unwrap_or_else(|e| panic!("Timeout subscribing to {}: {}", &currency.code, e))`
$DIR/testsuite/smoke-test/src/client.rs: `.unwrap_or_else(|e| {
                panic!("Error subscribing to currency '{}': {}", &currency.code, e)
            })`
$DIR/testsuite/smoke-test/src/client.rs: `.block_on(timeout(ms_500, s_client.subscription_count()))`
$DIR/testsuite/smoke-test/src/client.rs: `.subscription_count()`
$DIR/testsuite/smoke-test/src/client.rs: `.unwrap_or_else(|e| panic!("Timeout count for {}: {}", &currency.code, e))`
$DIR/testsuite/smoke-test/src/client.rs: `.block_on(timeout(ms_500, subscription_stream.next()))`
$DIR/testsuite/smoke-test/src/client.rs: `.next()`
$DIR/testsuite/smoke-test/src/client.rs: `.unwrap_or_else(|e| panic!("Timeout getting message 1: {}", e))`
$DIR/testsuite/smoke-test/src/client.rs: `.unwrap_or_else(|| panic!("Currency '{}' response 1 is None", &currency.code))`
$DIR/testsuite/smoke-test/src/client.rs: `.unwrap_or_else(|e| {
                    panic!("Currency '{}' response 1 is Err: {}", &currency.code, e)
                })`
$DIR/testsuite/smoke-test/src/client.rs: `.parse_result(&StreamMethod::SubscribeToEvents)`
$DIR/testsuite/smoke-test/src/client.rs: `.unwrap_or_else(|e| {
                    panic!(
                        "Currency '{}' response 1 view is err: {}",
                        &currency.code, e
                    )
                })`
$DIR/testsuite/smoke-test/src/client.rs: `.unwrap_or_else(|| panic!("Currency '{}' response 1 view is None", &currency.code))`
$DIR/testsuite/smoke-test/src/client.rs: `.block_on(sleep(ms_500))`
$DIR/testsuite/smoke-test/src/client.rs: `.block_on(timeout(ms_500, s_client.subscription_count()))`
$DIR/testsuite/smoke-test/src/client.rs: `.subscription_count()`
$DIR/testsuite/smoke-test/src/client.rs: `.unwrap_or_else(|e| panic!("Timeout count for {}: {}", &currency.code, e))`
$DIR/testsuite/smoke-test/src/client.rs: `.validators_mut()`
$DIR/testsuite/smoke-test/src/client.rs: `.nth(3)`
$DIR/testsuite/smoke-test/src/client.rs: `.stop()`
$DIR/testsuite/smoke-test/src/client.rs: `.validators()`
$DIR/testsuite/smoke-test/src/client.rs: `.next()`
$DIR/testsuite/smoke-test/src/client.rs: `.json_rpc_client()`
$DIR/testsuite/smoke-test/src/client.rs: `.chain_info()`
$DIR/testsuite/smoke-test/src/client.rs: `.transaction_factory()`
$DIR/testsuite/smoke-test/src/client.rs: `.validators_mut()`
$DIR/testsuite/smoke-test/src/client.rs: `.next()`
$DIR/testsuite/smoke-test/src/client.rs: `.restart()`
$DIR/testsuite/smoke-test/src/client.rs: `.wait_until_healthy(Instant::now() + Duration::from_secs(10))`
$DIR/testsuite/smoke-test/src/client.rs: `.validators()`
$DIR/testsuite/smoke-test/src/client.rs: `.next()`
$DIR/testsuite/smoke-test/src/client.rs: `.json_rpc_client()`
$DIR/testsuite/smoke-test/src/client.rs: `.chain_info()`
$DIR/testsuite/smoke-test/src/client.rs: `.transaction_factory()`
$DIR/testsuite/smoke-test/src/client.rs: `.sign_with_transaction_builder(transaction_factory.peer_to_peer(
            diem_sdk::transaction_builder::Currency::XUS,
            account_1.address(),
            1,
        ))`
$DIR/testsuite/smoke-test/src/client.rs: `.peer_to_peer(
            diem_sdk::transaction_builder::Currency::XUS,
            account_1.address(),
            1,
        )`
$DIR/testsuite/smoke-test/src/client.rs: `.address()`
$DIR/testsuite/smoke-test/src/client.rs: `.submit(&txn)`
$DIR/testsuite/smoke-test/src/consensus.rs: `safety_rules_storage.reset_and_clear().unwrap();`
$DIR/testsuite/smoke-test/src/consensus.rs: `node_config.consensus.safety_rules.export_consensus_key = true;`
$DIR/testsuite/smoke-test/src/consensus.rs: `node_config.save(validator.config_path()).unwrap();`
$DIR/testsuite/smoke-test/src/consensus.rs: `validator.restart().unwrap();`
$DIR/testsuite/smoke-test/src/consensus.rs: `swarm.launch().unwrap();`
$DIR/testsuite/smoke-test/src/consensus.rs: `node_config.consensus.safety_rules.export_consensus_key = true;`
$DIR/testsuite/smoke-test/src/consensus.rs: `node_config.save(validator.config_path()).unwrap();`
$DIR/testsuite/smoke-test/src/consensus.rs: `validator.restart().unwrap();`
$DIR/testsuite/smoke-test/src/consensus.rs: `swarm.launch().unwrap();`
$DIR/testsuite/smoke-test/src/consensus.rs: `client.submit(&upgrade_txn).unwrap();`
$DIR/testsuite/smoke-test/src/consensus.rs: `client
        .wait_for_signed_transaction(&upgrade_txn, None, None)
        .unwrap();`
$DIR/testsuite/smoke-test/src/consensus.rs: `.validators()`
$DIR/testsuite/smoke-test/src/consensus.rs: `.nth(1)`
$DIR/testsuite/smoke-test/src/consensus.rs: `.config()`
$DIR/testsuite/smoke-test/src/consensus.rs: `.try_into()`
$DIR/testsuite/smoke-test/src/consensus.rs: `.reset_and_clear()`
$DIR/testsuite/smoke-test/src/consensus.rs: `.set_validator_config(
            None,
            Some(NetworkAddress::from_str("/ip4/10.0.0.16/tcp/80").unwrap()),
            &backend,
            false,
            false,
        )`
$DIR/testsuite/smoke-test/src/consensus.rs: `.rotate_operator_key(&backend, false)`
$DIR/testsuite/smoke-test/src/consensus.rs: `.validators()`
$DIR/testsuite/smoke-test/src/consensus.rs: `.next()`
$DIR/testsuite/smoke-test/src/consensus.rs: `.json_rpc_client()`
$DIR/testsuite/smoke-test/src/consensus.rs: `.get_account(txn_ctx.address)`
$DIR/testsuite/smoke-test/src/consensus.rs: `.into_inner()`
$DIR/testsuite/smoke-test/src/consensus.rs: `.validators()`
$DIR/testsuite/smoke-test/src/consensus.rs: `.nth(1)`
$DIR/testsuite/smoke-test/src/consensus.rs: `.json_rpc_client()`
$DIR/testsuite/smoke-test/src/consensus.rs: `.get_account(txn_ctx.address)`
$DIR/testsuite/smoke-test/src/consensus.rs: `.into_inner()`
$DIR/testsuite/smoke-test/src/consensus.rs: `.validators_mut()`
$DIR/testsuite/smoke-test/src/consensus.rs: `.config()`
$DIR/testsuite/smoke-test/src/consensus.rs: `.save(validator.config_path())`
$DIR/testsuite/smoke-test/src/consensus.rs: `.config_path()`
$DIR/testsuite/smoke-test/src/consensus.rs: `.restart()`
$DIR/testsuite/smoke-test/src/consensus.rs: `.launch()`
$DIR/testsuite/smoke-test/src/consensus.rs: `.validators_mut()`
$DIR/testsuite/smoke-test/src/consensus.rs: `.take(2)`
$DIR/testsuite/smoke-test/src/consensus.rs: `.config()`
$DIR/testsuite/smoke-test/src/consensus.rs: `.save(validator.config_path())`
$DIR/testsuite/smoke-test/src/consensus.rs: `.config_path()`
$DIR/testsuite/smoke-test/src/consensus.rs: `.restart()`
$DIR/testsuite/smoke-test/src/consensus.rs: `.launch()`
$DIR/testsuite/smoke-test/src/consensus.rs: `.chain_info()`
$DIR/testsuite/smoke-test/src/consensus.rs: `.transaction_factory()`
$DIR/testsuite/smoke-test/src/consensus.rs: `.chain_info()`
$DIR/testsuite/smoke-test/src/consensus.rs: `.root_account
        .sign_with_transaction_builder(
            transaction_factory
                .update_diem_consensus_config(0, bcs::to_bytes(&two_chain_config).unwrap()),
        )`
$DIR/testsuite/smoke-test/src/consensus.rs: `.update_diem_consensus_config(0, bcs::to_bytes(&two_chain_config).unwrap())`
$DIR/testsuite/smoke-test/src/consensus.rs: `.validators()`
$DIR/testsuite/smoke-test/src/consensus.rs: `.next()`
$DIR/testsuite/smoke-test/src/consensus.rs: `.json_rpc_client()`
$DIR/testsuite/smoke-test/src/consensus.rs: `.submit(&upgrade_txn)`
$DIR/testsuite/smoke-test/src/consensus.rs: `.wait_for_signed_transaction(&upgrade_txn, None, None)`
$DIR/testsuite/smoke-test/src/full_nodes.rs: `swarm
        .validator_mut(validator_peer_id)
        .unwrap()
        .wait_until_healthy(Instant::now() + Duration::from_secs(10))
        .unwrap();`
$DIR/testsuite/smoke-test/src/full_nodes.rs: `fullnode
            .wait_until_healthy(Instant::now() + Duration::from_secs(10))
            .unwrap();`
$DIR/testsuite/smoke-test/src/full_nodes.rs: `swarm
        .wait_for_all_nodes_to_catchup(Instant::now() + Duration::from_secs(10))
        .unwrap();`
$DIR/testsuite/smoke-test/src/full_nodes.rs: `assert_balance(&validator_client, &account_0, 9);`
$DIR/testsuite/smoke-test/src/full_nodes.rs: `assert_balance(&validator_client, &account_1, 11);`
$DIR/testsuite/smoke-test/src/full_nodes.rs: `assert_balance(&vfn_client, &account_0, 9);`
$DIR/testsuite/smoke-test/src/full_nodes.rs: `assert_balance(&vfn_client, &account_1, 11);`
$DIR/testsuite/smoke-test/src/full_nodes.rs: `assert_balance(&pfn_client, &account_0, 9);`
$DIR/testsuite/smoke-test/src/full_nodes.rs: `assert_balance(&pfn_client, &account_1, 11);`
$DIR/testsuite/smoke-test/src/full_nodes.rs: `assert_balance(&validator_client, &account_0, 8);`
$DIR/testsuite/smoke-test/src/full_nodes.rs: `assert_balance(&validator_client, &account_1, 12);`
$DIR/testsuite/smoke-test/src/full_nodes.rs: `assert_balance(&vfn_client, &account_0, 8);`
$DIR/testsuite/smoke-test/src/full_nodes.rs: `assert_balance(&vfn_client, &account_1, 12);`
$DIR/testsuite/smoke-test/src/full_nodes.rs: `pfn_client
        .wait_for_signed_transaction(&txn, None, None)
        .unwrap();`
$DIR/testsuite/smoke-test/src/full_nodes.rs: `assert_balance(&pfn_client, &account_0, 8);`
$DIR/testsuite/smoke-test/src/full_nodes.rs: `assert_balance(&pfn_client, &account_1, 12);`
$DIR/testsuite/smoke-test/src/full_nodes.rs: `assert_balance(&validator_client, &account_0, 7);`
$DIR/testsuite/smoke-test/src/full_nodes.rs: `assert_balance(&validator_client, &account_1, 13);`
$DIR/testsuite/smoke-test/src/full_nodes.rs: `vfn_client
        .wait_for_signed_transaction(&txn, None, None)
        .unwrap();`
$DIR/testsuite/smoke-test/src/full_nodes.rs: `assert_balance(&vfn_client, &account_0, 7);`
$DIR/testsuite/smoke-test/src/full_nodes.rs: `assert_balance(&vfn_client, &account_1, 13);`
$DIR/testsuite/smoke-test/src/full_nodes.rs: `pfn_client
        .wait_for_signed_transaction(&txn, None, None)
        .unwrap();`
$DIR/testsuite/smoke-test/src/full_nodes.rs: `assert_balance(&pfn_client, &account_0, 7);`
$DIR/testsuite/smoke-test/src/full_nodes.rs: `validator
            .wait_until_healthy(Instant::now() + Duration::from_secs(10))
            .unwrap();`
$DIR/testsuite/smoke-test/src/full_nodes.rs: `fullnode
            .wait_until_healthy(Instant::now() + Duration::from_secs(10))
            .unwrap();`
$DIR/testsuite/smoke-test/src/full_nodes.rs: `fullnode
            .wait_for_connectivity(Instant::now() + Duration::from_secs(60))
            .unwrap();`
$DIR/testsuite/smoke-test/src/full_nodes.rs: `swarm
        .wait_for_all_nodes_to_catchup(Instant::now() + Duration::from_secs(10))
        .unwrap();`
$DIR/testsuite/smoke-test/src/full_nodes.rs: `swarm.validator_mut(validator).unwrap().stop();`
$DIR/testsuite/smoke-test/src/full_nodes.rs: `transfer_coins_non_blocking(
            &vfn_client,
            &transaction_factory,
            &mut account_0,
            &account_1,
            1,
        );`
$DIR/testsuite/smoke-test/src/full_nodes.rs: `private_network.max_inbound_connections = 0;`
$DIR/testsuite/smoke-test/src/full_nodes.rs: `private_network.max_outbound_connections = 1;`
$DIR/testsuite/smoke-test/src/full_nodes.rs: `user_network.max_outbound_connections = 1;`
$DIR/testsuite/smoke-test/src/full_nodes.rs: `user_network.discovery_method = DiscoveryMethod::None;`
$DIR/testsuite/smoke-test/src/full_nodes.rs: `add_node_to_seeds(
        &mut private_config,
        &user_config,
        NetworkId::Public,
        PeerRole::Downstream,
    );`
$DIR/testsuite/smoke-test/src/full_nodes.rs: `add_node_to_seeds(
        &mut private_config,
        swarm.validators().next().unwrap().config(),
        NetworkId::Public,
        PeerRole::PreferredUpstream,
    );`
$DIR/testsuite/smoke-test/src/full_nodes.rs: `add_node_to_seeds(
        &mut user_config,
        swarm.full_node(private).unwrap().config(),
        NetworkId::Public,
        PeerRole::PreferredUpstream,
    );`
$DIR/testsuite/smoke-test/src/full_nodes.rs: `swarm
        .wait_for_connectivity(Instant::now() + Duration::from_secs(60))
        .unwrap();`
$DIR/testsuite/smoke-test/src/full_nodes.rs: `swarm
        .wait_for_all_nodes_to_catchup(Instant::now() + Duration::from_secs(60))
        .unwrap();`
$DIR/testsuite/smoke-test/src/full_nodes.rs: `transfer_coins(
        &user_client,
        &transaction_factory,
        &mut account_0,
        &account_1,
        10,
    );`
$DIR/testsuite/smoke-test/src/full_nodes.rs: `assert_balance(&user_client, &account_0, 90);`
$DIR/testsuite/smoke-test/src/full_nodes.rs: `assert_balance(&user_client, &account_1, 20);`
$DIR/testsuite/smoke-test/src/full_nodes.rs: `assert_balance(&validator_client, &account_0, 90);`
$DIR/testsuite/smoke-test/src/full_nodes.rs: `.chain_info()`
$DIR/testsuite/smoke-test/src/full_nodes.rs: `.transaction_factory()`
$DIR/testsuite/smoke-test/src/full_nodes.rs: `.versions()`
$DIR/testsuite/smoke-test/src/full_nodes.rs: `.max()`
$DIR/testsuite/smoke-test/src/full_nodes.rs: `.validators()`
$DIR/testsuite/smoke-test/src/full_nodes.rs: `.next()`
$DIR/testsuite/smoke-test/src/full_nodes.rs: `.peer_id()`
$DIR/testsuite/smoke-test/src/full_nodes.rs: `.add_validator_fullnode(
            &version,
            NodeConfig::default_for_validator_full_node(),
            validator_peer_id,
        )`
$DIR/testsuite/smoke-test/src/full_nodes.rs: `.add_full_node(&version, NodeConfig::default_for_public_full_node())`
$DIR/testsuite/smoke-test/src/full_nodes.rs: `.validator_mut(validator_peer_id)`
$DIR/testsuite/smoke-test/src/full_nodes.rs: `.wait_until_healthy(Instant::now() + Duration::from_secs(10))`
$DIR/testsuite/smoke-test/src/full_nodes.rs: `.full_nodes_mut()`
$DIR/testsuite/smoke-test/src/full_nodes.rs: `.wait_until_healthy(Instant::now() + Duration::from_secs(10))`
$DIR/testsuite/smoke-test/src/full_nodes.rs: `.validator(validator_peer_id)`
$DIR/testsuite/smoke-test/src/full_nodes.rs: `.json_rpc_client()`
$DIR/testsuite/smoke-test/src/full_nodes.rs: `.full_node(vfn_peer_id)`
$DIR/testsuite/smoke-test/src/full_nodes.rs: `.json_rpc_client()`
$DIR/testsuite/smoke-test/src/full_nodes.rs: `.full_node(pfn_peer_id)`
$DIR/testsuite/smoke-test/src/full_nodes.rs: `.json_rpc_client()`
$DIR/testsuite/smoke-test/src/full_nodes.rs: `.wait_for_all_nodes_to_catchup(Instant::now() + Duration::from_secs(10))`
$DIR/testsuite/smoke-test/src/full_nodes.rs: `.wait_for_signed_transaction(&txn, None, None)`
$DIR/testsuite/smoke-test/src/full_nodes.rs: `.wait_for_signed_transaction(&txn, None, None)`
$DIR/testsuite/smoke-test/src/full_nodes.rs: `.wait_for_signed_transaction(&txn, None, None)`
$DIR/testsuite/smoke-test/src/full_nodes.rs: `.chain_info()`
$DIR/testsuite/smoke-test/src/full_nodes.rs: `.transaction_factory()`
$DIR/testsuite/smoke-test/src/full_nodes.rs: `.versions()`
$DIR/testsuite/smoke-test/src/full_nodes.rs: `.max()`
$DIR/testsuite/smoke-test/src/full_nodes.rs: `.validators()`
$DIR/testsuite/smoke-test/src/full_nodes.rs: `.map(|v| v.peer_id())`
$DIR/testsuite/smoke-test/src/full_nodes.rs: `.peer_id()`
$DIR/testsuite/smoke-test/src/full_nodes.rs: `.collect::<Vec<_>>()`
$DIR/testsuite/smoke-test/src/full_nodes.rs: `.add_validator_fullnode(
            &version,
            NodeConfig::default_for_validator_full_node(),
            validator,
        )`
$DIR/testsuite/smoke-test/src/full_nodes.rs: `.validators_mut()`
$DIR/testsuite/smoke-test/src/full_nodes.rs: `.wait_until_healthy(Instant::now() + Duration::from_secs(10))`
$DIR/testsuite/smoke-test/src/full_nodes.rs: `.full_nodes_mut()`
$DIR/testsuite/smoke-test/src/full_nodes.rs: `.wait_until_healthy(Instant::now() + Duration::from_secs(10))`
$DIR/testsuite/smoke-test/src/full_nodes.rs: `.wait_for_connectivity(Instant::now() + Duration::from_secs(60))`
$DIR/testsuite/smoke-test/src/full_nodes.rs: `.wait_for_all_nodes_to_catchup(Instant::now() + Duration::from_secs(10))`
$DIR/testsuite/smoke-test/src/full_nodes.rs: `.full_node(vfn)`
$DIR/testsuite/smoke-test/src/full_nodes.rs: `.json_rpc_client()`
$DIR/testsuite/smoke-test/src/full_nodes.rs: `.validator_mut(validator)`
$DIR/testsuite/smoke-test/src/full_nodes.rs: `.stop()`
$DIR/testsuite/smoke-test/src/full_nodes.rs: `.chain_info()`
$DIR/testsuite/smoke-test/src/full_nodes.rs: `.transaction_factory()`
$DIR/testsuite/smoke-test/src/full_nodes.rs: `.versions()`
$DIR/testsuite/smoke-test/src/full_nodes.rs: `.max()`
$DIR/testsuite/smoke-test/src/full_nodes.rs: `.full_node_networks.first_mut()`
$DIR/testsuite/smoke-test/src/full_nodes.rs: `.full_node_networks.first_mut()`
$DIR/testsuite/smoke-test/src/full_nodes.rs: `.validators()`
$DIR/testsuite/smoke-test/src/full_nodes.rs: `.next()`
$DIR/testsuite/smoke-test/src/full_nodes.rs: `.config()`
$DIR/testsuite/smoke-test/src/full_nodes.rs: `.add_full_node(&version, private_config)`
$DIR/testsuite/smoke-test/src/full_nodes.rs: `.full_node(private)`
$DIR/testsuite/smoke-test/src/full_nodes.rs: `.config()`
$DIR/testsuite/smoke-test/src/full_nodes.rs: `.add_full_node(&version, user_config)`
$DIR/testsuite/smoke-test/src/full_nodes.rs: `.wait_for_connectivity(Instant::now() + Duration::from_secs(60))`
$DIR/testsuite/smoke-test/src/full_nodes.rs: `.full_node(user)`
$DIR/testsuite/smoke-test/src/full_nodes.rs: `.validators()`
$DIR/testsuite/smoke-test/src/full_nodes.rs: `.next()`
$DIR/testsuite/smoke-test/src/full_nodes.rs: `.json_rpc_client()`
$DIR/testsuite/smoke-test/src/full_nodes.rs: `.full_node(user)`
$DIR/testsuite/smoke-test/src/full_nodes.rs: `.json_rpc_client()`
$DIR/testsuite/smoke-test/src/full_nodes.rs: `.wait_for_all_nodes_to_catchup(Instant::now() + Duration::from_secs(60))`
$DIR/testsuite/smoke-test/src/genesis.rs: `workspace_builder::get_bin("db-backup");`
$DIR/testsuite/smoke-test/src/genesis.rs: `workspace_builder::get_bin("db-restore");`
$DIR/testsuite/smoke-test/src/genesis.rs: `workspace_builder::get_bin("db-backup-verify");`
$DIR/testsuite/smoke-test/src/genesis.rs: `node_config.consensus.sync_only = true;`
$DIR/testsuite/smoke-test/src/genesis.rs: `node_config.save(&node_config_path).unwrap();`
$DIR/testsuite/smoke-test/src/genesis.rs: `swarm
        .validator_mut(node_to_kill)
        .unwrap()
        .restart()
        .unwrap();`
$DIR/testsuite/smoke-test/src/genesis.rs: `swarm
        .validator_mut(node_to_kill)
        .unwrap()
        .wait_until_healthy(Instant::now() + Duration::from_secs(10))
        .unwrap();`
$DIR/testsuite/smoke-test/src/genesis.rs: `node_config.consensus.sync_only = true;`
$DIR/testsuite/smoke-test/src/genesis.rs: `node_config.save(validator.config_path()).unwrap();`
$DIR/testsuite/smoke-test/src/genesis.rs: `validator.restart().unwrap();`
$DIR/testsuite/smoke-test/src/genesis.rs: `validator
            .wait_until_healthy(Instant::now() + Duration::from_secs(10))
            .unwrap();`
$DIR/testsuite/smoke-test/src/genesis.rs: `swarm.validator_mut(node_to_kill).unwrap().stop();`
$DIR/testsuite/smoke-test/src/genesis.rs: `fs::remove_dir_all(node_config.storage.dir()).unwrap();`
$DIR/testsuite/smoke-test/src/genesis.rs: `swarm
        .validator_mut(node_to_kill)
        .unwrap()
        .restart()
        .unwrap();`
$DIR/testsuite/smoke-test/src/genesis.rs: `swarm
        .validator_mut(node_to_kill)
        .unwrap()
        .wait_until_healthy(Instant::now() + Duration::from_secs(10))
        .unwrap();`
$DIR/testsuite/smoke-test/src/genesis.rs: `swarm
        .wait_for_all_nodes_to_catchup(Instant::now() + Duration::from_secs(60))
        .unwrap();`
$DIR/testsuite/smoke-test/src/genesis.rs: `sleep(Duration::from_secs(1));`
$DIR/testsuite/smoke-test/src/genesis.rs: `genesis_path.create_as_file().unwrap();`
$DIR/testsuite/smoke-test/src/genesis.rs: `file.write_all(&bcs::to_bytes(&genesis_transaction).unwrap())
        .unwrap();`
$DIR/testsuite/smoke-test/src/genesis.rs: `insert_waypoint(&mut node_config, waypoint);`
$DIR/testsuite/smoke-test/src/genesis.rs: `node_config.execution.genesis = Some(genesis_transaction.clone());`
$DIR/testsuite/smoke-test/src/genesis.rs: `node_config.consensus.sync_only = false;`
$DIR/testsuite/smoke-test/src/genesis.rs: `node_config.save(validator.config_path()).unwrap();`
$DIR/testsuite/smoke-test/src/genesis.rs: `validator.start().unwrap();`
$DIR/testsuite/smoke-test/src/genesis.rs: `validator
            .wait_until_healthy(Instant::now() + Duration::from_secs(10))
            .unwrap();`
$DIR/testsuite/smoke-test/src/genesis.rs: `transfer_coins(
        &client_0,
        &transaction_factory,
        &mut account_0,
        &account_1,
        1,
    );`
$DIR/testsuite/smoke-test/src/genesis.rs: `assert_balance(&client_0, &account_0, 9);`
$DIR/testsuite/smoke-test/src/genesis.rs: `assert_balance(&client_0, &account_1, 11);`
$DIR/testsuite/smoke-test/src/genesis.rs: `client_0.submit(&txn).unwrap();`
$DIR/testsuite/smoke-test/src/genesis.rs: `client_0
        .wait_for_signed_transaction(&txn, None, None)
        .unwrap();`
$DIR/testsuite/smoke-test/src/genesis.rs: `node_config.execution.genesis = None;`
$DIR/testsuite/smoke-test/src/genesis.rs: `node_config.execution.genesis_file_location = PathBuf::from("");`
$DIR/testsuite/smoke-test/src/genesis.rs: `insert_waypoint(&mut node_config, waypoint);`
$DIR/testsuite/smoke-test/src/genesis.rs: `node_config.save(node_config_path).unwrap();`
$DIR/testsuite/smoke-test/src/genesis.rs: `swarm
        .validator_mut(node_to_kill)
        .unwrap()
        .restart()
        .unwrap();`
$DIR/testsuite/smoke-test/src/genesis.rs: `swarm
        .validator_mut(node_to_kill)
        .unwrap()
        .wait_until_healthy(Instant::now() + Duration::from_secs(10))
        .unwrap();`
$DIR/testsuite/smoke-test/src/genesis.rs: `swarm
        .wait_for_all_nodes_to_catchup(Instant::now() + Duration::from_secs(60))
        .unwrap();`
$DIR/testsuite/smoke-test/src/genesis.rs: `transfer_coins(&client, &transaction_factory, &mut account_0, &account_1, 1);`
$DIR/testsuite/smoke-test/src/genesis.rs: `assert_balance(&client_0, &account_0, 8);`
$DIR/testsuite/smoke-test/src/genesis.rs: `assert_balance(&client_0, &account_1, 12);`
$DIR/testsuite/smoke-test/src/genesis.rs: `swarm.validator_mut(node_to_kill).unwrap().stop();`
$DIR/testsuite/smoke-test/src/genesis.rs: `fs::remove_dir_all(&db_dir).unwrap();`
$DIR/testsuite/smoke-test/src/genesis.rs: `db_restore(backup_path.path(), db_dir.as_path(), &[waypoint]);`
$DIR/testsuite/smoke-test/src/genesis.rs: `swarm
        .validator_mut(node_to_kill)
        .unwrap()
        .restart()
        .unwrap();`
$DIR/testsuite/smoke-test/src/genesis.rs: `swarm
        .validator_mut(node_to_kill)
        .unwrap()
        .wait_until_healthy(Instant::now() + Duration::from_secs(10))
        .unwrap();`
$DIR/testsuite/smoke-test/src/genesis.rs: `swarm
        .wait_for_all_nodes_to_catchup(Instant::now() + Duration::from_secs(60))
        .unwrap();`
$DIR/testsuite/smoke-test/src/genesis.rs: `transfer_coins(&client, &transaction_factory, &mut account_0, &account_1, 1);`
$DIR/testsuite/smoke-test/src/genesis.rs: `assert_balance(&client_0, &account_0, 7);`
$DIR/testsuite/smoke-test/src/genesis.rs: `.chain_id()`
$DIR/testsuite/smoke-test/src/genesis.rs: `.chain_info()`
$DIR/testsuite/smoke-test/src/genesis.rs: `.transaction_factory()`
$DIR/testsuite/smoke-test/src/genesis.rs: `.validators()`
$DIR/testsuite/smoke-test/src/genesis.rs: `.map(|v| v.peer_id())`
$DIR/testsuite/smoke-test/src/genesis.rs: `.peer_id()`
$DIR/testsuite/smoke-test/src/genesis.rs: `.collect::<Vec<_>>()`
$DIR/testsuite/smoke-test/src/genesis.rs: `.validator(node_to_kill)`
$DIR/testsuite/smoke-test/src/genesis.rs: `.config_path()`
$DIR/testsuite/smoke-test/src/genesis.rs: `.validator(node_to_kill)`
$DIR/testsuite/smoke-test/src/genesis.rs: `.config()`
$DIR/testsuite/smoke-test/src/genesis.rs: `.save(&node_config_path)`
$DIR/testsuite/smoke-test/src/genesis.rs: `.validator_mut(node_to_kill)`
$DIR/testsuite/smoke-test/src/genesis.rs: `.restart()`
$DIR/testsuite/smoke-test/src/genesis.rs: `.validator_mut(node_to_kill)`
$DIR/testsuite/smoke-test/src/genesis.rs: `.wait_until_healthy(Instant::now() + Duration::from_secs(10))`
$DIR/testsuite/smoke-test/src/genesis.rs: `.validators_mut()`
$DIR/testsuite/smoke-test/src/genesis.rs: `.config()`
$DIR/testsuite/smoke-test/src/genesis.rs: `.save(validator.config_path())`
$DIR/testsuite/smoke-test/src/genesis.rs: `.config_path()`
$DIR/testsuite/smoke-test/src/genesis.rs: `.restart()`
$DIR/testsuite/smoke-test/src/genesis.rs: `.wait_until_healthy(Instant::now() + Duration::from_secs(10))`
$DIR/testsuite/smoke-test/src/genesis.rs: `.validator_mut(node_to_kill)`
$DIR/testsuite/smoke-test/src/genesis.rs: `.stop()`
$DIR/testsuite/smoke-test/src/genesis.rs: `.storage.dir()`
$DIR/testsuite/smoke-test/src/genesis.rs: `.validator_mut(node_to_kill)`
$DIR/testsuite/smoke-test/src/genesis.rs: `.restart()`
$DIR/testsuite/smoke-test/src/genesis.rs: `.validator_mut(node_to_kill)`
$DIR/testsuite/smoke-test/src/genesis.rs: `.wait_until_healthy(Instant::now() + Duration::from_secs(10))`
$DIR/testsuite/smoke-test/src/genesis.rs: `.wait_for_all_nodes_to_catchup(Instant::now() + Duration::from_secs(60))`
$DIR/testsuite/smoke-test/src/genesis.rs: `.validators()`
$DIR/testsuite/smoke-test/src/genesis.rs: `.json_rpc_client()`
$DIR/testsuite/smoke-test/src/genesis.rs: `.get_metadata()`
$DIR/testsuite/smoke-test/src/genesis.rs: `.into_inner()`
$DIR/testsuite/smoke-test/src/genesis.rs: `.peer_id()`
$DIR/testsuite/smoke-test/src/genesis.rs: `.validator(node_to_kill)`
$DIR/testsuite/smoke-test/src/genesis.rs: `.json_rpc_endpoint()`
$DIR/testsuite/smoke-test/src/genesis.rs: `.validator_config(validator_address, Some(&diem_root))`
$DIR/testsuite/smoke-test/src/genesis.rs: `.validators_mut()`
$DIR/testsuite/smoke-test/src/genesis.rs: `.create_as_file()`
$DIR/testsuite/smoke-test/src/genesis.rs: `.path()`
$DIR/testsuite/smoke-test/src/genesis.rs: `.write_all(&bcs::to_bytes(&genesis_transaction).unwrap())`
$DIR/testsuite/smoke-test/src/genesis.rs: `.current_dir(workspace_root())`
$DIR/testsuite/smoke-test/src/genesis.rs: `.args(&vec![
            node_config.storage.dir().to_str().unwrap(),
            "--genesis-txn-file",
            genesis_path.path().to_str().unwrap(),
        ])`
$DIR/testsuite/smoke-test/src/genesis.rs: `.output()`
$DIR/testsuite/smoke-test/src/genesis.rs: `.validators_mut()`
$DIR/testsuite/smoke-test/src/genesis.rs: `.filter(|v| v.peer_id() != node_to_kill)`
$DIR/testsuite/smoke-test/src/genesis.rs: `.peer_id()`
$DIR/testsuite/smoke-test/src/genesis.rs: `.config()`
$DIR/testsuite/smoke-test/src/genesis.rs: `.save(validator.config_path())`
$DIR/testsuite/smoke-test/src/genesis.rs: `.config_path()`
$DIR/testsuite/smoke-test/src/genesis.rs: `.start()`
$DIR/testsuite/smoke-test/src/genesis.rs: `.wait_until_healthy(Instant::now() + Duration::from_secs(10))`
$DIR/testsuite/smoke-test/src/genesis.rs: `.validator(validator_peer_ids[0])`
$DIR/testsuite/smoke-test/src/genesis.rs: `.json_rpc_client()`
$DIR/testsuite/smoke-test/src/genesis.rs: `.chain_info()`
$DIR/testsuite/smoke-test/src/genesis.rs: `.root_account
        .sign_with_transaction_builder(transaction_factory.update_diem_version(0, 12345))`
$DIR/testsuite/smoke-test/src/genesis.rs: `.update_diem_version(0, 12345)`
$DIR/testsuite/smoke-test/src/genesis.rs: `.submit(&txn)`
$DIR/testsuite/smoke-test/src/genesis.rs: `.wait_for_signed_transaction(&txn, None, None)`
$DIR/testsuite/smoke-test/src/genesis.rs: `.get_state_proof(0)`
$DIR/testsuite/smoke-test/src/genesis.rs: `.state()`
$DIR/testsuite/smoke-test/src/genesis.rs: `.inner()`
$DIR/testsuite/smoke-test/src/genesis.rs: `.epoch_change_proof.inner()`
$DIR/testsuite/smoke-test/src/genesis.rs: `.ledger_info_with_sigs
        .last()`
$DIR/testsuite/smoke-test/src/genesis.rs: `.ledger_info()`
$DIR/testsuite/smoke-test/src/genesis.rs: `.next_block_epoch()`
$DIR/testsuite/smoke-test/src/genesis.rs: `.validator(validator_peer_ids[0])`
$DIR/testsuite/smoke-test/src/genesis.rs: `.config()`
$DIR/testsuite/smoke-test/src/genesis.rs: `.storage
            .backup_service_address
            .port()`
$DIR/testsuite/smoke-test/src/genesis.rs: `.checked_sub(1)`
$DIR/testsuite/smoke-test/src/genesis.rs: `.validator(validator_peer_ids[0])`
$DIR/testsuite/smoke-test/src/genesis.rs: `.json_rpc_endpoint()`
$DIR/testsuite/smoke-test/src/genesis.rs: `.add_validator(validator_address, &diem_root, false)`
$DIR/testsuite/smoke-test/src/genesis.rs: `.save(node_config_path)`
$DIR/testsuite/smoke-test/src/genesis.rs: `.validator_mut(node_to_kill)`
$DIR/testsuite/smoke-test/src/genesis.rs: `.restart()`
$DIR/testsuite/smoke-test/src/genesis.rs: `.validator_mut(node_to_kill)`
$DIR/testsuite/smoke-test/src/genesis.rs: `.wait_until_healthy(Instant::now() + Duration::from_secs(10))`
$DIR/testsuite/smoke-test/src/genesis.rs: `.wait_for_all_nodes_to_catchup(Instant::now() + Duration::from_secs(60))`
$DIR/testsuite/smoke-test/src/genesis.rs: `.validator(node_to_kill)`
$DIR/testsuite/smoke-test/src/genesis.rs: `.json_rpc_client()`
$DIR/testsuite/smoke-test/src/genesis.rs: `.validator_mut(node_to_kill)`
$DIR/testsuite/smoke-test/src/genesis.rs: `.stop()`
$DIR/testsuite/smoke-test/src/genesis.rs: `.storage.dir()`
$DIR/testsuite/smoke-test/src/genesis.rs: `.path()`
$DIR/testsuite/smoke-test/src/genesis.rs: `.validator_mut(node_to_kill)`
$DIR/testsuite/smoke-test/src/genesis.rs: `.restart()`
$DIR/testsuite/smoke-test/src/genesis.rs: `.validator_mut(node_to_kill)`
$DIR/testsuite/smoke-test/src/genesis.rs: `.wait_until_healthy(Instant::now() + Duration::from_secs(10))`
$DIR/testsuite/smoke-test/src/genesis.rs: `.wait_for_all_nodes_to_catchup(Instant::now() + Duration::from_secs(60))`
$DIR/testsuite/smoke-test/src/key_manager.rs: `sleep(Duration::from_secs(10));`
$DIR/testsuite/smoke-test/src/key_manager.rs: `sleep(Duration::from_secs(6));`
$DIR/testsuite/smoke-test/src/key_manager.rs: `.validators()`
$DIR/testsuite/smoke-test/src/key_manager.rs: `.next()`
$DIR/testsuite/smoke-test/src/key_manager.rs: `.config_path()`
$DIR/testsuite/smoke-test/src/key_manager.rs: `.try_into()`
$DIR/testsuite/smoke-test/src/key_manager.rs: `.json_rpc_endpoint()`
$DIR/testsuite/smoke-test/src/key_manager.rs: `.peer_id()`
$DIR/testsuite/smoke-test/src/key_manager.rs: `.get_public_key(CONSENSUS_KEY)`
$DIR/testsuite/smoke-test/src/key_manager.rs: `.retrieve_validator_info(account)`
$DIR/testsuite/smoke-test/src/key_manager.rs: `.try_into()`
$DIR/testsuite/smoke-test/src/key_manager.rs: `.execute()`
$DIR/testsuite/smoke-test/src/key_manager.rs: `.get_public_key(CONSENSUS_KEY)`
$DIR/testsuite/smoke-test/src/key_manager.rs: `.retrieve_validator_info(account)`
$DIR/testsuite/smoke-test/src/key_manager.rs: `.consensus_public_key()`
$DIR/testsuite/smoke-test/src/network.rs: `modify_network_of_node(
        swarm.fullnode_mut(vfn_peer_id).unwrap(),
        &NetworkId::Public,
        |network| {
            network.discovery_method = DiscoveryMethod::None;
            network.discovery_methods = vec![
                DiscoveryMethod::Onchain,
                DiscoveryMethod::File(
                    discovery_file.as_ref().to_path_buf(),
                    Duration::from_secs(1),
                ),
            ];
            network.max_inbound_connections = 0;
        },
    );`
$DIR/testsuite/smoke-test/src/network.rs: `network.discovery_method = DiscoveryMethod::None;`
$DIR/testsuite/smoke-test/src/network.rs: `network.discovery_methods = vec![
                DiscoveryMethod::Onchain,
                DiscoveryMethod::File(
                    discovery_file.as_ref().to_path_buf(),
                    Duration::from_secs(1),
                ),
            ];`
$DIR/testsuite/smoke-test/src/network.rs: `network.max_inbound_connections = 0;`
$DIR/testsuite/smoke-test/src/network.rs: `swarm
        .validator_mut(validator_peer_id)
        .unwrap()
        .wait_until_healthy(Instant::now() + Duration::from_secs(10))
        .unwrap();`
$DIR/testsuite/smoke-test/src/network.rs: `swarm
        .fullnode_mut(vfn_peer_id)
        .unwrap()
        .wait_until_healthy(Instant::now() + Duration::from_secs(10))
        .unwrap();`
$DIR/testsuite/smoke-test/src/network.rs: `add_identity_to_node(
        swarm.fullnode_mut(pfn_peer_id).unwrap(),
        &NetworkId::Public,
        private_key,
        peer_set,
    );`
$DIR/testsuite/smoke-test/src/network.rs: `swarm
        .fullnode_mut(pfn_peer_id)
        .unwrap()
        .wait_until_healthy(Instant::now() + Duration::from_secs(10))
        .unwrap();`
$DIR/testsuite/smoke-test/src/network.rs: `FullNode::wait_for_connectivity(
        swarm.fullnode(pfn_peer_id).unwrap(),
        Instant::now() + Duration::from_secs(10),
    )
    .unwrap();`
$DIR/testsuite/smoke-test/src/network.rs: `add_identity_to_node(
        swarm.fullnode_mut(pfn_peer_id_fail).unwrap(),
        &NetworkId::Public,
        private_key,
        peer_set,
    );`
$DIR/testsuite/smoke-test/src/network.rs: `swarm
        .fullnode_mut(pfn_peer_id_fail)
        .unwrap()
        .wait_until_healthy(Instant::now() + Duration::from_secs(10))
        .unwrap();`
$DIR/testsuite/smoke-test/src/network.rs: `sleep(Duration::from_secs(5));`
$DIR/testsuite/smoke-test/src/network.rs: `modify_network_of_node(
        swarm.validator_mut(validator_peer_id).unwrap(),
        &NetworkId::Validator,
        |network| {
            network.discovery_method = DiscoveryMethod::None;
            network.discovery_methods = vec![
                DiscoveryMethod::Onchain,
                DiscoveryMethod::File(
                    discovery_file.as_ref().to_path_buf(),
                    Duration::from_millis(100),
                ),
            ];
        },
    );`
$DIR/testsuite/smoke-test/src/network.rs: `network.discovery_method = DiscoveryMethod::None;`
$DIR/testsuite/smoke-test/src/network.rs: `network.discovery_methods = vec![
                DiscoveryMethod::Onchain,
                DiscoveryMethod::File(
                    discovery_file.as_ref().to_path_buf(),
                    Duration::from_millis(100),
                ),
            ];`
$DIR/testsuite/smoke-test/src/network.rs: `swarm.launch().unwrap();`
$DIR/testsuite/smoke-test/src/network.rs: `write_peerset_to_file(discovery_file.as_ref(), HashMap::new());`
$DIR/testsuite/smoke-test/src/network.rs: `sleep(Duration::from_millis(300));`
$DIR/testsuite/smoke-test/src/network.rs: `.versions()`
$DIR/testsuite/smoke-test/src/network.rs: `.max()`
$DIR/testsuite/smoke-test/src/network.rs: `.validators()`
$DIR/testsuite/smoke-test/src/network.rs: `.next()`
$DIR/testsuite/smoke-test/src/network.rs: `.peer_id()`
$DIR/testsuite/smoke-test/src/network.rs: `.add_validator_fullnode(
            &version,
            NodeConfig::default_for_validator_full_node(),
            validator_peer_id,
        )`
$DIR/testsuite/smoke-test/src/network.rs: `.fullnode_mut(vfn_peer_id)`
$DIR/testsuite/smoke-test/src/network.rs: `.validator_mut(validator_peer_id)`
$DIR/testsuite/smoke-test/src/network.rs: `.wait_until_healthy(Instant::now() + Duration::from_secs(10))`
$DIR/testsuite/smoke-test/src/network.rs: `.fullnode_mut(vfn_peer_id)`
$DIR/testsuite/smoke-test/src/network.rs: `.wait_until_healthy(Instant::now() + Duration::from_secs(10))`
$DIR/testsuite/smoke-test/src/network.rs: `.add_full_node(&version, NodeConfig::default_for_public_full_node())`
$DIR/testsuite/smoke-test/src/network.rs: `.fullnode_mut(pfn_peer_id)`
$DIR/testsuite/smoke-test/src/network.rs: `.fullnode_mut(pfn_peer_id)`
$DIR/testsuite/smoke-test/src/network.rs: `.wait_until_healthy(Instant::now() + Duration::from_secs(10))`
$DIR/testsuite/smoke-test/src/network.rs: `.fullnode(pfn_peer_id)`
$DIR/testsuite/smoke-test/src/network.rs: `.add_full_node(&version, NodeConfig::default_for_public_full_node())`
$DIR/testsuite/smoke-test/src/network.rs: `.fullnode_mut(pfn_peer_id_fail)`
$DIR/testsuite/smoke-test/src/network.rs: `.fullnode_mut(pfn_peer_id_fail)`
$DIR/testsuite/smoke-test/src/network.rs: `.wait_until_healthy(Instant::now() + Duration::from_secs(10))`
$DIR/testsuite/smoke-test/src/network.rs: `.validators()`
$DIR/testsuite/smoke-test/src/network.rs: `.next()`
$DIR/testsuite/smoke-test/src/network.rs: `.peer_id()`
$DIR/testsuite/smoke-test/src/network.rs: `.validator_mut(validator_peer_id)`
$DIR/testsuite/smoke-test/src/network.rs: `.launch()`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `wait_for_account_sequence_number(&client, txn_ctx.address, txn_ctx.sequence_number).unwrap();`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `op_tool
        .set_validator_config(
            Some(bad_network_address.clone()),
            None,
            &backend,
            false,
            false,
        )
        .unwrap_err();`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `wait_for_account_sequence_number(&client, txn_ctx.address, txn_ctx.sequence_number).unwrap();`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `storage.set(OWNER_ACCOUNT, validator_account).unwrap();`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `storage
        .import_private_key(OWNER_KEY, validator_key)
        .unwrap();`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `wait_for_account_sequence_number(&client, txn_ctx.address, txn_ctx.sequence_number).unwrap();`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `storage.set(OPERATOR_ACCOUNT, operator_account).unwrap();`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `storage
        .import_private_key(OPERATOR_KEY, operator_key)
        .unwrap();`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `wait_for_account_sequence_number(&client, txn_ctx.address, txn_ctx.sequence_number).unwrap();`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `wait_for_account_sequence_number(&client, txn_ctx.address, txn_ctx.sequence_number).unwrap();`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `op_tool
        .extract_private_key(
            OPERATOR_KEY,
            key_file_path.to_str().unwrap(),
            KeyType::Ed25519,
            EncodingType::BCS,
            &backend,
        )
        .unwrap();`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `op_tool
        .extract_public_key(
            OPERATOR_KEY,
            key_file_path.to_str().unwrap(),
            KeyType::Ed25519,
            EncodingType::BCS,
            &backend,
        )
        .unwrap();`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `path.create_as_file().unwrap();`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `output_path.create_as_file().unwrap();`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `key_path.create_as_file().unwrap();`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `keys.insert(
            op_tool
                .generate_key(KeyType::X25519, key_path.as_ref(), EncodingType::Hex)
                .unwrap()
                .public_key(),
        );`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `path.create_as_file().unwrap();`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `op_tool
        .insert_waypoint(inserted_waypoint, &backend, true)
        .unwrap();`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `op_tool
        .insert_waypoint(current_waypoint, &backend, false)
        .unwrap();`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `wait_for_account_sequence_number(&client, txn_ctx.address, txn_ctx.sequence_number).unwrap();`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `wait_for_transaction_on_all_nodes(&swarm, txn_ctx.address, txn_ctx.sequence_number);`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `validator.stop();`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `validator.start().unwrap();`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `wait_for_transaction_on_all_nodes(&swarm, txn_ctx.address, txn_ctx.sequence_number);`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `validator.stop();`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `validator.start().unwrap();`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `wait_for_account_sequence_number(&client, txn_ctx.address, txn_ctx.sequence_number).unwrap();`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `wait_for_account_sequence_number(&client, txn_ctx.address, txn_ctx.sequence_number).unwrap();`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `op_tool
        .insert_waypoint(inserted_waypoint, &backend, true)
        .unwrap();`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `wait_for_account_sequence_number(&client, operator_account, txn_ctx.sequence_number).unwrap();`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `storage
        .set(VALIDATOR_NETWORK_ADDRESS_KEYS, "INVALID KEY")
        .unwrap();`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `storage
        .set(VALIDATOR_NETWORK_ADDRESS_KEYS, "random string")
        .unwrap();`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.get::<AccountAddress>(OWNER_ACCOUNT)`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.account_resource(owner_account)`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.get::<AccountAddress>(OPERATOR_ACCOUNT)`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.account_resource(operator_account)`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.get_public_key(OPERATOR_KEY)`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.rotate_operator_key_with_custom_validation(&backend, false, Some(1), Some(0))`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.validators()`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.next()`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.json_rpc_client()`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.validate_transaction(txn_ctx.address, txn_ctx.sequence_number)`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.rotate_operator_key_with_custom_validation(&backend, false, Some(2), Some(60))`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.rotate_consensus_key(&backend, false)`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.get::<AccountAddress>(OWNER_ACCOUNT)`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.validator_config(validator_account, Some(&backend))`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.validator_set(Some(validator_account), Some(&backend))`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.rotate_key(CONSENSUS_KEY)`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.rotate_consensus_key(&backend, true)`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.set_validator_config(
            Some(bad_network_address.clone()),
            None,
            &backend,
            false,
            false,
        )`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.set_validator_config(Some(bad_network_address), None, &backend, false, true)`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.rotate_consensus_key(&backend, false)`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.rotate_validator_network_key(&backend, false)`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.rotate_fullnode_network_key(&backend, false)`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.rotate_operator_key(&backend, false)`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.set_validator_config(Some(new_network_address), None, &backend, false, false)`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.public_key()`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.validators()`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.next()`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.create_validator(
            val_human_name,
            validator_key_path.to_str().unwrap(),
            &diem_backend,
            false,
        )`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.to_str()`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.validators()`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.next()`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.public_key()`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.create_validator_operator(
            op_human_name,
            operator_key_path.to_str().unwrap(),
            &diem_backend,
            true,
        )`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.to_str()`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.json_rpc_client()`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.validate_transaction(txn_ctx.address, txn_ctx.sequence_number)`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.try_into()`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.set(OWNER_ACCOUNT, validator_account)`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.import_private_key(OWNER_KEY, validator_key)`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.json_rpc_endpoint()`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.retrieve_account_state(validator_account)`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.get_validator_config_resource()`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.set_validator_operator(op_human_name, operator_account, &backend, true)`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.retrieve_account_state(validator_account)`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.get_validator_config_resource()`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.set(OPERATOR_ACCOUNT, operator_account)`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.import_private_key(OPERATOR_KEY, operator_key)`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.set_validator_config(
            network_address.clone(),
            network_address,
            &backend,
            true,
            false,
        )`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.validator_set(None, Some(&backend))`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.add_validator(validator_account, &diem_backend, true)`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.validate_transaction(txn_ctx.address, txn_ctx.sequence_number)`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.validator_set(None, Some(&backend))`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.find(|info| info.account_address == validator_account)`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.add_validator(validator_account, &diem_backend, false)`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.validators()`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.next()`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.config_path()`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.with_file_name(OPERATOR_KEY)`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.extract_private_key(
            OPERATOR_KEY,
            key_file_path.to_str().unwrap(),
            KeyType::Ed25519,
            EncodingType::BCS,
            &backend,
        )`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.to_str()`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.export_private_key(OPERATOR_KEY)`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.validators()`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.next()`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.config_path()`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.with_file_name(OPERATOR_KEY)`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.extract_public_key(
            OPERATOR_KEY,
            key_file_path.to_str().unwrap(),
            KeyType::Ed25519,
            EncodingType::BCS,
            &backend,
        )`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.to_str()`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.get_public_key(OPERATOR_KEY)`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.validators()`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.next()`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.config()`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.extract_peer_from_storage(VALIDATOR_NETWORK_KEY, &backend)`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.peer_id()`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.identity_key()`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.public_key()`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.next()`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.extract_peer_from_storage(FULLNODE_NETWORK_KEY, &backend)`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.find(|network| network.network_id == NetworkId::Public)`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.peer_id()`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.identity_key()`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.public_key()`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.next()`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.create_as_file()`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.generate_key(KeyType::X25519, path.as_ref(), EncodingType::Hex)`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.extract_peer_from_file(path.as_ref(), EncodingType::Hex)`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.next()`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.public_key()`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.create_as_file()`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.create_as_file()`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.insert(
            op_tool
                .generate_key(KeyType::X25519, key_path.as_ref(), EncodingType::Hex)
                .unwrap()
                .public_key(),
        )`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.generate_key(KeyType::X25519, key_path.as_ref(), EncodingType::Hex)`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.public_key()`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.extract_peers_from_keys(keys.clone(), output_path.as_ref())`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.get(&address)`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.create_as_file()`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.generate_key(KeyType::X25519, path.as_ref(), EncodingType::Base64)`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.generate_key(KeyType::X25519, path.as_ref(), EncodingType::Hex)`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.generate_key(KeyType::X25519, path.as_ref(), EncodingType::BCS)`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.get(WAYPOINT)`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.insert_waypoint(inserted_waypoint, &backend, true)`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.insert_waypoint(current_waypoint, &backend, false)`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.rotate_fullnode_network_key(&backend, true)`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.validators()`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.next()`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.json_rpc_client()`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.get::<AccountAddress>(OWNER_ACCOUNT)`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.validator_config(validator_account, Some(&backend))`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.fullnode_network_address
        .find_noise_proto()`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.validator_set(Some(validator_account), Some(&backend))`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.fullnode_network_address
        .find_noise_proto()`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.rotate_validator_network_key(&backend, true)`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.get::<AccountAddress>(OWNER_ACCOUNT)`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.validator_config(validator_account, Some(&backend))`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.validator_network_address
        .find_noise_proto()`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.validator_set(Some(validator_account), Some(&backend))`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.validator_network_address
        .find_noise_proto()`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.validators_mut()`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.next()`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.stop()`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.start()`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.wait_for_connectivity(Instant::now() + Duration::from_secs(60))`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.rotate_key(VALIDATOR_NETWORK_KEY)`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.rotate_validator_network_key(&backend, true)`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.get::<AccountAddress>(OWNER_ACCOUNT)`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.validator_config(validator_account, Some(&backend))`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.validator_network_address
        .find_noise_proto()`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.validator_set(Some(validator_account), Some(&backend))`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.validator_network_address
        .find_noise_proto()`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.validators_mut()`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.next()`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.stop()`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.start()`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.wait_for_connectivity(Instant::now() + Duration::from_secs(60))`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.rotate_operator_key(&backend, true)`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.validators()`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.next()`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.json_rpc_client()`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.validate_transaction(txn_ctx.address, txn_ctx.sequence_number)`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.rotate_consensus_key(&backend, false)`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.get::<AccountAddress>(OWNER_ACCOUNT)`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.validator_config(validator_account, Some(&backend))`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.rotate_operator_key(&backend, false)`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.validate_transaction(txn_ctx.address, txn_ctx.sequence_number)`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.get::<AccountAddress>(OPERATOR_ACCOUNT)`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.account_resource(operator_account)`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.rotate_key(OPERATOR_KEY)`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.rotate_operator_key(&backend, true)`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.validators()`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.next()`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.json_rpc_client()`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.validate_transaction(txn_ctx.address, txn_ctx.sequence_number)`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.account_resource(operator_account)`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.print_account(OWNER_ACCOUNT, &backend)`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.get::<AccountAddress>(OWNER_ACCOUNT)`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.print_account(OPERATOR_ACCOUNT, &backend)`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.get::<AccountAddress>(OPERATOR_ACCOUNT)`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.print_key(OPERATOR_KEY, &backend)`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.get_public_key(OPERATOR_KEY)`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.print_key(CONSENSUS_KEY, &backend)`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.get_public_key(CONSENSUS_KEY)`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.insert_waypoint(inserted_waypoint, &backend, true)`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.print_waypoint(WAYPOINT, &backend)`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.print_waypoint(GENESIS_WAYPOINT, &backend)`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.print_account(OPERATOR_ACCOUNT, &backend)`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.rotate_operator_key(&backend, true)`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.validators()`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.next()`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.json_rpc_client()`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.validate_transaction(operator_account, txn_ctx.sequence_number)`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.rotate_operator_key(&backend, false)`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.validate_transaction(operator_account, txn_ctx.sequence_number)`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.get::<AccountAddress>(OWNER_ACCOUNT)`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.get_public_key(CONSENSUS_KEY)`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.validator_config(owner_account, Some(&backend))`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.rotate_key(CONSENSUS_KEY)`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.set_validator_config(
            Some(new_network_address.clone()),
            None,
            &backend,
            false,
            false,
        )`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.validator_config(owner_account, Some(&backend))`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.get::<AccountAddress>(OWNER_ACCOUNT)`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.validator_config(owner_account, Some(&backend))`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.validator_set(Some(owner_account), Some(&backend))`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.set(VALIDATOR_NETWORK_ADDRESS_KEYS, "INVALID KEY")`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.validator_config(owner_account, *backend)`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.validator_set(Some(owner_account), *backend)`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.get::<AccountAddress>(OWNER_ACCOUNT)`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.validator_config(owner_account, Some(&backend))`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.validator_set(Some(owner_account), Some(&backend))`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.first()`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.validator_set(None, Some(&backend))`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.find(|info| info.account_address == owner_account)`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.set(VALIDATOR_NETWORK_ADDRESS_KEYS, "random string")`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.validator_set(None, Some(&backend))`
$DIR/testsuite/smoke-test/src/operational_tooling.rs: `.find(|info| info.account_address == owner_account)`
$DIR/testsuite/smoke-test/src/release_flow.rs: `verify_release(chain_id, url.clone(), &payload_1, &release_modules, false).unwrap();`
$DIR/testsuite/smoke-test/src/release_flow.rs: `client.submit(&txn).unwrap();`
$DIR/testsuite/smoke-test/src/release_flow.rs: `client
        .wait_for_signed_transaction(&txn, None, None)
        .unwrap();`
$DIR/testsuite/smoke-test/src/release_flow.rs: `swarm
        .chain_info()
        .fund(Currency::XUS, account.address(), 100)
        .unwrap();`
$DIR/testsuite/smoke-test/src/release_flow.rs: `assert_balance(&client, &account, 200);`
$DIR/testsuite/smoke-test/src/release_flow.rs: `verify_release(chain_id, url.clone(), &payload_2, &old_modules, false).unwrap();`
$DIR/testsuite/smoke-test/src/release_flow.rs: `client.submit(&txn).unwrap();`
$DIR/testsuite/smoke-test/src/release_flow.rs: `client
        .wait_for_signed_transaction(&txn, None, None)
        .unwrap();`
$DIR/testsuite/smoke-test/src/release_flow.rs: `.chain_info()`
$DIR/testsuite/smoke-test/src/release_flow.rs: `.transaction_factory()`
$DIR/testsuite/smoke-test/src/release_flow.rs: `.chain_id()`
$DIR/testsuite/smoke-test/src/release_flow.rs: `.validators()`
$DIR/testsuite/smoke-test/src/release_flow.rs: `.next()`
$DIR/testsuite/smoke-test/src/release_flow.rs: `.json_rpc_endpoint()`
$DIR/testsuite/smoke-test/src/release_flow.rs: `.json_rpc_client()`
$DIR/testsuite/smoke-test/src/release_flow.rs: `.into_iter()`
$DIR/testsuite/smoke-test/src/release_flow.rs: `.map(|(bytes, modules)| (bytes.clone(), modules.clone()))`
$DIR/testsuite/smoke-test/src/release_flow.rs: `.collect::<Vec<_>>()`
$DIR/testsuite/smoke-test/src/release_flow.rs: `.chain_info()`
$DIR/testsuite/smoke-test/src/release_flow.rs: `.root_account
        .sign_with_transaction_builder(
            transaction_factory.payload(TransactionPayload::WriteSet(payload_1.clone())),
        )`
$DIR/testsuite/smoke-test/src/release_flow.rs: `.payload(TransactionPayload::WriteSet(payload_1.clone()))`
$DIR/testsuite/smoke-test/src/release_flow.rs: `.submit(&txn)`
$DIR/testsuite/smoke-test/src/release_flow.rs: `.wait_for_signed_transaction(&txn, None, None)`
$DIR/testsuite/smoke-test/src/release_flow.rs: `.get_latest_version()`
$DIR/testsuite/smoke-test/src/release_flow.rs: `.get_diem_framework_modules_by_version(latest_version)`
$DIR/testsuite/smoke-test/src/release_flow.rs: `.chain_info()`
$DIR/testsuite/smoke-test/src/release_flow.rs: `.fund(Currency::XUS, account.address(), 100)`
$DIR/testsuite/smoke-test/src/release_flow.rs: `.address()`
$DIR/testsuite/smoke-test/src/release_flow.rs: `.get_latest_version()`
$DIR/testsuite/smoke-test/src/release_flow.rs: `.chain_info()`
$DIR/testsuite/smoke-test/src/release_flow.rs: `.root_account
        .sign_with_transaction_builder(
            transaction_factory.payload(TransactionPayload::WriteSet(payload_2)),
        )`
$DIR/testsuite/smoke-test/src/release_flow.rs: `.payload(TransactionPayload::WriteSet(payload_2))`
$DIR/testsuite/smoke-test/src/release_flow.rs: `.submit(&txn)`
$DIR/testsuite/smoke-test/src/release_flow.rs: `.wait_for_signed_transaction(&txn, None, None)`
$DIR/testsuite/smoke-test/src/release_flow.rs: `.get_latest_version()`
$DIR/testsuite/smoke-test/src/release_flow.rs: `.get_diem_framework_modules_by_version(latest_version)`
$DIR/testsuite/smoke-test/src/state_sync.rs: `config.state_sync.chunk_limit = 5;`
$DIR/testsuite/smoke-test/src/state_sync.rs: `config.save(validator.config_path()).unwrap();`
$DIR/testsuite/smoke-test/src/state_sync.rs: `validator.restart().unwrap();`
$DIR/testsuite/smoke-test/src/state_sync.rs: `swarm.launch().unwrap();`
$DIR/testsuite/smoke-test/src/state_sync.rs: `transfer_coins(
        &client_1,
        &transaction_factory,
        &mut account_0,
        &account_1,
        10,
    );`
$DIR/testsuite/smoke-test/src/state_sync.rs: `assert_balance(&client_1, &account_0, 90);`
$DIR/testsuite/smoke-test/src/state_sync.rs: `assert_balance(&client_1, &account_1, 20);`
$DIR/testsuite/smoke-test/src/state_sync.rs: `swarm.validator_mut(node_to_restart).unwrap().stop();`
$DIR/testsuite/smoke-test/src/state_sync.rs: `transfer_coins(
        &client_1,
        &transaction_factory,
        &mut account_0,
        &account_1,
        1,
    );`
$DIR/testsuite/smoke-test/src/state_sync.rs: `assert_balance(&client_1, &account_0, 89);`
$DIR/testsuite/smoke-test/src/state_sync.rs: `assert_balance(&client_1, &account_1, 21);`
$DIR/testsuite/smoke-test/src/state_sync.rs: `swarm
        .validator_mut(node_to_restart)
        .unwrap()
        .start()
        .unwrap();`
$DIR/testsuite/smoke-test/src/state_sync.rs: `swarm
        .validator_mut(node_to_restart)
        .unwrap()
        .wait_until_healthy(Instant::now() + Duration::from_secs(10))
        .unwrap();`
$DIR/testsuite/smoke-test/src/state_sync.rs: `swarm
        .wait_for_all_nodes_to_catchup(Instant::now() + Duration::from_secs(60))
        .unwrap();`
$DIR/testsuite/smoke-test/src/state_sync.rs: `assert_balance(&client_0, &account_0, 89);`
$DIR/testsuite/smoke-test/src/state_sync.rs: `assert_balance(&client_0, &account_1, 21);`
$DIR/testsuite/smoke-test/src/state_sync.rs: `swarm.validator_mut(node_to_restart).unwrap().stop();`
$DIR/testsuite/smoke-test/src/state_sync.rs: `transfer_coins(
            &client_1,
            &transaction_factory,
            &mut account_0,
            &account_1,
            1,
        );`
$DIR/testsuite/smoke-test/src/state_sync.rs: `assert_balance(&client_1, &account_0, 79);`
$DIR/testsuite/smoke-test/src/state_sync.rs: `assert_balance(&client_1, &account_1, 31);`
$DIR/testsuite/smoke-test/src/state_sync.rs: `swarm
        .validator_mut(node_to_restart)
        .unwrap()
        .start()
        .unwrap();`
$DIR/testsuite/smoke-test/src/state_sync.rs: `swarm
        .validator_mut(node_to_restart)
        .unwrap()
        .wait_until_healthy(Instant::now() + Duration::from_secs(10))
        .unwrap();`
$DIR/testsuite/smoke-test/src/state_sync.rs: `swarm
        .wait_for_all_nodes_to_catchup(Instant::now() + Duration::from_secs(60))
        .unwrap();`
$DIR/testsuite/smoke-test/src/state_sync.rs: `assert_balance(&client_0, &account_0, 79);`
$DIR/testsuite/smoke-test/src/state_sync.rs: `assert_balance(&client_1, &account_0, 90);`
$DIR/testsuite/smoke-test/src/state_sync.rs: `assert_balance(&client_1, &account_1, 20);`
$DIR/testsuite/smoke-test/src/state_sync.rs: `swarm.validator_mut(node_to_restart).unwrap().stop();`
$DIR/testsuite/smoke-test/src/state_sync.rs: `fs::remove_dir_all(state_db_path).unwrap();`
$DIR/testsuite/smoke-test/src/state_sync.rs: `swarm
        .validator_mut(node_to_restart)
        .unwrap()
        .start()
        .unwrap();`
$DIR/testsuite/smoke-test/src/state_sync.rs: `swarm
        .validator_mut(node_to_restart)
        .unwrap()
        .wait_until_healthy(Instant::now() + Duration::from_secs(10))
        .unwrap();`
$DIR/testsuite/smoke-test/src/state_sync.rs: `client_0
        .wait_for_signed_transaction(&txn, None, None)
        .unwrap();`
$DIR/testsuite/smoke-test/src/state_sync.rs: `assert_balance(&client_0, &account_0, 90);`
$DIR/testsuite/smoke-test/src/state_sync.rs: `assert_balance(&client_0, &account_1, 20);`
$DIR/testsuite/smoke-test/src/state_sync.rs: `client_0
        .wait_for_signed_transaction(&txn, None, None)
        .unwrap();`
$DIR/testsuite/smoke-test/src/state_sync.rs: `assert_balance(&client_0, &account_0, 80);`
$DIR/testsuite/smoke-test/src/state_sync.rs: `assert_balance(&client_1, &account_0, 90);`
$DIR/testsuite/smoke-test/src/state_sync.rs: `assert_balance(&client_1, &account_1, 20);`
$DIR/testsuite/smoke-test/src/state_sync.rs: `swarm.validator_mut(node_to_restart).unwrap().stop();`
$DIR/testsuite/smoke-test/src/state_sync.rs: `fs::remove_dir_all(consensus_db_path).unwrap();`
$DIR/testsuite/smoke-test/src/state_sync.rs: `swarm
        .validator_mut(node_to_restart)
        .unwrap()
        .start()
        .unwrap();`
$DIR/testsuite/smoke-test/src/state_sync.rs: `swarm
        .validator_mut(node_to_restart)
        .unwrap()
        .wait_until_healthy(Instant::now() + Duration::from_secs(10))
        .unwrap();`
$DIR/testsuite/smoke-test/src/state_sync.rs: `client_0
        .wait_for_signed_transaction(&txn, None, None)
        .unwrap();`
$DIR/testsuite/smoke-test/src/state_sync.rs: `assert_balance(&client_0, &account_0, 90);`
$DIR/testsuite/smoke-test/src/state_sync.rs: `assert_balance(&client_0, &account_1, 20);`
$DIR/testsuite/smoke-test/src/state_sync.rs: `client_0
        .wait_for_signed_transaction(&txn, None, None)
        .unwrap();`
$DIR/testsuite/smoke-test/src/state_sync.rs: `assert_balance(&client_0, &account_0, 80);`
$DIR/testsuite/smoke-test/src/state_sync.rs: `config.state_sync.chunk_limit = 5;`
$DIR/testsuite/smoke-test/src/state_sync.rs: `config.save(validator.config_path()).unwrap();`
$DIR/testsuite/smoke-test/src/state_sync.rs: `validator.restart().unwrap();`
$DIR/testsuite/smoke-test/src/state_sync.rs: `swarm.launch().unwrap();`
$DIR/testsuite/smoke-test/src/state_sync.rs: `enable_custom_script(
        &client_0,
        &transaction_factory,
        swarm.chain_info().root_account,
    )
    .unwrap();`
$DIR/testsuite/smoke-test/src/state_sync.rs: `assert_balance(&client_0, &account_0, 100);`
$DIR/testsuite/smoke-test/src/state_sync.rs: `assert_balance(&client_0, &account_1, 10);`
$DIR/testsuite/smoke-test/src/state_sync.rs: `swarm.validator_mut(node_to_restart).unwrap().stop();`
$DIR/testsuite/smoke-test/src/state_sync.rs: `transfer_coins(
            &client_0,
            &transaction_factory,
            &mut account_0,
            &account_1,
            10,
        );`
$DIR/testsuite/smoke-test/src/state_sync.rs: `client_0.submit(&txn).unwrap();`
$DIR/testsuite/smoke-test/src/state_sync.rs: `client_0
        .wait_for_signed_transaction(&txn, None, None)
        .unwrap();`
$DIR/testsuite/smoke-test/src/state_sync.rs: `enable_custom_script(
            &client_0,
            &transaction_factory,
            swarm.chain_info().root_account,
        )
        .unwrap();`
$DIR/testsuite/smoke-test/src/state_sync.rs: `node_config.execution.genesis = None;`
$DIR/testsuite/smoke-test/src/state_sync.rs: `node_config.execution.genesis_file_location = PathBuf::from("");`
$DIR/testsuite/smoke-test/src/state_sync.rs: `insert_waypoint(&mut node_config, waypoint_epoch_2);`
$DIR/testsuite/smoke-test/src/state_sync.rs: `node_config.save(node_config_path).unwrap();`
$DIR/testsuite/smoke-test/src/state_sync.rs: `swarm
        .validator_mut(node_to_restart)
        .unwrap()
        .start()
        .unwrap();`
$DIR/testsuite/smoke-test/src/state_sync.rs: `swarm
        .validator_mut(node_to_restart)
        .unwrap()
        .wait_until_healthy(Instant::now() + Duration::from_secs(10))
        .unwrap();`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.validators_mut()`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.config()`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.save(validator.config_path())`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.config_path()`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.restart()`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.launch()`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.validators()`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.map(|v| v.peer_id())`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.peer_id()`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.collect::<Vec<_>>()`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.validator(validator_peer_ids[1])`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.json_rpc_client()`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.chain_info()`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.transaction_factory()`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.validator_mut(node_to_restart)`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.stop()`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.validator_mut(node_to_restart)`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.start()`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.validator_mut(node_to_restart)`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.wait_until_healthy(Instant::now() + Duration::from_secs(10))`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.wait_for_all_nodes_to_catchup(Instant::now() + Duration::from_secs(60))`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.validator(node_to_restart)`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.json_rpc_client()`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.validator_mut(node_to_restart)`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.stop()`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.validator_mut(node_to_restart)`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.start()`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.validator_mut(node_to_restart)`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.wait_until_healthy(Instant::now() + Duration::from_secs(10))`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.wait_for_all_nodes_to_catchup(Instant::now() + Duration::from_secs(60))`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.validators()`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.map(|v| v.peer_id())`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.peer_id()`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.collect::<Vec<_>>()`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.validator(validator_peer_ids[1])`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.json_rpc_client()`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.chain_info()`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.transaction_factory()`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.validator(node_to_restart)`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.config()`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.validator_mut(node_to_restart)`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.stop()`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.storage.dir()`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.join("diemdb")`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.validator_mut(node_to_restart)`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.start()`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.validator_mut(node_to_restart)`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.wait_until_healthy(Instant::now() + Duration::from_secs(10))`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.validator(node_to_restart)`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.json_rpc_client()`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.wait_for_signed_transaction(&txn, None, None)`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.wait_for_signed_transaction(&txn, None, None)`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.validators()`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.map(|v| v.peer_id())`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.peer_id()`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.collect::<Vec<_>>()`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.validator(validator_peer_ids[1])`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.json_rpc_client()`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.chain_info()`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.transaction_factory()`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.validator(node_to_restart)`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.config()`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.validator_mut(node_to_restart)`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.stop()`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.storage.dir()`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.join("consensusdb")`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.validator_mut(node_to_restart)`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.start()`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.validator_mut(node_to_restart)`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.wait_until_healthy(Instant::now() + Duration::from_secs(10))`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.validator(node_to_restart)`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.json_rpc_client()`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.wait_for_signed_transaction(&txn, None, None)`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.wait_for_signed_transaction(&txn, None, None)`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.validators_mut()`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.config()`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.save(validator.config_path())`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.config_path()`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.restart()`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.launch()`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.validators()`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.map(|v| v.peer_id())`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.peer_id()`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.collect::<Vec<_>>()`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.validator(validator_peer_ids[0])`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.json_rpc_client()`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.chain_info()`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.transaction_factory()`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.chain_info()`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.validator_mut(node_to_restart)`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.stop()`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.join("../..")`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.join("testsuite/smoke-test/src/dev_modules/test_script.move")`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.canonicalize()`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.to_str()`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.sign_with_transaction_builder(transaction_factory.payload(
        TransactionPayload::Script(Script::new(
            compiled_script,
            vec![],
            vec![
                TransactionArgument::U64(10),
                TransactionArgument::Address(AccountAddress::from_hex_literal("0x0").unwrap()),
            ],
        )),
    ))`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.payload(
        TransactionPayload::Script(Script::new(
            compiled_script,
            vec![],
            vec![
                TransactionArgument::U64(10),
                TransactionArgument::Address(AccountAddress::from_hex_literal("0x0").unwrap()),
            ],
        )),
    )`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.submit(&txn)`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.wait_for_signed_transaction(&txn, None, None)`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.chain_info()`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.get_state_proof(0)`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.into_inner()`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.epoch_change_proof
                .inner()`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.ledger_info_with_sigs
            .last()`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.ledger_info()`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.get_state_proof(0)`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.into_inner()`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.epoch_change_proof
            .inner()`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.ledger_info_with_sigs
            .last()`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.ledger_info()`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.validator(node_to_restart)`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.config_path()`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.validator(node_to_restart)`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.config()`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.save(node_config_path)`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.validator_mut(node_to_restart)`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.start()`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.validator_mut(node_to_restart)`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.wait_until_healthy(Instant::now() + Duration::from_secs(10))`
$DIR/testsuite/smoke-test/src/state_sync.rs: `.wait_for_all_nodes_to_catchup(Instant::now() + Duration::from_secs(60))`
$DIR/testsuite/smoke-test/src/storage.rs: `workspace_builder::get_bin("db-backup");`
$DIR/testsuite/smoke-test/src/storage.rs: `workspace_builder::get_bin("db-restore");`
$DIR/testsuite/smoke-test/src/storage.rs: `workspace_builder::get_bin("db-backup-verify");`
$DIR/testsuite/smoke-test/src/storage.rs: `transfer_coins(
        &client_1,
        &transaction_factory,
        &mut account_0,
        &account_1,
        1,
    );`
$DIR/testsuite/smoke-test/src/storage.rs: `assert_balance(&client_1, &account_0, expected_balance_0);`
$DIR/testsuite/smoke-test/src/storage.rs: `assert_balance(&client_1, &account_1, expected_balance_1);`
$DIR/testsuite/smoke-test/src/storage.rs: `transfer_and_reconfig(
        &client_1,
        &transaction_factory,
        swarm.chain_info().root_account,
        &mut account_0,
        &account_1,
        20,
    )
    .unwrap();`
$DIR/testsuite/smoke-test/src/storage.rs: `expected_balance_0 -= 20;`
$DIR/testsuite/smoke-test/src/storage.rs: `expected_balance_1 += 20;`
$DIR/testsuite/smoke-test/src/storage.rs: `assert_balance(&client_1, &account_0, expected_balance_0);`
$DIR/testsuite/smoke-test/src/storage.rs: `assert_balance(&client_1, &account_1, expected_balance_1);`
$DIR/testsuite/smoke-test/src/storage.rs: `swarm.validator_mut(node_to_restart).unwrap().stop();`
$DIR/testsuite/smoke-test/src/storage.rs: `insert_waypoint(&mut node0_config, genesis_waypoint);`
$DIR/testsuite/smoke-test/src/storage.rs: `node0_config.save(node0_config_path).unwrap();`
$DIR/testsuite/smoke-test/src/storage.rs: `fs::remove_dir_all(db_dir.join("diemdb")).unwrap();`
$DIR/testsuite/smoke-test/src/storage.rs: `fs::remove_dir_all(db_dir.join("consensusdb")).unwrap();`
$DIR/testsuite/smoke-test/src/storage.rs: `db_restore(backup_path.path(), db_dir.as_path(), &[]);`
$DIR/testsuite/smoke-test/src/storage.rs: `transfer_and_reconfig(
            &client_1,
            &transaction_factory,
            swarm.chain_info().root_account,
            &mut account_0,
            &account_1,
            20,
        )
        .unwrap();`
$DIR/testsuite/smoke-test/src/storage.rs: `expected_balance_0 -= 20;`
$DIR/testsuite/smoke-test/src/storage.rs: `expected_balance_1 += 20;`
$DIR/testsuite/smoke-test/src/storage.rs: `assert_balance(&client_1, &account_0, expected_balance_0);`
$DIR/testsuite/smoke-test/src/storage.rs: `assert_balance(&client_1, &account_1, expected_balance_1);`
$DIR/testsuite/smoke-test/src/storage.rs: `swarm
        .validator_mut(node_to_restart)
        .unwrap()
        .start()
        .unwrap();`
$DIR/testsuite/smoke-test/src/storage.rs: `swarm
        .validator_mut(node_to_restart)
        .unwrap()
        .wait_until_healthy(Instant::now() + Duration::from_secs(10))
        .unwrap();`
$DIR/testsuite/smoke-test/src/storage.rs: `swarm
        .wait_for_all_nodes_to_catchup(Instant::now() + Duration::from_secs(60))
        .unwrap();`
$DIR/testsuite/smoke-test/src/storage.rs: `assert_balance(&client_0, &account_0, expected_balance_0);`
$DIR/testsuite/smoke-test/src/storage.rs: `.validators()`
$DIR/testsuite/smoke-test/src/storage.rs: `.map(|v| v.peer_id())`
$DIR/testsuite/smoke-test/src/storage.rs: `.peer_id()`
$DIR/testsuite/smoke-test/src/storage.rs: `.collect::<Vec<_>>()`
$DIR/testsuite/smoke-test/src/storage.rs: `.validator(validator_peer_ids[1])`
$DIR/testsuite/smoke-test/src/storage.rs: `.json_rpc_client()`
$DIR/testsuite/smoke-test/src/storage.rs: `.chain_info()`
$DIR/testsuite/smoke-test/src/storage.rs: `.transaction_factory()`
$DIR/testsuite/smoke-test/src/storage.rs: `.chain_info()`
$DIR/testsuite/smoke-test/src/storage.rs: `.validator(validator_peer_ids[1])`
$DIR/testsuite/smoke-test/src/storage.rs: `.config()`
$DIR/testsuite/smoke-test/src/storage.rs: `.storage.backup_service_address.port()`
$DIR/testsuite/smoke-test/src/storage.rs: `.validator_mut(node_to_restart)`
$DIR/testsuite/smoke-test/src/storage.rs: `.stop()`
$DIR/testsuite/smoke-test/src/storage.rs: `.validator(node_to_restart)`
$DIR/testsuite/smoke-test/src/storage.rs: `.config_path()`
$DIR/testsuite/smoke-test/src/storage.rs: `.validator(node_to_restart)`
$DIR/testsuite/smoke-test/src/storage.rs: `.config()`
$DIR/testsuite/smoke-test/src/storage.rs: `.base.waypoint.genesis_waypoint()`
$DIR/testsuite/smoke-test/src/storage.rs: `.save(node0_config_path)`
$DIR/testsuite/smoke-test/src/storage.rs: `.storage.dir()`
$DIR/testsuite/smoke-test/src/storage.rs: `.join("diemdb")`
$DIR/testsuite/smoke-test/src/storage.rs: `.join("consensusdb")`
$DIR/testsuite/smoke-test/src/storage.rs: `.path()`
$DIR/testsuite/smoke-test/src/storage.rs: `.chain_info()`
$DIR/testsuite/smoke-test/src/storage.rs: `.validator_mut(node_to_restart)`
$DIR/testsuite/smoke-test/src/storage.rs: `.start()`
$DIR/testsuite/smoke-test/src/storage.rs: `.validator_mut(node_to_restart)`
$DIR/testsuite/smoke-test/src/storage.rs: `.wait_until_healthy(Instant::now() + Duration::from_secs(10))`
$DIR/testsuite/smoke-test/src/storage.rs: `.wait_for_all_nodes_to_catchup(Instant::now() + Duration::from_secs(60))`
$DIR/testsuite/smoke-test/src/storage.rs: `.validator(node_to_restart)`
$DIR/testsuite/smoke-test/src/storage.rs: `.json_rpc_client()`
$DIR/types/src/account_address.rs: `hash.copy_from_slice(bytes);`
$DIR/types/src/account_address.rs: `.parse()`
$DIR/types/src/account_address.rs: `.copy_from_slice(bytes)`
$DIR/types/src/epoch_change.rs: `validator_verifier.push(current_verifier.clone());`
$DIR/types/src/epoch_change.rs: `valid_ledger_info.push(LedgerInfoWithSignatures::new(ledger_info, signatures));`
$DIR/types/src/epoch_change.rs: `current_signers = next_signers;`
$DIR/types/src/epoch_change.rs: `current_verifier = next_verifier;`
$DIR/types/src/epoch_change.rs: `current_version += 1;`
$DIR/types/src/epoch_change.rs: `list.extend_from_slice(&valid_ledger_info[8..9]);`
$DIR/types/src/epoch_change.rs: `list.reverse();`
$DIR/types/src/epoch_change.rs: `.collect()`
$DIR/types/src/epoch_change.rs: `.push(current_verifier.clone())`
$DIR/types/src/epoch_change.rs: `.map(|s| (s.author(), s.sign(&ledger_info)))`
$DIR/types/src/epoch_change.rs: `.author()`
$DIR/types/src/epoch_change.rs: `.sign(&ledger_info)`
$DIR/types/src/epoch_change.rs: `.collect()`
$DIR/types/src/epoch_change.rs: `.push(LedgerInfoWithSignatures::new(ledger_info, signatures))`
$DIR/types/src/epoch_change.rs: `.extend_from_slice(&valid_ledger_info[8..9])`
$DIR/types/src/epoch_change.rs: `.reverse()`
$DIR/types/src/epoch_change.rs: `.ledger_info()`
$DIR/types/src/epoch_change.rs: `.ledger_info()`
$DIR/types/src/epoch_change.rs: `.ledger_info()`
$DIR/types/src/ledger_info.rs: `author_to_signature_map.insert(validator.author(), validator.sign(&ledger_info));`
$DIR/types/src/ledger_info.rs: `author_to_signature_map.insert(validator.author(), validator.sign(&ledger_info));`
$DIR/types/src/ledger_info.rs: `.map(|i| ValidatorSigner::random([i; 32]))`
$DIR/types/src/ledger_info.rs: `.collect()`
$DIR/types/src/ledger_info.rs: `.insert(validator.author(), validator.sign(&ledger_info))`
$DIR/types/src/ledger_info.rs: `.author()`
$DIR/types/src/ledger_info.rs: `.sign(&ledger_info)`
$DIR/types/src/ledger_info.rs: `.rev()`
$DIR/types/src/ledger_info.rs: `.insert(validator.author(), validator.sign(&ledger_info))`
$DIR/types/src/ledger_info.rs: `.author()`
$DIR/types/src/ledger_info.rs: `.sign(&ledger_info)`
$DIR/types/src/network_address/encrypted.rs: `malicious_enc_addr.seq_num = 1234;`
$DIR/types/src/network_address/encrypted.rs: `malicious_enc_addr
            .decrypt(&shared_val_netaddr_key, &account, addr_idx)
            .unwrap_err();`
$DIR/types/src/network_address/encrypted.rs: `malicious_enc_addr.key_version = 9999;`
$DIR/types/src/network_address/encrypted.rs: `malicious_enc_addr
            .decrypt(&shared_val_netaddr_key, &account, addr_idx)
            .unwrap_err();`
$DIR/types/src/network_address/encrypted.rs: `buf[buf_len - 1] ^= 0x55;`
$DIR/types/src/network_address/encrypted.rs: `malicious_enc_addr
            .decrypt(&shared_val_netaddr_key, &account, addr_idx)
            .unwrap_err();`
$DIR/types/src/network_address/encrypted.rs: `malicious_enc_addr.enc_addr = vec![0x42u8; 123];`
$DIR/types/src/network_address/encrypted.rs: `malicious_enc_addr
            .decrypt(&shared_val_netaddr_key, &account, addr_idx)
            .unwrap_err();`
$DIR/types/src/network_address/encrypted.rs: `enc_addr
            .clone()
            .decrypt(&shared_val_netaddr_key, &malicious_account, addr_idx)
            .unwrap_err();`
$DIR/types/src/network_address/encrypted.rs: `enc_addr
            .clone()
            .decrypt(&malicious_shared_val_netaddr_key, &account, addr_idx)
            .unwrap_err();`
$DIR/types/src/network_address/encrypted.rs: `.encrypt(
                &shared_val_netaddr_key,
                key_version,
                &account,
                seq_num,
                addr_idx,
            )`
$DIR/types/src/network_address/encrypted.rs: `.decrypt(&shared_val_netaddr_key, &account, addr_idx)`
$DIR/types/src/network_address/encrypted.rs: `.decrypt(&shared_val_netaddr_key, &account, addr_idx)`
$DIR/types/src/network_address/encrypted.rs: `.decrypt(&shared_val_netaddr_key, &account, addr_idx)`
$DIR/types/src/network_address/encrypted.rs: `.len()`
$DIR/types/src/network_address/encrypted.rs: `.decrypt(&shared_val_netaddr_key, &account, addr_idx)`
$DIR/types/src/network_address/encrypted.rs: `.decrypt(&shared_val_netaddr_key, &account, addr_idx)`
$DIR/types/src/network_address/encrypted.rs: `.decrypt(&shared_val_netaddr_key, &malicious_account, addr_idx)`
$DIR/types/src/network_address/encrypted.rs: `.decrypt(&malicious_shared_val_netaddr_key, &account, addr_idx)`
$DIR/types/src/network_address/encrypted.rs: `.decrypt(&shared_val_netaddr_key, &account, malicious_addr_idx)`
$DIR/types/src/network_address/mod.rs: `.map_err(|err| format_err!("failed to parse: input: '{}', err: {}", addr_str, err))`
$DIR/types/src/nibble/nibble_path/nibble_path_test.rs: `.nibbles()`
$DIR/types/src/nibble/nibble_path/nibble_path_test.rs: `.bits()`
$DIR/types/src/nibble/nibble_path/nibble_path_test.rs: `.nibbles()`
$DIR/types/src/nibble/nibble_path/nibble_path_test.rs: `.visited_nibbles()`
$DIR/types/src/nibble/nibble_path/nibble_path_test.rs: `.nibbles()`
$DIR/types/src/nibble/nibble_path/nibble_path_test.rs: `.nibbles()`
$DIR/types/src/nibble/nibble_path/nibble_path_test.rs: `.nibbles()`
$DIR/types/src/nibble/nibble_path/nibble_path_test.rs: `.nibbles()`
$DIR/types/src/nibble/nibble_path/nibble_path_test.rs: `.nibbles()`
$DIR/types/src/nibble/nibble_path/nibble_path_test.rs: `.nibbles()`
$DIR/types/src/proof/accumulator/accumulator_test.rs: `accumulator = accumulator.append(&[leaf]);`
$DIR/types/src/proof/accumulator/accumulator_test.rs: `.map(|x| {
        let leaves = create_leaves(0..x);
        compute_root_hash_naive(&leaves)
    })`
$DIR/types/src/proof/accumulator/accumulator_test.rs: `.into_iter()`
$DIR/types/src/proof/accumulator/accumulator_test.rs: `.enumerate()`
$DIR/types/src/proof/accumulator/accumulator_test.rs: `.append(&[leaf])`
$DIR/types/src/proof/accumulator/mock.rs: `.get_root_hash(end)`
$DIR/types/src/proof/position/position_test.rs: `position = Position::from_inorder_index(0);`
$DIR/types/src/proof/position/position_test.rs: `position = Position::from_inorder_index(0);`
$DIR/types/src/proof/position/position_test.rs: `position = Position::from_inorder_index(7);`
$DIR/types/src/proof/position/position_test.rs: `position = Position::from_inorder_index(10);`
$DIR/types/src/proof/position/position_test.rs: `test_invariant_non_leaf(|pos| pos == pos.right_child().parent());`
$DIR/types/src/proof/position/position_test.rs: `test_invariant_non_leaf(|pos| pos == pos.left_child().parent());`
$DIR/types/src/proof/position/position_test.rs: `test_invariant(|pos| pos.level() == pos.parent().level() - 1);`
$DIR/types/src/proof/position/position_test.rs: `test_invariant(|pos| {
        Position::from_level_and_pos(pos.level(), pos.pos_counting_from_left()) == pos
    });`
$DIR/types/src/proof/position/position_test.rs: `test_invariant(|pos| {
        Position::from_inorder_index(postorder_to_inorder(inorder_to_postorder(
            pos.to_inorder_index(),
        ))) == pos
    });`
$DIR/types/src/proof/position/position_test.rs: `test_invariant_non_leaf(|pos| {
        pos.right_child().pos_counting_from_left() == pos.left_child().pos_counting_from_left() + 1
    });`
$DIR/types/src/proof/position/position_test.rs: `test_invariant_non_leaf(|pos| pos.left_child().to_inorder_index() < pos.to_inorder_index());`
$DIR/types/src/proof/position/position_test.rs: `test_invariant_non_leaf(|pos| pos.to_inorder_index() < pos.right_child().to_inorder_index());`
$DIR/types/src/proof/position/position_test.rs: `test_invariant_non_leaf(|pos| {
        inorder_to_postorder(pos.left_child().to_inorder_index())
            < inorder_to_postorder(pos.to_inorder_index())
    });`
$DIR/types/src/proof/position/position_test.rs: `test_invariant_non_leaf(|pos| {
        inorder_to_postorder(pos.right_child().to_inorder_index())
            < inorder_to_postorder(pos.to_inorder_index())
    });`
$DIR/types/src/proof/position/position_test.rs: `test_invariant_non_leaf(|pos| {
        inorder_to_postorder(pos.right_child().to_inorder_index()) + 1
            == inorder_to_postorder(pos.to_inorder_index())
    });`
$DIR/types/src/proof/position/position_test.rs: `test_invariant_non_leaf(|pos| pos.right_child() == pos.left_child().sibling());`
$DIR/types/src/proof/position/position_test.rs: `test_invariant_non_leaf(|pos| pos.right_child().sibling() == pos.left_child());`
$DIR/types/src/proof/position/position_test.rs: `test_invariant_non_leaf(|pos| pos.right_child() == pos.child(NodeDirection::Right));`
$DIR/types/src/proof/position/position_test.rs: `.parent()`
$DIR/types/src/proof/position/position_test.rs: `.sibling()`
$DIR/types/src/proof/position/position_test.rs: `.sibling()`
$DIR/types/src/proof/position/position_test.rs: `.left_child()`
$DIR/types/src/proof/position/position_test.rs: `.right_child()`
$DIR/types/src/proof/position/position_test.rs: `.left_child()`
$DIR/types/src/proof/position/position_test.rs: `.right_child()`
$DIR/types/src/proof/position/position_test.rs: `.level()`
$DIR/types/src/proof/position/position_test.rs: `.level()`
$DIR/types/src/proof/position/position_test.rs: `.iter_ancestor_sibling()`
$DIR/types/src/proof/position/position_test.rs: `.take(20)`
$DIR/types/src/proof/position/position_test.rs: `.map(Position::to_inorder_index)`
$DIR/types/src/proof/position/position_test.rs: `.collect::<Vec<u64>>()`
$DIR/types/src/proof/position/position_test.rs: `.iter_ancestor_sibling()`
$DIR/types/src/proof/position/position_test.rs: `.take(20)`
$DIR/types/src/proof/position/position_test.rs: `.map(Position::to_inorder_index)`
$DIR/types/src/proof/position/position_test.rs: `.collect::<Vec<u64>>()`
$DIR/types/src/proof/position/position_test.rs: `.iter_ancestor_sibling()`
$DIR/types/src/proof/position/position_test.rs: `.take(20)`
$DIR/types/src/proof/position/position_test.rs: `.map(Position::to_inorder_index)`
$DIR/types/src/proof/position/position_test.rs: `.collect::<Vec<u64>>()`
$DIR/types/src/proof/position/position_test.rs: `.iter_ancestor()`
$DIR/types/src/proof/position/position_test.rs: `.take(20)`
$DIR/types/src/proof/position/position_test.rs: `.map(Position::to_inorder_index)`
$DIR/types/src/proof/position/position_test.rs: `.collect::<Vec<u64>>()`
$DIR/types/src/proof/position/position_test.rs: `.iter_ancestor()`
$DIR/types/src/proof/position/position_test.rs: `.take(20)`
$DIR/types/src/proof/position/position_test.rs: `.map(Position::to_inorder_index)`
$DIR/types/src/proof/position/position_test.rs: `.collect::<Vec<u64>>()`
$DIR/types/src/proof/position/position_test.rs: `.right_child()`
$DIR/types/src/proof/position/position_test.rs: `.parent()`
$DIR/types/src/proof/position/position_test.rs: `.left_child()`
$DIR/types/src/proof/position/position_test.rs: `.parent()`
$DIR/types/src/proof/position/position_test.rs: `.level()`
$DIR/types/src/proof/position/position_test.rs: `.parent()`
$DIR/types/src/proof/position/position_test.rs: `.level()`
$DIR/types/src/proof/position/position_test.rs: `.level()`
$DIR/types/src/proof/position/position_test.rs: `.pos_counting_from_left()`
$DIR/types/src/proof/position/position_test.rs: `.to_inorder_index()`
$DIR/types/src/proof/position/position_test.rs: `.right_child()`
$DIR/types/src/proof/position/position_test.rs: `.pos_counting_from_left()`
$DIR/types/src/proof/position/position_test.rs: `.left_child()`
$DIR/types/src/proof/position/position_test.rs: `.pos_counting_from_left()`
$DIR/types/src/proof/position/position_test.rs: `.left_child()`
$DIR/types/src/proof/position/position_test.rs: `.to_inorder_index()`
$DIR/types/src/proof/position/position_test.rs: `.to_inorder_index()`
$DIR/types/src/proof/position/position_test.rs: `.to_inorder_index()`
$DIR/types/src/proof/position/position_test.rs: `.right_child()`
$DIR/types/src/proof/position/position_test.rs: `.to_inorder_index()`
$DIR/types/src/proof/position/position_test.rs: `.left_child()`
$DIR/types/src/proof/position/position_test.rs: `.to_inorder_index()`
$DIR/types/src/proof/position/position_test.rs: `.to_inorder_index()`
$DIR/types/src/proof/position/position_test.rs: `.right_child()`
$DIR/types/src/proof/position/position_test.rs: `.to_inorder_index()`
$DIR/types/src/proof/position/position_test.rs: `.to_inorder_index()`
$DIR/types/src/proof/position/position_test.rs: `.right_child()`
$DIR/types/src/proof/position/position_test.rs: `.to_inorder_index()`
$DIR/types/src/proof/position/position_test.rs: `.to_inorder_index()`
$DIR/types/src/proof/position/position_test.rs: `.right_child()`
$DIR/types/src/proof/position/position_test.rs: `.left_child()`
$DIR/types/src/proof/position/position_test.rs: `.sibling()`
$DIR/types/src/proof/position/position_test.rs: `.right_child()`
$DIR/types/src/proof/position/position_test.rs: `.sibling()`
$DIR/types/src/proof/position/position_test.rs: `.left_child()`
$DIR/types/src/proof/position/position_test.rs: `.right_child()`
$DIR/types/src/proof/position/position_test.rs: `.child(NodeDirection::Right)`
$DIR/types/src/proof/position/position_test.rs: `.left_child()`
$DIR/types/src/proof/position/position_test.rs: `.child(NodeDirection::Left)`
$DIR/types/src/proof/unit_tests/proof_test.rs: `siblings.push(HashValue::new([i; 32]));`
$DIR/types/src/proof/unit_tests/proof_test.rs: `siblings.push(HashValue::new([i; 32]));`
$DIR/types/src/proof/unit_tests/proof_test.rs: `siblings.push(HashValue::new([i; 32]));`
$DIR/types/src/proof/unit_tests/proof_test.rs: `HashValue::zero();`
$DIR/types/src/proof/unit_tests/proof_test.rs: `.test_only_hash()`
$DIR/types/src/proof/unit_tests/proof_test.rs: `.test_only_hash()`
$DIR/types/src/proof/unit_tests/proof_test.rs: `.test_only_hash()`
$DIR/types/src/proof/unit_tests/proof_test.rs: `.test_only_hash()`
$DIR/types/src/proof/unit_tests/proof_test.rs: `.hash()`
$DIR/types/src/proof/unit_tests/proof_test.rs: `.test_only_hash()`
$DIR/types/src/proof/unit_tests/proof_test.rs: `.test_only_hash()`
$DIR/types/src/proof/unit_tests/proof_test.rs: `.test_only_hash()`
$DIR/types/src/proof/unit_tests/proof_test.rs: `.hash()`
$DIR/types/src/proof/unit_tests/proof_test.rs: `.hash()`
$DIR/types/src/proof/unit_tests/proof_test.rs: `.hash()`
$DIR/types/src/proof/unit_tests/proof_test.rs: `.test_only_hash()`
$DIR/types/src/proof/unit_tests/proof_test.rs: `.push(HashValue::new([i; 32]))`
$DIR/types/src/proof/unit_tests/proof_test.rs: `.fold(element_hash, |hash, sibling_hash| {
        TestAccumulatorInternalNode::new(hash, *sibling_hash).hash()
    })`
$DIR/types/src/proof/unit_tests/proof_test.rs: `.test_only_hash()`
$DIR/types/src/proof/unit_tests/proof_test.rs: `.push(HashValue::new([i; 32]))`
$DIR/types/src/proof/unit_tests/proof_test.rs: `.fold(element_hash, |hash, sibling_hash| {
        TestAccumulatorInternalNode::new(*sibling_hash, hash).hash()
    })`
$DIR/types/src/proof/unit_tests/proof_test.rs: `.test_only_hash()`
$DIR/types/src/proof/unit_tests/proof_test.rs: `.push(HashValue::new([i; 32]))`
$DIR/types/src/proof/unit_tests/proof_test.rs: `.rev()`
$DIR/types/src/proof/unit_tests/proof_test.rs: `.fold(element_hash, |hash, sibling_hash| {
            TestAccumulatorInternalNode::new(hash, *sibling_hash).hash()
        })`
$DIR/types/src/proof/unit_tests/proof_test.rs: `.test_only_hash()`
$DIR/types/src/proof/unit_tests/proof_test.rs: `.into()`
$DIR/types/src/proof/unit_tests/proof_test.rs: `.test_only_hash()`
$DIR/types/src/proof/unit_tests/proof_test.rs: `.into()`
$DIR/types/src/proof/unit_tests/proof_test.rs: `.hash()`
$DIR/types/src/proof/unit_tests/proof_test.rs: `.into()`
$DIR/types/src/proof/unit_tests/proof_test.rs: `.hash()`
$DIR/types/src/proof/unit_tests/proof_test.rs: `.test_only_hash()`
$DIR/types/src/proof/unit_tests/proof_test.rs: `.test_only_hash()`
$DIR/types/src/proof/unit_tests/proof_test.rs: `.test_only_hash()`
$DIR/types/src/proof/unit_tests/proof_test.rs: `.test_only_hash()`
$DIR/types/src/proof/unit_tests/proof_test.rs: `.hash()`
$DIR/types/src/proof/unit_tests/proof_test.rs: `.hash()`
$DIR/types/src/proof/unit_tests/proof_test.rs: `.hash()`
$DIR/types/src/proof/unit_tests/proof_test.rs: `.hash()`
$DIR/types/src/proof/unit_tests/proof_test.rs: `.hash()`
$DIR/types/src/proof/unit_tests/proof_test.rs: `.hash()`
$DIR/types/src/proof/unit_tests/proof_test.rs: `.hash()`
$DIR/types/src/proof/unit_tests/proof_test.rs: `.hash()`
$DIR/types/src/proof/unit_tests/proof_test.rs: `.hash()`
$DIR/types/src/proof/unit_tests/proof_test.rs: `.test_only_hash()`
$DIR/types/src/proof/unit_tests/proof_test.rs: `.test_only_hash()`
$DIR/types/src/proof/unit_tests/proof_test.rs: `.test_only_hash()`
$DIR/types/src/proof/unit_tests/proof_test.rs: `.test_only_hash()`
$DIR/types/src/proof/unit_tests/proof_test.rs: `.test_only_hash()`
$DIR/types/src/proof/unit_tests/proof_test.rs: `.test_only_hash()`
$DIR/types/src/proof/unit_tests/proof_test.rs: `.hash()`
$DIR/types/src/proof/unit_tests/proof_test.rs: `.hash()`
$DIR/types/src/proof/unit_tests/proof_test.rs: `.hash()`
$DIR/types/src/proof/unit_tests/proof_test.rs: `.hash()`
$DIR/types/src/proof/unit_tests/proof_test.rs: `.test_only_hash()`
$DIR/types/src/proof/unit_tests/proof_test.rs: `.test_only_hash()`
$DIR/types/src/proof/unit_tests/proof_test.rs: `.test_only_hash()`
$DIR/types/src/proof/unit_tests/proof_test.rs: `.test_only_hash()`
$DIR/types/src/proof/unit_tests/proof_test.rs: `.test_only_hash()`
$DIR/types/src/proof/unit_tests/proof_test.rs: `.hash()`
$DIR/types/src/proof/unit_tests/proof_test.rs: `.hash()`
$DIR/types/src/proof/unit_tests/proof_test.rs: `.hash()`
$DIR/types/src/proof/unit_tests/proof_test.rs: `.hash()`
$DIR/types/src/proof/unit_tests/proof_test.rs: `.hash()`
$DIR/types/src/proof/unit_tests/proof_test.rs: `.hash()`
$DIR/types/src/proof/unit_tests/proof_test.rs: `.hash()`
$DIR/types/src/proof/unit_tests/proof_test.rs: `.hash()`
$DIR/types/src/proof/unit_tests/proof_test.rs: `.hash()`
$DIR/types/src/proof/unit_tests/proof_test.rs: `.test_only_hash()`
$DIR/types/src/proof/unit_tests/proof_test.rs: `.test_only_hash()`
$DIR/types/src/proof/unit_tests/proof_test.rs: `.public_key()`
$DIR/types/src/proof/unit_tests/proof_test.rs: `.sign(&privkey, pubkey)`
$DIR/types/src/proof/unit_tests/proof_test.rs: `.into_inner()`
$DIR/types/src/proof/unit_tests/proof_test.rs: `.hash()`
$DIR/types/src/proof/unit_tests/proof_test.rs: `.test_only_hash()`
$DIR/types/src/proof/unit_tests/proof_test.rs: `.test_only_hash()`
$DIR/types/src/proof/unit_tests/proof_test.rs: `.hash()`
$DIR/types/src/proof/unit_tests/proof_test.rs: `.hash()`
$DIR/types/src/proof/unit_tests/proof_test.rs: `.hash()`
$DIR/types/src/proof/unit_tests/proof_test.rs: `.hash()`
$DIR/types/src/proof/unit_tests/proof_test.rs: `.hash()`
$DIR/types/src/proof/unit_tests/proof_test.rs: `.test_only_hash()`
$DIR/types/src/proof/unit_tests/proof_test.rs: `.into()`
$DIR/types/src/proof/unit_tests/proof_test.rs: `.test_only_hash()`
$DIR/types/src/proof/unit_tests/proof_test.rs: `.verify(*ACCUMULATOR_PLACEHOLDER_HASH)`
$DIR/types/src/proof/unit_tests/proof_test.rs: `.verify(*ACCUMULATOR_PLACEHOLDER_HASH)`
$DIR/types/src/proof/unit_tests/proof_test.rs: `.verify(HashValue::zero())`
$DIR/types/src/proof/unit_tests/proof_test.rs: `.hash()`
$DIR/types/src/proof/unit_tests/proof_test.rs: `.verify(*ACCUMULATOR_PLACEHOLDER_HASH)`
$DIR/types/src/unit_tests/code_debug_fmt_test.rs: `fmt::write(&mut output, format_args!("{:#?}", script))
        .expect("Error occurred while trying to format Script.");`
$DIR/types/src/unit_tests/transaction_test.rs: `.public_key()`
$DIR/types/src/unit_tests/transaction_test.rs: `.check_signature()`
$DIR/types/src/validator_verifier.rs: `author_to_signature_map.insert(validator.author(), validator.sign(&dummy_struct));`
$DIR/types/src/validator_verifier.rs: `author_to_public_key_map.insert(
                validator.author(),
                ValidatorConsensusInfo::new(validator.public_key(), 1),
            );`
$DIR/types/src/validator_verifier.rs: `author_to_signature_map.insert(validator.author(), validator.sign(&dummy_struct));`
$DIR/types/src/validator_verifier.rs: `author_to_signature_map
            .insert(unknown_validator_signer.author(), unknown_signature.clone());`
$DIR/types/src/validator_verifier.rs: `author_to_signature_map.clear();`
$DIR/types/src/validator_verifier.rs: `author_to_signature_map.insert(validator.author(), validator.sign(&dummy_struct));`
$DIR/types/src/validator_verifier.rs: `author_to_signature_map
            .insert(unknown_validator_signer.author(), unknown_signature.clone());`
$DIR/types/src/validator_verifier.rs: `author_to_signature_map.clear();`
$DIR/types/src/validator_verifier.rs: `author_to_signature_map.insert(validator.author(), validator.sign(&dummy_struct));`
$DIR/types/src/validator_verifier.rs: `author_to_signature_map.insert(unknown_validator_signer.author(), unknown_signature);`
$DIR/types/src/validator_verifier.rs: `author_to_public_key_map.insert(
                validator_signer.author(),
                ValidatorConsensusInfo::new(validator_signer.public_key(), voting_power),
            );`
$DIR/types/src/validator_verifier.rs: `author_to_signature_map.insert(
                validator_signer.author(),
                validator_signer.sign(&dummy_struct),
            );`
$DIR/types/src/validator_verifier.rs: `author_to_public_key_map.insert(
                validator_signer.author(),
                ValidatorConsensusInfo::new(validator_signer.public_key(), i as u64),
            );`
$DIR/types/src/validator_verifier.rs: `author_to_signature_map.insert(
                validator_signer.author(),
                validator_signer.sign(&dummy_struct),
            );`
$DIR/types/src/validator_verifier.rs: `author_to_signature_map
            .insert(unknown_validator_signer.author(), unknown_signature.clone());`
$DIR/types/src/validator_verifier.rs: `author_to_signature_map.clear();`
$DIR/types/src/validator_verifier.rs: `author_to_signature_map.insert(validator.author(), validator.sign(&dummy_struct));`
$DIR/types/src/validator_verifier.rs: `author_to_signature_map
            .insert(unknown_validator_signer.author(), unknown_signature.clone());`
$DIR/types/src/validator_verifier.rs: `author_to_signature_map.clear();`
$DIR/types/src/validator_verifier.rs: `author_to_signature_map.insert(validator.author(), validator.sign(&dummy_struct));`
$DIR/types/src/validator_verifier.rs: `author_to_signature_map.insert(unknown_validator_signer.author(), unknown_signature);`
$DIR/types/src/validator_verifier.rs: `.insert(validator.author(), validator.sign(&dummy_struct))`
$DIR/types/src/validator_verifier.rs: `.author()`
$DIR/types/src/validator_verifier.rs: `.sign(&dummy_struct)`
$DIR/types/src/validator_verifier.rs: `.sign(&dummy_struct)`
$DIR/types/src/validator_verifier.rs: `.author()`
$DIR/types/src/validator_verifier.rs: `.public_key()`
$DIR/types/src/validator_verifier.rs: `.sign(&dummy_struct)`
$DIR/types/src/validator_verifier.rs: `.map(|i| ValidatorSigner::random([i; 32]))`
$DIR/types/src/validator_verifier.rs: `.collect()`
$DIR/types/src/validator_verifier.rs: `.insert(
                validator.author(),
                ValidatorConsensusInfo::new(validator.public_key(), 1),
            )`
$DIR/types/src/validator_verifier.rs: `.author()`
$DIR/types/src/validator_verifier.rs: `.public_key()`
$DIR/types/src/validator_verifier.rs: `.insert(validator.author(), validator.sign(&dummy_struct))`
$DIR/types/src/validator_verifier.rs: `.author()`
$DIR/types/src/validator_verifier.rs: `.sign(&dummy_struct)`
$DIR/types/src/validator_verifier.rs: `.sign(&dummy_struct)`
$DIR/types/src/validator_verifier.rs: `.insert(unknown_validator_signer.author(), unknown_signature.clone())`
$DIR/types/src/validator_verifier.rs: `.author()`
$DIR/types/src/validator_verifier.rs: `.clear()`
$DIR/types/src/validator_verifier.rs: `.take(5)`
$DIR/types/src/validator_verifier.rs: `.insert(validator.author(), validator.sign(&dummy_struct))`
$DIR/types/src/validator_verifier.rs: `.author()`
$DIR/types/src/validator_verifier.rs: `.sign(&dummy_struct)`
$DIR/types/src/validator_verifier.rs: `.insert(unknown_validator_signer.author(), unknown_signature.clone())`
$DIR/types/src/validator_verifier.rs: `.author()`
$DIR/types/src/validator_verifier.rs: `.clear()`
$DIR/types/src/validator_verifier.rs: `.take(4)`
$DIR/types/src/validator_verifier.rs: `.insert(validator.author(), validator.sign(&dummy_struct))`
$DIR/types/src/validator_verifier.rs: `.author()`
$DIR/types/src/validator_verifier.rs: `.sign(&dummy_struct)`
$DIR/types/src/validator_verifier.rs: `.insert(unknown_validator_signer.author(), unknown_signature)`
$DIR/types/src/validator_verifier.rs: `.author()`
$DIR/types/src/validator_verifier.rs: `.map(|i| ValidatorSigner::random([i; 32]))`
$DIR/types/src/validator_verifier.rs: `.collect()`
$DIR/types/src/validator_verifier.rs: `.enumerate()`
$DIR/types/src/validator_verifier.rs: `.insert(
                validator_signer.author(),
                ValidatorConsensusInfo::new(validator_signer.public_key(), voting_power),
            )`
$DIR/types/src/validator_verifier.rs: `.author()`
$DIR/types/src/validator_verifier.rs: `.public_key()`
$DIR/types/src/validator_verifier.rs: `.insert(
                validator_signer.author(),
                validator_signer.sign(&dummy_struct),
            )`
$DIR/types/src/validator_verifier.rs: `.author()`
$DIR/types/src/validator_verifier.rs: `.sign(&dummy_struct)`
$DIR/types/src/validator_verifier.rs: `.map(|i| ValidatorSigner::random([i; 32]))`
$DIR/types/src/validator_verifier.rs: `.collect()`
$DIR/types/src/validator_verifier.rs: `.enumerate()`
$DIR/types/src/validator_verifier.rs: `.insert(
                validator_signer.author(),
                ValidatorConsensusInfo::new(validator_signer.public_key(), i as u64),
            )`
$DIR/types/src/validator_verifier.rs: `.author()`
$DIR/types/src/validator_verifier.rs: `.public_key()`
$DIR/types/src/validator_verifier.rs: `.insert(
                validator_signer.author(),
                validator_signer.sign(&dummy_struct),
            )`
$DIR/types/src/validator_verifier.rs: `.author()`
$DIR/types/src/validator_verifier.rs: `.sign(&dummy_struct)`
$DIR/types/src/validator_verifier.rs: `.sign(&dummy_struct)`
$DIR/types/src/validator_verifier.rs: `.insert(unknown_validator_signer.author(), unknown_signature.clone())`
$DIR/types/src/validator_verifier.rs: `.author()`
$DIR/types/src/validator_verifier.rs: `.clear()`
$DIR/types/src/validator_verifier.rs: `.skip(2)`
$DIR/types/src/validator_verifier.rs: `.insert(validator.author(), validator.sign(&dummy_struct))`
$DIR/types/src/validator_verifier.rs: `.author()`
$DIR/types/src/validator_verifier.rs: `.sign(&dummy_struct)`
$DIR/types/src/validator_verifier.rs: `.insert(unknown_validator_signer.author(), unknown_signature.clone())`
$DIR/types/src/validator_verifier.rs: `.author()`
$DIR/types/src/validator_verifier.rs: `.clear()`
$DIR/types/src/validator_verifier.rs: `.take(3)`
$DIR/types/src/validator_verifier.rs: `.insert(validator.author(), validator.sign(&dummy_struct))`
$DIR/types/src/validator_verifier.rs: `.author()`
$DIR/types/src/validator_verifier.rs: `.sign(&dummy_struct)`
$DIR/types/src/validator_verifier.rs: `.insert(unknown_validator_signer.author(), unknown_signature)`
$DIR/types/src/validator_verifier.rs: `.author()`
$DIR/vm-validator/src/unit_tests/vm_validator_test.rs: `.validate_transaction(transaction)`
$DIR/vm-validator/src/unit_tests/vm_validator_test.rs: `.validate_transaction(transaction)`
$DIR/vm-validator/src/unit_tests/vm_validator_test.rs: `.validate_transaction(transaction)`
$DIR/vm-validator/src/unit_tests/vm_validator_test.rs: `.validate_transaction(transaction)`
$DIR/vm-validator/src/unit_tests/vm_validator_test.rs: `.large_transaction_cutoff.get()`
$DIR/vm-validator/src/unit_tests/vm_validator_test.rs: `.intrinsic_gas_per_byte.get()`
$DIR/vm-validator/src/unit_tests/vm_validator_test.rs: `.validate_transaction(transaction)`
$DIR/vm-validator/src/unit_tests/vm_validator_test.rs: `.validate_transaction(transaction)`
$DIR/vm-validator/src/unit_tests/vm_validator_test.rs: `.validate_transaction(transaction)`
$DIR/vm-validator/src/unit_tests/vm_validator_test.rs: `.validate_transaction(transaction)`
$DIR/vm-validator/src/unit_tests/vm_validator_test.rs: `.validate_transaction(transaction)`
$DIR/vm-validator/src/unit_tests/vm_validator_test.rs: `.validate_transaction(transaction)`
$DIR/vm-validator/src/unit_tests/vm_validator_test.rs: `.public_key()`
$DIR/vm-validator/src/unit_tests/vm_validator_test.rs: `.validate_transaction(transaction)`
$DIR/vm-validator/src/unit_tests/vm_validator_test.rs: `.validate_transaction(transaction)`
$DIR/vm-validator/src/unit_tests/vm_validator_test.rs: `.validate_transaction(transaction)`
$DIR/vm-validator/src/unit_tests/vm_validator_test.rs: `.into_inner()`
$DIR/vm-validator/src/unit_tests/vm_validator_test.rs: `.validate_transaction(transaction)`
$DIR/vm-validator/src/unit_tests/vm_validator_test.rs: `.into_inner()`
$DIR/vm-validator/src/unit_tests/vm_validator_test.rs: `.validate_transaction(transaction)`
$DIR/vm-validator/src/unit_tests/vm_validator_test.rs: `.into_inner()`
$DIR/vm-validator/src/unit_tests/vm_validator_test.rs: `.validate_transaction(bad_transaction)`
$DIR/vm-validator/src/unit_tests/vm_validator_test.rs: `.validate_transaction(transaction)`
$DIR/vm-validator/src/unit_tests/vm_validator_test.rs: `.id()`
$DIR/vm-validator/src/unit_tests/vm_validator_test.rs: `.validate_transaction(transaction)`
$DIR/vm-validator/src/unit_tests/vm_validator_test.rs: `.validate_transaction(transaction)`
$DIR/vm-validator/src/unit_tests/vm_validator_test.rs: `.validate_transaction(transaction)`
