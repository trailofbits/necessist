299 candidates in 9 test files
$DIR/src/mime/encodedword_test.go: dry running
$DIR/src/mime/encodedword_test.go: mutilating
$DIR/src/mime/encodedword_test.go: `.Repeat("é", 10),` nonbuildable
$DIR/src/mime/encodedword_test.go: `Repeat("=C3=A9", 10) ` nonbuildable
$DIR/src/mime/encodedword_test.go: `.Repeat("é", 11),` nonbuildable
$DIR/src/mime/encodedword_test.go: `Repeat("=C3=A9", 10) ` nonbuildable
$DIR/src/mime/encodedword_test.go: `.Repeat("\xe9", 22)` nonbuildable
$DIR/src/mime/encodedword_test.go: `.Repeat("=E9", 22)` nonbuildable
$DIR/src/mime/encodedword_test.go: `.Repeat("\x80", 22)` nonbuildable
$DIR/src/mime/encodedword_test.go: `.Repeat("=80", 21)` nonbuildable
$DIR/src/mime/encodedword_test.go: `.Repeat("\xe9", 45)` nonbuildable
$DIR/src/mime/encodedword_test.go: `.Repeat("6enp", 15)` nonbuildable
$DIR/src/mime/encodedword_test.go: `.Repeat("\x80", 48)` nonbuildable
$DIR/src/mime/encodedword_test.go: `.Repeat("gICA", 15)` nonbuildable
$DIR/src/mime/encodedword_test.go: `.enc.Encode(test.charset, test.src)` nonbuildable
$DIR/src/mime/encodedword_test.go: `.Repeat("à", 30)}` nonbuildable
$DIR/src/mime/encodedword_test.go: `.Repeat("é", 60)}` nonbuildable
$DIR/src/mime/encodedword_test.go: `.Repeat("ï", 25)}` nonbuildable
$DIR/src/mime/encodedword_test.go: `.Repeat("ô", 37)}` nonbuildable
$DIR/src/mime/encodedword_test.go: `.Repeat("\x80", 50)` nonbuildable
$DIR/src/mime/encodedword_test.go: `.enc.Encode("utf-8", test.src)` nonbuildable
$DIR/src/mime/encodedword_test.go: `wordLen = 0` timed-out
$DIR/src/mime/encodedword_test.go: `wordLen++` passed
$DIR/src/mime/encodedword_test.go: `.Decode(test.src)` nonbuildable
$DIR/src/mime/encodedword_test.go: `.DecodeHeader(test.src)` nonbuildable
$DIR/src/mime/encodedword_test.go: `.ReadAll(input)` nonbuildable
$DIR/src/mime/encodedword_test.go: `i++` failed
$DIR/src/mime/encodedword_test.go: `.NewReader(got)` nonbuildable
$DIR/src/mime/encodedword_test.go: `.DecodeHeader(test.src)` nonbuildable
$DIR/src/mime/encodedword_test.go: `.New("Test error")` nonbuildable
$DIR/src/mime/encodedword_test.go: `.DecodeHeader("=?charset?Q?foo?=")` nonbuildable
$DIR/src/mime/mediatype_test.go: dry running
$DIR/src/mime/mediatype_test.go: mutilating
$DIR/src/mime/mediatype_test.go: `sm[s[i]] = s[i+1]` failed
$DIR/src/mime/mediatype_test.go: `.DeepEqual(params, test.p)` nonbuildable
$DIR/src/mime/mediatype_test.go: `.ToLower(tt.typ)` nonbuildable
$DIR/src/mime/mediatype_test.go: `k = strings.ToLower(k)` failed
$DIR/src/mime/mediatype_test.go: `.ToLower(k)` nonbuildable
$DIR/src/mime/multipart/formdata_test.go: dry running
$DIR/src/mime/multipart/formdata_test.go: Warning: dry run failed: code=1
stdout=""
stderr=```
package std/mime/multipart
multipart/formdata.go:10:2: use of internal package internal/godebug not allowed
```


Silence this warning with: --allow dry-run-failed
$DIR/src/mime/multipart/multipart_test.go: dry running
$DIR/src/mime/multipart/multipart_test.go: Warning: dry run failed: code=1
stdout=""
stderr=```
package std/mime/multipart
multipart/formdata.go:10:2: use of internal package internal/godebug not allowed
```


$DIR/src/mime/multipart/writer_test.go: dry running
$DIR/src/mime/multipart/writer_test.go: Warning: dry run failed: code=1
stdout=""
stderr=```
package std/mime/multipart
multipart/formdata.go:10:2: use of internal package internal/godebug not allowed
```


$DIR/src/mime/quotedprintable/reader_test.go: dry running
$DIR/src/mime/quotedprintable/reader_test.go: mutilating
$DIR/src/mime/quotedprintable/reader_test.go: `.Copy(&buf, NewReader(strings.NewReader(tt.in)))` nonbuildable
$DIR/src/mime/quotedprintable/reader_test.go: `.NewReader(tt.in)` nonbuildable
$DIR/src/mime/quotedprintable/reader_test.go: `.String()` nonbuildable
$DIR/src/mime/quotedprintable/reader_test.go: `.Sprint(err)` nonbuildable
$DIR/src/mime/quotedprintable/reader_test.go: `.LookPath("qprint")` nonbuildable
$DIR/src/mime/quotedprintable/reader_test.go: `.Short()` nonbuildable
$DIR/src/mime/quotedprintable/reader_test.go: `n = 4` passed
$DIR/src/mime/quotedprintable/reader_test.go: `everySequence("", "0A \r\n=", n, func(s string) {
		if strings.HasSuffix(s, "=") || strings.Contains(s, "==") {
			return
		}
		buf.Reset()
		_, err := io.Copy(&buf, NewReader(strings.NewReader(s)))
		if err != nil {
			errStr := err.Error()
			if strings.Contains(errStr, "invalid bytes after =:") {
				errStr = "invalid bytes after ="
			}
			res[errStr]++
			if strings.Contains(errStr, "invalid hex byte ") {
				if strings.HasSuffix(errStr, "0x20") && (strings.Contains(s, "=0 ") || strings.Contains(s, "=A ") || strings.Contains(s, "= ")) {
					return
				}
				if strings.HasSuffix(errStr, "0x3d") && (strings.Contains(s, "=0=") || strings.Contains(s, "=A=")) {
					return
				}
				if strings.HasSuffix(errStr, "0x0a") || strings.HasSuffix(errStr, "0x0d") {
					// bunch of cases; since whitespace at the end of a line before \n is removed.
					return
				}
			}
			if strings.Contains(errStr, "unexpected EOF") {
				return
			}
			if errStr == "invalid bytes after =" && badSoftRx.MatchString(s) {
				return
			}
			t.Errorf("decode(%q) = %v", s, err)
			return
		}
		if *useQprint {
			cmd := exec.Command("qprint", "-d")
			cmd.Stdin = strings.NewReader(s)
			stderr, err := cmd.StderrPipe()
			if err != nil {
				panic(err)
			}
			qpres := make(chan any, 2)
			go func() {
				br := bufio.NewReader(stderr)
				s, _ := br.ReadString('\n')
				if s != "" {
					qpres <- errors.New(s)
					if cmd.Process != nil {
						// It can get stuck on invalid input, like:
						// echo -n "0000= " | qprint -d
						cmd.Process.Kill()
					}
				}
			}()
			go func() {
				want, err := cmd.Output()
				if err == nil {
					qpres <- want
				}
			}()
			select {
			case got := <-qpres:
				if want, ok := got.([]byte); ok {
					if string(want) != buf.String() {
						t.Errorf("go decode(%q) = %q; qprint = %q", s, want, buf.String())
					}
				} else {
					t.Logf("qprint -d(%q) = %v", s, got)
				}
			case <-time.After(5 * time.Second):
				t.Logf("qprint timeout on %q", s)
			}
		}
		res["OK"]++
	})` nonbuildable
$DIR/src/mime/quotedprintable/reader_test.go: `.HasSuffix(s, "=")` nonbuildable
$DIR/src/mime/quotedprintable/reader_test.go: `.Contains(s, "==")` nonbuildable
$DIR/src/mime/quotedprintable/reader_test.go: `buf.Reset()` passed
$DIR/src/mime/quotedprintable/reader_test.go: `.Reset()` nonbuildable
$DIR/src/mime/quotedprintable/reader_test.go: `.Copy(&buf, NewReader(strings.NewReader(s)))` nonbuildable
$DIR/src/mime/quotedprintable/reader_test.go: `.NewReader(s)` nonbuildable
$DIR/src/mime/quotedprintable/reader_test.go: `.Contains(errStr, "invalid bytes after =:")` nonbuildable
$DIR/src/mime/quotedprintable/reader_test.go: `errStr = "invalid bytes after ="` timed-out
$DIR/src/mime/quotedprintable/reader_test.go: `res[errStr]++` failed
$DIR/src/mime/quotedprintable/reader_test.go: `.Contains(errStr, "invalid hex byte ")` nonbuildable
$DIR/src/mime/quotedprintable/reader_test.go: `.HasSuffix(errStr, "0x20")` nonbuildable
$DIR/src/mime/quotedprintable/reader_test.go: `.Contains(s, "=0 ")` nonbuildable
$DIR/src/mime/quotedprintable/reader_test.go: `.Contains(s, "=A ")` nonbuildable
$DIR/src/mime/quotedprintable/reader_test.go: `.Contains(s, "= ")` nonbuildable
$DIR/src/mime/quotedprintable/reader_test.go: `.HasSuffix(errStr, "0x3d")` nonbuildable
$DIR/src/mime/quotedprintable/reader_test.go: `.Contains(s, "=0=")` nonbuildable
$DIR/src/mime/quotedprintable/reader_test.go: `.Contains(s, "=A=")` nonbuildable
$DIR/src/mime/quotedprintable/reader_test.go: `.HasSuffix(errStr, "0x0a")` nonbuildable
$DIR/src/mime/quotedprintable/reader_test.go: `.HasSuffix(errStr, "0x0d")` nonbuildable
$DIR/src/mime/quotedprintable/reader_test.go: `.Contains(errStr, "unexpected EOF")` nonbuildable
$DIR/src/mime/quotedprintable/reader_test.go: `.MatchString(s)` nonbuildable
$DIR/src/mime/quotedprintable/reader_test.go: `.Command("qprint", "-d")` nonbuildable
$DIR/src/mime/quotedprintable/reader_test.go: `cmd.Stdin = strings.NewReader(s)` passed
$DIR/src/mime/quotedprintable/reader_test.go: `.NewReader(s)` nonbuildable
$DIR/src/mime/quotedprintable/reader_test.go: `.StderrPipe()` nonbuildable
$DIR/src/mime/quotedprintable/reader_test.go: `panic(err)` passed
$DIR/src/mime/quotedprintable/reader_test.go: `.NewReader(stderr)` nonbuildable
$DIR/src/mime/quotedprintable/reader_test.go: `.ReadString('\n')` nonbuildable
$DIR/src/mime/quotedprintable/reader_test.go: `qpres <- errors.New(s)` nonbuildable
$DIR/src/mime/quotedprintable/reader_test.go: `.New(s)` nonbuildable
$DIR/src/mime/quotedprintable/reader_test.go: `cmd.Process.Kill()` passed
$DIR/src/mime/quotedprintable/reader_test.go: `.Process.Kill()` nonbuildable
$DIR/src/mime/quotedprintable/reader_test.go: `.Output()` nonbuildable
$DIR/src/mime/quotedprintable/reader_test.go: `qpres <- want` nonbuildable
$DIR/src/mime/quotedprintable/reader_test.go: `.String()` nonbuildable
$DIR/src/mime/quotedprintable/reader_test.go: `.After(5 * time.Second)` nonbuildable
$DIR/src/mime/quotedprintable/reader_test.go: `res["OK"]++` failed
$DIR/src/mime/quotedprintable/reader_test.go: `outcomes = append(outcomes, fmt.Sprintf("%v: %d", k, v))` nonbuildable
$DIR/src/mime/quotedprintable/reader_test.go: `.Sprintf("%v: %d", k, v)` nonbuildable
$DIR/src/mime/quotedprintable/reader_test.go: `sort.Strings(outcomes)` nonbuildable
$DIR/src/mime/quotedprintable/reader_test.go: `.Strings(outcomes)` nonbuildable
$DIR/src/mime/quotedprintable/reader_test.go: `.Join(outcomes, "\n")` nonbuildable
$DIR/src/mime/quotedprintable/reader_test.go: `.Short()` nonbuildable
$DIR/src/mime/quotedprintable/reader_test.go: `want = `OK: 896
invalid bytes after =: 100
quotedprintable: invalid hex byte 0x0d: 26
unexpected EOF: 3`` passed
$DIR/src/mime/quotedprintable/writer_test.go: dry running
$DIR/src/mime/quotedprintable/writer_test.go: mutilating
$DIR/src/mime/quotedprintable/writer_test.go: `.Write(testMsg)` nonbuildable
$DIR/src/mime/quotedprintable/writer_test.go: `.ReadAll(r)` nonbuildable
$DIR/src/mime/type_test.go: dry running
$DIR/src/mime/type_test.go: mutilating
$DIR/src/mime/type_test.go: `once = sync.Once{}` passed
$DIR/src/mime/type_test.go: `clearMimeTypes()` passed
$DIR/src/mime/type_test.go: `setType(".foo", "x/foo")` failed
$DIR/src/mime/type_test.go: `setType(".bar", "x/bar")` failed
$DIR/src/mime/type_test.go: `setType(".Bar", "x/bar; capital=1")` failed
$DIR/src/mime/type_test.go: `const custom = "test/test; charset=iso-8859-1"` nonbuildable
$DIR/src/mime/type_test.go: `const caps = "test/test; WAS=ALLCAPS"` nonbuildable
$DIR/src/mime/type_test.go: `clearMimeTypes()` passed
$DIR/src/mime/type_test.go: `setType(".TEST", caps)` failed
$DIR/src/mime/type_test.go: `setType(".tesT", custom)` failed
$DIR/src/mime/type_test.go: `clearMimeTypes()` passed
$DIR/src/mime/type_test.go: `setType(".gif", "image/gif")` failed
$DIR/src/mime/type_test.go: `setType(".a", "foo/letter")` failed
$DIR/src/mime/type_test.go: `setType(".b", "foo/letter")` passed
$DIR/src/mime/type_test.go: `setType(".B", "foo/letter")` passed
$DIR/src/mime/type_test.go: `setType(".PNG", "image/png")` failed
$DIR/src/mime/type_test.go: `.Contains(err.Error(), tt.wantErr)` nonbuildable
$DIR/src/mime/type_test.go: `.DeepEqual(got, tt.want)` nonbuildable
$DIR/src/mime/type_test.go: `.AllocsPerRun(10000, func() {
		TypeByExtension(".html")
		TypeByExtension(".HtML")
	})` nonbuildable
$DIR/src/mime/type_test.go: `TypeByExtension(".html")` passed
$DIR/src/mime/type_test.go: `TypeByExtension(".HtML")` passed
$DIR/src/mime/type_test.go: `clearMimeTypes()` passed
$DIR/src/mime/type_test.go: `setMimeTypes(builtinTypesLower, builtinTypesLower)` failed
$DIR/src/mime/type_test.go: `.DeepEqual(got, tt.want)` nonbuildable
$DIR/src/mime/type_unix_test.go: dry running
$DIR/src/mime/type_unix_test.go: mutilating
$DIR/src/mime/type_unix_test.go: `initMimeUnixTest(t)` failed
